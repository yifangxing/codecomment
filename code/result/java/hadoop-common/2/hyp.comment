1 Creates a new file range instance with specified byte offset and length. @param offset starting byte position @param length number of bytes in the range
2 Creates a new file range instance with specified byte offset and length. @param offset starting byte position @param length number of bytes in the range @param reference associated object for context
3 Validates and sanitizes a FileRange object, throwing exceptions for invalid inputs. @param range input file range
4 Validates object and throws exception if it's null. @param obj object to check @param argName name of the argument for error message
5 Validates that a long value is positive. @param value long value to check @param argName name of argument being validated
6 Validates that the provided long value is non-negative. @param value input value to check @param argName name of argument being validated
7 Validates argument presence and throws exception if not found. @param isPresent true if present @param argName name of the argument
8 Validates input argument and throws IllegalArgumentException with formatted error message if false. @param isValid condition to check @param argName name of the argument being validated
9 Validates input argument against a set of valid values. @param isValid boolean indicating whether the value is valid @param argName name of the argument being validated @param validValues comma-separated list of allowed values
10 Validates equality between two values and their respective names. @param value1 first value to compare @param value1Name name of the first value @param value2 second value to compare @param value2Name name of the second value
11 Validates that the first value is an integer multiple of the second. @param value1 candidate value @param value1Name name of the candidate value @param value2 divisor @param value2Name name of the divisor
12 Validates that the first value is greater than the second. @param value1 value to validate @param value1Name name of value1 for error message @param value2 value to compare with @param value2Name name of value2 for error message
13 Validates that the first value is greater than or equal to the second. @param value1 long value @param value1Name name of the first value @param value2 long value @param value2Name name of the second value
14 Validates that the first value is less than or equal to the second. @param value1 value being checked @param value1Name name of value1 for error message @param value2 value against which value1 is compared @param value2Name name of value2 for error message
15 Validates a long value against a specified inclusive range. @param value numeric value to validate @param valueName descriptive name for the value @param minValueInclusive minimum allowed value (inclusive) @param maxValueInclusive maximum allowed value (inclusive)
16 Validates a numerical value against inclusive minimum and maximum bounds. @param value value to check @param valueName human-readable name of the value @param minValueInclusive minimum allowed value (inclusive) @param maxValueInclusive maximum allowed value (inclusive)
17 Validates paths for bulk deletion by checking number of paths and each path's absoluteness and relation to a designated parent directory. @param paths collection of paths to validate @param pageSize maximum number of paths per page @param basePath parent directory for path validation
18 Initializes block upload data from a file. @param file the file to upload
19 Verifies and casts a serializable object to an IOStatisticsSnapshot. @param snapshot the object to cast
20 Creates a map of Enum constants to lowercase string keys for the given prefix and enum class. @param prefix common prefix for all enum values @param enumClass EnumSet containing the enumeration type @return Map of lowercase string keys to corresponding Enum values or null if duplicate values found
21 Merges and validates file ranges from input list. @param input collection of file ranges to process
22 Verifies if a file or directory is a subdirectory of another. @param parent Path to the potential parent directory @param child Path to the file or directory in question @return true if child is a subdirectory, false otherwise
23 Verifies if two file paths have the same function mask URI. @param qualPath1 first path to compare @param qualPath2 second path to compare @return true if both paths share the same function mask, false otherwise
24 Checks if file exists and can be deleted. @param f Path to the file
25 Deletes files on exit by iterating over the deleteOnExit set. @param none
26 Verifies if a file has a valid checksum. @param file the Path object to check
27 Checks if the given Hadoop file has a valid checksum. @param file Path to the file to check
28 Updates BlockLocation array to reflect new file offset in HAR and adjusts block lengths accordingly. @param locations array of BlockLocation objects @param start new start position @param len length of the data block @param fileOffsetInHar current file offset within the Hadoop Archive @return updated BlockLocation array
29 Invokes URI-specific operation on underlying URI instance. @param o FileStatus object containing associated metadata
30 Extracts paths from a list of file statuses based on m1 mask. @param stats array of Hadoop file statuses @return Path[] containing extracted paths or null if input is invalid
31 Resolves path to file status with FUNC_MASK filter. @param f input file
32 Retrieves replication information from source file system. @param src Path to the source file
33 Calls m1() to retrieve block size mask value. @param f file path
34 Retrieves default replication settings based on provided file system context. @param path Hadoop Path object representing file system location
35 Aggregates system-wide statistics and updates local data structures.
36 Validates read parameters and checks if the destination buffer has enough space. @param position file system position @param buffer byte array to fill @param offset starting position in buffer @param length number of bytes to read
37 Validates the provided upload ID. @param uploadId byte array containing unique identifier
38 Validates and processes multipart upload handles. @param partHandles map of part indices to PartHandle objects
39 Validates and extracts capability from the given path and capability. @param path Hadoop file system path @param capability capability string associated with the path
40 Initializes an IrqHandler instance with the given name and Interrupted handler. @param name unique identifier for the signal @param handler Interrupted object to handle signals
41 Partitions the input list into pages of specified size. @param originalList input list to partition @param pageSize number of elements per page @return List<List<T>> partitioned list, or empty list if invalid inputs
42 Initializes JsonSerialization with specified class type and configuration. @param classType Java class to serialize/deserialize @param failOnUnknownProperties whether to throw exceptions on unknown properties @param pretty whether to format output JSON with indentation
43 Initializes storage statistics with specified name, scheme and IO statistics. @param name unique identifier for storage metrics @param scheme storage system scheme @param ioStatistics input/output statistics to manage
44 Retrieves a map of file system operation masks with corresponding statistics. @return Map of operation masks to Statistics objects
45 Creates a new FSDataOutputStream with specified configuration. @param f output file path @param permission file system permissions @param flags creation flags @param bufferSize buffer size @param replication replication factor @param blockSize block size @param progress progress tracker
46 Creates a non-recursive FSDataOutputStream with specified settings. @param f file path @param permission file system permissions @param overwrite whether to overwrite existing file @param bufferSize buffer size @param replication replication factor @param blockSize block size @param progress progress monitor
47 Constructs a PathAccessDeniedException with the specified Hadoop filesystem path and default error message. @param path unique file system path
48 Constructs a PathIOException with a specified Hadoop filesystem path and default error message. @param path unique file system path
49 Constructs a PathIOException with the specified Hadoop filesystem path and default error message. @param path unique file system path
50 Constructs a PathIOException with the specified Hadoop filesystem path and default error message. @param path unique file system path
51 Constructs a PathIOException with the specified Hadoop filesystem path and default error message. @param path unique file system path
52 Constructs a PathIOException with the specified Hadoop filesystem path and error message. @param path unique file system path @param message detailed exception description
53 Returns the mask value.
54 Returns permission mask representing user action. @return short integer representing user action
55 Constructs a permission mask from internal value. @return short integer representing the permission mask
56 Applies a transformation to each string in the array using m1. @param strings input array of strings
57 Returns the mask value based on the configuration. @return true if configured to use the mask
58 Verifies if a file exists and has valid checksums. @param f the Path to check
59 Checks if PathData object represents a directory. @param item PathData object to check
60 Returns the ACL entries for a given PathData object, considering m1() condition and stat.m2() value.
61 Checks if a file is a directory, handling potential FileNotFoundException. @param f Path to the file
62 Constructs a permission mask representing user, group, and others actions for the specified FileStatus object. @param file status of the file to construct permissions for
63 Checks if neither m1 nor m2 is set.
64 Returns the symbolic link target for this file object. @return Path to the linked file or null if not a symlink
65 Calculates the length-based mask value from Hadoop filesystem. @throws IOException if an I/O error occurs while fetching file length
66 Calculates file system mask value based on path length. @param f Path object representing a file @return Mask value as a long integer
67 Retrieves storage policy SPI for the given file path. @param src file system path
68 Sets extended file attributes using XATTR. @param path File system path @param name Attribute name @param value Attribute value
69 Constructs a PathIOException with specified Hadoop filesystem path and underlying cause. @param path Hadoop filesystem path causing the exception @param cause underlying Throwable that triggered the exception
70 Seeks to the specified position in the file stream and updates internal state. @param position desired target byte offset
71 Reads record length from SequenceFile, handling synchronization and compression. @throws IOException if I/O error or file corruption occurs
72 Returns a mask value based on input stream's m1(). @throws IOException if an I/O error occurs
73 Registers the given expression class with the factory. @param expressionClass class of the expression to register
74 Registers command classes with the CommandFactory. @param registrarClass class containing commands to register
75 Reads data from file system at specified position into provided buffer. @param pos offset to read from @param b target storage for read data @param offset starting index within buffer @param length amount of data to read @return number of bytes read or -1 on error
76 Reads data from file system into provided buffer starting at specified position. @param pos current read position @param b output buffer for data @param offset starting index within buffer @param length number of bytes to read
77 Expands a file pattern with offset into a list of fully resolved paths. @param filePatternWithOffset input file pattern with associated offset
78 Fetches directory entries with optional pagination. @param f Path to the directory @param token Optional pagination token (null for no pagination)
79 Converts byte array into a string representation based on the specified encoding. @param value input byte array @param encoding XAttrCodec instance (HEX, BASE64, or UTF-8)
80 Filters file statuses based on a provided filter, adding matching entries to the results list. @param results list of filtered FileStatus objects @param f Path object representing the directory or file being processed @param filter PathFilter instance used for filtering
81 Initializes a new MetricsTag instance with given metrics information and value. @param info non-null MetricsInfo object @param value metric value string
82 Initializes an AbstractMetric instance with provided metrics information. @param info non-null MetricsInfo object
83 Retrieves and sets the delegation token. @param url URL to authenticate with @param token Token object for authentication @return DelegationToken object or null on failure
84 Authenticates using a delegation token and the specified user. @param url URL to authenticate @param token Delegation token object @param doAsUser User ID to act on behalf of @return authentication result
85 Authenticates URL with delegation token and user. @param url target URL @param token delegation token for authentication @param doAsUser username to act on behalf of
86 Initializes ValueQueue with specified parameters. @param numValues total number of values to manage @param lowWatermark minimum percentage of values required before refilling @param expiry time after which cache entries expire (in milliseconds) @param numFillerThreads number of threads used for filling queues @param policy SyncGenerationPolicy instance @param refiller QueueRefiller instance to refill queues
87 Validates object reference and returns it. @param obj non-null object reference
88 Retrieves or creates storage statistics by name. @param name unique identifier @param provider provider of storage statistics @return StorageStatistics object
89 Updates m1 statistics in global storage.
90 Closes resources and logs exceptions. @throws IOException if an I/O error occurs
91 Copies data from source to destination file using native code on Windows or Java I/O on other platforms. @param src source file @param dst destination file
92 Closes input stream using m1 method. @param stream input stream to be closed
93 Closes resources and logs exceptions in the provided streams. @param streams Closeable resources to be closed
94 Validates a directory by creating a temporary file within it. @param file directory to be validated
95 Verifies file capabilities and updates statistics. @throws IOException if an I/O error occurs
96 Updates statistic duration with current operation's details. @param failed indicates whether the operation was successful
97 Updates buffer length, validating the new count. @param newCount updated buffer size @return previous buffer length
98 Retrieves server connector address by index. @param index non-negative index into webServer connectors array
99 Initializes the GcTimeMonitor with specified observation window, sleep interval, maximum GC time percentage, and alert handler. @param observationWindowMs observation window in milliseconds @param sleepIntervalMs sleep interval in milliseconds @param maxGcTimePercentage maximum allowed GC time as a percentage @param alertHandler callback for GC time alerts
100 Retrieves servlet-specific mask value from HTTP request. @param request HttpServletRequest object @param servletName name of the servlet
101 Compares the replication factors of two file status objects. @param o object to compare with current file status
102 Calls URI-specific implementation of m2(). @return result from underlying URI object
103 Updates mean statistic with masked sample count and sum. @param sampleCount non-negative count of samples @param newSum new total sum of samples
104 Merges two MeanStatistic instances, updating the current instance with the combined values. @param other The MeanStatistic instance to be merged
105 Formats input/output statistic map into a formatted string representation. @param map Map of statistics with unique keys and values
106 Formats IO statistic entry with given name and value. @param entry input/output statistic entry
107 Creates a duration tracker instance with specified key and count. @param key unique identifier @param count time duration count
108 Creates a LongStatistic instance from a map entry containing name and value. @param e map entry with statistical measurement name and value
109 Initializes EvaluatingStatisticsMap with passthrough function.
110 Associates an evaluation function with a given key to track dynamic IO statistics. @param key unique identifier @param eval function to evaluate counter statistics
111 Registers a custom function evaluator for dynamic IO statistics. @param key unique identifier @param eval function to evaluate gauge values
112 Registers a custom evaluation function for minimum statistics. @param key unique identifier @param eval function to evaluate and update minimum statistic
113 Associates an evaluator function with a given key in the maximum statistics. @param key unique identifier @param eval function to evaluate for maximum value calculation
114 Registers a custom function to evaluate mean statistics. @param key unique identifier @param eval function to calculate mean statistic
115 Wraps IOStatistics instance with default source. @param statistics IOStatistics object to be wrapped
116 Returns an instance of EmptyIOStatisticsStore with specific mask configuration. @return EmptyIOStatisticsStore object configured with m1() values
117 Returns an empty I/O statistics instance with default mask settings.
118 Retrieves and updates counter map value by key. @param key unique statistic identifier @return AtomicLong the retrieved or default counter value
119 Retrieves maximum I/O statistic value by key. @param key unique identifier for the statistic
120 Retrieves minimum statistic value by key. @param key unique identifier for the statistic
121 Retrieves gauge statistic value from store and updates with default if not found. @param key unique identifier for the gauge statistic @return AtomicLong the retrieved or default gauge value
122 Retrieves mean statistic value by key. @param key unique identifier for the statistic
123 Retrieves primary duration tracker's value.
124 Sets the wrapped IOStatistics instance. @param wrapped non-null IOStatistics object to be wrapped
125 Returns dynamically built I/O statistics with current state. @return DynamicIOStatistics object or null if not built
126 Ensures FlagSet is mutable.
127 Initializes and returns the byte array for data block upload. @throws IOException if an I/O error occurs during initialization
128 Binds signal handler with given name. @param name unique identifier of the signal
129 Checks if the resource is closed by verifying its reference count. @param newVal new reference count value
130 Copies specified values from source to destination map using the provided function and returns the updated destination map. @param source source map @param copyFn function to apply to each entry during copying
131 Creates an IO statistics builder with a mask. @param factory optional DurationTrackerFactory instance @param statistic name of the statistic to track @param input original CallableRaisingIOE to wrap @return wrapped IO statistics builder
132 Combines two duration trackers into a single factory.
133 Retrieves the current backoff disconnected mask value.
134 Retrieves RPC slow call mask value. @return current slow call mask value
135 Retrieves RPC requeue calls counter value. @return current m1 counter value
136 Clears and updates all IO statistics within the context.
137 Initializes IO statistics snapshot with empty concurrent maps.
138 Returns flag indicating whether thread-specific IO statistics are enabled. @return true if enabled, false otherwise
139 Initializes BuiltInGzipDecompressor with default state and CRC settings.
140 Initializes encryption context based on stream offset and codec parameters. @throws IOException if an I/O error occurs
141 Calculates the optimal buffer size for cryptographic operations. @param codec CryptoCodec object @param bufferSize current buffer size
142 Creates a hard link from the source file to the target file. @param src source file @param dst target file for the hard link
143 Constructs a checksum object with specified CRC32 settings and an MD5 hash. @param bytesPerCRC number of bytes per CRC calculation @param crcPerBlock CRC value for each block @param md5 MD5 hash to combine with the CRC32 checksum
144 Default constructor with default CRC32 settings and no MD5 hash.
145 Constructs a checksum object with specified CRC32 settings and an MD5 hash. @param bytesPerCRC number of bytes per CRC calculation @param crcPerBlock CRC value for each block @param md5 MD5 hash to combine with the CRC32 checksum
146 Compiles a glob pattern into a regex pattern and handles errors. @param glob input glob pattern string
147 Delegates file status iteration to underlying Hadoop FileSystem. @param f directory path @return iterator over FileStatus objects or null if not found
148 Resolves file path to canonical or original form. @param file Hadoop File object @param makeCanonicalPath true for canonical, false for original path
149 Retrieves file permissions based on the provided mode. @param mode file access mode (e.g. read, write, execute)
150 Validates and executes shell command, throwing IOException if any entry is null.
151 Validates command lengths for Windows shell execution. @param commands variable number of commands to validate
152 Builds a PowerShell script to kill a process at a specified host. @param processName name of the process to terminate @param host hostname where the process will be terminated @return PowerShell script as a string or null on failure
153 Delegates checksum calculation to the sum object's m1 method.
154 Calculates optimal checksum size based on data chunk size. @param dataSize size of data chunk in bytes
155 Converts Checksum object to byte array representation. @param sum Checksum object @param checksumSize size of resulting byte array
156 Updates total bytes read by adding the specified value. @param newBytes amount of data to add
157 Updates bytes written statistics by the given amount. @param newBytes additional bytes written
158 Updates read operations count based on provided mask value. @param count number of read operations to add
159 Increments large read operations counter by specified count.
160 Updates write operation count by specified amount. @param count number of operations to add
161 Updates erasure-coded bytes read statistics. @param newBytes additional bytes to add
162 Updates file system read statistics based on distance and bytes written. @param distance relative distance of the operation @param newBytes number of bytes written
163 Increments remote read time statistics by given duration.
164 Applies mask to statistics visitor and aggregates data. @param visitor StatisticsAggregator object
165 Initializes a ContentSummary object from a Builder instance. @param builder quota usage data to initialize the object with
166 Initializes default checksum options.
167 Creates a checksum option with NULL type and no size.
168 Validates create flags for file operations in a Hadoop context. @param flag set of CreateFlag enums to validate
169 Validates URI scheme against supported schemes. @param uri input URI @param supportedScheme expected URI scheme
170 Creates an InvalidPathException with the specified invalid file system path. @param path the invalid filesystem path
171 Creates an InvalidPathException with details about the invalid file system path. @param path the invalid path @param reason optional reason for the error
172 Returns the first non-null input value. @param inputs array of values to search
173 Returns the first non-null input from an array. @param inputs array of potentially null inputs
174 Validates input buffers for byte array encoding. @param buffers array of byte arrays to validate
175 Validates the provided buffers for decoding state. @param buffers array of ByteBuffer objects to validate
176 Validates input buffers for decoding. @param buffers array of byte arrays to be decoded
177 Validates a collection of ByteBuffers against specified encoding parameters. @param buffers array of ByteBuffer objects to validate
178 Closes a given RPC proxy, handling exceptions and invalid arguments. @param proxy the proxy object to be closed
179 Returns a ChecksumOpt instance based on the provided options and bytes per checksum. @param defaultOpt default checksum options @param userOpt user-provided checksum options @param userBytesPerChecksum number of bytes per checksum (0 for default) @return configured ChecksumOpt object
180 Retrieves the function mask value from the specified file system implementation. @param theFsImpl underlying file system instance @return function mask value or DELEGATE_TO_FS_DEFAULT_PORT if not set
181 Updates URI with func mask value if applicable. @param uri input URI object @return updated URI object or original if no change needed
182 Delegates file system operation to underlying Hadoop FileSystem. @param src file system path @param replication desired replication factor
183 Disconnects from the FTP server. @param client FTPClient instance
184 Calls m1 operation on underlying FSDataOutputStream.
185 Initializes an empty ContentSummary object with default metadata.
186 Initializes a ContentSummary object with specified file system metrics. @param length total content length @param fileCount number of files @param directoryCount number of directories @param quota overall quota @param spaceConsumed consumed storage space @param spaceQuota allocated storage quota
187 Calculates time remaining until token renewal in specified units. @param unit desired time unit (e.g. TimeUnit.MINUTES)
188 Calculates the next renewal time based on provided delay. @param delay time to add to current monotonic clock
189 Updates connection activity timestamp using monotonic clock.
190 Waits for a specified duration, handling interruptions and logging if interrupted. @param millis milliseconds to wait
191 Returns monotonic clock time in milliseconds.
192 Awaits termination of all async disk service thread pools. @param milliseconds timeout in milliseconds @return true if all threads are terminated, false on timeout
193 Validates checksums for the given data and returns the original ByteBuffer if valid. @param sumsBytes ByteBuffer containing checksums @param sumsOffset starting position of checksums in sumsBytes @param data ByteBuffer to be validated @param dataOffset starting position of data in data ByteBuffer @param bytesPerSum number of bytes per checksum @param file Path to the file being validated
194 Retrieves an input stream from the file system. @param f filesystem path
195 Calculates function mask based on file size and checksum byte count. @param file Path to file @param fileSize total file size
196 Returns default FsStatus object with maximum capacity and available space.
197 Registers file system permission commands with the command factory. @param factory CommandFactory instance for registration
198 Registers the "find" command with its class and name. @param factory CommandFactory instance
199 Registers count command with CommandFactory. @param factory CommandFactory instance
200 Initializes command format with minimum and maximum parameters, and optional parameters to be parsed from the command line. @param min minimum parameter count @param max maximum parameter count @param ... possibleOpt array of optional parameter names (may contain nulls)
201 Wraps a raising IO callable in a future. @param callable the callable to be executed
202 Validates mandatory configuration keys against recognized options. @param knownKeys collection of recognized configuration keys @param extraErrorText additional error message to append
203 Returns a list of capabilities enabled by this flag set.
204 Constructs and returns the HTTP referrer audit header. @return constructed header or empty string on failure
205 Initializes the WeakReferenceMap with a key-value pair creation factory and an optional callback for lost references. @param factory Function to create value objects from keys @param referenceLost Consumer called when a weakly referenced entry is garbage collected (optional)
206 Checks if OutputStream supports specified syncable capability. @param out output stream @param capability syncable operation to check for
207 Checks if InputStream supports specified capability. @param in input stream @param capability syncable operation to check for
208 Shuts down the Hadoop Executor Service using the provided service and timeout. @param executorService the Hadoop Executor Service to be shut down
209 Retrieves a resource from the pool using non-blocking mode.
210 Retrieves a mask resource from the pool with non-blocking access.
211 Calculates the mask value based on available and created resource counts. @return integer mask representing pool status
212 Initializes SingleFilePerBlockCache with prefetching statistics, max block count, and a duration tracker factory. @param prefetchingStatistics stats for prefetching operations @param maxBlocksCount maximum number of cache entries @param trackerFactory factory for creating duration trackers
213 Initializes SemaphoredDelegatingExecutor with executor delegate, permit count, and factory for tracking duration. @param executorDelegatee executor service instance @param permitCount maximum concurrent executions allowed @param fair whether to use a fair semaphore @param trackerFactory factory instance for duration tracking or null to use stub factory
214 Validates a file block entry for caching. @param entry Entry object containing the block data
215 Validates and finalizes the data buffer with a computed function mask. @throws IllegalStateException if checksum mismatch occurs
216 Configures buffer size and returns a new data input stream builder instance. @param bufSize desired buffer size
217 Returns builder instance with default configuration mask using m1(). @see m1: sets initial configuration for data input stream.
218 Retrieves functional mask value for current thread. @return Functional mask value associated with the current thread
219 Retrieves thread-local storage value using current thread ID. @return associated value or null if not found
220 Updates the functional mask value for the current thread. @param newVal new functional mask value
221 Merges file range with specified criteria. @param otherOffset offset of the new file range @param otherEnd end of the new file range @param other FileRange object to merge @param minSeek minimum seek required for merging @param maxSize maximum size constraint for merged data
222 Initializes bulk delete operation with specified file system context. @param path target file or directory path
223 Registers expressions with the And class and aliases. @param factory ExpressionFactory instance for registration
224 Registers expression classes with the specified factory. @param factory ExpressionFactory instance
225 Configures pattern matching for file and directory names. @param factory ExpressionFactory instance
226 Initializes Name instance with case sensitivity flag. @param caseSensitive true to enable case sensitive matching, false otherwise
227 Retrieves the appropriate compression codec based on the file's URI. @param file Path object containing the file's URI
228 Formats key store factory mode string using locale-specific settings. @param mode SSLFactory.Mode object @param template input string to be formatted
229 Generates configuration suffix based on cipher suite name. @param name CipherSuite object
230 Combines the statuses of two Results using bitwise AND operation. @param other Result object to combine with
231 Returns a new Result object with success status inverted and recursion flag unchanged.
232 Creates a FindOptions instance with specified settings.
233 Checks if an existing file system mask expression matches the given name. @param expressionName unique identifier of the expression
234 Applies mask functionality to each expression in the provided deque. @param exprs Deque of expressions to process @param count Number of expressions to apply mask to
235 Calls m2 with mask argument repeated 'count' times. @param args deque of arguments @param count number of repetitions
236 Constructs a URI from the given file system path string. @param pathString input path string
237 Configures the order comparator based on time-based or size-based ordering flags. @param m1 flag indicating whether time-based ordering is enabled @param m2 flag for size-based sorting @param m4 flag determining the sort order (ascending/descending)
238 Checks if a function mask string is available. @return true if function mask string exists, false otherwise
239 Retrieves masked command name. @return Command name with dashes replaced or original if already formatted
240 Updates file attributes preservation status based on input parameter. @param preserve true to preserve, false otherwise
241 Initializes MetricsRecordBuilderImpl with parent collector, metrics info, filters, and acceptance criteria. @param parent the parent metrics collector @param info the metrics information @param rf record filter @param mf metric filter @param acceptable whether to accept or reject records
242 Initializes a ChunkedArrayList with specified initial chunk capacity and maximum chunk size. @param initialChunkCapacity the initial number of elements per chunk @param maxChunkSize the maximum allowed chunk size
243 Finds the position of the first default ACL entry. @param aclBuilder list of ACL entries
244 Resolves file system path. @param path input file system path
245 Validates and processes command-line option with specified value. @param option name of the command-line option
246 Initializes TableBuilder with specified table header. @param headers variable number of column headers
247 Checks if mask bit is unset (i.e., m1 equals zero).
248 Initializes a new Shell instance with specified execution interval. @param interval time interval for process execution
249 Initializes a new Token instance with specified identifier, password, kind, and service. @param identifier unique token identifier @param password associated token password @param kind token type @param service related service
250 Initializes a new empty security token instance.
251 Initializes a new Globber instance with the specified file context, path pattern, filter, and symlink resolution behavior. @param fc FileContext object @param pathPattern Path pattern to expand @param filter PathFilter for filtering paths (optional) @param resolveSymlinks Whether to resolve symbolic links (default=false)
252 Formats error message for file path operation exception. @param operation the operation that triggered the exception @param path input path causing the error
253 Handles connection failures by retrying or throwing an exception. @param currRetries current number of retries @param maxRetries maximum allowed retries @param ex the caught IOException @param rand random number generator @param ugi UserGroupInformation object
254 Checks View File System function mask. @param fileSystem Hadoop file system object
255 Applies storage quotas to a file system path. @param src Path to be quota-managed @param namespaceQuota Namespace quota value @param storagespaceQuota Storage space quota value
256 Sets file system quotas and permissions for the specified source path. @param src path to set quotas for @param type storage type (e.g. HDFS) @param quota maximum allowed size in bytes
257 Initializes multipart uploader with base file path. @param basePath directory path to upload files from
258 Retrieves a remote iterator of file statuses for the given path. @param f target file system path
259 Retrieves remote iterator for files in the target file system path. @param f target file system path
260 Calculates file checksum. @param f Path to the file
261 Sets an extended attribute on a file with specified flags. @param path file system path @param name attribute name @param value attribute value
262 Opens a file with the specified path and parameters. @param path Filesystem path to open @param parameters OpenFileParameters object containing configuration details
263 Opens a file for reading and returns an input stream with checksum verification. @param path File system path to open @param parameters OpenFileParameters object containing configuration options
264 Opens a file on the file system for reading. @param path file location @param parameters OpenFileParameters object containing configuration and access settings
265 Opens a file stream for reading from the distributed file system. @param pathHandle PathHandle to the file @param parameters OpenFileParameters containing configuration and options @return CompletableFuture containing FSDataInputStream or null if failed
266 Retrieves all block storage policies from the underlying file system. @throws IOException if an error occurs during policy retrieval
267 Initializes a map of file systems from the given mount points. @param mountPoints list of virtual file system mounts @return Map of file system instances keyed by source path
268 Resolves file system path and initializes ResolveResult with result kind, target file system, and resolved path details. @param resultKind ResultKind indicating outcome of path resolution @param resolvedPathStr Resolved path string @param targetOfResolvedPathStr Target file system string @param remainingPath Remaining unresolvable path portion @return ResolveResult object or null if not found
269 Returns a ChildFsGetter instance to fetch fallback file systems based on m1 scheme. @return ChildFsGetter object
270 Constructs an INodeLink instance from a given path and target file system. @param pathToNode unique filesystem path @param aUgi user group information for access control @param targetMergeFs the target merge file system @param aTargetDirLinkList list of target directory links
271 Initializes INodeLink with path, user access control, and a method to create file systems. @param pathToNode unique filesystem path @param aUgi user group information for access control @param createFileSystemMethod function to create file system instance @param aTargetDirLink target directory link as URI string
272 Replaces dynamic variables in a destination path using regex patterns and values. @param parsedDestPath initial destination path @param srcMatcher regex matcher object @param regexGroupNameOrIndexStr group name or index string to extract value from @param groupRepresentationStrSetInDest set of variable names to replace in the destination path @return updated destination path with variables replaced, or original path if extraction failed
273 Decrypts data from input buffer using provided decryptor and writes to output buffer. @param decryptor instance for decryption @param inBuffer input data to decrypt @param outBuffer decrypted data output location @param padding amount of padding required
274 Validates context pointer is not null. @param context pointer to be validated
275 Checks if the working directory ZooKeeper node exists. @throws IOException if KeeperException occurs
276 Returns default viewfs prefix using the default mount table.
277 Parses serialized string to create RegexMountPointResolvedDstPathReplaceInterceptor instance. @param serializedString input string containing interceptor params
278 Returns input stream as a readable byte channel. @param hasChannel boolean indicating socket channel availability
279 Calculates the function mask length based on file size and checksums. @param file Path to file @param fileSize total file size in bytes
280 Retrieves disk space information for the current file system.
281 Retrieves and formats the disk mount information.
282 Calculates disk usage percentage. @return disk usage percentage in integer format
283 Initializes FSInputChecker with file path and retry count. @param file Hadoop file path to read from @param numOfRetries number of retries for checksum verification @param verifyChecksum true to enable checksum verification @param sum Checksum object or null if not verifying @param chunkSize maximum chunk size for data reading @param checksumSize checksum size in bytes
284 Checks if InputStream is ByteBuffer readable. @param stream input stream to check
285 Retrieves CPU mask value for the current thread.
286 Validates tool object and updates global audit context if it matches a specific pattern. @param tool Object to validate
287 Adds or updates a function mask value with a given key and integer value. @param key configuration key @param value new function mask value (int)
288 Sets optional function mask with given key and float value. @param key configuration key @param value new function mask value as a float
289 Adds or updates a function mask value with a given key and value. @param key configuration key @param value new function mask value (long)
290 Adds or updates a function mask value with a given key and value. @param key configuration key @param value new function mask value (double)
291 Retrieves boolean mask value from file system. @param key configuration key @param value numeric value to convert
292 Retrieves boolean mask value from file system using specified key and numeric value. @param key configuration key @param value numeric value to convert
293 Retrieves boolean mask value from file system. @param key configuration key @param value numeric value to convert
294 Retrieves boolean mask value from file system. @param key configuration key @param value numeric value to convert
295 Formats column data into an array of strings, optionally wrapping and justifying text. @param idx index of the row to format
296 Resolves output file path in Hadoop distributed file system. @param fsOutputFile output file path @param tmpLocalFile temporary local file path
297 Calculates the function mask for a given ACL entry and permission argument. @param entry AclEntry instance @param permArg FsPermission object or null if not available @return FsAction representing the function mask, or throws IllegalArgumentException if invalid
298 Constructs a new immutable PermissionStatus instance with specified user, group, and access rights. @param user associated user @param group associated group @param permission file system access permissions
299 Parses ACL string into an AclEntry object. @param aclStr input ACL string @param includePermission whether to parse permission from the string @return AclEntry object representing the parsed ACL entry
300 Formats ACL entry details into a string representation.
301 Splits a string into an array of substrings based on the specified delimiter. @param str input string to split @param delim delimiter character(s) to use for splitting @return Array of split strings or null if input is empty
302 Splits input string into collection of substrings based on specified delimiter. @param str input string to split
303 Parses and interprets file permissions from a string. @param modeStr input permission string @param symbolic regex pattern for symbolic notation @param octal regex pattern for octal notation
304 Handles block state transitions upon completion. @throws IOException if an I/O error occurs
305 Checks if stream is available before performing operations. @param m1() result of internal check
306 Updates data block state to the specified destination state. @param current Current data block state @param next Target destination state
307 Validates buffer parameters for writing. @param buffer the byte array to write @param offset starting position in buffer @param length amount of bytes to write
308 Begins writing data block with specified state.
309 Adds attribute to referrer header with proper escaping. @param key attribute key @param value attribute value
310 Constructs a key-value map from the query parameters of an HTTP referrer header. @param header input string to process @return Map of parameter names and values or empty if no params found
311 Calculates the function mask based on the data size or default value from m1. @return Function mask value
312 Resolves symbolic link for the given file path. @param f input file path
313 Calls m1() on the default file system.
314 Calls M1 on the underlying file system implementation.
315 Retrieves statistics for a given file system based on its URI. @param uri URI object representing the file system @return Statistics object associated with the URI or null if not found
316 Initializes multipart uploader with base path. @param basePath directory path for file uploads
317 Retrieves an existing or creates a new context-specific allocator. @param contextCfgItemName unique context identifier
318 Retrieves cached position value from output stream. @return cached write position mask
319 Flushes output stream to disk. @throws IOException on write failure
320 Extracts unique trimmed strings from the input string, removing commas and line breaks. @param str input string to process
321 Initializes the listener with a Logger instance. @param log Logger object to capture state changes
322 Constructs a ServiceStateException with the given message and no underlying cause.
323 Constructs a ServiceStateException with specified exit code and message. @param exitCode service exit code @param message error message @param cause underlying exception (if any)
324 Converts a general exception into a specific runtime exception. @param text error message @param fault underlying cause @return RuntimeException or ServiceStateException if the cause is an ExitCodeProvider
325 Converts general exceptions into a specific runtime exception, wrapping it in a ServiceStateException if necessary. @param fault Throwable instance of the exception to convert
326 Initializes ServiceStateModel with specified service name and NOTINITED state. @param name unique service identifier
327 Checks if service state transition is valid by comparing masks. @param current current service state @param proposed proposed new service state
328 Returns the string representation of service state with optional name prefix.
329 Initializes HadoopUncaughtExceptionHandler with a delegate handler. @param delegate UncaughtExceptionHandler to handle exceptions
330 Handles a specific signal by logging and notifying associated handlers. @param s the Signal object containing signal details
331 Retrieves the registered IrqHandler instance associated with the given signal name. @param signalName unique identifier for the interrupt signal
332 Constructs an ExitException with specified status code and underlying cause. @param exitCode exit status code @param cause root exception that triggered this exit
333 Constructs an ExitException with a specified exit status code and message. @param status exit status code @param msg detailed error message
334 Constructs a ServiceLaunchException with a specified exit status code and formatted message. @param exitCode exit status code @param format error message format string @param args variable arguments for formatting the message, where the last argument may be a Throwable cause
335 Constructs an ExitException with specified exit status code and details. @param exitCode exit status code @param cause underlying cause of the exception (if any) @param format error message format string @param args arguments to be formatted into the error message
336 Registers service shutdown hook. @return true if successful, false otherwise
337 Initializes a new ServiceLauncher instance with the specified service class name. @param serviceClassName fully qualified class name of the service to launch
338 Handles function mask exceptions by logging and updating service exit code. @param exitException exception containing error details
339 Initializes service launch options with configuration file and properties. @param none
340 Counts the number of service configurations that can be created. @return count of successfully loaded Configuration instances
341 Registers or updates a service state change listener. @param l ServiceStateChangeListener to add or update
342 Notifies registered listeners of service state change. @param l listener to notify
343 Notifies all registered listeners of a specific event using m1(). @param none
344 Notifies all registered listeners and global listeners of a service state change.
345 Validates and updates service configuration. @param conf Hadoop Configuration object
346 Handles service-specific logic based on the provided object. @param object Object to be processed, expected to be a Service instance
347 Stops a Hadoop Service instance using 'm3' operation. @param service Hadoop Service object to halt
348 Handles exceptions during safe service shutdown. @param log logging instance for error reporting @param service Hadoop Service object to manage
349 Checks input stream capabilities and delegates to appropriate method. @param in InputStream object
350 Determines if I/O functionality is loaded and capable. @return true if loaded and capable, false otherwise
351 Converts object of type T to a string representation. @param instance input object to serialize
352 Converts a Function that may throw IOExceptions into an unchecked version. @param fun function to be converted
353 Serializes object to JSON string representation. @param instance object to serialize
354 Deserializes JSON data from byte array into an object of type T. @param bytes JSON data as a byte array
355 Copies UTF-8 encoded data from another UTF8 object. @param utf8 source UTF8 object
356 Writes a string to the output stream with UTF-8 encoding and truncates if necessary. @param out output stream @param s input string @return encoded length of the string
357 Writes mask data to DataInput stream. @param in DataInput stream
358 Processes a long value in the file based on its position. @param n current position in the ArrayFile
359 Retrieves Writable object based on given key and value. @param n long integer value @param value Writable object to be retrieved
360 Initializes an empty output buffer using a default internal buffer.
361 Retrieves data from the internal buffer using helper method m1.
362 Retrieves mask value from internal buffer. @return current mask value
363 Initializes and prepares the output buffer.
364 Compares two WritableComparable objects. @param a first object to compare @param b second object to compare
365 Compares two byte arrays using lexicographical order. @param b1 first byte array @param s1 start index of b1 @param l1 length of b1 @param b2 second byte array @param s2 start index of b2 @param l2 length of b2
366 Computes a functional mask from the given byte array. @param bytes byte array to process @param length number of bytes to consider
367 Computes a mask value from the input byte array and starting index. @param bytes input byte array @param start starting index of the relevant data within the array
368 Calculates a mask value from the specified byte array. @param bytes input byte array @param start starting index of the integer within the array
369 Calculates a mask value from compressed byte array. @param bytes input byte array @param start starting index of the compressed value
370 Initializes BytesWritable with byte array and size. @param bytes input byte array
371 Returns the function mask as a byte array using m1.
372 Returns the mask value based on current size.
373 Updates internal byte array size and capacity to match provided value. @param capacity new bit mask length
374 Retrieves allocated buffer's m2 value based on allocation preference. @param direct true to fetch direct buffers, false to fetch regular buffers
375 Submits a readahead request to prefetch file data based on existing requests and position constraints. @param identifier unique request identifier @param fd FileDescriptor for the target file @param curPos current position in the file @param readaheadLength length of data to be prefetched @param maxOffsetToRead maximum allowed offset from current position @param lastReadahead previous ReadaheadRequest object, if any @return newly submitted or resumed ReadaheadRequest object, or null on failure
376 Appends null value to SequenceFile using provided key. @param key WritableComparable object representing key in file
377 Seeks to specified key in SequenceFile. @param key target key
378 Returns function mask value from m1 in the current key.
379 Checks if a file or directory has the specified access rights. @param path file system path @param desiredAccess target access right level as an integer mask
380 Checks if native code and POSIX functionality are fully loaded. @return true if both conditions are met, false otherwise
381 Checks if native code and required resources are loaded. @return true if both conditions met, false otherwise
382 Determines if the native code is loaded and functional on Sparc architecture. @return true if native code is loaded, false otherwise
383 Unmaps a mapped byte buffer if supported. @param buffer MappedByteBuffer object
384 Frees a cryptographic stream's byte buffer if unmap support is available. @param buffer ByteBuffer object
385 Expands buffer capacity and reads data from input stream. @param in input stream to read from @param len number of bytes to read
386 Initializes EnumSetWritable with a set of enum constants. @param value EnumSet containing enum values @param elementType Class type of the enum constants
387 Initializes DataInputBuffer with default byte buffer.
388 Initializes buffer with data from specified range of input byte array. @param input input byte array @param length number of bytes to load into the buffer
389 Initializes buffer with data from specified range of input byte array. @param input input byte array @param start starting position in the input array @param length number of bytes to load into the buffer
390 Retrieves mask value from internal buffer.
391 Retrieves bit mask counter value from internal buffer.
392 Initializes ECSchema with options from the provided map. @param allOptions map of configuration values
393 Initializes ECSchema with codec name, data units, and parity units. @param codecName erasure coding scheme name @param numDataUnits number of data units @param numParityUnits number of parity units
394 Calculates mask value based on schema's m1 property.
395 Calculates functional mask value from m1 parameter in schema. @return Functional mask integer value
396 Retrieves RawErasureCoderFactory instance associated with the given codec and coder names. @param codecName name of the codec @param coderName name of the coder
397 Constructs an ECBlockGroup with provided data and parity blocks. @param dataBlocks array of data blocks @param parityBlocks array of parity blocks
398 Calculates the total number of erased blocks in both data and parity groups.
399 Counts the number of erased blocks in a given array. @param inputBlocks array of ECBlock objects to scan @return count of erased blocks, or 0 if none found
400 Retrieves the ByteBuffer representation of each ECChunk in the array. @param chunks array of ECChunks to process @return array of ByteBuffers or null for null input chunks
401 Retrieves erased blocks from a specified ECBlockGroup. @param blockGroup Group of blocks to search for erased blocks @return Array of erased blocks or empty array if none found
402 Assembles input blocks from the specified block group. @param blockGroup Block group object
403 Calculates a mask value based on two field indices. @param x first index @param y second index
404 Returns product of two elements in the Galois field. @param x first element @param y second element
405 Computes divisor table value for given coordinates. @param x coordinate index @param y coordinate index
406 Computes the FUNC_MASK value for a given integer and field size. @param x input integer @param n field size parameter
407 Prints the contents of an ECChunk object or indicates it's empty. @param chunk ECChunk object to display
408 Retrieves configuration value using coder options.
409 Determines whether data changes are allowed based on encoding options.
410 Checks configuration option for erasure decoding. @return true if enabled, false otherwise
411 Retrieves erasure coding configuration flag.
412 Masks a ByteBuffer with specified length. @param buffer input ByteBuffer @param len length to mask @return modified ByteBuffer
413 Copies a specified length of data from the given buffer, starting at the specified offset. @param buffer source byte array @param offset starting position in the buffer @param len number of bytes to copy @return original buffer with copied data
414 Creates a new ByteArrayEncodingState instance with the provided parameters. @param encoder RawErasureEncoder instance @return ByteArrayEncodingState object
415 Creates a new encoding state with updated input/output buffers. @return ByteBufferEncodingState object representing the new encoding state
416 Initializes a new decoding state with updated input and output buffers. @return ByteBufferDecodingState object representing the updated decoding state
417 Creates a new decoding state representation for the given inputs and outputs. @return ByteArrayDecodingState object
418 Initializes functional mask in input array a using Galois field operations. @param a input byte array @param m total number of elements @param k Reed-Solomon parameters
419 Computes functional mask values and updates input/output matrices for the Galois Field GF(256) matrix multiplication. @param inMatrix input byte array @param outMatrix output byte array @param n dimension of square matrix (size x size)
420 Applies Galois Field operations to the inputs and stores the result in outputs. @param gfTables precomputed multiplication table for GF(2^8) operations @param dataLen length of the data being encoded @param inputs input byte arrays @param inputOffsets input offset arrays @param outputs output byte arrays @param outputOffsets output offset arrays
421 Applies Reed-Solomon encoding to input data using precomputed Galois Field tables. @param gfTables precomputed GF(2^8) multiplication table @param inputs array of input ByteBuffer objects @param outputs array of output ByteBuffer objects
422 Retrieves a pre-initialized GaloisField instance for the given field size and polynomial. @param fieldSize size of the finite field @param primitivePolynomial defining polynomial of the field @return GaloisField object or null if not found
423 Modifies array y in-place by performing GaloisField operations with arrays x and y. @param x input array for multiplication @param y output array for result (modified)
424 Initializes an empty ECBlock with default parity and erased status.
425 Updates total reported bytes read from compressed stream. @param count number of bytes decompressed
426 Reads a value from the compressed stream using m1() and updates processed byte count. @param inStream InputStream to read from
427 Initializes limit, base, and permutation arrays based on length distribution for each group. @param alphaSize alphabet size @param nGroups number of groups
428 Performs a series of operations to sort and encode data in the fmap array using Move-To-Front encoding. @param dataShadow Data object containing various arrays @param lo Lower bound of the range to process @param hi Upper bound of the range to process @param d Increment value for processing
429 Calculates decompression metrics based on input stream. @return total bytes read during decompression
430 Retrieves decompression metrics based on input stream. @return total bytes read during decompression
431 Calculates total buffer length by combining local and stream-based decompression.
432 Initializes function mask and prepares decompression process. @param conserveMemory whether to conserve memory during decompression
433 Initializes Bzip2 compressor with default parameters.
434 Compresses Bzip2 data using internal buffers and stream. @return compressed byte count
435 Computes compressed data size using Bzip2 algorithm. @return Compressed data size in bytes
436 Initializes CompressionOutputStream with an output stream. @param out OutputStream to write compressed data to
437 Initializes decompressor with default direct buffer size.
438 Sets input buffer from provided byte array. @param b compressed data @param off offset into the byte array @param len length of the data in the byte array
439 Determines whether the decompression process is complete. @return true if done, false otherwise
440 Decompresses a chunk of data into the direct buffer. @param b input byte array @param off offset in array @param len length to decompress @return number of bytes decompressed
441 Initializes the compressor with default direct buffer size.
442 Calculates the Snappy compression mask size and writes it to the user buffer. @param b input byte array @param off starting offset in the input array @param len length of data to process @return number of bytes written or 0 if no data
443 Initializes SnappyCompressor with configuration settings. @param conf Hadoop Configuration object
444 Initializes the compression input stream from a given InputStream. @param in underlying input stream, must be Seekable and PositionedReadable
445 Calculates function mask value. @return Total bytes to be consumed from input stream
446 Initializes decompression state and buffers.
447 Returns compressed data size in bytes. @return Compressed data size
448 Calculates the function mask based on read bytes. @return Function mask value
449 Initializes the Lz4Decompressor with the default direct buffer size.
450 Sets input data for LZ4 decompression and performs initial setup. @param b input byte array @param off offset in the input array @param len length of the input data
451 Checks whether the decompression process is complete. @return true if input data is exhausted, false otherwise
452 Decompresses LZ4-compressed data and returns the resulting size. @param b input data array @param off offset into the input array @param len length of the compressed data to decompress @return size of the uncompressed data, or 0 on error
453 Initializes Lz4Compressor with direct buffer size and default compression mode. @param directBufferSize memory allocation for direct buffers
454 Compresses input data using LZ4 algorithm. @param b input data array @param off starting offset in the input data array @param len number of bytes to process from the input data array @return compressed data length in bytes or 0 if finished
455 Configures compressor settings based on input Configuration.
456 Retrieves compression codec by name, searching class-based and file-based registries. @param codecName identifier for the desired compression codec @return CompressionCodec object or null if not found
457 Computes the function mask based on the provided CompressionCodec instance. @param codec compression codec object @return integer function mask value or 0 if codec is null
458 Calculates the function mask based on the provided compression codec. @param codec CompressionCodec object to determine the mask @return integer function mask value or 0 if codec is null
459 Returns compressor class based on native Zlib support. @param conf Hadoop configuration (unused)
460 Returns appropriate decompressor class based on native Zlib support. @param conf Hadoop configuration
461 Verifies native Zlib library loading and initialization. @param none
462 Reinitializes the compressor with a new compression strategy from Hadoop Configuration. @param conf Hadoop Configuration object
463 Initializes ZlibCompressor with specified compression settings and direct buffer size. @param level CompressionLevel enum value @param strategy CompressionStrategy enum value @param header CompressionHeader object containing windowBits information @param directBufferSize Size of direct buffers for uncompressed and compressed data
464 Calculates compressed data size. @return Compressed data length in bytes
465 Computes compressed stream size. @return Compressed stream size in bytes
466 Initializes Zlib decompressor with given compression header and direct buffer size. @param header CompressionHeader object @param directBufferSize Size of direct buffers for compressed and uncompressed data
467 Decompresses data using Zlib algorithm. @return Decompressed size or -1 if failed
468 Calculates decompressed data size using ZlibDecompressor. @return Decompressed data size in bytes
469 Calculates decompressed data length. @return Total length of decompressed user buffer
470 Initializes decompression process and prepares buffers for direct I/O. @throws NullPointerException if stream is null
471 Processes the FUNC_MASK value from input data, ensuring CRC consistency and updating decompression state.
472 Applies bitwise masking to variable-length integer. @param stream DataOutput stream for writing @param i Integer value to be written
473 Computes a variable-length integer value from the given DataInput stream. @param stream input data stream containing the value
474 Retrieves a reusable ByteBuffer of specified size and type. @param direct true for direct buffers, false for heap buffers @param length maximum buffer size @return existing or newly allocated ByteBuffer, or null if not found
475 Inserts a buffer into the pool with weak references. @param buffer ByteBuffer instance to be inserted
476 Calculates the mask for a given position in UTF-8 encoded text. @param position byte index to calculate mask for
477 Validates and extracts character mask from UTF-8 encoded input string. @param string input text to process
478 Initializes text data within the given byte array bounds. @param utf8 UTF-8 encoded byte array @param start starting index in the array @param len length of the text data
479 Updates the byte array with UTF-8 encoded text from the specified range. @param utf8 UTF-8 encoded byte array @param start starting index for copying @param len number of bytes to copy
480 Reads and stores UTF-8 encoded bytes from input stream. @param in DataInput stream @param len number of bytes to read
481 Decodes UTF-8 encoded byte array to string using default replacement strategy. @param utf8 ByteBuffer containing UTF-8 encoded text
482 Decodes UTF-8 encoded byte array to string, optionally replacing invalid characters. @param utf8 ByteBuffer containing UTF-8 encoded text @param replace whether to replace invalid characters or report them
483 Validates UTF-8 encoded byte array and extracts length. @param utf8 input byte array
484 Checks if a class can be added to the map without exceeding the maximum allowed classes.
485 Initializes the internal mapping of Writable classes to unique IDs.
486 Creates FileSystemOption object with associated Hadoop FileSystem instance. @param fs Hadoop FileSystem instance to be stored
487 Constructs a new Key instance with the given byte array and weight. @param value the key byte array @param weight the associated weight for the byte array
488 Calls parent container's m3 and returns early if input preservation is enabled.
489 Retrieves class type from given object and converts List to array. @param clazz object containing class type information @return T[] the converted array or null if not found
490 Initializes an InputBuffer instance from a new Buffer object.
491 Initializes buffer with specified byte array and position. @param input byte array to store data in @param length number of bytes to consider from input array
492 Initializes buffer with specified byte array and position. @param input byte array to store data in @param start starting position of data within input array @param length number of bytes to consider from input array
493 Retrieves input buffer state using helper function.
494 Retrieves input length based on current buffer state.
495 Computes MD5 hash from input stream. @param in DataInput stream containing data to be hashed @return MD5Hash object representing the computed hash
496 Computes the MD5 hash of an InputStream. @param in input stream to process @return MD5Hash object containing the computed digest
497 Computes the MD5 hash of a specified data range. @param data byte array containing the input data @param start starting index of the data range (inclusive) @param len length of the data range
498 Computes MD5 hash from a multi-dimensional byte array. @param dataArr multi-dimensional byte array to process @param start starting index for processing @param len length of data chunk @return MD5Hash object representing the computed digest
499 Returns MD5 hash digest mask. @return MD5 hash digest value
500 Computes MD5 digest from a hexadecimal string. @param hex input hexadecimal representation
501 Fetches message instance based on protocol buffer class and data stream. @param protoClass target protocol buffer class @param dataIn DataInput stream to read from @return Message object or throws IOException if malformed
502 Synchronizes the specified file/directory. @param fileToSync file or directory to synchronize
503 Initializes BooleanWritable with boolean value. @param value boolean value to initialize with
504 Creates a retry policy that depends on remote exceptions. @param defaultPolicy default retry policy for unknown exceptions @param exceptionToPolicyMap mappings of specific exceptions to custom retry strategies
505 Checks if the queue is empty after specified time threshold. @param time time threshold in nanoseconds @return true if queue is empty, false otherwise
506 Retrieves monotonic clock time in nanoseconds. @return Mask value in nanoseconds
507 Creates a retry policy for exceptions not related to remote or SASL. @param defaultPolicy default retry policy @param exceptionToPolicyMap mapping of exceptions to their policies
508 Retrieves the connection ID using the first proxy. @return ConnectionId value or null if not found
509 Parses a string into retry parameters and returns a MultipleLinearRandomRetry instance. @param s input string containing comma-separated elements
510 Creates a retry policy that applies different retry strategies based on specific exceptions. @param defaultPolicy default retry policy @param exceptionToPolicyMap mapping of exception types to their respective retry policies
511 Creates a consolidated IOException from the provided list of individual IOExceptions. @param exceptions List of IOException instances to be encapsulated
512 Retrieves the mask value from the DataIndex instance. @return integer mask value
513 Retrieves the compressor algorithm mask from DataIndex. @return Compressor algorithm name or null if not found
514 Extracts an integer mask from a DataInput stream. @param in DataInput stream containing the encoded mask value
515 Writes a variable-length integer mask to the output stream. @param out DataOutput stream @param n long value to be written
516 Calls TFile metadata method m1().
517 Returns the record count mask from TFile metadata. @return long record count mask value
518 Retrieves metadata from BCFile using Reader. @throws IOException if an I/O error occurs
519 Returns the comparator mask string based on TFile metadata.
520 Constructs a ByteArray instance from a BytesWritable object. @param other input BytesWritable object
521 Constructs a ByteArray instance from a byte array and its full length. @param buffer the underlying byte data
522 Finds the index of a block region within the DataIndex instance. @param offset unique identifier for the block region @return index of the block region or -1 if not found
523 Searches for a given key in the sorted TFile index. @param key RawComparable object to search for
524 Searches the TFileIndex for a given key using the provided comparator. @param key RawComparable object to search for
525 Calculates distance between this location and another. @param other Location object to compare with
526 Retrieves key length from TFile buffer. @param buf input byte array
527 Calculates the length of a value within a buffer. @param buf input byte array @param offset starting position in the buffer @return length of the value or negative if not found
528 Retrieves raw size from block region.
529 Retrieves block state attribute value.
530 Calculates the block region mask value. @return combined m1 and m2 values
531 Returns an OutputStream instance, wrapping the given DataOutput stream. If already an OutputStream, it is returned directly; otherwise, a DataOutputOutputStream wrapper is created. @param out DataOutput stream to be bridged
532 Compares two byte arrays using lexicographical ordering. @param buffer1 first byte array @param offset1 start index in buffer1 @param length1 size of buffer1 @param buffer2 second byte array @param offset2 start index in buffer2 @param length2 size of buffer2 @return negative/zero/positive int indicating comparison result
533 Initializes DataOutputBuffer with a new underlying byte buffer.
534 Retrieves buffered data using underlying source. @return current buffer content or null if not available
535 Retrieves data from internal buffer using m1 method. @return result of buffer's m1 operation
536 Writes a 32-bit integer value into the buffer, starting at specified offset. @param v integer value to write @param offset starting position in buffer (must be within bounds)
537 Calculates the distance between two nodes in the network, considering their levels and parent relationships. @param node1 first Node object @param node2 second Node object @return distance between the nodes or Integer.MAX_VALUE if invalid input or not connected
538 Checks if a node is within a specified scope based on its location. @param node NodeBase object containing node data @param scope network scope string
539 Constructs a path string from a NodeBase object. @param node NodeBase object containing node data
540 Computes node's mask value using m1 function.
541 Removes a node from the network topology, handling inner nodes and updating node groups and racks. @param node NodeBase object to be removed
542 Retrieves a list of nodes within the specified location. @param loc network location path
543 Resolves a network location to a Node object. @param loc input network location string
544 Constructs a network topology string with node counts and expected leaf nodes. @return formatted string representation
545 Checks if two nodes are on the same rack. @param node1 first node to compare @param node2 second node to compare
546 Selects a node within specified scope and constraints. @param parentNode the parent node to search from @param excludedScopeNode the node to exclude from selection @param excludedNodes collection of nodes to exclude @param totalInScopeNodes total number of nodes in scope @param availableNodes maximum number of available nodes @return selected Node or null if none found
547 Calculates the weight for a node based on its path and reader's path. @param reader Node object @param node Node object @return Weight value (Integer.MAX_VALUE if invalid input)
548 Updates the masked node count for a given Node. @param node the Node to update
549 Transfers data to a network socket in chunks, handling timeouts and errors. @param fileCh the output channel @param position starting position @param count total bytes to be transferred @param waitForWritableTime optional timeout for writing @param transferToTime optional timeout for transferring
550 Resolves hostname to IP address and returns mask or original name if resolution fails. @param names Collection of hostnames to be resolved
551 Constructs a formatted string of local and destination host details. @param destHost destination hostname @param destPort destination port number @param localHost local hostname
552 Retrieves network interface addresses based on a given subnet and filtering criteria. @param subnet IP address or hostname of the subnet @param returnSubinterfaces flag to include subinterface addresses in the result @return List of InetAddress objects representing matching network interfaces
553 Generates a set of 'numOfPorts' unique, available server socket ports. @param numOfPorts number of desired free ports
554 Initializes an instance of RawScriptBasedMapping with default configuration parameters.
555 Initializes a CachedDNSToSwitchMapping instance from a raw DNS-to-switch mapping. @param rawMapping the underlying mapping to cache
556 Initializes NodeBase with a network location path. @param path input path string
557 Initializes NodeBase with name and normalized location. @param name unique node identifier @param location physical or logical network address
558 Constructs a new NodeBase instance with the given name, location, and hierarchical relationships. @param name unique node identifier @param location physical or logical network address @param parent parent node in the network hierarchy (may be null) @param level node depth within the network (starting from 0)
559 Closes the domain socket and associated resources when a handler requests it. @param caller method invoking this function @param entries map of file descriptors to their corresponding entries @param fdSet set of file descriptors being monitored @param fd unique identifier for the file descriptor in question @return true if the socket was successfully closed, false otherwise
560 Checks if the resource reference count is greater than 0.
561 Updates the functional mask by clearing the CLOSED bit in STATUS. @throws IOException on socket operation errors
562 Trims idle selectors from the pool, releasing resources and handling I/O exceptions.
563 Retrieves cached dependencies for a normalized host name. @param name normalized hostname
564 Sets read timeout on underlying socket stream. @param timeoutMs millisecond timeout value
565 Retrieves IP addresses associated with a network interface and its subinterfaces. @param strInterface interface name to search for @param returnSubinterfaces whether to include subinterface addresses in the result @return array of IP address strings or null if not found
566 Retrieves IP addresses associated with a network interface and its subinterfaces. @param strInterface interface name to search for @param returnSubinterfaces whether to include subinterface IPs in the result @return List of InetAddress objects or an empty list if none found
567 Resolves network location by recursively traversing node groups. @param loc input location string @return resolved location string or null if not found
568 Generates a function mask string based on the provided mapping and topology information. @return A formatted string containing mapping, nodes, and switches details
569 Checks if a given mapping is an instance of AbstractDNSToSwitchMapping and calls m1() method. @param mapping DNSToSwitchMapping object to check
570 Retrieves statistical value at specified index for given recorder. @param recorderName name of the log recorder @param idx integer index into statistics array
571 Prints supported generic options for Hadoop applications. @param out PrintStream to output help information
572 Recursively checks if class has valid hierarchy. @param clazz the Class to check
573 Initializes LogThrottlingHelper with minimum log period and primary recorder. @param minLogPeriodMs minimum time interval between logs (ms) @param primaryRecorderName name of the primary log recorder
574 Records log data with the specified values and name, ensuring logs are not generated too frequently. @param recorderName name of the recorder @param currentTimeMs current time in milliseconds @param values summary statistics to record
575 Checks for HTML special characters in a string. @param str the input string
576 Escapes HTML special characters in the provided string. @param item input string to quote
577 Configures a Jersey resource package with specified parameters. @param packageName package name to configure @param pathSpec URL path specification for the resource
578 Registers an internal servlet with the specified class and authentication requirement. @param name servlet name @param pathSpec servlet path specification @param clazz servlet implementation class
579 Registers an internal servlet with the specified class and authentication. @param name servlet name @param pathSpec servlet path specification @param clazz servlet implementation class
580 Configures a filter mapping for the given servlet context. @param ctx ServletContextHandler instance @param name Resource name @param urls Array of matching URLs
581 Attempts to bind the server with a given port. @param listener ServerConnector instance containing configuration @param port the port number to try
582 Retrieves XFrameOption based on string representation. @param value String to match against available options
583 Initializes FileMonitoringTimerTask with a list of file paths, callbacks for file change and error handling. @param filePaths list of file paths to monitor @param onFileChange callback executed when a monitored file changes @param onChangeFailure callback triggered in case of an error while monitoring files
584 Retrieves the flush offset interval in milliseconds for a given key. @param key unique identifier @param defaultValue default value to return if property is missing or invalid @return non-negative flush offset interval or -1 on error
585 Validates presence of specified metrics configuration property. @param key unique identifier for the metric
586 Throws a MetricsException with detailed error message and file path if logging fails. @param message user-provided description of the metric processing error
587 Throws MetricsException with detailed error message and file path. @param message user-provided description of metric processing error
588 Extracts and validates the flush interval from configuration properties. @return time in milliseconds
589 Throws a MetricsException for the given error message and underlying cause. @param message detailed error description @param t root exception causing the metrics error
590 Retrieves and updates metric records based on identifiers and tags. @param mr MetricsRecord object containing metrics data @param includingTags whether to include tags in the result @return Record object or null if not found
591 Packs a string into the provided buffer using UTF-8 encoding. @param s the input string to pack
592 Emits a metric to Ganglia hosts with specified name, type, and value. @param groupName group name @param name metric name @param type metric type @param value metric value @param gConf Ganglia configuration @param gSlope Ganglia slope
593 Emits a metric to Ganglia with the specified name, type, and value. @param groupName group name @param name metric name @param type metric type @param value metric value @param gConf Ganglia configuration settings @param gSlope Ganglia slope settings
594 Retrieves an element from the queue with exclusive access. @throws InterruptedException if interrupted during wait
595 Constructs a MetricsRecordImpl object from given parameters. @param info metrics information @param timestamp system time in milliseconds @param tags associated metrics tags @param metrics list of abstract metric objects
596 Updates RPC metrics with enqueue time. @param enQTime long enqueue timestamp
597 Updates RPC metrics with query time. @param qTime long query processing time
598 Updates RPC processing time metric. @param processingTime long processing time value to update
599 Updates write latency quantile estimators. @param writeLatency long value representing write operation latency
600 Updates read latency quantile estimators. @param readLatency long value to update quantile estimators
601 Retrieves metrics system instance with given prefix. @param prefix metric name prefix
602 Returns the mask value for metric filtering using m1. @return Filter mask
603 Updates metric MBean and source names based on previous state.
604 Creates a metrics snapshot by iterating over tags and metrics, adding them to the provided builder. @param builder MetricsRecordBuilder instance to populate with metrics data @param all whether to include all metrics or only those matching a specific mask
605 Calculates rolling averages for metrics with valid data within the specified record validity period. @param minSamples minimum number of samples required @return Map of metric names to their respective average values or null if not found
606 Retrieves the m2 value of rpcProcessingTime.
607 Updates rolling averages for each metric in the current snapshot.
608 Retrieves cached metric info based on name and description. @param name Metric identifier @param description Brief metric description
609 Caches and returns a metric tag using FUNC MASK from Hadoop metrics framework. @param info MetricsInfo object @param value tag value to be cached
610 Updates sample statistics with new data and triggers further processing. @param numSamples number of new samples @param sum total value of new samples
611 Updates sample statistics with new data point. @param x value of new data point
612 Calculates RPC processing time mean value. @return Mean processing time or 0 if no samples
613 Computes sample metric using minmax values.
614 Computes and returns sample minimum value using MinMax instance.
615 Initializes minimum and maximum metric values using m1 function.
616 Calculates the next retry time based on target end time and current policy. @param tgtEndTime target end time @param now current timestamp @param rp RetryPolicy instance @return next retry time in milliseconds or 0 if not applicable
617 Calculates functional mask value based on m1() result. @return functional mask value as a double
618 Merges adjacent sample items while maintaining quantile statistics.
619 Calculates the quantile value based on sample data and rank. @param quantile desired quantile value between 0 and 1
620 Updates the sample data by processing the compressed buffer and inserting new samples.
621 Retrieves cached netgroup names from the `NetgroupCache` instance.
622 Checks if a netgroup matches the mask. @param group unique netgroup identifier
623 Retrieves server-side SASL properties based on client IP address and port. @param clientAddress InetAddress object representing client's network address @param ingressPort Ingress port number (currently unused)
624 Retrieves SASL properties based on server address and port. @param serverAddress server's network address
625 Generates a functionality mask from a given Kerberos principal name. @param principalName Kerberos principal name
626 Retrieves the set of groups for a given user, attempting to use cached mappings and negative caching before falling back to database access. @param user unique user identifier
627 Clears user-to-groups map cache and refreshes group information.
628 Logs a message to console and output stream using specified format. @param format logging format @param args message arguments
629 Updates the specified ID mapping with shell-based user/group lookups. @param map ID mapping to update @param mapName name of the ID mapping @param command shell command for user/group lookup @param regex regular expression to parse ID values @param staticMapping static mapping of IDs to integers @return true if the ID mapping was updated, false otherwise
630 Constructs a shell command array for executing the specified script file. @param script File object containing the script to be executed
631 Handles authentication exception by switching bind user and logging the change. @param e AuthenticationException instance
632 Writes data to the output stream with SASL support. @param inBuf input buffer @param off offset of data in buffer @param len length of data in buffer
633 Flushes and writes data to the underlying output stream using SASL mechanisms. @throws IOException on write or flush failure
634 Handles HTTP interaction with CSRF prevention. @param httpInteraction Interaction details
635 Parses and validates group names and IDs, returning a set of valid groups. @param groupNames comma-separated list of group names @param groupIDs comma-separated list of corresponding group IDs @return Set<String> of valid group names or throws PartialGroupNameException if invalid
636 Calls m1 method from SecretManager to process the provided cryptographic key bytes. @param key byte array containing the cryptographic key
637 Removes token associated with the given TokenIdent. @param ident unique token identifier
638 Resets token masks and updates internal state.
639 Updates token mask value based on delegation key. @param key DelegationKey object
640 Removes a delegation key from the SQL secret manager. @param key DelegationKey object containing key details
641 Updates the secret manager with a new delegation key, applying mask calculations. @param key DelegationKey object to add and process
642 Masks delegation key and updates token management. @param key DelegationKey object to mask
643 Updates the AbstractDelegationTokenSecretManager instance and disables managed mode.
644 Initializes authentication configuration with optional customizations. @param configPrefix prefix for configuration properties @param filterConfig web application filter configuration
645 Returns Hadoop's User Group Information instance with specific mask. @return UserGroupInformation object
646 Validates delegation token operation from request. @param request HTTP request object @return true if valid, false otherwise
647 Delegates token management to a renewer instance. @throws IOException if an error occurs during delegation
648 Calls the token renewer to perform m2 operation. @param conf configuration object
649 Executes token-related operations based on configuration. @param conf system-wide configuration
650 Wraps input stream with SASL security layer if m1() condition is met. @param in the InputStream to be potentially wrapped
651 Wraps output stream with SASL-wrapped buffer based on QOP mask. @param out original output stream @return wrapped output stream or original if no wrapping required
652 Fetches SASL data and authentication result. @throws IOException on I/O error
653 Resets input stream and closes SASL connection. @throws IOException on I/O operation failure
654 Creates an instance of AccessControlException with the specified underlying cause. @param cause root exception causing the access control violation
655 Checks if user has valid Hadoop login context. @return true if valid, false otherwise
656 Updates the user's last login timestamp. @param time Unix timestamp representing the new last login time
657 Initializes UserGroupInformation with the given Subject, extracting and validating the User principal. @param subject Hadoop Subject containing user credentials
658 Returns the user's mask value. @return m1 value from user object
659 Checks if Kerberos authentication is enabled. @return true if Kerberos authentication is set, false otherwise
660 Retrieves the authenticated authentication method using user credentials. @return AuthenticationMethod object representing the current authentication method
661 Retrieves user group information from the first real user. @return UserGroupInformation object or null if not found
662 Returns string representation of user's m1 value.
663 Sets the authentication method for the current user. @param authMethod AuthenticationMethod enum value
664 Initializes ReloadingX509TrustManager with specified truststore details. @param type Trust manager type @param location Path to the truststore file @param password Truststore password
665 Initializes the ReloadingX509KeystoreManager instance with given parameters. @param type Type of keystore (e.g., "JKS", "PKCS12") @param location Path to the keystore file @param storePassword Password for accessing the keystore @param keyPassword Password for accessing private keys
666 Retrieves resource by name using Hadoop's class loader. @param name Resource identifier
667 Retrieves a resource by name and returns an input stream to it. @param name Resource identifier
668 Retrieves a resource by name and returns its contents as an InputStreamReader. @param name Resource identifier
669 Creates a secure socket engine with configured settings. @return SSLEngine object or null if creation failed
670 Configures and returns an HTTPS connection with initialized SSL settings. @param conn the HttpURLConnection object to configure @return the configured HTTPS connection or original connection if not HTTPS
671 Initializes Configuration object from provided settings. @param conf Hadoop configuration to be initialized
672 Handles shell command execution timeout for user group lookup. @param executor ShellCommandExecutor instance @return true if timeout occurred, false otherwise
673 Constructs an executable string from the result of m1(). @return a shell command as a single string
674 Retrieves authentication method by byte code mask. @param in DataInput stream containing byte code to look up
675 Validates user addition based on existing wildcard permission and group membership rules. @param user unique user identifier
676 Validates group addition and updates internal mappings. @param group the name of the group to add
677 Removes user from access control list. @param user username to remove
678 Removes a user group, checking for wildcard permission and updating the ACL string. @param group name of the group to remove
679 Generates access control list mask using users collection. @param users Collection of users to include in the mask
680 Constructs the function mask string based on group permissions. @return comma-separated string of enabled functions
681 Validates Kerberos ticket using internal logic. @param ticket KerberosTicket object to validate
682 Retrieves server properties based on the provided client IP address. @param clientAddress InetAddress object representing the client's IP address
683 Ensures AES/CTR/NoPadding or SM4/CTR/NoPadding codec is used. @param codec cryptographic codec to validate
684 Calculates the mask value based on the current stream position and decrypted data. @throws IOException if an I/O error occurs
685 Reads and decrypts a portion of encrypted data from the input stream. @param inBuffer underlying input stream containing encrypted data
686 Retrieves the CipherSuite instance associated with a given functional mask. @param name string representation of the functional mask
687 Checks if the given protocol version is a mask value. @param version CryptoProtocolVersion object to check @return true if version is a mask, false otherwise
688 Generates a random integer of the specified bit length. @param numBits desired number of bits in the output
689 Returns a KeyProviderCryptoExtension instance with the provided key provider and associated crypto extension. @param keyProvider key management framework
690 Retrieves key version with functional mask based on input 'name'. @param name key identifier
691 Generates cryptographic key based on provided size and algorithm. @param size desired key length @param algorithm name of encryption algorithm (e.g., AES)
692 Constructs an EncryptedKeyVersion instance with specified details. @param keyName encryption key name, or null for none @param encryptionKeyVersionName version of the encryption key @param encryptedKeyIv associated initialization vector, or null for none @param encryptedKeyMaterial encrypted key material
693 Creates a KeyProviderDelegationTokenExtension instance with the given key provider. If the key provider is already an instance of DelegationTokenExtension, it is used; otherwise, the default extension is applied. @param keyProvider the key provider instance
694 Initializes mask queue and cleans up SSL factory.
695 Retrieves lock instance based on function mask calculated from key name. @param keyName unique identifier of the key
696 Appends a field to the CallerContext instance, using m1 for validation and m3 for appending.
697 Appends a key-value pair to the CallerContext, validating both fields. @param key unique identifier for the field @param value associated value for the field
698 Appends key-value pair to the CallerContext fields, enforcing mask validity. @param key unique identifier for the field @param value associated value for the field
699 Creates a successful refresh response with code '0' and message "Success". @return RefreshResponse object indicating success
700 Converts client ID byte array to UUID string. @param clientId input client identifier as a byte array
701 Evaluates RPC request using client's reference. @param e RPC request object
702 Returns a functional mask value based on m1 metric. @return m1 metric value
703 Combines and filters VersionedProtocol interfaces based on input protocol. @param protocol input protocol class @return array of combined, filtered protocol interfaces
704 Resolves protocol proxy to connection address. @param proxy protocol proxy object
705 Retrieves monotonic time value in milliseconds.
706 Retrieves user group information based on function mask. @return UserGroupInformation object or null if failed
707 Computes a unique identifier array for the given protocol methods. @param methods Array of ProtocolMethod objects @return Array of integer hash codes representing method signatures or null if input is null
708 Fetches refresh responses for the given identifier and arguments. @param identifier unique identifier in RefreshRegistry @param args additional parameters for refresh operation @return Collection of RefreshResponse objects or empty collection if not found
709 Constructs a RemoteException with specified class name and error message. @param className originating class name @param msg error description
710 Attempts to unwrap IOExceptions using the provided class types. @param lookupTypes variable arguments of Class<?> for type matching
711 Returns an instance of IOException with masked class name.
712 Computes weighted time cost based on processing details and weight configurations. @param details ProcessingDetails object containing timing information
713 Retrieves the mask value from dropped connections.
714 Calculates functional mask value based on connection counts. @return bit mask integer representing connection status
715 Masks an element from the queue by releasing a semaphore and updating metrics. @param priority element priority @param e element to mask
716 Masks an element in the queue based on its priority level. @param priority The priority of the element to mask @param e The element to mask @return true if masking was successful, false otherwise
717 Adds exceptions to terse logging category. @param exceptionClass exception classes to add
718 Handles suppressed logging exceptions using provided exception classes. @param exceptionClass one or more exception classes to add
719 Initializes an RpcException with a server-related error message. @param message detailed description of the server issue
720 Constructs an RpcServerException with a custom error message. @param message detailed description of the RPC-related issue
721 Creates an RpcClientException with the specified RPC-related error message. @param message detailed description of the issue
722 Constructs an RpcException with a custom error message and underlying cause. @param message detailed error description @param cause root exception causing this RPC error
723 Constructs an RpcServerException with a custom error message and underlying cause. @param message detailed RPC error description @param cause root exception causing this server-side RPC error
724 Constructs an RpcException with a custom error message and underlying cause. @param message detailed error description @param cause root exception causing this RPC error
725 Updates call costs for the specified user identity. @param identity unique user identifier @param costDelta delta value to add to call costs
726 Calculates the decay level for a given RPC cost and user identity. @param cost remote procedure call cost @param identity unique user identifier @return decay level (1-10) or 0 if not applicable
727 Wraps ServiceException in an IOException. @param se ServiceException object
728 Converts IpcCall to result of type T, handling ServiceException. @param call IpcCall object
729 Retrieves cached ByteString object using ProtobufHelper's m1 method. @param key unique identifier
730 Wraps byte array in a ByteString using ProtobufHelper. @param bytes input byte array
731 Updates client connection settings with given ID and retry count. @param cid unique client identifier @param rc retry count value @param externalHandler external handler object for asynchronous calls
732 Retrieves server address using IPC protocol. @return InetSocketAddress object representing server endpoint
733 Retrieves a set of InetSocketAddress addresses from auxiliary listeners. @return Set<InetSocketAddress> containing addresses or empty set if none found
734 Removes a cached client instance and stops the underlying client when reference count reaches zero. @param client cached client object to remove
735 Delegate equality check to superclass.
736 Constructs a ProtobufWrapperLegacy instance from a given protobuf message. @param message the protobuf message to wrap
737 Processes RPC response with fatal status and stores it in the current call. @param response ByteArrayOutputStream containing server's response @param call RpcCall object representing the current request
738 Handles queue completion by advancing to next weighted queue or resetting request counts.
739 Handles IOException by updating error state and invoking subsequent processing. @param error exception to be handled
740 Handles RPC response and notifies external handlers. @param rpcResponse Writable object containing RPC result
741 Retries m2() until successful or socket timeout exceeded. @throws IOException if operation fails
742 Continuously attempts to read from input stream until successful or timeout occurs. @param buf data buffer @param off offset within buffer @param len number of bytes to read
743 Returns the function mask address.
744 Calls and retrieves result from M1 function. @return result of M1 function or 0 if it failed
745 Retrieves the QOP mask based on the established connection. @return QOP mask or null if not applicable
746 Retrieves and executes the next RPC request.
747 Retrieves a mask value using the connection manager and serialization. @return serialized mask value or null on failure
748 Initializes MachineList from a collection of host entries. @param hostEntries collection of allowed IP addresses or hostnames @param addressFactory factory for resolving host names to IP addresses
749 Validates an IP address against the machine list. @param ipAddress IP address to be validated
750 Initializes SysInfoLinux object with Linux system file paths and time interval. @param procfsMemFile path to memory metrics file @param procfsCpuFile path to CPU metrics file @param procfsStatFile path to system statistics file @param procfsNetFile path to network metrics file @param procfsDisksFile path to disk metrics file @param jiffyLengthInMillis time interval in milliseconds for CPU tracking
751 Reads memory information from /proc/meminfo and updates system metrics.
752 Calculates the system's processor mask based on CPU information. @return Processor mask value
753 Returns a mask representing the number of CPU cores. @return Integer value representing core count
754 Retrieves CPU frequency in Hz.
755 Reads CPU time metrics from system file and updates tracker.
756 Calculates network bytes read mask. @return network bytes read value
757 Calculates network byte mask. @return total bytes written
758 Reads disk block information from /proc/diskstats and updates numDisksBytesRead and numDisksBytesWritten counters.
759 Retrieves the value associated with a given key from the hash store. @param k the key to search for
760 Retrieves a value from the hash store based on the provided key. @param k the key to search for
761 Removes the first occurrence of a key from the set. @param index hash table index @param key unique identifier to search for @return removed element's type or null if not found
762 Configures TransformerFactory to restrict external DTD and stylesheet access. @param transformerFactory factory instance to modify
763 Parses string with size prefix into long value. @param s string containing binary size representation and its corresponding value
764 Formats a long value with binary size representation and units. @param n long value to format @param unit string representing the unit (e.g. "B", "KB") @param decimalPlaces number of decimal places for formatting
765 Formats string representation of a double value as a percentage with specified decimal places. @param fraction double value to format @param decimalPlaces number of decimal places for the formatted string
766 Formats byte array as a hexadecimal string. @param bytes input byte array @param start start index (inclusive) @param end end index (exclusive) @return formatted string or null if failed
767 Formats input double as a string with two decimal places. @param d value to format
768 Handles ExitException by logging and potentially terminating the application. @param ee instance of ExitException containing status information
769 Handles a HaltException by logging and potentially throwing it. @param he the HaltException instance to handle
770 Registers a shutdown hook with specified execution settings. @param shutdownHook Runnable task to execute upon system shutdown @param priority Execution priority (lower values have higher priority) @param timeout Maximum duration for task completion in specified unit @param unit Time unit for timeout setting (e.g., TimeUnit.SECONDS)
771 Registers a shutdown hook with the specified priority and timeout. @param shutdownHook Runnable task to execute upon system shutdown
772 Registers a shutdown hook with the lowest possible priority. @param shutdownHook Runnable task to execute upon system shutdown
773 Retrieves input stream for a Hadoop resource using the current thread's class loader. @param resourceName Name of the resource to load
774 Initializes LineReader with input stream and default buffer size. @param in InputStream to read from
775 Executes shell command based on interval, handling I/O errors and exit codes.
776 Creates a ThreadFactory that prefixes thread names with a specified string and configures thread priority. @param prefix unique identifier for threads
777 Dynamically resizes the hash set by doubling its capacity when load factor exceeds threshold.
778 Creates an empty ArrayList and populates it with elements from the iterator. @param elements Iterator of elements to add
779 Adds elements from iterable to collection, returning true if modified. @param addTo Collection to add elements to @param elementsToAdd Iterable of elements to add
780 Creates an ArrayList with a specified capacity. @param initialArraySize the desired size of the list
781 Serializes object to JSON byte array and writes it to output stream. @param instance T object to serialize @param dataOutputStream OutputStream to write serialized bytes to
782 Initializes the operation duration with the current system time. @param none
783 Initializes duration tracking with current system time.
784 Calculates operation duration mask using m1 and m2 methods. @return Duration object representing the calculated mask
785 Calculates and formats operation duration using internal metrics. @return formatted string representing elapsed time
786 Computes the functional mask value for a given lengthBytes and modulus. @param lengthBytes positive integer representing data length in bytes @param mod modulus value
787 Computes the functional mask value by combining CRC values and a monomial. @param crcA first CRC value @param crcB second CRC value @param monomial polynomial value @param mod modulus value
788 Computes the CRC mask for a given integer value. @param value input integer value
789 Computes the FUNC_MASK value from a byte array. @param bytes input byte array (must be length 4) @return string representation of the computed FUNC_MASK value
790 Formats byte array into a string of hexadecimal values, grouped by 32-bit words. @param bytes input byte array
791 Unpacks JAR contents based on specified regex pattern and writes to target directory. @param inputStream input stream containing the JAR file @param toDir target directory for unpacking @param unpackRegex regex pattern used to filter files within the JAR
792 Expands JAR contents into a specified directory, filtering files based on a provided regex pattern. @param jarFile the JAR file to expand @param toDir the target directory for expansion @param unpackRegex the regular expression pattern used for filtering files
793 Finds all occurrences of a specific byte within a UTF-8 encoded byte array. @param utf the byte array to search @param start starting index for search @param length maximum number of bytes to consider in search @param b target byte value @param n maximum number of occurrences to find @return index of first occurrence or -1 if not found, followed by -1 for each subsequent occurrence
794 Stores a key-value pair using weak reference and retrieves the associated value. @param key unique identifier @param value masked value to be stored @return associated value or null if reference is lost
795 Retrieves mapped value by key and resolves with mask. @param key unique identifier
796 Checks if a masked value exists in map. @param key unique identifier @return true if value found, false otherwise
797 Retrieves a value from the WeakReferenceMap, creating a new weak reference if necessary. @param key unique identifier @return Retrieved value or null if not found
798 Counts weak references with null values.
799 Creates a snapshot of current suppressed event statistics. @return SuppressedSnapshot object containing the current count and wait duration
800 Calculates and formats time difference between start and finish times. @param finishTime end timestamp @param startTime start timestamp
801 Extracts key-value pairs from input string. @param str input string to process
802 Splits input string into substrings using a separator character, handling escapes. @param str input string to split @param escapeChar escape character for the separator @param separator target separator character @return array of split strings or null if input is null
803 Escapes characters in a string using the specified escape character and array of characters to escape. @param str input string @param escapeChar character used for escaping @param charsToEscape array of characters to be escaped @return modified string with characters escaped or null if input is null
804 Validates and escapes special characters in a string. @param str input string @param escapeChar character to use for escaping @param charsToEscape array of characters that should be escaped
805 Retrieves application build version mask as string. @return formatted version string or "Unknown" if not found
806 Retrieves version info mask from properties. @return Revision string or \"Unknown\" if not found
807 Retrieves version-specific mask value from properties. @return mask string or default value if not found
808 Returns version mask based on m1 value.
809 Retrieves version info mask from properties.
810 Retrieves version info mask from properties.
811 Returns version info mask value. @return String representation of the version info mask or 'Unknown' if not found
812 Retrieves protocol version mask from common version info.
813 Retrieves application build function mask from version info. @return Function mask string or 'Unknown' if not found
814 Initializes WrappingRemoteIterator with a RemoteIterator instance and a filtering function. @param source RemoteIterator to be wrapped @param filter Function to filter elements from the remote data source
815 Initializes WrappingRemoteIterator with a RemoteIterator instance and halt condition. @param source RemoteIterator to be wrapped @param continueWork CallableRaisingIOE indicating whether to continue iteration based on the specified condition
816 Checks for a valid element to filter and returns true if found, false otherwise. @throws IOException on input/output exceptions
817 Initializes MaybeClose instance with optional resource to close. @param o object to manage, may implement Closeable
818 Executes a callable task using an executor and returns the result as a CompletableFuture. @param executor thread pool executor @param call Callable task to be executed
819 Initializes lazy atomic reference with a callable constructor. @param constructor function to evaluate and initialize the reference
820 Initializes lazy atomic reference with a supplier function. @param supplier function to evaluate and initialize the reference
821 Retrieves atomic reference value while checking if reference is not closed. @throws IOException if I/O exception occurs during initialization
822 Returns the atomic reference value, or initializes it through m1() if not already set.
823 Wraps CallableRaisingIOE in a functional interface, invoking its m1 method.
824 Converts callable raising IOExceptions into unchecked version. @param call CallableRaisingIOE to be converted
825 Initializes builder with an iterable collection of items. @param items RemoteIterator instance containing item data
826 Processes a collection of exceptions, merging similar ones and throwing the primary exception. @param exceptions collection of exceptions to process @throws E the merged exception
827 Initializes builder with an iterable collection of items. @param items input iterable containing item data
828 Initializes task execution with default exception handling behavior.
829 Throws an IOException wrapping the given ExecutionException. @param e the original ExecutionException
830 Wraps a CompletionException into an IOException. @param e CompletionException to be wrapped
831 Configures the given object with settings from the provided configuration. @param theObject Object to configure @param conf Hadoop Configuration instance
832 Retrieves Class instance for given name from cache or loads it dynamically. @param name class name @return Class<?> instance or throws ClassNotFoundException on failure
833 Prints thread dump information to the specified PrintStream. @param stream output stream @param title descriptive title for the thread dump
834 Initializes the Configuration object with default loading enabled/disabled. @param loadDefaults true to enable default configuration loading
835 Creates and sends a JSON error response to the client. @param response HttpServletResponse object @param status HTTP status code @param ex Throwable exception containing error details
836 Creates an HTTP response for an exception with detailed error information. @param status HTTP status code @param ex Throwable containing error details
837 Initializes CRC value with all ones using the reset() method.
838 Iterates over elements in collection, applying a mask operation.
839 Constructs shell command for user group lookup. @param user username to query
840 Constructs shell command for user group lookup. @param user input username
841 Constructs function mask array based on the operating system. @return Array of shell commands or throws exception if Windows-specific function mask is not available
842 Constructs the command for changing permissions. @param perm permission string @param recursive whether to recursively apply changes (Windows-specific)
843 Constructs a function mask array for Hadoop command execution. @param owner the owner identifier (e.g., user)
844 Constructs a function mask for symbolic linking. @param target file path to be linked @param link symbolic link name
845 Constructs function mask for readlink command. @param link path to file or directory
846 Constructs a function mask string for process management. @param code signal to be sent @param pid process identifier
847 Constructs shell command file path based on platform and given base name. @param parent directory to store command @param basename base name of the command
848 Retrieves the Hadoop configuration directory. @throws FileNotFoundException on invalid input or directory issues
849 Returns the Hadoop home file or throws a FileNotFoundException if failure cause is present. @throws FileNotFoundException if failure cause is provided
850 Constructs a file path for the specified Hadoop executable. @param hadoopHomeDir Hadoop home directory @param executable name of the executable to find @return File object representing the executable or null if not found
851 Returns a file object based on the WINUTILS_FILE or throws FileNotFoundException if WINUTILS_FAILURE is set. @throws FileNotFoundException if WINUTILS_FAILURE is not null
852 Executes a command on each child shell with a non-null process.
853 Initiates shutdown of a specified thread with a default timeout. @param thread Thread to shut down
854 Initiates orderly shutdown of ExecutorService with default timeout. @param service ExecutorService to shut down
855 Creates a new progress instance with associated phases.
856 Calculates the progress by creating a new phase with specified weightage. @param weightage the weightage value for the new phase
857 Calculates the overall progress of tasks based on current phase and completed phases. @return total progress value
858 Resets progress to initial state and updates parent phase. @param none
859 Retrieves string data from ZooKeeper node at specified path. @param path relative or absolute node path within zk hierarchy
860 Retrieves string representation of ZooKeeper node data at specified path. @param path node address @param stat node statistics (optional) @return node data as a string or null for errors
861 Updates ZooKeeper node with given UTF-8 encoded string data at specified path and version. @param path node path @param data UTF-8 encoded string to update @param version node version
862 Creates a persistent node in ZooKeeper at the specified path if it does not exist. @param path ZK path to create @param zkAcl list of ACLs for secure access
863 Checks if a node exists at the specified ZK path and performs additional operations if it does. @param path ZK path to check
864 Creates a safe transaction for ZooKeeper node fencing. @param path ZK path to fence @param fencingACL list of access control lists @param fencingNodePath path to the fenced node
865 Registers program with metadata and executes it. @param name unique program identifier @param mainClass Class containing the main method @param description Brief program description
866 Binds static method with specified classes and name. @param targetClass the class containing the method @param methodName unique method identifier @param argClasses variable number of argument types
867 Dynamically binds and invokes a method within the given target class. @param targetClass the class containing the desired method @param methodName unique method identifier @param argClasses variable number of argument classes (if applicable)
868 Creates an unbound method instance with specified name and functional dependencies. @param name name of the target method
869 Checks if any of the provided unbound methods are not NOOP. @param methods array of DynMethods to check @return true if all methods are NOOP, false otherwise
870 Checks if an unbound method is a no-op (i.e., bound to NOOP). @param method UnboundMethod object to check
871 Binds the unbound method to a specific object. @param receiver target object to bind the method to
872 Creates a mask representing a static method.
873 Retrieves the JAR file path containing the specified class. @param clazz Class object
874 Retrieves the path of a resource file associated with the given class. @param clazz Class instance
875 Writes checksum data and optionally resets internal state. @param out DataOutputStream for writing @param reset whether to reset checksum state after writing @return size of written checksum data
876 Generates and/or updates the checksum in the provided buffer. @param buf input data buffer @param offset starting position of checksum within buffer @param reset whether to reset internal state after processing @return size of updated checksum (4 for CRC-32, 0 otherwise)
877 Creates rate limiting instance with specified capacity. @param capacity maximum allowed requests or 0 for unlimited access
878 Installs UNIX signal handlers and logs their registration. @param log logging instance for signal event recording
879 Initializes the LightWeightGSet with a specified capacity. @param recommended proposed set size
880 Updates included and excluded hosts based on 'm1' filter results. @param includes set of included host names @param excludes set of excluded host names
881 Updates included and excluded hosts based on host details. @param includeHosts set of included host names @param excludeHosts mapping of excluded items with their counts
882 Computes the Jenkins hash of a byte array. @param key input byte array @param nbytes length of the input byte array @param initval initial value for hashing @return 32-bit hash value as an integer
883 Resolves Hash instance based on specified type. @param type unique hash identifier
884 Initializes an empty Counting Bloom filter instance.
885 Initializes an empty Bloom filter instance.
886 Initializes an empty Bloom filter instance.
887 Generates multiple hash values from a given key. @param k Key object
888 Initializes Lock object with default ReentrantLock instance.
889 Initializes lock mask using m1().
890 Logs an error message with optional arguments to stderr. @param e Throwable object @param text error message string @param args optional arguments for formatted output
891 Logs an error message with optional arguments to stderr. @param errorcode unique error identifier @param text error description string
892 Loads class and prints functional mask message with loaded class information. @param name class name @param clazz Class object
893 Returns current GC data with mask applied. @return masked GcData object
894 Initializes CRC32 value to all-ones mask using reset().
895 Calculates the number of shutdown hooks that timed out during execution.
896 Inserts an element into the priority queue with specified priority. @param element object to insert
897 Removes and returns the top element (highest priority) from the queue. @return The removed element or null if the queue is empty
898 Initializes internal state using m1 function.
899 Creates a new HashSet instance from an iterator of elements. @param elements source of elements to add
900 Creates a set mask with optimal size based on the given expected size. @param expectedSize predicted number of elements
901 Skips to a specified mask value while enforcing constraints. @param newValue target mask value
902 Creates a new TableListing instance with default column structure and display settings.
903 Checks if a configuration key is deprecated. @param key configuration key to check
904 Checks if a function is deprecated based on the provided name. @param name function name to check
905 Reloads and updates all configuration properties. @param none
906 Updates configuration masks based on the given name. @param name identifier of the resource to update
907 Converts time duration string to a numerical value in the specified unit. @param name configuration key name @param vStr input time duration string @param defaultUnit default TimeUnit to use if parsing fails @param returnUnit desired TimeUnit for the result @return converted time duration value as a long
908 Retrieves configuration properties by specified tags. @param tagList list of unique configuration identifiers
909 Masks sensitive configuration values based on predefined patterns. @param key configuration key to check @return masked or original configuration value depending on sensitivity
910 Masks sensitive configuration values based on predefined patterns. @param key configuration key to check @return masked value or original value if not sensitive
911 Initializes and starts a reconfiguration task.
912 Initializes the DeprecationContext with information from another context and deltas. @param other existing DeprecationContext instance @param deltas array of DeprecationDelta objects containing new key info and custom messages
913 Constructs a ReconfigurationException with detailed error message and configuration change information. @param property the modified property name @param newVal the new value of the property @param oldVal the original value of the property (may be null) @param cause underlying exception that triggered this exception
914 Constructs a ReconfigurationException with informative message and properties. @param property the modified property name @param newVal the new value of the property @param oldVal the original value of the property (may be null)
915 Determines whether to permit manual HA state management based on automatic failover settings. @param target HAServiceTarget object @return boolean flag indicating permission status
916 Executes SSH command to gather process information and returns the result mask. @param session SSH session object @param cmd Command string to execute @return Result mask or throws exception on failure
917 Validates the current service state for failover. @throws ServiceFailedException if not healthy or observing
918 Reads data into a direct ByteBuffer from specified file ranges while adhering to chunk size constraints. @param range input file range @param buffer target buffer for reading data @param operation Function4RaisingIOE callback for processing read data
919 Validates, sorts, and merges input file ranges to ensure they are ordered and disjoint. @param input list of file ranges to validate and sort @param fileLength optional file length for range validation @return sorted and validated list of file ranges
920 Initializes BlockManager with specified block data. @param blockData BlockData object to manage
921 Masks buffer data based on prefetching context. @param data BufferData object to mask
922 Acquires a resource from the pool, ensuring it's part of this instance and not already acquired. @param item resource to acquire
923 Validates the buffer state against a variable number of expected states. @param states list of possible states
924 Validates input string and ensures it's not empty. @param arg input string to check @param argName name of the argument for error message
925 Validates the number of elements in a collection. @param collection Collection to check @param numElements Expected number of elements @param argName Name of the argument for error message
926 Validates a file path by checking its existence and throwing an exception if it doesn't. @param path the Path to check @param argName name of the argument for error message
927 Initializes a BoundedResourcePool with the specified size. @param size maximum number of resources to manage
928 Initializes BufferPool with specified size, buffer size, and statistics. @param size pool capacity @param bufferSize individual buffer size @param prefetchingStatistics stats tracker for memory allocation
929 Validates that the provided block number is non-negative. @param blockNumber input block number to check
930 Initializes a new BufferData instance with the given block number and data buffer. @param blockNumber unique block identifier @param buffer data content to be tracked
931 Initializes Retryer with retry delay and interval settings. @param perRetryDelay time to wait between retries @param maxDelay maximum total delay for retry attempts @param statusUpdateInterval interval at which status is updated
932 Validates array size and throws error if less than one. @param arraySize the size of the array to validate @param argName name of the argument being validated
933 Validates array size and throws error if less than one. @param arraySize the size of the array to validate @param argName name of the argument being validated
934 Validates short array size and throws error if less than one. @param arraySize the size of the array to validate @param argName name of the argument being validated
935 Validates array size and throws error if less than one. @param arraySize the size of the array to validate @param argName name of the argument being validated
936 Validates array size and throws error if less than one. @param arraySize the size of the array to validate @param argName name of the argument being validated
937 Validates Iterable and its minimum number of elements. @param iter Iterable to check @param argName name of the argument for error message
938 Deletes a collection of paths from the file system. @param paths collection of paths to delete
939 Applies input function to masked IO statistics snapshot. @param source serialized input data @param fun function that processes IO statistics snapshots @return result of applying the function or null if failed
940 Initializes FlagSet with the given enumeration class, prefix, and optional initial flags. @param enumClass enumeration type @param prefix common prefix for all enum values @param flags initial EnumSet of flags (may be null)
941 Closes the file system instance and updates cache. @throws IOException if an I/O error occurs
942 Invokes URI-specific operation on underlying URI instance with provided metadata. @param o FileStatus object containing associated metadata
943 Invokes URI-specific comparison operation on underlying URI instance. @param o FileStatus object containing associated metadata
944 Recursively extracts paths from input file statuses and appends the given path. @param stats array of Hadoop file statuses @param path additional path to append @return Path[] containing extracted paths or null if input is invalid
945 Determines if a given Hadoop file system path has read-only connector capabilities. @param path Hadoop file system path @param capability capability string associated with the path
946 Creates a JsonSerialization instance for IOStatisticsSnapshot with pretty formatting.
947 Initializes storage statistics with specified name, scheme, and IO statistics. @param name unique identifier for storage metrics @param scheme storage system scheme @param source input/output statistics to manage
948 Initializes empty storage statistics with given metrics. @param m1 first metric value @param m2 second metric value
949 Constructs a PathIsDirectoryException with specified Hadoop filesystem path and default error message. @param path unique file system path
950 Constructs a PathIOException with specified Hadoop filesystem path and error message. @param path unique file system path
951 Constructs a PathIOException with specified Hadoop filesystem path and default error message. @param path unique file system path
952 Constructs an exception with specified directory path and error message. @param path unique directory path indicating the problematic location
953 Sets buffer size and returns the mask value. @param bufSize buffer size in bytes
954 Configures the output stream's replication factor. @param replica number of replicas to maintain
955 Sets block size and returns functional mask value. @param blkSize block size in bytes @return functional mask value as a byte
956 Returns the mask value using m1. @return The result of calling m1()
957 Sets creation flag and returns mask value.
958 Configures the output stream's write mask based on overwrite flag. @param overwrite true to enable overwrite, false otherwise
959 Configures output stream builder with append flag and returns mask value. @return int mask value
960 Interns and updates host array. @param hosts input array of host strings
961 Initializes and caches host strings from the provided array. @param cachedHosts input array of host strings
962 Interns input array of names for efficient string management. @param names input array of strings
963 Initializes the topology paths array with interned strings. @param topologyPaths input array of topology paths
964 Determines if a file is present, delegating to m1 and handling FileNotFoundException. @param f the file path @return true if file exists, false otherwise
965 Wraps an IOException with a custom message and Hadoop filesystem path. @param path Hadoop filesystem path @param methodName current method name @param exception original IOException instance @return wrapped IOException instance or the original if it's already InterruptedIOException or PathIOException
966 Advances the reader to the specified position and checks for synchronization. @param position desired target byte offset
967 Masks data in the MapFile based on the first position.
968 Registers all registered expression classes with the given factory. @param factory instance of ExpressionFactory to register expressions
969 Registers various file system commands with the CommandFactory. @param factory instance of CommandFactory to register commands
970 Expands a file pattern into a list of fully resolved paths. @param filePattern input file pattern
971 Retrieves file statuses for a given path using the provided filter. @param f Path object representing the directory or file being processed @param filter PathFilter instance used for filtering @return array of filtered FileStatus objects
972 Filters file statuses based on a provided PathFilter and returns the results. @param files array of paths to process @param filter PathFilter instance used for filtering @return array of filtered FileStatus objects or null if an error occurs
973 Authenticates with provided URL using delegation token. @param url URL to authenticate with @param token DelegationToken for authentication @param renewer User ID of the entity requesting renewal
974 Authenticates using a delegation token and the specified user. @param url URL to authenticate @param token Delegation token object
975 Authenticates URL with delegation token and user. @param url target URL @param token delegation token for authentication
976 Constructs FileEncryptionInfo with specified parameters. @param suite CipherSuite instance @param version CryptoProtocolVersion instance @param edek encryption data key (byte array) @param iv initialization vector (byte array) @param keyName string identifier for the encryption key @param ezKeyVersionName string identifier for the EZ key version
977 Configures file permissions for multipart upload. @param perm FsPermission object
978 Configures checksum option using builder pattern. @param chksumOpt checksum options to be set
979 Constructs a WrappedIOException with the given underlying IOException. @param cause non-null IOException to be wrapped
980 Initializes FsLinkResolution with a specified function. @param fn FsLinkResolutionFunction instance to be applied
981 Initializes GlobBuilder with FileContext. @param fc Hadoop file context
982 Initializes GlobBuilder with Hadoop file system instance. @param fs Hadoop file system reference
983 Configures output stream permissions using FsPermission. @param perm file system permission settings
984 Configures output stream builder with progress tracking. @param prog non-null progress tracker
985 Configures checksum options and returns a functional mask. @param chksumOpt checksum configuration object
986 Validates and checks bounds for writing data block parameters. @param b the byte array
987 Compares two strings using their custom comparison logic. @param s1 first string @param s2 second string
988 Verifies ZooKeeper client instance and returns true if outdated. @param ctx ZooKeeper object reference
989 Retrieves or creates file system statistics based on the provided scheme and class. @param scheme file system scheme (e.g. HDFS) @param cls type of FileSystem implementation @return Statistics object for the specified file system, or null if not found
990 Copies data from input stream to output stream with specified buffer size. @param in input stream source @param out output stream destination @param buffSize buffer size for copying operation @param close whether to close streams after operation (default: false)
991 Copies input stream to output stream, optionally closing resources. @param in input stream @param out output stream @param count total bytes to copy @param close whether to close streams and resources after operation
992 Validates a directory by attempting to create a temporary file within it. @param dir target directory
993 Checks if any non-transient storage type has quota usage. @return true if any such type exists, false otherwise
994 Checks if any quota is consumed. @return true if at least one storage type has non-zero consumption, false otherwise
995 Calls superclass comparison method to compare replication factors.
996 Calls parent implementation of m1().
997 Masks mean statistic by resetting sample count and sum.
998 Updates mean statistic with masked values from another instance. @param other MeanStatistic object to copy values from
999 Formats IOStatistics object into a string representation. @param statistics IOStatistics object to format
1000 Logs input/output statistic map with filtered entries. @param sb StringBuilder to append formatted string @param type Statistic type (e.g., read/write) @param map Map of statistics with unique keys and values @param isEmpty Predicate function to evaluate empty values
1001 Creates a duration tracker instance with specified key and default count of 1. @param key unique identifier
1002 Fetches IO statistics as an iterator of LongStatistics. @return Iterator over LongStatistic instances or empty if none found
1003 Logs operation duration for given key. @param prefix unique identifier prefix @param durationMillis time in milliseconds to log
1004 Builds dynamic I/O statistics with current state and returns them. @return DynamicIOStatistics object or null if not built
1005 Associates an evaluation function with a given key to track dynamic IO statistics. @param key unique identifier @param eval function to evaluate counter statistics
1006 Registers an IO gauge with custom evaluation function. @param key unique identifier @param eval function to evaluate gauge values
1007 Registers a custom evaluation function for minimum statistics. @param key unique identifier @param eval function to evaluate and update minimum statistic
1008 Associates an evaluator function with a given key in the maximum statistics. @param key unique identifier @param eval function to evaluate for maximum value calculation
1009 Registers a custom mean statistic function with the given key. @param key unique identifier @param eval function to calculate mean statistic
1010 Registers an IrqHandler instance to handle a specific interruption signal. @param signalName unique identifier for the signal
1011 Returns an evaluation map with masked values. @return Map of evaluators with specified mask applied
1012 Aggregates input/output statistics by copying specified values from source to destination map using the passthrough function. @param source source map
1013 Returns an empty IO statistics snapshot.
1014 Initializes IO statistics snapshot with unique context ID and thread ID. @param threadId unique identifier for the current thread @param id unique identifier for the IO statistics context
1015 Creates an empty IO statistics snapshot.
1016 Determines whether thread-specific I/O statistics are enabled.
1017 Retrieves IO statistics mask using 'out' object. @return IOStatistics object representing the mask
1018 Retrieves IO statistics based on input stream in. @return IOStatistics object containing statistics
1019 Retrieves IO statistics based on provided data. @param datas Object containing IO statistics or source for statistics
1020 Retrieves IO statistics using m1 algorithm. @param datas input data for statistics computation
1021 Retrieves I/O statistics using the specified source. @param in Object containing I/O statistics or a source for statistics
1022 Retrieves IO statistics from the underlying output stream. @param wrappedStream the output stream to retrieve statistics from
1023 Returns IO statistics mask using compressor output. @return IOStatistics object containing compression stats
1024 Retrieves compression statistics using decompressor m1. @param in input stream to retrieve statistics from
1025 Retrieves IO statistics using m1 source. @param in input stream
1026 Verifies CRC checksums for a given data chunk. @param type checksum type @param algorithm checksum algorithm @throws ChecksumException if mismatch found
1027 Initializes decryption process using provided decryptor and IV. @param decryptor active decryptor instance @param position stream position for calculating function mask @param iv initialization vector
1028 Updates output buffer with encrypted data from input buffer. @throws IOException if an I/O error occurs
1029 Default constructor for Gzip file checksum object.
1030 Constructs a default checksum object with CRC32 settings and no MD5 hash.
1031 Initializes GlobPattern object with compiled glob pattern. @param globPattern input glob pattern string
1032 Resolves file path to original form. @param file Hadoop File object
1033 Resolves file path to canonical form on non-Windows platforms. @param file Hadoop File object
1034 Expands a zip archive to the specified directory, handling permissions and symbolic links. @param inputStream input stream containing the zip archive @param toDir target directory where the zip contents will be expanded
1035 Extracts and expands a ZIP archive into a specified directory. @param inFile the input ZIP file @param unzipDir the target directory for extraction
1036 Adds an SFTP channel to the connection pool. @param channel SFTP channel to add
1037 Shuts down the SFTP connection pool, releasing resources and closing connections.
1038 Initializes output buffer with specified size. @param size target buffer size in bytes
1039 Initializes statistics from another Statistics object. @param other source statistics object to copy from
1040 Calculates masked bytes read by aggregating statistics. @return total bytes read after applying mask
1041 Calculates total bytes written by applying a mask to statistics visitor. @return total bytes written
1042 Calculates the total number of read operations. @return count of read operations
1043 Calculates the large read operations mask. @return count of large read operations
1044 Calculates the number of write operations based on statistics. @return count of write operations
1045 Calculates total remote read time in milliseconds. @return aggregated remote read time
1046 Applies mask to statistics visitor and aggregates data. @return aggregated StatisticsData object
1047 Calculates the total bytes read for erasure-coded files. @return total bytes read
1048 Aggregates statistics by applying mask to visitor and aggregating data. @param aggregator StatisticsAggregator object
1049 Validates create flags for file operations in a Hadoop context. @param flag set of CreateFlag enums to validate
1050 Validates create flags for file operations in a Hadoop context. @param flag set of CreateFlag enums to validate
1051 Validates a file system URI against supported schemes and constructs a valid URI. @param uri input URI @param supportedScheme expected URI scheme @param authorityNeeded whether authority is required in the URI @param defaultPort default port number to use if not specified in the URI @return validated URI object or throws exception if invalid
1052 Initializes an ArrayPrimitiveWritable with a primitive array type. @param componentType class type to validate and store
1053 Converts a permission string into a bitmask representation. @param permString input string containing permissions ('r', 'w', 'c', 'd', 'a')
1054 Merges default and user-provided checksum options. @param defaultOpt default checksum options @param userOpt user-provided checksum options
1055 Applies func mask value to URI using m1 and m2 methods. @return updated URI object
1056 Initializes a ContentSummary object with specified file system metrics. @param length total content length @param fileCount number of files @param directoryCount number of directories
1057 Retrieves default file system status with maximum capacity and available space.
1058 Constructs an instance of HttpReferrerAuditHeader from a builder. @param builder configuration builder for this audit header
1059 Releases a buffer from the pool. @param data BufferData object to release
1060 Initializes SemaphoredDelegatingExecutor with executor delegate and semaphore settings. @param executorDelegatee executor service instance @param permitCount maximum concurrent executions allowed @param fair whether to use a fair semaphore
1061 Finds and releases the most optimal BufferData object matching READY state. @param blockNumber current block number
1062 Calculates and returns a function mask value based on buffer state. @return Function mask integer
1063 Validates file position within the current buffer. @param pos file position to check
1064 Returns the start offset of the file buffer. @return the start offset of the file buffer
1065 Returns active IO statistics context if thread I/O stats are enabled, otherwise returns a placeholder context.
1066 Updates the functional mask value for the current thread, either by retrieving from thread-local storage or applying to provided context. @param statisticsContext IOStatisticsContext object to update, or null to retrieve from thread-local storage
1067 Merges and sorts file ranges based on chunk size constraints. @param sortedRanges list of FileRange objects to merge @param chunkSize maximum allowed data chunk size @param minimumSeek minimum seek required for merging @param maxSize maximum size constraint for merged data @return List<CombinedFileRange> object containing merged file ranges
1068 Merges data ranges into combined file ranges based on checksum validation. @param dataRanges list of FileRange objects to merge @param bytesPerSum number of bytes per checksum @param minSeek minimum seek required for merging @param maxSize maximum size constraint for merged data @return List of CombinedFileRange objects or empty if no ranges found
1069 Initializes Name instance with default case sensitivity flag enabled.
1070 Evaluates multiple expressions in a logical conjunction. @param item PathData object to evaluate against @param depth currently unused parameter (legacy) @return Result object reflecting combined evaluation outcome
1071 Creates or retrieves FindOptions instance with specified settings.
1072 Validates command-line arguments and options. @param args list of command-line arguments
1073 Returns function mask string based on command field availability. @return DEPRECATED message or masked value of COMMAND_DESCRIPTION_FIELD
1074 Logs masked command message with error context. @param message user-provided input to be logged
1075 Constructs the function mask string. @return Command line argument with function mask or original if not available
1076 Initializes ScopedAclEntries from a list of ACL entries. @param aclEntries list of ACL entries
1077 Formats and prints table data to the specified output stream. @param out target output stream
1078 Creates a Location instance with specified mutability. @param allow true to permit changes to location properties
1079 Initializes Data instance with change allowance status. @param allow true to permit changed data, false otherwise
1080 Initializes a new Shell instance with default execution interval.
1081 Creates a new DelegationTokenAuthenticatedURL.Token instance with specified functional mask from the provided delegationToken. @param dToken Token object containing delegation token information
1082 Delegates file status retrieval to underlying Hadoop FileSystem. @param f target file system path
1083 Delegates file opening operation to underlying file system implementation. @param path Filesystem path to open @param parameters OpenFileParameters object containing configuration details
1084 Retrieves the FileSystem instance with custom permissions mask. @return FileSystem object or null if unavailable
1085 Encrypts data using OpenSSL cipher. @param input source ByteBuffer @param output destination ByteBuffer
1086 Encrypts data to the provided ByteBuffer. @param output destination buffer for encrypted data
1087 Creates a RegexMountPointInterceptor instance based on the provided settings string. @param interceptorSettingsString configuration string specifying the type of interceptor
1088 Normalizes the provided file system path. @param scheme URI scheme @param path input file system path to normalize
1089 Validates file system path. @param pathString input file system path to evaluate @param slashed whether the path is in Windows format
1090 Calculates a mask value and returns whether it matches the URI's first segment. @return true if mask matches, false otherwise
1091 Calculates a mask value from given Path object. @param p input path @return integer mask value
1092 Validates the given path and ensures it's under the base path. @param path Path object to validate
1093 Updates the last ID by scanning files in the current directory and finding the highest ID.
1094 Calculates the function mask based on current position and data size. @param n input stream size
1095 Fetches data into a ByteBuffer using a managed pool for allocation. @param stream InputStream to read from @param bufferPool ByteBufferPool used for allocation @param maxLength maximum number of bytes to read @return populated ByteBuffer or null on failure
1096 Retrieves and applies CPU mask values for the current thread.
1097 Retrieves CPU mask value and initializes audit context. @return initialized CommonAuditContext object
1098 Constructs FsPermission object with specified user, group, and other actions. @param u user action (read, write, execute) @param g group action @param o other action
1099 Constructs an instance of FsPermission from a short integer representing permission bits. @param mode FUNC_MASK parameter: a short integer with permissions bits
1100 Creates an FsPermission object from a DataInput stream. @param in DataInput stream containing permission bits
1101 Calculates effective function mask for an ACL entry. @param entry AclEntry instance
1102 Creates a read-only immutable PermissionStatus instance with specified user, group, and access rights. @param user associated user @param group associated group @param permission file system access permissions
1103 Parses ACL string into a list of AclEntry objects. @param aclSpec input ACL string to parse @param includePermission whether to parse permission from the string @return List of AclEntry objects representing parsed ACL entries
1104 Creates an instance with functional mask value. @param masked primary permission settings @param unmasked secondary, functional permissions
1105 Calculates and displays the effective permissions for an ACL entry. @param aclStatus current AclStatus instance @param fsPerm FsPermission object or null if not available @param entry AclEntry instance
1106 Splits input string into an array of substrings based on a specified delimiter. @param str input string to split
1107 Returns the current buffer position. @return current position in ByteBuffer
1108 Verifies stream availability and returns result of buffer operation. @return true if stream is available and operation succeeds, false otherwise
1109 Begins writing data block to storage system. @throws IOException on write failure
1110 Transitions data block to closed state. @return true if successful, false otherwise
1111 Invokes superclass and output block write methods.
1112 Retrieves file system statistics based on its URI. @param uri URI object representing the file system
1113 Retrieves an allocator for the given context configuration item. @param contextCfgItemName unique context identifier
1114 Writes sync data to output stream, handling position updates.
1115 Returns cached write position mask from output stream. @throws IOException if an I/O error occurs
1116 Calculates the compressed size mask by summing cached position values from output streams. @throws IOException if an I/O error occurs
1117 Calculates the content summary for a given file. @param f Path to the file @return ContentSummary object containing total length, file count, and directory count
1118 Initializes access control list from provided user/group strings. @param userGroupStrings array of ACL parts (user and group strings)
1119 Parses configuration string into EnumSet. @param key common prefix for all enum values @param valueString input string to process @param enumClass EnumSet containing the enumeration type @param ignoreUnknown whether to ignore unknown options or throw exception @return EnumSet of E objects or null if duplicate values found
1120 Validates the current service state matches the expected state. @param expectedState target service state to validate against
1121 Initializes service with specified name and NOTINITED state. @param name unique service identifier
1122 Validates service state transition by comparing masks. @param name service name @param state current service state @param proposed proposed new service state
1123 Creates a ServiceLaunchException with service creation failure mask and underlying cause. @param exception root exception triggering this exception
1124 Validates a list of configuration filenames. @param filenames array of filename strings
1125 Throws a service launch exception with exit code and details. @param thrown Throwable instance containing error information
1126 Initializes the shutdown hook with a weak reference to the provided service. @param service the Hadoop service to be managed
1127 Records service failure by logging the cause and updating the failure state. @param exception the Exception causing service failure
1128 Records service state transition with a timestamp.
1129 Stops services in the specified order, handling exceptions and logging service shutdown. @param numOfServicesStarted number of services to stop @param stopOnlyStartedServices whether to stop only started services
1130 Wraps service shutdown with exception handling. @param service Hadoop Service object to manage
1131 Calculates mask value using UTF-8 comparator. @param o UTF-8 object to compare with @return calculated mask value
1132 Compares the byte representation of this UTF-8 object with another. @param o Object to compare @return true if equal, false otherwise
1133 Computes bitwise mask from given MD5Hash object. @param that MD5Hash instance to compare with @return integer mask value
1134 Computes a mask value based on the comparison with another BinaryComparable object. @param other the object to compare with
1135 Calculates the mask value by comparing binary data. @param other byte array to compare @param off offset in other array @param len length of comparison region
1136 Computes functional mask based on hash values of m1 and m2.
1137 Calculates a mask value from the specified byte array. @param bytes input byte array @param start starting index of the integer within the array
1138 Sets the bit mask length and updates internal byte array capacity if necessary. @param size new bit mask length
1139 Checks file access rights on Windows. @param f File object
1140 Checks file write access on Windows, falls back to platform-specific implementation otherwise. @param f File object
1141 Checks file execute permission on Windows, falls back to native method on other platforms. @param f the File object
1142 Retrieves the singleton instance of ReadaheadPool, initializing it if necessary. @return The shared ReadaheadPool instance
1143 Returns a mask value based on native code availability. @return non-zero value if native code is available, 0 otherwise
1144 Updates chunked checksum for given data. @param data the data to compute checksum for @param dataOffset offset into data array where computation starts @param dataLength length of data array to process @param sums array to store computed checksum values @param sumsOffset offset into sums array where writing starts
1145 Creates a FileOutputStream for the specified file with given permissions. Handles Windows-specific behavior and POSIX operations accordingly. @param f File object @param permissions desired file mode (permissions)
1146 Reclaims pooled buffers and applies mask operation. @param none
1147 Initializes crypto stream buffers with masked values.
1148 Retrieves file status by descriptor, handling Windows and non-Windows cases. @param fd FileDescriptor to fetch status for @return Stat object containing file status information or null on failure
1149 Retrieves file status for the given path. @param path Hadoop filesystem path @return Stat object containing file metadata or null if not found
1150 Initializes the buffer with a specified byte array and limits. @param capacity total bytes in the underlying array @param limit maximum bytes to store in the buffer
1151 Initializes EnumSetWritable with an empty set of enum constants.
1152 Updates buffer with incoming data from InputStream. @param in input stream @param len number of bytes to read
1153 Returns a DataInputStream from the key buffer. @return DataInputStream object
1154 Updates writable object with base64-decoded value. @param obj Writable object to update @param newValue new value as string in base64 format
1155 Concatenates and compares two byte arrays using a buffer. @param b1 first byte array @param s1 start position in the first array @param l1 length to load from the first array @param b2 second byte array @param s2 start position in the second array @param l2 length to load from the second array
1156 Calculates functional mask validity based on erased block count. @param blockGroup ECBlockGroup object to assess
1157 Calculates total number of erased blocks in a specified ECBlockGroup. @param blockGroup Block group containing data and parity units
1158 Computes the indexes of erased ECBlock objects in a given array. @param inputBlocks array of ECBlock objects to scan @return array of erased block indexes or empty array if none found
1159 Validates input buffers based on specified decoding requirements. @param buffers array of ByteBuffer objects to be validated
1160 Validates and counts valid input buffers for decoding. @param buffers array of byte arrays to validate
1161 Initializes erasure decoding step with specified input and output blocks, decoder options, and encoder configuration. @param inputBlocks array of encoded input blocks @param erasedIndexes array of indexes indicating lost data units @param outputBlocks array of encoded output blocks @param rawDecoder RawErasureDecoder instance for processing parity units @param rawEncoder RawErasureEncoder instance for generating parity units
1162 Validates input arrays for erasure decoding. @param inputs array of input values @param erasedIndexes array of indexes of erased elements @param outputs array to store decoded values
1163 Initializes erasure coding step with specified input and output blocks, raw erasure encoders, and piggyback index. @param inputBlocks array of encoded input blocks @param outputBlocks array of encoded output blocks @param rsRawEncoder Reed-Solomon raw erasure encoder @param xorRawEncoder XOR raw erasure encoder
1164 Validates input and output array lengths against erasure coding configuration. @param inputs input array to validate @param outputs output array to validate
1165 Concatenates two GaloisField arrays, padding shorter ones with zeros. @param p first array @param q second array @return combined array of length max(p.length, q.length)
1166 Computes the sum of two polynomials in the Galois field. @param p first polynomial @param q second polynomial
1167 Performs Gaussian elimination on a given matrix to compute the adjugate. @param matrix input matrix
1168 Prints the contents of one or more ECChunks with a header. @param header descriptive header text @param chunks array of ECChunk objects to display
1169 Masks all ByteBuffers in the array with specified length. @param buffers input ByteBuffer array @param dataLen length to mask
1170 Masks ECChunk arrays and converts them to ByteBuffers. @param chunks array of ECChunks @return array of masked ByteBuffers or nulls for invalid chunks
1171 Applies function mask to each buffer in the array. @param buffers array of byte arrays @param offsets array of corresponding offset values
1172 Retrieves a pre-initialized GaloisField instance using default field size and polynomial.
1173 Initializes BlockCompressorStream with output stream, compressor, and buffer settings. @param out OutputStream to write compressed data to @param compressor Compression algorithm instance @param bufferSize Buffer size for efficient compression (must be > 0) @param compressionOverhead Overhead for compression calculations
1174 Initializes ZStandardDecompressor with specified direct buffer size. @param bufferSize the size of the direct buffers for compressed and uncompressed data
1175 Initializes Lz4Compressor with default direct buffer size and compression mode.
1176 Retrieves compression codec by name, using class-based registry. @param codecName identifier for the desired compression codec
1177 Returns a Compressor instance for the given CompressionCodec. @param codec CompressionCodec to compress @param conf Configuration object @return Compressor instance or null if not available
1178 Retrieves a reusable decompressor instance from the pool by class or creates a new one. @param codec CompressionCodec object @return Decompressor instance or null if not available
1179 Updates codec lease count based on given compressor instance. @param compressor Compressor object to process
1180 Updates the lease count for a given codec instance. @param decompressor Decompressor object to update
1181 Returns the Zstandard compressor class. @return The ZStandardCompressor class, used for compression.
1182 Returns the Zstandard decompressor class. @return the Decompressor subclass for Zstandard decompression
1183 Initializes ZlibCompressor with default compression settings.
1184 Initializes ZlibCompressor with compression settings and direct buffer size from Hadoop configuration. @param conf Hadoop Configuration object
1185 Initializes ZlibCompressor with Hadoop Configuration. @param conf Hadoop Configuration object
1186 Advances the decompression state by processing a chunk of user data. @throws IOException if an error occurs during decompression
1187 Writes UTF-8 encoded text bytes to output stream. @param out DataOutput stream for writing
1188 Computes a variable-length integer value from the given DataInput stream. @param stream input data stream containing the value
1189 Validates and extracts a variable-length integer within the specified range. @param stream input data stream containing the value @param lower minimum allowed value (inclusive) @param upper maximum allowed value (inclusive) @return validated integer value or throws IOException if invalid
1190 Initializes text object from UTF-8 encoded input string. @param string input text to process
1191 Finds the index of the first occurrence of a character in 'what' within the text, starting from 'start'. @param what character to search for @param start starting position (inclusive) @return index of the character or -1 if not found
1192 Encodes UTF-8 string to byte buffer with replacement and writes it to output stream. @param out DataOutput stream for writing @param s input text to be encoded @return length of the encoded data
1193 Encodes UTF-8 string to byte buffer with replacement and writes it to DataOutput stream. @param out DataOutput stream for writing @param s input text @param maxLength maximum allowed bytes in the output stream @return encoded data length
1194 Initializes UTF-8 encoded text data within the provided byte array. @param utf8 UTF-8 encoded byte array
1195 Copies text length and data from another Text object. @param other Text object to copy from
1196 Fetches the number of bytes consumed until a newline is found within the specified limit. @param str Text object to append data to @param maxLineLength Maximum allowed length for each line @param maxBytesToConsume Total maximum bytes to consume before throwing an IOException @return The total number of bytes consumed or throws IOException if exceeded
1197 Consumes input stream up to maxBytesToConsume, handling variable line lengths and record delimiters. @param str Text object for encoding and decoding @param maxLineLength Maximum allowed text length per line @param maxBytesToConsume Total bytes to consume from input stream @return Total consumed byte count or throws IOException if exceeded
1198 Initializes internal mapping of Writable classes to unique IDs.
1199 Initializes internal mapping with an empty HashMap.
1200 Constructs a new Key instance with default weight (1.0). @param value the key byte array
1201 Computes the MD5 hash of a byte array. @param data byte array containing the input data
1202 Computes the MD5 hash of the specified string. @param utf8 UTF-8 encoded string
1203 Creates an MD5Hash instance from a hexadecimal string representation. @param hex input hexadecimal digest
1204 Creates retry policy with fixed sleep and unlimited retries. @param sleepTime time to pause before next retry attempt @param timeUnit unit of time for sleep duration (e.g. seconds)
1205 Creates retry policy with fixed sleep interval and maximum retries. @param maxRetries number of allowed retry attempts @param sleepTime time to pause before next retry attempt @param timeUnit unit of time for sleep duration (e.g. seconds)
1206 Creates an exponential backoff retry policy with specified parameters. @param maxRetries maximum number of retries @param sleepTime initial time to wait before next retry attempt @param timeUnit unit of time for sleep duration (e.g. seconds)
1207 Creates a retry policy with proportional sleep strategy up to maximum retries. @param maxRetries number of allowed retry attempts @param sleepTime time to pause before next retry attempt @param timeUnit unit of time for sleep duration (e.g. seconds)
1208 Updates lock held timestamp if read-write lock is acquired.
1209 Records current monotonic time as lock acquisition timestamp.
1210 Updates lock hold timestamp if read lock is acquired. @param none
1211 Creates a dynamic proxy instance for the specified interface with retry mechanisms. @param iface target interface @param proxyProvider FailoverProxyProvider instance for proxy management @param methodNameToPolicyMap Map of method names to custom retry policies @param defaultPolicy Default retry policy to apply
1212 Delegates to multipleLinearRandomRetry's implementation of m1().
1213 Compares the current retry policy with a given object. @param obj object to compare with
1214 Builds an IOException from the aggregated list of exceptions. @return Consolidated IOException or null if empty
1215 Retrieves an array of compression algorithm names for TFile format data. @return Array of compressor algorithm names
1216 Retrieves compressor mask value based on algorithm type. @return string representation of m1 value
1217 Extracts a FUNC_MASK string from the given DataInput stream. @param in DataInput stream containing the encoded mask value
1218 Updates the decoder's internal state based on a VInt-encoded mask value. @throws IOException if an I/O error occurs during decoding
1219 Creates a comparator for RawComparable objects based on metadata. @param name string identifier for the metadata
1220 Writes a chunk of data to the output stream with optional length mask. @param chunk byte array containing data @param offset starting index in the chunk @param len length of the chunk @param last whether this is the final chunk being written
1221 Writes a data chunk with mask to output stream. @param data byte array containing the chunk @param offset starting index of the chunk @param len length of the chunk
1222 Initializes the SingleChunkEncoder with output stream and chunk size. @param out DataOutputStream to write data to @param size allocated chunk size
1223 Creates a comparator for entries based on TFile sorting. @return Comparator instance or throws RuntimeException if unsorted
1224 Checks if current location is within valid range. @return true if current location is acceptable, false otherwise
1225 Retrieves a Location object for the given offset. @param offset unique identifier for the block region
1226 Returns a Location object representing the current block and record indices. @return Location object with updated indices
1227 Calculates the length of a value within a buffer starting at offset 0. @param buf input byte array
1228 Processes a UTF-8 encoded string, truncating if necessary and encoding into byte array. @param string input string
1229 Serializes Writable objects into a compact byte array. @param writables variable-length parameters to serialize @return serialized byte array or null on failure
1230 Encodes a string into UTF-8 bytes. @param string input string to encode @return encoded byte array or null on error
1231 Applies bitwise masking to variable-length integer and writes compressed data. @param uncompressedDataBuffer DataOutputBuffer containing raw data
1232 Copies the class-ID mapping from the provided Writable object. @param other source Writable object
1233 Writes a key-value pair to the output stream with compression. @param key the record key @param val the record value
1234 Generates a byte array representation of the token, using DataOutputBuffer.
1235 Encodes the given Writable object into a Base64 string. @param obj Writable object to encode @return encoded Base64 string or null on failure
1236 Applies mask operation using m3 method of input buffer, with results from m1 and m2 methods of output buffer.
1237 Calculates the distance between two nodes in the network. @param node1 Node object representing a point in the network @param node2 Node object representing another point in the network @return Distance value (0 for identical paths, Integer.MAX_VALUE for invalid input)
1238 Applies mask operation to a node based on its attributes. @param node Node object with attributes
1239 Retrieves a list of leaf nodes within the specified scope. @param scope input network location string
1240 Calculates the number of nodes in a given scope, excluding specified nodes. @param scope network scope string @param excludedNodes collection of Node objects to exclude
1241 Updates the network topology based on the given node's masked information. @param node Node object containing masked data
1242 Calculates functional mask and sorts nodes by weight. @param reader starting node @param nodes array of Node objects to be sorted @param activeLen number of active nodes @param secondarySort Consumer function for secondary sorting (optional) @param nonDataNodeReader flag indicating whether reader is a non-data node
1243 Decommissions a node, handling inner nodes and network lock. @param node NodeBase object to be decommissioned
1244 Transfers data to a network socket in chunks. @param fileCh output channel @param position starting position @param count total bytes to be transferred
1245 Wraps an existing IOException with custom error messages and details. @param destHost destination hostname @param destPort destination port number @param localHost local hostname @param localPort local port number @param exception original exception @return wrapped exception with detailed information
1246 Initializes an instance of RawScriptBasedMapping with default configuration parameters.
1247 Initializes a CachedDNSToSwitchMapping instance from a raw DNS-to-switch mapping. @param rawMap the underlying mapping to cache
1248 Initializes an InnerNodeImpl with a network location path. @param path input path string
1249 Constructs an InnerNodeImpl instance with given name, location, and hierarchical relationships. @param name unique node identifier @param location physical or logical network address @param parent parent node in the network hierarchy (may be null) @param level node depth within the network (starting from 0)
1250 Notifies the first notification socket with a specific event. @throws IOException on write failure
1251 Validates and initializes a DomainSocket instance with Unix domain socket parameters. @param path Unix domain socket path
1252 Creates and returns an array of DomainSockets with anonymous names. @throws IOException if socket creation fails
1253 Initializes a DomainSocket instance with Unix domain socket parameters. @param path Unix domain socket path
1254 Processes socket-related events based on file descriptor. @param caller method invoking this function @param entries map of file descriptors to their corresponding entries @param fdSet set of file descriptors being monitored @param fd unique identifier for the file descriptor in question
1255 Closes the primary socket and triggers a notification event.
1256 Retrieves selector information for the given channel. @param channel selectable channel @return SelectorInfo object or creates a new instance if not found
1257 Updates selector information with current time and notifies the provider. @param info SelectorInfo object containing channel details
1258 Retrieves IP addresses associated with a network interface. @param strInterface interface name to search for
1259 Resolves hostnames associated with a network interface and its subinterfaces. @param strInterface interface name to search for @param nameserver DNS server (null for default) @param tryfallbackResolution whether to attempt fallback resolution if PTR record not found @return array of resolved hostnames or empty array if none found
1260 Initializes LogThrottlingHelper with minimum log period and no primary recorder. @param minLogPeriodMs minimum time interval between logs (ms)
1261 Records log data with specified values and name, ensuring logs are not generated too frequently. @param values summary statistics to record
1262 Quotes request parameter value and encodes HTML characters. @param name parameter name
1263 Encodes request URL using HTML quoting. @return quoted StringBuffer object
1264 Quotes HTML characters in the first parameter name of the raw request. @param rawRequest raw HTTP request object
1265 Initializes FileMonitoringTimerTask with a single file path and corresponding callbacks. @param filePath the monitored file path @param onFileChange callback executed when the monitored file changes @param onChangeFailure callback triggered in case of an error while monitoring files
1266 Retrieves metric records based on identifiers and tags. @param mr MetricsRecord object containing metrics data
1267 Executes the given consumer on the next queue element, ensuring data availability and handling locks. @param consumer The consumer to process the queue element with @throws InterruptedException if thread is interrupted during wait
1268 Fetches queue elements using masking and waits for data availability if necessary, dequeuing and processing each element in the given consumer. @param consumer Consumer to process fetched elements
1269 Updates cache hit metrics.
1270 Increments cache cleared metric.
1271 Updates metrics on cache update events.
1272 Resets RPC client backoff timer on disconnection.
1273 Increments RPC slow call counter. @see rpcSlowCalls#m1()
1274 Clears requeued RPC calls from metrics counter.
1275 Increments RPC call successes counter.
1276 Updates RPC metrics and copies data to/from the given channel using a temporary buffer. @param channel WritableByteChannel for reading/writing @param buffer ByteBuffer for copying @return number of bytes copied, or error code if failed
1277 Copies data from a readable channel to a writeable channel using the provided buffer. Updates received bytes counter and logs metrics accordingly. @param channel ReadableByteChannel for reading @param buffer ByteBuffer for copying @return number of bytes copied, or error code if failed
1278 Updates disk failure metrics: increments overall count and records last failure time.
1279 Retrieves function masks for a given user. @param user unique user identifier @return Set of function masks or empty set if not found
1280 Initializes metric filtering using m1 and sets filter name.
1281 Configures quantile metrics and intervals based on provided names and descriptions. @param ucName upper-case metric name @param uvName upper-case variable name @param desc metric description @param lvName lower-case variable name
1282 Generates quantile metric names and descriptions based on input parameters. @param ucName upper-case prefix @param uvName upper-value suffix @param desc brief metric description @param lvName lower-value name @param df DecimalFormat object for formatting
1283 Initializes MetricsRegistry with given name. @param name unique identifier for this registry
1284 Caches a metrics tag with given name, description, and value. @param name Metric identifier @param description Brief metric description @param value Associated value
1285 Initializes statistical data with default values (mean=0, sample count=0) and sets up metric info. @param name Metric identifier @param description Brief metric description @param sampleName Sample identifier @param valueName Value identifier @param extended Whether to enable extended metrics tracking
1286 Registers a metric with the specified info and tag. @param info MetricsInfo object @param value tag value to be cached @param override whether to override existing metric
1287 Updates minimum and maximum values based on provided numerical input. @param value new value to update min and max values
1288 Calculates functional mask value using RPC processing time metrics. @return functional mask value as a double
1289 Inserts a new sample into the collection and triggers data compression when full. @param v the sample value to be inserted
1290 Calculates and returns a map of quantiles to their corresponding counts. @return Map of Quantile objects to Long values, or null if samples are invalid
1291 Fetches top N token owner statistics. @param n the number of top owners to retrieve
1292 Evaluates netgroups against a mask and updates the cache as necessary. @param groups list of netgroup identifiers to process
1293 Retrieves tokens by mask, returning a collection of user credentials. @return Collection of Tokens with matching mask
1294 Retrieves group mappings for a given user. @param user unique user identifier
1295 Retrieves set of groups for given user using cached mappings and negative caching. @param user unique user identifier
1296 Retrieves cached netgroups for a given user and populates the provided list. @param user unique user identifier @return List of netgroup names or empty if not found
1297 Calls m1 with an empty string argument.
1298 Sets mask value for given system property. @param property name of system property
1299 Logs environment variable value for a given variable. @param variable name of the environment variable
1300 Reads and logs contents of a file containing Kerberos configuration. @param file File object to read from
1301 Logs an error message with specified category and format. @param category diagnostic category @param message error message with optional arguments
1302 Logs a warning message with specified category and formatted arguments. @param category diagnostic category @param message message to log
1303 Updates authentication method based on provided AuthMethod. @param authMethod AuthMethod to determine new authentication method
1304 Writes a single byte to the output stream with SASL support. @param b the byte to be written
1305 Writes data to the output stream with SASL support. @param b input buffer
1306 Fetches DelegationTokenInformation by TokenIdent. @param identifier unique token identifier @return DelegationTokenInformation object or null if not found
1307 Validates delegation token using AbstractDelegationTokenSecretManager. @param secretManager Secret manager to utilize during validation
1308 Masks the current master key and updates the delegation token generation.
1309 Initializes an empty DelegationKey object with default values.
1310 Initializes a new instance of the `DelegationTokenAuthenticatedURL` class with the provided authentication and configuration settings. @param authenticator DelegationTokenAuthenticator instance for securing HTTP communications @param connConfigurator Connection configuration settings
1311 Updates the renewal action with the result of the token m6 operation. @throws IOException if an error occurs during the process
1312 Fetches a byte from the wrapped or unwrapped input stream. @throws IOException on I/O error
1313 Reads data from input stream while handling SASL authentication and unwrapping. @param b buffer to read into @param off offset in buffer @param len number of bytes to read @return number of bytes read or -1 on error
1314 Validates access based on user information and remote IP address. @param user UserGroupInformation object @param remoteAddress user's remote IP address
1315 Checks if user group information is available. @return true if valid, false otherwise
1316 Constructs a UserGroupInformation instance with the given user and real user. @param user username @param realUser actual user credentials
1317 Returns the functional mask of a given UserGroupInformation object. @param user UserGroupInformation object to retrieve functional mask for @return UserGroupInformation object with functional mask applied or null if input is invalid
1318 Formats user information with authentication details. @return String representation of user credentials and authentication method
1319 Retrieves authenticated authentication method using user credentials. @return AuthenticationMethod object representing the current authentication method
1320 Retrieves the authentication method for a given UserGroupInformation. @param ugi UserGroupInformation object @return AuthenticationMethod object representing the current authentication method
1321 Creates an IPC connection context with user information and authentication details. @param protocol communication protocol @param ugi UserGroupInformation object or null if not applicable @param authMethod authentication method (KERBEROS, TOKEN) @return IpcConnectionContextProto object
1322 Verifies SSL session against hostname using X.509 certificate. @param host hostname to validate @param session active SSLSession object
1323 Retrieves the functional mask for a given resource by name. @param name Resource identifier @return int indicating success or failure (E_NOT_FOUND)
1324 Initializes Command object from provided Hadoop configuration settings. @param conf Hadoop configuration to be initialized
1325 Initializes the CommandFactory instance with Hadoop configuration. @param conf Hadoop configuration settings
1326 Initializes FsShell with Hadoop configuration. @param conf Hadoop configuration settings
1327 Initializes FindClass instance with provided Hadoop Configuration. @param conf Hadoop configuration settings
1328 Initializes GetGroupsBase with Hadoop configuration and output stream. @param conf Hadoop configuration settings @param out Output stream for displaying user group information
1329 Initializes Configured object with default configuration settings.
1330 Constructs the function mask string based on access control rules. @return comma-separated string of enabled functions or '*' if all allowed
1331 Retrieves the first valid Kerberos ticket from the subject's credentials. @return The first Kerberos ticket that passes security validation, or null if none found
1332 Configures ZooKeeper client with SSL/TLS encryption using provided Truststore and ClientX509Util. @param zkClientConfig ZooKeeper client configuration @param truststoreKeystore Truststore object with keystore and truststore details
1333 Initializes OpenSSL cipher with specified transformation string and engine ID. @param transformation string in the format "alg/mode/padding" (e.g., "AES/ECB/PKCS#5") @param engineId ID of the underlying cryptographic engine @return OpensslCipher object or throws exceptions if invalid
1334 Creates a new key version based on provided name and material. @param name unique identifier for the new key version @param options configuration settings for the new key version
1335 Retrieves the latest KeyVersion by name. @param name unique identifier of the key
1336 Evaluates client backoff and server failover conditions for a scheduleable object. @param e schedulable object to evaluate
1337 Initializes writable RPC engine with default protocol configuration.
1338 Starts the StopWatch, throwing an exception if already running.
1339 Stops the stopwatch and updates elapsed time. @throws IllegalStateException if stopwatch was already stopped
1340 Calculates elapsed time based on stopwatch state. @return Total elapsed time in nanoseconds or current elapsed time if not started
1341 Computes a unique identifier array for protocol methods and returns its hash code. @param methods Array of ProtocolMethod objects
1342 Retrieves the function mask for a given protocol class and server version. @param protocol Class<?> containing protocol information @param serverVersion long identifier for the server implementation @return ProtocolSigFingerprint object representing the function mask or null if invalid
1343 Constructs a RemoteException with specified class name and error message. @param attrs Attributes object containing class name and error message
1344 Returns the list of file system items, masking any exceptions. @return List of items or null if an exception occurred
1345 Updates response time for a scheduled task. @param callName RPC function identifier @param schedulable Schedulable object with execution details @param details ProcessingDetails containing timing information
1346 Masks an element in the queue based on its priority level. @param priority The priority of the element to mask @param e The element to mask @return true if masking was successful, false otherwise
1347 Handles function mask errors by logging exceptions, updating response parameters, and formatting error messages. @param t Throwable exception to handle @param responseParams Response parameters to update with error information
1348 Constructs a VersionMismatch exception with protocol version details. @param interfaceName name of the conflicting interface @param clientVersion client's protocol version @param serverVersion server's protocol version
1349 Calculates decay levels for each user's RPC costs and updates the scheduling cache. @param callCosts map of user identities to atomic long values
1350 Calculates the scheduling priority based on cache and call cost metrics. @param identity unique user identifier @return priority level (int) or 0 if not applicable
1351 Calls superclass's implementation of m1().
1352 Calculates the mask index based on weighted round-robin queue weights. @return current index in the weighted round-robin sequence
1353 Retrieves server's function mask address.
1354 Initializes MachineList from a collection of allowed IP addresses or hostnames. @param hostEntries collection of allowed host entries
1355 Calls readProcMemInfoFile with false flag to update system metrics.
1356 Calculates total system memory available. @return Total free and inactive memory in bytes
1357 Retrieves system CPU time metrics. @return Cumulative CPU time in milliseconds
1358 Calculates system-wide CPU usage as a percentage. @return overall CPU usage value
1359 Calculates overall VCore usage as a percentage. @return CPU utilization value or UNAVAILABLE if not available
1360 Inserts a key-value pair into the hash store while handling resizing and collisions. @param k non-null key object @param v value object
1361 Creates a secure TransformerFactory instance with external DTD and stylesheet access restricted. @return TransformerFactory object configured for secure processing
1362 Creates a secure SAX transformer factory. @return secure SAXTransformerFactory instance
1363 Formats file system size as string with binary prefix or decimal value. @param size total length in bytes @param humanReadable true for binary prefix (e.g. "KB", "MB"), false for decimal value
1364 Formats quota usage size with optional human-readable binary prefix. @param size storage size in bytes @param humanReadable whether to display binary prefix (e.g. KB, MB) @return formatted string representation of size
1365 Formats a long value into traditional binary prefix representation. @param number long value to format
1366 Formats binary length with traditional prefix (e.g., "KB", "MB"). @param len binary length in bytes
1367 Calculates and displays the filesystem usage mask for a given URI. @param uri unique file system identifier @param fsStatus filesystem status object containing capacity data @param mountedOnPath path where the filesystem is mounted
1368 Formats byte array as a hexadecimal string. @param bytes input byte array
1369 Calls heapify and sorting operation with progress reporting. @param s IndexedSortable object to manipulate @param p starting index for heapification @param r ending index for heapification
1370 Logs and potentially terminates the application upon receiving an ExitException. @param ee instance of ExitException containing status information
1371 Logs error with specified status and message. @param status exit status code @param message detailed error message
1372 Recursively handles exit exceptions with specified status code and underlying cause. @param status exit status code @param t root exception that triggered this exit
1373 Handles ExitException by logging and potentially terminating the application. @param ee instance of ExitException containing status information
1374 Recursively handles a HaltException or creates a new one with the specified exit code and underlying cause. @param status exit code @param t root exception causing the halt
1375 Handles HaltException with specified exit status and message. @param status process termination code @param message error description
1376 Unregisters the service as a shutdown hook.
1377 Converts an Iterable to a Collection, using the "m3" method if it's a Collection. @param elements input collection
1378 Creates an empty LinkedList instance and populates it with elements from the given iterable. @param elements Iterable of elements to add to the linked list
1379 Generates an ACL entry list with permissions and entries. @param perm FsPermission object representing allowed actions @param entries List of AclEntry objects to be included in the generated ACL @return List of AclEntry objects representing the constructed ACL
1380 Creates an ArrayList from a variable-length argument of elements. @param elements input elements to be added to the list
1381 Creates an ArrayList with computed capacity based on input size. @param estimatedSize estimated array size
1382 Serializes object to JSON byte array and writes it to specified file. @param file target File object @param instance T object to serialize
1383 Initializes StatisticDurationTracker with IO statistics store and increments counter. @param iostats IOStatisticsStore instance @param key unique operation identifier @param count number of operations (0 or positive)
1384 Initializes duration tracking with logging capabilities and logs operation start. @param log logger instance @param logAtInfo whether to log at info level or not @param format text mask string @param args arguments for formatted text
1385 Returns formatted string representing operation duration using internal metrics. @return Formatted duration string
1386 Creates a CrcComposer instance with the specified parameters and functional mask. @param type Type of checksum (CRC32 or CRC32C) @param bytesPerCrcHint Hint for CRC computation @param stripeLength Data stripe length @return initialized CrcComposer object
1387 Computes the functional mask value by combining CRC values and a monomial. @param crcA first CRC value @param crcB second CRC value @param lengthB positive integer representing data length in bytes @param mod modulus value
1388 Computes and returns the CRC mask value. @return computed CRC mask as a byte array
1389 Packs JAR contents using specified regex pattern and writes to target directory. @param inputStream input stream containing the JAR file @param toDir target directory for packing @param name JAR file name @param unpackRegex regex pattern used to filter files within the JAR
1390 Expands JAR contents into the specified directory. @param jarFile the JAR file to expand @param toDir the target directory for expansion
1391 Finds all occurrences of a specific byte within a UTF-8 encoded byte array. @param utf the byte array to search @param b target byte value @param n maximum number of occurrences to find
1392 Retrieves masked value associated with given key from the WeakReferenceMap. @param key unique identifier
1393 Logs lock acquisition timing and excessive hold warnings. @param acquireTime time of lock acquisition @param releaseTime time of lock release @param checkLockHeld true if logging lock held time, false for wait time
1394 Formats finish time with optional time difference. @param formattedFinishTime pre-formatted finish timestamp @param finishTime end timestamp @param startTime start timestamp
1395 Splits input string into substrings using comma as separator and handling escapes. @param str input string to split
1396 Formats input string into a mask using underscores and escape characters. @param s input string to be formatted
1397 Escapes characters in a string using the specified escape character and array of characters to escape. @param str input string @param escapeChar character used for escaping @param charToEscape single character to be escaped @return modified string with character escaped or null if input is null
1398 Escapes special characters in a string. @param str input string @param escapeChar character to use for escaping @param charToEscape single character that should be escaped
1399 Formats a startup message with prefix and log mask. @param classname class name @param hostname host name @param args array of arguments to format
1400 Retrieves application build version mask from m1.
1401 Retrieves a filtered element from the remote data source. @throws IOException on input/output exceptions
1402 Checks for next element in remote iterator. @throws IOException if an I/O error occurs
1403 Creates a lazy auto-closeable reference from a supplier. @param supplier function to evaluate and initialize the reference
1404 Retrieves a mask value from the file system using BulkDelete. @param fs Hadoop FileSystem instance @param path Path to the file or directory in the file system
1405 Deletes files in a collection of paths from the specified base directory using BulkDelete. @param fs Hadoop file system @param base base directory for deletion @param paths collection of paths to delete
1406 Opens an FSDataInputStream with specified policy and file status. @param fs FileSystem object @param path Path to the file @param policy String representing read policy (null for default) @param status FileStatus object or null to reset @param length Optional file length (null for unknown) @param options Map of additional open file options (null for none)
1407 Reads data from InputStream into ByteBuffer at specified position. @param in InputStream to read from @param position Buffer position offset @param buf ByteBuffer to store the data
1408 Retrieves I/O statistics snapshot mask from Hadoop file system. @param fs Hadoop file system object @param path File path to retrieve mask for
1409 Converts JSON to I/O statistics snapshot. @param json input JSON string
1410 Evaluates and returns the atomic reference value through its callable constructor. @throws UncheckedIOException if an I/O exception occurs during initialization
1411 Initializes task pool builder with iterable collection of items. @param items input iterable containing item data
1412 Wraps an ExecutionException in an IOException. @param e original ExecutionException
1413 Retrieves a masked result from the given Future, handling cancellation and exceptions. @param future the asynchronous operation to evaluate
1414 Awaits the completion of a future with a specified timeout. @param future the asynchronous operation to await @param timeout maximum time to wait for completion @param unit time unit for the timeout @return result of the completed future or throws an exception if cancelled, timed out, or failed
1415 Wraps a CompletionException into an IOException. @param e CompletionException to be wrapped
1416 Configures the given object with settings from the provided Hadoop Configuration. @param theObject Object to configure @param conf Hadoop Configuration instance @see setJobConf(Object, org.apache.hadoop.conf.Configuration)
1417 Retrieves Class instance for given writable name from cache or loads it dynamically. @param name writable class name @param conf Hadoop Configuration object @return Class<?> instance or throws IOException on failure
1418 Retrieves Class instance for given name from configuration or cache. @param conf Hadoop configuration @param className class name to load @return Class<?> instance or throws RuntimeException on failure
1419 Retrieves class instance for given name from cache or loads it dynamically. @param name class name
1420 Logs thread information with a specified interval. @param log logging instance @param title descriptive title for the thread dump @param minInterval minimum time interval between logs in milliseconds
1421 Calculates and logs thread dump information based on the specified minimum interval. @param log Logger instance @param title descriptive title for the thread dump @param minInterval minimum time interval in milliseconds between thread dumps
1422 Initializes AbstractFSBuilderImpl with an optional path and/or path handle. @param optionalPath path to the file system (may be absent) @param optionalPathHandle path handle for the file system (may be absent)
1423 Initializes the Configuration object with default loading enabled.
1424 Throws an exception with a formatted error message based on the HTTP status code and JSON response. @param conn HttpURLConnection object containing status information @param expectedStatus expected HTTP status code
1425 Creates a CRC32C checksum instance or switches to PureJavaCrc32C if initialization fails. @return Checksum object
1426 Resolves Unix groups for specified user. @param userName unique username identifier
1427 Resolves Unix groups for the specified user. @param userName input username
1428 Constructs command to change permissions with a specified file. @param perm permission string @param recursive whether to recursively apply changes (Windows-specific) @param file target file path @return constructed command as an array of strings
1429 Constructs function mask string for process management. @param pid process identifier
1430 Constructs the function mask by invoking sub-methods. @throws IOException if an error occurs during execution
1431 Retrieves path to Hadoop executable based on input name. @param executable name of the executable to find @return File object representing the executable or null if not found
1432 Calculates progress with fixed weightage for all phases. @param none @return Progress object representing the calculated progress
1433 Calculates and updates phase weights based on number of iterations. @param n number of iterations
1434 Creates a new task phase with specified weightage and updates its status. @param status new phase status (e.g. "IN_PROGRESS", "COMPLETED") @param weightage the weightage value for the new phase
1435 Calculates progress mask value based on internal calculations.
1436 Calls create operation with default ACLs. @param path ZK path to create (default ACLs used)
1437 Creates a persistent node in ZooKeeper at the specified path if it does not exist. @param path ZK path to create @param zkAcl list of ACLs for secure access
1438 Binds static method with specified classes and name. @param className unique class identifier @param methodName unique method identifier @param argClasses variable number of argument types
1439 Binds static method with specified classes and name. @param targetClass class containing the method @param ... argClasses variable number of argument types
1440 Dynamically binds and invokes a method within the given target class. @param className unique class identifier @param methodName unique method name @param argClasses variable number of argument classes (if applicable)
1441 Dynamically binds and invokes an instance method within the given target class. @param targetClass the class containing the desired method @param varargs variable number of argument classes (if applicable)
1442 Finds and returns an unbound method instance for the specified name with functional dependencies. @param source Class containing the method (optional) @param returnType expected return type @param name unique method identifier @param parameterTypes variable number of argument types @return UnboundMethod object or null if not found
1443 Verifies availability of essential file operations. @throws UnsupportedOperationException if any required methods are unavailable
1444 Checks if bulk delete capability is available. @param bulkDeleteDeleteMethod UnboundMethod object to check
1445 Checks if file system open file method is available. @return true if method is available, false otherwise
1446 Checks if file is fully readable. @param byteBufferPositionedReadableReadFullyAvailableMethod result of availability check
1447 Determines whether an InputStream can be fully read using available methods. @param in InputStream to check @return true if fully readable, false otherwise
1448 Creates an I/O statistics snapshot mask. @return boolean result of creating snapshot
1449 Checks if iostatistics context is enabled. @return true if enabled, false otherwise
1450 Validates an unbound method using m1 check. @param method UnboundMethod object to validate
1451 Binds an unbound method to a target object using dynamic binding. @param receiver target object to bind the method to
1452 Binds the dynamic method to the target object and invokes it with the provided receiver. @param receiver target object to bind and invoke the method on
1453 Creates a mask representing a static method. @throws NoSuchMethodException if the method is not found
1454 Creates a mask representing a static method. @return Mask instance
1455 Initializes file system services by loading and registering available implementations.
1456 Computes Jenkins hash for a given file. @param args input filename (single argument expected)
1457 Initializes the HashFunction with specified parameters. @param maxValue maximum value for hash outputs (> 0) @param nbHash number of hash functions to utilize (> 0) @param hashType unique hash identifier (must be known)
1458 Initializes an empty RetouchedBloomFilter instance with default settings.
1459 Fetches the minimum bucket value for a given key. @param key input object to generate hash values @return minimum bucket value or 0 if not found
1460 Computes the mask value for a given key. @param key Key object
1461 Generates mask values and updates the Bloom filter based on a given key. @param k Key object @param vector List of lists containing keys for hash value calculation
1462 Finds the index of the smallest weighted key. @param h array of hash values
1463 Finds the index of the hash value with the maximum false positive weight. @param h array of hash values to evaluate
1464 Calculates membership ratios by comparing weighted key and false positive values.
1465 Loads and outputs a resource by name. @param name Resource identifier @return int status code (SUCCESS or error code)
1466 Returns a usage-related error code based on the provided arguments. @return Error code indicating operation success or various errors
1467 Adds or updates an element in the priority queue based on capacity and priority. @param element object to insert
1468 Creates a TreeSet from an iterable of comparable elements. @param elements source of new elements
1469 Creates a new HashSet instance from an iterable of elements. @param elements source of elements to add
1470 Creates a hash set from the given elements. @param elements variable-length array of elements to include in the set
1471 Executes a registered program with given arguments. @param args command-line arguments
1472 Adds column with specified title, alignment and wrapping options. @param title column header text @param justification text alignment (e.g. left, right) @param wrap whether to wrap long titles
1473 Converts time duration string to a numerical value in the specified unit. @param name configuration key name @param vStr input time duration string @param unit TimeUnit for the result
1474 Updates configuration property in XML document. @param doc the XML document to update @param conf the element containing configuration properties @param propertyName the name of the property to update @param redactor optional ConfigRedactor instance for masking sensitive values
1475 Updates deprecated configuration keys by iterating through deltas. @param deltas array of DeprecationDelta objects containing new key info and custom messages
1476 Iterates over managed port ranges to bind the server at a specific startPort. @param listener ServerConnector instance containing configuration @param startPort Initial port number for binding
1477 Configures environment variables based on HA service state transition target. @param target HAServiceTarget object @param environment Map of environment variables to update
1478 Reads data into a specified ByteBuffer from the given file range. @param stream PositionedReadable stream for reading @param range FileRange to read from @param buffer target ByteBuffer for storing data
1479 Validates and sorts input file ranges to ensure they are ordered and disjoint. @param ranges list of file ranges to validate and sort
1480 Transitions buffer state to caching mode and associates it with a prefetching action. @param actionFuture Future object representing the prefetching action
1481 Updates the buffer state to a new value while validating against expected current states. @param newState new buffer state @param expectedCurrentState list of allowed current states
1482 Validates a file path by checking its existence and type. @param path the Path to check @param argName name of the argument for error message
1483 Validates the existence of a file path. @param path Path object @param argName name of the argument for error message
1484 Verifies block number validity and checks for last block condition. @param blockNumber numeric block identifier
1485 Calculates the mask value for a given block number. @param blockNumber numeric block identifier
1486 Retrieves block state by number. @param blockNumber numeric block identifier
1487 Updates block state with provided details. @param blockNumber numeric block identifier @param blockState current block status
1488 Calculates block index from file size offset. @param offset file size offset
1489 Validates and masks IO statistics snapshot. @param snapshot I/O statistics snapshot @param statistics IO statistics object to mask @return true if successful, false otherwise
1490 Masks and saves I/O statistics snapshot to file system. @param snapshot serialized input data @param fs Hadoop file system instance @param path file path to save statistics @param overwrite whether to overwrite existing file
1491 Masks counters from I/O statistics snapshot. @param source serialized input data
1492 Computes gauges from masked I/O statistics snapshot. @param source serialized input data @return map of gauge values or null if failed
1493 Retrieves minimum values from masked IO statistics snapshot. @param source serialized input data @return map of minimum values for counters or null if failed
1494 Retrieves maximum values from masked IO statistics snapshot. @param source serialized input data
1495 Masks IO statistics snapshot from serialized input data. @param source serialized input data
1496 Creates a new FlagSet instance with the specified enumeration class, prefix, and initial flags. @return FlagSet object
1497 Creates a FlagSet instance with the given enumeration class, prefix, and optional initial flags. @param enumClass enumeration type @param prefix common prefix for all enum values @param flags initial EnumSet of flags (may be null)
1498 Closes the Hadoop File System instance and updates cache. @throws IOException if an I/O error occurs
1499 Caches and updates file system instances, handling automatic closure and I/O errors. @param onlyAutomatic whether to focus on automatic FS closures
1500 Converts masked IO statistics snapshot to JSON string representation. @param snapshot serialized input data
1501 Writes bytes to a file in the given Hadoop context. @param fileContext Hadoop file context @param path file location @param bytes data to write @return original FileContext
1502 Writes a list of lines to a file in the given file context. @param fileContext Hadoop file system context @param path unique file identifier @param lines iterable text lines to be written @param cs character set for encoding @return original file context
1503 Writes a CharSequence to a file in the given FileContext. @param fs the file system context @param path the file path @param charseq the string content @param cs the character set and encoder @return the original FileContext
1504 Configures output stream writer mask based on overwrite flag. @param path file location in the distributed file system
1505 Configures output stream's write mask based on overwrite flag and file path. @param path target file system path
1506 Creates an output stream builder with append flag and returns mask value. @param path file location in the distributed file system
1507 Configures output stream builder with append flag and returns mask value. @param path file system path @return int mask value
1508 Retrieves file statuses using the default filter. @param f Path object representing the directory or file being processed @return array of filtered FileStatus objects
1509 Filters file statuses based on default PathFilter and returns results. @param files array of paths to process
1510 Creates a synchronized mutable counter with an initial value and updates the metric map. @param info MetricsInfo object containing counter data @param iVal initial integer value for the counter
1511 Creates a synchronized mutable counter with the specified initial value and metrics information. @param info MetricsInfo object containing metric data @param iVal Initial long value for the mutable counter @return MutableCounterLong object representing the created counter
1512 Creates a MutableGauge with given metric info and initial value. @param info non-null MetricsInfo object @param iVal initial gauge value
1513 Creates and registers a mutable gauge metric with the given initial value. @param info non-null MetricsInfo object @param iVal initial float value for the gauge
1514 Creates a mutable integer gauge with specified initial value and registers it in the metrics map. @param info non-null MetricsInfo object @param iVal initial integer value for the gauge @return MutableGaugeInt instance representing the created gauge
1515 Resolves file system link using the provided function. @param fileContext Hadoop File Context @param path file system path to resolve @param fn FsLinkResolutionFunction instance to apply @return transformed object of type T or throws exception if unresolved
1516 Initializes GlobBuilder with Hadoop FileContext. @param fileContext Hadoop file context
1517 Initializes GlobBuilder with Hadoop file system instance. @param filesystem Hadoop file system reference
1518 Evaluates the asynchronous call mask and handles associated logic. @return true if asynchronous operation completed or failed, false otherwise
1519 Retrieves an AsyncGet object with retry logic. @return AsyncGet object or null on failure
1520 Updates used space data with folder sizes from DUHelper.
1521 Copies statistical data from another instance. @param that MeanStatistic object to copy values from
1522 Formats IO statistics into a string representation from the provided source. @param source Object containing IO statistics or a source for statistics
1523 Formats wrapped IOStatistics object into string representation.
1524 Formats IOStatistics object into string representation or returns default value if null.
1525 Formats and logs input/output statistics from the given IOStatistics object. @param statistics Input/Output Statistics with various statistic sources @return Formatted string representation of statistics or empty string if null
1526 Creates a duration tracker instance using provided factory and statistic key. @param factory optional DurationTrackerFactory instance @param statistic unique identifier for statistics tracking
1527 Purges a single cache entry by acquiring write lock and deleting associated files. @param elementToPurge Entry object containing file path and block number
1528 Builds dynamic I/O statistics by aggregating storage statistics. @param storageStatistics input StorageStatistics object @return DynamicIOStatistics object or null if not built
1529 Adds dynamic IO statistics counter based on atomic long source. @param key unique identifier @param source atomic long value to track statistics
1530 Associates an atomic counter with the specified key and source. @param key unique identifier @param source Atomic integer to track dynamic IO statistics
1531 Adds mutable long counter with given key and source. @param key unique identifier @param source MutableCounterLong instance
1532 Registers an IO gauge with atomic counter and custom evaluation function. @param key unique identifier @param source atomic counter value
1533 Registers an IO gauge with custom evaluation function based on atomic integer source. @param key unique identifier @param source atomic integer value used for evaluation
1534 Registers minimum statistic from atomic long source. @param key unique identifier @param source atomic long value to update statistic
1535 Registers minimum statistic with custom evaluation function. @param key unique identifier @param source atomic integer to update minimum statistic
1536 Registers maximum I/O statistics with the given key and atomic long source. @param key unique identifier @param source atomic long value for maximum calculation
1537 Adds source statistics with maximum value calculation. @param key unique identifier @param source atomic integer to evaluate for max value
1538 Initializes interrupt escalation and exception handling. @param interruptEscalator InterruptEscalator instance for signal handling
1539 Creates a new DomainSocket instance with Unix domain socket parameters. @throws IOException if an I/O error occurs
1540 Updates the reference count and executes socket operations. @throws IOException if an I/O error occurs
1541 Updates socket masks for the specified file descriptors. @param descriptors array of file descriptors @param jbuf byte buffer for data transfer @param offset starting position in buffer @param length number of bytes to process
1542 Processes file input streams using Unix domain socket functionality. @param streams array of FileInputStream objects @param buf byte array for data transfer @param offset starting index for data processing @param length amount of data to process @return integer result code
1543 Creates an IO statistics context instance for a given thread ID. @param key unique identifier for the current thread
1544 Verifies CRC checksum matches for a given file chunk. @param type checksum type @param data ByteBuffer containing the file chunk @param checksums ByteBuffer storing expected CRC values @param fileName name of the associated file @param basePos starting position of the file chunk in the underlying storage system
1545 Calculates the function mask for decryption. @param decryptor active decryptor instance @param inBuffer input buffer containing encrypted data @param position stream position for calculating function mask @param iv initialization vector @return calculated padding byte or 0 if not applicable
1546 Calculates the function mask and initializes decryption process based on provided decryptor, IV, and stream position. @param offset current stream position
1547 Writes a segment of encrypted data to the output stream. @param b byte array containing data to be written @param off starting offset within the array @param len number of bytes to write
1548 Invokes superclass write operation and calls encryption logic. @throws IOException if an I/O error occurs
1549 Compiles glob pattern into regex mask using GlobPattern object. @param globPattern input glob pattern string
1550 Returns the byte count mask based on the specified distance. @param distance integer value representing the distance
1551 Creates a file stream with specified permissions and flags. @param f Path to the file @param absolutePermission File system permissions @param flag Create flags @param bufferSize Buffer size for data transfer @param replication Replication factor @param blockSize Block size for data transfer @param progress Progress monitor @return FSDataOutputStream object or throws IOException
1552 Initializes an AbstractFileSystem instance with the given URI and scheme. @param uri file system URI @param supportedScheme expected URI scheme @param authorityNeeded whether authority is required in the URI @param defaultPort default port number to use if not specified in the URI
1553 Encodes input byte arrays into output byte arrays using erasure coding. @param inputs array of input byte arrays @param outputs array of output byte arrays
1554 Encodes input buffers into output buffers using erasure coding. @param inputs array of ByteBuffer objects to encode @param outputs array of ByteBuffer objects for encoded data
1555 Initializes the writable primitive array with an object value. @param value Object to verify and initialize
1556 Retrieves URI using Hadoop Archive file system implementation. @return updated URI object
1557 Checks if given capability supports HSync or HFlush operations. @param capability object containing capabilities to check
1558 Prefetches data block for the given BufferData.
1559 Releases done buffers from the pool.
1560 Initializes CachingBlockManager instance with given parameters. @param blockManagerParameters object containing configuration and settings
1561 Retrieves a cached file block by number and writes its data to the provided ByteBuffer. @param blockNumber unique identifier of the block to fetch @param buffer buffer to store the read data
1562 Calculates function mask value based on buffer state. @return Function mask integer
1563 Calculates and returns a function mask value based on buffer state. @return Function mask integer indicating prefetching readiness
1564 Validates file position by checking if it's within the current buffer. @param pos file position to check
1565 Returns a placeholder IO statistics context if thread I/O stats are enabled. @return IOStatisticsContext object or null
1566 Initializes thread-level I/O statistics context. @param statisticsContext IOStatisticsContext object to initialize
1567 Creates a metric mask configuration map based on the specified type. @param type unique metric type identifier
1568 Validates and processes command-line arguments within a specified position range. @param args array of command-line arguments @param pos minimum position in the argument list
1569 Logs masked command message with error context. @param message user-provided input to be logged
1570 Resolves file system path handle with specified mask and optional modification time. @param stat FileStatus object containing file metadata @param opts zero or more optional handle options @return PathHandle instance representing the resolved file system path
1571 Returns an array of HandleOpt instances with default configurations. @return Array of HandleOpt objects
1572 Returns an array of HandleOpt instances with specified mask values. @return Array of HandleOpt objects with different mask configurations
1573 Returns array of HandleOpt objects with specified options. @return Array of HandleOpt instances
1574 Creates HandleOpt instances with default configuration. @return array of configured HandleOpt objects
1575 Initializes a new ShellCommandExecutor instance with specified command, environment, and execution settings. @param execString array of shell command strings @param dir working directory for the command execution @param env map of environment variables to pass to the command @param timeout maximum execution time in milliseconds @param inheritParentEnv whether to inherit parent environment variables
1576 Starts or stops the thread responsible for refreshing used space data. @param runImmediately whether to start the thread immediately
1577 Creates a private token by cloning the current public token and associating it with a new service. @param newService the service to be associated with the cloned private token
1578 Validates function mask URI and throws exception for unsupported schemes.
1579 Calculates whether the URI path matches the mask value. @return true if path matches, false otherwise
1580 Calculates and returns a mask value indicating whether it matches the URI's first segment.
1581 Validates a file system path against the current file system's configuration. @param path the file system path to validate
1582 Writes file status metadata to output stream. @param out DataOutput stream
1583 Validates multipart file upload parameters. @param filePath Path object to validate @param inputStream InputStream to check for null @param partNumber Part number to ensure is greater than 0 @param uploadId Unique upload identifier to check for null @param lengthInBytes Length of the file in bytes, must be non-negative
1584 Processes multipart upload by validating the specified path. @param path Path object to validate
1585 Calculates length-based mask value for Hadoop filesystem data stream, ensuring that the requested size does not exceed the remaining file length. @param n input stream size
1586 Creates a function mask FsPermission by combining user, group, and other actions from the given umask. @param umask input FsPermission to derive new mask from
1587 Retrieves file permissions from an SFTP file entry. @param sftpFile LsEntry object representing the SFTP file
1588 Constructs an instance of FsPermission from a short integer representing permission bits. @param mode FUNC_MASK parameter: a short integer with permissions bits
1589 Creates an instance of FsPermission with FUNC_MASK permissions.
1590 Constructs an instance of FsPermission with default permissions (rwxr-xr-x).
1591 Creates an instance of FsPermission with read and write permissions. @return FsPermission object representing read and write access
1592 Creates a FsPermission instance with read and execute permissions for owner, group, and others.
1593 Converts a Unix symbolic permission string into an FsPermission object. @param unixSymbolicPermission string representation of file system permissions
1594 Processes ACL entries and prints their details. @param aclStatus current AclStatus instance @param fsPerm FsPermission object or null if not available @param entries List of AclEntry objects
1595 Converts AclEntry list to a string representation of function masks. @param aclSpec List of ACL entries
1596 Constructs an instance of FsPermission from a string representation of permission bits. @param mode string parameter with permissions bits
1597 Calculates a mask value for the given buffer section. @param b the ByteBuffer object @param offset starting index of the section to process @param length number of bytes in the section @return mask value based on buffer state, or -1 if operation fails
1598 Calculates the compressed size mask by subtracting the start position from the cached position value.
1599 Updates maximum file attributes and formats the output string based on provided data. @param items Array of PathData objects containing file status information
1600 Calculates quota usage for a given file. @param f Path to the file
1601 Calculates the total content length mask. @param path Path to the file
1602 Initializes service with specified name and NOTINITED state. @param name unique service identifier
1603 Transitions service state by applying a mask. @param proposed new service state
1604 Creates and returns an instance of the specified service class. @param conf Service configuration
1605 Computes a mask value based on the comparison with another BinaryComparable object. @param other the object to compare with
1606 Updates masked byte array with new data. @param newData new byte data to update @param offset starting position in newData
1607 Calculates the function mask size based on the provided BytesWritable key. @param key input key object @return int representing the current size as a mask
1608 Retrieves a list of files within the specified directory. @param dir File object representing the directory to list @return array of file names or null if an I/O error occurs
1609 Validates directory accessibility and permissions. @param dir File object representing the directory to check
1610 Locks memory for native file operations. @param buffer direct ByteBuffer to lock
1611 Creates SharedFileDescriptorFactory instances for specified paths and prefix. @param prefix unique file descriptor identifier prefix @param paths array of directory paths for shared file descriptors @return SharedFileDescriptorFactory instance or throws IOException on failure
1612 Calculates and writes checksum for a given byte array chunk. @param b the byte array to process @param off offset into byte array where processing starts @param len length of byte array to process
1613 Updates CRC checksum for the given data and previous sums. @param data ByteBuffer containing input data @param checksums ByteBuffer containing previous sums
1614 Applies cryptographic masks to input and output buffers.
1615 Initializes buffer with specified byte array and limits. @param capacity total bytes in underlying array
1616 Updates token with base64-decoded value. @param newValue new value as string in base64 format
1617 Returns an array of ECBlock objects based on erased blocks in the specified group. @param blockGroup Block group containing data and parity units
1618 Checks if the compressed stream contains a specific marker pattern. @param marker unique marker identifier @param markerBitLength length of the marker bit mask in bits @return true if marker found, false otherwise
1619 Initializes CBZip2OutputStream with given block size and output stream. @param blockSize 100KB block size (1-9) @param out output stream for compressed data
1620 Initializes BlockCompressorStream with output stream and compressor. @param out OutputStream to write compressed data to @param compressor Compression algorithm instance
1621 Initializes BlockDecompressorStream with input stream and buffer sizes. @param in underlying input stream
1622 Writes a byte array to the output stream, handling compression and split masking. @param b input byte array @param off starting offset in bytes @param len number of bytes to write @throws IOException if compression or writing fails
1623 Initializes compressor with specified compression level and buffer sizes. @param level Zstandard compression level @param inputBufferSize initial direct buffer size for uncompressed data
1624 Creates a CompressionOutputStream instance with the given codec, configuration, and output stream. @param codec CompressionCodec to compress @param conf Configuration object @param out OutputStream to write compressed data to @return CompressionOutputStream instance or null on failure
1625 Performs write operation on the underlying FSDataOutputStream. @throws IOException if an I/O error occurs
1626 Creates a CompressionInputStream using the provided codec and input stream. @param codec CompressionCodec object @param conf Configuration object @param in InputStream to compress @return CompressionInputStream or null if creation fails
1627 Updates decompressors and deserializers, then seeks input stream.
1628 Returns a compressor instance based on Hadoop configuration. @param conf Hadoop Configuration object
1629 Returns a direct decompressor instance based on configuration. @param conf Hadoop configuration
1630 Returns an appropriate decompressor instance based on native Zlib support. @param conf Hadoop configuration
1631 Stores a delegation key in the SQL-based storage system. @param key DelegationKey object to be stored
1632 Updates token mask value and associated data based on the provided DelegationKey. @param key DelegationKey object containing token information
1633 Extracts a String from the DataInput stream, enforcing a maximum length. @param in input data stream @param maxLength maximum allowed string length @return extracted string or throws exception if invalid length
1634 Reads and validates variable-length data from the given DataInput stream. @param in input data stream containing the data
1635 Processes compressed data using the given DataInputBuffer and CompressionInputStream. @param buffer DataInputBuffer containing compressed data @param filter CompressionInputStream for decompression
1636 Extracts and decodes a variable-length integer from the input stream. @param in input data stream @param maxLength maximum allowed value length @return decoded string or throws IOException if invalid
1637 Writes a variable-length integer mask to the output stream. @param out DataOutput stream @param s input string or null for default behavior
1638 Resolves InetSocketAddress to a host string for Hadoop security token service. @param addr socket address object @return formatted host string or throws exception if invalid
1639 Converts a Protobuf TokenProto to a Hadoop Token. @param tokenProto Protobuf representation of the token
1640 Writes an Enum value to output stream as a compact mask. @param out DataOutput stream for writing @param enumVal input Enum value
1641 Serializes user and group names along with file system permissions. @param out DataOutput stream for writing @param username associated user name @param groupname associated group name @param permission FsPermission object to serialize
1642 Initializes UTF-8 encoded text data within the provided byte array. @param utf8 UTF-8 encoded byte array
1643 Creates a new Text object by copying from an existing UTF-8 encoded text. @param utf8 Text object to copy from
1644 Determines the maximum number of bytes to consume based on the record delimiter. @param str Text object for encoding and decoding @param maxLineLength Maximum allowed text length per line @param maxBytesToConsume Total bytes to consume from input stream @return The maximum byte count or throws IOException if exceeded
1645 Returns text length with mask applied. @return masked text length
1646 Copies entries from another sorted map writable.
1647 Copies entries from another MapWritable instance.
1648 Creates a retry policy with fixed sleep intervals up to maximum allowed time. @param maxTime total allowed time for retries @param sleepTime time to pause before next retry attempt @param timeUnit unit of time for sleep duration (e.g. seconds)
1649 Creates a dynamic proxy instance for specified interface with retry mechanism. @param iface target interface @param proxyProvider FailoverProxyProvider instance for proxy management @param retryPolicy Default retry policy to apply
1650 Creates a dynamic proxy instance for the specified interface with retry mechanisms. @param iface target interface @param implementation underlying object to proxy @param methodNameToPolicyMap Map of method names to custom retry policies @param defaultPolicy Default retry policy to apply
1651 Initializes Writer with output stream, compression configuration, and metadata indices. @param fout FSDataOutputStream for writing data @param compressionName name of the used compression algorithm @param conf Configuration object
1652 Initializes the TFileIndex with entries from a DataInput stream. @param entryCount number of index entries @param in DataInput stream containing index data @param comparator BytesComparator object for sorting keys
1653 Checks for the presence of a mask in the input stream. @throws IOException if an I/O error occurs during decoding
1654 Flushes any buffered data and resets chunk counter.
1655 Computes mask representing key length based on provided RawComparable key. @param key the input key object
1656 Initializes the UTF-8 object with a given encoded string. @param string input string to be processed
1657 Computes MD5 hash of UTF-8 encoded input string. @param string input string to encode and hash
1658 Flushes buffered records to output stream, handling position updates and compression.
1659 Generates or retrieves the tracking identifier as a string. @return unique tracking ID or null if not generated
1660 Generates a mask string by invoking an internal function. @throws IOException if an error occurs during execution
1661 Adds a new node to the network topology while validating its attributes and ensuring proper placement. @param node Node object containing data about the node to be added
1662 Removes a node from the network topology, handling inner nodes and updating rack counts. @param node Node object to remove
1663 Decommissions a node by its ID, ensuring network consistency and cleanup. @param node Node object containing ID for decommissioning
1664 Sorts network nodes by distance from the given reader node. @param reader starting node @param nodes array of Node objects to be sorted @param activeLen number of active nodes @param secondarySort Consumer function for secondary sorting (optional)
1665 Calculates functional mask and sorts nodes by weight. @param reader starting node @param nodes array of Node objects to be sorted @param activeLen number of active nodes @param secondarySort Consumer function for secondary sorting (optional)
1666 Initializes SocketInputStream with a selectable channel and IO operation timeout. @param channel selectable channel for I/O operations @param timeout IO operation timeout in milliseconds
1667 Initializes SocketOutputStream with a writable byte channel and IO operation timeout. @param channel writable byte channel for data transfer @param timeout IO operation timeout in milliseconds
1668 Retrieves a Writable object from the server based on the provided Call and Connection. @param call RPC call object @param connection client-server connection @param timeout time to wait for response in specified unit @param unit time unit (e.g., milliseconds) @return Writable object or null if not available
1669 Initializes a CachedDNSToSwitchMapping instance from raw DNS-to-switch mapping data.
1670 Initializes a ScriptBasedMappingWithDependency instance with a raw script-based mapping.
1671 Retrieves child node with specified parent name. @param parentName unique identifier of parent node
1672 Adds a DomainSocket with associated Handler to the tracker, handling closed resource state and notifications. @param sock domain socket instance @param handler event handling mechanism instance
1673 Removes the specified domain socket from tracking. @param sock DomainSocket object to remove
1674 Selects channels with specified operations and timeouts, optimizing network communication. @param channel selectable channel @param ops selection operation @param timeout total timeout in milliseconds @return 0 on timeout or interrupt, non-zero if selected
1675 Retrieves IP address associated with a network interface. @param strInterface interface name to search for
1676 Retrieves default hostnames associated with a network interface. @param strInterface interface name to search for
1677 Resolves hostname for a network interface or its subinterfaces. @param strInterface interface name to search for @param nameserver DNS server (null for default) @param tryfallbackResolution whether to attempt fallback resolution if PTR record not found @return resolved hostname or null if none found
1678 Retrieves MetricsConfig objects for given file names and prefixes. @param prefix unique identifier @param fileNames comma-separated list of file names to process @return first successfully loaded MetricsConfig object or a default instance if all fail.
1679 Fetches function masks for a given user. @param user unique user identifier @return Set of function masks or empty set if not found
1680 Initializes metric filtering mask using m1 functionality.
1681 Stops the server, shutting down listeners and handlers. @param port server port
1682 Stops and cleans up the HTTP server for a given web application context.
1683 Initializes MutableQuantiles with specified name, description, sample name, value name, and interval. Configures quantile metrics and intervals based on provided names and descriptions. @param name metric identifier @param description brief metric description @param sampleName sample identifier @param valueName variable identifier @param interval time in seconds between metric updates
1684 Creates a new statistical metric with specified details. @param name unique metric identifier @param desc brief metric description @param sampleName sample identifier @param valueName value identifier @param extended whether to enable extended metrics tracking
1685 Initializes statistical data with default values and sets up metric info. @param name Metric identifier @param description Brief metric description @param sampleName Sample identifier @param valueName Value identifier
1686 Registers metric with specified info and tag. @param name metric name
1687 Retrieves cached metric info based on name and description. @param name Metric identifier @param description Brief metric description @return MetricsInfo object or null if not found
1688 Updates sample statistics for a given metric with elapsed time. @param name unique identifier of the metric @param elapsed measured elapsed time
1689 Evaluates metrics sinks and publishes statistics. @param buffer MetricsBuffer object to evaluate @param immediate true for immediate processing, false otherwise
1690 Masks statistical data from another SampleStat instance. @param other SampleStat object to mask data from
1691 Identifies slow RPCs by comparing actual processing times to thresholds. @param methodName name of the method being called @param call RPC request object @param details ProcessingDetails object containing timing information
1692 Evaluates netgroups against a mask and updates the cache as necessary. @throws IOException if an I/O error occurs
1693 Initializes and logs diagnostic output mask. @param m1 logs first line of mask
1694 Logs diagnostic messages with specified format and arguments. @param format logging format @param args message arguments
1695 Logs an error message with specified category and format. @param category diagnostic category @param message error message with optional arguments
1696 Creates a UserGroupInformation instance with the given user and authentication method. @param user unique user identifier @param authMethod authentication method to determine access control
1697 Masks the current master key and initiates a thread to remove expired tokens.
1698 Masks the current master key and updates the delegation token generation. @throws IOException if an I/O error occurs
1699 Initializes a new instance of the `DelegationTokenAuthenticatedURL` class with default authentication settings.
1700 Initializes a new instance of the `DelegationTokenAuthenticatedURL` class with the provided authentication settings. @param authenticator DelegationTokenAuthenticator instance for securing HTTP communications
1701 Initializes a new instance of the `DelegationTokenAuthenticatedURL` class with the provided configuration settings. @param connConfigurator Connection configuration settings
1702 Calls underlying read operation with default offset and length. @param b buffer to read into @return number of bytes read or -1 on error
1703 Verifies user group information is valid. @return true if valid, false otherwise
1704 Checks if function mask is set based on user credentials. @return true if valid function mask found, false otherwise
1705 Initializes or reinitializes the SSL socket factory with a specified channel mode. @param preferredMode desired SSL channel mode
1706 Initializes the CommandFactory instance with default Hadoop configuration.
1707 Initializes an empty HarFileSystem object.
1708 Initializes a HarFileSystem object with an existing FileSystem instance. @param fs underlying Hadoop file system
1709 Initializes FsShell with default Hadoop configuration.
1710 Initializes GetGroupsBase with Hadoop configuration. @param conf Hadoop configuration settings
1711 Initializes Configured object with default output and error streams.
1712 Resolves hostname to InetAddress using search domains and fall-back logic. @param host fully qualified or unqualified hostname @return InetAddress object or throws UnknownHostException if not found
1713 Constructs and writes function mask string based on access control rules.
1714 Configures and returns a ZooKeeper instance with SSL/TLS encryption. @throws IOException if configuration or initialization fails
1715 Calculates function mask from provided key name. @param keyName unique identifier of the key
1716 Calculates and refills tasks for the given queue based on the provided key name and number of values. @param keyName unique identifier of the key @param num desired number of values @return List of E values
1717 Calculates function mask based on key name and updates internal state. @param keyName unique identifier of the key
1718 Handles client backoff and server failover for a schedulable object. @param e schedulable object to evaluate
1719 Initializes writable RPC engine with default protocol configuration. @param none
1720 Converts elapsed time to specified time unit. @param timeUnit desired time unit (e.g. NANOSECONDS, MICROSECONDS)
1721 Retrieves the function mask for a given protocol class and server version. @param clientMethodsHashCode hash code of client methods @param serverVersion long identifier for the server implementation @param protocol Class<?> containing protocol information @return ProtocolSignature object representing the function mask or null if invalid
1722 Decays current RPC costs by applying the decay factor to each user's costs. @param callCosts map of user identities to atomic long values
1723 Calculates the scheduling mask based on user identity. @param obj Schedulable instance to derive identity from @return scheduling mask (int)
1724 Retrieves an element from the priority queue using weighted round-robin algorithm. @return E object or null if none available
1725 Masks all active calls in the connection and closes the network connection.
1726 Constructs a Globber instance with the specified parameters. @param fs Hadoop filesystem context @param pathPattern file path pattern to expand @param filter optional path filter @param resolveSymlinks whether to resolve symbolic links
1727 Initializes MachineList from a comma-separated string of host entries. @param hostEntries input string containing allowed IP addresses or hostnames
1728 Creates a SysInfo instance tailored to the current operating system. @return SysInfoLinux or SysInfoWindows instance based on the detected OS
1729 Calculates total available RAM, excluding corrupted and reserved memory.
1730 Calculates total available swap space in bytes.
1731 Transforms XML using a secure Transformer instance. @param styleSheet InputStream for stylesheet @param xml InputStream for XML document @param out Writer to output transformed result
1732 Formats content summary based on options and types. @param qOption true for query option @param hOption true for human-readable format @param tOption true to use m1 method; otherwise, formats with prefix @param xOption true to include snapshot information in formatting @param types list of storage types
1733 Formats snapshot metadata as a string with human-readable options. @param hOption true for binary prefix (e.g. "KB", "MB"), false for decimal value
1734 Calculates set capacity based on maximum memory and percentage. @param maxMemory total available memory @param percentage allowed memory usage as a percentage @param mapName identifier for the current map @return calculated capacity in entries
1735 Reads and verifies the next data chunk from a file. @throws IOException on checksum verification failure
1736 Calculates the total length of data that can be read from a file. @throws IOException if an I/O error occurs
1737 Retrieves and decodes UTF-8 encoded data into a string. @return The decoded string representation or an empty string if failed
1738 Encodes and processes a block of UTF-8 encoded bytes into a string. @throws IOException if an I/O error occurs
1739 Decodes and processes a block of UTF-8 encoded bytes. @param bytes input byte array
1740 Decodes and processes a block of UTF-8 encoded bytes from the input stream. @param in input stream containing the byte data
1741 Validates client ID in RPC response header. @param header Response header containing client ID
1742 Formats single byte as a hexadecimal string. @param b input byte value
1743 Handles uncaught exceptions within a Hadoop service thread. @param thread the Hadoop service thread where the exception occurred @param exception the Throwable instance containing error information
1744 Logs exit usage with specified message. @param status exit status code @param message detailed error message
1745 Handles uncaught exceptions in the specified thread. @param thread the Thread instance that encountered the error @param exception the Throwable instance containing the error information
1746 Handles service termination with provided exit code and message. @param exitCode service termination status @param message user-provided message for logging
1747 Handles exit exception by logging and potentially terminating application. @param status application status
1748 Logs error message and terminates application based on exit status. @param status application exit status @param msg error message to be logged
1749 Handles HaltException with specified exit status and default message. @param status process termination code
1750 Recursively sorts elements within IndexedSortable using quicksort logic. @param s IndexedSortable object @param p left index @param r right index
1751 Constructs an AclStatus object with specified properties. @param owner file owner @param group file group @param stickyBit whether the sticky bit is set @param entries ACL entries @param permission FsPermission object
1752 Parses an ACL string into a list of ACL objects. @param aclString input string containing ACLs ('scheme:id:perm')
1753 Parses authentication string into list of ZKAuthInfo objects. @param authString comma-separated list of scheme:auth pairs @return List<ZKAuthInfo> or empty list if input is null
1754 Configures file attributes and permissions for the destination. @param src source PathData object @param target destination PathData object @param preserveRawXAttrs whether to preserve raw extended attributes
1755 Generates ACL entries for user, group, and other permissions based on the provided FsPermission. @param perm FsPermission object representing file system permissions @return List of AclEntry objects, each describing access control settings for a specific entity (user, group, or other)
1756 Fetches duration tracker for specified operation ID and count. @param key unique operation identifier @param count number of operations (0 or positive)
1757 Initializes StatisticDurationTracker with IO statistics store and increments counter. @param iostats IOStatisticsStore instance @param key unique operation identifier
1758 Initializes duration tracking with logging capabilities and logs operation start. @param log logger instance
1759 Waits for a CompletableFuture to complete, handling cancellation and completion exceptions. @param future the CompletableFuture to wait for
1760 Waits for a CompletableFuture to complete and ignores any exceptions. @param future the CompletableFuture to wait on, or null if not applicable
1761 Creates a CrcComposer instance with specified parameters and full functional mask. @param type Type of checksum (CRC32 or CRC32C) @param bytesPerCrcHint Hint for CRC computation
1762 Updates the composite CRC value based on input CRC and stripe position. @param crcB second CRC value @param bytesPerCrc number of bytes per CRC
1763 Formats finish time with optional time difference using provided date format. @param dateFormat date format object @param finishTime end timestamp @param startTime start timestamp
1764 Escapes characters in a string using the specified escape character and array of characters to escape. @param str input string
1765 Formats string by escaping special characters and joining with comma. @param str input string
1766 Formats function name mask with prefix and log mask. @param classname class name @param args array of arguments to format
1767 Returns a mask value based on the wrapped RemoteIterator's state. @throws IOException if an I/O error occurs
1768 Retrieves a masked result from the given Future, handling cancellation and exceptions. @param future the asynchronous operation to evaluate
1769 Evaluates a collection of asynchronous operations and returns their masked results. @param collection the futures to process
1770 Awaits the completion of a future with a specified timeout. @param future asynchronous operation to await @param timeout maximum time to wait for completion @param unit time unit for the timeout @return result of the completed future or throws an exception if cancelled, timed out, or failed
1771 Combines the results of multiple asynchronous operations with a specified timeout. @param collection list of futures to evaluate @param duration maximum time to wait for completion
1772 Asynchronously awaits and processes a collection of futures with configurable interrupt and timeout. @param collection Collection of asynchronous operations @param interruptIfRunning Whether to interrupt running futures @param duration Timeout duration for awaiting futures @return List of processed future results
1773 Instantiates an object of type T with specified constructor parameters. @param theClass Class of the object to instantiate @param conf Hadoop Configuration instance (unused) @param argTypes Array of parameter types for the constructor @param values Variable number of arguments to pass to the constructor @return Instantiated object of type T or null if instantiation fails
1774 Retrieves and returns the Class instance for masking, either from cache or dynamically loaded. @return Class<?> instance used for masking
1775 Retrieves function mask Class instance from cache or dynamically loads it. @return Class<?> instance or throws RuntimeException on failure
1776 Loads class by name and returns functional mask value. @param name class name
1777 Creates a functional mask for the specified class name. @param name class name @return SUCCESS on successful creation or error code otherwise
1778 Creates a new service configuration instance.
1779 Creates a new or returns existing Configuration instance. @return Configuration object
1780 Initializes FindClass instance with default Hadoop configuration.
1781 Initializes ReconfigurableBase with default Hadoop configuration.
1782 Initializes this ReconfigurableBase instance with provided Hadoop configuration. @param conf Hadoop configuration to be initialized
1783 Retrieves a mask value for the specified Hadoop executable. @param executable name of the Hadoop executable to find mask for
1784 Executes a shell command, waits for its completion or timeout, and handles error streams.
1785 Updates task progress with fixed weightage and new status. @param status new phase status (e.g. "IN_PROGRESS", "COMPLETED")
1786 Recursively creates persistent node in ZooKeeper at specified path if it does not exist. @param path ZK path to create
1787 Checks if a file system supports a specific capability. @param fs Hadoop file system object @param path Path to the file or directory @param capability Supported capability (e.g., read, write)
1788 Checks if the specified capability is available for the given object. @param object the target object @param capability the capability to check
1789 Retrieves I/O statistics count from dynamic sources. @param source input data source
1790 Retrieves I/O statistics from dynamic wrapped sources. @param source serialized data source
1791 Retrieves minimum I/O statistics from dynamic data sources. @param source DynamicWrappedStatistics object
1792 Calculates maximum I/O statistics masks. @param source input data source
1793 Retrieves I/O statistics means using 'm1' method. @param source input data source
1794 Invokes method invocation logic with error handling and returns result. @param args variable number of arguments for method invocation
1795 Binds static method with specified class and argument classes. @param className unique class identifier @param varargs variable number of argument types
1796 Dynamically binds and invokes an instance method within the given target class. @param className unique class identifier
1797 Retrieves an unbound method instance for the specified name with functional dependencies. @param source Class containing the method (optional) @param returnType expected return type @param name unique method identifier @param parameterTypes variable number of argument types @return UnboundMethod object or null if not found
1798 Checks if object supports I/O statistics and has snapshot mask. @param object the object to check
1799 Verifies if the given object has I/O statistics capability. @param object the target object to check
1800 Creates a snapshot mask by invoking 'm2' on target object. @param object the target object
1801 Checks if I/O statistics snapshot mask can be created. @return true if mask creation is possible, false otherwise
1802 Calculates the function mask for a given Hadoop file system and path. @param fileSystem Hadoop file system instance @param path Path object to determine function mask for @return Function mask value as an integer
1803 Deletes files in bulk from the Hadoop file system. @param fs FileSystem object @param base Base directory path @param paths Collection of file paths to delete
1804 Opens a file in the Hadoop file system with specified policy and options. @param fs FileSystem object @param path Path to the file @param policy File opening policy @param status Optional FileStatus object @param length Optional file length @param options Optional map of file open options @return FSDataInputStream object or throws IOException if an error occurs
1805 Reads fully from Hadoop file system and updates buffer. @param in InputStream to read from @param position File position to start reading @param buf ByteBuffer to store read data
1806 Creates a snapshot of I/O statistics using M1 method.
1807 Enables or disables I/O statistics context using m1 check. @param iostatisticsContextEnabledMethod UnboundMethod object to enable/disable
1808 Initializes LightWeightCache with recommended length and expiration periods. @param recommendedLength proposed set size @param sizeLimit actual cache size limit @param creationExpirationPeriod time to live for cached entries @param accessExpirationPeriod time to idle before eviction
1809 Initializes the Bloom filter with specified parameters. @param vectorSize maximum value for hash outputs (> 0) @param nbHash number of hash functions to utilize (> 0) @param hashType unique hash identifier (must be known)
1810 Updates filter mask for the given key, ensuring membership and updating internal state. @param key Key object to be updated
1811 Recursively processes a collection of keys. @param coll Collection of Key objects
1812 Recursively processes a list of keys. @param keys Collection of Key objects
1813 Recursively processes an array of keys. @param keys Array of Key objects
1814 Updates the Bloom filter and false positive vector at a specified index. @param index position in the filter to update
1815 Finds the index of the hash value with minimum membership ratio. @return The index of the minimum ratio or a default value if none found
1816 Validates program execution with given arguments. @param argv command-line arguments
1817 Retrieves CredentialEntry for a given name from the provider, handling deprecated keys and new key mappings. @param provider credential provider instance @param name unique identifier of the credential @return CredentialEntry object or null if not found
1818 Adds deprecation delta for a single configuration key. @param key deprecated configuration key @param newKeys array of replacement keys @param customMessage optional guidance for users
1819 Configures server listeners and binds them to available ports.
1820 Parses and initializes fencing configuration based on input string. @param argStr optional user and/or SSH port as a string
1821 Recursively deletes the working directory ZooKeeper node. @throws IOException if clearing fails
1822 Checks for any old active instance that needs to be fenced and performs the necessary actions.
1823 Allocates and reads data into a ByteBuffer from the specified file range. @param stream PositionedReadable stream for reading @param range FileRange to read from @param allocate function to allocate buffer with specific size @return CompletableFuture containing the allocated ByteBuffer or null on error
1824 Handles caching of BufferData by transitioning its state to caching mode and associating it with a prefetching action. @param data BufferData object to be cached
1825 Updates buffer state and associates it with a new action future. @param actionFuture Future object representing the action
1826 Computes a function mask using the data buffer and updates the state accordingly. @param expectedCurrentState list of allowed current states
1827 Calculates the mask size for a block based on its number and file properties. @param blockNumber numeric block identifier
1828 Calculates the mask value for a given block number and file size offset. @param blockNumber numeric block identifier @param offset file size offset
1829 Initializes a BlockData object with file size and block size. @param fileSize total size of the data @param blockSize size of each block
1830 Calculates file position mask based on buffer integrity and offset. @return integer mask representing file position
1831 Caches and updates file system instances, handling automatic closure and I/O errors.
1832 Closes file systems for a given UserGroupInformation object. @param ugi UserGroupInformation object for authentication
1833 Writes a CharSequence to a file in the given FileContext. @param fs the file system context @param path the file path @param charseq the string content
1834 Writes bytes to a file in the distributed file system. @param fs Hadoop file system instance @param path file location in the distributed file system @param bytes data to be written as byte array @return original file system instance
1835 Writes a collection of lines to a file in the distributed file system. @param fs Hadoop file system instance @param path file location in the distributed file system @param lines iterable of characters to write @param cs character set for encoding @return the input file system instance
1836 Writes CharSequence to Hadoop file system. @param fs File system instance @param path file location in the distributed file system @param charseq data to be written @param cs character set for encoding @return file system instance
1837 Initializes a BlockLocation object with metadata. @param names array of block names @param hosts array of associated hostnames @param topologyPaths array of storage paths @param offset data block offset in bytes @param length data block length in bytes @param corrupt indicates if the data block is corrupted
1838 Retrieves cached metric info based on name and description. @param name Metric identifier @param desc Brief metric description @return MutableCounterInt object for the specified metric
1839 Retrieves cached metric info and creates synchronized mutable counter. @param name Metric identifier @param desc Brief metric description @param iVal Initial long value for the mutable counter
1840 Retrieves cached metric info and creates a new MutableGauge with given initial value. @param name Metric identifier @param desc Brief metric description @param iVal Initial gauge value
1841 Registers a mutable gauge metric with initial value. @param name Metric identifier @param desc Brief metric description @param iVal Initial float value for the gauge
1842 Creates a mutable integer gauge with specified initial value and registers it in the metrics map. @param name Metric identifier @param desc Brief metric description @param iVal Initial integer value for the gauge
1843 Creates a copy of this MeanStatistic instance. @return copied MeanStatistic object
1844 Logs IO statistics with a given message and source. @param log Logger instance for logging @param message Log message to be printed alongside statistics @param source Object containing IO statistics or a source for statistics
1845 Formats and appends IO statistics to the result of super method m1. @param none
1846 Formats and logs input/output statistics from the given IOStatistics object. @param statistics Input/Output Statistics with various statistic sources
1847 Tracks IO statistics for a given invocation, raising exceptions if necessary. @param factory DurationTrackerFactory instance @param statistic unique identifier for statistics tracking @param input InvocationRaisingIOE object to process @return tracked duration value or throws IOException
1848 Creates and uses a duration tracker instance to mask operation result. @param factory optional DurationTrackerFactory instance @param statistic unique identifier for statistics tracking @param input supplier of masked operation result
1849 Adds a new file block to the cache as the new head entry, potentially evicting an old entry if the maximum block count is reached. @param entry Entry object containing the block data
1850 Initializes a new instance of the IOStatisticsStoreImpl class with dynamic I/O statistics counters and gauges. @param counters optional list of unique identifiers for atomic long counters @param gauges optional list of unique identifiers for atomic long gauges @param minimums optional list of unique identifiers for atomic long minimum values @param maximums optional list of unique identifiers for atomic long maximum values @param meanStatistics optional list of unique identifiers for custom mean statistic functions
1851 Reads and decrypts a portion of encrypted data from the input stream. @param b underlying input stream containing encrypted data @param off starting position for reading @param len length of data to read and decrypt @return number of bytes read and decrypted
1852 Decrypts and writes data to output buffer using provided decryptor. @param position current stream position @param buffer input data to decrypt @param offset starting position in buffer for decryption @param length total bytes to decrypt
1853 Decrypts and processes encrypted data from the input stream. @param filePosition current position in the file @param buf output buffer for decrypted data @param length total number of bytes to decrypt @param start starting position in the output buffer
1854 Decrypts data from input buffer using a pool of decryptors and buffers. @param buf input ByteBuffer containing encrypted data @param length total number of bytes to decrypt @param start starting position in the input buffer
1855 Seeks to a specific position within the encrypted stream. @param pos target stream position
1856 Advances the input stream by a specified amount, handling buffer full cases. @param n skip length
1857 Initializes glob filter with custom pattern and default path filter. @param filePattern input glob pattern string
1858 Initializes glob filter with custom pattern and optional path filter. @param filePattern input glob pattern string @param filter additional path filtering criteria (optional)
1859 Creates target directory and unpacks tar archive into it. @param inputStream Tar archive input stream @param untarDir Target directory for unpacking @param gzipped Whether the archive is gzip-compressed
1860 Retrieves file statistics from STATISTICS_TABLE.
1861 Calls AbstractFileSystem's implementation of m1(). @param none
1862 Recursively encodes input ECChunks into output buffers and returns. @param inputs array of ECChunks to encode @param outputs array of ByteBuffer objects for encoded data
1863 Creates a BlockingThreadPoolExecutorService with specified settings. @param activeTasks number of active tasks allowed @param waitingTasks number of waiting tasks allowed @param keepAliveTime time to keep idle threads alive @param unit time unit for keepAliveTime @param prefixName unique identifier for threads @return BlockingThreadPoolExecutorService instance
1864 Validates and initializes buffer-related variables for file operations. @param bufferData BufferData object containing relevant data @param startOffset starting offset within the file @param readOffset current read position within the file
1865 Returns the mask value using the m1 function.
1866 Initializes masked statistics context.
1867 Returns a serialized functional mask via m1 and m2 methods.
1868 Validates IO statistics by retrieving and processing context. @param source Object containing IO statistics or a source for statistics
1869 Executes tasks on a collection of items, handling exceptions and managing statistics. @param task Task to be executed
1870 Initializes thread-level I/O statistics context from provided object. @param statisticsContext IOStatisticsContext object to initialize
1871 Updates thread I/O statistics context using provided context. @param ioStatisticsContext IOStatisticsContext object to update
1872 Initializes thread-level I/O statistics context with given context. @param ioStatisticsContext IOStatisticsContext object to initialize
1873 Handles exceptions thrown during command execution. @param e the Exception object to handle
1874 Generates path handle based on file status and optional parameters. @param stat FileStatus object containing file metadata @param opt Variable number of HandleOpt objects for customizing path handling
1875 Updates the token map with private tokens created by cloning public tokens and associating them with a new service. @param alias Text representation of public service @param t Token to be cloned and associated with the new service
1876 Encrypts data from input ByteBuffer to output ByteBuffer using OpenSSL cipher. @param inBuffer source ByteBuffer containing data to encrypt @param outBuffer destination ByteBuffer for encrypted data
1877 Masks data from input ByteBuffer to output ByteBuffer using OpenSSL cipher. @param inBuffer source ByteBuffer containing data to mask @param outBuffer destination ByteBuffer for masked data
1878 Initializes the mount point by parsing source and destination paths using regular expressions. @throws IOException if initialization fails due to bad regex patterns
1879 Constructs a Path object by combining the provided parent and child paths, ensuring resolution compatibility with URIs. @param parent parent file system path @param child child file system path to resolve with parent
1880 Constructs a Path object from a given file system path string. @param pathString input file system path to process
1881 Constructs a Path object from URI components. @param scheme URI scheme @param authority URI authority @param path input file system path to process with m1()
1882 Constructs string representation of path with scheme, if inferred from path. @param uri URI object containing path information @return formatted path string or decoded remainder if no scheme is present
1883 Validates and extracts the function mask URI from the given Path object. @param p the input Path object
1884 Retrieves file status with specific mask. @param p input path
1885 Creates an FSDataOutputStream with specified options. @param f the file path @param createFlag flags for creating files @param opts various creation options (e.g. block size, buffer size) @return FSDataOutputStream instance
1886 Creates a functional mask FsPermission by combining user, group, and other actions from the given umask. @param mode primary permission settings @param umask secondary, functional permissions
1887 Checks if file exists with specified permissions. @param f Path to file
1888 Sets file permissions based on input or default value. @param permission FsPermission object to set, or null for default
1889 Creates a non-recursive FSDataOutputStream with specified settings. @param f file path @param overwrite whether to overwrite existing file @param bufferSize buffer size @param replication replication factor @param blockSize block size @param progress progress monitor
1890 Creates an FsPermission instance from a short integer representing permission bits. @param permission short integer with permissions bits
1891 Writes key-value pair with specified serialization and compression. @param key Object to be serialized as the key @param val Object to be serialized as the value
1892 Retrieves compressed block size from underlying state.
1893 Capped seek position within the file's length. @param n desired offset @return capped offset or throws IOException if an I/O error occurs
1894 Calculates total content length mask. @param path Path to the HAR file
1895 Calls Hadoop FileSystem's m1 method to perform operation. @param path Path to the file
1896 Initializes JvmPauseMonitor and triggers GC monitoring. @throws Exception if initialization fails
1897 Initializes service state and starts the service if it's not already started.
1898 Transitions service state to the provided new state. @param newState new service state @return previous service state or null if unchanged
1899 Retrieves and logs the default Kerberos realm. @throws KerberosDiagsFailure if an error occurs while invoking krb5.Config.getDefaultRealm
1900 Overridden equals comparison with BytesWritable object. @param right_obj object to compare with
1901 Delegates comparison to superclass when comparing with Text object. @param o object to compare with
1902 Updates masked byte array with new data from BytesWritable object. @param newData BytesWritable containing new byte data to update
1903 Decodes erasure-coded input buffers and updates their positions. @param inputs array of input byte buffers @param erasedIndexes array of indexes for erasures @param outputs array of output byte buffers
1904 Decodes erasure-coded data from input byte arrays and outputs. @param inputs array of input byte arrays @param erasedIndexes array of erased index offsets @param outputs array of output byte arrays
1905 Checks if compressed stream contains block delimiter marker. @throws IOException if an I/O error occurs
1906 Initializes CBZip2OutputStream with default block size and given output stream. @param out output stream for compressed data
1907 Initializes DecompressorStream with input stream and default buffer size. @param in underlying input stream
1908 Creates a CompressionOutputStream instance with LZ4 codec and given output stream. @param out OutputStream to write compressed data to
1909 Creates a CompressionOutputStream instance with BZip2 codec and given output stream. @param out OutputStream to write compressed data to
1910 Creates a CompressionOutputStream instance with the given configuration and output stream. @param out OutputStream to write compressed data to
1911 Creates a CompressionOutputStream instance with the Snappy codec and given output stream. @param out OutputStream to write compressed data to
1912 Initializes key-value pairs for MapFile by invoking m1() on underlying data and index configurations.
1913 Releases block state and compression resources. @throws IOException if an I/O error occurs
1914 Creates a CompressionInputStream using the LZ4 codec and input stream. @param in InputStream to compress
1915 Creates a CompressionInputStream using the provided input stream. @param in InputStream to compress
1916 Creates a CompressionInputStream using Zstandard codec and input stream. @param in InputStream to compress
1917 Creates a CompressionInputStream using Snappy codec and input stream. @param in InputStream to compress
1918 Updates internal state by calling index and data operations. @throws IOException if an I/O error occurs during execution
1919 Initializes input stream and prepares for shutdown.
1920 Returns a direct decompressor instance using ZlibFactory. @param conf Hadoop configuration
1921 Writes metadata and key-value pairs to output stream. @throws IOException if I/O error occurs
1922 Writes token and secret key properties to output stream. @param out DataOutput stream for writing
1923 Resets decompression state and reads synchronization data from the input stream. @throws IOException if an I/O error occurs or file is corrupt
1924 Decompresses and prepares values for reading, handling compressed and uncompressed data formats.
1925 Extracts and decodes a UTF-8 encoded string from the input stream. @param in input data stream
1926 Retrieves a delegation key by ID. @param keyId unique identifier for the key
1927 Retrieves a delegation token for the given URL and credentials. @param url HTTP URL to authenticate @param creds Credentials object containing authentication details @return Delegation token or null if not found
1928 Retrieves a security token based on the specified authentication type. @param authType SaslAuth object representing the authentication method @return Token object or null if not found
1929 Retrieves and configures a Hadoop security token. @param token Token object or null if not acquired @param addr InetSocketAddress to the Hadoop service
1930 Converts a Protobuf TokenProto to a Hadoop Token. @param tokenProto Protobuf representation of the token
1931 Retrieves the function mask as a ByteString from cache or computation. @param key Text object containing key information
1932 Copies a token's properties from another token. @param other the Token object to copy from
1933 Calls readLine with default maxBytesToConsume. @param str Text object for encoding and decoding @param maxLineLength Maximum allowed text length per line
1934 Determines the maximum number of bytes to consume based on the record delimiter. @param str Text object for encoding and decoding
1935 Initializes InstrumentedLock with logging and timing settings. @param name identifier for this lock instance @param logger logging mechanism to track events @param minLoggingGapMs minimum time gap between logs in milliseconds @param lockWarningThresholdMs threshold for warning on excessive lock hold/wait times in milliseconds
1936 Creates a dynamic proxy instance for specified interface with retry mechanism. @param iface target interface @param implementation initial object to wrap in proxy @param retryPolicy default retry policy to apply
1937 Executes failover and retry logic, waiting for a specified time before returning. @return CallReturn value indicating the outcome of the method invocation
1938 Initializes Writer object with file system output stream and configuration settings. @param fsdos file system output stream @param minBlockSize minimum block size for data storage @param compressName compression algorithm name @param comparator file mask comparator class name @param conf Hadoop Configuration object
1939 Checks if end-of-file marker is present in input stream. @throws IOException on I/O error during decoding
1940 Calculates and returns the mask value. @throws IOException if an I/O error occurs during decoding
1941 Computes key length mask from provided byte buffer. @param buf underlying byte data @param offset starting position in the buffer @param length slice length to be managed
1942 Invokes compression and flushing of buffered records, with optional write operation on the underlying FSDataOutputStream.
1943 Writes a compressed key-value pair to the output stream, applying masking and serialization. @param key Object representing the key @param val Object representing the value
1944 Writes compressed data to a SequenceFile, handling buffering and synchronization. @param keyData byte array containing key data @param keyOffset offset of key data in the array @param keyLength length of key data @param val ValueBytes object representing value data
1945 Applies bitwise mask operation using input and output buffers. @param dst destination Writable object @param src source Writable object
1946 Selects a random node within the specified network scope. @param scope network scope string @param excludedNodes collection of Node objects to exclude @return selected Node or null if none found
1947 Updates network topology by sorting nodes based on distance from the given reader node. @param reader starting node @param nodes array of Node objects to be sorted @param activeLen number of active nodes
1948 Initializes network topology by sorting nodes based on distance. @param reader starting node @param nodes array of Node objects to be sorted @param activeLen number of active nodes
1949 Initializes SocketInputStream with a socket and IO operation timeout. @param socket network socket @param timeout IO operation timeout in milliseconds
1950 Initializes SocketInputStream with a network socket. @param socket network socket object
1951 Initializes SocketOutputStream with a socket and IO operation timeout. @param socket network socket for data transfer @param timeout IO operation timeout in milliseconds
1952 Adds a new node to the network topology, handling inner nodes and data nodes. @param node NodeBase object containing node data
1953 Waits on a selectable channel with specified operations and timeouts. @param buf ByteBuffer instance @param ops operation type (e.g. read, write) @return -1 if closed, or selected count; 0 if timed out
1954 Establishes a connection to the specified endpoint on the given SocketChannel. @param channel selectable socket channel @param endpoint target endpoint @param timeout total timeout in milliseconds @throws IOException if an I/O error occurs
1955 Handles socket operations with specified timeouts. @param ops selection operation
1956 Resolves interface name to its associated default hostname. @param strInterface interface name to search for
1957 Resolves hostname for a network interface or its subinterfaces. @param strInterface interface name to search for @param nameserver DNS server (null for default)
1958 Initializes metric system with m1 configuration.
1959 Initializes MutableInverseQuantiles with specified metrics and interval. @param name metric identifier @param description brief metric description @param sampleName sample identifier @param valueName variable identifier @param intervalSecs time in seconds between metric updates
1960 Creates a MutableQuantiles instance with specified name, description, and interval. @param name metric identifier @param desc brief metric description @param sampleName sample identifier @param valueName variable identifier @param interval time in seconds between metric updates
1961 Creates a new statistical metric with specified details. @param name unique metric identifier @param desc brief metric description @param sampleName sample identifier @param valueName value identifier
1962 Retrieves cached metric info based on name and description. @param name Metric identifier @param description Brief metric description @return MetricsInfo object or null if not found
1963 Updates rolling averages with new metric data. @param name unique identifier of the metric @param value measured value to update average
1964 Updates RPC queue rates for a specified priority level. @param priority scheduled priority @param queueTime elapsed time in the queue
1965 Updates RPC processing rates for a given priority level. @param priority priority level (e.g. queue or processing time) @param processingTime measured processing time
1966 Updates RPC processing rates with elapsed time. @param rpcCallName unique identifier of the RPC call @param overallProcessingTime measured elapsed time for overall processing
1967 Initializes and logs diagnostic output mask for Kerberos configuration.
1968 Logs diagnostic failure based on condition and message category. @param condition boolean indicating diagnostic success or failure @param category diagnostic category @param message error message with optional arguments
1969 Logs diagnostic message based on condition. @param condition boolean flag to determine logging @param category diagnostic category @param message error message with optional arguments
1970 Creates a UserGroupInformation instance with the given user and default authentication method. @param user unique user identifier
1971 Verifies token validity by comparing the stored and provided passwords. @param identifier unique token identifier @param password plain-text password to be verified
1972 Calculates and updates the user's function mask. @return true if valid function mask found, false otherwise
1973 Initializes Count object from command-line arguments and configuration settings. @param cmd array of command-line arguments @param pos starting position for argument processing @param conf Hadoop configuration to be used
1974 Configures and returns a ZooKeeper instance with SSL/TLS encryption and authentication. @throws IOException if configuration or initialization fails
1975 Retrieves the first value from the queue associated with the given key. @param keyName unique identifier of the key
1976 Resolves hostname to InetAddress, optionally timing and logging the lookup. @param hostname name of the host to resolve @return InetAddress object or throws UnknownHostException if not found
1977 Fetches the function mask for a given protocol class and server version. @param server VersionedProtocol instance @param protocol identifier of the protocol @param clientVersion long identifier for the client implementation @param clientMethodsHash hash code of client methods @return ProtocolSignature object representing the function mask or null if invalid
1978 Checks server method support for the given protocol and method name. @param methodName method name to check @param parameterTypes method parameter types @return true if supported, false otherwise
1979 Validates RPC request header and throws exceptions for invalid operations. @param header RpcRequestHeaderProto object to validate
1980 Masks input value using m3 operation on ByteBuffer. @param message Message object to be processed @param buffer RpcWritable.Buffer object containing the data @return T object with masked input value
1981 Returns the mask value based on the semaphore's state. @return mask value or null if not applicable
1982 Handles version mismatch between server and client. @param clientVersion client's protocol version
1983 Calculates total swap space size in bytes. @return Total swap size, including any reserved memory.
1984 Initializes HarFSDataInputStream with a FileSystem and HAR file details. @param fs Hadoop File System instance @param p Path to the HAR file @param start starting byte position in the file @param length number of bytes to read from the file @param bufsize buffer size for data access
1985 Retrieves and updates the cached function mask by iterating through the cache queue. @param none
1986 Evicts cache entries to maintain size limit. @param none
1987 Formats content summary with query and human-readable options. @param qOption true for query option @param hOption true for human-readable format @param xOption true to include snapshot information in formatting
1988 Formats content summary with specified options and storage types. @param qOption true for query option @param hOption true for human-readable format @param tOption true to use m1 method; otherwise, formats with prefix @param types list of storage types
1989 Formats quota usage summary by type and human-readability option. @param hOption whether to display binary prefix @param tOption whether to include total quota usage
1990 Recursively waits for completion of a list of Futures, using an executor for task submission. @param futures list of ConcurrentFutures to wait for
1991 Calls task completion handler using provided CompletableFuture. @param future optional CompletableFuture to process
1992 Updates composite CRC value by processing byte array in chunks. @param crcBuffer input byte array @param offset starting offset in bytes @param length chunk size @param bytesPerCrc number of bytes per CRC
1993 Recursively reads and processes multiple CRC values from the input stream. @param checksumIn DataInputStream containing CRCs
1994 Instantiates an object of type T with specified constructor parameters. @param theClass Class of the object to instantiate @param conf Hadoop Configuration instance (unused)
1995 Retrieves and returns the Class instance used for masking from the underlying MapFile. @return Class<?> instance used for masking
1996 Retrieves function mask class instance from underlying MapFile structure. @return Class<?> instance or throws RuntimeException on failure
1997 Creates a functional mask for the specified class name based on user-provided arguments. @param args array of arguments (action and name) to determine the type of operation @return int indicating success or failure (SUCCESS or error code)
1998 Initializes builder with file context and path. @param fc mandatory FileContext @param path required file system Path
1999 Creates a DataChecksum object based on the provided byte array and offset. @param bytes input byte array @param offset starting position within the byte array @return DataChecksum object or null if creation fails
2000 Creates a DataChecksum object from the specified data stream. @param in input stream containing checksum type and chunk size @return DataChecksum object or null if creation fails
2001 Calculates the mask value and manages process execution. @throws IOException on error
2002 Creates and aggregates I/O statistics snapshot. @param snapshot DynamicWrappedStatistics snapshot object @param statistics associated IO statistics @return true if successful, false otherwise
2003 Creates a snapshot of I/O statistics using M1 and invokes M2 to mask.
2004 Creates I/O statistics snapshot with source. @param source optional data source
2005 Converts I/O statistics snapshot to JSON string. @param snapshot snapshot of I/O statistics
2006 Retrieves I/O statistics snapshot from JSON string. @param json input JSON data
2007 Retrieves I/O statistics snapshot using M1 and invokes 'm2' on the loaded method. @param fs Hadoop file system @param path filesystem path
2008 Retrieves I/O statistics snapshot using M2 method. @param source dynamic source object
2009 Saves I/O statistics snapshot to the specified file system location. @param snapshot snapshot of I/O statistics @param fs file system instance @param path target file path @param overwrite whether to overwrite existing file
2010 Converts I/O statistics to a human-readable string representation. @param statistics object containing I/O statistics data
2011 Retrieves I/O statistics context mask.
2012 Sets I/O statistics context from dynamic wrapped statistics. @param statisticsContext the statistics context to set
2013 Resets I/O statistics context using cached snapshot.
2014 Returns I/O statistics context mask as a serializable object. @return serialized I/O statistics context mask or null if not available
2015 Determines I/O statistics context aggregation result. @param source object to aggregate @return true if aggregation is enabled, false otherwise
2016 Compares two software versions and returns a mask representing their relative order. @param version1 first version string @param version2 second version string
2017 Initializes the Counting Bloom Filter with specified parameters. @param vectorSize maximum value for hash outputs (> 0) @param nbHash number of hash functions to utilize (> 0) @param hashType unique hash identifier (must be known)
2018 Initializes the Bloom filter with specified parameters. @param vectorSize maximum value for hash outputs (> 0) @param nbHash number of hash functions to utilize (> 0) @param hashType unique hash identifier (must be known)
2019 Performs a membership test using the Bloom filter. @param key WritableComparable object to generate hash values from @return true if key is likely present, false otherwise
2020 Clears the Bloom filter and false positive vector at a specified index based on a given key and scheme. @param k Key object @param scheme Selective clearing scheme (RANDOM, MINIMUM_FN, MAXIMUM_FP, RATIO)
2021 Adds deprecation delta and replacement key for a single configuration key. @param key deprecated configuration key @param newKey replacement key @param customMessage optional guidance for users
2022 Adds deprecation delta for a single configuration key. @param key deprecated configuration key
2023 Adds deprecation delta for a single configuration key with replacement. @param key deprecated configuration key @param newKey replacement key
2024 Initializes the HttpServer, configures metrics and listeners, starts web application handlers, and handles server connections.
2025 Updates the active node breadcrumb in ZooKeeper. @param oldBreadcrumbStat previous breadcrumb stat or null
2026 Deletes the active node's breadcrumb. @assumes state == State.ACTIVE
2027 Reads data from the specified file ranges into buffers while adhering to chunk size constraints. @param stream PositionedReadable stream for reading @param ranges List of file ranges to read from @param allocate function to allocate buffer with specific size
2028 Caches and prefetches BufferData in the block cache. @param op Operation object to be completed
2029 Calculates the mask value for a given block number. @param blockNumber numeric block identifier
2030 Initializes FilePosition object with file size and block size. @param fileSize total size of the data @param blockSize size of each block
2031 Validates buffer integrity using block number.
2032 Closes all file system instances and updates cache.
2033 Writes CharSequence to Hadoop file system. @param fs File system instance @param path file location in the distributed file system @param charseq data to be written @return file system instance
2034 Initializes a BlockLocation with metadata and offset. @param names array of block names @param hosts array of associated hostnames @param offset data block offset in bytes @param length data block length in bytes @param corrupt indicates if the data block is corrupted
2035 Initializes a BlockLocation object with metadata. @param names array of block names @param hosts array of associated hostnames @param topologyPaths array of storage paths @param offset data block offset in bytes @param length data block length in bytes
2036 Merges two MeanStatistics, updating the left instance with the combined values. @param l Left MeanStatistic to be updated @param r Right MeanStatistic to merge from
2037 Updates IO statistics by merging the provided source snapshot with the current instance. @param source IOStatistics object to merge from
2038 Logs IO statistics with a given message and source. @param message Log message to be printed alongside statistics @param source Object containing IO statistics or a source for statistics
2039 Logs IO statistics at the specified level. @param log Logger instance for logging @param level Logging level (INFO, ERROR, or WARN) @param source Object containing IO statistics or a source for statistics
2040 Logs remote iterator statistics and closes resources as needed. @param source RemoteIterator instance to process
2041 Invokes IO statistics tracking using provided factory and statistic. @param factory DurationTrackerFactory instance @param statistic unique identifier for statistics tracking @param input InvocationRaisingIOE object to process
2042 Reads and decrypts data from input stream at specified position. @param position current stream position @param buffer input data to decrypt @param offset starting position in buffer for decryption @param length total bytes to decrypt @return number of decrypted bytes or -1 on error
2043 Reads and decrypts data from the underlying input stream at a specified position. @param position current stream position @param buffer output buffer for decrypted data @param offset starting position in buffer for decryption @param length total bytes to read and decrypt
2044 Reads and decrypts data from the input stream at a specified position. @param position current position in the file @param buf output buffer for decrypted data @return number of bytes read or -1 if end-of-file reached
2045 Reads and decrypts data from the input stream at a specific position. @param position current position in the file @param buf output buffer for decrypted data
2046 Reads and decrypts data from the input stream into a ByteBuffer. @param buf underlying ByteBuffer to store decrypted data
2047 Writes a Java object to the output stream, handling primitive arrays and compact arrays. @param out output stream @param instance Object to be written @param declaredClass class of the object being written @param conf Configuration settings @param allowCompactArrays whether to allow compact arrays
2048 Retrieves a BufferData object for the specified block number. @param blockNumber unique block identifier
2049 Retrieves buffer statistics from the pool via the internal pool manager. @return total number of buffers in the pool
2050 Executes a task on the collection of items, handling exceptions and managing statistics. @param task Task to be executed
2051 Updates mask values for a list of PathData objects, handling exceptions and recursion. @param parent Parent PathData object @param items List of PathData objects to update
2052 Creates a function that generates path handle based on file status and optional parameters. @param fs FileSystem object @param opt Variable number of HandleOpt objects for customizing path handling
2053 Resolves Unix groups for specified user. @param userName unique username identifier
2054 Resolves Unix groups for the specified user. @param userName input username
2055 Masks secret keys with aliases from the provided credentials data. @param in DataInput stream containing credentials
2056 Retrieves a token for the given service from user credentials or issues a new one if not found. @param issuer DelegationTokenIssuer instance @param renewer service renewer string @param credentials user credentials object @param tokens array of Token objects to update with retrieved token
2057 Retrieves user credentials and authorizes access for the given service. @param alias Text representation of public service @param token Token associated with the new service
2058 Calculates and returns a Path object by applying mask rules to the provided file system path. @param workDir root directory of the SFTP file system @param path input file system path to be masked
2059 Resolves FTP file system paths by applying a mask to the URI's first segment. @param workDir working directory path @param path input file system path
2060 Constructs the function mask file by resolving the input path with URI segments. @param path input file system path to resolve
2061 Calculates a mask value and returns whether it matches the URI's first segment. @param p Path object to check for mask match
2062 Constructs a Path object with a mask value based on the provided default URI and working directory. @param defaultUri default URI to use for scheme, authority, and fragment @param workingDir working directory path
2063 Returns an instance of {@link Path} representing the file system mask.
2064 Returns the path to the function mask file within the HAR file system.
2065 Constructs an SFTP file path from a ChannelSftp object. @param channel SFTP connection object @return Path object or null on exception
2066 Retrieves file status for the given path, handling FileNotFoundExceptions. @param fs Hadoop FileSystem instance @param pathString unique file system path @param ignoreFNF whether to ignore or throw FileNotFoundException @return FileStatus object or null if not found
2067 Returns a Path object representing the file system path associated with this exception.
2068 Returns the target path as a Hadoop Path object or null if not set.
2069 Calculates total content length mask. @param path file system path to process
2070 Initializes the ChRootedFileSystem with a given file system and root URI. @param fs underlying file system @param uri root URI to restrict access
2071 Extracts the remaining file system path from a given array, starting at the specified index. @param path input path components @param startIndex index to begin extracting the path from @return Path object representing the extracted path
2072 Constructs a path string by concatenating directory links with commas.
2073 Constructs a Path object by combining the provided parent and child paths. @param parent parent file system path @param child child file system path to resolve with parent
2074 Constructs a Path object from a parent path and a child string. @param parent parent file system path @param child child file system path to resolve with parent
2075 Constructs a Path object by combining the provided parent and child paths. @param parent parent file system path @param child child file system path to resolve with parent
2076 Renames a MapFile in the specified file system. @param fs Hadoop FileSystem instance @param oldName original file name @param newName new file name
2077 Constructs a Hadoop Path object from a given DtFile instance.
2078 Constructs a Hadoop-compatible URI from the given nested URI. @param nestedUri input URI to process @return Path object representing the processed URI
2079 Creates an array of Path objects from the given string array. @param str input array of file system path strings @return Path[] object or null if input is null
2080 Returns a new Path object with modified URI components based on the input file system path's mask value. @param path input file system path to process
2081 Constructs a combined file system path by applying mask functions to the input paths. @param path1 initial path object @param path2 secondary path object @return resulting Path object with applied masks
2082 Validates file type requirement against path properties. @param typeRequirement expected file type (directory or not)
2083 Constructs a string representation of the path for the given child directory. @param childPath Path object containing child directory information
2084 Throws PathNotFoundException if FUNC_MASK is not applicable to the given PathData. @param item PathData object containing file system path information
2085 Validates and retrieves an AbstractFileSystem instance for the given file system path. @param absOrFqPath absolute or fully qualified path to validate and retrieve AbstractFileSystem for
2086 Checks if a directory exists with specified permissions and sets them if necessary. @param dir Directory path @param permission File system permissions to apply
2087 Constructs a LocatedFileStatus object representing the status of a file or directory. @param length total size of the file @param isdir boolean indicating whether this is a directory @param block_replication replication factor for blocks @param blocksize default block size @param modification_time last modified time @param access_time last accessed time @param permission FsPermission object representing permissions @param owner string representing the owner @param group string representing the group @param symlink Path to a symbolic link (if applicable) @param path Path to the file or directory @param attr set of attributes (if applicable) @param locations array of BlockLocation objects representing block locations
2088 Wraps key-value pair in Objects for serialization. @param key Object to be serialized as the key @param val Object to be serialized as the value
2089 Writes key-value pairs from iterator to output stream. @param records RawKeyValueIterator containing data @param writer Writer object for writing output
2090 Initializes service configuration and transitions to the INITED state. @param conf Hadoop Configuration object
2091 Stops the service, invoking necessary callbacks and notifications.
2092 Compares private token with public service. @param thePublicService Text object representing public service
2093 Validates token against specified service alias. @param token Token object @param alias Text representation of service mask @return true if valid, false otherwise
2094 Checks if URL matches service and name pattern. @param fetcher DtFetcher instance @param service Text representation of service @param url URL to check against pattern
2095 Validates directory existence and permissions within the specified file system path. @param dir File object representing the directory to check
2096 Validates directory creation prerequisites and executes setup tasks. @param dir target directory
2097 Calculates and updates buffer length based on flushing and checksum writing. @param keep whether to retain partial data @param flushPartial whether to flush partially written data
2098 Validates and decodes erasure-coded input buffers, updating their positions. @param inputs array of input byte buffers @param erasedIndexes array of indexes for erasures @param outputs array of output byte buffers
2099 Recursively decodes erasure-coded input buffers and updates their positions. @param inputs array of ECChunk input buffers @param erasedIndexes array of indexes for erasures @param outputs array of output ECChunk buffers
2100 Calculates and registers the function mask value. @throws IOException if an I/O error occurs
2101 Initializes input stream and prepares segment descriptor for shutdown. @throws IOException if I/O error occurs
2102 Closes the block reader and updates lease count for codec instance.
2103 Reads token and secret key entries from DataInput stream. @param in DataInput stream containing credentials information
2104 Reads and processes a record from the SequenceFile. @param key DataOutputBuffer containing the key data @return length of the processed record or -1 if not found
2105 Configures and reads data from the given Writable object, handling compressed and uncompressed formats. @param val Writable object to be configured and read
2106 Retrieves and decompresses the mask value from the input stream. @throws IOException if an I/O error occurs
2107 Fetches key and value lengths from SequenceFile, handling compression and synchronization. @param key DataOutputBuffer containing the key @param val ValueBytes object to store the value @return int length of the record or -1 if not found
2108 Calculates the length of a block value. @param val input ValueBytes to process
2109 Retrieves DelegationTokenInformation for the given TokenIdent. @param ident unique TokenIdent @return DelegationTokenInformation object or null if not found
2110 Creates a PermissionStatus instance from serialized data. @param in input data stream
2111 Reads and decodes an Enum value from a DataInput stream. @param in input data stream @param enumType target Enum class @return Enum instance or null if invalid
2112 Parses and initializes access control list from input stream. @param in input data stream
2113 Retrieves function mask as ByteString from cache or computation. @param key Text object containing key information
2114 Constructs and returns a TokenProto instance representing the function mask. @param tok input token object
2115 Initializes a new AbstractDelegationTokenIdentifier with provided token details. @param kind Text object representing the token type @param owner Text object representing the token's owner @param renewer Text object containing the Hadoop Kerberos name to decode @param realUser Text representation of the user
2116 Executes the FUNC_MASK method with built-in retry and failover logic. @return CallReturn value indicating the outcome of the method invocation
2117 Initializes and populates the mask with key-value pair from TFile block. @throws IOException on I/O error during decoding
2118 Calculates the function mask based on the given BytesWritable object. @param value input data to process @return long representing the calculated function mask
2119 Writes function mask to output stream. @param out target OutputStream @return total written size
2120 Computes key length mask from provided byte buffer. @param buf underlying byte data
2121 Compares this entry with another object for key length mask equivalence. @param other the object to compare with @return true if both entries have same key length mask, false otherwise
2122 Fetches a delegation token for the specified URL. @param url The base URL to operate on @param token DelegationTokenAuthenticatedURL Token object containing authentication information @param renewer Optional renewer parameter for certain operations @param doAsUser Optional user to authenticate as @return A Hadoop security token, or null if not acquired
2123 Retrieves the delegation token mask from the server. @param url URL to operate on @param token DelegationTokenAuthenticatedURL Token object containing authentication information @param dToken Optional delegation token parameter @param doAsUser Optional user to authenticate as @return The retrieved delegation token mask or 0 if not applicable
2124 Cancels a delegation token. @param url The base URL to operate on @param token DelegationTokenAuthenticatedURL Token object containing authentication information @param dToken Delegation token identifier @param doAsUser Optional user to authenticate as
2125 Selects a random node within the specified network scope. @param scope network scope string
2126 Updates network topology by adjusting the position of a given reader node and its group. @param reader starting node @param nodes array of Node objects to be updated @param activeLen number of active nodes
2127 Creates a SocketInputWrapper instance with the given socket and input stream. @param socket The underlying socket @param timeout read timeout in milliseconds @return A SocketInputWrapper object or throws IOException if an error occurs
2128 Creates an OutputStream instance based on the socket's configuration. @param socket network socket for data transfer @param timeout IO operation timeout in milliseconds
2129 Establishes a connection to the specified endpoint on the given SocketChannel. @param socket selectable socket channel @param endpoint target endpoint @param localAddr local address (optional) @param timeout total timeout in milliseconds @throws IOException if an I/O error occurs @throws ConnectTimeoutException if connection times out @throws UnknownHostException if endpoint is unresolved
2130 Registers an MBean with the specified service name, base name, properties, and object reference. @param serviceName service identifier @param nameName base name for the MBean @param properties key-value pairs to append to the name @param theMbean non-null object reference @return ObjectName instance or null on failure
2131 Creates a quantile metric with specified name, description, and update interval. @param name unique metric identifier @param desc brief metric description @param sampleName sample identifier @param valueName variable identifier @param interval time in seconds between metric updates
2132 Initializes RetryCache with specified parameters. @param cacheName unique cache identifier @param percentage allowed memory usage as a percentage @param expirationTime time to live for cached entries
2133 Initializes or updates protocol-specific metrics based on the provided class. @param protocol Class containing protocol-specific data
2134 Initializes metrics by name from provided array. @param names Array of metric identifiers
2135 Updates rate metrics for each local sample stat based on global metric. @param localStats map of local sample stats
2136 Retrieves or creates a mutable rate metric by ID. @param name unique metric identifier @param desc brief metric description @param extended whether to enable extended metrics tracking
2137 Initializes rate metrics for the given protocol. @param protocol Class representing the protocol to initialize
2138 Registers metrics from annotations on the specified method. @param source object providing context @param method specific method to measure
2139 Verifies Kerberos authentication status and logs diagnostic information. @param messagePrefix prefix to be used in error messages @param user UserGroupInformation object representing the current user
2140 Verifies a File object's validity based on various checks. @param file the File to be validated @param category diagnostic category @param text error message with optional arguments @return true if all checks pass, false otherwise
2141 Validates Kerberos principal and short name. @param principal the principal to validate
2142 Retrieves a UserGroupInformation instance based on the token owner and renewer. @return UserGroupInformation object or null if invalid owner/renewer
2143 Initializes Find object with recursive search enabled by default.
2144 Initializes Count object with default settings.
2145 Updates functional mask subject based on Hadoop login context.
2146 Updates functional mask subject. @throws IOException if an I/O error occurs
2147 Initializes user authentication.
2148 Creates an InetSocketAddress from the given host and port. @param host hostname to resolve @param port server port number
2149 Resolves hostname to InetAddress, catching UnknownHostException and returning null.
2150 Handles a Hadoop IPC connection by sending an RPC request and waiting for a response. @param call Call object containing RPC details
2151 Processes RPC request from client by instantiating and configuring the corresponding Writable class. @param header RpcRequestHeaderProto object @param buffer RpcWritable.Buffer object containing call parameters @throws RpcServerException if instantiation or processing fails
2152 Processes RPC call with provided status and response. @param call RpcCall instance @param status RpcStatusProto object @param erCode RpcErrorCodeProto object @param rv Writable object containing the response @param errorClass String indicating error class @param error String describing the error
2153 Updates IP list and cache expiry time. @param none
2154 Prints system information, including physical and virtual memory sizes, available memory, number of processors, CPU frequency, cumulative CPU time, network read/write statistics, storage read/write statistics, and CPU usage.
2155 Formats content summary with query and human-readable options. @param qOption true for query option @param hOption true for human-readable format
2156 Verifies and reads available bytes from input array using m1 method. @param b input byte array @param off starting offset within the array @param len total bytes to be verified @return number of bytes read or -1 if failed
2157 Creates an instance of the specified expression class. @param expressionClass Class of the expression to instantiate @return Expression object or null if not found
2158 Retrieves a Command instance associated with the specified name. @param cmdName unique identifier for the function mask @param conf Hadoop Configuration instance (unused) @return Command object or null if not found
2159 Retrieves comparator instance associated with specified class. @param keyClass Class of objects to compare
2160 Retrieves WritableFactory associated with the given class type and instantiates a new Writable object. @param c Class to find factory for @param conf Hadoop Configuration instance (unused)
2161 Retrieves SocketFactory instance from the provided configuration. @param conf Hadoop Configuration instance @param propValue property value of socket factory class name
2162 Retrieves a TokenIdentifier object of type T. @return T instance or null if not found
2163 Creates and returns a DiskValidator instance based on the provided class type. @param clazz Class of the DiskValidator to instantiate
2164 Initializes the DynamicBloomFilter with specified parameters and a single Bloom filter. @param vectorSize maximum value for hash outputs (> 0) @param nbHash number of hash functions to utilize (> 0) @param hashType unique hash identifier (must be known) @param nr unknown parameter
2165 Dynamically expands the filter matrix by adding a new Bloom filter.
2166 Initializes the RetouchedBloomFilter with specified parameters and creates internal vectors for membership testing. @param vectorSize maximum value for hash outputs (> 0) @param nbHash number of hash functions to utilize (> 0) @param hashType unique hash identifier (must be known)
2167 Updates configuration resources by reloading properties and applying overlays. @param props Properties object to store reload information @param startIdx starting index for resource processing @param fullReload flag to enable or disable default resource loading
2168 Handles yielding from the election process. @param needFence whether to fence (block) node operations
2169 Performs vectored read operation on specified file ranges. @param ranges List of file ranges to read from @param allocate function to allocate buffer with specific size
2170 Initializes a BlockLocation with metadata and offset. @param names array of block names @param hosts array of associated hostnames @param offset data block offset in bytes @param length data block length in bytes
2171 Initializes a DurationStatisticSummary with statistical data for durations. @param key unique identifier for the statistic @param success whether the operation was successful @param count total number of operations @param max maximum duration @param min minimum duration @param mean optional MeanStatistic instance (clone if provided)
2172 Updates counters, gauges, minimums, maximums, and mean statistics from the provided IOStatistics instance. @param source input statistics to merge with current data
2173 Initializes IO statistics snapshot from a given source, or creates an empty instance if the source is null. @param source optional IOStatistics object to initialize from
2174 Counts and processes remote iterator elements using a provided consumer. @param source RemoteIterator instance to process @param consumer ConsumerRaisingIOE instance to handle each element @return Number of processed elements
2175 Calls writeObject to serialize the object with default settings. @param out output stream @param instance Object to be written @param declaredClass class of the object being written @param conf Configuration settings
2176 Fetches and prefetches a block by number. @param blockNumber unique block identifier
2177 Fetches BufferData object for the specified block number, retrying if acquisition fails. @param blockNumber unique block identifier @return BufferData object or null if wait failed
2178 Updates mask values for a PathData object using recursive processing. @param item PathData object to process
2179 Recursively processes a remote iterator of PathData objects. @param parent Parent PathData object @param itemsIterator RemoteIterator instance to process
2180 Resolves Unix groups for the specified user and parses group names and IDs. @param userName input username @param errMessage error message describing incomplete or invalid group name @param groupNames comma-separated list of group names @return Set<String> of valid group names or throws PartialGroupNameException if invalid
2181 Constructs and executes shell command with default environment settings. @param cmd array of shell command strings
2182 Constructs shell command with specified environment and defaults to zero timeout. @param env map of environment variables @param cmd array of shell command strings
2183 Merges security credentials from another Credentials object into this one. @param other Credentials to merge @param overwrite Whether to overwrite existing tokens and secret keys (true) or not (false)
2184 Merges security credentials from another Credentials object into this one. @param other Credentials to merge
2185 Issues a token for the given service based on user credentials or issuer. @param renewer service renewer string @param credentials user credentials object
2186 Authenticates user credentials using the provided token. @param token user authentication token
2187 Converts path to absolute form and updates working directory. @param newDir input file/directory path
2188 Updates file metadata. @param p input file system path @param mtime last modification time in milliseconds @param atime last access time in milliseconds
2189 Resolves file system path using RawLocalFileSystem. @param path input file system path to resolve
2190 Resolves file system mask value using Hadoop FS and returns the resulting string.
2191 Wraps FileSystem methods into a qualified Path object. @param fs Hadoop file system instance
2192 Resolves the qualified working directory path. @param path input file system path
2193 Returns the function mask URI. @param path input file system path
2194 Resolves file status for the given path. @param f input file system path
2195 Resolves file system link for the given path and recursively traverses the directory tree. @param f input file system path @param recursive whether to traverse directories recursively
2196 Opens file for read access by resolving its absolute path. @param f input file system path
2197 Opens an existing file by path. @param f input file system path @param bufferSize buffer size for reading data @return FSDataInputStream object or throws exception if not found
2198 Resizes a file to the specified length. @param f input file path @param newLength desired file size in bytes
2199 Resolves file system path and applies replication policy. @param f input file system path @param replication desired replication factor
2200 Resolves file permissions and applies them to the absolute path. @param f input file system path @param permission FsPermission object specifying file attributes
2201 Resolves file permissions for the specified user and group. @param f input file path @param username user identifier (optional) @param groupname group identifier (optional)
2202 Sets file metadata for the given absolute path. @param f absolute file system path @param mtime last modified time in milliseconds @param atime last accessed time in milliseconds
2203 Resolves the file checksum for a given path. @param f input file system path
2204 Resolves the file status for the given path. @param f input file system path
2205 Resolves and manages access to a file based on the provided path and permissions. @param path input file system path @param mode desired file action (read/write/delete)
2206 Resolves file status for the given path. @param f input file system path
2207 Resolves file path and applies function mask. @param f input file path
2208 Retrieves block locations for the given file path and offset range. @param f input file system path @param start starting offset @param len length of offset range @return array of BlockLocation objects or throws an exception if failed
2209 Resolves file system status for the given path. @param f input file system path
2210 Creates a hard link to the target file at the specified location. @param target destination path for the new link @param link source file path @param createParent whether to create parent directories if they don't exist
2211 Resolves file status iterator for the given Hadoop path. @param f input file system path
2212 Resolves remote file system path to iterator. @param path input file system path
2213 Resolves file status for the given file path. @param f input file path @return iterator over located file statuses or null if not found
2214 Resolves the absolute path and iterates through linked file systems to determine applicable FS masks. @param f input file system path @return set of applicable AbstractFileSystems or throws IOException if an error occurs
2215 Applies ACL specification to the resolved absolute file path. @param path input file system path @param aclSpec access control list entries
2216 Applies ACL specification to the given path. @param path input file system path @param aclSpec access control list entries
2217 Resolves the absolute path and resolves symbolic links. @param path input file system path
2218 Resolves the provided file path to its absolute form and resolves any FS links. @param path input file system path
2219 Applies ACL specification to the absolute file path. @param path input file system path @param aclSpec list of access control entries
2220 Resolves ACL status for the given file path. @param path input file system path
2221 Resolves and processes an absolute file path with specified XAttrSetFlag. @param path input relative file system path @param name attribute name @param value attribute value @param flag XAttrSetFlag enumeration
2222 Resolves file attributes for the given path. @param path input file system path @param name attribute name
2223 Resolves file system path to absolute and fetches metadata. @param path input file path
2224 Resolves file system links for the specified path and names. @param path input file system path @param names list of link names
2225 Resolves file system link for the given absolute path. @param path input file system path @param name symbolic link name
2226 Resolves the file system path to an absolute path and fetches a list of strings. @param path input file system path
2227 Resolves file system path with given snapshot name. @param path input file system path @param snapshotName name of the snapshot to resolve
2228 Resolves and renames a file system path's snapshot. @param path input file system path @param snapshotOldName old snapshot name @param snapshotNewName new snapshot name
2229 Resolves the absolute file path and creates a new FSLinkResolver to manage snapshots. @param path input file system path @param snapshotName name of the snapshot to create
2230 Resolves absolute file path and performs further operations. @param path input file system path
2231 Applies storage policy to the specified file. @param path input file system path @param policyName name of the storage policy
2232 Resolves the provided file path to an absolute path and resolves any symbolic links. @param src input file system path
2233 Resolves block storage policy using the provided absolute file path. @param path input file system path @return BlockStoragePolicySpi object or throws IOException if error occurs
2234 Resolves file system link using the provided function and capability. @param path Hadoop file system path @param capability capability string associated with the path
2235 Resolves file system defaults by the provided path. @param path input file system path to resolve
2236 Resolves file system path for multipart uploader by combining base path with working directory. @param basePath input file system path
2237 Constructs an SFTP file path from an SFTP connection object. @param client SFTP connection object
2238 Retrieves file status for the given path, handling exceptions. @return FileStatus object or null if not found
2239 Calls Hadoop FileSystem's m1() method to perform file system operation. @throws IOException if an I/O error occurs
2240 Resolves file system path and initializes ResolveResult with result kind, target file system, and resolved path details. @param srcPath source file system path @return InodeTree.ResolveResult object or null if not found
2241 Checks if file exists in local directories. @param pathStr full file system path @param conf Hadoop configuration @return true if file found, false otherwise
2242 Renames and deletes MapFiles in the specified file system. @param fs Hadoop FileSystem instance @param name directory path to manage
2243 Generates a file path based on the current date. @return Path object representing the log directory
2244 Creates a secure or insecure FileOutputStream for the specified file with given permissions. @param f File object to create output stream for @param permissions desired file mode (permissions)
2245 Determines whether to preserve raw x-attributes during file copy operation based on source and target path types. @param src source file system path @param target destination file system path @return true if both paths are in RESERVED_RAW, false otherwise
2246 Calculates file system path mask using m1(). @return Path object representing calculated mask
2247 Calculates file system path mask and returns corresponding Path object. @return Optional<Path> containing calculated path or empty if not found
2248 Retrieves a remote iterator over files in the specified directory. @param path directory path
2249 Constructs an FSDataOutputStreamBuilder with a FileContext and Path. @param fc non-null FileContext instance @param p non-null file system path
2250 Verifies a file's integrity by calculating its checksum if requested. @param verifyChecksum whether to perform checksum verification @param f target file path
2251 Reads and parses FileStatusProto protocol buffer representation from input stream. @param in DataInput object to read from @throws IOException if parsing fails or invalid data is encountered
2252 Constructs a LocatedFileStatus object representing the status of a file or directory. @param length total size of the file @param isdir boolean indicating whether this is a directory
2253 Writes key-value pair to MapFile while tracking progress and validating key order. @param key WritableComparable object to be written @param val Writable object to be serialized as the value
2254 Masks service functionality by invoking necessary callbacks and notifications.
2255 Writes an integer to the buffer and potentially triggers a flush operation. @param b integer value to be written
2256 Copies and buffers data from a byte array chunk into the internal buffer. @param b the byte array to process @param off offset into byte array where processing starts @param len length of byte array to process @return number of bytes copied and buffered
2257 Recursively validates and decodes erasure-coded input buffers. @param inputs array of input ECChunks @param erasedIndexes array of indexes for erasures @param outputs array of output ECChunks
2258 Calculates and registers the function mask value, optionally forcing a finish operation if the block size exceeds the minimum threshold. @param bForceFinish whether to force a finish operation
2259 Masks secret keys with aliases from provided credentials data. @param in DataInputStream containing credentials information
2260 Fetches candidate delegation tokens for cleanup. @return Map of TokenIdent to DelegationTokenInformation objects
2261 Calculates the length of a block value. @param rawValue input ValueBytes to process
2262 Serializes credentials to output stream. @param out target DataOutput stream
2263 Constructs and returns a TokenProto instance representing the function mask. @param tok input token object
2264 Returns an entry with mask initialized by checking key. @throws IOException on I/O error during decoding
2265 Compares key-value pairs from TFile block with given RawComparable object. @param other the RawComparable object to compare with @return mask value indicating comparison result
2266 Calculates function masks based on input keys and values. @param key input key object @param value input data to process
2267 Iterates over input stream blocks, processing each block with m1() and managing I/O operations. @param n number of blocks to process @throws IOException on I/O error during processing
2268 Fetches a delegation token for the specified URL and authentication information. @param url The base URL to operate on @param token DelegationTokenAuthenticatedURL Token object containing authentication information @param renewer Optional renewer parameter for certain operations @return A Hadoop security token, or null if not acquired
2269 Retrieves delegation token from server using provided URL and authentication information. @param url URL to operate on @param token AuthenticatedURL Token object containing authentication info @param dToken Optional delegation token parameter
2270 Cancels a delegation token. @param url The base URL to operate on @param token DelegationTokenAuthenticatedURL Token object containing authentication information @param dToken Delegation token identifier
2271 Creates a SocketInputWrapper instance with the given socket and its associated input stream. @param socket The underlying socket
2272 Creates an OutputStream instance based on the socket's configuration. @param socket network socket for data transfer
2273 Establishes a connection to the specified endpoint on the given SocketChannel. @param socket selectable socket channel @param address target endpoint @param timeout total timeout in milliseconds
2274 Creates a new MetricsBuffer instance with current metrics data. @return New MetricsBuffer object
2275 Registers an MBean with specified service name and base name. @param serviceName service identifier @param nameName base name for the MBean @param theMbean non-null object reference
2276 Fetches or initializes ReadWriteDiskValidatorMetrics for a given disk directory. @param dirName name of the disk directory @return initialized ReadWriteDiskValidatorMetrics object
2277 Initializes RPC stats for specified number of priority levels. @param numLevels total number of levels to initialize
2278 Updates rate metrics for each local sample stat based on global metric. @param localStats map of local sample stats
2279 Retrieves or creates a mutable rate metric by ID. @param name unique metric identifier
2280 Retrieves or creates a mutable rate metric by ID. @param name unique metric identifier @param description brief metric description
2281 Validates a Kerberos keytab file by loading its contents and logging diagnostic information. @param keytabFile the File object containing the keytab data
2282 Initializes and logs diagnostic output mask for Kerberos JAAS configuration. @param jaasRequired boolean indicating whether JAAS setup is required
2283 Retrieves the user name for a given token identifier. @param id TokenIdent object containing user information
2284 Ensures the existence of parent ZNodes for the working directory. @throws IOException if creation or ACL setup fails
2285 Retrieves the active instance's mask. @throws ActiveNotFoundException if node does not exist
2286 Updates functional mask subject based on Kerberos ticket and user credentials.
2287 Initializes user credentials and functional mask subject.
2288 Resolves or normalizes the InetSocketAddress based on specific conditions. @param addr input address to process
2289 Updates the connection's address with a new InetSocketAddress, validating hostname and port matches. @throws IOException if an I/O error occurs
2290 Modifies a URI to mask the original host with its fully qualified form. @param uri input URI @param defaultPort optional default port number @return modified URI or original if no changes needed
2291 Handles a Hadoop IPC asynchronous RPC request and returns the result. @param rpcKind RPC kind (e.g. synchronous/asynchronous) @param rpcRequest RPC request object @param remoteId unique identifier of the connected service @param serviceClass connection configuration settings @param fallbackToSimpleAuth flag to enable simple authentication fallback @param alignmentContext alignment context for the RPC operation @return Writable object or null if not available, or throws IOException on failure
2292 Adds a new cache entry with retry functionality. @param newEntry new cache entry to add @return existing or newly added cache entry
2293 Creates a new cache entry with specified client ID and adds to the cache. @param clientId unique client identifier as a byte array @param callId unknown identifier, possibly related to the operation being retried
2294 Formats content summary with query and human-readable options. @param qOption true for query option
2295 Creates an expression instance for the specified name with given configuration. @param expressionName unique identifier of the expression @param conf system configuration
2296 Creates an instance of the specified expression class. @param expressionClassname name of expression class @param conf configuration object
2297 Builds a string containing the recognised primary expressions and operators. @param factory ExpressionFactory instance used to instantiate expression classes
2298 Creates an instance of the specified file system mask expression class. @param expressionClass Class of the expression to instantiate
2299 Retrieves a Command instance associated with the specified name. @param cmd unique identifier for the function mask
2300 Deserializes Java objects from a data stream, using the provided ObjectWritable to maintain class information and configuration settings. @param in DataInput stream containing serialized object data @param objectWritable ObjectWritable wrapper for deserialization metadata @param conf Hadoop Configuration instance (unused) @return Deserialized Java object or throws IOException if malformed
2301 Retrieves WritableFactory associated with the given class type. @param c Class to find factory for
2302 Retrieves the masked identifier from the provided token. @param token Token object containing the identifier
2303 Formats tokens and their metadata into a human-readable format. @param creds Credentials object containing the tokens to be formatted @param alias Text representation of service mask @param out PrintStream to write the formatted output to
2304 Creates and returns a DiskValidator instance based on the provided string name. @param diskValidator name of the DiskValidator to instantiate @return DiskValidator object or throws DiskErrorException if not found
2305 Initializes an empty BlockLocation object with default metadata and offset.
2306 Computes block locations for a file based on its status and specified start position and length. @param file FileStatus object @param start Start position in bytes @param len Length of the data to compute block locations for @return Array of BlockLocation objects or null if file is invalid
2307 Fetches a DurationStatisticSummary object for the given IOStatistics and key. @param source IOStatistics instance @param key unique identifier for the statistic @param success whether the operation was successful
2308 Retrieves an IO statistics snapshot with the specified mask.
2309 Creates an IO statistics snapshot from given source. @param statistics optional IOStatistics object to initialize from
2310 Creates an IOStatistics snapshot from the given source. @param source optional IOStatistics object to initialize from
2311 Collects elements from a remote iterator and stores them in a list. @param source RemoteIterator instance to process
2312 Updates mask values for a PathData object based on its existence. @param item PathData object to process
2313 Resolves Unix groups for the specified user and returns a set of valid group names. @param user unique username identifier @return Set<String> of valid group names or EMPTY_GROUPS_SET if invalid
2314 Executes script-based mapping for each argument in the list. @param args list of arguments to process @param commandScriptName name of the script to execute @return combined output as a string or null on failure
2315 Constructs function mask for readlink command. @param f file object
2316 Constructs and executes command to set file permissions. @param p local file system path @param permission FsPermission object representing user, group, and others actions
2317 Retrieves Unix group members for a specified netgroup. @param netgroup name of the net group
2318 Initializes Credentials object by merging another Credentials instance. @param credentials Credentials to merge
2319 Merges user credentials with existing subject tokens. @param credentials Credentials to merge
2320 Resolves file system path using RawLocalFileSystem for local paths. @param path input file system path to resolve
2321 Validates directory creation and permissions for a given path. @param localFS LocalFileSystem instance @param dir Path to the directory being validated @param expected Expected FsPermission mask
2322 Retrieves functional mask from the given local file path. @param f input file system path to process @param dereference whether to dereference symbolic links
2323 Generates function mask URI from a given file system path. @param path input file system path @return Path object representing the function mask URI
2324 Deletes paths on exit using FileContext instances. @param fcSet Map of FileContexts and their associated paths
2325 Checks if a file exists at the given path. @param f input file system path
2326 Sets the working directory to the provided path, ensuring it's not a file. @param newWDir new working directory Path object
2327 Renames a file within the Hadoop file system. @param srcName source file name @param dst destination path @param overwrite whether to overwrite existing files
2328 Retrieves content summary for the given Hadoop path. @param f input file system path
2329 Retrieves tokens from linked file systems and aggregates them. @param p input path @param renewer entity performing renewal @return list of tokens or throws IOException if an error occurs
2330 Sets an extended attribute on the specified file. @param path input relative file system path @param name attribute name @param value attribute value
2331 Resolves file system path. @param path input file system path
2332 Initializes MultipartUploaderBuilderImpl with a file context and path. @param fc FileContext object @param p input Path to resolve file system defaults
2333 Truncates files in the waitList to a specified length. @throws IOException if an I/O error occurs
2334 Resolves file system path against regex-based mount points. @param srcPath source file system path @param resolveLastComponent whether to resolve the last component of the path @return ResolveResult object or null if not found
2335 Retrieves existing or creates new allocator per context. @param contextCfgItemName unique context identifier
2336 Calculates the function mask path by traversing the HAR file system. @param path initial path to start from
2337 Calculates file system path mask using m1() and appends CRC extension. @param file input file object
2338 Calculates file system path mask using M3 with optional directory prefix. @return Path object representing calculated mask
2339 Validates and sets file system permissions for the given path. @param f target file or directory @param absolutePermission desired permission settings @param createParent whether to create parent directories if needed
2340 Renames a file or directory within the distributed file system. @param src source filesystem path @param dst destination filesystem path @param options optional rename options (e.g. OVERWRITE)
2341 Calculates file system path mask by concatenating parent path with CRC extension. @param file input file object
2342 Checks if a path is under the designated base path. @param p Path to validate @param basePath Designated parent directory @return True if path is under base path, false otherwise
2343 Checks if file system path mask is null.
2344 Calculates file system path mask using the Hadoop framework. @param suffix optional string suffix to append
2345 Resolves file system path with symlink considering URI and target path. @param pathURI function mask URI @param pathWithLink Path object containing original path and link @return qualified Path object or the target path if no resolution needed
2346 Renames or moves the source file to the destination path. @param src original file location @param dst new file location @param overwrite whether to overwrite existing destination file
2347 Constructs a FileStatus object representing a file or directory in the Hadoop file system. @param length total size of the file @param isdir boolean indicating whether this is a directory
2348 Copies the attributes of another FileStatus object. @param other the FileStatus object to copy from
2349 Constructs a LocatedFileStatus object from an existing FileStatus and block locations. @param stat existing file status @param locations array of block locations for the file
2350 Constructs a LocatedFileStatus object from file attributes. @param length total size of the file @param isdir boolean indicating whether this is a directory @param block_replication replication factor for data blocks @param blocksize size of each data block @param modification_time last modification time @param access_time last access time @param permission FsPermission object representing file permissions @param owner and group names for the owning user @param symlink and path to the file's symbolic link and location @param locations array of BlockLocation objects for data block storage
2351 Writes key-value pair to MapFile while tracking progress and validating key order. @param value Writable object to be serialized as the value
2352 Processes a byte array chunk into the internal buffer. @param b the byte array to process @param off offset into byte array where processing starts @param len length of byte array to process
2353 Calls Move-To-Front encoding and super implementation.
2354 Validates data block mask using m1 function.
2355 Masks file records based on filtering criteria.
2356 Masks secret keys with aliases from provided credentials data. @param filename file containing credentials information @param conf configuration object @return Credentials object or null if an error occurs
2357 Compares a RawComparable object with key-value entries in the current TFile block. @param key RawComparable object to compare @param greater whether to search for keys greater than or equal to the given key @return true if found, false otherwise
2358 Publishes metrics based on registered sinks and current data. @param m2 current metrics value @param immediate true for immediate processing, false otherwise
2359 Updates RPC metrics for the provided protocol. @param protocol Class containing protocol-specific data
2360 Initializes metric calculation within rolling averages context.
2361 Updates mutable metric by ID with numerical input. @param name unique metric identifier @param value new value to update min and max values
2362 Updates token owner statistics based on the provided identifier. @param id TokenIdent object containing user information
2363 Updates token owner statistics when a token is masked. @param id TokenIdent object containing user information
2364 Fetches the current HA service target based on active instance mask. @throws IOException if ZooKeeper issue occurs
2365 Initializes an ActiveStandbyElector instance with ZooKeeper configuration and callback. @param zookeeperHostPorts host:port of the ZooKeeper ensemble @param zookeeperSessionTimeout session timeout in milliseconds @param parentZnodeName working directory for Znode operations @param acl access control list for ZooKeeper nodes @param authInfo authentication information for ZooKeeper connections @param app callback interface for ActiveStandbyElector events @param maxRetryNum maximum number of retries for ZK operations @param failFast whether to fail fast on initial connection attempt @param truststoreKeystore truststore and keystore configuration
2366 Resolves or caches a network address for the given target host. @param target target hostname or IP address @param defaultPort default server port number to use if not specified in target @param configName configuration property name (optional) @param useCacheIfPresent whether to check cache before resolving
2367 Resolves or normalizes server address using IPC protocol. @param server Server object with method m1 to invoke
2368 Handles a synchronous Hadoop IPC RPC request. @param rpcKind RPC kind (e.g. synchronous) @param rpcRequest RPC request object @param remoteId unique identifier of the connected service @param fallbackToSimpleAuth flag to enable simple authentication fallback
2369 Creates a new cache entry with specified client ID, call ID, and expiration time. @param cache RetryCache instance @param clientId unique client identifier as byte array @param callId operation call identifier
2370 Creates a new cache entry with payload and expiration time. @param cache RetryCache instance @param payload associated data to be cached @param clientId unique client identifier as a byte array @param callId operation call identifier
2371 Retrieves an expression instance using the singleton ExpressionFactory. @param expressionName unique identifier of the expression
2372 Retrieves or creates a WritableComparator for the specified class and configuration. @param c Class of WritableComparable objects to compare @param conf Hadoop Configuration object (optional)
2373 Initializes WritableComparator with specified class and default configuration. @param keyClass Class of objects to compare
2374 Initializes LocalDirAllocator with a context configuration item name. @param contextCfgItemName unique item identifier
2375 Updates configuration properties based on deprecated key info. @param deprecations DeprecationContext object
2376 Creates a deep copy of another Configuration object. @param other the Configuration object to clone
2377 Restricts system properties and initializes configuration based on provided Configuration object. @param conf application configuration
2378 Retrieves alternative names for a given deprecated configuration key. @param name the original key name
2379 Retrieves a property mask by name. @param name configuration property identifier
2380 Calls m1() and retrieves its result's value. @return Value from m1()'s m2() method
2381 Calls m2() on shared properties objects retrieved from m1 and m3. @param none @return none
2382 Retrieves configuration properties as key-value pairs. @return iterator over Map.Entry<String, String> objects
2383 Applies a regular expression mask to configuration properties. @param regex regular expression pattern
2384 Validates and merges input file ranges while performing checksum validation. @param ranges list of file ranges to validate @param allocate function to allocate buffer with specific size
2385 Retrieves BufferData object for the specified block number, retrying if acquisition fails. @param blockNumber unique block identifier @return BufferData object or null if wait failed
2386 Updates replication settings for files in the waitList. @throws IOException if an I/O error occurs
2387 Computes block locations for a file based on its status and specified start position and length. @param p Path to the file @param start Start position in bytes @param len Length of the data to compute block locations for @return Array of BlockLocation objects or null if file is invalid
2388 Fetches duration statistic summary with success criteria. @param source IOStatistics instance @param key unique identifier for the statistic
2389 Returns an empty IOStatistics snapshot.
2390 Retrieves IO statistics mask from the provided source object. @param source optional Object containing IO statistics or a source for statistics
2391 Converts remote iterator to array. @param source RemoteIterator instance @param a target array
2392 Renews a delegation token with specified attributes. @param token Token object containing identifier and data @param renewer string representation of the renewing entity @return long value representing the new renew time @throws InvalidToken if an error occurs during renewal @throws IOException if an I/O error occurs
2393 Validates and cancels a token, ensuring the canceller has proper authorization. @param token TokenIdent object to be canceled @param canceller String representing the entity attempting cancellation @return TokenIdent object if cancellation is successful, otherwise null
2394 Iterates over PathData objects, invoking m2() to update masks and handling exceptions with m1(). @param args list of PathData objects to process
2395 Resolves Unix groups for the specified user and returns a list of valid group names. @param userName unique username identifier @return List<String> of valid group names or empty if invalid
2396 Retrieves the count of hard links associated with a specified file. @param fileName the file for which to retrieve link counts @return the number of hard links or -1 if an error occurs @throws IOException if any entry in the shell command is null
2397 Creates a symbolic link using the provided target and link name. @param target file path to be linked @param linkname symbolic link name @return exit code mask value associated with this operation or error code if failed
2398 Changes file permissions using a shell command. @param filename target file path @param perm desired permission string @param recursive whether to apply changes recursively (Windows-specific) @return the result of the permission change operation
2399 Determines whether setsid is supported on the current system. @return true if setsid is available and allowed, false otherwise
2400 Constructs file mask for Hadoop command execution. @param file File object to operate on @param username user identifier (e.g., user) @param groupname group identifier (e.g., group)
2401 Fetches Unix group members for a specified netgroup. @param netgroup name of the net group @return List of Unix usernames or empty list if not found
2402 Fetches credentials with masked tokens. @return Credentials object or null
2403 Filters file statuses based on a provided PathFilter instance. @param f input file system path @param filter PathFilter instance for filtering
2404 Filters file statuses based on a provided PathFilter. @param files array of file paths to filter @param filter PathFilter instance for filtering
2405 Resolves file system path against regex-based mount points. @param p input file system path to process @param resolveLastComponent whether to resolve the last component of the path @return ResolveResult object or null if not found
2406 Verifies file existence and checksum integrity with specified replication. @param src input file object @param replication replication factor
2407 Verifies file existence and checksum integrity. @param f Path to the file @param recursive whether to recursively check subdirectories @return true if file exists, false otherwise
2408 Verifies file integrity by checksum comparison between source and destination files. @param src source file Path @param dst destination file Path @return true if files match, false otherwise
2409 Verifies file existence and integrity by checksum in a Hadoop file system. @param f Path to the file @param recursive whether to recursively check subdirectories @return true if file exists and is valid, false otherwise
2410 Checks if a path in the target data matches any parent path in the source data. @param source PathData object containing paths to search @param target PathData object containing path to match @return true if a matching parent path is found, false otherwise
2411 Returns a masked file system path by prepending the root part. @param path input file system path to mask
2412 Resolves file system path by applying function mask. @param p Path object to be processed
2413 Calculates the function mask for a given Path object. @param p the input path
2414 Resolves file system path with symlink considering FileContext and Path. @param fc FileContext to resolve symlinks @param path input Path object containing original path and link @return resolved Path object or the target path if no resolution needed
2415 Renames or moves the source file to the destination path with specified options. @param src original file location @param dst new file location @param options rename options (e.g. OVERWRITE)
2416 Calculates the functional mask based on modification time. @param h HarStatus object containing necessary metadata @return FileStatus object representing the file's status
2417 Computes and returns the FileStatus for an FTP file. @param ftpFile the FTP file to evaluate @param parentPath the path of the directory containing the file
2418 Masks secret keys with aliases from provided credentials data and diagnostics configuration. @param tokenFile file containing credentials information @param conf configuration object @param category diagnostic category @param message error message with optional arguments
2419 Masks secret keys with aliases from provided credentials data and prints the result to a file. @param tokenFile File containing token information @param alias Text representation of service mask @param conf Configuration object for Hadoop environment @param out PrintStream to write the formatted output to
2420 Updates token mask for the given TokenIdent. @param ident unique token identifier
2421 Initializes the MetricsSystem with a given prefix. @param prefix unique identifier for metrics
2422 Fetches and executes a remote procedure call (RPC) for the specified method name on the given connection protocol, returning the result as a wrapped object. @param server RPC server instance @param connectionProtocolName name of the invoked remote procedure @param request input value to be processed @param methodName name of the invoked remote procedure @param protocol Class containing protocol-specific data @return wrapped RPC response or null if deferred
2423 Updates mutable metric in registry with elapsed time. @param name unique metric identifier @param elapsed time to add to metric's min and max values
2424 Adds a persisted delegation token to the SecretManager. @param identifier TokenIdent object containing user information @param renewDate long value representing token renewal date
2425 Updates token owner statistics and performs additional operations on current tokens. @param TokenIdent objects containing user information
2426 Masks and removes expired delegation tokens. @throws IOException if an I/O error occurs
2427 Initializes an ActiveStandbyElector instance with ZooKeeper configuration and callback. @param zookeeperHostPorts host:port of the ZooKeeper ensemble @param zookeeperSessionTimeout session timeout in milliseconds @param parentZnodeName working directory for Znode operations @param acl access control list for ZooKeeper nodes @param authInfo authentication information for ZooKeeper connections @param app callback interface for ActiveStandbyElector events @param maxRetryNum maximum number of retries for ZK operations
2428 Initiates active standby election process with specified application data. @param data byte array containing importance score
2429 Resolves or caches a network address for the given target host. @param target target hostname or IP address @param defaultPort default server port number to use if not specified in target @param configName configuration property name (optional)
2430 Generates a unique function mask for the given Method object. @param method RPC method to generate mask for
2431 Generates a unique function mask for the given Method object. @param method RPC method to generate mask for @return Message object or null if masking failed
2432 Parses a deque of arguments into an expression tree, applying logical operators and parentheses.
2433 Retrieves or creates a WritableComparator for the specified class. @param c Class of WritableComparable objects to compare
2434 Authenticates using delegation token from HTTP request. @param request HTTP request object @param response HttpServletResponse object @return AuthenticationToken object or null if authentication fails
2435 Calculates function mask based on provided deprecation context and name. @param deprecations Deprecation context @param name Function name to calculate mask for @return Array of function names with calculated masks or null if not found
2436 Configures environment variables using key-value pairs from the iterator. @param env map of environment variables to update
2437 Retrieves the delegation token identifier associated with a given token. @param token TokenIdent object containing token data @param canceller String representing the entity attempting retrieval @return TokenIdent object if successful, otherwise null
2438 Retrieves cached Unix groups for the specified user and returns a list of valid group names. @param user unique user identifier @return List<String> of valid group names or empty if invalid
2439 Creates a tar archive in the specified output directory. @param inFile input file containing the tar archive @param untarDir target directory for tarred files
2440 Applies file permissions using a shell command. @param filename target file path @param perm desired permission string
2441 Sets file permissions on Windows using a shell command. @param f target file @param readable whether to make the file readable
2442 Sets file permissions on Windows using a shell command. @param f target file @param writable whether to set write permission (true) or read-only (false)
2443 Sets file execution permissions on Windows. @param f target file @param executable whether to set execute permission
2444 Retrieves and updates local file information based on native code availability. @throws IOException on file metadata retrieval failure
2445 Resolves file system path and constructs function mask file with owner information. @param p local file system path to resolve @param username user identifier (e.g., user) @param groupname group identifier (e.g., group)
2446 Sets file permissions based on the provided mask and path. @param f File object representing the path @param permission FsPermission object containing desired permissions
2447 Fetches Unix group members for specified netgroups and updates cache. @param groups list of netgroup identifiers
2448 Fetches and logs user credentials with masked tokens. @param ugi UserGroupInformation object
2449 Logs user group information with masked tokens. @param log Logger instance @param caption Caption for logging @param ugi UserGroupInformation object containing credentials and tokens
2450 Validates directory creation and permissions for a given path. @param localFS LocalFileSystem instance @param dir Path to the directory being validated @param expected Expected FsPermission mask
2451 Validates directory creation and permissions for a given path. @param localFS LocalFileSystem instance @param dir Path to the directory being validated @param expected Expected FsPermission mask
2452 Filters file statuses based on default PathFilter. @param files array of file paths to filter
2453 Resolves file system value using Hadoop FS and returns the resulting long.
2454 Computes block locations for an archived file within the Hadoop Archive based on its status and specified start position and length. @param file FileStatus object representing the archived file @param start Start position in bytes @param len Length of the data to compute block locations for @return Array of BlockLocation objects or null if file is invalid
2455 Retrieves the FSDataInputStream for the function mask path within the Hadoop Archive. @param f input file system path @param bufferSize buffer size for data access @return FSDataInputStream instance or throws IOException if not found
2456 Creates an FSDataInputStream with checksum validation for the given file. @param f Path to the file @param bufferSize buffer size for input operations
2457 Fetches file content using checksum verification if enabled. @param f Path to the file @param bufferSize Buffer size for reading @return FSDataInputStream object or null on failure
2458 Calculates file system path mask using m1() and appends CRC extension. @param src input file object @param dst output file object
2459 Renames or moves the source file to the destination path with specified options. @param src original file location @param dst new file location @param options rename options (e.g. OVERWRITE)
2460 Calculates functional masks for HAR components. @param parent HarStatus object containing parent metadata @param statuses list of FileStatus objects to update with calculated masks
2461 Retrieves file status within a Hadoop Archive (HAR) by function mask path. @param f input file system path @return FileStatus object representing the file's status
2462 Fetches SFTP file status by path. @param client SFTP connection object @param file input file system path to be resolved @return FileStatus object representing the file or null if not found
2463 Retrieves the FileStatus of a file on an FTP server. @param client FTPClient instance for communication @param file Path object representing the file to evaluate @return FileStatus object containing metadata or null if not found
2464 Initializes the MetricsSystem with a default prefix (null).
2465 Initializes MutableRollingAverages with a metric name and schedules periodic updates. @param metricValueName unique identifier for the rolling average metric
2466 Updates rolling average schedules with specified window size and interval. @param windows number of windows @param interval calculation interval @param timeUnit unit of time for interval (e.g., TimeUnit.SECONDS)
2467 Updates service state and elector based on current node health and local target information.
2468 Masks instance from active standby election process.
2469 Handles a watched event from the ZooKeeper client. @param zk ZooKeeper object reference @param event WatchedEvent with information about the event type and state
2470 Resolves or caches a network address for the given target host. @param target target hostname or IP address @param defaultPort default server port number to use if not specified in target
2471 Authenticates using delegation token from HTTP request. @param request HTTP request object @return AuthenticationToken object or null if authentication fails
2472 Calculates function mask based on provided deprecation context and name. @param name Function name to calculate mask for
2473 Calculates function mask based on provided deprecation context and name. @param name Function name to calculate mask for @return Array of function names with calculated masks or null if not found
2474 Updates a configuration property with a mask and alternative names. @param name the deprecated key to be masked @param value the replacement value @param source the source of the update (programmatically or from a file)
2475 Calculates function mask(s) based on provided deprecation context and name. @param name Function name to calculate masks for
2476 Calculates system resource metrics mask. @return system metric mask value
2477 Returns system memory size in bytes. @return total memory size
2478 Calculates available virtual memory.
2479 Retrieves available system memory.
2480 Returns the number of processors available on this system. @return int representing processor count
2481 Returns CPU frequency in kHz.
2482 Calculates CPU time in milliseconds. @return cumulative CPU time in milliseconds
2483 Calculates CPU usage as a percentage of total processors.
2484 Calculates CPU usage as a percentage. @return normalized CPU usage value, or -1.0f if invalid
2485 Returns total network bytes read. @return accumulated network byte count
2486 Calculates the total network bytes written. @return Total network bytes written
2487 Evicts cache entries associated with users and updates netgroup cache. @throws IOException if an I/O error occurs
2488 Updates file system status for a given mount point. @param viewFileSystem View File System instance @param mountPointMap Map of mount points to FsStatus objects @param mountPoint Mount point to update @throws IOException if an I/O error occurs
2489 Calculates functional masks for HAR components and returns an array of FileStatus objects. @param f input file system path @return array of FileStatus objects representing the files' status
2490 Retrieves functional mask file status based on the provided path and dereferencing flag. @param f input local file system path @param dereference whether to follow symbolic links
2491 Retrieves file status for the given path. @param f Path to retrieve file status for
2492 Retrieves file statuses for a given path. @param f the path to retrieve file statuses for @return array of FileStatus objects or null if not found
2493 Checks if an SFTP file exists. @param channel SFTP connection object @param file input file system path to be resolved
2494 Fetches SFTP file status by path. @param channel SFTP connection object @param sftpFile input file system path to be resolved @param parentPath parent directory of the file @return FileStatus object representing the file or null if not found
2495 Checks if an SFTP file exists. @param channel SFTP connection object @param file input file system path to be resolved
2496 Verifies if a file exists on the FTP server. @param client FTPClient instance for communication @param file Path object representing the file to check @return true if found, false otherwise
2497 Resolves FTP file system paths and computes the FileStatus array for a given file. @param client FTPClient instance @param file Path object representing the file to process @return Array of FileStatus objects or null if not found
2498 Checks if a file exists on the FTP server. @param client FTPClient instance for communication @param file Path object representing the file to evaluate @return true if file found, false otherwise
2499 Initializes a new CBZip2InputStream instance with continuous reading mode. @param in input stream to read from
2500 Returns mask of total reported bytes read from compressed stream. @param in input stream containing BZip2 encoded data
2501 Handles ZooKeeper node creation with retries and error handling. @param rc result code of the create operation @param path path to the created node @param ctx ZooKeeper object reference @param name instance name
2502 Handles stat node result with retries and error handling. @param rc ZooKeeper operation result code @param path ZNode path reference @param ctx ZooKeeper object context @param stat Stat node result data
2503 Resolves or caches a network address for the given target host. @param target target hostname or IP address
2504 Parses server address specifications into a list of InetSocketAddress objects. @param specs string representation of server addresses (null for localhost) @param defaultPort default port number to use if not specified in target @return List of InetSocketAddress objects or an empty list if invalid input
2505 Resolves URI into a formatted host string for Hadoop security token service. @param uri input URI object @param defPort default server port number to use if not specified in target
2506 Creates or updates a configuration document with the specified property name and optional ConfigRedactor instance. @param propertyName unique property identifier (null for all properties) @param redactor optional ConfigRedactor instance for masking sensitive values @return Document object representing the updated configuration
2507 Performs variable substitution on the provided expression. @param expr input string to substitute variables in
2508 Updates configuration for reconfigurable object based on user input. @param out PrintWriter object to output HTML content @param reconf Reconfigurable object instance @param req HttpServletRequest object containing request data
2509 Updates a configuration property with a mask and alternative names. @param name the deprecated key to be masked @param value the replacement value @param source the source of the update (programmatically or from a file)
2510 Updates a configuration property with a mask and alternative names. @param name the deprecated key to be masked @param value the replacement value @param source the source of the update (programmatically or from a file)
2511 Verifies file mask permissions for the specified directory. @param dir target directory @param tryGrantPermissions whether to attempt granting permissions if necessary @return true if valid, false otherwise
2512 Calculates and returns the system resource mask value.
2513 Fetches the function mask for a given file system and path. @param fileSystem Hadoop file system object @param path Path object of the accessed file @return Map of MountPoints to FsStatus objects @throws IOException if an I/O error occurs or the file system is not supported.
2514 Retrieves functional mask file status based on the provided path and dereferencing flag. @param f input local file system path
2515 Renames an SFTP file from one path to another. @param channel active SFTP connection @param src original file path @param dst new file path @return true if the rename operation was successful, false otherwise
2516 Fetches SFTP file status and mask files recursively. @param client SFTP connection object @param file input file system path to be resolved @return array of FileStatus objects representing the files or null if not found
2517 Creates a directory on the SFTP server. @param client SFTP connection object @param file Path to create directory in @param permission FsPermission object for directory creation @return true if directory was successfully created, false otherwise
2518 Expands file pattern into a list of fully resolved paths. @param pathPattern the globbed path pattern @return an array of FileStatus objects representing the matched files
2519 Expands a file pattern into a list of fully resolved paths. @param pathPattern the globbed path pattern @param filter an optional PathFilter for filtering results
2520 Expands a file pattern into an array of fully resolved paths, filtered by default settings. @param pathPattern Path object to filter by @return FileStatus objects representing the matched files
2521 Expands a file pattern into an array of matched files using globbing operations. @param pathPattern file path pattern to expand @param filter optional PathFilter for filtering results
2522 Renames a file on the FTP server. @param client FTPClient instance for communication @param src Path object representing the source file @param dst Path object representing the destination file @return true if rename was successful, false otherwise
2523 Removes a file or directory on an FTP server. @param client FTPClient instance for communication @param file Path object representing the file/directory to delete @param recursive whether to recursively delete contents (default: false)
2524 Creates a directory on the FTP server. @param client FTPClient instance for communication @param file Path object representing the directory to create @param permission FsPermission object defining permissions (default rwxr-xr-x) @return true if creation was successful, false otherwise
2525 Formats IP port string according to network rules. @param ipPort input IP and port value
2526 Retrieves an InetSocketAddress based on the given token. @param token security token containing relevant information
2527 Resolves URI to a network address using NetUtils. @param uri input URI object
2528 Returns the function mask value based on local and distributed file system settings. @param URI input URI object @return function mask string or null if not applicable
2529 Generates function mask URI using security token service. @return formatted host string
2530 Performs variable substitution on the input expression using m1.
2531 Retrieves and initializes configuration properties. @return Array of function names with calculated masks or null if not found
2532 Retrieves configuration property value based on provided name and default value. @param name configuration property key @param defaultValue default value to use if not found
2533 Updates the configuration with a mask and alternative names for the given key. @param key the deprecated configuration key @param value the replacement configuration value
2534 Updates configuration with a mask and alternative name. @param key the deprecated key to be masked @param value the replacement value
2535 Masks file system default name with alternative from URI. @param conf configuration object @param uri source URI containing the replacement value
2536 Masks configuration property and sets viewfs link with specified mount table name. @param conf Configuration object @param mountTableName unique identifier of mount table @param src source of update (programmatically or from a file) @param target URI for the new viewfs link
2537 Updates viewfs prefix for specified mount table with merged link. @param conf Hadoop configuration @param mountTableName unique identifier of mount table @param target URI object representing the target location
2538 Sets viewfs prefix with fallback link and mounts the target URI. @param conf configuration object @param mountTableName unique identifier of mount table @param target URI to be mounted
2539 Merges links for a given mount table into the viewfs configuration. @param conf Hadoop Configuration object @param mountTableName unique identifier of mount table @param targets array of URI targets for merging
2540 Updates viewfs configuration with masked link. @param conf Configuration object @param mountTableName unique identifier of mount table @param src source of the update (programmatically or from a file) @param settings configuration settings @param targets target values for masking
2541 Masks a configuration property with an alternative name and updates the mount table settings. @param conf Configuration object @param mountTableName unique identifier of mount table @param srcRegex source regex to be masked @param targetStr replacement value @param interceptorSettings optional interceptor settings (null or programmatically/from file)
2542 Configures viewfs prefix and home directory for specified mount table. @param conf Hadoop configuration @param mountTableName unique identifier of mount table @param homedir path to home directory
2543 Applies user mask to Hadoop configuration. @param conf Hadoop Configuration object @param umask FsPermission object representing user mask
2544 Updates IO compression codecs configuration with a comma-separated list of class names. @param conf the Configuration object to update @param classes the List of Class objects containing codec classes
2545 Configures compression type in SequenceFile. @param job Configuration object @param val CompressionType value to be set
2546 Initializes a Configuration object with filtered properties from the FilterConfig. @param filterConfig Filter configuration to process @return Initialized Configuration object
2547 Parses command-line arguments for credential management. @param args array of command-line arguments
2548 Masks a deprecated configuration key with a new value. @param name the deprecated key to be masked @param value the replacement value
2549 Masks configuration property with given value. @param name deprecated key to be masked @param value replacement value
2550 Masks deprecated key and sets replacement value. @param name the deprecated key to be masked @param value the replacement value
2551 Masks a configuration property with a given value and alternative names. @param name deprecated key to be masked @param value replacement value
2552 Masks a configuration property with a specified value. @param name the deprecated key to be masked
2553 Masks deprecated configuration key and updates with time duration.
2554 Masks configuration property with provided value and unit. @param name deprecated key to be masked @param value replacement value @param unit storage unit for conversion
2555 Masks deprecated configuration key with a regular expression. @param name the deprecated key to be masked
2556 Masks deprecated configuration key with provided alternative values. @param name the deprecated key to be masked @param values array of replacement values
2557 Masks deprecated configuration key and updates with formatted address. @param name the deprecated key to be masked
2558 Validates a configuration class against an interface and updates its mask. @param name the deprecated key to be masked @param theClass the configuration class to validate @param xface the interface to compare with
2559 Verifies file mask permissions for the specified directory. @param dir target directory
2560 Verifies file mask permissions for the specified directory and its contents. @param dir target directory @param tryGrantPermissions whether to attempt granting permissions if necessary @return true if valid, false otherwise
2561 Retrieves functional mask file status for the specified local file system path. @param f input local file system path @return array of FileStatus objects or null if an I/O error occurs
2562 Retrieves functional mask file status. @param f input local file system path
2563 Checks if an SFTP file exists and is deletable. @param channel SFTP connection object @param file input file system path to be resolved @param recursive whether to recursively delete directory contents @return true if the file or directory can be deleted, false otherwise
2564 Creates a BZip2 compression input stream with specified parameters. @param seekableIn the input stream to compress @param decompressor the decompression instance @param start the starting position of the compressed data @param end the ending position of the compressed data @param readMode the continuous reading mode (CONTINUOUS or BYBLOCK) @return a BZip2CompressionInputStream instance
2565 Iterates through field annotations and attempts to create a mutable metric, registering it in the metrics registry if successful. @param source Object containing fields to process @param field Field object being annotated with a Metric annotation
2566 Calculates function mask using configuration and storage type. @param conf Configuration object @param t StorageType instance @param name Function name
2567 Calculates FTP transfer function mask based on configuration properties. @param conf Configuration object
2568 Configures FTP data connection mode based on configuration properties. @param client FTPClient instance @param conf Configuration object
2569 Calculates viewfs home directory prefix with specified mount table name. @param mountTableName unique identifier of mount table @param conf configuration object
2570 Initializes FsPermission instance from configuration, overriding default umask if provided and parsable. @param conf Configuration object to retrieve umask value from @return FsPermission instance with configured umask
2571 Fetches compression codecs based on configuration and registered codecs. @param conf Configuration object @return List of Class<? extends CompressionCodec> instances
2572 Resolves compression type for SequenceFile based on job configuration. @param job Configuration object @return CompressionType value or RECORD if not specified
2573 Calculates the function mask for a given configuration property. @param property key of the configuration property
2574 Masks Hadoop tokens in configuration. @param conf the Configuration object
2575 Initializes and loads the key store with a masked password. @throws IOException if key store creation or loading fails
2576 Retrieves DNS interface configuration and resolves hostname. @param conf Configuration object (null if not found)
2577 Retrieves and calculates the function mask for a given protocol. @param protocol class of the security protocol @param conf Hadoop configuration @return calculated function mask or null if not found
2578 Retrieves and calculates function mask for given configuration property. @param name unique property identifier
2579 Masks deprecated configuration key with provided replacement value. @param name the deprecated key to be masked @param value the replacement value
2580 Retrieves configuration property value and converts it to the desired unit. @param name configuration key name @param defaultValue default value to use if property not found @param defaultUnit TimeUnit for default value @param returnUnit desired TimeUnit for the result @return converted time duration value as a long
2581 Retrieves and initializes configuration property value. @param name property key @param defaultValue default value to use if not found @param targetUnit target storage unit for the returned value @return converted value in target unit
2582 Retrieves and converts storage size value based on given name, default value, and target unit. @param name input string for size representation (e.g. "1000MB") @param defaultValue fallback value in case of parsing failure @param targetUnit desired storage unit for result (e.g. bytes, kilobytes) @return converted size value in target unit
2583 Retrieves the configured regular expression mask for a given property. @param name property name @param defaultValue fallback pattern if configuration is invalid or missing
2584 Retrieves and initializes configuration properties. @param name input string to process
2585 Retrieves configuration properties using m1, then processes them with StringUtils.m2. @param name input string to process
2586 Retrieves and initializes configuration properties for the given name. If not found, returns default values. @param name property name @param defaultValue default values to return if property is missing
2587 Retrieves and initializes configuration properties for the given name. @param name input string to process
2588 Retrieves configuration properties and initializes masks. @param name input string to process
2589 Retrieves and initializes configuration properties. @return Array of function names with calculated masks or null if not found
2590 Retrieves configuration properties with calculated masks. @param confPrefix prefix string for configuration property names @return Map of configuration property names and values or empty map if not found
2591 Masks configuration values and writes them to JSON. @param jsonGen JsonGenerator instance @param config Configuration object @param name configuration key or property name @param redactor ConfigRedactor instance for sensitive value masking
2592 Updates a configuration property with a mask and alternative names. @param property the modified property name @param newVal the new value of the property
2593 Retrieves and logs configuration property by name. @param name unique property identifier
2594 Returns the function mask based on default mount table configuration. @param conf Hadoop Configuration object
2595 Checks if native Bzip2 library has been loaded and configured. @param conf Configuration object for loading library settings @return true if native library is loaded, false otherwise
2596 Retrieves Hadoop RPC socket factory based on configuration properties. @param conf Hadoop Configuration instance
2597 Retrieves static username from configuration settings. @param conf Configuration object
2598 Retrieves and logs the value of specified configuration property. @param option configuration property key
2599 Initializes truststore and keystore configurations from Hadoop Configuration. @param conf Hadoop configuration object
2600 Updates the user's Kerberos ticket and executes a renewal task if necessary. @param force whether to force an update regardless of current conditions
2601 Initializes KeyProvider with Configuration object. @param conf system-wide configuration settings
2602 Resolves ZooKeeper ACL configuration to a list of ACL objects. @param conf Configuration object containing ZK ACL settings
2603 Determines hash mask based on configuration. @param conf Configuration object containing hashing settings
2604 Retrieves and parses configuration property value into EnumSet. @param key common prefix for all enum values @param enumClass EnumSet containing the enumeration type @param ignoreUnknown whether to ignore unknown options or throw exception @return EnumSet of E objects or null if duplicate values found
2605 Retrieves configuration property value and parses integer ranges. @param name configuration property key @param defaultValue default value to use if not found
2606 Retrieves configuration property value with logging. @param name configuration property key @param defaultValue default value to use if not found
2607 Updates configuration with a mask and alternative names for the given key. @param key deprecated configuration key @param value replacement configuration value
2608 Updates configuration with a mask and alternative names for the given key. @param key deprecated configuration key @param value replacement configuration value
2609 Calls `m2` with a boolean conversion of the input value. @param key configuration key @param value boolean value to convert and pass to `m2`
2610 Updates configuration with a mask and alternative value. @param key the deprecated key to be masked @param value the replacement value
2611 Resolves file system path using alternative URI. @param conf configuration object @param uri source URI containing replacement value
2612 Configures viewfs with masked link and mounts URI targets. @param conf Configuration object @param mountTableName unique identifier of mount table @param src source of the update (programmatically or from a file) @param settings configuration settings @param targets array of URIs to concatenate and mask
2613 Masks index interval configuration with new value. @param conf Writer Configuration object @param interval new interval value
2614 Masks IPC ping interval configuration key with a new value. @param conf Configuration object @param pingInterval interval to be set
2615 Masks client connect timeout configuration with specified value. @param conf Configuration object @param timeout new connection timeout in milliseconds
2616 Masks nested mount point configuration property. @param conf Hadoop configuration object @param isNestedMountPointSupported true if nested mounts are supported
2617 Masks deprecated configuration key with provided alternative values. @param key the deprecated key to be masked @param values array of replacement values
2618 Masks deprecated configuration key with alternative values. @param key the deprecated key to be masked @param values array of replacement values
2619 Masks deprecated configuration key and updates with formatted address. @param name the deprecated key to be masked @return updated InetSocketAddress object
2620 Validates and initializes a configuration class for the given protocol. @param conf RPC configuration object @param protocol protocol interface to validate @param engine engine class to associate with the protocol
2621 Verifies file permissions for a directory. @param p target directory path @param recursive whether to recursively check subdirectories @return true if permitted, false otherwise
2622 Verifies file mask permissions for the specified directory. @param dir target directory
2623 Retrieves file status from the target file system. @param f input file path
2624 Retrieves file statuses from the target file system. @param f input file path @return array of FileStatus objects or null if not found
2625 Creates an FSDataOutputStream for writing to a file with specified parameters. @param f the Path of the file to write to @param overwrite whether to overwrite existing files @param bufferSize buffer size for writing data @param replication replication factor for storage @param blockSize block size for writing data @param progress Progressable object to track writing progress
2626 Returns FsPermission instance based on configured umask. @return FsPermission object with overridden default umask if provided
2627 Creates a BlockFactory instance based on the specified type. @param keyToBufferDir unique identifier for the buffer directory @param configuration Hadoop Configuration object @param name factory type (e.g. DATA_BLOCKS_BUFFER_ARRAY)
2628 Initializes the CompressionCodecFactory with a Hadoop Configuration object. Registers compression codecs based on configuration and registered codecs. @param conf Hadoop Configuration instance
2629 Retrieves configuration property value with fallback to default value. @param name unique property identifier @param defaultValue default value if property is not found
2630 Calculates function mask for given configuration property. @param name unique property identifier @param defaultValue default value to return if property not found
2631 Calculates a function mask for the given configuration property. @param name unique property identifier @param defaultValue default value to return if not found
2632 Retrieves function mask for given configuration property. @param name unique property identifier @param defaultValue default value to return if not found
2633 Calculates function mask from configuration property. @param name unique property identifier @param defaultValue default function mask value
2634 Calculates function mask from configuration property. @param name unique property identifier @param defaultValue default value to return if property not found
2635 Retrieves and calculates function mask for given configuration property. @param name unique property identifier @param defaultValue default value to return if property is invalid or missing
2636 Retrieves function mask Class for given configuration property. @param name unique property identifier @param defaultValue default class to return if not found
2637 Masks deprecated configuration key with provided replacement value. @param name the deprecated key to be masked
2638 Retrieves configuration property value and converts it to the desired unit. @param name configuration key name @param defaultValue default value to use if property not found @param unit TimeUnit for default value and result
2639 Retrieves and configures SASL properties for the given configuration key. @param conf Hadoop Configuration object @param configKey property name @param defaultQOP default Quality of Protection value to use if not found @return Map of configured SASL properties or an empty map if not found
2640 Retrieves configuration properties and initializes masks from input string. @param name input string to process
2641 Retrieves function masks and associated classes for the given name. @param name input string to process @param defaultValue default Class<?> array to return if not found @return Array of Class<?> instances with calculated masks or null if not found
2642 Retrieves a valid local directory from the given list of properties and path. @param dirsProp input string containing configuration properties @param path path to search for a valid local directory @return File object representing the first valid local directory found or null if none
2643 Initializes SerializationFactory instance with Hadoop configuration. @param conf Hadoop configuration containing serialization settings
2644 Retrieves configuration properties with calculated masks. @param confPrefix prefix string for configuration property names @return Map of configuration property name and value or empty map if not found
2645 Retrieves configuration properties with calculated masks. @param confPrefix prefix string for configuration property names @return Map of configuration property names and values or empty map if not found
2646 Retrieves configuration properties with calculated masks and populates the FSBuilder. @param builder FSBuilder instance to populate @param conf Hadoop Configuration object @param prefix prefix string for configuration property names @param mandatory whether configuration properties are mandatory
2647 Displays a form listing configuration changes to be applied. @param out PrintWriter for outputting HTML content @param reconf Reconfigurable object holding the current configuration settings
2648 Calls m2 with result of m1 and specified mount table configuration. @param conf Hadoop Configuration object @param src source of update (programmatically or from a file) @param target URI for the new viewfs link
2649 Invokes recursive configuration setup with default mount table function mask. @param conf Hadoop configuration @param target URI object representing the target location
2650 Calls addLinkFallback with default mount table configuration and nested link. @param conf Hadoop Configuration object @param target URI to be mounted
2651 Resolves mount table configuration and merges links. @param conf Hadoop Configuration object @param targets array of URI targets for merging
2652 Invokes recursive configuration setup for viewfs home directory. @param conf Hadoop configuration @param homedir path to home directory
2653 Returns function mask based on default mount table configuration. @param conf Hadoop Configuration object
2654 Validates configuration and options, then retrieves the erasure coding schema. @param conf Hadoop Configuration object @param options ErasureCodecOptions for configuring the codec
2655 Creates an ErasureDecoder instance from given configuration and options. @param conf Hadoop Configuration object @param options ErasureCodecOptions for configuring the decoder
2656 Returns appropriate compressor class based on native Bzip2 library availability. @param conf Configuration object for loading library settings
2657 Returns decompressor instance based on native library availability. @param conf Configuration object for determining native library status
2658 Returns a Bzip2 decompressor instance based on native library availability. @param conf Configuration object for loading library settings
2659 Retrieves Hadoop RPC socket factory based on configuration properties. @param conf Hadoop Configuration instance @param clazz Class containing protocol information
2660 Constructs a HadoopZookeeperFactory instance with default security settings. @param zkPrincipal ZooKeeper principal @param kerberosPrincipal Kerberos principal @param kerberosKeytab Kerberos keytab file path
2661 Initializes SSL configuration for client or server mode. @throws GeneralSecurityException on SSL errors
2662 Validates Kerberos authentication method based on configuration. @param conf Hadoop Configuration object
2663 Configures Hadoop security settings based on authentication method. @param conf Configuration object
2664 Retrieves a CryptoCodec instance based on the provided Configuration and CipherSuite. @param conf Hadoop configuration object @param cipherSuite Cipher suite object @return A valid CryptoCodec instance or null if not found
2665 Resolves Hash instance based on configuration. @param conf Configuration object containing hashing settings
2666 Creates a FlagSet instance with the given enumeration class, prefix, and optional initial flags. @param enumClass enumeration type @param conf Configuration object (m1 method must be present) @param key common prefix for all enum values @param ignoreUnknown whether to ignore unknown options or throw exception @return FlagSet instance or null if duplicate values found
2667 Masks sensitive configuration properties using ConfigRedactor and XSLT transformation. @param propertyName unique property identifier (null for all properties) @param out Writer object for output @param config Configuration object for property management
2668 Masks configuration values and writes them to the output Writer. @param config Configuration object @param out Output writer instance
2669 Updates configuration with a mask and alternative names for the given key. @param key deprecated configuration key @param value replacement configuration value
2670 Updates configuration with a mask and alternative names for the given key. @param key deprecated configuration key @param value replacement configuration value
2671 Updates configuration with a mask and alternative names for the given key. @param key deprecated configuration key @param value replacement configuration value
2672 Masks configuration with a specified value. @param key deprecated key to be masked
2673 Creates a metrics source instance with mask functionality using the specified object. @param source Object containing metrics data
2674 Creates an FSDataOutputStream for writing to a file with specified parameters. @param f Path of the file to write to @param overwrite whether to overwrite existing files @param bufferSize buffer size for writing data @param replication replication factor for storage @param blockSize block size for writing data
2675 Creates a new file output stream with specified permissions and options. @param f input file path @param createFlag creation flags (e.g. overwrite, exclusive) @param opts variable arguments of CreateOpts instances to search
2676 Resolves the provided directory path and applies file system permissions. @param dir input directory path @param permission FsPermission object or null for default settings @param createParent whether to create parent directory if not exists
2677 Generates file mask based on filename and suffix, and optionally compresses or decompresses data using the specified codec. @param args command-line arguments containing input/output flags and file paths
2678 Extracts function masks from the given principal configuration and formats it for use in security contexts with the provided hostname. @param principalConfig security configuration string @param hostname the hostname to be formatted or resolved
2679 Replaces the principal configuration with a function mask based on the given client address. @param principalConfig security configuration string @param addr client IP address @return updated principal configuration or original config if failed
2680 Registers and implements RPC protocol based on given kind. @param rpcKind type of RPC request @param protocolClass class containing protocol information @param protocolImpl actual implementation of the protocol
2681 Creates a KeyProvider instance from configuration settings and function mask URI. @param conf Hadoop Configuration object @param configKeyName unique key name for property value retrieval @return Associated KeyProvider or null if not found
2682 Resolves the URI for the default file system with fallback to a specified scheme. @param conf Configuration object @return resolved URI or null if no scheme is found
2683 Validates the Kerberos kinit command and its executable path.
2684 Resolves or caches a network address for the given target host with fallback to default address and port. @param name unique property identifier @param defaultAddress default server address to use if not specified in property @param defaultPort default server port number to use if not found
2685 Resolves hostname and port from configuration properties. @param hostProperty unique property identifier for hostname @param addressProperty unique property identifier for address @param defaultAddressValue fallback value if not found @param addr existing InetSocketAddress object
2686 Resolves file path and creates an FSDataInputStream. @throws IOException if an I/O error occurs
2687 Opens a file stream for reading from the distributed file system. @return CompletableFuture containing FSDataInputStream or null if failed
2688 Initializes an SFTP configuration based on the provided URI and Hadoop Configuration. @param uriInfo SFTP URI with server details @param conf Hadoop Configuration object to store SFTP settings
2689 Establishes an SFTP connection using configuration properties. @throws IOException if connection fails
2690 Calculates function mask using file system configuration.
2691 Opens an input stream to the specified file. @param f Path to the file
2692 Opens a file stream for reading from the distributed file system. @param fd PathHandle to the file
2693 Opens or resumes file output stream with given path.
2694 Creates a new output stream to write data to a file with optional block appending. @param f file path @param appendToNewBlock flag for appending to a new block
2695 Initializes cache with given configuration. @param conf Hadoop Configuration object
2696 Initializes Sorter object with Hadoop configuration and settings. @param fs Hadoop file system @param comparator Raw comparator for sorting key-value pairs @param keyClass Class type of keys in SequenceFile format @param valClass Class type of values in SequenceFile format @param conf Hadoop configuration with sorting properties @param metadata Metadata related to sorting operation
2697 Configures and returns a CompressionOutputStream instance with LZ4 codec settings. @param out OutputStream to write compressed data to @param compressor Compressor algorithm instance
2698 Creates a CompressionInputStream for LZ4 compression. @param in input stream to compress @param decompressor decompressor instance
2699 Returns an LZ4 decompressor instance based on configured buffer size. @return Decompressor object for decompressing LZ4 data
2700 Creates a CompressionOutputStream instance based on configuration settings. @param out OutputStream to write compressed data to @param compressor Compressor object for compression logic
2701 Creates a CompressionInputStream based on whether native Bzip2 library is loaded. @param in input stream to read from @param decompressor Decompressor instance for data processing @return CompressionInputStream instance or throws IOException if an error occurs
2702 Configures and returns a CompressionOutputStream instance for Snappy compression. @param out OutputStream to write compressed data to @param compressor Compressor algorithm instance
2703 Creates a Snappy compressor with the specified direct buffer size. @return Compressor instance
2704 Creates a compression input stream with Snappy codec settings. @param in underlying input stream @param decompressor Decompressor instance
2705 Creates a decompressor with the specified buffer size based on configuration. @return Decompressor instance
2706 Initializes file buffer size from configuration and copies data. @param in input stream source @param out output stream destination @param conf Hadoop configuration object
2707 Calls copyBytes with calculated buffer size from configuration. @param in input stream source @param out output stream destination @param conf Hadoop configuration object @param close whether to close streams after operation (default: false)
2708 Calculates function mask using Configuration object. @param conf configuration settings
2709 Initializes configuration and sets script name and maximum arguments. @param conf system configuration data
2710 Calculates function mask from Hadoop security crypto configuration. @param conf Configuration object containing crypto settings
2711 Calculates function mask for given configuration property. @param ns namespace identifier @param conf Configuration object @return Function mask value or throws exception if invalid
2712 Calculates function mask using Configuration object. @param conf Hadoop configuration instance
2713 Calculates function mask using configuration property IPC ping interval. @param conf client configuration object
2714 Calculates function mask based on RPC timeout configuration. @param conf client configuration
2715 Initializes LineReader with input stream and default buffer size. @param in InputStream to read from @param conf Configuration object for IO settings
2716 Initializes LineReader with input stream and configuration. @param in input stream to read from @param conf configuration object for buffer size and delimiters @param recordDelimiterBytes delimiter bytes for custom records
2717 Calculates function mask for given configuration property with logging. @param name unique property identifier @param defaultValue default value to return if property not found
2718 Calculates and applies FTP connection timeout based on configuration. @param client FTP client instance @param conf Hadoop Configuration object
2719 Retrieves configuration property value as a long with fallback to default value. @param key unique property identifier @param defVal default value if property is not found
2720 Calculates file system configuration property mask. @return function mask value
2721 Logs and returns a calculated function mask for the given configuration property. @param name unique property identifier @param defaultValue default value to return if not found
2722 Retrieves configuration property with default value and logs the result. @param name unique property identifier @param defaultValue default function mask value
2723 Initializes trash settings based on system configuration. @param conf Hadoop Configuration object @param fs FileSystem object @param home Trash directory path
2724 Calculates function mask for nested mount point configuration. @param conf Hadoop configuration object
2725 Creates an LZ4 compressor instance with configuration properties. @param bufferSize buffer size for direct buffers @param useLz4HC enables high-compression mode if true
2726 Retrieves retry policy from configuration. @param conf Hadoop Configuration object @param retryPolicyEnabledKey key for enabled flag config property @param defaultRetryPolicyEnabled default value to return if enabled flag is invalid or missing @param retryPolicySpecKey key for retry policy specification config property @param defaultRetryPolicySpec default retry policy specification to use if not found
2727 Configures server-specific attributes and ACLs for the given servlet context. @param context Servlet context handler @param conf Hadoop configuration object
2728 Calculates and registers servlets with specified configurations. @param configuration Hadoop Configuration object
2729 Retrieves the function mask for a given namespace and configuration. @param namespace unique namespace identifier @param conf Configuration object to retrieve property values from
2730 Initializes a new Client instance with given configuration and socket factory. @param valueClass class of the Writable object being used @param conf client configuration (timeout, fallback settings, etc.) @param factory SocketFactory to create sockets for communication
2731 Retrieves function mask for IPC backoff enable configuration. @param prefix unique property identifier prefix @param conf Hadoop Configuration object
2732 Calculates function mask for given namespace and port based on configuration. @param namespace unique identifier @param port server port number @param conf Configuration object @return boolean value representing IPC backoff enable status
2733 Retrieves and calculates function mask for given configuration property. @param name unique property identifier
2734 Retrieves and calculates function mask for given configuration property. @param name unique property identifier @param defaultValue default value to return if property is invalid or missing
2735 Resolves the file system class for a given scheme and configuration. @param scheme file system protocol identifier @param conf Hadoop Configuration object @return FileSystem Class instance or null if not found
2736 Resolves AbstractFileSystem instance based on URI and configuration. @param uri file system URI @param conf Hadoop Configuration object @return AbstractFileSystem instance or throws UnsupportedFileSystemException if not found
2737 Retrieves call queue class based on namespace and port. @param namespace unique identifier @param port server port number @param conf configuration object @return Class of BlockingQueue with specified type parameter or null if not found
2738 Resolves RpcScheduler instance based on configuration. @param namespace unique identifier for the server @param port port number of the server @param conf Configuration object containing IPC settings @return Class representing an RpcScheduler instance or null if not found
2739 Retrieves function mask Class for given configuration property. @param name unique property identifier @param defaultValue default class to return if not found
2740 Retrieves a FileSystem instance based on the provided URI and configuration. @param uri unique file system identifier @param conf Hadoop configuration object @param key cache key to use for retrieval @return FileSystem object or null if not found
2741 Calculates shutdown timeout duration from configuration. @param conf Configuration object
2742 Retrieves secret key for the given credential name. @param name unique identifier of the credential @return secret key as an array of characters or null if not found
2743 Retrieves configuration properties and initializes masks from input string, returning an array of weights for the given number of priority levels. @param priorityLevels number of priority levels @param ns input string to process @return array of weights or throws exception if invalid
2744 Retrieves filter initializers based on configuration. @param conf Hadoop Configuration instance @return Array of FilterInitializer objects or null if not found
2745 Retrieves function masks for the given name and type U. @param name input string to process @param xface Class<?> of the interface to implement @return List of objects implementing the specified interface or null if not found
2746 Initializes Writer instance with Hadoop configuration and key-value pair serialization settings. @param config Hadoop configuration containing serialization settings @param outStream output stream for writing data @param ownStream flag indicating whether the writer owns the output stream @param key class type of keys to be serialized @param val class type of values to be serialized @param compCodec compression codec for compressing data (optional) @param meta metadata associated with the data being written @param syncIntervalVal synchronization interval value
2747 Calls propagateOptions with calculated masks and configuration properties. @param builder FSBuilder instance to populate @param conf Hadoop Configuration object @param prefix prefix string for configuration property names @param mandatory whether configuration properties are mandatory
2748 Configures FSBuilder with optional and mandatory Hadoop configuration properties. @param builder FSBuilder instance to populate @param conf Hadoop Configuration object @param optionalPrefix prefix string for optional configuration property names @param mandatoryPrefix prefix string for mandatory configuration property names
2749 Performs native library checking with optional all-library check. @param args command-line arguments
2750 Returns the compressor class based on native BZip2 library availability. @return Compressor subclass or null if unavailable
2751 Returns decompressor instance based on native library availability. @return Class of decompressor instance or null if not found
2752 Returns a BZip2 decompressor instance based on native library availability. @return Decompressor object or null if not available
2753 Constructs a HadoopZookeeperFactory instance with default security settings. @param zkPrincipal ZooKeeper principal
2754 Fetches LDAP group information based on user ID and optional GID. @param result SearchResult object containing user data @param c DirContext for LDAP operations @param goUpHierarchy number of levels to traverse up the hierarchy (0 or positive) @return Set<String> collection of group names
2755 Retrieves the CipherSuite instance associated with a given functional mask. @param conf Hadoop configuration object
2756 Establishes a server socket connection with the specified address and configuration. @param socket server socket to bind @param address remote address to connect to @param backlog maximum number of pending connections
2757 Logs configuration property with given name. @param config Hadoop Configuration object @param propertyName configuration key or property name @param out Output writer instance
2758 Verifies existence and permissions of a file for file system operations. @param f Path object representing the file system path
2759 Retrieves and initializes configuration properties for the given SASL authentication type. @param authType SASL authentication type @return server principal string or null if not found
2760 Validates and decomposes a HAR file system URI into its components. @param rawURI input URI to validate @param conf Configuration object (not used in this method) @return validated URI or null if no scheme is found
2761 Resolves file system instance using configuration. @param conf Configuration object
2762 Calculates function mask for the given configuration property. @param name unique property identifier @param conf Configuration object
2763 Wraps file system creation with specified configuration and existing parameters. @param conf Configuration object
2764 Updates file system URI by resolving the path and applying func mask values. @param path input file system Path object
2765 Retrieves and resolves a network address for the given target host with fallback to default address and port. @param hostProperty unique property identifier for the target host @param addressProperty configuration property name (optional) @param defaultAddressValue default server address to use if not specified in property @param defaultPort default server port number to use if not found
2766 Creates an SFTP file output stream with specified permissions and buffering. @param f Path to the file to be created @param permission FsPermission object for file creation @param overwrite whether to overwrite existing files @param bufferSize buffer size for writing data @param replication replication factor for storing data @param blockSize block size for storing data @param progress Progressable object for monitoring progress @return FSDataOutputStream object for writing to the file
2767 Constructs a FutureDataInputStreamBuilderImpl instance with the specified file system and path. @param fileSystem Hadoop file system context @param path required file system path
2768 Initializes FutureDataInputStreamBuilderImpl with a given file system and path handle. @param fileSystem required file system context @param pathHandle required path handle for the file system
2769 Opens a file in the Hadoop file system using specified policies and options. @param instance DynamicWrappedIO object @param fs FileSystem object @param status FileStatus object @param readPolicies String of read policies @return FSDataInputStream object or throws IOException if an error occurs
2770 Verifies if the rolling file system sink supports appending. @param fs Hadoop filesystem instance @return true if append is supported, false otherwise
2771 Initializes Sorter object with Hadoop configuration and settings. @param fs Hadoop file system @param comparator Raw comparator for sorting key-value pairs @param keyClass Class type of keys in SequenceFile format @param valClass Class type of values in SequenceFile format @param conf Hadoop configuration with sorting properties
2772 Initializes Bzip2 compressor with configuration settings. @param conf Configuration object with Bzip2 settings
2773 Initializes compressor state and buffers based on Bzip2 configuration. @param conf Configuration object with Bzip2 settings
2774 Initializes SequenceFile reader with specified version and compression settings. @param tempReader temporary flag for reader mode @throws IOException if I/O error occurs during initialization
2775 Initializes compressor with new Zstandard configuration. @param conf configuration settings
2776 Calculates function mask for given configuration property. @param conf TFile configuration object
2777 Initializes a WBlockState instance with compression algorithm, output stream, buffered output, and configuration. Calculates positions and initializes compressor. @param compressionAlgo the compression algorithm to use @param fsOut the output stream for writing data @param fsOutputBuffer the buffer for writing data @param conf the configuration object for calculating positions
2778 Calls parent and child methods to apply configuration and retrieve raw mapping. @param conf system configuration data
2779 Retrieves and initializes the name of a dependency script from configuration. @param conf system configuration data
2780 Creates an Options object from Hadoop Configuration. @param conf Hadoop configuration to load options from
2781 Calculates function mask based on RPC timeout configuration. @param conf client configuration
2782 Establishes an FTP connection to the specified server based on configuration properties. @return FTPClient instance or null if login fails
2783 Retrieves configuration property value as a long with fallback to default value. @param key unique property identifier @param defVal default value if property is not found
2784 Returns deprecated function mask value. @throws IOException if an I/O error occurs
2785 Calculates file system configuration property mask based on provided path.
2786 Moves a bad file to the 'bad_files' directory and creates necessary directories if they do not exist. @param p input file system path @param in FSDataInputStream object for reading from the original file location @param inPos position of the input stream @param sums FSDataInputStream object for reading from the sums file @param sumsPos position of the sums input stream
2787 Constructs a CachingGetSpaceUsed instance using the provided builder. @throws IOException if an I/O error occurs during construction
2788 Reads record from SequenceFile for uncompressed data. @param buffer DataOutputBuffer to write record to @return key length or -1 if end of file reached
2789 Retrieves retry policy for Hadoop operations with linear random retries. @param conf Hadoop Configuration object @param retryPolicyEnabledKey key for enabled flag config property @param defaultRetryPolicyEnabled default value to return if enabled flag is invalid or missing @param retryPolicySpecKey key for retry policy specification config property @param defaultRetryPolicySpec default retry policy specification to use if not found @return WrapperRetryPolicy object wrapping MultipleLinearRandomRetry policy, or TRY_ONCE_THEN_FAIL if no valid policy found
2790 Initializes a new Client instance with given configuration and default socket factory. @param valueClass class of the Writable object being used @param conf client configuration (timeout, fallback settings, etc.)
2791 Retrieves a cached or creates a new client instance based on configuration and socket factory. @param conf client configuration @param factory SocketFactory to create sockets for communication @param valueClass class of the Writable object being used @return Client instance
2792 Filters incompatible credential providers from the configuration. @param config Hadoop Configuration object @param fileSystemClass FileSystem Class instance to check for recursive dependencies @return updated Configuration object or original if no changes were made
2793 Resolves AbstractFileSystem instance based on URI and configuration. @param uri file system URI @param conf Hadoop Configuration object @return AbstractFileSystem instance or throws UnsupportedFileSystemException if not found
2794 Validates server instance configuration and creates a new Server instance. @throws IOException if an I/O error occurs @throws HadoopIllegalArgumentException if any required settings are invalid
2795 Retrieves a custom TrashPolicy instance based on configuration settings. @param conf Hadoop Configuration instance @param fs FileSystem object @param home Path to the user's home directory @return Customized TrashPolicy object or default if not found
2796 Creates a TrashPolicy instance based on configuration settings. @param conf Hadoop Configuration object @param fs HDFS file system instance
2797 Retrieves suitable DomainNameResolver class based on configuration settings. @param conf Hadoop Configuration instance @param configKey unique property identifier for resolver selection
2798 Resolves SASL properties based on Hadoop configuration. @param conf Hadoop Configuration instance
2799 Resolves SASL property and attempts to load the corresponding resolver class. @param saslPropsResolverKey unique identifier for the SASL property
2800 Retrieves function mask class for impersonation provider based on configuration property. @param conf Hadoop Configuration instance
2801 Executes shutdown hooks with timeout and logging. @param conf Configuration object
2802 Calculates function mask for given configuration property. @param name unique property identifier
2803 Retrieves and creates a RawErasureEncoder instance based on the provided configuration and erasure coding options. @param conf Configuration object @param codec name of the erasure coding factory @param coderOptions ErasureCoderOptions object
2804 Creates a RawErasureDecoder instance based on configuration, codec name, and coder options. @param conf Configuration object @param codecName name of erasure coding factory @param coderOptions ErasureCoderOptions object
2805 Updates the call queue and scheduler with specified configuration. @param schedulerClass RpcScheduler subclass to configure @param queueClassToUse class of the queue to create @param maxSize maximum length of the queue @param ns namespace for the queue and scheduler configuration @param conf system configuration for the queue creation
2806 Initializes a FairCallQueue with specified priority levels, capacity, and configuration. @param priorityLevels number of priority levels (must be at least 1) @param capacity total capacity to be distributed among queues @param ns input string to process @param capacityWeights weights for each queue's capacity @param serverFailOverEnabled whether to enable server failover @param conf configuration object
2807 Masks configuration property with a Base64 encoded string representation of the item. @param conf configuration object @param item item to be serialized @param keyName name of the deprecated key to be masked
2808 Retrieves and serializes item from configuration using DefaultStringifier. @param conf configuration object @param keyName unique item identifier @param itemClass type of the item to deserialize @return K serialized item or throws IOException if not found
2809 Masks a configuration property with an array of items and separator. @param conf configuration object @param items array of objects to be masked @param keyName the deprecated key to be masked
2810 Retrieves a collection of items from the configuration using the given key and class type. @param conf configuration object @param keyName unique identifier for the item collection @param itemClass class type of the items in the collection @return array of items or null if not found
2811 Creates a Writer instance with Hadoop configuration and file serialization settings. @param conf Hadoop configuration containing serialization settings @param name Path of the file to write to @param keyClass class type of keys to be serialized @param valClass class type of values to be serialized @param bufferSize buffer size for writing data @param replication replication factor for storage @param blockSize block size for writing data @param progress Progressable object to track writing progress @param metadata metadata associated with the data being written
2812 Applies mask operation using serialization/deserialization and applies the result to the destination. @param conf Hadoop configuration @param src Source object to be modified @param dst Destination object to receive the result @return Modified destination object
2813 Configures FSBuilder with Hadoop configuration properties. @param builder FSBuilder instance to populate @param conf Hadoop Configuration object @param optionalPrefix prefix string for optional config property names @param mandatoryPrefix prefix string for mandatory config property names
2814 Retrieves LDAP group information for a given user ID and optional hierarchy traversal. @param user unique user identifier @param goUpHierarchy number of levels to traverse up the hierarchy (0 or positive) @return Set<String> collection of group names, or empty set if not found
2815 Masks sensitive configuration properties based on format and property name. @param conf Hadoop Configuration object @param out Writer object for output @param format JSON or XML format (case-sensitive) @param propertyName unique property identifier (null for all properties)
2816 Initializes authentication filters within the given FilterContainer. @param container Hadoop FilterContainer object @param conf Hadoop Configuration object
2817 Initializes a SASL client for authentication based on the specified authentication type. @param authType SaslAuth object representing the authentication method
2818 Creates a new FileSystem instance. @param uri file system URI @param conf Hadoop configuration settings @return newly created FileSystem object or throws IOException if creation fails
2819 Initializes the ViewFileSystem with a URI and Configuration. @param theUri unique file system identifier @param conf Hadoop configuration object
2820 Initializes the filter file system with a new configuration. @param name URI identifier @param conf Hadoop Configuration object
2821 Resolves file system URI by applying func mask values to the input Path object. @param path File system Path object to be resolved
2822 Applies file system URI updates and functional mask values to input path. @param p input file system Path object
2823 Calls Hadoop FileSystem's m1 method to perform an operation on the given file system Path object. @param path input file system Path object
2824 Initializes AvroFSInput with file context and path. @param fc FileContext for Hadoop filesystem operations @param p Path to open as Avro input stream
2825 Copies a file or directory from source to destination with optional overwrite and delete source options. @param src input file system path @param dst output file system path @param deleteSource whether to delete the source after copying (default: false) @param overwrite whether to overwrite existing files at destination (default: false)
2826 Initializes the builder with a Hadoop file system and target file path. @param fileSystem Hadoop file system context @param path required file system path
2827 Initializes FSDataInputStreamBuilder with a given file system and path handle. @param fileSystem required file system context @param pathHandle required path handle for the file system
2828 Opens a file in Hadoop file system using specified policies and options. @param fs FileSystem object @param status FileStatus object @param readPolicies String of read policies
2829 Loads key store and retrieves file permissions. @param path Path to the file @param backupPath Backup location for keystore operations @return FsPermission object representing file's permissions or null if not found
2830 Initializes Sorter object with Hadoop configuration and settings for sorting SequenceFile format. @param fs Hadoop file system @param keyClass Class type of keys in SequenceFile format @param valClass Class type of values in SequenceFile format @param conf Hadoop configuration with sorting properties
2831 Returns a Bzip2 compressor instance, either native or dummy, based on library availability. @param conf Configuration object with Bzip2 settings
2832 Initializes SequenceFile reader with specified version and compression settings. @param tempReader temporary flag for reader mode
2833 Creates a compressed output stream using Zstandard algorithm. @param out OutputStream to write compressed data to @param compressor Compression algorithm instance
2834 Calculates and returns a Compressor with optimized function mask. @return Compressor object configured for optimal Zstandard compression performance.
2835 Initializes Zstandard compression stream with input and decompressor. @param in underlying input stream @param decompressor Decompressor object
2836 Calculates function mask and initializes decompressor. @return ZStandardDecompressor object with calculated function mask.
2837 Creates a Data Block appender for writing data. @return BlockAppender instance or throws IllegalStateException if invalid state
2838 Initializes a ScriptBasedMapping instance from system configuration data. @param conf system configuration data
2839 Initializes script-based mapping with dependencies using configuration settings. @param conf system configuration data
2840 Parses command-line arguments for key management functionality. @param args array of strings representing command-line input @return 0 on successful parsing, non-zero otherwise
2841 Creates a ConnectionId object with given parameters and configuration. @param addr network address @param protocol communication protocol class @param ticket user credentials @param rpcTimeout RPC timeout in milliseconds @param connectionRetryPolicy retry policy for connections @param conf client configuration object
2842 Creates a file on the FTP server with specified permissions and attributes. @param file Path object representing the file to create @param permission FsPermission object defining file permissions (default: rwxr-xr-x) @param overwrite whether to overwrite existing file (default: false) @param bufferSize buffer size for data transfer @param replication file replication factor @param blockSize block size for data transfer @param progress Progressable instance for tracking progress @return FSDataOutputStream instance for writing to the created file
2843 Retrieves server defaults based on given Path. @param p file system path
2844 Creates an FSDataOutputStream for writing to a file with specified parameters. @param f Path of the file to write to @param overwrite whether to overwrite existing files
2845 Wraps the file creation call with default parameters for buffer size and replication. @param f Path to the file @param progress Progressable object to track writing progress
2846 Creates a buffered output stream for writing to the specified file with default buffer size and calculated replication. @param f Path of the file to write to @param replication replication factor for storage
2847 Creates an FSDataOutputStream for writing to a file with specified parameters. @param f the Path of the file to write to @param replication replication factor for storage @param progress Progressable object to track writing progress
2848 Opens an FSDataOutputStream with specified parameters and default replication settings. @param f Path of the file to write to @param overwrite whether to overwrite existing files @param bufferSize buffer size for writing data
2849 Creates an FSDataOutputStream for writing to a file with specified parameters. @param f the Path of the file to write to @param overwrite whether to overwrite existing files @param bufferSize buffer size for writing data @param progress Progressable object to track writing progress
2850 Constructs and configures FSDataOutputStreamBuilder with a file system, path, and default settings. @param fileSystem Hadoop file system instance @param p required file system path
2851 Reads record from SequenceFile for compressed data. @param key Writable object representing the key @return true if successful, false otherwise
2852 Reads a record from SequenceFile for compressed data. @param key input key to deserialize @return deserialized key object or null if end of file reached
2853 Initializes Invoker with remote service details and client configuration. @param protocol Class containing RPC protocol information @param connId unique connection identifier @param conf client configuration @param factory SocketFactory for communication @param alignmentContext context for data alignment
2854 Retrieves cached client instance or creates new one based on configuration. @param conf client configuration
2855 Retrieves cached or creates new client instance based on configuration and socket factory. @param conf client configuration @param factory SocketFactory to create sockets for communication
2856 Initializes Invoker with given protocol, connection ID, configuration, socket factory, and alignment context. @param protocol Class<?> containing RPC protocol information @param connId unique ConnectionId for remote service @param conf client configuration @param factory SocketFactory to create sockets for communication @param alignmentContext AlignmentContext object
2857 Checks if a function mask value is supported across different protocol versions. @param rpcProxy RPC proxy object @param protocol protocol interface to validate @param rpcKind the RPC kind string @param version current protocol version @param methodName method name to check @return true if method hash is found in supported methods, false otherwise
2858 Initializes Trash instance with HDFS file system and configuration settings. @param fs HDFS file system instance @param conf Hadoop configuration to be used for trash policy creation
2859 Initializes network topology with provided configuration and default node factory. @param conf Hadoop Configuration instance
2860 Initializes SASL RPC client with user credentials and configuration. @param ugi UserGroupInformation instance @param protocol Class of the authentication protocol to use @param serverAddr InetSocketAddress of the remote server @param conf Hadoop Configuration instance for resolving SASL properties
2861 Initializes impersonation provider with proxy user prefix and configuration. @param conf Hadoop Configuration instance @param proxyUserPrefix unique prefix for proxy users
2862 Registers a shutdown hook with specified priority. @param shutdownHook task to execute during system shutdown @param priority execution priority (lower values have higher priority)
2863 Calculates function mask for given configuration property. @param name unique property identifier
2864 Retrieves user password from configuration based on given alias. @param conf LDAP configuration @param alias unique user identifier @param defaultPass default password if not found in config @return retrieved password or default value
2865 Fetches authentication information for a given Hadoop configuration key. @param conf Hadoop Configuration object @param configKey unique property identifier @return List<ZKAuthInfo> or empty list if input is null, or throws IOException on failure.
2866 Constructs a DecayRpcScheduler instance with the given configuration. @param numLevels total number of priority levels @param ns unique namespace identifier @param conf Configuration object containing scheduling parameters
2867 Creates a masked copy of the input object using serialization/deserialization. @param orig Input object to be modified @param conf Hadoop configuration @return Masked copy of the input object or throws RuntimeException on error
2868 Writes configuration properties to XML output stream. @param out OutputStream object
2869 Selects the first valid SASL authentication method from the list. @param authTypes collection of available SASL authentication types @return selected SaslAuth object or null if none found
2870 Initializes a DelegateToFileSystem instance for an FTP file system with the given URI and configuration. @param theUri file system URI @param conf Configuration object
2871 Initializes a RawLocalFs instance with given URI and configuration. @param theUri file system URI @param conf Configuration object
2872 Initializes the filter file system with a new configuration and performs additional setup. @param name URI identifier @param conf Hadoop Configuration object
2873 Constructs MultipartUploaderBuilderImpl with a FileSystem and Path, initializing configuration parameters. @param fileSystem Hadoop file system instance @param p required file system path
2874 Initializes a new PathData object from a file system, path string, and FileStatus. @param fs Hadoop FileSystem instance @param pathString input path string to validate @param stat FileStatus object containing path metadata
2875 Evaluates function mask for the given Hadoop file system path and capability. @param path File system path to evaluate @param capability Capability string associated with the path @return True if FS_SYMLINKS is enabled, false otherwise
2876 Resolves file system URI by applying func mask values to the input Path object. @param path File system Path object to be resolved @return Resolved Path object or throws IOException if failed
2877 Resolves file system path with optional scheme swapping. @param path input Path object to be resolved @return the resolved Path object or null if not found
2878 Resolves the status of a file or directory, potentially following symbolic links. @param item PathData object containing file system data @param depth current recursion depth (for link resolution) @return FileStatus object describing the resolved file/directory
2879 Calculates and returns a masked file system path. @param path input file system Path object
2880 Copies a file or directory from source to destination with default overwrite and delete options. @param src input file system path @param dst output file system path
2881 Creates a builder for fetching data from the specified Hadoop file system location. @param fileSystem Hadoop file system context @param path required file system path
2882 Initializes FSDataInputStreamBuilder with a given file system and path handle. @param fileSystem required file system context @param pathHandle required path handle for the file system
2883 Initializes FsPermission based on file system operations. @param oldPath original file path @param newPath new file path @return FsPermission object representing permissions or null on failure
2884 Returns a native or dummy BZip2 compressor instance based on library availability. @return Compressor object representing the BZip2 compressor
2885 Retrieves the block reader for a specific function mask. @param name unique function mask identifier @return BlockReader object or throws exception if not found
2886 Retrieves a BlockReader instance for the specified block index. @param blockIndex the index of the block to access
2887 Closes the writer, writing metadata and magic bytes if no errors occurred. @throws IOException if an I/O error occurs
2888 Retrieves compression algorithm instance by compressor name. @param compressionName unique algorithm identifier
2889 Prepares metadata block with default compression algorithm. @param name function mask name
2890 Initializes block appender using m1() from Writer BCF. @throws IOException if an I/O error occurs
2891 Creates an FSDataOutputStream for writing to file 'f'. @param f Path of the file to write to
2892 Tries to open a file stream for writing, attempting different IDs if the initial path is occupied. @param initial initial Path object
2893 Opens or resumes file output stream with specified parameters, handling IOExceptions. @param targetFile Path of the file to write to
2894 Serializes object to JSON byte array and writes it to file with specified parameters. @param instance T object to serialize @param path Path of the file to write to @param overwrite whether to overwrite existing files @param fs FileSystem object
2895 Creates a Writer instance with default settings for writing to a file. @param fs Hadoop FileSystem object @param conf Hadoop configuration containing serialization settings @param name Path to the output file @param keyClass Class type of keys to be serialized @param valClass Class type of values to be serialized @param progress Progressable object to track writing progress @param metadata Metadata associated with the data being written
2896 Calculates file system function mask based on given path. @param f Path to the file
2897 Constructs and configures FSDataOutputStreamBuilder with a file system and path. @param fileSystem Hadoop file system instance @param p required file system path
2898 Retrieves function mask Class instance from cache or dynamically loads it for compressed data. @param key Writable object representing the key @return true if successful, false otherwise
2899 Initializes Trash instance with configuration settings. @param conf Hadoop configuration to be used for trash policy creation
2900 Resolves domain name for given URI using configured resolver. @param conf Hadoop Configuration instance @param uri input URI with resolved hostname @param configKey unique property identifier for resolver selection
2901 Returns a synchronized instance of the Groups class, initializing it with Hadoop configuration if not already created. @param conf Hadoop Configuration object
2902 Initializes and returns a cached instance of Groups. @param conf Hadoop Configuration object
2903 Initializes impersonation provider with proxy user prefix and configuration. @param conf Hadoop Configuration instance
2904 Checks file existence and updates the delete-on-exit list. @param f input file system path
2905 Registers service shutdown hook with specified priority. @param priority execution priority (lower values have higher priority)
2906 Retrieves and logs function name mask, installs UNIX signal handlers, and registers a shutdown hook with specified priority. @param clazz class to retrieve function name from @param args array of arguments for formatting startup message @param log logging instance for recording events
2907 Configures server-side SSL/TLS settings using factory methods. @throws IOException if configuration properties are missing or invalid
2908 Configures and initializes SSL factory with provided mode, keystore type, and reload interval. @param mode SSLFactory.Mode object @param keystoreType file-based keystore type @param storesReloadInterval time interval for reloading keystores
2909 Fetches authentication information from ZooKeeper using Hadoop configuration. @param conf Hadoop Configuration object
2910 Retrieves LDAP group information for a given user. @param user unique user identifier
2911 Initializes configuration with default loading enabled and writes properties to XML output stream.
2912 Negotiates SASL authentication with server and returns the selected authentication method. @param ipcStreams input/output streams for communication @return AuthMethod object representing the negotiated authentication type
2913 Initializes a new PathData object from a file system and path string. @param fs Hadoop FileSystem instance @param pathString input path string to validate
2914 Retrieves an array of PathData objects representing files or directories with specific mask. @return PathData[] array containing path information for matching items
2915 Evaluates function mask for the given Hadoop file system and checks for directory inconsistencies. @param fs Hadoop file system @param path File system path to evaluate @param e FileNotFoundException instance
2916 Determines whether the given Hadoop file system path supports read-only connector capabilities. @param path File system path to evaluate @param capability Capability string associated with the path @return True if FS_READ_ONLY_CONNECTOR is enabled, false otherwise
2917 Determines if the given file system path has a specified capability. @param path Path to evaluate @param capability Capability string associated with the path @return True if the path has the capability, false otherwise
2918 Resolves file system URI by applying func mask values to the input Path object. @param fs Hadoop FileSystem instance @param path File system Path object to be resolved
2919 Fetches data from Hadoop file system location. @param path required file system path
2920 Initializes FSDataInputStreamBuilder with given file system and path handle. @param pathHandle required path handle for the file system
2921 Initializes key store with masked file system paths and loads permissions. @throws IOException if any exception occurs during the process
2922 Initializes the TFileIndex with entries from a DataInput stream and sets up the function mask.
2923 Retrieves metadata block reader using the specified function mask. @param name unique function mask identifier
2924 Initializes a Reader instance from the given FSDataInputStream, file length, and configuration. @param fin input stream containing encoded data @param fileLength total file size in bytes @param conf Hadoop configuration object
2925 Starts and writes data to a TFile Meta Block. @param name unique block identifier @param compressName compression algorithm instance @return output stream for further writing operations
2926 Closes the TFile by finalizing metadata and index blocks, optionally writing magic bytes if no errors occurred. @throws IOException if an I/O error occurs.
2927 Starts a BCF metadata block with the given name. @param name function mask name
2928 Initializes data block and returns DataOutputStream for appending key-value pairs. @throws IOException if an I/O error occurs
2929 Copies a file from the specified source to the target location, handling overwrites and existing directories. @param src source file @param dstFS Hadoop filesystem instance @param dst target path @param deleteSource whether to delete the source file after copying @param conf Hadoop configuration object @return true if successful, false otherwise
2930 Calculates the functional mask value for a given multipart upload and file path. @param multipartUploadId unique identifier for the multipart upload @param filePath input file system path to process @param handleMap map of part handles to their corresponding values @return PathHandle object representing the calculated functional mask
2931 Creates an FSDataOutputStream for writing to the specified file. @param file Path of the file to write to @param permission File system permissions to apply
2932 Creates a Writer instance for writing to a file with specified Hadoop configuration and serialization settings. @param fs Hadoop file system @param conf Hadoop configuration containing serialization settings @param name Path of the file to write to @param keyClass class type of keys to be serialized @param valClass class type of values to be serialized
2933 Creates or appends to a log file based on the allowAppend flag. @throws IOException if an I/O error occurs during file operations
2934 Retrieves value associated with given key from MapFile. @param key WritableComparable object representing the key @param val Writable object to store the retrieved value
2935 Creates a new RPC connection with specified settings. @param protocol target protocol class @param clientVersion client version @param addr server address @param ticket user identity @param conf configuration @param factory socket factory @param rpcTimeout RPC timeout @param fallbackToSimpleAuth authentication fallback flag @param alignmentContext alignment context @return ProtocolProxy object for the established connection
2936 Initializes Groups instance with default Hadoop configuration. @return synchronized Groups object
2937 Initializes security settings and configuration properties. @param conf Hadoop Configuration object @param overrideNameRules whether to override name rules
2938 Initializes an empty AccessControlList instance.
2939 Initializes access control list from provided ACL string. @param aclString string representation of ACL parts (user and group strings)
2940 Initializes access control list with user and group strings. @param users string of users @param groups string of groups
2941 Initializes impersonation provider with proxy user prefix and configuration.
2942 Configures and initializes SSL factory with provided mode, keystore type, and reload interval. @param mode SSLFactory.Mode object
2943 Initializes a ZooKeeper client with specified configuration settings. @param authInfos list of authentication information @param sslEnabled whether SSL is enabled
2944 Retrieves LDAP group information for a given user and applies rule-based case transformation. @param user unique user identifier
2945 Initializes and configures the metric system with a given prefix. @param prefix unique identifier for metrics
2946 Constructs a new PathData object with an appended file extension. @param extension file name suffix to be added
2947 Constructs a new PathData object from parent path and child directory. @param child child directory information
2948 Updates function mask for the given PathData object.
2949 Determines whether the given Hadoop file system path supports read-only connector capabilities. @param path File system path to evaluate @param capability Capability string associated with the path @return True if FS_READ_ONLY_CONNECTOR is enabled, false otherwise
2950 Determines whether the given Hadoop file system path supports read-only connector capabilities. @param path File system path to evaluate @param capability Capability string associated with the path @return True if FS_READ_ONLY_CONNECTOR is enabled, false otherwise
2951 Determines whether the given path and capability support FS_APPEND or FS_CONCAT operations. @param path Hadoop file system path @param capability capability string associated with the path @return true if neither FS_APPEND nor FS_CONCAT are enabled, false otherwise
2952 Retrieves file status array by delegating to underlying MRNflyNodes. @param f Path to file or directory @return FileStatus[] array of statuses from all nodes @throws FileNotFoundException when all nodes report not found
2953 Copies file contents from source to destination Hadoop filesystems. @param srcFS source file system @param srcStatus source file status @param dstFS destination file system @param dst target path @param deleteSource whether to delete source after copy @param overwrite whether to overwrite existing files at destination @param conf Hadoop configuration object @return true if successful, false otherwise
2954 Recursively copies or moves a file or directory from the Hadoop file system to a local destination. @param srcFS Hadoop file system object @param srcStatus File status of the source file or directory @param dst Local destination path @param deleteSource whether to delete the source after copy/move operation @param conf Hadoop configuration object
2955 Retrieves file status with specified read policy. @param policy the policy to apply when reading
2956 Initializes a FSDataInputStream to read from the specified file in Hadoop. @param fs FileSystem instance @param file Path to the file to be read @param bufferSize Buffer size for data reading @param length Optional file length (negative or 0 for no length) @return initialized FSDataInputStream object
2957 Fetches and deserializes data from Hadoop file system location. @param fs Hadoop filesystem instance @param path required file system path @param status optional FileStatus object or null to reset @return object of type T, or throws IOException if serialization fails
2958 Retrieves metadata from TFileIndex. @return raw comparable object
2959 Retrieves metadata from TFile index using function mask. @return RawComparable object or null if not found
2960 Retrieves the block index for a given key in a sorted TFile index. @param key RawComparable object to search for @param greater whether to seek for keys greater than or equal to the provided key @return block index or -1 if not found
2961 Retrieves the function mask for a given offset. @param offset unique identifier for the block region @return RawComparable object or null if not found
2962 Initializes the Reader object with input stream, file length, and configuration. @param fsdis FSDataInputStream to read from @param fileLength total size of the TFile in bytes @param conf Hadoop configuration
2963 Fetches and initializes block reader for given index, updating lease count and cursor position. @param blockIndex index of the block to access
2964 Calculates function mask for given key and value buffers. @param key byte array containing key data @param koff offset into key buffer @param klen length of key in bytes @param value byte array containing value data @param voff offset into value buffer @param vlen length of value in bytes
2965 Retrieves the middle key from the sorted function mask, or null if empty.
2966 Masks data in the MapFile based on the input key. @param key WritableComparable object representing the key
2967 Fetches function mask based on given key and before flag. @param key WritableComparable object to compare @param before true for seeking position before key, false otherwise @return int value of comparison or 1 if successful
2968 Computes a mask value by iterating through input readers, processing key-value pairs, and writing the sorted entries to output.
2969 Creates a new RPC connection with specified settings. @param protocol target protocol class @param clientVersion client version @param addr server address @param ticket user identity @param conf configuration @param factory socket factory @param rpcTimeout RPC timeout @param connectionRetryPolicy retry policy for connections
2970 Establishes a new RPC connection with specified settings. @param protocol target protocol class @param clientVersion client version @param connId unique connection identifier @param conf configuration @param factory socket factory @param alignmentContext alignment context @return ProtocolProxy object for the established connection
2971 Resolves Hadoop File System path using the Trash configuration. @return Path object
2972 Invokes trash policy evaluation on the given file system path. @param path file system path to apply trash policy to
2973 Ensures security settings are initialized and configuration is available.
2974 Initializes security settings and configuration properties. @param conf Hadoop Configuration object
2975 Handles function mask exceptions by logging and updating service exit code. @param conf Service configuration @param instance Hadoop service instance to be managed @param processedArgs List of command-line arguments that have been processed @param addShutdownHook Flag indicating whether to add shutdown hook @param execute Flag indicating whether to execute the service @return Exit code of the launched service or 0 on failure
2976 Initializes ZooKeeper client configuration with authentication. @param authInfos list of authentication information
2977 Initializes LocalFs with configuration settings and a specific URI. @param theUri local file system URI
2978 Applies functional mask to TargetFileSystem state while writing data to a file. @param in input stream source @param target PathData object containing file information
2979 Copies file from source to destination Hadoop filesystems. @param srcFS source file system @param src source path @param dstFS destination file system @param dst target path @param deleteSource whether to delete source after copy @param overwrite whether to overwrite existing files at destination @param conf Hadoop configuration object @return true if successful, false otherwise
2980 Fetches the maximum file modification time from a list of MRNflyNodes, updates node status and topology accordingly. @param mrNodes array of MRNflyNode instances @param f input file path @param bufferSize buffer size for data transfer @return FSDataInputStream object or null if not found
2981 Recursively copies or moves a file from the Hadoop file system to a local destination. @param srcFS Hadoop file system object @param src Path of the source file @param dst Local destination path @param deleteSource whether to delete the source after copy/move operation @param conf Hadoop configuration object
2982 Returns an FSDataInputStream with sequential read policy. @param policy ignored in this implementation
2983 Deserializes data from Hadoop file system location. @param fs Hadoop filesystem instance @param path required file system path @return object of type T, or throws IOException if serialization fails
2984 Calculates the function mask based on given offset. @param offset unique identifier for block region
2985 Retrieves mask value using m1 function at current TFile location. @throws IOException if an I/O error occurs
2986 Initializes a Scanner object to read and navigate TFile data within the specified range. @param reader Reader object for accessing TFile data @param begin starting Location object defining the beginning of the scan @param end ending Location object defining the end of the scan
2987 Validates location and updates scanner state accordingly. @param l Location object to validate
2988 Fetches function mask value associated with key-value entries. @throws IOException on I/O error
2989 Calculates function mask for given key and value buffers. @param key byte array containing key data @param value byte array containing value data
2990 Fetches function mask based on given key. @param key WritableComparable object to compare
2991 Fetches function mask based on given key and before flag, returning the next key if valid. @param key WritableComparable object to compare @param val Writable object for configuration and reading @param before true for seeking position before key, false otherwise @return WritableComparable object representing the next key or null if invalid
2992 Creates a UserGroupInformation instance with the given user and default authentication method. @param user unique user identifier
2993 Creates a UserGroupInformation instance with the given user and real user. @param user username @param realUser actual user credentials @return UserGroupInformation object
2994 Retrieves group information for a given user, handling potential IO exceptions. @param none @return List of strings representing user's group membership
2995 Retrieves set of groups for current user using cached mappings and negative caching. @throws IOException if an I/O error occurs while retrieving the group set
2996 Fetches UserGroupInformation by authenticating the subject with provided login parameters. @param subject user authentication context @param params LoginParams instance for Kerberos principal and keytab values @return UserGroupInformation object or throws KerberosAuthException if authentication fails
2997 Updates service authorization based on configuration and policy. @param conf Configuration object @param provider PolicyProvider instance
2998 Validates access based on user information and remote IP address. @param user UserGroupInformation object @param remoteAddress user's remote IP address
2999 Authorizes user access based on group information and remote address. @param user UserGroupInformation object @param remoteAddress client IP address
3000 Launches a service with specified configuration and options. @param conf Service configuration @param processedArgs List of command-line arguments that have been processed @param addShutdownHook Flag indicating whether to add shutdown hook @param execute Flag indicating whether to execute the service
3001 Initializes ZooKeeper client configuration with authentication. @param authInfos list of authentication information
3002 Configures file attributes and permissions for the destination while preserving raw extended attributes if applicable. @param src source PathData object @param target destination PathData object @throws IOException on failure
3003 Copies file from source to destination Hadoop filesystems. @param srcFS source file system @param src source path @param dstFS destination file system @param dst target path @param deleteSource whether to delete source after copy @param overwrite whether to overwrite existing files at destination @param conf Hadoop configuration object @return true if successful, false otherwise
3004 Fetches an FSDataInputStream for the specified file path. @param f Path to the file @param bufferSize Buffer size for data transfer @return FSDataInputStream object or null if not found @throws IOException when file operation fails
3005 Creates a Scanner object to read TFile data within the masked range. @return Scanner object or null if creation fails
3006 Returns a record count mask from TFile metadata within the specified range. @param beginRecNum starting record number @param endRecNum ending record number @return long record count mask value
3007 Initializes a Scanner object to read and navigate TFile data within the specified range. @param reader Reader object for accessing TFile data @param offBegin starting offset defining the beginning of the scan @param offEnd ending offset defining the end of the scan
3008 Validates location and updates scanner state using beginLocation. @param beginLocation Location object to validate
3009 Checks if function mask is enabled for given key. @param key WritableComparable object to compare
3010 Invokes function mask retrieval with default before flag. @param key WritableComparable object to compare @param val Writable object for configuration and reading
3011 Checks if authentication is enabled using SIMPLE method. @param AuthenticationMethod target authentication method
3012 Authenticates user logout and initiates parent login process. @throws KerberosAuthException if authentication fails
3013 Retrieves user group masks based on cached group mappings.
3014 Checks if a user has access based on wildcard permissions and user/group mappings. @param ugi UserGroupInformation object @return true if user has access, false otherwise
3015 Authenticates a subject using Kerberos principal and keytab values. @param subject user authentication context
3016 Validates access based on user information and remote IP address. @param user UserGroupInformation object @throws AuthorizationException if access is denied
3017 Authenticates and authorizes the current connection based on user information. @throws RpcServerException if authentication fails
3018 Validates source file attributes and destinations for copying. @param src source PathData object @param dst destination PathData object @throws IOException on failure or invalid source attributes
3019 Copies file from source to destination Hadoop filesystems. @param delSrc whether to delete source after copy @param src source path @param dst target path
3020 Copies file from source to destination ChecksumFileSystem. @param delSrc whether to delete source after copy @param src source path @param dst target path
3021 Initializes a Scanner to read TFile data within a specified byte range. @param offset starting offset of the scan @param length length of the data to be scanned
3022 Initializes a Scanner object with the specified reader and key bounds. @param reader Reader object for accessing TFile data @param beginKey starting RawComparable key defining the beginning of the scan (optional) @param endKey ending RawComparable key defining the end of the scan (optional)
3023 Validates location using RawComparable and updates scanner state. @param key RawComparable object to search for @param beyond whether to seek for keys greater than or equal to the provided key
3024 Validates data block location using a ByteArray instance. @param key byte array containing the key to search for @param keyOffset starting position of the key in the buffer @param keyLen length of the key slice
3025 Validates key location and updates scanner state. @param key byte array to search for @param keyOffset starting position in the buffer @param keyLen length of the slice to be managed
3026 Retrieves function mask value associated with the given key. @param key unique WritableComparable identifier @param val Writable object to be configured and read (if applicable) @return Writable object containing the function mask value or null if not found
3027 Creates a ProtocolProxy instance for the specified protocol and configuration. @param protocol target protocol @param clientVersion client version @param conf Hadoop Configuration instance @param factory SocketFactory object @param alignmentContext AlignmentContext object @return ProtocolProxy object
3028 Creates and returns a ProtocolProxy instance for the specified protocol, configuration, and authentication details. @param protocol target protocol class
3029 Creates a ProtocolProxy instance for the specified protocol and parameters. @param protocol target protocol class @param clientVersion client version @param addr remote address @param ticket user authentication information @param conf Hadoop Configuration object @param factory socket factory @param rpcTimeout RPC timeout in milliseconds @param connectionRetryPolicy retry policy for connections @param fallbackToSimpleAuth flag to enable simple authentication @param alignmentContext alignment context @return ProtocolProxy instance or null if not found
3030 Creates a RandomAccessFile object for the specified file with given mode. Validates file ownership and group using POSIX checks, handling failure by closing the file. @param f File object to create RandomAccessFile for @param mode Mode string (e.g., "r", "rw") for creating the file access stream @param expectedOwner Expected owner of the file @param expectedGroup Expected group of the file @return RandomAccessFile object or null on failure
3031 Validates file ownership and group by comparing actual and expected values. @param file File object to check @param expectedOwner Expected file owner @param expectedGroup Expected file group @throws IOException if an I/O error occurs
3032 Validates file ownership and group by comparing actual and expected values. @param f File object to check @param expectedOwner Expected file owner @param expectedGroup Expected file group
3033 Masks and logs user credentials with specified UGI instance. @param title logging title @param ugi UserGroupInformation object
3034 Fetches UserGroupInformation based on user authentication. @return UserGroupInformation object or null if not found
3035 Masks user group information by authenticating the subject with provided login parameters. @param subject user authentication context
3036 Authenticates and authorizes the current connection based on user information. @throws RpcServerException if authentication fails
3037 Computes a scanner with comparison mask based on key bounds. @param beginKey starting RawComparable key defining the beginning of the scan @param endKey ending RawComparable key defining the end of the scan @return Scanner object or null if invalid keys are provided
3038 Validates location using RawComparable and updates scanner state. @param key RawComparable object to search for
3039 Validates data block location using a ByteArray instance. @param key byte array containing the key to search for
3040 Validates key location using upper bound calculation. @param key byte array to search for
3041 Checks function mask for given key and returns it if enabled. @param key WritableComparable object to compare @return Function mask key or null if not enabled
3042 Performs a membership test using the Bloom filter and retrieves associated value. @param key unique WritableComparable identifier @param val Writable object to be configured and read (if applicable) @return Writable object containing function mask value or null if not found
3043 Creates a ProtocolProxy instance for the specified protocol and configuration. @param protocol target protocol @param clientVersion client version @param conf Hadoop Configuration instance @param factory SocketFactory object
3044 Creates and returns a ProtocolProxy instance for the specified protocol, configuration, authentication details, and retry policy. @param protocol target protocol class @param clientVersion client version number @param addr server address @param ticket user authentication information @param conf configuration settings @param factory socket factory @param rpcTimeout RPC timeout value @param connectionRetryPolicy retry policy for connections
3045 Establishes an IPC connection context for the given remote ID and authentication method. @param fallbackToSimpleAuth AtomicBoolean indicating current fallback status
3046 Opens a file securely for random read access. If authentication is enabled, validates file ownership and group; otherwise, creates a RandomAccessFile object directly. @param f File object to create RandomAccessFile for @param mode Mode string (e.g., "r", "rw") for creating the file access stream @param expectedOwner Expected owner of the file @param expectedGroup Expected group of the file @return RandomAccessFile object or null on failure
3047 Validates file ownership and group by comparing actual and expected values. @param file File object to check @param expectedOwner Expected file owner @param expectedGroup Expected file group @return FSDataInputStream if valid, otherwise returns raw filesystem input stream @throws IOException if an I/O error occurs
3048 Verifies file ownership and group before opening for read. @param f File object to check @param expectedOwner Expected file owner @param expectedGroup Expected file group
3049 Checks if a user has admin privileges. @param servletContext Servlet context object @param remoteUser unique user identifier @return true if user is an admin, false otherwise
3050 Validates a user's access to a service based on ACLs, machine lists, and client principal. @param user UserGroupInformation object @param protocol Class of the security protocol @param conf Hadoop configuration @param addr Client IP address
3051 Initializes and fetches UserGroupInformation based on user authentication. @throws IOException if an I/O error occurs
3052 Verifies if user group information is valid based on keytab authentication. @return true if valid, false otherwise
3053 Verifies function mask validity based on user credentials. @return true if valid function mask found, false otherwise
3054 Executes a PrivilegedAction on behalf of the current user, either using UserGroupInformation or delegating to the action itself. @param action PrivilegedAction to be executed
3055 Executes privileged security action with masked user credentials. @param action PrivilegedExceptionAction to execute
3056 Cedes control to standby service after specified time. @param millisToCede duration in milliseconds before transitioning
3057 Fetches and executes a privileged action to mask service functionality. @throws ServiceFailedException if service fails @throws IOException on execution error
3058 Creates a scanner with comparison mask based on key bounds. @param beginKey starting byte array defining the beginning of the scan @param endKey ending byte array defining the end of the scan @return Scanner object or null if invalid keys are provided
3059 Computes scanner with comparison mask based on key bounds. @param beginKey starting RawComparable key defining the beginning of the scan @param endKey ending RawComparable key defining the end of the scan
3060 Creates and returns a ProtocolProxy instance for the specified protocol, configuration, authentication details, and retry policy. @param protocol target protocol class @param clientVersion client version number @param addr server address @param ticket user authentication information @param conf configuration settings @param factory socket factory
3061 Creates and returns a ProtocolProxy instance for the specified protocol, configuration, authentication details, and retry policy. @param protocol target protocol class @param clientVersion client version number @param addr server address @param ticket user authentication information @param conf configuration settings @param factory socket factory @param rpcTimeout RPC timeout value
3062 Verifies user access and authorization based on configuration settings. @param servletContext Servlet context object @param request HTTP request object @return true if user is authorized, false otherwise
3063 Authorizes a user to access a service based on ACLs and client principal. @param user UserGroupInformation object @param protocolName unique protocol identifier @param addr Client IP address
3064 Constructs a qualified file system path for the current user. @return Path object representing the user's home directory
3065 Validates file system access based on user permissions and mode. @param stat FileStatus object containing path and permission information @param mode FsAction object representing the desired access mode @throws AccessControlException if permission is denied
3066 Initializes a ViewFileSystem object with current user authentication and timestamp. @throws IOException if an I/O error occurs during initialization
3067 Initializes a ViewFs instance with the given URI and configuration. @param theUri file system URI @param conf Hadoop Configuration object
3068 Initializes the InodeTree instance from a given configuration and view name. @param config Hadoop Configuration object @param viewName unique identifier of mount table @param theUri URI representing the file system path @param initingUriAsFallbackOnNoMounts true to initialize as fallback on no mounts, false otherwise @throws UnsupportedFileSystemException if an unsupported file system exception occurs @throws URISyntaxException if a URI syntax error occurs @throws FileAlreadyExistsException if a file already exists exception occurs @throws IOException if an I/O error occurs
3069 Constructs a Path object for the user's home directory based on user authentication. @throws IOException if an I/O error occurs during user name retrieval
3070 Authenticates a URL with the provided token and user credentials. @param url HTTP URL to authenticate @param token Token object containing authentication details @param doAs Optional user ID to act on behalf of (null if not applicable) @return Authenticated HttpURLConnection or throws an exception on failure
3071 Fetches UserGroupInformation based on ticket cache path or user authentication. @param ticketCachePath path to Kerberos ticket cache @param user unique user identifier (optional)
3072 Fetches UserGroupInformation for the given user and Kerberos keytab path. @param user username @param path Kerberos keytab file location @return UserGroupInformation object or throws IOException if an I/O error occurs
3073 Logs user group information with masked tokens for HDFS and KMS audiences. @param log Logger instance @param ugi UserGroupInformation object containing credentials and tokens
3074 Executes a privileged action with security context. @param action PrivilegedExceptionAction to execute @return Result of the executed action, or null if not applicable
3075 Returns the user's m3 value if authenticated via proxy, otherwise returns null. @throws IOException if an I/O error occurs
3076 Fetches a ProtocolProxy instance with retries and timeout. @param protocol target protocol class @param clientVersion client version number @param addr server address @param conf configuration settings @param rpcTimeout RPC timeout value @param connectionRetryPolicy retry policy for connections @throws IOException if an I/O error occurs
3077 Creates a scanner with comparison mask based on key bounds. @param beginKey starting byte array defining the beginning of the scan @param endKey ending byte array defining the end of the scan
3078 Creates and returns a ProtocolProxy instance with authentication details fetched using UserGroupInformation. @param protocol target protocol class @param clientVersion client version number @param addr server address @param conf configuration settings @param factory socket factory @return ProtocolProxy<T> instance @throws IOException if an I/O error occurs
3079 Creates and returns a ProtocolProxy instance for the specified protocol, configuration, authentication details, and retry policy. @param protocol target protocol class @param clientVersion client version number @param addr server address @param ticket user authentication information @param conf configuration settings @param factory socket factory
3080 Verifies user access and authorization based on configuration settings. @param servletContext Servlet context object @return true if user is authorized, false otherwise
3081 Constructs a qualified file system path for the function mask. @param path File system Path object to be resolved @return Qualified Path object representing the function mask URI
3082 Fetches file status for the user's trash or all users' trashes. @param allUsers true to include all users, false otherwise @return Collection of FileStatus objects representing user/trash paths
3083 Validates file system access based on user permissions and mode. @param path Path object representing the file or directory to access @param mode FsAction object representing the desired access mode @throws AccessControlException if permission is denied
3084 Validates file system access based on user permissions and mode. @param path Path object representing the file or directory to access @param mode FsAction object representing the desired access mode @throws AccessControlException if permission is denied
3085 Initializes a ViewFileSystem object with current user authentication and timestamp. @param theUri unique file system identifier @param conf Hadoop configuration object
3086 Retrieves a FileSystem instance based on the provided URI and configuration. @param uri unique file system identifier @param conf Hadoop configuration object
3087 Retrieves file system metadata via default file system instance. @throws IOException if an I/O error occurs
3088 Authenticates a URL with the provided delegation token and user credentials. @param url HTTP URL to authenticate @param token Delegation token object containing authentication details
3089 Initializes and returns a distributed file system object based on configuration properties. @param uri URI of the file system @param conf Configuration properties for initialization @param user Unique user identifier (optional) @return FileSystem object or null if not applicable
3090 Initializes and returns a configured FileSystem instance. @param uri URI of the file system @param conf Configuration object with ticket cache path @param user unique user identifier (optional) @return initialized FileSystem object or null if not found
3091 Authenticates a user using Kerberos and returns UserGroupInformation. @param ticketCache path to Kerberos ticket cache @param user unique user identifier (optional) @return UserGroupInformation object or throws IOException if authentication fails
3092 Initializes user credentials and functional mask subject.
3093 Calculates and updates the user's function mask. @param user username @param path Kerberos keytab file location
3094 Logs user group information with masked tokens. @param ugi UserGroupInformation object containing credentials and tokens
3095 Retrieves a ProtocolProxy instance with retries and timeout. @param protocol target protocol class @param clientVersion client version number @param addr server address @param conf configuration settings @param connTimeout RPC connection timeout value @throws IOException if an I/O error occurs
3096 Creates a ProtocolProxy instance for the specified protocol and parameters. @param protocol target protocol class @param clientVersion client version number @param addr server address @param conf configuration settings @param rpcTimeout RPC timeout value @param timeout overall timeout value @return T object or throws IOException if an I/O error occurs
3097 Creates a ProtocolProxy instance with authentication details and executes the m2 method. @param protocol target protocol class @param clientVersion client version number @param addr server address @param conf configuration settings @param factory socket factory @return result of m2 method execution
3098 Creates and returns a ProtocolProxy instance with authentication details fetched using UserGroupInformation. @param protocol target protocol class @param clientVersion client version number @param addr server address @param conf configuration settings @return ProtocolProxy<T> instance @throws IOException if an I/O error occurs
3099 Retrieves the GetUserMappingsProtocol instance for group mappings. @throws IOException if an I/O error occurs
3100 Masks deprecated configuration keys and retrieves socket factory for ZKFC protocol. @param conf Hadoop Configuration object @param timeoutMs RPC timeout value in milliseconds @return ZKFCProtocol instance or throws IOException if failed
3101 Resolves file system path against regex-based mount points and returns the trash root path. @param path input file system path to process @return Path object representing the trash root URI or null if not found
3102 Fetches file statuses from the target file system, including user and/or all users' trashes. @param allUsers true to include all users, false otherwise @return Collection of FileStatus objects representing user/trash paths
3103 Initializes a ViewFileSystem object with the given Hadoop configuration. @param conf Hadoop configuration object
3104 Updates cache with file system data. @param uri file system URI @param conf Hadoop Configuration object @param fs FileSystem instance
3105 Retrieves a FileSystem instance based on the provided URI and configuration. @param uri unique file system identifier @param config Hadoop configuration object
3106 Creates a FileContext object with default file system and configuration. @param defFs default AbstractFileSystem instance @param aConf Hadoop configuration settings
3107 Authenticates a URL with the provided delegation token and user credentials. @param url HTTP URL to authenticate @param token Delegation token object containing authentication details
3108 Performs a comprehensive diagnostic scan of the Kerberos authentication setup. @throws Exception if an error occurs during the diagnostic process
3109 Parses command-line arguments to extract user credentials. @param args array of input arguments
3110 Calculates and updates the user's function mask. @param args array of strings containing user credentials
3111 Calculates and updates the user's function mask based on configuration and Kerberos credentials. @param conf Hadoop Configuration object @param keytabFileKey key for keytab file in configuration @param userNameKey key for username in configuration @param hostname hostname to be formatted or resolved
3112 Initializes the Server instance with specified configuration. @param bindAddress server address to bind to @param port server port number @param rpcRequestClass class of the RPC request to process @param handlerCount number of handlers to use for processing requests @param numReaders number of reader threads to use (or -1 to default) @param queueSizePerHandler maximum length of each call queue per handler @param conf system configuration object @param serverName unique identifier for the server instance @param secretManager optional SecretManager instance for authentication @param portRangeConfig configuration string for port range management
3113 Negotiates SASL protocol with server using the highest-priority enabled authentication method. @throws InterruptedException, SaslException, IOException if an error occurs during negotiation
3114 Retrieves a ProtocolProxy instance with retries and timeout. @param protocol target protocol class @param clientVersion client version number @param addr server address @param conf configuration settings
3115 Creates an RPC proxy with retries and timeout. @param protocol target protocol class @param clientVersion client version number @param addr server address @param conf configuration settings @param connTimeout RPC connection timeout value @return T instance of the created proxy
3116 Registers resource with specified configuration and parser restrictions. @param in InputStream object @param name unique identifier for the resource
3117 Creates a ProtocolProxy instance with authentication details. @param protocol target protocol class @param clientVersion client version number @param addr server address @param conf configuration settings @return ProtocolProxy<T> instance
3118 Fetches and displays user group information for specified usernames. @param args array of usernames to retrieve groups for
3119 Calculates the function mask for a HA service target node. @param toNode HAServiceTarget instance @return int representing the calculated function mask, or -1 if failover failed
3120 Asks a HA service to cede its active state and returns the new ZKFC protocol instance. @param remote HAServiceTarget to relinquish active role @param timeout RPC timeout value in milliseconds @return ZKFCProtocol instance or throws IOException if failed
3121 Handles FUNC_MASK HTTP requests by initializing the necessary components and providing structured JSON responses that represent MBean attributes and their values. @param request HttpServletRequest object @param response HttpServletResponse object
3122 Creates a new FileSystem instance with the given URI and configuration. @param uri unique file system identifier @param conf Hadoop configuration settings @return newly created FileSystem object or throws IOException if creation fails
3123 Retrieves a local file system instance based on the provided configuration. @param conf Hadoop configuration object
3124 Retrieves a FileSystem instance based on provided URI and configuration. @param uri unique file system identifier @param conf Hadoop configuration object
3125 Creates a FileContext object with default file system and configuration. @param defaultFS default AbstractFileSystem instance
3126 Creates FileContext instance with default file system and configuration. @param defaultFsUri URI of the default file system @param aConf Hadoop configuration settings
3127 Parses command-line arguments and executes core logic based on user input. @param args array of input arguments
3128 Retrieves DNS interface configuration and resolves hostname. @param conf Hadoop Configuration object or null if not found @param keytabFileKey key for keytab file in configuration @param userNameKey key for username in configuration
3129 Processes an RPC SASL protocol message and returns a response based on the server's evaluation. @param saslMessage RPC SASL protocol message to process
3130 Retrieves a ProtocolProxy instance with retries and timeout. @param protocol target protocol class @param clientVersion client version number @param addr server address @param conf configuration settings
3131 Registers configuration resource by name. @param name unique resource identifier
3132 Configures system properties based on provided URL. @param url URL to process
3133 Masks specific files based on configuration rules. @param file Path to the target file
3134 Masks input stream with configuration resource. @param in InputStream to process
3135 Calculates function mask using configuration settings and determines the next active node. @throws ServiceFailedException if unable to become active or service became unhealthy
3136 Returns an HA service protocol instance based on monitored target's configuration. @param conf RPC configuration object @return HAServiceProtocol client instance or null if creation fails
3137 Creates an HA service protocol client instance with given configuration and settings. @param conf RPC configuration object @param timeoutMs RPC timeout value
3138 Creates an HA service protocol client instance with given configuration and settings. @param conf RPC configuration object @param timeoutMs RPC timeout value
3139 Initializes the HarFileSystem with the given URI and configuration. @param name unique file system identifier @param conf Hadoop configuration settings
3140 Evaluates the trash policy for a given file path based on Hadoop configuration settings. @param fs HDFS file system instance @param p input file system Path object @param conf Hadoop configuration to be used for trash policy creation @return true if policy allows file, false otherwise
3141 Constructs a new PathData object from a file system and path string. @param pathString input path string to validate @param conf Hadoop configuration settings
3142 Resolves file system name and configuration to create a new FileSystem instance. @param name file system name @param conf Hadoop configuration settings
3143 Creates a new LocalFileSystem instance based on the given configuration. @param conf Hadoop configuration settings
3144 Initializes ChRootedFileSystem with given file system and root URI. @param uri unique root URI to restrict access @param conf Hadoop configuration settings
3145 Delegates file system creation to underlying implementation. @param uri unique file system identifier @param conf Hadoop configuration settings
3146 Retrieves a FileSystem instance based on the specified URI and configuration. @param uri File system URI @param conf Configuration settings @return Instantiated FileSystem object or throws IOException if not found
3147 Creates a new FileSystem instance with function mask URI and configuration. @param conf Hadoop configuration settings @return newly created FileSystem object or throws IOException if creation fails
3148 Creates or retrieves a FileSystem instance based on the supplied configuration. @return newly created or retrieved FileSystem object
3149 Retrieves file statuses for the current directory, considering fallback links and URI masks. @param f Path to the directory @return Array of FileStatus objects or empty array if no files exist
3150 Creates FileContext instance with default file system and configuration. @param defaultFsUri URI of the default file system
3151 Resolves FileContext with configuration and checks for valid default file system URI. @param aConf Hadoop configuration settings @throws UnsupportedFileSystemException if default URI is invalid
3152 Creates file context with local FS and provided configuration. @param aConf Hadoop configuration settings
3153 Initializes Server instance with specified configuration and binds RPC protocol. @param protocolClass class of the RPC request to process @param protocolImpl implementation of the RPC request processor
3154 Initializes Server instance with specified configuration and binds RPC protocol. @param protocolClass class of the RPC request to process @param protocolImpl implementation of the RPC protocol @param conf Hadoop configuration object @param bindAddress server address to bind to @param port server port number @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler queue size per handler thread @param verbose whether to enable verbose logging @param secretManager secret manager object for token authentication @param portRangeConfig configuration for server port range @param alignmentContext alignment context object
3155 Masks authentication successes metric and handles SASL protocol message processing. @param saslMessage RPC SASL protocol message to process
3156 Loads the latest mount-table configuration from the specified path into Hadoop configuration. @param mountTableConfigPath Path to the mount table configuration @param conf Hadoop configuration object
3157 Transitions a node to active state. @param targetNodeToActivate identifier of the node to activate @param forceActive whether to force activation despite errors @return boolean flag indicating transition status
3158 Determines the functional mask of a HA service target. @param from original service instance @param target target service instance to transition to @param forceActive whether to force becoming active even if not ready @throws FailoverFailedException if failover conditions are not met
3159 Attempts to make a HA service target standby using graceful fencing. @param svc the HAServiceTarget instance to put into standby @return true on success, false otherwise
3160 Resolves a file system path with symbolic links enabled. @param filesys Hadoop file system instance @return the resolved Path object or throws IOException if resolution fails
3161 Initializes a new PathData object from a local file path and Hadoop configuration. @param localPath URI of the local file path to validate @param conf Hadoop configuration settings
3162 Copies multiple files from source to destination file system. @param delSrc whether to delete sources after copy @param overwrite whether to overwrite existing files at destination @param srcs array of source paths @param dst target directory path
3163 Copies a file from source to destination with optional delete and overwrite options. @param delSrc whether to delete source after copy @param overwrite whether to overwrite existing files at destination @param src source path @param dst target path
3164 Copies file from source to destination Hadoop filesystems using the specified configuration. @param delSrc whether to delete source after copy @param src source path @param dst target path @param useRawLocalFileSystem whether to use raw local file system
3165 Fetches context with func mask configuration. @param conf Hadoop configuration settings @return Context object or null if not found
3166 Calculates file system path mask using a combination of configuration properties and the provided path. @param dirsProp string containing directory configurations @param path input file system path to resolve with directories
3167 Returns a FileSystem instance with specific permissions mask. @param path Path object of the accessed file @param conf Hadoop configuration settings
3168 Calculates and returns a masked file system path. @param path input file system Path object @return MountPathInfo<FileSystem> object containing the masked path and FileSystem instance with custom permissions settings
3169 Expands a file pattern into an array of fully resolved paths, filtered by default settings. @param pattern input path string to validate @param conf Hadoop configuration settings @return PathData objects representing the matched files or directories
3170 Dumps detailed information from TFile data structures to the specified stream. @param file path to the TFile @param out output stream for the dumped information @param conf Hadoop configuration settings
3171 Loads credentials from a file using the provided configuration. @param filename path to the file containing credentials @param conf Hadoop configuration settings @return Credentials object or throws IOException if loading fails
3172 Retrieves and initializes function masks from configuration settings. @param conf Hadoop configuration object @return Array of URLs representing function masks or null if not found
3173 Configures and initializes the RollingFileSystemSink instance. @return true if initialization is successful, false otherwise
3174 Creates a FileContext instance for local file system. @throws UnsupportedFileSystemException if local FS is not supported
3175 Resolves FileContext with default configuration and checks for valid file system URI. @throws UnsupportedFileSystemException if default URI is invalid
3176 Initializes Server instance with specified configuration and binds RPC protocol. @param protocolClass class of the RPC request to process
3177 Initializes Server instance with specified configuration and binds RPC protocol. @param protocolClass class of the RPC request to process @param protocolImpl implementation of the RPC protocol @param conf Hadoop configuration object @param bindAddress server address to bind to @param port server port number @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler queue size per handler thread @param verbose whether to enable verbose logging @param secretManager secret manager object for token authentication
3178 Initializes SSLFactory instance with specified mode and configuration. @param mode client or server mode @param conf input Configuration object for SSL/TLS settings
3179 Initializes ACLs and machine lists based on configuration settings. @param conf Configuration object @param provider PolicyProvider instance
3180 Tries fencing on a HAServiceTarget and attempts to make the target service active using graceful fencing. @param fromSvc source service @param toSvc target service @param forceFence whether to force fencing even if not ready @param forceActive whether to force becoming active even if not ready @throws FailoverFailedException if failover conditions are not met
3181 Validates destination path and initializes PathData object. @param args list of command arguments
3182 Copies multiple files from source to destination file system. @param srcs array of source paths @param dst target directory path
3183 Copies multiple files from source to destination file system. @param delSrc whether to delete sources after copy @param overwrite whether to overwrite existing files at destination @param srcs array of source paths @param dst target directory path
3184 Copies a file from source to destination with optional delete and overwrite options. @param delSrc whether to delete source after copy @param overwrite whether to overwrite existing files at destination @param src source path @param dst target path
3185 Wraps a call to `fs.copyFromLocalFile` with delete and overwrite options. @param delSrc whether to delete source after copy @param overwrite whether to overwrite existing files at destination @param src source path @param dst target path
3186 Copies file from source to destination Hadoop filesystems. @param delSrc whether to delete source after copy @param src source path @param dst target path
3187 Finds a valid local directory for file operations based on the given path and size constraints. @param pathStr the desired path for the file operation @param size the requested size of the file (SIZE_UNKNOWN if unknown) @param conf Hadoop configuration settings @param checkWrite whether to validate write permissions (default: false) @return Path object representing the constructed file system path or null on error
3188 Fetches Path object for a given file within all configured local directories. @param pathStr relative or absolute path to the file @param conf Hadoop configuration settings @return Path object if found, throws DiskErrorException otherwise
3189 Retrieves a list of paths for file operations based on the provided context and function mask. @param pathStr local directory path string @param conf Hadoop configuration settings @return Iterable<Path> object containing paths or empty if not found
3190 Initializes NflyFSystem instance with provided configuration and URI array. @param uris array of unique file system identifiers @param conf Hadoop configuration object @param minReplication minimum replication factor @param nflyFlags EnumSet of NflyKey flags @param fsGetter FsGetter instance (optional)
3191 Validates input file paths and executes commands on matched files. @return 0 if successful, -1 otherwise
3192 Expands a file pattern into an array of fully resolved paths. @param arg input path string to validate @return List<PathData> containing matched files or directories
3193 Resolves file path based on provided arguments and configuration. @param args list of input strings containing file paths or patterns
3194 Initializes Reader with Hadoop configuration and qualified file path. @param fs FileSystem object @param file unqualified file path @param conf Hadoop configuration settings
3195 Creates a new Reader instance from an FSDataInputStream with specified parameters. @param in input stream containing sequence file data @param buffersize buffer size for reading data @param start starting offset for reading (FUNC_MASK) @param length mask length for reading @param conf Hadoop configuration settings @throws IOException if an I/O error occurs
3196 Creates a SequenceFile reader with file mask option based on the provided Path and Hadoop configuration. @param dataFile Path object to create file mask from @param conf Hadoop configuration settings @param options Optional parameters for initializing the reader
3197 Initializes input stream from SequenceFile and prepares for reading. @throws IOException if any I/O error occurs during initialization
3198 Initializes a Writer instance with Hadoop configuration and key-value pair serialization settings. @param conf Hadoop configuration containing serialization settings @param opts Options to configure the writer (e.g., compression, replication)
3199 Prints TFile dumper information and processes specified TFile files. @param args array of file paths to process
3200 Formats and writes credentials to a file in specified format. @param f File object to write to @param format Desired format (PB or WRITABLE) @param creds Credentials object with serialized data @param conf Hadoop configuration settings
3201 Initializes and flushes the RollingFileSystemSink instance based on current date. @throws MetricsException if an error occurs during file operations
3202 Expands a globbed path pattern into a list of fully resolved paths. @param path the globbed path pattern @param useLocal whether to use local file system or not @return a list of Path objects representing the matched files
3203 Initializes Server instance with specified configuration and binds RPC protocol. @param protocolClass class of the RPC request to process @param protocolImpl implementation of the RPC protocol @param conf Hadoop configuration object @param bindAddress server address to bind to @param port server port number
3204 Initializes Server instance with specified configuration and binds RPC protocol. @param protocolImpl implementation of the RPC protocol @param conf Hadoop configuration object @param bindAddress server address to bind to @param port server port number @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler queue size per handler thread @param verbose whether to enable verbose logging @param secretManager secret manager object for token authentication
3205 Handles incoming RPC requests based on the call ID and authentication protocol. @param header RpcRequestHeaderProto object containing request metadata @param buffer RpcWritable.Buffer object containing data to process @throws RpcServerException if fatal error occurs during processing
3206 Establishes a secured URL connection using the provided URL. @param url the input URL to connect to @return a secured URLConnection object or throws an Exception on failure
3207 Copies a file from source to destination with default delete and overwrite options. @param src source path @param dst target path
3208 Copies file from source to destination with delete and overwrite options. @param src source path @param dst target path
3209 Calls copyFromLocalFile operation with delete and overwrite options. @param delSrc whether to delete source after copy @param src source path @param dst target path
3210 Copies file from source to destination Hadoop filesystems. @param src source path @param dst target path
3211 Copies file from source to destination Hadoop filesystems. @param src source path @param dst target path
3212 Copies file from source to destination Hadoop filesystems. @param delSrc whether to delete source after copy @param src source path @param dst target path
3213 Retrieves a valid local directory for file operations based on the given path and size constraints. @param pathStr desired path for the file operation @param size requested size of the file (SIZE_UNKNOWN if unknown) @param conf Hadoop configuration settings @param checkWrite whether to validate write permissions (default: false)
3214 Constructs a file for function mask operations. @param pathStr the desired path for the file operation @param size the requested size of the file (SIZE_UNKNOWN if unknown) @param conf Hadoop configuration settings @return File object representing the constructed file system path or null on error
3215 Retrieves an existing or creates a new context-specific allocator and calls its m2 method. @param pathStr relative or absolute file path @param conf Hadoop configuration settings
3216 Retrieves a list of paths for file operations based on the provided context and function mask. @param pathStr local directory path string @param conf Hadoop configuration settings
3217 Initializes NflyFSystem instance with provided configuration and URI array. @param uris array of unique file system identifiers @param conf Hadoop configuration object @param minReplication minimum replication factor @param nflyFlags EnumSet of NflyKey flags
3218 Configures NflyFSystem instance with provided URI array and settings. @param uris array of unique file system identifiers @param conf Hadoop configuration object @param settings string containing key-value pairs for configuration @param fsGetter FsGetter instance (optional) @return initialized NflyFSystem instance
3219 Expands a list of file patterns into fully resolved paths. @param args list of input path strings to validate @return List<PathData> containing matched files or directories
3220 Masks a token by applying aliases and updating the credentials. @param tokenFile File containing token information @param fileFormat Desired format (PB or WRITABLE) @param alias Text representation of public service @param service Text representation of service @param url URL to check against pattern @param renewer Token renewal information @param conf Hadoop configuration settings
3221 Masks tokens in the provided file with specified alias and service. @param tokenFile File containing token information @param fileFormat Desired format for writing (PB or WRITABLE) @param alias Text representation of public service @param service Text representation of updated service @param conf Hadoop configuration settings
3222 Masks secret keys from provided token files and writes the updated credentials to a file. @param tokenFiles list of token files containing credentials information @param fileFormat desired format for writing (PB or WRITABLE) @param conf Hadoop configuration settings
3223 Masks tokens in the provided file based on the specified alias and cancellation criteria. @param cancel whether to cancel or mask tokens @param tokenFile file containing token information @param fileFormat desired format for output (PB or WRITABLE) @param alias text representation of service mask @param conf system-wide configuration settings
3224 Masks and renews delegation tokens in the specified file based on the provided alias and configuration. @param tokenFile File containing delegation tokens @param fileFormat Desired format for writing tokens (PB or WRITABLE) @param alias Text representation of service mask @param conf Hadoop configuration settings
3225 Masks a secret key in a Hadoop security token file with an alias from provided credentials data. @param tokenFile file containing credentials information @param fileFormat desired format (PB or WRITABLE) @param alias Text representation of the public service to mask the key @param base64 new value as string in base64 format @param conf Hadoop configuration settings
3226 Expands a globbed path pattern into a list of fully resolved paths. @param path the globbed path pattern
3227 Initializes server with specified configuration and binds RPC protocol. @param instance not used (deprecated) @throws IOException if initialization fails
3228 Processes a single RPC request from client by handling the request header and authentication protocol. @param bb underlying ByteBuffer object
3229 Retrieves log levels from the specified URL using the CLI's connection management. @param urlString input URL for fetching log levels
3230 Copies file from local temporary location to distributed file system output.
3231 Copies file from source to destination Hadoop filesystems. @param src source path @param dst target path @param copyCrc whether to copy checksum file as well
3232 Retrieves a valid local directory for file operations based on given path and size constraints. @param pathStr desired path for the file operation @param size requested size of the file (SIZE_UNKNOWN if unknown) @param conf Hadoop configuration settings
3233 Retrieves a writable local directory path for file operations. @param pathStr desired path for the file operation @param size requested size of the file (SIZE_UNKNOWN if unknown) @param conf Hadoop configuration settings @return File object representing the allocated local directory path or null on error
3234 Updates masks from PathData objects and handles exceptions. @param args list of PathData objects to process
3235 Creates a SequenceFile writer based on compression type and options. @param conf Hadoop Configuration object @param opts Writer.Option... object specifying serialization settings
3236 Generates a JAR file for the given class path and returns its paths. @param inputClassPath string representation of the class path @param pwd current working directory Path object @param targetDir target directory where the JAR will be created @param callerEnv environment variables for replacement in the class path @return array containing the paths to the generated JAR file and unexpanded wildcard classpath
3237 Processes a list of file paths, expanding wildcards and validating function masks. @param files comma-separated list of file names @param expandWildcard whether to expand wildcard characters in the input file names @return string representation of the processed file paths or throws IOException if creation fails
3238 Fetches and processes connection header, handling version mismatch, authentication protocol, data length validation, and RPC request processing.
3239 Processes input buffer and handles SASL authentication, reading wrapped data from channel until processing is complete.
3240 Sends log level request to specified URL. @param protocol network protocol (e.g., http, https) @param hostName server hostname @param className class name for filtering log levels
3241 Fetches log levels from specified URL using CLI's connection management. @param protocol network protocol (e.g. http, https) @param hostName target hostname @param className class name for logging operation @param level log level to retrieve
3242 Creates a LoadBalancingKMSClientProvider instance based on the provided URI and Hadoop configuration. @param providerUri token service URI @param conf Hadoop Configuration object @return LoadBalancingKMSClientProvider instance or null if instantiation fails
3243 Copies file from local temporary location to distributed file system output. @param fsOutputFile Hadoop FS path for output @param tmpLocalFile local temporary file path
3244 Creates a file for storing temporary data based on given path and size constraints. @param pathStr desired path for the file operation @param size requested size of the file (SIZE_UNKNOWN if unknown) @param conf Hadoop configuration settings
3245 Retrieves a valid local directory for file operations based on given configuration. @param pathStr desired path for the file operation @param conf Hadoop configuration settings
3246 Applies command-line argument masks and executes command logic. @param argv variable-length list of string arguments
3247 Initializes a new instance of Reader with given FileSystem, file path, and Hadoop configuration. @param fs Hadoop file system @param file ArrayFile path to read from @param conf Hadoop job configuration
3248 Initializes Reader with file system and directory name. @param fs Hadoop file system instance @param dirName directory path for creating file paths from @param comparator data comparator for the reader @param conf Hadoop configuration settings
3249 Creates a new instance of Reader from a file system and directory name. @param fs File system object @param dirName Directory name string @param conf Hadoop configuration settings
3250 Initializes a legacy Reader instance with file system, directory name, and writable comparator. @param fs Hadoop file system object @param dirName directory path for creating file paths @param comparator WritableComparator instance to encapsulate key comparison @param conf Hadoop configuration settings
3251 Creates a SequenceFile writer for merging sorted key-value pairs. @param inputFile Hadoop Path object containing input file @param outputFile Hadoop Path object specifying output file @param prog Progressable object tracking merge progress @return Writer object initialized with compression settings and serialization options
3252 Fetches a function mask based on the specified configuration property. @param fs Hadoop FileSystem instance @param dir directory path to manage MapFiles @param keyClass Class of the key to be managed @param valueClass Class of the value to be managed @param dryrun whether to perform a dry run or not @param conf Hadoop Configuration object specifying serialization settings @return count of processed entries, -1 if index file already exists
3253 Creates a SequenceFile writer with specified configurations and options. @param fs Hadoop FileSystem object @param conf Hadoop Configuration object @param name Path to the file @param keyClass Class of the keys in the file @param valClass Class of the values in the file
3254 Creates a SequenceFile writer with specified configuration and key-value class settings. @param fs Hadoop FileSystem object @param conf Hadoop Configuration object @param name Path to the file @param keyClass Class of the keys to be stored @param valClass Class of the values to be stored @param compressionType Compression type for the SequenceFile
3255 Creates a SequenceFile writer with specified configuration and options. @param fs Hadoop FileSystem object @param conf Hadoop Configuration object @param name Path object for the file to be written @param keyClass Class type of key data @param valClass Class type of value data @param compressionType Compression type for the SequenceFile @param progress Progressable object containing progress data
3256 Creates a SequenceFile writer with specific configuration and compression settings. @param fs Hadoop FileSystem object @param conf Hadoop Configuration object @param name Path to the file @param keyClass Class type for keys @param valClass Class type for values @param compressionType Compression type (e.g. NONE, RECORD) @param codec Compression codec (default: DefaultCodec if not NONE and null)
3257 Creates a SequenceFile writer with specified configuration and options. @param fs Hadoop FileSystem object @param conf Hadoop Configuration object @param name Path to the file being written @param keyClass Class type for keys in the SequenceFile @param valClass Class type for values in the SequenceFile @param compressionType Compression type for the file (e.g. NONE, RECORD) @param codec Compression codec (default: DefaultCodec if not NONE and null) @param progress Progressable object containing progress data @param metadata Metadata to be stored in this option @return SequenceFile writer instance
3258 Creates a SequenceFile writer with specified configuration and options. @param fs Hadoop FileSystem object @param conf Hadoop Configuration object @param name Path to the file @param keyClass Class type of keys in the file @param valClass Class type of values in the file @param bufferSize Desired buffer size for writing data @param replication Replication factor (number of copies to store) @param blockSize Block size mask in bytes @param compressionType Compression type @param codec Compression codec (default: DefaultCodec if not NONE and null) @param progress Progressable object containing progress data @param metadata Metadata value to be stored in this option @return SequenceFile writer instance
3259 Creates a SequenceFile writer with specified configuration and options. @param fs Hadoop Filesystem object @param conf Hadoop Configuration object @param name Path to the file @param keyClass Class type for key serialization @param valClass Class type for value serialization @param compressionType Compression type (e.g. NONE, RECORD) @param codec Compression codec (optional) @param progress Progressable object containing progress data
3260 Creates a SequenceFile writer with specified configuration and options. @param conf Hadoop Configuration object @param out underlying FSDataOutputStream instance @param keyClass target key class to be managed @param valClass target value class to be managed @param compressionType compression type @param codec Compression codec (default: DefaultCodec if not NONE and null) @param metadata metadata to be stored in this option @return SequenceFile writer instance
3261 Creates a SequenceFile writer with specified configuration and compression settings. @param conf Hadoop Configuration object @param out FSDataOutputStream instance for writing to file system @param keyClass target key class type @param valClass target value class type @param compressionType desired compression type (e.g. NONE, RECORD) @param codec Compression codec (default: DefaultCodec if not NONE and null)
3262 Expands wildcards and validates file paths. @param files comma-separated list of file names
3263 Executes CLI operation based on the specified command (GETLEVEL or SETLEVEL). @throws HadoopIllegalArgumentException if invalid command is provided
3264 Creates a data block instance for efficient upload with specified characteristics. @param index unique data block identifier @param limit maximum allowed size @param statistics BlockUploadStatistics object containing usage metrics @return DataBlock instance or throws IOException on failure
3265 Calculates the function mask path using configuration and local directory allocator. @param conf Hadoop configuration settings @param localDirAllocator Local directory allocator instance @return Path object representing calculated function mask path
3266 Handles command-line arguments and executes the specified command. @param argv variable-length list of string arguments
3267 Initializes a new instance of Reader from a file system and directory name. @param fs File system object @param dirName Directory name string @param conf Hadoop configuration settings
3268 Iterates over segment descriptors in priority queue and invokes their cleanup method. @throws IOException if I/O error occurs during iteration
3269 Initializes a Writer instance with configuration, directory name, file system, key-value pair comparator, and compression settings. @param conf Hadoop Configuration object @param fs File System object @param dirName Path to the directory where data will be stored @param comparator Key-value pair comparator implementation @param compress Compression type for writer creation @throws IOException if mkdirs fails or writer creation fails
3270 Initializes a Writer instance with configuration, file system, and file path. @param conf Hadoop configuration @param fs FileSystem object @param file file path to write Writable objects @param valClass class of the Writable values to be written
3271 Initializes Writer with Hadoop configuration and file details. @param conf Hadoop Configuration object @param fs FileSystem object for data operations @param file Path to the output file @param valClass Class of Writable value objects @param compress Compression type (e.g. NONE, GZIP) @param progress Progress tracker for file writing
3272 Creates a Writer instance with configuration, directory name, and class types for keys and values. @param conf Hadoop Configuration object @param keyClass Class type for WritableComparable keys @param valClass Class type for Writable values
3273 Creates a Writer instance with configuration, directory name, serialization options (key and value class types) and compression settings. @param conf Hadoop Configuration object @param keyClass Class type for key WritableComparable objects @param valClass Class type for value objects @param compress CompressionType setting @param progress Progressable object containing progress data
3274 Constructs a Writer instance with Hadoop configuration, file system, directory name, key and value class types, compression settings, and progress tracking. @param conf Hadoop Configuration object @param fs File system to write data to @param dirName Directory path for storing data @param keyClass Key class type for writing @param valClass Value class type for writing @param compress Compression type for writer creation @param codec Compression codec (default: DefaultCodec if not NONE and null) @param progress Progressable object containing progress data @throws IOException on failure to create writer or write data
3275 Creates a Writer instance with configuration, directory name, and serialization options. @param conf Hadoop Configuration object @param keyClass target class type for key management @param valClass target class type for value management @param compress compression type
3276 Creates a Writer instance with custom configuration and serialization settings. @param conf Hadoop Configuration object @param fs Hadoop File System object @param dirName directory path where data will be stored @param comparator WritableComparator instance for data ordering and filtering @param valClass target class to be managed
3277 Creates a Writer instance with specified configuration, directory name, key and value class types, and compression options. @param conf Hadoop Configuration object @param fs FileSystem instance @param dirName Path to the directory where data will be stored @param comparator WritableComparator instance for data ordering and filtering @param valClass target class to be managed @param compress compression type
3278 Constructs a Writer instance with the given configuration, file system, directory name, key-value class types, compression type, and progress state. @param conf Hadoop Configuration object @param fs Hadoop FileSystem instance @param dirName Path to the directory where data will be stored @param comparator WritableComparator instance for data ordering and filtering @param valClass target class to be managed @param compress compression type @param progress Progressable object containing progress data
3279 Initializes a Writer instance with configuration, file system, directory name, comparator, value class, compression settings, and progress state. @param conf Hadoop Configuration object @param fs File system to use for data storage @param dirName Path to the directory where data will be stored @param comparator WritableComparator instance for data ordering and filtering @param valClass Class type of values being written @param compress Compression type (e.g. NONE, RECORD, BLOCK) @param codec Compression codec (default: DefaultCodec if not NONE and null) @param progress Progressable object containing progress data
3280 Creates a new SequenceFile writer with specified configuration and file context. @param fc FileContext instance @param conf Hadoop Configuration object @param name Path to the output file @param keyClass target key class to be managed @param valClass target value class to be managed @param compressionType compression type @param codec Compression codec (default: DefaultCodec if not NONE and null) @param metadata metadata to be stored in this option @param createFlag creation flags (e.g. overwrite, exclusive) @param opts variable arguments of CreateOpts instances to search @return SequenceFile writer instance
3281 Parses command-line arguments and options for classpath-related operations. @param args array of command-line arguments
3282 Configures a ClassLoader instance for the specified JAR file and work directory. @param file the input JAR file @param workDir the working directory where classes are located @return an initialized ClassLoader object or null if failed
3283 Parses and processes command-line options for Hadoop applications. Updates configuration settings based on provided arguments. @param line CommandLine object containing parsed arguments
3284 Calculates function mask path using configuration and local directory allocator. @param conf Hadoop configuration settings @param localDirAllocator Local directory allocator instance
3285 Checks if cache space is available for file of specified size. @param fileSize the size of the file @param conf Hadoop configuration settings @param localDirAllocator Local directory allocator instance @return true if cache space is available, false otherwise
3286 Merges and sorts key-value pairs using the provided segment descriptors. @param segments list of SegmentDescriptor objects to merge @param tmpDir temporary directory for merging process
3287 Initializes segment descriptors and constructs merge queue. @param inNames array of input file names @param deleteInputs true to delete inputs after processing @param factor sorting configuration parameter @param tmpDir temporary directory for merge operation @return MergeQueue object containing sorted key-value pairs
3288 Merges input SequenceFiles into a single output file. @param inNames array of input file paths @param tempDir temporary directory for merging process @param deleteInputs true to delete input files after merge, false otherwise
3289 Initializes merge queue and retrieves sorted key-value pairs. @param inName input file path @param indexIn index file path @param tmpDir temporary directory for merging process @return RawKeyValueIterator object containing sorted data
3290 Initializes a Writer instance with configuration, directory name, file system, key-value pair comparator, and compression settings. @param conf Hadoop Configuration object @param fs File System object @param dirName Path to the directory where data will be stored @param keyClass Class of WritableComparable objects to compare @param compress Compression type for writer creation @throws IOException if mkdirs fails or writer creation fails
3291 Initializes a Writer instance with configuration, directory name, and class types for keys and values. @param fs Hadoop FileSystem object @param dirName output directory name @param keyClass Class type for WritableComparable keys
3292 Computes a mask value by iterating through input readers, processing key-value pairs, and writing the sorted entries to output. @param inMapFiles array of input map files @throws IOException if any operation fails
3293 Creates a new SequenceFile writer with specified configuration and file context. @param fs FileSystem instance @param conf Hadoop Configuration object @param name Path to the output file @param keyClass target key class to be managed @param valClass target value class to be managed @param bufferSize positive integer buffer size @param replication replication factor value @param blockSize block size (must be > 0) @param createParent flag for creating parent directory @param compressionType compression type @param codec Compression codec (default: DefaultCodec if not NONE and null) @param metadata metadata to be stored in this option @return SequenceFile writer instance
3294 Parses and validates command-line options for Hadoop applications. @param opts Options object to populate with parsed arguments @param args array of command-line arguments @return true if parsing successful, false otherwise
3295 Adds a new file block to the cache with given metadata and concurrency control. @param blockNumber unique identifier for the file block @param buffer ByteBuffer containing data block @param conf Hadoop configuration settings @param localDirAllocator Local directory allocator instance
3296 Initializes segment descriptors and constructs merge queue for sorting key-value pairs. @param inNames array of input file names @param deleteInputs true to delete inputs after processing @param tmpDir temporary directory for merge operation
3297 Generates file system path mask for merging key-value pairs. @param tmpDir temporary directory for merging process @return int representing the file system path mask
3298 Configures ClassLoader instance for specified JAR file and work directory. @param args input arguments (file, workDir)
3299 Initializes parser with configuration and command-line arguments. @param conf Hadoop application configuration @param options Options object to populate with parsed arguments @param args array of command-line arguments
3300 Initializes a RawKeyValueIterator instance for sorting and merging key-value pairs. @param inFiles array of input file names @param tempDir temporary directory for merge operation @param deleteInput whether to delete intermediate files @return RawKeyValueIterator object or null if no segments found
3301 Initializes sorting operation for a list of input files with a specified output file. @param inFiles array of input Hadoop Path objects @param outFile Hadoop Path object specifying the output file
3302 Initializes file system configuration for sorting and merging key-value pairs. @param inFiles array of input files to process @param outFile output file path @param deleteInput whether to delete intermediate files during merge pass
3303 Initializes parser with command-line arguments and Options object. @param opts Options to populate with parsed arguments @param args array of command-line arguments
3304 Initializes parser with command-line arguments. @param args array of command-line arguments
3305 Initializes parser with configuration and command-line arguments. @param conf Hadoop application configuration @param args array of command-line arguments
3306 Initializes file system configuration for sorting and merging key-value pairs. @param inFiles array of input files to process @param outFile output file path @param deleteInput whether to delete intermediate files during merge pass
3307 Parses minimal generic options with Hadoop configuration and command-line arguments. @param conf Hadoop application configuration @param argArray array of command-line arguments
3308 Initializes and configures ToolRunner with configuration, tool object, and command-line arguments. @param conf Hadoop application configuration @param tool Object to configure @param args array of command-line arguments @return Exit code from tool execution
3309 Parses command-line options and returns the remaining arguments. @param conf Hadoop application configuration @param args array of command-line arguments @return List of remaining arguments
3310 Executes diagnostic tool with specified configuration and command-line arguments. @param conf Hadoop application configuration @param argv array of command-line arguments @return Exit code from tool execution
3311 Configures credential shell with command-line arguments. @param args array of input parameters
3312 Executes command-line arguments and prints output or error message. @param args array of command-line arguments
3313 Calls m2 with result of tool's m1() and original arguments.
3314 Extracts core command-line arguments from the input list. @param conf Hadoop application configuration @param args array of command-line arguments @return List of core arguments or an empty list if invalid
3315 Executes diagnostic tool with specified configuration and command-line arguments. @param argv array of command-line arguments
3316 Executes FsShell with specified arguments. @param argv array of command-line arguments
3317 Initializes CLI object with configuration settings and calls m2 with result of tool's m1() and original arguments.
3318 Executes the FindClass tool with optional command-line arguments. @param args array of string arguments
3319 Formats and processes service launch arguments. @param args list of command-line arguments
3320 Applies service configuration mask based on provided command-line arguments. @param args list of service launch arguments
3321 Invokes serviceMain with arguments. @param args command-line arguments
