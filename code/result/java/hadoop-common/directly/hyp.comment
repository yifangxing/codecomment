1 Creates a FileRange object with specified offset and length. @param offset file offset in bytes @param length file length in bytes
2 Creates a new FileRange object with the specified offset, length and reference. @param offset starting position in bytes @param length file size in bytes @param reference arbitrary user-provided data (e.g. metadata)
3 Validates a FileRange object. @param range FileRange to validate @return validated FileRange object or throws exception if invalid
4 Ensures the provided object is not null. @param obj the object to validate @param argName name of the argument for error message
5 Validates that a given long value represents a positive integer. @param value the value to validate @param argName name of the argument being validated
6 Ensures the provided long value is non-negative. @param value the value to validate @param argName name of the argument being validated
7 Checks if a value is present and throws an exception if not. @param isPresent true if the value is present, false otherwise @param argName name of the argument being checked
8 Asserts whether a value is valid. @param isValid true if valid, false otherwise @param argName name of the argument being validated
9 Validates argument value against a set of allowed values. @param isValid flag indicating whether the value is valid @param argName name of the argument being validated @param validValues comma-separated list of valid values
10 Verifies that two values are equal, throwing an exception if not. @param value1 the first value to compare @param value1Name name of the first value @param value2 the second value to compare @param value2Name name of the second value
11 Validates if the given values are integer multiples of each other. @param value1 numeric value to check @param value1Name name of the first value @param value2 numeric value against which to check @param value2Name name of the second value
12 Checks if the first value is greater than the second. @param value1 long value to compare @param value1Name name of the first value @param value2 long value to compare against @param value2Name name of the second value
13 Validates if the first value is greater than or equal to the second. @param value1 long value to validate @param value1Name name of the first value @param value2 long value for comparison @param value2Name name of the second value
14 Validates that one long value is less than or equal to another. @param value1 the first value @param value1Name name of the first value @param value2 the second value @param value2Name name of the second value
15 Validates if a given value is within a specified inclusive range. @param value the value to check @param valueName name of the value being validated @param minValueInclusive minimum allowed value (inclusive) @param maxValueInclusive maximum allowed value (inclusive)
16 Validates if a numeric value falls within a specified inclusive range. @param value numeric value to check @param valueName descriptive name of the value @param minValueInclusive minimum allowed value (inclusive) @param maxValueInclusive maximum allowed value (inclusive)
17 Validates a collection of bulk delete paths. @param paths collection of file system paths to validate @param pageSize maximum number of paths allowed per page @param basePath base directory for validation
18 Initializes upload data from a local file. @param file the file to be uploaded
19 Casts a serializable object to an IOStatisticsSnapshot. @param snapshot serialized IOStatisticsSnapshot object
20 Maps enum names (in lower case) to their corresponding Enum values with a specified prefix. @param prefix string prefix to append to each enum name @param enumClass Class of the Enum type to map @return Map of lowercase enum names to their original Enum values or null if empty
21 Sorts and returns an array of file ranges from a list. @param input list of file ranges to be sorted
22 Checks if a path is a subdirectory of another. @param parent the potential parent directory @param child the directory to check @return true if child is a subdirectory of parent, false otherwise
23 Checks if two file system paths have the same scheme but different authorities. @param qualPath1 first path to compare @param qualPath2 second path to compare @return true if paths are in the same scheme but different hosts, false otherwise
24 Removes file on exit if it exists. @param f Path to the file @return true if file was scheduled for deletion, false otherwise
25 Removes files marked for deletion on exit. @throws IOException if unable to delete file
26 Checks if a file has a CRC checksum. @param file Path object representing the file to check
27 Checks if the given file has a CRC checksum. @param file Path to the file to check @return true if the file ends with ".crc", false otherwise
28 Adjusts BlockLocation array based on desired file range. @param locations input array of block locations @param start start offset of desired range @param len length of desired range @param fileOffsetInHar offset of desired file in HAR @return modified BlockLocation array
29 Compares this FileStatus with another based on file path. @param o another FileStatus object to compare with
30 Converts array of file statuses to array of paths. @param stats array of FileStatus objects @return Path[] or null if input is null
31 Resolves intermediate file system links. @param f path to resolve
32 Retrieves replication factor from file status. @param src path to file or directory @return replication factor (short value)
33 Retrieves file block size from file status. @param f Path to file @return File block size in bytes or 0 if unavailable
34 Returns default replication value (assuming same as global default).
35 Removes thread-local statistics and folds them into root data.
36 Validates positioned read arguments to prevent errors. @param position file position @param buffer data buffer @param offset buffer offset @param length requested bytes
37 Validates non-empty byte array for upload ID. @param uploadId byte array containing the upload identifier
38 Validates uploaded parts by checking for empty uploads and invalid indices. @param partHandles Map of part handles to their indices
39 Converts capability to lowercase and validates input arguments. @param path file system path @param capability capability string (non-empty, non-null) @return capability in lowercase form
40 Initializes an IRQ handler with the given name and callback. @param name unique identifier for this IRQ handler @param handler Interrupted callback to be executed on IRQ occurrence
41 Partitions a list into smaller sub-lists of specified page size. @param originalList input list to partition @param pageSize number of elements per sub-list @return List of sub-lists or empty list if invalid input
42 Configures JSON serialization for the given class type. @param classType class type to serialize @param failOnUnknownProperties whether to fail on unknown properties @param pretty whether to use indented output
43 Initializes storage statistics from I/O statistics. @param name identifier @param scheme storage scheme @param ioStatistics input/output statistics data
44 Retrieves a map of existing statistics from the internal table. @return A synchronized map of scheme-to-statistics entries
45 Creates a new FSDataOutputStream. @param f file path @param permission file permissions @param flags creation flags @param bufferSize buffer size @param replication replication factor @param blockSize block size @param progress progress monitor (optional)
46 Creates a non-recursive FSDataOutputStream for the given file path. @param f file path to create output stream for @param permission file permissions @param overwrite whether to overwrite existing files (default: false)
47 Constructs an exception indicating permission denied access to the specified file/directory path. @param path the file/directory path that caused the access denial
48 Constructs an exception with a specific error message for a denied file system operation. @param path the path to which access was denied
49 Constructs a PathNotFoundException with the specified path and message.
50 Constructs a PathExistsException with the given file path. @param path the existing file path
51 Constructs an IOException with the specified file system path. @param path the file system path causing the exception
52 Constructs a new ClosedIOException instance with specified file path and error message.
53 Returns this builder instance.
54 Converts to Extended Short using legacy conversion. @deprecated Use toShort() instead.
55 Converts the short integer to its equivalent octal representation. @return Octal value as a short integer
56 Interns all strings in the given array using a weak intern mechanism. @param strings input array of strings @return modified string array with interned values
57 Checks if current file path points to a directory. @return true if it's a directory, false otherwise
58 Checks if the specified file is a directory. @param f Path to the file @return true if the file is a directory, false otherwise
59 Checks if a path is directory and therefore recursable. @param item PathData object containing file information
60 Retrieves ACL entries for the given PathData item. @param item PathData object containing file/directory metadata
61 Checks if a file exists and is a directory. @param f Path to the file @return true if the file exists and is a directory, false otherwise
62 Applies new permissions to a file status. @param file the file status @return updated short permission value
63 Checks if the file system entry is a regular file. @return true if it's a file, false otherwise
64 Retrieves the symbolic link associated with this path. @return The symbolic link, or null if it's not a symbolic link
65 Retrieves the length of the file in bytes. @return the length of the file, or -1 if unknown
66 Retrieves the length of a file in bytes. @param f Path to the file @return Length of the file or -1 if not found
67 Retrieves the storage policy for a given file system path. @param src file system path @return BlockStoragePolicySpi instance or null if not found
68 Sets extended attribute with specified name and value. @param path file system path @param name extended attribute name @param value byte array representing the attribute value
69 Creates an IOException with file system related error. @param path file system path @param cause underlying exception cause
70 Seeks to a specific position in the input stream. @param position new seek position
71 Reads record length from input stream. @throws IOException if file is corrupt or at end of stream
72 Retrieves the current position from the input stream. @throws IOException if an I/O error occurs
73 Registers an instance of the given expression class. @param expressionClass type of expression to register
74 Registers commands using a provided registrar class. @param registrarClass class containing registerCommands method
75 Reads data from underlying stream to provided buffer. @param pos relative position in file @param b destination byte array @param offset starting index in byte array @param length number of bytes to read @return actual number of bytes read or -1 for end-of-stream
76 Reads fully into a byte array from the current position. @param pos current file position @param b target byte array @param offset starting index in the byte array @param length number of bytes to read
77 Expands the leftmost pattern in a file glob pattern with offset. @param filePatternWithOffset file glob pattern and its offset @return List of expanded patterns or null if not found
78 Returns directory status as a single batch, ignoring provided token. @param f file path to retrieve listing for @param token ignored, not used in this implementation
79 Encodes a byte array into a string using the specified codec. @param value input byte array @param encoding encoding scheme (HEX, BASE64, or STRING)
80 Filters file statuses from a directory and adds them to the result list. @param results list of filtered FileStatus objects @param f directory path @param filter PathFilter instance for filtering files
81 Constructs a MetricsTag object from provided tag information and value. @param info tag metadata @param value the actual metric value as a string
82 Initializes an AbstractMetric instance with the given metrics information. @param info MetricsInfo object containing metric data
83 Retrieves a delegation token from the specified authenticator. @param url URL to authenticate with @param token Existing authentication token (optional) @param renewer User or service to delegate to @param doAsUser User running the request @return Delegation token, or null on failure
84 Renews a delegation token. @param url URL of the service @param token Token to renew @param doAsUser User to impersonate during renewal @return New delegationToken value or -1 on failure
85 Cancels a Kerberos delegation token. @param url URL of the service @param token Token to be cancelled @param doAsUser User running the cancellation operation
86 Initializes a ValueQueue with specified parameters. @param numValues total number of values @param lowWatermark minimum value threshold (0 < lowWatermark <= 1) @param expiry cache expiration time (in milliseconds) @param numFillerThreads number of filler threads to use @param policy synchronization generation policy @param refiller queue refiller object
87 Returns the provided object, throwing exception if it's null. @param obj Object to be checked
88 Retrieves or creates StorageStatistics by name, using the provider to generate it if not found. @param name unique identifier @param provider StorageStatisticsProvider instance @return non-null StorageStatistics object
89 Resets global storage statistics.
90 Closes the block upload data instance and performs necessary cleanups. @throws IOException if an I/O error occurs during cleanup
91 Copies a file from source to destination without buffering. @param src source file @param dst destination file
92 Closes a given Closeable stream and performs cleanup. @param stream stream to be closed
93 Closes multiple streams with logging. @param streams array of Closeable streams to be closed
94 Deletes a file and performs disk I/O checks without native I/O. @param file the file to delete and check
95 Synchronizes and flushes file output stream.
96 Closes the object and records timed operation statistics. @param none
97 Updates and returns the previous count value, ensuring new count is within valid bounds. @param newCount new value for the count, must be between 0 and buffer length @return old count value before update
98 Retrieves the address of a server connector by index. @param index unique index of the connector (0-based) @return InetSocketAddress object or null if invalid or closed
99 Initializes the GcTimeMonitor with specified observation window, sleep interval, and maximum GC time percentage. Sets up internal buffers and daemon thread. @param observationWindowMs observation window in milliseconds @param sleepIntervalMs sleep interval in milliseconds @param maxGcTimePercentage maximum GC time as a percentage of total time @param alertHandler handler for GC time alerts
100 Extracts raw path from HTTP request. @param request HTTP request object @param servletName name of the servlet to match @return raw path as a string or null if invalid request
101 Compares two FileStatus objects for equality based on their paths. @param o the object to compare with @return true if both objects have the same path, false otherwise
102 Returns hash code based on file path. @return Hash code of file path
103 Sets samples count and sum in a thread-safe manner. @param sampleCount new number of samples @param newSum updated sum value
104 Merges two MeanStatistic objects into one. @param other MeanStatistic object to merge @return updated MeanStatistic object with combined data
105 Converts a map to a string representation. @param sb StringBuilder to append the result @param type Type prefix for the map (e.g., "user") @param map Map of key-value pairs @param separator String delimiter between entries
106 Converts a map entry to a string representation. @param entry map entry containing key and value
107 Tracks duration with specified key and count. @param key unique identifier for tracked duration @param count time value to be tracked in milliseconds
108 Converts a map entry of user ID and count to a LongStatistic object. @param e map entry containing user ID and count
109 Initializes statistics map with passthrough function. @param passthroughFn function to be passed through in statistics evaluation
110 Adds a custom counter function with the specified key and evaluation logic. @param key unique identifier for the counter @param eval evaluation function that returns a Long value
111 Adds a gauge function with the specified key and evaluation expression. @param key unique identifier of the gauge function @param eval lambda expression that evaluates to a long value
112 Adds a custom evaluation function with a given key. @param key unique identifier @param eval Function to evaluate as a long value
113 Adds a function to evaluate maximum value based on input string. @param key unique identifier for the function @param eval function that takes input string and returns maximum long value
114 Adds a custom function to calculate mean statistic. @param key unique identifier for the function @param eval evaluation function that returns MeanStatistic object
115 Wraps given IOStatistics into a SourceWrappedStatistics object. @param statistics IOStatistics instance to be wrapped
116 Creates an empty statistics store instance. @return EmptyIOStatisticsStore singleton instance
117 Returns an instance of EmptyIOStatistics.
118 Retrieves atomic counter reference by specified key. @param key unique identifier for counter
119 Retrieves maximum reference value associated with the given key. @param key unique identifier for the maximum reference value
120 Retrieves minimum reference value associated with given key. @param key unique identifier or key @return AtomicLong containing minimum reference value or null if not found
121 Retrieves gauge reference value by key from the gauge map. @param key unique identifier of the gauge reference
122 Retrieves mean statistic value by its unique identifier. @param key unique key of mean statistic to fetch
123 Returns the duration representation of this time period. @return Duration object representing the same time interval
124 Sets the wrapped IO statistics. @param wrapped new IO statistics object
125 Returns the currently active instance of DynamicIOStatistics. @return The active instance or null if not yet built
126 Verifies that FlagSet is mutable. @throws IllegalStateException if FlagSet is immutable
127 Converts block data to byte array. Reads from file or stream if necessary. @throws IOException on read errors
128 Binds a signal handler to the specified signal. @throws IllegalArgumentException if binding fails
129 Unreferences an object, decrementing its reference count. @return true if the object is now closed, false otherwise
130 Creates a serialized snapshot of the given map. @param source source map to be copied @param copyFn function to serialize each value @return a new map containing the serialized values
131 Tracks duration of an operation using the specified factory and input. @param factory Duration tracker factory @param statistic Name of the statistic to track @return Result object containing tracked duration or null if failed
132 Creates a factory for paired duration trackers from two individual factories. @param first first tracker factory @param second second tracker factory
133 Retrieves the client backoff value for disconnections. @return The current backoff value in milliseconds.
134 Retrieves the count of RPC slow calls. @return number of RPC calls exceeding performance threshold
135 Retrieves the count of RPC requeue calls. @return current RPC requeue call count
136 Resets IO statistics context. Clears stored statistics and logs the event.
137 Initializes IO statistics snapshot with default data.
138 Checks if IO statistics are enabled at thread level. @return true if enabled, false otherwise
139 Initializes BuiltInGzipDecompressor with default state and CRC settings.
140 Updates and initializes the encryptor with a new IV based on the stream offset and cipher suite. @throws IOException if an I/O error occurs during initialization
141 Calculates optimal buffer size based on cipher suite block size. @param codec CryptoCodec object @param bufferSize current buffer size @return adjusted buffer size or MIN_BUFFER_SIZE if invalid
142 Links a file to another location. @param src source file @param dst destination file
143 Initializes MD5MD5CRC32GzipFileChecksum with CRC and MD5 parameters. @param bytesPerCRC number of bytes per CRC block @param crcPerBlock CRC value for each block @param md5 MD5 hash object
144 Constructs an instance of MD5MD5CRC32FileChecksum with default values.
145 Initializes an instance of MD5MD5CRC32CastagnoliFileChecksum with the specified parameters. @param bytesPerCRC number of bytes per CRC block @param crcPerBlock initial CRC value for each block @param md5 MD5 hash object to combine with this checksum type
146 Converts a glob pattern to a regex string. @param glob user input glob pattern
147 Returns an iterator over file statuses in the specified directory. @param f Path to the directory @return RemoteIterator of FileStatus objects or null if not found
148 Creates a shell path from the given File object. @param file File object to convert @param makeCanonicalPath whether to use canonical or absolute path
149 Extracts POSIX file permissions from a given mode. @param mode integer representing file mode
150 Validates and executes the command by running it. @throws IOException if a null value is found in the command
151 Validates the total length of multiple Windows command lines. @param commands variable arguments array of strings to check
152 Builds a PowerShell script to kill a process on a remote host. @param processName name of the process to terminate @param host hostname or IP address of the remote machine @return path to the generated PowerShell script file, or null if failed
153 Returns the size of the checksum. @return Size of the checksum (in bytes)
154 Calculates checksum size based on data size and bytes per checksum. @param dataSize total data size
155 Converts Checksum object to byte stream. @param sum Checksum object @param checksumSize size of the resulting byte stream @return byte array representation of the checksum
156 Increments total bytes read by specified amount.
157 Updates thread statistics with additional bytes written. @param newBytes amount of bytes to add
158 Increments read operations counter by specified amount. @param count number of read operations to add
159 Increments large read operations counter by specified amount. @param count number of large read operations to add
160 Increments write operations counter by specified count. @param count number of write operations to add
161 Increments erasure-coded bytes read by the specified amount. @param newBytes additional bytes read
162 Updates thread statistics based on distance and bytes read. @param distance network distance (0-5) @param newBytes the number of bytes to increment
163 Increments remote read time in thread statistics by given duration. @param durationMS time to add (in milliseconds)
164 Aggregates statistics across the entire dataset using the provided visitor. @param visitor StatisticsAggregator instance to perform aggregation @return aggregated result of type T or null if aggregation fails
165 Initializes ContentSummary object from Builder parameters. @param builder content summary builder instance
166 Initializes checksum with default type and no specified size. @param type Default checksum type to use @param size Default size value (always -1 in this constructor)
167 Creates a disabled checksum optimizer. @return ChecksumOpt instance with NULL type and invalid checksum value
168 Validates the provided CreateFlag enum set. @param flag enum set containing creation flags
169 Validates the URI scheme against a supported scheme. @param uri URI to validate @param supportedScheme expected scheme (e.g. http, https)
170 Constructs an InvalidPathException with the specified invalid path. @param path the invalid file or directory path
171 Constructs an InvalidPathException with the specified path and optional reason. @param path the invalid path @param reason optional reason for the invalid path
172 Finds the first non-null input in an array of inputs. @param inputs array of inputs to search @return first valid input or throws exception if none found
173 Returns the first non-null input from an array or throws exception. @param inputs array of possibly null inputs
174 Validates the provided byte buffers. @param buffers array of byte arrays to be validated
175 Validates an array of output buffers against specified criteria. @param buffers array of ByteBuffer objects to check
176 Validates the provided output buffers for consistency. @param buffers array of byte arrays to be validated
177 Validates an array of ByteBuffer objects against specified criteria. @param buffers array of ByteBuffer objects to verify
178 Closes a proxy object, either by calling its close method or that of its invocation handler. If the proxy is null or cannot be closed, throws an exception.
179 Merges checksum options from the user and defaults. @param defaultOpt default checksum settings @param userOpt user-provided checksum settings @param userBytesPerChecksum user-specified bytes per checksum value @return merged ChecksumOpt object with prioritized values
180 Returns the default port if provided by the file system implementation, otherwise falls back to a predefined constant.
181 Canonicalizes a URI by setting the default port if not specified. @param uri input URI to canonicalize @return normalized URI with default port set if necessary
182 Sets file system replication settings. @param src file path to modify @param replication desired replication factor (short value)
183 Disconnects an FTP client and logs out. @param client FTPClient instance to disconnect
184 Closes output stream and releases resources. @throws IOException if an I/O error occurs during closure
185 No-arg constructor (deprecated).
186 Constructs a ContentSummary object with specified metrics. @param length total content length @param fileCount number of files @param directoryCount number of directories @param quota allocated storage space @param spaceConsumed actual used storage space @param spaceQuota maximum allowed storage space
187 Converts time remaining until next renewal to specified TimeUnit. @return delay in specified unit (e.g., seconds, minutes)
188 Updates the renewal time by adding a specified delay and applying a 10% reduction.
189 Updates the last activity timestamp.
190 Sleeps for at least the specified duration, ignoring interrupts. @param millis minimum time to sleep in milliseconds
191 Retrieves the current time in milliseconds. @return The time as a Unix timestamp (milliseconds since epoch)
192 Awaits termination of all thread pools for the specified time. @param milliseconds maximum wait time in milliseconds @return true if all threads are terminated, false otherwise
193 Verifies data integrity by checking byte-level checksums. @param sumsBytes ByteBuffer containing checksum values @param sumsOffset offset of first checksum in sumsBytes @param data ByteBuffer to verify @param dataOffset offset of first byte in data @param bytesPerSum number of bytes per checksum value @param file Path to original file (for error reporting)
194 Opens a file stream to the specified path. @param f the file path
195 Calculates checksum file length. @param file Path to the file @param fileSize total size of the file in bytes
196 Returns a default FsStatus object representing an infinite file system.
197 Registers file system commands with the given CommandFactory. @param factory instance of CommandFactory to register classes
198 Registers custom commands with the provided CommandFactory. @param factory command factory instance
199 Registers command classes with the given CommandFactory. @param factory instance of CommandFactory to register with
200 Creates a CommandFormat with specified minimum and maximum values. @param min minimum value @param max maximum value
201 Evaluates a callable with potential IO exceptions and returns its result as a CompletableFuture. @param callable function to evaluate, raising an IOException if necessary
202 Rejects unknown mandatory keys from a collection. @param knownKeys collection of expected key values @param extraErrorText additional error message to append
203 Retrieves capabilities by filtering keys with existing capability values.
204 Builds HTTP referrer header from attributes and evaluated values. @return formatted referrer header string
205 Creates a WeakReferenceMap instance with a specified factory and listener for lost references. @param factory function to create new map entries @param referenceLost callback when a weak reference is cleared (optional)
206 Checks whether the given OutputStream has a specified capability. @param out OutputStream to check @param capability capability name to verify
207 Checks if an InputStream has a specific capability. @param in InputStream to check @param capability name of capability to verify
208 Shuts down executor with optional timeout. @param logger logging instance @param timeout shutdown duration in specified time unit @param unit time unit for timeout (e.g. seconds, milliseconds)
209 Acquires an instance of type T from the underlying data source. @return An instance of type T or null if not available
210 Attempts to acquire an instance of type T. @return The acquired object or null if failed.
211 Calculates the number of available items. @return total count of unallocated items
212 Initializes SingleFilePerBlockCache with prefetching statistics, max block count, and duration tracker factory. @param prefetchingStatistics statistics for prefetching @param maxBlocksCount maximum number of blocks @param trackerFactory factory to create duration trackers
213 Initializes a SemaphoredDelegatingExecutor with the given executor service, permit count, fairness policy, and duration tracking factory. @param executorDelegatee delegatee ExecutorService instance @param permitCount maximum number of concurrent tasks @param fair whether to use fair or unfair semaphore @param trackerFactory DurationTrackerFactory instance (optional)
214 Adds an Entry to the head of the linked list, synchronizing access. @param entry new Entry object
215 Sets the state to DONE, ensuring checksum integrity. @throws IllegalStateException if checksum changes unexpectedly
216 Sets buffer size and returns this builder instance. @param bufSize new buffer size value
217 Returns a new instance of DataInputStreamBuilder.
218 Retrieves an instance of type V associated with the current thread. @return An instance of type V or null if not found
219 Removes value associated with current thread from cache. @return cached value or null if not present
220 Sets a value for the current thread's scope. @param newVal new value to set @return previous value or null if not previously set
221 Merges a file range into the current one if they overlap or are adjacent. @param otherOffset offset of the other file range @param otherEnd end offset of the other file range @param other the other file range to merge @param minSeek minimum seek distance between ranges @param maxSize maximum size for merged result @return true if merge was successful, false otherwise
222 Creates a bulk delete operation on the specified path. @param path directory path for bulk delete operation
223 Registers expression classes with the given factory. @param factory ExpressionFactory instance
224 Registers custom print expression classes with the ExpressionFactory. @param factory Factory instance to register expressions
225 Registers expression classes with the given ExpressionFactory. @param factory ExpressionFactory instance to register classes with
226 Initializes a new Name command with specified sensitivity to case. @param caseSensitive true if case matters, false otherwise
227 Retrieves the compression codec for a given file, searching in reverse lower-case filename. @param file Path to the file
228 Resolves property name from template by formatting with SSL factory mode. @param mode SSLFactory.Mode to be formatted (e.g. SSL_FACTORY_MODE) @param template message format string @return resolved property name or null if template is invalid
229 Constructs a configuration suffix from the given name.
230 Combines two results by performing logical AND on pass and descend flags. @param other the second result to combine with @return a new combined Result object
231 Inverts result pass status and returns updated Result object.
232 Creates FindOptions object with input/output settings and command factory.
233 Checks whether an expression exists by name. @param expressionName unique identifier of the expression
234 Adds 'count' child expressions to the current expression. @param exprs deque of Expression objects @param count number of children to add
235 Adds multiple arguments to the deque from top to bottom. @param args deque of strings containing arguments @param count number of arguments to add
236 Converts a string to a URI. @param pathString input string to parse into URI components @return URI object or throws exception if parsing fails
237 Initializes order comparator based on time or size ordering preference. @param isOrderTime whether to order by time @param isOrderSize whether to order by size @param isOrderReverse whether to reverse the order
238 Checks if command is deprecated. @return true if replacement command exists, false otherwise
239 Returns the command name, either from the local 'name' field or a command field.
240 Sets preserve status for file attributes. @param preserve true to enable preservation, false to clear
241 Initializes MetricsRecordBuilder with given parameters. @param parent the parent MetricsCollector @param info the MetricsInfo object @param rf the Record Filter @param mf the Metric Filter @param acceptable whether the record is acceptable
242 Initializes a ChunkedArrayList with specified chunk capacity and size constraints. @param initialChunkCapacity minimum number of elements per chunk @param maxChunkSize maximum allowed chunk size
243 Finds the index of the first default ACL entry in the list. @return index or PIVOT_NOT_FOUND if none found
244 Creates a snapshot of the specified directory. @param path directory to snapshot
245 Adds an option with a specified value to the collection. @param option unique identifier of the option
246 Initializes a new table builder with the given header columns. @param headers varargs of column headers
247 Checks if this collection is empty. @return true if no elements are present, false otherwise
248 Initializes a new shell with the specified execution interval. @param interval time interval between executions (in milliseconds)
249 Initializes a Token object with provided credentials and service info. @param identifier unique identifier bytes @param password password bytes @param kind token kind (e.g. authentication, authorization) @param service service or application name
250 Initializes an empty token object with default values.
251 Initializes a Globber instance for pattern-based file iteration. @param fc FileContext providing tracing and logging capabilities @param pathPattern Pattern to match against files @param filter Optional filter to narrow down matched files @param resolveSymlinks Whether to follow symbolic links in matching
252 Constructs a human-readable error message. @return detailed error description
253 Handles SASL connection failure by retrying authentication or throwing an exception. @param currRetries current retries @param maxRetries maximum retries @param ex IOException thrown during connection attempt
254 Checks if the given file system has ViewFS scheme. @param fileSystem file system to check @return true if ViewFS, false otherwise
255 Sets quota for a namespace and storage space. @param src Path to resource @param namespaceQuota Quota for namespace in bytes @param storagespaceQuota Quota for storage space in bytes
256 Sets storage quota by type. @param src file path @param type storage type (e.g. disk, ram) @param quota new quota value in bytes
257 Creates an MultipartUploader instance with base path. @param basePath base directory for multipart uploads
258 Lists located file status for the specified path. @param f file system path
259 Lists located files and directories under the given path. @param f file system path to list @return iterator of LocatedFileStatus objects or null if empty
260 Retrieves checksum for the given file. @param f Path to the file
261 Sets extended attribute with specified name and value. @param path file path @param name attribute name @param value attribute value in bytes
262 Opens a file with specified options and buffering. @param path file location @param parameters OpenFileParameters object @return FSDataInputStream or null on failure
263 Opens a file with custom options asynchronously. @param path the file path to open @param parameters OpenFileParameters object for customization @return FSDataInputStream or null if not opened successfully
264 Opens a file asynchronously with specified options. @param path the file path @param parameters OpenFileParameters containing buffering and other settings @return FSDataInputStream for reading or null on failure
265 Opens a file with specified options asynchronously. @param pathHandle unique file identifier @param parameters OpenFileParameters object containing buffer size and other options @return CompletableFuture containing FSDataInputStream or null if not found
266 Retrieves all available storage policies. @return Collection of BlockStoragePolicySpi objects
267 Initializes and maps file systems for given mount points. @param mountPoints list of mounted file system targets @return map of file system instances keyed by mount path
268 Builds ResolveResult for regex mount point based on given parameters. @param resultKind Result kind @param resolvedPathStr Resolved path string @param targetOfResolvedPathStr Target of resolved path string @return ResolveResult object or null if initialization fails
269 Returns an instance of ChildFsGetter with scheme set to current scheme. @return ChildFsGetter object
270 Initializes INodeLink with specified parameters. @param pathToNode path to the node @param aUgi user group information @param targetMergeFs target file system @param aTargetDirLinkList list of target directory links
271 Initializes an INodeLink instance with the specified parameters. @param pathToNode path to node @param aUgi user group information @param createFileSystemMethod method to create file system @param aTargetDirLink target directory link
272 Replaces regex capture groups in a path with actual values. @param parsedDestPath original destination path @param srcMatcher source matcher object @param regexGroupNameOrIndexStr group name or index to replace @param groupRepresentationStrSetInDest set of placeholder strings in dest path @return updated path with replaced capture groups
273 Decrypts data using provided Decryptor and stores result in output buffer. @param decryptor decryption engine @param inBuffer input data to be decrypted @param outBuffer output buffer for encrypted data @param padding encryption padding value
274 Ensures context is initialized and non-zero.
275 Checks if the parent ZNode exists. @return true if parent ZNode exists, false otherwise
276 Returns the default file system prefix. @return The configured prefix or the default mount table value.
277 Deserializes a string into a RegexMountPointResolvedDstPathReplaceInterceptor. @param serializedString String representation of the interceptor @return Interceptor object or null if malformed
278 Returns a readable byte channel from the socket input stream. @return a SocketInputStream object as a ReadableByteChannel
279 Calculates the length of a checksum file. @param file Path to the file @param fileSize total size of the file in bytes @return length of the corresponding checksum file in bytes
280 Retrieves the filesystem identifier (Windows: drive letter, Unix/Linux: path prefix). @throws IOException if an I/O error occurs
281 Determines the filesystem mount point of the specified path. @return mount point as a string or throws IOException if an error occurs
282 Calculates percentage of capacity currently in use. @return Percentage value between 0 and 100
283 Initializes the input checker with file and retry details. @param file Path to the file being checked @param numOfRetries Number of retries for failed checks
284 Checks if the given InputStream has a read capability via ByteBuffer. @param stream input stream to check @return true if stream is ByteBufferReadable, false otherwise
285 Initializes initialization context with current thread ID.
286 Sets the command based on the provided tool object. @param tool Object instance to extract class information
287 Sets an integer option by key. @param key unique option identifier @param value integer value to set
288 Converts floating-point value to long and fetches corresponding option. @param key unique option identifier @param value floating-point value to convert
289 Sets a long-typed option with the given key and value. @param key unique option identifier @param value long integer value to set
290 Converts a double to long and passes it to the optLong method. @param key unique key identifier @param value numeric value to be stored
291 Converts integer to long with validation. @param key identifier key @param value integer value to convert
292 Converts float to long and calls mustLong with it. @param key unique identifier key @param value float value to convert
293 Converts a numeric value to a long and calls mustLong. @param key unique identifier @param value numeric value to convert
294 Converts double to long and calls mustLong with it. @param key unique identifier @param value numeric value to be converted and validated
295 Retrieves a row of text at the specified index, wrapping and justifying as needed. @param idx row index
296 Delegates local output setup to underlying file system. @param fsOutputFile path to output file on file system @param tmpLocalFile temporary local file path
297 Calculates the effective permission by combining server-provided permissions with ACL entries. Handles group and default mask cases. @param entry AclEntry object @param permArg FsPermission argument @return FsAction representing the effective permission
298 Constructs a new PermissionStatus object. @param user username associated with the permission @param group group name associated with the permission @param permission FsPermission value for the given user/group
299 Parses ACL entry string into AclEntry object. @param aclStr ACL entry string @param includePermission whether to parse permission from the string @return Parsed AclEntry object or null if invalid input
300 Returns a stable string representation of the AclEntry. @return String representation of the entry, e.g. "default:read:name:write"
301 Splits input string into an array of substrings using the specified delimiter. @param str input string to split @param delim delimiter character @return array of strings or null if input is empty
302 Returns a collection of strings split from input string using comma as delimiter. @param str input string to be split
303 Parses permission string into a Permission object based on symbolic or octal patterns. @param modeStr permission string to parse @param symbolic symbolic pattern for parsing @param octal octal pattern for parsing
304 Closes the inner block based on its current state. @throws IOException if an I/O error occurs during closing
305 Verifies that the stream is open.
306 Transitions to a new destination state. @param current the current state @param next the target state
307 Writes bytes from buffer into output stream. @param buffer byte array containing data to write @param offset starting index in buffer @param length number of bytes to write @return 0 on success, throws IOException otherwise
308 Flushes the writer and verifies its state to ensure it's in the Writing mode.
309 Sets an attribute with the given key and value. @param key unique identifier for the attribute @param value new value for the attribute
310 Extracts query parameters from a URI header. @param header URI header string @return Map of parameter names to values or empty map if none found
311 Returns the total data size (if cached) or recalculates it from used buffer capacity.
312 Resolves an existing file path. @param f existing file path
313 Synchronizes file system cache with underlying storage.
314 Prints file system statistics.
315 Retrieves statistics for a given URI. @param uri unique identifier
316 Creates an uploader builder with base path. @param basePath directory where data will be uploaded from
317 Retrieves or initializes an AllocatorPerContext instance for the specified context configuration item name. @param contextCfgItemName unique identifier of the context configuration item
318 Retrieves position value from cache. @return cached position value as a long integer
319 Flushes buffered output to file system. @throws IOException if I/O error occurs
320 Returns collection of trimmed strings split from input string. @param str input string to process
321 Constructs LoggingStateChangeListener with default log handler.
322 Constructs a ServiceStateException with the given error message. @param message detailed error description
323 Constructs a ServiceStateException with a custom exit code. @param exitCode unique error code @param message human-readable error description @param cause underlying exception (optional)
324 Converts or wraps an exception into a RuntimeException. @param text error message @param fault original exception to be converted/wrapped
325 Converts a Throwable to a RuntimeException or ServiceStateException. @param fault the exception to be converted
326 Initializes ServiceStateModel with specified name and default state. @param name unique service identifier
327 Validates state transition from one service state to another. @param current current service state @param proposed proposed service state @return true if transition is valid, false otherwise
328 Returns a string representation of this location, including name and state.
329 Initializes HadoopUncaughtExceptionHandler with optional initial configuration.
330 Handles incoming signal and notifies the interrupt handler. @param s Signal object containing ID and number information
331 Retrieves an IRQ handler by its name. @param signalName the name of the IRQ handler to look up @return IrqHandler object or null if not found
332 Creates a ServiceLaunchException with specified exit code and underlying cause. @param exitCode service launch exit code @param cause underlying exception that caused the failure
333 Constructs a ServiceLaunchException with a custom exit code and error message. @param exitCode non-zero exit code indicating service launch failure @param message detailed description of the launch error
334 Constructs a ServiceLaunchException with an exit code and formatted message. @param exitCode the process termination status @param format the error message format string @param args variable arguments for String.format()
335 Constructs ServiceLaunchException with custom error message and optional arguments. @param exitCode exit status code @param cause underlying exception @param format custom error message format string @param args variable number of arguments for the formatted message
336 Shuts down this thread by calling the shutdown() method.
337 Constructs a ServiceLauncher instance with the given service class name. @param serviceClassName name of the service class to be launched
338 Logs and records an ExitException with its exit code. @param exitException exception containing exit code and optional nested cause
339 Initializes command options using the createOptions() factory method. @see #createOptions()
340 Loads Configuration classes and returns the count of successfully created instances. @return number of loaded Configuration instances
341 Registers a global ServiceStateChangeListener. @param l listener to be added to the global listeners list
342 Removes and unregisters a global Service State Change Listener. @param l listener to be removed
343 Resets global listeners to their default state.
344 Notifies all registered listeners and a global listener list.
345 Initializes service with new configuration if provided. @param conf new Configuration object
346 Adds a service to the collection if the provided object is an instance of Service. @param object Object to check and potentially add as a service
347 Stops a service quietly, logging warnings if an exception occurs. @param log logging instance @param service Service to stop @return Exception object or null if successful
348 Attempts to stop a service and logs any exceptions silently. @param log logger instance @param service Service object to be stopped @return Exception if service cannot be stopped, or null on success
349 Checks if an InputStream supports reading byte buffer fully available. @param in input stream to check for capability @return true if capable, false otherwise
350 Checks if the singleton instance has been loaded. @return true if loaded, false otherwise
351 Converts an object of type T to a JSON-formatted string. @param instance the object to be converted
352 Converts a checked function that raises IOException to an unchecked function. @param fun the original function to convert
353 Converts an instance to JSON and then back to the original type. @param instance object to convert @return converted object or null if conversion failed
354 Converts byte array to JSON object and returns deserialized instance of type T. @param bytes serialized data in byte format
355 Copies properties from another UTF8 instance. @param utf8 source UTF8 object to copy from
356 Writes a string to the output stream with UTF-8 encoding. @param out DataOutput stream to write to @param s String to be written (truncated if too long) @return length of written string or throws IOException if invalid
357 Skips over specified number of bytes in input stream. @param in input data to be skipped
358 Seeks to a specific file position and updates the internal key. @param n target file position
359 Retrieves and returns a writable object associated with the given key. @param n unique identifier @param value default writable object to return if not found @return Writable object or null if not found
360 Initializes an OutputBuffer instance with a default Buffer. @param buffer underlying Buffer instance (default is created internally)
361 Returns raw data from internal buffer. @return binary data as byte array
362 Returns the length of the underlying data buffer.
363 Resets the output buffer to its initial state. @return The OutputBuffer instance itself for method chaining.
364 Compares two objects using their Comparable interface. @param a first object to compare @param b second object to compare
365 Compares two byte arrays with specified offsets and lengths. @param b1 first byte array @param s1 offset in first byte array @param l1 length of first byte array segment @param b2 second byte array @param s2 offset in second byte array @param l2 length of second byte array segment @return result of comparison (negative if less, positive if greater)
366 Calculates hash value for byte array slice. @param bytes input byte array @param length number of bytes to consider @return hash code as an integer
367 Converts an integer from byte array to float value. @param bytes input byte array @param start starting index of the integer in the byte array @return float representation of the integer or NaN if invalid
368 Reads a 64-bit integer from the specified byte array, starting at the given offset. The high and low integers are read separately. @param bytes byte array containing the data @param start offset to begin reading from @return the 64-bit integer value
369 Reads a signed integer value from the given byte array starting at the specified offset. @param bytes the byte array to read from @param start the offset within the byte array where the value starts @return the read integer value
370 Constructs BytesWritable from a byte array. @param bytes input byte array @param length ignored; always uses entire input array
371 Returns bytes representation of data.
372 Returns the length of the underlying data structure. @deprecated Use getLength() directly instead. @return Length of the data structure
373 Updates container capacity and resizes internal storage. @param capacity new maximum size in bytes
374 Returns the size of the buffer tree. @param direct whether to access directly or not
375 Triggers readahead streams with dynamic positioning and cancellation. @param identifier unique stream identifier @param fd file descriptor @param curPos current position in the stream @param readaheadLength requested readahead length @param maxOffsetToRead maximum allowed offset @param lastReadahead previous readahead request (null if none) @return new ReadaheadRequest or null if we've reached the end of the stream
376 Appends a key-value pair to this output stream. @param key WritableComparable object to be appended
377 Advances to the next record in the input and returns true if successful. @param key WritableComparable object representing the current record
378 Retrieves the current key value. @throws IOException if an error occurs accessing the key
379 Checks file/directory accessibility by desired right. @param path absolute file/directory path @param desiredAccess requested access level (e.g. READ, WRITE, EXECUTE)
380 Checks whether native code has been loaded and is available. @return true if native code is loaded and available, false otherwise
381 Checks whether native code has been loaded and is available. @return true if native code is loaded and ready to use, false otherwise
382 Checks if native code is available to load, excluding Sparc architecture. @return true if native code can be loaded, false otherwise
383 Unmaps a mapped buffer, if supported. @param buffer MappedByteBuffer object
384 Frees a database ByteBuffer, unmapping it if supported. @param buffer ByteBuffer object to be freed
385 Writes data from input stream to internal buffer. @param in DataInput stream containing data @param length number of bytes to read from stream
386 Creates an EnumSetWritable instance from a given EnumSet and element type. @param value the EnumSet to wrap @param elementType the class of elements in the EnumSet
387 Constructs a new DataInputBuffer instance using a default Buffer.
388 Resets the internal buffer with new data. @param input byte array containing new data @param length number of bytes to read from input array
389 Resets the buffer with new data from the specified range of the input array. @param input byte array to read from @param start starting index in the array (inclusive) @param length number of bytes to reset the buffer with
390 Retrieves current position from underlying buffer. @return current position in buffer as an integer
391 Returns the length of the underlying data buffer. @return Length of the data in the buffer.
392 Initializes ECSchema object from a map of options. @param allOptions map of configuration settings
393 Initializes an ECSchema object with given parameters. @param codecName name of the encoding scheme @param numDataUnits number of data units in the scheme @param numParityUnits number of parity units in the scheme
394 Returns the required number of data blocks based on schema. @return number of data units in schema
395 Returns the number of parity blocks required. @return Number of parity units as defined by the schema
396 Retrieves a RawErasureCoderFactory by its name within the specified codec. @param codecName unique codec identifier @param coderName name of the coder to retrieve @return RawErasureCoderFactory object or null if not found
397 Creates an ECBlockGroup instance from given data and parity blocks. @param dataBlocks array of data blocks @param parityBlocks array of corresponding parity blocks @return created ECBlockGroup object
398 Returns the total count of erased blocks.
399 Counts the number of erased blocks in the given array. @param inputBlocks array of ECBlock objects @return number of blocks marked as erased
400 Converts an array of ECChunks to an array of ByteBuffer objects. @param chunks array of ECChunk objects @return array of ByteBuffer objects, or null if a chunk is null
401 Fetches erased blocks from the specified ECBlockGroup. @param blockGroup group of blocks to search for erasures @return array of ECBlock objects representing the erased blocks
402 Retrieves an array of input blocks from the given EC block group. @param blockGroup ECBlockGroup object containing data and parity blocks
403 Calculates bitwise XOR of two integers. @param x first integer value @param y second integer value @return result of the bitwise XOR operation (x^y)
404 Fetches the product of two integers from a precomputed table. @param x first multiplicand @param y second multiplicand @return their product or -1 if invalid input
405 Returns quotient from division table based on input values. @param x dividend value @param y divisor value @return integer result of division or -1 if invalid inputs
406 Calculates the power of a base number using logarithmic table lookups and modulo arithmetic. @param x non-negative base value @param n exponent value @return result of x to the power of n, or 0 if x is negative
407 Dumps the ECChunk object to the console in hexadecimal format. @param chunk ECChunk object to dump
408 Allows changing of input fields based on coder options. @return true if allowed, false otherwise
409 Checks if input fields can be changed based on coder options. @return true if inputs can be changed, false otherwise
410 Returns whether verbose dump is allowed based on coder options. @return true if verbose dump is enabled, false otherwise
411 Returns whether verbose dump is allowed based on coder options.
412 Resets and reinitializes a ByteBuffer to specified length. @param buffer the ByteBuffer to reset @param len new length of the buffer @return the modified buffer
413 Resets a section of the provided buffer with a new, empty chunk. @param buffer input byte array to modify @param offset starting position in the buffer @param len length of the section to reset @return modified buffer with the specified section filled
414 Converts this encoding state to a byte array-based representation. @return ByteArrayEncodingState object with updated inputs and outputs
415 Converts the current state to a ByteBuffer-based encoding state. @return A new ByteBufferEncodingState object
416 Converts the current decoding state to a byte buffer-based state. @return ByteBufferDecodingState object
417 Converts the current decoding state to a byte array representation. @return ByteArrayDecodingState object with updated input/output arrays and offsets
418 Generates a Cauchy matrix in the provided byte array. @param a byte array to store the matrix @param m size of the matrix @param k number of identity sub-matrices in the top-left corner
419 Inverts a square matrix using Gaussian elimination. @param inMatrix input matrix to invert @param outMatrix output matrix containing the inverted matrix @param n size of the square matrix (n x n)
420 Encrypts data using GF256 tables and SIMD instructions. @param gfTables array of GF256 coefficients @param dataLen length of the data to encrypt @param inputs array of input byte arrays @param inputOffsets array of input offsets @param outputs array of output byte arrays @param outputOffsets array of output offsets
421 Performs bitwise encoding of input data using GF256 tables. @param gfTables array of precomputed GF256 tables @param inputs array of input ByteBuffer objects @param outputs array of output ByteBuffer objects
422 Retrieves or creates a Galois Field instance based on the provided field size and primitive polynomial. @param fieldSize size of the Galois Field @param primitivePolynomial defining polynomial for the Galois Field @return GaloisField instance or null if creation failed
423 Solves a Vandermonde system using the given x and y arrays. @param x array of unique values @param y corresponding array of coefficients
424 Initializes an empty ECBlock instance with default values.
425 Updates reported byte count by adding compressed stream bytes. @param count number of bytes to add
426 Reads a single byte from the input stream and updates processed byte count. @throws IOException if an I/O error occurs
427 Creates Huffman decoding tables for multiple groups. @param alphaSize alphabet size @param nGroups number of groups to process
428 Recursive QuickSort algorithm with a stack-based implementation. Sorts the data in-place using the provided arrays and thresholds. @param dataShadow Data structure containing the sorting arrays @param loSt Lower bound of the current sort range @param hiSt Upper bound of the current sort range @param dSt Current depth level
429 Retrieves total bytes written to stream. @return current byte count or -1 if invalid
430 Retrieves the total bytes read from the stream.
431 Calculates remaining data in stream. @return total bytes available (user buffer + compressed direct buffer)
432 Resets the stream and associated buffers to their initial state.
433 Initializes Bzip2 compressor with default settings. @param blockSize compression block size @param workFactor compression work factor @param directBufferSize direct buffer size for compression
434 Returns total bytes written to stream. @return total bytes written in long value
435 Retrieves the total number of bytes read from the underlying stream.
436 Initializes a new CompressorStream instance from an OutputStream. @param out underlying output stream to compress data into.
437 Initializes a new instance of the decompressor with default buffer size. @param directBufferSize initial size of the direct buffer (default is DEFAULT_DIRECT_BUFFER_SIZE)
438 Sets input data from byte array, offset, and length. @param b input byte array @param off starting offset in the array @param len number of bytes to process
439 Determines whether input is still required. @return true if no more input needed, false otherwise
440 Decompresses data from input buffer into user-provided byte array. @param b input buffer to decompress from @param off starting offset in the input buffer @param len maximum length of compressed data to retrieve @return actual length of decompressed data written to output buffer
441 Initializes SnappyCompressor with default direct buffer size.
442 Compresses data in the provided byte array. @param b input data to compress @param off starting offset within the array @param len number of bytes to compress @return the number of compressed bytes written or 0 if no compression was performed
443 Reinitializes this object with new configuration. @param conf new configuration to apply
444 Initializes a DecompressorStream instance from an input stream. @param in input stream to decompress
445 Calculates the number of bytes remaining in the stream. @return total bytes available for consumption or -1 if invalid
446 Resets internal state to initial conditions.
447 Returns the total number of bytes written to the stream. @return Total bytes written
448 Returns the total number of bytes read from the underlying stream. @return Total byte count or -1 if invalid stream state
449 Constructs a new Lz4Decompressor instance with default direct buffer size. @param bufferSize initial size of the decompression buffer
450 Sets input data from a byte array, offset and length. @param b the byte array to set as input @param off starting position in the array @param len number of bytes to process
451 Determines whether input is needed to continue processing. @return true if input is required, false otherwise
452 Decompresses data into the provided byte array. @param b target byte array @param off starting offset @param len number of bytes to decompress @return actual number of decompressed bytes
453 Constructs an Lz4 compressor with specified direct buffer size. @param directBufferSize size of direct buffer for compression
454 Compresses a byte array and writes it to the provided buffer. @param b input data to compress @param off offset into the buffer where output should be written @param len length of data in the buffer to compress @return number of bytes compressed or 0 if no compression was performed
455 Reinitializes the system configuration. @param conf new configuration settings to apply
456 Retrieves CompressionCodec instance by its name. @param codecName unique codec identifier @return CompressionCodec object or null if not found
457 Returns the count of leased compressors for a given compression codec. @param codec CompressionCodec object
458 Returns count of leased decompressors for given compression codec. @param codec CompressionCodec object
459 Returns the compressor type based on native zlib loading status. @param conf Hadoop Configuration object @return Class of either ZlibCompressor or BuiltInZlibDeflater
460 Returns decompressor type based on native zlib availability. @param conf configuration object @return Decompressor class (native or built-in)
461 Initializes native zlib library. @VisibleForTesting
462 Reinitializes the compressor with a new configuration. @param conf Compression configuration to use
463 Initializes ZlibCompressor with specified compression settings. @param level Compression level (e.g. best, fast) @param strategy Compression strategy (e.g. stream, direct) @param header Compression header settings @param directBufferSize Size of direct buffer for compressed data
464 Returns total bytes written to stream. @return total bytes written as a long value
465 Returns total bytes read from stream. @return Total bytes read.
466 Initializes Zlib decompressor with given compression header and direct buffer size. @param header CompressionHeader object containing decompression settings @param directBufferSize Size of the direct buffers for compressed and uncompressed data
467 Returns total bytes written to stream. @return Total byte count or -1 if invalid stream
468 Returns the total bytes read from the stream. @return total bytes read or throws exception if invalid
469 Calculates the total remaining bytes in the stream. @return The sum of buffered and compressed data lengths.
470 Resets internal state to initial conditions.
471 Verifies the gzip trailer fields: CRC-32 and decompressed size. @throws IOException on validation failure
472 Writes a variable-length integer to the output stream. @param stream DataOutput stream to write to @param i integer value to write
473 Reads a variable-length long integer from the input stream. @param stream DataInput source @return long value or throws IOException if an error occurs
474 Retrieves a ByteBuffer from the internal pool or allocates a new one. @param direct whether to use direct buffers @param length desired buffer size @return allocated ByteBuffer or null if failed
475 Inserts a buffer into the cache with a unique (capacity, time) key. @param buffer ByteBuffer object to be cached
476 Returns the character at specified position in the string. @param position index of the character to retrieve @return Unicode code point of the character or -1 if out-of-range
477 Encodes and sets the input string as a byte array. @param string String to be encoded
478 Appends UTF-8 encoded byte array to internal buffer. @param utf8 encoded byte array @param start starting index in the byte array @param len length of bytes to append
479 Appends UTF-8 encoded byte array to existing buffer. @param utf8 byte array to append @param start starting index in byte array @param len number of bytes to append
480 Reads data from input stream with known length. @param in DataInput stream to read from @param len Known length of data to be read
481 Decodes UTF-8 encoded bytes to a string. @param utf8 byte array containing UTF-8 encoded data
482 Decodes UTF-8 encoded bytes to a string. @param utf8 UTF-8 encoded byte array @param start starting index in the byte array @param length number of bytes to decode @param replace whether to replace unencodable characters
483 Validates UTF-8 encoded byte array. @throws MalformedInputException if input is not valid UTF-8
484 Adds a class to the internal map with a unique ID. @param clazz Class object to add
485 Initializes AbstractMapWritable with default writable types and configuration.
486 Returns an Option representing the file system. @param fs FileSystem object
487 Creates a new key instance with specified value and weight. @param value byte array representing the key @param weight numerical weight associated with the key
488 Cleans up resources and parent container.
489 Converts a List to an array with elements of the same type. @param list The input list to convert
490 Initializes an empty InputBuffer instance. @param buffer internal data structure (defaulting to new Buffer())
491 Resets the internal buffer with new data. @param input the byte array to populate the buffer @param length the number of bytes from input to use
492 Resets buffer with specified data. @param input byte array to reset from @param start starting index in input array @param length number of bytes to reset
493 Retrieves the current position in the buffer. @return current position as an integer value
494 Returns the length of the underlying buffer.
495 Reads and constructs an MD5 hash object from a DataInput stream.
496 Computes the MD5 hash of an input stream. @param in InputStream to digest @return MD5Hash object representing the computed hash
497 Computes the MD5 hash of a given data segment. @param data input byte array @param start starting index of the data segment @param len length of the data segment @return MD5Hash object representing the computed hash
498 Computes the MD5 hash of a byte array sequence. @param dataArr array of byte arrays to process @param start starting index for each byte array chunk @param len length of each byte array chunk @return MD5Hash object containing the computed digest
499 Calculates hash code based on quarter digest.
500 Sets the MD5 digest from a hexadecimal string. @param hex hexadecimal representation of the digest
501 Deserializes a Message object from the given DataInput. @param protoClass Class of the Message to deserialize @param dataIn input stream containing serialized message data @throws IOException if serialization fails or invalid data is encountered
502 Synchronizes the specified file or directory with the file system. @param fileToSync file or directory to sync
503 Constructs a BooleanWritable instance with the given boolean value. @param value boolean value to be written
504 Creates a custom retry policy based on remote exceptions. @param defaultPolicy the default retry policy @param exceptionToPolicyMap map of exception types to custom policies
505 Checks if an empty timeout period has elapsed. @param time duration to wait before considering empty
506 Returns the current time in nanoseconds.
507 Creates a custom retry policy based on exceptions. @param defaultPolicy default retry policy @param exceptionToPolicyMap map of exception classes to custom policies
508 Retrieves the connection ID associated with the first proxy.
509 Parses a comma-separated string into MultipleLinearRandomRetry object. @param s input string containing comma-separated elements
510 Creates a custom retry policy based on exceptions. @param defaultPolicy default retry policy @param exceptionToPolicyMap map of exception types to custom policies @return custom ExceptionDependentRetry policy instance
511 Creates an IOException from a list of exceptions. @param exceptions list of individual IOExceptions @return single IOException or MultipleIOException if multiple
512 Returns the count of block regions in data index. @return number of block regions
513 Returns the name of the default compression algorithm. @return Name of the default compression algorithm or null if not set
514 Reads a variable-length integer from the given input stream. @param in data input stream
515 Writes a variable-length integer to the output stream. @param out DataOutput stream @param n integer value to be written
516 Checks if the underlying file metadata is sorted. @return true if sorted, false otherwise
517 Returns total entry count from file metadata. @return number of records in the file
518 Closes the BCF reader resource.
519 Returns comparator name from file metadata. @return Comparator string value or null if not available.
520 Copies byte array from another BytesWritable instance. @param other source BytesWritable object
521 Initializes a new instance of ByteArray with the specified byte array. @param buffer the byte array to initialize from
522 Finds the index of the block region closest to the given offset. @param offset long value representing the position @return index of nearest block region or -1 if not found
523 Finds the lower bound of a sorted collection for a given key. @param key RawComparable object to search for @return Index of the matching element or -1 if not found
524 Returns the upper bound index of a given key in the sorted TFile. @param key RawComparable object to search for @return index of matching element or -1 if not found
525 Compares this Location with another based on block and record indices. @param other Location object to compare with
526 Retrieves key from byte array. @param buf byte array containing key data @return key integer value or throws IOException if failed
527 Reads value from input stream into buffer, handling known and unknown length cases. @param buf target byte array @param offset starting position in the buffer @return actual number of bytes read or written
528 Returns the raw size of the block region. @return Raw size in bytes
529 Returns compressed size of current block region. @return Compressed size in bytes
530 Retrieves the start position of the current block region. @return The offset of the current block region
531 Wraps a DataOutput instance as an OutputStream. @param out DataOutput to be wrapped @return OutputStream wrapper or original OutputStream if already one
532 Compares two byte arrays lexicographically. @param buffer1 first byte array @param offset1 offset in buffer1 to start comparison @param length1 length of comparison in buffer1 @param buffer2 second byte array @param offset2 offset in buffer2 to start comparison @param length2 length of comparison in buffer2 @return negative/positive value if first/second array is less/greater, or 0 for equal
533 Initializes a new instance of DataOutputBuffer with default settings.
534 Retrieves raw data from internal buffer. @return raw data as a byte array
535 Returns the length of the underlying data buffer. @return Length of the buffer in bytes
536 Writes a 32-bit integer value to the buffer. @param v integer value to write @param offset current buffer position
537 Calculates the distance between two nodes in a tree structure. @param node1 first node @param node2 second node @return distance between the nodes, or MAX_VALUE if one of the nodes is null or not found
538 Checks if a node is within the specified scope. @param node Node object to check @param scope Scope string (e.g., directory path) @return true if node is in scope, false otherwise
539 Splits the full path of a Node into individual components. @param node Node object with associated path @return array of path components or null if invalid
540 Returns a string representation of this object. @return Path as a string
541 Removes a node from the network topology, updating internal state and logging. @param node Node to remove
542 Retrieves a list of datanodes within the specified rack location. @param loc rack location string
543 Retrieves a node by location. @param loc unique node location identifier @return Node object or null if not found
544 Returns a string representation of the object, including number of racks and nodes.
545 Checks if two nodes are on the same rack. @param node1 first node to compare @param node2 second node to compare @return true if both nodes have the same parent(s), false otherwise
546 Selects a random node from the scope, excluding specified nodes. @param parentNode Inner node containing leaf nodes @param excludedScopeNode Node to exclude from scope @param excludedNodes Collection of nodes to exclude from selection @return Randomly chosen node or null if not found
547 Calculates network distance between two nodes using their locations. @param reader Node containing the starting location @param node Node containing the target location @return Network distance (weight) between the nodes, or Integer.MAX_VALUE if invalid
548 Adds a node to the empty rack set and updates rack map. @param node Node object to add
549 Transfers data from a file channel to another, tracking time spent waiting and transferring. @param fileCh source FileChannel @param position current transfer position @param count remaining bytes to be transferred @param waitForWritableTime optional LongWritable for wait time (if null, not tracked) @param transferToTime optional LongWritable for total transfer time (if null, not tracked)
550 Normalizes a collection of host names. @param names collection of host names to normalize @return list of normalized host names
551 Formats destination and local host details as a string. @param destHost destination hostname @param destPort destination port number @param localHost local hostname @return formatted host details string
552 Retrieves a list of IP addresses within the specified subnet. @param subnet network address and mask @param returnSubinterfaces whether to include subinterface IPs @return List of InetAddress objects or an empty list if none found
553 Retrieves a specified number of available socket ports. @param numOfPorts the desired number of free ports @return Set of unique, acquired port numbers or throws exception if unable to acquire required number of ports
554 Initializes a new instance of RawScriptBasedMapping.
555 Initializes a new instance of CachedDNSToSwitchMapping with a given raw mapping. @param rawMapping raw DNSToSwitchMapping to cache
556 Initializes a NodeBase with the given file system path. @param path absolute or relative file path
557 Initializes a new NodeBase with given name and location. @param name unique identifier for this node @param location geographical coordinates of the node
558 Constructs a new NodeBase instance with given details. @param name node name @param location node location (normalized) @param parent parent node reference @param level node hierarchy level
559 Handles callback for a file descriptor, closing it if necessary. @param caller context of the call @param entries map of active file descriptors @param fdSet set of active file descriptors @return true if fd was closed, false otherwise
560 Checks if the underlying resource is open. @return true if the resource is currently open, false otherwise
561 Closes the DomainSocket and its underlying file descriptor, releasing system resources.
562 Trims idle selectors from the provider map. @param now current timestamp
563 Retrieves a list of dependencies for the given name, normalized to an IP address. @param name host name to fetch dependencies for @return List of string dependencies or empty list if not found
564 Sets read timeout for the underlying socket. @param timeoutMs milliseconds to wait before timing out
565 Retrieves IP addresses for the specified network interface. @param strInterface name of the network interface @return array of IP addresses, or cached host address if default interface
566 Retrieves a list of InetAddresses for the specified interface. @param strInterface name of the network interface (e.g. "eth0") @param returnSubinterfaces whether to include subinterface addresses @return List of InetAddress objects or an empty list if not found
567 Retrieves the node group for a given location. @param loc network location string @return node group name or null if not found
568 Returns a string representation of the network topology. @return formatted string containing mapping, switches, and nodes count
569 Verifies if a DNS-to-switch mapping represents a single switch. @param mapping DNS-to-switch mapping to check @return true if the mapping is for a single switch, false otherwise
570 Retrieves the current statistics for a given recorder by name and index. @param recorderName name of the recorder @param idx index within the recorder's statistics @return SummaryStatistics object or null if not found
571 Prints generic command usage to the specified output stream. @param out PrintStream to write to
572 Checks if the given class is a Log4j logger. @param clazz Class to check, may be null @return true if the class is a Log4j logger, false otherwise
573 Initializes LogThrottlingHelper instance with specified minimum log period and primary recorder name. @param minLogPeriodMs minimum time interval between logs @param primaryRecorderName name of primary log recorder
574 Records log values for a given recorder, potentially triggering a periodic log. @param recorderName unique logger identifier @return LoggingAction object or DO_NOT_LOG if not logged
575 Checks if a string requires quoting. @param str input string
576 Escapes HTML special chars in the given string. @param item input string to quote @return quoted string or null if no changes needed
577 Adds Jersey resource package with specified path. @param packageName name of the package @param pathSpec path specification for resources
578 Registers an internal servlet with the specified details. @param name servlet name @param pathSpec servlet path specification @param clazz servlet class type
579 Registers an internal servlet with the specified name and class. @param name servlet name @param pathSpec servlet path specification @param clazz servlet implementation class
580 Defines a servlet filter with specified name, class, and URLs. @param ctx ServletContextHandler instance @param name unique filter identifier @param classname fully qualified filter class name @param parameters filter initialization parameters @param urls array of URLs to apply the filter to
581 Continuously binds a server connector to a single available port. @param listener ServerConnector instance @param port initial port to attempt (will increment if unavailable)
582 Retrieves XFrameOption enum based on provided string value. @param value string representation of XFrameOption
583 Initializes the FileMonitoringTimerTask with file paths to monitor and callback actions for changes or failures. @param filePaths list of paths to monitor disk files @param onFileChange action to perform when a file change is detected @param onChangeFailure action to perform on failure
584 Retrieves non-negative integer value from properties by key. @param key unique property identifier @param defaultValue default value to return if not found or invalid
585 Verifies existence of properties by key. @param key unique property identifier
586 Throws MetricsException if an error occurs and ignoreError is false. @param message error message to include in exception
587 Throws a MetricsException with provided error message and file path. @param message custom error message
588 Converts user-specified roll interval string to milliseconds. @throws MetricsException if invalid format or unit used
589 Throws a MetricsException with the provided error message and original exception. @param message user-provided error description @param t original exception to be wrapped
590 Updates the Record cache with metrics from the given MetricsRecord. @param mr MetricsRecord to update from @param includingTags whether to include tags in the updated Record @return the updated Record object or null if not found
591 Serializes a string to the output buffer. @param s input string
592 Emits a metric with metadata and actual value to Ganglia hosts. @param groupName group name for metric aggregation @param name metric name @param type metric type @param value metric value as string @param gConf Ganglia configuration @param gSlope slope of metric
593 Emits a user-defined metric with specified details and sends it to Ganglia hosts. @param groupName not used in this method (legacy parameter) @param name unique metric identifier @param type metric data type @param value metric value as string @param gConf Ganglia configuration @param gSlope Ganglia slope type
594 Removes and returns an item from the queue. @throws InterruptedException if interrupted while waiting
595 Constructs a MetricsRecordImpl object with the given metrics info and data. @param info metrics information @param timestamp record timestamp (must be greater than zero) @param tags list of metric tags @param metrics iterable of abstract metrics
596 Adds RPC enqueue time to the queue and enables quantile calculation. @param enQTime long value representing enqueue time
597 Adds RPC queue time to the internal collection. @param qTime time value to add
598 Adds RPC processing time to the aggregated metrics. @param processingTime duration of RPC processing in milliseconds
599 Adds a write latency value to the quantile collection. @param writeLatency new latency value to add
600 Adds a read latency value to the quantile collection. @param readLatency latency value to be added
601 Initializes the metrics system with a given prefix. @param prefix unique identifier prefix @return initialized MetricsSystem instance
602 Returns singleton instance of MetricsSystem. @return MetricsSystem implementation instance
603 Shuts down the application instance.
604 Captures current metrics and tags into a snapshot. @param builder MetricsRecordBuilder instance to populate @param all whether to include all metrics or only changed ones
605 Calculates statistics for each named metric by aggregating recent samples. @param minSamples minimum number of valid samples required per metric @return Map of metric names to calculated averages or null if no metrics meet the sample threshold
606 Retrieves the count of processing samples from the last RPC statistics. @return The number of samples in the last RPC processing time measurement
607 Updates rolling averages for each metric in current snapshot. @param none
608 Adds metrics information to cache with specified name and description. @param name unique metric identifier @param description metric description
609 Adds a metrics tag to cache with provided information and value. @param info metrics details @param value tag value
610 Updates statistical interval with new sample data. @param numSamples number of samples @param sum accumulated sum value
611 Adds a new data point to the sample statistic and updates the minimum/maximum value. @param x the new data point
612 Calculates and returns the mean of last processing time statistics. @return mean of last processing time
613 Returns the minimum value from the internal minmax data structure. @return The smallest value in the collection.
614 Returns the maximum value from the MinMax object. @return Maximum value as a double
615 Resets minimum and maximum values to their default state. Calls the reset method on the associated minMax object. @see #minMax
616 Calculates the next TGT renewal time based on retry policy. @param tgtEndTime target end time @param now current timestamp @param rp RetryPolicy instance to determine retry delay @return next TGT renewal time in milliseconds or -1 if not found
617 Calculates standard deviation of data. @return Standard deviation value as a double
618 Merges adjacent samples within a threshold of allowable error. @param samples collection of SampleItem objects to compress
619 Computes the quantile by iterating through sorted samples and returning the first value whose cumulative sum exceeds the desired rank (adjusted for error). @param quantile target quantile value between 0 and 1
620 Inserts batch of values into sorted sample list. @param buffer array of values to insert
621 Retrieves and returns a list of netgroup names. @return List of netgroup names
622 Checks if a group exists in the cached groups collection. @param group name of the group to check
623 Retrieves server properties based on client IP address. @param clientAddress client's network address
624 Returns client properties for given server address and port. @param serverAddress server IP address @param ingressPort server port number
625 Extracts hostname from Kerberos principal name. @param principalName Kerberos principal identifier
626 Retrieves user groups from cache or database. @param user unique user identifier @return Set of group names or null if not found
627 Refreshes the userToGroupsMap cache and clears other caches.
628 Prints formatted message to output stream or system console. @param format printf-style string with placeholders @param args variable arguments for formatting
629 Updates a BiMap with entries from an external command output. @param map the BiMap to update @param mapName name of the map @param command shell command to execute for data retrieval @param regex regular expression to split output lines into key-value pairs @param staticMapping mapping of id keys to integer values used for parsing @return true if any updates were made, false otherwise
630 Returns command to run a script, using native shell on Windows or Bash on Unix. @param script the script file
631 Switches the bind user in case of authentication exception. @param e AuthenticationException that triggered switch
632 Writes data to output stream with optional SASL wrapping. @param inBuf input byte array @param off offset into input buffer @param len length of data to write @throws IOException if writing fails
633 Closes this output stream and releases any system resources associated with it. Disposes of SASL connection and closes underlying output stream.
634 Handles HTTP interactions by checking for required headers and proceeding or returning an error. @param httpInteraction Http interaction object
635 Parses partial group names from input strings, resolving numeric values to IDs. @param groupNames string of group names separated by token separator @param groupIDs string of corresponding group IDs separated by token separator @return set of resolved group names or exception if not resolvable
636 Creates a secret key using the provided byte array. @param key byte array containing the secret key data
637 Removes stored token for given identifier. @param ident TokenIdent object containing sequence number and bytes
638 Resets internal state to default values.
639 Updates the delegation key in storage. @param key DelegationKey object to be updated
640 Removes stored master key by ID and associated delegation key. @param key DelegationKey object containing the key ID
641 Adds a DelegationKey to the SecretManager, updating the current key ID if necessary. @param key the DelegationKey to add
642 Stores a delegation key and updates the master key. @param key DelegationKey object to be stored
643 Sets external delegationToken secret manager. @param secretManager AbstractDelegationTokenSecretManager instance
644 Retrieves configuration properties with custom authentication handler class. @param configPrefix prefix for the configuration @param filterConfig filter configuration object @return Properties object containing configuration and auth handler details
645 Retrieves the current user group information from the HTTP context. @return UserGroupInformation object representing the authenticated user, or null if not available.
646 Checks if the incoming request is a management operation. @param request HttpServletRequest object
647 Checks whether this instance is managed. @return true if managed, false otherwise
648 Renew configuration with provided settings. @param conf Configuration object to update
649 Cancels the current renewal task. @param conf configuration object used to control cancellation
650 Wraps or returns input stream based on useWrap() condition. @param in original input stream @return possibly wrapped InputStream object
651 Returns an OutputStream for writing to the client, optionally wrapping it with a buffered stream based on negotiated properties. @param out OutputStream to wrap or use directly @return wrapped OutputStream if negotiated properties require it, otherwise original OutputStream
652 Reads additional data from the stream, unwraps SASL token and returns its length. @return length of unwrapped data or -1 on EOF
653 Closes and disposes resources, marking the connection as closed.
654 Constructs an AuthorizationException with the given cause.
655 Checks if login was successful. @return true if logged in successfully, false otherwise
656 Updates the user's last login timestamp. @param loginTime Unix timestamp of the latest login
657 Initializes UserGroupInformation with the given Subject, extracting and validating the User principal. @param subject the Subject containing the User principal
658 Retrieves the username from the associated user object.
659 Checks if user has Kerberos-based authentication credentials. @return true if user uses Kerberos, false otherwise
660 Retrieves the authentication method associated with the user. @return AuthenticationMethod object or null if not set
661 Returns the real user associated with this principal, or null if not found.
662 Retrieves and returns the short username. @return short username as string or null if undefined
663 Sets the authentication method for the user. @param authMethod new authentication method to apply
664 Initializes ReloadingX509TrustManager with custom trust manager from file. @param type custom trust manager type @param location path to trust manager file @param password optional password for encrypted file (may be null)
665 Initializes ReloadingX509KeystoreManager with custom keystore settings. @param type Keystore type (e.g. JKS, PKCS12) @param location Path to the keystore file @param storePassword Password for accessing the keystore @param keyPassword Password for accessing the private keys
666 Retrieves a resource by its name from the application configuration. @param name name of the resource to fetch
667 Retrieves a configuration resource as an InputStream. @param name unique resource identifier @return InputStream object or null if not found
668 Loads a configuration resource as a Reader, returns null on failure. @param name unique resource identifier
669 Creates an SSLEngine instance with configured settings. @return the created SSLEngine object
670 Configures an HTTP connection with SSL settings. @param conn HttpURLConnection instance to customize @return configured HttpURLConnection object
671 Initializes configuration for this object. @param conf Configuration instance to be used
672 Handles executor timeout for a given user. @param executor ShellCommandExecutor instance @param user user identifier string @return true if handled, false otherwise
673 Formats command-line arguments as a string. @return Formatted string representation of arguments
674 Reads and returns an AuthMethod instance from the provided DataInput stream. @param in input data stream
675 Adds a user to the list, but only if ACLs allow it or if all users are allowed. @param user unique user identifier
676 Adds a user group to the mapping, throwing an exception for wildcard ACL values. @param group name of the group to add
677 Removes a user from the system, but only if not using wild card ACL value. @param user username of the user to remove
678 Removes a user group by name, throwing exception for wild-card ACL values. @param group name of the group to remove
679 Retrieves users as a string representation. @return comma-separated list of user IDs
680 Retrieves and formats group string. @return concatenated groups string or empty string if none
681 Checks if a Kerberos Ticket is an original TGT. @param ticket Kerberos Ticket to check @return true if the ticket's server principal is not a TGS, false otherwise
682 Returns server properties based on the client's IP address. @param clientAddress IP address of the client @return Map of server properties or default SASL props if not in whitelist
683 Validates the provided CryptoCodec instance. @param codec CryptoCodec object to validate
684 Calculates and returns current file position.
685 Reads data from underlying stream into ByteBuffer. @param inBuffer target buffer for read operation @return number of bytes read or -1 on error
686 Converts a string cipher suite name to its corresponding CipherSuite enum value. @param name the name of the cipher suite @return the CipherSuite enum value or throws an exception if invalid
687 Checks if the provided crypto protocol version is supported. @param version target CryptoProtocolVersion instance @return true if version is supported, false otherwise
688 Computes the next integer value of a specified bit length. @param numBits number of bits in the desired value @return the computed integer value or an invalid result if numBits is out of range
689 Creates a KeyProviderCryptoExtension instance. @param keyProvider the underlying key provider
690 Retrieves the current key version for a given user by ID. @param name unique user identifier @return KeyVersion object or null if metadata not found
691 Generates a cryptographic key with specified size and algorithm. @param size length of the generated key @param algorithm name of the used encryption algorithm (e.g. AES, RSA) @return byte array representing the generated key
692 Creates an EncryptedKeyVersion for decryption. @param keyName unique key identifier @param encryptionKeyVersionName name of the encryption key version @param encryptedKeyIv initialization vector for encrypted key material @param encryptedKeyMaterial encrypted key data @return new EncryptedKeyVersion object
693 Creates a KeyProvider with DelegationToken extension. @param keyProvider existing KeyProvider instance
694 Closes the encryption key version queue and SSL factory resources. @throws IOException if shutdown or destruction fails
695 Retrieves a ReadWriteLock instance based on the provided key name. @param keyName unique identifier for locking purposes
696 Appends a field to the builder. @param field string value of the field
697 Appends a key-value pair to the builder's string buffer. @param key unique identifier @param value associated value @return Builder instance for method chaining
698 Adds a key-value pair to the builder if it's not already present. @param key unique key @param value associated value @return Builder instance for chaining
699 Returns a default RefreshResponse with a successful status.
700 Converts a byte array client ID to its string representation. @param clientId unique client identifier as a byte array
701 Offers an element to the underlying reference queue. @param e element to be offered
702 Retrieves the current length of the call queue. @return Size of the callQueue list
703 Retrieves super interfaces of a given protocol class. @param protocol the protocol class to fetch interfaces for @return array of super interface classes or empty array if none found
704 Retrieves server address from proxy connection ID. @param proxy object containing proxy connection information
705 Returns the current monotonic time in nanoseconds. @return Monotonic timestamp as a long integer
706 Retrieves remote user information from the current call context. @return UserGroupInformation object or null if not applicable
707 Computes an array of method fingerprints from the given methods. @param methods array of Method objects @return int[] of method fingerprints or null if input is null
708 Dispatches refresh requests to registered handlers for a given identifier. @param identifier unique handler ID @param args array of arguments passed to handlers @return Collection of RefreshResponse objects from each handler
709 Constructs a RemoteException with specified class name and message. @param className the name of the class that threw the exception @param msg the detail message of the exception
710 Unwraps a remote IOException by looking for matching subtypes. @param lookupTypes classes to check for subtype match @return unwrapped IOException or this if no match found
711 Unwraps a remote IOException and returns an instance of IOException. @return IOException instance or the current object if unwrapping fails
712 Calculates total processing cost based on provided ProcessingDetails and pre-initialized weights. @param details ProcessingDetails object containing timing values
713 Retrieves the total number of dropped connections. @return count of dropped connections
714 Returns the number of open connections. @return Count of active connections managed by ConnectionManager
715 Adds an element to the queue with specified priority. @param priority queue index @param e data to enqueue
716 Offers an element to a queue based on priority. @param priority queue priority level @param e element to offer @return true if offered successfully, false otherwise
717 Adds terse logging exceptions for specified classes. @param exceptionClass one or more Class objects to log exceptions for
718 Adds suppressed logging exceptions to be handled by ExceptionsHandler. @param exceptionClass one or more Class objects of exceptions to suppress
719 Constructs an instance of UnexpectedServerException with the given error message. @param message detailed description of the server-related exception
720 Constructs an RpcServerException with the specified error message. @param message detailed description of the exception cause
721 Constructs an RpcClientException with the specified error message. @param message error description
722 Constructs an unexpected server exception with a custom error message and root cause. @param message custom error description @param cause underlying exception that caused this exception
723 Constructs an RpcServerException with a custom error message and optional root cause. @param message human-readable description of the exception @param cause underlying exception (optional)
724 Constructs an RpcClient exception with custom error message and root cause. @param message custom error message @param cause underlying throwable causing the exception
725 Updates the total call costs for a given identity. @param identity unique identifier (Object) @param costDelta change in cost to apply
726 Calculates priority level based on cost and user identity. @param cost monetary cost associated with the entity @param identity unique identifier for the entity (e.g. user) @return numerical priority level (0-9) or 0 if unknown
727 Wraps ServiceException into a remote IOException. @param se exception to wrap
728 Executes an IPC Call and returns result or re-throws remote exception.
729 Retrieves a fixed byte string from the Protobuf helper. @param key unique identifier
730 Returns a byte string representation of the given byte array. @param bytes input byte array
731 Sets call ID and retry count with validation. @param cid valid call identifier @param rc valid retry count value @param externalHandler arbitrary handler object
732 Retrieves the address of the network listener. @return InetSocketAddress representing the listener's address or null if not set
733 Retrieves a set of auxiliary listener addresses. @return Set<InetSocketAddress> containing addresses or empty set if none found
734 Removes a client from the cache and stops it if there are no remaining references. @param client the client to stop
735 Delegates equality check to superclass. @param obj Object to compare with this instance
736 Wraps a Protocol Buffers legacy message into a ProtobufWrapperLegacy object. @param message the legacy protocol buffers message to wrap
737 Writes fatal response with old version compatibility. @param response ByteArrayOutputStream to store the response @param call RpcCall object containing call ID and settings @param rv ignored (kept for API compatibility) @param errorClass class of the error @param error detailed error message
738 Advances index by decrementing requests left and moving to next queue when exhausted.
739 Sets an IOException and notifies listeners of completion. @param error IOException to be recorded
740 Sets an RPC response and notifies listeners that processing is complete. @param rpcResponse Writable RPC response object
741 Repeatedly attempts to read a byte from the underlying socket, handling SocketTimeoutExceptions by incrementing a timeout counter. @throws IOException if an I/O error occurs
742 Repeatedly attempts to read from socket with timeout handling. @param buf byte array to store data @param off offset in buffer to write data @param len maximum number of bytes to read @return number of bytes read or -1 if end-of-stream reached
743 Retrieves the remote IP address of the current call. @return InetAddress object representing the remote IP or null if not available
744 Retrieves the remote port from the current call. @return Remote port number or 0 if no call is active
745 Retrieves the established Quality of Protection (QOP) on the auxiliary port. @return Established QOP as a string or null if not applicable
746 Retrieves the priority level of the current caller. @return Priority level (0 if unknown)
747 Returns a JSON string representing the number of open connections per user. @return JSON string or null on failure
748 Initializes MachineList object with a collection of host entries and an address factory. @param hostEntries collection of host entries (IP addresses or CIDR ranges) @param addressFactory factory for creating InetAddress objects
749 Checks if IP address belongs to a network. @param ipAddress IP address to check
750 Initializes SysInfoLinux object with file paths and time tracking settings. @param procfsMemFile path to memory usage file @param procfsCpuFile path to CPU usage file @param procfsStatFile path to system statistics file @param procfsNetFile path to network usage file @param procfsDisksFile path to disk usage file @param jiffyLengthInMillis time interval for CPU tracking in milliseconds
751 Reads memory information from "/proc/memInfo" file. @param readAgain if true, reads the file again even if it was recently read
752 Retrieves the number of processors available. @return Number of processor cores.
753 Returns the number of CPU cores. @return Number of available CPU cores
754 Retrieves CPU frequency in Hz. @return current CPU frequency or -1 on failure
755 Reads and parses CPU utilization from "/proc/stat" file.
756 Retrieves total network bytes read from system statistics. @return total network bytes read in bytes
757 Returns the total number of bytes written to network.
758 Reads disk statistics from "/proc/diskstats" file and updates numDisksBytesRead and numDisksBytesWritten counters.
759 Retrieves a value from the buffer using the given key. @param k unique key identifier @return Value object or null if not found
760 Removes and returns the value associated with the specified key. @param k unique key identifier @return Value object or null if not found
761 Removes the specified key from the map if it exists at the given index. @param index unique identifier for the linked list entry @param key value to be removed (null if not found) @return the removed element or null if not present
762 Sets optional secure transformer attributes. @param transformerFactory TransformerFactory instance
763 Converts string representation to long value, handling prefixes k, m, g, t, p, e. @param s input string with optional size prefix
764 Converts long value to string with specified unit and decimal places. @param n the number to convert @param unit the unit of measurement (e.g. "byte", "kilobyte") @param decimalPlaces the number of decimal places to display @return a human-readable string representation of the number, including unit
765 Formats a double as a percentage with specified decimal places. @param fraction value to be formatted (0-1) @param decimalPlaces number of decimal places in the result @return string representation of the percentage (e.g. "12.34%")
766 Converts a byte array to a hexadecimal string, starting from the specified index and ending at the given index. @param bytes byte array to convert @param start starting index (inclusive) @param end ending index (exclusive) @return hexadecimal string representation or null if input is invalid
767 Formats double to 2 decimal places. @return string representation of input number with 2 decimal places
768 Terminates the application with an ExitException. @param ee the exception to terminate with
769 Handles {@link HaltException} and potentially halts the JVM. @param he the exception containing the exit code and message
770 Adds a shutdown hook with specified priority and timeout. @param shutdownHook task to be executed on shutdown @param priority hook execution order @param timeout duration before hook is cancelled @param unit time unit for timeout
771 Removes a shutdown hook from the execution environment. @param shutdownHook the hook to remove
772 Checks if a shutdown hook is registered. @param shutdownHook the Runnable to check for registration @return true if registered, false otherwise
773 Retrieves an input stream for a given resource name. @param resourceName unique identifier of the requested resource
774 Initializes LineReader with specified input stream and buffer size. @param in InputStream to read from @param bufferSize default buffer size (default value is used if not provided)
775 Executes the command, respecting interval between runs. @throws IOException if an I/O error occurs
776 Creates a thread factory that produces daemon threads with normal priority. @param prefix unique identifier for the thread pool
777 Dynamically resizes the collection to accommodate growth beyond threshold. @param none @return none
778 Creates a new ArrayList from an iterator of elements. @param elements Iterator containing the initial elements
779 Adds all elements from the specified iterable to the target collection. @param addTo target collection @param elementsToAdd iterable containing elements to be added @return true if addition was successful, false otherwise
780 Creates an empty ArrayList with specified capacity. @param initialArraySize the initial size of the list
781 Writes JSON representation of an object to output stream. @param instance the object to serialize @param dataOutputStream the output stream to write to
782 Initializes operation duration tracking with current timestamp. Sets both start and finish timestamps to the initial execution time.
783 Records completion timestamp.
784 Converts value to a duration in milliseconds. @return Duration object representing the time interval
785 Returns duration as human-readable string. @return formatted time string in MM:SS or HH:MM:SS format
786 Computes the monomial for a given lengthBytes and modulus. @param lengthBytes positive number of bytes @param mod modulus value @return monomial result or MULTIPLICATIVE_IDENTITY if input is zero
787 Composes CRC values using a monomial polynomial in Galois field arithmetic. @param crcA first CRC value @param crcB second CRC value @param monomial monomial polynomial coefficient @param mod modulus for Galois field operations
788 Converts an integer value into a byte array representation (4 bytes). @param value integer value to convert @return byte[] containing the integer's binary representation
789 Converts a 4-byte array to a hexadecimal string representing a single CRC value. @param bytes the input byte array (must be exactly 4 bytes)
790 Converts byte array to a comma-separated string of hexadecimal CRC values. @param bytes input byte array, length must be divisible by 4
791 Unpacks JAR entries to a specified directory based on a regex filter. @param inputStream input JAR stream @param toDir target directory for unpacking @param unpackRegex pattern to match files for unpacking
792 Unjars a JAR file to the specified directory, unpacking files matching the given regex pattern. @param jarFile JAR file to unjar @param toDir target directory for unpacked files @param unpackRegex regular expression for files to unpack
793 Finds the nth occurrence of a byte within a UTF-8 encoded byte array. @param utf UTF-8 encoded byte array @param start starting index to search from @param length number of bytes to consider in search @param b target byte value @param n occurrence position to find (1-indexed) @return index of nth byte or -1 if not found
794 Puts a value into the map with a weak reference to allow garbage collection. @param key unique key @param value value to store in map @return the previous value associated with the key or null if not present
795 Removes an entry from the map and returns its associated value. @param key key to be removed from the map @return associated value or null if not present in the map
796 Checks if map contains a given key. @param key unique key to search for @return true if key is present, false otherwise
797 Creates a persistent reference to an object of type V associated with the given key K. @param key unique identifier @return strong reference to the created object or null if lost during creation
798 Removes and notes lost entries with null values from the map. @return number of removed entries
799 Returns a snapshot of the suppressed count and wait time. @return SuppressedSnapshot object containing current values
800 Calculates and formats the time difference between two timestamps. @param finishTime end timestamp @param startTime start timestamp @return formatted time duration string
801 Extracts key-value pairs from a string collection, trimming and splitting by equals sign. @param str input string collection
802 Splits a string into substrings using a specified separator, handling escaped separators and preserving empty splits. @param str input string to split @param escapeChar character that escapes the separator @param separator character used for splitting @return array of split strings or null if input is null
803 Escapes special characters in a string by prefixing them with a specified character. @param str input string to escape @param escapeChar character used for escaping @param charsToEscape array of characters to be escaped @return escaped string or null if input is null
804 Unescapes a string with custom escape character and characters. @param str input string to unescape @param escapeChar special character that begins an escape sequence @param charsToEscape array of characters to be escaped @return the unescaped string or null if input is null
805 Retrieves application version from COMMON_VERSION_INFO. @return string containing application version information
806 Retrieves the version revision information.
807 Retrieves the Git branch associated with the application. @return The current branch name or null if not available
808 Returns the current date string from COMMON_VERSION_INFO.
809 Retrieves user information from the common version info. @return User string representation or empty string if not available
810 Retrieves URL from COMMON_VERSION_INFO. @return The retrieved URL as a string.
811 Retrieves source checksum from common version info.
812 Retrieves the Protobuf compiler version. @return The Protobuf compiler version as a string
813 Retrieves the compile platform from the common version info. @return string representing the compilation environment
814 Constructs a filtering iterator from a remote iterator and a predicate function. @param source the underlying remote iterator @param filter the function to apply for filtering elements
815 Constructs a haltable remote iterator with a specified continuation check. @param source the underlying remote iterator @param continueWork callable to determine if iteration should continue
816 Checks if there is another record available. @return true if next record exists, false otherwise
817 Creates a MaybeClose instance with the given object. @param o object to be wrapped
818 Submits a task to the specified executor, returning a future result. @param executor executor to run the task on @param call task to execute and retrieve result from @return CompletableFuture containing the result or null if failed
819 Creates a lazy reference to an IO resource. @param constructor factory that creates the resource
820 Creates a lazy atomic reference from a supplier. @param supplier function that generates the initial value
821 Evaluates the expression and returns its result. Throws an IOException if the reference is closed.
822 Evaluates and returns result of computation. @throws IOException if evaluation fails
823 Suppresses IOExceptions raised by the given callable. @param call function that may throw IO exceptions @return result of calling the function, ignoring IO exceptions
824 Converts a callable raising IOException into an unchecked supplier. @param call function that returns T and raises IOException if fails
825 Creates a builder instance from an iterator of remote items. @param items RemoteIterator object containing items to process
826 Combines and throws a single exception from the collection, suppressing any incompatible exceptions. @param exceptions Collection of exceptions to combine
827 Initializes builder with iterable of items. @param items Iterable containing I-type objects
828 Suppresses exceptions in the builder flow. @return Builder instance with suppressed exceptions
829 Re-throws inner cause of an ExecutionException. @throws IOException if inner exception is not caught
830 Rethrows the inner exception of a CompletionException. @throws IOException if an I/O-related cause is found
831 Configures a JobConfigurable object with a JobConf configuration. @param theObject JobConfigurable instance to be configured @param conf JobConf configuration for the job
832 Retrieves a class by its fully qualified name, throwing an exception if not found. @param name fully qualified class name @return Class object or throws ClassNotFoundException if not found
833 Prints detailed thread information to the specified PrintStream. @param stream output destination @param title optional title for thread dump
834 Initializes a Configuration instance with optional default values. @param loadDefaults whether to load default configuration settings
835 Returns a JSON error response for the given exception. @param response HTTP response object @param status HTTP status code @param ex Throwable exception to serialize
836 Creates a Jersey exception response with error details. @param status HTTP status code @param ex Throwable instance containing error information
837 Initializes a new instance of the CRC-32C calculator.
838 Removes all elements from this collection.
839 Returns command to fetch groups for the given user. @param user username
840 Generates command to fetch user group IDs. @param user username @return array of strings representing the command
841 Returns file listing command based on operating system. @return Array of command strings for Windows and Unix-like OS
842 Generates 'chmod' command for setting permissions. @param perm permission string @param recursive true for recursive operation, false otherwise
843 Generates the command to set file ownership. @param owner user or group name @return array of command arguments or null if not applicable
844 Generates cross-platform command to create a symbolic link. @param target path of the file or directory to be linked @param link path where the symbolic link will be created
845 Constructs 'readlink' command for Unix or Windows platforms. @param link path to resolve
846 Generates shell command to signal or kill process. @param code signal value (0 for alive check, others for kill) @param pid unique process identifier
847 Appends script extension to a file with the given basename. @param parent directory containing the file @param basename base name of the file without extension
848 Resolves Hadoop home directory by checking JVM property and environment variables. @return File object representing the resolved Hadoop home directory
849 Retrieves the Hadoop home directory. @throws FileNotFoundException if failure cause is not null
850 Finds the qualified path for the specified executable within Hadoop's bin directory. @param hadoopHomeDir Hadoop home directory @param executable name of executable (e.g. "hdfs") @return File object representing the executable or null if not found
851 Returns the Windows Utils configuration file. @throws FileNotFoundException if an error occurs while loading the file
852 Destroys all child shell processes and clears the shell registry.
853 Shuts down a given thread with a specified timeout. @param thread Thread to shut down @return true if thread was successfully terminated, false otherwise
854 Shuts down ExecutorService with a specified wait timeout. @param service ExecutorService instance to shut down
855 Creates and adds a new progress phase to the existing tree structure. @return the newly created Progress object
856 Adds a new progress phase with specified weightage and returns the phase. @param weightage the weightage for the new phase
857 Calculates internal progress by summing completed and current phase progress. @return Internal progress as a float or the overall progress if no phases exist
858 Completes the current progress phase and initiates the next phase in its parent. @param none
859 Reads string data from specified file or resource. @param path unique identifier for the file or resource @return string content or null if failed to read
860 Retrieves string data from a specified file path. @param path the file path to access @param stat file status object @return string representation of the data or null if not available
861 Sets data with specified encoding and calls underlying implementation. @param path unique identifier for the data @param data string data to set (UTF-8 encoded) @param version current data version
862 Creates a persistent ZooKeeper node at the specified path with provided ACL. @param path unique node identifier @param zkAcl list of access control lists for the node @return true if node was successfully created, false otherwise
863 Deletes a directory at specified path, recursively deleting children if present. @param path directory path to delete @return true if deletion was successful, false otherwise
864 Deletes a file at the specified path with atomicity and ACL fencing. @param path file path to delete @param fencingACL list of access control lists for fencing @param fencingNodePath path of the node performing the deletion
865 Registers a program with given details. @param name unique program identifier @param mainClass the main class of the program @param description human-readable program description
866 Resolves a method implementation for the given target class and method name. @param targetClass class containing the method @param methodName method name to resolve @param argClasses parameter types of the method (varargs) @return Builder instance with resolved method or null if not found
867 Finds and sets a hidden implementation of a method on a target class. @param targetClass class containing the method @param methodName name of the method to find @param argClasses classes of method arguments (varargs)
868 Creates an unbound method with the given name that does nothing. @param name unique method identifier
869 Verifies that all provided unbound methods are not no-ops. @param methods array of unbound methods to check @return true if all methods have implementation, false otherwise
870 Checks if the given unbound method is available. @param method UnboundMethod instance to check @return true if method is not a noop, false otherwise
871 Binds a method to an object instance. @param receiver the object instance
872 Converts instance method to static method. @return a new static method wrapper
873 Finds the JAR file containing the specified class. @param clazz The class whose containing JAR is searched
874 Resolves class location from its Class object. @param clazz Class object to resolve location for
875 Writes a value to the output stream based on the data type. @param out DataOutputStream instance @param reset whether to reset internal state after writing @return size of written data type
876 Writes value to buffer with optional checksum and resets state. @param buf buffer to write to @param offset starting position in buffer @param reset whether to reset internal state after writing @return size of written value
877 Creates a rate limiting instance with specified capacity. @param capacity maximum allowed requests per time unit; 0 for unlimited rate
878 Installs UNIX signal handlers for termination, hangup, and interrupt. @param log Logger instance for logging
879 Initializes a LightWeightGSet with the specified recommended length. @param recommended_length target size of the set
880 Merges host inclusion and exclusion details from the current configuration. @param includes set of included hosts @param excludes set of excluded hosts
881 Merges host details from the current object into provided maps. @param includeHosts set of hosts to include @param excludeHosts map of hosts to exclude (by ID)
882 Computes the hash of a given key. @param key the byte array to be hashed @param nbytes the number of bytes in the key @param initval the initial value for the hash calculation @return the computed hash value as an integer
883 Retrieves a hash instance based on the specified type. @param type unique identifier for the desired hash algorithm @return Hash object or null if invalid type is provided
884 Initializes an empty Counting Bloom Filter instance.
885 Initializes a new instance of the BloomFilter class.
886 Initializes an empty Dynamic Bloom Filter instance.
887 Computes a hash array for the given key. @param k Key object @return int[] of length nbHash representing the hash values
888 Constructs an instance of AutoCloseableLock with a new ReentrantLock.
889 Closes the resource by releasing any held resources.
890 Prints error message and stack trace to stderr. @param e Throwable object @param text error message with placeholders for args @param args variable arguments to fill placeholders in text
891 Logs an error message with code and description. @param errorcode unique error identifier @param text human-readable error description
892 Logs loaded class details with its source location. @param name class name @param clazz loaded Class object
893 Returns a clone of the current GC data. @return GcData object representing latest available data
894 Initializes CRC-32 calculator to default state.
895 Executes shutdown hooks and returns number of timed-out hooks.
896 Inserts an element into the heap, maintaining the heap property. @param element the element to insert
897 Removes and returns the top element from the heap. @return T object or null if empty
898 Adjusts the top element in the heap data structure.
899 Creates a new hash set from an iterator of elements. @param elements iterable collection of elements to include
900 Creates a new HashSet with an initial capacity based on the expected size. @param expectedSize The anticipated number of elements to store
901 Atomically sets currentValue to newValue, throwing an exception if newValue is less than the current value. @param newValue new value to set @throws IllegalStateException if newValue is less than the current value
902 Constructs and returns a TableListing instance with specified columns. @return TableListing object
903 Checks if a given API key has been deprecated. @param key unique API key identifier
904 Checks if a given class or method has been warned for deprecation. @param name identifier of the class or method to check @return true if deprecation warning was issued, false otherwise
905 Reloads all existing configurations in the registry.
906 Adds a default resource by name and reloads configurations as needed. @param name name of the default resource to add
907 Converts time duration string to specified unit, handling parsing and conversion. @param name identifier for logging purposes @param vStr input time duration value as string (e.g. "1h", "2d") @param defaultUnit fallback unit if input string is invalid @return converted time duration in specified unit (e.g. seconds, milliseconds)
908 Combines properties by all specified tags. @param tagList list of unique tags @return combined Properties object or null if empty
909 Redacts sensitive configuration values. @param key unique configuration key @param value configuration value to be redacted or returned as is @return the original value if not sensitive, otherwise 'REDACTED_TEXT'
910 Redacts sensitive XML data by replacing it with a fixed string. @param key unique identifier for the sensitive data @return either the original value or the redacted string
911 Starts server reconfiguration task. @throws IOException if server is stopped or another task is running
912 Constructs a DeprecationContext by merging another context and deltas. @param other the context to merge, or null @param deltas array of deprecation changes
913 Constructs a ReconfigurationException with specific details. @param property affected property name @param newVal new value being configured @param oldVal previous value (for comparison) @param cause optional root cause of the exception
914 Constructs a ReconfigurationException with the specified property, new value, and old value. @param property affected configuration property @param newVal new value that caused the exception @param oldVal original value
915 Checks if manual state management is allowed. @param target HAServiceTarget to evaluate @return true if allowed, false otherwise
916 Executes a command in the SSH session and returns its exit status. @param session active SSH connection @param cmd command to execute @return exit status or -1 on error
917 Verifies the service can be a failover target. @throws ServiceFailedException if not healthy or in observer state
918 Reads data from a specified range into a direct ByteBuffer using the provided operation. @param range FileRange object specifying the source and length of data to read @param buffer ByteBuffer to store the read data @param operation Function to apply to each chunk of data (must raise IOE if an error occurs)
919 Validates and sorts a list of FileRanges, ensuring they do not overlap. @param input List of FileRanges to validate @return Sorted list of validated FileRanges or null if empty
920 Initializes BlockManager with given block data. @param blockData block data object
921 Releases allocated BufferData, but does nothing since it's always reallocated.
922 Releases an item from the pool, adding it back to storage. @param item item to release
923 Throws an exception if the current state does not match any of the provided states. @param states one or more expected states
924 Validates that both input arguments are non-null and non-empty. @param arg input string to validate @param argName name of the argument for error messages
925 Validates a collection's existence and element count. @param collection the collection to validate @param numElements expected number of elements @param argName name of the collection for error messages
926 Verifies if the specified file or directory path exists. @param path the file system path to check @param argName name of the argument that uses this path (for error message)
927 Initializes a bounded resource pool with the specified capacity. @param size maximum number of resources in the pool
928 Initializes BufferPool with specified size, buffer size, and prefetching statistics. @param size total number of buffers in the pool @param bufferSize individual buffer capacity @param prefetchingStatistics statistics for memory allocation
929 Requests prefetch of data associated with a specific block number. @param blockNumber unique identifier for the block to prefetch
930 Initializes a new BufferData object with the specified block number and data. @param blockNumber unique block identifier @param buffer ByteBuffer containing data
931 Initializes a Retryer with custom delay and update intervals. @param perRetryDelay time to wait between retries @param maxDelay maximum allowed delay before retrying @param statusUpdateInterval interval for updating retry status
932 Validates that an array is not null and has at least one element. @param array the input array @param argName name of the argument for error messages
933 Verifies that the provided byte array is not null and non-empty. @param array the byte array to validate @param argName name of the argument for error messages
934 Validates that an array is not null and not empty. @param array short array to be validated @param argName name of the argument for error messages
935 Validates that an integer array is not null and has elements. @param array The input array to validate @param argName Name of the argument being validated (for error messages)
936 Validates that input array is not null and has at least one element. @param array input array to validate @param argName name of the argument for error messages
937 Validates Iterable<T> not null and contains at least one element. @param iter the iterable to validate @param argName name of the argument for error messages
938 Deletes files in bulk by paths. @param paths collection of file paths to delete @return list of deleted file paths and any exceptions that occurred
939 Applies a function to an IO statistics snapshot. @param source any serializable object @param fun a function that raises IO exceptions and returns result of type T @return result of applying the function, or null if it throws an exception
940 Initializes FlagSet with the given enum class, prefix, and optional initial flags. @param enumClass Class of the enumeration @param prefix Prefix for flag names @param flags Optional initial EnumSet of flags (null to start empty)
941 Closes the object, deleting files and logging a close event. @throws IOException if an I/O error occurs during closing
942 Compares this file status with another. @param o The file status to compare with
943 Compares this FileStatus with the given one. @param o FileStatus to compare with @return negative/positive value if different, zero if equal
944 Converts FileStatus array to Path array. If input is empty or null, returns an array containing the provided file path. @param stats array of file statuses @param path base directory for paths in the output array @return array of Paths corresponding to the input FileStatuses
945 Checks if a path has the specified capability. @param path Path object to check @param capability Capability string to verify @return True if path has capability, false otherwise
946 Creates a JSON serializer instance for IOStatisticsSnapshot objects.
947 Converts given IO statistics to storage statistics with specified name and scheme. @param name unique identifier for the statistics @param scheme scheme of the statistics (e.g. 'read', 'write') @param source IO statistics to convert from @return StorageStatistics object
948 Retrieves storage statistics with an empty profile. @return EmptyStorageStatistics object representing storage stats
949 Constructs an exception indicating the specified path is a directory. @param path file system path that caused the exception
950 Constructs an exception indicating the specified path is not a directory. @param path the invalid file path
951 Constructs an OperationNotSupported exception with the specified file system path.
952 Constructs an exception for a non-empty directory at the specified path. @param path absolute directory path that caused the error
953 Sets buffer size and returns this builder instance. @param bufSize new buffer size value
954 Sets replication configuration and returns this builder. @param replica short value representing the replication setting
955 Sets block size and returns this builder instance. @param blkSize the new block size
956 Recursively sets this builder to itself and returns it. @return This builder instance (this)
957 Creates and initializes a new instance of type B. @return A builder object representing the newly created instance
958 Sets or clears OVERWRITE flag based on the provided boolean value. @param overwrite true to set, false to clear the flag
959 Appends a new element to the collection being built.
960 Sets the list of hosts to be used, interning strings for efficient storage. @param hosts array of host names or null to clear
961 Sets the array of cached hosts to be interned and stored. @param cachedHosts array of host strings to cache
962 Sets array of user names. Interns strings to conserve memory. @param names array of name strings
963 Sets the topology paths array. @param topologyPaths array of path strings or null to clear
964 Checks if a file exists at the specified path. @param f Path to the file to check @return true if the file exists, false otherwise
965 Wraps an IOException with additional context. @param path file/directory path involved in the error @param methodName method name where the error occurred @return wrapped IOException or original if it's Interrupted/PathIOException
966 Scans for synchronization marker at specified position. @param position offset to search for sync marker
967 Resets file pointer to the first position.
968 Registers all supported expression types with the given factory. @param factory ExpressionFactory instance to register expressions with
969 Registers various file system commands with the CommandFactory. @param factory instance of CommandFactory to register commands with
970 Expands a file pattern into individual files. @param filePattern glob-style pattern
971 Retrieves file statuses for the specified path and filter. @param f directory to scan @param filter optional filter to apply to results @return array of FileStatus objects or null on error
972 Lists status of multiple files based on a given filter. @param files array of paths to fetch status for @param filter optional filter to apply to the listing @return array of file statuses or empty if no files match
973 Retrieves a delegation token. @param url URL to use for token retrieval @param token Initial token (may be null) @param renewer User or service that can renew the token @throws IOException If an I/O error occurs @throws AuthenticationException If authentication fails
974 Renews an existing delegationToken. @param url service URL @param token existing delegationToken to renew
975 Cancels a delegated token. @param url URL of the token service @param token Token to be cancelled
976 Initializes FileEncryptionInfo object with specified parameters. @param suite CipherSuite instance @param version CryptoProtocolVersion instance @param edek encrypted data encryption key byte array @param iv initialization vector byte array @param keyName string identifier for the encryption key @param ezKeyVersionName string identifier for EZ key version
977 Sets file system permission and returns this builder. @param perm FsPermission object to set
978 Builds and returns this builder with checksum options applied. @param chksumOpt Checksum optimization settings
979 Wraps an IOException instance with additional context. @param cause underlying exception to be wrapped
980 Initializes FsLinkResolver with a given function. @param fn functional interface to resolve file system links
981 Initializes the GlobBuilder with the provided FileContext. @param fc the FileContext instance
982 Initializes a new GlobBuilder instance with the specified file system. @param fs the file system to use
983 Sets the file system permissions and returns this builder. @param perm FsPermission object to set
984 Sets and returns the builder with the specified progress. @param prog the new progress to set
985 Creates a new instance of B with specified checksum optimization. @param chksumOpt checksum optimization settings
986 Validates write arguments for byte array operation. @param b non-null byte array @param off starting index, must be >= 0 and <= b.length @param len length to write, must be >= 0 and not exceed remaining bytes in b
987 Compares two strings for equality, ignoring case differences. @param s1 first string to compare (must not be null) @param s2 second string to compare @return true if strings are equal, false otherwise
988 Checks if the provided context is a stale ZooKeeper client. @param ctx object containing the ZooKeeper instance @return true if the client is stale, false otherwise
989 Retrieves or initializes Statistics for the specified file system scheme. @param scheme unique file system identifier @param cls Class of the file system @return initialized Statistics object
990 Copies bytes from input stream to output stream. @param in InputStream containing data @param out OutputStream to write data to @param buffSize buffer size for copying @param close whether to close streams after operation
991 Copies bytes from input stream to output stream. @param in InputStream to read from @param out OutputStream to write to @param count total number of bytes to copy @param close whether to close streams after copying
992 Performs disk IO checks on the specified directory until successful or max iterations reached. @param dir directory to check @throws DiskErrorException if all checks fail
993 Checks if type quota is set. @return true if any supported types have non-zero quota, false otherwise
994 Checks if type consumption is available. @return True if at least one supported storage type has consumed amount, false otherwise
995 Calls superclass's equals() method to compare this object with another. @param o Object to be compared @return true if objects are equal, false otherwise
996 Returns hash code by delegating to superclass implementation.
997 Resets samples and sum to zero.
998 Sets mean statistic values from another MeanStatistic object. @param other MeanStatistic instance to copy values from
999 Converts IOStatistics to a human-readable string. @param statistics optional IOStatistics object
1000 Maps a sorted map to a string. @param sb StringBuilder instance @param type Type label (e.g., "Users") @param map Source map with key-value pairs @param isEmpty Predicate for empty values
1001 Tracks duration with specified key and increments by one. @param key unique identifier for tracked duration
1002 Returns an iterator over a set of LongStatistics, including those from counters and gauges. @return Iterator over LongStatistics objects
1003 Adds timed operation samples with mean, min, and max values. @param prefix unique identifier for the sample series @param durationMillis time duration in milliseconds to be measured
1004 Builds and returns IO statistics object. @return IOSTatistics object or null if not found
1005 Adds a long counter function to the statistics builder. @param key unique identifier for the counter @param eval function to evaluate as a long value @return this instance for method chaining
1006 Adds long function gauge to DynIO statistics. @param key gauge identifier @param eval ToLongFunction to evaluate and store as gauge value
1007 Adds minimum function to fetch long value from input string. @param key unique function identifier @param eval ToLongFunction instance for evaluation
1008 Adds maximum function for long values based on given key and evaluation function. @param key unique key identifier @param eval function to evaluate as long value
1009 Adds mean statistic function to the builder. @param key unique identifier for the function @param eval functional interface for calculating mean statistics
1010 Registers an IRQ handler with the specified name. @param signalName unique identifier for the IRQ handler
1011 Creates a snapshot of the current data structure. @return A map representation of the data or null if failed
1012 Serializes and returns a map snapshot. @param source original map to serialize
1013 Returns an empty IOStatisticsSnapshot instance.
1014 Creates an IO statistics context instance with specified thread and ID. @param threadId unique identifier of the running thread @param id unique identifier of the data transfer operation
1015 Creates an empty IO statistics snapshot.
1016 Checks if IO statistics context is enabled. @return true if enabled, false otherwise
1017 Retrieves I/O statistics. @return IOStatistics object containing relevant data.
1018 Retrieves input I/O statistics. @return InputIOStatistics object containing relevant data.
1019 Retrieves I/O statistics. @return IOStatistics object containing current statistics
1020 Retrieves I/O statistics from the underlying data source. @return IOStatistics object containing relevant metrics.
1021 Retrieves I/O statistics. @return IOStatistics object containing I/O metrics
1022 Retrieves input/output statistics from the wrapped stream. @return IOStatistics object containing I/O metrics or null if not available
1023 Retrieves I/O statistics from the underlying output stream. @return IOStatistics object containing I/O metrics
1024 Retrieves I/O statistics from the input stream. @return IOStatistics object or null if not available
1025 Retrieves I/O statistics. @return I/OStatistics object
1026 Verifies chunked checksums for a given file. @param type Type of checksum (e.g. MD5, SHA-1) @param algorithm Checksum algorithm instance @param data File data @param dataOffset Offset into data where verification starts @param dataLength Length of data to verify @param bytesPerCrc Number of bytes per CRC value @param crcs Array of expected CRC values @param crcsOffset Offset into crcs array where verification starts @param filename Name of file being verified @param basePos Base position in file (for error reporting)
1027 Updates the Decryptor instance with new IV and key. @param decryptor Decryptor instance to update @param position current position (used to generate counter) @param iv new initialization vector
1028 Encrypts buffered data using provided encryptor. @throws IOException on write operation failure
1029 Initializes an empty MD5MD5CRC32GzipFileChecksum object.
1030 Constructs an instance of MD5MD5CRC32CastagnoliFileChecksum with default values.
1031 Initializes a new GlobPattern instance with the given pattern. @param globPattern regular expression pattern string
1032 Constructs shell-compatible path from a File object. @param file input file
1033 Creates a secure SSH path from the given file. @param file input file @return SSH path or throws exception if not supported on Windows
1034 Extracts and writes zip archive contents to the specified directory. @param inputStream input stream containing the zip archive @param toDir target directory where files will be extracted
1035 Unzips a file to a specified directory. @param inFile Zip archive file @param unzipDir target directory for unzipped files @throws IOException if any I/O error occurs during unzipping
1036 Disconnects an SFTP channel from the pool. @param channel active SFTP channel to be disconnected
1037 Shuts down the system by disconnecting all connections and releasing resources. @throws IOException if an error occurs while closing a connection
1038 Sets the buffer size for checksum calculation. @param size new size in bytes
1039 Copies statistics from another instance, aggregating all thread-specific data. @param other source Statistics object
1040 Aggregates total bytes read across all statistics. @return Total bytes read in long value
1041 Aggregates total bytes written across all statistics. @return Total bytes written in long value
1042 Accumulates total read operations from all statistics.
1043 Aggregates large read operations across all statistics. @return Total large read operations count
1044 Calculates total write operations across all nodes. @return Total number of write operations
1045 Accumulates total remote read time (in ms). @return Total remote read time in milliseconds
1046 Aggregates statistics by visiting and accumulating all data. @return aggregated StatisticsData object
1047 Aggregates total bytes read for erasure-coded statistics. @return Total bytes read or 0 if none found
1048 Accumulates and negates statistics across all nodes, then adds to root node.
1049 Validates a file path with given flags. @param path the file path to validate @param pathExists whether the file exists @param flag create flags (CREATE, APPEND, OVERWRITE)
1050 Validates whether the provided flags allow appending. @param flag EnumSet of CreateFlags, checked for APPEND permission
1051 Constructs a URI with validated scheme and authority. @param uri input URI @param supportedScheme allowed scheme for this URI @param authorityNeeded whether authority is required @param defaultPort default port to use if not specified in URI @return constructed URI or null if invalid
1052 Creates an instance of ArrayPrimitiveWritable with specified primitive type. @param componentType primitive type (e.g. Integer, Float, etc.)
1053 Parses a string into a permissions integer. @param permString string representation of permissions (e.g. 'rw') @return bit mask of allowed operations or -1 if invalid
1054 Merges default and user checksum options. @param defaultOpt default checksum options @param userOpt user-provided checksum options
1055 Returns the canonicalized URI. @return Canonicalized URI instance
1056 Constructs a ContentSummary object with provided statistics. @param length total content length in bytes @param fileCount number of files @param directoryCount number of directories
1057 Retrieves file system status.
1058 Initializes an HttpReferrerAuditHeader object from a builder. @param builder Builder containing audit header data
1059 Releases a BufferData object, returning it to the pool. @param data BufferData object to be released
1060 Constructs SemaphoredDelegatingExecutor with specified parameters. @param executorDelegatee delegatee ExecutorService instance @param permitCount maximum number of concurrent executions @param fair whether to use fair scheduling policy
1061 Releases the nearest ready BufferData block. @param blockNumber target distance
1062 Returns the current position within the buffer. @return Current position in bytes.
1063 Checks if a file position is within the current buffer. @param pos file position to check @return true if position is within buffer, false otherwise
1064 Returns the start offset of the current buffer. @return The start offset in bytes
1065 Retrieves current I/O statistics context based on thread configuration. @return Active or empty I/O stats context depending on thread settings.
1066 Sets IO statistics context for current thread. @param statisticsContext IOStatisticsContext object to set or null to clear
1067 Merges sorted file ranges into combined chunks. @param sortedRanges list of file ranges to merge @param chunkSize size of each merged chunk @return List of CombinedFileRange objects representing merged chunks
1068 Merges checksum ranges from input data into combined ranges. @param dataRanges list of file ranges to process @param bytesPerSum size of each checksum chunk @return List of CombinedFileRange objects representing merged checksums
1069 Initializes a new instance of Name with default settings.
1070 Recursively traverses and combines results of child expressions. @param item PathData object to evaluate @param depth Current recursion level (not used in this implementation) @return Result object representing overall evaluation outcome
1071 Retrieves and caches FindOptions instance. @return cached or freshly created FindOptions object
1072 Parses command-line arguments and options. @param args list of argument strings
1073 Retrieves command description, or deprecation notice if deprecated.
1074 Displays a warning message to the console. @param message user-visible warning text
1075 Returns command usage string, optionally including deprecated notice. @return Command usage string or deprecation note
1076 Segregates ACL entries into 'access' and 'default' categories. @param aclEntries list of AclEntry objects to process
1077 Prints formatted table to specified PrintStream. @param out target output stream
1078 Creates a new Location instance based on the provided flag. @param allow boolean indicating whether to create a new location or not
1079 Creates a new Data instance based on the provided boolean flag. @param allow true to enable data modification, false otherwise
1080 Default constructor with default timeout value. @param timeout default connection timeout in milliseconds
1081 Creates a delegationToken for authentication. @param dToken delegate token to generate from
1082 Lists located file statuses for the given file. @param f Path to the file @return iterator over LocatedFileStatus objects
1083 Opens a file with specified options asynchronously. @param path file system path @param parameters open file parameters @return CompletableFuture containing FSDataInputStream or null if failed
1084 Retrieves a fallback file system if root fallback link is configured. @return FileSystem object or null if not configured
1085 Updates the context with data from a source ByteBuffer and writes to a destination ByteBuffer. @param input source ByteBuffer containing data @param output destination ByteBuffer for written data @return number of bytes updated or -1 on error
1086 Encrypts and writes final data to the provided direct ByteBuffer. @param output ByteBuffer containing space for encrypted output @return length of written data or throws an exception if failed
1087 Creates a RegexMountPointInterceptor instance from a settings string. @param interceptorSettingsString configuration data as a string @return interceptor object or null on invalid input
1088 Normalizes a URI path by removing duplicated slashes and converting backslashes to forward slashes. @param scheme the URI scheme (e.g., "http", null for file paths) @param path the URI path to normalize @return the normalized path string
1089 Checks if a given path string is an absolute Windows path. @param pathString the input path string to check @param slashed whether the path uses forward slashes
1090 Checks if URI path is absolute. @return true if path starts with a separator, false otherwise
1091 Calculates hash value of file path. @param p Path object to hash
1092 Validates that the provided path is a sub-path of the base path. @param path the path to validate
1093 Retrieves the next available unique identifier by scanning files in the specified directory. @param initial base path to search @param lastId last known unique identifier @return next available unique identifier
1094 Skips ahead by specified number of bytes in the underlying stream. @param n number of bytes to skip @return number of bytes skipped, or 0 if invalid position @throws IOException if an I/O error occurs during seek operation
1095 Reads from an InputStream using a ByteBuffer from a pool, with optional direct access. @param stream InputStream to read from @param bufferPool ByteBufferPool to obtain and reuse buffers from @param maxLength maximum number of bytes to read @return the used ByteBuffer or null if an error occurred
1096 Resets and reinitializes the evaluation state. Clears existing entries and restarts initialization process.
1097 Creates and initializes a new instance of CommonAuditContext.
1098 Constructs an FsPermission object with specified actions. @param u owner's permissions @param g group's permissions @param o other's permissions
1099 Constructs FsPermission object from short mode value. @param mode short integer representing file system permissions.
1100 Creates FsPermission object from input stream. @param in DataInput stream containing permission data @return FsPermission object representing file permissions
1101 Retrieves the effective file system action based on ACL entry and permissions. @param entry AclEntry object containing access control information
1102 Creates an immutable PermissionStatus instance with specified details. @param user user identifier (immutable) @param group group identifier (immutable) @param permission file system permissions (immutable)
1103 Parses ACL specification into a list of AclEntry objects. @param aclSpec comma-separated ACL string @param includePermission whether to include permission details in AclEntry
1104 Creates a new FsCreateModes instance from given permission modes. @param masked the permission mode to mask @param unmasked the unmasked permission mode
1105 Prints extended ACL entry details. @param aclStatus AclStatus object @param fsPerm FsPermission object @param entry AclEntry object to print
1106 Splits input string into array of substrings using comma as delimiter. @param str input string to be split
1107 Returns current buffer position. @return Position within the buffer as an integer.
1108 Checks if there are remaining bytes in the buffer. @return true if buffer has remaining bytes, false otherwise
1109 Initiates data block upload process and transitions state. @throws IOException on upload failure
1110 Enters closed state if current state is not already Closed. @return true if successfully transitioned to Closed state, false otherwise
1111 Flushes buffered output to underlying stream. Calls superclass and PrintWriter flush methods.
1112 Retrieves file system statistics for a given URI. @param uri identifier of the file system resource
1113 Retrieves current directory index from context. @return Current directory index
1114 Writes synchronization data to output stream if necessary. @throws IOException on I/O error
1115 Retrieves the current output position in bytes. @throws IOException if an I/O error occurs
1116 Returns the current output position. @return total bytes written to underlying file and buffered output
1117 Calculates content summary for a given path (file or directory). @param f the path to calculate summary for @return ContentSummary object containing total length, file count, and directory count
1118 Parses ACL string array into user and group sets. @param userGroupStrings string array containing user and/or group permissions
1119 Parses a string into an EnumSet of values. @param key identifier for logging @param valueString input string to parse @param enumClass class of the enum values @param ignoreUnknown whether to ignore unknown values or raise an exception @return EnumSet containing parsed values, or null if invalid
1120 Verifies that the current service state matches the specified expected state. @param expectedState desired service state (e.g. STARTED, STOPPED)
1121 Initializes an AbstractService instance with a given name. @param name unique identifier for the service
1122 Validates a service state transition. @param name the service name @param state current service state @param proposed proposed next service state
1123 Creates and returns a ServiceLaunchException instance on service creation failure. @param exception underlying exception causing the failure
1124 Verifies existence of specified configuration files. @param filenames array of configuration file names to check
1125 Converts a Throwable to an ExitUtil.ExitException. @param thrown the Throwable to convert
1126 Installs a shutdown hook to gracefully terminate the specified service. @param service the service to be shut down on JVM termination
1127 Records and logs service failure details. @param exception the Exception object to record
1128 Records current service state as a lifecycle event.
1129 Stops specified started services in reverse order. @param numOfServicesStarted number of services to stop @param stopOnlyStartedServices true to only stop started services, false to also stop initialized ones
1130 Stops the given Service instance quietly. @param service Service instance to be stopped
1131 Compares this UTF8 object with another based on their byte sequences. @param o the other UTF8 object to compare with
1132 Compares this UTF-8 byte sequence with another for equality. @param o the object to compare with (must be a UTF-8 instance) @return true if both sequences have equal length and content
1133 Compares this MD5 hash with another by comparing their byte arrays. @param that the other MD5 hash to compare with @return negative/positive value if this < > that, zero if equal
1134 Compares this BinaryComparable instance with another. @param other the object to compare with @return a negative integer if less, zero if equal, or positive integer if greater
1135 Compares this byte array with another. @param other the other byte array to compare @param off offset in other array to start comparison from @param len length of bytes to compare @return a negative/zero/positive integer if this is less than/equal to/greater than other
1136 Computes the hash code of this Writable object. @return hash value based on byte array and length
1137 Converts a long value from byte array to double. @param bytes input byte array @param start starting index in the byte array @return double representation of the long value or NaN if invalid
1138 Updates the container size while preventing integer overflow. @param size new container size
1139 Checks if a file can be read, using platform-specific methods. @param f the File object to check @return true if readable, false otherwise
1140 Checks if a file can be written to. @param f the target file @return true if writable, false otherwise
1141 Checks if a file can be executed. @param f the file to check @return true if executable, false otherwise
1142 Returns the singleton instance of the readahead pool, lazily initializing it if necessary. @return the singleton instance of the readahead pool
1143 Returns the memory locking limit. @return The maximum amount of memory that can be locked or 0 if unavailable
1144 Calculates chunked checksums for the provided data. @param data input byte array @param dataOffset starting offset in data @param dataLength length of data to process @param sums output array for checksum values @param sumsOffset starting offset in sums array
1145 Creates a FileOutputStream for writing to the specified file with given permissions. @param f File object representing the target file @param permissions Integer value of file permissions @return FileOutputStream object or throws IOException if an error occurs
1146 Releases and frees all buffers in the pool.
1147 Frees allocated buffers. @param inBuffer input buffer to release @param outBuffer output buffer to release
1148 Retrieves file statistics for the given FileDescriptor. @param fd unique file descriptor @return Stat object containing file metadata or null on failure
1149 Retrieves file statistics by path. @param path file or directory path @return Stat object containing file metadata; null if invalid path
1150 Initializes a BoundedByteArrayOutputStream with initial buffer size and write limit. @param capacity initial buffer size @param limit maximum allowed bytes to write
1151 Creates an instance from an existing EnumSet. @param value the initial set of values
1152 Writes data from input stream to internal buffer. @param in InputStream containing data @param length number of bytes to read and write
1153 Resets and returns a data input stream for key data. @return DataInputStream object
1154 Decodes and reads Hadoop Writable object from a Base64-encoded string. @param obj the writable object to read fields into @param newValue the base64-encoded string to decode
1155 Compares two byte arrays as keys. @param b1 first byte array @param s1 start index of first byte array @param l1 length of first byte array @param b2 second byte array @param s2 start index of second byte array @param l2 length of second byte array @return negative/positive value if the keys are not equal, zero if they are equal
1156 Checks if a recoverable ECBlockGroup exists. @param blockGroup group to check @return true if recoverable, false otherwise
1157 Calculates total number of erased blocks in a block group. @param blockGroup ECBlockGroup object containing parity and data blocks
1158 Retrieves indices of blocks marked as erased from the given array. @param inputBlocks array of ECBlock objects @return array of indices or empty array if none found
1159 Validates input buffers for decoding. @param buffers array of ByteBuffer objects to check
1160 Validates input buffers by checking lengths and count. @param buffers array of byte[] buffers to validate
1161 Initializes ErasureDecodingStep with input blocks, erased indexes, and encoding/decoding components. @param inputBlocks array of EC blocks to process @param erasedIndexes array of indices representing erased data units
1162 Validates input parameters for data recovery. @param inputs array of input values @param erasedIndexes indices of corrupted elements @param outputs corresponding recovered values
1163 Initializes the Erasure Encoding Step with input/output blocks, raw encoders for Reed-Solomon and XOR operations, and calculates the piggyback index. @param inputBlocks array of EC blocks to encode @param outputBlocks array of EC blocks to store encoded data @param rsRawEncoder encoder for Reed-Solomon operation @param xorRawEncoder encoder for XOR operation
1164 Validates input and output array lengths against encoding parameters. @param inputs input data units @param outputs parity data units
1165 Merges two arrays element-wise. @param p first array @param q second array @return new array with merged elements
1166 Multiplies two integer arrays using the grade school multiplication algorithm. @param p first array @param q second array @return product array of same length as sum of input arrays' lengths minus one.
1167 Performs Gaussian Elimination on a square matrix. @param matrix input matrix (must be square and have non-zero leading entries)
1168 Prints chunk data with a given header. @param header display header @param chunks array of ECChunk objects to print
1169 Resets multiple output buffers with specified data length. @param buffers array of ByteBuffers to reset @param dataLen target data length for each buffer
1170 Converts ECChunk array to ByteBuffer array, handling null chunks and resetting zero-filled buffers. @param chunks array of ECChunks
1171 Resets multiple output buffers with given offsets and total data length. @param buffers array of byte buffers to reset @param offsets array of buffer offset indices @param dataLen total data length for all buffers
1172 Returns an instance of GaloisField with default field size and primitive polynomial.
1173 Initializes a new BlockCompressorStream with specified parameters. @param out OutputStream to write compressed data to @param compressor Compressor instance for compression @param bufferSize maximum input buffer size @param compressionOverhead overhead bytes consumed by compression
1174 Initializes ZStandard decompressor with specified buffer size. @param bufferSize direct memory buffer allocation size
1175 Initializes a new instance of the Lz4Compressor with default buffer size. @param directBufferSize initial direct buffer size
1176 Returns the class of a compression codec by name. @param codecName unique codec identifier @return Class<? extends CompressionCodec> or null if not found
1177 Retrieves a Compressor instance based on the provided CompressionCodec and Configuration. @param codec Compression Codec to determine compressor type @param conf Configuration for compressor initialization @return Compressor object or null if creation fails
1178 Retrieves a Decompressor instance based on the provided CompressionCodec. @param codec CompressionCodec that dictates the type of decompressor to use @return Decompressor object or null if creation fails
1179 Returns a reusable Compressor instance to the pool. @param compressor Compressor object to be returned
1180 Reclaims and optionally pools a Decompressor instance. @param decompressor Decompressor to process
1181 Returns the compressor class type (ZStandardCompressor). @return Class of ZStandardCompressor compressor implementation.
1182 Returns decompressor type class.
1183 Initializes ZlibCompressor with default compression settings.
1184 Initializes ZlibCompressor with configuration settings. @param conf Configuration object containing compression level and strategy
1185 Reinitializes the compressor with a new configuration. @param conf new configuration to use
1186 Processes gzip header states: basic, extra field, filename, comment, and CRC. @throws IOException if CRC verification fails or other errors occur
1187 Writes object data to output stream. @param out DataOutput stream for writing
1188 Reads a variable-length int from the specified input stream. @param stream DataInput stream containing the VInt data @return the read VInt value, or throws IOException if out of range
1189 Reads a variable-length signed int from the stream, ensuring it's within the specified range. @param stream input stream @param lower minimum allowed value @param upper maximum allowed value @return read integer value or throws IOException if out of range
1190 Initializes a new Text instance with the given string. @param string input text to be processed
1191 Searches for the specified string within a byte array starting from a given offset. @param what string to search for @param start offset in bytes where search begins @return index of first matching byte or -1 if not found
1192 Writes a string to the output stream. @param out DataOutput stream @param s String to write @return Length of written string
1193 Writes a string to the output stream with a maximum length. @param out DataOutput stream @param s String to write @param maxLength Maximum allowed bytes in the string @return Actual written byte count or throws IOException if too long
1194 Initializes or resets UTF-8 encoded byte array. @param utf8 UTF-8 encoded byte array
1195 Sets the text content from another Text object. @param other Text object to copy from
1196 Reads a line from the input stream, consuming up to maxBytesToConsume bytes. @param maxLineLength maximum allowed length of the line @return number of bytes consumed before newline or maxBytesToConsume exceeded
1197 Reads a custom line from the input stream, consuming up to maxBytesToConsume bytes and returning the length of the consumed data. @param str Text buffer to append read data to @param maxLineLength maximum allowed length for appended text @param maxBytesToConsume maximum number of bytes to consume @return length of consumed data or -1 on EOF
1198 Initializes an empty sorted map with default comparator.
1199 Initializes an empty map for storing key-value pairs of Writable objects.
1200 Initializes a new Key instance with the given byte array and default weight. @param value the key's value as a byte array
1201 Computes the MD5 hash of the given byte array. @param data input data to be hashed
1202 Generates MD5 hash from UTF-8 encoded string. @param utf8 UTF-8 encoded string
1203 Initializes an MD5 hash with a hexadecimal string. @param hex hexadecimal representation of the hash value
1204 Returns a RetryPolicy with infinite retries and fixed exponential backoff. @param sleepTime initial delay in milliseconds @param timeUnit time unit for the delay (e.g. TimeUnit.MILLISECONDS)
1205 Creates a retry policy that attempts up to maxRetries with a fixed sleep period. @param maxRetries maximum number of retries @param sleepTime duration between retries in specified time unit @param timeUnit unit of time for sleep interval (e.g. SECONDS, MILLISECONDS)
1206 Creates an exponential backoff retry policy. @param maxRetries maximum number of retries @param sleepTime initial delay between retries (in specified unit) @param timeUnit unit of the sleep time (e.g. SECONDS, MILLISECONDS)
1207 Creates a retry policy with proportional sleep between attempts. @param maxRetries maximum number of retries @param sleepTime initial sleep duration @param timeUnit unit of time for sleep duration
1208 Records the timestamp when the write lock is acquired. Called when the read-write lock's write hold count reaches 1.
1209 Records the current time when starting lock timing.
1210 Records lock timing information when read-only lock is acquired.
1211 Creates a dynamic proxy instance for the specified interface. @param iface target interface @param proxyProvider failover proxy provider @param methodNameToPolicyMap map of method names to retry policies @param defaultPolicy default retry policy @return proxy object or null if creation fails
1212 Returns hash code based on underlying linear random retry instance.
1213 Determines whether the current object is equal to another WrapperRetryPolicy. @param obj the object to compare with, must be of type WrapperRetryPolicy
1214 Creates an IOException instance from collected exceptions. @return IOException instance containing aggregated exceptions.
1215 Returns an array of supported compression algorithms. @return Array of algorithm names (e.g. "gzip", "deflate")
1216 Returns compression name based on current R-Block state. @return Compression name as a string or null if not applicable
1217 Reads a string from the input stream. @param in DataInput stream to read from @return String value or null if length indicates end of data
1218 Reads and interprets a variable-length integer from the input stream. Updates 'remain' with the value and sets 'lastChunk' flag accordingly. @throws IOException if an I/O error occurs during reading
1219 Creates a comparator based on file meta data. @param name file meta data field to compare
1220 Writes a chunk of bytes to the output stream. @param chunk data to write @param offset starting position in the chunk @param len length of the chunk @param last true if this is the final chunk
1221 Writes buffered data to output stream. @param data buffer containing data to write @param offset starting position in the buffer @param len length of data to write
1222 Initializes SingleChunkEncoder with output stream and chunk size. @param out DataOutputStream for writing data @param size Chunk size in bytes
1223 Returns a comparator for Entries, throwing an exception if not sorted. @return Comparator for Scanner.Entry objects
1224 Checks if current location is at or past end location. @return true if at end, false otherwise
1225 Retrieves location near specified offset. @param offset long value to search for nearby location @return Location object at nearest block index or null if not found
1226 Creates a deep copy of this location. @return cloned Location object
1227 Reads an integer value from a byte array buffer. @param buf input byte array
1228 Sets the string value, truncating if too long and computing UTF-8 byte length. @param string input string to set
1229 Converts one or more Writable objects to a byte array. @param writables Writable objects to be converted @return Byte array representation of the Writables
1230 Converts a String to a byte array. @param string input string
1231 Writes compressed data to output stream. @param uncompressedDataBuffer input buffer with uncompressed data
1232 Copies the contents of another Writable object into this instance. @param other source object to copy from
1233 Appends a serialized key-value pair to the output stream. @param key unique identifier (must be of type {@link #keyClass}) @param val associated value (must be of type {@link #valClass}) @throws IOException if serialization or compression fails
1234 Converts object to byte array representation. @return Byte array containing object data
1235 Encodes a Writable object into a base64-encoded string. @param obj the Writable object to encode
1236 Resets the input buffer with data from the output buffer.
1237 Calculates distance between two nodes based on their path components. @param node1 first Node object @param node2 second Node object @return calculated distance or MAX_VALUE if one node is null
1238 Retrieves the Node instance associated with the specified network location. @param node Node instance containing the network location
1239 Retrieves a list of leaf nodes within the specified scope. @param scope unique identifier for the node subtree @return List of Node objects or empty if no leaves found
1240 Counts the number of available nodes within a given scope, excluding specified nodes. @param scope the node path or "~nodePath" to indicate exclusion @param excludedNodes collection of nodes to exclude from count @return total count of available nodes in the scope
1241 Removes a node from the graph and updates empty rack counts if applicable. @param node Node object to be removed
1242 Sorts nodes by distance, using a secondary sort if necessary. @param reader node used to calculate weights @param nodes array of nodes to be sorted @param activeLen length of the active portion of the array @param secondarySort optional function for secondary sorting @param nonDataNodeReader whether to use network location or not
1243 Recommissions a node by removing it from the decommissioned set and re-adding it with an empty rack. @param node Node object to recommission
1244 Transfers data from a FileChannel to fully fill a buffer. @param fileCh the source FileChannel @param position the starting position in the channel @param count the number of bytes to transfer
1245 Wraps an IOException with a detailed error message based on the type of exception. @param destHost destination host @param destPort destination port @param localHost local host @param localPort local port @param exception original IOException to wrap @return wrapped IOException with additional details
1246 Initializes an empty RawScriptBasedMappingWithDependency object.
1247 Constructs a ScriptBasedMapping instance from a DNSToSwitchMapping. @param rawMap underlying mapping data
1248 Initializes an InnerNodeImpl instance with the given file system path.
1249 Initializes an inner node with specified details. @param name inner node's name @param location inner node's location @param parent parent node (can be null) @param level nesting level of the node
1250 Signals the user's disconnection by sending a notification and marking as kicked.
1251 Binds and listens on a socket at the specified path. @param path socket path @return newly created DomainSocket instance or throws exception if invalid
1252 Creates a pair of sockets using the underlying operating system's socketpair facility, returning two connected sockets.
1253 Establishes a connection to the specified DomainSocket at the given path. @param path URL or file path of the socket
1254 Sends callback and removes entry from map. @param caller callback sender @param entries TreeMap of entries to remove from @param fdSet FD set @param fd file descriptor to remove
1255 Closes this instance, releasing resources and signaling select thread termination. @throws IOException if an I/O error occurs during closure
1256 Retrieves a SelectorInfo object associated with the given channel. @param channel SelectableChannel instance @return SelectorInfo object or newly created one if not found
1257 Adds a SelectorInfo to the end of its provider's queue, updating last activity time. @param info SelectorInfo object containing user identifier and provider information
1258 Retrieves all IP addresses associated with the specified network interface. @param strInterface name of the network interface
1259 Retrieves hostnames associated with the given network interface. @param strInterface network interface name @param nameserver DNS server to use (optional) @param tryfallbackResolution whether to attempt fallback resolution if no hostname found @return array of hostnames or empty array if unknown
1260 Initializes the log throttling helper with the specified minimum log period in milliseconds. @param minLogPeriodMs minimum time interval between logs (in ms)
1261 Records log action with current timestamp and provided values. @param values variable number of double values to be recorded
1262 Extracts and sanitizes a request parameter by name. @param name the parameter name to fetch @return the sanitized parameter value or null if not present
1263 Constructs and returns the request URL with HTML quoting.
1264 Returns the server name from the raw request after HTML quoting. @return server name as quoted string or null if not found
1265 Initializes file monitoring timer task with single file path. @param filePath absolute file path to monitor @param onFileChange callback invoked when file changes @param onChangeFailure callback invoked on failure to monitor file
1266 Updates an existing MetricsRecord. @param mr record to be updated @return updated Record object
1267 Consumes data by executing the provided Consumer function and dequeuing afterwards. @param consumer Consumer function to execute on fetched data
1268 Consumes all available data using the provided consumer. @param consumer Consumer function to process individual elements
1269 Increments cache hit counter.
1270 Increments the count of cache cleared events.
1271 Increments the cache updated counter.
1272 Increments client backoff disconnected counter.
1273 Increments slow RPC call counter. @param none @return none
1274 Increments requeue calls counter.
1275 Increments RPC call successes counter.
1276 Writes data from a ByteBuffer to a WritableByteChannel. @param channel the destination channel @param buffer the source byte buffer @return number of bytes written or -1 on failure
1277 Reads data from the given channel into the provided buffer. @param channel ReadableByteChannel to read from @param buffer ByteBuffer to store the read data @return number of bytes read (0 or -1 on error)
1278 Increments failure count and records last failure time. @see failureCount
1279 Fetches user group set for a given user. @param user unique user identifier
1280 Unregisters metrics source with given name.
1281 Sets quantiles based on input parameters. @param ucName upper case name prefix @param uvName upper case name suffix @param desc description of quantile @param lvName lower case name for interval @param pDecimalFormat decimal format for quantile display
1282 Sets quantiles by name and calculates corresponding inverse percentiles. @param ucName upper-case name prefix @param uvName upper-case name suffix @param desc description for quantiles @param lvName lower-case name suffix @param df decimal format for quantile display
1283 Initializes a new MetricsRegistry instance with the specified name. @param name unique identifier for this registry
1284 Creates a new metrics tag with specified name, description, and value. @param name unique tag identifier @param description human-readable tag description @param value numeric tag value
1285 Initializes MutableStat object with name, description, sample name and value name. @param name Statistic name @param description Description of statistic @param sampleName Sample name @param valueName Value name @param extended Whether to include additional information (true/false)
1286 Adds or updates a metric tag with the specified name and value. @param info MetricsInfo object describing the metric @param value new tag value to be associated with the metric @param override whether to override existing tag if it already exists @return this instance for method chaining
1287 Adds a long value to multiple statistics and updates changed flag. @param value statistical value to be added
1288 Calculates standard deviation of processing times. @return Standard deviation value in milliseconds
1289 Inserts a value into the buffer, potentially triggering batch insertion and compression. @param v long integer value to be inserted
1290 Retrieves a snapshot of Quantile values. @return Map of Quantile to Long value or null if no samples exist
1291 Retrieves the top N token real owners based on statistics. @param n maximum number of owners to retrieve @return List of NameValuePair objects representing top owners or an empty list if none found.
1292 Adds groups to the cache. @param groups list of group names to add (can be netgroups or Unix groups)
1293 Retrieves an unmodifiable collection of tokens associated with the subject. @return immutable collection of tokens or empty collection if none found
1294 Retrieves groups associated with a given user. @param user unique user identifier @return unmodifiable list of group names or empty list if not found
1295 Returns an unmodifiable set of groups associated with the given user. @param user unique user identifier
1296 Retrieves Unix and net group IDs for the specified user. @param user unique user identifier @return list of group names or empty list if not found
1297 Prints an empty line to the console.
1298 Prints system property value to console. @param property name of system property
1299 Prints environment variable value to console. @param variable name of environment variable
1300 Dumps the contents of a file to the console. @param file input file to read from
1301 Logs an error with specified category and formatted message. @param category Error category @param message Error message with optional arguments for formatting
1302 Logs a warning message with specified category and parameters. @param category warning category @param message warning message with placeholders for arguments @param args variable number of arguments to fill message placeholders
1303 Sets the authentication method for the user. @param authMethod authentication method to be applied (e.g. password, OAuth)
1304 Writes a single byte to the output stream. If useWrap is false, writes directly; otherwise, wraps in buffer and writes via block. @throws IOException if IO error occurs
1305 Writes an array of bytes to the underlying stream. @param b byte array to be written
1306 Verifies and retrieves DelegationTokenInformation for the given token. @param identifier TokenIdent object containing token details @return DelegationTokenInformation if valid, null otherwise
1307 Sets an external delegationToken secret manager. @param secretManager Secret manager to use for tokens
1308 Updates the current master key for generating delegation tokens. @throws IOException if an I/O error occurs during key storage
1309 Constructs an empty DelegationKey with default values. @param delegationId default delegation ID @param creationTime default creation time in milliseconds @param secretKey null secret key by default
1310 Initializes a new URL authenticated with a delegated token. @param authenticator DelegationTokenAuthenticator instance @param connConfigurator Connection configuration settings
1311 Tries to renew the delegation token, updating renewal time if successful. @return true if token was successfully renewed, false otherwise
1312 Reads a single byte from the stream, handling wrapped mode and blocking. @throws IOException on I/O error
1313 Reads data into the provided byte array. @param b target buffer @param off offset in the buffer @param len number of bytes to read @return actual number of bytes read or -1 on error, 0 if no more data available
1314 Authorizes the specified UserGroupInformation for the given remote address. @param user authenticated UserGroupInformation @param remoteAddress IP address of the client
1315 Checks if Hadoop login context is active. @return true if Hadoop login context is managing UGI, false otherwise
1316 Creates a proxy user with specified identity. @param user unique user identifier @param realUser actual user behind the proxy (may be null) @return UserGroupInformation object representing the proxy user
1317 Returns the real user or self if no real user is found. @param user UserGroupInformation object to verify @return the real user's information or self if not found
1318 Returns a human-readable string representation of the user, including name and authentication method. @return User description string
1319 Retrieves the real authentication method for the current user.
1320 Retrieves the actual authentication method for a user. @param ugi UserGroupInformation instance @return AuthenticationMethod enum value or null if unknown
1321 Creates IpcConnectionContextProto object based on protocol and user information. @param protocol connection protocol @param ugi UserGroupInformation object @param authMethod authentication method used @return IpcConnectionContextProto object or null if invalid parameters
1322 Verifies SSL connection based on peer certificate. @param host server hostname @param session SSLSession object @return true if verification successful, false otherwise
1323 Loads and returns the resource identifier for the given name. @param name unique resource identifier @return int resource ID or E_NOT_FOUND if not found
1324 Initializes the command with configuration settings. @param conf configuration details for this command instance.
1325 Initializes a new instance of the CommandFactory class with the given configuration. @param conf the application configuration
1326 Initializes FsShell with configuration. @param conf Hadoop Configuration instance
1327 Initializes the FindClass instance with the given configuration.
1328 Initializes GetGroupsBase with configuration and output stream. @param conf Configuration object @param out Output stream to print results to
1329 Initializes default configuration with no values set.
1330 Generates ACL string representation. @return String containing '*' for all allowed or user and group IDs
1331 Retrieves the Ticket-Granting Ticket (TGT) from private credentials. @return Kerberos TGT as a KerberosTicket object or null if not found
1332 Sets SSL/TLS configuration for the ZK client. @param zkClientConfig ZK client configuration @param truststoreKeystore Truststore and keystore to use
1333 Creates an instance of OpensslCipher with specified transformation and engine. @param transformation cipher transformation string @param engineId optional engine ID (null for default) @return OpensslCipher object or throws exception if invalid parameters
1334 Creates a new key with specified name and cryptographic properties. @param name unique key identifier @param options Key creation options (bit length & cipher)
1335 Generates a new version of the given key. @param name unique key identifier
1336 Stores an element in the map with optional client-side backoff handling. @param e the element to store
1337 Initializes the RPC server with writable protocol engine.
1338 Starts the stopwatch, throwing an exception if it's already running. @return this StopWatch instance for method chaining
1339 Stops the StopWatch and returns elapsed time in nanoseconds.
1340 Calculates elapsed time in nanoseconds since execution started. @return elapsed time or current elapsed time if not started
1341 Calculates a unique fingerprint from an array of Method objects. @param methods array of Method objects to process
1342 Retrieves protocol signature fingerprint based on class and server version. @param protocol Class of the protocol to retrieve fingerprint for @param serverVersion Server version associated with the fingerprint @return ProtocolSigFingerprint object or null if not cached
1343 Constructs a RemoteException from Attributes. @param attrs attributes containing exception details
1344 Returns paginated list of elements. @throws IOException if an I/O error occurs
1345 Backwards-compatible implementation of add response time with old method invocation. @param callName service name @param schedulable scheduling details @param details processing metrics
1346 Offers elements to queues with specified priority and includes/excludes the last queue. @param priority minimum queue index to offer to @param e element to offer @param includeLast whether to include the last queue in offering @return true if any queue was successfully offered to, false otherwise
1347 Handles errors by logging and populating error details into ResponseParams. @param t the Throwable instance containing error information @param responseParams container for error response parameters
1348 Constructs a VersionMismatch exception with protocol and version details. @param interfaceName name of the protocol @param clientVersion client-side version number @param serverVersion server-side version number
1349 Recomputes the schedule cache with updated priority levels.
1350 Computes or retrieves cached priority level for a given object. @param identity unique identifier of the object @return priority level (cached or computed)
1351 Returns the hash code of this object. Delegates to superclass implementation.
1352 Returns current index and advances to next one. @return current index value
1353 Retrieves the remote IP address as a string. @return Remote IP address or null if not available
1354 Initializes a new MachineList instance from given host entries. @param hostEntries collection of host entries
1355 Reads process memory information from file. Calls readProcMemInfoFile(true) to enable logging.
1356 Calculates the total available physical memory size in bytes. @return Available physical memory size in bytes, or 0 if failed
1357 Retrieves cumulative CPU time.
1358 Calculates and returns the overall CPU usage percentage. @return CPU usage as a float value between 0.0 and 100.0
1359 Calculates the overall CPU core usage as a percentage. @return normalized CPU core usage value (0-1) or UNAVAILABLE if not available
1360 Inserts a key-value pair into the buffer. @param k unique key @param v associated value
1361 Creates a secure transformer factory with enabled processing and optional security attributes. @return TransformerFactory instance or throws TransformerConfigurationException if initialization fails
1362 Creates a secure SAX transformer factory instance. @return SAXTransformerFactory object with security features enabled
1363 Formats file size in bytes to a human-readable string or long value. @param size file size in bytes @param humanReadable true for human-readable format (e.g., KB, MB), false for raw byte count @return formatted size string or long byte count
1364 Formats file size in bytes to a human-readable format or raw value. @param size file size in bytes @param humanReadable true for human-readable format (e.g. KB, MB), false for raw value @return formatted string representation of the file size
1365 Converts long integer to human-readable string representation. @param number large integer value
1366 Converts byte count to human-readable string representation. @param len bytes to convert @return string description (e.g. "1K", "5M", etc.)
1367 Adds a row to the usages table with capacity and usage statistics. @param uri URI of the file system @param fsStatus FsStatus object containing capacity and usage metrics @param mountedOnPath path where the file system is mounted
1368 Converts a byte array to its hexadecimal string representation. @param bytes input byte array
1369 Calls recursive sorting algorithm with default comparator. @param s IndexedSortable object to be sorted @param p left index of the subarray @param r right index of the subarray
1370 Terminates application with specified exception. @param ee ExitException instance containing termination details
1371 Terminates application with a service launch exception and custom error message. @param status termination status code @param message human-readable error description
1372 Recursively terminates with an ExitException, propagating the cause. @param status exit status @param t Throwable exception to propagate (or null for default)
1373 Terminates the application with a specified exit status and message. @param status exit status code @param msg error message to display on termination
1374 Recursively halts execution with the given status and exception. @param status exit status code @param t throwable causing termination
1375 Throws an HaltException with specified status and message. @param status exit status code @param message descriptive error message
1376 Unregisters this object from the JVM's shutdown hook mechanism.
1377 Creates a new ArrayList instance from the given iterable. @param elements Iterable containing elements to be added
1378 Creates a new linked list populated with the given iterable elements. @param elements iterable collection of elements to be added @return newly created linked list
1379 Constructs a comprehensive ACL list from permission bits and entries. @param perm FsPermission object containing permission bits @param entries List of AclEntry objects or null if not applicable @return List of AclEntry objects representing the constructed ACL
1380 Creates a new ArrayList with specified elements. @param elements variable number of elements to initialize the list with
1381 Creates an empty ArrayList with expected size. @param estimatedSize initial capacity estimate
1382 Saves an object as JSON to a file. @param file target file path @param instance object to serialize and save
1383 Initializes StatisticDurationTracker with given statistics store and parameters. @param iostats IOStatisticsStore instance @param key unique statistic identifier @param count positive counter value (optional)
1384 Initializes a DurationInfo object with logging and text formatting. @param log Logger instance for logging messages @param logAtInfo Whether to log at INFO level or not @param format Text format string with placeholders for args @param args Variable number of arguments for text formatting
1385 Returns a string representation of this duration.
1386 Creates a striped CRC composer with specified parameters. @param type checksum type @param bytesPerCrcHint hint for CRC computation @param stripeLength length of each stripe in the output stream
1387 Composes two CRC values using a monomial polynomial. @param crcA first CRC value @param crcB second CRC value @param lengthB length of the data being computed @param mod modulus for the computation @return combined CRC value
1388 Computes and returns the CRC-based digest value. @return byte array containing the computed digest
1389 Decompresses a JAR file and saves it to a specified directory. @param inputStream input stream containing the JAR data @param toDir target directory for saving the decompressed content @param name desired filename for the saved contents @param unpackRegex regular expression for filtering unpacked files
1390 Unjars contents of specified JAR file into target directory. @param jarFile JAR archive to extract @param toDir directory to place extracted files in
1391 Finds the nth occurrence of a byte in a UTF-8 encoded array. @param utf UTF-8 encoded byte array @param b target byte value @param n occurrence index (1-based)
1392 Retrieves cached value by key, resolving weak reference if present; otherwise creates and adds a new value to the cache. @param key unique identifier for cached value @return cached or newly created value of type V
1393 Logs a warning for long-held lock or wait time. @param acquireTime lock acquisition timestamp @param releaseTime lock release timestamp @param checkLockHeld true to check held locks, false to check waiting threads
1394 Formats time with optional difference from start time. @param formattedFinishTime formatted finish time string @param finishTime finish time in milliseconds @param startTime start time in milliseconds @return formatted time string with optional time difference
1395 Splits input string into an array using comma as delimiter.
1396 Converts a string to camel case. @param s input string @return camelize'd string
1397 Escapes occurrences of a specified character in a string. @param str input string @param escapeChar character used for escaping @param charToEscape character to be escaped @return modified string with escapes
1398 Unescapes a string by replacing occurrences of escapeChar followed by charToEscape. @param str the input string @param escapeChar character used as an escape indicator @param charToEscape character to be unescaped @return unescaped string or original string if no replacements needed
1399 Creates a startup/shutdown message with details about the application. @param classname name of the Java class @param hostname host machine where the application is running @param args command-line arguments (may be null) @return formatted string containing startup information
1400 Retrieves build version information. @return The current build version as a string.
1401 Retrieves the next object from this iterator, or throws an exception if exhausted. @return the next object in the iteration, or null if hasNext() returns false
1402 Checks if the source has more elements to read. @throws IOException if an I/O error occurs
1403 Creates a lazily initialized auto-closeable reference from a supplier. @param supplier function to create the initial AutoCloseable instance
1404 Returns page size for bulk deletion on the given file system and path. @param fs the file system to operate on @param path the path to delete in bulk
1405 Deletes multiple files in bulk. @param fs FileSystem instance @param base Base directory for deletion @param paths Collection of file paths to delete @return List of deleted file entries (path, message) or empty list if none deleted
1406 Opens a file in the specified file system with customizable policy and options. @param fs file system instance @param path file path to open @param policy read access policy (e.g. "READ", "WRITE") @param status optional file status object @param length optional file length @param options additional file opening options @return FSDataInputStream object or null on failure
1407 Reads fully from InputStream into provided ByteBuffer at specified position. @param in InputStream to read from @param position current buffer position @param buf ByteBuffer to fill with data
1408 Loads I/O statistics snapshot from file system at specified location. @param fs file system instance @param path file system path to load snapshot from @return Serializable object containing loaded snapshot data or null if failed
1409 Creates an IO statistics snapshot from a JSON string. @param json The JSON data to deserialize @return An IOStatisticsSnapshot object or null on error
1410 Evaluates and returns the result. @throws UncheckedIOException if an IOException occurs during evaluation
1411 Creates a builder instance from an iterable of items. @param items Iterable containing items to be processed
1412 Raises inner cause of an ExecutionException. @param e Exception containing inner cause to be raised
1413 Waits for a future result, handling potential exceptions and cancellations. @param future Future object to await completion of @return Result value or throws exception if cancelled or an error occurs
1414 Waits for a future to complete within the specified timeout. @param future asynchronous computation to wait for @param timeout maximum time in the given unit to wait @param unit time unit of the timeout (e.g. milliseconds, seconds) @return result of the future or throws an exception if failed
1415 Raises inner cause of CompletionException. @param e CompletionException to extract and re-throw cause
1416 Sets configuration for a configurable object. @param theObject object to configure @param conf Configuration instance
1417 Retrieves a Class instance by name from the cache or configuration. @param name unique class identifier @param conf Hadoop Configuration object @return Class<?> instance or throws IOException if not found
1418 Loads a Java class by name from the configuration or system classpath. @param conf Configuration object with class loading enabled @param className name of the class to load @return loaded Class object, or null if not found
1419 Retrieves class by name from configuration. @param name class name to fetch @return Class object or null if not found
1420 Logs thread information at a specified interval. @param log logging instance @param title log message title @param minInterval minimum time interval between logs in milliseconds
1421 Logs thread information with a specified interval. @param log Logger instance @param title Thread info title @param minInterval Minimum logging interval in seconds
1422 Initializes AbstractFSBuilderImpl with a path and/or a path handle. @param optionalPath directory path (optional) @param optionalPathHandle path handle (optional)
1423 Initializes configuration with default values.
1424 Validates HTTP response by checking status code and throwing a custom exception. @param conn HttpURLConnection object to validate @param expectedStatus expected HTTP status code
1425 Creates a CRC32C checksum instance using either Java 9 factory or pure Java implementation. @return Checksum object
1426 Retrieves groups for a user by name. @param userName unique username
1427 Retrieves groups IDs associated with a user command. @param userName name of the user
1428 Generates set permission command with optional file path. @param perm permission value @param recursive whether to apply recursively @param file target file path (optional) @return command array or null if not found
1429 Generates signal kill command to check process alive status. @param pid unique process identifier
1430 Returns the canonical path of Hadoop Home directory.
1431 Constructs qualified Hadoop binary file path for a given executable. @param executable name of the executable (e.g. "hdfs") @return File object representing the executable in the Hadoop bin directory
1432 Adds a new phase to the progress and sets equal weightage for all existing phases. @return The newly added Progress object.
1433 Adds multiple phases with equal weightage. @param n number of phases to add
1434 Adds a new phase to the progress with specified weightage and status. @param status the current status of the phase @param weightage the weightage value for this phase @return the newly added Progress object
1435 Returns the current progress as a floating-point value.
1436 Creates a new entity at the specified file path. @param path absolute file path to create the entity at
1437 Recursively creates the root directory and its subdirectories. @param path absolute path to create @param zkAcl list of ACLs for ZooKeeper access control
1438 Dynamically loads and implements a method from the specified class. @param className name of the target class @param methodName name of the method to implement @param argClasses classes of the method's arguments (varargs)
1439 Builds an instance of the specified class with given argument classes. @param targetClass class to instantiate @param varargClasses classes for arguments
1440 Tries to find and invoke a hidden implementation for the specified method. @param className name of the class containing the method @param methodName name of the method to invoke @param argClasses classes of the method's arguments (varargs)
1441 Creates a new instance of the builder with specified target class and argument classes. @param targetClass the main class being built @param argClasses variable number of argument classes
1442 Loads a method with given parameters and returns type. @param source class containing the method @param returnType expected return type of the method @param name method name @param parameterTypes method parameter types @return UnboundMethod object or null if not found/loaded
1443 Verifies availability of all required dynamic methods. @throws UnsupportedOperationException if any method is unavailable
1444 Checks availability of bulk delete operation. @return true if available, false otherwise
1445 Checks availability of open file system operation. @return true if open file is available, false otherwise
1446 Checks availability of readable data in positioned buffer. @return true if data is available, false otherwise
1447 Checks if input stream is fully readable. @param in InputStream to check @return true if fully readable, false otherwise
1448 Checks if I/O statistics are available. @return true if statistics are available, false otherwise
1449 Checks if IO statistics context is enabled. @return true if available, false otherwise
1450 Throws an exception if the specified unbound method is not available. @param method Unbound method to check availability for
1451 Builds and binds a checked method invocation to the specified receiver object. @param receiver target object for method invocation
1452 Builds and binds a bound method to an object. @param receiver the object to bind the method to
1453 Creates a static-checked method from a checked method.
1454 Builds static instance of the class. @return StaticClass instance or null if failed
1455 Loads and registers available file system implementations.
1456 Calculates Jenkins Hash using provided file. @param args single filename argument
1457 Initializes a hash function with the given max value, number of hashes, and type. Validates input values. @param maxValue maximum value for hashing @param nbHash number of hash functions to use @param hashType type of hash function (e.g., MD5, SHA-256)
1458 Initializes a new instance of RetouchedBloomFilter.
1459 Approximates the count of a Key by searching all buckets. @param key the Key to approximate the count for @return an estimated count or 0 if not found, -1 on failure
1460 Adds a false positive to the hash table. @param key unique identifier of the false positive
1461 Removes a key from the specified hash table. @param k Key to be removed @param vector Hash table array of keys
1462 Finds the index of the hash with minimum weight. @return index of the minimum weighted hash or -1 if not found
1463 Finds the index of the hash with maximum weight. @param h array of hash indices
1464 Calculates the ratio of key weights to feature weights for each vector index.
1465 Dumps a named resource to the output stream. @param name unique resource identifier @return success code (SUCCESS or error code)
1466 Prints usage message and returns error code. @return Error code indicating successful execution or failure reason
1467 Inserts an element into the heap, potentially adjusting the top. @param element object to insert @return true if insertion was successful, false otherwise
1468 Creates a new TreeSet from an iterable of comparable elements. @param elements iterable of elements to populate the set
1469 Creates a new HashSet from an iterable collection of elements. @param elements input iterable to be converted into a set
1470 Creates a new hash set from the given elements. @param elements variable number of elements to include in the set
1471 Runs a program from the provided list. @param args array of command line arguments @return 0 on success, -1 on failure
1472 Adds a column to the report with specified title and justification. @param title column header text @param justification column justification (e.g. "Required") @param wrap whether to wrap long titles
1473 Calculates time duration based on given name and value string. @param name descriptive name of the duration @param vStr value string representing duration (e.g. "1h", "2d", etc.) @param unit TimeUnit to apply to duration calculation
1474 Appends XML property to the given Document, using provided ConfigRedactor for redaction if necessary. @param doc Document to append to @param conf Configuration element to append to @param propertyName Property name to fetch and append @param redactor Optional redactor to process property value
1475 Updates the deprecation context with the given deltas in a thread-safe manner. @param deltas array of deprecation changes to apply
1476 Binds a server listener across multiple ports in the specified range, starting from the given port and skipping it. @param listener ServerConnector instance @param startPort starting port number (skipped)
1477 Configures environment variables from HA service target info. @param target HAServiceTarget object @param environment map of environment variables to update
1478 Reads data from the specified PositionedReadable stream into the provided ByteBuffer. @param stream positioned readable stream to read from @param range file range to read, including offset and length @param buffer byte buffer to store the read data
1479 Validates and sorts vectored read ranges. @param ranges list of file ranges to validate
1480 Sets caching state and schedules future action. @param actionFuture asynchronous operation to execute
1481 Updates the state with a new value while ensuring it matches one of the expected current states. @param newState new state to apply @param expectedCurrentState multiple valid current states
1482 Verifies the given path exists and is a directory. @param path Path object to check @param argName Name of the argument associated with the path
1483 Verifies the given path exists and is a regular file. @param path Path object to validate @param argName Name of command-line argument associated with this path
1484 Checks if a given block number is the last block in the file. @param blockNumber block identifier @return true if block is last, false otherwise
1485 Calculates start offset in bytes by multiplying block number with block size. @param blockNumber unique block identifier
1486 Retrieves the blockchain state at the specified block number. @param blockNumber unique block identifier
1487 Sets the state of the system at a specific block number. @param blockNumber unique block identifier @param blockState new state to be assigned
1488 Calculates block number based on given offset. @param offset starting position in bytes
1489 Aggregates IO statistics snapshot with provided data. @param snapshot IO statistics snapshot to aggregate @param statistics IO statistics instance for aggregation @return true if aggregation was successful, false otherwise
1490 Saves IO statistics snapshot to file system. @param snapshot IO statistics snapshot data @param fs file system instance @param path output file path @param overwrite whether to overwrite existing file
1491 Retrieves IO statistics counters from a snapshot. @param source IOStatisticsSnapshot object or serializable data
1492 Returns gauges statistics from an IOStatisticsSnapshot. @param source IOStatisticsSnapshot object
1493 Computes minimum IO statistics. @param source input data to process
1494 Extracts maximum statistics from an IOStatisticsSnapshot. @param source IOStatisticsSnapshot instance @return Map of maximum statistics (key: statistic name, value: maximum value)
1495 Computes mean statistics for I/O operations. @param source IO statistics snapshot @return Map of operation types to (sample count, total sum) pairs
1496 Creates a deep copy of this FlagSet instance.
1497 Creates a FlagSet instance with the specified enumeration class and flag set. @param enumClass enumeration class for flag values @param prefix prefix string for flag names @param flags initial EnumSet of flags
1498 Closes file system and releases resources. @throws IOException if closing operation fails
1499 Closes all FileSystems, handling automatic and manual closings. @param onlyAutomatic true to skip non-automatic closings
1500 Converts IO statistics snapshot to JSON string. @param snapshot IO statistics data
1501 Writes bytes to a file at the specified path in the given FileContext. @param fileContext file system context @param path target file location @param bytes data to be written @return updated FileContext instance
1502 Writes a list of lines to a file using the specified charset. @param path target file path @param lines iterable of lines to write @param cs charset for encoding @return original FileContext instance
1503 Writes CharSequence to a file. @param path file location @param charseq text content @param cs character encoding scheme @return FileContext object
1504 Creates an output file at the specified path. @param path absolute file path
1505 Creates an FSDataOutputStreamBuilder for the given file path. @param path file system path to create output stream for
1506 Appends file to output stream. @param path file path to be appended
1507 Creates an output stream builder to append data to a file. @param path absolute path to the file
1508 Lists file statuses for the specified path. @param f Path to list status from @return Array of FileStatus objects or null if error occurs
1509 Lists status of given paths. @param files array of file paths
1510 Creates and registers a new synchronized counter with the specified value. @param info MetricsInfo object containing metric name @param iVal initial value for the counter @return newly created MutableCounterInt instance
1511 Creates and registers a synchronized mutable counter with the given value. @param info MetricsInfo object containing metric name @param iVal initial value for the counter @return MutableCounterLong instance or null if already registered
1512 Registers a new gauge with the given value. @param info MetricsInfo object @param iVal initial value for the gauge
1513 Creates a synchronized gauge for the specified metric with initial value. @param info MetricsInfo object containing metric details @param iVal Initial float value for the gauge @return MutableGaugeFloat instance associated with the metric name
1514 Creates and registers a synchronized gauge with the given initial value. @param info MetricsInfo object containing metric details @param iVal Initial integer value for the gauge @return MutableGaugeInt instance, synchronously updated by all threads
1515 Resolves a file system link to an object of type T. @param fileContext File context @param path Path to resolve @return Object of type T or null if unresolved
1516 Creates a new GlobBuilder instance with the given FileContext. @param fileContext context of the current file system
1517 Creates a new GlobBuilder instance. @param filesystem reference to the file system
1518 Checks if an asynchronous call has completed. @return true if the async call is done, false otherwise
1519 Retrieves an asynchronous getter instance from the cache or a lower layer. @return AsyncGet object or null if not found
1520 Updates folder usage statistics and stores in 'used' variable. @see DUHelper#getFolderUsage(String)
1521 Copies properties from another MeanStatistic instance. @param that MeanStatistic object to copy from
1522 Converts IO statistics source to string representation. @param source IO statistics source object or null @return String representation of IO statistics or empty string on failure
1523 Converts statistics to human-readable string representation.
1524 Returns string representation of this object's IO statistics. @return Human-readable string or NULL_SOURCE if not initialized.
1525 Converts IOStatistics to a human-readable string. @param statistics IOStatistics object or null
1526 Creates a duration tracker using the provided factory or returns a stub implementation. @param factory optional tracker factory, or null for default behavior @return created DurationTracker instance, or pre-configured stub if no factory provided
1527 Deletes block file and evicts cache entry. @param elementToPurge Entry object containing path and block number
1528 Builds IO statistics from given storage statistics. @param storageStatistics input statistics to process
1529 Adds atomic long counter to statistics. @param key unique identifier for counter @param source AtomicLong instance to fetch values from
1530 Adds atomic integer counter to statistics builder. @param key unique identifier for counter @param source atomic integer value source
1531 Adds mutable counter to builder. @param key unique counter identifier @param source mutable counter value supplier
1532 Adds an atomic long gauge to the builder. @param key gauge identifier @param source atomic long value source
1533 Adds an atomic integer gauge to the builder. @param key unique metric identifier @param source AtomicInteger value source
1534 Configures minimum value of atomic long statistic by key. @param key unique statistic identifier @param source atomic long value to use as minimum
1535 Sets minimum value of dynamic IO statistics to atomic integer's current value. @param key unique identifier @param source atomic integer containing the value
1536 Adds atomic long maximum statistic with specified key. @param key unique statistic identifier @param source atomic long value to track maximum of
1537 Sets maximum value from AtomicInteger source. @param key unique identifier @param source AtomicInteger to fetch value from @return DynamicIOStatisticsBuilder instance for chaining
1538 Registers failure handling mechanisms for interrupted threads. @throws IllegalArgumentException if configuration is invalid
1539 Accepts a connection on the DomainSocket. @return DomainSocket object representing the accepted connection or null if failed
1540 Shuts down the resource associated with this object. @throws IOException if an I/O error occurs during shutdown
1541 Sends file descriptors to the native layer. @param descriptors array of FileDescriptor objects @param jbuf buffer containing file data @param offset starting position in jbuf @param length number of bytes to send
1542 Receives file input stream descriptors from the server. @param streams array of FileInputStream objects to populate @param buf buffer for receiving data @param offset starting position in buffer @param length number of bytes to receive @return status code or throws IOException if an error occurs
1543 Creates a new IOStatisticsContext instance with the given ID. @param key unique identifier for this context
1544 Verifies chunked sums for the given ByteBuffer data and checksums. @param data input ByteBuffer @param checksums ByteBuffer containing checksums @param fileName file name associated with the verification @param basePos starting position for verification
1545 Updates decryptor context and returns padding byte if required. @param decryptor Decryptor instance @param inBuffer ByteBuffer containing encrypted data @param position Current position within the buffer @param iv Initialization vector for decryption @return Padding byte (0) or updated value if re-init required
1546 Resets stream offset and initializes buffers for decryption. @param offset new stream offset
1547 Writes a byte array to the underlying stream. @param b the byte array to write @param off starting offset within the array @param len number of bytes to write
1548 Flushes data to storage, encrypting it first. @throws IOException if an I/O error occurs during flushing.
1549 Compiles a shell glob pattern into a regular expression. @param globPattern glob pattern to be compiled
1550 Calculates bytes read based on distance. @param distance proximity level (0-5) @return total bytes read
1551 Creates or appends to a file with specified permissions and flags. @param f file path @param absolutePermission file permissions @param flag create flags (APPEND, OVERWRITE, etc.) @return FSDataOutputStream instance or null if not created
1552 Initializes an AbstractFileSystem instance from a URI. @param uri the file system's URI @param supportedScheme supported scheme (e.g., "file", "http") @param authorityNeeded whether authority is required in the URI @param defaultPort default port number for the scheme
1553 Encodes input byte arrays and stores output in separate byte arrays. @param inputs array of input byte arrays @param outputs array to store encoded output byte arrays
1554 Encodes input buffers and stores output in corresponding buffers. @param inputs array of input ByteBuffers to encode @param outputs array of output ByteBuffers to store encoded data
1555 Initializes an ArrayPrimitiveWritable with the given primitive array value. @param value primitive array to be stored in this writable object
1556 Returns canonical URI based on file system configuration. @return Canonical URI object.
1557 Checks if the object has a specific capability. @param capability unique identifier for the capability to check @return true if the object has the capability, false otherwise
1558 Releases block and buffers associated with the provided BufferData. @param data BufferData containing block number and other metadata
1559 Releases done blocks from the buffer. Iterates over all BufferData objects and releases those with state DONE.
1560 Initializes a CachingBlockManager instance with given parameters. @param blockManagerParameters configuration for caching and block management
1561 Reads and validates a file entry by block number into the provided buffer. @param blockNumber unique block identifier @param buffer byte buffer to store the entry data @throws IOException if an I/O error occurs during reading or validation
1562 Calculates the absolute offset from the start of the buffer. @return Absolute offset as a long value
1563 Checks if a buffer is fully read and valid. @return true if the buffer is fully consumed, false otherwise
1564 Sets absolute position in the buffer. @param pos new offset from buffer start @return true if successfully set, false otherwise
1565 Retrieves the current IO statistics context, throwing exception on null result.
1566 Sets thread I/O statistics context. @param statisticsContext context to be applied
1567 Retrieves configuration for instances of a given type. @param type unique identifier for the type
1568 Truncates and parses the given arguments list up to the specified position. @param args array of command-line arguments @param pos position from which to start parsing @return truncated list of parsed strings
1569 Increments error count and displays warning with given message. @param message error message to be displayed
1570 Creates a path handle for a file, throwing exceptions if the path is not a regular file. @param stat FileStatus object containing file metadata @param opts Options with HandleOpt settings (data and location)
1571 Creates an array of HandleOpt objects representing unchanged and unmoved elements.
1572 Returns an array of HandleOptions with predefined settings.
1573 Returns array of handle options for path operations.
1574 Returns an array of HandleOpt instances with updated status. @return Array of HandleOpt objects
1575 Initializes ShellCommandExecutor with command, working directory, environment, timeout, and inheritance settings. @param execString command to execute @param dir working directory for the command @param env environment variables for the process @param timeout maximum execution time in milliseconds @param inheritParentEnv whether to inherit parent's environment
1576 Initializes and starts the refresh thread if enabled. @param runImmediately whether to run immediately or wait for refresh interval
1577 Creates a private clone of the current token instance with a new service.
1578 Validates that URI is absolute with no scheme.
1579 Checks if URI path is absolute and scheme/authority are null.
1580 Checks if the URI path is absolute. @return true if absolute, false otherwise
1581 Validates the given file system path against the current instance's URI. @param path Path to validate
1582 Writes this object's data to the output stream. @throws IOException if an I/O error occurs
1583 Validates input arguments for uploading a file part. @param filePath the file path @param inputStream the input stream @param partNumber the part number (must be > 0) @param uploadId the upload handle (cannot be null) @param lengthInBytes the part length (must be >= 0)
1584 Aborts all uploads under a given directory path. @param path directory path to cancel uploads for
1585 Skips the specified number of bytes in the underlying stream. @param n number of bytes to skip @return the total number of bytes skipped, or 0 if already at EOF
1586 Applies a user mask to the current permissions. @param umask the user mask to apply @return updated FsPermission object
1587 Retrieves file permissions from SFTP file attributes. @param sftpFile SFTP file entry containing attributes @return FsPermission object representing file permissions
1588 Constructs an FsPermission object from a Unix-style file mode. @param mode Unix-style file mode (permissions and type)
1589 Returns default file system permissions with read/write access for owner and group. @return FsPermission object representing the default permissions
1590 Returns default file system permissions for directories. @return FsPermission object with default directory access rights
1591 Creates default file permissions. @return FsPermission object with rwxr-x permissions
1592 Returns default permissions for cache pool. @return FsPermission object with rwxr-x permissions
1593 Converts a Unix symbolic permission string to an FsPermission object. @param unixSymbolicPermission String representation of permissions (e.g., "rwxr-x") @return FsPermission object or null if input is invalid
1594 Prints ACL entries for a single scope. @param aclStatus Acl status @param fsPerm File system permissions @param entries List of AclEntries to print
1595 Converts ACL specification to a comma-separated string. @param aclSpec list of AclEntry objects
1596 Constructs an FsPermission instance from a string representation. @param mode string specifying permissions (e.g. "rwxr-x")
1597 Reads up to length bytes from the underlying buffer starting at offset. @param b destination byte array @param offset starting index within b @param length maximum number of bytes to read @return number of bytes actually read, or -1 if end-of-file reached
1598 Calculates the compressed size by subtracting initial position from current file pointer. @return Compressed file size in bytes
1599 Updates column widths for PathData items. @throws IOException if an I/O error occurs
1600 Retrieves quota usage information for the specified file. @param f Path to the file @return QuotaUsage object containing usage details or null if not available
1601 Retrieves total used content length at specified file system Path. @param path file system location to fetch usage summary from @return total used content length in bytes or -1 if error occurs
1602 Initializes an AbstractLaunchableService instance with the given name. @param name unique identifier of the service
1603 Transitions service to a new state. @param proposed target state identifier @return previous state before transition
1604 Instantiates and returns an instance of the specified service class. @param conf Configuration object @return Service instance or throws exception on failure
1605 Compares this object with the given object for equality. @param other object to compare, must be of type BinaryComparable
1606 Updates data in byte array. @param newData new data to replace @param offset starting index of replacement @param length number of bytes to update
1607 Sets and retrieves key length from BytesWritable object. @param key BytesWritable object to modify @return key length (0 if not set)
1608 Lists files in a directory. @param dir the directory to list @return array of file names, or throws exception if access is denied or an error occurs.
1609 Verifies directory access by checking its existence, readability, writability and executability. @param dir the directory to check
1610 Locks the specified direct ByteBuffer in memory for exclusive access. @param buffer direct ByteBuffer to lock @param len length of data to lock
1611 Creates a SharedFileDescriptorFactory instance using the provided prefix and paths. @param prefix unique identifier for the factory @param paths array of file descriptor locations @return SharedFileDescriptorFactory object or throws an IOException on failure
1612 Writes checksum chunks for the given byte array. @param b input data @param off starting offset in the byte array @param len length of the byte array to process
1613 Calculates chunked sums for the given data and checksum buffers. @param data ByteBuffer containing data to process @param checksums ByteBuffer for storing calculated checksums
1614 Releases allocated buffers and cleans up buffer pool.
1615 Initializes a new instance of the stream with the specified capacity. @param capacity maximum size of the buffer in bytes
1616 Decodes data from URL string. @param newValue new string value to decode
1617 Retrieves erased blocks from the given ECBlockGroup. @param blockGroup ECBlockGroup to extract blocks from @return Array of erased ECBlock objects, or null if none found
1618 Skips to the next marker of a specified length in the compressed stream. @param marker target marker value @param markerBitLength bit length of the marker @return true if the marker is found, false otherwise
1619 Initializes CBZip2OutputStream with specified block size. @param out OutputStream to write compressed data to @param blockSize compression block size (1-9)
1620 Initializes BlockCompressorStream with default settings. @param out target output stream @param compressor compression algorithm instance
1621 Initializes a BlockDecompressorStream with input stream and decompressor. @param in input stream to decompress @param decompressor decompression algorithm instance @param bufferSize buffer size for decompression
1622 Compresses and writes data in chunks up to MAX_INPUT_SIZE. @param b input byte array @param off starting offset within b @param len length of chunk
1623 Constructs a ZStandard compressor with specified compression level and buffer sizes. @param level compression level (0-22) @param bufferSize input/output buffer size
1624 Creates a CompressionOutputStream with the given codec and compressor pool. @param codec compression codec @param conf configuration @param out output stream to compress @return CompressionOutputStream or null on failure
1625 Closes resources and releases compressor and output stream.
1626 Creates a compression input stream with a codec pool. @param codec CompressionCodec instance @param conf Configuration object (not used) @param in InputStream to compress @return CompressionInputStream or null if creation fails
1627 Releases resources and closes deserializers. @throws IOException on close operation failure
1628 Returns a compressor instance based on zlib configuration. @param conf Hadoop Configuration object
1629 Returns a native zlib direct decompressor instance if supported. @param conf configuration object @return DirectDecompressor object or null if not supported
1630 Returns a zlib decompressor instance based on native support. @param conf configuration object indicating native zlib availability
1631 Stores a DelegationKey instance, persisting it to SQL database and local cache. @param key the DelegationKey object to be stored
1632 Updates delegation key by writing it to output stream and persisting to database and cache. @param key DelegationKey object to be updated
1633 Safely reads a string from the input stream, enforcing maximum length. @param in DataInput to read from @param maxLength Maximum allowed string length @return String value or null if invalid length
1634 Skips data of specified length from input stream. @param in DataInput stream to read from
1635 Reads compressed data into a temporary buffer and resets the compression filter. @param buffer DataInputBuffer to receive decompressed data @param filter CompressionInputStream to be reset
1636 Reads a string from the given DataInput with optional max length constraint. @param in input stream @param maxLength maximum allowed string length @return decoded string or null if read fails
1637 Writes a string to the output stream. @param out DataOutput stream @param s String data to be written (null indicates end of string)
1638 Builds a token service string from an InetSocketAddress. @param addr socket address to extract host and port @return formatted token service string or null if invalid
1639 Creates a Token object from the given proto. @param tokenProto TokenProto object @return Token<? extends TokenIdentifier> object or null if invalid
1640 Writes an enumeration value to the output stream. @param out DataOutput stream @param enumVal enumeration value to serialize
1641 Writes user and group information to the output stream. @param out DataOutput stream @param username user identifier string @param groupname group identifier string @param permission FsPermission object representing file permissions
1642 Creates a new Text instance from UTF-8 encoded byte array.
1643 Constructs a new Text instance from UTF-8 encoded string.
1644 Reads a line from the input Text stream. @param str input Text stream @param maxLineLength maximum allowed line length @param maxBytesToConsume maximum bytes to consume from the stream @return the length of the read line, or -1 if end-of-stream reached
1645 Returns the length of the text representation. @return Text length in characters
1646 Copies contents from another SortedMapWritable instance. @param other map to copy from
1647 Copies properties from another MapWritable instance. @param other source MapWritable to copy from
1648 Creates a retry policy that attempts retries up to the specified maximum time with fixed sleep intervals. @param maxTime maximum allowed execution time @param sleepTime interval between retries @param timeUnit unit of time for maxTime and sleepTime (e.g. seconds, milliseconds)
1649 Creates a proxy instance for the given interface with failover and retry capabilities. @param iface target interface @param proxyProvider provider of failover proxies @param retryPolicy policy for retrying failed operations
1650 Creates a proxy instance for the given interface and implementation. @param iface interface to proxy @param implementation concrete implementation of the interface
1651 Initializes Writer object with output stream, compression name, and configuration. @param fout FSDataOutputStream for writing data @param compressionName type of compression used @param conf Hadoop Configuration object
1652 Creates a TFileIndex from the input stream and comparator. @param entryCount number of index entries @param in DataInput to read from @param comparator BytesComparator for key comparison
1653 Checks for end-of-file condition. @return true if at EOF, false otherwise
1654 Flushes the buffer by writing any pending data and resetting the counter.
1655 Compares this RawComparable with the given key. @param key RawComparable object to compare with
1656 Constructs a new UTF8 instance from the specified string. @param string input string to be converted
1657 Generates an MD5 hash from the given string. @param string input string to be hashed
1658 Synchronizes buffered records and writes them to the output stream. @throws IOException if an I/O error occurs
1659 Generates and returns MD5 hash of bytes as tracking ID. @return Unique tracking identifier as a hexadecimal string
1660 Encodes current object to a URL-safe string. @return encoded string representation or null if failed
1661 Adds a new Node to the topology, enforcing leaf node depth consistency. @param node Node object to be added
1662 Removes a node from the network topology. @param node Node to be removed
1663 Decommissions a node, adding it to the list of nodes to be removed. @param node Node object to be decommissioned
1664 Sorts array of nodes based on distance from the given reader node. @param reader reference node for distance calculation @param nodes array of Node objects to sort
1665 Sorts an array of nodes by distance using network location. @param reader node used to calculate distances @param nodes array of nodes to sort @param activeLen number of active nodes @param secondarySort callback for secondary sorting (if needed)
1666 Initializes SocketInputStream with a readable byte channel and timeout. @param channel readable byte channel for socket I/O @param timeout connection timeout in milliseconds
1667 Initializes a SocketOutputStream with a WritableByteChannel and timeout. @param channel the underlying writeable channel @param timeout connection timeout in milliseconds
1668 Retrieves RPC response from a Call object, handling timeouts and exceptions. @param call the Call object containing the RPC request @param connection the Connection used for the RPC call @param timeout maximum time to wait for a response @param unit TimeUnit for the timeout; e.g., SECONDS or MILLISECONDS @return Writable RPC response, or null if timed out
1669 Initializes ScriptBasedMapping with default configuration. @param mapping Raw script-based mapping object.
1670 Initializes a ScriptBasedMappingWithDependency instance. @param no parameters are used by this constructor
1671 Creates an inner node with the specified parent name and increments level. @param parentName name of the parent node
1672 Adds a DomainSocket to the queue for processing. @param sock DomainSocket instance to be added @param handler Handler to invoke on socket completion
1673 Removes a DomainSocket from the domain socket pool. @param sock DomainSocket object to be removed
1674 Selects IO operations on a channel with specified options and timeout. @param channel channel to select IO on @param ops IO options to select for @param timeout total time in milliseconds to wait for IO @return number of ready channels or 0 if timed out
1675 Returns the default IP address from a given network interface. @param strInterface name of the network interface
1676 Retrieves host names associated with a given network interface. @param strInterface name of the network interface
1677 Retrieves the default host based on interface and DNS server. @param strInterface network interface or "default" for cached value @param nameserver DNS server address or "default" to disable @param tryfallbackResolution whether to attempt fallback resolution @return the first resolved host or null if not found
1678 Loads the first found metrics configuration from a list of files. @param prefix configuration prefix @param fileNames comma-separated file names to load @return loaded MetricsConfig object or default config if not found
1679 Loads user groups by ID. @param user unique user identifier @return Set of String group IDs or throws exception if not found
1680 Shuts down the singleton instance.
1681 Stops the server, interrupting all listeners and handlers. @throws InterruptedException if interrupted while stopping
1682 Stops the web app context and related resources. @throws Exception on any failure
1683 Initializes a MutableQuantiles instance with specified name, description, sample and value names, and quantile interval. @param name unique identifier @param description descriptive text @param sampleName sample name @param valueName value name @param interval quantile calculation interval in seconds
1684 Creates a new mutable stat with given details and stores it in the metrics map. @param name unique metric identifier @param desc metric description @param sampleName sampling name @param valueName value name @param extended whether to use extended mode @return MutableStat object or null if creation fails
1685 Constructs a new MutableStat instance with default flags. @param name name of the stat @param description description of the stat @param sampleName name of the sample associated with the stat @param valueName name of the value associated with the stat
1686 Sets context for metrics registry. @param name unique context identifier @return MetricsRegistry instance with updated context
1687 Creates a metrics registry entry with specified name, description, and value. @param name unique metric identifier @param description human-readable metric description @param value metric value to record @param override whether to override existing metric with same name
1688 Adds elapsed time to user's thread-safe sample statistics. @param name unique user identifier @param elapsed elapsed time in milliseconds
1689 Publishes metrics to all registered sinks. @param buffer Metrics data to be published @param immediate Whether to use immediate publishing mode
1690 Copies statistical data to another SampleStat object. @param other destination SampleStat instance
1691 Logs slow RPC calls based on processing time and sample size. @param methodName name of the method @param call RPC call object @param details Processing details with timing information
1692 Refreshes cached groups by clearing and re-caching.
1693 Prints separator line to console.
1694 Formats and prints a centered title in console. @param format print format string @param args variable arguments for format string
1695 Throws a KerberosDiagsFailure exception with the specified details. @param category diagnostic category @param message failure message @param args optional arguments for the message
1696 Creates a remote user with specified authentication method. @param user unique username @param authMethod authentication method (e.g. KERBEROS, SIMPLE) @return UserGroupInformation object representing the created user
1697 Starts the thread for removing expired tokens. @throws IOException if an I/O error occurs
1698 Updates master key by rolling the current key and updating expiration dates.
1699 Initializes an authenticated URL with no token. @param delegationToken unused parameter @param serviceName unused parameter
1700 Constructs an authenticated URL with a delegationToken authenticator. @param authenticator DelegationTokenAuthenticator instance
1701 Constructs an authenticated URL with delegated token using the given configurator. @param connConfigurator configuration for establishing connection
1702 Reads data into byte array and returns length.
1703 Determines whether credentials are from a Keytab file. @return true if using Kerberos with Hadoop login and valid Keytab, false otherwise
1704 Checks if credentials are from ticket-based authentication. @return true if credentials are from ticket, false otherwise
1705 Initializes and sets a default SSLSocketFactory instance. @param preferredMode desired SSL channel mode
1706 Default constructor to initialize the factory with no command.
1707 Initializes the underlying file system.
1708 Initializes HarFileSystem with provided FileSystem instance. @param fs the underlying file system to interact with
1709 Initializes FsShell with an optional shell path.
1710 Initializes groups base with given configuration. @param conf Configuration object containing group settings
1711 Initializes output and error streams to standard console.
1712 Resolves host name to InetAddress. @param host hostname or IP address @return InetAddress object or throws UnknownHostException on failure
1713 Writes ACL string to output stream. @throws IOException if I/O error occurs
1714 Creates a ZooKeeper instance with optional SSL configuration. @throws IOException if SSL configuration is invalid
1715 Retrieves size of queue associated with given key. @param keyName unique identifier for the queue @return size of queue, or 0 if not found
1716 Fetches at most 'num' values for the given key. @param keyName unique key identifier @param num maximum number of values to fetch @return List of retrieved values or null if not found
1717 Removes and processes queued items for the given name. @param keyName unique identifier to drain queue for
1718 Puts an element into the map with optional client-side backoff. @param e the element to put @throws InterruptedException if interrupted during backoff
1719 Ensures initialization has occurred. @throws IllegalStateException if called concurrently with initialization
1720 Converts current timestamp to specified unit. @param timeUnit target time unit
1721 Retrieves protocol signature based on client methods hash code and server version. @param clientMethodsHashCode unique identifier for client-side protocol @param serverVersion server's version information @param protocol protocol class to verify against @return ProtocolSignature object or null if match is found
1722 Decays current costs by applying the decay factor to each user's cost. Updates total decayed and raw call costs, as well as service user costs.
1723 Retrieves the priority level of the given schedulable object. @param obj Schedulable object to evaluate @return Priority level (non-negative integer) or 0 for highest priority users
1724 Retrieves and removes the next element from the queue based on priority. @return the removed element or null if none available
1725 Closes the IPC connection, removing it from the pool and cleaning up resources.
1726 Initializes a Globber instance to match files against a pattern. @param fs FileSystem instance @param pathPattern file system path pattern @param filter optional PathFilter for filtering results @param resolveSymlinks whether to follow symbolic links
1727 Constructs a MachineList instance from host entries string. @param hostEntries string containing machine information
1728 Creates a platform-specific system information instance. @return SysInfo object for the current operating system
1729 Calculates total physical memory size in bytes. @return Physical memory size in bytes, or -1 if failed to read proc mem info file
1730 Calculates total available virtual memory size. @return Total available virtual memory in bytes
1731 Transforms XML data using a stylesheet, writing output to a Writer. @param styleSheet InputStream containing XSLT stylesheet @param xml InputStream containing XML data @param out Writer to write transformed output to
1732 Formats storage summary based on options and types. @param qOption true to include quota usage @param hOption true for human-readable size formatting @param tOption true to show type-specific data @param xOption true to exclude snapshots from count @param types list of StorageType objects @return formatted storage summary string
1733 Formats snapshot statistics into a human-readable string. @param hOption true to use human-readable units (e.g. "GB") instead of raw values @return formatted string with space consumed and file/directory counts
1734 Calculates available memory capacity as a percentage. @param percentage desired capacity percentage @param mapName name of the memory map (currently unused)
1735 Fills the internal buffer with a checksum chunk from the input stream. @throws IOException on I/O errors
1736 Reads and discards a specified number of bytes from the underlying stream. @param len desired number of bytes to discard @return actual number of bytes discarded
1737 Converts the character sequence to a human-readable string. @return A string representation of the characters or null if an error occurs
1738 Returns a string representation of the data. @throws IOException if an I/O error occurs
1739 Converts byte array to string representation. @param bytes input byte array
1740 Reads a string from the input stream. @param in DataInput stream containing the string
1741 Validates RPC response header. @param header Response header from server
1742 Converts single byte to its hexadecimal string representation. @param b single byte value
1743 Handles and logs uncaught exceptions. @param thread the Thread instance that threw the exception @param exception the actual Throwable exception
1744 Exits the program with usage message.
1745 Handles uncaught exceptions in threads. @param thread Thread that threw the exception @param exception Throwable exception object
1746 Terminates application with specified exit code and error message. @param exitCode process termination status @param message brief description of termination reason
1747 Terminates the program with the specified exit status and message. @param status exit status code
1748 Terminates program with specified exit status and error message. @param status exit code @param msg error message to print before termination
1749 Halts the program with the specified exit status. @param status exit code to be returned
1750 Sorts an IndexedSortable object in-place using QuickSort algorithm. @param s IndexedSortable object to be sorted @param p Leftmost index of the subarray to sort @param r Rightmost index of the subarray to sort
1751 Constructs an AclStatus object with specified file attributes. @param owner file owner @param group file group @param stickyBit indicates presence of sticky bit @param entries list of ACL entries @param permission FsPermission value for the file
1752 Parses ACL string into a list of ACL objects. @param aclString comma-separated ACLs in scheme:id:perm format @return List of ACL objects or empty list if input is null
1753 Parses a comma-separated authentication string into a list of ZKAuthInfo objects. @param authString comma-separated scheme:auth strings @return List of ZKAuthInfo objects or empty list if input is null
1754 Preserves attributes from source to target PathData. @param src source data @param target target data @param preserveRawXAttrs whether to preserve raw xattrs
1755 Creates a list of minimal ACL entries for the given permissions. @param perm FsPermission object defining user, group and other actions @return List of AclEntry objects with ACCESS scope and USER, GROUP, OTHER types
1756 Creates a duration tracker based on the provided key and count. @param key unique identifier for tracking @param count initial value for tracking @return DurationTracker instance or stub if key is unknown
1757 Initializes duration tracker with given statistics store and key. @param iostats IO statistics store @param key unique identifier for tracking
1758 Constructs DurationInfo object with logging and formatting. @param log Logger instance for logging @param format string format for duration display
1759 Waits for the asynchronous operation to complete and throws an exception if cancelled or completed with an error. @throws IOException if the operation is cancelled or completes with an error
1760 Waits for CompletableFuture to complete, ignoring any exceptions. @param future CompletableFuture object to wait on
1761 Creates a new CRC composer instance with specified parameters. @param type checksum type to use @param bytesPerCrcHint hint for optimal CRC byte size
1762 Updates the composite CRC and advances stripe position by bytesPerCrc. @param crcB new CRC value @param bytesPerCrc number of bytes to advance stripe position by
1763 Formats time difference between two timestamps. @param dateFormat date format to apply @param finishTime end timestamp @param startTime start timestamp
1764 Escapes special characters in a string. @param str input string to be escaped
1765 Unescapes special characters in a string. @param str input string to process
1766 Creates a startup/shutdown message for the given class and command-line arguments. @param classname name of the class @param args command-line arguments @return formatted message or null if unsuccessful
1767 Advances to the next source element and returns it. @throws IOException if an I/O error occurs
1768 Awaits completion of a future, rethrowing any IO exceptions. @param future the future to await @return the result or null if cancelled
1769 Asynchronously retrieves results from a collection of futures and returns them as a list. @param collection Collection of futures to await completion on @return List of results or null if any future failed
1770 Awaits a future result with specified timeout. @param future the future to await @param timeout maximum wait time in given unit @param unit time unit for timeout (e.g., milliseconds, seconds) @return the awaited result or throws exception if timed out
1771 Asynchronously fetches results from all futures in the specified collection within the given time duration. @param collection Collection of Future objects to await @param duration Time duration to wait for results @return List of results or null if any future timed out
1772 Cancels all futures in the collection and awaits their completion within a specified duration. @param collection Collection of futures to cancel and await @param interruptIfRunning Whether to interrupt running tasks @param duration Duration to wait for task completion @return List of results from awaited tasks or null if not found
1773 Creates a new instance of the specified class with given arguments. @param theClass class to instantiate @param conf configuration object for initialization @param argTypes argument types matching constructor requirements @param values actual constructor arguments @return instantiated object or null on failure
1774 Retrieves the class associated with a given key name. @return Class<?> object or null if not found
1775 Retrieves the class associated with the value, loading it if necessary. @return Class<?> object or null if not loaded
1776 Loads a class by name and executes the post-load hook. @param name class name to load @return status code indicating success or failure
1777 Creates an instance of a specified class. @param name Class name to instantiate @return int result code: SUCCESS or error code (E_NOT_FOUND, E_CREATE_FAILED)
1778 Creates and returns a new instance of the Configuration class.
1779 Loads and returns configuration object based on provided or default settings.
1780 Initializes the FindClass instance with default configuration.
1781 Initializes a new instance of the ReconfigurableBase class with default configuration.
1782 Initializes a ReconfigurableBase instance with the provided configuration. @param conf optional Configuration object to initialize from
1783 Returns absolute path to executable with trailing slash. @param executable name of executable (e.g. "myapp")
1784 Runs a command in a child shell process.
1785 Adds a new phase to the progress with specified status. @param status current status of the phase
1786 Creates root directory recursively at specified path. @param path absolute directory path
1787 Checks if a file system has a specific capability for the given path. @param fs the file system object @param path the path to check @param capability the capability name to look for @return true if the capability exists, false otherwise
1788 Checks if an object has a specific capability. @param object the object to check @param capability the capability to look for @return true if the object has the capability, false otherwise
1789 Invokes iostatisticsCountersMethod with source object to retrieve counters. @param source object containing statistics data
1790 Invokes IO statistics gauges method with provided source. @param source data source for IO statistics
1791 Invokes the minimum statistics method on the given source object. @param source source object to invoke the method on @return a map of minimum statistics or null if not available
1792 Invokes iostatisticsMaximumsMethod to retrieve maximum statistics. @param source data source object
1793 Invokes method to calculate means of IO statistics. @param source data source object
1794 Invokes a static method with given arguments. @param args variable number of method arguments @return result of the invoked method or null if invalid
1795 Implements builder with specified class name and argument classes. @param className name of the class @param argClasses classes of arguments to be used in building process
1796 Constructs builder instance with specified class name and argument classes. @param className class name @param argClasses variable number of argument classes @return Builder instance for method chaining
1797 Loads a static method from the given class, ensuring it's available and static. @param source the class containing the method @param returnType the expected return type of the method @param name the method name @param parameterTypes the parameter types (varargs) @return an UnboundMethod object or null if not found
1798 Checks if provided object is an IO statistics source. @param object the object to check
1799 Checks if IO statistics are available and applicable to an object. @param object the object to check @return true if IO statistics are available for this object, false otherwise
1800 Verifies if the provided object represents an IO statistics snapshot. @param object Serializable object to verify @return true if it's a valid snapshot, false otherwise
1801 Verifies whether IO statistics context is enabled. @return true if enabled, false otherwise
1802 Deletes bulk page data in the specified file system with given path. @param fileSystem target file system @param path directory to delete from @return number of pages deleted
1803 Deletes a collection of files and directories by path. @param fs FileSystem object @param base Base directory for deletion @param paths Collection of file/directory paths to delete
1804 Opens a file in the specified file system with optional parameters. @param fs target file system @param path file path to open @param policy access control policy @param status cached file status (null for fresh status) @param length file size in bytes (null for unknown) @param options additional file opening options @return FSDataInputStream object or null on failure
1805 Reads input stream into buffer starting at specified position. @param in InputStream to read from @param position Starting position in the buffer @param buf ByteBuffer to fill with data
1806 Checks availability of I/O statistics.
1807 Checks availability of IO statistics context. @throws RuntimeException if unavailable.
1808 Initializes a LightWeightCache instance with specified parameters. @param recommendedLength recommended cache length in units @param sizeLimit maximum allowed cache size in bytes @param creationExpirationPeriod expiration period for created items in seconds @param accessExpirationPeriod expiration period for accessed items in seconds
1809 Initializes a Filter object with specified parameters. @param vectorSize size of the data vector @param nbHash number of hash functions to use @param hashType type of hash function (implementation-dependent)
1810 Deletes a member with the given Key. @param key unique identifier of the member to delete
1811 Recursively adds false positives to the index by iterating over a collection of keys. @param coll Collection of Key objects to process
1812 Recursively adds false positives to the system. @param keys list of Key objects to process
1813 Adds false positives to the system by processing an array of keys. @param keys array of unique identifiers
1814 Clears the specified index in the key and false positive vectors, and resets the corresponding ratio value. @param index position to clear in the vector
1815 Finds the index of the hash with the minimum ratio. @return Index of the smallest ratio or a default value if none found
1816 Exits application with error code if run() fails. @param argv array of command-line arguments
1817 Retrieves CredentialEntry from the specified provider by name. @param provider credential provider @param name unique credential identifier @return CredentialEntry object or null if not found
1818 Adds a single deprecation with the given key and message. @param key unique identifier for the deprecated item @param newKeys array of replacement keys @param customMessage custom deprecation message (optional)
1819 Binds and starts server listeners. @throws Exception on binding or starting failure
1820 Validates fencing configuration string. @param argStr configuration string to parse or null for no validation
1821 Recursively deletes the working directory's parent node in ZooKeeper. @throws IOException if deletion fails
1822 Fetches and fences old active ZNode if necessary. @return Stat object or null if no old node found
1823 Reads a file range from the given stream and returns the data as a ByteBuffer. @param stream input stream @param range FileRange object specifying the requested range @param allocate function to allocate a ByteBuffer with the correct size @return CompletableFuture containing the read ByteBuffer or null if an error occurs
1824 Requests caching of a buffer by its block number. @param data BufferData object containing the block to cache
1825 Sets prefetch state with a future action. @param actionFuture Future object representing the prefetch action
1826 Sets the state to READY and updates checksum. @param expectedCurrentState varargs of expected current states
1827 Calculates the size of a file block based on its number. @param blockNumber unique block identifier @return Size of the block in bytes or 0 if fileSize is zero
1828 Calculates relative offset within a block. @param blockNumber unique block identifier @param offset absolute position to find relative offset for @return Relative offset as an integer, or throws exception if invalid offset
1829 Initializes BlockData with fileSize and blockSize. @param fileSize total file size @param blockSize fixed block size
1830 Retrieves the current block number from the buffer.
1831 Closes all connections and resources. @throws IOException if an I/O error occurs
1832 Closes all file system resources for the given User Group Information. @param ugi user group information
1833 Writes character sequence to a file at specified path. @param fileContext context for the file operation @param path file location @param charseq data to be written
1834 Writes byte array to a file in the specified file system. @param fs target file system @param path destination file path @param bytes data to be written @return the modified file system
1835 Writes a list of lines to a file on the specified file system. @param fs target file system @param path file location @param lines iterable of line data @param cs character set for encoding @return the modified file system
1836 Writes a CharSequence to a file in the given FileSystem. @param fs target FileSystem @param path file location @param charseq data to write @param cs character set for encoding @return the modified FileSystem
1837 Initializes a BlockLocation object with given parameters. @param names array of block names @param hosts array of host addresses @param topologyPaths array of topology paths (optional) @param offset offset value @param length length value @param corrupt indicates if the block is corrupted
1838 Creates a new mutable counter with initial integer value. @param name counter name @param desc counter description @param iVal initial integer value
1839 Creates a new mutable counter with initial value and description. @param name unique identifier for the counter @param desc human-readable description of the counter @param iVal initial value of the counter
1840 Creates a new mutable gauge with initial value and description. @param name gauge identifier @param desc gauge description @param iVal initial gauge value
1841 Creates a new gauge with specified name and description. @param name unique identifier for the gauge @param desc human-readable description of the gauge @param iVal initial value of the gauge
1842 Creates a new gauge with specified initial value and description. @param name Gauge display name @param desc Gauge description @param iVal Initial gauge value
1843 Creates a deep copy of this MeanStatistic instance. @return A new MeanStatistic object with identical properties
1844 Logs IO statistics at debug level if enabled. @param log Logger instance for logging @param message Customizable log message prefix @param source Object containing IO statistics to be logged
1845 Returns a string representation of the object, including IO statistics. @return A formatted string containing superclass and IO stats details
1846 Converts IOStatistics object to pretty string representation. @param statistics IOStatistics object or null for empty string
1847 Measures invocation duration using a DurationTracker. @param factory tracker factory for creating trackers @param statistic metric to track (e.g., "read", "write") @return measured duration in the format returned by TrackerFactory
1848 Tracks execution duration of a supplier function. @param factory DurationTrackerFactory instance (optional) @param statistic tracking statistic to record @return input function's return value or null if fails
1849 Adds entry to linked list and evicts oldest block if required. @param entry Entry object to add
1850 Initializes IO statistics store with dynamic counters and gauges. @param counters list of counter names @param gauges list of gauge names @param minimums list of minimum values @param maximums list of maximum values @param meanStatistics list of mean statistic functions
1851 Reads up to len bytes from the underlying stream into the given array. @param b byte array to read into @param off offset in b to start reading at @param len maximum number of bytes to read @return actual number of bytes read, or -1 on end-of-file
1852 Decrypts data in-place within the provided buffer. @param position starting position for decryption @param buffer input/output data to be decrypted @param offset starting offset within the buffer @param length number of bytes to decrypt
1853 Decrypts data from a ByteBuffer using a provided Decryptor. @param filePosition position to start decryption @param buf input/output ByteBuffer @param length total bytes to decrypt @param start starting byte offset in the buffer
1854 Decrypts a specified portion of the input buffer. @param buf ByteBuffer containing encrypted data @param length total number of bytes to decrypt @param start starting position within the ByteBuffer
1855 Seeks to a specific position in the stream. @param pos target position (must be non-negative) @throws IOException if an I/O error occurs
1856 Skips specified number of bytes in the underlying stream. @param n positive skip length @return actual number of skipped bytes from user's point of view
1857 Initializes GlobFilter with specified file pattern. @param filePattern glob pattern to filter files
1858 Initializes a new GlobFilter instance with the specified file pattern and filter. @param filePattern glob pattern to match files @param filter additional filtering criteria
1859 Extracts a tar archive from an InputStream to a specified directory. @param inputStream input stream containing the tar archive @param untarDir target directory for extraction @param gzipped true if the archive is gzip-compressed
1860 Retrieves all system-wide statistics as a map of URI to Statistics objects. @return A map of file system URIs to their respective statistics.
1861 Clears statistics from the file system.
1862 Encodes input and output chunks using provided encoding method. @param inputs array of ECChunks to be encoded @param outputs array of ECChunks to store encoded result
1863 Creates a new instance of a blocking thread pool with customizable parameters. @param activeTasks number of active threads @param waitingTasks initial queue size @param keepAliveTime time to keep idle threads alive @param unit TimeUnit for keepAliveTime @param prefixName identifier for daemon threads
1864 Initializes data and buffer with provided values. @param bufferData BufferData object to initialize from @param startOffset starting offset for buffer data @param readOffset starting offset for reading data
1865 Retrieves current IO statistics context. @return The current IO statistics context object or null if unavailable
1866 Resets IO statistics context.
1867 Returns a snapshot of current IO statistics context.
1868 Aggregates IO statistics from the given source into the current context. @param source object containing IO statistics to aggregate @return true if aggregation was successful, false otherwise
1869 Runs a task in parallel for each item, handling failures and reverts. @throws E exception thrown by the task or its revert @throws IOException iterator failure
1870 Sets thread IO statistics context. @param statisticsContext IOStatisticsContext object or null to clear
1871 Sets thread-level IO statistics context. @param ioStatisticsContext Thread-specific IO stats context
1872 Resets and clears thread IO statistics context. @param none
1873 Handles and displays an error with logging and recursive display of the error message. @param e Exception object to be handled
1874 Creates a path handle based on file status and optional parameters. @param stat FileStatus object @param opt HandleOpt array (optional) @return PathHandle object
1875 Adds a token to the map for a given Text alias. @param alias unique text identifier @param t Token object to add (or its private clone if existing token is private)
1876 Encrypts input data and writes result to output buffer. @param inBuffer input data to be encrypted (ByteBuffer) @param outBuffer output buffer for encrypted data (ByteBuffer) @throws IOException if encryption fails
1877 Decrypts input data to output buffer. @param inBuffer encrypted data to decrypt @param outBuffer decrypted data to store
1878 Initializes configuration for mounting points by compiling the source pattern and populating variable-in-destination-path map. @throws IOException if an error occurs during initialization
1879 Resolves a child path against its parent, adding a trailing slash if necessary. @param parent the parent path @param child the child path to resolve
1880 Initializes a Path object from a string representation. @param pathString string containing path information
1881 Initializes a Path object from its components. @param scheme URI scheme @param authority URI authority @param path URI path
1882 Converts URI to string representation. @return stringified URI or null if invalid
1883 Extracts the file system path of a given Path object. @param p input Path to extract path from @return the extracted path or throws InvalidPathException if invalid
1884 Resolves a given file system path. @param p the input path to resolve @return the resolved path or throws an exception if unresolved
1885 Creates an FSDataOutputStream with specified options. @param f the path to create @param createFlag flags for creating file @param opts optional creation options (e.g. block size, buffer size) @return FSDataOutputStream instance
1886 Applies a user mask to the given file system permission. @param mode original FS permission @param umask user mask to apply
1887 Creates a directory with default permissions. @param f Path to create
1888 Sets the file system permission. @param permission FsPermission object or null to reset to default
1889 Creates a non-recursive FSDataOutputStream on the specified file. @param f target file path
1890 Creates an immutable file system permission with the specified value. @param permission short value representing the permission
1891 Appends a serialized key-value pair to the output stream. @param key unique identifier @param val associated value @throws IOException on serialization or write errors
1892 Returns the compressed size of the block state.
1893 Skips a specified number of bytes in the underlying stream. @param n number of bytes to skip @return actual number of bytes skipped
1894 Retrieves the used disk space in bytes for the given file system path. @param path the file system path to query @return the amount of used disk space in bytes, or -1 if an error occurs
1895 Retrieves the used disk space in bytes for the specified file system location. @param path file system path to query
1896 Continuously adds integers to a list, simulating an infinite loop.
1897 Starts the service if not already running.
1898 Enters a new state, recording the transition and updating service state. @param newState new state to enter
1899 Retrieves and prints the default Kerberos realm. @throws KerberosDiagsFailure if getDefaultRealm() fails
1900 Checks equality with another object. @param right_obj object to compare with @return true if equal, false otherwise
1901 Checks if this object is equal to another Text object. @param o the object to compare with (null or not an instance of Text returns false)
1902 Sets user profile data from BytesWritable object. @param newData new profile data to be set
1903 Decodes input byte buffers and writes output to corresponding outputs. @param inputs array of ByteBuffer objects to decode from @param erasedIndexes array of indices for erasure in outputs @param outputs array of ByteBuffer objects to write decoded data to
1904 Decodes input byte arrays using provided decoding state. @param inputs input byte arrays to decode @param erasedIndexes array of indexes that were erased during encoding @param outputs decoded output byte arrays
1905 Skips to next block marker in input stream. @throws IOException if reading fails
1906 Initializes the CBZip2OutputStream with the specified output stream and compression block size. @param out the output stream to use
1907 Initializes a block decompressor stream with input and decompression logic. @param in input stream to read from @param decompressor decompression strategy to use
1908 Creates a compression output stream based on codec pool configuration. @param out target output stream
1909 Creates a compression output stream using the codec pool. @param out target output stream
1910 Creates an output stream for compression with codec pool. @param out target output stream
1911 Creates a compression output stream with codec pool. @param out target output stream
1912 Closes and releases all underlying resources (data and index). @throws IOException if an I/O error occurs during closure
1913 Closes output stream and returns compressor resources. @throws IOException on write or close errors
1914 Creates an input stream with compression support. @param in underlying input stream
1915 Creates an input stream for compression using codec pool. @param in input stream to compress @return CompressionInputStream object or null if failed
1916 Creates a compression-aware input stream from the given InputStream. @param in target InputStream to compress
1917 Creates an input stream with compression codec pool. @param in InputStream to compress
1918 Closes the underlying index and data streams. @throws IOException if an I/O error occurs during closing
1919 Closes input stream and releases resources.
1920 Creates and returns an instance of DirectDecompressor. @return DirectDecompressor object initialized with configuration from conf.
1921 Writes file header to output stream. @throws IOException if I/O error occurs during writing
1922 Writes token and secret key data to output stream. @throws IOException on write failure
1923 Reads a block of records from the input stream. @throws IOException if file is corrupt or reading fails
1924 Skips to the current value in compressed or uncompressed block. @throws IOException if seeking fails
1925 Reads a string from the specified DataInput up to a maximum length. @param in input stream
1926 Retrieves DelegationKey by ID from local cache or SQL database. @param keyId unique identifier for the DelegationKey @return DelegationKey object or null if not found
1927 Retrieves a delegation token for the specified URL and credentials. @param url target URL @param creds user credentials @return Delegation token or null if not available
1928 Retrieves a server token based on the provided authentication type. @param authType SaslAuth type to use for token selection @return Token object or null if protocol does not support tokens
1929 Sets the token service for a given token, or logs a warning if token is null. @param token The token to set service for (may be null) @param addr The InetSocketAddress of the token service
1930 Converts TokenProto to Token using Protobuf helper. @param tokenProto TokenProto object @return Token object or null if conversion fails
1931 Retrieves a fixed byte string from cache or creates it if not found. @param key unique text identifier @return ByteString object representing the fixed byte string
1932 Copies token properties from another token object. @param other the token to copy from
1933 Reads a line from the text stream with a maximum length. @param str Text stream to read from @param maxLineLength Maximum allowed line length @return Length of the read line or -1 on error
1934 Reads a line from the given text, up to max length. @param str input Text object @return number of characters read or -1 on error
1935 Constructs an instrumented lock with specified parameters. @param name unique lock identifier @param logger logging instance for lock events @param minLoggingGapMs minimum time gap between log messages (ms) @param lockWarningThresholdMs threshold for warning on excessive locking (ms)
1936 Creates a proxy instance for the given interface and implementation. @param iface target interface @param implementation concrete implementation of the interface @param retryPolicy retry policy configuration
1937 Waits and retries based on wait time and retry info. @throws InterruptedIOException if retry is interrupted
1938 Initializes a Writer object with file system output stream and configuration. @param fsdos FSDataOutputStream to write to @param minBlockSize minimum block size for writing @param compressName compression algorithm name @param comparator comparison function name @param conf Hadoop Configuration object
1939 Checks if current chunk is the last one in the sequence. @return true if this is the final chunk, false otherwise
1940 Returns the remaining bytes in the input stream. @throws IOException if end of file has been reached
1941 Compares this byte array to another using lexicographical order. @param buf source byte array @param offset starting index in buf @param length number of bytes to compare
1942 Closes the output stream and synchronizes any pending operations. @throws IOException if an I/O error occurs during closing
1943 Appends a key-value pair to the underlying storage. @param key object with class matching keyClass @param val object with class matching valClass
1944 Appends a raw key-value pair, compressing and flushing when buffer size exceeds threshold. @param keyData the key data to append @param keyOffset offset into keyData for appending @param keyLength length of key data to append @param val ValueBytes object containing value data
1945 Clones one Writable object into another. @param dst destination Writable object @param src source Writable object to be cloned
1946 Chooses a random Node within the specified scope, excluding provided nodes. @param scope unique identifier for the node hierarchy @param excludedNodes collection of nodes to exclude from selection
1947 Sorts an array of nodes by distance from a given node. @param reader reference node @param nodes array of nodes to sort @param activeLen length of active nodes
1948 Sorts nodes by distance from the reader's network location. @param reader node to calculate distances from @param nodes array of nodes to sort
1949 Creates a new SocketInputStream instance. @param socket underlying socket channel @param timeout read timeout in milliseconds
1950 Initializes SocketInputStream with a given Socket instance. @param socket active network connection
1951 Creates a SocketOutputStream with specified timeout. @param socket underlying socket channel @param timeout socket operation timeout in milliseconds
1952 Adds a new node to the topology, updating rack info and cluster map. @param node Node object to add
1953 Performs I/O operations on a ByteBuffer until it's empty or an error occurs. @param buf ByteBuffer to read from/write to @param ops IO operation flags (e.g. read, write) @return number of bytes processed (-1 if closed, 0 if successful)
1954 Establishes a connection to the specified endpoint with the given timeout. @param channel SocketChannel instance @param endpoint SocketAddress of the remote server @param timeout Connection timeout in milliseconds
1955 Waits for specified number of I/O operations on the channel. @param ops number of I/O operations to wait for
1956 Returns default host name based on given interface. @param strInterface network interface (optional)
1957 Returns default host with optional interface and nameserver. @param strInterface interface to use (optional) @param nameserver nameserver to use (optional)
1958 Reattaches metrics to the current metrics registry.
1959 Creates a new MutableInverseQuantiles object with specified parameters. @param name unique identifier for the quantile metric @param description human-readable description of the metric @param sampleName name of the data source being quantified @param valueName name of the data values being processed @param intervalSecs time interval in seconds between quantile calculations
1960 Creates a new quantiles metric with the specified name and description. @param name metric name @param desc metric description @param sampleName sample name @param valueName value name @param interval positive interval for quantile calculation @return newly created MutableQuantiles object
1961 Creates a new mutable statistic with given name and description. @param name unique statistic name @param desc descriptive text for the statistic @param sampleName name of the sample associated with this statistic @param valueName name of the value associated with this statistic
1962 Tags a metric with given name, description and value. @param name unique metric identifier @param description human-readable metric description @param value current metric value as string
1963 Adds a new metric with specified name and value. @param name unique metric identifier @param value numeric value associated with the metric
1964 Adds time spent in queue to its corresponding rate. @param priority queue level (0-9) @param queueTime time spent in queue
1965 Adds processing time to the RPC processing rates map. @param priority integer representing message priority level @param processingTime duration of processing in milliseconds
1966 Adds RPC call processing time to the overall rates map. @param rpcCallName name of the RPC call @param overallProcessingTime total processing time for the call
1967 Validates and locates Kerberos configuration file. @throws IOException if file cannot be accessed
1968 Verifies a conditional statement and handles failure or reporting. @param condition boolean condition to evaluate @param category diagnostic category for messages @param message error message template @param args variable arguments for formatted message @return true if condition is met, false otherwise
1969 Fails with a diagnostics error if the given condition is true. @param condition boolean condition to evaluate @param category diagnostic category for the failure @param message failure message string @param args variable arguments for message formatting
1970 Creates remote user with specified username and default authentication method. @param user name of the remote user to be created
1971 Verifies a token by comparing its stored and provided passwords. @param identifier unique token identifier @param password the user-provided password to verify against stored value
1972 Spawns a thread to auto-renew keytabs based on Kerberos ticket. @param none
1973 Creates a new Count object from an array of command-line arguments. @param cmd array of command-line arguments @param pos starting index for argument copying @param conf configuration object passed to superclass constructor
1974 Establishes a ZooKeeper connection and waits for the asynchronous success/failure. @throws IOException if ZooKeeper connection cannot be established @throws KeeperException on ZooKeeper operation failure
1975 Retrieves the next element of type E associated with the given key. @param keyName name of the key to look up @return the next available element or null if not found
1976 Resolves hostname to InetAddress. Times slow lookups and logs results. @param hostname the hostname to resolve @return InetAddress object or null if not found
1977 Retrieves protocol signature based on server and client versions. @param server VersionedProtocol instance @param protocol string identifier for target protocol class @param clientVersion client version number @param clientMethodsHash hash of client methods @return ProtocolSignature object or throws IOException if error occurs
1978 Checks if a method is supported by the server. @param methodName name of the method to check @param parameterTypes method parameters (varargs) @return true if method is supported, false otherwise
1979 Validates RPC request headers for correctness and expected operation. @param header RpcRequestHeaderProto object containing header data
1980 Retrieves a Message object of type T from the provided buffer. @param message the message to retrieve @param buffer the buffer containing the message data @return the retrieved Message object or throws an exception if failed
1981 Retrieves and removes the next element from this queue. @return element of type E or null if queue is empty
1982 Handles bad version responses based on client version. @param clientVersion client's protocol version
1983 Calculates total virtual memory size by adding physical and swap sizes. @return Total virtual memory size in bytes.
1984 Constructs a new HarFSDataInputStream instance for the specified file. @param fs FileSystem instance @param p Path to the file @param start starting byte offset @param length total bytes to read @param bufsize buffer size in bytes
1985 Regularly removes expired entries from the queue. @throws AssertionError if eviction fails to match the expected entry
1986 Evicts excess cache entries to maintain a maximum size limit. @param none
1987 Constructs a string representation with query and headers options. @param qOption whether to include query option @param hOption whether to include header option @param xOption whether to include extra option (not used in this method)
1988 Constructs string representation with default filter option. @param qOption query option flag @param hOption hide option flag @param tOption type option flag @param types list of storage types
1989 Generates string representation based on type usage or quota. @param hOption high-level option @param tOption show type usage option @param types list of storage types
1990 Awaits completion of all provided futures. @param futures list of completable futures to wait for
1991 Waits for asynchronous operation completion if provided. @param future nullable CompletableFuture instance to wait on
1992 Updates CRC values from byte array. @param crcBuffer input byte array @param offset starting position in array @param length number of CRCs to update @param bytesPerCrc CRC size in bytes
1993 Updates CRC values from input stream. @param checksumIn DataInputStream containing CRC values @param numChecksumsToRead number of CRC values to read @param bytesPerCrc size of each CRC value in bytes
1994 Creates a new instance of the specified class. @param theClass Class to instantiate
1995 Retrieves the key class associated with the data.
1996 Returns the class type of the value associated with the data.
1997 Executes a command with two arguments: action and name. @param args array of command-line arguments @return integer status code (SUCCESS or ERROR)
1998 Initializes a new FutureDataInputStreamBuilderImpl instance with the specified file context and path. @param fc non-null FileContext object @param path non-null Path to initialize the builder with
1999 Creates a new DataChecksum object from the given byte array, starting at offset. @param bytes input byte array @param offset starting position in the byte array @return DataChecksum object or throws InvalidChecksumSizeException if invalid
2000 Creates a new DataChecksum instance from an input stream. @param in Input stream containing checksum parameters @return DataChecksum object or null if invalid parameters are encountered
2001 Executes the command and resets exit code. @throws IOException on execution error
2002 Aggregates I/O statistics from a snapshot. @param snapshot IoStatistics snapshot object @param statistics Additional statistics to aggregate (may be null)
2003 Creates an IO statistics snapshot. @throws UnsupportedOperationException if not supported
2004 Creates I/O statistics snapshot with optional source object. @param source optional source object (can be null)
2005 Converts IO statistics snapshot to JSON string. @param snapshot IO statistics snapshot object
2006 Creates iostatistics snapshot from JSON string. @param json input JSON data
2007 Loads IO statistics snapshot from specified file system and path. @param fs the file system to load from @param path the path to the snapshot file
2008 Retrieves IO statistics snapshot using the invoke method. @param source can be null
2009 Saves IO statistics snapshot to file system. @param snapshot snapshot data @param fs file system for saving @param path file path for saving @param overwrite whether to overwrite existing file
2010 Converts IO statistics to a pretty string representation. @param statistics IO statistics object
2011 Retrieves current I/O statistics context.
2012 Sets thread IO statistics context. @param statisticsContext optional IO statistics context object
2013 Resets IO statistics context.
2014 Retrieves IO statistics context snapshot. @throws UnsupportedOperationException if not available
2015 Aggregates IO statistics context with given data. @param source data to aggregate @return true if aggregation successful, false otherwise
2016 Compares two software versions as strings. @param version1 first version to compare @param version2 second version to compare @return negative/zero/positive if version1 is less than/equal to/greater than version2
2017 Initializes Counting Bloom Filter with specified parameters. @param vectorSize size of the filter's underlying vector @param nbHash number of hash functions to use @param hashType type of hash function (not further explained in this comment)
2018 Initializes a Bloom filter with specified parameters. @param vectorSize size of the filter vector @param nbHash number of hash functions to use @param hashType type of hashing algorithm to employ
2019 Checks if the Bloom filter probably contains a specified key. @param key WritableComparable to test membership
2020 Performs selective clearing based on the provided key and scheme. @param k Key to be processed @param scheme Selective clearing scheme (RANDOM, MINIMUM_FN, MAXIMUM_FP, RATIO)
2021 Adds deprecation for a single key. @param key deprecated key @param newKey replacement key @param customMessage custom deprecation message
2022 Adds deprecation information with default configuration. @param key unique identifier for deprecation @param newKeys list of added keys or null to use defaults
2023 Adds deprecation notice for the specified key. @param key old key to be deprecated @param newKey replacement key (may be null if no replacement)
2024 Initializes and starts the web server, registering metrics as needed.
2025 Writes or updates ZNode to indicate current local node status. @param oldBreadcrumbStat previous breadcrumb stat (null if new)
2026 Deletes this node's breadcrumb from ZooKeeper if still active. @throws IllegalStateException if data mismatch or deletion fails
2027 Reads vectored data from the stream into specified file ranges. @param stream PositionedReadable stream to read from @param ranges List of FileRange objects to populate with data @param allocate IntFunction to allocate ByteBuffer for each range
2028 Cancels pending prefetches and adds prefetched blocks to local cache.
2029 Retrieves data for a specified block number. @param blockNumber unique block identifier @return BufferData object containing block data or null on failure
2030 Initializes FilePosition object with fileSize and blockSize parameters. @param fileSize total size of the file @param blockSize size of each block in the file
2031 Determines whether the current block is the last one. @return true if this is the last block, false otherwise
2032 Closes all open resources and cache. @throws IOException if an I/O error occurs during closure
2033 Writes a CharSequence to a file at the specified Path using UTF-8 encoding. @param fs target file system @param path file location @param charseq text content
2034 Constructs a BlockLocation with default metadata. @param names array of block names @param hosts array of hostnames @param offset starting byte offset within the block @param length total bytes occupied by the block @param corrupt flag indicating if the block is corrupted
2035 Constructs a BlockLocation object with specified parameters. @param names array of block names @param hosts array of host identifiers @param topologyPaths array of topology paths @param offset starting position in bytes @param length total size in bytes
2036 Merges two mean statistics into one. @param l left statistic @param r right statistic @return combined MeanStatistic object
2037 Synchronizes all counters and statistics with the provided source. @param source IOStatistics object containing data to synchronize
2038 Logs IO statistics at debug level. @param message custom log message @param source object providing context for logging
2039 Logs IO statistics at specified level. @param log Logger instance @param level logging level (INFO, ERROR, WARN) @param source Object providing IO statistics
2040 Closes and logs remote iterator resources. @param source RemoteIterator instance to cleanup
2041 Tracks invocation duration using provided factory and measures it. @param factory factory for tracking durations @param statistic type of statistic to track @throws IOException if an I/O error occurs during measurement
2042 Reads data from a positioned stream, decrypting it as needed. @param position current read position @param buffer storage for read data @param offset starting index in the buffer to write data @param length number of bytes to read and decrypt @return actual number of bytes read and decrypted
2043 Reads fully from a positioned stream. @param position current file position @param buffer data buffer to read into @param offset starting offset in the buffer @param length number of bytes to read
2044 Reads data from stream into a ByteBuffer at specified position. @param position stream position to read from @param buf target ByteBuffer for read data @return number of bytes read or -1 if end of file reached
2045 Reads fully from stream at specified position into ByteBuffer. @param position target position in stream @param buf buffer to read into
2046 Reads data from a ByteBuffer or ReadableByteChannel into the output buffer. @param buf input buffer @return number of bytes read (or -1 on error)
2047 Writes an object to a DataOutput stream, handling various types and compact arrays. @param out the output stream @param instance the object to be written @param declaredClass the class of the object being written @param conf configuration (not used in this method) @param allowCompactArrays whether to enable compact array writing
2048 Tries to acquire buffer data by block number. @param blockNumber unique block identifier @return BufferData object or null if not acquired
2049 Returns the number of available buffers in the pool. @return Number of available buffers
2050 Runs a task with optional exception handling and parallel or single-threaded execution based on service availability. @param task Task to be executed (includes input and potential exceptions)
2051 Processes multiple paths and their children. @param parent parent path data @param items child path data to process
2052 Resolves FileStatus to PathHandle using provided FileSystem and options. @param fs file system instance @param opt handle options (variable arguments)
2053 Creates a shell command executor for group operations. @param userName user name to fetch groups for
2054 Creates an executor to fetch group IDs for the specified user. @param userName name of the user
2055 Reads credentials from a delimited protobuf stream. @param in input stream containing credentials data
2056 Collects delegation tokens from the given issuer and its children. @param issuer DelegationTokenIssuer object @param renewer string identifier for token renewal @param credentials Credentials object containing existing tokens @throws IOException if an I/O error occurs
2057 Adds a new token to the credentials with the given alias. @param alias Text alias for the token @param token Token object to add @return True if added successfully; otherwise false
2058 Converts a relative path to an absolute one @param workDir base directory for the conversion @param path relative path to convert @return absolute Path object or original if already absolute
2059 Converts relative path to absolute using provided working directory. @param workDir the base directory @param path the relative path @return absolute Path object or original if already absolute
2060 Resolves a file path from a given Path object, handling relative paths. @param path the input Path to resolve @return a File representing the resolved path or null if invalid
2061 Resolves relative paths to absolute paths. @param p input path
2062 Makes a qualified path from the current path and a default URI. @param defaultUri default URI to use for qualification @param workingDir directory to resolve relative paths against @return Qualified Path object or null if not possible
2063 Returns a Path representing the working directory. @return Path object containing URI string representation
2064 Returns the home directory path based on the provided URI. @return Path object representing the home directory or null if not found
2065 Retrieves the home directory path from an SFTP channel. @param channel active SFTP connection @return Path to home directory or null on failure
2066 Retrieves the file status for a given path, handling FileNotFoundException. @param fs Hadoop FileSystem instance @param pathString the path to look up @param ignoreFNF whether to throw an exception on FileNotFound or return null @return FileStatus object if found, or null if ignored
2067 Returns a new Path instance based on the internal path representation.
2068 Returns the target path as a Path object or null if not set.
2069 Retrieves total used space in bytes for the specified file system. @throws IOException if an I/O error occurs
2070 Initializes a ChRootedFileSystem with a given file system and URI. @param fs underlying file system @param uri URI specifying the root directory path
2071 Creates a Path object from the given array starting at the specified index. @param path array of path segments @param startIndex starting index in the array (inclusive) @return Path object or SlashPath if start index exceeds array length
2072 Concatenates and returns a single path string from the list of merged URIs. @return merged URI as a Path object
2073 Creates a composite path from two component paths. @param parent the parent directory in the path @param child the child directory in the path
2074 Creates a nested path with the given child path. @param parent the parent path of this nested path @param child the child path to be nested under parent
2075 Creates a new Path instance by copying from another Path. @param parent parent directory path @param child child directory path to copy attributes from
2076 Renames a directory in the specified file system. @param fs target file system @param oldName current directory name @param newName new directory name @throws IOException if renaming fails
2077 Converts a File to a Hadoop Path. @param f input File object
2078 Unnests a URI into its constituent parts. @param nestedUri URI to process @return Path object representing the unnested URI or null if invalid
2079 Converts an array of string path components to an array of Path objects. @param str array of path strings @return array of Path objects or null if input is null
2080 Removes scheme and authority from a given file path. @param path input file path @return simplified file path without scheme and authority
2081 Merges two Paths into a single Path, preserving scheme and authority. @param path1 initial Path @param path2 subsequent Path to append @return merged Path object
2082 Validates file type requirements against actual path state. @param typeRequirement expected file type requirement
2083 Constructs a string representation for a child directory path. @param childPath relative path to the child directory
2084 Throws exception when encountering nonexistent file path. @param item PathData object containing nonexistent path information
2085 Retrieves the AbstractFileSystem associated with a given file path. @param absOrFqPath absolute or fully qualified file path to resolve
2086 Creates a directory with specified permissions. @param fs FileSystem object @param dir Path to create directory at @param permission FsPermission to apply to new directory @return true if directory creation was successful
2087 Initializes LocatedFileStatus with file attributes and block locations. @param locations array of BlockLocation objects
2088 Appends a writable key-value pair to the underlying storage. @param key writable key object @param val writable value object
2089 Writes raw key-value pairs to a file. @param records iterator of key-value pairs @param writer output writer for the file
2090 Initializes service instance with provided configuration. @param conf service configuration
2091 Stops the service, transitioning from running state. @throws ServiceStateException if stopping fails
2092 Checks if the given text service is a private clone of this service. @param thePublicService Text service to compare with @return true if identical, false otherwise
2093 Checks if token service matches given alias. @param token Token object @param alias Alias text to compare with
2094 Verifies if a service matches the given URL or name. @param fetcher DtFetcher instance @param service Text representation of the service (null for URL-based match) @param url Service URL to compare with @return true if the service matches, false otherwise
2095 Verifies the existence and accessibility of a directory. @param dir the directory to be checked
2096 Verifies directory exists and performs disk I/O operation. @param dir File object representing the directory to verify
2097 Flushes output buffer to underlying device.
2098 Validates input buffers by decoding and comparing with expected output. @param inputs array of ByteBuffer inputs @param erasedIndexes array of indexes to erase from inputs @param outputs array of ByteBuffer outputs
2099 Decodes EC-encoded chunks from inputs to outputs. @param inputs encoded input chunks @param erasedIndexes indexes of erased input chunks @param outputs output chunk buffer
2100 Closes the resource, performing cleanup and finalizing state. @throws IOException if an I/O error occurs during closing
2101 Cleans up resources after use. Closes underlying connections and deletes temporary files when not preserved. @throws IOException if file system operation fails
2102 Closes the resource, ensuring it's no longer usable. @throws IOException if an I/O error occurs during closure
2103 Reads serialized data from input stream and populates token and secret key maps. @throws IOException if serialization fails
2104 Retrieves the next raw key from input stream. @param key output buffer to store the key @return key length or -1 on error
2105 Reads current value from stream and populates Writable object. @param val Writable object to populate with current value
2106 Retrieves the current configurable object value. @param val initializable object to set configuration on @return initialized Configurable object or null if not found
2107 Fetches next compressed or uncompressed record from storage. @param key DataOutputBuffer for storing key data @param val ValueBytes object to store value data @return raw length of the record, -1 if not found or EOF reached
2108 Reads and decompresses the next value from the compressed stream. @param val ValueBytes object containing compressed or uncompressed data @return length of the decompressed value
2109 Retrieves DelegationTokenInformation from SQL secret manager. @param ident TokenIdent object containing sequence number and bytes @throws NoSuchElementException if token not found in SQL secret manager
2110 Reads and returns a PermissionStatus object from the given DataInput stream. @param in DataInput stream containing serialized PermissionStatus data
2111 Reads an enumeration value from the input stream. @param in DataInput stream containing the enumeration name @param enumType Enumerated class to read from @return Enum instance or null if not found
2112 Reads ACL data from input stream and builds ACL object.
2113 Retrieves fixed byte string representation from Text object. @param key input Text value
2114 Converts a Token object to a TokenProto message. @param tok the input token object
2115 Constructs a delegationToken identifier with specified properties. @param kind token kind @param owner token owner @param renewer token renewer @param realUser underlying user identity
2116 Invokes the method once, handling retries and exceptions. @return CallReturn object with result or exception
2117 Reads and parses key-value data from input stream. @throws IOException on read errors
2118 Reads data into BytesWritable object. @param value BytesWritable object to fill @return length of filled BytesWritable object
2119 Writes serialized value to output stream. @param out target output stream @return total written value size in bytes
2120 Compares this byte array with another. @param buf the byte array to compare with
2121 Compares this entry with another object for equality. @param other the object to compare with @return true if the objects are equal, false otherwise
2122 Retrieves a delegation token from the specified URL. @param url URL of the token service @param token existing token for authentication @param renewer user or service that issued the token @param doAsUser user on whose behalf the operation is performed @return Token<AbstractDelegationTokenIdentifier> object, or null if failed
2123 RENEWS a delegated token. @param url URL to perform operation on @param token Authenticated token for the operation @param dToken Delegated token to renew @param doAsUser User ID to impersonate @return new token expiration time in milliseconds or 0 if not renewed
2124 Cancels a delegated token. @param url URL to perform operation on @param token authenticated token for the operation @param dToken delegationToken to cancel @param doAsUser user performing the cancellation
2125 Selects a random node within the specified scope. @param scope unique identifier for the scope
2126 Sorts nodes by distance from a given reader node. @param reader Node to sort from @param nodes Array of nodes to sort @param activeLen Length of active section (ignored)
2127 Creates a SocketInputWrapper instance with specified timeout. @param socket the underlying socket @param timeout milliseconds before timeout occurs @return SocketInputWrapper instance or throws IOException if error occurs
2128 Returns an output stream to write data to a given socket. @param socket the socket to get the output stream for @param timeout timeout value for the socket (milliseconds) @return OutputStream object or null if not applicable
2129 Establishes a socket connection to a remote endpoint. @param socket the socket object @param endpoint the remote address to connect to @param localAddr the local address to bind (optional) @param timeout the connection timeout in milliseconds @throws IOException if an I/O error occurs
2130 Registers an MBean with the given properties and object. @param serviceName service identifier @param nameName unique name for the MBean @param properties bean registration properties @param theMbean MBean object to register @return registered ObjectName or null on failure
2131 Creates a synchronized mutable quantiles object with inverse functionality. @param name metric name @param desc metric description @param sampleName sample name @param valueName value name @param interval positive interval for quantiles calculation @return MutableQuantiles instance or null if invalid input
2132 Initializes a retry cache with specified parameters. @param cacheName unique cache identifier @param percentage initial cache capacity percentage @param expirationTime maximum item lifetime in milliseconds
2133 Initializes the metrics cache with a given protocol class, skipping duplicates. @param protocol Class<?> to initialize from
2134 Initializes metrics by creating them if they do not exist. @param names array of metric names to initialize
2135 Aggregates local state statistics into global metrics. @param localStats map of local thread-safe statistics
2136 Creates a new rate with the given attributes. @param name rate name @param desc rate description @param extended whether to create an extended rate
2137 Initializes protocol with given class, registering methods as rate metrics. @param protocol Class containing methods to be registered
2138 Adds metric annotations for a given method. @param source object to generate metrics for @param method the target method with metric annotations
2139 Validates a UserGroupInformation object using Kerberos authentication. @param messagePrefix prefix for error messages @param user UserGroupInformation to validate
2140 Verifies a given file's existence and integrity. @param file the File object to validate @param category descriptive category for validation results @param text user-provided text associated with the file @return true if the file is valid; false otherwise
2141 Validates the short name of a Kerberos principal. @throws KerberosDiagsFailure if validation fails
2142 Retrieves the user's UGI, creating a proxy if necessary. @return UserGroupInformation object or null if invalid owner
2143 Enables recursive search mode.
2144 Initializes an empty Count object.
2145 Forces user to relog in using keytab authentication.
2146 Forces user to relog in from ticket cache.
2147 Relogs user from ticket cache.
2148 Creates an InetSocketAddress for the given host and port. @param host hostname or IP address @param port port number @return InetSocketAddress object or unresolved address if host lookup fails
2149 Retrieves the InetAddress of the specified host, filtering out non-local addresses. @param host hostname or IP address to resolve @return InetAddress object for the host if it's local; null otherwise
2150 Sends an RPC request to the connection. @param call The RPC call to send
2151 Processes an RPC request from a client. @param header RpcRequestHeaderProto containing request metadata @param buffer RpcWritable.Buffer containing serialized request data
2152 Sets up the response to an RPC call. @param call RPC call context @param status RPC status (FATAL, SUCCESS, or ERROR) @param erCode error code for failure responses @param rv response value (optional) @param errorClass and error detail for failure responses
2153 Resets and updates internal state by reloading IP list and updating cache expiry time.
2154 Prints system information on Linux. @param none
2155 Constructs string representation with query and help options. @param qOption include query option @param hOption include help option
2156 Reads bytes from the underlying stream into the given byte array. @param b byte array to fill @param off starting offset in the array @param len number of bytes to read @return actual number of bytes read, or -1 on end-of-stream
2157 Creates a new instance of the specified expression class. @param expressionClass Class to instantiate @param conf Configuration object for instantiation @return Newly created Expression instance or null if invalid class
2158 Retrieves a Command instance by name from the object map or dynamically instantiates it based on the provided configuration. @param cmdName unique command identifier @param conf configuration settings @return Command object or null if not found
2159 Creates and returns a new instance of the key class. @return an instance of the key class
2160 Creates a new instance of the given Writable class. @param c Class<? extends Writable> to instantiate @param conf Configuration object for configuration @return Instantiated Writable object or null if creation fails
2161 Retrieves SocketFactory instance from configuration property. @param conf Configuration object @param propValue Property value containing factory class name @return SocketFactory instance or throws exception if not found
2162 Decodes identifier into object of type T. @return instance of T or null if decoding fails
2163 Returns a singleton instance of the specified DiskValidator class. @param clazz the type of validator to retrieve @return DiskValidator instance or null if not created
2164 Initializes a DynamicBloomFilter instance with specified parameters. @param vectorSize filter size @param nbHash number of hash functions @param hashType type of hash function @param nr additional parameter for internal use
2165 Adds a new row to the matrix by appending an empty BloomFilter.
2166 Initializes a new RetouchedBloomFilter instance with specified parameters. @param vectorSize size of the filter's vector @param nbHash number of hash functions to use @param hashType type of hash function to employ
2167 Loads properties and resources synchronously. @param props Properties object to update @param startIdx Starting index for resource loading @param fullReload Whether to reload all resources (true) or not (false)
2168 Quits the election process; removes persistent ZNode if not fenced and active. @param needFence whether to fence or not
2169 Reads vectored file ranges. @param ranges list of file ranges to read @param allocate callback for allocating buffer space
2170 Constructor to initialize BlockLocation with given parameters. @param names array of block names @param hosts array of hostnames or IP addresses @param offset starting position in bytes @param length total size in bytes
2171 Initializes a DurationStatisticSummary object with provided values. @param key summary key @param success true if successful, false otherwise @param count total duration count @param max maximum duration value @param min minimum duration value @param mean optional MeanStatistic object to clone (or null)
2172 Aggregates statistics from the provided source. @param source IOStatistics object to merge with existing data @return true if aggregation was successful, false otherwise
2173 Initializes statistics snapshot from given source or creates default maps. @param source IOStatistics object to snapshot, or null for defaults
2174 Iterates over remote data source and applies consumer function. @param source RemoteIterator to read from @param consumer Consumer function to apply to each item @return Item count, or -1 on error
2175 Writes object to output stream using specified configuration. @param out DataOutput stream @param instance Object to serialize @param declaredClass Class of the object @param conf Configuration for serialization
2176 Initiates a prefetch operation for the specified block number. @param blockNumber unique block identifier
2177 Attempts to acquire BufferData with specified block number, retrying on failure. @param blockNumber unique block identifier @return BufferData object if acquired successfully, or null otherwise
2178 Initializes path processing with a single item and resets depth. @param item PathData object to start processing from
2179 Processes file paths in batches based on the listing group size. @param parent parent path data @param itemsIterator iterator over child path data
2180 Resolves partial group names for a given user. @param userName unique user identifier @param errMessage error message to include in exceptions @return set of resolved group names or throws exception if failed
2181 Executes a command in shell and returns output as string. @param cmd command to execute (can contain multiple arguments)
2182 Executes a shell command with optional environment variables. @param env map of environment variables (key-value pairs) @param cmd command to execute as vararg array
2183 Adds all credentials from another Credentials object. @param other Credentials to merge with current instance
2184 Merges all credentials from another user into this instance. @param other Credentials object to merge from
2185 Adds delegation tokens for the given renewer. @param renewer unique identifier of the token issuer @param credentials authentication details for token issuance @return array of Token objects or empty array if none found
2186 Adds a new token to the system. @param token Token object with service and identifier
2187 Sets the working directory to an absolute path. @param newDir new working directory as a Path object
2188 Sets file timestamps (modification and access times). @param p Path to the file @param mtime Modification time in milliseconds or -1 for default @param atime Access time in milliseconds or -1 for default
2189 Converts a Path to a File using the underlying RawLocalFileSystem. @param path input file system path
2190 Converts a Path to its absolute URI path. @param p input file system path
2191 Creates a qualified path by wrapping an existing file system URI and working directory. @param fs FileSystem object containing URI and working directory
2192 Makes the given file system path qualified with default FS and working directory. @param path the input file system path
2193 Makes a qualified file system path by wrapping it with a URI. @param path the input file system path
2194 Resolves file status for the given path. @param f input path @return array of FileStatus objects or null if not found
2195 Deletes a file or directory with optional recursion. @param f file/directory to delete @param recursive true for recursive deletion @return true if successful, false otherwise
2196 Opens a file stream for the given path. @param f Path to the file @return FSDataInputStream object or null if not resolved
2197 Opens a file stream for the given path with specified buffer size. @param f file path @param bufferSize input/output buffer size @return FSDataInputStream object or throws an exception if failed
2198 Truncates a file to a specified length. @param f file path @param newLength desired file size in bytes @return true if truncation is successful, false otherwise
2199 Sets file system replication factor for a given path. @param f file path @param replication desired replication factor (short value)
2200 Sets file system permissions for a specified path. @param f the file path @param permission FsPermission to set @throws various exceptions on permission or I/O errors
2201 Sets owner on a file system entity. @param f file path @param username user name (or null for no change) @param groupname group name (or null for no change)
2202 Sets file times (mtime and atime) for a given file. @param f Path to the file @param mtime last modification time in milliseconds @param atime last access time in milliseconds
2203 Resolves file checksum for the given file path. @param f absolute or relative file path @return FileChecksum object or null if unresolved
2204 Resolves file status for a given path. @param f input path @return FileStatus object or null if not found
2205 Resolves access permissions for a given file path. @param path file system path @param mode desired action (read/write/delete)
2206 Resolves file link status for the given path. @param f input path to resolve
2207 Resolves the target of a symbolic link. @param f file path to resolve @return resolved Path or throws exception if failed
2208 Resolves file block locations for a given path and range. @param f the input path @param start starting offset @param len length of the range @return array of BlockLocation objects or null if not found
2209 Resolves file system status for the given path. @param f file system path @return FsStatus object or default FS status if null input
2210 Creates a symbolic link to the target file. @param target target file path @param link symbolic link path @param createParent whether to create parent directory if needed
2211 Resolves file status iterator for the given path. @param f input path
2212 Resolves and lists corrupt file blocks for a given path. @param path filesystem path @return iterator over corrupt file block paths or null if not found
2213 Resolves located file status iterator for the given file. @param f file path @return RemoteIterator of LocatedFileStatus objects or null if not found
2214 Resolves abstract file systems for a given path. @param f input path @return set of resolved AbstractFileSystem instances or empty set if none found
2215 Modifies ACL entries for the specified file system path. @param path absolute file system path @param aclSpec list of ACL entries to apply
2216 Removes ACL entries from the specified file system path. @param path absolute file system path @param aclSpec list of ACL entries to remove
2217 Removes default ACLs from the specified file system path. @param path absolute or relative file system path
2218 Removes ACLs from the specified file system path. @param path absolute or relative file system path
2219 Sets ACL entries for a file system path. @param path absolute file system path @param aclSpec list of ACL entries to apply
2220 Resolves ACL status for a given file path. @param path absolute or relative file path @return AclStatus object representing the access control list status
2221 Sets an extended attribute on a file or directory. @param path filesystem path @param name attribute name @param value attribute value bytes @param flag set flags (e.g. XATTR_CREATE, XATTR_REPLACE)
2222 Retrieves extended attribute value for the given path and name. @param path file system path @param name name of the extended attribute @return byte array containing the extended attribute value or null if not found
2223 Resolves and fetches extended attributes for a given file path. @param path the file system path
2224 Retrieves extended attributes for a file or directory. @param path absolute file system path @param names list of attribute names to fetch @return Map of attribute name to byte array value, or null if not found
2225 Removes extended attribute from the given file system path. @param path file system path @param name name of the extended attribute to remove
2226 Lists extended attributes for a given file system path. @param path file system path to list XAttrs from @return list of attribute names or empty list if none found
2227 Creates a snapshot of the given file system location. @param path absolute file system location @param snapshotName name for the new snapshot @return Path to the created snapshot or null if failed
2228 Renames a Hadoop snapshot by ID. @param path absolute file system path @param snapshotOldName original name of the snapshot @param snapshotNewName new name for the snapshot
2229 Deletes a named snapshot from the file system. @param path absolute file system path @param snapshotName name of the snapshot to delete
2230 Applies storage policy to the specified file system path. @param path absolute or relative path to apply policy to
2231 Sets storage policy for a file system location. @param path absolute file system path @param policyName name of the storage policy to set
2232 Unsets storage policy for the given file system path. @param src file system path to unset policy from
2233 Resolves BlockStoragePolicySpi instance for a given file system path. @param path absolute file system path @return BlockStoragePolicySpi object or null if not found
2234 Checks if a file system path has a specific capability. @param path the file system path to check @param capability the capability to look for @return true if the path has the capability, false otherwise
2235 Resolves server defaults for a given file system location. @param path absolute or relative file system path @return FsServerDefaults object or null if not found
2236 Creates a multipart uploader with the specified base path. @param basePath absolute file system path for uploading
2237 Returns the user's home directory as the working directory. @param client SFTP channel instance
2238 Retrieves file status by performing a lookup on the filesystem. @return FileStatus object representing the current state of the file; null if not found
2239 Retrieves the used disk space from the file system. @return Used disk space in bytes or -1 if an error occurs
2240 Resolves a source path using regex-based mount points. @param srcPath source path to resolve @param resolveLastComponent whether to resolve the last component
2241 Checks if a file or directory exists at the specified path. @param pathStr absolute file/directory path @param conf Configuration object @return true if found, false otherwise
2242 Deletes a file system directory and its contents. @param fs FileSystem object to delete from @param name unique directory identifier
2243 Calculates the current directory based on the last flush time and roll interval. @param now current date
2244 Creates a file output stream for writing with specified permissions. @param f the target file @param permissions OS-specific file creation flags @return FileOutputStream object or null if security check fails
2245 Checks whether source and target paths are in the reserved raw file system. @param src source path @param target target path @return true if both paths are in reserved raw, false otherwise
2246 Returns the parent directory of this file.
2247 Returns the parent directory as an Optional Path.
2248 Returns an iterator over directory contents. @return Iterator of PathData objects for each item in the directory
2249 Initializes FSDataOutputStreamBuilder with file context and path. @param fc FileContext instance @param p Path to the file
2250 Sets verification of checksum for a file. @param verifyChecksum true to enable checksum verification @param f file path to configure checksum verification for
2251 Reads FileStatusProto from input stream and populates this object's fields. @throws IOException if invalid size or data is encountered
2252 Constructs a LocatedFileStatus object from its components. @param length file length @param isdir whether the file is a directory @param block_replication replication factor for blocks @param blocksize size of each block @param modification_time last modification time @param access_time last access time @param permission file permissions @param owner file owner @param group file group @param symlink symbolic link target path @param path actual file path @param hasAcl whether ACLs are present @param isEncrypted whether the file is encrypted @param isErasureCoded whether the file uses erasure coding @param locations block locations
2253 Appends a key-value pair to the underlying data store. @param key unique key for the value @param val associated value
2254 Closes the resource by stopping its underlying operation.
2255 Writes a single byte to the output buffer. @throws IOException on write failure
2256 Writes user data to the local buffer and underlying stream. @param b user data byte array @param off offset of user data in the array @param len length of user data @return number of bytes written
2257 Validates input and output arrays of ECChunks. @param inputs array of encoded chunks to be validated @param erasedIndexes array of indexes that have been erased @param outputs array of expected output chunks
2258 Closes and compresses a data block if it exceeds size threshold or forceFinish is true. @param bForceFinish flag to force closing the block regardless of size
2259 Reads token storage stream, validating header and parsing data. @param in DataInputStream containing the stream to parse
2260 Retrieves tokens for cleanup based on the last token renewal period. @return Map of TokenIdent to DelegationTokenInformation, or an empty map if failed
2261 Reads and returns the length of the next raw value. @param rawValue ValueBytes object to store the result @return Length of the next raw value, or -1 if an error occurs
2262 Serializes credentials data to a Protobuf stream. @param out output stream
2263 Converts a token to protobuf representation. @param tok token object to convert
2264 Returns an instance of Entry. @throws IOException if key is invalid
2265 Compares cursor key with another RawComparable object. @param other the object to compare with @return a negative/positive value if the keys differ or 0 if they are equal
2266 Retrieves and sets key and value writable objects. @param key BytesWritable object to store key @param value BytesWritable object to store value
2267 Advances through a block of records by the specified count. @param n number of records to advance
2268 Retrieves delegationToken using the provided parameters. @param url URL for authentication @param token existing token to reuse @param renewer entity that can renew expired tokens
2269 Renews a delegation token. @param url URL to the authentication service @param token Authenticated token to renew @param dToken Delegation token identifier
2270 Cancels a delegated token. @param url URL to cancel from @param token authenticated token to cancel @param dToken delegationToken identifier
2271 Returns a SocketInputWrapper object from the given socket. @param socket active network socket
2272 Returns an OutputStream associated with the given Socket. @param socket the client socket
2273 Establishes a connection to a server using the given socket and address. @param socket client socket @param address remote server address @param timeout connection timeout in milliseconds
2274 Creates a sampled metrics buffer by aggregating data from individual sources. @return MetricsBuffer object containing aggregated metric data
2275 Registers an MBean with empty attributes.
2276 Retrieves or initializes ReadWriteDiskValidatorMetrics for a given directory name. @param dirName unique directory identifier @return Metrics object associated with the directory or null if not found
2277 Initializes RPC stats for a specified number of priority levels. @param numLevels the number of priority levels to initialize
2278 Collects and aggregates thread-local states into global metrics.
2279 Creates a new rate with the given name. @param name unique identifier and display name of the rate
2280 Creates a new rate with the given name and description. @param name rate name @param description rate description
2281 Dumps keytab contents, including principal names and entries. @param keytabFile file containing keytab data
2282 Validates and displays JAAS configuration details if required. @param jaasRequired true to validate JAAS config, false otherwise
2283 Retrieves the token's real owner, either from the TokenIdent or its User. @param id TokenIdent with potential proxy information @return The actual user owning the token as a string
2284 Ensures the existence of parent ZNode(s) for working directory. @throws IOException if unable to set ACLs or create node
2285 Retrieves active data from ZooKeeper, handling connection creation and exceptions. @throws ActiveNotFoundException if node does not exist @throws KeeperException|InterruptedException|IOException on zk operation failure
2286 Checks TGT and relogs from keytab if necessary.
2287 Initiates re-login from keytab.
2288 Resolves unresolved InetSocketAddress to a local address. @param addr InetSocketAddress to be resolved @return Resolved InetSocketAddress or original if already valid
2289 Updates the client's address if a change is detected. @return true if the address was updated, false otherwise
2290 Canonicalizes a URI by updating its host and/or port. @param uri input URI @param defaultPort default port to use if not specified in the input URI @return canonicalized URI or original URI if no changes were needed
2291 Initiates and sends RPC request to server. @param rpcKind type of RPC @param rpcRequest request data @param remoteId ID of remote endpoint @param serviceClass class of RPC service @param fallbackToSimpleAuth whether to fallback to simple auth @return null if in asynchronous mode, otherwise response data
2292 Waits for a cached RPC request to complete and returns its state. @param newEntry newly added cache entry
2293 Adds a cache entry for the given client ID and call ID. @param clientId unique client identifier @param callId call identifier
2294 Returns string representation with query option flag. @param qOption boolean indicating whether to include query option in output
2295 Retrieves an instance of a registered Expression class by name. @param expressionName unique identifier for the expression type @param conf configuration object used to instantiate the expression @return created Expression instance or null if not found
2296 Creates an instance of a specific Expression subclass. @param expressionClassname fully qualified name of the Expression class @param conf configuration object
2297 Generates a description of recognised expressions and operators. @param factory ExpressionFactory used to create expressions
2298 Creates an instance of the specified Expression subclass. @param expressionClass class type of the desired Expression
2299 Retrieves a Command instance based on the given command string. @param cmd command string to look up
2300 Reads an object from a DataInput stream, resolving the class and instantiating it. @param in input data to read from @param objectWritable optional ObjectWritable to store values in @param conf Hadoop Configuration for loading classes @return instantiated object or null if not found
2301 Creates a new instance of the specified Writable class. @param c Class of the Writable object to instantiate
2302 Decodes the token identifier from the given token. @param token input token containing encoded identifier
2303 Prints user credentials to the specified output stream. @param creds Credentials object containing tokens @param alias Text alias for filtering tokens @param out Output stream for printing credentials
2304 Retrieves a DiskValidator instance based on the specified type. @param diskValidator name of the validator (Basic, ReadWrite, or custom class) @return DiskValidator instance @throws DiskErrorException if invalid or missing validator class
2305 Constructs an empty block location with default coordinates.
2306 Retrieves block locations for a file segment. @param file FileStatus object @param start start offset of the segment @param len length of the segment @return array of BlockLocation objects or empty if no blocks exist
2307 Fetches duration statistic summary by key and success status. @param source IO statistics data @param key unique identifier for the metric @param success true if fetching successful duration, false otherwise @return DurationStatisticSummary object or null if not found
2308 Returns an IOStatistics snapshot object representing current state.
2309 Creates an IOStatisticsSnapshot object from given IOStatistics. @param statistics IOStatistics instance to be converted @return IOStatisticsSnapshot object or null if invalid input
2310 Creates an IO statistics snapshot object from the given source. @param source IO statistics object or null to create a default snapshot
2311 Converts RemoteIterator to a list. @param source iterator over elements of type T @return List of elements or empty list if iterator is exhausted
2312 Processes path data based on existence. @param item PathData object to process
2313 Retrieves Unix groups for a given user. @param user username to fetch group information for @return Set of Unix group names or EMPTY_GROUPS_SET if not found
2314 Runs a command with variable arguments, logging output. @param args list of arguments to pass @return concatenated output as string or null on failure
2315 Reads the target of a symbolic link. @param f File object to read @return Target path as a string or empty if failed
2316 Sets file permissions using POSIX or shell commands. @param p the file path @param permission the desired FsPermission
2317 Retrieves user list for a given network group. @param netgroup unique network group identifier @return string representation of the user list or an empty string if not found
2318 Copies all credentials from the specified instance. @param credentials source credentials to copy from
2319 Adds credentials to the subject's existing credentials. @param credentials Credentials object to be added
2320 Converts file system path to a File object. @throws IllegalArgumentException if not a local path
2321 Ensures directory exists and has specified permissions. @param dir directory path @param expected desired file system permissions
2322 Retrieves native file link status. @param f the path to query @param dereference whether to follow symbolic links @return FileStatus object or null if not found
2323 Returns the enclosing root directory of a given file system path. @param path input file system path
2324 Removes files with deleteOnExit flag from disk. @throws IOException if an error occurs during deletion
2325 Checks if a file exists at the specified path. @param f Path to the file @return True if the file exists, False otherwise
2326 Sets the working directory to a specified absolute path. @param newWDir absolute directory path
2327 Verifies destination for file copy operation. @param srcName source name (optional if dest is directory) @param dst target path @param overwrite whether to overwrite existing files
2328 Calculates content summary for a given path. @param f the path to calculate summary for @return ContentSummary object containing total length, files and directories count
2329 Retrieves a list of delegation tokens from the given path and renewer. @param p Path to retrieve tokens for @param renewer Entity responsible for token renewal @return List of Token objects or empty list if not found
2330 Sets an extended attribute on a file. @param path the file to modify @param name the attribute's name @param value the attribute's value
2331 Creates a snapshot of the given file system location. @param path file system location to snapshot
2332 Initializes MultipartUploaderBuilderImpl with file context and path. @param fc FileContext instance @param p Path to upload
2333 Waits for and truncates all items in the wait list to a specified length.
2334 Resolves the given source path in a list of regex mount points. @param srcPath path to resolve @param resolveLastComponent whether to resolve last component only @return ResolveResult object or null if not resolved
2335 Checks if a given path exists in HDFS or other storage system. @param pathStr the path to check @param conf configuration object for file system settings
2336 Resolves the path in Hadoop Archive to its corresponding directory within the archive. @param path input path to resolve
2337 Returns the checksum file path for the given input file. @param file input file
2338 Checks if a directory's parent exists. @return true if parent exists, false otherwise
2339 Creates a directory with specified permissions; throws exception if parent does not exist when createParent is false. @param f the directory path @param absolutePermission file system permission @param createParent whether to throw exception for missing parent
2340 Renames or moves a file/directory. @param src source Path @param dst destination Path @param options optional Rename options (e.g. OVERWRITE) @throws IOException on error or when overwriting existing non-empty directory
2341 Returns the checksum file path based on the input file. @param file input file to calculate checksum for
2342 Checks if a file path is under its parent directory. @param p the file path to check @param basePath the base directory path @return true if p is under basePath, false otherwise
2343 Checks whether this node is the root by verifying its parent.
2344 Constructs a new path with the given suffix appended to the current path. @param suffix string to append to the path
2345 Qualifies the target of a symbolic link with its effective URI. @param pathURI base URI for qualification @param pathWithLink path containing the symlink @param target path to be qualified @return Path object with resolved symlink target
2346 Renames an internal file or directory from one path to another. @param src original path @param dst new path @param overwrite whether to overwrite the destination if it exists
2347 Constructs a FileStatus object with the given parameters. @param length file length @param isdir true if directory, false otherwise @param block_replication replication factor for blocks @param blocksize size of each block @param modification_time last modified time @param access_time last accessed time @param permission file permissions @param owner file owner @param group file group @param path file path
2348 Copies a FileStatus object, allowing for subclassing and overriding getters. @param other the FileStatus to copy
2349 Constructs LocatedFileStatus object from FileStatus and BlockLocation array. @param stat FileStatus containing file metadata @param locations array of BlockLocations describing storage layout
2350 Constructs a LocatedFileStatus object from various file attributes. @param length total file size @param isdir true if directory, false otherwise @param block_replication replication factor for blocks @param blocksize size of each block @param modification_time timestamp of last modification @param access_time timestamp of last access @param permission FsPermission object (may be null) @param owner file owner name @param group file group name @param symlink symbolic link target path (null if not a link) @param path file path @param locations block locations for erasure-coded files
2351 Appends a Writable value to the collection and increments a counter. @param value item to be added
2352 Writes a portion of the given byte array to this output stream. @param b the byte array @param off the starting offset in the array @param len the number of bytes to write
2353 Performs cleanup and finalization tasks. Calls finish() to release resources before superclass finalize().
2354 Seeks to the end of the current file.
2355 Closes this cursor by parking it at the current position.
2356 Reads user credentials from a file and returns as Credentials object. @param filename path to the token storage file @param conf configuration (not used)
2357 Searches for a key within the current block. @param key RawComparable to search for @param greater whether to return true if key is greater than found key @return true if key matches or is less than the first key, false otherwise
2358 Publishes current metrics to all configured sinks.
2359 Initializes rate-related components with the specified protocol.
2360 Collects and aggregates thread-local states into InnerMetrics.
2361 Adds a value to the specified metric. @param name unique metric identifier @param value value to add
2362 Increments owner stats token count for given ID. @param id unique token identifier
2363 Decrements or removes owner stats for a given token. @param id Token identifier
2364 Retrieves the current active HA service target from ZooKeeper. @return HAServiceTarget object or null if not found
2365 Initializes ActiveStandbyElector with configuration and establishes ZooKeeper connection. @param zookeeperHostPorts comma-separated host:port of ZK servers @param zookeeperSessionTimeout session timeout in milliseconds @param parentZnodeName working directory for Znode operations @param acl list of access control lists for Znode security @param authInfo list of ZooKeeper authentication information @param app callback to notify on elector events @param maxRetryNum maximum retry count for connection establishment @param failFast whether to fail-fast or re-establish session on failure @param truststoreKeystore keystore and truststore configuration
2366 Creates an InetSocketAddress instance with the specified target and port. @param target network address (e.g., hostname or IP address) @param defaultPort fallback port number
2367 Retrieves the connect address for a given Server instance. @param server Server object with listener address
2368 Calls an RPC service with the given parameters and default authentication. @param rpcKind type of RPC service to call @param rpcRequest payload for the RPC request @param remoteId ID of the remote connection @param fallbackToSimpleAuth flag for falling back to simple authentication
2369 Waits for cache entry completion in retry cache. @param cache RetryCache instance or null if not available @param clientId unique client identifier @param callId unique call identifier @return CacheEntry object on completion, or null otherwise
2370 Waits for cache entry completion and returns the result. @param cache RetryCache instance @param payload associated payload object @param clientId unique client ID @param callId unique call identifier @return CacheEntryWithPayload object or null if skipped
2371 Retrieves an expression object from the factory based on its name. @param expressionName unique identifier of the expression to fetch
2372 Retrieves a WritableComparator instance for the specified class and configuration. @param c Class of the WritableComparable to get the comparator for @param conf Hadoop Configuration object @return WritableComparator instance or null if not found
2373 Initializes a new instance of WritableComparator with the specified key class. @param keyClass the type of comparable objects to be written
2374 Initializes LocalDirAllocator with the given configuration item name. @param contextCfgItemName unique identifier for disk validation
2375 Migrates deprecated properties to new keys in the properties file. @param deprecations DeprecationContext containing key mapping information
2376 Deep copies configuration from another instance. @param other Configuration object to copy properties and resources from
2377 Adds a resource to the configuration. @param conf configuration object containing properties and restrictions
2378 Retrieves alternative names for the given name, considering deprecation context. @param name input name to fetch alternatives for @return array of alternative names or null if not found
2379 Retrieves property sources for the given resource name. @param name unique resource identifier @return array of property values or null if not found or loading
2380 Returns the number of properties in the collection.
2381 Clears all properties and overlay data.
2382 Returns an iterator over string-to-string property pairs. @return Iterator over Map.Entry<String, String> objects
2383 Fetches key-value pairs by regex pattern. @param regex regular expression to match keys @return Map of matching keys and their corresponding values
2384 Reads vectored data from the stream into user-specified ranges. @param ranges List of FileRange objects @param allocate Function to allocate ByteBuffer for each range
2385 Retrieves BufferData for a given block number. @param blockNumber unique identifier @return BufferData object or throws exception on failure
2386 Waits for replication of files in the waitList to reach a consistent state. @throws IOException if an I/O error occurs during file system operations
2387 Retrieves block locations for a file within a specified range. @param p file path @param start starting offset in bytes @param len length of the range in bytes @return array of BlockLocation objects or null if not found
2388 Fetches success summary statistics. @param source IOStatistics object @param key unique identifier for the statistics
2389 Creates an empty iostatistics snapshot. @return ISnapshot object or null if creation fails
2390 Retrieves an IO statistics snapshot from the specified source. @param source object containing IO statistics data @return Serializable snapshot of IO statistics or null if not found
2391 Converts a RemoteIterator to an array, reusing the provided array if possible. @param source iterator of elements @param a array to reuse (optional) @return the converted array
2392 Renews a delegated token. @param token Token to be renewed @param renewer entity performing the renewal @return new expiration time for the renewed token
2393 Cancels a token with the given identifier and canceller. @param token Token object to cancel @param canceller String representation of the user cancelling the token @return cancelled TokenIdent object
2394 Processes a list of arguments, executing each one and handling errors. @param args list of PathData objects to process
2395 Retrieves Unix groups associated with a user. @param userName unique username to fetch groups for @return list of group names or empty list if not found
2396 Retrieves the hard link count for a given file. @param fileName the file to query @return the number of hard links or -1 on error @throws IOException if an I/O error occurs
2397 Creates a symbolic link (symlink) with the specified name pointing to the target file. @param target absolute path of the target file @param linkname desired name of the symlink @return exit code from shell command execution, or 1 if invalid input
2398 Changes file/directory permissions using the shell command. @param filename name of file or directory to modify @param perm new permission value (e.g., '755') @param recursive whether to apply changes recursively @return exit code from shell command execution
2399 Checks if setsid command is supported on the system. @return true if setsid is available, false otherwise
2400 Sets file owner using specified username and/or group name. @param file File object to set owner for @param username desired user name (optional) @param groupname desired group name (optional)
2401 Retrieves a list of user IDs from the specified netgroup. @param netgroup unique netgroup identifier @return List of user IDs or empty list if not found
2402 Retrieves credentials, removing private tokens.
2403 Retrieves an array of file statuses for the given path and filter. @param f Path to query @param filter Optional filter for file selection @return Array of FileStatus objects or null if failed
2404 Lists status of multiple file paths and filters them based on the provided filter. @param files array of file paths to retrieve status for @param filter optional filter to apply to the result @return array of FileStatus objects or null if an error occurs
2405 Resolves a path to an INode. @param p the path to resolve @param resolveLastComponent whether to resolve the last component of the path @return ResolveResult object or null if not found
2406 Sets file replication and propagates to checksum file. @param src source file path @param replication new replication setting (short value)
2407 Deletes a file or directory. @param f the file path to delete @param recursive whether to delete recursively @return true if deleted successfully, false otherwise
2408 Renames a file or directory and updates associated checksum files. @param src source path to rename @param dst destination path for renaming @return true if successful, false otherwise
2409 Deletes a file or directory from the filesystem. @param f path to the file/directory @param recursive whether to delete recursively @return true if deletion was successful, false otherwise
2410 Checks if source path is an ancestor of target path. @param source PathData object representing the potential ancestor @param target PathData object representing the descendant @return true if source is an ancestor, false otherwise
2411 Returns the full path by combining the root part and the given path. @param path input path to combine with the root part
2412 Strips the root path component from a given Path object. @param p input Path to process
2413 Strips out the root directory from a given file system path. @param p Path object to process @return String representation of the path with root removed, or empty string if entire path is root
2414 Resolves a path to its final file or directory. @param fc FileContext for the resolution @param path Path to resolve @return resolved object of type T, or null if not found
2415 Renames a file or directory from src to dst with optional overwrite behavior. @param src original path @param dst new path @param options rename options (e.g. OVERWRITE)
2416 Converts HarStatus to FileStatus object. @param h HarStatus object @return FileStatus object or null if not found
2417 Retrieves file status for an FTP file. @param ftpFile FTP file object @param parentPath parent directory path @return FileStatus object containing file metadata
2418 Verifies token file integrity and configuration. @param tokenFile storage location of token @param conf system configuration @param category logging category @param message error message @return true if verification successful, false otherwise
2419 Prints token file contents to the specified output stream. @param tokenFile file containing credentials @param alias user-friendly identifier for credentials @param conf configuration settings @param out target output stream
2420 Updates local cache with ZK data for a given token identifier. @param ident TokenIdent object containing sequence number
2421 Initializes the metrics system with a specified prefix. @param prefix unique identifier for this metrics instance
2422 Calls a blocking method on the server and returns the result. @throws RpcNoSuchMethodException if method is unknown @return RpcWritable object containing the response or null if deferred
2423 Adds timing data to the registry with specified name and elapsed time. @param name unique event identifier @param elapsed accumulated time in milliseconds
2424 Adds a persisted delegation token to the SecretManager. @param identifier TokenIdent object @param renewDate expiration date of the token in milliseconds @throws IOException if SecretManager is running or token already exists
2425 Updates token owner statistics by clearing and re-populating with current tokens.
2426 Removes expired tokens, updating owner statistics and logging the removal. @throws IOException if an error occurs during token cleanup
2427 Initializes ActiveStandbyElector with ZooKeeper connection details. @param zookeeperHostPorts ZooKeeper host and port string @param zookeeperSessionTimeout session timeout in milliseconds @param parentZnodeName parent node name for election @param acl access control list for ZooKeeper operations @param authInfo authentication information for ZooKeeper connections @param app callback object for ActiveStandbyElector events @param maxRetryNum maximum retry count for ZooKeeper operations @param truststoreKeystore truststore and keystore configuration
2428 Joins an election process with the provided data. @param data byte array containing election data
2429 Creates an InetSocketAddress from given target and port. @param target host or IP address @param defaultPort default port number
2430 Invokes a remote method using RPC protocol. @param proxy ignored @param method the Method to invoke @param args array containing RpcController and Message @return Message response from server or null in asynchronous mode
2431 Invokes a remote method and returns the result. @param proxy an object representing the service @param method the method to invoke @param args parameters for the method invocation @return the method's return value or null if asynchronous
2432 Parses an expression from a deque of tokens. @param args deque of tokens representing the expression @return parsed Expression object or null if invalid input
2433 Returns a WritableComparator instance for the given class. @param c Class of the WritableComparable to be compared
2434 Authenticates user with delegation token or falls back to configured handler. @param request HttpServletRequest object @param response HttpServletResponse object @return AuthenticationToken object or null on failure
2435 Resolves deprecation of a given name and updates properties accordingly. @param deprecations context for handling deprecation @param name the name to resolve deprecation for @return array of resolved names or null if not found
2436 Converts configuration as key-value pairs to environment variables. @param env map of environment variable names and values
2437 Cancels a token with the given identifier and canceller. @param token Token object containing unique identifier @param canceller Cancellation reason string @return cancelled TokenIdent object or null if failed
2438 Retrieves Unix groups for a given user. @param user unique user identifier @return list of group names or empty list if not found
2439 Extracts contents of a tar archive (gzipped or not) into the specified directory. @param inFile path to the tar archive file @param untarDir target directory for extraction
2440 Sets file permissions using Linux's chmod command. @param filename path to the file @param perm desired permissions as a string (e.g. "755")
2441 Sets the readibility of a file. @param f File object @param readable True for readable, False otherwise @return true if operation succeeded, false on failure
2442 Sets file writability on Windows or uses native method on other platforms. @param f target File object @param writable true for write permission, false otherwise @return true if operation was successful, false otherwise
2443 Sets file executability based on platform. @param f File object to modify @param executable true for executable, false otherwise @return true if successful, false otherwise
2444 Loads permission info using native or non-native IO, depending on availability and previous loading status.
2445 Sets file owner and group using specified Path and usernames. @param p the Path to set ownership for @param username the user name to set as owner @param groupname the group name to set as group owner
2446 Sets file permissions based on provided FsPermission object. @param f the File to set permissions for @param permission FsPermission object containing user/group/other actions
2447 Adds groups to cache, handling both netgroups and Unix groups. @param groups list of group names to add
2448 Dumps user's authentication tokens. @param ugi UserGroupInformation object
2449 Logs user information with credentials. @param log logging instance @param caption descriptive message prefix @param ugi UserGroupInformation object containing credentials
2450 Verifies directory existence and permissions. @param localFS Local file system instance @param dir Directory path to verify @param expected Expected permissions for the directory
2451 Verifies directory existence and permissions with disk I/O. @param localFS Local file system instance @param dir Path to the directory to verify @param expected Expected FsPermission value
2452 Lists status of multiple files. @param files array of file paths
2453 Retrieves the used space for the file system. @throws IOException if an I/O error occurs
2454 Retrieves block locations for a file range. @param file the original file @param start the starting offset of the requested range @param len the length of the requested range @return an array of BlockLocation objects or null if not found
2455 Opens the underlying file for reading. @param f path to the file @param bufferSize buffer size for data read operations @return FSDataInputStream object or throws IOException/FNFE if invalid
2456 Opens a file stream for reading with specified buffer size. @param f Path to the file @param bufferSize Size of the read buffer @return FSDataInputStream object or throws IOException/UnresolvedLinkException if failed
2457 Opens a file stream with optional checksum verification. @param f the Path to open @param bufferSize the buffer size for reading @return an FSDataInputStream object or null if not found
2458 Renames a file or directory internally. @param src original path @param dst new path
2459 Renames a file or directory to a new location within the same AbstractFileSystem. @param src path of the source file/directory @param dst path of the destination file/directory @param options rename options (e.g., overwrite)
2460 Fetches file statuses within the specified indexed directory. @param parent Indexed directory to search @param statuses list of FileStatus objects to populate
2461 Retrieves file status by converting HDFS har status. @param f Path object representing the file @return FileStatus object or null if not found
2462 Retrieves the status of a file on an SFTP server. @param client SFTP connection @param file Path to the file @return FileStatus object or null if not found
2463 Retrieves the status of a file on an FTP server. @param client FTPClient instance @param file Path to the file @return FileStatus object or throws IOException if not found
2464 Initializes MetricsSystemImpl with default configuration (null metrics system). @param metricsSystem null by default
2465 Initializes rolling averages with custom metric value name. @param metricValueName unique identifier for the average calculation
2466 Replaces the scheduled task with a new one. @param windows number of rate changes @param interval fixed rate interval @param timeUnit unit of measurement for interval
2467 Rechecks electability based on current health state and delay until joining election.
2468 Re-joins election after failing to become active node.
2469 Handles a WatchEvent from the ZooKeeper, updating internal state and triggering actions as needed. @param zk active ZooKeeper connection @param event WatchEvent object containing details of the change
2470 Creates an InetSocketAddress instance from the given target hostname or IP address and port. @param target hostname or IP address @param defaultPort default port number (optional)
2471 Authenticates a user based on the Authorization header in the request. @throws AuthenticationException if authentication fails
2472 Checks if property exists with given key. @param name unique property identifier @return true if property is present, false otherwise
2473 Retrieves the raw value of a property by its name. @param name property name @return raw property value or null if not found
2474 Sets property with specified name, value and source. @param name property name @param value property value @param source source of the change (or null for programmatically)
2475 Removes overlay and properties associated with a given name. @param name unique identifier to remove
2476 Retrieves the total virtual memory size. @return Total virtual memory size in bytes.
2477 Retrieves physical memory size. @return total physical memory size in bytes
2478 Retrieves available virtual memory size. @return total available virtual memory in bytes
2479 Retrieves available physical memory size in bytes. @return Available physical memory size or -1 if unknown.
2480 Returns the number of processors available. @return The current processor count or -1 if unavailable
2481 Retrieves CPU frequency in kHz. @return current CPU frequency or last known value if not refreshed.
2482 Retrieves the cumulative CPU time in milliseconds. @return total CPU time spent by this process since startup or last reset.
2483 Retrieves CPU usage percentage as a floating-point value. @return CPU usage percentage or -1.0 if unavailable
2484 Calculates and returns the number of virtual CPU cores used, as a percentage. @return CPU usage percentage or -1.0 if unavailable
2485 Retrieves the total number of bytes read from the network. @return the current network bytes read value
2486 Retrieves the total bytes written to the network. @return The cumulative number of bytes sent over the network.
2487 Refreshes and caches user groups.
2488 Updates the file system status for a given mount point. @param viewFileSystem View of the file system @param mountPointMap Map of mount points to their statuses @param mountPoint Mount point identifier @param path File system path to fetch status from
2489 Retrieves a list of file statuses for the given path. @param f Path to query @return Array of FileStatus objects or null if not found
2490 Resolves file link status for the given path. @param f Path to resolve @param dereference whether to follow symbolic links or not @return FileStatus object or null if not found
2491 Resolves file system path and returns corresponding FileStatus object. @param f input path to resolve
2492 Retrieves file statuses for the given path. @param f target filesystem path @return array of FileStatus objects or null if not found
2493 Checks if a remote SFTP file exists. @param channel active SFTP channel @param file Path to the file to check @return true if the file exists, false otherwise
2494 Returns file status for the given SFTP file. @param channel SFTP channel to use @param sftpFile SFTP file entry to fetch status for @param parentPath parent directory path @return FileStatus object or null if not found
2495 Checks if a given SFTP file exists and is not a directory. @param channel active SFTP connection @param file Path to the file to check @return true if file exists, false otherwise
2496 Checks if a file exists on an FTP server. @param client active FTP connection @param file Path to the file to check @return true if the file exists, false otherwise
2497 Lists status of files and subdirectories in specified path. @param client FTPClient instance @param file Path to list directory/file for @return Array of FileStatus objects or null if not found
2498 Checks if a remote file exists and is a regular file. @param client active FTP connection @param file local file path to verify @return true if the file exists and is a regular file, false otherwise
2499 Constructs a CBZip2InputStream from an existing stream. @param in input stream to wrap @param readMode mode of compression reading (e.g. READ_MODE)
2500 Calculates the number of bytes until the next marker.
2501 Processes ZooKeeper create node result. @param rc creation result code @param path znode path @param ctx connection context @param name lock name
2502 Processes StatNode result, determining leader/standby status and handling errors. @param rc Zookeeper response code @param path monitored lock znode path @param ctx client context @param stat StatNode result object
2503 Creates an InetSocketAddress from a hostname or IP address. @param target network location (e.g. hostname or IP address)
2504 Parses string specifications into a list of InetSocketAddress objects. @param specs comma-separated host:port strings or null for localhost @return List of InetSocketAddress objects or default localhost address if specs is null
2505 Builds the DT service name from a URI and default port. @param uri URI with authority to extract @param defPort default port number to use if not specified in URI @return String representation of the built token service or null if no authority found
2506 Creates an XML document representing configuration data. @param propertyName optional property name to include (null for all properties) @param redactor ConfigRedactor instance to apply formatting @return Document object containing configuration data or null on failure
2507 Substitutes variables in the given expression by their values. @param expr input expression to substitute variables in
2508 Applies configuration changes based on user input. @param out PrintWriter for output @param reconf Reconfigurable object for property updates @param req HttpServletRequest containing form data
2509 Sets a property with the given name and value. @param name property key @param value property value
2510 Sets a property with optional source information. @param name property name @param value property value @param source optional source of the value (may be null)
2511 Deletes a directory and its contents recursively. @param dir directory to be deleted @param tryGrantPermissions whether to grant write permissions before deletion @return true if the directory is fully deleted, false otherwise
2512 Returns the number of CPU cores. Alias for getNumProcessors().
2513 Retrieves the file system status for each mount point that the given path intersects with. @param fileSystem ViewFileSystem instance @param path Path to evaluate @return Map of MountPoints to FsStatus objects, or throws exceptions if not supported
2514 Retrieves file status with qualified symlink targets. @param f the path to query @return FileStatus object or null if not found
2515 Renames a file on an SFTP server. @param channel SFTP connection @param src original file path @param dst new file path @return true if rename was successful, false otherwise
2516 Retrieves the status of a directory or single file on an SFTP server. @param client SFTP client connection @param file Path to the file/directory to list status for @return Array of FileStatus objects representing the files/directories in the specified path
2517 Creates directory recursively. @param client SFTP channel @param file Path to create directory for @param permission FsPermission to set on created directory @return true if directory was successfully created; false otherwise
2518 Returns an array of file statuses matching the specified pattern. @param pathPattern a file system path pattern
2519 Returns an array of file statuses matching the given pattern and filter. @param pathPattern glob pattern to match @param filter optional filter for matched files @return FileStatus array or null if no matches found
2520 Returns an array of FileStatus objects matching the given path pattern. @param pathPattern globbing pattern to match
2521 Returns an array of file status objects matching the specified path pattern and filtering criteria. @param pathPattern glob pattern for paths to match @param filter optional filter to apply to matched files
2522 Renames a file or directory on an FTP server. @param client FTPClient instance @param src source path @param dst destination path @return true if rename operation is successful, false otherwise
2523 Deletes a file or directory on an FTP server. @param client FTPClient instance @param file remote file path @param recursive whether to remove directory contents recursively (default: false)
2524 Creates the specified directory and all parent directories recursively. @param client FTPClient instance @param file Path to create directory for @param permission FsPermission for new directory @return true if directory was successfully created, false otherwise
2525 Converts an IP:port string to a host name. @param ipPort IP address and port number (e.g., "192.168.1.100:8080") @return Host name or original input if invalid
2526 Resolves service address for given token. @param token Token object containing service details
2527 Builds a token service instance with the specified URI authority.
2528 Returns canonical service name or null if child file systems exist.
2529 Returns canonical service name based on URI and default port. @return canonicalized service name as string
2530 Substitutes common variables in a given expression. @param expr input mathematical expression @return modified expression with substituted variables
2531 Retrieves the value of a property by its name. @param name unique property identifier @return The resolved property value, or null if not found
2532 Retrieves a property value by name or deprecation context. @param name the property name to retrieve @param defaultValue default value if property not found @return The retrieved property value or default value
2533 Sets an option with a given key-value pair. @param key unique option identifier @param value option value @return this builder instance for chaining
2534 Adds a mandatory option with the given key and value. @param key unique identifier for the option @param value value associated with the key
2535 Sets the default file system URI in the Configuration object. @param conf configuration to update @param uri default file system URI as a URI object
2536 Adds a link to the configuration. @param conf Configuration object @param mountTableName unique table identifier @param src source path @param target URI of linked resource
2537 Sets configuration property for link merge slash. @param conf Hadoop Configuration object @param mountTableName name of the mounted table @param target URI of the target resource
2538 Adds link fallback configuration to the given Hadoop config. @param conf Hadoop Configuration object @param mountTableName name of the table being mounted @param target URI of the fallback link
2539 Adds link merge configuration to the given Configuration object. @param conf Hadoop Configuration instance @param mountTableName name of the table to configure @param targets array of URIs for link merge targets
2540 Adds a link to fly configuration setting. @param conf Hadoop Configuration object @param mountTableName table name for linking @param src source data path @param settings configuration property key @param targets target data paths
2541 Sets a link regex configuration in the given Hadoop Configuration object. @param conf Hadoop Configuration object to update @param mountTableName table name for which the link regex is being set @param srcRegex source regex pattern @param targetStr target string value @param interceptorSettings optional settings key-value pairs to append to prefix
2542 Sets the home directory configuration for a mount table. @param conf Configuration object to update @param mountTableName Name of the mount table @param homedir Home directory path (must start with '/')
2543 Sets the UMask value in the configuration. @param conf Hadoop Configuration object @param umask file system permissions to set as UMask
2544 Sets codec classes in configuration. @param conf Configuration object @param classes List of Class objects representing codecs to set
2545 Sets default compression type in Configuration. @param job Configuration object @param val desired CompressionType value
2546 Retrieves proxy user configuration from FilterConfig. @param filterConfig Filter initialization context @return Configuration object with proxy user settings or null if not found
2547 Parses command line arguments and initializes the tool. @param args array of string arguments @return int exit status (0 for success, non-zero for failure)
2548 Sets an integer property with the given name. @param name property name @param value integer value to be set
2549 Sets a named long value. @param name unique identifier for this value @param value the long value to be stored
2550 Sets a named float property with the given value. @param name unique property identifier @param value the float value to be assigned
2551 Sets a named double value. @param name unique identifier for the value @param value numeric value to be stored
2552 Sets a named boolean attribute to the specified value. @param name unique attribute identifier @param value true or false value to store
2553 Sets time duration with specified unit. @param name identifier @param value milliseconds value @param unit time unit (e.g. seconds, minutes)
2554 Sets storage size with specified unit. @param name storage name @param value storage size value @param unit storage unit (e.g. Byte, KB, MB)
2555 Sets a regular expression pattern with the specified name. @param name unique pattern identifier @param pattern non-null regular expression pattern
2556 Sets multiple strings with a single key. @param name unique identifier @param values array of string values
2557 Sets socket address information using the provided name and address. @param name human-readable identifier @param addr network address details
2558 Sets class metadata with validation. @param name unique identifier @param theClass class to be registered @param xface expected interface type
2559 Recursively deletes a directory and its contents. @param dir directory to delete @return true if deletion was successful, false otherwise
2560 Recursively deletes all contents within the specified directory. @param dir the directory to delete from @param tryGrantPermissions whether to attempt granting permissions to access the directory @return true if deletion was successful, false otherwise
2561 Lists file statuses for the given path. @param f Path to list statuses for @return Array of FileStatus objects or null if not found
2562 Retrieves status for the given file path. @param f file path to check
2563 Deletes a file or directory on SFTP server. @param channel SFTP connection @param file Path to delete @param recursive Whether to recursively delete contents of directories @return true if successful, false otherwise
2564 Creates a compressed input stream with specified seek and read modes. @param seekableIn the underlying seekable input stream @param decompressor used for decompression @param start starting position to seek to @param end ending position to use for reading @param readMode read mode to apply
2565 Adds Metric annotations from a Field to the source Object. @param source Object containing fields to annotate @param field Field containing Metric annotations
2566 Retrieves configuration value by type and key. @param conf Configuration object @param t storage type (e.g. HDFS, S3) @param name configuration key @return configuration value as String or null if not found
2567 Retrieves transfer mode from Hadoop Configuration. @param conf Hadoop configuration object @return Transfer mode (FTP.BLOCK_TRANSFER_MODE by default)
2568 Sets FTP data connection mode based on configuration. @param client FTPClient instance @param conf Configuration object with mode settings
2569 Retrieves home directory value from configuration. @param conf Configuration object @param mountTableName name of the mount table @return home directory value or null if not found
2570 Retrieves the default umask from configuration, parsing it if present. @param conf Configuration object @return FsPermission representing the umask value
2571 Retrieves a list of CompressionCodec classes from service providers and configuration. @param conf Hadoop Configuration object @return List of Class<? extends CompressionCodec> objects representing codec classes
2572 Returns default compression type based on configuration. @param job Configuration object with compression type setting @return CompressionType enum value or RECORD if not specified
2573 Converts a security property to a string representation. @param property the property name
2574 Validates Hadoop token files by checking system properties and configuration. @param conf the Hadoop Configuration object
2575 Locates and initializes the Java KeyStore. @throws IOException if key store creation or loading fails
2576 Retrieves local host name from configuration or falls back to system query. @param conf Configuration object (may be null)
2577 Retrieves the client principal from configuration using Kerberos info. @param protocol Class representing the communication protocol @param conf Configuration object containing key-value pairs @return Client principal string or null if not found
2578 Retrieves and trims user input by key, returning null if not found. @param name unique user identifier @return trimmed String value or null if absent
2579 Sets a property to the specified value only if it's currently unset. @param name unique property identifier @param value new property value
2580 Converts a duration value from one time unit to another. @param name configuration key @param defaultValue default value if not set @param defaultUnit initial time unit @param returnUnit desired output time unit @return converted duration in the specified unit
2581 Parses and converts storage size from given key or default value. @param name key containing storage size (e.g. "1GB") @param defaultValue default size in case key is empty @param targetUnit desired unit of measurement for result @return double representation of storage size in target unit
2582 Retrieves storage size by name and converts it to the specified unit. @param name unique storage identifier @param defaultValue default value if not found @param targetUnit desired unit for result (e.g. GB, TB) @return storage size in target unit or default value if not found
2583 Retrieves a regular expression pattern by name, using a default value if invalid or empty. @param name unique identifier for the pattern @param defaultValue default pattern to use if invalid @return Pattern object or defaultValue if not valid
2584 Retrieves a collection of strings from a configuration source. @param name unique identifier of the string collection
2585 Retrieves an array of strings from a given configuration value. @param name unique key in the configuration
2586 Returns an array of strings from a configuration value or default values. @param name unique key for the configuration value @param defaultValue array of default string values to return if config is missing
2587 Retrieves a collection of trimmed strings from the specified key. @param name unique key identifier
2588 Retrieves trimmed strings from a configuration. @param name unique key
2589 Retrieves trimmed strings from storage by name; returns default values if not found. @param name unique key identifier @param defaultValue array of fallback string values (optional) @return array of trimmed string values or default value array if not found
2590 Retrieves configuration properties with the specified prefix. @param confPrefix prefix to filter configuration properties @return Map of filtered configuration properties (key-value pairs)
2591 Appends JSON property with redacted value to the generator. @param name property key @param redactor configuration for redacting values
2592 Updates a reconfigurable property value. @param property unique property identifier @param newVal new value for the property or null to unset
2593 Retrieves and logs a string value from parent storage. @param name key to fetch @return fetched string value or null if not found
2594 Retrieves default mount table name from configuration. @param conf configuration object @return default mount table name or null if not set
2595 Determines if the native Bzip2 library is loaded. @param conf Hadoop configuration
2596 Retrieves the default socket factory based on configuration settings. @param conf Hadoop Configuration object
2597 Retrieves username from configuration. @param conf Configuration object @return Username as a string or null if not found
2598 Prints configuration option value to console. @param option name of the configuration option
2599 Initializes TruststoreKeystore with configuration settings. @param conf Configuration object containing SSL keystore and truststore details
2600 Spawns a thread to auto-renew Kerberos tickets for user credentials. @param force whether to spawn the thread regardless of conditions
2601 Configures KeyProvider with given configuration. @param conf Hadoop Configuration object
2602 Parses and returns a list of ZooKeeper ACLs from configuration. @param conf Hadoop Configuration object @return List of ACL objects or empty list if not found
2603 Retrieves hash type from configuration. @param conf Hadoop Configuration object
2604 Retrieves an EnumSet instance from configuration. @param key configuration key @param enumClass Enum class to parse into set @param ignoreUnknown whether to ignore unknown enum values
2605 Retrieves integer range from configuration. @param name unique identifier @param defaultValue default value to return if not found
2606 Fetches attribute by name with default value fallback. @param name attribute name @param defaultValue default value to return if not found @return Attribute value or default value if not set
2607 Sets boolean value in configuration under specified key. @param key unique configuration key @param value boolean value to be set (true or false)
2608 Converts a double to string and stores it in a map using the provided key. @param key unique key for the map entry @param value double value to be converted and stored
2609 Converts boolean to string and passes it as a value in "must" operation. @param key unique identifier @param value boolean value to convert and use
2610 Converts a numeric value to a string and adds it as an attribute. @param key unique attribute identifier @param value numeric value to be converted and added
2611 Sets default URI in configuration. @param conf Configuration object @param uri new default URI value
2612 Adds links to a NoFly configuration. @param conf the Configuration object @param mountTableName the name of the mounted table @param src the source URI @param settings replication and read settings (default: minReplication=2,repairOnRead=true) @param targets zero or more target URIs
2613 Sets the index update interval in the configuration. @param conf configuration object @param interval interval value to be set (in units of time)
2614 Sets IPC ping interval in configuration. @param conf Hadoop Configuration object @param pingInterval new interval value (in seconds)
2615 Sets the connect timeout in milliseconds for the IPC client. @param conf configuration object @param timeout connect timeout value
2616 Sets whether nested mount point support is enabled. @param conf Hadoop configuration object @param isNestedMountPointSupported true to enable, false otherwise
2617 Adds an optional configuration option with the given name and values. @param key unique option identifier @param values variable number of string values for this option
2618 Adds a mandatory field with optional values. @param key unique field identifier @param values one or more allowed values for the field @return Builder instance for method chaining
2619 Updates and returns the connection address for a given socket. @param name socket name @param addr current address to update from @return updated InetSocketAddress object
2620 Sets the RPC engine for a given protocol. @param conf configuration object @param protocol protocol class to set engine for @param engine engine class to use
2621 Deletes a file or directory. @param p Path to delete @param recursive whether to recursively delete directories and their contents
2622 Recursively deletes all contents within the specified directory. @param dir target directory to delete
2623 Retrieves file metadata for the specified path. @param f Path to fetch information about @return FileStatus object or throws an exception if access fails
2624 Lists file statuses in the specified directory. @param f Path to the directory @return array of FileStatus objects or empty array if not found
2625 Creates a new FSDataOutputStream with specified parameters. @param f output file path @param overwrite whether to overwrite existing file @param bufferSize I/O buffer size @param replication replication factor for data storage @param blockSize block size for data storage @param progress progress indicator for I/O operation
2626 Retrieves the default Unix mode mask permission. @return FsPermission object representing the default UMask or null if not set
2627 Creates a BlockFactory instance based on the specified factory type. @param keyToBufferDir directory path for buffered data @param configuration application settings @param name factory type (e.g. DATA_BLOCKS_BUFFER_ARRAY) @return BlockFactory object or throws exception if invalid type
2628 Initializes compression codecs based on configuration. @param conf Hadoop Configuration object
2629 Returns trimmed version of input name or default value if trim operation fails. @param name input string to be trimmed @param defaultValue fallback string if trimming fails
2630 Parses string value to integer using hex or decimal format. @param name property name @param defaultValue default value to return if parsing fails
2631 Parses a long value from the given string or returns default value. @param name property name to fetch the value @param defaultValue default value if parsing fails @return parsed long value or default value if failed
2632 Converts a string representation of bytes to a long integer. @param name string containing byte value @param defaultValue default long value to return if input is invalid @return long integer representation of bytes or defaultValue if invalid
2633 Retrieves a floating-point value from configuration by name. @param name unique identifier for the value @param defaultValue default value to return if not found @return float value or defaultValue if not set
2634 Retrieves a double value from configuration by key or returns the default value. @param name configuration key @param defaultValue default double value to return if key not found
2635 Retrieves a boolean value from configuration, falling back to the provided default if invalid or empty. @param name configuration key @param defaultValue default boolean value to use if invalid or missing configuration
2636 Retrieves a class by name or returns default class. @param name class name to search for @param defaultValue default class to return if not found
2637 Sets boolean value if field is unset (null).
2638 Calculates time duration in specified units from input string. @param name input string representing time duration (e.g. "2 days") @param defaultValue default value to return if parsing fails @param unit TimeUnit enum value specifying desired output unit
2639 Retrieves SASL properties from the configuration. @param conf Hadoop Configuration object @param configKey key for QOP values in the configuration @param defaultQOP default Quality of Protection value to use if not found @return Map of SASL properties (QOP and server authentication)
2640 Converts string array to integer array. @param name input string containing comma-separated integers @return int[] array of parsed integers or null if invalid input
2641 Retrieves an array of Class objects by name, returning default values if not found. @param name property name @param defaultValue optional default value array @return array of Class objects or default values if not found
2642 Retrieves a file by searching through a list of local directories. @param dirsProp comma-separated string of directory paths @param path file to retrieve (relative to each dir) @return File object if found, or throws IOException otherwise
2643 Initializes SerializationFactory with configured serialization classes. @param conf Configuration object containing serialization settings
2644 Retrieves filter parameters from configuration with specified prefix. @param conf Hadoop Configuration object @param confPrefix Filter parameter key prefix @return Map of filter parameter keys to values or null if not found
2645 Retrieves filter parameters from Hadoop configuration. @param conf Hadoop configuration object @param confPrefix prefix to filter properties by
2646 Applies configuration options with a given prefix to the FSBuilder. @param builder FSBuilder instance @param conf Hadoop Configuration object @param prefix option prefix (including trailing dot if any) @param mandatory whether options are required or optional
2647 Prints configuration changes to a PrintWriter. @param out PrintWriter for output @param reconf Reconfigurable object with current and new configurations
2648 Adds a link to the configuration. @param conf configuration object @param src source URL or identifier @param target destination URI
2649 Adds link merge slash to configuration with default mount table name. @param conf Hadoop Configuration object @param target the target URI for merging
2650 Adds fallback link to default mount table. @param conf Hadoop Configuration object @param target URI of the link
2651 Adds link merges to the configuration. @param conf Configuration object
2652 Sets home directory configuration with default mount table name. @param conf Hadoop Configuration object @param homedir home directory path
2653 Retrieves home directory value from configuration. @param conf configuration object
2654 Creates an instance of the specified Erasure Encoder. @param conf configuration object @param options ErasureCodecOptions
2655 Creates an ErasureDecoder instance based on the provided configuration and options. @param conf Hadoop Configuration object @param options ErasureCodecOptions containing schema information @return ErasureDecoder instance or null if creation fails
2656 Returns the native Bzip2 compressor class if available, otherwise a dummy implementation.
2657 Returns the type of BZIP2 decompressor to use based on native library availability. @param conf Hadoop configuration object
2658 Returns a Bzip2 decompressor instance based on native library availability. @param conf Hadoop configuration object
2659 Retrieves a SocketFactory instance based on configuration and class type. @param conf Hadoop Configuration object @param clazz Class type to determine socket factory implementation @return SocketFactory instance or null if not found
2660 Initializes a Hadoop ZooKeeper factory with Kerberos authentication. @param zkPrincipal ZooKeeper principal @param kerberosPrincipal Kerberos principal @param kerberosKeytab Path to Kerberos keytab file
2661 Initializes SSL/TLS context and related components. @throws GeneralSecurityException on security initialization failure @throws IOException on configuration loading failure
2662 Checks if authentication method is simple. @param conf Configuration object @return true if simple, false otherwise
2663 Sets configuration for authentication and authorization. @param conf Hadoop Configuration object
2664 Retrieves a CryptoCodec instance based on the provided configuration and cipher suite. @param conf Configuration object @param cipherSuite CipherSuite object @return CryptoCodec instance or null if not found
2665 Retrieves an instance of the specified hash function based on configuration. @param conf application configuration
2666 Builds a FlagSet from the given configuration and enum class. @param enumClass Class of the enum values @param conf Configuration object @param key Key to fetch enum set from configuration @param ignoreUnknown Whether to ignore unknown flag values
2667 Writes XML representation of property or entire configuration to output writer. @param propertyName name of the property to write (null for full config) @param out target Writer stream @param config optional Configuration object for redaction
2668 Serializes configuration to JSON output stream. @param config Configuration object @param out Output writer for JSON data
2669 Sets long value with given key in cache. @param key unique cache identifier @param value value to be stored
2670 Converts a floating-point value to a long and fetches an object with that ID. @param key unique identifier for the object @param value numeric value to be converted and used as ID @return B object or null if not found
2671 Converts a floating-point number to its equivalent long value and fetches an object from the cache. @param key unique cache identifier @param value numeric value to be converted and cached @return Object associated with the specified key or null if not found
2672 Converts integer to long value. @param key unique identifier @param value integer value to convert
2673 Creates a MetricsSource instance from an Object. @param source Object to build MetricsSource with
2674 Creates an output stream to a file with specified parameters. @param f the file path @param overwrite whether to overwrite existing files @param bufferSize buffer size for writing data @param replication HDFS replication factor @param blockSize block size in bytes
2675 Creates a new file or directory at the specified path with given permissions and options. @param f output file/directory path @param createFlag creation flags (e.g. overwrite) @param opts additional creation options (e.g. permissions)
2676 Creates a directory with specified permissions and optional parent creation. @param dir directory path @param permission FsPermission for the new directory (optional) @param createParent whether to create parent directories if they don't exist
2677 Reads and writes compressed files based on command-line input. @param args array of file paths; options "-in" and "-out" toggle read/write mode
2678 Resolves server principal from configuration and hostname. @param principalConfig server principal configuration string @param hostname current host name @return resolved principal string or original config if invalid
2679 Resolves server principal from configuration and IP address. @param principalConfig principal configuration string @param addr client's IP address @return resolved server principal or original config if invalid
2680 Registers and adds a new server protocol implementation. @param rpcKind type of RPC to add @param protocolClass class implementing the protocol @param protocolImpl instance of the protocol implementation @return this Server object for method chaining
2681 Creates a KeyProvider instance from configuration. @param conf Hadoop Configuration object @param configKeyName name of key provider configuration key @return KeyProvider instance or null if not found
2682 Returns the default file system URI based on configuration. @param conf Hadoop Configuration object @return Default filesystem URI or throws exception if invalid
2683 Validates the Kinit executable command. @param none
2684 Creates socket address from user-provided or default information. @param name user-provided hostname or service name @param defaultAddress default IP address to use if not provided by user @param defaultPort default port number to use if not specified by user
2685 Updates connection address with user-specified host and/or port values. @param hostProperty property name for custom host @param addressProperty property name for custom port or address @param defaultAddressValue default port value if not specified @param addr original InetSocketAddress to update @return updated InetSocketAddress object
2686 Resolves file system link to fetch FSDataInputStream. @return CompletableFuture containing FSDataInputStream or null if not found
2687 Builds and opens a file with specified options. @return FSDataInputStream or null if not found
2688 Configures the application from a URI. @param uriInfo URI containing configuration information @throws IOException if host or user is null
2689 Establishes a secure SFTP connection using configuration settings. @return ChannelSftp object or throws IOException on failure
2690 Initializes buffer size from file system configuration.
2691 Opens file stream with default buffer size. @param f Path to the file
2692 Opens an input stream from the given file descriptor. @param fd PathHandle to the file
2693 Appends data to a file at specified path. @param f Path of the file to append to
2694 Initializes a new file stream for appending data. @param f the path to the file @param appendToNewBlock whether to append to a new block or not
2695 Initializes the cache with a specified number of creation parallel permits. @param conf Hadoop configuration object
2696 Initializes a Sorter object with given configuration and parameters. @param fs FileSystem to operate on @param comparator RawComparator for sorting data @param keyClass Class of key objects @param valClass Class of value objects @param conf Configuration object with sort settings @param metadata Metadata associated with the data being sorted
2697 Creates a compressed output stream with LZ4 buffering. @param out underlying OutputStream @param compressor Compressor instance for compression
2698 Creates a compression input stream using the provided decompressor. @param in the input stream to compress @param decompressor the decompression object
2699 Creates a LZ4 decompressor instance with specified buffer size. @return Decompressor object
2700 Creates a compression output stream based on the native Bzip2 availability. @param out target output stream @param compressor underlying compression algorithm @return CompressorStream or BZip2CompressionOutputStream instance
2701 Creates a compression-aware input stream from the given InputStream. @param in the input stream to decompress @param decompressor Decompressor instance for decompression
2702 Creates a CompressionOutputStream using the provided Compressor. @param out OutputStream to compress @param compressor Compressor instance @return CompressionOutputStream or null if creation fails
2703 Creates a Snappy compressor instance with specified buffer size. @return Compressor object
2704 Creates a compression input stream with specified decompressor and buffersize. @param in input stream to compress @param decompressor decompression algorithm instance
2705 Creates a Snappy decompressor instance with specified buffer size. @return Decompressor object for decompressing data
2706 Copies bytes from input stream to output stream based on configuration. @param in input stream @param out output stream @param conf configuration object for buffer size and other settings
2707 Copies bytes from input stream to output stream. @param in input stream @param out output stream @param conf configuration object (file buffer size) @param close whether to close streams after copying
2708 Retrieves file buffer size from Hadoop configuration. @param conf Hadoop job configuration @return File buffer size in bytes or default value if not set
2709 Initializes configuration for this object. @param conf Configuration object to use
2710 Retrieves the buffer size from the configuration. @param conf Hadoop Configuration object @return Buffer size value or default if not set
2711 Parses the number of levels from configuration. @param ns namespace @param conf Hadoop Configuration object @return minimum level (at least 1)
2712 Retrieves RPC timeout in milliseconds from configuration. @param conf Hadoop Configuration object
2713 Retrieves the Hadoop IPC ping interval from configuration. @param conf Hadoop job configuration @return Ping interval in milliseconds or default value if not set
2714 Retrieves the RPC timeout value from the configuration. @param conf Hadoop Configuration object
2715 Initializes a LineReader instance with an input stream and configuration. @param in Input stream to read from @param conf Configuration object for file buffer size
2716 Initializes a LineReader with the specified input stream and configuration. @param in input stream to read from @param conf configuration settings for buffer size @param recordDelimiterBytes delimiter bytes for line parsing
2717 Retrieves integer value from configuration with logging. @param name configuration key @param defaultValue default value to return if key not found
2718 Sets FTP client's control keep-alive timeout based on configuration. @param client FTPClient instance to configure @param conf Configuration object containing timeout value
2719 Retrieves a long integer option by key or returns the default value if invalid. @param key unique option identifier @param defVal default long value to return on failure @return long option value or defVal if not a valid long integer
2720 Returns the default block size in bytes, currently set to 32MB.
2721 Retrieves a long value from the underlying data source. @param name property name @param defaultValue default value to return if not found
2722 Retrieves a float property by name with optional default value. @param name property name @param defaultValue default float value if not found @return float property value or default value if not set
2723 Initializes configuration for the file system. @param conf Hadoop Configuration object @param fs FileSystem instance @param home user's home directory path
2724 Checks if nested mount point support is enabled. @param conf Hadoop configuration object
2725 Creates an instance of LZ4 compressor with specified buffer size and usage. @return Compressor object
2726 Retrieves Multiple Linear Random Retry Policy configuration. @param conf Hadoop Configuration object @param retryPolicyEnabledKey key for enabling policy (default false) @param defaultRetryPolicyEnabled default enabled value @param retryPolicySpecKey key for policy specification @param defaultRetryPolicySpec default policy spec @return MultipleLinearRandomRetry Policy or null if disabled
2727 Configures and adds default Jetty contexts for "/logs/" and "/static/*". @param parent ContextHandlerCollection to add contexts to @param appDir application directory path @param conf Hadoop configuration object
2728 Registers default servlets with the specified Configuration. @param configuration application settings
2729 Retrieves server failover enable status from configuration. @param namespace unique namespace identifier @param conf Configuration object @return true if enabled, false otherwise
2730 Initializes a new IPC client with specified configuration and socket factory. @param valueClass Writable class type to use for data serialization @param conf Configuration object containing client settings @param factory SocketFactory instance for network connection management
2731 Checks if client backoff is enabled. @param prefix configuration key prefix @param conf Hadoop Configuration object @return true if enabled, false otherwise
2732 Checks if client backoff is enabled in the given namespace and port. @param namespace unique namespace identifier @param port network port number @return true if backoff enabled, false otherwise
2733 Retrieves password from configuration for the specified user name. @param name unique user identifier @return char array containing password or null if not found
2734 Retrieves a boolean property by name with a default value. @param name property name @param defaultValue default boolean value to return if not found
2735 Retrieves the file system class based on scheme and configuration. @param scheme file system scheme @param conf Hadoop configuration (optional) @return FileSystem class or throws UnsupportedFileSystemException if not found
2736 Creates a file system instance based on the given URI and configuration. @param uri unique identifier for the file system @param conf Hadoop configuration object @return AbstractFileSystem instance or throws UnsupportedFileSystemException if not found
2737 Retrieves a BlockingQueue implementation class for IPC calls. @param namespace unique namespace identifier @param port integer port number @param conf Hadoop Configuration object @return Class of BlockingQueue<Call> or null if not found
2738 Retrieves the RpcScheduler class based on configuration. @param namespace HDFS namespace @param port RPC port number @param conf configuration object @return RpcScheduler class or null if not found
2739 Retrieves a Class instance by name, applying interface constraint. @param name class name to search for @param defaultValue default class if not found @param xface expected interface type @return Class<? extends U> or null if not found
2740 Creates or returns an existing instance of FileSystem for the given URI and configuration. @param uri unique identifier for the filesystem @param conf configuration settings @param key cache key @return FileSystem object or null if not found
2741 Calculates the shutdown timeout in milliseconds. @param conf HBase configuration @return Shutdown duration, capped at minimum threshold
2742 Retrieves password from credential providers. @param name unique user identifier @return char[] password or null if not found
2743 Retrieves capacity weights from configuration, or uses default values if not specified. @param priorityLevels number of priority levels @param ns namespace for configuration keys @param conf application configuration @return array of positive integers representing capacity weights
2744 Retrieves an array of FilterInitializers from the given Configuration. @param conf configuration object @return array of FilterInitializers or null if not found
2745 Retrieves instances of classes implementing specific interface. @param name unique identifier for class registry @param xface reference to the interface to be implemented @return List of objects implementing the specified interface
2746 Initializes the configuration and output stream for writing. @param config Configuration object @param outStream Output stream to write to @param ownStream Whether the output stream is owned by this instance @param key Class of key data @param val Class of value data @param compCodec Compression codec to use (null for no compression) @param meta Metadata object @param syncIntervalVal Sync interval value
2747 Propagates configuration options to the FSBuilder. @param builder FSBuilder instance @param conf Hadoop Configuration object @param prefix Option prefix string @param mandatory Whether options are required or not
2748 Propagates configuration options to FSBuilder. @param builder the FSBuilder instance @param conf the Configuration object @param prefix optional or mandatory option prefix
2749 Performs native library checks, either for Hadoop only or all libraries. @param args command line arguments: -a to check all libraries, -h for help
2750 Returns compressor type based on configuration.
2751 Returns the type of decompressor to use based on configuration.
2752 Creates a Bzip2 decompressor instance based on configuration.
2753 Constructs Hadoop Zookeeper factory with principal. @param zkPrincipal principal to use in Zookeeper connection
2754 Retrieves the user's group memberships. @param result SearchResult object containing user data @param c DirContext for LDAP operations @param goUpHierarchy whether to traverse up the group hierarchy (true/false) @return Set of group names or an empty set if not found
2755 Returns a configured instance of CryptoCodec. @param conf Configuration object with cipher suite key
2756 Binds server socket to specified address and port. @param socket ServerSocket instance @param address InetSocketAddress containing host and port @param backlog Maximum number of pending connections
2757 Dumps specific configuration property or entire config to output stream. @param config Configuration object @param propertyName Property name (optional) or null for full config @param out Output writer
2758 Creates a directory at the specified path. @param f the Path to create the directory in
2759 Retrieves the server's Kerberos principal based on authentication type. @param authType SaslAuth object containing protocol and server ID @return Server's Kerberos principal as a string or null if not found
2760 Decodes a HAR URI into a standard URI. @param rawURI the HAR URI to decode @param conf configuration object @return decoded URI or null if not found
2761 Returns a FileSystem instance based on the default URI and configuration. @param conf Hadoop Configuration object
2762 Initializes client with URI and configuration. @param name URI to use (scheme defaults to config value) @param conf Client configuration
2763 Creates a new File System instance. @param conf Hadoop Configuration object
2764 Verifies the given file system path against the current file system's URI. @param path the file system path to check
2765 Constructs socket address using properties or defaults. @param hostProperty property for host name @param addressProperty property for address (or null to use host) @param defaultAddressValue default address if not specified @param defaultPort default port value @return InetSocketAddress object
2766 Creates a file on the remote SFTP server. @param f file to create @param permission file permissions @param overwrite whether to overwrite existing file @param bufferSize buffer size for write operations @param replication data replication factor @param blockSize block size for writes @param progress progress monitor @return FSDataOutputStream for writing to the file
2767 Initializes a new data input stream builder for the given file system and path. @param fileSystem non-null file system instance @param path non-null file path to initialize from
2768 Initializes a new instance of DataInputStreamBuilder with the given file system and path handle. @param fileSystem non-null file system to operate on @param pathHandle non-null path handle for data access
2769 Opens a file on the instance, using high-performance file system API if available. @param instance DynamicWrappedIO instance @param fs FileSystem object @param status FileStatus object @return FSDataInputStream or throws IOException if an error occurs
2770 Checks if a file system supports appending to the specified base path. @param fs the file system instance @return true if append operation is supported, false otherwise
2771 Constructs a Sorter object. @param fs FileSystem to operate on @param comparator RawComparator for sorting @param keyClass Class of the sort key @param valClass Class of the value being sorted @param conf Configuration for the sorter
2772 Initializes Bzip2 compressor with configuration settings. @param conf Hadoop Configuration object
2773 Reinitializes the compressor with a new configuration. @param conf Compression configuration object
2774 Initializes a SequenceFile reader from a given input stream. @param tempReader whether to initialize for a temporary reader @throws IOException if an I/O error occurs
2775 Reinitializes the compressor with a new compression configuration. @param conf Configuration object containing compression settings
2776 Prepares a DataOutputStream for appending a value of specified length. @param length length of the value to append @return DataOutputStream instance or null for unknown lengths
2777 Initializes WBlockState with compression algorithm and output streams. @param compressionAlgo Algorithm for data compression @param fsOut Output stream to write compressed data @param fsOutputBuffer Buffer for storing compressed data @param conf Configuration object for file system settings
2778 Sets configuration for this object and its mapping. @param conf Configuration to apply
2779 Configures the object with a new Configuration instance. @param conf new configuration settings
2780 Creates an Options instance from the provided Configuration. @param conf configuration to use when creating the Options
2781 Retrieves the RPC timeout value from configuration. @param conf Configuration object @return RPC timeout value or ping interval if not found, or -1 on failure
2782 Establishes an FTP connection using configuration settings. @throws IOException if connection or login fails
2783 Returns a positive long value for the specified key, using the default value if it's negative. @param key unique identifier @param defVal default value to use when input is invalid @return long value or the provided default value if invalid
2784 Retrieves server defaults with default checksum type and configuration.
2785 Returns default block size based on file path. @param f file path to determine block size for
2786 Moves a corrupted file to the highest writable parent directory and renames it. @param p Path to the file
2787 Constructs a CachingGetSpaceUsed object from a given Builder. @throws IOException if an I/O error occurs while constructing.
2788 Reads the next record from a sequence file. @param buffer DataOutputBuffer to write record data into @return length of key in the next record, or -1 if end-of-file reached
2789 Returns the default retry policy based on configuration and parameters. @param conf Hadoop Configuration @param retryPolicyEnabledKey key to enable/disable retry policy @param defaultRetryPolicyEnabled whether retry is enabled by default @param retryPolicySpecKey key for retry policy specification @param defaultRetryPolicySpec default retry policy specification @param remoteExceptionToRetry exception type to retry remotely
2790 Constructs a new Client instance with default socket factory. @param valueClass class of writable value @param conf HBase configuration object
2791 Retrieves a cached or constructs a new Client instance. @param conf configuration for timeout @param factory SocketFactory instance @return Client object or null if not found
2792 Excludes incompatible credential providers from the configuration. @param config the original configuration @param fileSystemClass class of the target file system @return updated configuration with excluded providers
2793 Creates an instance of AbstractFileSystem based on the provided URI and configuration. @param uri unique file system identifier @param conf Hadoop configuration object @return AbstractFileSystem instance or throws exception if not supported
2794 Builds a Server instance from configuration. @throws IOException on I/O error @throws HadoopIllegalArgumentException if required fields are missing
2795 Retrieves a configured TrashPolicy instance. @param conf Hadoop Configuration object @param fs FileSystem object @param home Home directory Path @return Configured TrashPolicy object or null if initialization fails
2796 Returns a configured instance of the Trash Policy. @param conf Configuration object containing policy settings @param fs FileSystem object for initialization @return TrashPolicy instance or default implementation if not found
2797 Creates a new instance of the specified DomainNameResolver. @param conf Hadoop Configuration object @param configKey key to resolve resolver class from configuration
2798 Returns a shared instance of the SASL properties resolver. @param conf Hadoop configuration object
2799 Validates SASL property resolver by loading the specified class. @param saslPropsResolverKey key for resolving SASL properties
2800 Retrieves a singleton instance of the impersonation provider based on configuration. @param conf Hadoop configuration object
2801 Shuts down the executor service with configurable timeout. @param conf Configuration object containing shutdown settings
2802 Retrieves password for the given user by querying credential providers and configuration. @param name username to fetch password for @return password as character array or null if not found
2803 Creates a raw erasure encoder with the specified configuration and codec. @param conf Spark Configuration object @param codec Codec name @param coderOptions Erasure coder options
2804 Creates a raw erasure decoder instance. @param conf configuration object @param codec name of the erasure codec to use @param coderOptions options for the erasure coder
2805 Updates the queue and scheduler with new configuration. @param schedulerClass new scheduler class to use @param queueClassToUse new queue class to use @param maxSize maximum size of the new queue @param ns namespace for configuration @param conf configuration object
2806 Initializes FairCallQueue with specified parameters. @param priorityLevels number of priority levels (must be at least 1) @param capacity total capacity across all queues @param ns namespace for metrics and logging @param capacityWeights weights for each queue's capacity @param serverFailOverEnabled flag to enable server failover @param conf configuration object
2807 Stores an object in the configuration using a stringified representation. @param conf Configuration to store in @param item Object to serialize and store @param keyName Unique identifier for the stored value
2808 Loads a configured object by key, using the provided class and configuration. @param conf Configuration instance @param keyName unique key for the object to load @param itemClass class of the object to instantiate @return loaded object or null if not found
2809 Stores an array of objects in Hadoop Configuration. @param conf Hadoop Configuration object @param items array of objects to store @param keyName unique identifier for the stored data
2810 Loads an array of typed items from a configuration key. @param conf Configuration object @param keyName Key name to load items from @param itemClass Type of items in the array @return Array of loaded items or null if empty
2811 Initializes a Writer object with given parameters. @param fs file system instance @param conf configuration object @param name path to write data to @param keyClass class of key data type @param valClass class of value data type @param bufferSize buffer size for I/O operations @param replication output replication factor @param blockSize block size for storage @param progress progress callback object @param metadata metadata object for file system
2812 Deep copies a Configuration object or any serializable type T. @param conf configuration for serialization @param src source object to copy @param dst destination object to store the copied data @return copied object, null if deserialization fails
2813 Propagates configuration options to an FSBuilder. @param builder the FSBuilder instance @param conf Hadoop Configuration object @param optionalPrefix prefix for optional properties @param mandatoryPrefix prefix for required properties
2814 Retrieves the set of groups a user belongs to. @param user unique user identifier @param goUpHierarchy flag to fetch groups above the user in hierarchy (0 for direct membership) @return Set of group names or empty set if not found
2815 Writes configuration response to output stream in specified format. @param conf Hadoop Configuration object @param out Writer for output stream @param format Response format (JSON/XML) @param propertyName Property name for configuration dump
2816 Initializes authentication filter for the given configuration. @param container FilterContainer instance @param conf Configuration object
2817 Creates a SASL client for the specified authentication method. @param authType SaslAuth object containing authentication details @return initialized SaslClient or null if not supported
2818 Creates a FileSystem instance based on the provided URI and configuration. @param uri file system URI (scheme and authority) @param conf Hadoop Configuration object @return initialized FileSystem object
2819 Initializes the ViewFs with the given URI and Configuration. @param theUri unique identifier of the ViewFs @param conf configuration settings for the ViewFs
2820 Initializes this Hadoop FS instance with the given configuration. @param name URI of the file system @param conf Configuration to use for initialization
2821 Returns a qualified version of the provided file system path. @param path input file system path
2822 Resolves and returns an absolute path. @param p input path to be resolved
2823 Verifies file system path integrity. @param path file system path to validate
2824 Opens an Avro file and initializes the input stream. @param fc FileContext instance @param p Path to the Avro file
2825 Copies a file or directory from source to destination. @param src source path @param dst destination path @param deleteSource whether to delete the source after copy @param overwrite whether to overwrite existing files @return true if successful, false otherwise
2826 Initializes FSDataInputStreamBuilder with a FileSystem and Path. @param fileSystem underlying file system @param path input data location
2827 Initializes an FSDataInputStreamBuilder with a filesystem and path handle. @param fileSystem the underlying filesystem @param pathHandle identifies the path to stream from
2828 Opens a file on the specified filesystem with given status and read policies. @param fs file system @param status file status @param readPolicies read policy configuration @return FSDataInputStream for reading or null if not accessible
2829 Tries to load FsPermission from a given file path and its backup, handling corruption or incorrect password scenarios. @param path primary file path @param backupPath backup file path @return loaded FsPermission object or null on failure
2830 Initializes a new Sorter instance with the provided configuration. @param fs FileSystem object @param keyClass Class of the key to be sorted (WritableComparable) @param valClass Class of the value associated with the key @param conf Hadoop Configuration object
2831 Returns a BZIP2 compressor instance based on native library availability. @param conf Hadoop configuration
2832 Initializes the input stream and file metadata. @param filename file name @param in input stream @param start starting position @param length data length @param conf configuration @param tempReader whether to use a temporary reader
2833 Creates a compression output stream using the specified compressor. @param out target output stream @param compressor compression algorithm to use @return CompressionOutputStream instance or throws IOException on error
2834 Creates a compressor instance based on configuration settings. @return Compressor object with configured compression level and buffer size
2835 Creates a compression-aware input stream. @param in original input stream @param decompressor decompression object
2836 Creates a decompressor instance with native code. @return Decompressor object for Z-standard decompression.
2837 Prepares a Data Block for writing. @return BlockAppender instance for appending data
2838 Initializes ScriptBasedMapping with provided configuration. @param conf Hadoop Configuration object
2839 Sets configuration for this object and its underlying raw mapping. @param conf Configuration object to apply
2840 Parses command line arguments for key management operations. @param args array of command line parameters @return 0 on success, non-zero on error or help requested
2841 Creates a ConnectionId object with the specified parameters. @param addr InetSocketAddress containing server details @param protocol Class of RPC protocol to use @param ticket UserGroupInformation for authentication @param rpcTimeout timeout in milliseconds for RPC requests @param connectionRetryPolicy Retry policy for failed connections @param conf Configuration object with retry settings @return ConnectionId object or throws IOException if creation fails.
2842 Creates a file on the HDFS with specified permissions and settings. @param file HDFS path to create @param permission file permissions @param overwrite whether to overwrite existing files @param bufferSize buffer size for FTP transfers @param replication HDFS replication factor @param blockSize block size for FTP transfers @param progress progress monitor @return FSDataOutputStream for writing to the new file
2843 Returns server defaults for the given file system location. @param p Path to the file system location @return FsServerDefaults object or null if not found
2844 Creates an output stream to a file. @param f path of the file @param overwrite whether to overwrite existing file (true) or fail (false)
2845 Creates a new FSDataOutputStream for writing to the specified file. @param f Path to the file @param progress Progressable object or null for no progress tracking
2846 Creates a new output stream to the specified file with the given replication factor. @param f file path @param replication data replication factor (short)
2847 Creates a new output stream to the specified file with custom replication. @param f Path to the output file @param replication Replication factor for the output stream @param progress Progressable object for tracking write progress
2848 Creates an FSDataOutputStream for writing to a file. @param f the Path to the file @param overwrite whether to overwrite existing files @param bufferSize buffer size in bytes
2849 Creates an output stream to the specified file with custom replication and block size. @param f file path @param overwrite whether to overwrite existing file @param bufferSize I/O buffer size @param progress callback for reporting progress
2850 Initializes FSDataOutputStreamBuilder with a FileSystem and Path. @param fileSystem the underlying filesystem @param p the path to write to
2851 Reads a Writable object from the underlying stream. @param key the Writable object to read @return true if successful, false otherwise
2852 Fetches a serialized user key by ID, deserializing and validating its contents. @param key object containing the key to fetch @return deserialized key or null if not found
2853 Initializes an Invoker instance with the given protocol, connection ID, configuration, and factory. @param protocol class representing the remote protocol @param connId unique identifier for the client connection @param conf client configuration settings @param factory socket creation factory @param alignmentContext context for data alignment
2854 Retrieves client instance based on provided configuration. @param conf application configuration
2855 Retrieves client instance based on configuration and socket factory. @param conf application configuration @param factory socket creation utility
2856 Initializes Invoker instance with protocol, connection ID, and configuration. @param protocol the protocol class @param connId unique connection identifier @param conf client configuration @param factory socket factory for network operations @param alignmentContext context for alignment calculations
2857 Checks if a specific method is supported by the given RPC proxy. @param rpcProxy RPC proxy object @param protocol class containing the method's signature @param rpcKind kind of RPC request (e.g. synchronous) @param version protocol version @param methodName name of the method to check for support @return true if the method is supported, false otherwise
2858 Initializes Trash object with given file system and configuration. @param fs FileSystem instance @param conf Configuration object for setup
2859 Retrieves an instance of NetworkTopology based on configuration and factory type. @param conf Configuration object
2860 Initializes a new SASL RPC client instance. @param ugi UserGroupInformation for authentication @param protocol Class of the RPC protocol to use @param serverAddr Address of the RPC server @param conf Configuration parameters for the client
2861 Refreshes super user groups configuration based on proxy user prefix. @param conf Hadoop Configuration @param proxyUserPrefix Prefix for proxy users
2862 Adds a shutdown hook with specified priority. @param shutdownHook Runnable to be executed on shutdown @param priority hook execution order (lower values run first)
2863 Retrieves password string for given configuration and user name. @param conf Hadoop Configuration object @param name unique user identifier @return password string or null if not set
2864 Retrieves user password from configuration. @param conf Configuration object @param alias unique alias identifier @param defaultPass default password value (used if not found in config) @return Password string or default pass if retrieval fails
2865 Retrieves HBase ZooKeeper authentication information from the given configuration. @param conf HBase Configuration object @param configKey key to fetch auth info for, e.g. "hbase.zookeeper.quorum" @return List of ZKAuthInfo objects or empty list if not found; null on failure
2866 Initializes a DecayRpcScheduler instance with specified configuration. @param numLevels number of priority levels @param ns namespace identifier @param conf configuration object
2867 Creates a deep copy of the given writable object. @param orig original object to clone @param conf configuration for cloning @return cloned Writable object or null if creation fails
2868 Writes XML data to the specified output stream. @param out target output stream
2869 Selects the first valid SASL authentication type from the list. @param authTypes list of available SASL authentication types @return selected SASL authentication type or null if none found
2870 Initializes an FTP-based file system. @param theUri URI of the FTP server @param conf configuration for this file system
2871 Initializes a raw local file system with custom configuration. @param theUri URI for the file system @param conf configuration settings
2872 Initializes the object with configuration. @param name URI to initialize @param conf Configuration object for initialization
2873 Initializes MultipartUploaderBuilderImpl with a FileSystem and Path. @param fileSystem non-null file system instance @param p non-null path to initialize the builder with
2874 Initializes PathData object from file system, path string, and status. @param fs the file system @param pathString the path string @param stat the file status
2875 Checks if a path has a specified capability. @param path qualified file system path @param capability specific capability to check (e.g. BULK_DELETE, FS_SYMLINKS) @return true if the path supports the capability, false otherwise
2876 Returns the enclosing root directory of a given file or directory. @param path file system path to determine the root for @return Path object representing the root directory, or null if invalid
2877 Returns a qualified path with scheme swapped if necessary. @param path input Path object @return qualified Path or original if no swap required
2878 Resolves file status for a given path, handling symlinks if necessary. @param item PathData object containing file statistics @param depth current recursion depth (0 indicates root) @return FileStatus object or null if not found
2879 Constructs the full path by combining the root directory and input path. @param path input path to combine with root directory
2880 Copies a file from the source path to the destination path. @param src source file path @param dst destination file path
2881 Creates an FSDataInputStreamBuilder for the given filesystem and path. @param fileSystem the filesystem to operate on @param path the path to create a data input stream builder for
2882 Creates a builder for FSDataInputStream. @param fileSystem file system instance @param pathHandle path handle object
2883 Tries to load incomplete flush permissions from either old or new path. @param oldPath original file path @param newPath new file path (result of flush operation) @return FsPermission object or null if not found, otherwise initialized keystore with default perms
2884 Creates BZip2 compressor instance based on configuration.
2885 Retrieves a meta block by name from the index, creating a reader if found. @param name unique identifier of the meta block @return BlockReader object or throws exception if not found
2886 Retrieves a data block by index. @param blockIndex the index of the desired block @return BlockReader object for the specified block or throws exception if invalid
2887 Closes the data index, writing meta blocks and version information. @throws IOException if an I/O error occurs
2888 Prepares meta block with specified name and compression algorithm. @param name unique meta block identifier @param compressionName name of the compression algorithm to use
2889 Prepares meta block with default compression algorithm. @param name unique meta block identifier
2890 Initializes data block with a new BCF appender.
2891 Creates an output stream to write data to the specified file. @param f Path to the file
2892 Creates a log file by attempting to create it with incrementing suffixes until successful. @param initial the base path for the log file
2893 Creates or appends log file at specified path. If the file exists, attempts to append; otherwise, creates a new file and returns output stream. @param targetFile Path to create or append log file
2894 Saves an instance to a file system location. @param fs target file system @param path destination file path @param instance object to save @param overwrite whether to overwrite existing file (true) or not (false)
2895 Creates a new Writer instance with default compression and specified parameters. @param fs FileSystem object @param conf Configuration object @param name Path to write to @param keyClass Class of the key @param valClass Class of the value @param progress Progressable object for reporting progress @param metadata Metadata object
2896 Creates a new file at the specified path. @param f Path to the file @return true if created successfully, false if already exists
2897 Initializes a new FileSystemDataOutputStreamBuilder instance. @param fileSystem the underlying file system @param p the path to build an output stream for
2898 Advances to the next item in the sequence and populates the provided Writable. @param key the Writable to store the key @param val the Writable to store the value @return true if a next item exists, false otherwise
2899 Initializes Trash with given configuration. @param conf Hadoop Configuration object
2900 Creates a new instance of DomainNameResolver. @param conf configuration object @param uri the URI to resolve (host only used) @param configKey key for resolver configuration
2901 Returns singleton instance of Groups service. @param conf Hadoop configuration
2902 Initializes and returns user-to-groups mapping service with loaded configuration. @param conf loaded configuration for the service @return Groups service instance or null if initialization fails
2903 Refreshes super user groups configuration in Hadoop proxy user settings. @param conf Hadoop Configuration object
2904 Registers a file for deletion on JVM exit. @param f Path to the file to delete @return true if registration was successful, false otherwise
2905 Registers this instance as a shutdown hook with specified priority. @param priority priority of the shutdown hook
2906 Logs startup/shutdown messages and registers UNIX signal handlers. @param clazz application class @param args command line arguments @param log logger instance for logging messages
2907 Loads SSL configuration from properties. @throws IOException if any required property is missing
2908 Creates a ReloadingX509KeystoreManager from configuration properties. @param mode SSLFactory.Mode @param keystoreType type of keystore to use @param storesReloadInterval interval in milliseconds to reload the keystore (0 for no reload) @throws GeneralSecurityException if configuration is invalid @throws IOException on I/O errors
2909 Retrieves ZooKeeper authentication information from Hadoop Configuration. @param conf Hadoop configuration object @return List of ZKAuthInfo objects or null if not found
2910 Retrieves a list of group names associated with the specified user. @param user username or ID to fetch groups for @return list of group names, or an empty list if no groups found
2911 Writes configuration to output stream in XML format. @throws Exception if an error occurs during writing
2912 Initiates SASL negotiation and returns the selected authentication method. @param ipcStreams IPC streams to use for communication @return AuthMethod enum value representing the selected authentication method
2913 Initializes PathData using provided file system and path string. @param fs FileSystem instance @param pathString absolute path string
2914 Retrieves contents of a directory at the specified path. @return Array of PathData objects representing file/directory entries
2915 Ignores FileNotFoundException for a missing directory and logs the issue. @param fs FileSystem instance @param path Path to the missing directory @param e FileNotFoundException to be ignored or rethrown
2916 Checks if a path has a specific capability. @param path the path to check @param capability the capability to look for @return true if the path has the capability, false otherwise
2917 Checks if a path has a specific capability. @param path FS path to check @param capability desired capability @return true if the path has the capability, false otherwise
2918 Retrieves the enclosing root of a given file system and path. @param fs instance of FileSystem to operate on @param path location within the file system @return Path representing the enclosing root, or null if not found
2919 Opens a file at specified Path and returns a DataInputStreamBuilder. @param path location of the file to be opened
2920 Opens a file using the provided PathHandle. @param pathHandle unique identifier for the file to be opened @return FutureDataInputStreamBuilder instance or null if failed
2921 Locates and loads the keystore. @throws IOException if keystore cannot be loaded or created
2922 Initializes or updates the TFile index if not already loaded.
2923 Retrieves a meta block from the BCF reader by name. @param name name of the meta block @return DataInputStream representing the meta block or null if not found
2924 Initializes a Reader object from an FSDataInputStream and configuration. @param fin input stream to the file @param fileLength total length of the file in bytes @param conf configuration object
2925 Prepares a meta block for writing. @param name unique meta block identifier @param compressName compressed meta block name @return DataOutputStream object for writing the meta block
2926 Closes the TFile instance and writes out meta and index blocks. @throws IOException if an I/O error occurs
2927 Prepares a meta block with the given name. @param name unique identifier for the meta block @return DataOutputStream object to write the meta block, or null if already exists
2928 Prepares a new append key with the specified length. @param length key length in bytes @return DataOutputStream to write key data, or null on failure
2929 Recursively copies a file or directory from the source to the destination. @param src source file/directory @param dstFS target file system @param dst destination path @param deleteSource whether to delete the source after copying @param conf configuration object @return true if successful, false otherwise
2930 Completes an upload by merging parts and creating a final file. @param multipartUploadId unique upload identifier @return PathHandle object for the completed file
2931 Creates a new output stream for the specified file with custom permissions. @param fs FileSystem instance @param file Path to the file to be created @param permission Custom FsPermission settings @return FSDataOutputStream object
2932 Creates a Writer instance for the given file system and configuration. @param fs File system instance @param conf Configuration object @param name Path to the output file @param keyClass Class of the key data type @param valClass Class of the value data type
2933 Rolls the log directory by creating a new log file with current host name. @throws IOException if I/O error occurs during file system operation
2934 Advances to the next entry in the underlying data store. @param key the key to look up @param val the value to retrieve (not used by this method)
2935 Creates a proxy for the specified protocol. @param protocol target interface @return ProtocolProxy instance or throws IOException on failure
2936 Retrieves Groups service instance with default configuration. @return Groups service object
2937 Initializes configuration and sets up authentication, name rules, and metrics. @param conf Hadoop Configuration object @param overrideNameRules whether to override default name rules
2938 Initializes an empty Access Control List (ACL) instance.
2939 Initializes an AccessControlList from a string representation. @param aclString string containing ACL permissions and identifier
2940 Initializes an Access Control List with specified user and group names. @param users comma-separated list of usernames @param groups comma-separated list of group names
2941 Refreshes super user groups configuration from server-side settings.
2942 Initializes SSL configuration for the specified mode. @param mode SSLFactory.Mode (e.g. CLIENT, SERVER) @throws IOException, GeneralSecurityException if initialization fails
2943 Establishes a ZooKeeper connection with the specified ensemble and configuration. @param authInfos list of authentication information @param sslEnabled whether to enable SSL encryption
2944 Transform user groups by applying specified rule. @param user username to fetch groups for @return List of group names or empty list if none found
2945 Initializes the MetricsSystem instance with a specified prefix. @param prefix unique identifier for metrics
2946 Constructs a new PathData instance with the specified file system and path suffix. @param extension file name extension to append
2947 Retrieves child PathData with updated path information. @param child the child PathData to fetch @return updated PathData object or null if not found
2948 Recursively processes directory contents. @param item PathData object containing directory information
2949 Checks if a path has a specific capability. @param path Path object to check @param capability Capability name (e.g. FS_READ_ONLY_CONNECTOR) @return True if the path has the specified capability, false otherwise
2950 Checks if a given path supports a specific capability. @param path the file system path to check @param capability the capability to verify (e.g. FS_READ_ONLY_CONNECTOR) @return true if the path supports the capability, false otherwise
2951 Determines if a path has a specific capability. @param path the file system path to check @param capability the capability to verify (e.g. FS_APPEND) @return true if the path has the capability, false otherwise
2952 Lists file statuses for a given path across all MRNfly nodes. @param f the path to list statuses for @return array of FileStatus objects or throws IOException if not found
2953 Recursively copies a file system tree from source to destination. @param deleteSource whether to delete the source after copy @return true on success, false otherwise
2954 Recursively copies a file system subtree from source to destination. @param srcFS source file system @param srcStatus status of the source file or directory @param dst destination file @param deleteSource whether to delete the source after copying @return true if successful, false otherwise
2955 Opens a file with specified read policy. @param policy file open read policy
2956 Opens a file for sequential read access with specified buffer size. @param fs the Hadoop FileSystem instance @param file the Path to the file @param bufferSize the buffer size in bytes @param length the file length (optional) @return an FSDataInputStream object or null if not found
2957 Loads JSON data from a specified path in the file system. @param fs FileSystem instance @param path Path to load JSON data from @param status Optional FileStatus object (null if unknown) @return loaded T object or throws IOException/PathIOException
2958 Retrieves the first key from the TFile index. @throws IOException if an I/O error occurs
2959 Retrieves the last key from the TFile index. @throws IOException if an I/O error occurs
2960 Locates the block containing a given key. @param key RawComparable value to search for @param greater whether to find the smallest or largest matching block @return Location of the containing block or end if not found
2961 Retrieves a key near the specified offset. @param offset position to search for a nearby key @return RawComparable key object or null if not found
2962 Initializes Reader with FSDataInputStream, file length, and configuration. @param fsdis input stream to read from @param fileLength total size of the file @param conf Hadoop configuration object
2963 Initializes block processing by closing previous block and fetching new one. @param blockIndex index of the block to process
2964 Appends key-value pair to storage. @param key byte array containing key data @param koff offset into key buffer @param klen length of key data @param value byte array containing value data @param voff offset into value buffer @param vlen length of value data
2965 Returns the middle key from the current set of keys. @return WritableComparable object representing the mid-key or null for empty sets
2966 Scans data to final key, seeking to last indexed entry if available. @param key WritableComparable key object
2967 Performs a seek operation to find the given WritableComparable key. @param key the key to search for @param before whether to search for keys before or at the given key @return an integer indicating the position of the key, or 1 if not found
2968 Merges input streams by key, writing to output stream. @throws IOException if merge process fails
2969 Creates a proxy instance for the specified protocol and client version. @param protocol target protocol class @param clientVersion client version identifier @param addr server address @param ticket user authentication information @param conf configuration settings @param factory socket creation factory @param rpcTimeout RPC timeout setting @param connectionRetryPolicy retry policy for connections
2970 Returns a ProtocolProxy instance for the specified protocol and client version. @param protocol the protocol class @param clientVersion the client version @param connId connection identifier @param conf configuration object @param factory socket factory @param alignmentContext alignment context
2971 Returns the current trash directory path.
2972 Retrieves the current trash directory based on the provided file system path. @param path the file system path to determine the trash directory for
2973 Ensures the user group information is initialized. @throws no return value, but initializes on first call
2974 Sets configuration using provided Configuration object. @param conf Configuration settings to apply.
2975 Launches a service with the given configuration and parameters. @param conf Configuration object @param instance Service instance @param processedArgs Processed arguments list @param addShutdownHook Flag to add shutdown hook @param execute Flag to execute the service @return ExitException object containing launch result
2976 Starts authentication process with given AuthInfo list. @param authInfos collection of authentication information
2977 Initializes local file system with given configuration and URI. @param theUri URI of the local file system @param conf Configuration object for the file system
2978 Copies a stream to the specified target location. @param in InputStream to copy from @param target PathData representing the target location
2979 Copies a file from source to destination HDFS. @param srcFS source filesystem @param src source path @param dstFS destination filesystem @param dst destination path @param deleteSource whether to delete the source after copy @param overwrite whether to overwrite existing destination @param conf configuration object @return true if successful, false otherwise
2980 Repairs and opens the MRNfly node array by ID. @param mrNodes array of MRNfly nodes @param f file path @return FSDataInputStream or null if not found
2981 Copies a file from source to destination with optional deletion of the source. @param srcFS source filesystem @param src source path @param dst destination file @param deleteSource whether to delete the source after copy @param conf configuration object @return true if copy is successful, false otherwise
2982 Opens file for sequential I/O access. @throws IOException if file cannot be opened
2983 Loads data from the specified file system location. @param fs FileSystem instance @param path File system path to load data from
2984 Retrieves record number near specified offset. @param offset offset from which to find nearest location
2985 Retrieves record number based on current file location. @throws IOException if an I/O error occurs
2986 Initializes a Scanner object with the specified reader and location bounds. @param reader input data reader @param begin start position of scan range @param end end position of scan range
2987 Seeks to a specified location, throwing exceptions for out-of-bounds seeks. @param l the target Location
2988 Advances to the next record or block, returning false if at end.
2989 Appends a key-value pair to storage. @param key unique identifier @param value associated data
2990 Seeks to a specific record in the underlying storage. @param key WritableComparable object representing the desired record
2991 Retrieves closest key to query, with optional directionality. @param key target key @param val output value @param before true for keys before query, false otherwise @return nearest WritableComparable or null if not found
2992 Creates a UserGroupInformation object for testing purposes. @param user short username @param userGroups array of user group names to add @return UserGroupInformation object or null if initialization fails
2993 Creates a proxy user for testing purposes. @param user short username of the proxy user @param realUser actual UserGroupInformation instance @param userGroups array of groups to add to the proxy user @return created UserGroupInformation object
2994 Retrieves a list of groups associated with the user. @return List of group names or empty list if failed
2995 Retrieves the set of user groups. @return non-empty set of group names or empty set if failed
2996 Authenticates a user and returns UserGroupInformation. @param subject Subject to authenticate, or null for default login @param params Login parameters, or null for default login @return UserGroupInformation object, or throws KerberosAuthException on failure
2997 Refreshes Service A's ACL with loaded configuration. @param conf loaded configuration object @param provider policy provider instance
2998 Authorizes user access based on IP address. @param user UserGroupInformation object @param remoteAddress client's network address
2999 Authorizes user access by delegating to SIP service. @param user UserGroupInformation object @param remoteAddress IP address of remote client
3000 Wraps existing service launch functionality. @param conf configuration object @return ExitUtil.ExitException object or null if successful
3001 Initiates the process by starting with an empty list of tasks.
3002 Copies a file from the source to the target location. @param src PathData containing source file information @param target PathData containing target directory information
3003 Copies a file from source to destination, with optional deletion of the source. @param srcFS source file system @param src source path @param dstFS destination file system @param dst destination path @param deleteSource whether to delete the source after copy @param conf configuration object
3004 Opens file from a set of MRNflyNodes, handling repair and readMostRecent flags. @param f Path to the file @return FSDataInputStream or null if not found after repair
3005 Creates a scanner instance to read from this input stream between specified positions. @throws IOException if an I/O error occurs
3006 Creates a scanner for the specified record range. @param beginRecNum starting record number (defaulted to 0 if < 0) @param endRecNum ending record number (clamped to entry count if out of range) @return Scanner object or throws IOException on failure
3007 Constructs a new Scanner from a Reader with specified offset range. @param reader input Reader to read from @param offBegin offset to begin scanning at @param offEnd offset to end scanning at
3008 Rewinds the stream to its beginning location. @throws IOException if an I/O error occurs during seeking
3009 Seeks to the specified record in the underlying storage. @param key WritableComparable object representing the record to seek @return true if the record was found, false otherwise
3010 Retrieves closest matching value based on given key and comparison criteria. @param key The data to compare against @param val The value to find the closest match for
3011 Checks if security is enabled by verifying no simple authentication method. @return true if security is disabled, false otherwise
3012 Logs out user from Kerberos login context. @throws IOException on authentication failure
3013 Returns an array of group names. @return array of group identifiers
3014 Checks if user is in allowed list based on username or group membership. @param ugi UserGroupInformation object to check @return true if user is in the list, false otherwise
3015 Retrieves UserGroupInformation from a Subject instance, throwing exceptions if the Subject is null or does not contain a KerberosPrincipal. @param subject the Subject instance to extract UGI from @throws IOException on authentication error
3016 Wraps authorization logic with deprecated alias. @param user UserGroupInformation object @param remoteAddress client IP address @param conf Hadoop configuration
3017 Authorizes RPC connections based on user authentication. @throws RpcServerException if authorization fails
3018 Processes source path to target path. @param src source file or directory data @param dst target file or directory data @throws IOException on processing error
3019 Copies file from source to destination, optionally deleting the original. @param delSrc whether to delete the source file @param src source file path @param dst destination file path
3020 Copies a file from the specified source to the local destination. @param delSrc whether to delete source after copy @param src source file path @param dst local destination file path
3021 Creates a new scanner instance with specified byte range. @param offset starting position in bytes @param length number of bytes to scan @return Scanner object or null on error
3022 Initializes a Scanner from a Reader with specified key boundaries. @param reader input source @param beginKey starting key for block @param endKey ending key for block
3023 Seeks to a specific byte range within the underlying data store. @param key byte array containing the key @param keyOffset offset of the key in bytes @param keyLen length of the key in bytes @return true if successful, false otherwise
3024 Seeks to the specified byte range in the underlying data source. @param key Byte array representing the target range @param keyOffset offset within the byte array @param keyLen length of the byte array range
3025 Seeks to the upper bound of a byte array in the underlying data structure. @param key the byte array to search for @param keyOffset starting offset within the byte array @param keyLen length of the byte array
3026 Retrieves a value from the underlying store by seeking to the given key. @param key unique key identifier @param val output parameter for the retrieved value @return the fetched Writable object or null if seek fails
3027 Retrieves a ProtocolProxy instance for the specified protocol. @param protocol Class of the target protocol @param clientVersion Client version to use @param connId Connection ID @param conf Configuration object @param factory Socket factory @param alignmentContext Alignment context @return ProtocolProxy instance or throws IOException if failed
3028 Retrieves a protocol proxy instance with specified configuration. @param protocol Class of the protocol to use @param clientVersion Client version for RPC communication @return ProtocolProxy object or throws IOException if failure occurs
3029 Retrieves a protocol proxy for the specified protocol and parameters. @param protocol target protocol class @param clientVersion client version information @param addr server address details @param ticket user authentication token @param conf configuration settings @param factory socket creation factory @param rpcTimeout RPC request timeout value @param connectionRetryPolicy retry policy for failed connections @param fallbackToSimpleAuth flag to enable simple auth fallback @return ProtocolProxy object or null on failure
3030 Opens a secure RandomAccessFile for random read access. @param f the file to open @param mode the mode to use (e.g. "r") @param expectedOwner the expected owner of the file @param expectedGroup the expected group of the file @return an open RandomAccessFile or null if not secure
3031 Opens FSDataInputStream for a file with secure access checks. @param file File to open @param expectedOwner Expected owner of the file @param expectedGroup Expected group of the file @return FSDataInputStream object or null on failure
3032 Opens a FileInputStream for reading with security checks. @param f the file to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FileInputStream object or null if access denied
3033 Dumps user group information, including credentials and tokens. @param ugi UserGroupInformation instance to dump
3034 Retrieves the current logged-in user's information. @return UserGroupInformation object representing the login user, or null if not found
3035 Logs in user from provided Subject instance. @param subject authentication data for the user to log in.
3036 Processes the RPC connection context, authenticates and authorizes the user. @param buffer RpcWritable.Buffer object containing the connection context
3037 Creates a scanner instance for the given key range. @param beginKey start key of the range @param endKey end key of the range @return Scanner object or null if invalid range
3038 Seeks to specified byte range in underlying storage. @param key byte array containing key to seek to
3039 Finds the lower bound of a binary search tree using the given byte array as a key. @param key byte array representing the key to find
3040 Finds the upper bound of a byte array in an index. @param key the byte array to search
3041 Retrieves the WritableComparable object associated with the given key. @param key unique key to search for @return matching WritableComparable object or null if not found
3042 Optimized fetch of Writable value associated with the given key. @param key unique identifier @param val ignored (only used for consistency with superclass) @return Writable value or null if not found
3043 Retrieves a ProtocolProxy instance for the specified protocol and client version. @param protocol Class of the protocol to proxy @param clientVersion Client version number @param connId Unique connection identifier @param conf Configuration object @param factory Socket factory used for creation
3044 Creates a protocol proxy instance with default parameters. @param protocol Class of the protocol to create a proxy for
3045 Establishes and configures IPC connection with server. @param fallbackToSimpleAuth indicates whether to fall back to simple auth
3046 Opens a file for random read access with security checks. @param f the file to open @param mode the file access mode @param expectedOwner the expected owner of the file @param expectedGroup the expected group of the file @return RandomAccessFile object or null if not secure
3047 Opens an FSDataInputStream for the specified file with security checks. @param file File to open @param expectedOwner Expected owner of the file (for security) @param expectedGroup Expected group of the file (for security) @return FSDataInputStream or null if not secure
3048 Opens a file for reading with security checks enabled. @param f the file to open @param expectedOwner expected owner of the file (HDFS) @param expectedGroup expected group of the file (HDFS) @return FileInputStream object or null if not found
3049 Checks if a user has administrator access. @param servletContext web application context @param remoteUser username of the user to check @return true if the user is an admin, false otherwise
3050 Authorizes a user to access a service using the specified protocol. @param user UserGroupInformation object @param protocol Class of the service protocol @param conf Configuration object (Kerberos principal key) @param addr InetAddress of the host (optional)
3051 Retrieves the current user's identity. @return UserGroupInformation object representing the current user or a default user if none found
3052 Checks if login is based on a keytab. @return true if user logged in from a keytab, false otherwise
3053 Checks if login is ticket-based. @return true if login is from a ticket, false otherwise
3054 Executes the specified action as the current login user or exits fatally if security is enabled. @param action PrivilegedAction to be executed @return Result of the action, or null/exception if fatal exit occurred
3055 Executes an action as the current login user. @param action Privileged exception action to perform @return Result of the action, or null if not applicable
3056 Cedes active resources after a specified time period. @param millisToCede time in milliseconds to wait before ceding
3057 Initiates a graceful failover to the current user. Throws an exception if interrupted or service fails.
3058 Creates a scanner for the specified key range. @param beginKey starting byte array key @param endKey ending byte array key @return Scanner object or throws IOException on error
3059 Creates a new Scanner instance by key range. @param beginKey starting key for scanning @param endKey ending key for scanning
3060 Retrieves a protocol proxy object based on the provided parameters. @param protocol class of the protocol to be proxied @param clientVersion client version for configuration @param addr address of the service endpoint @param ticket user identity for authentication @param conf configuration settings for the connection @param factory socket creation factory
3061 Retrieves a proxy instance for the specified protocol. @param protocol Class of the protocol @param clientVersion Client version @param addr Server address @param ticket User authentication information @param conf Configuration settings @param factory Socket creation factory @param rpcTimeout RPC timeout value @return Proxy instance or null if failed
3062 Checks if a user has administrator access, considering security authorization and ACLs. @param servletContext application context @param request HTTP request @param response HTTP response @return true if user has admin access, false otherwise
3063 Authorizes user access based on protocol and address. @param user UserGroupInformation object @param protocolName name of the protocol to authorize against @param addr InetAddress of the host being accessed
3064 Retrieves the user's home directory as a Path object. @return Home directory path or null on failure
3065 Verifies access permissions for a file based on user/group ownership and FsAction mode. @param stat FileStatus object containing file metadata @param mode FsAction enum value representing desired access rights @throws AccessControlException if permission is denied
3066 Initializes the ViewFileSystem instance with current user and creation time.
3067 Initializes a ViewFs object from the given URI and configuration. @param theUri unique identifier of the view file system @param conf configuration parameters for the view file system
3068 Initializes ViewFS with the given configuration and URI. @param config Configuration object @param viewName Name of the mount table (or null to use default) @param uri The URI for which this ViewFS is being initialized @param initingUriAsFallbackOnNoMounts Whether to treat an empty mount table as a fallback link if no mounts are found
3069 Returns the home directory path for the current user. @return Path object representing the user's home directory
3070 Opens a URL connection with optional authentication and delegation token. @param url The URL to connect to @param token Optional authentication token @param doAs Proxy user ID (null for no proxy) @return HttpURLConnection object or null on failure
3071 Determines the best UGI based on ticket cache path and user. @param ticketCachePath path to ticket cache or null @param user username or null
3072 Logs in a user from keytab and returns the UGI. @param user principal name @param path keytab file path
3073 Logs all user information to the specified logger. @param log target logger @param ugi UserGroupInformation object containing user details
3074 Executes privileged operation as current user. @param action Privileged action to execute @return result of the action or null if failed
3075 Retrieves the short username of the proxy user. @return short username or null if not a proxy user
3076 Waits for a ProtocolProxy to become available, retrying on connection issues. @param protocol Class of the protocol @return ProtocolProxy instance or throws IOException if timed out
3077 Creates a new scanner instance using custom key range. @param beginKey beginning key bytes @param endKey ending key bytes @return Scanner object or null if creation fails
3078 Creates a protocol proxy instance for the given protocol class. @param protocol Class of the protocol to create a proxy for @param clientVersion Client version number @param addr Server address @param conf Configuration object @param factory Socket factory @return ProtocolProxy instance or throws IOException if creation fails
3079 Retrieves a proxy object for the specified protocol. @param protocol class of the protocol to fetch a proxy for @param clientVersion version of the client @param addr server address @param ticket user authentication information @param conf configuration settings @param factory socket creation factory @return T proxy object or null if not found
3080 Checks if instrumentation access is allowed based on admin privileges. @param servletContext Servlet context @param request HTTP request @param response HTTP response @return true if access is allowed, false otherwise
3081 Returns root directory of user's trash. @param path user-specific directory path
3082 Retrieves trash root directories for a user or all users. @param allUsers true to include system-wide trash, false for user-specific @return Collection of FileStatus objects representing trash roots
3083 Checks file access permissions. @param path HDFS file path @param mode requested filesystem action (read/write/delete)
3084 Checks file system permissions for the given path and action. @param path file system path @param mode access mode (e.g. read, write)
3085 Initializes ViewFileSystem with given URI and configuration. @param theUri file system URI @param conf configuration settings for file system view
3086 Retrieves a unique file system based on the provided URI and configuration. @param uri unique identifier of the file system @param conf Hadoop configuration object @return FileSystem object or null if not found
3087 Returns the home directory of the default file system.
3088 Opens a connection to the specified URL with authentication. @param url URL to connect to @param token authenticated token for authorization
3089 Retrieves a Hadoop FileSystem instance using the provided URI and configuration. @param uri file system URI @param conf Hadoop configuration object @param user current user identity @return Hadoop FileSystem instance or null on failure
3090 Creates a new Hadoop File System instance using the provided configuration. @param uri file system URI @param conf Hadoop configuration object @param user current user name @return FileSystem object or throws an exception if creation fails
3091 Retrieves UGI from ticket cache if Kerberos is enabled; otherwise, falls back to getBestUGI with null credentials. @param ticketCache ticket cache string @param user username @return UserGroupInformation object or null on failure
3092 Attempts login using a keytab file and principal. @throws IOException if an I/O error occurs
3093 Logs in user from a keytab file. @param user username @param path keytab file path
3094 Logs all user information to the specified log. @param ugi UserGroupInformation object containing user credentials and group membership
3095 Waits for a ProtocolProxy instance with specified protocol and client version. @param protocol target protocol class @param clientVersion expected client version @param addr server address to connect to @param conf configuration options @param connTimeout connection timeout in milliseconds
3096 Retrieves a proxy instance for the specified protocol. @param protocol Class of the protocol to fetch @param clientVersion Client version associated with this proxy @param addr Address to connect to @param conf Configuration settings for this proxy @param rpcTimeout RPC timeout value @param timeout overall timeout value @return Proxy instance or null on failure
3097 Retrieves a proxy object for the specified protocol. @param protocol Class of the protocol to use @param clientVersion Client version identifier @param addr Socket address to connect to @param conf Configuration settings @param factory Socket factory to create connections @return Proxy object or throws IOException if creation fails.
3098 Retrieves a proxy for the specified network protocol. @param protocol Class of the protocol to fetch a proxy for @param clientVersion Client version number @param addr Network address to connect to @param conf Configuration object for the connection
3099 Retrieves the protocol instance for user group mappings.
3100 Retrieves a ZooKeeper FC proxy instance. @param timeoutMs connection timeout in milliseconds @return ZKFCProtocol object or throws IOException on failure
3101 Resolves the trash root path for a given file system and user. @param path input file system path
3102 Retrieves all trash roots from target file systems and view file system. @param allUsers whether to include user-specific trash or not @return a collection of FileStatus objects representing trash roots
3103 Constructs a ViewFileSystem instance. @param conf Hadoop configuration object
3104 Adds a file system to test cache. @param uri URI of the file system @param conf configuration for the file system @param fs file system object to be cached
3105 Creates a new FileSystem instance based on the provided URI and configuration. @param uri file system URI (e.g., "hdfs://...") @param config configuration object @return new FileSystem instance or null if not found
3106 Creates and returns a FileContext instance from the given file system and configuration. @param defFS default file system to use @param aConf configuration settings for the context
3107 Opens an HTTP connection to the specified URL with the provided authentication token. @param url target URL @param token authenticated token for authorization
3108 Performs Hadoop Kerberos diagnostics, including checking configuration options and authentication setup. @throws Exception if any diagnostic fails
3109 Parses command line arguments for login from keytab and principal, performing Kerberos login if both are provided. @param args command line arguments @return parsed argument list or original list if no login performed
3110 Demonstrates user authentication and grouping using UserGroupInformation. Prints current UGI details, then authenticates from keytab if provided command-line args. @param [0] Keytab file path @param [1] Username
3111 Logs in a user using the provided keytab file and username. @param conf Hadoop configuration @param keytabFileKey Key for keytab file location @param userNameKey Key for principal name (or system property 'user.name') @throws IOException if login fails
3112 Initializes a Server instance with specified configuration. @param bindAddress server address @param port server port @param rpcRequestClass RPC request class @param handlerCount number of handlers @param numReaders number of readers or -1 for default @param queueSizePerHandler queue size per handler or -1 for default @param conf configuration object @param serverName server name @param secretManager secret manager @param portRangeConfig port range configuration
3113 Builds SASL negotiate response with optional token challenge. @return RpcSaslProto object
3114 Waits for a protocol proxy instance with specified configuration. @param protocol Class of the protocol to wait for @param clientVersion Expected client version @param addr Address to connect to @param conf Configuration options
3115 Waits for a proxy to become available and returns it. @param protocol the protocol class @param clientVersion the client version @param addr the server address @param conf the configuration @param connTimeout connection timeout in milliseconds @return T an instance of the desired type, or throws IOException if not found
3116 Adds a new resource to the system. @param in input stream containing resource data @param name unique identifier for the resource
3117 Retrieves a proxy object for the specified protocol and address. @param protocol Class of the protocol to fetch proxy for @param clientVersion Client version number @param addr Address to connect to @param conf Configuration settings @return Proxy object or null if failed
3118 Prints user/group membership information. @param args array of usernames to display
3119 Performs graceful failover through ZooKeeper Federation Controllers. @param toNode HAServiceTarget node to fail over to @return 0 on success, -1 on failure
3120 Requests remote HA service target to cede its active state. @param remote HAServiceTarget instance @param timeout time in milliseconds for the ceding operation @return ZKFCProtocol proxy or null if failed
3121 Handles GET requests for MBean attributes. @param request HTTP request object @param response HTTP response object
3122 Resolves a URI to a FileSystem instance, using caching and fallbacks. @param uri input URI @param conf Configuration object @return FileSystem instance or null if not found
3123 Creates a new instance of LocalFileSystem. @param conf Configuration object
3124 Creates a new Hadoop file system instance. @param uri URI of the file system @param conf Hadoop configuration
3125 Returns a FileContext instance based on the provided default file system. @param defaultFS the default file system to use
3126 Retrieves FileContext based on default file system URI and configuration. @param defaultFsUri default file system URI @param aConf Hadoop Configuration object @return FileContext instance or throws UnsupportedFileSystemException if not found
3127 Initializes application based on command-line arguments. @param args array of string arguments
3128 Logs in to Hadoop cluster using Kerberos credentials. @param conf Hadoop configuration @param keytabFileKey Keytab file key @param userNameKey User name key
3129 Processes SASL message and returns response. @param saslMessage SASL protocol message @return SASL protocol response or null if no response needed
3130 Returns a proxy object for the specified protocol and address. @param protocol class of the desired protocol @param clientVersion version of the client to use @param addr server address to connect to @param conf configuration settings for the connection @return Proxy object or throws IOException on failure
3131 Adds a new resource with the specified name. @param name unique resource identifier
3132 Adds a resource by URL. @param url unique resource identifier
3133 Adds a resource to the collection by creating a new Resource object from the provided file path. @param file Path to the file representing the resource
3134 Adds resource to system from input stream. @param in InputStream containing resource data
3135 Performs a graceful failover by yielding the current active node and waiting for the local node to become active.
3136 Creates an HA service proxy instance. @return HAServiceProtocol object
3137 Returns a health monitor proxy instance with default priority. @param conf Configuration object @param timeoutMs Timeout value in milliseconds
3138 Retrieves HAServiceProtocol instance using configuration and timeout. @param conf Configuration object @param timeoutMs connection timeout in milliseconds @return HAServiceProtocol instance or null if failed
3139 Initializes the Har Filesystem with the given URI and configuration. @param name URI of the Har Filesystem @param conf Hadoop Configuration object @throws IOException if an error occurs during initialization
3140 Moves a file to its appropriate trash location. @param fs the FileSystem instance @param p the Path of the file to move @param conf the Configuration object @return true if the file was moved successfully, false otherwise
3141 Constructs a PathData object from a string representation of a file system path. @param pathString string representation of the file system path @param conf Hadoop Configuration instance used to resolve URI and other settings
3142 Retrieves a named file system based on the provided configuration. @param name unique identifier for the file system @param conf Configuration object for file system settings
3143 Retrieves a local file system instance from configuration. @param conf Hadoop Configuration object
3144 Creates a new instance of ChRootedFileSystem from the given URI and configuration. @param uri file system URI @param conf Hadoop configuration
3145 Creates and returns a file system object based on provided URI and configuration. @param uri unique identifier of the file system @param conf configuration parameters for the file system
3146 Resolves file system instance for a given URI. @param uri URI to resolve @param conf Configuration object @return Filesystem instance or null if not found
3147 Retrieves a file system instance based on the provided configuration. @param conf Configuration object used to initialize the file system
3148 Retrieves a FileSystem instance, either from the suppliedFilesystem or by creating one from the base path URI and configuration. @throws MetricsException if file system creation fails.
3149 Lists file statuses for the given path, considering internal directories and fallback links. @param f the input path @return an array of FileStatus objects
3150 Retrieves FileContext instance based on provided default file system URI. @param defaultFsUri URI of the default file system
3151 Retrieves FileContext based on configuration. @param aConf Configuration object @throws UnsupportedFileSystemException if default file system URI is invalid
3152 Retrieves local file system context from configuration. @param aConf application configuration
3153 Initializes a Server instance with specified configuration and protocol. @param protocolClass class of the protocol to use @param protocolImpl implementation of the protocol
3154 Initializes a server with the specified configuration and protocol. @param protocolClass target protocol class @param protocolImpl protocol implementation object @throws IOException if initialization fails
3155 Processes a SASL message and establishes the authentication context. @param saslMessage the incoming SASL message
3156 Loads the latest mount table configuration from a specified path and adds it to the provided Configuration object. @param mountTableConfigPath path to the mount table configuration @param conf target Configuration object
3157 Checks if target node is already active. @param targetNodeToActivate identifier of target node to check @param forceActive whether to force activation even on error @return true if node is active, false otherwise
3158 Performs pre-failover checks on a HAServiceTarget. @param from current service target @param target target to fail over to @param forceActive whether to force the failover even if not ready
3159 Attempts a graceful service transition by making the target standby. @param svc HAServiceTarget instance @return true on success, false otherwise
3160 Resolves a symbolic link to its target. @param filesys the file system containing the path @param path the path to resolve @return the resolved object or null if not found
3161 Constructs a new PathData object from a local file path and Hadoop configuration. @param localPath local URI of the file @param conf Hadoop configuration used for file system operations
3162 Copies files from local sources to a destination. @param delSrc true to delete source file after copying @param overwrite true to overwrite existing destination @param srcs array of source file paths @param dst destination file path
3163 Copies data from a local file to another location. @param delSrc whether to delete the source file @param overwrite whether to overwrite existing destination file @param src source file path @param dst destination file path
3164 Copies a file from a Hadoop filesystem to a local file system. @param delSrc whether to delete the source file @param src HDFS file path @param dst local file system destination @param useRawLocalFileSystem true for raw local FS, false for cached FS
3165 Updates context with new local directories configuration. @param conf Configuration object containing new directory settings @return updated Context object or throws IOException if config is invalid
3166 Tries each local directory to find a valid path. @param dirsProp comma-separated list of local directories @param path file or directory path to resolve @return Path object if found, null otherwise (not thrown) @throws IOException if no valid dir is found
3167 Resolves file system for a given path and configuration. @param path Path to resolve @param conf Configuration object @return Raw FileSystem object, or throws exception if not found
3168 Resolves mount path info by URI or file system for a given path. @param path path to resolve @param conf configuration @return MountPathInfo object containing resolved path and file system, or null if not found
3169 Expands a glob pattern into an array of PathData objects. @param pattern the glob pattern to expand @param conf Hadoop configuration object @return array of PathData objects or null if not found
3170 Dumps information about a TFile. @param file the path to the TFile @param out where to print the output @param conf Hadoop configuration
3171 Reads Credentials from a file specified by the given filename and configuration. @param filename Path to the token storage file @param conf Configuration object @return Credentials object or throws IOException if an error occurs
3172 Retrieves a list of URLs for library JARs from the configuration. @param conf Hadoop Configuration object @return Array of URLs or null if no JARs are specified
3173 Initializes the file system and creates the base directory. @return true if initialization is successful, false otherwise
3174 Retrieves local file system context. @return FileContext object representing the local file system
3175 Retrieves a FileContext instance based on default configuration. @throws UnsupportedFileSystemException if file system is not supported
3176 Initializes a Server instance with specified configuration and parameters. @param protocolClass protocol implementation class @throws IOException if initialization fails
3177 Legacy constructor for Server instance. @param protocolClass protocol implementation class @throws IOException on initialization error
3178 Initializes SSLFactory with mode and configuration. @param mode encryption mode @param conf TLS configuration settings
3179 Refreshes Service ACL (Access Control List) using provided Configuration and PolicyProvider. @param conf configuration object @param provider policy provider instance
3180 Initiates a failover from one HA service target to another. @param fromSvc the original active service target @param toSvc the target service to become active @param forceFence whether to fence the original service immediately @param forceActive whether to make the new service active even if fencing fails
3181 Initializes local destination from command-line arguments. @param args list of path components (e.g., "dir1/dir2/file.txt")
3182 Copies files from local file system to specified destination. @param srcs array of source file paths @param dst destination directory path
3183 Copies files from local file system to Hadoop FS. @param delSrc whether to delete source files @param overwrite whether to overwrite existing target files @param srcs array of local file paths to copy @param dst destination path on Hadoop FS
3184 Copies file from local source to destination. @param delSrc whether to delete the source file @param overwrite whether to overwrite existing destination file @param src source file path @param dst destination file path
3185 Copies a local file to a Hadoop FS location. @param delSrc whether to delete the source file @param overwrite whether to overwrite the destination file if it exists @param src path of the local file to copy from @param dst path where the file will be copied to
3186 Copies file from source to destination with optional deletion of source. @param delSrc whether to delete the source after copying @param src source file path @param dst destination file path
3187 Fetches a local write path for the given string path and size. @param pathStr user-provided file path @param size requested file size @param conf Hadoop configuration object @param checkWrite whether to perform write checks on the destination @return Path object representing the valid local directory or null if not found
3188 Resolves local file system path by searching through configured directories. @param pathStr relative file path to resolve @param conf Hadoop configuration with local directory paths @return Path object if found, or throws DiskErrorException otherwise
3189 Retrieves all local paths to read from the specified directory. @param pathStr directory path string @param conf configuration object @return iterable of local file system paths or empty if not found
3190 Initializes NflyFSystem with the given URIs, configuration, and replication settings. @param uris array of destination URIs @param conf Hadoop Configuration object @param minReplication minimum number of replicas required @param nflyFlags set of Nfly keys @param fsGetter FsGetter instance (optional)
3191 Runs all specified source files as glob patterns. @return non-zero exit code if any errors occur
3192 Expands an argument into a list of PathData objects. @param arg input string to expand as glob or literal path
3193 Resolves remote destination path from provided arguments. @param args list of strings containing path or glob pattern
3194 Constructs a Reader instance from a FileSystem and Path. @param fs underlying filesystem @param file input path to read from @param conf configuration for the reader
3195 Constructs a Reader object from FSDataInputStream. @param in input stream to read from @param buffersize buffer size for reading @param start starting position for reading @param length desired length of data to read @param conf configuration settings
3196 Creates a SequenceFile reader for the specified data file. @param dataFile Path to the data file @param conf Hadoop configuration @return SequenceFile reader or null on error
3197 Retrieves the next raw key from input. @return true if a valid key was found, false otherwise
3198 Constructs a SequenceFile Writer with specified options. @param conf Hadoop Configuration object @param opts Hadoop Options array
3199 Dumps information from one or more TFiles and prints to console. @param args array of TFile paths to dump
3200 Writes user credentials to a file in the specified format. @param f File to write to @param format Format string (e.g. "protobuf") @param creds Credentials object @param conf Configuration object
3201 Rolls log directory if necessary, based on system clock and file flushing criteria. @throws MetricsException if rolling log directory fails
3202 Retrieves a list of JAR files in the specified directory. @param path directory path to search, may include wildcard (*) @param useLocal whether to use local file system context @return List of Path objects representing found JAR files or an empty list if none were found
3203 Initializes a Server instance with the given protocol class and implementation. @param protocolClass protocol class to use @param protocolImpl protocol implementation object @param conf server configuration @param bindAddress address to bind to @param port port number
3204 Legacy constructor for Server instance. @param secretManager SecretManager instance
3205 Processes an RPC request header and executes the corresponding action. @param header RpcRequestHeaderProto object @param buffer RpcWritable.Buffer containing request data
3206 Establishes an authenticated HTTP/HTTPS connection to the specified URL. @param url target URL @return configured URLConnection object or throws Exception if failed
3207 Copies data from local file at 'src' to 'dst'.
3208 Copies file from local source to destination. @param src source file path @param dst destination file path
3209 Copies file from local source to destination on distributed file system. @param delSrc whether to delete original file @param src path of source file @param dst path of destination file
3210 Copies file from source to destination on local file system. @param src source file path @param dst destination file path
3211 Copies file from source to destination on local file system. @param src source file path @param dst destination file path
3212 Copies file from source to destination location. @param delSrc true to delete original file after copying @param src source file path @param dst destination file path
3213 Retrieves a local write path for the given file. @param pathStr file path string @param size file size in bytes @param conf configuration object @param checkWrite flag to check write permissions (true) or not (false)
3214 Creates a temporary write-enabled file with specified size. @param pathStr base path for the file @param size desired file size @param conf Hadoop configuration object @return File object representing the temporary file
3215 Returns a local file path to read from based on the provided input string and configuration. @param pathStr input string representing the path @param conf Hadoop Configuration object
3216 Retrieves all local paths to read based on the provided path string and configuration. @param pathStr string representing the path @param conf Hadoop Configuration object @return Iterable of Path objects or null if not found
3217 Constructs an instance of NflyFSystem from given URIs and configuration. @param uris array of file system URIs @param conf Hadoop Configuration object @param minReplication minimum replication factor for the file system
3218 Creates a file system instance with specified settings. @param uris array of URIs @param conf configuration object @param settings string containing key-value pairs for Nfly settings @param fsGetter FsGetter object @return newly created FileSystem object or null on failure
3219 Expands a list of command-line arguments into PathData objects. @param args list of string arguments to expand @return linked list of expanded PathData objects or null if expansion fails
3220 Fetches and stores tokens for a given service using DtFetcher implementations. @param tokenFile target file to store tokens @param fileFormat format of the stored tokens (e.g. JSON) @param alias optional alias for the service @param service service designation @param url URL associated with the service @param renewer token renewal information @param conf configuration object
3221 Creates and writes an alias for a service in the given token file. @param tokenFile file to store token credentials @param fileFormat format of the output file (e.g. JSON) @param alias new service name for aliasing @param service original service name being aliased @param conf configuration settings for writing the file
3222 Merges multiple token files into a single Credentials object and writes it to disk. @param tokenFiles list of token storage files to merge @param fileFormat output file format (e.g. HDFS, local file system) @param conf Hadoop Configuration object for storage settings
3223 Cancels and updates managed tokens from a file. @param cancel whether to cancel managed tokens @param tokenFile file containing stored credentials @param fileFormat output format of the updated file @param alias Text alias for matching tokens @param conf Hadoop configuration
3224 Renews tokens in the specified file and updates it with the new credentials. @param tokenFile File containing token storage @param fileFormat Format to write the updated credentials in @param alias Text alias for matching managed tokens @param conf Application configuration
3225 Imports tokens from a file and adds them to the credentials. @param tokenFile File containing token data @param fileFormat Format of the token file (e.g. JSON) @param alias Text alias for the token service @param base64 Base64 encoded token string @param conf Configuration object for logging and storage
3226 Retrieves a list of JAR files in the specified directory. @param path absolute path to the directory
3227 Legacy constructor to initialize server with deprecated parameters. @param instance @param conf configuration object @param bindAddress server binding address @param port server listen port
3228 Processes a single RPC request from the client. @param bb ByteBuffer containing the RPC request data
3229 Retrieves and processes data from a specified URL. @param urlString unique URL string to fetch data from
3230 Copies temporary local file to final output location. @param fsOutputFile destination path on file system @param tmpLocalFile temporary file to copy from
3231 Copies a file or directory from HDFS to local storage. @param src source path in HDFS @param dst destination path on local FS @param copyCrc whether to copy checksum file as well
3232 Retrieves local write path based on input parameters. @param pathStr string representation of the path @param size file size in bytes @param conf Hadoop configuration object
3233 Creates a temporary file for write operations. @param pathStr path string for the temporary file @param size expected size of the file in bytes @param conf Hadoop configuration object @return File object representing the temporary file or null on failure
3234 Processes raw command-line arguments. @param args list of raw argument strings
3235 Creates a writer with optional compression based on provided options. @param conf configuration object @param opts writer options (compression type can be specified here) @return Writer instance or throws IOException if an error occurs
3236 Creates a JAR file with the specified classpath. @param inputClassPath comma-separated list of classpath entries @param pwd working directory for the JAR file @param targetDir base directory for relative classpath entries @param callerEnv environment variables to replace in classpath entries @return array containing the path to the created JAR file and an unexpanded wildcard classpath entry (if any)
3237 Validates and expands a comma-separated list of file names or wildcards. @param files comma-separated list of file names or wildcards @param expandWildcard whether to expand wildcard patterns @return string representation of the validated file paths, or null if invalid
3238 Continuously reads and processes incoming data from a channel until a fatal response is sent or an error occurs.
3239 Unwraps and processes incoming RPCs from a SaslServer response. @param inBuf input byte array to unwrap
3240 Sends GET request to fetch log level from server.
3241 Sends HTTP request to set log level. @throws Exception on protocol or network errors
3242 Creates a KeyProvider instance for the given URI and configuration. @param providerUri URI of the KMS client provider @param conf Configuration object @return LoadBalancingKMSClientProvider instance or null if not found
3243 Completes local output by delegating to FileSystems.
3244 Creates a temporary writable file with specified name and size. @param pathStr file system path for the file @param size expected size of the file in bytes @param conf configuration object (not used) @return File object representing the created temp file
3245 Returns local write path for given file string and configuration. @param pathStr file string @param conf Hadoop configuration object
3246 Executes command with optional arguments and handles deprecated warnings. @param argv variable number of command line arguments @return process exit code or error status
3247 Initializes a new Reader instance with the specified configuration and file. @param fs FileSystem instance @param file File path to read from @param conf Configuration object for reader settings
3248 Initializes a new Reader instance with the specified file system, directory name, and writable comparator. @param fs file system to access @param dirName directory path @param comparator comparator for sorting keys @param conf configuration parameters
3249 Creates a Reader for the specified directory. @param fs file system instance @param dirName name of the directory to read from @param conf configuration object
3250 Creates a new reader instance with specified configuration and comparator. @param fs FileSystem instance @param dirName directory name @param comparator WritableComparator instance @param conf Configuration object @throws IOException if an I/O error occurs
3251 Creates a new writer with the same compression attributes as the input file. @param inputFile path to the original file @param outputFile path to the cloned file @param prog progress monitor @return Writer object for the cloned file or null on failure
3252 Creates an index for a given directory, writing key positions to the index @param fs Hadoop FileSystem instance @param dir directory path where the data and index files are stored @param keyClass Class of the keys in the data file @param valueClass Class of the values in the data file @param dryrun whether this is a dry run, writing nothing to disk @param conf Hadoop Configuration instance @return number of key-value pairs written to the index or -1 if no fixing was needed
3253 Creates a writer instance from configuration and filesystem settings. @param fs FileSystem to operate on @param conf Configuration for the writer @param name Path to write data to @param keyClass Class of keys in the output data @param valClass Class of values in the output data
3254 Creates a new writer instance with specified configuration and file system. @param fs underlying file system @param conf Hadoop configuration object @param name path to the output file @param keyClass class of the key data type @param valClass class of the value data type @param compressionType compression type for writer
3255 Creates a new writer instance. @param fs File system to operate on @param conf Configuration object @param name Path to write to @param keyClass Class of key values @param valClass Class of value data @param compressionType Compression type for output @param progress Progressable callback for updates
3256 Creates a new writer instance with specified configuration and compression settings. @param fs FileSystem instance @param conf Configuration object @param name Path to the file or directory @param keyClass Class of key data type @param valClass Class of value data type @param compressionType Compression type (e.g. NONE, DEFLATE) @param codec Compression codec instance
3257 Creates a new writer with specified configuration and metadata. @param fs file system instance @param conf configuration settings @param name output path @param keyClass data key class @param valClass data value class @param compressionType compression type (optional) @param codec compression codec (optional) @param progress progress update callback (optional) @param metadata additional metadata (optional)
3258 Creates a writer instance with specified configuration and settings. @param fs the file system to use @param conf Hadoop configuration object @return a configured writer instance or null on failure
3259 Creates a writer for Hadoop data storage. @param fs FileSystem object @param conf Configuration object @param name Path to the file @param keyClass Class of the keys @param valClass Class of the values @param compressionType Type of compression @param codec Compression Codec object @param progress Progressable object for monitoring @return Writer object or null on failure
3260 Creates a new writer with specified configuration and compression settings. @param conf Hadoop Configuration object @throws IOException if an I/O error occurs
3261 Creates a writer for Hadoop data output stream. @param conf Hadoop configuration @param out FSDataOutputStream to write to @return Writer object or null on failure
3262 Validates file list with default error handling. @param files comma-separated list of file paths
3263 Handles log level requests based on operation type. @throws HadoopIllegalArgumentException if invalid operation is specified
3264 Creates a DataBlock instance by writing to temporary file. @param index unique block identifier @param limit maximum block size @return DataBlock object or throws IOException on failure
3265 Generates a temporary file path with specific permissions. @param conf Hadoop configuration @param localDirAllocator local directory allocator @return Path to the generated temp file
3266 Runs the FsShell command with optional arguments. @param argv array of command-line arguments @return int exit code or -1 on failure
3267 Initializes a Reader instance with file system, directory name and configuration. @param fs the file system to operate on @param dirName the directory name @param conf the Hadoop configuration
3268 Performs a multi-level merge of sorted segments.
3269 Initializes a new SequenceFile writer with the specified configuration. @param conf Hadoop Configuration object @param fs HDFS file system instance @param dirName directory name for the sequence file @param comparator key comparator to use @param compress compression type (e.g. NONE, DEFLATE)
3270 Initializes a Hadoop writer with configuration and file system. @param conf Hadoop configuration @param fs Hadoop file system @param file path to the data file @param valClass class of writable values
3271 Initializes a Hadoop writer with configuration and file settings. @param conf Hadoop configuration @param fs Hadoop file system @param file output file path @param valClass Writable class for values @param compress compression type (e.g. NONE, DEFLATE) @param progress progressable object for monitoring
3272 Legacy constructor for creating a Hadoop Writer instance. @param conf Hadoop configuration @param fs file system reference @param dirName output directory name @param keyClass WritableComparable class type @param valClass value class type
3273 Creates a Hadoop Writer instance from configuration and directory name. @param conf Hadoop Configuration object @param dirName directory path for the writer @param keyClass class of writable comparable keys @param valClass class of writable values @param compress compression type for output data @param progress Progressable callback for writing progress
3274 Legacy constructor for creating a Writer instance. @param conf configuration object @param fs file system to operate on @param dirName directory name of the output location @param keyClass class type of the key WritableComparable @param valClass class type of the value @param compress compression type for data storage @param codec specific compression algorithm to use @param progress progress callback object
3275 Convenience constructor for creating a Writer instance. @param conf Hadoop configuration @param fs File system @param dirName directory name @param keyClass WritableComparable class @param valClass value class @param compress compression type
3276 Initializes a Writer instance with the given configuration, file system, and directory name. @param conf configuration object @param fs file system object @param dirName name of the directory @param comparator writable comparator to use @param valClass class type for values @throws IOException if an I/O error occurs
3277 Constructs a Writer instance with the given configuration and file system. @param conf Configuration object @param fs File system instance @param dirName Directory name for the sequence file @param comparator Comparator class for key comparison @param valClass Class of values stored in the sequence file @param compress Compression type for the sequence file
3278 Constructs a SequenceFileWriter instance with default parameters. @param conf Hadoop configuration @param fs File system handle @param dirName directory name @param comparator key comparator @param valClass value class type @param compress compression type @param progress progress handler
3279 Creates a SequenceFile Writer with specified configuration. @param conf Configuration object @param fs FileSystem instance @param dirName directory name for the sequence file @param comparator WritableComparator instance @param valClass Class of value being written @param compress compression type @param codec CompressionCodec instance @param progress Progressable instance
3280 Creates a writer for the given file context and configuration. @param fc FileContext object @return Writer object or null on failure
3281 Parses command-line arguments and writes classpath into a JAR file if requested. @param args command-line arguments
3282 Creates a ClassLoader instance for the given file and work directory. @param file jar or zip file containing user classes @param workDir working directory where classes are stored @return ClassLoader instance or null on failure
3283 Processes general options from the command line. @param line CommandLine object containing parsed options
3284 Returns cache file path based on temporary file path. @param conf Hadoop configuration @param localDirAllocator allocator for local directories
3285 Checks if cache space is available for a given file size. @param fileSize size of the file to be cached @param conf configuration object @param localDirAllocator allocator for local directories @return true if sufficient cache space is available, false otherwise
3286 Merges a list of segment descriptors into a single iterator. @param segments list of SegmentDescriptor objects @param tmpDir temporary directory for merge process @return RawKeyValueIterator instance or null on failure
3287 Merges multiple input key-value stores into one. @param inNames array of input file paths @param deleteInputs whether to delete original inputs after merge @param factor scaling factor for merged output @param tmpDir temporary directory for merge process @return iterator over merged key-value pairs or null on failure
3288 Merges multiple input files into a single output file. @param inNames array of input file paths @param tempDir temporary directory for merge outputs @param deleteInputs whether to delete original inputs
3289 Merges two segments into a single output. @param inName input file path @param indexIn index file path @param tmpDir temporary directory for merge process @return RawKeyValueIterator instance or null on failure
3290 Initializes a Writer for writing to a SequenceFile. @param conf Hadoop configuration @param fs FileSystem instance @param dirName directory name @param keyClass Class of the key WritableComparable @param compress compression type
3291 Initializes a new Hadoop writer with specified file system and directory name. @param fs the underlying file system @param dirName the output directory path @param keyClass the type of writable comparable for key data
3292 Merges input map files and writes output to a single file. @param inMapFiles array of input map files @param deleteInputs whether to delete the input files after merging @param outMapFile Path to write merged output to
3293 Creates a writer with specified configuration and settings. @param fs file system instance @param conf Hadoop configuration object @return a new Writer instance or null if creation fails
3294 Parses general command-line options. @param opts Options object to populate @param args Command-line arguments array @return true if parsing successful, false otherwise
3295 Puts a block into the cache, updating internal data structures and statistics. @param blockNumber unique block identifier @param buffer ByteBuffer containing block data @throws IOException if an I/O error occurs during file operations
3296 Merges multiple input key-value stores into a single iterator. @param inNames array of input store paths @param deleteInputs whether to delete original inputs on merge completion @param tmpDir temporary directory for merge operation
3297 Executes a merge pass on the output file. @param tmpDir temporary directory for merge operations
3298 Runs the application with command-line arguments. @param args array of command-line arguments
3299 Initializes parser with configuration and command-line arguments. @param conf Configuration object @param options Options object @param args Array of command-line arguments
3300 Sorts and iterates over input files, merging into a single output file. @param inFiles array of input file paths @param tempDir temporary directory for sorting and merging @return RawKeyValueIterator instance or null if no segments found
3301 Merges multiple input files into a single output file. @param inFiles array of input paths @param outFile path to the merged file
3302 Sorts input files and merges them into a single output file. @param inFiles array of paths to input files @param outFile path to the merged output file @param deleteInput whether to delete original input files
3303 Constructs a GenericOptionsParser instance with default configuration. @param opts Options object @param args Command-line arguments array
3304 Constructs parser with default configuration and options. @param args input arguments
3305 Constructs GenericOptionsParser instance from configuration and command-line arguments. @param conf Configuration object @param args Command-line argument array
3306 Sorts input file and writes result to output file. @param inFile path to unsorted input file @param outFile path to sorted output file
3307 Creates GenericOptionsParser instance with minimal options. @param conf configuration object @param argArray array of command-line arguments @return GenericOptionsParser instance or null if failed
3308 Runs a Hadoop Tool with given configuration and arguments. @param conf configuration for the tool @param tool Tool instance to execute @param args command-line arguments @return exit status of the tool execution
3309 Parses command line arguments and updates configuration. @param conf Configuration object @param args Command line arguments @return Remaining command line arguments as a list of strings
3310 Runs tool with given configuration and arguments. @param conf Hadoop configuration @param argv array of command-line arguments @return exit status code
3311 Runs the Hadoop tool with the given configuration and credential shell. @throws Exception if an error occurs during execution
3312 Runs the Hadoop application with KeyShell driver. @throws Exception if an error occurs during execution
3313 Runs the Tool instance with given arguments. @param tool Tool instance @param args Command-line arguments @return Exit status code
3314 Extracts command options from the given arguments. @param conf configuration object @param args list of input arguments @return list of extracted command options or empty list if invalid
3315 Terminates the application with exit status. @throws ExitUtil.ExitException if termination is requested
3316 Runs the FsShell instance with command-line arguments. @param argv array of command-line arguments
3317 Runs the command-line interface (CLI) using the provided configuration.
3318 Runs the FindClass tool with command-line arguments and exits with a status code. @param args command-line arguments for the tool
3319 Launches service with given arguments, exits on completion or error. @param args command-line arguments
3320 Starts the application with command-line arguments. @param args list of command-line arguments
3321 Wraps the main service invocation with an argument list. @param args variable number of command-line arguments
