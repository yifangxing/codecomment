1 Creates a file range with specified offset and length. @param offset starting position in the file @param length number of bytes in the range @return FileRange object initialized with offset and length
2 Creates a file range. @param offset starting position in the file @param length number of bytes in the range @param reference associated object or null @return FileRange instance
3 Validates file range request. @param range FileRange object to validate @return Validated FileRange object @throws EOFException if position is negative
4 Ensures an object is not null. @param obj the object to check @param argName name of the argument for error message
5 Validates that a long value is a positive integer. @param value the number to validate @param argName name of the argument for error message
6 Validates that a given long value is not negative. @param value the value to check @param argName name of the argument for error message
7 Validates that a required argument is present. @param isPresent boolean indicating if the argument is present @param argName name of the argument being checked
8 Validates argument and throws exception if invalid. @param isValid flag indicating argument validity @param argName name of the argument to include in error message
9 Validates argument and throws exception if invalid. @param isValid flag indicating argument validity @param argName name of the argument being validated @param validValues string containing valid values for the argument
10 Checks if two long values are equal. @param value1 first value to compare @param value1Name name of the first value @param value2 second value to compare @param value2Name name of the second value
11 Checks if one number is an integer multiple of another. @param value1 the first number to check @param value1Name name of the first number for error message @param value2 the second number to check against @param value2Name name of the second number for error message
12 Checks if the first value is greater than the second. @param value1 the first long value to compare @param value1Name name of the first value for error message @param value2 the second long value to compare @param value2Name name of the second value for error message
13 Checks if one long value is greater than or equal to another. @param value1 the first long value to compare @param value1Name name of the first value for error message @param value2 the second long value to compare @param value2Name name of the second value for error message
14 Checks if one long value is less than or equal to another. @param value1 the first value to compare @param value1Name name of the first value for error message @param value2 the second value to compare @param value2Name name of the second value for error message
15 Checks if a long value is within a specified inclusive range. @param value the value to check @param valueName name of the value for error message @param minValueInclusive minimum allowable value (inclusive) @param maxValueInclusive maximum allowable value (inclusive)
16 Checks if a value is within a specified inclusive range. @param value the value to check @param valueName name of the value for error message @param minValueInclusive minimum allowed value (inclusive) @param maxValueInclusive maximum allowed value (inclusive)
17 Validates a collection of paths for bulk deletion. @param paths collection of file paths to validate @param pageSize maximum number of paths allowed @param basePath parent directory that all paths must be under
18 Initializes block upload data with a given file. @param file the file to be uploaded, must exist
19 Casts and validates a Serializable object as an IOStatisticsSnapshot. @param snapshot the Serializable object to cast @return the validated IOStatisticsSnapshot object
20 Maps enum names to their values with a prefix. @param prefix string prefix to prepend to each enum name @param enumClass class of the enum type @return map from prefixed lower-case enum names to enum values
21 Sorts file ranges by start position. @param input list of file ranges to sort @return sorted array of FileRange objects
22 Checks if one path is a parent of another. @param parent potential parent directory @param child potential child directory @return true if parent is indeed the parent of child, false otherwise
23 Checks if two paths are on the same file system. @param qualPath1 first path to compare @param qualPath2 second path to compare @return true if paths are on the same file system, false otherwise
24 Marks a file for deletion on JVM exit. @param f the file to be deleted @return true if successful, false if file does not exist
25 Deletes files marked for deletion on exit.
26 Checks if a file is a checksum file. @param file the Path object representing the file @return true if the file is a checksum file, false otherwise
27 Checks if a file is a checksum file. @param file path to the file @return true if the file is a checksum file, false otherwise
28 Adjusts block locations based on file offset and length. @param locations array of BlockLocation objects @param start starting byte position in the desired range @param len length of the desired range @param fileOffsetInHar file offset within the HAR @return adjusted BlockLocation array
29 Compares this FileStatus to another based on path. @param o the other FileStatus to compare @return negative if less, zero if equal, positive if greater
30 Converts FileStatus array to Path array. @param stats array of file statuses @return array of corresponding paths or null if input is null
31 Resolves intermediate path to a file status. @param f input path @return resolved Path object @throws IOException if an I/O error occurs
32 Retrieves the replication factor of a file. @param src file path @return replication factor as a short @throws IOException if an I/O error occurs
33 Retrieves the block size of a file. @param f file path @return block size in bytes @throws IOException if an I/O error occurs
34 Retrieves default replication factor. @param path file system path (unused) @return default replication factor as short
35 Cleans up thread-local data by merging it into rootData and removing from allData.
36 Validates arguments for positioned read operation. @param position file position to start reading from @param buffer destination byte array @param offset starting offset in the buffer @param length number of bytes to read @throws EOFException if position is negative @throws IndexOutOfBoundsException if buffer capacity is insufficient
37 Validates upload ID. @param uploadId byte array representing the upload ID @throws IllegalArgumentException if upload ID is null or empty
38 Validates that the map of part handles is not empty and all keys are positive. @param partHandles map of part handles with integer keys
39 Validates path and capability arguments. @param path file system path to validate @param capability capability string to validate @return lowercase version of capability or throws exception if invalid
40 Constructs an IrqHandler with a given name and handler. @param name the unique identifier for the IRQ handler @param handler the Interrupted handler instance to be associated
41 Partitions a list into sublists of a specified size. @param originalList the list to be partitioned @param pageSize the maximum size of each sublist @return a list of sublists
42 Initializes JSON serialization with specified options. @param classType the type of objects to serialize @param failOnUnknownProperties whether to throw exception on unknown properties @param pretty whether to format output as pretty-printed JSON
43 Constructs StorageStatisticsFromIOStatistics with given parameters. @param name storage name @param scheme storage scheme @param ioStatistics input/output statistics
44 Deprecated method to retrieve statistics. @return Map of scheme to Statistics objects
45 Creates a file with specified permissions and options. @param f file path to create @param permission file permissions @param flags creation flags (e.g., overwrite) @param bufferSize buffer size for writing @param replication block replication factor @param blockSize block size in bytes @param progress progress monitor callback @return FSDataOutputStream for writing data @throws IOException if an I/O error occurs
46 Creates a non-recursive file output stream. @param f file path @param permission file permissions @param overwrite flag to overwrite existing file @param bufferSize buffer size for writes @param replication replication factor @param blockSize block size @param progress progress monitor @return FSDataOutputStream for writing @throws IOException if an I/O error occurs
47 Constructs an exception indicating access is denied to a specified path. @param path the path that access is denied to
48 Constructs a new PathPermissionException. @param path the restricted file path
49 Constructs an exception indicating a missing file or directory. @param path the non-existent file or directory path
50 Constructs an exception indicating that a file already exists. @param path the path of the existing file
51 Constructs an IOException with a specified file path and I/O error code. @param path the affected file path
52 Constructs a ClosedIOException with a specified file path and error message. @param path the file path where the exception occurred @param message the detail message of the exception
53 Returns the current builder instance. @return Builder instance of type B
54 Converts value to extended short. Deprecated; use toShort() instead.
55 Converts a short value to its octal representation. @return the octal representation as a short
56 Interns all strings in the given array. @param strings array of strings to intern @return array with interned strings
57 Checks if this path represents a directory. @deprecated Use {@link #isDirectory()} instead. @return true if this path is a directory, false otherwise
58 Checks if a given path is a directory. @param f the file path to check @return true if the path is a directory, false otherwise
59 Checks if a given path data item represents a directory. @param item PathData object to check @return true if the item is a directory, false otherwise @throws IOException if an I/O error occurs while checking the directory status
60 Retrieves ACL entries for a given path. @param item the PathData object representing the path @return list of AclEntry objects
61 Checks if a file path represents a directory. @param f the Path to check @return true if the path is a directory, false otherwise @throws IOException if an I/O error occurs
62 Applies new permission to a file. @param file the FileStatus object representing the file @return updated permissions as a short value
63 Checks if the file is neither a directory nor a symbolic link. @return true if the file is a regular file, false otherwise
64 Retrieves the symbolic link path. @return Path object representing the symbolic link @throws IOException if the path is not a symbolic link
65 Retrieves the length of the file. @return Length of the file in bytes @throws IOException if an I/O error occurs
66 Retrieves file length. @param f file path @return file length in bytes @throws IOException if an I/O error occurs
67 Retrieves storage policy for a given source path. @param src source file path @return BlockStoragePolicySpi object or throws IOException
68 Sets an extended attribute on a file. @param path the file path @param name the attribute name @param value the attribute value as bytes @throws IOException if an I/O error occurs
69 Constructs an I/O exception for a specific file path. @param path the file path where the I/O error occurred @param cause the underlying cause of the I/O error
70 Seeks to a specified position in the input stream. @param position the new position to seek to @throws IOException if an I/O error occurs
71 Reads record length from input stream. Handles synchronization checks if version > 1. @return record length or -1 if end of file is reached @throws IOException if file is corrupt or I/O error occurs
72 Returns current position in input stream. @throws IOException if an I/O error occurs
73 Registers an expression class with the factory. @param expressionClass the expression class to register
74 Registers commands using a method from the provided class. @param registrarClass Class containing the registerCommands method
75 Reads bytes from a specified position. @param pos starting position in the stream @param b byte array to read into @param offset offset within the byte array @param length number of bytes to read @return actual number of bytes read or -1 if end of stream is reached
76 Reads specified number of bytes from a given position. @param pos starting position in the stream @param b byte array to store read data @param offset offset within the byte array @param length number of bytes to read @throws IOException if an I/O error occurs
77 Expands the leftmost curly brace containing a slash in a file pattern. @param filePatternWithOffset input file pattern with offset @return list of expanded patterns or null if no expansion possible @throws IOException if illegal file pattern is encountered
78 Lists directory entries in a single batch. @param f path of the directory to list @param token unused token parameter @return DirectoryEntries containing all file statuses
79 Encodes byte array using specified codec. @param value byte array to encode @param encoding codec type (HEX, BASE64, or default) @return encoded string representation @throws IOException if encoding fails
80 Lists file statuses matching a filter. @param results list to store matching FileStatus objects @param f directory path to list @param filter PathFilter to apply to file paths @throws FileNotFoundException if the directory does not exist @throws IOException if an I/O error occurs
81 Constructs a MetricsTag with given info and value. @param info MetricsInfo object containing tag details @param value string value of the tag
82 Initializes an AbstractMetric with given MetricsInfo. @param info Metrics information required for metric initialization
83 Retrieves a delegation token for authentication. @param url the URL to authenticate against @param token the initial token object @param renewer the user allowed to renew the token @param doAsUser the user on behalf of whom the action is performed @return the delegation token or null if not found @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
84 Renews a delegation token for authentication. @param url the URL for the token renewal service @param token the token to be renewed @param doAsUser user on behalf of whom the action is performed @return the new expiration time of the token @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
85 Cancels a delegation token. @param url the URL to send the cancellation request @param token the token to be canceled @param doAsUser the user on behalf of whom the operation is performed @throws IOException if an I/O error occurs during cancellation
86 Initializes a ValueQueue with specified parameters. @param numValues maximum number of values in the queue @param lowWatermark threshold for triggering refill (0 < lowWatermark <= 1) @param expiry time after which entries expire @param numFillerThreads number of threads used to refill queues @param policy synchronization generation policy @param refiller strategy for filling the queue
87 Checks if an object is null and throws IllegalArgumentException if it is. @param obj the object to check @return the original object if not null
88 Stores storage statistics by name. @param name unique identifier for the storage statistics @param provider provides the storage statistics @return stored StorageStatistics object @throws RuntimeException if provider returns null or invalid statistics
89 Resets global statistics to zero.
90 Closes the resource and performs cleanup. Sets closed flag, cleans up resources, and deletes file if present.
91 Copies a file from source to destination. @param src source file @param dst destination file @throws IOException if an I/O error occurs
92 Closes the given Closeable stream safely. @param stream the Closeable object to be closed
93 Closes multiple Closeable resources safely. @param streams variable number of Closeable objects to close
94 Performs disk I/O check without native I/O. @param file the file to perform I/O operations on @throws IOException if an I/O error occurs
95 Ensures data is written to disk. Flushes and synchronizes file output stream.
96 Closes the operation, records statistics, and handles failures. @param failed indicates if the operation failed
97 Sets the count to a new value. @param newCount the new count value, must be non-negative and within buffer length @return the previous count value
98 Retrieves the address of a server connector. @param index connector index @return InetSocketAddress or null if invalid or unavailable
99 Initializes GcTimeMonitor with specified parameters. @param observationWindowMs time window for monitoring GC times @param sleepIntervalMs interval between checks @param maxGcTimePercentage maximum allowed GC time percentage @param alertHandler handler for GC alerts
100 Extracts raw path from request URI. @param request HTTP request object @param servletName name of the servlet @return path segment after servlet name
101 Checks equality based on file path. @param o object to compare @return true if paths match, false otherwise
102 Generates hash code based on the path. @return hash code of the path
103 Updates sample count and sum atomically. @param sampleCount new number of samples @param newSum updated sum value
104 Adds another MeanStatistic to this one. @param other the MeanStatistic to add @return this MeanStatistic with updated values
105 Appends a map's entries to a StringBuilder in a formatted string. @param sb StringBuilder to append the result to @param type type of the map entries @param map map with String keys and generic values @param separator separator between entries
106 Converts a map entry to a string. @param entry map entry with key as String and value of generic type E @return string representation of the entry
107 Tracks duration with a given key and count. @param key identifier for the duration tracking @param count number of occurrences or units to track @return DurationTracker instance
108 Converts a map entry to a LongStatistic. @param e map entry with key as name and value as count @return LongStatistic object representing the entry
109 Constructs an EvaluatingStatisticsMap with passthrough function.
110 Adds a counter function with a specified key. @param key unique identifier for the counter function @param eval function to evaluate and return a long value
111 Adds a gauge function to monitor metrics. @param key unique identifier for the gauge @param eval function to evaluate and return metric value
112 Adds a function to evaluate minimum values. @param key unique identifier for the function @param eval function that evaluates and returns a long value
113 Adds a function to evaluate and track maximum values. @param key identifier for the function @param eval function to evaluate input strings to long values
114 Adds a mean statistic function. @param key identifier for the statistic function @param eval function to calculate mean statistics
115 Wraps an IOStatistics instance in a SourceWrappedStatistics. @param statistics IOStatistics to be wrapped @return SourceWrappedStatistics instance
116 Returns an instance of an empty IOStatisticsStore. @return EmptyIOStatisticsStore object
117 Returns an instance of empty I/O statistics. @return EmptyIOStatistics object representing no I/O operations
118 Retrieves an atomic counter reference by key. @param key identifier for the counter @return AtomicLong object or null if not found
119 Retrieves the maximum reference value for a given key. @param key unique identifier for the reference @return AtomicLong representing the maximum reference or null if not found
120 Retrieves the minimum reference value for a given key. @param key unique identifier for the reference @return AtomicLong containing the minimum value or null if not found
121 Retrieves an AtomicLong reference from the gauge map. @param key identifier for the gauge @return AtomicLong associated with the key or null if not found
122 Retrieves mean statistic by key. @param key identifier for the statistic @return MeanStatistic object or null if not found
123 Returns the duration of the first event. @return Duration object representing the first event's duration
124 Sets the wrapped IOStatistics. @param wrapped the IOStatistics to wrap
125 Returns the active instance of DynamicIOStatistics. @return active instance of DynamicIOStatistics
126 Ensures that the FlagSet is mutable. Throws an exception if the FlagSet is immutable.
127 Converts block content to a byte array. @throws IOException if an I/O error occurs
128 Binds a signal handler to a signal. @throws IllegalStateException if already bound @throws IllegalArgumentException if binding fails due to JVM options
129 Decrements reference count and checks if it reaches closed state. @return true if status is closed, false otherwise
130 Creates a thread-safe snapshot of the source map. @param source original map to copy from @param copyFn function to create a copy of each element @return ConcurrentHashMap containing copied elements
131 Tracks and logs operation duration. @param factory DurationTrackerFactory instance @param statistic name of the statistic to log @param input CallableRaisingIOE representing the operation @return result of the operation @throws IOException if an I/O error occurs during execution
132 Creates a paired duration tracker factory. @param first the first DurationTrackerFactory @param second the second DurationTrackerFactory @return a PairedDurationTrackerFactory combining both
133 Retrieves the client backoff time for disconnected state. @return backoff time in milliseconds
134 Returns the count of slow RPC calls. @return Long value representing the number of slow RPC calls
135 Returns the count of RPC requeue calls. @return number of times RPC calls have been requeued
136 Resets the IO statistics by clearing the context.
137 Initializes a new instance of IOStatisticsSnapshot. Constructs and initializes internal maps for statistics tracking.
138 Checks if I/O statistics thread level is enabled. @return true if enabled, false otherwise
139 Initializes a new BuiltInGzipDecompressor with default state and resets CRC.
140 Updates the encryptor with new IV and key. @throws IOException if an I/O error occurs
141 Adjusts buffer size to be a multiple of cipher block size. @param codec CryptoCodec instance for algorithm details @param bufferSize initial buffer size @return adjusted buffer size
142 Creates a hard link from source to destination file. @param src source file to link @param dst destination file for the link @throws IOException if linking fails
143 Constructs a checksum with specified parameters. @param bytesPerCRC number of bytes per CRC calculation @param crcPerBlock number of blocks for CRC @param md5 MD5 hash instance to use
144 Constructs an MD5MD5CRC32FileChecksum with default values.
145 Constructs a file checksum using MD5 and CRC32-Castagnoli. @param bytesPerCRC number of bytes per CRC calculation @param crcPerBlock block size for CRC operations @param md5 precomputed MD5 hash
146 Compiles a glob pattern into a regular expression. @param glob the glob pattern to compile
147 Lists file statuses in a directory. @param f path to the directory @return iterator over FileStatus objects @throws IOException if an I/O error occurs
148 Generates a shell path for a given file. @param file the File object to process @param makeCanonicalPath if true, uses canonical path; otherwise, uses toString() @return shell-compatible path as a String @throws IOException if an I/O error occurs during path processing
149 Converts file mode to POSIX permissions. @param mode numeric file mode @return set of POSIX file permissions
150 Executes a command sequence, checking for null entries. Throws IOException if any command is null.
151 Checks if the combined length of command line arguments exceeds Windows limit. @param commands array of command line arguments @throws IOException if total length exceeds maximum allowed length
152 Builds a PowerShell script to kill a process on a remote host. @param processName name of the process to kill @param host hostname where the process is running @return path to the created PowerShell script or null if failed
153 Returns the checksum size. @return size of the checksum as an integer
154 Calculates checksum size based on data size. @param dataSize size of the data in bytes @return total size including checksums
155 Converts Checksum to byte array. @param sum Checksum object to be converted @param checksumSize size of the resulting byte array @return byte array representation of the checksum
156 Increments the bytesRead count by the specified amount. @param newBytes the number of bytes to add to the current count
157 Increments the bytes written by a specified amount. @param newBytes the number of bytes to add to the total
158 Increments read operations count. @param count number of read operations to add
159 Increments the count of large read operations. @param count number of operations to increment by
160 Increments the write operations count. @param count number of write operations to add
161 Increments the count of erasure-coded bytes read. @param newBytes number of bytes to add to the total
162 Increments bytes read based on distance. @param distance network distance of the data source @param newBytes number of bytes to add
163 Increases remote read time by specified duration. @param durationMS milliseconds to add to remote read time
164 Visits and aggregates statistics data. @param visitor StatisticsAggregator to process data @return Aggregated result of type T
165 Constructs a ContentSummary using a Builder. @param builder the Builder object containing summary data
166 Constructs a ChecksumOpt with default checksum type and unlimited length.
167 Creates a disabled checksum option. @return ChecksumOpt object with NULL type and -1 value
168 Validates create flags to ensure they are mutually exclusive. @param flag set of creation flags to validate
169 Checks if the URI has a valid scheme. @param uri the URI to check @param supportedScheme the expected scheme @throws HadoopIllegalArgumentException if the scheme is null or doesn't match
170 Constructs an InvalidPathException with a specified invalid path. @param path the invalid file path
171 Constructs an InvalidPathException with a specified path and reason. @param path the invalid file path @param reason additional information about the error
172 Finds the first non-null element in an array. @param inputs array of elements to check @return first non-null element or throws exception if all are null
173 Finds the first non-null input in an array. @param inputs array of potential inputs @return the first non-null input or throws exception if all are null
174 Validates byte buffers. @param buffers array of byte arrays to validate
175 Validates output buffers. @param buffers array of ByteBuffers to check
176 Validates output buffers. @param buffers array of byte arrays to validate
177 Validates an array of ByteBuffers. @param buffers array of ByteBuffers to check
178 Stops a proxy by closing it if possible. @param proxy the proxy object to be stopped @throws HadoopIllegalArgumentException if proxy is null or not closeable
179 Processes checksum options with precedence. @param defaultOpt default checksum option @param userOpt user-specified checksum option @param userBytesPerChecksum user-defined bytes per checksum @return processed ChecksumOpt based on preferences
180 Retrieves default port from FileSystem; uses fallback if not set. @param theFsImpl FileSystem implementation instance @return Default port number or fallback value
181 Adds default port to URI if missing. @param uri original URI @return URI with default port set if applicable
182 Sets the replication factor for a file. @param src path to the source file @param replication desired replication factor @return true if successful, false otherwise @throws IOException if an I/O error occurs
183 Disconnects from the FTP server. @param client FTPClient instance to disconnect @throws IOException if an I/O error occurs during disconnection
184 Closes the output stream. Invokes PositionCache.close() to release resources.
185 Deprecated default constructor for ContentSummary.
186 Initializes a ContentSummary object. @param length total size in bytes @param fileCount number of files @param directoryCount number of directories @param quota storage quota @param spaceConsumed used space @param spaceQuota space quota
187 Calculates delay until renewal time. @param unit desired time unit for the result @return remaining time in specified units
188 Updates the renewal time with a slight adjustment. @param delay the base delay in milliseconds
189 Updates the last activity timestamp to current time.
190 Sleeps for at least the specified duration, ignoring interrupts. @param millis minimum sleep duration in milliseconds
191 Returns the current time in milliseconds. @return Current time as a long value
192 Waits for all executors to terminate within a specified time. @param milliseconds maximum wait time in milliseconds @return true if all executors terminate, false if timeout occurs @throws InterruptedException if interrupted while waiting
193 Verifies checksums for data chunks. @param sumsBytes buffer containing checksums @param sumsOffset offset in checksums buffer @param data buffer containing data to verify @param dataOffset offset in data buffer @param bytesPerSum number of bytes per checksum @param file path to the file being verified @return original data buffer if verification passes
194 Opens a file input stream for reading. @param f path to the file @return FSDataInputStream for reading the file @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnresolvedLinkException if link cannot be resolved @throws IOException if an I/O error occurs
195 Calculates checksum length for a file. @param file path to the file @param fileSize size of the file in bytes @return checksum length based on file size and bytes per sum
196 Retrieves file system status. @param p file path @return FsStatus with max values indicating no limits @throws IOException if an I/O error occurs
197 Registers command classes with a factory. @param factory CommandFactory instance to register commands with
198 Registers command classes with the given factory. @param factory CommandFactory instance to register commands
199 Registers command classes with the factory. @param factory CommandFactory instance to register commands with
200 Deprecated constructor for CommandFormat. @param name command name (unused) @param min minimum number of arguments @param max maximum number of arguments @param possibleOpt possible options
201 Evaluates a callable potentially raising an I/O exception. @param callable task to be executed @return CompletableFuture with result or exception
202 Rejects unknown mandatory keys. @param knownKeys collection of valid keys @param extraErrorText additional error message text @throws IllegalArgumentException if any unknown key is found
203 Retrieves a list of capability names. @return List of capability names as strings
204 Builds HTTP referrer string from attributes and context. @return constructed referrer or empty string on failure
205 Constructs a WeakReferenceMap with a value factory and an optional reference lost callback. @param factory function to create values for keys @param referenceLost consumer called when a key's reference is lost, may be null
206 Checks if an OutputStream supports a specific capability. @param out the OutputStream to check @param capability the capability to verify @return true if the OutputStream supports the capability, false otherwise
207 Checks if the input stream has a specific capability. @param in InputStream to check @param capability capability to look for @return true if capability exists, false otherwise
208 Shuts down the executor with a timeout. @param logger Logger for logging shutdown status @param timeout Timeout duration @param unit TimeUnit for timeout
209 Acquires an item with blocking. @return acquired item of type T
210 Attempts to acquire a resource without waiting. @return the acquired resource or null if unavailable
211 Returns the number of available items. @return Count of available items
212 Initializes a cache with block management and prefetching. @param prefetchingStatistics statistics for prefetching operations @param maxBlocksCount maximum number of blocks to cache @param trackerFactory factory for creating duration trackers
213 Initializes a SemaphoredDelegatingExecutor. @param executorDelegatee underlying ExecutorService to delegate tasks @param permitCount maximum number of concurrent permits @param fair true for fair semaphore ordering, false otherwise @param trackerFactory factory for creating duration trackers
214 Adds an entry to the head of a linked list. @param entry the entry to add
215 Marks the operation as done and validates checksum. Throws IllegalStateException if checksum has changed.
216 Sets buffer size for data input stream. @param bufSize buffer size in bytes @return this builder instance
217 Returns a new instance of FutureDataInputStreamBuilder. @return FutureDataInputStreamBuilder object
218 Retrieves value associated with the current thread. @return Value stored for the current thread
219 Removes and returns the value associated with the current thread. @return the removed value or null if not found
220 Sets a value for the current thread. @param newVal the new value to set @return the previous value or null if none was set
221 Merges another file range into the current one. @param otherOffset starting offset of the other range @param otherEnd ending offset of the other range @param other FileRange object to merge @param minSeek minimum seek distance required for merging @param maxSize maximum size allowed after merging @return true if merged successfully, false otherwise
222 Creates a bulk delete operation. @param path file system path to perform deletion @return BulkDelete instance for the specified path @throws IllegalArgumentException if path is invalid @throws IOException if an I/O error occurs
223 Registers And expression with aliases. @param factory ExpressionFactory instance @throws IOException if registration fails
224 Registers expression classes with the factory. @param factory ExpressionFactory instance to register classes with
225 Registers expression classes with the factory. @param factory ExpressionFactory instance to register classes with @throws IOException if registration fails
226 Constructs a Name object with case sensitivity. @param caseSensitive flag indicating if name comparison is case-sensitive
227 Retrieves the compression codec for a given file. @param file the Path object representing the file @return CompressionCodec or null if not found
228 Resolves property name from template using SSL mode. @param mode SSLFactory mode @param template string template containing {0} placeholder @return resolved property name
229 Generates a configuration suffix from the name. @return A string with each part of the name in lowercase, separated by dots.
230 Combines two results. @param other the second Result to combine with @return a new Result indicating combined pass and descend status
231 Negates the result's pass status. @return New Result with inverted isPass value and same isDescend value
232 Creates and configures a FindOptions object. @return configured FindOptions instance
233 Checks if a given name corresponds to an expression. @param expressionName the name of the expression to check @return true if the name is an expression, false otherwise
234 Adds specified number of children from expression stack. @param exprs stack containing expressions @param count number of children to add
235 Adds arguments from deque to command. @param args deque containing argument strings @param count number of arguments to add
236 Converts a string to a URI, handling scheme and authority parsing. @param pathString the input string representing the URI @return a URI object constructed from the input string @throws IOException if an I/O error occurs during normalization
237 Initializes order comparator based on time or size.
238 Checks if the command is deprecated. @return true if there is a replacement command, false otherwise
239 Returns the command name. @return Command name without leading hyphen if present, or null if not set.
240 Sets file attributes preservation. @param preserve true to preserve timestamps, ownership, and permissions; false to clear
241 Initializes a MetricsRecordBuilderImpl with specified parameters. @param parent the parent MetricsCollector @param info MetricsInfo for the record @param rf record filter @param mf metric filter @param acceptable flag indicating if the record is acceptable
242 Initializes a new ChunkedArrayList with specified chunk capacities. @param initialChunkCapacity the capacity of each new chunk @param maxChunkSize the maximum size a chunk can grow to
243 Finds the index of the first DEFAULT scope entry in ACL list. @param aclBuilder list of ACL entries to search @return index of first DEFAULT entry or PIVOT_NOT_FOUND if none exists
244 Creates a snapshot of the specified file or directory. @param path the file or directory to snapshot @return a Path object representing the snapshot location @throws IOException if an I/O error occurs during snapshot creation
245 Adds an option with no value. @param option unique option name @throws DuplicatedOptionException if option already exists
246 Constructs a TableBuilder with specified headers. @param headers variable number of header objects
247 Checks if the collection is empty. @return true if the collection has no elements, false otherwise
248 Constructs a Shell with a specified interval. @param interval time interval for some operation
249 Initializes a Token with given parameters. @param identifier unique token identifier @param password associated password bytes @param kind type of the token @param service service related to the token
250 Initializes a new Token with empty identifier and password.
251 Initializes a new Globber instance. @param fc FileContext for file operations @param pathPattern pattern to match files @param filter optional PathFilter to further refine matches @param resolveSymlinks whether to resolve symbolic links
252 Constructs a detailed error message. @return formatted error message including operation, path, cause, and fully qualified path if applicable
253 Handles SASL connection failure by retrying or logging appropriate errors. @param currRetries current number of retries @param maxRetries maximum allowed retries @param ex exception causing the failure @param rand random instance for backoff calculation @param ugi user group information
254 Checks if the given FileSystem is a ViewFileSystem. @param fileSystem the FileSystem to check @return true if it's a ViewFileSystem, false otherwise
255 Sets quota limits for a file system path. @param src path to set quota on @param namespaceQuota maximum number of files/directories allowed @param storagespaceQuota maximum storage space in bytes @throws IOException if operation fails
256 Sets storage quota by type. @param src source path @param type storage type @param quota quota value to be set @throws IOException if operation fails
257 Creates a multipart uploader builder. @param basePath base path for uploads @return MultipartUploaderBuilder instance or null if not supported @throws IOException if an I/O error occurs
258 Lists file statuses in a directory. @param f path to the directory @return iterator of LocatedFileStatus objects @throws FileNotFoundException if the directory does not exist @throws IOException on I/O errors
259 Lists file statuses in a directory. @param f path to the directory @return iterator of LocatedFileStatus objects @throws IOException if an I/O error occurs
260 Computes checksum for a file. @param f file path @return FileChecksum object @throws IOException if an I/O error occurs
261 Sets extended attribute on a file path. @param path the file path @param name the attribute name @param value the attribute value as bytes @throws IOException if an I/O error occurs
262 Opens a file with specified options. @param path the file path to open @param parameters configuration for opening the file @return CompletableFuture of FSDataInputStream or throws IOException
263 Opens a file with specified options. @param path the file path to open @param parameters configuration for opening the file @return CompletableFuture of FSDataInputStream @throws IOException if an I/O error occurs
264 Opens a file with specified options. @param path the path to the file @param parameters file opening parameters @return CompletableFuture of FSDataInputStream @throws IOException if an I/O error occurs
265 Opens a file with specified parameters. @param pathHandle file path handle @param parameters file open parameters @return CompletableFuture of FSDataInputStream @throws IOException if an I/O error occurs
266 Retrieves all storage policies. @return collection of storage policy implementations @throws IOException if an I/O error occurs
267 Initializes file systems from given mount points. @param mountPoints list of mount points with target file systems @return map of mount source paths to initialized file systems
268 Builds a ResolveResult for regex mount points. @param resultKind type of resolution result @param resolvedPathStr resolved path string @param targetOfResolvedPathStr target file system URI string @param remainingPath remaining path after resolution @return ResolveResult object or null if initialization fails
269 Returns an instance of ChildFsGetter with the current scheme. @return ChildFsGetter object initialized with the scheme
270 Constructs an INodeLink object. @param pathToNode path to the node @param aUgi user group information @param targetMergeFs target file system for merging @param aTargetDirLinkList list of target directory links
271 Initializes a node link with specified path, user info, and file system creation method. @param pathToNode path to the node @param aUgi user group information @param createFileSystemMethod function to create file system @param aTargetDirLink target directory link @throws URISyntaxException if URI is invalid
272 Replaces regex capture groups in a destination path. @param parsedDestPath the destination path to modify @param srcMatcher the Matcher object containing regex groups @param regexGroupNameOrIndexStr name or index of the regex group to replace @param groupRepresentationStrSetInDest set of strings representing the group in the destination path @return modified destination path with replaced capture groups
273 Decrypts data from input buffer into output buffer using provided decryptor. @param decryptor decryption utility object @param inBuffer input buffer containing encrypted data @param outBuffer output buffer for decrypted data @param padding number of bytes to skip at the beginning of input buffer @throws IOException if an I/O error occurs during decryption
274 Ensures context is initialized. Throws IllegalStateException if context is zero.
275 Checks if the parent ZNode exists. @return true if the ZNode exists, false otherwise @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
276 Retrieves the configuration view file system prefix. @return default FS prefix for config view
277 Deserializes a string into a RegexMountPointResolvedDstPathReplaceInterceptor. @param serializedString the serialized representation of the interceptor @return an instance of RegexMountPointResolvedDstPathReplaceInterceptor or null if invalid
278 Returns a readable byte channel for the socket. @throws IllegalStateException if the socket does not have a channel
279 Calculates checksum length based on file size. @param file path to the file @param fileSize size of the file in bytes @return checksum length
280 Retrieves the filesystem path. @return filesystem path as a String @throws IOException if an I/O error occurs
281 Retrieves the mount point of a directory. @throws IOException if an I/O error occurs or path does not exist @return mount point as a String
282 Calculates percentage of capacity used. @return integer percentage of capacity in use
283 Initializes an FSInputChecker with specified parameters. @param file the Path of the file to check @param numOfRetries number of retry attempts for operations @param verifyChecksum flag to enable checksum verification @param sum Checksum object used for verification @param chunkSize size of each data chunk @param checksumSize size of the checksum
284 Checks if the stream supports ByteBuffer read. @param stream input stream to check @return true if stream is ByteBufferReadable, false otherwise
285 Initializes audit context with dynamic thread ID. @param PARAM_THREAD1 key for storing thread ID
286 Sets command context based on tool class name. @param tool the tool object to process
287 Retrieves an optional long value by key. @param key unique identifier for the value @param value default integer value if not found @return optional long value or default if not present
288 Deprecated. Use optLong with cast value. @param key unique identifier for the value @return B object from optLong method
289 Retrieves an optional long value by key. @param key unique identifier for the value @param value default long value if not found @return B object containing the long value or default
290 Deprecated. Converts and stores a double value as long. @param key unique identifier for the value @param value double to be stored @return result of optLong method call
291 Ensures a condition by key and integer value. @param key unique identifier for the condition @param value integer value to check against @return result of the condition check
292 Adds a float condition to the query. @param key field name @param value float value to match @return updated query object
293 Ensures presence of a key with a long value. @param key unique identifier for the value @param value long value to be checked @return B instance after validation @deprecated Use mustLong directly
294 Validates and adds a numeric constraint. @param key constraint identifier @param value numeric value to validate @return updated object with added constraint
295 Retrieves and formats a row from the data. @param idx index of the row to retrieve @return formatted row as an array of strings
296 Starts local output for a file. @param fsOutputFile destination file path in the filesystem @param tmpLocalFile temporary local file path @return Path to the started local output @throws IOException if an I/O error occurs
297 Calculates effective permission for an ACL entry. @param entry ACL entry to evaluate @param permArg initial permission argument @return FsAction representing the effective permission @throws IllegalArgumentException if permissions are not available or default entry is invalid
298 Initializes a new PermissionStatus object. @param user username of the user @param group name of the group @param permission file system permissions
299 Parses an ACL entry from a string. @param aclStr the ACL specification string @param includePermission whether to include permission in parsing @return parsed AclEntry object
300 Generates a stable string representation of the ACL entry. @return String in "default:type:name:permission" format
301 Splits a string into an array using a delimiter. @param str the input string to split @param delim the delimiter to use for splitting @return array of strings or null if no elements found
302 Splits input string into a collection of substrings. @param str input string to be split @return Collection of substrings separated by commas
303 Initializes PermissionParser with mode string and patterns. @param modeStr the permission mode string to parse @param symbolic pattern for symbolic mode @param octal pattern for octal mode @throws IllegalArgumentException if mode string doesn't match any pattern
304 Closes resources based on current state. @throws IOException if an I/O error occurs
305 Checks if the stream is open. Throws an exception if the stream is closed.
306 Transitions to a new state. @param current current state @param next target state @throws IllegalStateException if current state is invalid
307 Writes bytes from buffer to output. @param buffer source byte array @param offset starting index in buffer @param length number of bytes to write @return number of bytes written (always 0) @throws IOException if an I/O error occurs
308 Ensures data is written and state is verified. @throws IOException if an I/O error occurs
309 Sets an attribute with a given key and value. @param key unique identifier for the attribute @param value the value to be associated with the key
310 Extracts query parameters from a URI header. @param header the URI string containing query parameters @return map of query parameter names to values @throws URISyntaxException if the header is not a valid URI
311 Returns the data size. Uses cached value if available; otherwise, calculates from buffer capacity used. @return Size of the data
312 Resolves and returns the absolute path of the given file. @param f relative or absolute path to resolve @return resolved absolute path @throws FileNotFoundException if file does not exist @throws UnresolvedLinkException if a symbolic link cannot be resolved @throws AccessControlException if access is denied @throws IOException for other I/O errors
313 Synchronizes file system changes. Throws IOException or UnsupportedOperationException if operation fails.
314 Prints statistics from the file system.
315 Retrieves or creates statistics for a given URI. @param uri the base URI to get statistics for @return Statistics object associated with the URI
316 Creates a multipart uploader builder. @param basePath base path for uploads @return MultipartUploaderBuilder instance @throws IOException if an I/O error occurs
317 Retrieves or creates an AllocatorPerContext for a given configuration item. @param contextCfgItemName name of the configuration item @return AllocatorPerContext instance associated with the config item
318 Retrieves the current position from the PositionCache. @return The current position as a long value.
319 Flushes output stream to file system. @deprecated Use a different method for synchronization. @throws IOException if an I/O error occurs
320 Converts comma-separated string to a collection of trimmed strings. @param str input string with comma-separated values @return Collection of trimmed, non-empty strings
321 Constructs a LoggingStateChangeListener with default logger.
322 Constructs a new ServiceStateException with a specified message. @param message detail message of the exception
323 Constructs a ServiceStateException with an exit code. @param exitCode error code associated with the exception @param message descriptive error message @param cause underlying cause of the exception
324 Converts a throwable to a RuntimeException. @param text error message @param fault original throwable @return RuntimeException instance
325 Converts Throwable to RuntimeException. @param fault original exception to be converted @return RuntimeException or its subclass
326 Initializes a new ServiceStateModel with a specified name and default state. @param name the service name
327 Checks if state transition is valid. @param current current service state @param proposed proposed new state @return true if transition is valid, false otherwise
328 Returns string representation of the object. Includes name if not empty, followed by state. @return formatted string
329 Constructs a HadoopUncaughtExceptionHandler with no custom handler.
330 Handles incoming signals by counting and logging them. @param s the received signal
331 Looks up an IRQ handler by its signal name. @param signalName the name of the signal @return IrqHandler object or null if not found
332 Constructs a new ServiceLaunchException with an exit code and cause. @param exitCode numeric code representing the exit status @param cause underlying exception that caused this exception
333 Constructs a new ServiceLaunchException with an exit code and message. @param exitCode numeric exit status code @param message descriptive error message
334 Constructs a ServiceLaunchException with an exit code and formatted message. @param exitCode error code for the exception @param format message format string @param args arguments for the message format
335 Constructs a ServiceLaunchException with an exit code, cause, and formatted message. @param exitCode numeric exit code for the exception @param cause Throwable that caused this exception @param format message format string @param args arguments for the message format
336 Initiates shutdown process.
337 Initializes a ServiceLauncher with default configuration. @param serviceClassName name of the service class to launch
338 Logs and records an ExitException. @param exitException the exception to handle
339 Binds command options to the command. Initializes commandOptions with created options.
340 Loads configuration classes and returns count of successfully loaded instances.
341 Registers a listener for service state changes. @param l ServiceStateChangeListener to be added
342 Removes a global service state change listener. @param l the listener to remove @return true if the listener was successfully removed, false otherwise
343 Resets global listeners to their initial state.
344 Notifies all registered listeners of an event. Logs a warning if any exception occurs during notification.
345 Initializes service with configuration. @param conf new configuration settings
346 Adds an object as a service if it is an instance of Service. @param object the object to be added @return true if successfully added, false otherwise
347 Stops a service quietly, logging any exceptions. @param log logger to record warnings @param service service to stop @return caught exception or null if no exception
348 Stops a service quietly and logs any exceptions. @param log Logger for logging warnings @param service Service to be stopped @return Exception if occurred, otherwise null
349 Checks if the input stream is fully available for reading using ByteBufferPositionedReadable. @param in InputStream to check @return true if input stream supports full read availability, false otherwise
350 Checks if the instance is available. @return true if instance is loaded, false otherwise
351 Converts an object to its JSON string representation. @param instance the object to be converted @return JSON string or error message if conversion fails
352 Converts a function that may raise an IO exception to an unchecked function. @param fun function that raises IO exceptions @return unchecked version of the input function
353 Converts an instance to JSON and back. @param instance object to convert @return reconstructed object of type T @throws IOException if conversion fails
354 Converts byte array to object. @param bytes input byte array @return deserialized object of type T @throws IOException if conversion fails
355 Constructs a new UTF8 object by copying from another. @param utf8 source UTF8 object to copy
356 Writes a string to DataOutput. @param out DataOutput stream to write to @param s String to be written @return Length of the UTF-8 encoded string @throws IOException if writing fails or string is too long
357 Skips a specified number of bytes from the input stream. @param in DataInput stream to read from
358 Seeks to a specific position in the input stream. @param n position to seek to @throws IOException if an I/O error occurs
359 Retrieves writable by long key. @param n unique identifier @param value writable to update if found @return writable associated with the key or null if not found
360 Constructs an OutputBuffer using a default Buffer.
361 Retrieves data from the buffer. @return byte array containing the data
362 Returns the length of the buffer. @return Length as an integer
363 Resets the buffer and returns the current instance. @return the current OutputBuffer instance
364 Compares two WritableComparable objects. @param a first object to compare @param b second object to compare @return comparison result as an integer
365 Compares two byte arrays. @param b1 first byte array @param s1 starting index in first array @param l1 length of bytes to compare in first array @param b2 second byte array @param s2 starting index in second array @param l2 length of bytes to compare in second array @return negative if b1 is less, positive if greater, zero if equal
366 Computes hash code for byte array segment. @param bytes source byte array @param length number of bytes to include in hash @return integer hash code
367 Reads a float from byte array. @param bytes source byte array @param start starting index @return float value
368 Reads a long value from byte array. @param bytes source byte array @param start starting index of the long value @return long value read from the array
369 Reads a variable-length integer from a byte array. @param bytes source byte array @param start starting index in the array @return decoded integer value @throws IOException if an I/O error occurs
370 Constructs a BytesWritable from a byte array. @param bytes source byte array
371 Retrieves data as bytes. @deprecated Use another method instead. @return byte array containing data
372 Returns the size of the collection. @deprecated Use {@link #getLength()} instead.
373 Sets new capacity, adjusts size and resizes byte array. @param capacity new maximum capacity to set
374 Returns the size of the buffer tree. @param direct indicates whether to use direct buffers @return size of the buffer tree
375 Submits a readahead request for a file. @param identifier unique identifier for the file @param fd FileDescriptor of the file @param curPos current position in the file @param readaheadLength length of data to read ahead @param maxOffsetToRead maximum offset to read @param lastReadahead previous readahead request @return new ReadaheadRequest or null if no readahead is needed
376 Appends a key-value pair to the output. @param key the key to append @throws IOException if an I/O error occurs
377 Advances to the next record and updates the key. @param key the key to update with the next record's key @return true if a next record exists, false otherwise
378 Retrieves the current key value. @return the current key as a long @throws IOException if an I/O error occurs
379 Checks file access permissions. @param path file or directory path @param desiredAccess required access right @return true if access is granted, false otherwise @throws IOException on I/O error
380 Checks if native code is available and loaded. @return true if both conditions are met, false otherwise
381 Checks if native code and resources are available. @return true if native code is loaded and ready, false otherwise
382 Checks if functionality is available. @return true if available, false otherwise
383 Unmaps a given MappedByteBuffer. @param buffer the MappedByteBuffer to be unmapped
384 Frees a ByteBuffer using CleanerUtil if supported. @param buffer ByteBuffer to be freed
385 Writes data from input to buffer. @param in DataInput source of data @param length number of bytes to read and write @throws IOException if an I/O error occurs
386 Initializes an EnumSetWritable with a given EnumSet and element type. @param value EnumSet containing enum values @param elementType Class representing the enum type
387 Constructs a new DataInputBuffer using an empty Buffer.
388 Resets the buffer with new data. @param input array containing the data to reset @param length number of bytes from the input array to use
389 Resets the buffer with new data. @param input source byte array @param start starting index in the array @param length number of bytes to use
390 Returns the current position in the buffer. @return integer representing the current buffer position
391 Returns the length of the buffer. @return Length of the buffer as an integer
392 Initializes ECSchema from a map of options. @param allOptions map containing schema configuration
393 Constructs an ECSchema with specified codec and units. @param codecName name of the codec to use @param numDataUnits number of data units @param numParityUnits number of parity units
394 Returns the number of data blocks required. @return Number of data units defined in the schema
395 Returns the number of parity blocks required. @return Number of parity units defined in the schema
396 Retrieves a raw erasure coder factory by name. @param codecName the type of codec @param coderName the name of the coder @return RawErasureCoderFactory instance or null if not found
397 Creates an ECBlockGroup from data and parity blocks. @param dataBlocks array of data blocks @param parityBlocks array of parity blocks @return ECBlockGroup containing both data and parity blocks
398 Counts erased blocks in data and parity sections. @return total number of erased blocks
399 Counts erased blocks in an array. @param inputBlocks array of ECBlock objects @return number of erased blocks
400 Converts ECChunk array to ByteBuffer array. @param chunks array of ECChunk objects @return array of ByteBuffers corresponding to each chunk
401 Retrieves erased blocks from the given block group. @param blockGroup the ECBlockGroup containing data and parity blocks @return an array of erased ECBlock objects
402 Combines data and parity blocks from a group. @param blockGroup the source block group @return array of combined ECBlock objects
403 Adds two integers using XOR. @param x first integer within field size @param y second integer within field size @return result of XOR operation on x and y
404 Multiplies two numbers using a precomputed table. @param x first number, must be within field size @param y second number, must be within field size @return product of x and y from the multiplication table
405 Divides two numbers using a precomputed table. @param x dividend, must be non-negative and less than field size @param y divisor, must be positive and less than field size @return result of division from lookup table
406 Computes power using logarithmic table. @param x base number @param n exponent @return result of x raised to the power of n
407 Dumps ECChunk content to console. @param chunk the ECChunk object to dump
408 Checks if input changes are allowed. @return true if input changes are permitted, false otherwise
409 Checks if input changes are allowed. @return true if input changes are permitted, false otherwise
410 Checks if verbose dump is allowed. @return true if verbose dump is enabled, false otherwise
411 Checks if verbose dump is allowed. @return true if verbose dump is enabled, false otherwise
412 Resets buffer with empty data and restores original position. @param buffer the ByteBuffer to reset @param len length of empty data to insert @return the reset ByteBuffer
413 Resets a portion of a byte array with zeros. @param buffer the array to reset @param offset starting index for resetting @param len length of bytes to reset @return the modified buffer
414 Converts encoding state to use byte arrays. @return ByteArrayEncodingState with updated inputs and outputs
415 Converts current state to ByteBufferEncodingState. @return ByteBufferEncodingState with cloned inputs and allocated outputs
416 Converts current state to use ByteBuffer for decoding. @return ByteBufferDecodingState with cloned inputs and allocated outputs
417 Converts buffers to byte arrays for decoding. @return ByteArrayDecodingState with converted inputs and outputs
418 Generates a Cauchy matrix. @param a byte array to store the matrix @param m number of rows @param k number of columns
419 Inverts a matrix using Gaussian elimination. @param inMatrix input matrix to invert @param outMatrix output matrix where the inverse is stored @param n size of the square matrix
420 Encodes data using GF256 multiplication tables. @param gfTables precomputed GF256 tables @param dataLen length of the data to encode @param inputs array of input byte arrays @param inputOffsets offsets for each input array @param outputs array of output byte arrays @param outputOffsets offsets for each output array
421 Encodes input data using GF256 multiplication tables. @param gfTables precomputed GF256 tables @param inputs array of ByteBuffer inputs @param outputs array of ByteBuffer outputs
422 Returns a singleton instance of GaloisField. @param fieldSize size of the finite field @param primitivePolynomial polynomial used for field operations @return GaloisField instance
423 Solves Vandermonde system using given x and y arrays. @param x array of x-coordinates @param y array of y-coordinates
424 Constructs an ECBlock with default values. Initializes with both 'doFinal' and 'isComplete' set to false.
425 Updates reported byte count and processed byte count. @param count number of bytes to add
426 Reads a single byte from the input stream. @param inStream input stream to read from @return next byte as int, or -1 if end of stream is reached
427 Creates Huffman decoding tables for each group. @param alphaSize size of the alphabet @param nGroups number of groups
428 Implements a quicksort algorithm for data sorting. @param dataShadow Data object containing arrays to sort @param loSt Starting index of the range to sort @param hiSt Ending index of the range to sort @param dSt Depth level in the sorting process
429 Returns the number of bytes written to the stream. @return Total bytes written or throws an exception if stream is invalid
430 Returns the number of bytes read from the stream. @return total bytes read as a long
431 Returns remaining bytes in buffer. Checks stream and adds user buffer length. @return Total remaining bytes
432 Resets the stream and prepares for new data processing.
433 Constructs a Bzip2Compressor with default settings.
434 Returns bytes written to the stream. @return number of bytes written
435 Returns the number of bytes read from the stream. @return total bytes read as a long
436 Initializes a new compressor stream. @param out output stream to compress data into
437 Constructs a new Snappy decompressor with default buffer size.
438 Sets input data for processing. @param b byte array containing the input data @param off offset within the byte array to start reading from @param len length of the data to read
439 Determines if more input is needed for decompression. @return true if no more input is required, false otherwise
440 Decompresses data from input buffer into output array. @param b destination byte array @param off offset in the byte array @param len length of bytes to decompress @return number of bytes decompressed @throws IOException if an I/O error occurs
441 Initializes a new SnappyCompressor with default buffer size.
442 Compresses data into the provided buffer. @param b destination buffer @param off offset in the buffer @param len length of data to compress @return number of bytes written to the buffer @throws IOException if an I/O error occurs
443 Reinitializes the component with new configuration. @param conf new configuration settings
444 Initializes a new DecompressorStream. @param in input stream to decompress @throws IOException if an I/O error occurs
445 Returns the total remaining bytes to be consumed. @return Sum of user buffer and compressed direct buffer bytes left
446 Resets stream state for a fresh read.
447 Returns the number of bytes written. @return total bytes written
448 Returns the number of bytes read. @return Total bytes read from the stream
449 Creates an Lz4Decompressor with default buffer size. @param DEFAULT_DIRECT_BUFFER_SIZE initial buffer size
450 Sets input data for decompression. @param b byte array containing the input data @param off offset within the byte array to start reading from @param len number of bytes to read
451 Determines if more input is needed. @return true if no more input is required, false otherwise
452 Decompresses data from input buffer. @param b destination byte array @param off offset in the destination array @param len number of bytes to decompress @return number of bytes decompressed @throws IOException if an I/O error occurs
453 Constructs an Lz4Compressor with specified buffer size. @param directBufferSize size of the direct buffer
454 Compresses data into the provided buffer. @param b destination buffer for compressed data @param off offset in the destination buffer @param len maximum number of bytes to compress @return number of bytes written to the destination buffer @throws IOException if an I/O error occurs
455 Reinitializes the component with new configuration. @param conf new configuration settings
456 Retrieves a compression codec by its name. @param codecName name of the codec @return CompressionCodec object or null if not found
457 Returns the count of leased compressors for a given codec. @param codec CompressionCodec instance @return Count of leased compressors or 0 if codec is null
458 Returns count of leased decompressors for given codec. @param codec compression codec instance @return number of leased decompressors
459 Returns the appropriate Zlib compressor class. @param conf configuration settings @return ZlibCompressor or BuiltInZlibDeflater based on native library availability
460 Returns the appropriate zlib decompressor class. @param conf configuration settings @return ZlibDecompressor or BuiltInZlibInflater based on native library availability
461 Loads and initializes the native zlib library. Sets nativeZlibLoaded flag based on success.
462 Reinitializes the compressor with new configuration. @param conf Configuration object containing compression settings
463 Initializes a ZlibCompressor with specified parameters. @param level compression level setting @param strategy compression strategy setting @param header compression header configuration @param directBufferSize size of direct buffers for input/output
464 Returns the number of bytes written. Checks stream validity before retrieval. @return Number of bytes written to the stream
465 Returns the number of bytes read. Checks and returns the byte count from the stream.
466 Initializes a Zlib decompressor with given header and buffer size. @param header compression header containing configuration details @param directBufferSize size of the direct buffers for compression and decompression
467 Returns the number of bytes written to the stream. @return Number of bytes written
468 Returns the number of bytes read from the stream. @return Number of bytes read
469 Calculates remaining bytes in buffer. Checks stream and adds decompressed buffer length. @return Total remaining bytes
470 Resets the stream and internal buffers. @param userId unique user identifier @return UserProfile object or null if not found
471 Processes the trailer of a gzip stream to verify CRC and size. Throws IOException on verification failure.
472 Writes an integer as a variable-length long to the output stream. @param stream DataOutput stream to write to @param i integer value to write @throws IOException if I/O error occurs
473 Reads a variable-length long from input stream. @param stream DataInput source @return decoded long value @throws IOException if reading fails
474 Retrieves a ByteBuffer from the pool or allocates a new one. @param direct true for direct ByteBuffer, false for heap-based @param length desired buffer size in bytes @return ByteBuffer of specified size
475 Adds a ByteBuffer to the buffer pool. @param buffer ByteBuffer to be added
476 Returns the character at the specified position. @param position index of the character to retrieve @return Unicode code point or -1 if invalid position
477 Encodes a string and sets it to internal byte array. @param string the input string to encode
478 Sets the byte array content. @param utf8 source byte array containing UTF-8 encoded data @param start starting index in the source array @param len number of bytes to copy
479 Appends a segment of UTF-8 encoded bytes to the existing byte array. @param utf8 source byte array containing UTF-8 data @param start starting index in the source array @param len number of bytes to append
480 Reads data into buffer with known length. @param in DataInput source @param len Length of data to read @throws IOException if reading fails
481 Decodes UTF-8 byte array to string. @param utf8 input bytes in UTF-8 encoding @return decoded string @throws CharacterCodingException if decoding fails
482 Decodes a UTF-8 byte array segment. @param utf8 source byte array @param start starting index in the array @param length number of bytes to decode @param replace flag for replacing malformed input @return decoded string
483 Validates UTF-8 encoding of byte array. @param utf8 byte array to validate @throws MalformedInputException if input is not valid UTF-8
484 Adds a class to the map with a unique ID. @param clazz class to be added
485 Initializes AbstractMapWritable with default mappings. @param none @return void
486 Creates an option for file system operations. @param fs FileSystem instance to use @return Option configured with the given file system
487 Constructs a Key with specified value and weight. @param value byte array representing the key's value @param weight numerical weight associated with the key
488 Closes resources and cleans up parent container. Preserves input if configured to do so. @throws IOException if an I/O error occurs during cleanup
489 Converts a List to an array. @param list source list of elements @return array containing all elements from the list
490 Constructs an InputBuffer using a default Buffer.
491 Resets buffer with input data. @param input byte array containing data to reset buffer with @param length number of bytes from input to use
492 Resets buffer with specified input segment. @param input byte array containing data @param start starting index of the segment @param length length of the segment to reset
493 Retrieves the current position in the buffer. @return The current position as an integer.
494 Returns the length of the buffer. @return Length of the buffer as an integer
495 Reads an MD5 hash from a DataInput stream. @param in the input stream to read from @return an MD5Hash object populated with data from the stream @throws IOException if an I/O error occurs
496 Computes the MD5 hash of an input stream. @param in input stream to hash @return MD5Hash object representing the hash @throws IOException if reading from the input stream fails
497 Computes the MD5 hash of a data segment. @param data byte array containing the data to hash @param start starting index of the data segment @param len length of the data segment to hash @return MD5Hash object representing the computed hash
498 Computes MD5 hash for an array of byte arrays. @param dataArr array of byte arrays to hash @param start starting index for hashing @param len length of bytes to consider from each array @return MD5Hash object containing the computed hash
499 Generates hash code using quarter digest. @return integer hash code
500 Sets the MD5 digest from a hexadecimal string. @param hex 32-character hexadecimal string
501 Instantiates a Protobuf message from DataInput. @param protoClass the Protobuf class to instantiate @param dataIn source of input data @return Message object or throws IOException if fails
502 Synchronizes file or directory to disk. @param fileToSync the file or directory to sync @throws IOException if an I/O error occurs
503 Constructs a BooleanWritable with the specified boolean value. @param value the boolean value to be stored
504 Creates a retry policy based on remote exceptions. @param defaultPolicy default retry policy for unspecified exceptions @param exceptionToPolicyMap map of specific exceptions to their retry policies @return RetryPolicy object that depends on the type of exception
505 Checks if the queue is empty after a specified duration. @param time duration in milliseconds to check since last emptied @return true if queue is empty and duration has passed, false otherwise
506 Returns the current monotonic time in milliseconds. @return Current monotonic time in milliseconds
507 Creates a retry policy excluding remote and SASL exceptions. @param defaultPolicy base retry policy @param exceptionToPolicyMap custom policies for specific exceptions @return RetryPolicy instance with excluded exceptions
508 Retrieves connection ID for the first proxy. @return ConnectionId object
509 Parses a comma-separated string into a MultipleLinearRandomRetry object. @param s input string in the format "sleep1,retries1,sleep2,retries2,..." @return MultipleLinearRandomRetry object or null if parsing fails
510 Creates a retry policy based on exceptions. @param defaultPolicy default retry policy for unspecified exceptions @param exceptionToPolicyMap mapping of specific exceptions to retry policies @return ExceptionDependentRetry object with defined behaviors
511 Creates an IOException from a list of exceptions. @param exceptions List of IOExceptions to aggregate @return Single IOException or null if the list is empty
512 Returns the number of block regions. @return count of block regions in the data index
513 Retrieves the default compression algorithm name. @return Name of the default compression algorithm
514 Reads a variable-length integer. @param in DataInput source @return int value or throws exception if out of range
515 Writes an integer as a variable-length long. @param out DataOutput to write to @param n integer to write @throws IOException if I/O error occurs
516 Checks if the file metadata indicates the file is sorted. @return true if the file is sorted, false otherwise
517 Returns the count of entries in the file. @return number of records in the file
518 Closes the BCF reader. @throws IOException if an I/O error occurs while closing
519 Retrieves the comparator name from TFile metadata. @return Comparator string or null if not set
520 Constructs a ByteArray from a BytesWritable. @param other source BytesWritable object
521 Initializes a ByteArray with the given buffer. @param buffer source byte array to initialize from
522 Finds the block index near a given offset. @param offset the target offset @return the block index or -1 if not found
523 Finds the lower bound of a key in a sorted TFile. @param key the key to search for @return index of the first element not less than the key, or -1 if not found
524 Finds the upper bound of a key in an indexed list. @param key the RawComparable key to search for @return index of the first element greater than the key, or -1 if not found
525 Compares this location to another based on block and record indices. @param other the Location object to compare with @return negative if less, positive if greater, zero if equal
526 Retrieves key from buffer. @param buf byte array containing data @return extracted key as integer @throws IOException if reading fails
527 Reads a value into a buffer from an input stream. @param buf byte array to store the read data @param offset starting position in the buffer @return number of bytes read @throws IOException if an I/O error occurs
528 Returns the raw size of the block region. @return Size in bytes
529 Returns the compressed size of the block region. @return Size in bytes
530 Returns the starting position of the block region. @return Starting offset as a long value
531 Constructs an OutputStream from a DataOutput. @param out DataOutput instance to wrap or convert @return OutputStream equivalent of the provided DataOutput
532 Compares two byte arrays lexicographically. @param buffer1 first byte array @param offset1 starting index in buffer1 @param length1 number of bytes to compare from buffer1 @param buffer2 second byte array @param offset2 starting index in buffer2 @param length2 number of bytes to compare from buffer2 @return negative if buffer1 < buffer2, positive if buffer1 > buffer2, zero if equal
533 Constructs a new DataOutputBuffer with a default Buffer.
534 Retrieves data from the buffer. @return byte array containing the data
535 Returns the length of the buffer. @return Length of the buffer as an integer
536 Writes an integer to the buffer at a specified offset. @param v integer value to write @param offset position in buffer where writing starts @throws IOException if an I/O error occurs
537 Calculates the distance between two nodes in a tree. @param node1 first node @param node2 second node @return distance between nodes or Integer.MAX_VALUE if not connected
538 Checks if a node is within a specified scope. @param node the node to check @param scope the scope path @return true if the node is in the scope, false otherwise
539 Splits the path of a node into components. @param node the Node object to get the path from @return array of path component strings
540 Returns the path representation of the current object. @return String representing the path
541 Removes a leaf node from the network topology. @param node the node to be removed
542 Retrieves datanodes in a specified rack. @param loc rack location string @return list of datanodes in the rack or empty list if not found
543 Retrieves a node by location. @param loc node location string @return Node object or null if not found
544 Generates a string representation of the tree structure. @return A formatted string with details about racks, leaves, and node paths.
545 Checks if two nodes are on the same rack. @param node1 first node to compare @param node2 second node to compare @return true if both nodes have the same parent, false otherwise
546 Chooses a random node from the parent node, excluding specified nodes. @param parentNode parent node to choose from @param excludedScopeNode node to exclude from consideration @param excludedNodes collection of nodes to exclude @param totalInScopeNodes total number of nodes in scope @param availableNodes number of available nodes after exclusions @return chosen random Node or null if no valid nodes are found
547 Calculates network location weight between two nodes. @param reader source node @param node destination node @return weight as integer, higher value indicates more distant locations
548 Adds a node to the map with an empty rack. @param node Node to be added
549 Transfers data from a file channel to another. @param fileCh source file channel @param position starting position in the file @param count number of bytes to transfer @param waitForWritableTime time spent waiting for writability @param transferToTime time spent transferring data @throws IOException if an I/O error occurs
550 Normalizes a collection of host names. @param names collection of host names to normalize @return list of normalized host names
551 Constructs a string with host details. @param destHost destination host name @param destPort destination port number @param localHost local host name @return formatted string with host information
552 Retrieves IP addresses within a specified subnet. @param subnet CIDR notation of the subnet @param returnSubinterfaces whether to include subinterface IPs @return list of matching InetAddress objects
553 Retrieves a specified number of free socket ports. @param numOfPorts the number of free ports to acquire (1-25) @return a set containing the free port numbers
554 Default constructor for RawScriptBasedMapping.
555 Initializes a new CachedDNSToSwitchMapping with the provided raw mapping. @param rawMapping the original DNSToSwitchMapping to cache
556 Initializes a NodeBase with a given path. @param path the file or directory path
557 Constructs a new NodeBase with a name and normalized location. @param name unique identifier for the node @param location raw location string to be normalized
558 Constructs a new NodeBase. @param name node's name @param location node's location @param parent parent node reference @param level hierarchical level of the node
559 Sends callback for a file descriptor. @param caller method name of the caller @param entries map of file descriptors to entries @param fdSet set of file descriptors @param fd file descriptor number @return true if file descriptor is closed, false otherwise
560 Checks if the reference count is open. @return true if open, false otherwise
561 Closes the DomainSocket, shutting down and closing the file descriptor. @throws IOException if an I/O error occurs during shutdown or close
562 Trims idle selectors older than the timeout. @param now current timestamp in milliseconds
563 Retrieves dependencies for a given name. @param name the input name to look up @return list of dependencies or empty list if none found
564 Sets the read timeout for the socket. @param timeoutMs timeout in milliseconds @throws SocketException if an error occurs setting the timeout
565 Retrieves IP addresses of a specified network interface. @param strInterface name of the network interface @param returnSubinterfaces whether to include subinterface IPs @return array of IP addresses or cached address if interface is not found @throws UnknownHostException if no such interface exists
566 Retrieves IP addresses for a specified network interface. @param strInterface name of the network interface @param returnSubinterfaces whether to include subinterface IPs @return list of InetAddress objects or default if interface not found @throws UnknownHostException if no valid interface is found
567 Retrieves the node group for a given location. @param loc network location of the node @return node group or null if not applicable
568 Generates a string representation of the network topology. @return A formatted string detailing the mapping and switch information
569 Checks if a DNSToSwitchMapping is a single switch. @param mapping the DNSToSwitchMapping to check @return true if the mapping is a single switch, false otherwise
570 Retrieves statistics for a specific log. @param recorderName name of the log recorder @param idx index of the statistics to retrieve @return SummaryStatistics object or null if not found
571 Prints generic command usage instructions. @param out PrintStream to output the usage information
572 Checks if the given class uses Log4j logging. @param clazz the class to check @return true if Log4j logger is used, false otherwise
573 Initializes LogThrottlingHelper with specified log period and recorder. @param minLogPeriodMs minimum time between logs in milliseconds @param primaryRecorderName name of the primary log recorder
574 Records log values for a given recorder. @param recorderName name of the recorder @param currentTimeMs current timestamp in milliseconds @param values variable number of log values to record @return LogAction if logged, otherwise DO_NOT_LOG
575 Determines if a string requires quoting. @param str input string to check @return true if the string needs quoting, false otherwise
576 Quotes HTML special characters in a string. @param item input string to be quoted @return quoted string or original if no quoting needed
577 Adds a Jersey resource package with a specified path. @param packageName the package containing Jersey resources @param pathSpec the URL path specification for the resources
578 Adds a servlet with specified name, path spec, and class. @param name servlet's unique name @param pathSpec URL pattern for the servlet @param clazz servlet class extending HttpServlet
579 Registers an internal servlet. @param name servlet name @param pathSpec URL pattern for the servlet @param clazz servlet class
580 Defines a servlet filter for given context and URLs. @param ctx ServletContextHandler instance @param name Filter name @param classname Full class name of the filter @param parameters Map of filter initialization parameters @param urls Array of URL patterns to apply the filter
581 Binds a server connector to a specified port, retrying with the next port if binding fails. @param listener the ServerConnector to bind @param port the initial port number to try @throws Exception if binding fails and no alternative ports are available
582 Retrieves XFrameOption enum based on string value. @param value string representation of the option @return corresponding XFrameOption enum or throws exception if invalid
583 Initializes a timer task to monitor file changes. @param filePaths list of file paths to monitor @param onFileChange action to perform on file change @param onChangeFailure action to handle change failure
584 Retrieves a non-negative integer property value. @param key the configuration key @param defaultValue default value if key not found @return non-negative integer value or throws MetricsException if negative
585 Checks if a required property exists in the configuration. @param key the property key to check @throws MetricsException if the property does not exist
586 Throws MetricsException if an error occurs in output stream. @param message custom error message
587 Throws a MetricsException with an error message and file path. @param message custom error message
588 Parses and converts the roll interval from properties to milliseconds. @return Milliseconds equivalent of the roll interval
589 Throws a MetricsException with detailed error information. @param message custom error message @param t the original Throwable causing the exception
590 Updates or retrieves a Record based on MetricsRecord. @param mr the source MetricsRecord @param includingTags whether to include tags in the Record @return updated or new Record object
591 Encodes a string into XDR format. @param s the string to encode
592 Emits a metric to Ganglia. @param groupName metric group name @param name metric name @param type metric type @param value metric value @param gConf Ganglia configuration @param gSlope metric slope @throws IOException if emission fails
593 Emits a metric to Ganglia. @param groupName group name of the metric @param name unique metric name @param type data type of the metric @param value value of the metric @param gConf configuration for Ganglia @param gSlope slope of the metric (increasing or decreasing) @throws IOException if an I/O error occurs during emission
594 Removes and returns an element from the queue. Blocks if the queue is empty until an element becomes available. @return the removed element @throws InterruptedException if interrupted while waiting
595 Initializes a MetricsRecordImpl with specified info, timestamp, tags, and metrics. @param info MetricsInfo object containing record metadata @param timestamp creation time of the record in milliseconds @param tags list of MetricsTag objects associated with the record @param metrics iterable collection of AbstractMetric objects representing metric data
596 Adds RPC enqueue time to the list and quantiles. @param enQTime enqueue time in milliseconds
597 Adds RPC queue time to the list and updates quantiles if enabled. @param qTime the time taken in the RPC queue
598 Adds RPC processing time and updates quantiles if enabled. @param processingTime the time taken to process an RPC in milliseconds
599 Adds a file write latency measurement. @param writeLatency the latency of the file write operation in milliseconds
600 Adds a file read latency measurement. @param readLatency the time taken to read a file in milliseconds
601 Initializes the metrics system with a given prefix. @param prefix namespace for the metrics @return initialized MetricsSystem instance
602 Returns the singleton instance of MetricsSystem. @return MetricsSystem implementation instance
603 Shuts down the singleton instance.
604 Adds metrics and tags to a builder. @param builder MetricsRecordBuilder instance to populate @param all flag to include all metrics or only changed ones
605 Calculates statistics for entries with sufficient samples. @param minSamples minimum number of samples required @return map of entry names to average values
606 Returns the count of processing samples. @return Number of samples in the last statistics
607 Rolls over averages for each metric in the current snapshot. Updates internal data structures with latest stats.
608 Adds metrics information to the cache. @param name unique identifier for the metric @param description description of the metric @return MetricsInfo object representing the added metric
609 Creates and caches a metrics tag. @param info metrics information object @param value tag value @return MetricsTag instance
610 Adds sample data to statistics. @param numSamples number of samples @param sum total sum of samples
611 Adds a value to statistics. @param x value to be added @return updated SampleStat object
612 Returns the mean processing time from the last statistics. @return mean processing time as a double
613 Returns the minimum value from a collection. @return the smallest value in the collection
614 Returns the maximum value from the data. @return the maximum value as a double
615 Resets min and max values.
616 Calculates the next TGT renewal time. @param tgtEndTime end time of current TGT @param now current time in milliseconds @param rp retry policy for handling failures @return next renewal time in milliseconds
617 Calculates standard deviation of data. @return Standard deviation as a double
618 Compresses sample data by merging items within allowable error.
619 Queries the estimated value at a given quantile. @param quantile desired quantile (0.0 to 1.0) @return estimated value at the specified quantile
620 Inserts sorted buffer items into samples list. Adjusts sample positions based on allowable error.
621 Retrieves a list of netgroup names. @return List containing netgroup names
622 Checks if a group is cached. @param group name of the group to check @return true if group is cached, false otherwise
623 Retrieves server properties for a given client address. @param clientAddress IP address of the client @param ingressPort port number (unused in this method) @return Map containing server properties
624 Retrieves client properties for a given server address. @param serverAddress IP address of the server @param ingressPort port number (unused in current implementation) @return Map containing client properties
625 Extracts host from Kerberos principal name. @param principalName full Kerberos principal name @return hostname extracted from the principal
626 Retrieves groups for a given user. @param user the username @return set of group names or empty if not found @throws IOException if an error occurs during retrieval
627 Refreshes user group mappings and caches. Clears the userToGroupsMap cache, refreshes groups, invalidates all caches, and clears negative cache if enabled.
628 Prints formatted message to output or console. @param format message format string @param args arguments for the format string
629 Updates a BiMap with entries from command output. @param map the BiMap to update @param mapName name of the map for logging @param command shell command to execute @param regex regex to split command output lines @param staticMapping mapping of IDs for HDFS compatibility @return true if any entries were updated, false otherwise @throws IOException if an error occurs during execution or IO operations
630 Constructs command array to run a script file. @param script the script file to execute @return command array suitable for ProcessBuilder
631 Switches to the next bind user upon authentication exception. @param e the authentication exception that triggered the switch
632 Writes data to the output stream, optionally wrapping it with SASL. @param inBuf input buffer containing data to write @param off starting offset in the buffer @param len number of bytes to write @throws IOException if an I/O error occurs
633 Closes resources by disposing SASL and closing output stream. @throws IOException if an I/O error occurs
634 Handles HTTP interactions by checking user agent, method, and headers. @param httpInteraction the current HTTP interaction to process @throws IOException if an I/O error occurs @throws ServletException if a servlet-related error occurs
635 Parses partial group names from provided strings. @param groupNames comma-separated group names @param groupIDs comma-separated group IDs @return set of unresolved group names @throws PartialGroupNameException if parsing fails due to mismatched counts
636 Creates a secret key from byte array. @param key byte array representing the secret key @return SecretKey object
637 Removes a stored token. @param ident Token identifier @throws IOException if an I/O error occurs
638 Resets key and token data to initial state.
639 Updates delegation key in storage. @param key DelegationKey to be updated @throws IOException if an I/O error occurs
640 Removes a stored master key. @param key DelegationKey object to be removed
641 Adds a delegation key to the manager. @param key DelegationKey object to be added @throws IOException if adding to a running SecretManager
642 Stores a delegation key and updates the master key. @param key DelegationKey to be stored @throws IOException if an I/O error occurs during storage
643 Sets an external delegation token secret manager. @param secretManager the new secret manager to set
644 Retrieves configuration properties with auth handler setup. @param configPrefix prefix for configuration keys @param filterConfig filter configuration object @return Properties object containing configuration settings
645 Retrieves HTTP user group information from context. @return UserGroupInformation object or null if not available
646 Checks if the request is a management operation. @param request HTTP request object @return true if it's a management operation, false otherwise
647 Checks if the resource is managed. @return true if managed, false otherwise @throws IOException if an I/O error occurs
648 Renews credentials using configuration. @param conf configuration settings for renewal @return expiration time of renewed credentials @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
649 Cancels the current operation using the provided configuration. @param conf Configuration object containing necessary settings @throws IOException if an I/O error occurs during cancellation @throws InterruptedException if the operation is interrupted
650 Wraps input stream if wrap is enabled. @param in original input stream @return wrapped or original input stream
651 Wraps output stream if necessary. @param out original output stream @return wrapped or original output stream @throws IOException if an I/O error occurs
652 Reads and processes SASL token data. @return Length of processed buffer or -1 on EOF @throws IOException if I/O error occurs
653 Closes the stream and releases resources. Calls disposeSasl() to clean up SASL authentication, resets stream positions, closes input stream, and marks as closed.
654 Constructs an AuthorizationException with the specified cause. @param cause the underlying reason for this exception
655 Checks if login was successful. @return true if login success, false otherwise
656 Updates the last login time for the user. @param loginTime timestamp of the last login
657 Initializes UserGroupInformation with a given Subject. @param subject the security context representing the logged-in user @throws IllegalStateException if the Subject does not contain a valid User
658 Retrieves the username of the user. @return the username as a String
659 Checks if the user has Kerberos authentication credentials. @return true if Kerberos is used, false otherwise
660 Returns the authentication method of the user. @return AuthenticationMethod object representing the user's auth method
661 Retrieves the real user associated with the current user group information. @return RealUser object or null if no real user is found
662 Retrieves the short name of the user. @return Short name of the user as a String
663 Sets the authentication method for the user. @param authMethod the new authentication method to set
664 Initializes a ReloadingX509TrustManager with specified parameters. @param type the truststore type @param location the path to the truststore file @param password the truststore password @throws IOException if an I/O error occurs @throws GeneralSecurityException if security issues arise
665 Initializes keystore manager with specified parameters. @param type keystore type @param location path to keystore file @param storePassword password for the keystore @param keyPassword password for the keys in the keystore @throws IOException if an I/O error occurs @throws GeneralSecurityException if a security error occurs
666 Retrieves resource by name. @param name resource identifier @return URL of the resource or null if not found
667 Retrieves configuration resource as an input stream. @param name resource name @return InputStream of the resource or null if not found
668 Retrieves configuration resource as a Reader. @param name resource name @return Reader for the resource or null if not found
669 Creates an SSL engine configured for the specified mode. @return Configured SSLEngine instance @throws GeneralSecurityException if security settings fail @throws IOException if I/O error occurs during setup
670 Configures SSL settings for HTTP connection. @param conn HttpURLConnection to be configured @return Configured HttpURLConnection @throws IOException if configuration fails
671 Constructs a new instance with the given configuration. @param conf Configuration object to be set
672 Handles executor timeout by logging a warning and returning true. @param executor the ShellCommandExecutor instance to check @param user the username associated with the command execution @return true if timeout occurs, false otherwise
673 Returns a string representation of command arguments. @return formatted command string with quoted arguments containing spaces
674 Reads an authentication method from input. @param in DataInput source @return AuthMethod enum value @throws IOException if reading fails
675 Adds a user to the list. @param user username to add @throws IllegalArgumentException if user is a wildcard or all users are allowed
676 Adds a group to the ACL. @param group name of the group to add
677 Removes a user from the list. @param user username to remove @throws IllegalArgumentException if user is a wildcard ACL value
678 Removes a specified group from the list. @param group name of the group to remove @throws IllegalArgumentException if the group is a wildcard
679 Converts users list to string. @return concatenated string of users
680 Converts groups list to string. @return comma-separated group names
681 Checks if the Kerberos ticket is for an original TGT. @param ticket KerberosTicket object to check @return true if the ticket is for an original TGT, false otherwise
682 Retrieves server properties based on client address. @param clientAddress IP address of the client @return Map of server properties, default if whitelisted or SASL otherwise
683 Validates that the provided codec uses AES/CTR/NoPadding or SM4/CTR/NoPadding. @param codec the CryptoCodec to validate
684 Returns the current position in the input stream. @return Current position as a long value @throws IOException if an I/O error occurs
685 Reads data from the underlying input stream into a ByteBuffer. @param inBuffer buffer to store read bytes @return number of bytes read, or -1 if end of stream reached
686 Converts a string to a CipherSuite. @param name the name of the cipher suite @return corresponding CipherSuite enum value @throws IllegalArgumentException if the name is invalid
687 Checks if a given crypto protocol version is supported. @param version the protocol version to check @return true if supported, false otherwise
688 Generates a random integer with the specified number of bits. @param numBits number of bits for the generated integer @return an integer with 'numBits' random bits
689 Creates a KeyProviderCryptoExtension for the given key provider. @param keyProvider the original key provider @return KeyProviderCryptoExtension instance
690 Retrieves the current key version for a given name. @param name the identifier of the key @return KeyVersion object or null if not found @throws IOException if an I/O error occurs
691 Generates a cryptographic key. @param size key size in bits @param algorithm encryption algorithm (e.g., AES, DES) @return generated key as byte array @throws NoSuchAlgorithmException if algorithm is unsupported
692 Creates an EncryptedKeyVersion for decryption. @param keyName name of the key @param encryptionKeyVersionName version name of the encryption key @param encryptedKeyIv initialization vector for the encrypted key @param encryptedKeyMaterial encrypted key material @return new EncryptedKeyVersion object
693 Creates a KeyProviderDelegationTokenExtension. @param keyProvider the KeyProvider to extend @return KeyProviderDelegationTokenExtension instance
694 Shuts down the encryption key version queue and destroys the SSL factory. @throws IOException if an error occurs during shutdown or destruction
695 Retrieves a ReadWriteLock for a given key. @param keyName unique identifier for the lock @return ReadWriteLock associated with the key
696 Appends a valid field to the StringBuilder. @param field the field to append @return the Builder instance for method chaining
697 Appends a key-value pair to the builder. @param key unique identifier for the value @param value associated with the key @return Builder instance for method chaining
698 Appends key-value pair if key is absent. @param key unique identifier for the value @param value associated with the key @return Builder instance
699 Generates a successful refresh response. @return RefreshResponse object indicating success
700 Converts byte array to UUID string. @param clientId byte array representing the client ID @return UUID string or empty if input is null or invalid
701 Offers an element to the underlying collection. @param e element to be offered @return true if successful, false otherwise
702 Returns the length of the call queue. @return Number of calls in the queue
703 Retrieves all super interfaces of a given protocol class. @param protocol the protocol class to inspect @return an array of Class objects representing all super interfaces
704 Retrieves server address from given proxy. @param proxy the proxy object @return InetSocketAddress of the server
705 Returns the current time in nanoseconds since an arbitrary point. @return Current monotonic time in nanoseconds
706 Retrieves the remote user information from the current call. @return UserGroupInformation object or null if no call is present
707 Generates fingerprint hashes for an array of methods. @param methods array of Method objects @return int array containing fingerprint hashes or null if input is null
708 Dispatches refresh requests to handlers. @param identifier unique request identifier @param args arguments for the handler @return list of RefreshResponse objects from handlers
709 Constructs a RemoteException with a class name and message. @param className name of the class where the exception occurred @param msg detailed error message
710 Unwraps remote exception if it matches any of the provided types. @param lookupTypes array of exception classes to check against @return IOException instance or original if no match found
711 Unwraps and returns a remote exception if possible. @return the unwrapped IOException or the current instance if unable to unwrap
712 Calculates processing cost based on timing details. @param details map containing timing values @return computed cost as a long integer
713 Returns the number of dropped connections. @return count of dropped connections as a long
714 Returns the number of open connections. @return count of open connections
715 Adds an element to the queue at the specified priority. @param priority the priority level of the queue @param e the element to add @throws InterruptedException if interrupted while waiting
716 Adds an element to the queue with a given priority. @param priority the priority level of the queue @param e the element to add @return true if the element was added, false otherwise
717 Adds classes to list for terse exception logging. @param exceptionClass variable number of exception classes to be added
718 Adds exception classes to be suppressed in logging. @param exceptionClass varargs of exception classes to suppress
719 Constructs an UnexpectedServerException with a specified message. @param message detailed error message
720 Constructs an RPC server exception with a specified message. @param message error description
721 Constructs an exception with a specified error message. @param message description of the RPC client error
722 Constructs an UnexpectedServerException with a message and a cause. @param message error message describing the exception @param cause underlying throwable that caused this exception
723 Constructs an RpcServerException with a message and cause. @param message detailed error message @param cause underlying exception causing this exception
724 Constructs an RPC client exception with a message and a cause. @param message descriptive error message @param cause underlying throwable that caused this exception
725 Adds a cost delta to the specified identity's raw and decayed call costs. @param identity unique identifier for the entity whose cost is being updated @param costDelta amount to add to the cost
726 Computes priority level based on cost and identity. @param cost the call cost associated with the identity @param identity unique identifier for the user or service @return priority level as an integer
727 Converts ServiceException to IOException. @param se original service exception @return IOException representation of the service exception
728 Executes an IPC call and handles exceptions. @param call the IPC call to execute @return result of the IPC call @throws IOException if a communication error occurs
729 Converts a string to a fixed ByteString. @param key input string to be converted @return ByteString representation of the input string
730 Returns a ByteString using a shared instance to minimize allocations. @param bytes byte array to convert @return ByteString representation of the input bytes
731 Sets call ID and retry count. Validates inputs. @param cid valid call identifier @param rc valid retry count @param externalHandler handler for external operations
732 Returns the address of the listener. @return InetSocketAddress of the listener
733 Retrieves all auxiliary listener addresses. @return Set of InetSocketAddress for auxiliary listeners
734 Stops a client and removes it from the cache if no more references exist. @param client the client to stop
735 Checks equality based on superclass implementation. @param obj the object to compare with @return true if objects are equal, false otherwise
736 Constructs a ProtobufWrapperLegacy for the given message. @param message the protobuf message to wrap
737 Sets up response for old version fatal error. @param response ByteArrayOutputStream to store the response data @param call RpcCall object containing call details @param rv Writable return value (not used in this method) @param errorClass class name of the error @param error error message @throws IOException if an I/O error occurs
738 Decrements the request counter and advances queue index if no requests left.
739 Sets an I/O exception and marks the call as complete. @param error the IOException to be set
740 Sets the RPC response and marks the call as complete. @param rpcResponse the response to be set
741 Reads data from the input stream with timeout handling. @return next byte of data or -1 if end of stream is reached @throws IOException if an I/O error occurs
742 Reads bytes into a buffer with retry on timeout. @param buf destination buffer @param off starting offset in the buffer @param len number of bytes to read @return number of bytes read or -1 if end of stream
743 Retrieves the remote IP address from the current call. @return InetAddress of the remote host or null if no call is present
744 Retrieves the remote port of the current call. @return Remote port number or 0 if no call is present
745 Retrieves established Quality of Protection (QOP) for auxiliary port. @return QOP string or null if not on auxiliary port
746 Retrieves the priority level of the current call. @return priority level as an integer, or 0 if no active call
747 Returns JSON string of open connections per user. @return JSON representation or null on error
748 Initializes a MachineList with host entries and address factory. @param hostEntries collection of host entries (IP addresses or CIDR ranges) @param addressFactory factory for creating InetAddress objects
749 Checks if the IP address is included. @param ipAddress the IP address to check @return true if included, false otherwise
750 Initializes SysInfoLinux with file paths and jiffy length. @param procfsMemFile path to memory info file @param procfsCpuFile path to CPU info file @param procfsStatFile path to system stats file @param procfsNetFile path to network stats file @param procfsDisksFile path to disks info file @param jiffyLengthInMillis length of a jiffy in milliseconds
751 Reads and parses /proc/meminfo file for memory statistics. @param readAgain flag to force re-reading the file
752 Returns the number of processors. Reads CPU info file to determine count. @return Number of processors
753 Returns the number of CPU cores. Reads system file to update core count if necessary. @return Number of CPU cores
754 Retrieves CPU frequency. Reads /proc/cpuinfo and returns parsed frequency. @return CPU frequency in kHz
755 Reads and processes CPU time data from /proc/stat.
756 Retrieves network bytes read. Reads proc net info file and returns byte count. @return number of network bytes read
757 Retrieves network bytes written. Reads proc net info file and returns bytes written. @return number of network bytes written
758 Reads disk statistics from "/proc/diskstats" file. Updates bytes read and written for disks.
759 Retrieves value by key. @param k the key to search for @return the associated value or null if not found
760 Removes and returns the value associated with the given key. @param k key to remove @return removed value or null if key not found
761 Removes an element by key from the linked list at a specific index. @param index the index of the linked list to search @param key the key of the element to remove @return the removed element or null if not found
762 Sets secure attributes for TransformerFactory to restrict external access. @param transformerFactory the factory to configure
763 Converts a string to a long, supporting size prefixes. @param s input string representing a number with optional 'k', 'm', 'g', etc. suffix @return parsed long value
764 Converts a long number to a string with a binary unit prefix. @param n the number to convert @param unit optional unit suffix @param decimalPlaces number of decimal places for non-exact divisions @return formatted string with unit prefix
765 Formats a fraction as a percentage string. @param fraction the value to format (e.g., 0.75 for 75%) @param decimalPlaces number of decimal places in the output @return formatted percentage string
766 Converts a byte array to a hexadecimal string. @param bytes the input byte array @param start starting index (inclusive) @param end ending index (exclusive) @return hexadecimal string representation of the specified range
767 Formats a double to two decimal places. @param d the number to format @return string representation of the formatted number
768 Terminates the application with the given ExitException. @param ee ExitException containing the termination status and message @throws ExitException if an error occurs during termination
769 Handles HaltException by logging and halting the JVM if enabled. @param he HaltException to be handled @throws HaltException if systemHaltDisabled is false or a higher priority error occurs
770 Adds a shutdown hook with specified priority and timeout. @param shutdownHook the Runnable to execute on shutdown @param priority execution priority (lower number means higher priority) @param timeout maximum time to wait for hook completion @param unit time unit for the timeout @throws IllegalArgumentException if shutdownHook is null @throws IllegalStateException if shutdown is already in progress
771 Removes a shutdown hook. @param shutdownHook the Runnable to remove @return true if the hook was successfully removed, false otherwise
772 Checks if a specific shutdown hook is registered. @param shutdownHook the Runnable to check for @return true if the hook is registered, false otherwise
773 Retrieves an input stream for a specified resource. @param resourceName name of the resource to retrieve @return InputStream or throws IOException if not found
774 Constructs a LineReader with the specified InputStream and default buffer size. @param in the InputStream to read from
775 Executes command periodically. @throws IOException if an I/O error occurs
776 Creates a daemon thread factory with a name prefix. @param prefix thread name prefix @return ThreadFactory that creates daemon threads
777 Expands array capacity if size exceeds threshold and max length isn't reached.
778 Creates an ArrayList from an iterator. @param elements iterator of elements to add @return ArrayList containing the elements
779 Adds all elements from an iterable to a collection. @param addTo the collection to add elements to @param elementsToAdd the iterable of elements to add @return true if any elements were added, false otherwise
780 Creates a new ArrayList with a specified initial capacity. @param initialArraySize the initial size of the array list @return an empty ArrayList with the given capacity
781 Writes JSON representation of an object to an output stream. @param instance the object to serialize @param dataOutputStream the output stream to write to @throws IOException if an I/O error occurs
782 Initializes operation duration with start and finish times set to current time.
783 Marks the task as completed and records the completion time.
784 Converts value to Duration in milliseconds. @return Duration representing the value in millis
785 Converts duration value to human-readable string. @return formatted duration as string
786 Computes monomial for given length in bytes. @param lengthBytes length of data in bytes @param mod modulus for Galois field operations @return computed monomial value
787 Composes CRCs using a monomial. @param crcA first CRC value @param crcB second CRC value @param monomial polynomial coefficient @param mod modulus for Galois field multiplication @return XOR result of multiplied CRC and second CRC
788 Converts an integer to a byte array. @param value the integer to convert @return byte array representing the integer
789 Converts a 4-byte array to a hexadecimal CRC string. @param bytes 4-byte input array representing the CRC @return Hexadecimal string of the CRC @throws IOException if input length is not 4
790 Converts byte array to a multi-CRC string representation. @param bytes input byte array, must be divisible by 4 @return formatted CRC string or throws IOException if length is invalid
791 Extracts files from a JAR archive to a directory based on regex. @param inputStream stream of the JAR file @param toDir target directory for extraction @param unpackRegex regex pattern for files to extract @throws IOException if an I/O error occurs
792 Extracts files from a JAR archive based on regex pattern. @param jarFile the source JAR file @param toDir destination directory for extracted files @param unpackRegex regex pattern for files to extract @throws IOException if an I/O error occurs
793 Finds the nth occurrence of a byte in a UTF array. @param utf byte array containing UTF data @param start starting index for search @param length number of bytes to consider from start @param b byte to find @param n occurrence number to find @return position of nth occurrence or -1 if not found
794 Associates a value with a key in the map using weak references. @param key unique identifier for the value @param value object to be stored @return previous value associated with the key or null if none
795 Removes entry by key and returns its value. @param key unique identifier of the entry to remove @return value associated with the removed key, or null if not found
796 Checks if the map contains a mapping for the specified key. @param key the key to check @return true if the map contains a mapping for the key, false otherwise
797 Creates a value using the factory and stores it with a weak reference. @param key unique identifier for the value @return created value instance
798 Removes entries with null values from the map. @return Number of removed entries
799 Creates a snapshot of current suppressed metrics and resets them. @return SuppressedSnapshot containing count and max wait time
800 Formats the difference between two times. @param finishTime end time in milliseconds @param startTime start time in milliseconds @return formatted time difference as a string
801 Parses a string into a map of key-value pairs. @param str input string containing key=value pairs separated by whitespace @return Map with keys and values, or empty if no valid pairs found
802 Splits a string using a separator, considering escape characters. @param str the input string to split @param escapeChar character used to escape separators @param separator character used as delimiter @return array of split strings or null if input is null
803 Escapes characters in a string. @param str input string to process @param escapeChar character used for escaping @param charsToEscape array of characters to be escaped @return new string with specified characters escaped
804 Unescapes a string by removing escape characters. @param str input string to unescape @param escapeChar character used as an escape @param charsToEscape array of characters that need escaping @return unescaped string or throws IllegalArgumentException if invalid
805 Retrieves the common version information. @return Version string of the application
806 Retrieves the current revision information. @return Revision string of the common version info
807 Retrieves the branch information. @return Branch name as a string
808 Retrieves the current date. @return String representation of the current date
809 Retrieves user information. @return User information as a string
810 Retrieves the common version information URL. @return URL as a string
811 Retrieves the source checksum. @return The source checksum as a string.
812 Retrieves the protocol version. @return Protocol version as a string
813 Retrieves the platform used for compilation. @return A string representing the compile platform.
814 Initializes a new FilteringRemoteIterator. @param source the original remote iterator to filter @param filter function to determine if elements should be included
815 Constructs a HaltableRemoteIterator. @param source the original remote iterator to wrap @param continueWork callable to determine if iteration should continue
816 Checks if there is a next element available. @return true if a next element exists, false otherwise @throws IOException if an I/O error occurs during fetching
817 Constructs a new instance with automatic closing enabled. @param o the object to manage
818 Submits a callable task to an executor. @param executor the execution context @param call the task to execute @return CompletableFuture representing pending completion of the task
819 Initializes a reference with a callable that may throw I/O exceptions. @param constructor callable to create or fetch the object
820 Creates a LazyAtomicReference from a Supplier. @param supplier provides the value when needed @return LazyAtomicReference initialized with the given supplier
821 Evaluates the reference. Throws exception if reference is closed.
822 Applies the transformation and returns the result. @throws IOException if an I/O error occurs during evaluation @return transformed value of type T
823 Executes a callable that may raise IOExceptions without checked exception handling. @param call the callable to execute @return result of the callable execution
824 Converts a CallableRaisingIOE to an unchecked Supplier. @param call callable that may raise IOException @return Supplier of type T, unchecked for IO exceptions
825 Creates a builder for iterating over remote items. @param items RemoteIterator of generic type I @return Builder instance initialized with the given iterator
826 Throws the first exception in the collection, suppressing others of different types. @param exceptions collection of exceptions to process @throws E the first exception in the collection, possibly with suppressed exceptions
827 Constructs a builder from an iterable of items. @param items collection of items to be processed
828 Enables exception suppression. @return Builder instance with exceptions suppressed
829 Unwraps and rethrows the inner exception of an ExecutionException. @param e the ExecutionException to process @throws IOException if the inner cause is an IOException
830 Throws the inner exception of a CompletionException. @param e the CompletionException to unwrap @throws IOException if the inner cause is an IOException
831 Configures an object using a Configuration if compatible classes are present. @param theObject the object to be configured @param conf the configuration settings
832 Retrieves class by name, throwing exception if not found. @param name fully qualified class name @return Class object @throws ClassNotFoundException if the class is not found
833 Prints thread information to a given stream. @param stream output stream for thread details @param title header title for the thread dump
834 Constructs a new Configuration instance. @param loadDefaults flag to determine if default settings should be loaded
835 Sends JSON error response for a servlet exception. @param response HTTP response object @param status HTTP status code @param ex the exception to be reported @throws IOException if writing to response fails
836 Creates a JSON response for a Jersey exception. @param status HTTP response status @param ex the exception to be processed @return Response object with error details in JSON format
837 Initializes a new instance of PureJavaCrc32C and resets its state.
838 Clears all elements from the collection.
839 Generates command to get groups for a user. @param user username @return array of command parts
840 Generates command to get group IDs for a user. @param user username @return array of strings representing the command
841 Returns the command to check permissions. @return Array of strings representing the command
842 Generates a command to set file permissions. @param perm permission string (e.g., "755") @param recursive true if the change should be applied recursively @return array of command strings for execution
843 Generates a command array for changing ownership. @param owner the new owner of the file or directory @return an array representing the chown command with the specified owner
844 Generates a command to create a symbolic link. @param target the path to the target file or directory @param link the path for the symbolic link @return array of command arguments for creating a symlink
845 Constructs a readlink command for the given symbolic link. @param link path to the symbolic link @return array of command-line arguments for executing readlink
846 Generates a signal kill command for a process. @param code signal code to send (0 checks if alive) @param pid process ID to target @return String array representing the shell command
847 Appends script extension to file. @param parent directory containing the file @param basename base name of the file @return File with appended script extension
848 Checks for Hadoop home directory. @return File object representing Hadoop home or throws FileNotFoundException if not found
849 Retrieves the Hadoop home directory. @throws FileNotFoundException if Hadoop home is not found or previously failed
850 Retrieves the canonical File object for a specified executable within the Hadoop bin directory. @param hadoopHomeDir root directory of Hadoop installation @param executable name of the executable file to find @return canonical File object for the executable @throws FileNotFoundException if any part of the path is invalid or missing
851 Returns the WinUtils file or throws an exception if previously failed. @return File object for WinUtils @throws FileNotFoundException if WinUtils file is not found
852 Terminates all child shell processes and clears the registry.
853 Shuts down a thread with a default wait time. @param thread the thread to shut down @return true if shutdown successful, false otherwise
854 Shuts down ExecutorService with a default wait time. @param service ExecutorService to shut down @return true if all tasks completed before timeout, false otherwise @throws InterruptedException if interrupted while waiting
855 Adds a new phase to the progress. @return newly created Progress object
856 Adds a new progress phase with specified weightage. @param weightage the weightage of the new phase @return the newly created Progress object
857 Calculates internal progress based on current phase. @return Combined progress from completed and current phases
858 Marks task as complete and notifies parent. @param none @return void
859 Reads string data from a specified file path. @param path file path to read data from @return string representation of the file content or null if file is not found @throws Exception if an error occurs during file reading
860 Retrieves string data from a specified path. @param path the location of the data @param stat object to capture metadata @return decoded string or null if data is not found
861 Sets data at specified path with given version. @param path location to store data @param data string representation of the data @param version version number for the data @throws Exception if operation fails
862 Creates a persistent ZooKeeper node with specified ACLs. @param path the path of the node to create @param zkAcl list of Access Control Lists for the node @return true if node was created, false if it already exists
863 Deletes a node at the specified path. @param path the path of the node to delete @return true if deletion is successful, false otherwise
864 Deletes a node safely with ACL checks. @param path the node path to delete @param fencingACL access control list for fencing @param fencingNodePath path of the fencing node
865 Adds a program class with a description. @param name unique identifier for the program @param mainClass primary class of the program @param description brief description of the program
866 Sets implementation method by reflection. @param targetClass class containing the method @param methodName name of the method @param argClasses argument types of the method @return Builder instance for chaining
867 Sets up a hidden method implementation. @param targetClass the class containing the method @param methodName the name of the method @param argClasses argument types for the method @return Builder instance for chaining
868 Creates a no-operation unbound method. @param name method name @return UnboundMethod that does nothing
869 Checks if all provided methods are not no-ops. @param methods array of UnboundMethod objects to check @return true if none of the methods are no-ops, false otherwise
870 Checks if a method is available. @param method the method to check @return true if the method is not a no-op, false otherwise
871 Binds a non-static method to a receiver object. @param receiver the object to which the method is bound @return a BoundMethod instance representing the bound method
872 Converts the current method to a static representation. @return StaticMethod instance representing this method
873 Finds the JAR file containing a given class. @param clazz the class to search for @return the path to the JAR or null if not found
874 Finds the location of a class. @param clazz the Class object to locate @return file path or null if not found
875 Writes checksum value to output stream. @param out DataOutputStream to write to @param reset flag to reset after writing @return size of written data or 0 if none written @throws IOException on write error
876 Writes checksum value to buffer. @param buf byte array to write to @param offset starting position in buffer @param reset flag to reset the checksum after writing @return number of bytes written or 0 if size is invalid @throws IOException if checksum type is unknown
877 Creates a rate limiter with specified capacity. @param capacity max allowed operations, 0 for unlimited @return RateLimiting instance based on capacity
878 Registers UNIX signal handlers. @param log logger for logging errors and info
879 Initializes a LightWeightGSet with a specified length. @param recommended_length suggested size for the set
880 Retrieves and updates host details based on includes and excludes. @param includes set to add included hosts @param excludes set to add excluded hosts
881 Retrieves and updates host details. @param includeHosts set to add included hosts @param excludeHosts map to update excluded hosts
882 Computes a hash value for a given byte array. @param key the input byte array @param nbytes the number of bytes to hash @param initval initial hash value @return the computed hash value
883 Returns a Hash instance based on the specified type. @param type hash algorithm type (JENKINS_HASH or MURMUR_HASH) @return Hash instance or null if invalid type
884 Constructs an empty Counting Bloom Filter.
885 Constructs a new BloomFilter instance.
886 Constructs a new instance of DynamicBloomFilter.
887 Generates multiple hash values for a given key. @param k the key to hash @return array of hash values
888 Constructs an AutoCloseableLock using a new ReentrantLock.
889 Releases resources associated with the object.
890 Prints error message and stack trace. @param e exception to log @param text error message format @param args arguments for the message format
891 Logs an error code and message. @param errorcode numeric error identifier @param text descriptive error message
892 Logs class loading details. @param name class name @param clazz Class object
893 Retrieves a clone of the latest GC data. @return Cloned GcData object containing current GC information
894 Initializes a new instance of PureJavaCrc32 and resets its state.
895 Executes shutdown hooks with timeout handling. @return Number of hooks that timed out
896 Adds an element to the heap. @param element the element to add
897 Removes and returns the top element from the heap. @return the top element or null if the heap is empty
898 Adjusts the top element of the heap. Calls downHeap to maintain heap property.
899 Creates a HashSet from an iterator. @param elements iterator of elements to add @return HashSet containing the elements
900 Creates a HashSet with an initial capacity optimized for the expected size. @param expectedSize the number of elements expected to be added to the set @return a HashSet with the specified initial capacity
901 Updates currentValue to a new value if greater. @param newValue the target value to set @throws IllegalStateException if newValue is less than current value
902 Constructs and returns a TableListing. @return TableListing object configured with columns, header visibility, and wrap width
903 Checks if a given key is deprecated. @param key the key to check @return true if the key is deprecated, false otherwise
904 Checks if a deprecated feature has been warned about. @param name the name of the deprecated feature @return true if warning has been issued, false otherwise
905 Reloads all existing configurations.
906 Adds a default resource by name. @param name the name of the resource to add
907 Converts a time duration string to the specified unit. @param name description of the time duration @param vStr input time duration as a string @param defaultUnit default TimeUnit if parsing fails @param returnUnit desired TimeUnit for conversion @return converted time duration in specified units
908 Retrieves all properties by a list of tags. @param tagList list of property tags to search for @return Properties object containing all matching properties
909 Redacts sensitive configuration values. @param key configuration key @param value configuration value to be potentially redacted @return redacted value or original if not sensitive
910 Redacts XML value if config is sensitive. @param key configuration key @param value XML value to be redacted or returned @return REDACTED_XML if sensitive, otherwise original value
911 Starts a server reconfiguration task. Throws IOException if the server is stopped or another task is running.
912 Constructs a DeprecationContext by merging another context and deltas. @param other the original DeprecationContext to merge from, can be null @param deltas array of DeprecationDelta to apply
913 Constructs a ReconfigurationException with detailed property change info. @param property name of the reconfigured property @param newVal new value after reconfiguration @param oldVal old value before reconfiguration @param cause underlying exception causing the reconfiguration issue
914 Constructs a ReconfigurationException with details. @param property the configuration property name @param newVal the new value of the property @param oldVal the old value of the property
915 Checks if manual HA state management is allowed. @param target the HAServiceTarget to check @return true if manual management is OK, false otherwise
916 Executes a command on a remote session. @param session JSch session object @param cmd command to execute @return exit status of the command @throws JSchException, InterruptedException, IOException if execution fails
917 Checks if the service is eligible for failover. Throws ServiceFailedException if not eligible due to health or state issues.
918 Reads data from a file range into a direct ByteBuffer using an I/O operation. @param range the FileRange specifying the offset and length to read @param buffer the ByteBuffer to store the read data @param operation the Function4RaisingIOE performing the actual I/O read @throws IOException if an I/O error occurs during reading
919 Validates and sorts a list of file ranges. @param input list of file ranges to validate and sort @param fileLength optional total file length for validation @return sorted list of validated file ranges @throws EOFException if any range is invalid
920 Constructs a BlockManager with given block data. @param blockData configuration data for blocks
921 Releases BufferData by doing nothing since buffers are allocated anew each time. @param data BufferData to be released
922 Releases an item back to the pool. @param item the item to release @throws IllegalArgumentException if the item is not part of this pool @throws IllegalStateException if release operation is interrupted
923 Throws an exception if the current state is not one of the specified states. @param states array of valid states
924 Ensures a string is not null and not empty. @param arg the string to check @param argName name of the argument for error messages
925 Validates that the collection is not null and contains the specified number of elements. @param collection the collection to check @param numElements the required number of elements in the collection @param argName name of the argument for error messages
926 Checks if a given file path exists. @param path the file path to check @param argName name of the argument for error message clarity
927 Initializes a bounded resource pool. @param size maximum number of resources in the pool
928 Initializes a BufferPool with specified size and buffer size. @param size maximum number of buffers in the pool @param bufferSize size of each buffer @param prefetchingStatistics statistics for tracking memory allocation
929 Requests prefetch of a block by number. @param blockNumber the identifier of the block to prefetch
930 Constructs a new BufferData instance. @param blockNumber the block number identifier @param buffer the ByteBuffer containing data
931 Initializes a Retryer with specified delays and interval. @param perRetryDelay delay between retries in milliseconds @param maxDelay maximum retry delay in milliseconds @param statusUpdateInterval interval for updating status in milliseconds
932 Checks if an array is not null and not empty. @param array the array to check @param argName name of the argument for error messages
933 Validates that a byte array is not null and not empty. @param array the byte array to validate @param argName name of the argument for error messages
934 Validates that an array is not null and not empty. @param array the short array to validate @param argName name of the argument for error messages
935 Validates that an integer array is not null and not empty. @param array the integer array to validate @param argName name of the argument for error messages
936 Ensures an array is not null and has at least one element. @param array the array to check @param argName name of the argument for error messages
937 Ensures the iterable is not null and contains elements. @param iter the iterable to check @param argName name of the argument for error messages
938 Deletes files in bulk. @param paths collection of file paths to delete @return list of entries with failed deletions and error messages
939 Applies a function to an IOStatisticsSnapshot. @param source the source object containing statistics @param fun the function to apply, may raise IOE @return result of applying the function
940 Initializes a FlagSet with given parameters. @param enumClass the Enum class for flag values @param prefix common prefix for flag names @param flags initial set of flags, nullable
941 Closes the file system resource. Logs debug information and processes delete-on-exit operations. Removes entry from cache.
942 Compares this file status with another. @param o object to compare with, must be a FileStatus @return negative if less, zero if equal, positive if greater
943 Compares this FileStatus to another based on natural ordering. @param o the other FileStatus to compare @return comparison result as an integer
944 Converts FileStatus array to Path array. @param stats FileStatus array to convert @param path default Path if stats is null @return Path array containing paths from stats or single default path
945 Checks if the specified path has a given capability. @param path the file system path to check @param capability the capability to verify @return true if the path supports the capability, false otherwise @throws IOException if an I/O error occurs
946 Creates a JSON serializer for IOStatisticsSnapshot. @return JsonSerialization instance configured for IOStatisticsSnapshot
947 Converts IOStatistics to StorageStatistics. @param name storage name @param scheme storage scheme @param source IO statistics source @return StorageStatistics object
948 Returns storage statistics. @return StorageStatistics object with empty data and URI as identifier
949 Constructs a PathIsDirectoryException. @param path the file path that is a directory
950 Constructs an exception indicating that the specified path is not a directory. @param path the invalid file path
951 Constructs a new PathOperationException. @param path the path where the operation is not supported
952 Constructs an exception indicating a non-empty directory. @param path the path to the directory
953 Sets buffer size. @param bufSize new buffer size value @return this builder instance
954 Sets the replication value. @param replica new replication level @return this builder instance
955 Sets block size. @param blkSize block size in bytes @return this builder instance
956 Marks builder as recursive and returns current instance. @return Builder instance with recursive flag set
957 Adds creation flag and returns builder instance. @return current builder object with creation flag set
958 Sets or clears the OVERWRITE flag. @param overwrite true to set, false to clear the flag @return this builder instance
959 Appends data to the builder. @return this Builder instance with APPEND flag set
960 Sets the array of hostnames. @param hosts array of hostname strings @throws IOException if an I/O error occurs during string interning
961 Sets the array of cached hosts. @param cachedHosts array of hostnames to cache
962 Sets the array of names. @param names array of name strings to be set @throws IOException if an error occurs during string interning
963 Sets the array of topology paths. @param topologyPaths array of file paths or null to reset @throws IOException if interning fails
964 Checks if a file exists at the specified path. @param f Path to the file @return true if it's a file, false otherwise @throws IOException if an I/O error occurs
965 Wraps an IOException with a custom message. @param path the file/directory path being processed @param methodName the method where the exception occurred @param exception the original IOException to wrap @return wrapped IOException or PathIOException if unable to wrap
966 Synchronizes input stream to specified position. @param position target position for synchronization @throws IOException if an I/O error occurs
967 Resets data position to the first record. @throws IOException if an I/O error occurs
968 Registers expression classes with the factory. @param factory ExpressionFactory instance to register expressions with
969 Registers various command classes with the given CommandFactory. @param factory CommandFactory to register commands with
970 Expands file pattern into matching file paths. @param filePattern pattern containing wildcards @return list of fully expanded file paths @throws IOException if an I/O error occurs
971 Lists file statuses matching the given filter. @param f directory path to search @param filter criteria for filtering files @return array of FileStatus objects @throws FileNotFoundException if directory not found @throws IOException on I/O error
972 Lists file statuses for given paths. @param files array of paths to check @param filter criteria to apply to each path @return array of FileStatus objects matching the filter @throws FileNotFoundException if a file is not found @throws IOException if an I/O error occurs
973 Retrieves a delegation token for the specified URL and token. @param url target service URL @param token existing authentication token @param renewer user allowed to renew the token @return Delegation token or null if not applicable @throws IOException on I/O errors @throws AuthenticationException on auth failure
974 Renews delegation token. @param url the URL to send the request @param token the delegation token to renew @return expiration time of the renewed token in milliseconds @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
975 Cancels a delegation token. @param url URL of the service @param token token to be canceled
976 Constructs a FileEncryptionInfo object. @param suite encryption cipher suite @param version cryptographic protocol version @param edek encrypted data encryption key @param iv initialization vector @param keyName encryption key name @param ezKeyVersionName easy key version name
977 Sets file system permissions. @param perm new permissions to apply @return this builder instance for method chaining
978 Sets checksum option. @param chksumOpt the checksum option to apply @return this builder instance for method chaining
979 Wraps an IOException with a checked exception. @param cause the original IOException to be wrapped
980 Constructs a new FsLinkResolution with a given function. @param fn the function to resolve file system links, must not be null
981 Initializes a new GlobBuilder with the given FileContext. @param fc FileContext to be used for building globs
982 Initializes a new GlobBuilder with a file system. @param fs the file system to use
983 Sets file system permission. @param perm file permission to set @return current builder instance
984 Sets the progress tracking object. @param prog non-null Progressable instance to track progress @return this builder instance for method chaining
985 Sets checksum option and returns builder. @param chksumOpt checksum option to set @return this Builder instance
986 Validates arguments for writing to a byte array. @param b the byte array @param off offset in the byte array @param len number of bytes to write @throws IOException if validation fails
987 Compares two strings ignoring case. @param s1 first string, must not be null @param s2 second string @return true if both strings are equal ignoring case, false otherwise
988 Checks if the client context is stale. @param ctx client context object @return true if the client is stale, false otherwise
989 Retrieves or creates statistics for a file system. @param scheme file system scheme @param cls file system class @return Statistics object for the given file system
990 Copies bytes from input stream to output stream. @param in source InputStream @param out destination OutputStream @param buffSize buffer size for copying @param close whether to close streams after copying @throws IOException if an I/O error occurs
991 Copies bytes from an InputStream to an OutputStream. @param in input stream to read from @param out output stream to write to @param count number of bytes to copy @param close whether to close streams after copying @throws IOException if I/O error occurs
992 Performs disk I/O checks on a directory. @param dir directory to check @throws DiskErrorException if disk I/O fails after retries
993 Checks if any storage type quota is set. @return true if at least one storage type has a quota, false otherwise
994 Checks if any quota-supported storage type is consumed. @return true if at least one quota-supported type is consumed, false otherwise
995 Checks equality with another object. @param o the object to compare @return true if equal, false otherwise
996 Returns the hash code of the object. @return hash code value
997 Resets samples and sum to zero.
998 Sets this statistic's samples and sum from another MeanStatistic. @param other MeanStatistic to copy data from
999 Converts IOStatistics to a string representation. @param statistics the IOStatistics object to convert @return a string with statistics details or an empty string if null
1000 Maps a map to a sorted string representation. @param sb StringBuilder to append the result @param type type of the map entries @param map input map to process @param isEmpty predicate to check if an entry is empty
1001 Tracks duration with a default count of 1. @param key identifier for the duration tracking @return DurationTracker object
1002 Returns an iterator over long statistics. Combines counter and gauge data. @return Iterator of LongStatistic objects
1003 Records a timed operation with statistics. @param prefix identifier for the operation @param durationMillis duration of the operation in milliseconds
1004 Constructs and returns an IOStatistics object. @return IOStatistics object containing aggregated I/O statistics
1005 Adds a long function counter to track statistics. @param key unique identifier for the counter @param eval function to evaluate and count @return DynamicIOStatisticsBuilder instance
1006 Adds a long function gauge to the builder. @param key unique identifier for the gauge @param eval function to evaluate and get a long value @return this builder instance
1007 Adds a minimum function for long values. @param key identifier for the statistic @param eval function to evaluate long value @return this builder instance
1008 Adds a maximum function to track long values. @param key identifier for the metric @param eval function to evaluate long value from input @return this builder instance
1009 Adds a mean statistic function to the builder. @param key unique identifier for the statistic @param eval function to calculate the mean statistic @return this DynamicIOStatisticsBuilder instance
1010 Registers an interrupt handler for a given signal name. @param signalName the name of the signal to handle
1011 Takes a snapshot of statistics. @return Map containing current statistics
1012 Creates a snapshot of the given map. @param source original map to snapshot @return new map containing same entries as source
1013 Creates and returns an IOStatisticsSnapshot. @return A new IOStatisticsSnapshot instance
1014 Constructs an IOStatisticsContextImpl with specified thread ID and context ID. @param threadId unique identifier for the thread @param id unique identifier for the IO statistics context
1015 Creates and returns an IOStatisticsSnapshot instance. @return IOStatisticsSnapshot object capturing current I/O statistics
1016 Checks if IO statistics context is enabled. @return true if enabled, false otherwise
1017 Retrieves I/O statistics. @return IOStatistics object containing I/O metrics
1018 Retrieves I/O statistics. @return IOStatistics object containing I/O metrics
1019 Retrieves I/O statistics. @return IOStatistics object containing I/O metrics
1020 Retrieves I/O statistics. @return IOStatistics object containing I/O metrics
1021 Retrieves I/O statistics. @return IOStatistics object containing I/O metrics
1022 Retrieves I/O statistics from the wrapped stream. @return IOStatistics object containing I/O metrics
1023 Retrieves I/O statistics. @return IOStatistics object containing I/O metrics
1024 Retrieves I/O statistics. @return IOStatistics object containing I/O metrics
1025 Retrieves I/O statistics. @return IOStatistics object containing I/O metrics
1026 Verifies CRC checksums for chunked data. @param type data type identifier @param algorithm checksum calculation algorithm @param data input byte array @param dataOffset starting offset in the data array @param dataLength length of data to verify @param bytesPerCrc number of bytes per CRC segment @param crcs expected CRC values array @param crcsOffset starting offset in the CRCs array @param filename source file name for error reporting @param basePos base position for error reporting @throws ChecksumException if CRC verification fails
1027 Updates decryptor with new IV. @param decryptor the Decryptor instance to update @param position current position for counter calculation @param iv initialization vector to be updated
1028 Encrypts data from input buffer to output stream. Handles padding and ensures proper buffer management.
1029 Constructs a new MD5MD5CRC32GzipFileChecksum with default values.
1030 Constructs a new instance with default values.
1031 Initializes a new GlobPattern with the specified pattern. @param globPattern the pattern to be used for matching
1032 Converts a File to a shell-compatible path string. @param file the File object to convert @return the shell-compatible path as a String @throws IOException if an I/O error occurs
1033 Generates a secure shell path for a file. @param file the File object to convert to a shell path @return a String representing the secure shell path @throws IOException if an I/O error occurs
1034 Unzips files from an input stream to a specified directory. @param inputStream the ZIP archive input stream @param toDir target directory to extract files @throws IOException if extraction fails
1035 Unzips a file to a specified directory. @param inFile the input ZIP file @param unzipDir the target directory for extraction @throws IOException if an I/O error occurs
1036 Disconnects an SFTP channel from the pool. @param channel the ChannelSftp object to disconnect
1037 Shuts down the connection manager by disconnecting all active connections.
1038 Sets buffer size and initializes checksum. @param size desired buffer size
1039 Constructs a Statistics object by copying another. @param other the Statistics object to copy from
1040 Aggregates total bytes read from all statistics data. @return Total bytes read as a long value
1041 Calculates total bytes written. @return Total bytes written across all statistics
1042 Calculates total read operations. @return Sum of all read and large read operations
1043 Aggregates the total number of large read operations. @return Total count of large read operations across all statistics data
1044 Aggregates and returns the total number of write operations. @return Total count of write operations across all statistics data
1045 Calculates total remote read time. @return Total remote read time in milliseconds
1046 Aggregates statistics data from all sources. @return Aggregated StatisticsData object
1047 Aggregates total bytes read using erasure coding. @return Total bytes read from all statistics data
1048 Resets statistics by negating and adding to root data.
1049 Validates file operation flags and conditions. @param path the file path to validate @param pathExists whether the file exists @param flag set of flags for file operations @throws IOException if validation fails
1050 Validates that the given flag set contains the APPEND flag. @param flag EnumSet of CreateFlag to be validated
1051 Validates and constructs a URI with the specified scheme and port. @param uri original URI to validate @param supportedScheme required scheme for the URI @param authorityNeeded if true, the URI must have an authority @param defaultPort default port to use if none is specified in the URI @return constructed URI with validated scheme and port @throws URISyntaxException if URI construction fails
1052 Initializes an ArrayPrimitiveWritable with a specified component type. @param componentType the class of the array's components
1053 Converts a permission string to an integer bitmask. @param permString string representing permissions ('r', 'w', 'c', 'd', 'a') @return integer bitmask of permissions or throws BadAclFormatException if invalid character is found
1054 Processes and combines checksum options. @param defaultOpt default checksum option @param userOpt user-specified checksum option @return combined ChecksumOpt object
1055 Returns the canonicalized URI. @return Canonicalized URI of the resource
1056 Deprecated constructor for creating a content summary. @param length total size of content in bytes @param fileCount number of files @param directoryCount number of directories
1057 Retrieves file system status. @return FsStatus object representing current status @throws IOException if an I/O error occurs
1058 Constructs a new HttpReferrerAuditHeader using a builder. @param builder the builder containing header configuration
1059 Releases a buffer associated with the given data. @param data object that holds buffer reference
1060 Constructs a new SemaphoredDelegatingExecutor. @param executorDelegatee underlying ExecutorService to delegate tasks @param permitCount number of permits for semaphore control @param fair true if semaphore should be fair in granting permits
1061 Releases the 'ready' buffer block closest to a given block number. @param blockNumber reference block number for proximity calculation
1062 Returns the current position in the buffer. Throws an exception if the buffer is invalid.
1063 Checks if position is within current buffer. @param pos the position to check @return true if position is within buffer bounds, false otherwise
1064 Returns the start offset of the buffer. @return the start offset value
1065 Retrieves the current I/O statistics context. @return IOStatisticsContext for the current thread or an empty context if disabled
1066 Sets the IO statistics context for the current thread. @param statisticsContext the IOStatisticsContext to set, or null to remove it
1067 Merges sorted file ranges into combined ranges. @param sortedRanges list of sorted FileRange objects @param chunkSize size of chunks to align ranges @param minimumSeek minimum seek distance for merging @param maxSize maximum size for a combined range @return List of CombinedFileRange objects
1068 Finds checksum ranges for file data. @param dataRanges list of file ranges to process @param bytesPerSum number of bytes per checksum segment @param minSeek minimum seek distance between segments @param maxSize maximum size of a combined range @return list of CombinedFileRange objects representing checksum ranges
1069 Constructs a new Name with default visibility set to true.
1070 Applies expressions to path data recursively. @param item PathData object to process @param depth current recursion depth (not used) @return combined Result of all child expressions @throws IOException if an I/O error occurs
1071 Returns cached or newly created FindOptions. @return FindOptions instance
1072 Parses command-line arguments. @param args list of command-line arguments
1073 Returns the command description. If deprecated, provides deprecation notice and replacement command. @return Description string of the command
1074 Displays a warning message. @param message the warning message to be displayed
1075 Generates command usage string. @return formatted command usage or just name if no usage defined
1076 Initializes ScopedAclEntries with given ACL entries. @param aclEntries list of Access Control List entries
1077 Prints table data to a PrintStream. @param out destination stream for output
1078 Creates a new Location with movement allowance. @param allow flag indicating if movement is allowed @return Location object configured with movement permission
1079 Creates a new Data instance with specified change allowance. @param allow indicates whether changes are allowed @return Data object configured with change allowance
1080 Constructs a new Shell instance with default ID.
1081 Generates a delegation token for authentication. @param dToken input delegation token @return DelegationTokenAuthenticatedURL.Token object
1082 Lists file statuses in a directory. @param f path to the directory @return iterator of LocatedFileStatus objects @throws IOException if an I/O error occurs
1083 Opens a file with specified options. @param path the path to the file @param parameters file opening parameters @return CompletableFuture of FSDataInputStream for reading the file @throws IOException if an I/O error occurs
1084 Retrieves the fallback FileSystem. @return FileSystem object or null if unavailable
1085 Updates data from input buffer to output buffer. @param input source direct ByteBuffer @param output destination direct ByteBuffer @return number of bytes updated @throws ShortBufferException if output buffer is too small
1086 Finishes encryption or decryption. @param output direct ByteBuffer for the result @return number of bytes processed @throws ShortBufferException if output buffer is too short @throws IllegalBlockSizeException if block size is incorrect @throws BadPaddingException if padding is invalid
1087 Creates a RegexMountPointInterceptor from settings string. @param interceptorSettingsString configuration for the interceptor @return created interceptor or null if invalid
1088 Normalizes a file path by removing duplicate slashes and converting backslashes to forward slashes for Windows paths. @param scheme URI scheme or null if not applicable @param path original file path @return normalized file path
1089 Checks if a given path is an absolute Windows path. @param pathString the path to check @param slashed whether to consider slashes as separators @return true if the path is absolute, false otherwise
1090 Checks if URI path is absolute. @return true if path is absolute, false otherwise
1091 Computes a non-negative hash code for a given file path. @param p Path to the file @return Non-negative integer hash code
1092 Validates that the given path is non-null and starts with the base path. @param path the path to validate
1093 Finds the next available ID by scanning files in a directory. @param initial base path for file names @param lastId previously used highest ID @return next available ID @throws IOException if an I/O error occurs
1094 Skips ahead by the specified number of bytes. @param n number of bytes to skip @return actual number of bytes skipped @throws IOException if an I/O error occurs
1095 Reads data from an input stream into a ByteBuffer using a pool. @param stream source of data @param bufferPool pool for obtaining ByteBuffers @param maxLength maximum number of bytes to read @return ByteBuffer containing the read data or null if unsuccessful @throws IOException on I/O errors during reading
1096 Resets the evaluator by clearing entries and reinitializing.
1097 Creates and initializes a new CommonAuditContext instance. @return initialized CommonAuditContext object
1098 Constructs a FsPermission with specified actions for user, group, and others. @param u action for user @param g action for group @param o action for others
1099 Constructs an FsPermission object from a short mode. @param mode file permission bits
1100 Reads FileSystem permission from input. @param in DataInput stream to read from @return FsPermission object representing the read permissions @throws IOException if an I/O error occurs
1101 Retrieves effective permission for an ACL entry. @param entry ACL entry to evaluate @return Effective FsAction based on permissions
1102 Creates an immutable PermissionStatus. @param user owner of the permission @param group group associated with the permission @param permission file system permissions @return immutable PermissionStatus object
1103 Parses ACL specification into a list of AclEntry objects. @param aclSpec comma-separated ACL specification string @param includePermission flag to include permission details @return List of AclEntry objects
1104 Creates FsCreateModes with masked and unmasked permissions. @param masked permission with no unmasked value @param unmasked permission with no unmasked value @return FsCreateModes instance
1105 Prints ACL entry details with effective permissions. @param aclStatus current ACL status @param fsPerm file system permissions @param entry ACL entry to print
1106 Splits input string into an array using comma as delimiter. @param str input string to be split @return array of strings split by commas
1107 Returns current buffer position. @return Position of the ByteBuffer
1108 Checks if there are remaining bytes to read. @return true if bytes remain, false otherwise
1109 Initiates data block upload. @throws IOException if an I/O error occurs during upload initiation
1110 Transitions to closed state. @return true if transitioned, false if already in closed state
1111 Flushes both superclass and output stream buffers. @throws IOException if an I/O error occurs
1112 Retrieves statistics for a given URI. @param uri location to fetch statistics from @return Statistics object containing metrics
1113 Retrieves the current directory index from the context. @return The index of the current directory
1114 Writes synchronization marker and data if position changed. @throws IOException if an I/O error occurs
1115 Returns the current position in the output stream. @throws IOException if an I/O error occurs
1116 Retrieves current position in file output. @return Total bytes written including buffer @throws IOException if an I/O error occurs
1117 Computes content summary for a given path. @param f path to the file or directory @return ContentSummary object with length, file count, directory count, and space consumed @throws IOException if an I/O error occurs
1118 Builds ACL from user and group strings. @param userGroupStrings array containing users and groups
1119 Parses a comma-separated string into an EnumSet. @param key configuration key for error messages @param valueString input string containing enum values @param enumClass class of the enum type @param ignoreUnknown flag to ignore unknown values @return EnumSet containing parsed enum values @throws IllegalArgumentException if an invalid value is found and not ignored
1120 Ensures the service is in the expected state. @param expectedState the required state for the operation @throws ServiceStateException if the current state does not match
1121 Initializes service with a given name. @param name unique identifier for the service
1122 Validates and throws exception if state transition is invalid. @param name service or component name @param state current state of the service @param proposed new state to transition to
1123 Throws a service creation failure exception. @param exception the original exception causing the failure @return a ServiceLaunchException with specific exit code and cause
1124 Verifies existence of configuration files. @param filenames array of file names to check @throws ServiceLaunchException if any file is missing
1125 Converts a Throwable to an ExitUtil.ExitException. @param thrown the original exception @return ExitUtil.ExitException with extracted exit code and message
1126 Registers a shutdown hook for the given service. @param service the service to be monitored for shutdown
1127 Logs and records a service failure. @param exception the exception causing the failure
1128 Records a lifecycle event with current time and service state.
1129 Stops services in reverse order of start. @param numOfServicesStarted number of services that were started @param stopOnlyStartedServices flag to stop only started services
1130 Stops a service quietly. @param service the service to stop @return any exception thrown during stopping
1131 Compares this UTF8 object with another. @param o the other UTF8 object to compare @return negative if less, zero if equal, positive if greater
1132 Compares this UTF8 object with another for equality. @param o the object to compare @return true if equal, false otherwise
1133 Compares this MD5 hash with another. @param that the other MD5Hash to compare @return negative if less, zero if equal, positive if greater
1134 Compares this binary comparable to another. @param other the other BinaryComparable object @return negative if less, zero if equal, positive if greater
1135 Compares this byte array with another. @param other the other byte array to compare against @param off the starting offset in the other array @param len the number of bytes to compare @return negative if less, zero if equal, positive if greater
1136 Generates hash code based on byte array. @return hash code of the byte array
1137 Reads a double from byte array starting at given index. @param bytes source byte array @param start starting index of the double value @return double value read from bytes
1138 Sets the size of the array. @param size new size to be set
1139 Checks if a file is readable. @param f the File object to check @return true if the file is readable, false otherwise
1140 Checks if a file is writable. @param f the file to check @return true if the file is writable, false otherwise
1141 Checks if a file is executable. @param f the File object to check @return true if the file is executable, false otherwise
1142 Returns singleton instance of ReadaheadPool. Initializes if not already created and native IO is available. @return ReadaheadPool instance or null if native IO is unavailable
1143 Retrieves the memlock limit. @return memlock limit value or 0 if not available
1144 Calculates checksums for data chunks. @param data byte array containing the data to process @param dataOffset starting offset in the data array @param dataLength length of the data to process @param sums byte array to store calculated checksums @param sumsOffset starting offset in the sums array
1145 Creates a FileOutputStream for writing with specified permissions. @param f the file to write to @param permissions file access permissions @return FileOutputStream object @throws IOException if an I/O error occurs or file already exists
1146 Frees all buffers in the pool.
1147 Frees buffers used by cryptographic streams. @param inBuffer input buffer to be freed @param outBuffer output buffer to be freed
1148 Retrieves file status using FileDescriptor. @param fd FileDescriptor of the file @return Stat object containing file information @throws IOException if an I/O error occurs
1149 Retrieves file statistics for a given path. @param path file path to retrieve stats for @return Stat object containing file statistics @throws IOException if an I/O error occurs or path is null
1150 Constructs a BoundedByteArrayOutputStream with specified capacity and limit. @param capacity initial size of the buffer @param limit maximum number of bytes that can be written
1151 Constructs an instance with the given EnumSet and no custom delimiter. @param value the EnumSet to be wrapped
1152 Writes data from InputStream to buffer. @param in input stream containing data @param length number of bytes to read and write @throws IOException if an I/O error occurs
1153 Resets and returns the key data input stream. @return DataInputStream ready to read from the key buffer
1154 Decodes a base64 string and reads it into a Writable object. @param obj the Writable object to read fields into @param newValue base64 encoded string to decode @throws IOException if decoding fails or input is invalid
1155 Compares two byte arrays as serialized objects. @param b1 first byte array @param s1 starting index of the first array @param l1 length of the first array @param b2 second byte array @param s2 starting index of the second array @param l2 length of the second array @return comparison result: negative if key1 < key2, zero if equal, positive if key1 > key2
1156 Checks if any blocks in the group are recoverable. @param blockGroup the group of EC blocks to check @return true if there are erased blocks that can be recovered, false otherwise
1157 Calculates total erased blocks in a group. @param blockGroup the ECBlockGroup to check @return number of erased blocks
1158 Identifies indexes of erased blocks. @param inputBlocks array of ECBlock objects @return array of indexes where blocks are erased
1159 Validates input buffers for decoding. @param buffers array of ByteBuffers to validate
1160 Validates input buffers for decoding. @param buffers array of byte arrays to be validated
1161 Initializes a new erasure decoding step. @param inputBlocks array of input EC blocks @param erasedIndexes indexes of erased blocks @param outputBlocks array of output EC blocks @param rawDecoder RawErasureDecoder for parity units @param rawEncoder RawErasureEncoder for XOR operations
1162 Validates input parameters for decoding. @param inputs array of input data units @param erasedIndexes indexes of erased data units @param outputs array to store decoded results
1163 Initializes encoding step with input and output blocks. @param inputBlocks array of ECBlock inputs @param outputBlocks array of ECBlock outputs @param rsRawEncoder Reed-Solomon raw erasure encoder @param xorRawEncoder XOR raw erasure encoder
1164 Validates input and output arrays against encoder specifications. @param inputs array of input data units @param outputs array of output parity units
1165 Adds two integer arrays element-wise. @param p first integer array @param q second integer array @return resulting array with sum of elements
1166 Multiplies two integer arrays representing polynomials. @param p first polynomial array @param q second polynomial array @return resulting polynomial array after multiplication
1167 Performs Gaussian elimination on a given matrix. @param matrix the input matrix to be reduced
1168 Prints chunks with a header. @param header descriptive title for the output @param chunks array of ECChunk objects to print
1169 Resets output buffers to specified length. @param buffers array of ByteBuffers to reset @param dataLen new length for each buffer
1170 Converts ECChunk array to ByteBuffer array. @param chunks array of ECChunk objects @return array of ByteBuffers corresponding to input chunks
1171 Resets output buffers to specified length. @param buffers array of byte arrays representing buffers @param offsets array of offset values for each buffer @param dataLen length to which buffers should be reset
1172 Returns an instance of GaloisField with default parameters. @return GaloisField object initialized with default field size and primitive polynomial
1173 Initializes a new BlockCompressorStream. @param out underlying output stream @param compressor compressor to use @param bufferSize size of the buffer @param compressionOverhead overhead for compression
1174 Initializes a ZStandard decompressor with a specified buffer size. @param bufferSize size of the direct buffers for compression and decompression
1175 Constructs an Lz4Compressor with default buffer size.
1176 Retrieves the class of a compression codec by name. @param codecName name of the codec @return Class object of the codec or null if not found
1177 Retrieves a compressor from the pool or creates a new one. @param codec compression codec to use @param conf configuration settings @return compressor instance
1178 Retrieves a decompressor for the given codec. @param codec compression codec to get decompressor for @return Decompressor instance or null if unable to create
1179 Returns a compressor to the pool or ends it if not reusable. @param compressor the Compressor object to return
1180 Returns a Decompressor to the pool or ends it if not reusable. @param decompressor the Decompressor instance to manage
1181 Returns the compressor type. @return Class of ZStandardCompressor
1182 Returns the decompressor type. Checks if native code is loaded and returns ZStandardDecompressor class. @return Class of the decompressor (ZStandardDecompressor)
1183 Constructs a new ZlibCompressor with default settings.
1184 Initializes ZlibCompressor with configuration settings. @param conf Configuration object containing compression parameters
1185 Reinitializes the compressor with new configuration. @param conf Configuration object containing settings
1186 Processes the gzip header state. Handles basic and optional header fields, validating CRC if present.
1187 Writes byte array and its length to DataOutput. @param out destination for writing data
1188 Reads a variable-length integer from input stream. @param stream data source to read from @return int value or throws exception if out of range @throws IOException on I/O error or value overflow/underflow
1189 Reads a variable-length long from input and checks it within range. @param stream DataInput source @param lower minimum inclusive value @param upper maximum inclusive value @return integer if within range, throws IOException otherwise
1190 Constructs a Text object with the given string. @param string initial text content
1191 Searches for a substring within a byte array. @param what the substring to search for @param start the starting index in the byte array @return the starting index of the substring if found, otherwise -1
1192 Writes a string to DataOutput. @param out DataOutput stream to write to @param s String to write @return Length of the written string in bytes @throws IOException if an I/O error occurs
1193 Writes a string to DataOutput with variable-length encoding. @param out DataOutput to write to @param s String to write @param maxLength Maximum allowed byte length for the string @return Number of bytes written @throws IOException if string exceeds maxLength or I/O error occurs
1194 Sets the internal byte array to the given UTF-8 encoded data. @param utf8 byte array containing UTF-8 encoded string
1195 Sets text from another Text object. @param other source Text object to copy from
1196 Reads a line from input, handling different newline cases. @param str Text object to store the read line @param maxLineLength Maximum length of the line to read @param maxBytesToConsume Maximum bytes to consume @return Number of bytes consumed or -1 if end of file reached
1197 Reads a custom line from input stream. @param str Text object to store the read content @param maxLineLength Maximum length of the line to read @param maxBytesToConsume Maximum bytes to consume @return Number of bytes consumed or -1 if EOF @throws IOException on I/O error
1198 Initializes a new instance of SortedMapWritable. Uses a TreeMap to maintain sorted order.
1199 Constructs a new MapWritable instance. Initializes with an empty HashMap of Writable objects.
1200 Constructs a Key with the given byte array. @param value byte array representing the key's value
1201 Computes MD5 hash of given byte array. @param data input byte array @return MD5Hash object
1202 Computes MD5 hash of UTF-8 string. @param utf8 input UTF-8 string @return MD5Hash object representing the hash
1203 Constructs an MD5Hash from a hexadecimal string. @param hex hexadecimal representation of the hash
1204 Creates an infinite retry policy with fixed sleep. @param sleepTime duration to wait between retries @param timeUnit unit of time for sleep duration @return RetryPolicy that retries indefinitely with fixed sleep
1205 Creates a retry policy with fixed sleep. @param maxRetries maximum number of retries @param sleepTime duration to wait between retries @param timeUnit unit of time for sleep duration @return RetryPolicy object configured with specified parameters
1206 Creates an exponential backoff retry policy. @param maxRetries maximum number of retries @param sleepTime initial sleep time between retries @param timeUnit unit of time for sleep duration @return RetryPolicy with exponential backoff strategy
1207 Creates a retry policy with proportional sleep. @param maxRetries maximum number of retries @param sleepTime base sleep duration between retries @param timeUnit unit for the sleep time @return RetryPolicy object configured with maxRetries and proportional sleep
1208 Records timestamp when write lock is first acquired.
1209 Records the current time for lock acquisition. @param none @return none
1210 Starts timing when a single read lock is held. Updates timestamp if only one read lock is acquired.
1211 Creates a retrying proxy for the specified interface. @param iface interface to be proxied @param proxyProvider provider for failover proxies @param methodNameToPolicyMap mapping of method names to specific retry policies @param defaultPolicy default retry policy @return proxy instance implementing the interface with retry logic
1212 Returns hash code based on multiple linear random retry. @return hash code of the retry mechanism
1213 Checks equality with another object. @param obj the object to compare @return true if objects are equal, false otherwise
1214 Builds and returns an IOException. @param exceptions list of exceptions to include in the IO exception @return constructed IOException instance
1215 Retrieves supported compression algorithms. @return array of supported algorithm names
1216 Retrieves the compression name. @return Compression name as a String
1217 Reads a string from DataInput. @param in source of input data @return decoded string or null if length is -1 @throws IOException if reading fails
1218 Reads variable-length integer and sets remaining bytes. @throws IOException if reading fails
1219 Creates a comparator for RawComparable based on the given field name. @param name field name to compare by @return Comparator object for sorting RawComparable objects
1220 Writes a chunk of data to the output stream. @param chunk byte array containing the data @param offset starting index in the byte array @param len length of the data to write @param last flag indicating if it's the last chunk @throws IOException if an I/O error occurs
1221 Writes buffer data to output stream. @param data byte array containing data to write @param offset starting index in the data array @param len number of bytes to write @throws IOException if an I/O error occurs
1222 Initializes encoder with output stream and chunk size. @param out data output stream for writing @param size chunk size to be encoded @throws IOException if I/O error occurs
1223 Returns a comparator for entries. @throws RuntimeException if entries are not sorted @return Comparator for Scanner.Entry objects
1224 Checks if the current location has reached or exceeded the end location. @return true if at or past the end; false otherwise
1225 Retrieves location near a given offset. @param offset reference position in the data @return Location object or end if no nearby block found
1226 Clones the location with specified block and record indices. @return a new Location object with the same blockIndex and recordIndex
1227 Retrieves an integer value from a byte array. @param buf source byte array containing data @return integer value extracted from the byte array @throws IOException if an I/O error occurs while processing the buffer
1228 Sets the internal string and ensures it fits within limits. @param string input string to be set
1229 Converts an array of Writable objects to a byte array. @param writables array of Writable objects to be converted @return byte array representation of the Writable objects
1230 Converts a String to a UTF-8 byte array. @param string the input String @return byte array representing the UTF-8 encoding of the input String
1231 Compresses and writes data to output stream. @param uncompressedDataBuffer input data to compress
1232 Copies fields from another Writable object. @param other source Writable object to copy from
1233 Appends a key-value pair to the output stream. @param key object representing the key @param val object representing the value @throws IOException if key or value class mismatch, negative length key, or I/O error occurs
1234 Converts object to byte array. @return byte array representation of the object
1235 Encodes a Writable object to a Base64 string. @param obj the Writable object to encode @return Base64 encoded string representation of the object @throws IOException if an I/O error occurs while encoding
1236 Resets input buffer with data from output buffer.
1237 Calculates distance between two nodes based on their paths. @param node1 first node in the path @param node2 second node in the path @return integer representing the distance or Integer.MAX_VALUE if null input
1238 Retrieves a node based on its network location. @param node the original node with network location information @return a Node object representing the network location, or null if not found
1239 Retrieves leaf nodes within a specified scope. @param scope the scope to search for leaf nodes @return list of leaf Node objects
1240 Counts available nodes based on scope and exclusions. @param scope node scope, can be negated with '~' @param excludedNodes nodes to exclude from count @return number of available nodes
1241 Removes a node from its rack and deletes the rack if empty. @param node the node to be removed
1242 Sorts nodes by distance, using secondary sort if needed. @param reader reference node for distance calculation @param nodes array of nodes to sort @param activeLen number of active nodes to consider @param secondarySort optional secondary sorting logic @param nonDataNodeReader flag indicating special handling
1243 Recommissions a node by adding it back to the network. @param node the node to recommission
1244 Transfers bytes from a FileChannel to this channel. @param fileCh source FileChannel @param position starting position in the source channel @param count number of bytes to transfer @throws IOException if an I/O error occurs
1245 Wraps an IOException with additional context based on the type of exception. @param destHost destination host address @param destPort destination port number @param localHost local host address @param localPort local port number @param exception original IOException to be wrapped @return new IOException with detailed message
1246 Constructs a new instance of RawScriptBasedMappingWithDependency.
1247 Constructs a ScriptBasedMapping using a raw DNS to switch mapping. @param rawMap initial DNS to switch mapping configuration
1248 Constructs an InnerNodeImpl with a specified path. @param path the path of the node
1249 Constructs an InnerNodeImpl. @param name node's name @param location node's location @param parent parent InnerNode @param level hierarchy level
1250 Kicks the connection by sending a byte and marking it as closed. Assumes the lock is held by the current thread.
1251 Binds and listens on a specified domain socket path. @param path the socket file path @return a DomainSocket instance bound to the path @throws IOException if binding fails
1252 Creates a pair of connected domain sockets. @return array containing two connected DomainSocket objects @throws IOException if socket creation fails
1253 Establishes a connection to a domain socket. @param path socket file path @throws IOException if an I/O error occurs @return connected DomainSocket instance
1254 Sends callback and removes entry from map. @param caller identifier of the caller @param entries map of file descriptors to entries @param fdSet set of file descriptors @param fd file descriptor to process
1255 Closes the resource safely, ensuring proper cleanup and termination of associated threads.
1256 Retrieves a SelectorInfo instance for the given channel. @param channel the SelectableChannel to get a SelectorInfo for @return SelectorInfo object associated with the channel's provider @throws IOException if an I/O error occurs while opening a selector
1257 Releases selector info and updates activity time. @param info SelectorInfo to release
1258 Retrieves IP addresses for a specified network interface. @param strInterface name of the network interface @return array of IP addresses as strings @throws UnknownHostException if the interface is not found
1259 Retrieves hostnames for a given network interface. @param strInterface network interface name @param nameserver optional DNS server to use @param tryfallbackResolution flag to attempt fallback resolution @return array of hostnames or cached hostname if none found
1260 Constructs a LogThrottlingHelper with a specified minimum log period. @param minLogPeriodMs minimum time in milliseconds between logs
1261 Records log action with default recorder name and current monotonic time. @param values variable number of double values to log @return LogAction object representing the recorded action
1262 Retrieves and quotes HTML characters in request parameter. @param name parameter name @return quoted parameter value or null if not found
1263 Returns quoted request URL. @return Quoted StringBuffer of the request URL
1264 Returns the quoted server name from the raw request. @return Quoted server name as a string
1265 Initializes file monitoring with a single file path. @param filePath the path of the file to monitor @param onFileChange action to take on file change @param onChangeFailure action to take on failure during file change detection
1266 Updates metrics record. @param mr MetricsRecord to update @return Updated Record object
1267 Consumes data using a Consumer. @param consumer the Consumer to process the data @throws InterruptedException if thread is interrupted while waiting for data
1268 Consumes all elements using the provided consumer. @param consumer function to consume each element
1269 Increments the cache hit counter.
1270 Increments the cache cleared counter.
1271 Increments the cache update counter.
1272 Increments the backoff counter for client disconnections.
1273 Increments the count of slow RPC calls.
1274 Increments the count of requeued RPC calls.
1275 Increments the count of successful RPC calls.
1276 Writes data from a ByteBuffer to a WritableByteChannel. @param channel the destination channel @param buffer the source buffer containing data to write @return number of bytes written or -1 if no bytes could be written @throws IOException if an I/O error occurs during writing
1277 Reads data from a channel into a buffer. @param channel the readable byte channel @param buffer the destination buffer @return number of bytes read or -1 if end of stream @throws IOException if an I/O error occurs
1278 Increments failure count and records the time of the last failure.
1279 Fetches group set for a given user. @param user the username to fetch groups for @return Set of group names associated with the user @throws IOException if an I/O error occurs during fetching
1280 Unregisters metrics source during shutdown. @param name unique identifier of the metrics source
1281 Sets quantile information for a metric. @param ucName prefix for upper context @param uvName suffix for upper value @param desc description of the metric @param lvName label for lower value @param pDecimalFormat formatter for percentile values
1282 Sets quantiles based on given parameters. @param ucName upper case name prefix @param uvName upper case variable suffix @param desc description of the metric @param lvName lower case name for percentile @param df decimal format for percentile display
1283 Constructs a new MetricsRegistry with the specified name. @param name unique identifier for the registry
1284 Creates and caches a metric tag. @param name unique tag identifier @param description tag description @param value tag value @return MetricsTag object
1285 Initializes a MutableStat with various statistical info fields. @param name base name for the statistic @param description detailed description of the statistic @param sampleName name of the sample type @param valueName name of the value being measured @param extended flag indicating if extended stats are enabled
1286 Tags a metric with a specified value. @param info metric information @param value tag value to assign @param override whether to override existing tag if present @return updated MetricsRegistry instance
1287 Adds a value to statistics. @param value the value to be added
1288 Returns the standard deviation of RPC processing times. @return standard deviation value as a double
1289 Inserts value into buffer, triggers batch insertion and compression on overflow. @param v the value to insert
1290 Takes a snapshot of current quantile values. @return Map of Quantile to Long representing quantile values or null if no samples
1291 Retrieves the top N token real owners. @param n number of top entries to retrieve @return List of NameValuePair with token owner and count
1292 Caches netgroups from a list. @param groups list of group names to cache @throws IOException if an I/O error occurs
1293 Returns an unmodifiable collection of tokens. @return Collection of Token objects
1294 Retrieves groups for a given user. @param user username of the user @return unmodifiable list of group names @throws IOException if an I/O error occurs
1295 Retrieves an unmodifiable set of groups for a given user. @param user username or identifier @return Set of group names associated with the user @throws IOException if an I/O error occurs while fetching group data
1296 Retrieves groups for a given user. @param user the username @return list of group names including both Unix and network groups @throws IOException if an I/O error occurs
1297 Prints an empty line to the console.
1298 Prints system property value. @param property name of the system property
1299 Prints environment variable value. @param variable name of the environment variable
1300 Prints the contents of a file to the console. @param file the file to read and print @throws IOException if an I/O error occurs
1301 Logs an error message with a category and formatted arguments. @param category the error category @param message the error message template @param args additional arguments for formatting the message
1302 Prints a warning message with formatted details. @param category category of the warning @param message template for the warning message @param args arguments to format into the message
1303 Sets the authentication method for the user. @param authMethod the authentication method to be set
1304 Writes a single byte to the output stream. @param b byte to be written @throws IOException if an I/O error occurs
1305 Writes bytes to the output stream. @param b byte array containing data to write
1306 Validates a delegation token. @param identifier token identifier to check @return DelegationTokenInformation if valid @throws InvalidToken if token is not found or expired
1307 Sets the external delegation token secret manager. @param secretManager the secret manager to use for delegation tokens
1308 Updates the current master key for delegation tokens. Logs the update and stores the new key securely.
1309 Constructs a DelegationKey with default values.
1310 Initializes a new instance of DelegationTokenAuthenticatedURL. @param authenticator the authentication handler for delegation tokens @param connConfigurator configuration for the connection
1311 Renews or retrieves a delegation token. @return true if successful, false otherwise @throws IOException on I/O errors @throws InterruptedException if interrupted while waiting
1312 Reads a byte from the input stream. @return next byte or -1 if end of stream @throws IOException if an I/O error occurs
1313 Reads bytes into a buffer. @param b destination buffer @param off offset in the buffer @param len number of bytes to read @return number of bytes read or -1 if end of stream @throws IOException if an I/O error occurs
1314 Authorizes a user based on their group information and remote address. @param user UserGroupInformation object representing the user @param remoteAddress IP address of the remote connection as a string @throws AuthorizationException if authorization fails or host is unknown
1315 Checks if Hadoop login context is active. @return true if Hadoop login is active, false otherwise
1316 Creates a proxy user for delegation. @param user username of the proxy user @param realUser actual user on behalf of whom the proxy acts @return UserGroupInformation object representing the proxy user
1317 Retrieves the real user or returns self if none. @param user UserGroupInformation object @return Real user or original user if no real user exists
1318 Returns a string representation of the user. @return formatted string with username, authentication method, and real user if applicable
1319 Retrieves the real authentication method for the user. @return AuthenticationMethod used by the user or this object if no real user exists
1320 Retrieves the real authentication method for a user. @param ugi UserGroupInformation object representing the user @return Real AuthenticationMethod, or original if not proxy
1321 Creates an IPC connection context. @param protocol the communication protocol @param ugi user group information @param authMethod authentication method used @return IpcConnectionContextProto object
1322 Verifies SSL session against host. @param host target hostname @param session SSL session to verify @return true if verification passes, false otherwise
1323 Loads a resource by name. @param name the name of the resource to load @return status code indicating success or failure
1324 Constructs a Command with the specified configuration. @param conf Configuration object to be used
1325 Constructs a CommandFactory with the given configuration. @param conf Configuration object containing settings
1326 Constructs an FsShell instance with the given configuration. @param conf Configuration settings for the shell
1327 Constructs a new instance of FindClass. @param conf configuration settings for initialization
1328 Initializes GetGroupsBase with configuration and output stream. @param conf Configuration object @param out Output stream for logging or results
1329 Default constructor initializes with no configuration.
1330 Generates ACL string. @return Access Control List as a formatted string
1331 Retrieves the original TGT from the subject's credentials. @return KerberosTicket representing the original TGT or null if not found
1332 Sets SSL configuration for ZK client. @param zkClientConfig ZK client configuration object @param truststoreKeystore Truststore and keystore settings @throws ConfigurationException if configuration fails
1333 Creates an OpenSSL cipher instance. @param transformation algorithm and mode specification @param engineId optional engine identifier @return OpensslCipher object configured with specified parameters @throws NoSuchAlgorithmException if algorithm is unsupported @throws NoSuchPaddingException if padding scheme is unsupported
1334 Creates a new key version with specified options. @param name key identifier @param options configuration for key generation @return KeyVersion object representing the created key @throws NoSuchAlgorithmException if cipher algorithm is not supported @throws IOException if an I/O error occurs during key creation
1335 Rolls a new version of a key. @param name key identifier @return KeyVersion object representing the new version @throws NoSuchAlgorithmException if cipher algorithm is unsupported @throws IOException if metadata retrieval fails
1336 Adds an element to the queue. @param e element to be added @throws InterruptedException if interrupted while waiting
1337 Initializes RPC protocol engine for writable invocations.
1338 Starts the stopwatch. @throws IllegalStateException if stopwatch is already running @return this StopWatch instance
1339 Stops the StopWatch and updates elapsed time. Throws IllegalStateException if already stopped. @return the StopWatch instance
1340 Returns the elapsed time in nanoseconds. @return Elapsed time since start or last reset
1341 Generates a fingerprint from an array of Method objects. @param methods array of Method objects to process @return integer fingerprint value
1342 Retrieves protocol signature fingerprint. @param protocol Class representing the protocol @param serverVersion Version of the server @return ProtocolSigFingerprint object for the given protocol and version
1343 Creates a RemoteException from Attributes. @param attrs containing "class" and "message" @return RemoteException instance
1344 Retrieves a list of items. @throws IOException if an I/O error occurs @return List of T objects
1345 Adds response time metrics for a call. @param callName name of the call @param schedulable object representing the scheduled task @param details processing details including timing information
1346 Attempts to add an element to queues up to a specified priority. @param priority the highest priority queue to attempt adding to @param e the element to add @param includeLast whether to include the last queue in consideration @return true if added, false otherwise
1347 Populates response parameters on error. @param t Throwable causing the error @param responseParams object to populate with error details
1348 Constructs a VersionMismatch exception. @param interfaceName name of the interface with version mismatch @param clientVersion version of the client @param serverVersion version of the server
1349 Recomputes the priority level cache for scheduling. Updates the cache with new priority levels based on current call costs.
1350 Retrieves or computes the priority level for an identity. @param identity unique identifier for the entity @return computed priority level
1351 Returns the hash code of this object. @return hash code value as an integer
1352 Retrieves and increments the current index. @return The current index before incrementing
1353 Retrieves the remote IP address. @return String representation of the remote IP or null if not available
1354 Initializes MachineList with host entries and default InetAddressFactory. @param hostEntries collection of host names or IP addresses
1355 Reads /proc/meminfo file. @param forceRead forces reading even if already read
1356 Retrieves available physical memory size. Reads /proc/meminfo if not already done. @return Available memory in bytes
1357 Reads CPU time from proc file and returns cumulative CPU time. @return cumulative CPU time in nanoseconds
1358 Calculates CPU usage percentage. @return CPU usage as a float, adjusted for number of processors
1359 Reads CPU stats and returns the used vCores percentage. @return Used vCores as a float, or -1 if unavailable
1360 Adds a key-value pair to the buffer. @param k key to be added @param v value associated with the key
1361 Creates a secure TransformerFactory instance. @return securely configured TransformerFactory @throws TransformerConfigurationException if configuration fails
1362 Creates a secure SAXTransformerFactory. @return configured SAXTransformerFactory with secure processing enabled
1363 Formats file size to string. @param size file size in bytes @param humanReadable true for human-readable format, false for raw bytes @return formatted size as string
1364 Formats file size. @param size size in bytes @param humanReadable true for human-readable format, false for raw bytes @return formatted size string
1365 Converts a long number to a human-readable string with binary prefixes. @param number the long value to convert @return a string representation of the number with appropriate binary prefix
1366 Converts bytes to a human-readable string. @param len number of bytes @return formatted string with binary prefix (e.g., KB, MB)
1367 Adds file system usage data to the usages table. @param uri URI of the file system @param fsStatus File system status object @param mountedOnPath Path where the file system is mounted
1368 Converts byte array to hex string. @param bytes input byte array @return hex string representation of bytes
1369 Sorts elements in the range [p, r). @param s sortable object @param p start index (inclusive) @param r end index (exclusive)
1370 Handles application termination with an exception. @param ee the ExitException to terminate with
1371 Terminates the application with an error message. @param status exit status code @param message error message to display
1372 Terminates the application with a given status and throwable. @param status exit status code @param t Throwable causing the termination @throws ExitException always thrown to indicate termination
1373 Throws an ExitException with the specified status and message. @param status exit status code @param msg error message
1374 Throws a HaltException with the given status and throwable. @param status exit status code @param t Throwable associated with the halt condition
1375 Throws a HaltException with given status and message. @param status exit status code @param message error message
1376 Removes this from shutdown hooks.
1377 Creates an ArrayList from the given Iterable. @param elements Iterable of elements to add @return ArrayList containing the elements @throws NullPointerException if elements is null
1378 Creates a LinkedList from an iterable of elements. @param elements the iterable providing elements for the list @return a LinkedList containing all elements from the iterable
1379 Constructs an ACL list from file permissions and existing entries. @param perm file system permissions @param entries existing ACL entries @return combined list of ACL entries including implied entries
1380 Creates an ArrayList from variable arguments. @param elements the elements to be added to the list @return a new ArrayList containing the specified elements
1381 Creates a new ArrayList with an initial capacity. @param estimatedSize expected number of elements @return ArrayList instance with precomputed capacity
1382 Saves an object as JSON to a specified file. @param file the target file to save the JSON data @param instance the object to be serialized and saved @throws IOException if I/O operations fail
1383 Initializes a StatisticDurationTracker with IOStatisticsStore. @param iostats the storage for I/O statistics @param key the identifier for the statistic @param count initial count to increment
1384 Initializes a DurationInfo with logging configuration. @param log Logger instance for logging messages @param logAtInfo Flag to determine logging level (info or debug) @param format Message format string @param args Arguments for the message format
1385 Returns string representation of duration. @return formatted duration as a string
1386 Creates a new striped CRC composer. @param type CRC checksum type @param bytesPerCrcHint bytes per CRC hint @param stripeLength length of each stripe @return CrcComposer instance configured for striped CRCs @throws IOException if an I/O error occurs
1387 Composes CRC values with a given polynomial modulus. @param crcA first CRC value @param crcB second CRC value @param lengthB length of data for crcB @param mod polynomial modulus @return composed CRC value
1388 Completes the digest calculation and resets internal state. @return Computed digest as a byte array
1389 Extracts files from a JAR and saves them to a directory. @param inputStream input stream of the JAR file @param toDir target directory for extracted files @param name name of the output file @param unpackRegex regex pattern for filtering files to extract @throws IOException if an I/O error occurs
1390 Extracts contents of a JAR file to a directory. @param jarFile the JAR file to extract @param toDir target directory for extraction
1391 Finds the nth occurrence of a byte in a byte array. @param utf the byte array to search within @param b the byte to find @param n the occurrence number to find @return the index of the nth occurrence or -1 if not found
1392 Retrieves or creates a value by key using weak references. @param key unique identifier for the value @return the retrieved or newly created value
1393 Checks lock duration and logs warnings if threshold exceeded. @param acquireTime time when lock was acquired @param releaseTime time when lock was released @param checkLockHeld flag to determine if checking for held locks
1394 Formats a finish time with an optional time difference. @param formattedFinishTime the formatted end time as a string @param finishTime the end time in milliseconds @param startTime the start time in milliseconds @return formatted string with time and optional difference
1395 Splits string by comma with escape character. @param str input string to split @return array of split strings
1396 Converts a string to camel case. @param s input string with underscores @return camelCase version of the input string
1397 Escapes specified characters in a string. @param str input string to process @param escapeChar character used for escaping @param charToEscape character to be escaped @return processed string with escaped characters
1398 Unescapes specified character in a string. @param str input string to process @param escapeChar character used as escape @param charToEscape character to unescape @return processed string with escaped characters removed
1399 Generates a startup message for a class. @param classname name of the starting class @param hostname name of the host machine @param args command-line arguments passed to the application @return formatted startup message string
1400 Retrieves the build version information. @return A string representing the build version
1401 Returns the next element in the iteration. @throws IOException if an I/O error occurs @throws NoSuchElementException if no more elements are available
1402 Checks if the source has more elements. @return true if source has next element, false otherwise @throws IOException if an I/O error occurs
1403 Creates a lazy auto-closeable reference from a supplier. @param supplier provides the instance to be lazily initialized and closed @return LazyAutoCloseableReference wrapping the supplier's object
1404 Retrieves the page size for bulk deletion. @param fs FileSystem instance @param path file path to delete @return page size or throws IOException if fails
1405 Deletes multiple files in a bulk operation. @param fs the FileSystem instance @param base the base directory path @param paths collection of file paths to delete @return list of deleted Path entries with their status
1406 Opens a file in a FileSystem with specified options. @param fs FileSystem instance @param path Path to the file @param policy Optional read policy @param status Optional FileStatus object @param length Optional file length @param options Optional map of additional options @return FSDataInputStream for reading the file
1407 Reads bytes from an input stream into a buffer at a specified position. @param in input stream supporting positioned reading @param position starting position to read from @param buf buffer to store the read bytes
1408 Loads an IO statistics snapshot from a file system path. @param fs the FileSystem instance @param path the Path to the snapshot file @return Serializable object representing the snapshot
1409 Converts JSON string to IOStatisticsSnapshot object. @param json JSON representation of the snapshot @return IOStatisticsSnapshot instance or throws exception if conversion fails
1410 Retrieves a value by evaluating an expression. @return the evaluated result of type T @throws UncheckedIOException if an I/O error occurs
1411 Returns a builder configured to iterate over given items. @param items iterable collection of items to process @return Builder instance for further operations
1412 Throws inner cause of ExecutionException as IOException. @param e ExecutionException with nested exception @throws IOException the underlying exception wrapped in ExecutionException
1413 Waits for a future to complete and returns its result. @param future the Future object to wait on @return the result of the future @throws InterruptedIOException if interrupted while waiting @throws CancellationException if the future was cancelled @throws RuntimeException if an exception occurred during execution
1414 Waits for a future to complete within a specified timeout. @param future the Future object to wait on @param timeout maximum time to wait @param unit time unit of the timeout @return result of the future if completed within timeout @throws InterruptedIOException if waiting is interrupted @throws IOException for other I/O errors @throws CancellationException if the future was cancelled @throws TimeoutException if the future does not complete in time
1415 Raises the inner cause of a CompletionException. @param e CompletionException with an inner cause @return The original exception wrapped by CompletionException @throws IOException if the inner cause is an IOException
1416 Sets configuration for an object. @param theObject target object to configure @param conf configuration settings to apply
1417 Retrieves a Class by name using configuration. @param name the class name @param conf configuration object @return the Class instance or throws IOException if not found
1418 Loads a class by name using configuration or default method. @param conf Configuration object, may be null @param className name of the class to load @return Class object if found, otherwise throws RuntimeException
1419 Retrieves class by name. @param name fully qualified class name @return Class object or throws ClassNotFoundException if not found
1420 Logs thread information with a specified minimum interval. @param log the logger to use for logging @param title title of the thread info log @param minInterval minimum interval in seconds between logs
1421 Logs thread information with a specified interval. @param log Logger instance for logging @param title Title of the log entry @param minInterval Minimum interval in seconds between logs
1422 Initializes AbstractFSBuilderImpl with path or path handle. @param optionalPath Optional Path object @param optionalPathHandle Optional PathHandle object
1423 Constructs a new Configuration with default settings enabled.
1424 Validates HTTP response status and throws an exception if it doesn't match. @param conn HttpURLConnection object representing the connection @param expectedStatus expected HTTP status code
1425 Creates a new CRC32-C checksum instance. Uses Java 9 implementation if available, otherwise falls back to pure Java. @return Checksum object
1426 Retrieves the groups command for a user. @param userName the username of the user @return the command string to get groups for the user
1427 Retrieves group IDs for a given user. @param userName name of the user @return array of group IDs associated with the user
1428 Constructs a command to set permissions on a file. @param perm permission string (e.g., "755") @param recursive true if applied recursively @param file target file path @return command array with file included
1429 Generates command to check if process is alive. @param pid process ID @return command array for checking process status
1430 Retrieves the canonical path of the Hadoop home directory. @return canonical path as a String @throws IOException if an I/O error occurs while resolving the path
1431 Retrieves the qualified binary file for a given Hadoop executable. @param executable name of the Hadoop executable @return File object representing the executable or null if not found @throws FileNotFoundException if the executable is not found
1432 Adds a new phase to the progress. @return Progress object representing the added phase
1433 Adds specified number of new phases. @param n number of phases to add
1434 Adds a new phase with a status and weightage. @param status description of the phase @param weightage contribution percentage of the phase @return Progress object representing the added phase
1435 Returns the current progress. @return progress value as a float
1436 Creates a new resource at the specified path. @param path location where the resource should be created @return true if creation is successful, false otherwise @throws Exception if an error occurs during creation
1437 Creates root directory recursively. @param path full path of the directory to create @param zkAcl list of ACLs for ZK nodes @throws Exception if creation fails
1438 Sets implementation method for a given class and method name. @param className full class name @param methodName method name @param argClasses argument classes for the method @return Builder instance
1439 Sets implementation class and arguments. @param targetClass class to implement @param argClasses argument classes for the implementation @return Builder instance
1440 Sets hidden implementation for a method. @param className name of the class containing the method @param methodName name of the method @param argClasses argument classes of the method @return Builder instance
1441 Sets implementation class and argument types. @param targetClass class to be implemented @param argClasses argument classes for the implementation @return Builder instance for method chaining
1442 Loads a dynamic method invocation. @param source class containing the method @param returnType expected return type of the method @param name method name @param parameterTypes types of the method parameters @return UnboundMethod object or a no-op if not found
1443 Checks and throws exception if any required method is unavailable.
1444 Checks if bulk delete operation is available. @return true if bulk delete is available, false otherwise
1445 Checks if opening a file is available in the file system. @return true if available, false otherwise
1446 Checks if data is available for reading. @return true if data is readable, false otherwise
1447 Checks and invokes readFullyAvailable method on InputStream. @param in input stream to check and read from @return true if successful, false otherwise
1448 Checks if IO statistics are available. @return true if IO stats are available, false otherwise
1449 Checks if IO statistics context is available. @return true if available, false otherwise
1450 Checks if a method is available and throws an exception if not. @param method the UnboundMethod to check
1451 Builds and binds a checked method to a receiver. @param receiver object to which the method will be bound @return BoundMethod instance @throws NoSuchMethodException if the method does not exist
1452 Builds and binds a method to a receiver. @param receiver target object to bind the method to @return BoundMethod instance bound to the receiver
1453 Builds a static checked method. @return StaticMethod instance @throws NoSuchMethodException if method not found
1454 Builds and returns a static instance of the class. @return StaticMethod object configured as static
1455 Loads available file systems. Synchronizes on FileSystem class and logs loading details.
1456 Computes Jenkins hash for a file. @param args array containing the filename
1457 Initializes a hash function with specified parameters. @param maxValue maximum value for hashing @param nbHash number of hash functions to use @param hashType type of hash function
1458 Constructs a new Retouched Bloom Filter instance.
1459 Approximates the count of an item using a hash-based approach. @param key the item to approximate the count for @return estimated count of the item, or 0 if not found
1460 Adds a key as a false positive. @param key the key to add, must not be null
1461 Removes a key from the specified vector list. @param k the key to remove @param vector the list of keys
1462 Finds the index of the minimum weight in a hash array. @param h array of hash indices @return index with the lowest key weight
1463 Finds index of maximum fingerprint weight. @param h array of hash indices @return index with highest fingerprint weight
1464 Computes the ratio of weights for each element in vectors.
1465 Dumps resource content to standard output. @param name resource name @return SUCCESS or error code if fails
1466 Displays usage information and error codes. @param args command-line arguments (not used) @return error code indicating usage message display
1467 Inserts an element into the heap. @param element the element to insert @return true if insertion is successful, false otherwise
1468 Creates a TreeSet from an iterable of comparable elements. @param elements the iterable containing elements to be added @return a TreeSet containing all elements from the iterable
1469 Creates a HashSet from an iterable. @param elements the source of elements for the set @return a new HashSet containing the elements
1470 Creates a HashSet from variable arguments. @param elements array of elements to add to the set @return HashSet containing the provided elements
1471 Executes a program based on command-line arguments. @param args array of command-line arguments @return 0 if successful, -1 if an error occurs
1472 Adds a field to the table. @param title column title @param justification text alignment (LEFT, RIGHT, CENTER) @param wrap whether to wrap text in the column @return Builder instance for method chaining
1473 Helper to get time duration with default start and end units. @param name identifier for the time duration @param vStr string representation of the time value @param unit TimeUnit for both start and end @return time duration in the specified unit
1474 Appends a property to the XML configuration document. @param doc XML document to append to @param conf configuration element in the XML document @param propertyName name of the property to add @param redactor optional redactor for sensitive values
1475 Adds deprecation information to the context. @param deltas array of deprecation changes
1476 Binds a server connector to a port range starting from a given port. @param listener ServerConnector instance to bind @param startPort Initial port number to attempt binding @throws Exception if binding fails after trying all ports
1477 Adds fencing parameters of a target to the environment as prefixed variables. @param target HAServiceTarget instance @param environment map to store prefixed environment variables
1478 Reads data from a PositionedReadable stream into a ByteBuffer. @param stream source of the data to read @param range specifies the position and length to read @param buffer destination for the read data @throws IOException if an I/O error occurs during reading
1479 Validates and sorts file read ranges. @param ranges list of file range objects to validate @throws EOFException if an invalid range is found
1480 Sets the caching state with a future action. @param actionFuture future representing the caching action
1481 Updates the state if it matches any of the expected current states. @param newState new state to set @param expectedCurrentState one or more expected current states
1482 Checks if the given path exists and is a directory. @param path the file path to check @param argName name of the argument for error messages
1483 Checks if the given path exists and is a regular file. @param path the Path object to check @param argName name of the argument for error messages
1484 Checks if a given block number is the last block. @param blockNumber the block number to check @return true if it's the last block, false otherwise
1485 Calculates start offset for a given block number. @param blockNumber the block index @return start offset in bytes
1486 Retrieves state by block number. @param blockNumber the block identifier @return the corresponding State object
1487 Sets the state of a specified block. @param blockNumber index of the block to update @param blockState new state for the block
1488 Calculates block number from given offset. @param offset file position in bytes @return block index or throws exception for invalid offset
1489 Aggregates IO statistics into a snapshot. @param snapshot target IO statistics snapshot @param statistics source IO statistics to aggregate @return true if aggregation successful, false otherwise
1490 Saves an I/O statistics snapshot to a specified file system path. @param snapshot the I/O statistics snapshot to save (nullable) @param fs the file system where the snapshot will be saved @param path the path in the file system where the snapshot will be saved @param overwrite flag indicating whether to overwrite an existing file
1491 Retrieves I/O statistics counters from a snapshot. @param source the source object containing I/O statistics @return map of counter names to their values
1492 Applies gauge statistics to an IOStatisticsSnapshot. @param source the source of IO statistics @return a map of gauge names and their values
1493 Applies minimum calculations to I/O statistics snapshot. @param source I/O statistics data source @return Map of minimum values for each metric
1494 Applies maximum aggregation to I/O statistics snapshot. @param source I/O statistics data source @return Map of maximum values for each statistic
1495 Computes mean statistics for IO operations. @param source input data source @return map of operation names to sample count and sum pairs
1496 Creates a copy of the current FlagSet. @return A new FlagSet instance with the same configuration and flags.
1497 Creates a FlagSet with specified parameters. @param enumClass the Enum class type @param prefix string prefix for flag set @param flags initial set of Enum values @return a new FlagSet instance
1498 Closes the file system resource. @throws IOException if an I/O error occurs during closing
1499 Closes all FileSystem instances, optionally only those marked for auto-close. @param onlyAutomatic true to close only automatically managed FileSystems @throws IOException if any FileSystem fails to close
1500 Converts an IO statistics snapshot to JSON string. @param snapshot IO statistics snapshot object, can be null @return JSON string representation of the snapshot or empty string if null
1501 Writes bytes to a specified path in a FileContext. @param fileContext the FileContext object @param path the destination path @param bytes the byte array to write @return the updated FileContext object
1502 Writes lines to a file in the specified charset. @param fileContext Hadoop FileContext instance @param path destination file path @param lines iterable of CharSequence lines to write @param cs character set for encoding @return updated FileContext instance @throws IOException if an I/O error occurs
1503 Writes a character sequence to a file. @param fs FileContext for file system operations @param path Path where the file will be written @param charseq Character sequence to write @param cs Charset for encoding the character sequence @return FileContext used for writing @throws IOException if an I/O error occurs
1504 Creates a file at the specified path. @param path file path to create @return FSDataOutputStreamBuilder configured for overwriting
1505 Creates a file output stream builder. @param path file path to be created @return FSDataOutputStreamBuilder configured to overwrite existing files
1506 Appends to an existing file. @param path file path to append to @return FSDataOutputStreamBuilder configured for appending
1507 Appends to a file at the specified path. @param path file path to append to @return FSDataOutputStreamBuilder for further configuration
1508 Lists file statuses in a directory. @param f path to the directory @return array of FileStatus objects @throws IOException if an I/O error occurs
1509 Lists file statuses for given paths. @param files array of Path objects to check @return array of FileStatus objects @throws FileNotFoundException if any file is not found @throws IOException if an I/O error occurs
1510 Creates and registers a new counter. @param info metric information @param iVal initial value of the counter @return newly created MutableCounterInt instance
1511 Creates a new counter with initial value. @param info metric information @param iVal initial value for the counter @return newly created MutableCounterLong instance
1512 Creates a new gauge metric. @param info metric information @param iVal initial value of the gauge @return newly created MutableGaugeLong object
1513 Creates a new mutable gauge with an initial value. @param info metric information @param iVal initial float value for the gauge @return newly created MutableGaugeFloat instance
1514 Creates a new integer gauge. @param info metric information @param iVal initial value for the gauge @return created MutableGaugeInt instance
1515 Resolves a file link using the provided function. @param fileContext context for file operations @param path path to the file link @param fn function to resolve the link @return resolved object of type T @throws UnresolvedLinkException if link cannot be resolved @throws IOException if an I/O error occurs
1516 Creates a GlobBuilder instance. @param fileContext context for file operations @return GlobBuilder object initialized with the given file context
1517 Creates a GlobBuilder instance. @param filesystem the file system to use @return a new GlobBuilder object
1518 Checks if the asynchronous call is done. @return true if the call has returned or thrown an exception, false otherwise
1519 Retrieves and clears an asynchronous result. @return AsyncGet object or lower layer result if none available
1520 Updates folder usage statistics. Sets the 'used' variable to current folder usage.
1521 Constructs a new MeanStatistic by copying values from another instance. @param that the MeanStatistic to copy from
1522 Converts IO statistics source to string. @param source the source object for IO statistics @return string representation of IO statistics or empty string if error occurs
1523 Converts wrapped object to string using IO statistics. @return String representation of IO statistics
1524 Converts statistics to string representation. @return string representation of statistics or NULL_SOURCE if null
1525 Converts IOStatistics to a formatted string. @param statistics the IOStatistics object to convert @return a pretty-printed string of statistics or an empty string if null
1526 Creates a duration tracker. @param factory optional factory for creating trackers @param statistic name of the statistic to track @return DurationTracker instance, or stub if factory is null
1527 Deletes a block file and evicts it from the cache. @param elementToPurge Entry object representing the block to be purged
1528 Converts StorageStatistics to IOStatistics. @param storageStatistics source statistics object @return IOStatistics representation
1529 Adds an atomic long counter to the statistics. @param key identifier for the counter @param source AtomicLong to be used as a counter @return updated DynamicIOStatisticsBuilder instance
1530 Sets an atomic integer counter for a given key. @param key identifier for the counter @param source AtomicInteger to track @return this builder instance
1531 Adds a mutable counter to the statistics builder. @param key identifier for the counter @param source mutable counter source @return updated DynamicIOStatisticsBuilder instance
1532 Registers an AtomicLong gauge. @param key metric identifier @param source AtomicLong to track @return this builder instance
1533 Registers an AtomicInteger gauge. @param key unique identifier for the gauge @param source AtomicInteger to monitor @return this builder instance
1534 Sets minimum value using an AtomicLong. @param key identifier for the statistic @param source AtomicLong providing the value @return this builder instance
1535 Sets minimum value using AtomicInteger. @param key identifier for the statistic @param source AtomicInteger providing the minimum value @return updated DynamicIOStatisticsBuilder instance
1536 Sets maximum value for a key using an AtomicLong. @param key identifier for the statistic @param source AtomicLong providing the value @return this builder instance
1537 Sets maximum value using AtomicInteger. @param key identifier for the statistic @param source AtomicInteger to track maximum value @return updated DynamicIOStatisticsBuilder instance
1538 Registers failure handling mechanisms. Initializes interrupt escalator and uncaught exception handler.
1539 Accepts a connection on the domain socket. @return accepted DomainSocket or null if interrupted @throws IOException if an I/O error occurs
1540 Initiates shutdown process. May throw IOException on failure.
1541 Sends file descriptors with associated data. @param descriptors array of FileDescriptor objects @param jbuf byte array containing data to send @param offset starting index in jbuf @param length number of bytes to send @throws IOException if an I/O error occurs
1542 Receives file input streams into a buffer. @param streams array to hold received FileInputStreams @param buf buffer to receive data @param offset starting offset in the buffer @param length number of bytes to read @return number of bytes received or -1 if error occurs
1543 Creates a new IOStatisticsContext instance. @param key unique identifier for the context @return newly created IOStatisticsContextImpl
1544 Verifies checksums for chunked data. @param data ByteBuffer containing the data to be verified @param checksums ByteBuffer containing the expected checksums @param fileName name of the file being processed @param basePos base position in the file for verification @throws ChecksumException if verification fails
1545 Decrypts data using the provided decryptor and buffer. @param decryptor the decryption engine to use @param inBuffer input buffer containing encrypted data @param position current position in the decryption process @param iv initialization vector for decryption @return padding byte used after decryption @throws IOException if an I/O error occurs during decryption
1546 Resets stream offset and buffers. @param offset new offset value @throws IOException if an I/O error occurs
1547 Writes encrypted bytes to the output stream. @param b byte array containing data to write @param off starting offset in the byte array @param len number of bytes to write @throws IOException if an I/O error occurs
1548 Flushes and encrypts buffered data. Throws IOException if an I/O error occurs.
1549 Compiles a glob pattern into a regular expression. @param globPattern the glob pattern to be compiled @return a compiled Pattern object
1550 Retrieves bytes read based on network distance. @param distance network distance (0-4) @return bytes read count
1551 Creates a file with specified permissions and options. @param f file path @param absolutePermission file permissions @param flag creation flags (e.g., APPEND, OVERWRITE) @param bufferSize buffer size for I/O operations @param replication replication factor for the file @param blockSize block size for the file @param progress progress callback @param checksumOpt checksum options @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
1552 Initializes a new file system with the specified URI and scheme. @param uri the base URI of the file system @param supportedScheme the supported URI scheme @param authorityNeeded indicates if an authority component is required @param defaultPort the default port for the file system @throws URISyntaxException if the URI is invalid
1553 Encodes input byte arrays into output byte arrays. @param inputs array of input byte arrays to encode @param outputs array of output byte arrays for encoded data @throws IOException if an I/O error occurs during encoding
1554 Encodes input ByteBuffers into output ByteBuffers. @param inputs array of input ByteBuffers to encode @param outputs array of output ByteBuffers for encoded data @throws IOException if an I/O error occurs during encoding
1555 Constructs an ArrayPrimitiveWritable with the given value. @param value the initial value to set
1556 Returns the canonical URI of the file system. @return Canonical URI representing the file system's location
1557 Checks if the user has a specific capability. @param capability the capability to check @return true if the user has the capability, false otherwise
1558 Releases a buffer from the pool and marks it as released. @param data BufferData to be released
1559 Releases all done buffer blocks.
1560 Initializes a CachingBlockManager with specified parameters. @param blockManagerParameters configuration for block management
1561 Reads a block into the provided ByteBuffer. @param blockNumber identifier of the block to read @param buffer destination for reading data @throws IOException if an I/O error occurs
1562 Returns the absolute position in the buffer. @return Absolute position as a long value
1563 Checks if the entire buffer has been fully read. @return true if buffer is completely read, false otherwise
1564 Sets the absolute position in the buffer. @param pos absolute position to set @return true if position is valid and within buffer, false otherwise
1565 Retrieves the current IO statistics context. @return IOStatisticsContext object or throws NullPointerException if null
1566 Sets the thread's I/O statistics context. @param statisticsContext the I/O statistics context to be set
1567 Retrieves instance-specific metrics configurations. @param type configuration type identifier @return Map of instance names to their MetricsConfig
1568 Parses command line arguments starting from a specified position. @param args array of command line arguments @param pos starting position for parsing @return list of parsed parameters
1569 Increments error count and displays warning message. @param message error message to be displayed
1570 Creates a PathHandle for a file. @param stat FileStatus object representing the file @param opts Optional handle options @return PathHandle for the file
1571 Returns array of options indicating no change and no move. @return HandleOpt array with two elements: changed(false) and moved(false)
1572 Returns an array of HandleOpt objects representing content changes. @return Array with two HandleOpt instances: one indicating unchanged content and another for moved content.
1573 Returns an array of HandleOpt with changed and moved options. @return Array containing two HandleOpt objects
1574 Returns an array of HandleOpt objects with changed and moved set to true. @return Array of HandleOpt objects
1575 Initializes a ShellCommandExecutor with command details. @param execString array of command and arguments @param dir working directory for the command @param env environment variables for the command @param timeout maximum execution time in milliseconds @param inheritParentEnv flag to inherit parent's environment
1576 Initializes a thread to periodically refresh data. @param runImmediately if true, starts the first refresh immediately
1577 Creates a clone of the token with a new service. @param newService the updated service text @return a new PrivateToken instance with the updated service
1578 Throws exception if URI is absolute with a relative path.
1579 Checks if URI path is absolute and scheme/authority are null. @return true if conditions met, false otherwise
1580 Checks if the URI path is absolute. @return true if the URI path is absolute, false otherwise
1581 Validates a given Path against the URI scheme, authority, host, and port. @param path the Path to validate
1582 Writes the FileStatus to a DataOutput stream. @param out the DataOutput stream to write to @throws IOException if an I/O error occurs
1583 Validates arguments for a file upload part. @param filePath path to the file @param inputStream data stream of the file part @param partNumber sequential number of the part @param uploadId unique identifier for the upload session @param lengthInBytes size of the part in bytes
1584 Aborts uploads under a specified directory. @param path directory path to check for uploads @return CompletableFuture with result -1 indicating no uploads found or aborted
1585 Skips bytes in the input stream. @param n number of bytes to skip @return actual number of bytes skipped
1586 Applies a UMask to file permissions. @param umask the UMask permission to apply @return new FsPermission with UMask applied
1587 Retrieves file permissions. @param sftpFile SFTP file entry @return FsPermission object representing file permissions
1588 Constructs an FsPermission with specified mode. @param mode file permission bits
1589 Returns default file system permissions. @return FsPermission object with read, write, and execute permissions for all users
1590 Returns default directory permissions. @return FsPermission object with read, write, and execute permissions for all users
1591 Returns default file permissions. @return FsPermission object with read and write access for all users
1592 Returns default cache pool permissions. @return FsPermission object with mode 00755
1593 Converts Unix symbolic permission string to FsPermission. @param unixSymbolicPermission 9-character Unix permission string @return FsPermission object or null if input is null
1594 Prints ACL entries for a single scope. @param aclStatus the ACL status of the file system @param fsPerm file system permissions @param entries list of ACL entries to print
1595 Converts a list of ACL entries to a comma-separated string. @param aclSpec list of AclEntry objects @return string representation of ACL entries without trailing comma
1596 Constructs FsPermission from a string mode. @param mode permission string representation
1597 Reads bytes into a buffer. @param b destination buffer @param offset starting position in the buffer @param length number of bytes to read @return actual number of bytes read or -1 if no more data
1598 Calculates compressed data size. @return Size of compressed data in bytes @throws IOException if an I/O error occurs
1599 Adjusts column widths based on file statistics. @param items array of PathData objects @throws IOException if an I/O error occurs
1600 Retrieves quota usage for a given file path. @param f file path to check quota usage @return QuotaUsage object representing quota information @throws IOException if an I/O error occurs
1601 Retrieves the size of the file at the specified path. @param path the file path to check @return size in bytes, or 0 if not a regular file @throws IOException if an I/O error occurs
1602 Constructs an AbstractLaunchableService with a given name. @param name service identifier
1603 Transitions to a new state. @param proposed the new state to transition to @return the previous state before transition
1604 Instantiates a service from configuration. @param conf configuration object @return Service instance or throws exception if creation fails
1605 Compares this object with another BinaryComparable. @param other the object to compare @return true if lengths and contents are equal, false otherwise
1606 Updates byte array with new data. @param newData source byte array @param offset starting position in source array @param length number of bytes to copy
1607 Sets and returns the length of the key. @param key BytesWritable object to set the key on @return Length of the key in bytes @throws IOException if an I/O error occurs
1608 Lists files in a directory. @param dir directory to list @return array of file names or throws exceptions on error
1609 Checks directory access permissions. @param dir the directory to check @throws DiskErrorException if directory is invalid or lacks necessary permissions
1610 Locks a direct ByteBuffer in memory. @param buffer the ByteBuffer to lock @param len length of the buffer to lock @throws IOException if the buffer is not direct or an I/O error occurs
1611 Creates a SharedFileDescriptorFactory. @param prefix prefix for shared files @param paths array of file paths to check @return SharedFileDescriptorFactory instance @throws IOException if no valid path is found or other I/O errors occur
1612 Writes data chunks with checksums. @param b byte array containing data @param off offset in the byte array to start writing from @param len number of bytes to write @throws IOException if an I/O error occurs
1613 Calculates checksums for chunks of data. @param data buffer containing the input data @param checksums buffer to store calculated checksums
1614 Frees cryptographic buffers and cleans buffer pool.
1615 Initializes a BoundedByteArrayOutputStream with specified capacity. @param capacity maximum number of bytes that can be written
1616 Decodes URL string into current object. @param newValue URL-encoded string to decode @throws IOException if decoding fails
1617 Retrieves erased blocks from a group. @param blockGroup the ECBlockGroup to process @return array of erased ECBlock objects
1618 Skips to the next occurrence of a marker in the stream. @param marker the marker value to search for @param markerBitLength the bit length of the marker @return true if marker is found, false otherwise @throws IOException if an I/O error occurs
1619 Initializes a CBZip2OutputStream with a specified block size. @param out output stream to write compressed data @param blockSize compression block size (1-9) @throws IOException if an I/O error occurs
1620 Initializes a new BlockCompressorStream. @param out output stream to compress data into @param compressor the compressor to use for compression
1621 Constructs a new BlockDecompressorStream. @param in input stream to decompress @param decompressor decompressor to use @param bufferSize size of the buffer @throws IOException if an I/O error occurs
1622 Writes compressed data to the output stream. @param b byte array containing the data to be written @param off offset in the byte array where the data starts @param len number of bytes to write @throws IOException if an I/O error occurs
1623 Constructs a ZStandardCompressor with specified compression level and buffer size. @param level compression level (0-21) @param bufferSize size of the input and output buffers
1624 Creates a compression output stream using a codec pool. @param codec compression codec to use @param conf configuration settings @param out underlying output stream @return CompressionOutputStream for writing compressed data
1625 Closes resources and flushes output. @throws IOException on I/O error during close
1626 Creates a CompressionInputStream using a codec pool. @param codec the compression codec to use @param conf configuration settings @param in input stream to compress @return CompressionInputStream for reading compressed data @throws IOException if an I/O error occurs
1627 Closes resources and releases decompressors. @throws IOException if an I/O error occurs
1628 Returns a ZlibCompressor instance. @param conf configuration settings @return Compressor using native or built-in zlib, based on config
1629 Returns a zlib direct decompressor if native library is loaded. @param conf configuration settings @return DirectDecompressor instance or null if not available
1630 Returns a zlib decompressor based on configuration. @param conf configuration settings @return Decompressor instance, either native or built-in
1631 Stores delegation key in both SQL database and local cache. @param key DelegationKey object to be stored
1632 Updates delegation key in both database and cache. @param key DelegationKey object to be updated
1633 Reads a string safely from DataInput. @param in source of input data @param maxLength maximum allowed string length @return decoded string @throws IOException if reading fails @throws IllegalArgumentException if length is out of bounds
1634 Skips over data in the input stream. @param in DataInput stream to read from @throws IOException if an I/O error occurs
1635 Reads compressed data into a buffer. @param buffer DataInputBuffer to store decompressed data @param filter CompressionInputStream for decompression @throws IOException if an I/O error occurs
1636 Reads a string from DataInput with a specified max length. @param in source of input data @param maxLength maximum allowed length of the string @return decoded string @throws IOException if an I/O error occurs
1637 Writes a string to DataOutput. @param out DataOutput stream to write to @param s the string to write, null writes -1 length
1638 Builds a token service URL. @param addr server address @return Text object representing the service URL
1639 Converts a TokenProto to a Token object. @param tokenProto protocol buffer representation of the token @return Token object created from the proto
1640 Writes an enum value to DataOutput. @param out the DataOutput to write to @param enumVal the enum value to write @throws IOException if an I/O error occurs
1641 Writes user and group information along with permissions to a DataOutput stream. @param out the DataOutput stream to write to @param username the username to write @param groupname the group name to write @param permission the file system permissions to write @throws IOException if an I/O error occurs
1642 Constructs a Text object from UTF-8 encoded bytes. @param utf8 byte array containing UTF-8 encoded data
1643 Constructs a Text object from another UTF-8 encoded Text. @param utf8 source Text object with UTF-8 encoding
1644 Reads a line of text with specified maximum length and bytes. @param str Text object to store the result @param maxLineLength maximum length of the line @param maxBytesToConsume maximum number of bytes to read @return number of bytes read, or -1 if end of stream @throws IOException if an I/O error occurs
1645 Returns the length of the text. @return Length of the text as an integer
1646 Constructs a new SortedMapWritable by copying another. @param other the SortedMapWritable to copy from
1647 Constructs a new MapWritable by copying another. @param other MapWritable to copy from
1648 Creates a retry policy that retries up to a maximum time with fixed sleep intervals. @param maxTime the maximum total time for retries @param sleepTime the fixed time to sleep between retries @param timeUnit the unit of time for maxTime and sleepTime @return a RetryPolicy object configured with the specified parameters
1649 Creates a failover proxy for the specified interface. @param iface interface to be proxied @param proxyProvider provider for proxy instances @param retryPolicy policy for retrying failed operations @return proxy object implementing the specified interface
1650 Creates a failover proxy for the given interface and implementation. @param iface interface class @param implementation concrete implementation of the interface @param methodNameToPolicyMap map of method names to retry policies @return Object representing the failover proxy
1651 Initializes a Writer with a file output stream and configuration. @param fout file data output stream @param compressionName name of the compression algorithm @param conf configuration settings @throws IOException if the file is not at zero offset or other I/O errors occur
1652 Constructs a TFileIndex from DataInput. @param entryCount number of entries to read @param in DataInput stream containing index data @param comparator BytesComparator for key comparison @throws IOException if reading fails
1653 Checks for end of file condition. @return true if EOF is reached, false otherwise @throws IOException if an I/O error occurs
1654 Writes buffer content to output. @throws IOException on I/O error
1655 Compares this object with another RawComparable. @param key the other RawComparable to compare with @return comparison result as an integer
1656 Constructs a UTF8 object from a given string. @param string input string to be encoded in UTF-8
1657 Computes MD5 hash of a given string. @param string input text to hash @return MD5Hash object representing the hash
1658 Synchronizes buffered records to output stream. Throws IOException if an I/O error occurs.
1659 Returns the MD5 hash of the object's byte representation as a tracking ID. @return tracking ID string
1660 Encodes the current object to a URL-safe string. @return A URL-encoded string representation of the object @throws IOException if encoding fails
1661 Adds a new node to the topology. @param node Node to be added
1662 Removes a node from the cluster. @param node the node to be removed @throws IllegalArgumentException if attempting to remove an inner node
1663 Decommissions a leaf node from the system. @param node the node to be decommissioned
1664 Sorts nodes by distance from a reader. @param reader reference node for sorting @param nodes array of nodes to sort @param activeLen number of active nodes @param secondarySort consumer for additional sorting logic
1665 Sorts nodes by distance using network location. @param reader reference node for distance calculation @param nodes array of nodes to sort @param activeLen number of active nodes to consider @param secondarySort consumer for additional sorting logic
1666 Initializes a socket input stream with a channel and timeout. @param channel readable byte channel for data input @param timeout maximum time to wait for data in milliseconds @throws IOException if an I/O error occurs
1667 Initializes a SocketOutputStream with a channel and timeout. @param channel the writable byte channel for data output @param timeout the timeout value in milliseconds @throws IOException if an I/O error occurs
1668 Waits for and retrieves RPC response. @param call the RPC call object @param connection the network connection @param timeout max time to wait in specified units @param unit the time unit for timeout @return Writable response or null if timed out @throws IOException on error during communication
1669 Constructs a ScriptBasedMapping using a default RawScriptBasedMapping.
1670 Constructs a new ScriptBasedMappingWithDependency. Initializes with a RawScriptBasedMappingWithDependency instance.
1671 Creates a parent node with specified name. @param parentName name of the parent node @return newly created InnerNodeImpl instance
1672 Adds a socket and handler to the processing queue. @param sock DomainSocket to be added @param handler Handler for processing the socket
1673 Removes a socket from the domain. @param sock the socket to remove
1674 Selects channel for I/O operations with timeout. @param channel the selectable channel to register @param ops interest set operations (e.g., OP_READ) @param timeout maximum time to wait in milliseconds @return number of channels ready for I/O or 0 if timed out @throws IOException if an I/O error occurs
1675 Retrieves the default IP address for a specified network interface. @param strInterface name of the network interface @return default IP address as a string @throws UnknownHostException if the interface or IP is not found
1676 Retrieves host addresses for a given network interface. @param strInterface name of the network interface @return array of host IP addresses as strings @throws UnknownHostException if the interface is not found or has no addresses
1677 Retrieves default host based on interface and nameserver. @param strInterface network interface name or "default" for system default @param nameserver DNS server address or "default" to use system default @param tryfallbackResolution flag to attempt fallback resolution if primary fails @return hostname as String @throws UnknownHostException if host cannot be determined
1678 Loads the first available configuration file. @param prefix common prefix for metrics configuration @param fileNames variable list of file names to attempt loading from @return MetricsConfig object initialized with properties from the first found file, or an empty config if none are found
1679 Loads user groups. @param user unique user identifier @return Set of group names or throws exception if none found
1680 Shuts down the singleton instance.
1681 Stops the server and its components. Logs stopping message, interrupts handlers, listener, auxiliary listeners, and responders.
1682 Stops the web application and associated resources. Throws Exception if any step fails.
1683 Initializes MutableQuantiles with specified parameters and schedules rollover task. @param name metric name @param description metric description @param sampleName sample name @param valueName value name @param interval time interval in seconds
1684 Creates a new mutable statistic. @param name unique metric name @param desc description of the metric @param sampleName name for samples @param valueName name for values @param extended flag for extended stats @return newly created MutableStat object
1685 Constructs a MutableStat with default isRate set to false. @param name the name of the stat @param description a brief description of the stat @param sampleName the name of the sample metric @param valueName the name of the value metric
1686 Sets context for metrics registry. @param name context name to be set @return updated MetricsRegistry instance
1687 Tags metrics with given name, description, and value. @param name unique metric name @param description brief description of the metric @param value value to associate with the metric @param override flag to allow overriding existing tags @return MetricsRegistry instance with updated tags
1688 Adds a sample to the statistics for a given name. @param name identifier for the statistic @param elapsed time in milliseconds to record
1689 Publishes metrics to all sinks. @param buffer MetricsBuffer containing data to publish @param immediate If true, publishes immediately; otherwise, uses logical time
1690 Copies statistics to another SampleStat object. @param other target SampleStat object to receive copied values
1691 Logs slow RPC calls exceeding a certain threshold. @param methodName name of the RPC method @param call details of the RPC call @param details processing details of the call
1692 Refreshes group cache by clearing and repopulating with current group names. @throws IOException if an error occurs during the refresh process
1693 Prints a newline followed by a separator line.
1694 Prints a formatted title with leading and trailing newlines. @param format the format string for the title @param args arguments to be inserted into the format string
1695 Logs an error and throws a KerberosDiagsFailure exception. @param category error category @param message error message template @param args arguments for the message template
1696 Creates a remote user with specified authentication method. @param user username for the remote user @param authMethod authentication method to be used @return UserGroupInformation object representing the remote user
1697 Starts background threads for token removal. Ensures only one instance runs at a time.
1698 Rolls the master key and updates delegation keys. Ensures current key is not expired and sets a new expiry date.
1699 Constructs a new instance with default parameters.
1700 Constructs a new instance with the specified authenticator and no proxy. @param authenticator the authentication mechanism to use
1701 Constructs a new instance with default authentication. @param connConfigurator configuration for connection setup
1702 Reads bytes into buffer. @param b byte array to store data @return number of bytes read or -1 if end of stream
1703 Checks if authentication is from a keytab file. @return true if using Kerberos credentials and Hadoop login with a valid keytab
1704 Checks if authentication is from ticket. @return true if Kerberos credentials are present, Hadoop login is active, and no keytab is set; false otherwise
1705 Initializes default SSL socket factory. @param preferredMode desired SSL channel mode @throws IOException if initialization fails
1706 Constructs a CommandFactory with no initial command.
1707 Constructs a new HarFileSystem instance. Note: initialize() must be called to set up the underlying file system.
1708 Initializes a new HarFileSystem instance. @param fs underlying FileSystem to wrap
1709 Constructs an instance of FsShell with no configuration.
1710 Constructs a new instance with default output stream. @param conf Configuration object
1711 Initializes output and error streams.
1712 Resolves a hostname to an InetAddress. @param host the hostname or IP address string @return resolved InetAddress object @throws UnknownHostException if resolution fails
1713 Writes ACL string to DataOutput. @param out DataOutput stream to write to
1714 Creates a ZooKeeper instance with optional SSL configuration. @return ZooKeeper object configured for use @throws IOException if there is an error in SSL setup or ZooKeeper creation
1715 Returns the size of the queue for a given key. @param keyName the key to look up @return size of the queue or 0 if the key is not present
1716 Retrieves at most 'num' elements for a given key. @param keyName the key to retrieve values from @param num maximum number of values to retrieve @return list of retrieved values, may be less than requested if queue is empty
1717 Removes and processes all entries with the specified key. @param keyName the key to identify entries for removal
1718 Adds an element to the collection. @param e element to be added @throws InterruptedException if interrupted while adding
1719 Ensures the system is initialized. Initializes if not already done.
1720 Converts current time to specified unit. @param timeUnit target time unit @return current time in the specified unit
1721 Retrieves protocol signature for version compatibility check. @param clientMethodsHashCode hash code of client methods @param serverVersion server's protocol version @param protocol class representing the protocol @return ProtocolSignature object or null if versions match
1722 Decays current call costs by applying a decay factor. Removes entries with zero decayed cost after updating.
1723 Determines the priority level for a schedulable object. @param obj the Schedulable object to prioritize @return the priority level, at least 0
1724 Removes and returns the next element from the queue based on priority. @return the removed element
1725 Closes the IPC connection safely. Ensures resources are released and logs any issues encountered during closure.
1726 Initializes a new Globber instance. @param fs FileSystem to operate on @param pathPattern pattern for matching paths @param filter PathFilter to apply @param resolveSymlinks whether to resolve symbolic links
1727 Constructs a MachineList with specified host entries. @param hostEntries comma-separated list of hosts
1728 Creates a new instance of SysInfo based on the operating system. @return SysInfo object specific to the current OS @throws UnsupportedOperationException if OS is neither Linux nor Windows
1729 Calculates physical memory size. Reads meminfo file, subtracts corrupt and huge page sizes. @return memory size in bytes
1730 Calculates total available virtual memory size. @return sum of physical and free swap memory in bytes
1731 Transforms XML using XSLT stylesheet. @param styleSheet InputStream containing XSLT stylesheet @param xml InputStream containing XML data @param out Writer to receive transformation output @throws TransformerConfigurationException if configuration fails @throws TransformerException if transformation fails
1732 Generates a summary string based on specified options. @param qOption include quota usage if true @param hOption human-readable sizes if true @param tOption type-specific quota usage if true @param xOption exclude snapshot counts if true @param types list of storage types to consider @return formatted summary string
1733 Generates a snapshot summary string. @param hOption flag to use human-readable sizes @return formatted snapshot details as a string
1734 Computes memory capacity based on percentage. @param percentage of max memory to use @param mapName context for capacity calculation @return computed memory capacity in bytes
1735 Reads data into buffer. @throws IOException on input error
1736 Reads and discards specified number of bytes. @param len number of bytes to read and discard @return actual number of bytes discarded
1737 Converts object to string representation. @return String representation of the object
1738 Converts object to a string with error handling. @throws IOException if an I/O error occurs during conversion @return String representation of the object
1739 Converts byte array to string. @param bytes input byte array @return resulting string @throws IOException if an I/O error occurs
1740 Reads a string from DataInput. @param in DataInput source @return String read from input @throws IOException if reading fails
1741 Validates RPC response header. @param header the response header to check @throws IOException if validation fails or response is null
1742 Converts a single byte to its hexadecimal string representation. @param b the byte to convert @return hexadecimal string of the byte
1743 Handles uncaught exceptions by logging and exiting. @param thread the thread where the exception occurred @param exception the uncaught Throwable
1744 Exits the program with a usage message.
1745 Handles uncaught exceptions in threads. Logs errors and decides on shutdown or termination based on exception type.
1746 Terminates the application with an exit code and message. @param exitCode numeric code indicating exit status @param message descriptive message for the termination reason
1747 Terminates the application with a specified status. @param status exit status code @throws ExitException if termination fails
1748 Prints an error message and terminates the program. @param status exit status code @param msg error message to print
1749 Throws a HaltException with a default message. @param status exit status code @throws HaltException always thrown
1750 Sorts elements in the specified range using natural ordering. @param s the sortable indexed collection @param p the starting index (inclusive) @param r the ending index (exclusive)
1751 Constructs an AclStatus object with specified details. @param owner the owner of the ACL @param group the group associated with the ACL @param stickyBit indicates if the sticky bit is set @param entries iterable list of ACL entries @param permission file system permissions
1752 Parses ACLs from a comma-separated string. @param aclString formatted ACL string @return List of ACL objects @throws BadAclFormatException if format is invalid
1753 Parses authentication string into a list of ZKAuthInfo objects. @param authString comma-separated auth components @return List of ZKAuthInfo objects @throws BadAuthFormatException if auth format is invalid
1754 Copies file attributes from source to target. @param src source PathData object @param target target PathData object @param preserveRawXAttrs whether to preserve raw extended attributes @throws IOException if an I/O error occurs
1755 Generates minimal ACL entries from file permissions. @param perm file system permissions @return list of ACL entries for user, group, and others
1756 Tracks duration for a given key and count. @param key unique identifier for tracking @param count number of occurrences to track @return DurationTracker object or stub if key is not found
1757 Constructs a StatisticDurationTracker with default count. @param iostats storage for I/O statistics @param key identifier for the statistic
1758 Constructs a DurationInfo instance with logging enabled. @param log Logger instance for logging @param format Message format string @param args Arguments for the message format
1759 Waits for a CompletableFuture to complete. @param future the CompletableFuture to wait on @throws IOException if task is cancelled or completes exceptionally
1760 Waits for a CompletableFuture to complete, ignoring any exceptions. @param future the CompletableFuture to wait on
1761 Creates a CRC composer with a specified type and byte hint. @param type checksum type to use @param bytesPerCrcHint number of bytes per CRC segment @return CrcComposer instance @throws IOException if an I/O error occurs
1762 Updates composite CRC with new data block. @param crcB CRC value of the current block @param bytesPerCrc size of the current block in bytes @throws IOException if position exceeds stripe length without alignment
1763 Formats and calculates time difference. @param dateFormat formatter for date and time @param finishTime end time in milliseconds @param startTime start time in milliseconds @return formatted time with difference
1764 Escapes special characters in a string. @param str input string to be escaped @return escaped string with special characters replaced
1765 Unescapes a string using specified escape and delimiter characters. @param str input string to unescape @return unescaped string
1766 Generates a startup or shutdown message. @param classname name of the class @param args list of arguments @return formatted message string
1767 Retrieves the next source element. Throws NoSuchElementException if no more elements are available. Cleans up resources and logs errors on exception.
1768 Awaits the result of a future. @param future the future to wait for @return the result of the future @throws InterruptedIOException if interrupted while waiting @throws IOException if an I/O error occurs @throws RuntimeException for other exceptions
1769 Awaits and collects results from a collection of futures. @param collection of Future objects @return list of results from the futures @throws InterruptedIOException if interrupted while waiting @throws IOException for I/O errors during future processing @throws CancellationException if any future is cancelled @throws RuntimeException for other runtime exceptions
1770 Waits for a future to complete with a specified timeout. @param future the Future object to wait on @param timeout the maximum time to wait @param unit the time unit of the timeout parameter @return the result of the future @throws InterruptedIOException if interrupted while waiting @throws IOException if an I/O error occurs @throws RuntimeException for other exceptions @throws TimeoutException if the wait timed out
1771 Waits for all futures to complete within a specified duration. @param collection of Future objects @param duration maximum time to wait @return list of results from futures @throws InterruptedIOException if interrupted while waiting @throws IOException if an I/O error occurs @throws CancellationException if any future is cancelled @throws TimeoutException if the duration expires
1772 Cancels all futures in the collection and awaits completion. @param collection of futures to cancel @param interruptIfRunning true if tasks should be interrupted @param duration maximum time to wait for each future @return list of results from completed futures
1773 Creates a new instance of a class using specified constructor arguments. @param theClass Class type to instantiate @param conf Configuration object @param argTypes Parameter types for the constructor @param values Argument values for the constructor @return New instance of T or throws RuntimeException on error
1774 Returns the class of keys used in the operation. @return Class object representing the key class
1775 Returns the value class. @return Class object representing the value type
1776 Loads a class by name. @param name the fully qualified class name @return SUCCESS if loaded, or an error code if failed
1777 Creates an instance of a class by name. @param name fully qualified class name @return SUCCESS if successful, error code otherwise
1778 Creates and returns a new configuration instance. @return Configuration object initialized with default settings
1779 Loads configuration settings. @return Configuration object; uses suppliedConf if available, otherwise creates a new one
1780 Initializes a new instance of FindClass with default configuration.
1781 Constructs a new ReconfigurableBase with default configuration.
1782 Initializes with provided configuration; uses default if null. @param conf configuration object or null for defaults
1783 Retrieves the canonical path of an executable. @param executable name of the executable file @return canonical path as a string @throws IOException if an I/O error occurs
1784 Executes a shell command with optional timeout and environment settings. @throws IOException if an I/O error occurs during execution
1785 Adds a new phase with a specified status to the progress. @param status the status of the new phase @return the newly added Progress object
1786 Recursively creates directories for a given path. @param path directory path to create
1787 Checks if a file system has a specific capability for a given path. @param fs the file system object @param path the path to check capability for @param capability the capability to check @return true if the capability is available, false otherwise
1788 Checks if an object has a specific capability. @param object the object to check @param capability the capability to verify @return true if the object has the capability, false otherwise
1789 Invokes iostatisticsCountersMethod to get IO statistics counters. @param source the source object for statistics @return a map of IO statistics counters
1790 Retrieves I/O statistics gauges. @param source data source identifier @return map of gauge names to values
1791 Invokes the iostatisticsMinimumsMethod to get minimum I/O statistics. @param source data source for I/O statistics @return Map containing minimum I/O statistics
1792 Invokes iostatisticsMaximumsMethod to get max I/O statistics. @param source data source for statistics @return Map of I/O metrics with maximum values
1793 Invokes method to get IO statistics means. @param source data source for statistics @return map of device names and mean I/O stats
1794 Invokes a static method with variable arguments. @param args arguments to pass to the method @return result of the method invocation
1795 Sets implementation class and arguments. @param className fully qualified class name @param argClasses argument classes for constructor @return Builder instance
1796 Sets implementation class with arguments. @param className name of the implementation class @param argClasses argument classes for the implementation @return Builder instance for method chaining
1797 Loads a static method from a class. @param source the class containing the method @param returnType the expected return type of the method @param name the name of the method @param parameterTypes the parameter types of the method @return DynMethods.UnboundMethod representing the loaded method or null if not found
1798 Checks if the given object is an IO statistics source. @param object the object to check @return true if the object is an IO statistics source, false otherwise
1799 Checks if IO statistics are available for an object. @param object the target object to check @return true if IO statistics are available and applicable, false otherwise
1800 Checks if the given object is an IO statistics snapshot. @param object the object to check @return true if the object is a valid IO statistics snapshot, false otherwise
1801 Checks if IO statistics context is enabled. @return true if IO statistics are available and enabled, false otherwise
1802 Invokes bulk delete operation on a specified file system path. @param fileSystem the FileSystem to perform the operation on @param path the Path where files will be deleted @return number of files deleted or throws IOException if an error occurs
1803 Deletes multiple files in a batch. @param fs FileSystem instance @param base Base directory path @param paths Collection of file paths to delete @return List of Map.Entry containing deleted paths and their statuses @throws IOException if an I/O error occurs
1804 Opens a file in the specified filesystem. @param fs FileSystem instance @param path Path to the file @param policy File access policy @param status Optional FileStatus object @param length Optional file length @param options Optional map of file options @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
1805 Reads data from a stream into a buffer at a specified position. @param in input stream to read from @param position starting position in the stream @param buf buffer to store the read data @throws IOException if an I/O error occurs
1806 Checks if IO statistics are available. @param iostatisticsSnapshotCreateMethod method to create IO stats snapshot
1807 Checks if IO statistics context is available.
1808 Initializes a LightWeightCache with specified parameters. @param recommendedLength suggested initial capacity @param sizeLimit maximum cache size @param creationExpirationPeriod expiration time for entries since creation @param accessExpirationPeriod expiration time for entries since last access
1809 Initializes a Filter with specified parameters. @param vectorSize size of the filter vector @param nbHash number of hash functions to use @param hashType type of hash function
1810 Deletes a key from the hash structure. @param key the key to be deleted
1811 Adds a collection of keys as false positives. @param coll collection of Key objects to mark as false positives @throws NullPointerException if the collection is null
1812 Adds a list of keys as false positives. @param keys List of Key objects to mark as false positives
1813 Adds multiple false positive keys. @param keys array of keys to mark as false positives @throws NullPointerException if keys array is null
1814 Clears the bit at a specified index, removing associated keys and updating lists. @param index position of the bit to clear
1815 Finds index with the minimum ratio value. @param h array of hash indices @return index with the lowest ratio
1816 Executes main program logic. @param argv command-line arguments @throws Throwable if an error occurs during execution
1817 Retrieves a credential entry by name or deprecated keys. @param provider source of credential entries @param name key for the credential entry @return CredentialEntry object or null if not found @throws IOException on I/O errors during retrieval
1818 Adds a deprecation entry for a key. @param key the deprecated key @param newKeys array of replacement keys @param customMessage optional custom deprecation message
1819 Opens listeners for server connections. @throws Exception if an error occurs during listener setup
1820 Validates fencing configuration arguments. @param argStr argument string to validate @throws BadFencingConfigurationException if validation fails
1821 Deletes the parent ZooKeeper node recursively. @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
1822 Fences old active node if not owned by current application. @return Stat object of the fenced node or null if no fencing needed @throws InterruptedException, KeeperException on ZooKeeper operation failure
1823 Reads a specified range from a stream into a ByteBuffer. @param stream the PositionedReadable source of data @param range the FileRange specifying start and length @param allocate function to create ByteBuffer of given size @return CompletableFuture containing the read ByteBuffer @throws EOFException if end of file is reached before reading
1824 Requests caching for buffer data. @param data buffer data to be cached
1825 Sets the prefetch action future. @param actionFuture future representing the prefetch action
1826 Sets the buffer to read-only and updates state to READY. @param expectedCurrentState array of states that must match current state
1827 Returns the size of a block in a file. @param blockNumber index of the block @return size of the specified block in bytes
1828 Calculates relative offset within a block. @param blockNumber block identifier @param offset absolute offset @return relative offset within the specified block
1829 Initializes block data with file size and block size. @param fileSize total size of the file in bytes @param blockSize size of each block in bytes
1830 Returns the block number at the buffer start offset. @throws IllegalStateException if the buffer is invalid
1831 Closes all resources. @throws IOException if an I/O error occurs
1832 Closes all file systems associated with a UserGroupInformation. @param ugi the UserGroupInformation object @throws IOException if an I/O error occurs during closing
1833 Writes a character sequence to a file using UTF-8 encoding. @param fileContext the file context for writing @param path the destination file path @param charseq the character sequence to write @return the updated FileContext object @throws IOException if an I/O error occurs
1834 Writes bytes to a file in the given FileSystem. @param fs FileSystem where the file is written @param path Path of the file to write @param bytes Data to write to the file @return The same FileSystem instance @throws IOException if an I/O error occurs
1835 Writes lines to a file in the specified filesystem. @param fs target FileSystem @param path destination Path @param lines Iterable of CharSequence lines to write @param cs character set for encoding @return the modified FileSystem instance @throws IOException if an I/O error occurs
1836 Writes CharSequence to a file in the given FileSystem. @param fs FileSystem instance @param path Path where the file is written @param charseq CharSequence to write @param cs Charset for encoding @return updated FileSystem instance @throws IOException if an I/O error occurs
1837 Constructs a BlockLocation with specified parameters. @param names array of block storage names @param hosts array of block hostnames @param topologyPaths array of network paths for the block locations (null in this constructor) @param offset starting byte offset of the block @param length total length of the block in bytes @param corrupt indicates if the block is corrupted
1838 Creates a new counter with specified name, description, and initial value. @param name the name of the counter @param desc the description of the counter @param iVal the initial value of the counter @return MutableCounterInt instance
1839 Creates a new mutable counter with initial value. @param name counter's name @param desc counter's description @param iVal initial value of the counter @return MutableCounterLong instance
1840 Creates a new mutable gauge with initial value. @param name gauge name @param desc description of the gauge @param iVal initial value for the gauge @return MutableGaugeLong instance
1841 Creates a new mutable gauge with initial value. @param name gauge name @param desc description of the gauge @param iVal initial value for the gauge @return MutableGaugeFloat instance
1842 Creates a new integer gauge. @param name gauge name @param desc gauge description @param iVal initial value @return MutableGaugeInt instance
1843 Creates a copy of this MeanStatistic instance. @return A new MeanStatistic object with the same state as this instance
1844 Logs I/O statistics at debug level. @param log Logger instance for logging @param message Debug message to accompany the stats @param source Object containing I/O statistics
1845 Overrides toString to include IO statistics. @return String representation including IO stats if applicable
1846 Converts IO statistics to a pretty string. @param statistics the IO statistics object or null @return formatted string representation of IO statistics or empty string if null
1847 Measures duration of invocation and tracks statistics. @param factory DurationTrackerFactory to create tracker @param statistic name of the statistic to track @param input InvocationRaisingIOE to execute @return Duration of execution @throws IOException if input execution fails
1848 Tracks and measures the duration of a supplier task. @param factory optional DurationTrackerFactory for creating trackers @param statistic name of the statistic to track @param input supplier function to execute and measure @return result of the supplier function
1849 Adds entry to linked list and evicts oldest if size exceeds limit. @param entry the new entry to add
1850 Initializes statistics store with various metrics. @param counters List of counter keys @param gauges List of gauge keys @param minimums List of minimum keys @param maximums List of maximum keys @param meanStatistics List of mean statistic keys
1851 Reads bytes from the input stream into a buffer. @param b destination buffer @param off offset in buffer to start reading @param len maximum number of bytes to read @return number of bytes actually read, or -1 if end of stream @throws IOException if an I/O error occurs
1852 Decrypts data from buffer at given position. @param position starting position in the data stream @param buffer byte array containing data to decrypt @param offset offset within buffer to start decryption @param length number of bytes to decrypt
1853 Decrypts data from a ByteBuffer at a specified position. @param filePosition starting position in the file @param buf buffer containing encrypted data @param length number of bytes to decrypt @param start offset within the buffer to begin decryption @throws IOException if an I/O error occurs
1854 Decrypts data from a ByteBuffer. @param buf buffer containing encrypted data @param length number of bytes to decrypt @param start starting position for decryption @throws IOException if an I/O error occurs
1855 Moves the read position to a specified offset. @param pos target position in the stream @throws IOException if an I/O error occurs or position is negative
1856 Skips over n bytes of data in the input stream. @param n number of bytes to skip @return actual number of bytes skipped @throws IOException if an I/O error occurs
1857 Initializes a new GlobFilter with a specified file pattern. @param filePattern the pattern to match files against @throws IOException if an I/O error occurs during initialization
1858 Initializes a new GlobFilter with a file pattern and path filter. @param filePattern the glob pattern for matching files @param filter additional path filter to apply @throws IOException if an I/O error occurs during initialization
1859 Extracts a tar file from an input stream into a directory. @param inputStream the input stream of the tar file @param untarDir the destination directory for extraction @param gzipped true if the tar file is gzip compressed @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted @throws ExecutionException if the execution fails
1860 Retrieves statistics for all filesystems. @return Map of URIs to their corresponding Statistics objects
1861 Clears all statistics from the file system.
1862 Encodes input chunks into output chunks. @param inputs array of ECChunk objects to be encoded @param outputs array where encoded ECChunk objects will be stored @throws IOException if an I/O error occurs during encoding
1863 Creates a new BlockingThreadPoolExecutorService. @param activeTasks maximum number of concurrent threads @param waitingTasks buffer size for queued tasks @param keepAliveTime time to wait before terminating idle threads @param unit time unit for keepAliveTime @param prefixName thread name prefix @return BlockingThreadPoolExecutorService instance
1864 Sets data buffer and offsets. @param bufferData the data buffer to use @param startOffset the starting offset in the buffer @param readOffset the initial read offset
1865 Retrieves the current IO statistics context. @return IO statistics context object or null if not available
1866 Resets the current IO statistics context.
1867 Takes a snapshot of the current I/O statistics context. @return A Serializable object representing the snapshot
1868 Aggregates IO statistics from a given source. @param source the source object to retrieve statistics from @return true if aggregation was successful, false otherwise
1869 Executes tasks in parallel, handling failures and reverts. @param task the task to execute for each item @return true if all tasks succeed, false otherwise @throws E if a task throws an exception @throws IOException if there's an issue with the iterator
1870 Sets thread IO statistics context. @param statisticsContext IOStatisticsContext object or null
1871 Sets thread-specific I/O statistics context. @param ioStatisticsContext I/O stats context to be set
1872 Resets thread-specific I/O statistics context.
1873 Logs and displays an error message. @param e the exception to handle
1874 Retrieves a PathHandle for a given FileStatus with optional options. @param stat the FileStatus object representing the file @param opt array of HandleOpt options (optional) @return PathHandle instance
1875 Adds or updates a token for a given alias. @param alias unique identifier for the token @param t Token object to add or update
1876 Encrypts data from input buffer to output buffer. @param inBuffer source ByteBuffer containing data to encrypt @param outBuffer destination ByteBuffer for encrypted data @throws IOException if an I/O error occurs during encryption
1877 Decrypts data from input buffer to output buffer. @param inBuffer buffer containing encrypted data @param outBuffer buffer for decrypted data @throws IOException if an I/O error occurs during decryption
1878 Initializes the component with source and destination paths. @throws IOException if there's an issue with regex compilation or initialization
1879 Constructs a Path by resolving a child path against a parent path. @param parent the parent Path @param child the child Path to resolve
1880 Constructs a Path from a given string. @param pathString the input path string @throws IllegalArgumentException if the path is invalid
1881 Constructs a Path object with the specified components. @param scheme URI scheme component @param authority URI authority component @param path URI path component
1882 Converts URI to string representation. @param uri URI object to convert @param inferredSchemeFromPath scheme inferred from path @return string representation of the URI
1883 Retrieves the URI path of a given file path. @param p the file path @return the URI path as a string @throws InvalidPathException if the path is invalid
1884 Resolves and returns the file path. @param p input path to resolve @return resolved Path object @throws FileNotFoundException if file does not exist @throws UnresolvedLinkException if a link cannot be resolved @throws AccessControlException if access is denied @throws IOException for other I/O errors
1885 Creates a file with specified options. @param f path to the file @param createFlag flags for file creation @param opts array of options for file creation @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
1886 Applies a UMask to a file permission. @param mode original file permission @param umask user mask to apply @return updated file permission with UMask applied
1887 Creates parent directories as needed. @param f path to create @return true if successful, false otherwise @throws IOException if an I/O error occurs
1888 Sets file system permissions. @param permission new permission settings or null to use default
1889 Creates a non-recursive file output stream. @param f path to the file @param overwrite flag to overwrite existing file @param bufferSize size of the buffer @param replication number of replicas @param blockSize block size for the file @param progress progressable object for tracking progress @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
1890 Creates an immutable file system permission. @param permission short representing the permission bits @return ImmutableFsPermission object with specified permissions
1891 Appends a key-value pair to the output stream. @param key the key object @param val the value object @throws IOException if key or value classes are incorrect or serialization fails
1892 Retrieves the compressed size of data. @return size in bytes @throws IOException if an I/O error occurs
1893 Skips bytes in the input stream. @param n number of bytes to skip @return actual number of bytes skipped @throws IOException if an I/O error occurs
1894 Returns the disk space used by the specified file or directory. @param path the file or directory path @return the number of bytes used @throws IOException if an I/O error occurs
1895 Retrieves the used space at the specified path. @param path file system path to check @return number of bytes used @throws IOException if an I/O error occurs
1896 Initializes and starts JVM pause monitoring. Continuously adds strings to a list in an infinite loop.
1897 Starts the service if not already in STARTED state. Initializes startTime and calls serviceStart(). Notifies listeners on successful start.
1898 Transitions to a new state. @param newState the target state to enter @return the previous state before transition
1899 Prints the default Kerberos realm. Handles exceptions related to Kerberos configuration.
1900 Checks equality with another object. @param right_obj object to compare @return true if equal, false otherwise
1901 Checks equality with another object. @param o object to compare @return true if objects are equal, false otherwise
1902 Sets data from BytesWritable. @param newData source of bytes to be set
1903 Decodes input buffers, updating output buffers. @param inputs array of ByteBuffer containing encoded data @param erasedIndexes indices of erased blocks @param outputs array to store decoded data @throws IOException if an I/O error occurs during decoding
1904 Decodes byte arrays using provided inputs and erased indexes. @param inputs array of input byte arrays @param erasedIndexes indexes of erased segments in inputs @param outputs decoded output byte arrays @throws IOException if decoding fails
1905 Skips to the next block marker in the stream. @return true if successful, false otherwise @throws IOException if an I/O error occurs
1906 Constructs a new CBZip2OutputStream with default block size. @param out underlying output stream @throws IOException if an I/O error occurs
1907 Constructs a BlockDecompressorStream. @param in input stream to read compressed data from @param decompressor decompressor used to decompress the data @throws IOException if an I/O error occurs
1908 Creates a compression output stream using codec pool. @param out underlying output stream @return CompressionOutputStream for writing compressed data
1909 Creates a compression output stream. @param out underlying output stream @return CompressionOutputStream for writing compressed data @throws IOException if an I/O error occurs
1910 Creates a compression output stream using codec pool. @param out underlying output stream @return CompressionOutputStream for writing compressed data
1911 Creates a compression output stream using codec pool. @param out underlying output stream @return CompressionOutputStream for writing compressed data @throws IOException if an I/O error occurs
1912 Closes both data and index resources. Throws IOException on failure.
1913 Closes the output stream and returns the compressor. @throws IOException if an I/O error occurs during flushing
1914 Creates a compression input stream using codec pool. @param in input stream to compress @return CompressionInputStream for the given input stream @throws IOException if an I/O error occurs
1915 Creates a compression input stream using codec pool. @param in original input stream to compress @return CompressionInputStream for reading compressed data @throws IOException if an I/O error occurs
1916 Creates an input stream for decompression. @param in original input stream to be wrapped @return CompressionInputStream for reading compressed data @throws IOException if an I/O error occurs
1917 Creates a compression input stream using codec pool. @param in input stream to compress @return CompressionInputStream for reading compressed data @throws IOException if an I/O error occurs
1918 Closes resources, ensuring proper cleanup. @throws IOException if an I/O error occurs during closure
1919 Closes the input stream and sets it to null. @throws IOException if an I/O error occurs while closing the stream
1920 Creates a direct decompressor using zlib. @return DirectDecompressor instance configured with zlib
1921 Writes file header with version, class names, compression flags, and metadata. Throws IOException if writing fails.
1922 Writes token and secret key maps to DataOutput. @param out the DataOutput stream to write to @throws IOException if an I/O error occurs
1923 Reads a block of data from the input stream. Handles lazy decompression and sync checking.
1924 Seeks to the current value in the buffer. @throws IOException if an I/O error occurs
1925 Reads a string from DataInput with no length limit. @param in input stream to read from @return the read string @throws IOException if an I/O error occurs
1926 Retrieves a delegation key by ID. @param keyId unique key identifier @return DelegationKey object or null if not found
1927 Selects a delegation token for the given URL. @param url target URL @param creds credentials containing tokens @return selected delegation token or null if not found
1928 Retrieves server token for specified authentication type. @param authType the SASL authentication type @return Token object or null if not supported @throws IOException if instantiation fails
1929 Sets the token service based on address. @param token the token object to update @param addr the InetSocketAddress for the service
1930 Converts protobuf to a token. @param tokenProto protobuf representation of the token @return Token object created from protobuf
1931 Retrieves a fixed ByteString from cache or creates it. @param key the text key to look up or create a ByteString for @return cached ByteString or newly created one if not found
1932 Constructs a new Token by cloning another Token. @param other the Token to clone from
1933 Reads a line of text up to a specified maximum length. @param str Text object to store the read line @param maxLineLength maximum number of characters to read @return number of characters read, or -1 if end of stream is reached @throws IOException if an I/O error occurs
1934 Reads a line of text into the provided Text object. @param str Text object to store the read line @return Number of characters read or -1 if end of stream is reached @throws IOException if an I/O error occurs
1935 Initializes an instrumented lock with a name and logger. @param name unique identifier for the lock @param logger used for logging lock events @param minLoggingGapMs minimum time gap between log entries @param lockWarningThresholdMs threshold for warning on long lock hold times
1936 Creates a proxy with retry functionality. @param iface interface class for the proxy @param implementation object implementing the interface @param retryPolicy policy defining retry behavior @return Object representing the retry proxy
1937 Processes wait time and retry information. @return CallReturn enum indicating retry status @throws InterruptedIOException if interrupted during sleep
1938 Initializes a Writer for TFile operations. @param fsdos file output stream for data writing @param minBlockSize minimum block size for data storage @param compressName compression algorithm name @param comparator key comparator for ordering @param conf configuration settings @throws IOException if an I/O error occurs during initialization
1939 Checks if the current chunk is the last one. @return true if it's the last chunk, false otherwise @throws IOException if an I/O error occurs
1940 Returns remaining data length. @throws IOException if an I/O error occurs
1941 Compares this byte array to another. @param buf the byte array to compare @param offset starting index in buf @param length number of bytes to compare @return comparison result as an integer
1942 Closes the stream, syncing data if necessary. @throws IOException if an I/O error occurs
1943 Appends a key-value pair to the buffer. @param key the key object @param val the value object @throws IOException if key or value class mismatch, or negative length keys
1944 Appends raw key-value data to buffers. @param keyData byte array containing the key data @param keyOffset offset within keyData where key starts @param keyLength length of the key in bytes @param val ValueBytes object containing the value data @throws IOException if key length is negative or I/O error occurs
1945 Clones data from source to destination writable objects. @param dst destination Writable object @param src source Writable object @throws IOException if an I/O error occurs
1946 Chooses a random node within a given scope, excluding specified nodes. @param scope the scope to search for nodes @param excludedNodes collection of nodes to exclude from selection @return randomly chosen Node or null if none available
1947 Sorts nodes by distance from a reader. @param reader reference node for sorting @param nodes array of nodes to sort @param activeLen number of active nodes in the array
1948 Sorts nodes by distance using network location for non-datanodes. @param reader the reading node @param nodes array of nodes to sort @param activeLen number of active nodes
1949 Constructs a SocketInputStream with a specified timeout. @param socket the associated socket @param timeout read timeout in milliseconds @throws IOException if an I/O error occurs
1950 Constructs a SocketInputStream. @param socket the underlying socket @throws IOException if an I/O error occurs
1951 Constructs a SocketOutputStream with a specified timeout. @param socket the underlying socket @param timeout connection timeout in milliseconds @throws IOException if an I/O error occurs
1952 Adds a node to the cluster map. @param node Node to be added @throws IllegalArgumentException if node is null or an inner node
1953 Performs I/O operations on a ByteBuffer. @param buf ByteBuffer containing data to read/write @param ops Operation set (e.g., OP_READ, OP_WRITE) @return Number of bytes processed or -1 if closed @throws IOException if an I/O error occurs
1954 Connects a socket channel to an endpoint with a timeout. @param channel the socket channel to connect @param endpoint the address to connect to @param timeout connection timeout in milliseconds @throws IOException if connection fails or times out
1955 Waits for I/O operations on a channel. @param ops bitwise OR of selected interests (e.g., SelectionKey.OP_READ) @throws IOException if an I/O error occurs or timeout expires
1956 Retrieves default host address. @param strInterface network interface name (nullable) @return default host IP address as a string @throws UnknownHostException if host cannot be determined
1957 Retrieves default host address. @param strInterface network interface name @param nameserver DNS server to query @return default host IP address as a string @throws UnknownHostException if host cannot be determined
1958 Reattaches metrics for monitoring.
1959 Constructs a MutableInverseQuantiles instance. @param name metric name @param description metric description @param sampleName sample name @param valueName value name @param intervalSecs interval in seconds
1960 Creates and registers a new mutable quantiles metric. @param name unique metric identifier @param desc description of the metric @param sampleName name for samples in the metric @param valueName name for values in the metric @param interval time interval for quantile calculation @return MutableQuantiles object representing the new metric
1961 Creates a new MutableStat with specified parameters. @param name statistic name @param desc description of the statistic @param sampleName name for samples @param valueName name for values @return a new MutableStat instance
1962 Tags metrics with a specified name and value. @param name metric name @param description brief description of the metric @param value tag value to apply @return MetricsRegistry instance for chaining
1963 Adds a metric with a given name and value. @param name the name of the metric @param value the value of the metric
1964 Records queue time for a given priority level. @param priority the priority level of the queue @param queueTime the time taken in the queue
1965 Adds processing time for a given priority level. @param priority task priority level @param processingTime time taken to process the task
1966 Records overall processing time for an RPC call. @param rpcCallName name of the RPC call @param overallProcessingTime time taken in milliseconds
1967 Validates Kerberos configuration file location. Checks system properties and environment variables for path, prioritizes environment variable if both are set.
1968 Verifies a condition and reports failure/error if not met. @param condition the condition to check @param category the error category @param message the error message format @param args arguments for the message format @return true if condition is met, false otherwise @throws KerberosDiagsFailure on failure if nofail is false
1969 Throws an exception if a condition is true. @param condition the condition to check @param category error category @param message error message template @param args arguments for the message template @throws KerberosDiagsFailure if condition is true
1970 Creates a UserGroupInformation object for a remote user. @param user username of the remote user @return UserGroupInformation object configured with SIMPLE authentication
1971 Verifies token against stored password. @param identifier unique token identifier @param password token password to verify @throws InvalidToken if password does not match stored password
1972 Spawns a thread to automatically renew keytab. Checks if relogin is needed and Kerberos credentials are available.
1973 Constructs a Count object with specified command arguments and configuration. @param cmd array of command-line arguments @param pos starting position in the command array @param conf Configuration object
1974 Establishes a connection to ZooKeeper with authentication. @return connected ZooKeeper instance @throws IOException if connection fails @throws KeeperException if ZooKeeper operation fails
1975 Retrieves the next element associated with the specified key. @param keyName the key to look up @return the next element of type E @throws IOException if an I/O error occurs @throws ExecutionException if execution fails
1976 Resolves hostname to InetAddress with optional logging. @param hostname the hostname to resolve @return the resolved InetAddress @throws UnknownHostException if resolution fails
1977 Retrieves protocol signature for a given versioned protocol. @param server the VersionedProtocol instance @param protocol the protocol class name @param clientVersion the client's version @param clientMethodsHash hash of client methods @return ProtocolSignature object @throws IOException if an I/O error occurs or protocol class not found
1978 Checks if a method is supported by the protocol. @param methodName name of the method to check @param parameterTypes parameter types of the method @return true if method is supported, false otherwise @throws IOException if an I/O error occurs during the check
1979 Validates RPC request headers for required fields and operations. @param header RPC request header to validate @throws RpcServerException if validation fails
1980 Retrieves a message from the buffer. @param <T> type of Message extending Message @param message the original message to decode @param buffer the buffer containing serialized data @return deserialized message object @throws RpcServerException if decoding fails
1981 Removes and returns the next element, if available. @return the removed element or null if not available
1982 Sets up a response for incompatible client versions. @param clientVersion version of the client attempting communication
1983 Calculates total virtual memory size. @return sum of physical memory and swap space in bytes
1984 Constructs a HarFSDataInputStream. @param fs FileSystem instance @param p Path to the file @param start Starting position in the file @param length Length of data to read @param bufsize Buffer size for input operations @throws IOException if an I/O error occurs
1985 Removes expired entries from the cache up to a limit.
1986 Removes entries until the cache size is within the limit.
1987 Generates string representation with specified options. @param qOption enables option Q @param hOption enables option H @param xOption enables option X @return formatted string based on options
1988 Generates a string representation with specified options. @param qOption query option flag @param hOption header option flag @param tOption type option flag @param types list of storage types @return formatted string
1989 Generates quota usage string. @param hOption human-readable format flag @param tOption include storage type details flag @param types list of storage types to consider @return formatted quota usage string
1990 Waits for all futures to complete. @param futures list of CompletableFutures to wait on @throws IOException if an I/O error occurs
1991 Waits for the completion of a given CompletableFuture, if not null. @param future the CompletableFuture to wait on, may be null
1992 Updates CRC from byte array. @param crcBuffer source byte array containing CRC values @param offset starting position in the array @param length number of bytes to process @param bytesPerCrc bytes processed per CRC update @throws IOException if length is not a multiple of CRC size
1993 Updates CRC with specified number of checksums. @param checksumIn input stream for reading checksums @param numChecksumsToRead number of checksums to read @param bytesPerCrc bytes per CRC value @throws IOException if an I/O error occurs
1994 Creates a new instance of a class with configuration. @param theClass class to instantiate @param conf configuration settings @return new instance of T or null if creation fails
1995 Returns the key class of the data. @return Class representing the key type
1996 Returns the class type of the value. @return Class object representing the value's type
1997 Executes command based on action and name. @param args command arguments array @return result code indicating success or error
1998 Initializes a new FutureDataInputStreamBuilderImpl with given file context and path. @param fc non-null FileContext object @param path non-null Path to the file @throws IOException if an I/O error occurs
1999 Creates a DataChecksum object from a byte array. @param bytes source byte array @param offset starting index in the byte array @return DataChecksum object or throws exception if invalid
2000 Creates a new DataChecksum from input stream. @param in DataInputStream to read checksum data @return DataChecksum object or throws exception if creation fails
2001 Executes a command with interval checks. @throws IOException if an I/O error occurs during execution
2002 Aggregates I/O statistics to a snapshot. @param snapshot target snapshot object @param statistics I/O statistics to aggregate (nullable) @return true if aggregation is successful @throws UnsupportedOperationException if operation is not supported
2003 Creates an I/O statistics snapshot. @return Serializable object representing the snapshot @throws UnsupportedOperationException if not supported
2004 Creates an I/O statistics snapshot. @param source optional source object for the snapshot @return Serializable snapshot object @throws UnsupportedOperationException if not supported @throws ClassCastException if source type is incorrect
2005 Converts an IO statistics snapshot to a JSON string. @param snapshot the IO statistics snapshot to convert @return JSON string representation of the snapshot @throws UncheckedIOException if an I/O error occurs @throws UnsupportedOperationException if method is not available
2006 Parses JSON string to create a statistics snapshot. @param json JSON data as string @return Serializable object representing the snapshot @throws UncheckedIOException if IO operations fail @throws UnsupportedOperationException if not available
2007 Loads I/O statistics snapshot for a file system path. @param fs the FileSystem object @param path the Path to load statistics for @return Serializable I/O statistics snapshot @throws UncheckedIOException if an IO error occurs @throws UnsupportedOperationException if not supported
2008 Retrieves I/O statistics snapshot. @param source data source for statistics retrieval @return Serializable object containing I/O stats or null if not available @throws UnsupportedOperationException if I/O statistics are unavailable
2009 Saves I/O statistics snapshot to specified file system path. @param snapshot the I/O statistics snapshot to save (nullable) @param fs the file system where the snapshot will be saved @param path the path in the file system where the snapshot is stored @param overwrite flag indicating if existing data should be overwritten @throws UncheckedIOException if an I/O error occurs @throws UnsupportedOperationException if I/O statistics are not supported
2010 Converts IO statistics to a pretty string. @param statistics object containing IO statistics @return formatted string representation of the statistics
2011 Retrieves current I/O statistics context. @return Current I/O statistics context object @throws UnsupportedOperationException if method is not available
2012 Sets thread IO statistics context. @param statisticsContext the context to set, nullable @throws UnsupportedOperationException if not available
2013 Resets IO statistics context. @throws UnsupportedOperationException if operation is not supported
2014 Takes a snapshot of I/O statistics context. @throws UnsupportedOperationException if not supported @return Serializable snapshot of I/O statistics
2015 Aggregates I/O statistics context. @param source data source for aggregation @return true if successful, false otherwise
2016 Compares two version strings. @param version1 first version string @param version2 second version string @return negative if version1 is less, positive if greater, zero if equal
2017 Initializes a Counting Bloom Filter. @param vectorSize size of the bit vector @param nbHash number of hash functions @param hashType type of hash function to use
2018 Initializes a Bloom filter with specified parameters. @param vectorSize size of the bit array @param nbHash number of hash functions @param hashType type of hash function to use
2019 Checks if a key is likely present in the Bloom filter. @param key the key to check @return true if key is probably present, false otherwise
2020 Removes a bit based on the specified scheme. @param k key to identify the bit for removal @param scheme strategy for selecting which bit to remove
2021 Adds deprecation warning for a key. @param key deprecated key @param newKey replacement key @param customMessage custom deprecation message
2022 Adds deprecation mapping. @param key old key to be deprecated @param newKeys array of new keys replacing the old one
2023 Adds deprecation mapping for a key. @param key deprecated key to be replaced @param newKey replacement key
2024 Starts the HTTP server and related services. @throws IOException if there is an error during startup
2025 Writes a breadcrumb znode to indicate the local node's activity. @param oldBreadcrumbStat existing znode stats or null if none @throws KeeperException on ZooKeeper operation failure @throws InterruptedException if interrupted during operation
2026 Deletes the active node's breadcrumb if data matches. @throws IllegalStateException if active node has unexpected data
2027 Reads data from a stream into specified file ranges. @param stream source of positioned readable data @param ranges list of file ranges to read @param allocate function to allocate ByteBuffer for reading
2028 Cancels all ongoing prefetch operations and caches prefetched data.
2029 Retrieves data from a specified block. @param blockNumber the index of the block to retrieve @return BufferData containing block number and its data @throws IOException if an I/O error occurs during reading
2030 Initializes file position with size and block details. @param fileSize total size of the file @param blockSize size of each block
2031 Checks if the current block is the last block. @return true if it's the last block, false otherwise
2032 Closes all resources in the cache. @throws IOException if an I/O error occurs during closing
2033 Writes a character sequence to a file in UTF-8 encoding. @param fs the FileSystem instance @param path the target Path for writing @param charseq the CharSequence to write @return the FileSystem instance
2034 Constructs a BlockLocation with specified details. @param names array of block storage names @param hosts array of block hostnames @param offset starting byte offset in the file @param length total bytes in the block @param corrupt indicates if the block is corrupted
2035 Constructs a BlockLocation with specified parameters. @param names array of block replica hostnames @param hosts array of block replica host addresses @param topologyPaths network topology paths for replicas @param offset starting byte offset in the file @param length total bytes in the block
2036 Aggregates two mean statistics. @param l first MeanStatistic object @param r second MeanStatistic object @return new MeanStatistic representing the aggregated result
2037 Takes a snapshot of statistics from the source. @param source IOStatistics object to snapshot data from
2038 Logs I/O statistics at debug level. @param message description of the I/O operation @param source object initiating the I/O operation
2039 Logs IO statistics at specified level. @param log Logger instance @param level logging level (info, error, warn) @param source object to retrieve stats from
2040 Logs and closes a RemoteIterator if it's closeable. @param source the RemoteIterator to clean up
2041 Tracks duration of an invocation. @param factory factory for creating duration trackers @param statistic name of the statistic to track @param input invocation raising IO exceptions @throws IOException if an I/O error occurs during invocation
2042 Reads bytes from a specific position in the stream. @param position starting position for reading @param buffer destination byte array @param offset offset within the buffer to start writing @param length number of bytes to read @return number of bytes actually read, or -1 if end of file is reached @throws IOException if an I/O error occurs
2043 Reads a specified number of bytes from a given position into a buffer. @param position starting position in the stream @param buffer destination byte array @param offset start offset in the buffer @param length number of bytes to read @throws IOException if an I/O error occurs
2044 Reads bytes from a specified position into a buffer. @param position starting position in the stream @param buf destination byte buffer @return number of bytes read or -1 if end of stream @throws IOException if an I/O error occurs
2045 Reads bytes from a specified position into a ByteBuffer. @param position starting position in the stream @param buf destination buffer for read data @throws IOException if an I/O error occurs
2046 Reads data from the input source into a ByteBuffer. @param buf destination buffer for reading data @return number of bytes read or -1 if end of stream is reached @throws IOException if an I/O error occurs
2047 Writes an object to a DataOutput stream. @param out the output stream @param instance the object to write @param declaredClass the class of the object @param conf configuration settings @param allowCompactArrays flag for compact array handling @throws IOException if writing fails
2048 Attempts to acquire buffer data by block number. @param blockNumber identifier of the buffer block @return acquired BufferData or null if not available
2049 Returns the number of available buffers in the pool. @return Count of available buffers
2050 Executes a task with items using available service or single-threaded approach. @param task the task to execute @return true if successful, false otherwise @throws E if an exception occurs during task execution @throws IOException if an I/O error occurs
2051 Processes multiple path data items. @param parent parent PathData object @param items variable number of PathData objects to process
2052 Resolves file status to path handle. @param fs filesystem instance @param opt optional handling options @return function mapping FileStatus to PathHandle
2053 Creates an executor for fetching groups of a user. @param userName name of the user @return ShellCommandExecutor to execute group command
2054 Creates executor to fetch group ID for a user. @param userName the username @return ShellCommandExecutor configured for group ID retrieval
2055 Reads and processes credentials from a DataInput stream. @param in input stream containing serialized credentials
2056 Collects delegation tokens from an issuer and its children. @param issuer the token issuer @param renewer the token renewer @param credentials the credentials to store tokens @param tokens list to collect tokens @throws IOException if an I/O error occurs
2057 Adds a token to the credentials. @param alias text alias for the token @param token token to be added @return always returns true
2058 Converts a relative path to an absolute path. @param workDir working directory used for conversion @param path the path to convert @return absolute path
2059 Converts a relative path to an absolute path. @param workDir working directory as base path @param path the path to convert @return absolute Path object
2060 Converts a Path to a File. @param path the input file path @return the corresponding File object
2061 Fixes relative path by prepending working directory. @param p original path @return absolute path
2062 Qualifies a given path using default URI and working directory. @param defaultUri default URI to use if path is relative @param workingDir working directory for qualifying the path @return fully qualified Path object
2063 Returns the working directory as a Path. @return Path object representing the working directory
2064 Returns the home directory path. @return Path object representing the home directory
2065 Gets the home directory of the SFTP session. @param channel SFTP channel to query @return Path object representing the home directory, or null on error
2066 Retrieves file status from the filesystem. @param fs FileSystem instance to query @param pathString path of the file or directory @param ignoreFNF flag to ignore FileNotFound exception @return FileStatus object or null if not found and ignoreFNF is true @throws IOException if an I/O error occurs
2067 Returns a Path object for the specified path. @param path string representation of the file path @return Path object representing the given path
2068 Returns the target path. @return Path object or null if not set
2069 Retrieves used space in the root directory. @return Used space in bytes @throws IOException if an I/O error occurs
2070 Initializes a ChRootedFileSystem with a given FileSystem and URI. @param fs the underlying FileSystem to be chrooted @param uri the URI specifying the root path for the chroot environment @throws IOException if an I/O error occurs during initialization
2071 Constructs the remaining path from a given array of path segments. @param path array of path segments @param startIndex index to start constructing the remaining path @return constructed Path object or SlashPath if startIndex exceeds array length
2072 Constructs a target link path from a list of directory links. @return Path object representing the merged target link
2073 Constructs a path by combining a parent and a child. @param parent the parent directory or path @param child the child component of the path
2074 Constructs a path with a parent and a child. @param parent parent directory path @param child child file or directory name
2075 Constructs a path by combining a parent and a child path. @param parent parent directory as String @param child child path relative to parent
2076 Renames a directory in the given filesystem. @param fs FileSystem object @param oldName current directory name @param newName new directory name @throws IOException if rename fails
2077 Converts a File to a Path. @param f the File object @return Path representation of the file
2078 Extracts and returns the path from a nested URI. @param nestedUri the URI containing nested components @return Path object representing the unnested path
2079 Converts array of strings to paths. @param str array of string paths @return array of Path objects or null if input is null
2080 Removes scheme and authority from a URI path. @param path original URI path @return Path without scheme and authority
2081 Merges two paths safely. @param path1 base path @param path2 path to append @return merged Path object
2082 Checks if the path exists and meets directory requirements. @param typeRequirement specifies the expected file type (directory or not) @throws PathIOException if path does not exist or does not meet requirements
2083 Constructs a string representation for a child path. @param childPath the child path to process @return constructed string with appropriate separators
2084 Throws an exception for non-existent path. @param item PathData object representing the path @throws IOException if path does not exist
2085 Retrieves the file system for a given path. @param absOrFqPath absolute or fully qualified path @return AbstractFileSystem instance @throws UnsupportedFileSystemException if file system is unsupported @throws IOException if an I/O error occurs
2086 Creates a directory with specified permissions. @param fs FileSystem instance @param dir Path of the directory to create @param permission FsPermission for the directory @return true if created or already exists, false otherwise
2087 Constructs a LocatedFileStatus object with detailed file attributes. @param length file size in bytes @param isdir indicates if the path is a directory @param block_replication number of block replicas @param blocksize default block size for the file @param modification_time last modification time in milliseconds since epoch @param access_time last access time in milliseconds since epoch @param permission file permissions @param owner user who owns the file @param group group associated with the file @param symlink path to the target of the symbolic link, if any @param path full path to the file or directory @param attr set of attribute flags for the file @param locations array of block locations
2088 Appends key-value pair to output. @param key key object @param val value object @throws IOException if an I/O error occurs
2089 Writes key-value pairs to a file. @param records iterator for raw key-value data @param writer object to write data to
2090 Initializes the service with a configuration. @param conf Configuration object for the service @throws ServiceStateException if initialization fails or config is null
2091 Stops the service if not already stopped. Handles exceptions and notifies listeners on termination.
2092 Checks if this service is a private clone of another. @param thePublicService the service to compare against @return true if they are equal, false otherwise
2093 Checks if token's service matches the given alias. @param token the token to check @param alias the text alias to compare against @return true if alias is null or matches token's service, false otherwise
2094 Matches service based on name and URL. @param fetcher DtFetcher instance to retrieve service name @param service Text representing the service name to match @param url String URL to check against service name @return true if service matches, false otherwise
2095 Checks directory existence and permissions. Throws DiskErrorException if issues are found. @param dir the directory to check
2096 Checks directory and performs disk I/O. @param dir directory to check and operate on @throws DiskErrorException if an error occurs during disk operation
2097 Flushes the output buffer without closing it. @throws IOException if an I/O error occurs
2098 Validates decoding by comparing decoded output with original input. @param inputs array of ByteBuffer inputs @param erasedIndexes indexes of erased inputs @param outputs array of ByteBuffer outputs @throws IOException if an I/O error occurs during validation
2099 Decodes input chunks using specified erased indexes. @param inputs array of ECChunk objects to decode @param erasedIndexes indices of erased chunks @param outputs decoded output chunks @throws IOException if an I/O error occurs during decoding
2100 Closes the writer, finalizes block state, and marks as closed. @throws IOException if an I/O error occurs
2101 Cleans up resources and deletes segment file if not preserving input. @throws IOException if an I/O error occurs during cleanup
2102 Closes the resource, finalizing block state and marking as closed. @throws IOException if an I/O error occurs during closure
2103 Reads fields from input for token and secret key maps. @param in DataInput source to read from @throws IOException if reading fails
2104 Reads the next raw key from input. @param key buffer to store the read key @return length of the key or -1 if no more keys are available @throws IOException on I/O errors
2105 Reads the current value into a Writable object. @param val Writable object to store the read value @throws IOException if an I/O error occurs
2106 Retrieves and deserializes the current value from a stream. @param val object to configure with configuration settings @return deserialized value or throws IOException if issues occur
2107 Reads the next key-value pair from a data source. @param key buffer to store the read key @param val object to store the read value @return length of the record or -1 if no more records @throws IOException on I/O errors
2108 Reads the next raw value from input stream. @param val object to store the read value @return length of the read value @throws IOException if an I/O error occurs
2109 Retrieves token information from SQL by sequence number and identifier. @param ident token identifier @return DelegationTokenInformation object or throws exception if not found
2110 Reads PermissionStatus from DataInput. @param in source of data to read @return PermissionStatus object populated with read data @throws IOException if an I/O error occurs
2111 Reads an enum value from DataInput. @param in source of input data @param enumType class of the enum type @return enum value or null if not found
2112 Reads ACL data from input stream. @param in DataInput stream to read from @throws IOException if reading fails
2113 Converts Text to fixed-length ByteString. @param key input Text object @return ByteString representation of the key
2114 Converts a Token to a TokenProto. @param tok the token to convert @return a new TokenProto instance
2115 Constructs a new DelegationTokenIdentifier. @param kind type of delegation token @param owner user who owns the token @param renewer user allowed to renew the token @param realUser real user on behalf of whom the token is issued
2116 Invokes a method once, handling retries and exceptions. @return CallReturn object containing result or exception
2117 Reads key length and initializes buffers for key-value pair. Throws EOFException if no more data to read.
2118 Reads bytes from input stream into BytesWritable. @param value BytesWritable object to store the read data @return Length of the read bytes @throws IOException if an I/O error occurs
2119 Writes value to output stream. @param out OutputStream to write to @return number of bytes written @throws IOException if I/O error occurs
2120 Compares this byte array to another. @param buf the other byte array to compare against @return negative if less, zero if equal, positive if greater
2121 Checks equality with another Entry object. @param other the object to compare with @return true if equal, false otherwise
2122 Retrieves a delegation token from the specified URL. @param url the endpoint to request the token from @param token current authentication token @param renewer user allowed to renew the token @param doAsUser user on behalf of whom the action is performed @return Token object containing the delegation token @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
2123 Renews a delegation token. @param url the URL for the operation @param token the authenticated token @param dToken the delegation token to renew @param doAsUser the user on behalf of whom the operation is performed @return the new expiration time of the token @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
2124 Cancels a delegation token. @param url the URL for the operation @param token authentication token @param dToken delegation token to cancel @param doAsUser user on behalf of whom the operation is performed @throws IOException if an I/O error occurs or authentication fails
2125 Chooses a random node within a specified scope. @param scope defines the selection criteria for nodes @return a randomly selected Node object or null if none found
2126 Sorts nodes by distance from a given reader node. Adjusts reader if not in NetworkTopology tree. @param reader the reference node for sorting @param nodes array of nodes to sort @param activeLen number of active nodes
2127 Wraps socket input stream with a timeout. @param socket the network socket @param timeout read timeout in milliseconds @return SocketInputWrapper instance @throws IOException if an I/O error occurs
2128 Returns an output stream for the given socket with a specified timeout. @param socket the socket to get the output stream from @param timeout the read timeout in milliseconds @return OutputStream for writing data to the socket @throws IOException if an I/O error occurs
2129 Establishes a socket connection with specified endpoint and local address. @param socket the Socket to connect @param endpoint the remote SocketAddress to connect to @param localAddr the local SocketAddress to bind, may be null @param timeout connection timeout in milliseconds @throws IOException if an I/O error occurs or connection fails
2130 Registers an MBean with the platform MBean server. @param serviceName service name for the MBean @param nameName name of the MBean @param properties properties for the MBean @param theMbean the MBean object to register @return ObjectName of registered MBean or null if registration fails
2131 Creates a new inverse quantiles metric. @param name unique metric identifier @param desc description of the metric @param sampleName name of the sample @param valueName name of the value @param interval time interval for metrics collection @return MutableQuantiles object for tracking quantiles
2132 Initializes a RetryCache with given parameters. @param cacheName name of the cache @param percentage capacity percentage for the cache @param expirationTime time in milliseconds before entries expire
2133 Initializes metrics for methods in the given protocol. @param protocol Class containing methods to monitor
2134 Initializes metrics with given names. @param names array of metric names to be added
2135 Aggregates local statistics to global metrics. @param localStats map of thread-safe sample stats by name
2136 Creates a new mutable rate with default enabled status. @param name rate name @param desc rate description @param extended indicates if extended rate @return MutableRate object
2137 Initializes protocol by caching and registering methods. @param protocol Class representing the protocol to initialize
2138 Adds metric tracking to a method. @param source object containing the method @param method method to be tracked
2139 Validates Kerberos authentication and credentials for a user. @param messagePrefix prefix for error messages @param user UserGroupInformation object to validate
2140 Checks if a file is valid for processing. @param file the File to validate @param category the category of validation @param text description text for error messages @return true if file exists, is not empty, and is readable; false otherwise
2141 Validates Kerberos principal's short name. Logs warnings if short name contains @ or /. Throws exceptions for invalid names or IO errors.
2142 Retrieves user group information. @return UserGroupInformation object or null if owner is invalid
2143 Initializes a new Find instance with recursive search enabled.
2144 Default constructor for Count class.
2145 Forces re-login using keytab. @throws IOException if login fails
2146 Forces re-login using ticket cache. Throws IOException if an error occurs during the process.
2147 Relogins using ticket cache. @throws IOException if an I/O error occurs
2148 Creates an InetSocketAddress for a given host and port. @param host the target hostname or IP address @param port the target port number @return InetSocketAddress object representing the connection details
2149 Retrieves the InetAddress for a given host. @param host hostname or IP address as a string @return InetAddress object if it's a local address, otherwise null
2150 Sends an RPC request. @param call the RPC call to send @throws InterruptedException if interrupted while sending @throws IOException if I/O error occurs during serialization or sending
2151 Processes RPC request from client. @param header RPC request header @param buffer request data buffer @throws RpcServerException if processing fails @throws InterruptedException if thread is interrupted
2152 Sets up the RPC response based on call status. @param call the RPC call object @param status the RPC status @param erCode the error code if applicable @param rv the writable return value @param errorClass the exception class name if applicable @param error the error message if applicable @throws IOException if an I/O error occurs
2153 Resets IP list and updates cache expiry time.
2154 Main method to display system information. Initializes SysInfoLinux and prints various memory, CPU, network, and storage metrics.
2155 Generates a string representation with optional formatting. @param qOption enable query option @param hOption enable header option @return formatted string based on options
2156 Reads bytes from the input stream into a byte array. @param b destination buffer @param off starting offset in the buffer @param len maximum number of bytes to read @return number of bytes actually read or -1 if end of stream reached
2157 Creates an Expression instance. @param expressionClass the class of the Expression to create @param conf configuration settings for the Expression @return a new Expression instance or null if expressionClass is null
2158 Retrieves a command instance by name. @param cmdName the name of the command @param conf configuration object @return Command instance or null if not found
2159 Creates a new instance of keyClass. @return an instance of WritableComparable
2160 Creates a new instance of a Writable class. @param c Class type of the Writable to instantiate @param conf Configuration for the Writable instance @return A new Writable instance configured with the given settings
2161 Retrieves SocketFactory from configuration property. @param conf Configuration object containing properties @param propValue Property value specifying the SocketFactory class name @return SocketFactory instance or throws RuntimeException if class not found
2162 Decodes a token identifier from the given byte array. @return decoded TokenIdentifier object or null if class is not found @throws IOException if an I/O error occurs during decoding
2163 Returns an instance of the specified DiskValidator class. @param clazz the DiskValidator subclass to instantiate @return a singleton instance of the specified DiskValidator
2164 Initializes a DynamicBloomFilter with specified parameters. @param vectorSize size of the bloom filter bit vector @param nbHash number of hash functions to use @param hashType type of hash function to use @param nr initial number of records to handle
2165 Adds a new row to the matrix with a new BloomFilter.
2166 Initializes a Retouched Bloom Filter with specified parameters. @param vectorSize size of the bit vector @param nbHash number of hash functions @param hashType type of hash function to use
2167 Loads properties with optional full reload. @param props properties to load @param startIdx starting index for loading @param fullReload flag for full resource reload
2168 Exits the election process. @param needFence indicates if fencing is required
2169 Reads data from multiple file ranges. @param ranges list of file ranges to read @param allocate function to allocate ByteBuffer @throws IOException if an I/O error occurs
2170 Constructs a block location with specified details. @param names array of block names @param hosts array of hostnames @param offset starting byte offset @param length length in bytes
2171 Constructs a DurationStatisticSummary. @param key identifier for the statistic @param success indicates if operation was successful @param count total number of operations @param max maximum duration @param min minimum duration @param mean MeanStatistic object or null
2172 Aggregates statistics from a source into this instance. @param source the source of statistics to aggregate, can be null @return true if aggregation successful, false if source is null
2173 Constructs an IOStatisticsSnapshot from a source or initializes empty maps. @param source IOStatistics object to snapshot, can be null
2174 Iterates over a remote iterator, applying a consumer to each element. @param source RemoteIterator of elements to process @param consumer ConsumerRaisingIOE to apply to each element @return Count of processed elements @throws IOException if an I/O error occurs during iteration or cleanup
2175 Writes an object to DataOutput. @param out the output stream @param instance the object to write @param declaredClass the class of the object @param conf configuration settings
2176 Requests a block for prefetching. @param blockNumber the number of the block to prefetch
2177 Acquires buffer data by block number with retries. @param blockNumber the block number to acquire @return BufferData object or throws exception if fails
2178 Processes path argument. @param item PathData object to process @throws IOException if an I/O error occurs
2179 Processes paths recursively, grouping items as needed. @param parent parent PathData object @param itemsIterator iterator for child PathData objects @throws IOException if an I/O error occurs
2180 Resolves partial group names for a user. @param userName user's name @param errMessage error message for unresolved groups @param groupNames comma-separated group names @return set of resolvable group names @throws PartialGroupNameException if resolution fails
2181 Executes command with no timeout. @param cmd array of command and its arguments @return output of the executed command @throws IOException if an I/O error occurs
2182 Executes command with environment variables. @param env environment variables map @param cmd command and its arguments @return command output as string @throws IOException if execution fails
2183 Adds all credentials from another Credentials object. @param other Credentials object to copy from
2184 Merges credentials from another instance. @param other Credentials object to merge from
2185 Adds delegation tokens to the provided credentials. @param renewer user allowed to renew the token @param credentials object holding security tokens @return array of added delegation tokens @throws IOException if an I/O error occurs
2186 Adds a token to the store. @param token the token to add, must not be null @return true if added successfully, false otherwise
2187 Sets the working directory. @param newDir the new directory path to be set
2188 Sets the modification and access times of a file. @param p path to the file @param mtime milliseconds since epoch for last modified time, or negative to ignore @param atime milliseconds since epoch for last accessed time, or negative to ignore @throws IOException if an I/O error occurs
2189 Converts a Path to a File. @param path the Path to convert @return the corresponding File object
2190 Converts a file path to its absolute URI path. @param p file path to convert @return absolute URI path as a string
2191 Makes a path qualified using the given FileSystem. @param fs the FileSystem to use for qualification @return the qualified Path
2192 Qualifies a given path with the default file system URI and working directory. @param path the path to be qualified @return the fully qualified path
2193 Makes a given file path fully qualified. @param path the original file path @return the fully qualified file path
2194 Lists file statuses for a given path. @param f file or directory path @return array of FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if the path does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException on I/O errors
2195 Deletes a file or directory. @param f the path to the file or directory @param recursive true if directories should be deleted recursively @return true if deletion is successful, false otherwise @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException if an I/O error occurs
2196 Opens a file input stream for the specified path. @param f file path to open @return FSDataInputStream for reading the file @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if file system is unsupported @throws IOException if an I/O error occurs
2197 Opens a file for reading. @param f path to the file @param bufferSize size of the buffer @return FSDataInputStream for reading the file @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if file system is unsupported @throws IOException if an I/O error occurs
2198 Truncates a file to the specified length. @param f path to the file @param newLength new file length in bytes @return true if truncation successful, false otherwise
2199 Sets the replication factor for a file. @param f file path @param replication desired replication factor @return true if successful, false otherwise
2200 Sets file permissions. @param f file path @param permission new file permissions @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if file system is unsupported @throws IOException for other I/O errors
2201 Sets the owner and group for a file path. @param f file path to modify @param username new owner's username @param groupname new group name @throws AccessControlException if permission is denied @throws UnsupportedFileSystemException if operation not supported @throws FileNotFoundException if file does not exist @throws IOException for other I/O errors
2202 Sets the modification and access times for a file. @param f file path @param mtime new modification time in milliseconds since epoch @param atime new access time in milliseconds since epoch @throws AccessControlException if permission is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if operation is unsupported @throws IOException for other I/O errors
2203 Computes the checksum of a file. @param f file path @return FileChecksum object @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws IOException for other I/O errors
2204 Retrieves file status for a given path. @param f file path to check @return FileStatus object representing the file's metadata @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if file system is unsupported @throws IOException if an I/O error occurs
2205 Checks access permissions for a given path. @param path the file system path to check @param mode the required access mode (read, write, etc.) @throws AccessControlException if permission is denied @throws FileNotFoundException if the path does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException for other I/O errors
2206 Retrieves the status of a file link. @param f file path @return FileStatus object representing the file's status @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if file system is unsupported @throws IOException for other I/O errors
2207 Resolves the target of a symbolic link. @param f path to the link @return resolved Path or throws exceptions if issues occur
2208 Retrieves block locations for a file. @param f file path @param start starting offset @param len length of the range @return array of BlockLocation objects @throws IOException if an I/O error occurs
2209 Retrieves the filesystem status for a given path. @param f file or directory path @return FsStatus object representing the filesystem status @throws AccessControlException if access is denied @throws FileNotFoundException if the path does not exist @throws UnsupportedFileSystemException if the filesystem is unsupported @throws IOException if an I/O error occurs
2210 Creates a symbolic link. @param target path to the target file or directory @param link path where the symlink should be created @param createParent if true, creates parent directories if necessary @throws various exceptions for invalid operations or unsupported features
2211 Lists file statuses in a directory. @param f path to the directory @return iterator of FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if the path does not exist @throws UnsupportedFileSystemException if the filesystem is unsupported @throws IOException for other I/O errors
2212 Lists corrupt file blocks for a given path. @param path the file or directory path to check @return RemoteIterator of corrupt block paths @throws IOException if an I/O error occurs
2213 Lists file statuses with locations. @param f path to list @return iterator of LocatedFileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if file not found @throws UnsupportedFileSystemException if unsupported filesystem @throws IOException for other I/O errors
2214 Resolves abstract file systems for a given path. @param f the input path @return set of resolved AbstractFileSystem objects @throws IOException if an I/O error occurs
2215 Modifies ACL entries for a given path. @param path file or directory path @param aclSpec list of ACL entries to modify @throws IOException if an I/O error occurs
2216 Removes ACL entries from a file or directory. @param path the path to the file or directory @param aclSpec list of ACL entries to remove @throws IOException if an I/O error occurs
2217 Removes default ACL from a file system path. @param path the file path to modify
2218 Removes ACL from the specified path. @param path file or directory path @throws IOException if an I/O error occurs
2219 Sets ACL for a file path. @param path the file path to set ACL on @param aclSpec list of ACL entries to apply @throws IOException if an I/O error occurs
2220 Retrieves ACL status for a given path. @param path file or directory path @return AclStatus object representing ACL permissions @throws IOException if an I/O error occurs
2221 Sets an extended attribute on a file path. @param path the file path to set the attribute on @param name the name of the attribute @param value the byte array value of the attribute @param flag flags for setting the attribute @throws IOException if an I/O error occurs
2222 Retrieves extended attribute for a file path. @param path the file path @param name the attribute name @return byte array of the attribute value or null if not found @throws IOException if an I/O error occurs
2223 Retrieves extended attributes for a file path. @param path the file path to query @return map of attribute names and values or empty map if none exist @throws IOException if an I/O error occurs
2224 Retrieves extended attributes for a given path. @param path the file path @param names list of attribute names to retrieve @return map of attribute names to their byte values @throws IOException if an I/O error occurs
2225 Removes an extended attribute from a file path. @param path the file path @param name the name of the attribute to remove @throws IOException if an I/O error occurs
2226 Lists extended attributes of a file. @param path the file path @return list of attribute names or empty list if none @throws IOException if an I/O error occurs
2227 Creates a snapshot of the specified file system path. @param path the original file system path @param snapshotName name of the snapshot to create @return Path object representing the snapshot @throws IOException if an I/O error occurs
2228 Renames a snapshot in the specified file system path. @param path the file system path containing the snapshot @param snapshotOldName the current name of the snapshot @param snapshotNewName the new name for the snapshot @throws IOException if an I/O error occurs during renaming
2229 Deletes a snapshot from the specified path. @param path the directory containing the snapshot @param snapshotName name of the snapshot to delete @throws IOException if an I/O error occurs
2230 Ensures the storage policy is satisfied for a given file path. @param path the file path to satisfy the storage policy for
2231 Sets storage policy for a given file path. @param path the file path to set the policy on @param policyName the name of the storage policy @throws IOException if an I/O error occurs
2232 Removes storage policy from a file path. @param src source file path @throws IOException if an I/O error occurs
2233 Retrieves storage policy for a given file path. @param path file path to check @return BlockStoragePolicySpi object or null if not applicable @throws IOException on I/O errors
2234 Checks if a path has a specific capability. @param path the file system path to check @param capability the capability to verify @return true if the path has the capability, false otherwise @throws IOException if an I/O error occurs
2235 Retrieves server defaults for a given file system path. @param path the file system path to resolve @return FsServerDefaults object containing server configuration @throws IOException if an I/O error occurs during resolution
2236 Creates a multipart uploader for the specified base path. @param basePath root directory path for uploads @return MultipartUploaderBuilder instance @throws IOException if an I/O error occurs
2237 Retrieves the working directory of an SFTP client. @param client the SFTP channel client @return the home directory as the working directory
2238 Updates file status. @return FileStatus object reflecting current state @throws IOException on file access error
2239 Retrieves the amount of used space in bytes. @return number of bytes used @throws IOException if an I/O error occurs
2240 Resolves source path to destination using regex mapping. @param srcPath source path string @param resolveLastComponent flag to resolve last component @return ResolveResult containing resolved path details or null if no match
2241 Checks if a file exists in local directories. @param pathStr file path to check @param conf configuration settings (unused) @return true if file exists, false otherwise
2242 Deletes a directory and its contents in the specified file system. @param fs FileSystem instance to operate on @param name directory name to delete
2243 Finds the current directory based on the given date. @param now current date @return Path to the current directory
2244 Creates a file output stream for writing. @param f the file to write to @param permissions file permissions @return FileOutputStream for writing or throws IOException if fails
2245 Checks if source and target paths are both in reserved raw area. @param src source path @param target target path @return true if both paths are in reserved raw, false otherwise @throws PathOperationException if only one path is in reserved raw
2246 Returns the parent directory of this path. @return Path representing the parent directory, or null if none exists
2247 Returns an optional parent path. @return Optional containing the parent Path or empty if none exists
2248 Retrieves an iterator for directory contents. @return Iterator of PathData objects @throws IOException if access fails
2249 Initializes FSDataOutputStreamBuilder with file context and path. @param fc FileContext instance @param p Path to the file @throws IOException if an I/O error occurs
2250 Sets checksum verification for a file. @param verifyChecksum flag to enable or disable checksum verification @param f path to the file @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if file system is unsupported @throws IOException for other I/O errors
2251 Reads file status fields from input. @param in DataInput source @throws IOException if read fails or size is negative
2252 Constructs a LocatedFileStatus with detailed file attributes. @param length file size in bytes @param isdir true if the path is a directory @param block_replication replication factor of blocks @param blocksize size of each block @param modification_time last modification time in milliseconds since epoch @param access_time last access time in milliseconds since epoch @param permission file permissions @param owner file owner @param group file group @param symlink symbolic link target path (if any) @param path file path @param hasAcl true if the file has an ACL @param isEncrypted true if the file is encrypted @param isErasureCoded true if the file uses erasure coding @param locations array of block locations
2253 Appends a key-value pair to the data structure. @param key the key to be appended @param val the value associated with the key @throws IOException if an I/O error occurs
2254 Closes the resource by stopping it. Throws IOException if an I/O error occurs during closure.
2255 Writes a byte to the buffer. @param b byte to be written @throws IOException if an I/O error occurs
2256 Writes bytes to the output stream. @param b byte array containing data to write @param off offset in the byte array to start writing from @param len number of bytes to write @return number of bytes written @throws IOException if an I/O error occurs
2257 Validates input and output chunks for erasure coding. @param inputs array of ECChunk objects to be validated @param erasedIndexes indexes of erased chunks @param outputs array of ECChunk objects representing outputs @throws IOException if validation fails or an I/O error occurs
2258 Finishes writing a data block. @param bForceFinish forces block completion if true @throws IOException on I/O errors
2259 Reads token storage data from input stream. @param in DataInputStream to read from @throws IOException if header is invalid or format is unsupported
2260 Retrieves tokens eligible for cleanup. @return Map of TokenIdent to DelegationTokenInformation for stale tokens
2261 Reads the next raw value from input. @param rawValue buffer to store the read value @return length of the read value or -1 if no more data @throws IOException if an I/O error occurs
2262 Writes credentials and secret keys to a DataOutput stream in protocol buffer format. @param out the output stream to write to @throws IOException if an I/O error occurs
2263 Converts a Token to its Protobuf representation. @param tok the Token object to convert @return the corresponding TokenProto object
2264 Creates and returns a new Entry. Throws IOException if key check fails.
2265 Compares current cursor key with another RawComparable. @param other the RawComparable to compare against @return negative if less, zero if equal, positive if greater @throws IOException if an I/O error occurs during comparison
2266 Retrieves key and value from storage. @param key BytesWritable to store retrieved key @param value BytesWritable to store retrieved value @throws IOException if an I/O error occurs
2267 Advances the block by n records, checking keys and closing streams. @param n number of records to advance @throws IOException if an I/O error occurs
2268 Retrieves a delegation token for URL access. @param url the target URL requiring authentication @param token current authentication token @param renewer entity authorized to renew the token @return Token object representing the delegation token @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
2269 Renews a delegation token. @param url the URL for token renewal @param token authenticated URL token @param dToken delegation token to renew @return expiration time of renewed token @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
2270 Cancels a delegation token. @param url the URL to send the cancellation request @param token authentication token for the request @param dToken the delegation token to cancel
2271 Retrieves input stream from socket with default timeout. @param socket connected network socket @return SocketInputWrapper for reading data @throws IOException if an I/O error occurs
2272 Retrieves output stream from socket. @param socket connected network socket @return OutputStream for writing data @throws IOException if an I/O error occurs
2273 Establishes a connection to a specified address with a given timeout. @param socket the socket to use for connection @param address the target address to connect to @param timeout the connection timeout in milliseconds @throws IOException if an I/O error occurs during connection
2274 Collects and returns a sample of metrics. @return MetricsBuffer containing sampled metrics
2275 Registers an MBean with specified service and name. @param serviceName name of the service @param nameName name for the MBean @param theMbean the MBean to register @return ObjectName of registered MBean
2276 Retrieves or creates metrics for a specified directory. @param dirName directory name to monitor @return ReadWriteDiskValidatorMetrics instance
2277 Initializes RPC stats for a specified number of priority levels. @param numLevels the number of priority levels to initialize
2278 Aggregates thread-local metrics to global metrics.
2279 Creates a new mutable rate with default settings. @param name rate identifier and description @return MutableRate object initialized with given name
2280 Creates a new mutable rate. @param name rate name @param description rate description @return MutableRate object with enabled set to false
2281 Examines and prints details of a keytab file. @param keytabFile the keytab file to examine @throws IOException if an I/O error occurs
2282 Validates JAAS configuration based on requirement. @param jaasRequired flag indicating if JAAS is required @throws IOException if issues occur during validation
2283 Retrieves the real owner of a token. @param id TokenIdent object containing user information @return Username of the real token owner
2284 Ensures the parent ZNode exists with correct ACLs. @throws IOException if creation or setting ACLs fails @throws InterruptedException if operation is interrupted @throws KeeperException if ZooKeeper operation fails
2285 Retrieves active data from ZooKeeper. @return byte array of active data or throws exceptions if issues occur @throws ActiveNotFoundException if the active node does not exist @throws KeeperException for general ZooKeeper errors @throws InterruptedException if operation is interrupted @throws IOException for input/output errors
2286 Checks TGT validity and attempts to re-login using keytab. @throws IOException if an I/O error occurs during re-login
2287 Relogins using keytab without force. Throws IOException if login fails.
2288 Resolves and returns a connectable address. @param addr initial socket address @return resolved InetSocketAddress for connection
2289 Updates the server address if a change is detected. @return true if address was updated, false otherwise
2290 Converts a URI to its canonical form using the specified default port. @param uri the original URI @param defaultPort the default port to use if none is specified in the URI @return the canonicalized URI
2291 Sends an RPC request and handles response. @param rpcKind type of RPC call @param rpcRequest request payload @param remoteId destination connection ID @param serviceClass service class for the call @param fallbackToSimpleAuth flag to fall back to simple auth @param alignmentContext context for alignment @return response if synchronous, null if asynchronous @throws IOException on I/O errors or interruptions
2292 Waits for a cache entry completion or adds a new one if missing. @param newEntry the cache entry to check or add @return the completed cache entry
2293 Adds a cache entry with client ID and call ID. @param clientId unique identifier for the client @param callId unique identifier for the call
2294 Generates string representation with optional formatting. @param qOption flag to enable specific formatting @return formatted string based on qOption
2295 Retrieves an Expression instance by name. @param expressionName the name of the expression to retrieve @param conf configuration settings for the expression @return Expression object or null if not found
2296 Creates an Expression instance. @param expressionClassname fully qualified class name of the Expression @param conf configuration settings for the Expression @return Expression object or throws IllegalArgumentException if invalid class name
2297 Builds a description of supported expressions. @param factory ExpressionFactory to create expression instances @return Detailed string describing primary and operator expressions
2298 Creates an Expression instance. @param expressionClass type of Expression to create @return new Expression object configured with current settings
2299 Retrieves an instance of Command. @param cmd command string identifier @return Command object based on configuration
2300 Reads an object from a DataInput stream. @param in input stream to read from @param objectWritable ObjectWritable instance to store the result @param conf configuration settings @return deserialized object or null if not found
2301 Creates a new instance of a Writable class. @param c Class type of Writable to instantiate @return New instance of Writable
2302 Decodes a token identifier from a given token. @param token the Token object containing the identifier @return the decoded TokenIdent object @throws IOException if decoding fails
2303 Prints credentials details matching the given alias. @param creds Credentials object containing tokens @param alias Text representing the alias to match @param out PrintStream to output the results @throws IOException if an I/O error occurs during printing
2304 Retrieves a DiskValidator instance by name. @param diskValidator the name of the validator class @return an instance of the specified DiskValidator @throws DiskErrorException if the validator class is not found
2305 Initializes a new BlockLocation with default empty strings and zero values.
2306 Retrieves block locations for a file. @param file FileStatus object representing the file @param start starting offset in the file @param len length of the data to retrieve @return array of BlockLocation objects or null if file is null
2307 Fetches duration statistics summary. @param source IOStatistics object containing data @param key statistic key @param success indicates if the operation was successful @return DurationStatisticSummary object with aggregated stats
2308 Takes a snapshot of current IO statistics. @return IOStatisticsSnapshot object containing the current stats
2309 Creates a snapshot of given IO statistics. @param statistics the current IO statistics to snapshot @return an IOStatisticsSnapshot object capturing the state of the input statistics
2310 Creates an IOStatisticsSnapshot from a given source. @param source object containing IO statistics data @return a new IOStatisticsSnapshot instance
2311 Converts RemoteIterator to a List. @param source RemoteIterator of elements @return List containing all elements from the iterator @throws IOException if an I/O error occurs during iteration
2312 Processes path data based on existence. @param item PathData object to be processed @throws IOException if an I/O error occurs during processing
2313 Retrieves Unix groups for a given user. @param user username @return set of group names or empty set if none found @throws IOException if an I/O error occurs
2314 Executes a command script with arguments in batches. @param args list of command arguments @param commandScriptName name of the command script @return combined output of all commands or null on error
2315 Reads the target of a symbolic link. @param f File object representing the symlink @return Target path as String, or empty string if failed
2316 Sets file permissions. @param p path to the file @param permission FsPermission object representing new permissions
2317 Executes shell command to get users for a netgroup. @param netgroup netgroup name (without '@' prefix) @return string containing user list or empty if not found
2318 Copies credentials from another Credentials object. @param credentials source Credentials object to copy from
2319 Adds credentials to the subject. @param credentials list of Credentials to be added
2320 Converts path to a File object. @throws IllegalArgumentException if the file system is not local
2321 Creates directories and sets permissions if needed. @param localFS the local file system to operate on @param dir the directory path to create @param expected the expected file permission @throws IOException if an I/O error occurs
2322 Retrieves file status for a given path. @param f the file path @param dereference whether to follow symbolic links @return FileStatus object representing the file's metadata @throws IOException if an I/O error occurs
2323 Retrieves the root directory enclosing a given path. @param path the input file path @return the qualified root directory as a Path object @throws IOException if an I/O error occurs
2324 Processes and deletes files marked for deletion on exit.
2325 Checks if a file exists at the specified path. @param f Path to the file @return true if the file exists, false otherwise @throws AccessControlException if access is denied @throws UnsupportedFileSystemException if the file system is not supported @throws IOException for other I/O errors
2326 Sets the working directory. @param newWDir new working directory path @throws IOException if an I/O error occurs or if the path is invalid
2327 Checks destination path for existence and permissions. @param srcName source file name @param dst destination path @param overwrite flag to allow overwriting existing files @throws AccessControlException if access is denied @throws IOException if an I/O error occurs or target exists when not allowed
2328 Computes content summary for a file or directory. @param f file path @return ContentSummary object with length, file count, and directory count @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if file system is unsupported @throws IOException for other I/O errors
2329 Retrieves delegation tokens for a path. @param p the path to resolve file systems from @param renewer the user allowed to renew the token @return list of delegation tokens or empty if none found
2330 Sets extended attribute on a file. @param path file path @param name attribute name @param value attribute value as bytes
2331 Creates a snapshot of the specified file path. @param path the original file path to snapshot @return a new Path object representing the snapshot @throws IOException if an I/O error occurs during snapshot creation
2332 Initializes MultipartUploaderBuilderImpl with file context and path. @param fc FileContext for file operations @param p Path to the file @throws IOException if an I/O error occurs
2333 Waits for files in waitList to reach newLength and truncates them. @throws IOException if an I/O error occurs
2334 Attempts to resolve a path using regex mountpoints. @param srcPath the source path to resolve @param resolveLastComponent flag to determine if the last component should be resolved @return ResolveResult object or null if no match found
2335 Checks if a path exists in the configuration context. @param pathStr the path to check @param conf the configuration object @return true if the path exists, false otherwise
2336 Converts a path within an archive to a relative path. @param path the original path in the archive @return relative path or null if not found
2337 Returns the path to the checksum file for a given file. @param file the original file @return Path object representing the checksum file
2338 Checks if the parent directory exists. @return true if parent exists, false otherwise @throws IOException if an I/O error occurs
2339 Creates a directory with specified permissions. @param f the path of the directory to create @param absolutePermission the permission to set on the directory @param createParent flag indicating whether to create parent directories if they don't exist @throws IOException if directory creation fails
2340 Renames a file or directory. @param src source path @param dst destination path @param options optional rename options (e.g., OVERWRITE) @throws IOException if operation fails
2341 Generates checksum file path for given file. @param file input file path @return Path object representing checksum file
2342 Checks if a given path is under a specified base path. @param p the path to check @param basePath the base path @return true if p is under or equals basePath, false otherwise
2343 Checks if the node has no parent. @return true if it's a root node, false otherwise
2344 Appends a suffix to the path. @param suffix string to append @return new Path with appended suffix
2345 Qualifies symlink target URI. @param pathURI base URI for qualification @param pathWithLink path containing the symlink @param target symlink target path @return qualified target path or original if already qualified
2346 Renames a file or directory from src to dst. @param src source path @param dst destination path @param overwrite flag to allow overwriting existing files/directories @throws IOException if an I/O error occurs
2347 Constructs a FileStatus object with detailed file attributes. @param length size of the file in bytes @param isdir true if the path is a directory @param block_replication replication factor for blocks @param blocksize size of each block in bytes @param modification_time last modification time in milliseconds since epoch @param access_time last access time in milliseconds since epoch @param permission file permissions @param owner username of the file owner @param group group name of the file @param path file path
2348 Copies file status from another FileStatus instance. @param other source FileStatus to copy from @throws IOException if an I/O error occurs during copying
2349 Constructs a LocatedFileStatus with block locations. @param stat FileStatus object containing file metadata @param locations Array of BlockLocation objects for the file
2350 Constructs a LocatedFileStatus object. @param length file size in bytes @param isdir true if the path is a directory @param block_replication number of replicas for the file blocks @param blocksize size of each block in bytes @param modification_time last modification time in milliseconds since epoch @param access_time last access time in milliseconds since epoch @param permission file permissions @param owner file owner @param group file group @param symlink symbolic link if applicable @param path file path @param locations block locations
2351 Appends a writable value to the map and increments the count. @param value Writable object to be appended @throws IOException if an I/O error occurs
2352 Writes bytes to the output stream. @param b byte array containing data @param off starting offset in the byte array @param len number of bytes to write @throws IOException if an I/O error occurs
2353 Ensures resources are released when object is garbage collected. Calls `finish()` to clean up resources and then calls superclass's `finalize()`.
2354 Moves cursor to the end of the stream. @throws IOException if an I/O error occurs
2355 Closes the cursor by parking it at the end. @throws IOException if an I/O error occurs
2356 Reads credentials from a token storage file. @param filename the file containing stored tokens @param conf configuration settings (not used) @return Credentials object populated with read data @throws IOException if an error occurs during reading
2357 Checks if the key is within the block for advancement. @param key the key to compare @param greater true if searching for a greater or equal match @return true if the key matches conditions, false otherwise
2358 Publishes metrics immediately to all registered sinks.
2359 Initializes rate tracking for specified protocol. @param protocol class representing the protocol to initialize
2360 Collects thread-local states from inner metrics.
2361 Adds a value to a named metric. @param name metric identifier @param value value to add @throws MetricsException if operation is unsupported for the metric type
2362 Updates owner statistics with a new token. @param id unique identifier for the token
2363 Decreases the token count for a user's stats. @param id unique token identifier
2364 Retrieves the current active service target. @return HAServiceTarget object representing the active service, or null if not found @throws IOException for unexpected ZooKeeper issues @throws InterruptedException if interrupted while waiting
2365 Initializes an ActiveStandbyElector with specified parameters. @param zookeeperHostPorts comma-separated list of ZooKeeper host:port pairs @param zookeeperSessionTimeout session timeout in milliseconds @param parentZnodeName parent znode name for election @param acl list of ACLs for the znode @param authInfo authentication information for ZooKeeper @param app callback for election events @param maxRetryNum maximum number of retries @param failFast if true, establish connection immediately; otherwise, re-establish session @param truststoreKeystore truststore keystore configuration @throws IOException on I/O errors @throws HadoopIllegalArgumentException for invalid arguments @throws KeeperException on ZooKeeper errors
2366 Creates a socket address from target and port. @param target the target host or IP address @param defaultPort the default port to use if not specified in target @param configName configuration name for caching purposes @param useCacheIfPresent flag to determine if cached address should be used @return InetSocketAddress object representing the socket address
2367 Retrieves connection address for a server. @param server Server instance to connect to @return InetSocketAddress for connection
2368 Makes an RPC call with default service class. @param rpcKind type of RPC @param rpcRequest request data @param remoteId connection details @param fallbackToSimpleAuth flag for simple auth fallback @return Writable response or null on error
2369 Waits for a cache entry completion. @param cache the RetryCache instance @param clientId client identifier bytes @param callId call identifier @return CacheEntry or null if skipped or not found
2370 Waits for a cache entry completion. @param cache the RetryCache instance @param payload data to be cached @param clientId unique client identifier @param callId unique call identifier @return CacheEntryWithPayload or null if skipped or not found
2371 Retrieves an Expression object by name. @param expressionName unique identifier for the expression @return Expression object or null if not found
2372 Retrieves a comparator for a writable class. @param c the writable class @param conf configuration settings @return WritableComparator instance
2373 Constructs a comparator with specified key class. @param keyClass class of keys to compare
2374 Initializes a LocalDirAllocator with the specified configuration item name. @param contextCfgItemName configuration item name for disk allocation
2375 Updates deprecated properties with new values.
2376 Constructs a new Configuration object by cloning another. @param other the Configuration object to clone
2377 Adds a resource with configuration properties. @param conf Configuration object containing properties and system property restrictions
2378 Retrieves alternative names for a deprecated configuration key. @param name the original configuration key @return array of alternative keys or null if none exist
2379 Retrieves property sources by name. @param name the property name @return array of source names or null if not found
2380 Returns the number of properties. @return size of properties collection
2381 Clears properties and overlay.
2382 Returns an iterator over string-string key-value pairs. @return Iterator of Map.Entry<String, String>
2383 Retrieves properties matching a regex pattern. @param regex the regex pattern to match keys against @return a map of matched property keys and their values with variables substituted
2384 Reads vectored file ranges with checksum validation. @param ranges list of file ranges to read @param allocate function to allocate ByteBuffer for reading @throws IOException if an I/O error occurs
2385 Retrieves buffer data by block number with retries. @param blockNumber the block identifier to fetch @return BufferData object if successful, throws exception otherwise @throws IOException if stream is closed or other I/O error occurs
2386 Waits for file replication to reach the desired number. @param item PathData object representing the file to monitor
2387 Retrieves block locations for a file. @param p Path to the file @param start Starting offset in the file @param len Length of data to retrieve @return Array of BlockLocation objects @throws IOException if an I/O error occurs
2388 Fetches successful duration summary. @param source statistics data source @param key identifier for the summary @return DurationStatisticSummary object or null if not found
2389 Creates an I/O statistics snapshot. @return Serializable object representing the snapshot
2390 Retrieves and creates an IO statistics snapshot. @param source the source object for IO statistics @return Serializable snapshot or null if no stats available
2391 Converts RemoteIterator to array. @param source iterator over remote data @param a target array for conversion @return array containing elements from iterator
2392 Renews a delegation token. @param token the token to be renewed @param renewer the user attempting to renew the token @return the new expiration time of the token @throws InvalidToken if the token is invalid or expired @throws IOException if an I/O error occurs
2393 Cancels a delegation token. @param token the token to cancel @param canceller the user attempting to cancel the token @return the identifier of the canceled token @throws IOException if an I/O error occurs
2394 Processes a list of PathData arguments. @param args LinkedList containing PathData objects to be processed
2395 Retrieves groups for a given user. @param userName user's name @return list of group names or empty list if none found @throws IOException if an I/O error occurs
2396 Gets the number of hard links for a file. @param fileName the file to check @return the link count as an integer @throws IOException if an I/O error occurs
2397 Creates a symbolic link. @param target path to the target file or directory @param linkname name of the symbolic link @return exit code from shell command execution, 0 if successful @throws IOException if an I/O error occurs
2398 Changes file permissions using shell command. @param filename path to the file @param perm new permission string @param recursive apply recursively if true @return exit code of the shell command @throws IOException if execution fails
2399 Checks if 'setsid' is supported on the current system. @return true if 'setsid' is available and usable, false otherwise
2400 Sets the owner and/or group of a file. @param file the file to modify @param username the new owner's username (can be null) @param groupname the new group name (can be null) @throws IOException if both username and groupname are null or command execution fails
2401 Retrieves users for a specified netgroup. @param netgroup name of the netgroup @return list of usernames associated with the netgroup @throws IOException if an I/O error occurs
2402 Retrieves and filters credentials, removing private tokens. @return Credentials object with public tokens only
2403 Lists file statuses in a directory. @param f directory path @param filter path filter to apply @return array of FileStatus objects
2404 Lists file statuses for given paths. @param files array of file paths to check @param filter path filter to apply @return array of FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if a file is not found @throws IOException for other I/O errors
2405 Resolves a path to a filesystem and remaining path components. @param p the path to resolve @param resolveLastComponent whether to include the last component in resolution @return ResolveResult containing the resolved filesystem and remaining path @throws IOException if an I/O error occurs during resolution
2406 Sets the replication factor for a file and its checksum file. @param src source file path @param replication desired replication factor @return true if successful, false otherwise @throws IOException if an I/O error occurs @throws UnresolvedLinkException if a symlink cannot be resolved
2407 Deletes a file or directory. @param f the path to delete @param recursive whether to delete directories recursively @return true if deletion is successful, false otherwise @throws IOException if an I/O error occurs @throws UnresolvedLinkException if a symlink cannot be resolved
2408 Renames a file or directory. @param src source path to rename @param dst destination path for renaming @return true if successfully renamed, false otherwise
2409 Deletes a file or directory. @param f path to the file or directory @param recursive flag to delete directories recursively @return true if deletion is successful, false otherwise
2410 Checks if the source path is an ancestor of the target path. @param source PathData representing the potential ancestor @param target PathData representing the descendant path @return true if source is an ancestor of target, false otherwise
2411 Constructs full path by combining root and given path. @param path relative or absolute path @return combined full path as a Path object
2412 Strips the root part from a given Path. @param p the input Path object @return the path without the root part as a String
2413 Strips the root part from a given file path. @param p the input Path object @return the relative path as a String, or empty if path matches root exactly @throws IOException if path validation fails
2414 Resolves a file or directory by following symbolic links. @param fc FileContext object containing file system information @param path Path to resolve @return Resolved file or directory as type T @throws IOException if an I/O error occurs or symlink resolution fails
2415 Renames a file or directory. @param src source path @param dst destination path @param options optional rename options (e.g., OVERWRITE) @throws IOException if an I/O error occurs
2416 Converts HarStatus to FileStatus. @param h HarStatus object representing file or directory @return FileStatus object with updated metadata @throws IOException if an I/O error occurs
2417 Creates a FileStatus object from an FTP file. @param ftpFile the FTP file to convert @param parentPath the parent path of the file @return FileStatus representing the FTP file's metadata
2418 Verifies Kerberos token file. @param tokenFile the token storage file to verify @param conf configuration settings @param category diagnostic category @param message diagnostic message @return true if verification successful, false otherwise
2419 Prints token file details to the specified output stream. @param tokenFile the file containing the tokens @param alias text identifier for credentials @param conf configuration settings @param out PrintStream to write output @throws IOException if an I/O error occurs
2420 Synchronizes local cache with ZooKeeper for a given token identifier. @param ident token identifier to sync
2421 Initializes MetricsSystem with a given prefix. @param prefix identifier for the metrics system
2422 Processes an RPC call. @param server the RPC server instance @param connectionProtocolName name of the connection protocol @param request request buffer containing method parameters @param methodName name of the method to be called @param protocolImpl implementation of the protocol @return RpcWritable response or null if deferred @throws Exception if an error occurs during processing
2423 Adds an entry to the registry. @param name name of the entry @param elapsed time in milliseconds
2424 Adds a persisted delegation token. @param identifier token identifier @param renewDate token expiration date @throws IOException if operation fails or SecretManager is running
2425 Updates token owner statistics by clearing and repopulating.
2426 Removes expired delegation tokens. @throws IOException if an I/O error occurs during token removal
2427 Constructs an ActiveStandbyElector with SSL enabled. @param zookeeperHostPorts comma-separated list of ZooKeeper host:port pairs @param zookeeperSessionTimeout session timeout in milliseconds @param parentZnodeName parent ZNode name for election @param acl access control list for ZNodes @param authInfo authentication information for ZooKeeper @param app callback for election events @param maxRetryNum maximum number of retry attempts @param truststoreKeystore SSL truststore and keystore configuration @throws IOException if an I/O error occurs @throws HadoopIllegalArgumentException if invalid parameters are provided @throws KeeperException if a ZooKeeper operation fails
2428 Joins an election with provided application data. @param data application-specific data for the election @throws HadoopIllegalArgumentException if data is null
2429 Creates an InetSocketAddress with optional port configuration. @param target hostname or IP address @param defaultPort default port number @param configName configuration name for logging @return InetSocketAddress instance
2430 Invokes RPC method with given arguments. @param proxy proxy object @param method target method to invoke @param args method arguments (RpcController and Message) @return response message or null in async mode @throws ServiceException if invocation fails
2431 Invokes a remote method with given arguments. @param proxy proxy object @param method method to invoke @param args arguments for the method @return Message response or null if asynchronous @throws ServiceException on error
2432 Parses expressions from a deque of strings. @param args deque containing expression arguments @return parsed Expression object @throws IOException if unexpected argument is encountered
2433 Retrieves comparator for given writable class. @param c WritableComparable class type @return WritableComparator instance or default if none specified
2434 Authenticates user using delegation token or fallback handler. @param request HTTP request object @param response HTTP response object @return AuthenticationToken if successful, null otherwise @throws IOException if I/O error occurs @throws AuthenticationException if authentication fails
2435 Handles deprecation logic for a given key. @param deprecations context containing deprecation info @param name the original property key @return array of updated keys, including deprecated ones
2436 Converts configuration map to environment variables. @param env Map to store environment variables
2437 Cancels a token by identifier. @param token the token to cancel @param canceller the entity cancelling the token @return TokenIdent of the cancelled token or null if not found @throws IOException if an I/O error occurs
2438 Retrieves groups for a given user. @param user username to fetch groups for @return list of group names @throws IOException if an I/O error occurs
2439 Extracts a tar file into a directory. @param inFile the tar file to extract @param untarDir the target directory for extraction @throws IOException if an I/O error occurs
2440 Changes file permissions. @param filename path to the file @param perm permission string (e.g., "755") @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
2441 Sets file readability. @param f the file to modify @param readable desired readability status @return true if operation successful, false otherwise
2442 Sets file writable status. @param f the file to modify @param writable desired writable status @return true if operation succeeds, false otherwise
2443 Sets file executable permission. @param f the file to modify @param executable true to set as executable, false otherwise @return true if operation succeeds, false otherwise
2444 Loads permission information using native or non-native methods.
2445 Sets file owner and group. @param p file path @param username new owner's username @param groupname new group name @throws IOException if operation fails
2446 Sets file permissions using native methods if group/other differ or on Windows. @param f the File to set permissions on @param permission FsPermission object defining new permissions @throws IOException if an I/O error occurs
2447 Caches netgroups from a list. @param groups list of group names to cache @throws IOException if an I/O error occurs
2448 Dumps all tokens associated with a user group information. @param ugi UserGroupInformation object containing credentials
2449 Logs user information and tokens. @param log Logger instance for logging @param caption Description of the log entry @param ugi UserGroupInformation object containing user details
2450 Checks if directory has expected permissions. @param localFS Local file system instance @param dir Directory path to check @param expected Expected file permissions @throws DiskErrorException if disk error occurs @throws IOException if I/O error occurs
2451 Checks directory permissions and performs disk I/O operation. @param localFS LocalFileSystem instance @param dir Path to the directory @param expected Expected FsPermission for the directory @throws DiskErrorException if disk error occurs @throws IOException if I/O error occurs
2452 Lists file statuses for given paths. @param files array of Path objects to check @return array of FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if a file is not found @throws IOException for other I/O errors
2453 Retrieves the used space in bytes for the file system. @return used space in bytes @throws IOException if an I/O error occurs
2454 Retrieves block locations for a specified file range. @param file the FileStatus of the file @param start starting offset in the file @param len length of the data to retrieve @return array of BlockLocation objects or empty if none found
2455 Opens an input stream for reading a file from the archive. @param f path to the file within the archive @param bufferSize size of the buffer used for reading @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs or the path is not a file
2456 Opens a file input stream for reading. @param f the path to the file @param bufferSize size of the buffer @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs @throws UnresolvedLinkException if a symlink could not be resolved
2457 Opens a file for reading with specified buffer size. @param f Path to the file @param bufferSize Size of the buffer @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2458 Renames a file or directory and its associated checksum file. @param src source path to be renamed @param dst destination path after renaming
2459 Renames a file or directory within the same file system. @param src source path to rename @param dst destination path for renaming @param options optional rename options @throws IOException if an I/O error occurs
2460 Adds file statuses to the index under a parent directory. @param parent HarStatus object representing the parent directory @param statuses List to store FileStatus objects @throws IOException if an I/O error occurs
2461 Retrieves file status from a given path. @param f file path @return FileStatus object representing the file's metadata @throws IOException if an I/O error occurs
2462 Retrieves file status from SFTP server. @param client SFTP channel client @param file path to the file @return FileStatus object or throws exception if not found
2463 Retrieves the status of a file on an FTP server. @param client FTPClient instance connected to the server @param file Path object representing the file @return FileStatus object or throws FileNotFoundException if not found
2464 Constructs a new MetricsSystemImpl with default settings.
2465 Initializes a MutableRollingAverages instance. @param metricValueName name of the metric to track
2466 Updates the scheduled task with new parameters. @param windows number of windows for rate calculation @param interval time interval between task executions @param timeUnit unit of time for the interval
2467 Rechecks electability based on health and scheduling.
2468 Attempts to rejoin election after failing to become active. @param SLEEP_AFTER_FAILURE_TO_BECOME_ACTIVE time to wait before retrying
2469 Processes a ZooKeeper watch event. @param zk the ZooKeeper instance @param event the WatchedEvent received
2470 Creates an InetSocketAddress from a target and port. @param target hostname or IP address string @param defaultPort port number to use if not specified in target @return InetSocketAddress instance
2471 Authenticates request using specified schemes. @param request HTTP request object @param response HTTP response object @return AuthenticationToken or null if unauthorized
2472 Checks if only the key exists without a value. @param name property name to check @return true if key exists with default value, false otherwise
2473 Retrieves the raw property value by name. Handles deprecation and returns the first non-null property found. @param name property key to retrieve @return raw property value or null if not found
2474 Sets a property with a given name and value. @param name the property name, must not be null or empty @param value the property value, must not be null @param source the source of the property update, defaults to "programmatically" if null
2475 Removes a property by name, handling deprecations and alternatives. @param name the property name to unset
2476 Returns the virtual memory size. @return size of virtual memory in bytes
2477 Retrieves the physical memory size. Refreshes data if needed. @return memory size in bytes
2478 Returns available virtual memory size. Refreshes data if needed. @return available virtual memory size in bytes
2479 Returns available physical memory size. Refreshes data if needed. @return available memory in bytes
2480 Returns the number of available processors. Refreshes processor count if needed. @return Number of processors
2481 Returns current CPU frequency in kHz. Ensures data is refreshed if needed. @return CPU frequency in kHz
2482 Returns cumulative CPU time in milliseconds. Refreshes data if needed.
2483 Returns CPU usage percentage. Refreshes data if needed. @return CPU usage as a percentage per processor or -1 if unavailable
2484 Returns the percentage of used virtual CPU cores. @return float representing the percentage of used vCores, or -1 if not available
2485 Retrieves network bytes read. Refreshes data if needed. @return number of bytes read from the network
2486 Returns the total network bytes written. Refreshes data if needed. @return Total bytes written to the network
2487 Refreshes cached netgroups by clearing and repopulating. @throws IOException if an I/O error occurs during refresh
2488 Updates the filesystem status for a given mount point. @param viewFileSystem the ViewFileSystem instance to query @param mountPointMap map of MountPoints to their FsStatus @param mountPoint the specific mount point to update @param path the path associated with the mount point
2489 Lists file statuses for a given path. @param f the path to list @return array of FileStatus objects @throws IOException if an I/O error occurs
2490 Retrieves file link status. @param f path to the file @param dereference whether to resolve symbolic links @return FileStatus object
2491 Retrieves file status for a given path. @param f the path of the file @return FileStatus object with viewfs URI @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnresolvedLinkException if link cannot be resolved @throws IOException on other I/O errors
2492 Lists file statuses in a directory. @param f path to the directory @return array of FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if the directory does not exist @throws UnresolvedLinkException if a symlink cannot be resolved @throws IOException for other I/O errors
2493 Checks if a file exists in an SFTP channel. @param channel the SFTP channel to check @param file the path of the file to verify @return true if the file exists, false otherwise @throws IOException if an I/O error occurs
2494 Retrieves file status from SFTP server. @param channel SFTP channel for communication @param sftpFile SFTP entry representing the file @param parentPath parent directory path @return FileStatus object with file details @throws IOException if an I/O error occurs
2495 Checks if a given path is a file. @param channel SFTP channel for file operations @param file path to check @return true if the path is a file, false otherwise @throws IOException if an I/O error occurs or file check fails
2496 Checks if a file exists on an FTP server. @param client FTP client instance @param file path to the file @return true if file exists, false otherwise
2497 Lists file statuses in a directory or returns single file status. @param client FTPClient instance @param file path to the file or directory @return array of FileStatus objects @throws IOException if an I/O error occurs
2498 Checks if a given path is a file on an FTP server. @param client FTPClient instance connected to the server @param file Path object representing the file to check @return true if the path is a file, false otherwise
2499 Constructs a CBZip2InputStream with specified input stream and read mode. @param in the InputStream to read from @param readMode the READ_MODE for decompression @throws IOException if an I/O error occurs
2500 Calculates bytes to next marker in BZip2 stream. @param in input stream of BZip2 data @return number of bytes processed till next marker @throws IOException if I/O error occurs
2501 Processes Zookeeper create node result. @param rc operation result code @param path node path @param ctx context object @param name node name
2502 Processes result of lock node monitoring. @param rc ZooKeeper return code @param path lock node path @param ctx context object @param stat lock node statistics
2503 Creates an InetSocketAddress from a target string. @param target host or address to connect to @return InetSocketAddress object with default port -1
2504 Parses address specifications into InetSocketAddress list. @param specs comma or space-separated host:port strings @param defaultPort port to use if not specified in specs @return List of InetSocketAddress objects
2505 Builds a DT service name from URI and default port. @param uri the input URI @param defPort default port if not specified in URI @return the constructed service name or null if authority is missing
2506 Converts configuration to XML document. @param propertyName specific property name or null for all properties @param redactor object for sensitive data handling @return XML Document representation of configuration @throws IOException if parser configuration fails @throws IllegalArgumentException if specified property is not found
2507 Substitutes variables in a string with their values. @param expr input expression containing variables @return modified string with substituted variables or original if unchanged
2508 Applies configuration changes based on request parameters. @param out PrintWriter for output messages @param reconf Reconfigurable object to apply changes @param req HttpServletRequest containing parameter values @throws ReconfigurationException if an error occurs during reconfiguration
2509 Sets a configuration property. @param name property key @param value property value
2510 Sets a property with logging and optional source information. @param name the property name @param value the property value @param source the source of the property (optional)
2511 Deletes a directory and its contents recursively. @param dir the directory to delete @param tryGrantPermissions if true, attempts to grant permissions to parent folder @return true if deletion is successful, false otherwise
2512 Returns the number of CPU cores. @return Number of CPU cores available
2513 Retrieves filesystem status for a given path in a ViewFileSystem. @param fileSystem the ViewFileSystem instance @param path the path to check @return map of MountPoint to FsStatus or throws exception if not applicable
2514 Retrieves file status, resolving symlinks to their qualified paths. @param f path to the file or symlink @return FileStatus object with resolved symlink path if applicable @throws IOException if an I/O error occurs
2515 Renames a file on an SFTP server. @param channel SFTP channel for operations @param src source file path @param dst destination file path @return true if rename is successful, false otherwise @throws IOException if any I/O error occurs
2516 Lists status of files in a directory. @param client SFTP client instance @param file path to the directory or file @return array of FileStatus objects @throws IOException if an I/O error occurs
2517 Recursively creates directories on an SFTP server. @param client SFTP client instance @param file path of the directory to create @param permission permissions for the new directory @return true if directory creation was successful, false otherwise @throws IOException if an I/O error occurs
2518 Retrieves file statuses matching a given path pattern. @param pathPattern the path pattern to match files against @return an array of FileStatus objects or null if no matches found
2519 Retrieves file statuses matching a pattern with a filter. @param pathPattern the path pattern to match files @param filter the filter to apply to matched paths @return an array of FileStatus objects @throws AccessControlException if access is denied @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException if an I/O error occurs
2520 Retrieves file status for paths matching a pattern. @param pathPattern the path pattern to match files against @return an array of FileStatus objects representing matched files
2521 Retrieves file statuses matching a path pattern with an optional filter. @param pathPattern the path pattern to match files against @param filter the filter to apply to matched paths (can be null) @return array of FileStatus objects or empty if none found @throws IOException if an I/O error occurs during globbing
2522 Renames a file on an FTP server. @param client FTPClient instance @param src source path @param dst destination path @return true if rename is successful, false otherwise
2523 Deletes a file or directory on an FTP server. @param client FTPClient instance connected to the server @param file path of the file or directory to delete @param recursive true to delete directories recursively, false otherwise @return true if deletion is successful, false if not found @throws IOException if an I/O error occurs or directory is non-empty and recursive is false
2524 Creates directories recursively on an FTP server. @param client FTP client instance @param file target directory path @param permission directory permissions @return true if directories were successfully created, false otherwise @throws IOException if an I/O error occurs
2525 Converts IP:port to hostname:port. @param ipPort IP:port string @return hostname:port or original string if invalid
2526 Retrieves socket address for token service. @param token security token @return InetSocketAddress of the service
2527 Builds a token service from a URI. @param uri the URI containing the authority information @return a Text object representing the token service
2528 Returns the canonical service name. @return Service name or null if child file systems are present
2529 Returns the canonical service name. @return String representing the canonical service name
2530 Substitutes common variables in an expression. @param expr input expression with variables @return modified expression with substituted variables
2531 Retrieves property value by name, handling deprecation and variable substitution. @param name property key @return property value with variables substituted
2532 Retrieves property value by name with variable substitution. @param name property key @param defaultValue default value if property not found @return substituted property value or default
2533 Sets an optional key-value pair. @param key unique configuration key @param value associated value for the key @return current builder instance
2534 Adds a required key-value pair to the configuration. @param key unique configuration key @param value associated value for the key @return current builder instance for method chaining
2535 Sets default filesystem URI in configuration. @param conf Configuration object to update @param uri Default filesystem URI to set
2536 Adds a link to the configuration. @param conf Configuration object @param mountTableName name of the mount table @param src source path for the link @param target URI of the link target
2537 Sets a link merge slash configuration. @param conf Configuration object to update @param mountTableName name of the mount table @param target URI representing the target location
2538 Sets a fallback link in the configuration. @param conf Configuration object to update @param mountTableName name of the mount table @param target URI for the fallback link
2539 Sets link merge configuration for a table. @param conf Configuration object to update @param mountTableName name of the mounted table @param targets array of target URIs for merging
2540 Adds a link configuration for ViewFs. @param conf Configuration object to update @param mountTableName Name of the mount table @param src Source path for the link @param settings Additional settings for the link @param targets Target paths for the link
2541 Adds a regex-based link to configuration. @param conf Configuration object to update @param mountTableName Name of the mount table @param srcRegex Source regex pattern @param targetStr Target string for matching paths @param interceptorSettings Optional settings for interceptors
2542 Sets the home directory configuration for a given mount table. @param conf Configuration object to update @param mountTableName name of the mount table @param homedir home directory path (must start with '/')
2543 Sets the umask in the configuration. @param conf Configuration object to update @param umask File system permission for the umask
2544 Sets codec classes in configuration. @param conf Configuration object to update @param classes List of codec classes to set
2545 Sets default compression type for a job configuration. @param job Configuration object to modify @param val CompressionType value to set
2546 Retrieves proxy user configuration from FilterConfig. @param filterConfig the FilterConfig object containing initialization parameters @return Configuration object with proxyuser settings or empty if none found
2547 Parses command line arguments and initializes subcommands. @param args command line arguments array @return 0 on success, 1 on error
2548 Sets an integer value by name. @param name key for the value @param value integer to be stored
2549 Sets a property with a long value. @param name property name @param value long value to set
2550 Sets a named float value. @param name key for the value @param value float to be stored
2551 Sets a property with a double value. @param name property name @param value double value to be set
2552 Sets a boolean value by converting it to a string. @param name key for the value @param value boolean value to be stored
2553 Sets time duration with unit. @param name identifier for the time duration @param value numeric value of the duration @param unit TimeUnit enum representing the time unit
2554 Sets storage size with unit. @param name key for storage setting @param value numeric size value @param unit StorageUnit enum representing the unit
2555 Sets a named regex pattern. @param name unique identifier for the pattern @param pattern compiled regex pattern to store
2556 Sets a string value by combining multiple strings. @param name key under which to store the combined string @param values variable number of strings to concatenate
2557 Sets socket address by name. @param name key to identify the socket address @param addr InetSocketAddress object representing the address
2558 Sets a class mapping with validation. @param name key for the class mapping @param theClass class to be mapped @param xface interface that theClass must implement
2559 Deletes a directory and its contents recursively. @param dir directory to delete @return true if successful, false otherwise
2560 Recursively deletes all contents of a directory. @param dir directory to delete contents from @param tryGrantPermissions if true, attempts to grant permissions before deleting @return true if all contents are successfully deleted, false otherwise
2561 Lists file statuses in the specified directory. @param f path to the directory @return array of FileStatus objects @throws IOException if an I/O error occurs or directory does not exist
2562 Retrieves the status of a file link. @param f path to the file @return FileStatus object, or null if the file is a dangling symlink @throws IOException if an I/O error occurs
2563 Deletes a file or directory on an SFTP server. @param channel SFTP channel to operate on @param file path of the file or directory to delete @param recursive true to delete directories recursively @return true if deletion is successful, false otherwise @throws IOException if an I/O error occurs
2564 Creates a compressed input stream for reading. @param seekableIn the underlying seekable input stream @param decompressor the decompressor to use @param start the starting position in the stream @param end the ending position in the stream @param readMode the mode for reading data @return a SplitCompressionInputStream for reading @throws IOException if seekableIn is not Seekable or other I/O error occurs
2565 Adds metrics for fields annotated with @Metric. @param source object containing the fields @param field specific field to check for annotations
2566 Retrieves configuration value by storage type and key. @param conf Configuration object containing settings @param t StorageType indicating the category of configuration @param name Specific key for the configuration setting @return String value of the configuration or null if not found
2567 Retrieves the transfer mode from configuration. @param conf Configuration object @return Transfer mode as an integer, defaults to BLOCK_TRANSFER_MODE if invalid or not set
2568 Sets FTP client data connection mode based on configuration. @param client FTPClient instance to configure @param conf Configuration object containing settings @throws IOException if an I/O error occurs
2569 Retrieves home directory value from configuration. @param conf configuration object @param mountTableName name of the mount table @return home directory path as a string
2570 Retrieves the umask from configuration. @param conf Configuration object @return FsPermission object representing the umask
2571 Retrieves a list of CompressionCodec classes. @param conf Hadoop configuration object @return List of CompressionCodec classes configured in the system
2572 Retrieves default compression type from configuration. @param job Configuration object containing settings @return CompressionType enum, defaulting to RECORD if not specified
2573 Converts a security property to a formatted string. @param property the name of the security property @return formatted string with property and its value(s)
2574 Validates Hadoop token files from system properties or configuration. @param conf Hadoop configuration object @throws ClassNotFoundException if class not found @throws KerberosDiagsFailure on Kerberos diagnostic failure @throws NoSuchMethodException if method does not exist @throws SecurityException for security violations
2575 Loads a Java KeyStore from a file or creates an empty one if it doesn't exist. Sets the key store password and handles exceptions related to keystore operations.
2576 Retrieves local host name using configuration or system defaults. @param conf Configuration object containing DNS settings (optional) @return Local host name as a String @throws UnknownHostException if unable to determine the local host name
2577 Retrieves client principal from configuration. @param protocol class representing the security protocol @param conf configuration object containing security settings @return client principal string or null if not found
2578 Retrieves and trims the string value associated with a key. @param name key to look up in the map @return trimmed string value or null if key is not found
2579 Sets a value if it is not already set. @param name key for the value @param value to be set if not already present
2580 Retrieves time duration from configuration. @param name key for the configuration value @param defaultValue default time value if not found @param defaultUnit unit of the default time value @param returnUnit desired unit for the returned time duration @return time duration in specified units, or default value if config missing
2581 Retrieves storage size with default value and converts to target unit. @param name key for storage size configuration @param defaultValue default value if key is not found @param targetUnit desired unit for the result @return storage size in the specified target unit
2582 Retrieves storage size for a given name, converting to target unit. @param name the key to look up in storage @param defaultValue default value if not found @param targetUnit unit to convert the result to @return storage size in target units or default value
2583 Retrieves a compiled regex pattern by name, falling back to default if invalid. @param name property name of the regex pattern @param defaultValue pattern to use if named pattern is null or invalid @return compiled Pattern object or default value
2584 Retrieves and parses a collection of strings by key. @param name key to fetch the string collection @return parsed Collection of Strings or empty if not found
2585 Retrieves an array of strings by key. @param name key to fetch the string value @return array of strings or empty if not found
2586 Retrieves strings by name or returns default values. @param name key to fetch string array @param defaultValue default values if key not found @return array of strings from fetched value or default values
2587 Retrieves and trims a collection of strings by name. @param name key for the string collection @return trimmed collection of strings or empty list if null
2588 Retrieves and trims strings by key. @param name key to fetch string value @return array of trimmed strings or empty if none
2589 Retrieves and trims a string array by key. @param name key to fetch the string value @param defaultValue default values to return if none found @return trimmed strings or default values
2590 Retrieves properties with a specified prefix. @param confPrefix prefix to filter property names @return Map of filtered properties without the prefix
2591 Appends a JSON property to the generator. @param jsonGen JSON generator instance @param config configuration settings @param name property name @param redactor redactor for sensitive values @throws IOException if an I/O error occurs
2592 Reconfigures a property if reconfigurable. @param property the name of the property to reconfigure @param newVal the new value for the property @throws ReconfigurationException if property is not reconfigurable
2593 Retrieves and logs a configuration property. @param name the property name to retrieve @return the property value or null if not found
2594 Retrieves the default mount table name from configuration. @param conf Hadoop configuration object @return Default mount table name as a String
2595 Checks if the native bzip2 library is loaded. @param conf configuration object containing library settings @return true if native bzip2 is loaded, false otherwise
2596 Retrieves default socket factory from configuration. @param conf Hadoop configuration object @return SocketFactory instance based on configuration or default if not specified
2597 Retrieves username from configuration. @param conf Configuration object @return Username string or default if not found
2598 Prints configuration option value. @param option configuration key to print
2599 Initializes TruststoreKeystore with configuration settings. @param conf Configuration object containing SSL keystore and truststore details
2600 Spawns a thread to auto-renew Kerberos credentials. @param force whether to force renewal regardless of conditions
2601 Initializes a KeyProvider with the given configuration. Configures serial filter and adds Bouncy Castle provider if specified. @param conf Configuration object containing security settings
2602 Retrieves ZooKeeper ACLs from configuration. @param conf Hadoop Configuration object @return List of ACL objects @throws IOException if parsing fails
2603 Retrieves hash type from configuration. @param conf Configuration object @return Integer representing the hash type
2604 Retrieves an EnumSet from configuration. @param key configuration key @param enumClass Enum class type @param ignoreUnknown whether to ignore unknown values @return EnumSet of parsed enums or empty set if key not found
2605 Retrieves an IntegerRanges object based on a configuration key. @param name config key to fetch the value @param defaultValue default value if key is not found @return IntegerRanges object initialized with the fetched or default value
2606 Retrieves a configuration value with logging. @param name key for the configuration setting @param defaultValue default value if not found @return configuration value or default
2607 Retrieves an option value as a boolean. @param key unique identifier for the option @param value default boolean value if not found @return B object representing the option value
2608 Retrieves double value by key with default. @param key unique identifier for the value @param value default double value if not found @return B object containing the double value or default
2609 Adds a boolean condition with a specified key. @param key unique identifier for the condition @param value boolean value to be added @return current instance of B
2610 Validates and converts a double value to a string. @param key unique identifier for validation @param value the double value to be validated and converted @return B object with validation result
2611 Sets default URI in configuration. @param conf Configuration object to modify @param uri String representation of the URI
2612 Adds a link for Nfly replication. @param conf HBase configuration @param mountTableName table name to mount @param src source path @param settings replication settings (default if null) @param targets target URIs for replication
2613 Sets the index interval in the configuration. @param conf Configuration object to update @param interval new interval value
2614 Sets the IPC ping interval in the configuration. @param conf Configuration object to update @param pingInterval new ping interval value in milliseconds
2615 Sets the connection timeout in configuration. @param conf Configuration object to update @param timeout Timeout value in milliseconds
2616 Sets whether nested mount points are supported. @param conf configuration object @param isNestedMountPointSupported flag indicating support for nested mount points
2617 Adds an optional key with multiple string values. @param key the key to add @param values the string values associated with the key @return this builder instance
2618 Marks a key as mandatory and sets its string values. @param key the key to be marked as mandatory @param values one or more string values for the key @return this builder instance
2619 Updates and returns the connection address for a given name. @param name identifier for the connection @param addr new address to set @return updated InetSocketAddress
2620 Sets the RPC engine for a given protocol in configuration. @param conf Configuration object to update @param protocol Protocol class @param engine Engine class implementing RpcEngine
2621 Deletes a file or directory. @param p path to the file or directory @param recursive true to delete directories recursively @return true if deletion is successful, false otherwise @throws IOException if an I/O error occurs
2622 Deletes all contents of a directory recursively. @param dir directory to delete contents from @return true if successful, false otherwise
2623 Retrieves file status. @param f file path @return FileStatus object @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws IOException for other I/O errors
2624 Lists file statuses in a directory. @param f path to the directory @return array of FileStatus objects representing files and directories @throws AccessControlException if access is denied @throws FileNotFoundException if the directory does not exist @throws IOException on input/output errors
2625 Creates a new file with specified parameters. @param f file path @param overwrite flag to allow overwriting existing files @param bufferSize buffer size in bytes @param replication number of blocks to replicate @param blockSize block size in bytes @param progress progress callback @return FSDataOutputStream for writing data @throws IOException if an I/O error occurs
2626 Returns the file system permission mask. @return FsPermission object representing the umask
2627 Creates a BlockFactory based on the specified type. @param keyToBufferDir directory for key to buffer mapping @param configuration configuration settings @param name type of block factory (e.g., DATA_BLOCKS_BUFFER_ARRAY) @return BlockFactory instance or throws IllegalArgumentException if unsupported
2628 Initializes compression codecs from configuration. @param conf Hadoop configuration
2629 Retrieves trimmed string value or default if null. @param name key to fetch value @param defaultValue value to return if key is null @return trimmed string value or default
2630 Retrieves an integer value by name, defaulting to a specified value. @param name the key for the value to retrieve @param defaultValue the value to return if no valid integer is found @return parsed integer or default value
2631 Retrieves a long value by name, defaulting to a specified value. @param name key for the value @param defaultValue value to return if not found or invalid @return parsed long value or default if conversion fails
2632 Retrieves a long value from a string with binary prefix. @param name key to fetch the string value @param defaultValue default long value if conversion fails or key is not found @return parsed long value or default
2633 Retrieves a float value by name. @param name the key to look up the value @param defaultValue the default value to return if not found @return the parsed float or default value if parsing fails
2634 Retrieves a double value by key. @param name the key for the value @param defaultValue default value to return if key not found or conversion fails @return parsed double value or default if invalid or missing
2635 Retrieves a boolean value by name, returning a default if invalid. @param name the key for the boolean value @param defaultValue the default boolean value to return if not found or invalid @return the parsed boolean value or the default if invalid
2636 Retrieves a class by name, returning a default if not found. @param name the fully qualified class name @param defaultValue the class to return if name is null or invalid @return the Class object or defaultValue
2637 Sets a boolean value if it is unset. @param name key for the setting @param value boolean value to set
2638 Retrieves time duration with default and specified units. @param name key for time duration @param defaultValue default time value if not found @param unit primary time unit @return time duration in the specified unit or default value
2639 Retrieves SASL properties from configuration. @param conf Configuration object @param configKey key for QOP configuration @param defaultQOP default QualityOfProtection if not specified @return Map of SASL properties including QOP and server auth
2640 Converts string array to integer array. @param name key for fetching trimmed strings @return array of integers from parsed strings
2641 Retrieves an array of Class objects by name. @param name property key for class names @param defaultValue default classes if none found @return array of Class objects or default value
2642 Retrieves a file from a set of directories based on the path. @param dirsProp property name for directory list @param path relative file path @return File object if found or created, throws IOException otherwise
2643 Initializes a SerializationFactory with configurations. @param conf Configuration object containing serialization settings
2644 Retrieves configuration properties with a specified prefix. @param conf Configuration object containing all properties @param confPrefix Prefix to filter properties by @return Map of filtered properties
2645 Retrieves configuration properties with a specified prefix. @param conf Configuration object containing all settings @param confPrefix Prefix to filter property keys by @return Map of filtered properties with matching keys and values
2646 Propagates configuration options to a FSBuilder. @param builder the FSBuilder to configure @param conf the Configuration object containing properties @param prefix the property prefix to filter by @param mandatory whether properties are required or optional
2647 Prints configuration changes in a form for reconfiguration. @param out PrintWriter to output HTML @param reconf Reconfigurable object to fetch configurations from
2648 Adds a link to the default mount table. @param conf configuration object @param src source path @param target target URI
2649 Adds a link with a merged slash to configuration. @param conf Configuration object @param target Target URI
2650 Adds a fallback link to configuration. @param conf configuration object @param target URI of the target resource
2651 Adds link merge to configuration. @param conf Hadoop configuration object @param targets array of target URIs
2652 Sets home directory configuration. @param conf Hadoop configuration object @param homedir home directory path
2653 Retrieves home directory value from configuration. @param conf configuration object @return home directory path as a string
2654 Creates an encoder for erasure coding. @param conf configuration settings @param options erasure codec options @return ErasureEncoder object
2655 Creates an ErasureDecoder for the given configuration and options. @param conf Configuration object @param options ErasureCodecOptions specifying codec settings @return ErasureDecoder instance
2656 Returns the appropriate Bzip2 compressor class. @param conf configuration object @return Bzip2Compressor if native library is loaded, otherwise BZip2DummyCompressor
2657 Returns the appropriate Bzip2 decompressor class. @param conf configuration object @return Bzip2Decompressor if native library is loaded, otherwise BZip2DummyDecompressor
2658 Returns a Bzip2 decompressor based on configuration. @param conf Configuration object @return Decompressor instance, either native or dummy
2659 Retrieves a socket factory based on configuration. @param conf configuration object @param clazz class for which to find the socket factory @return SocketFactory instance or default if not specified
2660 Constructs a HadoopZookeeperFactory with specified principals and keytab. @param zkPrincipal Zookeeper principal @param kerberosPrincipal Kerberos principal @param kerberosKeytab Path to Kerberos keytab file
2661 Initializes SSL context and related components. @throws GeneralSecurityException if security setup fails @throws IOException if I/O error occurs during initialization
2662 Checks if authentication method is simple. @param conf configuration object @return true if authentication is simple, false otherwise
2663 Sets configuration for authentication rules. @param conf Configuration object containing security settings @throws IOException if Kerberos realm cannot be retrieved
2664 Retrieves an instance of CryptoCodec based on configuration and cipher suite. @param conf Configuration object @param cipherSuite Cipher suite to match @return CryptoCodec instance or null if none found
2665 Retrieves a Hash instance based on configuration. @param conf Configuration object containing hash settings @return Hash instance corresponding to configuration
2666 Builds a FlagSet from configuration. @param enumClass type of enum for the flag set @param conf configuration source @param key configuration key prefix @param ignoreUnknown whether to ignore unknown values @return FlagSet containing parsed enum flags
2667 Writes XML representation of a property to a Writer. @param propertyName name of the property to write or null for all properties @param out Writer to output the XML @param config Configuration object (optional) @throws IOException if an I/O error occurs @throws IllegalArgumentException if invalid arguments are provided
2668 Dumps configuration properties to a JSON writer. @param config Configuration object to be dumped @param out Writer to output the JSON data @throws IOException if an I/O error occurs during writing
2669 Retrieves a long value associated with a key. @param key the key to look up @param value default value if key not found @return the long value or default if key is null or missing
2670 Retrieves long value for a key, defaulting to float cast. @param key unique identifier for the value @param value default float value if key not found @return B object with long value or default
2671 Retrieves an optional long value for a given key, defaulting to a specified double. @param key unique identifier for the value @param value default double value if key is not found @return B object with the retrieved or default value
2672 Ensures a condition is met by delegating to mustLong. @param key unique identifier for the condition @param value integer value to check @return result of mustLong method
2673 Creates a MetricsSource from an object. @param source object to extract metrics from @return MetricsSource instance built from the source
2674 Creates a new file with specified parameters. @param f file path @param overwrite if true, existing files are overwritten @param bufferSize buffer size for data transfer @param replication number of block replicas @param blockSize block size in bytes @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
2675 Creates a file with specified flags and options. @param f path to the file @param createFlag flags for file creation @param opts additional options for file creation @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
2676 Creates a directory with specified permissions. @param dir the path of the directory to create @param permission the permissions for the new directory @param createParent whether to create parent directories if they don't exist @throws IOException if an I/O error occurs
2677 Main method to compress or decompress files based on command-line arguments. @param args command-line arguments: -in for encoding, -out for decoding, and file paths
2678 Constructs server principal from configuration. @param principalConfig configuration string for the principal @param hostname server's hostname @return constructed principal or original config if invalid @throws IOException on I/O errors
2679 Retrieves server principal by replacing hostname pattern. @param principalConfig configuration string for the principal @param addr IP address of the client @return modified principal string or original if no replacement is needed @throws IOException if client address is null or resolution fails
2680 Registers an RPC protocol and its implementation. @param rpcKind type of RPC kind @param protocolClass class representing the protocol @param protocolImpl instance implementing the protocol @return current Server instance
2681 Creates a KeyProvider using configuration settings. @param conf Configuration object containing key provider details @param configKeyName Name of the configuration key for the key provider URI @return KeyProvider instance or null if URI is invalid @throws IOException if an error occurs during creation
2682 Retrieves the default file system URI from configuration. @param conf Configuration object containing file system settings @return Default FileSystem URI with a valid scheme @throws IllegalArgumentException if no scheme is present in the URI
2683 Validates Kerberos kinit executable path. Prints and checks if the executable is valid.
2684 Retrieves socket address for a given service. @param name service name @param defaultAddress fallback IP address @param defaultPort fallback port number @return InetSocketAddress object
2685 Updates connection address using specified properties. @param hostProperty property name for host configuration @param addressProperty property name for address configuration @param defaultAddressValue default address value if not found @param addr original socket address @return updated InetSocketAddress or result of fallback logic
2686 Builds and returns a CompletableFuture for opening a file with specified parameters. @return CompletableFuture of FSDataInputStream @throws IOException if an I/O error occurs
2687 Builds and opens a file stream with specified parameters. @return CompletableFuture of FSDataInputStream for the file @throws IOException if an I/O error occurs
2688 Sets configuration from URI. @param uriInfo URI containing host, port, and user info @param conf Configuration object to update @throws IOException if required information is missing
2689 Establishes an SFTP connection using configuration settings. @return connected ChannelSftp object @throws IOException if connection fails
2690 Initializes buffer size from file system configuration.
2691 Opens an input stream for the specified file path. @param f file path to open @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2692 Opens a file input stream using the specified path handle. @param fd PathHandle of the file to open @return FSDataInputStream for reading from the file @throws IOException if an I/O error occurs
2693 Appends data to a file. @param f file path @return FSDataOutputStream for appending @throws IOException if an I/O error occurs
2694 Appends data to a file. @param f file path @param appendToNewBlock flag to append to a new block @return FSDataOutputStream for appending
2695 Initializes the cache with configuration settings. @param conf Configuration object containing parallel count setting
2696 Initializes a Sorter with specified configuration. @param fs FileSystem instance @param comparator RawComparator for key comparison @param keyClass Class of the sort keys @param valClass Class of the values to be sorted @param conf Configuration settings @param metadata Metadata associated with sorting
2697 Creates a compression output stream. @param out underlying output stream @param compressor compressor to use @return CompressionOutputStream for writing compressed data
2698 Creates a compression input stream using the specified decompressor. @param in input stream to be compressed @param decompressor decompressor to use for decompression @return CompressionInputStream for reading decompressed data @throws IOException if an I/O error occurs
2699 Creates an LZ4 decompressor with configured buffer size. @return Lz4Decompressor instance initialized with bufferSize
2700 Creates a compression output stream. @param out underlying output stream @param compressor compressor to use @return CompressionOutputStream for writing compressed data @throws IOException if an I/O error occurs
2701 Creates a compression input stream for reading bzip2 files. @param in the input stream to read from @param decompressor the decompressor to use @return CompressionInputStream for reading compressed data
2702 Creates a compression output stream. @param out the underlying output stream @param compressor the compressor to use @return CompressionOutputStream configured with Snappy settings @throws IOException if an I/O error occurs
2703 Creates a Snappy compressor with configured buffer size. @return SnappyCompressor instance
2704 Creates a compressed input stream. @param in input stream to be compressed @param decompressor decompressor for the compression @return CompressionInputStream for reading compressed data
2705 Creates a Snappy decompressor with configured buffer size. @return SnappyDecompressor instance
2706 Copies bytes from input stream to output stream with buffer size configuration. @param in source InputStream @param out destination OutputStream @param conf Configuration object containing buffer size settings
2707 Copies bytes from input stream to output stream. @param in source InputStream @param out destination OutputStream @param conf configuration object @param close flag to close streams after copy
2708 Retrieves buffer size from configuration. @param conf Configuration object @return Buffer size as integer
2709 Sets configuration and initializes script settings. @param conf Configuration object containing script details
2710 Retrieves buffer size from configuration. @param conf Configuration object @return Buffer size integer value
2711 Parses the number of priority levels from configuration. @param ns namespace prefix for configuration keys @param conf Configuration object @return parsed number of levels, at least 1
2712 Retrieves RPC timeout from configuration. @param conf Configuration object @return Timeout value in milliseconds
2713 Retrieves ping interval from configuration. @param conf Configuration object @return Ping interval in milliseconds, default if key not found
2714 Retrieves the RPC timeout from configuration. @param conf Configuration object @return Timeout in milliseconds, defaulting to 0 if negative or not set
2715 Constructs a LineReader with the specified input stream and configuration. @param in input stream to read from @param conf configuration containing buffer size settings @throws IOException if an I/O error occurs
2716 Initializes a LineReader with the given input stream and configuration. @param in InputStream to read from @param conf Configuration object for buffer size @param recordDelimiterBytes Byte array representing the record delimiter @throws IOException if an I/O error occurs
2717 Retrieves integer value by name with logging. @param name key for the integer value @param defaultValue default value if not found @return retrieved integer value or default
2718 Sets FTP client timeout from configuration. @param client FTPClient instance to configure @param conf Configuration object containing settings
2719 Retrieves a long value from options by key. @param key option key @param defVal default value if key is empty or invalid @return long value or default if not found or invalid
2720 Returns the default block size. @return Block size in bytes, defaults to 32MB
2721 Retrieves a long value by name with logging. @param name key for the value to retrieve @param defaultValue default value if not found @return retrieved long value or default
2722 Retrieves a float value by name with logging. @param name key for the float value @param defaultValue default value if not found @return retrieved float value or default if not found
2723 Initializes trash settings from configuration. @param conf Hadoop configuration object @param fs FileSystem instance @param home Path to home directory
2724 Checks if nested mount points are supported. @param conf configuration object @return true if supported, false otherwise
2725 Creates an LZ4 compressor. @return Lz4Compressor instance configured with buffer size and HC setting
2726 Retrieves a multiple linear random retry policy from configuration. @param conf configuration object @param retryPolicyEnabledKey key for enabling the retry policy @param defaultRetryPolicyEnabled default value for retry policy enabled @param retryPolicySpecKey key for retry policy specification @param defaultRetryPolicySpec default retry policy specification @return RetryPolicy object or null if not enabled or invalid spec
2727 Adds default web applications for logs and static resources. @param parent parent context handler collection @param appDir directory containing application resources @param conf configuration settings @throws IOException if an I/O error occurs
2728 Adds default servlets to the configuration. @param configuration Configuration object for setting up servlets
2729 Retrieves server failover enable status from configuration. @param namespace configuration namespace @param conf Configuration object @return boolean value of server failover enable or default if not found
2730 Initializes a new Client instance with configuration settings. @param valueClass the class type for writable values @param conf Hadoop configuration object @param factory socket factory for creating network connections
2731 Deprecated method to check client backoff enabled status. @param prefix configuration key prefix @param conf Configuration object @return boolean indicating if backoff is enabled
2732 Checks if client backoff is enabled for a namespace and port. @param namespace configuration namespace @param port service port number @param conf Configuration object @return true if backoff is enabled, false otherwise
2733 Retrieves password from configuration. @param name key for the password in config @return char array of password or null if not found
2734 Retrieves a boolean configuration property. @param name the property name @param defaultValue the default boolean value if not set @return the boolean value of the property or default
2735 Retrieves the FileSystem class for a given scheme. @param scheme URI scheme for the filesystem @param conf configuration object (can be null) @return FileSystem implementation class @throws IOException if no FileSystem is found for the scheme
2736 Creates a file system instance from the given URI and configuration. @param uri filesystem URI @param conf configuration settings @return AbstractFileSystem object @throws UnsupportedFileSystemException if unsupported scheme or class not found
2737 Retrieves the call queue class for a given namespace and port. @param namespace configuration namespace @param port service port @param conf configuration object @return Class representing the blocking queue implementation
2738 Retrieves RPC scheduler class based on configuration. @param namespace configuration namespace @param port service port @param conf configuration object @return RpcScheduler class or default if not specified
2739 Retrieves a class by name, ensuring it implements a specified interface. @param name class name to retrieve @param defaultValue default class if not found @param xface interface the class must implement @return subclass of U or null if not found
2740 Retrieves or creates a FileSystem instance for given URI and configuration. @param uri the URI of the file system @param conf configuration settings @param key unique identifier for the file system @return FileSystem object, possibly newly created @throws IOException if an I/O error occurs
2741 Retrieves shutdown timeout from configuration. @param conf Configuration object @return Shutdown timeout in milliseconds, minimum is TIMEOUT_MINIMUM
2742 Retrieves password for a given name from credential providers. @param name the identifier of the credential to retrieve @return character array containing the password, or null if not found @throws IOException if an I/O error occurs during retrieval
2743 Parses capacity weights from configuration. @param priorityLevels number of priority levels @param ns namespace for configuration key @param conf configuration object @return array of parsed capacity weights
2744 Retrieves filter initializers from configuration. @param conf Configuration object @return Array of FilterInitializer objects or null if config is invalid
2745 Retrieves instances of a specified class by name. @param name the name to identify classes @param xface the interface or superclass that retrieved classes must implement @return a list of instances implementing the specified interface/class
2746 Initializes a writer with specified configuration and output stream. @param config Hadoop configuration settings @param outStream FSDataOutputStream for writing data @param ownStream flag indicating if the stream is owned by this instance @param key Class of the key objects @param val Class of the value objects @param compCodec Compression codec to use @param meta Metadata associated with the writer @param syncIntervalVal Interval for synchronization operations @throws IOException if initialization fails or serializers are not found
2747 Deprecated method to propagate options from configuration. @param builder FSBuilder instance @param conf Configuration object @param prefix option prefix @param mandatory flag for mandatory options
2748 Propagates configuration options to FSBuilder. @param builder FSBuilder instance to configure @param conf Configuration source @param optionalPrefix prefix for optional properties @param mandatoryPrefix prefix for mandatory properties @return configured FSBuilder instance
2749 Checks availability of native libraries and prints results. @param args command-line arguments: -a for all checks, -h for help
2750 Returns the compressor type configured for BZIP2 compression. @return Class representing the BZIP2 compressor type
2751 Returns the decompressor type for Bzip2. @return Class of Bzip2 decompressor
2752 Creates a Bzip2 decompressor. @return Decompressor instance configured with provided settings
2753 Constructs a HadoopZookeeperFactory with specified principal. @param zkPrincipal Zookeeper principal string
2754 Looks up groups for a given search result. @param result the search result containing user information @param c the directory context for LDAP operations @param goUpHierarchy flag indicating whether to traverse group hierarchy @return set of group names associated with the user @throws NamingException if an error occurs during LDAP operations
2755 Retrieves a CryptoCodec instance based on the configuration. @param conf Configuration object containing cipher suite settings @return CryptoCodec instance initialized with the specified cipher suite
2756 Binds a server socket to an address with a specified backlog. @param socket the ServerSocket to bind @param address the InetSocketAddress to bind to @param backlog maximum length of the pending connection queue
2757 Dumps configuration property to a Writer. @param config Configuration object @param propertyName Property name to dump @param out Writer for output @throws IOException if an I/O error occurs
2758 Creates directories with optional permissions. @param f path of the directory to create @return true if created successfully, false otherwise
2759 Retrieves the server's Kerberos principal based on authentication type. @param authType SaslAuth object containing protocol and server ID @return Server Kerberos principal string or null if not supported @throws IOException if there is an issue fetching Kerberos info
2760 Decodes a HAR URI to its base URI. @param rawURI the original HAR URI @param conf configuration settings @return decoded base URI or default file system URI if authority is null @throws IOException if URI format is invalid
2761 Retrieves FileSystem instance for default URI. @param conf configuration settings @return FileSystem object @throws IOException if an I/O error occurs
2762 Initializes the file system with a given URI and configuration. @param name URI of the file system to initialize @param conf configuration settings for the file system @throws IOException if an I/O error occurs during initialization
2763 Creates a new FileSystem instance. @param conf configuration settings @return FileSystem object configured with given settings @throws IOException if an I/O error occurs
2764 Validates if the given path matches the file system's URI. @param path the path to validate @throws IllegalArgumentException if the path does not match
2765 Retrieves socket address with optional host override. @param hostProperty property key for host @param addressProperty property key for address @param defaultAddressValue default address if not specified @param defaultPort default port number @return InetSocketAddress object
2766 Creates a file with specified permissions and settings. @param f file path to create @param permission file permissions @param overwrite flag to overwrite existing file @param bufferSize buffer size for output stream @param replication replication factor @param blockSize block size @param progress progressable object @return FSDataOutputStream for writing data @throws IOException if an I/O error occurs
2767 Constructs a FutureDataInputStreamBuilderImpl with given file system and path. @param fileSystem the file system to use @param path the path to initialize from
2768 Initializes with a file system and path handle. @param fileSystem the file system to use @param pathHandle the path handle for the file
2769 Opens a file using the specified instance and filesystem. @param instance DynamicWrappedIO instance for file operations @param fs FileSystem to use for opening the file @param status FileStatus of the file to open @param readPolicies Read policies for optimized file access @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2770 Checks if appending to the file system is supported. @param fs FileSystem object to check @return true if append operation is supported, false otherwise
2771 Initializes a Sorter with specified parameters. @param fs FileSystem instance @param comparator RawComparator for sorting keys @param keyClass Class of the sort keys @param valClass Class of the values @param conf Configuration settings
2772 Constructs a Bzip2Compressor with configuration settings. @param conf Configuration object containing compression parameters
2773 Reinitializes the compressor with a new configuration. @param conf configuration settings for compression
2774 Initializes SequenceFile reader. @param tempReader flag indicating temporary reader status @throws IOException if file read fails or format is incorrect
2775 Reinitializes the compressor with a new configuration. @param conf Configuration object containing settings
2776 Prepares to append a value. @param length expected length of the value; if negative, uses buffer @return DataOutputStream for appending value @throws IOException on I/O errors
2777 Initializes a WBlockState with given parameters. @param compressionAlgo the compression algorithm to use @param fsOut file system output stream @param fsOutputBuffer buffer for file system output @param conf configuration settings @throws IOException if an I/O error occurs
2778 Sets configuration for the current instance and its raw mapping. @param conf Configuration object to be set
2779 Sets configuration and initializes script name. @param conf Configuration object to be set
2780 Creates an Options instance using the provided configuration. @param conf Configuration object to initialize Options @return Options instance initialized with the given configuration
2781 Retrieves the RPC timeout from configuration. @param conf Configuration object @return Timeout value in milliseconds, or -1 if not set
2782 Establishes an FTP connection using configuration settings. @return connected FTPClient instance @throws IOException if connection fails
2783 Retrieves positive long value for a given key. @param key configuration key @param defVal default value if key is not found or has negative value @return positive long value or default if negative
2784 Retrieves default server settings. @return FsServerDefaults object with configured values @throws IOException if configuration retrieval fails
2785 Returns the default block size. @param f file path (not used) @return default block size in bytes
2786 Reports a checksum failure by moving the corrupted file to a backup directory. @param p path to the corrupted file @param in input stream of the corrupted file @param inPos position in the input stream @param sums input stream of the checksum file @param sumsPos position in the checksum stream @return always false, indicating failure
2787 Constructs a new instance using a Builder. @param builder configuration for caching space used retrieval @throws IOException if an I/O error occurs during construction
2788 Reads the next record from the sequence file. @param buffer output buffer to store the record data @return length of the key in bytes, or -1 if end of file is reached @throws IOException if an I/O error occurs or block compression is used
2789 Retrieves default retry policy based on configuration. @param conf Configuration object @param retryPolicyEnabledKey Key for enabling retry policy @param defaultRetryPolicyEnabled Default retry policy enabled status @param retryPolicySpecKey Key for retry policy specification @param defaultRetryPolicySpec Default retry policy specification @param remoteExceptionToRetry RemoteException class to retry on @return RetryPolicy object or TRY_ONCE_THEN_FAIL if none configured
2790 Constructs a Client with specified value class and configuration. @param valueClass type of writable objects to handle @param conf Hadoop configuration settings
2791 Retrieves a cached or new client instance. @param conf configuration settings @param factory socket factory for connections @param valueClass class type for writable values @return Client object from cache or newly created
2792 Excludes incompatible credential providers from configuration. @param config original Configuration object @param fileSystemClass FileSystem class to check compatibility against @return new Configuration with incompatible providers removed
2793 Retrieves an abstract file system for a given URI and configuration. @param uri the target URI @param conf the configuration settings @return AbstractFileSystem instance @throws UnsupportedFileSystemException if the URI scheme is unsupported
2794 Builds a Server instance. @throws IOException if an I/O error occurs @throws HadoopIllegalArgumentException if required fields are not set
2795 Creates a TrashPolicy instance. @param conf configuration settings @param fs file system reference @param home home directory path @return configured TrashPolicy object
2796 Retrieves the appropriate TrashPolicy instance. @param conf configuration settings @param fs file system reference @return configured TrashPolicy object
2797 Creates a new instance of DomainNameResolver based on configuration. @param conf Configuration object containing settings @param configKey Key to retrieve resolver class from configuration @return New DomainNameResolver instance
2798 Retrieves an instance of SaslPropertiesResolver from configuration. @param conf Configuration object containing resolver class information @return Instance of configured SaslPropertiesResolver or default if not specified
2799 Validates and resolves SASL properties. @param saslPropsResolverKey key for SASL property resolver
2800 Retrieves an instance of ImpersonationProvider. @param conf configuration object @return configured ImpersonationProvider instance
2801 Shuts down the executor gracefully with a timeout. @param conf configuration settings
2802 Retrieves password for a given username. @param name the username @return character array of the password or null if not found @throws IOException if an I/O error occurs
2803 Creates a raw erasure encoder. @param conf configuration settings @param codec codec name @param coderOptions options for the erasure coder @return RawErasureEncoder instance
2804 Creates a raw erasure decoder with fallback options. @param conf configuration settings @param codec erasure codec name @param coderOptions options for the erasure coder @return RawErasureDecoder instance
2805 Swaps the current RPC queue with a new one. @param schedulerClass class of the new scheduler @param queueClassToUse class of the new blocking queue @param maxSize maximum size of the new queue @param ns namespace for configuration @param conf configuration object
2806 Initializes a FairCallQueue with specified parameters. @param priorityLevels number of priority levels @param capacity total queue capacity @param ns namespace for logging and metrics @param capacityWeights weights for each queue's capacity @param serverFailOverEnabled flag to enable failover @param conf configuration settings
2807 Stores an item in a configuration with a specified key. @param conf Configuration object to store the item @param item Item to be stored @param keyName Key under which the item is stored @throws IOException if an I/O error occurs during storage
2808 Loads a configuration value by key and converts it to the specified class. @param conf Configuration object @param keyName key for the configuration value @param itemClass class type of the configuration value @return instance of the specified class or null if not found @throws IOException if an I/O error occurs
2809 Stores an array of items in the configuration. @param conf Configuration object to store data @param items Array of items to store @param keyName Key under which to store the items @throws IOException if an I/O error occurs
2810 Loads an array from configuration by key. @param conf Configuration object @param keyName key for the array in config @param itemClass class of array items @return array of deserialized objects or empty if not found
2811 Initializes a Writer for writing to a file. @param fs FileSystem instance @param conf Configuration settings @param name Path of the file to write @param keyClass Class type for keys @param valClass Class type for values @param bufferSize Size of buffer @param replication Replication factor @param blockSize Block size @param progress Progressable object @param metadata Metadata for the file @throws IOException if an I/O error occurs
2812 Copies data from source to destination using serialization. @param conf configuration for serialization @param src source object to copy from @param dst destination object to copy to @return copied destination object @throws IOException if an I/O error occurs during copying
2813 Propagates options from configuration to the builder. @param <T> type of the FSBuilder @param <U> subtype of FSBuilder @param builder FSBuilder instance @param conf Configuration object @param optionalPrefix prefix for optional properties @param mandatoryPrefix prefix for mandatory properties @return FSBuilder with propagated options
2814 Retrieves groups for a given user. @param user username to search for @param goUpHierarchy number of levels to traverse up the hierarchy @return set of group names or empty if none found @throws NamingException if LDAP operations fail
2815 Writes configuration property to output in specified format. @param conf Configuration object @param out Writer for output @param format Output format ("json" or "xml") @param propertyName Property name to write @throws IOException on I/O error @throws IllegalArgumentException if invalid arguments @throws BadFormatException if unsupported format
2816 Initializes authentication filter in the given container. @param container FilterContainer to add the filter to @param conf Configuration object containing filter settings
2817 Creates a SASL client for authentication. @param authType type of authentication method @return SaslClient object or null if not applicable @throws SaslException if SASL creation fails @throws IOException if I/O error occurs
2818 Creates a FileSystem instance for a given URI and configuration. @param uri the uniform resource identifier of the file system @param conf the configuration settings for the file system @return a FileSystem object initialized with the provided URI and configuration @throws IOException if an I/O error occurs during initialization
2819 Initializes the ViewFileSystem with given URI and configuration. @param theUri the base URI for the file system @param conf the configuration settings @throws IOException if initialization fails
2820 Initializes the file system with a given URI and configuration. @param name URI of the file system @param conf configuration settings for initialization @throws IOException if an I/O error occurs during initialization
2821 Qualifies a given path. @param path the path to qualify @return qualified Path object
2822 Resolves and returns the path of a given file. @param p the input file path @return the resolved file path @throws IOException if an I/O error occurs
2823 Validates file system path. @param path file path to validate
2824 Initializes AvroFSInput with file context and path. @param fc FileContext for file operations @param p Path to the file @throws IOException if an I/O error occurs
2825 Copies a file or directory from source to destination. @param src source path @param dst destination path @param deleteSource flag to delete source after copy @param overwrite flag to overwrite existing files @return true if operation is successful, false otherwise @throws IOException various I/O exceptions
2826 Constructs an FSDataInputStreamBuilder. @param fileSystem the FileSystem to use @param path the Path to read from
2827 Initializes an FSDataInputStreamBuilder. @param fileSystem the filesystem to use @param pathHandle the path handle for the input stream
2828 Opens a file using specified policies. @param fs FileSystem instance @param status FileStatus object @param readPolicies policies for reading the file @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2829 Attempts to load file system permissions from a primary or backup path. @param path primary path to load permissions @param backupPath fallback path if the primary fails @return FsPermission object or null if both paths fail @throws NoSuchAlgorithmException if cryptographic algorithm is unavailable @throws CertificateException if certificate handling fails @throws IOException if an I/O error occurs
2830 Initializes a Sorter with specified FileSystem and configuration. @param fs the FileSystem to use @param keyClass the class of the keys to be sorted @param valClass the class of the values associated with the keys @param conf the Configuration object for sorting settings
2831 Returns a Bzip2 compressor. @param conf configuration settings @return Bzip2Compressor if native library is loaded, otherwise BZip2DummyCompressor
2832 Initializes the input stream for reading. @param filename path to the file @param in input stream to read from @param start starting position in the file @param length number of bytes to read @param conf configuration settings @param tempReader flag indicating if it's a temporary reader @throws IOException if an I/O error occurs
2833 Creates a compressed output stream. @param out underlying output stream @param compressor compression algorithm to use @return CompressionOutputStream for writing compressed data @throws IOException if an I/O error occurs
2834 Creates a ZStandard compressor. Checks if native code is loaded and initializes with configuration settings. @return ZStandardCompressor instance
2835 Creates a compression input stream. @param in the input stream to be compressed @param decompressor the decompressor to use @return a CompressionInputStream for reading compressed data @throws IOException if an I/O error occurs
2836 Creates a decompressor instance. Checks if native code is loaded and returns a ZStandard decompressor. @return ZStandardDecompressor object
2837 Prepares a new data block for writing. @return BlockAppender instance for the new block @throws IOException if I/O error occurs
2838 Constructs a new ScriptBasedMapping with the given configuration. @param conf Configuration object to be set
2839 Sets configuration and propagates it to raw mapping. @param conf Configuration object to be set
2840 Parses command-line arguments and initializes subcommands. @param args command-line arguments array @return 0 on success, 1 on error
2841 Creates a ConnectionId for IPC communication. @param addr socket address of the server @param protocol class representing the protocol @param ticket user group information for authentication @param rpcTimeout timeout for RPC calls in milliseconds @param connectionRetryPolicy retry policy for establishing connections @param conf configuration settings @return ConnectionId object configured with provided parameters @throws IOException if an I/O error occurs during configuration
2842 Creates a file on the FTP server. @param file path of the file to create @param permission file permissions @param overwrite flag to overwrite existing file @param bufferSize buffer size for data transfer @param replication replication factor (not used) @param blockSize block size (not used) @param progress progressable object (not used) @return FSDataOutputStream for writing the file @throws IOException if an I/O error occurs
2843 Retrieves server defaults. @param p file system path (unused in current implementation) @return FsServerDefaults object @throws IOException if an I/O error occurs
2844 Creates a new file output stream. @param f file path @param overwrite flag to overwrite existing file @return FSDataOutputStream for writing data @throws IOException if an I/O error occurs
2845 Creates a file output stream for writing. @param f file path to be created @param progress monitor for write progress @return FSDataOutputStream for writing data @throws IOException if an I/O error occurs
2846 Creates a new file output stream. @param f path to the file @param replication desired block replication factor @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
2847 Creates a new file with specified replication and buffer size. @param f file path to create @param replication number of replicas for the file @param progress progress monitor for the operation @return FSDataOutputStream for writing to the file
2848 Creates a file output stream. @param f path to the file @param overwrite true if existing file should be overwritten @param bufferSize size of buffer for data transfer @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
2849 Creates a file output stream for writing data. @param f path to the file @param overwrite flag to allow overwriting existing files @param bufferSize size of the buffer used for writing @param progress callback for reporting write progress @return FSDataOutputStream for writing data to the file @throws IOException if an I/O error occurs
2850 Initializes a FSDataOutputStreamBuilder with the given FileSystem and Path. @param fileSystem the FileSystem to use @param p the Path where data will be written
2851 Reads the next key from input. @param key Writable object to store the read key @return true if successful, false if no more keys @throws IOException on I/O errors or invalid key class
2852 Reads the next key from the input stream. @param key optional key to check class compatibility @return the next deserialized key or null if no more keys @throws IOException if an I/O error occurs or key class is incorrect
2853 Initializes an Invoker for a given protocol and connection. @param protocol the protocol class to use @param connId unique connection identifier @param conf configuration settings @param factory socket factory for communication @param alignmentContext context for data alignment
2854 Retrieves a client instance configured with the given settings. @param conf configuration object containing client settings @return Client instance initialized with provided configuration
2855 Retrieves a client with specified configuration and socket factory. @param conf Configuration settings for the client @param factory SocketFactory used to create network connections @return Client instance configured with provided settings
2856 Initializes an Invoker instance for a given protocol and connection. @param protocol the protocol class @param connId unique connection identifier @param conf configuration settings @param factory socket factory for connections @param alignmentContext context for data alignment
2857 Checks if a specific RPC method is supported. @param rpcProxy the RPC proxy object @param protocol the interface class of the protocol @param rpcKind the kind of RPC @param version the version to check @param methodName the name of the method @return true if the method is supported, false otherwise @throws IOException if an I/O error occurs
2858 Initializes a new Trash instance. @param fs FileSystem object representing the file system @param conf Configuration object for trash settings @throws IOException if an I/O error occurs during initialization
2859 Returns an instance of NetworkTopology. @param conf configuration settings @return NetworkTopology object using InnerNodeImpl.FACTORY
2860 Initializes a new SaslRpcClient instance. @param ugi UserGroupInformation object for authentication @param protocol Class representing the RPC protocol @param serverAddr InetSocketAddress of the server to connect to @param conf Configuration settings for SASL properties
2861 Refreshes super user groups configuration. @param conf Configuration object @param proxyUserPrefix prefix for proxy users
2862 Adds a shutdown hook with a specified priority. @param shutdownHook the task to run on shutdown @param priority execution priority of the hook
2863 Retrieves password string from configuration. @param conf Configuration object @param name Key for the password @return Password as a string or null if not found @throws IOException if an I/O error occurs
2864 Retrieves a password from configuration or returns a default value. @param conf Configuration object containing passwords @param alias Key for the password in the configuration @param defaultPass Default password to use if not found @return Retrieved password or default if an exception occurs
2865 Retrieves ZooKeeper authentication information. @param conf configuration object @param configKey key for authentication configuration @return list of ZKAuthInfo objects or empty list if none found @throws IOException if reading fails
2866 Initializes a DecayRpcScheduler with specified configuration. @param numLevels number of priority levels @param ns namespace for configuration @param conf configuration settings
2867 Clones a writable object. @param <T> type extending Writable @param orig original writable object to clone @param conf configuration for cloning process @return cloned instance of T
2868 Writes XML to an output stream using UTF-8 encoding. @param out the output stream to write to @throws IOException if an I/O error occurs
2869 Selects a suitable SASL authentication method. @param authTypes list of available authentication types @return selected SaslAuth object or null if none applicable @throws SaslException, AccessControlException, IOException on failure
2870 Constructs an FtpFs instance. @param theUri FTP URI @param conf configuration settings @throws IOException if connection fails @throws URISyntaxException if URI is invalid
2871 Initializes a RawLocalFs instance. @param theUri file system URI @param conf configuration settings @throws IOException if initialization fails @throws URISyntaxException if URI is invalid
2872 Initializes the object with the given URI and configuration. @param name the URI to initialize with @param conf the configuration settings @throws IOException if an I/O error occurs during initialization
2873 Initializes a MultipartUploaderBuilderImpl with given filesystem and path. @param fileSystem the FileSystem instance @param p the Path to be used
2874 Initializes a PathData object with file system details. @param fs FileSystem instance @param pathString path as string @param stat FileStatus object @throws IOException if an I/O error occurs
2875 Checks if a path has a specific capability. @param path file system path to check @param capability capability to verify @return true if path supports capability, false otherwise
2876 Returns the root path of the given file path. @param path the input file path @return the root path as a Path object @throws IOException if an I/O error occurs
2877 Makes a path fully qualified with an optional scheme swap. @param path the input path to qualify @return fully qualified Path, possibly with swapped scheme
2878 Retrieves FileStatus for a given path, optionally following symlinks. @param item PathData object containing the path and filesystem info @param depth current recursion depth @return FileStatus of the path or symlink target if followed @throws IOException on I/O errors
2879 Converts a relative path to an absolute path. @param path the input path, may be relative or absolute @return the full absolute path
2880 Copies a file from source to destination. @param src source file path @param dst destination file path @return true if copy is successful, false otherwise
2881 Creates a builder for FSDataInputStream. @param fileSystem the FileSystem instance @param path the Path to read from @return FSDataInputStreamBuilder object
2882 Creates a builder for FSDataInputStream. @param fileSystem the file system to operate on @param pathHandle the path handle for the data input stream @return FSDataInputStreamBuilder instance
2883 Loads file permissions from _NEW or _OLD paths; initializes keystore if needed. @param oldPath path to the old file @param newPath path to the new file @return FsPermission object representing file permissions
2884 Creates a Bzip2 compressor using provided configuration. @return Compressor instance configured with given settings
2885 Retrieves a meta block by name. @param name the name of the meta block @return a BlockReader for the specified meta block @throws IOException if an I/O error occurs @throws MetaBlockDoesNotExist if the meta block does not exist
2886 Retrieves a data block by index. @param blockIndex the index of the block to retrieve @return BlockReader for the specified block @throws IOException if an I/O error occurs @throws IndexOutOfBoundsException if blockIndex is out of range
2887 Closes the data writer, finalizing block writes and flushing output. Throws IllegalStateException if close is called with an active block appender.
2888 Prepares a meta block with specified name and compression. @param name block identifier @param compressionName type of compression to apply @return BlockAppender for the meta block @throws IOException if I/O error occurs @throws MetaBlockAlreadyExists if block already exists
2889 Prepares a meta block with default compression. @param name block identifier @return BlockAppender for the meta block @throws IOException if an I/O error occurs @throws MetaBlockAlreadyExists if block already exists
2890 Initializes data block with a new appender. @throws IOException if an I/O error occurs
2891 Creates a new file output stream for writing data to a specified path. @param f the path of the file to be created @return an FSDataOutputStream for writing data @throws IOException if an I/O error occurs
2892 Creates a log file with unique name. @param initial base file path @throws IOException if file creation fails
2893 Creates or appends to a log file. @param targetFile path of the log file @throws IOException if file operations fail
2894 Saves an instance to a specified file system path. @param fs FileSystem where the data will be saved @param path Path to the file where the instance will be stored @param instance Object to save as JSON @param overwrite Flag indicating if existing files should be overwritten @throws IOException if I/O operations fail
2895 Initializes a Writer with specified parameters. @deprecated Use alternative constructor instead. @param fs FileSystem instance @param conf Configuration settings @param name Path to the file @param keyClass Class type for keys @param valClass Class type for values @param progress Progressable object @param metadata Metadata information @throws IOException if an I/O error occurs
2896 Creates a new file at the specified path. @param f Path to the file to be created @return true if file is created successfully, false if it already exists
2897 Constructs a new FileSystemDataOutputStreamBuilder. @param fileSystem the associated FileSystem @param p the target Path
2898 Advances to the next key-value pair. @param key Writable object for storing the current key @param val Writable object for storing the current value @return true if there is a next record, false otherwise
2899 Constructs a Trash instance with specified configuration. @param conf Hadoop configuration object @throws IOException if an I/O error occurs
2900 Creates a new DomainNameResolver instance. @param conf configuration object @param uri URI to extract host from @param configKey configuration key for resolver settings @return DomainNameResolver instance
2901 Returns a singleton instance of Groups. @param conf configuration settings @return Groups object initialized with given config
2902 Initializes and returns a Groups service with loaded configuration. @param conf configuration settings for the Groups service @return Groups instance initialized with provided configuration
2903 Refreshes super user groups configuration. @param conf Configuration object to update
2904 Marks a file for deletion on JVM exit. @param f the path of the file to be deleted @return true if the file is marked for deletion, false if it doesn't exist @throws AccessControlException if access control fails @throws IOException if an I/O error occurs
2905 Registers a shutdown hook with specified priority. @param priority execution order of the shutdown hook
2906 Logs startup and shutdown messages for a class. @param clazz the class being started or shut down @param args command-line arguments @param log SLF4J logger instance
2907 Loads SSL configuration settings. @throws IOException if required properties are missing or invalid
2908 Creates SSL key managers from configuration. @param mode SSL mode (e.g., client or server) @param keystoreType type of the keystore (e.g., JKS, PKCS12) @param storesReloadInterval interval for reloading keystores (in milliseconds) @throws GeneralSecurityException if security settings are invalid @throws IOException if there is an I/O error reading the keystore
2909 Retrieves ZooKeeper authentication information. @param conf configuration object @return list of ZKAuthInfo objects or empty list if none found
2910 Retrieves groups for a given user. @param user username of the user @return list of group names associated with the user
2911 Main entry point to write configuration as XML to stdout.
2912 Performs SASL authentication using IPC streams. @param ipcStreams input/output streams for communication @return the negotiated authentication method @throws IOException if a network error occurs
2913 Constructs PathData with file system and path string. @param fs the FileSystem instance @param pathString the path as a string @throws IOException if an I/O error occurs
2914 Retrieves directory contents. @return sorted array of PathData objects representing files and directories @throws IOException if an I/O error occurs
2915 Checks if a directory listing is inconsistent and ignores the exception if so. @param fs FileSystem instance @param path Path to check @param e FileNotFoundException to potentially throw or ignore @throws FileNotFoundException if directory listing is consistent
2916 Checks if the path has a specific capability. @param path file system path to check @param capability capability to verify @return true if path supports the capability, false otherwise
2917 Checks if a file system path has a specific capability. @param path the path to check @param capability the capability to verify @return true if the path supports the capability, false otherwise @throws IOException if an I/O error occurs
2918 Retrieves the root directory enclosing the specified path. @param fs FileSystem instance to operate on @param path Path to find the enclosing root for @return Enclosing root Path @throws IOException if an I/O error occurs
2919 Opens a file for reading. @param path file path to be opened @return FutureDataInputStreamBuilder for the file @throws IOException if an I/O error occurs @throws UnsupportedOperationException if operation is not supported
2920 Opens a file using a PathHandle. @param pathHandle handle to the file path @return FutureDataInputStreamBuilder for reading data @throws IOException if an I/O error occurs @throws UnsupportedOperationException if operation is not supported
2921 Locates and loads a keystore. @throws IOException if an I/O error occurs or keystore is inconsistent
2922 Loads TFile index if not already present. @throws IOException if an I/O error occurs
2923 Retrieves a meta block by name. @param name meta block identifier @return DataInputStream of the meta block @throws IOException if I/O error occurs @throws MetaBlockDoesNotExist if meta block is not found
2924 Initializes Reader with file input stream and configuration. @param fin file input stream @param fileLength length of the file @param conf configuration settings @throws IOException if an I/O error occurs
2925 Prepares a metadata block for writing. @param name block name @param compressName compression algorithm name @return DataOutputStream for the new meta block @throws IOException if I/O error occurs @throws MetaBlockAlreadyExists if block already exists
2926 Closes the TFile writer, finalizing data and index blocks. @throws IOException if an I/O error occurs during closing
2927 Prepares a meta block for writing. @param name unique identifier for the meta block @return DataOutputStream for writing meta data @throws IOException if I/O error occurs @throws MetaBlockAlreadyExists if meta block already exists
2928 Prepares to append a key with specified length. @param length the length of the key to be appended @return DataOutputStream for writing the key @throws IOException if an I/O error occurs
2929 Copies a file or directory to a destination FileSystem. @param src source file or directory @param dstFS destination FileSystem @param dst destination path in the FileSystem @param deleteSource whether to delete the source after copying @param conf configuration settings @return true if copy is successful, false otherwise @throws IOException if an I/O error occurs
2930 Completes a multipart upload by merging parts into a final file. @param multipartUploadId unique identifier for the upload @param filePath destination path for the completed file @param handleMap map of part numbers to their handles @return PathHandle of the completed file @throws IOException if an I/O error occurs
2931 Creates a new file with specified permissions. @param fs FileSystem instance @param file Path of the file to create @param permission FsPermission for the file @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
2932 Initializes a Writer for writing data to a file system. @param fs the FileSystem instance @param conf the Configuration object @param name the Path of the file to write to @param keyClass the Class type of keys @param valClass the Class type of values @throws IOException if an I/O error occurs
2933 Rolls the log directory by creating a new log file. @throws IOException if an I/O error occurs
2934 Advances to the next key-value pair. @param key writable object to store the next key @param val writable object to store the next value @return true if a next pair exists, false otherwise
2935 Creates a proxy for the specified protocol. @param <T> type of the protocol @param protocol interface of the protocol @param clientVersion version of the client @param addr address of the server @param ticket user authentication information @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy retry policy for connection attempts (not supported) @param fallbackToSimpleAuth flag to fall back to simple authentication @param alignmentContext context for alignment (optional) @return ProtocolProxy instance @throws IOException if an I/O error occurs
2936 Retrieves user-to-groups mapping service. @return Groups object configured with default settings
2937 Initializes security settings and configurations. @param conf configuration object @param overrideNameRules flag to override name rules
2938 Constructs an empty AccessControlList instance.
2939 Constructs an ACL from a string. @param aclString space-separated permissions string
2940 Constructs an AccessControlList with specified users and groups. @param users comma-separated list of user names @param groups comma-separated list of group names
2941 Refreshes super user groups configuration.
2942 Initializes SSL configuration based on mode. @param mode SSL operation mode (SERVER or CLIENT) @throws IOException if I/O error occurs @throws GeneralSecurityException if security error occurs
2943 Initializes a ZooKeeper client with authentication and SSL. @param authInfos list of authentication information @param sslEnabled flag to enable SSL @throws IOException if configuration or connection fails
2944 Retrieves and transforms user groups based on a rule. @param user the username to fetch groups for @return List of group names transformed according to the rule
2945 Initializes the Metrics System. @param prefix unique identifier for the metrics system @return current MetricsSystem instance
2946 Appends an extension to the current path. @param extension file extension to add @return new PathData object with appended extension @throws IOException if an I/O error occurs
2947 Retrieves path data for a specified child. @param child the child PathData object @return new PathData instance representing the child's path @throws IOException if an I/O error occurs
2948 Recursively processes directory contents. @param item PathData object representing the current directory @throws IOException if an I/O error occurs
2949 Checks if the path has a specific capability. @param path the file system path to check @param capability the capability to verify @return true if the path supports the capability, false otherwise @throws IOException if an I/O error occurs
2950 Checks if the path has a specific capability. @param path the file system path to check @param capability the capability to verify @return true if the path supports the capability, false otherwise @throws IOException if an I/O error occurs
2951 Checks if the file system supports a specific path capability. @param path the file path to check @param capability the capability to verify @return true if supported, false otherwise @throws IOException if an I/O error occurs
2952 Lists file status for a given path. @param f the path to list @return array of FileStatus objects @throws FileNotFoundException if file not found @throws IOException on I/O errors
2953 Copies a file or directory from source to destination. @param srcFS source filesystem @param srcStatus status of the source file/directory @param dstFS destination filesystem @param dst destination path @param deleteSource whether to delete the source after copy @param overwrite whether to overwrite existing files @param conf configuration settings @return true if successful, false otherwise
2954 Recursively copies a file or directory from source to destination. @param srcFS source filesystem @param srcStatus status of the source file or directory @param dst destination file or directory @param deleteSource whether to delete the source after copy @param conf configuration settings @return true if operation successful, false otherwise
2955 Opens a file with specified read policy. @param policy file read policy @return FSDataInputStream for the file @throws IOException if an I/O error occurs
2956 Opens a file in the specified filesystem. @param fs Filesystem to open the file from @param file Path of the file to open @param bufferSize Buffer size for reading the file @param length Length of the file to read, -1 for full file @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2957 Loads and deserializes data from a specified path in the filesystem. @param fs FileSystem instance @param path Path to the file @param status Optional FileStatus object @return Deserialized object of type T @throws IOException if an I/O error occurs
2958 Retrieves the first key from the TFile index. @return RawComparable representing the first key @throws IOException if an I/O error occurs
2959 Retrieves the last key from the TFile index. @return RawComparable representing the last key @throws IOException if an I/O error occurs
2960 Retrieves block containing key. @param key the search key @param greater true for upper bound, false for lower bound @return Location of block or end if not found
2961 Retrieves key near the specified offset. @param offset file offset to search near @return RawComparable key or null if not found
2962 Initializes a Reader for reading TFile data. @param fsdis input stream from the file system @param fileLength length of the file to read @param conf configuration settings @throws IOException if an I/O error occurs
2963 Initializes block at specified index. @param blockIndex index of the block to initialize
2964 Appends key-value pair to storage. @param key byte array containing the key @param koff offset in key array @param klen length of key data @param value byte array containing the value @param voff offset in value array @param vlen length of value data @throws IOException if an I/O error occurs
2965 Retrieves the middle key from a sorted list of keys. @return WritableComparable representing the middle key or null if no keys exist @throws IOException if an I/O error occurs during index reading
2966 Positions input stream to EOF using the given key. @param key key to use for positioning @throws IOException if an I/O error occurs
2967 Seeks to the position of a given key in a sorted file. @param key the key to search for @param before if true, seek to the position before the key @return comparison result or 1 if not found @throws IOException on I/O error
2968 Merges sorted input streams into a single output stream. Handles multiple readers and writes the smallest key-value pairs first.
2969 Retrieves a protocol proxy with specified parameters. @param <T> type of the protocol @param protocol class representing the protocol @param clientVersion version of the client @param addr address of the server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy policy for retrying failed connections @return ProtocolProxy instance or throws IOException
2970 Retrieves a protocol proxy for specified parameters. @param <T> generic type of the protocol @param protocol class representing the protocol @param clientVersion version of the client @param connId connection identifier containing address and ticket @param conf configuration settings @param factory socket factory for creating connections @param alignmentContext context for alignment @return ProtocolProxy object @throws IOException if an I/O error occurs
2971 Returns the current trash directory path. @return Path object representing the trash directory @throws IOException if an I/O error occurs
2972 Retrieves the current trash directory for a given path. @param path the original file or directory path @return the trash directory path @throws IOException if an I/O error occurs
2973 Ensures the UserGroupInformation is initialized.
2974 Sets configuration for initialization. @param conf Configuration object to be set
2975 Launches a service with given configuration and parameters. @param conf Configuration for the service @param instance Service instance to launch @param processedArgs List of processed arguments @param addShutdownHook Whether to add a shutdown hook @param execute Whether to execute the service @return ExitException indicating success or failure
2976 Starts authentication process with given info. @param authInfos list of authentication information objects @throws IOException if an I/O error occurs
2977 Constructs a LocalFs instance. @param theUri file system URI @param conf configuration settings @throws IOException if an I/O error occurs @throws URISyntaxException if the URI is invalid
2978 Copies an input stream to a target path. @param in the source InputStream @param target the destination PathData object @throws IOException if an I/O error occurs
2979 Copies a file between two filesystems. @param srcFS source filesystem @param src source path @param dstFS destination filesystem @param dst destination path @param deleteSource true to delete the source file after copying @param overwrite true to overwrite the destination if it exists @param conf configuration settings @return true if copy is successful, false otherwise @throws IOException if an I/O error occurs
2980 Repairs and opens a file from the most recent node. @param mrNodes array of MRNflyNode objects representing nodes @param f path to the file @param bufferSize size of buffer for reading the file @return FSDataInputStream if successful, null otherwise
2981 Copies a file from a source filesystem to a destination. @param srcFS source filesystem @param src source path in the source filesystem @param dst destination file @param deleteSource true to delete the source file after copy @param conf configuration settings @return true if copy is successful, false otherwise
2982 Opens file for sequential I/O operations. @return FSDataInputStream for reading @throws IOException if an I/O error occurs
2983 Loads data from a file system path. @param fs the FileSystem to use @param path the Path to the file @return the loaded object of type T @throws IOException if an I/O error occurs
2984 Retrieves record number near the specified offset. @param offset position in the data structure @return record number at or nearest to the given offset @throws IOException if an I/O error occurs
2985 Retrieves the record number at the current location. @return The record number as a long. @throws IOException if an I/O error occurs
2986 Initializes a Scanner with specified reader and location range. @param reader source of data to scan @param begin start location for scanning @param end end location for scanning @throws IOException if an I/O error occurs
2987 Moves cursor to a specified location. @param l target location to seek @throws IOException if an I/O error occurs
2988 Advances the cursor to the next record. @return true if successful, false if at end of file @throws IOException if an I/O error occurs
2989 Appends key-value pair to storage. @param key array of bytes representing the key @param value array of bytes representing the value @throws IOException if an I/O error occurs
2990 Seeks to the position of the given key. @param key the key to search for @return the position of the key or -1 if not found @throws IOException if an I/O error occurs
2991 Retrieves the closest key to a given key. @param key the target key @param val value placeholder for the retrieved data @param before true if searching for the closest key less than the given key @return the closest matching key or null if not found @throws IOException if an I/O error occurs during processing
2992 Creates a UserGroupInformation object for testing. @param user username for the UGI @param userGroups array of group names associated with the user @return UserGroupInformation object configured for testing
2993 Creates a proxy UserGroupInformation for testing. @param user username for the proxy user @param realUser the actual user being proxied @param userGroups array of group names for the proxy user @return UserGroupInformation object configured for testing
2994 Retrieves the list of groups for the current user. @return List of group names or empty list if an error occurs
2995 Retrieves the set of groups for the current user. @return Set of group names or empty set if retrieval fails
2996 Performs subject login with given parameters. @param subject security subject @param params login parameters @return UserGroupInformation object @throws IOException if login fails
2997 Refreshes Service ACL with loaded configuration. @param conf Configuration object containing settings @param provider PolicyProvider for authorization policies
2998 Authorizes user access. @param user UserGroupInformation object representing the user @param remoteAddress IP address of the client @throws AuthorizationException if authorization fails
2999 Authorizes user access based on group information and IP address. @param user UserGroupInformation object representing the user @param remoteAddress InetAddress of the remote client @throws AuthorizationException if authorization fails
3000 Launches a service with configuration and arguments. @param conf configuration settings for the service @param processedArgs list of processed command-line arguments @param addShutdownHook flag to add shutdown hook @param execute flag to execute the service @return ExitException object if an error occurs, null otherwise
3001 Starts the process with an empty list. @throws IOException if an I/O error occurs
3002 Copies a file from source to target. @param src PathData object representing the source file @param target PathData object representing the target file @throws IOException if an I/O error occurs during copying
3003 Copies a file from source to destination. @param srcFS source filesystem @param src source path @param dstFS destination filesystem @param dst destination path @param deleteSource whether to delete the source file after copy @param conf configuration settings @return true if copy is successful, false otherwise
3004 Opens a file for reading using multiple nodes. @param f the path to the file @param bufferSize size of the buffer @return FSDataInputStream if successful @throws IOException if fails to open the file
3005 Creates a Scanner for the specified range. @return Scanner object initialized with the current instance and range @throws IOException if an I/O error occurs
3006 Creates a scanner for records within a specified range. @param beginRecNum starting record number (inclusive) @param endRecNum ending record number (exclusive) @return Scanner object for the specified range @throws IOException if an I/O error occurs
3007 Initializes Scanner with specified offsets. @param reader source Reader object @param offBegin starting offset @param offEnd ending offset @throws IOException if an I/O error occurs
3008 Rewinds to the beginning of the stream. @throws IOException if an I/O error occurs
3009 Seeks to specified key in data structure. @param key the key to seek @return true if found, false otherwise
3010 Retrieves the closest key-value pair. @param key target key to find @param val value associated with the key @return closest WritableComparable or null if not found @throws IOException if an I/O error occurs
3011 Checks if security is enabled. @return true if security is enabled, false otherwise
3012 Logs out a user from Kerberos using the keytab. Throws IOException if logout fails.
3013 Retrieves an array of group names. @return Array containing group names
3014 Checks if user is in allowed list or group. @param ugi user group information @return true if user is allowed, false otherwise
3015 Retrieves UserGroupInformation from a Subject. @param subject the security subject containing user principals @return UserGroupInformation object @throws IOException if authentication fails or subject is invalid
3016 Authorizes user access. @deprecated Use {@link #authorize(UserGroupInformation, String)} instead. @param user user group information @param remoteAddress client's remote address @param conf configuration settings (unused) @throws AuthorizationException if authorization fails
3017 Authorizes the connection based on user and protocol. Throws exception if unauthorized. @throws RpcServerException if authorization fails
3018 Processes the source path by copying or throwing exceptions based on its type. @param src source path data @param dst destination path data @throws IOException if an I/O error occurs
3019 Copies a file from a source path to a local destination. @param delSrc true if the source should be deleted after copying @param src source file path @param dst destination file path @throws IOException if an I/O error occurs during the copy process
3020 Copies a file from HDFS to local filesystem. @param delSrc true if source file should be deleted after copy @param src source path in HDFS @param dst destination path on local filesystem
3021 Creates a scanner for a specific byte range. @param offset starting byte position @param length number of bytes to scan @return Scanner object for the specified range @throws IOException if an I/O error occurs
3022 Initializes Scanner with specified reader and key range. @param reader input source for data @param beginKey starting key for scanning (inclusive) @param endKey ending key for scanning (exclusive) @throws IOException if an I/O error occurs
3023 Seeks to a position in the file using a byte array key. @param key byte array containing the key @param keyOffset offset within the key array @param keyLen length of the key @return true if successful, false otherwise @throws IOException if an I/O error occurs
3024 Seeks to the first entry greater than or equal to the specified key. @param key byte array containing the key @param keyOffset offset within the key array @param keyLen length of the key @throws IOException if an I/O error occurs
3025 Seeks to the first entry greater than or equal to the specified key. @param key byte array containing the key @param keyOffset offset within the key array @param keyLen length of the key @throws IOException if an I/O error occurs
3026 Retrieves value by key. @param key the key to search for @param val object to store the retrieved value @return the value object if found, otherwise null
3027 Creates a protocol proxy for communication. @param <T> the type of the protocol @param protocol the interface class of the protocol @param clientVersion version of the client @param connId unique connection identifier @param conf configuration settings @param factory socket factory for connections @param alignmentContext context for data alignment @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
3028 Creates a protocol proxy for RPC communication. @param protocol interface class of the protocol @param clientVersion version of the client @param addr address of the server @param ticket user group information @param conf configuration settings @param factory socket factory for creating sockets @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy policy for retrying connections @param fallbackToSimpleAuth flag to allow fallback to simple authentication @return ProtocolProxy object for the given protocol @throws IOException if an I/O error occurs
3029 Creates a protocol proxy for RPC communication. @param protocol the interface class of the protocol @param clientVersion the version of the client @param addr the address of the server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating sockets @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy policy for retrying failed connections @param fallbackToSimpleAuth flag to allow fallback to simple auth @param alignmentContext context for alignment (optional) @return a ProtocolProxy object for the specified protocol
3030 Opens a file for secure random read with ownership checks. @param f the file to open @param mode the access mode ("r", "rw", etc.) @param expectedOwner the expected owner of the file @param expectedGroup the expected group of the file @return RandomAccessFile object if successful, throws IOException otherwise
3031 Opens a file securely and checks ownership. @param file the file to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FSDataInputStream if successful @throws IOException if an I/O error occurs or ownership check fails
3032 Opens a file securely for reading with owner and group checks. @param f the file to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FileInputStream if successful, throws IOException otherwise
3033 Dumps UserGroupInformation details. @param title descriptive title for the dump @param ugi UserGroupInformation object to dump @throws IOException if an I/O error occurs
3034 Retrieves the current login user's information. @return UserGroupInformation object representing the logged-in user @throws IOException if an error occurs during retrieval
3035 Logs in user from given Subject. @param subject security subject containing user info
3036 Processes the connection context from the RPC buffer. @param buffer containing the connection context data @throws RpcServerException if processing fails or is invalid
3037 Creates a Scanner with specified key range. @param beginKey starting key for the scan (inclusive) @param endKey ending key for the scan (exclusive) @return Scanner object configured with given keys @throws IOException if an I/O error occurs
3038 Seeks to specified key in data store. @param key byte array representing the key @return true if successful, false otherwise @throws IOException if an I/O error occurs
3039 Sets the lower bound for key range. @param key byte array representing the key @throws IOException if an I/O error occurs
3040 Sets the upper bound for searching with a byte array. @param key the byte array to use as the upper bound
3041 Retrieves the first entry greater than or equal to the given key. @param key search key @return key if found, otherwise null @throws IOException on I/O errors
3042 Retrieves a value by key if it probably exists. @param key the search key @param val placeholder for the found value @return the associated value or null if not found @throws IOException if an I/O error occurs
3043 Retrieves a protocol proxy for communication. @param <T> the type of the protocol interface @param protocol the protocol interface class @param clientVersion version of the client @param connId unique connection identifier @param conf configuration settings @param factory socket factory for connections @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
3044 Retrieves a protocol proxy for communication. @param <T> the type of the protocol @param protocol the interface class of the protocol @param clientVersion version of the client @param addr address of the server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy policy for retrying failed connections @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
3045 Sets up IPC communication streams with a server. @param fallbackToSimpleAuth flag to use simple auth if SASL fails
3046 Opens a file for random read access with security checks. @param f the file to open @param mode the access mode ("r", "rw", etc.) @param expectedOwner the expected owner of the file @param expectedGroup the expected group of the file @return RandomAccessFile object @throws IOException if an I/O error occurs or security checks fail
3047 Opens a FSDataInputStream with security checks. @param file the file to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FSDataInputStream for the file @throws IOException if an I/O error occurs or security checks fail
3048 Opens a file for reading with security checks. @param f the file to open @param expectedOwner the expected owner of the file @param expectedGroup the expected group of the file @return FileInputStream object @throws IOException if an I/O error occurs or security checks fail
3049 Checks if the user has administrator access. @param servletContext application context @param remoteUser username of the remote user @return true if user is an admin, false otherwise
3050 Authorizes a user for a specific protocol based on ACLs and machine lists. @param user the UserGroupInformation object representing the user @param protocol the protocol class to check authorization for @param conf the configuration settings @param addr the InetAddress of the client @throws AuthorizationException if the user is not authorized
3051 Retrieves the current user's group information. @return UserGroupInformation object representing the current user @throws IOException if an I/O error occurs during retrieval
3052 Checks if login authentication uses keytab. @return true if login is keytab-based, false otherwise
3053 Checks if login is ticket-based. @return true if login uses ticket, false otherwise @throws IOException if an I/O error occurs while checking
3054 Executes an action as the current login user or exits if security is enabled and fails. @param action the PrivilegedAction to execute @return result of the action execution
3055 Executes an action as the current login user. @param action the action to be executed @return result of the action @throws IOException if an I/O error occurs
3056 Cedes active status for a specified duration. @param millisToCede milliseconds to cede active status @throws AccessControlException if access is denied @throws ServiceFailedException if service fails @throws IOException if an I/O error occurs
3057 Initiates graceful failover to the current node. Throws ServiceFailedException or IOException on failure.
3058 Creates a Scanner for a range of keys. @param beginKey start of the key range or null for no lower bound @param endKey end of the key range or null for no upper bound @return Scanner object configured with specified key range @throws IOException if an I/O error occurs
3059 Creates a scanner with specified key range. @param beginKey starting key for the scan @param endKey ending key for the scan @return Scanner object configured with the key range @throws IOException if an I/O error occurs
3060 Creates a protocol proxy for RPC communication. @param <T> type of the protocol interface @param protocol class of the protocol interface @param clientVersion version of the client @param addr address of the remote server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating sockets @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
3061 Retrieves a proxy for a specified protocol. @param <T> type of the protocol @param protocol interface class of the protocol @param clientVersion version of the client @param addr address of the server @param ticket user group information @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout for RPC calls @return proxy instance of type T @throws IOException if an I/O error occurs
3062 Checks if user has administrator access. @param servletContext application context @param request HTTP request @param response HTTP response @return true if user has admin access, false otherwise
3063 Authorizes user access based on protocol and address. @param user user information @param protocolName name of the communication protocol @param addr client's IP address @throws AuthorizationException if authorization fails
3064 Retrieves the home directory path for the current user. @return Path object representing the user's home directory
3065 Checks file access permissions. @param stat FileStatus object representing the file @param mode FsAction required permission level @throws AccessControlException if permission is denied @throws IOException on I/O errors
3066 Constructs and initializes a ViewFileSystem instance. Sets the current user's group information and records the creation time. @throws IOException if an I/O error occurs while fetching user info
3067 Constructs a ViewFs object with the given URI and configuration. @param theUri the URI for the view file system @param conf configuration settings for the file system @throws IOException if an I/O error occurs @throws URISyntaxException if the URI is invalid
3068 Initializes an InodeTree with configuration and URI. @param config Configuration object @param viewName View name for mount table @param theUri Target URI @param initingUriAsFallbackOnNoMounts Flag to initialize URI as fallback @throws UnsupportedFileSystemException if unsupported file system @throws URISyntaxException if URI syntax is invalid @throws FileAlreadyExistsException if file already exists @throws IOException if other I/O errors occur
3069 Retrieves the home directory path for the current user. Fallbacks to system property if unable to get username. @return Path object representing the home directory
3070 Opens a connection to a URL using authentication and optional delegation tokens. @param url target URL @param token authentication token @param doAs proxy user string @return HttpURLConnection instance @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
3071 Retrieves the best UserGroupInformation based on ticket cache or user name. @param ticketCachePath path to ticket cache file @param user username for remote user creation @return UserGroupInformation object @throws IOException if an I/O error occurs
3072 Logs in a user from a keytab and returns the UserGroupInformation. @param user principal name of the user @param path path to the keytab file @return UserGroupInformation object for the logged-in user @throws IOException if login fails
3073 Logs detailed user information for debugging. @param log Logger instance to use for logging @param ugi UserGroupInformation object containing user details @throws IOException if an I/O error occurs during logging
3074 Executes an action as the current user. @param action the action to be performed @return result of the action @throws IOException if an I/O error occurs
3075 Retrieves the proxy user if running under proxy authentication. @return The username of the proxy user or null if not using proxy
3076 Waits for a protocol proxy with specified parameters. @param <T> type of protocol @param protocol class representing the protocol @param clientVersion version of the client @param addr address of the server @param conf configuration settings @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy policy for retrying connections @param timeout total wait time in milliseconds @return ProtocolProxy object or throws IOException if not available within timeout
3077 Creates a scanner for a range of keys. @param beginKey start key (inclusive) @param endKey end key (exclusive) @return Scanner object for the specified key range @throws IOException if an I/O error occurs
3078 Creates a protocol proxy for the given class and configuration. @param <T> type of the protocol interface @param protocol the protocol interface class @param clientVersion version of the client @param addr address of the server @param conf configuration settings @param factory socket factory to use @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
3079 Retrieves a proxy for the given protocol. @param protocol the interface of the remote service @param clientVersion version of the client @param addr address of the server @param ticket user authentication information @param conf configuration settings @param factory socket factory for creating connections @return proxy object implementing the specified protocol @throws IOException if an I/O error occurs
3080 Checks if instrumentation access is allowed. @param servletContext the ServletContext object @param request the HttpServletRequest object @param response the HttpServletResponse object @return true if access is allowed, false otherwise
3081 Returns the trash root directory for a given path. @param path the original file or directory path @return qualified Path object representing the trash root
3082 Retrieves trash root directories. @param allUsers if true, fetches for all users; otherwise, just the current user @return collection of FileStatus objects representing trash roots
3083 Checks and enforces access permissions for a file or directory. @param path the Hadoop Path to access @param mode the required FsAction (read/write/execute) permissions @throws AccessControlException if access is denied @throws FileNotFoundException if the path does not exist @throws IOException for other I/O errors
3084 Checks access permissions for a given file path. @param path the file path to check @param mode the required file system action (read/write) @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnresolvedLinkException if a symlink cannot be resolved @throws IOException for other I/O errors
3085 Initializes file system view. @param theUri URI of the file system @param conf configuration settings @throws IOException if initialization fails
3086 Retrieves a unique file system instance. @param uri URI of the file system @param conf configuration settings @return FileSystem object @throws IOException if an I/O error occurs
3087 Retrieves the home directory path. @return Path representing the user's home directory
3088 Opens a connection to the specified URL using the given authentication token. @param url target URL for the connection @param token authentication token for accessing the URL @return HttpURLConnection instance @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
3089 Retrieves a FileSystem instance for the given URI and configuration. @param uri the file system URI @param conf the Hadoop configuration @param user the user to impersonate @return FileSystem object @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
3090 Creates a new FileSystem instance with Kerberos authentication. @param uri URI of the file system @param conf Configuration settings @param user User for whom to create the FileSystem @return FileSystem object @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
3091 Retrieves UserGroupInformation from a Kerberos ticket cache. @param ticketCache path to the Kerberos ticket cache @param user username for authentication @return UserGroupInformation object or throws IOException if fails
3092 Logs in using a keytab file. @throws IOException if an I/O error occurs during login
3093 Logs in a user from a keytab file. @param user username to log in @param path path to the keytab file @throws IOException if login fails
3094 Logs all user information. @param ugi UserGroupInformation object containing user details
3095 Waits for a protocol proxy. @param protocol class of the protocol to wait for @param clientVersion version of the client @param addr address of the server @param conf configuration settings @param connTimeout connection timeout in milliseconds @return ProtocolProxy instance or throws IOException
3096 Waits for and returns a proxy for the specified protocol. @param protocol class of the protocol to wait for @param clientVersion version of the client @param addr address where the service is running @param conf configuration settings @param rpcTimeout timeout for RPC operations @param timeout overall timeout for waiting @return proxy object or throws IOException if fails
3097 Retrieves a proxy for the specified protocol. @param protocol class of the protocol to use @param clientVersion version of the client @param addr address of the server @param conf configuration settings @param factory socket factory for creating connections @return proxy object for the given protocol @throws IOException if an I/O error occurs
3098 Creates a protocol proxy for communication. @param <T> type of the protocol @param protocol class representing the protocol @param clientVersion version of the client @param addr server address @param conf configuration settings @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
3099 Retrieves the GetUserMappingsProtocol proxy. @return GetUserMappingsProtocol instance @throws IOException if an I/O error occurs
3100 Retrieves a ZKFC (ZooKeeper Failover Controller) proxy. @param conf configuration settings @param timeoutMs connection timeout in milliseconds @return ZKFCProtocol instance @throws IOException if connection fails
3101 Returns the trash root path for a given file system path. @param path the input file system path @return the trash root path or throws NotInMountpointException if not found
3102 Retrieves trash root directories. @param allUsers if true, returns trash for all users; otherwise, for current user @return collection of FileStatus objects representing trash roots
3103 Constructs a ViewFileSystem with default URI and configuration. @param conf file system configuration @throws IOException if an I/O error occurs
3104 Adds a filesystem to the cache for testing. @param uri URI of the filesystem @param conf configuration settings @param fs FileSystem instance to add @throws IOException if an I/O error occurs
3105 Creates a FileSystem instance based on URI and configuration. @param uri the target filesystem URI @param config configuration settings for the filesystem @return FileSystem object or throws IOException if an error occurs
3106 Creates and returns a FileContext instance. @param defFS default file system to use @param aConf configuration settings for the file context @return FileContext object initialized with given parameters
3107 Opens a connection to the specified URL using the given authentication token. @param url the target URL @param token the authentication token @return HttpURLConnection instance @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
3108 Executes Kerberos diagnostics checks and validations. @return true if all checks pass, false otherwise @throws Exception if any check fails or an error occurs
3109 Parses command-line arguments for Kerberos principal and keytab. @param args input command-line arguments @return filtered arguments without principal and keytab options @throws IOException if login fails
3110 Main method to demonstrate UGI retrieval and keytab login. @param args command line arguments (principal, keytab path if provided)
3111 Logs in a user using a keytab file. @param conf configuration object containing keytab and user info @param keytabFileKey config key for the keytab file path @param userNameKey config key for the user name @param hostname server host name
3112 Initializes a Server with specified configurations. @param bindAddress server's bind address @param port server's listening port @param rpcRequestClass class for RPC requests @param handlerCount number of handler threads @param numReaders number of reader threads @param queueSizePerHandler max queue size per handler @param conf configuration settings @param serverName name of the server @param secretManager secret manager for security @param portRangeConfig port range configuration @throws IOException if an I/O error occurs during initialization
3113 Builds SASL negotiation response. @return RpcSaslProto with optional initial challenge for token auth @throws InterruptedException, SaslException, IOException on failure
3114 Waits for a protocol proxy with specified parameters. @param protocol the protocol class to wait for @param clientVersion the version of the client @param addr the address to connect to @param conf the configuration settings @return ProtocolProxy instance or throws IOException if fails
3115 Waits for and returns a proxy for the specified protocol. @param <T> type of the protocol @param protocol class representing the protocol @param clientVersion version of the client @param addr address to connect to @param conf configuration settings @param connTimeout connection timeout in milliseconds @return proxy object for the specified protocol @throws IOException if an I/O error occurs
3116 Adds a resource with an input stream and name. @param in InputStream of the resource @param name Name of the resource
3117 Retrieves a proxy for the specified protocol. @param <T> generic type of the protocol @param protocol class representing the protocol @param clientVersion version of the client @param addr address of the server @param conf configuration settings @return proxy instance of the specified protocol @throws IOException if an I/O error occurs
3118 Prints user groups for given usernames. @param args array of usernames, defaults to current user if empty @return always returns 0
3119 Initiates a graceful failover to the specified node via ZKFC. @param toNode target HAServiceTarget for failover @return 0 on success, -1 on failure
3120 Requests a remote service to cede its active role. @param remote the target HAServiceTarget to request from @param timeout maximum time in ms for the operation @return ZKFCProtocol proxy of the old active service @throws IOException if communication fails
3121 Handles GET requests for JMX data. @param request HTTP request containing query parameters @param response HTTP response to send JSON data or error messages
3122 Retrieves FileSystem instance for given URI and configuration. @param uri target file system URI @param conf configuration settings @return FileSystem object or throws IOException
3123 Creates a new instance of LocalFileSystem. @param conf configuration settings @return LocalFileSystem object @throws IOException if an I/O error occurs
3124 Creates a new FileSystem instance. @param uri file system URI @param conf configuration settings @return FileSystem object configured with given URI and settings @throws IOException if an I/O error occurs
3125 Retrieves a FileContext using the specified FileSystem and default configuration. @param defaultFS the AbstractFileSystem to use @return a FileContext instance
3126 Retrieves FileContext for a given URI and configuration. @param defaultFsUri the default file system URI @param aConf the Hadoop configuration @return FileContext object initialized with the specified URI and config @throws UnsupportedFileSystemException if the filesystem is unsupported
3127 Initializes the command with provided arguments. @param args command-line arguments @return 0 if successful, 1 otherwise
3128 Logs in using specified configuration and keys. @param conf configuration settings @param keytabFileKey key for the keytab file path @param userNameKey key for the user name @throws IOException if login fails
3129 Processes SASL message and returns response. @param saslMessage incoming SASL message @return RpcSaslProto response or null for SIMPLE auth @throws SaslException, IOException, AccessControlException, InterruptedException on error
3130 Waits for and returns a proxy instance. @param <T> the type of the protocol @param protocol the interface class of the protocol @param clientVersion version of the client @param addr address to connect to @param conf configuration settings @return proxy instance of type T @throws IOException if an I/O error occurs
3131 Adds a new resource by name. @param name resource identifier
3132 Adds a resource from the given URL. @param url location of the resource to be added
3133 Adds a resource from a file path. @param file the Path object representing the file
3134 Adds a resource from an input stream. @param in InputStream containing the resource data
3135 Performs a graceful failover procedure. @throws ServiceFailedException if failover fails @throws IOException on I/O errors @throws InterruptedException if interrupted during execution
3136 Creates a proxy to monitor health. @return HAServiceProtocol instance for monitoring @throws IOException if connection fails
3137 Retrieves health monitor proxy with specified configuration and timeout. @param conf Configuration object for settings @param timeoutMs Timeout in milliseconds @return HAServiceProtocol instance
3138 Retrieves HAServiceProtocol proxy. @param conf configuration settings @param timeoutMs timeout in milliseconds @return HAServiceProtocol proxy instance @throws IOException if an I/O error occurs
3139 Initializes the HAR filesystem with given URI and configuration. @param name URI of the filesystem to initialize @param conf configuration settings for initialization @throws IOException if initialization fails or invalid path is provided
3140 Moves a file to the appropriate trash directory. @param fs FileSystem instance @param p Path of the file to move @param conf Configuration settings @return true if successful, false otherwise @throws IOException on I/O errors
3141 Initializes PathData with given path and configuration. @param pathString file system path as a string @param conf Hadoop configuration @throws IOException if an I/O error occurs
3142 Retrieves a named file system. @param name file system name or URI string @param conf configuration settings @return FileSystem object @throws IOException if an I/O error occurs @deprecated Use get(URI, Configuration) instead
3143 Retrieves the local file system instance. @param conf configuration settings @return LocalFileSystem object @throws IOException if an I/O error occurs
3144 Constructs a ChRootedFileSystem with specified URI and configuration. @param uri file system URI @param conf Hadoop configuration @throws IOException if an I/O error occurs
3145 Retrieves FileSystem instance for given URI and configuration. @param uri file system URI @param conf Hadoop configuration @return FileSystem object @throws IOException if an I/O error occurs
3146 Retrieves a FileSystem instance for the given URI. @param uri target file system URI @param conf configuration settings @return FileSystem object @throws IOException if an I/O error occurs
3147 Retrieves the file system instance. @param conf configuration settings @return FileSystem object @throws IOException if an I/O error occurs
3148 Retrieves the FileSystem instance. @return FileSystem object @throws MetricsException if URI is invalid or connection fails
3149 Lists file statuses for a given path, handling mount links and internal directories. @param f the path to list statuses for @return array of FileStatus objects representing files and directories @throws IOException if an I/O error occurs
3150 Retrieves file context for given URI. @param defaultFsUri URI of the default filesystem @return FileContext object for the specified URI @throws UnsupportedFileSystemException if filesystem is not supported
3151 Retrieves FileContext for the default file system. @param aConf configuration object containing file system settings @return FileContext instance @throws UnsupportedFileSystemException if URI scheme is missing or invalid
3152 Retrieves local file system context. @param aConf configuration settings @return FileContext for local file system @throws UnsupportedFileSystemException if local FS is unsupported
3153 Initializes a new Server instance. @param protocolClass the RPC protocol class @param protocolImpl the implementation of the protocol @param conf configuration settings for the server @param bindAddress address to bind the server to @param port port number for the server @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler size of the queue per handler @param verbose flag indicating verbose logging @param secretManager secret manager for security tokens @param portRangeConfig configuration for port range @param alignmentContext context for data alignment @throws IOException if an I/O error occurs during initialization
3154 Initializes server with specified configuration and binds to address. @param protocolClass interface class for the protocol @param protocolImpl implementation of the protocol @param conf configuration settings @param bindAddress network address to bind @param port port number to listen on @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler size of the request queue per handler @param verbose flag for verbose logging @param secretManager secret manager for security tokens @param portRangeConfig configuration for port range @param alignmentContext context for data alignment @throws IOException if initialization fails
3155 Processes SASL authentication message. @param saslMessage incoming SASL message for processing
3156 Loads the latest mount table from the specified path into the configuration. @param mountTableConfigPath path to the mount table configuration directory @param conf configuration object to load mount table properties into @throws IOException if an I/O error occurs while loading the mount table
3157 Checks if other target nodes are active. @param targetNodeToActivate node to activate @param forceActive flag to force activation @return true if any other node is active, false otherwise
3158 Performs pre-failover checks between two HAServiceTargets. @param from source HAServiceTarget @param target destination HAServiceTarget @param forceActive flag to force failover even if target is not ready @throws FailoverFailedException if any check fails
3159 Attempts to transition a service to standby gracefully. @param svc the HAServiceTarget to be fenced @return true if successful, false otherwise
3160 Resolves a file system path, handling symbolic links if enabled. @param filesys the FileSystem to operate on @param path the Path to resolve @return the resolved resource or null if not found @throws IOException if an I/O error occurs or symlink resolution fails
3161 Initializes PathData with local file system and path. @param localPath URI representing the local path @param conf configuration settings for file system access @throws IOException if an I/O error occurs
3162 Copies files from local source paths to a destination. @param delSrc true if source files should be deleted after copy @param overwrite true if existing destination files should be overwritten @param srcs array of source file paths @param dst destination directory path @throws IOException if an I/O error occurs during the copy process
3163 Copies a file from a local source to a destination. @param delSrc true to delete the source file after copying @param overwrite true to overwrite the destination if it exists @param src source path of the local file @param dst destination path for the copied file @throws IOException if an I/O error occurs during the copy process
3164 Copies a file from a source path to a destination path locally. @param delSrc true if the source file should be deleted after copying @param src source path of the file to copy @param dst destination path for the copied file @param useRawLocalFileSystem true if raw local file system is used @throws IOException if an I/O error occurs during the copy process
3165 Updates context with new local directories from configuration. @param conf Configuration object containing settings @return Updated Context object or throws IOException if config is invalid
3166 Retrieves a local file path. @param dirsProp property containing directory paths @param path file path to be created @return Path object for the first available directory @throws IOException if no valid directory is found
3167 Retrieves raw FileSystem for a given Path and Configuration. @param path file system path @param conf configuration settings @return FileSystem object or throws exception if not found @throws IOException on I/O errors
3168 Retrieves mount path information for a given file system path. @param path the file system path to resolve @param conf configuration settings @return MountPathInfo containing resolved path and file system @throws IOException if an I/O error occurs or path is not found
3169 Expands a glob pattern to an array of PathData objects. @param pattern the glob pattern string @param conf configuration settings for file system operations @return sorted array of PathData matching the pattern @throws IOException if I/O error occurs during expansion
3170 Dumps information about a TFile. @param file path to the TFile @param out output stream for the dump @param conf configuration settings @throws IOException if an I/O error occurs
3171 Reads credentials from a token storage file. @param filename path to the token storage file @param conf configuration settings @return Credentials object containing read data @throws IOException if an I/O error occurs
3172 Retrieves library JAR URLs from configuration. @param conf Hadoop configuration object @return Array of JAR URLs or null if none specified @throws IOException if an I/O error occurs
3173 Initializes file system and prepares for writing. @return true if initialization is successful, false otherwise
3174 Retrieves local file system context. @return FileContext for local file system @throws UnsupportedFileSystemException if local file system is unsupported
3175 Retrieves default file context. @return FileContext instance configured with default settings @throws UnsupportedFileSystemException if default filesystem is unsupported
3176 Initializes a new Server instance. @param protocolClass the class of the protocol to use @param protocolImpl implementation of the protocol @param conf configuration settings for the server @param bindAddress address to bind the server to @param port port number for the server @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler size of the request queue per handler @param verbose flag indicating if detailed logging is enabled @param secretManager manager for security tokens @param portRangeConfig configuration for port range @param alignmentContext context for data alignment @throws IOException if an I/O error occurs during initialization
3177 Deprecated constructor for Server. @param protocolClass Class representing the protocol @param protocolImpl Implementation of the protocol @param conf Configuration settings @param bindAddress Address to bind the server @param port Port number for the server @param numHandlers Number of handler threads @param numReaders Number of reader threads @param queueSizePerHandler Queue size per handler @param verbose Enable verbose logging @param secretManager Secret manager for security tokens @param portRangeConfig Port range configuration @throws IOException if an I/O error occurs during server setup
3178 Initializes SSL factory with specified mode and configuration. @param mode operation mode, cannot be null @param conf SSL configuration settings
3179 Refreshes service ACLs using provided configuration and policy provider. @param conf Configuration object containing settings @param provider PolicyProvider for authorization policies
3180 Performs a failover from one service target to another. @param fromSvc current active service target @param toSvc target service to become active @param forceFence whether to force fencing of the source service @param forceActive whether to force activation of the target service @throws FailoverFailedException if failover fails
3181 Parses destination path from arguments or uses current directory. @param args list of command-line arguments @throws IOException if path parsing fails
3182 Moves files from local source paths to a destination path. @param srcs array of source file paths @param dst destination file path @throws IOException if an I/O error occurs
3183 Copies files from local to HDFS. @param delSrc true if source files should be deleted after copying @param overwrite true if destination files should be overwritten @param srcs array of source file paths on the local filesystem @param dst destination path in HDFS @throws IOException if an I/O error occurs during the operation
3184 Copies file from source to destination. @param delSrc delete source file after copying if true @param src source file path @param dst destination file path
3185 Copies a file from local filesystem to HDFS. @param delSrc true if source file should be deleted after copy @param overwrite true if destination file should be overwritten @param src source file path on local filesystem @param dst destination file path in HDFS
3186 Copies file from source to destination. @param delSrc true if source file should be deleted after copying @param src source file path @param dst destination file path @throws IOException if an I/O error occurs
3187 Finds a local writable path based on size and configuration. @param pathStr requested file path @param size required file size or SIZE_UNKNOWN @param conf configuration settings @param checkWrite whether to check write permissions @return Path object for writing if available, throws DiskErrorException otherwise
3188 Retrieves a local file path for reading. @param pathStr relative path to the file @param conf configuration settings @return Path to the file if found, throws DiskErrorException otherwise
3189 Retrieves all local file paths for reading. @param pathStr root directory path string @param conf configuration settings @return Iterable of local file paths @throws IOException if an I/O error occurs
3190 Initializes NflyFSystem with given URIs and configuration. @param uris array of URI destinations @param conf system configuration @param minReplication minimum number of replicas required @param nflyFlags flags for NflyKey @param fsGetter file system getter instance @throws IOException if initialization fails due to invalid URIs or configuration issues
3191 Executes all specified source files. @return Exit code: 0 for success, -1 if an error occurs
3192 Expands a path argument using glob pattern. @param arg path or glob pattern @return list of matched PathData items @throws IOException if an I/O error occurs
3193 Sets destination path from command arguments. @param args list of command-line arguments @throws IOException if path is invalid or not found
3194 Deprecated constructor for initializing a Reader. @param fs FileSystem instance @param file file path @param conf configuration settings @throws IOException if an I/O error occurs
3195 Constructs a Reader with specified input parameters. @param in file system data input stream @param buffersize buffer size for reading @param start starting position in the stream @param length length of data to read @param conf configuration settings @throws IOException if an I/O error occurs
3196 Creates a SequenceFile reader for the specified data file. @param dataFile path to the sequence file @param conf Hadoop configuration @param options additional reader options @return SequenceFile.Reader instance @throws IOException if an I/O error occurs
3197 Reads the next raw key from the input. @return true if a key is successfully read, false otherwise @throws IOException if an I/O error occurs
3198 Initializes a Writer with specified configuration and options. @param conf Hadoop configuration @param opts variable number of option objects @throws IOException if initialization fails
3199 Main entry point for TFile dumper. Prints version info and usage if no arguments provided. Dumps information for each specified TFile. @param args array of TFile paths
3200 Writes credentials to a file in specified format. @param f file to write to @param format format type ("FORMAT_PB" for protobuf, default is writable) @param creds credentials to write @param conf configuration settings @throws IOException if an I/O error occurs
3201 Rolls log directory if needed based on current time. Handles log file creation, closing, and scheduling.
3202 Lists JAR files in a directory. @param path directory path, can include wildcard @param useLocal true to use local file system, false for HDFS @return List of Path objects representing JAR files
3203 Constructs a Server instance. @param protocolClass protocol class type @param protocolImpl implementation of the protocol @param conf server configuration @param bindAddress address to bind the server @param port port number for the server @throws IOException if an I/O error occurs
3204 Deprecated constructor for Server. @param protocolImpl implementation of the protocol @param conf configuration settings @param bindAddress address to bind server to @param port port number for the server @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler size of the queue per handler @param verbose flag for verbose output @param secretManager secret manager for security @throws IOException if an I/O error occurs
3205 Processes out-of-band RPC requests. @param header request header containing call ID and metadata @param buffer data buffer for the request @throws RpcServerException if server encounters a fatal error @throws IOException if I/O operations fail @throws InterruptedException if operation is interrupted
3206 Establishes an authenticated URL connection. @param url the target URL to connect to @return the established URLConnection @throws Exception if connection fails or is not supported
3207 Copies file from local source to destination. @param src source file path @param dst destination file path @throws IOException if an I/O error occurs
3208 Moves a file from local source to destination. @param src source file path @param dst destination file path @throws IOException if an I/O error occurs
3209 Copies a file from local to HDFS. @param delSrc true to delete the source file after copying @param src source path on local filesystem @param dst destination path in HDFS @throws IOException if an I/O error occurs
3210 Copies a file from source to destination locally. @param src source file path @param dst destination file path @throws IOException if an I/O error occurs during the copy process
3211 Moves a file from source to destination. @param src source file path @param dst destination file path @throws IOException if an I/O error occurs
3212 Copies a file from HDFS to the local filesystem. @param delSrc true if source file should be deleted after copying @param src source path in HDFS @param dst destination path on local filesystem @throws IOException if an I/O error occurs
3213 Obtains local write path for a given configuration. @param pathStr string representation of the path @param size expected file size @param conf configuration settings @param checkWrite flag to check write permissions @return Path object suitable for writing @throws IOException if an I/O error occurs
3214 Creates a temporary file for writing. @param pathStr base path string @param size desired file size @param conf configuration settings @return temporary File object @throws IOException if an I/O error occurs
3215 Retrieves local file path for reading. @param pathStr string representation of the path @param conf configuration settings @return Path object for reading @throws IOException if an I/O error occurs
3216 Retrieves all local paths for reading. @param pathStr base directory path @param conf configuration settings @return Iterable of Path objects
3217 Initializes NflyFSystem with specified URIs and configuration. @param uris array of URI objects representing file locations @param conf Configuration object for system settings @param minReplication minimum replication factor required @param nflyFlags set of NflyKey flags to configure behavior @throws IOException if an I/O error occurs during initialization
3218 Creates a FileSystem instance with specified URIs and configuration. @param uris array of URI objects representing file system locations @param conf Configuration object for the file system @param settings comma-separated key-value pairs for additional settings @param fsGetter FsGetter instance for file system retrieval @return NflyFSystem object configured with provided parameters @throws IOException if an I/O error occurs during creation
3219 Expands command line arguments into PathData objects. @param args list of command line arguments @return LinkedList containing expanded PathData objects @throws IOException if an I/O error occurs during expansion
3220 Retrieves and writes delegation tokens to a file. @param tokenFile destination file for tokens @param fileFormat format of the output file @param alias optional alias for the service @param service target service for which tokens are fetched @param url URL associated with the service @param renewer entity that can renew the token @param conf configuration settings @throws Exception if an error occurs during token retrieval or file writing
3221 Aliases a specific service's token in the given token file. @param tokenFile the file containing tokens @param fileFormat format of the token file @param alias new service name for the token @param service existing service whose token needs to be aliased @param conf configuration settings
3222 Appends tokens from multiple files into a single credentials object. @param tokenFiles list of token storage files @param fileFormat format for writing the combined tokens @param conf configuration settings @throws IOException if an I/O error occurs
3223 Removes a token from the specified file. @param cancel whether to cancel managed tokens @param tokenFile file containing tokens @param fileFormat format of the token file @param alias alias of the token to remove @param conf configuration settings @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
3224 Renews tokens in a file matching a specific alias. @param tokenFile the file containing tokens @param fileFormat format of the token file @param alias alias to match for token renewal @param conf configuration settings
3225 Imports a token from a file or creates a new one. @param tokenFile the file containing the token @param fileFormat format of the token file @param alias service alias for the token @param base64 base64 encoded token string @param conf configuration settings
3226 Retrieves JAR files from a specified directory. @param path directory path to search @return list of Path objects representing JAR files
3227 Deprecated constructor for creating a Server. @param instance server instance object @param conf configuration settings @param bindAddress address to bind the server @param port port number for the server @throws IOException if an I/O error occurs
3228 Processes a single RPC request from the buffer. @param bb ByteBuffer containing the RPC data @throws IOException if an I/O error occurs @throws InterruptedException if the thread is interrupted
3229 Processes a URL to read and print lines starting with a marker. @param urlString the URL to connect to @throws Exception if connection or reading fails
3230 Moves temporary local file to final output location. @param fsOutputFile destination path in filesystem @param tmpLocalFile source temporary file path @throws IOException if an I/O error occurs during the move operation
3231 Copies a file or directory from HDFS to the local filesystem. @param src source path in HDFS @param dst destination path on local filesystem @param copyCrc whether to also copy checksum files @throws IOException if an I/O error occurs
3232 Gets local write path with configuration. @param pathStr file path string @param size file size in bytes @param conf configuration settings @return Path for writing or throws IOException
3233 Creates a temporary file for writing. @param pathStr file path string @param size desired file size in bytes @param conf configuration settings @return File object representing the created temporary file
3234 Processes and expands raw command-line arguments. @param args LinkedList of raw argument strings @throws IOException if an I/O error occurs during processing
3235 Creates a writer with specified configuration and options. @param conf configuration settings @param opts optional writer configurations @return Writer instance based on compression type @throws IOException if an I/O error occurs
3236 Creates a JAR file with class path entries. @param inputClassPath the original class path string @param pwd working directory path @param targetDir target directory for relative paths @param callerEnv environment variables map @return array containing created JAR path and unexpanded wildcards @throws IOException if an I/O error occurs
3237 Validates and processes file paths. @param files comma-separated list of file paths @param expandWildcard flag to expand wildcard paths @return comma-separated string of validated file paths @throws IOException if file operations fail
3238 Reads and processes data from a channel, handling connection headers and RPC packets. @return The number of bytes read or -1 if processing is complete or an error occurs. @throws IOException if an I/O error occurs during reading. @throws InterruptedException if the thread is interrupted while waiting for data.
3239 Unwraps and processes RPCs from input buffer. @param inBuf encrypted data buffer @throws IOException if I/O error occurs @throws InterruptedException if thread is interrupted
3240 Retrieves log level for a specified class. @throws Exception if an error occurs during processing
3241 Sets log level for a specified class. @param protocol HTTP or HTTPS protocol @param hostName server address @param className target class name @param level new log level
3242 Creates a KeyProvider for the specified URI. @param providerUri URI of the key management service @param conf configuration settings @return KeyProvider instance or null if scheme does not match @throws IOException on invalid URI or configuration
3243 Completes local file output by moving temporary file. @param fsOutputFile destination path for the final file @param tmpLocalFile temporary file path to be moved @throws IOException if an I/O error occurs
3244 Creates a temporary file for writing. @param pathStr base path string @param size desired file size @param conf configuration settings @return created temporary File object @throws IOException if an I/O error occurs
3245 Retrieves local file path for writing. @param pathStr file path string @param conf configuration settings @return Path object for writing @throws IOException if an I/O error occurs
3246 Executes command with given arguments. @param argv command-line arguments @return exit code indicating success or error
3247 Constructs a new Reader instance. @param fs FileSystem to use for reading @param file path of the file to read @param conf configuration settings @throws IOException if an I/O error occurs
3248 Initializes a new Reader instance. @param fs FileSystem to operate on @param dirName directory name for reading @param comparator custom comparator for key sorting @param conf configuration settings @throws IOException if an I/O error occurs
3249 Constructs a Reader from a directory name. @param fs FileSystem instance @param dirName directory path as string @param conf configuration settings @throws IOException if an I/O error occurs
3250 Constructs a new Reader. @param fs FileSystem instance @param dirName directory name @param comparator WritableComparator for sorting @param conf configuration settings @throws IOException if an I/O error occurs
3251 Clones file attributes from input to output. @param inputFile source file path @param outputFile destination file path @param prog progress tracking object @return Writer for the output file @throws IOException if an I/O error occurs
3252 Fixes a SequenceFile by creating an index if missing. @param fs FileSystem object @param dir Directory containing the SequenceFile @param keyClass Key class of the SequenceFile @param valueClass Value class of the SequenceFile @param dryrun If true, perform a dry run without making changes @param conf Configuration for the operation @return Number of entries processed or -1 if no fixing was needed @throws Exception if an error occurs during processing
3253 Creates a writer for a file in a specified filesystem. @param fs the FileSystem to write to @param conf configuration settings @param name path of the file to write @param keyClass class type for keys @param valClass class type for values @return Writer object for writing data @throws IOException if an I/O error occurs
3254 Creates a writer for writing data to HDFS. @param fs FileSystem instance @param conf Configuration object @param name Path where data will be written @param keyClass Class type of the keys @param valClass Class type of the values @param compressionType Type of compression to use @return Writer for writing data @throws IOException if an I/O error occurs
3255 Creates a writer for writing data to a file. @param fs FileSystem instance @param conf Configuration settings @param name Path of the file to write to @param keyClass Class type for keys @param valClass Class type for values @param compressionType Type of compression to use @param progress Progressable object for tracking progress @return Writer instance or null if creation fails
3256 Creates a writer for writing data to a file in Hadoop. @param fs FileSystem instance @param conf Configuration object @param name Path of the file to write @param keyClass Class type of keys @param valClass Class type of values @param compressionType Type of compression @param codec Compression codec @return Writer object for writing data @throws IOException if an I/O error occurs
3257 Creates a writer for a file in the specified filesystem. @param fs the filesystem where the file is located @param conf the configuration settings @param name the path of the file @param keyClass the class type of the keys @param valClass the class type of the values @param compressionType the type of compression to use @param codec the codec for compression @param progress a Progressable object for tracking progress @param metadata metadata associated with the file @return a Writer instance @throws IOException if an I/O error occurs
3258 Creates a new writer for Hadoop FileSystem. @param fs FileSystem instance @param conf Configuration settings @param name Path to the file @param keyClass Class type of the keys @param valClass Class type of the values @param bufferSize Buffer size in bytes @param replication File replication factor @param blockSize Block size in bytes @param compressionType Compression type (NONE, RECORD, or BLOCK) @param codec Compression codec to use @param progress Progressable object for tracking progress @param metadata Metadata to associate with the file @return Writer instance for writing data @throws IOException if an I/O error occurs
3259 Creates a new writer for writing to a Hadoop file system. @param fs the file system to write to @param conf the configuration settings @param name the path of the file to write @param keyClass the class type of keys @param valClass the class type of values @param compressionType the type of compression to use @param codec the compression codec to use @param progress an object for tracking progress @return a Writer instance configured with the provided parameters @throws IOException if an I/O error occurs
3260 Creates a Writer instance with specified configuration and output stream. @param conf Hadoop Configuration object @param out file system data output stream @param keyClass class of the keys written by this writer @param valClass class of the values written by this writer @param compressionType type of compression (NONE, RECORD, or BLOCK) @param codec compression codec to use @param metadata additional metadata for the writer @return Writer instance configured with provided parameters @throws IOException if an I/O error occurs
3261 Creates a deprecated writer with specified configuration and output stream. @param conf Hadoop configuration @param out file system data output stream @param keyClass class of the key @param valClass class of the value @param compressionType type of compression @param codec compression codec @return Writer object configured with given parameters @throws IOException if an I/O error occurs
3262 Validates file paths. @param files comma-separated list of file paths @return validation result message @throws IOException if an I/O error occurs
3263 Sends a log level request based on the operation. @throws HadoopIllegalArgumentException if invalid operation @throws Exception for other errors
3264 Creates a DataBlock for writing. @param index block identifier @param limit maximum data size @param statistics upload statistics tracker @return DataBlock instance @throws IOException if file creation fails
3265 Generates a temporary file path. @param conf Hadoop configuration object @param localDirAllocator allocator for local directories @return Path to the created temporary file with POSIX permissions set @throws IOException if an I/O error occurs
3266 Runs a command with given arguments. @param argv command line arguments @return exit code of the command execution
3267 Initializes a new instance of the Reader class. @param fs FileSystem object representing the file system @param dirName directory name to read from @param conf Configuration settings for the reader @throws IOException if an I/O error occurs during initialization
3268 Merges multiple segments into a single sorted output. @return RawKeyValueIterator for merged data @throws IOException if an I/O error occurs
3269 Initializes a Writer for sequence files. @param conf Hadoop configuration @param fs FileSystem instance @param dirName directory name for output @param comparator custom key comparator @param compress compression type for files @throws IOException if initialization fails
3270 Initializes a Writer for writing data to a file. @param conf Hadoop configuration @param fs FileSystem instance @param file path to the output file @param valClass class of the writable values @throws IOException if an I/O error occurs
3271 Initializes a Writer with specified configuration and parameters. @param conf Hadoop configuration @param fs FileSystem instance @param file Output file path @param valClass Class type of the value to write @param compress Compression type for output @param progress Progressable object for tracking progress @throws IOException if an I/O error occurs
3272 Constructs a Writer instance with specified configuration and file system. @param conf Hadoop configuration @param fs FileSystem object @param dirName directory name for output @param keyClass class of keys to be written @param valClass class of values to be written @throws IOException if an I/O error occurs
3273 Deprecated constructor for Writer. @param conf configuration settings @param fs file system @param dirName directory name @param keyClass key class type @param valClass value class type @param compress compression type @param progress progressable object @throws IOException if an I/O error occurs
3274 Deprecated constructor for Writer. @param conf Hadoop configuration @param fs FileSystem instance @param dirName output directory name @param keyClass key class type @param valClass value class type @param compress compression type @param codec compression codec @param progress progressable object @throws IOException if an I/O error occurs
3275 Deprecated constructor for Writer. @param conf Configuration object @param fs FileSystem instance @param dirName directory name @param keyClass key class type @param valClass value class type @param compress compression type @throws IOException if an I/O error occurs
3276 Deprecated constructor for Writer. @param conf Configuration object @param fs FileSystem instance @param dirName directory name for output @param comparator WritableComparator for key comparison @param valClass class of the values @throws IOException if an I/O error occurs
3277 Constructs a Writer with specified configuration. @param conf Hadoop configuration @param fs FileSystem instance @param dirName directory name for writing @param comparator key comparator @param valClass value class type @param compress compression type for sequence file @throws IOException if an I/O error occurs
3278 Deprecated constructor for Writer. @param conf configuration settings @param fs file system reference @param dirName directory name for output @param comparator key comparator @param valClass value class type @param compress compression type @param progress progressable instance @throws IOException if an I/O error occurs
3279 Deprecated constructor for Writer. @param conf configuration settings @param fs file system @param dirName directory name @param comparator key comparator @param valClass value class @param compress compression type @param codec compression codec @param progress progressable object @throws IOException if an I/O error occurs
3280 Creates a Writer for writing data to a file. @param fc FileContext instance @param conf Configuration settings @param name Path of the file to write @param keyClass Class type of keys @param valClass Class type of values @param compressionType Compression type to use @param codec Compression codec @param metadata Metadata for the file @param createFlag Flags for file creation @param opts Additional options for creation @return Writer instance for writing data @throws IOException if an I/O error occurs
3281 Main entry point for processing command line arguments. Handles options like -glob and -jar for classpath operations.
3282 Creates a ClassLoader based on the provided file and work directory. @param file main file for classpath @param workDir working directory containing classes and libraries @return created ClassLoader instance
3283 Processes general options from command line. @param line CommandLine object containing parsed options @throws IOException if an I/O error occurs
3284 Retrieves cache file path using configuration and allocator. @param conf Hadoop configuration object @param localDirAllocator directory allocator for temporary files @return Path to the cache file @throws IOException if an I/O error occurs
3285 Checks if cache space is available for a file. @param fileSize size of the file to be cached @param conf configuration settings @param localDirAllocator allocator for local directories @return true if sufficient space, false otherwise
3286 Merges segment descriptors into a single iterator. @param segments list of segment descriptors to merge @param tmpDir temporary directory for intermediate files @return RawKeyValueIterator over merged data @throws IOException if an I/O error occurs during merging
3287 Merges multiple input files into a single iterator. @param inNames array of input file paths @param deleteInputs flag to delete input files after merging @param factor merge factor @param tmpDir temporary directory for intermediate files @return RawKeyValueIterator over merged data @throws IOException if an I/O error occurs
3288 Merges input files into a single sorted file. @param inNames array of input file paths @param tempDir temporary directory for intermediate outputs @param deleteInputs flag to delete input files after merging @return iterator over merged key-value pairs @throws IOException if an I/O error occurs
3289 Merges segments from the given input and index paths. @param inName path to input data @param indexIn path to index file @param tmpDir temporary directory for merge operations @return RawKeyValueIterator containing merged data @throws IOException if an I/O error occurs during merging
3290 Initializes a Writer with specified configuration and compression.
3291 Initializes a Writer with specified FileSystem, directory, and key class. @param fs the FileSystem to use @param dirName the directory name for output @param keyClass the key class type @throws IOException if an I/O error occurs
3292 Merges multiple input map files into one output file. @param inMapFiles array of input map file paths @param deleteInputs flag to delete input files after merging @param outMapFile path for the merged output file @throws IOException if an I/O error occurs during processing
3293 Creates a writer for a file in the specified FileSystem. @param fs FileSystem instance @param conf Configuration settings @param name Path of the file to create @param keyClass Class type for keys @param valClass Class type for values @param bufferSize Size of the buffer @param replication Replication factor @param blockSize Block size @param createParent Flag to create parent directories if needed @param compressionType Type of compression @param codec Compression codec to use @param metadata Metadata for the file @return Writer object for the created file @throws IOException if an I/O error occurs
3294 Parses general command-line options. @param opts Options object to configure @param args Command-line arguments array @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs during parsing
3295 Caches a block of data in local storage. @param blockNumber unique identifier for the block @param buffer data to be cached @param conf configuration settings @param localDirAllocator allocator for local directories @throws IOException if an I/O error occurs
3296 Merges multiple input paths into a single iterator. @param inNames array of input file paths @param deleteInputs flag to delete input files after merging @param tmpDir temporary directory for intermediate results @return RawKeyValueIterator containing merged data
3297 Executes a merge pass on sorted files. @param tmpDir temporary directory for intermediate files @return 0 indicating successful completion @throws IOException if an I/O error occurs
3298 Main entry point to run a JAR file. @param args command-line arguments passed to the application
3299 Parses command-line arguments using provided configuration and options. @param conf Configuration object for parsing @param options Command-line options to be parsed @param args Array of command-line arguments @throws IOException if an I/O error occurs during parsing
3300 Sorts input files and returns an iterator over sorted key-value pairs. @param inFiles array of input file paths @param tempDir temporary directory for sorting @param deleteInput flag to delete input files after processing @return RawKeyValueIterator over sorted data or null if no segments @throws IOException if sorting fails or output file already exists
3301 Merges multiple input files into a single output file. @param inFiles array of input file paths @param outFile path to the output file @throws IOException if output file already exists or an I/O error occurs
3302 Sorts input files and merges them into an output file. @param inFiles array of input file paths @param outFile path to the output file @param deleteInput flag to delete input files after processing @throws IOException if I/O operations fail or output file already exists
3303 Constructs a GenericOptionsParser. @param opts command-line options @param args command-line arguments @throws IOException if an I/O error occurs
3304 Parses command-line arguments using default configuration and options. @param args command-line arguments array @throws IOException if an I/O error occurs during parsing
3305 Initializes GenericOptionsParser with configuration and arguments. @param conf Configuration object @param args Command-line arguments array @throws IOException if an I/O error occurs during parsing
3306 Sorts input file and writes to output file. @param inFile path to the input file @param outFile path to the output file @throws IOException if an I/O error occurs
3307 Creates a GenericOptionsParser with specified configuration and arguments. @param conf Configuration object @param argArray Array of command-line arguments @return GenericOptionsParser instance @throws IOException if there is an I/O error
3308 Runs a Hadoop tool with given configuration and arguments. @param conf Configuration object, may be null @param tool Tool to execute @param args Command-line arguments @return Exit code from the tool's run method @throws Exception if an error occurs during execution
3309 Parses command-line arguments and updates configuration. @param conf Configuration object to update @param args List of command-line arguments @return List of remaining arguments after parsing @throws ServiceLaunchException if parsing fails
3310 Executes a diagnostic tool with configuration and arguments. @param conf configuration settings for the tool @param argv command-line arguments for the tool @return exit code from the tool execution @throws Exception if an error occurs during execution
3311 Runs credential shell tool. @param args command-line arguments
3312 Main entry point of the program. @param args command-line arguments @throws Exception if an error occurs during execution
3313 Runs a tool with given arguments. @param tool the Tool instance to execute @param args command-line arguments for the tool @return exit code from the tool execution @throws Exception if an error occurs during execution
3314 Extracts command options from arguments. @param conf configuration object @param args list of command-line arguments @return list of extracted options
3315 Main entry point of the application. @param argv command line arguments
3316 Executes Hadoop file system commands. @param argv command-line arguments
3317 Main entry point for command-line tool. Initializes and runs CLI with provided arguments. @param args command-line arguments
3318 Main entry point for running FindClass. @param args command-line arguments
3319 Launches a service with provided arguments and exits. @param args list of command-line arguments
3320 Entry point of the application. @param args command line arguments passed to the program
3321 Main entry point for the service. Converts varargs to list and calls overloaded method. @param args command line arguments
