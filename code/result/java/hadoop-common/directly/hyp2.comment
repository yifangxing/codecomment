1 Creates a FileRange object with the given offset and length.
2 Creates a FileRange object with the given offset, length, and reference.
3 Validates a FileRange request. @param range The FileRange object to validate. @return The validated FileRange object. @throws EOFException if offset is negative.
4 Checks if the given object is not null. @param obj Object to check. @param argName Name of the argument.
5 Checks if the given value is a positive integer. @param value The value to check. @param argName Name of the argument being checked.
6 Checks if the given value is non-negative. @param value The value to check. @param argName Name of the argument being checked.
7 Checks if a boolean argument is present; throws exception if not. @param isPresent boolean value to check @param argName name of the argument being checked
8 Checks if a boolean argument is valid, throwing an exception if not. @param isValid The boolean value to check. @param argName Name of the argument being validated.
9 Checks if a boolean value is valid, throws exception if not. @param isValid The boolean value to check. @param argName Argument name. @param validValues Valid values string.
10 Checks if two long values are equal, throwing an exception if not. @param value1Name Name of the first value. @param value2Name Name of the second value.
11 Checks if value1 is an integer multiple of value2. @param value1 First value. @param value1Name Name of first value. @param value2 Second value. @param value2Name Name of second value.
12 Checks if value1 is greater than value2, throws exception if not. @param value1 First value. @param value1Name Name of first value. @param value2 Second value. @param value2Name Name of second value.
13 Checks if value1 is greater than or equal to value2. @param value1 First value. @param value2 Second value.
14 Checks if value1 is less than or equal to value2. @param value1 First value. @param value1Name Name of the first value. @param value2 Second value. @param value2Name Name of the second value.
15 Checks if a value is within a specified inclusive range. @param value The value to check. @param valueName Name of the value being checked.
16 Checks if a value is within a specified inclusive range. @param value The value to check. @param valueName Name of the value being checked.
17 Validates a collection of paths, ensuring they are absolute and under the specified base path, with a page size limit.
18 Initializes BlockUploadData with a file. @param file The file to be uploaded. Throws if file doesn't exist.
19 Casts the snapshot to IOStatisticsSnapshot and validates type. @param snapshot The snapshot to cast; must be an IOStatisticsSnapshot. @return The casted snapshot.
20 Maps enum names to values with a prefix. @param prefix Prefix to add to enum names. @param enumClass Enum class to map. @return Map of enum name (with prefix) to enum value.
21 Sorts a list of FileRange objects and returns them as an array.
22 Checks if a path is a parent of another path. @param parent Parent path. @param child Child path. @return True if parent is a parent of child.
23 Checks if two paths are on the same filesystem. @param qualPath1 First path. @param qualPath2 Second path.
24 Registers a file to be deleted when the JVM exits. @param f the file to delete on exit @return true if registration was successful, false otherwise
25 Processes paths to delete on exit, ignoring deletion failures.
26 Checks if a file is a checksum file (.crc). @param file The Path object representing the file. @return True if the file is a checksum file, false otherwise.
27 Checks if a file is a checksum file (.crc). @param file The Path object representing the file. @return True if the file is a checksum file, false otherwise.
28 Adjusts BlockLocation offsets/lengths based on start, len, and file offset.
29 Compares this file status with another based on their paths.
30 Converts FileStatus[] to Path[]. @param stats array of FileStatus objects @return array of Path objects
31 Resolves an intermediate path by following symbolic links. @param f The path to resolve. @return The resolved Path.
32 Gets the replication factor of a file. @param src The path to the file. @return The replication factor.
33 Gets the block size of a file. @param f Path to the file. Returns block size as long.
34 Returns the default replication factor. No path is used, always returns the default.
35 Cleans up thread-local StatisticsData, merging into rootData.
36 Validates arguments for positioned read operations. @param position Read position. @param buffer Buffer. @param offset Offset within the buffer. @param length Number of bytes to read.
37 Validates the uploadId: must be non-null and non-empty. @param uploadId The upload ID to validate. @throws IllegalArgumentException if uploadId is invalid.
38 Validates part handles; ensures map is non-empty and keys are positive.
39 Validates and converts capability to lowercase. @param path The path being validated. @param capability Capability string to validate. @return Lowercase capability string.
40 Creates an IrqHandler with the given name and interrupt handler. @param name handler name @param handler interrupt handler to execute
41 Partitions a list into sublists of the specified page size. @param originalList List to partition. @param pageSize Size of each sublist. @return List of sublists.
42 Creates a JsonSerialization instance. @param classType Type to serialize. @param failOnUnknownProperties Whether to fail on unknown props. @param pretty Whether to format the JSON output.
43 Creates a StorageStatisticsFromIOStatistics object. @param name Name of the storage statistics. @param scheme Storage scheme. @param ioStatistics IO statistics used for calculations.
44 Returns a map of all statistics, scheme as key, Statistics object as value.
45 Creates a data output stream for writing to a file. @param f Path to the file, permissions, flags, buffer size, etc. @return FSDataOutputStream for writing to the file.
46 Creates a non-recursive data output stream. @param f Path to create stream on. @param permission FsPermission for the file.
47 Constructs a PathAccessDeniedException with the given path. @param path The path that access was denied for.
48 Constructs a PathPermissionException with the given path. @param path The path for which permission is denied.
49 Constructs a PathNotFoundException with the given path. @param path The path that was not found.
50 Constructs a PathExistsException with the given path. @param path The path of the existing file.
51 Constructs a PathIOException with the given path. @param path The path associated with the I/O error.
52 Constructs a ClosedIOException with a path and message. @param path The file path. @param message The error message.
53 Returns a builder object representing the current object.
54 Converts to an extended short, returning the short value.
55 Converts the short value to its octal representation. Returns the octal value as a short.
56 Interns strings in the input array using weakIntern. @param strings Array of strings to be interned. @return The array with interned strings.
57 Checks if the file is a directory. Deprecated, use isDirectory().
58 Checks if a Path represents a directory. @param f the Path to check @return true if it's a directory, false otherwise.
59 Checks if a path is recursable (is a directory). @param item PathData object to check. @throws IOException if an I/O error occurs.
60 Returns ACL entries based on recursive flag and item type.
61 Checks if a path represents a directory. @param f the path to check @throws IOException if an I/O error occurs
62 Applies a new permission to a file status. @param file the FileStatus to modify @return the new permission as a short
63 Checks if the file is a regular file, not a directory or symlink.
64 Returns the target path of the symbolic link. @throws IOException if the path is not a symbolic link.
65 Gets the length of the file. Returns -1 if not cached.
66 Gets the length of a file. @param f Path to the file. @return File length in bytes.
67 Retrieves the storage policy for a given source path. @param src Path for which to retrieve the storage policy. @return The BlockStoragePolicySpi associated with the path.
68 Sets an extended attribute on a path. @param path Path to set the attribute on. @param name Attribute name. @param value Attribute value.
69 Constructs a PathIOException with the given path and cause.
70 Seeks to the specified position in the input stream. @param position The position to seek to.
71 Reads the record length from the input stream. Returns -1 if end of stream is reached.
72 Returns the current position of the input stream. @return The current position as a long.
73 Registers an expression class with the factory. @param expressionClass Class to register, must have a register method.
74 Registers commands using reflection. @param registrarClass Class with registerCommands method.
75 Reads data from the stream, adjusting length if needed. @param pos byte offset @param b buffer @param offset offset within buffer @param length number of bytes to read @return bytes read, or -1 if end of stream
76 Reads up to {@code length} bytes from the stream at position {@code pos}.
77 Expands the leftmost alternative in a file pattern. @param filePatternWithOffset Pattern with offset information. @return List of expanded patterns or null if no match.
78 Lists directory entries as a batch. @param f Path to directory. @param token Token for batching (ignored). @return DirectoryEntries object.
79 Encodes byte array to string based on specified encoding. @param value byte array to encode @param encoding encoding type (HEX, BASE64, or default) @return Encoded string representation of the byte array.
80 Filters file statuses based on a path filter and adds to results. @param results List to add matching FileStatus objects. @param f Path to list. @param filter PathFilter to apply.
81 Creates a MetricsTag with given info and value. @param info MetricsInfo object @param value Tag value as a string
82 Constructs a new AbstractMetric with the given metrics info. @param info The MetricsInfo object containing metric details.
83 Obtains a delegation token from the KDC. @param url KDC URL, token, renewer, doAsUser - for token creation. @return Delegation token or null on failure.
84 Renews a delegation token. @param url URL for renewal, @param token Token to renew, @param doAsUser User to act as. Returns new expiry.
85 Cancels a delegation token. @param url URL to cancel on, @param token Token to cancel, @param doAsUser User to act as.
86 Constructs a ValueQueue with specified parameters for value queuing.
87 Checks if the object is null; throws NPE if so. @param obj The object to check.
88 Adds or retrieves storage statistics for a given name. @param name Statistics name. @param provider Provider for creating statistics. @return StorageStatistics object.
89 Resets global storage statistics to their initial values.
90 Closes the block upload data, cleaning up resources. Releases stream, deletes file, and resets internal state.
91 Copies a file from src to dst without buffering. @param src Source file. @param dst Destination file.
92 Closes the provided Closeable stream, handling null input.
93 Closes all provided Closeable streams. Handles null input.
94 Checks disk I/O without native I/O, deletes the test file.
95 Flushes the buffer and calls FileDescriptor.sync() for synchronization.
96 Closes the resource, recording stats and duration.
97 Sets the count to a new value and returns the old count. @param newCount The new count value (0 <= newCount <= buf.length) @return The previous count value.
98 Gets the InetSocketAddress of the connector at the given index. @param index connector index; returns null if out of bounds.
99 Constructs a GcTimeMonitor with given parameters for GC time monitoring.
100 Extracts the raw path from the request URI. @param request HTTP request object. @param servletName Servlet name prefix. @return Raw path after the servlet name.
101 Checks if this file status is equal to another. @param o The object to compare to. @return True if equal, false otherwise.
102 Returns the hash code, based on the path.
103 Sets the sample count and sum. @param sampleCount Number of samples. @param newSum The new sum value.
104 Adds another MeanStatistic to this one, updating sum and count. @param other The MeanStatistic to add. Returns this.
105 Appends map content to StringBuilder, formatted by type and separator. @param sb StringBuilder to append to. @param type Type string. @param map Map to format. @param separator Separator string.
106 Converts a map entry to a string. @param entry Map entry with key (String) and value (E) @return String representation of the entry
107 Creates a DurationTracker for the given key and count. @param key Identifier for the duration being tracked. @param count Initial count value. @return A DurationTracker instance.
108 Creates a LongStatistic from a map entry (key, value).
109 Creates an EvaluatingStatisticsMap with a passthrough function.
110 Adds a function to the counters with the given key. @param key Function key. @param eval Function to evaluate.
111 Adds a gauge function to the collection. @param key Function key. @param eval Function that evaluates to a Long.
112 Adds a function to the minimums collection. @param key Function key. @param eval Function to evaluate.
113 Adds a function to the maximums tracker. @param key Function key. @param eval Function to evaluate.
114 Adds a function to calculate mean statistic for a key. @param key Function key @param eval Function to calculate the mean statistic
115 Wraps an IOStatistics object in a SourceWrappedStatistics. @param statistics The IOStatistics object to wrap. @return A SourceWrappedStatistics instance.
116 Returns an empty IO statistics store instance.
117 Returns a shared instance of empty IO statistics.
118 Retrieves the AtomicLong counter reference for the given key. @param key The key to look up in the counter map. @return The AtomicLong counter or null if not found.
119 Retrieves the maximum reference for the given key. @param key The key to look up in the maximumMap. @return AtomicLong representing the maximum reference.
120 Retrieves the minimum reference for the given key. @param key The key to look up. @return AtomicLong or null if not found.
121 Retrieves a gauge reference by key. @param key The key of the gauge to retrieve. @return AtomicLong representing the gauge value.
122 Retrieves the mean statistic by key. @param key The key to look up the statistic by. @return The MeanStatistic object, or null if not found.
123 Returns the duration of the first duration as a Duration.
124 Sets the wrapped statistics, overwriting if none exist. @param wrapped The IOStatistics instance to wrap.
125 Returns the active DynamicIOStatistics instance. Checks if the instance is initialized; throws exception if not.
126 Verifies the FlagSet is mutable. Throws exception if immutable.
127 Converts the block data to a byte array. Reads from file or stream, caches result. @throws IOException if an I/O error occurs.
128 Binds the handler to the signal. Throws IllegalArgumentException if handler is already bound.
129 Decrements the reference count and checks if it's closed. @return True if the reference count reached STATUS_CLOSED_MASK.
130 Creates a concurrent snapshot of a map, copying values. @param source Source map to snapshot. @param copyFn Function to copy values. @return ConcurrentHashMap containing the snapshot.
131 Tracks the duration of an operation and returns its result. @param factory DurationTrackerFactory instance @param statistic Statistic name @param input Callable raising IOE, returns result @return Result of the operation
132 Creates a PairedDurationTrackerFactory from two factories. @param first The first DurationTrackerFactory. @param second The second DurationTrackerFactory. @return A PairedDurationTrackerFactory.
133 Returns the backoff duration for disconnected clients. @return Long value representing the backoff duration.
134 Returns the number of slow RPC calls. @return The count of slow RPC calls.
135 Returns the number of RPC requeue calls.
136 Resets the IO statistics context, clearing the internal statistics.
137 Initializes the IOStatisticsSnapshot by creating necessary maps.
138 Checks if IO statistics at thread level are enabled. Returns true if enabled, false otherwise.
139 Initializes a new BuiltInGzipDecompressor instance. Resets the state and CRC.
140 Updates the encryptor with the current stream offset. Calculates padding and IV for encryption.
141 Adjusts buffer size to be a multiple of the cipher block size. @param codec CryptoCodec instance. @param bufferSize Initial size.
142 Creates a hard link from src to dst. Uses native method if available.
143 Constructs a MD5MD5CRC32GzipFileChecksum object. @param bytesPerCRC Bytes per CRC value. @param crcPerBlock CRC value per block. @param md5 The MD5 hash object.
144 Default constructor for MD5MD5CRC32FileChecksum. Initializes with default values.
145 Constructs a CastagnoliFileChecksum with given parameters. @param bytesPerCRC Bytes per CRC value. @param crcPerBlock CRC value per block. @param md5 MD5 hash object.
146 Converts a glob string to a regex pattern, handling special chars. @param glob the glob string to convert
147 Returns an iterator for file statuses at the given path. @param f the path to list @return RemoteIterator of FileStatus objects
148 Converts a File object to a shell-compatible path string. @param file The file to convert. @param makeCanonicalPath Whether to use canonical path.
149 Extracts Posix file permissions from a mode integer. @param mode integer representing file mode bits @return Set of PosixFilePermission objects
150 Executes the command sequence, throwing IOException on null entries.
151 Checks if the combined length of commands exceeds the Windows limit. @param commands Array of commands to check. @throws IOException if the combined length is too long.
152 Builds a PowerShell script to terminate a process on a host. @param processName Process name to terminate. @param host Hostname where the process runs. @return Absolute path to the generated PowerShell script.
153 Returns the checksum size from the underlying sum object.
154 Calculates the total size of checksums for given data size. @param dataSize The size of the data in bytes. @return The total checksum size in bytes.
155 Converts a checksum value to a byte stream of specified size. @param sum Checksum object. @param checksumSize Size of the byte array.
156 Adds new bytes read to the thread statistics. @param newBytes The number of bytes to add.
157 Increments the total bytes written by the specified amount. @param newBytes The number of bytes to add to the total.
158 Increments the read operations count by the given amount. @param count The amount to increment the read operations by.
159 Increments the number of large read operations by the given count.
160 Increments the number of write operations by the given count. @param count The amount to increment write operations by.
161 Increments the number of erasure-coded bytes read. @param newBytes The number of bytes to add.
162 Increments bytes read based on distance. @param distance distance value; determines which counter to increment. @param newBytes number of bytes read.
163 Increases the remote read time by the given duration in milliseconds.
164 Visits all data and aggregates results using the visitor. @param visitor Aggregator to process and combine data. @return Aggregated result from visiting all data.
165 Constructs a ContentSummary with values from the Builder. @param builder The Builder object containing initialization values.
166 Default constructor. Initializes with default checksum type.
167 Creates a disabled ChecksumOpt with a null checksum type.
168 Validates CreateFlag enum set, throwing exception on invalid state.
169 Validates URI scheme matches the supported scheme. @param uri The URI to validate. @param supportedScheme The expected scheme.
170 Constructs an InvalidPathException with the given path. @param path The invalid path name.
171 Constructs an InvalidPathException with a path and reason. @param path The invalid path. @param reason Optional reason for the invalid path.
172 Finds the first non-null element in the input array. @param inputs Array of elements to check. @return The first non-null element, or throws exception.
173 Finds the first non-null element in an array. @param inputs Array of elements to check. @return First non-null element or throws exception.
174 Validates buffers, ensuring they are non-null and of correct length.
175 Validates the provided output buffers against expected properties. @param buffers Array of ByteBuffers to validate.
176 Validates buffers, ensuring they are non-null and of correct length.
177 Validates buffers, ensuring they are non-null, correct length, and directness.
178 Closes the given proxy or its invocation handler, if possible. Throws exception if neither is Closeable.
179 Determines the ChecksumOpt based on user and default options. @param defaultOpt Default ChecksumOpt. @param userOpt User-specified ChecksumOpt. @param userBytesPerChecksum User-specified bytes per checksum. @return Combined ChecksumOpt.
180 Gets default port, using FS default if FS default is 0. @param theFsImpl FileSystem implementation. @return Default port number.
181 Canonicalizes a URI, setting the default port if missing. @param uri The URI to canonicalize. @return The canonicalized URI.
182 Sets the replication factor for a given path. @param src The path to set replication for. @param replication The new replication factor. @return True if successful, false otherwise.
183 Disconnects the FTP client, logging out and handling errors. @param client The FTPClient to disconnect. @throws IOException if an I/O error occurs.
184 Closes the underlying output stream.
185 Default constructor for ContentSummary. Deprecated.
186 Creates a ContentSummary object with provided data. @param length File length, fileCount, directoryCount, quota, etc.
187 Calculates the remaining delay based on the given time unit. @param unit Time unit for delay calculation (e.g., SECONDS) @return Delay in the specified time unit.
188 Updates the renewal time by adding a delay, adjusted slightly.
189 Updates the last activity timestamp to the current time.
190 Sleeps for at least 'millis' milliseconds, ignoring interrupts.
191 Returns the current time in milliseconds.
192 Waits for all executor threads to terminate, timeout in ms. @param milliseconds Timeout duration in milliseconds. @return True if all threads terminated, false otherwise.
193 Verifies checksums of data chunks against sums, throws exception on mismatch. @param sumsBytes Byte buffer containing checksum sums. @param data Byte buffer containing data to check.
194 Opens a file for input. @param f Path to the file to open. @return FSDataInputStream for reading the file.
195 Calculates checksum length based on file size. @param file Path to the file. @param fileSize File size in bytes.
196 Returns a fixed FsStatus object for a given path. @param p The path to check (not used in the implementation). @return A pre-defined FsStatus object.
197 Registers command classes with the given command factory. @param factory CommandFactory instance to register commands.
198 Registers the Find command with the given command factory.
199 Registers the "count" command with the given command factory.
200 Constructs a CommandFormat with a name. @param name Command name. @param min Minimum number of arguments. @param max Maximum number of arguments.
201 Executes a CallableRaisingIOE in a thread and returns a CompletableFuture.
202 Rejects unknown mandatory keys, delegating to a private method. @param knownKeys Keys known to the system @param extraErrorText Additional error text to append @throws IllegalArgumentException if unknown keys are found
203 Returns a list of capability names. Filters based on hasCapability.
204 Builds an HTTP Referer header string from attributes. Returns an empty string if URI construction fails.
205 Constructs a WeakReferenceMap with a factory and optional listener. @param factory Creates values for keys. @param referenceLost Called when a reference is lost.
206 Checks if the OutputStream has the specified capability. @param out The OutputStream to check. @param capability Capability string to check for.
207 Checks if an input stream has a specific capability. @param in InputStream to check @param capability Capability string to check for
208 Shuts down the executor gracefully within a timeout. @param logger Logger for logging shutdown events. @param timeout Timeout duration. @param unit Time unit of the timeout.
209 Acquires an element. Delegates to acquireHelper with 'true'.
210 Attempts to acquire the resource. Delegates to acquireHelper with 'tryMode' as false.
211 Returns the number of available items. Calculates based on size, created items, and items in the list.
212 Constructs a SingleFilePerBlockCache with given statistics, max blocks, and duration tracker factory.
213 Constructs a SemaphoredDelegatingExecutor. @param executorDelegatee Executor to delegate tasks to. @param permitCount Semaphore permit count.
214 Adds an entry to the head of the linked list under a write lock. @param entry The entry to add.
215 Marks the operation as done, verifying checksum if present.
216 Sets the buffer size for the data input stream. @param bufSize The desired buffer size in bytes. @return This builder instance for chaining.
217 Returns a builder for constructing FutureDataInputStream.
218 Retrieves value associated with the current thread's ID. @return Value for the current thread, or null if not found.
219 Removes the entry associated with the current thread. @return The removed value, or null if not found.
220 Sets a value for the current thread, returning the old value. @param newVal The new value to set. @return The previous value associated with the thread.
221 Merges another range into this range if conditions are met. @param other The range to merge. @return True if merged, false otherwise.
222 Creates a BulkDelete operation for the given path. @param path Path to delete; throws IllegalArgumentException if invalid. @return A new BulkDelete operation.
223 Registers the And class with the ExpressionFactory. Adds aliases "-a" and "-and" for the And expression.
224 Registers ExpressionFactory classes for printing. @param factory The ExpressionFactory to register with.
225 Registers ExpressionFactory classes. Adds Name and Iname classes to the factory.
226 Constructs a Name object. @param caseSensitive Flag to determine case sensitivity.
227 Finds a CompressionCodec based on the file's reversed name. @param file The path to the file. @return The matching CompressionCodec or null.
228 Formats a template string using the mode's lowercase string representation.
229 Generates a config suffix from the name, converting parts to lowercase.
230 Combines this result with another. Returns a new Result. @param other The other Result to combine with. @return A new Result representing the combined pass/descend status.
231 Negates the result: inverts pass status, keeps descend flag.
232 Creates and configures FindOptions object for command execution. @return FindOptions object with configured parameters.
233 Checks if the given expression name is a valid expression. @param expressionName Name of the expression to check. @return True if the expression is valid, false otherwise.
234 Adds multiple children expressions. @param exprs Deque of expressions to add. @param count Number of expressions to add.
235 Adds arguments to the argument list by popping from the deque. @param args Deque of arguments to add. @param count Number of arguments to add.
236 Converts a string to a URI, handling scheme and authority. @param pathString String representation of the URI @return URI object or throws IllegalArgumentException on error
237 Initialises the order comparator based on time, size, or default.
238 Checks if the command is deprecated. Returns true if a replacement command is defined.
239 Returns the name, stripping "-" if present. Returns command name if name is null.
240 Sets whether to preserve file attributes. @param preserve True to preserve, false to clear preservation status.
241 Constructs a MetricsRecordBuilderImpl with given parameters. @param parent MetricsCollector parent, info, filters, acceptable
242 Constructs a ChunkedArrayList with initial capacity and max size. @param initialChunkCapacity Initial chunk capacity. @param maxChunkSize Maximum chunk size.
243 Finds the index of the first default AclEntry. @param aclBuilder List of AclEntry objects. @return Index of the default entry, or PIVOT_NOT_FOUND.
244 Creates a snapshot of the given path. @param path Path to snapshot. @return Path to the created snapshot.
245 Adds an option to the optionsWithValue map. Throws exception if option already exists.
246 Creates a table with the given headers as the first row. @param headers Array of objects to use as table headers.
247 Checks if the collection is empty. @return True if the collection is empty, false otherwise.
248 Constructs a Shell with a given interval. @param interval The interval for the shell.
249 Constructs a Token object. @param identifier Identifier bytes. @param password Password bytes. @param kind Text kind. @param service Text service.
250 Default constructor. Initializes token fields to empty byte arrays.
251 Constructs a Globber with a file context, path pattern, filter, and symlink resolution flag.
252 Constructs a detailed error message including operation, path, and cause. @return A string representation of the error message.
253 Handles SASL connection failure, retries if possible, or throws. @param currRetries Current retry count. @param maxRetries Max retry count.
254 Checks if the given file system is a ViewFS. @param fileSystem The file system to check. @return True if ViewFS, false otherwise.
255 Sets quota for a given path. Throws UnsupportedOperationException.
256 Sets quota for a storage type. Currently a no-op. @param src Path to the storage. @param type Storage type. @param quota Quota value. @throws IOException if an I/O error occurs (unlikely).
257 Creates a MultipartUploaderBuilder. Currently throws an exception.
258 Lists located file statuses for a path. @param f the path to list @return RemoteIterator of LocatedFileStatus objects
259 Lists located file statuses for a path, using the default filter. @param f The path to list statuses for. @return A RemoteIterator of LocatedFileStatus objects.
260 Gets the checksum of a file. @param f Path to the file. @return FileChecksum object.
261 Sets an extended attribute on a path. @param path Path to set the attribute on. @param name Attribute name. @param value Attribute value.
262 Opens a file with specified options. @param path Path to the file. @param parameters OpenFileParameters object. @return CompletableFuture with FSDataInputStream.
263 Opens a file with specified options. @param path Path to the file. @param parameters OpenFile parameters. @return CompletableFuture with FSDataInputStream.
264 Opens a file with specified options. @param path Path to the file. @param parameters OpenFileParameters object. @return CompletableFuture with FSDataInputStream.
265 Opens a file with specified options and buffer size. @param pathHandle Path to the file. @param parameters OpenFileParameters object. @return CompletableFuture wrapping FSDataInputStream.
266 Retrieves all available BlockStoragePolicySpis. @return Collection of BlockStoragePolicySpi instances.
267 Initializes a map of FileSystem objects from mount points. @param mountPoints list of mount points to initialize @return Map of mount paths to FileSystem objects
268 Builds a ResolveResult for a regex mount point. @param resultKind Result kind. @param resolvedPathStr Resolved path string. @param targetOfResolvedPathStr Target file system URI. @param remainingPath Remaining path. @return ResolveResult object or null on error.
269 Creates and returns a ChildFsGetter instance. Uses the scheme of the parent FsObject.
270 Constructs a NodeLink with provided path, UGI, target FS, and links.
271 Initializes a NodeLink with a path, UGI, and file system creation method. @param pathToNode Node path @param aUgi UserGroupInformation @param createFileSystemMethod Method to create file system @param aTargetDirLink Target directory link
272 Replaces variable names in path with regex group value. @param parsedDestPath Path to modify. @param srcMatcher Regex matcher. @param regexGroupNameOrIndexStr Group name/index. @param groupRepresentationStrSetInDest Variable names to replace.
273 Decrypts data from inBuffer to outBuffer using the given decryptor. @param decryptor Decryptor implementation @param inBuffer Input buffer containing encrypted data @param outBuffer Output buffer for decrypted data @param padding Padding value
274 Verifies that the context is not zero.
275 Checks if the parent znode exists. @return True if the znode exists, false otherwise.
276 Gets the config view FS prefix. Delegates to the default mount table.
277 Deserializes RegexMountPointResolvedDstPathReplaceInterceptor from string. @param serializedString String representation of the interceptor. @return RegexMountPointResolvedDstPathReplaceInterceptor object.
278 Returns the readable byte channel associated with this socket. Returns (SocketInputStream)in.
279 Calculates checksum length based on file size and bytes per sum. @param file Path to the file. @param fileSize File size in bytes.
280 Returns the filesystem type (e.g., "ntfs" or "ext4"). Uses Windows path or executes a command to determine.
281 Retrieves the mount point of the directory. Returns mount string, throws IOException if path doesn't exist.
282 Calculates the percentage of storage used. Returns the percentage as an integer.
283 Constructs an FSInputChecker with file, retries, and checksum options. @param file The path to the file.
284 Checks if an InputStream can be read using a ByteBuffer.
285 Initializes the audit context by setting the thread ID.
286 Sets a global context entry for command based on the tool's class.
287 Retrieves a value associated with the key as an optional long. @param key The key to search for. @param value The value to use if not found. @return An OptionalLong containing the value or default.
288 Deprecated: Returns B from long value for key. @param key key to look up @param value float value to convert to long @return B object or null if not found
289 Sets the value associated with the given key to the provided long. @param key key to associate with the value @param value the long value to set
290 Deprecated: Returns B by key, casting value to long.
291 Delegates to mustLong, setting a key-value pair. @param key The key to set. @param value The integer value.
292 Deprecated: Converts a float value to a long and persists it.
293 Deprecated: Creates a B object with the given key and value.
294 Deprecated: Converts a key-value pair to a long and returns it.
295 Retrieves a row from the data, wraps if needed, and justifies. @param idx row index @return String array representing the formatted row
296 Starts local output using FileSystem. @param fsOutputFile Output file path. @param tmpLocalFile Temporary file path. @return Path representing the started output.
297 Calculates the effective permission based on ACL entry and permission. @param entry The ACL entry to evaluate. @param permArg The permission argument. @return The effective FsAction permission.
298 Constructs a PermissionStatus with username, group, and permission.
299 Parses an ACL entry string and creates an AclEntry object. @param aclStr ACL entry string to parse. @param includePermission Whether to include permission in parsing. @return AclEntry object representing the parsed ACL entry.
300 Generates a stable string representation of the AclEntry. Builds a string based on scope, type, name, and permission.
301 Converts a string to a string array using a delimiter. @param str input string @param delim delimiter string @return String array or null if empty
302 Splits a string into a collection of strings using ',' as delimiter. @param str The string to split. @return A Collection of strings.
303 Parses permission string using symbolic or octal patterns. @param modeStr Input permission string. @throws IllegalArgumentException if parsing fails.
304 Closes the block, handling different states and buffer file deletion.
305 Verifies the stream is open; throws exception if closed.
306 Transitions the state from current to next, verifying the current state.
307 Writes data from buffer to the output stream. @param buffer The buffer containing the data to write. @param offset The offset within the buffer. @param length The number of bytes to write. @return The number of bytes written.
308 Flushes the buffer to ensure data is written. Throws IOException if in an invalid state.
309 Sets an attribute with the given key and value. @param key Attribute key, cannot be null. @param value Attribute value.
310 Extracts query parameters from a URI header string. @param header The URI header string to parse. @return A map of parameter names and values.
311 Returns the data size, using dataSize if available, else buffer capacity.
312 Resolves a Path, throwing exceptions on failure. @param f The Path to resolve. @return The resolved Path.
313 Calls msync on the default file system. Throws IOException or UnsupportedOperationException.
314 Prints filesystem statistics to the console.
315 Retrieves statistics for a URI, creating if not present. @param uri The URI to retrieve statistics for. @return Statistics object for the URI.
316 Creates a MultipartUploaderBuilder. Returns null; method is unstable.
317 Retrieves an AllocatorPerContext for the given context name. @param contextCfgItemName Context name to retrieve. @return AllocatorPerContext object.
318 Retrieves the position from the cached output. @return The position value as a long.
319 Flushes output stream to the file system. Deprecated method.
320 Returns a collection of trimmed strings, removing empty strings.
321 Constructs a LoggingStateChangeListener with the default logger.
322 Constructs a ServiceStateException with a message. @param message The error message.
323 Constructs ServiceStateException with exit code, message, and cause. @param exitCode The exit code associated with the exception. @param message Exception message. @param cause The underlying cause of the exception.
324 Converts a Throwable to a RuntimeException or ServiceStateException. @param text Error message; @param fault The Throwable to convert.
325 Converts a Throwable to a RuntimeException or ServiceStateException.
326 Constructs a ServiceStateModel with a name and initial state. @param name The name of the service state model.
327 Checks if a state transition is valid based on the statemap. @param current Current state of the service. @param proposed Proposed new state. @return True if transition is valid, false otherwise.
328 Returns a string representation of the object's state.
329 Default constructor. Initializes with a null handler.
330 Handles a signal by incrementing count and notifying the handler. @param s The signal to handle.
331 Finds an IrqHandler by name. @param signalName Name of the handler to find. @return IrqHandler object or null if not found.
332 Constructs a ServiceLaunchException with exit code and cause.
333 Constructs a ServiceLaunchException with exit code and message.
334 Constructs a ServiceLaunchException with exit code, format, and args. Optionally sets cause if last arg is a Throwable.
335 Constructs a ServiceLaunchException with exit code, cause, and format string.
336 Executes the task by shutting down the system.
337 Constructs a ServiceLauncher with the same name for class and service. @param serviceClassName Name of the service class.
338 Logs an ExitException and sets service exit code/exception. @param exitException The exception to log and process.
339 Initializes command options by creating a new options object.
340 Loads configuration classes and returns the number loaded.
341 Registers a ServiceStateChangeListener to receive service state updates. @param l The listener to register.
342 Removes a global service state change listener. @param l The listener to remove. Returns true if removed.
343 Resets the global listeners to their initial state.
344 Notifies listeners and global listeners about changes. Handles exceptions during notification.
345 Initializes the service, overriding config if necessary. @param conf The configuration to use for initialization.
346 Adds a Service object if it's an instance of Service. @param object The object to check and potentially add. @return True if added, false otherwise.
347 Stops a service, logging warnings on failure. @param log Logger instance for warnings. @param service Service to stop. Returns exception if failed.
348 Stops a service, logs warnings on failure, returns exception.
349 Checks if an InputStream has pread capability. @param in The InputStream to check. @return True if pread capability exists, false otherwise.
350 Checks if the singleton instance is loaded. @return True if loaded, false otherwise.
351 Converts an instance to a JSON string. @param instance The object to convert. @return JSON string representation or error message.
352 Converts a FunctionRaisingIOE to an UncheckedFunction. @param fun The function to convert. @return An UncheckedFunction wrapping the input.
353 Converts an instance to JSON and back to the original type. @param instance The instance to convert. @return The original instance after JSON serialization/deserialization.
354 Parses a byte array as JSON and returns an object of type T. @param bytes Byte array containing JSON data. @return Object of type T parsed from JSON. @throws IOException If an I/O error occurs.
355 Constructs a new UTF8 object by copying from an existing one.
356 Writes a string to a DataOutput, truncating if too long. @param out DataOutput to write to @param s String to write @return Length of the written string
357 Skips a specified number of bytes from the input stream. @param in DataInput stream to skip bytes from.
358 Seeks to the specified position in the input stream. @param n the offset in the stream to seek to
359 Retrieves a value associated with the given key. @param n the key @param value the value to be used if not found @return The retrieved value, or the provided value if not found.
360 Constructs a new OutputBuffer using a default Buffer.
361 Returns the underlying data buffer. @return byte array containing the data.
362 Returns the length of the underlying buffer.
363 Resets the internal buffer to its initial state. Returns a reference to this OutputBuffer object.
364 Compares two objects, casting them to WritableComparable.
365 Compares two byte arrays from specified start offsets and lengths.
366 Calculates a hash value for the first 'length' bytes of 'bytes'.
367 Reads a float from the byte array, starting at the given index.
368 Reads a long value from a byte array, starting at the given index.
369 Reads a variable-length integer from the byte array. @param bytes byte array to read from @param start starting index in the byte array @return The integer value read from the byte array.
370 Constructs a BytesWritable with the given byte array. @param bytes The byte array to be wrapped.
371 Deprecated method; use getBytes() instead.
372 Returns the size of the data structure. Deprecated, use getLength().
373 Sets the capacity of the buffer, resizing if necessary. @param capacity The new capacity for the buffer.
374 Returns the size of the buffer tree, based on the 'direct' flag.
375 Schedules a readahead request or returns the last one. @param identifier stream identifier, fd file descriptor, curPos current position, readaheadLength length to read, maxOffsetToRead max offset, lastReadahead previous request.
376 Appends a key-value pair to the file, value defaults to NullWritable. @param key The key to append. @throws IOException if an I/O error occurs.
377 Advances to the next key/value pair. @param key The key to return the next pair for. @return True if a next pair exists, false otherwise.
378 Retrieves the key value. @return The key as a long.
379 Checks file access permission. @param path File path to check. @param desiredAccess Desired access right. @return True if access is granted, false otherwise.
380 Checks if native code is loaded. @return True if native code is loaded, false otherwise.
381 Checks if native code is loaded and nativeLoaded is true.
382 Checks if the native code is loaded, false if on SPARC.
383 Unmaps the given MappedByteBuffer. Uses CleanerUtil if supported.
384 Frees a ByteBuffer, using cleaner if supported, logs otherwise.
385 Writes data from the input stream to the buffer. @param in DataInput stream to read from @param length Number of bytes to write
386 Constructs an EnumSetWritable with the given EnumSet and element type.
387 Constructs a DataInputBuffer with a new internal buffer.
388 Resets the internal buffer with data from the input array. @param input The byte array to reset the buffer with. @param length The number of bytes to use from the array.
389 Resets the internal buffer with data from the input array. @param input Input byte array. @param start Start index in the input array. @param length Length of data to copy.
390 Returns the current position of the buffer.
391 Returns the length of the underlying buffer.
392 Constructs an ECSchema from provided options. @param allOptions Map of schema options; must contain codec name.
393 Constructs an ECSchema with codec name, data units, and parity units.
394 Returns the number of data blocks required by the schema.
395 Returns the number of parity blocks required by the schema.
396 Finds a RawErasureCoderFactory by coder name. @param codecName codec name @param coderName coder name to search for @return RawErasureCoderFactory or null if not found
397 Creates an ECBlockGroup from data and parity blocks. @param dataBlocks Data blocks for the group. @param parityBlocks Parity blocks for the group. @return A new ECBlockGroup object.
398 Returns the total count of erased data and parity blocks.
399 Counts the number of erased blocks in the input array. @param inputBlocks array of ECBlock objects @return the number of erased blocks
400 Converts an array of ECChunks to an array of ByteBuffers. @param chunks Array of ECChunk objects to convert. @return Array of ByteBuffer objects.
401 Retrieves erased blocks from a block group for recovery. @param blockGroup Group of EC blocks; contains erased blocks. @return Array of ECBlock objects representing erased blocks.
402 Extracts data and parity blocks from a block group. @param blockGroup The block group to extract from. @return An array containing the data and parity blocks.
403 Calculates the XOR of two integers. @param x The first integer. @param y The second integer. @return The XOR result of x and y.
404 Multiplies two integers using a precomputed multiplication table.
405 Divides x by y using a precomputed division table. @param x dividend @param y divisor @return The result of x divided by y.
406 Calculates x to the power of n using precomputed tables. @param x base value @param n exponent @return result of x^n
407 Prints a chunk's data as a hexadecimal string to the console. @param chunk The ECChunk object to dump.
408 Checks if changing inputs is allowed based on coder options.
409 Checks if changing inputs is allowed based on coder options. @return True if allowed, false otherwise.
410 Checks if verbose dump is allowed based on coder options.
411 Checks if verbose dump is allowed based on coder options. @return True if verbose dump is allowed, false otherwise.
412 Resets the buffer to a specified length. @param buffer The buffer to reset. @param len The length to reset to. @return The reset buffer.
413 Copies an empty chunk to a buffer at a specified offset. @param buffer target buffer @param offset starting offset @param len number of bytes to copy @return the modified buffer
414 Creates a ByteArrayEncodingState with encoded data and offsets. @return A ByteArrayEncodingState object.
415 Creates a ByteBufferEncodingState with cloned inputs and new outputs. @return ByteBufferEncodingState object.
416 Creates a ByteBufferDecodingState with cloned inputs and new outputs. @return ByteBufferDecodingState object for decoding.
417 Creates a ByteArrayDecodingState object with decoded data and offsets. @return ByteArrayDecodingState object containing decoding state.
418 Generates a Cauchy matrix in byte array 'a' of size m x k.
419 Calculates the inverse of a GF matrix. @param inMatrix input matrix @param outMatrix output matrix (inverse) @param n matrix dimension
420 Encodes data using GF tables and input/output offsets.
421 Encodes data using GF tables, inputs, and outputs. @param gfTables GF tables for encoding. @param inputs Input byte buffers. @param outputs Output byte buffers.
422 Retrieves a GaloisField instance, creating it if it doesn't exist. @param fieldSize Size of the field. @param primitivePolynomial Primitive polynomial. @return GaloisField instance.
423 Solves Vandermonde system using given x and y values. @param x x-coordinates of the points. @param y y-coordinates of the points.
424 Default constructor for ECBlock, initializes with default flags.
425 Updates reported byte count and processed byte count. @param count The number of bytes to add to the counters.
426 Reads a single byte from the input stream. @param inStream Input stream to read from. @return Byte value or -1 if end of stream.
427 Creates Huffman decoding tables for specified groups. Populates minLens array with minimum code lengths.
428 Recursive Quicksort implementation using a stack. @param dataShadow Data object containing sort state.
429 Returns the number of bytes written to the stream. Uses the internal stream to retrieve the byte count.
430 Returns the number of bytes read from the stream. Calls getBytesRead(stream) to retrieve the value.
431 Gets the remaining bytes in the stream buffer. Returns the number of bytes remaining.
432 Resets the stream to its initial state for reuse.
433 Creates a Bzip2Compressor with default block size and factors.
434 Gets the number of bytes written to the stream. Delegates to the underlying stream's bytes written count.
435 Returns the number of bytes read from the stream. Delegates to the internal stream's bytesRead property.
436 Initializes a new CompressorStream with the given output stream.
437 Default constructor, uses the default direct buffer size.
438 Sets the input data buffer, offset, and length. @param b The byte array. @param off Start offset in the array. @param len Number of bytes to use.
439 Checks if more input is needed. Returns true if no data remains.
440 Decompresses data from the direct buffer into the provided byte array. @param b destination byte array @param off offset within the array @param len maximum number of bytes to read @return number of bytes decompressed
441 Default constructor, uses the default direct buffer size.
442 Compresses data from the direct buffer into the provided byte array. @param b destination byte array @param off offset in the byte array @param len maximum number of bytes to compress @return number of bytes compressed
443 Reinitializes the object using the provided configuration. @param conf Configuration object for reinitialization.
444 Creates a DecompressorStream with the given input stream. @param in the input stream to decompress @throws IOException if I/O error occurs
445 Returns the number of bytes remaining to be read from stream.
446 Resets the decompressor to its initial state.
447 Returns the number of bytes written to the stream. @return The number of bytes written.
448 Returns the number of bytes read from the stream. @return The number of bytes read, as a long.
449 Creates a Lz4Decompressor with the default direct buffer size.
450 Sets the input data buffer and length. @param b the input byte array @param off the offset within the array @param len the number of bytes to use
451 Checks if more input is needed. Returns true if no input remains.
452 Decompresses data from the direct buffer into the provided byte array. @param b destination byte array @param off offset in the array @param len maximum number of bytes to read @return number of bytes decompressed
453 Creates a Lz4Compressor with a specified direct buffer size. @param directBufferSize Size of the direct buffer.
454 Compresses data from the input buffer into the output buffer. @param b output buffer @param off offset in output buffer @param len max number of bytes to compress @return number of bytes compressed
455 Reinitializes the object with the provided configuration. @param conf Configuration object for reinitialization.
456 Retrieves a CompressionCodec by class name or name. @param codecName The codec class name or name to find. @return The CompressionCodec or null if not found.
457 Gets the number of leased compressors for a given codec. @param codec CompressionCodec to check; returns 0 if null.
458 Gets the number of leased decompressors for a codec. @param codec CompressionCodec to check; returns 0 if null.
459 Returns the Zlib compressor class based on native library loading. @param conf Hadoop configuration object. @return Compressor class (ZlibCompressor or BuiltInZlibDeflater).
460 Returns the Class for the ZlibDecompressor, based on config.
461 Loads native Zlib library if native code is loaded. Sets nativeZlibLoaded based on ZlibCompressor/Decompressor.
462 Reinitializes the compressor with configuration from {@link Configuration}. @param conf Configuration object containing compression settings.
463 Initializes a ZlibCompressor with specified compression settings.
464 Returns the number of bytes written to the stream. Delegates to the underlying stream's byte count.
465 Returns the number of bytes read from the stream.
466 Initializes the ZlibDecompressor with header and direct buffer size.
467 Returns the number of bytes written to the stream.
468 Returns the number of bytes read from the stream.
469 Returns the remaining bytes to be read from the stream.
470 Resets the compressor to its initial state.
471 Processes the gzip trailer to verify CRC and size. Throws IOException if verification fails.
472 Writes a variable-length integer to the output stream. @param stream Output stream to write to. @param i Integer value to write.
473 Reads a variable-length long from the input stream. Returns the long value or throws IOException on error.
474 Retrieves a buffer from the pool, or allocates a new one. @param direct if true, allocates a direct buffer; otherwise, a regular buffer. @param length desired buffer length. @return A ByteBuffer.
475 Adds a buffer to the tree map, using capacity and timestamp as key. @param buffer The ByteBuffer to add.
476 Returns the character code point at the given position. @param position index of the character to retrieve @return code point at position, or -1 if out of bounds.
477 Sets the internal byte array from a string, encoding it. @param string The string to encode into a byte array.
478 Copies bytes from utf8 array to internal bytes array. @param utf8 Source byte array. @param start Start index in utf8. @param len Number of bytes to copy.
479 Appends data to the buffer. @param utf8 byte array to append @param start start index in utf8 @param len number of bytes to append
480 Reads a fixed-length byte sequence from the input stream. @param in Input stream to read from. @param len Number of bytes to read.
481 Decodes a byte array in UTF-8 to a String. @param utf8 byte array containing UTF-8 encoded data @return Decoded String, or null if decoding fails
482 Decodes a byte array to a String, optionally replacing invalid chars. @param utf8 byte array to decode @param start start index in the byte array @param length length of the byte array to decode @param replace whether to replace invalid chars @return decoded String
483 Validates the input byte array as a UTF-8 encoded string.
484 Adds a class to the map, assigning a unique ID. Throws exception if adding exceeds allowed limit.
485 Initializes the AbstractMapWritable with default Writable types.
486 Creates a FileSystemOption for sequence files. @param fs The FileSystem to use. @return A FileSystemOption object.
487 Constructs a Key object with the given value and weight. @param value The key's byte array value. @param weight The key's associated weight.
488 Cleans up resources. Calls super.close() and parent cleanup.
489 Converts a list to an array of the list's component type. @param list The list to convert. @return An array containing the list's elements.
490 Constructs a new InputBuffer using a default Buffer.
491 Resets the buffer with data from the input array. @param input Input byte array. @param length Length of data to reset with.
492 Resets the internal buffer with data from the input array. @param input Data source. @param start Start index in the input array. @param length Number of bytes to read.
493 Returns the current position of the buffer.
494 Returns the length of the underlying buffer.
495 Reads an MD5Hash object from the DataInput stream. @param in DataInput stream to read from @return Populated MD5Hash object
496 Calculates the MD5 hash of an input stream. @param in Input stream to be hashed. @return MD5Hash object representing the digest. @throws IOException if an I/O error occurs.
497 Calculates MD5 hash of data segment. @param data byte array @param start start index @param len length of data segment @return MD5Hash object
498 Calculates MD5 hash of data. @param dataArr Data array to hash. @param start Start index in data array. @param len Length of data to hash. @return MD5Hash object containing the digest.
499 Returns the hash code, based on the quarter digest.
500 Sets the MD5 digest from a hexadecimal string. @param hex Hexadecimal representation of the digest.
501 Instantiates a Protobuf message from a DataInput. @param protoClass Protobuf class to instantiate. @param dataIn Input stream containing the Protobuf data. @return Protobuf Message object. @throws IOException if an I/O error occurs.
502 Synchronizes a file or directory to persistent storage. Handles file existence and directory access restrictions.
503 Constructs a BooleanWritable with the given boolean value.
504 Creates a RemoteExceptionDependentRetry policy. Uses default policy and exception-specific overrides.
505 Checks if the queue is empty after a given time. @param time Time in nanoseconds. Returns true if empty.
506 Returns the current monotonic time in nanoseconds.
507 Creates a RetryPolicy excluding Remote and SASL exceptions. @param defaultPolicy Default RetryPolicy to use. @param exceptionToPolicyMap Maps exceptions to RetryPolicies.
508 Returns the connection ID for the first proxy. Uses RPC to fetch the ID.
509 Parses a comma-separated string into a MultipleLinearRandomRetry. Returns null if parsing fails or input is invalid.
510 Creates a retry policy based on exception mapping. @param defaultPolicy Default retry policy. @param exceptionToPolicyMap Maps exceptions to specific policies.
511 Creates an IOException from a list of exceptions. Returns null if list is empty, single exception or MultipleIOException.
512 Returns the number of data blocks. Uses dataIndex to determine the block count.
513 Gets the name of the default compression algorithm. Returns the name as a String.
514 Reads a variable-length integer from the input. @param in DataInput to read from. @return Integer value or throws exception if out of range.
515 Writes an integer using the variable-length encoding. @param out DataOutput to write to @param n Integer value to write
516 Checks if the table file is sorted. @return True if sorted, false otherwise.
517 Returns the number of records in the table file.
518 Closes the reader, releasing associated resources.
519 Returns the comparator name from the file metadata.
520 Constructs a ByteArray from a BytesWritable. @param other The BytesWritable to copy from.
521 Constructs a ByteArray with the specified byte array. @param buffer The byte array to wrap.
522 Finds the index of the block region nearest to the given offset. @param offset The offset to find the nearest block region for. @return Index of the nearest block region, or -1 if not found.
523 Finds the index of the first element not less than the key. @param key the key to search for @return index or -1 if not found
524 Finds the upper bound (exclusive) of a key in the index. @param key The key to search for. @return Index of upper bound or -1 if not found.
525 Compares two Location objects based on block and record indices.
526 Retrieves the key from the byte buffer. @param buf The byte buffer to read from. @return The key value.
527 Reads value from stream into buffer. @param buf buffer to read into, @param offset offset within buffer @return number of bytes read, or -1 if error.
528 Returns the raw size of the block region. @return long representing the raw size.
529 Returns the compressed size of the block region.
530 Returns the starting position of the block region as a long.
531 Returns an OutputStream, wrapping if necessary. @param out DataOutput to wrap as OutputStream. @return OutputStream.
532 Compares two byte buffers lexicographically. @param buffer1 First byte array and offset/length. @param buffer2 Second byte array and offset/length.
533 Constructs a DataOutputBuffer with a default buffer.
534 Returns the underlying data buffer. @return byte array containing the data.
535 Returns the length of the underlying buffer.
536 Writes an integer to the buffer at the specified offset. @param v integer to write @param offset offset in the buffer
537 Calculates the distance between two nodes in a tree structure. @param node1 first node @param node2 second node @return distance between nodes, or Integer.MAX_VALUE if error
538 Checks if a node is within a given scope. @param node The node to check. @param scope The scope string. @return True if node is in scope, false otherwise.
539 Splits the node's path into components using the path separator. @param node The node whose path is to be split. @return An array of path components.
540 Returns a string representation of the object, using getPath.
541 Removes a node from the cluster map. Throws exception for inner nodes.
542 Retrieves datanodes within a rack. @param loc Rack location string. @return List of Node objects in the rack.
543 Retrieves a node from the cluster map by its location. @param loc Node location string. @return Node object or null if not found.
544 Returns a string representation of the object's state.
545 Checks if two nodes are on the same rack. @param node1 The first node. @param node2 The second node. @return True if on the same rack, false otherwise.
546 Chooses a random valid node from in-scope nodes, excluding specified nodes. @param parentNode Parent node. @return Valid node or null if none found.
547 Calculates weight between nodes based on network location. @param reader The reader node. @param node The target node. @return Weight representing distance between nodes.
548 Adds a node to a rack in the rackMap, if not decommissioned. @param node The node to add; null or decommissioned nodes are ignored.
549 Transfers data to a channel, handling potential writeability issues. @param fileCh destination channel @param position starting position @param count number of bytes to transfer @param waitForWritableTime stores wait time @param transferToTime stores transfer time
550 Normalizes a collection of hostnames. @param names Collection of hostnames to normalize. @return List of normalized hostnames.
551 Creates a string with host details: local & destination host, port.
552 Retrieves a list of InetAddresses matching the given subnet. @param subnet Subnet string (e.g., "192.168.1.0/24") @param returnSubinterfaces Whether to include subinterfaces @return List of InetAddress objects.
553 Acquires a set of free socket ports. @param numOfPorts Number of ports to acquire (1-25). @return Set of free port integers.
554 Default constructor for RawScriptBasedMapping class.
555 Constructs a CachedDNSToSwitchMapping with the given raw mapping.
556 Constructs a NodeBase object from a given path, normalizing it.
557 Constructs a NodeBase with the given name and normalized location.
558 Constructs a new NodeBase with a name, location, parent, and level.
559 Sends a callback, potentially closing the file descriptor. @param caller Caller's name. @param entries TreeMap of entries. @param fdSet File descriptor set. @param fd File descriptor. @return True if callback closed the fd, false otherwise.
560 Checks if the reference count is open. @return True if open, false otherwise.
561 Closes the DomainSocket, releasing resources and closing the FD.
562 Removes idle selectors from the provider map. @param now Current timestamp to determine idle time.
563 Retrieves dependencies for a given name, using cache if available. @param name The name to retrieve dependencies for. @return List of dependencies or an empty list if not found.
564 Sets the timeout value for the socket connection. @param timeoutMs Timeout in milliseconds. @throws SocketException if an error occurs during timeout setting.
565 Gets IP addresses for a network interface. @param strInterface Interface name, "default" for cached address. @param returnSubinterfaces Whether to include subinterface IPs. @return String array of IP addresses.
566 Gets a list of InetAddress objects for a network interface. @param strInterface Interface name, "default" uses cached address. @param returnSubinterfaces Whether to include subinterface addresses. @return List of InetAddress objects.
567 Retrieves the node group for a given location. @param loc The location string to search for a node group. @return The node group string or null if not found.
568 Generates a string representation of the network topology. Returns topology string or "No topology information" if empty.
569 Checks if a DNS mapping represents a single switch. @param mapping The DNS to switch mapping to check. @return True if the mapping is a single switch, false otherwise.
570 Gets current stats for a recorder at a given index. @param recorderName Recorder name. @param idx Index of the statistics. @return SummaryStatistics object or null if not found.
571 Prints generic command usage information to the specified output stream.
572 Checks if a class is a Log4j logger. @param clazz Class to check, null if invalid. @return True if it's a Log4j logger, false otherwise.
573 Constructs a LogThrottlingHelper with a Timer. @param minLogPeriodMs Minimum logging period in milliseconds. @param primaryRecorderName Name of the primary recorder.
574 Records values for a given recorder, creating new logs if needed. @param recorderName Name of the recorder. @param currentTimeMs Current timestamp in milliseconds. @param values Values to record. @return LoggingAction object or DO_NOT_LOG if not logged.
575 Checks if a string needs quoting based on its byte representation. @param str The string to check. @return True if quoting is needed, false otherwise.
576 Quotes HTML characters in a string. Returns null if input is null.
577 Adds a Jersey resource package with optional parameters. @param packageName Package name to add. @param pathSpec Resource path specification.
578 Registers a servlet with the given name and URL pattern. @param name Servlet name. @param pathSpec URL pattern. @param clazz Servlet class.
579 Adds a servlet with the given name, path, and class. @param name Servlet name. @param pathSpec Servlet path spec. @param clazz Servlet class extending HttpServlet.
580 Defines a filter in the ServletContextHandler. @param ctx Handler, name, classname, params, URLs for filter.
581 Binds a connector to a port, retrying with incremented ports. @param listener The connector to bind. @param port Initial port to try. @throws Exception if binding fails after retries.
582 Finds an XFrameOption enum by its string representation. @param value The string value of the enum to find. @throws IllegalArgumentException if no matching enum is found.
583 Creates a FileMonitoringTimerTask to monitor file changes. @param filePaths Paths to monitor; onFileChange action; onChangeFailure handler.
584 Gets property value as int, ensuring it's non-negative. @param key property key, @param defaultValue default int value @return int property value, throws exception if negative.
585 Checks if a property exists in the properties map. @param key The property key to check for existence.
586 Throws MetricsException if an error is detected in the stream. @param message Error message to include in the exception.
587 Throws a MetricsException if ignoreError is false. @param message Error message to include in the exception.
588 Parses and validates the roll interval from properties, returning millis.
589 Throws a MetricsException if ignoreError is false. @param message Exception message. @param t The original Throwable.
590 Updates a record with metrics and tags, caching as needed. @param mr The MetricsRecord to update from. @param includingTags Whether to include tags in the record. @return The updated Record object.
591 Writes a string to the buffer using XDR encoding. @param s The string to encode.
592 Emits a metric to Ganglia, including metadata and value. @param groupName Metric group name. @param name Metric name. @param type Metric type. @param value Metric value.
593 Emits a metric to Ganglia, logging warnings for null values. @param groupName Metric group name. @param name Metric name. @param type Metric type. @param value Metric value.
594 Dequeues and removes the head of the queue. Blocks if the queue is empty until an element is available. @return The head element of the queue. @throws InterruptedException if interrupted while waiting.
595 Creates a MetricsRecordImpl with given info, timestamp, tags, and metrics.
596 Adds RPC enqueue time to the list and quantile trackers. @param enQTime The enqueue time to add.
597 Adds RPC queue time to the list and updates quantiles if enabled. @param qTime The RPC queue time to add.
598 Adds RPC processing time to the list and quantiles (if enabled). @param processingTime RPC processing time in milliseconds.
599 Adds a write latency value to each quantile object. @param writeLatency The write latency value to add.
600 Adds a read latency value to all file read quantile objects. @param readLatency The read latency value to add.
601 Initializes the MetricsSystem with a given prefix. @param prefix Prefix for metrics names. @return MetricsSystem instance.
602 Returns the singleton instance of the MetricsSystem.
603 Shuts down the application instance gracefully.
604 Records metrics and tags into the provided builder. @param builder MetricsRecordBuilder to populate @param all if true, includes all metrics, otherwise current values
605 Calculates and returns statistics for entries with at least minSamples. @param minSamples minimum number of samples required for a stat @return Map of statistics (name -> average)
606 Returns the number of processing samples recorded.
607 Rolls over average rates from the current snapshot. Updates the averages deque for each rate.
608 Adds a metric info to the cache. @param name Metric name. @param description Metric description. @return MetricsInfo object.
609 Adds a tag to the cache. @param info MetricsInfo object @param value Tag value string @return MetricsTag object
610 Adds sample data to the interval statistic. @param numSamples Number of samples added. @param sum Sum of the samples.
611 Adds a value to the sample and recursively calls add. @param x The value to add. @return The updated SampleStat object.
612 Returns the mean processing time from the RPC stats.
613 Returns the minimum value from the minmax collection.
614 Returns the maximum value from the MinMax object.
615 Resets the min/max values to their initial state.
616 Calculates the next target renewal time based on end time & retry policy. @param tgtEndTime Target end time. @param now Current time. @param rp Retry policy. @return Next renewal time.
617 Calculates the standard deviation based on the variance.
618 Compresses the sample list by merging adjacent items.
619 Finds the value at the given quantile. @param quantile quantile between 0 and 1 @return value at the specified quantile
620 Inserts buffered samples into the `samples` list, sorted. Resets `bufferCount` to 0 after insertion.
621 Returns a list of netgroup names. Returns a new list containing the group names.
622 Checks if a group is present in the cached groups list. @param group The group name to check. @return True if the group is cached, false otherwise.
623 Gets server properties for a client address. @param clientAddress Client's InetAddress @param ingressPort Port used for ingress @return Map of server properties.
624 Retrieves client properties for a given server address. @param serverAddress Server address to fetch properties for. @param ingressPort Port number (unused, for future use). @return Map of client properties.
625 Extracts the hostname from a Kerberos principal name. @param principalName Kerberos principal name string. @return Hostname portion of the principal name.
626 Retrieves group names for a user, using cache and static mappings. @param user User identifier. @throws IOException if no groups are found or an error occurs.
627 Refreshes the user-to-groups cache and clears related caches.
628 Prints formatted string to output stream or System.out. @param format Format string for printing. @param args Arguments for formatting.
629 Updates a BiMap with data from a command execution. @param map BiMap to update, mapName, command, regex, staticMapping @return True if the map was updated.
630 Generates command to execute a script. @param script File object representing the script. @return String array representing the command.
631 Switches to the next bind user after an AuthenticationException. Logs the switch if the users are different.
632 Writes data to the output stream, potentially wrapping with SASL. @param inBuf Input byte array @param off Offset in the array @param len Number of bytes to write @throws IOException if an I/O error occurs
633 Closes the connection, releasing resources. Disposes SASL and closes the output stream.
634 Processes an HTTP interaction, proceeding or sending an error. @param httpInteraction The HTTP interaction to handle. @throws IOException, ServletException if an error occurs.
635 Parses group names from strings, throwing exception on mismatch. @param groupNames Group names string. @param groupIDs Group IDs string. @return Set of parsed group names.
636 Creates a SecretKey from the provided byte array. @param key The byte array representing the secret key. @return A SecretKey object.
637 Removes a token from storage, handling potential SQL exceptions.
638 Resets the key ID, clears all keys, and resets token sequence.
639 Updates the delegation key in the key store. @param key The DelegationKey to update. @throws IOException if an I/O error occurs.
640 Removes a stored delegation key. @param key The delegation key to remove.
641 Adds a delegation key. @param key The key to add. Throws IOException if SecretManager is running.
642 Stores a delegation key and its master key. @param key The DelegationKey to store. @throws IOException if an I/O error occurs.
643 Sets the external delegation token secret manager. @param secretManager New secret manager instance.
644 Retrieves configuration properties, extends parent, and sets auth handler.
645 Returns the UserGroupInformation from the current HTTP context.
646 Checks if the request is a management operation. @param request HttpServletRequest object. @return True if it's a management operation, false otherwise.
647 Checks if the resource is managed by the renewer. @return True if managed, false otherwise.
648 Renews lease. @param conf Hadoop configuration object. @return Timestamp of the renewed lease.
649 Cancels the lease renewal process for this lease. @param conf Hadoop configuration object.
650 Returns the input stream, wrapping it if useWrap() is true. @param in The input stream to potentially wrap. @return The input stream.
651 Wraps the given OutputStream with buffering if configured. @param out The OutputStream to wrap. @return The potentially wrapped OutputStream. @throws IOException if an I/O error occurs.
652 Reads more data from the input stream, handling SASL unwrap. @return Length of unwrap data or -1 on EOF.
653 Closes the connection, releasing resources.
654 Constructs an AuthorizationException with a root cause. @param cause The underlying exception that caused this one.
655 Checks if the login was successful. Returns true if not HadoopLoginContext.
656 Sets the user's last login timestamp. @param loginTime The timestamp of the last login.
657 Constructs UserGroupInformation from a Subject. @param subject The Subject to extract user principal from. @throws IllegalStateException if Subject lacks a valid User.
658 Returns the user's name. @return The user's name as a String.
659 Checks if the user has Kerberos credentials. @return True if authentication method is Kerberos, false otherwise.
660 Returns the authentication method associated with the user. Returns null if the user has no authentication method.
661 Gets the real user associated with the subject. Returns the real user or null if not found.
662 Returns the short name of the user. @return The user's short name.
663 Sets the authentication method for the user. @param authMethod The authentication method to set.
664 Constructs a ReloadingX509TrustManager with type, location, and password. @param type Trust manager type @param location Trust store location @param password Trust store password
665 Creates a ReloadingX509KeystoreManager. @param type keystore type, location, passwords for keystore. @throws IOException, GeneralSecurityException on failure.
666 Retrieves a resource URL. @param name Resource name to retrieve. @return URL object representing the resource.
667 Gets a configuration resource as an input stream. @param name Resource name to retrieve. @return InputStream or null if not found/error.
668 Reads a configuration resource as a reader. @param name Resource name to load. @return Reader object or null if not found/error.
669 Creates and configures an SSLEngine based on the current mode. @return Configured SSLEngine instance.
670 Configures an HttpURLConnection, handling SSL/TLS if applicable. @param conn The HttpURLConnection to configure. @return The configured HttpURLConnection.
671 Constructs a Configured object using the provided configuration. @param conf The configuration object to use.
672 Handles shell executor timeout: logs warning & returns true. @param executor Executor instance. @param user User identifier. @return True if timeout occurred, false otherwise.
673 Returns a string representation of the command, quoting arguments with spaces.
674 Reads an AuthMethod from the input stream. @param in DataInput to read from @return AuthMethod value read from the stream
675 Adds a user to the list if not all are allowed, otherwise throws exception. @param user The user to add. @throws IllegalArgumentException if user is a wildcard.
676 Adds a group to the list, throwing an exception if it's a wildcard. @param group The group to add.
677 Removes a user if not a wildcard and all users are allowed.
678 Removes a group if not a wildcard and all allowed. @param group The group to remove.
679 Returns a string representation of the users. @return String containing user data.
680 Returns a comma-separated string of group names. @return String of group names, or an empty string if none.
681 Checks if a Kerberos ticket is an original Ticket Granting Ticket. @param ticket The Kerberos ticket to check. @return True if the ticket is an original TGT, false otherwise.
682 Gets server properties based on client address. @param clientAddress Client's InetAddress; null uses default. @return Map of server properties.
683 Validates the codec's cipher suite. Throws UnsupportedCodecException if not AES-CTR or SM4-CTR.
684 Returns the current position of the stream. @return Current stream position as a long value.
685 Reads data from the underlying stream into the buffer. @param inBuffer Buffer to read data into. @return Number of bytes read, or -1 if EOF.
686 Converts a cipher suite name to a CipherSuite enum. @param name Cipher suite name to convert. @throws IllegalArgumentException if name is invalid.
687 Checks if the current system supports the given protocol version. @param version The protocol version to check. @return True if supported, false otherwise.
688 Generates the next integer value with specified bits. @param numBits number of bits for the next value (0-32) @return next integer value
689 Creates a KeyProviderCryptoExtension, using provided KeyProvider. Returns a KeyProviderCryptoExtension object.
690 Gets the current KeyVersion for a given name. @param name Key name; returns null if not found.
691 Generates a key of specified size using the given algorithm. @param size Key size in bits. @param algorithm Algorithm to use (e.g., "AES"). @return Encoded byte representation of the generated key.
692 Creates an EncryptedKeyVersion for decryption. @param keyName Key name. @param encryptionKeyVersionName Version name. @return EncryptedKeyVersion object.
693 Creates a KeyProviderDelegationTokenExtension. @param keyProvider The key provider. @return A KeyProviderDelegationTokenExtension.
694 Closes the connection, shutting down the queue and destroying SSL factory.
695 Retrieves a ReadWriteLock from the lock array for the given key. @param keyName The key used to determine the lock's index. @return The ReadWriteLock associated with the key.
696 Appends a field to the string builder if valid. @param field The field to append. @return This builder instance.
697 Appends a key-value pair to the builder. @param key The key to append. @param value The value associated with the key. @return This builder instance.
698 Appends key-value pair if key is absent, validates input. @param key key to append @param value value to append @return this Builder instance
699 Creates a success response with code 0 and message "Success".
700 Converts a byte array to a UUID string representation. @param clientId byte array representing the client ID @return UUID string or empty string if clientId is invalid
701 Offers the given element to the queue. @param e the element to offer @return true if the element was added, false otherwise
702 Returns the number of calls currently in the queue.
703 Returns the protocol's interfaces and their superinterfaces. @param protocol The protocol class to inspect. @return An array of Class objects representing interfaces.
704 Gets the InetSocketAddress of the server for a given proxy.
705 Returns the current monotonic time in nanoseconds.
706 Gets the remote user's UserGroupInformation from the current call. @return UserGroupInformation or null if no call is active.
707 Generates an array of fingerprints for the given methods. @param methods Array of Method objects. @return Array of integer fingerprints.
708 Dispatches refresh requests to registered handlers. @param identifier Request identifier. @param args Arguments for the handler. @return Collection of RefreshResponse objects.
709 Constructs a RemoteException with a class name and message. @param className The name of the remote class. @param msg The error message.
710 Unwraps a remote exception of specified types. @param lookupTypes Exception types to check. @return IOException or this if exception not found.
711 Unwraps a remote exception, returning IOException or itself.
712 Calculates the cost based on processing details and weights. @param details ProcessingDetails object containing data. @return The calculated cost as a long value.
713 Returns the number of dropped connections. @return The count of dropped connections.
714 Returns the number of active connections managed.
715 Adds an element to the queue with the given priority. @param priority Queue priority. @param e Element to add.
716 Offers an element to the queue with the given priority. @param priority priority of the element @param e element to offer @return true if offer was successful, false otherwise
717 Adds exception classes for terse logging. @param exceptionClass Array of exception classes to add.
718 Adds exception classes to suppress logging. @param exceptionClass Array of exception classes to suppress.
719 Constructs an UnexpectedServerException with the given message.
720 Constructs a new RpcServerException with the given error message.
721 Constructs an RpcClientException with the given error message.
722 Constructs an UnexpectedServerException with a message and cause.
723 Constructs a new RpcServerException with message and cause.
724 Constructs an RPC client exception with message and cause.
725 Adds a cost delta to the call costs for a given identity. @param identity Object identifying the cost to add. @param costDelta The amount to add to the cost.
726 Computes priority level based on cost and user identity. Returns priority level (0-numLevels) or 0 if default.
727 Converts a ServiceException to a RemoteException. @param se The ServiceException to convert. @return A RemoteException, or null if conversion fails.
728 Executes an IpcCall and returns the result. @param call The IpcCall to execute. @return The result of the IpcCall.
729 Retrieves a fixed-length ByteString for the given key. @param key The key to look up. @return The corresponding ByteString.
730 Returns a ByteString from the given byte array. Uses a helper to avoid unnecessary object creation.
731 Sets the call ID and retry count for the handler. @param cid Call ID. @param rc Retry count. @param externalHandler Handler object.
732 Returns the address of the listener. @return InetSocketAddress of the listener.
733 Returns a set of addresses used by auxiliary listeners. Returns empty set if no auxiliary listeners are configured.
734 Decrements client count and stops the client if count reaches zero. @param client The client to stop.
735 Delegates equality check to the superclass implementation.
736 Creates a ProtobufWrapperLegacy with the given message. @param message The protobuf message to wrap. @throws IllegalArgumentException if not an unshaded protobuf.
737 Sends a fatal error response to the client for old versions. @param response Response stream, callId, error class, and error message.
738 Advances the index when requests are depleted, moving to the next queue.
739 Sets the exception and signals completion. @param error The exception to set.
740 Sets the RPC response and signals completion. @param rpcResponse The response to set.
741 Reads a character from the input stream, handling socket timeouts. Retries read until successful or timeout is exhausted.
742 Reads bytes from the input stream, handling SocketTimeoutExceptions. @param buf buffer to store read bytes @param off offset in the buffer @param len number of bytes to read @return number of bytes read
743 Gets the remote IP address from the current call. @return InetAddress object or null if no call exists.
744 Gets the remote port from the current call, or 0 if no call exists.
745 Gets the established QOP if on auxiliary port, else null.
746 Gets the priority level of the current call. Returns 0 if no call is active.
747 Returns user-to-connection map as JSON string. Returns null if serialization fails.
748 Creates a MachineList with host entries and an address factory. @param hostEntries Collection of host entries. @param addressFactory Factory for resolving host addresses.
749 Checks if the IP address is included. @param ipAddress The IP address to check. @return True if included, false otherwise.
750 Initializes SysInfoLinux with procfs file paths and jiffy length.
751 Reads memory information from /proc/memInfo file. Skips if already read and readAgain is false.
752 Reads processor count from file. @return The number of processors.
753 Reads CPU core count from /proc/cpuinfo. @return The number of CPU cores.
754 Gets the CPU frequency in MHz. Reads from proc file.
755 Reads CPU time data from /proc/stat file and updates tracker.
756 Gets the total number of network bytes read. Reads the file and returns the byte count.
757 Gets the number of network bytes written. Reads the file and returns the written byte count.
758 Reads disk statistics from /proc/diskstats file and aggregates bytes read/written.
759 Retrieves the value associated with the given key. @param k the key to retrieve the value for @return the value or null if the key is not found
760 Removes the element associated with key 'k'. @param k the key of the element to remove @return the removed value, or null if key not found.
761 Removes and returns the element at the given index or matching key. @param index Index of the element to remove, or -1 to remove by key. @param key Key of the element to remove. @return The removed element, or null if not found.
762 Sets optional secure transformer attributes on the factory. Sets external DTD/stylesheet access flags.
763 Parses a string to a long, handling binary prefixes (k, m, g, etc.).
764 Converts a long value to a formatted string with unit and decimal places.
765 Formats a double as a percentage string. @param fraction The value to format (0.0 - 1.0). @param decimalPlaces Number of decimal places.
766 Converts a byte array segment to a hexadecimal string. @param bytes byte array to convert @param start start index (inclusive) @param end end index (exclusive) @return Hexadecimal string representation
767 Formats a double to a string with two decimal places. @param d The double to format. @return String representation of the formatted double.
768 Terminates the application with the provided exit code. Logs the exit code and message, handles errors during logging.
769 Handles HaltException: logs error and halts VM if enabled. @param he HaltException to handle; exit code from it is used. @throws HaltException if halt is disabled and an error occurs.
770 Adds a shutdown hook with a priority and timeout. @param shutdownHook Hook to execute during shutdown. @param priority Hook priority. @param timeout Timeout for the hook. @param unit Timeout unit (e.g., TimeUnit.SECONDS)
771 Removes a shutdown hook. Throws IllegalStateException if shutdown is in progress. @param shutdownHook The shutdown hook to remove. @return True if the hook was removed, false otherwise.
772 Checks if a shutdown hook is already registered. @param shutdownHook The hook to check for. @return True if the hook is registered, false otherwise.
773 Gets an input stream for the named resource. @param resourceName Resource path, relative to classpath. @throws IOException If resource is not found or an error occurs.
774 Constructs a LineReader with the given input stream. Uses the default buffer size.
775 Executes the command if interval has passed. Resets exit code and sets launch mechanism on macOS.
776 Creates a daemon thread factory with a given prefix. @param prefix Thread name prefix @return ThreadFactory for creating daemon threads
777 Resizes the array if the size exceeds the threshold. Resizes to double the capacity if below MAX_ARRAY_LENGTH.
778 Creates a new ArrayList from an iterator of elements. @param elements Iterator providing the elements for the list.
779 Adds all elements from an iterable to a collection. @param addTo Collection to add elements to. @param elementsToAdd Iterable containing elements to add. @return True if the collection was modified.
780 Creates a new ArrayList with the specified initial capacity. @param initialArraySize The initial size of the ArrayList.
781 Writes a JSON representation of an instance to an output stream. @param instance Object to serialize to JSON. @param dataOutputStream Output stream to write to.
782 Initializes an OperationDuration with start and finish times.
783 Records the finish time. Updates the 'finished' field with the current timestamp.
784 Converts the value to a Duration object (in milliseconds).
785 Returns a human-readable duration string from the internal value.
786 Calculates a monomial based on lengthBytes and a modulus. @param lengthBytes Length in bytes, must be positive. @param mod The modulus to use for calculations. @return The calculated monomial value.
787 Combines two CRC values using a monomial and modulus. @param crcA First CRC value. @param crcB Second CRC value. @param monomial Monomial to use for multiplication. @param mod Modulus for Galois field arithmetic. @return Combined CRC value.
788 Converts an integer to a byte array. @param value The integer to convert. @return A byte array representing the integer.
789 Converts 4 bytes to a single CRC string in hex format. @param bytes The byte array to convert. @throws IOException if the byte array length is not 4.
790 Converts a byte array to a multi-CRC string representation. @param bytes byte array to convert; length must be a multiple of 4. @throws IOException if the byte array length is not a multiple of 4.
791 Unpacks JAR entries matching a regex to a directory. @param inputStream Input stream for the JAR file. @param toDir Directory to unpack entries to. @param unpackRegex Regex pattern for entries to unpack.
792 Extracts files from a JAR archive to a directory, filtering by regex. @param jarFile JAR file to extract from. @param toDir Directory to extract files to. @param unpackRegex Regex to filter files to unpack.
793 Finds the nth occurrence of a byte within a byte array. @param utf byte array, start index, length, byte to find, nth occurrence @return index of the nth byte or -1 if not found
794 Associates the specified key with the given value in the map.
795 Removes the mapping for a key and returns the resolved value. @param key the key whose mapping to be removed @return the resolved value, or null if key was not present
796 Checks if the map contains a key. @param key The key to check for. @return True if the key exists, false otherwise.
797 Creates a new value for the given key using the factory. @param key The key for which to create a value. @return The created value, resolved from a WeakReference.
798 Removes entries from the map where the referenced value is null. @return The number of entries removed.
799 Creates and returns a snapshot of suppressed exceptions. Resets suppressedCount and maxSuppressedWait to 0.
800 Formats the time difference between two timestamps. @param finishTime Finish timestamp in milliseconds. @param startTime Start timestamp in milliseconds.
801 Parses string collection into a map of String key-value pairs.
802 Splits a string by a separator, respecting an escape character. @param str String to split @param escapeChar Escape character @param separator Separator character @return String array of split parts
803 Escapes characters in a string. @param str input string @param escapeChar char to escape with @param charsToEscape chars to escape @return escaped string
804 Unescapes a string, handling escape characters and specified chars. @param str String to unescape @return Unescaped string
805 Returns the application version string.
806 Returns the revision number from the COMMON_VERSION_INFO.
807 Retrieves the branch name from the common version info. @return The branch name as a String.
808 Retrieves the date from the COMMON_VERSION_INFO object.
809 Retrieves the user identifier from COMMON_VERSION_INFO. @return User identifier string.
810 Returns the URL from the COMMON_VERSION_INFO object.
811 Retrieves the source checksum from the common version info. @return String representing the source checksum.
812 Returns the protocol compiler version.
813 Returns the platform on which the code was compiled.
814 Creates a FilteringRemoteIterator from a source iterator and filter. @param source Source iterator to filter. @param filter Filter function (raises IOE).
815 Constructs a HaltableRemoteIterator from a source iterator. @param source The iterator to wrap. @param continueWork Callable to determine if iteration continues.
816 Checks if there's a next element available. Returns true if next is not null, otherwise fetches.
817 Constructs a MaybeClose with an object and default close flag. @param o The object to be potentially closed.
818 Submits a Callable to an Executor and returns a CompletableFuture. @param executor Executor to run the Callable @param call Callable to execute @return CompletableFuture that will hold the result
819 Constructs a LazyAutoCloseableReference with the given constructor.
820 Creates a LazyAtomicReference initialized with a supplier. @param supplier Supplier that provides the initial value.
821 Evaluates the reference. Checks if closed; calls super.eval().
822 Applies the function and returns the result. @return The result of the evaluation. @throws IOException if an I/O error occurs.
823 Executes Callable, suppressing IOExceptions. @param call Callable to execute. @return Result of the Callable.
824 Wraps a CallableRaisingIOE in a Supplier, handling IOEs. @param call Callable that may raise an IOException @return Supplier that returns T, handling IOEs
825 Creates a Builder from a RemoteIterator. @param items Iterator to build from. @return New Builder instance.
826 Throws the first exception, suppressing others if types differ. @param exceptions Collection of exceptions to process. @throws E The first exception in the collection.
827 Creates a builder from an iterable of items. @param items Iterable to initialize the builder.
828 Suppresses exceptions during operation. @return This builder instance.
829 Re-throws the inner exception from an ExecutionException. @param e the exception containing the inner exception @throws IOException if an I/O error occurs during unwrapping
830 Re-throws the inner exception from a CompletionException. @param e The CompletionException to unwrap. @throws IOException If an I/O error occurs during unwrapping.
831 Configures an object if JobConf and JobConfigurable are present. @param theObject Object to configure, must extend JobConfigurable. @param conf Configuration object, must extend JobConf.
832 Retrieves a Class object by name. @param name Class name to retrieve. @return Class object or throws ClassNotFoundException.
833 Prints thread information to a stream, including state and stack. @param stream Output stream for thread info. @param title Title for the thread dump.
834 Constructs a Configuration object. @param loadDefaults Whether to load default configurations.
835 Sends a JSON error response to the given HttpServletResponse. @param response The response to send the error to. @param status HTTP status code. @param ex The exception that caused the error.
836 Creates a Jersey Response containing exception details in JSON. @param status HTTP status code. @param ex The exception to include in the response. @return A Jersey Response object.
837 Constructs a PureJavaCrc32C object and resets the CRC value.
838 Removes all elements from the collection.
839 Retrieves group names for a user, platform-dependent. @param user The username to query. @return An array of strings representing group names.
840 Gets group IDs for a user, using OS-specific commands. @param user The username to retrieve group IDs for. @return An array of strings representing the command.
841 Returns command to list files, platform-specific. Returns array of strings representing the command.
842 Constructs chmod command based on permission and recursion. @param perm permission string @param recursive whether to apply recursively @return String array representing the chmod command
843 Constructs chown command based on OS. @param owner The user to set as owner. @return String array representing the chown command.
844 Creates a symlink command based on the OS. @param target The target path. @param link The link path. @return String array representing the command.
845 Generates the readlink command based on the OS. @param link The link to resolve. @return String array representing the command.
846 Generates a signal kill command based on code and PID. @param code signal code (0 for check alive) @param pid process ID to kill @return String array representing the command
847 Appends ".script" extension to the basename within the parent directory. @param parent Parent directory as a File object. @param basename Basename to append the extension to. @return File object with the appended extension.
848 Locates Hadoop home directory using system properties & env vars. @return Hadoop home directory as a File object. @throws FileNotFoundException if Hadoop home is not found.
849 Returns the Hadoop home directory. Throws exception if HADOOP_HOME_DIR_FAILURE_CAUSE is set.
850 Returns the absolute path to a Hadoop executable. @param hadoopHomeDir Hadoop home directory @param executable executable file name @return File object representing the executable
851 Returns File object for WinUtils. Throws exception if failed.
852 Destroys all child shell processes and clears the CHILD_SHELLS map.
853 Shuts down a thread. @param thread The thread to shut down. @return True if shutdown successful, false otherwise.
854 Shuts down an ExecutorService. @param service ExecutorService to shutdown @return True if shutdown initiated, false otherwise.
855 Creates a new phase, adds it to the list, and returns it.
856 Adds a new phase with the given weightage. @param weightage Weightage of the new phase. @return The newly created Progress phase object.
857 Calculates the internal progress based on phases and weightages. Returns the calculated progress value.
858 Completes the current phase and starts the parent's next phase.
859 Reads data from a file path and returns it as a String. @param path file path to read @return String data or null if file is empty/error.
860 Reads data from a file path as a String, UTF-8 encoded. @param path file path to read @param stat file stat object @return String data or null if read fails
861 Sets data to the specified path with the given version. @param path Path to store data. @param data Data to be stored as a String. @param version Version of the data.
862 Creates a persistent znode with specified ACL. @param path znode path. @param zkAcl ACLs to apply. Returns true if created.
863 Deletes a node and its children from ZooKeeper. @param path Node path to delete. Returns true on success.
864 Deletes a path if it exists, using a safe transaction. @param path Path to delete. @param fencingACL ACLs for fencing. @param fencingNodePath Fencing node path.
865 Adds a program with its class and description. @param name Program name. @param mainClass Main class of the program. @param description Program description.
866 Attempts to set the method implementation. @param targetClass Class containing the method. @param methodName Method name. @param argClasses Method argument classes. @return Builder instance.
867 Finds and makes accessible a hidden method on a class. @param targetClass Class to search for the method. @param methodName Name of the method to find. @param argClasses Method argument types. @return Builder instance.
868 Creates a no-op unbound method with the given name. @param name The name of the no-op method. @return A DynMethods.UnboundMethod representing the no-op.
869 Checks if all provided methods are not noops. @param methods Array of unbound methods to check. @return True if all methods are implemented, false otherwise.
870 Checks if a method is available (not a noop). @param method The method to check. @return True if the method is available, false otherwise.
871 Binds the method to a receiver instance. @param receiver The object to bind the method to. @return A BoundMethod instance.
872 Returns a static wrapper for this dynamic method. Checks if the method is already static.
873 Finds the JAR file containing the given class. @param clazz The class to search for. @return The JAR file name or null if not found.
874 Finds the location of a class on the file system. @param clazz The class to locate. @return The class's file path or null if not found.
875 Writes checksum value to output stream. Resets state if reset is true. @param out Output stream to write to. @param reset Reset state after writing. @return Size of the checksum type.
876 Writes checksum to buffer, resets state if specified. @param buf buffer to write to @param offset offset in buffer @param reset resets state after writing @return number of bytes written
877 Creates a RateLimiting instance. @param capacity The rate limit capacity, 0 for unlimited. @return A RateLimiting object.
878 Registers UNIX signal handlers for TERM, HUP, and INT signals. @param log Logger to record registration status and errors.
879 Constructs a LightWeightGSet with a recommended initial length. @param recommended_length The desired initial capacity.
880 Populates includes/excludes sets with host details. @param includes Set to add included hosts to. @param excludes Set to add excluded hosts to.
881 Populates include/exclude host sets from current host details.
882 Computes a hash value for a byte array. @param key byte array to hash @param nbytes length of the key @param initval initial hash value
883 Returns a Hash instance based on the specified type. @param type Hash type (JENKINS_HASH, MURMUR_HASH) @return Hash instance or null if type is invalid.
884 Constructs a new CountingBloomFilter with default parameters.
885 Default constructor for the BloomFilter class.
886 Constructs a new, empty DynamicBloomFilter.
887 Computes a hash array from a key. @param k The key to hash. @return An array of integers representing the hash values.
888 Constructs an AutoCloseableLock using a ReentrantLock.
889 Closes the resource by releasing associated resources.
890 Prints an error message and stack trace to the error stream. @param e The throwable to print the stack trace for.
891 Logs an error message with an error code and text. @param errorcode Error code for logging. @param text Error message text.
892 Logs class loading information, including source URL. @param name Class name. @param clazz The loaded Class object.
893 Returns a copy of the latest GC data. @return A clone of the current GC data.
894 Constructs a PureJavaCrc32 object and initializes it.
895 Executes shutdown hooks, tracking timeouts. @return Number of timeout exceptions during shutdown.
896 Adds an element to the heap and maintains heap property. @param element The element to add to the heap.
897 Removes and returns the root element of the heap. Returns null if the heap is empty.
898 Moves the root element to its correct position in the heap.
899 Creates a HashSet from an iterator of elements. @param elements Iterator providing elements for the set.
900 Creates a new HashSet with the specified expected size. @param expectedSize The initial capacity for the HashSet.
901 Atomically sets the value to newValue. Throws IllegalStateException if newValue < currentValue.
902 Creates a TableListing object with the configured columns. @return A TableListing instance.
903 Checks if a key is deprecated. @param key The key to check. @return True if the key is deprecated, false otherwise.
904 Checks if a deprecation warning has been triggered for the given name.
905 Reloads configurations from the REGISTRY. Logs debug message if enabled.
906 Adds a resource to the default resources list and reloads configs. @param name The name of the resource to add.
907 Converts a time duration string to a value in the return unit. @param name name of the duration @param vStr duration string to parse @param defaultUnit default time unit @param returnUnit desired time unit for the result @return Converted time duration value.
908 Retrieves all properties associated with the given tags. @param tagList List of tags to retrieve properties for. @return Properties object containing all properties.
909 Redacts a value if its key is sensitive. @param key The key to check for sensitivity. @param value The value to redact if needed. @return Redacted value or original value.
910 Redacts XML value if key is sensitive. @param key XML key to check. @param value XML value to redact. @return Redacted value or original value.
911 Starts a reconfiguration task, throwing IOException if server is stopped or a task is already running.
912 Constructs a DeprecationContext, copying from another and applying deltas. @param other The context to copy from. @param deltas DeprecationDelta objects to apply.
913 Constructs a ReconfigurationException with property details and cause.
914 Constructs a ReconfigurationException with property details. @param property Property name. @param newVal New value. @param oldVal Old value.
915 Checks if manual HA state management is allowed based on auto-failover. @param target The HAServiceTarget to check. @return True if manual management is OK, false otherwise.
916 Executes a command on a remote server and returns its exit status. @param session SSH session @param cmd Command to execute @return Exit status of the command
917 Checks if the service is eligible for failover. Throws ServiceFailedException if not healthy or in observer state.
918 Reads data from a file range into a direct ByteBuffer using an operation. @param range FileRange object defining the read range.
919 Validates, sorts, and checks FileRange list against file length. @param input List of FileRange objects to validate and sort. @param fileLength Optional file length for range validation. @return Sorted list of validated FileRange objects.
920 Constructs a BlockManager with the given BlockData. @param blockData The BlockData to use for managing blocks.
921 Releases buffer data (no-op, new buffer allocated each time). @param data The buffer data to release.
922 Releases an item back to the pool. Checks item ownership. Throws exception if item wasn't created by this pool.
923 Throws IllegalStateException if buffer state doesn't match given states. @param states Array of expected State values.
924 Checks if a string is not null and not empty. @param arg The string to check. @param argName Name of the argument for error messages.
925 Checks if collection is null and has the specified number of elements. @param collection Collection to check. @param numElements Expected number of elements. @param argName Name of the argument.
926 Checks if the given path exists. @param path The path to check. @param argName Argument name for error message.
927 Creates a bounded resource pool with a specified size. @param size The maximum number of resources in the pool.
928 Initializes a BufferPool with a specified size and buffer size. @param size Pool size. @param bufferSize Buffer size. @param prefetchingStatistics Prefetching statistics object.
929 Requests a prefetch for the given block number. No-op. @param blockNumber The block number to prefetch.
930 Constructs a BufferData object. @param blockNumber Block number. @param buffer ByteBuffer containing data.
931 Constructs a Retryer with specified delay and update interval. @param perRetryDelay Delay between retries. @param maxDelay Maximum delay value. @param statusUpdateInterval Interval for status updates.
932 Checks if array is not null and has at least one element. @param array The array to check. @param argName Name of the argument being checked.
933 Checks if byte array is not null and not empty. @param array The byte array to validate. @param argName Name of the argument being checked.
934 Checks if array is null and not empty. @param array The short array to validate. @param argName Name of the argument being checked.
935 Checks if array is not null and has at least one element. @param array The array to check. @param argName Name of the argument being checked.
936 Checks if array is not null and has at least one element. @param array The array to check. @param argName Name of the argument being validated.
937 Checks if iterable is not null and contains at least one element. @param iter Iterable to check. @param argName Name of the argument.
938 Deletes multiple files/directories. @param paths Collection of paths to delete. @return List of deletion results (Path, error message).
939 Applies a function to an IOStatisticsSnapshot derived from source. @param source Serializable object to extract snapshot from. @param fun Function to apply; returns T.
940 Constructs a FlagSet with an enum class, prefix, and optional flags.
941 Closes the file system, removes from cache, and processes delete-on-exit files.
942 Compares this file status with another. @param o the FileStatus to compare to @return negative, zero, or a positive value.
943 Compares this file status with another. Delegates to the superclass implementation.
944 Converts FileStatus array to Path array, defaulting to path. @param stats Array of FileStatus objects. @param path Default Path if stats is null. @return Array of Path objects.
945 Checks if a path has the specified capability. @param path The path to check. @param capability The capability to check for. @return True if the path has the capability, false otherwise.
946 Creates a JsonSerialization instance for IOStatisticsSnapshot. Configures for field names and ignoring of transient fields.
947 Creates a StorageStatistics object from IOStatistics. @param name Statistics name. @param scheme Statistics scheme. @param source IOStatistics data source. @return StorageStatistics object.
948 Returns storage statistics for the current URI. Creates an EmptyStorageStatistics object.
949 Constructs a PathIsDirectoryException with the given path. @param path The path that is a directory.
950 Constructs a PathIsNotDirectoryException with the given path. @param path The path that is not a directory.
951 Constructs a PathOperationException with the given path. @param path The path associated with the exception.
952 Constructs a DirectoryIsNotEmptyException with the given path. @param path The path of the directory.
953 Sets the buffer size for the builder. @param bufSize The desired buffer size. @return This builder instance for chaining.
954 Sets the replica value. @param replica the replica value to set @return this builder instance
955 Sets the block size for the builder. @param blkSize The desired block size. @return This builder instance for chaining.
956 Marks the builder as recursive and returns the builder itself.
957 Adds the CREATE flag and returns this builder for chaining.
958 Sets the overwrite flag. @param overwrite Whether to enable overwrite functionality. @return This builder instance for chaining.
959 Appends to the builder, adding the APPEND flag. @return This builder instance for chaining.
960 Sets the hosts array. Interns strings if provided, otherwise uses empty array.
961 Sets the cached hosts array. Interns strings if provided.
962 Sets the names array. Interns strings if names is not null.
963 Sets the topology paths. Uses String interning if paths are provided.
964 Checks if a path represents a file. Returns false if file not found. @param f the path to check @throws IOException if an I/O error occurs
965 Wraps an IOException, potentially adding a custom message. @param path file/directory path @param methodName method name @param exception the exception to wrap @return Wrapped IOException
966 Synchronizes the input stream to a known sync marker. @param position Starting position to search for sync marker.
967 Resets the data stream position to the initial starting position.
968 Registers expression classes with the given ExpressionFactory.
969 Registers various command classes with the provided command factory.
970 Expands a file pattern into a list of full file paths. @param filePattern The file pattern to expand. @return List of expanded file paths.
971 Lists status of files/directories under a path, filtered by PathFilter. @param f path to list @param filter filter to apply @return FileStatus array of matching entries
972 Lists file statuses for the given paths, filtered by the provided filter. @param files Paths to check. @param filter Filter to apply. @return Array of FileStatus objects.
973 Gets a delegation token. @param url URL of the TGT. @param token TGT. @param renewer renewer. @return Delegation token.
974 Renews a delegation token. @param url Delegation token URL. @param token Token to renew. @return Renewed token lifetime.
975 Cancels a delegation token for the given URL and token. @param url URL of the delegation token to cancel. @param token Token to be canceled. @throws IOException if an I/O error occurs.
976 Creates a FileEncryptionInfo object with the given parameters. @param suite CipherSuite, version, edek, iv, keyName, ezKeyVersionName
977 Sets the permission for the object. @param perm The permission to set. @return This builder instance for chaining.
978 Sets the checksum option and returns this builder. @param chksumOpt The checksum option to set. @return This builder instance.
979 Constructs a WrappedIOException with the given IOException as the cause.
980 Constructs a FsLinkResolution with the provided function. @param fn The function to resolve links. Must not be null.
981 Constructs a GlobBuilder with the given FileContext. @param fc The FileContext to use; must not be null.
982 Constructs a GlobBuilder with the given file system. @param fs The file system to use.
983 Sets the permission for the object. @param perm The permission to set. @return This builder object for chaining.
984 Sets the progressable object. @param prog The progressable object to set. @return This builder instance for chaining.
985 Sets the checksum option and returns this builder. @param chksumOpt The ChecksumOpt instance to set. @return This builder instance.
986 Validates write arguments to prevent IndexOutOfBoundsException. @param b byte array @param off offset @param len length
987 Compares two strings for equality, ignoring case. @param s1 The first string. @param s2 The second string. @return True if strings are equal ignoring case, false otherwise.
988 Checks if the provided ZooKeeper context is stale. @param ctx The ZooKeeper context to check. @return True if the context is stale, false otherwise.
989 Retrieves statistics for the given file system class. @param scheme file system scheme @param cls file system class @return Statistics object for the file system.
990 Copies bytes from an input stream to an output stream. @param in Input stream. @param out Output stream. @param buffSize Buffer size. @param close Whether to close streams.
991 Copies a specified number of bytes from an input stream to an output stream. @param in Input stream. @param out Output stream. @param count Number of bytes to copy. @param close Whether to close streams after copying.
992 Checks disk I/O for a directory, retrying a few times. @param dir Directory to check; throws DiskErrorException on failure.
993 Checks if any storage type quota is set. Returns true if at least one quota > 0, false otherwise.
994 Checks if any storage type has consumed quota. Returns true if at least one type has consumed quota.
995 Checks if this object is equal to another object. Delegates to the superclass's equals method.
996 Returns the hash code value for this object. Delegates to super.
997 Resets the internal samples and sum to zero.
998 Sets the statistic's samples and sum from another MeanStatistic.
999 Converts IOStatistics to a string representation. @param statistics The IOStatistics object to convert, null for empty string. @return String representation of the statistics or an empty string.
1000 Appends a sorted map to a StringBuilder, using isEmpty predicate.
1001 Tracks duration with a default weight of 1. @param key Identifier for the duration being tracked. @return DurationTracker object for tracking.
1002 Returns an iterator over LongStatistic objects from counters & gauges.
1003 Adds a timed operation sample for mean, min, and max statistics. @param prefix Operation prefix; used for statistic keys. @param durationMillis Operation duration in milliseconds.
1004 Builds and returns the IOStatistics object. Sets instance to null to prevent further building.
1005 Adds a long function counter with the given key. @param key Counter key. @param eval Function to apply to a string and return a long.
1006 Adds a LongFunction gauge with the given key. @param key Gauge key. @param eval Function to evaluate and get a long value.
1007 Adds a long function minimum statistic with the given key. @param key Statistic key. @param eval Function to evaluate and get a long value.
1008 Sets the maximum value for a long function. @param key Identifier for the function. @param eval Function to evaluate. @return This builder instance.
1009 Adds a mean statistic function for a given key. @param key Identifier for the statistic. @param eval Function to calculate the mean statistic. @return This builder instance.
1010 Registers a new interrupt handler for the given signal name.
1011 Returns a snapshot of the statistics as a map. Uses copyFn to create copies of the values.
1012 Creates a snapshot of the source map. @param source The map to snapshot. @return A new map containing the snapshot.
1013 Creates and returns a new IOStatisticsSnapshot object.
1014 Constructs an IOStatisticsContextImpl with a thread and ID. @param threadId The ID of the thread. @param id The unique ID for this context.
1015 Creates and returns a new IOStatisticsSnapshot object.
1016 Checks if IO statistics context is enabled. Returns true if enabled, false otherwise.
1017 Retrieves and returns IO statistics. Delegates to retrieveIOStatistics with the output stream.
1018 Retrieves IO statistics using the input stream. @return IOStatistics object containing the statistics.
1019 Retrieves IO statistics from the data source. @return IOStatistics object containing the data.
1020 Retrieves IO statistics from the data source. @return IOStatistics object containing the statistics.
1021 Retrieves IO statistics using the input stream. @return IOStatistics object containing the statistics.
1022 Retrieves IO statistics for the wrapped stream. @return IOStatistics object containing the statistics.
1023 Retrieves IO statistics using the underlying output stream.
1024 Retrieves IO statistics using the provided input stream. @return IOStatistics object containing the statistics.
1025 Retrieves IO statistics for the input stream. @return IOStatistics object containing the statistics.
1026 Verifies chunked checksums against provided data and CRC values. @param type Checksum type, algorithm, data, CRC array, filename, basePos
1027 Updates the decryptor with new IV and key based on position.
1028 Encrypts data from the input buffer to the output stream.
1029 Default constructor for MD5MD5CRC32GzipFileChecksum.
1030 Default constructor for MD5MD5CRC32CastagnoliFileChecksum.
1031 Constructs a GlobPattern with the given glob pattern string.
1032 Creates a shell-style path from a File object. @param file The file to create the path from.
1033 Creates a secure shell path for a file (Unix-like systems). @param file The file for which to create the secure path. @throws IOException if an I/O error occurs.
1034 Extracts a zip file to the specified directory. @param inputStream Input stream of the zip file. @param toDir Directory to extract the zip file to.
1035 Unzips a ZIP file to a specified directory. @param inFile ZIP file to unzip. @param unzipDir Directory to unzip to.
1036 Disconnects an SFTP channel from the connection pool. @param channel The SFTP channel to disconnect. @throws IOException if an I/O error occurs during disconnection.
1037 Shuts down the SFTP server, disconnecting all active connections.
1038 Sets the checksum buffer size. @param size The new size of the checksum buffer.
1039 Creates a Statistics object as a copy of another Statistics object.
1040 Returns the total number of bytes read. Uses StatisticsAggregator to sum bytesRead from data.
1041 Returns the total number of bytes written. Uses StatisticsAggregator to sum bytesWritten from data.
1042 Calculates the total number of read operations. Uses StatisticsAggregator to sum readOps and largeReadOps.
1043 Returns the total number of large read operations. Uses StatisticsAggregator to sum largeReadOps from data.
1044 Returns the total number of write operations. Uses StatisticsAggregator to sum writeOps from data.
1045 Calculates the total remote read time in milliseconds. Uses StatisticsAggregator to sum remoteReadTimeMS from data.
1046 Calculates and returns aggregated statistics data. Uses StatisticsAggregator to combine data.
1047 Returns the total bytes read erasure coded. Uses StatisticsAggregator to sum bytesReadErasureCoded.
1048 Resets statistics by aggregating and negating data.
1049 Validates file creation flags. @param path The file path. @param pathExists Whether the path already exists. @param flag Creation flags.
1050 Validates EnumSet for appending; throws exception if missing APPEND.
1051 Constructs a URI based on input URI, scheme, authority needs, and default port.
1052 Creates a new ArrayPrimitiveWritable for the given primitive type. @param componentType The Class object of the primitive type.
1053 Parses permission string into an integer representation. @param permString String of permissions (r,w,c,d,a) @return Integer representing combined permissions.
1054 Processes ChecksumOpt, merging default and user options. @param defaultOpt Default ChecksumOpt. @param userOpt User-provided ChecksumOpt.
1055 Returns the canonicalized URI. Canonicalizes the URI obtained from getUri().
1056 Constructs a ContentSummary with default values for some fields. @param length Total length of content. @param fileCount Number of files. @param directoryCount Number of directories.
1057 Gets the status of the file system. @return FsStatus object representing the file system status.
1058 Constructs an HttpReferrerAuditHeader from a builder, initializing its attributes.
1059 Releases a buffer from the pool. @param data BufferData object to release.
1060 Constructs a SemaphoredDelegatingExecutor with null signature. @param executorDelegatee ExecutorService to delegate to. @param permitCount Initial number of permits. @param fair Whether permits are allocated fairly.
1061 Releases a READY buffer block with the greatest distance. @param blockNumber The block number to calculate distance from.
1062 Returns the current buffer position. Throws exception if buffer is invalid.
1063 Checks if the given position is within the current buffer. @param pos The position to check. @return True if within buffer, false otherwise.
1064 Returns the start offset of the buffer. @return The buffer's starting offset as a long.
1065 Returns the current IO statistics context, or an empty one if disabled.
1066 Sets the IO statistics context for the current thread. @param statisticsContext The IOStatisticsContext to set.
1067 Merges sorted file ranges into combined ranges. @param sortedRanges List of sorted file ranges to merge. @return List of combined file ranges.
1068 Finds combined checksum ranges from a list of file ranges. @param dataRanges List of file ranges to process. @param bytesPerSum Checksum size in bytes. @param minSeek Minimum seek distance. @param maxSize Maximum size of a range. @return List of combined checksum ranges.
1069 Default constructor. Calls the parameterized constructor with true.
1070 Applies the expression to the item, recursively. @param item PathData to apply to; depth is ignored. @return Result of applying expression; fails on child failure.
1071 Returns the FindOptions object, creating it if it's null.
1072 Parses command-line arguments, handling options and values. @param args List of command-line arguments to parse.
1073 Returns the command description, indicating deprecation if applicable.
1074 Displays a warning message to the error stream. @param message The warning message to display.
1075 Returns the command usage string. Combines name if usage is empty.
1076 Initializes ScopedAclEntries, splitting entries into access/default. @param aclEntries List of AclEntry objects to be split.
1077 Prints the data rows to the given PrintStream, formatted. @param out PrintStream to write the formatted data to.
1078 Creates a new Location object. @param allow boolean value to initialize the Location. @return A new Location object.
1079 Creates a new Data object with the given allow flag.
1080 Default constructor. Calls the long-argument constructor with 0.
1081 Creates a delegation token from a given token. @param dToken The token to create a delegation token from. @return A new DelegationTokenAuthenticatedURL.Token object.
1082 Lists located status for a given path. @param f the path to list @return RemoteIterator of LocatedFileStatus objects
1083 Opens a file with specified options. @param path Path to the file. @param parameters Open file parameters. @return CompletableFuture wrapping the FSDataInputStream.
1084 Gets the fallback FileSystem, or null if unavailable. Retrieves the FileSystem linked to fsState.
1085 Updates the buffer content. @param input Input buffer. @param output Output buffer. @return Number of bytes written to the output buffer.
1086 Finalizes the decryption process and writes to the output buffer. @param output ByteBuffer to store the decrypted data @return Number of bytes written to the output buffer
1087 Creates a RegexMountPointInterceptor from settings string. @param interceptorSettingsString settings string to parse @return RegexMountPointInterceptor or null if invalid.
1088 Normalizes a path string, removing redundant slashes and backslashes. @param scheme URI scheme (e.g., "file") @param path Path string to normalize @return Normalized path string
1089 Checks if a path string is a Windows absolute path. @param pathString Path to check. @param slashed True if path uses forward slashes. @return True if it's a Windows absolute path.
1090 Checks if the URI path is absolute, considering the separator.
1091 Calculates a hash code for a Path, ensuring a positive value. @param p The Path object to hash. @return The hash code of the Path (positive).
1092 Verifies the given path is a child of the base path. @param path The path to check.
1093 Finds the next available ID by iterating through files. @param initial base path to search for files @param lastId last ID used @return next available ID
1094 Skips n bytes from the current position. @param n number of bytes to skip, must be positive @return the number of skipped bytes
1095 Reads data from an InputStream using a ByteBufferPool. @param stream Input stream to read from @param bufferPool Pool for ByteBuffer allocation @param maxLength Maximum number of bytes to read @return ByteBuffer containing read data, or null if error @throws IOException if an I/O error occurs
1096 Resets the evaluated entries and re-initializes the data.
1097 Creates and initializes a CommonAuditContext instance. Returns the initialized context object.
1098 Creates a FsPermission with user, group, and other actions. @param u User action @param g Group action @param o Other action
1099 Constructs a FsPermission object from a short mode value.
1100 Reads a FsPermission from the input stream. @param in Input stream to read permission bits from. @return FsPermission object constructed from the input.
1101 Gets the effective permission for an AclEntry. @param entry The AclEntry to evaluate. @return The effective FsAction for the entry.
1102 Creates an immutable PermissionStatus object. @param user User name. @param group Group name. @param permission FsPermission object. @return Immutable PermissionStatus.
1103 Parses an ACL specification string into a list of AclEntry objects. @param aclSpec comma-separated ACL specification string. @param includePermission whether to include permission in parsing @return List of AclEntry objects.
1104 Creates a new FsCreateModes object with the given permissions. @param masked The masked permission. @param unmasked The unmasked permission.
1105 Prints an extended ACL entry, showing effective permissions if different.
1106 Splits a string by comma. @param str The string to split. @return An array of strings.
1107 Returns the current position of the byte buffer. @return The current position as an integer.
1108 Checks if the buffer has remaining bytes to read. Returns true if remaining, false otherwise.
1109 Starts a datablock upload; transitions to the Upload state. @return Null, upload data is handled elsewhere.
1110 Transitions to the closed state if not already closed. @return True if state changed, false otherwise.
1111 Flushes the output stream, calling super.flush() and out.flush().
1112 Gets statistics for a file system at the given URI. @param uri The URI representing the file system. @return Statistics object for the file system.
1113 Gets the current directory index from the allocator context.
1114 Writes sync data if needed, marking the start with SYNC_ESCAPE.
1115 Returns the current length of the output stream in bytes.
1116 Returns the current position in the output stream. @return Current position as a long value.
1117 Calculates content summary (length, file/dir count) for a Path. @param f the path to summarize @return ContentSummary object representing the summary
1118 Builds access control lists from user/group strings. Populates users/groups sets; allows all if wildcard found.
1119 Parses a comma-separated string into an EnumSet of the specified enum type. @param key Identifier for the parameter. @param valueString Comma-separated string of enum values. @param enumClass Enum class to parse. @param ignoreUnknown Whether to ignore unknown values. @return EnumSet of parsed enum values.
1120 Verifies the service state matches the expected state. @param expectedState The expected service state. @throws ServiceStateException if states do not match.
1121 Constructs a new AbstractService with the given name. @param name The name of the service.
1122 Validates state transition; throws exception if invalid. @param name Service name, state, and proposed state.
1123 Creates a ServiceLaunchException with a failure code and cause. @param exception The exception that caused the failure. @return A ServiceLaunchException representing the failure.
1124 Verifies that the configuration files exist. @param filenames array of configuration file names
1125 Converts a Throwable to an ExitUtil.ExitException with exit code. @param thrown The Throwable to convert. @return An ExitUtil.ExitException.
1126 Initializes the shutdown hook with a weak reference to the service. @param service The service to be shut down.
1127 Records a failure event, logging details and setting failure state. @param exception The exception that caused the failure.
1128 Records a lifecycle event with timestamp and current state.
1129 Stops services, optionally stopping only those that started. @param numOfServicesStarted Number of services to stop. @param stopOnlyStartedServices Whether to stop only started services.
1130 Stops a service, suppressing exceptions. @param service The service to stop. @return Exception if any, otherwise null.
1131 Compares this UTF8 object to another using byte-wise comparison.
1132 Checks if this UTF8 object is equal to another UTF8 object. @param o the object to compare to @return true if equal, false otherwise
1133 Compares this MD5Hash with another based on their byte digests.
1134 Compares this binary comparable to another. @param other The other BinaryComparable to compare to. @return -1, 0, or 1 based on comparison.
1135 Compares this byte array with another, using specified offset/length.
1136 Calculates the hash code using bytes and length.
1137 Reads a double value from the byte array, starting at the given index.
1138 Sets the size of the data structure. Adjusts capacity if new size exceeds current capacity.
1139 Checks if a file is readable. Uses Windows-specific API if on Windows.
1140 Checks if a file is writable. Uses NativeIO on Windows, f.canWrite() otherwise.
1141 Checks if a file is executable. Uses Windows-specific API if on Windows. @param f The file to check. @return True if executable, false otherwise.
1142 Returns the singleton instance of the ReadaheadPool. Creates it if it doesn't exist and NativeIO is available.
1143 Returns the memlock limit, or 0 if unavailable.
1144 Calculates chunked sums of data, using native or fallback method. @param data Data to process. @param offset Offset into data. @param length Length of data to process. @param sums Array to store sums. @param offset Offset into sums array.
1145 Creates a FileOutputStream for writing, creating the file if it doesn't exist. @param f the file @param permissions file permissions @throws IOException if an I/O error occurs
1146 Drains the buffer pool, freeing associated database resources.
1147 Releases memory occupied by input and output buffers.
1148 Gets file status for a file descriptor. @param fd The file descriptor. @return Stat object containing file status.
1149 Gets Stat object for given path. Throws IOException on error.
1150 Constructs BoundedByteArrayOutputStream with given capacity and limit.
1151 Constructs a Writable from an EnumSet. @param value The EnumSet to wrap.
1152 Writes data from an input stream to the buffer. @param in Input stream to read data from @param length Number of bytes to read
1153 Resets and returns a DataInputStream for key data.
1154 Decodes a Base64 string and populates a Writable object. @param obj Writable object to populate @param newValue Base64 encoded string
1155 Compares two byte array keys using a buffer. @param b1, s1, l1 first byte array and offset/length @param b2, s2, l2 second byte array and offset/length
1156 Checks if a block group has recoverable erased blocks. @param blockGroup BlockGroup object to check. @return True if recoverable, false otherwise.
1157 Calculates the total number of erased blocks in a block group.
1158 Returns indexes of erased blocks in the input array. @param inputBlocks array of ECBlocks @return int[] indexes of erased blocks
1159 Validates input buffers, ensuring correct length & directness. @param buffers Array of ByteBuffer objects to validate.
1160 Validates input buffers against expected length and count. @param buffers Array of byte buffers to validate.
1161 Initializes erasure decoding step with input blocks, erased indexes, decoders/encoders.
1162 Validates input array lengths for decoding; throws exceptions if invalid.
1163 Initializes an HHXORErasureEncodingStep with encoders and block arrays.
1164 Validates input and output array lengths against encoder counts.
1165 Adds corresponding elements of two arrays. @param p First integer array. @param q Second integer array. @return New array with element-wise sums.
1166 Multiplies two integer arrays and returns the product array.
1167 Performs Gaussian elimination on the input matrix. @param matrix The matrix to be processed.
1168 Prints a header followed by details of each chunk. @param header Header string to print. @param chunks Array of ECChunk objects to dump.
1169 Resets the buffers to their initial state based on dataLen.
1170 Converts an array of ECChunks to an array of ByteBuffers. Handles null chunks and resets buffers if all zero.
1171 Resets output buffers for each provided buffer and offset.
1172 Returns the default GaloisField instance. Uses default field size and primitive polynomial.
1173 Creates a BlockCompressorStream. @param out Output stream. @param compressor Compressor. @param bufferSize Buffer size. @param compressionOverhead Overhead for compression.
1174 Creates a ZStandardDecompressor with a specified buffer size. @param bufferSize Size of the direct buffers for decompression.
1175 Creates a Lz4Compressor with the default direct buffer size.
1176 Returns the Class object of the specified codec. @param codecName Name of the codec. @return Class of the codec or null if not found.
1177 Gets a compressor from the pool or creates a new one. @param codec CompressionCodec object @param conf Hadoop Configuration object @return Compressor object
1178 Gets a Decompressor from the pool or creates a new one. @param codec CompressionCodec to use for decompression. @return Decompressor object.
1179 Returns a compressor to the pool, resetting or discarding it. @param compressor Compressor object to return.
1180 Returns a Decompressor to the pool, resetting or discarding it. @param decompressor The Decompressor to return.
1181 Returns the type of compressor being used (ZStandard).
1182 Returns the type of Decompressor this class provides.
1183 Creates a ZlibCompressor with default compression settings.
1184 Constructs a ZlibCompressor with default header and buffer size. @param conf Configuration object for compression parameters.
1185 Reinitializes the compressor with a new configuration from conf. @param conf Configuration object containing new compression settings.
1186 Processes Gzip header state, advancing to the next stage. Handles basic, extra, filename, comment, and CRC fields.
1187 Writes the data to the DataOutput. @param out DataOutput to write to @throws IOException if an I/O error occurs
1188 Reads a VInt from the input stream, casting to int. @param stream DataInput stream to read from. @throws IOException if value is too large for an int.
1189 Reads a VInt from stream, ensuring it's within [lower, upper]. @param stream DataInput stream to read from @param lower Lower bound of the expected integer value @param upper Upper bound of the expected integer value @return Integer value from stream, cast to int @throws IOException if value is out of range
1190 Constructs a Text object with the given string. @param string The string to be associated with the Text object.
1191 Finds the starting index of 'what' in the byte array, starting from 'start'. Returns -1 if not found.
1192 Writes a String to a DataOutput. @param out DataOutput to write to @param s String to write @return Length of the written String in bytes
1193 Writes a string to a DataOutput, limiting its length. @param out Output stream. @param s String to write. @param maxLength Max length of the string in bytes. @return Length of the written string.
1194 Sets the byte array. Handles empty arrays, otherwise calls set(byte[], int, int).
1195 Sets the text content from another Text object. @param other The Text object to copy from.
1196 Reads a line of text from the input stream, handling buffering. @param str destination Text object @param maxLineLength max line length @param maxBytesToConsume max bytes to consume @return number of bytes consumed
1197 Reads a custom line from the input stream up to a delimiter. @param str Accumulates the read line. @param maxLineLength Max length of the line to read. @param maxBytesToConsume Max bytes to consume from stream. @return Number of bytes consumed.
1198 Constructs a new SortedMapWritable. Initializes the underlying TreeMap.
1199 Constructs a new MapWritable with an internal HashMap.
1200 Constructs a Key object from a byte array. @param value The byte array representing the key.
1201 Computes the MD5 hash of the input byte array. @param data The byte array to hash. @return MD5Hash object representing the digest.
1202 Calculates the MD5 hash of a UTF8 string. @param utf8 The UTF8 string to hash. @return MD5Hash object representing the hash.
1203 Initializes MD5Hash with the provided hexadecimal string. @param hex Hexadecimal representation of the MD5 hash.
1204 Creates a retry policy that retries forever with a fixed sleep. @param sleepTime The sleep time between retries. @param timeUnit The time unit of the sleep time.
1205 Creates a RetryPolicy with a fixed sleep time between retries. @param maxRetries Max retries allowed. @param sleepTime Sleep duration. @param timeUnit Time unit for sleepTime. @return RetryPolicy instance.
1206 Creates an ExponentialBackoffRetry policy. @param maxRetries Max retry attempts. @param sleepTime Initial sleep time. @param timeUnit Time unit for sleepTime.
1207 Creates a retry policy with proportional sleep based on retries. @param maxRetries Max retry attempts. @param sleepTime Initial sleep time. @param timeUnit Time unit for sleepTime.
1208 Records the start timestamp for write lock timing if held.
1209 Records the start time for lock acquisition using the clock.
1210 Records read lock start time if read lock is already held.
1211 Creates a dynamic proxy implementing the given interface. @param iface Interface to implement. @param proxyProvider Provider for the interface. @param methodNameToPolicyMap Retry policies for methods. @param defaultPolicy Default retry policy. @return Proxy instance.
1212 Returns the hash code, based on the multipleLinearRandomRetry.
1213 Checks if two WrapperRetryPolicy objects are equal. Compares the multipleLinearRandomRetry field.
1214 Creates and returns an IOException based on collected exceptions.
1215 Returns an array of supported compression algorithms.
1216 Returns the compression name from the rBlkState object.
1217 Reads a string from the DataInput. Returns null if length is -1.
1218 Reads the length of the data chunk from the input stream. Updates 'remain' and 'lastChunk' based on the value.
1219 Creates a comparator for RawComparable objects using the given name.
1220 Writes a chunk of data to the output stream. @param chunk Data to write. @param offset Start offset in the chunk. @param len Length of data to write. @param last True if this is the last chunk.
1221 Writes data to the output stream, possibly preceded by a VInt. @param data Data to write. @param offset Offset in the data array. @param len Length of data to write.
1222 Initializes the encoder with an output stream and chunk size. @param out Output stream to write encoded data. @param size Chunk size in bytes.
1223 Returns a comparator for Scanner.Entry objects, requiring sorted data.
1224 Checks if the current location is at or beyond the end location.
1225 Gets the location near a given offset. @param offset The offset to find the location near. @return Location object or end if not found.
1226 Creates and returns a copy of this Location object.
1227 Reads an integer value from a byte array. @param buf byte array to read from @return int value read from the array
1228 Sets the string value, truncating if too long, and updates length.
1229 Converts a set of Writables to a byte array. @param writables Writables to convert. @return Byte array representation of the writables.
1230 Converts a string to a byte array using UTF-8 encoding. @param string The string to convert. @return Byte array representing the string in UTF-8.
1231 Writes uncompressed data to the buffer, compresses, and writes it. @param uncompressedDataBuffer Data to be compressed and written. @throws IOException if an I/O error occurs.
1232 Copies data from the given Writable object to this object. @param other The Writable object to copy from. @throws IllegalArgumentException if other is null.
1233 Appends a key-value pair to the buffer, serializing and compressing. @param key The key to append. @param val The value to append.
1234 Returns the data as a byte array. Uses a buffer to serialize the object.
1235 Encodes a Writable object to a Base64 string. @param obj The Writable object to encode. @return Base64 encoded string representation of the object.
1236 Resets the input buffer with data from the output buffer.
1237 Calculates the distance between two nodes based on their paths. @param node1 The first node. @param node2 The second node. @return The distance between the nodes.
1238 Retrieves a node based on the provided node's network location. @param node The node to get the network location from. @return The node associated with the network location.
1239 Gets all leaf nodes within the specified scope. @param scope The scope to search for leaf nodes. @return A list of leaf Node objects.
1240 Counts available nodes within a scope, excluding specified nodes. @param scope Node scope identifier. @param excludedNodes Nodes to exclude from the count. @return Number of available nodes.
1241 Removes a node from the rack map, updates rack status. @param node The node to remove.
1242 Sorts nodes by distance from a reader, using secondary sort if provided. @param reader The reader node. @param nodes Array of nodes to sort. @param activeLen Length of the active portion of the nodes array.
1243 Recommissions a node, removing it from decommission list. @param node The node to recommission. Throws exception if inner.
1244 Transfers a specified number of bytes to a channel. @param fileCh The destination FileChannel. @param position The offset at which to transfer. @param count The number of bytes to transfer.
1245 Wraps an IOException with a more informative message. @param exception The IOException to wrap.
1246 Default constructor for RawScriptBasedMappingWithDependency.
1247 Initializes a ScriptBasedMapping with a raw DNSToSwitchMapping.
1248 Constructs an InnerNodeImpl with the given path. @param path The path for this node.
1249 Constructs an InnerNodeImpl with the given name, location, parent, and level.
1250 Kicks the first notification socket, if not already kicked.
1251 Binds and listens on a domain socket path. @param path Socket path to bind to. @return DomainSocket object. @throws IOException if an I/O error occurs.
1252 Creates a domain socket pair. @return An array of two DomainSocket objects. @throws IOException if an error occurs.
1253 Connects to a domain socket at the given path. @param path socket path @return DomainSocket object @throws IOException if connection fails
1254 Sends a callback and removes the entry if successful. @param caller Caller ID, entries, fdSet, fd.
1255 Closes the resource, closing a socket and joining the watcher thread.
1256 Retrieves a SelectorInfo from the provider's queue. Creates a new one if the queue is empty. @param channel The SelectableChannel to associate with. @return SelectorInfo object.
1257 Releases a SelectorInfo, updating activity time and re-queuing.
1258 Gets IP addresses for an interface. @param strInterface Interface name. @return Array of IP addresses or null if error.
1259 Resolves hostnames for a given network interface. @param strInterface Interface to resolve. @param nameserver Nameserver to use. @param tryfallbackResolution Fallback resolution flag. @return Array of hostnames.
1260 Creates a LogThrottlingHelper with a minimum logging period. @param minLogPeriodMs Minimum time (ms) between log entries.
1261 Records a log action with default recorder name and timestamp. @param values Log action values to record. @return LogAction object representing the recorded action.
1262 Retrieves a request parameter, quoting HTML characters. @param name Parameter name to retrieve. @return Parameter value or null if not found.
1263 Returns the request URL with HTML characters quoted. @return A StringBuffer containing the quoted URL.
1264 Returns the server name, quoting HTML characters.
1265 Creates a FileMonitoringTimerTask for a single file path. @param filePath Path to monitor. @param onFileChange Callback on file change. @param onChangeFailure Callback on failure.
1266 Updates a metrics record. @param mr The metrics record to update. @return The updated metrics record.
1267 Consumes data using the provided consumer. @param consumer Consumer to process the data. @throws InterruptedException if interrupted while waiting.
1268 Consumes all elements in the queue using the provided consumer. @param consumer The consumer to apply to each element. @throws InterruptedException if interrupted while waiting.
1269 Increments the cache hit counter.
1270 Increments the cache cleared counter.
1271 Increments the cache updated counter.
1272 Increments the backoff counter for disconnected RPC clients.
1273 Increments the counter for slow RPC calls.
1274 Increments the number of requeue calls.
1275 Increments the RPC call successes counter.
1276 Writes data from a buffer to a channel. @param channel WritableByteChannel to write to @param buffer ByteBuffer containing data to write @return Number of bytes written
1277 Reads data from the channel into the buffer. @param channel ReadableByteChannel to read from @param buffer ByteBuffer to store the read data @return Number of bytes read, or -1 if error.
1278 Increments failure count and records the last failure time.
1279 Fetches the set of groups for a user, logs performance metrics. @param user The user whose group set is to be fetched. @return A set of group names for the user.
1280 Unregisters the metrics source associated with this component.
1281 Sets quantile information based on provided names, description, and format.
1282 Sets quantile information based on provided names, description, and format.
1283 Creates a MetricsRegistry with the given name. @param name The name of the metrics registry.
1284 Creates a new MetricsTag with the given name, description, and value.
1285 Creates a MutableStat object with given name, description, etc. @param name Stat name @param description Stat description
1286 Adds a tag with a value to the registry. @param info MetricsInfo object, @param value tag value @param override Whether to override existing tags.
1287 Adds a value to the interval statistics and min/max trackers. @param value The value to add.
1288 Returns the standard deviation of RPC processing times.
1289 Inserts a value into the buffer. Increments count. May trigger batch insertion and compression.
1290 Creates a snapshot of quantile values. Returns a map of quantile to count, or null if empty.
1291 Returns the top N token owners sorted by token count. @param n The number of top owners to retrieve. @return List of NameValuePair objects representing top owners.
1292 Adds netgroups to the cache, caching only those starting with '@'. @param groups List of group names to add to the cache.
1293 Returns an unmodifiable collection of all tokens.
1294 Retrieves a list of groups for the given user. @param user The username to fetch groups for. @return Unmodifiable list of group names.
1295 Returns a set of group names for the given user. @param user User identifier. @return Unmodifiable set of group names.
1296 Retrieves a list of groups for a given user, including netgroups. @param user The username to retrieve groups for. @return List of group names.
1297 Prints an empty line to the console.
1298 Prints a system property to the console, using "UNSET" if absent. @param property The name of the system property to print.
1299 Prints the value of an environment variable. @param variable Name of the environment variable to print.
1300 Prints the lines of a file to the console. @param file the file to be printed @throws IOException if an I/O error occurs
1301 Logs an error message with a category and formatted message. @param category Error category. @param message Message format string. @param args Arguments for message formatting.
1302 Logs a warning message to the console with a given category. @param category Warning category. @param message Message format string. @param args Arguments for message formatting.
1303 Sets the authentication method for the user. @param authMethod The authentication method to set.
1304 Writes a byte to the output stream, wrapping if enabled. @param b The byte to write. @throws IOException if an I/O error occurs.
1305 Writes a byte array to the underlying output stream. @param b the byte array to be written @throws IOException if an I/O error occurs
1306 Checks token validity. @param identifier TokenIdent object to check @return DelegationTokenInformation if valid, throws InvalidToken otherwise
1307 Sets the external delegation token secret manager. @param secretManager The secret manager to set.
1308 Updates the current master key for delegation tokens. Generates a new key, logs the update, and stores it.
1309 Default constructor for DelegationKey, initializes with default values.
1310 Constructs a DelegationTokenAuthenticatedURL. @param authenticator DelegationTokenAuthenticator @param connConfigurator ConnectionConfigurator
1311 Renews the token, handling failures by obtaining a new delegation token. @return True if the filesystem was valid before renewal.
1312 Reads a single byte from the input stream. Returns -1 if end of stream is reached.
1313 Reads bytes from the input stream into the provided byte array. @param b buffer to read into, off offset, len number of bytes @return number of bytes read, or -1 if end of stream
1314 Authorizes a user based on their credentials and remote address. @param user UserGroupInformation object @param remoteAddress Remote address string @throws AuthorizationException if authorization fails
1315 Checks if Hadoop login context is active. @return True if Hadoop login context is managing the UGI.
1316 Creates a proxy UserGroupInformation representing a user. @param user The proxy user's name. @param realUser The UserGroupInformation of the real user. @return A UserGroupInformation object representing the proxy.
1317 Returns the real user or the original user if real user is null. @param user The UserGroupInformation to check. @return The real user or the original user.
1318 Returns a string representation of the object.
1319 Gets the real authentication method of the user. Returns the authentication method from UserGroupInformation.
1320 Gets the real authentication method for a UserGroupInformation. Returns the underlying auth method if using proxy auth.
1321 Creates an IpcConnectionContextProto based on provided info. @param protocol Protocol string, may be null. @param ugi UserGroupInformation object, may be null. @param authMethod Authentication method used. @return IpcConnectionContextProto object.
1322 Verifies the SSL certificate of a session against a host. @param host The hostname to verify against. @param session The SSL session to verify. @return True if verification succeeds, false otherwise.
1323 Loads a resource by name. @param name Resource name. @return SUCCESS or E_NOT_FOUND if resource is missing.
1324 Constructs a Command object with the given configuration.
1325 Constructs a CommandFactory with the given configuration. @param conf Configuration object for factory setup.
1326 Constructs a new FsShell with the given configuration. @param conf Hadoop configuration object.
1327 Constructs a FindClass object with the given configuration. @param conf Configuration object for class finding.
1328 Constructs a GetGroupsBase with a configuration and print stream. @param conf Configuration object. @param out PrintStream for output.
1329 Default constructor. Calls the parameterized constructor with null.
1330 Generates an ACL string based on allowed users/groups. Returns "*" if all are allowed, otherwise combines users/groups.
1331 Retrieves the original TGT from the subject's private credentials. Returns null if no TGT is found.
1332 Sets the SSL configuration for the ZKClientConfig. @param zkClientConfig ZKClient configuration object. @param truststoreKeystore Truststore/keystore details. @throws ConfigurationException if configuration fails.
1333 Creates an OpensslCipher instance for the given transformation. @param transformation Cipher transformation string (e.g., "AES-CBC") @param engineId Engine identifier, or null for default engine. @return OpensslCipher instance. @throws NoSuchAlgorithmException, NoSuchPaddingException
1334 Creates a new key version with the given name and options. @param name Key name. @param options Key generation options. @return New KeyVersion object.
1335 Generates a new version of a key. @param name Key name. @return New KeyVersion object. @throws IOException, NoSuchAlgorithmException
1336 Adds an element to the queue. Throws backoff if needed. @param e element to add @throws InterruptedException if interrupted while adding
1337 Initializes the RPC protocol engine for writable RPCs. Sets isInitialized to true after registration.
1338 Starts the StopWatch. Throws exception if already running. Returns this StopWatch instance.
1339 Stops the StopWatch and returns it. Throws exception if already stopped.
1340 Returns the current elapsed time in nanoseconds.
1341 Calculates a fingerprint from an array of methods. @param methods Array of Method objects to fingerprint. @return An integer representing the fingerprint.
1342 Retrieves a ProtocolSigFingerprint, caching if necessary. @param protocol Protocol class. @param serverVersion Server version. @return ProtocolSigFingerprint object.
1343 Creates a RemoteException from attributes. @param attrs Attributes object containing class and message.
1344 Returns the partial listing. Throws exception if present. @return List of items, or null if an exception occurred.
1345 Adds response time metrics using the legacy method. callName: Name of the call, schedulable: Priority, details: Processing details.
1346 Offers element to queues with priority up to lastPriority. @param priority element priority @param e element to offer @param includeLast whether to include the last queue @return true if offer succeeds, false otherwise
1347 Populates response parameters with error details from a Throwable. Sets status, detailed error code, class, and stringified error.
1348 Constructs a VersionMismatch exception with interface name & versions. @param interfaceName Interface name. @param clientVersion Client version. @param serverVersion Server version.
1349 Recomputes the schedule cache based on call costs. Updates the scheduleCacheRef with the new computed levels.
1350 Gets priority level, using cache if available, else computes it. @param identity Object used as key for cache/computation. @return Priority level as an integer.
1351 Returns the hash code value for this object. Delegates to super.
1352 Gets and advances the current index. @return The current index value.
1353 Gets the remote IP address as a string. @return Remote IP address string, or null if unavailable.
1354 Constructs a MachineList with provided host entries and default InetAddressFactory. @param hostEntries Collection of host entries to initialize the list.
1355 Reads /proc/meminfo file. Calls overloaded method with flag false.
1356 Gets the available physical memory size in KB. Uses ramSizeFree and inactiveFileSize/inactiveSize.
1357 Gets the cumulative CPU time. Reads procstat file and returns tracked CPU time.
1358 Calculates CPU usage percentage, divided by the number of processors.
1359 Returns the percentage of vCores used. Reads procstat, calculates usage. Returns float value.
1360 Inserts the specified key-value pair into the buffer. Doubles buffer size if full.
1361 Creates a secure TransformerFactory with secure processing enabled. @return TransformerFactory configured for secure XML transformations. @throws TransformerConfigurationException if factory creation fails.
1362 Creates a secure SAX transformer factory. Enables secure processing and sets optional attributes. @return SAXTransformerFactory instance @throws TransformerConfigurationException if creation fails
1363 Formats a size as a string, human-readable or raw. @param size Size in bytes. @param humanReadable Whether to use human-readable format. @return Formatted size string.
1364 Formats file size as human-readable or raw value. @param size File size in bytes. @param humanReadable True for human-readable format.
1365 Converts a long to a human-readable string representation. Uses TraditionalBinaryPrefix for the conversion.
1366 Converts a byte count to a human-readable binary prefix string. @param len The number of bytes. @return A string representation of the byte count.
1367 Adds filesystem usage data to the usages table. @param uri The URI of the filesystem. @param fsStatus Filesystem status object. @param mountedOnPath Path where filesystem is mounted.
1368 Converts a byte array to a hexadecimal string representation.
1369 Sorts a portion of an indexed sortable using a comparator. @param s sortable object @param p start index @param r end index
1370 Terminates the application with the provided exit exception.
1371 Terminates the service with a given status and error message. @param status Exit status code. @param message Error message to include in exception.
1372 Terminates the application with a given status and exception. Handles ExitException or wraps other exceptions as ExitException.
1373 Terminates the application with a given status and message. @param status Exit status code. @param msg Error message.
1374 Halts execution with a status code and optional exception. @param status Halt status code. @param t Optional exception to associate with halt. @throws HaltException if halting fails.
1375 Halts execution with a HaltException. @param status Halt status code. @param message Halt message.
1376 Removes this instance as a shutdown hook. Handles potential errors.
1377 Creates an ArrayList from an Iterable. @param elements Iterable to copy elements from. @return New ArrayList containing elements from Iterable.
1378 Creates a new LinkedList from the given iterable elements. @param elements Iterable containing elements for the list. @return A new LinkedList containing the elements.
1379 Creates an ACL from a permission and a list of entries. @param perm FsPermission object containing permission bits @param entries List of existing AclEntry objects @return Combined ACL list
1380 Creates an ArrayList from a variable number of elements. @param elements Elements to add to the ArrayList @return An ArrayList containing the provided elements
1381 Creates a new ArrayList with an estimated initial capacity. @param estimatedSize The expected size of the ArrayList.
1382 Saves an instance to a file in JSON format. @param file The file to save to. @param instance The object to save.
1383 Initializes a duration tracker with given stats store, key, and count.
1384 Creates a DurationInfo object with specified logging and format. @param log Logger instance @param logAtInfo Whether to log at info level @param format Format string for duration text @param args Arguments for format string
1385 Returns a string representation of the object's duration.
1386 Creates a striped CRC composer with specified parameters. @param type Checksum type, bytesPerCrcHint, stripeLength @return A new CrcComposer instance.
1387 Composes two CRCs using a monomial. @param crcA Initial CRC value. @param crcB Current CRC value. @param lengthB Length of the data. @param mod Modulus value.
1388 Writes the current CRC value to the digest and resets. @return byte array containing the CRC digest.
1389 Unpacks a JAR file from an InputStream to a directory. @param inputStream Input stream of the JAR file. @param toDir Directory to unpack the JAR to. @param name JAR file name. @param unpackRegex Regex pattern for files to unpack.
1390 Extracts files from a JAR archive to a directory. @param jarFile The JAR file to unjar. @param toDir The directory to extract files to.
1391 Finds the nth occurrence of a byte in a byte array. @param utf byte array to search, b byte to find, n occurrence (1-based)
1392 Retrieves a value associated with the given key. @param key the key to look up @return the value or creates a new one if not found.
1393 Logs a lock/wait warning if the holding time exceeds the threshold. @param acquireTime Lock acquisition timestamp. @param releaseTime Lock release timestamp. @param checkLockHeld Whether a lock was held or waited.
1394 Formats finish time, optionally adding time difference. @param formattedFinishTime Finish time string. @param finishTime Finish time in milliseconds. @param startTime Start time in milliseconds. @return Formatted time string with time difference.
1395 Splits a string by a comma, escaping with ESCAPE_CHAR.
1396 Converts a string to camelCase. @param s The input string to camelize. @return The camelized string.
1397 Escapes a string by replacing a specific char with an escape char. @param str String to escape @param escapeChar Char to use for escaping @param charToEscape Char to be escaped @return Escaped string
1398 Unescapes a string, replacing escaped characters. @param str String to unescape @param escapeChar Escape character @param charToEscape Character to escape
1399 Creates a startup/shutdown message string with class, host, args, version info.
1400 Returns the build version from the COMMON_VERSION_INFO.
1401 Returns the next element in the sequence or throws exception.
1402 Checks if the source has next element; closes if not. @throws IOException if an I/O error occurs @return true if source has next, false otherwise
1403 Creates a LazyAutoCloseableReference from a supplier. @param supplier Supplier that provides the AutoCloseable resource. @return LazyAutoCloseableReference to the resource.
1404 Gets the page size for bulk delete operation. @param fs FileSystem object @param path Path for bulk delete @return Page size for bulk delete
1405 Deletes multiple paths using a bulk delete operation. @param fs FileSystem object @param base Base path for deletion @param paths Paths to delete @return List of deleted entries
1406 Opens a file in the file system with specified options. @param fs filesystem, path, policy, status, length, options @return FSDataInputStream object
1407 Reads data from InputStream into ByteBuffer at specified position. @param in Input stream. @param position Read position. @param buf Destination buffer.
1408 Loads an IOStatisticsSnapshot from the given file system path. @param fs FileSystem to load from. @param path Path to the snapshot file. @return IOStatisticsSnapshot object.
1409 Parses a JSON string into an IOStatisticsSnapshot object. @param json The JSON string to parse. @return An IOStatisticsSnapshot object.
1410 Retrieves the result of the evaluation, handling I/O exceptions. @return The evaluated result of type T. @throws UncheckedIOException if an I/O error occurs.
1411 Creates a Builder for processing items from an Iterable. @param items The Iterable to process. Must not be null. @return A Builder instance.
1412 Re-throws the inner cause of an ExecutionException. Delegates to FutureIO.raiseInnerCause(e).
1413 Awaits the result of a Future, handling exceptions and re-throwing. @param future The Future to await. @return The result of the Future.
1414 Awaits the result of a Future with a timeout. @param future Future to await. @param timeout Timeout duration. @param unit Timeout unit (e.g., SECONDS, MILLS) @return Result of the Future. @throws TimeoutException if timeout expires.
1415 Re-raises the inner cause of a CompletionException. @param e The CompletionException to process. @return The re-raised exception.
1416 Sets the configuration for an object, if configurable. @param theObject Object to set the configuration for. @param conf Configuration object to be set.
1417 Retrieves a Class object by name, using a configuration. @param name Class name to find. @param conf Configuration to use. @throws IOException if class loading fails.
1418 Loads a class by name, using Configuration if available. @param conf Configuration object (can be null). @param className Name of the class to load. @return The loaded Class object.
1419 Retrieves a class by name from the configuration. @param name Class name to retrieve. @return The class object or throws ClassNotFoundException.
1420 Logs thread info if interval has passed, using provided log. @param log Logger instance @param title Log title @param minInterval Minimum time interval in seconds
1421 Logs thread information to the provided logger, throttled by minInterval.
1422 Constructs a builder, ensuring only path or pathHandle is provided. @param optionalPath Optional path to use. @param optionalPathHandle Optional path handle to use.
1423 Default constructor. Initializes with default configuration.
1424 Validates HTTP response status. Throws IOException if validation fails. @param conn HttpURLConnection to validate @param expectedStatus Expected HTTP status code
1425 Creates a CRC32C checksum object, using Java9 if available. Falls back to PureJavaCrc32C if Java9 fails.
1426 Retrieves group names for a user via Shell. @param userName The username to query. @return String array of group names.
1427 Retrieves group IDs for a user via Shell command. @param userName The username to fetch group IDs for. @return String array of group IDs.
1428 Constructs a command to set permission for a file. @param perm permission string (e.g., "rwx") @param recursive whether to apply recursively @param file file path @return Command array
1429 Returns command to check if process with given PID is alive. @param pid Process ID to check. @return Command array to check process status.
1430 Returns the canonical path of the Hadoop home directory.
1431 Gets the qualified Hadoop bin path for the given executable. @param executable Name of the executable. @return File object representing the executable's path.
1432 Adds a new phase to the progress tracker. Returns the newly created Progress phase object.
1433 Adds specified number of phases and sets equal weightage. @param n The number of phases to add.
1434 Adds a phase with the given status and weightage. @param status Phase status string. @param weightage Phase weightage (float). @return The newly created Progress phase.
1435 Returns the progress value. Synchronized for thread safety.
1436 Creates a new resource at the given path. @param path The path of the resource to create. @return True if creation was successful, false otherwise.
1437 Creates root directory recursively based on the given path. @param path The path to create. @param zkAcl ACLs to apply to the created nodes.
1438 Attempts to find and set a method implementation by class name. @param className Class name to search for. @param methodName Method name. @param argClasses Argument classes of the method. @return This builder instance.
1439 Sets the target class and argument classes for implementation. @param targetClass Target class for the implementation. @param argClasses Argument classes for the implementation.
1440 Attempts to find a hidden implementation for a method. @param className Class name to search. @param methodName Method name. @param argClasses Method argument classes. @return Builder instance.
1441 Calls hiddenImpl with targetClass, name, and argClasses. @param targetClass The class to invoke. @param argClasses Argument classes for the hidden method. @return This builder instance.
1442 Loads an unbound method. Returns a noop method if source is null. @param source Class object @param returnType Class extending T @param name Method name @param parameterTypes Method parameter types @return UnboundMethod object
1443 Verifies that all listed methods are available, throwing an exception if not.
1444 Checks if bulk delete is available, using the configured method.
1445 Checks if the fileSystemOpenFile method is available. Returns true if available, false otherwise.
1446 Checks if the byte buffer is positioned and readable. @return True if readable, false otherwise.
1447 Checks if the buffer is readable and attempts to read fully. @param in InputStream to read from. @return True if read fully, false otherwise.
1448 Checks if IO statistics snapshot creation method is available.
1449 Checks if IO statistics context is available. Returns true if enabled, false otherwise.
1450 Checks if a method is available; throws exception if not. @param method The unbound method to check. @throws UnsupportedOperationException if method is unavailable.
1451 Builds a checked method and binds it to the receiver object. @param receiver The object to bind the method to. @return The bound method.
1452 Builds a bound method, binding it to the provided receiver object. @param receiver The object to bind the method to. @return The bound method.
1453 Builds a static version of a checked method. @return StaticMethod object representing the static method.
1454 Builds a static version of the object. Returns a StaticMethod object.
1455 Loads available file systems using ServiceLoader, caching them.
1456 Calculates and prints the Jenkins hash of a file. @param args Command line arguments: filename
1457 Initializes a HashFunction with max value, number of hashes, and hash type. @param maxValue The maximum value for hashing. @param nbHash The number of hash functions. @param hashType The type of hash function to use.
1458 Constructs a new RetouchedBloomFilter instance.
1459 Estimates the count associated with a key using multiple hash functions. @param key The key to estimate the count for. @return Approximate count value or 0 if no count found.
1460 Adds a key to false positive vectors. @param key The key to add; throws NullPointerException if null.
1461 Removes a key from all hash buckets in the vector. @param k The key to remove. @param vector Array of lists containing keys.
1462 Finds the index of the element with the minimum key weight. @param h array of hash indices @return Index of the element with the minimum key weight
1463 Finds the index of the maximum weight feature in the hash list. @param h array of hash indices @return Index of the feature with the maximum weight.
1464 Calculates the ratio of keyWeight to fpWeight for each element.
1465 Dumps resource content to stdout. @param name Resource name to dump. @return SUCCESS or error code if failed.
1466 Prints usage instructions and returns E_USAGE. Explains available commands and return codes.
1467 Inserts an element into the heap. Returns true if successful.
1468 Creates a new TreeSet from an Iterable of elements. @param elements Iterable containing elements to add to the set. @return A new TreeSet containing the provided elements.
1469 Creates a new HashSet from an Iterable or Iterator. @param elements Iterable to populate the HashSet.
1470 Creates a HashSet from a variable number of elements. @param elements Elements to add to the HashSet. @return A new HashSet containing the provided elements.
1471 Runs the specified program with given arguments. @param args Command-line arguments, program name is first. @return 0 on success, -1 on failure.
1472 Adds a column with title, justification, and wrap flag. @param title Column title. @param justification Text justification. @param wrap Wrap text or not. @return This builder instance.
1473 Delegates to the overloaded method with default unit. @param name Identifier name. @param vStr Value string. @param unit Time unit.
1474 Appends an XML property to the document, redacting if needed. @param doc XML document, conf Element, propertyName, redactor
1475 Atomically applies deprecation deltas to the deprecation context.
1476 Attempts to bind the listener to a port within the defined range.
1477 Adds target fencing parameters to the environment variables map. Uses TARGET_PREFIX for active/null state, SOURCE_PREFIX otherwise.
1478 Reads data from a positioned readable stream into a ByteBuffer. Uses direct buffer optimization if available.
1479 Validates and sorts a list of file ranges. @param ranges List of FileRange objects to validate. @throws EOFException if validation fails.
1480 Sets the caching action future. @param actionFuture Future representing the caching operation.
1481 Updates the state to the new state, validating expected current state.
1482 Checks if the given path exists and is a directory. @param path Path to check. @param argName Argument name for error message.
1483 Checks if the path exists and is a file. @param path The path to check. @param argName Name of the argument being validated.
1484 Checks if a given block is the last block in the file. @param blockNumber The block number to check. @return True if the block is the last one, false otherwise.
1485 Calculates the start offset for a given block number. @param blockNumber The block number to calculate offset for. @return The start offset in bytes.
1486 Retrieves the state of a block. @param blockNumber The block's index. @return The state of the specified block.
1487 Sets the state of a block. @param blockNumber Block index to update. @param blockState The new state for the block.
1488 Calculates the block number given an offset. @param offset The offset into the data. @return The corresponding block number.
1489 Aggregates IOStatistics to a snapshot. @param snapshot The snapshot to aggregate to. @param statistics The IOStatistics to aggregate. Returns true on success.
1490 Saves an IO statistics snapshot to a file system path. @param snapshot Snapshot data, FS, path, overwrite flag.
1491 Retrieves IO statistics counters from a source. @param source The source of IO statistics. @return A map of counter names to their values.
1492 Retrieves gauges from an IOStatisticsSnapshot. @param source Source object containing the snapshot. @return Map of gauge names to their values.
1493 Retrieves minimum IO statistics from a snapshot. @param source Serializable snapshot source. @return Map of minimum IO statistics.
1494 Retrieves maximum IO statistics from a source. @param source Serializable object containing IO statistics. @return Map of statistic names to their maximum values.
1495 Calculates mean statistics from a snapshot. @param source IOStatisticsSnapshot source @return Map of statistic names to (samples, sum) pairs.
1496 Creates a copy of this FlagSet with the same flags. @return A new FlagSet instance.
1497 Creates a FlagSet instance with the given enum class, prefix, and flags.
1498 Closes the file system, releasing resources. Closes the underlying 'fs' if it exists.
1499 Closes all FileSystem resources, optionally only automatic ones. @param onlyAutomatic if true, closes only automatically registered resources. @throws IOException if any of the close operations fail.
1500 Converts an IOStatisticsSnapshot to a JSON string. @param snapshot The snapshot to convert; null allowed. @return JSON string representation of the snapshot.
1501 Writes byte array to a file in the file system. @param fileContext Hadoop FileContext @param path Path to write to @param bytes Data to write @return FileContext
1502 Writes lines to a file in the file system. @param fileContext Hadoop FileContext @param path Path to write to @param lines Lines to write @param cs Charset to use @return FileContext
1503 Writes a CharSequence to a file using the given Charset. @param fs FileContext, the file system context @param path Path, the file path @param charseq CharSequence to write @param cs Charset, character encoding @return FileContext
1504 Creates a data output stream builder for the given path. @param path Path to create the output stream for. @return FSDataOutputStreamBuilder for the created stream.
1505 Creates a data output stream builder for the given path. @param path Path to create the output stream for. @return FSDataOutputStreamBuilder for the specified path.
1506 Creates an appendable FSDataOutputStreamBuilder for the given path. @param path the path to append to @return FSDataOutputStreamBuilder for appending to the path
1507 Appends a file to the Hadoop file system. @param path Path to the file to append. @return FSDataOutputStreamBuilder for appending.
1508 Lists status of files and directories under the given path. @param f Path to list status for. @return Array of FileStatus objects.
1509 Lists the status of multiple files. @param files Array of file paths to check. @return FileStatus array for the given files.
1510 Creates a new MutableCounterInt with given info and initial value. @param info MetricsInfo object @param iVal Initial counter value @return New MutableCounterInt object
1511 Creates a new MutableCounterLong with given info and initial value. @param info MetricsInfo object @param iVal Initial counter value @return New MutableCounterLong object
1512 Creates a new MutableGaugeLong metric. @param info Metric info. @param iVal Initial value. @return The new MutableGaugeLong metric.
1513 Creates a new MutableGaugeFloat with given info and initial value. @param info MetricsInfo object @param iVal Initial float value @return New MutableGaugeFloat object
1514 Creates a new MutableGaugeInt with given info and initial value. @param info MetricsInfo object @param iVal Initial integer value @return New MutableGaugeInt object
1515 Resolves a file path using a provided resolution function. @param fileContext File context for resolution. @param path Path to resolve. @param fn Resolution function. @return Resolved value of type T.
1516 Creates a new GlobBuilder instance with the given FileContext. @param fileContext The file context for globbing operations. @return A new GlobBuilder object.
1517 Creates a new GlobBuilder instance for the given filesystem. @param filesystem The filesystem to use for globbing. @return A new GlobBuilder object.
1518 Checks if the asynchronous call is done. Returns true if returned or exception occurred, false otherwise.
1519 Retrieves an AsyncGet instance, or fetches from a lower layer.
1520 Updates the 'used' attribute with folder usage.
1521 Constructs a new MeanStatistic by copying another one. @param that The MeanStatistic to copy.
1522 Converts IO statistics source to a string representation. @param source The source object for IO statistics. @return String representation or "" if an error occurs.
1523 Returns a string representation of the IO statistics.
1524 Returns a string representation of the IO statistics. Returns NULL_SOURCE if statistics are null.
1525 Converts IOStatistics to a formatted string representation. @param statistics The IOStatistics object to format. @return Formatted string or empty string if statistics is null.
1526 Creates a DurationTracker, using factory if provided. @param factory Factory to create tracker, or null. @param statistic Statistic name for the tracker. @return DurationTracker instance.
1527 Deletes a block file and evicts it from the cache. @param elementToPurge Entry object representing the file to purge.
1528 Creates IOStatistics from StorageStatistics. @param storageStatistics Source for IO statistics. @return IOStatistics object populated from StorageStatistics.
1529 Adds an AtomicLong counter to the statistics with the given key. @param key Counter key @param source AtomicLong to track @return This builder instance
1530 Adds an AtomicInteger counter to the statistics with the given key. @param key Counter key @param source AtomicInteger to track @return this
1531 Adds a mutable counter to the statistics with the given key. @param key counter key @param source mutable counter source @return this builder
1532 Adds an AtomicLong gauge with the given key. @param key Gauge key. @param source AtomicLong source. @return this
1533 Adds an AtomicInteger gauge with the given key. @param key Gauge key. @param source AtomicInteger to track. @return This builder.
1534 Sets the minimum value for a given key using an AtomicLong. @param key Identifier for the statistic. @param source AtomicLong source for the minimum value.
1535 Sets the minimum value for a key using an AtomicInteger. @param key Key to associate with the minimum value. @param source AtomicInteger providing the minimum value.
1536 Sets the maximum value for a key using an AtomicLong. @param key key for the statistic @param source AtomicLong source for the maximum value
1537 Sets the maximum value for a key using an AtomicInteger. @param key Key for the statistic. @param source AtomicInteger to track the maximum. @return The builder instance.
1538 Registers interrupt handling and sets uncaught exception handler.
1539 Accepts a connection on the domain socket. @return A new DomainSocket representing the accepted connection. @throws IOException if an I/O error occurs.
1540 Shuts down the resource, ensuring proper cleanup and reference management.
1541 Sends file descriptors using a buffer. @param descriptors File descriptors to send. @param jbuf Buffer for data. @param offset Start offset in jbuf. @param length Length of data to send.
1542 Receives file descriptors from streams into a buffer. @param streams Input streams to receive from. @param buf Buffer to store received data. @param offset Offset in buffer. @param length Length of data to receive. @return Number of bytes received. @throws IOException If an I/O error occurs.
1543 Creates a new IOStatisticsContext instance for the given key. @param key The key to associate with the new context. @return A new IOStatisticsContextImpl instance.
1544 Verifies chunked sums using native or fallback method. @param data Data buffer to verify. @param checksums Checksum buffer. @param fileName File name. @param basePos Base position.
1545 Returns padding byte. Re-initializes decryptor if needed. @param decryptor Decryptor object @param inBuffer Input buffer @param position Current position @param iv Initialization vector @return Padding byte
1546 Resets the stream offset and clears buffers. @param offset The new offset for the stream. @throws IOException if an I/O error occurs.
1547 Writes data to the stream. @param b The byte array to write. @param off Offset within the array. @param len Number of bytes to write.
1548 Flushes the buffer, encrypting data before calling super.flush().
1549 Compiles a glob pattern into a Pattern object for matching. @param globPattern The glob pattern string to compile. @return A Pattern object representing the compiled glob.
1550 Gets bytes read based on distance. @param distance Distance value to determine bytes read. @return Number of bytes read.
1551 Creates a primitive data output stream. @param f Path to create. @throws IOException on failure.
1552 Constructs a FileSystem with the given URI, scheme, and port.
1553 Encodes input byte arrays to output arrays. @param inputs Input byte arrays to encode. @param outputs Output byte arrays to store encoded data.
1554 Encodes data from input ByteBuffers to output ByteBuffers. @param inputs Input ByteBuffers to encode. @param outputs Output ByteBuffers to write encoded data.
1555 Constructs a new ArrayPrimitiveWritable with the given value.
1556 Returns the canonical URI of the file system. Delegates to the underlying file system's method.
1557 Checks if the data source has the specified capability. @param capability Capability to check for. @return True if the data source has the capability.
1558 Releases a buffer data object, releasing it to the pool. @param data The buffer data to release.
1559 Releases buffers in the 'DONE' state. Iterates through all buffers.
1560 Constructs a CachingBlockManager with provided parameters. @param blockManagerParameters Configuration parameters for the manager.
1561 Reads data from a block into the provided buffer. @param blockNumber Block number to read. @param buffer ByteBuffer to store the data.
1562 Calculates the absolute position based on buffer offset. Throws an exception if the buffer is invalid.
1563 Checks if the buffer has been fully read. Returns true if all data has been processed.
1564 Sets the buffer position to the absolute position. @param pos The absolute position to set. @return True if successful, false otherwise.
1565 Returns the current IO statistics context. Returns null if the context is not available.
1566 Sets the thread's IO statistics context. @param statisticsContext The context to set.
1567 Retrieves instance configurations based on the given type. @param type config type to filter by @return Map of instance name to MetricsConfig
1568 Parses arguments, removes initial elements, and returns modified list.
1569 Displays an error message and increments the error count. @param message The error message to display.
1570 Creates a PathHandle for a file, throwing exceptions if invalid. @param stat FileStatus object @param opts Handle options @return LocalFileSystemPathHandle object
1571 Returns an array containing 'changed' and 'moved' HandleOpt objects.
1572 Returns an array of HandleOpt objects, representing content changes.
1573 Returns an array containing changed and moved HandleOpt objects.
1574 Returns an array containing 'changed' and 'moved' HandleOpt objects.
1575 Constructs a ShellCommandExecutor with command, directory, env, timeout.
1576 Starts/stops the refresh thread based on refreshInterval. @param runImmediately Whether to start immediately.
1577 Creates a private clone of the token with a new service. @param newService The new service for the cloned token. @return A new PrivateToken instance.
1578 Checks if URI has a scheme but a relative path. Throws exception if true.
1579 Checks if the URI is absolute and has null scheme/authority.
1580 Checks if the URI path is absolute. @return True if absolute, false otherwise.
1581 Checks if the given path is valid for this file system. @param path The path to check.
1582 Writes the object to a DataOutput stream as a serialized proto. @param out Output stream to write to. @throws IOException if an I/O error occurs.
1583 Validates arguments for a part upload operation. @param filePath Path to the file. @param inputStream Input stream for the part. @param partNumber Part number. @param uploadId Upload handle. @param lengthInBytes Length of the part in bytes.
1584 Aborts all uploads under the given path. Returns a CompletableFuture. @param path Path to check for uploads to abort. @throws IOException if path validation fails.
1585 Skips specified number of bytes. @param n number of bytes to skip, capped by file length. @return actual number of bytes skipped.
1586 Applies a umask to the current permissions. @param umask The umask to apply. @return A new FsPermission with the umask applied.
1587 Gets the file permissions from an LsEntry. @param sftpFile Entry containing file attributes. @return FsPermission object representing the permissions.
1588 Constructs a FsPermission with the given numeric mode. @param mode Numeric permission mode (0-17777)
1589 Returns the default file system permission (00777). Returns a new FsPermission object.
1590 Returns the default directory permission (00777).
1591 Returns the default file permissions (00666).
1592 Returns the default cache pool permission. Returns a new FsPermission object with (00755).
1593 Parses a Unix symbolic permission string into an FsPermission. @param unixSymbolicPermission Unix permission string (e.g., "rwxrwxrwx") @return FsPermission object representing the parsed permission.
1594 Prints ACL entries for a scope, handling minimal/extended formats. @param aclStatus ACL status object @param fsPerm FileSystem permission @param entries List of ACL entries to print
1595 Converts a list of AclEntry objects to a comma-separated string.
1596 Creates a FsPermission with the given mode string. @param mode String representing file permissions (e.g., "rwxrwxrwx")
1597 Reads up to 'length' bytes from the stream into 'b', starting at 'offset'. Returns the number of bytes read, or -1 if EOF.
1598 Calculates the compressed size from the starting position. @return The compressed size in bytes.
1599 Adjusts column widths based on PathData items' stats. Updates maxRepl, maxLen, maxOwner, maxGroup, maxEC.
1600 Gets quota usage for a file path. @param f the file path @return QuotaUsage object
1601 Gets the size of the content at the given path. @param path Path to the content. @return Size of the content in bytes.
1602 Constructs a new AbstractLaunchableService with the given name.
1603 Transitions the service to a new state, returning the old state. @param proposed The desired new state. @return The previous state of the service.
1604 Instantiates a Service class using the provided configuration. @param conf Configuration object for service instantiation. @return Service instance, cast to type S.
1605 Checks if this BinaryComparable object is equal to another. @param other The object to compare to. @return True if equal, false otherwise.
1606 Copies data to the internal byte array. @param newData Source byte array. @param offset Starting offset in newData. @param length Number of bytes to copy.
1607 Retrieves key length from BytesWritable. @param key The BytesWritable object to process. @return The length of the key.
1608 Lists files in a directory. @param dir The directory to list. @throws IOException if access is denied or an I/O error occurs.
1609 Checks if a directory has read, write, and execute permissions. @param dir The directory to check. @throws DiskErrorException if any permission check fails.
1610 Locks a direct ByteBuffer in memory to prevent swapping. @param buffer The direct ByteBuffer to lock. @param len The number of bytes to lock.
1611 Creates a SharedFileDescriptorFactory, throws IOException on failure. @param prefix Prefix for file descriptor creation. @param paths Array of paths to try.
1612 Writes checksummed chunks of data. @param b byte array to write @param off start offset in the array @param len number of bytes to write @throws IOException if an I/O error occurs
1613 Calculates chunked sums for data, using native or fallback methods.
1614 Releases allocated buffers and cleans the buffer pool.
1615 Constructs a BoundedByteArrayOutputStream with specified capacity. @param capacity Initial size of the underlying byte array.
1616 Decodes a URL string and writes the decoded value. @param newValue The URL string to decode. @throws IOException if an I/O error occurs during decoding.
1617 Extracts erased blocks from a block group. @param blockGroup The block group to extract from. @return Array of erased ECBlocks.
1618 Skips to the next marker in the compressed stream. @param marker target marker value @param markerBitLength marker's bit length @return true if marker found, false otherwise.
1619 Creates a CBZip2OutputStream writing to the given OutputStream. @param out Output stream to write to. @param blockSize Block size in 100k units (1-9). @throws IOException If an I/O error occurs.
1620 Creates a BlockCompressorStream with default buffer size and compression level. @param out The output stream to write compressed data. @param compressor The compressor to use for compression.
1621 Creates a BlockDecompressorStream with given input, decompressor, and buffer size.
1622 Writes data to the compressor, handling size limits and flushing. @param b The byte array to write. @param off Offset into the array. @param len Number of bytes to write. @throws IOException if stream is finished or an error occurs.
1623 Constructs a ZStandardCompressor with specified level and buffer sizes.
1624 Creates a CompressionOutputStream using the provided codec and compressor. @param codec Compression codec to use @param conf Hadoop configuration @param out Output stream to compress @return CompressionOutputStream
1625 Closes the codec and output stream, releasing resources.
1626 Creates a CompressionInputStream using the provided codec and stream. @param codec Compression codec to use. @param conf Hadoop configuration. @param in Input stream to decompress. @return CompressionInputStream or null if creation fails.
1627 Releases resources: decompressors, deserializers, and input stream.
1628 Returns a ZlibCompressor, using native or built-in Zlib. @param conf Hadoop configuration object @return ZlibCompressor instance
1629 Returns a ZlibDirectDecompressor if native Zlib is loaded, else null. @param conf Hadoop configuration object.
1630 Gets a ZlibDecompressor, using native Zlib if available. @param conf Hadoop configuration object. @return ZlibDecompressor instance.
1631 Stores a delegation key by writing to SQL and cache. @param key The delegation key to store. @throws IOException If storage fails.
1632 Updates a delegation key by writing it to the database and cache. @param key The delegation key to update. @throws IOException if updating the key fails.
1633 Reads a string safely from DataInput, up to maxLength. @param in DataInput to read from @param maxLength Max string length @return Decoded string
1634 Skips a variable-length integer's worth of data from the input. @param in DataInput stream to skip data from.
1635 Reads data from input stream into buffer and resets codec. @param buffer DataInputBuffer to populate. @param filter CompressionInputStream to reset.
1636 Reads a string from the input stream. @param in DataInput to read from @param maxLength Max string length @return Decoded string
1637 Writes a string to the DataOutput. Writes -1 if string is null.
1638 Creates a Text object representing the token service address. @param addr InetSocketAddress of the token service @return Text object with host:port string
1639 Creates a Token object from a TokenProto. @param tokenProto TokenProto object to create Token from. @return Token object.
1640 Writes the enum's name as a string to the output stream. @param out DataOutput to write to @param enumVal Enum value to write
1641 Writes username, groupname, and permission to the output stream. @param out DataOutput to write to @param username Username string @param groupname Groupname string @param permission FsPermission object
1642 Constructs a Text object from a byte array. @param utf8 The byte array representing UTF-8 encoded text.
1643 Constructs a new Text object by copying from an existing Text.
1644 Reads a line of text. @param str Buffer to read into. @param maxLineLength Max line length. @param maxBytesToConsume Max bytes to consume.
1645 Returns the length of the text. Calculates if not already set.
1646 Constructs a new SortedMapWritable by copying from another. @param other The SortedMapWritable to copy from.
1647 Creates a new MapWritable by copying another MapWritable. @param other The MapWritable to copy from.
1648 Creates a RetryPolicy with max time and fixed sleep duration. @param maxTime Max time to retry, in specified time unit. @param sleepTime Sleep time between retries. @param timeUnit Time unit for maxTime and sleepTime. @return RetryPolicy instance.
1649 Creates a dynamic proxy instance for the given interface. @param iface Interface to proxy, proxyProvider & retryPolicy used. @return Proxy instance of the specified interface.
1650 Creates a proxy object for the given interface and implementation. @param iface Interface to proxy. @param implementation Implementation of the interface. @param methodNameToPolicyMap Retry policies for methods. @return Proxy object.
1651 Initializes a Writer with an output stream, compression name, and config.
1652 Constructs a TFileIndex with entries from the input stream. @param entryCount Number of entries to read. @param in Input stream for reading index data. @param comparator Comparator for byte array comparison.
1653 Checks for end-of-file. Returns true if EOF is reached.
1654 Flushes the internal buffer to the underlying output stream.
1655 Compares this key with another key using the reader. @param key The key to compare to. @return An integer indicating the comparison result.
1656 Initializes a UTF8 object with the given string. @param string The string to be encoded.
1657 Calculates the MD5 hash of a string. @param string The string to hash. @return MD5Hash object representing the hash.
1658 Synchronizes buffered records to the output stream. Writes buffered keys/values and resets internal buffers.
1659 Returns the tracking ID. Generates if null. @return The tracking ID string.
1660 Encodes the object to a URL-safe string. @return URL-encoded string representation.
1661 Adds a node to the topology. Throws IllegalArgumentException if invalid. @param node The node to add.
1662 Removes a node from the cluster map. Throws exception for inner nodes. @param node The node to remove.
1663 Decommissions a node, adding it to the decommissioning list. @param node The node to decommission.
1664 Sorts nodes by distance from a reader, then applies secondary sort. @param reader The reference node for distance calculation. @param nodes Array of nodes to sort. @param activeLen Length of the active portion of the nodes array. @param secondarySort Consumer to apply after distance sorting.
1665 Sorts nodes by distance from a reader, using a secondary sort. @param reader The starting node. @param nodes Array of nodes to sort. @param activeLen Length of the active portion of the array. @param secondarySort Consumer for secondary sorting.
1666 Creates a SocketInputStream with a timeout for reading. @param channel ReadableByteChannel to read from. @param timeout Timeout in milliseconds. @throws IOException if an I/O error occurs.
1667 Creates a SocketOutputStream with a specified timeout. @param channel WritableByteChannel to write to. @param timeout Timeout in milliseconds.
1668 Retrieves RPC response from a call, waiting up to timeout. @param call The RPC call object. @return Writable RPC response or null on timeout/error.
1669 Default constructor, uses RawScriptBasedMapping internally.
1670 Constructs a ScriptBasedMappingWithDependency, using a RawScriptBasedMapping.
1671 Creates a parent node with the given name and updated path/level.
1672 Adds a domain socket and handler for processing. Handles closed sockets.
1673 Removes a DomainSocket from the managed set, triggering processing. @param sock The DomainSocket to remove.
1674 Selects on a channel with specified operations and timeout. @param channel SelectableChannel to select on @param ops Operations to monitor @param timeout Timeout in milliseconds @return Number of keys selected, or 0 if timeout
1675 Gets the default IP address for a given network interface. @param strInterface Interface name, returns first IP.
1676 Gets hostnames for a given interface. @param strInterface Interface to resolve hosts for. @return Array of hostnames or empty array if none found.
1677 Gets the default host based on interface, nameserver, and fallback. @param strInterface Interface string, or null/default for default. @param nameserver Nameserver string, or null/default. @return Hostname string.
1678 Loads a MetricsConfig from the first found file. @param prefix config prefix @param fileNames file names to try @return MetricsConfig object or default if none found
1679 Loads group names for a user. @param user The user to fetch groups for. @return Set of group names. Throws if no groups are found.
1680 Shuts down the Singleton instance gracefully.
1681 Stops the server, interrupts handlers, and shuts down associated components.
1682 Stops the web application context, listeners, and server. Handles exceptions and aggregates them into a MultiException.
1683 Initializes a MutableQuantiles object with provided parameters. @param interval The interval in seconds for data rollover.
1684 Creates a new MutableStat with given parameters and adds it. @param name Stat name @return The created MutableStat object
1685 Constructs a MutableStat with a flag set to false. @param name Stat name. @param description Stat description. @param sampleName Sample name. @param valueName Value name.
1686 Sets the context for metrics. @param name Context name to set. @return MetricsRegistry with the context set.
1687 Tags a metric with a name, description, and value. @param name Metric name. @param description Metric description. @param value Metric value. @param override Whether to override existing tags. @return MetricsRegistry object.
1688 Adds elapsed time to a sample statistic for the given name. @param name Statistic name @param elapsed Elapsed time in milliseconds
1689 Publishes metrics from a buffer to registered sinks. @param buffer MetricsBuffer to publish. @param immediate If true, publishes immediately.
1690 Copies the statistics to another SampleStat object.
1691 Logs slow RPC calls if processing time exceeds defined thresholds. @param methodName RPC method name @param call RPC call object @param details Processing details including timing information
1692 Refreshes the netgroup cache by fetching and adding groups.
1693 Prints a newline followed by a line of dashes ("-----").
1694 Prints a formatted title to the console with surrounding newlines. @param format Format string for the title. @param args Arguments to format into the title.
1695 Logs an error and throws a KerberosDiagsFailure. @param category Error category. @param message Error message. @param args Arguments for message formatting.
1696 Creates a remote UserGroupInformation object for a user. @param user The username. @param authMethod Authentication method used. @return A UserGroupInformation object.
1697 Starts the token remover thread. Checks state, updates key, and initiates thread execution.
1698 Rolls the master key, extending its expiry date and updating delegations.
1699 Constructs a DelegationTokenAuthenticatedURL with null parameters.
1700 Constructs a DelegationTokenAuthenticatedURL with an authenticator. @param authenticator The DelegationTokenAuthenticator to use.
1701 Constructs a DelegationTokenAuthenticatedURL with a null base URL. @param connConfigurator Configures the connection.
1702 Reads data from the input stream into the provided byte array. @param b byte array to hold the read data @return number of bytes read
1703 Checks if authentication is performed using a keytab file. Returns true if Kerberos credentials, Hadoop login, and keytab exist.
1704 Checks if the request originates from a Kerberos ticket. Requires Kerberos credentials, Hadoop login, and no keytab.
1705 Initializes the default SSL socket factory. @param preferredMode Preferred SSL channel mode. @throws IOException if initialization fails.
1706 Default constructor. Calls the parameterized constructor with null.
1707 Constructs a HarFileSystem instance. Must initialize the underlying file system.
1708 Constructs a HarFileSystem with the given FileSystem. @param fs The FileSystem to associate with this HarFileSystem.
1709 Default constructor for FsShell, calls the parameterized constructor.
1710 Constructs a GetGroupsBase with a Configuration and default output. @param conf Configuration object for group retrieval.
1711 Default constructor. Initializes standard output and error streams.
1712 Resolves a host name to an InetAddress. Throws UnknownHostException if not found.
1713 Writes the ACL string to the DataOutput. @param out DataOutput to write the ACL string to.
1714 Creates and configures a ZooKeeper client. Uses truststore if provided, otherwise uses default config.
1715 Returns the size of the queue associated with the key. @param keyName The key for which to retrieve the queue size. @return The size of the queue, or 0 if the key is not found.
1716 Retrieves at most {@code num} elements from the queue for {@code keyName}. @param keyName Queue key @param num Maximum number of elements to retrieve @return List of retrieved elements
1717 Drains all tasks from the queue for a given key. @param keyName The key for which to drain the queue.
1718 Adds an element to the queue. Throws backoff if enabled. @param e element to add @throws InterruptedException if interrupted while waiting
1719 Initializes the class if it hasn't been initialized yet.
1720 Returns the current time in the specified time unit. @param timeUnit The TimeUnit to convert to. @return Current time in the given time unit.
1721 Gets the protocol signature based on client/server versions. @param clientMethodsHashCode Client methods hash code @param serverVersion Server version @param protocol Protocol class @return ProtocolSignature object
1722 Decays current costs, updates totals, and recomputes the schedule cache.
1723 Gets the priority level of a Schedulable object, ensuring >= 0. @param obj The Schedulable object to get the priority level from. @return The priority level (non-negative).
1724 Removes and returns the next element from the priority queues. Loops to handle potential race conditions and ensures an element is returned.
1725 Closes the connection, removing it and cleaning up resources.
1726 Constructs a Globber with the provided FileSystem, path pattern, filter, and symlink resolution flag.
1727 Constructs a MachineList with the given host entries and default InetAddressFactory. @param hostEntries Comma-separated string of host entries.
1728 Creates a SysInfo instance based on the operating system. @return SysInfo object for the detected OS; throws exception if OS is unknown.
1729 Gets the physical memory size in kilobytes. Reads meminfo and calculates available memory.
1730 Returns the available virtual memory size in KB. Sums physical memory and free swap space.
1731 Transforms XML using a stylesheet and writes output to a Writer. @param styleSheet Stylesheet input stream. @param xml XML input stream. @param out Writer for transformed output.
1732 Generates a formatted string summarizing storage usage. @param q,h,t,x Options to control output format. @param types List of storage types. @return Formatted string representing storage usage.
1733 Creates a snapshot string with formatted sizes based on hOption. @param hOption boolean flag for human-readable size format @return Snapshot string with formatted size information.
1734 Computes capacity using given percentage and map name. Delegates to overloaded method with max memory.
1735 Fills the internal buffer with data from the input stream.
1736 Reads and discards up to 'len' bytes from the input stream. @param len Number of bytes to read and discard. @return Number of bytes actually read.
1737 Returns a string representation of the character array. Uses a synchronized buffer to read and append characters.
1738 Reads characters from the buffer and returns them as a string. @throws IOException if an I/O error occurs during reading.
1739 Converts a byte array to a String using DataInputBuffer. @param bytes byte array to convert @return String representation of the byte array
1740 Reads a string from the DataInput. @param in DataInput to read from @return String read from the input
1741 Checks the response header for client ID matching. @param header The RpcResponseHeaderProto to validate. @throws IOException if client IDs do not match.
1742 Converts a single byte to its hexadecimal string representation.
1743 Handles uncaught exceptions, logs error, and exits application. @param thread The thread where exception occurred. @param exception The uncaught exception.
1744 Exits the program with a usage message. Calls exitWithMessage with predefined constants.
1745 Handles uncaught exceptions in a thread. Logs error and terminates if Error. @param thread The thread where exception occurred. @param exception The thrown exception.
1746 Terminates the application with a given exit code and message.
1747 Terminates the application with a given status code. @param status the exit status code @throws ExitException if termination fails
1748 Terminates the application with a given status and message. @param status Exit status code. @param msg Error message to display.
1749 Halts execution with a specified status and default message. @param status The exit status code. @throws HaltException if halting fails.
1750 Sorts a portion of the IndexedSortable using a custom comparator. @param s sortable object, p start index, r end index
1751 Constructs an AclStatus object. @param owner The owner of the file/directory. @param group The group of the file/directory.
1752 Parses a comma-separated ACL string into a List of ACL objects. @param aclString ACL string to parse. @return List of ACL objects. @throws BadAclFormatException if ACL format is invalid.
1753 Parses auth string into a list of ZKAuthInfo objects. @param authString Comma-separated auth string. @return List of ZKAuthInfo objects.
1754 Copies file attributes from src to target, respecting preservation flags.
1755 Creates a minimal AclEntry list based on the provided FsPermission.
1756 Tracks duration for a given key and count. @param key Identifier for the duration being tracked. @param count The duration count to record. @return A DurationTracker instance.
1757 Constructs a DurationTracker with a default interval. @param iostats IOStatisticsStore to track durations. @param key Identifier for the duration tracker.
1758 Creates a DurationInfo with logging enabled. @param log Logger instance for logging. @param format Format string for the duration message. @param args Arguments to format into the message.
1759 Waits for the completion of a CompletableFuture. Re-throws CancellationException as IOException.
1760 Waits for CompletableFuture completion, ignoring any exceptions. @param future The CompletableFuture to wait for.
1761 Creates a new CrcComposer with specified checksum type and hint. @param type Checksum type. @param bytesPerCrcHint Hint for CRC calculation. @return A new CrcComposer instance.
1762 Updates the composite CRC based on CRC value and bytes. @param crcB CRC value to compose. @param bytesPerCrc Number of bytes processed. @throws IOException if position exceeds stripe length.
1763 Formats finish time with time difference from start time. @param dateFormat DateFormat instance @param finishTime Finish time in milliseconds @param startTime Start time in milliseconds
1764 Escapes a string using a specified escape character and delimiter.
1765 Unescapes a string using default escape character and comma.
1766 Creates a startup/shutdown message with class name, hostname, and args.
1767 Retrieves the next element from the source, throwing exception if empty.
1768 Awaits the result of a Future. @param future The Future to await. @return The result of the Future.
1769 Awaits completion of all futures in the collection. @param collection Futures to await. @return List of results from completed futures.
1770 Awaits a future's completion within a specified timeout. @param future Future to await. @param timeout Timeout duration. @param unit Timeout unit (e.g., SECONDS, MILLS). @return Result of the future, or throws TimeoutException.
1771 Awaits completion of all futures in the collection. @param collection Futures to await. @param duration Timeout duration for each future. @return List of results from completed futures.
1772 Cancels futures and awaits completion, returning results. @param collection Futures to cancel and await. @param interruptIfRunning Whether to interrupt running threads. @param duration Timeout duration for awaiting futures. @return List of results from completed futures.
1773 Creates a new instance of the given class with provided arguments. @param theClass Class to instantiate @param conf Configuration object @param argTypes Argument types for the constructor @param values Values to pass to the constructor @return New instance of the class
1774 Returns the Class object for the key class, caching the result.
1775 Returns the class of the value. Lazily initializes if null. @return Class object representing the value's class.
1776 Loads a class by name. Returns SUCCESS, E_NOT_FOUND, or E_LOAD_FAILED.
1777 Creates an instance of the class with the given name. @param name Class name to instantiate. @return SUCCESS, E_NOT_FOUND, or E_CREATE_FAILED.
1778 Creates and returns a new Configuration object.
1779 Returns a Configuration object, using suppliedConf if available. Otherwise, creates a new Configuration.
1780 Constructs a FindClass instance with a default Configuration.
1781 Constructs a ReconfigurableBase object with a default configuration.
1782 Constructs a ReconfigurableBase with the given configuration. Uses a default config if none is provided.
1783 Returns the absolute, canonical path of the executable's bin directory. @param executable The executable file name. @return The absolute path to the bin directory.
1784 Executes a shell command using ProcessBuilder, handling timeouts & errors.
1785 Adds a phase with the given status. @param status The status of the new phase. @return The newly created Progress phase.
1786 Creates the root directory recursively. @param path The path of the directory to create.
1787 Checks if a path has a specific capability. @param fs filesystem, path, capability - details of the check @return True if the path has the capability, false otherwise.
1788 Checks if an object has a specific capability. @param object The object to check. @param capability Capability string to check for. @return True if the object has the capability, false otherwise.
1789 Retrieves counters from an iostatistics method, given a source. @param source The source object for the counters. @return A map of string counters.
1790 Invokes iostatisticsGaugesMethod with the given source. @param source The source object for the invocation. @return A map of string keys to long values.
1791 Retrieves minimum statistics from a source using reflection. @param source The source object to extract statistics from. @return A map of string keys to long values representing minimums.
1792 Retrieves maximum statistics from a source using reflection. @param source The source object to extract statistics from. @return A map of string keys to long values representing maximums.
1793 Invokes iostatisticsMeansMethod with the given source. @param source Serializable object to process. @return Map of statistics means.
1794 Invokes a static method with the given arguments. @param args Arguments to pass to the static method. @return The result of the static method invocation.
1795 Sets implementation class and argument classes. @param className Class name of the implementation. @param argClasses Argument class types. @return This builder instance.
1796 Calls hiddenImpl with provided class name and argument classes. @param className Class name to use. @param argClasses Argument classes to pass. @return This builder instance.
1797 Loads a static method from a class. @param source Class containing the method. @param returnType Method's return type. @param name Method name. @param parameterTypes Method parameter types. @return UnboundMethod object.
1798 Checks if the given object is a source of I/O statistics. Uses ioStatisticsAvailable() and reflection.
1799 Checks if the object has IO statistics available. Returns true if ioStatisticsAvailable() is true and invoke succeeds.
1800 Checks if the object is an IO statistics snapshot. @param object Serializable object to check. @return True if object is an IO statistics snapshot.
1801 Checks if IO statistics context is enabled. Returns true if IO statistics are available and enabled.
1802 Deletes files in bulk, returning the page size. @param fileSystem The file system to operate on. @param path The path to delete files from. @return Page size of the bulk delete operation.
1803 Deletes multiple paths in a file system. @param fs FileSystem, base Path, paths Paths to delete. @return List of deleted entries.
1804 Opens a file using the FileSystem, returning an FSDataInputStream. @param fs Filesystem object @param path Path to the file @param policy Policy for file opening @return FSDataInputStream or null on failure.
1805 Reads fully from an InputStream at a specified position to a ByteBuffer. @param in Input stream to read from. @param position Read position. @param buf Destination buffer.
1806 Checks if the I/O statistics snapshot creation method is available.
1807 Checks if the IO statistics context enablement method is available.
1808 Constructs a LightWeightCache with default Timer. @param recommendedLength Initial capacity suggestion. @param sizeLimit Maximum number of entries. @param creationExpiration Period for creation expiration. @param accessExpiration Period for access expiration.
1809 Constructs a Filter with specified vector size, hash count, and type.
1810 Removes a key from the hash. Throws exceptions for null/invalid keys.
1811 Adds a collection of keys as false positives. @param coll Collection of keys to add.
1812 Adds a list of keys as false positives. @param keys List of keys to add; throws NullPointerException if null.
1813 Adds multiple false positives. Throws NullPointerException if keys is null.
1814 Clears the bit vector entry at the given index, removing associated keys. @param index index of the bit to clear
1815 Finds the index of the smallest ratio value in the array. @param h array of hash indices @return index with the smallest ratio value
1816 Main driver method; executes provided arguments. Exits with error code if run() returns -1.
1817 Retrieves a CredentialEntry by name, handling deprecations. @param provider CredentialProvider to fetch from. @param name Credential entry name. Returns entry or null.
1818 Adds a single deprecation to be processed later. @param key Key of the deprecated element. @param newKeys New keys replacing the old. @param customMessage Custom deprecation message.
1819 Opens server listeners, binding them to ports or ranges.
1820 Parses the argument string. @param argStr The argument string to parse. @throws BadFencingConfigurationException if parsing fails.
1821 Recursively deletes the parent ZNode and its children from ZK. Requires wantToBeInElection to be false.
1822 Checks for an old active node and fences it if necessary. Returns Stat object or null if no old node exists.
1823 Reads a specified range from a stream into a ByteBuffer. @param stream Stream to read from @param range Range to read @param allocate Allocates ByteBuffer @return CompletableFuture<ByteBuffer> containing the data
1824 Requests caching for the given buffer data. @param data BufferData object to be cached.
1825 Sets the prefetch action future. @param actionFuture Future representing the prefetch action.
1826 Sets the buffer as read-only, calculates checksum, and updates state.
1827 Gets the size of a block. Returns blockSize if not last, otherwise calculates remaining size.
1828 Calculates the relative offset from a block's start. @param blockNumber Block identifier. @param offset Offset within the block. @return Relative offset as an integer.
1829 Initializes a BlockData object with file size and block size. @param fileSize Size of the file in bytes. @param blockSize Size of each block.
1830 Retrieves the block number at the buffer's offset. @return The block number as an integer.
1831 Closes all resources managed by this component. Throws IOException if any resource fails to close.
1832 Closes all resources associated with the given UserGroupInformation. @param ugi UserGroupInformation for which to close resources. @throws IOException if an I/O error occurs during closing.
1833 Writes a CharSequence to a file. @param fileContext file context @param path file path @param charseq data to write @return FileContext object
1834 Writes byte array to a file in the given FileSystem. @param fs FileSystem to write to @param path Path of the file to write @param bytes Data to write @return The FileSystem used.
1835 Writes lines to a file in the filesystem. @param fs filesystem, path to write to, lines, charset @return filesystem
1836 Writes a CharSequence to a file in the FileSystem. @param fs FileSystem to write to @param path Path to write to @param charseq Data to write @param cs Charset to use for encoding @return The FileSystem
1837 Constructs a BlockLocation with null topology. @param names Block names. @param hosts Hostnames. @param offset Offset. @param length Length. @param corrupt Corrupt flag.
1838 Creates a new counter with given name, description, and initial value. @param name Counter name @param desc Counter description @param iVal Initial counter value @return New MutableCounterInt object
1839 Creates a new MutableCounterLong with given name, description, and initial value. @param name Counter name @param desc Counter description @param iVal Initial counter value @return New MutableCounterLong instance
1840 Creates a new MutableGaugeLong with given name, description, and initial value. @param name Gauge name @param desc Gauge description @param iVal Initial gauge value @return A new MutableGaugeLong instance
1841 Creates a new MutableGaugeFloat with provided name, description, and initial value. @param name Gauge name @param desc Gauge description @param iVal Initial gauge value @return New MutableGaugeFloat instance
1842 Creates a new MutableGaugeInt with given name, description, and initial value. @param name Gauge name @param desc Gauge description @param iVal Initial integer value @return New MutableGaugeInt instance
1843 Creates a copy of this MeanStatistic object.
1844 Logs IO statistics at debug level if enabled. @param log Logger instance. @param message Debug message. @param source Source object for stats.
1845 Returns a string representation of the object, including IO stats.
1846 Converts IOStatistics object to a pretty string representation. @param statistics The IOStatistics object to convert. @return A string representation or empty string if null.
1847 Measures the duration of an invocation, tracking success/failure. @param factory DurationTrackerFactory @param statistic Statistic name @param input Invocation to measure @return Duration of the invocation
1848 Tracks duration of a Supplier, records success/failure, then closes tracker. @param input Supplier to execute and track. @return Result of the Supplier.
1849 Adds an entry to the linked list and evicts if size exceeds limit.
1850 Initializes the store with counters, gauges, mins, maxes, means. @param counters List of counter keys @param gauges List of gauge keys @param minimums List of minimum keys @param maximums List of maximum keys @param meanStatistics List of mean statistic keys
1851 Reads up to 'len' bytes from the stream into the provided byte array. @param b buffer to read into, off offset, len number of bytes @return number of bytes read, or -1 if end of stream
1852 Decrypts data at the given position into the provided buffer. @param position starting position for decryption @param buffer buffer to hold decrypted data @param offset offset within buffer @param length number of bytes to decrypt
1853 Decrypts data from a buffer, updating decryption state. @param filePosition File position for decryption context.
1854 Decrypts a portion of the input buffer into the output buffer.
1855 Seeks to the specified position in the stream. @param pos the position to seek to @throws IOException if an I/O error occurs
1856 Skips specified number of bytes from the stream. @param n number of bytes to skip, must be non-negative @return number of bytes actually skipped
1857 Constructs a GlobFilter with the given file pattern. @param filePattern The glob pattern for file filtering.
1858 Initializes a GlobFilter with a file pattern and PathFilter. @param filePattern Pattern to match files against. @param filter Filter to apply to matched paths.
1859 Extracts a tar archive to the specified directory. @param inputStream Input stream for the tar archive. @param untarDir Directory to extract the archive to. @param gzipped Whether the archive is gzipped.
1860 Retrieves all file system statistics. @return A map of URI to Statistics objects.
1861 Clears the file system statistics.
1862 Encodes input chunks to output chunks using internal encoding. @param inputs Input ECChunk array. @param outputs Output ECChunk array.
1863 Creates a BlockingThreadPoolExecutorService with specified parameters. @param activeTasks Active thread count. @param waitingTasks Waiting task queue capacity. @return BlockingThreadPoolExecutorService instance.
1864 Sets data, buffer, offsets and initializes read state. @param bufferData Data to be set. @param startOffset Start offset for data. @param readOffset Read offset.
1865 Returns the current IO statistics context.
1866 Resets the current IO statistics context.
1867 Returns a snapshot of the current IO statistics context. Returns a Serializable object representing the snapshot.
1868 Aggregates IO statistics from the provided source. @param source The source object containing IO statistics. @return True if aggregation was successful, false otherwise.
1869 Runs a task in parallel for each item from the iterator. @param task The task to run, may throw an exception.
1870 Sets the thread's IO statistics context. @param statisticsContext The context to set, may be null.
1871 Sets the thread's IO statistics context if one exists.
1872 Resets the thread's IO statistics context to null.
1873 Logs an error, potentially wrapping InterruptedIOExceptions. Logs the error message to the display, using localized message.
1874 Creates a PathHandle from a FileStatus, using default options if none provided. @param stat FileStatus object @param opt HandleOpt array, options for path creation @return PathHandle object
1875 Adds a token to the map, updating private clones if necessary. @param alias Text alias for the token @param t Token to add
1876 Encrypts data from input buffer to output buffer. @param inBuffer Input buffer containing data to encrypt. @param outBuffer Output buffer for encrypted data.
1877 Decrypts data from input buffer to output buffer. @param inBuffer Input buffer containing encrypted data. @param outBuffer Output buffer for decrypted data.
1878 Initializes resources, including regex pattern and interceptors. Throws IOException if regex compilation fails.
1879 Constructs a Path by resolving a child path relative to a parent. @param parent The parent Path. @param child The child Path to resolve.
1880 Creates a Path from a string representation. @param pathString The path string to represent. @throws IllegalArgumentException if the path string is invalid.
1881 Constructs a Path with the given scheme, authority, and path. Normalizes the path by adding prefixes as needed.
1882 Returns a string representation of the URI. Uses uriToString to format the URI.
1883 Extracts and validates the path from a Path object. @param p The Path object to extract the path from. @return The path string, after validation.
1884 Resolves a path, throwing exceptions on failure. @param p The path to resolve. @return The resolved Path object.
1885 Creates a new data output stream. @param f path of the file to create @param createFlag flags for create operation @param opts options for file creation @return FSDataOutputStream created output stream
1886 Applies umask to a file mode, returning the modified mode.
1887 Creates directory recursively. @param f the path of the directory to create @throws IOException if an I/O error occurs
1888 Sets the file permission. Uses default if permission is null.
1889 Creates a non-recursive output stream. @param f Path to create stream on. @param overwrite Whether to overwrite existing file. @param bufferSize Stream buffer size. @return FSDataOutputStream
1890 Creates an immutable FsPermission object from a short value. @param permission The permission value to use. @return An ImmutableFsPermission object.
1891 Appends a key-value pair to the buffer, serializing and writing. @param key The key to serialize. @param val The value to serialize.
1892 Returns the compressed size of the block. @return Compressed size as a long value.
1893 Skips specified bytes, ensuring not to exceed file length. @param n number of bytes to skip @return number of bytes actually skipped
1894 Returns the number of bytes used by the file or directory. @param path Path to the file or directory. @return Number of bytes used.
1895 Gets the number of bytes used by a given path. @param path The path to get the used space for. @return The number of bytes used.
1896 Starts the JvmPauseMonitor and continuously adds strings to a list.
1897 Starts the service. Transitions to STARTED state, starts service.
1898 Transitions to a new state, logging and recording lifecycle. @param newState The state to transition to. @return The previous state.
1899 Prints the default Kerberos realm, or warns if none is found.
1900 Compares to another object, returns true if BytesWritable.
1901 Compares this Text object with another. Returns true if same type.
1902 Sets the value of the object to the provided bytes. @param newData BytesWritable containing the new data.
1903 Decodes data from input ByteBuffers, handling erasure, to outputs.
1904 Decodes data from input byte arrays to output arrays. @param inputs Input byte arrays. @param erasedIndexes Indexes of erased data. @param outputs Output byte arrays.
1905 Skips to the next block marker in the CBZip2 stream. Returns true if successful, false otherwise.
1906 Creates a CBZip2OutputStream with default block size. @param out The OutputStream to write compressed data to.
1907 Creates a BlockDecompressorStream with an InputStream and Decompressor.
1908 Creates a compression output stream using the codec pool. @param out The underlying output stream. @return CompressionOutputStream instance. @throws IOException if an I/O error occurs.
1909 Creates a compression output stream using the codec pool. @param out The underlying output stream. @return CompressionOutputStream instance. @throws IOException if an I/O error occurs.
1910 Creates a compression output stream using the codec pool. @param out The underlying output stream. @return A CompressionOutputStream. @throws IOException if an I/O error occurs.
1911 Creates a compression output stream using the codec pool. @param out the underlying output stream @return CompressionOutputStream instance
1912 Closes the data and index resources, releasing associated resources.
1913 Flushes output and releases compressor resources.
1914 Creates a compression input stream using the codec pool. @param in Input stream to compress @return CompressionInputStream
1915 Creates a compression input stream using the codec pool. @param in The input stream to compress. @return A CompressionInputStream. @throws IOException if an I/O error occurs.
1916 Creates a compression input stream using a codec pool. @param in The input stream to compress. @return CompressionInputStream object.
1917 Creates a compression input stream using the codec pool. @param in The input stream to compress. @return A CompressionInputStream.
1918 Closes the index and data resources. Closes index if not already closed.
1919 Closes the input stream and sets it to null.
1920 Creates a DirectDecompressor using the provided configuration.
1921 Writes the file header to the output stream. Writes version, class names, compression flags, metadata, and sync bytes.
1922 Writes the data to the provided DataOutput, including tokens and secrets.
1923 Reads a block of data from the input stream. Handles lazy decompression and sync checks.
1924 Seeks to the current value, handling compressed/decompressed blocks.
1925 Reads a string from the DataInput. Uses Integer.MAX_VALUE as the length limit.
1926 Retrieves a delegation key by ID, caching if not found. @param keyId The ID of the delegation key to retrieve. @return The DelegationKey object or null if not found.
1927 Retrieves a delegation token from the specified service. @param url URL of the delegation token service. @param creds Credentials to use for token retrieval. @return Delegation token or null if not found.
1928 Retrieves a server token based on the provided authentication type. @param authType SASL authentication type @return Token object or null if no token is supported
1929 Sets the service on the provided token, or logs a warning. @param token The token to set the service on. @param addr The address of the service.
1930 Creates a Token from a TokenProto. @param tokenProto The TokenProto to convert. @return A Token object.
1931 Gets a fixed ByteString from cache or computes and caches it. @param key The key to look up or compute the ByteString for. @return The ByteString value.
1932 Creates a new Token by copying values from another Token.
1933 Reads a line from the input stream. @param str Input stream to read from. @param maxLineLength Maximum line length. @return Number of characters read.
1934 Reads a line from the input stream into the provided Text object.
1935 Constructs an InstrumentedLock with a ReentrantLock. @param name Lock name, logger, gap/threshold durations.
1936 Creates a proxy with retry for the given interface and implementation. @param iface Interface to proxy. @param implementation Implementation of the interface. @param retryPolicy Retry policy to use. @return Proxy object.
1937 Waits specified time, retries, then processes retry info. @return CallReturn.RETRY after wait and processing.
1938 Constructs a Writer with provided stream, size, compression, comparator, and config.
1939 Checks if this is the last chunk of data. @return True if last chunk, false otherwise.
1940 Returns the remaining bytes in the internal buffer.
1941 Compares this byte array with another byte array. @param buf Byte array to compare with. @param offset Offset within the byte array. @param length Length of the byte array segment.
1942 Closes the writer, syncing if necessary, then calls super.close().
1943 Appends a key-value pair to the buffer, validating types. @param key The key to append. @param val The value to append. @throws IOException if key or value types are incorrect.
1944 Appends key/value data to the buffer. @param keyData Key data as bytes. @param val Value data. @throws IOException If an I/O error occurs.
1945 Copies data from src Writable to dst Writable using reflection. @param dst Destination Writable object @param src Source Writable object
1946 Chooses a random node within a scope, excluding specified nodes. @param scope Node scope string. @param excludedNodes Nodes to exclude from selection.
1947 Sorts nodes by distance from the reader. Calls overloaded method.
1948 Sorts nodes by distance using network location, calls overloaded method.
1949 Creates a SocketInputStream with a timeout. @param socket The Socket to read from. @param timeout Timeout in milliseconds. @throws IOException If an I/O error occurs.
1950 Constructs a SocketInputStream using the given Socket. Uses the Socket's channel and timeout for initialization.
1951 Creates a SocketOutputStream with a specified timeout. @param socket The Socket instance. @param timeout Timeout in milliseconds.
1952 Adds a node to the network topology. Throws exception if inner node. @param node The node to add.
1953 Performs I/O operations on a ByteBuffer. Returns bytes read/written, or -1 if closed.
1954 Connects a SocketChannel to an endpoint with a specified timeout. @param channel SocketChannel to connect. @param endpoint Remote address to connect to. @param timeout Connection timeout in milliseconds.
1955 Waits for I/O operations on a channel. Throws IOException on timeout.
1956 Gets the default host for a given interface. @param strInterface Interface name, can be null. @throws UnknownHostException if host cannot be resolved.
1957 Gets the default host, using interface and nameserver if provided. @param strInterface Network interface, may be null. @param nameserver Nameserver, may be null. @return Default host string.
1958 Reattaches Ugi metrics. Delegates to UgiMetrics.reattach().
1959 Constructs a MutableInverseQuantiles object. @param intervalSecs Interval in seconds.
1960 Creates and registers a new MutableQuantiles object. @param name Quantiles name, used as key in metricsMap. @param interval Interval for quantiles calculation. @return The newly created MutableQuantiles object.
1961 Creates a new MutableStat with the provided details. @param name Stat name @param desc Description @param sampleName Sample name @param valueName Value name @return New MutableStat object
1962 Adds a tag with a boolean flag. @param name tag name @param description tag description @param value tag value @return this
1963 Adds a metric with a given name and value. @param name Metric name. @param value Metric value.
1964 Adds queue time for a given priority level. @param priority Level of the queue (index). @param queueTime Time spent in the queue (in ms).
1965 Adds processing time for a given priority level. @param priority Processing priority level. @param processingTime Processing time in milliseconds.
1966 Adds overall processing time for a given RPC call. @param rpcCallName Name of the RPC call. @param overallProcessingTime Processing time in milliseconds.
1967 Locates and validates the Kerberos configuration file. Uses sysprops/env vars to find the file path.
1968 Checks a condition; fails/errors if false, otherwise returns true. @param condition boolean to verify; @param category error category
1969 Fails if the condition is true, logs an error with category & message.
1970 Creates a UserGroupInformation for a remote user. @param user The username of the remote user.
1971 Verifies a token against a stored password. @param identifier Token identifier. @param password Password to verify. @throws InvalidToken if password doesn't match.
1972 Spawns a thread to renew Keytab credentials if needed. Checks if relogin is needed or from ticket, returns if so.
1973 Constructs a Count object. @param cmd Command line arguments. @param pos Starting position in the arguments. @param conf Configuration object.
1974 Connects to ZooKeeper, adds auth info, and waits for connection. @return ZooKeeper instance @throws IOException, KeeperException on connection failure
1975 Retrieves the next element associated with the given key. @param keyName The key to retrieve the next element for. @return The next element or null if none exists.
1976 Resolves a hostname to an InetAddress. Logs slow lookups. @param hostname The hostname to resolve. @return An InetAddress object. @throws UnknownHostException if resolution fails.
1977 Gets a ProtocolSignature based on protocol details. @param server Protocol implementation, protocol name, client version, hash. @return ProtocolSignature object.
1978 Checks if a method is supported by the server. @param methodName Method name to check. @param parameterTypes Method parameter types. @return True if method is supported, false otherwise.
1979 Validates RPC request headers, throwing exceptions on failure.
1980 Retrieves a message from the buffer, casting to type T. @param message The message to decode. @param buffer The buffer containing the message data. @return The decoded message of type T.
1981 Retrieves and removes the head of the queue, if available. Returns null if no element is available.
1982 Handles version mismatch response based on client version. Sends appropriate error response to the client.
1983 Returns the virtual memory size, sum of physical memory and swap.
1984 Creates a HarFSDataInputStream, wrapping a HarFSInputStream. @param fs Filesystem, path, start, length, bufsize for stream.
1985 Evicts expired entries from the queue up to EVICTION_LIMIT.
1986 Evicts entries until the cache size is within the limit.
1987 Overloads toString, passing default value for the 'i' parameter.
1988 Generates a string representation with specified options. @param qOption, hOption, tOption, types - Options for string format.
1989 Returns quota usage string. Uses getTypesQuotaUsage if tOption is true. @param hOption boolean option @param tOption boolean option @param types List of storage types @return Quota usage string
1990 Waits for all CompletableFutures in the list to complete. @param futures List of CompletableFutures to wait for.
1991 Awaits completion of a CompletableFuture, if it exists. @param future CompletableFuture to await, or null.
1992 Updates CRC value using data from buffer. @param crcBuffer Byte array containing CRC data. @param offset Start offset in the buffer. @param length Number of bytes to process. @param bytesPerCrc Bytes per CRC update.
1993 Updates the CRC32 state with checksums from the input stream. @param checksumIn Input stream of checksums. @param numChecksumsToRead Number of checksums to read. @param bytesPerCrc Bytes per CRC value.
1994 Creates a new instance of the specified class using the config. @param theClass Class to instantiate. @param conf Configuration object. @return New instance of the class.
1995 Returns the key class of the underlying data structure.
1996 Returns the value class of the underlying data.
1997 Executes a command based on provided arguments. @param args Command-line arguments: action and name. @return Result code indicating success or failure.
1998 Constructs a FutureDataInputStreamBuilderImpl. @param fc FileContext; @param path Path to build from; throws IOException.
1999 Creates a new DataChecksum from byte array at given offset. @param bytes Byte array containing checksum data. @param offset Starting offset in the byte array. @return New DataChecksum object. @throws IOException if checksum size is invalid.
2000 Creates a new DataChecksum object based on input stream data. @param in Input stream containing checksum type and size. @return DataChecksum object or throws InvalidChecksumSizeException.
2001 Executes the command if enough time has passed. Resets exitCode and sets launch mechanism on macOS.
2002 Aggregates statistics for a snapshot using reflection. @param snapshot The snapshot object. @param statistics Statistics to aggregate. @throws UnsupportedOperationException if aggregation fails.
2003 Creates an I/O statistics snapshot. @throws UnsupportedOperationException if I/O statistics are unavailable
2004 Creates an I/O statistics snapshot from a source object. @param source Object used to create the snapshot. @return IostatisticsSnapshot object.
2005 Converts an IO statistics snapshot to a JSON string. @param snapshot The IO statistics snapshot. @return JSON string representation of the snapshot.
2006 Parses a JSON string into an IostatisticsSnapshot object. @param json JSON string to parse. @return IostatisticsSnapshot object.
2007 Loads an I/O statistics snapshot from the given file system path. @param fs FileSystem to load from. @param path Path to the snapshot file. @return IostatisticsSnapshot object.
2008 Retrieves an I/O statistics snapshot using reflection. @param source Source object for snapshot retrieval. @return IostatisticsSnapshot object.
2009 Saves an IO statistics snapshot to the specified path. @param snapshot Snapshot data, FS, path, overwrite flag.
2010 Converts statistics object to a human-readable string. @param statistics The statistics object to convert.
2011 Gets the current IO statistics context. @throws UnsupportedOperationException if unavailable
2012 Sets the thread IO statistics context. @param statisticsContext The context object to set. @throws UnsupportedOperationException if not supported.
2013 Resets the IO statistics context. Throws UnsupportedOperationException if unavailable.
2014 Retrieves an I/O statistics context snapshot. @throws UnsupportedOperationException if unavailable.
2015 Aggregates statistics context using reflection. @param source The object to aggregate statistics from. @return True if aggregation was successful, false otherwise.
2016 Compares two version strings. @param version1 First version string. @param version2 Second version string. @return -1, 0, or 1 based on version comparison.
2017 Initializes a CountingBloomFilter with specified size, hashes, and type. @param vectorSize Size of the filter. @param nbHash Number of hash functions. @param hashType Type of hash function to use.
2018 Initializes a Bloom filter with specified size, hash count, and type.
2019 Checks if key probably exists in the Bloom filter. @param key The key to check. @return True if probably exists, false otherwise.
2020 Selectively clears a bit based on the provided scheme. @param k The key used for membership testing. @param scheme The clearing scheme to use.
2021 Adds a deprecation entry. @param key Original key. @param newKey Replacement key. @param customMessage Custom deprecation message.
2022 Adds a deprecation, forwarding to the other addDeprecation method.
2023 Adds a deprecation entry, specifying a replacement key. @param key The key to deprecate. @param newKey The replacement key.
2024 Starts the HTTP server, registers metrics, and initializes context. Throws IOException if startup fails.
2025 Writes or updates a znode to indicate the local node is active. @param oldBreadcrumbStat Previous breadcrumb stat, used for update. @throws KeeperException, InterruptedException on ZooKeeper errors.
2026 Deletes the breadcrumb node for the active node, with retries.
2027 Reads data from a stream into file ranges using provided allocator. @param stream Stream to read from @param ranges Ranges to populate @param allocate Allocates ByteBuffer for each range
2028 Cancels prefetching operations and caches prefetched buffers.
2029 Retrieves a buffer data object for the given block number. @param blockNumber Block number to retrieve. @return BufferData object containing block data.
2030 Initializes a FilePosition with file size and block size. @param fileSize Size of the file in bytes. @param blockSize Size of each block.
2031 Checks if the current block is the last block. Uses blockData and blockNumber to determine this.
2032 Closes all resources managed by the cache, logging the action.
2033 Writes a CharSequence to a Path in a FileSystem. @param fs FileSystem to write to @param path Path to write to @param charseq CharSequence to write @return The updated FileSystem. @throws IOException if an I/O error occurs
2034 Constructs a BlockLocation with null block details. @param names Block names, hosts, offset, length, corrupt flag.
2035 Constructs a BlockLocation with default flag. @param names Block names, hosts, topology paths, offset, length.
2036 Combines two MeanStatistic objects. @param l Left MeanStatistic to aggregate. @param r Right MeanStatistic to aggregate. @return Combined MeanStatistic.
2037 Creates a snapshot of IO statistics. @param source The source IOStatistics object to snapshot.
2038 Logs IO statistics at debug level, using provided message and source.
2039 Logs IO statistics at the specified level. @param log Logger instance. @param level Logging level (INFO, ERROR, WARN). @param source Source object for statistics.
2040 Closes a RemoteIterator, logging statistics if it's Closeable.
2041 Tracks invocation duration using a provided factory. @param factory DurationTrackerFactory instance @param statistic Statistic name @param input InvocationRaisingIOE to track
2042 Reads data from the input stream at a specific position. @param position byte offset in the stream @param buffer buffer to store read data @param offset offset within the buffer @param length number of bytes to read @return number of bytes read
2043 Reads bytes from the input stream at a specific position. @param position Start position @param buffer Byte array to fill @param offset Offset in buffer @param length Number of bytes to read @throws IOException If an I/O error occurs
2044 Reads data from the input stream into the provided buffer. @param position byte offset in the input stream @param buf buffer to read into @return number of bytes read
2045 Reads data from the stream into the provided ByteBuffer. @param position Starting position for reading. @param buf ByteBuffer to read into.
2046 Reads data from the stream into the provided ByteBuffer. @param buf ByteBuffer to read data into. @return Number of bytes read, or -1 if EOF.
2047 Writes an object to a DataOutput stream, handling various types. @param out Output stream, instance object to write, class type, config, compact arrays flag @throws IOException if writing fails
2048 Attempts to acquire a buffer data block. @param blockNumber The block number to acquire. @return BufferData object or null if acquisition fails.
2049 Returns the number of available objects in the buffer pool.
2050 Executes a task, either single-threaded or in parallel. @param task The task to execute. @return True if successful, throws E or IOException on failure.
2051 Processes a list of path data items, handling potential IO errors. @param parent parent PathData @param items PathData items to process @throws IOException if an I/O error occurs during processing
2052 Returns a Function to resolve FileStatus to a PathHandle. @param fs FileSystem to use for resolution @param opt Handle options to apply
2053 Creates a ShellCommandExecutor for retrieving user groups. @param userName The username for which to fetch groups.
2054 Creates a ShellCommandExecutor for fetching group IDs for a user. @param userName The username to fetch group IDs for.
2055 Reads credentials from a delimited protobuf stream. @param in DataInput stream containing credentials proto.
2056 Collects delegation tokens from issuer and its children. @param issuer Token issuer @param renewer Token renewer @param credentials Credentials to add tokens to @param tokens List to add tokens to
2057 Adds a token associated with an alias. @param alias Token alias @param token Token to add @return True upon successful addition
2058 Resolves a path to be absolute, using workDir if needed. @param workDir Base directory for relative paths. @param path Path to resolve. @return Absolute Path object.
2059 Resolves a path to be absolute, using workDir if needed. @param workDir Base directory for relative paths. @param path The path to resolve. @return Absolute path.
2060 Converts a Path object to a File object. @param path The Path to convert. @return A File object representing the path.
2061 Resolves a path, returning it if absolute, otherwise relative to working dir.
2062 Makes a path absolute, using default URI if necessary. @param defaultUri Default URI to use if path is relative. @param workingDir Working directory to resolve relative paths. @return Qualified Path object.
2063 Returns the working directory as a Path object. Uses the URI to create the Path.
2064 Returns the home directory as a Path object. Uses the URI's string representation for the path.
2065 Gets the current working directory from the SFTP channel. @param channel SFTP channel to get the directory from @return Path object representing the directory, or null on error.
2066 Retrieves FileStatus for a given path. @param fs FileSystem object @param pathString path to check @param ignoreFNF ignore FileNotFoundException if true @return FileStatus object or null if not found
2067 Returns a new Path object based on the internal path.
2068 Returns a copy of the target path, or null if it's null.
2069 Gets the used space of the root directory. @return Used space in bytes. @throws IOException if an I/O error occurs.
2070 Creates a ChRootedFileSystem with the given filesystem and URI. @param fs the filesystem @param uri the URI representing the chroot location @throws IOException if an I/O error occurs
2071 Returns the remaining path from the given path array. @param path Array of path segments. @param startIndex Starting index for the remaining path. @return Path object representing the remaining path.
2072 Constructs a Path representing the target link(s), comma-separated if merged. @return Path object representing the target link(s)
2073 Creates a Path object from parent and child Path objects.
2074 Creates a child path under the given parent path. @param parent The parent path. @param child The name of the child path.
2075 Constructs a Path with a parent Path and a child string.
2076 Renames a file or directory within the given file system. @param fs The file system to operate on. @param oldName The old name of the file/directory. @param newName The new name for the file/directory.
2077 Converts a File object to a Path object. @param f The File object to convert. @return A Path object representing the file.
2078 Extracts a Path from a nested URI, handling authority components.
2079 Converts a string array to a Path array. @param str String array to convert. @return Path array or null if input is null.
2080 Returns a Path with the scheme and authority removed. Handles absolute URI paths correctly.
2081 Merges two paths, handling Windows drive letters correctly. @param path1 The first path. @param path2 The second path to merge. @return A new Path object representing the merged path.
2082 Checks if the path exists and satisfies the given type requirement. @param typeRequirement FileTypeRequirement to check against.
2083 Constructs a string representation of a child path. @param childPath The Path object representing the child path. @return String representation of the child path.
2084 Throws a PathNotFoundException when the path does not exist. @param item The PathData object representing the missing path. @throws IOException if the path is not found.
2085 Retrieves the AbstractFileSystem for the given path. @param absOrFqPath Path to check; must be absolute/FQ. @return AbstractFileSystem associated with the path.
2086 Creates directories recursively and sets their permission. @param fs FileSystem object @param dir Path to create @param permission FsPermission to set @return True if directories were created, false otherwise.
2087 Constructs a LocatedFileStatus with file details and block locations. @param locations Array of BlockLocation objects
2088 Appends a key-value pair to the output stream. @param key The key to append. @param val The value associated with the key.
2089 Writes raw key-value pairs from iterator to writer. @param records Iterator of raw key-value pairs. @param writer Writer to append data to.
2090 Initializes the service. Throws exception if configuration is null.
2091 Stops the service. Handles state transitions and exceptions.
2092 Checks if this service is a private clone of another. @param thePublicService The service to compare to. @return True if it's a clone, false otherwise.
2093 Checks if a token's service matches a given alias. @param token The token to check. @param alias The alias to compare against. @return True if alias is null or service matches.
2094 Checks if a service matches based on fetcher and URL. @param fetcher Fetches service name. @param service Service text to compare. @param url URL string to check. @return True if service matches, false otherwise.
2095 Checks the directory for errors. @param dir The directory to check. @throws DiskErrorException if an error is found.
2096 Checks a directory and performs disk I/O operations on it. @param dir The directory to check. @throws DiskErrorException if an error occurs during disk I/O.
2097 Flushes the internal buffer to the underlying stream.
2098 Validates decoding process using provided inputs and outputs. @param inputs Input buffers for decoding. @param erasedIndexes Indexes of erased inputs. @param outputs Output buffers for validation.
2099 Decodes data chunks, handling erased indexes. @param inputs Input ECChunk array. @param erasedIndexes Indexes of erased chunks. @param outputs Output ECChunk array.
2100 Closes the block writer, finalizing and registering block data.
2101 Closes resources and deletes the segment if preserveInput is false.
2102 Closes the resource, finishing the request block state. Sets the 'closed' flag to prevent further operations.
2103 Reads fields from input, populating tokenMap and secretKeysMap.
2104 Reads the next raw key into the provided buffer. @param key DataOutputBuffer to write the key to. @return Key length or -1 if no more keys are available.
2105 Reads the current value into the provided Writable object. @param val The Writable object to populate with the value. @throws IOException if an I/O error occurs.
2106 Retrieves the current value, applying config and deserializing. @param val The value to process. @return The processed value.
2107 Reads next raw key-value pair. Returns length or -1 if EOF. @param key DataOutputBuffer for the key. @param val ValueBytes for the value. @return Length of the record, or -1 if end of file.
2108 Reads the next raw value length. @param val ValueBytes object to reset. @return Length of the raw value. @throws IOException if an I/O error occurs.
2109 Retrieves DelegationTokenInformation from SQL secret manager. @param ident TokenIdent containing sequence number and bytes. @throws RuntimeException if token retrieval fails.
2110 Reads a PermissionStatus object from the input stream. @param in DataInput stream to read from @return Populated PermissionStatus object
2111 Reads an enum value from input. @param in DataInput to read from. @param enumType Enum type to read. @return Enum value or null if invalid.
2112 Reads ACL data from input stream and builds the ACL. @param in DataInput stream to read from. @throws IOException if an I/O error occurs.
2113 Gets a fixed-length byte string from the key. @param key The key to look up. @return The corresponding byte string.
2114 Converts a Token object to a TokenProto. @param tok Token object to convert @return TokenProto representation of the Token
2115 Constructs a DelegationTokenIdentifier with kind, owner, renewer, realUser.
2116 Executes the method once, handling retries and failures. Returns CallReturn object with result or exception.
2117 Reads and validates the key from the input stream. Reads key length, key buffer, and prepares for value read.
2118 Reads data from input stream into BytesWritable. @param value BytesWritable to populate with data. @return Length of data read.
2119 Writes the value stream to the output stream. @param out the output stream to write to @return the number of bytes written
2120 Compares this byte array with another byte array lexicographically.
2121 Checks if this entry equals another Entry based on key comparison.
2122 Retrieves a delegation token from a URL. @param url URL to fetch token from. @param token Authentication token. @return Delegation token. @throws IOException, AuthenticationException
2123 Renews a delegation token. @param url URL for renewal, token, dToken, doAsUser. @return New token expiry timestamp.
2124 Cancels a delegation token. @param url URL of the delegation token endpoint. @param token Authentication token. @param dToken Delegation token. @param doAsUser User to execute as.
2125 Chooses a random node within the specified scope. @param scope The scope to search for a random node.
2126 Sorts nodes by distance, handling cases where the reader is invalid. @param reader The reader node. @param nodes The array of nodes. @param activeLen Active length.
2127 Gets an input stream wrapper for the socket with a timeout. @param socket The socket to wrap. @param timeout Timeout in milliseconds. @return SocketInputWrapper object. @throws IOException if an I/O error occurs.
2128 Gets the output stream for the socket, using a timeout if available. @param socket The socket to get the output stream from. @param timeout Timeout in milliseconds. @return Output stream for the socket.
2129 Connects a socket to a remote endpoint with a specified timeout. @param socket The socket to connect. @param endpoint Remote address to connect to. @param localAddr Local address to bind to (optional). @param timeout Connection timeout in milliseconds.
2130 Registers an MBean with the platform MBean server. @param serviceName Service name, name MBean name, properties, MBean. @return ObjectName of registered MBean, or null on failure.
2131 Creates and registers a new inverse quantiles metric. @param name Metric name @param interval Interval for quantiles @return New MutableInverseQuantiles object
2132 Constructs a RetryCache with specified name, percentage, and expiration.
2133 Initializes metric tracking for a protocol class. @param protocol Class containing methods to track.
2134 Initializes metrics by adding them if they don't already exist. @param names Array of metric names to initialize.
2135 Aggregates local stats to global metrics. @param localStats Map of local stats to aggregate.
2136 Creates a new rate with extended flag defaulted to true. @param name Rate name. @param desc Rate description. @param extended Extended rate flag. @return New MutableRate object.
2137 Initializes rate metrics for methods in the given protocol class. @param protocol Class containing methods to register for metrics.
2138 Processes methods annotated with @Metric to create metrics. @param source The object the method belongs to. @param method The method to process.
2139 Validates Kerberos authentication for the given user. @param messagePrefix Prefix for verification messages. @param user UserGroupInformation to validate.
2140 Verifies a file exists, is a file, is not empty, and is readable. @param file The file to verify. @param category Category for verification context. @param text Verification message prefix.
2141 Validates the short name of the Kerberos principal. Throws exception if validation fails.
2142 Retrieves UserGroupInformation, potentially using a proxy user. Returns null if owner is null or empty.
2143 Default constructor. Sets the recursive flag to true.
2144 Default constructor for the Count class.
2145 Forces a relogin using a keytab file. Delegates to reloginFromKeytab with specific flags.
2146 Forces a relogin from the ticket cache. Delegates to reloginFromTicketCache(true).
2147 Relogins the user from the ticket cache. Overloads reloginFromTicketCache(boolean) with default false.
2148 Creates an InetSocketAddress for the given host and port. Uses static resolution if available, otherwise uses the host.
2149 Gets the InetAddress for the given host, returning null if not local. @param host hostname to resolve @return InetAddress object or null if not found/local
2150 Sends an RPC request to the queue, serializing and preparing it. @param call The RPC call to send. @throws InterruptedException, IOException if an error occurs.
2151 Processes an RPC request, including tracing and queueing. @param header RPC request header @param buffer Buffer containing the RPC request data
2152 Sets up the RPC response header and data based on status. @param call RPC call context @param status RPC status
2153 Reloads the IP list and updates the cache expiry time.
2154 Prints system information to the console using SysInfoLinux plugin.
2155 Calls the overloaded toString method with default values. @param qOption boolean option @param hOption boolean option
2156 Reads up to {@code len} bytes from this input stream into the provided byte array.
2157 Creates an instance of the given Expression class. @param expressionClass Expression class to instantiate. @param conf Configuration object for the new instance. @return New Expression instance or null if class is null.
2158 Retrieves a Command instance by name, creating it if needed. @param cmdName Command name. @param conf Configuration object for the command. @return Command instance.
2159 Creates a new key object using the configured key class.
2160 Creates a new instance of a Writable class. @param c Writable class to instantiate @param conf Configuration object, may be used by the instance @return New Writable instance
2161 Creates a SocketFactory instance from a class name. @param conf Configuration object. @param propValue Class name of the SocketFactory. @return SocketFactory instance.
2162 Decodes an identifier into a TokenIdentifier object. @return TokenIdentifier object or null if decoding fails.
2163 Retrieves a DiskValidator instance, using singleton pattern. @param clazz DiskValidator class to instantiate. @return DiskValidator instance.
2164 Initializes a DynamicBloomFilter with specified parameters. @param vectorSize Vector size, nbHash hash functions, hashType hash function type, nr initial rows
2165 Adds a new row to the Bloom filter matrix.
2166 Constructs a RetouchedBloomFilter with specified size, hashes, and hash type.
2167 Loads properties from a Properties object. @param props Properties to load, startIdx, fullReload flag.
2168 Quits the election process. @param needFence Whether a fence is needed. @return void
2169 Reads data using vectored reads based on provided ranges. @param ranges List of file ranges to read. @param allocate Allocates ByteBuffer for reading.
2170 Constructs a BlockLocation with default replication factor. @param names block names, hosts, offset, and length
2171 Creates a DurationStatisticSummary. @param key Summary key. @param success Success status. @param count Number of samples. @param max Maximum duration. @param min Minimum duration. @param mean Statistic mean (cloned if not null).
2172 Aggregates statistics from a source, merging counters, gauges, etc. @param source The source containing statistics to aggregate. @return True if aggregation was successful.
2173 Initializes the snapshot. Copies data from source or creates maps.
2174 Iterates through a remote iterator and applies a consumer. @param source Iterator to iterate. @param consumer Consumer to apply to each element. @return Number of elements processed.
2175 Writes an object to an output stream. @param out Output stream to write to. @param instance Object to serialize. @param declaredClass Class of the object. @param conf Hadoop configuration.
2176 Requests a prefetch for the specified block number. @param blockNumber The block number to prefetch.
2177 Acquires buffer data for a given block number, retrying with delays. @param blockNumber The block number to acquire. @return BufferData object or throws IllegalStateException on failure.
2178 Processes a PathData item, starting path processing recursively. @param item The PathData to process. @throws IOException if an I/O error occurs.
2179 Processes path data, either individually or in groups. @param parent Parent PathData @param itemsIterator Iterator for PathData items @throws IOException if an I/O error occurs
2180 Resolves partial group names for a user. @param userName User's name. @return Set of resolvable group names. @throws PartialGroupNameException if resolution fails.
2181 Executes a command and returns its output as a string. @param cmd Command to execute, as an array of strings. @throws IOException If an I/O error occurs during execution.
2182 Executes a command with given environment variables. @param env Environment variables for the command. @param cmd Command to execute. @return Command output as a String.
2183 Adds all credentials from the provided Credentials object. Delegates to the overloaded method with 'replace' set to true.
2184 Merges credentials from another Credentials object. Uses addAll with 'ignoreConflicts' set to false.
2185 Adds delegation tokens for a renewer using provided credentials. @param renewer renewer's identifier @param credentials credentials to use @return Array of delegation tokens.
2186 Adds a token. Returns true if successful, false otherwise.
2187 Sets the working directory to the provided absolute path. @param newDir The new working directory path.
2188 Sets modification and access times of a file. @param p Path to the file. mtime, atime are millis. @throws IOException if an I/O error occurs.
2189 Converts a Path object to a File object. @param path The Path to convert. @return A File representing the given Path.
2190 Returns the URI path of a given Path object. @param p The Path object to get the URI path from.
2191 Makes a qualified Path, using the provided FileSystem. @param fs The FileSystem to use for qualification. @return A qualified Path object.
2192 Makes a path qualified with the default FS URI and working dir. @param path The path to qualify. @return The qualified Path object.
2193 Makes a path qualified with the current URI. @param path The path to qualify. @return Qualified path object.
2194 Lists the status of a file or directory. @param f Path to the file or directory. @return Array of FileStatus objects.
2195 Deletes a file or directory. @param f Path to delete. @param recursive If true, deletes directories recursively. @return True if successful, false otherwise.
2196 Opens a data input stream for the given path. @param f Path to open; resolves relative paths. @throws Exceptions related to file access/existence.
2197 Opens a data input stream for the given path with specified buffer size. @param f Path to open @param bufferSize Size of the buffer @return FSDataInputStream object
2198 Truncates the file at the given path to the specified length. @param f Path to the file. @param newLength New length of the file. @return True if successful, false otherwise.
2199 Sets the replication factor for a file. @param f Path to the file. @param replication New replication factor. @return True if successful.
2200 Sets the permission of a file or directory. @param f The path to the file/directory. @param permission The desired file system permission.
2201 Sets the owner (username, groupname) of a file. @param f The Path of the file. @param username Username of the new owner. @param groupname Groupname of the new owner.
2202 Sets modification and access times of a file. @param f Path to the file. mtime, atime are timestamps. @throws IOException on I/O error.
2203 Retrieves the checksum for a file. @param f Path to the file. @return FileChecksum object. @throws IOException on I/O error.
2204 Gets the file status for the given path. @param f Path to the file; resolves relative paths. @throws IOException on failure.
2205 Checks file system access for a given path and mode. @param path The path to check. @param mode The access mode to check.
2206 Retrieves the FileStatus for a given path, resolving symlinks. @param f Path to retrieve FileStatus for. @return FileStatus object.
2207 Resolves a symbolic link target. @param f Path to the symbolic link @return Path to the link target
2208 Retrieves block locations for a file within a specified range. @param f file path @param start start offset @param len length of data @return BlockLocation array
2209 Gets the filesystem status for a given path. @param f Path to get status for; uses default if null. @return FsStatus object.
2210 Creates a symbolic link from {@code link} to {@code target}. @param target The target Path. @param link The link Path. @param createParent Whether to create parent directories.
2211 Lists status of files/directories under the given path. @param f path to list; resolves relative paths. @return RemoteIterator of FileStatus objects.
2212 Lists corrupt file blocks under the given path. @param path Path to search for corrupt file blocks. @return RemoteIterator of Path objects.
2213 Lists located status for a path. @param f Path to list; resolves relative paths. @return RemoteIterator of LocatedFileStatus objects.
2214 Resolves AbstractFileSystems associated with a given path. @param f Path to resolve; returns Set of AbstractFileSystems. @throws IOException if an I/O error occurs.
2215 Modifies ACL entries for a given path using the provided list. @param path Path to modify ACL entries for. @param aclSpec List of ACL entries to apply.
2216 Removes ACL entries from a path. @param path Path to modify. @param aclSpec List of ACL entries to remove. @throws IOException If an I/O error occurs.
2217 Removes the default ACL for the given path. @param path The path for which to remove the default ACL. @throws IOException if an I/O error occurs.
2218 Removes the ACL for the given path. @param path The path for which to remove the ACL. @throws IOException if an I/O error occurs.
2219 Sets the ACL for the given path using the provided ACL entries. @param path Path to set ACL on. @param aclSpec List of ACL entries to apply. @throws IOException if an I/O error occurs.
2220 Retrieves the ACL status for the given path. @param path Path to retrieve ACL status for. @throws IOException if an I/O error occurs.
2221 Sets an extended attribute on a path. @param path Path to set the attribute on. @param name Attribute name. @param value Attribute value. @param flag Attribute flags.
2222 Retrieves extended attribute (xattr) by name for a path. @param path Path to the file. @param name Name of the xattr to retrieve. @return Byte array representing the xattr value.
2223 Retrieves extended attributes for a given path. @param path The path to retrieve extended attributes from. @return A map of attribute names to byte array values.
2224 Retrieves extended attributes for a path. @param path Path to retrieve attributes from. @param names List of attribute names to fetch. @return Map of attribute names to byte array values.
2225 Removes an extended attribute from a path. @param path Path to remove the attribute from. @param name Name of the attribute to remove.
2226 Lists extended attributes for a given path. @param path Path to list extended attributes for. @throws IOException if an I/O error occurs.
2227 Creates a snapshot of the given path with the specified name. @param path The path to snapshot. @param snapshotName Name of the snapshot. @return The path to the created snapshot.
2228 Renames a snapshot using the provided old and new names. @param path Path to the filesystem. @param snapshotOldName Old snapshot name. @param snapshotNewName New snapshot name.
2229 Deletes a snapshot from the filesystem at the given path. @param path Path to the directory containing the snapshot. @param snapshotName Name of the snapshot to delete.
2230 Applies the storage policy to the given path. @param path Path to apply the storage policy to. @throws IOException if an I/O error occurs.
2231 Sets the storage policy for a given path. @param path Path to apply the policy to. @param policyName Name of the storage policy. @throws IOException If an I/O error occurs.
2232 Removes the storage policy from the specified path. @param src Path from which to unset the storage policy. @throws IOException if an I/O error occurs.
2233 Retrieves the BlockStoragePolicySpi for the given path. @param path The path to resolve. @throws IOException if an I/O error occurs.
2234 Checks if a path has the specified capability. @param path The path to check. @param capability Capability to check for. @throws IOException if an I/O error occurs.
2235 Resolves server defaults for a given path. @param path Path to resolve server defaults for. @return FsServerDefaults object.
2236 Creates a MultipartUploaderBuilder for the given base path. @param basePath The base path for the multipart upload. @return A MultipartUploaderBuilder instance.
2237 Gets the working directory using the SFTP client. Always returns the home directory.
2238 Refreshes and sets the FileStatus. @return FileStatus object representing the file status. @throws IOException if an I/O error occurs.
2239 Returns the number of bytes used for storage. @return Long representing the used space.
2240 Resolves a source path using regex mount points. @param srcPath Path to resolve. @param resolveLastComponent Whether to resolve last component. @return ResolveResult object or null if no match found.
2241 Checks if a file exists at the given path within local directories. @param pathStr File path to check. @param conf Hadoop configuration. @return True if file exists, false otherwise.
2242 Deletes a directory and its associated data/index files. @param fs Filesystem object. @param name Directory name to delete.
2243 Calculates the current directory path based on the given date. @param now Date object used to determine the current directory. @return Path object representing the current directory.
2244 Creates a FileOutputStream for writing, respecting security settings. @param f The file to write to. @param permissions File permissions to set. @return A FileOutputStream object. @throws IOException If an I/O error occurs.
2245 Checks if source and target paths are both in RESERVED_RAW. @param src Source path. @param target Target path. @return True if both paths are in RESERVED_RAW; otherwise false.
2246 Returns the parent directory of this file.
2247 Returns the parent path as an Optional, or empty if null.
2248 Returns an iterator over the contents of this directory. Returns RemoteIterator<PathData> objects.
2249 Creates a FileSystem data output stream builder. @param fc FileContext for file operations. @param p Path to create the output stream for. @throws IOException if an I/O error occurs.
2250 Sets the checksum verification flag for a file path. @param verifyChecksum Flag to enable/disable checksum verification. @param f The file path to set the flag for.
2251 Reads FileStatusProto from DataInput, populating the FileStatus fields.
2252 Constructs a LocatedFileStatus with block locations. @param length File length, isdir, replication, blocksize, times, permission, owner, group, symlink, path, locations
2253 Appends a key-value pair to the data and index, if needed. @param key The key to append. @param val The value to append.
2254 Closes the resource by stopping the underlying process.
2255 Writes a byte to the buffer. Flushes buffer when full.
2256 Writes data to the buffer, potentially flushing it to the stream. @param b the data to write @param off offset from where to start writing @param len max number of bytes to write @return actual number of bytes written
2257 Validates erasure coding data. Converts ECChunks to ByteBuffers. @param inputs Input ECChunk array. @param erasedIndexes Indexes of erased chunks. @param outputs Output ECChunk array.
2258 Finishes the current data block, closing the appender if needed. @param bForceFinish Forces completion, even if size limit not reached. @throws IOException if an I/O error occurs during closing.
2259 Reads token storage data from an input stream. @param in DataInputStream to read from. @throws IOException if an I/O error occurs.
2260 Retrieves candidate tokens for cleanup from the SQL secret manager. @return Map of TokenIdent to DelegationTokenInformation.
2261 Reads the next raw value length from the input stream. @param rawValue buffer to store the raw value @return Length of the raw value read.
2262 Writes credentials data to the output stream in protobuf format.
2263 Converts a Token object to a TokenProto. @param tok The Token object to convert. @return The corresponding TokenProto.
2264 Creates a new Entry object for the current key. @throws IOException if an I/O error occurs
2265 Compares the cursor key to another key. @param other The key to compare to. @throws IOException if an I/O error occurs.
2266 Retrieves key and value. @param key The key to retrieve. @param value The value to retrieve.
2267 Advances the stream by 'n' records, checking keys and closing stream. @param n number of records to advance @throws IOException if an I/O error occurs
2268 Gets a delegation token. @param url URL of the token. @param token Authentication token. @param renewer Renewal identifier. @return Delegation token.
2269 Renews a delegation token. @param url URL for renewal, token to renew, delegation token. @return New expiration timestamp.
2270 Cancels a delegation token. Calls overloaded method with null options.
2271 Gets the input stream wrapper for the given socket. @param socket The socket to get the input stream from. @return SocketInputWrapper for the socket.
2272 Gets the output stream associated with the given socket. @param socket The socket to get the output stream from. @return The output stream.
2273 Connects a socket to a remote address with a timeout. @param socket The socket to connect. @param address Remote address to connect to. @param timeout Connection timeout in milliseconds.
2274 Samples metrics from configured sources and returns a buffer. @return MetricsBuffer containing sampled metrics.
2275 Registers an MBean with the platform. @param serviceName MBean service name. @param name MBean name. @param theMbean The MBean instance to register. @return ObjectName representing the registered MBean.
2276 Retrieves or creates a ReadWriteDiskValidatorMetrics for a directory. @param dirName Directory name to get/create metrics for. @return ReadWriteDiskValidatorMetrics object.
2277 Initializes RPC stats with specified priority levels. @param numLevels The number of priority levels to initialize.
2278 Collects ThreadLocal states and aggregates them to global metrics.
2279 Creates a new rate with the given name. @param name The name of the new rate. @return A new MutableRate object.
2280 Creates a new MutableRate with the given name and description.
2281 Dumps keytab file contents to standard output. @param keytabFile The keytab file to examine. @throws IOException if an I/O error occurs.
2282 Validates JAAS configuration based on the jaasRequired flag. Checks for and verifies the existence of the JAAS file.
2283 Returns the real owner of a token, user or proxy. @param id TokenIdent object containing user info. @return String representing the real owner's username.
2284 Creates parent ZNodes in ZK, ensuring existence and ACLs. Throws exceptions on failure; requires a valid ZK connection.
2285 Retrieves active data from Zookeeper. @return Byte array of active data or throws exception if not found.
2286 Attempts to renew the TGT and relogin from the keytab.
2287 Relogins using a keytab file. Calls the overloaded method with false.
2288 Resolves or creates a connect address, using localhost if unresolved. @param addr The InetSocketAddress to resolve or create. @return The resolved or created InetSocketAddress.
2289 Updates the server address if it has changed. @return True if address updated, false otherwise. @throws IOException if there's an IO error during address lookup
2290 Returns a URI with a canonical host and default port if needed.
2291 Sends an RPC request and returns a Writable response or an AsyncGet. @param rpcKind RPC kind @param rpcRequest RPC request @return Writable response or AsyncGet for async mode @throws IOException if an I/O error occurs
2292 Waits for a cache entry to complete, adding if it's new. @param newEntry The cache entry to wait for. @return The completed CacheEntry.
2293 Adds a new cache entry with client ID and call ID. Updates cache metrics after adding the entry.
2294 Delegates to the other toString method with default values.
2295 Retrieves an Expression instance by name from the expression map. @param expressionName Name of the expression to retrieve. @param conf Configuration object for expression creation. @return Expression instance or null if not found.
2296 Creates an Expression instance by class name. @param expressionClassname Class name of the Expression to create. @param conf Configuration object. @return Expression instance.
2297 Builds a description string of recognised expressions and operators. @param factory Expression factory for creating expressions. @return Description string containing usage and help information.
2298 Creates an expression of the specified class. @param expressionClass Class of the expression to create. @return An Expression object.
2299 Gets a Command instance for the given command name. @param cmd The command name. @return A Command instance.
2300 Reads an object from the input stream. @param in Input stream. @param objectWritable Optional writable to store result. @param conf Hadoop configuration. @return Object read from the stream.
2301 Creates a new instance of the specified Writable class. @param c Class of the Writable object to instantiate. @return A new Writable object of the given class.
2302 Decodes the token identifier. @param token The token to decode. @return The decoded token identifier.
2303 Prints credentials matching the given alias to the output stream. @param creds Credentials object. @param alias Alias to match. @param out PrintStream to write to.
2304 Gets DiskValidator instance based on the provided class name. @param diskValidator Class name of the DiskValidator to retrieve. @throws DiskErrorException if class is not found.
2305 Default constructor, initializes with empty arrays and zeros.
2306 Returns block locations for a file segment. @param file FileStatus object @param start Start offset (long) @param len Length of data (long) @return BlockLocation array
2307 Fetches duration summary for a given key, considering success status. @param source IOStatistics source. @param key Key for the duration summary. @param success Whether the operation was successful. @return DurationStatisticSummary object.
2308 Creates and returns an IOStatisticsSnapshot from the current context.
2309 Creates an IOStatisticsSnapshot from the given statistics. @param statistics The IOStatistics object to snapshot. @return A new IOStatisticsSnapshot object.
2310 Creates an IOStatisticsSnapshot from an IOStatistics object. @param source The IOStatistics object to use. @return A new IOStatisticsSnapshot.
2311 Converts a RemoteIterator to a List. @param source Iterator to convert; throws IOException. @return List containing elements from the iterator.
2312 Processes a PathData item, handling existence differently. @param item The PathData item to process. @throws IOException if an I/O error occurs.
2313 Retrieves the Unix groups for a given user. @param user The username to retrieve groups for. @return Set of group names, or empty set on failure.
2314 Runs a shell command with provided arguments in batches. @param args Arguments to pass to the command. @param commandScriptName Script name to execute. @return Combined output of all command executions, or null.
2315 Reads the target of a symbolic link. @param f The File object representing the symbolic link. @return The target path as a String, or "" on error.
2316 Sets the file permission using native or shell commands. @param p The path to the file. @param permission The desired file permission.
2317 Executes shell command to get users for a netgroup. @param netgroup Netgroup name (without leading '@'). @return String result of the shell command.
2318 Creates a new Credentials object, copying data from another. @param credentials The Credentials object to copy from.
2319 Adds credentials to the internal list, thread-safe. @param credentials Credentials to add.
2320 Converts the path to a File object. Throws exception if not local.
2321 Creates directory, checks/sets permissions if needed. @param localFS FileSystem object @param dir Path to create @param expected Expected permission
2322 Gets the FileStatus of a path, optionally dereferencing links. @param f Path to check. @param dereference Dereference links? @return FileStatus object.
2323 Gets the enclosing root Path for the given Path. @param path The Path to find the enclosing root for. @return The enclosing root Path.
2324 Deletes files registered for deletion on exit. Clears the registry.
2325 Checks if a file exists. @param f Path of the file to check. @return True if file exists, false otherwise.
2326 Sets the working directory to the provided absolute path. @param newWDir The new absolute working directory. @throws IOException if the path is a file or other error occurs.
2327 Checks if the destination path exists and allows overwrite. @param srcName Source name (null for directories). @param dst Destination Path. @param overwrite Whether to overwrite existing files.
2328 Calculates content summary for a Path. @param f Path to summarize; returns ContentSummary object.
2329 Retrieves delegation tokens from AbstractFileSystems. @param p Path to resolve file systems. @param renewer Renewing identifier for the tokens. @return List of delegation tokens.
2330 Sets an extended attribute on a path. @param path Path to set the attribute on. @param name Attribute name. @param value Attribute value.
2331 Creates a snapshot of the given path. @param path The path to snapshot. @return The snapshot path.
2332 Constructs a MultipartUploaderBuilderImpl with FileContext and Path. @param fc FileContext for server defaults. @param p Path to upload. @throws IOException if an I/O error occurs.
2333 Waits for all items in waitList to reach the expected length.
2334 Tries resolving path in regex mountpoints. @param srcPath Path to resolve. @param resolveLastComponent Resolve last component flag. @return ResolveResult object or null if not found.
2335 Checks if a path exists. @param pathStr Path to check. @param conf Configuration object. @return True if path exists, false otherwise.
2336 Calculates the relative path within the HAR archive. @param path The input path to resolve. @return The relative path or null if not found.
2337 Constructs the path to the checksum file for a given file. @param file The input file path. @return Path to the corresponding checksum file.
2338 Checks if the parent directory exists. Returns true if parent exists, false otherwise.
2339 Creates a directory. Requires parent if !createParent. @param f The path of the directory to create.
2340 Renames a file or directory from src to dst, optionally overwriting. @param src Source path @param dst Destination path @param options Rename options (e.g., OVERWRITE) @throws IOException if rename fails
2341 Creates a Path for the checksum file based on the input file. @param file The input file Path. @return Path to the checksum file.
2342 Checks if a path is under a base path. @param p the path to validate @param basePath the base path @return true if p is under basePath, false otherwise
2343 Checks if this node is a root node (has no parent). @return True if this is a root node, false otherwise.
2344 Appends a suffix to the path's name, creating a new Path. @param suffix The suffix to append. @return A new Path object with the suffix appended.
2345 Qualifies a symlink target path. Returns target if not absolute.
2346 Renames a file or directory from src to dst, optionally overwriting. @param src source path @param dst destination path @param overwrite whether to overwrite existing destination
2347 Constructs a FileStatus with a null name. @param path The path of the file status.
2348 Copies another FileStatus object. Uses getters to allow subclasses to override values.
2349 Constructs a LocatedFileStatus from a FileStatus and block locations. Sets symlink if present, handling potential IOExceptions.
2350 Constructs a LocatedFileStatus with basic permission info. @param length File length, isdir, replication, etc. @param locations Block locations for the file.
2351 Appends a value to the writer and increments the count. @param value The value to append. @throws IOException if an I/O error occurs.
2352 Writes bytes from a byte array to the output stream. @param b byte array to write @param off starting offset in the array @param len number of bytes to write @throws IOException if an I/O error occurs
2353 Calls finish() and then calls the superclass's finalize method.
2354 Moves the cursor to the end of the data stream.
2355 Closes the resource by moving the cursor to the end.
2356 Reads credentials from a token storage file. @param filename file to read from @param conf configuration object @return Credentials object read from file @throws IOException if an I/O error occurs
2357 Advances to the next key in the current block. @param key The key to compare against. @param greater True for greater than, false for equal or less. @throws IOException If an I/O error occurs.
2358 Publishes metrics immediately to all configured sinks. Publishes sampled metrics if sinks are present.
2359 Initializes rate trackers with the given protocol. @param protocol The protocol to use for initialization.
2360 Collects thread local states from the inner metrics component.
2361 Adds a value to the metric with the given name. Creates a default rate metric if one doesn't exist.
2362 Increments token owner stats for a given token ID. @param id The token identifier.
2363 Decrements token count for owner stats or removes if zero. @param id TokenIdent object representing the token.
2364 Retrieves the current active HAServiceTarget. Returns null if active data is not found.
2365 Constructs an ActiveStandbyElector with provided configuration. @param app Callback for elector events.
2366 Creates an InetSocketAddress. @param target target host. @param defaultPort default port. @param configName config name. @param useCacheIfPresent use cache if present.
2367 Gets the connect address for a server. @param server The server object. @return The InetSocketAddress for connection.
2368 Calls the method, delegating to a more detailed implementation. @param rpcKind RPC kind, request, remote ID, fallback flag @return Writable result of the RPC call @throws IOException if an I/O error occurs
2369 Waits for cache completion. Returns CacheEntry or null if skipped.
2370 Waits for cache completion, returns CacheEntryWithPayload or null. @param cache RetryCache instance @param payload Payload data
2371 Retrieves an expression by name using the ExpressionFactory. @param expressionName Name of the expression to retrieve.
2372 Retrieves a WritableComparator for the given class. @param c WritableComparable class. @param conf Hadoop configuration. @return WritableComparator instance.
2373 Constructs a WritableComparator for the given key class. @param keyClass The Class of the WritableComparable key.
2374 Creates a LocalDirAllocator with the given context configuration name. @param contextCfgItemName Name of the context configuration item.
2375 Updates properties based on deprecation context and overlay. Uses new keys from DeprecatedKeyInfo to update props.
2376 Creates a new configuration by cloning another configuration. Copies resources, properties, and other configuration data.
2377 Adds a resource to the configuration. @param conf The configuration object to add the resource to.
2378 Retrieves alternative names for a given name, if deprecated. @param name The name to check for deprecation. @return Array of alternative names or null if not deprecated.
2379 Gets property sources by name. Returns null if not found.
2380 Returns the number of properties. @return The size of the properties collection.
2381 Clears the properties and overlay associated with this object.
2382 Returns an iterator over string-string property pairs. Filters non-string entries from the properties.
2383 Extracts values from props matching regex. @param regex Regex pattern to match prop keys. @return Map of matching keys and their values.
2384 Reads data and checksums vectored based on provided ranges. @param ranges List of file ranges to read. @param allocate Allocates ByteBuffer for reading.
2385 Retrieves a BufferData object for the given block number. @param blockNumber Block number to retrieve. @throws IOException if stream is closed.
2386 Waits for all items in the waitList to reach the desired replication count.
2387 Gets block locations for a file, given a start offset and length. @param p Path to the file @param start Start offset in the file @param len Length of the data to retrieve @throws IOException if an I/O error occurs
2388 Fetches success duration summary for a key from the source. @param source IOStatistics object @param key Identifier for the summary @return DurationStatisticSummary object
2389 Creates an IostatisticsSnapshot. Calls the overloaded method with null.
2390 Retrieves an IO statistics snapshot from the given source. @param source The source object to retrieve statistics from. @return An IOStatisticsSnapshot or null if stats are unavailable.
2391 Converts a RemoteIterator to an array. @param source Iterator to convert. @param a Array to populate, can be reused. @return Array containing elements from the iterator.
2392 Renews a token with the given renewer, validating its integrity. @param token Token to renew. @param renewer Renewing user. @return New expiration time for the token.
2393 Cancels a token and returns the identifier. @param token The token to cancel. @param canceller User canceling the token. @return TokenIdent object.
2394 Processes a list of PathData objects, handling potential IO errors.
2395 Retrieves a list of Unix groups for a given username. @param userName The username to retrieve groups for. @return A list of group names.
2396 Gets the number of hard links to a file. @param fileName The file to check. @throws IOException if file is invalid or an error occurs.
2397 Creates a symbolic link. @param target The target path. @param linkname The link name. @return Exit code of the symlink command.
2398 Changes the file permissions using a shell command. @param filename File to modify. @param perm Permission string (e.g., "u+rwx"). @param recursive If true, applies changes recursively. @return Exit code of the shell command.
2399 Checks if setsid is supported on the system. Returns true if supported, false otherwise.
2400 Sets the owner of a file. @param file The file to modify. @param username The new owner username. @param groupname The new group name.
2401 Retrieves a list of usernames belonging to a given netgroup. @param netgroup The netgroup name to query. @return List of usernames in the netgroup.
2402 Retrieves credentials, removing private tokens. @return Credentials object with private tokens removed.
2403 Lists status of files/directories under a path, filtered by PathFilter. @param f the path @param filter filter for paths @return FileStatus array
2404 Lists file statuses for given paths, filtered by a PathFilter. @param files Paths to check. @param filter Filter to apply. @return Array of FileStatus objects.
2405 Resolves a path to a file system. @param p the path to resolve @param resolveLastComponent whether to resolve last component @return ResolveResult object containing resolution details
2406 Sets the replication factor for a path and its checksum file. @param src Path to set replication for. @param replication New replication factor. @return True if successful, false otherwise.
2407 Deletes a file or directory recursively. @param f Path to delete @param recursive Whether to delete recursively @return True if successful, false otherwise.
2408 Renames a file or directory from src to dst. @param src Source path @param dst Destination path @return True if rename was successful, false otherwise.
2409 Deletes a file or directory. @param f Path to delete. @param recursive If true, deletes directory contents recursively. @return True if deleted, false otherwise.
2410 Checks if target is an ancestor of source in the path hierarchy.
2411 Constructs a full path by combining root path and given path. @param path Path to append to the root path. @return The full path as a Path object.
2412 Strips the root path from a given Path object. @param p The Path object to strip the root from. @return The path string without the root, or "" if it matches.
2413 Strips the root path from a given path. @param p The path to strip. @return The path without the root, or "" if it's the root.
2414 Resolves a path, following symlinks up to a limit. @param fc FileContext to use for resolution. @param path Path to resolve. @return Resolved object of type T. @throws IOException if resolution fails.
2415 Renames a file or directory from src to dst. @param src Source path @param dst Destination path @param options Rename options (e.g., overwrite)
2416 Creates a FileStatus from a HarStatus, handling metadata version.
2417 Creates a FileStatus object from an FTPFile. @param ftpFile The FTPFile to create status from. @param parentPath Parent path of the file. @return A FileStatus object representing the FTP file.
2418 Verifies token file integrity. Fails/errors if read fails. @param tokenFile File to verify. @param conf Hadoop configuration. @param category Error category. @param message Error message. @return True if verification succeeds, false otherwise.
2419 Prints token file details to the output stream. @param tokenFile File containing token storage. @param alias Text alias for the token.
2420 Syncs local cache with ZK for a given token identifier. @param ident TokenIdent object representing the token.
2421 Constructs a MetricsSystemImpl with an optional prefix. @param prefix A prefix for metrics names (can be null).
2422 Processes an RPC call, executing the specified method. @param server RPC server, protocol name, request, method name, protocol impl @return RpcWritable wrapper of the result, or null if deferred
2423 Adds a timed event to the registry. @param name Event name. @param elapsed Elapsed time in milliseconds.
2424 Adds a persisted delegation token, or expires it if no key exists. @param identifier Token identifier. @param renewDate Token renewal date. @throws IOException If the SecretManager is running or token is duplicated.
2425 Clears and updates token owner statistics based on current tokens.
2426 Removes expired delegation tokens from the token store. Logs expired tokens after releasing the lock.
2427 Creates an ActiveStandbyElector with default election enabled. @param zookeeperHostPorts Zookeeper host ports @param app Elector callback
2428 Joins an election using provided data. @param data Election data; must not be null. @throws HadoopIllegalArgumentException if data is null.
2429 Creates an InetSocketAddress. @param target Hostname or IP address. @param defaultPort Default port number. @param configName Configuration name. @return InetSocketAddress object.
2430 Invokes a remote method on a service. @param proxy Proxy object. @param method Method to invoke. @param args Arguments to the method. @return Message object or null in async mode. @throws ServiceException if an error occurs.
2431 Invokes a method on a remote service. @param proxy The proxy object. @param method The method to invoke. @param args Method arguments. @return Message object or null in async mode. @throws ServiceException if an error occurs.
2432 Parses an expression from a deque of string arguments. @param args deque of string arguments @return Expression object representing parsed expression
2433 Returns the comparator for the given WritableComparable class. @param c Class of WritableComparable to get comparator for.
2434 Authenticates a request, using delegation token or fallback handler. @param request HTTP request @param response HTTP response @return AuthenticationToken or null if authentication fails
2435 Handles deprecated keys, logs warnings, and updates property names. @param deprecations Deprecation context containing key info. @param name Name to handle; trimmed if not null. @return Array of property names, potentially updated.
2436 Sets configuration key-value pairs into the provided environment map.
2437 Cancels a token. @param token Token to cancel. @param canceller Cancelling entity. @return TokenIdent of the cancelled token.
2438 Retrieves a list of groups for a user, incorporating netgroup data. @param user The username to retrieve groups for. @return A list of group names.
2439 Extracts a tar archive to the specified directory. @param inFile Tar file to extract. @param untarDir Directory to extract to.
2440 Changes the file mode bits. @param filename file to modify @param perm permission string (e.g., "u+rwx") @return Exit code of chmod command.
2441 Sets the readability of a file. Returns true on success, false otherwise.
2442 Sets the writable flag of a file. Returns true on success, false on failure (Windows only uses FileUtil.chmod).
2443 Sets the executable flag on a file. Windows uses FileUtil.chmod. @param f The file to modify. @param executable True to set executable, false to remove it. @return True on success, false on failure.
2444 Loads permission information, first via native IO if available.
2445 Sets the owner of a file. @param p Path to the file. username, groupname: new owner. @throws IOException if an I/O error occurs.
2446 Sets the permission of a file using native or fallback methods. @param f the file to set permissions on @param permission the FsPermission object defining permissions
2447 Adds netgroups to the cache, caching only those starting with '@'. @param groups List of group names to add to the cache.
2448 Dumps tokens associated with the given UserGroupInformation. @param ugi UserGroupInformation to retrieve tokens from.
2449 Logs user info with credentials for debugging purposes. @param log Logger instance @param caption Descriptive caption for the log message @param ugi UserGroupInformation object
2450 Checks directory permissions using internal helper. @param localFS File system. @param dir Path to check. @param expected Expected permissions.
2451 Checks directory permissions and performs disk I/O. @param localFS File system. @param dir Directory to check. @param expected Expected permissions.
2452 Lists the status of files in the given paths. @param files array of paths to check @return FileStatus array for each path
2453 Gets the used space of the file system at the given URI. @return Used space in bytes, throws exception if not a mount.
2454 Retrieves block locations for a file within an archive. @param file FileStatus object @param start Start offset @param len Length of the requested block @return BlockLocation[] array
2455 Opens an FSDataInputStream for a file. @param f Path to the file @param bufferSize I/O buffer size @throws IOException if an I/O error occurs
2456 Opens an input stream for the given file. @param f Path to the file. @param bufferSize Buffer size. @return FSDataInputStream for reading data.
2457 Opens an input stream for a given path, with optional checksum verification. @param f Path to open @param bufferSize Buffer size for the stream @return FSDataInputStream object
2458 Renames a file or directory from src to dst. @param src Source path @param dst Destination path
2459 Renames a file or directory from src to dst, supporting options. @param src Source path to rename. @param dst Destination path. @param options Rename options.
2460 Adds file statuses for children of a HarStatus to the list. @param parent The parent HarStatus. @param statuses List to add file statuses to.
2461 Gets the file status for the given path. @param f the path to get the file status for @return FileStatus object representing the file status
2462 Gets the FileStatus for a file on the SFTP server. @param client SFTP client connection @param file Path to the file @return FileStatus object or throws FileNotFoundException
2463 Retrieves FileStatus for a file on the FTP server. @param client FTPClient object @param file Path to the file @return FileStatus object or throws FileNotFoundException
2464 Default constructor. Initializes the MetricsSystemImpl.
2465 Initializes a MutableRollingAverages object. @param metricValueName Name of the metric being averaged.
2466 Replaces the scheduled task with new window count and interval. @param windows Number of windows. @param interval Interval for task execution. @param timeUnit Time unit of the interval.
2467 Rechecks elector state and joins/quits election based on health.
2468 Re-joins the election process after failing to become active. Re-joins with a specified sleep duration.
2469 Processes a ZooKeeper watch event, handling connection state changes and node changes. Takes a ZK instance and WatchedEvent.
2470 Creates an InetSocketAddress from target and default port. @param target Hostname or IP address. @param defaultPort Default port number. @return InetSocketAddress object.
2471 Authenticates a request, handling delegation auth schemes. @param request HTTP request @param response HTTP response @return AuthenticationToken or null if unauthorized
2472 Checks if any property equals DEFAULT_STRING_CHECK for given name. @param name The name to check for property existence. @return True if a matching property exists, false otherwise.
2473 Retrieves raw property value by name, handling deprecations. @param name Property name to retrieve. @return Property value or null if not found.
2474 Sets a property value, handling deprecation and alternative names. @param name Property name. @param value Property value. @param source Source of the property.
2475 Removes a property and its aliases from overlays and props. @param name The name of the property to unset.
2476 Returns the virtual memory size. Refreshes if needed.
2477 Returns the physical memory size in bytes. Refreshes the size if necessary.
2478 Returns the size of available virtual memory. Refreshes data if needed; returns a long value.
2479 Returns the available physical memory size in bytes. Refreshes memory info if needed.
2480 Returns the number of processors available. Refreshes the value if necessary.
2481 Gets the CPU frequency in kHz. Refreshes if needed.
2482 Returns the cumulative CPU time in milliseconds. Refreshes data if needed.
2483 Gets CPU usage percentage, normalized by the number of processors.
2484 Returns the number of vCores used, scaled to a fraction.
2485 Returns the number of network bytes read. Refreshes the value if necessary.
2486 Returns the number of bytes written on the network. @return Number of bytes written, updated via refreshIfNeeded().
2487 Refreshes cached netgroups: fetches names, clears cache, and adds them.
2488 Updates mount point status in the map with fs status from path. @param viewFileSystem ViewFileSystem instance @param mountPointMap Map to store mount point and status @param mountPoint The mount point to update @param path The path to get the fs status from
2489 Lists file statuses for a given path, returning an array. @param f the path to list @throws IOException if an I/O error occurs
2490 Gets file link status, using deprecated path if useDeprecatedFileStatus is true. @param f Path to the file. @param dereference Dereference symbolic links. @return FileStatus object.
2491 Gets the file status for a given path. @param f Path to get status for. @return FileStatus object.
2492 Lists file statuses for a given path. @param f path to list statuses for @return Array of FileStatus objects
2493 Checks if a file exists on the SFTP channel. @param channel SFTP channel to check. @param file Path to the file. @return True if file exists, false otherwise.
2494 Gets the FileStatus for an SFTP file or link. @param channel SFTP channel @param sftpFile SFTP file entry @param parentPath Parent path of the file @return FileStatus object
2495 Checks if a file exists and is not a directory. @param channel SFTP channel @param file Path to check @throws IOException if an I/O error occurs
2496 Checks if a file exists on the FTP server. @param client FTPClient object @param file Path of the file to check @return True if file exists, false otherwise.
2497 Lists file statuses within a directory. @param client FTPClient object @param file Path to directory, returns FileStatus array
2498 Checks if a file exists on the FTP server. @param client FTP client, Path file path @return True if file exists, false otherwise.
2499 Creates a CBZip2InputStream with default settings. @param in Input stream to decompress. @param readMode Read mode for decompression.
2500 Gets the number of processed bytes until the next CBZ2 marker. @param in Input stream to read from. @return Number of bytes processed.
2501 Processes the result of a ZNode creation attempt. Handles success, failure, and retries.
2502 Processes the result from Zookeeper for a StatNode. Handles success, errors, and retries based on the result code.
2503 Creates an InetSocketAddress from the given target string. @param target Host:port string, e.g., "example.com:8080" @return InetSocketAddress object
2504 Parses host/port specifications into a list of InetSocketAddresses. @param specs Comma/space-separated host/port strings. @param defaultPort Default port to use if not specified. @return List of InetSocketAddress objects.
2505 Builds a data transfer service name from a URI and default port. @param uri The URI to parse. @param defPort Default port number. @return Service name string.
2506 Creates an XML document representing configuration properties. @param propertyName Property name to include, or null for all. @param redactor Redactor for property values. @return XML Document object.
2507 Substitutes variables in an expression using system properties. @param expr Expression string to substitute variables in. @return String with variables substituted, or original if unbound.
2508 Applies configuration changes from request to reconfigurable object. @param out PrintWriter for outputting change messages @param reconf Reconfigurable object to update @param req HttpServletRequest containing parameters
2509 Sets the value for a given name, using the default scope. @param name The name of the property to set. @param value The value to set for the property.
2510 Sets the attribute value, logs the action, and calls super.set. @param name Attribute name @param value Attribute value @param source Source of the attribute
2511 Deletes a directory and its contents recursively. @param dir The directory to delete. @param tryGrantPermissions Attempts to grant permissions. @return True if deletion was successful, false otherwise.
2512 Returns the number of processor cores. Delegates to getNumProcessors().
2513 Retrieves the status of mount points for a given path. @param fileSystem The FileSystem to check. @param path The path to check. @return Map of MountPoint to FsStatus.
2514 Gets the FileStatus, resolving symlinks to qualified paths. @param f the path to check @return FileStatus object
2515 Renames a file on the SFTP server. @param channel SFTP channel @param src source path @param dst destination path @return True if rename successful, false otherwise.
2516 Lists file statuses within a directory on the SFTP server. @param client SFTP client connection @param file Path to the directory @return Array of FileStatus objects
2517 Creates directories recursively on SFTP server. @param client SFTP client. @param file Path of the directory to create. @param permission FsPermission for the directory. @return True if created, false otherwise.
2518 Retrieves FileStatus objects matching the given path pattern. @param pathPattern Path pattern to match @return Array of FileStatus objects
2519 Retrieves FileStatus objects matching a path pattern. @param pathPattern Path pattern to match. @param filter Filter to apply to matching paths. @return Array of FileStatus objects.
2520 Returns an array of FileStatus objects matching the path pattern. @param pathPattern Path pattern to match. @return FileStatus array of matching paths.
2521 Retrieves FileStatus objects matching a path pattern. @param pathPattern Path pattern to match. @param filter Filter to apply to matching paths. @return Array of FileStatus objects.
2522 Renames a file or directory on the FTP server. @param client FTP client @param src source path @param dst destination path @return True if rename was successful, false otherwise.
2523 Deletes a file or directory recursively using FTPClient. @param client FTP client, Path file to delete, recursive flag @throws IOException if deletion fails
2524 Creates directories recursively on FTP server. @param client FTP client, path to create, permission @return True if directories were created, false otherwise.
2525 Normalizes an IP:Port string to a host:port string. @param ipPort IP:Port string to normalize. @return Normalized host:port string.
2526 Creates an InetSocketAddress from the token's service string.
2527 Builds a TokenService from a URI. @param uri The URI to build the TokenService from. @return A TokenService instance.
2528 Returns the canonical service name, or null if child FS exists.
2529 Returns the canonical service name based on URI and port.
2530 Substitutes common variables in the expression. @param expr The expression string to substitute variables in. @return The expression with variables substituted.
2531 Retrieves a property value by name, handling deprecation. @param name Property name to retrieve. @return Property value or null if not found.
2532 Retrieves property value by name, substituting variables. @param name Property name. @param defaultValue Default value if not found. @return Property value or default if not found.
2533 Adds an optional key-value pair. @param key The key to add. @param value The value associated with the key. @return This builder instance.
2534 Adds a mandatory key-value pair to the builder. @param key The key to make mandatory. @param value The value associated with the key. @return This builder for chaining.
2535 Sets the default filesystem URI in the configuration. @param conf Configuration object to update. @param uri URI of the default filesystem.
2536 Adds a link configuration for a mount table. @param conf Configuration object. @param mountTableName Mount table name. @param src Source path. @param target Link target URI.
2537 Sets the link merge slash configuration for a mount table. @param conf Configuration object. @param mountTableName Mount table name. @param target Target URI.
2538 Sets link fallback URI for a mount table in configuration. @param conf Configuration object. @param mountTableName Mount table name. @param target Target URI for link fallback.
2539 Sets the link merge targets for a configuration. @param conf Configuration object. @param mountTableName Mount table name. @param targets Array of target URIs.
2540 Sets a configuration value for a link using NFly configuration. @param conf Configuration object. @param mountTableName Mount table name.
2541 Adds a link regex configuration to the given configuration. @param conf Configuration object. @param mountTableName Mount table name. @param srcRegex Source regex. @param targetStr Target string.
2542 Sets the home directory configuration for a mount table. @param conf Configuration object. @param mountTableName Mount table name. @param homedir Home directory path.
2543 Sets the umask for the configuration. @param conf Configuration object to set umask on. @param umask FsPermission representing the umask value.
2544 Sets the codec classes for the given configuration. @param conf Configuration object. @param classes List of codec class objects.
2545 Sets the default compression type for a Hadoop job configuration. @param job The Hadoop job configuration. @param val The CompressionType to set.
2546 Extracts proxyuser configuration from filter config. @param filterConfig Servlet filter configuration. @return Configuration object with proxyuser settings.
2547 Parses command-line arguments and sets the sub-command. @param args Command-line arguments passed to the tool. @return 0 on success, 1 on failure.
2548 Sets the value of a named property to an integer. @param name Property name. @param value Integer value to set.
2549 Sets the specified property to the given long value. @param name property name @param value long value to set
2550 Sets the value of a property to the given float value. @param name Property name. @param value Float value to set.
2551 Sets the value of a property to a double, converting it to a string. @param name Property name. @param value Double value to set.
2552 Sets the value of a property to the given boolean. @param name Property name. @param value Boolean value to set.
2553 Sets the time duration with a unit suffix. @param name duration name, value in specified unit
2554 Sets the storage size with a unit identifier. @param name storage name @param value size value @param unit storage unit
2555 Sets a pattern associated with the given name. @param name Pattern name @param pattern Pattern object to associate
2556 Sets a string value associated with a name from a string array. @param name key for the value @param values string array to be concatenated
2557 Sets the socket address for the given name. @param name Identifier for the address. @param addr The InetSocketAddress to set.
2558 Sets a class name and validates its assignability. @param name class name @param theClass the class object @param xface interface the class must implement
2559 Deletes a directory and all its contents recursively.
2560 Deletes all contents of a directory. @param dir Directory to clear. @param tryGrantPermissions Whether to grant permissions. @return True if deletion succeeded, false otherwise.
2561 Lists status of files/directories under the given path. @param f the path to list @return Array of FileStatus objects, or empty array if none.
2562 Gets file status, handling symlinks and potential errors. @param f Path to the file/symlink. @return FileStatus object or throws IOException.
2563 Deletes a file or directory on the SFTP channel. @param channel SFTP channel to use @param file Path to delete @param recursive Whether to delete recursively @return True if deletion was successful, false otherwise.
2564 Creates a SplitCompressionInputStream for decompression. @param seekableIn Input stream to decompress. @param decompressor Decompressor object. @param start Start offset. @param end End offset. @param readMode Read mode. @return SplitCompressionInputStream instance.
2565 Adds a MutableMetric to the specified field, if not already set. @param source Object containing the field to be annotated. @param field Field to be annotated with a Metric.
2566 Retrieves configuration value by key. @param conf Configuration object. @param t StorageType enum. @param name Configuration key name.
2567 Determines the FTP transfer mode from the configuration. @param conf Configuration object to read transfer mode from. @return FTP transfer mode constant.
2568 Sets the data connection mode for the FTP client based on config. @param client FTP client to configure @param conf Configuration object containing mode setting @throws IOException if an I/O error occurs
2569 Gets the home directory value from the configuration. @param conf Configuration object. @param mountTableName Mount table name prefix. @return Home directory value as a string.
2570 Gets the umask from the configuration. @param conf Hadoop configuration object. @return FsPermission object representing the umask.
2571 Retrieves a list of CompressionCodec classes from configuration. @param conf Hadoop configuration object. @return List of CompressionCodec classes.
2572 Gets the default compression type from the configuration. @param job The Hadoop job configuration. @return CompressionType, RECORD if not specified.
2573 Creates a string representation of a security property. @param property The name of the property to stringify. @return String representation of the property value.
2574 Validates Hadoop token files based on system properties & config.
2575 Locates and loads the keystore, using environment variables or defaults.
2576 Gets the local hostname, using config or falling back to default. @param conf Hadoop configuration; null for default behavior. @return Hostname string. @throws UnknownHostException if hostname resolution fails.
2577 Gets the client principal from Kerberos info, or config value. @param protocol Protocol class. @param conf Hadoop configuration. @return Client principal string or null if not found.
2578 Returns the trimmed version of the given string. @param name The string to trim. @return The trimmed string, or null if input is null.
2579 Sets the value for the given name only if it's currently unset.
2580 Gets time duration for given name, using default if not found. @param name Duration name, @param defaultValue Default value.
2581 Gets storage size by name, using default if missing, and converts unit. @param name Key for storage size. @param defaultValue Default storage size string. @param targetUnit Target storage unit. @return Storage size in the target unit.
2582 Gets storage size by name, using default if not found. @param name Storage size name. @param defaultValue Default value if not found. @param targetUnit Unit to convert to. @return Storage size in target unit.
2583 Retrieves a Pattern by name, using defaultValue if invalid. @param name Pattern name. @param defaultValue Default Pattern to use if invalid. @return Pattern object.
2584 Parses a string into a collection of strings. @param name key to retrieve value string from store @return Collection of strings parsed from the value.
2585 Parses a string value into an array of strings. @param name Key to retrieve the string value for. @return String array parsed from the value.
2586 Gets strings by name, returns default if not found. @param name property name @param defaultValue default string array @return String array or default if name not found
2587 Gets a trimmed string collection from a named value. @param name Key to retrieve the value from. @return Collection of trimmed strings, or empty if null.
2588 Gets trimmed string array from value associated with name. @param name Key to retrieve value from underlying store. @return Array of trimmed strings, or empty array if null.
2589 Gets trimmed strings from 'name', or uses default if null. @param name Property name. @param defaultValue Default string array. @return Trimmed string array.
2590 Returns props with a specified prefix. @param confPrefix Prefix to filter properties by. @return Map of properties starting with the prefix.
2591 Appends a JSON property to the generator with name, value, & resource. @param jsonGen JsonGenerator instance @param config Configuration object
2592 Reconfigures a property with a new value. @param property Property to reconfigure. @param newVal New value for the property. @throws ReconfigurationException if property is not reconfigurable.
2593 Retrieves a value by name, logs the redaction, and returns it.
2594 Gets the default ViewFS mount table name from config. @param conf Configuration object to retrieve the value from. @return Default mount table name.
2595 Checks if the native Bzip2 library is loaded. @param conf Hadoop configuration object. @return True if native Bzip2 is loaded, false otherwise.
2596 Gets the default socket factory from configuration. @param conf Hadoop configuration object @return SocketFactory instance
2597 Gets the username from the configuration. Uses DEPRECATED_UGI_KEY or HADOOP_HTTP_STATIC_USER.
2598 Prints configuration option with its value. @param option configuration option name
2599 Initializes TruststoreKeystore with configuration parameters. @param conf Configuration object containing SSL settings.
2600 Spawns a thread to renew user credentials, optionally forced.
2601 Initializes the KeyProvider with a Configuration. Sets JCEKS filter & adds BC provider if needed.
2602 Retrieves ZooKeeper ACLs from configuration. @param conf Hadoop configuration object. @throws IOException if ACLs cannot be read.
2603 Gets the hash type from the configuration. @param conf Configuration object; retrieves hash type key. @return Integer representing the hash type.
2604 Parses an EnumSet from a configuration string. @param key config key, enumClass, ignoreUnknown @return EnumSet of the specified enum type.
2605 Creates an IntegerRanges object from the given name and default. @param name key for retrieving the range @param defaultValue default value if not found @return IntegerRanges object
2606 Retrieves a value by name, using a default if not found. Logs the retrieved (redacted) value and default.
2607 Overloads opt to accept a boolean value. @param key The key to search for. @param value The boolean value to convert to a string. @return The result of opt(key, String.valueOf(value)).
2608 Sets a double value for the given key. @param key key to set value for @param value double value to set @return This builder instance
2609 Calls must with key and value converted to String. @param key The key to set. @param value The boolean value to convert to String. @return This object, for chaining.
2610 Doubles the value associated with a key. @param key The key to update. @param value The double value to double. @return The updated object.
2611 Sets the default URI for the given configuration. @param conf Configuration object to update. @param uri The URI string to set as default.
2612 Adds a link to a table, using default settings if none provided. @param conf Configuration object @param mountTableName Table name to link to @param src Source string @param settings Link settings (optional) @param targets Target URIs
2613 Sets the index interval in the configuration. @param conf Configuration object to update. @param interval The interval value to set.
2614 Sets the IPC ping interval in the configuration. @param conf Configuration object to update. @param pingInterval Ping interval in milliseconds.
2615 Sets the client connect timeout for the configuration. @param conf Configuration object to update. @param timeout Timeout value in milliseconds.
2616 Sets whether nested mount points are supported in the config. @param conf Configuration object to update. @param isNestedMountPointSupported boolean value.
2617 Adds a key with optional values. @param key Key to add. @param values Optional values associated with the key. @return This builder instance.
2618 Marks a key as mandatory and sets associated values. @param key Key to mark as mandatory. @param values Values associated with the key. @return This builder instance.
2619 Updates the connect address for a given name. @param name identifier for the address @param addr address to update to @return Updated InetSocketAddress
2620 Sets the RPC engine class for a protocol in the configuration. @param conf Configuration object. protocol, engine class types.
2621 Deletes a file or directory. @param p Path to delete. @param recursive If true, deletes recursively. @throws IOException if directory is not empty and not recursive
2622 Deletes all files and subdirectories within a directory. @param dir The directory to be fully deleted.
2623 Gets the file status for the given path. @param f Path to the file. @return FileStatus object.
2624 Lists status of files/directories under the given path. @param f the path to list @return FileStatus array or empty array if no status found
2625 Creates a data output stream for writing to a file. @param f path to the file, overwrite, buffer size, replication, block size, progress. @throws IOException if an I/O error occurs
2626 Returns the Umask. Uses cached value or gets from configuration.
2627 Creates a BlockFactory based on the provided name. @param keyToBufferDir Buffer directory key. @param configuration Configuration object. @param name Factory type name. @return BlockFactory instance.
2628 Initializes the CompressionCodecFactory with codecs from configuration. @param conf Hadoop configuration object
2629 Returns trimmed name or defaultValue if name is null/empty.
2630 Parses an integer from a string, using default if parsing fails. @param name String to parse, @param defaultValue int default value
2631 Parses a long value from a string, or returns defaultValue. @param name String to parse. @param defaultValue Default value if parsing fails. @return Parsed long value.
2632 Converts a string to a long, using default if null/invalid. @param name String to convert; defaults to defaultValue if null. @return Long value of the string, or defaultValue.
2633 Gets a float value by name, returns defaultValue if not found.
2634 Parses a double value from a string, or returns defaultValue. @param name String to parse. @param defaultValue Default value if parsing fails.
2635 Gets a boolean value by name, returns defaultValue if invalid. @param name property name @param defaultValue default boolean value @return boolean value or defaultValue if invalid
2636 Retrieves a Class object by name, returning defaultValue if not found. @param name Class name to lookup. @param defaultValue Default Class if not found.
2637 Sets the value to boolean string if the property is not set.
2638 Gets time duration by name, using default value and unit.
2639 Creates a map of SASL properties based on configuration. @param conf Configuration object. @param configKey Key for QOP values. @param defaultQOP Default Quality of Protection. @return Map of SASL properties.
2640 Converts string array to integer array. @param name string array name @return integer array representation of the strings
2641 Resolves classes by name. Returns default if not found. @param name property name @param defaultValue default class array @return Class<?> array
2642 Retrieves a file from a set of local directories. @param dirsProp Comma-separated string of directory paths. @param path File path to retrieve. @return File object or throws IOException if not found.
2643 Creates a SerializationFactory with configurations and serializers. @param conf Hadoop configuration object.
2644 Retrieves configuration parameters with a specified prefix. @param conf Configuration object. @param confPrefix Prefix for the configuration parameters. @return Map of configuration parameters.
2645 Retrieves configuration parameters with a given prefix. @param conf Configuration object @param confPrefix Prefix to filter configuration parameters @return Map of configuration parameters with the prefix
2646 Propagates configuration options to the schema builder. @param builder Schema builder to add options to. @param conf Configuration object. @param prefix Prefix for option keys. @param mandatory Whether options are mandatory.
2647 Prints a form displaying configuration changes to the output stream. @param out PrintWriter to write the form to. @param reconf Reconfigurable object containing configuration.
2648 Adds a link to the default mount table of the configuration. @param conf Configuration object. @param src Source string for the link. @param target URI representing the link target.
2649 Adds a link merge slash entry for the given URI. @param conf Hadoop configuration object. @param target The URI to add.
2650 Adds a link fallback for a target URI using default table name. @param conf Hadoop configuration object @param target The URI to add as a fallback link.
2651 Adds link merge targets to the configuration's default table. @param conf Hadoop configuration object @param targets URIs representing the targets to merge
2652 Sets the home directory configuration for a given Hadoop configuration. @param conf Hadoop configuration object @param homedir Home directory path
2653 Gets the home directory value from the configuration. @param conf Configuration object to retrieve the value from.
2654 Creates an ErasureEncoder using the given configuration and options.
2655 Creates an ErasureDecoder using the given configuration and options. @param conf Hadoop configuration @param options ErasureCodecOptions object @return ErasureDecoder instance
2656 Returns the Bzip2 compressor class based on native library loading. @param conf Hadoop configuration object. @return Class extending Compressor.
2657 Returns the Bzip2Decompressor class based on native library loading.
2658 Returns a Bzip2Decompressor, native or dummy, based on config.
2659 Gets a SocketFactory based on configuration or defaults to a standard one. @param conf Hadoop configuration. @param clazz Class used for property key. @return SocketFactory instance.
2660 Constructs a HadoopZookeeperFactory with default truststore. @param zkPrincipal Zookeeper principal. @param kerberosPrincipal Kerberos principal. @param kerberosKeytab Kerberos keytab file.
2661 Initializes SSL context with keystores, managers, and protocols.
2662 Checks if authentication method is SIMPLE. @param conf Configuration object containing authentication method. @return True if SIMPLE authentication, false otherwise.
2663 Sets the authentication rule based on the provided configuration. @param conf Hadoop configuration object.
2664 Retrieves a CryptoCodec instance for the given cipher suite. @param conf Configuration object. @param cipherSuite Cipher suite to match. @return CryptoCodec instance or null if not found.
2665 Gets a Hash instance based on the provided configuration. @param conf Configuration object specifying the hash type. @return A Hash instance.
2666 Builds a FlagSet from an EnumSet retrieved from configuration. @param enumClass Enum class for flags. @param conf Configuration object. @param key Key to fetch EnumSet from config. @param ignoreUnknown Whether to ignore unknown enum values. @return FlagSet containing the flags.
2667 Writes configuration as XML to a Writer. @param propertyName Property name (optional). @param out Writer to write XML to. @param config Configuration object. @throws IOException, IllegalArgumentException
2668 Dumps the configuration to a JSON writer. @param config Configuration object to dump. @param out Writer to write the JSON to.
2669 Returns the value associated with the key, or default value. @param key Key to look up. @param value Default value if key is not found. @return Value associated with the key.
2670 Returns the value associated with the key, cast to a long. @param key key to search for @param value float value to cast to long @return This builder instance.
2671 Sets or gets the value associated with the key as a long. @param key The key for the value. @param value The long value to set. @return This builder.
2672 Sets a key-value pair, using a long value. @param key The key to set. @param value The long value to associate with the key. @return The builder instance.
2673 Creates a MetricsSource from a given object. @param source The object to create a MetricsSource from. @return A MetricsSource instance.
2674 Creates a data output stream for writing to a file. @param f Path to the file. Overwrite, bufferSize, etc. @return FSDataOutputStream
2675 Creates a data output stream for the given path. @param f Path to create. @param createFlag Create flags. @param opts Creation options. @return FSDataOutputStream object.
2676 Creates a directory with specified permissions and parent creation. @param dir The path of the directory to create. @param permission Permissions for the directory. @param createParent Whether to create parent directories.
2677 Processes a file, encoding or decoding based on command-line args.
2678 Extracts server principal from config, replacing hostname. @param principalConfig Principal config string. @param hostname Hostname to substitute in the config. @return Server principal string.
2679 Extracts server principal from config, replacing hostname pattern. @param principalConfig Principal configuration string. @param addr Client InetAddress, used to resolve hostname. @return Server principal string.
2680 Adds a protocol and implementation to the server. @param rpcKind Protocol type. @param protocolClass Protocol class. @param protocolImpl Protocol implementation. @return The server instance.
2681 Creates a KeyProvider based on configuration and key name. @param conf Configuration object. @param configKeyName Key name in the configuration. @return KeyProvider or null if URI is null.
2682 Creates a URI from the default filesystem name in configuration. @param conf Hadoop configuration object. @return URI representing the default filesystem.
2683 Validates the Kerberos kinit executable path. Checks if the path is absolute and verifies file validity.
2684 Creates an InetSocketAddress from a name, default address, and port.
2685 Updates connection address based on properties, or falls back. @param hostProperty Host property name. @param addressProperty Address property name. @param defaultAddressValue Default address value. @param addr Original InetSocketAddress. @return Updated InetSocketAddress.
2686 Opens a file using provided parameters and options. @return CompletableFuture containing FSDataInputStream. @throws IOException if an I/O error occurs.
2687 Builds and opens an FSDataInputStream with specified options. Returns a CompletableFuture wrapping the stream.
2688 Configures the provided Configuration object from the URI info. @param uriInfo URI containing SFTP configuration details. @param conf Configuration object to be updated. @throws IOException if host is null.
2689 Connects to an SFTP server using configuration. @return ChannelSftp object representing the connection. @throws IOException if connection fails.
2690 Initializes the buffer size from the file system configuration.
2691 Opens an FSDataInputStream for the given path. @param f Path to open; must not be null. @throws IOException if an I/O error occurs.
2692 Opens an FSDataInputStream for the given file handle. @param fd PathHandle representing the file to open. @throws IOException if an I/O error occurs.
2693 Appends data to a file. @param f the path to the file @return FSDataOutputStream for appending
2694 Appends data to a file. @param f the path to the file @param appendToNewBlock if true, appends to a new block @return FSDataOutputStream for appending
2695 Initializes the Cache with a given configuration and permits. @param conf Configuration object for cache parameters.
2696 Creates a Sorter with provided configuration and metadata. Uses deprecated keys if present in the configuration.
2697 Creates a compression output stream using the given compressor. @param out Output stream to compress. @param compressor Compressor to use. @return CompressionOutputStream instance. @throws IOException if an I/O error occurs.
2698 Creates a compression input stream using LZ4 codec. @param in Input stream to decompress. @param decompressor Decompressor object. @return CompressionInputStream instance.
2699 Creates and returns an Lz4Decompressor with configured buffer size.
2700 Creates a compression output stream based on native Bzip2. @param out OutputStream to wrap @param compressor Compressor to use @return CompressionOutputStream instance
2701 Creates a compression input stream based on native Bzip2. @param in Input stream to decompress. @param decompressor Decompressor object. @return CompressionInputStream instance.
2702 Creates a compression output stream using Snappy codec. @param out OutputStream to write to. @param compressor Compressor to use. @return BlockCompressorStream instance.
2703 Creates a SnappyCompressor with buffer size from configuration.
2704 Creates a compression input stream using Snappy codec. @param in Input stream to decompress. @param decompressor Decompressor instance. @return CompressionInputStream object.
2705 Creates a SnappyDecompressor with buffer size from configuration.
2706 Copies bytes from an input stream to an output stream. Uses a buffer size from the configuration.
2707 Copies bytes from an InputStream to an OutputStream. @param in Input stream. @param out Output stream. @param close Whether to close streams after copying.
2708 Gets the buffer size from the configuration. @param conf Configuration object to retrieve the value from. @return The buffer size as an integer.
2709 Sets the configuration. @param conf Configuration object; sets scriptName & maxArgs.
2710 Gets the buffer size for Hadoop security crypto. @param conf Configuration object to retrieve the value from. @return Integer buffer size.
2711 Parses the number of priority levels from the configuration. Uses FCQ levels if set, otherwise falls back to scheduler levels.
2712 Gets the RPC timeout from the configuration. @param conf Hadoop configuration object. @return RPC timeout in milliseconds.
2713 Gets the IPC ping interval from the configuration. @param conf Configuration object. @return Ping interval in milliseconds.
2714 Gets the RPC timeout from configuration, defaulting if needed. @param conf Hadoop configuration object. @return RPC timeout in milliseconds.
2715 Constructs a LineReader with default buffer size. @param in Input stream to read from. @param conf Configuration object.
2716 Constructs a LineReader with an input stream, config, and delimiter. @param in Input stream to read from. @param conf Configuration object. @param recordDelimiterBytes Record delimiter bytes.
2717 Gets an integer property. Logs the retrieved value. @param name Property name. @param defaultValue Default value if not found. @return Integer property value.
2718 Sets the control keep-alive timeout for the FTP client. @param client FTP client to configure. @param conf Configuration containing timeout value.
2719 Gets a long value for the given key, using defVal if invalid. @param key option key @param defVal default long value @return long value or default if parsing fails.
2720 Gets the default block size from configuration, defaults to 32MB.
2721 Gets a long value by name, using default if not found. Logs the retrieved value.
2722 Gets a float value by name, using defaultValue if not found. Logs the retrieved value.
2723 Initializes the file system with configuration, file system, and home path.
2724 Checks if nested mount point support is enabled in config. @param conf Configuration object; retrieves boolean value. @return True if supported, false otherwise.
2725 Creates an Lz4Compressor with config-defined buffer size and LZ4HC flag.
2726 Parses retry policy from configuration, returns null if disabled. @param conf Configuration object, policy spec keys, default values.
2727 Adds default application contexts for logs and static content. @param parent Parent ContextHandlerCollection. @param appDir Application directory. @param conf Configuration object.
2728 Adds default servlets to the given configuration.
2729 Checks if server failover is enabled for the given namespace. @param namespace Namespace to check, @param conf Configuration object. @return True if failover is enabled, false otherwise.
2730 Constructs a new Client with provided value class, config, and socket factory.
2731 Checks if client backoff is enabled in the configuration. @param prefix Configuration prefix. @param conf Configuration object. @return True if enabled, false otherwise.
2732 Checks if client backoff is enabled for given namespace & port. @param namespace Namespace string. @param port Port integer. @param conf Configuration object. @return True if backoff is enabled, false otherwise.
2733 Retrieves password from configuration by name. @param name configuration key name @return char array of password or null if not found
2734 Gets a boolean value by name, using defaultValue if absent. Logs the retrieved value.
2735 Gets the FileSystem class for a given scheme, using config or service files. @param scheme Filesystem scheme (e.g., "hdfs") @param conf Hadoop configuration object @return FileSystem class or throws UnsupportedFileSystemException
2736 Creates an AbstractFileSystem instance for the given URI. @param uri filesystem URI @param conf configuration object @throws UnsupportedFileSystemException if implementation is missing
2737 Retrieves the queue class for IPC calls. @param namespace Namespace for queue. @param port Port number. @param conf Configuration object. @return Queue class for IPC calls.
2738 Gets the RpcScheduler class from configuration, falling back as needed. @param namespace Namespace for scheduler config. @param port Port for scheduler config. @param conf Hadoop configuration object. @return RpcScheduler class.
2739 Retrieves a class by name, ensuring it extends a given interface. @param name class name @param defaultValue default class @param xface interface to extend @return Class extending xface, or null if not found.
2740 Retrieves a FileSystem for the given URI, configuration, and key. @param uri URI of the filesystem @param conf Configuration object @param key Key used to identify the filesystem @return FileSystem object
2741 Gets the service shutdown timeout from configuration. @param conf Configuration object; returns timeout duration.
2742 Retrieves password from credential providers for given name. @param name credential name to search for @return char[] password or null if not found @throws IOException if there's an IO error during retrieval
2743 Parses capacity weights from configuration, or uses defaults. @param priorityLevels Number of priority levels. @param ns Namespace for configuration. @param conf Hadoop configuration object. @return Array of capacity weights.
2744 Retrieves FilterInitializer instances from Configuration. @param conf Configuration object; null if no initializers. @return Array of FilterInitializer instances.
2745 Retrieves instances of classes implementing the given interface. @param name class name to search @param xface interface to implement @return List of instances implementing the interface
2746 Initializes the object with provided configuration and serializers. @param config Configuration object.
2747 Delegates option propagation to FutureIO. @param builder FSBuilder instance. @param conf Configuration object. @param prefix Option prefix. @param mandatory If options are mandatory.
2748 Propagates configuration options to the builder, split by prefix. @param builder The builder to update. @param conf Configuration to propagate.
2749 Checks native Hadoop libraries and exits with code 1 if failed. Accepts -a to check all libraries, -h for help.
2750 Returns the Bzip2 compressor type based on the configuration.
2751 Returns the Bzip2 decompressor type based on the configuration.
2752 Creates a Bzip2 decompressor using the provided configuration.
2753 Constructs a HadoopZookeeperFactory with a Zookeeper principal. @param zkPrincipal Zookeeper principal string.
2754 Looks up group names for a user. @param result SearchResult object. @param c DirContext object. @param goUpHierarchy Hierarchy level to traverse. @return Set of group names.
2755 Gets a CryptoCodec instance based on configuration. @param conf Configuration object; determines cipher suite. @return CryptoCodec instance.
2756 Binds a ServerSocket to a specific address with a given backlog. @param socket ServerSocket to bind @param address InetSocketAddress to bind to @param backlog Maximum queued connections
2757 Dumps a configuration property to a writer. @param config Configuration object. @param propertyName Property name to dump. @param out Writer to write the JSON to.
2758 Creates directory and its parent directories, if they do not exist. @param f the path to create @return true if creation was successful
2759 Gets the server principal, validating against configuration. @param authType Authentication type, used for protocol/server ID. @return Server principal string.
2760 Decodes a Har URI, converting it to a standard URI format. @param rawURI The Har URI to decode. @param conf Hadoop configuration. @return Decoded URI.
2761 Gets a FileSystem instance. @param conf Configuration object for file system settings. @throws IOException if an I/O error occurs.
2762 Initializes the client with a URI and configuration. @param name URI to connect to; scheme used if empty. @param conf Hadoop configuration object.
2763 Creates a new FileSystem instance. @param conf Configuration object for the filesystem. @throws IOException if an I/O error occurs.
2764 Checks if the given path's URI is compatible with this FS. @param path The path to check. @throws IllegalArgumentException if the path is incompatible.
2765 Creates an InetSocketAddress, using host from property or fallback. @param hostProperty Property for host, null uses fallback. @param addressProperty Unused parameter. @param defaultAddressValue Fallback host value. @param defaultPort Default port value. @return InetSocketAddress object.
2766 Creates a data output stream for writing to a file. @param f path to create, permission, overwrite, etc. @return FSDataOutputStream for writing to the file
2767 Constructs a FutureDataInputStreamBuilderImpl. @param fileSystem The file system to use. @param path The path to the data stream.
2768 Constructs a FutureDataInputStreamBuilderImpl. @param fileSystem The file system. @param pathHandle The path handle.
2769 Opens a file using either fileSystem_openFile or fs.open(). @param instance DynamicWrappedIO instance @param fs FileSystem object @param status FileStatus object @param readPolicies Read policies string @return FSDataInputStream object
2770 Checks if the FileSystem supports appending to the base path. @param fs The FileSystem to check. @return True if appending is supported, false otherwise.
2771 Constructs a Sorter with default Metadata. @param fs FileSystem, comparator, key/val classes, config.
2772 Constructs a Bzip2Compressor with default direct buffer size. @param conf Configuration object for compression parameters.
2773 Reinitializes the compressor with a new configuration. @param conf Configuration object; null resets to defaults.
2774 Initializes the SequenceFileReader. @param tempReader if true, skips initialization. @throws IOException if an I/O error occurs.
2775 Reinitializes the compressor with a new configuration. @param conf Configuration object; null if no reinit needed.
2776 Prepares a DataOutputStream for appending a value. @param length Value length, or -1 for unknown length. @return DataOutputStream to append the value.
2777 Initializes a WBlockState with compression, output stream, and buffer. @param compressionAlgo Compression algorithm.
2778 Sets the configuration for this object and its raw mapping. @param conf The Configuration object to set.
2779 Sets the configuration, retrieving dependency script filename. @param conf The configuration object.
2780 Creates and returns an Options object initialized with the given configuration.
2781 Gets the RPC timeout from configuration. Returns -1 if no timeout is configured.
2782 Connects to an FTP server using configuration settings. @return FTPClient object, or null on failure. @throws IOException if connection or login fails.
2783 Returns a positive long value for the given key, using defVal if negative. @param key key to look up @param defVal default value if key is negative @return Positive long value.
2784 Creates and returns an FsServerDefaults object with default values.
2785 Returns the default block size for the file system.
2786 Moves a corrupted file and its checksum to a "bad_files" directory. @param p file path, in, sums, sumsPos are streams/positions. @return false always
2787 Constructs CachingGetSpaceUsed with provided builder values. @param builder Builder object containing configuration details.
2788 Reads the next record length and key length. @param buffer DataOutputBuffer to write data to. @return Key length or -1 if end of file.
2789 Creates a default RetryPolicy based on configuration. @param conf Configuration object. @return RetryPolicy object.
2790 Constructs a Client with a Writable class and Configuration. @param valueClass Class of the Writable object. @param conf Hadoop configuration.
2791 Retrieves a cached Client. Creates one if not found. @param conf Configuration object for timeout. @param factory SocketFactory for client creation. @param valueClass Writable class for client data. @return Client instance.
2792 Excludes incompatible credential providers from the configuration. @param config Configuration object to modify. @param fileSystemClass Class to check for compatibility. @return Modified Configuration object.
2793 Retrieves a FileSystem for the given URI and configuration. @param uri The URI of the filesystem. @param conf The configuration for the filesystem. @return An AbstractFileSystem instance.
2794 Builds and returns a Server instance using configured parameters. @throws HadoopIllegalArgumentException if required configs are missing.
2795 Gets the TrashPolicy instance. @param conf Configuration object. @param fs FileSystem object. @param home Home directory Path. @return TrashPolicy instance.
2796 Retrieves the TrashPolicy instance. @param conf Configuration object. @param fs FileSystem object. @return TrashPolicy instance.
2797 Creates and returns a new DomainNameResolver instance. @param conf Configuration object. @param configKey Key to fetch resolver class from config.
2798 Gets the SaslPropertiesResolver instance from the configuration. @param conf Hadoop configuration object @return SaslPropertiesResolver instance
2799 Loads and validates a SaslPropertiesResolver class. @param saslPropsResolverKey Key for the resolver class.
2800 Gets the impersonation provider class. @param conf Hadoop configuration object. @return ImpersonationProvider instance.
2801 Shuts down the executor, waiting for termination or forcefully. @param conf Configuration object for timeout settings.
2802 Retrieves the password for a given name from various providers. @param name User's name, used to fetch the password. @return char[] Password or null if not found.
2803 Creates a RawErasureEncoder with given config, codec, and options.
2804 Creates a RawErasureDecoder with given config, codec, and options.
2805 Swaps the queue and scheduler with new implementations. @param schedulerClass Scheduler class to use. @param queueClassToUse Queue class to use. @param maxSize Max size of the queue.
2806 Creates a FairCallQueue with specified priority levels, capacity, and configuration.
2807 Stores an item in the configuration using a stringifier. @param conf Configuration object. @param item Item to store. @param keyName Key name for the item.
2808 Loads an item from configuration by key. @param conf Configuration object. @param keyName Key to load. @param itemClass Class of the item to load. @return Loaded item or null if not found.
2809 Stores an array of items in the configuration under the given key. @param conf Hadoop configuration object @param items Array of items to store @param keyName Key to store the array under
2810 Loads an array from configuration. @param conf Configuration object. @param keyName Key name in configuration. @param itemClass Class of array elements. @return Array of type K or null if not found.
2811 Creates a Writer with specified configuration and parameters. @param fs FileSystem, Configuration, Path, class types, etc.
2812 Copies data from src object to dst object using serialization. @param conf Configuration object. @param src Source object to copy from. @param dst Destination object to copy to. @return The deserialized dst object.
2813 Propagates configuration options to the builder. @param builder FSBuilder instance @param conf Configuration object
2814 Retrieves group names for a user, optionally traversing hierarchy. @param user User's DN. @param goUpHierarchy Hierarchy traversal level. @return Set of group names.
2815 Writes configuration to a writer in specified format. @param conf Configuration object. @param out Writer to write to. @param format Format (JSON or XML). @param propertyName Property to write.
2816 Initializes an authentication filter within the filter container. @param container Filter container to add the filter to. @param conf Configuration object containing filter settings.
2817 Creates a SaslClient based on the provided authentication type. @param authType Authentication type to use for client creation. @return SaslClient object or null if creation fails. @throws SaslException, IOException on failure.
2818 Creates a FileSystem instance for the given URI and configuration. @param uri the URI of the filesystem @param conf Hadoop configuration @return FileSystem instance @throws IOException if filesystem creation fails
2819 Initializes the ViewFileSystem with URI and configuration. @param theUri The URI for the ViewFileSystem. @param conf Hadoop configuration object. @throws IOException if initialization fails.
2820 Initializes the filesystem, handling potential missing initialization. @param name URI representing the filesystem name. @param conf Hadoop configuration.
2821 Makes a path qualified with the URI and working directory. @param path The path to qualify. @return The qualified path.
2822 Resolves a path, checking its validity and returning its Path. @param p Path to resolve @return Resolved Path object
2823 Delegates path checking to the underlying file system.
2824 Initializes AvroFSInput with a FileContext and Path. @param fc FileContext for file operations. @param p Path to the Avro file.
2825 Copies a file or directory from src to dst. @param src Source path. @param dst Destination path. @param deleteSource Whether to delete src after copy. @param overwrite Whether to overwrite existing dst. @return True if copy was successful.
2826 Constructs an FSDataInputStreamBuilder. @param fileSystem The FileSystem to use. @param path The path to build the stream for.
2827 Constructs an FSDataInputStreamBuilder. @param fileSystem The file system. @param pathHandle The path handle.
2828 Opens a file using the provided file system and status. @param fs FileSystem object. @param status FileStatus object. @param readPolicies Read policies string. @return FSDataInputStream object.
2829 Loads FsPermission from a path, falling back to backup if corrupted. @param path Path to the permission file. @param backupPath Path to the backup permission file. @return FsPermission object.
2830 Constructs a Sorter with a default WritableComparator. @param fs FileSystem object @param keyClass Class of the key to sort @param valClass Class of the value @param conf Configuration object
2831 Returns a Bzip2Compressor, or a dummy if native library is unavailable. @param conf Hadoop configuration object. @return Bzip2Compressor instance.
2832 Initializes the reader with input stream, start position, and length. @param filename File name, or null for unknown.
2833 Creates a compression output stream using the given compressor. @param out OutputStream to write to. @param compressor Compressor to use for compression. @return CompressionOutputStream - compressed output stream.
2834 Creates a ZStandardCompressor instance with configured parameters.
2835 Creates a compression input stream using the provided stream and decompressor.
2836 Creates a ZStandardDecompressor with configured buffer size. @return A new ZStandardDecompressor instance.
2837 Creates a DataBlockAppender. Throws exception if block is in progress. @return BlockAppender object for writing data blocks.
2838 Constructs a ScriptBasedMapping with the given configuration. @param conf The configuration object to use.
2839 Sets the configuration for this object and its raw mapping. @param conf The Configuration object to set.
2840 Parses command line arguments and sets up the command execution. @param args Command-line arguments passed to the tool. @return 0 on success, 1 on error.
2841 Creates a ConnectionId for RPC connection. @param addr Address of the remote server. @return ConnectionId object.
2842 Creates a new data output stream for writing to a file. @param file Path to the file. @param permission File permissions. @return FSDataOutputStream for the new file.
2843 Returns the server defaults for the given path. Returns the default settings for the file system.
2844 Creates a data output stream for writing to a file. @param f Path to the file @param overwrite Whether to overwrite if file exists @return FSDataOutputStream
2845 Creates a data output stream at the specified path. @param f Path to create stream at. @param progress Progressable object for tracking progress. @return FSDataOutputStream object.
2846 Creates a data output stream for writing to a file. @param f Path to the file @param replication replication factor @return FSDataOutputStream
2847 Creates a data output stream for writing to a file. @param f Path to the file. @param replication Replication factor. @param progress Progressable object. @return FSDataOutputStream
2848 Creates a data output stream for writing to a file. @param f Path to the file. Overwrite & buffer size are params. @throws IOException if an I/O error occurs.
2849 Creates a data output stream for writing to a file. @param f Path to the file. Overwrite, bufferSize, progress.
2850 Constructs an FSDataOutputStreamBuilder with a FileSystem and Path. @param fileSystem The FileSystem to use. @param p The Path to write to.
2851 Reads the next key from the input stream. @param key Writable key to populate with data. @return True if a key was read, false otherwise.
2852 Retrieves the next key-value pair. @param key Key to validate, must match expected class. @return The deserialized key object, or null if end reached.
2853 Constructs an Invoker with provided protocol, connection, config, etc.
2854 Gets a client using the provided configuration. @param conf Configuration object for client setup. @return Client instance.
2855 Gets a client using the provided configuration and socket factory. @param conf Configuration object @param factory SocketFactory to use @return Client object
2856 Constructs an Invoker with given protocol, connection ID, config, etc.
2857 Checks if a method is supported by the RPC protocol version. @param rpcProxy RPC proxy object. @param protocol Protocol class. @param rpcKind RPC kind. @param version Version number. @param methodName Method name to check. @return True if method is supported, false otherwise.
2858 Constructs a Trash object with a FileSystem and Configuration. @param fs The FileSystem to operate on. @param conf The configuration to use.
2859 Returns the NetworkTopology instance for the given configuration. @param conf Configuration object used to initialize the topology. @return The NetworkTopology instance.
2860 Constructs a SaslRpcClient with provided user info, protocol, address, and config.
2861 Refreshes superuser group configuration using provided prefix. @param conf Configuration object. @param proxyUserPrefix Prefix for proxy users.
2862 Adds a shutdown hook with a specified priority. @param shutdownHook Runnable to execute during shutdown. @param priority Hook execution priority.
2863 Retrieves the password string from the configuration. @param conf Configuration object. @param name Password name. @return Password string or null if not found.
2864 Gets password from configuration, using default if unavailable. @param conf Configuration object. @param alias Password alias. @param defaultPass Default password to use. @return Password string.
2865 Retrieves ZK authentication information from configuration. @param conf Configuration object. @param configKey Key for the authentication configuration. @return List of ZKAuthInfo objects or empty list if not found.
2866 Constructs a DecayRpcScheduler with specified levels, namespace, and config.
2867 Creates a clone of an object. @param orig The object to clone. @param conf Configuration for the clone. @return A clone of the original object.
2868 Writes XML data to an OutputStream, using UTF-8 encoding. @param out the output stream to write to @throws IOException if an I/O error occurs
2869 Selects a suitable Sasl authentication type from a list. @param authTypes List of SaslAuth objects to consider. @return Selected SaslAuth type, or null if none are suitable.
2870 Constructs an FTPFileSystem for accessing FTP resources. @param theUri The URI of the FTP resource. @param conf Configuration settings.
2871 Constructs a RawLocalFs instance for accessing local filesystems. @param theUri The URI of the filesystem. @param conf Hadoop configuration.
2872 Initializes the component with a URI and configuration. @param name URI identifying the component. @param conf Hadoop configuration object.
2873 Constructs a MultipartUploaderBuilderImpl. @param fileSystem The file system to use. @param p The path to upload.
2874 Initializes PathData with file system, path string, and status. @param fs FileSystem object @param pathString Path string @param stat FileStatus object @throws IOException if an I/O error occurs
2875 Checks if the path has the specified capability. @param path The path to check. @param capability The capability to check for. @return True if the path has the capability, false otherwise.
2876 Gets the enclosing root Path. @param path The Path to resolve. @return The enclosing root Path.
2877 Makes a path qualified, potentially swapping the scheme. @param path The path to qualify. @return The qualified Path object.
2878 Gets the FileStatus, following symlinks if configured. @param item PathData containing the file status. @param depth Symlink following depth. @return FileStatus object.
2879 Returns the full path by combining root and given path. @param path The path to resolve. @return The full path as a Path object.
2880 Copies a file from the source path to the destination path. @param src Source file path @param dst Destination file path @return True if copy successful, false otherwise.
2881 Creates an FSDataInputStreamBuilder for the given file system and path. @param fileSystem The file system. @param path The path.
2882 Creates an FSDataInputStreamBuilder for a given filesystem and path. @param fileSystem The filesystem. @param pathHandle The path to the file.
2883 Loads FsPermission from either the new or old path. Creates a new keystore if not found. Returns FsPermission.
2884 Creates a Bzip2 compressor using the provided configuration.
2885 Retrieves a BlockReader for a meta block by name. @param name Meta block name. @return BlockReader for the specified meta block. @throws MetaBlockDoesNotExist if the block doesn't exist.
2886 Retrieves a BlockReader for the specified block index. @param blockIndex Index of the block to retrieve. @throws IndexOutOfBoundsException if index is out of bounds.
2887 Closes the data index, finalizing metadata and closing appenders.
2888 Prepares a meta block with the given name and compression. @param name Meta block name. @param compressionName Compression algorithm name. @return The prepared MetaBlock. @throws IOException, MetaBlockAlreadyExists
2889 Prepares a meta block with default compression. @param name Meta block name. @return The prepared MetaBlockAppender. @throws IOException, MetaBlockAlreadyExists
2890 Initializes the data block appender for processing.
2891 Creates a data output stream for the given path. @param f the path for the new stream @return FSDataOutputStream for writing data
2892 Creates a log file, retrying with a suffix if the file exists. @param initial Initial path for the log file. @throws IOException if file creation fails.
2893 Creates or appends to a log file. @param targetFile Path to the log file. @throws IOException if file creation/appending fails.
2894 Saves an instance as JSON to a file system path. @param fs FileSystem, Path, instance, overwrite flag
2895 Creates a Writer with specified configuration and metadata. @param fs FileSystem, Configuration, Path, classes, metadata
2896 Creates a new file at the given path. Returns true on success. @param f Path to create. @throws IOException if an I/O error occurs.
2897 Constructs a FileSystemDataOutputStreamBuilder. @param fileSystem The file system. @param p The path.
2898 Advances to the next key-value pair. @param key Writable key @param val Writable value @return True if a next pair exists, false otherwise.
2899 Constructs a Trash object using the provided Configuration. @param conf Hadoop configuration object. @throws IOException if an I/O error occurs.
2900 Creates a DomainNameResolver with host from URI. @param conf Configuration object. @param uri URI object. @param configKey Configuration key. @return A new DomainNameResolver instance.
2901 Returns the Groups object, creating it if it doesn't exist. @param conf Configuration object for initialization. @return The Groups object.
2902 Returns a synchronized Groups service with the provided configuration.
2903 Refreshes superuser groups configuration using default proxy user. @param conf Configuration object to update.
2904 Registers a file to be deleted on JVM exit. @param f the file path to delete @return true if registration was successful
2905 Registers this object as a shutdown hook with a given priority. @param priority Hook execution priority (lower value is higher priority)
2906 Logs startup message and registers signal loggers, adds shutdown hook. @param clazz Class of the application. @param args Command line arguments. @param log SLF4J logger instance.
2907 Loads SSL configuration from the provided configuration. Throws IOException if required properties are missing.
2908 Creates KeyManagers from configuration, reloading on file change. @param mode SSL mode, keystore type, reload interval. @throws GeneralSecurityException, IOException on config error.
2909 Retrieves ZooKeeper authentication information from configuration. @param conf Configuration object to fetch auth info from. @return List of ZKAuthInfo objects.
2910 Retrieves a list of groups for the given user. @param user The username to fetch groups for. @return A list of group names.
2911 Writes the Hibernate configuration to XML on standard output.
2912 Establishes a SASL connection using the provided IPC streams. @param ipcStreams streams for sending/receiving SASL messages @return Authentication method used for the connection.
2913 Constructs a PathData with a file system and path string. @param fs The file system. @param pathString The path as a string. @throws IOException If an I/O error occurs.
2914 Lists directory contents. @return Array of PathData objects, sorted alphabetically. @throws IOException if an I/O error occurs.
2915 Rethrows FileNotFoundException if directory listing is inconsistent. Otherwise, logs and ignores missing directory.
2916 Checks if the path has the specified capability. Returns true for FS_READ_ONLY_CONNECTOR, else delegates.
2917 Checks if a path has the specified capability. @param path The path to check. @param capability The capability to check for. @return True if the path has the capability, false otherwise.
2918 Gets the enclosing root of a path within a file system. @param fs the file system @param path the path to check @return the enclosing root path
2919 Opens a file and returns a FutureDataInputStreamBuilder. @param path Path to the file to open. @return FutureDataInputStreamBuilder instance.
2920 Opens a file and returns a FutureDataInputStreamBuilder. @param pathHandle Path handle for the file to open. @return FutureDataInputStreamBuilder for the file.
2921 Locates and loads the keystore, handling password and path inconsistencies.
2922 Initializes the tfileIndex if it's null, reading from meta block.
2923 Retrieves a meta block by name. @param name Name of the meta block to retrieve. @return DataInputStream representing the meta block.
2924 Initializes a Reader with input stream, file length, and configuration.
2925 Prepares a meta block with given name and compressed name. @param name Meta block name. @param compressName Compressed name. @return DataOutputStream for the meta block.
2926 Closes the TFile, ensuring data and index blocks are written.
2927 Prepares a meta block with the given name. @param name Meta block name. @throws IOException on write error.
2928 Creates a DataOutputStream for appending a key of given length. @param length Length of the key to be appended. @return DataOutputStream for key appending.
2929 Copies a file or directory to a destination file system. @param src Source file/directory. @param dstFS Destination file system. @param dst Destination path. @param deleteSource Delete source after copy? @param conf Hadoop configuration. @return True if copy successful.
2930 Completes a multipart upload, merging parts and cleaning up. @param multipartUploadId Upload handle to complete. @param filePath Desired final file path. @param handleMap Map of part handles to byte arrays. @return PathHandle to the completed file.
2931 Creates a data output stream for the given file with specified permission. @param fs FileSystem object @param file Path of the file @param permission FsPermission object @return FSDataOutputStream
2932 Creates a Writer with specified FileSystem, Configuration, and types. @param fs FileSystem, conf Configuration, name Path, key/val Classes
2933 Creates or appends a log file with a unique filename. Creates the directory if it doesn't exist.
2934 Delegates to the underlying data structure's next method.
2935 Creates a proxy for the given protocol. @param protocol Protocol class. @return ProtocolProxy instance. @throws IOException if an error occurs.
2936 Returns the user-to-groups mapping service using default configuration.
2937 Initializes Kerberos authentication settings from the configuration. @param conf Hadoop configuration object @param overrideNameRules Whether to override name rules.
2938 Default constructor for the AccessControlList class.
2939 Constructs an ACL from a string representation. @param aclString String containing ACL rules.
2940 Constructs an ACL with users and groups. @param users Comma-separated list of users. @param groups Comma-separated list of groups.
2941 Refreshes superuser group configuration using default settings.
2942 Initializes SSL context with key and trust managers based on config. @param mode SSLFactory mode (client/server) @throws IOException, GeneralSecurityException on failure
2943 Starts the CuratorFramework client with provided auth info and SSL. @param authInfos List of authentication information. @param sslEnabled Whether SSL is enabled.
2944 Gets user groups, applying case conversion based on the rule. @param user The user whose groups are to be retrieved. @return A list of group names, potentially converted to upper/lower case.
2945 Initializes the MetricsSystem with a given prefix. @param prefix Prefix for metrics names. @return The MetricsSystem instance.
2946 Appends an extension to the path and returns a new PathData. @param extension The extension to append. @return A new PathData object with the appended extension.
2947 Gets path data for a child path. @param child The child PathData. @return PathData object for the child path.
2948 Recursively processes path data, handling directory contents. Uses iterative or recursive listing based on sorting status.
2949 Checks if the path has the specified capability. @param path The path to check. @param capability The capability to check for.
2950 Checks if the path has the specified capability. Returns true for FS_READ_ONLY_CONNECTOR, else delegates.
2951 Checks if path has capability, short-circuits for append/concat. @param path The path to check. @param capability The capability to check for. @return True if path has capability, false otherwise.
2952 Lists file statuses for a given path. Handles exceptions and returns statuses.
2953 Copies a file or directory from one FileSystem to another. @param deleteSource Whether to delete the source file/dir after copy.
2954 Copies a file or directory from srcFS to dst. @param deleteSource Whether to delete source after copy. @return True if copy was successful.
2955 Opens a file with specified policy and file length hint. @param policy Policy string for file opening. @return FSDataInputStream for the opened file.
2956 Opens a file with specified options. @param fs FileSystem object @param file Path to the file @param bufferSize Buffer size for the stream @param length File length, or -1 if unknown @return FSDataInputStream object @throws IOException if an I/O error occurs
2957 Loads data from a file system path. @param fs FileSystem, Path to read, Status (optional) @return Data object or throws IOException
2958 Gets the first key from the TFileIndex. Throws IOException if an error occurs.
2959 Gets the last key from the TFileIndex. @throws IOException if an I/O error occurs.
2960 Finds the block containing the given key. @param key The key to search for. @param greater True for upperBound, false for lowerBound. @return Location of the block, or end if not found.
2961 Gets the key near the given offset. @param offset Offset to search near. @return Key near the offset or null if not found.
2962 Initializes a Reader with an FSDataInputStream, file length, and config. @param fsdis Input stream, fileLength file size, conf Hadoop configuration
2963 Initializes a block reader for a given block index. @param blockIndex Index of the block to be initialized.
2964 Appends key-value data to the output. @param key key data, offset, length @param value value data, offset, length @throws IOException if an I/O error occurs
2965 Returns the middle key. Returns null if the count is zero.
2966 Skips to the last indexed entry and scans to the end of data. @param key The key to use for scanning. @throws IOException if an I/O error occurs.
2967 Seeks to a position based on the provided key. @param key The key to seek for. @param before True to seek before the key. @return Comparison result.
2968 Merges input streams based on key comparison, writing to output.
2969 Gets a proxy for the given protocol. @param protocol Protocol class. @return ProtocolProxy object. @throws IOException if an I/O error occurs.
2970 Gets a protocol proxy. Delegates to overloaded method. @param protocol Protocol class. @param clientVersion Client version. @return ProtocolProxy object.
2971 Returns the current trash directory. Delegates to TrashManager.getCurrentTrashDir().
2972 Gets the current trash directory for a given path. @param path The path to get the trash directory for. @return The current trash directory Path.
2973 Initializes UserGroupInformation if not already initialized. Uses double-checked locking for thread safety.
2974 Sets the configuration for the class. @param conf The configuration object to set.
2975 Launches the service with given configuration and arguments. @param conf Service configuration @return ExitException indicating launch status
2976 Starts the process using provided authentication information. @param authInfos List of authentication details to use.
2977 Constructs a LocalFs object using the provided configuration. @param theUri The URI for the local filesystem. @param conf The configuration object.
2978 Copies an input stream to a target PathData, handling overwrites. @param in Input stream to copy. @param target Target PathData to write to. @throws IOException if an I/O error occurs.
2979 Copies a file or directory from srcFS to dstFS. @param src Source path @param dst Destination path @return True if copy successful, false otherwise.
2980 Repairs and opens a file, attempting repair if necessary. @param mrNodes Array of MRNflyNodes to consider. @param f Path of the file to open. @param bufferSize Buffer size for opening the file. @return FSDataInputStream or null if open fails.
2981 Copies a file from a FileSystem to a local file. @param srcFS Source FileSystem, dst Destination file, @param deleteSource Delete source file after copy? @param conf Hadoop configuration.
2982 Opens a file for sequential read operations. @return FSDataInputStream for sequential IO. @throws IOException if an I/O error occurs.
2983 Loads a resource. @param fs FileSystem to use. @param path Path to the resource. @return The loaded resource.
2984 Gets the record number near the given offset. @param offset The offset to find a nearby record. @return The record number near the offset.
2985 Gets the record number at the current location. @return Record number at the current location.
2986 Initializes a Scanner with a Reader and location boundaries. @param reader Source Reader; @param begin, @param end Location bounds. @throws IOException if an I/O error occurs.
2987 Seeks to the specified location within the data stream. @param l The target Location to seek to. @throws IllegalArgumentException if location is out of bounds.
2988 Advances the cursor to the next record. Returns false if at end.
2989 Appends a key-value pair to the internal buffer. @param key The key as a byte array. @param value The value as a byte array.
2990 Seeks to a given key. @param key The key to seek to. @throws IOException if an I/O error occurs.
2991 Finds the closest key to the given key, before or after. @param key The key to search near. @param val Writable value object. @param before True for before, false for after. @return The closest WritableComparable key.
2992 Creates a UserGroupInformation object for testing purposes. @param user User's short username. @param userGroups Array of user group names. @return UserGroupInformation object.
2993 Creates a proxy UserGroupInformation for testing, adding user groups. @param user Proxy user name. @param realUser The real UserGroupInformation. @param userGroups User groups to assign. @return The created proxy UserGroupInformation.
2994 Retrieves the user's groups. Returns empty list on failure.
2995 Returns a set of group names for the current user. Returns an empty set on failure.
2996 Performs a login using provided parameters or defaults. @param subject Subject to login, or null. @param params Login parameters, or null for defaults. @return UserGroupInformation object representing the user.
2997 Refreshes the service ACL with a configuration and policy provider.
2998 Authorizes a user based on user group information and address. @param user UserGroupInformation object @param remoteAddress Remote address string @throws AuthorizationException if authorization fails
2999 Authorizes a user based on their credentials and remote address. @param user UserGroupInformation object @param remoteAddress Remote address of the user @throws AuthorizationException if authorization fails
3000 Launches the service with default error handling. @param conf Configuration object. @param processedArgs List of processed arguments. @param addShutdownHook Whether to add a shutdown hook. @param execute Whether to execute the service.
3001 Starts the process, using a default empty list.
3002 Copies a file from source to target PathData, handling attributes. @param src Source PathData @param target Target PathData @throws IOException if an I/O error occurs
3003 Copies a file or directory from src to dst. @param deleteSource Whether to delete src after copy. @param conf Hadoop configuration. @return True if copy succeeded, false otherwise.
3004 Opens a data input stream for the given path. @param f Path to open. @param bufferSize I/O buffer size. @throws IOException if an I/O error occurs.
3005 Creates a Scanner for parsing the input stream. @return A Scanner instance configured with begin and end.
3006 Creates a Scanner for records between beginRecNum and endRecNum. @param beginRecNum Start record number (inclusive). @param endRecNum End record number (inclusive).
3007 Constructs a Scanner with specified begin/end offsets. @param reader The Reader to read from. @param offBegin Start offset. @param offEnd End offset.
3008 Rewinds the stream to the beginning location.
3009 Seeks to a specific key in the input stream. @param key The key to seek to. @return True if seek was successful, false otherwise.
3010 Gets the closest WritableComparable to the given key. @param key The key to find the closest comparable to. @param val Unused parameter. @return The closest WritableComparable.
3011 Checks if security is enabled. Returns true if simple authentication is disabled.
3012 Logs out the user from the keytab, shutting down renewal tasks. Throws KerberosAuthException on failure.
3013 Returns an array of group names from the internal set.
3014 Checks if a user is in the list, considering users, groups, or real user ACLs. @param ugi UserGroupInformation object to check. @return True if user is in the list, false otherwise.
3015 Obtains UserGroupInformation from a Subject. @param subject The Subject to extract UGI from. @throws IOException if Subject is invalid or missing principal.
3016 Authorizes a user, DEPRECATED. Calls the non-config version. @param user UserGroupInformation to authorize @param remoteAddress Remote address of the request @throws AuthorizationException if authorization fails
3017 Authorizes a connection, potentially using ProxyUsers. Throws FatalRpcServerException on authorization failure.
3018 Processes a path, copying files or throwing exceptions. Handles symlinks, files, and directories based on flags.
3019 Copies a file to the local file system. @param delSrc Whether to delete the source file after copy. @param src Source file path. @param dst Destination file path.
3020 Copies a file from source to local destination, deleting source if specified. @param delSrc Delete source file after copy? @param src Source file path @param dst Destination file path
3021 Creates a Scanner for a byte range. @param offset Start offset in bytes. @param length Number of bytes to read. @return Scanner instance for the specified range.
3022 Constructs a Scanner with custom block keys. @param reader Reader to read from @param beginKey Block start key @param endKey Block end key @throws IOException if I/O error occurs
3023 Seeks to the specified key position. @param key Key to seek to. @param keyOffset Offset in the key. @param keyLen Length of the key. @return True if seek was successful.
3024 Seeks to a position based on the provided byte array. @param key byte array used for seeking.
3025 Seeks to a position in the stream using a byte array as a marker.
3026 Gets the value associated with the given key. @param key The key to search for. @param val The Writable to store the value in. @return The value associated with the key, or null if not found.
3027 Gets a ProtocolProxy for the given protocol, version, and context. @param protocol Protocol class @return ProtocolProxy instance
3028 Gets a ProtocolProxy for the given protocol and configuration. @param protocol Protocol class. @return ProtocolProxy instance. @throws IOException if an I/O error occurs.
3029 Gets a ProtocolProxy for the given protocol. @param protocol Protocol class. @return ProtocolProxy instance. @throws IOException if an I/O error occurs.
3030 Opens a file for random read access, verifying owner/group. @param f file to open @param mode access mode (e.g., "r") @param expectedOwner expected owner @param expectedGroup expected group @return RandomAccessFile object @throws IOException if an I/O error occurs
3031 Opens a FSDataInputStream with security checks. @param file The file to open. @param expectedOwner Expected owner. @param expectedGroup Expected group. @return FSDataInputStream or throws IOException.
3032 Opens a FileInputStream, verifying owner/group permissions. @param f file to open @param expectedOwner expected owner @param expectedGroup expected group @return FileInputStream
3033 Dumps UserGroupInformation details including credentials & groups. @param title Section title for the dump @param ugi The UserGroupInformation to dump
3034 Retrieves the login user. Lazily initializes if not already set.
3035 Logs in a user based on the provided Subject. @param subject The Subject representing the user to log in.
3036 Processes the connection context from the buffer. Extracts protocol details and authenticates the user.
3037 Creates a Scanner with specified key range. @param beginKey Start key for the scanner. @param endKey End key for the scanner.
3038 Seeks to a specific position based on the provided key. @param key The key to seek to. @throws IOException If an I/O error occurs.
3039 Finds the lower bound of key in a byte array. @param key The byte array to search within.
3040 Calls upperBound with start and end indices. @param key The byte array to search within.
3041 Retrieves the next record with the given key. @param key The key to seek for the next record. @return The key of the next record or null if not found.
3042 Gets the value associated with the given key. Returns null if the key is not likely to exist.
3043 Gets a ProtocolProxy instance. @param protocol Protocol class @param version Client version @return ProtocolProxy instance @throws IOException on error
3044 Gets a ProtocolProxy for the given protocol. @param protocol Protocol class. @return ProtocolProxy instance. @throws IOException if an I/O error occurs.
3045 Sets up IO streams for IPC communication, handling authentication.
3046 Opens a file for random read access, securely if enabled. @param f file to open @param mode access mode @param expectedOwner owner @param expectedGroup group @return RandomAccessFile object @throws IOException if an I/O error occurs
3047 Opens an FSDataInputStream, using secure mode if enabled. @param file The file to open. @param expectedOwner Expected owner of the file. @param expectedGroup Expected group of the file.
3048 Opens a FileInputStream for reading, securely if enabled. @param f file to open @param expectedOwner owner @param expectedGroup group @throws IOException if an I/O error occurs
3049 Checks if a user has administrator access based on ACL. @param servletContext Servlet context holding the ACL. @param remoteUser User's remote username. @return True if the user is an administrator, false otherwise.
3050 Authorizes a user for a given protocol, configuration, and address. @param user UserGroupInformation object @param protocol Protocol class @param conf Configuration object @param addr InetAddress of the connection
3051 Gets the current user's UserGroupInformation. Returns login user if no principals are found.
3052 Checks if login is based on a keytab. @return True if login is keytab-based, false otherwise.
3053 Checks if the current login is based on a ticket. @return True if login is ticket-based, false otherwise.
3054 Executes action as the login user or runs it directly. @param action PrivilegedAction to execute. @return Result of the action.
3055 Executes an action as the logged-in user. @param action Action to execute; returns result of type T. @return Result of the action.
3056 Cedes active status for a specified duration. @param millisToCede milliseconds to cede active status @throws AccessControlException, ServiceFailedException, IOException
3057 Performs a graceful failover operation using UserGroupInformation. Throws ServiceFailedException or IOException on failure.
3058 Creates a scanner with specified key ranges. @param beginKey Start key for the scanner. @param endKey End key for the scanner. @return Scanner object.
3059 Creates a scanner with specified key range. @param beginKey Start key for the scanner. @param endKey End key for the scanner.
3060 Gets a ProtocolProxy for the specified protocol. @param protocol Protocol class. @param clientVersion Client version. @return ProtocolProxy instance.
3061 Creates a proxy for the given protocol. @param protocol Protocol class. @return Proxy object. @throws IOException on failure.
3062 Checks if the user has administrator access. Returns true if authorized, otherwise returns false.
3063 Authorizes a user for a protocol. @param user UserGroupInformation object. @param protocolName Protocol name to authorize. @param addr InetAddress of the connection.
3064 Gets the user's home directory as a Path object. Uses current user or system property if unavailable.
3065 Checks if the current user has the required file access permissions. @param stat FileStatus object. @param mode FsAction to check against. @throws AccessControlException if access is denied.
3066 Constructs a ViewFileSystem with current user and timestamp.
3067 Initializes a ViewFileSystem with the given URI and configuration. @param theUri The URI for the ViewFileSystem. @param conf Hadoop configuration object.
3068 Initializes the InodeTree with configurations and link entries. @param config Hadoop configuration object @throws Various IOExceptions during initialization
3069 Gets the home directory path for the current user. Returns a Path object, falling back to system property if needed.
3070 Opens an HttpURLConnection with optional token and proxy user. @param url The URL to connect to. @param token Authentication token. @param doAs User to execute as (proxy user). @return HttpURLConnection object.
3071 Gets the best UserGroupInformation based on ticket cache or user. @param ticketCachePath Path to ticket cache, user is username. @return UserGroupInformation object.
3072 Logs in a user from a keytab file. @param user User principal name. @param path Keytab file path. @return UserGroupInformation object.
3073 Logs user information (current, real, login) if debug is enabled. @param log Logger to use for logging. @param ugi UserGroupInformation object.
3074 Executes an action as the current user, throwing exceptions. @param action The action to execute. @return The result of the action.
3075 Returns short username if using proxy authentication, else null.
3076 Waits for a ProtocolProxy to become available, retrying on failure. @param protocol Protocol class to connect to. @return ProtocolProxy object when available. @throws IOException if connection fails or timeout occurs.
3077 Creates a scanner with specified begin and end keys. @param beginKey Start key for scanning. @param endKey End key for scanning. @return Scanner object.
3078 Gets a ProtocolProxy instance. @param protocol Protocol class. @param clientVersion Client version. @param addr Socket address. @param conf Configuration object. @param factory Socket factory. @return ProtocolProxy instance.
3079 Creates a proxy object for the given protocol. @param protocol Protocol class. @return Proxy object or null if creation fails.
3080 Checks if instrumentation access is allowed based on configuration. @param servletContext Servlet context. @param request HTTP request. @param response HTTP response. @return True if access is allowed, false otherwise.
3081 Returns the path to the trash directory for the given path. @param path The path to determine the trash root for. @return Path object representing the trash root.
3082 Gets trash roots, optionally for all users. @param allUsers true to get all user trash roots @return Collection of FileStatus objects representing trash roots
3083 Checks access permissions for a given path and mode. @param path Path to check. @param mode FsAction representing the requested access.
3084 Checks if access to the path is allowed based on the mode. @param path Path to check. @param mode FsAction specifying the access mode.
3085 Constructs a ViewFileSystem with a URI and configuration. @param theUri The URI for the filesystem. @param conf Configuration settings for the filesystem.
3086 Retrieves a FileSystem with a unique key. @param uri The URI of the file system. @param conf Hadoop configuration. @return A FileSystem instance.
3087 Returns the home directory path. Delegates to the default file system.
3088 Opens a connection to the given URL, using the provided token. Delegates to superclass if token is not a Token instance.
3089 Gets a FileSystem object for the given URI, config, and user. @param uri The URI of the file system. @param conf Hadoop configuration. @param user User name for authentication. @return A FileSystem object. @throws IOException, InterruptedException
3090 Creates a FileSystem instance with specified URI, config, and user. @param uri The URI of the file system. @param conf Hadoop configuration. @param user User name for FileSystem access. @return A FileSystem instance. @throws IOException, InterruptedException
3091 Retrieves UserGroupInformation from a Kerberos ticket cache. @param ticketCache Path to the Kerberos ticket cache file. @param user User principal name. @return UserGroupInformation object.
3092 Logs in using a keytab file or as the current user if no keytab. @throws IOException if login fails
3093 Logs in a user from a keytab file. @param user User's principal name. @param path Path to the keytab file.
3094 Logs all user information using the default logger. @param ugi UserGroupInformation object to log.
3095 Waits for a ProtocolProxy. Delegates to overloaded method. @param protocol Protocol class to wait for. @param clientVersion Client version. @param addr Socket address. @param conf Configuration object. @param connTimeout Connection timeout in milliseconds. @return ProtocolProxy object. @throws IOException if an I/O error occurs.
3096 Waits for a proxy of the given protocol. @param protocol Protocol class. @return Proxy object. @throws IOException on connection error.
3097 Creates and returns a proxy object for the given protocol. @param protocol Protocol class, client version, address, config, factory. @return Proxy object or null if creation fails.
3098 Gets a ProtocolProxy instance. @param protocol Protocol class. @param version Client version. @param addr Socket address. @param conf Configuration object. @return ProtocolProxy instance.
3099 Obtains a proxy for the GetUserMappingsProtocol. @return GetUserMappingsProtocol proxy object. @throws IOException if an I/O error occurs.
3100 Creates a ZKFC proxy using provided configuration and timeout. @param conf Configuration object. @param timeoutMs Timeout in milliseconds. @return ZKFCProtocol proxy.
3101 Resolves the trash root path based on configuration and paths. @param path The path to resolve the trash root for. @return Trash root path.
3102 Gets trash roots, optionally for all users, considering mount points. @param allUsers True to get trash roots for all users. @return Collection of FileStatus objects representing trash roots.
3103 Constructs a ViewFileSystem using a default URI and configuration. @param conf Hadoop configuration object. @throws IOException if an I/O error occurs.
3104 Adds a FileSystem to the cache for testing purposes. @param uri URI of the file system. @param conf Configuration object. @param fs The FileSystem instance to add.
3105 Creates a new FileSystem instance based on URI and config. Returns default FS if URI is incomplete.
3106 Creates a FileContext using the provided file system and configuration.
3107 Opens a connection to the URL, using the provided token if applicable.
3108 Executes Kerberos diagnostics, checks configuration, and attempts login.
3109 Parses args for -principal and -keytab, attempts Kerberos login if both are provided. @param args command-line arguments @return filtered args array
3110 Main method: gets/prints UGI, or logs in from keytab. @param args keytab path and principal (optional)
3111 Logs in using a keytab file and username for secure Hadoop access. @param conf Configuration object. @param keytabFileKey Keytab file configuration key. @param userNameKey Username configuration key. @param hostname Hostname to use for principal.
3112 Constructs a Server instance with specified configurations. @param bindAddress Server bind address. @param port Server port.
3113 Builds the SASL negotiate response, including initial challenge if TOKEN is enabled. @return RpcSaslProto - The built SASL negotiate response. @throws InterruptedException, SaslException, IOException
3114 Waits for a ProtocolProxy to become available. @param protocol Protocol class to wait for. @param clientVersion Client version. @param addr Socket address. @param conf Configuration. @throws IOException If an I/O error occurs.
3115 Retrieves a proxy for the given protocol. @param protocol Protocol class. @return Proxy object. @throws IOException if connection fails.
3116 Adds a resource with an input stream and name. @param in The input stream for the resource. @param name The name of the resource.
3117 Creates and returns a proxy object for the given protocol. @param protocol Protocol class. @param clientVersion Client version. @param addr Socket address. @param conf Configuration object. @return Proxy object.
3118 Executes the Hadoop group listing command. @param args Usernames to list groups for, or current user if empty. @return 0 on success.
3119 Attempts graceful failover to the specified node via ZKFC. @param toNode Target HAServiceTarget for failover. @return 0 on success, -1 on failure.
3120 Requests remote to cede its active state. @param remote The remote HAServiceTarget. @param timeout Timeout in milliseconds. @return The ZKFCProtocol object.
3121 Handles HTTP GET requests to retrieve JMX bean data in JSON.
3122 Retrieves a FileSystem instance for the given URI and config. @param uri The URI of the filesystem. @param conf Hadoop configuration. @return FileSystem instance.
3123 Creates a new LocalFileSystem instance using the given configuration. @param conf Configuration object for file system creation. @return A new LocalFileSystem object.
3124 Creates a new FileSystem instance for the given URI and config. @param uri The URI for the file system. @param conf The configuration to use. @return A new FileSystem instance.
3125 Gets a FileContext using the provided AbstractFileSystem. @param defaultFS The AbstractFileSystem to use.
3126 Gets a FileContext for the default filesystem URI. @param defaultFsUri URI of the default filesystem. @param aConf Hadoop configuration. @return FileContext object.
3127 Initializes the command based on arguments. @param args Command-line arguments. Returns 0 on success, 1 on failure.
3128 Logs in using provided configuration, keytab file, and username. Delegates to overloaded method with localhost name.
3129 Processes a Sasl message based on its state. @param saslMessage The incoming Sasl message. @return Sasl response or null if authentication is complete. @throws SaslException, IOException, AccessControlException, InterruptedException
3130 Waits for a protocol proxy. @param protocol Protocol class to wait for. @return Proxy object. @throws IOException if an I/O error occurs.
3131 Adds a new resource with the given name. @param name The name of the resource to add.
3132 Adds a resource to the system, using the provided URL.
3133 Adds a resource to the resource list. @param file The Path object representing the resource.
3134 Adds a resource from an input stream. @param in InputStream containing the resource data.
3135 Performs a graceful failover process to become the active node. Attempts to cede active status from other nodes.
3136 Creates a proxy for the HAServiceProtocol. @return A proxy instance, or null if creation fails.
3137 Gets a health monitor proxy. @param conf Configuration object. @param timeoutMs Timeout in milliseconds. @throws IOException if an I/O error occurs.
3138 Gets a proxy using the provided configuration and timeout. @param conf Configuration object. @param timeoutMs Timeout in milliseconds. @return Proxy object.
3139 Initializes the HarFileSystem with URI and configuration. @param name URI of the Har filesystem @param conf Hadoop configuration @throws IOException if initialization fails
3140 Moves a file to the trash directory. Uses server defaults if available. @param fs Filesystem object @param p Path to move @param conf Configuration object @return True if moved, false otherwise.
3141 Constructs a PathData object from a path string and configuration. @param pathString Path string to parse. @param conf Hadoop configuration. @throws IOException if an I/O error occurs.
3142 Gets a FileSystem object by name. @param name FileSystem name. @param conf Hadoop configuration. @return FileSystem object.
3143 Retrieves the local file system. @param conf Hadoop configuration object. @return LocalFileSystem instance.
3144 Constructs a ChRootedFileSystem with a given URI and config. @param uri The URI of the filesystem. @param conf Hadoop configuration. @throws IOException if an I/O error occurs.
3145 Retrieves a FileSystem instance for the given URI and configuration. @param uri The URI for the file system. @param conf The configuration to use. @return A FileSystem instance.
3146 Retrieves a FileSystem for the given URI and configuration. Returns default FS if scheme doesn't match, otherwise creates.
3147 Retrieves a FileSystem instance using the provided configuration. @param conf Configuration object for file system setup. @return A FileSystem object.
3148 Gets the FileSystem, using supplied or connecting to basePath. @return FileSystem object, or null if an error occurs. @throws MetricsException if URI is invalid or connection fails.
3149 Lists file statuses for a given path, handling links and fallbacks. @param f the path to list statuses for @return array of FileStatus objects
3150 Gets a FileContext for the given URI, using default configuration. @param defaultFsUri URI of the filesystem. @return FileContext object.
3151 Gets a FileContext based on the configuration. @param aConf Hadoop configuration object. @throws UnsupportedFileSystemException if no scheme is found.
3152 Gets a local FileSystem's FileContext from the given configuration. @param aConf Hadoop configuration object. @return Local FileContext.
3153 Constructs a Server instance with specified configuration parameters.
3154 Constructs a Server instance with specified configurations. @param protocolClass Protocol class, or null to derive from impl.
3155 Processes a SASL message, authenticates the user, and sends reply.
3156 Loads mount table configuration from a path. @param mountTableConfigPath Path to the mount table configuration. @param conf Configuration object to load into.
3157 Checks if other target nodes are active, returns true if any are. @param targetNodeToActivate target node ID @param forceActive force active flag @return true if any target node is active, false otherwise.
3158 Performs pre-failover checks on the target service. @param from Source service, @param target Target service. @param forceActive Forces failover even if not ready. @throws FailoverFailedException if checks fail.
3159 Attempts to transition the service to standby gracefully. @param svc The HAServiceTarget to transition. @return True if successful, false otherwise.
3160 Resolves a path, following symlinks if enabled. @param filesys The file system. @param path The path to resolve. @return Resolved object of type T. @throws IOException If resolution fails.
3161 Constructs a PathData object using a local URI and configuration. @param localPath The local URI path. @param conf The Hadoop configuration.
3162 Copies files from local paths to a destination path. @param delSrc Delete source files after copying. @param overwrite Overwrite existing files at destination.
3163 Copies a local file to the destination path. @param delSrc Delete source file after copy. @param overwrite Overwrite destination if it exists.
3164 Copies a file from a source to a destination Path. @param delSrc Delete source file after copy. @param src Source Path. @param dst Destination Path. @param useRawLocalFileSystem Use raw local file system.
3165 Updates the context with new local directories from the configuration. @param conf Hadoop configuration object @return Updated Context object
3166 Gets a local path, trying each directory in dirsProp. @param dirsProp Comma-separated list of local directories. @param path The path to create. @return The local Path object. @throws IOException If no valid local directories are found.
3167 Resolves the raw FileSystem for a given path. @param path The path to resolve. @param conf Hadoop configuration. @return The raw FileSystem.
3168 Resolves mount path info for a given path and configuration. @param path The path to resolve. @param conf Hadoop configuration. @return MountPathInfo object.
3169 Expands a glob pattern into an array of PathData objects. @param pattern Glob pattern to expand. @param conf Hadoop configuration. @return Array of PathData objects matching the pattern.
3170 Dumps TFile information to a PrintStream. @param file TFile path @param out PrintStream to write output to @param conf Hadoop configuration
3171 Reads credentials from a token storage file. @param filename Path to the token storage file. @param conf Hadoop configuration. @return Credentials object. @throws IOException if an I/O error occurs.
3172 Retrieves an array of URLs for libjars specified in the configuration. @param conf Hadoop configuration object @return URL array of libjars, or null if none are specified.
3173 Initializes the file system, creating the base directory. Returns true on success, throws exception if creation fails.
3174 Gets the file context for the local file system. @return FileContext object for the local file system.
3175 Gets the default file context using the default configuration. @throws UnsupportedFileSystemException if FS is not supported.
3176 Constructs a Server instance with specified configurations. @param alignmentContext Alignment context for server.
3177 Constructs a Server with specified parameters. Delegates to a constructor with null values for additional params.
3178 Creates an SSLFactory with the given mode and configuration. @param mode SSL mode @param conf Configuration object
3179 Refreshes the service ACL using the provided configuration and provider.
3180 Performs a failover from 'fromSvc' to 'toSvc', optionally fencing. @param fromSvc Source service to failover from. @param toSvc Target service to failover to.
3181 Resolves the local destination path from arguments. @param args List of arguments, last one is the path. @throws IOException if path is invalid.
3182 Moves files from source paths to the destination path. @param srcs Source file paths to move. @param dst Destination path.
3183 Copies files from local file system to a destination path. @param delSrc Delete source files after copy. @param overwrite Overwrite existing files at destination. @param srcs Source paths. @param dst Destination path.
3184 Copies a local file to a destination. Deletes source if delSrc is true. @param delSrc Delete source file after copy. @param src Source file path. @param dst Destination file path.
3185 Copies a local file to the file system. @param delSrc Delete source file after copy. @param overwrite Overwrite destination if exists. @param src Source path. @param dst Destination path.
3186 Copies a file from source to destination, optionally deleting source. @param delSrc Delete source file after copy? @param src Source file path. @param dst Destination file path.
3187 Finds a local path for writing data, considering size and configuration. @param pathStr path string, @param size size of data, @param conf Hadoop configuration @param checkWrite whether to check write permissions @return Path object or null if not found @throws IOException if no suitable path is found
3188 Finds a local path for reading, throwing an error if not found. @param pathStr path string to search for @param conf Hadoop configuration @return Path object if found, otherwise throws DiskErrorException
3189 Gets all local paths to read from a given path string. @param pathStr Path string to iterate over. @param conf Hadoop configuration. @return Iterable of Path objects.
3190 Constructs a NflyFSystem with given URIs, config, replication, flags, and fsGetter.
3191 Runs all specified sources, returning 0 on success, -1 on error.
3192 Expands a glob argument into a list of PathData objects. @param arg The glob argument to expand. @return List of PathData objects.
3193 Determines the remote destination path from arguments. @param args Command-line arguments, last is the path. @throws IOException if path is invalid or not found.
3194 Constructs a Reader with a qualified path. @param fs FileSystem object @param file Path object @param conf Configuration object @throws IOException if an I/O error occurs
3195 Constructs a Reader with configured stream, start, and length. @param in Input stream, buffersize, start, length, and Configuration.
3196 Creates a SequenceFile reader with specified options. @param dataFile Path to the SequenceFile @param conf Hadoop configuration @param options Reader options @return SequenceFile.Reader instance
3197 Reads the next raw key from the input stream. @return True if a key was read, false otherwise. @throws IOException if an I/O error occurs.
3198 Creates a Writer with options for file system, compression, etc. @param conf Hadoop configuration object @param opts Writer options @throws IOException if an I/O error occurs
3199 Dumps information for each TFile specified in the arguments. @param args Command-line arguments representing TFile paths.
3200 Writes credentials to a file in specified format. @param f File to write to. @param format Format of the credentials (e.g., FORMAT_PB). @param creds Credentials to write. @param conf Configuration settings.
3201 Rolls the log directory if needed, based on flush time.
3202 Finds all JAR files in a directory. @param path directory path, ends with * for globbing. @param useLocal use local filesystem. @return List of Path objects for each JAR file.
3203 Constructs a Server with default settings. @param protocolClass Protocol class. @param protocolImpl Protocol implementation.
3204 Constructs a Server with specified parameters. Deprecated constructor, use the other constructor instead.
3205 Processes RPC out-of-band requests based on the request header. @param header RPC request header @param buffer RPC data buffer @throws RpcServerException on error
3206 Establishes a connection to the given URL, handling HTTPS if needed. @param url The URL to connect to. @return URLConnection object.
3207 Copies a local file to a destination Path. @param src Source Path @param dst Destination Path
3208 Moves a file from the source path to the destination path. @param src Source file path. @param dst Destination file path.
3209 Copies a file from the local file system to the destination. @param delSrc Whether to delete source file after copy. @param src Source file path. @param dst Destination file path.
3210 Copies a file from a source path to a destination path. @param src Source file path. @param dst Destination file path.
3211 Copies a file to a local destination. @param src Source file path. @param dst Destination file path.
3212 Copies a file from source to local destination. @param delSrc Delete source file after copy. @param src Source file path. @param dst Destination file path.
3213 Gets a local path for writing data. @param pathStr Path string. @param size Data size. @param conf Configuration. @param checkWrite Check write access. @return Local path object.
3214 Creates a temporary file for writing, ensuring sufficient space. @param pathStr file path string @param size file size @param conf Hadoop configuration @return Temporary File object
3215 Gets the local path to read, using the provided path string and config.
3216 Gets all local paths to read, using the provided path string and config. @param pathStr Path string to search. @param conf Configuration object. @return Iterable of Path objects.
3217 Constructs NflyFSystem with URI, config, minReplication, and flags. Delegates to the primary constructor.
3218 Creates a new NflyFileSystem with given URIs, config, settings, and getter. @param uris URIs for the filesystem. @param conf Hadoop configuration. @param settings Key-value settings string. @param fsGetter Filesystem getter. @return New NflyFileSystem instance.
3219 Expands argument strings into a LinkedList of PathData objects. @param args List of argument strings to expand. @return LinkedList of PathData objects.
3220 Fetches delegation tokens from DtFetchers, handles aliasing, and writes to file. @param tokenFile File to store tokens @param fileFormat File format @param alias Token alias
3221 Aliases a token in the token storage file. @param tokenFile File containing tokens. @param fileFormat File format. @param alias New alias for the token. @param service Service of the token. @param conf Hadoop configuration.
3222 Appends tokens from multiple files into a single formatted file. @param tokenFiles List of token files to append. @param fileFormat Format for the output file. @param conf Hadoop configuration.
3223 Removes tokens matching the alias from the token file. @param cancel if true, cancels matching tokens.
3224 Renews tokens matching the alias in the token file. @param tokenFile Token storage file. @param fileFormat File format (e.g., JSON). @param alias Token alias to match. @param conf Hadoop configuration.
3225 Imports a token file, decodes a token, and writes credentials. @param tokenFile File containing the token storage. @param fileFormat Format of the token file.
3226 Returns a list of JAR file paths in the given directory. @param path The directory to search.
3227 Constructor for Server (deprecated). Delegates to the primary constructor.
3228 Processes a single RPC request from the provided ByteBuffer. @param bb ByteBuffer containing the RPC request. @throws IOException, InterruptedException on connection failure.
3229 Processes data from a URL, printing lines starting with MARKER. @param urlString URL to connect to and process data from.
3230 Moves a temporary local file to the final output file. @param fsOutputFile Path to the final output file. @param tmpLocalFile Path to the temporary local file.
3231 Copies a file or directory to a local file, optionally copying CRC. @param src Source Path @param dst Destination Path @param copyCrc Whether to copy CRC file
3232 Gets a local path for writing, using default retry behavior. @param pathStr Path string to use. @param size File size. @param conf Configuration object. @return Local path object.
3233 Creates a temporary file for writing. @param pathStr File path. @param size File size. @param conf Configuration object. @return File object.
3234 Processes raw arguments after expanding them. @param args LinkedList of raw argument strings. @throws IOException if an I/O error occurs during processing.
3235 Creates a Writer instance with specified options and compression. @param conf Hadoop Configuration. @param opts Writer options. @return Writer instance.
3236 Creates a classpath JAR with resolved entries and wildcards. @param inputClassPath Classpath entries, separated by File.pathSeparator. @return Array of classpath JAR path and unexpanded wildcard classpath. @throws IOException if an I/O error occurs.
3237 Validates file paths, expands wildcards if enabled, and returns a comma-separated string. @param files Comma-separated string of file paths. @param expandWildcard Whether to expand wildcard characters. @return Comma-separated string of validated file paths.
3238 Reads and processes RPC data from the channel. Handles connection headers, version checks, and data processing. @return int: Number of bytes read, or -1 on error.
3239 Unwraps a packet and processes contained RPCs. Reads and processes RPCs from the input byte array.
3240 Retrieves the log level from the specified URL.
3241 Sets the log level for the specified class. Uses protocol, hostname, class name, and level.
3242 Creates a KeyProvider based on the given URI and configuration. @param providerUri URI of the key provider. @param conf Hadoop configuration. @return KeyProvider or null if the scheme doesn't match.
3243 Completes local output using the file system's completeLocalOutput method. @param fsOutputFile Output file path. @param tmpLocalFile Temporary file path.
3244 Creates a temporary file for writing with specified size and path. @param pathStr file path string @param size file size in bytes @param conf Hadoop configuration @return File object representing the temporary file
3245 Gets the local path for writing, using SIZE_UNKNOWN. @param pathStr Path string to resolve. @param conf Hadoop configuration. @return Local path object.
3246 Runs the command with arguments, handles options, and errors. @param argv Command-line arguments passed to the program. @return Exit code based on success or errors.
3247 Constructs a Reader for the given file in the file system. @param fs FileSystem object @param file Path to the file @param conf Configuration object
3248 Constructs a Reader with a given FileSystem, directory, and comparator. @param fs FileSystem, dirName directory name, comparator comparator
3249 Constructs a Reader with a directory path. @param fs FileSystem object @param dirName Directory name @param conf Configuration object @throws IOException if an I/O error occurs
3250 Constructs a Reader with a directory path, config, and comparator. @param fs FileSystem, dirName directory path, comparator comparator, conf config @throws IOException if an I/O error occurs
3251 Creates a Writer with file attributes cloned from an input file. @param inputFile Input file path. @param outputFile Output file path. @param prog Progressable object for tracking progress. @return Writer object.
3252 Fixes a data file by creating an index file for efficient lookups. @param fs Filesystem to operate on. @param dir Directory containing data and index files. @param keyClass Key class of the data file. @param valueClass Value class of the data file. @param dryrun Dry run mode. @param conf Hadoop configuration. @return Number of records processed.
3253 Creates a Writer instance. Delegates to the internal implementation. @param fs FileSystem, configuration, path, key/value classes @return Writer instance
3254 Creates a Writer instance with specified parameters. @param fs Filesystem, configuration, path, classes, compression. @return Writer instance.
3255 Creates a Writer with specified parameters. @param fs FileSystem, configuration, path, classes, compression, progress @return Writer object
3256 Creates a writer with specified file system, config, and compression. @param fs FileSystem, config, name, keyClass, valClass, compression, codec @return Writer object
3257 Creates a writer with specified configurations. @param fs FileSystem, Configuration, Path, classes, codec, progress, metadata @return Writer object
3258 Creates a Writer instance with specified configurations. @param fs FileSystem, configuration, path, classes, sizes, etc. @return Writer instance.
3259 Creates a writer with specified file system, config, and compression. @param fs FileSystem, config, name, keyClass, valClass, compression, codec, progress @return Writer object
3260 Creates a Writer instance with specified configuration and metadata. @param conf Configuration object @param out FSDataOutputStream @param keyClass Class of the key @param valClass Class of the value @param compressionType Compression type @param codec Compression codec @param metadata Metadata object @return Writer instance
3261 Creates a Writer instance with specified configuration and codec. @param conf Configuration object @param out FSDataOutputStream @return Writer instance
3262 Validates file names. Overloads validateFiles with default settings.
3263 Sends a log level request based on the 'operation' value. Throws IllegalArgumentException if operation is invalid.
3264 Creates a DataBlock on disk. @param index block index, limit block size, statistics upload stats. @return DataBlock object.
3265 Creates a temporary file path using the provided allocator. @param conf Hadoop configuration @param localDirAllocator Local directory allocator @return Path to the created temporary file
3266 Runs the specified command with provided arguments. @param argv Command-line arguments, first is the command. @return Exit code of the command execution.
3267 Constructs a Reader with a FileSystem, directory name, and configuration.
3268 Merges sorted segments into a single sorted output. Returns a RawKeyValueIterator for the merged data.
3269 Constructs a Writer with given configuration, FileSystem, dir, comparator, compression.
3270 Constructs a Writer with given configuration, file system, file, and value class.
3271 Constructs a Writer with given configuration, file system, file, value class, compression, and progress.
3272 Constructs a Writer with a directory path. @param conf Configuration object. @param fs FileSystem object. @param dirName Directory name. @param keyClass Key class. @param valClass Value class.
3273 Constructs a Writer with specified configuration and parameters. @param conf Hadoop configuration; @param progress Progressable object
3274 Constructs a Writer with specified configuration and file system. @param conf Configuration object @param fs FileSystem object @param dirName Output directory name @param keyClass Key class @param valClass Value class @param compress Compression type @param codec Compression codec @param progress Progressable object @throws IOException if an I/O error occurs
3275 Constructs a Writer with a directory path. @param conf Configuration object @param fs FileSystem object @param dirName Directory name @param keyClass Key class @param valClass Value class @param compress Compression type
3276 Constructs a Writer with Configuration, FileSystem, dirName, comparator, and value class.
3277 Constructs a Writer with specified configuration and compression. @param conf Configuration object @param fs FileSystem object @param dirName Directory name @param comparator Comparator for writable keys @param valClass Value class @param compress Compression type
3278 Creates a Writer with specified parameters. @param conf Configuration object. @param fs FileSystem object. @param dirName Output directory name.
3279 Constructs a Writer with specified configuration and parameters. @param conf Configuration object.
3280 Creates a writer for the specified file, handling flags and options. @param fc FileContext, conf Configuration, name Path, etc. @return Writer object.
3281 Parses command-line arguments and handles classpath or jar creation.
3282 Creates a ClassLoader, either client or standard, based on config. @param file The file to load. @param workDir Working directory for class loading. @return A ClassLoader instance.
3283 Processes general command-line options and configures Hadoop configuration.
3284 Gets the cache file path. @param conf Configuration object. @param localDirAllocator Local directory allocator. @return Cache file path.
3285 Checks if there's enough space in the cache directory. @param fileSize Size of the file to be cached. @param conf Hadoop configuration. @param localDirAllocator Local directory allocator. @return True if cache space is available, false otherwise.
3286 Merges a list of segments into a single iterator. @param segments list of segments to merge @param tmpDir temporary directory for merging @return merged RawKeyValueIterator
3287 Merges segments from input paths into a MergeQueue. @param inNames Input paths to merge. @param deleteInputs Whether to delete input paths after merge. @param factor Merge factor. @param tmpDir Temporary directory. @return MergeQueue iterator.
3288 Merges input paths into a single queue. @param inNames Input paths to merge. @param tempDir Temporary directory for merge outputs. @param deleteInputs Whether to delete input files after merge. @return MergeQueue object for merged data.
3289 Merges segments from index into a merge queue. @param inName Input path, indexIn is the index path. @param indexIn Index path containing segments to merge. @param tmpDir Temporary directory for merge operations. @return MergeQueue iterator for merged segments.
3290 Constructs a Writer with a key comparator. @param conf Configuration object. @param fs FileSystem object. @param dirName Output directory name. @param compress Compression type.
3291 Constructs a Writer with a FileSystem, directory name, and key class.
3292 Merges map files into a single output file. Deletes input files if specified. @param inMapFiles Input map files to merge. @param deleteInputs Whether to delete input files after merging. @param outMapFile Path to the output merged map file.
3293 Creates a Writer instance with specified configurations and options. @param fs FileSystem, Configuration, Path, classes, sizes, flags, etc. @return Writer instance
3294 Parses general command-line options. @param opts Options object to populate. @param args Command-line arguments. @return True if parsing was successful, false otherwise.
3295 Adds a block to the cache. @param blockNumber Block number to add @param buffer ByteBuffer containing the block data @throws IOException if an I/O error occurs
3296 Merges multiple paths into a single iterator. @param inNames Input paths to merge. @param deleteInputs Whether to delete input paths after merge. @param tmpDir Temporary directory for merging. @return A RawKeyValueIterator containing merged data.
3297 Merges data from input file and writes to a temporary file.
3298 Starts the application by invoking the RunJar class. @param args Command-line arguments passed to the application.
3299 Parses generic options using provided configuration, options, and arguments.
3300 Sorts input files and returns an iterator for sorted data. @param inFiles Input file paths to sort. @param tempDir Temporary directory for intermediate files. @param deleteInput Whether to delete input files after sorting. @return KeyValueIterator for sorted data or null if no segments.
3301 Merges input files into a single output file. @param inFiles array of input file paths @param outFile path to the output file @throws IOException if output file already exists
3302 Sorts input files and merges them to an output file. @param inFiles Input file paths to sort. @param outFile Output file path for sorted data. @param deleteInput Delete input files after sorting.
3303 Constructs a GenericOptionsParser with a default Configuration. @param opts Options object. @param args Command-line arguments. @throws IOException If an I/O error occurs.
3304 Constructs a GenericOptionsParser with a default configuration. @param args Command-line arguments to parse. @throws IOException If an I/O error occurs during parsing.
3305 Constructs a GenericOptionsParser with default options. @param conf Configuration object. @param args Command-line arguments. @throws IOException if an I/O error occurs.
3306 Sorts the input file and writes the sorted data to the output file.
3307 Creates a GenericOptionsParser using the provided config and args. @param conf Configuration object @param argArray Command line arguments @return GenericOptionsParser instance
3308 Runs a Hadoop tool with provided configuration and arguments. @param conf Hadoop configuration. @param tool Tool to execute. @param args Command-line arguments. @return Exit code of the tool.
3309 Parses command-line arguments, updates configuration, and returns remaining args.
3310 Executes the KDiag tool. @param conf Hadoop configuration. @param argv Command-line arguments. @return Exit code from ToolRunner.
3311 Main entry point; runs the CredentialShell tool with provided args.
3312 Runs the KeyShell tool with provided arguments and exits. @param args Command-line arguments for the tool.
3313 Delegates execution to the core run method. @param tool The tool instance. @param args Command-line arguments. @return Result code.
3314 Extracts command options from arguments. @param conf Configuration object. @param args Command line arguments. @return List of extracted command options.
3315 Main method: Executes command and handles termination/errors.
3316 Main method to run the FsShell with provided arguments. Runs the shell, exits with the shell's return code.
3317 Main method: parses CLI args, runs the CLI, and exits.
3318 Runs the FindClass tool and exits with its result or error code.
3319 Launches the service with given arguments and handles exit codes. @param args Command-line arguments passed to the service.
3320 Starts the application by invoking the serviceMain method. @param args Command-line arguments passed to the application.
3321 Delegates to the overloaded serviceMain with a List of args.
