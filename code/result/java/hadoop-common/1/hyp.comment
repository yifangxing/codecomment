1 Creates a new FileRange instance with the specified byte offset and length. @param offset starting position within the file @param length number of bytes in the range
2 Creates a new FileRange instance with specified byte offset, length, and associated data. @param offset starting position within the file @param length number of bytes in the range @param reference additional related data (e.g., metadata)
3 Validates a file range request. @param range FileRange object to validate @return validated FileRange object or throws EOFException on error
4 Validates that an object is not null. @param obj object to check @param argName name of the argument being validated
5 Validates that the given long value is a positive integer. @param value the value to validate @param argName name of the argument being validated
6 Ensures input value is not negative. @param value the input value to validate @param argName name of the argument being validated
7 Validates that a value is present; throws exception if not. @param isPresent condition to check @param argName name of the argument being validated
8 Validates an argument based on its boolean value. @param isValid condition to check @param argName name of the argument being validated
9 Validates an input value against a set of valid values. @param isValid true if the value is valid @param argName name of the argument being validated @param validValues comma-separated list of valid values
10 Verifies that two long values are equal. @param value1 the first value to compare @param value1Name name of the first value @param value2 the second value to compare @param value2Name name of the second value
11 Validates if a long value is an integer multiple of another. @param value1 the value to check @param value1Name name of the first value @param value2 the divisor @param value2Name name of the second value
12 Validates that the first value is greater than the second. @param value1 the value to check @param value1Name name of the value to check @param value2 the value against which to compare @param value2Name name of the value against which to compare
13 Ensures one long value is greater than or equal to another. @param value1 the first value @param value1Name name of the first value @param value2 the second value @param value2Name name of the second value
14 Validates that one long value is less than or equal to another. @param value1 the first value @param value1Name name of the first value @param value2 the second value @param value2Name name of the second value
15 Validates a long value to be within an inclusive range. @param value numeric value to check @param valueName name of the value parameter @param minValueInclusive minimum allowed value (inclusive) @param maxValueInclusive maximum allowed value (inclusive)
16 Validates a double value is within a specified inclusive range. @param value value to check @param valueName name of the value being validated @param minValueInclusive minimum allowed value (inclusive) @param maxValueInclusive maximum allowed value (inclusive)
17 Validates bulk delete paths against page size and hierarchical constraints. @param paths collection of file system paths to validate @param pageSize maximum number of paths per deletion operation @param basePath designated base path for validation
18 Initializes the BlockUploadData object with a local file. @param file File to be used for upload
19 Validates and casts a given object to an IOStatisticsSnapshot. @param snapshot the object to validate and cast
20 Maps enum names to their corresponding values with a specified prefix. @param prefix string prefix for enum names @param enumClass Class of the Enum type to map @return Map of enum name strings to their corresponding Enum values
21 Sorts a list of file ranges by offset and returns them as an array. @param input unsorted list of FileRange objects
22 Checks if a directory is the parent of another. @param parent directory to check @param child directory to check against @return true if parent contains child, false otherwise
23 Checks if two file paths belong to the same file system. @param qualPath1 first path @param qualPath2 second path @return true if both paths have the same scheme but different authorities, false otherwise
24 Deletes a file on exit from the Hadoop file system. @param f Path to the file @return true if deletion was successful, false otherwise
25 Deletes files marked for deletion on exit. @param none
26 Checks if the given file is a checksum file. @param file Path to the file to check
27 Checks if a given file has a checksum extension. @param file Path to the file
28 Adjusts block locations to match specified range within HAR file. @param locations array of BlockLocation objects @param start beginning offset of desired range @param len length of desired range @param fileOffsetInHar offset of HAR file within distributed file system @return updated array of BlockLocation objects
29 Compares two file statuses based on their paths. @param o another FileStatus object to compare with
30 Converts an array of FileStatus objects to Path objects. @param stats Array of file statuses @return Array of corresponding Paths or null if input is null
31 Resolves the intermediate path of a file. @param f Path to resolve @return Path object representing the resolved location
32 Retrieves file replication factor based on given path. @param src file system path to query @return Replication level (short integer)
33 Retrieves file block size from its status. @param f Path to the file
34 Retrieves default replication factor based on file system specifics. @param path file path (currently unused)
35 Removes thread-local statistics data and merges with root data. @param data StatisticsData to remove
36 Validates positioned read arguments to prevent incorrect file system access. @param position byte offset in the stream @param buffer destination buffer for data @param offset starting index within buffer for writing @param length number of bytes to be written into buffer
37 Validates the provided multipart upload ID. @param uploadId byte array containing the upload identifier
38 Validates the provided part handles for a multipart upload. @param partHandles map of part indices to PartHandle objects
39 Validates path and capability parameters. @param path filesystem path @return standardized capability string or null if invalid
40 Initializes IrqHandler with given name and Interrupted handler. @param name unique identifier for the signal handler @param handler Interrupted object to be managed by this handler
41 Partitions the given list into smaller sub-lists of specified page size. @param originalList input list to be partitioned @param pageSize number of elements per sub-list @return a list of sub-lists or empty list if invalid input
42 Initializes JsonSerialization with given class type and serialization options. @param classType Class to serialize/deserialize @param failOnUnknownProperties whether to throw on unknown properties @param pretty whether to format output with indentation
43 Initializes StorageStatistics object with given name, scheme, and input/output statistics. @param name unique identifier for storage statistics object @param scheme storage scheme (e.g., file system) @param ioStatistics input/output statistics to manage
44 Retrieves a map of storage schemes to associated Statistics objects. @return Map of scheme to Statistics, or an empty map if none found
45 Creates a new output stream for writing to the specified file path. @param f file path to write to
46 Creates a non-recursive file stream with specified permissions. @param f file path
47 Constructs PathIOException with affected file path and error message. @param path Hadoop file system path experiencing access denial
48 Constructs PathIOException with affected file path and error message. @param path Hadoop file system path experiencing issues
49 Constructs PathIOException with affected file path and default error message. @param path Hadoop file system path experiencing issues
50 Constructs PathIOException with affected file path and default error message. @param path Hadoop file system path experiencing issues
51 Constructs PathIOException with affected file path and default error message. @param path Hadoop file system path experiencing issues
52 Constructs PathIOException with affected file path and error message. @param path Hadoop file system path experiencing issues @param message detailed description of the problem
53 Returns this builder instance to enable method chaining.
54 Legacy permission bits conversion (deprecated). @return Short integer representation of permissions
55 Converts permission bits to an octal integer representation.
56 Interns multiple strings in an array using weak interning. @param strings input string array @return modified string array with interned strings
57 Checks if the represented file system object is a directory.
58 Checks if the represented file system object is a directory. @param f Path to the file system object
59 Checks if the represented file system path is recursable. @param item PathData object containing file system information
60 Retrieves ACL entries based on recursion flag. @param item PathData object representing a file system object
61 Checks if the represented file system object is a directory. @param f Path to the file system object @return true if directory, false otherwise or on FileNotFoundException
62 Applies new permission mode to the specified FileStatus object. @param file the file status for which permissions are updated
63 Checks if the represented file system object is a regular file. @return true if not directory or symbolic link, false otherwise
64 Retrieves the symbolic link target. @return Path object representing the linked file or null if not a symlink
65 Retrieves and caches the total size of the represented file or directory. @throws IOException on I/O errors
66 Retrieves file length from its status. @param f file path @return total size of the represented file or directory
67 Retrieves block storage policy for a given file system path. @param src file system path @return BlockStoragePolicySpi object or throws IOException if an error occurs
68 Sets extended attributes on a file system path. @param path file system path
69 Constructs a PathIOException with the specified file path and root cause. @param path affected Hadoop file system path @param cause underlying exception that triggered this IOException
70 Seeks to specified position in the file stream, triggering block read if compressed. @param position target file offset
71 Reads the record length from the input stream, handling synchronization and checksum verification. @throws IOException if file is corrupt or end of file reached
72 Retrieves current file stream position. @return Position as a long integer
73 Registers an expression class with the factory. @param expressionClass the Class of the Expression to register
74 Registers commands using a registrar class. @param registrarClass Class containing registerCommands method
75 Reads data from the underlying stream at a specified position into a given buffer. Corrects length to account for remaining bytes in the HAR file. @param pos target read position @param b output byte array @param offset starting index in the buffer for writing data @param length maximum number of bytes to read into the buffer @return actual number of bytes read, or -1 on end-of-stream
76 Reads fully into a specified buffer at the given file system position. @param pos current file system position @param b target byte array for data storage @param offset starting index within the buffer @param length number of bytes to read from the stream
77 Expands the leftmost pattern in a file pattern string. @param filePatternWithOffset input string with offset @return List of fully resolved file paths or null if not found
78 Lists file statuses for the given Path as a single batch. @param f Path to list file statuses for @param token Optional pagination token (may be null) @return DirectoryEntries object containing file statuses
79 Encodes a byte array into a string representation using specified encoding format. @param value the byte array to encode @param encoding the encoding format (HEX, BASE64, or UTF-8)
80 Filters and adds file statuses to the provided list based on a custom filter. @param results list of filtered FileStatus objects @param f Path object representing the location @param filter PathFilter object for filtering files
81 Constructs a MetricsTag object with given metrics information and value. @param info MetricsInfo object containing tag metadata @param value current metric value as a string
82 Initializes an AbstractMetric instance with provided MetricsInfo. @param info metric metadata to validate and store
83 Obtains a delegationToken for the given URL and user. @param url the web service URL @param token existing token to reuse or renew @param renewer principal that can renew the token @param doAsUser user on whose behalf the token is issued @return obtained delegationToken or null if failed
84 Renews a delegation token. @param url the URL to renew the token for @param token the Token object containing the delegationToken @param doAsUser the user acting on behalf of whom the token is being renewed @return the new delegationToken value
85 Cancels a delegation token. @param url the URL to cancel @param token delegate token object @param doAsUser user on whose behalf the operation is performed
86 Initializes a ValueQueue instance with specified parameters. @param numValues total number of values to be managed @param lowWatermark threshold value for queue refilling (0 <= lowWatermark <= 1) @param expiry time-to-live in milliseconds for cached key queues @param numFillerThreads number of threads for filling queued values @param policy synchronization generation policy @param refiller queue refiller instance for managing queued values
87 Validates that an object is not null. @param obj the object to validate
88 Adds or updates storage statistics by provider. @param name unique identifier for the statistics @param provider supplier of the statistics to store @return existing or newly created StorageStatistics object
89 Resets all stored storage statistics to their default values.
90 Closes resources and performs cleanup after data upload.
91 Copies a file from src to dst without buffering. @param src source file @param dst destination file
92 Closes a given Closeable resource with logging. @param stream the Closeable resource to be closed
93 Closes multiple stream resources with logging. @param streams Array of Closeable streams to be closed
94 Performs disk I/O check without native I/O on the specified file. @param file File object to be checked
95 Synchronizes and flushes data to disk.
96 Closes the tracked operation and updates statistics. @param failed whether the operation failed
97 Updates the buffer's count to a specified value within its current capacity. @param newCount new count value (must be non-negative and not exceed current buffer length) @return previous count value
98 Retrieves the address of a server connector at the specified index. @param index index of the connector to fetch
99 Initializes GcTimeMonitor with specified parameters. @param observationWindowMs time window for GC monitoring @param sleepIntervalMs interval between measurements @param maxGcTimePercentage threshold for alerts @param alertHandler handler for exceeding thresholds
100 Extracts the raw path from an HTTP request URI. @param request HttpServletRequest object @param servletName name of the servlet to extract path for @return raw path or null if not found
101 Compares this file status with another object for equality. @param o the object to compare with @return true if both have the same path, false otherwise
102 Calculates hash code based on file path. @return Hash code value
103 Sets both sample count and total sum simultaneously. @param sampleCount non-negative integer representing sample count @param newSum new sum value
104 Merges another MeanStatistic instance into this one, adding its samples and sum. @param other the MeanStatistic to merge
105 Formats map of I/O statistics as a string, appending entries with specified separator. @param sb StringBuilder to append formatted string @param type descriptive label for the statistics type @param map Map of statistical entries (key-value pairs) @param separator character to separate individual entries in the output string
106 Formats IO statistics entry as string. @param entry key-value pair containing statistical data
107 Returns a pre-configured duration tracker instance with customizable key and count. @param key unique identifier for tracked operation @param count associated count value
108 Converts a map entry to a LongStatistic object. @param e a key-value pair containing the statistic's identifier and value
109 Initializes the map with passthrough function. @param passthroughFn function to pass through any serializable object unchanged
110 Adds a counter function to the statistics with the specified key. @param key unique identifier for the function
111 Registers a gauge function evaluator with the specified key and evaluation logic. @param key unique identifier for the gauge function @param eval function to be evaluated and associated with the key
112 Adds a minimum statistic function to the map with the specified key. @param key unique identifier for the function
113 Adds a function to track the maximum value of a dynamic statistic. @param key unique identifier for the statistic @param eval function to evaluate and return the maximum value
114 Adds a function to calculate and store the mean statistic. @param key unique identifier for the mean statistic @param eval function to compute the mean statistic value
115 Wraps existing IOStatistics instance with this binding. @param statistics underlying IO statistics to be managed
116 Returns an empty instance of IOStatisticsStore. @return singleton instance of EmptyIOStatisticsStore
117 Returns an instance of empty I/O statistics.
118 Retrieves counter reference by its identifier. @param key unique counter identifier
119 Retrieves maximum reference value by its identifier. @param key unique statistic identifier
120 Retrieves minimum reference statistic value from store by its identifier. @param key unique statistic identifier
121 Retrieves gauge reference by key. @param key unique gauge identifier
122 Retrieves mean statistic value by its identifier from the store. @param key unique statistic identifier
123 Returns the first duration in its default format.
124 Sets the wrapped IOStatistics object, overwriting any existing one. @param wrapped new IOStatistics instance
125 Retrieves the currently built IO statistics instance. @return Active IOStatistics object or throws exception if not built
126 Verifies that the flag set is mutable.
127 Converts the block data to a byte array. @throws IOException if an I/O error occurs
128 Binds the IrqHandler instance to a specific signal.
129 Decrement resource reference count and check for safe closure. @return true if successfully marked as closed, false otherwise
130 Creates a snapshot of the input map by copying its entries to a new map. @param source original map to copy from @param copyFn function to apply when copying values @return a new map containing copied entries
131 Tracks duration of an I/O operation and applies the result. @param factory Tracker factory (optional) @param statistic Name of the statistic to track @return Result of tracked operation or null if not found
132 Creates a paired duration tracker factory with two input sources. @param first local duration tracker factory @param second global duration tracker factory
133 Retrieves client backoff disconnected counter value. @return current client backoff disconnected counter value
134 Retrieves the count of slow RPC calls. @return The current value of slow RPC call counter
135 Retrieves RPC requeue calls metric value. @return current requeue calls count
136 Resets all collected I/O statistics and clears the context.
137 Initializes maps for counters, gauges, minimums, maximums, and mean statistics.
138 Checks if thread-level I/O statistics are enabled.
139 Initializes BuiltInGzipDecompressor with default state and CRC-32 checksum.
140 Updates the encryption settings and initializes the encryptor with a fresh IV.
141 Calculates adjusted buffer size based on cryptographic codec requirements. @param codec CryptoCodec object @param bufferSize initial buffer size @return adjusted buffer size
142 Creates a hard link to the specified source file. @param src source file @param dst target link name
143 Initializes MD5MD5CRC32GzipFileChecksum object with CRC parameters and MD5 hash. @param bytesPerCRC number of bytes per CRC value @param crcPerBlock CRC value for each block @param md5 MD5 hash object
144 Initializes an empty MD5MD5CRC32FileChecksum object.
145 Initializes MD5MD5CRC32FileChecksum object with CRC parameters and MD5 hash.
146 Compiles a glob pattern into a regular expression. @param glob the glob pattern to compile
147 Returns an iterator over file statuses in the given directory. @param p directory path to iterate over
148 Constructs shell path from provided File object. @param file input file @param makeCanonicalPath true to use canonical path, false for string representation
149 Extracts file permissions from a given mode. @param mode bitwise OR of permission flags (e.g. 7 for rwx)
150 Executes the shell command with managed input and output handling. @throws IOException if a null entry is found in the command string
151 Validates Windows command line length. @param commands array of shell commands to check
152 Builds a PowerShell script to terminate a process on a remote host. @param processName name of the process to be terminated @param host hostname where the process is running @return path to the generated PowerShell script file or null if failed
153 Returns size of current checksum type.
154 Calculates checksum size based on data size and algorithm. @param dataSize total data size
155 Converts Checksum object to byte stream. @param sum Checksum object @param checksumSize Size of the resulting byte array @return Byte array representation of the checksum; may be trimmed if size exceeds specified limit
156 Increments bytes read by specified amount in thread-specific statistics. @param newBytes additional bytes read
157 Increments thread-specific bytes written statistics. @param newBytes additional bytes written
158 Increments thread-specific read operations counter by specified amount. @param count number of read operations to add
159 Increments large read operations statistics by given count. @param count number of large reads to add
160 Increments thread-specific write operations count. @param count number of write operations to add
161 Increments erasure-coded bytes read statistics by specified amount. @param newBytes additional bytes read from erasure-coded data
162 Increments bytes read statistics based on distance category. @param distance remote location (0-4) or larger
163 Increments remote read time statistics by specified duration. @param durationMS time in milliseconds to add
164 Aggregates statistical data using the provided visitor. @param visitor instance of StatisticsAggregator to process data @return aggregated result or null if aggregation is not applicable
165 Initializes ContentSummary object from Builder parameters. @param builder quota usage configuration
166 Initializes default checksum options. @param type defaulted to DataChecksum.Type.DEFAULT @param size defaulted to -1 (no bytes per checksum)
167 Creates disabled checksum options with NULL type and invalid byte count.
168 Validates the specified CreateFlag enum set for file creation and appending. @param flag EnumSet containing valid CreateFlag options
169 Validates URI scheme matches a supported scheme. @param uri URI to check @param supportedScheme expected scheme
170 Constructs an exception with a detailed error message for an invalid file system path. @param path the offending Hadoop file system path
171 Constructs an exception with a detailed Hadoop-related error message. @param path invalid file system path @param reason additional context for the error
172 Returns the first non-null input from an array. @param inputs array of potential inputs
173 Returns the first non-null input from an array. @param inputs array of potentially null inputs
174 Validates input byte array buffers for encoding. @param buffers array of byte arrays to be encoded
175 Validates the output buffers for consistency with decoding requirements. @param buffers array of ByteBuffer objects to check
176 Validates output buffers by checking for null values and correct length. @param buffers array of byte arrays to validate
177 Validates input ByteBuffer arrays for integrity and consistency. @param buffers array of ByteBuffer objects
178 Stops a protocol proxy, closing it if possible. @param proxy the proxy object to stop
179 Combines default and user-defined checksum options. @param defaultOpt default checksum configuration @param userOpt user-specified checksum configuration (may override default) @param userBytesPerChecksum user-specified byte count (overrides other values)
180 Retrieves the default port number from the provided file system implementation. @param theFsImpl file system implementation @return default port number or DELEGATE_TO_FS_DEFAULT_PORT if not defined
181 Canonicalizes a URI by adding the default port if it's missing. @param uri input URI to canonicalize @return URI with default port set if necessary
182 Sets file replication factor. @param src file path @param replication new replication level (short value)
183 Disconnects from the FTP server and logs out. @param client connected FTPClient instance
184 Closes the underlying FSDataOutputStream and flushes any pending data.
185 Default constructor for ContentSummary object, deprecated and no-op.
186 Initializes ContentSummary object with storage metrics. @param length total file system length @param fileCount number of files @param directoryCount number of directories @param quota overall quota limit @param spaceConsumed actual space consumed @param spaceQuota space quota limit
187 Calculates delay until next token renewal.
188 Updates the token's renewal time based on the provided delay. @param delay time to add to the current system time
189 Updates the connection's last activity timestamp to the current system time.
190 Sleeps for at least the specified duration, ignoring thread interruptions. @param millis minimum sleep time in milliseconds
191 Retrieves the current system time in milliseconds using the Time class.
192 Awaits termination of all thread pools. @param milliseconds maximum time to wait in milliseconds @return true if all threads are terminated, false otherwise
193 Verifies checksums for data chunks and ensures matching CRC32 values. @param sumsBytes ByteBuffer containing checksum values @param sumsOffset offset of checksum values in sumsBytes @param data ByteBuffer to be verified @param dataOffset absolute position of data in file @param bytesPerSum number of bytes per checksum value @return original data if checksums match, or throws CompletionException otherwise
194 Opens a file stream based on server defaults for the specified path. @param f file path
195 Calculates length of checksum file based on file size and bytes per checksum. @param file Path to the file @param fileSize total size of the file
196 Retrieves file status for given path. @param p Path object representing the file
197 Registers file system permission-related commands with the Hadoop command-line interface. @param factory CommandFactory instance for registering commands
198 Registers command classes with Find instance. @param factory CommandFactory instance
199 Registers command classes with the specified factory. @param factory CommandFactory instance
200 Configures command-line option constraints and handling. @param min minimum number of required parameters @param max maximum allowed number of parameters @param possibleOpt optional command-line arguments to validate (nulls may indicate ignore unknown options)
201 Executes a CallableRaisingIOE operation and returns the result as a CompletableFuture. @param callable asynchronous operation to execute
202 Rejects unknown mandatory configuration keys. @param knownKeys collection of valid configuration keys @param extraErrorText additional error text to append
203 Retrieves enabled capabilities in the flag set. @return list of capability names
204 Builds the HTTP referrer header with dynamically evaluated attributes. @return constructed HTTP referrer header as a string, or an empty string if failed to build
205 Initializes the WeakReferenceMap with a value factory and optional lost reference handler. @param factory function to create new values @param referenceLost callback for when values are garbage collected (optional)
206 Checks if an OutputStream supports a specific capability. @param out OutputStream to check @param capability name of the capability to look for @return true if the stream supports this capability, false otherwise
207 Checks if an InputStream supports a specific capability. @param in input stream to check @param capability name of the capability to look for @return true if the input stream supports this capability, false otherwise
208 Shuts down the executor service with a configurable timeout. @param logger logging instance for status updates @param timeout maximum time to wait for shutdown (in specified unit) @param unit time unit for timeout value
209 Acquires a resource from the pool, blocking if necessary. @return acquired resource or null if not possible
210 Tries to acquire a resource from the pool without blocking.
211 Returns the current number of available resources in the pool. @return Number of unused resources
212 Initializes a SingleFilePerBlockCache instance with prefetching statistics, max block count, and duration tracker factory. @param prefetchingStatistics Prefetching statistics @param maxBlocksCount Maximum number of blocks allowed in the cache @param trackerFactory Duration tracker factory (optional, defaults to stub factory if null)
213 Initializes the SemaphoredDelegatingExecutor with a delegate executor service, permit count, fairness setting, and duration tracker factory. @param executorDelegatee ExecutorService instance to delegate task execution @param permitCount number of concurrent tasks allowed @param fair whether to use fair or unfair threading policy @param trackerFactory factory for creating DurationTrackers (optional)
214 Adds an entry to the cache's linked list head, acquiring write lock. @param entry Entry object containing block data
215 Sets the buffer's state to DONE, ensuring checksum consistency. @throws IllegalStateException if checksum mismatch is detected
216 Sets buffer size and returns this builder instance. @param bufSize new buffer size value
217 Returns the current instance of the builder.
218 Retrieves value associated with current thread. @return Value object or null if not found
219 Removes value associated with current thread. @return removed value or null if none exists
220 Sets a value for the current thread using a weak reference. @param newVal new value to associate with the current thread @return previous value associated with the current thread or null if not set
221 Merges a file range with the current collection, updating the end offset and appending the new range. @param otherOffset start of the external range @param otherEnd end of the external range @param other external FileRange object @param minSeek minimum seek distance required for merging @param maxSize maximum size increase allowed by merging @return true if merged successfully, false otherwise
222 Creates a bulk deletion operation with specified path. @param path root directory of files to delete
223 Registers And expression classes with specified names. @param factory ExpressionFactory instance
224 Registers expression classes with the specified factory for path data printing. @param factory ExpressionFactory instance
225 Registers expression classes with specified names for case-sensitive and case-insensitive file name pattern evaluation. @param factory ExpressionFactory instance to register expression classes
226 Initializes the Name class with case sensitivity setting. @param caseSensitive true for case-sensitive, false for case-insensitive
227 Retrieves a compression codec for the given file, based on its name and suffix. @param file Path object representing the file
228 Resolves property name based on provided SSL factory mode and template. @param mode SSL factory mode (e.g. CLIENT, SERVER) @param template input string with placeholders for mode @return formatted string with mode value inserted
229 Constructs a configuration suffix from the cipher suite name.
230 Combines the outcome of two operations by ANDing their pass status and descend flags. @param other Result object to combine with @return New Result object with combined status
231 Negates the operation outcome and returns a new Result object.
232 Creates a FindOptions object with specified configuration and streams.
233 Checks if an existing expression exists by name. @param expressionName unique identifier of the expression
234 Adds multiple child expressions to the current expression tree. @param exprs deque of Expression objects to be added @param count number of expressions to add
235 Adds multiple arguments to this BaseExpression's collection. @param args deque of new expression arguments @param count number of arguments to add
236 Converts a string to URI, handling Windows path normalization and quoting. @param pathString input string to convert @return URI object or throws IOException if invalid
237 Initializes the order comparator based on time or size sorting preferences. @param isOrderTime true if sorting by modification/access time, false otherwise @param isOrderSize true if sorting by file size, false otherwise
238 Checks if command has been deprecated by checking for replacement.
239 Retrieves command name, either from private field or user-provided value.
240 Sets the preservation of file attributes upon copying. @param preserve true to preserve timestamps, ownership and permissions, false otherwise
241 Initializes MetricsRecordBuilderImpl with parent collector, metrics info, and filters. @param parent the parent metrics collector @param info metrics information @param rf record filter @param mf metric filter @param acceptable flag for acceptable metrics
242 Initializes a new ChunkedArrayList instance with the specified chunk capacities. @param initialChunkCapacity minimum size for each chunk @param maxChunkSize maximum allowed size for each chunk
243 Calculates the pivot index among default ACL entries. @param aclBuilder list of ACL entries to search
244 Creates an empty file system snapshot. @param path source file path
245 Adds an optional command-line argument with a value. @param option name of the command-line option
246 Initializes TableBuilder with specified table headers. @param headers variable-length array of column header values
247 Determines if the table is empty. @return true if no data rows exist, false otherwise
248 Initializes a new Shell instance with specified execution interval. @param interval execution interval in milliseconds
249 Constructs a Token object with specified identifier, password, token kind, and service. @param identifier unique token identifier @param password associated password bytes @param kind token type @param service service the token belongs to
250 Initializes a new, empty token instance.
251 Initializes a new Globber instance with the specified file context, path pattern, filter, and symlink resolution behavior. @param fc FileContext instance @param pathPattern Path pattern to match @param filter PathFilter for filtering results @param resolveSymlinks Whether to resolve symbolic links
252 Generates a detailed error message based on the affected path, operation, target path, and cause.
253 Handles SASL connection failure by retrying authentication or throwing an exception. @param currRetries current retries @param maxRetries maximum retries @param ex IOException causing the failure @param rand Random instance for backoff calculation @param ugi UserGroupInformation instance for re-authentication
254 Checks if the provided file system is a view file system. @param fileSystem FileSystem object to check @return true if it's a view file system, false otherwise
255 Sets storage quotas (namespace and storage space) for a given path. @throws IOException if an error occurs during quota configuration
256 Sets storage quota by type. Currently unsupported. @throws UnsupportedOperationException
257 Creates a multipart uploader, currently unsupported. @param basePath base directory for the upload
258 Lists located file statuses for the given path. @param f Path to list file statuses for
259 Lists located file statuses for the given path. @param f Path to list file statuses for
260 Retrieves checksum of a file with default size. @param f Path to the file
261 Sets extended file attribute (xattr) with default flags. @param path file system path @param name xattr name @param value xattr value bytes
262 Opens a file with specified options. @param path Hadoop Path object @param parameters OpenFileParameters object containing buffer size and other settings @return FSDataInputStream object wrapped in CompletableFuture
263 Opens a file with specified options. @param path file location @param parameters OpenFileParameters object containing buffer size and other options @return FSDataInputStream wrapped in CompletableFuture
264 Opens a file with specified options. @param path file system path @param parameters OpenFileParameters object containing buffer size and other settings @return FSDataInputStream object wrapped in CompletableFuture or null on failure
265 Opens a file stream with specified buffer size and options. @param pathHandle PathHandle to the file @param parameters OpenFileParameters containing mandatory keys, buffer size, and other options @return CompletableFuture<FSDataInputStream> representing the opened file stream
266 Retrieves all storage policies supported by this file system. @throws IOException if an error occurs
267 Initializes and mounts file systems from provided mount points. @param mountPoints list of file system mounts with target and source paths @return map of mounted file systems keyed by source path
268 Builds ResolveResult for a regex-based mount point. @param resultKind ResultKind indicating nature of the result @param resolvedPathStr Resolved path within the filesystem @param targetOfResolvedPathStr Target file system for the resolved path @return ResolveResult object or null if initialization fails
269 Returns an instance of ChildFsGetter initialized with the URI scheme.
270 Constructs an INodeLink with the specified file system path and target merge FS. @param pathToNode absolute path to the node @param aUgi user group information @param targetMergeFs target file system for merging @param aTargetDirLinkList list of directory links in the target FS
271 Initializes an INodeLink with a specified filesystem path, user group information, and target directory link. @param pathToNode absolute path to the node @param aUgi UserGroupInformation object @param createFileSystemMethod Function to initialize target file system @param aTargetDirLink target directory link as URI string
272 Replaces regex capture groups in a destination path with actual values. @param parsedDestPath transformed destination path @param srcMatcher source matcher object @param regexGroupNameOrIndexStr name or index of the desired group @param groupRepresentationStrSetInDest set of variable names to replace @return updated destination path with replaced capture groups
273 Decrypts input data using the provided decryptor. @param decryptor decryption object @param inBuffer input buffer containing encrypted data @param outBuffer output buffer for decrypted data @param padding additional bytes to consider when mapping plain and cipher text
274 Validates the encryption context is initialized.
275 Checks if the parent ZNode exists. @return true if the parent ZNode exists, false otherwise
276 Constructs the config view FS prefix using default mount table name. @return configuration prefix string
277 Deserializes interceptor from a string representation. @param serializedString serialized interceptor configuration @return deserialized RegexMountPointResolvedDstPathReplaceInterceptor object or null if malformed
278 Returns the readable byte channel for socket input stream data access. @return SocketInputStream instance wrapped as ReadableByteChannel
279 Calculates total checksum file length based on input data size and bytes per sum. @param file Path to the file being checksummed @param fileSize Input data size in bytes @return Total checksum file length in bytes
280 Fetches the filesystem identifier for the specified directory. @return filesystem string (Windows: drive letter, Unix-like: filesystem path)
281 Retrieves the filesystem mount point for a given directory. @throws IOException if the command execution or output parsing fails
282 Calculates percentage of disk usage. @return Percentage of used space out of total capacity
283 Initializes FSInputChecker with file path and verification settings. @param file Hadoop Path object for the input file @param verifyChecksum whether to perform checksum verifications @param sum optional checksum value (null if not verifying) @param chunkSize maximum data chunk size for reading @param checksumSize size of each checksum element (assumed 32-bit)
284 Checks if the given input stream supports ByteBuffer reading. @param stream input stream to check
285 Initializes audit context with current thread ID for thread 1. @param PARAM_THREAD1 unique identifier for the first thread
286 Sets entry point command for global context based on provided tool. @param tool Object representing the current tool or application
287 Converts an integer to its string representation. @param key configuration key @param value integer value to convert
288 Converts a float value to its string representation using long conversion. @param key configuration key @param value float value to convert
289 Converts a long value to its string representation with optional key. @param key configuration key @param value long value to convert
290 Converts double to string representation using long conversion. @param key configuration key @param value double value to convert
291 Converts an integer to its string representation. @param key configuration key @param value integer value to convert
292 Converts a float value to its string representation using long conversion. @param key configuration key @param value float value to convert
293 Converts a long value to its string representation using mustLong. @param key configuration key @param value long value to convert
294 Converts double value to long string representation with default handling. @param key configuration key @param value double value to convert
295 Retrieves the row at specified index and formats its content. @param idx row index @return formatted row content as an array of strings or null if not found
296 Starts local output by delegating to Hadoop file system. @param fsOutputFile HDFS output file path @param tmpLocalFile temporary local file path to use as output
297 Calculates the effective permission for a given AclEntry and FsPermission. @param entry AclEntry object representing the ACL entry to evaluate @param permArg FsPermission object containing additional permissions to consider @return The combined FsAction representing the effective permission
298 Initializes a new immutable PermissionStatus object with specified user, group, and file system permissions. @param user unique username @param group unique group name @param permission file system permissions
299 Parses ACL entry from string representation. @param aclStr input string containing ACL entry details @param includePermission whether to include permission in the parsed entry @return fully constructed AclEntry object or null if invalid input
300 Returns a stable string representation of this ACL entry. @return formatted string containing entry type, name, and permissions
301 Splits a string into an array of substrings using the specified delimiter. @param str input string to split @param delim delimiter character or characters @return Array of strings resulting from the split operation, or null if empty
302 Returns a collection of substrings from the input string, using comma as delimiter. @param str input string to split
303 Parses file permission string using either normal or octal pattern. @param modeStr permission string to parse @param symbolic Pattern for normal permissions @param octal Pattern for octal permissions
304 Closes the DiskBlock based on its current state. @throws IOException if an I/O error occurs
305 Verifies if ByteBufferInputStream is currently open. @throws FSException if stream has been closed
306 Transitions the data block to a new destination state. @param current current state of the block @param next desired destination state
307 Writes data from the given buffer to the storage system. @param buffer data to be written @param offset starting position in the buffer @param length number of bytes to write @return 0 on success, throws IOException otherwise
308 Flushes data block in writing state.
309 Sets an attribute to the HTTP referrer header. @param key unique attribute identifier @param value attribute value or null for empty values
310 Extracts query parameters from the given HTTP referrer header. @param header input HTTP referrer header string @return Map of extracted query parameter names and values
311 Returns total data size of the block buffer. @return total data size in bytes or used capacity if no data exists
312 Resolves a file path to an absolute path within the current file system context. @param f input file path
313 Throws unsupported operation exception for 'defaultFS' file system operation.
314 Prints file system statistics for all registered systems.
315 Retrieves statistics for the specified file system URI. @param uri Hadoop-compatible URI to fetch statistics for @return Statistics object or null if not found
316 Creates an MultipartUploader instance, currently unsupported. @param basePath base path for multipart upload
317 Retrieves a context-specific allocator instance or creates a new one if not found. @param contextCfgItemName unique context configuration item name
318 Retrieves the current cached write position. @return The cached write position
319 Flushes and synchronizes data to the underlying storage system. @throws IOException if an I/O error occurs
320 Extracts trimmed strings from input string, removes empty strings, and returns a collection. @param str input string to process
321 Initializes the listener with default logging mechanism.
322 Creates a ServiceStateException with the specified message and no cause. @param message service state exception message
323 Constructs a ServiceStateException with specified exit code, message, and cause. @param exitCode service state exception exit code @param message service state exception message @param cause underlying throwable instance (may provide exit code)
324 Converts a throwable instance into a runtime exception. @param text error message @param fault underlying throwable instance @return RuntimeException or ServiceStateException with the specified message and cause
325 Converts a Throwable instance to a RuntimeException or ServiceStateException. @param fault the throwable instance to convert
326 Initializes a new ServiceStateModel instance with specified service name and NOTINITED state. @param name unique service identifier
327 Validates state transition from current to proposed state. @param current the current service state @param proposed the proposed service state @return true if valid transition, false otherwise
328 Returns string representation of current service state, including name and status.
329 Initializes the HadoopUncaughtExceptionHandler with a default custom handler.
330 Handles system signals by incrementing the signal count, creating an InterruptData instance, and notifying the registered handler. @param s Signal object containing interrupt details
331 Retrieves the registered interrupt handler by name. @param signalName unique identifier of the signal handler @return IrqHandler object or null if not found
332 Constructs an ExitException with a specified exit status and underlying cause. @param status the process exit code @param cause the exception's root cause
333 Constructs an ExitException with a custom exit status and error message. @param exitCode process exit code @param message error description
334 Constructs a ServiceLaunchException with custom exit status and error message. @param exitCode process exit code @param format error description format string @param args variable arguments for String.format()
335 Constructs an ExitException with specified exit status, error message, and underlying cause. @param exitCode unique exit code @param cause root cause of the exception @param format error message format string @param args variable arguments for formatted error message
336 Runs the service shutdown hook. @see #shutdown()
337 Initializes a new ServiceLauncher instance with specified class name. @param serviceClassName fully qualified name of the service implementation class
338 Logs and records an exception raised by a service, including its exit code and nested causes. @param exitException the ExitException instance to process
339 Initializes service launch options from configuration file and arguments.
340 Loads and instantiates configuration classes. @return number of successfully created Configuration class instances
341 Registers a global listener for service state changes. @param l ServiceStateChangeListener to be added
342 Unregisters a global ServiceStateChangeListener. @param l listener to be removed
343 Resets global service state change listeners.
344 Notifies all registered service state change listeners of a state change.
345 Initializes service with provided configuration. @param conf Configuration object to be applied
346 Adds a service instance to the managed collection if it's valid. @param object Object to check; must be a Service instance
347 Stops a service instance quietly, logging any exceptions encountered. @param log Log object for logging warnings @param service Service instance to terminate @return Exception if termination fails, or null on success
348 Stops a service instance quietly, catching and logging any exceptions encountered. @param log Logger instance for exception logging @param service Service instance to terminate @return The caught exception or null if successful
349 Checks if InputStream is fully readable and positioned. @param in Input stream to check @return true if fully readable and positioned, false otherwise
350 Checks if DynamicWrappedIO has been initialized. @return true if initialized, false otherwise
351 Converts an object of type T to its JSON representation as a string. @param instance the object to be serialized
352 Converts checked function into unchecked version. @param fun Checked function that may raise IOExceptions
353 Serializes an object to JSON and then deserializes it back to the same type. @param instance object to be serialized and then deserialized
354 Converts JSON byte array to object of type T. @param bytes JSON data in byte format
355 Copies UTF-8 encoded string from another UTF8 object. @param utf8 source UTF8 object
356 Writes a UTF-8 encoded string to the output stream. @param out output stream @param s input string (truncated if too long)
357 Skips data in UTF-8 encoded format by reading an unsigned short for length and then skipping that many bytes. @param in input stream
358 Seeks to a specific position within the file. @param n target offset
359 Retrieves a Writable object from the file based on a given offset and existing value. @param n offset to seek in the file @param value existing Writable object used for retrieval
360 Initializes OutputBuffer instance from an empty Buffer object.
361 Retrieves stored data from internal buffer.
362 Retrieves total length of stored data in bytes.
363 Resets internal buffer to its initial empty state.
364 Compares two WritableComparable objects. @param a first object to compare @param b second object to compare
365 Compares two byte arrays lexicographically. @param b1 first byte array @param b2 second byte array @return comparison result (-1, 0, or 1)
366 Computes a hash code from the specified byte array. @param bytes input byte array @param length number of bytes to include in the hash calculation
367 Reads and converts an integer from a byte array to a float value. @param bytes input byte array @param start offset to read from @return the converted float value
368 Reads a long integer from a byte array. @param bytes input byte array @param start offset to read from @return the read long integer value
369 Reads a varint integer value from the given byte array, starting at the specified position. @param bytes input byte array @param start starting index in the byte array @return the read int value or throws IOException if not enough bytes are available
370 Initializes BytesWritable with provided byte array and length. @param bytes raw byte data
371 Retrieves the underlying byte array (DEPRECATED, use getBytes() instead).
372 Returns the current size of the encapsulated byte array. @deprecated Use getLength() instead
373 Sets the allocated capacity of the underlying byte array. @param capacity new capacity value
374 Returns the number of buffers in the tree, filtered by direct/regular type. @param direct true for direct buffers, false for regular buffers
375 Submits a readahead request to the pool with optimized parameters. @param identifier unique request identifier @param fd file descriptor @param curPos current position in stream @param readaheadLength length of data to preload @param maxOffsetToRead maximum offset to read from @param lastReadahead previously submitted ReadaheadRequest object or null @return ReadaheadRequest object representing the submitted request or previous one if not changed
376 Appends key-value pair with absent value to SequenceFile. @param key unique identifier
377 Advances reader to next entry and returns true if successful. @param key WritableComparable object or null for default behavior
378 Retrieves the current key value associated with the data being read. @return The underlying mutable long integer value of the key.
379 Checks file/directory access permissions on Windows. @param path path to check @param desiredAccess desired access right (e.g. READ_ONLY)
380 Checks if native POSIX code is available. @return true if native code and PMDK support are loaded, false otherwise
381 Checks if native code and library are fully loaded. @return true if both native code and library are available, false otherwise
382 Checks availability of native implementation based on system architecture. @return true if native code is available, false otherwise
383 Unmaps a mapped file buffer. @param buffer MappedByteBuffer object to be unmapped
384 Frees a database ByteBuffer, optionally using unmap if supported. @param buffer The ByteBuffer to be freed
385 Writes data from input stream to buffer. @param in input stream containing data @param length length of data to write
386 Initializes EnumSetWritable with an EnumSet and element type. @param value input EnumSet @param elementType Class of elements in the EnumSet
387 Initializes DataInputBuffer from an empty Buffer object.
388 Resets buffer with new byte array and specified length. @param input byte array to store data @param length number of bytes to read from input array
389 Resets the data input buffer with new binary data. @param input byte array to store data @param start starting index of data in input array @param length number of bytes to read from input array
390 Retrieves the current position in the byte array buffer.
391 Returns the current length of the managed byte array.
392 Initializes ECSchema with configuration options from the provided map. @param allOptions map containing schema configurations
393 Initializes ECSchema with codec name and unit counts. @param codecName unique codec identifier @param numDataUnits number of data units @param numParityUnits number of parity units
394 Calculates the required number of data blocks based on the erasure coding schema. @return Number of data units in the schema
395 Calculates the required number of parity blocks based on the schema. @return The calculated number of parity units
396 Retrieves registered RawErasureCoderFactory instance by codec and name. @param codecName unique identifier for the coder @param coderName name of the coder to retrieve @return RawErasureCoderFactory object or null if not found
397 Creates an ECBlockGroup instance with provided data and parity blocks. @param dataBlocks array of data blocks @param parityBlocks array of parity blocks
398 Counts the total number of erased blocks within the group. @return Number of erased data and parity blocks
399 Counts the number of erased blocks in a given array. @param inputBlocks array of ECBlock objects @return total count of erased blocks
400 Converts an array of ECChunks to a corresponding array of ByteBuffer objects. @param chunks array of ECChunk objects @return array of ByteBuffer objects or null if input contains null values
401 Retrieves the array of erased blocks from a given EC block group. @param blockGroup ECBlockGroup object containing encoded data @return Array of ECBlock objects representing erased blocks or null if none found
402 Assembles an array of EC blocks from a block group. @param blockGroup the block group to extract blocks from @return array of EC blocks containing data and parity units
403 Performs bitwise XOR operation on two field elements. @param x and y finite field values
404 Multiplies two elements in the finite field. @param x first operand @param y second operand
405 Divides two field elements using a precomputed table. @param x dividend @param y divisor (must be non-zero)
406 Computes the power of a field element within the GaloisField. @param x field element to be raised @param n exponent value @return result of the power operation
407 Dumps ECChunk contents to the console as a hexadecimal string. @param chunk ECChunk object to print
408 Determines if input changes are allowed based on coding options. @return flag indicating whether input changes are permitted
409 Returns flag indicating whether input changes are allowed.
410 Enables verbose output during dump operations. @return true if verbose dumping is allowed
411 Enables verbose output during dump operations. @return Whether verbose output is enabled
412 Resets and retrieves a ByteBuffer to specified length. @param buffer the ByteBuffer to reset @param len the desired length of the ByteBuffer
413 Resets the specified buffer segment with an empty chunk of matching length. @param buffer existing data buffer @param offset starting position for replacement @param len length of segment to reset @return modified buffer with replaced segment
414 Converts the current encoding state to a ByteArrayEncodingState. @return ByteArrayEncodingState object representing the converted state
415 Converts the state into a ByteBuffer-based format. @return A new ByteBufferEncodingState object
416 Converts the current state to a ByteBufferDecodingState object. @return A new ByteBufferDecodingState instance with cloned input buffers and allocated output buffers
417 Converts the current decoding state to a byte array-based state. @return ByteArrayDecodingState object
418 Generates Cauchy matrix, initializing lower triangular portion with inverse differences. @param a byte array to store the matrix @param m number of rows in the matrix @param k number of columns in the first part of the matrix (identity)
419 Computes the inverse of a square matrix within GF(2^8). @param inMatrix input matrix to invert @param outMatrix output matrix containing the inverted result @param n size of the square matrix (number of rows/columns)
420 Encodes data using Reed-Solomon encoding with provided GF tables. @param gfTables precomputed Galois field multiplication tables @param dataLen length of the data to be encoded (in bytes) @param inputs input byte arrays for each output stream @param inputOffsets starting offsets for each input stream in bytes @param outputs output byte arrays for each stream @param outputOffsets starting offsets for each output stream in bytes
421 Performs Reed-Solomon encoding on the provided data. @param gfTables precomputed Galois field multiplication tables @param inputs input ByteBuffer arrays for each output @param outputs output ByteBuffer array to store encoded data
422 Retrieves a singleton instance of the GaloisField with specified field size and primitive polynomial. @param fieldSize unique identifier for the finite field @param primitivePolynomial defining polynomial of the field
423 Solves a Vandermonde system using precomputed tables. @param x input coefficients @param y output values (modified in-place)
424 Initializes an empty ECBlock with default parity and erased status.
425 Updates the reported bytes read from compressed stream. @param count number of bytes processed
426 Reads and returns a single byte from the compressed input stream. @param inStream compressed InputStream to read from
427 Initializes Huffman decoding tables for each group. @param nGroups number of groups
428 Performs quicksort on the compressed data within the given range using a stack-based approach. @param dataShadow shadowed instance of Data @param loSt start index of range @param hiSt end index of range @param dSt depth value for sorting
429 Returns the total bytes written during decompression. @throws NullPointerException if stream is null or invalid
430 Retrieves the number of bytes read from the decompressed stream.
431 Calculates remaining decompressed data. @return total bytes of decompressed data
432 Resets decompression state and initializes buffers.
433 Initializes Bzip2Compressor with default compression parameters.
434 Returns the number of bytes written during compression. @return total bytes written
435 Returns the total bytes read from input stream. @return Total byte count or -1 if not initialized
436 Initializes CompressionOutputStream with a given OutputStream. @param out underlying output stream to compress data into
437 Initializes the decompressor with a default direct buffer size.
438 Sets input data from a byte array. @param b compressed data @param off starting offset in bytes @param len length of data in bytes
439 Determines whether more input is needed for decompression. @return true if all user-input has been consumed, false otherwise
440 Decompresses data from the given byte array using Snappy algorithm. @param b input byte array @param off offset in the byte array to decompress from @param len maximum number of bytes to decompress @return actual number of decompressed bytes or 0 if no more input needed
441 Initializes SnappyCompressor with default direct buffer size.
442 Compresses input data using Snappy algorithm. @param b input byte array @param off starting offset in the input array @param len number of bytes to compress @return number of compressed bytes written or 0 if no compression occurred
443 Reinitializes SnappyCompressor with new configuration.
444 Initializes DecompressorStream with an input stream. @param in underlying input stream to read from
445 Calculates the remaining bytes to be decompressed from the stream. @throws NullPointerException if stream is not properly initialized
446 Resets the decompressor's state and initializes buffers.
447 Returns the total number of bytes written to the output stream. @return Total bytes written
448 Returns the number of bytes read from the input stream. @return total bytes read
449 Initializes Lz4Decompressor with default direct buffer size.
450 Sets input data for LZ4 decompression. @param b compressed byte array @param off offset into the array (0 <= off <= b.length - len) @param len length of data to decompress (len > 0)
451 Determines whether the decompressor requires additional input. @return true if no more input is needed, false otherwise
452 Decompresses LZ4-compressed data into a byte array. @param b target buffer @param off starting offset in the buffer @param len number of bytes to decompress @return actual number of decompressed bytes or 0 if empty
453 Initializes Lz4Compressor with direct buffer size and compression mode (fast). @param directBufferSize initial direct buffer size
454 Compresses input data using LZ4 algorithm. @param b input byte array @param off starting offset in the array @param len number of bytes to compress @return compressed buffer size or 0 if empty
455 Reinitializes the compressor's state and buffers. @param conf configuration object (not used)
456 Retrieves compression codec by name. @param codecName unique codec identifier @return CompressionCodec object or null if not found
457 Retrieves the lease count for a given compressor type. @param codec CompressionCodec instance @return current lease count for the specified compressor type
458 Returns the lease count for a given decompression codec. @param codec CompressionCodec instance
459 Returns the compressor type based on native Zlib availability. @param conf Hadoop Configuration object
460 Returns the type of Zlib decompressor based on native library availability. @param conf Hadoop Configuration object
461 Loads and initializes the native Zlib library. @VisibleForTesting
462 Reinitializes the compressor with a new Hadoop Configuration, updating compression level and strategy. @param conf Hadoop configuration object
463 Initializes ZlibCompressor with specified compression level, strategy, and header. @param level Compression level @param strategy Compression strategy @param header Compression header containing window bits value @param directBufferSize Direct buffer size for compressed data
464 Retrieves the total bytes written during compression. @return Total bytes written, or -1 if not initialized
465 Returns total bytes read from input stream. @return Total byte count
466 Initializes ZlibDecompressor with compression header and direct buffer size. @param header CompressionHeader containing zlib configuration @param directBufferSize Size of direct buffers for compressed and uncompressed data
467 Returns total bytes written during decompression. @return Total bytes written
468 Retrieves the number of bytes read from the compressed stream. @return total bytes read
469 Calculates remaining decompressed data length. @return Total length of decompressed data (user buffer + direct buffer)
470 Resets the decompressor's state and initializes buffers.
471 Verifies and processes the gzip trailer, ensuring data integrity and updating state.
472 Writes a variable-length int integer to the specified output stream. @param stream DataOutput stream @param i int value to write
473 Reads a variable-length long integer from the given stream. @param stream input stream to read from @return long value or throws IOException if an error occurs
474 Retrieves a ByteBuffer from the pool or allocates a new one if not available. @param direct true for direct buffers, false for heap buffers @param length buffer size @return allocated or retrieved ByteBuffer instance
475 Adds a ByteBuffer to the pool, using weak references for efficient memory usage. @param buffer ByteBuffer instance to store
476 Retrieves a Unicode code point at the specified position in UTF-8 encoded text. @param position index of desired character
477 Sets the UTF-8 encoded text data from a string, replacing malformed characters. @param string input text to set
478 Sets the UTF-8 encoded text data from a byte array. @param utf8 byte array containing text @param start starting index in the array @param len length of the text to set
479 Appends a UTF-8 encoded byte array to the internal buffer. @param utf8 byte array to append @param start starting index in utf8 @param len number of bytes to append
480 Reads UTF-8 encoded text data from a DataInput stream with known length. @param in input stream @param len expected length of the text
481 Decodes UTF-8 byte array into string. @param utf8 byte array containing encoded text
482 Decodes UTF-8 byte array into a string. @param utf8 byte array containing encoded text @param start starting index of the buffer to process @param length length of the buffer to process @param replace whether to replace or report decoding errors
483 Validates an entire UTF-8 encoded byte array. @throws MalformedInputException if invalid UTF-8 is detected
484 Registers a class with a unique byte identifier and serializes it. @param clazz Class object to register
485 Initializes the AbstractMapWritable with default class mappings.
486 Associates a Hadoop FileSystem object with this Writer instance. @param fs FileSystem instance to be associated
487 Constructs a new Key instance with specified byte array and weight. @param value byte array to store @param weight associated numerical weight
488 Cleans up linked segments and associated resources. Calls superclass close and determines whether to preserve input based on state. If not preserving, cleans up parent container.
489 Converts a generic List to an array with type safety. @param list input list to convert
490 Initializes an empty InputBuffer instance from a default Buffer object.
491 Resets buffer to specified range within given byte array. @param input byte array @param length length of the range
492 Resets buffer to specified range within given byte array. @param input byte array @param start starting index of the range @param length length of the range
493 Retrieves the current position within the input buffer.
494 Returns the current length of the input buffer.
495 Reads an MD5 digest from a DataInput stream.
496 Computes the MD5 hash of an InputStream. @param in the input stream to digest @return a newly created MD5Hash object containing the computed hash
497 Computes the MD5 hash of a byte array substring. @param data input byte array @param start starting index of the substring @param len length of the substring @return MD5Hash object representing the computed digest
498 Computes the MD5 hash of a multi-part byte array. @param dataArr byte arrays to be hashed @param start offset into each byte array @param len length of each byte array slice @return MD5Hash object representing the computed digest
499 Computes the hash code based on the first four bytes of the MD5 digest. @return integer representation of the hash code
500 Sets the MD5 digest from a hexadecimal string representation. @param hex the input hexadecimal string
501 Tries to instantiate a Protobuf message from the given class and input stream. @param protoClass Class containing the message type @param dataIn input stream containing serialized message data @return instantiated Message object, or throws IOException if malformed
502 Ensures file data is written to disk for the given file. @param fileToSync file or directory to sync
503 Initializes BooleanWritable with a boolean value. @param value initial boolean value to store
504 Configures retry policy based on remote exceptions. @param defaultPolicy default retry policy @param exceptionToPolicyMap map of exception types to custom retry policies
505 Checks if the queue is empty based on a specified time threshold. @param time time threshold in milliseconds @return true if queue is empty and time has elapsed, false otherwise
506 Retrieves the current time in milliseconds from a monotonic clock. @return The current time in milliseconds since an unspecified origin.
507 Creates a retry policy for exceptions not related to remote operations or SASL issues. @param defaultPolicy default retry policy @param exceptionToPolicyMap map of exceptions to their corresponding retry behaviors
508 Retrieves connection ID from the first proxy instance. @return unique ConnectionId or null if not found
509 Parses a comma-separated string into MultipleLinearRandomRetry object. @param s input string containing retry parameters @return MultipleLinearRandomRetry object or null on parse failure
510 Configures a retry policy based on the specific exception type. @param defaultPolicy default retry policy @param exceptionToPolicyMap map of exceptions to custom retry policies
511 Creates a single IOException from a list of aggregated exceptions. @param exceptions list of individual IOExceptions to aggregate
512 Returns the total count of block regions managed by this DataIndex instance.
513 Retrieves the name of the default compression algorithm. @return Name of the default compression algorithm
514 Reads a variable-length integer from the specified DataInput stream. @param in input data stream @return read int value or throws IOException for corrupted encoding
515 Wraps variable-length integer write with long implementation. @param out DataOutput stream @param n integer value to be written
516 Checks if TFile records are sorted based on the comparator.
517 Retrieves the total TFile entry count. @return The number of records in the file
518 Closes this Reader's underlying BCF (Binary Context File) resource.
519 Retrieves the comparator string used for sorting TFile records. @return Comparator name as a string
520 Initializes ByteArray instance from BytesWritable object. @param other input BytesWritable object
521 Creates ByteArray instance from byte array and its full length. @param buffer underlying byte array to wrap
522 Retrieves the index of a block region nearest to the specified offset. @param offset target offset @return index of nearest block region or -1 if not found
523 Finds the lower bound of a sorted TFile index for a given key. @param key target element to search for
524 Finds the upper bound of a sorted list using the provided comparator. @param key target value to search for
525 Compares this location with another based on block and record indices. @param other Location object to compare with
526 Copies and returns the key from a byte buffer starting at position 0. @param buf input buffer
527 Retrieves the stored value from a byte stream into the provided buffer. @param buf target byte array @param offset starting position in the buffer @return length of the read value or -1 if not found
528 Retrieves the raw size of this block region. @return raw size in bytes
529 Returns the compressed size of this block region.
530 Retrieves the starting position of the current block region. @return Offset value
531 Constructs an output stream from a DataOutput instance. @param out target DataOutput object
532 Compares two byte arrays lexicographically, comparing 8 bytes at a time. @param buffer1 first byte array @param offset1 offset into buffer1 @param length1 length of buffer1 @param buffer2 second byte array @param offset2 offset into buffer2 @param length2 length of buffer2 @return negative value if buffer1 is less than buffer2, positive value if buffer2 is less than buffer1, or 0 if buffers are equal
533 Initializes DataOutputBuffer with an empty byte buffer.
534 Retrieves the stored data from the buffer. @return The entire dynamic byte array
535 Retrieves the current length of the stored byte array in the buffer.
536 Writes a 32-bit integer to the buffer at the specified offset. @param v integer value to write @param offset current position in the buffer where writing starts
537 Calculates the distance between two nodes in the network topology. @param node1 Node object representing a source entity @param node2 Node object representing a target entity @return Distance value (0 for same node, Integer.MAX_VALUE for invalid input, or calculated path length)
538 Checks if a node is within a specified scope. @param node Node object representing a network entity @param scope hierarchical scope string
539 Extracts path components from a given Node object. @param node Node representing a network entity
540 Returns a path string representation of this NodeBase object.
541 Removes a node from the network topology, updating its associated rack and cluster map. @param node Node object to be removed
542 Retrieves all datanodes within a rack at the specified location. @param loc the network path to the rack
543 Retrieves a node from the network topology based on its location. @param loc unique node identifier within the network
544 Returns a string representation of the network topology, including number of racks and expected number of leaves. @return String containing network topology details
545 Checks if two nodes are on the same rack. @param node1 first node to compare @param node2 second node to compare @return true if both nodes share the same rack, false otherwise
546 Chooses a random node from the network topology, excluding specified nodes and scopes. @param parentNode root node of the network @param excludedScopeNode node to exclude from selection @param excludedNodes collection of nodes to exclude from selection @return chosen node or null if no valid node is found
547 Calculates the weight between two nodes based on their network locations. @param reader Node containing the source node's location @param node Node containing the target node's location @return Weight value representing the distance between the nodes
548 Adds a node to the network topology with an empty rack. @param node Node object to add
549 Transfers data to a file channel in chunks, waiting for the underlying output stream to be writable between transfers. @param fileCh target file channel @param position current position within the file @param count number of bytes to transfer @param waitForWritableTime optional LongWritable to store total wait time @param transferToTime optional LongWritable to store total transfer time
550 Normalizes a collection of host names to their respective IP addresses. @param names list of hostnames to resolve @return List of normalized hostnames (IP addresses) or original hostnames if not found
551 Constructs a string describing the local and destination hosts, including quotes. @param destHost destination hostname @param destPort destination port number @param localHost local hostname @return formatted string with host details or null if not found
552 Retrieves IP addresses within a given subnet. @param subnet Subnet address @param returnSubinterfaces Whether to include subinterface addresses in the result @return List of InetAddress objects representing matching IP addresses
553 Retrieves a set of 'numOfPorts' unique, available socket ports. @param numOfPorts number of desired free ports @return Set of assigned port numbers or throws exception on failure
554 Initializes an empty script mapping instance.
555 Initializes a cached mapping instance from a raw mapping. @param rawMapping underlying mapping object
556 Constructs a NodeBase instance from a network path. @param path input network path to normalize and construct node properties
557 Initializes a new node with given name and normalized location. @param name unique identifier for the node @param location geographical coordinates of the node
558 Constructs a new NodeBase instance with given properties. @param name unique identifier for the node @param location geographical coordinates of the node @param parent reference to the parent node in the hierarchy @param level current level in the network hierarchy
559 Sends a callback to the handler for the given file descriptor. @param caller identifier of the caller @param entries map of file descriptors and their corresponding entries @param fdSet set of file descriptors being tracked @param fd file descriptor to be processed @return true if callback was sent successfully, false otherwise
560 Checks if the managed socket is currently open.
561 Closes the DomainSocket, releasing system resources and interrupting blocking calls.
562 Trims idle selectors from the pool based on inactivity timeout. @param now current time
563 Retrieves raw script-based mapping with dependencies for a given name. @param name unique identifier to resolve dependencies @return List of dependency strings or null if not found
564 Sets the read timeout for socket input operations. @param timeoutMs time to wait before throwing an exception
565 Retrieves a list of IP addresses for the specified network interface. @param strInterface name of the network interface to query @param returnSubinterfaces whether to include subinterface IPs in the result @return array of IP addresses or an empty array if not found
566 Retrieves a list of IP addresses for the specified network interface, optionally excluding subinterfaces. @param strInterface name of the network interface to query @param returnSubinterfaces whether to include or exclude subinterface IP addresses @return List of InetAddress objects
567 Retrieves the node group for a given location. @param loc the input location to resolve @return the resolved node group or null if not found
568 Dumps the network topology mapping, including switch configurations and node counts. @return a string representation of the topology or a message indicating no topology information
569 Checks if the given DNS-to-switch mapping represents a single switch scenario. @param mapping DNSToSwitchMapping object to evaluate
570 Retrieves a specific summary statistic by index from the current log. @param recorderName name of the logging recorder @param idx the index of the desired statistic
571 Prints generic command usage and supported options. @param out output stream to write to
572 Checks if a given class is a Log4j logger. @param clazz Class to check @return true if Log4j, false otherwise
573 Initializes LogThrottlingHelper with logging period and recorder details. @param minLogPeriodMs minimum time interval between log messages @param primaryRecorderName name of the primary log recorder
574 Records log values with the specified recorder name and values. @param recorderName unique log recorder identifier @param values log data to be recorded (variable number of double values) @return LoggingAction object representing the logged data or DO_NOT_LOG if not logged
575 Determines if HTML quoting is required for a given string. @param str the input string @return true if any special characters are found, false otherwise
576 Quotes HTML characters in the given string if necessary. @param item input string to check for special characters @return quoted string or original string if no quoting is needed
577 Adds a Jersey resource package to the web application context. @param packageName Java package containing Jersey resources @param pathSpec HTTP request path specification for the servlet
578 Adds an internal servlet to the server with specified name and path specification. @param name unique servlet identifier @param pathSpec URL path pattern @param clazz servlet implementation class
579 Adds an internal servlet to the server with specified name and path specification. @param name unique servlet identifier @param pathSpec URL path pattern @param clazz servlet implementation class
580 Defines a filter with the specified name, class, and URL patterns. @param ctx HttpServer2 context @param name unique filter identifier @param classname filter class @param parameters initialization parameters (may be null) @param urls array of URL patterns
581 Binds a single Jetty listener to a server connector on a specific port. @param listener ServerConnector instance to bind @param port target port number
582 Retrieves the X-Frame-Options enum representation based on a string value. @param value String value to find matching enum
583 Initializes FileMonitoringTimerTask with file paths to monitor, action for successful changes, and action for monitoring failures. @param filePaths list of file paths to monitor @param onFileChange action to execute when a change is detected @param onChangeFailure action to execute in case of monitoring failure
584 Retrieves a non-negative integer value for the specified key, or uses the default if invalid. @param key configuration property to fetch @param defaultValue fallback value if property is invalid @return the fetched and validated value
585 Verifies the existence of a metrics configuration property. @param key unique property identifier
586 Checks for errors in the output stream and throws a MetricsException. @param message custom error message
587 Throws a MetricsException with custom error message and file path. @param message detailed description of the metric processing issue
588 Retrieves the rolling file system sink interval in milliseconds. @return time interval in milliseconds
589 Throws a custom MetricsException with error message and underlying cause. @param message detailed error description @param t root exception causing metrics processing issue
590 Updates the cached Record for the given metrics and name. @param mr MetricsRecord to update @param includingTags whether to include tags in the updated Record @return the updated Record or a new one if not found
591 Serializes a string to the XDR buffer. @param s the string value to serialize
592 Emits a metric to the Ganglia monitoring system. @param groupName group name @param name metric name @param type metric type @param value metric value @param gConf Ganglia configuration @param gSlope Ganglia slope
593 Emits a metric with specified name, type, value, and slope to Ganglia monitoring system. @param groupName group name @param name metric name @param type metric type @param value metric value @param gConf Ganglia configuration settings @param gSlope Ganglia slope settings
594 Dequeues an item from the queue, blocking until available. @throws InterruptedException if interrupted while waiting
595 Constructs a MetricsRecordImpl object from provided metrics data and timestamp. @param info metrics metadata @param timestamp recording timestamp (must be > 0) @param tags associated metrics tags @param metrics actual metrics data
596 Records RPC enqueue time. @param enQTime long value representing the enqueue duration
597 Records RPC queue processing time. @param qTime long value representing the time
598 Records RPC processing time. @param processingTime time taken to process the RPC request
599 Updates write file latency quantiles with new data point. @param writeLatency long value of write operation latency
600 Adds a new disk read latency value to the quantile set. @param readLatency long latency value to be added
601 Initializes metrics system with specified prefix. @param prefix metric source identifier
602 Returns singleton instance of the metrics system. @return MetricsSystem object
603 Shuts down the DefaultMetricsSystem instance.
604 Captures current system state by adding all registered MetricsTags and MutableMetrics to the provided MetricsRecordBuilder. @param builder object to build a snapshot of system metrics @param all whether to include all metrics or only those that have changed since last snapshot
605 Computes rolling averages of metrics over time, filtering by minimum sample count. @param minSamples minimum number of samples required for averaging @return Map of metric names to their respective average values
606 Retrieves the total number of processing time samples.
607 Updates rolling averages by processing current snapshot and updating LinkedBlockingDeque. @param none
608 Retrieves cached metrics information by name and description. @param name unique metric identifier @param description metric description
609 Retrieves cached metrics tag from cache using provided info and value. @param info MetricsInfo object @param value associated metric value
610 Adds new samples to statistical analysis within an interval. @param numSamples number of new samples @param sum total value of new samples
611 Adds new statistical sample to analysis. @param x value of new sample
612 Calculates the mean processing time of RPC operations. @return Mean processing time in seconds
613 Retrieves the current minimum value tracked by this SampleStat instance.
614 Retrieves the current maximum value from the statistical samples.
615 Resets MinMax object to default minimum and maximum values.
616 Calculates next TGT renewal time based on retry policy. @param tgtEndTime target ticket end time @param now current system time @param rp RetryPolicy instance for determining retry delay @return next TGT renewal time in milliseconds or throws Exception if error occurs
617 Calculates sample standard deviation as square root of variance.
618 Compresses sample data by merging adjacent samples within the allowable error limit.
619 Retrieves a quantile value from the sample data. @param quantile target quantile as a proportion of total samples
620 Inserts a batch of sample data into the quantile collection. @param buffer sorted array of new samples
621 Retrieves and returns a list of all netgroup names in the cache. @return list of netgroup names
622 Checks if netgroup ID is cached. @param group unique netgroup identifier @return true if found in cache, false otherwise
623 Retrieves server properties based on client address. @param clientAddress unique client identifier @return A map of server properties or an empty map if not found
624 Retrieves client SASL properties based on server address and port. @param serverAddress IP address of the server @param ingressPort Server's ingress port number
625 Extracts the host from a given Kerberos principal name. @param principalName Kerberos principal to process
626 Retrieves group information for the specified user. @param user unique user identifier @return Set of group names or null if not found
627 Refreshes the user-to-groups mapping cache and invalidates all cached entries. @throws IOException if an error occurs during cache refresh
628 Prints a formatted message to console and diagnostic output streams. @param format message format string @param args variable number of arguments for the message
629 Updates the specified ID mapping map using a system command. @param map the ID mapping map to update @param mapName name of the map being updated @param command shell command used for ID mapping @param regex regular expression for parsing ID list entries @param staticMapping pre-existing static ID mappings @return true if any updates were made, false otherwise
630 Generates the command to run a script. @param script script file @return OS-specific command array (Windows or Bash)
631 Switches the bind user in case of authentication exception. @param e the authentication exception that triggered the switch
632 Writes data to the output stream with optional SASL wrapping. @param inBuf input byte array @param off offset into the input array @param len length of the data to write
633 Closes the SASL-secured output stream and underlying output stream. Disposes of SASL resources and flushes the output stream.
634 Handles HTTP interactions, filtering based on user agent and method headers. @param httpInteraction contains request information
635 Parses partial group names from input strings. @param groupNames comma-separated list of group names @param groupIDs comma-separated list of corresponding group IDs @return Set of resolved group names @throws PartialGroupNameException if number of group names and IDs do not match
636 Creates a SecretKey instance from a provided byte array. @param key raw secret key bytes
637 Removes stored token by ID. @param ident TokenIdent object containing sequence number and bytes
638 Resets the token manager, clearing keys and tokens. @param none
639 Updates the delegation key in storage. @param key DelegationKey object to be updated
640 Removes a stored master key. @param key DelegationKey object
641 Adds a new delegation key, updating the current key ID if necessary. @param key DelegationKey object to be added
642 Stores a new delegation key, associating its ID with the key and storing it as the master key. @param key DelegationKey object to be stored
643 Sets the external delegation token secret manager. @param secretManager new secret manager instance
644 Configures authentication handler class and merges it with superclass configuration. @param configPrefix configuration prefix @param filterConfig FilterConfig object @return Properties object containing merged configuration
645 Retrieves user group information via the current execution context.
646 Checks if the current request is a management operation. @param request HTTP servlet request
647 Checks if the token is managed by its renewer. @return true if managed, false otherwise
648 Renews the security token. @return new token expiration timestamp
649 Cancels the token based on the provided configuration. @param conf system configuration
650 Returns input stream with optional data wrapping based on SASL negotiation properties. @param in original input stream
651 Returns an OutputStream with optional data wrapping based on SASL negotiation properties. @param out the underlying OutputStream @return wrapped or unwrapped OutputStream
652 Reads additional data from the input stream, processes SASL tokens, and returns the length of the processed data. @throws IOException on input stream errors
653 Closes the SASLInputStream, releasing resources and resetting internal state. @throws IOException on input stream close failure
654 Constructs an AccessControlException with a specified underlying cause. @param cause the Throwable that triggered this exception
655 Checks if login operation was successful.
656 Updates the user's last login timestamp. @param loginTime new last login time in milliseconds
657 Initializes UserGroupInformation with the given Subject. @param subject Hadoop security subject containing user credentials
658 Retrieves the username associated with this UserGroupInformation instance. @return The username, or an empty string if not available
659 Determines if user has Kerberos-based credentials. @return true if using Kerberos, false otherwise
660 Retrieves the authentication method used by this user. @return AuthenticationMethod enum value
661 Retrieves the encapsulated Real User object. @return RealUser object or null if not found
662 Returns the user's shortened name. @return short username
663 Sets the user's authentication method. @param authMethod AuthenticationMethod enum value
664 Initializes ReloadingX509TrustManager with specified truststore parameters. @param type Type of truststore (e.g., "JKS", "PKCS12") @param location Path to the truststore file @param password Truststore password
665 Initializes a ReloadingX509KeystoreManager instance with the specified keystore type, location, store password, and key password. @param type Keystore type @param location Path to the keystore file @param storePassword Store password @param keyPassword Key password
666 Retrieves a resource from the class loader by its name. @param name resource identifier (e.g., file path or URL)
667 Retrieves a configuration resource as an input stream. @param name resource identifier @return InputStream object or null if not found
668 Retrieves a configuration resource as a Reader, handling exceptions and logging deprecation warnings. @param name resource identifier (e.g., file path or URL)
669 Creates a secure socket engine based on the current configuration mode. @return SSLEngine instance configured for client or server mode
670 Configures an HttpURLConnection with SSL/TLS settings. @param conn underlying connection object
671 Initializes configured object with given Hadoop configuration. @param conf Configuration object to store
672 Handles executor timeout for shell-based Unix group lookup. @param executor ShellCommandExecutor instance @param user User identifier @return True if handled, False otherwise
673 Returns a string representation of the command to be executed. The string includes quoted arguments if they contain spaces.
674 Reads authentication method from input stream. @param in DataInput object containing authentication data
675 Adds a user to the access control list. @param user unique user identifier Throws IllegalArgumentException if user matches a wildcard ACL value
676 Adds a user group to the access control list, throwing an exception if the ACL value is wildcard-based. @param group identifier of the group to add
677 Removes a specific user from the access control list. @param user unique user identifier Throws an exception if the ACL string contains a wildcard permission value for this user. Otherwise, removes the user only if all users are not allowed based on current access list settings.
678 Removes a specific user group from the access control list. @param group name of the group to remove
679 Concatenates user IDs into a comma-separated list. @return Comma-separated string of user IDs
680 Concatenates group names into a comma-separated list. @return string representation of groups
681 Checks if TGT (Ticket Granting Ticket) comes from original Ticket Granting Service. @param ticket KerberosTicket object @return true if original, false otherwise
682 Retrieves SASL server properties based on client IP address. @param clientAddress the client's IP address @return Map of server properties or default properties if whitelisted
683 Validates the provided CryptoCodec instance, ensuring it supports AES/CTR/NoPadding or SM4/CTR/NoPadding. @param codec cryptographic codec to validate
684 Returns the current position within the encrypted input stream. @throws IOException if an I/O error occurs during validation
685 Reads data from the underlying stream into a temporary buffer and returns the number of bytes read. @param inBuffer ByteBuffer to store decrypted data @return number of bytes read or -1 if end-of-stream is reached
686 Converts string representation to CipherSuite object. @param name String representation of the cipher suite
687 Checks protocol version compatibility. @param version target protocol version to check @return true if version is supported, false otherwise
688 Generates a random integer with the specified number of bits. @param numBits number of bits in the generated integer @return random integer with the specified bit length
689 Creates a KeyProviderCryptoExtension instance from the given key provider. @param keyProvider key management framework @return KeyProviderCryptoExtension object
690 Retrieves the current key version for a given key name. @param name unique key identifier @return KeyVersion object or null if metadata not found
691 Generates a cryptographic key of specified size using the given algorithm. @param size length of the key in bytes @param algorithm key generation algorithm (e.g., "AES") @return generated key as a byte array
692 Creates an EncryptedKeyVersion object for decryption purposes. @param keyName encryption key name @param encryptionKeyVersionName version of the encryption key @param encryptedKeyIv initialization vector for encrypted key @param encryptedKeyMaterial encrypted key material
693 Creates a new KeyProviderDelegationTokenExtension instance. @param keyProvider underlying key management framework
694 Shuts down the Key Management Service client and releases resources. @throws IOException on shutdown or SSL factory destruction errors
695 Retrieves read-write lock associated with given key name. @param keyName identifier string
696 Appends a field to the context, ensuring its validity. @param field input field value
697 Appends a key-value pair to the context. @param key unique identifier @param value associated value string
698 Appends a key-value pair to the context, only if not already present and both input values are valid. @param key unique identifier @param value associated value
699 Creates a successful refresh response with default values.
700 Converts a client ID byte array to a UUID string. @param clientId unique client identifier in byte array format @return UUID string representation or empty string if null/empty input
701 Offers an element to the call queue. @param e element to add
702 Returns the number of tasks in the current call queue.
703 Retrieves super interfaces that extend VersionedProtocol. @param protocol the protocol class to evaluate @return array of super interface classes extending VersionedProtocol
704 Retrieves server address associated with an RPC proxy. @param proxy the RPC proxy object
705 Retrieves the current monotonic nanosecond timestamp.
706 Retrieves remote user information from the current RPC call. @return UserGroupInformation object or null if not available
707 Computes unique fingerprints for an array of methods. @param methods array of methods to compute fingerprints for @return array of integer fingerprints or null if input is null
708 Dispatches refresh requests to registered handlers for the specified identifier. @param identifier unique identifier of the handler @param args array of arguments passed to the handler @return Collection of RefreshResponse objects, one per handler
709 Constructs a RemoteException with specified class name and error message. @param className Class name associated with the exception @param msg Human-readable message describing the error
710 Unwraps a RemoteException to an IOException instance if the class name matches one of the specified types. @param lookupTypes array of IOException subclass names to match @return unwrapped IOException or the original RemoteException if no match found
711 Unwraps RemoteException into an IOException instance. @return IOException instance or this if unwrapping fails
712 Calculates total processing cost based on weighted timing details. @param details ProcessingDetails object containing timing values
713 Retrieves the total number of dropped connections. @return The count of dropped connections
714 Returns the current number of active client connections. @return Integer value representing the count of open connections
715 Adds an element to the queue with specified priority. @param priority queue priority @param e element to add
716 Adds an element to the queue with specified priority. @param priority unique importance level @param e element to be added @return true if successful, false otherwise
717 Adds classes of exceptions to be logged tersely. @param exceptionClass classes of exceptions to log
718 Adds exceptions to be logged tersely. @param exceptionClass classes of exceptions to suppress logging for
719 Constructs an RpcException with the specified server-side error message. @param message human-readable description of the RPC error
720 Constructs an RpcServerException with the specified error message. @param message human-readable description of the RPC error
721 Constructs an RpcException with the specified error message. @param message human-readable description of the RPC error
722 Constructs an RpcException with specified error message and underlying cause. @param message detailed server-side error description @param cause root exception causing this unexpected server failure
723 Constructs an RpcServerException with specified error message and underlying cause. @param message detailed error description @param cause root exception causing this RPC failure
724 Constructs an RpcClientException with specified error message and underlying cause. @param message detailed error description @param cause root exception causing this RPC failure
725 Updates the decayed and raw call costs for a given user identity. @param identity unique user identifier @param costDelta amount to increment call costs by
726 Computes priority level for a user based on cost and identity. @param cost RPC call cost @param identity unique user identifier @return Priority level (0-9) or 0 if not found
727 Retrieves a remote IOException from ServiceException. @param se ServiceException containing the underlying exception @return IOException instance or new IOException if no cause is set
728 Executes an IPC call and handles ServiceException. @param call IpcCall instance to invoke @return result of the call, or throws IOException if ServiceException occurs
729 Retrieves a fixed byte string from cache or creates it from input key. @param key input key to be converted into byte string
730 Converts byte array to Protobuf ByteString. @param bytes input byte data
731 Validates and sets client ID and retry count. @param cid unique client identifier @param rc retry count @param externalHandler external handler object
732 Retrieves the local address of the RPC listener. @return InetSocketAddress object representing the listener's address
733 Retrieves a set of addresses associated with auxiliary listeners. @return Set<InetSocketAddress> containing listener addresses or empty set if none found
734 Stops the specified client instance from the cache, decrementing its reference count. If all references are removed, the client is stopped and the SocketFactory instance is cleared. @param client Client instance to stop
735 Compares this cache entry with another for equality. @param obj the object to compare with, must be a CacheEntry instance
736 Initializes ProtobufWrapperLegacy with a Protobuf message. @param message Object to wrap
737 Sets up an RPC response for old version fatal errors. @param response ByteArrayOutputStream containing the response data @param call RpcCall object with unique ID and response payload @param rv Writable object (not used in this method) @param errorClass String representing the error class @param error String describing the error
738 Advances the weighted round-robin scheduling algorithm by updating the index and moving to the next queue if necessary.
739 Sets an exception and notifies completion of RPC call. @param error IOException to be stored
740 Sets RPC response and notifies completion. @param rpcResponse Writable object containing response data
741 Continuously reads data from the underlying socket, retrying on timeouts. @throws IOException if an I/O error occurs
742 Continuously reads data from socket while handling timeouts and retries. @param buf buffer to store read data @param off offset in buffer @param len number of bytes to read @return actual number of bytes read, or -1 on end-of-stream
743 Retrieves client remote IP address from current RPC call. @return InetAddress object or null if no active call
744 Retrieves the remote port number used by RPC calls. @return remote port number or 0 if not available
745 Retrieves the negotiated Quality of Protection (QOP) for an established connection on an auxiliary port. @return QOP string or null if not on auxiliary port
746 Retrieves the priority level associated with the current RPC call. @return Priority level value or 0 if no call is active
747 Returns a JSON string representing the number of open connections per user. @return JSON string or null on failure
748 Initializes MachineList with a collection of host entries and an InetAddressFactory. @param hostEntries Collection of hostname or IP address ranges @param addressFactory Factory for resolving hostnames to InetAddress objects
749 Checks if a specific IP address or hostname is included in the allowed machine list. @param ipAddress IP address or hostname to check
750 Initializes SysInfoLinux with specified Linux filesystem paths and jiffy length. @param procfsMemFile path to /proc/meminfo @param procfsCpuFile path to /proc/cpuinfo @param procfsStatFile path to /proc/stat @param procfsNetFile path to /proc/net/dev @param procfsDisksFile path to /proc/partitions @param jiffyLengthInMillis interval duration in milliseconds
751 Reads and parses memory information from "/proc/meminfo". @param readAgain whether to re-read if previous data is available
752 Retrieves number of processors from "/proc/cpuinfo". @throws IOException if unable to access or parse the file
753 Retrieves number of CPU cores based on Linux /proc filesystem.
754 Retrieves CPU frequency from "/proc/cpuinfo". @throws IOException if unable to access or parse the file
755 Reads and processes the "/proc/stat" file to update CPU time metrics.
756 Retrieves total network bytes read. @return Total number of network bytes read
757 Retrieves total bytes written by network interfaces. @return Total bytes written or unknown if failed to retrieve
758 Reads disk statistics from "/proc/diskstats" and updates numDisksBytesRead and numDisksBytesWritten. @throws IOException if an I/O error occurs while reading the file
759 Retrieves the value associated with a given key in the hash table. @param k the key to search for @return the associated value or null if not found
760 Removes a key-value pair from the hash table. @param k the key to remove @return associated value or null if not found
761 Removes an element from the set by key at a specified index. @param index position of the entry to remove @param key unique identifier of the element to be removed @return E object if found, null otherwise
762 Sets optional secure transformer attributes for the given factory. @param transformerFactory the TransformerFactory instance
763 Converts string with size prefix into long value. @param s input string containing binary prefix
764 Formats a long value with specified units and precision. @param n the numeric value to format @param unit the unit of measurement (e.g. "Bytes", "KB") @param decimalPlaces the number of decimal places to display @return formatted string or null if an error occurs
765 Formats a double as a percentage with specified decimal places. @param fraction value to format (0.0-1.0) @param decimalPlaces number of decimal places
766 Converts a byte array to a hexadecimal string. @param bytes input byte array @param start starting index for conversion @param end ending index for conversion @return hexadecimal string representation of the specified byte range or null if bytes is null
767 Limits decimal value to 2 places. @param d double value to truncate
768 Terminates the application in response to an ExitException. @param ee the exception triggering termination
769 Halt the JVM with a given exit code and exception. @param he the HaltException to be thrown
770 Adds a shutdown hook with specified priority and timeout. @param shutdownHook Runnable task to be executed during shutdown @param priority integer value representing hook's urgency level @param timeout duration before hook execution times out @param unit time unit for timeout setting
771 Removes a registered shutdown hook. @param shutdownHook task to be removed
772 Checks if a specified shutdown hook is registered. @param shutdownHook Runnable task to be executed during shutdown
773 Retrieves an input stream for a specified resource using the current thread's class loader. @param resourceName Name of the resource to load
774 Initializes LineReader with default buffer size. @param in InputStream to read from
775 Executes the command at specified intervals, handling I/O errors. @throws IOException if an error occurs during execution
776 Creates a daemon thread factory with default priority. @param prefix unique identifier prefix
777 Expands hash set capacity when necessary to maintain optimal performance.
778 Creates a new ArrayList instance populated with elements from an iterator. @param elements source of elements to be added
779 Adds all elements from an iterable to a collection. @param addTo target collection @param elementsToAdd source of elements (can be null) @return true if the collection was modified, false otherwise
780 Creates a new ArrayList with the specified capacity. @param initialArraySize minimum size of the list
781 Serializes the provided object to JSON bytes and writes them to the specified output stream. @param instance object to serialize @param dataOutputStream target output stream for writing serialized data
782 Initializes OperationDuration object with current system time.
783 Records operation completion time.
784 Converts operation duration to a standard Duration object. @return Duration representation of elapsed time
785 Returns operation duration as a human-readable string.
786 Computes the monomial value for a given length in bytes and modulus. @param lengthBytes positive integer representing length in bytes @param mod modulus value @return monomial value as an integer
787 Composes CRC values with a monomial in Galois field. @param crcA first CRC value @param crcB second CRC value @param monomial monomial value @param mod modulus value @return composed CRC value
788 Converts an integer to a byte array representation. @return 4-byte byte array containing the integer value
789 Converts a single CRC value to a hexadecimal string representation. @throws IOException if input byte array length is not 4
790 Converts byte array to a string of CRC values in hexadecimal format. @throws IOException if input byte array length is not divisible by 4
791 Extracts JAR contents to a specified directory based on a regex pattern. @param inputStream stream containing the JAR file @param toDir target directory for extraction @param unpackRegex pattern to filter files for extraction
792 Unpacks JAR files into the specified directory, filtering by the provided regular expression. @param jarFile JAR file to unpack @param toDir target directory for unpacking @param unpackRegex regular expression pattern to filter entries
793 Finds the nth occurrence of a specified byte within a UTF-8 encoded byte array. @param utf byte array to search @param start starting index for search range (inclusive) @param length search range length @param b target byte value @param n occurrence position to find (1-based) @return index of found byte or -1 if not found
794 Inserts or updates entry with weakly referenced value. @param key unique key identifier @param value object value to store (held by weak reference) @return resolved object value or null if not reachable
795 Removes entry from map and resolves weak reference to value. @param key unique identifier @return removed value or null if not found
796 Checks if map contains a key-value pair. @param key unique identifier @return true if entry exists, false otherwise
797 Creates a new entry in the map with the given key and resolves its value. @param key unique identifier of the entry
798 Removes expired weakly referenced entries from the map and notifies of lost objects. @return number of removed entries
799 Creates a snapshot of current suppression metrics. @return SuppressedSnapshot object capturing the current state
800 Formats time difference between two timestamps into a human-readable string. @param finishTime end timestamp @param startTime start timestamp @return formatted time string (e.g., "1hr, 2mins, 3sec")
801 Extracts a collection of trimmed strings from input string, splits into key-value pairs by '=' and trims resulting substrings. @param str input string to process @return Map of trimmed key-value pairs or empty map if input is null/empty
802 Splits input string by separator character, escaping with escapeChar. @param str input string to split @param escapeChar character that precedes separator for escaping @param separator character to split on @return array of substrings or null if input is null
803 Escapes a string by replacing specified characters with a custom escape character. @param str input string @param escapeChar the character used for escaping @param charsToEscape array of characters to be escaped @return escaped string or null if input is null
804 Unescapes a string by interpreting characters preceded by a specified escape character. @param str input string to unescape @param escapeChar the character that precedes special characters @param charsToEscape array of characters that should be treated as special when escaped @return unescaped string or null if input is null
805 Retrieves the software version from configuration. @return Version string or "Unknown" if not found
806 Retrieves the revision number from the version properties. @return Revision string or "Unknown" if not found
807 Retrieves branch name from properties. @return Branch name or "Unknown" if not found
808 Retrieves the build date from properties.
809 Retrieves the user associated with this version. @return username or "Unknown" if not set
810 Retrieves the URL associated with this software component. @return the URL or "Unknown" if not found
811 Retrieves source checksum from Hadoop properties. @return Source checksum as string or 'Unknown' if not found
812 Retrieves the Protobuf compiler version.
813 Retrieves the compile platform property.
814 Initializes the wrapper with a remote iterator and filter function. @param source underlying remote iterator to wrap @param filter function to apply for filtering elements
815 Initializes the wrapper with a remote iterator and continuation condition. @param source the underlying remote iterator to wrap @param continueWork callback for determining whether iteration should proceed
816 Checks if there's a next filtered element available. @throws IOException on I/O exception
817 Initializes MaybeClose object with a potentially closable resource. @param o the resource to manage, or null
818 Submits a callable task to an executor for asynchronous execution. @param executor the executor service to use @param call the task to be executed and monitored @return a CompletableFuture containing the result of the task, or null if not found
819 Initializes the lazy reference with an IO-raising constructor. @param constructor Callable that lazily creates and returns an object of type T
820 Creates a lazily initialized atomic reference from a supplier. @param supplier function providing the value to be referenced
821 Evaluates and returns the lazily initialized object if not closed. @throws IOException if unavailable
822 Initializes and returns the lazily referenced object. @throws IOException if I/O operation fails
823 Wraps CallableRaisingIOE operation and raises IOExceptions as unchecked exceptions. @param call callable raising IOExceptions @return result of the wrapped operation or null if not found
824 Converts CallableRaisingIOE into an unchecked IOException-throwing supplier. @param call callable operation that may throw IOExceptions
825 Initializes the builder with an iterable of items. @param items RemoteIterator object containing items to process
826 Wraps a collection of exceptions into a single exception, suppressing others. @param exceptions iterable collection of Exception objects @throws E the primary exception type to be thrown
827 Initializes the builder with an iterable of items. @param items input collection to process
828 Suppresses exceptions during task execution.
829 Throws an IOException based on inner exception from an ExecutionException. @param e the original ExecutionException to analyze
830 Wraps and re-throws inner cause of CompletionException as an IOException. @param e the original CompletionException
831 Configures a JobConfigurable object using a JobConf configuration. @param theObject JobConfigurable object to configure @param conf JobConf configuration to use
832 Retrieves a Class object by name, throwing an exception if not found. @param name class name to search for
833 Prints thread information to the provided output stream. @param stream target output stream @param title human-readable title for the thread dump
834 Initializes a new Configuration instance with default loading settings. @param loadDefaults true to load default configuration properties
835 Creates a servlet exception response with error details. @param response HttpServletResponse instance @param status HTTP response status code @param ex Throwable instance containing error details
836 Creates a Jersey exception response with error details. @param status HTTP status code @param ex Throwable instance containing error details
837 Initializes CRC state to initial value.
838 Clears the collection by removing all elements.
839 Generates the shell command for retrieving groups for a given user. @param user username to fetch group information for
840 Generates the 'groups username' command for Unix or Windows. @param user target username @return Command string array with arguments, or null if not applicable
841 Generates the command for getting permissions. @return Array of shell commands or null if not found
842 Generates set permission command for Hadoop operations. @param perm permission to be set @param recursive whether to apply recursively @return command array or throws exception on failure (on Windows)
843 Generates the command to set the owner of a file or directory. @param owner string representing the owner's name
844 Generates command for creating a symbolic link. @param target path to the target file or directory @param link path to create the symbolic link at
845 Generates readlink command for symbolic links. @param link path to the symbolic link @return Array of command components or null if not applicable
846 Generates a signal kill command based on the provided code and PID. @param code signal value (0 for check alive, otherwise for kill) @param pid process identifier @return array of shell command arguments or null if not applicable
847 Appends OS-specific script extension to given basename and returns a new File object. @param parent directory to append file to @param basename base name of the shell command
848 Validates and returns the absolute Hadoop home directory File object. @throws FileNotFoundException if Hadoop home directory is not found
849 Retrieves the Hadoop home directory. @throws FileNotFoundException if an error occurs
850 Retrieves a qualified executable file within the Hadoop bin directory. @param hadoopHomeDir root directory of the Hadoop installation @param executable name of the executable to find @return File object representing the qualified executable, or null if not found
851 Retrieves the Windows Utils file based on previous failure status. @throws FileNotFoundException if previous failure occurred
852 Terminates all spawned shell processes and clears the child shells map.
853 Terminates a thread with default timeout. @param thread Thread to shut down
854 Shuts down the specified ExecutorService with default timeout. @param service ExecutorService to shut down @return true if shutdown was successful, false otherwise
855 Creates and adds a new phase to the progress hierarchy.
856 Adds a new phase to the progress hierarchy with specified weightage. @param weightage relative importance of the phase @return newly created Progress object for the added phase
857 Calculates overall progress by aggregating contributions from completed and current phases. @return Total progress value as a float
858 Completes the current phase and potentially advances to the next phase in the progress sequence. @param none
859 Retrieves string data from ZooKeeper node at specified path. @param path ZooKeeper path to retrieve data from @return String data or null if not found
860 Retrieves string data from ZooKeeper node at specified path. @param path node path to retrieve data from @param stat optional Stat object for storing retrieval metadata
861 Sets string data in ZooKeeper node with specified version. @param path node path @param data binary string data to set @param version expected version of the node
862 Creates a ZooKeeper node at the specified path with the given ACL. @param path absolute path to the node @param zkAcl list of Access Control Lists for the node
863 Deletes a ZooKeeper node and its children at the specified absolute path. @param path absolute path to the node
864 Safely deletes a ZooKeeper node at specified path by creating a transaction. @param path absolute path to the node @param fencingACL list of access control lists for the transaction @param fencingNodePath path to the fencing node in ZooKeeper
865 Adds a program to the collection with specified metadata. @param name unique program identifier @param mainClass main class to invoke for the program @param description program descriptive information
866 Constructs an UnboundMethod instance for a given method name and classes. @param targetClass class containing the method @param methodName method name @param argClasses parameter types (varargs)
867 Constructs an UnboundMethod instance for a hidden method in the specified target class. @param targetClass class containing the target method @param methodName name of the hidden method to bind @param argClasses parameter classes for the method (varargs)
868 Creates a NOOP (no-operation) unbound method instance. @param name name of the target method to bind
869 Checks if any of the provided unbound methods are not NOOP. @param methods array of DynMethods.UnboundMethod instances @return true if all methods are NOOP, false otherwise
870 Checks if the given unbound method is not a NOOP (no operation). @param method UnboundMethod instance to check @return true if method is available, false otherwise
871 Binds the unbound method to a target object. @param receiver the object to bind to
872 Returns this unbound method as a static method.
873 Finds the path of the JAR file containing the specified class. @param clazz target class
874 Finds the location of a given class within its ClassLoader context. @param clazz Class object to locate
875 Writes calculated checksum value to output stream. @param out DataOutputStream for writing the checksum @param reset whether to reset internal state after writing @return size of the written checksum
876 Writes a value to the provided buffer, optionally resetting internal state. @param buf byte array to write to @param offset starting position in the buffer @param reset whether to reset internal state and checksum calculator after writing @return size of written data or 0 if invalid type
877 Creates a rate limiting instance with specified capacity. @param capacity non-negative integer indicating the maximum allowed requests
878 Registers UNIX signal handlers and logs the registration status. @param log logging instance
879 Initializes LightWeightGSet with a recommended capacity, calculating the actual array length based on memory constraints. @param recommended_length minimum required capacity
880 Retrieves host details from the current configuration. @param includes set of included host names @param excludes set of excluded host names
881 Retrieves host details and populates include and exclude maps. @param includeHosts set of included host names @param excludeHosts map of excluded items with their counts
882 Computes Jenkins hash for byte array. @param key input byte array @param nbytes length of the byte array @param initval initial value for hash computation @return Jenkins hash value as an integer
883 Retrieves a hash instance based on the specified type. @param type unique identifier for hash type
884 Protected constructor to prevent direct instantiation.
885 Protected constructor to prevent instantiation and ensure proper usage through factory methods.
886 Protected constructor to prevent direct instantiation.
887 Computes the hash value of a given Key object and returns an array of integers. @param k input key to be hashed
888 Initializes an instance with a default ReentrantLock.
889 Releases underlying lock when closed.
890 Logs an error message and prints stack trace to stderr. @param e Throwable instance @param text error message format string
891 Logs an explanatory message to stderr with the given error code and text. @param errorCode unique error identifier @param text descriptive error message
892 Logs loaded class details. @param name class name @param clazz Class object
893 Returns the latest GC data clone.
894 Initializes CRC value to initial state using {@link #reset()}.
895 Executes shutdown hooks in order of priority and timeout. @return number of timed-out hooks
896 Adds an element to the priority queue. @param element the new element to add
897 Removes and returns the highest priority element. @return top element or null if queue is empty
898 Adjusts the top element of the priority queue.
899 Creates a HashSet instance from an iterator of elements. @param elements source iterator of elements to include
900 Creates a HashSet with optimal capacity based on expected size. @param expectedSize anticipated number of elements
901 Skips to a specified sequence value while enforcing constraints. @param newValue target long integer value @throws IllegalStateException if newValue is less than the current value
902 Finalizes table construction and returns a fully built TableListing object. @return TableListing instance with configured columns, header, and wrapping options
903 Checks if configuration key is deprecated. @param key unique configuration key @return true if key is deprecated, false otherwise
904 Checks if a deprecated key has been warned. @param name unique configuration property identifier @return true if warned, false otherwise
905 Reloads configuration properties for all registered configurations.
906 Adds a default resource and reloads configurations as needed. @param name unique resource identifier
907 Converts time duration string to specified TimeUnit, handling unit detection and conversion. @param name configuration property name @param vStr input time duration string @param defaultUnit default TimeUnit to use if not found in vStr @param returnUnit desired TimeUnit for the converted value @return converted value as a long or throws exception on failure
908 Retrieves all configuration properties associated with the specified list of tags. @param tagList unique identifiers for the configuration properties @return Properties object containing all properties for the given tags or an empty set if not found
909 Redacts sensitive configuration values. @param key the configuration key to check @param value the configuration value to redact or return as is
910 Redacts sensitive XML configuration data. @param key the configuration key @return redacted or original XML value depending on sensitivity
911 Starts the reconfiguration task, creating a new ReconfigurationThread instance and setting it as a daemon. @throws IOException if the server is stopped or another reconfiguration task is already running
912 Creates a new DeprecationContext instance by copying another instance and updating it with the provided deltas. @param other existing DeprecationContext to copy from @param deltas array of DeprecationDelta objects containing updated key information
913 Constructs ReconfigurationException with error message and details. @param property name of the affected property @param newVal new value attempted in the property change @param oldVal previous value before the property change @param cause underlying exception causing the failure
914 Constructs ReconfigurationException with error message and property details. @param property name of the affected property @param newVal new value attempted in the property change @param oldVal previous value before the property change
915 Checks if manual HA state management is allowed. @param target HAServiceTarget object @return true if allowed, false otherwise
916 Executes a command on the remote server via SSH and returns the exit status. @param session SSH session object @param cmd Command to be executed @return Exit status of the command or -1 if an error occurs
917 Checks if the service is eligible for failover. @throws ServiceFailedException if not healthy or in observer state
918 Reads data into a direct buffer using vectored reading operations. @param range FileRange object specifying the data to read @param buffer ByteBuffer containing the destination buffer @param operation Function4RaisingIOE that applies to each chunk of data
919 Validates and sorts a list of file ranges by offset, ensuring disjointness and proper alignment. @param input unsorted list of FileRange objects @param fileLength optional file length for validation @return sorted list of FileRange objects or throws EOFException on error
920 Initializes BlockManager with provided block data. @param blockData initialized block data
921 Releases allocated BufferData, but since a new buffer is always allocated, this method effectively does nothing.
922 Releases a resource from the pool, ensuring it's part of this pool and not already released. @param item resource to release
923 Throws an exception if the current buffer state does not match one of the specified valid states. @param states array of valid states to compare against
924 Validates that a string is not null and not empty. @param arg the input string to validate @param argName name of the argument being validated
925 Validates that a collection is not null and has the exact number of elements. @param collection Collection to check @param numElements Expected number of elements @param argName Name of the argument being validated
926 Validates that a file path exists. @param path the file path to check @param argName name of the argument being validated
927 Initializes a BoundedResourcePool with the specified maximum capacity. @param size positive integer representing the pool's size
928 Initializes a BufferPool instance with the specified size, buffer size, and prefetching statistics. @param size total number of buffers in the pool @param bufferSize size of each buffer @param prefetchingStatistics statistics for tracking memory allocations
929 Requests prefetch of a specific block by number. @param blockNumber unique identifier for the block to prefetch
930 Initializes a new BufferData instance with the specified block number and data buffer. @param blockNumber non-negative integer identifier @param buffer ByteBuffer containing the data
931 Initializes Retryer with configurable delay and update parameters. @param perRetryDelay interval between retries @param maxDelay maximum allowed delay @param statusUpdateInterval interval for status updates
932 Validates that an array is not null and has at least one element. @param array the array to validate @param argName name of the argument being validated
933 Validates that an array is not null and has at least one element. @param array the array to validate @param argName name of the argument being validated
934 Validates that an array is not null and has at least one element. @param array the array to validate @param argName name of the argument being validated
935 Validates that an array is not null and has at least one element. @param array the array to validate @param argName name of the argument being validated
936 Validates that an array is not null and has at least one element. @param array the array to validate @param argName name of the argument being validated
937 Validates that an iterable is not null and has at least one element. @param iter the iterable to validate @param argName name of the argument being validated
938 Deletes files in bulk based on provided paths. @param paths collection of file system paths to delete
939 Applies a function to an IOStatisticsSnapshot and catches IOExceptions. @param source input value @return result of applying the function
940 Constructs a FlagSet from an enumeration class and optional initial flags. @param enumClass Class of the Enum type to represent @param prefix string prefix for enum names @param flags initial flags (null for default)
941 Closes the file system and logs debug information. @throws IOException if an I/O error occurs during closure
942 Compares this file status with another based on path. @param o another FileStatus object to compare with
943 Compares this file status with another based on path. @param o another FileStatus object to compare with
944 Converts array of FileStatus objects to Paths. @param stats Array of file statuses @return Array of corresponding Paths or null if input is null
945 Checks if the specified path has a specific capability. @param path filesystem path @param capability desired capability (e.g. FS_READ_ONLY_CONNECTOR) @return true if the path has the capability, false otherwise
946 Creates a JSON serializer for IOStatisticsSnapshot objects. @return JsonSerialization instance with specified class type and serialization options
947 Publishes IO statistics as a storage statistics object. @param name unique identifier for storage statistics object @param scheme storage scheme (e.g., file system) @param source input/output statistics to publish
948 Retrieves storage statistics.
949 Constructs PathIsDirectoryException with affected file path and error message. @param path Hadoop file system path experiencing issues as a directory when expected to be a file.
950 Constructs PathIOException with affected file path and error message. @param path Hadoop file system path experiencing issues
951 Constructs PathIOException with affected file path and default error message. @param path Hadoop file system path experiencing issues
952 Constructs an exception with the specified directory path and error message. @param path Hadoop file system path experiencing issues
953 Sets the buffer size and returns this builder instance. @param bufSize new buffer size in bytes
954 Configures output stream replication factor. @param replica number of replicas to store data
955 Sets block size for output stream. @param blkSize desired block size in bytes
956 Recursively configures and returns this builder instance. @return FSDataOutputStreamBuilder object to enable further configuration
957 Creates a new output stream with default settings. @return FSDataOutputStreamBuilder instance to enable further configuration
958 Sets the overwrite flag for file creation. @param overwrite true to enable overwrite, false otherwise
959 Appends data to existing file in Hadoop FS. @return this builder instance
960 Sets the array of hosts associated with this block location. @param hosts input host string array
961 Sets cached hosts for the block. @param cachedHosts array of host names to cache
962 Sets the array of block owner names. @param names input string array
963 Sets topology paths array, interning strings if provided. @param topologyPaths input string array
964 Checks if the given file path represents a regular file. @param f file system object to check @return true if not directory or symbolic link, false otherwise
965 Wraps an IOException with a custom error message. @param path affected file/directory path @param methodName current method name @param exception original IO exception @return wrapped IOException instance or new PathIOException if exception cannot be wrapped
966 Validates the integrity of data at specified position by checking the sync marker. @param position target file offset
967 Resets file stream to initial position.
968 Registers all expression classes with the given factory.
969 Registers various file system commands with the given CommandFactory. @param factory instance of CommandFactory to register commands
970 Resolves the given file pattern by iteratively expanding leftmost patterns. @param filePattern input string containing file patterns @return List of fully resolved file paths or null if not found
971 Lists file statuses in the specified directory, filtered by the provided criteria. @param f Path object representing the location @param filter PathFilter object for filtering files @return array of FileStatus objects or throws IOException if an error occurs
972 Lists file statuses based on a custom filter. @param files array of Path objects to check @param filter PathFilter object for filtering files @return array of filtered FileStatus objects
973 Obtains a delegationToken for the given URL and user. @param url the web service URL @param token existing token to reuse or renew @param renewer principal that can renew the token
974 Renews a delegation token. @param url the URL to renew the token for @param token the Token object containing the delegationToken
975 Cancels a delegation token. @param url URL to cancel @param token delegate token object
976 Creates a new FileEncryptionInfo object from the given cipher suite, protocol version, encryption keys, and other parameters. @param suite CipherSuite object representing the encryption algorithm @param version CryptoProtocolVersion object indicating the protocol version @param edek byte[] containing the encryption key @param iv byte[] representing the initialization vector @param keyName String identifier for the encryption key @param ezKeyVersionName String identifier for the EZ key version
977 Sets file system permissions for multipart upload. @param perm desired permissions
978 Sets the checksum option for the multipart upload. @param chksumOpt checksum configuration @return this builder instance for method chaining
979 Constructs a WrappedIOException with the provided IOException. @param cause original IOException to be wrapped
980 Initializes the FsLinkResolution instance with a user-defined function. @param fn function to process filesystem links
981 Initializes GlobBuilder with FileContext. @param fc FileContext instance
982 Initializes GlobBuilder with Hadoop file system. @param fs Hadoop file system instance
983 Sets file system permissions. @param perm FsPermission object specifying access rights
984 Sets the progress indicator and returns this builder instance. @param prog the progress indicator
985 Configures checksum options for the output stream. @param chksumOpt Checksum option to apply
986 Validates write operation arguments. @param b the byte array to write to @throws IOException if argument validation fails
987 Compares two strings for equality, ignoring case differences. @param s1 first string @param s2 second string
988 Checks if the provided context is a stale client. @param ctx ZooKeeper client object @return true if client is stale, false otherwise
989 Retrieves or initializes Statistics object for the given file system scheme and class. @param scheme file system scheme (e.g., hdfs, s3) @param cls Class of the FileSystem instance @return existing or newly created Statistics object
990 Copies bytes from input stream to output stream. @param in InputStream source @param out OutputStream destination @param buffSize Buffer size for copying data @param close Whether to close the streams after operation (default: false)
991 Copies bytes from an InputStream to an OutputStream. @param in input stream containing data to be copied @param out output stream where the copied data will be written @param count total number of bytes to be copied @param close whether to close both streams after copying
992 Performs disk I/O checks on the specified directory with retries. @param dir Directory to check for disk I/O issues
993 Checks if quota is set for any supported storage type. @return true if quota is set, false otherwise
994 Checks if any storage type has consumed quota. @return true if at least one type is consumed, false otherwise
995 Calls superclass equals method to compare this file status with another object. @param o the object to compare with
996 Calculates hash code based on superclass implementation.
997 Resets statistical data to initial state. @param sampleCount reset sample count @param newSum reset total sum value
998 Copies statistical data from another MeanStatistic instance. @param other source MeanStatistic object
999 Formats IO statistics as a string, appending entries with specified separator. @param statistics IOStatistics object to extract statistical data
1000 Formats map of I/O statistics as a string, appending entries with newline separator. @param sb StringBuilder to append formatted string @param type descriptive label for the statistics type @param map Map of statistical entries (key-value pairs)
1001 Returns a pre-configured duration tracker instance with customizable key and count of 1. @param key unique identifier for tracked operation
1002 Retrieves all IO statistics as LongStatistic objects. @return Iterator over a set of LongStatistics
1003 Adds timed I/O operation statistics with a specified prefix and duration. @param prefix unique identifier for the statistic @param durationMillis time taken in milliseconds
1004 Builds and returns the constructed IO statistics instance. @return Active IOStatistics object or throws exception if not built
1005 Adds a long-counting function to the statistics with the specified key. @param key unique identifier for the function
1006 Registers a long-valued gauge function evaluator with the specified key and evaluation logic. @param key unique identifier for the gauge function @param eval ToLongFunction that evaluates to a long value
1007 Adds a long minimum statistic function to the IO statistics instance. @param key unique identifier for the function @param eval ToLongFunction instance to evaluate minimum value
1008 Adds a function to track the maximum long value of a dynamic statistic. @param key unique identifier for the statistic
1009 Adds a function to calculate and store the mean statistic. @param key unique identifier for the mean statistic @param eval function to compute the mean statistic value
1010 Registers an interrupt handler with the given name. @param signalName unique identifier for the signal handler
1011 Creates a snapshot of the evaluator map by copying its entries to a new map. @return a new map containing copied entries
1012 Creates a snapshot of the input map by copying its entries to a new map. @param source original map to copy from
1013 Returns an empty IO statistics snapshot.
1014 Initializes context with unique identifiers. @param threadId system-wide thread identifier @param id specific context ID
1015 Creates a new snapshot of I/O statistics.
1016 Checks if thread-level I/O statistics context is enabled.
1017 Retrieves output I/O statistics. @return IOStatistics instance or null if not found
1018 Retrieves input/output statistics from the underlying stream. @return IOStatistics instance
1019 Retrieves input/output statistics from the given data source. @return IOStatistics instance if found, otherwise null
1020 Retrieves input/output statistics from the provided data source. @return IOStatistics instance if found, otherwise null
1021 Retrieves input/output statistics from this stream. @return IOStatistics instance or null if not found
1022 Retrieves input/output statistics from the wrapped stream. @return IOStatistics instance if found, otherwise null
1023 Retrieves I/O statistics from the underlying output stream.
1024 Retrieves input/output statistics from the underlying input stream. @return IOStatistics instance if found, otherwise null
1025 Retrieves I/O statistics from the input stream.
1026 Verifies chunked checksums by comparing computed and expected values. @param type type of checksum (e.g. CRC32) @param algorithm checksum algorithm used @throws ChecksumException if checksum mismatch is detected
1027 Initializes and updates the Decryptor instance with IV and key based on position. @param decryptor Decryptor instance to be initialized @param position current data processing position @param iv initialisation vector
1028 Encrypts data in the input buffer and writes it to the output stream. @throws IOException if an I/O error occurs
1029 Initializes MD5MD5CRC32GzipFileChecksum object with default CRC parameters and no MD5 hash.
1030 Initializes an empty MD5MD5CRC32CastagnoliFileChecksum object.
1031 Initializes a GlobPattern instance from a string glob pattern. @param globPattern input pattern to compile
1032 Constructs shell path from provided File object. @param file input file
1033 Constructs secure shell path from provided File object on non-Windows systems. @param file input file
1034 Extracts files from a zip archive to the specified directory. @param inputStream Zip archive input stream @param toDir Directory where extracted files will be placed
1035 Extracts files from a ZIP archive and unzips them to the specified directory. @param inFile ZIP file to extract @param unzipDir target directory for extracted files
1036 Disconnects an SFTP channel from the pool. @param channel ChannelSftp object to disconnect
1037 Shuts down the SFTP connection pool, disconnecting all active connections and cleaning up resources.
1038 Initializes checksum buffer with specified size. @param size target buffer size
1039 Creates a deep copy of the given Statistics object. @param other Statistics object to duplicate
1040 Retrieves total bytes read from file system operations. @return total bytes read
1041 Retrieves total bytes written by aggregating statistics from all sources. @return total bytes written
1042 Retrieves the total number of read operations. @return count of read operations
1043 Retrieves the number of large read operations. @return count of large read operations
1044 Fetches total write operations. @return count of write operations
1045 Calculates total remote read time in milliseconds. @return aggregated remote read time or null if not applicable
1046 Retrieves aggregated statistical data. @return StatisticsData object containing combined statistics
1047 Calculates total bytes read for erasure-coded data. @return aggregated byte count or null if aggregation is not applicable
1048 Resets statistics to zero, aggregating data using the provided visitor. @param none
1049 Validates the specified CreateFlag enum set for file creation and appending. @param flag EnumSet containing valid CreateFlag options
1050 Validates the specified CreateFlag enum set for file appending. @param flag EnumSet containing valid CreateFlag options
1051 Validates file system URI and extracts or constructs the authority. @param uri input URI to validate @param supportedScheme expected scheme @param authorityNeeded whether authority is required @param defaultPort default port for authority @return modified URI with valid authority, or a new URI if not needed
1052 Initializes an ArrayPrimitiveWritable with a specified primitive array type. @param componentType Class of the array component (e.g., Integer.class, Float.class)
1053 Converts a ZooKeeper permission string into an integer representation. @param permString the permission string to convert @return the corresponding integer permission value
1054 Combines default and user-defined checksum options. @param defaultOpt default checksum configuration @param userOpt user-specified checksum configuration (may override default)
1055 Returns the canonicalized URI. @return URI with default port set if necessary
1056 Constructs a ContentSummary object with default snapshot and erasure coding policy values. @param length total file system length @param fileCount number of files @param directoryCount number of directories
1057 Retrieves file status without specifying a path.
1058 Initializes HttpReferrerAuditHeader object from Builder. @param builder necessary fields for initialization
1059 Releases a BufferData object from the pool, updating its state and resource utilization. @param data the BufferData object to be released
1060 Initializes the SemaphoredDelegatingExecutor with a delegate executor service and fairness setting. @param executorDelegate ExecutorService instance to delegate task execution @param fair whether to use fair or unfair threading policy
1061 Releases the ready buffer with the closest block number to the target. @param blockNumber target block number
1062 Returns the current position of the buffer relative to its start.
1063 Checks if a given position is within the current buffer. @param pos position to check
1064 Retrieves the start offset of the buffer. @return Start offset of the buffer
1065 Retrieves current thread's IO statistics context, either enabled or empty. @return Active IO stats context for the current thread or an empty one if disabled.
1066 Sets IO statistics context for current thread. @param statisticsContext IOStatisticsContext instance or null to remove
1067 Merges sorted file ranges into a list of combined ranges. @param sortedRanges list of FileRange objects to merge @param chunkSize desired chunk size for alignment @param minimumSeek minimum seek distance required for merging @param maxSize maximum size increase allowed by merging @return List of CombinedFileRange objects representing merged ranges
1068 Finds checksum ranges for a list of data ranges. @param dataRanges list of file ranges to process @param bytesPerSum number of bytes per checksum value @param minSeek minimum seek distance required @param maxSize maximum size increase allowed by merging @return list of combined file ranges with merged checksums
1069 Initializes the Name class with default case sensitivity setting.
1070 Applies composite logical condition to PathData by ANDing outcomes of child expressions. @param item PathData object to evaluate @param depth Not used in this method
1071 Retrieves configured search options. @return FindOptions object with specified configuration and streams
1072 Parses command-line arguments and options. @param args list of input arguments
1073 Returns command description, including deprecation notice if applicable.
1074 Displays a warning message with command name. @param message user-provided warning text
1075 Generates command usage string, including name and optional description.
1076 Initializes ScopedAclEntries with a list of ACL entries. @param aclEntries List of AclEntry objects to manage
1077 Prints formatted table data to the specified output stream. @param out target print stream
1078 Creates a new Location instance with specified change allowance. @param allow true to permit changes, false otherwise
1079 Creates a data instance with modification allowance set to true if allowed. @param allow true to permit data modifications
1080 Default constructor; initializes with default execution interval of 0ms.
1081 Generates a DelegationTokenAuthenticatedURL.Token object from the given delegation token. @param dToken Token object with delegated credentials
1082 Lists located file statuses for the given path. @param f Path to list file statuses for
1083 Opens a file with specified options. @param path Hadoop Path object @param parameters OpenFileParameters object containing buffer size and other settings @return FSDataInputStream object wrapped in CompletableFuture
1084 Retrieves the fallback file system. @return The fallback FileSystem object or null if not set
1085 Updates the encryption context and writes encrypted data to the output buffer. @param input input data in direct ByteBuffer @param output output buffer in direct ByteBuffer @return number of bytes written to output buffer
1086 Performs final operation on the encryption context and writes to the provided direct ByteBuffer. @param output ByteBuffer where encrypted data will be written @return length of data written to buffer
1087 Creates a RegexMountPointInterceptor instance based on provided configuration settings. @param interceptorSettingsString unique Hadoop file system configuration string
1088 Normalizes a file system path by removing duplicated slashes and handling Windows paths. @param scheme URI scheme (e.g., "file", null for local paths) @param path input file system path to normalize @return normalized file system path
1089 Determines if a file system path is an absolute Windows path. @param pathString input file system path @param slashed whether the path uses forward slashes
1090 Checks if the URI path is absolute. @return true if the path starts with a separator after removing Windows drive, false otherwise
1091 Calculates the HAR hash by concatenating and hashing the file path. @param p Path to the Hadoop Archive file
1092 Validates the provided Hadoop file system path against the base upload directory. @param path absolute file system path to validate
1093 Finds the next available ID in a directory, considering IDs from files with names starting with the given base name. @param initial the Path to search for file names @param lastId the last ID used (or -1 if not found) @return the next available ID or 1 more than the last ID used
1094 Skips data in the file stream by seeking to a specified position. @param n number of bytes to skip @return number of bytes actually skipped
1095 Reads data from an input stream into a ByteBuffer, using a provided ByteBufferPool for efficient memory management. @param stream input stream to read from @param bufferPool pool of ByteBuffers to use for reading @param maxLength maximum length of data to read @return the used ByteBuffer or null if an error occurred
1096 Resets and reinitializes audit context.
1097 Creates and initializes a thread-specific audit context instance. @return A fully initialized CommonAuditContext object
1098 Constructs an FsPermission object from user, group actions and others action. @param u user action (read, write, execute) @param g group action @param o others action
1099 Initializes permissions from a short integer representation. @param mode short integer containing permission values
1100 Reads file system permissions from a DataInput stream. @param in input stream containing short integer representation of permissions
1101 Evaluates effective permission based on an ACL entry. @param entry AclEntry object representing the ACL entry to evaluate
1102 Creates an immutable PermissionStatus object with specified user, group, and file system permissions. @param user unique username @param group unique group name @param permission file system permissions
1103 Parses ACL specification into a list of AclEntry objects. @param aclSpec input string containing ACL specifications @param includePermission whether to include permission details in the parsed entries @return List of fully constructed AclEntry objects or empty list if invalid input
1104 Creates an instance of FsCreateModes with specified masked and unmasked permissions. @param masked FsPermission object for masked state @param unmasked FsPermission object for unmasked state
1105 Prints extended ACL entry details, including effective permissions. @param aclStatus current Access Control List status @param fsPerm FsPermission object containing additional permissions to consider @param entry AclEntry object representing the ACL entry to display
1106 Splits input string into substrings using comma as delimiter. @param str input string to split
1107 Returns current stream position. @return current position in bytes
1108 Checks if there are remaining bytes to read from the ByteBuffer. @throws FSException if stream is closed
1109 Initiates data block upload process. @throws IOException if an I/O error occurs during the upload
1110 Transitions the data block to a closed state.
1111 Flushes data block in writing state.
1112 Retrieves file system statistics for the specified URI. @param uri Hadoop-compatible URI to fetch statistics for
1113 Retrieves the index of the last accessed directory within the current context. @param contextCfgItemName unique context configuration item name
1114 Writes synchronization data to the SequenceFile if necessary. @throws IOException if writing fails
1115 Retrieves the total length of data written to the SequenceFile. @return The cached write position from the underlying output stream
1116 Returns the current position in the output stream and buffered data. @return The sum of the output stream position and buffered data size
1117 Retrieves the content summary for a given file or directory. @param f Path object representing the location @return ContentSummary object containing file and directory counts, length, and consumed space
1118 Constructs access control list from user and group strings. @param userGroupStrings array of ACL parts containing user/group information
1119 Parses a string into an EnumSet while allowing for the handling of unknown values. @param key unique identifier for the configuration setting @param valueString input string to process @param enumClass Class of the Enum type to map @param ignoreUnknown whether to raise an exception for unknown values @return EnumSet containing parsed enum values or null if not found
1120 Ensures current service state matches the specified expected state. @param expectedState required service state
1121 Initializes a new Service instance with specified service name and NOTINITED state. @param name unique service identifier
1122 Validates service state transition from current to proposed state. @param name service name @param state current service state @param proposed proposed service state
1123 Creates a ServiceLaunchException on service creation failure. @param exception underlying cause of the failure
1124 Verifies existence of specified configuration files. @param filenames array of configuration file names
1125 Converts a Throwable to an ExitUtil.ExitException. @param thrown the Throwable to convert
1126 Initializes the shutdown hook with a reference to the specified service. @param service Hadoop service instance
1127 Logs and records service failure details. @param exception the Exception instance representing the failure cause
1128 Records a service lifecycle event, capturing the current state and timestamp. @param none
1129 Stops a specified number of started services in reverse order. @param numOfServicesStarted number of services to stop @param stopOnlyStartedServices whether to only stop started services or all initiated ones as well
1130 Stops a service instance quietly, catching and logging any exceptions encountered. @param service Service instance to terminate
1131 Compares this UTF-8 string lexicographically to another. @param o the other UTF-8 string @return comparison result (-1, 0, or 1)
1132 Compares this UTF8 string for equality with the given object. @param o the object to compare with
1133 Compares this MD5 hash with another lexicographically. @param that the other MD5Hash object to compare with @return comparison result (-1, 0, or 1)
1134 Compares this binary object with another lexicographically. @param other BinaryComparable instance to compare with
1135 Compares this binary object to another lexicographically. @param other byte array to compare with @param off offset in the other array @param len length of the comparison region @return comparison result (-1, 0, or 1)
1136 Computes hash code using WritableComparator. @param bytes input byte array @param length number of bytes to include in the hash calculation
1137 Reads a double value from a byte array. @param bytes input byte array @param start offset to read from
1138 Sets the size of the underlying byte array. @param size new size value
1139 Checks if a file can be read. @param f the File object to check
1140 Checks if a file can be written. @param f the file to check @return true if writable, false otherwise (on non-Windows platforms)
1141 Checks if a file can be executed. @param f the File object to check @return true if executable, false otherwise
1142 Retrieves the singleton instance of ReadaheadPool, initializing it on demand. @return the shared ReadaheadPool instance or null if unavailable
1143 Returns native memory locking limit if available. @return 0 or actual limit in bytes
1144 Calculates chunked checksums for a byte array using native implementation if available, otherwise using the summer object. @param data input byte array @param dataOffset starting offset in the data array @param dataLength length of the data to process @param sums output array to store the calculated checksums @param sumsOffset starting offset in the sums array
1145 Creates a FileOutputStream for writing to the specified file with given permissions. @param f file object @param permissions native permission mode value @return FileOutputStream instance @throws IOException if file creation fails
1146 Releases all buffers from the pool, ensuring proper cleanup of encrypted data.
1147 Frees database buffers.
1148 Retrieves file status for the given file descriptor, handling Windows-specific cases. @param fd FileDescriptor to fetch stats for @return Stat object containing file metadata or null if not found
1149 Retrieves file status information for the specified Hadoop file system path. @param path affected Hadoop file system path @return Stat object containing file status info or null if not found
1150 Initializes buffer with specified limits and capacity. @param capacity maximum allowed size @param limit starting index (not used in this constructor)
1151 Initializes EnumSetWritable with an existing EnumSet and no element type. @param value input EnumSet
1152 Writes data from an input stream into the buffer. @param in input stream @param length number of bytes to read
1153 Retrieves input stream for key data. @return DataInputStream object with reset key buffer
1154 Decodes a Writable object from a Base64-encoded string. @param obj Writable object to be decoded @param newValue Base64-encoded string containing encoded data
1155 Compares two byte arrays using the registered comparator. @param b1 first byte array to compare @param s1 starting index of data in b1 @param l1 number of bytes to read from b1 @param b2 second byte array to compare @param s2 starting index of data in b2 @param l2 number of bytes to read from b2
1156 Checks if there are recoverable blocks in a given EC block group. @param blockGroup Block group to check @return true if recoverable blocks exist, false otherwise
1157 Calculates total number of erased blocks in an EC block group. @param blockGroup ECBlockGroup object @return total count of erased blocks
1158 Retrieves indices of erased ECBlock objects in the input array. @param inputBlocks array of ECBlock objects @return array of indices corresponding to erased blocks or empty if none found
1159 Validates the input buffers for decoding. @param buffers array of ByteBuffer objects to check
1160 Validates input buffers for decoding. @param buffers array of byte arrays to be decoded
1161 Initializes the erasure decoding step with input and output EC blocks, erased indexes, a raw decoder, and a raw encoder. @param inputBlocks array of input EC blocks @param erasedIndexes array of indexes where data is erased @param outputBlocks array of output EC blocks @param rawDecoder RawErasureDecoder object for decoding @param rawEncoder RawErasureEncoder object for encoding
1162 Validates input parameters for decoding. @param inputs encoded data array @param erasedIndexes indices of lost elements @param outputs output array (must match erased indexes length)
1163 Initializes the erasure coding step with input and output EC blocks, raw Reed-Solomon, and XOR encoders. @param inputBlocks array of input EC blocks @param outputBlocks array of output EC blocks @param rsRawEncoder raw Reed-Solomon encoder @param xorRawEncoder raw XOR encoder
1164 Validates input and output arrays against encoding specifications. @param inputs input array @param outputs output array
1165 Concatenates two finite field arrays by performing element-wise addition. @param p and q finite field arrays @return resulting array with concatenated elements
1166 Performs polynomial multiplication in the Galois field. @param p first polynomial coefficients @param q second polynomial coefficients @return product polynomial coefficients as an array
1167 Performs Gaussian elimination on a given square matrix. @param matrix input matrix (must be square and non-empty)
1168 Dumps an array of ECChunks to the console, prefixed with a header. @param header descriptive label @param chunks array of ECChunk objects to print
1169 Resets and retrieves all output buffers in a specified format. @param buffers array of ByteBuffer objects to reset @param dataLen desired length of the ByteBuffer
1170 Converts an array of ECChunks to a corresponding array of ByteBuffer instances. @param chunks array of ECChunk objects @return array of ByteBuffer objects or null if chunk is null
1171 Resets output buffers with empty chunks of matching length. @param buffers array of output byte buffers @param offsets starting positions for replacement in each buffer @param dataLen length of segment to reset in all buffers
1172 Retrieves a singleton instance of the GaloisField with default field size and primitive polynomial. @return GaloisField object
1173 Initializes BlockCompressorStream with an OutputStream, a Compressor, and buffer settings. @param out underlying output stream to compress data into @param compressor compression algorithm instance @param bufferSize size of the compression buffer; must be greater than zero @param compressionOverhead overhead for compression in bytes
1174 Initializes ZStandardDecompressor with specified buffer size. @param bufferSize size of direct buffers
1175 Initializes Lz4Compressor with default direct buffer size and compression mode (fast).
1176 Retrieves compression codec class by name. @param codecName unique codec identifier @return Class of CompressionCodec object or null if not found
1177 Retrieves a Compressor instance from the pool or creates a new one if not available. @param codec CompressionCodec object @param conf Configuration object @return Compressor instance or null if creation failed
1178 Fetches a Decompressor instance from the pool or creates a new one if not available. @param codec CompressionCodec object @return Decompressor instance
1179 Returns a compressor to the pool, resetting and updating its lease count. @param compressor Compressor instance to return
1180 Returns a reusable decompressor to the pool. @param decompressor Decompressor instance to return
1181 Returns the compressor type used by this codec. @throws RuntimeException if native code is missing
1182 Returns the decompressor type for ZStandard compression. @throws RuntimeException if native code is missing
1183 Initializes default ZlibCompressor with default compression level, strategy, and header.
1184 Initializes ZlibCompressor with compression level, strategy, and header from Hadoop Configuration. @param conf Hadoop configuration object
1185 Reinitializes the ZlibCompressor with a new compression configuration. @param conf Hadoop configuration object
1186 Processes and verifies the GZIP header, extracting required information.
1187 Writes text data to a DataOutput stream. @param out the output stream
1188 Reads a variable-length integer from the given stream and returns as an int. @param stream input stream to read from @return int value or throws IOException if value too large
1189 Reads a variable-length int from the stream, ensuring it falls within the specified range. @param stream input stream to read from @param lower minimum allowed value (inclusive) @param upper maximum allowed value (inclusive) @return int value or throws IOException if out of range
1190 Initializes Text object from UTF-8 encoded string input. @param string input text to initialize
1191 Searches for the first occurrence of a UTF-8 encoded string in this byte array, starting at the specified position. @param what input text to search for @param start starting index (inclusive) @return index of the found substring or -1 if not found
1192 Encodes and writes a string to the output stream. @param out DataOutput stream @param s input text to encode @return encoded string length
1193 Writes UTF-8 encoded string to output stream. @param out DataOutput stream @param s input text to encode @param maxLength maximum allowed byte length @return actual written byte length
1194 Sets UTF-8 encoded text data from a byte array. @param utf8 byte array containing text
1195 Copies UTF-8 encoded text from another Text object. @param other source Text object
1196 Reads a line from the input stream, handling various cases such as buffered head, unambiguously terminated lines, and ambiguous termination. @param str Text to accumulate the read line in @param maxLineLength Maximum allowed length of the read line @param maxBytesToConsume Maximum number of bytes to consume before newline @return Number of bytes consumed before newline or -1 on EOF
1197 Reads a custom line from the input stream, handling buffer tail and delimiter head matching. @param str Text object to store the read line @param maxLineLength maximum allowed length of the line @param maxBytesToConsume maximum bytes to consume before delimiter @return number of bytes consumed or -1 on end-of-stream
1198 Initializes the SortedMapWritable with an empty TreeMap instance.
1199 Initializes the AbstractMapWritable with an empty key-value map.
1200 Constructs a new Key instance with specified byte array and default weight. @param value byte array to store
1201 Computes the MD5 hash of a byte array. @param data input byte array
1202 Computes the MD5 hash of a UTF-8 encoded string. @param utf8 input string @return MD5Hash object representing the computed digest
1203 Initializes an MD5 hash object from a hexadecimal string representation. @param hex input hexadecimal string
1204 Creates a retry policy that retries indefinitely with fixed sleep intervals. @param sleepTime initial sleep time between attempts @param timeUnit unit of sleep time (e.g. TimeUnit.SECONDS)
1205 Creates a retry policy that attempts up to maxRetries with fixed sleep duration. @param maxRetries maximum number of retries @param sleepTime initial sleep time between attempts @param timeUnit unit of sleep time (e.g. TimeUnit.SECONDS)
1206 Configures an exponential backoff retry policy. @param maxRetries maximum number of retries @param sleepTime initial sleep time between attempts @param timeUnit unit of sleep time (e.g. TimeUnit.SECONDS)
1207 Creates a retry policy with proportional sleep and up to maximum retries. @param maxRetries maximum number of retries @param sleepTime initial sleep time between attempts @param timeUnit unit of sleep time (e.g. TimeUnit.SECONDS)
1208 Begins timing the current write lock hold.
1209 Begins tracking lock acquisition timing.
1210 Starts timing the current read lock acquisition.
1211 Creates a dynamic proxy instance for the specified interface, incorporating retry mechanisms via failover proxy provider. @param iface target interface @param proxyProvider FailoverProxyProvider instance @param methodNameToPolicyMap Map of method names to custom retry policies @param defaultPolicy Default retry policy
1212 Computes hash code based on wrapped retry policy's hash code.
1213 Compares the current MultipleLinearRandomRetry instance with another object for equality. @param obj the object to compare against
1214 Builds a MultipleIOException from aggregated exceptions. @return consolidated IOException or null if empty
1215 Returns an array of names of supported compression algorithms. @return Array of algorithm names
1216 Retrieves compression algorithm name from block state.
1217 Reads a variable-length string from the specified DataInput stream. @param in input data stream @return decoded string value or null if length is -1
1218 Reads the length of the current data chunk from the input stream. @throws IOException if the encoded length is corrupted
1219 Creates a BytesComparator instance based on the provided string identifier. @param name string identifier for the comparator type (e.g. "memcmp", "classX")
1220 Writes a data chunk to the output stream. @param last whether this is the final chunk in the sequence
1221 Writes buffered data and variable-length integer prefix. @param data byte array to write @param offset starting index in the array @param len number of bytes to write from the array
1222 Initializes the encoder with a specified output stream and size limit. @param out DataOutputStream for encoding data @param size maximum allowed chunk size in bytes
1223 Returns a custom comparator for Scanner.Entry objects when the TFile is sorted. @throws RuntimeException if the TFile entries are not sorted
1224 Checks if we have reached the end of the file. @return true if at end position, false otherwise
1225 Retrieves the index of a location nearest to the specified offset. @param offset target offset @return Location object representing the nearest block or null if not found
1226 Creates a deep copy of the current Location instance.
1227 Retrieves stored value from byte stream into provided buffer. @param buf target byte array
1228 Sets the UTF-8 encoded string from the provided input. @param string input string to set
1229 Serializes multiple Writable objects into a single byte array. @param writables variable-length integers, strings, or byte arrays @return the concatenated serialized data as a byte array
1230 Converts a UTF-8 encoded string to its byte representation. @param string input string to encode @return byte array containing the encoded string data
1231 Compresses and writes data from a DataOutputBuffer to the output stream. @param uncompressedDataBuffer buffer containing uncompressed data
1232 Copies the contents of another Writable object into this instance. @param other Writable object to copy from
1233 Appends compressed key-value pair to the sequence file. @param key unique identifier @param val associated value @throws IOException on invalid key or value class
1234 Converts the token object into a byte array for serialization. @return The serialized token as a byte array
1235 Encodes a Writable object into a Base64 string. @param obj the Writable object to encode
1236 Moves data from output buffer to input buffer.
1237 Calculates the distance between two nodes in the network topology. @param node1 first Node object @param node2 second Node object @return calculated distance or MAX_VALUE if either node is null
1238 Retrieves a node from the network topology based on its location within the same network. @param node current node to search from
1239 Retrieves all leaf nodes within the specified network scope. @param scope unique identifier for the network topology @return List of Leaf Node objects or empty list if none found
1240 Counts the number of available nodes within a specified scope, excluding provided nodes. @param scope hierarchical scope string @param excludedNodes collection of nodes to exclude from count @return total number of available nodes in the scope, or adjusted count if excluding all nodes
1241 Removes a node from the network topology and updates empty racks. @param node Node object to be removed
1242 Sorts nodes by distance, using a secondary sort for ties. @param reader Node containing the source node's location @param nodes Array of nodes to sort @param activeLen Number of active nodes in the array @param secondarySort Optional consumer to perform a secondary sort on tied nodes @param nonDataNodeReader Whether the reader is a non-data node reader
1243 Recommissions a node in the network topology, removing it from decommissioned nodes and adding it back with an empty rack. @param node Node object to recommission
1244 Transfers data to a target file channel in chunks with no wait. @param fileCh target file channel @param position current position within the file @param count number of bytes to transfer
1245 Wraps an IO exception with a custom message based on the exception type. @param destHost destination hostname @param destPort destination port number @param localHost local hostname @param localPort local port number @param exception original IO exception @return wrapped exception or original if wrapping fails
1246 Initializes an empty script mapping instance.
1247 Initializes a cached mapping instance from a raw mapping. @param rawMap underlying mapping object
1248 Constructs an InnerNodeImpl instance from a network path. @param path input network path to normalize and construct node properties
1249 Constructs an InnerNodeImpl instance with given properties. @param name unique identifier for the node @param location geographical coordinates of the node @param parent reference to the parent node in the hierarchy @param level current level in the network hierarchy
1250 Notifies connected clients by writing a single byte value to the first notification socket. @throws IOException on write failure
1251 Binds a Unix domain socket and returns a pre-configured DomainSocket instance. @param path Unix domain socket path
1252 Creates a pair of Unix domain sockets.
1253 Establishes a connection to the Unix domain socket at the specified path. @param path Unix domain socket path
1254 Sends a callback and removes the file descriptor from tracking. @param caller identifier of the caller @param entries map of file descriptors and their corresponding entries @param fdSet set of file descriptors being tracked @param fd file descriptor to be processed
1255 Closes the DomainSocket, releasing resources and interrupting blocking calls.
1256 Retrieves SelectorInfo associated with the given SelectableChannel. @param channel channel to retrieve selector info for @return SelectorInfo object or null if not found
1257 Releases a selector instance back into the pool. Updates the provider map with the latest activity time and adds to the end of the queue. @param info SelectorInfo object containing channel information
1258 Retrieves a list of IP addresses for the specified network interface. @param strInterface name of the network interface to query
1259 Retrieves a list of hostnames associated with the specified network interface. @param strInterface name of the network interface to query @param nameserver optional nameserver for reverse DNS lookup @param tryfallbackResolution whether to attempt fallback resolution if initial lookup fails @return array of hostname strings or null if unable to determine hostname
1260 Initializes LogThrottlingHelper with minimum log period and no primary recorder. @param minLogPeriodMs minimum time interval between log messages
1261 Records log values with default recorder and current timestamp. @param values log data to be recorded (variable number of double values)
1262 Retrieves encoded request parameter by name. @param name parameter identifier @return quoted parameter value or null if not found
1263 Returns the request URL with HTML characters quoted for safety. @return StringBuffer containing the encoded request URL
1264 Retrieves and encodes server name from HTTP request. @return quoted server name or original string if no quoting is needed
1265 Initializes FileMonitoringTimerTask with a single file path to monitor and corresponding actions for successful changes and monitoring failures. @param filePath the file path to monitor @param onFileChange action to execute when a change is detected @param onChangeFailure action to execute in case of monitoring failure
1266 Updates cached Record for given metrics and name. @param mr MetricsRecord to update
1267 Consumes data from the queue, processing it with the provided Consumer. @param consumer to process each item
1268 Consumes all elements from the queue using the provided Consumer. @param consumer the consumer to process each element with
1269 Increments the cache hit counter by default amount.
1270 Increments cache cleared counter.
1271 Increments the cache updated timestamp counter.
1272 Increments client backoff disconnected counter.
1273 Increments slow RPC call counter.
1274 Increments requeue calls counter.
1275 Increments RPC call successes counter.
1276 Writes data from a ByteBuffer to a WritableByteChannel. @param channel writable byte channel @param buffer ByteBuffer containing data to write @return number of bytes written, or -1 on error
1277 Reads data from a client connection and updates server metrics. @param channel ReadableByteChannel for reading client data @param buffer ByteBuffer to store read data in @return number of bytes read, or -1 on error
1278 Records a failed disk check event.
1279 Retrieves the set of group names associated with a specified user. @param user system username or identifier @return Set of group names or null if not found
1280 Unregisters metrics source from system.
1281 Configures quantiles by adding information at specified indices. @param ucName unique component name @param uvName unique variant name @param desc metric description @param lvName level name @param pDecimalFormat decimal format for percentile display
1282 Configures and records quantiles by name, description, and formatting options. @param ucName unique configuration identifier @param uvName unique value identifier @param desc metric description @param lvName level identifier @param df decimal format for displaying quantile values
1283 Initializes MetricsRegistry with given name. @param name unique metric identifier
1284 Retrieves cached metrics information by name and description. @param name unique metric identifier @param description metric description @param value associated tag value
1285 Initializes statistical state to default values for the specified metric. @param name unique metric identifier @param description metric description @param sampleName sample name for calculation @param valueName value name for calculation @param extended whether to include extended metrics
1286 Registers a new metric tag with the specified info and value. @param info MetricsInfo object @param value associated metric value @param override whether to override existing tag (optional)
1287 Updates minimum and maximum values based on new statistical input. @param value value to consider for updating min/max
1288 Calculates RPC processing time standard deviation. @return Standard deviation of last recorded processing times
1289 Inserts a single sample value into the quantile collection. @param v new sample value to be inserted
1290 Generates a snapshot of quantile values from the sample data collection. @return map of Quantile to Long values, or null if no samples exist
1291 Retrieves the top N real owners of tokens, where N is the minimum of the provided count and the total number of token owner statistics. @param n maximum number of owners to retrieve @return List of NameValuePair objects representing the top N real owners, in descending order of their associated values.
1292 Caches Unix groups for specified users, and adds netgroups if not already cached. @param groups list of user identifiers or Unix group names
1293 Retrieves all tokens from the internal map, synchronized on the subject. @return Collection of Token objects associated with the current subject
1294 Retrieves user group information. @param user unique user identifier
1295 Retrieves user group set by ID. @param user unique user identifier
1296 Retrieves Unix group memberships for a given user. @param user unique user identifier @return list of group names or empty list if not found
1297 Prints an empty message to console and diagnostic output streams.
1298 Prints system property value to console and diagnostic output streams. @param property name of the system property to print
1299 Prints environment variable value to console and diagnostic output streams. @param variable name of the environment variable to print
1300 Dumps the contents of a file to console and diagnostic output streams. @param file File object containing the data to be dumped
1301 Logs an error with specified category and message. @param category Kerberos-related category (e.g., "Kerberos Configuration") @param message detailed error description
1302 Logs a warning message with specified category and details. @param category diagnostic category @param message warning message with variable arguments
1303 Sets the user's authentication method based on the provided AuthMethod. @param authMethod AuthMethod object to match
1304 Writes an integer value to the output stream with optional SASL wrapping. @param b single byte integer value
1305 Writes data to the output stream with optional SASL wrapping. @param b input byte array
1306 Retrieves DelegationTokenInformation for the given token identifier. @param identifier unique token identifier @return DelegationTokenInformation object or null if not found
1307 Sets the external delegation token secret manager. @param secretManager new secret manager instance
1308 Updates the current master key for generating delegation tokens.
1309 Initializes a new DelegationKey instance with default values.
1310 Constructs a DelegationTokenAuthenticatedURL instance with the given authenticator and connection configurator. @param authenticator DelegationTokenAuthenticator instance or null to create a new one @param connConfigurator Connection configurator for HTTP connections
1311 Renews the security token, updating its renewal time if successful. @throws IOException on token renewal failure @throws InterruptedException if thread is interrupted during renewal
1312 Reads a single byte from the input stream, handling SASL token processing and wrapping as needed. @throws IOException on input stream errors
1313 Reads data from the input stream into a byte array, handling SASL token processing and resource management. @param b target buffer @param off offset in the buffer @param len length of data to read @return number of bytes read or -1 on error
1314 Authorizes user access based on identity and remote address. @param user UserGroupInformation object @param remoteAddress IP address of the client
1315 Checks if Hadoop login is active. @return true if login context exists, false otherwise
1316 Creates a proxy user with the given user ID and real user credentials. @param user unique user identifier @param realUser actual UserGroupInformation object
1317 Retrieves the encapsulated Real User object, or returns the provided UserGroupInformation if it's not found. @param user UserGroupInformation to fetch the Real User from @return UserGroupInformation object representing the Real User or the input UserGroupInformation
1318 Returns a string representation of this UserGroupInformation instance. @return A string describing the user's authentication and authorization context
1319 Retrieves the authentication method used by the real user. @return AuthenticationMethod enum value representing the user's authentication method
1320 Retrieves the real authentication method used by a user. @param ugi UserGroupInformation object containing user credentials @return AuthenticationMethod enum value or null if not found
1321 Creates an IPC connection context with the given protocol and user information. @param protocol the communication protocol (e.g. "http", "https") @param ugi UserGroupInformation instance containing authentication details @param authMethod the authentication method used for this connection @return IpcConnectionContextProto object representing the connection context
1322 Verifies the SSL session against a single hostname. @param host requested hostname @param session SSLSession object to validate
1323 Loads a resource from the class loader by its name. @param name resource identifier (e.g., file path or URL) @return int status code (E_NOT_FOUND or SUCCESS)
1324 Initializes this command with the given Hadoop configuration. @param conf Configuration object to store
1325 Initializes CommandFactory with given Hadoop configuration. @param conf Configuration object to store
1326 Initializes FsShell instance with provided Hadoop configuration. @param conf Configuration object to store in initialized object
1327 Initializes configured object with given Hadoop configuration. @param conf Configuration object to store
1328 Initializes configured object with given Hadoop configuration and output stream. @param conf Hadoop configuration @param out Output stream for printing results
1329 Initializes configured object with default configuration (null).
1330 Constructs a string representation of the access control list. @return Comma-separated string containing wildcard '*', user IDs, and group names
1331 Retrieves the original Ticket Granting Ticket (TGT). @return KerberosTicket object or null if not found
1332 Configures the ZooKeeper client to use SSL/TLS encryption with default X.509 utility. @param zkClientConfig ZK client configuration @param truststoreKeystore truststore and keystore details
1333 Fetches an instance of OpenSSL cipher based on the provided transformation and engine ID. @param transformation string containing algorithm, mode, and padding parameters @param engineId identifier of cryptographic engine (optional) @return OpensslCipher object or throws exceptions if invalid format or unsupported parameters
1334 Creates a new key version with the given name and uses generated key material. @param name unique identifier for the key @param options configuration settings for key generation (bit length and cipher type)
1335 Generates a new KeyVersion by rolling over existing metadata and creating a new key. @param name unique identifier for the key
1336 Adds an item to the call queue, handling client backoff and failover configurations. @param e item to be added
1337 Initializes the writable RPC protocol engine. Registers the WritableRpcInvoker with RPC_WRITABLE kind and Invocation class.
1338 Starts the StopWatch, recording the current monotonic time. @throws IllegalStateException if already running
1339 Stops the stopwatch and updates elapsed time. @return StopWatch object for method chaining
1340 Retrieves elapsed time since stopwatch started or last reset, if running. @return Elapsed time in nanoseconds
1341 Computes unique fingerprints for an array of methods. @param methods array of methods to compute fingerprints for
1342 Retrieves the protocol signature fingerprint for a given class and server version. @param protocol Class containing the ProtocolInfo annotation @param serverVersion server version number @return ProtocolSigFingerprint object or null if not found in cache
1343 Constructs a RemoteException from Attributes. @param attrs attributes containing class name and error message
1344 Retrieves the partial listing of filesystem items. @return List of filesystem items or throws IOException if an exception occurred
1345 Adds response time data for an RPC while maintaining legacy compatibility. @param callName RPC name @param schedulable Schedulable object @param details ProcessingDetails containing timing information
1346 Offers an element to the queue with specified priority. @param priority unique importance level @param e element to be added @param includeLast whether to include the last priority level @return true if successful, false otherwise
1347 Populates error response parameters with RPC-specific details. @param t the Throwable exception to process @param responseParams ResponseParams object to update
1348 Constructs a VersionMismatch exception with specified interface name and version numbers. @param interfaceName protocol interface identifier @param clientVersion client-side version number @param serverVersion server-side version number
1349 Recomputes the scheduling cache with updated priority levels. @param callCosts Map of user IDs to atomic long values
1350 Computes user's priority level based on cached or computed cost. @param identity unique user identifier @return Priority level (0-9) or 0 if not found
1351 Computes hash code combining clientId and callId.
1352 Advances the weighted round-robin scheduling algorithm and returns the current index.
1353 Retrieves client remote IP address and returns it as a string. @return IP address or null if no active call
1354 Initializes MachineList with a collection of hostname or IP address ranges. @param hostEntries Collection of allowed host entries
1355 Reads and parses memory information from "/proc/meminfo". @param readAgain ignored (always false)
1356 Calculates available physical memory size. @return Available physical memory in bytes
1357 Retrieves total CPU time accumulated since tracking began. Reads and updates CPU metrics from "/proc/stat".
1358 Calculates the current CPU usage percentage. @return Overall CPU usage as a float, divided by number of processors if available
1359 Calculates the percentage of used virtual CPU cores. @return Current usage percentage in float or a default value if unavailable
1360 Inserts a new key-value pair into the internal hash table. @param k unique key object @param v associated value object
1361 Creates a new secure TransformerFactory instance. @return the newly created TransformerFactory
1362 Creates a secure instance of the SAXTransformerFactory. @return new Secure SAXTransformerFactory object
1363 Formats storage size as a string with optional human-readable units. @param size the numeric value to format @param humanReadable whether to display in human-friendly units (e.g. KB, MB)
1364 Formats storage size as a string with optional human-readable units. @param size the numeric value to format @param humanReadable whether to display size in human-readable units (e.g. "Bytes", "KB")
1365 Formats an integer value as a human-readable string. @param number the numeric value to format @return formatted string or null if an error occurs
1366 Returns byte description with specified precision. @param len number of bytes
1367 Adds filesystem usage information to the table for a given URI. @param uri unique identifier of the file system resource @param fsStatus FsStatus object containing capacity and usage data @param mountedOnPath path where the file system is mounted
1368 Converts a byte array to a hexadecimal string representation. @param bytes input byte array
1369 Sorts data within the specified range using heap sort algorithm. @param s IndexedSortable object @param p starting index of the range @param r ending index of the range
1370 Terminates the application in response to an ExitException. @param ee the exception triggering termination
1371 Terminates service with custom exit status and error message. @param status process exit code @param message error description
1372 Terminates the application in response to an exception. @param status process exit code @param t underlying cause of termination
1373 Terminates the application with a custom exit status and error message. @param status process exit code @param msg error description
1374 Halts the JVM with a specified exit code and exception. @param status exit code indicating reason for termination @param t optional Throwable instance describing the underlying issue
1375 Creates and throws a HaltException with specified exit status and error message. @param status integer exit code @param message error message describing reason for termination
1376 Unregisters the service shutdown hook.
1377 Creates a new ArrayList instance populated with elements from an iterable. @param elements source of elements to be added
1378 Creates a new linked list with the specified iterable's contents. @param elements source of initial elements (can be null)
1379 Constructs ACL from FsPermission and list of AclEntries. @param perm FsPermission object representing owner permissions @param entries List of AclEntry objects to be included in the ACL @return fully constructed List of AclEntry objects
1380 Creates a new ArrayList instance with the given elements and optimal capacity. @param elements variable number of elements to include in the list
1381 Creates an ArrayList with expected capacity based on input size. @param estimatedSize desired list size
1382 Saves the provided object to a JSON file. @param file target file for writing serialized data @param instance object to serialize
1383 Initializes StatisticDurationTracker with IOStatisticsStore and operation settings. @param iostats instance of IOStatisticsStore @param key unique identifier for statistics tracking @param count initial counter value (0 or positive)
1384 Initializes DurationInfo object with logging and formatting details. @param log Logger instance for logging @param logAtInfo Whether to log at info level or not @param format String format for duration text @param args Variable arguments for formatted string
1385 Returns operation duration as a human-readable string. @return Formatted duration string
1386 Creates a striped CRC composer with specified parameters. @param type Type of data (CRC32 or CRC32C) @param bytesPerCrcHint number of bytes per CRC hint @param stripeLength length of data stripes in bytes @return CrcComposer instance for striped CRC computation
1387 Composes CRC values with a monomial in Galois field. @param crcA first CRC value @param crcB second CRC value @param lengthB byte length of the second CRC value @param mod modulus value
1388 Computes and returns the composite CRC value. @return Composite CRC as a byte array
1389 Saves JAR contents from input stream to specified directory using a regex filter. @param inputStream stream containing the JAR file @param toDir target directory for extraction @param name filename to save as @param unpackRegex pattern to filter files for extraction
1390 Unpacks JAR file into specified directory without filtering. @param jarFile JAR file to unpack @param toDir target directory for unpacking
1391 Finds the nth occurrence of a specified byte within a UTF-8 encoded byte array. @param utf UTF-8 encoded byte array to search @param b target byte value @param n occurrence position to find (1-based) @return index of found byte or -1 if not found
1392 Retrieves weak reference value associated with given key. @param key unique identifier @return V object value or null if not reachable
1393 Checks for lock held or wait time warnings and logs them if enabled. @param acquireTime the time when the lock was acquired @param releaseTime the time when the lock is released @param checkLockHeld whether to check lock held time or wait time
1394 Returns a formatted time string with optional difference from start time. @param formattedFinishTime initial time string @param finishTime end timestamp @param startTime start timestamp @return human-readable time string with (diff) if applicable
1395 Splits input string by comma character. @param str input string to split
1396 Converts input string to camel case. @param s input string to be converted
1397 Escapes a string by replacing a specified character with a custom escape character. @param str input string @param escapeChar the character used for escaping @param charToEscape single character to be escaped @return escaped string or null if input is null
1398 Unescapes a string by interpreting characters preceded by a specified escape character. @param str input string to unescape @param escapeChar the character that precedes special characters @param charToEscape single character that should be treated as special when escaped @return unescaped string or null if input is null
1399 Creates startup/shutdown message with specified details. @param classname name of the class @param hostname host machine name @param args command-line arguments (may be null) @return formatted string containing startup/shutdown message and version information
1400 Retrieves and formats the build version string. @return Formatted build version string
1401 Retrieves the next filtered element from the remote iterator. @throws IOException on I/O exception @throws NoSuchElementException if no more elements are available
1402 Checks for availability of more elements from the source iterator. @throws IOException on I/O error
1403 Creates a lazily initialized AutoCloseable reference from a supplier. @param supplier function that provides the AutoCloseable resource
1404 Deletes files in bulk and returns page size. @param fs Hadoop file system instance @return page size of deleted files or -1 if failed
1405 Performs bulk deletion of files. @param fs Hadoop file system @param base directory for deletions @param paths list of files to delete @return list of deleted files and their respective paths
1406 Opens a file in the Hadoop file system with specified options. @param fs the file system to use @param path the file to open @param policy optional read policy (e.g. "READ_ONLY") @param status optional FileStatus object @param length optional file length @param options additional options as key-value pairs @return an FSDataInputStream for reading the file content
1407 Reads fully from the given InputStream at specified position into ByteBuffer. @param in InputStream to read from @param position offset within InputStream @param buf target ByteBuffer for data
1408 Loads an I/O statistics snapshot from a file system location. @param fs file system instance @param path file path to the snapshot
1409 Deserializes IO statistics snapshot from JSON string. @param json JSON representation of snapshot
1410 Lazily evaluates and returns the referenced object. @throws UncheckedIOException if unavailable
1411 Initializes the builder with an iterable of items. @param items input collection to process
1412 Raises an IOException from an inner exception of a given ExecutionException. @param e the original ExecutionException to analyze
1413 Awaits the completion of a future and returns its result, handling exceptions. @param future asynchronous operation to complete @return result of completed future or throws an exception if cancelled/failed
1414 Awaits the completion of a Future within a specified timeout. @param future the asynchronous task to await @param timeout maximum time in milliseconds to wait for completion @param unit TimeUnit representing the timeout duration @return result of the completed Future, or throws exception if cancelled or timed out
1415 Re-throws inner cause of CompletionException as an IOException. @param e the original CompletionException
1416 Configures a configurable object using a Hadoop Configuration. @param theObject Object to configure @param conf Hadoop configuration to use
1417 Retrieves a Class object by name, with fallback to Configuration's getClassByName if not found in NAME_TO_CLASS cache. @param name class name to search for @param conf Hadoop Configuration instance @return loaded Class object or throws IOException if failed
1418 Loads a Java class by name from configuration or system classpath. @param conf Hadoop Configuration object, if null uses Class.forName @param className name of the class to load @return loaded Class object or throws RuntimeException on failure
1419 Retrieves a Class object by name from Hadoop configuration. @param name class name to search for
1420 Logs thread information to the provided logger. @param log target logging instance @param title human-readable title for the thread dump @param minInterval minimum interval in milliseconds between logs
1421 Logs thread information with a specified minimum interval. @param log target logger @param title human-readable title for the thread dump @param minInterval minimum time in milliseconds between logs
1422 Constructs an AbstractFSBuilderImpl instance with optional path and handle. @param optionalPath path to the file system (optional) @param optionalPathHandle handle to the file system (optional)
1423 Initializes a new Configuration instance with default loading settings.
1424 Validates an HTTP response by checking its status code and generating an exception if it doesn't match the expected status. @param conn HttpURLConnection instance @param expectedStatus expected HTTP status code
1425 Creates a new CRC32C checksum instance using Java 9 implementation if available, otherwise falls back to pure Java implementation.
1426 Retrieves shell command to fetch groups for a specified user. @param userName username to query group information for
1427 Generates Unix 'groups' command with username. @param userName target username
1428 Generates set permission command with file path for Hadoop operations. @param perm permission to be set @param recursive whether to apply recursively @param file target file path @return command array or throws exception on failure (on Windows)
1429 Generates command to check if process is alive. @param pid process identifier @return array of shell command arguments or null if not applicable
1430 Retrieves the Hadoop home directory and returns its canonical path.
1431 Retrieves a qualified Hadoop bin file for the specified executable. @param executable name of the executable to find @return File object representing the qualified executable, or null if not found
1432 Adds a new phase to the progress hierarchy and adjusts weights accordingly. @return newly added Progress object
1433 Adds multiple new phases with equal weightage. @param n number of phases to add
1434 Adds a new phase to the progress hierarchy with specified weightage and sets its current status. @param status new status value for the added phase @param weightage relative importance of the phase @return newly created Progress object for the added phase
1435 Retrieves overall progress as a float value.
1436 Creates a ZooKeeper node at the specified absolute path. @param path absolute path to the node
1437 Recursively creates the root directory and its subdirectories in ZooKeeper. @param path absolute path to the root directory @param zkAcl list of Access Control Lists for the node
1438 Constructs an UnboundMethod instance for a given method name and classes. @param className class containing the method @param methodName method name @param argClasses parameter types (varargs)
1439 Constructs an UnboundMethod instance for a given class and parameter types. @param targetClass class containing the method @param varargs parameter types (varargs)
1440 Constructs an UnboundMethod instance for a hidden method in the specified target class. @param className name of the class containing the target method @param methodName name of the hidden method to bind @param argClasses parameter classes for the method (varargs)
1441 Constructs an UnboundMethod instance for a hidden method in the specified target class. @param targetClass class containing the target method
1442 Loads an unbound method instance for a given class and method signature. @param source Class containing the target method @param returnType Expected return type of the method @param name Method name @param parameterTypes Parameter types (varargs) @return UnboundMethod object or NOOP if not found
1443 Ensures all required file handling methods are available. @throws UnsupportedOperationException if any method is unavailable
1444 Checks if bulk deletion is available. @return true if bulk delete method is available, false otherwise
1445 Checks if file system's open file functionality is available. @return true if open file method is accessible, false otherwise
1446 Checks if the byte buffer read fully available method is accessible. @return true if method is available, false otherwise
1447 Checks if the InputStream can be read fully. @param in InputStream to check @return true if readable, false otherwise
1448 Checks if I/O statistics snapshot creation is available. @return true if feature is available, false otherwise
1449 Checks if I/O statistics context is enabled. @return true if context is available, false otherwise
1450 Verifies an unbound method's availability. @param method UnboundMethod instance to check
1451 Builds an unbound method instance and binds it to the given target object. @param receiver the object to bind to @return a bound method instance @throws NoSuchMethodException if method not found
1452 Creates an unbound method instance and binds it to the specified target object. @param receiver the object to bind the method to @return a bound method instance
1453 Constructs a static method instance with checks for existing method. @throws NoSuchMethodException if method not found
1454 Builds and returns an unbound static method instance.
1455 Loads and initializes all registered file systems.
1456 Computes Jenkins hash for a file. @param args command line arguments (filename expected)
1457 Initializes a HashFunction instance with specified parameters. @param maxValue maximum value for hash function @param nbHash number of hashes to compute @param hashType unique identifier for hash type
1458 Protected constructor to prevent instantiation and ensure proper usage through factory methods.
1459 Approximates the count of a given Key object in the Bloom filter. @param key input key to be searched @return approximate count or 0 if not found
1460 Adds a false positive key to the retouched Bloom filter's vector. @param key input key to be associated with false positives
1461 Removes a key from the RetouchedBloomFilter's internal data structure. @param k Key object to be removed @param vector List of lists containing keys and their weights
1462 Finds the index of the minimum-weight hash value in the provided array. @param h array of hash indices
1463 Identifies the index of the key with maximum false positive weight. @param h array of hash values
1464 Calculates the ratio of key weights to false positive weights for each position in the filter. @param vectorSize size of the filter vectors
1465 Retrieves and prints a resource from the class loader by its name. @param name resource identifier (e.g., file path or URL)
1466 Displays usage instructions and error codes for the FindClass utility. @return unique error code indicating operation status
1467 Inserts an element into the priority queue. @param element the new element to add @return true if inserted, false otherwise
1468 Creates a new TreeSet instance with the specified iterable elements. @param elements source of elements to include in the TreeSet
1469 Creates a HashSet instance from an iterable of elements. @param elements input iterable to be converted
1470 Creates a HashSet with initial capacity based on the number of input elements. @param elements variable-length array of elements to be added to the set
1471 Runs a specified program with command-line arguments. @param args array of command-line arguments @return 0 on success, -1 on error
1472 Adds a column to the table listing with specified title, justification, and wrapping behavior. @param title column header text @param justification text alignment (e.g. left, right) @param wrap whether to enable text wrapping within the column
1473 Retrieves time duration from configuration property. @param name configuration property name @param vStr input time duration string @param unit desired TimeUnit for the converted value
1474 Appends a XML property to the given configuration document. @param doc the target document @param conf the configuration element @param propertyName the name of the property to append @param redactor optional redactor for sensitive data (see ConfigRedactor)
1475 Updates configuration with deprecated key information. @param deltas array of DeprecationDelta objects containing updated key info
1476 Binds the given listener for a range of ports. @param listener ServerConnector instance to bind @param startPort starting port number in the range
1477 Adds target information as environment variables based on HA service state and configuration. @param target the HAServiceTarget object @param environment the map of environment variables to update
1478 Reads data from a PositionedReadable stream into a ByteBuffer. Supports direct and non-direct buffers. If the buffer is direct, uses vectored reading operations, otherwise reads directly into the array. @param stream PositionedReadable stream to read from @param range FileRange object specifying the data to read @param buffer ByteBuffer containing the destination buffer
1479 Validates vectored read file ranges, ensuring they are properly aligned and disjoint.
1480 Sets the buffer state to CACHING and associates it with a future action. @param actionFuture future representing the caching operation
1481 Updates the buffer state to a new value while validating the current state. @param newState new buffer state @param expectedCurrentState array of valid states for the current transition
1482 Validates that a file path points to an existing directory. @param path the file path to check @param argName name of the argument being validated
1483 Validates that a path exists as a regular file. @param path the file path to check @param argName name of the argument being validated
1484 Checks if the given block number is the last valid block. @param blockNumber numeric value to check
1485 Calculates start offset based on block number and size. @param blockNumber numeric value to calculate from
1486 Retrieves the state of a data block by number. @param blockNumber numeric index of the block
1487 Sets the state of an individual data block. @param blockNumber numeric identifier for the block @param blockState new state value (one of State enum values)
1488 Calculates the block number based on the given offset. @param offset numeric file offset value
1489 Aggregates the given IOStatistics into the provided snapshot. @param snapshot target IOStatisticsSnapshot to aggregate into @param statistics source IOStatistics to merge with the snapshot @return true if aggregation is successful, false otherwise
1490 Saves an IOStatisticsSnapshot to a file system location. @param snapshot snapshot to save @param fs file system instance @param path file path to save the snapshot @param overwrite whether to overwrite existing file (default: false)
1491 Retrieves current I/O statistics counters. @param source input value @return Map of counter names to values (long)
1492 Returns a snapshot of gauge statistics. @param source input value
1493 Returns a snapshot of minimum statistics from the given source. @param source input value @return Map of minimum values by metric name
1494 Retrieves and returns the current maximum statistics snapshot. @param source input value @return Map of maximum I/O statistics
1495 Calculates mean I/O statistics for a given snapshot. @param source input IOStatisticsSnapshot @return Map of statistic names to pairs of sample count and total value
1496 Creates an immutable copy of this flag set.
1497 Constructs a mutable or immutable FlagSet from an enumeration class and optional initial flags. @param enumClass Class of the Enum type to represent @param prefix string prefix for enum names @param flags initial flags (null for default)
1498 Closes the file system and logs debug information. @throws IOException if an I/O error occurs during closure
1499 Closes all FileSystem instances in the cache, either selectively or en masse. @param onlyAutomatic whether to close only automatically managed file systems
1500 Serializes an IOStatisticsSnapshot object to a JSON string representation. @param snapshot input snapshot to be serialized @return JSON string representation of the snapshot or null if null input
1501 Writes bytes to a specified Hadoop file path. @param fileContext FileContext object for file management @param path Path to the target file @param bytes Byte array to be written @return FileContext object after writing operation
1502 Writes a list of lines to a file using the specified charset. @param fileContext File context for writing @param path Target file path @param lines Iterable of lines to write @param cs Charset to use for encoding @return Updated file context
1503 Writes a CharSequence to the specified file path. @param fs Hadoop FileContext @param path target file or directory path @param charseq character sequence to write @param cs charset for encoding and decoding @return the original FileContext instance
1504 Creates an output stream builder for writing to a specified file system path. @param path location to write data to
1505 Creates a new output stream with default settings and overwrite enabled. @param path file system path to create the output stream for
1506 Appends data to an existing file in Hadoop FS. @param path location of the file to append to
1507 Creates an output stream builder to append data to the specified file. @param path file path in Hadoop FS
1508 Lists file statuses in the specified directory. @param f Path object representing the location
1509 Lists file statuses based on default filter. @param files array of Path objects to check
1510 Creates a new mutable integer counter with the given MetricsInfo and initial value. @param info essential metrics information @param iVal starting counter value
1511 Creates and registers a new MutableCounterLong with the given MetricsInfo and initial value. @param info essential metrics information @param iVal initial counter value
1512 Creates a synchronized MutableGaugeLong instance with the given MetricsInfo and initial value. @param info MetricsInfo object to validate and store @param iVal initial long integer value for the gauge
1513 Creates a new mutable gauge with initial float value and registers it. @param info MetricsInfo object to validate and store @param iVal Initial gauge value as a float
1514 Creates a new synchronized MutableGaugeInt with specified initial integer value. @param info MetricsInfo object to validate and store @param iVal Initial integer value for the gauge @return A newly created MutableGaugeInt instance
1515 Resolves filesystem link using a user-defined function. @param fileContext Hadoop FileContext @param path Path to resolve @param fn Function to process filesystem links @return Result of the resolution or throws UnresolvedLinkException/IOException if not resolved successfully
1516 Creates a GlobBuilder instance with the specified FileContext. @param fileContext FileContext instance for Hadoop file system operations
1517 Creates a GlobBuilder instance with the specified Hadoop file system. @param filesystem Hadoop file system instance
1518 Checks if the asynchronous call is complete. @return true if done, false otherwise
1519 Retrieves and returns the asynchronous result. @return AsyncGet object or null if not set
1520 Refreshes and updates used disk space by recalculating folder usage.
1521 Copies statistical data from another MeanStatistic instance. @param that source MeanStatistic object
1522 Converts IO statistics source to string representation. @param source Object containing IO statistics source @return Formatted string representation or empty string on failure
1523 Formats wrapped IO statistics as a string. @return Formatted string representation of IO statistics
1524 Returns formatted string representation of IOStatistics, or a placeholder if no statistics are available.
1525 Converts IOStatistics to a pretty string representation. @param statistics nullable IOStatistics object @return formatted string or empty if null
1526 Creates a duration tracker instance using the provided factory. @param factory optional duration tracker factory for customization @param statistic identifier for tracked operation
1527 Deletes a block file and evicts the corresponding cache entry. @param elementToPurge Entry object containing file path and block details
1528 Converts StorageStatistics to IOStatistics. @param storageStatistics input statistics object @return constructed IOStatistics instance or throws exception if not built
1529 Adds an atomic long counter to the statistics with the specified key. @param key unique identifier for the counter @param source atomic long value provider
1530 Adds an integer-counting function to the statistics with the specified key. @param key unique identifier for the counter @param source AtomicInteger instance providing the count value
1531 Adds a mutable long-counting counter to the statistics. @param key unique identifier for the counter @param source mutable counter providing the value
1532 Registers an atomic long-valued gauge function evaluator. @param key unique identifier for the gauge function @param source atomic long value source
1533 Registers an atomic integer gauge with the specified key and evaluates to its current value. @param key unique identifier for the gauge @param source AtomicInteger instance providing the gauge value
1534 Adds an atomic long minimum statistic to the IO statistics instance. @param key unique identifier for the function @param source AtomicLong instance providing the value
1535 Adds an atomic integer minimum statistic to the IO statistics instance. @param key unique identifier for the function
1536 Adds a function to track the maximum atomic long value of a dynamic statistic. @param key unique identifier for the statistic @param source atomic long value source
1537 Adds an atomic integer maximum statistic. @param key unique identifier @param source atomic integer to track maximum value of
1538 Registers failure handling mechanisms, including interrupt escalation and uncaught exception handling.
1539 Accepts a connection on the Unix domain socket. @return connected DomainSocket instance or throws IOException
1540 Shuts down the socket, decrementing resource reference count. @throws IOException if an I/O error occurs during shutdown
1541 Sends file descriptors over the Unix domain socket. @param descriptors array of FileDescriptor objects @param jbuf byte buffer for data transmission @param offset starting position in the buffer @param length number of bytes to transmit
1542 Receives file input streams from a Unix domain socket. @param streams array of FileInputStream objects to populate @param buf byte buffer for receiving data @param offset starting position in the buffer @param length number of bytes to receive @return total bytes received or -1 on error
1543 Creates a new IOStatisticsContext instance. @param key unique identifier
1544 Verifies chunked checksums within the provided data. @param data ByteBuffer containing the data to verify @param checksums ByteBuffer containing the expected CRC values @param fileName file name where verification occurs @param basePos starting position in the file for verification @throws ChecksumException if verification fails
1545 Decrypts and processes input stream data. @param decryptor active Decryptor instance @param inBuffer input ByteBuffer to process @param position current data processing position @param iv initialisation vector for decryption @return calculated padding value or 0 if not needed
1546 Resets stream offset, initializes decryptor, and updates padding. @param offset new stream offset
1547 Writes encrypted data to the output stream. @param b byte array containing data @param off starting index in the byte array @param len number of bytes to write
1548 Flushes and encrypts buffered data before writing it to the destination. @throws IOException if an I/O error occurs
1549 Compiles a glob pattern into a regular expression. @param globPattern input pattern to compile
1550 Retrieves total bytes read based on specified distance. @param distance file system operation distance @return total bytes read at the given distance
1551 Creates a file in Hadoop file system with specified options. @param f Path to the file @param absolutePermission File permissions @param flag CreateFlag enum set for file creation and appending @return FSDataOutputStream object or null if failed
1552 Initializes AbstractFileSystem with URI and scheme validation. @param uri input file system URI @param supportedScheme expected scheme to validate against @param authorityNeeded whether authority is required in the URI @param defaultPort default port for authority (if needed)
1553 Encodes input byte arrays into encoded output using erasure coding. @param inputs array of input byte arrays to encode @param outputs array of output byte arrays for encoded data
1554 Encodes the specified input ByteBuffers into output buffers based on the provided configuration. @param inputs array of input ByteBuffer arrays @param outputs array of output ByteBuffer arrays
1555 Initializes ArrayPrimitiveWritable with primitive array data. @param value The primitive array data to be stored
1556 Returns the canonicalized URI from the underlying file system. @return Canonical URI with default port set if necessary
1557 Checks if the underlying output stream supports a specific capability. @param capability name of the capability to look for
1558 Releases a BufferData object from the pool and updates its state. @param data the BufferData object to be released
1559 Releases done BufferData objects from the pool, updating their state and resource utilization.
1560 Initializes the CachingBlockManager instance with given parameters. @param blockManagerParameters instance containing configuration and initialization settings
1561 Fetches file contents into a ByteBuffer for the specified block number. @param blockNumber unique block identifier @param buffer destination ByteBuffer for data
1562 Calculates the absolute position of the buffer within the file. @return The current position of the buffer, in bytes, from the start of the file
1563 Checks if the buffer has been fully read. @return true if all bytes have been read, false otherwise
1564 Sets the absolute position of the buffer within the file. @param pos new position to set
1565 Retrieves current thread's IO statistics context, either enabled or empty. @return Active IO stats context for the current thread or an empty one if disabled.
1566 Sets custom I/O statistics context for current thread. @param statisticsContext IOStatisticsContext instance or null to remove
1567 Retrieves instance configurations for the given type. @param type string to filter metrics configuration @return Map of MetricsConfig instances keyed by instance ID
1568 Trims command-line arguments to the specified position and parses remaining options. @param args input argument array @param pos minimum valid argument index
1569 Displays an error message and increments error count. @param message user-provided error text
1570 Creates a PathHandle for the given file status, with optional modification time and change allowance. @param stat FileStatus object representing the file @param opts Options.HandleOpt array containing optional parameters (e.g., Data, Location) @return LocalFileSystemPathHandle instance or throws an exception if invalid conditions are met
1571 Returns an array of HandleOpt instances with modification and change allowance set to false. @return Array of HandleOpt objects
1572 Creates an array of HandleOpt instances with specified options. @return Array containing changed and moved option instances
1573 Returns an array of HandleOpt instances with specified options. @return Array containing changed and moved HandleOpt instances
1574 Returns an array of HandleOpt instances with modification and change allowance set to true.
1575 Initializes ShellCommandExecutor with command string, working directory, environment variables, and execution timeout. @param execString array of shell command strings @param dir working directory for command execution @param env map of environment variables to set @param timeout execution timeout in milliseconds @param inheritParentEnv whether to inherit parent's environment variables
1576 Initializes and starts the space usage refresh thread if a positive interval is set. @param runImmediately whether to start refreshing immediately
1577 Creates a private token by cloning the current public token with specified service. @param newService the service associated with the new private token
1578 Checks for unsupported URI schemes with relative paths. @throws HadoopIllegalArgumentException if the URI is absolute and relative
1579 Checks if path is absolute and URI scheme/authority are null. @return true if path is absolute with empty scheme/authority, false otherwise
1580 Determines if this path represents an absolute URI. @return true if the path starts with a separator after removing Windows drive, false otherwise
1581 Validates the given file system path against this AbstractFileSystem instance. @param path Hadoop file system path to be validated
1582 Writes this file's status to the output stream in protocol buffer format.
1583 Validates upload arguments for multipart file upload. @param filePath absolute Hadoop file system path @param inputStream input stream containing the file data @param partNumber part number of the current upload segment @param uploadId unique identifier for the ongoing upload process @param lengthInBytes total size of the uploaded file in bytes
1584 Aborts all ongoing uploads under the specified Hadoop file system path. @param path absolute file system path to abort uploads for
1585 Skips data in the Hadoop filesystem stream, ensuring integrity through checksum verification. @param n number of bytes to skip @return actual number of bytes skipped, up to remaining file length
1586 Applies a user mask to the current permission, inverting specific actions. @param umask FsPermission object containing the user mask @return Updated FsPermission object with inverted actions
1587 Retrieves file permissions from an SFTP file entry. @param sftpFile LsEntry object containing file attributes
1588 Initializes permissions from an integer representation. @param mode integer containing permission values
1589 Returns default file system permissions. @return FsPermission object with default values (rwxrwxrwx)
1590 Returns default directory permissions. @return FsPermission object with rwxrwxrwx permissions
1591 Returns default file permissions.
1592 Returns default FsPermission for cache pool. @return FsPermission object with read and execute permissions for owner, group, and others
1593 Parses a Unix symbolic permission string into an FsPermission object. @param unixSymbolicPermission string representation of file system permissions @return FsPermission object or null if input is invalid
1594 Prints ACL entries for a single scope. @param aclStatus current Access Control List status @param fsPerm FsPermission object containing additional permissions to consider @param entries list of AclEntry objects representing the ACL entries to display
1595 Converts an ACL specification to a string representation. @param aclSpec list of AclEntry objects
1596 Initializes permissions from a string representation. @param mode string containing permission values
1597 Reads up to <code>length</code> bytes from the underlying ByteBuffer into the given array. @param b buffer to store read data @param offset starting position in the buffer @param length maximum number of bytes to read @return actual number of bytes read, or -1 if end of stream reached
1598 Calculates the compressed size of written data. @return The difference between current and start positions
1599 Adjusts column widths for displaying file and directory information. Calculates maximum lengths for replication, length, owner, group, and Erasure Coding policy fields. Updates the display format string to accommodate the calculated maximum lengths.
1600 Retrieves quota usage details for a given file or directory. @param f Path object representing the location
1601 Retrieves used space for a given file or directory. @param path Path object representing the location
1602 Initializes a new Service instance with specified service name and NOTINITED state. @param name unique service identifier
1603 Transitions service to a new state. @param proposed target state @return previous state
1604 Instantiates and returns an instance of the specified service class. @param conf Hadoop Configuration object @return Service instance or throws exception on failure
1605 Verifies equality with another binary comparable object. @param other BinaryComparable instance to compare with
1606 Sets the byte array data with specified offset and length. @param newData new byte array to set @param offset starting index in newData @param length number of bytes to copy
1607 Sets and retrieves key data from input buffer. @param key BytesWritable object for storing key data @return length of the encapsulated byte array
1608 Lists files in a directory. @param dir the File object representing the directory @return array of file names or null if an I/O error occurs
1609 Validates directory access by checking its existence, readability, writability, and executability. @param dir the File object to check
1610 Locks memory for a direct ByteBuffer. @param buffer the buffer to lock @param len length of data in buffer
1611 Creates a SharedFileDescriptorFactory instance with the specified prefix and paths. @param prefix Unique file descriptor identifier prefix @param paths Array of Hadoop storage paths for shared file descriptors @return A new SharedFileDescriptorFactory instance or throws IOException if creation fails
1612 Writes checksum chunks to the underlying FSOutputSummer. @param b input byte array @param off starting offset in the data array @param len length of the data to process
1613 Calculates chunked checksums for the provided data using the specified algorithm. @param data ByteBuffer containing the data to be checksummed @param checksums ByteBuffer where the calculated checksum values will be stored
1614 Releases and frees buffers used by the input/output streams.
1615 Initializes buffer with specified limits and capacity. @param capacity maximum allowed size
1616 Decodes security token from Base64-encoded URL string. @param newValue Base64-encoded string containing encoded data
1617 Retrieves the erased blocks from an ECBlockGroup, including data and parity units. @param blockGroup ECBlockGroup object @return array of ECBlock objects representing erased blocks
1618 Skips to the next marker in the compressed input stream. @param marker target marker value @param markerBitLength length of the marker in bits @return true if the marker is found, false otherwise
1619 Initializes CBZip2OutputStream with specified block size and output stream. @param out OutputStream to write compressed data to @param blockSize Block size for compression (1-9)
1620 Initializes BlockCompressorStream with an OutputStream and Compressor. @param out underlying output stream to compress data into @param compressor compression algorithm instance
1621 Initializes DecompressorStream with input stream and buffer sizes. @param in the underlying input stream to read from @param decompressor the decompression algorithm to use @param bufferSize the size of the main data buffer
1622 Writes data to the compressed output stream in chunks, handling potential I/O errors and enforcing maximum input size constraints. @param b the byte array containing the data @param off the starting offset within the array @param len the length of the data chunk
1623 Initializes the ZStandardCompressor with specified compression level and buffer sizes. @param level compression level @param bufferSize input/output buffer size
1624 Creates a compressed output stream using the specified codec and compressor pool. @param codec CompressionCodec object @param conf Configuration object @param out OutputStream to write to @return CompressionOutputStream or null if creation failed
1625 Closes the Writer, releasing resources and flushing any pending data. @throws IOException if an error occurs during closure
1626 Creates a CompressionInputStream with a specified compression codec and configuration settings. @param codec CompressionCodec object @param conf Configuration settings @param in InputStream to compress @return CompressionInputStream instance or null on failure
1627 Closes the reader, returning decompressors to the pool and closing associated resources.
1628 Returns a Zlib compressor instance based on native library availability. @param conf Hadoop Configuration object @return Compressor instance (native or built-in)
1629 Retrieves a native Zlib direct decompressor instance based on configuration. @param conf Hadoop Configuration object
1630 Retrieves a Decompressor instance based on native Zlib library availability. @param conf Hadoop Configuration object (not used) @return ZlibDecompressor if native Zlib is loaded, else BuiltInZlibInflater
1631 Stores a new delegation key, associating its ID with the key and storing it in the SQL database. @param key DelegationKey object to be stored
1632 Updates the delegation key by serializing it and storing it in both SQL database and local cache. @param key DelegationKey object to be updated
1633 Reads a string from the given input stream with safe length checks. @param in input stream to read from @param maxLength maximum allowed length for the string @return decoded string or throws IOException/IllegalArgumentException if invalid
1634 Skips a variable-length encoded integer from the input stream. @param in input stream to read and skip from
1635 Reads compressed data from a stream into a DataInputBuffer. @param buffer DataInputBuffer to store decompressed data @param filter CompressionInputStream for decompression
1636 Reads a variable-length string from the input stream within the specified maximum length. @param in input stream to read from @param maxLength maximum allowed string length (inclusive) @return decoded string or throws IOException if out of range
1637 Writes a string to the given DataOutput stream. If null, writes -1 as a variable-length integer indicator. @param out DataOutput stream @param s input string
1638 Builds token service endpoint from InetSocketAddress. @param addr network address to build token service endpoint for @return Text representation of the token service endpoint or null if invalid
1639 Creates a Token object from the provided Protobuf representation. @param tokenProto serialized Token data in Protobuf format @return Token instance with populated identifier, password, kind, and service fields
1640 Writes an enumeration value to the output stream. @param out DataOutput stream @param enumVal Enum object to write
1641 Writes user and group information along with file system permissions to output stream. @param out DataOutput stream @param username user identifier @param groupname group name @param permission FsPermission object
1642 Initializes Text object from UTF-8 encoded byte array. @param utf8 byte array containing text data
1643 Creates a new Text object by copying UTF-8 encoded text from another Text object. @param utf8 source Text object
1644 Reads a line from the input stream based on custom or default configuration. @param str Text object to store the read line @param maxLineLength maximum allowed length of the line @param maxBytesToConsume maximum bytes to consume before delimiter @return number of bytes consumed or -1 on end-of-stream
1645 Returns the length of the UTF-8 encoded text.
1646 Copies key-value pairs from another SortedMapWritable.
1647 Copies entries from another MapWritable instance.
1648 Creates a retry policy that retries operations up to a maximum total time with fixed sleep intervals. @param maxTime maximum total time for retries @param sleepTime initial sleep time between attempts @param timeUnit unit of sleep time (e.g. TimeUnit.SECONDS)
1649 Creates a dynamic proxy instance for the specified interface with retry mechanisms. @param iface target interface @param proxyProvider FailoverProxyProvider instance @param retryPolicy RetryPolicy instance
1650 Creates a dynamic proxy instance for the specified interface, with retry mechanisms via failover proxy provider. @param iface target interface @param implementation implementation object to be proxied @param methodNameToPolicyMap Map of method names to custom retry policies
1651 Initializes Writer with output stream, compression settings, and configuration. @param fout FSDataOutputStream for file output @param compressionName name of the compression algorithm @param conf Hadoop Configuration object
1652 Constructs a TFileIndex with the specified entry count, reading index entries from the input stream. @param entryCount number of key-value pairs in the index @param in input data stream containing index entry data @param comparator byte comparator for sorting keys
1653 Checks for end-of-file condition. @throws IOException if encoded length is corrupted
1654 Flushes buffered data to the output stream.
1655 Compares this Entry's key with the given RawComparable using TFile comparator. @param key RawComparable object to compare with
1656 Initializes the UTF-8 object with an encoded string. @param string input string to set
1657 Computes the MD5 hash of a UTF-8 encoded string. @param string input string to encode
1658 Synchronizes block data to output stream and resets internal states. @throws IOException if writing fails
1659 Retrieves the unique tracking ID associated with the token. @return The MD5 hash of the serialized token as a hexadecimal string
1660 Encodes the token to a URL-safe string. @throws IOException if encoding fails
1661 Adds a new node to the network topology. @param node Node object to add
1662 Removes a node from the network topology and updates empty racks. @param node Node object to be removed
1663 Decommissions a node from the network topology, adding it to the decommissioned nodes list and removing any associated empty racks. @param node Node object representing the entity to be decommissioned
1664 Sorts nodes by distance from a given source node. @param reader Node containing the source node's location @param nodes Array of nodes to sort @param activeLen Number of active nodes in the array @param secondarySort Consumer for secondary sorting on tied nodes
1665 Sorts nodes by distance from the given network location using a secondary sort for ties. @param reader Node containing the source node's location @param nodes Array of nodes to sort @param activeLen Number of active nodes in the array @param secondarySort Optional consumer to perform a secondary sort on tied nodes
1666 Initializes SocketInputStream with a readable byte channel and timeout. @param channel valid ReadableByteChannel object @throws IOException if channel is invalid or null
1667 Initializes Writer with a writable byte channel and operation timeout. @param channel writable byte channel for data transfer @throws IOException if channel is invalid or null
1668 Processes the asynchronous RPC response, handling timeouts and exceptions. @param call the Call object containing the RPC request @param connection the Connection object for IPC communication @param timeout maximum waiting duration in milliseconds @param unit TimeUnit representing the time unit of the timeout @return Writable object or null if not found or interrupted
1669 Initializes a cached mapping instance from a raw mapping.
1670 Initializes a cached mapping instance from a raw script-based mapping. @param rawMap underlying mapping object
1671 Creates a parent node with given name. @param parentName unique identifier for the parent node
1672 Adds a DomainSocket and associated Handler to the watcher. @param sock DomainSocket instance @param handler associated event handler
1673 Removes a Unix domain socket and notifies connected clients. @param sock the DomainSocket to remove
1674 Selects operations on a channel with specified timeouts. @param channel selectable channel @param ops operations to select for @param timeout total timeout in milliseconds @return number of operations selected or 0 if timed out
1675 Retrieves the default IP address for a specified network interface. @param strInterface name of the network interface to query
1676 Retrieves hostnames associated with the specified network interface. @param strInterface name of the network interface to query
1677 Retrieves the default hostname for a specified network interface. @param strInterface name of the network interface (may be null or "default") @param nameserver optional nameserver for reverse DNS lookup (may be null) @param tryfallbackResolution whether to attempt fallback resolution if initial lookup fails @return default hostname string or cached value if no resolution is needed
1678 Loads the first metrics configuration from a list of files, using the specified prefix. @param prefix prefix for the loaded configuration @param fileNames comma-separated list of file names to load configurations from @return MetricsConfig object representing the loaded configuration or an empty config if none found
1679 Fetches user group set by ID, tracing and caching results. @param user system username or identifier @return Set of group names or null if not found
1680 Shuts down JVM metrics system singleton instance.
1681 Stops the server, interrupting handlers and listeners, shutting down metrics updaters.
1682 Stops the web server and associated resources.
1683 Initializes MutableQuantiles object with specified metrics and interval settings. @param name unique metric identifier @param description metric description @param sampleName sampling context for valueName @param valueName value being sampled @param interval time interval in seconds for quantile computation
1684 Creates a new mutable statistic with the specified name and properties. @param name unique metric identifier @param desc metric description @param sampleName sample name for calculation @param valueName value name for calculation @param extended whether to include extended metrics
1685 Initializes statistical state to default values. @param name unique metric identifier @param description metric description @param sampleName sample name for calculation @param valueName value name for calculation
1686 Sets context metrics with the specified name. @param name unique context identifier
1687 Registers a new metric with the specified info and value. @param name unique metric identifier @param description metric description @param value associated metric value @param override whether to override existing metric (optional)
1688 Adds elapsed time to specific metric in a thread-safe manner. @param name unique metric identifier @param elapsed time value to add to the metric's statistics
1689 Publishes metrics to registered sinks. @param buffer MetricsBuffer object containing data to be published @param immediate true for immediate publication, false for enqueue at logical time
1690 Copies statistical state to another SampleStat instance. @param other target SampleStat object
1691 Logs slow RPC calls with excessive processing time. @param methodName name of the method that encountered a slow RPC @param call details about the RPC call
1692 Refreshes the cached Unix group and netgroup mappings by clearing the current cache, retrieving all netgroups, and re-caching them.
1693 Prints diagnostic separator to console and output streams.
1694 Prints a formatted message to console and diagnostic output streams, surrounded by title lines for emphasis. @param format message format string @param args variable number of arguments for the message
1695 Logs and throws a custom Kerberos-related failure with specified category and message. @param category unique failure category @param message descriptive error message
1696 Creates a remote user with the given credentials. @param user unique user identifier @param authMethod authentication method for the user @return UserGroupInformation object representing the created user
1697 Starts threads for removing expired delegation tokens. @throws IOException if an I/O error occurs
1698 Regenerates the master key by updating its expiry date and re-adding it to storage.
1699 Constructs an instance of DelegationTokenAuthenticatedURL with default authenticator and configurator.
1700 Constructs a DelegationTokenAuthenticatedURL instance with the given authenticator. @param authenticator DelegationTokenAuthenticator instance or null to create a new one
1701 Constructs a DelegationTokenAuthenticatedURL instance with a given connection configurator. @param connConfigurator Connection configurator for HTTP connections
1702 Simplifies SASL-enabled input stream reading by delegating to read(byte[],int,int). @param b target buffer
1703 Checks if user credentials are Kerberos-based and login context exists. @return true if using Kerberos credentials with active Hadoop login, false otherwise
1704 Checks if user credentials are from a Kerberos ticket. @return true if using Kerberos ticket, false otherwise
1705 Initializes the default factory with the specified SSL channel mode. @param preferredMode desired SSL channel mode
1706 Default constructor; initializes CommandFactory with null configuration.
1707 Initializes an empty HarFileSystem object.
1708 Initializes a HarFileSystem object from an existing FileSystem. @param fs underlying file system instance
1709 Initializes FsShell instance with default configuration.
1710 Initializes configured object with given Hadoop configuration. @param conf Hadoop configuration
1711 Initializes Command object with default output and error streams.
1712 Resolves hostname to InetAddress object by exact name or search path. @param host unqualified or qualified hostname to resolve
1713 Writes access control list to output stream. @param out DataOutput stream
1714 Creates a ZooKeeper instance with optional SSL/TLS encryption configuration. @return ZooKeeper object
1715 Retrieves the size of a value queue associated with given key name. @param keyName identifier string @return queue size or 0 if not found
1716 Retrieves at most 'num' values from the value queue associated with given key name. @param keyName identifier string @param num maximum number of values to retrieve @return List of retrieved values or throws IOException/ExecutionException if an error occurs.
1717 Drains and clears the value queue associated with a given key name. @param keyName unique identifier string
1718 Adds an item to the call queue with client backoff and failover handling. @param e item to be added
1719 Ensures the writable RPC engine is initialized. @param none
1720 Converts elapsed time to specified unit. @param timeUnit desired time unit (e.g. TimeUnit.SECONDS) @return Elapsed time in specified unit
1721 Retrieves protocol signature based on client-side method hash codes and server version. @param clientMethodsHashCode unique identifier for client methods @param serverVersion server version number @param protocol Class containing the ProtocolInfo annotation @return ProtocolSignature object or null if not found in cache
1722 Decays the current costs by applying the decay factor to each user's cost. @param callCosts Map of user IDs to atomic long values
1723 Computes user's priority level based on cached or computed cost. @param obj Schedulable instance to fetch identity for @return Priority level (0-9) or 0 if not found
1724 Removes the next element from the queue based on weighted round-robin scheduling. @return the removed element or null if no elements are available
1725 Closes the network connection, cleaning up streams, SASL resources, and calls.
1726 Initializes a Globber instance with file system, pattern filter, and symlink resolution settings. @param fs Hadoop file system object @param pathPattern globbing pattern to match against @param filter optional filter for selecting files @param resolveSymlinks whether to resolve symbolic links in the file system
1727 Initializes MachineList with a string of host entries and uses default InetAddressFactory. @param hostEntries string containing hostname or IP address ranges
1728 Creates a new instance of SysInfo tailored to the current operating system. @return an instance of SysInfoLinux or SysInfoWindows based on the OS
1729 Calculates total physical memory size. @return Physical memory size in bytes
1730 Calculates available virtual memory size by summing physical and swap space. @return Total available virtual memory in bytes
1731 Applies XSLT transformation using a secure TransformerFactory. @param styleSheet InputStream for stylesheet, @param xml InputStream for XML document, @param out Writer to output transformed result
1732 Generates a string representation of storage metrics based on provided options and types. @param qOption whether to include quota usage @param hOption whether to display human-readable units @param tOption whether to use getTypesQuotaUsage for type-specific metrics @param xOption whether to exclude snapshot metrics @param types list of storage types to consider
1733 Formats storage metrics for a snapshot. @param hOption whether to display human-readable units
1734 Computes capacity based on maximum available memory and percentage. @param percentage percentage of max memory to use (0-100) @param mapName name of the map for logging purposes
1735 Fills the internal buffer with data from the file stream. @throws IOException if an I/O error occurs during reading
1736 Reads and discards a specified number of bytes from the file stream. @param len number of bytes to discard @return actual number of bytes discarded
1737 Returns a UTF-8 encoded string representation of the bytes. @throws RuntimeException if an I/O error occurs while reading the data
1738 Returns a string representation of the UTF-8 encoded data. @throws IOException if an I/O error occurs during encoding or decoding
1739 Creates a string from UTF-8 encoded byte array. @throws IOException if an I/O error occurs during data processing
1740 Reads and decodes a UTF-8 encoded string from the input stream. @param in input stream containing UTF-8 encoded data @throws IOException if an I/O error occurs
1741 Validates the RPC response header. @param header Response header to check
1742 Converts a single byte to its hexadecimal string representation. @param b input byte
1743 Handles uncaught exceptions by logging the error and terminating the application. @param thread the Thread that encountered the exception @param exception the Throwable instance of the uncaught exception
1744 Exits service with usage message.
1745 Handles uncaught exceptions in threads within a Hadoop environment. Logs the exception and coordinates shutdown procedures as needed. @param thread the thread that threw the exception @param exception the uncaught Throwable instance
1746 Terminates the application with custom exit status and error message. @param exitCode process exit code @param message error description
1747 Terminates the application with a custom exit status. @param status process exit code
1748 Terminates the application with a custom exit status and error message. @param status process exit code @param msg error description
1749 Creates and throws a HaltException with specified exit status and default error message. @param status integer exit code
1750 Sorts IndexedSortable data structure using quicksort algorithm. @param s indexed sortable object @param p starting index @param r ending index
1751 Creates a new AclStatus instance with specified owner, group, and permissions. @param owner file system owner @param group file system group @param stickyBit whether the sticky bit is set @param entries ACL entries @param permission FsPermission object
1752 Parses a string representing one or more ACLs into a list of ACL objects. @param aclString comma-separated string containing ACLs in the format scheme:id:perm @return List<ACL> containing parsed ACLs, or an empty list if input is null
1753 Parses authentication string into a list of ZKAuthInfo objects. @param authString comma-separated authentication data in the form "scheme:auth" @return List of ZKAuthInfo instances or empty list if input is null
1754 Preserves file attributes from the source to the destination. @param src PathData object representing the source file @param target PathData object representing the destination file @param preserveRawXAttrs boolean flag indicating whether to preserve raw xattrs
1755 Constructs a minimal ACL with user, group, and other permissions. @param perm FsPermission object defining user permissions @return List of AclEntry objects representing the minimal ACL
1756 Tracks duration for a given key with initial counter value. @param key unique identifier for statistics tracking @param count initial counter value (0 or positive) @return pre-configured duration tracker instance or new one if key exists
1757 Initializes StatisticDurationTracker with default operation settings. @param iostats instance of IOStatisticsStore @param key unique identifier for statistics tracking
1758 Initializes DurationInfo object with logging and formatting details. @param log Logger instance for logging @param format String format for duration text
1759 Waits for a CompletableFuture to complete, handling exceptions and logging duration. @param future the CompletableFuture to wait on
1760 Waits for CompletableFuture to complete, ignoring any exceptions. @param future nullable CompletableFuture instance
1761 Creates a CRC composer with specified parameters. @param type Type of data (CRC32 or CRC32C) @param bytesPerCrcHint number of bytes per CRC hint
1762 Updates the composite CRC value based on input data and stripe position. @param crcB new CRC value @param bytesPerCrc number of bytes processed in this update
1763 Returns a formatted time string with optional difference from start time. @param dateFormat date format to use @param finishTime end timestamp @param startTime start timestamp
1764 Escapes a string by replacing commas with a custom escape character. @param str input string
1765 Unescapes a string by interpreting characters preceded by the default escape character. @param str input string to unescape
1766 Creates a startup/shutdown message with specified class name and host details. @param classname name of the service class @param args command-line arguments (may be null)
1767 Retrieves the next element from the source iterator while handling I/O errors and resource closure. @throws NoSuchElementException if no more elements are available @throws IOException on I/O error
1768 Awaits completion of a future and returns its result, handling exceptions. @param future asynchronous operation to complete
1769 Awaits completion of all futures in the provided collection and returns their combined results. @param collection asynchronous operations to complete @return List of completed future results or throws an exception if any fail
1770 Awaits the completion of a Future within a specified timeout. @param future asynchronous task to await @param timeout maximum time in milliseconds to wait for completion @param unit TimeUnit representing the timeout duration
1771 Awaits completion of all futures in a collection within a specified time duration. @param collection Collection of asynchronous tasks to await @param duration Maximum time to wait for completion (e.g., Duration.ofMillis(1000)) @return List of results from completed futures, or throws exception if cancelled or timed out
1772 Cancels all asynchronous tasks and awaits their completion within a specified time limit. @param collection Collection of futures to be cancelled and awaited @param interruptIfRunning Whether to interrupt running futures when cancelling @param duration Maximum time in milliseconds to wait for completion @return List of results from completed futures, or empty list if all timed out
1773 Creates a new instance of the specified class with the given arguments and configures it. @param theClass Class to instantiate @param conf Hadoop configuration for the instance @param argTypes Parameter types for instantiation @param values Arguments for instantiation @return Instance of the specified class
1774 Retrieves the Class object for the deserialized key, with fallback to Configuration's getClassByName if not found. @return loaded Class object or throws IOException if failed
1775 Retrieves the Class object associated with the current value, using cached configuration. @return loaded Class object or throws RuntimeException if failed
1776 Loads a class by name and logs its details if loaded successfully. @param name class name to search for @return SUCCESS on successful load, or error code (E_NOT_FOUND, E_LOAD_FAILED) otherwise
1777 Creates a new instance of the specified class. @param name class name to be instantiated @return int status code (SUCCESS or error code)
1778 Creates a new Configuration instance with default settings.
1779 Loads configuration for rolling file system sink. @return Configuration object
1780 Initializes FindClass instance with default Hadoop configuration.
1781 Initializes configured object with default Hadoop configuration.
1782 Initializes ReconfigurableBase object with given Hadoop configuration. @param conf Configuration object to store
1783 Retrieves canonical path of qualified Hadoop bin file. @param executable name of the executable to find
1784 Executes a shell command and waits for its completion, handling timeouts and exit codes. @param getExecString returns the command to execute @param inheritParentEnv whether to inherit parent process environment variables @param dir directory where the command should be executed @param redirectErrorStream whether to redirect error stream to output stream @throws IOException if an I/O error occurs
1785 Adds a new phase to the progress hierarchy and sets its status. @param status new status value for the added phase
1786 Recursively creates the root directory in ZooKeeper. @param path absolute path to the root directory
1787 Checks if a file system has a specific capability for a given path. @param fs Hadoop file system instance @param path file path to check @param capability capability name to verify @return true if capability exists, false otherwise
1788 Checks if the Hadoop file system has a specific streaming capability. @param object Object to check capabilities for @param capability capability name to verify @return true if capability is available, false otherwise
1789 Retrieves I/O statistics counters from the specified source. @param source source of I/O statistics
1790 Retrieves I/O statistics gauges from a specified source. @param source the source to retrieve gauges from
1791 Retrieves minimum I/O statistics from the specified source. @param source source of I/O statistics
1792 Retrieves maximum I/O statistics values from specified source. @param source source of I/O statistics
1793 Calculates mean I/O statistics from specified source. @param source source of statistics (e.g., snapshot or aggregation)
1794 Invokes this unbound static method with the given arguments. @param args variable number of arguments to pass to the method @return result of method invocation
1795 Constructs an UnboundMethod instance for a given class and parameter types. @param className class containing the method @param argClasses parameter types (varargs)
1796 Constructs an UnboundMethod instance for a hidden method in the specified target class. @param className name of the class containing the target method @param argClasses parameter classes for the method (varargs)
1797 Loads a static unbound method instance from the given class. @param source Class containing the target method @param returnType Expected return type of the method @param name Method name @param parameterTypes Parameter types (varargs) @return UnboundMethod object or NOOP if not found
1798 Checks if provided object represents an I/O statistics source. @param object the object to check @return true if source is valid, false otherwise
1799 Checks if I/O statistics are available and can be invoked on a given object. @param object the object to check for I/O statistics capability
1800 Checks if IO statistics snapshot creation is available and can be invoked for a given object. @param object the object to check @return true if feature is available and invocation succeeds, false otherwise
1801 Checks if I/O statistics context is enabled. @return true if feature and underlying method are available, false otherwise
1802 Deletes files in bulk with specified page size. @param fileSystem Hadoop FileSystem instance @param path Path to delete files from @return number of deleted pages
1803 Deletes files in bulk from a Hadoop file system. @param fs Hadoop file system instance @param base Base path for deletion @param paths Collection of paths to delete @return List of deleted file paths and their corresponding statuses
1804 Opens a file in the Hadoop file system. @param fs FileSystem instance to operate on @param path Path to the file to open @param policy File access policy (e.g., "READ") @param status Optional FileStatus object for the file @param length Optional file size in bytes @param options Additional file system options @return FSDataInputStream object or throws IOException if an error occurs
1805 Reads from an InputStream fully into a ByteBuffer at the specified position. @param in InputStream to read from @param position Position within the ByteBuffer to start reading @param buf ByteBuffer to store the data
1806 Verifies availability of I/O statistics features.
1807 Verifies availability of I/O statistics context.
1808 Initializes LightWeightCache with specified parameters. @param recommendedLength minimum required capacity @param sizeLimit maximum allowed cache size @param creationExpirationPeriod period for creation expiration (must be > 0) @param accessExpirationPeriod period for access expiration (must be >= 0)
1809 Initializes a Filter instance with specified parameters. @param vectorSize vector size for the filter @param nbHash number of hashes to compute @param hashType unique identifier for hash type
1810 Removes the given Key object from the filter, throwing exceptions if the key is null or not a member.
1811 Adds false positive keys to the retouched Bloom filter from a collection. @param coll collection of Key objects to be added as false positives
1812 Adds false positive keys to the retouched Bloom filter. @param keys list of keys to associate with false positives
1813 Adds false positive keys to the retouched Bloom filter's vector. @param keys array of keys to be associated with false positives
1814 Clears the Bloom filter's internal data structure at a specified index. @param index index to clear (must be within bounds)
1815 Removes the key with the lowest weight-to-false-positive ratio. @param h array of hash values to consider
1816 Drives program execution based on command-line arguments. @param argv array of command-line arguments
1817 Retrieves CredentialEntry for the given name from the provider. If the name is deprecated, attempts to fetch it using old names or new keys. @param provider CredentialProvider instance @param name unique configuration property identifier @return CredentialEntry object or null if not found
1818 Adds a single deprecated configuration key with replacement keys and message. @param key deprecated configuration key @param newKeys array of replacement keys @param customMessage user-friendly description of change
1819 Initializes and binds all server listeners with configured ports. @throws Exception if an error occurs during listener initialization
1820 Validates user and SSH port configuration from input string. @param argStr optional user and SSH port configuration as a string
1821 Clears the parent ZooKeeper node recursively. @throws IOException if deletion fails
1822 Checks for and fences an old active instance if necessary. @return Stat object or null if no old node exists
1823 Reads a byte range from a PositionedReadable stream into a ByteBuffer. @param stream PositionedReadable stream to read from @param range FileRange object specifying the data to read @param allocate IntFunction to allocate a ByteBuffer of the correct size @return CompletableFuture containing the read ByteBuffer, or an exception if reading fails
1824 Requests caching of a specific block with the given block number. @param data BufferData to be cached
1825 Sets the prefetch state and associates it with a future asynchronous action. @param actionFuture Future object representing the prefetching action
1826 Sets the buffer to a ready state. @param expectedCurrentState array of valid states for the current transition
1827 Retrieves the size of a specific data block. @param blockNumber numeric value to determine block size
1828 Calculates relative offset within a data block. @param blockNumber numeric value to calculate from @param offset numeric offset value @return calculated relative offset as int
1829 Initializes BlockData with file size and block size. @param fileSize total file size @param blockSize size of each data block
1830 Calculates the block number based on the buffer's start offset. @throws Exception if the buffer is invalid
1831 Closes all FileSystem instances in the cache.
1832 Closes all file systems associated with the given UserGroupInformation. @param ugi the UserGroupInformation instance @throws IOException if an I/O error occurs during closure
1833 Writes a CharSequence to the specified file path using UTF-8 encoding. @param fs Hadoop FileContext @param path target file or directory path @param charseq character sequence to write @return original FileContext instance
1834 Writes bytes to a specified file system path. @param fs target file system @param path location to write data to @param bytes data to be written @return the original file system
1835 Writes a list of lines to a file in the specified file system. @param fs target file system @param path location to write data to @param lines iterable of line content @param cs character set for encoding @return the original file system
1836 Writes a CharSequence to a specified file system path. @param fs target file system @param path location to write data to @param charseq data to be written @param cs character set for encoding @return the original file system instance
1837 Initializes BlockLocation object with provided block attributes. @param names array of block names @param hosts array of associated hostnames @param topologyPaths array of storage topology paths @param offset data block's offset in bytes @param length data block's length in bytes @param corrupt flag indicating potential corruption status
1838 Creates a new mutable integer counter with given name, description, and initial value. @param name unique metric identifier @param desc metric description @param iVal starting counter value
1839 Creates and registers a new MutableCounterLong with the given metric info and initial value. @param name unique metric identifier @param desc metric description @param iVal initial counter value
1840 Creates a synchronized MutableGaugeLong instance with the given metrics info and initial value. @param name unique metric identifier @param desc metric description @param iVal initial long integer value for the gauge
1841 Creates a new mutable gauge with initial float value and registers it. @param name unique metric identifier @param desc metric description @param iVal Initial gauge value as a float
1842 Creates a new synchronized MutableGaugeInt with specified initial integer value. @param name unique metric identifier @param desc metric description @param iVal Initial integer value for the gauge
1843 Creates a deep copy of this MeanStatistic instance.
1844 Logs I/O statistics at debug level. @param log Logger instance @param message Message prefix for logging @param source Object containing IO statistics source
1845 Returns a string representation of the FSInputStream, including IO statistics source if applicable.
1846 Converts IOStatistics to a pretty string representation. @param statistics nullable IOStatistics object
1847 Measures duration of IO operation invocation. @param factory optional duration tracker factory for customization @param statistic identifier for tracked operation @param input InvocationRaisingIOE object to be executed @return Duration object representing measured duration
1848 Tracks duration of a supplier function while handling potential failures. @param factory optional duration tracker factory for customization @param statistic identifier for tracked operation @param input Supplier function to execute and track duration for @return result of the executed input function
1849 Adds a block entry to the linked list, potentially evicting an existing entry if cache size exceeds maxBlocksCount. @param entry Entry object to be added
1850 Constructs an IO statistics store instance with specified counters, gauges, minimums, maximums, and mean statistics. @param counters list of unique identifiers for atomic long counters @param gauges list of unique identifiers for atomic long gauge functions @param minimums list of unique identifiers for atomic long minimum statistics @param maximums list of unique identifiers for atomic long maximum statistics @param meanStatistics list of unique identifiers for mean statistic calculations
1851 Reads data from the underlying input stream into a provided byte array. @param b buffer to store decrypted data @param off offset within the buffer where reading should start @param len maximum number of bytes to read @return actual number of bytes read, or -1 if end-of-stream is reached
1852 Decrypts data in the provided buffer at the specified position. @param position current data processing position @param buffer input byte array containing encrypted data @param offset starting offset within the buffer to process @param length number of bytes to decrypt @throws IOException if an I/O error occurs during decryption
1853 Decrypts data from the input stream using a provided decryptor. @param filePosition current position in the file @param buf ByteBuffer to read and write decrypted data @param length total number of bytes to decrypt @param start starting position within the buffer for decryption
1854 Decrypts input data from the provided ByteBuffer. @param buf input buffer containing encrypted data @param length total bytes to decrypt @param start starting position in the input stream
1855 Seeks to a specified position within the underlying stream. @throws IOException if an I/O error occurs during seeking
1856 Skips over a specified number of bytes in the underlying input stream. @param n the number of bytes to skip @return the actual number of bytes skipped
1857 Initializes GlobFilter with a custom file pattern and default filter. @param filePattern glob pattern to compile
1858 Initializes GlobFilter with a custom file pattern and optional filter. @param filePattern glob pattern to compile @param filter additional filtering condition
1859 Unpacks a tar archive into the specified directory. @param inputStream input tar archive stream @param untarDir target directory for unpacking @param gzipped whether the archive is gzip compressed
1860 Retrieves and returns a synchronized map of all statistics. @return Synchronized map of URI to Statistics object
1861 Clears file system statistics by resetting all aggregated data.
1862 Encodes input and output ECChunks into buffers based on configuration. @param inputs array of input ECChunk objects @param outputs array of output ECChunk objects
1863 Creates a new instance of BlockingThreadPoolExecutorService with specified limits and keep-alive time. @param activeTasks number of actively executing tasks @param waitingTasks maximum number of waiting tasks in the queue @param keepAliveTime time to wait before shutting down idle threads @param unit time unit for keepAliveTime @param prefixName unique identifier prefix for thread names
1864 Sets data for the buffer, validating input values and updating internal state. @param bufferData BufferData object containing managed data @param startOffset starting offset of the buffer within the file (inclusive) @param readOffset current read position of the buffer
1865 Retrieves current thread's IO statistics context.
1866 Resets current thread's IO statistics context.
1867 Creates snapshot of current thread's I/O statistics context. @return IOStatisticsSnapshot object representing current stats
1868 Aggregates IO statistics from a given source. @param source object containing IO statistics @return true if aggregation successful, false otherwise
1869 Runs a task in parallel on each item from the provided source, handling exceptions and reverting successful operations as needed. @throws E, IOException execution or iterator exceptions
1870 Sets custom I/O statistics context for current thread. @param statisticsContext IOStatisticsContext instance or null to remove
1871 Sets custom I/O statistics context for current thread. @param ioStatisticsContext IOStatisticsContext instance or null to remove
1872 Resets thread's I/O statistics context. @param none
1873 Displays an error message and increments error count for InterruptedIOException. @param e the Exception instance to process
1874 Creates a path handle from a file status and optional creation options. @param stat FileStatus object @param opt Optional handle creation options (may be null or empty)
1875 Adds a new security token for the specified alias, potentially updating private tokens. @param alias unique identifier for the service @param t Token object to add or replace existing one
1876 Encrypts input data using OpenSSL CTR cipher. @param inBuffer input data in direct ByteBuffer @param outBuffer output buffer in direct ByteBuffer
1877 Decrypts input data using CTR cipher. @param inBuffer input data in direct ByteBuffer @param outBuffer output buffer in direct ByteBuffer
1878 Initializes the mount point with provided regex patterns and configuration. @throws IOException if illegal settings string is encountered
1879 Resolves a child path relative to its parent, ensuring compatibility with URIs. @param parent the parent path @param child the child path to resolve
1880 Initializes a Path object from a file system path string. @param pathString input URI to be parsed
1881 Constructs a Path object with the given URI scheme, authority, and file system path. @param scheme URI scheme @param authority URI authority @param path input file system path to normalize
1882 Returns a string representation of this path, using URI conversion. @param uri input URI object @param inferredSchemeFromPath whether the scheme was inferred from the path
1883 Retrieves the path component of the given Hadoop file system Path. @param p the input Path object @return the path part as a URI string, or throws an exception if invalid
1884 Resolves a file system path by validating and retrieving its status. @param p Hadoop file system path to be resolved @return Path object representing the location or null if not found
1885 Creates a new data output stream for the specified file. @param f Hadoop file system path to be created @param createFlag Creation flags (e.g., overwrite existing files) @param opts Optional configuration options (e.g., block size, buffer size) @return A new FSDataOutputStream instance or throws an exception if creation fails
1886 Applies a user mask to the current permission, returning an instance with inverted actions. @param umask FsPermission object containing the user mask
1887 Creates directory with default permissions. @param f Path to create directory at
1888 Sets the file permissions. @param permission desired FsPermission object or null for default
1889 Creates a non-recursive file stream with default permissions. @param f file path
1890 Creates an immutable FS permission instance. @param permission short integer containing permission values
1891 Appends a key-value pair to the SequenceFile. @param key Object with correct class type @param val Object with correct class type @throws IOException if key or value has incorrect class type or negative length keys
1892 Returns the compressed size of written data. @return Compressed size in bytes
1893 Skips bytes within the bounded file stream, respecting its length boundaries. @param n number of bytes to skip @return new position in the file or throws IOException if an error occurs
1894 Retrieves used space for a given file or directory in HAR filesystem. @param path Path object representing the location
1895 Retrieves used space for a given file or directory. @param path Path object representing the location
1896 Initializes and starts the JVMPauseMonitor instance with default configuration.
1897 Initiates service lifecycle; performs startup tasks. @throws ServiceStateException if service fails to start
1898 Transitions the service to a new state. @param newState desired state @return previous state
1899 Prints the default Kerberos realm and logs a warning if it's null.
1900 Verifies equality with another BytesWritable instance. @param right_obj BinaryComparable object to compare with
1901 Verifies equality with another Text object. @param o another Text instance to compare with
1902 Sets byte array data from a BytesWritable object. @param newData BytesWritable object containing new byte data
1903 Decodes erasure-coded data using specified coding options. @param inputs array of input ByteBuffer objects @param erasedIndexes array of erased indexes @param outputs array of output ByteBuffer objects
1904 Decodes multiple input byte arrays with specified erased indexes and stores the results in output byte arrays. @param inputs array of byte arrays to be decoded @param erasedIndexes array of indices indicating which bytes are erased in each input buffer @param outputs array of byte arrays to store the decoded results
1905 Skips to the next block marker in the compressed input stream. @return true if the block marker is found, false otherwise
1906 Initializes CBZip2OutputStream with specified output stream and default block size. @param out OutputStream to write compressed data to
1907 Initializes DecompressorStream with input stream and default buffer size. @param in underlying input stream to read from @param decompressor the decompression algorithm to use
1908 Creates a compressed output stream using the LZ4 codec and compressor pool. @param out OutputStream to write to
1909 Creates an output stream with BZip2 compression using the codec pool. @param out OutputStream to write to
1910 Creates a compressed output stream using the ZStandard codec and compressor pool. @param out OutputStream to write to
1911 Creates a compressed output stream using the Snappy Codec and compressor pool. @param out OutputStream to write to
1912 Closes the Writer instance, releasing resources and flushing pending data.
1913 Finalizes the output stream and returns resources to the compressor pool. @throws IOException if an I/O error occurs during finalization
1914 Creates a CompressionInputStream with LZ4 codec and configuration settings. @param in InputStream to compress
1915 Creates a CompressionInputStream from an input stream. @param in InputStream to compress @return CompressionInputStream instance or null on failure
1916 Creates a CompressionInputStream with this codec and configuration. @param in InputStream to compress
1917 Creates a CompressionInputStream from an input stream using the Snappy codec. @param in InputStream to compress
1918 Closes the reader, returning decompressors and closing associated resources.
1919 Closes the input reader and returns decompressors to the pool. @throws IOException if an I/O error occurs
1920 Creates a native Zlib direct decompressor instance based on configuration. @param conf Hadoop Configuration object
1921 Writes the file header to a SequenceFile in Hadoop environment. @throws IOException if an I/O error occurs during writing
1922 Writes this credentials object to a DataOutput stream. @throws IOException if an I/O error occurs
1923 Reads a block of data from the input stream, decompressing and processing it as needed. @throws IOException if an error occurs during reading or decompression
1924 Seeks to the current value in the sequence file. @throws IOException if seeking fails
1925 Reads a variable-length string from the input stream with no length limit. @param in input stream to read from
1926 Retrieves a delegation key by its ID from the local cache or SQL database. @param keyId unique identifier of the key to retrieve @return DelegationKey object or null if not found
1927 Selects a delegation token using the provided credentials and URL. @param url URL to authenticate with @param creds Credentials containing the token to select @return Token object representing the selected delegation token or null if not found
1928 Retrieves server-side authentication token based on the specified SASL authentication type. @param authType SASL authentication method @return Token object or null if unsupported protocol
1929 Sets the token service endpoint and notifies the token service. @param token token object @param addr network address for token service endpoint
1930 Creates a Token object from the provided Protobuf representation. @param tokenProto serialized Token data in Protobuf format
1931 Retrieves a fixed byte string from cache or creates one if not found. @param key Text object to be converted @return ByteString representation of the input text
1932 Creates a new token by cloning the provided Token object. @param other The token to clone, must not be null
1933 Reads a line from the input stream with custom length constraints. @param str Text object to store the read line @param maxLineLength maximum allowed length of the line
1934 Reads a line from the input stream with default maximum length and bytes constraints. @param str Text object to store the read line @return number of bytes consumed or -1 on end-of-stream
1935 Initializes an InstrumentedLock with the specified parameters. @param name unique identifier for this lock @param logger logging instance for issuing warnings and logs @param minLoggingGapMs minimum time gap between log entries (ms) @param lockWarningThresholdMs threshold for issuing a warning when lock is held longer than this (ms)
1936 Creates a dynamic proxy instance for the specified interface with retry mechanisms. @param iface target interface @param implementation actual object to be proxied @param retryPolicy policy governing retries on failures
1937 Calculates wait time and retries if necessary. @throws InterruptedIOException if retry is interrupted
1938 Initializes Writer with FSDataOutputStream and configuration. @param fsdos output stream for writing data @param minBlockSize minimum block size in bytes @param compressName compression algorithm to use @param comparator sorting comparator instance @param conf Hadoop configuration object
1939 Determines if the current data chunk is the last one. @throws IOException if encoded length is corrupted
1940 Returns the remaining data in the current chunk. @throws IOException if end-of-file condition is corrupted
1941 Compares this Entry's key with the given byte array using TFile comparator. @param buf underlying byte array @param offset starting index for the byte array view @param length size of the byte array view
1942 Closes the writer, synchronizing block data and releasing resources. @throws IOException if writing fails
1943 Appends a key-value pair to the compressed data stream. @param key Object representing the key @param val Object representing the value
1944 Appends raw key-value data to the output buffer, compressing when full. @param keyData key byte array @param keyOffset starting offset in key byte array @param keyLength length of key data @param val ValueBytes object containing value data
1945 Clones a Writable object into another. @param dst destination writable object @param src source writable object to clone from
1946 Selects a random node within the specified network topology scope, excluding specified nodes and scopes. @param scope hierarchical scope string @param excludedNodes collection of nodes to exclude from selection @return chosen node or null if no valid node is found
1947 Sorts nodes by distance from a given source node (datanode). @param reader Node containing the datanode's location @param nodes Array of nodes to sort @param activeLen Number of active nodes in the array
1948 Sorts nodes by distance from the given network location. @param reader Node containing the source node's location @param nodes Array of nodes to sort @param activeLen Number of active nodes in the array
1949 Initializes SocketInputStream with a socket and timeout. @param socket underlying network socket @param timeout read operation timeout in milliseconds
1950 Initializes SocketInputStream with a socket and its associated timeout. @param socket valid Socket object @throws IOException if socket is invalid or null
1951 Initializes writer with a network socket and operation timeout. @param socket network socket for data transfer @param timeout operation timeout in milliseconds
1952 Adds a Node to the network topology, handling node group and rack relationships. @param node Node object to be added
1953 Performs I/O operation on a channel with specified options and timeouts. @param buf ByteBuffer object containing data to read/write @param ops socket operations (read/write/connect)
1954 Establishes a socket connection to the specified endpoint with a timeout. @param channel socket channel @param endpoint target address @param timeout total timeout in milliseconds
1955 Waits for I/O operations on the channel with specified timeouts. @param ops socket operations to wait for
1956 Retrieves default hostname for a specified network interface. @param strInterface name of the network interface (may be null or "default")
1957 Retrieves default hostname with fallback resolution disabled. @param strInterface name of the network interface (may be null or "default") @param nameserver optional nameserver for reverse DNS lookup (may be null) @return default hostname string
1958 Reinitializes metrics system with default values.
1959 Initializes MutableQuantiles object with specified metrics and interval settings. @param name unique metric identifier @param description metric description @param sampleName sampling context for valueName @param valueName value being sampled @param intervalSecs time interval in seconds for quantile computation
1960 Creates a new MutableQuantiles object and registers it in the metrics map. @param name unique metric identifier @param desc metric description @param sampleName sampling context for valueName @param valueName value being sampled @param interval time interval in seconds for quantile computation
1961 Creates a new mutable statistic with the specified properties. @param name unique metric identifier @param desc metric description @param sampleName sample name for calculation @param valueName value name for calculation
1962 Creates a new metric with the specified info and value. @param name unique metric identifier @param description metric description @param value associated metric value
1963 Adds elapsed time to specific metric in a thread-safe manner. @param name unique metric identifier @param value time value to add to the metric's statistics
1964 Adds elapsed queue time to specific metric based on priority level. @param priority scheduling priority @param queueTime time spent in the queue
1965 Records processing time for a specific priority level. @param priority integer representing the priority level @param processingTime elapsed time to add to metrics
1966 Records overall processing time for an RPC call. @param rpcCallName unique name of the RPC call @param overallProcessingTime total processing time to add
1967 Validates the Kerberos configuration file by searching for it in various locations and printing its contents. @throws IOException if an I/O error occurs while accessing the file
1968 Verifies a given condition and logs or fails accordingly. @param condition boolean condition to verify @param category unique failure category @param message descriptive error message @param args variable arguments for logging or failing @return true if condition is met, false otherwise
1969 Fails if the given condition is true. @param condition boolean expression to evaluate @param category unique failure category @param message descriptive error message @param args variable number of additional arguments for logging
1970 Creates a remote user with the given credentials and default authentication method. @param user unique user identifier
1971 Verifies token integrity by comparing provided password with stored one. @param identifier unique token identifier @param password token password to verify @throws InvalidToken if passwords do not match or other verification issues occur
1972 Spawns a thread for auto-renewing keytab credentials if necessary. @param none
1973 Initializes Count object with command-line arguments and Hadoop configuration. @param cmd Array of command-line arguments @param pos Starting position for argument extraction @param conf Hadoop configuration object
1974 Establishes a ZooKeeper connection and configures authentication. @return ZooKeeper object or null if connection fails
1975 Retrieves next value from the value queue associated with given key name. @param keyName identifier string
1976 Resolves a hostname to an InetAddress, optionally measuring lookup time. @param hostname the hostname to resolve @return InetAddress object or throws UnknownHostException if not found
1977 Retrieves protocol signature based on server-side version and client methods hash codes. @param server VersionedProtocol object representing the server @param protocol String identifier for the protocol @param clientVersion long value indicating client version number @param clientMethodsHash int unique identifier for client methods @return ProtocolSignature object or null if not found in cache
1978 Checks if a method is supported by the server. @param methodName The name of the client-side method @param parameterTypes Variable-length array of parameter types @return true if supported, false otherwise
1979 Validates RPC headers for correctness. @param header RpcRequestHeaderProto object containing request headers
1980 Retrieves a wrapped value from the buffer for the given message. @param message Message to retrieve value for @param buffer RpcWritable.Buffer containing the value @return Retrieved object or throws RpcServerException if deserialization fails
1981 Retrieves and removes the next element from the queue based on weighted round-robin scheduling. @return the removed element or null if no elements are available
1982 Handles version mismatch between server and client by sending an error response. @param clientVersion the version of the client that cannot communicate with the server
1983 Calculates total virtual memory size by adding physical memory and swap space. @return Virtual memory size in bytes
1984 Initializes a new instance of the input stream with specified parameters. @param fs file system @param p file path @param start starting position in bytes @param length data length to read @param bufsize buffer size
1985 Evicts expired entries from the cache up to EVICTION_LIMIT.
1986 Evicts entries to maintain cache size within limits.
1987 Generates a string representation of storage metrics based on quota usage and human-readable options. @param qOption whether to include quota usage @param hOption whether to display human-readable units @param xOption whether to exclude snapshot metrics
1988 Generates a string representation of storage metrics based on provided options and types. @param qOption whether to include quota usage @param hOption whether to display human-readable units @param tOption whether to use getTypesQuotaUsage for type-specific metrics @param xOption (not used) excluded due to unused parameter @param types list of storage types to consider
1989 Formats quota usage information as a string or returns summary for specified storage types. @param hOption whether to display human-readable units @param tOption whether to include type-specific quota usage @param types list of StorageType enum values (if tOption is true)
1990 Waits for a collection of CompletableFutures to complete, handling exceptions and logging duration. @param futures list of futures to wait on
1991 Optionally waits for a CompletableFuture to complete, handling exceptions. @param future the CompletableFuture to wait on, or null for no action
1992 Updates the composite CRC value by processing input data in chunks. @param crcBuffer byte array containing CRC values @param offset starting position for processing @param length number of bytes to process @param bytesPerCrc stripe position increment per update
1993 Updates CRC values in bulk by reading from input stream. @param checksumIn DataInputStream containing CRC values @param numChecksumsToRead number of CRC values to process @param bytesPerCrc number of bytes processed per update
1994 Creates a new instance of the specified class with default arguments and configuration. @param theClass Class to instantiate @param conf Hadoop configuration for the instance
1995 Retrieves the key class from the MapFile data. @return loaded Class object or throws IOException if failed
1996 Retrieves the Class object associated with the current value from the MapFile. @return loaded Class object
1997 Runs the FindClass utility based on command line arguments. @param args array of strings containing action and resource name @return int status code (SUCCESS or error code)
1998 Constructs an instance with a mandatory file system path and file context. @param fc required FileContext object @param path required file system path
1999 Creates a new DataChecksum object from a given byte array with specified offset. @param bytes input byte array @param offset starting position within the byte array @return DataChecksum object or null if creation fails
2000 Creates a new DataChecksum object from input stream parameters. @param in input stream containing checksum type and bytes per checksum @return DataChecksum object or null if creation fails
2001 Periodically runs a shell command, respecting the specified interval. @throws IOException if an I/O error occurs during execution
2002 Aggregates I/O statistics snapshot with optional additional statistics. @param snapshot serialized snapshot to aggregate @param statistics optional additional statistics
2003 Creates an I/O statistics snapshot. @return Snapshot object or null if unavailable
2004 Creates I/O statistics snapshot with specified source. @param source object providing IO statistics @return IOSTatisticsSnapshot object or null if not available
2005 Converts I/O statistics snapshot to JSON string. @param snapshot serialized statistics snapshot
2006 Retrieves I/O statistics snapshot from JSON string. @param json JSON representation of statistics
2007 Loads I/O statistics snapshot from file system. @param fs file system to load from @param path file path of the snapshot
2008 Retrieves I/O statistics snapshot from a specified source. @param source object containing I/O statistics data @return I/O statistics snapshot or null if not available
2009 Saves an I/O statistics snapshot to a file system. @param snapshot I/O statistics snapshot @param fs target file system @param path file path to save the snapshot to @param overwrite whether to overwrite existing files
2010 Converts I/O statistics to a human-readable string. @param statistics I/O statistics object
2011 Retrieves current I/O statistics context. @return Current I/O statistics context or null if not available
2012 Sets thread I/O statistics context. @param statisticsContext optional I/O statistics context object
2013 Resets I/O statistics context.
2014 Retrieves I/O statistics context snapshot. @return snapshot of I/O statistics context or null if not available
2015 Aggregates I/O statistics context from a given source. @param source Object containing I/O statistics data
2016 Compares two versions for ordering. @param version1 first version string to compare @param version2 second version string to compare @return -1 if version1 is less than version2, 1 if greater, or 0 if equal
2017 Initializes a Filter instance with specified parameters and allocates memory for buckets based on the required vector size. @param vectorSize total elements in the data structure @param nbHash number of hashes to compute @param hashType unique identifier for hash type
2018 Initializes a BloomFilter instance with specified parameters. @param vectorSize vector size for the filter @param nbHash number of hashes to compute @param hashType unique identifier for hash type
2019 Performs membership test on the Bloom filter for a given key. @param key input key to be tested @return true if key is likely present, false otherwise
2020 Removes a key from the Bloom filter using a specified scheme. @param k Key object to be removed @param scheme Selective clearing scheme (RANDOM, MINIMUM_FN, MAXIMUM_FP, RATIO)
2021 Adds a single deprecated configuration key with replacement keys and message. @param key deprecated configuration key @param newKey replacement key @param customMessage user-friendly description of change
2022 Adds a single deprecated configuration key with replacement keys. @param key deprecated configuration key @param newKeys array of replacement keys
2023 Adds a single deprecated configuration key with replacement keys. @param key deprecated configuration key @param newKey replacement key
2024 Starts the web server and initializes metrics system.
2025 Writes a breadcrumb node to ZooKeeper to indicate the local instance is the most recent active. @param oldBreadcrumbStat previous breadcrumb stat (null if no previous active)
2026 Deletes the active node's bread crumb from ZooKeeper. @throws IllegalStateException if data mismatch is detected
2027 Reads vectored data from a PositionedReadable stream into a list of FileRange objects. @param stream input stream to read from @param ranges list of file ranges to be filled with data @param allocate function to allocate a ByteBuffer for each range
2028 Cancels prefetches and caches blocks being prefetched.
2029 Retrieves the specified block data by its numeric identifier. @param blockNumber unique non-negative integer identifier
2030 Initializes FilePosition object with file size and block size. @param fileSize total file size @param blockSize size of each data block
2031 Verifies if the current buffer block is the last valid block. @return true if the block is the last, false otherwise
2032 Closes all FileSystem instances in the cache. @throws IOException if an I/O error occurs during closure
2033 Writes a CharSequence to a specified file system path using UTF-8 encoding. @param fs target file system @param path location to write data to @param charseq data to be written @return the original file system instance
2034 Initializes BlockLocation object with provided block attributes. @param names array of block names @param hosts array of associated hostnames @param topologyPaths ignored (only used in other constructor) @param offset data block's offset in bytes @param length data block's length in bytes @param corrupt flag indicating potential corruption status
2035 Initializes BlockLocation object with provided block attributes. @param names array of block names @param hosts array of associated hostnames @param topologyPaths array of storage topology paths @param offset data block's offset in bytes @param length data block's length in bytes
2036 Merges two MeanStatistic instances into one, adding samples and sum. @param l left MeanStatistic @param r right MeanStatistic @return merged MeanStatistic instance
2037 Captures and stores input/output statistics from the provided source. @param source IOStatistics object containing data to copy
2038 Logs I/O statistics at debug level. @param message Message prefix for logging @param source Object containing IO statistics source
2039 Logs I/O statistics at a specified level. @param log Logger instance @param level Logging level (INFO, ERROR, WARN, etc.) @param source Object containing IO statistics source
2040 Closes a remote iterator with logging. @param source RemoteIterator instance to be closed
2041 Tracks duration of IO operation invocation. @param factory optional duration tracker factory for customization @param statistic identifier for tracked operation @param input InvocationRaisingIOE object to be executed
2042 Reads and decrypts data from the underlying stream into a provided byte array. @param position current data processing position @param buffer input byte array to store decrypted data @param offset starting offset within the buffer to process @param length number of bytes to read and decrypt @return actual number of bytes read, or -1 if end-of-stream reached
2043 Reads fully from the underlying stream and decrypts data at specified position. @param position current data processing position @param buffer input byte array containing encrypted data @param offset starting offset within the buffer to process @param length number of bytes to read and decrypt
2044 Reads data from the underlying stream at a specified position and writes decrypted data to a ByteBuffer. @param position current position in the file @param buf ByteBuffer to read and write decrypted data @return number of bytes read or -1 if end-of-file reached
2045 Reads fully from the input stream into a byte buffer and decrypts the read data. @param position current position in the file @param buf ByteBuffer to write decrypted data
2046 Reads data from the underlying input stream into a provided ByteBuffer. @param buf buffer to store decrypted data @return actual number of bytes read, or -1 if end-of-stream is reached
2047 Serializes an object to the specified output stream. @param out target DataOutput object @param instance the object to be serialized @param declaredClass the class of the object being serialized @param conf configuration settings for input and output operations @param allowCompactArrays whether to compact arrays or not
2048 Tries to acquire a BufferData object from the pool without blocking. @param blockNumber unique block identifier @return BufferData object or null if acquisition failed
2049 Returns the current number of available BufferData objects in the pool. @return int count of available BufferData objects
2050 Runs a task on the provided items using either single-threaded or parallel execution. @param task the task to be executed @return true if all items were processed without exceptions, false otherwise
2051 Processes a collection of file system paths and their parents. @param parent the parent PathData object @param items one or more child PathData objects
2052 Resolves file status to path handle using provided Filesystem and optional handle options. @param fs Filesystem instance @param opt Optional handle options
2053 Creates a ShellCommandExecutor instance to execute group command for specified user. @param userName username to query group information for
2054 Creates executor for fetching group IDs by executing 'groups' command with username. @param userName target username
2055 Reads and parses credentials from a Protobuf stream. @param in input stream containing serialized Credentials data
2056 Collects delegation tokens from the given issuer and its embedded children. @param issuer DelegationTokenIssuer instance to collect tokens from @param renewer String identifier for token renewal @param credentials Credentials object to store collected tokens @param tokens List of Token objects to accumulate found tokens
2057 Adds a new security token for the specified alias. @param alias unique identifier for the service @param token Token object to add or replace existing one
2058 Converts a relative path to an absolute path within the specified working directory. @param workDir the working directory @param path the relative path to make absolute @return the absolute Path object
2059 Resolves a file system path to an absolute URI by wrapping it around the working directory. @param workDir the root directory for relative paths @param path the path to resolve (may be relative or absolute)
2060 Converts a Hadoop Path to a Java File, handling relative paths. @param path the Hadoop Path to convert
2061 Fixes relative paths by resolving them against the working directory. @param p the path to fix
2062 Makes a qualified path by resolving the input path against a default URI. @param defaultUri base URI for resolution @param workingDir directory to resolve the path against @return a new Path object with the resolved URI, or the original if already absolute
2063 Retrieves the working directory from the HAR file URI.
2064 Returns the home directory of this HAR file system. @return Path object representing the home directory
2065 Retrieves the home directory from an SFTP Channel. @param channel active SFTP connection @return Path object representing the home directory or null on failure
2066 Retrieves file status from Hadoop file system. @param fs FileSystem object @param pathString absolute file path @param ignoreFNF whether to ignore FileNotFoundException @return FileStatus object or null if not found
2067 Returns the affected file path as a Path object.
2068 Returns the target Hadoop file system path.
2069 Retrieves used space for the root directory.
2070 Initializes a ChRootedFileSystem instance from a given file system and URI. @param fs underlying file system @param uri root directory URI
2071 Extracts the non-prefix part of a path. @param path input path array @param startIndex starting index to consider as prefix
2072 Constructs a file system path from the first and subsequent directory links. @return Path object representing the constructed URI
2073 Constructs a child path relative to its parent. @param parent the parent path @param child the child path to resolve
2074 Resolves a child path relative to its parent. @param parent the parent path @param child the child path to resolve
2075 Resolves a child path relative to its parent. @param parent the parent path @param child the child path to resolve
2076 Renames a MapFile in the Hadoop file system. @param fs FileSystem object @param oldName original file name @param newName new file name
2077 Converts a File object to a Path object.
2078 Unnestes a URI with authority into a Hadoop-compatible path. @param nestedUri input URI to be unnested
2079 Converts an array of string URIs to an array of Path objects. @param str array of input URI strings @return array of Path objects or null if input is null
2080 Removes URI scheme and authority from a given Path object. @param path input file system path to process
2081 Merges two file system paths while ensuring correct URI parsing. @param path1 primary path @param path2 secondary path to merge @return merged Path object with a single, valid URI
2082 Validates the existence and type of a file system object. @param typeRequirement expected file type requirement (directory or not)
2083 Constructs a string representation for a child directory path. @param childPath the child directory path
2084 Handles nonexistent file system paths by throwing an exception. @param item PathData object representing the non-existent path
2085 Retrieves the AbstractFileSystem instance for a given file system path. @param absOrFqPath absolute or fully qualified file system path @return AbstractFileSystem object representing the file system
2086 Creates a directory with specified permissions. @param dir Path to create directory at @param permission Desired file permissions
2087 Constructs a LocatedFileStatus object with specified attributes and block locations. @param length total size of the file @param isdir true if it's a directory, false otherwise @param block_replication replication factor for blocks @param blocksize block size @param modification_time last modification time @param access_time last access time @param permission file permissions (or null to default) @param owner file/directory owner (or null to default) @param group file/directory group (or null to default) @param symlink reference to a symbolic link (or null if not a symlink) @param path absolute path of the file/directory @param attr set of attributes (e.g., ACLs, encryption) @param locations array of block locations
2088 Appends a key-value pair to the SequenceFile with Writable objects. @param key Writable object representing the key @param val Writable object representing the value
2089 Writes sorted key-value pairs to a SequenceFile. @param records RawKeyValueIterator containing input data @param writer Writer object for output file
2090 Initializes the service with provided configuration. @param conf Configuration object to be applied
2091 Stops the managed service, releasing resources and transitioning state. @throws ServiceStateException if stopping fails
2092 Verifies if this private token is a clone of the given public service. @param thePublicService public service to compare with
2093 Verifies if the token matches a given alias. @param token Token object to compare @param alias Text alias to match against
2094 Verifies if the given service matches the fetched service name. @param fetcher DtFetcher instance @param service Text object representing the service to match @param url URL string to check against the service name
2095 Validates disk directory by existence and access. @param dir File object representing the directory to validate
2096 Validates directory with disk I/O checks and internal existence. @param dir File object representing the directory to validate
2097 Flushes buffer without keeping remaining data or flushing partial chunks.
2098 Validates decoding process by comparing input data with decoded output. @param inputs array of ByteBuffer objects containing encoded data @param erasedIndexes array of indexes representing erased data positions @param outputs array of ByteBuffer objects containing decoded data
2099 Decodes erasure-coded data from input ECChunks and stores the results in output ECChunks. @param inputs array of input ECChunk objects @param erasedIndexes array of indexes for which data is erased @param outputs array of output ECChunk objects
2100 Closes the output stream and registers data block with error handling. @throws IOException if an I/O error occurs during finalization
2101 Cleans up resources and deletes segment file if not preserved. @throws IOException if an I/O error occurs during deletion
2102 Releases resources and closes the input stream.
2103 Reads and deserializes token fields from a DataInput stream. @param in input stream to read from
2104 Fetches next raw key from input stream and writes it to buffer. @param key output buffer for the key @return length of the key or -1 if end of file reached @throws IOException on file corruption or error during reading
2105 Retrieves the current value from the sequence file and sets it to the provided Writable object. @param val Writable object to store the current value @throws IOException if seeking or reading fails
2106 Retrieves the current value from the sequence file, applying configured deserialization. @param val object to be deserialized (may implement Configurable) @return deserialized object or throws IOException if error occurs
2107 Reads the next record from the input stream and writes it to the provided buffers. @param key DataOutputBuffer for storing the key @param val ValueBytes for storing the value @return int representing the length of the read record, or -1 if end of file reached @throws IOException if an error occurs during reading or decompression
2108 Retrieves the length of a compressed or uncompressed value. @param val ValueBytes object to read from @return int value length or throws IOException if reading fails
2109 Retrieves DelegationTokenInformation from SQL for a given TokenIdent. @param ident TokenIdent object containing sequence number and bytes @return DelegationTokenInformation object or null if not found
2110 Reads file system permissions and user/group information from a DataInput stream. @param in input stream containing short integer representation of permissions
2111 Reads an enumeration value from a serialized input stream. @param in input stream to read from @param enumType class of the expected enum type
2112 Reads access control list from input stream and constructs ACL object. @param in input stream to read from
2113 Retrieves a fixed byte string from cache or creates one if not found. @param key Text object to be converted
2114 Converts a token object to its corresponding Protobuf representation. @param tok input token object
2115 Initializes a new delegation token identifier with specified attributes. @param kind type of the delegation token @param owner Text representation of the token's owner @param renewer principal name of the entity that can renew the token @param realUser Text representation of the real user associated with the token
2116 Attempts to invoke the target method once, handling retries and exceptions. @return CallReturn instance with result or exception
2117 Checks the current key and prepares for reading the corresponding value. @throws IOException if end-of-file condition is corrupted or no key-value to read
2118 Retrieves the stored value and populates the BytesWritable object. @param value BytesWritable object to store the retrieved data @return length of the stored value
2119 Writes the stored value to an OutputStream. @param out OutputStream object @return total written size in bytes
2120 Compares this Entry's key with the given byte array using TFile comparator. @param buf underlying byte array
2121 Compares this Entry with another object for equality. @param other the object to compare with
2122 Obtains a delegation token via HTTP and returns it as a Token object. @param url URL of the service to invoke @param token Authentication token with delegated credentials @param renewer Optional parameter for renewal @param doAsUser Optional parameter for proxy user @return Token<AbstractDelegationTokenIdentifier> containing delegation token data
2123 Renews a delegation token via HTTP. @param url URL of the service to invoke @param token Authentication token with delegated credentials @param dToken Delegation token to renew @param doAsUser Optional parameter for proxy user @return Long value representing the renewed delegation token ID or 0 if not found
2124 Cancels a delegation token via HTTP. @param url URL of the service to invoke @param token Authentication token with delegated credentials @param dToken Delegation token to cancel @param doAsUser Optional parameter for proxy user
2125 Selects a random node within the specified network topology scope. @param scope hierarchical scope string @return chosen node or null if no valid node is found
2126 Sorts nodes by distance from a given source node (datanode). @param reader Node containing the datanode's location @param nodes Array of nodes to sort @param activeLen Number of active nodes in the array
2127 Retrieves a SocketInputWrapper instance for the given socket with specified timeout. @param socket network endpoint @param timeoutMs time to wait before throwing an exception @return SocketInputWrapper object or throws IOException if failed
2128 Returns an output stream for the given socket, potentially with a custom timeout. @param socket network socket @param timeout operation timeout in milliseconds
2129 Establishes a socket connection to the specified endpoint with a timeout. @param socket the socket object @param endpoint target address @param localAddr local address (optional) @param timeout total timeout in milliseconds @throws IOException if an I/O error occurs
2130 Registers an MBean with the given service and metric names, properties, and object. @param serviceName unique service identifier @param nameName unique metric name @param properties optional key-value pairs to append to the name @param theMbean the MBean to register @return the registered ObjectName or null if registration fails
2131 Creates a new inverse quantile metric with specified settings. @param name unique metric identifier @param desc metric description @param sampleName sampling context for valueName @param valueName value being sampled @param interval time interval in seconds for quantile computation
2132 Initializes a RetryCache instance with specified parameters. @param cacheName unique identifier for the cache @param percentage percentage of max memory to use (0-100) @param expirationTime time period for cache entry expiration
2133 Initializes metrics based on the provided protocol. @param protocol class containing performance metrics to initialize
2134 Initializes metrics based on provided names or protocols. @param names array of unique metric identifiers
2135 Aggregates local statistics into global metrics. @param localStats concurrent map of local stats to aggregate
2136 Creates or retrieves a mutable rate metric. @param name unique metric identifier @param desc metric description @param extended whether to include extended metrics
2137 Initializes protocol-specific rate metrics. @param protocol Class containing methods to create metrics for
2138 Adds metrics from annotated methods and fields of the given source object. @param source object that owns the annotated method @param method target method or field with metric annotations
2139 Validates a UserGroupInformation object's authentication method and credentials. @param messagePrefix prefix for error messages @param user UserGroupInformation object to validate
2140 Verifies that a given file exists and has valid properties. @param file the File object to validate @param category unique failure category @return true if file is valid, false otherwise
2141 Validates the short name of the Kerberos principal. @throws KerberosDiagsFailure if a failure occurs during validation
2142 Retrieves the user associated with this token identifier. @return UserGroupInformation object representing the user, or null if not found
2143 Initializes search with recursive mode enabled.
2144 Initializes Command object with default output and error streams.
2145 Initiates a secure re-login operation from a keytab. Forces re-login without TGT verification or last login time check. @throws IOException if an I/O error occurs during the re-login process
2146 Forces a secure re-login operation from the ticket cache, bypassing last login time check.
2147 Initiates a secure re-login operation from the ticket cache.
2148 Creates an InetSocketAddress for a host with the given port. @param host hostname to create socket address for @param port port number @return InetSocketAddress object or unresolved address if not found
2149 Resolves a hostname to a local InetAddress. @param host the hostname to resolve @return InetAddress object or null if not a local address
2150 Sends an RPC request to the server. @param call RPC request details
2151 Processes an incoming RPC request from a client. @param header RPC request header containing metadata @param buffer Input buffer containing the RPC request data @throws RpcServerException if there is an error processing the request @throws InterruptedException if the request processing is interrupted
2152 Sets up an RPC response based on the call status and error details. @param call RpcCall object @param status RpcStatusProto indicating success or failure @param erCode RpcErrorCodeProto containing error code @param rv Writable object to be serialized (null if not present) @param errorClass String representing exception class name @param error String representing error message
2153 Resets IP list and cache expiry time.
2154 Prints detailed system information by creating a new SysInfoLinux instance and calling various getter methods.
2155 Formats storage metrics into a string representation with quota usage and human-readable units. @param qOption whether to include quota usage @param hOption whether to display human-readable units
2156 Reads data from file stream into user-provided byte array, handling retries and partial reads. @param b byte array to read into @param off starting offset in the byte array @param len number of bytes to read @return number of bytes successfully read
2157 Creates a new instance of the specified expression class with default arguments and configuration. @param expressionClass Class to instantiate @param conf Hadoop configuration for the instance
2158 Fetches a Command instance by name from the CommandFactory. @param cmdName unique command identifier @param conf Hadoop configuration for the instance @return Command object or null if not found
2159 Creates a new instance of the registered key class. @return an instance of the key class
2160 Creates a new instance of the specified Writable class using its associated factory. If no factory is found, uses reflection to instantiate the class with default arguments and configuration. @param c Class to instantiate @param conf Hadoop configuration for the instance
2161 Retrieves SocketFactory instance from property value. @param conf Hadoop configuration @param propValue Property value to resolve Class @return SocketFactory object or null if not found
2162 Decodes the token identifier into a TokenIdentifier object. @return T decoded TokenIdentifier or null if not found
2163 Retrieves or creates a DiskValidator instance based on the specified class. @param clazz Class of the DiskValidator to retrieve or create
2164 Initializes a DynamicBloomFilter instance with specified parameters. @param vectorSize vector size for the filter @param nbHash number of hashes to compute @param hashType unique identifier for hash type @param nr additional parameter (purpose unknown)
2165 Dynamically adjusts the Bloom filter's structure by adding a row.
2166 Initializes a RetouchedBloomFilter instance with specified parameters. @param vectorSize vector size for the filter @param nbHash number of hashes to compute @param hashType unique identifier for hash type
2167 Loads application configuration settings from properties and resources. @param props target Properties object @param startIdx index to start loading from @param fullReload flag to enable full resource reload
2168 Quits the election process and resets the elector state. @param needFence whether to fence other nodes from taking over
2169 Reads vectored data from PositionedReadable stream into a list of FileRanges. @param ranges list of file ranges to be filled with data @param allocate function to allocate a ByteBuffer for each range
2170 Initializes BlockLocation object with provided block attributes. @param names array of block names @param hosts array of associated hostnames @param offset data block's offset in bytes @param length data block's length in bytes
2171 Constructs a DurationStatisticSummary instance from given metrics. @param key unique identifier @param success indicates successful operation status @param count occurrence count @param max maximum duration value @param min minimum duration value @param mean MeanStatistic object or null if not specified
2172 Aggregates input/output statistics from a single source into this snapshot. @param source the source statistics to merge (may be null) @return true if successful, false otherwise
2173 Initializes an IOStatisticsSnapshot from a source. @param source input/output statistics to copy or null to start fresh
2174 Iterates over a remote iterator, executing a consumer function for each item. @param source RemoteIterator instance to iterate over @param consumer ConsumerRaisingIOE function to apply to each item @return number of items processed
2175 Serializes an object to the specified output stream without compacting arrays. @param out target DataOutput object @param instance the object to be serialized @param declaredClass the class of the object being serialized @param conf configuration settings for input and output operations
2176 Requests prefetch of a specific block by ID. @param blockNumber unique block identifier
2177 Tries to acquire a BufferData object from the pool without blocking. If acquisition fails, retries are attempted with configurable delay and status update parameters. @param blockNumber unique block identifier @return BufferData object or null if acquisition failed
2178 Processes a single file system path as an argument. @param item PathData object containing the path to process
2179 Processes a collection of file system paths and their parents in batches. @param parent the parent PathData object @param itemsIterator RemoteIterator containing child PathData objects
2180 Resolves partial group names for a specified user. @param userName target username @param errMessage error message to include in exceptions @return Set of resolved group names @throws PartialGroupNameException if some group names are not resolvable or an error occurs during resolution
2181 Executes a shell command with default environment and timeout. @param cmd array of shell command strings
2182 Executes a shell command with managed input and output handling. @param env map of environment variables to set @param cmd array of shell command strings
2183 Merges another Credentials object into this instance without overwriting existing secrets and tokens. @param other the Credentials to merge
2184 Merges another Credentials object into this instance without overwriting existing secrets and tokens. @param other the Credentials to merge
2185 Adds delegation tokens by collecting them from the issuer and its children. @param renewer String identifier for token renewal @param credentials Credentials object to store collected tokens @return Array of Token objects accumulated from found tokens
2186 Adds a new security token with associated service instance. @param token Token object to add or replace existing one
2187 Sets the working directory to an absolute path. @param newDir relative or absolute path of the desired working directory
2188 Sets modification and access times for a file. @param p the Hadoop Path to update @param mtime modification time in milliseconds (0 for current time) @param atime access time in milliseconds (0 for current time)
2189 Converts a Hadoop Path to a Java File. @param path the Hadoop Path to convert
2190 Resolves an absolute or relative file path to its internal URI representation. @param p input file path
2191 Makes a qualified path by resolving against the provided FileSystem. @param fs file system to resolve against
2192 Makes a qualified path by resolving the input path against the current working directory.
2193 Makes this file system's qualified path from the given Hadoop file system path. @param path Hadoop file system path to be made qualified
2194 Lists file statuses for a given path. @param f input file system path
2195 Deletes a file or directory. @param f the input file system path @param recursive whether to delete recursively (true) or not (false)
2196 Opens a file for reading. @param f the input file path @return FSDataInputStream object or null if not found
2197 Opens a file for reading with specified buffer size. @param f the input file path @param bufferSize the desired read buffer size @return FSDataInputStream object or throws exception if failed
2198 Truncates a file to the specified length. @param f file path @param newLength desired file size in bytes @return true if successful, false otherwise
2199 Sets file replication for a given path. @param f the input file system path @param replication desired replication factor @return true if successful, false otherwise
2200 Sets file permissions for a given path. @param f the input file system path @param permission FsPermission object to apply
2201 Sets the owner of a file or directory. @param f the input Path object @param username the desired username (can be null) @param groupname the desired group name (can be null)
2202 Sets file timestamps for a given file path. @param f the input file system path @param mtime last modified time in milliseconds @param atime last accessed time in milliseconds
2203 Retrieves the checksum for a given file. @param f input file path @return FileChecksum object or throws exception if failed
2204 Retrieves file status for the given path. @param f input file system path @return FileStatus object or null if not found
2205 Checks file system access permissions for the specified path. @param path input file system path @param mode desired access mode (e.g., read, write)
2206 Retrieves the status of a file system link. @param f Path to the file system link @return FileStatus object or null if not found
2207 Resolves the target of a symbolic link in the file system. @param f input file path @return resolved link target or null if not found
2208 Retrieves file block locations for a given file. @param f the input file path @param start starting offset @param len length of data to retrieve @return array of BlockLocation objects or throws exceptions if failed
2209 Retrieves file system status for the specified path. @param f input file system path @return FsStatus object or default FS status if null input
2210 Creates a symbolic link to the target file. @param target Path to the target file @param link Path to the symbolic link @param createParent whether to create parent directory if it does not exist
2211 Resolves file status iterator for a given path. @param f input file system path @return RemoteIterator containing file statuses or null if not found
2212 Lists corrupt file blocks in a given Hadoop file system path. @param path input file system path (relative or absolute)
2213 Lists located file statuses for a given file path. @param f input file system path @return iterator over LocatedFileStatus objects
2214 Resolves abstract file systems by resolving the absolute path and traversing through linked directories. @param f input file system path @return set of resolved AbstractFileSystem objects or empty set if not found
2215 Modifies ACL entries for a file or directory. @param path the input file system path @param aclSpec list of ACL modifications to apply
2216 Removes ACL entries from a file or directory. @param path absolute file system path @param aclSpec list of AclEntry objects to remove
2217 Removes default ACL from a file. @param path HDFS file system path
2218 Removes ACL from a file or directory. @param path absolute file system path
2219 Sets access control list (ACL) for a file. @param path absolute file system path @param aclSpec ACL specification as a list of entries
2220 Retrieves the ACL status for a given file path. @param path absolute file system path @return AclStatus object or null if not found
2221 Sets an extended attribute on a file. @param path the file system path
2222 Retrieves extended attribute with given name from a file. @param path the input file system path @param name the name of the extended attribute to retrieve
2223 Retrieves extended attributes for a file. @param path the input file system path
2224 Retrieves extended attributes for a file. @param path the input file system path @param names list of attribute names to fetch @return map of fetched attributes or null if not found
2225 Removes an extended attribute from a file. @param path file system path @param name name of the extended attribute to remove
2226 Lists extended attributes for a file. @param path the input file system path @return list of attribute names or empty list if not found
2227 Creates a file system snapshot. @param path the file system path @param snapshotName the name of the snapshot to create
2228 Renames a file system snapshot. @param path absolute file system path @param snapshotOldName old name of the snapshot to rename @param snapshotNewName new name for the snapshot
2229 Deletes a file system snapshot. @param path absolute file system path @param snapshotName name of the snapshot to delete
2230 Applies storage policy to the specified file system path. @param path input file system path
2231 Sets storage policy for a file system path. @param path absolute file system path @param policyName name of the storage policy
2232 Unsets storage policy for a file. @param src the input file path
2233 Resolves file system path and retrieves storage policy. @param path input file system path @return BlockStoragePolicySpi object or null if not found
2234 Checks if a file system path has a specific capability. @param path filesystem path @param capability capability to check for @return true if the path has the capability, false otherwise
2235 Retrieves server defaults for the given file system path. @param path input file system path @return FsServerDefaults object or throws IOException if not resolved successfully
2236 Creates a multipart uploader with the given base path. @param basePath base directory for the upload
2237 Returns the working directory as the SFTP home directory. @param client active SFTP connection
2238 Refreshes file status by re-lookup in Hadoop file system. @return FileStatus object or null if not found
2239 Retrieves used space from the underlying Hadoop file system. @throws IOException if an I/O error occurs
2240 Resolves a file system path using regex patterns and interceptors. @param srcPath source file system path @param resolveLastComponent whether to resolve the last component of the path @return InodeTree.ResolveResult object or null if initialization fails
2241 Checks if a file exists in the Hadoop file system. @param pathStr relative path to the file @param conf configuration object @return true if the file exists, false otherwise
2242 Deletes a MapFile by name. @param fs Hadoop FileSystem instance @param name unique MapFile identifier
2243 Calculates the current directory based on the next flush time and roll interval. @param now the current date
2244 Creates a FileOutputStream for writing to the specified file with given permissions. @param f target file @param permissions desired file permissions as an integer @return FileOutputStream instance or insecure alternative if skipSecurity flag is set
2245 Validates the source and target paths for reserved raw file systems. @param src Hadoop file system path of the source @param target Hadoop file system path of the destination @return true if both paths are in reserved raw, false otherwise
2246 Returns the parent directory of this file system path. @return Parent directory as a Path object or null if at root
2247 Retrieves parent path as an optional Path object.
2248 Retrieves an iterator over directory contents. @return RemoteIterator of PathData objects or null if not found
2249 Constructs an FSDataOutputStreamBuilder instance with a given FileContext and Path. @param fc file context @param p path to the file system
2250 Sets verify checksum flag for a file system path. @param verifyChecksum whether to verify checksums @param f input file path
2251 Reads file status from a DataInput stream and updates the FileStatus object. @throws IOException if reading fails or invalid data is encountered
2252 Constructs a LocatedFileStatus object with specified attributes and block locations. @param length total size of the file @param isdir true if it's a directory, false otherwise @param locations array of block locations
2253 Appends a key-value pair to the SequenceFile with Writable objects. @param key WritableComparable object representing the key @param val Writable object representing the value
2254 Stops and releases resources managed by this service.
2255 Writes a single byte to the buffer, triggering buffer flush when full.
2256 Writes user data to the underlying FSOutputSummer, handling local buffering and checksuming. @param b input byte array @param off starting offset in the data array @param len length of the data to process @return number of bytes written or copied into the local buffer
2257 Validates the decoding process by comparing input data with decoded output. @param inputs array of ECChunk objects containing encoded data @param erasedIndexes array of indexes representing erased data positions @param outputs array of ECChunk objects containing decoded data
2258 Closes and finalizes a data block, optionally forcing compression if size limit is reached. @param bForceFinish whether to force compression and close the block
2259 Reads token storage from a DataInputStream, validating the header and deserializing tokens based on the specified format. @param in input stream containing token storage data
2260 Retrieves candidate tokens for cleanup based on the last token renewal period. @return Map of TokenIdent to DelegationTokenInformation for stale tokens
2261 Retrieves value length from input stream. @param rawValue ValueBytes object to read from @return int value length or throws IOException if reading fails
2262 Serializes the credentials to a Protobuf representation and writes it to the output stream.
2263 Converts a token object to its corresponding Protobuf representation. @param tok input token object
2264 Returns an Entry object based on the current key.
2265 Compares the current key to another RawComparable object. @throws IOException if end-of-file condition is corrupted or no key-value to read
2266 Retrieves and sets key-value pair from input buffer. @param key BytesWritable object for storing key data @param value BytesWritable object to store the retrieved data
2267 Advances the TFile reader by a specified number of records. @param n number of records to advance
2268 Obtains a delegation token via HTTP and returns it as a Token object. @param url URL of the service to invoke @param token Authentication token with delegated credentials @param renewer Optional parameter for renewal
2269 Renews a delegation token via HTTP. @param url URL of the service to invoke @param token Authentication token with delegated credentials @param dToken Delegation token to renew
2270 Cancels a delegation token via HTTP. @param url URL of the service to invoke @param token Authentication token with delegated credentials @param dToken Delegation token to cancel
2271 Retrieves a SocketInputWrapper instance for the given socket. @param socket network endpoint @throws IOException if failed
2272 Returns an output stream for the given socket with default timeout. @param socket network socket
2273 Establishes a socket connection to the specified endpoint with a timeout. @param socket the socket object @param address target address @param timeout total timeout in milliseconds
2274 Samples and aggregates metrics from registered sources. @return MetricsBuffer object containing collected metrics data
2275 Registers an MBean with the given service and metric names. @param serviceName unique service identifier @param nameName unique metric name
2276 Retrieves or creates ReadWriteDiskValidatorMetrics instance for the specified directory. @param dirName unique directory identifier
2277 Initializes RPC stats for the specified number of priority levels. @param numLevels number of priority levels
2278 Collects and aggregates thread-local metrics into global statistics. @param none
2279 Creates or retrieves a mutable rate metric with default description. @param name unique metric identifier
2280 Creates or retrieves a mutable rate metric. @param name unique metric identifier @param description metric description
2281 Dumps the contents of a given Kerberos keytab file, including principal names and entries. @param keytabFile the File object representing the keytab file to examine
2282 Validates JAAS configuration based on system property. @param jaasRequired whether JAAS validation is required
2283 Retrieves the real owner of a delegation token. @param id Token identifier @return Real owner's username or an empty string if not available
2284 Ensures the existence of parent ZooKeeper nodes. @throws IOException if creation or ACL setup fails
2285 Retrieves active data from ZooKeeper. @throws ActiveNotFoundException if node does not exist
2286 Initiates secure re-login and TGT validity check from keytab.
2287 Initiates a secure re-login operation from a keytab.
2288 Resolves InetSocketAddress to a connected address. @param addr unresolved or unconnected InetSocketAddress @return connected InetSocketAddress object or original if already resolved
2289 Updates the server address while ensuring hostname and port remain unchanged. @return True if a valid address change occurred, false otherwise
2290 Retrieves the canonical URI by resolving hostname and potentially updating port. @param uri original URI to canonicalize @param defaultPort default port to use if not specified in the original URI @return updated URI with a resolved host or null if no authority exists
2291 Creates and sends an RPC request to the server. @param rpcKind type of remote procedure call (e.g. async) @param rpcRequest data to be sent over IPC @param remoteId unique identifier of the remote server @param serviceClass type of service to use for this connection @param fallbackToSimpleAuth flag to fall back to simple authentication if required @param alignmentContext alignment context for current RPC call @return Writable object or null if not found or interrupted (in async mode)
2292 Waits for a cache entry to complete and returns its state. @param newEntry the cache entry to wait for @return the completed cache entry, or null if it doesn't exist
2293 Adds a cache entry with the specified client ID and call ID. @param clientId unique client identifier in byte array format @param callId unique call identifier
2294 Formats storage metrics into a string representation with quota usage. @param qOption whether to include quota usage
2295 Retrieves a registered expression instance by name from the factory. @param expressionName unique identifier for the requested expression @param conf Hadoop configuration for the instance
2296 Creates an instance of the specified expression class based on its name. @param expressionClassname unique identifier for the expression class
2297 Builds a description of recognised expressions and operators. @param factory ExpressionFactory instance for creating expressions
2298 Retrieves an instance of a specified expression class. @param expressionClass the class to instantiate
2299 Retrieves a Command instance by name from the CommandFactory. @param cmdName unique command identifier
2300 Reads an object from a DataInput stream, handling various types of objects. @param in input stream containing serialized object data @param objectWritable ObjectWritable instance to store values (may be null) @param conf Hadoop Configuration object for deserialization (not used) @return the read object or throws IOException if an I/O error occurs
2301 Creates a new instance of the specified Writable class using its associated factory. @param c Class to instantiate
2302 Decodes the token identifier from a given token. @param token input token containing the identifier to be decoded @return decoded TokenIdentifier or null if not found
2303 Prints credentials in a formatted table, including tokens that match a given alias. @param creds Credentials object containing token information @param alias Text alias to match against tokens @param out PrintStream for outputting the formatted table
2304 Retrieves or creates a DiskValidator instance based on the specified class name. @param diskValidator name of the DiskValidator to retrieve or create @return DiskValidator instance
2305 Initializes BlockLocation object with default attributes.
2306 Retrieves block locations for a given FileStatus object within the specified range. @param file FileStatus object representing the target file @param start starting offset of the desired data in bytes @param len length of the desired data in bytes @return array of BlockLocation objects or an empty array if the file has no blocks
2307 Fetches duration summary statistics from the given data source. @param source IOStatistics object @param key unique identifier @param success indicates successful operation status @return DurationStatisticSummary instance with constructed metrics
2308 Creates an IO statistics snapshot. @return IOStatisticsSnapshot object containing current I/O statistics
2309 Creates an IOStatisticsSnapshot from given I/O statistics. @param statistics input/output statistics to copy or null to start fresh
2310 Creates an IOStatisticsSnapshot from a given source. @param source input/output statistics to copy or null to start fresh
2311 Converts a remote iterator to a list. @param source RemoteIterator instance to convert @return List of items from the remote iterator or empty if not found
2312 Processes a single file system path argument. @param item PathData object containing the path to process
2313 Retrieves Unix group names for a specified user. @param user target username @return Set of resolved group names or an empty set if not found
2314 Resolves a command by executing it with managed input and output handling. @param args array of command arguments @param commandScriptName name of the script to execute @return string representation of the executed command's output or null if failed
2315 Fetches the target path of a symbolic link. @param f File object representing the symbolic link @return Target file or directory path, or empty string on failure
2316 Sets file permissions on the specified local path. @param p Path to set permissions for @param permission FsPermission object representing desired permissions @throws IOException if an I/O error occurs during permission setting
2317 Retrieves Unix user details for a specified netgroup. @param netgroup name of the netgroup to retrieve users for
2318 Merges another Credentials object into this instance without overwriting existing secrets and tokens. @param credentials the Credentials to merge
2319 Merges external user credentials into the current subject's internal credentials. @param credentials Credentials object to merge
2320 Converts Hadoop Path to Java File, assuming it's a local file system. @throws IllegalArgumentException if the path is not local
2321 Creates a directory with its parents if they do not exist and sets permissions. @param localFS Local file system instance @param dir Hadoop Path to the directory @param expected FsPermission object for the directory
2322 Retrieves the native file link status. @param f input file path to be processed @param dereference whether to dereference symbolic links @return FileStatus object containing file metadata or null if not found
2323 Returns the root directory of a given file system path. @param path input file system path
2324 Deletes files on exit, iterating over the DELETE_ON_EXIT set and deleting each file in its associated FileContext.
2325 Checks if a file exists in the Hadoop FileContext framework. @param f input file system path
2326 Sets the working directory to a specified path, ensuring it's not relative. @param newWDir the new working directory as a Path object @throws IOException if an I/O error occurs during directory resolution
2327 Verifies the destination path for file copying. @param srcName source file name @param dst target directory Path @param overwrite flag to allow overwriting existing files
2328 Retrieves the content summary for a given path. @param f input file system path @return ContentSummary object containing total length, file count, and directory count
2329 Retrieves delegation tokens from the file system, traversing through linked directories. @param p Path to the file system @param renewer string identifier of the token renewer @return List of Token objects or empty list if not found
2330 Sets an extended attribute on a file. @param path the file system path @param name the attribute name @param value the attribute value
2331 Creates a file system snapshot. @param path the file system path
2332 Initializes MultipartUploaderBuilderImpl with file context and path. @param fc FileContext instance @param p Path to the file system
2333 Waits for files in the waitList to be truncated to the specified length. @throws IOException if an I/O error occurs during file recovery
2334 Attempts to resolve a file system path within a regex mount point. @param srcPath source file system path @param resolveLastComponent whether to resolve the last component of the path @return ResolveResult object or null if not resolved
2335 Checks if a file exists in Hadoop file system. @param pathStr relative path to the file @param conf configuration object @return true if the file exists, false otherwise
2336 Resolves a file system path to its corresponding location within the HAR archive. @param path the input file system path
2337 Returns the checksum file path for a given input file. @param file the input file
2338 Checks if the parent directory of this file system path exists. @return true if the parent directory exists, false otherwise
2339 Creates a directory with specified permission and recursively creates parent directories if createParent is true. @param f the file system path to be created @param absolutePermission permissions for the directory @param createParent flag indicating whether to create parent directories
2340 Renames a file or directory in the Hadoop file system. @param src source path @param dst destination path @param options optional rename options (e.g. OVERWRITE)
2341 Returns the checksum file path by appending '.crc' to the input file's parent directory and name. @param file the input file for which the checksum file is requested
2342 Validates whether a given file system path is under its base parent. @param p the path to validate @param basePath the base path to check against @return true if p is under basePath, false otherwise
2343 Checks if this path represents the root directory. @return true if at root, false otherwise
2344 Constructs a qualified path by appending the given suffix to this path. @param suffix file system path component to append
2345 Qualifies the target path of a symbolic link by resolving it against the provided URI. @param pathURI base URI for resolution @param pathWithLink file system path containing the symlink @param target target path to qualify @return qualified Path object or the original if already absolute
2346 Renames a file system object at the specified source path to the target path. @param src source path of the file system object @param dst target path for the renamed file system object @param overwrite whether to overwrite an existing destination file or directory
2347 Constructs a FileStatus object representing a file or directory in the file system. @param length total size of the file @param isdir true if it's a directory, false otherwise
2348 Constructs a FileStatus object by copying the attributes from another FileStatus. @param other source file status
2349 Constructs a LocatedFileStatus object from an existing FileStatus and block locations. @param stat the existing FileStatus to copy attributes from @param locations array of block locations for the file
2350 Constructs a LocatedFileStatus object with specified attributes and block locations. @param length total size of the file @param isdir true if it's a directory, false otherwise @param block_replication replication factor for data blocks @param blocksize size of each data block @param modification_time last modification time @param access_time last access time @param permission file permissions (null to use default) @param owner file owner @param group file group @param symlink symbolic link path @param path actual file path @param locations array of block locations
2351 Appends a Writable object to the SequenceFile with automatic counter increment. @param value Writable object to be appended
2352 Writes user data to the underlying FSOutputSummer, handling local buffering and checksuming. @param b input byte array @param off starting offset in the data array @param len length of the data to process
2353 Releases resources and finalizes compression.
2354 Seeks the cursor to the end of the TFile.
2355 Closes the current block reader and sets cursor to TFile end.
2356 Reads token storage from a file and returns Credentials object. @param filename file containing token storage data @param conf Hadoop configuration (not used) @return Credentials object or throws IOException if reading fails
2357 Advances to the next block and searches for a matching key. @param key RawComparable object to search for @param greater whether to search for keys greater than or less than the given key @return true if found, false otherwise
2358 Publishes metrics to all registered sinks immediately.
2359 Initializes metrics based on provided protocol. @param protocol class containing performance metrics to initialize
2360 Collects and aggregates thread-local metrics into global statistics.
2361 Adds a value to an existing mutable metric. @param name unique metric identifier @param value value to consider for updating min/max
2362 Adds a token for owner statistics. @param id Token identifier
2363 Removes or decrements the token count for a given owner. @param id Token identifier
2364 Retrieves the current active service target from ZooKeeper. @throws IOException or InterruptedException if ZooKeeper access fails
2365 Initializes an ActiveStandbyElector instance with ZooKeeper connection settings. @param zookeeperHostPorts host and port combination for ZooKeeper connection @param zookeeperSessionTimeout session timeout in milliseconds @param parentZnodeName parent node name for internal state management @param acl access control list for ZooKeeper operations @param authInfo authentication information for ZooKeeper connections @param app callback object for application-specific logic @param maxRetryNum maximum number of retries for connection establishment @param failFast flag to establish a ZooKeeper connection immediately or with retries @param truststoreKeystore trust store and key store configuration
2366 Creates an InetSocketAddress from the given target string. @param target string to be converted into a URI @param defaultPort default port number if not present in the URI @param configName configuration property name (if applicable) @param useCacheIfPresent whether to cache the created URI
2367 Retrieves connected address for the given Server instance. @param server server object containing listener address
2368 Initiates an RPC request to the specified server with default service class. @param rpcKind type of remote procedure call (e.g. async) @param rpcRequest data to be sent over IPC @param remoteId unique identifier of the remote server @param fallbackToSimpleAuth flag to fall back to simple authentication if required
2369 Waits for a retryable request to complete and returns its state. @param cache the RetryCache instance @param clientId unique client identifier @param callId RPC invocation ID @return CacheEntry object or null if skipped or not found
2370 Waits for a cache entry to complete and returns its payload if not skipped. @param cache RetryCache instance @param payload associated data with the cache entry @param clientId unique client identifier in byte array format @param callId unique RPC invocation ID @return CacheEntryWithPayload object or null if skipped
2371 Retrieves a registered expression instance by name. @param expressionName unique identifier for the requested expression
2372 Retrieves a pre-registered or creates a new WritableComparator instance for the given class. @param c Class implementing WritableComparable @param conf Hadoop Configuration object @return WritableComparator instance
2373 Initializes WritableComparator with a custom comparator class. @param keyClass the class implementing WritableComparable
2374 Initializes LocalDirAllocator with a context configuration item name. @param contextCfgItemName unique identifier for context-specific configuration
2375 Updates application configuration settings with deprecated properties. @param deprecationContext current deprecation context
2376 Creates a new Configuration object by cloning the given configuration. @param other the configuration to clone
2377 Adds a resource object to the configuration and updates settings. @param conf existing Configuration object
2378 Retrieves alternative names for a given configuration property name. @param name The original property name @return Array of alternative names or null if not found
2379 Retrieves property sources for the given name. @param name configuration key
2380 Returns the number of configuration properties. @return Count of loaded configuration settings
2381 Clears all configuration settings and overlays.
2382 Returns an iterator over string to string configuration pairs. @return Iterator over Map.Entry objects containing string key-value pairs
2383 Retrieves configuration values matching a regular expression pattern. @param regex regular expression to match @return Map of matched key-value pairs or empty map if none found
2384 Reads vectored data from PositionedReadable stream into a list of FileRanges. @param ranges list of file ranges to be filled with data @param allocate function to allocate a ByteBuffer for each range @throws IOException on I/O errors
2385 Retrieves a BufferData object associated with the specified block number. @param blockNumber unique block identifier @return BufferData object or throws IOException if acquisition fails
2386 Waits for replication of files in the waitList to reach the specified number of replications. @throws IOException if an I/O error occurs during file system operations
2387 Retrieves block locations for a given file within the specified range. @param p Path to the target file @param start starting offset of the desired data in bytes @param len length of the desired data in bytes @return array of BlockLocation objects or an empty array if the file has no blocks
2388 Fetches success duration summary statistics. @param source IOStatistics object @param key unique identifier
2389 Creates an empty IOStatisticsSnapshot instance.
2390 Retrieves an IOStatisticsSnapshot from a given source object. @param source the source object (IOStatistics, IOStatisticsSource, or other) @return IOStatisticsSnapshot instance if found, otherwise null
2391 Converts remote iterator to array. @param source RemoteIterator instance to convert @param a target array to fill; may be resized if necessary
2392 Renews a delegation token with the given identifier and renewer. @param token TokenIdent object containing the token's metadata @param renewer Text representation of the user performing the renewal @return The new expiration date for the renewed token in milliseconds @throws InvalidToken if the token is expired, has no renewer, or incorrect password
2393 Cancels a token, ensuring it's owned by the provided canceller and authorized to do so. @param token TokenIdent object representing the token to be cancelled @param canceller owner of the token, must match the token's owner or have renewer privileges @return the cancelled TokenIdent object
2394 Processes a list of file system path arguments, attempting to execute each and displaying errors as necessary. @param args list of PathData objects containing paths to process
2395 Retrieves Unix group IDs for a specified user. @param userName target username @return List of resolved group IDs or an empty list if not found
2396 Retrieves the count of existing hard links for a given file. @param fileName the file for which to retrieve the hard link count @return the number of hard links or -1 if an error occurs @throws IOException if an error occurs during operation
2397 Creates a symbolic link with the specified target and linkname. @param target path to the target file or directory @param linkname path to create the symbolic link at @return exit code associated with the command execution, or 1 if creation fails
2398 Sets file permissions using the chmod command. @param filename file path @param perm permission to be set @param recursive whether to apply recursively @return exit code of the chmod command or throws IOException on failure
2399 Checks if the setsid command is supported on this machine. @return true if setsid is available, false otherwise
2400 Sets file owner and/or group using a shell command. @param file File object to set ownership for @param username string representing the new owner's name (optional) @param groupname string representing the new group name (optional)
2401 Retrieves Unix users for a specified netgroup. @param netgroup name of the netgroup to retrieve users for @return List of user names or empty list if not found
2402 Retrieves user credentials, removing private tokens. @return Credentials object associated with the current subject
2403 Retrieves file statuses based on a given Path and PathFilter. @param f input file system path @param filter PathFilter object for filtering files
2404 Retrieves file statuses for a collection of paths and filters them based on the provided PathFilter. @param files array of input file system paths @param filter PathFilter object for filtering files @return array of FileStatus objects or empty array if no files match the filter
2405 Resolves a file system path within the inode tree. @param p input filesystem path to be resolved @param resolveLastComponent whether to resolve the last component of the path @return ResolveResult object containing the resolved target and remaining path, or null if not resolved
2406 Sets the replication level for a file and its corresponding checksum file. @param src Path to the file @param replication desired replication level
2407 Deletes a file or directory from the underlying file system. @param f Path to the file or directory @param recursive whether to delete contents recursively (if it's a directory) @return true if deletion was successful, false otherwise
2408 Renames a file or directory in the Hadoop file system. @param src source path @param dst destination path @return true if rename operation is successful, false otherwise
2409 Deletes a file or directory from the file system. @param f Path to the file or directory @param recursive whether to delete recursively @return true if deleted successfully, false otherwise
2410 Checks if the given source path is an ancestor of the target path. @param source PathData object representing the potential ancestor @param target PathData object representing the target path to check against @return true if source path is an ancestor, false otherwise
2411 Returns the full path by prepending the root path if necessary. @param path input file system path to be resolved
2412 Strips the root path from a given file system path. @param p the input Path object @return the stripped path string or an empty string if at root
2413 Returns the stripped-out root path component. @param p input file system path
2414 Resolves symbolic links within a filesystem context. @param fc FileContext instance @param path Path to resolve @return resolved object of type T or null if not found
2415 Renames a file system object at the specified source path to the target path. @param src source path of the file system object @param dst target path for the renamed file system object @param options optional rename options (e.g. OVERWRITE)
2416 Converts a HAR file status to a FileStatus object. @param h HarStatus object containing metadata @return FileStatus object representing the archived data
2417 Retrieves a FileStatus object for the given FTP file. @param ftpFile FTP file object @param parentPath path to the parent directory of the file
2418 Verifies token storage file and logs failure if reading fails. @param tokenFile File containing token storage data @param category Kerberos-related category (e.g., "Kerberos Configuration") @param message detailed error description
2419 Prints token file contents with matching alias in a formatted table. @param tokenFile File containing token storage data @param alias Text alias to match against tokens @param conf Hadoop configuration (not used) @param out PrintStream for outputting the formatted table
2420 Synchronizes local cache with ZooKeeper, updating current tokens and removing stale entries. @param ident TokenIdent object containing sequence number
2421 Initializes MetricsSystemImpl with given service identifier. @param prefix unique service identifier
2422 Processes an RPC call by invoking a method on the server, handling method invocation, metrics initialization, and response management. @param server associated RPC server @param connectionProtocolName name of the protocol used for communication @param request incoming RPC request @param methodName invoked method name @param protocolImpl protocol implementation details @return RpcWritable object containing the result or null if deferred
2423 Adds elapsed time to a mutable metric in the registry. @param name unique metric identifier @param elapsed time value to consider for updating min/max
2424 Adds a persisted delegation token to the SecretManager. @param identifier unique token identifier @param renewDate renewal date for the token @throws IOException if adding the token fails
2425 Updates and clears owner statistics by re-adding all tokens.
2426 Removes expired delegation tokens from storage and logs their expiration. @throws IOException if an I/O error occurs during the removal process
2427 Initializes an ActiveStandbyElector instance with ZooKeeper connection settings. @param zookeeperHostPorts host and port combination for ZooKeeper connection @param zookeeperSessionTimeout session timeout in milliseconds @param parentZnodeName parent node name for internal state management @param acl access control list for ZooKeeper operations @param authInfo authentication information for ZooKeeper connections @param app callback object for application-specific logic @param maxRetryNum maximum number of retries for connection establishment @param truststoreKeystore trust store and key store configuration
2428 Initiates leader election by joining the process with provided application data. @param data byte array containing application data
2429 Creates an InetSocketAddress from a target string and default port. @param target the target string to be converted into a URI @param defaultPort default port number if not present in the URI @param configName configuration property name (if applicable)
2430 Invokes the specified method on a remote server with given parameters. @param proxy unused @param method the Java Method instance to invoke @param args array of arguments for the method invocation @return Message object containing the response from the server, or null if in async mode @throws ServiceException if an error occurs during invocation
2431 Invokes a remote method with the given parameters. @param proxy Object representing the remote proxy @param method Method to be invoked @param args Array of arguments for the method invocation @return Message object representing the response or null if async mode @throws ServiceException if an error occurs during invocation
2432 Parses a search expression from the given argument deque. @param argsDeque collection of arguments to parse @return parsed Expression object or Print instance if empty
2433 Retrieves a pre-registered or creates a new WritableComparator instance for the given class implementing WritableComparable. @param c Class implementing WritableComparable
2434 Authenticates a user using delegation tokens in the HTTP request. @param request servlet request containing authentication information @param response HttpServletResponse instance @return AuthenticationToken object representing the authenticated user, or null if not found
2435 Handles deprecation logic for given name and DeprecationContext. @param deprecations context containing deprecation information @param name requested property name @return array of updated property names
2436 Sets configuration as environment variables. @param env map to store environment variable key-value pairs
2437 Cancels a token with given owner and returns the cancelled TokenIdent object. @param token TokenIdent object representing the token to be cancelled @param canceller owner of the token, must match the token's owner or have renewer privileges @return the cancelled TokenIdent object
2438 Retrieves Unix group IDs for a specified user and updates them with netgroups. @param user unique user identifier @return List of resolved group IDs or an empty list if not found
2439 Extracts a tar archive into the specified directory. @param inFile input tar file @param untarDir target directory for extraction
2440 Sets file permissions using the chmod command. @param filename file path @param perm permission to be set @return exit code of the chmod command or throws IOException on failure
2441 Sets file readability based on the operating system. @param f File object @param readable true for making readable, false for removing read permission @return true if successful, false otherwise
2442 Sets file writability on the specified File object. @param f File to modify @param writable true for making writable, false for making unwritable @return true if operation was successful, false otherwise
2443 Sets executable flag on a file. @param f File object @param executable true for executable, false otherwise @return true if successful, false on failure or Windows platform
2444 Loads file permission information using native I/O or non-native methods. If native code is available, it attempts to load permissions via native I/O; otherwise, it resorts to non-native methods.
2445 Sets file owner and/or group using a Hadoop Path. @param p the Hadoop Path to set ownership for @param username string representing the new owner's name (optional) @param groupname string representing the new group name (optional)
2446 Sets file permissions on the specified file. @param f File object to set permissions for @param permission FsPermission value to apply
2447 Caches netgroups for specified Unix groups. @param groups list of Unix group identifiers
2448 Dumps all user tokens, displaying the count and types. @param ugi UserGroupInformation object containing credentials
2449 Logs user information to the provided logger. @param log Logger instance for logging @param caption Caption or description of the logged information @param ugi UserGroupInformation object containing user credentials and tokens
2450 Validates directory by checking its existence and access permissions. @param localFS Local file system instance @param dir Hadoop Path to the directory @param expected FsPermission object for the directory
2451 Validates a directory's existence and permissions, then performs disk I/O checks. @param localFS Local file system instance @param dir Hadoop Path to the directory @param expected FsPermission object for the directory
2452 Retrieves file statuses for an array of paths using the default filter. @param files array of input file system paths @return array of FileStatus objects or empty array if no files match the filter
2453 Retrieves used space for the root directory. @throws IOException if an I/O error occurs
2454 Retrieves block locations for a given FileStatus object within the specified range. @param file FileStatus object representing the target file @param start starting offset of the desired data in bytes @param len length of the desired data in bytes @return array of BlockLocation objects or an empty array if the file has no blocks
2455 Opens a HAR file for reading and returns a data input stream. @param f the path to the file @param bufferSize the buffer size for the data input stream @return FSDataInputStream object or throws IOException if invalid file name
2456 Opens a file for reading with checksum validation. @param f file path @param bufferSize buffer size for input stream @return FSDataInputStream object or throws IOException/UnresolvedLinkException on failure.
2457 Opens a file and returns an input stream with optional checksum verification. @param f Path to the file being accessed @param bufferSize Buffer size for reading data @return FSDataBoundedInputStream object or throws IOException if failed
2458 Renames a file or directory with its associated checksums (if any). @param src source path of the file/directory @param dst target path for the renamed file/directory
2459 Renames a file system object at the specified source path to the target path. @param src source path of the file system object @param dst target path for the renamed file system object @param options optional rename options (e.g. OVERWRITE)
2460 Fetches file statuses within a HAR index. @param parent HarStatus object representing the HAR index @param statuses list of FileStatus objects to be populated
2461 Retrieves HAR file status and converts it to a FileStatus object. @param f the input file path @return FileStatus object representing the archived data
2462 Retrieves the FileStatus of a remote file or directory. @param client active SFTP connection @param file Path object representing the file to fetch status for @return FileStatus object containing file metadata, or null if not found
2463 Retrieves the FileStatus of a given file within an FTP server. @param client FTPClient object for interacting with the FTP server @param file Path to the file whose status is to be retrieved @return FileStatus object representing the file's metadata
2464 Initializes MetricsSystemImpl with default service identifier.
2465 Initializes MutableRollingAverages with a custom metric value name. @param metricValueName name of the metric to track (null defaults to empty)
2466 Replaces the scheduled task with a new one. @param windows number of windows for rolling averages @param interval fixed rate period @param timeUnit unit of time for scheduling
2467 Re-checks the electability of this service, potentially joining or quitting master election.
2468 Re-joins leader election after failure to become active. @param sleepTime time in milliseconds to wait before attempting re-election
2469 Processes a ZooKeeper watch event, handling various connection states and node events. @param zk ZooKeeper client object @param event WatchedEvent object containing the event type and state information
2470 Creates an InetSocketAddress from a target string and default port. @param target the target string to be converted into a URI @param defaultPort default port number if not present in the URI
2471 Authenticates a user using delegation tokens in the HTTP request. @param request servlet request containing authentication information @param response HttpServletResponse instance @return AuthenticationToken object representing the authenticated user, or null if not found
2472 Checks if only the specified key exists in configuration. @param name requested property name @return true if only the key exists, false otherwise
2473 Retrieves raw configuration property value. @param name requested property name
2474 Sets a configuration property with its value and source. @param name unique property name @param value property value @param source source of the property (null for programmatically set)
2475 Removes configuration properties associated with the given name. @param name The original property name
2476 Retrieves the virtual memory size. @return total virtual memory allocated in bytes
2477 Retrieves physical memory size. @return Physical memory size in bytes
2478 Retrieves available virtual memory size.
2479 Retrieves available physical memory size. Calls refreshIfNeeded to ensure metrics are up-to-date.
2480 Returns the total number of processors in the system.
2481 Retrieves the CPU frequency in kHz. @return CPU frequency value
2482 Retrieves cumulative CPU time in milliseconds. @return Cumulative CPU time since system start
2483 Retrieves current CPU usage percentage. @return CPU usage as a percentage or -1.0f if not available
2484 Retrieves the current CPU core usage as a percentage. @return normalized CPU core usage between 0 and 1, or -1 if unavailable
2485 Retrieves network bytes read metric. @return current network bytes read value
2486 Retrieves total bytes written on network. @return Total bytes written or -1 if metrics are outdated
2487 Refreshes netgroup cache by retrieving new group names, clearing existing cache, and re-caching.
2488 Updates the file system status for a given mount point. @param viewFileSystem ViewFileSystem instance @param mountPointMap Map of MountPoints to FsStatus objects @param mountPoint MountPoint object to update @param path Path object representing the file system location
2489 Lists the file statuses within a HAR archive. @param f Path to the HAR file @return Array of FileStatus objects representing the archived data
2490 Retrieves native file link status. @param f input file path to be processed @param dereference whether to dereference symbolic links @return FileStatus object containing file metadata or null if not found
2491 Retrieves file metadata by path. @param f filesystem path @return FileStatus object or throws exception if not found
2492 Lists the file statuses within a given directory. @param f the directory path @return array of FileStatus objects or null if not found
2493 Checks if a remote file exists by attempting to retrieve its status. @param channel active SFTP connection @param file Path object representing the file to check existence for @return true if file exists, false otherwise
2494 Retrieves the file status of a remote file or directory. @param channel active SFTP connection @param sftpFile LsEntry object containing file attributes @param parentPath Path object representing the parent directory @return FileStatus object containing file metadata, or null if not found
2495 Checks if a remote file exists. @param channel active SFTP connection @param file Path object representing the file to check existence for @return true if the file exists, false otherwise
2496 Checks if a file exists on the FTP server. @param client FTPClient object for interacting with the FTP server @param file Path to the file whose existence is to be checked @return true if the file exists, false otherwise
2497 Retrieves the status of a file or directory on the FTP server. @param client active FTP connection @param file Path object representing the file or directory @return array of FileStatus objects for files/directories, or null if not found
2498 Checks if the represented file is a regular file on the FTP server. @param client FTPClient object for interacting with the FTP server @param file Path to the file whose status is to be checked @return true if not directory or symbolic link, false otherwise
2499 Initializes CBZip2InputStream with continuous reading mode. @param in compressed data stream @param readMode continuous or block-by-block reading mode (defaults to continuous)
2500 Calculates the number of bytes until the next BZip2 marker. @param in input stream containing compressed data
2501 Processes create operation result and transitions instance to active or standby state accordingly. @param rc ZooKeeper error code @param path znode creation path @param ctx ZooKeeper client object @param name instance name
2502 Processes a ZooKeeper StatNode result, updating the instance's state and handling potential errors. @param rc ZooKeeper operation result code @param path ZooKeeper node path @param ctx ZooKeeper client object @param stat Node statistics
2503 Creates an InetSocketAddress from a target string and default port. @param target the target string to be converted into a URI
2504 Parses network address specifications into a list of InetSocketAddress instances. @param specs string containing server addresses separated by commas or spaces @param defaultPort default port number to use for unspecified addresses @return List<InetSocketAddress> instance containing parsed addresses
2505 Builds the DT service name from a URI and default port. @param uri URI containing authority to be converted into a service name @param defPort default port number if not present in the URI @return service name or null if invalid input
2506 Creates an XML document representing the application configuration. @param propertyName optional property name to append or null for all properties @param redactor optional ConfigRedactor instance for sensitive data handling @return Document object containing the configuration as XML
2507 Substitutes variables in the given expression with their actual values. @param expr input expression to process
2508 Applies configuration changes from user input. @param out PrintWriter object for output @param reconf Reconfigurable object to update settings @param req HttpServletRequest object containing user input
2509 Sets a configuration property with its value. @param name unique property name @param value property value
2510 Sets a configuration property with its value and source. @param name unique property name @param value property value @param source source of the property (null for programmatically set)
2511 Recursively deletes a file or directory and its contents. @param dir File object to be deleted @param tryGrantPermissions whether to grant permissions before deletion
2512 Returns the number of CPU cores. @return total number of processor cores
2513 Retrieves the status of a file system for a given path. @param fileSystem Hadoop file system object @param path input file path @return Map of MountPoints to FsStatus objects or throws exception if not found
2514 Retrieves file link status with qualified path for symbolic links. @param f input file path to be processed @return FileStatus object containing file metadata or null if not found
2515 Renames a file on the SFTP server. @param channel active SFTP connection @param src source Path object representing the file to rename @param dst destination Path object representing the new filename @return true if renaming was successful, false otherwise
2516 Lists the status of files and directories within a specified remote directory. @param client active SFTP connection @param file Path object representing the remote directory to list @return array of FileStatus objects containing metadata for each listed item, or null if not found
2517 Creates a directory recursively on the remote SFTP server. @param client active SFTP connection @param file Path object representing the directory to create @param permission default file system permissions for the new directory @return true if the directory was created successfully, false otherwise
2518 Performs file globbing on the input pattern and returns a sorted array of matching file statuses. @param pathPattern file system path pattern to match @return FileStatus[] array of matching files or null if not found
2519 Retrieves file statuses for the specified pattern and optional filter. @param pathPattern file system path pattern to match @param filter optional filter for results
2520 Performs globbing on the specified path pattern and returns a sorted array of matching file statuses. @param pathPattern Path object representing the pattern to be matched @return FileStatus[] array containing matching files or null if an I/O error occurs during glob expansion or listing status
2521 Performs file pattern matching and returns a sorted array of matching statuses. @param pathPattern globbing pattern for file paths @param filter optional filter to apply on matched files @return FileStatus[] array of matching file statuses or null if no matches
2522 Renames a file on the FTP server. @param client FTPClient object for interacting with the FTP server @param src source file path @param dst destination file path @return true if rename operation was successful, false otherwise
2523 Deletes a file or directory on the FTP server. @param client active FTP connection @param file Path object representing the file or directory to delete @param recursive true to delete the entire directory tree, false otherwise
2524 Creates the specified directory and all its parents on the FTP server. @param client FTPClient object for interacting with the FTP server @param file Path to the directory to be created @param permission default directory permissions (default: rwxrwxrwx) @return true if the directory was successfully created, false otherwise
2525 Normalizes an IP:port string to a hostname. @param ipPort input string in the format "IP:port"
2526 Retrieves the token service address from a given Token object. @param token the input token containing the service information @return InetSocketAddress representing the token service address
2527 Builds token service endpoint from URI authority. @param uri URL to extract authority from
2528 Returns the canonical service name, using child file systems if available. @return service name or null if child file systems are present
2529 Returns the canonical service name based on the URI and default port. @return Service name or null if invalid input
2530 Substitutes common variables in the given expression. @param expr input expression to process
2531 Retrieves and initializes application configuration setting by name. @param name requested property name @return configured value or null if not found
2532 Retrieves and initializes application configuration settings for the given name, handling deprecation logic and variable substitution. @param name requested property name @param defaultvalue default value to use if not found
2533 Sets an optional configuration property with its value. @param key unique property name @param value property value
2534 Adds a mandatory configuration key and sets its value. @param key unique key name @param value associated property value
2535 Sets the default file system URI in the Hadoop configuration. @param conf Hadoop configuration object @param uri default file system URI to set
2536 Adds a link to the mount table configuration with the given source and target URI. @param conf Hadoop Configuration object @param mountTableName identifier of mount table @param src source path @param target destination URI
2537 Adds link merge slash configuration with target URI. @param conf Hadoop Configuration object @param mountTableName identifier of mount table @param target URI to set as value for CONFIG_VIEWFS_LINK_MERGE_SLASH property
2538 Adds a link fallback configuration to the given Hadoop Configuration object. @param conf the Configuration object to modify @param mountTableName identifier of the mount table @param target the URI for the link fallback
2539 Adds a link merge configuration to the given Configuration object. @param conf Hadoop Configuration instance @param mountTableName identifier of the mount table @param targets array of target URIs for the link merge
2540 Adds a link-nfly configuration property to the given mount table. @param conf Hadoop Configuration object @param mountTableName identifier of mount table @param src source path @param settings configuration settings @param targets target paths
2541 Adds a link regex configuration property to the given Hadoop Configuration. @param conf Hadoop Configuration object @param mountTableName identifier of mount table @param srcRegex source regex pattern @param targetStr target string value @param interceptorSettings optional interceptor settings
2542 Sets the home directory configuration for a given mount table. @param conf Configuration object @param mountTableName identifier of mount table @param homedir path to home directory (must start with '/')
2543 Sets the umask configuration property with its short integer representation. @param conf Hadoop Configuration object @param umask FsPermission object representing the umask value
2544 Sets a list of compression codec classes in the configuration. @param conf Hadoop Configuration object @param classes List of Class objects representing codecs to add
2545 Sets the default compression type for sequence files. @param job Hadoop Configuration object @param val new compression type (enum value)
2546 Retrieves configuration for proxy users. @param filterConfig Filter configuration
2547 Initializes the command-line interface and executes operations based on user-provided arguments. @param args array of command line arguments @return 0 if successful, non-zero value otherwise
2548 Sets an integer configuration property. @param name unique property name @param value integer value
2549 Sets a configuration property with a numeric value. @param name unique property name @param value numeric value as a string
2550 Sets a configuration property with its float value. @param name unique property name @param value float value to be assigned
2551 Sets a configuration property with a numeric value. @param name unique property name @param value numeric value to be stored
2552 Sets a boolean configuration property with its value. @param name unique property name @param value boolean value to be stored
2553 Sets time duration property with specified name, value, and unit. @param name unique property name @param value raw time duration value @param unit TimeUnit to match
2554 Sets storage size configuration with specified unit. @param name unique property name @param value size value in bytes @param unit storage unit (e.g., KB, MB, GB)
2555 Sets a regular expression pattern with its name. @param name unique property name @param pattern compiled regular expression pattern
2556 Sets configuration property with comma-separated string value. @param name unique property name @param values input string array
2557 Sets socket address configuration property with host:port string. @param name unique property name @param addr network address object
2558 Sets a configuration class with its name and interface. @param name unique property name
2559 Recursively deletes a file or directory and its contents. @param dir File object to be deleted
2560 Recursively deletes a directory and its contents, with the option to grant permissions before deletion. @param dir File object to be deleted @param tryGrantPermissions whether to grant permissions before deletion @return true if deletion is successful, false otherwise
2561 Lists files in a directory and returns their statuses. @param f the input directory to list @return array of file status objects or null if an I/O error occurs
2562 Retrieves the status of a symbolic link in the local file system. @param f Path object representing the symbolic link @return FileStatus object containing metadata for the target file or null if not found
2563 Deletes a remote file or directory. @param channel active SFTP connection @param file Path object representing the file or directory to delete @param recursive whether to recursively delete contents of directories @return true if deletion was successful, false otherwise
2564 Creates a BZip2 Compression InputStream from the given seekable input stream. @param seekableIn compressed data stream @param decompressor Decompression object @param start starting position of the input stream @param end ending position of the input stream @param readMode continuous or block-by-block reading mode (defaults to continuous) @return BZip2CompressionInputStream instance
2565 Adds metrics to the source object based on annotated fields. @param source source object to add metrics to @param field Field object associated with the metric
2566 Retrieves configuration value associated with a specific storage type. @param conf application configuration @param t storage type @param name requested property name
2567 Retrieves transfer mode from configuration. @param conf Hadoop Configuration object
2568 Configures FTP data connection mode based on application configuration. @param client FTPClient instance @param conf Configuration object containing mode settings
2569 Retrieves the home directory value from application configuration. @param conf Hadoop Configuration object @param mountTableName identifier of mount table @return configured home directory value or null if not found
2570 Retrieves and initializes the user mask from configuration settings. @param conf Hadoop configuration object @return FsPermission object representing the effective user mask
2571 Retrieves and returns a list of CompressionCodec classes specified in configuration or discovered via service loading. @param conf Hadoop Configuration object
2572 Retrieves the default compression type from configuration. @param job Hadoop Configuration object @return default CompressionType or RECORD if not specified
2573 Formats a security property as a string, incorporating configuration values if available. @param property name of the security property
2574 Validates Hadoop token files by checking system properties and configuration. @param conf hadoop Configuration object
2575 Locates and initializes the keystore using environment variables, configuration settings, or default values. @throws IOException if creation or loading of the keystore fails
2576 Retrieves the local host name, using configuration settings if available. @param conf optional Hadoop Configuration object @return local host name string or null on failure
2577 Retrieves client principal from Hadoop configuration based on Kerberos info. @param protocol protocol class @param conf Hadoop configuration object @return client principal string or null if not found
2578 Retrieves and trims application configuration setting by name. @param name requested property name @return trimmed configured value or null if not found
2579 Updates configuration setting only if it's currently unset. @param name requested property name @param value property value to set
2580 Retrieves application configuration time duration by name or uses default value and unit. @param name requested property name @param defaultValue default time duration in specified defaultUnit @param defaultUnit default TimeUnit for defaultValue @param returnUnit desired TimeUnit for the converted value @return configured time duration as a long in returnUnit or throws exception on failure
2581 Retrieves the storage size for a given key, using the default value if not set. @param name requested property name @param defaultValue default value to use when key is not present @param targetUnit desired output unit (e.g. MB, GB) @return storage size in target unit
2582 Retrieves the storage size value for the given name, converting it to the specified target unit. If no value is found, returns the default value in the target unit. @param name property name @param defaultValue default value to return if not found @param targetUnit desired output unit (e.g. KB, TB) @return storage size value in target unit
2583 Retrieves and compiles a regular expression pattern from configuration. @param name requested property name @param defaultValue default pattern to use if invalid configuration found @return compiled Pattern object or default value if not valid
2584 Retrieves and initializes application configuration setting by name. @param name requested property name @return collection of substrings from the configured value or null if not found
2585 Retrieves and initializes application configuration setting by name. @param name requested property name @return configured string array or null if not found
2586 Retrieves and initializes application configuration setting by name. @param name requested property name @param defaultValue default values to use if property is not found @return configured value as array of strings or default values
2587 Retrieves and initializes application configuration setting by name. @param name requested property name @return configured value as a collection of trimmed strings or null if not found
2588 Retrieves and trims application configuration setting by name. @param name requested property name
2589 Retrieves and initializes application configuration setting by name, falling back to default values. @param name requested property name @param defaultValue default string values to use if not found in config
2590 Retrieves configuration properties with a specified prefix. @param confPrefix configuration property prefix @return Map of configured values or empty map if none found
2591 Appends a JSON property with configuration values to the generator. @param config application configuration settings @param name requested property name @param redactor instance for sensitive value redaction
2592 Updates a reconfigurable property with the given value. @param property name of the affected property @param newVal new value attempted in the property change @throws ReconfigurationException if the property is not reconfigurable
2593 Retrieves configuration property by name and logs access. @param name requested property name
2594 Retrieves default mount table name from Hadoop configuration. @param conf Hadoop configuration object
2595 Checks if native Bzip2 library is loaded and initialized. @param conf Hadoop configuration object @return true if native Bzip2 library is loaded, false otherwise
2596 Retrieves the default SocketFactory instance from application configuration settings. @param conf Hadoop configuration
2597 Retrieves the static username from configuration settings, handling deprecated UGI key. @param conf Configuration object to fetch username from
2598 Prints an application configuration option with its value. @param option the name of the configuration option to display
2599 Initializes TruststoreKeystore configuration from Hadoop Configuration object. @param conf Hadoop Configuration instance
2600 Spawns an auto-renewal thread for user credentials if necessary. @param force whether to force spawning the thread regardless of conditions
2601 Initializes a KeyProvider instance with the given configuration. @param conf key management configuration settings
2602 Fetches ZooKeeper ACLs from configuration. @param conf Configuration object @return List of ACL objects or empty list if not found
2603 Retrieves hash type from configuration settings. @param conf Hadoop Configuration object @return hash type constant (jenkins or murmur)
2604 Retrieves and parses an EnumSet configuration setting. @param key unique identifier for the configuration setting @param enumClass Class of the Enum type to map @param ignoreUnknown whether to raise an exception for unknown values @return EnumSet containing parsed enum values or null if not found
2605 Retrieves and parses integer range configuration property. @param name requested property name @param defaultValue default value to use if not found
2606 Retrieves application configuration setting by name with logging. @param name requested property name @param defaultValue default value to use if not found
2607 Sets an optional configuration property with its string representation of a boolean value. @param key unique property name @param value boolean value to be converted and stored as a string
2608 Sets an optional double configuration property with its value. @param key unique property name @param value double property value
2609 Adds a mandatory configuration key and sets its boolean value. @param key unique key name @param value true or false value for the key
2610 Adds a mandatory configuration key and sets its double value. @param key unique key name @param value associated double property value
2611 Sets default file system URI from a legacy identifier. @param conf Hadoop configuration object @param uri legacy file system identifier to convert and use as URI
2612 Adds a link-nfly configuration property to the given mount table with specified targets. @param conf Hadoop Configuration object @param mountTableName identifier of mount table @param src source path @param settings configuration settings @param targets array of target paths as URIs
2613 Sets the index interval configuration. @param conf Hadoop Configuration object @param interval integer value of the index interval
2614 Sets the IPC ping interval. @param conf configuration object @param pingInterval interval in milliseconds
2615 Sets the connect timeout for IPC client connections. @param conf configuration object @param timeout connection timeout in milliseconds
2616 Sets nested mount point support configuration. @param conf Hadoop Configuration object @param isNestedMountPointSupported boolean value indicating support
2617 Adds an optional configuration key with comma-separated string value. @param key unique property name @param values input string array
2618 Adds a mandatory configuration key with specified values. @param key unique key identifier @param values comma-separated string array of values
2619 Updates and returns the connected address for a given configuration property. @param name unique property name @param addr unresolved or unconnected InetSocketAddress object
2620 Configures the RPC protocol engine with specified class. @param conf Hadoop configuration settings @param protocol target protocol class @param engine selected engine class
2621 Deletes a file or directory, optionally recursively. @param p the Hadoop Path to delete @param recursive whether to delete contents of directories as well @return true if deletion was successful, false otherwise
2622 Recursively deletes a directory and its contents. @param dir Directory to delete @return true if deletion is successful, false otherwise
2623 Retrieves file status for the given path. @param f input filesystem path
2624 Lists file statuses for a given path with chrooted suffix. @param f input filesystem path @return array of FileStatus objects or throws exception if an error occurs
2625 Creates a new file output stream with default permissions and optional overwriting. @param f path to the file @param overwrite whether to overwrite existing files @param bufferSize buffer size for data transfer @param replication replication factor for distributed storage @param blockSize block size for data storage @param progress progress tracking callback
2626 Retrieves and returns the user mask. @return FsPermission object representing the effective user mask
2627 Creates a BlockFactory instance based on the specified type. @param keyToBufferDir unique directory identifier @param configuration Hadoop configuration settings @param name factory type (e.g. DATA_BLOCKS_BUFFER_ARRAY)
2628 Initializes the factory with compression codecs from configuration or defaults. @param conf Hadoop Configuration object
2629 Retrieves and trims application configuration setting by name with a default value. @param name requested property name @param defaultValue value to return if setting is not found
2630 Retrieves integer configuration value by name with default fallback. @param name requested property name @param defaultValue default value to return if not found @return configured integer value or default value
2631 Retrieves application configuration setting as a long value. @param name requested property name @param defaultValue default value to return if not found
2632 Retrieves application configuration setting by name and converts to long bytes. @param name requested property name @param defaultValue default value if not found or invalid
2633 Retrieves application configuration setting as a float, with default value if not found. @param name requested property name @param defaultValue default float value to return if property is missing
2634 Retrieves and parses application configuration setting as a double. @param name requested property name @param defaultValue default value to return if not found
2635 Retrieves application configuration setting as a boolean. @param name requested property name @param defaultValue default boolean value if not found or invalid @return true if valid "true" value, false if valid "false", otherwise default value
2636 Retrieves a Class object by name, using the default class if not found in configuration. @param name requested class name @param defaultValue default class to return if not found
2637 Sets boolean configuration setting only if it's currently unset. @param name requested property name @param value boolean value to set
2638 Retrieves application configuration time duration by name or uses default value and unit. @param name requested property name @param defaultValue default time duration in specified unit @param unit TimeUnit for defaultValue
2639 Retrieves SASL properties based on configuration settings and QOP value. @param conf Hadoop Configuration object @param configKey key to retrieve property from configuration @param defaultQOP default Quality Of Protection value if not found
2640 Retrieves and parses an array of integers from the application configuration. @param name requested property name
2641 Retrieves an array of Class objects by name, with optional default values. @param name requested class names @param defaultValue Class objects to use if not found in configuration @return Class[] object or the provided default value if empty
2642 Retrieves a file by searching for it in the specified local directories. @param dirsProp configuration property containing comma-separated directory paths @param path target file path @return File object if found, throws IOException otherwise
2643 Initializes configured SerializationFactory with given Hadoop configuration. @param conf Configuration object to store
2644 Retrieves configuration parameters with the specified prefix. @param confPrefix configuration property prefix @return Map of configured values or empty map if none found
2645 Retrieves filter configuration parameters with a specified prefix. @param confPrefix configuration property prefix @return Map of configured values or empty map if none found
2646 Propagates configuration options to an FSBuilder instance. @param builder file system builder @param conf Hadoop Configuration object @param prefix property key prefix @param mandatory whether the properties are required
2647 Prints a table of configuration property changes for the given Reconfigurable object. @param out PrintWriter to output the table @param reconf the Reconfigurable object whose properties are being changed
2648 Adds a link to the mount table configuration with source and target URIs. @param conf Hadoop Configuration object @param src source path @param target destination URI
2649 Adds link merge slash configuration with target URI using default mount table name. @param conf Hadoop Configuration object @param target URI to set as value for CONFIG_VIEWFS_LINK_MERGE_SLASH property
2650 Adds a link fallback configuration to the given Hadoop Configuration object. @param conf the Configuration object to modify @param target the URI for the link fallback
2651 Adds link merge configuration to given Configuration object with default mount table name. @param conf Hadoop Configuration instance @param targets array of target URIs for the link merge
2652 Sets home directory configuration using default mount table name. @param conf Hadoop configuration object @param homedir path to home directory (must start with '/')
2653 Retrieves home directory value from Hadoop configuration using default mount table name. @param conf Hadoop Configuration object
2654 Creates an ErasureEncoder instance based on the provided configuration and erasure coding schema. @param conf Hadoop Configuration object @param options ErasureCodecOptions to pass to the encoder constructor
2655 Creates an ErasureDecoder instance based on the provided configuration and erasure coding schema. @param conf Hadoop Configuration object @param options ErasureCodecOptions to pass to the decoder creation
2656 Returns the compressor type based on native library availability. @param conf Hadoop configuration object
2657 Returns the type of Bzip2 decompressor to use based on native library availability. @param conf Hadoop configuration object @return Class of Decompressor subclass or null if not found
2658 Returns the Bzip2 decompressor instance, either native or dummy, based on library loading status. @param conf Hadoop configuration object
2659 Retrieves SocketFactory instance based on application configuration settings and class type. @param conf Hadoop configuration @param clazz Class type for socket factory resolution @return SocketFactory object or null if not found
2660 Constructs a HadoopZookeeperFactory instance with specified security configurations. @param zkPrincipal ZooKeeper principal @param kerberosPrincipal Kerberos principal @param kerberosKeytab Kerberos keytab file path
2661 Initializes the SSL factory with given configuration and mode. @throws GeneralSecurityException for security-related exceptions @throws IOException for I/O-related errors
2662 Checks if authentication method is simple based on configuration. @param conf Hadoop Configuration object
2663 Sets Hadoop security configuration based on authentication method. @param conf Hadoop Configuration object
2664 Retrieves a CryptoCodec instance based on the provided configuration and cipher suite. @param conf Hadoop Configuration object @param cipherSuite CipherSuite instance specifying the encryption settings @return A valid CryptoCodec instance or null if not configured
2665 Retrieves hash instance based on configuration settings. @param conf Hadoop Configuration object
2666 Constructs a FlagSet from an enumeration class and configuration settings. @param enumClass Class of the Enum type to represent @param conf Configuration object containing flag settings @param key unique identifier for the configuration setting @param ignoreUnknown whether to raise an exception for unknown values @return FlagSet representing parsed flags or null if not found
2667 Writes application configuration as XML to the given output writer. @param propertyName optional property name to append or null for all properties @param out Writer object to write the XML document @param config Configuration object containing settings and sensitive data handling
2668 Dumps application configuration settings to the specified writer. @param config system configuration @param out output writer
2669 Sets an optional configuration property with its integer value. @param key unique property name @param value integer value of the property
2670 Sets an optional configuration property with its float value. @param key unique property name @param value float value of the property
2671 Sets an optional configuration property with its double value. @param key unique property name @param value double value of the property
2672 Adds a mandatory configuration key with an integer value. @param key unique key name @param value associated integer property value
2673 Creates a MetricsSource instance from the specified object. @param source object containing metrics registry
2674 Creates a new file output stream with default permissions and optional overwriting. @param f path to the file @param overwrite whether to overwrite existing files @param bufferSize buffer size for data transfer @param replication replication factor for distributed storage @param blockSize block size for data storage
2675 Creates a new output stream for the specified file with the given options. @param f path to the file @param createFlag creation flags @param opts additional options (may include permissions) @return an FSDataOutputStream object or throws an exception if creation fails
2676 Creates a directory with specified permissions and recursively creates parent directories if needed. @param dir directory path to be created @param permission FsPermission object specifying the directory's access mode @param createParent boolean flag indicating whether to create parent directories if they do not exist
2677 Retrieves a compression codec for the given file, based on its name and suffix. @param args input URI to be parsed
2678 Constructs a Kerberos principal from given configuration and host name. @param principalConfig configuration string to parse @param hostname host name to use or get locally if not provided @return constructed Kerberos principal string or original config if invalid
2679 Retrieves and constructs server principal from given configuration and IP address. @param principalConfig Kerberos principal configuration string @param addr client's IP address or null if unknown @return constructed server principal string or original config if invalid
2680 Adds a new protocol with the given implementation. @param rpcKind The type of RPC interaction @param protocolClass Associated protocol class @param protocolImpl Protocol instance to handle RPC communication
2681 Creates a KeyProvider instance using configuration and key name. @param conf Hadoop Configuration object @param configKeyName name of the key to fetch @return KeyProvider instance or null if not found
2682 Retrieves the default file system URI. @param conf Hadoop configuration object @return Default file system URI or throws exception if invalid
2683 Validates the Kerberos 'kinit' executable. @param none
2684 Retrieves and returns a socket address based on application configuration setting. @param name requested property name @param defaultAddress default address to use if setting is not found @param defaultPort default port number to use if setting is not found
2685 Updates the connected address for a given configuration property. @param hostProperty unique host property name @param addressProperty unique address property name @param defaultAddressValue default value to return if setting is not found @param addr unresolved or unconnected InetSocketAddress object @return updated InetSocketAddress object
2686 Builds FSDataInputStream asynchronously using constructed OpenFileParameters. @return CompletableFuture containing the built FSDataInputStream
2687 Builds and opens an FSDataInputStream for the specified file system. @return CompletableFuture<FSDataInputStream> representing the opened file stream
2688 Configures the SFTPFileSystem from a URI, setting host, port, user, and password information. @param uriInfo URI containing configuration details @param conf Configuration object to update with settings
2689 Establishes an SFTP connection using application configuration settings. @throws IOException if connection has been closed or failed to establish
2690 Initializes data input stream buffer size from Hadoop file system configuration.
2691 Opens file stream with specified buffer size. @param f the file path
2692 Opens a file stream with default buffer size. @param fd PathHandle to the file
2693 Appends to file with default buffer size. @param f Path to the file
2694 Appends data to existing file or creates new block if specified. @param f file path @param appendToNewBlock whether to create a new block if not appending
2695 Initializes Cache instance with specified Configuration. @param conf Hadoop configuration object
2696 Initializes Sorter instance with Hadoop configuration and settings. @param fs Hadoop FileSystem object @param comparator RawComparator for sorting key-value pairs @param keyClass Class of the key data type @param valClass Class of the value data type @param conf Configuration object with sorting settings @param metadata Metadata associated with the Sorter instance
2697 Creates a CompressionOutputStream for LZ4 compression. @param out underlying output stream to compress data into @param compressor compression algorithm instance
2698 Creates a CompressionInputStream for LZ4 decompression. @param in the input stream to read from @param decompressor the decompression algorithm to use
2699 Creates an LZ4 decompressor instance with specified buffer size. @return Decompressor object
2700 Creates a CompressionOutputStream instance using the provided OutputStream and Compressor. @param out underlying output stream to compress data into @param compressor compression engine to utilize for compression process @return CompressionOutputStream object, or a BZip2CompressionOutputStream if native Bzip2 library is not loaded
2701 Creates a CompressionInputStream for the given input stream and decompressor. Uses native Bzip2 library if loaded, otherwise falls back to standard BZip2 compression mode. @param in compressed data stream @param decompressor Decompressor object @return CompressionInputStream instance or throws IOException on failure
2702 Creates a CompressionOutputStream with the specified OutputStream and Compressor. @param out underlying output stream to compress data into @param compressor compression algorithm instance
2703 Creates a Compressor instance using the specified buffer size.
2704 Creates a CompressionInputStream using the Snappy algorithm. @param in input stream to read from @param decompressor decompression algorithm to use
2705 Creates a decompressor with specified buffer size. @return Decompressor instance
2706 Copies file buffer size configuration value and uses it to copy bytes from input stream to output stream. @param in InputStream source @param out OutputStream destination @param conf Configuration object with file buffer size configuration
2707 Copies bytes from input stream to output stream with configurable buffer size and optional stream closure. @param in InputStream source @param out OutputStream destination @param conf Configuration object for retrieving buffer size @param close Whether to close the streams after operation (default: false)
2708 Retrieves buffer size configuration value with default fallback. @param conf Configuration object @return configured buffer size or default value
2709 Configures the RawScriptBasedMapping instance with a Hadoop Configuration object. @param conf Hadoop Configuration object to configure the mapping
2710 Retrieves buffer size from Configuration. @param conf Hadoop configuration object
2711 Parses the number of levels for a call queue or scheduler. @param ns namespace string @param conf Configuration object @return minimum level (at least 1)
2712 Retrieves RPC timeout value from configuration. @param conf Configuration object
2713 Retrieves IPC ping interval from configuration with default fallback. @param conf client configuration
2714 Retrieves RPC timeout value from configuration. @param conf client configuration @return non-negative integer timeout value
2715 Initializes LineReader with input stream and buffer size from configuration. @param in InputStream to read from @param conf Configuration object containing IO settings
2716 Initializes LineReader with input stream, configuration, and custom record delimiter. @param in input stream to read from @param conf configuration object for buffer size and other settings @param recordDelimiterBytes custom record delimiter bytes
2717 Retrieves integer configuration value by name with logging. @param name requested property name @param defaultValue default value to return if not found
2718 Sets FTP client timeout based on Hadoop configuration. @param client FTPClient instance @param conf Hadoop Configuration object
2719 Retrieves application configuration setting as a long value. @param key requested property name @param defVal default value to return if not found or invalid
2720 Retrieves the default block size from configuration. @return block size in bytes (default 32MB)
2721 Retrieves application configuration setting as a long value with logging. @param name requested property name @param defaultValue default value to return if not found
2722 Retrieves application configuration setting as a float with logging. @param name requested property name @param defaultValue default float value to return if property is missing
2723 Initializes trash policy with configuration and file system settings. @param conf application configuration @param fs file system instance @param home root path of the trash directory
2724 Checks if nested mount points are supported in Hadoop configuration. @param conf Hadoop configuration object @return true if supported, false otherwise (default: true)
2725 Creates an LZ4 compressor instance with configured buffer size and compression mode. @return Compressor object
2726 Retrieves MultipleLinearRandomRetry retry policy based on configuration settings. @param conf Configuration object @param retryPolicyEnabledKey key for enabling/disabling retry policy @param defaultRetryPolicyEnabled default enabled value if not found @param retryPolicySpecKey key for specifying retry policy parameters @param defaultRetryPolicySpec default retry policy parameters to use if not found
2727 Initializes and configures default web applications. @param parent collection of context handlers @param appDir directory containing application resources @param conf Hadoop Configuration object
2728 Initializes default servlets based on provided configuration. @param configuration server-wide settings
2729 Retrieves server failover enable configuration for a given namespace. @param namespace unique identifier with optional port @param conf application configuration @return true if enabled, false otherwise or if not found
2730 Initializes the Client object with configuration and socket factory. @param valueClass writable class for serialization @param conf Hadoop Configuration object @param factory SocketFactory instance
2731 Retrieves client backoff enable setting from configuration. @param prefix configuration key prefix @return true if enabled, false otherwise
2732 Retrieves client backoff enable setting for the given namespace and port. @param namespace unique namespace identifier @param port server port number @param conf application configuration object @return true if client backoff is enabled, false otherwise
2733 Retrieves password from configuration as a char array, using fallback clear text credentials if enabled. @param name requested property name
2734 Retrieves application configuration setting as a boolean with logging. @param name requested property name @param defaultValue default boolean value if not found or invalid @return true if valid "true" value, false if valid "false", otherwise default value
2735 Resolves the FileSystem class based on the given scheme and configuration. @param scheme file system scheme (e.g. hdfs, s3) @param conf Hadoop Configuration object @return Class<? extends FileSystem> representing the resolved file system implementation @throws IOException if an error occurs during resolution
2736 Creates a file system instance based on the specified URI and Hadoop configuration. @param uri File system URI @param conf Hadoop configuration @return AbstractFileSystem object or throws UnsupportedFileSystemException if not found
2737 Retrieves the BlockingQueue class for IPC call queueing. @param namespace server namespace @param port server port @param conf configuration object @return Class<? extends BlockingQueue<Call>> queue class or LinkedBlockingQueue if not found
2738 Retrieves the RpcScheduler class configuration based on namespace and port. @param namespace unique identifier for server @param port server port number @param conf Configuration object for system settings @return Class<? extends RpcScheduler> configured scheduler class or null if not found
2739 Retrieves a Class object by name, using the default class if not found in configuration. @param name requested class name @param defaultValue default class to return if not found @return Class object or null if not found and default class is not assignable
2740 Retrieves or creates a FileSystem instance for the given URI and Configuration. If the instance already exists, it is returned; otherwise, a new instance is created and registered in the map. The method also handles the creation of a client finalizer if necessary and adds the file system to the list of automatic closers. @param uri unique identifier for the FileSystem instance @param conf Configuration object containing settings for the FileSystem @param key Key object representing the unique identifier for the FileSystem @return the retrieved or created FileSystem instance, or null if not found
2741 Retrieves shutdown timeout from configuration, with minimum value enforced. @param conf application configuration
2742 Retrieves password from credential providers. @param name unique configuration property identifier @return char array representing the password or null if not found
2743 Parses and validates array of capacity weights from configuration. @param priorityLevels number of distinct call priorities @param ns namespace for configuration key @param conf application configuration @return array of positive integers representing capacity weights
2744 Initializes filter instances based on configuration. @param conf Hadoop configuration object @return FilterInitializer[] array or null if not found
2745 Retrieves a list of instances implementing the specified interface. @param name requested class name @param xface interface to implement @return List of instances or empty if not found
2746 Initializes writer with given configuration, output stream, and serialization settings. @param config Hadoop configuration object @param outStream Output stream to write data to @param ownStream Whether the writer owns the output stream @param key Key class type @param val Value class type @param compCodec Compression codec object (optional) @param meta Metadata object (optional) @param syncIntervalVal Synchronization interval value
2747 Propagates configuration options to an FSBuilder instance. @param builder file system builder @param conf Hadoop Configuration object @param prefix property key prefix @param mandatory whether the properties are required
2748 Propagates configuration options to an FSBuilder instance with specified prefixes. @param builder file system builder @param conf Hadoop Configuration object @param optionalPrefix property key prefix for optional properties @param mandatoryPrefix property key prefix for mandatory properties
2749 Verifies the presence of essential native libraries required by the system. Ensures all necessary libraries are available before proceeding, and terminates the process with an error if any libraries are missing.
2750 Returns the compressor type based on configuration settings. @return Class of BZip2 compressor object
2751 Returns the type of BZip2 decompressor to use. @return Class of Decompressor subclass or null if not found
2752 Creates a BZip2 decompressor instance. @return Bzip2Decompressor object
2753 Constructs a HadoopZookeeperFactory instance with specified ZooKeeper principal. @param zkPrincipal unique ZooKeeper principal identifier
2754 Retrieves a set of group names for the given LDAP search result. @param result SearchResult object containing user data @param c DirContext for LDAP operations @param goUpHierarchy level to traverse up in the hierarchy (0-based) @return Set of group names or empty set if not found
2755 Retrieves a CryptoCodec instance based on the provided configuration and cipher suite. @param conf Hadoop Configuration object
2756 Simplified bind method with default configuration. @param socket server socket to bind @param address remote address to bind to @param backlog maximum number of pending connections
2757 Dumps application configuration settings to the specified writer. If a specific property name is provided, it will be dumped; otherwise, all properties will be dumped. Throws an exception if the requested property is not found. @param config system configuration @param propertyName optional property name (null for all properties) @param out output writer
2758 Creates directories without specifying permissions. @param f file path to create directory for @return true if directory creation is successful, false otherwise
2759 Fetches the server principal for a given SASL authentication type. @param authType SASL authentication type @return constructed server principal string or null if not found
2760 Decodes a Hadoop Archive (HAR) file system URI. @param rawURI HAR file system URI to decode @param conf Hadoop configuration object @return Decoded file system URI or throws exception if invalid
2761 Retrieves file system object based on default URI. @param conf Hadoop configuration object
2762 Initializes the file system with a URI and Hadoop configuration. @param name the file system URI @param conf Hadoop configuration object
2763 Creates a new FileSystem instance based on default URI. @param conf Hadoop configuration object
2764 Validates the provided file system path. @param path Path object to check
2765 Retrieves socket address based on application configuration settings. @param hostProperty property name for the host @param addressProperty property name for the address @param defaultAddressValue default address to use if setting is not found @param defaultPort default port number to use if setting is not found
2766 Creates a new file on the remote SFTP server. @param f the file path to create @param permission default permissions for the new file @param overwrite whether to overwrite existing files (true) or throw an exception (false) @param bufferSize output buffer size @param replication block replication factor @param blockSize output block size @param progress progressable callback @return FSDataOutputStream object for writing to the new file
2767 Constructs FutureDataInputStreamBuilderImpl instance with a file system and path. @param fileSystem Hadoop file system instance @param path required path to the file system
2768 Constructs a FutureDataInputStreamBuilderImpl instance with a mandatory file system handle and initializes data input stream buffer size. @param fileSystem the Hadoop File System instance @param pathHandle unique identifier for the file system
2769 Opens a file on the DynamicWrappedIO instance or the provided FileSystem, using either the high-performance 'openFile' method if available, or the classic 'open' call. @param instance the DynamicWrappedIO instance to use @param fs the FileSystem to operate on @param status FileStatus object for the file @param readPolicies String representing the read policy (e.g., "READ") @return FSDataInputStream object or throws IOException if an error occurs
2770 Checks if appending to the base file path is supported. @param fs Filesystem instance @return true if append is supported, false otherwise
2771 Initializes Sorter instance with Hadoop configuration and settings. @param fs Hadoop FileSystem object @param comparator RawComparator for sorting key-value pairs @param keyClass Class of the key data type @param valClass Class of the value data type @param conf Configuration object with sorting settings
2772 Initializes Bzip2Compressor with compression parameters from Hadoop Configuration. @param conf Hadoop configuration object
2773 Reinitializes the Bzip2 compressor with a new Hadoop configuration. @param conf updated Hadoop configuration object
2774 Initializes the Reader by reading and processing sequence file header. @param tempReader true to construct a temporary Reader, false otherwise
2775 Reinitializes the compressor with a new compression configuration. @param conf configuration object containing compression settings
2776 Prepares data output stream for appending a value. @param length length of the value to be appended @return DataOutputStream object for writing the value
2777 Initializes a WBlockState object with the specified compression algorithm, output stream, buffer, and configuration. @param compressionAlgo compression algorithm to use @param fsOut output stream to write data to @param fsOutputBuffer initial buffer content @param conf Hadoop Configuration object for FS output buffer size
2778 Configures the RawScriptBasedMapping instance with a Hadoop Configuration object. @param conf Hadoop Configuration object to configure the mapping
2779 Configures the RawScriptBasedMapping instance with a Hadoop Configuration object. @param conf Hadoop Configuration object to configure the mapping
2780 Creates an Options object from the provided Hadoop Configuration. @param conf Hadoop configuration instance
2781 Retrieves the client timeout value from configuration or fallback values. @param conf client configuration
2782 Establishes a connection to an FTP server based on configuration settings. @return FTPClient instance or null if connection fails
2783 Retrieves positive long application configuration setting. @param key requested property name @param defVal default value to return if not found or invalid
2784 Retrieves default file system server settings. @return FsServerDefaults object with default configuration values
2785 Returns default block size for the given file. @param f Path to the file
2786 Reports checksum failure by relocating the problematic file and its checksum. @param p Hadoop Path to the file with checksum failure @param in input stream of the file @param inPos current position in the input stream @param sums input stream of the checksum file @param sumsPos current position in the checksum stream
2787 Constructs a new CachingGetSpaceUsed instance from the provided Builder. @throws IOException if an I/O error occurs during construction
2788 Fetches the next record from the sequence file and writes it to the provided buffer. @param buffer DataOutputBuffer where the record will be written @return key length or -1 if end of file reached, throws IOException on errors
2789 Retrieves the default retry policy based on configuration settings. @param conf Configuration object @param retryPolicyEnabledKey key for enabling/disabling retry policy @param defaultRetryPolicyEnabled default enabled value if not found @param retryPolicySpecKey key for specifying retry policy parameters @param defaultRetryPolicySpec default retry policy parameters to use if not found @param remoteExceptionToRetry exception type to retry on @return Wrapper Retry Policy object or TRY_ONCE_THEN_FAIL if no retry
2790 Initializes the Client object with configuration and default socket factory. @param valueClass writable class for serialization @param conf Hadoop Configuration object
2791 Retrieves a cached or creates a new Client instance based on the given configuration and socket factory. @param conf Hadoop Configuration object @param factory SocketFactory instance @return Client object, or null if not found in cache
2792 Excludes incompatible credential providers from the given configuration. @param config Hadoop Configuration object @param fileSystemClass Class of the resolved FileSystem implementation @return updated Configuration object or original one if no changes needed
2793 Retrieves an AbstractFileSystem instance based on the specified URI and Hadoop configuration. @param uri File system URI @param conf Hadoop configuration @return AbstractFileSystem object or throws UnsupportedFileSystemException if not found
2794 Builds a server instance with configured parameters. @throws IOException if an I/O error occurs @throws HadoopIllegalArgumentException if configuration or protocol is not set
2795 Retrieves a configured instance of the TrashPolicy. @param conf Hadoop configuration @param fs file system to manage trash for @param home home directory for trash storage
2796 Retrieves a TrashPolicy instance based on Hadoop configuration. @param conf Hadoop configuration object @param fs File system instance
2797 Creates a new instance of the specified DomainNameResolver class based on configuration settings. @param conf Hadoop configuration @param configKey key to identify the resolver class in the configuration
2798 Retrieves a cached or newly created instance of the SaslPropertiesResolver class based on configuration settings. @param conf Hadoop configuration for resolving SASL properties
2799 Validates the SASL property resolver by resolving and loading the associated Class. @param saslPropsResolverKey unique key for the SASL properties resolver
2800 Retrieves an instance of the impersonation provider class specified in configuration. @param conf Hadoop configuration containing impersonation provider class name
2801 Shuts down the executor with configurable timeout and logging. @param conf application configuration
2802 Retrieves password from credential providers or configuration, returning the first non-null result. @param name unique configuration property identifier
2803 Creates a RawErasureEncoder instance with fallback support. @param conf Hadoop configuration @param codecName unique identifier of a coding mechanism @param coderOptions ErasureCoderOptions object @return RawErasureEncoder instance or throws exception if creation fails
2804 Creates a RawErasureDecoder instance with fallbacks. @param conf Hadoop configuration @param codec unique identifier of the coding mechanism @param coderOptions ErasureCoderOptions object
2805 Swaps the call queue and scheduler with a new instance, updating server failover enable configuration. @param schedulerClass class type for the new RpcScheduler @param queueClassToUse class type for the new BlockingQueue @param maxSize maximum length of the new queue @param ns namespace string (optional) @param conf Hadoop Configuration object (optional)
2806 Initializes a FairCallQueue with specified priority levels, capacity, namespace, and server failover configuration. Also sets up WeightedRoundRobinMultiplexer. @param priorityLevels positive integer representing the number of queues @param capacity total capacity across all queues @param ns namespace for configuration retrieval @param capacityWeights array of weights to distribute capacity among queues @param serverFailOverEnabled flag enabling server failover feature @param conf application configuration
2807 Stores an item as a serialized Base64 encoded string in the Hadoop configuration context. @param conf Hadoop configuration context @param item object to serialize @param keyName unique property name for storage
2808 Loads an object of type K from a Hadoop configuration context. @param conf Hadoop configuration context @param keyName name of the property containing serialized data @param itemClass class type to deserialize into @return deserialized object or throws IOException if failed
2809 Stores an array of objects in a Hadoop configuration context. @param conf Hadoop configuration context @param items array of objects to serialize and store @param keyName unique property name for storage
2810 Loads array of objects from Hadoop configuration by key. @param conf Hadoop configuration context @param keyName requested property name @param itemClass class type to deserialize into @return array representation of the loaded items or null if not found
2811 Creates a writer for a SequenceFile with given configuration and serialization settings. @param conf Hadoop configuration object @param name Path to the file to write to @param keyClass Key class type @param valClass Value class type @param bufferSize Buffer size for data transfer @param replication Replication factor for distributed storage @param blockSize Block size for data storage @param progress Progress tracking callback @param metadata Metadata object (optional)
2812 Copies configuration and data from source to destination using serialization. @param conf Hadoop configuration object @param src source object to copy @param dst destination object to store copied data @return updated destination object
2813 Propagates configuration options to an FSBuilder instance with specified prefixes. @param builder file system builder @param conf Hadoop Configuration object @param optionalPrefix property key prefix for optional properties @param mandatoryPrefix property key prefix for mandatory properties
2814 Retrieves the set of groups for a given user. @param user unique user identifier @param goUpHierarchy level to traverse up in the hierarchy (0-based) @return Set of group names or empty set if not found
2815 Writes configuration data in the specified format to the given output writer. @param conf Configuration object containing settings and sensitive data handling @param out Writer object to write the formatted data @param format desired output format (JSON or XML) @param propertyName optional property name to dump or null for all properties
2816 Initializes authentication filter within a specified container using configurations. @param container FilterContainer object @param conf Hadoop Configuration object
2817 Creates a SASL client for the specified authentication type. @param authType SASL authentication method @return SaslClient object or null if not supported
2818 Creates a new instance of FileSystem based on the given URI and Hadoop configuration. @param uri file system URI @param conf Hadoop configuration object @return newly created FileSystem instance or null if creation fails
2819 Initializes ViewFileSystem with a URI and Hadoop configuration. @param theUri unique file system identifier @param conf Hadoop configuration object
2820 Initializes the filter file system with a URI and Hadoop configuration. @param name the file system URI @param conf Hadoop configuration object
2821 Resolves file system path against default URI and working directory. @param path input file system path to qualify
2822 Resolves the provided file system path. @param p Path object to resolve
2823 Validates the provided file system path. @param path Path object to check
2824 Initializes AvroFSInput with file context and path, setting up input stream and length. @param fc FileContext object @param p Hadoop file system path to open
2825 Copies a file from source to destination. @param src input file system path @param dst output file system path @param deleteSource whether to delete the source after copying (true) or not (false) @param overwrite whether to overwrite an existing destination (true) or raise an exception (false) @return true if successful, false otherwise
2826 Constructs FSDataInputStreamBuilder instance with a file system and path. @param fileSystem Hadoop file system instance @param path required path to the file system
2827 Constructs an instance with a mandatory file system handle and initializes data input stream buffer size. @param fileSystem the Hadoop File System instance @param pathHandle unique identifier for the file system
2828 Opens a file on the DynamicWrappedIO instance, using either the high-performance 'openFile' method if available, or the classic 'open' call. @param fs FileSystem to operate on @param status FileStatus object for the file @param readPolicies String representing the read policy (e.g., "READ") @return FSDataInputStream object or throws IOException if an error occurs
2829 Tries to load keystore from the provided file path using the given password. If loading fails due to corruption (not a bad/wrong password), it attempts to load from the backup path and renames the original files accordingly. @param path input URI to be parsed @param backupPath backup URI @return FsPermission object representing loaded permissions, or null on failure
2830 Initializes Sorter instance with Hadoop configuration and settings. @param fs Hadoop FileSystem object @param keyClass Class of the key data type @param valClass Class of the value data type @param conf Configuration object with sorting settings
2831 Returns a Bzip2 compressor instance based on native library availability. @param conf Hadoop configuration object @return Compressor instance or BZip2DummyCompressor if native library is not loaded
2832 Initializes the Reader by reading and processing sequence file header. @param filename Path to the sequence file @param in Input stream to read from @param start Starting offset in the file @param length Length of data to be processed @param conf Configuration for the Reader @param tempReader true to construct a temporary Reader, false otherwise
2833 Creates a compression output stream using the provided compressor and output stream. @param out underlying output stream to compress data into @param compressor compression algorithm instance
2834 Creates a new ZStandard compressor instance with configuration-based settings. @throws RuntimeException if native code is missing
2835 Creates a compression input stream using the provided decompressor and input stream. @param in the underlying input stream to read from @param decompressor the decompression algorithm to use @return CompressionInputStream object or throws IOException if an error occurs
2836 Creates a ZStandard decompressor instance. @throws RuntimeException if native code is missing
2837 Prepares a data block for writing by initializing the necessary state and returning an appender. @throws IOException if I/O error occurs
2838 Initializes a new instance of ScriptBasedMapping with a given Hadoop Configuration. @param conf Hadoop Configuration object to configure the mapping
2839 Configures the RawScriptBasedMapping instance with a Hadoop Configuration object. @param conf Hadoop Configuration object to configure the mapping
2840 Initializes the KeyShell command-line interface by parsing command line arguments. @param args array of command line arguments @return int indicating successful initialization (0) or error handling (1)
2841 Constructs a ConnectionId instance with the given parameters. @param addr server InetSocketAddress @param protocol client protocol class @param ticket user credentials @param rpcTimeout RPC timeout value in milliseconds @param connectionRetryPolicy retry policy for failed connections @param conf application configuration settings
2842 Creates a new file on the FTP server. @param file Path to the file to be created @param permission default directory permissions (default: rwxrwxrwx) @param overwrite true to overwrite existing files, false otherwise @param bufferSize buffer size for writing data @param replication block replication factor @param blockSize block size in bytes @param progress progress callback object @return FSDataOutputStream instance for writing to the file
2843 Retrieves default file system server settings based on the provided path. @param p Path object (not used)
2844 Creates a new file output stream with default permissions and optional overwriting. @param f path to the file @param overwrite whether to overwrite existing files
2845 Creates a new file output stream with default permissions and progress tracking. @param f path to the file @param progress progress tracking callback
2846 Creates a new file output stream with default permissions and specified replication. @param f path to the file @param replication replication factor for distributed storage
2847 Creates a new file output stream with default permissions and optional overwriting. @param f path to the file @param replication replication factor for distributed storage @param progress progress tracking callback
2848 Creates a new file output stream with default permissions and optional overwriting. @param f path to the file @param overwrite whether to overwrite existing files @param bufferSize buffer size for data transfer
2849 Creates a new file output stream with default permissions and optional overwriting. @param f path to the file @param overwrite whether to overwrite existing files @param bufferSize buffer size for data transfer @param progress progress tracking callback
2850 Constructs an FSDataOutputStreamBuilder instance with a mandatory file system and path. @param fileSystem required Hadoop file system @param p required file path
2851 Fetches the next record from the sequence file and writes it to the provided Writable object. @param key Writable object where the record will be written @return true if a record was successfully read, false otherwise
2852 Fetches the next record from the sequence file, deserializes a key object using configured deserializer, and returns it. @throws IOException if an error occurs during reading or deserialization
2853 Initializes the Invoker with a given protocol, connection ID, configuration, factory, and alignment context. @param protocol Class containing the ProtocolInfo annotation @param connId unique connection identifier @param conf Hadoop Configuration object @param factory SocketFactory instance @param alignmentContext AlignmentContext object
2854 Retrieves a cached client instance based on given Hadoop configuration. @param conf Hadoop Configuration object
2855 Retrieves a cached or creates a new Client instance based on the given configuration and socket factory. @param conf Hadoop Configuration object @param factory SocketFactory instance
2856 Initializes an Invoker instance with the given protocol class, connection ID, configuration, socket factory, and alignment context. @param protocol Class containing the ProtocolInfo annotation @param connId unique connection identifier @param conf Hadoop Configuration object @param factory SocketFactory instance @param alignmentContext AlignmentContext object
2857 Checks if a specific RPC method is supported in the given protocol version. @param rpcProxy RPC proxy object @param protocol target protocol class @param rpcKind RPC kind @param version protocol version @param methodName name of the method to check for support @return true if method found and supported, false otherwise
2858 Initializes configured Trash instance with given Hadoop configuration and file system. @param fs File system instance @param conf Hadoop configuration object
2859 Retrieves a singleton instance of the NetworkTopology class with default initialization. @param conf Hadoop configuration for the instance
2860 Initializes a new instance of the SaslRpcClient with specified parameters. @param ugi UserGroupInformation object for authentication @param protocol Class representing the RPC protocol to use @param serverAddr InetSocketAddress of the server to connect to @param conf Hadoop configuration for resolving SASL properties and other settings
2861 Refreshes super user groups configuration for proxy users. @param conf Hadoop configuration @param proxyUserPrefix prefix to be used for proxy users
2862 Adds a shutdown hook with specified priority. @param shutdownHook Runnable task to be executed during shutdown @param priority integer value representing hook's urgency level
2863 Retrieves password from configuration. @param name unique configuration property identifier @return password string or null if not found
2864 Retrieves user password from configuration or credential providers. @param conf Configuration object @param alias unique identifier @param defaultPass default password value @return retrieved password or default if not found
2865 Retrieves a list of ZooKeeper authentication information from the given configuration key. @param conf Hadoop Configuration object @param configKey unique identifier for the security configuration property @return List of ZKAuthInfo objects or empty list if not found
2866 Initializes the DecayRpcScheduler with provided configuration. @param numLevels number of priority levels @param ns namespace identifier @param conf application configuration
2867 Creates a deep copy of the original writable object using serialization. @param orig original writable object to clone @param conf Hadoop configuration for cloning operation @return cloned writable object or null on failure
2868 Writes application configuration as XML to the specified output stream. @param out Output stream object in UTF-8 encoding
2869 Selects the SASL client based on available authentication types. @param authTypes list of SaslAuth objects containing authentication details @return selected SaslAuth object or null if not supported
2870 Initializes FtpFs with FTP file system URI and Hadoop configuration. @param theUri input file system URI @param conf Hadoop configuration object
2871 Initializes a local file system representation with specified configuration settings. @param theUri input file system URI
2872 Initializes the file system with a URI and Hadoop configuration. @param name the file system URI @param conf Hadoop configuration object
2873 Initializes MultipartUploaderBuilderImpl with a file system and path. @param fileSystem Hadoop file system instance @param p input file system path to qualify
2874 Initializes a new PathData instance from the given file system, path string, and file status. @param fs Hadoop file system object @param pathString input file system path to qualify @param stat FileStatus object containing file metadata
2875 Checks if a given path has a specified capability in this FileSystem. @param path filesystem path @param capability string representing the desired capability (e.g. bulk delete, symlink support) @return true if the capability is supported for the provided path; false otherwise
2876 Returns the root directory of a given file system path. @param path input file system path @return qualified Path object representing the root directory
2877 Makes the given file system path qualified by swapping schemes if necessary. @param path input file system path to qualify
2878 Retrieves the status of a file or directory, potentially resolving symbolic links. @param item PathData object containing file system information @param depth current recursion depth (used for link-following decisions) @return FileStatus object representing the file/directory status
2879 Resolves a full file system path by combining the root directory with the provided path. @param path Path object to resolve @return Full file system path as a Path object
2880 Copies a file from source to destination without overwriting or deleting the source. @param src input file system path @param dst output file system path @return true if successful, false otherwise
2881 Creates an FSDataInputStreamBuilder instance for the specified file system and path. @param fileSystem Hadoop file system instance @param path required path to the file system
2882 Creates a data input stream builder for the specified file system and handle. @param fileSystem Hadoop File System instance @param pathHandle unique identifier for the file system
2883 Tries to load keystore permissions from either the old or new path. @param oldPath original keystore path @param newPath updated keystore path @return FsPermission object representing loaded permissions, or null if not found
2884 Creates a BZip2 compressor instance based on native library availability. @return Compressor instance or BZip2DummyCompressor if native library is not loaded
2885 Retrieves the metadata block associated with the specified name. @param name identifier of the desired metadata entry @return BlockReader instance for the specified block region
2886 Retrieves a data block by its index. @param blockIndex unique identifier of the data block @return BlockReader object for the specified data block
2887 Closes the output stream, writes metadata and finalizes writes with error handling. @throws IOException if an I/O error occurs during finalization
2888 Prepares a metadata block for writing with the specified name and compression algorithm. @param name unique identifier of the metadata entry @param compressionName compression algorithm to use by its unique identifier @return BlockAppender object for appending data to the meta block
2889 Prepares metadata block with default compression algorithm. @param name unique identifier of the metadata entry
2890 Initializes data block with a new appender. @throws IOException if I/O error occurs
2891 Creates a new file output stream with default permissions and overwriting enabled. @param f path to the file to be created
2892 Creates a log file in the specified directory with automatic ID generation. @param initial directory path to create the log file in
2893 Creates or appends a log file based on its existence. @param targetFile path to the log file
2894 Saves the provided object to a JSON file in the specified Hadoop filesystem. @param fs target Hadoop filesystem @param path location of the file to save @param instance object to serialize and save @param overwrite whether to overwrite existing files
2895 Creates a new file output stream with default permissions and progress tracking. @param fs Hadoop file system object @param conf Hadoop configuration object @param name Path to the file @param keyClass Key class type @param valClass Value class type @param progress Progress tracking callback @param metadata Metadata object (optional)
2896 Creates a new file in the Hadoop file system. @param f Path to the file @return true if created successfully, false if it already exists
2897 Constructs an FSDataOutputStreamBuilder instance with a mandatory file system and path. @param fileSystem required Hadoop file system @param p required file path
2898 Fetches the next record from the sequence file and sets it to the provided Writable objects. @param key Writable object where the record's key will be written @param val Writable object to store the current value @return true if a record was successfully read, false otherwise
2899 Initializes configured Trash instance with given Hadoop configuration. @param conf Hadoop configuration object
2900 Creates a new instance of the specified DomainNameResolver class for a given URI. @param conf Hadoop configuration @param uri target URI @param configKey key to identify the resolver class in the configuration
2901 Retrieves the cached user-to-groups mapping service. @param conf Hadoop configuration for group mapping @return The Groups instance, or creates a new one if not initialized
2902 Returns a pre-configured Groups instance for user-to-group mapping. @param conf Hadoop configuration for group mapping
2903 Refreshes super user groups configuration for proxy users. @param conf Hadoop configuration
2904 Deletes a file on exit. @param f Path to the file
2905 Registers service shutdown hook with specified priority. @param priority integer value representing hook's urgency level
2906 Creates startup/shutdown message with specified details and logs it. @param clazz class to be shut down @param args command-line arguments (may be null) @param log logging instance
2907 Loads and configures SSL settings from the application configuration.
2908 Creates key managers from configuration settings. @param mode SSL factory mode (e.g. CLIENT, SERVER) @param keystoreType type of keystores to use @param storesReloadInterval interval in milliseconds for reloading keystores
2909 Retrieves a list of ZooKeeper authentication information from the given configuration key. @param conf Hadoop Configuration object
2910 Retrieves the list of groups for a given user. @param user unique user identifier
2911 Writes application configuration as XML to the console.
2912 Negotiates SASL authentication with the server and selects an appropriate AuthMethod. @param ipcStreams IpcStreams object used for communication @return selected AuthMethod or null if not applicable
2913 Initializes a new PathData instance from Hadoop file system and path string. @param fs Hadoop file system object @param pathString input file system path to qualify
2914 Retrieves the contents of a directory as an array of PathData objects. @return array of PathData objects representing directory entries
2915 Ignores a missing directory by throwing the FileNotFoundException, or logs and continues execution. @param fs Hadoop FileSystem instance @param path filesystem path of the missing directory @param e FileNotFoundException to be thrown or ignored
2916 Checks if a given path has a specified capability in this FileSystem. @param path filesystem path @param capability string representing the desired capability (e.g. bulk delete, symlink support) @return true if the capability is supported for the provided path; false otherwise
2917 Checks if a given path has a specified capability in this file system. @param path filesystem path @param capability string representing the desired capability (e.g. bulk delete, symlink support) @return true if the capability is supported for the provided path; false otherwise
2918 Retrieves the root directory of a given Hadoop file system path. @param fs Hadoop file system instance @param path input file system path @return qualified Path object representing the root directory
2919 Opens a file and returns an FSDataInputStreamBuilder instance. @param path required path to the file system
2920 Opens a file and returns a data input stream builder. @param pathHandle unique identifier for the file system
2921 Locates and loads the key store with its associated permissions. @throws IOException if an I/O error occurs during loading
2922 Verifies the integrity of the TFile data index. If the index is null, it creates a new instance using metadata and comparator.
2923 Retrieves metadata block by name from BCF (Binary Column Format). @param name identifier of the desired metadata entry
2924 Initializes a Reader object from the specified input stream, file length, and configuration. @param fin input data stream containing index metadata @param fileLength total size of the file @param conf Hadoop configuration object @throws IOException if an I/O error occurs during initialization
2925 Prepares and writes metadata block to a file. @param name unique identifier of the metadata entry @param compressName compression algorithm to use by its unique identifier @return DataOutputStream object for appending data to the meta block
2926 Closes the TFile output stream, writes metadata and finalizes writes with error handling.
2927 Prepares metadata block with default compression algorithm. @param name unique identifier of the metadata entry
2928 Prepares append key for writing, initializing data block and setting internal state. @param length length of the key to be written @return DataOutputStream object for appending key-value pairs
2929 Copies a file from source to destination with optional deletion of the source. @param src source file @param dstFS destination filesystem @param dst destination path @param deleteSource whether to delete the source file after copying @param conf configuration object for file buffer size @return true if successful, false otherwise
2930 Completes a multipart upload by validating parts, merging into a collector file, and renaming the final file. Ensures all parts are correctly assembled while handling duplicates or empty files. @param multipartUploadId unique identifier for the upload @param filePath target path for the completed file @param handleMap map of part handles to their corresponding data @return PathHandle object representing the completed file
2931 Creates a new file output stream with specified permissions. @param fs FileSystem instance @param file path to the file to be created @param permission Desired file permissions @return FSDataOutputStream object for writing to the file
2932 Creates a new writer for the given file path with default compression and metadata settings. @param name Path to the file to be created @param keyClass Key class type @param valClass Value class type
2933 Rolls the log directory by creating a new log file and updating the current directory path.
2934 Fetches the next record from the MapFile and populates the provided Writable objects. @param key Writable object for the record's key @param val Writable object to store the current value @return true if a record was successfully read, false otherwise
2935 Retrieves a client proxy for the specified protocol and configuration. @param protocol target protocol class @param clientVersion client version identifier @param addr server address @param ticket user authentication information @param conf RPC configuration settings @param factory socket creation factory @param rpcTimeout timeout value for RPC operations @param connectionRetryPolicy policy for retrying connections (unsupported) @param fallbackToSimpleAuth flag to enable simple authentication fallback @return ProtocolProxy instance for the specified protocol and client
2936 Retrieves cached user-to-groups mapping service instance.
2937 Initializes the UserGroupInformation instance with configuration and overrides name rules if necessary. @param conf Hadoop Configuration object @param overrideNameRules whether to override name rules
2938 Initializes an empty AccessControlList instance.
2939 Constructs access control list from string representation. @param aclString string containing ACL parts separated by spaces
2940 Constructs access control list from user and group strings. @param users comma-separated list of user IDs @param groups comma-separated list of group names
2941 Refreshes super user groups configuration for proxy users.
2942 Initializes SSL key and trust managers using file-based keystores. @param mode SSL factory mode (e.g. CLIENT, SERVER)
2943 Establishes a connection to the ZooKeeper ensemble and initializes the CuratorFramework. @param authInfos list of authentication information @param sslEnabled flag to enable or disable SSL
2944 Retrieves the list of user groups for a given user, applying configured rule-based transformations (e.g., to uppercase or lowercase). @param user unique user identifier
2945 Initializes the metrics system, optionally starting it if running in normal mode. @param prefix unique configuration prefix
2946 Appends file extension to current path. @param extension file extension string @return a new PathData instance with appended extension
2947 Retrieves a PathData instance for the specified child directory. @param child PathData object representing the child directory
2948 Recursively processes a PathData object and its contents. @param item the PathData object to process
2949 Checks if a given path has a specified capability in this HTTPS file system. @param path filesystem path @param capability string representing the desired capability (e.g. read-only connector) @return true if the capability is supported; false otherwise
2950 Checks if a given path has a specified capability in this HttpFileSystem. @param path filesystem path @param capability string representing the desired capability (e.g. read-only connector) @return true if the capability is supported for the provided path; false otherwise
2951 Checks if a given path has a specified capability in this file system. @param path filesystem path @param capability string representing the desired capability (e.g. bulk delete, symlink support) @return true if the capability is supported for the provided path; false otherwise
2952 Lists file status within the NflyFS's root directory. @param f Path to query @return FileStatus array or throws FileNotFoundException if not found
2953 Copies a file or directory from the source filesystem to the destination. @param srcFS source filesystem @param srcStatus status of the file or directory to copy @param dstFS destination filesystem @param dst path to the destination location @param deleteSource whether to delete the original after copying (default: false) @param overwrite whether to overwrite an existing file at the destination (default: false) @param conf configuration object for retrieving buffer size and other settings @return true if successful, false otherwise
2954 Copies a file or directory from the source Filesystem to the destination File. @param srcFS source filesystem @param srcStatus status of the source file/directory @param dst destination file @param deleteSource whether to delete the source after copying @param conf configuration object with file buffer size configuration @return true if successful, false otherwise
2955 Opens a file asynchronously and returns an FSDataInputStream instance with specified read policy. @param policy read policy for the opened file
2956 Opens a file with specified configuration and returns an FSDataInputStream instance. @param fs FileSystem object @param file Path to the file in the file system @param bufferSize buffer size for reading data @param length optional file length, -1 if unknown @return FSDataInputStream instance or throws IOException on failure
2957 Loads a Java object from a JSON file in the Hadoop file system. @param fs Hadoop file system instance @param path required path to the JSON file @param status optional file status information (null if not provided) @return loaded Java object or throws an exception on failure
2958 Retrieves the first key in the TFile data index. @throws IOException if an I/O error occurs
2959 Retrieves the last key from the TFile data index. @return RawComparable object representing the last key or null if empty
2960 Retrieves the block containing a given key. @param key target value to search for @param greater whether to find the upper or lower bound @return Location object representing the containing block, or end if not found
2961 Retrieves the key nearest to the specified offset. @param offset target offset @return RawComparable object or null if not found
2962 Initializes Reader instance with FSDataInputStream, file length, and configuration. @param fsdis input stream to the TFile data @param fileLength total size of the TFile data in bytes @param conf Hadoop Configuration object
2963 Initializes a block by closing the previous one and fetching a new BlockReader. @param blockIndex unique identifier of the data block
2964 Appends a key-value pair to the TFile. @param key byte array containing the key @param koff offset into the key buffer @param klen length of the key @param value byte array containing the value @param voff offset into the value buffer @param vlen length of the value
2965 Retrieves the middle key from the sorted index. @throws IOException if an error occurs during reading
2966 Fetches and writes the final key from the sequence file. @param key Writable object where the record will be written
2967 Seeks to the specified position in the file stream, handling binary search and seeking logic. @param key WritableComparable object to search for @param before boolean indicating whether to seek before or after the given key @return comparison result (0 if equal, 1 if greater than, -1 if less than) or throws IOException if an error occurs during reading
2968 Merges key-value pairs from multiple input files, selecting the next highest key-value pair in each iteration. @throws IOException if an I/O error occurs during file merging
2969 Retrieves a client proxy for the specified protocol and configuration. @param protocol target protocol class @param clientVersion client version identifier @param addr server address @param ticket user authentication information @param conf RPC configuration settings @param factory socket creation factory @param rpcTimeout timeout value for RPC operations @return ProtocolProxy instance for the specified protocol and client
2970 Retrieves a protocol proxy for the specified protocol and configuration. @param protocol target protocol class @param clientVersion client version identifier @param conf RPC configuration settings @param factory socket creation factory @param alignmentContext context for alignment operations @return ProtocolProxy instance for the specified protocol and client
2971 Retrieves the current trash directory based on Hadoop's Trash instance.
2972 Retrieves current trash directory based on input file system path. @param path file system path
2973 Ensures the UserGroupInformation instance is initialized. If not, it synchronizes and initializes with default settings.
2974 Sets configuration and initializes UserGroupInformation with overrides. @param conf Hadoop Configuration object
2975 Launches a Hadoop service with configuration, instance, and arguments. @param conf Hadoop Configuration object @param instance Service instance or null to instantiate @param processedArgs List of command-line arguments @param addShutdownHook Whether to register a shutdown hook @param execute Whether to execute the service @return ExitUtil.ExitException indicating service execution status
2976 Initializes ZooKeeper connection and CuratorFramework using default SSL settings. @param authInfos list of authentication information
2977 Initializes a LocalFs instance with a given configuration and URI. @param theUri file system URI @param conf Hadoop configuration settings
2978 Copies an input stream to a target location within the Hadoop file system. @param in InputStream source @param target PathData object containing file path and metadata
2979 Copies a file or directory from the source filesystem to the destination. @param srcFS source filesystem @param src path to the source location @param dstFS destination filesystem @param dst path to the destination location @param deleteSource whether to delete the original after copying (default: false) @param overwrite whether to overwrite an existing file at the destination (default: false) @param conf configuration object for retrieving buffer size and other settings @return true if successful, false otherwise
2980 Attempts to repair and open a file or directory by re-establishing its status. @param mrNodes array of MRNflyNode objects @param f Path object representing the file or directory to be opened @param bufferSize buffer size for I/O operations @return FSDataInputStream object if successful, null otherwise
2981 Copies a file or directory from the source filesystem to the destination. @param srcFS source filesystem @param src source path @param dst destination file @param deleteSource whether to delete the source after copying @param conf configuration object with file buffer size configuration @return true if successful, false otherwise
2982 Opens file for sequential I/O. @return FSDataInputStream instance with read policy set to sequential
2983 Loads a Java object from a JSON file in the Hadoop file system. @param fs Hadoop file system instance @param path required path to the JSON file
2984 Retrieves record number based on nearest location to specified offset. @param offset target offset @return Record number corresponding to the nearest location or null if not found
2985 Retrieves record number based on current file position. @return Record number corresponding to the current location
2986 Initializes a Scanner object with the given Reader and location boundaries. @param reader input stream for TFile data @param begin starting location within the TFile structure @param end ending location within the TFile structure
2987 Seeks to the specified location within the TFile structure. @param l Location object representing the target position
2988 Advances the TFile reader by one record. @return true if successful, false if at end position
2989 Appends a key-value pair to the TFile. @param key byte array containing the key @param value byte array containing the value
2990 Seeks to the specified position in the file stream based on the given key. @param key WritableComparable object to search for
2991 Retrieves the closest key-value pair to the specified key. @param key WritableComparable object to search for @param val Writable object to store the current value @param before boolean indicating whether to seek before or after the given key @return closest key (or null if not found)
2992 Creates a UserGroupInformation object for testing purposes. @param user unique user identifier @param userGroups array of user groups to be assigned
2993 Creates a proxy user for testing purposes. @param user unique user identifier @param realUser actual UserGroupInformation object @return UserGroupInformation instance representing the proxy user
2994 Retrieves user group information, initializing instance if necessary. @return list of user's group names or empty list on failure
2995 Retrieves the set of user groups for the current user.
2996 Authenticates a user and returns the UserGroupInformation instance. @param subject authenticated user identity @param params login parameters, or null for default login @return UserGroupInformation object representing user authentication details @throws IOException if authentication fails
2997 Refreshes Service A's access control list with loaded configuration. @param conf Configuration object containing service authorization settings @param provider PolicyProvider instance for retrieving services and configurations
2998 Authorizes proxy user access based on identity and remote address. @param user UserGroupInformation object @param remoteAddress IP address of the client
2999 Authorizes proxy user access based on group information and remote address. @param user UserGroupInformation object @param remoteAddress InetAddress of the remote host
3000 Launches a Hadoop service with default configuration and instance. @param conf Hadoop Configuration object @param processedArgs List of command-line arguments @param addShutdownHook Whether to register a shutdown hook @param execute Whether to execute the service @return ExitUtil.ExitException indicating service execution status
3001 Initializes ZooKeeper connection and CuratorFramework using default SSL settings. @param authInfos list of authentication information (default: empty)
3002 Copies a file to the specified target location within Hadoop file system. @param src PathData object representing source file @param target PathData object representing destination file
3003 Copies a file or directory from the source filesystem to the destination. @param srcFS source filesystem @param src path to the source location @param dstFS destination filesystem @param dst path to the destination location @param deleteSource whether to delete the original after copying (default: false)
3004 Opens a file stream with specified buffer size across multiple nodes. @param f Path to the file @param bufferSize buffer size for I/O operations @return FSDataInputStream object if successful, null otherwise @throws IOException if any node reports file not found or other errors
3005 Creates and returns a Scanner object to efficiently query data within the specified range. @throws IOException if an I/O error occurs during scanner creation
3006 Creates a Scanner object for the specified record number range. @param beginRecNum starting record number (clamped to 0 if negative) @param endRecNum ending record number (clamped to total entry count if out of bounds) @return Scanner object or throws IOException on error
3007 Initializes a Scanner object with the given Reader and location boundaries. @param reader input stream for TFile data @param offBegin starting offset within the TFile structure @param offEnd ending offset within the TFile structure
3008 Rewinds the TFile scanner to its beginning position.
3009 Seeks to the specified position in the file stream based on the given key. @param key WritableComparable object to search for
3010 Retrieves the closest key-value pair to the specified key. @param key WritableComparable object to search for
3011 Checks if Kerberos security is enabled. @return true if simple authentication method is disabled, false otherwise
3012 Initiates a secure logout operation from the Kerberos keytab, shutting down login renewal and releasing Hadoop login context. @throws IOException if logout fails
3013 Retrieves the array of user group names. @return Array of group names or empty array if none
3014 Checks if a user is in the access control list. @param ugi UserGroupInformation object to check @return true if user is in list, false otherwise
3015 Retrieves UserGroupInformation from a given Subject. @param subject authenticated user identity @return UserGroupInformation object representing user authentication details @throws IOException if authentication fails
3016 Authorizes proxy user access based on identity and remote address. @param user UserGroupInformation object @param remoteAddress IP address of the client
3017 Authorizes the connection based on the provided user and authentication method. If auth method is TOKEN, it skips real user authorization for effective users. @throws RpcServerException if authorization fails
3018 Processes a file or directory path by handling symbolic links, copying files, and validating directory operations. @param src source file or directory data @param dst target file or directory data
3019 Copies a file from the HAR filesystem to a local file system location. @param delSrc whether to delete the original after copying (default: false) @param src path to the source location within the HAR filesystem @param dst path to the destination location on the local file system
3020 Copies a file or directory from the source to a local destination. @param delSrc whether to delete the original after copying (default: false) @param src path to the source location @param dst path to the destination location
3021 Creates a Scanner object spanning a specific byte range within the TFile data. @param offset starting offset of the desired byte range @param length length of the byte range to be scanned
3022 Initializes a Scanner object with the given Reader and key boundaries. @param reader input stream for TFile data @param beginKey starting key within the TFile structure (null uses Reader's beginning) @param endKey ending key within the TFile structure (null uses Reader's end)
3023 Seeks to a specific position in the TFile structure using the provided byte array as a key. @param key byte array representing the target key @param keyOffset starting index within the byte array @param keyLen size of the relevant portion of the byte array @return true if found, false otherwise
3024 Seeks to the specified byte array within the TFile structure. @param key underlying byte array @param keyOffset starting index for the ByteArray view @param keyLen size of the ByteArray view
3025 Seeks to the upper bound of the specified byte array within the TFile structure. @param key underlying byte array @param keyOffset starting index for the search @param keyLen size of the search range
3026 Retrieves the value associated with the given key. @param key WritableComparable object to search for @param val Writable object to store the retrieved value @return Writable object containing the retrieved value or null if not found
3027 Retrieves a ProtocolProxy instance for the specified protocol class. @param protocol target protocol class @param clientVersion client version number @param connId connection identifier @param conf Hadoop configuration object @param factory socket factory @param alignmentContext alignment context (optional) @return ProtocolProxy object; null if not found and not created
3028 Retrieves a protocol proxy for the specified class and configuration. @param protocol target protocol class @param clientVersion client version @param addr server address @param ticket user credentials @param conf Hadoop configuration @param factory socket factory @param rpcTimeout RPC timeout @param connectionRetryPolicy retry policy for connections @param fallbackToSimpleAuth flag to enable simple authentication @return ProtocolProxy object or throws IOException if an error occurs
3029 Retrieves a protocol proxy for the given protocol class and configuration. @param protocol target protocol class @param clientVersion client version number @param addr server address @param ticket user authentication information @param conf Hadoop configuration @param factory socket factory @param rpcTimeout RPC timeout value @param connectionRetryPolicy retry policy for connections @param fallbackToSimpleAuth flag to enable simple auth fallback @return ProtocolProxy object or null if not created
3030 Opens a file for random read access, ensuring secure ownership and permissions. @param f File object to open @param mode Access mode (e.g., "r") @param expectedOwner Expected owner of the file @param expectedGroup Expected group of the file @return RandomAccessFile object or null on failure
3031 Opens an FSDataInputStream for the specified file, ensuring secure access by validating owner and group. @param file the file to be opened @param expectedOwner the expected file owner @param expectedGroup the expected file group @return the opened FSDataInputStream or null if validation fails
3032 Opens a file for read access, enforcing secure ownership and group requirements. @param f File object to open @param expectedOwner expected owner of the file @param expectedGroup expected group associated with the file @return FileInputStream object or null if not opened successfully
3033 Dumps UserGroupInformation details, including authentication method, group names, and credentials. @param title diagnostic message title @param ugi UserGroupInformation object containing user credentials
3034 Retrieves the UserGroupInformation object representing the logged-in user. @return UserGroupInformation object or null if not found
3035 Logs in user from provided Subject object. @param subject authenticated user identity
3036 Processes the RPC request's connection context. @throws RpcServerException if an error occurs during processing
3037 Creates a Scanner object to efficiently query and manipulate TFile data within the specified key range. @param beginKey starting key (null uses Reader's beginning) @param endKey ending key (null uses Reader's end) @return Scanner object or null if invalid key range
3038 Seeks to a specific position in the TFile structure using the provided byte array as a key. @param key byte array representing the target key
3039 Seeks to the specified byte array within the TFile structure. @param key underlying byte array
3040 Seeks to the upper bound of the specified byte array within the TFile structure. @param key underlying byte array
3041 Retrieves a WritableComparable object matching the given key. @param key WritableComparable object to search for @return Matching WritableComparable object or null if not found
3042 Checks for potential presence of a key and returns the associated value. @param key input key to be searched @param val Writable object to store the retrieved value @return Writable object containing the retrieved value or null if not found
3043 Retrieves a ProtocolProxy instance for the specified protocol class. @param protocol target protocol class @param clientVersion client version number @param connId connection identifier @param conf Hadoop configuration object @param factory socket factory @return ProtocolProxy object; null if not found and not created
3044 Retrieves a protocol proxy for the specified class and configuration. @param protocol target protocol class @param clientVersion client version @param addr server address @param ticket user credentials @param conf Hadoop configuration @param factory socket factory @param rpcTimeout RPC timeout @param connectionRetryPolicy retry policy for connections @return ProtocolProxy object or throws IOException if an error occurs
3045 Establishes a network connection to the server and configures I/O streams. @param fallbackToSimpleAuth atomic boolean indicating whether to fall back to simple auth
3046 Opens a file for random read access with secure ownership and permissions. If Kerberos security is disabled, simply opens the file without validation. @param f File object to open @param mode Access mode (e.g., "r") @param expectedOwner Expected owner of the file @param expectedGroup Expected group of the file @return RandomAccessFile object or null on failure
3047 Opens an FSDataInputStream for the specified file with secure access validation. @param file the file to be opened @param expectedOwner the expected file owner @param expectedGroup the expected file group @return the opened FSDataInputStream or null if validation fails
3048 Opens a file for read access with security checks enabled. @param f File object to open @param expectedOwner expected owner of the file @param expectedGroup expected group associated with the file @return FileInputStream object or null if not opened successfully
3049 Checks if a user has administrator access based on ACL rules. @param servletContext Servlet context to retrieve ACL @param remoteUser unique user identifier @return true if user is an admin, false otherwise
3050 Authorizes a user to access a service based on configured ACLs and machine lists. @param user UserGroupInformation object representing the user @param protocol Class<?> of the service being accessed @param conf Configuration object containing Hadoop configuration @param addr InetAddress object representing the client's IP address or hostname @throws AuthorizationException if authorization fails
3051 Retrieves the currently logged-in user's information. @return UserGroupInformation object or null if not found
3052 Checks if user login is Kerberos-based and keytab exists. @return true if using Kerberos credentials with active Hadoop login, false otherwise
3053 Checks if user credentials are from a Kerberos login ticket. @return true if using Kerberos ticket, false otherwise
3054 Executes a privileged action on behalf of the logged-in user if security is enabled, otherwise runs the action directly. @param action PrivilegedAction to execute @return result of the executed action or null if not found
3055 Executes an action as the logged-in user. @param action Privileged action to execute @return Result of the action, or null if not applicable
3056 Initiates failover by ceding active status after a specified delay. @param millisToCede time in milliseconds to wait before transitioning
3057 Performs a graceful failover to the current user. @throws ServiceFailedException if failover fails @throws IOException on interrupt or I/O error
3058 Creates a Scanner object to efficiently query and manipulate TFile data within the specified key range. @param beginKey starting key (null uses Reader's beginning) @param endKey ending key (null uses Reader's end) @return Scanner object or null if invalid key range
3059 Creates a Scanner object to query and manipulate TFile data within the specified key range. @param beginKey starting key (null uses Reader's beginning) @param endKey ending key (null uses Reader's end) @return Scanner object or null if invalid key range
3060 Retrieves a protocol proxy for the specified class and configuration. @param protocol target protocol class @param clientVersion client version @param addr server address @param ticket user credentials @param conf Hadoop configuration @param factory socket factory @return ProtocolProxy object or throws IOException if an error occurs
3061 Retrieves a protocol proxy for the specified class and configuration. @param protocol target protocol class @param clientVersion client version @param addr server address @param ticket user credentials @param conf Hadoop configuration @param factory socket factory @param rpcTimeout RPC timeout
3062 Checks if a user has administrator access based on ACL rules and security configuration. @param servletContext Servlet context to retrieve ACL @param request HTTP request object @return true if user is an admin, false otherwise
3063 Authorizes a user to access a service based on configured ACLs and machine lists. @param user UserGroupInformation object representing the user @param protocolName unique identifier of the protocol @param addr InetAddress object representing the client's IP address or hostname @throws AuthorizationException if authorization fails
3064 Returns the user's home directory path. @return qualified file system path to the user's home directory
3065 Checks access permissions for a file based on the current user's identity and FsAction mode. @param stat FileStatus object representing the file @param mode FsAction indicating the desired permission level @throws AccessControlException if permission is denied, IOException if an error occurs
3066 Initializes a new ViewFileSystem instance with current user and timestamp.
3067 Initializes the ViewFs object with a URI and configuration. @param theUri input file system URI @param conf application configuration settings
3068 Initializes an InodeTree instance from a Hadoop configuration. @param config Hadoop configuration object @param viewName name of the view to initialize @param theUri URI representing the target file system context @param initingUriAsFallbackOnNoMounts flag indicating whether to use the URI as a fallback link if no mount table is found
3069 Returns the home directory of the current user. @return Path object representing the home directory
3070 Establishes a secure HTTP connection to the specified URL with the provided token and authentication parameters. @param url the target URL @param token the delegation or authentication token @param doAs the user to impersonate (null for direct access) @return an HttpURLConnection object representing the established connection
3071 Retrieves the best UserGroupInformation based on ticket cache path and/or user identifier. @param ticketCachePath optional Hadoop ticket cache directory @param user unique user identifier (optional)
3072 Authenticates a user from a keytab file and returns the UserGroupInformation instance. @param user principal name @param path location of the keytab file @return UserGroupInformation object representing user authentication details @throws IOException if authentication fails
3073 Logs all user information to the provided logger. @param log Logger instance for logging @param ugi UserGroupInformation object containing user credentials and tokens
3074 Executes an action with elevated privileges as the current user. @param action Privileged action to execute @return Result of the action, or null if not applicable
3075 Returns the user's shortened name if using a proxy authentication method. @return short username or null otherwise
3076 Waits for a protocol proxy to become available, retrying on connection failures. @param protocol target protocol class @param clientVersion client version @param addr server address @param conf Hadoop configuration @param rpcTimeout RPC timeout @param connectionRetryPolicy retry policy for connections @param timeout maximum wait time in milliseconds @return ProtocolProxy object or throws IOException if an error occurs
3077 Creates a Scanner to query and manipulate TFile data within the specified key range. @param beginKey starting key (null uses Reader's beginning) @param endKey ending key (null uses Reader's end)
3078 Retrieves a protocol proxy for the specified class and configuration. @param protocol target protocol class @param clientVersion client version @param addr server address @param conf Hadoop configuration @param factory socket factory @return ProtocolProxy object or throws IOException if an error occurs
3079 Fetches a protocol proxy for the specified class and configuration. @param protocol target protocol class @param clientVersion client version @param addr server address @param ticket user credentials @param conf Hadoop configuration @param factory socket factory @return ProtocolProxy object or throws IOException if an error occurs
3080 Determines whether instrumentation access is allowed based on ACL rules and security configuration. @param servletContext Servlet context to retrieve ACL @return true if instrumentation access is allowed, false otherwise
3081 Returns the root directory of the trash folder. @param path original file system path
3082 Retrieves the root directories of user trashes, optionally including system-wide trash. @param allUsers whether to include system-wide trash or only per-user trash @return collection of FileStatus objects representing the trash roots
3083 Verifies access permissions for a file based on the current user's identity and the desired permission level. @param path Path object representing the target file @param mode FsAction indicating the desired permission level
3084 Verifies file system access permissions for a given Path and mode. @param path Path object representing the target file or directory @param mode FsAction indicating the desired permission level @throws AccessControlException if permission is denied, IOException if an error occurs
3085 Initializes ViewFileSystem with a URI and Hadoop configuration. @param theUri unique file system identifier @param conf Hadoop configuration object
3086 Retrieves a uniquely identified FileSystem instance for the given URI and configuration. @param uri Hadoop FileSystem URI @param conf Hadoop Configuration object @return the retrieved or created FileSystem instance, or null if not found
3087 Returns the home directory of the current user. @return Path object representing the home directory
3088 Opens a secure connection to the specified URL with the provided authentication token. @param url the target URL @param token the delegation or authentication token @return an HttpURLConnection object representing the established connection
3089 Retrieves a FileSystem instance for the given URI and configuration. @param uri filesystem identifier @param conf Hadoop configuration object @param user optional unique user identifier @return initialized FileSystem object or null on failure
3090 Creates a new FileSystem instance using the provided URI and configuration. @param uri file system URI @param conf Hadoop configuration @param user optional user identifier @return newly created FileSystem object
3091 Retrieves UserGroupInformation from Hadoop ticket cache based on provided ticket cache path and/or user identifier. @param ticketCachePath optional Hadoop ticket cache directory @param user unique user identifier (optional) @return UserGroupInformation object representing authentication details, or null if not found @throws IOException if authentication fails
3092 Tries to login using a keytab file and relogin if necessary. @throws IOException if authentication fails
3093 Authenticates a user from a keytab file and updates the login user. @param user principal name @param path location of the keytab file @throws IOException if authentication fails
3094 Logs all user information from the provided UserGroupInformation object. @param ugi UserGroupInformation containing user credentials and tokens
3095 Waits for a protocol proxy to become available, using RPC timeout and connection timeout. @param protocol target protocol class @param clientVersion client version @param addr server address @param conf Hadoop configuration @param connTimeout connection timeout in milliseconds @return ProtocolProxy object or throws IOException if an error occurs
3096 Waits for a protocol proxy to become available and returns the associated proxy instance. @param protocol target protocol class @param clientVersion client version @param addr server address @param conf Hadoop configuration @param rpcTimeout RPC timeout @param timeout maximum wait time in milliseconds @return ProtocolProxy object or throws IOException if an error occurs
3097 Retrieves a protocol proxy for the specified class and configuration. @param protocol target protocol class @param clientVersion client version @param addr server address @param conf Hadoop configuration @param factory socket factory @return ProtocolProxy object or throws IOException if an error occurs
3098 Retrieves a protocol proxy for the specified class and configuration. @param protocol target protocol class @param clientVersion client version @param addr server address @param conf Hadoop configuration @return ProtocolProxy object or throws IOException if an error occurs
3099 Retrieves the Get User Mappings protocol instance based on configuration settings. @return GetUserMappingsProtocol object or throws IOException if an error occurs
3100 Fetches a ZKFC protocol proxy with given configuration and timeout. @param conf Hadoop configuration settings @param timeoutMs RPC connection timeout in milliseconds @return ZKFCProtocol object or throws IOException on failure
3101 Returns the trash root path for a given file system path. @param path input file system path @return Path object representing the trash root
3102 Retrieves the root directories of user trashes, optionally including system-wide trash. @param allUsers whether to include system-wide trash or only per-user trash @return collection of FileStatus objects representing the trash roots
3103 Initializes ViewFileSystem with Hadoop configuration. @param conf Hadoop configuration object
3104 Adds a test file system to the cache. @param uri Hadoop FileSystem URI @param conf Hadoop Configuration @param fs FileSystem object to be cached
3105 Creates a new FileSystem instance based on the provided URI and configuration. If the URI lacks scheme or authority, it attempts to use the default file system URI. @param uri Hadoop file system URI @param config Hadoop configuration object @return the created FileSystem instance, or throws IOException if invalid
3106 Creates a FileContext instance with the given default file system and Hadoop configuration. @param defFS default file system @param aConf Hadoop configuration object
3107 Opens a secure connection to the specified URL with the provided authentication token. @param url target URL @param token delegation or authentication token @return an HttpURLConnection object representing the established connection
3108 Performs a Kerberos diagnostics scan, checking system properties and configuration options. @throws Exception if an error occurs during the scan
3109 Processes command-line arguments to authenticate a user via keytab and principal. Updates the login user if both -principal and -keytab are specified. @param args array of command-line arguments @return updated or original argument array
3110 Prints user credentials and group affiliations for the current user.
3111 Authenticates a user from a keytab file and updates the login user. @param conf Hadoop configuration @param keytabFileKey configuration property for keytab file location @param userNameKey configuration property for username to authenticate @param hostname host name to use or get locally if not provided @throws IOException if authentication fails
3112 Initializes a Server instance with specified parameters. @param bindAddress server bind address @param port server port number @param rpcRequestClass RPC request class implementation @param handlerCount number of handlers to use @param numReaders number of readers to use (or -1 for default) @param queueSizePerHandler maximum queue size per handler (or -1 for default) @param conf Hadoop Configuration object @param serverName server name identifier @param secretManager SecretManager instance (optional) @param portRangeConfig configuration properties for port range management
3113 Builds SASL negotiation response with initial challenge if token authentication is enabled. @return RpcSaslProto object containing the negotiation message
3114 Waits for a protocol proxy to become available with default timeout. @param protocol target protocol class @param clientVersion client version @param addr server address @param conf Hadoop configuration @return ProtocolProxy object or throws IOException if an error occurs
3115 Waits for a protocol proxy to become available and returns the associated proxy instance. @param protocol target protocol class @param clientVersion client version @param addr server address @param conf Hadoop configuration @param connTimeout connection timeout in milliseconds @return ProtocolProxy object or throws IOException if an error occurs
3116 Adds a new resource object from input stream and updates configuration settings. @param in InputStream containing resource data @param name unique resource identifier
3117 Retrieves a protocol proxy for the specified class and configuration. @param protocol target protocol class @param clientVersion client version @param addr server address @param conf Hadoop configuration @return ProtocolProxy object or throws IOException if an error occurs
3118 Retrieves user groups for each provided username and prints the results. @param args array of usernames to fetch group information for
3119 Initiates a graceful failover through ZKFCs to the specified HA service target. @param toNode HAServiceTarget instance @return 0 on success, -1 on failure
3120 Transfers active state to a remote service. @param remote HAServiceTarget instance @param timeoutMs RPC connection timeout in milliseconds @return ZKFCProtocol object or throws IOException on failure
3121 Handles HTTP GET requests to deliver JMX information in JSON format. @param request HTTP servlet request @param response HttpServletResponse instance for setting HTTP status code
3122 Retrieves or creates a cached FileSystem instance for the given URI and configuration. @param uri unique Hadoop FileSystem URI @param conf Hadoop Configuration object @return the retrieved or created FileSystem instance, or null if not found
3123 Creates a new local file system instance based on the provided configuration. @param conf Hadoop configuration object
3124 Creates a new FileSystem instance based on the provided URI and configuration. @param uri Hadoop file system URI @param conf Hadoop configuration object
3125 Returns a FileContext instance with the given default file system. @param defaultFS default file system
3126 Retrieves FileContext instance for the given default file system URI and Hadoop configuration. @param defaultFsUri URI of the default file system @param aConf Hadoop configuration object @return FileContext instance or throws UnsupportedFileSystemException if retrieval fails
3127 Parses command-line arguments for DtUtilShell, performing user login and setting sub-commands. @param args array of command-line arguments @return updated or original argument array
3128 Authenticates a user from a keytab file using the provided configuration and host name. @param conf Hadoop configuration @param keytabFileKey configuration property for keytab file location @param userNameKey configuration property for username to authenticate @throws IOException if authentication fails
3129 Processes a SASL message from the client, determining the next response based on the current state. @param saslMessage RPC message containing the client's SASL token @return RpcSaslProto object representing the constructed response, or null for simple authentication
3130 Waits for a proxy instance of the given protocol and returns it. @param protocol target protocol class @param clientVersion client version @param addr server address @param conf Hadoop configuration @return ProtocolProxy object or throws IOException if an error occurs
3131 Adds a new resource with specified name and default parser restrictions. @param name unique identifier of the resource
3132 Adds a resource from a specified URL. @param url URL of the resource to be added
3133 Adds a resource object from a specified file and updates configuration settings. @param file Path to the resource file
3134 Adds a new resource from an InputStream. @param in input stream containing resource data
3135 Performs a graceful failover by checking eligibility, determining the old/current active node, and transitioning to a new active state. @throws ServiceFailedException if failover fails or service becomes unhealthy
3136 Creates an HA service proxy using health monitor configuration and timeouts. @throws IOException if failed to create the proxy
3137 Retrieves health monitor proxy with default retries. @param conf Hadoop configuration settings @param timeoutMs RPC request timeout in milliseconds @return HAServiceProtocol object or throws IOException if failed to create
3138 Creates an HA service protocol proxy with lowered timeout. @param conf Hadoop configuration settings @param timeoutMs RPC request timeout in milliseconds @return HAServiceProtocol object or throws IOException if failed to create
3139 Initializes the HAR file system with a specified URI and configuration. @param name unique Hadoop Archive (HAR) file system URI @param conf Hadoop Configuration object
3140 Moves a file to its appropriate trash location based on the provided configuration and file system. @param fs File system instance @param p Path object to be moved @param conf Hadoop configuration object @return true if the file was successfully moved, false otherwise
3141 Initializes a new PathData instance from Hadoop file system and path string. @param pathString input file system path to qualify @param conf Hadoop Configuration object
3142 Retrieves or creates a cached Hadoop FileSystem instance using legacy file system names. @param name legacy file system identifier @param conf Hadoop Configuration object @return the retrieved or created FileSystem instance, or null if not found
3143 Retrieves a cached LocalFileSystem instance based on the provided configuration. @param conf Hadoop Configuration object
3144 Initializes a ChRootedFileSystem instance from a given Hadoop file system and root directory URI. @param uri unique Hadoop FileSystem URI @param conf Hadoop Configuration object
3145 Retrieves or creates a cached FileSystem instance for the given URI and configuration. @param uri unique Hadoop FileSystem URI @param conf Hadoop Configuration object @return the retrieved or created FileSystem instance, or null if not found
3146 Retrieves or creates a cached FileSystem instance for the given URI and configuration. @param uri unique Hadoop FileSystem URI @param conf Hadoop Configuration object @return the retrieved or created FileSystem instance, or null if not found
3147 Retrieves or creates a cached FileSystem instance based on the path's URI and configuration. @param conf Hadoop Configuration object @return the retrieved or created FileSystem instance, or null if not found
3148 Retrieves or creates a cached FileSystem instance for the given URI and configuration. @return the retrieved or created FileSystem instance, or null if not found
3149 Lists file statuses for the given path. @param f Path object @return Array of FileStatus objects or an empty array if no files exist
3150 Retrieves FileContext instance for the given default file system URI. @param defaultFsUri URI of the default file system @return FileContext instance or throws UnsupportedFileSystemException if retrieval fails
3151 Retrieves FileContext instance for the given default file system URI and Hadoop configuration. @param aConf Hadoop configuration object @return FileContext instance or throws UnsupportedFileSystemException if retrieval fails
3152 Retrieves local file system FileContext instance. @param aConf Hadoop configuration object @return FileContext instance or throws UnsupportedFileSystemException if retrieval fails
3153 Initializes a Server instance with specified parameters and registers the given RPC protocol implementation. @param protocolClass RPC request class implementation @param protocolImpl RPC protocol implementation object
3154 Initializes a Server instance with specified parameters and initializes RPC protocol metadata. @param protocolClass the protocol class implementation @param protocolImpl the protocol implementation object @param conf Hadoop Configuration object @param bindAddress server bind address @param port server port number @param numHandlers number of handlers to use @param numReaders number of readers to use (or -1 for default) @param queueSizePerHandler maximum queue size per handler (or -1 for default) @param verbose whether to enable verbose logging @param secretManager SecretManager instance (optional) @param portRangeConfig configuration properties for port range management @param alignmentContext AlignmentContext object
3155 Processes a SASL message from the client, determining the next response based on the current state. @param saslMessage RPC message containing the client's SASL token @throws RpcServerException if negotiation is already complete or authorization fails @throws IOException if authentication failure metrics cannot be incremented or true cause of exception cannot be retrieved
3156 Loads mount table configurations from a specified file path into the Hadoop configuration system. @param mountTableConfigPath the path to the mount table configuration file @param conf existing Hadoop configuration object
3157 Checks if another target node is active for HA service transition. @param targetNodeToActivate identifier of the node to activate @param forceActive whether to forcibly activate even if errors occur @return true if another node is already active, false otherwise
3158 Performs pre-failover checks on the target HA service. @param from HAServiceTarget instance of current active service @param target HAServiceTarget instance of new active service @param forceActive whether to force becoming active despite potential issues @throws FailoverFailedException if any check fails or an exception occurs
3159 Attempts a graceful transition of the service to standby. @param svc HAServiceTarget instance @return true if successful, false otherwise
3160 Resolves a file system path by following symbolic links when necessary. @param filesys Hadoop FileSystem instance @param path Path object to resolve @return the resolved T object or null if not found @throws IOException if an I/O error occurs during resolution
3161 Initializes a new PathData instance from Hadoop file system and local path URI. @param localPath URI of the local file system path @param conf Hadoop Configuration object
3162 Copies files or directories from local file system to the current file system. @param delSrc whether to delete original after copying (default: false) @param overwrite whether to overwrite existing files at destination (default: false) @param srcs array of source file paths @param dst destination directory path
3163 Copies a file or directory from the local filesystem to the current filesystem. @param delSrc whether to delete the original after copying (default: false) @param overwrite whether to overwrite an existing file at the destination (default: false) @param src source path to the location @param dst destination path to the location
3164 Copies a file or directory from the source filesystem to a local file system. @param delSrc whether to delete the original after copying (default: false) @param src path to the source location @param dst path to the destination location @param useRawLocalFileSystem whether to use raw LocalFileSystem instance (default: false)
3165 Updates context based on configuration changes. @param conf updated Hadoop Configuration object @return the updated Context instance
3166 Retrieves a local path by attempting to create it in one of the specified local directories. @param dirsProp comma-separated list of local directory properties @param path file or directory path to be created @return Path object representing the created file or directory, or null if creation fails
3167 Retrieves a raw file system instance based on the provided Hadoop file system path and configuration. @param path input filesystem path to be resolved @param conf Hadoop Configuration object @return an instance of FileSystem, or throws IOException if not found
3168 Retrieves mount path information for a given file system path. @param path Path object to resolve @param conf Hadoop Configuration object @return MountPathInfo object containing the resolved target and remaining path, or null if not found
3169 Expands the given file system path as a glob pattern and returns an array of matching PathData objects. If no matches are found, adds the original path with a null stat to the result. The returned PathData objects preserve relativity based on the type of glob path provided.
3170 Dumps metadata and properties from TFile data structures to the specified output stream. @param file path to the TFile data @param out PrintStream for dumping information @param conf Hadoop Configuration object
3171 Reads token storage from a file and returns Credentials object. @param filename path to the token storage file @param conf Hadoop Configuration object @return Credentials object or throws IOException if an error occurs
3172 Retrieves an array of URLs for JAR files from the given configuration. @param conf Hadoop Configuration object @return Array of URLs or null if no JARs are specified
3173 Initializes the file system and base directory. @return true if initialization is successful, false otherwise
3174 Retrieves local file system FileContext instance. @throws UnsupportedFileSystemException if retrieval fails
3175 Retrieves default FileContext instance. @throws UnsupportedFileSystemException if retrieval fails
3176 Initializes a Server instance with specified parameters and registers the given RPC protocol implementation. @param protocolClass RPC request class implementation @param protocolImpl RPC protocol implementation object
3177 Creates a Server instance with specified parameters. @param protocolClass the protocol class implementation @param protocolImpl the protocol implementation object @param conf Hadoop Configuration object @param bindAddress server bind address @param port server port number @param numHandlers number of handlers to use @param numReaders number of readers to use (or -1 for default) @param queueSizePerHandler maximum queue size per handler (or -1 for default) @param verbose whether to enable verbose logging @param secretManager SecretManager instance (optional)
3178 Initializes SSLFactory with the specified mode and configuration. @param mode client or server mode @param conf base Configuration object
3179 Refreshes Service A access control list using loaded configuration and policy provider. @param conf Configuration object containing service authorization settings @param provider PolicyProvider instance for retrieving services and configurations
3180 Performs a failover from one HA service to another. @param fromSvc the current active HAServiceTarget instance @param toSvc the target HAServiceTarget instance to become active @param forceFence whether to fence the current active service if required @param forceActive whether to force becoming active despite potential issues @throws FailoverFailedException if any check fails or an exception occurs
3181 Resolves local destination path from command arguments. @param args list of command-line arguments
3182 Moves files or directories from local file system to the current file system. @param srcs array of source file paths @param dst destination directory path
3183 Copies files or directories from local file system to the current file system. @param delSrc whether to delete original after copying (default: false) @param overwrite whether to overwrite existing files at destination (default: false) @param srcs array of source file paths @param dst destination directory path
3184 Copies a file or directory from local filesystem to current filesystem. @param delSrc whether to delete the original after copying (default: false) @param overwrite whether to overwrite an existing file at the destination (default: true) @param src source path to the location @param dst destination path to the location
3185 Copies a file or directory from the local filesystem to the current filesystem. @param delSrc whether to delete the original after copying (default: false) @param overwrite whether to overwrite an existing file at the destination (default: false) @param src source path to the location @param dst destination path to the location
3186 Copies a file or directory from the source filesystem to a local file system. @param delSrc whether to delete the original after copying (default: false) @param src path to the source location @param dst path to the destination location
3187 Fetches a local directory path for writing with optional write validation. @param pathStr child path to create @param size requested file size in bytes or SIZE_UNKNOWN for roulette selection @param conf Hadoop Configuration object @param checkWrite whether to validate write access before returning the path @return Path object or null if no valid directory found
3188 Retrieves a file's local read path by searching through configured local directories. @param pathStr file URI @param conf Hadoop Configuration object @return Path to the file if found, otherwise throws DiskErrorException
3189 Retrieves all local paths for reading within a context. @param pathStr relative or absolute directory path @param conf Hadoop Configuration object @return Iterable of local file system Paths to read from
3190 Constructs a new NflyFSystem instance with the given URIs, configuration, and replication settings. @param uris array of Hadoop file system URIs @param conf Hadoop configuration object @param minReplication minimum required number of destinations @param nflyFlags set of Nfly flags @param fsGetter FsGetter instance for retrieving file systems
3191 Runs all input paths as globs and executes the resulting commands. @return 0 on success, -1 on error
3192 Expands the given file system path as a glob pattern and returns a list of matching PathData objects. @param arg Hadoop file system path to expand
3193 Resolves the destination path for remote file operations. @param args list of command-line arguments
3194 Initializes a Reader instance with specified sequence file and configuration. @param fs Hadoop FileSystem object @param file input sequence file path @param conf Hadoop Configuration object
3195 Initializes a Reader instance with the specified input stream and options. @param in FSDataInputStream to read from @param buffersize buffer size for efficient data processing @param start starting offset in bytes @param length total length of data to process @param conf Hadoop Configuration object for customizing reader behavior
3196 Creates a file reader for the specified data file. @param dataFile path to the input sequence file @param conf Hadoop Configuration object @param options variable number of Options to customize the Reader's behavior @return initialized SequenceFile.Reader instance
3197 Fetches next raw key from input stream and initializes reader with specified sequence file. @return true if key fetched successfully, false otherwise
3198 Initializes the Writer with given configuration, output stream, and serialization settings. @param conf Hadoop configuration object @param opts Options to configure the writer @throws IOException if an I/O error occurs during initialization
3199 Prints the TFile Dumper version and metadata for each provided file path. @param args array of file paths to process
3200 Writes token storage to a file in the specified format. @param f File object @param format Desired output format (WRITABLE or PROTOBUF) @param creds Credentials object @param conf Hadoop Configuration object
3201 Rolls the log directory if necessary, based on current date and rolling interval configuration. @throws MetricsException if an error occurs during rollover
3202 Retrieves a sorted list of Paths to JAR files in the specified directory. @param path input URI to be parsed @param useLocal whether to use local file system or not @return List<Path> of matching JAR files or empty list if retrieval fails
3203 Initializes a Server instance with the specified parameters. @param protocolClass the protocol class implementation @param protocolImpl the protocol implementation object @param conf Hadoop Configuration object @param bindAddress server bind address @param port server port number
3204 Creates a Server instance with specified parameters. @param protocolImpl the protocol implementation object @param conf Hadoop Configuration object @param bindAddress server bind address @param port server port number @param numHandlers number of handlers to use @param numReaders number of readers to use (or -1 for default) @param queueSizePerHandler maximum queue size per handler (or -1 for default) @param verbose whether to enable verbose logging @param secretManager SecretManager instance (optional)
3205 Processes an RPC request's out-of-band message. @param header the RpcRequestHeaderProto containing the call ID @param buffer the RpcWritable.Buffer with the received message @throws RpcServerException if an error occurs during processing
3206 Establishes a secure connection to the specified URL. @param url target URL @return connected URLConnection object or throws Exception on failure
3207 Copies a file or directory from local filesystem to current filesystem. @param src source path to the location @param dst destination path to the location
3208 Moves a file or directory from local filesystem to current filesystem. @param src source path to the location @param dst destination path to the location
3209 Copies a file or directory from local filesystem to current filesystem. @param delSrc whether to delete the original after copying (default: false) @param src source path to the location @param dst destination path to the location
3210 Copies a file or directory from the source filesystem to a local file system. @param src path to the source location @param dst path to the destination location
3211 Copies a file or directory from the source filesystem to a local file system and deletes the original. @param src path to the source location @param dst path to the destination location
3212 Copies a file or directory from the source filesystem to a local file system. @param delSrc whether to delete the original after copying (default: false) @param src path to the source location @param dst path to the destination location
3213 Retrieves a local directory path for writing with optional write validation. @param pathStr child path to create @param size requested file size in bytes or SIZE_UNKNOWN for roulette selection @param conf Hadoop Configuration object @param checkWrite whether to validate write access before returning the path @return Path object or null if no valid directory found
3214 Creates a temporary file for writing in the specified local directory. @param pathStr base path to create the directory @param size requested file size or SIZE_UNKNOWN for roulette selection @param conf Hadoop Configuration object @return File object representing the temporary file, or null if no valid directory found
3215 Retrieves a file's local read path by searching through configured local directories within the Hadoop environment. @param pathStr file URI @param conf Hadoop Configuration object @return Path to the file if found
3216 Retrieves all local paths for reading within a context. @param pathStr relative or absolute directory path @param conf Hadoop Configuration object @return Iterable of local file system Paths to read from
3217 Constructs a new NflyFSystem instance with the given URIs and configuration. @param uris array of Hadoop file system URIs @param conf Hadoop configuration object @param minReplication minimum required number of destinations @param nflyFlags set of Nfly flags
3218 Creates a Hadoop file system instance with the given URIs, configuration, and replication settings. @param uris array of Hadoop file system URIs @param conf Hadoop configuration object @param settings string containing key-value pairs for Nfly flags and min replication @param fsGetter FsGetter instance for retrieving file systems @return FileSystem object
3219 Expands given command-line arguments as file system paths and returns a list of matching PathData objects. @param args list of string arguments to expand @return LinkedList of PathData objects or throws IOException if expansion fails
3220 Retrieves a delegation token for the given service using DtFetchers. @param tokenFile File containing token storage @param fileFormat Desired output format (WRITABLE or PROTOBUF) @param alias Unique identifier for service (optional) @param service Text representation of service to match @param url URL string to check against the service name @param renewer Token renewal strategy @param conf Hadoop Configuration object
3221 Creates a new token file with an alias for the specified service. @param tokenFile File object to store the token data @param fileFormat Desired output format (WRITABLE or PROTOBUF) @param alias Text representation of the service alias @param service Text representation of the actual service type @param conf Hadoop Configuration object
3222 Merges multiple token files into a single credentials object and writes the result to a file. @param tokenFiles list of token files to merge @param fileFormat desired output format (WRITABLE or PROTOBUF) @param conf Hadoop configuration (not used)
3223 Removes a token from the specified file. @param cancel true to cancel managed tokens, false otherwise @param tokenFile file containing token storage data @param fileFormat desired output format (WRITABLE or PROTOBUF) @param alias text alias of the service for which the token should be removed @param conf Hadoop configuration object
3224 Renews and writes tokens to a file if they match the given alias. @param tokenFile File object containing token storage data @param fileFormat Desired output format (WRITABLE or PROTOBUF) @param alias Text alias to match against @param conf Hadoop Configuration object
3225 Imports a token file and adds its contents to the Credentials object. @param tokenFile File containing token storage data @param fileFormat Desired output format (WRITABLE or PROTOBUF) @param alias unique identifier for the service @param base64 Base64-encoded string containing encoded data @param conf Hadoop configuration (not used)
3226 Retrieves a sorted list of Paths to JAR files in the specified directory. @param path input URI to be parsed
3227 Initializes a Server instance with specified parameters. @param instance null (deprecated constructor) @throws IOException if an I/O error occurs
3228 Processes an incoming RPC request from a client. @param bb Input buffer containing the RPC request data
3229 Fetches and processes log level configuration from the specified URL. @param urlString target URL string
3230 Moves local file to final output location in Hadoop filesystem. @param fsOutputFile destination path for the file @param tmpLocalFile source path of the file to be moved
3231 Copies a file or directory from the source filesystem to a local file system. @param src path to the source location @param dst path to the destination location @param copyCrc whether to copy the checksum file (default: false)
3232 Retrieves a local directory path for writing. @param pathStr child path to create @param size requested file size in bytes or SIZE_UNKNOWN for roulette selection @param conf Hadoop Configuration object
3233 Creates a temporary file for writing in the specified local directory. @param pathStr base path to create the directory @param size requested file size or SIZE_UNKNOWN for roulette selection @param conf Hadoop Configuration object @return File object representing the temporary file, or null if no valid directory found
3234 Processes raw command-line arguments by expanding and processing them. @param args list of string arguments to expand and process
3235 Creates a SequenceFile writer with specified configuration and options. @param conf Hadoop Configuration object @param opts writer options (compression type, buffer size, etc.) @return Writer object for writing sequence files
3236 Creates a JAR file with classpath entries from the specified input classpath. @param inputClassPath string representation of the classpath @param pwd current working directory @param targetDir output JAR file location @param callerEnv environment variables for replacement in classpath entries @return array containing the path to the generated JAR file and its classpath
3237 Validates a comma-separated list of file paths, expanding wildcards if requested. @param files the list of file paths to validate @param expandWildcard whether to expand wildcard characters in the file paths @return a comma-separated string of validated file paths, or null if invalid input
3238 Continuously reads and processes incoming RPC requests from clients. @throws IOException on I/O errors @throws InterruptedException if the connection is interrupted
3239 Processes incoming RPC requests from clients and handles the associated connection management. @param inBuf Input buffer containing the RPC request data
3240 Retrieves log level configuration from the specified URL.
3241 Sets log level configuration via URL. @throws Exception if operation fails
3242 Creates a KeyProvider instance based on the provided URI and Hadoop Configuration. @param providerUri token service URI @param conf Hadoop Configuration object @return LoadBalancingKMSClientProvider instance or null if not valid
3243 Completes local output by moving file to final Hadoop filesystem location. @param fsOutputFile destination path for the file @param tmpLocalFile source path of the file to be moved
3244 Creates a temporary file for writing within the specified buffer directory. @param pathStr child path to create @param size requested file size in bytes or SIZE_UNKNOWN for roulette selection @param conf Hadoop Configuration object @return File object representing the temporary file
3245 Retrieves a local directory path for writing with default file size selection. @param pathStr child path to create @param conf Hadoop Configuration object
3246 Executes the command with given arguments. @param argv list of string arguments to process
3247 Initializes a new Reader instance with a specified Hadoop file system, file path, and configuration. @param fs Hadoop file system @param file file path within the file system @param conf application configuration
3248 Initializes the Reader instance with specified configuration and directory. @param fs Hadoop File System object @param dirName directory path containing data and index files @param comparator WritableComparator for key comparison @param conf Hadoop Configuration object
3249 Initializes Reader instance from specified directory and configuration. @param fs Hadoop FileSystem object @param dirName directory path containing data and index files @param conf Hadoop Configuration object
3250 Creates a new Reader instance with specified configuration and comparator. @param fs Hadoop FileSystem object @param dirName directory path containing data and index files @param comparator WritableComparator to be used by the Reader @param conf Hadoop Configuration object
3251 Clones file attributes from an input file to a new output file. @param inputFile the original file with attributes to clone @param outputFile the destination file for cloned attributes @param prog progress indicator for the cloning process @return Writer object for writing the cloned file
3252 Creates an index for a MapFile, writing key-value pairs at regular intervals. @param fs Hadoop file system @param dir Directory path where the data and index files are located @param keyClass Class type of the keys in the MapFile @param valueClass Class type of the values in the MapFile @param dryrun Whether to perform a dry run (i.e., create an empty index file) @param conf Hadoop configuration object @return Number of key-value pairs written to the index file, or -1 if no writing was done
3253 Creates a SequenceFile writer with specified configuration and options. @param fs Hadoop FileSystem object @param conf Hadoop Configuration object @param name HDFS file path as a Path object @param keyClass Class object to encapsulate keys @param valClass Class object to encapsulate values @return Writer object for writing sequence files
3254 Creates a SequenceFile writer with specified configuration and options. @param fs Hadoop FileSystem object @param conf Hadoop Configuration object @param name file path as a Path object @param keyClass Class object to encapsulate key data @param valClass Class object to encapsulate value data @param compressionType desired compression type @return Writer object for writing sequence files
3255 Creates a SequenceFile writer with specified configuration, file path, key and value classes, compression type, and progress monitoring. @param fs Hadoop FileSystem object @param conf Hadoop Configuration object @param name HDFS file path as a Path object @param keyClass Class object to encapsulate the key class @param valClass Class object to encapsulate the value class @param compressionType desired compression type @param progress Progressable object for monitoring progress @return Writer object for writing sequence files
3256 Creates a SequenceFile writer with specified configuration and options. @param fs Hadoop FileSystem object @param conf Hadoop Configuration object @param name HDFS file path as a Path object @param keyClass Class object for encapsulating keys @param valClass Class object for encapsulating values @param compressionType desired compression type @param codec compression codec to use, or default if not provided
3257 Creates a SequenceFile writer with specified configuration and options. @param fs Hadoop FileSystem object @param conf Hadoop Configuration object @param name designated HDFS file path as a Path object @param keyClass Class object to encapsulate the key class type @param valClass Class object to encapsulate the value class type @param compressionType desired compression type @param codec compression codec to use, or default if not provided @param progress Progressable object to encapsulate write progress @param metadata metadata configuration to be wrapped @return Writer object for writing sequence files
3258 Creates a SequenceFile writer with specified configuration and options. @param fs Hadoop FileSystem object @param conf Hadoop Configuration object @param name Path to the sequence file @param keyClass Class object for key serialization @param valClass Class object for value serialization @param bufferSize desired buffer size @param replication user-defined replication factor @param blockSize block size to be stored in the option @param compressionType desired compression type @param codec compression codec to use, or default if not provided @param progress Progressable object for tracking progress @param metadata metadata configuration to wrap @return Writer object for writing sequence files
3259 Creates a SequenceFile writer with specified configuration and options. @param fs Hadoop FileSystem object @param conf Hadoop Configuration object @param name the designated HDFS file path as a Path object @param keyClass Class object to encapsulate keys @param valClass Class object to encapsulate values @param compressionType desired compression type @param codec compression codec to use, or default if not provided @param progress Progressable object to encapsulate (optional) @return Writer object for writing sequence files
3260 Creates a SequenceFile writer with specified configuration and key-value pair settings. @param conf Hadoop Configuration object @param out FSDataOutputStream instance to be wrapped @param keyClass Class object for key serialization @param valClass Class object for value serialization @param compressionType desired compression type @param codec compression codec to use (or default if not provided) @param metadata metadata configuration to be wrapped @return Writer object for writing sequence files
3261 Creates a SequenceFile writer with specified configuration, output stream, key class, value class, compression type, and codec. @param conf Hadoop Configuration object @param out FSDataOutputStream instance to be wrapped @param keyClass Class object to encapsulate the key class @param valClass Class object to encapsulate the value class @param compressionType desired compression type @param codec compression codec to use, or default if not provided
3262 Validates a comma-separated list of file paths. @param files the list of file paths to validate
3263 Handles log level requests based on the specified operation. @throws HadoopIllegalArgumentException if invalid operation is provided
3264 Creates a DataBlock instance with the specified parameters. @param index unique identifier of the data block @param limit maximum allowed block size @param statistics BlockUploadStatistics object containing upload metrics @return DataBlock object encapsulating temporary file data
3265 Generates a temporary file path within the cache directory. @param conf Hadoop Configuration object @param localDirAllocator Local directory allocator instance @return Path to the temporary file
3266 Runs FsShell with the provided command-line arguments. @param argv list of string arguments to process @return exit code indicating success or failure
3267 Initializes Reader instance from specified directory and configuration. @param fs Hadoop FileSystem object @param dirName directory path containing data and index files @param conf Hadoop Configuration object
3268 Performs a multi-level merge operation on sorted segments, fetching next raw key from input stream and initializing reader with specified sequence file. @throws IOException if an I/O error occurs during the merging process
3269 Initializes a Writer instance with specified configuration, file system, directory name, and compression settings. @param conf Hadoop Configuration object @param fs Hadoop FileSystem object @param dirName directory path to create and write files in @param comparator WritableComparator instance for key-value pairs @param compress compression type (e.g. NONE, RECORD, BLOCK)
3270 Initializes Writer object with configuration and writes to specified file. @param conf Hadoop Configuration @param fs Hadoop FileSystem @param file output file path @param valClass Writable class type for serialized data
3271 Initializes Writer object with specified configuration and file details. @param conf Hadoop Configuration object @param fs FileSystem instance @param file output file path @param valClass Writable class type for serialized data @param compress compression type (e.g. NONE, BLOCK) @param progress Progressable object for tracking progress
3272 Creates a Writer instance with specified configuration and options. @param conf Hadoop Configuration object @param keyClass key class type for MapFile creation @param valClass value class type to encapsulate
3273 Initializes a Writer instance with specified configuration, file system, directory name, key class type, value class type, compression type, and progressability. @param conf Hadoop Configuration object @param fs Hadoop File System object @param dirName directory path to create and write files in @param keyClass Class of the key to be written @param valClass Class object to encapsulate values @param compress desired compression type @param progress Progressable object to encapsulate
3274 Creates a Writer instance with specified configuration and options. @param conf Hadoop Configuration object @param fs File system to write files in @param dirName directory path to create and write files in @param keyClass key class type for MapFile creation @param valClass value class object to encapsulate @param compress compression type @param codec compression codec to use, or default if not provided @param progress Progressable object to monitor progress
3275 Creates a Writer instance with specified configuration and options. @param conf Hadoop Configuration object @param keyClass Class of the key to be written @param valClass Class object to encapsulate values @param compress desired compression type
3276 Creates a new Writer instance with specified configuration and file system, using the provided comparator and ValueClass. @param conf Hadoop Configuration object @param fs FileSystem to write files in @param dirName directory path to create and write files in @param comparator WritableComparator for ordering data entries @param valClass Class object to encapsulate values
3277 Initializes a Writer instance with specified configuration and options. @param conf Hadoop Configuration object @param fs FileSystem to write data to @param dirName directory path to create and write files in @param comparator WritableComparator for ordering key-value pairs @param valClass Class object to encapsulate written values @param compress desired compression type
3278 Initializes a Writer instance with specified configuration, file system, directory name, comparator, class type, compression type, and progress object. @param conf Hadoop Configuration object @param fs Hadoop File System object @param dirName directory path to create and write files in @param comparator WritableComparator object for ordering data entries @param valClass Class object to encapsulate @param compress desired compression type @param progress Progressable object to track writing progress
3279 Creates a Writer instance with specified configuration and options. @param conf Hadoop Configuration object @param fs FileSystem object @param dirName directory path to create and write files in @param comparator WritableComparator for ordering data entries @param valClass Class object to encapsulate values @param compress compression type (deprecated, use compression option instead) @param codec compression codec (deprecated, use compression option instead) @param progress Progressable object to track writing progress
3280 Creates a SequenceFile writer with specified configuration and settings. @param conf Hadoop Configuration object @param name Path to the file @param keyClass Class object for key serialization @param valClass Class object for value serialization @param compressionType desired compression type @param codec compression codec to use (or default if not provided) @param metadata metadata configuration to be wrapped @param createFlag creation flags @param opts additional options (may include permissions) @return Writer object for writing sequence files
3281 Processes command-line options and executes the application with a JAR file creation option. @param args list of input arguments
3282 Creates a ClassLoader instance for the given JAR file and work directory. @param file the JAR file to be executed @param workDir the working directory for execution @return a ClassLoader instance or throws MalformedURLException if invalid
3283 Processes general options from the command line. @param line CommandLine object containing options to be processed
3284 Retrieves path to cache file based on Hadoop configuration and allocator. @param conf Hadoop Configuration object @param localDirAllocator Local directory allocator instance
3285 Checks if cache space is available for a file of given size. @param fileSize size of the file to be stored @param conf Hadoop Configuration object @param localDirAllocator Local directory allocator instance @return true if cache space is available, false otherwise
3286 Performs a multi-level merge operation on sorted segments. @param segments list of SegmentDescriptors to merge @throws IOException if an I/O error occurs during merging
3287 Performs multi-level merge operation on sorted segments. @param inNames array of input file names @param deleteInputs true to delete input files after merging @param factor merge factor @param tmpDir temporary directory path @return merged RawKeyValueIterator or null if an error occurs
3288 Merges sorted segments from input files into a single file. @param inNames array of input file names @param tempDir temporary directory for intermediate merge outputs @param deleteInputs true to delete input files after merging, false otherwise @return merged RawKeyValueIterator object
3289 Performs a multi-level merge operation on sorted segments using the specified input stream and temporary directory. @param inName Path to the input file @param indexIn Path to the index file @param tmpDir Temporary directory for merging process @return RawKeyValueIterator object or null if an I/O error occurs during merging
3290 Initializes a Writer instance with specified configuration, file system, directory name, and compression settings. Also retrieves the pre-registered or creates a new WritableComparator instance for the given class. @param conf Hadoop Configuration object @param fs Hadoop FileSystem object @param dirName directory path to create and write files in @param keyClass Class implementing WritableComparable @param compress compression type (e.g. NONE, RECORD, BLOCK)
3291 Initializes a Writer instance with specified Hadoop configuration and options. @param fs Hadoop FileSystem object @param dirName directory name for MapFile creation
3292 Merges multiple key-value pairs from input map files into a single output file, optionally deleting the original inputs. @param inMapFiles array of input map file paths @param deleteInputs whether to delete the original input files after merging @param outMapFile path to the output merged map file
3293 Creates a SequenceFile writer with specified configuration and settings. @param fs Hadoop file system instance @param conf Hadoop Configuration object @param name Path to the file @param keyClass Class object for key serialization @param valClass Class object for value serialization @param bufferSize positive buffer size value @param replication desired replication factor (must be > 0) @param blockSize block size in bytes @param createParent whether to enable parent directory creation @param compressionType desired compression type @param codec compression codec to use (or default if not provided) @param metadata metadata configuration to be wrapped @return Writer object for writing sequence files
3294 Parses general command line options and builds the command line. @param opts existing Options object to append to @param args input arguments array @return true if parsing successful, false otherwise
3295 Adds a block entry to the cache and updates statistics. @param blockNumber unique block identifier @param buffer data buffer for validation and writing @param conf Hadoop Configuration object @param localDirAllocator Local directory allocator instance
3296 Performs a multi-level merge operation on sorted segments using the specified input files. @param inNames array of input file names @param deleteInputs true to delete input files after merging @param tmpDir temporary directory path
3297 Performs a multi-level merge operation and writes the result to an output file. @param tmpDir Temporary directory for merging process
3298 Initializes JAR execution with command line arguments. @param args command line arguments
3299 Initializes the parser with Hadoop configuration and command line options. @param conf Hadoop Configuration object @param options Options to parse from the command line @param args input arguments array
3300 Performs a sorting and merging operation on input files. @param inFiles array of input file names @param tempDir temporary directory path @param deleteInput whether to delete the input files after processing @return RawKeyValueIterator object or null if no segments are processed
3301 Performs a multi-level merge operation on sorted segments using the specified input files. @param inFiles array of input file names @param outFile output file path
3302 Sorts input files and merges them into a single output file. @param inFiles array of input files to be sorted @param outFile path to the output file @param deleteInput whether to delete the input files after processing
3303 Initializes parser with Hadoop configuration and command line options. @param opts Options to parse from the command line @param args input arguments array
3304 Initializes the parser with default Hadoop configuration and command line options. @param args input arguments array
3305 Initializes the parser with Hadoop configuration and command line arguments. @param conf Hadoop Configuration object @param args input arguments array
3306 Sorts input file and writes merged result to output file. @param inFile path to input file @param outFile path to output file
3307 Creates a generic options parser with minimal features. @param conf Hadoop Configuration object @param argArray input arguments array
3308 Runs a Hadoop command-line tool with specified configuration and arguments. @param conf Hadoop Configuration object or null to use default @param tool Tool object representing the current application @param args input arguments array @return exit status of the tool execution
3309 Parses command line arguments and configures service launch. @param conf Hadoop Configuration object @param args array of input arguments @return remaining command line arguments or throws exception on failure
3310 Executes the KDiag diagnostic tool with specified configuration and arguments. @param conf Hadoop Configuration object or null to use default @param argv input arguments array @return exit status of the tool execution
3311 Executes the CredentialShell command-line utility with specified arguments. @param args input arguments array
3312 Runs the KeyShell command-line interface with specified configuration and arguments. @param args input arguments array
3313 Runs a Hadoop command-line tool with specified configuration and arguments. @param tool Tool object representing the current application @param args input arguments array
3314 Extracts command options from input arguments. @param conf Hadoop Configuration object @param args list of input arguments @return extracted command options or empty list if insufficient arguments
3315 Runs the KDiag diagnostic tool with specified configuration and arguments. @param conf Hadoop Configuration object or null to use default @param argv input arguments array
3316 Initializes and runs an FsShell instance with specified configuration and arguments. @param argv input arguments array
3317 Executes Hadoop command-line tool with specified configuration and arguments. @param args input arguments array
3318 Runs the Hadoop FindClass tool with specified command-line arguments. @param args input arguments array
3319 Launches a Hadoop service with specified configuration and command-line arguments, then exits the application. @param args list of input arguments
3320 Launches Hadoop service using command-line arguments. @param args list of input arguments
3321 Wraps service launch with varargs into serviceMain(List) call. @param args variable arguments to pass to serviceMain
