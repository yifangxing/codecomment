1 Creates a file range with specified offset and length. @param offset starting byte position in the file @param length number of bytes in the range @return FileRange instance without additional reference
2 Creates a new file range with specified offset, length, and reference. @param offset starting byte position in the file @param length number of bytes in the range @param reference additional related data object @return FileRange instance representing the defined segment
3 Validates file range request. Throws exceptions for invalid ranges. @param range the FileRange to validate @return validated FileRange object
4 Ensures an object is not null. @param obj the object to check @param argName name of the argument for error message
5 Validates that a given long is a positive integer. @param value the number to validate @param argName name of the argument for error message
6 Ensures a long value is non-negative. @param value the value to check @param argName name of the argument for error message
7 Validates that a required argument is present. @param isPresent flag indicating if the argument is provided @param argName name of the argument being checked
8 Validates that an argument is valid. @param isValid boolean indicating if the argument is valid @param argName name of the argument being validated
9 Validates that a given argument is valid. @param isValid boolean indicating if the argument is valid @param argName name of the argument being validated @param validValues string listing valid values for the argument
10 Checks if two long values are equal. @param value1 first value to compare @param value1Name name of the first value for error message @param value2 second value to compare @param value2Name name of the second value for error message
11 Validates that one long is an integer multiple of another. @param value1 the first long value to check @param value1Name name of the first value for error message @param value2 the second long value to check against @param value2Name name of the second value for error message
12 Validates that one long value is greater than another. @param value1 the first long value to compare @param value1Name name of the first value for error message @param value2 the second long value to compare @param value2Name name of the second value for error message
13 Validates that one long value is greater than or equal to another. Throws IllegalArgumentException if condition fails. @param value1 the first value to compare @param value1Name name of the first value for error message @param value2 the second value to compare @param value2Name name of the second value for error message
14 Validates that one long value is less than or equal to another. @param value1 the first value to compare @param value1Name name of the first value for error message @param value2 the second value to compare @param value2Name name of the second value for error message
15 Validates that a long value is within a specified inclusive range. @param value the value to check @param valueName name of the value for error message clarity @param minValueInclusive minimum allowed value (inclusive) @param maxValueInclusive maximum allowed value (inclusive)
16 Checks if a double value is within a specified inclusive range. @param value the value to check @param valueName name of the value for error message @param minValueInclusive minimum allowable value (inclusive) @param maxValueInclusive maximum allowable value (inclusive)
17 Validates paths for bulk deletion. @param paths collection of file system paths to delete @param pageSize maximum number of paths allowed per operation @param basePath root path under which all delete operations must occur
18 Constructs a BlockUploadData instance for a given file. Validates that the file exists and initializes necessary fields. @param file the source file to upload
19 Ensures the provided snapshot is an IOStatisticsSnapshot. @param snapshot the snapshot to validate @return the validated IOStatisticsSnapshot
20 Maps enum names to their values with a specified prefix. @param prefix the prefix to prepend to each enum name @param enumClass the class of the enum type @return Map from prefixed lowercase enum names to enum constants
21 Sorts a list of file ranges by their offset. @param input list of FileRange objects to sort @return array of sorted FileRange objects
22 Checks if one path is a parent of another. @param parent potential parent path @param child potential child path @return true if child is a descendant of parent, false otherwise
23 Determines if two paths belong to the same file system. @param qualPath1 first path for comparison @param qualPath2 second path for comparison @return true if both paths have the same scheme and authority, false otherwise
24 Marks a file for deletion on JVM exit. @param f Path to the file to be marked @return true if marking is successful, false if file does not exist @throws IOException if an I/O error occurs
25 Processes files scheduled for deletion on exit. Iterates through the list, deleting each file if it exists. Ignores exceptions and removes processed paths from the list.
26 Checks if a given path represents a checksum file. @param file the Path object to check @return true if the file is a checksum file, false otherwise
27 Checks if a given file path represents a checksum file. @param file the Path object to check @return true if the file is a checksum file, false otherwise
28 Adjusts block locations for a specified range within an HAR file. @param locations original block locations @param start starting offset of the desired range @param len length of the desired range @param fileOffsetInHar offset of the file within the HAR archive @return adjusted block locations
29 Compares this file status to another based on their paths. @param o the other FileStatus object to compare with @return negative if less, zero if equal, positive if greater
30 Converts an array of FileStatus objects to an array of Path objects. @param stats array of FileStatus objects representing file statuses @return array of Path objects or null if input is null
31 Resolves the intermediate path of a file. @param f input file path @return resolved Path object or throws IOException if unresolved
32 Deprecated method to fetch file replication factor. @param src file path @return short value representing the replication count
33 Retrieves the block size of the specified file. @param f Path to the file @return Block size in bytes @throws IOException if an I/O error occurs
34 Retrieves the default replication factor for a given file path. @param path the file path to check @return the default replication factor (1) @deprecated Use getRecommendedReplication instead.
35 Cleans up thread-local statistics by merging data into root and removing it.
36 Validates arguments for positioned read operation. @param position file position to start reading from @param buffer destination buffer for read bytes @param offset offset within the buffer to start writing @param length number of bytes to read Throws EOFException if position is negative, IllegalArgumentException for invalid length or null buffer, and IndexOutOfBoundsException if buffer capacity is insufficient.
37 Validates the upload ID. @param uploadId unique identifier for the upload @throws IllegalArgumentException if uploadId is null or empty
38 Validates part handles for a multipart upload. Ensures the map is not empty and all keys are positive integers. @param partHandles map of part indices to PartHandle objects
39 Validates path and capability arguments. @param path file system path to validate @param capability capability string to validate @return lowercase standardized capability string
40 Constructs an IrqHandler with a specified name and signal handler. @param name unique identifier for the handler @param handler function to handle interrupts
41 Partitions a list into sublists of a specified size. @param originalList the list to be partitioned @param pageSize the maximum size of each sublist @return a list of sublists, each with at most pageSize elements
42 Initializes JsonSerialization with specified class type and configuration. @param classType Java class to serialize/deserialize @param failOnUnknownProperties flag to throw exception on unknown properties @param pretty flag for pretty-printed JSON output
43 Initializes a new StorageStatisticsFromIOStatistics object. @param name unique identifier for the storage statistics @param scheme storage protocol or scheme @param ioStatistics IOStatistics instance to track
44 Deprecated method to retrieve file system statistics. @return Map of scheme to Statistics objects
45 Creates a new file with specified permissions and options. @param f file path @param permission file permissions @param flags creation flags (e.g., OVERWRITE) @param bufferSize buffer size for data transfer @param replication number of block replicas @param blockSize block size in bytes @param progress progress monitor @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
46 Creates a file non-recursively. @param f path to the file @param permission file permissions @param overwrite flag indicating if file should be overwritten @param bufferSize buffer size for data transfer @param replication replication factor @param blockSize block size @param progress progress monitor @return FSDataOutputStream for writing to the file @throws IOException if operation fails or is unsupported
47 Constructs a PathAccessDeniedException with a specified file path and default error message. @param path the file path where access is denied
48 Constructs a PathPermissionException with a specified file path. @param path the file path where permission is denied
49 Constructs a PathNotFoundException with a specified file path and default error message. @param path the missing file path
50 Constructs exception for existing file path. @param path the file path that already exists
51 Constructs a new PathIOException with the specified path and default error message. @param path the file path where the exception occurred
52 Constructs a new ClosedIOException with the specified path and error message. @param path the file path where the exception occurred @param message the detailed error message associated with the exception
53 Returns the current builder instance. @return the builder object itself
54 Converts permission actions to an extended short integer representation. Deprecated in favor of using toShort(). @return Short value representing file system permissions
55 Converts file system permissions to an octal short value. @return Octal representation of the permission actions
56 Interns multiple strings in an array using weak references. @param strings array of strings to be interned @return array with interned strings
57 Checks if this file instance represents a directory. @return true if it's a directory, false otherwise
58 Checks if a given path is a directory. @param f the file path to check @return true if the path is a directory, false otherwise
59 Determines if the given path data represents a directory. @param item PathData object to check @return true if the path is a directory, false otherwise
60 Retrieves ACL entries for a given path. @param item PathData representing the file or directory @return List of AclEntry objects
61 Checks if a file exists and is a directory. @param f the path to check @return true if the file is a directory, false otherwise
62 Applies new permissions to a file. @param file FileStatus object representing the file @return short value of updated file permissions
63 Determines if the file represented by this instance is a regular file. @return true if it's a regular file, false otherwise
64 Returns the target path of the symbolic link. @throws IOException if the path is not a symbolic link
65 Retrieves the length of the file. @return Length of the file in bytes or cached value @throws IOException if an I/O error occurs
66 Retrieves the length of a file. @param f file path @return Length of the file in bytes @deprecated Use getFileStatus().getLen() instead
67 Retrieves storage policy for a file path. @param src the source file path @return BlockStoragePolicySpi object representing the storage policy @throws IOException if an I/O error occurs
68 Sets extended attribute for a file with default flags. @param path the file path @param name the attribute name @param value the attribute value @throws IOException if an I/O error occurs
69 Constructs a new PathIOException with specified path and underlying cause. @param path the file path where the exception occurred @param cause underlying Throwable that caused this exception
70 Moves the file pointer to a specified position. @param position target byte offset in the file @throws IOException if an I/O error occurs
71 Reads the length of the next record. @return Length of the record or -1 if end reached @throws IOException if an I/O error occurs
72 Returns the current position in the input stream. @return Current byte position @throws IOException if an I/O error occurs
73 Registers an expression class with the factory. @param expressionClass the Expression subclass to register
74 Registers commands using a registrar class. @param registrarClass class containing the registerCommands method
75 Reads data from a specified position in the HAR file into a buffer. Adjusts length if beyond file bounds and returns -1 on end of stream. @param pos starting position in the stream to read from @param b byte array to store the read data @param offset offset in the buffer where data should be written @param length number of bytes to read @return actual number of bytes read, or -1 if end of file is reached @throws IOException if an I/O error occurs
76 Reads data from a specified position in the HAR file into a buffer. @param pos starting position in the file @param b destination buffer for the read bytes @param offset start offset in the buffer @param length number of bytes to read @throws IOException if an I/O error occurs or if there are not enough bytes to read
77 Expands the leftmost pattern in a file path. @param filePatternWithOffset input file pattern with offset @return list of expanded paths or null if no pattern found @throws IOException for illegal patterns
78 Lists file statuses in a directory as a single batch. @param f path to the directory @param token authentication token (not used) @return DirectoryEntries containing all file statuses @throws FileNotFoundException if the directory does not exist @throws IOException on I/O errors
79 Encodes a byte array into a string using specified encoding. @param value byte array to encode @param encoding the encoding method (HEX, BASE64, or default UTF-8) @return encoded string representation of the byte array @throws IOException if encoding fails
80 Lists file statuses matching a filter. @param results list to store matching FileStatus objects @param f directory path to list @param filter criteria to select files @throws FileNotFoundException if the directory does not exist @throws IOException on input/output errors
81 Constructs a MetricsTag with given metadata and value. @param info MetricsInfo object containing metric details @param value current value of the metric
82 Initializes a new metric with metadata. @param info MetricsInfo object containing metric details
83 Retrieves a delegation token for secure web service access. @param url target URL requiring authentication @param token initial token object @param renewer user allowed to renew the token @param doAsUser user on behalf of whom the action is performed @return updated delegation token or null if retrieval fails @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
84 Renews a delegation token for secure web service access. @param url the target URL requiring authentication @param token the Token object containing the delegation token @param doAsUser the user on behalf of whom the action is performed @return the expiration time of the renewed token @throws IOException if an I/O error occurs during renewal @throws AuthenticationException if authentication fails
85 Cancels a delegation token for secure URL access. @param url target URL requiring authentication @param token Token object containing the delegation token to cancel @param doAsUser user on behalf of whom the action is performed @throws IOException if an I/O error occurs during cancellation
86 Initializes a ValueQueue with specified parameters. Validates input arguments and sets up queues and refill threads. @param numValues maximum number of values in each queue @param lowWatermark threshold for triggering refill action (0 < lowWatermark <= 1) @param expiry time after which entries are eligible for removal (in milliseconds) @param numFillerThreads number of threads used to refill queues @param policy synchronization policy for value management @param refiller strategy for filling queues when they reach the low watermark
87 Ensures an object is not null. @param obj the object to check @return the original object if not null @throws NullPointerException with a default message if obj is null
88 Stores storage statistics by name. @param name unique identifier for the statistics @param provider supplier of StorageStatistics objects @return stored StorageStatistics object @throws RuntimeException if provider returns null or invalid name
89 Clears all global storage statistics. Resets stored metrics to default values.
90 Closes the upload data resources. Marks as closed and cleans up streams, byte arrays, and files.
91 Copies a file with optional native unbuffered I/O. @param src source File to copy from @param dst destination File to copy to @throws IOException if an I/O error occurs during copying
92 Closes a Closeable stream safely. @param stream the stream to close
93 Closes provided Closeable streams with optional logging. @param streams Varargs array of Closeable objects to close
94 Performs a disk I/O check on the specified file without using native I/O. @param file File to be checked @throws IOException if an I/O error occurs during the check
95 Ensures data is written to disk and synchronized. Calls flush to write buffered data, then syncs file descriptor. @throws IOException if an I/O error occurs
96 Closes the operation and updates statistics. Marks as failed if applicable and records duration.
97 Sets the current count of used bytes in the buffer. Validates that newCount is within valid range [0, buf.length]. @param newCount new count value to set @return previous count value
98 Retrieves the address of a server connector by index. @param index index of the connector @return InetSocketAddress of the connector or null if invalid
99 Initializes a GcTimeMonitor with specified parameters. Validates input arguments and sets up monitoring configuration. @param observationWindowMs the duration of the observation window in milliseconds @param sleepIntervalMs the interval between GC time checks in milliseconds @param maxGcTimePercentage the maximum allowed GC time percentage @param alertHandler the handler for alerts when GC time exceeds threshold
100 Extracts raw path from request URI. @param request HTTP servlet request @param servletName name of the servlet @return path excluding servlet name
101 Checks equality based on file paths. @param o object to compare with @return true if paths are equal, false otherwise
102 Generates hash code based on the file's path. @return integer hash code of the path
103 Sets both the sample count and sum in a synchronized manner. @param sampleCount total number of samples, must be non-negative @param newSum updated total sum value
104 Merges another MeanStatistic into the current instance. @param other the MeanStatistic to merge @return the updated current MeanStatistic
105 Appends formatted map entries to a StringBuilder. @param sb StringBuilder to append to @param type type identifier for the map @param map map of key-value pairs to format @param separator entry separator string
106 Converts a map entry to a string. @param entry map entry to convert @return formatted string representation of the entry
107 Tracks duration of operations with a given key and count. @param key identifier for the operation @param count associated count for the operation @return StubDurationTracker instance for tracking
108 Converts a map entry to a LongStatistic. @param e map entry with statistic name and value @return LongStatistic object initialized with entry's key and value
109 Constructs an EvaluatingStatisticsMap with passthrough function.
110 Adds a counter function to evaluate and track statistics. @param key unique identifier for the counter @param eval function that computes the count value
111 Adds a gauge function to evaluate metrics. @param key unique identifier for the gauge @param eval function that computes the metric value
112 Adds a function to calculate minimum values. @param key unique identifier for the evaluator @param eval function that performs the evaluation
113 Adds a function to calculate and store the maximum value. @param key unique identifier for the function @param eval function that computes the maximum value
114 Adds a function to calculate mean statistics. @param key unique identifier for the statistic @param eval function that computes the mean
115 Wraps an existing IOStatistics instance. @param statistics the IOStatistics to be wrapped @return a new IOStatisticsSource that wraps the given statistics
116 Provides an instance of an empty IOStatisticsStore. @return An empty IOStatisticsStore singleton instance
117 Returns an instance of empty I/O statistics. @return IOStatistics object with no data initialized
118 Retrieves atomic counter reference by key. @param key unique identifier for the counter @return AtomicLong object or null if not found
119 Retrieves the maximum value reference for a given key. @param key identifier for the maximum value @return AtomicLong representing the maximum value or null if not found
120 Retrieves the minimum value reference by key. @param key unique identifier for the statistic @return AtomicLong representing the minimum value or null if not found
121 Retrieves gauge reference by key. @param key unique identifier for the gauge @return AtomicLong representing the gauge or null if not found
122 Retrieves mean statistic by key. @param key unique identifier for the mean statistic @return MeanStatistic object or null if not found
123 Returns the duration of the first metric. @return Duration object representing the first duration metric
124 Sets the wrapped IOStatistics object. Ensures no existing stats are overwritten. @param wrapped the IOStatistics object to wrap
125 Returns the active instance of DynamicIOStatistics. Ensures the instance is not null by checking its state. @return the active DynamicIOStatistics instance
126 Ensures the FlagSet is mutable. Throws IllegalStateException if the FlagSet is immutable.
127 Converts the block data to a byte array. Validates that the block is not closed and handles different input sources. @return byte array representation of the data @throws IOException if an I/O error occurs during conversion
128 Binds a signal to this handler. @throws IllegalStateException if handler is already bound @throws IllegalArgumentException if JVM has -Xrs set or invalid signal name
129 Decrements the resource reference count. Throws IllegalStateException if called when already at zero. @return true if the resource is marked as closed after decrementing
130 Creates a snapshot of the source map with value transformation. @param source original map to snapshot @param copyFn function to transform values during copying @return ConcurrentHashMap containing transformed entries from the source map
131 Tracks duration of an I/O operation with optional factory. @param factory optional DurationTrackerFactory @param statistic name of the statistic to track @param input callable representing the I/O operation @return result of the I/O operation @throws IOException if operation fails
132 Creates a PairedDurationTrackerFactory. @param first factory for the first duration tracking @param second factory for the second duration tracking @return PairedDurationTrackerFactory instance
133 Returns the count of client backoff disconnections. @return The current count as a long
134 Returns the count of slow RPC calls. @return The number of RPC requests that exceeded the defined threshold time.
135 Returns the count of RPC requeue calls. @return The current number of RPC requeue calls as a long
136 Resets I/O statistics by clearing counters. Logs debug information with context ID.
137 Initializes a new instance of IOStatisticsSnapshot. Calls createMaps to set up concurrent maps for statistics.
138 Checks if I/O statistics are enabled at the thread level. @return true if thread-level I/O stats are enabled, false otherwise
139 Initializes the Gzip decompressor. Sets initial state and resets CRC32 checksum.
140 Updates the encryptor with new IV and padding based on stream offset. @throws IOException if an I/O error occurs
141 Adjusts buffer size for cryptographic operations. @param codec cryptographic codec used @param bufferSize initial buffer size @return adjusted buffer size aligned to algorithm block size
142 Creates a hard link for the specified file. @param src source file to link @param dst destination file name for the new hard link @throws IOException if linking fails or native methods are not loaded
143 Constructs a new MD5MD5CRC32FileChecksum. @param bytesPerCRC number of bytes per CRC checksum @param crcPerBlock number of CRCs per block @param md5 initial MD5 hash value
144 Default constructor initializing checksum with zero CRCs and no MD5 hash.
145 Constructs a new file checksum using MD5 and CRC32. @param bytesPerCRC number of bytes per CRC checksum @param crcPerBlock number of CRCs per block @param md5 initial MD5 hash value
146 Compiles a glob pattern into a regex pattern. @param glob the glob pattern to compile
147 Returns an iterator for listing file statuses in a directory. @param f path to the directory @return iterator over FileStatus objects @throws IOException if an I/O error occurs
148 Generates a shell path for a given file. @param file the File object to process @param makeCanonicalPath whether to use the canonical path @return the shell path as a string @throws IOException if an I/O error occurs
149 Converts numeric mode to file permissions. @param mode numeric representation of permissions @return Set of PosixFilePermission objects
150 Executes the shell command with validation. Checks for null entries and runs the command. @throws IOException if a null entry is found or execution fails
151 Checks if the combined length of Windows command line arguments exceeds the maximum allowed. @param commands array of command line arguments @throws IOException if the total length exceeds the Windows limit
152 Constructs a PowerShell script to kill a specified process on a remote host. @param processName name of the process to terminate @param host target remote host @return path to the created PowerShell script or null if creation fails
153 Retrieves the size of the checksum. @return Size of the checksum in bytes
154 Calculates the total checksum size based on data size. @param dataSize size of the data in bytes @return total checksum size required for data integrity
155 Converts a Checksum object to a byte array. @param sum Checksum instance containing the value to convert @param checksumSize size of the resulting byte array @return byte array representation of the checksum value
156 Increments the total bytes read by a specified amount. @param newBytes the number of bytes to add to the bytesRead count
157 Increments the bytes written by the specified amount. @param newBytes the number of bytes to add to the total bytes written
158 Increments the read operations count. @param count number of read operations to add
159 Increments the count of large read operations. @param count number of large read operations to add
160 Increments write operations count. @param count number of write operations to add
161 Increments the count of erasure-coded bytes read. @param newBytes amount of bytes to add to bytesReadErasureCoded
162 Increments bytes read based on distance. @param distance network distance of the read operation @param newBytes number of bytes read in this operation
163 Increases the remote read time by a specified duration. @param durationMS the duration in milliseconds to add to the remote read time
164 Visits and aggregates statistics using a given aggregator. @param visitor StatisticsAggregator to process the data @return Aggregated result from the visitor
165 Constructs a ContentSummary instance using a Builder. @param builder the Builder containing storage metrics data
166 Initializes default checksum options. Uses DEFAULT type and -1 size indicating system-defined settings.
167 Creates a disabled checksum option. @return ChecksumOpt with NULL type and -1 size indicating no checksumming
168 Validates file creation flags for Hadoop operations. @param flag set of CreateFlag options @throws HadoopIllegalArgumentException if flags are invalid or conflicting
169 Validates URI scheme against a supported scheme. @param uri URI to validate @param supportedScheme expected scheme for the URI @throws HadoopIllegalArgumentException if URI scheme is missing or unsupported
170 Constructs an exception for invalid file system paths. @param path the invalid file path
171 Constructs an InvalidPathException for a specified invalid path and reason. @param path the invalid file system path @param reason additional context about why the path is invalid
172 Finds the first non-null element in an array. @param inputs array of elements to check @return first non-null element or throws exception if all are null
173 Finds the first non-null element in an array. @param inputs array of elements to search through @return first non-null element or throws exception if all are null
174 Validates byte array buffers for encoding. @param buffers input byte arrays to validate Throws exception if any buffer is null or invalid length
175 Validates output buffers for decoding. @param buffers array of ByteBuffers to validate
176 Validates output buffers for decoding. @param buffers array of byte arrays to validate
177 Validates input ByteBuffer array for encoding. @param buffers array of ByteBuffers to validate @throws HadoopIllegalArgumentException if any buffer is null, has invalid length, or directness mismatch
178 Stops a proxy by closing it if possible. @param proxy the proxy object to be closed @throws HadoopIllegalArgumentException if proxy is null or not Closeable
179 Processes and returns a configured ChecksumOpt instance. @param defaultOpt default checksum options @param userOpt user-defined checksum options @param userBytesPerChecksum user-specified bytes per checksum @return configured ChecksumOpt based on provided parameters
180 Retrieves default port from FileSystem implementation. @param theFsImpl FileSystem instance @return Default port number or fallback constant
181 Canonicalizes the given URI by setting the default port if not specified. @param uri original URI to be canonicalized @return canonicalized URI with default port if necessary
182 Sets the replication factor of a file. @param src source file path @param replication desired replication factor @return true if successful, false otherwise @throws IOException if an I/O error occurs
183 Disconnects from the FTP server. @param client FTPClient instance to disconnect @throws IOException if an I/O error occurs or client is not connected
184 Closes the output stream and releases resources. Invokes PositionCache.close() to ensure proper resource management.
185 Deprecated default constructor for ContentSummary.
186 Deprecated constructor for initializing ContentSummary with storage metrics. @param length total length of files in bytes @param fileCount number of files @param directoryCount number of directories @param quota space quota limit @param spaceConsumed current space consumed @param spaceQuota space quota limit
187 Calculates delay until token renewal. @return Delay in specified time unit
188 Updates the token's next renewal time. @param delay milliseconds until scheduled renewal
189 Updates the timestamp of the last activity to current time.
190 Sleeps for at least the specified duration, ignoring interruptions. @param millis minimum sleep duration in milliseconds
191 Retrieves the current time in milliseconds since epoch. @return Current time in milliseconds
192 Awaits termination of all thread pools within the specified time. @param milliseconds maximum time to wait for termination @return true if all thread pools terminate, false otherwise
193 Validates checksums for data chunks. @param sumsBytes buffer containing checksum values @param sumsOffset offset within sumsBytes where validation starts @param data input data buffer to validate @param dataOffset starting position in the file for data @param bytesPerSum number of bytes per checksum @param file path to the file being read @return original data if all checksums match, throws exception otherwise
194 Opens a file for reading. @param f file path to be opened @return FSDataInputStream for the specified file @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnresolvedLinkException if a symlink cannot be resolved @throws IOException for other I/O errors
195 Calculates checksum file length based on file size. @param file path to the file @param fileSize total file size in bytes @return calculated checksum file length in bytes
196 Retrieves the status of a file or directory. @param p path to the file or directory @return FsStatus object representing storage information
197 Registers file system permission commands with the command factory. @param factory CommandFactory instance to register commands with
198 Registers the Find command with the given factory. @param factory CommandFactory instance to register the command with
199 Registers Count command with specified alias. @param factory CommandFactory instance to use for registration
200 Deprecated constructor for CommandFormat. Initializes with command name and parameter constraints. @param name command name (unused) @param min minimum number of parameters required @param max maximum number of parameters allowed @param possibleOpt array of possible optional command-line arguments
201 Executes a callable that may raise an IOException and returns a CompletableFuture. @param callable the callable task to execute @return a CompletableFuture holding the result or exception
202 Rejects unknown mandatory keys in the configuration. @param knownKeys collection of known configuration keys @param extraErrorText additional error text to append @throws IllegalArgumentException if any mandatory key is unknown
203 Retrieves enabled capabilities as a list of names. @return List of capability names that are currently enabled
204 Constructs HTTP referrer header with query parameters. @return constructed URI as string or empty if failed
205 Constructs a new WeakReferenceMap. @param factory function to create values for keys @param referenceLost consumer to handle lost references (nullable)
206 Checks if an OutputStream supports a specific capability. @param out the OutputStream to check @param capability the capability to look for @return true if the OutputStream has the capability, false otherwise
207 Checks if an input stream supports a specific capability. @param in the InputStream to check @param capability the capability to look for @return true if the input stream has the capability, false otherwise
208 Shuts down the executor service gracefully. @param logger Logger for logging the shutdown process @param timeout Maximum time to wait for termination @param unit TimeUnit for the timeout
209 Acquires a resource from the pool. Blocks if no resources are available. @return acquired resource or null if not possible
210 Attempts to acquire a resource from the pool without blocking. @return acquired resource or null if not available
211 Calculates the number of available resources. @return count of resources that can be acquired immediately
212 Initializes a SingleFilePerBlockCache instance. @param prefetchingStatistics statistics for prefetching operations @param maxBlocksCount maximum number of blocks to cache, must be greater than 0 @param trackerFactory factory for creating duration trackers, optional
213 Constructs a SemaphoredDelegatingExecutor with specified parameters. @param executorDelegatee the underlying ExecutorService for task execution @param permitCount maximum number of concurrent tasks allowed @param fair true if semaphore should be fair, false otherwise @param trackerFactory factory for creating DurationTracker instances
214 Adds a block entry to the head of the linked list with thread-safe locking. @param entry the block entry to be added
215 Marks buffer as done and validates checksum. Throws exception if checksum changes post-setReady().
216 Sets the buffer size for the data input stream. @param bufSize the desired buffer size in bytes @return this builder instance for method chaining
217 Returns the current builder instance. @return This builder object
218 Retrieves value associated with the current thread. @return Value object or null if not found
219 Removes and returns the value associated with the current thread. @return The removed value or null if no value was found
220 Sets a value for the current thread. @param newVal new value to set @return existing value or null if none was set before
221 Merges another file range into the current one. @param otherOffset starting offset of the other range @param otherEnd ending offset of the other range @param other FileRange object to merge @param minSeek minimum seek distance required for merging @param maxSize maximum size allowed after merging @return true if merged successfully, false otherwise
222 Creates a bulk delete operation for a given path. @param path the root directory path for deletion @return BulkDelete object representing the operation
223 Registers the "And" expression with aliases "-a" and "-and". @param factory ExpressionFactory instance to register with @throws IOException if registration fails
224 Registers Print and Print0 expression classes with the given factory. @param factory ExpressionFactory instance to register classes with @throws IOException if an I/O error occurs during registration
225 Registers expression classes for file name matching. @param factory ExpressionFactory instance to register with @throws IOException if registration fails
226 Constructs a Name object with specified case sensitivity. @param caseSensitive true for case-sensitive matching, false otherwise
227 Retrieves a CompressionCodec based on the file extension. @param file Path to the file for which to find the codec @return CompressionCodec instance or null if not found
228 Resolves property name by formatting a template with the lowercase SSL mode. @param mode SSLFactory mode to be converted to lowercase @param template string template containing placeholders for the mode @return formatted property name as a string
229 Generates a configuration suffix from the cipher suite name. Converts each part of the name to lowercase and appends with a dot. @return formatted configuration suffix string
230 Combines results from two operations. @param other another Result object to combine with @return a new Result indicating combined success and descent status
231 Negates the success status of the operation. @return new Result object with inverted success status but same directory descent flag
232 Creates and configures FindOptions for file search operations. @return FindOptions object with configured streams and settings
233 Checks if an expression with the given name exists using the ExpressionFactory. @param expressionName name of the expression to check @return true if the expression exists, false otherwise
234 Adds a specified number of child expressions to the current expression. @param exprs Deque containing Expression objects @param count Number of children to add
235 Adds a specified number of arguments from the deque to the expression. @param args deque containing arguments @param count number of arguments to add
236 Converts a string to a URI. Handles Windows paths and parses scheme and authority components. @param pathString the input file path string @return URI object representing the path @throws IOException if invalid path format detected
237 Initializes the comparator for file ordering. Sets up order based on time, size, or default comparison.
238 Checks if the command is deprecated. @return true if there is a replacement command, false otherwise
239 Retrieves the command's name. Uses cached name if available, otherwise fetches from field. Removes leading '-' if present. @return command name without leading '-'
240 Sets the preservation of file attributes. @param preserve true to preserve timestamps, ownership, and permissions; false to clear preservation status
241 Initializes a new MetricsRecordBuilderImpl. @param parent the parent MetricsCollector @param info metrics information @param rf record filter @param mf metric filter @param acceptable flag indicating if the record is acceptable
242 Constructs a new ChunkedArrayList with specified chunk capacities. @param initialChunkCapacity the initial capacity of each chunk @param maxChunkSize the maximum size a chunk can grow to
243 Finds the index of the first default ACL entry. @param aclBuilder list of ACL entries to search @return index of the first default entry or PIVOT_NOT_FOUND if none exists
244 Creates a snapshot of the specified file system path. @param path the path to be snapshotted @return Path object representing the created snapshot @throws IOException if an I/O error occurs
245 Adds an option with a value to the command format. @param option the name of the option to add @throws DuplicatedOptionException if the option already exists
246 Initializes a TableBuilder with specified headers. @param headers variable-length array of header objects
247 Checks if the table is empty. @return true if no data rows are present, false otherwise
248 Initializes a new shell instance with specified execution interval. @param interval time between command executions in milliseconds
249 Constructs a Token object with specified details. @param identifier unique token identifier @param password token password @param kind type of the token @param service associated service
250 Constructs an empty Token object with default values.
251 Initializes a new Globber instance. @param fc FileContext for file system operations @param pathPattern pattern to match file paths @param filter optional PathFilter for filtering results @param resolveSymlinks flag to resolve symbolic links
252 Constructs a detailed error message for the exception. @return formatted error message including operation, paths, and cause
253 Handles SASL connection failure by attempting re-login and retrying. @param currRetries current attempt count @param maxRetries maximum allowed retries @param ex exception causing the failure @param rand random number generator for backoff @param ugi user group information for authentication @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
254 Determines if the given FileSystem is a view file system. @param fileSystem the FileSystem to check @return true if it's a view file system, false otherwise
255 Sets quota for a file system path. @param src the path to set the quota on @param namespaceQuota maximum number of files and directories @param storagespaceQuota maximum storage space in bytes Throws UnsupportedOperationException as this method is not supported.
256 Sets storage quota by type for a given path. @param src source path @param type storage type @param quota quota value to set @throws IOException if operation fails
257 Creates a multipart uploader builder. @param basePath base path for uploads @return MultipartUploaderBuilder instance or null if unsupported
258 Lists file statuses with locations for a given path using default filter. @param f the directory to list files from @return iterator of LocatedFileStatus objects @throws FileNotFoundException if the path does not exist @throws IOException on input/output errors
259 Lists file statuses with locations using a default filter. @param f the directory to list files from @return iterator of LocatedFileStatus objects @throws IOException on input/output errors
260 Retrieves checksum of a file. @param f Path to the file @return FileChecksum object or null if not found @throws IOException if an I/O error occurs
261 Sets an extended attribute for a file with default flags. @param path the path to the file @param name the name of the extended attribute @param value the value of the extended attribute @throws IOException if an I/O error occurs
262 Opens a file with specified options. @param path file path to open @param parameters configuration parameters for opening the file @return CompletableFuture containing FSDataInputStream or exception @throws IOException if an I/O error occurs
263 Opens a file with specified options and verifies mandatory keys. @param path the path to the file @param parameters file opening parameters @return CompletableFuture containing FSDataInputStream or exception
264 Opens a file with specified options. @param path the file path to open @param parameters configuration parameters for opening the file @return CompletableFuture containing FSDataInputStream or exception @throws IOException if an I/O error occurs
265 Opens a file with specified parameters. @param pathHandle identifier for the file to open @param parameters options for opening the file @return CompletableFuture containing FSDataInputStream or exception @throws IOException if an I/O error occurs
266 Retrieves all storage policies from the default file system. @return Collection of BlockStoragePolicySpi objects @throws IOException if an I/O error occurs
267 Initializes mounted file systems from given mount points. @param mountPoints list of mount points with target file systems @return map of source paths to initialized FileSystem objects @throws RuntimeException if initialization fails for any mount point
268 Builds a ResolveResult for regex-based mount points. @param resultKind type of resolution result @param resolvedPathStr resolved path as string @param targetOfResolvedPathStr target filesystem URI as string @param remainingPath any unresolved path segment @return ResolveResult object or null if initialization fails
269 Returns a new instance of ChildFsGetter initialized with the managed URI scheme. @return ChildFsGetter object configured with the current scheme
270 Constructs an INodeLink with specified path, user group info, and file system details. @param pathToNode full path of the node in the filesystem @param aUgi user group information associated with the node @param targetMergeFs target file system for merging operations @param aTargetDirLinkList list of directory links in the target file system
271 Constructs an INodeLink with specified path, user group info, and directory link. @param pathToNode full path of the node in the filesystem @param aUgi user group information associated with the node @param createFileSystemMethod method to initialize file systems @param aTargetDirLink target directory link as a URI string @throws URISyntaxException if there's an issue with the URI
272 Replaces regex capture groups in a destination path. @param parsedDestPath the destination path with placeholders @param srcMatcher the Matcher object containing source path groups @param regexGroupNameOrIndexStr group name or index to replace @param groupRepresentationStrSetInDest set of placeholder strings in dest path @return updated destination path with replaced capture groups
273 Decrypts data from input buffer using provided decryptor. @param decryptor object to perform decryption @param inBuffer input buffer containing encrypted data @param outBuffer output buffer for decrypted data @param padding number of bytes to skip at the beginning @throws IOException if an I/O error occurs during decryption
274 Validates that the OpenSSL context is initialized. @throws IllegalStateException if context is not initialized
275 Checks if the parent ZNode exists in ZooKeeper. @return true if the ZNode exists, false otherwise @throws IOException if an I/O error occurs @throws InterruptedException if the current thread is interrupted
276 Retrieves the default configuration prefix for view file system. @return default configuration prefix string
277 Deserializes a string into a RegexMountPointResolvedDstPathReplaceInterceptor. @param serializedString the serialized configuration string @return an instance of RegexMountPointResolvedDstPathReplaceInterceptor or null if invalid format
278 Returns the readable byte channel for socket input. @throws IllegalStateException if the socket has no channel
279 Calculates total checksum file length. @param file file path @param fileSize original file size in bytes @return total checksum length including header
280 Retrieves the filesystem identifier. @return filesystem identifier as a String @throws IOException if command execution fails or parsing error occurs
281 Retrieves the mount point of the specified directory. @throws IOException if directory does not exist or command execution fails
282 Calculates percentage of disk space used. @return Percentage of used space as an integer
283 Initializes FSInputChecker with file path and settings. @param file Hadoop filesystem path to the input file @param numOfRetries maximum number of retry attempts for read operations @param verifyChecksum flag to enable/disable checksum verification @param sum Checksum object for data integrity checks @param chunkSize maximum size of data chunks to read @param checksumSize size of checksum in bytes
284 Checks if the input stream supports ByteBuffer reading. @param stream the InputStream to check @return true if the stream is ByteBufferReadable, false otherwise
285 Initializes audit context with current thread ID. Stores thread ID under PARAM_THREAD1 key.
286 Records the entry point tool's class name in the global context. @param tool the object representing the entry point tool
287 Retrieves optional integer configuration value. @param key configuration key @param value default integer value if key is absent @return B object with the configuration value
288 Retrieves optional float configuration value. @param key configuration key @param value default float value if key is absent @return B object with the configuration value
289 Retrieves optional long configuration value. @param key configuration key @param value default long value if key is absent @return B object with the configuration value
290 Retrieves optional double configuration value. @param key configuration key @param value default double value if key is absent @return B object with the configuration value
291 Validates and sets an integer configuration value. @param key configuration key @param value default integer value @return builder instance with validated integer value
292 Ensures a configuration key has a float value by converting it to long. @param key configuration key @param value default float value @return builder instance with validated float value as long
293 Ensures a configuration key has a required long value. @param key configuration key @param value default long value @return builder instance with validated long value
294 Ensures a configuration key has a double value by converting it to long. @param key configuration key @param value default double value @return builder instance with validated long value
295 Retrieves and formats a row from the column. @param idx index of the row to retrieve @return array of formatted lines in the row
296 Initiates local output process for a file in Hadoop filesystem. @param fsOutputFile destination file path in Hadoop filesystem @param tmpLocalFile temporary local file path @return the provided temporary local file path @throws IOException if an I/O error occurs
297 Calculates effective permission for an ACL entry. @param entry the ACL entry to evaluate @param permArg optional file system permissions argument @return FsAction representing effective permissions @throws IllegalArgumentException if permissions are not available
298 Initializes a new PermissionStatus object. @param user username associated with the permission status @param group group name associated with the permission status @param permission FsPermission object representing file permissions
299 Parses an ACL entry from a string. @param aclStr the ACL specification string @param includePermission whether to include permission in parsing @return AclEntry object or throws IllegalArgumentException for invalid input
300 Generates a stable string representation of the ACL entry. @return A formatted string with scope, type, name, and permission
301 Splits a string into an array of substrings using a delimiter. @param str the input string to split @param delim the delimiter to use for splitting @return an array of substrings or null if no substrings are found
302 Splits a string into a collection of substrings using a comma delimiter. @param str the input string to split @return a list of substrings or an empty list if input is null
303 Initializes PermissionParser with mode string and patterns. @param modeStr permission string in symbolic or octal format @param symbolic regex pattern for symbolic permissions @param octal regex pattern for octal permissions @throws IllegalArgumentException if modeStr doesn't match any pattern
304 Closes the disk block and handles cleanup based on its current state. @throws IOException if an I/O error occurs during closing
305 Ensures the ByteBufferInputStream is open. Throws IllegalStateException if the stream is closed.
306 Transitions the data block to a new state. @param current current state of the data block @param next next state to transition to @throws IllegalStateException if the current state does not match the expected state
307 Writes data to the buffer. @param buffer source byte array @param offset starting position in the buffer @param length number of bytes to write @return number of bytes written (always 0) @throws IOException if an I/O error occurs
308 Ensures data block is in writing state before proceeding. @throws IOException if an I/O error occurs during verification
309 Sets an attribute in the referrer header. @param key attribute name, must not be null @param value attribute value
310 Extracts query parameters from a given HTTP header. @param header the HTTP referrer header string @return a map of query parameter names to their values @throws URISyntaxException if the header is not a valid URI
311 Returns the size of data in the buffer. Uses cached value if available; otherwise, calculates used capacity. @return Size of data in bytes
312 Resolves a given file path within the Hadoop file system. @param f the input path to resolve @return resolved path @throws FileNotFoundException if the path does not exist @throws UnresolvedLinkException if symbolic link cannot be resolved @throws AccessControlException if access is denied @throws IOException for other I/O errors
313 Synchronizes file system metadata with storage. Throws UnsupportedOperationException if not supported by underlying FS.
314 Prints statistics for all registered file systems.
315 Retrieves or creates statistics for a given URI. @param uri input URI to extract scheme and base URI from @return Statistics object associated with the base URI @throws IllegalArgumentException if scheme is not defined in the URI
316 Creates a multipart uploader builder for the specified base path. This operation is not supported and will throw an exception. @param basePath the base directory path for the upload @return MultipartUploaderBuilder instance or throws IOException
317 Retrieves or creates an AllocatorPerContext for a given configuration item. @param contextCfgItemName configuration item name for the context @return AllocatorPerContext instance for the specified configuration item
318 Returns the current position in the output stream. @return The current file position as a long value.
319 Flushes content to the file system. @throws IOException if an I/O error occurs during flushing
320 Converts a string into a collection of unique, trimmed substrings. @param str input string to process @return Collection of non-empty, trimmed substrings
321 Constructs a LoggingStateChangeListener using the default logger.
322 Constructs a ServiceStateException with a message. @param message descriptive error message
323 Constructs a ServiceStateException with an exit code. @param exitCode specific error code for the exception @param message descriptive error message @param cause underlying throwable that caused this exception
324 Converts a throwable to a runtime exception. @param text descriptive error message @param fault underlying throwable @return RuntimeException instance
325 Converts a Throwable to a RuntimeException. @param fault the underlying Throwable to convert @return RuntimeException instance, either the original or wrapped in ServiceStateException
326 Constructs a new ServiceStateModel with a specified name. Initializes state to NOTINITED by default. @param name the name of the service
327 Checks if a state transition is valid. @param current Current service state @param proposed Proposed new service state @return true if transition is allowed, false otherwise
328 Returns string representation of service state. @return Formatted state description including name and status
329 Default constructor initializes with no delegate handler.
330 Handles incoming signals by incrementing the count, logging, and notifying the handler. @param s the signal to be processed
331 Looks up an IrqHandler by signal name. @param signalName the name of the interrupt signal @return the corresponding IrqHandler or null if not found
332 Constructs a ServiceLaunchException with an exit code and cause. @param exitCode the status code indicating the service launch failure @param cause the underlying throwable that caused the exception
333 Constructs a ServiceLaunchException with an exit code and message. @param exitCode error code indicating the nature of the service launch failure @param message description of the exception
334 Constructs a ServiceLaunchException with an exit code and formatted message. @param exitCode the exit status indicating the nature of the error @param format the error message format string @param args arguments for the format string
335 Constructs a ServiceLaunchException with formatted message. @param exitCode numeric exit code indicating the error @param cause underlying Throwable that caused this exception @param format message format string @param args arguments for the format string
336 Executes graceful shutdown of the managed Hadoop service.
337 Constructs a ServiceLauncher with the specified class name. @param serviceClassName fully qualified class name of the service
338 Logs and records an exception with its exit code. @param exitException the exception to be noted
339 Binds command-line options to service configuration. @param commandOptions Options object containing configuration settings
340 Loads configuration classes and initializes them. @return Number of successfully loaded configuration classes
341 Registers a global listener for service state changes. @param l ServiceStateChangeListener to be registered globally
342 Unregisters a service state change listener globally. @param l the listener to be unregistered @return true if the listener was successfully removed, false otherwise
343 Resets all global service state change listeners.
344 Notifies all registered local and global listeners about a service state change. Handles exceptions during notification with a warning log.
345 Initializes the service with a configuration. @param conf Configuration object to be applied
346 Adds an object as a service if it's an instance of Service. @param object the object to attempt adding @return true if added, false otherwise
347 Stops a service quietly, logging any exceptions. @param log logger for warning messages @param service the Service instance to be stopped @return caught Exception or null if successful
348 Stops a service quietly, logging any exceptions. @param log logger for warning messages @param service the Service instance to stop @return caught Exception or null if successful
349 Checks if an InputStream supports full read availability. @param in the InputStream to check @return true if the stream supports full read availability, false otherwise
350 Checks if DynamicWrappedIO instance is fully loaded and available. @return true if all necessary methods are available, false otherwise
351 Converts Java object to JSON string. @param instance Java object to serialize @return JSON string representation or error message if conversion fails
352 Converts an IO-raising function to an unchecked one. @param fun the function that may throw IOExceptions @return a Function that applies the input and wraps IOExceptions as UncheckedIOException
353 Converts a Java object to JSON and back to the same type. @param instance Java object to be serialized and deserialized @return Original Java object after round-trip conversion @throws IOException if serialization or deserialization fails
354 Deserializes JSON byte array to Java object. @param bytes JSON data in byte array format @return Java object of type T or throws exception if parsing fails
355 Constructs a new UTF8 object by copying data from another. @param utf8 source UTF8 object to copy data from
356 Writes a UTF-8 encoded string to a DataOutput. @param out the DataOutput stream to write to @param s the string to encode and write @return number of bytes written @throws IOException if an I/O error occurs or string is too long
357 Skips a specified number of bytes from the input stream. @param in DataInput stream to read from @throws IOException if skipping fails or reaches end of input
358 Moves file pointer to specified position. @param n target position in bytes
359 Retrieves Writable object by long key. @param n key to retrieve data for @param value Writable instance to populate with retrieved data @return populated Writable object or null if not found
360 Constructs an OutputBuffer with a default Buffer.
361 Retrieves data from the buffer. @return byte array containing buffered data
362 Returns the current length of data in the buffer. @return number of bytes currently stored
363 Resets the output buffer to its initial state. @return the current instance of OutputBuffer
364 Compares two WritableComparable objects. @param a first object to compare @param b second object to compare @return negative if a < b, zero if equal, positive if a > b
365 Compares two byte arrays. @param b1 first byte array @param s1 starting index of b1 @param l1 length to compare in b1 @param b2 second byte array @param s2 starting index of b2 @param l2 length to compare in b2 @return negative if b1 < b2, zero if equal, positive if b1 > b2
366 Computes a hash code for a byte array segment. @param bytes the byte array to hash @param length number of bytes in the segment @return computed hash code
367 Reads a float from a byte array. @param bytes source byte array @param start starting index of the float in the array @return the float value read
368 Reads a long integer from a byte array. @param bytes source byte array @param start starting index of the long in the array @return the long value read
369 Reads a variable-length integer from a byte array. @param bytes source byte array @param start starting index in the byte array @return decoded integer value @throws IOException if there are not enough bytes for decoding
370 Constructs a BytesWritable with specified byte array. @param bytes source byte array
371 Retrieves the encapsulated byte array. @return byte array containing the data
372 Returns the size of the byte array. @deprecated Use {@link #getLength()} instead. @return Size of the encapsulated byte array
373 Sets the new capacity for the byte array. @param capacity desired new capacity
374 Returns the number of buffers in the pool. @param direct true for direct ByteBuffers, false for regular @return size of the buffer tree for specified type
375 Submits a readahead request for a file stream. @param identifier unique request identifier @param fd FileDescriptor of the file to read @param curPos current position in bytes @param readaheadLength length in bytes to read ahead @param maxOffsetToRead maximum offset to read @param lastReadahead previous readahead request @return ReadaheadRequest object or null if no new request is needed
376 Appends a key-value pair to the SequenceFile. Uses NullWritable as the default value. @param key WritableComparable key to be appended @throws IOException if an I/O error occurs
377 Moves to the next entry in the SequenceFile. @param key object to store the read key @return true if successful, false if no more entries
378 Returns the current key value from the file. @return the long value of the current key @throws IOException if an I/O error occurs
379 Checks if the specified file or directory has the desired access rights. @param path the path to the file or directory @param desiredAccess the required access right (e.g., READ, WRITE) @return true if the path has the desired access rights, false otherwise
380 Checks if POSIX functionality is available. @return true if native code and support are loaded, false otherwise
381 Checks if native I/O capabilities are available. @return true if both native code is loaded and nativeLoaded flag is set, false otherwise
382 Checks if native CRC32 implementation is available. @return true if native code is loaded and not on SPARC architecture, false otherwise
383 Unmaps a given MappedByteBuffer if unmapping is supported. @param buffer the MappedByteBuffer to unmap
384 Frees a ByteBuffer using BufferCleaner if unmapping is supported. @param buffer ByteBuffer to be freed
385 Writes data from input stream to buffer. @param in DataInput source @param len number of bytes to read @throws IOException if an I/O error occurs
386 Constructs an EnumSetWritable with specified EnumSet and element type. @param value EnumSet to be wrapped @param elementType Class of enum elements
387 Constructs a new DataInputBuffer with a default buffer.
388 Resets the buffer with new data. @param input new byte array to use as buffer @param length number of bytes considered valid from start
389 Resets the internal buffer with new data. @param input new byte array to use as buffer @param start starting index of valid data in the array @param length number of bytes considered valid from start
390 Retrieves the current position in the buffer. @return integer representing the current position index
391 Returns the current length of the buffer. @return number of bytes currently stored in the buffer
392 Initializes ECSchema with provided options. @param allOptions map containing configuration options @throws IllegalArgumentException if required options are missing or invalid
393 Constructs an ECSchema with default extra options. @param codecName the name of the erasure coding codec @param numDataUnits number of data units @param numParityUnits number of parity units
394 Returns the required number of data blocks. @return count of data units from the erasure coding schema
395 Retrieves the required number of parity blocks. @return Number of parity units configured in the schema
396 Retrieves a specific erasure coder factory by codec and coder names. @param codecName the name of the codec @param coderName the name of the coder within the codec @return RawErasureCoderFactory or null if not found
397 Creates an ECBlockGroup with specified data and parity blocks. @param dataBlocks array of data blocks @param parityBlocks array of parity blocks @return ECBlockGroup object representing the group of blocks
398 Counts the number of erased blocks in both data and parity groups. @return Total count of erased blocks
399 Counts the number of erased blocks in the given array. @param inputBlocks array of ECBlock objects representing data blocks @return count of erased blocks
400 Converts an array of ECChunk objects to their corresponding ByteBuffer arrays. @param chunks array of ECChunk objects representing data chunks @return array of ByteBuffers containing the data from each chunk or null if chunk is null
401 Retrieves erased blocks from the given block group for decoding. @param blockGroup the block group containing data and parity blocks @return array of erased ECBlock objects
402 Constructs an array of input blocks from a block group. @param blockGroup the ECBlockGroup containing data and parity blocks @return combined array of data and parity blocks
403 Adds two elements in the finite field. @param x first element in the field @param y second element in the field @return result of addition in the field
404 Multiplies two elements in the finite field. @param x first element, must be within the field size @param y second element, must be within the field size @return product of x and y in the finite field
405 Divides two elements in the finite field. @param x numerator, must be within field bounds @param y denominator, must be positive and within field bounds @return result of division using precomputed table
406 Computes the power of an element in the finite field. @param x base element in the field @param n exponent value @return result of x raised to the power of n
407 Dumps the content of an ECChunk to the console. @param chunk the ECChunk to dump
408 Checks if input changes are allowed based on coding options. @return true if input changes are permitted, false otherwise
409 Determines if input changes are allowed during encoding. @return true if input modifications are permitted, false otherwise
410 Checks if verbose dump is allowed based on coder options. @return true if verbose dump is enabled, false otherwise
411 Checks if verbose dump is allowed. @return true if verbose dump is enabled, false otherwise
412 Resets a ByteBuffer by filling it with empty bytes and restoring its position. @param buffer the ByteBuffer to reset @param len the length of the empty chunk to fill @return the reset ByteBuffer
413 Resets a portion of the buffer to empty. @param buffer the target byte array to reset @param offset starting index for resetting @param len number of bytes to reset @return the modified buffer with specified section reset
414 Converts ByteBuffer arrays to ByteArrayEncodingState. Initializes and returns a new ByteArrayEncodingState with data from inputs and outputs.
415 Converts current state to ByteBufferEncodingState. Clones input buffers and allocates direct output buffers. @return ByteBufferEncodingState instance with cloned data
416 Converts current state to a ByteBuffer-based decoding state. Allocates direct ByteBuffers for inputs and outputs. @return ByteBufferDecodingState with cloned inputs and allocated outputs
417 Converts ByteBuffer buffers to ByteArray buffers for decoding. @return ByteArrayDecodingState object with converted buffers
418 Generates a Cauchy matrix for Reed-Solomon encoding. @param a array to store the generated matrix @param m total number of rows in the matrix @param k number of columns and identity part size
419 Computes the inverse of a matrix in GF(2^8). @param inMatrix input matrix to invert @param outMatrix output matrix containing the inverse @param n size of the square matrix @throws RuntimeException if the matrix is not invertible
420 Encodes data using Reed-Solomon algorithm. @param gfTables Galois field tables for encoding @param dataLen length of data to encode @param inputs array of input data arrays @param inputOffsets offsets for each input data array @param outputs array of output encoded data arrays @param outputOffsets offsets for each output data array
421 Encodes data using Reed-Solomon algorithm. @param gfTables precomputed Galois field tables @param inputs array of ByteBuffer containing input data @param outputs array of ByteBuffer to store encoded data
422 Returns a singleton instance of GaloisField for given size and polynomial. @param fieldSize the size of the finite field @param primitivePolynomial the irreducible polynomial for the field @return GaloisField object with specified parameters
423 Solves a Vandermonde system using finite field arithmetic. @param x array of x-coordinates @param y array of y-values to be solved
424 Constructs an ECBlock with default status. Initializes block as neither parity nor erased by default.
425 Updates the reported byte count from the compressed stream. @param count number of bytes to add to the total reported byte count
426 Reads a single byte from the input stream. @param inStream source of compressed data @return the byte value or -1 if end of stream is reached
427 Creates Huffman decoding tables for BZip2 decompression. @param alphaSize alphabet size @param nGroups number of groups
428 Performs a quicksort on the data for Bzip2 compression. Uses stacks to manage subranges and sorts using simple sort or median-of-three method. @param dataShadow Data object containing block and related info @param loSt starting index @param hiSt ending index @param dSt offset for comparison
429 Returns the number of bytes written during decompression. @return Total bytes written
430 Returns the number of bytes read from the stream. @return Number of bytes read or throws NullPointerException if stream is invalid
431 Returns remaining decompressable bytes. Checks input stream validity and calculates total remaining bytes. @return Sum of user buffer length and stream's remaining bytes
432 Resets the decompressor for a new data stream. Validates and ends current stream, initializes with new settings.
433 Constructs a Bzip2Compressor with default parameters.
434 Returns the number of bytes written to the output stream. Checks if the stream is initialized before querying. @return Number of bytes written or throws exception if stream is not set
435 Retrieves bytes read by the stream. Ensures stream is initialized, then returns byte count.
436 Initializes a new CompressorStream. @param out underlying output stream to write compressed data
437 Constructs a new Snappy decompressor with default buffer size.
438 Sets input data for decompression. @param b byte array containing compressed data @param off offset in the byte array to start reading from @param len length of the data to read Initializes internal buffers and state.
439 Determines if more input is needed for decompression. @return true if no more input is available and output buffer is consumed, false otherwise
440 Decompresses data into a byte array. @param b destination buffer @param off offset in the destination buffer @param len maximum number of bytes to decompress @return number of bytes decompressed @throws IOException if an I/O error occurs during decompression
441 Constructs a new SnappyCompressor using default buffer size.
442 Compresses input data using Snappy algorithm. @param b byte array to store compressed data @param off offset in the byte array @param len maximum number of bytes to compress @return number of bytes written to the output buffer @throws IOException if an I/O error occurs
443 Reinitializes the compressor with new configuration. @param conf configuration settings for compression
444 Initializes a DecompressorStream with the given input stream. @param in the underlying input stream, must support seeking and positioned reading @throws IOException if an I/O error occurs or the input stream does not meet requirements
445 Returns the number of bytes left to decompress. @return Sum of bytes in user buffer and remaining direct buffer
446 Resets the decompression process. Initializes buffers and state variables. @throws NullPointerException if stream is not set
447 Returns the number of bytes written. Validates stream initialization before returning the count. @return Number of bytes written or throws NullPointerException if stream is not set
448 Returns the number of bytes read during compression. Validates stream initialization before returning the count. @return Number of bytes read or throws NullPointerException if stream is not initialized.
449 Constructs an Lz4Decompressor with default buffer size.
450 Sets input buffer for decompression. @param b source byte array @param off offset in the source array @param len length of data to use Initializes buffers and prepares for decompression.
451 Checks if more input is needed for decompression. @return true if input is required, false otherwise
452 Decompresses data into a byte array. @param b destination buffer @param off offset in the buffer @param len length of bytes to decompress @return number of bytes decompressed @throws IOException if an I/O error occurs
453 Constructs an Lz4Compressor with specified buffer size. @param directBufferSize size of the direct buffers for input/output data
454 Compresses data into the provided byte array. @param b destination buffer for compressed data @param off offset in the destination buffer @param len maximum number of bytes to compress @return number of bytes actually compressed @throws IOException if an I/O error occurs
455 Reinitializes the compressor with new configuration. @param conf new configuration settings
456 Retrieves a compression codec by its name or class name. @param codecName name of the codec to fetch @return CompressionCodec instance or null if not found
457 Returns the number of leased compressors for a given codec. @param codec CompressionCodec instance to check @return Count of leased compressors or 0 if codec is null
458 Retrieves the count of leased decompressors for a given codec. @param codec CompressionCodec instance to check @return Number of leased decompressors or 0 if codec is null
459 Determines the compressor type for Zlib. @param conf Hadoop configuration object @return Class of ZlibCompressor if native library is loaded, else BuiltInZlibDeflater
460 Determines the appropriate decompressor class for Zlib. @param conf Hadoop configuration object (not used) @return ZlibDecompressor if native library is loaded, otherwise BuiltInZlibInflater
461 Loads and initializes the native Zlib library. Checks if native code is loaded and verifies zlib availability for both compression and decompression. Logs success or failure of the operation.
462 Reinitializes the compressor with new configuration settings. @param conf Hadoop configuration object
463 Initializes a ZlibCompressor with specified parameters. @param level CompressionLevel object defining compression level @param strategy CompressionStrategy object defining compression strategy @param header CompressionHeader object for window bits configuration @param directBufferSize size of direct buffers for data handling
464 Returns the number of bytes written to the compression stream. Ensures the stream is initialized before querying. @return Number of bytes written or throws NullPointerException if not initialized
465 Returns the number of bytes read from the input stream. Ensures the compression stream is initialized. @return Number of bytes read or throws NullPointerException if not initialized.
466 Initializes a Zlib decompressor with given header and buffer size. @param header compression header containing configuration details @param directBufferSize size of the direct buffers for data handling
467 Returns the number of bytes written to the output stream. Validates the input stream before retrieval. @return Number of bytes written or throws exception if invalid
468 Returns the number of bytes read from the input stream. @return Total bytes read or throws NullPointerException if stream is invalid
469 Returns the number of bytes remaining to be decompressed. Validates the input stream and sums buffer lengths. @return Total bytes remaining or throws exception if stream is invalid.
470 Resets the decompressor state. Validates and resets the input stream, clears buffers, and resets flags.
471 Processes the GZIP trailer to verify CRC-32 and size. Handles state transitions for CRC, size checks, and completion.
472 Writes a variable-length integer to the output stream. @param stream DataOutput stream to write to @param i integer value to be written @throws IOException if an I/O error occurs
473 Reads a variable-length long from the input stream. @param stream DataInput source to read from @return deserialized long value @throws IOException if an I/O error occurs
474 Retrieves a ByteBuffer of specified length from the pool. @param direct true for direct buffers, false for heap buffers @param length requested buffer size @return ByteBuffer instance or newly allocated if none available
475 Puts a ByteBuffer into the pool. @param buffer the ByteBuffer to store
476 Returns the Unicode code point at the specified position. @param position index of the character to retrieve @return Unicode code point or -1 if invalid position
477 Sets the byte array to represent the given UTF-8 encoded string. @param string input text to be encoded and stored
478 Sets the text content from a byte array. @param utf8 source byte array containing UTF-8 encoded data @param start starting index in the byte array @param len length of the data to set
479 Appends UTF-8 encoded data to the byte array. @param utf8 source byte array containing UTF-8 data @param start starting index in the source array @param len number of bytes to append
480 Reads a specified number of bytes from input into the byte array. @param in DataInput stream to read from @param len number of bytes to read @throws IOException if an I/O error occurs
481 Decodes a byte array containing UTF-8 text. @param utf8 byte array with UTF-8 encoded data @return decoded String or throws CharacterCodingException if decoding fails
482 Decodes a portion of a byte array containing UTF-8 text. @param utf8 byte array with UTF-8 encoded data @param start starting index in the byte array @param length number of bytes to decode @param replace true to replace malformed/unmappable characters, false to report errors @return decoded String or throws CharacterCodingException if decoding fails
483 Validates UTF-8 encoded byte array. @param utf8 byte array containing UTF-8 data @throws MalformedInputException if invalid UTF-8 sequence is found
484 Registers a class with a unique byte identifier. @param clazz the class to register
485 Initializes configuration and registers default writable classes. @param none @return none
486 Creates a FileSystemOption for SequenceFile writing. @param fs Hadoop FileSystem instance @return FileSystemOption configured with the given FileSystem
487 Constructs a new Key instance with specified byte array and weight. @param value byte array representing the key @param weight associated weight of the key
488 Cleans up resources and deletes input file if not preserving. Calls superclass close method and checks input preservation.
489 Converts a list to an array of its element type. @param list List of elements to be converted @return Array containing all elements from the list
490 Constructs an InputBuffer with a new default Buffer.
491 Resets buffer with new data. @param input byte array to use as buffer @param length number of bytes from start that are valid
492 Resets the buffer with new data. @param input byte array to use as buffer @param start starting index of valid data in the array @param length number of bytes from start that are valid
493 Retrieves the current position in the input buffer. @return Current position as an integer
494 Returns the current length of the input buffer. @return Number of bytes currently stored in the buffer
495 Reads an MD5 hash from a DataInput source. @param in DataInput stream to read from @return MD5Hash object initialized with data from the input stream @throws IOException if an I/O error occurs during reading
496 Computes the MD5 hash of an input stream. @param in InputStream to compute the hash from @return MD5Hash object representing the computed hash @throws IOException if an I/O error occurs during reading
497 Computes the MD5 hash of a byte array segment. @param data source byte array @param start starting index in the array @param len length of the segment to hash @return MD5Hash object containing the computed hash
498 Computes an MD5 hash from a byte array segment. @param dataArr array of byte arrays to hash @param start starting index for hashing @param len length of the segment to hash @return MD5Hash object representing the computed hash
499 Returns hash code based on the first four bytes of MD5 digest. @return Integer representation of the hash code
500 Sets the MD5 hash digest from a hexadecimal string. @param hex 32-character hexadecimal string representing the MD5 hash @throws IllegalArgumentException if the input string is not of length 32
501 Attempts to instantiate a Protobuf message from input data. @param protoClass the Protobuf class to instantiate @param dataIn DataInput source containing serialized data @return Message object or throws IOException if instantiation fails
502 Synchronizes a file or directory to disk. @param fileToSync the file or directory to sync @throws IOException if an I/O error occurs
503 Constructs a BooleanWritable with the specified boolean value. @param value the initial boolean value to be wrapped
504 Creates a retry policy based on remote exceptions. @param defaultPolicy the default retry policy for unspecified exceptions @param exceptionToPolicyMap mapping of exception classes to specific policies @return RetryPolicy configured with RemoteExceptionDependentRetry
505 Checks if the queue is empty based on a specified time threshold. @param time threshold in milliseconds to consider the queue empty @return true if the queue has been empty for longer than 'time', false otherwise
506 Retrieves the current monotonic time in milliseconds. @return Current time in milliseconds using System.nanoTime()
507 Creates a retry policy excluding remote and SASL exceptions. @param defaultPolicy default retry policy for unspecified exceptions @param exceptionToPolicyMap mapping of specific exceptions to their retry policies @return RetryPolicy configured to handle exceptions other than remote and SASL
508 Retrieves the connection ID for the first proxy. @return ConnectionId object representing the connection details of the first proxy
509 Parses a comma-separated string into a MultipleLinearRandomRetry policy. @param s input string with retry configurations @return MultipleLinearRandomRetry object or null if parsing fails
510 Creates a retry policy based on exceptions. @param defaultPolicy default retry policy for all exceptions @param exceptionToPolicyMap map of specific retry policies for different exceptions @return ExceptionDependentRetry instance with configured policies
511 Creates an IOException from a list of exceptions. @param exceptions List of individual IOExceptions @return Single IOException or null if list is empty
512 Returns the count of block regions in the file. @return Number of BlockRegion objects
513 Retrieves the name of the default compression algorithm. @return Name of the default compressor used in data indexing
514 Reads a variable-length integer from the input stream. @param in DataInput to read from @return deserialized integer value @throws IOException if reading fails or number is out of Integer bounds
515 Writes a variable-length integer to the output stream. @param out DataOutput stream to write to @param n Integer value to serialize @throws IOException if an I/O error occurs
516 Checks if TFile records are sorted. @return true if sorting comparator is not empty, false otherwise
517 Retrieves the total number of entries in the TFile. @return long value representing the entry count
518 Closes the TFile reader. Delegates closing to the underlying BCF reader.
519 Retrieves the name of the comparator used for sorting TFile records. @return Name of the comparator as a string
520 Constructs a ByteArray from a BytesWritable object. @param other source BytesWritable instance
521 Constructs a ByteArray instance using the full provided byte array. @param buffer source byte array
522 Finds the block index nearest to a given offset. @param offset file position to search near @return index of the nearest block or -1 if not found
523 Finds the lower bound index of a key in the TFile index. @param key the key to search for @return index of the first entry not less than the key, or -1 if not found
524 Finds the upper bound index of a key in the TFile index. @param key element to find the upper bound for @return index of the first entry greater than the key, or -1 if not found
525 Compares this location with another based on block and record indices. Delegates to compareTo(int,long). @param other Location object to compare against @return negative if less, positive if greater, zero if equal
526 Retrieves key data into a buffer. @param buf destination byte array @return length of the key copied @throws IOException if buffer is insufficient
527 Reads the value into a buffer. @param buf destination buffer for the value data @param offset starting point in the buffer to store the data @return number of bytes read from the value stream @throws IOException if an I/O error occurs
528 Returns the raw size of the current block. @return The raw size in bytes
529 Retrieves the compressed size of the current block. @return Compressed size in bytes
530 Returns the starting position of the current block. @return Long value representing the byte offset in the file
531 Constructs an OutputStream from a given DataOutput. @param out the DataOutput instance to write data to @return OutputStream suitable for writing data
532 Compares two byte arrays lexicographically. @param buffer1 first byte array @param offset1 starting index in buffer1 @param length1 length of bytes to compare in buffer1 @param buffer2 second byte array @param offset2 starting index in buffer2 @param length2 length of bytes to compare in buffer2 @return negative if buffer1 < buffer2, zero if equal, positive if buffer1 > buffer2
533 Constructs a DataOutputBuffer with a default initial buffer.
534 Retrieves the current buffer content. @return byte array containing stored data
535 Returns the current length of the buffer. @return number of bytes currently stored in the buffer
536 Writes an integer to the buffer at a specified offset. @param v integer value to write @param offset position in the buffer to start writing @throws IOException if an I/O error occurs
537 Calculates the distance between two nodes in the network. @param node1 first Node object @param node2 second Node object @return integer representing the distance, or Integer.MAX_VALUE if nodes are invalid
538 Checks if a node is within a specified scope. @param node the Node object to check @param scope the hierarchical scope as a string @return true if the node is within the scope, false otherwise
539 Splits the full path of a node into components. @param node the Node object @return array of path components
540 Returns the string representation of the node's path. @return full path of the node as a string
541 Removes a node from the network topology. @param node the Node object to remove @throws IllegalArgumentException if attempting to remove an inner node
542 Retrieves datanodes within a specified rack. @param loc normalized network location string @return list of Datanode objects in the rack or empty list if not found
543 Retrieves a node by its location. @param loc the normalized network location string @return Node object or null if not found
544 Generates a string representation of the network topology. @return A string detailing the number of racks, expected leaves, and node paths.
545 Determines if two nodes are on the same rack. @param node1 first node to compare @param node2 second node to compare @return true if both nodes are on the same rack, false otherwise
546 Chooses a random node from the network topology. @param parentNode parent node to select from @param excludedScopeNode node to exclude from scope @param excludedNodes collection of nodes to exclude @param totalInScopeNodes total nodes in scope @param availableNodes available nodes for selection @return randomly chosen Node or null if not found
547 Calculates the weight between two nodes based on their network locations. @param reader source node in the network @param node target node in the network @return integer representing the calculated weight
548 Adds a node to the network under an empty rack. @param node Node object to be added
549 Transfers data from a file channel to the socket output stream. @param fileCh source file channel @param position starting position in the file @param count number of bytes to transfer @param waitForWritableTime time spent waiting for writability (optional) @param transferToTime time spent on actual data transfer (optional) @throws IOException if an I/O error occurs during transfer
550 Normalizes a list of hostnames to IP addresses. @param names collection of hostnames to normalize @return list of normalized hostnames or original names if resolution fails
551 Constructs a formatted string with local and destination host details. @param destHost destination hostname @param destPort destination port number @param localHost local hostname @return formatted string containing host information
552 Retrieves IP addresses within a specified subnet. @param subnet CIDR notation of the subnet @param returnSubinterfaces whether to include subinterface IPs @return list of matching InetAddress objects
553 Retrieves a specified number of free socket ports. @param numOfPorts the number of free ports to acquire (1-25) @return a set of unique free port numbers @throws IllegalArgumentException if numOfPorts is outside valid range @throws IllegalStateException if unable to acquire the requested number of ports
554 Default constructor for RawScriptBasedMapping.
555 Constructs a new CachedDNSToSwitchMapping with a raw mapping. @param rawMapping DNSToSwitchMapping object to be cached
556 Constructs a NodeBase from a network path. @param path the input network path string
557 Initializes a new node with given name and normalized location. @param name unique node identifier @param location node's network location
558 Initializes a new node with specified properties. @param name unique node identifier @param location node's location in the network, normalized @param parent parent node reference @param level hierarchy level of the node
559 Sends callback to handler for a given file descriptor. @param caller method name initiating the callback @param entries map of socket entries by file descriptor @param fdSet set of file descriptors being monitored @param fd specific file descriptor to process @return true if socket is closed, false otherwise
560 Checks if the domain socket is open. @return true if the socket is open, false otherwise
561 Closes the domain socket, shutting down and closing the file descriptor. @throws IOException if an I/O error occurs during shutdown or closure
562 Trims idle selectors by closing those that haven't been active within a timeout. @param now current timestamp in milliseconds
563 Retrieves and caches dependencies for a given script name. @param name the script name or hostname @return list of dependency names or empty list if none found
564 Sets the read timeout for the socket stream. @param timeoutMs Timeout in milliseconds @throws SocketException if an error occurs while setting the timeout
565 Retrieves IP addresses for a specified network interface. @param strInterface name of the network interface @param returnSubinterfaces if true, includes subinterface IPs @return array of IP addresses as strings @throws UnknownHostException if the interface is not found
566 Retrieves IP addresses for a specified network interface. @param strInterface name of the network interface @param returnSubinterfaces if true, includes subinterface IPs @return list of InetAddress objects or default host address if interface not found @throws UnknownHostException if no such network interface exists
567 Retrieves the node group for a given location. @param loc network location string @return node group path or null if not applicable
568 Dumps the network topology mapping. @return String representation of the DNS-to-switch mapping or error message
569 Checks if the given DNS-to-switch mapping is configured for a single switch. @param mapping DNSToSwitchMapping instance to check @return true if single switch configuration, otherwise false
570 Retrieves current logging statistics for a recorder. @param recorderName name of the log recorder @param idx index of the statistics to retrieve @return SummaryStatistics object or null if not found
571 Prints generic command usage information. @param out PrintStream to output the usage information
572 Checks if a given class is associated with Log4j. @param clazz Class object to check @return true if the class is a Log4j logger, false otherwise
573 Constructs LogThrottlingHelper with default Timer. @param minLogPeriodMs minimum time between logs in milliseconds @param primaryRecorderName name of the primary log recorder
574 Records log values with throttling. @param recorderName name of the logger @param currentTimeMs current timestamp in milliseconds @param values variable number of log values to record @return LogAction if logging should occur, otherwise DO_NOT_LOG
575 Checks if a string requires HTML quoting. @param str the input string to check @return true if special HTML characters are present, false otherwise
576 Quotes HTML special characters in a string. @param item input string to be quoted @return quoted string or original if no quoting needed
577 Registers a Jersey resource package with the server using default parameters. @param packageName package containing Jersey resources @param pathSpec URL path specification for the resources
578 Adds an internal servlet to the web application context. @param name unique name for the servlet (optional) @param pathSpec URL pattern to map the servlet to @param clazz servlet class extending HttpServlet
579 Adds an internal servlet to the web application context. @param name unique name for the servlet (optional) @param pathSpec URL pattern to map the servlet to @param clazz servlet class extending HttpServlet
580 Defines a filter and maps it to specified URLs. @param ctx servlet context handler @param name filter name @param classname fully qualified class name of the filter @param parameters initialization parameters for the filter @param urls array of URL patterns to map the filter to
581 Binds a server connector to a specified port, retrying with the next port if binding fails. @param listener ServerConnector to bind @param port initial port number to attempt binding @throws Exception if binding fails after exhausting available ports
582 Retrieves the X-Frame-Options enum based on string input. @param value string representation of the X-Frame-Option @return corresponding XFrameOption enum or throws exception if invalid
583 Initializes file monitoring with specified paths and actions. @param filePaths list of file paths to monitor @param onFileChange action to take on file change @param onChangeFailure action to take on failure
584 Retrieves a non-negative integer value from properties. @param key property key to fetch @param defaultValue default value if key is not found @return non-negative integer value or throws exception if negative
585 Checks if a required property exists in the configuration. @param key property name to check @throws MetricsException if the property is missing
586 Checks for errors in the output stream and throws a MetricsException if found. @param message error description to include in the exception
587 Throws a MetricsException with an error message and file path. @param message detailed error description
588 Parses and validates the rolling interval from properties. @return rolling interval in milliseconds @throws MetricsException if invalid format or unit
589 Throws a MetricsException with details about the error. @param message descriptive error message @param t throwable that caused this exception
590 Updates or creates a metric record in the cache. @param mr MetricsRecord object containing metric data @param includingTags flag to include tags in the record @return Updated Record object
591 Serializes a string into the buffer in XDR format. @param s string to serialize
592 Emits a metric to the Ganglia monitoring system. Validates and logs metric details before sending metadata and value messages. @param groupName name of the metric group @param name unique metric identifier @param type data type of the metric @param value current value of the metric @param gConf configuration settings for Ganglia @param gSlope slope indicating metric trend @throws IOException if an I/O error occurs during emission
593 Emits a metric to the Ganglia monitoring system. @param groupName name of the metric group @param name metric identifier @param type data type of the metric value @param value metric value as a string @param gConf configuration settings for Ganglia @param gSlope slope of the metric (increasing, decreasing, zero) @throws IOException if an I/O error occurs during emission
594 Removes and returns an element from the front of the queue. Blocks until an element is available if the queue is empty. Throws ConcurrentModificationException if a consumer is active.
595 Initializes a new MetricsRecordImpl instance. Validates and assigns provided metrics data. @param info metrics information @param timestamp record creation time @param tags associated metric tags @param metrics collection of metrics
596 Adds RPC enqueue time to metrics. @param enQTime time taken for RPC to enter the queue
597 Records RPC queue time. @param qTime the time spent in the queue
598 Records the processing time of an RPC call. @param processingTime duration in milliseconds
599 Adds write latency to quantile statistics. @param writeLatency the latency of a write operation in milliseconds
600 Adds a new read latency data point to the quantile statistics. @param readLatency the latency of a file read operation in milliseconds
601 Initializes the metrics system with a given prefix. @param prefix string prefix for metric names @return initialized MetricsSystem instance
602 Returns the singleton instance of the MetricsSystem. @return The MetricsSystem instance or null if not set
603 Shuts down the metrics system instance.
604 Takes a snapshot of metrics and tags. @param builder MetricsRecordBuilder to store the snapshot @param all if true, includes all metrics; otherwise, filters based on criteria
605 Computes rolling averages for metrics with sufficient samples. @param minSamples minimum number of samples required to compute an average @return Map of metric names to their computed average values
606 Returns the count of processing time samples. @return Number of samples recorded for RPC processing times
607 Rolls over averages by updating internal data structures. Maintains a rolling window of metric sums and counts.
608 Caches metrics information. @param name metric name @param description metric description @return cached MetricsInfo object
609 Creates and caches a metric tag. @param info metric information details @param value tag value associated with the metric @return cached MetricsTag object
610 Adds samples to statistics and marks state as changed. @param numSamples number of samples added @param sum total value of the samples
611 Adds a single sample to the statistics. @param x value of the sample @return updated SampleStat instance
612 Calculates the mean processing time of RPC calls. @return Mean processing time or 0.0 if no data is available
613 Returns the current minimum value from tracked samples. @return the minimum value or default if no samples added
614 Returns the current maximum value from the statistics. @return The highest value recorded so far
615 Resets minimum and maximum values to default settings.
616 Calculates the next TGT renewal time. @param tgtEndTime end time of the current TGT @param now current timestamp @param rp retry policy for handling failures @return calculated renewal time in milliseconds
617 Calculates the standard deviation of the samples. @return Standard deviation as the square root of variance
618 Compresses sample data by merging adjacent items if their combined error is within allowable limits. Uses `allowableError` to determine the error threshold for each position.
619 Queries the sample data for a given quantile. @param quantile desired quantile value (0.0 to 1.0) @return estimated value at the specified quantile
620 Inserts a batch of samples into the sorted list. Sorts and merges new samples with existing ones while maintaining accuracy.
621 Retrieves all netgroup names from the cache. @return a list of all unique netgroup names
622 Checks if a netgroup is cached. @param group name of the netgroup to check @return true if the netgroup is in cache, false otherwise
623 Retrieves server SASL properties based on client address and port. @param clientAddress IP address of the client @param ingressPort port number for incoming connections @return Map of SASL properties for the server
624 Retrieves client SASL properties for a given server address and port. @param serverAddress the IP address of the server @param ingressPort the port number (not used in current implementation) @return a map of SASL properties specific to the client
625 Extracts the host name from a Kerberos principal. @param principalName full Kerberos principal string @return host name extracted from the principal
626 Retrieves groups for a user, checking static mappings, negative cache, and main cache. @param user the username to fetch group information for @return set of group names associated with the user @throws IOException if an error occurs during retrieval or no groups are found
627 Refreshes the user-to-group mappings cache. Clears existing cache and handles exceptions during refresh.
628 Prints formatted message to output stream or console. @param format message format string @param args arguments for the format string
629 Updates a bidirectional map with entries from shell command output. @param map the BiMap to update @param mapName name of the map being updated @param command shell command to execute @param regex regex to split command output lines @param staticMapping static mapping of IDs @return true if the map was updated, false otherwise
630 Generates command array to run a script. @param script the script file to execute @return array of command strings for execution
631 Switches the bind user in case of authentication failure. @param e the exception that triggered the switch
632 Writes data to the output stream with SASL wrapping. @param inBuf input buffer containing data to write @param off offset within the buffer @param len number of bytes to write @throws IOException if I/O error occurs or SASL wrapping fails
633 Closes the SASL output stream and underlying data stream. Disposes of SASL resources and closes the output stream. @throws IOException if closing fails
634 Handles HTTP interactions by checking user agent and method. @param httpInteraction the current HTTP interaction to process @throws IOException if an I/O error occurs @throws ServletException if a servlet exception occurs
635 Parses partial group names from provided strings. @param groupNames comma-separated group names @param groupIDs comma-separated group IDs @return set of resolved group names @throws PartialGroupNameException if parsing fails due to mismatch or invalid data
636 Generates a SecretKey from raw byte array using default HMAC algorithm. @param key raw byte array representing the secret key @return SecretKey object
637 Removes a stored delegation token by its identifier. @param ident unique token identifier
638 Resets token management by clearing keys and tokens, setting IDs to zero.
639 Updates or adds a delegation key to the internal storage. @param key DelegationKey object to be updated or added
640 Removes a stored master key from the SQL database. @param key DelegationKey object to be removed
641 Adds a new delegation key. @param key DelegationKey to be added @throws IOException if adding key to a running SecretManager
642 Stores a delegation key and updates the master key. @param key DelegationKey to be stored @throws IOException if an I/O error occurs during storage
643 Sets an external delegation token secret manager. Stops existing threads, updates the secret manager, and marks it as unmanaged. @param secretManager the new secret manager to set
644 Retrieves and processes configuration properties for authentication. @param configPrefix prefix for configuration keys @param filterConfig servlet filter configuration @return Properties object with auth handler class set @throws ServletException if configuration is invalid
645 Retrieves user group information from HTTP context. @return UserGroupInformation object associated with current thread
646 Determines if the request is a management operation. @param request HTTP servlet request object @return true if it's a management operation, false otherwise
647 Checks if the token is managed. @return true if the token is managed, false otherwise @throws IOException if there's an issue during retrieval
648 Renews the current token using the configured TokenRenewer. @param conf Configuration object for renewal settings @return New expiration time of the token in milliseconds @throws IOException if there's an issue during renewal @throws InterruptedException if the operation is interrupted
649 Cancels the current token. @param conf configuration settings for cancellation process @throws IOException if there's an issue during cancellation @throws InterruptedException if the operation is interrupted
650 Wraps input stream with security if required. @param in original input stream @return wrapped or original input stream based on security settings
651 Returns an output stream for secure data transmission. Wraps the provided output stream if SASL wrapping is enabled. @param out original output stream @return wrapped or original output stream based on security settings @throws IOException if I/O error occurs
652 Reads and processes SASL tokens from the input stream. @return number of bytes processed or -1 if EOF is reached @throws IOException on I/O errors or SaslException during token processing
653 Closes the SASL input stream, disposes of resources, and marks it as closed. @throws IOException if an I/O error occurs during closing
654 Constructs an AuthorizationException with the specified cause. @param cause the underlying Throwable that caused this exception
655 Checks if the login was successful for a given user. @return true if login succeeded or not applicable, false otherwise
656 Updates the user's last login time. @param loginTime new last login timestamp in milliseconds
657 Constructs a UserGroupInformation object from a Subject. @param subject the security context representing the user @throws IllegalStateException if the Subject does not contain a valid User
658 Retrieves the username of the authenticated user. @return The username as a String
659 Checks if the user has Kerberos credentials. @return true if using Kerberos authentication, false otherwise
660 Returns the authentication method of the current user. @return AuthenticationMethod enum indicating the user's auth method
661 Retrieves the real user associated with this object. @return UserGroupInformation representing the real user or null if not set
662 Retrieves the short name of the authenticated user. @return String representing the user's short name
663 Sets the authentication method for the current user. @param authMethod the new authentication method to be applied
664 Initializes the ReloadingX509TrustManager with specified truststore details. @param type truststore type (e.g., JKS, PKCS12) @param location path to the truststore file @param password truststore password @throws IOException if an I/O error occurs while reading the truststore @throws GeneralSecurityException if there is a security issue with the truststore
665 Initializes a ReloadingX509KeystoreManager with specified keystore details. @param type keystore type (e.g., JKS, PKCS12) @param location file path to the keystore @param storePassword password for the keystore @param keyPassword password for the keys in the keystore @throws IOException on I/O errors accessing the keystore @throws GeneralSecurityException on security issues loading the keystore
666 Retrieves a resource by name using Hadoop configuration. @param name the resource path @return URL pointing to the resource or null if not found
667 Retrieves configuration resource as input stream. @param name resource path @return InputStream of the resource or null if not found
668 Retrieves a configuration resource as a Reader. @param name the resource path @return Reader for the resource or null if not found
669 Creates an SSLEngine for secure communication. @return configured SSLEngine instance
670 Configures an HttpURLConnection for secure communication. @param conn the connection to configure @return configured HttpURLConnection instance @throws IOException if configuration fails
671 Constructs a Configured object with the given configuration. @param conf Configuration object to be used
672 Handles shell executor timeout for user group lookup. Logs a warning and returns true if timed out, otherwise false. @param executor ShellCommandExecutor instance @param user User for whom groups are being fetched @return True if timeout occurs, false otherwise
673 Constructs a string representation of the shell command. @return A formatted string with each argument properly quoted if needed
674 Reads an authentication method from a data input stream. @param in DataInput stream containing the byte representation of the auth method @return AuthMethod object corresponding to the read byte code @throws IOException if an I/O error occurs while reading from the stream
675 Adds a user to the access control list. @param user the username to add Throws IllegalArgumentException if user represents a wildcard ACL value.
676 Adds a group to the access control list. @param group name of the group to add @throws IllegalArgumentException if the group is a wildcard or all users are allowed
677 Removes a user from the access control list. @param user the username to remove Throws IllegalArgumentException if user is a wildcard or all users are allowed.
678 Removes a group from the access control list. @param group name of the group to remove @throws IllegalArgumentException if the group is a wildcard or all users are allowed
679 Converts list of users to a comma-separated string. @return string representation of user collection
680 Converts collection of groups to comma-separated string. @return string representation of groups
681 Checks if a KerberosTicket is an original TGT. @param ticket the Kerberos ticket to check @return true if the ticket's server is a TGS principal, false otherwise
682 Retrieves server properties based on client IP address. @param clientAddress the client's InetAddress @return default properties if whitelisted, otherwise SASL properties
683 Validates that the provided CryptoCodec uses AES/CTR/NoPadding or SM4/CTR/NoPadding. @param codec the cryptographic codec to check
684 Returns the current position in the decrypted input stream. @return Current position as a long @throws IOException if the underlying stream is closed
685 Reads data from the underlying input stream into a ByteBuffer. @param inBuffer buffer to store read data @return number of bytes read or -1 if end of stream
686 Converts a string to its corresponding CipherSuite. @param name the name of the cipher suite @return CipherSuite object matching the name @throws IllegalArgumentException if no matching cipher suite is found
687 Checks if the given protocol version is supported. @param version the version to check @return true if supported, false otherwise
688 Generates a random integer within the specified bit range. @param numBits number of bits for the generated integer @return random integer with the specified number of bits
689 Creates a KeyProviderCryptoExtension instance. @param keyProvider the underlying key provider @return KeyProviderCryptoExtension object initialized with the given key provider
690 Retrieves the current version of a key. @param name base key name @return KeyVersion object or null if not found @throws IOException if an I/O error occurs
691 Generates a cryptographic key. @param size key size in bits @param algorithm encryption algorithm @return encoded key bytes @throws NoSuchAlgorithmException if the specified algorithm is invalid
692 Creates an EncryptedKeyVersion for decryption. @param keyName name of the encryption key @param encryptionKeyVersionName version identifier for the encryption key @param encryptedKeyIv initialization vector for the encrypted key @param encryptedKeyMaterial encrypted key material @return EncryptedKeyVersion instance suitable for decryption
693 Creates a KeyProviderDelegationTokenExtension instance. @param keyProvider the key provider to manage delegation tokens @return KeyProviderDelegationTokenExtension object with appropriate extensions
694 Closes the KMS client provider by shutting down resources. @throws IOException if an I/O error occurs during shutdown
695 Retrieves the read-write lock for a given key name. @param keyName the key to identify the lock @return the corresponding ReadWriteLock object
696 Appends a validated field to the context. @param field the string to append @return Builder instance for chaining
697 Appends a key-value pair to the context. @param key unique identifier for the value @param value associated with the key @return Builder instance for method chaining
698 Appends key-value pair to context if key is absent. @param key unique identifier for the value @param value associated with the key @return Builder instance for method chaining
699 Generates a success response for refresh operation. @return RefreshResponse object indicating successful completion
700 Converts a client ID byte array to a UUID string. @param clientId byte array representing the client ID @return UUID string or empty if input is null or invalid
701 Adds a call to the queue. @param e call to be added @return true if the call was successfully added, false otherwise
702 Returns the current length of the call queue. @return Size of the call queue
703 Retrieves all interfaces extending VersionedProtocol from a given protocol class. @param protocol the protocol class to inspect @return array of interfaces extending VersionedProtocol
704 Retrieves the server address associated with a given proxy. @param proxy the proxy object for which to fetch the server address @return InetSocketAddress representing the server's address
705 Returns the current time from a monotonic clock in nanoseconds. @return Current time in nanoseconds since an arbitrary point
706 Retrieves the remote user's information from the current call context. @return UserGroupInformation object or null if no active call exists
707 Computes fingerprints for an array of methods. @param methods array of Method objects to compute fingerprints for @return array of integers representing method fingerprints, or null if input is null
708 Dispatches refresh requests to handlers associated with an identifier. @param identifier unique key for the handler collection @param args arguments for the refresh operation @return Collection of RefreshResponse objects from each handler @throws IllegalArgumentException if identifier does not exist
709 Constructs a RemoteException with specified class name and message. @param className the name of the class where the exception occurred @param msg the detailed error message
710 Unwraps remote exception to specified type. @param lookupTypes array of exception classes to check against @return IOException instance or original if no match found
711 Unwraps and converts remote exception to IOException. @return Converted IOException or original if conversion fails
712 Calculates total processing cost based on weighted timing details. @param details ProcessingDetails object containing timing information @return Calculated cost as a long value
713 Retrieves the number of dropped connections. @return Count of connections that have been dropped
714 Returns the number of open connections. @return integer representing active connections
715 Adds an element to the queue at a specified priority. @param priority the priority level of the task @param e the element to add to the queue @throws InterruptedException if interrupted while waiting
716 Adds an element to the queue at a specified priority. @param priority the priority level of the task @param e the element to add to the queue @return true if the element was successfully added, false otherwise
717 Adds specified exceptions to terse logging. @param exceptionClass variable number of exception classes
718 Adds exceptions to the list of suppressed logging. @param exceptionClass variable number of exception classes to suppress
719 Constructs an UnexpectedServerException with a detailed error message. @param message description of the unexpected server error
720 Constructs an RpcServerException with a specific error message. @param message detailed error description of the RPC failure
721 Constructs an RpcClientException with a specific error message. @param message detailed error description during RPC call
722 Constructs an unexpected server exception with a specific message and underlying cause. @param message descriptive error message @param cause the root cause of the exception
723 Constructs an RpcServerException with a specific message and underlying cause. @param message descriptive error message related to RPC failure @param cause the root exception causing the RPC error
724 Constructs an RpcClientException with a specific message and underlying cause. @param message descriptive error message @param cause the root cause of the exception
725 Adds a cost delta to the specified identity's call costs. @param identity unique identifier for the call @param costDelta the amount by which to increase the cost
726 Computes priority level for an RPC based on cost and identity. @param cost the decayed call cost of the RPC @param identity unique identifier of the RPC caller @return priority level as an integer, with higher numbers indicating higher priority
727 Converts a ServiceException to an IOException. @param se the service exception to convert @return IOException representing the original exception cause or the service exception itself
728 Executes an IPC call and handles ServiceException by converting it to IOException. @param <T> the type of the response object @param call the IPC call to execute @return the result of the IPC call @throws IOException if a ServiceException occurs during the call
729 Retrieves or creates a cached ByteString for a given key. @param key the string key to convert to ByteString @return cached ByteString representation of the key
730 Converts byte array to ByteString. @param bytes input byte array @return ByteString representation of the input bytes, using EMPTY for zero-length arrays
731 Sets call ID and retry count for RPC. Validates input parameters and updates internal state. @param cid unique call identifier @param rc number of retries allowed @param externalHandler handler for external calls
732 Retrieves the local address of the server's listener. @return InetSocketAddress representing the local listening address
733 Retrieves addresses of all auxiliary listeners. @return Set of InetSocketAddress objects representing listener addresses
734 Stops a client and removes it from the cache if no more references exist. @param client the Client instance to stop
735 Compares this cache entry with another for equality. @param obj the object to compare with @return true if equal, false otherwise
736 Constructs a ProtobufWrapperLegacy for the given message. Validates that the message is an unshaded Protobuf instance. @param message the Protobuf message to wrap
737 Sets up an RPC response for old version fatal errors. @param response ByteArrayOutputStream to write the response @param call RpcCall object containing request details @param rv Writable result value (not used in this method) @param errorClass Class name of the error @param error Error message @throws IOException if an I/O error occurs while writing the response
738 Advances the index by decrementing requests left and moving to next queue if needed.
739 Sets an exception for the call and marks it as complete. @param error IOException representing the error encountered
740 Sets the RPC response and marks the call as complete. @param rpcResponse the response received from the RPC call
741 Reads a single byte from the input stream with timeout handling. @return the next byte of data or -1 if end of stream is reached @throws IOException if an I/O error occurs
742 Reads data from the input stream with timeout handling. @param buf destination buffer for read bytes @param off offset in the buffer to start storing bytes @param len maximum number of bytes to read @return number of bytes read, or -1 if end of stream @throws IOException if an I/O error occurs
743 Retrieves the remote IP address of the current call. @return InetAddress object representing the remote IP or null if no active call
744 Retrieves the remote port number from the current call. @return The remote port number or 0 if no active call
745 Retrieves the Quality of Protection (QOP) for established connections on auxiliary ports. @return QOP value as a string or null if not applicable
746 Retrieves the priority level of the current RPC call. @return integer representing the priority level, defaulting to 0 if no call is present
747 Returns JSON string of open connections per user. @return JSON representation of the map or null on error
748 Initializes MachineList with a collection of host entries. @param hostEntries list of IP addresses and/or CIDR ranges @param addressFactory factory for resolving hostnames to InetAddress objects
749 Checks if the given IP address or hostname is included in the allowed list. @param ipAddress the IP address or hostname to check @return true if allowed, false otherwise
750 Initializes system information gathering for Linux. @param procfsMemFile path to memory info file in /proc @param procfsCpuFile path to CPU info file in /proc @param procfsStatFile path to stat file in /proc @param procfsNetFile path to network stats file in /proc @param procfsDisksFile path to disks info file in /proc @param jiffyLengthInMillis duration of a jiffy in milliseconds
751 Reads and parses memory info from /proc/meminfo. @param readAgain forces re-reading if already done
752 Retrieves the number of processors in the system. Reads CPU information from /proc/cpuinfo and initializes the processor count. @return Number of processors detected
753 Retrieves the number of CPU cores. Reads and parses /proc/cpuinfo to initialize core count. @return Number of CPU cores
754 Retrieves CPU frequency. Reads and parses /proc/cpuinfo to update CPU metrics. @return Current CPU frequency in kHz
755 Reads and processes the /proc/stat file to update CPU time metrics.
756 Retrieves total network bytes read. Calls readProcNetInfoFile to update metrics. @return Number of network bytes read
757 Retrieves network bytes written. Reads /proc/net/dev to update statistics. @return Total network bytes written
758 Reads disk statistics from /proc/diskstats. Updates total bytes read and written for disks.
759 Retrieves the value associated with a given key. @param k the key to search for @return the value if found, otherwise null
760 Removes a key-value pair by key. @param k the key to remove @return the value associated with the removed key, or null if not found
761 Removes an element by key from the set at a specific index. @param index position in the entries array @param key unique identifier of the element to remove @return removed element or null if not found
762 Sets optional secure attributes for TransformerFactory. Disables external DTD and stylesheet access. @param transformerFactory the factory to configure
763 Converts a string with a size prefix to a long value. @param s the input string representing a size with a binary prefix (e.g., "1k", "2M") @return the parsed long value @throws IllegalArgumentException if the string format is invalid or the value exceeds Long range
764 Converts a long value to a human-readable string with a unit and precision. @param n the number to convert @param unit the unit of measurement (e.g., "B", "KB") @param decimalPlaces number of decimal places for precision @return formatted string representation of the number
765 Formats a percentage from a fractional value. @param fraction the fractional value to convert to percentage @param decimalPlaces number of decimal places in the formatted percentage @return formatted percentage string
766 Converts a byte array to a hexadecimal string. @param bytes the input byte array @param start starting index of conversion @param end ending index of conversion @return hexadecimal string representation of the byte range
767 Limits a double to two decimal places. @param d the input double value @return formatted string with two decimal places
768 Terminates JVM with an ExitException. Logs and handles exceptions based on status code. Throws or suppresses errors accordingly. @param ee ExitException to handle termination @throws ExitException if system exit is disabled
769 Handles JVM halting with logging and exception management. @param he HaltException to process @throws HaltException if systemHaltDisabled is false
770 Adds a shutdown hook with specified priority and timeout. @param shutdownHook the runnable task to be executed during shutdown @param priority execution priority of the hook @param timeout maximum time allowed for hook execution @param unit time unit for the timeout @throws IllegalArgumentException if shutdownHook is null @throws IllegalStateException if shutdown is already in progress
771 Removes a registered shutdown hook. @param shutdownHook the Runnable to remove @return true if the hook was successfully removed, false otherwise
772 Checks if a specific shutdown hook is registered. @param shutdownHook the runnable task to check @return true if the hook is registered, false otherwise
773 Retrieves an input stream for a specified resource using the current thread's context class loader. @param resourceName name of the resource to load @return InputStream of the resource @throws IOException if resource cannot be found or class loader is null
774 Constructs a LineReader with default buffer size. @param in InputStream to read from
775 Executes the command at specified intervals. Checks if the interval has elapsed before running the command. Resets exit code for the next execution.
776 Creates a new daemon thread factory with a specified naming prefix. @param prefix base name for threads @return ThreadFactory that creates daemon threads with normal priority
777 Expands the hash set if necessary. Resizes to double the capacity if size exceeds threshold and max length is not reached.
778 Creates an ArrayList from an iterator's elements. @param elements iterator providing the elements for the list @return a new ArrayList containing all elements from the iterator
779 Adds all elements from the given iterable to the specified collection. @param addTo target collection to append elements @param elementsToAdd source iterable of elements to add @return true if the collection was modified, false otherwise
780 Creates a new ArrayList with the specified initial capacity. @param initialArraySize the desired initial capacity of the list @return an ArrayList instance with the given capacity
781 Writes a Java object as JSON bytes to an output stream. @param instance the Java object to serialize @param dataOutputStream the output stream to write to @throws IOException if writing fails
782 Initializes an OperationDuration with start and finish times set to current system time.
783 Marks the operation as finished by recording the current time.
784 Converts operation duration to a Duration object. @return Duration representing the elapsed time in milliseconds
785 Returns the operation duration as a human-readable string. @return formatted duration in "minutes:seconds.milliseconds"
786 Computes monomial value for given length in bytes using Galois field. @param lengthBytes length of data in bytes @param mod modulus for the Galois field @return computed monomial value
787 Composes two CRC values using a monomial. @param crcA first CRC value @param crcB second CRC value @param monomial monomial to use in composition @param mod modulus for Galois field operations @return composed CRC value
788 Converts an integer to a byte array. @param value integer to convert @return byte array representing the integer
789 Converts a 4-byte array to a formatted CRC string. @param bytes 4-byte input array representing the CRC value @return Hexadecimal string representation of the CRC @throws IOException if byte array length is not 4
790 Converts byte array to a formatted CRC string. @param bytes input byte array, length must be divisible by 4 @return formatted string of CRC values @throws IOException if byte array length is not divisible by 4
791 Extracts files from a JAR to a specified directory. @param inputStream input stream of the JAR file @param toDir target directory for extraction @param unpackRegex regex pattern for files to extract @throws IOException if an I/O error occurs during extraction
792 Extracts files from a JAR to a directory based on regex pattern. @param jarFile the JAR file to extract @param toDir target directory for extraction @param unpackRegex pattern to match files for extraction @throws IOException if an I/O error occurs
793 Locates the n-th occurrence of a byte within a UTF-8 byte array. @param utf the UTF-8 encoded byte array to search @param start the starting index for the search (inclusive) @param length the number of bytes from the start to search @param b the byte to find @param n the occurrence number to locate @return the index of the n-th occurrence, or -1 if not found
794 Adds or updates an entry with weak reference to the value. @param key unique identifier for the entry @param value object to be stored weakly @return The original value associated with the key or null if none
795 Removes and returns the value associated with the specified key. @param key the key whose mapping is to be removed @return the removed value or null if not found
796 Checks if the map contains a mapping for the specified key. @param key unique identifier to check @return true if there is a value associated with the key, false otherwise
797 Creates and manages a weakly referenced value. @param key unique identifier for the value @return Weakly referenced value or null if creation fails
798 Prunes entries with null values, removing them from the map. @return Number of pruned entries
799 Creates a snapshot of current suppressed statistics and resets counters. @return SuppressedSnapshot object containing the stats
800 Calculates and formats the time difference between two timestamps. @param finishTime end time in milliseconds @param startTime start time in milliseconds @return formatted time string (e.g., "1hrs, 30mins, 45sec")
801 Parses a string into a map of key-value pairs. @param str input string to parse @return Map containing parsed key-value pairs
802 Splits a string into parts based on a separator, considering escape characters. @param str input string to split @param escapeChar character used to escape separators @param separator character to identify as a separator @return array of split strings or null if input is null
803 Escapes special characters in a string. @param str the input string to process @param escapeChar the character used for escaping @param charsToEscape array of characters to be escaped @return escaped string with special characters replaced
804 Unescapes a string by removing escape characters. @param str the input string to unescape @param escapeChar character used for escaping @param charsToEscape array of characters that require escaping @return unescaped string or throws IllegalArgumentException if invalid
805 Retrieves version information for the software component. @return Version string or "Unknown" if not found
806 Retrieves the revision number of the software component. @return Revision number as a string or "Unknown" if not found
807 Retrieves the branch name from version information. @return Branch name or "Unknown" if not specified
808 Retrieves the build date of the software component. @return The build date as a string or "Unknown" if not available
809 Retrieves the build user from version information. @return Name of the user who built the component or "Unknown" if not available
810 Retrieves the URL associated with the software component. @return The URL as a String, or "Unknown" if not available
811 Retrieves the source checksum. @return The source checksum as a string or "Unknown" if not available
812 Retrieves the Protocol Buffers compiler version. @return protoc version as a string or "Unknown"
813 Retrieves the compile platform information. @return Compile platform as a string or "Unknown" if not found
814 Initializes a new FilteringRemoteIterator with a source iterator and a filter function. @param source the RemoteIterator to wrap @param filter the filtering function that determines element validity
815 Constructs a new HaltableRemoteIterator. @param source the RemoteIterator to wrap and manage @param continueWork callable determining if iteration should continue
816 Checks if there is a next element that matches the filter criteria. @return true if a matching element exists, false otherwise @throws IOException if an I/O error occurs while fetching elements
817 Constructs a new MaybeClose instance. @param o the object to manage, which may be closable
818 Submits a callable task for asynchronous execution. @param executor the executor to run the task @param call the task to be executed asynchronously @return CompletableFuture representing the pending result of the task
819 Initializes a new instance with a callable that may raise I/O exceptions. @param constructor callable to create the referenced object, must not be null
820 Creates a LazyAtomicReference from a Supplier. @param supplier provides the object to be lazily initialized @return LazyAtomicReference instance wrapping the supplier
821 Evaluates and returns the lazily initialized resource. Ensures the reference is not closed before evaluation. @return the lazily initialized object of type T @throws IOException if an I/O error occurs during initialization
822 Applies the lazy evaluation of the referenced object. @return the lazily initialized object of type T @throws IOException if an I/O error occurs during initialization
823 Converts Callable potentially throwing IOException to unchecked version. @param call callable that may raise IOException @return result of the callable operation
824 Converts CallableRaisingIOE to a Supplier that throws UncheckedIOException. @param call callable raising IOException @return Supplier wrapping the callable operation
825 Creates a builder to process items concurrently. @param items RemoteIterator of items to iterate over @return Builder instance for task management
826 Throws a single exception from a collection, suppressing others of different types. @param exceptions collection of exceptions to process @throws E the primary exception, with suppressed exceptions if applicable
827 Constructs a Builder with an iterable of items. Converts Iterable to RemoteIterator and initializes Builder. @param items source of elements to iterate over
828 Enables exception suppression during task execution. @return Builder instance with exceptions suppressed
829 Throws the inner IOException from an ExecutionException. @param e the ExecutionException containing the cause @throws IOException the unwrapped underlying IOException
830 Throws the inner IOException from a CompletionException. @param e the original CompletionException @throws IOException the unwrapped inner exception
831 Configures an object using a JobConf if applicable. @param theObject object to configure @param conf configuration object
832 Retrieves a class by name, throwing exception if not found. @param name fully qualified class name @return Class object @throws ClassNotFoundException if class is not found
833 Prints detailed thread information to a stream. @param stream output stream for thread dump @param title optional title for the thread dump
834 Constructs a new Configuration instance. @param loadDefaults flag to indicate if default settings should be loaded
835 Creates a JSON error response for servlets. @param response HTTP response object to write the error to @param status HTTP status code for the error @param ex Throwable exception causing the error @throws IOException if writing to the response fails
836 Creates a Jersey exception response. @param status HTTP response status @param ex the Throwable to process @return a JSON-formatted error response
837 Initializes CRC32C with default state.
838 Clears all elements from the collection. Uses an iterator to remove each element efficiently.
839 Generates command to fetch groups for a user. Handles OS-specific nuances for consistent execution. @param user username for which to find groups @return array of command parts suitable for execution
840 Generates the command to fetch group IDs for a given user. Handles OS-specific differences in command syntax. @param user the username @return array of strings representing the command and its arguments
841 Generates command to check file permissions. @return Array of strings representing the command
842 Generates command to set file permissions. @param perm permission string @param recursive true if applied recursively @return array of command parts
843 Generates the command to set file ownership. @param owner user or group name for ownership @return Array of command strings suitable for execution
844 Generates a command to create a symbolic link. @param target the path of the target file or directory @param link the path where the symlink should be created @return array of command arguments for OS-specific symlink creation
845 Generates a command to resolve symbolic links. @param link path to the symbolic link @return array of command parts, OS-specific
846 Generates a command to send a signal to a process. @param code the signal code @param pid the process ID @return array of strings representing the shell command
847 Creates a file with an OS-specific script extension. @param parent directory containing the script @param basename base name of the script @return File object with appropriate script extension
848 Determines the Hadoop home directory. Checks JVM property first, then environment variable. @return File object representing the Hadoop home directory @throws FileNotFoundException if Hadoop home is not found
849 Retrieves the Hadoop home directory. Throws FileNotFoundException if a failure occurred during initialization. @return File object representing the Hadoop home directory
850 Retrieves the qualified executable file within the Hadoop bin directory. @param hadoopHomeDir root directory of Hadoop installation @param executable name of the executable to find @return canonical File object if found @throws FileNotFoundException if any directory or file is missing or invalid
851 Retrieves the WinUtils executable file. Throws FileNotFoundException if initialization failed. @return File object for WinUtils or null if not found
852 Terminates all child shell processes and clears the tracking set.
853 Shuts down a thread with a default timeout. @param thread the Thread to be shut down @return true if thread is successfully shut down, false otherwise
854 Initiates graceful shutdown of an ExecutorService with default timeout. @param service the ExecutorService to shut down @return true if the service terminated, false otherwise @throws InterruptedException if interrupted while waiting
855 Adds a new progress phase. @return newly created Progress instance
856 Adds a new phase to the progress with specified weightage. @param weightage relative importance of the phase (0-1) @return newly created Progress instance representing the phase
857 Calculates the internal progress based on completed and current phases. @return float representing the internal progress percentage
858 Marks the current progress as complete and advances the parent phase. @param none @return void
859 Retrieves string data from a specified ZooKeeper node. @param path the path of the node to retrieve data from @return string containing the data or null if the node does not exist
860 Retrieves string data from a ZooKeeper node. @param path the path of the node to retrieve data from @param stat object to store node statistics @return string representation of the node's data or null if not found
861 Sets data at a specified ZooKeeper path. @param path the node's path in ZooKeeper @param data the new string data to set @param version the expected version of the node for optimistic locking @throws Exception if an error occurs during the update
862 Creates a persistent node in ZooKeeper. @param path node path to create @param zkAcl access control list for the node @return true if node was created, false if it already exists
863 Deletes a node at the specified path. @param path ZooKeeper node path to delete @return true if deletion is successful, false if node does not exist @throws Exception if an error occurs during deletion
864 Safely deletes a node in ZooKeeper. @param path the ZooKeeper node path to delete @param fencingACL list of Access Control Lists for transaction fencing @param fencingNodePath path to the node for transaction fencing @throws Exception if operation fails
865 Adds a program to the collection. @param name unique identifier for the program @param mainClass the main class of the program @param description descriptive information about the program
866 Sets the implementation of a method by name and parameter types. @param targetClass the class containing the method @param methodName the name of the method @param argClasses the parameter types of the method @return this Builder instance
867 Attempts to find and bind a hidden method by name and parameters. @param targetClass the class containing the method @param methodName the name of the method @param argClasses the parameter types of the method @return this Builder instance for chaining or modification
868 Creates a NOOP unbound method. @param name method name to be used @return UnboundMethod instance set to NOOP
869 Checks if all provided dynamic methods are implemented. @param methods variable number of UnboundMethod instances to check @return true if none of the methods are NOOP, false otherwise
870 Checks if a dynamic method is not NOOP. @param method unbound method to check @return true if the method is not NOOP, false otherwise
871 Binds the unbound method to a target object. @param receiver object to which the method will be bound @return BoundMethod instance representing the bound method
872 Converts the unbound method to a static method. Validates that the method is static before conversion. @return StaticMethod instance representing the static version of this method
873 Finds the JAR file containing the specified class. @param clazz Class to search for @return Path to the JAR file or null if not found
874 Finds the file location of a specified class. @param clazz Class to locate @return File path or null if not found
875 Writes checksum value to output stream. @param out DataOutputStream to write to @param reset flag to reset checksum after writing @return size of written data or 0 if no data written
876 Writes checksum value to buffer. @param buf byte array to write checksum into @param offset starting index in the buffer @param reset flag to reset checksum after writing @return size of written data or 0 if no data written @throws IOException on unknown checksum type
877 Creates a rate limiting instance based on capacity. @param capacity the maximum number of requests allowed; 0 for unlimited @return RateLimiting object, either unrestricted or limited by capacity
878 Registers UNIX signal handlers for TERM, HUP, and INT. @param log the logger for recording registration events @throws IllegalStateException if handlers are already registered
879 Initializes a LightWeightGSet with a specified capacity. @param recommended_length desired initial capacity
880 Deprecated method to populate include and exclude sets with host details. @param includes set to add included hosts @param excludes set to add excluded hosts
881 Populates provided sets and map with host details. @param includeHosts set to add included host names @param excludeHosts map to update with excluded hosts and their counts
882 Computes hash value using Jenkins hashing algorithm. @param key byte array to hash @param nbytes number of bytes to process @param initval initial hash value @return computed hash value
883 Returns a Hash instance based on the specified type. @param type hash algorithm type (JENKINS_HASH or MURMUR_HASH) @return Hash instance or null if invalid type
884 Protected constructor to prevent instantiation from outside the class.
885 Protected constructor to prevent instantiation from outside the class.
886 Default constructor; initializes an empty DynamicBloomFilter.
887 Computes multiple hash values for a given key. @param k the input key @return array of computed hash values
888 Constructs an AutoCloseableLock using a new ReentrantLock.
889 Releases the lock when this resource is closed.
890 Prints an error message and stack trace. @param e exception to log @param text format string for the error message @param args arguments to be formatted into the string
891 Logs an error message with a code and description. @param errorcode numeric error code @param text descriptive error message
892 Logs class loading details. @param name class name @param clazz loaded Class object
893 Returns a thread-safe copy of the latest GC data. @return a new GcData object with current metric values
894 Initializes a new CRC32 calculator and resets its value.
895 Executes all registered shutdown hooks in order. @return Number of hooks that timed out during execution
896 Adds an element to the PriorityQueue. @param element the element to be added
897 Removes and returns the highest priority element. @return top element or null if queue is empty
898 Adjusts the top element of the priority queue to maintain heap property.
899 Creates a HashSet from an iterator of elements. @param elements iterator providing the elements for the set @return a new HashSet containing all elements from the iterator
900 Creates a new HashSet with an estimated size. @param expectedSize anticipated number of elements @return HashSet initialized with calculated capacity
901 Skips the sequence to a specified new value. @param newValue target value to skip to @throws IllegalStateException if newValue is less than current value
902 Constructs and returns a TableListing object. @return fully configured TableListing instance based on builder settings
903 Checks if a configuration key is deprecated. @param key the configuration key to check @return true if the key is deprecated, false otherwise
904 Checks if a deprecated configuration key has been warned. @param name the configuration key to check @return true if the key has been accessed and warned, false otherwise
905 Reloads all registered configurations. Iterates through the registry and calls reloadConfiguration on each.
906 Adds a default resource to the configuration. @param name name of the resource to add
907 Parses and converts a time duration string. @param name configuration property name @param vStr input time duration string @param defaultUnit default time unit if not specified @param returnUnit target time unit for conversion @return converted time duration in the target unit
908 Retrieves all properties associated with a list of tags. @param tagList list of configuration tags to filter properties by @return Properties object containing all matching properties from specified tags
909 Redacts sensitive configuration values. @param key the configuration key to check @param value the configuration value to potentially redact @return redacted value if key is sensitive, otherwise original value
910 Redacts XML value if configuration key is sensitive. @param key the configuration key @param value the configuration value as XML string @return redacted XML or original value if not sensitive
911 Starts a reconfiguration task if none is running and the server is active. @throws IOException if the server is stopped or another task is in progress
912 Creates a new DeprecationContext by merging another context with deltas. @param other the original DeprecationContext to merge from @param deltas array of DeprecationDelta objects representing changes
913 Constructs a ReconfigurationException with detailed error message. @param property name of the property being changed @param newVal new value attempted for the property @param oldVal old value of the property before change attempt @param cause underlying Throwable causing the exception
914 Constructs a ReconfigurationException with detailed error message. @param property name of the property being changed @param newVal new value attempted for the property @param oldVal old value of the property before change attempt
915 Checks if manual HA state management is allowed. @param target the HA service target to check @return true if manual management is permitted, false otherwise
916 Executes a command on a remote server via SSH. @param session established SSH session @param cmd command to execute on the remote server @return exit status of the executed command @throws JSchException if there is an error in executing the command @throws InterruptedException if the current thread is interrupted while waiting for command execution to complete @throws IOException if there is an I/O error during command execution
917 Checks if the service is eligible for failover. Throws ServiceFailedException if not healthy or in observer state.
918 Reads data from a file range into a direct ByteBuffer. Validates the range and uses an operation to fetch data in chunks. @param range the FileRange specifying the file section to read @param buffer the ByteBuffer to store the read data @param operation a function to perform the actual reading @throws IOException if an I/O error occurs during reading
919 Validates and sorts a list of file ranges. @param input list of FileRange objects to process @param fileLength optional total file length for validation @return sorted list of validated FileRange objects
920 Initializes the BlockManager with block data. @param blockData the block data to manage
921 Releases BufferData by ensuring it is not null. @param data the BufferData to release
922 Releases a resource back to the pool. @param item the resource to release @throws IllegalArgumentException if the item is not part of this pool @throws IllegalStateException if the release operation blocks
923 Throws an exception if the current buffer state is not one of the specified valid states. @param states variable number of valid states to check against
924 Validates that a string is neither null nor empty. @param arg the string to validate @param argName name of the argument for error messages
925 Validates that a collection is not null and contains the specified number of elements. @param collection the collection to check @param numElements expected number of elements in the collection @param argName name of the argument for error messages
926 Validates that a given file path exists. @param path the Path to validate @param argName name of the argument for error message
927 Initializes a resource pool with a specified size. @param size maximum number of resources in the pool
928 Initializes a BufferPool with specified size and buffer size. Validates input sizes, initializes buffers, and sets up resource pool. @param size number of buffers in the pool @param bufferSize size of each buffer @param prefetchingStatistics statistics for tracking memory allocation
929 Requests prefetch of a specific block. @param blockNumber the block number to prefetch
930 Constructs a BufferData instance. @param blockNumber the block number for the data buffer @param buffer the ByteBuffer containing the data
931 Initializes a Retryer with specified delays and intervals. @param perRetryDelay delay between retries, must be positive @param maxDelay maximum delay for retries, must be greater than perRetryDelay @param statusUpdateInterval interval for updating retry status, must be positive
932 Validates that an array is not null and contains at least one element. @param array the array to validate @param argName name of the array parameter for error messages
933 Validates that an object is not null and contains at least one element. @param array the byte array to validate @param argName name of the argument for error messages
934 Validates that an array is not null and contains at least one element. @param array the array to validate @param argName name of the argument for error messages
935 Validates that an array is not null and contains at least one element. @param array the array to validate @param argName name of the array parameter for error messages
936 Validates that an array is not null and contains at least one element. @param array the array to validate @param argName name of the array parameter for error messages
937 Validates that an iterable is not null and contains at least one element. @param iter the iterable to validate @param argName name of the argument for error messages
938 Performs bulk deletion of specified paths. @param paths collection of file system paths to delete @return list of path-error pairs for any failed deletions
939 Applies a function to an IOStatisticsSnapshot. @param source the source of the snapshot @param fun the function to apply @return result of applying the function
940 Initializes a FlagSet with specified enum class, prefix, and optional flags. @param enumClass the class of the enum type representing the flags @param prefix the prefix to use for mapping enum names @param flags optional EnumSet of flags; if null, initializes an empty set
941 Closes the FileSystem instance. Logs close operation details and deletes files marked for deletion on exit.
942 Compares this file status to another based on their paths. Delegates comparison to the overloaded compareTo method. @param o the other object to compare with @return negative if less, zero if equal, positive if greater
943 Compares this file status to another based on their paths. @param o the other FileStatus object to compare with @return negative if less, zero if equal, positive if greater
944 Converts FileStatus array to Path array or wraps given path. @param stats array of FileStatus objects @param path fallback Path if stats is null @return array of Path objects or single-element array with path
945 Checks if the file system supports a specific path capability. @param path file system path to check @param capability capability string to verify @return true if read-only connector capability is supported, false otherwise
946 Creates a JSON serialization instance for IOStatisticsSnapshot. @return JsonSerialization object configured to handle IOStatisticsSnapshot
947 Publishes I/O statistics as storage statistics. @param name unique identifier for the storage statistics @param scheme storage protocol or scheme @param source IOStatistics instance to track @return StorageStatisticsFromIOStatistics object encapsulating I/O stats
948 Retrieves storage statistics. @return StorageStatistics object representing current storage stats
949 Constructs a new PathIsDirectoryException. @param path the file path where the exception occurred
950 Constructs a PathIsNotDirectoryException indicating a non-directory path. @param path the file path that is not a directory
951 Constructs a new PathOperationException with specified path and default error message. @param path the file path where the exception occurred
952 Constructs an exception indicating a non-empty directory. @param path the file path of the non-empty directory
953 Sets the buffer size for the output stream. @param bufSize desired buffer size in bytes @return the builder object itself
954 Sets the replication factor for the output stream. @param replica desired replication factor @return the builder object itself
955 Sets the block size for the output stream. @param blkSize desired block size in bytes @return the builder object itself
956 Enables recursive mode for file operations. @return the builder object itself
957 Sets flag to create a new file. @return the builder object itself
958 Sets the overwrite flag for the output stream. @param overwrite true to enable overwriting, false otherwise @return this builder instance
959 Enables appending mode for the output stream. @return the builder object itself
960 Sets the block's hosts. @param hosts array of host names @throws IOException if an I/O error occurs
961 Sets the cached hosts for the block location. @param cachedHosts array of hostnames where the block is cached
962 Sets the block's host names. @param names array of host names
963 Sets the topology paths for block location. @param topologyPaths array of network paths
964 Checks if the specified path represents a regular file. @param f Path to check @return true if the path is a regular file, false otherwise
965 Wraps an IO exception with a custom message or as a PathIOException. @param path file path where the exception occurred @param methodName method name where the exception was thrown @param exception original IO exception to wrap @return wrapped IOException with detailed context
966 Synchronizes the reader to a specified position within a sequence file. @param position target position for synchronization @throws IOException if an I/O error occurs or checksum fails
967 Resets the data reader to the initial position. @throws IOException if an I/O error occurs during seek operation
968 Registers all expression classes with the given factory. @param factory ExpressionFactory instance to register expressions with
969 Registers a comprehensive set of file system commands. @param factory CommandFactory instance used for registration
970 Expands a file pattern into a list of file paths. @param filePattern the input file pattern string @return List of fully resolved file paths @throws IOException for illegal patterns
971 Lists file statuses matching a filter. @param f directory path to list @param filter criteria to select files @return array of FileStatus objects @throws FileNotFoundException if the directory does not exist @throws IOException on input/output errors
972 Lists file statuses for multiple paths matching a filter. @param files array of directory paths to list @param filter criteria to select files @return array of FileStatus objects or empty if none match @throws FileNotFoundException if any path does not exist @throws IOException on input/output errors
973 Retrieves a delegation token for secure web service access. @param url target URL requiring authentication @param token initial token object @param renewer user allowed to renew the token @return updated delegation token or null if retrieval fails @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
974 Renews a delegation token for secure web service access. @param url the target URL requiring authentication @param token the Token object containing the delegation token @return the expiration time of the renewed token @throws IOException if an I/O error occurs during renewal @throws AuthenticationException if authentication fails
975 Cancels a delegation token for secure URL access. @param url target URL requiring authentication @param token Token object containing the delegation token to cancel @throws IOException if an I/O error occurs during cancellation
976 Constructs a FileEncryptionInfo object with specified parameters. Validates that none of the inputs are null and checks IV length. @param suite CipherSuite for encryption @param version CryptoProtocolVersion used @param edek Encrypted data encryption key @param iv Initialization vector @param keyName Name of the encryption key @param ezKeyVersionName Version name of the EZ Key
977 Sets file system permissions. @param perm file permissions to set @return this builder instance for method chaining
978 Sets the checksum option for multipart uploads. @param chksumOpt checksum option to be configured @return current builder instance for method chaining
979 Constructs a WrappedIOException with the specified cause. @param cause the original IOException to be wrapped
980 Constructs a new FsLinkResolution instance. @param fn the function to process filesystem links
981 Constructs a new GlobBuilder with the given FileContext. @param fc the FileContext to use for filesystem operations
982 Constructs a new GlobBuilder instance. @param fs FileSystem object to be used, must not be null
983 Sets file permissions. @param perm file system permissions to apply @return the builder instance for method chaining
984 Sets the progress tracker for the output stream. @param prog Progressable object to track progress @return this builder instance
985 Sets checksum option for output stream. @param chksumOpt checksum option to apply @return the builder instance with updated checksum option
986 Validates arguments for a write operation. @param b byte array to write @param off offset in the array @param len number of bytes to write @throws IOException if validation fails
987 Compares two strings for equality, ignoring case. @param s1 first string to compare @param s2 second string to compare (can be null) @return true if both strings are equal, ignoring case; false otherwise
988 Checks if the provided ZooKeeper client context is stale. @param ctx the ZooKeeper client context to check @return true if the context is stale, false otherwise
989 Retrieves or creates statistics for a given file system scheme. @param scheme file system scheme (e.g., hdfs) @param cls FileSystem class type @return Statistics object associated with the scheme @deprecated Use alternative method for better performance
990 Copies bytes from an input stream to an output stream with optional closing. @param in InputStream to read from @param out OutputStream to write to @param buffSize buffer size for data transfer @param close flag indicating whether to close streams after copying @throws IOException if an I/O error occurs
991 Copies a specified number of bytes from an InputStream to an OutputStream. @param in the source InputStream @param out the destination OutputStream @param count the number of bytes to copy @param close whether to close streams after copying @throws IOException if an I/O error occurs
992 Performs disk I/O checks on a directory. @param dir directory to check @throws DiskErrorException if directory check fails
993 Checks if any storage type quota is set. @return true if at least one quota for supported types is greater than zero, otherwise false
994 Checks if any storage type supporting quotas has consumed space. @return true if at least one supported storage type has non-zero consumption, false otherwise
995 Overrides equals to compare file paths. @param o object to compare with @return true if paths are equal, false otherwise
996 Generates hash code based on file's path. Overrides superclass implementation to ensure consistent hashing. @return integer hash code of the path
997 Resets sample count and sum to zero.
998 Copies statistics from another MeanStatistic instance. @param other source MeanStatistic to copy data from
999 Converts I/O statistics to a formatted string. @param statistics IOStatistics object containing performance metrics @return Formatted string representation of the statistics or empty string if null
1000 Converts a map to a sorted string representation and appends it to a StringBuilder. @param sb StringBuilder to append the result to @param type identifier for the map's type @param map input map with string keys and generic values @param isEmpty predicate to determine empty values
1001 Tracks duration of operations with a given key. @param key identifier for the operation @return StubDurationTracker instance for tracking
1002 Retrieves all long statistics from counters and gauges. @return Iterator of LongStatistic objects containing metric names and values
1003 Records a timed operation by updating mean, minimum, and maximum statistics. @param prefix identifier for the statistic category @param durationMillis duration of the operation in milliseconds
1004 Builds and retrieves the current dynamic I/O statistics. Finalizes the statistics collection by stopping further modifications. @return IOStatistics instance containing collected metrics
1005 Adds a long function counter to the builder. @param key unique identifier for the counter @param eval function that computes the count value as a long @return current DynamicIOStatisticsBuilder instance
1006 Adds a long function gauge to the builder. @param key unique identifier for the gauge @param eval function that computes the long metric value @return the current DynamicIOStatisticsBuilder instance
1007 Adds a long function to calculate minimum values. @param key unique identifier for the evaluator @param eval function that performs the evaluation @return the current DynamicIOStatisticsBuilder instance
1008 Adds a long function to calculate and store the maximum value. @param key unique identifier for the function @param eval function that computes the maximum value @return the current DynamicIOStatisticsBuilder instance
1009 Adds a mean statistic function to the builder. @param key unique identifier for the statistic @param eval function that computes the mean @return the current DynamicIOStatisticsBuilder instance
1010 Registers an interrupt handler for a specified signal. @param signalName name of the signal to handle
1011 Creates a snapshot of the current map with value transformation. @return ConcurrentHashMap containing transformed entries from this map
1012 Creates a snapshot of the input map without modifying values. @param source original map to snapshot @return ConcurrentHashMap containing unchanged entries from the source map
1013 Creates and returns a new instance of IOStatisticsSnapshot. This method initializes an empty statistics snapshot without actual data.
1014 Constructs an IOStatisticsContextImpl with given thread and ID. @param threadId unique identifier for the thread @param id unique identifier for the context
1015 Creates and returns an I/O statistics snapshot. @return IOStatisticsSnapshot instance containing current I/O stats
1016 Checks if thread-level I/O statistics are enabled. @return true if enabled, false otherwise
1017 Retrieves I/O statistics from the underlying output stream. @return IOStatistics object containing I/O metrics, or null if unavailable
1018 Retrieves I/O statistics from the underlying input stream. @return IOStatistics object containing performance metrics or null if not available
1019 Retrieves I/O statistics for data. @return IOStatistics object containing I/O stats, or null if not available
1020 Retrieves I/O statistics from data source. @return IOStatistics object containing I/O metrics
1021 Retrieves I/O statistics for the input stream. @return IOStatistics object containing I/O metrics or null if not available
1022 Retrieves I/O statistics from the wrapped stream. @return IOStatistics object or null if not found
1023 Retrieves I/O statistics from the underlying output stream. @return IOStatistics object containing I/O metrics
1024 Retrieves I/O statistics from the underlying input stream. @return IOStatistics object containing I/O stats, or null if not available
1025 Retrieves I/O statistics from the input stream. @return IOStatistics object containing I/O stats or null if not available
1026 Verifies checksums for chunked data. @param type checksum type @param algorithm used for checksum calculation @param data byte array containing data to verify @param dataOffset start offset in the data array @param dataLength length of data to verify @param bytesPerCrc number of bytes per CRC chunk @param crcs byte array containing expected CRC values @param crcsOffset start offset in the CRC array @param filename file being validated @param basePos base position in the file @throws ChecksumException if checksum mismatch occurs
1027 Updates the decryptor with new IV based on stream position. @param decryptor the Decryptor instance to update @param position current stream position @param iv initialization vector array @throws IOException if an I/O error occurs
1028 Encrypts data from input buffer and writes to output stream. Handles padding, ensures data integrity, and updates encryption context. @throws IOException if an I/O error occurs during encryption or writing
1029 Constructs a new MD5MD5CRC32FileChecksum with default values.
1030 Constructs a default file checksum with no CRC or MD5 data.
1031 Constructs a GlobPattern object by compiling a given glob pattern. @param globPattern the glob pattern to compile and use
1032 Generates a shell path for a given file. @param file the File object to process @return the shell path as a string @throws IOException if an I/O error occurs
1033 Generates a secure shell path for a given file. @param file the File object to process @return the secure shell path as a string @throws IOException if an I/O error occurs
1034 Unzips files from an input stream to a specified directory. @param inputStream source of the zip archive @param toDir target directory for extracted files @throws IOException if an I/O error occurs during extraction
1035 Unzips a file to a specified directory. @param inFile the ZIP file to be unzipped @param unzipDir the target directory for extraction @throws IOException if an I/O error occurs during the process
1036 Disconnects an SFTP channel and returns it to the pool. @param channel ChannelSftp instance to be disconnected @throws IOException if disconnection fails
1037 Shuts down the SFTP connection pool. Disconnects all active connections and clears resource maps.
1038 Sets the buffer size for checksum calculation. @param size desired buffer size in bytes
1039 Constructs a deep copy of the given Statistics object. @param other the original Statistics object to be copied
1040 Retrieves total bytes read across all file system operations. @return Sum of bytes read from all statistics data
1041 Retrieves total bytes written across all file system operations. @return Sum of bytes written by all threads
1042 Retrieves the total number of read operations. @return Sum of all read operations across threads
1043 Retrieves the total number of large read operations. @return Total count of large read operations across all threads
1044 Retrieves total write operations. Uses a visitor to sum up write operations across all statistics. @return Total number of write operations
1045 Retrieves total remote read time across all file system operations. @return Total remote read time in milliseconds
1046 Aggregates and returns all collected statistics. @return Aggregated StatisticsData object containing combined metrics
1047 Calculates total bytes read using erasure coding. @return Total bytes read via erasure coding across all threads
1048 Resets statistics by negating and adding to root data. Uses a StatisticsAggregator to process all collected stats.
1049 Validates file creation flags for Hadoop operations. @param path the file path to be validated @param pathExists whether the file already exists @param flag set of CreateFlag options @throws IOException if validation fails or invalid configuration
1050 Validates flags for appending to a file. @param flag set of CreateFlag options @throws HadoopIllegalArgumentException if flags are invalid or do not include APPEND
1051 Validates and constructs a URI with the specified scheme. @param uri original URI to validate and modify @param supportedScheme expected scheme for the URI @param authorityNeeded flag indicating if authority is required @param defaultPort default port to use if not specified in URI @return validated and constructed URI @throws URISyntaxException if URI construction fails
1052 Constructs an ArrayPrimitiveWritable with a specified component type. @param componentType the class representing the primitive component type
1053 Converts a permission string to an integer bitmask. @param permString string representing permissions ('r', 'w', 'c', 'd', 'a') @return integer bitmask of ZooKeeper permissions @throws BadAclFormatException if invalid character is found in permString
1054 Processes and returns a configured ChecksumOpt instance. @param defaultOpt default checksum options @param userOpt user-defined checksum options @return configured ChecksumOpt based on provided parameters
1055 Retrieves and returns the canonicalized URI of the current file system. @return canonicalized URI with default port if necessary
1056 Deprecated constructor for initializing ContentSummary. @param length total length of files in bytes @param fileCount number of files @param directoryCount number of directories
1057 Retrieves file status without specifying a path. @return FsStatus object representing storage information @throws IOException if an I/O error occurs
1058 Constructs an HttpReferrerAuditHeader using a Builder. Initializes attributes and ensures necessary fields are set.
1059 Releases a BufferData object back to the pool. @param data the BufferData to release @throws IllegalArgumentException if the buffer cannot be released
1060 Constructs a SemaphoredDelegatingExecutor with specified parameters. @param executorDelegatee the underlying ExecutorService for task execution @param permitCount maximum number of concurrent tasks allowed @param fair true if semaphore should be fair, false otherwise
1061 Releases the READY buffer closest to the specified block number. @param blockNumber target block number for proximity calculation
1062 Returns the relative position of the buffer. @return current position within the buffer
1063 Checks if a position is within the current buffer. @param pos file offset to check @return true if position is within buffer, false otherwise
1064 Returns the start offset of the buffer in the file. Validates the buffer before returning its start offset. @return Start offset of the buffer
1065 Retrieves the current IO statistics context. @return IOStatisticsContext for the current thread or an empty context if disabled
1066 Sets or removes IO statistics context for the current thread. @param statisticsContext context to set, or null to remove existing
1067 Merges sorted file ranges into combined ranges. @param sortedRanges list of pre-sorted FileRange objects @param chunkSize size of each data chunk @param minimumSeek minimum seek distance required for merging @param maxSize maximum size allowed after merging @return list of CombinedFileRange objects representing merged ranges
1068 Finds checksum ranges for given data ranges. @param dataRanges list of file ranges to process @param bytesPerSum number of bytes per checksum @param minSeek minimum seek distance required for merging @param maxSize maximum size allowed after merging @return list of CombinedFileRange objects representing checksum ranges
1069 Constructs a case-sensitive Name object.
1070 Applies logical AND operation on child expressions. @param item current PathData to evaluate @param depth recursion depth (not used) @return Result indicating combined success of all children
1071 Retrieves FindOptions for file search operations. Initializes options if not already created. @return FindOptions object with configured settings
1072 Parses command-line arguments and validates options. @param args list of command-line arguments
1073 Returns command description. Handles deprecated commands by indicating replacement. @return Description string, prefixed with "(DEPRECATED)" if applicable
1074 Displays a warning message prefixed with the command name. @param message the warning message to be displayed
1075 Generates the command usage string. @return Command usage including name and optional additional usage info
1076 Initializes ACL entries with a pivot index. @param aclEntries list of ACL entries to process
1077 Prints table data to a specified print stream. @param out PrintStream to output the formatted table
1078 Creates a new location instance with specified change allowance. @param allow indicates if changes to the location are permitted @return Location object configured with the given change allowance
1079 Creates and returns a Data object with specified change allowance. @param allow flag indicating if changes are allowed @return Data object configured with the change allowance setting
1080 Default constructor initializes shell with no execution interval.
1081 Generates a delegation token for secure authentication. @param dToken input delegation token @return Token object configured with details from dToken
1082 Lists file statuses with locations for a given path. @param f the directory to list files from @return iterator of LocatedFileStatus objects @throws FileNotFoundException if the path does not exist @throws IOException on input/output errors
1083 Opens a file with specified options. @param path file path to open @param parameters configuration parameters for opening the file @return CompletableFuture containing FSDataInputStream or exception @throws IOException if an I/O error occurs
1084 Retrieves the fallback file system. @return FileSystem object or null if retrieval fails
1085 Updates the encryption or decryption operation with new data. Validates that buffers are direct and context is initialized. @param input ByteBuffer containing source data @param output ByteBuffer to store result @return number of bytes processed @throws ShortBufferException if output buffer is too small
1086 Completes the encryption or decryption process. @param output direct ByteBuffer to hold the result @return number of bytes processed @throws ShortBufferException if output buffer is too small @throws IllegalBlockSizeException if data block size is incorrect @throws BadPaddingException if padding is invalid
1087 Creates a RegexMountPointInterceptor from settings string. @param interceptorSettingsString configuration for the interceptor @return configured RegexMountPointInterceptor or null if invalid
1088 Normalizes a file system path. @param scheme URI scheme or null @param path original file system path @return normalized path with slashes and backslashes handled
1089 Checks if a given path is an absolute Windows path. @param pathString the file system path to evaluate @param slashed whether the path uses forward slashes @return true if the path is an absolute Windows path, false otherwise
1090 Checks if the URI path is absolute. @return true if the path is absolute, false otherwise
1091 Computes a hash for a given HAR file path. @param p Path object representing the HAR file @return Hash code as an integer, ensuring non-negative value
1092 Validates that the given path is within the base directory. @param path the file path to validate
1093 Finds the next available ID for log file creation. @param initial base path for log files @param lastId last used ID @return next available ID to use @throws IOException if file listing fails
1094 Skips forward by 'n' bytes in the input stream. Adjusts position based on current location and skips value. @param n number of bytes to skip @return actual number of bytes skipped @throws IOException if an I/O error occurs
1095 Reads data from an InputStream into a ByteBuffer using a pool. @param stream input stream to read from @param bufferPool pool for managing ByteBuffers @param maxLength maximum length of data to read @return ByteBuffer containing the read data or null if unsuccessful @throws IOException if an I/O error occurs during reading
1096 Resets audit context by clearing entries and reinitializing.
1097 Creates and initializes a new CommonAuditContext instance. @return A fully initialized CommonAuditContext object
1098 Constructs an FsPermission object with specified actions. @param u action permissions for the user @param g action permissions for the group @param o action permissions for others
1099 Constructs an FsPermission object from a short integer representation. @param mode short representation of file permissions
1100 Reads file permissions from a DataInput stream. @param in input stream containing permission data @return FsPermission object representing the read permissions
1101 Retrieves effective permission for an ACL entry. @param entry the ACL entry to evaluate @return FsAction representing effective permissions
1102 Creates an immutable PermissionStatus object. @param user username associated with the permission status @param group group name associated with the permission status @param permission FsPermission object representing file permissions @return Immutable PermissionStatus instance
1103 Parses an ACL specification string into a list of AclEntry objects. @param aclSpec the ACL specification string @param includePermission whether to include permission in parsing @return List of AclEntry objects or throws IllegalArgumentException for invalid input
1104 Creates an instance of FsCreateModes with specified masked and unmasked permissions. @param masked the masked file permission settings @param unmasked the unmasked file permission settings @return a new FsCreateModes object
1105 Prints extended ACL entries with their permissions and effective permissions. @param aclStatus status of the ACL for a file or directory @param fsPerm file system permissions @param entry specific ACL entry to print
1106 Splits a string into an array of substrings using a comma delimiter. @param str the input string to split @return an array of substrings or null if no substrings are found
1107 Returns current position in the ByteBuffer. @return integer representing the current position
1108 Checks if there are remaining bytes to read. @return true if bytes remain, false otherwise
1109 Initiates data block upload. Transitions block to Writing state and logs the start of upload. @return BlockUploadData object (currently returns null) @throws IOException if an I/O error occurs during state transition
1110 Transitions the data block to a closed state. @return true if successfully transitioned, false if already in closed state
1111 Ensures data block is in writing state before proceeding. Overrides parent flush to also flush underlying output stream. @throws IOException if an I/O error occurs during verification or flushing
1112 Retrieves statistics for a given URI. @param uri input URI to extract scheme and base URI from @return Statistics object associated with the base URI
1113 Retrieves the index of the current directory for file operations. @param contextCfgItemName configuration item name for the context @return Index of the current directory in the specified context
1114 Writes a synchronization marker to the output stream if position has changed. @throws IOException if an I/O error occurs
1115 Returns the current length of the output stream. @return The current position in the file as a long value.
1116 Calculates the current position in the output stream. @return The sum of the file position and buffer size as a long value.
1117 Retrieves content summary for a specified path. @param f Path to the file or directory @return ContentSummary object with aggregated details
1118 Builds access control lists from user and group strings. @param userGroupStrings array containing user and group definitions
1119 Parses a string into an EnumSet of the specified enum type. @param key unique identifier for the configuration setting @param valueString comma-separated string of enum values @param enumClass class of the enum type @param ignoreUnknown flag to ignore unknown values @return EnumSet containing parsed enum constants
1120 Ensures the current service state matches the expected state. @param expectedState the required state for the operation @throws ServiceStateException if the current state does not match
1121 Constructs an AbstractService with a specified name. Initializes the service state model. @param name unique identifier for the service
1122 Validates and enforces service state transitions. @param name Name of the service @param state Current service state @param proposed Proposed new service state Throws ServiceStateException if transition is invalid
1123 Handles service creation failure by throwing a ServiceLaunchException. @param exception the underlying exception that caused the failure @return a ServiceLaunchException with a specific exit code and cause
1124 Verifies existence of configuration files. @param filenames array of configuration file paths
1125 Converts a Throwable to an ExitUtil.ExitException. @param thrown the original exception @return ExitUtil.ExitException with appropriate exit code and message
1126 Constructs a shutdown hook for the specified Hadoop service. @param service the service to be managed during shutdown
1127 Records and logs a service failure. @param exception the exception causing the failure
1128 Records a lifecycle event with the current time and service state.
1129 Stops services in reverse order of their start. @param numOfServicesStarted number of services that have been started @param stopOnlyStartedServices flag to determine if only started services should be stopped
1130 Stops a service quietly using the default logger. @param service the Service instance to stop @return caught Exception or null if successful
1131 Compares this UTF8 string with another. @param o other UTF8 object to compare @return negative if less, zero if equal, positive if greater
1132 Checks equality of two UTF8 objects. @param o object to compare with @return true if both have same length and content, false otherwise
1133 Compares this MD5 hash with another. @param that other MD5Hash to compare @return negative if less, zero if equal, positive if greater
1134 Compares this binary object with another. @param other the BinaryComparable to compare against @return negative if less, zero if equal, positive if greater
1135 Compares this binary data with another byte array. @param other the byte array to compare against @param off starting index in the other array @param len length of bytes to compare @return negative if less, zero if equal, positive if greater
1136 Generates hash code for binary data. Uses WritableComparator to compute hash based on byte array and length.
1137 Reads a double from a byte array. @param bytes source byte array @param start starting index of the double in the array @return the double value read
1138 Sets the size of the byte array. @param size desired new size
1139 Checks if a file is readable. @param f the File object to check @return true if the file is readable, false otherwise
1140 Checks if a file is writable. @param f the file to check @return true if the file is writable, false otherwise
1141 Checks if the specified file is executable. @param f the file to check @return true if the file is executable, false otherwise
1142 Returns the singleton instance of ReadaheadPool. Initializes if not already created and native I/O is available. @return ReadaheadPool instance or null if initialization fails
1143 Retrieves the memory lock limit. @return memory lock limit in bytes, or 0 if native I/O is unavailable
1144 Calculates chunked checksums for data. Uses native CRC32 if available, otherwise falls back to Java implementation. @param data input byte array containing data to checksum @param dataOffset starting offset in the data array @param dataLength number of bytes to process from data array @param sums array to store computed checksums @param sumsOffset offset in the sums array
1145 Creates a FileOutputStream for writing to a file with specified permissions. @param f the File object representing the target file @param permissions file permission mode @return FileOutputStream for writing or throws IOException if operation fails
1146 Cleans up the buffer pool by freeing all ByteBuffers.
1147 Frees input and output buffers using BufferCleaner. @param inBuffer input buffer to be freed @param outBuffer output buffer to be freed
1148 Retrieves file status using fstat. @param fd file descriptor @return Stat object containing file information @throws IOException if an I/O error occurs
1149 Retrieves file status information for a given path. @param path the file path to query @return Stat object containing file status details @throws IOException if an I/O error occurs or path is null
1150 Constructs a BoundedByteArrayOutputStream with specified capacity and limit. @param capacity total size of the buffer @param limit maximum number of bytes that can be written
1151 Constructs an EnumSetWritable with specified EnumSet. @param value EnumSet to be wrapped
1152 Writes data from an input stream into the buffer. @param in input stream to read from @param len number of bytes to write @throws IOException if an I/O error occurs
1153 Retrieves the key stream for reading. @return DataInputStream for reading the key data
1154 Decodes a base64-encoded string and reads it into a Writable object. @param obj Writable object to read the decoded data into @param newValue base64-encoded string to decode @throws IOException if an I/O error occurs during decoding or reading
1155 Compares two byte arrays as WritableComparable objects. @param b1 first byte array @param s1 start index of b1 @param l1 length of valid data in b1 @param b2 second byte array @param s2 start index of b2 @param l2 length of valid data in b2 @return result of comparing key1 and key2
1156 Checks if a block group is recoverable. @param blockGroup the ECBlockGroup to check @return true if the group can be recovered, false otherwise
1157 Calculates the total number of erased blocks in a block group. @param blockGroup ECBlockGroup object containing data and parity blocks @return Total count of erased blocks
1158 Identifies indexes of erased blocks in the input array. @param inputBlocks array of ECBlock objects representing data blocks @return array of indexes where blocks are erased
1159 Validates input buffers for decoding. @param buffers array of ByteBuffers to validate
1160 Validates input buffers for decoding. @param buffers array of byte arrays to be validated
1161 Initializes erasure decoding step with input, erased indexes, and output blocks. @param inputBlocks array of input EC blocks @param erasedIndexes indices of erased blocks @param outputBlocks array of output EC blocks @param rawDecoder RawErasureDecoder instance @param rawEncoder RawErasureEncoder instance
1162 Validates decoding parameters. @param inputs array of input elements for decoding @param erasedIndexes indexes of erased elements to be recovered @param outputs array where recovered elements will be stored
1163 Constructs an HHXORErasureEncodingStep instance. @param inputBlocks array of input EC blocks @param outputBlocks array of output EC blocks @param rsRawEncoder Reed-Solomon raw erasure encoder @param xorRawEncoder XOR raw erasure encoder
1164 Validates input and output arrays for encoding. @param inputs array of input data units @param outputs array of output parity units Throws IllegalArgumentException if lengths do not match expected values.
1165 Adds two polynomial arrays in the finite field. @param p first polynomial array @param q second polynomial array @return resulting polynomial array after addition
1166 Multiplies two polynomials in a finite field. @param p coefficients of the first polynomial @param q coefficients of the second polynomial @return coefficients of the resulting polynomial
1167 Performs Gaussian elimination on a matrix in a finite field. @param matrix input matrix with more columns than rows, must be non-null and valid
1168 Dumps contents of multiple ECChunks with a header. @param header descriptive title for the output @param chunks array of ECChunks to dump
1169 Resets all provided ByteBuffers by filling them with empty bytes and restoring their positions. @param buffers array of ByteBuffer objects to reset @param dataLen the length of the empty chunk to fill in each buffer
1170 Converts ECChunk array to ByteBuffer array. Handles null chunks and resets zero-filled buffers. @param chunks array of ECChunk objects @return array of ByteBuffers corresponding to input chunks
1171 Resets output buffers to empty. @param buffers array of byte arrays representing the buffers to reset @param offsets array of starting indices for resetting each buffer @param dataLen number of bytes to reset in each buffer
1172 Returns a singleton instance of GaloisField with default parameters. @return GaloisField object configured with DEFAULT_FIELD_SIZE and DEFAULT_PRIMITIVE_POLYNOMIAL
1173 Initializes a BlockCompressorStream with specified output stream and compressor. @param out underlying output stream for compressed data @param compressor compression algorithm to use @param bufferSize size of the internal buffer @param compressionOverhead overhead per block due to compression
1174 Initializes a new ZStandardDecompressor with a specified buffer size. @param bufferSize size of the direct buffers for compression and decompression
1175 Constructs an Lz4Compressor with default buffer size.
1176 Retrieves the class of a compression codec by its name. @param codecName name of the codec to fetch @return Class instance representing the codec or null if not found
1177 Retrieves a compressor from the pool or creates a new one. @param codec compression codec to use @param conf configuration settings @return compressor instance for use
1178 Retrieves a decompressor from the pool or creates a new one. @param codec compression codec to use for decompression @return Decompressor instance
1179 Returns a compressor to the pool. @param compressor the compressor instance to return
1180 Returns a decompressor to the pool. @param decompressor the decompressor instance to return
1181 Returns the compressor type for ZStandard. Ensures native library is loaded. @return ZStandardCompressor class
1182 Returns the decompressor class type. Ensures native code is loaded before returning. @return ZStandardDecompressor class
1183 Constructs a ZlibCompressor with default settings.
1184 Initializes a ZlibCompressor with settings from Hadoop configuration. @param conf Hadoop configuration object
1185 Reinitializes the compressor with new configuration settings. @param conf Hadoop configuration object containing compression parameters
1186 Processes GZIP header states. Handles basic header, extra field, filename, comment, and header CRC checks. Updates internal state and buffers accordingly.
1187 Writes text data to a DataOutput stream. @param out DataOutput stream to write to @throws IOException if an I/O error occurs
1188 Reads a variable-length integer from the input stream. @param stream DataInput source to read from @return deserialized integer value @throws IOException if an I/O error occurs or value is out of range for int
1189 Reads a variable-length integer within a specified range. @param stream DataInput source to read from @param lower minimum acceptable value @param upper maximum acceptable value @return deserialized integer value within the range @throws IOException if an I/O error occurs or value is out of bounds
1190 Constructs a Text object from a UTF-8 encoded string. @param string input text to be encoded and stored
1191 Searches for a substring within the text. @param what the substring to search for @param start the starting index for the search @return the starting index of the substring if found, otherwise -1
1192 Writes a string to the output stream in UTF-8 format. @param out DataOutput stream to write to @param s the input text to encode and write @return length of the encoded string in bytes @throws IOException if an I/O error occurs during encoding or writing
1193 Writes a string to DataOutput with UTF-8 encoding. @param out DataOutput stream to write to @param s the input text to encode and write @param maxLength maximum allowed byte length of the encoded string @return number of bytes written @throws IOException if writing fails or string exceeds maxLength
1194 Sets the text content from a UTF-8 byte array. @param utf8 source byte array containing UTF-8 encoded data
1195 Sets text content from another Text object. @param other source Text object to copy data from
1196 Reads a line from the input stream with specified length and byte constraints. @param str Text object to store the read line @param maxLineLength maximum length of the line to read @param maxBytesToConsume maximum bytes to consume while reading @return number of bytes consumed, or -1 if end of stream @throws IOException on I/O error
1197 Reads a line with custom delimiter from input stream. @param str Text object to store the read line @param maxLineLength maximum length of the line to read @param maxBytesToConsume maximum bytes to consume @return number of bytes consumed, or -1 if end of stream @throws IOException on I/O error
1198 Constructs a new SortedMapWritable instance. Initializes with an empty TreeMap for key-value storage. @param none @return none
1199 Constructs a new MapWritable instance. Initializes internal storage and registers default writable classes.
1200 Constructs a new Key instance with specified byte array and default weight of 1.0. @param value byte array representing the key
1201 Computes the MD5 hash of a byte array. @param data source byte array @return MD5Hash object containing the computed hash
1202 Computes the MD5 hash of a UTF-8 encoded string. @param utf8 UTF8 object containing the string to hash @return MD5Hash object representing the computed hash
1203 Constructs an MD5Hash object from a hexadecimal string. @param hex 32-character hexadecimal string representing the MD5 hash
1204 Creates a retry policy that retries indefinitely with fixed sleep intervals. @param sleepTime duration to wait between retries @param timeUnit unit of time for sleep duration @return RetryPolicy object configured to retry infinitely
1205 Creates a retry policy with fixed sleep intervals. @param maxRetries maximum number of retry attempts @param sleepTime duration to wait between retries @param timeUnit unit of time for sleep duration @return RetryPolicy object configured with fixed sleep intervals
1206 Creates an exponential backoff retry policy. @param maxRetries maximum number of retries @param sleepTime duration to wait between retries @param timeUnit unit of time for sleep duration @return ExponentialBackoffRetry instance configured with specified parameters
1207 Creates a retry policy with exponential backoff. @param maxRetries maximum number of retries @param sleepTime base duration between retries @param timeUnit unit for sleep duration @return configured RetryPolicy object
1208 Starts timing for write lock acquisition. Records the timestamp when a thread acquires the write lock.
1209 Records the timestamp when a lock is acquired. @param lockAcquireTimestamp set to the current monotonic time in milliseconds
1210 Starts timing for the first read lock acquisition. Records the start time if no other threads hold the lock.
1211 Creates a dynamic proxy with retry capabilities for a specified interface. @param iface Interface to be proxied @param proxyProvider FailoverProxyProvider for managing proxies @param methodNameToPolicyMap Map of method names to their respective retry policies @param defaultPolicy Default retry policy for methods without specific overrides @return Proxy object implementing the specified interface with retry logic
1212 Generates hash code based on the retry strategy. @return Hash code of the wrapped retry policy
1213 Checks equality of two WrapperRetryPolicy instances. @param obj object to compare with @return true if both are equal, false otherwise
1214 Constructs a single IOException from aggregated exceptions. @return Consolidated IOException or null if no exceptions are present
1215 Retrieves supported compression algorithms. @return Array of supported algorithm names
1216 Retrieves the compression name of the current block. @return Name of the compression algorithm used
1217 Reads a UTF-8 encoded string from the input stream. @param in DataInput to read from @return decoded String or null if length is -1 @throws IOException if reading fails
1218 Reads the length of the next data chunk. @throws IOException if reading fails
1219 Creates a comparator for RawComparable objects. @param name type of comparator to create @return Comparator instance or null if unsorted keys
1220 Writes a chunk of data to the output stream. @param chunk byte array containing the data chunk @param offset starting index in the chunk array @param len length of the data to write @param last flag indicating if this is the last chunk @throws IOException if an I/O error occurs
1221 Writes buffered data followed by a new chunk to the output stream. @param data byte array containing the new data chunk @param offset starting position in the data array @param len length of the data to write @throws IOException if an I/O error occurs during writing
1222 Initializes a new encoder with the specified output stream and chunk size. @param out DataOutputStream to write encoded data to @param size Maximum chunk size in bytes @throws IOException if an I/O error occurs during initialization
1223 Returns a comparator for TFile entries if they are sorted. Throws exception if entries are unsorted. @return Comparator for Scanner.Entry objects
1224 Checks if the current location is past or at the end of the TFile. @return true if at or past the end, false otherwise
1225 Retrieves a Location near the specified file offset. @param offset target file position @return Location object with nearest block index or end if not found
1226 Creates and returns a deep copy of this Location object. @return a new Location instance with the same block and record indices
1227 Reads the value into a buffer starting at offset 0. @param buf destination buffer for the value data @return number of bytes read from the value stream @throws IOException if an I/O error occurs
1228 Sets the UTF-8 encoded string and handles potential truncation or buffer resizing. @param string input string to be set
1229 Converts Writable objects to a byte array. @param writables variable number of Writable objects to serialize @return byte array containing serialized data
1230 Converts a UTF-8 string to its byte representation. @param string input string to convert @return byte array representing the UTF-8 encoded string
1231 Writes compressed data to output. @param uncompressedDataBuffer buffer containing raw data @throws IOException if I/O error occurs
1232 Copies the contents of another Writable object into this instance. @param other the source Writable to copy from @throws IllegalArgumentException if source is null or an I/O error occurs
1233 Appends a compressed key-value pair to the sequence file. @param key the key object to append @param val the value object to compress and append @throws IOException if there's an issue with data types or I/O operations
1234 Converts the token to a byte array for serialization. @return byte array representation of the token
1235 Encodes a Writable object to a Base64 string. @param obj the Writable object to encode @return Base64 encoded string representation of the object @throws IOException if an I/O error occurs during encoding
1236 Moves data from output buffer to input buffer.
1237 Calculates the distance between two nodes in a network. @param node1 first Node object @param node2 second Node object @return integer representing the distance or Integer.MAX_VALUE if null input
1238 Retrieves a node by its network location. @param node the source node to get location from @return Node object or null if not found
1239 Retrieves all leaf nodes within a specified scope. @param scope the network location string @return List of Node objects representing leaf nodes or empty list if none found
1240 Counts the number of available nodes within a specified scope, excluding certain nodes. @param scope the hierarchical scope as a string (can start with '~' to exclude) @param excludedNodes collection of nodes to be excluded from counting @return count of available nodes based on the scope and exclusions
1241 Removes a node and updates empty racks. @param node the node to be removed
1242 Sorts nodes by distance from a reader node. @param reader source node for distance calculation @param nodes array of target nodes to sort @param activeLen length of active nodes in the array @param secondarySort optional consumer for secondary sorting @param nonDataNodeReader flag indicating if reader is non-data node
1243 Recommissions a node by adding it back to the network. @param node Node object to be recommissioned
1244 Transfers data from a file channel to the socket output stream. @param fileCh source file channel @param position starting position in the file @param count number of bytes to transfer @throws IOException if an I/O error occurs during transfer
1245 Wraps an IOException with a custom message based on the exception type. @param destHost destination hostname @param destPort destination port number @param localHost local hostname @param localPort local port number @param exception original IOException to wrap @return wrapped IOException with detailed error message
1246 Default constructor for initializing dependency mapping with script configuration.
1247 Constructs a new ScriptBasedMapping with a raw mapping. @param rawMap DNSToSwitchMapping object to be cached
1248 Constructs an InnerNodeImpl from a network path. @param path the input network path string
1249 Constructs an InnerNodeImpl with specified properties. @param name unique node identifier @param location node's location in the network @param parent parent node reference @param level hierarchy level of the node
1250 Sends a kick signal through the first notification socket. Ensures only one kick is sent and logs errors if necessary.
1251 Binds and listens on a Unix domain socket. @param path the Unix domain socket file path @return DomainSocket instance bound to the specified path @throws IOException if an I/O error occurs during binding
1252 Creates a pair of connected anonymous domain sockets. @return an array containing the two connected DomainSocket instances @throws IOException if socket creation fails
1253 Establishes a connection to a Unix domain socket. @param path the Unix domain socket file path @return a connected DomainSocket instance @throws IOException if an I/O error occurs during connection
1254 Sends callback and removes socket entry if closed. @param caller method name initiating the callback @param entries map of socket entries by file descriptor @param fdSet set of file descriptors being monitored @param fd specific file descriptor to process
1255 Closes the domain socket watcher. Ensures proper shutdown by closing notification sockets and joining threads. @throws IOException if an I/O error occurs during closure
1256 Retrieves or creates a SelectorInfo for the given channel. @param channel selectable network channel @return SelectorInfo associated with the channel @throws IOException if an I/O error occurs
1257 Releases a selector info, trims idle selectors, and updates its activity time. @param info SelectorInfo to be released
1258 Retrieves IP addresses for a specified network interface. @param strInterface name of the network interface @return array of IP addresses as strings @throws UnknownHostException if the interface is not found
1259 Retrieves hostnames for a specified network interface. @param strInterface name of the network interface @param nameserver optional nameserver to use for DNS queries @param tryfallbackResolution if true, attempts fallback resolution @return array of hostnames or cached hostname if none found @throws UnknownHostException if no such network interface exists
1260 Constructs LogThrottlingHelper with default Timer. @param minLogPeriodMs minimum time between logs in milliseconds
1261 Records log values with default logger and current monotonic time. @param values variable number of log values to record @return LogAction indicating whether logging should occur
1262 Retrieves and encodes a request parameter by name. @param name the unquoted parameter name @return quoted parameter value or null if not found
1263 Retrieves and encodes the request URL for HTML safety. @return StringBuffer containing the quoted URL
1264 Retrieves and HTML-encodes the server name from the request. @return Encoded server name string
1265 Initializes file monitoring for a single path. @param filePath path of the file to monitor @param onFileChange action to take on file change @param onChangeFailure action to take on failure
1266 Updates or creates a metric record without including tags. @param mr MetricsRecord object containing metric data @return Updated Record object
1267 Consumes an element from the queue and processes it. @param consumer the function to process the dequeued element @throws InterruptedException if interrupted while waiting for data
1268 Consumes all elements in the queue using a provided consumer. @param consumer function to process each element @throws InterruptedException if interrupted while waiting for data
1269 Increments the cache hit counter.
1270 Increments the count of cache clears. Uses incr() to update the metric.
1271 Increments the counter for cache updates.
1272 Increments the counter for client backoff disconnections.
1273 Increments the count of slow RPC calls.
1274 Increments the count of requeued RPC calls.
1275 Increments the count of successful RPC calls.
1276 Writes data from a ByteBuffer to a channel. @param channel target channel for writing @param buffer source buffer containing data to write @return number of bytes written @throws IOException on I/O error
1277 Reads data from a channel into a buffer. @param channel the source readable byte channel @param buffer the destination buffer for reading data @return number of bytes read or -1 if end of stream is reached @throws IOException on I/O error
1278 Records a failed disk check. Increments failure count and updates last failure time.
1279 Fetches group set for a given user and records the operation latency. @param user username of the user @return Set of group names associated with the user @throws IOException if an I/O error occurs while retrieving groups
1280 Shuts down the metrics source. Unregisters the metric source from the MetricsSystem.
1281 Sets quantiles based on predefined intervals and formats. @param ucName upper case metric name prefix @param uvName upper case metric name suffix @param desc description of the metric @param lvName lower case metric name component @param pDecimalFormat formatter for percentile values
1282 Sets quantile metrics for a given description. @param ucName upper-case name prefix @param uvName upper-case value suffix @param desc metric description @param lvName lower-case name part @param df decimal format for percentile display
1283 Initializes MetricsRegistry with a given name. @param name unique identifier for the registry
1284 Creates and caches a metric tag. @param name tag name @param description tag description @param value tag value @return cached MetricsTag object
1285 Initializes a MutableStat with specified metrics and configuration. @param name metric name @param description metric description @param sampleName sample identifier @param valueName value identifier @param extended flag for extended metrics
1286 Adds or updates a metric tag. @param info metric information details @param value tag value associated with the metric @param override flag to allow overriding existing tags @return MetricsRegistry instance for chaining
1287 Adds a new data point to the statistical metrics. @param value new data point to be added
1288 Calculates the standard deviation of RPC processing times. @return Standard deviation of processing times
1289 Inserts a new sample value. @param v the sample value to insert
1290 Takes a snapshot of current quantile values. Flushes buffer, queries each quantile, and returns results. @return Map of Quantile to estimated value or null if no samples
1291 Retrieves top N token real owners based on usage statistics. @param n number of top entries to retrieve @return list of NameValuePair with owner names and their usage counts
1292 Caches netgroups and their users. @param groups list of group names to cache @throws IOException if an I/O error occurs
1293 Returns all tokens associated with the user. @return Unmodifiable collection of tokens managed by this instance
1294 Retrieves groups for a given user. @param user the username to fetch group information for @return unmodifiable list of group names associated with the user @throws IOException if an error occurs during retrieval or no groups are found
1295 Retrieves and returns an unmodifiable set of groups for a given user. @param user the username to fetch group information for @return an unmodifiable set of group names associated with the user @throws IOException if an error occurs during retrieval or no groups are found
1296 Retrieves Unix and netgroup memberships for a user. @param user the username to fetch groups for @return list of group names including both Unix and netgroups @throws IOException if an error occurs during retrieval
1297 Prints an empty line to the output stream or console.
1298 Prints system property value. @param property name of the system property
1299 Prints environment variable value. @param variable name of the environment variable
1300 Dumps file content to console. @param file the file to read and print @throws IOException if an I/O error occurs
1301 Logs an error message with a format. @param category error category @param message error message template @param args arguments for the message template
1302 Logs a warning message with category and formatted details. @param category the category of the warning @param message the warning message format string @param args arguments for the message format
1303 Sets the authentication method for the user. @param authMethod the new authentication method to be set
1304 Writes a single byte to the output stream with SASL wrapping. @param b the byte to be written @throws IOException if I/O error occurs or SASL wrapping fails
1305 Writes data to the output stream with SASL wrapping. @param b buffer containing data to write @throws IOException if I/O error occurs or SASL wrapping fails
1306 Validates a delegation token by checking its existence and expiration. @param identifier unique token identifier @return DelegationTokenInformation object if valid @throws InvalidToken if token is not found or has expired
1307 Sets an external delegation token secret manager. @param secretManager the new secret manager to set
1308 Updates the current master key for delegation token generation. @throws IOException if an I/O error occurs during storage
1309 Constructs a default DelegationKey with null secret key.
1310 Constructs a new DelegationTokenAuthenticatedURL. @param authenticator existing authenticator or null to create a new one @param connConfigurator configuration for HTTP connections
1311 Attempts to renew the delegation token. @return true if renewal is successful, false otherwise @throws IOException if an I/O error occurs during renewal @throws InterruptedException if the operation is interrupted
1312 Reads a single byte from the input stream securely. @return the next byte of data or -1 if end of stream @throws IOException on I/O errors during reading
1313 Reads data from the input stream with SASL authentication. @param b buffer to store read bytes @param off offset in the buffer where reading starts @param len number of bytes to read @return number of bytes read or -1 if end of stream @throws IOException on I/O errors
1314 Authorizes a user based on their identity and remote address. @param user UserGroupInformation object representing the user @param remoteAddress String representation of the user's remote address @throws AuthorizationException if authorization fails or an error occurs
1315 Determines if Hadoop login context is active. @return true if a valid login context exists, false otherwise
1316 Creates a proxy user for executing actions on behalf of another user. @param user username for the proxy @param realUser actual user being proxied @return UserGroupInformation object representing the proxy user
1317 Retrieves the real user or returns self if no real user is set. @param user UserGroupInformation object to check @return Real UserGroupInformation or original user if none
1318 Generates a string representation of the user's authentication details. @return A formatted string including username, auth method, and real user if applicable
1319 Retrieves the authentication method for the real user. If no real user is set, returns the current user's auth method. @return AuthenticationMethod enum indicating the user's auth method
1320 Retrieves the real authentication method for a user. @param ugi UserGroupInformation object representing the user @return AuthenticationMethod enum indicating the user's auth method, resolving proxy if applicable
1321 Constructs an IPC connection context for Hadoop RPC. @param protocol the protocol name @param ugi user group information @param authMethod authentication method used @return IpcConnectionContextProto object configured with user info
1322 Verifies SSL certificate for the given host. @param host hostname to verify against @param session SSLSession containing peer certificates @return true if verification passes, false otherwise
1323 Loads a resource by name. @param name the resource path @return status code (SUCCESS or E_NOT_FOUND)
1324 Initializes a Command object with the provided configuration. @param conf Configuration object to be used
1325 Constructs a CommandFactory with the given configuration. @param conf Configuration object to be used
1326 Constructs an FsShell instance with the specified configuration. @param conf Configuration object to be used for file system operations
1327 Constructs a FindClass instance with the given Hadoop configuration. @param conf Configuration object to be used
1328 Initializes GetGroupsBase with configuration and output stream. @param conf Configuration object for Hadoop settings @param out Stream to direct output
1329 Default constructor initializes Configured with null configuration.
1330 Generates a string representation of the access control list. @return ACL as a comma-separated string of users and groups or '*' if all are allowed
1331 Retrieves the original TGT from the user's private credentials. @return KerberosTicket representing the original TGT or null if not found
1332 Sets SSL configuration for ZooKeeper client using default X509 utility. @param zkClientConfig ZooKeeper client configuration object @param truststoreKeystore keystore and truststore details @throws ConfigurationException if SSL config validation fails
1333 Creates an instance of OpensslCipher with specified transformation and engine. @param transformation cipher transformation string (e.g., AES/CTR/NoPadding) @param engineId optional engine identifier for custom cryptographic operations @return new OpensslCipher object configured with the given parameters @throws NoSuchAlgorithmException if the transformation algorithm is unsupported @throws NoSuchPaddingException if the padding type is invalid
1334 Creates a new key version with specified options. @param name key identifier @param options configuration for key generation @return KeyVersion object representing the created key version @throws NoSuchAlgorithmException if the encryption algorithm is invalid @throws IOException if an I/O error occurs
1335 Rolls a new version of the specified cryptographic key. @param name unique key identifier @return KeyVersion object representing the new key version @throws NoSuchAlgorithmException if the encryption algorithm is invalid @throws IOException if metadata retrieval fails
1336 Adds an element to the call queue. Handles client backoff and server failover scenarios. @param e the element to add @throws InterruptedException if interrupted while adding
1337 Initializes the Writable RPC engine. Registers a protocol engine for handling writable RPC requests.
1338 Starts the stopwatch. @throws IllegalStateException if stopwatch is already running @return this StopWatch instance
1339 Stops the stopwatch and calculates elapsed time. Throws IllegalStateException if already stopped. @return This StopWatch instance for chaining
1340 Returns the elapsed time in nanoseconds. @return Current elapsed time since start or last reset in nanoseconds
1341 Computes fingerprint for an array of Method objects. @param methods array of Method objects to compute fingerprints for @return unique integer fingerprint or null if input is null
1342 Retrieves or computes a protocol signature fingerprint. @param protocol the RPC protocol class @param serverVersion version of the server protocol @return ProtocolSigFingerprint object containing signature and fingerprint
1343 Creates a RemoteException from XML attributes. @param attrs XML attributes containing class and message @return RemoteException instance with extracted class name and message
1344 Retrieves the partial listing of filesystem items. Throws an IOException if an error occurred during listing. @return List of filesystem items or throws exception if present
1345 Adds RPC response time with priority and timing details. @param callName name of the RPC call @param schedulable object containing scheduling information @param details processing details including queue and processing times
1346 Adds an element to the queue at specified priorities. @param priority starting priority level for adding the element @param e the element to add to the queue @param includeLast whether to include the last priority level in consideration @return true if the element was successfully added, false otherwise
1347 Populates response parameters on error. @param t Throwable causing the error @param responseParams ResponseParams to be populated
1348 Constructs a VersionMismatch exception for RPC version discrepancies. @param interfaceName name of the affected interface @param clientVersion client's version number @param serverVersion server's version number
1349 Recomputes the schedule cache with updated priority levels. Uses call costs and identities to determine new priorities.
1350 Computes or retrieves the priority level for an RPC based on identity and cached values. @param identity unique identifier of the RPC caller @return computed priority level as an integer
1351 Computes hash code based on client ID MSB, LSB, and call ID. @return integer hash code for cache entry
1352 Retrieves and advances the current queue index. @return The index of the previously active queue
1353 Retrieves the remote IP address as a string. @return String representation of the remote IP or null if not available
1354 Initializes MachineList with a collection of host entries using default address factory. @param hostEntries list of IP addresses and/or CIDR ranges
1355 Reads and parses memory info from /proc/meminfo.
1356 Retrieves available physical memory size in bytes. @return Total available memory considering free RAM and inactive file size.
1357 Retrieves cumulative CPU time. Reads /proc/stat to update CPU metrics. @return Total accumulated CPU time as a long value
1358 Calculates CPU usage percentage. Reads system stats and adjusts for number of processors. @return CPU usage as a float percentage
1359 Retrieves the percentage of virtual cores used. Reads CPU stats and calculates usage. @return Usage percentage or -1 if unavailable
1360 Stores a key-value pair in the hash store. @param k key object to be stored @param v value object associated with the key
1361 Creates a secure instance of TransformerFactory. Enables secure processing and sets optional security attributes. @return configured TransformerFactory instance @throws TransformerConfigurationException if factory creation fails
1362 Creates a secure instance of SAXTransformerFactory. Enables secure processing feature and sets optional secure attributes. @return configured SAXTransformerFactory @throws TransformerConfigurationException if factory creation fails
1363 Formats storage size. @param size size in bytes @param humanReadable true for human-readable format, false for raw value @return formatted size string or raw size as string
1364 Formats storage size. @param size the size in bytes @param humanReadable true for human-readable format, false for raw number @return formatted size string
1365 Converts a long integer to a human-readable string. @param number the integer to convert @return formatted string representation of the number
1366 Converts bytes to a human-readable string with unit and precision. @param len number of bytes @return formatted string representation (e.g., "1.00 KB")
1367 Adds filesystem usage data to the usages table. @param uri URI of the filesystem @param fsStatus FsStatus object containing capacity and usage info @param mountedOnPath path where the filesystem is mounted
1368 Converts a byte array to a hexadecimal string. @param bytes input byte array @return hexadecimal string representation of the entire byte array
1369 Sorts indexed data using heap sort without progress reporting. @param s sortable data structure @param p start index @param r end index
1370 Handles service termination by invoking ExitUtil's terminate method. @param ee ExitException to manage JVM termination
1371 Exits the JVM with a specified status code and message. @param status exit status code @param message error message to log
1372 Terminates JVM with a specific exit status and cause. Handles both direct and wrapped ExitExceptions. @param status the exit code for termination @param t the Throwable causing the termination @throws ExitException if system exit is disabled
1373 Terminates JVM with specified exit status and message. @param status exit code indicating error nature @param msg error message describing the exception @throws ExitException if system exit is disabled
1374 Initiates JVM shutdown with a specified exit code and throwable. @param status exit code indicating the reason for termination @param t the underlying throwable that caused this exception @throws HaltException if systemHaltDisabled is false
1375 Initiates JVM termination with a specified status and message. @param status exit code indicating the reason for termination @param msg descriptive message about the exception @throws HaltException if systemHaltDisabled is false
1376 Unregisters the service from the shutdown hooks. Handles exceptions during unregistration and logs them.
1377 Creates an ArrayList from an Iterable. @param elements iterable providing the elements for the list @return a new ArrayList containing all elements from the iterable
1378 Creates a LinkedList from an iterable of elements. @param elements source iterable of elements to add @return LinkedList containing all elements from the iterable
1379 Constructs an ACL list from permissions and entries. @param perm file system permissions @param entries existing ACL entries @return constructed ACL list with owner, mask/group, other, and default entries
1380 Creates a new ArrayList with specified elements. @param elements variable number of elements to add @return ArrayList containing the provided elements
1381 Creates an ArrayList with an initial capacity based on the expected size. @param estimatedSize expected number of elements in the list @return ArrayList initialized with computed capacity
1382 Saves a Java object as JSON to a specified file. @param file the destination file for JSON output @param instance the Java object to serialize @throws IOException if writing fails
1383 Initializes a StatisticDurationTracker with given statistics store and key. @param iostats IOStatisticsStore to track operation statistics @param key identifier for the operation being tracked @param count number of operations to increment in statistics
1384 Initializes DurationInfo with logging details. @param log Logger instance for logging messages @param logAtInfo Flag to determine if logging should be at INFO level @param format Format string for the duration text @param args Arguments for the format string
1385 Returns the operation duration as a human-readable string. @return formatted duration in "minutes:seconds.milliseconds"
1386 Creates a new striped CRC composer for given data type. @param type the data checksum type @param bytesPerCrcHint hint for bytes per CRC segment @param stripeLength length of data stripe @return CrcComposer instance configured with appropriate parameters @throws IOException if CRC polynomial retrieval fails
1387 Composes two CRC values using a computed monomial. @param crcA first CRC value @param crcB second CRC value @param lengthB length of data B in bytes @param mod modulus for Galois field operations @return composed CRC value
1388 Completes and returns the CRC digest. Writes remaining CRC value to output stream if any, then resets the stream. @return byte array containing the final CRC digest
1389 Extracts and saves a JAR file to a specified directory. @param inputStream input stream of the JAR file @param toDir target directory for extraction @param name name of the file to save @param unpackRegex regex pattern for files to extract @throws IOException if an I/O error occurs during extraction or saving
1390 Extracts all files from a JAR to a specified directory. @param jarFile the JAR file to extract @param toDir target directory for extraction @throws IOException if an I/O error occurs
1391 Finds the n-th occurrence of a byte in a UTF-8 byte array. @param utf the UTF-8 encoded byte array to search @param b the byte to find @param n the occurrence number to locate @return the index of the n-th occurrence, or -1 if not found
1392 Retrieves or creates a value for the given key using weak references. @param key unique identifier for the value @return the value associated with the key, either existing or newly created
1393 Checks and logs warnings for lock held or wait times exceeding thresholds. @param acquireTime time when the lock was acquired @param releaseTime time when the lock was released @param checkLockHeld flag to determine if checking lock hold time
1394 Appends formatted finish time with optional time difference. @param formattedFinishTime user-friendly formatted end time @param finishTime end time in milliseconds @param startTime start time in milliseconds @return concatenated string with time difference if both times are non-zero
1395 Splits a string into parts using a comma as the separator and considering escape characters. @param str input string to split @return array of split strings or null if input is null
1396 Converts a string to camel case. @param s input string to be converted @return camelCase version of the input string
1397 Escapes a single character in a string. @param str the input string to process @param escapeChar the character used for escaping @param charToEscape the character to be escaped @return escaped string with the specified character replaced
1398 Unescapes a string by removing escape characters for a specific character. @param str the input string to unescape @param escapeChar character used for escaping @param charToEscape character that requires escaping @return unescaped string or throws IllegalArgumentException if invalid
1399 Generates a formatted startup message for a software component. @param classname name of the class being started @param hostname host where the component is running @param args command-line arguments passed to the component @return Startup message as a string
1400 Retrieves the build version information. @return Concatenated version info including version, revision, user, and source checksum
1401 Retrieves the next filtered element from the remote iterator. @return the next matching element @throws IOException if an I/O error occurs while fetching elements @throws NoSuchElementException if no more matching elements are available
1402 Checks if the source iterator has more elements. Handles I/O exceptions by cleaning up resources and rethrowing the exception. Closes the iterator if no more elements are available. @return true if there are more elements, false otherwise
1403 Creates a LazyAutoCloseableReference from a Supplier. @param supplier provides the resource when needed, must not be null @return LazyAutoCloseableReference wrapping the supplied resource
1404 Retrieves the page size for bulk deletion. @param fs FileSystem instance @param path Path to perform bulk delete on @return Page size for bulk operations
1405 Performs bulk deletion of files. @param fs Hadoop FileSystem instance @param base base path for deletion operations @param paths collection of paths to delete @return list of deleted paths with status
1406 Opens a file in a Hadoop FileSystem with specified policies and options. @param fs FileSystem instance @param path Path to the file @param policy read policy for the file @param status FileStatus object or null @param length file length or null @param options additional configuration options @return FSDataInputStream for reading the file
1407 Reads data into a buffer from a specific position in the input stream. @param in InputStream to read from @param position starting position in the stream @param buf ByteBuffer to store the read data
1408 Loads an I/O statistics snapshot from a specified file system path. @param fs the file system where the snapshot is stored @param path the path to the snapshot file @return Serializable object containing the loaded I/O statistics
1409 Converts JSON string to an I/O statistics snapshot. @param json JSON representation of the snapshot @return Serializable I/O statistics snapshot object
1410 Retrieves the lazily initialized object. Converts potential IOExceptions to unchecked versions. @return the lazily initialized object of type T
1411 Creates a Builder to process iterable items concurrently. @param items source of elements to iterate over (cannot be null) @return Builder object for managing task execution
1412 Throws the inner IOException from an ExecutionException. @param e the ExecutionException containing the cause @throws IOException the unwrapped underlying IOException
1413 Awaits and retrieves the result of a future, handling exceptions. @param future the Future to await @return the result of the future @throws InterruptedIOException if interrupted during wait @throws IOException if an I/O error occurs @throws CancellationException if the future is cancelled @throws RuntimeException for other execution errors
1414 Awaits the completion of a future with a timeout. @param future the Future to await @param timeout maximum time to wait @param unit time unit for the timeout @return result of the future if completed within timeout @throws InterruptedIOException if interrupted while waiting @throws IOException if an I/O error occurs during execution @throws CancellationException if the future is cancelled @throws TimeoutException if the future does not complete in time
1415 Throws the inner IOException from a CompletionException. @param e the original CompletionException @throws IOException the unwrapped inner exception
1416 Sets configuration for an object. @param theObject object to configure @param conf configuration object
1417 Retrieves a writable class by its name using configuration. @param name fully qualified class name @param conf Hadoop configuration object @return Class object or throws IOException if not found
1418 Loads a class by name using configuration if available. @param conf Hadoop configuration object, may be null @param className fully qualified class name @return Class object or throws RuntimeException if not found
1419 Retrieves a class by name using configuration. @param name fully qualified class name @return Class object @throws ClassNotFoundException if class is not found
1420 Logs thread information with a specified interval. @param log logger instance for logging @param title title of the thread dump @param minInterval minimum interval in seconds between logs
1421 Logs thread information at a specified interval. @param log logger to output the thread info @param title optional title for the thread dump @param minInterval minimum interval in seconds between logs
1422 Constructs the AbstractFSBuilderImpl with either a path or a path handle, not both. @param optionalPath optional file system path @param optionalPathHandle optional file system path handle
1423 Constructs a new Configuration instance with default settings loaded.
1424 Validates HTTP response status and throws an exception if mismatched. @param conn HttpURLConnection instance representing the HTTP connection @param expectedStatus Expected HTTP status code @throws IOException if response status does not match or error occurs
1425 Creates a CRC32C checksum instance. @return Checksum object using the CRC32C algorithm, falls back to PureJavaCrc32C on failure
1426 Generates command to fetch groups for a user in a Unix environment. @param userName username for which to find groups @return array of command parts suitable for execution
1427 Generates command to fetch group IDs for a user. @param userName the username @return array of strings representing the command and its arguments
1428 Generates command to set file permissions with a specified file. @param perm permission string @param recursive true if applied recursively @param file target file path @return array of command parts including the file
1429 Generates a command to check if a process is alive. @param pid the process ID @return array of strings representing the shell command
1430 Retrieves the canonical path of the Hadoop home directory. @return Canonical path as a String @throws IOException if an I/O error occurs
1431 Retrieves the qualified executable file within the Hadoop bin directory. @param executable name of the executable to find @return canonical File object if found @throws FileNotFoundException if any directory or file is missing or invalid
1432 Adds a new progress phase with equal weightage. @return newly created Progress instance
1433 Adds multiple phases to the progress. @param n number of phases to add
1434 Adds a new phase with specified status and weightage. @param status initial status of the phase @param weightage relative importance of the phase (0-1) @return newly created Progress instance representing the phase
1435 Returns the overall progress of the task. @return float representing the total progress percentage
1436 Creates a persistent node in ZooKeeper with no access control. @param path node path to create @return true if node was created, false if it already exists
1437 Recursively creates a root directory in ZooKeeper. @param path full node path to create @param zkAcl access control list for the nodes
1438 Sets method implementation by class name and signature. @param className full class name @param methodName method name @param argClasses parameter types of the method @return this Builder instance
1439 Sets the implementation of a method by class and parameter types. @param targetClass the class containing the method @param argClasses the parameter types of the method @return this Builder instance
1440 Attempts to bind a hidden method by name and parameters. @param className the fully qualified name of the target class @param methodName the name of the method @param argClasses the parameter types of the method @return this Builder instance for chaining or modification
1441 Binds a hidden method by name and parameters. @param targetClass the class containing the method @param argClasses the parameter types of the method @return this Builder instance for chaining
1442 Loads a dynamic method for invocation. @param source the class containing the method @param returnType the expected return type of the method @param name the name of the method @param parameterTypes the parameter types of the method @return UnboundMethod instance or NOOP if not found
1443 Ensures all required file handling methods are available. Throws UnsupportedOperationException if any method is unavailable.
1444 Checks if bulk delete method is available. @return true if bulk delete method is not NOOP, false otherwise
1445 Checks if the openFile method in FileSystem is available. @return true if the method is available, false otherwise
1446 Checks if ByteBuffer positioned read is available. @return true if the method is not NOOP, false otherwise
1447 Checks and invokes the positioned read fully available method. @param in InputStream to check for availability @return true if method is available and successful, false otherwise @throws IOException if an I/O error occurs
1448 Checks if I/O statistics are available. @return true if I/O statistics creation method is not NOOP, false otherwise
1449 Checks if I/O statistics context is enabled. @return true if I/O statistics context is available, false otherwise
1450 Checks if a dynamic method is available and throws an exception if not. @param method unbound method to check @throws UnsupportedOperationException if the method is NOOP
1451 Builds and binds a method to a target object. @param receiver object to which the method will be bound @return BoundMethod instance representing the bound method @throws NoSuchMethodException if method cannot be found
1452 Builds and binds a method to a target object. @param receiver object to which the method will be bound @return BoundMethod instance representing the bound method
1453 Builds and converts an unbound method to a static method. @return StaticMethod instance representing the static version of this method @throws NoSuchMethodException if method cannot be found
1454 Builds and converts an unbound method to a static method. @return StaticMethod instance representing the static version of this method
1455 Loads available file systems. Initializes and registers supported file systems with their schemes.
1456 Computes Jenkins hash of a file's content. @param args command-line arguments (single filename)
1457 Initializes a HashFunction with specified parameters. @param maxValue maximum value for hash computation @param nbHash number of hash functions to use @param hashType type of hash algorithm (JENKINS_HASH or MURMUR_HASH) @throws IllegalArgumentException if maxValue, nbHash, or hashType is invalid
1458 Protected constructor to prevent instantiation from outside the class.
1459 Approximates the count of a key in the filter. @param key the input key to count @return estimated count or 0 if not found
1460 Adds a false positive key to the filter. @param key the key to be added as a false positive @throws NullPointerException if the key is null
1461 Removes a key from the specified vector using multiple hash values. @param k the key to remove @param vector array of lists where keys are stored
1462 Finds the index of the key with the minimum weight from hash indices. @param h array of hash indices @return index of the key with the lowest weight
1463 Finds the index with the maximum false positive weight. @param h array of hash indices @return index with highest false positive weight
1464 Computes the ratio of key weights to false positive weights for each vector element. Updates the `ratio` array with these computed values.
1465 Dumps the content of a named resource. @param name resource path @return SUCCESS if successful, error code otherwise
1466 Displays usage instructions and error codes. @param args command line arguments (not used) @return error code indicating the usage message was printed
1467 Inserts an element into the PriorityQueue. @param element the element to be inserted @return true if insertion is successful, false otherwise
1468 Creates a new TreeSet with elements from the given iterable. @param elements source of elements to add to the set @return a new TreeSet containing the specified elements
1469 Creates a HashSet from an iterable of elements. @param elements the iterable providing the elements for the set @return a new HashSet containing all elements from the iterable
1470 Creates a new HashSet from variable arguments. @param elements array of elements to add to the set @return HashSet containing provided elements
1471 Runs a specified program with given arguments. @param args command-line arguments including the program name and its parameters @return 0 if successful, -1 if an error occurs (e.g., no program name or unknown program) @throws Throwable if an error occurs during program invocation
1472 Adds a field to the table with specified formatting. @param title column header text @param justification text alignment (left, center, right) @param wrap enables or disables text wrapping @return Builder instance for method chaining
1473 Parses and converts a time duration string using default units. @param name configuration property name @param vStr input time duration string @param unit default and target time unit for conversion @return converted time duration in the specified unit
1474 Appends a configuration property as XML to the document. @param doc the XML document @param conf the configuration element @param propertyName the name of the property @param redactor optional redactor for sensitive values
1475 Adds deprecation warnings to the configuration. @param deltas array of DeprecationDelta objects representing changes
1476 Binds server connector for a range of ports. @param listener ServerConnector instance to bind @param startPort Initial port to attempt binding @throws Exception if all ports fail to bind
1477 Adds target information as environment variables. @param target HAServiceTarget object representing the service @param environment Map to store environment variables
1478 Reads data from a PositionedReadable stream into a ByteBuffer. Uses direct or indirect reading based on the buffer type. @param stream source of file data @param range specifies the file section to read @param buffer destination for the read data @throws IOException if an I/O error occurs during reading
1479 Validates and sorts file ranges for vectored reading. @param ranges list of FileRange objects to process @throws EOFException if validation fails
1480 Sets the buffer state to CACHING and associates it with an asynchronous action. @param actionFuture future representing the asynchronous action
1481 Updates buffer state to a new value. @param newState the new state to set @param expectedCurrentState valid states for current buffer
1482 Validates that the given path exists and is a directory. @param path the Path to validate @param argName name of the argument for error message
1483 Validates that the given path exists and is a file. @param path the Path to validate @param argName name of the argument for error message
1484 Determines if the given block is the last block in the file. @param blockNumber the block number to check @return true if it's the last block, false otherwise
1485 Calculates the start offset of a block by its number. @param blockNumber the block number to calculate offset for @return starting offset in bytes
1486 Retrieves the state of a specified data block. @param blockNumber the block number to query @return the state of the block
1487 Sets the state of a specific data block. @param blockNumber unique identifier for the block @param blockState new state to be assigned to the block
1488 Calculates block number from given offset. @param offset file offset in bytes @return block number corresponding to the offset
1489 Aggregates I/O statistics from a source into a snapshot. @param snapshot the target snapshot to aggregate into @param statistics the source IOStatistics instance @return true if aggregation is successful, false otherwise
1490 Saves an I/O statistics snapshot to a specified file system path. @param snapshot the IOStatisticsSnapshot to save (nullable) @param fs the FileSystem where the snapshot will be saved @param path the Path in the file system to save the snapshot @param overwrite flag indicating whether to overwrite existing data at the path
1491 Retrieves counter statistics from an IOStatisticsSnapshot. @param source the source of the snapshot @return Unmodifiable map containing counter names and their values
1492 Retrieves gauge values from an I/O statistics snapshot. @param source the source of the snapshot @return a map of gauge names and their corresponding long values
1493 Retrieves minimum I/O statistics values. @param source the source of the snapshot @return Map containing metric names and their corresponding minimum values
1494 Computes maximum I/O statistics from a source. @param source the source of the snapshot @return Map containing metric names and their maximum values
1495 Computes mean statistics from IOStatisticsSnapshot. @param source the source of the snapshot @return a map with mean statistics, each entry containing sample count and sum
1496 Creates an immutable copy of the current flag set. @return A new FlagSet instance with the same configuration
1497 Creates a FlagSet with specified enum class, prefix, and optional flags. @param enumClass the class of the enum type representing the flags @param prefix the prefix to use for mapping enum names @param flags optional EnumSet of flags; if null, initializes an empty set @return a new FlagSet instance
1498 Closes the FileSystem instance and sets it to null. @throws IOException if an I/O error occurs during closing
1499 Closes all FileSystem instances in the cache. @param onlyAutomatic if true, only close automatically managed FileSystems @throws IOException if any FileSystem close operation fails
1500 Converts an IOStatisticsSnapshot to a JSON string. @param snapshot the snapshot to convert, may be null @return JSON string representation of the snapshot or null if input is null
1501 Writes bytes to a specified path using the given FileContext. @param fileContext context for file operations @param path target file path @param bytes data to write @return updated FileContext instance @throws IOException if an I/O error occurs
1502 Writes lines to a specified path in the Hadoop filesystem. @param fileContext FileContext instance for filesystem operations @param path Path where lines will be written @param lines Iterable of CharSequence containing lines to write @param cs Charset used for encoding lines @return FileContext used for writing @throws IOException if an I/O error occurs during writing
1503 Writes a character sequence to a file in the specified charset. @param fs FileContext instance for file operations @param path Path where the file will be written @param charseq Character sequence to write @param cs Charset to use for encoding @return FileContext instance after writing @throws IOException if an I/O error occurs
1504 Creates a data output stream builder for writing to a specified file path. @param path the file path where data will be written @return FSDataOutputStreamBuilder configured for creating and overwriting files
1505 Prepares to create or overwrite a file at the specified path. @param path location of the file in the file system @return FSDataOutputStreamBuilder configured for file creation
1506 Prepares to append data to a specified file. @param path the file path to append data to @return FSDataOutputStreamBuilder configured for appending
1507 Prepares to append data to a file. @param path the file path @return FSDataOutputStreamBuilder for appending
1508 Lists file statuses in a directory using a default filter. @param f directory path to list @return array of FileStatus objects @throws IOException on input/output errors
1509 Lists file statuses for multiple paths using default filter. @param files array of directory paths to list @return array of FileStatus objects or empty if none match @throws FileNotFoundException if any path does not exist @throws IOException on input/output errors
1510 Creates a new counter metric. @param info MetricsInfo object with counter details @param iVal initial integer value for the counter @return MutableCounterInt instance
1511 Creates a new mutable counter. @param info MetricsInfo object for the counter @param iVal initial value of the counter @return MutableCounterLong instance
1512 Creates a new mutable gauge metric. @param info MetricsInfo object containing gauge details @param iVal initial value of the gauge @return MutableGaugeLong instance
1513 Creates a new mutable gauge metric. @param info MetricsInfo object containing gauge details @param iVal initial floating-point value for the gauge @return MutableGaugeFloat instance representing the created gauge
1514 Creates a new mutable integer gauge. @param info MetricsInfo object containing gauge details @param iVal Initial integer value for the gauge @return MutableGaugeInt instance
1515 Resolves filesystem links using the provided function. @param fileContext Hadoop filesystem context @param path target path to resolve @param fn function to process filesystem links @return result of link resolution @throws UnresolvedLinkException if link cannot be resolved @throws IOException on I/O errors
1516 Creates a new GlobBuilder instance. @param fileContext the FileContext to use for filesystem operations @return a new GlobBuilder object
1517 Creates a new GlobBuilder instance. @param filesystem FileSystem object to be used, must not be null @return GlobBuilder object for pattern matching and path manipulation
1518 Determines if the async call is done. @return true if call is complete, false otherwise
1519 Retrieves and clears the asynchronous return value. @return AsyncGet object or null if not found
1520 Refreshes the used disk space by calculating the folder size. Updates the 'used' variable with the current folder's total size.
1521 Constructs a new MeanStatistic by copying from another instance. @param that source MeanStatistic to copy data from
1522 Converts I/O statistics from a source to a formatted string. @param source object containing or providing I/O statistics @return Formatted string representation of the statistics or empty string if error occurs
1523 Converts wrapped IOStatistics to string. @return Formatted string representation of IO statistics
1524 Converts I/O statistics to string representation. Uses ioStatisticsToString if statistics are available, otherwise returns NULL_SOURCE.
1525 Converts I/O statistics to a formatted string. @param statistics IOStatistics object containing various metrics @return Pretty-printed string of statistics or empty string if null
1526 Creates a duration tracker for a given statistic. Uses provided factory if available, otherwise returns a stub tracker. @param factory optional DurationTrackerFactory instance @param statistic key for the operation to track @return DurationTracker instance
1527 Deletes a block file and evicts the corresponding cache entry. @param elementToPurge Entry representing the block to be deleted
1528 Converts StorageStatistics to IOStatistics. @param storageStatistics source statistics object @return IOStatistics instance with aggregated metrics
1529 Adds an atomic long counter to the builder. @param key unique identifier for the counter @param source AtomicLong instance providing the count value @return current DynamicIOStatisticsBuilder instance
1530 Adds an AtomicInteger counter to the builder. @param key unique identifier for the counter @param source AtomicInteger instance providing the count value @return current DynamicIOStatisticsBuilder instance
1531 Adds a mutable counter to the builder. @param key unique identifier for the counter @param source MutableCounterLong instance providing the count value @return current DynamicIOStatisticsBuilder instance
1532 Adds an atomic long gauge to the builder. @param key unique identifier for the gauge @param source AtomicLong providing the metric value @return the current DynamicIOStatisticsBuilder instance
1533 Adds an AtomicInteger gauge to the builder. @param key unique identifier for the gauge @param source AtomicInteger providing the metric value @return the current DynamicIOStatisticsBuilder instance
1534 Adds an atomic long to calculate minimum values. @param key unique identifier for the evaluator @param source AtomicLong instance providing the value @return the current DynamicIOStatisticsBuilder instance
1535 Adds an AtomicInteger to calculate minimum values. @param key unique identifier for the evaluator @param source AtomicInteger providing the value @return the current DynamicIOStatisticsBuilder instance
1536 Adds an atomic long to calculate and store the maximum value. @param key unique identifier for the function @param source AtomicLong providing the current value @return the current DynamicIOStatisticsBuilder instance
1537 Adds an AtomicInteger to calculate and store its maximum value. @param key unique identifier for the AtomicInteger @param source AtomicInteger whose maximum value is tracked @return the current DynamicIOStatisticsBuilder instance
1538 Registers failure handling mechanisms for service interruptions. Sets up interrupt escalator and uncaught exception handler.
1539 Accepts a connection on the domain socket. @return accepted DomainSocket or null if not connected @throws IOException if an I/O error occurs
1540 Shuts down the domain socket. @throws IOException if an I/O error occurs during shutdown
1541 Sends file descriptors over a Unix domain socket. @param descriptors array of FileDescriptor objects to send @param jbuf buffer containing data to accompany the file descriptors @param offset starting offset in the buffer @param length number of bytes to send from the buffer @throws IOException if an I/O error occurs
1542 Receives file input streams over a domain socket. @param streams array to hold received FileInputStreams @param buf buffer to receive data @param offset starting offset in the buffer @param length number of bytes to read @return number of bytes received or -1 if no data is available @throws IOException if an I/O error occurs
1543 Creates a new IOStatisticsContext instance. @param key unique identifier for the context @return IOStatisticsContextImpl object with incremented ID
1544 Verifies checksums for chunked data. @param data ByteBuffer containing the data to verify @param checksums ByteBuffer containing expected checksum values @param fileName name of the file being verified @param basePos base position in the file for verification @throws ChecksumException if checksum verification fails
1545 Handles post-decryption processing. @param decryptor the Decryptor instance used for decryption @param inBuffer input ByteBuffer containing decrypted data @param position current stream position @param iv initialization vector array @return calculated padding byte @throws IOException if an I/O error occurs
1546 Resets stream offset and prepares buffers for decryption. @param offset new stream offset @throws IOException if an I/O error occurs
1547 Writes encrypted data to the output stream. @param b byte array containing data to write @param off starting offset in the byte array @param len number of bytes to write @throws IOException if an I/O error occurs or stream is closed
1548 Flushes encrypted data to the output stream. Ensures all buffered data is processed and written securely. @throws IOException if an I/O error occurs during flushing or encryption
1549 Compiles a glob pattern into a regular expression. @param globPattern the glob pattern to compile @return Compiled Pattern object for matching
1550 Retrieves bytes read based on distance. @param distance the distance category for byte reads @return number of bytes read for the specified distance
1551 Creates a file in the Hadoop file system. @param f path to the file @param absolutePermission permissions for the new file @param flag set of CreateFlag options @param bufferSize buffer size for data transfer @param replication number of replicas for the file @param blockSize block size for the file @param progress progress callback @param checksumOpt checksum option @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
1552 Constructs an AbstractFileSystem instance. @param uri original URI to validate and modify @param supportedScheme expected scheme for the URI @param authorityNeeded flag indicating if authority is required @param defaultPort default port to use if not specified in URI @throws URISyntaxException if URI construction fails
1553 Encodes input byte arrays into output byte arrays using erasure coding. @param inputs array of input data to be encoded @param outputs array of buffers for encoded output @throws IOException if encoding fails
1554 Encodes input ByteBuffers into output ByteBuffers using erasure coding. @param inputs array of input ByteBuffers @param outputs array of output ByteBuffers @throws IOException if an I/O error occurs during encoding
1555 Constructs an ArrayPrimitiveWritable instance with the given array. @param value the input array to be stored and validated
1556 Returns the canonicalized URI of the Hadoop file system. @return canonicalized URI with default port if necessary
1557 Checks if the underlying stream supports a specific capability. @param capability the capability to check @return true if supported, false otherwise
1558 Releases a BufferData object back to the pool. @param data the BufferData to release
1559 Releases BufferData objects that are in the DONE state. Iterates through all allocated buffers, checks their state, and releases those marked as DONE back to the pool.
1560 Initializes the CachingBlockManager with provided parameters. @param blockManagerParameters configuration settings for block management
1561 Retrieves a file block into the provided buffer. @param blockNumber identifier for the block to retrieve @param buffer ByteBuffer to store the retrieved data @throws IOException if an I/O error occurs during retrieval
1562 Calculates the absolute position of the buffer within the file. @return absolute position in the file
1563 Checks if the buffer has been fully read. @return true if buffer is fully read, false otherwise
1564 Sets the buffer position to an absolute file offset. @param pos absolute file position to set @return true if position is valid and within buffer, false otherwise
1565 Retrieves the current I/O statistics context for the thread. @return Non-null IOStatisticsContext for the current thread
1566 Sets or removes I/O statistics context for the current thread. @param statisticsContext context to set, or null to remove existing
1567 Retrieves instance-specific metrics configurations. @param type metric type identifier @return Map of instance names to their respective MetricsConfig subsets
1568 Parses command-line arguments from a specific position. @param args array of command-line arguments @param pos starting position for parsing @return list of parsed parameters
1569 Increments error count and displays an error message. @param message the error message to be displayed
1570 Creates a PathHandle for a file. @param stat FileStatus object representing the file @param opts optional HandleOpt configurations @return LocalFileSystemPathHandle instance or throws exceptions for invalid input
1571 Creates and returns an array of HandleOpt instances with change allowance disabled. @return Array containing HandleOpt objects configured to disallow changes
1572 Returns an array of HandleOpt instances with specific configurations. @return Array containing options for handling file changes and movements
1573 Returns an array of HandleOpt instances with specific options. @return Array containing HandleOpt objects configured for changes and location immutability
1574 Returns an array of HandleOpt objects with change and move allowances enabled. @return Array containing configured HandleOpt instances
1575 Initializes a ShellCommandExecutor with specified command, directory, environment, and timeout. @param execString array of strings representing the shell command to execute @param dir working directory for the command execution @param env environment variables for the command execution @param timeout maximum time allowed for command execution in milliseconds @param inheritParentEnv flag indicating whether to inherit parent environment variables
1576 Initializes the disk space usage refresh thread. @param runImmediately if true, starts thread without initial delay
1577 Creates a private token by cloning the current token and associating it with a new service. @param newService the service associated with the private token @return the cloned private token
1578 Validates that the path does not have a scheme with a relative component. Throws an exception if both conditions are met.
1579 Checks if the path is absolute and has no scheme or authority. @return true if conditions are met, false otherwise
1580 Checks if the path is absolute. @return true if the path is absolute, false otherwise
1581 Validates file system paths. @param path the path to validate @throws InvalidPathException if the path is invalid
1582 Writes file status to a DataOutput stream. Converts the current FileStatus object to its protocol buffer representation, writes the serialized size, and then the serialized data. @param out DataOutput stream to write to @throws IOException if I/O error occurs during conversion or writing
1583 Validates arguments for a file put operation. @param filePath destination path in the Hadoop file system @param inputStream data stream to upload @param partNumber current part number of the multipart upload @param uploadId unique identifier for the multipart upload @param lengthInBytes size of the data to upload
1584 Aborts all uploads under a specified path. @param path the directory path where uploads are to be aborted @return CompletableFuture with result -1 indicating no uploads were aborted @throws IOException if an I/O error occurs during path validation
1585 Skips forward by 'n' bytes in the input stream, ensuring position does not exceed file length. Adjusts skip amount if necessary and returns actual number of bytes skipped. @param n number of bytes to skip @return actual number of bytes skipped @throws IOException if an I/O error occurs
1586 Applies a file system permission mask to this permission. @param umask the permission mask to apply @return new FsPermission with masked permissions
1587 Retrieves file permissions from an SFTP entry. @param sftpFile LsEntry representing the file or directory @return FsPermission object with the file's permissions
1588 Constructs an FsPermission object from an integer representation. @param mode integer representation of file permissions
1589 Returns default file permissions. @return FsPermission object with full read/write/execute permissions for all
1590 Returns default directory permissions. @return FsPermission object with full read/write/execute for all users
1591 Returns default file permissions. @return FsPermission object with read and write access for all users
1592 Returns default cache pool permissions. @return FsPermission object with mode 00755
1593 Converts a Unix symbolic permission string to an FsPermission object. @param unixSymbolicPermission Unix symbolic permission string @return FsPermission object or null if input is null @throws IllegalArgumentException if the input length is incorrect
1594 Prints ACL entries for a single scope. @param aclStatus status of the ACL for a file or directory @param fsPerm file system permissions @param entries list of ACL entries to print
1595 Converts a list of ACL entries to a comma-separated string. @param aclSpec list of AclEntry objects @return formatted string representation of ACL entries
1596 Constructs an FsPermission object from a string representation. @param mode string representation of file permissions
1597 Reads bytes into a buffer. @param b destination buffer @param offset start position in the buffer @param length number of bytes to read @return actual number of bytes read or -1 if end reached @throws IOException if stream is closed or invalid input
1598 Calculates the compressed size of data written. @return The difference between current position and start position as a long value. @throws IOException if an I/O error occurs while calculating positions.
1599 Adjusts column widths for file listing based on item attributes. @param items array of PathData objects representing filesystem items @throws IOException if an I/O error occurs while processing items
1600 Retrieves quota usage for a specified path. @param f Path to the file or directory @return QuotaUsage object with quota details
1601 Retrieves the total length of the content at the specified path. @param path Path to the file or directory @return Total length as a long value @throws IOException if an I/O error occurs
1602 Initializes an AbstractLaunchableService with a specified name. @param name unique identifier for the service
1603 Transitions service to a new state. @param proposed New desired state for the service @return Previous state before transition
1604 Instantiates a service using provided configuration. @param conf Configuration object for service initialization @return The instantiated Service object
1605 Checks equality with another binary comparable object. @param other the object to compare against @return true if equal, false otherwise
1606 Sets new byte data with specified offset and length. @param newData source byte array @param offset starting index in the source array @param length number of bytes to copy
1607 Sets and retrieves key data into a BytesWritable object. @param key destination for the key data @return length of the key copied @throws IOException if buffer operations fail
1608 Lists files in a directory. @param dir the directory to list @return array of file names @throws IOException if access denied or I/O error occurs
1609 Validates directory access permissions. @param dir the File object representing the directory to check @throws DiskErrorException if directory lacks read, write, or execute permissions
1610 Locks memory pages associated with a direct ByteBuffer in place. @param buffer the direct ByteBuffer to lock @param len length of the memory region to lock @throws IOException if native code is not loaded or buffer is not direct
1611 Creates a SharedFileDescriptorFactory with the given prefix and paths. @param prefix file descriptor prefix @param paths array of storage paths for descriptors @return SharedFileDescriptorFactory instance @throws IOException if no valid path is found or initialization fails
1612 Writes data chunks with checksums. @param b input byte array @param off starting offset in the byte array @param len number of bytes to write @throws IOException if an I/O error occurs
1613 Calculates chunked checksums for a ByteBuffer. @param data source ByteBuffer containing the data to checksum @param checksums destination ByteBuffer for storing computed checksums
1614 Frees resources used by buffers and cleans buffer pool.
1615 Constructs a BoundedByteArrayOutputStream with specified capacity. @param capacity total size of the buffer and limit
1616 Decodes a base64-encoded URL string into this Token object. @param newValue base64-encoded URL string to decode @throws IOException if an I/O error occurs during decoding
1617 Retrieves erased blocks from a block group. @param blockGroup ECBlockGroup containing data and parity blocks @return Array of erased ECBlock objects
1618 Skips to the next marker in the compressed stream. @param marker long value representing the marker to find @param markerBitLength number of bits for the marker @return true if marker is found, false otherwise @throws IOException if an I/O error occurs @throws IllegalArgumentException if markerBitLength exceeds 63
1619 Constructs a new CBZip2OutputStream. Validates and sets block size, initializes output stream. @param out underlying output stream for compressed data @param blockSize compression block size (1-9) @throws IOException if I/O error occurs or invalid block size
1620 Initializes a BlockCompressorStream with default buffer size and overhead. @param out underlying output stream for compressed data @param compressor compression algorithm to use
1621 Initializes a BlockDecompressorStream with an input stream and decompressor. @param in the underlying input stream containing compressed data @param decompressor the decompression algorithm to use @param bufferSize size of the internal buffer for decompressed data @throws IOException if an I/O error occurs or parameters are invalid
1622 Writes data to the compression stream. Handles input validation, chunking, and compression. @param b byte array containing the data to write @param off starting offset in the byte array @param len number of bytes to write @throws IOException if an I/O error occurs during writing or compression
1623 Initializes a ZStandardCompressor with specified compression level and buffer size. @param level compression level @param bufferSize size of the input and output buffers
1624 Creates a compression output stream using a codec and configuration. @param codec the compression codec to use @param conf configuration settings @param out underlying output stream @return CompressionOutputStream instance @throws IOException if an I/O error occurs
1625 Closes resources used for writing to a SequenceFile. Ensures all serializers and streams are properly closed or flushed.
1626 Creates a CompressionInputStream with a codec pool. @param codec compression codec to use @param conf configuration settings @param in input stream to compress @return CompressionInputStream instance
1627 Closes the reader and releases resources. Returns decompressors to the pool and closes deserializers and input stream.
1628 Retrieves a Zlib compressor instance based on configuration. @param conf Hadoop configuration object @return Compressor instance using native or built-in Zlib, depending on availability and settings
1629 Retrieves a Zlib direct decompressor. @param conf Hadoop configuration object @return DirectDecompressor instance if native Zlib is loaded, otherwise null
1630 Returns a decompressor instance based on native Zlib library availability. @param conf Hadoop configuration object @return ZlibDecompressor if native Zlib is available, otherwise BuiltInZlibInflater
1631 Stores a delegation key by serializing it and adding it to the SQL database and local cache. @param key DelegationKey to be stored @throws IOException if an I/O or SQL error occurs during storage
1632 Updates a delegation key by storing it in the SQL database and local cache. @param key DelegationKey object to be updated @throws IOException if an I/O error occurs during serialization or database update
1633 Reads a string safely from the input stream. @param in DataInput source to read from @param maxLength maximum allowed length of the string @return decoded String or throws IOException/IllegalArgumentException
1634 Skips bytes in the input stream based on a variable-length integer. @param in DataInput source to read from @throws IOException if an I/O error occurs
1635 Reads and buffers compressed data from input stream. @param buffer DataInputBuffer to store read data @param filter CompressionInputStream for decompression @throws IOException if an I/O error occurs
1636 Reads a string from the input stream with a specified maximum length. @param in DataInput source to read from @param maxLength maximum allowed length of the string @return decoded String or throws IOException if reading fails
1637 Writes a string to the output stream. @param out DataOutput stream to write to @param s String value to serialize @throws IOException if an I/O error occurs
1638 Builds a token service string from an InetSocketAddress. @param addr socket address containing host and port @return Text object with formatted token service
1639 Converts a Protobuf TokenProto to a Hadoop Token. @param tokenProto Protobuf representation of the token @return Hadoop Token object
1640 Writes an enum value to the output stream. @param out DataOutput stream to write to @param enumVal the enum value to write @throws IOException if an I/O error occurs during writing
1641 Writes user, group, and permission details to a DataOutput stream. @param out DataOutput stream to write to @param username the username associated with the permissions @param groupname the group name associated with the permissions @param permission the file system permissions object @throws IOException if writing fails
1642 Constructs a Text object from a UTF-8 byte array. @param utf8 source byte array containing UTF-8 encoded data
1643 Constructs a new Text object by copying content from another. @param utf8 source Text object to copy data from
1644 Reads a line from the input stream with specified length and byte constraints. @param str Text object to store the read line @param maxLineLength maximum length of the line to read @param maxBytesToConsume maximum bytes to consume while reading @return number of bytes consumed, or -1 if end of stream @throws IOException on I/O error
1645 Returns the length of the UTF-8 encoded text. @return Length of the text in characters
1646 Constructs a new SortedMapWritable instance by copying another. @param other the source SortedMapWritable to copy from
1647 Constructs a new MapWritable instance by copying another. @param other source MapWritable to copy from
1648 Creates a retry policy with fixed sleep intervals. @param maxTime maximum duration for retries @param sleepTime duration to wait between retries @param timeUnit unit of time for sleep duration @return RetryPolicy configured with the specified parameters
1649 Creates a dynamic proxy instance with retry capabilities. @param iface interface to be proxied @param proxyProvider FailoverProxyProvider for managing proxies @param retryPolicy Retry policy for handling failures @return Proxy object implementing the specified interface
1650 Creates a dynamic proxy with retry capabilities for a specified interface. @param iface Interface to be proxied @param implementation Initial implementation of the interface @param methodNameToPolicyMap Map of method names to their respective retry policies @return Proxy object implementing the specified interface with retry logic
1651 Initializes the Writer with an output stream and settings. @param fout file output stream to write data @param compressionName name of the compression algorithm to use @param conf configuration settings for writing @throws IOException if the output file is not at zero offset or I/O error occurs
1652 Constructs a TFileIndex from a DataInput stream. @param entryCount number of entries in the index @param in DataInput to read from @param comparator comparator for key comparison @throws IOException if reading fails
1653 Checks for end-of-file condition in the input stream. @return true if EOF is reached, false otherwise @throws IOException if reading fails
1654 Flushes the internal buffer to the output stream. @throws IOException if an I/O error occurs during flushing
1655 Compares this entry's key with another RawComparable's key. @param key the other key to compare with @return result of comparison (-1, 0, or 1)
1656 Constructs a UTF8 object with the given string. @param string input string to initialize the UTF-8 encoded data
1657 Computes the MD5 hash of a UTF-8 encoded string. @param string input string to hash @return MD5Hash object containing the computed hash
1658 Synchronizes buffered records to output stream. Writes record count, keys, values, and flushes the stream. Resets internal buffers after synchronization. @throws IOException if I/O error occurs
1659 Generates a unique tracking ID for the token. Uses MD5 hash of the token's byte array if not already set. @return String representation of the tracking ID
1660 Encodes the current token to a URL-safe Base64 string. @return URL-encoded Base64 string representation of the token @throws IOException if an I/O error occurs during encoding
1661 Adds a node to the network topology. @param node Node object to be added
1662 Removes a node from the network topology. @param node the node to be removed Throws IllegalArgumentException if an inner node is attempted to be removed.
1663 Decommissions a node from the network topology. @param node the Node object to decommission
1664 Sorts nodes by distance from a reader node. @param reader source node for distance calculation @param nodes array of target nodes to sort @param activeLen length of active nodes in the array @param secondarySort optional consumer for secondary sorting
1665 Sorts nodes by distance from a reader node using network location. @param reader source node for distance calculation @param nodes array of target nodes to sort @param activeLen length of active nodes in the array @param secondarySort optional consumer for secondary sorting
1666 Initializes a new SocketInputStream. @param channel the ReadableByteChannel to read from @param timeout the timeout duration in milliseconds @throws IOException if the channel is invalid or cannot be configured
1667 Initializes a SocketOutputStream with a writable byte channel and timeout. @param channel writable byte channel for data transfer @param timeout operation timeout in milliseconds @throws IOException if the channel is invalid or initialization fails
1668 Retrieves RPC response for a given call. @param call the RPC call object @param connection the network connection @param timeout wait time for response @param unit time unit for timeout @return Writable containing response data or null on timeout @throws IOException if an I/O error occurs
1669 Constructs a new ScriptBasedMapping with default raw mapping.
1670 Constructs a new ScriptBasedMappingWithDependency using a raw script-based mapping. Initializes with default settings and dependencies.
1671 Creates a parent node with specified name. @param parentName unique identifier for the parent node @return newly created InnerNodeImpl instance
1672 Adds a DomainSocket with its handler for monitoring. @param sock the DomainSocket instance to add @param handler the event handler for the socket
1673 Removes a domain socket from monitoring. @param sock the socket to be removed
1674 Selects I/O operations on a channel with a timeout. @param channel selectable network channel @param ops operation set to select (e.g., SelectionKey.OP_READ) @param timeout maximum time in milliseconds to wait for an operation @return number of keys selected or 0 if the timeout expires @throws IOException if an I/O error occurs
1675 Retrieves the default IP address for a specified network interface. @param strInterface name of the network interface @return default IP address as a string @throws UnknownHostException if the interface is not found
1676 Retrieves hostnames for a specified network interface. @param strInterface name of the network interface @return array of hostnames or cached hostname if none found @throws UnknownHostException if no such network interface exists
1677 Retrieves the default host for a specified network interface. @param strInterface name of the network interface or "default" @param nameserver optional nameserver to use for DNS queries @param tryfallbackResolution if true, attempts fallback resolution @return default hostname or cached hostname if none found @throws UnknownHostException if no such network interface exists
1678 Loads the first available metrics configuration file. @param prefix metric property prefix @param fileNames list of configuration file names to try @return MetricsConfig object or empty config if none found
1679 Loads and caches user group information. @param user username of the user @return Set of group names associated with the user @throws Exception if an error occurs or user has no groups
1680 Shuts down the JVM metrics system by unregistering the singleton instance.
1681 Stops the server, interrupts handlers and listeners, and shuts down executors.
1682 Stops the HTTP server and associated resources. Handles exceptions during shutdown and logs errors.
1683 Initializes MutableQuantiles with specified parameters. @param name metric name @param description metric description @param sampleName sample name component @param valueName value name component @param interval update interval in seconds
1684 Creates a new mutable metric. @param name unique metric name @param desc metric description @param sampleName sample identifier @param valueName value identifier @param extended flag for extended metrics @return MutableStat object representing the created metric
1685 Constructs a MutableStat with specified metrics. @param name metric name @param description metric description @param sampleName sample identifier @param valueName value identifier
1686 Sets the context for metrics. @param name context name to be set @return updated MetricsRegistry instance
1687 Adds or updates a metric tag with a given name, description, and value. @param name metric name @param description metric description @param value tag value associated with the metric @param override flag to allow overriding existing tags @return MetricsRegistry instance for chaining
1688 Adds elapsed time for a metric. @param name metric identifier @param elapsed time in milliseconds
1689 Publishes metrics to registered sinks. @param buffer MetricsBuffer containing metric data @param immediate Flag indicating whether to publish immediately
1690 Copies statistical data to another SampleStat instance. @param other target SampleStat instance to receive the copied data
1691 Logs slow RPC calls based on processing time and threshold. @param methodName Name of the method being processed @param call Call object containing client information @param details ProcessingDetails object with timing data
1692 Refreshes the netgroups cache by clearing existing mappings and caching updated ones. @throws IOException if an I/O error occurs during cache refresh
1693 Ends the current log section with a separator line.
1694 Prints a formatted title with surrounding separators. @param format message format string @param args arguments for the format string
1695 Logs an error and throws a KerberosDiagsFailure exception. @param category error category @param message error message template @param args arguments for the message template
1696 Creates a UserGroupInformation object for a remote user. @param user the username of the remote user @param authMethod the authentication method used @return UserGroupInformation object representing the user @throws IllegalArgumentException if the username is null or empty
1697 Starts the token management threads. Ensures the system is not already running, updates the master key, and initializes a daemon thread for expired token removal. @throws IOException if an I/O error occurs during key update
1698 Rolls the current master key for delegation token management. Updates the expiry date and ensures the key is stored. @throws IOException if an I/O error occurs during storage
1699 Constructs a new DelegationTokenAuthenticatedURL with default settings.
1700 Constructs a new DelegationTokenAuthenticatedURL with default connection configuration. @param authenticator existing authenticator or null to create a new one
1701 Constructs a new DelegationTokenAuthenticatedURL with default authenticator. @param connConfigurator configuration for HTTP connections
1702 Reads data from the input stream into the specified byte array. @param b buffer to store read bytes @return number of bytes read or -1 if end of stream @throws IOException on I/O errors
1703 Checks if user credentials are from a keytab file. @return true if Kerberos is enabled, Hadoop login is active, and keytab is present; false otherwise
1704 Checks if user credentials are from a ticket. @return true if using Kerberos and Hadoop login without keytab, false otherwise
1705 Initializes the default SSL socket factory with a specified channel mode. @param preferredMode desired SSL channel mode @throws IOException if initialization fails due to algorithm or key issues
1706 Constructs a CommandFactory with default configuration.
1707 Constructs a HarFileSystem object. Note: Requires calling #initialize() to set up the underlying file system.
1708 Constructs a HarFileSystem with specified FileSystem. @param fs underlying file system to use
1709 Constructs an FsShell instance with default configuration.
1710 Constructs GetGroupsBase with configuration and default output stream. @param conf Configuration object for Hadoop settings
1711 Initializes command with default output and error streams.
1712 Resolves a hostname to an InetAddress object. Handles IP addresses, rooted hosts, domain names, and simple hosts. @param host the hostname or IP address to resolve @return InetAddress object for the given host @throws UnknownHostException if resolution fails
1713 Writes access control list string to output stream. @param out DataOutput stream to write to @throws IOException if an I/O error occurs during writing
1714 Creates a ZooKeeper instance with optional SSL configuration. @param truststoreKeystore keystore and truststore details (optional) @return a new ZooKeeper object @throws IOException if connection or SSL config fails
1715 Returns the size of the value queue for a given key. @param keyName unique identifier for the value queue @return size of the queue or 0 if not found
1716 Retrieves at most 'num' values for the specified key. Handles concurrent access and refills if needed. @param keyName unique identifier for the value queue @param num maximum number of values to retrieve @return list of retrieved values @throws IOException if an I/O error occurs @throws ExecutionException if execution fails
1717 Drains and clears all tasks associated with a key. @param keyName unique identifier for the key
1718 Adds an element to the call queue. Handles client backoff and server failover scenarios. @param e the element to add @throws InterruptedException if interrupted while adding
1719 Ensures the Writable RPC engine is initialized. Initializes if not already done.
1720 Returns the elapsed time in the specified unit. @param timeUnit desired time unit for conversion @return elapsed time converted to the specified unit
1721 Retrieves protocol signature for version validation. @param clientMethodsHashCode hash code of methods on the client side @param serverVersion version of the server protocol @param protocol RPC protocol class @return ProtocolSignature object or null if no match
1722 Decays current call costs and updates scheduling metrics. Applies decay factor to tracked costs, cleans up zero-cost entries, and refreshes schedule cache and average response times.
1723 Determines the priority level for an RPC call. @param obj Schedulable object representing the RPC @return Priority level as an integer, with negative values capped at 0
1724 Removes and returns the next element from the queue based on priority. @return The removed element or null if no elements are available
1725 Closes the connection and releases associated resources. Logs errors and cleans up calls if necessary.
1726 Initializes a new Globber instance. @param fs FileSystem to operate on @param pathPattern pattern for file paths @param filter PathFilter to apply @param resolveSymlinks whether to resolve symbolic links
1727 Initializes MachineList with host entries. @param hostEntries comma-separated list of IP addresses and/or CIDR ranges
1728 Creates a new instance of SysInfo tailored to the current operating system. @return SysInfoLinux or SysInfoWindows based on detected OS
1729 Retrieves the physical memory size in bytes. @return Physical memory size excluding corrupt and huge pages
1730 Calculates total available virtual memory size. @return Sum of physical and free swap memory in bytes
1731 Transforms an XML document using a provided stylesheet. @param styleSheet InputStream containing the XSLT stylesheet @param xml InputStream containing the XML document @param out Writer to receive the transformation output @throws TransformerConfigurationException if factory creation fails @throws TransformerException if transformation fails
1732 Generates a string representation of storage metrics. @param qOption include quota usage if true @param hOption use human-readable size format if true @param tOption include types quota usage if true @param xOption exclude snapshot counts if true @param types list of StorageType to consider @return formatted summary string
1733 Generates a formatted snapshot summary. @param hOption true for human-readable size, false for raw value @return formatted snapshot information as string
1734 Computes capacity based on current max memory and specified percentage. @param percentage percentage of max memory to use @param mapName name of the map for logging @return computed capacity as an integer
1735 Fills the internal buffer with data from the file stream. Reads a chunk of data and verifies its checksum. @throws IOException if an I/O error occurs during reading
1736 Reads and discards a specified number of bytes from the input stream. @param len number of bytes to discard @return actual number of bytes discarded @throws IOException if an I/O error occurs
1737 Converts UTF-8 encoded bytes to a string. @return decoded string representation of the byte array
1738 Converts UTF-8 encoded byte array to a string. @return decoded string representation of the byte array @throws IOException if an I/O error occurs during decoding
1739 Converts UTF-8 encoded byte array to a String. @param bytes UTF-8 encoded byte array @return decoded String @throws IOException if an I/O error occurs during decoding
1740 Reads a UTF-8 encoded string from a DataInput stream. @param in DataInput source @return decoded String @throws IOException if an I/O error occurs
1741 Validates the RPC response header. @param header RPC response header to validate @throws IOException if validation fails
1742 Converts a single byte to a hexadecimal string. @param b input byte @return hexadecimal string representation of the byte
1743 Handles uncaught exceptions by logging and terminating the service. @param thread Thread where the exception occurred @param exception The uncaught Throwable
1744 Exits the application with a usage error message. @param EXIT_USAGE status code indicating a usage error @param USAGE_MESSAGE guidance on correct usage
1745 Handles uncaught exceptions in Hadoop threads. Logs errors and triggers shutdown procedures as needed. @param thread the thread where the exception occurred @param exception the uncaught Throwable
1746 Exits the JVM with the specified status and message. @param exitCode the exit code to return @param message the error message to display
1747 Terminates JVM with specified exit status. @param status exit code indicating error nature @throws ExitException if system exit is disabled
1748 Logs an error message and terminates the JVM. @param status exit code indicating error nature @param msg error message describing the exception
1749 Initiates JVM termination with a specified status. @param status exit code indicating the reason for termination @throws HaltException if systemHaltDisabled is false
1750 Sorts elements using quicksort algorithm. @param s the IndexedSortable instance to sort @param p starting index of the range to sort @param r ending index of the range to sort
1751 Initializes an AclStatus object with specified parameters. @param owner file/directory owner @param group file/directory group @param stickyBit indicates if the sticky bit is set @param entries iterable of ACL entries @param permission FsPermission object representing permissions
1752 Parses ACL strings into a list of ZooKeeper ACLs. @param aclString comma-separated string of ACL components @return List of ACL objects @throws BadAclFormatException if ACL format is invalid
1753 Parses a comma-separated authentication string into a list of ZKAuthInfo objects. @param authString formatted authentication string @return List of ZKAuthInfo objects or empty list if input is null @throws BadAuthFormatException if the input string is not properly formatted
1754 Preserves file attributes from source to destination. @param src source PathData object @param target destination PathData object @param preserveRawXAttrs flag to preserve raw extended attributes @throws IOException if an I/O error occurs
1755 Constructs minimal ACL entries based on file permissions. @param perm file system permissions @return List of AclEntry objects representing user, group, and other permissions
1756 Tracks duration of operations based on key. @param key identifier for the operation @param count number of operations to increment @return DurationTracker instance for tracking or stub if key not found
1757 Initializes a StatisticDurationTracker with given statistics store and key. @param iostats IOStatisticsStore to track operation statistics @param key identifier for the operation being tracked
1758 Constructs a DurationInfo with INFO level logging. @param log Logger instance for logging messages @param format Format string for the duration text @param args Arguments for the format string
1759 Waits for the specified CompletableFuture to complete. @param future the CompletableFuture to wait on @throws IOException if task is cancelled or fails with an IOException
1760 Waits for a CompletableFuture to complete, ignoring any exceptions. @param future the CompletableFuture to wait on
1761 Creates a new CRC composer for specified data type. @param type the data checksum type @param bytesPerCrcHint hint for bytes per CRC segment @return CrcComposer instance configured with appropriate parameters @throws IOException if CRC polynomial retrieval fails
1762 Updates the composite CRC with new data. @param crcB CRC value of the new data block @param bytesPerCrc size of the data block in bytes @throws IOException if stripe boundary is exceeded without alignment
1763 Formats and appends time difference to a given finish time. @param dateFormat FastDateFormat instance for formatting @param finishTime end time in milliseconds @param startTime start time in milliseconds @return formatted string with optional time difference
1764 Escapes special characters in a string. @param str the input string to process @return escaped string with specified characters replaced
1765 Unescapes a string by removing escape characters. @param str the input string to unescape @return unescaped string or throws IllegalArgumentException if invalid
1766 Generates a startup message for a service. @param classname name of the starting class @param args list of command-line arguments @return formatted startup message as a string
1767 Retrieves the next element from the source iterator. Throws NoSuchElementException if no more elements are available. Handles I/O exceptions by cleaning up resources and rethrowing the exception. @return the next element from the source iterator @throws IOException if an I/O error occurs during retrieval
1768 Awaits and retrieves the result of a future, handling exceptions. @param future the Future to await @return the result of the future @throws InterruptedIOException if interrupted during wait @throws IOException if an I/O error occurs @throws RuntimeException for other execution errors
1769 Awaits and retrieves results from a collection of futures. @param collection the collection of futures to await @return list of results from the futures @throws InterruptedIOException if interrupted during wait @throws IOException if an I/O error occurs @throws CancellationException if any future is cancelled @throws RuntimeException for other execution errors
1770 Awaits the completion of a future with a specified timeout. @param future the Future to await @param timeout maximum time to wait @param unit time unit for the timeout @return result of the future if completed within timeout @throws InterruptedIOException if interrupted while waiting @throws IOException if an I/O error occurs during execution @throws RuntimeException for other exceptions @throws TimeoutException if the future does not complete in time
1771 Awaits completion of all futures in the collection within a specified timeout. @param collection futures to await @param duration maximum time to wait for each future @return list of results from completed futures @throws InterruptedIOException if interrupted while waiting @throws IOException if an I/O error occurs during execution @throws CancellationException if any future is cancelled @throws TimeoutException if any future does not complete in time
1772 Cancels all futures and awaits their completion. @param collection of futures to cancel and await @param interruptIfRunning whether to interrupt running tasks @param duration maximum time to wait for each future @return list of results from completed futures
1773 Creates a new instance of a class with specified arguments and configuration. @param theClass class to instantiate @param conf configuration object @param argTypes parameter types for constructor @param values arguments for constructor @return new instance of the class
1774 Retrieves the class of keys used in sequence files. @return Class object representing the key type
1775 Retrieves the value class for sequence file keys. @return Class object representing the value class or throws RuntimeException on error
1776 Loads a class by name and handles errors. @param name fully qualified class name @return SUCCESS if loaded, E_NOT_FOUND if not found, or E_LOAD_FAILED on other errors
1777 Creates an instance of a class by name. @param name fully qualified class name @return SUCCESS if instance created, error code otherwise
1778 Creates and returns a new Configuration instance. @return Configuration object with default settings
1779 Loads configuration for file system logging. @return Configuration object initialized with appropriate settings
1780 Constructs a new FindClass instance using default Hadoop configuration.
1781 Constructs a ReconfigurableBase with default configuration.
1782 Constructs a ReconfigurableBase object with the given configuration. @param conf Configuration object to be used; defaults to a new Configuration if null
1783 Retrieves the canonical path of the qualified executable within Hadoop bin. @param executable name of the executable to find @return canonical path as a String @throws IOException if any directory or file is missing or invalid
1784 Executes a shell command with specified environment and directory. Handles timeouts, error streams, and process management.
1785 Adds a new progress phase with a specified status. @param status initial status of the new phase @return newly created Progress instance representing the phase
1786 Recursively creates a root directory in ZooKeeper. @param path full node path to create @throws Exception if an error occurs during creation
1787 Checks if a file system has a specific capability for a given path. @param fs the file system object @param path the path to check capability for @param capability the capability to verify @return true if the file system has the capability, false otherwise
1788 Checks if an object supports a specific capability. @param object the object to check capabilities for @param capability the capability to verify @return true if the object has the capability, false otherwise
1789 Retrieves I/O statistics counters from a specified source. @param source the data source to retrieve statistics from @return a map of I/O statistic names and their corresponding values
1790 Retrieves I/O statistics gauges. @param source the source for which to retrieve statistics @return a map of gauge names and their corresponding values
1791 Retrieves I/O statistics minimum values. @param source data source for statistics @return map of minimum I/O statistics
1792 Retrieves maximum I/O statistics from a given source. @param source the data source for I/O statistics @return map of I/O metrics with their maximum values
1793 Retrieves I/O statistics means from a specified source. @param source the data source containing I/O statistics @return map of statistic names to mean values (entry key and value)
1794 Invokes a static method with specified arguments. @param args the arguments to pass to the method @return the result of the method invocation @throws IllegalStateException if the method is not static
1795 Sets method implementation by class name and parameter types. @param className full class name @param argClasses parameter types of the method @return this Builder instance
1796 Binds a hidden method by class name and parameter types. @param className fully qualified target class name @param argClasses parameter types of the method @return this Builder instance for chaining
1797 Loads a static method for invocation. @param source the class containing the method @param returnType the expected return type of the method @param name the name of the method @param parameterTypes the parameter types of the method @return UnboundMethod instance or NOOP if not found
1798 Checks if an object is a valid source for I/O statistics. @param object the object to check @return true if object is a valid source and I/O stats are available, false otherwise
1799 Checks if I/O statistics are available and valid. @param object target object to check @return true if I/O statistics are available and enabled, false otherwise
1800 Checks if an I/O statistics snapshot can be created for the given object. @param object the Serializable object to check @return true if I/O statistics are available and snapshot creation is possible, false otherwise
1801 Checks if I/O statistics context is enabled. @return true if both I/O stats are available and the context method returns true, false otherwise
1802 Deletes files in bulk with a specified page size. @param fileSystem Hadoop FileSystem to operate on @param path directory path containing files to delete @return number of files deleted @throws IOException if an I/O error occurs
1803 Performs a bulk delete operation on specified paths. @param fs FileSystem instance to perform the deletion @param base Base path for relative deletions @param paths Collection of paths to delete @return List of deleted paths with status messages @throws IOException if an I/O error occurs during deletion
1804 Opens a file using the provided FileSystem. @param fs FileSystem instance @param path Path to the file @param policy File access policy @param status Optional FileStatus object @param length Optional file length @param options Optional map of additional options @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
1805 Reads fully into a ByteBuffer from an InputStream at a specified position. @param in the input stream to read from @param position the starting position within the file @param buf the buffer to read data into @throws IOException if an I/O error occurs
1806 Checks if I/O statistics snapshot creation is available. @throws UnsupportedOperationException if the feature is not supported
1807 Checks if I/O statistics context is available. @throws UnsupportedOperationException if not available
1808 Constructs a LightWeightCache with default Timer. @param recommendedLength initial cache capacity @param sizeLimit maximum entries allowed in the cache @param creationExpirationPeriod time before an entry expires after creation @param accessExpirationPeriod time before an entry expires after last access
1809 Initializes a Bloom filter with specified parameters. @param vectorSize size of the bit vector @param nbHash number of hash functions @param hashType type of hash algorithm
1810 Removes a key from the filter if it exists. @param key the element to delete @throws NullPointerException if key is null @throws IllegalArgumentException if key is not a member
1811 Adds multiple false positive keys to the filter. @param coll collection of keys to be added as false positives @throws NullPointerException if the collection is null
1812 Adds a list of false positive keys to the filter. @param keys List of keys to be added as false positives @throws NullPointerException if the list or any key is null
1813 Adds multiple false positive keys to the filter. @param keys array of keys to be added as false positives @throws NullPointerException if the keys array is null
1814 Clears the bit at a specified index, removing associated keys and updating metrics. @param index the position in the bit vector to clear
1815 Removes element with the lowest ratio from hash array. @param h hash values of elements @return index of element with minimum ratio
1816 Executes a program based on command-line arguments. @param argv command-line arguments for the program @throws Throwable if an error occurs during execution
1817 Retrieves a credential entry by name from the provider. Handles deprecated keys and logs deprecation warnings. @param provider the CredentialProvider instance @param name the configuration key name @return CredentialEntry object or null if not found
1818 Adds a deprecation warning for a configuration key. @param key the original configuration key being deprecated @param newKeys array of new keys replacing the deprecated one @param customMessage custom message for users about the deprecation
1819 Opens listeners for the server. Binds each listener to a specified or range of ports. @throws Exception if binding fails
1820 Validates and initializes configuration arguments. @param argStr configuration string for SSH connection @throws BadFencingConfigurationException if invalid configuration
1821 Recursively deletes the parent ZooKeeper node directory. @throws IOException if deletion fails @throws InterruptedException if thread is interrupted during execution
1822 Fences out the old active node if it exists and does not contain current app data. @return Stat object of the fenced node or null if no fencing was needed @throws InterruptedException if thread is interrupted during execution @throws KeeperException if ZooKeeper operation fails after retries
1823 Reads file range into a ByteBuffer asynchronously. Validates the range and reads data from the stream. @param stream source of file data @param range specifies the file section to read @param allocate function to create ByteBuffer of appropriate size @return CompletableFuture containing the read ByteBuffer @throws EOFException if end of file is reached before reading
1824 Requests caching for a given buffer data. @param data BufferData to be cached
1825 Sets the prefetch action future. @param actionFuture future representing the prefetch operation
1826 Marks buffer as ready for use. @param expectedCurrentState valid states for current buffer @throws IllegalStateException if checksum is already set
1827 Returns the size of a block. @param blockNumber the block number to query @return size of the specified block in bytes
1828 Calculates relative offset within a block. @param blockNumber the block number to calculate offset for @param offset the absolute offset @return relative offset within the specified block
1829 Initializes BlockData with file and block sizes. @param fileSize total size of the file @param blockSize size of each data block
1830 Retrieves the block number based on buffer's start offset. Validates buffer state before calculation. @return block number corresponding to the buffer's start offset
1831 Closes all FileSystem instances in the cache. @throws IOException if any FileSystem close operation fails
1832 Closes all FileSystem instances for a given UserGroupInformation. @param ugi user group information for filtering FileSystems @throws IOException if any I/O error occurs during closing
1833 Writes a character sequence to a file using UTF-8 encoding. @param fileContext FileContext instance for file operations @param path Path where the file will be written @param charseq Character sequence to write @return FileContext instance after writing @throws IOException if an I/O error occurs
1834 Writes a byte array to a specified file path. @param fs FileSystem instance @param path destination file path @param bytes data to write @return the provided FileSystem instance @throws IOException if an I/O error occurs
1835 Writes lines to a file in the specified filesystem. @param fs FileSystem instance where the file is written @param path Path of the target file @param lines Iterable of CharSequence containing lines to write @param cs Charset used for encoding the text @return The same FileSystem instance @throws IOException if an I/O error occurs
1836 Writes a character sequence to a specified file path. @param fs FileSystem instance @param path destination file path @param charseq content to write @param cs character set for encoding @return the FileSystem instance @throws IOException if an I/O error occurs
1837 Constructs a BlockLocation with specified parameters. @param names array of block names, interned if not null @param hosts array of block hosts, interned if not null @param topologyPaths array of network paths, interned if not null @param offset starting offset of the block @param length length of the block @param corrupt true if the block is corrupted
1838 Creates a new counter metric with specified name, description, and initial value. @param name metric name @param desc metric description @param iVal initial integer value for the counter @return MutableCounterInt instance
1839 Creates and returns a new mutable counter. @param name metric name @param desc metric description @param iVal initial value of the counter @return MutableCounterLong instance
1840 Creates a new gauge metric. @param name metric name @param desc metric description @param iVal initial value of the gauge @return MutableGaugeLong instance
1841 Creates a new mutable gauge metric with specified name and description. @param name metric name @param desc metric description @param iVal initial floating-point value for the gauge @return MutableGaugeFloat instance representing the created gauge
1842 Creates a new mutable integer gauge with specified name and description. @param name metric name @param desc metric description @param iVal initial integer value for the gauge @return MutableGaugeInt instance
1843 Creates a copy of this MeanStatistic instance. @return a new MeanStatistic with the same data as the current instance
1844 Logs I/O statistics at debug level. @param log Logger instance for logging @param message Custom log message @param source Object containing I/O statistics
1845 Generates a string representation of the FSInputStream object. Includes I/O statistics if applicable. @return String representation of the stream and its statistics
1846 Converts I/O statistics to a formatted string. @param statistics IOStatistics object or null @return Pretty-printed string of statistics or empty string if null
1847 Measures duration of an invocation. @param factory optional DurationTrackerFactory instance @param statistic key for the operation to track @param input function to execute and measure @return Duration object representing execution time @throws IOException if input function throws an IO exception
1848 Tracks duration of a supplier operation. @param factory optional DurationTrackerFactory instance @param statistic key for the operation to track @param input supplier function to execute @return result of the supplier function
1849 Adds a block entry to the linked list and evicts if necessary. @param entry the block entry to be added
1850 Initializes IOStatisticsStore with specified metrics. @param counters list of counter keys @param gauges list of gauge keys @param minimums list of minimum keys @param maximums list of maximum keys @param meanStatistics list of mean statistic keys
1851 Reads decrypted data into a byte array. @param b destination buffer @param off offset in the buffer @param len number of bytes to read @return number of bytes read or -1 if end of stream @throws IOException if an I/O error occurs
1852 Decrypts data from the input buffer at a specified position. @param position current stream position @param buffer input buffer containing encrypted data @param offset starting offset in the buffer @param length number of bytes to decrypt @throws IOException if an I/O error occurs during decryption
1853 Decrypts data from a ByteBuffer at a specified file position. @param filePosition current position in the file @param buf buffer containing encrypted data @param length number of bytes to decrypt @param start starting index in the buffer for decryption @throws IOException if an I/O error occurs during decryption
1854 Decrypts data from ByteBuffer using provided decryptor. @param buf input buffer containing encrypted data @param length number of bytes to decrypt @param start starting position in the buffer @throws IOException if an I/O error occurs during decryption
1855 Seeks to a specified position in the stream. @param pos new position to seek to @throws IOException if an I/O error occurs or if seeking is unsupported
1856 Skips over n bytes in the input stream. @param n number of bytes to skip @return actual number of bytes skipped @throws IOException if an I/O error occurs
1857 Initializes the GlobFilter with a specified file pattern and default filter. @param filePattern the glob pattern to match file paths against @throws IOException if the file pattern is illegal
1858 Constructs a new GlobFilter with a specified pattern and optional user-defined filter. @param filePattern the glob pattern to match file paths against @param filter optional PathFilter for additional filtering criteria @throws IOException if the file pattern is illegal
1859 Untars an input stream into a specified directory. @param inputStream data to be extracted @param untarDir destination directory for extraction @param gzipped indicates if the input is gzip compressed @throws IOException, InterruptedException, ExecutionException on failure
1860 Retrieves all statistics from file systems. @return Map of URI to Statistics mappings
1861 Clears statistics by resetting all registered Statistics objects.
1862 Encodes input ECChunk arrays into output ECChunk arrays using erasure coding. @param inputs array of ECChunk objects representing data chunks @param outputs array of ECChunk objects to store encoded data @throws IOException if an I/O error occurs during encoding
1863 Creates a new instance of BlockingThreadPoolExecutorService. @param activeTasks max concurrent tasks allowed @param waitingTasks max waiting tasks in queue @param keepAliveTime time for idle threads to wait before termination @param unit unit of time for keepAliveTime @param prefixName base name for daemon threads @return BlockingThreadPoolExecutorService instance
1864 Sets the data and initializes buffer position. @param bufferData contains the buffer with file data @param startOffset starting offset of the buffer in the file @param readOffset initial read position within the buffer
1865 Retrieves the current I/O statistics context for the thread. @return Non-null IOStatisticsContext for the current thread
1866 Resets the I/O statistics context for the current thread.
1867 Captures a snapshot of the current I/O statistics context. @return Serializable snapshot of the current thread's IOStatisticsContext
1868 Aggregates I/O statistics from a source into the current thread's context. @param source object containing or providing I/O statistics @return true if aggregation was successful, otherwise false
1869 Executes tasks in parallel on a collection of items. Handles exceptions, manages execution contexts, and ensures efficient task processing. @param task the task to execute on each item @return true if all tasks succeeded, false otherwise
1870 Sets or removes I/O statistics context for the current thread. @param statisticsContext context to set, or null to remove existing
1871 Sets I/O statistics context for the current thread. @param ioStatisticsContext context to set, or null to remove existing
1872 Resets I/O statistics context for the current thread. @param ioStatisticsContext the current I/O statistics context to reset
1873 Handles and displays an error message for a given exception. Adds the exception to the exceptions list, checks for specific types, logs debug information, and formats the error message for display. @param e the Throwable exception to be handled
1874 Retrieves a path handle for the given file status. @param stat file status object @param opt optional handle options @return PathHandle instance
1875 Adds a token to the credentials map. @param alias unique identifier for the token @param t the token to add
1876 Encrypts data using OpenSSL CTR mode. @param inBuffer ByteBuffer containing plaintext data @param outBuffer ByteBuffer to store ciphertext @throws IOException on encryption errors
1877 Decrypts data using OpenSSL CTR mode. @param inBuffer ByteBuffer containing encrypted data @param outBuffer ByteBuffer to store decrypted result @throws IOException on cryptographic errors
1878 Initializes the mount point with source and destination paths. @throws IOException if regex compilation fails or interceptor initialization fails
1879 Constructs a Path by resolving a child path against a parent path. @param parent the parent Path @param child the child Path to resolve
1880 Constructs a Path object from a given file system path string. Validates and normalizes the path, handling Windows drive letters. @param pathString the file system path to construct @throws IllegalArgumentException if the path is invalid
1881 Constructs a Path object with the specified components. @param scheme URI scheme or null @param authority authority part of the URI @param path file system path
1882 Converts URI to string representation. @return string representation of the URI
1883 Retrieves the URI path and validates it. @param p Path object to process @return URI path as a String @throws InvalidPathException if path or name is invalid
1884 Resolves a file system path. @param p the path to resolve @return Path object representing the resolved location @throws FileNotFoundException if the file does not exist @throws UnresolvedLinkException if there is an unresolved symbolic link @throws AccessControlException if access is denied @throws IOException for other I/O errors
1885 Creates a file with specified options. @param f file path to create @param createFlag flags for file creation @param opts optional parameters for file creation @return FSDataOutputStream for writing to the created file @throws various exceptions on invalid operations or errors
1886 Applies a file system permission mask to the given mode. @param mode original file permissions @param umask the permission mask to apply @return FsPermission with applied umask or original if already unmasked
1887 Creates directories recursively. @param f path of directory to create @return true if successful, false otherwise
1888 Sets file permissions. @param permission new FsPermission object, uses default if null
1889 Creates a file non-recursively with default permissions. @param f path to the file @param overwrite flag indicating if file should be overwritten @param bufferSize buffer size for data transfer @param replication replication factor @param blockSize block size @param progress progress monitor @return FSDataOutputStream for writing to the file @throws IOException if operation fails or is unsupported
1890 Creates an immutable file system permission. @param permission short representation of file permissions @return ImmutableFsPermission object with specified permissions
1891 Appends a key-value pair to the SequenceFile. @param key the key object to be written @param val the value object to be written @throws IOException if there's an I/O error or class mismatch
1892 Retrieves the compressed size of the data block. @return The compressed size as a long value. @throws IOException if an I/O error occurs during retrieval.
1893 Skips over n bytes in the input stream, ensuring not to exceed file length. @param n number of bytes to skip @return actual number of bytes skipped
1894 Retrieves the total length of the content at the specified HAR file path. @param path Path to the file or directory within the HAR archive @return Total length as a long value @throws IOException if an I/O error occurs
1895 Retrieves total length of content at specified Hadoop path. @param path Path to the file or directory @return Total length as a long value @throws IOException if an I/O error occurs
1896 Initializes and starts the JvmPauseMonitor with a default configuration. Simulates an infinite loop to trigger GC activities for monitoring.
1897 Starts the service if not already started. Handles state transitions and notifies listeners on success.
1898 Transitions the service to a new state. @param newState desired new state for the service @return previous state before transition
1899 Prints the default Kerberos realm. @throws KerberosDiagsFailure if an error occurs during retrieval
1900 Checks equality with another BytesWritable object. @param right_obj the object to compare against @return true if equal, false otherwise
1901 Checks equality with another Text object. @param o the object to compare against @return true if both objects are instances of Text and equal, false otherwise
1902 Updates byte data from another BytesWritable instance. @param newData source BytesWritable object
1903 Decodes erasure-coded data from input ByteBuffers. @param inputs array of input ByteBuffers containing encoded data @param erasedIndexes indices of erased blocks to be reconstructed @param outputs array of output ByteBuffers for decoded data @throws IOException if an I/O error occurs during decoding
1904 Initiates the decoding process for erasure-coded data. @param inputs array of input byte arrays containing encoded data @param erasedIndexes indices of erased or missing blocks @param outputs array to store decoded output data @throws IOException if an I/O error occurs during decoding
1905 Skips to the next block marker in the compressed stream. @return true if marker is found, false otherwise @throws IOException if an I/O error occurs
1906 Constructs a new CBZip2OutputStream with default block size. @param out underlying output stream for compressed data @throws IOException if I/O error occurs
1907 Constructs a BlockDecompressorStream with default buffer size. @param in the underlying input stream @param decompressor the decompression algorithm to use @throws IOException if an I/O error occurs or parameters are invalid
1908 Creates a compression output stream using LZ4 codec. @param out underlying output stream @return CompressionOutputStream instance @throws IOException if an I/O error occurs
1909 Creates a BZip2 compression output stream. @param out underlying output stream @return CompressionOutputStream instance @throws IOException if an I/O error occurs
1910 Creates a compression output stream using ZStandard codec. @param out underlying output stream @return CompressionOutputStream instance @throws IOException if an I/O error occurs
1911 Creates a compression output stream using Snappy codec. @param out underlying output stream @return CompressionOutputStream instance @throws IOException if an I/O error occurs
1912 Closes the writer and releases resources. Ensures both data and index are properly closed.
1913 Finalizes the writing process by flushing and closing resources.
1914 Creates a LZ4 compression input stream. @param in input stream to compress @return CompressionInputStream instance for LZ4
1915 Creates a BZip2 compression input stream. @param in input stream to compress @return CompressionInputStream instance using BZip2 codec
1916 Creates a CompressionInputStream for ZStandard. @param in input stream to compress @return CompressionInputStream instance using codec pool
1917 Creates a decompression input stream using Snappy codec. @param in input stream to decompress @return CompressionInputStream instance for decompression
1918 Closes the reader and releases resources. Ensures both index and data streams are properly closed.
1919 Closes the input stream and sets it to null. @throws IOException if an I/O error occurs while closing the stream
1920 Creates a direct decompressor using Zlib. @return DirectDecompressor instance or null if native Zlib is not loaded
1921 Writes the file header to the output stream. Includes version, class names, compression flags, codec name (if compressed), and metadata. @throws IOException if an I/O error occurs during writing
1922 Serializes credentials to a DataOutput stream. Writes tokens and secret keys with their sizes and values.
1923 Reads a block of data from a sequence file. Handles lazy decompression and sync checks. @throws IOException if an I/O error occurs
1924 Seeks to the current value in the sequence file. Handles both compressed and uncompressed scenarios. @throws IOException if an I/O error occurs
1925 Reads a string from the input stream. @param in DataInput source to read from @return decoded String or throws IOException if reading fails
1926 Retrieves a delegation key by ID, first checking the local cache and then the SQL database. @param keyId unique identifier of the delegation key @return DelegationKey object or null if not found
1927 Selects a delegation token for the given URL. @param url target web service URL @param creds user credentials containing tokens @return selected delegation token or null if not found
1928 Retrieves a server token for authentication. @param authType type of SASL authentication @return Token object or null if no token is available @throws IOException on errors during token retrieval
1929 Sets the service for a given token based on an InetSocketAddress. @param token the token to update @param addr socket address containing host and port
1930 Converts Protobuf TokenProto to a Hadoop Token. @param tokenProto Protobuf representation of the token @return Hadoop Token object
1931 Retrieves or creates a fixed ByteString for a given Text key. @param key source Text object to convert @return cached or newly created ByteString representation
1932 Copies a token by cloning its components. @param other the source Token object to copy from
1933 Reads a line from the input stream with specified length constraints. @param str Text object to store the read line @param maxLineLength maximum length of the line to read @return number of bytes consumed, or -1 if end of stream @throws IOException on I/O error
1934 Reads a line from the input stream. @param str Text object to store the read line @return number of bytes consumed, or -1 if end of stream @throws IOException on I/O error
1935 Constructs an InstrumentedLock with default locking mechanism. @param name unique identifier for the lock @param logger Logger instance for recording events @param minLoggingGapMs minimum time between log entries @param lockWarningThresholdMs threshold for issuing warnings on long lock durations
1936 Creates a dynamic proxy with retry capabilities. @param iface interface to be proxied @param implementation initial implementation object @param retryPolicy policy for handling failures @return Proxy object implementing the specified interface
1937 Processes wait time and retry information for a method call. @return CallReturn enum indicating the result of processing @throws InterruptedIOException if interrupted while waiting
1938 Initializes a Writer for TFiles. @param fsdos file system output stream @param minBlockSize minimum block size @param compressName compression algorithm name @param comparator key comparator class name @param conf Hadoop configuration @throws IOException if initialization fails
1939 Determines if the current data chunk is the last one. @return true if it's the last chunk, false otherwise @throws IOException if an I/O error occurs while checking EOF
1940 Checks for end-of-file and returns remaining data length. @return number of bytes remaining in the current chunk @throws IOException if reading fails
1941 Compares this entry's key with a byte array slice. @param buf source byte array @param offset starting index in the buffer @param length length of the byte array slice @return result of comparison (-1, 0, or 1)
1942 Closes writer resources and synchronizes buffered data. Ensures all data is flushed to the output stream before closing. @throws IOException if I/O error occurs during synchronization or closing
1943 Appends a key-value pair to the output buffers. @param key Object representing the key @param val Object representing the value @throws IOException if an I/O error occurs or class types do not match
1944 Appends raw key-value pair to the output buffer. @param keyData byte array containing key data @param keyOffset offset in keyData where key starts @param keyLength length of the key @param val ValueBytes object containing value data @throws IOException if an I/O error occurs
1945 Clones data from one Writable object to another. @param dst destination Writable object to clone into @param src source Writable object to clone from @throws IOException if an I/O error occurs during cloning
1946 Selects a random node within a specified scope, excluding certain nodes. @param scope the hierarchical scope for selection @param excludedNodes collection of nodes to exclude @return randomly chosen Node or null if not found
1947 Sorts nodes by distance from a reader node. @param reader source node for distance calculation @param nodes array of target nodes to sort @param activeLen length of active nodes in the array
1948 Sorts nodes by distance from a reader node using network location. @param reader source node for distance calculation @param nodes array of target nodes to sort @param activeLen length of active nodes in the array
1949 Initializes a new SocketInputStream. @param socket the Socket to read from @param timeout the timeout duration in milliseconds @throws IOException if the socket's channel is invalid or cannot be configured
1950 Initializes a new SocketInputStream from a given Socket. @param socket the Socket to read from @throws IOException if the socket's channel or timeout cannot be configured
1951 Initializes a SocketOutputStream with a socket and timeout. @param socket network socket for data transfer @param timeout operation timeout in milliseconds @throws IOException if initialization fails
1952 Adds a node to the network topology. @param node Node to be added Throws IllegalArgumentException if node is null, an inner node, or at an illegal location.
1953 Performs I/O operations on a buffer with timeout management. @param buf ByteBuffer containing data to read/write @param ops operation set (e.g., SelectionKey.OP_READ) @return number of bytes processed or -1 if closed, throws IOException on error
1954 Connects to a socket channel with a timeout. @param channel the SocketChannel to connect @param endpoint the remote address to connect to @param timeout maximum time in milliseconds to wait for connection @throws IOException if an I/O error occurs or connection times out
1955 Waits for I/O operations with a specified timeout. @param ops operation set to wait for (e.g., SelectionKey.OP_READ) @throws IOException if an I/O error occurs or timeout expires
1956 Retrieves default host for a specified network interface. @param strInterface name of the network interface or "default" @return default hostname @throws UnknownHostException if no such network interface exists
1957 Retrieves the default host for a specified network interface without fallback resolution. @param strInterface name of the network interface or "default" @param nameserver optional nameserver to use for DNS queries @return default hostname or cached hostname if none found @throws UnknownHostException if no such network interface exists
1958 Reattaches and registers UgiMetrics instance.
1959 Initializes a new instance of MutableInverseQuantiles with specified parameters. @param name metric name @param description metric description @param sampleName sample name component @param valueName value name component @param intervalSecs update interval in seconds
1960 Creates a new MutableQuantiles metric. @param name metric name @param desc metric description @param sampleName sample name component @param valueName value name component @param interval update interval in seconds @return newly created MutableQuantiles object @throws MetricsException if interval is non-positive or name validation fails
1961 Creates a new mutable metric without extended features. @param name unique metric name @param desc metric description @param sampleName sample identifier @param valueName value identifier @return MutableStat object representing the created metric
1962 Adds or updates a metric tag without overriding existing tags. @param name metric name @param description metric description @param value tag value associated with the metric @return MetricsRegistry instance for chaining
1963 Adds elapsed time for a metric. @param name metric identifier @param value time in milliseconds
1964 Records the queue time for a given priority level. @param priority the priority level of the RPC request @param queueTime the time spent in the queue in milliseconds
1965 Records processing time for a given priority level. @param priority scheduling priority level @param processingTime time taken to process in milliseconds
1966 Records overall processing time for an RPC call. @param rpcCallName name of the RPC call @param overallProcessingTime time in milliseconds
1967 Validates Kerberos configuration file path. Logs and checks system properties and environment variables for Kerberos config. Dumps the file content if found.
1968 Verifies a condition and logs an error if not met. @param condition boolean to check @param category error category @param message error message template @param args arguments for the message template @return true if condition is met, false otherwise
1969 Throws an exception if the specified condition is true. @param condition boolean condition to check @param category error category @param message error message template @param args arguments for the message template
1970 Creates a UserGroupInformation object for a remote user using SIMPLE auth. @param user the username of the remote user @return UserGroupInformation object representing the user
1971 Verifies a delegation token's password. @param identifier unique token identifier @param password byte array representing the token password @throws InvalidToken if token password does not match stored password
1972 Spawns an auto-renewal thread for keytab credentials. Checks if re-login is needed and retrieves the TGT. Schedules a renewal task if valid TGT exists.
1973 Constructs a Count object with command-line arguments and configuration. @param cmd array of command-line arguments @param pos starting position in the args array @param conf Configuration object for command execution
1974 Establishes a connection to ZooKeeper with authentication. @return connected ZooKeeper instance @throws IOException if connection fails @throws KeeperException for ZooKeeper errors
1975 Retrieves the next value from the specified key's queue. @param keyName unique identifier for the value queue @return the next value in the queue @throws IOException if an I/O error occurs @throws ExecutionException if execution fails
1976 Resolves a hostname to an InetAddress. @param hostname the hostname to resolve @return InetAddress for the given hostname @throws UnknownHostException if resolution fails
1977 Retrieves protocol signature for version validation. @param server RPC server implementing VersionedProtocol @param protocol fully qualified name of the protocol class @param clientVersion version of the client protocol @param clientMethodsHash hash code of methods on the client side @return ProtocolSignature object or null if no match @throws IOException if protocol class cannot be found
1978 Checks if a method is supported on the server. @param methodName name of the method to check @param parameterTypes parameter types of the method @return true if method is supported, false otherwise @throws IOException if communication fails or method is unsupported
1979 Validates RPC request headers. Throws exception if headers are missing required fields or have invalid operations.
1980 Deserializes a message from a buffer. @param message prototype message object @param buffer input buffer containing serialized data @return deserialized message of type T @throws RpcServerException if decoding fails
1981 Retrieves and removes the highest priority element from the queue. Attempts to acquire semaphore before removing; returns null if unsuccessful. @return The removed element or null if no elements are available or semaphore is not acquired
1982 Sets up a response for version mismatch between server and client. @param clientVersion the version of the client @throws IOException if an I/O error occurs during response setup
1983 Calculates total virtual memory size. Includes physical memory and swap space. @return Virtual memory size in bytes
1984 Initializes a HAR file input stream. @param fs Hadoop FileSystem instance @param p Path to the HAR file @param start Starting position in the file @param length Length of data to read @param bufsize Buffer size for reading @throws IOException if an I/O error occurs
1985 Evicts expired entries from the cache up to a limit. Uses monotonic time for expiration checks and ensures consistency.
1986 Evicts entries until cache size is within limit. @param sizeLimit maximum allowed cache size
1987 Generates a string representation of storage metrics. @param qOption include quota usage if true @param hOption use human-readable size format if true @param xOption exclude snapshot counts if true @return formatted summary string
1988 Generates a string representation of storage metrics. @param qOption include quota usage if true @param hOption use human-readable size format if true @param tOption include types quota usage if true @param types list of StorageType to consider @return formatted summary string
1989 Generates formatted quota usage string. @param hOption true for human-readable format, false for raw numbers @param tOption true to include specific storage types @param types list of StorageType enums (used if tOption is true) @return formatted quota and space usage string
1990 Waits for all provided CompletableFutures to complete. @param futures list of CompletableFutures to wait on @throws IOException if any task is cancelled or fails with an IOException
1991 Conditionally waits for a CompletableFuture to complete. @param future the CompletableFuture to wait on, or null to skip waiting @throws IOException if task is cancelled or fails with an IOException
1992 Updates CRC from a byte array. @param crcBuffer source byte array containing CRC data @param offset starting position in the byte array @param length number of bytes to process @param bytesPerCrc size of each CRC block in bytes @throws IOException if input validation fails or stripe boundary is exceeded
1993 Updates CRC with multiple data blocks from input stream. @param checksumIn DataInputStream containing CRC values @param numChecksumsToRead number of CRC values to read @param bytesPerCrc size of each data block in bytes @throws IOException if stripe boundary is exceeded without alignment
1994 Creates a new instance of a class with default arguments. @param theClass class to instantiate @param conf configuration object @return new instance of the class
1995 Retrieves the class of keys used in sequence files. @return Class object representing the key type
1996 Retrieves the value class for sequence file keys. @return Class object representing the value class or throws RuntimeException on error
1997 Executes actions based on command line inputs. @param args command line arguments: action and target name @return status code indicating success or error
1998 Constructs a FutureDataInputStreamBuilderImpl with file context and path. @param fc non-null file system context @param path non-null file system path @throws IOException if an I/O error occurs
1999 Creates a DataChecksum instance from a byte array. @param bytes source byte array containing checksum data @param offset starting index in the byte array @return DataChecksum object or throws InvalidChecksumSizeException if invalid
2000 Creates a DataChecksum instance from input stream. @param in DataInputStream containing checksum type and size @return DataChecksum object or throws InvalidChecksumSizeException if creation fails
2001 Executes shell command periodically. Checks interval before running; sets environment for macOS compatibility.
2002 Aggregates I/O statistics from a snapshot. @param snapshot the I/O statistics snapshot @param statistics additional statistics to aggregate @return true if aggregation is successful, false otherwise @throws UnsupportedOperationException if feature is not supported
2003 Creates an I/O statistics snapshot. @return Serializable object representing the snapshot @throws UnsupportedOperationException if feature is unavailable
2004 Creates an I/O statistics snapshot from the given source. @param source the source object for creating the snapshot @return Serializable representation of the I/O statistics snapshot @throws UnsupportedOperationException if snapshot creation is not supported
2005 Converts I/O statistics snapshot to JSON string. @param snapshot the I/O statistics snapshot object @return JSON representation of the snapshot @throws UncheckedIOException if an I/O error occurs @throws UnsupportedOperationException if feature is not supported
2006 Converts JSON string to I/O statistics snapshot. @param json JSON representation of the statistics @return Serializable I/O statistics snapshot object @throws UncheckedIOException if an IO error occurs @throws UnsupportedOperationException if feature is not supported
2007 Loads an I/O statistics snapshot for a specified file system and path. @param fs the FileSystem to load statistics from @param path the Path within the file system @return Serializable object representing the statistics snapshot @throws UncheckedIOException if an I/O error occurs @throws UnsupportedOperationException if the feature is not supported
2008 Retrieves an I/O statistics snapshot from the given source. @param source the source object to retrieve statistics from @return a Serializable object representing the I/O statistics snapshot @throws UnsupportedOperationException if I/O statistics retrieval is not supported
2009 Saves an I/O statistics snapshot to a file. @param snapshot the statistics snapshot to save (nullable) @param fs the FileSystem where the snapshot will be saved @param path the Path specifying the location of the snapshot file @param overwrite flag indicating if existing file should be overwritten @throws UncheckedIOException if an I/O error occurs @throws UnsupportedOperationException if saving snapshots is not supported
2010 Converts I/O statistics to a pretty string representation. @param statistics the I/O statistics object to convert @return a formatted string of I/O statistics
2011 Retrieves current I/O statistics context. @throws UnsupportedOperationException if I/O stats are not available
2012 Sets the I/O statistics context for the current thread. @param statisticsContext the context to set or null to clear it @throws UnsupportedOperationException if I/O statistics context is not available
2013 Resets I/O statistics context. Checks if context is available and invokes reset method. @throws UnsupportedOperationException if context not available
2014 Creates an I/O statistics context snapshot. @return Serializable object representing the snapshot @throws UnsupportedOperationException if I/O stats are unavailable
2015 Aggregates I/O statistics from a given source. @param source the source object containing I/O statistics @return true if aggregation is successful, false otherwise
2016 Compares two version strings. @param version1 the first version string @param version2 the second version string @return negative if version1 < version2, zero if equal, positive if version1 > version2
2017 Initializes a Counting Bloom Filter with specified parameters. @param vectorSize size of the bit vector @param nbHash number of hash functions @param hashType type of hash algorithm
2018 Constructs a Bloom filter with specified parameters. @param vectorSize size of the bit vector @param nbHash number of hash functions @param hashType type of hash algorithm
2019 Checks if a key is likely present in the Bloom filter. @param key the key to check for potential presence @return true if the key might be present, false otherwise
2020 Removes a key from the Bloom filter based on a specified removal scheme. @param k the key to remove @param scheme the removal strategy (RANDOM, MINIMUM_FN, MAXIMUM_FP, RATIO)
2021 Adds a deprecation warning for a configuration key. @param key the original configuration key being deprecated @param newKey the new key replacing the deprecated one @param customMessage custom message for users about the deprecation
2022 Adds a deprecation warning for a configuration key. @param key the original configuration key being deprecated @param newKeys array of new keys replacing the deprecated one
2023 Adds a deprecation warning for a configuration key. @param key the original configuration key being deprecated @param newKey the new key replacing the deprecated one
2024 Starts the HTTP server and initializes metrics. @throws IOException if an I/O error occurs during startup
2025 Writes a breadcrumb znode to indicate local node's activity. @param oldBreadcrumbStat existing znode stat or null if none exists @throws KeeperException if ZooKeeper operation fails @throws InterruptedException if thread is interrupted
2026 Attempts to delete the active node's breadcrumb in ZooKeeper. Ensures the node data matches expected app data before deletion. Handles exceptions and logs warnings if deletion fails.
2027 Reads multiple file ranges into ByteBuffers. Validates and sorts ranges, then reads data asynchronously. @param stream source of file data @param ranges list of FileRange objects to read @param allocate function to create ByteBuffer of appropriate size @throws EOFException if end of file is reached before reading
2028 Cancels all prefetch operations and caches ready blocks. @param none @return void
2029 Retrieves and returns buffer data for a specified block. @param blockNumber the block number to retrieve @return BufferData object containing the block's data @throws IOException if an I/O error occurs during retrieval
2030 Initializes FilePosition with file and block sizes. Validates that fileSize is non-negative and blockSize is positive if fileSize > 0. Resets buffer state to invalid initially. @param fileSize total size of the file @param blockSize size of each data block
2031 Checks if the current buffer's block is the last in the file. Utilizes block number derived from buffer's start offset. @return true if it's the last block, false otherwise
2032 Closes all FileSystem instances in the cache. Logs debug information before closing. @throws IOException if any FileSystem close operation fails
2033 Writes a character sequence to a specified file path using UTF-8 encoding. @param fs FileSystem instance @param path destination file path @param charseq content to write @return the FileSystem instance @throws IOException if an I/O error occurs
2034 Constructs a BlockLocation with specified parameters. @param names array of block names, interned if not null @param hosts array of block hosts, interned if not null @param offset starting offset of the block @param length length of the block @param corrupt true if the block is corrupted
2035 Constructs a non-corrupted BlockLocation. @param names array of block names, interned if not null @param hosts array of block hosts, interned if not null @param topologyPaths array of network paths, interned if not null @param offset starting offset of the block @param length length of the block
2036 Aggregates two mean statistics by copying the first and merging the second. @param l left MeanStatistic to copy @param r right MeanStatistic to merge into the copy of l @return aggregated MeanStatistic combining both inputs
2037 Takes a snapshot of IO statistics from the source. @param source the source IOStatistics object to snapshot
2038 Logs I/O statistics at debug level using a predefined logger. @param message Custom log message @param source Object containing I/O statistics
2039 Logs I/O statistics at a specified level. @param log Logger instance for logging @param level Logging level (INFO, ERROR, WARN) @param source Object containing I/O statistics
2040 Cleans up a remote iterator by logging statistics and closing it. @param source RemoteIterator to be cleaned up
2041 Tracks the duration of an invocation using a specified factory and statistic key. @param factory optional DurationTrackerFactory instance @param statistic key for the operation to track @param input function to execute and measure @throws IOException if input function throws an IO exception
2042 Reads and decrypts data from a specified position in the input stream. @param position starting position in the stream @param buffer destination buffer for decrypted data @param offset start index in the buffer @param length number of bytes to read and decrypt @return number of bytes read or -1 if end of stream is reached @throws IOException if an I/O error occurs or positioned read is unsupported
2043 Reads and decrypts data from a specified position in the stream. @param position starting position in the stream @param buffer destination buffer for decrypted data @param offset offset within the buffer to start writing @param length number of bytes to read and decrypt @throws IOException if an I/O error occurs or positioned reading is unsupported
2044 Reads and decrypts data from a specified position. @param position file position to read from @param buf buffer to store decrypted data @return number of bytes read or -1 if end of stream @throws IOException if an I/O error occurs
2045 Reads and decrypts data from a specified position in the input stream. @param position file position to read from @param buf buffer to store decrypted data @throws IOException if an I/O error occurs or positioned reads are unsupported
2046 Reads decrypted data into a ByteBuffer. @param buf destination buffer for decrypted data @return number of bytes read or -1 if end of stream @throws IOException if an I/O error occurs during reading or decryption
2047 Writes an object to a DataOutput stream. Handles various types including arrays, primitives, enums, and Writable objects. @param out the DataOutput stream to write to @param instance the object to serialize @param declaredClass the class of the object @param conf configuration settings @param allowCompactArrays flag to compact primitive arrays @throws IOException if an I/O error occurs
2048 Attempts to acquire a BufferData object for a specific block. @param blockNumber the block number to acquire @return BufferData object or null if not acquired immediately
2049 Returns the count of available BufferData objects. Releases buffers in DONE state before counting. @return number of available buffers
2050 Executes a task on a collection of items either sequentially or in parallel. @param task the task to execute for each item @return true if all tasks completed successfully, false otherwise @throws E if an exception occurs during task execution and not suppressed @throws IOException if an IO error occurs while iterating through items
2051 Processes multiple file system paths. @param parent parent PathData object @param items variable number of PathData objects to process @throws IOException if an I/O error occurs during processing
2052 Resolves file status to path handle using given options. @param fs FileSystem instance @param opt optional handling options for file resolution @return Function that resolves FileStatus to PathHandle based on options
2053 Creates a ShellCommandExecutor to fetch groups for a user. @param userName username to retrieve group information for @return ShellCommandExecutor instance configured with the command and timeout
2054 Creates a ShellCommandExecutor to fetch group IDs for a user. @param userName the username @return ShellCommandExecutor configured with command and timeout
2055 Reads credentials from a DataInput stream. @param in input stream containing serialized credentials @throws IOException if an I/O error occurs
2056 Collects delegation tokens from the issuer and its children. @param issuer the token issuer @param renewer entity that can renew the token @param credentials where tokens are stored @param tokens list to collect tokens into @throws IOException if an I/O error occurs during retrieval
2057 Adds a token to the user's credentials. @param alias unique identifier for the token @param token the token to add @return always true after adding the token
2058 Converts a relative path to an absolute path using the specified working directory. @param workDir the base directory for conversion @param path the path to convert @return the absolute path
2059 Makes a given path absolute using a working directory. @param workDir the base directory for relative paths @param path the path to be made absolute @return an absolute Path object
2060 Converts a Hadoop Path to a local Java File. @param path Hadoop Path object to convert @return Java File object representing the same path
2061 Fixes relative paths based on the working directory. @param p input path to be fixed @return absolute path if input is relative, otherwise unchanged
2062 Makes a path fully qualified using default URI and working directory. @param defaultUri default URI for the file system @param workingDir current working directory @return fully qualified Path object
2063 Returns the current working directory URI as a Path object. @return Path representing the working directory
2064 Returns the home directory path. Constructs and returns a Path object using the URI's string representation. @return Path representing the home directory
2065 Retrieves the current working directory on the SFTP server. @param channel the active SFTP channel @return Path object representing the home directory or null if an error occurs
2066 Retrieves file status for a given path. @param fs FileSystem instance to operate on @param pathString the path to check @param ignoreFNF flag to ignore FileNotFoundException @return FileStatus object or null if not found and ignored
2067 Returns the file path associated with this exception. @return Path object representing the affected file path
2068 Retrieves the target path as a Path object. @return Path object representing the target file path or null if not set
2069 Retrieves total length of content at root directory. @return Total length as a long value @throws IOException if an I/O error occurs
2070 Initializes a ChRootedFileSystem with a specified root directory. @param fs underlying FileSystem @param uri URI representing the root path @throws IOException if an I/O error occurs
2071 Constructs the remaining path from an array of path components. @param path array of path components @param startIndex index to start constructing the remaining path @return constructed Path object or SlashPath if startIndex exceeds path length
2072 Constructs a merged path from directory links. @return Path object representing the combined target link
2073 Constructs a Path by resolving a child path against a parent path. @param parent the parent directory as a string @param child the child path as a string to resolve
2074 Constructs a Path by resolving a child path against a parent path. @param parent the parent Path @param child the child path as a String
2075 Constructs a Path by resolving a child path against a parent string. @param parent the parent directory as a String @param child the child Path to resolve
2076 Renames a MapFile directory. @param fs FileSystem instance @param oldName current directory name @param newName new directory name @throws IOException if rename fails
2077 Converts a File object to a Path object. @param f the File to convert @return Path representation of the given File
2078 Unnests a URI, removing any nested authority part. @param nestedUri the original URI with potential nesting @return a new Path object representing the unnested URI
2079 Converts an array of strings to an array of Paths. @param str array of file system path strings @return array of Path objects or null if input is null
2080 Removes scheme and authority from a given path. @param path original file system path @return Path object without scheme and authority
2081 Merges two paths, ensuring proper URI components. @param path1 base path @param path2 path to append @return merged Path object
2082 Checks if the path exists and meets directory requirements. @param typeRequirement specifies the expected file type (directory or not) @throws PathIOException if path does not exist or does not meet requirements
2083 Generates a string for a child path. @param childPath the child path to process @return concatenated string of parent and child paths
2084 Throws an exception if the specified path does not exist. @param item PathData object representing the file or directory @throws PathNotFoundException if the path is not found
2085 Retrieves the AbstractFileSystem for a given path. @param absOrFqPath absolute or fully qualified file system path @return AbstractFileSystem object @throws UnsupportedFileSystemException if the file system is not supported @throws IOException if an I/O error occurs
2086 Creates a directory with specified permissions. @param fs FileSystem instance @param dir Path of the directory to create @param permission FsPermission for the new directory @return true if successful, false otherwise
2087 Constructs a LocatedFileStatus object with detailed file attributes and block locations. @param length size of the file in bytes @param isdir true if the path is a directory, false otherwise @param block_replication replication factor for blocks @param blocksize size of each block in bytes @param modification_time last modification time in milliseconds since epoch @param access_time last access time in milliseconds since epoch @param permission file permissions @param owner user who owns the file @param group group associated with the file @param symlink path to a symlink if this represents one, null otherwise @param path full path of the file or directory @param attr set of attribute flags for the file @param locations array of block locations
2088 Appends a key-value pair to the SequenceFile. @param key the key object to be written @param val the value object to be written @throws IOException if there's an I/O error or class mismatch
2089 Writes key-value pairs from an iterator to a SequenceFile. @param records iterator providing raw key-value data @param writer destination for writing the sequence file @throws IOException if an I/O error occurs during writing
2090 Initializes the service with a configuration. @param conf Configuration object to be applied
2091 Stops the service if not already stopped. Handles exceptions and notifies listeners of state changes.
2092 Checks if this private token is a clone of the given public service. @param thePublicService the public service to compare against @return true if this token is a clone of the provided public service, false otherwise
2093 Checks if the token's service matches the given alias. @param token the delegation token to check @param alias the text alias to compare against @return true if the alias is null or matches the token's service, false otherwise
2094 Matches service name with URL or given service text. @param fetcher DtFetcher instance to retrieve service name @param service Text representing the service to match @param url String URL to compare against @return true if service matches, false otherwise
2095 Validates and creates a directory if it doesn't exist. @param dir the File object representing the directory to check/create @throws DiskErrorException if directory cannot be created or lacks proper permissions
2096 Checks and validates directory with disk I/O operations. @param dir the File object representing the directory to validate @throws DiskErrorException if validation fails or directory issues are detected
2097 Flushes all buffered data to the file system. @throws IOException if an I/O error occurs during flushing
2098 Validates decoded data by comparing it with original input. @param inputs array of ByteBuffer objects containing encoded data @param erasedIndexes indices of erased blocks to be reconstructed @param outputs array of output ByteBuffers for decoded data @throws IOException if an I/O error occurs during validation
2099 Decodes erasure-coded data from ECChunk arrays. Converts chunks to ByteBuffers and delegates decoding. @param inputs array of input ECChunks containing encoded data @param erasedIndexes indices of erased blocks to be reconstructed @param outputs array of output ECChunks for decoded data @throws IOException if an I/O error occurs during decoding
2100 Closes the block appender, finalizing data writing and updating block register. @throws IOException if an I/O error occurs during closure
2101 Cleans up resources by closing streams and deleting segment files if input preservation is disabled. @throws IOException if an I/O error occurs during cleanup
2102 Closes the BlockReader, releasing resources. Ensures proper resource management by finalizing block processing.
2103 Reads credentials from input stream. @param in DataInput source to read from @throws IOException if an I/O error occurs
2104 Reads the next raw key from a sequence file. Handles both compressed and uncompressed blocks. @param key buffer to store the read key @return length of the key or -1 if end reached @throws IOException if an I/O error occurs
2105 Retrieves the current value from the sequence file. @param val Writable object to store the retrieved value @throws IOException if an I/O error occurs during retrieval
2106 Retrieves the current value from the sequence file. @param val object to deserialize and configure @return deserialized value @throws IOException if an I/O error occurs
2107 Reads the next key-value pair from a sequence file. Handles both block-compressed and non-block compressed formats. @param key buffer to store the key data @param val buffer to store the value data @return length of the record or -1 if end reached @throws IOException if an I/O error occurs
2108 Reads the next raw value from a sequence file. @param val ValueBytes object to store the read value @return Length of the value read @throws IOException if an I/O error occurs
2109 Retrieves delegation token information from SQL. @param ident token identifier @return DelegationTokenInformation object @throws NoSuchElementException if token not found @throws RuntimeException on SQL or I/O errors
2110 Reads permission status from input stream. @param in DataInput stream to read data from @return PermissionStatus object initialized with data from the stream @throws IOException if an I/O error occurs while reading
2111 Reads an enum value from the input stream. @param in DataInput source to read from @param enumType class of the enum type @return enum value or throws IOException if reading fails
2112 Reads and processes access control list data from input. @param in DataInput source to read from
2113 Retrieves or creates a fixed ByteString for a given Text key. @param key source Text object to convert @return cached or newly created ByteString representation
2114 Converts a Token to its Protobuf representation. @param tok the input token object @return TokenProto object representing the token
2115 Constructs a delegation token identifier with specified attributes. @param kind type of the delegation token @param owner token owner @param renewer token renewer @param realUser associated user
2116 Invokes the method once with retry handling. @return CallReturn object containing result or exception
2117 Checks and reads the next key in TFile. @throws IOException if an I/O error occurs or end of file is reached
2118 Reads the value data into a BytesWritable object. @param value container for the read value data @return length of the value data in bytes @throws IOException if an I/O error occurs
2119 Writes the value data to an output stream. @param out OutputStream to write the value data to @return Total number of bytes written @throws IOException if I/O error occurs during writing
2120 Compares this entry's key with a byte array. @param buf source byte array @return result of comparison (-1, 0, or 1)
2121 Checks equality with another Entry based on key comparison. @param other object to compare @return true if keys are equal, false otherwise
2122 Retrieves a delegation token for secure authentication. @param url target URL for the operation @param token authentication token @param renewer user allowed to renew the token @param doAsUser user to impersonate @return delegation token object @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
2123 Renews a delegation token. @param url target URL for the operation @param token authentication token @param dToken delegation token object @param doAsUser user to impersonate @return new expiration time of the token in milliseconds @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
2124 Cancels a delegation token. @param url target URL for the operation @param token authentication token @param dToken delegation token object @param doAsUser user to impersonate @throws IOException if an I/O error occurs
2125 Selects a random node within a specified scope. @param scope hierarchical scope for selection @return randomly chosen Node or null if not found
2126 Sorts nodes by distance from a reader node. Adjusts reader if not in NetworkTopology tree. @param reader source node for distance calculation @param nodes array of target nodes to sort @param activeLen length of active nodes in the array
2127 Wraps a socket's input stream with a timeout. @param socket the socket to wrap @param timeout read timeout in milliseconds @return SocketInputWrapper instance @throws IOException if an I/O error occurs
2128 Retrieves an OutputStream for the given socket with a specified timeout. @param socket network socket for data transfer @param timeout operation timeout in milliseconds @return OutputStream for writing data to the socket @throws IOException if I/O error occurs
2129 Establishes a socket connection with a specified timeout. @param socket the Socket object to connect @param endpoint the remote address to connect to @param localAddr the local address to bind, or null if not needed @param timeout maximum time in milliseconds to wait for connection @throws IOException if an I/O error occurs or connection times out
2130 Registers an MBean with the platform MBean server. @param serviceName name of the service @param nameName base name of the metric @param properties extra attributes for the MBean @param theMbean the MBean instance to register @return ObjectName of registered MBean or null if registration fails
2131 Creates a new inverse quantiles metric. @param name unique metric name @param desc metric description @param sampleName sample name component @param valueName value name component @param interval update interval in seconds @return MutableQuantiles object @throws MetricsException if invalid interval or duplicate name
2132 Initializes a new RetryCache with specified parameters. @param cacheName name of the cache @param percentage memory usage percentage for capacity calculation @param expirationTime time before an entry expires
2133 Initializes metrics based on a given protocol. @param protocol the class representing the protocol
2134 Initializes metrics with given names. @param names array of metric identifiers
2135 Aggregates local metrics to global metrics. @param localStats concurrent map of local statistics
2136 Creates or retrieves a MutableRate metric. @param name metric name @param desc metric description @param extended flag for extended metrics @return MutableRate object
2137 Initializes rate metrics for methods in a given protocol. @param protocol the class representing the protocol
2138 Adds metrics for annotated methods in the source object. @param source object containing methods to be monitored @param method specific method to add metrics for
2139 Validates Kerberos authentication for a given UGI. @param messagePrefix prefix for error messages @param user UserGroupInformation object to validate
2140 Verifies if a file is valid for use. @param file the File to check @param category error category @param text description of the file being checked @return true if file exists, is a non-empty file, and is readable; false otherwise
2141 Validates the short name of a Kerberos principal. Logs warnings for non-simple names and throws exceptions on errors.
2142 Retrieves the UserGroupInformation for the token owner. @return UserGroupInformation object or null if owner is invalid
2143 Initializes a new Find instance with recursion enabled by default.
2144 Default constructor initializes the Count command with default streams.
2145 Forces a re-login using keytab. @throws IOException if an I/O error occurs during re-login
2146 Forces re-login using ticket cache, bypassing time checks. @throws IOException if an I/O error occurs during re-login
2147 Initiates a re-login using ticket cache. @throws IOException if an I/O error occurs during re-login
2148 Creates a socket address for a given host and port. Resolves the hostname using static resolution if available. @param host the hostname to resolve @param port the port number @return InetSocketAddress with resolved IP or unresolved if fails
2149 Retrieves the InetAddress for a given host if it is a local address. @param host hostname to resolve @return InetAddress of the local host or null if not found @throws SocketException on socket error
2150 Sends an RPC request over the network. @param call the RPC call to send @throws InterruptedException if thread is interrupted during sending @throws IOException if I/O error occurs while sending
2151 Processes incoming RPC requests, deserializes them, and prepares for execution. Handles tracing and caller context setup. Throws exceptions on errors. @param header request header containing metadata @param buffer contains serialized request data
2152 Sets up RPC response based on request status. @param call RPC call object @param status RPC status @param erCode error code proto @param rv writable response value @param errorClass exception class name @param error error message @throws IOException if I/O error occurs during setup
2153 Resets IP list and updates cache expiry. Reloads IPs from source and recalculates expiry time.
2154 Demonstrates system information retrieval on Linux. Initializes SysInfoLinux and prints various system metrics.
2155 Generates a string representation of storage metrics. @param qOption include quota usage if true @param hOption use human-readable size format if true @return formatted summary string
2156 Reads data from the input stream into a byte array. Handles multiple read operations until the requested length is met or end of stream is reached. @param b byte array to store read data @param off offset in the byte array @param len length of data to read @return number of bytes read or -1 if end of stream @throws IOException if an I/O error occurs
2157 Creates an expression instance. @param expressionClass class of the expression to create @param conf configuration object @return Expression instance or null if class is null
2158 Retrieves or creates a command instance by name. @param cmdName unique command identifier @param conf configuration object @return Command object or null if not found
2159 Creates a new instance of the key class. @return new instance of WritableComparable
2160 Creates a new instance of a Writable class. @param c Class type of the Writable instance @param conf configuration object @return new Writable instance configured with provided settings
2161 Retrieves a SocketFactory instance from a configuration property. @param conf Hadoop configuration object @param propValue fully qualified class name of the SocketFactory @return SocketFactory instance or throws RuntimeException if not found
2162 Decodes the token identifier. @return TokenIdentifier object or null if decoding fails
2163 Retrieves or creates a DiskValidator instance for the specified class. Uses a cache to ensure singleton-like behavior per class type. @param clazz subclass of DiskValidator to instantiate @return cached or newly created DiskValidator instance
2164 Constructs a DynamicBloomFilter with specified parameters. @param vectorSize size of the bit vector @param nbHash number of hash functions @param hashType type of hash algorithm @param nr initial number of records to manage
2165 Adds a new row to the Bloom filter matrix. Initializes a new BloomFilter and appends it to the existing matrix.
2166 Initializes a Retouched Bloom Filter with specified parameters. @param vectorSize size of the bit vector @param nbHash number of hash functions @param hashType type of hash algorithm
2167 Loads configuration properties into the provided Properties object. Handles resource loading and overlay updates. @param props target Properties object to load into @param startIdx index to start loading from in the resources list @param fullReload flag indicating whether to reload default resources
2168 Exits the election process. @param needFence indicates if fencing is required
2169 Reads multiple file ranges into ByteBuffers. @param ranges list of FileRange objects to read @param allocate function to create ByteBuffer of appropriate size @throws IOException if an I/O error occurs during reading
2170 Constructs a non-corrupted BlockLocation with specified parameters. @param names array of block names, interned if not null @param hosts array of block hosts, interned if not null @param offset starting offset of the block @param length length of the block
2171 Constructs a DurationStatisticSummary instance. @param key unique identifier for the statistic @param success indicates if the operation was successful @param count number of occurrences @param max maximum duration observed @param min minimum duration observed @param mean MeanStatistic object representing average duration, cloned if provided
2172 Aggregates statistics from another IOStatistics instance. @param source the source IOStatistics to aggregate data from @return true if aggregation was successful, false if source is null
2173 Constructs an IOStatisticsSnapshot. @param source the source IOStatistics object to snapshot, or null to initialize empty maps
2174 Iterates over a remote iterator, applying a consumer to each element. @param source RemoteIterator containing elements to process @param consumer Consumer function to apply to each element @return Count of processed elements
2175 Writes an object to a DataOutput stream. @param out the DataOutput stream to write to @param instance the object to serialize @param declaredClass the class of the object @param conf configuration settings @throws IOException if an I/O error occurs
2176 Requests a prefetch for a specified block number. @param blockNumber identifier of the block to prefetch
2177 Acquires a BufferData object for the specified block. @param blockNumber target block number to acquire @return acquired BufferData or throws exception if not successful
2178 Processes a single file system path argument. @param item PathData object representing the file or directory to process @throws IOException if an I/O error occurs during processing
2179 Processes multiple file system paths with optional grouping. @param parent parent PathData object @param itemsIterator RemoteIterator of PathData objects to process @throws IOException if an I/O error occurs during processing
2180 Resolves partial group names for a given user. @param userName username to resolve groups for @param errMessage error message if resolution fails @param groupNames comma-separated group names @return set of resolved group names @throws PartialGroupNameException if resolution fails due to errors or unsupported OS
2181 Executes a shell command with default settings. @param cmd array of strings representing the shell command to execute @return Command output as a string or empty if no output is available @throws IOException if command execution fails
2182 Executes a shell command with specified environment. @param env environment variables for the command execution @param cmd array of strings representing the shell command to execute @return Command output as a string or empty if no output is available @throws IOException if command execution fails
2183 Adds all credentials from another Credentials object. @param other the source Credentials object to copy from
2184 Merges credentials from another Credentials object. @param other source Credentials object to merge from
2185 Adds delegation tokens to the provided credentials. @param renewer entity that can renew the token @param credentials where tokens are stored @return array of added tokens @throws IOException if an I/O error occurs during retrieval
2186 Adds a token to the user's credentials. @param token the token to add @return true if token is added, false otherwise
2187 Sets the current working directory. @param newDir the new working directory path
2188 Sets the modification and access times of a file. @param p Hadoop Path object representing the file @param mtime new modification time in milliseconds, or -1 to leave unchanged @param atime new access time in milliseconds, or -1 to leave unchanged @throws IOException if an I/O error occurs or file does not exist
2189 Converts a Hadoop Path to a local Java File. @param path Hadoop Path object to convert @return Java File object representing the same path
2190 Converts a file path to its absolute URI representation. @param p the input file path @return the absolute path as a URI string
2191 Deprecated. Makes a path fully qualified using FileSystem's URI and working directory. @param fs FileSystem object containing URI and working directory @return fully qualified Path object
2192 Makes a given path fully qualified using the default file system URI and working directory. @param path the path to be qualified @return fully qualified Path object
2193 Makes a given path fully qualified using the file system's URI. @param path the path to qualify @return fully qualified Path object
2194 Lists file statuses in a directory. @param f the directory path to list @return FileStatus array of files and directories @throws IOException if an I/O error occurs
2195 Deletes a file or directory. @param f the path to delete @param recursive if true, deletes directories recursively @return true if deletion is successful, false otherwise @throws AccessControlException if permission is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException for other I/O errors
2196 Opens a file for reading. @param f the path of the file to open @return FSDataInputStream for reading the file @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException for other I/O errors
2197 Opens a file for reading. @param f the path to the file @param bufferSize size of the buffer used for reading @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2198 Truncates a file to a specified length. @param f the path of the file to truncate @param newLength the new length for the file @return true if truncation is successful, false otherwise @throws IOException if an I/O error occurs
2199 Sets the replication factor for a file. @param f the file path @param replication the desired replication factor @return true if successful, false otherwise
2200 Sets file permissions. @param f the file path @param permission new file permissions @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if operation is unsupported @throws IOException for other I/O errors
2201 Sets the owner of a file or directory. @param f path to the file or directory @param username new owner's username @param groupname new owner's group name @throws AccessControlException if permission is denied @throws UnsupportedFileSystemException if operation is not supported @throws FileNotFoundException if file does not exist @throws IOException for other I/O errors
2202 Sets modification and access times of a file. @param f the path to the file @param mtime new modification time in milliseconds since epoch @param atime new access time in milliseconds since epoch
2203 Retrieves the checksum of a file. @param f the file path @return FileChecksum object or null if not found @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws IOException for other I/O errors
2204 Retrieves the status of a file or directory. @param f path to the file or directory @return FileStatus object describing the file's metadata @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException for other I/O errors
2205 Checks access permissions for a given path. @param path the file or directory path to check @param mode the required access mode (e.g., read, write) @throws AccessControlException if access is denied @throws FileNotFoundException if the path does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException for other I/O errors
2206 Retrieves the status of a file or symlink. @param f path to the file or symlink @return FileStatus object representing the file or symlink @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException for other I/O errors
2207 Retrieves the target path of a symbolic link. @param f the input file path @return the target Path of the symlink @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException for other I/O errors
2208 Retrieves block locations for a specified file range. @param f the file path @param start the starting byte position @param len the length of the range in bytes @return an array of BlockLocation objects @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException if an I/O error occurs
2209 Retrieves file system status for a given path. @param f the input path to check @return FsStatus object representing the status of the file or directory @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException for other I/O errors
2210 Creates a symbolic link. @param target the path to the target file or directory @param link the path where the symlink should be created @param createParent if true, parent directories will be created if missing @throws IOException if an I/O error occurs
2211 Lists file statuses under a given path. @param f the path to list files from @return an iterator of FileStatus objects @throws IOException if an I/O error occurs
2212 Lists corrupt file blocks for a given path. @param path the file or directory path to check @return an iterator of paths representing corrupt blocks
2213 Lists located status of files in a directory. @param f path to the directory or file @return iterator over LocatedFileStatus objects
2214 Resolves and returns a set of AbstractFileSystem instances for the given path. @param f the input file path @return a set of AbstractFileSystem objects associated with the path @throws IOException if an I/O error occurs during resolution
2215 Modifies ACL entries for a given path. @param path the file or directory path @param aclSpec list of ACL entries to modify @throws IOException if an I/O error occurs
2216 Removes specified ACL entries from a file or directory. @param path the target path @param aclSpec list of ACL entries to remove @throws IOException if an I/O error occurs
2217 Removes default ACL from a file or directory path. @param path the file or directory path to remove default ACL from @throws IOException if an I/O error occurs
2218 Removes access control list from a file or directory. @param path the path to remove ACL from @throws IOException if an I/O error occurs
2219 Sets ACL for a specified path. @param path the file or directory path @param aclSpec list of ACL entries to set @throws IOException if an I/O error occurs
2220 Retrieves ACL status for a specified path. @param path the file or directory path @return AclStatus object representing the ACL settings @throws IOException if an I/O error occurs
2221 Sets an extended attribute on a file. @param path the target file path @param name the attribute name @param value the attribute value as bytes @param flag flags for setting the attribute
2222 Retrieves extended attribute value for a given path. @param path the file or directory path @param name the name of the extended attribute @return the value of the attribute as a byte array @throws IOException if an I/O error occurs
2223 Retrieves extended attributes for a file. @param path the path of the file to query @return a map of attribute names and values, or empty if none exist
2224 Retrieves extended attributes for a file. @param path the file path @param names list of attribute names to retrieve @return map of attribute names and their values @throws IOException if an I/O error occurs
2225 Removes an extended attribute from a file. @param path the file path (can be relative) @param name the name of the extended attribute to remove @throws IOException if an I/O error occurs
2226 Lists extended attributes of a file. @param path the file path to query @return list of attribute names or empty if none exist @throws IOException if an I/O error occurs
2227 Creates a snapshot of the specified path. @param path the path to create a snapshot for @param snapshotName name of the snapshot @return Path object representing the created snapshot
2228 Renames a snapshot of a file or directory. @param path the path to the file or directory containing the snapshot @param snapshotOldName current name of the snapshot @param snapshotNewName new name for the snapshot @throws IOException if an I/O error occurs
2229 Deletes a specified snapshot of a file or directory. @param path the path to the file or directory @param snapshotName name of the snapshot to delete @throws IOException if an I/O error occurs
2230 Ensures the storage policy is satisfied for a given path. @param path the file or directory path to satisfy storage policy for @throws IOException if an I/O error occurs
2231 Sets storage policy for a file or directory. @param path the file or directory path @param policyName the name of the storage policy to apply @throws IOException if an I/O error occurs
2232 Unsets storage policy for a file. @param src the source path of the file
2233 Retrieves the storage policy for a given file path. @param path the file path to check @return BlockStoragePolicySpi object representing the storage policy @throws IOException if an I/O error occurs
2234 Checks if a path has the specified capability. @param path file system path @param capability capability to check @return true if path supports capability, false otherwise @throws IOException on I/O errors
2235 Retrieves server defaults for a given file system path. @param path the input path to evaluate @return FsServerDefaults object containing server configuration settings @throws IOException on I/O errors during resolution
2236 Creates a multipart uploader for the specified base path. @param basePath root directory for uploads @return MultipartUploaderBuilder instance @throws IOException on I/O errors
2237 Retrieves the working directory on the SFTP server. Always returns the home directory as state is not maintained. @param client active SFTP channel @return Path object representing the working directory or null if an error occurs
2238 Refreshes file status by looking up the current path's metadata. @return FileStatus object representing the refreshed status @throws IOException if an I/O error occurs during lookup
2239 Retrieves total length of content at root directory. @return Total length as a long value @throws IOException if an I/O error occurs
2240 Resolves source path to destination using regex patterns and interceptors. @param srcPath original source file system path @param resolveLastComponent whether to resolve only the last component of the path @return ResolveResult object or null if no valid resolution can be found
2241 Checks if a file exists in any of the local directories. @param pathStr file path as a string @param conf Hadoop configuration @return true if file exists, false otherwise
2242 Deletes a MapFile directory and its associated data and index files. @param fs FileSystem instance for file operations @param name directory path of the MapFile to delete
2243 Determines the current log directory based on date and roll interval. @param now current date @return Path to the current log directory
2244 Creates a FileOutputStream for writing to a file with specified permissions. @param f the File object representing the target file @param permissions file permission mode @return FileOutputStream for writing @throws IOException if operation fails or security is skipped and an I/O error occurs
2245 Checks if source and target paths are in reserved raw directories. Throws PathOperationException if one path is in RESERVED_RAW and the other is not. @param src source file path @param target destination file path @return true if both paths are in RESERVED_RAW, false otherwise
2246 Retrieves the parent path. @return Parent Path object or null if at root or empty
2247 Retrieves the optional parent path of the current path. @return Optional containing the parent Path object or empty if at root or empty
2248 Retrieves an iterator for directory contents. @throws IOException if an I/O error occurs or path is not a directory
2249 Constructs FSDataOutputStreamBuilder with file context and path. @param fc FileContext for file system operations @param p Path to the file in the Hadoop file system @throws IOException if an I/O error occurs during setup
2250 Sets checksum verification for a file. @param verifyChecksum flag to enable or disable checksum verification @param f the file path @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException for other I/O errors
2251 Reads file status fields from input stream. @param in DataInput to read from @throws IOException if an I/O error occurs
2252 Constructs a LocatedFileStatus object with detailed file attributes and block locations. @param length size of the file in bytes @param isdir true if the path is a directory, false otherwise @param block_replication replication factor for blocks @param blocksize size of each block in bytes @param modification_time last modification time in milliseconds since epoch @param access_time last access time in milliseconds since epoch @param permission file permissions @param owner user who owns the file @param group group associated with the file @param symlink path to a symlink if this represents one, null otherwise @param path full path of the file or directory @param hasAcl true if the file has an ACL @param isEncrypted true if the file is encrypted @param isErasureCoded true if the file uses erasure coding @param locations array of block locations
2253 Appends a key-value pair to the MapFile. @param key the key object to be written @param val the value object to be written @throws IOException if there's an I/O error during writing
2254 Closes the service by stopping it. Handles exceptions and notifies listeners of state changes.
2255 Writes a single byte to the buffer. Flushes the buffer when it's full. @param b byte to write @throws IOException if an I/O error occurs
2256 Writes data to the output stream. @param b input byte array @param off starting offset in the byte array @param len number of bytes to write @return number of bytes written @throws IOException if an I/O error occurs
2257 Validates decoded data by converting ECChunk arrays to ByteBuffers. @param inputs array of ECChunk objects containing encoded data @param erasedIndexes indices of erased blocks to be reconstructed @param outputs array of output ECChunk objects for decoded data @throws IOException if an I/O error occurs during validation
2258 Finalizes a data block by compressing and closing it. @param bForceFinish flag to force block finalization regardless of size @throws IOException if an I/O error occurs during finalization
2259 Reads token storage from a DataInputStream. @param in input stream containing serialized tokens @throws IOException if an I/O error occurs or unsupported format is found
2260 Retrieves stale delegation tokens for cleanup. @return Map of TokenIdent to DelegationTokenInformation for expired or unused tokens
2261 Reads the next raw value from the sequence file. @param rawValue ValueBytes object to store the read value @return Length of the value read @throws IOException if an I/O error occurs
2262 Writes credentials to a DataOutput stream in Protobuf format. @param out the DataOutput stream to write to @throws IOException if an I/O error occurs
2263 Converts a Token to its Protobuf representation. @param tok the input token object @return TokenProto object representing the token
2264 Retrieves the next key-value entry from TFile. @return Entry object containing key and value @throws IOException if an I/O error occurs or end of file is reached
2265 Compares the current cursor key to another RawComparable. @param other the RawComparable to compare against @return result of comparison (-1, 0, or 1) @throws IOException if an I/O error occurs
2266 Retrieves both key and value from the entry. @param key container for the retrieved key data @param value container for the retrieved value data @throws IOException if an I/O error occurs
2267 Advances within the block by skipping n records. @param n number of records to skip @throws IOException if an I/O error occurs or end of file is reached
2268 Retrieves a delegation token for secure authentication. @param url target URL for the operation @param token authentication token @param renewer user allowed to renew the token @return delegation token object @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
2269 Renews a delegation token. @param url target URL for the operation @param token authentication token @param dToken delegation token object @return new expiration time of the token in milliseconds @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
2270 Cancels a delegation token without impersonation. @param url target URL for the operation @param token authentication token @param dToken delegation token object @throws IOException if an I/O error occurs
2271 Wraps a socket's input stream with its current timeout. @param socket the socket to wrap @return SocketInputWrapper instance @throws IOException if an I/O error occurs
2272 Retrieves an OutputStream for the given socket with default timeout. @param socket network socket for data transfer @return OutputStream for writing data to the socket @throws IOException if I/O error occurs
2273 Establishes a socket connection with a specified timeout. @param socket the Socket object to connect @param address the remote address to connect to @param timeout maximum time in milliseconds to wait for connection @throws IOException if an I/O error occurs or connection times out
2274 Collects and returns metrics from all registered sources. Clears existing metrics, captures snapshots, and builds a metrics buffer. @return MetricsBuffer containing aggregated metrics data
2275 Registers an MBean with default properties. @param serviceName name of the service @param nameName base name of the metric @param theMbean the MBean instance to register @return ObjectName of registered MBean or null if registration fails
2276 Retrieves or creates disk read/write metrics for a directory. @param dirName the directory name to monitor @return ReadWriteDiskValidatorMetrics instance for the specified directory
2277 Initializes RPC metrics for multiple priority levels. @param numLevels number of priority levels to initialize
2278 Collects and aggregates thread-local metrics to global metrics.
2279 Creates or retrieves a MutableRate metric with default description and non-extended flag. @param name metric name @return MutableRate object
2280 Creates or retrieves a MutableRate metric. @param name metric name @param description metric description @return MutableRate object
2281 Examines and prints details of a Kerberos keytab file. @param keytabFile the File representing the keytab to examine @throws IOException if an I/O error occurs during processing
2282 Validates JAAS configuration. @param jaasRequired flag indicating if JAAS is mandatory @throws IOException if file operations fail
2283 Determines the real owner of a delegation token. @param id TokenIdent object representing the token @return Real owner's username as a String
2284 Ensures the parent ZooKeeper node exists for election. Creates nodes recursively if they don't exist, sets ACLs. @throws IOException if creation or ACL setting fails @throws InterruptedException if thread is interrupted @throws KeeperException for ZooKeeper errors
2285 Retrieves active node data from ZooKeeper. Establishes connection if not present, then fetches data with retries. @return byte array of active node data @throws ActiveNotFoundException if active node does not exist @throws KeeperException for ZooKeeper errors @throws InterruptedException if thread is interrupted during execution @throws IOException if I/O error occurs
2286 Checks TGT validity and attempts synchronized re-login using keytab. @throws IOException if an I/O error occurs during re-login
2287 Attempts synchronized re-login using keytab without TGT validity check. @throws IOException if an I/O error occurs during re-login
2288 Retrieves a connectable address for a given socket address. Resolves unresolved addresses and replaces wildcard addresses with localhost. @param addr the input InetSocketAddress @return resolved InetSocketAddress suitable for connection
2289 Updates the connection address based on hostname and port. Logs a warning if the address changes. @throws IOException if socket creation fails
2290 Returns a canonical URI by resolving the hostname and normalizing the port. @param uri original URI to process @param defaultPort port to use if none is specified in the URI @return URI with canonical host and normalized port
2291 Initiates an RPC call to a remote service. @param rpcKind type of RPC (e.g., synchronous, asynchronous) @param rpcRequest request object to be sent @param remoteId unique identifier for the remote service @param serviceClass class of the service @param fallbackToSimpleAuth flag to enable simple authentication if needed @param alignmentContext context for RPC call alignment @return response data or null in asynchronous mode @throws IOException if an I/O error occurs during communication
2292 Waits for a cache entry to complete or adds a new one. @param newEntry the entry to process @return the completed or added cache entry
2293 Adds a new cache entry for a retryable request. @param clientId unique client identifier as a byte array @param callId unique identifier for the call
2294 Generates a string representation of storage metrics. @param qOption include quota usage if true @return formatted summary string without human-readable size format
2295 Retrieves an expression instance by name. @param expressionName name of the expression to retrieve @param conf configuration object @return Expression instance or null if not found
2296 Creates an Expression instance from a class name. @param expressionClassname fully qualified class name of the expression @param conf configuration object @return Expression instance or throws IllegalArgumentException if invalid classname
2297 Builds a description of recognized expressions. @param factory ExpressionFactory instance to create expressions @return Detailed description as a string
2298 Retrieves an Expression instance using the provided class. @param expressionClass class of the Expression to create @return Expression object or null if creation fails
2299 Retrieves or creates a command instance by name using default configuration. @param cmd unique command identifier @return Command object or null if not found
2300 Deserializes an object from a DataInput stream. @param in data input stream to read from @param objectWritable ObjectWritable instance (optional) @param conf Hadoop configuration settings @return deserialized object or null if reading fails
2301 Creates a new instance of a Writable class. @param c Class type of the Writable instance @return new Writable instance without configuration
2302 Decodes the identifier from a given token. @param token the token containing the identifier to be decoded @return TokenIdentifier object or null if decoding fails @throws IOException if an I/O error occurs during decoding
2303 Prints credentials to a stream. @param creds Credentials object containing tokens @param alias optional text alias to filter tokens by @param out PrintStream for output @throws IOException if an I/O error occurs during printing
2304 Retrieves a DiskValidator instance based on the specified name. @param diskValidator name of the validator to retrieve @return DiskValidator instance or throws DiskErrorException if not found
2305 Constructs an empty BlockLocation with default values.
2306 Retrieves block locations for a specified file range. @param file FileStatus object representing the file @param start Starting offset of the range @param len Length of the range @return Array of BlockLocation objects or empty array if no blocks found
2307 Fetches duration statistics for a given key and success status. @param source IOStatistics data source @param key unique identifier for the statistic @param success indicates if the operation was successful @return DurationStatisticSummary object containing statistical data
2308 Takes a snapshot of the current I/O statistics. @return IOStatisticsSnapshot object containing aggregated stats
2309 Creates an I/O statistics snapshot. @param statistics source IOStatistics object to snapshot @return IOStatisticsSnapshot of the provided statistics
2310 Creates an IOStatisticsSnapshot from a given source. @param source the source object, must be of type IOStatistics or null @return Serializable IOStatisticsSnapshot instance
2311 Converts a RemoteIterator to a List. @param source RemoteIterator containing elements to convert @return List of elements from the RemoteIterator @throws IOException if an I/O error occurs during iteration
2312 Processes a file system path argument. @param item PathData object representing the file or directory to process @throws IOException if an I/O error occurs during processing
2313 Retrieves Unix groups for a given user. @param user username to fetch group information for @return Set of group names or empty set if retrieval fails @throws IOException if an I/O error occurs during execution
2314 Executes a script command with multiple arguments in batches. @param args list of arguments to pass to the script @param commandScriptName name of the script to execute @return combined output of all executed commands or null on failure
2315 Reads the target of a symbolic link. @param f File object representing the symbolic link @return Target path as a string or empty if an error occurs
2316 Sets file permissions using native or shell commands. @param p Hadoop Path object @param permission FsPermission object representing new permissions @throws IOException if operation fails
2317 Executes shell command to fetch users for a given netgroup. @param netgroup name of the netgroup (without '@') @return command output as a string or empty if no output is available @throws IOException if command execution fails
2318 Creates a new Credentials object by copying from another. @param credentials source Credentials object to copy from
2319 Adds credentials to the user's credential set. @param credentials Credentials object containing new credentials
2320 Converts Hadoop Path to local Java File. @return Java File object or throws exception if not local path
2321 Ensures a directory exists and has the correct permissions. @param localFS LocalFileSystem instance @param dir Path to the directory @param expected Expected FsPermission for the directory @throws IOException if an I/O error occurs
2322 Retrieves file link status. @param f path to the file @param dereference whether to follow symbolic links @return FileStatus object with file details @throws IOException if an I/O error occurs
2323 Retrieves the root directory enclosing a given path. Qualifies paths for consistency across file systems. @param path the input path to evaluate @return fully qualified root Path object @throws IOException if an I/O error occurs
2324 Processes files marked for deletion on exit. Calls `delete` method for each file and clears the list.
2325 Checks if a file or directory exists. @param f path to the file or directory @return true if the file or directory exists, false otherwise
2326 Sets the current working directory. @param newWDir new working directory path @throws IOException if an I/O error occurs or if the path is invalid
2327 Checks destination path validity for file operations. @param srcName source file name, null if directory check only @param dst destination path @param overwrite flag to allow overwriting existing files @throws AccessControlException if access is denied @throws IOException for other I/O errors or existence conflicts
2328 Retrieves content summary for a given path. @param f path to the file or directory @return ContentSummary object with total length, file count, and directory count @throws IOException if an I/O error occurs
2329 Retrieves delegation tokens for a given path. @param p file path for which to fetch tokens @param renewer entity that can renew the token @return list of delegation tokens or empty list if none found
2330 Sets an extended attribute on a file with default flags. @param path the target file path @param name the attribute name @param value the attribute value as bytes
2331 Creates a snapshot of the specified path. @param path the path to create a snapshot for @return Path object representing the created snapshot
2332 Initializes the MultipartUploaderBuilderImpl with file context and path. @param fc FileContext for file operations @param p Path to the file system location @throws IOException on I/O errors during initialization
2333 Waits for file recovery and truncation completion. @throws IOException if an I/O error occurs during the process
2334 Attempts to resolve a source path using registered regex mount points. @param srcPath original source file system path @param resolveLastComponent whether to resolve only the last component of the path @return ResolveResult object if resolved, otherwise null
2335 Checks file existence in a local directory. @param pathStr file path as a string @param conf Hadoop configuration @return true if file exists, false otherwise
2336 Retrieves the relative path within a HAR archive. @param path original file path @return relative path inside the HAR or null if not found
2337 Generates the path for the checksum file associated with a given file. @param file the original file path @return Path object representing the checksum file
2338 Checks if the parent directory or file exists. @return true if the parent exists, false otherwise
2339 Creates a directory with specified permissions. @param f path to the directory @param absolutePermission permissions for the directory @param createParent flag to indicate if parent directories should be created @throws IOException if directory creation fails or parent does not exist
2340 Renames a source path to a destination path with optional overwrite. @param src source file or directory path @param dst destination file or directory path @param options rename options (e.g., OVERWRITE) @throws IOException if an I/O error occurs
2341 Constructs the path for the checksum file associated with a given file. @param file the original file path @return Path object representing the checksum file
2342 Validates if a path is under a given base path. @param p the path to validate @param basePath the base path to compare against @return true if p is under or equals basePath, false otherwise
2343 Checks if the path is at the root. @return true if the path has no parent, false otherwise
2344 Appends a suffix to the current path. @param suffix string to append @return new Path object with the appended suffix
2345 Qualifies symlink target path. @param pathURI URI of the source path @param pathWithLink path containing the symlink @param target symlink target path @return qualified Path object or original target if already qualified
2346 Renames a source path to a destination path. Handles overwrite and checks for various exceptions. @param src source path @param dst destination path @param overwrite flag to allow overwriting the destination @throws AccessControlException if access is denied @throws FileAlreadyExistsException if destination exists and not overwritten @throws FileNotFoundException if source does not exist @throws ParentNotDirectoryException if parent of destination is a file @throws UnresolvedLinkException if symlink cannot be resolved @throws IOException on I/O errors
2347 Constructs a FileStatus object for a non-symlink file or directory. @param length size of the file in bytes @param isdir true if the path is a directory, false otherwise @param block_replication replication factor for blocks @param blocksize size of each block in bytes @param modification_time last modification time in milliseconds since epoch @param access_time last access time in milliseconds since epoch @param permission file permissions @param owner user who owns the file @param group group associated with the file @param path full path of the file or directory
2348 Constructs a new FileStatus object by copying attributes from another FileStatus. @param other source FileStatus to copy from @throws IOException if symlink path retrieval fails
2349 Constructs a LocatedFileStatus object with detailed file attributes and block locations. @param stat FileStatus object containing basic file metadata @param locations Array of BlockLocation objects representing data block locations
2350 Constructs a LocatedFileStatus object with specified file attributes. @deprecated Use the constructor with explicit ACL, encryption, and erasure coding flags. @param length size of the file in bytes @param isdir true if the path is a directory, false otherwise @param block_replication replication factor for blocks @param blocksize size of each block in bytes @param modification_time last modification time in milliseconds since epoch @param access_time last access time in milliseconds since epoch @param permission file permissions @param owner user who owns the file @param group group associated with the file @param symlink path to a symlink if this represents one, null otherwise @param path full path of the file or directory @param locations array of block locations
2351 Appends a Writable object to the MapFile. @param value the Writable object to append @throws IOException if there's an I/O error during writing
2352 Writes data to the output stream. @param b input byte array @param off starting offset in the byte array @param len number of bytes to write @throws IOException if an I/O error occurs or array index is out of bounds
2353 Ensures proper finalization of Bzip2 compression. Calls finish() to complete the compression process and releases resources.
2354 Moves cursor to end of TFile. @throws IOException if an I/O error occurs
2355 Closes the Scanner by parking the cursor at EOF. @throws IOException if an I/O error occurs
2356 Reads token storage from a file. @param filename file containing serialized tokens @param conf configuration settings (unused) @return Credentials object populated with tokens @throws IOException if an I/O error occurs
2357 Advances to the next record within the current block. @param key target key for comparison @param greater true if seeking a key greater than or equal to the target @return true if matching key found, false otherwise @throws IOException if an I/O error occurs
2358 Publishes metrics immediately to all registered sinks. Collects current metrics and publishes them without delay.
2359 Initializes metrics tracking for a specified RPC protocol. @param protocol the class representing the RPC protocol to track
2360 Aggregates thread-local metrics to global metrics.
2361 Adds a data point to a metric. @param name metric name @param value data point to be added
2362 Updates statistics for token owners. @param id TokenIdent object representing the token
2363 Decrements the count of tokens for a given owner's stats. @param id TokenIdent object representing the token to be removed
2364 Retrieves the current active service target. @return HAServiceTarget object representing the active service or null if not found @throws IOException for I/O errors during ZooKeeper interaction @throws InterruptedException if thread is interrupted during execution
2365 Initializes the ActiveStandbyElector with ZooKeeper configuration. Validates and sets up necessary parameters, establishes a ZooKeeper connection. @param zookeeperHostPorts comma-separated list of ZooKeeper host:port pairs @param zookeeperSessionTimeout session timeout in milliseconds @param parentZnodeName parent znode name for election coordination @param acl access control list for ZooKeeper nodes @param authInfo authentication information for ZooKeeper connection @param app callback interface for application-specific logic @param maxRetryNum maximum number of retries for establishing connection @param failFast if true, attempts to create a connection immediately; otherwise, retries with backoff @param truststoreKeystore keystore configuration for secure connections @throws IOException if connection fails or is interrupted @throws HadoopIllegalArgumentException for invalid arguments @throws KeeperException for ZooKeeper errors
2366 Creates a socket address for a given target with hostname resolution. @param target the string representation of the target @param defaultPort the default port to use if not specified in target @param configName configuration property name for error messages @param useCacheIfPresent whether to cache and reuse existing URIs @return InetSocketAddress with resolved IP or unresolved if fails
2367 Retrieves connectable address for given server. @param server the input Server object @return resolved InetSocketAddress suitable for connection
2368 Initiates an RPC call to a remote service. @param rpcKind type of RPC (e.g., synchronous, asynchronous) @param rpcRequest request object to be sent @param remoteId unique identifier for the remote service @param fallbackToSimpleAuth flag to enable simple authentication if needed @return response data or null in asynchronous mode @throws IOException if an I/O error occurs during communication
2369 Processes a retryable request by checking if it should be skipped or added to the cache. @param cache RetryCache instance managing the requests @param clientId unique client identifier @param callId unique call identifier @return CacheEntry object for the processed request or null if skipped or invalid cache
2370 Processes a request for caching retryable calls. @param cache RetryCache instance managing the cache entries @param payload data associated with the request @param clientId unique client identifier @param callId unique call identifier @return CacheEntryWithPayload object or null if skipped
2371 Retrieves an Expression instance by name using the configuration. @param expressionName name of the expression to retrieve @return Expression instance or null if not found
2372 Retrieves a comparator for the specified class. @param c class of WritableComparable to compare @param conf configuration settings @return WritableComparator instance for the given class
2373 Initializes a WritableComparator. @param keyClass class of keys to compare
2374 Initializes a LocalDirAllocator with a specific context configuration item. @param contextCfgItemName name of the context configuration item
2375 Updates deprecated properties using new keys. Applies values from new keys to deprecated keys in both main and overlay configurations.
2376 Creates a copy of the given Configuration. @param other Configuration object to clone
2377 Adds a configuration resource from another Configuration object. @param conf source Configuration object to add resources from
2378 Retrieves alternative configuration names for a given key. @param name the original configuration key @return array of alternative keys or null if none exist
2379 Retrieves property sources by name. @param name the configuration property key @return array of source paths or null if not found
2380 Returns the number of configuration properties. @return int count of configuration settings
2381 Clears all configuration properties and overlay settings.
2382 Returns an iterator over configuration properties as string key-value pairs. @return Iterator of Map.Entry<String, String> containing config settings
2383 Retrieves configuration values matching a regex pattern. @param regex regular expression to filter keys @return Map of matched key-value pairs with variable substitution applied
2384 Reads multiple file ranges into ByteBuffers with checksum validation. @param ranges list of FileRange objects to read @param allocate function to create ByteBuffer of appropriate size @throws IOException if an I/O error occurs during reading
2385 Retrieves buffer data for a given block number with retry mechanism. @param blockNumber target block number to retrieve @return BufferData object if successful, throws IOException or IllegalStateException on failure
2386 Waits for files in the waitList to reach the desired replication level. Prints status and warnings during the process.
2387 Retrieves block locations for a specified path range. @param p Path object representing the file @param start Starting offset of the range @param len Length of the range @return Array of BlockLocation objects or empty array if no blocks found
2388 Fetches success duration statistics for a given key. @param source IOStatistics data source @param key unique identifier for the statistic @return DurationStatisticSummary object containing statistical data for successful operations
2389 Creates an IOStatisticsSnapshot from null source. @return Serializable IOStatisticsSnapshot instance with default values
2390 Retrieves and converts I/O statistics to a snapshot. @param source object containing or providing I/O statistics @return Serializable IOStatisticsSnapshot instance or null if stats are unavailable
2391 Converts a RemoteIterator to an array. @param source RemoteIterator containing elements to convert @param a array to hold the converted elements @return array of elements from the RemoteIterator @throws IOException if an I/O error occurs during iteration
2392 Renews a delegation token. @param token the token to be renewed @param renewer user attempting to renew the token @return new expiration time of the token in milliseconds @throws InvalidToken if the token is invalid or expired @throws IOException if an I/O error occurs
2393 Cancels a delegation token. @param token Token to cancel @param canceller User attempting to cancel the token @return TokenIdent of the canceled token @throws IOException if operation fails
2394 Processes a list of file system path arguments. Iterates through each PathData, calls processArgument, and handles exceptions by displaying errors. @param args LinkedList of PathData objects to process @throws IOException if an I/O error occurs during processing
2395 Retrieves groups for a specified user. @param userName username to fetch group information for @return List of group names or empty list if retrieval fails @throws IOException if an I/O error occurs during execution
2396 Retrieves the number of hard links for a given file. @param fileName the file to check @return count of hard links or throws IOException if an error occurs
2397 Creates a symbolic link. @param target path to the target file or directory @param linkname path where the symlink should be created @return exit code of the shell command execution @throws IOException if an I/O error occurs
2398 Changes file or directory permissions. @param filename path to the file or directory @param perm permission string (e.g., "755") @param recursive true if applied recursively @return exit code of the shell command execution @throws IOException if an I/O error occurs during execution
2399 Checks if the 'setsid' command is supported on the current system. Uses ShellCommandExecutor to test execution. Returns false for Windows. Handles IOException, SecurityException, and specific Error cases.
2400 Sets the owner and/or group of a file. @param file target file to modify @param username new user owner (can be null) @param groupname new group owner (can be null) @throws IOException if setting ownership fails
2401 Retrieves users for a specified netgroup. @param netgroup name of the netgroup (without '@') @return list of usernames or empty if no users found @throws IOException if command execution fails
2402 Retrieves and returns user credentials, filtering out private tokens. @return Credentials object with non-private tokens
2403 Lists file statuses in a directory and filters them. @param f the directory path to list @param filter PathFilter to apply to files @return array of filtered FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if the directory does not exist @throws IOException if an I/O error occurs
2404 Lists file statuses for multiple paths. @param files array of file paths to check @param filter PathFilter to apply to each path @return array of filtered FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if a path does not exist @throws IOException if an I/O error occurs
2405 Resolves a filesystem path to its target. @param p the file system path to resolve @param resolveLastComponent whether to resolve only the last component of the path @return ResolveResult object with resolved details @throws IOException if an I/O error occurs during resolution
2406 Sets the replication factor for a file and its checksum file. @param src source file path @param replication desired replication factor @return true if successful, false otherwise
2407 Deletes a file or directory from the filesystem. @param f Path to the file or directory to delete @param recursive if true, delete directories recursively @return true if deletion is successful, false otherwise
2408 Renames a file or directory and its associated checksum file. @param src source path to rename from @param dst destination path to rename to @return true if rename is successful, false otherwise
2409 Deletes a file or directory in the Hadoop file system. Handles checksum files associated with regular files. @param f Path to the file or directory @param recursive if true, deletes directories recursively @return true if deletion is successful, false otherwise
2410 Determines if the source path is an ancestor of the target path. @param source PathData object representing the potential ancestor @param target PathData object representing the descendant @return true if source is an ancestor of target, false otherwise
2411 Constructs a full path by combining the root path and given path. @param path relative or absolute path to be combined with the root @return Path object representing the full path in the file system
2412 Strips the root path from a given file path. @param p Path object representing the file or directory @return String with the root path removed, or empty if at root
2413 Strips the root directory from a given file path. @param p Path object representing the file or directory @return String with root directory removed, empty if at root @throws IOException if path validation fails
2414 Resolves symbolic links for a given file path. @param fc FileContext object managing the filesystem operations @param path Path to be resolved @return Resolved path or original path if no symlinks are present @throws IOException if an I/O error occurs or symlink resolution fails
2415 Renames a source path to a destination path with specified options. Parses options for overwrite permission and delegates to renameInternal. @param src source path @param dst destination path @param options optional Rename options (e.g., OVERWRITE) @throws AccessControlException if access is denied @throws FileAlreadyExistsException if destination exists and not overwritten @throws FileNotFoundException if source does not exist @throws ParentNotDirectoryException if parent of destination is a file @throws UnresolvedLinkException if symlink cannot be resolved @throws IOException on I/O errors
2416 Converts HarStatus to FileStatus. @param h HarStatus object representing archive entry @return FileStatus object with metadata from HAR entry @throws IOException if an I/O error occurs during conversion
2417 Constructs a FileStatus object for an FTP file. @param ftpFile the FTP file to create status for @param parentPath the path of the parent directory @return FileStatus object representing the FTP file's metadata
2418 Verifies token storage file. @param tokenFile file containing serialized tokens @param conf configuration settings (unused) @param category error category @param message error message template @return true if verification passes, false otherwise
2419 Prints delegation tokens from a file to a stream. @param tokenFile file containing serialized tokens @param alias optional text alias to filter tokens by @param conf configuration settings (unused) @param out PrintStream for output @throws IOException if an I/O error occurs
2420 Syncs local cache with ZooKeeper for delegation tokens. @param ident TokenIdent object containing token details
2421 Initializes a MetricsSystemImpl with a given prefix. @param prefix unique identifier for the metrics system
2422 Processes an RPC call by invoking the specified method on a service. @param server the RPC server handling the request @param connectionProtocolName name of the protocol used for communication @param request buffer containing the serialized request data @param methodName name of the method to be invoked @param protocolImpl implementation details of the RPC protocol @return wrapped response from the service or null if deferred @throws Exception if an error occurs during processing
2423 Adds an elapsed time to a metric. @param name metric name @param elapsed time in milliseconds
2424 Adds a persisted delegation token. @param identifier token identifier @param renewDate token renewal timestamp @throws IOException if adding fails or SecretManager is running
2425 Synchronizes token owner statistics by clearing and updating them.
2426 Removes expired delegation tokens and logs the cleanup. @throws IOException if an I/O error occurs during removal
2427 Initializes the ActiveStandbyElector with ZooKeeper configuration. @param zookeeperHostPorts comma-separated list of ZooKeeper host:port pairs @param zookeeperSessionTimeout session timeout in milliseconds @param parentZnodeName parent znode name for election coordination @param acl access control list for ZooKeeper nodes @param authInfo authentication information for ZooKeeper connection @param app callback interface for application-specific logic @param maxRetryNum maximum number of retries for establishing connection @param truststoreKeystore keystore configuration for secure connections @throws IOException if connection fails or is interrupted @throws HadoopIllegalArgumentException for invalid arguments @throws KeeperException for ZooKeeper errors
2428 Joins the leader election process. Validates input data and initiates internal election logic. @param data application-specific data for election participation @throws HadoopIllegalArgumentException if data is null
2429 Creates a socket address with hostname resolution. @param target string representation of the target @param defaultPort default port to use if not specified in target @param configName configuration property name for error messages @return InetSocketAddress with resolved IP or unresolved if fails
2430 Invokes a remote method using RPC. @param proxy client-side proxy object @param method method to invoke remotely @param args arguments for the method call @return deserialized response message or null if asynchronous @throws ServiceException if an error occurs during invocation
2431 Invokes a remote method via RPC. @param proxy proxy object for the remote service @param method Method object representing the remote procedure to be invoked @param args array of arguments for the method call (RpcController + Message) @return deserialized Protobuf Message instance or null in asynchronous mode @throws ServiceException if an error occurs during invocation
2432 Parses expressions from a deque of arguments. @param args deque containing search expression arguments @return parsed Expression object @throws IOException if an unexpected argument is encountered
2433 Retrieves a comparator for the specified class using default configuration. @param c class of WritableComparable to compare @return WritableComparator instance for the given class
2434 Authenticates user using delegation tokens or fallbacks to another handler. @param request HTTP servlet request object @param response HTTP servlet response object @return AuthenticationToken if authentication is successful, null otherwise @throws IOException if I/O error occurs during token processing @throws AuthenticationException if authentication fails
2435 Handles configuration key deprecation. @param deprecations context for deprecated configuration keys @param name original configuration property name @return array of updated property names, including deprecated replacements
2436 Sets configuration properties as environment variables. @param env map to store environment variables
2437 Cancels a delegation token. @param token Token to cancel @param canceller User attempting to cancel the token @return TokenIdent of the canceled token @throws IOException if operation fails
2438 Retrieves all groups for a specified user. Combines base Unix groups with netgroups. @param user username to fetch group information for @return List of group names including both Unix and netgroups @throws IOException if an I/O error occurs during execution
2439 Extracts files from a tar archive. @param inFile the input tar file @param untarDir the target directory for extraction @throws IOException if an I/O error occurs during extraction
2440 Changes file or directory permissions. @param filename path to the file or directory @param perm permission string (e.g., "755") @return exit code of the shell command execution @throws IOException if an I/O error occurs during execution
2441 Sets file readability. @param f the file to modify @param readable true if the file should be readable, false otherwise @return true if operation is successful, false otherwise
2442 Sets file writable status. @param f File to modify permissions for @param writable desired writable status @return true if operation successful, false otherwise
2443 Sets file executable permission. @param f File object to modify @param executable true to set as executable, false otherwise @return true if successful, false otherwise
2444 Loads file permission information using native I/O if available, otherwise falls back to non-native I/O.
2445 Sets the owner and/or group of a file. @param p Hadoop Path object representing the target file @param username new user owner (can be null) @param groupname new group owner (can be null) @throws IOException if setting ownership fails
2446 Sets file permissions for a given file. @param f the target file @param permission desired file permissions @throws IOException if operation fails
2447 Caches netgroups by adding their users to the cache. @param groups list of netgroup names (with '@' for netgroups) @throws IOException if command execution fails
2448 Dumps all tokens associated with a user. @param ugi UserGroupInformation object containing user credentials
2449 Logs user information and tokens if debug is enabled. @param log Logger instance for logging @param caption Description of the log entry @param ugi UserGroupInformation object containing user details
2450 Validates directory existence and permissions. @param localFS LocalFileSystem instance @param dir Path to the directory @param expected Expected FsPermission for the directory @throws DiskErrorException if directory access issues are found @throws IOException if an I/O error occurs
2451 Validates directory existence and permissions with disk I/O checks. @param localFS LocalFileSystem instance @param dir Path to the directory @param expected Expected FsPermission for the directory @throws DiskErrorException if directory access issues are found @throws IOException if an I/O error occurs
2452 Lists file statuses for multiple paths using default filter. @param files array of file paths to check @return array of FileStatus objects filtered by default criteria @throws AccessControlException if access is denied @throws FileNotFoundException if a path does not exist @throws IOException if an I/O error occurs
2453 Retrieves the total used space of the root directory. @return Total used space as a long value @throws IOException if an I/O error occurs or not in mountpoint
2454 Retrieves block locations for a file within an HAR archive. @param file FileStatus object representing the file @param start Starting offset of the range @param len Length of the range @return Array of BlockLocation objects @throws IOException if an I/O error occurs
2455 Opens a file for reading within the HAR archive. @param f file path to open @param bufferSize buffer size for reading @return FSDataInputStream for the specified file @throws FileNotFoundException if the path is not a file @throws IOException if an I/O error occurs
2456 Opens a file for reading with checksum verification. @param f the path of the file to open @param bufferSize size of the buffer used for reading @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs @throws UnresolvedLinkException if a symlink could not be resolved
2457 Opens a file for reading with optional checksum verification. @param f Path to the file within the filesystem @param bufferSize size of the buffer used for reading @return FSDataInputStream instance for reading the file @throws IOException if an I/O error occurs
2458 Renames a file or directory and its associated checksum file. Handles both files and directories, ensuring checksum integrity. @param src source path to rename @param dst destination path for renaming
2459 Renames a file from source to destination. Handles relative paths and checks for different file systems. @param src source path @param dst destination path @param options optional Rename options (e.g., OVERWRITE) @throws IOException if an I/O error occurs
2460 Populates a list with file statuses of children in the HAR archive. @param parent HarStatus object representing the parent directory @param statuses List to store FileStatus objects of child entries @throws IOException if an I/O error occurs during status retrieval
2461 Retrieves file status from HAR archive. @param f path of the file within the archive @return FileStatus object with metadata @throws IOException if an I/O error occurs
2462 Retrieves the FileStatus of a specified SFTP file. @param client active SFTP channel @param file path to the file @return FileStatus object or throws FileNotFoundException if not found
2463 Retrieves FileStatus for a specified FTP file. @param client FTPClient connected to the server @param file Path of the file to retrieve status for @return FileStatus object representing the file's metadata @throws IOException if an I/O error occurs or file is not found
2464 Constructs a MetricsSystemImpl with no prefix. Delegates to constructor with null prefix.
2465 Initializes a new MutableRollingAverages instance with the given metric name. @param metricValueName name of the metric to track
2466 Replaces the current scheduled task with a new one. @param windows number of time windows for rolling averages @param interval task execution interval @param timeUnit time unit for the interval
2467 Rechecks electability based on health state and schedules recheck if necessary. Handles different health states to join or quit elections appropriately.
2468 Handles re-joining election after failing to become active. Calls reJoinElection with a predefined sleep time.
2469 Processes ZooKeeper watch events for leader election. Handles connection state changes and node updates. @param zk the ZooKeeper client instance @param event the WatchedEvent received
2470 Creates a socket address with hostname resolution. @param target string representation of the target @param defaultPort default port to use if not specified in target @return InetSocketAddress with resolved IP or unresolved if fails
2471 Handles authentication using delegation tokens. Checks authorization header and configures schemes for management operations. @param request HTTP servlet request object @param response HTTP servlet response object @return AuthenticationToken if authentication is successful, null otherwise @throws IOException if I/O error occurs during token processing @throws AuthenticationException if authentication fails
2472 Checks if a configuration key exists. @param name original configuration property name @return true if the key or its deprecated replacements exist, false otherwise
2473 Retrieves raw configuration value by key, handling deprecations. @param name original configuration property name @return raw configuration value or null if not found
2474 Sets a configuration property with source information. Handles deprecation and alternative keys. @param name the configuration key @param value the configuration value @param source the source of the configuration (null if programmatically set)
2475 Unsets a configuration property by removing it from both the overlay and main properties. Handles deprecated keys and alternative names if applicable. @param name the configuration key to unset
2476 Returns virtual memory size. Refreshes metrics if needed before returning value. @return Virtual memory size in bytes
2477 Retrieves physical memory size in bytes. Calls refreshIfNeeded to ensure metrics are up-to-date. @return Memory size in bytes
2478 Retrieves available virtual memory size. Refreshes metrics if needed before returning value. @return Available virtual memory in bytes
2479 Retrieves available physical memory size. Refreshes metrics if needed before returning the value. @return Available physical memory in bytes
2480 Returns the number of processors. Refreshes metrics if needed and returns updated processor count.
2481 Retrieves CPU frequency. Refreshes metrics if needed before returning current CPU frequency in kHz. @return CPU frequency in kHz
2482 Returns the cumulative CPU time in milliseconds. Refreshes metrics if needed before returning the value. @return cumulative CPU time in ms
2483 Returns CPU usage percentage. Refreshes metrics if needed, then calculates average per processor. @return CPU usage as a float percentage or -1 if unavailable
2484 Retrieves the percentage of CPU cores used. Refreshes metrics if needed, then calculates and returns CPU usage as a percentage. @return CPU usage percentage or -1 if unavailable
2485 Returns network bytes read. Refreshes metrics if needed before returning value. @return Total network bytes read since system boot
2486 Returns the total network bytes written. Refreshes metrics if needed before returning the value. @return Network bytes written as a long
2487 Refreshes the netgroup cache by clearing existing mappings and caching new ones. @throws IOException if command execution fails during refresh
2488 Updates the filesystem status for a given mount point. @param viewFileSystem the ViewFileSystem instance @param mountPointMap map of MountPoint to FsStatus @param mountPoint the specific mount point to update @param path the path associated with the mount point @throws IOException if an I/O error occurs during status retrieval
2489 Lists file statuses in a HAR archive. @param f path to the directory or file in the archive @return array of FileStatus objects representing entries in the archive @throws IOException if an I/O error occurs during listing
2490 Retrieves file link status. @param f path to the file @param dereference whether to follow symbolic links @return FileStatus object with file details @throws IOException if an I/O error occurs
2491 Retrieves file status for a given path in the virtual filesystem. @param f path of the file or directory to check @return FileStatus object representing the file's metadata @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnresolvedLinkException if there is an unresolved symlink @throws IOException for other I/O errors
2492 Lists file statuses for a given path. @param f the path to list files in @return array of FileStatus objects representing the files and directories
2493 Checks if a file exists on the SFTP server. @param channel active SFTP channel @param file path to the file @return true if file exists, false otherwise; throws IOException for other errors
2494 Retrieves and constructs the FileStatus for a given SFTP file. @param channel active SFTP channel @param sftpFile LsEntry representing the SFTP file @param parentPath parent directory path @return FileStatus object @throws IOException if an error occurs during retrieval
2495 Checks if a specified SFTP file is not a directory. @param channel active SFTP channel @param file path to the file @return true if the file exists and is not a directory, false otherwise @throws IOException if an I/O error occurs or file check fails
2496 Checks if a file exists on the FTP server. @param client FTPClient connected to the server @param file Path of the file to check @return true if the file exists, false otherwise
2497 Lists file statuses in a given directory on an FTP server. @param client the FTPClient instance connected to the server @param file the path of the directory to list @return array of FileStatus objects representing files and directories @throws IOException if an I/O error occurs during listing
2498 Checks if a specified file exists and is regular. @param client connected FTPClient instance @param file Path of the file to check @return true if the file is regular, false if not found or an error occurs
2499 Initializes CBZip2InputStream for decompression. @param in input stream containing BZip2 compressed data @param readMode mode of reading (CONTINUOUS or BYBLOCK) @throws IOException if I/O error occurs during initialization
2500 Calculates the number of bytes processed until the next BZip2 marker. @param in input stream containing BZip2 compressed data @return Number of bytes read from the stream @throws IOException if I/O error occurs during processing
2501 Processes result of ZooKeeper node creation. Handles success, existence, and error cases for leader election.
2502 Processes ZooKeeper operation result for lock node. Handles leader election and state transitions based on result code. @param rc ZooKeeper result code @param path affected path in ZooKeeper @param ctx context object associated with the request @param stat statistics of the znode
2503 Creates a socket address with default port. @param target string representation of the target @return InetSocketAddress with resolved IP or unresolved if fails
2504 Parses network address specifications into a list of InetSocketAddress instances. @param specs comma or space-separated address strings @param defaultPort default port to use if not specified in specs @return List of InetSocketAddress objects
2505 Builds a delegation token service name from URI. @param uri target URI for the service @param defPort default port to use if not specified in URI @return String representation of the delegation token service or null if authority is missing
2506 Generates an XML document of configuration properties. Handles deprecation and appends properties to the XML. @param propertyName specific property to include, or null for all @param redactor optional redactor for sensitive values @return XML Document containing configuration data @throws IOException if XML creation fails @throws IllegalArgumentException if a specified property is not found
2507 Substitutes variables in a configuration expression. @param expr input string with variable placeholders @return string with substituted values or original if no substitutions made
2508 Applies configuration changes from HTTP request. @param out PrintWriter for outputting change results @param reconf Reconfigurable object to apply changes to @param req HttpServletRequest containing user input @throws ReconfigurationException if an error occurs during reconfiguration
2509 Sets a configuration property without source information. @param name the configuration key @param value the configuration value
2510 Sets a configuration property with logging. Logs the change and ensures sensitive values are redacted. @param name the configuration key @param value the configuration value @param source the source of the configuration (null if programmatically set)
2511 Recursively deletes a directory and its contents. @param dir the directory to delete @param tryGrantPermissions whether to attempt granting permissions before deletion @return true if successfully deleted, false otherwise
2512 Returns the number of CPU cores. Utilizes getNumProcessors to fetch and return the core count.
2513 Retrieves the filesystem status for a given path. @param fileSystem the FileSystem to check @param path the path within the filesystem @return Map of MountPoint to FsStatus @throws IOException if an I/O error occurs or path is not in a mount point
2514 Retrieves file status, resolving symlink paths. @param f path to the file @return FileStatus object with resolved symlink target if applicable @throws IOException if an I/O error occurs
2515 Renames a file on the SFTP server. @param channel active SFTP channel @param src source path of the file to rename @param dst destination path for the file @return true if renaming is successful, false otherwise
2516 Lists status of files and directories in a specified path. @param client SFTP channel for file operations @param file path to list @return array of FileStatus objects @throws IOException if an error occurs during listing
2517 Creates directories recursively on the SFTP server. @param client active SFTP channel @param file path to create directory at @param permission file permissions for new directory @return true if directory creation succeeded, false otherwise @throws IOException if an I/O error occurs or directory cannot be created
2518 Retrieves file statuses matching a given path pattern. @param pathPattern pattern to match file paths @return array of FileStatus objects or null if no matches found @throws IOException for I/O errors during processing
2519 Retrieves file statuses matching a given pattern and filter. @param pathPattern the path pattern to match files @param filter the filter to apply to matched paths @return array of FileStatus objects or null if no matches found @throws IOException for I/O errors during processing
2520 Executes a globbing operation to find files matching the given pattern. @param pathPattern the file path pattern to match @return array of FileStatus objects or null if no matches found @throws IOException for I/O errors during processing
2521 Retrieves file statuses matching a given pattern and filter. @param pathPattern Pattern to match files against @param filter Filter to apply when matching files @return Array of FileStatus objects or null if no matches found @throws IOException for I/O errors during processing
2522 Renames a file or directory on the FTP server. @param client connected FTPClient instance @param src source path of the file/directory to rename @param dst destination path for the renamed file/directory @return true if rename is successful, false otherwise @throws IOException if an I/O error occurs or conditions are not met
2523 Deletes a file or directory on an FTP server. @param client FTPClient connected to the server @param file Path of the file or directory to delete @param recursive true to delete directories recursively, false otherwise @return true if deletion is successful, false otherwise @throws IOException if an I/O error occurs or directory is not empty and not recursive
2524 Creates directories recursively on the FTP server. @param client connected FTPClient instance @param file Path of the directory to create @param permission FsPermission for the new directory @return true if all directories were created, false otherwise @throws IOException if an I/O error occurs
2525 Normalizes IP:port to hostname:port. @param ipPort string in "IP:port" format @return normalized "hostname:port" or original if invalid
2526 Retrieves the service address from a given token. @param token security token with associated service @return InetSocketAddress of the token's service or unresolved if fails
2527 Builds a token service from a URI. @param uri URI containing authority information @return Text object with formatted token service
2528 Returns the canonical service name for the file system. Uses delegation token service name if child file systems are not present. @return String representation of the service name or null
2529 Constructs the canonical service name using the URI and default port. @return String representation of the delegation token service or null if authority is missing
2530 Substitutes common variables in a configuration expression. @param expr input string with variable placeholders @return string with substituted values or original if no substitutions made
2531 Retrieves configuration value by key, handling deprecation and variable substitution. @param name configuration property name @return resolved configuration value or null if not found
2532 Retrieves a configuration property value. Handles deprecation and variable substitution. @param name property key @param defaultValue default value if not found @return the resolved property value or default
2533 Marks a configuration key as optional and sets its value. @param key the configuration key @param value the configuration value @return the current builder instance
2534 Marks a configuration key as mandatory and sets its value. @param key the configuration key @param value the configuration value @return the current builder instance
2535 Sets the default file system URI in configuration. @param conf Configuration object to update @param uri Default file system URI
2536 Adds a link to the configuration for a specified mount table. @param conf Hadoop Configuration object @param mountTableName name of the mount table @param src source path for the link @param target target URI for the link
2537 Adds a link merge slash configuration for a specified mount table. @param conf Configuration object to update @param mountTableName name of the mount table @param target URI representing the target location
2538 Adds a fallback link to the configuration. @param conf Hadoop Configuration object @param mountTableName name of the mount table @param target URI representing the fallback target
2539 Adds link merge configuration for a mount table. @param conf Hadoop configuration object @param mountTableName name of the mount table @param targets array of target URIs to be merged
2540 Adds a link configuration for an NFS mount table. @param conf Hadoop configuration object @param mountTableName name of the mount table @param src source path for the link @param settings additional settings for the link @param targets target paths for the link
2541 Adds a regex-based link in Hadoop's view file system configuration. @param conf Configuration object to update @param mountTableName name of the mount table @param srcRegex source path regex pattern @param targetStr target path string @param interceptorSettings optional interceptor settings
2542 Sets the home directory configuration for a specified mount table. @param conf Configuration object to update @param mountTableName name of the mount table @param homedir home directory path (must start with '/')
2543 Sets the umask in the configuration. @param conf Configuration object to update @param umask FsPermission representing the umask value
2544 Sets a list of codec classes in the configuration. @param conf Configuration object to update @param classes List of codec classes to set
2545 Sets default compression type for sequence files. @param job Hadoop configuration object @param val desired compression type
2546 Retrieves proxy user configuration from FilterConfig. @param filterConfig the web application's filter configuration @return Configuration object containing proxy user settings
2547 Initializes the CredentialShell with command-line arguments. Parses commands and sets configurations, prints usage if no args. @param args command-line arguments @return 0 on success, 1 on error
2548 Sets an integer configuration property. @param name the configuration key @param value the integer configuration value
2549 Sets a configuration property with a long value. @param name the configuration key @param value the long configuration value to be converted to string
2550 Sets a configuration property with a float value. @param name the configuration key @param value the float configuration value
2551 Sets a configuration property as a double. @param name the configuration key @param value the double configuration value
2552 Sets a configuration property as a boolean. @param name the configuration key @param value the boolean value to set
2553 Sets a time duration configuration property. @param name the configuration key @param value the duration value @param unit the time unit (e.g., seconds, minutes)
2554 Sets storage size with unit. @param name configuration key @param value storage size value @param unit storage unit (e.g., MB, GB)
2555 Sets a configuration property with a regex pattern. @param name the configuration key @param pattern the regex pattern to set
2556 Sets configuration property from array of strings. @param name config key @param values array of string values to concatenate
2557 Sets a configuration property with a host:port value. @param name the configuration key @param addr InetSocketAddress object containing host and port information
2558 Sets a configuration property with class information. @param name configuration key @param theClass class to be configured @param xface interface that the class must implement
2559 Recursively deletes a directory and its contents without attempting to grant permissions. @param dir the directory to delete @return true if successfully deleted, false otherwise
2560 Deletes all contents of a directory. @param dir the directory whose contents to delete @param tryGrantPermissions whether to attempt granting permissions before deletion @return true if all contents are successfully deleted, false otherwise
2561 Lists file statuses for a given directory. @param f the Path object representing the directory @return array of FileStatus objects @throws IOException if an I/O error occurs or file does not exist
2562 Retrieves file status for a given path, handling symbolic links. @param f path to the file or directory @return FileStatus object with details @throws IOException if an I/O error occurs
2563 Deletes a file or directory on the SFTP server. @param channel active SFTP channel @param file path of the file or directory to delete @param recursive true if directories should be deleted recursively @return true if deletion is successful, false otherwise @throws IOException if an error occurs during deletion
2564 Creates an input stream for reading BZip2 compressed data. @param seekableIn input stream that supports seeking @param decompressor decompressor instance (not used in this method) @param start starting position in the input stream @param end ending position in the input stream @param readMode mode of reading (CONTINUOUS or BYBLOCK) @return SplitCompressionInputStream for BZip2 data @throws IOException if I/O error occurs or seekableIn is not Seekable
2565 Adds metrics for fields annotated with @Metric. @param source object containing the field to be instrumented @param field field to be checked and possibly instrumented
2566 Retrieves configuration value for a specific storage type. @param conf Hadoop configuration object @param t storage type @param name configuration property name @return resolved configuration value or null if not found
2567 Determines FTP transfer mode from configuration. @param conf Hadoop configuration object @return Transfer mode as an integer (default is BLOCK_TRANSFER_MODE)
2568 Sets FTP client data connection mode based on configuration. @param client FTPClient instance to configure @param conf Configuration object containing settings @throws IOException if an I/O error occurs
2569 Retrieves the home directory value for a specified mount table. @param conf Hadoop configuration object @param mountTableName name of the mount table @return home directory path or null if not found
2570 Retrieves and parses the user mask from configuration. @param conf Hadoop configuration object @return FsPermission object representing the umask
2571 Retrieves a list of CompressionCodec classes. @param conf Hadoop configuration object @return List of CompressionCodec classes configured or discovered via service loading
2572 Retrieves default compression type for sequence files. @param job Configuration object containing settings @return CompressionType enum value, defaulting to RECORD if not specified
2573 Converts a security property to a string representation. @param property name of the security property @return formatted string with property and its values or "<NOT SET>" if not found
2574 Validates Hadoop token files by checking system properties and configuration. @param conf Hadoop configuration settings
2575 Locates and initializes the keystore. Reads password from environment or file, loads keystore, handles exceptions.
2576 Retrieves local host name using configuration or system defaults. @param conf Hadoop configuration object, optional @return Local host name as a String @throws UnknownHostException if host resolution fails
2577 Retrieves the client principal for a given protocol and configuration. @param protocol the class representing the protocol @param conf the Hadoop configuration object @return client principal string or null if not found
2578 Retrieves and trims configuration value by key. @param name configuration property name @return trimmed configuration value or null if not found
2579 Sets configuration property if not already set. @param name configuration key @param value configuration value to set
2580 Retrieves and converts a time duration configuration value. @param name configuration property name @param defaultValue default time duration value if not found @param defaultUnit default time unit for the default value @param returnUnit target time unit for conversion @return converted time duration in the target unit or default value if not set
2581 Retrieves and converts storage size from configuration. @param name config key for storage size @param defaultValue default value if key is not found @param targetUnit unit to convert the storage size to @return storage size in the specified target unit
2582 Retrieves and converts a storage size configuration value. @param name config property name @param defaultValue default value if not found or invalid @param targetUnit unit to convert the storage size to @return converted storage size in target units, or default value
2583 Retrieves a compiled regex pattern from configuration. @param name config key for the regex pattern @param defaultValue fallback pattern if invalid or missing @return compiled Pattern object or default if not found/invalid
2584 Retrieves and splits a configuration value into a collection of strings. @param name configuration property name @return collection of substrings or empty list if value is null
2585 Retrieves and splits configuration values by key. @param name config property name @return array of substrings from the resolved config value
2586 Retrieves array of strings for a configuration key. @param name config property name @param defaultValue default values if key is not found @return array of strings from config or default values
2587 Retrieves and trims a collection of strings from configuration. @param name config property name @return Collection of trimmed strings or empty list if null
2588 Retrieves and splits configuration value by key. @param name configuration property name @return array of trimmed substrings from the resolved configuration value or empty array if not found
2589 Retrieves and splits a configuration property into trimmed strings. @param name configuration property name @param defaultValue default values to use if the property is not found @return array of trimmed strings from the configuration or default values
2590 Retrieves configuration properties with a specified prefix. @param confPrefix prefix for filtering configuration keys @return Map of filtered configuration key-value pairs
2591 Appends a configuration property as JSON. @param jsonGen JSON generator to write the property @param config Configuration object containing properties @param name Property key to append @param redactor Redactor for sensitive values @throws IOException on JSON writing errors
2592 Reconfigures a property if it is reconfigurable. @param property name of the property to reconfigure @param newVal new value for the property @throws ReconfigurationException if the property cannot be reconfigured
2593 Retrieves and logs configuration value by key. @param name configuration property name @return resolved configuration value or null if not found
2594 Retrieves the default mount table name from configuration. @param conf Hadoop configuration object @return default mount table name or predefined constant if not found
2595 Checks and loads the Bzip2 native library based on configuration. @param conf Hadoop configuration object @return true if native Bzip2 is loaded, false otherwise
2596 Retrieves the default socket factory from configuration. @param conf Hadoop configuration object @return SocketFactory instance or default if not configured
2597 Retrieves username from configuration. @param conf Configuration object @return Username string or default if not found
2598 Prints configuration option value. @param option configuration property key
2599 Initializes TruststoreKeystore with configuration settings. @param conf Configuration object containing security properties
2600 Spawns a thread to automatically renew Kerberos credentials. @param force if true, forces renewal regardless of conditions
2601 Initializes KeyProvider with configuration settings. @param conf Configuration object containing key management settings
2602 Retrieves and parses ZooKeeper ACLs from configuration. @param conf configuration object containing ZK settings @return List of ACL objects for ZooKeeper access control @throws IOException if configuration resolution or parsing fails
2603 Retrieves hash type from configuration. @param conf Hadoop configuration object @return integer representing the hash type or INVALID_HASH if unknown
2604 Retrieves an EnumSet of configuration property values. @param key unique identifier for the configuration setting @param enumClass class of the enum type @param ignoreUnknown flag to ignore unknown values @return EnumSet containing parsed enum constants
2605 Retrieves and parses an integer range from configuration. @param name property key @param defaultValue default value if not found @return IntegerRanges object representing the parsed ranges
2606 Retrieves a configuration property value with logging. Logs the property key and values, redacting sensitive information. @param name property key @param defaultValue default value if not found @return the resolved property value or default
2607 Marks a configuration key as optional and sets its boolean value. @param key the configuration key @param value the boolean configuration value @return the current builder instance
2608 Marks a configuration key as optional and sets its double value. @param key the configuration key @param value the double value to set @return the current builder instance
2609 Marks a configuration key as mandatory with a boolean value. @param key the configuration key @param value the boolean configuration value @return the current builder instance
2610 Marks a configuration key as mandatory with a double value. @param key the configuration key @param value the double value to set @return the current builder instance
2611 Sets default file system URI in configuration. @param conf Configuration object to update @param uri Default file system URI string
2612 Adds a link configuration for an NFS mount table with default settings. @param conf Hadoop configuration object @param mountTableName name of the mount table @param src source path for the link @param settings additional settings for the link (default if null) @param targets target URIs for the link
2613 Sets the index interval for MapFiles. @param conf Hadoop configuration object @param interval number of key-value pairs between index entries
2614 Sets the IPC ping interval in configuration. @param conf Configuration object to update @param pingInterval new ping interval value in milliseconds
2615 Sets the connection timeout for IPC client. @param conf configuration object @param timeout timeout value in milliseconds
2616 Sets whether nested mount points are supported. @param conf Hadoop configuration object @param isNestedMountPointSupported flag indicating support for nested mount points
2617 Marks a configuration key as optional and sets its string values. @param key config key to mark as optional @param values array of string values for the key @return current builder instance
2618 Marks a configuration key as mandatory and sets its string values. @param key the configuration key to mark as mandatory @param values array of string values for the key @return the current builder instance
2619 Updates the connection address for a given configuration key. @param name the configuration key @param addr initial InetSocketAddress object @return resolved InetSocketAddress suitable for connection
2620 Sets the RPC protocol engine in configuration. @param conf configuration object @param protocol interface class of the protocol @param engine implementation class of the protocol engine
2621 Deletes a file or directory. @param p the path to delete @param recursive whether to delete directories recursively @return true if successfully deleted, false otherwise @throws IOException if an I/O error occurs
2622 Deletes all contents of a directory without attempting to grant permissions. @param dir the directory whose contents to delete @return true if all contents are successfully deleted, false otherwise
2623 Retrieves file status for a given path. @param f the file path to check @return FileStatus object with detailed information about the file @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws IOException if an I/O error occurs
2624 Lists file statuses for a given path. @param f the input file path @return array of FileStatus objects representing files and directories @throws AccessControlException if access is denied @throws FileNotFoundException if the path does not exist @throws IOException if an I/O error occurs
2625 Creates a file with default permissions. @param f file path @param overwrite flag to overwrite existing files @param bufferSize buffer size for data transfer @param replication number of replications for the file @param blockSize block size for the file @param progress progress monitor @return FSDataOutputStream for writing to the file
2626 Retrieves the user mask for file permissions. Uses cached value if available, otherwise fetches from configuration. @return FsPermission object representing the umask
2627 Creates a BlockFactory based on the specified type. @param keyToBufferDir unique identifier for the buffer directory @param configuration Hadoop configuration settings @param name factory type (e.g., DATA_BLOCKS_BUFFER_ARRAY) @return configured BlockFactory instance or throws IllegalArgumentException if unsupported
2628 Initializes the CompressionCodecFactory with codecs from configuration or defaults. @param conf Hadoop configuration object
2629 Retrieves and trims configuration value by key, falling back to default if not found. @param name configuration property name @param defaultValue value to return if the key is not set or is empty @return trimmed configuration value or provided default
2630 Retrieves an integer configuration value by name. @param name configuration property name @param defaultValue default integer value if not found or invalid @return parsed integer value or default if conversion fails
2631 Retrieves a long configuration value by name. @param name configuration property name @param defaultValue default value if not found or invalid @return parsed long value or default if conversion fails
2632 Retrieves configuration property as a byte size in long. @param name config property name @param defaultValue default value if property not found @return parsed byte size or default value
2633 Retrieves a configuration property as a float. @param name configuration property name @param defaultValue default float value if property is not found or invalid @return parsed float value or default if parsing fails
2634 Retrieves and parses a configuration property as a double. @param name configuration property name @param defaultValue default value to return if property is not found or invalid @return parsed double value or default if parsing fails
2635 Retrieves a boolean configuration property. @param name property name @param defaultValue default boolean value if not found or invalid @return parsed boolean value or default if invalid
2636 Retrieves and loads a class by configuration key. @param name config property name for the fully qualified class name @param defaultValue default Class to return if not found or fails to load @return loaded Class object or default value
2637 Sets configuration property to boolean value if not already set. @param name configuration key @param value boolean value to set
2638 Retrieves and converts a time duration configuration value. @param name configuration property name @param defaultValue default time duration value if not found @param unit time unit for the default value and conversion @return converted time duration in the specified unit or default value if not set
2639 Retrieves SASL properties for a given configuration key. @param conf Configuration object containing settings @param configKey key for the SASL property @param defaultQOP default Quality of Protection setting @return Map of SASL properties with QOP and server auth enabled
2640 Retrieves and parses integer values from configuration by key. @param name configuration property name @return array of integers parsed from the resolved configuration value or empty array if not found
2641 Retrieves an array of Class objects by configuration property name. @param name configuration property name @param defaultValue default classes to return if property is not found @return array of Class objects or default values if none are found
2642 Retrieves a file from a directory specified by configuration property. @param dirsProp configuration property name for directories @param path relative file path @return File object if directory is found and accessible, throws IOException otherwise
2643 Initializes the SerializationFactory with configurations. @param conf Configuration object for serialization settings
2644 Retrieves filter parameters from configuration. @param conf Configuration object containing settings @param confPrefix Prefix for filtering configuration keys @return Map of filtered configuration key-value pairs
2645 Retrieves filter parameters from configuration. @param conf Configuration object containing settings @param confPrefix Prefix for filtering parameter keys @return Map of filtered configuration parameters
2646 Propagates configuration options to a file system builder. @param builder FSBuilder instance to configure @param conf Configuration object containing properties @param prefix Prefix for filtering configuration keys @param mandatory Flag indicating if options are mandatory or optional
2647 Generates an HTML form to display and apply configuration changes. @param out PrintWriter for outputting the HTML content @param reconf Reconfigurable object whose configuration is being modified
2648 Adds a link to the default mount table in Hadoop configuration. @param conf Hadoop Configuration object @param src source path for the link @param target target URI for the link
2649 Adds a link merge slash configuration using the default mount table. @param conf Hadoop configuration object to update @param target URI representing the target location
2650 Adds a fallback link to the default mount table in Hadoop configuration. @param conf Hadoop Configuration object @param target URI representing the fallback target
2651 Adds link merge configuration using default mount table. @param conf Hadoop configuration object @param targets array of target URIs to be merged
2652 Sets home directory configuration using default mount table. @param conf Hadoop configuration object to update @param homedir home directory path (must start with '/')
2653 Retrieves home directory value using default mount table. @param conf Hadoop configuration object @return home directory path or null if not found
2654 Creates an encoder for erasure coding. @param conf Hadoop configuration settings @param options codec-specific options @return ErasureEncoder object or throws RuntimeException if creation fails
2655 Creates an erasure decoder for a given configuration and options. @param conf Hadoop configuration settings @param options codec-specific options @return ErasureDecoder object or throws RuntimeException if creation fails
2656 Determines the appropriate Bzip2 compressor class. @param conf Hadoop configuration object @return Bzip2Compressor if native library is loaded, otherwise BZip2DummyCompressor
2657 Determines the appropriate decompressor class for Bzip2. @param conf Hadoop configuration object @return Bzip2Decompressor if native library is loaded, otherwise BZip2DummyDecompressor
2658 Returns a Bzip2 decompressor based on native library availability. @param conf Hadoop configuration object @return Bzip2Decompressor if native library is loaded, otherwise BZip2DummyDecompressor
2659 Retrieves a SocketFactory for a given class from configuration. @param conf Hadoop configuration object @param clazz the class requiring a socket factory @return configured SocketFactory or default if not specified
2660 Constructs a HadoopZookeeperFactory with basic security configurations. @param zkPrincipal ZooKeeper principal for authentication @param kerberosPrincipal Kerberos principal for secure communication @param kerberosKeytab Path to the keytab file for Kerberos authentication
2661 Initializes SSL/TLS configuration. @throws GeneralSecurityException on security errors @throws IOException on I/O errors
2662 Checks if the authentication method is SIMPLE. @param conf Configuration object containing security settings @return true if authentication method is SIMPLE, false otherwise
2663 Sets Kerberos configuration based on authentication method. @param conf Configuration object containing security settings @throws IOException if issues occur during configuration setup
2664 Retrieves an instance of CryptoCodec for a given cipher suite. @param conf Hadoop configuration object @param cipherSuite cryptographic cipher suite @return CryptoCodec instance or null if not found
2665 Retrieves a Hash instance based on configuration. @param conf Hadoop configuration object @return Hash instance or null if invalid type
2666 Builds a FlagSet from configuration. @param enumClass class of the enum type representing flags @param conf configuration object containing settings @param key configuration key for flag values @param ignoreUnknown whether to ignore unknown flag values @return FlagSet instance with parsed flags
2667 Writes configuration properties as XML. @param propertyName specific property to include, or null for all @param out Writer to output the XML data @param config Configuration object containing settings @throws IOException if writing fails @throws IllegalArgumentException if a specified property is not found
2668 Dumps configuration to JSON output. @param config Configuration object to dump @param out Writer for JSON output @throws IOException on IO errors
2669 Marks a configuration key as optional and sets its integer value. @param key the configuration key @param value the integer configuration value @return the current builder instance
2670 Marks a configuration key as optional and sets its float value. @param key the configuration key @param value the float configuration value @return the current builder instance
2671 Marks a configuration key as optional and sets its double value. @param key the configuration key @param value the double configuration value @return the current builder instance
2672 Marks a configuration key as mandatory with an integer value. @param key the configuration key @param value the integer value to be set @return the current builder instance
2673 Creates a MetricsSource from an annotated object. @param source the object to generate metrics from @return MetricsSource for collecting performance metrics
2674 Creates a file with default progress monitor. @param f file path @param overwrite flag to overwrite existing files @param bufferSize buffer size for data transfer @param replication number of replications for the file @param blockSize block size for the file @return FSDataOutputStream for writing to the file
2675 Creates a file with specified options and permissions. @param f file path to create @param createFlag flags for file creation @param opts additional options for file creation @return FSDataOutputStream for the created file @throws IOException if an I/O error occurs
2676 Creates a directory with specified permissions. @param dir path of the directory to create @param permission permissions for the new directory @param createParent flag to create parent directories if needed
2677 Main method for compressing or decompressing files using specified codecs. @param args command-line arguments: -in to encode, -out to decode, and file paths
2678 Generates server principal by replacing pattern in configuration. @param principalConfig Kerberos principal configuration string @param hostname target hostname for replacement @return modified principal string or original if no change needed @throws IOException if an I/O error occurs while processing
2679 Retrieves server principal by replacing hostname pattern. @param principalConfig full principal string @param addr client's InetAddress @return modified principal string or original if no replacement needed @throws IOException if address is null or I/O error occurs
2680 Adds a protocol to the server. @param rpcKind type of RPC communication @param protocolClass the protocol class to add @param protocolImpl the implementation object for the protocol @return Server instance for method chaining
2681 Creates a KeyProvider instance from the specified configuration key. @param conf Hadoop configuration object @param configKeyName name of the configuration key for the provider URI @return KeyProvider object or null if not found @throws IOException if instantiation fails or the provider is transient
2682 Retrieves the default file system URI from configuration. @param conf Hadoop configuration object @return default FileSystem URI with validated scheme @throws IllegalArgumentException if URI has no scheme
2683 Validates Kerberos kinit executable path. Checks if kinit command is set, prints its path, and verifies file validity.
2684 Retrieves socket address from configuration. @param name config property name for address @param defaultAddress fallback address if not found @param defaultPort default port to use @return InetSocketAddress with resolved IP or unresolved if fails
2685 Updates connection address for a specified host property. @param hostProperty key for the host configuration @param addressProperty key for the address configuration @param defaultAddressValue default value if address is not found @param addr initial socket address @return updated InetSocketAddress or original if conditions are not met
2686 Builds FSDataInputStream asynchronously with specified file parameters. @return CompletableFuture of FSDataInputStream or throws IOException
2687 Builds and opens a FSDataInputStream for a file. Uses either a path or path handle, setting various parameters. @return CompletableFuture containing the input stream or exception @throws IOException if an I/O error occurs
2688 Sets configuration from URI and initializes connection pool. @param uriInfo the URI containing host, port, and user info @param conf the Configuration object to set properties @throws IOException if required configuration is missing or invalid
2689 Establishes an SFTP connection using configuration properties. @return ChannelSftp object representing the established connection @throws IOException if connection fails or is invalid
2690 Initializes buffer size from Hadoop configuration. Retrieves and sets the buffer size for file operations.
2691 Opens a file for reading. @param f file path to open @return FSDataInputStream for the specified file @throws IOException if an I/O error occurs
2692 Opens an input stream for reading a file with default buffer size. @param fd PathHandle identifying the file to open @return FSDataInputStream for reading file data @throws IOException if an I/O error occurs
2693 Appends data to a file. @param f file path to append to @return FSDataOutputStream for writing data @throws IOException if an I/O error occurs
2694 Appends data to a file with specified buffer size. @param f path of the file to append to @param appendToNewBlock flag indicating whether to append to a new block @return FSDataOutputStream for appending data @throws IOException if an I/O error occurs
2695 Initializes the Cache with configuration settings. @param conf Hadoop Configuration object
2696 Initializes a Sorter instance with specified FileSystem, comparator, and configuration. @param fs Hadoop FileSystem for file operations @param comparator comparator for sorting key-value pairs @param keyClass class of the keys to be sorted @param valClass class of the values associated with keys @param conf Configuration object containing sort parameters @param metadata additional metadata for the Sorter instance
2697 Creates a LZ4 compression output stream. @param out underlying output stream for compressed data @param compressor compression algorithm to use @return CompressionOutputStream configured for LZ4
2698 Creates an input stream for LZ4 decompression. @param in the input stream containing compressed data @param decompressor the decompression algorithm to use @return a BlockDecompressorStream configured with buffer size from settings @throws IOException if I/O error occurs or parameters are invalid
2699 Creates an LZ4 decompressor with configured buffer size. @return Lz4Decompressor instance for data decompression
2700 Creates a BZip2 compression output stream. @param out underlying output stream for compressed data @param compressor compressor to use for compression @return CompressionOutputStream configured for BZip2
2701 Creates a BZip2 decompression input stream. @param in input stream containing compressed data @param decompressor decompressor to use for decompression @return CompressionInputStream for reading decompressed data @throws IOException if I/O error occurs during creation
2702 Creates a CompressionOutputStream for Snappy. @param out underlying output stream @param compressor Snappy Compressor instance @return BlockCompressorStream configured with buffer size and overhead
2703 Creates a new SnappyCompressor with configured buffer size. @return initialized SnappyCompressor instance
2704 Creates a compression input stream for Snappy. @param in underlying input stream with compressed data @param decompressor the decompression algorithm to use @return BlockDecompressorStream configured with buffer size from settings @throws IOException if I/O error occurs or invalid parameters are provided
2705 Creates a Snappy decompressor. @return SnappyDecompressor instance with configured buffer size
2706 Copies bytes from input to output stream using buffer size from configuration. @param in InputStream to read from @param out OutputStream to write to @param conf Configuration object containing file buffer size @throws IOException if an I/O error occurs
2707 Copies bytes from an input stream to an output stream using a buffer size specified in configuration. @param in InputStream to read from @param out OutputStream to write to @param conf Configuration object containing the buffer size setting @param close flag indicating whether to close streams after copying @throws IOException if an I/O error occurs
2708 Retrieves buffer size from configuration. @param conf Hadoop configuration object @return buffer size integer value or default if not found
2709 Sets the configuration for script execution. @param conf Configuration object containing settings
2710 Retrieves buffer size from configuration. @param conf Hadoop configuration object @return buffer size integer value or default if not found
2711 Parses the number of priority levels for call queues. @param ns namespace prefix @param conf configuration object @return parsed integer value representing priority levels @throws IllegalArgumentException if numLevels is less than 1
2712 Retrieves the RPC timeout value from configuration. @param conf Configuration object containing settings @return Timeout in milliseconds, default if not specified
2713 Retrieves the ping interval configuration. @param conf Configuration object containing settings @return Ping interval in milliseconds, default if not found
2714 Retrieves the RPC timeout from configuration. @param conf Configuration object @return Timeout value in milliseconds, or 0 if invalid
2715 Initializes a LineReader with an input stream and buffer size from configuration. @param in the InputStream to read from @param conf configuration object containing settings @throws IOException if initialization fails
2716 Initializes a LineReader with the given input stream and configuration. @param in input stream to read from @param conf configuration object for settings @param recordDelimiterBytes byte array representing record delimiter @throws IOException if an I/O error occurs
2717 Retrieves integer configuration value with logging. @param name config property name @param defaultValue default int if not found or invalid @return parsed int value or default if conversion fails
2718 Sets FTP client control keep-alive timeout from configuration. @param client FTPClient instance to configure @param conf Configuration object containing settings
2719 Retrieves and validates a long configuration value. @param key configuration property name @param defVal default value if not found or invalid @return parsed long value or default if conversion fails
2720 Retrieves default block size. @return default block size in bytes, defaulting to 32MB
2721 Retrieves a long configuration value by name with logging. @param name configuration property name @param defaultValue default value if not found or invalid @return parsed long value or default if conversion fails
2722 Retrieves and logs a configuration property as a float. @param name configuration property name @param defaultValue default float value if property is not found or invalid @return parsed float value or default if parsing fails
2723 Initializes trash policy with configuration settings. @param conf file system configuration @param fs file system instance @param home home directory path
2724 Checks if nested mount points are supported. @param conf Hadoop configuration object @return true if nested mount points are supported, false otherwise
2725 Creates an LZ4 compressor with configured buffer size and compression mode. @return Lz4Compressor instance for data compression
2726 Retrieves a MultipleLinearRandomRetry policy from configuration. @param conf configuration object @param retryPolicyEnabledKey key for enabling the retry policy @param defaultRetryPolicyEnabled default enable status @param retryPolicySpecKey key for retry policy specification @param defaultRetryPolicySpec default retry policy specification @return configured RetryPolicy or null if invalid
2727 Adds default web applications to the server. Configures log and static resource contexts. @param parent parent context handler collection @param appDir directory containing application files @param conf configuration settings @throws IOException if an I/O error occurs
2728 Adds default servlets for web application context. Configures and registers servlets for stack, log level, JMX, and configuration management.
2729 Determines if server failover is enabled for a given namespace. @param namespace configuration namespace @param conf Hadoop configuration object @return true if failover is enabled, false otherwise
2730 Initializes a new Client for Hadoop IPC communication. @param valueClass class type of writable values @param conf configuration settings for the client @param factory socket factory for creating connections
2731 Retrieves client backoff enable status from configuration. @param prefix configuration property prefix @param conf Configuration object @return boolean indicating if client backoff is enabled
2732 Checks if client backoff is enabled for a specific namespace and port. @param namespace configuration namespace @param port network port number @param conf Configuration object @return true if backoff is enabled, false otherwise
2733 Retrieves password from configuration. @param name config key for the password @return char array of password or null if not found
2734 Retrieves a boolean configuration property and logs the access. @param name property name @param defaultValue default boolean value if not found or invalid @return parsed boolean value or default if invalid
2735 Retrieves the FileSystem class based on the given scheme. @param scheme file system scheme (e.g., hdfs, s3) @param conf configuration settings @return FileSystem class or throws UnsupportedFileSystemException if not found
2736 Creates an AbstractFileSystem instance for a given URI and configuration. @param uri file system URI @param conf configuration settings @return AbstractFileSystem object or throws UnsupportedFileSystemException if unsupported
2737 Retrieves the BlockingQueue class for IPC calls. @param namespace configuration namespace @param port server port @param conf configuration object @return Class of BlockingQueue or LinkedBlockingQueue if not specified
2738 Retrieves the RpcScheduler class for a given namespace and port. @param namespace configuration namespace @param port service port @param conf Configuration object @return configured RpcScheduler class or default if not found
2739 Retrieves and validates a class by configuration key. @param name config property name for the fully qualified class name @param defaultValue default Class to return if not found or fails to load @param xface interface that the returned class must implement @return loaded Class object as subclass of xface or null if not found or invalid
2740 Retrieves or creates a FileSystem instance for the given URI and configuration. @param uri URI of the file system @param conf Configuration object @param key Key for caching the FileSystem @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
2741 Retrieves the shutdown timeout from configuration. @param conf Configuration object @return Shutdown timeout in milliseconds, clamped to minimum value
2742 Retrieves password from credential providers. @param name configuration key name for the password @return character array representing the password or null if not found @throws IOException if an error occurs during retrieval
2743 Parses capacity weights from configuration or generates defaults. @param priorityLevels number of priority levels @param ns namespace for configuration key @param conf configuration object @return array of parsed or default capacity weights
2744 Retrieves and initializes filter initializers from configuration. @param conf Hadoop configuration object @return array of FilterInitializer objects or null if none found
2745 Retrieves instances of a specified class by configuration property name. @param name configuration property name @param xface interface that the classes must implement @return list of instantiated objects or throws exception if class does not implement interface
2746 Initializes the Writer for SequenceFile output. Configures serializers, compression, and metadata. @param config Hadoop configuration settings @param outStream output stream to write data @param ownStream flag indicating if the writer owns the output stream @param key class type of the key @param val class type of the value @param compCodec compression codec to use @param meta metadata for the file @param syncIntervalVal interval for synchronization markers @throws IOException if initialization fails
2747 Propagates configuration options to a file system builder. @param builder FSBuilder instance to configure @param conf Configuration object containing properties @param prefix Prefix for filtering configuration keys @param mandatory Flag indicating if options are mandatory or optional
2748 Propagates configuration options to file system builders with specified prefixes. @param builder FSBuilder instance to configure @param conf Configuration object containing properties @param optionalPrefix Prefix for optional configuration keys @param mandatoryPrefix Prefix for mandatory configuration keys @return Configured FSBuilder instance
2749 Main method for checking native library availability. @param args command-line arguments: -a to check all libraries, -h for help
2750 Retrieves the compressor type for BZip2. @return Class representing the BZip2 compressor
2751 Returns the decompressor type for BZip2. @return Class of the decompressor to be used
2752 Creates a decompressor for BZip2 format. @return Decompressor instance based on configuration
2753 Constructs a HadoopZookeeperFactory with basic security configurations. Uses default values for Kerberos principal and keytab path. @param zkPrincipal ZooKeeper principal for authentication
2754 Looks up group information for a user from LDAP. @param result LDAP search result object for the user @param c LDAP directory context @param goUpHierarchy number of levels to traverse upwards in the group hierarchy @return Set of group names associated with the user @throws NamingException if LDAP operations fail
2755 Retrieves a CryptoCodec instance for the specified cipher suite. @param conf Hadoop configuration object @return CryptoCodec instance or null if not found
2756 Binds a ServerSocket to an address with default configuration. @param socket ServerSocket to bind @param address target InetSocketAddress @param backlog maximum pending connections queue size @throws IOException if binding fails
2757 Dumps a specific configuration property to JSON. @param config Configuration object to dump @param propertyName Property key to dump, or null for all properties @param out Writer for JSON output @throws IOException on IO errors
2758 Creates directories with default permissions. @param f Hadoop Path object for the directory @return true if directory creation is successful, false otherwise @throws IOException if an I/O error occurs during creation
2759 Retrieves and validates the server's Kerberos principal. @param authType authentication type details @return validated server principal string @throws IOException if configuration or validation fails
2760 Decodes a HAR URI by extracting and validating its components. @param rawURI the original HAR URI to decode @param conf Hadoop configuration object @return decoded URI with corrected scheme and authority @throws IOException if URI is invalid or parsing fails
2761 Retrieves a FileSystem instance based on configuration. @param conf Hadoop configuration object @return FileSystem object initialized with default URI from config @throws IOException if an I/O error occurs during initialization
2762 Initializes the FileSystem with a URI and configuration. @param name file system URI, may be null or without scheme @param conf Hadoop configuration object @throws IOException if initialization fails
2763 Creates a new instance of FileSystem using the default URI from configuration. @param conf Hadoop configuration object @return FileSystem instance configured with the default URI @throws IOException if an I/O error occurs during initialization
2764 Validates that the given path is compatible with the file system. @param path the path to validate @throws IllegalArgumentException if the path is not valid for this file system
2765 Retrieves socket address from configuration with optional host override. @param hostProperty property name for host override @param addressProperty property name for address @param defaultAddressValue fallback address if not found @param defaultPort default port to use @return InetSocketAddress with resolved IP or unresolved if fails
2766 Creates a file on the SFTP server. Handles directory creation and overwrites if specified. @param f file path to create @param permission file permissions @param overwrite flag to overwrite existing files @param bufferSize buffer size for data transfer @param replication replication factor (not used) @param blockSize block size (not used) @param progress progress monitor (not used) @return FSDataOutputStream for writing to the created file @throws IOException if creation fails or file exists and overwrite is false
2767 Constructs a FutureDataInputStreamBuilderImpl with a file system and path. @param fileSystem Hadoop FileSystem instance @param path file path within the file system
2768 Constructs a FutureDataInputStreamBuilderImpl with specified file system and path handle. Initializes buffer size from Hadoop configuration. @param fileSystem mandatory Hadoop file system instance @param pathHandle mandatory file system path handle
2769 Opens a file using the appropriate method based on availability. @param instance DynamicWrappedIO instance @param fs FileSystem instance @param status FileStatus object @param readPolicies Read policies for the file @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2770 Checks if appending to the base path is supported. @param fs FileSystem instance to check @return true if append is supported, false otherwise
2771 Constructs a Sorter instance with default metadata. @param fs Hadoop FileSystem for file operations @param comparator comparator for sorting key-value pairs @param keyClass class of the keys to be sorted @param valClass class of the values associated with keys @param conf Configuration object containing sort parameters
2772 Initializes a Bzip2Compressor with configuration settings. @param conf Hadoop configuration object
2773 Reinitializes the Bzip2 compressor with new configuration. @param conf Hadoop configuration object
2774 Initializes the sequence file reader. @param tempReader flag indicating temporary reader status @throws IOException if initialization fails or I/O error occurs
2775 Reinitializes the compressor with a new configuration. @param conf Hadoop configuration object
2776 Prepares to append a value of specified length. @param length expected length of the value (-1 for unknown) @return DataOutputStream for writing the value @throws IOException if an I/O error occurs during preparation
2777 Initializes a writable block state for compressed data. @param compressionAlgo algorithm for data compression @param fsOut file system output stream @param fsOutputBuffer buffer for file system output @param conf Hadoop configuration object @throws IOException if an I/O error occurs during initialization
2778 Sets configuration for script execution and underlying mapping. @param conf Configuration object containing settings
2779 Sets the configuration for script execution. @param conf Configuration object containing settings
2780 Creates and returns an Options object initialized with configuration. @param conf Hadoop configuration object @return Options object configured by the provided settings
2781 Retrieves the RPC timeout from configuration. @param conf Configuration object @return Timeout value in milliseconds, or ping interval if disabled, or -1 if invalid
2782 Establishes an FTP connection using configuration settings. @return connected FTPClient instance @throws IOException if connection or login fails
2783 Retrieves and ensures a positive long configuration value. @param key configuration property name @param defVal default value if not found or invalid @return parsed long value, ensuring positivity or default if negative
2784 Retrieves server default settings for file system operations. @return FsServerDefaults object with configuration values @throws IOException if an I/O error occurs
2785 Retrieves default block size for a file path. @param f file path @return default block size in bytes, defaulting to 32MB
2786 Reports and moves a checksum failure to a bad files directory. @param p the path of the corrupted file @param in input stream of the corrupted file @param inPos position in the input stream @param sums input stream of the checksum file @param sumsPos position in the checksum stream @return false, indicating failure to handle the error
2787 Constructs a new instance of CachingGetSpaceUsed using a Builder. @param builder configuration builder with path, interval, jitter, and initial used space @throws IOException if canonical path cannot be determined
2788 Reads the next record from a sequence file into a buffer. @param buffer DataOutputBuffer to store the record data @return Length of the key or -1 if end reached @throws IOException if an I/O error occurs
2789 Retrieves the default retry policy based on configuration. @param conf configuration object @param retryPolicyEnabledKey key for enabling the retry policy @param defaultRetryPolicyEnabled default enable status @param retryPolicySpecKey key for retry policy specification @param defaultRetryPolicySpec default retry policy specification @param remoteExceptionToRetry exception to retry on remotely @return configured RetryPolicy or a no-retry policy if invalid
2790 Constructs a new Hadoop IPC client. @param valueClass class type of writable values @param conf configuration settings for the client
2791 Retrieves or creates a cached Hadoop IPC client. @param conf configuration settings for the client @param factory socket factory for creating connections @param valueClass class type of writable values @return Client instance from cache or newly created one
2792 Excludes incompatible credential providers from configuration. @param config current Hadoop configuration @param fileSystemClass FileSystem class to check compatibility against @return new Configuration with filtered credential providers
2793 Retrieves an AbstractFileSystem instance for a specified URI and configuration. @param uri file system URI @param conf configuration settings @return AbstractFileSystem object or throws UnsupportedFileSystemException if unsupported
2794 Builds a server instance with configured parameters. Validates required fields and retrieves RPC engine. @throws IOException if an I/O error occurs @throws HadoopIllegalArgumentException if any required parameter is missing
2795 Deprecated method to get a TrashPolicy instance. @param conf Hadoop configuration object @param fs FileSystem object @param home Home directory path @return Configured TrashPolicy instance initialized with given parameters
2796 Retrieves and initializes a TrashPolicy instance based on configuration. @param conf Hadoop configuration settings @param fs FileSystem instance to manage @return configured TrashPolicy object
2797 Creates a new DomainNameResolver instance based on configuration. @param conf system configuration @param configKey key for resolver class in configuration @return configured DomainNameResolver instance
2798 Retrieves an instance of SaslPropertiesResolver configured by the given configuration. @param conf Hadoop configuration object @return SaslPropertiesResolver instance or default if not specified
2799 Validates SASL properties resolver. @param saslPropsResolverKey configuration key for SASL resolver
2800 Retrieves and instantiates the impersonation provider configured in Hadoop. @param conf Hadoop configuration object @return new instance of the configured impersonation provider
2801 Shuts down the executor with a timeout. @param conf Configuration object
2802 Retrieves password for a given configuration key. @param name configuration key name for the password @return character array representing the password or null if not found @throws IOException if an error occurs during retrieval
2803 Creates a raw erasure encoder. @param conf Hadoop configuration object @param codec unique identifier for the codec @param coderOptions options for configuring the coder @return RawErasureEncoder instance or throws exception if creation fails
2804 Creates a raw erasure decoder. @param conf Hadoop configuration object @param codec unique identifier for the codec @param coderOptions options for configuring the coder @return RawErasureDecoder instance or throws exception if creation fails
2805 Swaps the current call queue with a new one. @param schedulerClass class of the new RpcScheduler @param queueClassToUse type of BlockingQueue to create @param maxSize maximum size of the new queue @param ns namespace for configuration @param conf configuration settings
2806 Initializes a FairCallQueue with specified priority levels and capacity. @param priorityLevels number of priority queues @param capacity total queue capacity @param ns namespace for configuration keys @param capacityWeights weights for each priority level's capacity @param serverFailOverEnabled flag to enable server failover @param conf configuration object @throws IllegalArgumentException if priority levels are less than 1
2807 Stores an item in Hadoop configuration as a Base64 encoded string. @param conf Hadoop configuration settings @param item object to store @param keyName configuration key for the stored item @throws IOException if serialization fails
2808 Loads an object from Hadoop configuration using a Base64 encoded string. @param conf Hadoop configuration settings @param keyName configuration property name @param itemClass class type for deserialization @return deserialized object of type K @throws IOException if deserialization fails
2809 Stores an array of objects in a Hadoop configuration as a Base64 encoded string. @param conf Hadoop configuration settings @param items array of objects to store @param keyName configuration key under which to store the array @throws IOException if serialization fails
2810 Loads an array of objects from configuration. @param conf Hadoop configuration settings @param keyName configuration property name @param itemClass class type for the array items @return array of deserialized objects or empty if not found @throws IOException if deserialization fails
2811 Initializes a SequenceFile Writer. @param fs FileSystem to write to @param conf Hadoop configuration settings @param name Path of the output file @param keyClass Class type of the key @param valClass Class type of the value @param bufferSize Buffer size for data transfer @param replication Number of replications for the file @param blockSize Block size for the file @param progress Progress monitor @param metadata Metadata for the file @throws IOException if initialization fails
2812 Copies an object from source to destination using serialization. @param conf Configuration object for serialization settings @param src Source object to copy @param dst Destination object to copy into @return Destination object with copied data @throws IOException if I/O error occurs during serialization/deserialization
2813 Deprecated method to propagate configuration options. @param builder FSBuilder instance to configure @param conf Configuration object containing properties @param optionalPrefix Prefix for optional config keys @param mandatoryPrefix Prefix for mandatory config keys @return Configured FSBuilder instance
2814 Retrieves group names for a given user from LDAP. @param user username to search for @param goUpHierarchy number of levels to traverse upwards in the group hierarchy @return set of group names associated with the user @throws NamingException if LDAP operations fail
2815 Writes configuration data to output in specified format. @param conf Configuration object containing settings @param out Writer for the response output @param format Desired output format ("json" or "xml") @param propertyName Specific property to include, or null for all @throws IOException on IO errors @throws IllegalArgumentException if a specified property is not found @throws BadFormatException if format is not supported
2816 Initializes authentication filter in the given container. @param container target FilterContainer for adding the filter @param conf Hadoop configuration object
2817 Creates a SASL client for authentication. @param authType type of SASL authentication @return SaslClient object or null if not applicable @throws SaslException on SASL-related errors @throws IOException on I/O errors
2818 Creates a FileSystem instance for a given URI and configuration. @param uri file system URI @param conf Hadoop configuration object @return initialized FileSystem object @throws IOException if initialization fails
2819 Initializes the ViewFileSystem with a URI and configuration. Sets up inner cache, client-side view, and working directory. @param theUri file system URI @param conf Hadoop configuration object @throws IOException if initialization fails
2820 Initializes the FilterFileSystem with a URI and configuration. Ensures proper initialization of the underlying file system. @param name file system URI, may be null or without scheme @param conf Hadoop configuration object @throws IOException if initialization fails
2821 Makes a given file path fully qualified. @param path the path to qualify @return fully qualified Path object
2822 Resolves and returns the path of a file or directory. @param p the input path to resolve @return Path object representing the resolved location @throws IOException if an I/O error occurs during resolution
2823 Validates the given file system path. @param path the path to validate
2824 Initializes AvroFSInput with a file context and path. @param fc FileContext for file operations @param p Path to the input file @throws IOException if an I/O error occurs during initialization
2825 Copies a file or directory from source to destination. @param src source path @param dst destination path @param deleteSource flag to delete the source after copy @param overwrite flag to overwrite if destination exists @return true if copy is successful, false otherwise @throws IOException for I/O errors
2826 Constructs an FSDataInputStreamBuilder. @param fileSystem Hadoop FileSystem instance @param path file path within the file system
2827 Constructs a FSDataInputStreamBuilder. @param fileSystem mandatory Hadoop file system instance @param pathHandle mandatory file system path handle
2828 Opens a file using the appropriate method based on availability. @param fs FileSystem instance @param status FileStatus object @param readPolicies Read policies for the file @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2829 Attempts to load a keystore from the specified path or its backup. Handles loading, deletion of old backups, and renaming corrupted files. @param path primary path to the keystore file @param backupPath backup path to the keystore file @return FsPermission of the loaded keystore file @throws IOException if an I/O error occurs @throws NoSuchAlgorithmException if the algorithm used is not available @throws CertificateException if there is a problem with certificates
2830 Constructs a Sorter instance with specified metadata. @param fs Hadoop FileSystem for file operations @param keyClass class of the keys to be sorted @param valClass class of the values associated with keys @param conf Configuration object containing sort parameters
2831 Retrieves a Bzip2 compressor instance based on native library availability. @param conf Hadoop configuration object @return Bzip2Compressor if native library is loaded, otherwise BZip2DummyCompressor
2832 Initializes the sequence file reader with specified parameters. @param filename path to the sequence file @param in input stream for reading the file @param start starting position in the file @param length length of data to read @param conf configuration settings @param tempReader flag indicating temporary reader status @throws IOException if initialization fails or I/O error occurs
2833 Creates a compression output stream using ZStandard. @param out underlying output stream for compressed data @param compressor compression algorithm to use @return CompressionOutputStream configured with specified settings @throws IOException if native code is not available or input invalid
2834 Creates a ZStandard compressor. Checks for native library availability and initializes with config settings. @return ZStandardCompressor instance
2835 Creates a compression input stream for ZStandard. @param in the underlying input stream @param decompressor the decompression algorithm to use @return CompressionInputStream for reading compressed data @throws IOException if an I/O error occurs or native code is unavailable
2836 Creates a decompressor using ZStandard algorithm. Checks for native library availability and initializes with configured buffer size. @return ZStandardDecompressor instance
2837 Prepares a data block for writing. @return BlockAppender instance for appending data @throws IOException if an I/O error occurs or conditions are not met
2838 Constructs a ScriptBasedMapping with specified configuration. @param conf Configuration object containing settings for script execution and mapping.
2839 Sets configuration and propagates it to raw mapping. @param conf Configuration object for script execution
2840 Initializes KeyShell commands and sets configuration options. @param args command-line arguments @return 0 on success, 1 on error or help request
2841 Retrieves or creates a ConnectionId for Hadoop IPC. @param addr server address @param protocol communication protocol class @param ticket user credentials @param rpcTimeout timeout in milliseconds @param connectionRetryPolicy retry policy for connections @param conf configuration settings @return configured ConnectionId object
2842 Creates a file on the FTP server. @param file path of the file to create @param permission permissions for the new file @param overwrite whether to overwrite if the file exists @param bufferSize buffer size for data transfer @param replication replication factor (not used in FTP) @param blockSize block size (not used in FTP) @param progress progress monitor (not used) @return FSDataOutputStream for writing to the created file @throws IOException if an I/O error occurs or file creation fails
2843 Retrieves server default settings for file system operations at the specified path. @param p file path to check defaults for @return FsServerDefaults object with configuration values @throws IOException if an I/O error occurs
2844 Creates a file with default settings in the Hadoop file system. @param f file path @param overwrite flag to overwrite existing files @return FSDataOutputStream for writing to the file
2845 Creates a file with default settings. @param f file path @param progress progress monitor @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
2846 Creates a file with specified replication. @param f file path @param replication number of replications for the file @return FSDataOutputStream for writing to the file
2847 Creates a new file with specified replication and buffer size. @param f file path @param replication number of replications for the file @param progress progress monitor @return FSDataOutputStream for writing to the file
2848 Creates a file with specified path and buffer size. @param f file path @param overwrite flag to overwrite existing files @param bufferSize buffer size for data transfer @return FSDataOutputStream for writing to the file
2849 Creates a file with default replication and block size. @param f file path @param overwrite flag to overwrite existing files @param bufferSize buffer size for data transfer @param progress progress monitor @return FSDataOutputStream for writing to the file
2850 Initializes a new FSDataOutputStreamBuilder for the specified file system and path. @param fileSystem Hadoop FileSystem instance @param p Path to the file
2851 Reads the next key-value pair from a sequence file. @param key Writable object to store the read key @return true if a key is successfully read, false otherwise @throws IOException if an I/O error occurs or key class mismatch
2852 Reads the next key-value pair from a sequence file. @param key the key to be populated with the read data @return the deserialized key object or null if end of file is reached @throws IOException if an I/O error occurs or key class mismatch
2853 Constructs a new Invoker for remote procedure calls. @param protocol the RPC protocol class @param connId connection identifier @param conf configuration settings @param factory socket factory for connections @param alignmentContext context for data alignment
2854 Retrieves or creates a cached Hadoop IPC client. @param conf configuration settings for the client @return Client instance from cache or newly created one
2855 Retrieves or creates a cached Hadoop IPC client. @param conf configuration settings for the client @param factory socket factory for creating connections @return Client instance from cache or newly created one
2856 Constructs a new Invoker instance for RPC operations. @param protocol the class representing the RPC protocol @param connId connection ID for the remote server @param conf configuration settings for the client @param factory socket factory for creating connections @param alignmentContext context for alignment purposes
2857 Checks if a specific RPC method is supported by the server. @param rpcProxy proxy object for the RPC call @param protocol interface class of the protocol @param rpcKind kind of RPC (e.g., PROTOBUF) @param version protocol version to check @param methodName name of the method to verify @return true if the method is supported, false otherwise
2858 Initializes a new Trash instance with specified FileSystem and Configuration. @param fs FileSystem to manage trash operations @param conf Hadoop configuration settings @throws IOException if an I/O error occurs
2859 Creates and initializes a NetworkTopology instance using default node factory. @param conf configuration object for network topology @return configured NetworkTopology instance
2860 Initializes a new instance of SaslRpcClient. @param ugi UserGroupInformation for authentication @param protocol RPC protocol class @param serverAddr Server address to connect to @param conf Hadoop configuration object
2861 Refreshes superuser groups configuration for proxy users. @param conf Hadoop configuration object @param proxyUserPrefix prefix for proxy user group names
2862 Adds a shutdown hook with specified priority. @param shutdownHook the runnable task to execute during shutdown @param priority execution priority of the hook
2863 Retrieves password string from configuration. @param conf Configuration object @param name Password key name @return Password as string or null if not found @throws IOException on retrieval error
2864 Retrieves password from configuration or default. @param conf Configuration object @param alias key for the password @param defaultPass fallback password if retrieval fails @return password as String
2865 Retrieves and parses ZooKeeper authentication information from configuration. @param conf Hadoop configuration object @param configKey key for the authentication configuration @return List of ZKAuthInfo objects or empty list if not found @throws IOException if an error occurs during retrieval or parsing
2866 Initializes a DecayRpcScheduler with configuration settings. @param numLevels number of priority levels for scheduling @param ns namespace for configuration keys @param conf Configuration object containing system settings
2867 Clones a Writable object using serialization. @param orig original Writable object to clone @param conf configuration for cloning process @return cloned Writable object @throws RuntimeException if I/O error occurs during cloning
2868 Writes configuration settings as XML to an output stream. @param out OutputStream to write the XML data @throws IOException if writing fails
2869 Selects a suitable SASL client from available auth types. @param authTypes list of supported authentication methods @return chosen SaslAuth method or throws exception if none applicable @throws SaslException on SASL-related errors @throws AccessControlException if no valid auth type found @throws IOException on I/O errors
2870 Initializes an FtpFs instance with given URI and configuration. @param theUri FTP file system URI @param conf Hadoop configuration object @throws IOException if initialization fails @throws URISyntaxException if URI is invalid
2871 Initializes a RawLocalFs instance. @param theUri file system URI @param conf Hadoop configuration object @throws IOException if initialization fails @throws URISyntaxException if URI is invalid
2872 Initializes the ChRootedFileSystem with a URI and configuration. Sets up the root path and underlying file system. @param name file system URI, may be null or without scheme @param conf Hadoop configuration object @throws IOException if initialization fails
2873 Constructs a MultipartUploaderBuilderImpl with file system and path. @param fileSystem Hadoop FileSystem instance @param p Path to the file for upload
2874 Initializes a new PathData instance. @param fs FileSystem object for path operations @param pathString file path string @param stat FileStatus object representing the file's metadata @throws IOException if path processing fails
2875 Checks if a path has a specific capability. @param path file system path to check @param capability capability string to verify @return true if the path supports the capability, false otherwise
2876 Retrieves the fully qualified root path. @param path input file path @return fully qualified root Path object @throws IOException if an I/O error occurs
2877 Makes a given file path fully qualified, optionally swapping its scheme. @param path the path to qualify @return fully qualified Path object with swapped scheme if applicable
2878 Retrieves the FileStatus of a given path, resolving symlinks if configured. @param item PathData object representing the file or directory @param depth current recursion depth for symlink resolution @return FileStatus object of the resolved path @throws IOException if an I/O error occurs during retrieval
2879 Converts a given path to its full path within the root directory. @param path the relative or absolute path to convert @return the full path as a Path object
2880 Copies a file or directory from source to destination without deletion or overwrite. @param src source path @param dst destination path @return true if copy is successful, false otherwise @throws IOException for I/O errors
2881 Creates an FSDataInputStreamBuilder for a given FileSystem and Path. @param fileSystem Hadoop FileSystem instance @param path file path within the file system @return FSDataInputStreamBuilder object
2882 Creates a builder for constructing FSDataInputStream. @param fileSystem mandatory Hadoop file system instance @param pathHandle mandatory file system path handle @return FSDataInputStreamBuilder object
2883 Attempts to load an incomplete flush from the keystore. Checks for existence of _NEW and _OLD paths, loads permissions if available, otherwise initializes a new empty keystore. @param oldPath path to the old keystore file @param newPath path to the new keystore file @return FsPermission of the loaded keystore or newly created one @throws IOException if an I/O error occurs @throws NoSuchAlgorithmException if the algorithm used is not available @throws CertificateException if there is a problem with certificates
2884 Creates a BZip2 compressor. @return Compressor instance based on configuration settings
2885 Retrieves a meta block reader by name. @param name unique identifier for the meta block @return BlockReader instance for reading the meta block @throws IOException if an I/O error occurs @throws MetaBlockDoesNotExist if the meta block does not exist
2886 Retrieves a data block reader for the specified index. @param blockIndex index of the block to read @return BlockReader instance for the given block index @throws IOException if an I/O error occurs or index is out of bounds
2887 Closes the Writer, finalizing data and metadata writing. Ensures proper resource management and integrity checks. @throws IOException if an I/O error occurs during closure
2888 Prepares a metadata block for writing using a specified compression algorithm. @param name unique identifier for the metadata block @param compressionName name of the compression algorithm to use @return BlockAppender object for writing metadata @throws IOException if an I/O error occurs @throws MetaBlockAlreadyExists if the metadata block already exists
2889 Prepares a metadata block with the default compression algorithm. @param name unique identifier for the metadata block @return BlockAppender object for writing metadata @throws IOException if an I/O error occurs @throws MetaBlockAlreadyExists if the metadata block already exists
2890 Initializes data block for writing. Ensures a new BlockAppender is available.
2891 Creates a file in the Hadoop file system with default settings. @param f file path @return FSDataOutputStream for writing to the file
2892 Creates a new log file with a unique name. Handles file existence checks and retries with incremented suffixes. @param initial base path for the log file @throws IOException if file creation fails
2893 Attempts to create a log file or append to an existing one. @param targetFile the path of the log file @throws IOException if file operations fail
2894 Saves a Java object as JSON to a Hadoop file. @param fs FileSystem to save the file @param path file path in the file system @param instance Java object to serialize @param overwrite flag to overwrite existing files @throws IOException if writing fails
2895 Deprecated constructor for creating a SequenceFile writer. Initializes the Writer with no compression and default sync interval. @param fs FileSystem to write to @param conf Hadoop configuration settings @param name Path of the file to create @param keyClass Class type of the key @param valClass Class type of the value @param progress Progress monitor @param metadata Metadata for the file @throws IOException if an I/O error occurs
2896 Creates a new file in the Hadoop file system. @param f Path to the new file @return true if file is created, false if it already exists or an error occurs
2897 Initializes a new FSDataOutputStreamBuilder. @param fileSystem Hadoop FileSystem instance @param p Path to the file
2898 Reads the next key-value pair from a sequence file. @param key Writable object to store the read key @param val Writable object to store the retrieved value @return true if a key is successfully read, false otherwise @throws IOException if an I/O error occurs or class mismatch
2899 Constructs a new Trash instance with specified Configuration. @param conf Hadoop configuration settings @throws IOException if an I/O error occurs during initialization
2900 Creates a DomainNameResolver for a given URI. @param conf system configuration @param uri target URI @param configKey base key for resolver class in configuration @return configured DomainNameResolver instance for the URI's host
2901 Retrieves or creates a singleton instance of the Groups service. @param conf Hadoop configuration object @return Singleton Groups object for user-to-group mapping
2902 Initializes and returns a Groups instance with the provided configuration. @param conf Hadoop configuration object @return Singleton Groups object initialized with given config
2903 Refreshes superuser groups configuration using default proxy user prefix. @param conf Hadoop configuration object
2904 Marks a file for deletion on JVM shutdown. @param f path to the file @return true if marked successfully, false if file does not exist @throws AccessControlException if access is denied @throws IOException if an I/O error occurs
2905 Registers this shutdown hook with specified priority. Unregisters any existing hook first to ensure only one is active. @param priority execution priority of the shutdown hook
2906 Logs startup and shutdown messages for a class. @param clazz the class being started @param args command-line arguments passed to the component @param log logger for recording messages
2907 Loads SSL configuration from provided configuration. @throws IOException if required properties are missing or invalid
2908 Creates key managers from configuration for specified SSL mode. @param mode SSLFactory mode to configure @param keystoreType type of the keystore (e.g., JKS, PKCS12) @param storesReloadInterval interval in milliseconds for reloading keystores @throws GeneralSecurityException if security settings are invalid @throws IOException if there's an I/O error accessing files
2909 Retrieves ZooKeeper authentication information. @param conf Hadoop configuration object @return List of ZKAuthInfo objects or empty list if not found @throws IOException if an error occurs during retrieval
2910 Retrieves and returns a list of groups for a given user. @param user username to search for @return List of group names associated with the user or empty list if fails
2911 Main entry point to write configuration settings as XML. Initializes Configuration and writes it to standard output.
2912 Initiates SASL authentication with the server. @param ipcStreams streams for communication @return negotiated AuthMethod or throws IOException on failure
2913 Initializes a new PathData instance. @param fs FileSystem object for path operations @param pathString file path string @throws IOException if path processing fails
2914 Retrieves and lists the contents of a directory. @return array of PathData objects representing directory items @throws IOException if path operations fail
2915 Handles FileNotFoundException for directories, ignoring it if the filesystem does not support consistent listing. @param fs FileSystem instance to check capabilities @param path Path of the directory @param e FileNotFoundException to handle or ignore @throws FileNotFoundException if directory is missing and supported
2916 Checks if a path has the specified capability. @param path file system path to check @param capability capability string to verify @return true if the path supports the capability, false otherwise
2917 Checks if a path has a specific capability. @param path file system path to check @param capability capability string to verify @return true if the path supports the capability, false otherwise @throws IOException if an I/O error occurs during resolution
2918 Retrieves the fully qualified root path of a given file system path. @param fs Hadoop FileSystem instance @param path input file path @return fully qualified root Path object @throws IOException if an I/O error occurs
2919 Opens a file for reading. @param path file path within the file system @return FutureDataInputStreamBuilder object for asynchronous data input operations
2920 Opens a file for reading using the provided path handle. @param pathHandle mandatory file system path handle @return FutureDataInputStreamBuilder object for further operations @throws IOException if an I/O error occurs @throws UnsupportedOperationException if not supported
2921 Locates and loads the keystore, handling password retrieval and file consistency checks. @throws IOException if an I/O error occurs during keystore operations
2922 Checks and initializes the TFile data index. Ensures proper resource management by closing the BlockReader. @throws IOException if an I/O error occurs
2923 Retrieves a meta block input stream by name. @param name unique identifier for the meta block @return DataInputStream for reading the meta block @throws IOException if an I/O error occurs @throws MetaBlockDoesNotExist if the meta block does not exist
2924 Initializes Reader to process BCFile. @param fin input stream for the file @param fileLength length of the file in bytes @param conf configuration settings @throws IOException if initialization fails
2925 Prepares a metadata block for writing. @param name unique identifier for the metadata block @param compressName name of the compression algorithm to use @return DataOutputStream for writing metadata @throws IOException if an I/O error occurs @throws MetaBlockAlreadyExists if the metadata block already exists
2926 Closes the TFile writer, finalizing data and metadata writing. Ensures proper resource management and integrity checks. @throws IOException if an I/O error occurs during closure
2927 Prepares a metadata block for writing. @param name unique identifier for the metadata block @return DataOutputStream for writing metadata @throws IOException if an I/O error occurs @throws MetaBlockAlreadyExists if the metadata block already exists
2928 Prepares for appending a new key. @param length expected length of the key @return DataOutputStream for writing the key @throws IOException if an I/O error occurs
2929 Copies a file or directory to the specified destination. @param src source file or directory @param dstFS destination filesystem @param dst destination path @param deleteSource flag to delete source after copy @param conf configuration object @return true if successful, false otherwise @throws IOException if an I/O error occurs
2930 Completes a multipart file upload. @param multipartUploadId unique identifier for the upload session @param filePath target path for the final file @param handleMap mapping of part numbers to PartHandles @return PathHandle of the completed file @throws IOException if an I/O error occurs during upload completion
2931 Creates a file in Hadoop FS with specified permissions. @param fs FileSystem instance @param file Path to the new file @param permission FsPermission for the file @return FSDataOutputStream for writing to the file
2932 Creates a SequenceFile writer without compression. @param fs Hadoop FileSystem instance @param conf Hadoop configuration settings @param name file path for the SequenceFile @param keyClass class type of the key @param valClass class type of the value @throws IOException if initialization fails
2933 Rolls the log directory by creating a new log file. Handles directory creation and file appending or creation based on configuration. @throws IOException if file operations fail
2934 Reads the next key-value pair from the MapFile. @param key object to store the read key @param val object to store the retrieved value @return true if a key is successfully read, false otherwise @throws IOException if an I/O error occurs
2935 Creates a client proxy for the specified RPC protocol. @param protocol interface class for the communication protocol @param clientVersion version of the client @param addr address of the server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy retry policy for failed connections (not supported) @param fallbackToSimpleAuth flag to allow falling back to simple auth @param alignmentContext context for alignment (optional) @return ProtocolProxy instance wrapping the client proxy @throws IOException if an I/O error occurs
2936 Retrieves or creates a singleton instance of the Groups service. Uses default Hadoop configuration settings. @return Singleton Groups object for user-to-group mapping
2937 Initializes user group information with given configuration. @param conf Hadoop configuration object @param overrideNameRules flag to override Kerberos name rules
2938 Constructs a new AccessControlList instance.
2939 Constructs an AccessControlList from a space-separated ACL string. @param aclString string containing user and group access definitions
2940 Constructs an AccessControlList with specified users and groups. @param users comma-separated user definitions @param groups comma-separated group definitions
2941 Refreshes superuser groups configuration using default settings.
2942 Initializes SSL key and trust managers based on configuration. @param mode SSLFactory mode for initialization @throws IOException if there's an I/O error accessing files @throws GeneralSecurityException if security settings are invalid
2943 Starts a ZooKeeper connection with specified authentication and SSL settings. @param authInfos list of authentication information @param sslEnabled flag indicating whether SSL is enabled @throws IOException if configuration or connection fails
2944 Retrieves and transforms user groups based on configured rule. @param user username to fetch groups for @return List of transformed group names or original if no transformation is applied
2945 Initializes the metrics system with a given prefix. @param prefix metric property prefix @return MetricsSystem instance
2946 Appends an extension to the current path. @param extension file extension to add @return new PathData instance with appended extension @throws IOException if path processing fails
2947 Retrieves PathData for a child path. @param child PathData instance of the child path @return PathData object for the child path @throws IOException if path processing fails
2948 Recursively processes a file system path. @param item PathData object representing the current directory or file @throws IOException if an I/O error occurs during processing
2949 Checks if the given path has the specified capability. @param path file system path to check @param capability capability string to verify @return true for read-only connector, otherwise delegates to superclass
2950 Checks if a path has the specified capability. @param path file system path to check @param capability capability string to verify @return true for read-only connector capability, otherwise delegates to superclass
2951 Checks if a path has a specific capability. @param path file system path to check @param capability capability string to verify @return true if the path supports the capability, false otherwise
2952 Lists file statuses within the specified directory. Handles FileNotFoundException and IOExceptions across nodes. @param f directory path @return array of FileStatus objects @throws FileNotFoundException if all nodes have not been found @throws IOException if an I/O error occurs
2953 Copies a file or directory from one filesystem to another. Handles both single files and directories recursively. @param srcFS source FileSystem @param srcStatus status of the source file or directory @param dstFS destination FileSystem @param dst destination Path @param deleteSource flag to delete the source after copy @param overwrite flag to allow overwriting existing files @param conf Configuration object @return true if successful, false otherwise @throws IOException if an I/O error occurs
2954 Recursively copies files or directories from source to destination. @param srcFS source FileSystem @param srcStatus FileStatus of the source file/directory @param dst destination File object @param deleteSource flag to delete source after copy @param conf Configuration object @return true if operation is successful, false otherwise
2955 Opens a file with specified read policy and length. @param policy read policy for the file @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2956 Opens a file for reading with specified buffer size and length. @param fs FileSystem object @param file Path to the file @param bufferSize Buffer size for reading @param length Length of data to read, -1 for full file @return FSDataInputStream for file operations @throws IOException if an I/O error occurs
2957 Loads Java object from JSON file in Hadoop FileSystem. @param fs FileSystem instance @param path file path within the file system @param status optional FileStatus for input stream configuration @return deserialized Java object of type T @throws IOException if an I/O error occurs
2958 Retrieves the smallest key from the TFile index. Ensures the index is checked and initialized. @return RawComparable representing the first key or null if empty @throws IOException if an I/O error occurs during index check
2959 Retrieves the last key from the TFile index. Initializes and checks the TFile data index if necessary. @return RawComparable representing the last key, or null if index is empty @throws IOException if an I/O error occurs during initialization
2960 Retrieves the block containing a key. @param key the key to search for @param greater true to find upper bound, false for lower bound @return Location of the block or end if not found @throws IOException if an I/O error occurs
2961 Retrieves the key nearest to a given offset. @param offset file position to search near @return RawComparable object or null if not found @throws IOException if an I/O error occurs
2962 Initializes a Reader to access TFile data. @param fsdis input stream for the file @param fileLength length of the file @param conf configuration settings @throws IOException if an I/O error occurs
2963 Initializes a new data block for reading. Closes any existing block reader and opens a new one at the specified index. Updates the current location to the start of the new block. @param blockIndex index of the block to initialize @throws IOException if an I/O error occurs
2964 Appends a key-value pair to the TFile. @param key byte array containing the key data @param koff offset in the key array where the key starts @param klen length of the key @param value byte array containing the value data @param voff offset in the value array where the value starts @param vlen length of the value @throws IOException if an I/O error occurs during writing
2965 Retrieves the middle key from the MapFile. @return WritableComparable middle key or null if file is empty @throws IOException if an I/O error occurs during index reading
2966 Sets the final key in the map file. @param key WritableComparable object to store the last key @throws IOException if an I/O error occurs during operations
2967 Seeks to the specified key position in a MapFile. @param key target key to seek @param before flag indicating if seeking before or at the key @return comparison result of the found key with the target key @throws IOException if an I/O error occurs during seek operations
2968 Performs a single pass of merging input files into the output file. @throws IOException if an I/O error occurs during processing
2969 Creates a client proxy for the specified RPC protocol. @param protocol interface class for the communication protocol @param clientVersion version of the client @param addr address of the server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy retry policy for failed connections (not supported) @return ProtocolProxy instance wrapping the client proxy @throws IOException if an I/O error occurs
2970 Creates a client proxy for the specified RPC protocol using connection details. @param protocol interface class for the communication protocol @param clientVersion version of the client @param connId connection ID containing server address and credentials @param conf configuration settings @param factory socket factory for creating connections @param alignmentContext context for alignment (optional) @return ProtocolProxy instance wrapping the client proxy @throws IOException if an I/O error occurs
2971 Retrieves the current trash directory path. @return Path object representing the trash directory @throws IOException if an I/O error occurs while accessing the trash directory
2972 Retrieves the current trash directory for a given file system path. @param path file system path to check @return trash directory path or null if not applicable @throws IOException if an I/O error occurs
2973 Ensures UserGroupInformation is initialized. Initializes with default configuration if not already done.
2974 Sets Hadoop configuration and initializes user group information. @param conf Hadoop configuration object
2975 Launches a Hadoop service with configuration and arguments. Handles exceptions, logs errors, and returns an ExitException. @param conf Configuration object for service initialization @param instance Service instance to be launched @param processedArgs List of command-line arguments @param addShutdownHook Flag to register shutdown hook @param execute Flag to execute the service @return ExitUtil.ExitException indicating success or failure
2976 Initiates ZooKeeper connection with specified authentication. @param authInfos list of authentication information @throws IOException if configuration or connection fails
2977 Constructs a LocalFs instance with specified URI. @param theUri local file system URI @param conf configuration settings for the file system @throws IOException if an I/O error occurs @throws URISyntaxException if URI syntax is invalid
2978 Copies an input stream to a target path in the Hadoop file system. @param in InputStream to read from @param target PathData object representing the target file path @throws IOException if an I/O error occurs
2979 Copies a file or directory from one filesystem to another. @param srcFS source FileSystem @param src source Path @param dstFS destination FileSystem @param dst destination Path @param deleteSource flag to delete the source after copy @param overwrite flag to allow overwriting existing files @param conf Configuration object @return true if successful, false otherwise @throws IOException if an I/O error occurs
2980 Repairs and opens a file from the most recent node. @param mrNodes array of MRNflyNode objects representing nodes @param f file path to be opened @param bufferSize buffer size for reading @return FSDataInputStream for reading the file or null if failed
2981 Copies a file or directory from Hadoop FileSystem to local. @param srcFS source FileSystem @param src source Path @param dst destination File object @param deleteSource flag to delete source after copy @param conf Configuration object @return true if operation is successful, false otherwise
2982 Opens file for sequential read access. @return FSDataInputStream for reading the file sequentially @throws IOException if an I/O error occurs
2983 Loads Java object from JSON file in Hadoop FileSystem. @param fs FileSystem instance @param path file path within the file system @return deserialized Java object of type T @throws IOException if an I/O error occurs
2984 Retrieves the record number near a specified file offset. @param offset target file position @return The calculated record number as a long value @throws IOException if an I/O error occurs
2985 Retrieves the current record number. @return The record number as a long value @throws IOException if an I/O error occurs
2986 Initializes a Scanner for reading TFile data. @param reader Reader object to access the file @param begin Start location within the file @param end End location within the file @throws IOException if an I/O error occurs during initialization
2987 Seeks to a specified location within the TFile. Validates the location and adjusts the cursor accordingly. @param l Location object to seek to @throws IOException if an I/O error occurs
2988 Advances to the next record in the TFile. Returns false if at end of file, otherwise advances and returns true.
2989 Appends a key-value pair to the TFile. @param key byte array containing the key data @param value byte array containing the value data @throws IOException if an I/O error occurs during writing
2990 Seeks to the specified key position in a MapFile. @param key target key to seek @return comparison result of the found key with the target key @throws IOException if an I/O error occurs during seek operations
2991 Retrieves the closest key-value pair to a specified key. @param key target key for comparison @param val Writable object to store the retrieved value @param before flag indicating if seeking before or at the key @return closest key or null if not found @throws IOException if an I/O error occurs during operations
2992 Creates a UserGroupInformation object for testing purposes. @param user username of the test user @param userGroups array of group names associated with the user @return UserGroupInformation object configured for testing
2993 Creates a proxy user for testing purposes. @param user username for the proxy @param realUser actual user being proxied @param userGroups array of group names to assign to the proxy user @return UserGroupInformation object representing the proxy user with specified groups
2994 Retrieves the list of groups associated with the authenticated user. @return unmodifiable list of group names or empty list if retrieval fails
2995 Retrieves the set of groups for the authenticated user. @return an unmodifiable set of group names or empty set if retrieval fails
2996 Performs subject-based Kerberos login. @param subject user identity to authenticate @param params login parameters @return UserGroupInformation object for authenticated user @throws IOException if login fails
2997 Refreshes service ACLs using provided configuration and policy. @param conf Configuration object containing security settings @param provider PolicyProvider for retrieving service definitions
2998 Authorizes a proxy user based on their identity and remote address. @param user UserGroupInformation object representing the user @param remoteAddress String representation of the user's remote address @throws AuthorizationException if authorization fails or an error occurs
2999 Authorizes proxy user access based on group info and remote address. @param user UserGroupInformation object representing the user @param remoteAddress InetAddress of the client making the request
3000 Launches a Hadoop service with configuration and arguments. Calls the overloaded method with null service instance. @param conf Configuration object for service initialization @param processedArgs List of command-line arguments @param addShutdownHook Flag to register shutdown hook @param execute Flag to execute the service @return ExitUtil.ExitException indicating success or failure
3001 Initiates ZooKeeper connection without authentication. @throws IOException if configuration or connection fails
3002 Copies a file from source to target in Hadoop FS. Handles path checks, checksum verification, and attribute preservation. @param src source PathData object @param target destination PathData object @throws IOException if an I/O error occurs
3003 Copies a file or directory from one filesystem to another. @param srcFS source FileSystem @param src source Path @param dstFS destination FileSystem @param dst destination Path @param deleteSource flag to delete the source after copy @param conf Configuration object @return true if successful, false otherwise @throws IOException if an I/O error occurs
3004 Opens a file for reading across multiple nodes. @param f file path to be opened @param bufferSize buffer size for reading @return FSDataInputStream for reading the file @throws IOException if all nodes fail or an I/O error occurs
3005 Creates a Scanner for reading TFile data. @return Scanner object initialized with file's start and end locations @throws IOException if an I/O error occurs during initialization
3006 Creates a scanner for reading TFile data within specified record range. @param beginRecNum starting record number (inclusive) @param endRecNum ending record number (exclusive) @return Scanner object for the specified range @throws IOException if an I/O error occurs during creation
3007 Initializes a Scanner with specific file offsets. @param reader TFile Reader object @param offBegin starting offset within the file @param offEnd ending offset within the file @throws IOException if initialization fails due to I/O error
3008 Rewinds to the beginning of the TFile. @throws IOException if an I/O error occurs
3009 Seeks to specified key in MapFile. @param key target key to seek @return true if exact match found, false otherwise @throws IOException if I/O error occurs during seek
3010 Retrieves the closest key-value pair to a specified key. @param key target key for comparison @param val Writable object to store the retrieved value @return closest key or null if not found @throws IOException if an I/O error occurs during operations
3011 Checks if security is enabled by verifying that SIMPLE authentication is not used. @return true if security is enabled, false otherwise
3012 Logs out a user from Kerberos using the keytab. Handles shutdown of renewal executor and throws exception on failure.
3013 Retrieves an array of group names for the authenticated user. @return an array of group names or empty array if retrieval fails
3014 Checks if a user is allowed access based on username or group membership. @param ugi UserGroupInformation object representing the user @return true if user is in allowed list or groups, false otherwise
3015 Retrieves UserGroupInformation from a given Subject. @param subject the user identity to authenticate @return UserGroupInformation object for authenticated user @throws IOException if authentication fails
3016 Authorizes a proxy user based on their identity and remote address. @param user UserGroupInformation object representing the user @param remoteAddress String representation of the user's remote address @param conf Configuration object (deprecated parameter) @throws AuthorizationException if authorization fails or an error occurs
3017 Authorizes the connection based on user and protocol. Handles proxy user authorization and increments success/failure metrics. @throws RpcServerException if authorization fails
3018 Processes file operations based on source path type. Handles symlinks, regular files, and directories. @param src source PathData object @param dst destination PathData object @throws IOException if an I/O error occurs
3019 Copies a file from HAR filesystem to the local filesystem. @param delSrc flag to delete source file after copy @param src source Path in HAR filesystem @param dst destination Path in local filesystem @throws IOException if an I/O error occurs
3020 Copies a file from the distributed filesystem to the local filesystem. @param delSrc flag to delete the source file after copy @param src source Path in the distributed filesystem @param dst destination Path on the local filesystem @throws IOException if an I/O error occurs
3021 Creates a Scanner for a specific byte range in the TFile. @param offset starting byte position @param length number of bytes to include in the range @return Scanner object covering the specified range @throws IOException if an I/O error occurs during initialization
3022 Initializes a Scanner for reading TFile data within specified key ranges. @param reader Reader object to access the file @param beginKey Starting key for the scan range (inclusive) @param endKey Ending key for the scan range (exclusive) @throws IOException if an I/O error occurs during initialization
3023 Seeks to a specified key within the TFile. @param key byte array containing the key @param keyOffset starting index of the key in the byte array @param keyLen length of the key @return true if successful, false if at end of file @throws IOException if an I/O error occurs
3024 Seeks to the lower bound of a specified key within the TFile. @param key byte array containing the key @param keyOffset starting index in the key array @param keyLen length of the key in bytes @throws IOException if an I/O error occurs
3025 Seeks to the upper bound of a specified key within the TFile. @param key byte array containing the key @param keyOffset offset in the byte array where the key starts @param keyLen length of the key in bytes @throws IOException if an I/O error occurs
3026 Retrieves value for a given key from the MapFile. @param key target key to search for @param val Writable object to store the retrieved value @return the value associated with the key, or null if not found @throws IOException if I/O error occurs during operation
3027 Retrieves or creates a protocol proxy for secure RPC communication. @param protocol the protocol class @param clientVersion version of the client @param connId connection identifier @param conf configuration object @param factory socket factory for connections @param alignmentContext context for alignment @return ProtocolProxy instance for the given protocol @throws IOException if an I/O error occurs during proxy creation
3028 Creates a protocol proxy for remote procedure calls. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory @param rpcTimeout timeout for RPC operations @param connectionRetryPolicy retry policy for connections @param fallbackToSimpleAuth flag to allow fallback to simple auth @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
3029 Creates a protocol proxy for remote procedure calls. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory for connections @param rpcTimeout timeout for RPC operations @param connectionRetryPolicy retry policy for connections @param fallbackToSimpleAuth flag to allow fallback to simple authentication @param alignmentContext context for protocol alignment @return ProtocolProxy instance for the given protocol @throws IOException if an I/O error occurs
3030 Forces secure opening of a file for random read access. Validates owner and group against expected values. @param f the File object to open @param mode the access mode ("r", "rw", etc.) @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return RandomAccessFile instance if successful @throws IOException if file access fails or validation fails
3031 Opens a file securely, checking ownership and group. @param file the File to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FSDataInputStream for the specified file @throws IOException if access or validation fails
3032 Opens a file for secure reading, verifying owner and group. @param f the File object to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FileInputStream if access is granted @throws IOException if file cannot be opened securely
3033 Dumps detailed information about a UserGroupInformation instance. @param title heading for the output section @param ugi UserGroupInformation object to inspect @throws IOException if an I/O error occurs during dumping
3034 Retrieves the current login user's UserGroupInformation. Initializes if not already done and spawns a renewal thread. @return UserGroupInformation object for the logged-in user @throws IOException if initialization or retrieval fails
3035 Logs in a user from a given Subject. @param subject user identity to authenticate @throws IOException if login fails
3036 Processes the RPC connection context from a buffer. Handles authentication, authorization, and proxy user creation. @param buffer input buffer containing serialized connection context @throws RpcServerException if processing fails
3037 Creates a Scanner for reading TFile data within specified key ranges. @param beginKey Starting key for the scan range (inclusive) @param endKey Ending key for the scan range (exclusive) @return Scanner object for the specified key range @throws IOException if an I/O error occurs during initialization
3038 Seeks to a specified key within the TFile. @param key byte array containing the key @return true if successful, false if at end of file @throws IOException if an I/O error occurs
3039 Seeks to the lower bound of a specified key within the TFile. @param key byte array containing the key @throws IOException if an I/O error occurs
3040 Seeks to the upper bound of a specified key. @param key byte array containing the key @throws IOException if an I/O error occurs
3041 Retrieves value for a specified key in SequenceFile. @param key target key to search @return key if found, otherwise null @throws IOException if I/O error occurs
3042 Retrieves value for a given key from the BloomMapFile. Uses Bloom filter to check potential presence of key first. @param key target key to search for @param val Writable object to store the retrieved value @return the value associated with the key, or null if not found @throws IOException if I/O error occurs during operation
3043 Retrieves or creates a protocol proxy for secure RPC communication. @param protocol the protocol class @param clientVersion version of the client @param connId connection identifier @param conf configuration object @param factory socket factory for connections @return ProtocolProxy instance for the given protocol @throws IOException if an I/O error occurs during proxy creation
3044 Creates a protocol proxy for remote procedure calls with default fallback settings. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory @param rpcTimeout timeout for RPC operations @param connectionRetryPolicy retry policy for connections @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
3045 Sets up I/O streams for the connection. Handles authentication and manages SASL connections. @param fallbackToSimpleAuth flag to allow simple authentication fallback
3046 Opens a file for random read access securely. Checks if security is enabled and validates owner/group if necessary. @param f the File object to open @param mode the access mode (\"r\", \"rw\", etc.) @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return RandomAccessFile instance if successful @throws IOException if file access fails or validation fails
3047 Opens a file for secure input stream. @param file the File to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FSDataInputStream for the specified file @throws IOException if access or validation fails
3048 Opens a file for reading securely. @param f the File object to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FileInputStream if access is granted @throws IOException if file cannot be opened securely
3049 Checks if a remote user has administrator access. @param servletContext the ServletContext object @param remoteUser username of the remote user @return true if user is an admin, false otherwise
3050 Authorizes user access to a specified protocol. @param user UserGroupInformation object representing the user @param protocol Class representing the protocol @param conf Hadoop configuration object @param addr Client's InetAddress @throws AuthorizationException if user is not authorized
3051 Retrieves the current user's UserGroupInformation. Initializes if not already done and constructs from Subject or login user. @return UserGroupInformation object for the current user @throws IOException if initialization or retrieval fails
3052 Checks if the current login user's credentials are based on a keytab. @return true if using Kerberos and credentials from keytab; false otherwise @throws IOException if there is an issue retrieving the login user information
3053 Determines if the current login is ticket-based. @return true if Kerberos and Hadoop login without keytab, false otherwise @throws IOException if there's an issue retrieving user information
3054 Executes a privileged action as the login user or terminates if security is enabled and retrieval fails. @param action the PrivilegedAction to be executed @return result of the PrivilegedAction
3055 Executes an action as the current login user. @param action the action to execute with elevated privileges @return result of the privileged action @throws IOException if an I/O error occurs or operation is interrupted
3056 Cedes active status to another node after a specified delay. @param millisToCede milliseconds to wait before ceding @throws AccessControlException if access is denied @throws ServiceFailedException if service operation fails @throws IOException if an I/O error occurs
3057 Initiates a graceful failover to the current node. Executes failover actions under the logged-in user's privileges. @throws ServiceFailedException if failover fails @throws IOException if an I/O error occurs during execution
3058 Creates a Scanner for reading TFile data within specified key ranges. @param beginKey Starting key for the scan range (inclusive) @param endKey Ending key for the scan range (exclusive) @return Scanner object for the specified key range @throws IOException if an I/O error occurs during initialization
3059 Creates a Scanner for reading TFile data within specified key ranges. @param beginKey Starting key for the scan range (inclusive) @param endKey Ending key for the scan range (exclusive) @return Scanner object for the specified key range @throws IOException if an I/O error occurs during initialization
3060 Creates a protocol proxy for remote procedure calls with default retry settings. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
3061 Retrieves a protocol proxy for remote procedure calls. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory @param rpcTimeout timeout for RPC operations @return Proxy object for server communication @throws IOException if an I/O error occurs
3062 Checks if a user has administrator access. @param servletContext the ServletContext object @param request the HttpServletRequest object @param response the HttpServletResponse object @return true if user is an admin, false otherwise @throws IOException if sending error fails
3063 Authorizes user access to a specified protocol. @param user UserGroupInformation object representing the user @param protocolName name of the protocol class @param addr Client's InetAddress @throws AuthorizationException if authorization fails or protocol is unknown
3064 Retrieves the user's home directory path. @return fully qualified Path object representing the home directory
3065 Checks if the current user has the required permissions for a file or directory. @param stat FileStatus object representing the file or directory @param mode FsAction object representing the required permission action @throws AccessControlException if the user lacks the required permissions @throws IOException if an I/O error occurs during permission check
3066 Constructs a new ViewFileSystem instance. Initializes user group information and records creation time. @throws IOException if user group retrieval fails
3067 Constructs a ViewFs instance. Initializes filesystem state and configuration. @param theUri URI of the ViewFs mount table @param conf Hadoop configuration object @throws IOException if initialization fails @throws URISyntaxException if URI is invalid
3068 Initializes an InodeTree with configuration settings. @param config Hadoop configuration object @param viewName name of the view filesystem @param theUri URI associated with the filesystem @param initingUriAsFallbackOnNoMounts flag to handle empty mount tables @throws UnsupportedFileSystemException if unsupported file system is used @throws URISyntaxException if URI syntax is invalid @throws FileAlreadyExistsException if file already exists at target path @throws IOException for general IO errors
3069 Returns the home directory path for the current user. Uses UserGroupInformation to fetch the username, falling back to system property if necessary. Constructs a fully qualified path using the file system's URI. @return Path representing the user's home directory
3070 Opens a secure HTTP connection using a given URL, token, and proxy user. @param url target web service URL @param token authentication token @param doAs proxy user for impersonation @return HttpURLConnection with added authentication parameters @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
3071 Retrieves UserGroupInformation based on ticket cache or username. @param ticketCachePath path to Kerberos ticket cache, can be null @param user username for remote user, can be null if ticket cache is provided @return UserGroupInformation object @throws IOException if retrieval fails
3072 Logs in a user from a keytab and returns the UserGroupInformation. @param user Kerberos principal name @param path path to the keytab file @return UserGroupInformation for the logged-in user or current user if security is disabled @throws IOException if login fails
3073 Logs detailed user information for debugging. @param log Logger instance for logging @param ugi UserGroupInformation object containing user details @throws IOException if user retrieval fails
3074 Executes an action as the current user. @param action the action to execute with elevated privileges @return result of the privileged action @throws IOException if an I/O error occurs or operation is interrupted
3075 Retrieves the doAs user if proxy authentication is used. @return Short username of the doAs user or null if not applicable @throws IOException if there's an error retrieving user information
3076 Waits for and retrieves a protocol proxy with retries. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param rpcTimeout timeout for RPC operations @param connectionRetryPolicy retry policy for connections @param timeout maximum wait time in milliseconds @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs or timeout is reached
3077 Creates a Scanner for reading TFile data within specified key ranges. @param beginKey Starting key for the scan range (inclusive) @param endKey Ending key for the scan range (exclusive) @return Scanner object for the specified key range @throws IOException if an I/O error occurs during initialization
3078 Retrieves a protocol proxy for remote procedure calls. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param factory socket factory @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
3079 Creates a protocol proxy for remote procedure calls. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory @return Proxy object for communication @throws IOException if an I/O error occurs
3080 Determines if instrumentation access is allowed. @param servletContext the ServletContext object @param request the HttpServletRequest object @param response the HttpServletResponse object @return true if access is allowed, false otherwise @throws IOException if sending error fails
3081 Retrieves the trash root directory for a given path. @param path the file or directory path @return fully qualified Path object representing the trash root
3082 Retrieves trash root directories for users. @param allUsers if true, retrieves trash for all users; otherwise, only for the current user @return collection of FileStatus objects representing trash roots
3083 Checks file access permissions for a given path. @param path the file or directory path to check @param mode required permission action (e.g., read, write) @throws AccessControlException if user lacks required permissions @throws FileNotFoundException if the specified path does not exist @throws IOException if an I/O error occurs during the check
3084 Checks and enforces access permissions for a given file or directory. @param path the path to check access for @param mode the required permission action (e.g., read, write) @throws AccessControlException if the user lacks the required permissions @throws FileNotFoundException if the specified path does not exist @throws UnresolvedLinkException if a symlink cannot be resolved @throws IOException if an I/O error occurs during access check
3085 Constructs and initializes a new ViewFileSystem instance. @param theUri file system URI @param conf Hadoop configuration object @throws IOException if initialization fails
3086 Retrieves or creates a unique FileSystem instance for the given URI and configuration. @param uri URI of the file system @param conf Configuration object @return Unique FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
3087 Retrieves the home directory path for the current user. @return Path representing the user's home directory on the default file system.
3088 Opens a secure HTTP connection using the provided URL and token. @param url target web service URL @param token authentication token @return HttpURLConnection with added authentication parameters @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
3089 Retrieves a FileSystem instance for the specified URI and configuration. Handles user authentication using Kerberos ticket cache or username. @param uri file system URI @param conf Hadoop configuration @param user username for remote user, can be null if ticket cache is provided @return FileSystem object @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
3090 Creates a new FileSystem instance with specified URI and configuration. @param uri file system URI @param conf Hadoop configuration @param user username for remote user, can be null if ticket cache is provided @return FileSystem object @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
3091 Retrieves UserGroupInformation from Kerberos ticket cache. @param ticketCache path to Kerberos ticket cache @param user username for remote user @return UserGroupInformation object or null if not found
3092 Logs in using a Kerberos keytab and validates the UserGroupInformation. Handles re-login attempts if configured.
3093 Logs in a user from a keytab and sets it as the current login user. @param user Kerberos principal name @param path path to the keytab file @throws IOException if login fails
3094 Logs detailed user information. @param ugi UserGroupInformation object containing user details @throws IOException if user retrieval fails
3095 Retrieves a protocol proxy with specified timeout. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param connTimeout connection timeout in milliseconds @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs or timeout is reached
3096 Waits for and retrieves a protocol proxy with retries. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param rpcTimeout timeout for RPC operations @param timeout maximum wait time in milliseconds @return Proxy object for server communication @throws IOException if an I/O error occurs or timeout is reached
3097 Retrieves a proxy for remote procedure calls. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param factory socket factory @return Proxy object for communication @throws IOException if an I/O error occurs
3098 Retrieves a protocol proxy for remote procedure calls with default socket factory. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
3099 Retrieves the GetUserMappingsProtocol proxy for communication. @return Proxy object for user group mapping protocol @throws IOException if an I/O error occurs during proxy creation
3100 Creates a ZKFC proxy for communication with the ZooKeeper Failover Controller. @param conf Hadoop configuration object @param timeoutMs connection timeout in milliseconds @return ZKFCProtocol instance for interaction @throws IOException if an I/O error occurs during setup
3101 Retrieves the trash root directory for a given path. @param path the file or directory path @return fully qualified Path object representing the trash root
3102 Retrieves trash root directories. @param allUsers if true, retrieves trash for all users; otherwise, only for the current user @return collection of FileStatus objects representing trash roots
3103 Constructs a new ViewFileSystem instance with default URI. @param conf Hadoop configuration object @throws IOException if initialization fails
3104 Adds a FileSystem instance to the cache for testing purposes. @param uri URI of the file system @param conf Configuration settings @param fs FileSystem instance to add @throws IOException if an I/O error occurs
3105 Creates a new FileSystem instance for the given URI and configuration. Uses default settings if scheme or authority are missing. @param uri URI of the file system @param config Configuration object @return FileSystem instance configured with the given URI @throws IOException if an I/O error occurs during initialization
3106 Creates and returns a new FileContext instance. @param defFs default AbstractFileSystem @param aConf Hadoop configuration object @return initialized FileContext object
3107 Opens a secure HTTP connection using the provided URL and token. @param url target web service URL @param token authentication token @return HttpURLConnection with added authentication parameters @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
3108 Executes Kerberos diagnostics, printing configuration and environment details. @return true if diagnostics complete successfully, false otherwise @throws Exception if any diagnostic step fails
3109 Processes command-line arguments for Kerberos login. @param args input command-line arguments @return filtered arguments without login parameters or null if login fails
3110 Main method to demonstrate UserGroupInformation functionality. Retrieves and prints current user's UGI, authentication method, and keytab status. Optionally logs in a user from a keytab if two arguments are provided.
3111 Logs in a user from a keytab if security is enabled. @param conf Hadoop configuration object @param keytabFileKey config key for the keytab file path @param userNameKey config key for the Kerberos principal name @param hostname target hostname for principal generation @throws IOException if login fails or config is invalid
3112 Initializes a new Server instance for handling RPCs. Configures various settings including queues, authentication, and logging. @param bindAddress server's binding address @param port server's listening port @param rpcRequestClass class of RPC request objects @param handlerCount number of handlers for processing requests @param numReaders number of reader threads @param queueSizePerHandler size of the queue per handler @param conf Hadoop configuration object @param serverName name of the server @param secretManager SecretManager for managing tokens @param portRangeConfig configuration for port range @throws IOException if an error occurs during initialization
3113 Builds SASL negotiation response with initial challenge for TOKEN auth. @return RpcSaslProto containing negotiation details @throws InterruptedException, SaslException, IOException on errors
3114 Retrieves a protocol proxy with default timeout. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
3115 Waits for and retrieves a protocol proxy. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param connTimeout connection timeout in milliseconds @return Proxy object for communication @throws IOException if an I/O error occurs or timeout is reached
3116 Adds a configuration resource from an input stream. @param in input stream containing configuration data @param name resource's name
3117 Retrieves a protocol proxy for remote procedure calls. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @return Proxy object for communication @throws IOException if an I/O error occurs
3118 Executes command to retrieve and print user group mappings. @param args array of usernames, defaults to current user if empty @return exit status code (0 for success)
3119 Initiates a graceful failover to a specified HA service node. @param toNode target HAServiceTarget for failover @return 0 on success, -1 if failover fails
3120 Requests a remote service to cede its active state. @param remote target HAServiceTarget object @param timeoutMs duration for which the service should cede activity @return ZKFCProtocol instance used for communication @throws IOException if communication fails
3121 Handles GET requests for retrieving JMX data in JSON format. Checks access, processes queries, and writes MBean details to response. @param request HttpServletRequest object containing the request @param response HttpServletResponse object to send the JSON response
3122 Retrieves or creates a FileSystem instance for the given URI and configuration. @param uri URI of the file system @param conf Configuration object @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
3123 Creates an instance of LocalFileSystem. @param conf Configuration object @return LocalFileSystem instance configured with the given configuration @throws IOException if an I/O error occurs during initialization
3124 Retrieves a new FileSystem instance. @param uri URI of the file system @param conf Configuration object @return Configured FileSystem instance @throws IOException if an I/O error occurs during initialization
3125 Initializes and returns a FileContext instance. @param defaultFS default AbstractFileSystem @return initialized FileContext object using default configuration
3126 Creates and returns a FileContext instance for the specified URI. @param defaultFsUri default file system URI @param aConf Hadoop configuration object @return initialized FileContext object @throws UnsupportedFileSystemException if the file system is not supported
3127 Initializes command-line arguments for token management. @param args input command-line arguments @return 0 on success, 1 on error
3128 Logs in a user using a keytab file and Kerberos principal. @param conf Hadoop configuration object @param keytabFileKey config key for the keytab file path @param userNameKey config key for the Kerberos principal name @throws IOException if login fails or config is invalid
3129 Processes SASL messages for secure authentication. Handles NEGOTIATE, INITIATE, and RESPONSE states. @param saslMessage incoming SASL message @return processed RpcSaslProto response or null if switching to simple auth @throws SaslException, IOException, AccessControlException, InterruptedException on errors
3130 Waits for and retrieves a protocol proxy. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @return Proxy object for server communication @throws IOException if an I/O error occurs
3131 Adds a configuration resource by name. @param name resource identifier
3132 Adds a configuration resource from a URL. @param url location of the configuration resource
3133 Adds a configuration resource from a file path. @param file the Path object pointing to the configuration file
3134 Adds configuration resource from input stream. @param in InputStream containing configuration data
3135 Performs a graceful failover by requesting other nodes to cede their active state. Throws exceptions if pre-flight checks fail or if the local node cannot become active.
3136 Creates a proxy to monitor service health. @return HAServiceProtocol proxy instance for monitoring @throws IOException if proxy creation fails
3137 Retrieves a proxy for the health monitor service with default retry attempts. @param conf configuration settings @param timeoutMs RPC operation timeout in milliseconds @return HAServiceProtocol proxy instance @throws IOException if proxy creation fails
3138 Retrieves an HA service proxy. @param conf configuration settings @param timeoutMs RPC operation timeout in milliseconds @return HAServiceProtocol proxy instance @throws IOException if proxy creation fails
3139 Initializes HAR file system with given URI and configuration. @param name URI of the HAR file system @param conf Hadoop configuration object @throws IOException if initialization fails or files are missing
3140 Moves a file or directory to the appropriate trash. @param fs FileSystem to manage trash operations @param p Path of the file or directory to move @param conf Configuration settings @return true if successfully moved, false otherwise @throws IOException if an I/O error occurs
3141 Constructs a PathData instance. @param pathString file path string @param conf configuration object @throws IOException if an I/O error occurs during initialization
3142 Retrieves or creates a FileSystem instance by name. @param name file system name @param conf Configuration object @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
3143 Retrieves or creates a LocalFileSystem instance. @param conf Configuration object @return LocalFileSystem object @throws IOException if an I/O error occurs
3144 Constructs a ChRootedFileSystem with a specified root directory. @param uri URI of the file system @param conf Configuration object @throws IOException if an I/O error occurs during initialization
3145 Retrieves or creates a FileSystem instance for the given URI and configuration. @param uri URI of the file system @param conf Configuration object @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
3146 Retrieves or creates a FileSystem instance for the given URI and configuration. If the URI scheme matches the root scheme, it directly creates the file system. Otherwise, it delegates to the default FileSystem.get method. @param uri URI of the file system @param conf Configuration object @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
3147 Retrieves or creates a FileSystem instance for the path's URI. @param conf Configuration object @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
3148 Retrieves or creates a FileSystem instance for logging metrics. Uses supplied filesystem if available, otherwise initializes from URI and configuration. @return FileSystem object for file operations @throws MetricsException on invalid URI or IO errors
3149 Lists file statuses in the internal directory. @param f path to list @return array of FileStatus objects @throws IOException if an I/O error occurs
3150 Creates a FileContext instance using the specified URI and default configuration. @param defaultFsUri default file system URI @return initialized FileContext object @throws UnsupportedFileSystemException if the file system is not supported
3151 Retrieves FileContext for the default file system. @param aConf Hadoop configuration object @return initialized FileContext object @throws UnsupportedFileSystemException if URI has no valid scheme
3152 Retrieves the local file system context. @param aConf Hadoop configuration object @return FileContext for the local file system @throws UnsupportedFileSystemException if local file system is unsupported
3153 Constructs a new RPC Server instance. @param protocolClass class of the RPC protocol @param protocolImpl implementation of the RPC protocol @param conf Hadoop configuration object @param bindAddress server's binding address @param port server's listening port @param numHandlers number of handlers for processing requests @param numReaders number of reader threads @param queueSizePerHandler size of the queue per handler @param verbose flag to enable verbose logging @param secretManager SecretManager for managing tokens @param portRangeConfig configuration for port range @param alignmentContext context for alignment (optional) @throws IOException if an error occurs during initialization
3154 Initializes a new RPC Server instance. @param protocolClass class of the RPC protocol @param protocolImpl implementation of the RPC protocol @param conf Hadoop configuration object @param bindAddress server's binding address @param port server's listening port @param numHandlers number of handlers for processing requests @param numReaders number of reader threads @param queueSizePerHandler size of the queue per handler @param verbose flag to enable verbose logging @param secretManager SecretManager for managing tokens @param portRangeConfig configuration for port range @param alignmentContext context for alignment @throws IOException if an error occurs during initialization
3155 Processes SASL messages for secure authentication. Handles negotiation, re-login, and finalizes context establishment. @param saslMessage incoming SASL message @throws RpcServerException, IOException, InterruptedException on errors
3156 Loads the latest mount table configuration from a specified path. @param mountTableConfigPath path to the mount table configuration files @param conf Hadoop configuration object to load into
3157 Checks if other target nodes are active. @param targetNodeToActivate ID of the node to activate @param forceActive flag to force activation @return true if any other node is active, false otherwise
3158 Performs pre-failover checks for transitioning a service. @param from source HAServiceTarget @param target destination HAServiceTarget @param forceActive flag to force failover even if not ready @throws FailoverFailedException if any check fails
3159 Attempts to transition a service target to standby gracefully. @param svc the service target to be fenced @return true if successful, false otherwise
3160 Resolves a file system path by following symbolic links. @param filesys FileSystem instance to operate on @param path Path to resolve @return Result of the operation (type T) @throws IOException if an I/O error occurs or symlink resolution fails
3161 Initializes a new PathData instance for a local file path. @param localPath URI representing the local file path @param conf Configuration object for FileSystem initialization @throws IOException if an I/O error occurs during FileSystem setup
3162 Copies files from local file system to Hadoop file system. @param delSrc flag to delete source files after copy @param overwrite flag to allow overwriting existing files @param srcs array of source Paths in local file system @param dst destination Path in Hadoop file system (must be a directory) @throws IOException if any I/O error occurs during copying
3163 Copies a file from local to the Hadoop FileSystem. @param delSrc flag to delete the source file after copy @param overwrite flag to allow overwriting existing files @param src source Path on local filesystem @param dst destination Path on Hadoop FileSystem @throws IOException if an I/O error occurs
3164 Copies a file from the Hadoop FileSystem to the local file system. @param delSrc flag to delete the source file after copy @param src source Path in Hadoop FileSystem @param dst destination Path in local file system @param useRawLocalFileSystem flag to use raw local file system @throws IOException if an I/O error occurs
3165 Updates context with new local directories from configuration. @param conf Configuration object @return Updated Context object @throws IOException if directory operations fail or config is missing
3166 Retrieves a local file path by hashing and trying each directory. @param dirsProp configuration property for directories @param path relative file path @return local Path object if successful, throws IOException otherwise
3167 Retrieves the raw file system for a given path. @param path the Hadoop file system path @param conf configuration settings @return FileSystem object representing the raw file system @throws IOException if an I/O error occurs or no link is found
3168 Retrieves mount path information for a given Hadoop file system path. @param path the file system path to query @param conf configuration settings for file system operations @return MountPathInfo object containing resolved path and file system details @throws IOException if an I/O error occurs during resolution or retrieval
3169 Expands a glob pattern to find matching file paths. @param pattern the file path pattern to match @param conf Configuration object @return PathData array of matched paths or null if no matches found @throws IOException for I/O errors during processing
3170 Dumps metadata and properties of a TFile to the specified output stream. @param file path to the TFile @param out PrintStream for output @param conf Configuration settings @throws IOException if an I/O error occurs
3171 Reads token storage from a specified file. @param filename path to the token storage file @param conf configuration object for FileSystem operations @return Credentials object loaded from the file @throws IOException if an I/O error occurs during reading or parsing
3172 Retrieves and processes libjars from configuration. @param conf Hadoop Configuration object @return Array of URLs for libjars or null if none found
3173 Initializes the file system and prepares for logging. @return true if initialization is successful, false otherwise
3174 Retrieves the local file system context. @return FileContext object for the local file system @throws UnsupportedFileSystemException if the local file system is not supported
3175 Retrieves default FileContext using a new Configuration. @return initialized FileContext object @throws UnsupportedFileSystemException if URI has no valid scheme
3176 Constructs a new RPC Server instance. Initializes server with specified configurations and handlers.
3177 Constructs a new RPC Server instance. @param protocolClass class of the RPC protocol (deprecated) @param protocolImpl implementation of the RPC protocol @param conf Hadoop configuration object @param bindAddress server's binding address @param port server's listening port @param numHandlers number of handlers for processing requests @param numReaders number of reader threads @param queueSizePerHandler size of the queue per handler @param verbose flag to enable verbose logging @param secretManager SecretManager for managing tokens @param portRangeConfig configuration for port range (deprecated) @throws IOException if an error occurs during initialization
3178 Constructs an SSLFactory for client or server mode. @param mode connection mode (CLIENT or SERVER) @param conf configuration object with SSL settings
3179 Refreshes Service ACL with new configuration and policy provider. @param conf Configuration object containing security settings @param provider PolicyProvider for retrieving service definitions
3180 Initiates a failover process between two HA service targets. @param fromSvc source HAServiceTarget to be fenced @param toSvc destination HAServiceTarget to become active @param forceFence flag to force fencing even if not necessary @param forceActive flag to force the target to become active @throws FailoverFailedException if failover fails
3181 Sets the local destination path for file operations. @param args list of command-line arguments @throws IOException if an I/O error occurs or invalid URI syntax is found
3182 Moves files from local file system to Hadoop file system. @param srcs array of source Paths in local file system @param dst destination Path in Hadoop file system (must be a directory) @throws IOException if any I/O error occurs during moving
3183 Copies files from the local file system to the Hadoop file system. @param delSrc flag to delete source files after copy @param overwrite flag to allow overwriting existing files @param srcs array of source Paths in local file system @param dst destination Path in Hadoop file system (must be a directory) @throws IOException if any I/O error occurs during copying
3184 Copies a file from local to Hadoop FileSystem without overwriting. @param delSrc flag to delete the source file after copy @param src source Path on local filesystem @param dst destination Path on Hadoop FileSystem @throws IOException if an I/O error occurs
3185 Copies a file from the local filesystem to Hadoop. @param delSrc flag to delete the source file after copy @param overwrite flag to allow overwriting existing files @param src source Path on local filesystem @param dst destination Path on Hadoop FileSystem @throws IOException if an I/O error occurs
3186 Copies a file from Hadoop FileSystem to local. @param delSrc flag to delete the source file after copy @param src source Path in Hadoop FileSystem @param dst destination Path in local file system @throws IOException if an I/O error occurs
3187 Allocates a local path for writing files. @param pathStr file path string @param size required file size or SIZE_UNKNOWN for roulette selection @param conf Hadoop configuration object @param checkWrite flag to check write permissions @return Path object for writing, throws DiskErrorException if no valid directory found
3188 Retrieves a local file path for reading. @param pathStr relative path to the file @param conf Configuration object @return Path to the file if found, throws DiskErrorException otherwise
3189 Retrieves all local paths to read a file. @param pathStr file path string @param conf Configuration object @return Iterable of Path objects for reading @throws IOException if directory operations fail
3190 Initializes NflyFSystem with URIs, configuration, and replication settings. @param uris array of file system URIs @param conf Hadoop configuration object @param minReplication minimum number of replicas required @param nflyFlags flags for Nfly operations @param fsGetter factory for creating FileSystem instances @throws IOException if initialization fails due to invalid input or I/O errors
3191 Executes commands on all specified source paths. @return exit code: 0 for success, -1 if any error occurs
3192 Expands a command argument as a glob pattern. @param arg the input argument to expand @return list of matched PathData objects @throws IOException if no matches are found or I/O error occurs
3193 Sets the remote destination path. @param args list of command arguments @throws IOException if there are issues with path expansion or validation
3194 Deprecated constructor to initialize a sequence file reader. @param fs FileSystem object @param file path to the sequence file @param conf Hadoop configuration settings @throws IOException if initialization fails or I/O error occurs
3195 Initializes a sequence file reader with specified input stream and options. @param in input stream from Hadoop's FileSystem @param buffersize buffer size for reading @param start starting position in the file @param length length of data to read @param conf Hadoop configuration settings @throws IOException if initialization fails or I/O error occurs
3196 Creates a SequenceFile reader for the specified data file. @param dataFile path to the data file @param conf Hadoop configuration settings @param options additional reader options @return initialized SequenceFile.Reader instance @throws IOException if initialization fails or I/O error occurs
3197 Reads the next raw key from a sequence file segment. Initializes reader if not already set, checks class compatibility, and reads key. @return true if key is successfully read, false if end of segment reached @throws IOException if an I/O error occurs or class mismatch
3198 Initializes a SequenceFile writer with specified options. @param conf Hadoop configuration settings @param opts variable number of file writing options @throws IOException if initialization fails or options are inconsistent
3199 Main method for processing TFile paths. Prints version info and dumps metadata to the console. @param args array of TFile paths
3200 Writes credentials to a file in the specified format. @param f File object representing the output file @param format desired serialization format ("writable" or "protobuf") @param creds Credentials object containing tokens to write @param conf Hadoop configuration object @throws IOException if an I/O error occurs
3201 Rolls log directory if necessary, handling initialization and file operations. @throws MetricsException if an error occurs during log rolling
3202 Retrieves all JAR files in a specified directory. @param path directory path to search, appends wildcard if not present @param useLocal flag to determine if local file system should be used @return List of Path objects representing JAR files
3203 Constructs a new RPC Server instance with default settings. @param protocolClass class of the RPC protocol (deprecated) @param protocolImpl implementation of the RPC protocol @param conf Hadoop configuration object @param bindAddress server's binding address @param port server's listening port @throws IOException if an error occurs during initialization
3204 Deprecated constructor for creating an RPC Server instance. @param protocolImpl implementation of the RPC protocol @param conf Hadoop configuration object @param bindAddress server's binding address @param port server's listening port @param numHandlers number of handlers for processing requests @param numReaders number of reader threads @param queueSizePerHandler size of the queue per handler @param verbose flag to enable verbose logging @param secretManager SecretManager for managing tokens @throws IOException if an error occurs during initialization
3205 Processes out-of-band RPC requests. Handles connection context, SASL authentication, and ping messages. @param header request header containing call ID @param buffer input buffer with serialized data @throws RpcServerException, IOException, InterruptedException on errors
3206 Establishes a secure or plain URL connection. @param url target URL for the connection @return established URLConnection object @throws Exception on connection errors
3207 Copies a file from local to Hadoop FileSystem without deleting the source. @param src source Path on local filesystem @param dst destination Path on Hadoop FileSystem @throws IOException if an I/O error occurs
3208 Moves a file from local to Hadoop FileSystem. @param src source Path on local filesystem @param dst destination Path on Hadoop FileSystem @throws IOException if an I/O error occurs
3209 Copies a file from the local filesystem to Hadoop FileSystem. @param delSrc flag to delete the source file after copy @param src source Path on local filesystem @param dst destination Path on Hadoop FileSystem @throws IOException if an I/O error occurs
3210 Copies a file from Hadoop FileSystem to local. @param src source Path in Hadoop FileSystem @param dst destination Path in local file system @throws IOException if an I/O error occurs
3211 Moves a file from Hadoop FileSystem to local. @param src source Path in Hadoop FileSystem @param dst destination Path in local file system @throws IOException if an I/O error occurs
3212 Copies a file from Hadoop FileSystem to local. @param delSrc flag to delete the source file after copy @param src source Path in Hadoop FileSystem @param dst destination Path in local file system @throws IOException if an I/O error occurs
3213 Allocates a local path for writing files. @param pathStr file path string @param size required file size or SIZE_UNKNOWN for roulette selection @param conf Hadoop configuration object @param checkWrite flag to check write permissions @return Path object for writing, throws IOException if no valid directory found
3214 Creates a temporary file for writing in the specified directory. @param pathStr base path string @param size required file size or SIZE_UNKNOWN @param conf Hadoop configuration object @return File object representing the created temporary file
3215 Retrieves a local file path for reading within a specific context. @param pathStr relative path to the file @param conf Configuration object @return Path to the file if found, throws IOException otherwise
3216 Retrieves all local paths for reading a file. @param pathStr file path string @param conf Configuration object @return Iterable of Path objects for reading @throws IOException if directory operations fail
3217 Initializes NflyFSystem with URIs, configuration, and replication settings. @param uris array of file system URIs @param conf Hadoop configuration object @param minReplication minimum number of replicas required @param nflyFlags flags for Nfly operations @throws IOException if initialization fails due to invalid input or I/O errors
3218 Creates an NflyFSystem instance with specified URIs, configuration, and settings. @param uris array of file system URIs @param conf Hadoop configuration object @param settings key-value pairs for configuring minReplication and flags @param fsGetter factory for creating FileSystem instances @return NflyFSystem instance configured with provided parameters @throws IOException if initialization fails due to invalid input or I/O errors
3219 Expands command arguments as glob patterns. @param args list of raw command-line arguments @return LinkedList of PathData objects representing expanded paths @throws IOException if expansion fails for any argument
3220 Retrieves and writes delegation tokens to a file. @param tokenFile File to store the token @param fileFormat Serialization format ("writable" or "protobuf") @param alias Token alias (optional) @param service Service name @param url Service URL @param renewer User allowed to renew the token @param conf Hadoop configuration @throws Exception if an error occurs during token retrieval or writing
3221 Aliases a token service in a credentials file. @param tokenFile the file containing tokens @param fileFormat the format of the credentials file ("writable" or "protobuf") @param alias the new service alias @param service the original service to be aliased @param conf Hadoop configuration settings @throws Exception if an error occurs during processing
3222 Appends tokens from multiple files to a single output file. @param tokenFiles list of input token files @param fileFormat serialization format for the output file @param conf Hadoop configuration settings @throws IOException if an I/O error occurs
3223 Removes a token from the specified file by alias. @param cancel indicates whether to cancel the token if managed @param tokenFile file containing serialized tokens @param fileFormat desired serialization format ("writable" or "protobuf") @param alias unique identifier for the token to remove @param conf Hadoop configuration object @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
3224 Renews delegation tokens in a specified token file. @param tokenFile File containing the tokens to renew @param fileFormat Format of the token storage ("writable" or "protobuf") @param alias Text alias for matching specific tokens (optional) @param conf Hadoop configuration settings @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
3225 Imports a token from a base64 string into a credentials file. @param tokenFile file to store the token @param fileFormat format of the credentials file ("writable" or "protobuf") @param alias unique identifier for the token service @param base64 base64-encoded token string @param conf Hadoop configuration settings @throws IOException if an I/O error occurs
3226 Retrieves all JAR files in a specified directory using the local file system. @param path directory path to search @return List of Path objects representing JAR files
3227 Deprecated constructor for creating a new RPC Server. @param instance implementation of the RPC protocol @param conf Hadoop configuration object @param bindAddress server's binding address @param port server's listening port @throws IOException if an error occurs during initialization
3228 Processes one RPC request from a ByteBuffer. Handles deserialization, header validation, and request processing. @param bb input buffer containing serialized RPC data
3229 Processes log level URL by connecting and reading its content. @param urlString URL string for the log level operation @throws Exception on connection or I/O errors
3230 Completes local file output by moving it to Hadoop FileSystem. @param fsOutputFile destination Path on Hadoop FileSystem @param tmpLocalFile temporary source Path on local filesystem @throws IOException if an I/O error occurs
3231 Copies a file or directory from Hadoop FileSystem to local. @param src source Path in Hadoop FileSystem @param dst destination Path in local file system @param copyCrc if true, copies checksum file as well @throws IOException if an I/O error occurs
3232 Allocates a local path for writing files. @param pathStr file path string @param size required file size or SIZE_UNKNOWN for roulette selection @param conf Hadoop configuration object @return Path object for writing, throws IOException if no valid directory found
3233 Creates a temporary file for writing in the specified directory. @param pathStr base path string @param size required file size or SIZE_UNKNOWN @param conf Hadoop configuration object @return File object representing the created temporary file @throws IOException if an I/O error occurs
3234 Processes raw command-line arguments by expanding them as glob patterns and then processing. @param args LinkedList of raw command-line arguments @throws IOException if an I/O error occurs during expansion or processing
3235 Creates a SequenceFile writer with specified configuration and options. @param conf Hadoop configuration settings @param opts additional options for writer setup @return Writer instance based on compression type @throws IOException if an I/O error occurs during initialization
3236 Creates a JAR file with expanded class path entries. @param inputClassPath original class path string @param pwd working directory path @param targetDir target directory for relative paths @param callerEnv environment variables map @return array containing created JAR path and unexpanded wildcards @throws IOException if I/O error occurs
3237 Validates and processes file paths, expanding wildcards if specified. @param files comma-separated list of file paths @param expandWildcard flag to enable wildcard expansion @return processed file paths as a single string @throws IOException if an I/O error occurs or path is invalid
3238 Reads and processes incoming data from the channel. Handles connection header, authentication, and RPC requests. @return number of bytes read or -1 if processing is complete or an error occurs @throws IOException if I/O error occurs during reading or processing @throws InterruptedException if thread is interrupted while waiting for data
3239 Unwraps incoming SASL packet and processes contained RPCs. @param inBuf input buffer containing encrypted data @throws IOException if an I/O error occurs @throws InterruptedException if the thread is interrupted
3240 Retrieves log level for a specified class. @throws Exception on connection or I/O errors
3241 Sets log level for a specified class. @throws Exception on processing errors
3242 Creates a KeyProvider for the specified URI and configuration. @param providerUri URI of the KMS server @param conf Hadoop configuration object @return LoadBalancingKMSClientProvider instance or null if unsupported scheme @throws IOException if there's an error in creating providers
3243 Completes local file output by moving it to Hadoop FileSystem. @param fsOutputFile destination Path on Hadoop FileSystem @param tmpLocalFile temporary source Path on local filesystem @throws IOException if an I/O error occurs
3244 Creates a temporary file for writing in the specified directory. @param pathStr base file path string @param size required file size or SIZE_UNKNOWN for roulette selection @param conf Hadoop configuration object @return File object representing the created temporary file
3245 Allocates a local path for writing files. @param pathStr file path string @param conf Hadoop configuration object @return Path object for writing or throws IOException if no valid directory found
3246 Executes the command with given arguments. @param argv command-line arguments @return exit code indicating success or failure
3247 Initializes a new Reader to access data from a specified Hadoop file. @param fs FileSystem instance for file operations @param file path to the ArrayFile @param conf Configuration settings for the file system @throws IOException if an I/O error occurs while opening the file
3248 Constructs a Reader to access SequenceFile data. @param fs Hadoop FileSystem instance @param dirName directory containing SequenceFiles @param comparator WritableComparator for key comparison @param conf Hadoop configuration settings @throws IOException if initialization fails or I/O error occurs
3249 Deprecated constructor for initializing a Reader. @param fs FileSystem instance (unused) @param dirName directory name containing data and index files @param conf Hadoop configuration settings @throws IOException if initialization fails or I/O error occurs
3250 Constructs a Reader for accessing MapFile data. @param fs FileSystem instance @param dirName directory containing data and index files @param comparator WritableComparator for sorting or comparing data @param conf Hadoop configuration settings @throws IOException if initialization fails or I/O error occurs
3251 Clones file attributes from an input to an output path. @param inputFile source Hadoop path @param outputFile destination Hadoop path @param prog Progressable for tracking progress @return SequenceFile Writer with cloned attributes @throws IOException if I/O operations fail
3252 Fixes a MapFile by creating an index if missing. @param fs Hadoop FileSystem instance @param dir directory containing the MapFile @param keyClass class of keys in the MapFile @param valueClass class of values in the MapFile @param dryrun true for simulation without actual changes @param conf Hadoop configuration settings @return number of entries processed or -1 if no fix was needed @throws Exception if an error occurs during fixing
3253 Creates a SequenceFile writer. @param fs Hadoop file system @param conf configuration settings @param name file path @param keyClass class type for keys @param valClass class type for values @return Writer instance configured with specified parameters @throws IOException if an I/O error occurs
3254 Creates a SequenceFile writer. @param fs Hadoop FileSystem instance @param conf Hadoop configuration settings @param name file path for the sequence file @param keyClass class type for keys @param valClass class type for values @param compressionType compression type to use @return Writer instance configured with specified parameters @throws IOException if an I/O error occurs during initialization
3255 Creates a SequenceFile writer with specified parameters. @param fs Hadoop FileSystem instance @param conf Hadoop configuration settings @param name file path for the sequence file @param keyClass class type for keys @param valClass class type for values @param compressionType compression method to use @param progress Progressable object for tracking progress @return Writer instance configured with provided parameters @throws IOException if an I/O error occurs during setup
3256 Creates a SequenceFile writer for the specified file system and path. @param fs Hadoop FileSystem instance @param conf Hadoop configuration settings @param name file path where the sequence file will be created @param keyClass class type for the keys in the sequence file @param valClass class type for the values in the sequence file @param compressionType type of compression to apply (NONE, RECORD, BLOCK) @param codec compression codec to use, defaults to DefaultCodec if null and type is not NONE @return Writer instance configured with specified parameters @throws IOException if an I/O error occurs during initialization
3257 Creates a SequenceFile writer with specified parameters. @param fs FileSystem to write to @param conf Hadoop configuration settings @param name file path for the sequence file @param keyClass class type for keys @param valClass class type for values @param compressionType type of compression to use @param codec compression codec, defaults if null and compressionType is not NONE @param progress Progressable object for tracking progress @param metadata file metadata @return Writer instance configured with provided parameters @throws IOException if an I/O error occurs during writer creation
3258 Creates a SequenceFile writer with specified configurations. @param fs FileSystem instance for file operations @param conf Hadoop configuration settings @param name Path to the sequence file @param keyClass Class type for keys @param valClass Class type for values @param bufferSize Buffer size for writing @param replication Replication factor for the file @param blockSize Block size in bytes @param compressionType Compression type for the file @param codec Compression codec to use @param progress Progressable object for tracking progress @param metadata Metadata configuration for the file @return Writer instance configured with specified options @throws IOException if an I/O error occurs during initialization
3259 Creates a SequenceFile writer with specified parameters. @deprecated Use the new createWriter method instead. @param fs Hadoop FileSystem instance @param conf Hadoop Configuration settings @param name file path for the sequence file @param keyClass class type for keys @param valClass class type for values @param compressionType type of compression to use @param codec compression codec, can be null @param progress Progressable object for tracking progress @return Writer instance configured with specified options @throws IOException if an I/O error occurs during initialization
3260 Creates a SequenceFile writer with specified configuration and options. @param conf Hadoop configuration settings @param out output stream for the file @param keyClass class type for keys @param valClass class type for values @param compressionType type of compression to use @param codec compression codec, defaults to DefaultCodec if null and type is not NONE @param metadata additional metadata for the file @return Writer instance based on provided parameters @throws IOException if an I/O error occurs during initialization
3261 Creates a SequenceFile writer with specified configuration and options. @param conf Hadoop configuration settings @param out output stream for the sequence file @param keyClass class of keys in the sequence file @param valClass class of values in the sequence file @param compressionType type of compression to apply @param codec compression codec, defaults to DefaultCodec if null and type is not NONE @return Writer instance based on given parameters @throws IOException if an I/O error occurs during writer creation
3262 Validates and processes file paths without wildcard expansion. @param files comma-separated list of file paths @return processed file paths as a single string @throws IOException if an I/O error occurs or path is invalid
3263 Sends log level request based on operation. @throws HadoopIllegalArgumentException for invalid operations @throws Exception on connection or processing errors
3264 Creates a DataBlock for writing data. @param index unique block identifier @param limit maximum capacity of the block @param statistics upload statistics tracker @return DataBlock object encapsulating the created file @throws IOException if file creation fails
3265 Generates a temporary file path for caching. @param conf Hadoop configuration object @param localDirAllocator directory allocator for writing files @return Path object with POSIX file permissions set @throws IOException if an I/O error occurs
3266 Executes a Hadoop file system command. Initializes FsShell, sets up tracing, and runs the specified command. @param argv command-line arguments @return exit code indicating success or failure
3267 Initializes a new instance of the Reader class. @param fs FileSystem instance (unused) @param dirName directory name containing data and index files @param conf Hadoop configuration settings @throws IOException if initialization fails or I/O error occurs
3268 Merges sorted segments into a final output file. @return RawKeyValueIterator for the merged data @throws IOException if an I/O error occurs during merging
3269 Initializes a new Writer for creating SequenceFiles. @param conf Hadoop configuration settings @param fs FileSystem object for file operations @param dirName directory path for the SequenceFile @param comparator custom key comparator @param compress compression type for the SequenceFile @throws IOException if an I/O error occurs during initialization
3270 Initializes a new Writer instance for outputting Writable objects to a file. @param conf Hadoop configuration settings @param fs FileSystem object representing the file system @param file path of the output file @param valClass class type of the Writable values to be written @throws IOException if an I/O error occurs during initialization
3271 Initializes a Writer for outputting Writable objects to a file. @param conf Hadoop configuration settings @param fs FileSystem instance @param file target file path @param valClass class of the value to be written @param compress compression type for the file @param progress progress tracking callback @throws IOException if an I/O error occurs
3272 Initializes a MapFile writer with specified configuration and options. @param conf Hadoop configuration settings @param fs FileSystem object for file operations @param dirName directory path for the MapFile @param keyClass class type of the keys @param valClass class type of the values @throws IOException if an I/O error occurs during initialization
3273 Deprecated constructor for creating a MapFile Writer. Initializes with specified configuration, directory, key and value classes, compression, and progress monitor. @param conf Hadoop configuration settings @param fs FileSystem instance @param dirName directory path for the MapFile @param keyClass key class type @param valClass value class type @param compress Compression type to use @param progress Progressable object for monitoring write progress @throws IOException if an I/O error occurs during initialization
3274 Deprecated constructor for creating a MapFile writer. @param conf Hadoop configuration settings @param fs FileSystem instance @param dirName directory path for the MapFile @param keyClass key class type @param valClass value class type @param compress compression type @param codec compression codec @param progress Progressable object @throws IOException if an I/O error occurs during initialization
3275 Deprecated constructor for Writer. Initializes a MapFile writer with specified configuration, directory, key and value classes, and compression type. @param conf Hadoop configuration settings @param fs FileSystem instance @param dirName directory path for the MapFile @param keyClass key class type @param valClass value class type @param compress Compression type to be used @throws IOException if an I/O error occurs during initialization
3276 Initializes a MapFile writer with specified configuration and options. @param conf Hadoop configuration settings @param fs FileSystem object for the directory path @param dirName directory path for the MapFile @param comparator WritableComparator to be used for sorting keys @param valClass class type to be used as the value @throws IOException if an I/O error occurs during initialization
3277 Deprecated constructor for creating a MapFile Writer. @param conf Hadoop configuration settings @param fs FileSystem instance @param dirName directory path for the MapFile @param comparator WritableComparator for key sorting @param valClass value class type @param compress compression type for data @throws IOException if an I/O error occurs during setup
3278 Initializes a MapFile writer with specified configuration and options. @param conf Hadoop configuration settings @param fs FileSystem to use for writing @param dirName directory path for the MapFile @param comparator WritableComparator for sorting keys @param valClass value class type @param compress compression type for data @param progress Progressable object for tracking progress @throws IOException if an I/O error occurs during initialization
3279 Deprecated constructor for creating a MapFile Writer. @param conf Hadoop configuration settings @param fs FileSystem object @param dirName directory path for the MapFile @param comparator WritableComparator for sorting keys @param valClass value class type @param compress compression type for the file @param codec compression codec to use @param progress Progressable object for tracking progress @throws IOException if an I/O error occurs during initialization
3280 Creates a SequenceFile writer with specified configuration and options. @param fc FileContext for file operations @param conf Hadoop configuration settings @param name path to the sequence file @param keyClass class type for keys @param valClass class type for values @param compressionType type of compression to use @param codec compression codec, defaults to DefaultCodec if null and type is not NONE @param metadata additional metadata for the file @param createFlag flags for file creation @param opts additional options for file creation @return Writer instance configured with provided parameters @throws IOException if an I/O error occurs during initialization
3281 Main entry point for the Classpath utility. Parses command-line arguments and manages JAR creation or classpath display. @param args command-line arguments
3282 Creates a ClassLoader for executing JAR files. @param file the JAR file to load @param workDir the working directory for classpath elements @return a configured ClassLoader instance @throws MalformedURLException if there's an issue with the URLs in the classpath
3283 Processes general command line options for Hadoop. @param line CommandLine object containing parsed options @throws IOException if an I/O error occurs during processing
3284 Retrieves the cache file path for storing blocks. @param conf Hadoop configuration object @param localDirAllocator directory allocator for writing files @return Path object with POSIX file permissions set @throws IOException if an I/O error occurs
3285 Checks if cache space is available for a file. @param fileSize size of the file to be cached @param conf Hadoop configuration object @param localDirAllocator directory allocator for writing files @return true if sufficient space, false otherwise
3286 Merges sorted segments into a final output file. @param segments list of segment descriptors to merge @param tmpDir temporary directory for intermediate files @return RawKeyValueIterator for the merged data @throws IOException if an I/O error occurs during merging
3287 Merges multiple input files into a single sorted output. @param inNames array of input file paths @param deleteInputs flag to delete input files after processing @param factor merging factor @param tmpDir temporary directory for intermediate results @return RawKeyValueIterator for the merged data @throws IOException if an I/O error occurs during merging
3288 Merges input files into a single sorted output. @param inNames array of input file paths @param tempDir temporary directory for intermediate outputs @param deleteInputs flag to delete input files after merging @return RawKeyValueIterator for the merged data @throws IOException if an I/O error occurs during merging
3289 Merges segments from a SequenceFile into a final output. @param inName input file path @param indexIn index file path @param tmpDir temporary directory for processing @return RawKeyValueIterator of merged data @throws IOException if an I/O error occurs during merging
3290 Initializes a new Writer for creating SequenceFiles. @param conf Hadoop configuration settings @param fs FileSystem object for file operations @param dirName directory path for the SequenceFile @param keyClass class of WritableComparable for keys @param compress compression type for the SequenceFile @throws IOException if an I/O error occurs during initialization
3291 Initializes a SequenceFile writer. @param fs FileSystem object for file operations @param dirName directory path for the SequenceFile @param keyClass class type of the keys @throws IOException if an I/O error occurs during initialization
3292 Merges multiple input map files into a single output file. @param inMapFiles array of input map file paths @param deleteInputs flag to indicate if input files should be deleted after merge @param outMapFile path for the merged output map file @throws IOException if an I/O error occurs during merging
3293 Creates a SequenceFile writer with specified configurations. @param fs Hadoop FileSystem instance @param conf Hadoop Configuration settings @param name Path to the sequence file @param keyClass Class type for keys @param valClass Class type for values @param bufferSize Buffer size for writing @param replication Replication factor for the file @param blockSize Block size in bytes @param createParent Flag to create parent directories if needed @param compressionType Type of compression to use @param codec Compression codec, defaults to DefaultCodec if null and type is not NONE @param metadata Additional metadata for the file @return Writer instance configured with provided parameters @throws IOException if an I/O error occurs during initialization
3294 Parses general command line options. @param opts initial Options object to add to @param args command line arguments @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs during processing
3295 Caches a block by writing it to a file and updating cache metadata. @param blockNumber unique identifier for the block @param buffer data buffer containing block content @param conf Hadoop configuration object @param localDirAllocator directory allocator for writing files @throws IOException if an I/O error occurs during caching
3296 Merges input files into a single sorted output. @param inNames array of input file paths @param deleteInputs flag to delete input files after processing @param tmpDir temporary directory for intermediate results @return RawKeyValueIterator for the merged data @throws IOException if an I/O error occurs during merging
3297 Executes a single merge pass on input files. @param tmpDir temporary directory for processing @return 0 indicating successful completion @throws IOException if an I/O error occurs during merging or writing
3298 Entry point for running JAR files in Hadoop. @param args command-line arguments including JAR path and main class
3299 Initializes and parses command line options. @param conf Hadoop configuration object @param options initial command line options @param args command line arguments @throws IOException if parsing fails
3300 Sorts input files and returns an iterator for the sorted data. @param inFiles array of input file paths @param tempDir temporary directory for intermediate results @param deleteInput flag to delete input files after processing @return RawKeyValueIterator for the sorted data @throws IOException if an I/O error occurs during sorting or merging
3301 Merges multiple input files into a single sorted output file. @param inFiles array of input file paths @param outFile destination path for the merged file @throws IOException if an I/O error occurs during merging or writing
3302 Sorts input files and writes sorted data to output file. @param inFiles array of input paths @param outFile output path for sorted data @param deleteInput flag to delete input files after processing @throws IOException if an I/O error occurs during sorting or merging
3303 Constructs a GenericOptionsParser with default Hadoop configuration. @param opts command line options @param args command line arguments @throws IOException if parsing fails
3304 Parses command line options with default configuration and options. @param args command line arguments @throws IOException if parsing fails
3305 Parses command line options with default settings. @param conf Hadoop configuration object @param args command line arguments @throws IOException if parsing fails
3306 Sorts a single input file and writes sorted data to output file. @param inFile input path for the file to be sorted @param outFile output path for sorted data @throws IOException if an I/O error occurs during sorting
3307 Creates and returns a GenericOptionsParser. @param conf Hadoop configuration object @param argArray command line arguments array @return GenericOptionsParser instance for parsing options @throws IOException if parsing fails
3308 Executes a Hadoop tool with specified configuration and arguments. @param conf Hadoop configuration object @param tool the Tool instance to run @param args command line arguments @return exit code from the tool's execution @throws Exception if an error occurs during execution
3309 Parses command-line arguments and updates configuration. @param conf Hadoop configuration object @param args list of command-line arguments @return list of remaining unparsed arguments @throws ServiceLaunchException if parsing fails
3310 Executes Kerberos diagnosis tool with given configuration and arguments. @param conf Hadoop configuration object @param argv command line arguments @return exit code from the tool's execution @throws Exception if an error occurs during execution
3311 Main entry point for the CredentialShell utility. Initializes and runs the Hadoop tool with user arguments. @param args command line arguments
3312 Entry point for executing KeyShell commands. Initializes configuration and runs KeyShell tool. @param args command line arguments
3313 Executes a Hadoop tool with specified arguments. @param tool the Tool instance to run @param args command line arguments @return exit code from the tool's execution @throws Exception if an error occurs during execution
3314 Extracts and parses command-line options. @param conf Hadoop configuration object @param args list of command-line arguments @return list of unparsed arguments after option extraction
3315 Main entry point for Kerberos diagnosis tool. Executes diagnostics and handles exceptions. @param argv command line arguments
3316 Main entry point for FsShell. Initializes and runs the Hadoop file system shell. @param argv command line arguments
3317 Main entry point for the LogLevel application. Initializes and runs the command-line interface with provided arguments. @param args command line arguments
3318 Main entry point for executing FindClass as a Hadoop tool. @param args command line arguments
3319 Launches a Hadoop service with command-line arguments and handles exceptions. @param args list of command-line arguments
3320 Entry point for the ServiceLauncher application. Parses command-line arguments and delegates to serviceMain. @param args command-line arguments passed to the application
3321 Entry point for launching Hadoop services with varargs. Converts command-line arguments to list and delegates to main service handler. @param args variable-length array of command-line arguments
