1 Creates a FileRange with the given offset and length. @param offset Start offset of the range in the file. @param length Length of the range. @return A new FileRange instance.
2 Creates a FileRange instance with the given offset, length, and reference.
3 Validates a FileRange object, throwing exceptions for invalid ranges. @param range FileRange to validate @return The validated FileRange object
4 Checks if an object is not null. Throws IAE if null. @param obj object to check @param argName name of the argument
5 Checks if a long value is positive. @param value long value to check @param argName name of the argument
6 Checks if a long value is non-negative. @param value long value to check @param argName name of the argument
7 Checks if a value is present; throws exception if not. @param isPresent boolean indicating presence
8 Checks if a boolean condition is valid; throws exception if not. @param isValid boolean to validate @param argName name of the argument being validated
9 Checks if a value is valid, throwing an exception if not. @param isValid boolean to check, argName, validValues for message
10 Checks if two long values are equal, throwing an exception if not. @param value1 First long value. @param value1Name Name of the first value. @param value2 Second long value. @param value2Name Name of the second value.
11 Checks if value1 is an integer multiple of value2. @param value1 First value @param value1Name Name of the first value @param value2 Second value @param value2Name Name of the second value
12 Checks if value1 is greater than value2, throwing exception if not. @param value1 First value to compare. @param value1Name Name of the first value. @param value2 Second value to compare. @param value2Name Name of the second value.
13 Checks if value1 is greater or equal to value2. @param value1 First value to compare. @param value1Name Name of the first value. @param value2 Second value to compare. @param value2Name Name of the second value.
14 Checks if value1 is less than or equal to value2. @param value1 First value to compare. @param value1Name Name of the first value. @param value2 Second value to compare. @param value2Name Name of the second value.
15 Checks if a value is within a specified inclusive range. @param value value to check @param valueName name of the value @param minValueInclusive minimum value @param maxValueInclusive maximum value
16 Checks if a double value is within a specified inclusive range. @param value The value to check. @param valueName Name of the value being checked. @param minValueInclusive Lower bound of the range. @param maxValueInclusive Upper bound of the range.
17 Validates paths for bulk deletion, ensuring size and base path. @param paths Paths to validate. @param pageSize Maximum number of paths per page. @param basePath Base path to check against.
18 Initializes BlockUploadData with a file. @param file the file to upload; must exist.
19 Casts a Serializable to IOStatisticsSnapshot, validating the type. @param snapshot The object to cast, must be an IOStatisticsSnapshot @return The casted IOStatisticsSnapshot
20 Maps enum names to values with a prefix. @param prefix Prefix to prepend to enum names @param enumClass Enum class to map @return Map of enum name (with prefix) to enum value
21 Sorts a list of FileRange objects and returns them as an array. @param input List of FileRange objects to sort. @return Array of sorted FileRange objects.
22 Checks if a path is a parent of another path. @param parent The parent path. @param child The child path. @return True if the parent path is a parent of the child path.
23 Checks if two paths belong to the same file system. @param qualPath1 First path to compare. @param qualPath2 Second path to compare. @return True if paths are on the same FS, false otherwise.
24 Adds a file to be deleted on exit. @param f Path to add to the delete-on-exit list. @return True if file exists, false otherwise.
25 Processes files marked for deletion on exit. Iterates, deletes existing files, and removes them.
26 Checks if a file is a checksum file (ends with ".crc"). @param file Path object representing the file. @return True if the file is a checksum file, false otherwise.
27 Checks if a file is a checksum file (ends with ".crc"). @param file The Path object representing the file. @return True if the file is a checksum file, false otherwise.
28 Adjusts BlockLocation objects based on start, length, and file offset. @param locations BlockLocation array to modify @param start Start offset of the desired range @param len Length of the desired range @param fileOffsetInHar Offset of the file within the HAR archive @return Modified BlockLocation array
29 Compares this file status with another based on their paths. @param o the other file status to compare to @return negative, zero, or positive based on path comparison.
30 Converts an array of FileStatus objects to an array of Paths. @param stats Array of FileStatus objects to convert. @return Array of Path objects.
31 Resolves a file path using FileLinkResolver, returning the resolved Path.
32 Gets the replication factor for a file or directory. @param src The path to the file or directory. @return The replication factor.
33 Gets the block size of a file or directory. @param f Path to the file or directory. @return Block size in bytes.
34 Gets the default replication factor for files. @param path The path to check (unused). @return The default replication factor (short).
35 Cleans up thread-local statistics data, merging it into rootData.
36 Validates arguments for positioned reads. @param position Read position. @param buffer Buffer to read into. @param offset Offset in buffer. @param length Number of bytes to read.
37 Validates the provided upload ID. @param uploadId Upload ID to validate, must be non-null and non-empty.
38 Validates part handles; ensures map is not empty and handles are positive. @param partHandles Map of part handles to validate.
39 Validates path & capability arguments, returns lowercase capability. @param path The path to validate. @param capability Capability string to validate.
40 Constructs an IrqHandler with a name and handler. @param name handler name @param handler interrupted handler
41 Partitions a list into sublists of specified page size. @param originalList list to partition @param pageSize size of each sublist @return list of sublists
42 Constructs a JsonSerialization instance. @param classType Class to serialize/deserialize. @param failOnUnknownProperties Handles unknown properties. @param pretty Pretty prints JSON output.
43 Constructs StorageStatisticsFromIOStatistics with name, scheme, and IOStatistics. @param name Statistics name @param scheme Scheme used for statistics @param ioStatistics IOStatistics object to use
44 Returns a map of scheme to statistics. Uses statisticsTable to populate the map.
45 Creates a data output stream for writing to a file. @param f Path to create, permission, flags, size, etc. @return FSDataOutputStream
46 Creates a non-recursive FSDataOutputStream. @param f path to create @param permission file permissions @param overwrite overwrite if exists
47 Constructs a PathAccessDeniedException with the given path. @param path The file path that caused the access denial.
48 Constructs PathPermissionException with a file path. @param path The file path that caused the permission error.
49 Constructs a PathNotFoundException with the given path. @param path The file path that couldn't be found.
50 Constructs PathExistsException with the given path. @param path The file path that already exists.
51 Constructs a PathIOException with the given path and default error. @param path The file path that caused the error.
52 Constructs a ClosedIOException with path and message. @param path The file path. @param message The error message.
53 Returns a reference to the current builder object.
54 Converts permission bits to an extended short representation. Returns a short value, equivalent to the short representation.
55 Converts permission bits to octal representation. Returns a short value representing the octal permission.
56 Interns strings in an array using weak interning. @param strings Array of strings to be interned. @return Array with strings weakly interned.
57 Checks if the file status represents a directory. Deprecated, use {@link #isDirectory()}.
58 Checks if a path represents a directory. @param f The path to check. @return True if it's a directory, false otherwise.
59 Checks if a path is a directory. @param item PathData object to check. @return True if the path is a directory, false otherwise.
60 Returns ACL entries based on recursion flag. @param item PathData object containing file status @return List of AclEntry objects
61 Checks if a path represents a directory. @param f The path to check. Returns false if file not found.
62 Applies new permission to a file status. @param file FileStatus object to modify permissions @return Short representation of combined permission bits
63 Checks if the status represents a regular file. Returns false if it's a directory or symlink.
64 Returns the path pointed to by the symbolic link. @throws IOException if the path is not a symbolic link.
65 Gets the file length. Caches the length for efficiency.
66 Gets the length of a file. @param f Path to the file. @return File length in bytes.
67 Gets the storage policy for a given path. @param src The path to check. @throws IOException if an I/O error occurs.
68 Sets an extended attribute on a path. @param path Path to set the attribute on. @param name Attribute name. @param value Attribute value.
69 Constructs PathIOException with path and a cause. @param path The affected file path. @param cause The wrapped Throwable.
70 Seeks to the specified position in the input stream. @param position The position to seek to.
71 Reads the record length from the input stream. Returns -1 if end of stream is reached.
72 Returns the current byte offset of the input stream.
73 Registers an expression class by invoking its registration method. @param expressionClass The expression class to register.
74 Registers commands from a registrar class. @param registrarClass Class containing registerCommands method.
75 Reads data from the stream at a specific position. @param pos offset from the start of the stream @param b buffer to read into @param offset offset into the buffer @param length number of bytes to read @return number of bytes read or -1 if end of stream
76 Reads bytes from the stream at the specified position. @param pos Byte offset in the stream. @param b Buffer to read into. @param offset Offset in the buffer. @param length Number of bytes to read.
77 Expands file patterns containing curly braces and commas. @param filePatternWithOffset Pattern with offset info. @return List of expanded patterns or null if not found.
78 Lists file statuses in a batch, used for pagination. @param f Path to list statuses for. @param token Pagination token, unused in this implementation. @return DirectoryEntries object containing file statuses.
79 Encodes a byte array to a string using specified encoding. @param value byte array to encode @param encoding XAttrCodec enum specifying encoding type @return encoded string value
80 Lists file statuses matching a filter, adding them to results. @param results List to add matching FileStatus objects to. @param f Path to check @param filter Filter to apply to file statuses.
81 Constructs a MetricsTag with provided info and value. @param info MetricsInfo object; cannot be null. @param value String value for the tag.
82 Constructs a new AbstractMetric with provided metrics info. @param info MetricsInfo object containing metric details.
83 Retrieves a delegation token from the authenticator. @param url URL for delegation token retrieval. @param token Token object to store the retrieved token. @param renewer renewer principal @param doAsUser user to act on behalf of @return DelegationToken
84 Renews a delegation token for a URL. @param url URL to renew token for @param token Token containing delegation token @param doAsUser User to act as @return Renewed token lifetime in milliseconds
85 Cancels a delegation token, nullifies the token, and calls authenticator. @param url URL to cancel token for @param token Token to cancel @param doAsUser User to act as
86 Constructs a ValueQueue with specified parameters. @param numValues initial queue size @param lowWatermark low watermark value
87 Checks if object is null; throws NullPointerException if so. @param obj object to check @return the object if not null
88 Adds or retrieves storage statistics by name. @param name Statistics name. @param provider Provider for creating statistics. @return The storage statistics object.
89 Resets global storage statistics to their initial values.
90 Closes the BlockUploadData, cleans up resources, and deletes the file.
91 Copies a file from src to dst without buffering. Uses native copy if available, otherwise uses FileChannel.
92 Closes a Closeable stream. Uses cleanupWithLogger to handle closure. @param stream The stream to close.
93 Closes multiple Closeable streams. Uses cleanupWithLogger. @param streams Array of Closeable resources to close.
94 Performs a disk I/O check on a file, verifying write and delete operations. @param file The file to check. @throws IOException if the check fails.
95 Synchronizes the output stream to disk, ensuring data persistence.
96 Closes the operation, updating statistics based on success/failure. @param iostats The IOStatisticsStore to update with operation data.
97 Sets the buffer count. @param newCount New count, must be within buffer length. @return Old buffer count.
98 Gets the InetSocketAddress of the connector at the given index. @param index Connector index to retrieve. @return InetSocketAddress or null if not found/bounded.
99 Constructs a GcTimeMonitor with specified parameters. @param observationWindowMs Observation window in milliseconds. @param sleepIntervalMs Sleep interval in milliseconds.
100 Extracts the raw path from the request URI after servlet name. @param request HTTP request object @param servletName Servlet name prefix @return Raw path string
101 Checks if this file status is equal to another based on path. @param o the object to compare to @return true if equal, false otherwise
102 Returns the hash code, based on the file's path.
103 Sets the sample count and sum. @param sampleCount Number of samples. @param newSum The new sum value.
104 Adds samples and sum from another MeanStatistic. @param other The MeanStatistic to merge. @return The current MeanStatistic instance.
105 Appends a map to a StringBuilder as a formatted string. @param sb StringBuilder to append to @param type Map type @param map Map to format @param separator Separator between entries
106 Formats a map entry as a string. @param entry Map entry to format. @return Formatted string representation.
107 Creates and returns a DurationTracker instance with given key and count.
108 Creates a LongStatistic from a map entry. @param e Map entry containing statistic name and value. @return LongStatistic object.
109 Constructs a new EvaluatingStatisticsMap using passthroughFn.
110 Adds a counter function evaluator to the map, keyed by the given key. @param key Key for the counter function. @param eval Function to evaluate the counter value.
111 Adds a gauge function evaluator to the map, associated with key. @param key Key for the gauge evaluator. @param eval Function to evaluate the gauge.
112 Adds a function to calculate minimum values for a key. @param key Key for the minimum value calculation. @param eval Function to evaluate and return the minimum.
113 Adds a function to calculate maximum values for a given key. @param key Key for the maximum value evaluator. @param eval Function to calculate the maximum value.
114 Adds a function to calculate mean statistic for a key. @param key Key for the mean statistic evaluator. @param eval Function to calculate the mean statistic.
115 Wraps an IOStatistics instance in a SourceWrappedStatistics. @param statistics The IOStatistics instance to wrap. @return A SourceWrappedStatistics object.
116 Returns the singleton instance of the empty statistics store.
117 Returns the singleton instance of EmptyIOStatistics.
118 Retrieves a counter reference by key. @param key The counter's key. @return AtomicLong reference or null if not found.
119 Retrieves the maximum value associated with the given key. @param key The key to look up in the maximumMap. @return AtomicLong representing the maximum value.
120 Retrieves the minimum value associated with the given key. @param key The key for which to retrieve the minimum value. @return AtomicLong representing the minimum value or null.
121 Retrieves a gauge reference by key. @param key The key of the gauge to retrieve. @return AtomicLong representing the gauge value.
122 Retrieves the MeanStatistic associated with the given key. @param key The key of the MeanStatistic to retrieve. @return The MeanStatistic object or null if not found.
123 Returns the first duration as a Duration object.
124 Sets the wrapped IOStatistics object. @param wrapped The IOStatistics to wrap; must be null.
125 Returns the active DynamicIOStatistics instance. @throws IllegalStateException if the instance is null.
126 Ensures the FlagSet is mutable; throws exception if immutable.
127 Converts the block data to a byte array. @return Byte array representation of the block data. @throws IOException if an I/O error occurs.
128 Binds a signal handler. Throws exception if already bound.
129 Decrements the reference count and checks if it's closed. @return True if the resource is now closed, false otherwise.
130 Creates a concurrent snapshot of a map, cloning values with copyFn. @param source The source map to snapshot. @param copyFn Function to clone values during snapshot. @return A ConcurrentHashMap containing the snapshot.
131 Tracks duration of a CallableRaisingIOE operation. @param factory DurationTrackerFactory, may be null @param statistic Statistic name @param input Callable to track duration of @return Result of Callable after tracking duration.
132 Creates a PairedDurationTrackerFactory with given trackers. @param first The first DurationTrackerFactory. @param second The second DurationTrackerFactory.
133 Returns the count of client backoff due to disconnected state.
134 Returns the number of slow RPC calls.
135 Returns the number of RPC requeue calls.
136 Resets the IO statistics context to its initial state.
137 Constructs a new IOStatisticsSnapshot, initializing internal maps.
138 Checks if thread-level I/O statistics tracking is enabled. @return True if enabled, false otherwise.
139 Initializes a new BuiltInGzipDecompressor instance. Resets the state and CRC checksum for decompression.
140 Updates the encryptor with new IV based on stream offset. @throws IOException if an I/O error occurs during initialization.
141 Adjusts buffer size to be a multiple of the cipher's block size. @param codec CryptoCodec object @param bufferSize initial buffer size @return Adjusted buffer size
142 Creates a hard link from src to dst, using native code if available. @param src Source file. @param dst Destination file (hard link).
143 Constructs a new MD5MD5CRC32GzipFileChecksum object. @param bytesPerCRC Bytes per CRC value. @param crcPerBlock CRC value per block. @param md5 The MD5 hash object.
144 Default constructor, calls the parameterized constructor.
145 Constructs a new MD5MD5CRC32FileChecksum object. @param bytesPerCRC Bytes per CRC value. @param crcPerBlock CRC value per block. @param md5 The MD5 hash object.
146 Converts a glob pattern into a compiled regex pattern. @param glob glob pattern to compile
147 Returns an iterator for file statuses in a directory. @param f the path to the directory @return RemoteIterator of FileStatus objects
148 Creates a shell path from a File object. @param file The file to create a shell path from. @param makeCanonicalPath Whether to use the canonical path.
149 Extracts file permissions from a mode integer. @param mode Integer representing file mode flags. @return Set of PosixFilePermission objects.
150 Executes the command, throwing an exception if any element is null.
151 Checks if the total length of commands exceeds Windows limit. @param commands Array of command strings to check. @throws IOException if the combined length is too long.
152 Creates a PowerShell script to terminate a process on a host. @param processName Process name to terminate. @param host Remote host to execute the script on. @return Absolute path to the generated PowerShell script.
153 Returns the size of the checksum. Delegates to sum.getChecksumSize().
154 Calculates the total checksum size needed for the data. @param dataSize Size of the data in bytes. @return Total checksum size in bytes.
155 Converts a checksum value to a byte stream. @param sum Checksum object; value is converted to bytes. @param checksumSize Size of the byte array to create.
156 Increments the bytes read counter by the given amount. @param newBytes The number of bytes to add to the counter.
157 Adds to the total bytes written for the current thread. @param newBytes The number of bytes to add.
158 Increments the number of read operations by the given count. @param count The number of read operations to add.
159 Increments the count of large read operations by the given amount. @param count The number of large read operations to add.
160 Increments the number of write operations by the given count. @param count The number of write operations to increment.
161 Adds bytes read erasure coded to thread-specific stats. @param newBytes The number of bytes to add.
162 Increments bytes read for a given distance. @param distance Distance from the local host. @param newBytes Number of bytes read.
163 Adds durationMS to the remote read time for the current thread.
164 Visits all statistics data and aggregates the result. @param visitor Aggregator to process and combine statistics. @return Aggregated result from visiting all data.
165 Constructs a ContentSummary from a Builder, initializing its fields. @param builder Builder object containing content summary data.
166 Constructs a ChecksumOpt with default type and size.
167 Creates a disabled ChecksumOpt using a NULL type and size -1.
168 Validates the CreateFlag enum set; throws exception on invalid flags. @param flag The set of CreateFlag options to validate.
169 Validates a URI scheme against a supported scheme. @param uri The URI to validate. @param supportedScheme The expected scheme.
170 Constructs an InvalidPathException with the given path. @param path The invalid file system path.
171 Constructs InvalidPathException with path and reason. @param path The invalid file path. @param reason Optional reason for the invalid path.
172 Finds the first non-null input from an array. @param inputs Array of inputs to check. @return First non-null input, or throws exception if all null.
173 Finds the first non-null element in an array. @param inputs Array of elements to check. @return The first non-null element, or throws exception.
174 Validates input buffers for null and correct length. @param buffers Array of byte buffers to validate.
175 Validates output buffers for nulls, length, and directness. @param buffers Array of buffers to validate.
176 Validates input buffers for null and correct length. @param buffers Array of byte arrays to validate.
177 Validates input ByteBuffer array for encoding. Checks for null buffers, correct length, and directness. @param buffers Array of ByteBuffer objects to validate.
178 Stops a proxy by closing it or its invocation handler. @param proxy The proxy instance to stop.
179 Merges checksum options, prioritizing user settings. @param defaultOpt Default checksum options. @param userOpt User-provided checksum options. @param userBytesPerChecksum User-specified bytes per checksum. @return Combined ChecksumOpt.
180 Returns default port, using DELEGATE_TO_FS_DEFAULT_PORT if unset. @param theFsImpl FileSystem implementation. @return Default port number.
181 Canonicalizes a URI, setting the default port if missing. @param uri The URI to canonicalize. @return The canonicalized URI.
182 Sets the replication factor for a file. @param src The path to the file. @param replication The new replication factor. @return True if successful.
183 Disconnects from the FTP server. @param client The FTPClient to disconnect. @throws IOException if an I/O error occurs.
184 Closes the output stream, releasing resources.
185 Default constructor. Deprecated and provides no functionality.
186 Constructs a ContentSummary with specified metrics. @param length Total length of content. @param fileCount Number of files.
187 Calculates the delay until token renewal, converted to specified unit. @param unit Time unit for the delay (e.g., TimeUnit.SECONDS) @return Delay in the given time unit.
188 Updates the renewal time by adding a calculated delay.
189 Updates the last activity timestamp to the current time.
190 Sleeps for at least 'millis' milliseconds, ignoring interrupts.
191 Returns the current time in milliseconds since epoch.
192 Waits for all thread pools to terminate within a timeout. @param milliseconds Timeout duration in milliseconds. @return True if all pools terminated, false otherwise.
193 Checks data integrity using checksums. @param sumsBytes Sums buffer, @param data Data buffer to check. @param file Path to the file. @return Validated data buffer.
194 Opens a file for input stream. @param f The path to the file. @return FSDataInputStream for reading the file.
195 Calculates the length of the checksum file for a given file. @param file Path to the file. @param fileSize size of the file. @return Length of the checksum file in bytes.
196 Returns a dummy FsStatus object for the given path. @param p The path to get the status for. @return An FsStatus object with default values.
197 Registers file permission commands with the given factory. @param factory CommandFactory to register commands with.
198 Registers the Find class as a command with the factory. @param factory Command factory to register with.
199 Registers the Count class with the factory using "-count". @param factory CommandFactory instance for registration.
200 Constructs a CommandFormat with a name, min/max params, and options. @param name Command name. @param min Minimum number of parameters. @param max Maximum number of parameters. @param possibleOpt Possible command-line options.
201 Executes a CallableRaisingIOE asynchronously. @param callable Callable that may throw IOE @return CompletableFuture representing the result.
202 Rejects unknown mandatory keys, using provided error text. @param knownKeys Known keys to validate against. @param extraErrorText Additional error text for error message.
203 Gets a list of capabilities enabled in this flag set.
204 Builds the HTTP referrer header string. Returns empty string if URI creation fails.
205 Constructs a WeakReferenceMap with a factory and optional reference lost listener. @param factory Function to create values for keys. @param referenceLost Consumer called when a reference is lost.
206 Checks if an OutputStream has a specific capability. @param out The OutputStream to check. @param capability Capability to check for.
207 Checks if an InputStream has a specified capability. @param in The input stream to check. @param capability Capability to check for.
208 Shuts down the executor service gracefully. @param logger Logger for logging shutdown events. @param timeout Shutdown timeout. @param unit Time unit for the timeout.
209 Acquires a resource from the pool, blocking if necessary. Returns the resource or null if unavailable.
210 Attempts to acquire a resource without blocking. @return Resource object or null if unavailable.
211 Returns the number of available resources in the pool. Calculates available resources based on size and created.
212 Constructs a SingleFilePerBlockCache with given parameters. @param prefetchingStatistics PrefetchingStatistics object @param maxBlocksCount Maximum blocks to store @param trackerFactory DurationTrackerFactory for tracking duration
213 Constructs a SemaphoredDelegatingExecutor with permit control. @param permitCount The number of permits available.
214 Adds an entry to the head of the linked list, under lock. @param entry The entry to add.
215 Marks the buffer as done, verifies checksum if present, and resets action.
216 Sets the buffer size for the data input stream. @param bufSize The desired buffer size in bytes. @return A reference to this builder instance.
217 Returns a reference to the current builder instance.
218 Retrieves the value associated with the current thread. @return The value or null if not found.
219 Removes the value associated with the current thread. @return The removed value, or null if not found.
220 Sets a value for the current thread. @param newVal The value to set; returns old value or newVal.
221 Merges another file range if conditions are met. @param otherOffset Offset of the other range. @param otherEnd End of the other range. @return True if merged, false otherwise.
222 Creates a BulkDelete operation for the given path. @param path The path for the bulk delete operation. @return A DefaultBulkDeleteOperation object.
223 Registers the And class with the ExpressionFactory for CLI use. @param factory ExpressionFactory instance to register with.
224 Registers Print and Print0 classes with the ExpressionFactory. @param factory ExpressionFactory instance to register classes with.
225 Registers expression classes with the ExpressionFactory. @param factory The ExpressionFactory to register with.
226 Constructs a Name object with case-sensitive flag set. @param caseSensitive True for case-sensitive matching.
227 Gets a CompressionCodec based on the filename suffix. @param file The path to the file. @return CompressionCodec or null if no matching codec.
228 Resolves property name using a template and mode string. @param mode SSLFactory.Mode - specifies the SSL mode. @param template Format template for property name.
229 Generates a configuration suffix from the cipher suite name. Uses the name to build a dot-separated, lowercase suffix.
230 Combines this Result with another, returning a new Result. @param other The Result to combine with.
231 Returns the negated Result: success becomes failure, descend remains unchanged.
232 Creates and configures FindOptions with streams, factory, and config. @return FindOptions object with configured search parameters.
233 Checks if an expression exists. @param expressionName Name of the expression to check.
234 Adds multiple child expressions from a deque. @param exprs Deque of expressions to add. @param count Number of expressions to add.
235 Adds multiple arguments to the expression. @param args Deque of arguments to add. @param count Number of arguments to add.
236 Converts a path string to a URI object. @param pathString the path string to convert @throws IllegalArgumentException if URI syntax is invalid
237 Initialises the order comparator based on time or size. Uses isOrderTime() and isOrderSize() to determine order.
238 Checks if the command is deprecated, using replacement command.
239 Gets the command name, using field if null or starts with '-'.
240 Sets file preservation flags. Preserves timestamps, ownership, and permission if true.
241 Constructs a MetricsRecordBuilder with parent, info, filters, and acceptable flag.
242 Constructs a ChunkedArrayList with specified initial capacity and max size. @param initialChunkCapacity Initial chunk capacity. @param maxChunkSize Maximum size of each chunk.
243 Finds the index of the first default ACL entry. @param aclBuilder List of ACL entries to search. @return Index of first default entry, or PIVOT_NOT_FOUND.
244 Creates a snapshot of the given path with a null snapshot name. @param path Path to snapshot. @return Path to the created snapshot.
245 Adds an option to the optionsWithValue map. @param option The option name to add. Throws exception if duplicated.
246 Initializes TableBuilder with headers. @param headers column headers for the table
247 Checks if the table is empty. Returns true if size is 0.
248 Constructs a Shell instance with a specified interval. @param interval Interval between command executions.
249 Constructs a Token with identifier, password, kind, and service. Uses default values if input parameters are null.
250 Default constructor initializes Token with empty arrays and Text objects.
251 Constructs a Globber with a FileContext, path pattern, filter, and symlink resolution flag.
252 Generates a detailed exception message including path and operation.
253 Handles SASL connection failure, retries, and exception handling. @param currRetries Current retry count. @param maxRetries Maximum retry count.
254 Checks if a FileSystem is a view file system. @param fileSystem The FileSystem to check. @return True if it's a view file system, false otherwise.
255 Sets quota for a path. Throws UnsupportedOperationException.
256 Sets quota for a storage type. Throws UnsupportedOperationException.
257 Creates a MultipartUploaderBuilder. Throws an UnsupportedOperationException.
258 Lists located statuses for files under the given path. @param f The path to list. @return RemoteIterator of LocatedFileStatus.
259 Lists located status for files under the given path. @param f The path to list. @return RemoteIterator of LocatedFileStatus.
260 Gets the checksum for a file. @param f Path to the file. @return FileChecksum object.
261 Sets an extended attribute on a path. @param path The path to set the xattr on. @param name The name of the xattr. @param value The value of the xattr.
262 Opens a file with specified parameters. @param path Path to the file to open. @param parameters Parameters for file opening.
263 Opens a file with specified options and buffer size. @param path Path to the file. @param parameters Parameters for file opening.
264 Opens a file with specified options. @param path Path to the file. @param parameters Opening parameters. @return CompletableFuture wrapping the FSDataInputStream.
265 Opens a file with specified options and returns a CompletableFuture. @param pathHandle PathHandle object @param parameters OpenFileParameters object @return CompletableFuture FSDataInputStream
266 Retrieves all available block storage policies. Delegates to the default FileSystem implementation.
267 Initializes a map of file systems from mount points. @param mountPoints List of mount points to initialize. @return Map of file system names to FileSystem objects.
268 Creates a ResolveResult for regex mount points. @param resultKind Result kind. @param resolvedPathStr Resolved path string. @param targetOfResolvedPathStr Target path string. @param remainingPath Remaining path. @return ResolveResult or null on failure.
269 Creates an FsGetter for accessing child file systems. Uses the scheme obtained from this ViewFileSystemOverloadScheme.
270 Constructs an INodeLink with path, user group info, target FS, and dir links. @param pathToNode Path to the node. @param aUgi UserGroupInformation object
271 Constructs an INodeLink with path, user info, and file system creation method. @param pathToNode Path to the node. @param aUgi UserGroupInformation object. @param createFileSystemMethod Function to create the file system. @param aTargetDirLink Target directory link.
272 Replaces regex capture groups in a path with their values. @param parsedDestPath Path to modify. @param srcMatcher Matcher object containing regex matches. @param regexGroupNameOrIndexStr Group name/index to extract. @param groupRepresentationStrSetInDest Variable names to replace.
273 Decrypts data from input buffer to output buffer using a decryptor. @param decryptor Decryptor instance used for decryption.
274 Verifies the context is initialized. Throws IllegalStateException if not.
275 Checks if the parent ZNode exists. @throws IOException if there's an I/O error. @throws InterruptedException if interrupted.
276 Gets the config prefix for the default mount table. Uses {@link #getConfigViewFsPrefix(String)} internally.
277 Deserializes an interceptor from a string. @param serializedString String containing regex and replacement. @return RegexMountPointResolvedDstPathReplaceInterceptor object.
278 Returns the readable byte channel associated with the socket. @param hasChannel boolean condition to check
279 Calculates the total length of the checksum file. @param file The file path. @param fileSize File size in bytes.
280 Returns the filesystem name. Uses Windows path or runs df command.
281 Retrieves the mount point of the directory. Returns drive letter on Windows, parsed from command on Unix.
282 Calculates the percentage of disk space used. Uses capacity and available space to determine usage.
283 Constructs an FSInputChecker with file, retries, checksum settings. @param file File path. @param numOfRetries Retry count.
284 Checks if a stream supports ByteBuffer reading. Returns true if stream is ByteBufferReadable or FSDataInputStream.
285 Initializes the thread ID context entry. Uses currentThreadID to populate the thread ID.
286 Notes the entry point tool's class name to global context. @param tool The tool object whose class name is noted.
287 Sets an optional long value for the given key. @param key configuration key @param value long value to set @return this builder
288 Sets an optional float value as a long for the given key. @param key configuration key @param value float value to be cast to long @return this builder
289 Sets an optional long value for the given key. @param key configuration key @param value long value to set @return this builder
290 Sets an optional double value for the given key. @param key configuration key @param value double value to set @return this builder
291 Sets an int value for a key, converts it to a string. @param key configuration key @param value int value to set @return this builder
292 Sets a float value for the given key, converting it to a long. @param key configuration key @param value float value to set @return this builder
293 Sets a long value for the given key, converting it to a string. @param key configuration key @param value long value to set @return this builder
294 Sets a double value for the given key, converting it to a long. @param key configuration key @param value double value to set @return this builder
295 Retrieves a row as an array of strings, wrapping and padding. @param idx row index @return String array representing the row
296 Starts local output, delegating to the underlying file system. @param fsOutputFile Output file path. @param tmpLocalFile Temporary local file path. @return Temporary local file path.
297 Calculates effective permission based on ACL entry and permission. @param entry The ACL entry to evaluate. @param permArg Base permission argument. @return The effective FsAction permission.
298 Constructs a PermissionStatus object. @param user Username. @param group Group name. @param permission FsPermission object.
299 Parses an ACL entry string and constructs an AclEntry. @param aclStr The ACL entry string to parse. @param includePermission Whether to include permission in parsing.
300 Generates a stable string representation of the AclEntry.
301 Converts a delimited string to a string array. @param str The string to convert. @param delim The delimiter string. @return String array or null if empty.
302 Splits a string by comma into a collection of strings.
303 Parses permission mode string, applying symbolic or octal patterns. @param modeStr permission string to parse @param symbolic Pattern for symbolic permissions @param octal Pattern for octal permissions @throws IllegalArgumentException if modeStr is invalid
304 Closes the block, performing cleanup actions based on its state.
305 Checks if the stream is open; throws exception if closed.
306 Transitions the data block to the specified next state. @param current The current state. @param next The next state to transition to. @throws IllegalStateException if states are invalid.
307 Writes data to the data block. @param buffer The buffer containing the data to write. @param offset Start index in the buffer. @param length Number of bytes to write. @return 0 (implementation detail).
308 Flushes data to disk, ensuring the block is in the Writing state. @throws IOException if an I/O error occurs during the flush.
309 Sets a referrer attribute. @param key attribute key @param value attribute value
310 Extracts query parameters from a header string. @param header Header string containing query parameters. @return Map of query parameter names and values.
311 Returns the size of data in the buffer. Uses bufferCapacityUsed() if null.
312 Resolves a Path object using the file system resolver. @param f the Path object to resolve @return resolved Path object
313 Delegates msync operation to the default FileSystem. Throws UnsupportedOperationException if not supported.
314 Prints file system statistics using AbstractFileSystem.
315 Retrieves a Statistics object for the given URI. @param uri The URI to get statistics for. @return A Statistics object.
316 Creates a MultipartUploaderBuilder. Throws an UnsupportedOperationException.
317 Retrieves an AllocatorPerContext for a given context name. @param contextCfgItemName Context configuration item name. @return AllocatorPerContext instance.
318 Returns the current cached write position. @return The current write position as a long.
319 Flushes the output stream to the file system.
320 Returns a collection of trimmed strings from a comma/newline separated string. @param str The input string. @return Collection of trimmed strings.
321 Constructs a LoggingStateChangeListener using the default logger.
322 Constructs a ServiceStateException with a message. Uses default exit code if cause is null.
323 Constructs ServiceStateException with exit code, message, and cause. @param exitCode service exit code @param message exception message @param cause original throwable cause
324 Converts a Throwable to a RuntimeException, using text for message. Returns fault if RuntimeException, otherwise creates ServiceStateException.
325 Converts a Throwable to a RuntimeException, ServiceStateException if needed. @param fault The Throwable to convert. @return A RuntimeException.
326 Constructs a ServiceStateModel with a name and initial NOTINITED state. @param name The name of the service state.
327 Checks if a state transition is valid based on the statemap. @param current Current state. @param proposed Proposed state. @return True if transition is valid, false otherwise.
328 Returns a string representation of the ServiceStateModel.
329 Default constructor, initializes with a null delegate.
330 Handles a signal by incrementing count, logging, and notifying handler. @param s The signal that was received.
331 Finds an IrqHandler by signal name. @param signalName Name of the interrupt signal. @return Matching IrqHandler or null if not found.
332 Constructs a ServiceLaunchException with an exit code and cause. @param exitCode exit status code @param cause underlying Throwable cause
333 Constructs a ServiceLaunchException with exit code and message. @param exitCode The exit status code. @param message The error message.
334 Constructs ServiceLaunchException with exit code, format string, and optional cause. @param exitCode the exit status code @param format format string for error message
335 Constructs ServiceLaunchException with exit code, cause, & formatted message. @param exitCode Exit status code. @param cause Underlying cause of the exception. @param format Format string. @param args Arguments for formatting.
336 Shuts down the managed service gracefully.
337 Constructs a ServiceLauncher with the given service class name. @param serviceClassName Class name of the service to launch.
338 Records an exception and its exit code for service management. @param exitException Exception with exit code to record.
339 Initializes command options by creating and configuring them.
340 Loads configuration classes and creates instances. @return Number of successfully loaded configuration classes.
341 Registers a global ServiceStateChangeListener. Adds the listener to the global listener list.
342 Unregisters a global service state change listener. @param l The listener to unregister. Returns true if removed.
343 Resets the list of global service state change listeners.
344 Notifies registered listeners about the service's state. Handles exceptions during notification.
345 Initializes the service, overriding config if necessary. @param conf The configuration object to use for initialization.
346 Adds a service if it's a Service instance. @param object Object to check and potentially add. @return True if added, false otherwise.
347 Stops a service quietly, logs warnings on failure. @param log Logger instance @param service Service to stop @return Exception if failed, null otherwise
348 Stops a service quietly, logging warnings on failure. @param log Logger instance for error reporting. @param service Service to stop. Returns exception if failed.
349 Checks if an InputStream can read fully using pread. @param in InputStream to check for pread capability. @return True if readable, false otherwise.
350 Checks if DynamicWrappedIO is loaded. Delegates to the singleton instance's loaded() method.
351 Converts an object to a string representation. @param instance Object to convert to a string.
352 Converts a FunctionRaisingIOE to an unchecked Function. @param fun Function that may raise IOE. @return An unchecked Function.
353 Serializes instance to JSON, then deserializes it back. @param instance Object to serialize and deserialize. @return Deserialized object of the same type.
354 Parses byte array as JSON string into an object. @param bytes byte array to parse as JSON @return Object of the defined class type @throws IOException
355 Creates a new UTF8 object by copying data from another. @param utf8 The UTF8 object to copy from.
356 Writes a string to a DataOutput as UTF-8, truncating if too long. @param out Output stream to write to. @param s String to encode. @return Length of the written string.
357 Skips a specified number of bytes from the input stream. @param in DataInput stream to skip from.
358 Seeks to a specific position in the file. @param n The offset in the file to seek to.
359 Gets a Writable object at the specified offset. @param n Offset to retrieve the Writable from. @param value Writable to store the result in. @return Writable object at the given offset.
360 Constructs an OutputBuffer using a default buffer.
361 Returns the internal byte array containing the buffer's data.
362 Returns the length of the internal buffer.
363 Resets the internal buffer to its initial state.
364 Compares two objects as WritableComparable. Casts objects to WritableComparable and uses their compareTo.
365 Compares two byte array segments. @param b1 First byte array. @param s1 Start index in first array. @param l1 Length of first segment. @param b2 Second byte array. @param s2 Start index in second array. @param l2 Length of second segment. @return Comparison result (-1, 0, or 1).
366 Calculates a hash code for a byte array segment. @param bytes byte array @param length number of bytes to hash @return hash code
367 Reads a float from a byte array, starting at the given index.
368 Reads a long from a byte array, starting at the given index.
369 Reads a variable-length integer from a byte array. @param bytes byte array to read from @param start start index in the byte array @return int value read from the byte array
370 Constructs a BytesWritable with the given bytes. @param bytes The byte array to wrap.
371 Returns the underlying byte array. Deprecated, use getBytes().
372 Returns the size of the byte array (deprecated, use getLength()).
373 Sets the maximum capacity of the byte array. Resizes the array if the new capacity is smaller.
374 Returns the number of ByteBuffers in the pool (direct or regular). @param direct if true, returns direct buffers size; otherwise, buffers.
375 Submits a readahead request or returns the last one. @param identifier Request identifier. @param fd File descriptor. @param curPos Current position.
376 Appends a key-value pair to the SequenceFile, value is null.
377 Advances to the next key/value pair. @param key The key for the next pair. @return True if a next pair exists, false otherwise.
378 Returns the key associated with the current record. @return The key as a long value.
379 Checks if the given path has the desired access. @param path The path to check. @param desiredAccess The desired access right. @return True if access is granted, false otherwise.
380 Checks if native code is loaded and available. Returns true if both conditions are met, false otherwise.
381 Checks if native code is available. Returns true if native code is loaded and nativeLoaded is true.
382 Checks if the native code is available. Returns false if architecture is Sparc.
383 Unmaps a MappedByteBuffer. Uses CleanerUtil if supported, logs otherwise.
384 Frees a ByteBuffer, using unmapping if supported. Logs if failure.
385 Writes data from input to the buffer, expanding if needed. @param in Input stream to read from. @param length Number of bytes to write.
386 Constructs an EnumSetWritable with a given EnumSet and element type. @param value The EnumSet to wrap. @param elementType Type of elements in the EnumSet.
387 Constructs a DataInputBuffer using a default internal buffer.
388 Resets the buffer with new input data, starting from offset 0, for specified length.
389 Resets the buffer with new data from input array. @param input byte array containing new data @param start start position in the input array @param length length of data to be used
390 Returns the current position within the buffer.
391 Returns the length of the underlying data buffer.
392 Initializes ECSchema with options. @param allOptions Map of schema options. Throws IllegalArgumentException if invalid.
393 Constructs an ECSchema with codec name and data/parity units. @param codecName Codec name. @param numDataUnits Number of data units. @param numParityUnits Number of parity units.
394 Returns the required number of data blocks based on the schema.
395 Returns the required number of parity blocks based on the schema.
396 Retrieves a RawErasureCoderFactory by coder name. @param codecName Codec name. @param coderName Name of the coder to retrieve. @return RawErasureCoderFactory or null if not found.
397 Creates a new ECBlockGroup with the given data and parity blocks. @param dataBlocks Data blocks for the group. @param parityBlocks Parity blocks for the group.
398 Counts the number of erased data and parity blocks. Returns the total count of erased blocks.
399 Counts the number of erased blocks in the input array. @param inputBlocks Array of ECBlocks to check for erasure. @return Number of erased blocks.
400 Converts an array of ECChunks to an array of ByteBuffers. @param chunks Array of ECChunk objects to convert. @return Array of ByteBuffers representing the chunk data.
401 Retrieves erased blocks from a block group for decoding. @param blockGroup ECBlockGroup containing erased blocks @return Array of ECBlock representing erased blocks
402 Combines data and parity blocks from a block group into an array.
403 Adds two elements in the Galois field. @param x First element. @param y Second element. @return The sum of x and y.
404 Multiplies two field elements using a precomputed table. @param x First element. @param y Second element. @return The product of x and y within the Galois field.
405 Divides two elements in the Galois field using a precomputed table. @param x The numerator. @param y The denominator. @return The quotient of x divided by y.
406 Calculates x raised to the power of n in the Galois field. @param x The base element. @param n The exponent.
407 Prints the first 16 bytes of an ECChunk as a hex string. @param chunk ECChunk to dump; prints "<EMPTY>" if null.
408 Checks if input changes are allowed based on coder options.
409 Checks if input changes are allowed based on coder options.
410 Checks if verbose output is enabled. @return True if verbose output is allowed, false otherwise.
411 Checks if verbose output is enabled. @return True if verbose output is allowed, false otherwise.
412 Resets a buffer to a specified length using an empty chunk. @param buffer The buffer to reset. @param len The length to reset the buffer to. @return The reset buffer.
413 Resets a portion of the buffer with an empty byte array. @param buffer target byte array @param offset start index @param len number of bytes to reset @return the modified buffer
414 Converts ByteBuffer arrays to ByteArrayEncodingState. Creates a ByteArrayEncodingState with new input/output buffers.
415 Creates a ByteBufferEncodingState with direct ByteBuffers. @return ByteBufferEncodingState with cloned direct buffers.
416 Converts the state to a ByteBufferDecodingState with direct buffers. @return ByteBufferDecodingState with new direct byte buffers.
417 Creates a ByteArrayDecodingState from current buffers and offsets. @return New ByteArrayDecodingState object.
418 Generates a Cauchy matrix for Reed-Solomon encoding. @param a Matrix to populate. @param m Matrix size. @param k Number of rows.
419 Computes the inverse of a matrix in GF(2^8). @param inMatrix Input matrix to be inverted. @param outMatrix Output matrix (inverse). @param n Matrix dimension (n x n).
420 Encodes data using Reed-Solomon principles. @param gfTables Galois field multiplication table.
421 Encodes data using Reed-Solomon principles. @param gfTables Galois field multiplication table. @param inputs Input ByteBuffers to encode. @param outputs Output ByteBuffers to store encoded data.
422 Returns the GaloisField instance for given size and polynomial. @param fieldSize Size of the field. @param primitivePolynomial Primitive polynomial.
423 Solves a Vandermonde system. @param x Input array of integers. @param y Input/output array of integers.
424 Creates an ECBlock with default values (not parity, not erased).
425 Updates the reported byte count and processed byte count. @param count number of bytes read
426 Reads a single byte from the input stream. @param inStream the input stream to read from @return the byte read, or -1 if EOF
427 Creates Huffman decoding tables for BZip2 data. @param alphaSize, nGroups parameters for table creation.
428 Performs a quicksort on a data block using a stack. @param dataShadow Data structure containing sorting info. @param loSt Starting index of the sort range. @param hiSt Ending index of the sort range. @param dSt Offset value for comparisons.
429 Returns the number of bytes written during decompression. Calls getBytesWritten(stream) to retrieve the value.
430 Returns the number of bytes read from the input stream.
431 Returns the number of bytes remaining to be decompressed.
432 Resets the decompressor to its initial state.
433 Initializes the compressor with default compression parameters.
434 Returns the number of bytes written during compression. Uses the internal stream to retrieve the written bytes.
435 Returns the number of bytes read from the input stream. Uses internal stream to calculate the bytes read.
436 Constructs a CompressorStream with the given output stream. @param out The underlying OutputStream to write compressed data to.
437 Creates a SnappyDecompressor with the default direct buffer size.
438 Sets the input data for decompression. @param b input byte array @param off starting offset in the byte array @param len length of data to be decompressed
439 Checks if more input data is needed for decompression. Returns true if no more input is required, otherwise false.
440 Decompresses data from input buffer to output buffer. @param b output buffer, @param off offset, @param len length @return Number of decompressed bytes.
441 Constructs a SnappyCompressor with the default direct buffer size.
442 Compresses data from input buffer to output array. @param b output array, @param off offset, @param len length @return Compressed size, or 0 if no data is available.
443 Reinitializes the compressor using the provided configuration.
444 Initializes a DecompressorStream with the provided input stream.
445 Returns the number of bytes remaining to be decompressed.
446 Resets the decompressor to its initial state. Initializes internal buffers and resets offsets.
447 Returns the number of bytes written during compression. Throws NPE if stream is not initialized.
448 Returns the number of bytes read during compression. Uses `checkStream` to ensure stream is initialized.
449 Creates a new Lz4Decompressor with the default direct buffer size.
450 Sets the input data for decompression. @param b Input byte array. @param off Starting offset in the array. @param len Length of the data to be decompressed.
451 Checks if more input data is needed for decompression. Returns true if no input is available, otherwise false.
452 Decompresses data from the compressed buffer to the provided byte array. @param b destination byte array @param off offset within the array @param len number of bytes to decompress @return number of decompressed bytes
453 Constructs a Lz4Compressor with specified buffer size. @param directBufferSize Size of the direct buffer for compression.
454 Compresses data into a byte array. @param b buffer to write compressed data @param off offset in the buffer @param len number of bytes to compress @return number of compressed bytes written
455 Reinitializes the compressor with a new configuration. Resets the compressor's state using the reset() method.
456 Gets a CompressionCodec by name or class name. @param codecName Codec name or class name. @return CompressionCodec instance or null if not found.
457 Gets the number of leased compressors for a codec. @param codec The compression codec. @return The number of leased compressors.
458 Gets the number of leased decompressors for a codec. @param codec The compression codec. @return The leased decompressors count.
459 Returns the Zlib compressor class based on native Zlib availability. @param conf Hadoop configuration. @return Compressor class (ZlibCompressor or BuiltInZlibDeflater).
460 Returns the Decompressor class based on native Zlib availability. @param conf Hadoop configuration object. @return Decompressor class (ZlibDecompressor or BuiltInZlibInflater)
461 Loads native Zlib if available, logs success/failure.
462 Reinitializes the compressor with a new configuration. @param conf Hadoop configuration object.
463 Initializes a ZlibCompressor with provided compression settings. @param level Compression level. @param strategy Compression strategy. @param header Compression header. @param directBufferSize Direct buffer size.
464 Returns the number of bytes written during compression. Uses the internal stream to retrieve the written bytes.
465 Returns the number of bytes read from the input stream. Uses the internal stream to retrieve the byte count.
466 Creates a ZlibDecompressor with the given header and buffer size. @param header Compression header containing window bits. @param directBufferSize Size of direct buffers for decompression.
467 Returns the number of bytes written during decompression. Uses the internal stream to get the written bytes.
468 Returns the number of bytes read from the input stream.
469 Returns the number of bytes remaining to be decompressed. Uses stream to calculate remaining bytes.
470 Resets the decompressor to its initial state.
471 Processes GZIP trailer data: CRC and size verification. Uses readUIntLE to read trailer data and compares values.
472 Writes an integer to the output stream as a variable-length long.
473 Reads a variable-length long from the input stream. Uses VInt encoding; returns the value as a long.
474 Retrieves a buffer of specified length, direct or heap. @param direct True for direct buffer, false for heap. @param length Desired buffer length. @return ByteBuffer of the requested size.
475 Adds a cleared ByteBuffer to the pool, indexed by capacity/time. @param buffer The ByteBuffer to add to the pool.
476 Returns the character code point at the given position. @param position Index of the character to retrieve. @return The character code point or -1 if out of bounds.
477 Sets the byte representation of the text using UTF-8 encoding. @param string The string to encode.
478 Copies UTF-8 bytes to the internal buffer. @param utf8 source byte array @param start starting index in source array @param len number of bytes to copy
479 Appends UTF-8 encoded text to the byte array. @param utf8 the byte array to append @param start starting index in the byte array @param len number of bytes to append
480 Reads a fixed-length byte sequence from DataInput. @param in the input stream @param len the number of bytes to read
481 Decodes a byte array using UTF-8, replacing invalid chars. @param utf8 Byte array containing UTF-8 encoded data @return Decoded String
482 Decodes a byte array as UTF-8, replacing invalid chars if replace is true. @param utf8 byte array to decode @param start start index in the byte array @param length length of the byte array to decode @param replace boolean flag to replace invalid chars @return Decoded String
483 Validates a UTF-8 byte array for correctness. @param utf8 byte array to validate
484 Adds a class to the map, assigning a unique byte ID. Throws exception if max class limit is exceeded.
485 Initializes the AbstractMapWritable with default class-ID mappings.
486 Creates a FileSystemOption for SequenceFile writing. @param fs The FileSystem object to use. @return A FileSystemOption object.
487 Constructs a Key with a byte array and weight. @param value The byte array representing the key. @param weight The weight associated with the key.
488 Cleans up resources; skips if input preservation is enabled.
489 Converts a List to an array of type T. @param list The list to convert. @return An array containing the list elements.
490 Constructs an InputBuffer with a new internal buffer.
491 Resets the buffer with new data from the input array. @param input The byte array to use. @param length The number of bytes to use.
492 Resets the buffer with new data. @param input Data to use. @param start Offset. @param length Length.
493 Returns the current position within the input buffer.
494 Returns the current length of the input buffer.
495 Reads an MD5Hash from a DataInput stream. @param in DataInput to read from; throws IOException. @return MD5Hash object created from the input.
496 Computes MD5 hash of an InputStream. @param in Input stream to hash. @return MD5Hash object representing the hash. @throws IOException if an I/O error occurs.
497 Computes MD5 hash of byte array segment. @param data Data to hash. @param start Start index in data. @param len Length of data to hash. @return MD5Hash object representing the hash.
498 Computes MD5 hash of data array segments. @param dataArr Array of byte arrays. @param start Start index. @param len Length of data to hash. @return MD5Hash object representing the computed hash.
499 Returns the hash code, derived from the first quarter of the digest.
500 Sets the MD5 digest from a hex string. @param hex Hexadecimal representation of the digest. @throws IllegalArgumentException if the string length is incorrect.
501 Instantiates a Protobuf message from a DataInput. @param protoClass Protobuf class to instantiate. @param dataIn Input stream containing the message. @return Protobuf Message object.
502 Forces write-outs for a file or directory to storage. @param fileToSync file or directory to synchronize @throws IOException if file doesn't exist or an error occurs
503 Constructs a BooleanWritable with the given boolean value. @param value the boolean value to initialize with
504 Creates a RemoteExceptionDependentRetry with default and exception policies. @param defaultPolicy Default retry policy. @param exceptionToPolicyMap Exception to policy map.
505 Checks if the queue is empty after a specified time. @param time Time in milliseconds. Returns true if empty.
506 Returns the current monotonic time in milliseconds.
507 Creates a RetryPolicy excluding Remote and SASL exceptions. @param defaultPolicy Default retry policy. @param exceptionToPolicyMap Maps exceptions to specific policies.
508 Gets the ConnectionId for the first proxy object.
509 Parses a comma-separated string into a MultipleLinearRandomRetry. @param s String containing comma-separated retry parameters. @return MultipleLinearRandomRetry object or null if parsing fails.
510 Creates an ExceptionDependentRetry with default & exception policies. @param defaultPolicy Default retry policy. @param exceptionToPolicyMap Exception to retry policy map.
511 Creates an IOException from a list. Returns null if empty. @param exceptions list of IOException instances to aggregate
512 Returns the number of blocks managed by this Reader.
513 Gets the default compression algorithm name. Uses dataIndex to retrieve the name.
514 Reads a variable-length integer from input. Throws exception if value exceeds Integer bounds.
515 Writes a variable-length int to the DataOutput. @param out Output stream to write to.
516 Checks if the file metadata is sorted. Returns true if a string comparator is set.
517 Returns the number of entries in the TFile. @return The entry count, a long value.
518 Closes the underlying reader, releasing any associated resources.
519 Returns the comparator name from the TFile metadata. @return String representation of the comparator.
520 Creates a ByteArray from a BytesWritable. @param other The BytesWritable to copy from.
521 Creates a ByteArray instance wrapping the entire byte array. @param buffer The byte array to wrap.
522 Finds the index of the BlockRegion containing the given offset. @param offset The offset to search for. @return BlockRegion index or -1 if offset is out of bounds.
523 Finds the index of the first entry >= key. @param key the key to search for @return index of first entry >= key, or -1 if not found
524 Finds the index of the last element greater than key. @param key The key to compare against.
525 Compares this Location with another based on block/record indices.
526 Copies the key to the provided buffer. @param buf Destination buffer @return Number of bytes copied (key length)
527 Reads the value into the provided buffer. @param buf buffer to read value into, @param offset start offset @return number of bytes read, or throws IndexOutOfBoundsException
528 Returns the raw size of the block region in bytes.
529 Returns the compressed size of the data block. @return The compressed size as a long value.
530 Returns the starting offset of the current block region.
531 Creates an OutputStream, wrapping if needed. @param out The DataOutput instance to wrap. @return An OutputStream instance.
532 Compares two byte arrays lexicographically. @param buffer1 First byte array, offset, length. @param buffer2 Second byte array, offset, length.
533 Constructs a DataOutputBuffer with a default internal buffer.
534 Returns the internal byte array containing buffered data.
535 Delegates to the internal buffer to get its length.
536 Writes an integer to the buffer at the specified offset. @param v integer value to write @param offset starting offset in the buffer
537 Calculates the distance between two nodes in the network. @param node1 The first node. @param node2 The second node. @return The distance between the nodes.
538 Checks if a node's location falls within the specified scope. @param node The node to check. @param scope The scope string to check against.
539 Splits the node's path into components using the path separator. @param node The node whose path is to be split. @return An array of path components.
540 Returns the full path of the node.
541 Removes a node from the topology. @param node The node to remove. Throws exception if inner node.
542 Gets datanodes in a rack. @param loc Rack location string. @return List of datanodes in the rack.
543 Retrieves a node by its location string. @param loc The location string of the node. @return The node object or null if not found.
544 Returns a string representation of the network topology.
545 Checks if two nodes are on the same rack. @param node1 The first node. @param node2 The second node. @return True if on same rack, false otherwise.
546 Chooses a random node based on exclusions and availability. @param parentNode Parent node for leaf retrieval. @param excludedScopeNode Node to exclude from selection. @param excludedNodes Nodes to exclude from selection. @param totalInScopeNodes Total nodes in scope. @param availableNodes Number of available nodes. @return A random node meeting criteria, or null if none found.
547 Calculates network distance weight between nodes. @param reader Source node. @param node Destination node. @return Weight representing network distance.
548 Adds a node to a rack, updating rack and empty rack counts. @param node The node to add.
549 Transfers data to a file channel. @param fileCh FileChannel to transfer to. @param position Starting position in the channel. @param count Number of bytes to transfer.
550 Normalizes a collection of hostnames to their IP addresses. @param names Collection of hostnames to normalize. @return List of normalized hostnames.
551 Creates a string containing host and port details. @param destHost Destination hostname. @param destPort Destination port. @param localHost Local hostname. @return String with formatted host and port information.
552 Resolves IP addresses within a subnet. @param subnet Subnet string (e.g., "192.168.1.0/24") @param returnSubinterfaces Whether to include subinterfaces @return List of InetAddress objects matching the subnet.
553 Acquires a set of free socket ports. @param numOfPorts Number of ports to acquire (1-25). @return Set of free ports, or throws IllegalStateException.
554 Default constructor for RawScriptBasedMapping.
555 Initializes the mapping with a raw DNS to switch mapping. @param rawMapping The raw DNS to switch mapping to use.
556 Constructs a NodeBase from a path string, normalizing it. @param path The path string used to initialize the node.
557 Constructs a NodeBase with a normalized location. @param name Node name. @param location Location string to be normalized.
558 Constructs a NodeBase with a normalized location. @param name Node name, @param location Location, @param parent Parent node, @param level Node level
559 Sends a callback for a given file descriptor. @param caller Caller identifier. @param entries TreeMap of entries. @param fdSet Set of file descriptors. @param fd File descriptor to process. @return True if callback closed the socket.
560 Checks if the socket is open, delegating to the reference count.
561 Closes the DomainSocket, releasing resources and closing the FD. Handles potential interruptions during the closing process.
562 Removes idle selectors from the pool based on a timeout. Trims selectors that haven't been active within IDLE_TIMEOUT.
563 Retrieves dependencies for a given name, caching results. @param name The name to resolve dependencies for. @return List of dependencies or an empty list if not found.
564 Sets the timeout value for the input stream in milliseconds.
565 Gets IP addresses for a network interface. @param strInterface Interface name. @param returnSubinterfaces Whether to include subinterfaces. @return IP address array.
566 Gets a list of InetAddresses for a network interface. @param strInterface Interface name. @param returnSubinterfaces Whether to include subinterfaces.
567 Recursively finds the node group for a given location. @param loc The network location string to search for.
568 Generates a string representation of the DNS to switch mapping. Returns "No topology information" if no mapping exists.
569 Checks if a mapping represents a single switch configuration. @param mapping The DNSToSwitchMapping to evaluate. @return True if the mapping is a single switch; otherwise false.
570 Gets current stats for a recorder. @param recorderName Recorder name. @param idx Index of the statistics. @return SummaryStatistics object or null if not found.
571 Prints generic command usage information to the specified stream. @param out PrintStream to write the usage information to.
572 Checks if a class represents a Log4j logger. @param clazz The class to check. @return True if it's a Log4j logger, false otherwise.
573 Constructs a LogThrottlingHelper with default Timer. @param minLogPeriodMs Minimum logging period in milliseconds. @param primaryRecorderName Name of the primary recorder.
574 Records values for a specified recorder, managing logging actions. @param recorderName Identifier for the recorder. @param currentTimeMs Current timestamp in milliseconds. @param values Values to record. @return LogAction object.
575 Checks if a string needs quoting based on special chars. @param str String to check; returns false if null. @return true if quoting is needed, false otherwise.
576 Quotes HTML special characters in a string. @param item String to be quoted, returns null if null.
577 Adds a Jersey resource package to the web app context. @param packageName Package name for Jersey resources. @param pathSpec Servlet path specifier.
578 Adds a servlet to the web application context. @param name Servlet name. @param pathSpec URL path specification. @param clazz Servlet class.
579 Adds an internal servlet to the context, no auth required. @param name Servlet name. @param pathSpec URL path. @param clazz Servlet class.
580 Defines a filter within the servlet context. @param ctx Servlet context handler @param name Filter name @param classname Filter class name @param parameters Filter parameters @param urls URL patterns for the filter
581 Binds a listener to a port, retrying with incremented port if failed. @param listener ServerConnector to bind @param port Port to bind to, increments on failure
582 Returns the XFrameOption enum for a given string value. @param value String value to match; throws exception if null.
583 Initializes a file monitoring task with paths and actions. @param filePaths list of file paths to monitor @param onFileChange action to execute on file change @param onChangeFailure action to execute on monitoring failure
584 Gets a non-negative integer property value, or default if invalid. @param key Property key. @param defaultValue Default value if key is missing or negative.
585 Throws exception if specified property is missing from configuration. @param key The property key to check for existence.
586 Throws MetricsException if an error is detected in the output stream. @param message Error message to include in the exception.
587 Throws a MetricsException if ignoreError is false. @param message Error message to include in the exception.
588 Gets the roll interval in milliseconds from properties. Parses interval string, handles units, and validates value.
589 Throws a MetricsException if ignoreError is false. @param message Exception message. @param t Underlying exception.
590 Updates a metric record, adding metrics and optionally tags. @param mr The MetricsRecord to update. @param includingTags Whether to include tags in the record. @return The updated Record object.
591 Serializes a string to the buffer, prepending its length. @param s The string to serialize.
592 Emits a metric to the Ganglia monitoring system. @param groupName Metric group name. @param name Metric name. @param type Metric type. @param value Metric value.
593 Emits a metric to Ganglia, handling null checks and logging. @param groupName Metric group name.
594 Dequeues an element from the queue. Waits if empty. @return The dequeued element. @throws InterruptedException if interrupted while waiting.
595 Creates a MetricsRecordImpl with provided info, timestamp, tags, and metrics. @param info MetricsInfo object @param timestamp Timestamp of the metrics record @param tags List of metrics tags @param metrics Iterable of AbstractMetric objects
596 Adds RPC enqueue time to the metric and quantile estimators. @param enQTime The RPC enqueue time to record.
597 Records RPC queue time. @param qTime The queue processing time in milliseconds.
598 Records RPC processing time. Adds to the metric and quantile estimator. @param processingTime RPC processing time in milliseconds.
599 Adds write file latency to quantile estimators. @param writeLatency The latency value to add.
600 Adds read latency to file read quantile estimators. @param readLatency The latency value to add.
601 Initializes the metrics system with a given prefix. @param prefix Prefix for metrics names. @return MetricsSystem instance.
602 Returns the singleton instance of the MetricsSystem.
603 Shuts down the metrics system, clearing names if last instance.
604 Records metrics and tags to a builder. @param builder MetricsRecordBuilder to populate @param all if true, records all metrics, otherwise only changes.
605 Calculates rolling averages for metrics with sufficient samples. @param minSamples Minimum number of samples for an average to be included. @return Map of metric names to their rolling averages.
606 Returns the number of processing time samples. @return Number of processing time samples recorded.
607 Rolls over rolling averages for each metric. Updates dequeues with latest sum/count from snapshots.
608 Caches metric info with name and description. @param name metric name @param description metric description @return MetricsInfo object
609 Creates a MetricsTag by caching info and value. @param info MetricsInfo object @param value tag value @return MetricsTag object
610 Adds samples to the statistic and notifies observers. @param numSamples Number of samples to add. @param sum Sum of the samples.
611 Adds a single sample to the statistic. @param x The value of the sample to add. @return this SampleStat object
612 Returns the mean processing time. Uses last recorded statistics.
613 Returns the current minimum value tracked by the class.
614 Returns the maximum value observed in the sample data.
615 Resets the minimum and maximum values to their default.
616 Calculates the next TGT renewal time based on end time & retry policy. @param tgtEndTime TGT end time. @param now Current time. @param rp Retry policy.
617 Calculates the standard deviation based on the variance.
618 Compresses sample data by merging adjacent items based on error.
619 Queries the sample data for a value at the given quantile. @param quantile quantile value between 0 and 1 @return value at the specified quantile
620 Inserts a batch of samples into the `samples` list, sorted by value. Resets `bufferCount` after processing.
621 Retrieves a list of all netgroup names from the cache. Returns a list containing unique netgroup names.
622 Checks if a group is present in the cached netgroups. @param group The group name to check. @return True if the group is cached, false otherwise.
623 Returns server properties for a given client address and port. @param clientAddress Client's address. @param ingressPort Ingress port number. @return A map of server properties.
624 Gets client SASL properties based on server address. @param serverAddress Server address. @param ingressPort Ingress port number. @return Map of client SASL properties.
625 Extracts the hostname from a Kerberos principal name. @param principalName The Kerberos principal name. @return The hostname portion of the principal name.
626 Retrieves group names for a user, using cache and negative cache. @param user The user whose group memberships are being retrieved. @throws IOException If no groups are found or cache retrieval fails.
627 Refreshes the user-to-group mappings cache and negative cache.
628 Prints formatted string to output stream or System.out. @param format format string for printing @param args arguments for formatting
629 Updates a BiMap with user/group mappings from a shell command. @param map The BiMap to update. @param mapName Name of the map being updated. @param command Shell command to execute. @param regex Regex to split the command output. @param staticMapping Static mapping of IDs. @return True if the map was updated.
630 Generates command array to run a script. @param script The script file to execute. @return Array of strings representing the command.
631 Switches to the next bind user after an authentication failure. Uses next bind user from bindUsers and logs the switch.
632 Writes data to the output stream, potentially wrapping it with SASL. Uses saslClient/saslServer to wrap data if configured.
633 Closes the stream, releasing SASL resources and closing the wrapped stream.
634 Processes an HTTP interaction, enforcing CSRF protection. @param httpInteraction The HTTP interaction to process.
635 Parses group names and IDs, returning a set of resolved group names. @param groupNames Comma-separated list of group names. @param groupIDs Comma-separated list of group IDs. @return Set of resolved group names.
636 Creates a SecretKey from a byte array. @param key The byte array representing the secret key.
637 Removes a token from storage using its sequence number and bytes.
638 Resets the delegation token manager to its initial state.
639 Updates a delegation key in the key store. @param key The delegation key to update. @throws IOException if an I/O error occurs.
640 Removes a delegation key from storage. @param key The delegation key to remove.
641 Adds a delegation key. @param key The key to add; updates current key ID if necessary. @throws IOException if the SecretManager is already running.
642 Stores a delegation key and its associated master key. @param key The DelegationKey to store. @throws IOException if an I/O error occurs.
643 Sets the external delegation token secret manager. Stops old manager's threads and replaces with new one.
644 Retrieves and configures authentication properties. @param configPrefix Configuration prefix. @param filterConfig Filter configuration. @return Properties object with configured authentication.
645 Retrieves the UserGroupInformation from the thread local. @return UserGroupInformation object
646 Checks if request is a management operation. @param request HTTP request to check. @return True if request is a management operation.
647 Checks if the token is managed by a renewer. @return True if managed, false otherwise.
648 Renews the token using the provided configuration. @param conf Configuration object for renewal process. @return New expiration timestamp.
649 Cancels the token, using the renewer. @param conf Configuration object for cancellation.
650 Returns an input stream, wrapping it if SASL wrapping is enabled. @param in The input stream to wrap. @return Wrapped input stream.
651 Wraps the output stream with buffering and SASL wrapping if enabled. @param out The underlying output stream. @return Wrapped output stream.
652 Reads more data from the input stream, handling SASL tokens. Returns number of bytes read or -1 if EOF.
653 Closes the input stream and releases SASL resources. Releases resources and closes the underlying input stream.
654 Constructs AuthorizationException with a given cause. @param cause The underlying Throwable that caused the exception.
655 Checks if the user login was successful. Returns true if HadoopLoginContext is successful, otherwise true.
656 Sets the user's last login time. @param loginTime Timestamp of the user's last login.
657 Constructs a `UserGroupInformation` from a `Subject`, extracting the user. @param subject The `Subject` containing user principal information.
658 Returns the user's username. @return The user's username as a String.
659 Checks if the user has Kerberos credentials. Returns true if authentication method is Kerberos.
660 Returns the authentication method used by the user. @return AuthenticationMethod object
661 Returns the UserGroupInformation representing the real user.
662 Returns the user's short name.
663 Sets the authentication method for the user. @param authMethod The authentication method to set.
664 Initializes the trust manager with type, location, and password. @param type Trust manager type. @param location Truststore file location. @param password Truststore password.
665 Creates a new ReloadingX509KeystoreManager. @param type Keystore type. @param location Keystore location. @param storePassword Keystore password. @param keyPassword Key password.
666 Retrieves a resource URL by name from the Hadoop configuration. @param name Resource name to retrieve. @return URL object or null if not found.
667 Gets a configuration resource as an InputStream. @param name Resource name to retrieve. @return InputStream or null if not found/error.
668 Opens a configuration resource as a reader. @param name Resource name to open. @return Reader object or null if not found/error.
669 Creates an SSLEngine based on the configured mode and settings. @return SSLEngine instance configured for client or server mode.
670 Configures an HttpURLConnection with SSL/TLS settings. Sets SSLSocketFactory and hostname verifier if it's an HttpsURLConnection.
671 Constructs a Configured object with the given configuration. @param conf The Configuration object to use.
672 Handles executor timeout: logs warning and returns true if timed out. @param executor Executor object @param user User for whom groups are being fetched @return True if executor timed out, false otherwise.
673 Returns a string representation of the command, quoting arguments with spaces.
674 Reads an AuthMethod from a DataInput. @param in Input stream to read from. @return AuthMethod read from the stream.
675 Adds a user to the ACL if not a wildcard and not all allowed. @param user The user to add. Throws IllegalArgumentException if wildcard.
676 Adds a group to the ACL. Throws exception if wildcard. Caches group if not all allowed. @param group group name to add
677 Removes a user from the ACL, if not a wildcard or all allowed. @param user The user to remove.
678 Removes a group from the ACL, if not a wildcard or all allowed. @param group The group to remove.
679 Returns a comma-separated string of users. @return Comma-separated string of users in the list.
680 Returns a comma-separated string of group names. @return Comma-separated string of group names.
681 Checks if the ticket is an original Ticket Granting Ticket. @param ticket Kerberos ticket to check @return True if the ticket is an original TGT, false otherwise.
682 Retrieves server properties based on client IP address. @param clientAddress Client's InetAddress; returns default if null. @return Map of server properties.
683 Validates the codec cipher suite. Throws exception if not AES-CTR or SM4-CTR.
684 Returns the current stream position, adjusted for the output buffer.
685 Reads data from the underlying stream into a ByteBuffer. @param inBuffer ByteBuffer to fill with decrypted data. @return Number of bytes read.
686 Converts a string name to a CipherSuite object. @param name Cipher suite name to convert. @throws IllegalArgumentException if name is invalid.
687 Checks if the given version is supported. @param version The version to check. @return True if supported, false otherwise.
688 Generates a random integer with the specified number of bits. @param numBits The number of bits for the random integer (0-32)
689 Creates a KeyProviderCryptoExtension, handling various KeyProvider types. @param keyProvider The KeyProvider instance. @return A KeyProviderCryptoExtension object.
690 Gets the current key version for a given key name. @param name The name of the key. @return KeyVersion object or null if not found.
691 Generates a cryptographic key of specified size and algorithm. @param size Key size in bits. @param algorithm Key algorithm (e.g., "AES/256"). @return Encoded byte array representing the generated key.
692 Creates an EncryptedKeyVersion for decryption. @param keyName Encryption key name. @param encryptionKeyVersionName Version name.
693 Creates a KeyProviderDelegationTokenExtension with the given provider. @param keyProvider The key provider instance. @return KeyProviderDelegationTokenExtension object.
694 Closes the KMS client, shutting down the queue and destroying SSL factory.
695 Retrieves the ReadWriteLock for a given key name. @param keyName The name of the key. @return The ReadWriteLock associated with the key.
696 Appends a field to the context string, validating it first. @param field The field to append. @return The Builder instance for method chaining.
697 Appends a key-value pair to the context string. @param key The key to append. @param value The value to append. @return The Builder instance for chaining.
698 Appends key-value pair if key is absent, validates inputs. @param key The key to append. @param value The value to append. @return This builder instance.
699 Creates a success response with return code 0 and message "Success".
700 Converts a client ID byte array to a UUID string. @param clientId The client ID as a byte array. @return UUID string representation of the client ID.
701 Offers an element to the queue. @param e the element to offer @return true if added, false otherwise
702 Returns the number of calls currently in the queue.
703 Gets protocol interfaces, recursively including superinterfaces. @param protocol The protocol class. @return Array of protocol interfaces.
704 Gets the server address for a given proxy object. @param proxy The proxy object. @return InetSocketAddress representing the server address.
705 Returns the current monotonic time in nanoseconds.
706 Gets the remote user's UserGroupInformation from the current call. Returns null if no call is active.
707 Computes fingerprints for an array of methods. @param methods array of Method objects @return array of integer fingerprints
708 Dispatches refresh requests to registered handlers. @param identifier Identifier for the refresh request. @param args Arguments passed to the handler. @return Collection of RefreshResponse objects.
709 Constructs a RemoteException with class name and message. @param className Exception class name. @param msg Exception message.
710 Unwraps a remote exception of a specified type. @param lookupTypes Array of IOException subclasses to check. @return IOException instance or this if not found.
711 Unwraps the remote exception, returning an IOException.
712 Calculates the total cost based on processing details and weights. @param details ProcessingDetails object containing timing info. @return Total cost as a long value.
713 Returns the number of dropped connections. @return The count of dropped connections.
714 Returns the number of active connections. Uses connectionManager's size.
715 Adds an element to the queue at the specified priority. @param priority Priority level for the element. @param e element to add to the queue.
716 Adds an element to the queue at the given priority. @param priority The priority of the element to add. @param e The element to add to the queue. @return True if the element was added, false otherwise.
717 Adds exception classes for terse logging. @param exceptionClass Array of exception class objects.
718 Adds exception classes to suppressed logging exceptions. @param exceptionClass Array of exception classes to suppress.
719 Constructs an UnexpectedServerException with a message. @param message The error message for the exception.
720 Constructs an RpcServerException with the given error message. @param message The error message associated with the exception.
721 Constructs an RpcClientException with the given error message. @param message The error message associated with the exception.
722 Constructs an UnexpectedServerException with a message and cause. @param message Error message. @param cause Underlying exception.
723 Constructs an RpcServerException with a message and cause. @param message Error message. @param cause Underlying exception.
724 Constructs an RpcClientException with a message and cause. @param message Error message. @param cause Underlying exception.
725 Adds cost delta to call costs for a given identity. @param identity Object identifying the caller. @param costDelta The cost delta to add.
726 Computes priority level based on cost and user identity. @param cost RPC call cost. @param identity User identity. @return Priority level.
727 Converts a ServiceException to an IOException. @param se The ServiceException to convert. @return An IOException representing the remote exception.
728 Executes an IPC call and handles ServiceExceptions. @param call The IPC call to execute. @return The result of the IPC call.
729 Retrieves a fixed ByteString by key. @param key The key used to identify the ByteString.
730 Creates a ByteString from a byte array. Returns EMPTY if array is empty.
731 Sets the call ID and retry count. @param cid Call ID. @param rc Retry count.
732 Returns the address the listener is bound to.
733 Returns a set of auxiliary listener addresses. Returns empty set if no auxiliary listeners are configured.
734 Stops a client, removing it from the cache if no references remain. @param client The client to stop.
735 Checks if this CacheEntry equals another object. Delegates to the superclass's equals method.
736 Creates a ProtobufWrapperLegacy with the given message. @param message The message to wrap; must be an unshaded protobuf.
737 Sets response data for old version fatal errors. @param response Response buffer. @param call RPC call object. @param rv Writable result value. @param errorClass Error class name. @param error Error message.
738 Decrements request count; advances to next queue if count reaches zero.
739 Sets the exception for the call and marks it as complete. @param error The exception to set.
740 Sets the RPC response and marks the call as complete. @param rpcResponse The response received from the remote call.
741 Reads a byte from the stream, retrying on socket timeouts. Retries until a byte is read or a timeout is handled.
742 Reads data into a buffer, retrying on SocketTimeoutException. Retries reading until successful or timeout is exceeded.
743 Gets the remote IP address from the current call, or null.
744 Gets the remote port from the current call, or 0 if null.
745 Gets the established QOP if on auxiliary port, null otherwise.
746 Gets the priority level of the current RPC call. Returns 0 if no call is active.
747 Returns a JSON string of user connection counts. Uses {@link #getUserToConnectionsMap()} to populate.
748 Creates a MachineList with entries, using an InetAddressFactory. @param hostEntries Collection of host entries or IP ranges. @param addressFactory Factory for resolving hostnames to addresses.
749 Checks if an IP address or hostname is included in the list. @param ipAddress The IP address or hostname to check.
750 Constructs SysInfoLinux with file paths and jiffy length. @param jiffyLengthInMillis Jiffy length in milliseconds.
751 Reads /proc/meminfo to extract memory statistics. Avoids re-reading if already processed.
752 Returns the number of processors based on /proc/cpuinfo.
753 Returns the number of CPU cores detected on the system.
754 Gets the CPU frequency. Reads /proc/cpuinfo and returns the frequency.
755 Reads /proc/stat to update CPU time tracking. Parses the file, extracts CPU time metrics, and updates.
756 Returns the total bytes read from the network. Uses `readProcNetInfoFile` to update the value.
757 Returns the total number of bytes written over the network. Uses `readProcNetInfoFile` to update the value.
758 Reads disk stats from /proc/diskstats, calculates bytes read/written.
759 Retrieves the value associated with a key. @param k the key to search for @return the value or null if the key is not found
760 Removes the value associated with the given key. @param k the key to remove @return the removed value, or null if the key wasn't found
761 Removes and returns the element at the given index or null. @param index Index of the element to remove. @param key Key of the element to remove. @return The removed element or null if not found.
762 Sets optional secure attributes on the TransformerFactory. @param transformerFactory TransformerFactory to configure.
763 Converts a size string to a long value, handling binary prefixes. @param s the size string to convert @return the long value of the size @throws IllegalArgumentException if the string is invalid
764 Converts a long value to a human-readable string with unit. @param n value to convert @param unit unit symbol @param decimalPlaces decimal places for formatting
765 Formats a double as a percentage string with specified decimal places. @param fraction the fraction to format @param decimalPlaces number of decimal places @return formatted percentage string
766 Converts a byte array segment to a hex string. @param bytes byte array to convert @param start start index (inclusive) @param end end index (exclusive)
767 Limits a double to 2 decimal places. @param d the double to format @return formatted string representation
768 Terminates the JVM with an ExitException, logging and suppressing. @param ee The ExitException to handle and terminate with.
769 Halts the JVM based on HaltException status. @param he HaltException containing exit status and message.
770 Adds a shutdown hook with given priority and timeout. @param shutdownHook Hook to execute during shutdown. @param priority Hook priority. @param timeout Timeout for hook execution. @param unit Timeout unit.
771 Removes a shutdown hook. Throws IllegalStateException if shutdown is in progress. @param shutdownHook The hook to remove. @return True if the hook was removed, false otherwise.
772 Checks if a shutdown hook is already registered. @param shutdownHook The hook to check for. @return True if the hook is registered, false otherwise.
773 Gets an input stream for the resource using current thread's CL. @param resourceName Name of the resource to load. @throws IOException if resource cannot be read or CL is null.
774 Constructs a LineReader with the given input stream. Uses the default buffer size. @param in The input stream to read from.
775 Executes the command if the interval has passed. Checks timeout and resets exit code before execution.
776 Creates a daemon ThreadFactory with a given prefix. @param prefix Prefix for the thread names.
777 Doubles capacity if size exceeds threshold and capacity limit.
778 Creates an ArrayList from elements provided by an iterator. @param <E> The type of elements in the iterator. @param elements Iterator providing elements for the list. @return An ArrayList containing elements from the iterator.
779 Adds all elements from an Iterable to a Collection. @param addTo Collection to add elements to. @param elementsToAdd Iterable containing elements to add. @return True if the collection was modified.
780 Creates a new ArrayList with specified initial capacity. @param initialArraySize initial capacity of the ArrayList
781 Writes a JSON representation of an object as bytes to an output stream. @param instance The object to serialize. @param dataOutputStream Output stream to write to.
782 Initializes an OperationDuration object, setting start and finish times.
783 Records the finish time of an operation using the current time.
784 Returns the duration as a Duration object, in milliseconds.
785 Returns the duration as a human-readable string (mm:ss.SSS).
786 Calculates a monomial based on lengthBytes and modulus. @param lengthBytes Length of data in bytes. @param mod Galois field modulus. @return Monomial value.
787 Combines two CRC values using a monomial and modulus. @param crcA First CRC value. @param crcB Second CRC value. @param monomial Monomial value. @param mod Modulus value.
788 Converts an integer to a 4-byte array. @param value integer to convert @return byte array representation of the integer
789 Converts a 4-byte array to a CRC string. @param bytes byte array containing CRC value @return CRC value as a string prefixed with "0x"
790 Converts a byte array to a multi-CRC string representation. @param bytes byte array to convert @throws IOException if byte array length is not divisible by 4
791 Extracts JAR entries matching a pattern to a directory. @param inputStream JAR input stream @param toDir directory to extract files to @param unpackRegex regex for filtering entries
792 Extracts JAR entries matching a regex to a directory. @param jarFile JAR file to extract from @param toDir destination directory @param unpackRegex regex for entries to extract
793 Finds the n-th occurrence of a byte within a byte range. @param utf byte array, start index, length, byte to find, occurrence number @return Index of the byte or -1 if not found.
794 Adds a key-value pair to the map. @param key The key for the new entry. @param value The value to be weakly referenced. @return The value associated with the key.
795 Removes a key-value pair and returns the value, or null.
796 Checks if the map contains a key. @param key The key to check. @return True if the key exists, false otherwise.
797 Creates a new entry with the given key, using the provided factory. @param key Key for the new entry. @return The resolved value for the new entry.
798 Removes entries with null values and returns the count. Records lost references using {@link #noteLost(Object)}.
799 Creates a snapshot of the current suppressed statistics. Returns a new `SuppressedSnapshot` object.
800 Formats a time difference (in milliseconds) to a string. @param finishTime End time in milliseconds. @param startTime Start time in milliseconds.
801 Parses a string into a map of key-value pairs split by "= ". @param str Input string to parse. @return Map of key-value pairs.
802 Splits a string by a separator, handling escape characters. @param str String to split. @param escapeChar Escape character. @param separator Separator character. @return Array of strings.
803 Escapes characters in a string. @param str string to escape @param escapeChar character to use for escaping @param charsToEscape chars to escape @return escaped string
804 Unescapes a string, removing escape sequences. @param str input string to unescape @param escapeChar escape character @param charsToEscape chars to be escaped @return unescaped string
805 Retrieves the version string. Returns "Unknown" if not found.
806 Gets the revision property. Returns "Unknown" if not found.
807 Retrieves the branch name from the common version info.
808 Gets the build date from common version info. Returns "Unknown" if not found.
809 Returns the user who last modified the build. @return The user string or "Unknown" if not set.
810 Retrieves the URL from the common version info. Returns "Unknown" if the URL is not found.
811 Gets the source checksum property. Returns "Unknown" if not found.
812 Returns the protocol buffer version. Returns "Unknown" if not found.
813 Retrieves the compile platform. Delegates to COMMON_VERSION_INFO.
814 Constructs a FilteringRemoteIterator. @param source The iterator to filter. @param filter Filter function (raises IOE).
815 Constructs a HaltableRemoteIterator, wrapping a RemoteIterator. @param source The iterator to wrap. @param continueWork Callable to determine if iteration continues.
816 Checks if there's a next element available. Uses fetch() to retrieve an element if needed. @throws IOException if an I/O error occurs during fetching.
817 Creates a MaybeClose instance with automatic closing enabled. @param o Object to potentially close.
818 Submits a Callable to an executor and wraps it in a CompletableFuture. @param executor Executor to run the Callable. @param call Callable task to be executed. @return CompletableFuture that will hold the Callable's result.
819 Constructs a LazyAutoCloseableReference with a constructor. @param constructor Callable to create the referenced object.
820 Creates a LazyAtomicReference with the given supplier. @param supplier Supplier that provides the value.
821 Evaluates the resource, initializing it if needed. Checks if closed; throws IllegalStateException if true.
822 Applies the lazy value, evaluating it if needed. @return The evaluated value of type T. @throws IOException if an I/O error occurs.
823 Executes a CallableRaisingIOE and converts IOExceptions to unchecked.
824 Converts a CallableRaisingIOE to a Supplier that handles IOExceptions. @param call Callable that may raise an IOException @return Supplier that executes the callable.
825 Creates a Builder for processing items from a RemoteIterator. @param items Iterator of items to process. @return Builder instance for configuring task execution.
826 Throws the first exception, suppressing others if types differ. @param exceptions Collection of exceptions to be thrown. @throws E The first exception in the collection.
827 Constructs a Builder with a RemoteIterator from the provided Iterable. @param items Iterable of items for processing.
828 Suppresses exceptions during task execution. Returns the Builder instance for chaining.
829 Extracts and re-throws the inner IOException from an ExecutionException.
830 Extracts and re-throws the inner IOException from a CompletionException.
831 Configures an object if it's JobConfigurable and JobConf. @param theObject Object to configure. @param conf Configuration object.
832 Retrieves a class by name. @param name Class name to retrieve. @return Class object or throws ClassNotFoundException.
833 Prints thread information to a stream, including state and stack. @param stream Output stream for the thread dump. @param title Descriptive title for the thread dump.
834 Constructs a Configuration object. @param loadDefaults Whether to load default configuration.
835 Creates a servlet exception response with JSON error details. @param response HTTP response object @param status HTTP status code @param ex Throwable exception
836 Creates a Jersey exception response with status, message, and type. @param status HTTP status code @param ex The exception to extract details from. @return A Jersey Response object.
837 Initializes the CRC32C object by resetting its value to 0xffffffff.
838 Removes all elements from this intrusive collection.
839 Generates command to retrieve user groups based on OS. @param user The username to query for groups. @return Array of strings representing the command.
840 Generates command to get user's group IDs. OS-specific. @param user The username to query. @return Array of strings representing the command.
841 Returns the 'ls' command based on the OS. Returns Windows 'ls -F' or Linux 'ls -ld'.
842 Generates chmod command based on permissions and recursion. @param perm The permission string. @param recursive Whether to apply permission recursively. @return String array representing the chmod command.
843 Generates the chown command based on the OS. @param owner The new owner for the file/directory. @return String array representing the chown command.
844 Generates a command array for creating a symbolic link. @param target The path to the target file or directory. @param link The path to the symbolic link. @return String array representing the command to execute.
845 Generates the readlink command array based on the OS. @param link The link to read. @return String array representing the command.
846 Generates a command to check or kill a process by PID. @param code Signal code (0 for check alive, other for kill) @param pid Process ID to check or kill. @return Array of strings representing the command.
847 Appends script extension to basename and creates a File object. @param parent Parent directory for the new file. @param basename Base name of the script. @return File object with appended extension.
848 Retrieves Hadoop home directory, falling back to system env. @throws FileNotFoundException if validation fails.
849 Returns Hadoop home directory. Throws exception if failure cause exists.
850 Gets the absolute path to a Hadoop executable. @param hadoopHomeDir Hadoop home directory @param executable Executable file name @return Absolute File object
851 Returns the File object for WinUtils. Throws FileNotFoundException if failed.
852 Destroys all active shell processes and clears the process map.
853 Shuts down a thread with the default timeout. @param thread Thread to shutdown, null if no-op. @return True if shutdown successful, false otherwise.
854 Shuts down an ExecutorService with a default timeout. @param service ExecutorService to shutdown. @return True if shutdown completed, false otherwise.
855 Creates a new phase, adds it to the list, and sets its parent. @return The newly created Progress phase object.
856 Adds a new phase with the given weightage. @param weightage Phase weightage, must be non-negative. @return The newly created Progress phase object.
857 Calculates the internal progress value based on phases. Considers current and completed phases' weightages. @return The calculated internal progress value.
858 Completes the current phase and advances the parent phase.
859 Retrieves string data from ZooKeeper for the given path. @param path ZK path to retrieve string data from @return String data or null if not found.
860 Retrieves string data from ZooKeeper. @param path ZK path to retrieve data from. @param stat Stat object for data metadata. @return String data or null if not found.
861 Sets string data to ZooKeeper path with specified version. @param path ZK path @param data String data to set @param version Expected version
862 Creates a persistent node with specified ACL if it doesn't exist. @param path Node path to create. @param zkAcl ACLs to apply to the node. @return True if the node was created, false otherwise.
863 Deletes a node and its children from ZooKeeper. @param path The path of the node to delete. @return True if the node was deleted, false otherwise.
864 Safely deletes a ZK path within a transaction if it exists. @param path ZK path to delete @param fencingACL ACLs for the transaction @param fencingNodePath Path for the transaction
865 Adds a program to the registry. @param name Program name. @param mainClass Class containing the main method. @param description Program description.
866 Sets the unbound method to be invoked. @param targetClass Target class. @param methodName Method name. @param argClasses Argument classes. @return this Builder instance.
867 Finds and binds a hidden method on the target class. @param targetClass Class containing the hidden method @param methodName Name of the hidden method @param argClasses Argument types of the hidden method @return Builder instance with the bound hidden method
868 Creates an UnboundMethod with the given name, defaulting to NOOP. @param name Method name. @return UnboundMethod instance.
869 Checks if all provided methods are implemented (not NOOP). @param methods array of UnboundMethod instances @return true if all methods are implemented, false otherwise
870 Checks if the unbound method is available (not a NOOP). @param method The unbound method to check. @return True if the method is available, false otherwise.
871 Binds the method to a receiver object. @param receiver The object to bind the method to. @return A BoundMethod instance representing the binding.
872 Returns a `StaticMethod` instance. @return A `StaticMethod` object representing the current method.
873 Finds the JAR file containing the given class. @param clazz The class to locate within a JAR. @return The path to the JAR file, or null if not found.
874 Finds the location of a class using its ClassLoader and name.
875 Writes the checksum value to the output stream. Resets state if specified. Returns checksum size.
876 Writes the checksum value to the buffer. Resets if specified. @param buf buffer to write to @param offset starting offset in buffer @param reset reset checksum state after writing @return number of bytes written
877 Creates a rate limiting instance. Returns unlimited if capacity is 0, restricted otherwise.
878 Registers UNIX signal handlers for TERM, HUP, INT. Logs registration status; throws exception if already registered.
879 Constructs a LightWeightGSet with a recommended initial capacity. @param recommended_length Suggested initial capacity.
880 Populates include/exclude sets with host details. @param includes Set to add included hosts to. @param excludes Set to add excluded hosts to.
881 Populates include/exclude host sets from current host details. @param includeHosts Set to populate with included hosts. @param excludeHosts Map to populate with excluded items.
882 Computes a hash value from a byte array. @param key byte array to hash @param nbytes number of bytes to use @param initval initial hash value @return int hash value
883 Returns a Hash instance based on the specified hash type. @param type Hash type identifier (JENKINS_HASH, MURMUR_HASH) @return Hash instance or null if type is invalid.
884 Default constructor for the CountingBloomFilter.
885 Default constructor. Calls superclass constructor.
886 Default constructor for the DynamicBloomFilter.
887 Computes multiple hash values for a key. @param k The key to hash. @return An array of integer hash values.
888 Constructs an AutoCloseableLock using a default ReentrantLock.
889 Releases the lock when the AutoCloseableLock object is closed.
890 Prints an error message and the stack trace of a throwable. @param e The throwable to print the stack trace for. @param text Error message format. @param args Arguments for the error message.
891 Logs a formatted error message to the error stream. @param errorcode Error code to include in the message. @param text Error text to display.
892 Logs class loading details: name and URL. @param name Class name. @param clazz The loaded Class object.
893 Returns a copy of the current GC data.
894 Initializes the CRC32 object by resetting the CRC value.
895 Executes registered shutdown hooks, tracking timeouts. Returns the number of hooks that timed out during execution.
896 Adds an element to the priority queue and maintains heap order. @param element The element to add.
897 Removes and returns the highest priority element. Returns null if the queue is empty.
898 Moves the top element down to restore the heap property.
899 Creates a HashSet from elements provided by an iterator. @param <E> The type of elements in the iterator. @param elements Iterator providing elements for the HashSet. @return A HashSet containing elements from the iterator.
900 Creates a new HashSet with an initial capacity based on expected size. @param expectedSize The anticipated number of elements.
901 Skips the sequence to the specified value. @param newValue The new value to set the sequence to. @throws IllegalStateException if newValue is less than current value.
902 Constructs a TableListing object using the configured columns, header visibility, and wrap width.
903 Checks if a key is deprecated. @param key The key to check. @return True if the key is deprecated, false otherwise.
904 Checks if a deprecation warning has been issued for the given key. @param name The name of the key to check. @return True if a warning has been issued, false otherwise.
905 Reloads all existing configurations. Iterates through all configs.
906 Adds a resource name to the default resources and reloads configs. @param name The name of the resource to add.
907 Parses a time duration string, converts to a specified unit. @param name Name of the property @param vStr Duration string to parse @param defaultUnit Default time unit @param returnUnit Target time unit for conversion
908 Retrieves properties associated with multiple tags. @param tagList List of tags to filter properties by. @return Properties object containing combined entries.
909 Redacts a configuration value if the key is sensitive. @param key Config key to check. @param value Config value to redact.
910 Redacts a config value if the key is sensitive. @param key Config key. @param value Config value. @return Redacted XML or original value.
911 Starts a reconfiguration task. Throws IOException if server stopped or task already running.
912 Creates a new DeprecationContext from another and deltas. @param other Source DeprecationContext, may be null. @param deltas Array of delta updates.
913 Constructs a ReconfigurationException with details & cause. @param property Property name. @param newVal New value. @param oldVal Old value. @param cause Throwable cause.
914 Constructs a ReconfigurationException with property details. @param property Property name. @param newVal New value. @param oldVal Old value.
915 Checks if manual HA state management is allowed. Returns false if auto-failover is enabled and not forced.
916 Executes a command on a remote server via SSH. @param session SSH session object. @param cmd Command to execute. @return Exit status of the command.
917 Checks if the service is eligible for failover. Throws ServiceFailedException if not healthy or in observer state.
918 Reads data from a file range into a direct ByteBuffer. @param range FileRange to read from. @param buffer ByteBuffer to write data to. @param operation Function to read bytes from the file.
919 Validates and sorts a list of FileRange objects. @param input List of FileRange to validate and sort. @param fileLength Optional file length for range validation. @return Sorted list of FileRange objects.
920 Constructs a BlockManager with the provided BlockData. @param blockData BlockData object used for block management
921 Releases a buffer data object (no-op, new buffer allocated each time). @param data The buffer data to release.
922 Releases a resource back to the pool. @param item The resource to release.
923 Throws IllegalStateException if buffer state doesn't match provided states. @param states array of expected State values
924 Checks if a string is not null and not empty. @param arg String to validate; argument name.
925 Checks if collection is null and has the specified number of elements. @param collection Collection to validate @param numElements Expected number of elements @param argName Name of the argument
926 Checks if a path exists. Throws IAE if not. @param path the path to check @param argName name of the path argument
927 Constructs a BoundedResourcePool with the specified maximum size. @param size The maximum number of resources the pool can hold.
928 Constructs a BufferPool with a specified size and buffer size. @param size Pool size @param bufferSize Buffer size
929 Requests a prefetch for the specified block number. @param blockNumber The block number to prefetch.
930 Creates a new `BufferData` instance. @param blockNumber The block number. Must be non-negative. @param buffer The buffer to be managed. Must not be null.
931 Constructs a Retryer with specified retry delay, max delay, and update interval. @param perRetryDelay Delay between retries. @param maxDelay Maximum delay for retries. @param statusUpdateInterval Interval for status updates.
932 Checks if array is not null and has a positive length. @param array The array to validate. @param argName Name of the array argument.
933 Checks if array is not null and has positive size. @param array byte array to validate @param argName name of the array argument
934 Checks if array is not null and has a positive size. @param array array to check @param argName name of the array argument
935 Checks if array is not null and has a positive size. @param array array to check @param argName name of the array argument
936 Checks if array is not null and has a positive size. @param array Array to validate. @param argName Name of the array argument.
937 Checks if an Iterable is not null and has at least one element. @param iter Iterable to check @param argName Name of the argument
938 Deletes a collection of paths. @param paths Paths to delete. @return List of deletion results (Path, Error string).
939 Applies a function to a Serializable, casting it to an IOStatisticsSnapshot. @param source Serializable object @param fun Function to apply to the snapshot @param <T> Return type of the function
940 Constructs a FlagSet with specified enum class, prefix, and flags. @param enumClass Enum class representing the flags. @param prefix Prefix for enum names. @param flags Initial set of flags (optional).
941 Closes the FileSystem, logs close details, processes delete-on-exit files, and removes from cache.
942 Compares this FileStatus with another based on path. @param o the other FileStatus to compare to @return negative, zero, or positive based on path comparison.
943 Compares this file status with another based on path. @param o the other file status to compare to
944 Converts FileStatus array to Path array. Returns a single path if input is null. @param stats Array of FileStatus objects. @param path A Path object. @return Array of Path objects.
945 Checks if the path has the specified capability (read-only). @param path The path to check. @param capability Capability string to check. @return True if the path has read-only capability.
946 Creates a JsonSerialization instance for IOStatisticsSnapshot. Configures serialization to fail on unknown properties, pretty prints.
947 Creates a StorageStatisticsFromIOStatistics object. @param name Statistics name @param scheme Statistics scheme @param source IOStatistics object to use
948 Returns storage statistics for the current file system URI.
949 Constructs PathIsDirectoryException with the given path. @param path The file path that is unexpectedly a directory.
950 Constructs a PathIsNotDirectoryException for a given path. @param path The path that is not a directory.
951 Constructs a PathOperationException for unsupported operations. @param path The file path associated with the error.
952 Constructs a PathIsNotEmptyDirectoryException with the given path. @param path The path that is not an empty directory.
953 Sets the buffer size for the output stream. @param bufSize The desired buffer size in bytes. @return A reference to this builder object.
954 Sets the replication factor for the output stream. @param replica desired replication factor @return Reference to this builder for chaining.
955 Sets the block size for the output stream. @param blkSize the desired block size in bytes @return a reference to this builder object
956 Sets the recursive flag to true and returns this builder.
957 Creates a new stream with create flag. Returns a reference to the current builder object.
958 Sets the overwrite flag. Returns a reference to this builder.
959 Sets the append flag and returns a reference to this builder.
960 Sets the hosts array. Interns strings if provided. @param hosts Array of hostnames; can be null.
961 Sets the cached hosts array. Uses weak interning if provided. @param cachedHosts Array of host strings to cache.
962 Sets the names array; interns strings if not null. @param names Array of names to set; can be null.
963 Sets the topology paths. Interns strings if provided. @param topologyPaths Array of topology paths. @throws IOException if an I/O error occurs.
964 Checks if a path represents a file. Returns false if not found. @param f Path to check @return True if the path is a file, false otherwise.
965 Wraps an IOException, returning it if it's an InterruptedIOException or PathIOException. Otherwise, wraps with a custom message. @param path The file/directory path. @param methodName The method name. @param exception The exception to wrap. @return Wrapped IOException.
966 Synchronizes the reader to a specific position. @param position The position to synchronize to.
967 Resets the data stream to the beginning of the data.
968 Registers expressions with the given factory. @param factory ExpressionFactory to register expressions with.
969 Registers file system commands with the provided factory. @param factory CommandFactory to register commands with.
970 Expands a file pattern into a list of fully resolved paths. @param filePattern The file pattern to expand. @return List of expanded file paths.
971 Lists statuses of files/directories under the given path, filtered. @param f Path to check @param filter Filter to apply @return Array of FileStatus objects
972 Lists file statuses for multiple paths, filtered by a given filter. @param files Paths to check @param filter Filter to apply @return Array of FileStatus objects
973 Retrieves a delegation token. @param url URL for token retrieval. @param token Token object to store the retrieved token. @param renewer renewer principal @return DelegationToken
974 Renews a delegation token for a URL. @param url URL to renew token for @param token Token containing delegation token @return Renewed token lifetime in milliseconds
975 Cancels a delegation token for a given URL. @param url URL for which the token is cancelled. @param token Delegation token to be cancelled.
976 Constructs a FileEncryptionInfo object with provided encryption details. @param suite CipherSuite, version, keys, IV, key/version names.
977 Sets the file system permission for the upload. @param perm The file system permission to set. @return This builder instance for method chaining.
978 Sets the checksum option for the upload. @param chksumOpt Checksum option to set; cannot be null. @return This builder, for method chaining.
979 Constructs a WrappedIOException with the given cause. @param cause The original IOException to wrap.
980 Constructs a new FsLinkResolution with the provided function. @param fn The function to resolve filesystem links.
981 Constructs a GlobBuilder with a FileContext. @param fc the FileContext to use; cannot be null.
982 Constructs a GlobBuilder with the given FileSystem. @param fs The FileSystem to use for path operations.
983 Sets the file permission. @param perm The file system permission to set. @return A reference to this builder.
984 Sets the progressable object for the output stream. @param prog The progressable object to set. @return A reference to this builder.
985 Sets the checksum option for the output stream. @param chksumOpt ChecksumOption object to set @return Reference to this builder object
986 Validates write arguments to ensure they are within bounds. @param b byte array to write @param off offset within the array @param len number of bytes to write @throws IndexOutOfBoundsException if arguments are invalid
987 Compares two strings for equality, ignoring case. @param s1 first string @param s2 second string @return true if strings are equal ignoring case
988 Checks if a ZooKeeper client context is stale. @param ctx ZooKeeper client context to validate. @return True if stale, false otherwise.
989 Gets statistics for a given file system scheme. @param scheme File system scheme (e.g., "hdfs") @param cls FileSystem class @return Statistics object for the given scheme
990 Copies bytes from an input stream to an output stream. @param in input stream @param out output stream @param buffSize buffer size @param close whether to close streams after copying
991 Copies bytes from an input stream to an output stream. @param in Input stream. @param out Output stream. @param count Number of bytes to copy. @param close Whether to close streams after copying.
992 Checks disk I/O by repeatedly attempting a check. @param dir Directory to check; rethrows DiskErrorException on failure.
993 Checks if any type quota is set. Iterates through supported types.
994 Checks if any storage type has consumed quota. Iterates through supported types, returns true if consumed.
995 Checks if this file status is equal to another using parent's logic.
996 Returns the hash code, delegating to the superclass.
997 Resets the sample count and sum to zero, effectively clearing the statistics.
998 Copies statistics (sample count & sum) from another MeanStatistic.
999 Converts IOStatistics to a formatted string. @param statistics The statistics to format, or null. @return Formatted string or empty string if null.
1000 Converts a map to a sorted string representation. @param sb StringBuilder to append to @param type Map type @param map Map to convert @param isEmpty Predicate for empty values
1001 Creates a DurationTracker instance with given key and count 1.
1002 Returns an iterator over LongStatistic objects from counters & gauges.
1003 Adds a timed operation's data to mean, min, and max statistics. @param prefix Operation prefix; used to construct statistic keys. @param durationMillis Operation duration in milliseconds.
1004 Builds and returns the DynamicIOStatistics instance. Returns the built stats; prevents further building.
1005 Adds a long counter function to the builder. @param key Counter key. @param eval Function to evaluate the long counter value.
1006 Adds a long function gauge to the statistics. @param key Gauge key. @param eval Function to evaluate the gauge.
1007 Adds a function to calculate minimum long values for a key. @param key Key for the minimum value calculation @param eval Function to evaluate and return the minimum
1008 Adds a ToLongFunction to calculate maximum values for a key. @param key Key for the maximum value evaluator. @param eval Function to calculate the maximum value.
1009 Adds a mean statistic function for a key. @param key Statistic key. @param eval Function to calculate the mean. @return this
1010 Registers an interrupt handler for the given signal name. @param signalName Name of the interrupt signal to handle.
1011 Creates a snapshot of the evaluator map using the copy function. @return A ConcurrentHashMap containing the snapshot.
1012 Creates a concurrent snapshot of a map, using passthrough. @param source The source map to snapshot. @return A ConcurrentHashMap containing the snapshot.
1013 Creates and returns a new, empty IOStatisticsSnapshot.
1014 Constructs an IOStatisticsContextImpl with a thread and ID. @param threadId Thread identifier. @param id Unique identifier for the context.
1015 Creates and returns a new IOStatisticsSnapshot object.
1016 Checks if I/O statistics context is enabled. Delegates to IOStatisticsContext.enabled(). @return True if enabled, false otherwise.
1017 Retrieves I/O statistics for the output stream. @return IOStatistics object representing stream stats.
1018 Retrieves I/O statistics for the underlying input stream. @return IOStatistics object or null if unavailable.
1019 Retrieves IO statistics for the data being processed. @return IOStatistics object containing data access metrics.
1020 Retrieves IO statistics for the data chunks. @return IOStatistics object or null if not found.
1021 Gets IO statistics for the input stream. @return IOStatistics object or null if not available.
1022 Retrieves IO statistics for the wrapped output stream. @return IOStatistics object representing stream I/O stats.
1023 Retrieves I/O statistics for the output stream. @return IOStatistics object for the output stream.
1024 Retrieves IO statistics for the input stream. @return IOStatistics object or null if not available.
1025 Retrieves I/O statistics for the input stream. @return IOStatistics object or null if not found.
1026 Verifies checksums for data chunks against provided CRC values. @param type Checksum type. @param algorithm Checksum algorithm.
1027 Initializes the decryptor with the calculated IV. @param decryptor Decryptor to initialize. @param position Current position in the stream. @param iv Initialization vector.
1028 Encrypts data from the input buffer to the output stream. Updates encryptor context if needed.
1029 Default constructor, calls the parameterized constructor.
1030 Default constructor. Calls the parameterized constructor.
1031 Constructs a GlobPattern with the given glob pattern. @param globPattern The glob pattern to use for matching.
1032 Creates a shell path from a File object. @param file The file to create a shell path from.
1033 Creates a secure shell path for a file. @param file The file to create a secure shell path from. @throws IOException If an I/O error occurs.
1034 Unzips an InputStream to a directory, setting permissions if Unix. @param inputStream Input stream containing the zip file. @param toDir Directory to extract the zip contents to.
1035 Unzips a zip file to a specified directory. @param inFile Input zip file. @param unzipDir Directory to unzip to.
1036 Disconnects an SFTP channel from the connection pool. @param channel The ChannelSftp instance to disconnect.
1037 Shuts down the connection pool, disconnecting all connections.
1038 Sets the size of the checksum buffer. @param size The new size for the checksum buffer.
1039 Copies a Statistics object, aggregating data from the other. @param other The Statistics object to copy from.
1040 Returns the total bytes read. Uses StatisticsAggregator to sum bytesRead from all data.
1041 Returns the total bytes written. Uses StatisticsAggregator to sum bytesWritten from all data.
1042 Returns the total number of read operations. Uses StatisticsAggregator to sum readOps and largeReadOps.
1043 Returns the total number of large read operations. Uses StatisticsAggregator to sum largeReadOps from data.
1044 Returns the total number of write operations. Uses StatisticsAggregator to sum writeOps from StatisticsData.
1045 Returns the total remote read time in milliseconds. Uses StatisticsAggregator to sum remoteReadTimeMS from data.
1046 Retrieves all statistics data as a combined StatisticsData object.
1047 Returns total bytes read via erasure coding. Uses StatisticsAggregator to sum bytesReadErasureCoded.
1048 Resets statistics by negating and adding them to root data.
1049 Validates CreateFlag options based on path existence. @param path The file path. @param pathExists Whether the path already exists. @param flag The CreateFlag enum set.
1050 Validates CreateFlag enum set and ensures it contains APPEND. @param flag The CreateFlag options to validate.
1051 Extracts a URI, validating scheme and authority. @param uri The URI to process. @param supportedScheme The expected URI scheme.
1052 Constructs an ArrayPrimitiveWritable with the given component type. @param componentType Class of the primitive array elements.
1053 Converts a permission string (e.g., "rwca") to an integer permission value. @param permString Permission string to convert. @return Integer representation of the permission value.
1054 Merges default and user checksum options. @param defaultOpt Default checksum options. @param userOpt User-provided checksum options.
1055 Gets the canonical URI by canonicalizing the current URI.
1056 Constructs a ContentSummary with length, file, and directory counts. Delegates to the primary constructor.
1057 Gets the status of the current file system. @return FsStatus object representing file system status.
1058 Initializes the HttpReferrerAuditHeader with values from the builder. Populates attributes and builds the initial HTTP referrer header.
1059 Releases a buffer, clears its contents, and returns it to the pool. @param data The BufferData object to release.
1060 Constructs a SemaphoredDelegatingExecutor with permit control. @param executorDelegatee ExecutorService to delegate tasks to. @param permitCount The number of permits available. @param fair Whether tasks are processed fairly.
1061 Releases a ready buffer with minimal distance to blockNumber. Selects a READY buffer and marks it as done.
1062 Returns the buffer's current relative position. Throws exception if buffer is invalid.
1063 Checks if a given position is within the current buffer. @param pos The position to check. @return True if position is within the buffer, false otherwise.
1064 Returns the buffer's starting offset within the file. Throws exception if buffer is invalid.
1065 Gets the current IO statistics context, or an empty instance.
1066 Sets the IO statistics context for the current thread. @param statisticsContext The context to set; null to remove.
1067 Merges sorted file ranges into combined ranges. @param sortedRanges List of FileRange objects to merge. @param chunkSize Chunk size for rounding offsets. @param minimumSeek Minimum seek distance. @param maxSize Max size of the merged range. @return List of CombinedFileRange objects.
1068 Finds checksum ranges from data ranges. @param dataRanges List of file ranges. @param bytesPerSum Bytes per checksum. @return List of CombinedFileRange objects.
1069 Constructs a Name object with default case-sensitive flag.
1070 Applies the expression to path data, combining results of children. @param item The PathData to apply to. @param depth The depth of the expression. @return Result of applying expression.
1071 Lazily initializes and returns FindOptions object. Creates a new instance if it doesn't already exist.
1072 Parses command-line arguments, handling options and values. @param args List of arguments to parse.
1073 Returns the command description, indicating deprecation if applicable.
1074 Displays a warning message to the error stream, prefixed with command name. @param message Warning message to display.
1075 Returns the command usage string. Returns command name if usage is not defined.
1076 Constructs a ScopedAclEntries object from a list of ACL entries. @param aclEntries List of ACL entries to process.
1077 Prints the table to a specified print stream. @param out PrintStream to write the table to.
1078 Creates a Location object allowing or disallowing changes. @param allow boolean indicating whether changes are permitted.
1079 Creates a new Data object, allowing or disallowing changes. @param allow boolean indicating whether changes are allowed @return A new Data object.
1080 Constructs a Shell instance with a default interval (0L).
1081 Creates a DelegationTokenAuthenticatedURL.Token from a Token. @param dToken Input token to extract delegation token details. @return DelegationTokenAuthenticatedURL.Token object.
1082 Lists located statuses for files under the given path. @param f The path to list. @return RemoteIterator of LocatedFileStatus.
1083 Opens a file with specified parameters. @param path Path to the file. @param parameters Parameters for file opening.
1084 Returns the fallback FileSystem, or null if not configured. Uses getTargetFileSystem and MyFs internally.
1085 Updates the cipher context with input data, writing to output. @param input Input buffer containing data to encrypt/decrypt. @param output Output buffer to store the result. @return Number of bytes processed.
1086 Encrypts data using the initialized cipher context. @param output ByteBuffer to store the encrypted data @return Number of bytes written to the output buffer
1087 Creates a RegexMountPointInterceptor from a settings string. @param interceptorSettingsString Settings string for the interceptor. @return RegexMountPointInterceptor object or null if invalid.
1088 Normalizes a path by removing duplicate slashes and backslashes. @param scheme URI scheme, used to determine if backslash replacement is needed. @param path The path string to normalize. @return Normalized path string.
1089 Checks if the path is a Windows absolute path. @param pathString The path string to check. @param slashed Whether the path uses forward slashes. @return True if the path is a Windows absolute path.
1090 Checks if the URI path is absolute, starting with a separator.
1091 Calculates a hash code for the given path. @param p The path to compute the hash code for. @return A positive hash code value.
1092 Validates that the given path is a child of the base path. @param path Path to validate; must not be null.
1093 Finds the next available ID for a new log file. @param initial base path @param lastId last used ID @return next available ID
1094 Skips specified bytes from the current position in the stream. @param n Number of bytes to skip; returns skipped bytes. @throws IOException if an I/O error occurs.
1095 Reads data from a stream into a ByteBuffer, using a pool. @param stream Input stream to read from @param bufferPool Buffer pool for ByteBuffer allocation @param maxLength Maximum number of bytes to read @return ByteBuffer containing the read data
1096 Resets the audit context by clearing entries and re-initializing.
1097 Creates and initializes a new CommonAuditContext instance. Initializes the context using the init method.
1098 Constructs an FsPermission with specified user, group, other actions. @param u User action @param g Group action @param o Other action
1099 Constructs an FsPermission object from a short value. @param mode Short representing the permission bits.
1100 Reads FsPermission from DataInput. @param in Input stream to read permission bits from. @return FsPermission object representing the read permissions.
1101 Gets effective permission for an ACL entry. @param entry The ACL entry to evaluate.
1102 Creates an immutable PermissionStatus object with given user, group, and permission.
1103 Parses an ACL specification string into a list of AclEntry objects. @param aclSpec ACL specification string separated by commas. @param includePermission Whether to include permission in parsing. @return List of AclEntry objects.
1104 Creates an FsCreateModes instance with given masked and unmasked permissions. @param masked The masked permission. @param unmasked The unmasked permission.
1105 Prints extended ACL entry, showing effective permission if different. @param aclStatus ACL status object. @param fsPerm Base permission. @param entry The ACL entry to print.
1106 Converts a delimited string to a string array, using "," as delimiter. @param str The string to convert. @return String array or null if empty.
1107 Returns the current position of the byte buffer. Throws exception if the stream is closed.
1108 Checks if the underlying ByteBuffer has remaining bytes.
1109 Initiates a data block upload by transitioning to the 'Upload' state. @return Null, as the upload data is not immediately available. @throws IOException if an I/O error occurs during state transition.
1110 Transitions data block to the Closed state if not already closed. @return True if transitioned, false otherwise.
1111 Flushes data to disk, ensuring the block is in the Writing state. @throws IOException if an I/O error occurs during the flush.
1112 Retrieves statistics for the given URI. @param uri The URI to get statistics for. @return Statistics object.
1113 Gets the current directory index from the context. Uses the context obtained from the context name.
1114 Writes sync data if needed and updates the last sync position. Writes SYNC_ESCAPE and sync data to the output stream.
1115 Returns the current length of the data written to the file. @return The current length as a long.
1116 Returns the current write position, including buffered data.
1117 Calculates content summary for a path. @param f The path to calculate the summary for.
1118 Builds an ACL based on user/group strings. Sets users/groups or allAllowed flag based on input.
1119 Parses a comma/newline-separated string into an EnumSet. @param key Key for the configuration. @param valueString String containing enum values. @param enumClass Enum class to parse. @param ignoreUnknown Whether to ignore unknown enum values. @return EnumSet of parsed enum values.
1120 Throws exception if current state doesn't match expectedState. @param expectedState The expected service state.
1121 Constructs an AbstractService with a given name and initial state. @param name The name of the service.
1122 Validates a state transition; throws exception if invalid. @param name Service name. @param state Current state. @param proposed Proposed state.
1123 Creates a ServiceLaunchException for service creation failures. @param exception the exception that caused the failure @return ServiceLaunchException with failure code and cause
1124 Verifies that the configuration files specified exist. @param filenames array of configuration file names
1125 Converts a Throwable to an ExitUtil.ExitException. @param thrown The exception to convert. @return An ExitUtil.ExitException with formatted message.
1126 Constructs a ServiceShutdownHook, storing a weak reference to the service. @param service The service to be shut down.
1127 Records a service failure, logging details and updating state. @param exception The exception that caused the failure.
1128 Records a lifecycle event with timestamp and current state.
1129 Stops services, rethrowing the first exception if any occurred. @param numOfServicesStarted Number of services started. @param stopOnlyStartedServices Whether to stop only started services.
1130 Stops a service quietly, logging warnings if it fails. @param service Service to stop. Returns exception if failed.
1131 Compares this UTF8 object to another. @param o The other UTF8 object. @return -1, 0, or 1 based on byte array comparison.
1132 Checks if this UTF8 object is equal to another. @param o The object to compare to. @return True if equal, false otherwise.
1133 Compares this MD5Hash with another based on their digests. @param that The MD5Hash to compare to. @return Negative, zero, or positive value based on comparison.
1134 Compares this BinaryComparable with another. @param other The BinaryComparable to compare to. @return Comparison result (-1, 0, or 1).
1135 Compares this object with another byte array segment. @param other The byte array to compare. @param off Offset into the other array. @param len Length of the segment to compare.
1136 Calculates hash code using WritableComparator's hashBytes. Uses getBytes() and getLength() to obtain data.
1137 Reads a double from a byte array, starting at the given index.
1138 Sets the size of the byte array. Resizes if size exceeds capacity. @param size The new size of the byte array.
1139 Checks if a file is readable. Uses Windows access check if on Windows. @param f The file to check. @return True if readable, false otherwise.
1140 Checks if a file is writable. Uses NativeIO on Windows, otherwise uses File.canWrite().
1141 Checks if a file is executable. Uses NativeIO on Windows. @param f The file to check. @return True if executable, false otherwise.
1142 Retrieves the ReadaheadPool instance, creating it if necessary. Uses NativeIO.isAvailable() to determine if native code is available.
1143 Returns the memory lock limit, or 0 if native code is unavailable.
1144 Calculates checksums for data in chunks, using native code if available. @param data Data to calculate checksums for. @param offset Offset into the data array. @param length Length of data to process. @param sums Array to store checksum results. @param sumsOffset Offset into the sums array.
1145 Creates a FileOutputStream for writing, creating if it doesn't exist. @param f the file @param permissions file permissions @throws IOException if an I/O error occurs
1146 Clears the buffer pool by freeing all ByteBuffer instances.
1147 Releases the inBuffer and outBuffer using CryptoStreamUtils.
1148 Retrieves file status information for a given file descriptor. @param fd FileDescriptor to get status for @return Stat object containing file status, or null if Windows @throws IOException if an I/O error occurs
1149 Gets file status (Stat) for the given path. @param path The file path to get status for. @return Stat object representing the file status.
1150 Initializes the stream with a new byte array of given capacity. @param capacity The initial capacity of the internal buffer. @param limit The maximum number of bytes allowed.
1151 Constructs an EnumSetWritable with a given EnumSet. @param value The EnumSet to wrap. Element type is not specified.
1152 Writes data from an InputStream into the buffer. @param in Input stream to read from. @param length Number of bytes to write.
1153 Returns a DataInputStream for reading the key data. Resets the stream to the beginning of the key buffer.
1154 Decodes a string value and populates a Writable object's fields. @param obj Writable object to populate @param newValue Base64 encoded string value
1155 Compares two byte array representations using registered comparators. @param b1, s1, l1 First byte array and its offset/length. @param b2, s2, l2 Second byte array and its offset/length.
1156 Checks if the block group is recoverable based on erased count. @param blockGroup ECBlockGroup object to check @return True if recoverable, false otherwise.
1157 Calculates the total number of erased blocks in a block group. @param blockGroup ECBlockGroup containing data and parity blocks. @return Total number of erased blocks.
1158 Finds indexes of erased EC blocks. @param inputBlocks Array of EC blocks to check. @return Array of erased block indexes.
1159 Checks input buffers for validity. Throws exception if invalid.
1160 Validates input buffers and throws exception if invalid. @param buffers Array of byte arrays to validate.
1161 Constructs an `HHXORErasureDecodingStep` with erasure coding parameters. @param inputBlocks Input EC blocks. @param erasedIndexes Indices of erased blocks. @param outputBlocks Output EC blocks.
1162 Validates input parameters for erasure coding decoding. Checks lengths of inputs, erasedIndexes, and outputs.
1163 Constructs a HHXORErasureEncodingStep with Reed-Solomon and XOR encoders. @param inputBlocks Input blocks. @param outputBlocks Output blocks.
1164 Validates input and output array lengths against encoder settings. @param inputs Input array. @param outputs Output array.
1165 Adds two arrays element-wise. @param p First array. @param q Second array. @return Sum of the two arrays.
1166 Multiplies two polynomials represented as integer arrays. @param p First polynomial. @param q Second polynomial. @return Product of the two polynomials.
1167 Performs Gaussian elimination on a matrix. @param matrix The matrix to be transformed.
1168 Dumps an array of ECChunks to the console, prefixed with a header. @param header String to print before the chunks @param chunks Array of ECChunk objects to dump
1169 Resets multiple output buffers to a specified data length. @param buffers Array of buffers to reset. @param dataLen The length to reset each buffer to.
1170 Converts ECChunk array to ByteBuffer array. Handles null chunks and resets zero-filled buffers.
1171 Resets multiple output buffers to empty byte arrays. @param buffers array of byte arrays to reset @param offsets offset for each buffer @param dataLen length of data to reset
1172 Returns a GaloisField instance using default size and polynomial.
1173 Constructs a BlockCompressorStream with given stream, compressor, buffer size, & overhead. @param out Output stream. @param compressor Compressor. @param bufferSize Buffer size. @param compressionOverhead Overhead.
1174 Creates a ZStandardDecompressor with a specified buffer size. @param bufferSize size of direct buffers for decompression
1175 Constructs a Lz4Compressor with the default direct buffer size.
1176 Gets the Class of a CompressionCodec by name. @param codecName Codec name or class name. @return Codec class or null if not found.
1177 Gets a compressor, borrowing from the pool or creating a new one. @param codec Compression codec to use. @param conf Hadoop configuration. @return Compressor instance.
1178 Gets a Decompressor from the pool or creates a new one. @param codec Compression codec to get a decompressor for. @return Decompressor instance.
1179 Returns a compressor to the pool for reuse. Marks non-poolable compressors as finished.
1180 Returns a decompressor to the pool for reuse. @param decompressor Decompressor instance to return.
1181 Returns the compressor type, ZStandardCompressor.class. Checks if native code is loaded before returning.
1182 Returns the class of the ZStandard decompressor. Checks native code loading before returning.
1183 Default constructor; initializes with default compression settings.
1184 Constructs a ZlibCompressor using default compression settings from config. @param conf Hadoop configuration object.
1185 Reinitializes the compressor with configuration from Hadoop. @param conf Hadoop configuration object.
1186 Processes GZIP header state, advancing to next stage. Handles basic/extra fields, filename, comment, and CRC.
1187 Writes the text data (length and bytes) to the output stream.
1188 Reads a variable-length integer from the input stream. Throws IOException if value exceeds integer range.
1189 Reads a VInt from stream within a range, throwing IOException if out of range. @param stream input stream @param lower lower bound (inclusive) @param upper upper bound (inclusive) @return int value read from stream
1190 Initializes a Text object with the given string, encoding it as UTF-8. @param string The string to encode.
1191 Finds the starting index of 'what' within the Text's bytes. @param what String to search for @param start Starting index for the search @return Index of 'what' or -1 if not found
1192 Writes a String to a DataOutput stream as a variable-length integer followed by UTF-8 encoded bytes. @param out DataOutput to write to @param s String to write @return Length of encoded string in bytes
1193 Writes a String to a DataOutput, ensuring it's within maxLength. @param out Output stream to write to. @param s String to write. @param maxLength Max length of the string in bytes. @return Actual length of the written string.
1194 Sets the internal byte array from a UTF-8 byte array. @param utf8 The UTF-8 byte array to copy from.
1195 Copies data from another Text object. @param other The Text object to copy from.
1196 Reads a line from the input stream, respecting length limits. @param str Text object to append the line to. @param maxLineLength Max length of the line. @param maxBytesToConsume Max bytes to consume. @return Bytes consumed before newline.
1197 Reads a custom line from the input, handling delimiters. @param str Text object to append to. @param maxLineLength Max line length. @param maxBytesToConsume Max bytes to consume.
1198 Constructs a new, empty SortedMapWritable. Initializes the internal TreeMap to store entries.
1199 Constructs a new MapWritable. Initializes the underlying HashMap.
1200 Constructs a Key with a byte array and default weight 1.0. @param value The byte array representing the key.
1201 Computes MD5 hash of byte array. @param data Data to hash. @return MD5Hash object representing the hash.
1202 Computes MD5 hash of a UTF8 string. @param utf8 The UTF8 string to hash. @return MD5Hash object representing the hash.
1203 Creates an MD5Hash object from a hex string. @param hex Hexadecimal representation of the digest.
1204 Creates a retry policy with infinite retries and fixed sleep. @param sleepTime Sleep duration between retries. @param timeUnit Time unit for sleepTime.
1205 Creates a RetryUpToMaximumCountWithFixedSleep policy. @param maxRetries Max retry attempts. @param sleepTime Sleep duration. @param timeUnit Time unit for sleepTime.
1206 Creates an ExponentialBackoffRetry policy. @param maxRetries Max retry attempts. @param sleepTime Initial sleep duration. @param timeUnit Time unit for sleepTime.
1207 Creates a RetryUpToMaximumCountWithProportionalSleep policy. @param maxRetries Max retries. @param sleepTime Initial sleep. @param timeUnit Time unit for sleepTime.
1208 Records the timestamp when the write lock is first held.
1209 Records the lock acquisition timestamp for timing purposes.
1210 Records lock acquisition timestamp if this is the first reader.
1211 Creates a dynamic proxy with retry functionality. @param iface Interface to proxy. @param proxyProvider Proxy provider for failover. @param methodNameToPolicyMap Retry policies per method. @param defaultPolicy Default retry policy.
1212 Returns the hash code, delegated to the retry strategy.
1213 Checks if two WrapperRetryPolicy objects are equal. Compares the multipleLinearRandomRetry fields.
1214 Builds and returns a MultipleIOException from collected exceptions. @return IOException containing aggregated exceptions, or null.
1215 Returns an array of supported compression algorithm names.
1216 Returns the name of the compression algorithm used.
1217 Reads a string from the input. Returns null if length is -1. @param in DataInput to read from @return String read from input or null if empty
1218 Reads the chunk length from input. Updates `remain` and sets `lastChunk` accordingly.
1219 Creates a BytesComparator. @param name Comparator string. @return BytesComparator instance.
1220 Writes a chunk to the output stream, handling length prefixes. @param chunk Data chunk to write. @param offset Offset within the chunk. @param len Length of the chunk to write. @param last True if this is the last chunk.
1221 Writes buffered data to the output stream. @param data Data to write. @param offset Offset in the data array. @param len Number of bytes to write.
1222 Initializes the encoder with an output stream and chunk size. @param out Output stream for writing encoded data. @param size Maximum size of the chunk.
1223 Returns a comparator for Scanner.Entry objects if the file is sorted. Throws RuntimeException if the file is not sorted.
1224 Checks if the scanner has reached the end of the TFile.
1225 Finds a Location object near the given offset. @param offset The offset to search near. @return Location object or end if no block found.
1226 Creates and returns a clone of this Location object.
1227 Reads the value into the provided buffer, starting at offset 0. @param buf buffer to read value into @return number of bytes read
1228 Sets the string value, truncating if too long, and encodes it. @param string The string to set; truncated if too long.
1229 Converts an array of Writables to a byte array. @param writables Array of Writable objects to convert. @return Byte array representation of the Writables.
1230 Converts a string to a UTF-8 byte array. @param string The string to convert. @return The UTF-8 encoded byte array.
1231 Writes uncompressed data to the output buffer, compressing it. @param uncompressedDataBuffer Buffer containing data to be written. @throws IOException if an I/O error occurs.
1232 Copies a Writable object. @param other The Writable object to copy. @throws IllegalArgumentException if other is null.
1233 Appends a key-value pair to the sequence file, validating types. @param key The key to append. @param val The value to append.
1234 Serializes the token to a byte array. @return Byte array representation of the token.
1235 Encodes a Writable object to a Base64 string. @param obj The Writable object to encode. @return Base64 encoded string representation of the object.
1236 Copies data from the output buffer to the input buffer.
1237 Calculates the network distance between two nodes based on their paths. @param node1 The first node. @param node2 The second node. @return The distance between the nodes.
1238 Gets a node by its network location. @param node The node whose network location is used. @return Node object or null if not found.
1239 Gets leaf nodes within the given scope. @param scope The scope string to search for leaves. @return List of leaf Node objects.
1240 Counts available nodes within a scope, excluding specified nodes. @param scope The network scope string. @param excludedNodes Nodes to exclude from the count.
1241 Removes a node from the rack and updates rack/network state. @param node The node to remove.
1242 Sorts nodes by distance from a reader node, using secondary sort. @param reader Source node. @param nodes Array of nodes to sort.
1243 Recommissions a node, removing it from decommission list. @param node The node to recommission.
1244 Transfers data to a FileChannel. @param fileCh Channel to transfer to. @param position Starting position. @param count Number of bytes to transfer.
1245 Wraps an exception with a more informative message. @param exception The exception to wrap.
1246 Default constructor for RawScriptBasedMapping.
1247 Initializes the ScriptBasedMapping with the provided raw mapping. @param rawMap The raw DNSToSwitchMapping to use.
1248 Constructs an InnerNodeImpl using the provided path string. @param path The path string used to initialize the node.
1249 Constructs an InnerNodeImpl with a normalized location. @param name Node name, @param location Location, @param parent Parent node, @param level Node level
1250 Sends a kick signal to the first notification socket. Signals a socket; logs error if failed and socket is open.
1251 Binds and listens on a Unix domain socket. @param path Socket path. @return A DomainSocket object. @throws IOException If an I/O error occurs.
1252 Creates a pair of connected domain sockets. Returns an array containing the two sockets.
1253 Connects to a Unix domain socket. @param path Socket path. @return DomainSocket object. @throws IOException If connection fails.
1254 Sends a callback and removes the entry if the callback closes it. @param caller Caller identifier. @param entries TreeMap of entries. @param fdSet Set of file descriptors. @param fd File descriptor.
1255 Closes the DomainSocket, releasing resources and waiting for the watcher thread.
1256 Retrieves a SelectorInfo for a channel, creating one if needed. @param channel The SelectableChannel to associate with a selector. @return SelectorInfo object. @throws IOException if an I/O error occurs.
1257 Releases a SelectorInfo, updates activity time, and adds to queue.
1258 Gets IP addresses for a network interface. @param strInterface Interface name. @return IP address array.
1259 Resolves hostnames for a network interface, falling back if needed. @param strInterface Interface name. @param nameserver Optional nameserver. @param tryfallbackResolution Whether to try fallback resolution.
1260 Constructs a LogThrottlingHelper with a default recorder name. @param minLogPeriodMs Minimum logging period in milliseconds.
1261 Records values for the default recorder with current monotonic time. @param values Values to record. @return LogAction object.
1262 Gets a request parameter, quoting HTML special characters. @param name Parameter name to retrieve, unquoted first. @return Quoted parameter value or null if not found.
1263 Returns the request URL, with HTML special characters quoted.
1264 Quotes HTML special chars in the server name. @return Server name, HTML-quoted.
1265 Creates a file monitoring task for a single file path. @param filePath file path to monitor @param onFileChange action on file change @param onChangeFailure action on monitoring failure
1266 Updates a metric record. @param mr The MetricsRecord to update. @return The updated Record object.
1267 Consumes an element from the queue using the provided consumer. @param consumer Consumer to process the element; can block. @throws InterruptedException if interrupted while waiting.
1268 Consumes all elements in the queue using the provided consumer. @param consumer The consumer to process each element. @throws InterruptedException If interrupted while waiting.
1269 Increments the cache hit counter.
1270 Increments the cacheCleared counter, tracking cache clear events.
1271 Increments the cache updated counter.
1272 Increments the client backoff disconnected counter.
1273 Increments the counter for slow RPC calls.
1274 Increments the counter for RPC requeue calls.
1275 Increments the counter for successful RPC calls.
1276 Writes data to a channel, using NIO_BUFFER_LIMIT for efficiency. @param channel WritableByteChannel to write to @param buffer ByteBuffer containing data to write @return Number of bytes written
1277 Reads data from a channel into a buffer. @param channel ReadableByteChannel to read from. @param buffer ByteBuffer to store read data. @return Number of bytes read.
1278 Increments failure count and records the time of the failure.
1279 Fetches group names for a user and records retrieval latency. @param user User identifier. @return Set of group names.
1280 Unregisters the metrics source from the metrics system.
1281 Sets quantile metrics, creating and adding info for each quantile. @param ucName unit class name, @param uvName unit variable name
1282 Sets inverse quantiles with formatted names and descriptions. @param ucName Unit code name @param uvName Unit value name @param desc Description @param lvName Level value name @param df Decimal format
1283 Creates a MetricsRegistry with the given name. @param name The name of the metrics registry.
1284 Caches a metric tag with name, description, and value. @param name metric name @param description metric description @param value tag value @return MetricsTag object
1285 Constructs a MutableStat with names, descriptions, and extended flag. @param name Metric name @param description Metric description @param sampleName Sample name @param valueName Value name @param extended Extended flag
1286 Adds a tag to the registry, optionally overriding existing ones. @param info MetricsInfo object @param value Tag value @param override Whether to override existing tags @return MetricsRegistry object
1287 Adds a value to the stat and updates min/max. @param value The value to add to the statistics.
1288 Returns the standard deviation of RPC processing times.
1289 Inserts a sample value. Increments count and triggers batch processing if buffer is full.
1290 Creates a snapshot of quantile values from the samples. Returns a map of quantiles to their corresponding values.
1291 Returns the top N token real owners. @param n The number of top owners to retrieve. @return List of NameValuePair objects, sorted by value.
1292 Caches netgroups, adding them and their users if not present. @param groups List of netgroup names to cache.
1293 Returns unmodifiable collection of tokens associated with the user.
1294 Retrieves the list of groups for a given user. @param user The user whose group memberships are being retrieved. @return Unmodifiable list of group names.
1295 Retrieves a set of group names for a given user. @param user The user whose groups are being retrieved. @return Unmodifiable set of group names.
1296 Retrieves Unix groups for a user, including netgroups. @param user User's name. @return List of Unix group names.
1297 Prints an empty string to the output stream or System.out.
1298 Prints a system property and its value, or "UNSET" if absent. @param property System property name to print.
1299 Prints the value of a system environment variable. @param variable The name of the environment variable to print.
1300 Dumps the contents of a file line by line to standard output. @param file the file to dump
1301 Logs an error message with a category and formatted arguments. @param category Error category @param message Message format string @param args Arguments for formatting the message
1302 Prints a warning message to the console, formatted with category and args.
1303 Sets the authentication method for the user. @param authMethod The authentication method to set.
1304 Writes a single byte to the output stream, wrapping if enabled.
1305 Writes all bytes of the provided byte array to the stream. @param b the byte array to write @throws IOException if an I/O error occurs
1306 Checks if a delegation token is valid. @param identifier TokenIdent for the token to check. @return DelegationTokenInformation if valid. @throws InvalidToken if token is not found or expired.
1307 Sets the external delegation token secret manager. Delegates setting to the token manager.
1308 Updates the current master key for generating delegation tokens. Generates a new key, logs the update, and stores it.
1309 Default constructor. Initializes a DelegationKey with default values.
1310 Constructs a DelegationTokenAuthenticatedURL with authenticator and config. @param authenticator DelegationTokenAuthenticator instance. @param connConfigurator ConnectionConfigurator for authentication.
1311 Renews the delegation token. Retries with addDelegationTokens if renewal fails.
1312 Reads a single byte from the stream, handling SASL wrapping. Returns -1 if EOF, otherwise the byte value.
1313 Reads data from the stream, incorporating SASL authentication. @param b buffer to read into, @param off offset, @param len count @return Number of bytes read, or -1 if EOF.
1314 Authorizes a user based on user group and remote address. @param user UserGroupInformation object @param remoteAddress Remote address string @throws AuthorizationException if authorization fails
1315 Checks if HadoopLoginContext manages the UGI. Returns true if a HadoopLoginContext exists, false otherwise.
1316 Creates a proxy user with specified principal and real user. @param user The proxy user principal. @param realUser The real user for proxy authentication.
1317 Returns the real user or the original user if real user is null. @param user UserGroupInformation to check @return UserGroupInformation representing the real user or self
1318 Returns a string representation of the user, including auth method & via user.
1319 Gets the authentication method of the real user. Returns the AuthenticationMethod object.
1320 Gets the authentication method for a UserGroupInformation. @param ugi UserGroupInformation object. @return AuthenticationMethod object.
1321 Creates an IpcConnectionContextProto based on protocol, user, and auth. @param protocol RPC protocol string. @param ugi UserGroupInformation object. @param authMethod Authentication method. @return IpcConnectionContextProto object.
1322 Verifies hostname against certificate in SSLSession. @param host Hostname to verify. @param session SSLSession containing certificate. @return True if verification succeeds, false otherwise.
1323 Loads a resource by name. @param name Resource name to load. Returns SUCCESS or E_NOT_FOUND.
1324 Constructs a Command object using the provided configuration. @param conf The Configuration object to use.
1325 Constructs a CommandFactory with the provided configuration. @param conf The Configuration object to use.
1326 Constructs a FsShell object with the provided Hadoop configuration. @param conf The Hadoop Configuration object.
1327 Constructs a FindClass object with the given Hadoop configuration. @param conf The Configuration object to use.
1328 Constructs GetGroupsBase with configuration and output stream. @param conf Hadoop configuration. @param out PrintStream for output.
1329 Constructs a Configured object with a null configuration.
1330 Returns the ACL string representation. Includes '*' if all are allowed, otherwise users/groups.
1331 Retrieves the original Kerberos Ticket Granting Ticket (TGT). Returns null if no original TGT is found.
1332 Configures ZK client for SSL/TLS using provided config and keystore. @param zkClientConfig ZK client configuration object. @param truststoreKeystore Truststore/keystore object. @throws ConfigurationException if SSL config is invalid.
1333 Creates an OpensslCipher instance from transformation and engine. @param transformation Cipher transformation string. @param engineId Engine identifier (optional). @throws NoSuchAlgorithmException, NoSuchPaddingException
1334 Creates a new key version with given name and options. @param name Key name. @param options Key generation options. @return KeyVersion object.
1335 Rolls a new version of a key. @param name Key name. @throws IOException if metadata not found.
1336 Adds an element to the queue, handling backoff or adding directly. @param e The element to add. @throws InterruptedException if interrupted while waiting.
1337 Initializes the Writable RPC engine by registering the protocol.
1338 Starts the stopwatch. Throws exception if already running. Uses monotonicNowNanos() to record the start time.
1339 Stops the timer and returns the StopWatch instance. Uses monotonicNowNanos() to calculate elapsed time.
1340 Returns the elapsed time in nanoseconds. Uses monotonic clock.
1341 Computes a fingerprint for an array of methods. @param methods array of Method objects @return integer fingerprint
1342 Retrieves a ProtocolSigFingerprint for a protocol version. @param protocol Protocol class. @param serverVersion Server protocol version. @return ProtocolSigFingerprint object.
1343 Creates a RemoteException from given attributes. @param attrs Attributes containing class name and message.
1344 Returns the partial listing. Throws IOException if an exception occurred.
1345 Adds response time for backward compatibility. Uses deprecated addResponseTime method for legacy support.
1346 Attempts to add an element to queues with priorities from `priority` to `lastPriority`. Returns true if successful.
1347 Populates ResponseParams with error details from a Throwable. @param t The exception to process. @param responseParams The ResponseParams to populate.
1348 Constructs a VersionMismatch exception with interface and version details. @param interfaceName Name of the protocol interface. @param clientVersion Client's version number. @param serverVersion Server's version number.
1349 Recomputes the RPC schedule cache using priority levels. Updates the scheduleCacheRef with new priority levels.
1350 Gets priority level, using cache if available, otherwise computes. @param identity User identity. @return Priority level.
1351 Returns the hash code, delegating to the superclass.
1352 Gets the current queue index and advances to the next.
1353 Gets the remote host address. Returns null if no address.
1354 Creates a MachineList with host entries, using default InetAddressFactory. @param hostEntries Collection of host entries or IP ranges.
1355 Reads /proc/meminfo to extract memory statistics.
1356 Returns available physical memory size in KB. Uses cached values or reads /proc/meminfo.
1357 Gets cumulative CPU time in nanoseconds. Reads /proc/stat and returns tracked CPU time.
1358 Calculates average CPU usage percentage across processors. Uses `readProcStatFile`, `getCpuTrackerUsagePercent`, `getNumProcessors`.
1359 Returns the number of vcores used, derived from /proc/stat. Returns a percentage representing vcore utilization.
1360 Inserts a key-value pair into the store, resizing if needed. @param k The key to insert. @param v The value associated with the key.
1361 Creates a secure TransformerFactory instance with secure processing enabled.
1362 Creates a secure SAX TransformerFactory instance. Sets secure processing feature and optional attributes. @return SAXTransformerFactory - secure instance @throws TransformerConfigurationException on failure
1363 Formats a size as a human-readable string or raw value. @param size size in bytes @param humanReadable flag to determine formatting style @return formatted size string
1364 Formats a size value as a string, human-readable if requested. @param size size in bytes @param humanReadable flag to format as human-readable @return formatted size string
1365 Converts a long to a human-readable string with unit. @param number The long value to convert. @return Human-readable string representation of the number.
1366 Converts a byte count to a human-readable string. @param len byte count to convert
1367 Adds filesystem usage data to the usages table. @param uri filesystem URI @param fsStatus filesystem status @param mountedOnPath mount path
1368 Converts a byte array to a hex string representation. @param bytes byte array to convert
1369 Sorts a portion of the IndexedSortable using heap sort. @param s sortable structure, p start index, r end index
1370 Terminates the JVM with an ExitException. @param ee The ExitException to handle and terminate with.
1371 Terminates the JVM with a ServiceLaunchException. @param status Exit status code. @param message Error message.
1372 Terminates the JVM with an ExitException, handling Throwable cause. @param status exit status code @param t underlying Throwable cause
1373 Terminates the JVM with an ExitException. @param status Exit status code. @param msg Error message.
1374 Halts the JVM based on a status code and Throwable cause. @param status Exit status code. @param t The underlying cause.
1375 Halts the JVM with a specified status code and message. @param status Exit status code. @param message Exception message.
1376 Unregisters this shutdown hook from the manager. Handles IllegalStateException during unregistration.
1377 Creates an ArrayList from an Iterable. @param <E> The type of elements in the iterable. @param elements Iterable to create the ArrayList from.
1378 Creates a LinkedList from an Iterable. @param elements Iterable of elements to add to the list. @return A new LinkedList containing the elements.
1379 Constructs an ACL from a permission and list of entries. @param perm FsPermission representing user/group/other actions. @param entries List of existing ACL entries.
1380 Creates a new ArrayList with the specified elements. @param elements elements to add to the ArrayList @return new ArrayList containing the elements
1381 Creates an ArrayList with a capacity based on the estimated size. @param estimatedSize the expected number of elements @return new ArrayList with pre-allocated capacity
1382 Saves an object to a file as JSON bytes. @param file The file to save to. @param instance The object to serialize.
1383 Creates a StatisticDurationTracker with given store, key, and initial count. @param iostats IOStatisticsStore for tracking statistics. @param key Identifier for the tracked operation. @param count Initial counter value; incremented if positive.
1384 Creates a DurationInfo instance, logs start message based on level. @param log Logger instance for logging. @param logAtInfo Whether to log at INFO level. @param format Format string for duration. @param args Arguments for format string.
1385 Returns a string representation of the duration (mm:ss.SSS).
1386 Creates a striped CRC composer with specified parameters. @param type CRC type @param bytesPerCrcHint Bytes per CRC hint @param stripeLength Stripe length @throws IOException if type is not supported
1387 Combines two CRC values using a monomial and modulus. @param crcA First CRC value. @param crcB Second CRC value. @param lengthB Length of data in bytes. @param mod Modulus value.
1388 Writes the current CRC value to the digest and resets. @return byte array containing the CRC digest
1389 Extracts JAR entries to a directory and saves a copy. @param inputStream JAR input stream @param toDir directory to extract files to @param name name of the JAR file @param unpackRegex regex for filtering entries
1390 Extracts JAR entries to a directory. @param jarFile JAR file to extract. @param toDir destination directory.
1391 Finds the n-th occurrence of a byte within the array. @param utf byte array @param b byte to find @param n occurrence number @return Index of the byte or -1 if not found
1392 Retrieves value associated with key. @param key The key to look up. @return Value or new value if not found.
1393 Logs lock held time warnings if exceeding threshold. @param acquireTime Lock acquire time. @param releaseTime Lock release time. @param checkLockHeld Flag to check if lock was held.
1394 Formats a time string with a time difference. @param formattedFinishTime Finish time string. @param finishTime Finish time in milliseconds. @param startTime Start time in milliseconds.
1395 Splits a string by commas, handling escape characters. @param str String to split. @return Array of strings.
1396 Converts a string to camelCase. @param s The input string to convert. @return The camelCase version of the string.
1397 Escapes characters in a string using a specified escape char. @param str string to escape @param escapeChar char to use for escaping
1398 Unescapes a string, removing escape sequences. @param str input string to unescape @param escapeChar escape character @return unescaped string
1399 Creates a startup/shutdown message with class name, host, args, and version info.
1400 Returns the build version string, including revision, user, checksum.
1401 Returns the next element in the filtered stream. Throws NoSuchElementException if no next element exists.
1402 Checks if the source iterator has more elements. Closes the iterator if it doesn't.
1403 Creates a LazyAutoCloseableReference from a supplier. @param supplier Supplier that provides the AutoCloseable resource.
1404 Gets the page size for a BulkDelete object. @param fs FileSystem object. @param path Path to delete. @return Page size of the BulkDelete object.
1405 Bulk deletes a collection of paths using a BulkDelete object. @param fs FileSystem instance @param base Base path for the BulkDelete @param paths Paths to delete @return List of deleted paths
1406 Opens a file with specified options and returns an FSDataInputStream. @param fs FileSystem instance. @param path Path to open.
1407 Reads data from an InputStream at a specified position into a ByteBuffer. @param in InputStream to read from @param position Starting position for reading @param buf ByteBuffer to store the read data
1408 Loads an IOStatisticsSnapshot from the specified path. @param fs FileSystem object @param path Path to the snapshot file @return IOStatisticsSnapshot object
1409 Parses a JSON string into an IOStatisticsSnapshot. @param json JSON string representing the snapshot. @return IOStatisticsSnapshot object.
1410 Gets the value, initializing it if needed and handling I/O errors. @return The value of type T. @throws UncheckedIOException if an I/O error occurs.
1411 Creates a Builder for processing items from the given Iterable. @param items Iterable of items to process.
1412 Extracts and re-throws the inner IOException from an ExecutionException.
1413 Awaits the completion of a Future, handling exceptions. @param future The Future to await. @return The result of the Future.
1414 Awaits future completion within a timeout. @param future Future to await. @param timeout Timeout duration. @param unit Timeout unit (e.g., TimeUnit.SECONDS) @return Result of the future.
1415 Extracts and re-throws the inner IOException from a CompletionException.
1416 Sets the configuration for an object, if Configurable. @param theObject Object to configure. @param conf Configuration object.
1417 Retrieves a class by name, using cached or configured sources. @param name Class name to retrieve. @param conf Hadoop configuration object. @return Class object or throws IOException.
1418 Loads a class by name, using configuration or default. @param conf Hadoop configuration; null uses default. @param className Class name to load. @return Class object or throws RuntimeException if not found.
1419 Retrieves a class by name from the Hadoop configuration. @param name Class name to retrieve. @return Class object.
1420 Logs thread info to a log, throttled by minInterval. @param log Logger instance. @param title Thread dump title. @param minInterval Minimum interval between logs.
1421 Logs thread information to a logger, throttled by minInterval. @param log Logger to use for logging. @param title Title for the thread dump. @param minInterval Minimum interval between logs (seconds).
1422 Constructs builder; ensures only path or pathHandle is provided. @param optionalPath Optional path; must be null or present. @param optionalPathHandle Optional pathHandle; must be null or present.
1423 Constructs a Configuration object, loading default settings.
1424 Validates HTTP response status; throws exception on mismatch. @param conn HttpURLConnection to validate @param expectedStatus Expected HTTP status code
1425 Creates a CRC32C checksum, using Java9 or pure Java implementation.
1426 Generates command to retrieve user groups based on OS. @param userName The username to query for groups. @return Array of strings representing the command.
1427 Generates command to get user's group IDs. OS-specific. @param userName The username to query. @return Array of strings representing the command.
1428 Generates chmod command with file path. @param perm Permission string. @param recursive Recursive flag. @param file File path to apply permissions.
1429 Checks if a process is alive using signal kill command. @param pid Process ID to check. @return Array of strings representing the command.
1430 Returns the canonical path of the Hadoop home directory.
1431 Gets the absolute path to a Hadoop executable. @param executable Executable file name @return File object representing executable path
1432 Adds a new phase, sets equal weightage, and returns it.
1433 Adds multiple phases to the progress tracker. @param n The number of phases to add.
1434 Adds a new phase with the given status and weightage. @param status Phase status. @param weightage Phase weightage, must be non-negative. @return The newly created Progress phase object.
1435 Returns the progress value. Delegates to getInternal() for the actual calculation.
1436 Creates a persistent node at the given path. @param path Node path to create. @return True if the node was created.
1437 Creates root directory recursively. @param path Root directory path. @param zkAcl ACLs to apply to the nodes.
1438 Sets the unbound method to be invoked using a class name. @param className Target class name. @param methodName Method name. @param argClasses Argument classes. @return this Builder instance.
1439 Sets the unbound method to be invoked. @param targetClass Target class. @param argClasses Argument classes. @return this Builder instance.
1440 Binds a hidden method on a class using its name and argument types. @param className Name of the class containing the method. @param methodName Name of the hidden method. @param argClasses Argument types of the hidden method.
1441 Binds a hidden method on the target class with given arg types. @param targetClass Class containing the hidden method @param argClasses Argument types of the hidden method @return Builder instance
1442 Loads an invocation method, defaulting to NOOP if source is null. @param source Class to load method from @param returnType Return type of the method @param name Method name @param parameterTypes Method parameter classes @return UnboundMethod instance
1443 Checks if all required methods are available; throws exception if not.
1444 Checks if the bulkDelete method is available. @return True if bulkDelete is available, false otherwise.
1445 Checks if the fileSystem_openFile method is available. @return True if the method is available, false otherwise.
1446 Checks if byteBufferPositionedReadableReadFullyAvailableMethod is available.
1447 Checks if byteBufferPositionedReadableReadFullyAvailable is available. @param in Input stream to read from. @return True if available, false otherwise.
1448 Checks if I/O statistics snapshot creation is available.
1449 Checks if I/O statistics context is enabled. @return True if enabled, false otherwise.
1450 Checks if the unbound method is available; throws exception if not. @param method The unbound method to check.
1451 Binds a checked method to a receiver object. @param receiver The object to bind the method to. @return A BoundMethod instance. @throws NoSuchMethodException if method is not found
1452 Binds the method to a receiver object and returns a BoundMethod. @param receiver The object to bind the method to.
1453 Builds a `StaticMethod` instance using a checked build process. @throws NoSuchMethodException if method is not found
1454 Creates and returns a `StaticMethod` instance. Uses `build()` to create and then converts to static.
1455 Loads available file systems using ServiceLoader. Populates SERVICE_FILE_SYSTEMS with loaded file systems.
1456 Computes and prints the Jenkins hash of a file. @param args Command-line arguments: filename
1457 Constructs a HashFunction with specified parameters. @param maxValue Max value for hash calculation. @param nbHash Number of hash functions to use. @param hashType Type of hash function to use.
1458 Default constructor. Initializes a new RetouchedBloomFilter.
1459 Estimates the count of a key's occurrences. @param key The key to estimate the count for. @return Approximate count of the key.
1460 Adds a key to the false positive vector. @param key The key to add; throws NullPointerException if null.
1461 Removes a key from the filter's key vectors. @param k Key to remove; throws NullPointerException if null. @param vector Key vectors to update.
1462 Finds the index of the key with the minimum weight. @return Index of the key with the minimum weight.
1463 Finds the index of the FP vector with the maximum weight. @return Index of the FP vector with the highest weight.
1464 Calculates the ratio of key weight to false positive weight.
1465 Dumps a resource to stdout. @param name Resource name to dump. @return Success/failure code.
1466 Prints usage instructions and return codes to the user. Returns E_USAGE to indicate a usage error.
1467 Inserts an element into the priority queue. Returns true if insertion successful, false otherwise.
1468 Creates a TreeSet containing elements from the given iterable. @param elements Iterable of elements to add to the TreeSet. @return A new TreeSet containing the elements.
1469 Creates a HashSet from an Iterable. Handles Collection and Iterator cases.
1470 Creates a HashSet from the given elements. @param elements Elements to add to the HashSet. @return A new HashSet containing the provided elements.
1471 Runs a Hadoop program based on command-line arguments. @param args Program name and its arguments. @return 0 on success, -1 on failure.
1472 Adds a column with given title, justification, and wrap. @param title Column title @param justification Justification type @param wrap Whether to wrap text @return this Builder instance
1473 Parses a time duration string, converts to specified unit. @param name Property name @param vStr Duration string @param unit Target time unit for conversion
1474 Appends a property to the XML document, redacting if needed. @param doc Document to append to, propertyName, redactor
1475 Adds deprecation deltas to the current deprecation context. @param deltas Array of deprecation updates to apply.
1476 Attempts to bind a listener to a port within a range. @param listener ServerConnector to bind. @param startPort Initial port to try. @throws Exception if binding fails after trying all ports.
1477 Adds target info to environment variables based on HA state. @param target Target object with fencing parameters. @param environment Map to store environment variables.
1478 Reads data from a PositionedReadable into a ByteBuffer. @param stream Readable stream to read from. @param range FileRange to read. @param buffer ByteBuffer to write data to.
1479 Validates and sorts a list of FileRange objects. @param ranges List of FileRange objects to validate. @throws EOFException if ranges are invalid.
1480 Sets the buffer state to CACHING and associates a future action. @param actionFuture Future representing the caching action.
1481 Updates the buffer's state to `newState` if current state matches. @param newState The new state to transition to. @param expectedCurrentState Expected current state array.
1482 Checks if a path exists and is a directory. @param path the path to check @param argName name of the path argument
1483 Checks if path exists and is a regular file. @param path the path to check @param argName name of the path argument
1484 Checks if a block is the last block in the file. @param blockNumber The block number to check. @return True if the block is the last one, false otherwise.
1485 Calculates the starting offset for a given block number. @param blockNumber The block number to calculate offset for. @return The starting offset in bytes.
1486 Gets the state of a block. @param blockNumber The block number to retrieve state for.
1487 Sets the state of a block. @param blockNumber Block number to set state for. @param blockState The new state to apply.
1488 Calculates the block number for a given offset. @param offset The offset within the file. @return The corresponding block number.
1489 Aggregates statistics from a snapshot with provided IOStatistics. @param snapshot The snapshot to aggregate. @param statistics IOStatistics to use for aggregation. @return True if aggregation was successful, false otherwise.
1490 Saves an IOStatisticsSnapshot to a file system path. @param snapshot Snapshot to save, or null. @param fs FileSystem to use. @param path Path to save the snapshot to. @param overwrite Whether to overwrite existing files.
1491 Gets counters from an IOStatisticsSnapshot. @param source Serializable object containing the snapshot @return Map of counter names to their values
1492 Retrieves gauge statistics from an IOStatisticsSnapshot. @param source Serializable object representing the snapshot @return Map of gauge statistics.
1493 Gets minimum values for each statistic in the snapshot. @param source Serializable object containing IOStatisticsSnapshot @return Map of statistic names to minimum values (Longs)
1494 Gets maximum values for each statistic in a snapshot. @param source Serializable object representing the snapshot @return Map of statistic names to their maximum values.
1495 Calculates mean statistics for a Serializable, returning a map. @param source Serializable object containing I/O statistics @return Map of string keys to pairs of Long values (samples, sum)
1496 Creates a copy of this FlagSet with the same flags.
1497 Creates a new FlagSet instance with specified enum class, prefix, and flags. @param enumClass Enum class representing the flags. @param prefix Prefix for enum names. @param flags Initial set of flags.
1498 Closes the FileSystem instance, setting it to null.
1499 Closes all FileSystem instances, optionally only automatic ones. @param onlyAutomatic if true, closes only automatically registered FS. @throws IOException if any FileSystem fails to close.
1500 Serializes an IOStatisticsSnapshot to a JSON string. @param snapshot The snapshot to serialize.
1501 Writes byte data to a file using the provided FileContext. @param fileContext Hadoop FileContext object @param path Path to the file to write to @param bytes Byte array to write @return The provided FileContext
1502 Writes lines to a file using the provided charset. @param fileContext Hadoop FileContext object @param path path to the file @param lines lines to write @param cs Charset to use for encoding @return FileContext object
1503 Writes a CharSequence to a file using the provided charset. @param fs file context @param path file path @param charseq data to write @param cs character set @return FileContext object
1504 Creates a new FSDataOutputStreamBuilder for the given path. @param path The path to create the output stream for. @return FSDataOutputStreamBuilder object.
1505 Creates a file stream builder for the given path. Creates the file and overwrites if it exists.
1506 Creates an appendable FSDataOutputStreamBuilder for a path. @param path The path to append data to. @return FSDataOutputStreamBuilder object.
1507 Creates an appendable FSDataOutputStreamBuilder for the given path. @param path Path to create the appendable output stream for. @return FSDataOutputStreamBuilder for appending to the path.
1508 Lists statuses of files/directories under the given path. @param f Path to check @return Array of FileStatus objects
1509 Lists file statuses for paths, using the default filter. @param files Paths to check @return Array of FileStatus objects
1510 Creates a new MutableCounterInt metric. @param info MetricsInfo object describing the metric @param iVal initial value for the counter @return The newly created MutableCounterInt
1511 Creates a new MutableCounterLong metric. @param info MetricsInfo object describing the metric. @param iVal Initial value for the counter. @return The new MutableCounterLong metric.
1512 Creates a MutableGaugeLong metric. @param info MetricsInfo object @param iVal initial value @return Newly created MutableGaugeLong metric
1513 Creates a new MutableGaugeFloat metric. @param info MetricsInfo object describing the metric @param iVal Initial value for the gauge @return The new MutableGaugeFloat instance
1514 Creates a new MutableGaugeInt metric. @param info MetricsInfo object @param iVal Initial integer value @return The new MutableGaugeInt metric
1515 Resolves a filesystem link using the provided function. @param fileContext Hadoop FileContext. @param path Path to resolve. @param fn Link resolution function. @return Resolved value of type T.
1516 Creates a new GlobBuilder instance. @param fileContext Hadoop FileContext to use. @return A new GlobBuilder object.
1517 Creates a new GlobBuilder instance with the given FileSystem. @param filesystem The FileSystem to use for path operations.
1518 Checks if the asynchronous call is complete. Returns true if done, false otherwise.
1519 Retrieves and clears the async return, or fetches from lower layer.
1520 Refreshes the used space by calculating folder usage. Uses `getFolderUsage` to update the `used` value.
1521 Copies statistics from another MeanStatistic instance.
1522 Converts an IOStatisticsSource to a formatted string. @param source Object providing IO statistics, or null. @return Formatted string or empty string on error.
1523 Returns a string representation of the wrapped IOStatistics. @return Formatted string representation.
1524 Returns a string representation of statistics, or a null placeholder.
1525 Converts IOStatistics to a formatted string representation. @param statistics The IOStatistics object to format. @return Formatted string or "" if statistics is null.
1526 Creates a DurationTracker, using factory if provided, else STUB. @param factory DurationTrackerFactory, or null @param statistic Statistic key for the tracker @return DurationTracker instance
1527 Deletes a block file from cache and evicts it. @param elementToPurge Entry representing the block to purge.
1528 Creates IOStatistics from StorageStatistics. Iterates through long statistics and adds them to the builder.
1529 Adds an atomic long counter to the builder. @param key Counter key. @param source AtomicLong source.
1530 Adds an atomic integer counter to the builder. @param key Counter key. @param source AtomicInteger source.
1531 Adds a mutable long counter to the builder. @param key Counter key. @param source MutableCounterLong instance.
1532 Adds an AtomicLong gauge to the statistics. @param key Gauge key. @param source AtomicLong source.
1533 Adds an AtomicInteger gauge to the statistics. @param key Gauge key. @param source AtomicInteger to expose.
1534 Adds an AtomicLong as a minimum value source for a key. @param key Key for the minimum value. @param source AtomicLong to track.
1535 Adds an AtomicInteger's current value as the minimum for a key. @param key Key for the minimum value calculation @param source AtomicInteger to track
1536 Adds an AtomicLong as a maximum value source for a key. @param key Key for the maximum value. @param source AtomicLong to track maximum value.
1537 Adds an AtomicInteger's value as a maximum for the given key. @param key Key for the maximum value evaluator. @param source AtomicInteger to track max value.
1538 Registers interrupt handlers and sets default uncaught exception handler.
1539 Accepts a connection on the socket. Returns a new DomainSocket representing the accepted connection. @throws IOException if an I/O error occurs.
1540 Shuts down the domain socket. Uses internal shutdown and refCount.
1541 Sends file descriptors and data. @param descriptors File descriptors to send. @param jbuf Data buffer. @param offset Offset in jbuf. @param length Length of data to send.
1542 Receives file descriptors and creates FileInputStream. @param streams Output array for FileInputStreams. @param buf Buffer for data. @param offset Offset in buffer. @param length Length of data to receive. @return Number of bytes received.
1543 Creates a new IOStatisticsContextImpl instance with a key. @param key The key used to identify the context. @return A new IOStatisticsContextImpl instance.
1544 Verifies chunked sums using native or standard verification. @param data ByteBuffer containing data. @param checksums ByteBuffer containing checksums. @param fileName File name. @param basePos Base position. @throws ChecksumException if verification fails.
1545 Returns padding byte after decryption, re-initializes decryptor if needed. @param decryptor Decryptor object @param position Current position in the stream @param iv Initialization vector @return Padding byte
1546 Resets the stream offset and reinitializes the decryptor. @param offset New offset for the stream.
1547 Writes data to the stream, encrypting it before buffering. @param b data to write @param off starting offset in the data @param len number of bytes to write @throws IOException if an I/O error occurs
1548 Flushes the output stream, encrypting data before flushing.
1549 Compiles a glob pattern into a java.util.regex.Pattern. @param globPattern The glob pattern to compile.
1550 Gets bytes read for a given distance. @param distance Distance from the local host (0-based). @return Total bytes read for the specified distance.
1551 Creates a primitive data output stream. @param f Path to create.
1552 Constructs an AbstractFileSystem with a URI and scheme. @param uri The URI for the file system. @param supportedScheme Expected URI scheme.
1553 Encodes input byte arrays into output arrays using erasure coding. @param inputs Input byte arrays to be encoded. @param outputs Output byte arrays to store encoded data.
1554 Encodes input ByteBuffers into output ByteBuffers. Updates input buffer positions after encoding.
1555 Constructs an ArrayPrimitiveWritable with the provided array. @param value The array to be wrapped.
1556 Delegates canonical URI retrieval to the underlying file system.
1557 Checks if the stream has the given capability. Returns false if probing for sync capability.
1558 Releases a BufferData object and associated resources. @param data The BufferData object to release.
1559 Releases all BufferData objects in DONE state from the pool.
1560 Constructs a CachingBlockManager with provided parameters. @param blockManagerParameters Parameters for block management.
1561 Reads a file block into a ByteBuffer. @param blockNumber Block number to read. @param buffer Buffer to store the block data.
1562 Calculates the absolute position of the buffer. Returns the sum of buffer start offset and relative position.
1563 Checks if the buffer has been fully read. Returns true if all bytes have been read.
1564 Sets the absolute position of the buffer. @param pos The absolute position to set. @return True if successful, false otherwise.
1565 Gets the current IO statistics context. Returns null if unavailable.
1566 Sets the I/O statistics context for the current thread. @param statisticsContext The context to set; null to remove.
1567 Retrieves instance-specific MetricsConfig subsets by type. @param type Configuration type to filter metrics. @return Map of instance names to MetricsConfig instances.
1568 Parses command arguments, removing initial elements. @param args Command-line arguments. @param pos Index to remove elements up to (exclusive).
1569 Increments error count and displays a warning message. @param message Error message to display.
1570 Creates a PathHandle for a file, throwing exceptions if it's a directory or symlink, or if the authority isn's "file://".
1571 Returns a new array containing HandleOpt instances for no changes/moves.
1572 Returns an array of HandleOpt instances: no change, allow move.
1573 Returns an array of HandleOpt instances: changed allowed, moved disallowed.
1574 Returns an array containing HandleOpt instances for changes & moves.
1575 Constructs a ShellCommandExecutor with provided command, dir, env, timeout, inheritParentEnv.
1576 Initializes the refresh thread to update space usage. @param runImmediately Flag to start the thread immediately.
1577 Creates a private token from this token for a new service. @param newService The new service associated with the token. @return A new PrivateToken instance.
1578 Checks if the path has a scheme but is not absolute. Throws IllegalArgumentException if condition is met.
1579 Checks if the path is absolute and has null scheme/authority.
1580 Checks if the URI path is absolute.
1581 Checks if a path is valid within the file system. @param path The path to validate.
1582 Writes the FileStatus to an output stream in a serialized format. @param out DataOutput to write the serialized status to.
1583 Validates arguments for a part upload. @param filePath Path of the part to upload. @param lengthInBytes Length of the part in bytes.
1584 Aborts ongoing uploads under the given path. @param path Path under which uploads are aborted. @return CompletableFuture representing the abortion result.
1585 Skips specified bytes, preventing skipping past the file length. @param n Number of bytes to skip @return Actual number of bytes skipped @throws IOException if an I/O error occurs
1586 Applies a umask to the current permissions. @param umask The umask to apply. @return A new FsPermission with the umask applied.
1587 Creates an FsPermission object from SFTP file permissions. @param sftpFile Entry containing SFTP file attributes. @return FsPermission representing file permissions.
1588 Constructs an FsPermission object from an integer mode. @param mode Integer representing the permission bits.
1589 Returns the default FsPermission object (00777).
1590 Returns the default directory permission. Creates a new FsPermission with default directory bits.
1591 Returns the default file system permission. Creates a new FsPermission with default read/write access.
1592 Returns the default file system permission for cache pools. Returns a new FsPermission object with mode 00755.
1593 Creates an FsPermission from a symbolic Unix permission string. @param unixSymbolicPermission Symbolic permission string (e.g., "rwxrwxrwx") @return FsPermission object representing the permission bits.
1594 Prints ACL entries, using extended format if not minimal. @param aclStatus ACL status object. @param fsPerm Base permission. @param entries List of ACL entries to print.
1595 Converts a list of ACL entries to a comma-separated string. @param aclSpec List of AclEntry objects to convert. @return Comma-separated string representation of ACL entries.
1596 Constructs an FsPermission object from a string representation. @param mode String representing the permission bits.
1597 Reads up to `length` bytes from the buffer into `b`. @param b buffer to read into, offset start index, length of bytes to read @return number of bytes read, or -1 if EOF
1598 Calculates the compressed size of the data written so far.
1599 Adjusts column widths based on file status data. @param items Array of PathData objects to analyze.
1600 Gets quota usage for a path. @param f The path to get quota usage for.
1601 Gets the used space for a path. @param path The path to get the used space for. @return The used space in bytes.
1602 Constructs an AbstractLaunchableService with the given name. @param name Service name.
1603 Transitions service to a proposed state, validating the change. @param proposed The desired state to transition to. @return The previous state of the service.
1604 Instantiates a service class using the provided configuration. @param conf Hadoop configuration object @return Service instance or null if instantiation fails
1605 Checks if this BinaryComparable is equal to another. @param other The object to compare to. @return True if equal, false otherwise.
1606 Copies byte array data into the BytesWritable. @param newData Source byte array. @param offset Starting offset in newData. @param length Number of bytes to copy.
1607 Copies key to provided BytesWritable. @param key The BytesWritable to populate with the key. @return Length of the copied key.
1608 Lists files in a directory. Throws exception if directory is inaccessible. @param dir The directory to list. @return String array of file names.
1609 Checks directory read, write, and execute permissions. @param dir The directory to check. @throws DiskErrorException if any permission check fails.
1610 Locks a direct ByteBuffer into memory. @param buffer ByteBuffer to lock; must be direct. @param len number of bytes to lock @throws IOException if native code isn't loaded or buffer isn't direct
1611 Creates a SharedFileDescriptorFactory for given prefix and paths. @param prefix File descriptor prefix. @param paths Array of storage paths. @throws IOException if creation fails.
1612 Writes checksum chunks to the output stream. Writes data in chunks, calculating and writing checksums.
1613 Calculates checksums for data using native code or Java summer. @param data Input data as a ByteBuffer. @param checksums ByteBuffer to store calculated checksums.
1614 Releases allocated buffers and cleans the buffer pool.
1615 Initializes the stream with given capacity and writing limit. @param capacity The initial capacity of the internal buffer.
1616 Decodes token data from a URL-encoded string. @param newValue Base64 encoded string value @throws IOException if decoding fails
1617 Returns erased blocks from a block group. @param blockGroup ECBlockGroup to extract erased blocks from. @return Array of ECBlock representing erased blocks.
1618 Skips to the next occurrence of a marker in the compressed stream. @param marker The marker to search for. @param markerBitLength Length of the marker in bits. @return True if marker found, false otherwise.
1619 Creates a CBZip2OutputStream with specified output stream and block size. @param out output stream to write compressed data @param blockSize block size for compression (1-9) @throws IOException if an I/O error occurs
1620 Constructs a BlockCompressorStream with default buffer & overhead. @param out Output stream. @param compressor Compressor.
1621 Constructs a BlockDecompressorStream with input, decompressor, and buffer size.
1622 Writes data to the stream, compressing it as needed. Handles data limits and flushes data when necessary.
1623 Constructs a ZStandardCompressor with level & buffer size. @param level Compression level @param bufferSize Buffer size for input/output
1624 Creates a compression output stream using a codec and pool. @param codec Compression codec. @param conf Hadoop configuration. @param out Output stream. @return CompressionOutputStream instance.
1625 Closes the writer, releasing resources and returning the compressor.
1626 Creates a CompressionInputStream using a codec and input stream. @param codec Compression codec to use. @param in Input stream to compress. @return CompressionInputStream instance.
1627 Closes the reader, returning decompressors and closing serializers/input stream.
1628 Creates a Zlib compressor based on native library availability. @param conf Hadoop configuration object. @return ZlibCompressor instance.
1629 Gets a DirectDecompressor, using native Zlib if available. @param conf Hadoop configuration object. @return ZlibDirectDecompressor or null if native Zlib unavailable.
1630 Gets a Zlib decompressor, using native Zlib if available. @param conf Hadoop configuration object. @return ZlibDecompressor or BuiltInZlibInflater.
1631 Stores a delegation key to SQL and cache. @param key The DelegationKey to store. @throws IOException if storage fails.
1632 Updates a delegation key, persisting it to SQL and cache. @param key The delegation key to update. @throws IOException if update fails.
1633 Reads a string safely from input, limiting its length. @param in DataInput to read from. @param maxLength Maximum allowed string length.
1634 Skips a variable-length integer's worth of bytes from input. @param in DataInput stream to skip from.
1635 Reads data into a buffer and resets the codec. @param buffer DataInputBuffer to be populated. @param filter CompressionInputStream to reset.
1636 Reads a UTF-8 encoded string from input, up to maxLength. @param in DataInput to read from @param maxLength Maximum string length @return Decoded String
1637 Writes a string to the DataOutput, writing -1 if null. @param out Output stream to write to @param s String to write
1638 Creates a Text object representing the token service address. @param addr InetSocketAddress of the token service. @return Text object containing host and port.
1639 Creates a Token from a TokenProto object. @param tokenProto TokenProto object to convert. @return Token object.
1640 Writes an enum's name to a DataOutput stream as a string. @param out DataOutput to write to @param enumVal Enum value to write
1641 Writes username, groupname, and permission to the output. @param out Output stream. @param username User's username. @param groupname Group's name. @param permission FsPermission object.
1642 Initializes a Text object with the provided UTF-8 byte array. @param utf8 The UTF-8 byte array to initialize with.
1643 Initializes a new Text object with a copy of another Text. @param utf8 The Text object to copy from.
1644 Reads a line from the input, using custom or default delimiters. @param str Text object to append the line to. @param maxLineLength Max line length. @param maxBytesToConsume Max bytes to consume. @return Bytes consumed before newline.
1645 Returns the length of the text as a string. Calculates length if not already determined.
1646 Constructs a new SortedMapWritable as a copy of another. @param other The SortedMapWritable to copy from.
1647 Constructs a new MapWritable as a copy of another. @param other The MapWritable to copy.
1648 Creates a RetryPolicy with a maximum time and fixed sleep. @param maxTime Max time for retries. @param sleepTime Sleep duration. @param timeUnit Time unit for sleepTime.
1649 Creates a dynamic proxy instance for the given interface. @param iface Interface to proxy. @param proxyProvider Proxy provider for proxy objects. @param retryPolicy Retry policy to use for invocations.
1650 Creates a dynamic proxy with retry functionality. @param iface Interface to proxy. @param implementation Initial implementation. @param methodNameToPolicyMap Retry policies per method.
1651 Initializes a Writer with an output stream, compression name, and config. @param fout FSDataOutputStream for writing data @param compressionName Compression algorithm name @param conf Hadoop configuration @throws IOException if output file is not at zero offset
1652 Constructs a TFileIndex with entries from input. @param entryCount Number of entries in the index. @param in DataInput stream for reading index data.
1653 Checks for end-of-file. Returns true if EOF or closed.
1654 Flushes the buffer to the output stream if it contains data. Writes buffered data using writeChunk.
1655 Compares this key with another key. @param key The key to compare with. @return Comparison result.
1656 Constructs a UTF8 object from a string, encoding it. @param string The string to encode; truncated if too long.
1657 Computes MD5 hash of a string. @param string The string to hash. @return MD5Hash object representing the hash.
1658 Synchronizes buffered records to the output stream. Writes record count, keys/lengths, values/lengths, and resets.
1659 Generates and returns the token's tracking ID (MD5 hash). Generates ID if it's null.
1660 Encodes the token as a URL-safe string. @return URL-safe string representation of the token.
1661 Adds a node to the network topology. @param node The node to add.
1662 Removes a node from the network topology. @param node The node to remove. Throws exception if inner node.
1663 Decommissions a node from the network topology. @param node The node to decommission.
1664 Sorts nodes by distance from a reader node. @param reader Source node. @param nodes Nodes to sort.
1665 Sorts nodes by distance from a reader node, using secondary sort. @param reader Source node. @param nodes Array of nodes to sort.
1666 Initializes SocketInputStream with a channel and timeout. @param channel ReadableByteChannel to read from. @param timeout Timeout duration in milliseconds. @throws IOException if the channel is invalid.
1667 Constructs a SocketOutputStream with a channel and timeout. @param channel WritableByteChannel to write to. @param timeout Timeout in milliseconds. @throws IOException if the channel is invalid.
1668 Retrieves RPC response, waits if needed, and handles errors. @param call RPC call object @param connection Connection object @param timeout Timeout duration @param unit Time unit for timeout @return Writable RPC response or null if timeout @throws IOException if interrupted or error occurs
1669 Default constructor, initializes with a RawScriptBasedMapping.
1670 Constructs a ScriptBasedMappingWithDependency using a RawScriptBasedMapping.
1671 Creates a parent node with the given name and updated path. @param parentName Name of the parent node to create.
1672 Adds a DomainSocket and handler for monitoring. @param sock The socket to monitor. @param handler Handler to notify on socket events.
1673 Removes a socket for processing. @param sock The socket to remove.
1674 Selects on a channel with a timeout, retrying if needed. @param channel SelectableChannel to select on. @param ops Operations to select for. @param timeout Timeout in milliseconds. @return int representing the number of selected keys. @throws IOException if an I/O error occurs.
1675 Returns the first IP address for a given network interface. @param strInterface Interface name. @return First IP address or null if none are found.
1676 Resolves hostnames for a network interface. @param strInterface Interface name. @return Array of hostnames or empty array if none found.
1677 Gets the default host for a network interface. @param strInterface Interface name, or null/\"default\" for default. @param nameserver Optional nameserver, or null/\"default\". @param tryfallbackResolution Whether to try fallback resolution. @return Hostname.
1678 Loads MetricsConfig from specified files, returning the first successful load. @param prefix configuration prefix @param fileNames configuration file names @return MetricsConfig object
1679 Loads group names for a user, caching results and handling empty sets. @param user User identifier. @return Set of group names.
1680 Shuts down the JVM metrics singleton, unregistering the source.
1681 Stops the server, interrupting handlers, listeners, and responders. Shuts down metrics and RPC metrics.
1682 Stops the HTTP server, including connectors, context, and server. Handles exceptions and aggregates them into a MultiException.
1683 Constructs a MutableQuantiles object with specified parameters. @param name Metric name, capitalized. @param description Metric description, uncapitalized.
1684 Creates a new MutableStat. @param name Metric name, validated before creation. @param desc Description @param sampleName Sample name @param valueName Value name @param extended Extended flag @return The created MutableStat
1685 Constructs a MutableStat with names, descriptions, and flags. @param name Metric name @param description Metric description @param sampleName Sample name @param valueName Value name
1686 Sets the context for the metrics registry. @param name Context name; overrides existing context. @return MetricsRegistry object.
1687 Adds a tag to the registry. @param name Tag name @param description Tag description @param value Tag value @param override Whether to override existing tags @return MetricsRegistry object
1688 Adds elapsed time to a metric, creating it if necessary. @param name Metric name. @param elapsed Elapsed time in milliseconds.
1689 Publishes metrics to registered sinks. @param buffer MetricsBuffer to publish. @param immediate True to publish immediately, false to queue.
1690 Copies the current statistics to another SampleStat object. @param other The SampleStat object to copy to.
1691 Logs slow RPC calls if processing time exceeds a threshold. @param methodName RPC method name.
1692 Refreshes the netgroup cache by fetching, clearing, and recaching groups.
1693 Prints a newline and a separator line ("-----").
1694 Prints a formatted title to the console with surrounding newlines. @param format Format string for the title. @param args Arguments for formatting the title.
1695 Logs an error and throws a KerberosDiagsFailure. @param category Error category. @param message Error message. @param args Arguments for message formatting.
1696 Creates a remote UserGroupInformation for a given user. @param user The username. @param authMethod The authentication method to use.
1697 Starts token removal thread and updates the current key. Checks if threads are running, updates key, and starts cleanup.
1698 Rolls the master key for delegation tokens. Updates the key and ensures its proper expiry.
1699 Constructs a DelegationTokenAuthenticatedURL with null authenticator/config.
1700 Constructs a DelegationTokenAuthenticatedURL with authenticator. @param authenticator DelegationTokenAuthenticator instance.
1701 Constructs a DelegationTokenAuthenticatedURL with a config. @param connConfigurator ConnectionConfigurator for authentication.
1702 Reads data into the provided byte array. @param b byte array to read into @return Number of bytes read, or -1 if EOF.
1703 Checks if the UGI was created from a keytab. Uses Kerberos credentials and login context info.
1704 Checks if UGI is from a ticket, Kerberos, and no keytab.
1705 Initializes the default SSL factory with a preferred channel mode. @param preferredMode Desired SSL channel mode. @throws IOException if SSL context initialization fails.
1706 Constructs a CommandFactory with default configuration.
1707 Default constructor. Must call #initialize() to setup FS.
1708 Initializes a new HarFileSystem instance. @param fs The underlying FileSystem instance.
1709 Constructs a FsShell object with a null configuration.
1710 Constructs GetGroupsBase with Hadoop configuration. @param conf Hadoop configuration.
1711 Default constructor. Initializes standard output and error streams.
1712 Resolves a hostname to an InetAddress, using various strategies. @param host The hostname to resolve. @throws UnknownHostException if resolution fails.
1713 Writes the ACL string representation to the output stream. Uses Text.writeString to encode and write the string.
1714 Creates and initializes a ZooKeeper connection. Configures SSL if a truststore/keystore is provided. @throws IOException if connection fails or SSL config is invalid.
1715 Gets the size of the queue for the given key. @param keyName The key whose queue size is retrieved.
1716 Retrieves up to `num` elements from the queue for `keyName`. @param keyName Key for the value queue. @param num Maximum number of elements to retrieve. @return List of retrieved elements.
1717 Drains all elements from the queue for the given key. @param keyName The key whose queue will be drained.
1718 Adds an element to the queue, applying backoff or adding directly. @param e The element to add. @throws InterruptedException if interrupted while waiting.
1719 Initializes the RPC engine if not already initialized. Calls `initialize()` to set up the RPC protocol.
1720 Returns elapsed time converted to the specified time unit. @param timeUnit The time unit to convert to (e.g., SECONDS) @return Elapsed time in the given time unit.
1721 Gets a ProtocolSignature based on client hash and server version. @param clientMethodsHashCode Client method hash. @param serverVersion Server protocol version. @param protocol Protocol class. @return ProtocolSignature object.
1722 Decays current RPC costs, updates metrics, and recomputes schedule.
1723 Gets priority level for a schedulable object. @param obj The schedulable object. @return Priority level, ensuring it's non-negative.
1724 Removes and returns the next element from the queue. Handles potential race conditions by looping through queues.
1725 Closes the connection, releasing resources and cleaning up calls.
1726 Constructs a Globber instance with given file system, path, filter, and symlink resolution.
1727 Creates a MachineList from host entries using default address factory. @param hostEntries Comma/newline-separated string of entries.
1728 Creates and returns a SysInfo instance based on the OS. Throws UnsupportedOperationException if OS is unknown.
1729 Gets physical memory size in KB, based on /proc/meminfo.
1730 Calculates available virtual memory size (KB). Adds free swap space to physical memory.
1731 Transforms XML using a stylesheet, sending output to a Writer. @param styleSheet Stylesheet input stream @param xml XML input stream @param out Writer to write transformed output
1732 Generates a formatted string representation of storage metrics. @param qOption, hOption, tOption, xOption flags for formatting @param types list of storage types @return formatted string summary
1733 Formats snapshot metrics into a string. @param hOption flag to determine formatting style @return formatted snapshot metrics string
1734 Computes capacity using max memory, percentage, and map name. @param percentage Memory usage percentage. @param mapName Name of the map. @return Computed capacity.
1735 Fills the internal buffer with data from the stream. Reads a chunk and verifies checksum, retrying if needed.
1736 Reads and discards data from the stream, up to the specified length. @param len The number of bytes to read and discard. @return The actual number of bytes read and discarded.
1737 Returns a string representation of the UTF-8 encoded bytes. Uses IBUF to read and append bytes to a StringBuilder.
1738 Converts bytes to a string, ensuring proper UTF-8 decoding. @return String representation of the bytes. @throws IOException if an I/O error occurs.
1739 Converts a byte array to a UTF-8 string. @param bytes Byte array containing UTF-8 encoded data @return String representation of the byte array
1740 Reads a UTF-8 string from the input. @param in Input stream to read from. @return String read from the input.
1741 Validates the RPC response header, ensuring client ID matches. @param header The RPC response header to validate. @throws IOException if client ID validation fails.
1742 Converts a single byte to its hex string representation. @param b The byte to convert.
1743 Handles uncaught exceptions, logs the error, and terminates JVM. @param thread The thread where the exception occurred. @param exception The uncaught exception.
1744 Terminates JVM with usage message and exit code.
1745 Handles uncaught exceptions in threads, logging and terminating JVM. @param thread The thread that threw the exception. @param exception The exception that was thrown.
1746 Terminates the JVM with a specified exit code and message. @param exitCode Exit status code. @param message Error message.
1747 Terminates the JVM with a specified status code. @param status Exit status code. @throws ExitException if termination fails.
1748 Terminates the JVM with a specified status and error message. @param status Exit status code. @param msg Error message to print.
1749 Halts the JVM with a specified status code. @param status Exit status code.
1750 Sorts a portion of the IndexedSortable using quicksort. @param s sortable structure, p/r bounds
1751 Constructs an AclStatus with provided owner, group, permissions, and entries. @param owner The owner of the ACL. @param group The group associated with the ACL.
1752 Parses a comma-separated ACL string into a List of ACL objects. @param aclString ACL string to parse. @return List of ACL objects.
1753 Parses an authentication string into a list of ZKAuthInfo objects. @param authString Comma-separated auth string (scheme:auth) @return List of ZKAuthInfo objects
1754 Preserves file attributes (times, owner, permissions, ACLs, xattrs). @param src Source PathData. @param target Target PathData.
1755 Creates a minimal ACL based on the provided permission. @param perm FsPermission containing user, group, and other actions. @return List of AclEntry objects representing the minimal ACL.
1756 Tracks duration for a given key, using a real or stub tracker. @param key Identifier for the tracked duration. @param count Initial counter value. @return DurationTracker instance.
1757 Creates a StatisticDurationTracker with given store and key. @param iostats IOStatisticsStore for tracking statistics. @param key Identifier for the tracked operation.
1758 Creates a DurationInfo instance, logs start message at INFO. @param log Logger instance for logging. @param format Format string for duration. @param args Arguments for format string.
1759 Waits for a CompletableFuture to complete, re-throwing as IOException. @param future CompletableFuture to wait for. @throws IOException if the future is cancelled or completes exceptionally.
1760 Waits for a CompletableFuture to complete, ignoring exceptions. @param future The CompletableFuture to wait for.
1761 Creates a striped CRC composer with default stripe length. @param type CRC type @param bytesPerCrcHint Bytes per CRC hint @throws IOException if type is not supported
1762 Updates composite CRC based on input and stripe boundaries. @param crcB Current CRC value. @param bytesPerCrc Bytes processed for CRC update.
1763 Formats a time string with a time difference. @param dateFormat DateFormat object for formatting. @param finishTime Finish time in milliseconds. @param startTime Start time in milliseconds.
1764 Escapes characters in a string using default escape and comma. @param str string to escape @return escaped string
1765 Unescapes a string, removing escape sequences. @param str input string to unescape @return unescaped string
1766 Creates startup/shutdown message with class, host, and args. @param classname Class name @param args Command-line arguments @return Startup/shutdown message string
1767 Retrieves the next element from the source iterator. Throws NoSuchElementException if no more elements exist.
1768 Awaits the completion of a Future, delegating to FutureIO. @param future The Future to await. @return The result of the Future.
1769 Awaits the completion of all Futures in a collection. @param collection Collection of Futures to await. @return List of results from the completed Futures.
1770 Awaits future completion with a timeout. @param future Future to await. @param timeout Timeout duration. @param unit Timeout unit.
1771 Awaits the completion of all futures in a collection. @param collection Futures to await. @param duration Timeout duration for awaiting each future. @return List of results from completed futures.
1772 Cancels futures and awaits their completion, handling exceptions. @param collection Futures to cancel and await. @param interruptIfRunning Whether to interrupt running threads. @param duration Timeout duration for awaiting futures. @return List of results from completed futures.
1773 Creates a new instance of the class using reflection. @param theClass Class to instantiate. @param conf Configuration object. @param argTypes Constructor argument types. @param values Constructor arguments. @return New instance of the class.
1774 Returns the key class for the sequence file. Caches the class to avoid repeated retrieval. @return Class object representing the key type.
1775 Returns the class of the value object. @return Class object or throws RuntimeException on error.
1776 Loads a class by name. @param name Class name to load. @return Success code or error code if loading fails.
1777 Creates an instance of a class. @param name Class name to instantiate. @return SUCCESS, E_NOT_FOUND, or E_CREATE_FAILED.
1778 Creates a new Configuration object with default settings.
1779 Loads the configuration, using supplied or creating a new one.
1780 Constructs a FindClass object, initializing with a Configuration.
1781 Constructs a ReconfigurableBase with a new Configuration object.
1782 Constructs a ReconfigurableBase with the given Configuration. @param conf The Configuration object to use.
1783 Gets the absolute, canonical path to a Hadoop executable. @param executable Executable file name @return Absolute path to executable
1784 Executes a shell command using ProcessBuilder. Handles timeout, error stream reading, and exit code.
1785 Adds a new phase with specified status. @param status the status of the new phase @return the newly created Progress phase
1786 Creates root directory recursively. @param path Root directory path.
1787 Checks if the file system supports a specific path capability. @param fs FileSystem object. @param path Path to check. @param capability Capability to check for.
1788 Checks if a capability exists for the given object. @param object Object to check. @param capability Capability to check for. @return True if capability exists, false otherwise.
1789 Retrieves I/O statistics counters from a source. @param source The source object to retrieve counters from. @return Map of counter names and their corresponding values.
1790 Retrieves I/O gauges from a source. @param source Source object for retrieving gauges. @return Map of gauge names and their corresponding values.
1791 Retrieves I/O statistics minimums from a source. @param source The source to retrieve minimums from. @return A map of statistic names to minimum values.
1792 Retrieves I/O statistics maximums from a source. @param source The source to retrieve maximums from. @return A map of statistic names to maximum values.
1793 Retrieves I/O statistics means for a given source. @param source Serializable source object. @return Map of I/O statistics means.
1794 Invokes the static method with specified arguments. @param args Arguments to pass to the static method. @return Result of the method invocation.
1795 Sets the unbound method to be invoked. @param className Target class name. @param argClasses Argument classes. @return this Builder instance.
1796 Binds a hidden method on a class using its name and argument types. @param className Class name. @param argClasses Method argument types. @return Current Builder instance.
1797 Loads a static method, returning an UnboundMethod. @param source Class to load method from @param returnType Method return type @param name Method name @param parameterTypes Method parameter classes
1798 Checks if the given object is an I/O statistics source. Uses `ioStatisticsAvailable` and invokes a method on the object.
1799 Checks if I/O statistics are available for the object. @param object The object to check for I/O statistics. @return True if I/O statistics are available, false otherwise.
1800 Checks if I/O statistics snapshot is available for the object. @param object The object to check for snapshot availability. @return True if snapshot is available, false otherwise.
1801 Checks if I/O statistics context is enabled. Returns true if both features are available.
1802 Deletes files in pages using the provided FileSystem and Path. @param fileSystem Hadoop FileSystem object @param path Path to delete files from @return Number of files deleted @throws IOException if an I/O error occurs
1803 Bulk deletes paths using a dynamic method. @param fs FileSystem to use. @param base Base path. @param paths Paths to delete. @throws IOException if an I/O error occurs.
1804 Opens a file using the provided FileSystem and parameters. @param fs FileSystem object @param path Path to the file @return FSDataInputStream for the opened file @throws IOException if an I/O error occurs
1805 Reads data from an InputStream at a specified position into a ByteBuffer. @param in Input stream to read from. @param position Starting position in the stream. @param buf Buffer to write the data into.
1806 Checks if I/O statistics snapshot creation is available.
1807 Checks if I/O statistics context is enabled. Uses {@link #checkAvailable} to verify availability.
1808 Constructs a LightWeightCache with default Timer. @param recommendedLength Initial capacity, sizeLimit @param creationExpirationPeriod Expiration period @param accessExpirationPeriod Expiration period
1809 Constructs a Bloom filter with specified vector size, hash functions, and hash type.
1810 Deletes a key from the filter. @param key The key to delete; throws NullPointerException if null.
1811 Adds multiple keys to the false positive vector. @param coll Collection of keys to add; throws NullPointerException if null.
1812 Adds multiple keys to the false positive vector. @param keys List of keys to add; throws NullPointerException if null.
1813 Adds multiple keys to the false positive vector. @param keys Array of keys to add; throws NullPointerException if null.
1814 Clears a bit at the given index, removing associated keys. @param index Index of the bit to clear; throws exception if out of bounds.
1815 Finds index of key with minimum ratio. Uses `computeRatio()` to determine the ratio for each key.
1816 Executes a program using command-line arguments. Exits if program execution fails. @param argv Program name and its arguments.
1817 Retrieves a credential entry, handling deprecated names. @param provider Credential provider to fetch from. @param name Credential entry name. Returns null if not found.
1818 Adds a deprecation warning for a key, new keys, and message. @param key The deprecated key. @param newKeys New keys replacing the deprecated key. @param customMessage Custom deprecation message.
1819 Opens listeners, binding them to ports or ranges. Uses bindForPortRange or bindForSinglePort to bind.
1820 Validates the provided argument string. @param argStr String containing user and port info. @throws BadFencingConfigurationException if parsing fails.
1821 Recursively deletes the parent ZNode from ZooKeeper. @throws IOException if deletion fails @throws InterruptedException if interrupted
1822 Fences the old active node, retrying ZK actions. @return Stat object or null if no old active exists. @throws KeeperException, InterruptedException
1823 Reads a range of data from a stream into a ByteBuffer. @param stream Readable stream to read from. @param range FileRange to read. @param allocate Allocates ByteBuffer @return CompletableFuture containing the read data.
1824 Requests caching for a data buffer. @param data BufferData to be cached.
1825 Sets the prefetch action future and updates the buffer state. @param actionFuture Future representing the prefetch action.
1826 Sets buffer as ready, calculates checksum, and updates state. @param expectedCurrentState Expected current state array.
1827 Returns the size of a block. Last block size is adjusted. @param blockNumber The block number to get the size of.
1828 Calculates the relative offset from a block's start. @param blockNumber The block number. @param offset The absolute offset. @return The relative offset as an integer.
1829 Constructs a BlockData object with given file and block sizes. @param fileSize Size of the file. @param blockSize Size of each block.
1830 Returns the block number corresponding to the buffer's start offset. @param bufferStartOffset Offset within the file. @return The block number.
1831 Closes all FileSystem instances. @throws IOException if any FileSystem fails to close.
1832 Closes all FileSystem instances associated with the given UGI. @param ugi UserGroupInformation to filter FileSystems by. @throws IOException if closing fails.
1833 Writes a CharSequence to a file using UTF-8 charset. @param fileContext file context @param path file path @param charseq data to write @return FileContext object
1834 Writes byte array to a file in the filesystem. @param fs The filesystem to write to. @param path The path to write the data to. @param bytes The byte array to write. @return The filesystem instance.
1835 Writes lines to a file using the provided charset. @param fs FileSystem object @param path Path to write to @param lines Lines to write @param cs Charset to use for encoding @return FileSystem object
1836 Writes a CharSequence to a file using the given charset. @param fs FileSystem to write to. @param path Path to write to. @param charseq CharSequence to write. @param cs Charset to use for encoding. @return FileSystem object.
1837 Constructs a BlockLocation with specified attributes. @param names Block names, hosts, topologyPaths, offset, length, corrupt
1838 Creates a MutableCounterInt metric with given name, description, and initial value. @param name Metric name. @param desc Metric description. @param iVal Initial value for the counter. @return The newly created MutableCounterInt.
1839 Creates a MutableCounterLong metric with given name and description. @param name Metric name. @param desc Metric description. @param iVal Initial value.
1840 Creates a MutableGaugeLong metric with given name and value. @param name Metric name. @param desc Metric description. @param iVal Initial value. @return Newly created MutableGaugeLong metric.
1841 Creates a new MutableGaugeFloat metric with name and description. @param name Metric name. @param desc Metric description. @param iVal Initial value for the gauge. @return The new MutableGaugeFloat instance.
1842 Creates a new MutableGaugeInt metric with given name/desc. @param name Metric name @param desc Metric description @param iVal Initial integer value @return The new MutableGaugeInt metric
1843 Creates a copy of this MeanStatistic using the provided data.
1844 Logs I/O statistics at the DEBUG level if enabled. @param log Logger instance. @param message Debug message. @param source Source of I/O statistics.
1845 Returns a string representation of the FSInputStream. Includes IO statistics if it's an IOStatisticsSource.
1846 Converts statistics to a formatted string. @param statistics The statistics object to format. @return Formatted string, or "" if statistics is null.
1847 Measures the duration of an invocation, tracking I/O stats. @param factory DurationTrackerFactory, or null @param statistic Statistic key for the tracker @param input InvocationRaisingIOE to measure @return Duration of the invocation.
1848 Tracks duration of a supplier, records failure if it throws. @param factory DurationTrackerFactory, or null @param statistic Statistic key for the tracker @param input Supplier to track duration of @return Result of the supplier
1849 Adds an entry to the linked list and evicts if needed. @param entry Entry to add; evicted if list exceeds maxBlocksCount
1850 Constructs IOStatisticsStore with initial counters, gauges, mins, maxes, and means. @param counters List of counter keys. @param gauges List of gauge keys.
1851 Reads up to len bytes from this stream into the provided buffer. @param b buffer to fill with decrypted data @param off offset within the buffer @param len number of bytes to read @return Number of bytes read
1852 Decrypts data from input buffer to buffer using a decryptor. @param position Current position in the stream @param buffer Input/output buffer @param offset Offset within buffer @param length Number of bytes to decrypt @throws IOException if decryption fails
1853 Decrypts data from a buffer using a decryptor and IV. @param filePosition File position for decryption. @param buf Input buffer containing encrypted data. @param length Number of bytes to decrypt. @param start Starting offset in the buffer. @throws IOException if decryption fails.
1854 Decrypts a portion of the input buffer and writes to inBuffer. @param buf ByteBuffer to decrypt @param length Length of data to decrypt @param start Start position in the buffer
1855 Seeks to a specific position in the input stream. @param pos The position to seek to. @throws IOException if an I/O error occurs.
1856 Skips specified number of bytes from the input stream. @param n number of bytes to skip, must be non-negative @return actual number of skipped bytes
1857 Initializes the GlobFilter with a glob pattern and default filter. @param filePattern The glob pattern for file matching.
1858 Initializes a GlobFilter with a glob pattern and filter. @param filePattern The glob pattern for file matching. @param filter The PathFilter to apply.
1859 Untars an input stream to a directory, using native or Java based implementation. @param inputStream Input stream for tar archive. @param untarDir Directory to extract files to. @param gzipped Whether the archive is gzipped.
1860 Retrieves all file system statistics. Delegates to AbstractFileSystem to get the statistics.
1861 Clears file system statistics by delegating to AbstractFileSystem.
1862 Encodes ECChunks to ByteBuffers. @param inputs ECChunk array to encode. @param outputs ECChunk array for encoded output.
1863 Creates a new BlockingThreadPoolExecutorService with specified parameters. @param activeTasks Active task count. @param waitingTasks Waiting task count.
1864 Sets buffer data and initializes position. @param bufferData Buffer data to set. @param startOffset Start offset of the buffer. @param readOffset Current read offset.
1865 Gets the current I/O statistics context. Returns null if unavailable.
1866 Resets the current I/O statistics context.
1867 Gets a snapshot of the current I/O statistics context. Returns a Serializable object representing the snapshot.
1868 Aggregates I/O statistics from a source. @param source Object providing I/O statistics. @return True if aggregation was successful, false otherwise.
1869 Runs tasks on items in parallel, handling exceptions & reverts. @param task The task to run on each item. @return True if all tasks succeeded, false otherwise.
1870 Sets the I/O statistics context for the current thread. @param statisticsContext The context to set; null to remove.
1871 Sets the thread's I/O statistics context if one exists.
1872 Clears the thread's I/O statistics context. Resets the context to null if one is currently set.
1873 Logs and displays an error message, potentially stringifying exceptions. @param e The exception to handle and display.
1874 Gets a PathHandle for a FileStatus, using default options if none provided. @param stat FileStatus object. @param opt Handle options, if any. @return PathHandle object.
1875 Adds a token to the token map, updating private clones if needed. @param alias Token alias. @param t The token to add.
1876 Encrypts data from inBuffer to outBuffer using the cipher context. @param inBuffer Input buffer. @param outBuffer Output buffer.
1877 Decrypts data from inBuffer to outBuffer using the cipher context. @param inBuffer Input buffer. @param outBuffer Output buffer.
1878 Initializes the mount point, compiling regex and setting interceptors. @throws IOException if regex compilation or interceptor initialization fails.
1879 Creates a Path by resolving a child path onto a parent path. @param parent The parent Path object. @param child The child Path object.
1880 Creates a Path object from a string representation. @param pathString The path string to initialize the Path. @throws IllegalArgumentException if the path is null or empty.
1881 Creates a Path object with a URI scheme, authority, and path. @param scheme URI scheme @param authority URI authority @param path URI path
1882 Returns a string representation of the path, using URI conversion.
1883 Gets the URI path from a Path object. @param p The Path object to extract the URI path from. @return The URI path as a String.
1884 Resolves a path. @param p The path to resolve. @return Path object representing the resolved location.
1885 Creates a file or output stream with specified options. @param f Path to create. @param createFlag Flags for creation. @param opts Creation options. @return FSDataOutputStream
1886 Applies a umask to the given permission mode. @param mode The permission mode to apply the umask to. @param umask The umask to apply. @return A new FsPermission with the umask applied.
1887 Creates directory recursively. @param f the path of the directory to create @return true if directories were created, false otherwise
1888 Sets the file permission. Uses default if permission is null.
1889 Creates a non-recursive FSDataOutputStream. @param f path to create @param overwrite overwrite if exists
1890 Creates an immutable FsPermission from a short value. @param permission Short representing the permission bits
1891 Appends a key-value pair to the SequenceFile, ensuring class correctness. @param key The key to append. @param val The value to append. @throws IOException if key/value classes are incorrect or errors occur.
1892 Gets the compressed size of the data written so far.
1893 Skips specified number of bytes. Limits skip to file length. @param n number of bytes to skip @return actual number of bytes skipped
1894 Gets the used space for a path within the HAR file. @param path The path to check. @return The used space in bytes.
1895 Gets the used space for a path, delegating to the underlying FS. @param path The path to get the used space for. @return Used space in bytes.
1896 Starts the JvmPauseMonitor and continuously adds data. Creates a monitor, initializes it, and starts monitoring.
1897 Starts the service, transitioning to STARTED state if possible. Handles exceptions and stops service if start fails.
1898 Transitions service to a new state, logs changes, and records event. @param newState The desired service state. @return The previous service state.
1899 Prints the default Kerberos realm or logs an error if retrieval fails.
1900 Checks for equality with another BytesWritable. Returns true if the other object is a BytesWritable.
1901 Checks if this Text object is equal to another. Returns true only if o is also a Text object.
1902 Sets the BytesWritable's content with data from another instance. @param newData The BytesWritable containing the new data.
1903 Decodes data from input buffers, recovers erased data, and writes to outputs. @param inputs Input buffers containing encoded data. @param erasedIndexes Indexes of erased data units. @param outputs Output buffers for decoded data.
1904 Decodes erasure coded data into output arrays. @param inputs Input data arrays. @param erasedIndexes Indexes of erased data units. @param outputs Output data arrays.
1905 Skips to the next BZip2 block delimiter in the stream. Uses skipToNextMarker to find the delimiter.
1906 Creates a CBZip2OutputStream with the default block size. @param out output stream to write compressed data @throws IOException if an I/O error occurs
1907 Constructs a BlockDecompressorStream with input and decompressor. Uses default buffer size.
1908 Creates a compression output stream using the codec pool. @param out The underlying output stream. @return CompressionOutputStream instance.
1909 Creates a compression output stream using the codec pool. @param out The underlying output stream. @return CompressionOutputStream instance.
1910 Creates a compression output stream using the codec pool. @param out The underlying output stream. @return CompressionOutputStream instance.
1911 Creates a compression output stream using the codec pool. @param out The output stream to wrap. @return CompressionOutputStream instance.
1912 Closes the writer, releasing resources and closing data/index.
1913 Finalizes the block writing process, flushing output and returning compressor.
1914 Creates a CompressionInputStream using the codec pool. @param in Input stream to compress. @return CompressionInputStream instance.
1915 Creates a CompressionInputStream for the input stream. @param in Input stream to compress. @return CompressionInputStream instance.
1916 Creates a CompressionInputStream using the codec pool. @param in Input stream to compress. @return CompressionInputStream instance.
1917 Creates a CompressionInputStream using the codec pool. @param in Input stream to compress. @return CompressionInputStream instance.
1918 Closes the reader, closing index and data streams.
1919 Closes the input stream and sets it to null.
1920 Creates a DirectDecompressor using Zlib, using native Zlib if available. @param conf Hadoop configuration object. @return DirectDecompressor instance.
1921 Writes the file header to the output stream, including version, class names, compression flags, codec, and metadata.
1922 Serializes tokens and secret keys to the output stream. Writes token map size, then each token key/value. Writes secret keys map size, then each key/value pair.
1923 Reads a block of records from the input stream. Handles lazy decompression and sync checks.
1924 Seeks to the current value in the sequence file, handling compression.
1925 Reads a UTF-8 string from input, up to the maximum length. @param in DataInput to read from @return Decoded String
1926 Retrieves a delegation key by ID, from cache or SQL DB. @param keyId The ID of the key to retrieve. @return DelegationKey object or null if not found.
1927 Retrieves a delegation token from credentials for a given service. @param url URL containing service address @param creds Credentials containing the token @return Delegation token object
1928 Retrieves a server token based on the authentication type. @param authType Authentication type for token retrieval. @return Server token or null if no token is available.
1929 Sets the token service for a given token. @param token The token to set the service for. @param addr Token service address.
1930 Creates a Token from a TokenProto object. @param tokenProto TokenProto object to convert @return Token object
1931 Gets a cached ByteString for a given Text key. @param key The Text key to look up. @return The cached ByteString or a new one if not found.
1932 Creates a new Token by cloning another Token. @param other The Token to clone from.
1933 Reads a line from the input stream. @param str Text object to append the line to. @param maxLineLength Max line length.
1934 Reads a line into the provided Text object. @param str Text object to append the line to. @return Bytes consumed before newline.
1935 Constructs an InstrumentedLock with a ReentrantLock. @param name Lock name, @param logger Logger instance.
1936 Creates a retry proxy for the given interface and implementation. @param iface Interface to proxy. @param implementation Implementation of the interface. @param retryPolicy Retry policy to use. @return Proxy object.
1937 Waits if needed, increments retry counters, and returns RETRY. @return CallReturn indicating retry status
1938 Creates a Writer with given stream, block size, compression, and comparator. @param fsdos The output stream to write to.
1939 Checks if the current chunk is the last one. Uses checkEOF() to determine if the stream is closed.
1940 Returns the remaining bytes to be read. Checks for EOF.
1941 Compares this key with another key represented by a byte array. @param buf Byte array containing the key. @param offset Start offset in the array. @param length Number of bytes to compare.
1942 Closes the writer. Syncs buffered records and releases resources.
1943 Appends a key-value pair to the buffer, throwing IOException on class mismatch. @param key The key to append. @param val The value to append.
1944 Appends key/value data to buffers, writing VInts and bytes. @param keyData Key data as byte array. @param val Value bytes to be written.
1945 Copies data from one Writable object to another. @param dst Destination Writable to copy data into. @param src Source Writable to copy data from.
1946 Chooses a random node within a scope, excluding specified nodes. @param scope The network scope string. @param excludedNodes Nodes to exclude. @return A random node or null if none found.
1947 Sorts nodes by distance from a reader node. @param reader Source node. @param nodes Nodes to sort. @param activeLen Active length.
1948 Sorts nodes by distance from a reader node. @param reader Source node. @param nodes Nodes to sort. @param activeLen Active length.
1949 Creates a SocketInputStream using a Socket and timeout. @param socket The socket to read from. @param timeout Timeout duration in milliseconds. @throws IOException if an I/O error occurs.
1950 Initializes SocketInputStream using a Socket's channel and timeout. @param socket The Socket to read from. @throws IOException if an I/O error occurs.
1951 Constructs SocketOutputStream using socket's channel and timeout. @param socket Socket to use. @param timeout Timeout in milliseconds. @throws IOException if an I/O error occurs.
1952 Adds a node to the network topology. @param node The node to add. Throws if inner node.
1953 Performs I/O operations with a timeout, returning the byte count. @param buf ByteBuffer to read/write. @param ops SelectableChannel operations. @return Number of bytes read/written, or -1 if closed. @throws IOException if an I/O error occurs.
1954 Attempts to connect a SocketChannel to an endpoint with timeout. @param channel SocketChannel to connect. @param endpoint Remote address to connect to. @param timeout Timeout in milliseconds. @throws IOException if connection fails or timeout occurs.
1955 Waits for I/O events on the channel with a timeout. @param ops Operations to wait for. @throws IOException if a timeout or I/O error occurs.
1956 Gets the default host for a network interface. @param strInterface Interface name, or null for default. @return Hostname.
1957 Gets the default host for a network interface. @param strInterface Interface name, or null for default. @param nameserver Optional nameserver, or null. @return Hostname.
1958 Reattaches Ugi metrics. Calls {@link UgiMetrics#reattach()}.
1959 Constructs a MutableInverseQuantiles object with given parameters. @param name Metric name, capitalized. @param description Metric description.
1960 Creates a new MutableQuantiles object and registers it. @param name Metric name, validated. @param interval Metric interval, must be positive.
1961 Creates a new MutableStat with extended flag set to false. @param name Metric name @param desc Description @param sampleName Sample name @param valueName Value name
1962 Adds a tag to the registry with default override value. @param name Tag name @param description Tag description @param value Tag value
1963 Adds a metric value. @param name Metric name. @param value Metric value in milliseconds.
1964 Adds queue time for a specific priority level. @param priority Priority level (index). @param queueTime Queue time in milliseconds.
1965 Adds processing time for a given priority level. @param priority Priority level (int). @param processingTime Processing time in milliseconds.
1966 Adds overall RPC processing time to a metric. @param rpcCallName RPC call name. @param overallProcessingTime Processing time in ms.
1967 Validates and displays the Kerberos configuration file path. Uses system properties/env vars to determine file location.
1968 Verifies a condition, logs failure if needed. @param condition The condition to verify. @param category Error category for logging. @param message Failure message. @param args Arguments for message formatting. @return True if condition is met, false otherwise.
1969 Fails if the condition is true, logs error, and throws failure. @param condition Boolean to check. @param category Error category. @param message Error message.
1970 Creates a remote UserGroupInformation for a user. @param user The username. Uses SIMPLE authentication.
1971 Verifies a delegation token's password. @param identifier TokenIdent for the token. @param password Password to verify against stored value. @throws InvalidToken if password verification fails.
1972 Starts a thread to renew credentials for users with keytabs. Relogin is skipped if needed or UGI is from a ticket.
1973 Constructs a Count object with command arguments and config. @param cmd Command-line arguments. @param pos Starting position in the arguments. @param conf Hadoop configuration.
1974 Connects to ZooKeeper, adds auth info, and waits for connection. @return ZooKeeper instance @throws IOException, KeeperException on connection failure
1975 Retrieves the next element from the queue for `keyName`. @param keyName Key for the value queue. @return The next element or null if the queue is empty.
1976 Resolves a hostname to an InetAddress. Logs slow lookups. @param hostname Hostname to resolve @return InetAddress object or null if not found @throws UnknownHostException if hostname cannot be resolved
1977 Gets a ProtocolSignature for a given protocol and client version. @param server VersionedProtocol instance. @param protocol Protocol class name.
1978 Checks if a method is supported by the server. @param methodName Method name to check. @param parameterTypes Method parameter types. @return True if method is supported, false otherwise.
1979 Validates RPC request headers, throwing exception on failure. @param header RPC request header to validate. @throws RpcServerException if header is invalid.
1980 Retrieves a message from the buffer, casting to type T. @param message The message to read. @param buffer Buffer containing the message. @return Message object, cast to type T.
1981 Retrieves and removes the head of the queue, or null if empty. Uses semaphore to ensure thread-safe access.
1982 Sends a version mismatch response to the client. @param clientVersion Client's version number. @throws IOException if an I/O error occurs.
1983 Gets virtual memory size in KB, sum of physical memory and swap.
1984 Creates a HarFSDataInputStream with given FS, path, start, length, and buffer size.
1985 Evicts expired entries from the cache up to EVICTION_LIMIT.
1986 Evicts entries until the cache size is below the size limit.
1987 Generates a formatted string representation of storage metrics. @param qOption, hOption, xOption flags for formatting
1988 Generates a formatted string representation of storage metrics. @param qOption, hOption, tOption formatting flags @param types list of storage types
1989 Returns quota usage string, formatted or by type. @param hOption Human-readable format flag @param tOption Use type-specific quota usage @param types List of StorageType objects @return Formatted quota usage string
1990 Waits for all CompletableFutures in the list to complete. @param futures List of CompletableFutures to wait for. @throws IOException if any future is cancelled or completes exceptionally.
1991 Awaits completion of a CompletableFuture, if it exists. @param future CompletableFuture to await, or null to skip. @throws IOException if the future completes exceptionally.
1992 Updates CRC in buffer. @param crcBuffer CRC buffer to update. @param offset Starting offset in the buffer. @param length Length of data to process. @param bytesPerCrc Bytes processed per CRC update.
1993 Updates composite CRC based on checksums from input stream. @param checksumIn Input stream containing CRC values. @param numChecksumsToRead Number of checksums to read. @param bytesPerCrc Bytes processed for each CRC update.
1994 Creates a new instance of the class using reflection. @param theClass Class to instantiate. @param conf Configuration object.
1995 Returns the key class for the sequence file.
1996 Returns the class of the value object.
1997 Processes command-line arguments and performs class/resource actions. @param args Command-line arguments; action and name. @return Result code indicating success or failure.
1998 Constructs the builder with a file context and path. @param fc The file context. @param path The file system path.
1999 Creates a DataChecksum object from a byte array and offset. @param bytes Input byte array containing checksum info. @param offset Starting offset within the byte array. @throws IOException if checksum creation fails.
2000 Creates a DataChecksum object from an input stream. @param in Input stream containing checksum type and size. @throws IOException if an I/O error occurs.
2001 Executes a command if the interval has passed. Checks time, resets exit code, and runs the command.
2002 Aggregates statistics from a snapshot. @param snapshot Statistics snapshot. @param statistics Additional statistics. @return True if aggregation successful.
2003 Creates an I/O statistics snapshot. @return Serializable snapshot object. @throws UnsupportedOperationException if not supported.
2004 Creates an I/O statistics snapshot from the provided source. @param source The source object for snapshot creation. @return A Serializable object representing the snapshot.
2005 Converts an I/O statistics snapshot to a JSON string. @param snapshot The snapshot to convert. Null is allowed. @return JSON string representation of the snapshot.
2006 Creates an I/O statistics snapshot from a JSON string. @param json JSON string representing the snapshot. @return Statistics snapshot or null if creation fails.
2007 Loads an I/O statistics snapshot from the given path. @param fs FileSystem object. @param path Path to the statistics snapshot. @return Serializable I/O statistics snapshot.
2008 Retrieves an I/O statistics snapshot from the source. @param source Source object to retrieve snapshot from. @return Statistics snapshot or null if not available.
2009 Saves an I/O statistics snapshot. @param snapshot The snapshot to save. @param fs FileSystem. @param path Path. @param overwrite Overwrite existing snapshot.
2010 Converts I/O statistics to a pretty string representation. @param statistics Statistics object to format. @return Pretty string representation of the statistics.
2011 Gets the current I/O statistics context. @throws UnsupportedOperationException if unavailable
2012 Sets the thread I/O statistics context. @param statisticsContext The context to set. @throws UnsupportedOperationException if not supported.
2013 Resets the I/O statistics context. Throws UnsupportedOperationException if reset is not supported.
2014 Takes a snapshot of the I/O statistics context. @return Serializable snapshot object. @throws UnsupportedOperationException if not supported.
2015 Aggregates I/O statistics from the provided source. @param source Source object for aggregation. @return True if aggregation is successful, false otherwise.
2016 Compares two version strings. @param version1 The first version string. @param version2 The second version string. @return Comparison result: negative, zero, or positive.
2017 Creates a CountingBloomFilter with specified size, hash functions, and type.
2018 Constructs a Bloom filter with specified size, hash functions, type.
2019 Checks if a key probably exists in the Bloom filter. @param key The key to check. @return True if likely present, false otherwise.
2020 Selectively removes a key based on a given scheme. @param k The key to remove; throws exception if null or not a member. @param scheme Removal scheme (RANDOM, MINIMUM_FN, etc.)
2021 Adds a deprecation warning for a key, new key, and message. @param key The deprecated key. @param newKey New key replacing the deprecated key. @param customMessage Custom deprecation message.
2022 Adds a deprecation warning for a key and new keys. @param key The deprecated key. @param newKeys New keys replacing the deprecated key.
2023 Adds a deprecation warning for a key, with a new key. @param key The deprecated key. @param newKey The replacement key.
2024 Starts the HTTP server, registers metrics, and initializes the context. Handles exceptions during startup and ensures handler success.
2025 Writes a breadcrumb node to ZooKeeper, indicating active status. @param oldBreadcrumbStat Previous breadcrumb stat, or null if none. @throws KeeperException, InterruptedException
2026 Deletes the active node's breadcrumb ZNode with retries. Handles exceptions and logs warnings if deletion fails.
2027 Reads data from a stream into FileRange objects. @param stream Readable stream. @param ranges List of FileRange objects. @param allocate Allocates ByteBuffer.
2028 Cancels prefetch operations and caches prefetched/ready buffers.
2029 Retrieves a `BufferData` instance for the given block number. @param blockNumber The block number to retrieve. @return BufferData object for the block.
2030 Constructs a FilePosition object. @param fileSize Size of the file. @param blockSize Size of each block.
2031 Checks if the current block is the last block.
2032 Closes all FileSystem instances managed by the cache. Logs close operation details. @throws IOException if any FileSystem fails to close.
2033 Writes a CharSequence to a file using UTF-8 encoding. @param fs FileSystem to write to. @param path Path to write to. @param charseq CharSequence to write. @return FileSystem object.
2034 Constructs a BlockLocation with block names, hosts, offset, length, and corruption status.
2035 Constructs a BlockLocation with specified attributes. @param names Block names, hosts, topologyPaths, offset, length
2036 Aggregates two MeanStatistic objects. @param l The first MeanStatistic. @param r The second MeanStatistic. @return A new MeanStatistic containing combined data.
2037 Creates a snapshot of IOStatistics, copying all statistics. @param source The source IOStatistics object to snapshot.
2038 Logs I/O statistics at the DEBUG level using the default logger. @param message Debug message to log. @param source Source of I/O statistics.
2039 Logs I/O statistics at a specified level. @param log Logger instance. @param level Logging level (INFO, ERROR, WARN). @param source Source of I/O statistics.
2040 Closes a RemoteIterator and logs I/O statistics if closeable. @param source RemoteIterator to close.
2041 Tracks the duration of an invocation, using provided factory & statistic. @param factory DurationTrackerFactory, or null @param statistic Statistic key for the tracker @param input InvocationRaisingIOE to measure
2042 Reads data from the stream at a given position. @param position Read position @param buffer Output buffer @param offset Offset within buffer @param length Number of bytes to read @return Number of bytes read @throws IOException if an I/O error occurs
2043 Reads data from the stream and decrypts it. @param position Starting position @param buffer Buffer for reading @param offset Offset in the buffer @param length Number of bytes to read @throws IOException if an I/O error occurs
2044 Reads data into a buffer at a specific position, decrypting it. @param position File position to read from. @param buf Buffer to read data into. @return Number of bytes read.
2045 Reads data from the stream into a buffer and decrypts it. @param position File position for reading and decryption. @param buf Buffer to store the read and decrypted data. @throws IOException if an I/O error occurs.
2046 Reads data from the CryptoInputStream into a ByteBuffer. @param buf ByteBuffer to fill with decrypted data @return Number of bytes read, or -1 if EOF.
2047 Writes a Java object to a DataOutput stream. @param out Output stream, instance, class, config, allowCompactArrays
2048 Attempts to acquire a BufferData object for a block. @param blockNumber Block number. Must be non-negative. @return BufferData object or null if acquisition fails.
2049 Returns the number of available buffers in the pool.
2050 Executes a task on items, either in parallel or sequentially. @param task The task to execute. @return True if all tasks completed successfully.
2051 Processes a list of paths, handling errors and recursing. @param parent Parent PathData, @param items Paths to process. @throws IOException if an I/O error occurs during processing.
2052 Creates a function to get PathHandle from FileStatus. @param fs FileSystem object. @param opt HandleOpt array for resolution. @return Function that applies getPathHandle with options.
2053 Creates a ShellCommandExecutor for retrieving user groups. @param userName The username to query for groups.
2054 Creates a ShellCommandExecutor to fetch group IDs for a user. @param userName The username to query group IDs for.
2055 Reads credentials from a Protobuf DataInput stream. Reads tokens and secret keys from the input stream.
2056 Collects delegation tokens from issuer and its children. @param issuer Token issuer. @param renewer Token renewer.
2057 Adds a token to the credentials, synchronizing access. @param alias Token alias. @param token The token to add. @return True.
2058 Resolves a path to an absolute path, using workDir if not absolute. @param workDir Base directory for resolving relative paths. @param path The path to resolve. @return Absolute path.
2059 Resolves a path to be absolute, using workDir if it's relative. @param workDir The working directory Path. @param path The path to resolve. @return Absolute Path object.
2060 Converts a Path object to a File object. @param path The Path to convert. @return A File object representing the given Path.
2061 Resolves a Path to an absolute path using the working directory. @param p The Path to resolve. @return An absolute Path object.
2062 Creates a qualified Path from a URI and working directory. @param defaultUri Default URI to use for qualification. @param workingDir Working directory to resolve relative paths. @return Qualified Path object.
2063 Returns the working directory of this file system, based on the URI.
2064 Returns the home directory as a Path object based on the URI.
2065 Gets the SFTP home directory. @param channel SFTP channel @return Path object representing home directory, or null.
2066 Retrieves a FileStatus for the given path. @param fs The FileSystem to use. @param pathString The path to lookup. @param ignoreFNF Ignore FileNotFoundException. @return FileStatus object or null if not found.
2067 Returns the Path object representing the file path.
2068 Returns the target path, or null if it's not set. Creates a Path object from the path string.
2069 Gets the used space for the root directory ("/"). @return The used space in bytes.
2070 Constructs a ChRootedFileSystem with a specified root path. @param fs The underlying FileSystem. @param uri The URI defining the root path.
2071 Returns the remaining path as a Path object. @param path Array of path components. @param startIndex Start index for the remaining path.
2072 Constructs a Path representing the target link from the list. Returns a Path object containing the merged target links.
2073 Creates a Path by resolving a child path onto a parent path. @param parent The parent path string. @param child The child path string.
2074 Creates a Path by resolving a child path onto a parent path. @param parent The parent Path object. @param child The child Path object.
2075 Creates a Path by resolving a child path onto a parent path. @param parent The parent path string. @param child The child Path object.
2076 Renames a file or directory using the provided FileSystem. @param fs The FileSystem to use for the rename operation. @param oldName The original path to rename. @param newName The new path for the renamed file.
2077 Converts a File object to a Path object. @param f The File object to convert. @return A Path object representing the file.
2078 Converts a nested URI to a Path object. @param nestedUri The URI to unnest. @return A Path object representing the unnested URI.
2079 Converts an array of strings to an array of Path objects. @param str Array of strings representing paths. @return An array of Path objects, or null if input is null.
2080 Returns a Path object without scheme and authority. @param path The Path object to modify. @return A new Path object without scheme/authority.
2081 Merges two paths, combining their components safely. @param path1 The first path. @param path2 The second path. @return A new Path representing the merged path.
2082 Checks if the path exists and matches the expected file type. @param typeRequirement Expected file type requirement.
2083 Gets the string representation of a child path. @param childPath The child path to convert. @return String representation of the child path.
2084 Throws PathNotFoundException for a nonexistent path. @param item PathData object representing the path @throws IOException if the path is not found
2085 Gets the AbstractFileSystem for a path, using default FS if possible. @param absOrFqPath Path to get the AbstractFileSystem for. @return AbstractFileSystem object.
2086 Creates directory recursively and sets its permission. @param fs The FileSystem object. @param dir The path of the directory to create. @param permission The desired FsPermission object. @return True if directories were created.
2087 Constructs a LocatedFileStatus with specified attributes and block locations. @param locations array of block locations
2088 Appends a key-value pair to the SequenceFile. @param key The key to append. @param val The value to append.
2089 Writes key-value pairs from iterator to writer, then syncs. @param records Iterator of raw key-value pairs. @param writer Writer to append data to.
2090 Initializes the service. Throws exception if config is null. Transitions to INITED state and notifies listeners if successful.
2091 Stops the service, performing cleanup and notifying listeners. Handles exceptions and re-entrant calls gracefully.
2092 Checks if this token is a private clone of the given public token. @param thePublicService The public service token to compare against.
2093 Checks if token's service matches the provided alias. @param token The token to check. @param alias The alias to compare against. @return True if alias is null or service matches alias.
2094 Checks if the service matches based on fetcher and URL. @param fetcher DtFetcher object @param service Service Text object @param url URL string @return True if service matches, false otherwise.
2095 Checks if a directory exists and is accessible. @param dir The directory to check. @throws DiskErrorException if directory check fails.
2096 Checks directory existence and disk I/O. @param dir The directory to check. @throws DiskErrorException if directory/disk check fails.
2097 Flushes the buffer, writing checksums.
2098 Validates data decoding process with input buffers and indexes. @param inputs Input buffers, erasedIndexes, and output buffers.
2099 Decodes EC data from input chunks, recovers erased data, and writes to output chunks. @param inputs Input ECChunk array. @param erasedIndexes Indexes of erased data units. @param outputs Output ECChunk array.
2100 Closes the block appender, finalizing the block and registering it.
2101 Releases resources and deletes segment if not preserved.
2102 Closes the block reader, releasing resources. Calls finish() on rBlkState.
2103 Reads credentials from input. Populates tokenMap and secretKeysMap.
2104 Reads the next raw key into the provided buffer. @param key Buffer to store the key. @return Key length or -1 if end of stream.
2105 Populates a Writable object with the current value from the sequence file. @param val The Writable object to populate.
2106 Retrieves the current value, configuring it with the class's config. @param val The object to configure and populate with the value. @return The configured and populated value.
2107 Reads the next raw key-value pair from the sequence file. @param key DataOutputBuffer for the key. @param val ValueBytes for the value. @return Length of the record, or -1 if end of file.
2108 Reads the next raw value. Returns its length. Uses seekToCurrentValue to position the stream.
2109 Retrieves DelegationTokenInformation from SQL based on token ident. @param ident TokenIdent object containing sequence number and bytes @return DelegationTokenInformation object or throws exception.
2110 Reads a PermissionStatus object from the input stream. @param in Input stream containing permission data. @return A PermissionStatus object.
2111 Reads an enum value from input. @param in DataInput to read from @param enumType Enum type to resolve @return Enum value or null if not found
2112 Reads ACL string from input and builds the ACL. @param in DataInput to read from
2113 Gets a cached ByteString for a given Text key. @param key The Text key to look up.
2114 Converts a Token object to a TokenProto. @param tok The Token to convert. @return TokenProto object representing the token.
2115 Constructs a DelegationTokenIdentifier with kind, owner, renewer, real user. @param kind Token kind. @param owner The token owner. @param renewer The renewer. @param realUser The real user.
2116 Invokes the method once, handling retries and exceptions. Returns CallReturn indicating success, retry, or failure.
2117 Checks for the next key. Throws EOFException if at end. Reads key length and data if not already read.
2118 Reads value bytes from stream into BytesWritable. @param value BytesWritable to store the read value @return Length of the read value
2119 Writes the value to the output stream. @param out The output stream to write to. @return The number of bytes written.
2120 Compares this key with another key (byte array). @param buf The byte array representing the key.
2121 Checks if this entry equals another Entry based on key comparison.
2122 Obtains a delegation token from a URL. @param url URL for token retrieval. @param renewer User on behalf of whom token is obtained.
2123 Renews a delegation token via HTTP. @param url URL for renewal. @param token Authentication token. @param dToken Delegation token. @param doAsUser User to renew as. @return Expiration timestamp or 0 on failure.
2124 Cancels a delegation token via HTTP. @param url URL for cancellation. @param token Authentication token. @param dToken Delegation token to cancel. @param doAsUser User to perform the operation as.
2125 Chooses a random node within a given scope. @param scope The network scope string. @return A random node or null if none found.
2126 Sorts nodes by distance, handling cases where the reader is not in the topology. @param reader Source node. @param nodes Nodes to sort. @param activeLen Active length.
2127 Creates a SocketInputWrapper with a socket and timeout. @param socket The socket to wrap. @param timeout Timeout in milliseconds. @return SocketInputWrapper object.
2128 Gets an output stream for the socket, using channel if available. @param socket Socket to use. @param timeout Timeout in milliseconds. @return OutputStream object.
2129 Connects a socket to an endpoint with a timeout. @param socket The socket to connect. @param endpoint Remote address to connect to. @param timeout Connection timeout in milliseconds.
2130 Registers an MBean with the platform MBean server. @param serviceName MBean service name. @param nameName MBean name. @param properties MBean properties. @param theMbean The MBean instance to register. @return ObjectName if registration succeeds, null otherwise.
2131 Creates a new MutableQuantiles object and registers it. @param name Metric name, validates before creation.
2132 Constructs a RetryCache with specified name, percentage, and expiration. @param cacheName Cache name. @param percentage Memory usage percentage. @param expirationTime Cache entry expiration time.
2133 Initializes metrics for a protocol, adding them if absent. @param protocol Class representing the protocol to initialize.
2134 Initializes metrics by name. @param names Array of metric names to initialize.
2135 Aggregates local stats to global metrics. Iterates through local stats and snapshots them into global metrics.
2136 Creates a new MutableRate. Returns existing if present. @param name Metric name @param desc Metric description @param extended Extended flag
2137 Initializes rate metrics for methods in a protocol class. @param protocol Class containing methods to instrument.
2138 Adds metrics from method annotations to the registry. @param source Object the method belongs to. @param method Method to extract metrics from.
2139 Validates user's Kerberos authentication and credentials. @param messagePrefix Prefix for logging messages. @param user UserGroupInformation to validate.
2140 Verifies a file exists, is a file, is not empty, and is readable. @param file The file to verify. @param category Error category for logging. @param text Contextual text for verification. @return True if all checks pass, false otherwise.
2141 Validates the Kerberos principal's short name. Fails if principal is null, logs warning if complex.
2142 Returns a UserGroupInformation object, creating it if needed. Uses owner or realUser for user creation, sets auth method.
2143 Default constructor. Initializes the Find object with recursive search enabled.
2144 Default constructor. Provides a default initialization.
2145 Forces a relogin from a keytab, refreshing credentials. @throws IOException if relogin fails
2146 Forces a re-login from the ticket cache. @throws IOException if login fails.
2147 Relogins the user from the ticket cache. @throws IOException if login fails.
2148 Creates an InetSocketAddress for the given host and port. @param host Hostname or IP address. @param port Port number. @return InetSocketAddress object.
2149 Gets a local InetAddress for a host. Returns null if not local. @param host Hostname to resolve. @return InetAddress object or null if not found/local.
2150 Sends an RPC request to the remote server. @param call The RPC call to send.
2151 Processes an RPC request. Reads, validates, and queues the request.
2152 Sets RPC response header and payload based on status. @param call RPC call object.
2153 Resets the IP list to the source and updates the expiry time.
2154 Main method to print Linux system information. Uses SysInfoLinux to retrieve and display various metrics.
2155 Generates a formatted string representation of metrics. @param qOption, hOption Formatting flags.
2156 Reads up to len bytes from the input stream into the buffer. @param b buffer to read into, @param off offset, @param len length @return Number of bytes read or -1 if EOF.
2157 Creates an expression instance of the given class. @param expressionClass Expression class to instantiate. @param conf Configuration object. @return Expression instance or null if class is null.
2158 Retrieves a command instance by name. @param cmdName Command name to retrieve. @param conf Hadoop configuration object. @return Command instance or null if not found.
2159 Creates a new key object using reflection. @param keyClass Class of the key to instantiate. @param conf Hadoop configuration. @return New WritableComparable key object.
2160 Creates a new Writable instance of the given class. @param c Writable class to instantiate. @param conf Hadoop configuration. @return New Writable instance.
2161 Creates a SocketFactory instance from a class name in Configuration. @param conf Hadoop configuration. @param propValue Class name of the SocketFactory. @return SocketFactory instance.
2162 Decodes the token identifier. @return TokenIdentifier object or null if not found.
2163 Retrieves a DiskValidator instance for the given class. @param clazz DiskValidator class to retrieve. @return DiskValidator instance.
2164 Constructs a DynamicBloomFilter with specified size, hash functions, type, and number of rows.
2165 Adds a new row to the Bloom filter matrix. Creates a new row with specified size, hash functions, type.
2166 Constructs a `RetouchedBloomFilter` with specified size, hash functions, type.
2167 Loads properties from a given Properties object. @param props Properties to load. @param startIdx Starting index for resource loading. @param fullReload Whether to perform a full reload.
2168 Yields from the election, optionally removing the breadcrumb znode. @param needFence Indicates if a fence is needed for quitting.
2169 Reads data into FileRange objects using vectored I/O. @param ranges List of FileRange objects to fill. @param allocate Allocates ByteBuffer.
2170 Constructs a BlockLocation with block names, hosts, offset, length. Delegates to the full constructor with corruption status false.
2171 Constructs a DurationStatisticSummary with provided data. @param key Summary key @param success Success status @param count Occurrence count @param max Maximum duration @param min Minimum duration @param mean Mean duration statistic (cloned)
2172 Aggregates statistics from a source IOStatistics object. @param source The source IOStatistics to aggregate from. @return True if aggregation was successful, false otherwise.
2173 Creates a snapshot of IOStatistics. Copies stats if source exists. @param source The source IOStatistics object to snapshot.
2174 Iterates over a RemoteIterator and applies a consumer. @param source RemoteIterator to iterate over. @param consumer Consumer to apply to each element. @return Number of elements processed.
2175 Writes an object to a DataOutput stream using default settings. @param out Output stream @param instance Object to write @param declaredClass Class of the object @param conf Hadoop configuration
2176 Requests a prefetch operation for a given block number. @param blockNumber The block number to prefetch.
2177 Acquires a BufferData object for a block, retrying if necessary. @param blockNumber Block number to acquire. @return BufferData object or throws IllegalStateException.
2178 Processes a single path argument, initiating path processing. @param item PathData object to process. @throws IOException if an I/O error occurs.
2179 Processes a list of paths recursively. @param parent Parent PathData, @param itemsIterator Iterator of paths. @throws IOException if an I/O error occurs during processing.
2180 Resolves partial group names for a user. @param userName User to resolve group names for. @param errMessage Error message from previous operation. @param groupNames Comma-separated group names. @return Set of resolved group names.
2181 Executes a shell command. @param cmd Command to execute as string array. @return Command output as a string.
2182 Executes a shell command with given environment and no timeout. @param env Environment variables. @param cmd Command to execute. @return Command output as a string.
2183 Merges credentials from another Credentials object. @param other The Credentials object to merge.
2184 Merges credentials from another Credentials object. @param other The Credentials object to merge from.
2185 Adds delegation tokens for a renewer to the credentials. @param renewer Token renewer. @param credentials Credentials object. @return Array of delegation tokens.
2186 Adds a token to credentials. Returns true if successful, false otherwise. @param token The token to add. @return True if token was added, false if null.
2187 Sets the working directory to the provided path. @param newDir The new working directory path.
2188 Sets modification and access times for a file. @param p The Path of the file. @param mtime Modification time in milliseconds. @param atime Access time in milliseconds.
2189 Converts a Path object to a File object. @param path The Path to convert. @return A File object representing the given Path.
2190 Returns the URI path of a Path object. @param p The Path object to get the URI path from.
2191 Creates a qualified Path using the FileSystem's URI and working dir. @param fs The FileSystem to get URI and working directory from. @return Qualified Path object.
2192 Qualifies a Path using the default FS URI and working dir. @param path Path to qualify, relative or absolute. @return Qualified Path object.
2193 Creates a qualified Path from a given Path. @param path The path to qualify. @return A qualified Path object.
2194 Lists file statuses for a given path. @param f The path to list statuses for. @return An array of FileStatus objects.
2195 Deletes a file or directory. @param f The path to delete. @param recursive If true, delete recursively. @return True if successful, false otherwise.
2196 Opens a file for input stream access. @param f The path to the file to open. @return An FSDataInputStream for reading the file.
2197 Opens a file for reading. @param f The path to the file. @param bufferSize The size of the buffer. @return FSDataInputStream object.
2198 Truncates a file to the specified length. @param f The path to the file. @param newLength The new length of the file. @return True if successful.
2199 Sets the replication factor for a file. @param f The path to the file. @param replication The new replication factor. @return True if successful.
2200 Sets the file permission to the given permission. @param f The path to the file. @param permission The desired FsPermission.
2201 Sets the owner (user and group) of a file. @param f The path to the file. @param username The username. @param groupname The groupname.
2202 Sets modification and access times for a file. @param f The file path. @param mtime Modification time. @param atime Access time.
2203 Gets the file checksum for a given path. @param f The path to get the checksum for. @return FileChecksum object.
2204 Gets the file status for a given path. @param f The path to get the status for. @return FileStatus object representing the file's status.
2205 Checks file access permissions. @param path The path to check. @param mode The access mode to check.
2206 Gets the FileStatus of a file link. @param f The Path of the file link. @return FileStatus object.
2207 Resolves a symbolic link target. @param f The Path representing the symbolic link. @return The Path to the link target.
2208 Gets block locations for a file within a specified range. @param f The file path. @param start Start offset. @param len Length of data. @return BlockLocation array.
2209 Gets the file status for a given path. @param f The path to get the status for; null uses defaultFS. @return FsStatus object or defaultFS status if path is null.
2210 Creates a symbolic link from {@code link} to {@code target}. @param target The path to link to. @param link The link path. @param createParent Whether to create parent directories.
2211 Lists status for files and directories under the given path. @param f The path to list status for. @return RemoteIterator of FileStatus objects.
2212 Lists corrupt file blocks within a given path. @param path The path to search for corrupt blocks. @return A RemoteIterator of Path objects.
2213 Lists located file statuses for a given path. @param f The path to list statuses for. @return RemoteIterator of LocatedFileStatus objects.
2214 Resolves AbstractFileSystems for a given path. @param f The path to resolve. @return Set of AbstractFileSystems found at the path.
2215 Modifies ACL entries for a given path. @param path The path to modify. @param aclSpec List of ACL entries to apply. @throws IOException if an I/O error occurs.
2216 Removes ACL entries from a specified path. @param path The path to modify. @param aclSpec List of ACL entries to remove. @throws IOException if an I/O error occurs.
2217 Removes the default ACL for a given path. @param path The path for which to remove the default ACL. @throws IOException if an I/O error occurs.
2218 Removes ACL entries for a given path. @param path The path for which ACLs should be removed. @throws IOException if an I/O error occurs.
2219 Sets the ACL for a given path. @param path The path to set the ACL for. @param aclSpec List of AclEntry objects to set. @throws IOException if an I/O error occurs.
2220 Gets the ACL status for a given path. @param path The path to retrieve ACL status for. @return AclStatus object representing the ACL status.
2221 Sets an extended attribute on a file. @param path The path to the file. @param name Attribute name. @param value Attribute value. @param flag XAttrSetFlag enum.
2222 Retrieves the value of an extended attribute by name. @param path The path to the file. @param name The name of the extended attribute.
2223 Retrieves extended attributes for a given path. @param path The path to fetch extended attributes from. @return Map of extended attributes or an empty map if none.
2224 Retrieves extended attributes for a file or directory. @param path The path to the file or directory. @param names List of attribute names to retrieve. @return Map of attribute names to their byte array values.
2225 Removes an extended attribute from a file or directory. @param path The path to the file/directory. @param name The name of the extended attribute.
2226 Lists extended attributes for a given path. @param path The path to list extended attributes for. @return List of extended attribute names or empty list.
2227 Creates a snapshot of the given file/directory. @param path The path of the file/directory to snapshot. @param snapshotName Name of the snapshot. @return Path object representing the snapshot.
2228 Renames a snapshot. @param path The path to the snapshot. @param snapshotOldName Old snapshot name. @param snapshotNewName New snapshot name.
2229 Deletes a snapshot from the file system. @param path The path to the file containing the snapshot. @param snapshotName The name of the snapshot to delete.
2230 Applies the storage policy to the given path. @param path The path to apply the storage policy to. @throws IOException if an I/O error occurs.
2231 Sets the storage policy for a given file path. @param path The path to the file. @param policyName The storage policy name.
2232 Removes a storage policy from a file or directory. @param src Path to the file or directory. @throws IOException if an I/O error occurs.
2233 Retrieves the storage policy for a given path. @param path The path to check for a storage policy. @return The storage policy associated with the path.
2234 Checks if a path has the specified capability. @param path The path to check. @param capability The capability to verify.
2235 Resolves server defaults for a given path. @param path Path to resolve server defaults for. @return ServerDefaults object.
2236 Creates a MultipartUploaderBuilder for the given path. @param basePath Path to create the uploader for. @return MultipartUploaderBuilder object.
2237 Gets the working directory, always returning the home directory. @param client SFTP channel @return Path object representing working directory.
2238 Refreshes the FileStatus for the path, ensuring accuracy. @return FileStatus object or null if not found.
2239 Gets the used space for the file system root. @return The used space in bytes.
2240 Resolves a source path using regex mount points. @param srcPath Source path string to resolve. @param resolveLastComponent Whether to resolve last component. @return ResolveResult or null if no match found.
2241 Checks if a file exists in any of the local directories. @param pathStr Path to check. @param conf Hadoop configuration. @return True if file exists, false otherwise.
2242 Deletes a MapFile directory and its data/index files. @param fs FileSystem object. @param name MapFile directory name.
2243 Determines the path to the current log directory based on time. @param now Current date for calculating directory. @return Path object representing the current log directory.
2244 Creates a FileOutputStream, using secure or insecure creation. @param f The file to create. @param permissions File permissions to set. @throws IOException if an I/O error occurs.
2245 Checks if source and target paths are both in RESERVED_RAW. Throws PathOperationException if they differ. @param src Source path. @param target Target path. @return True if both are RESERVED_RAW, false otherwise.
2246 Gets the parent path. Returns null if the path is root.
2247 Returns the parent path as an Optional. Returns empty if null.
2248 Returns an iterator for contents of the directory. @return RemoteIterator of PathData objects @throws IOException if an I/O error occurs
2249 Constructs a builder with a FileContext and Path. @param fc FileContext for file system operations. @param p Path to create the output stream for. @throws IOException if an I/O error occurs.
2250 Sets the checksum verification flag for a file. @param verifyChecksum Flag to enable/disable checksum verification. @param f The path to the file.
2251 Reads FileStatus from DataInput, populating attributes. @param in DataInput stream to read from.
2252 Constructs a LocatedFileStatus with file attributes and locations. @param locations array of block locations
2253 Appends a key-value pair to the file, updating index if needed. @param key The key to append. @param val The value to append.
2254 Closes the service by stopping it. Stops the service and releases resources.
2255 Writes a byte to the buffer, flushing when full.
2256 Writes data to the buffer, calculates checksums, and flushes. @param b data to be written @param off offset in the data array @param len number of bytes to write @return number of bytes written
2257 Validates decoding process using ECChunks. @param inputs ECChunk input array @param erasedIndexes Erased indexes for validation @param outputs ECChunk output array
2258 Finishes the current data block, compressing and closing it.
2259 Reads token storage from an input stream. @param in Input stream containing the token storage.
2260 Retrieves candidate tokens for cleanup from SQL storage. Returns a map of TokenIdent to DelegationTokenInformation.
2261 Reads the next raw value from the input stream. @param rawValue Buffer to store the raw value. @return Length of the raw value read.
2262 Writes credentials to a DataOutput stream in protobuf format. Writes tokens and secret keys to the output.
2263 Converts a Token object to a TokenProto. @param tok The Token to convert. @return TokenProto object.
2264 Returns the next entry. Calls checkKey() to advance.
2265 Compares the cursor key to another key. @return comparison result. Throws exception if unsorted.
2266 Reads key and value from the stream into provided BytesWritable objects. @param key Key to populate. @param value Value to populate.
2267 Advances the scanner by n records. Checks keys and closes stream.
2268 Obtains a delegation token from a URL. @param url URL for token retrieval. @param renewer User. @return Delegation token.
2269 Renews a delegation token via HTTP. @param url URL for renewal. @param token Authentication token. @param dToken Delegation token.
2270 Cancels a delegation token via HTTP. @param url URL for cancellation. @param token Authentication token. @param dToken Delegation token to cancel.
2271 Gets an input stream from a socket, using its timeout. @param socket The socket to get the input stream from. @return SocketInputWrapper object.
2272 Gets an output stream for the socket. @param socket Socket to use. @return OutputStream object.
2273 Connects a socket to an endpoint with a timeout. @param socket The socket to connect. @param address Remote address to connect to. @param timeout Connection timeout in milliseconds.
2274 Samples metrics from configured sources and returns a buffer. @return MetricsBuffer containing the sampled metrics.
2275 Registers an MBean with the platform. @param serviceName MBean service name. @param nameName MBean name. @param theMbean The MBean instance to register.
2276 Gets the ReadWriteDiskValidatorMetrics for the given directory. @param dirName Directory name to retrieve metrics for. @return ReadWriteDiskValidatorMetrics instance.
2277 Initializes RPC stats for a given number of priority levels. @param numLevels Number of priority levels to initialize.
2278 Collects thread-local metric states and aggregates them globally.
2279 Creates a new MutableRate with the given name. @param name Metric name, used as description as well.
2280 Creates a new MutableRate. Returns existing if present. @param name Metric name @param description Metric description
2281 Dumps keytab details to console, including principals & keys. @param keytabFile Keytab file to examine. @throws IOException if an I/O error occurs.
2282 Validates JAAS configuration, checking file existence and content. @param jaasRequired Whether JAAS configuration is required.
2283 Gets the real owner of a token. Uses token's real user or user name.
2284 Creates parent ZNodes in ZK, ensuring existence and ACLs. @throws IOException, KeeperException, InterruptedException
2285 Retrieves active data from ZooKeeper. @return Data from ZooKeeper, throws ActiveNotFoundException if absent. @throws KeeperException, InterruptedException, IOException
2286 Checks TGT validity and relogins from keytab, refreshing credentials.
2287 Relogins the user from a keytab, refreshing credentials.
2288 Resolves a socket address, using localhost if unresolved. @param addr InetSocketAddress to resolve. @return Resolved InetSocketAddress.
2289 Updates the connection address if it has changed. @return True if address was updated, false otherwise.
2290 Returns a URI with a canonicalized host and default port if needed. @param uri The URI to canonicalize. @param defaultPort Default port to use if port is missing.
2291 Sends RPC request, returns response or null if async. @param rpcKind RPC kind, request, remote ID, etc. @return RPC response or null in async mode. @throws IOException if interrupted or error occurs.
2292 Waits for cache entry completion, adding if absent. @param newEntry The cache entry to wait for or add. @return The completed cache entry.
2293 Adds a new cache entry for a retryable request. @param clientId Client ID. @param callId Unique call identifier.
2294 Generates a formatted string representation of metrics. @param qOption Formatting flag.
2295 Retrieves an expression instance by name. @param expressionName Name of the expression to retrieve. @param conf Configuration object. @return Expression instance or null if not found.
2296 Creates an Expression instance by class name. @param expressionClassname Class name of the expression. @param conf Configuration object. @return Expression instance or null if class is invalid.
2297 Builds a description string of available expressions and operators. @param factory Expression factory to create expression instances.
2298 Creates an Expression instance of the given class. @param expressionClass Expression class to instantiate.
2299 Retrieves a command instance by name, using the default configuration. @param cmd Command name to retrieve. @return Command instance or null if not found.
2300 Reads an object from input. @param in Input stream. @param objectWritable Object to store results. @param conf Hadoop configuration. @return The read object.
2301 Creates a new Writable instance of the given class. @param c Writable class to instantiate. @return New Writable instance.
2302 Decodes a token identifier. @param token The token to decode. @return TokenIdent object.
2303 Prints delegation tokens matching the alias to the output stream. @param creds Credentials object containing tokens. @param alias Token alias to filter by. @param out PrintStream to write output to.
2304 Retrieves a DiskValidator instance by name or class name. @param diskValidator Validator name or class name. @return DiskValidator instance. @throws DiskErrorException if validator not found.
2305 Default constructor. Calls the full constructor with default values.
2306 Gets block locations for a file, starting at a given offset. @param file FileStatus object @param start Offset to start reading from @param len Length of data to read @return Array of BlockLocation objects
2307 Fetches a duration summary from the provided IOStatistics. @param source IOStatistics source @param key Summary key @param success Success status
2308 Creates an IOStatisticsSnapshot containing the current statistics. @return A snapshot of the current IOStatistics.
2309 Creates an IOStatisticsSnapshot from the given statistics. @param statistics The IOStatistics object to snapshot. @return An IOStatisticsSnapshot object.
2310 Creates an IOStatisticsSnapshot from a given IOStatistics object. @param source The IOStatistics object to create a snapshot from. @return A new IOStatisticsSnapshot.
2311 Converts a RemoteIterator to a List. @param source RemoteIterator to convert. @return List containing elements from the iterator.
2312 Processes a path argument, either existing or nonexistent. @param item PathData object representing the path to process. @throws IOException if an I/O error occurs.
2313 Retrieves Unix group names for a user, handling errors and timeouts. @param user User for whom to fetch groups. @return Set of group names, or empty set on error/timeout.
2314 Runs a resolve command with given arguments, returning output. @param args Arguments to pass to the command. @param commandScriptName Script name to execute.
2315 Reads the target of a symbolic link. @param f File object representing the link. @return Target path as a String, or "" if error.
2316 Sets the file permissions using native chmod or shell command. @param p The path to the file. @param permission The desired file permissions.
2317 Executes shell command to retrieve users for a netgroup. @param netgroup Netgroup name (without leading '@'). @return Command output as string.
2318 Creates a new Credentials object by merging from another. @param credentials The Credentials object to merge from.
2319 Adds credentials to the subject's credentials. @param credentials Credentials object to add.
2320 Converts a Path object to a File object for local paths. @return A File object representing the Path.
2321 Creates directory if it doesn't exist and sets permission. @param localFS Local file system object. @param dir Path of the directory. @param expected Expected file system permissions.
2322 Gets the FileStatus for a given path, dereferencing symlinks. @param f The path to get the status for. @param dereference Whether to dereference symlinks.
2323 Gets the enclosing root path of a given path. @param path The path to find the enclosing root. @return The enclosing root path.
2324 Processes and deletes files/directories marked for deletion. Clears the DELETE_ON_EXIT set after processing.
2325 Checks if a file or directory exists. @param f The Path to check. @return True if the path exists, false otherwise.
2326 Sets the working directory to the given path. @param newWDir The new working directory path. @throws IOException if the path is a file.
2327 Checks if the destination path exists and is writable. @param srcName Source file name, null if directory. @param dst Destination Path. @param overwrite Whether to overwrite existing files.
2328 Gets content summary for a path. @param f The path to get the summary for.
2329 Gets delegation tokens for a renewer across multiple file systems. @param p The path. @param renewer The renewer. @return List of delegation tokens.
2330 Sets an extended attribute on a file. @param path File path. @param name Attribute name. @param value Attribute value.
2331 Creates a snapshot of the given file/directory. @param path The path of the file/directory to snapshot. @return Path object representing the snapshot.
2332 Initializes the builder with a FileContext and Path. @param fc The FileContext to use. @param p The path for the upload.
2333 Waits for files in waitList to be truncated to newLength. Iterates through waitList, refreshing status and waiting.
2334 Tries to resolve path using regex mount points. @param srcPath Path to resolve. @param resolveLastComponent Whether to resolve last component.
2335 Checks if a file exists at the given path. @param pathStr Path to check. @param conf Hadoop configuration. @return True if file exists, false otherwise.
2336 Resolves a path within the HAR archive. @param path The path to resolve within the archive. @return Path representing resolved path or Path separator.
2337 Constructs the path to the checksum file for a given file. @param file The original file path. @return Path object representing the checksum file.
2338 Checks if the parent directory exists. Returns true if it does.
2339 Creates a directory. Creates parent directories if specified. @param f the path of the directory to create @param absolutePermission file permissions @param createParent if true, creates parent directories @throws IOException if creation fails
2340 Renames a file or directory from src to dst. @param src Source path. @param dst Destination path. @param options Rename options (e.g., OVERWRITE).
2341 Creates a Path object representing the checksum file for a given file. @param file The original file Path. @return Path to the checksum file.
2342 Checks if a path is a descendant of the base path. @param p Path to validate. @param basePath Base path to check against.
2343 Checks if the path is a root path (no parent).
2344 Adds a suffix to the path's name. Returns a new Path object. @param suffix The suffix to append to the path's name.
2345 Qualifies the symlink target path. @param pathURI URI of the original path. @param pathWithLink Path with the symlink. @param target The target path to qualify. @return Qualified target path.
2346 Renames a file or directory. @param src Source path. @param dst Destination path. @param overwrite Overwrite existing destination.
2347 Constructs a FileStatus with specified attributes and null group. @param path the path of the file or directory
2348 Constructs a FileStatus by copying attributes from another. Uses getters to allow subclasses to override attributes.
2349 Constructs a LocatedFileStatus from a FileStatus and block locations. @param stat The FileStatus to copy attributes from. @param locations Array of block locations.
2350 Constructs a LocatedFileStatus with file attributes and locations. @param locations array of block locations
2351 Appends a Writable value to the file and increments the count. @param value The Writable value to append.
2352 Writes data to the output stream, handling potential errors. @param b byte array to write @param off start offset in the array @param len number of bytes to write @throws IOException if an I/O error occurs
2353 Finalizes the stream, completing compression and calls super.
2354 Moves the cursor to the end of the TFile data.
2355 Closes the scanner by moving the cursor to the end of the file.
2356 Reads credentials from a file. @param filename File containing the credentials. @param conf Hadoop configuration @return Credentials object @throws IOException if an I/O error occurs
2357 Advances the cursor to a key within a block. @param key The key to search for. @param greater True for greater than, false otherwise. @throws IOException if an I/O error occurs.
2358 Publishes metrics immediately to registered sinks. Publishes sampled metrics to all configured sinks.
2359 Initializes metrics for a protocol. @param protocol Class representing the protocol.
2360 Collects and aggregates thread-local metric states.
2361 Adds a value to a metric. Creates a default rate if not found. @param name Metric name. @param value Value to add.
2362 Increments token count for a token's owner. @param id TokenIdent object representing the token.
2363 Decrements token count for an owner or removes if zero. @param id Token identifier.
2364 Retrieves the currently active HAServiceTarget from ZooKeeper. @return HAServiceTarget object or null if not found. @throws IOException, InterruptedException
2365 Constructs an ActiveStandbyElector with provided configuration. @param zookeeperHostPorts Zookeeper host ports.
2366 Creates an InetSocketAddress from target, port, and config. @param target Address string. @param defaultPort Default port.
2367 Resolves a server's address, using localhost if unresolved. @param server Server object containing listener address. @return Resolved InetSocketAddress.
2368 Sends an RPC request. @param rpcKind RPC kind, request, remote ID, auth flag @return RPC response or null if async @throws IOException if interrupted or error occurs
2369 Waits for completion of a cache entry or returns null if skipped. @param cache The RetryCache instance. @param clientId Client identifier. @param callId Call identifier.
2370 Waits for completion of a retry cache entry. @param cache RetryCache instance. @param payload Entry payload. @return CacheEntryWithPayload or null if skipped.
2371 Retrieves an expression instance by name from the factory. @param expressionName Name of the expression to retrieve.
2372 Gets a WritableComparator for the given class. @param c WritableComparable class. @param conf Hadoop configuration.
2373 Constructs a WritableComparator for the given key class. @param keyClass Class of WritableComparable.
2374 Constructs a LocalDirAllocator with a DiskValidator. @param contextCfgItemName Name of the context configuration item.
2375 Sets deprecated properties based on deprecation context. Uses newKeys from DeprecatedKeyInfo to populate props.
2376 Creates a new Configuration by cloning another Configuration. @param other The Configuration to clone.
2377 Adds a resource to the configuration. @param conf The configuration object.
2378 Returns alternative names for a given key, considering deprecation. @param name The key name to check for alternatives. @return An array of alternative names, or null if none exist.
2379 Gets property sources for a given name. @param name Property source name. Returns null if not found.
2380 Returns the number of configuration properties.
2381 Clears all configuration properties, including overlay properties.
2382 Returns an iterator over the configuration's string-string pairs.
2383 Retrieves configuration properties matching the given regex. @param regex Regex pattern to match property keys. @return Map of matching keys and their substituted values.
2384 Reads data from file ranges using vectored I/O with checksums. @param ranges List of FileRange objects to read. @param allocate Allocates ByteBuffer for reading.
2385 Retrieves a BufferData object for a given block number. @param blockNumber Block number to retrieve. @throws IOException if stream is closed or I/O error occurs.
2386 Waits for file replication to complete, checking block locations. Iterates through waitList, refreshing status and verifying replication count.
2387 Gets block locations for a file, starting at an offset. @param p Path object @param start Offset to start reading from @param len Length of data to read @return Array of BlockLocation objects
2388 Fetches a success duration summary from the provided IOStatistics. @param source IOStatistics source @param key Summary key
2389 Creates an IOStatisticsSnapshot. Calls overloaded method with null.
2390 Retrieves an IOStatisticsSnapshot from a source object. @param source Source object containing IO statistics. @return IOStatisticsSnapshot or null if statistics are unavailable.
2391 Converts a RemoteIterator to an array. @param source RemoteIterator to convert. @param a Array to hold the elements. @return Array containing elements from the iterator.
2392 Renews a delegation token. @param token Token to renew. @param renewer Renewer principal. @return Renewed token expiration time.
2393 Cancels a delegation token. @param token Token to cancel; contains token identifier. @param canceller User canceling the token. @return Token identifier after cancellation. @throws IOException on error
2394 Processes a list of path arguments, handling potential IO errors. @param args LinkedList of PathData objects to process. @throws IOException if an I/O error occurs during processing.
2395 Retrieves Unix groups for a user. @param userName User for whom to fetch groups. @return List of Unix group names.
2396 Gets the number of hard links to a file. @param fileName File to check; throws exception if null/missing. @return Link count as an integer.
2397 Creates a symbolic link. @param target Target path. @param linkname Link path. @return Exit code of the symlink creation command.
2398 Changes file permissions. @param filename File to modify. @param perm Permission string. @param recursive Recursive permission change. @return Exit code of the chmod command.
2399 Checks if setsid is supported by the system. Returns true if supported, false otherwise.
2400 Sets the owner of a file or directory. @param file File object. @param username Username for the new owner. @param groupname Groupname for the new owner.
2401 Retrieves a list of usernames belonging to a netgroup. @param netgroup Netgroup name (without leading '@'). @return List of usernames in the netgroup.
2402 Returns a Credentials object, removing private tokens. Uses internal credentials and removes private tokens.
2403 Lists files matching filter under path. @param f Path to list files from. @param filter Filter to apply to file paths. @return Array of FileStatus objects.
2404 Lists file statuses for multiple paths, filtered by the provided filter. @param files Paths to list statuses from. @param filter Filter to apply to file paths. @return Array of FileStatus objects.
2405 Resolves a path, handling mount points and links. @param p The path to resolve. @param resolveLastComponent Whether to resolve last component.
2406 Sets the replication factor for a file and its checksum file. @param src The file path. @param replication The new replication factor. @return True if successful, false otherwise.
2407 Deletes a file or directory, recursively if specified. @param f Path to delete. @param recursive Whether to delete recursively. @return True if successful, false otherwise.
2408 Renames a file or directory. Handles checksum renaming/deletion. @param src Source path. @param dst Destination path. @return True if rename successful, false otherwise.
2409 Deletes a file or directory, recursively if specified. @param f Path to delete. @param recursive Whether to delete recursively. @return True if deleted, false otherwise.
2410 Checks if the source path is an ancestor of the target path. @param source PathData representing the source path. @param target PathData representing the target path.
2411 Constructs a full path by prepending the chroot path. @param path The path to combine with the chroot path. @return A Path object representing the full path.
2412 Removes the root path from a given Path object. @param p The Path object from which to strip the root. @return The path part after removing the root.
2413 Removes the root path from a given path. @param p The path to strip the root from. @return The path without the root, or "" if no root.
2414 Resolves a path by following symbolic links. @param fc FileContext object for filesystem operations. @param path Path to resolve. @return Resolved path object. @throws IOException if resolution fails or symlinks are disabled.
2415 Renames a file or directory. @param src Source path. @param dst Destination path.
2416 Creates a FileStatus from a HarStatus, handling version differences. @param h The HarStatus to convert. @return FileStatus representing the HAR file or directory.
2417 Creates a FileStatus from an FTPFile and parent path. @param ftpFile The FTP file to create status for. @param parentPath The parent path of the file. @return A FileStatus object representing the FTP file.
2418 Verifies token file read. Returns false if read fails, logs error. @param tokenFile Token file to verify. @param conf Hadoop configuration. @param category Error category. @param message Error message.
2419 Prints delegation tokens from a file, filtered by alias. @param tokenFile File containing the tokens. @param alias Token alias to filter by. @param conf Hadoop configuration. @param out PrintStream to write output to.
2420 Syncs the local cache with ZooKeeper for a given token ident. @param ident TokenIdent containing sequence number
2421 Creates a MetricsSystemImpl with the given prefix. @param prefix Metric prefix, used to initialize the system MBean.
2422 Processes an RPC call, handling method invocation and metrics. @param server The RPC server instance. @param request RPC request buffer.
2423 Adds elapsed time to a metric. @param name Metric name. @param elapsed Time elapsed in milliseconds.
2424 Adds a persisted delegation token. @param identifier Token identifier. @param renewDate Token renewal date.
2425 Updates token owner statistics based on current tokens. Clears existing stats and increments for each token owner.
2426 Removes expired delegation tokens and updates statistics. @throws IOException if an I/O error occurs during logging.
2427 Constructs an ActiveStandbyElector with provided configuration. @param zookeeperHostPorts Zookeeper host ports
2428 Attempts to join the election process. @param data Data used for election; must not be null.
2429 Creates an InetSocketAddress from target, port, and config. @param target Address string, @param defaultPort Default port
2430 Invokes a remote method. @param proxy RPC proxy object. @param method RPC method to invoke. @param args Method arguments. @return RPC response or null in async mode. @throws ServiceException if an error occurs.
2431 Invokes a method on a remote proxy. @param proxy The proxy object. @param method The method to invoke. @param args Method arguments. @return RPC response or null in async mode. @throws ServiceException if an error occurs.
2432 Parses an expression from a deque of arguments. @param args Arguments to parse, pop() is used. @return An Expression object.
2433 Gets a WritableComparator for the given class. @param c WritableComparable class.
2434 Authenticates a request using a delegation token or fallback. @param request HTTP request object @param response HTTP response object @return AuthenticationToken object or null on failure
2435 Handles deprecated keys, logs warnings, and updates properties. @param deprecations Deprecation context with key mappings. @param name Property name to handle. @return Array of updated names.
2436 Populates environment variables from configuration key-value pairs.
2437 Cancels a delegation token and returns its identifier. @param token Token to cancel. @param canceller User canceling the token. @return Token identifier after cancellation.
2438 Retrieves Unix groups for a user, including netgroups. @param user User identifier. @return List of Unix group names.
2439 Untars a file to a directory, handling gzipped archives. @param inFile File to untar. @param untarDir Destination directory.
2440 Changes file permissions. @param filename File to modify. @param perm Permission string.
2441 Sets file read permission based on OS. @param f The file to modify. @param readable Whether the file should be readable. @return True if successful, false otherwise.
2442 Sets file writable permission. Uses native chmod on Unix. @param f The file to modify. @param writable Desired writable state (true/false). @return True if successful, false otherwise.
2443 Sets file executable permission. Uses native chmod on Unix. @param f File to modify. @param executable Whether the file should be executable. @return True if successful, false otherwise.
2444 Loads file permission info, first via native IO, then non-native.
2445 Sets the owner of a file or directory. @param p Path object. @param username Username for the new owner. @param groupname Groupname for the new owner.
2446 Sets file permissions. @param f File object. @param permission FsPermission object. @throws IOException if operation fails.
2447 Caches netgroups, retrieving users if not already cached. @param groups List of netgroup names to cache.
2448 Dumps Kerberos tokens for a user. @param ugi UserGroupInformation object.
2449 Logs user information and credentials for debugging. @param log Logger instance for logging. @param caption Descriptive caption for the log entry. @param ugi UserGroupInformation object to log.
2450 Checks if a directory exists and has the expected permissions. @param localFS Local file system object. @param dir The directory to check. @param expected Expected file system permissions.
2451 Checks directory existence and permissions using disk I/O. @param localFS Local file system object. @param dir The directory to check. @param expected Expected file system permissions.
2452 Lists file statuses for paths, using the default filter. @param files Paths to list statuses from. @return Array of FileStatus objects.
2453 Gets the used space. Throws NotInMountpointException if not mounted.
2454 Gets block locations for a file within the HAR archive. @param file FileStatus object @param start Offset to start reading from @param len Length of data to read @return Array of BlockLocation objects
2455 Opens an FSDataInputStream for the given path. @param f Path to open; must be a valid file within the HAR. @param bufferSize Input stream buffer size. @throws IOException if file is not found or is a directory.
2456 Opens an input stream for the given path with specified buffer size. @param f Path to open @param bufferSize Buffer size for input stream @return FSDataInputStream for reading data from the path
2457 Opens a file for reading, optionally verifying checksums. @param f Path to the file @param bufferSize I/O buffer size @return FSDataInputStream for reading the file
2458 Renames a file or directory, also renaming its checksum file. @param src Source path. @param dst Destination path.
2459 Renames a file or directory from src to dst. @param src Source path. @param dst Destination path.
2460 Adds file statuses for children of a HAR entry to the list. @param parent HAR status of the parent directory @param statuses List to add FileStatus objects to
2461 Gets the FileStatus for a path within the HAR file. @param f Path to the file; must be a valid path within HAR. @return FileStatus object or null if not found.
2462 Retrieves a FileStatus for a given path. @param client SFTP client channel @param file Path to the file or directory @return FileStatus object or throws FileNotFoundException
2463 Gets FileStatus for a file on the FTP server. @param client FTP client connection @param file Path to the file @return FileStatus object or throws FileNotFoundException
2464 Creates a MetricsSystemImpl with a null prefix.
2465 Creates a new RatesRoller with a given metric name. @param metricValueName Metric name to use for the rolling average.
2466 Replaces the scheduled task with new windows and interval. @param windows Number of windows. @param interval Interval for scheduling. @param timeUnit Time unit for the interval.
2467 Rechecks service electability based on health state. Quits/joins election as needed, schedules recheck if delayed.
2468 Retries election after failing to become active. Retries joining election with a defined sleep time.
2469 Processes ZooKeeper watch events, handling connection state changes and leader election adjustments.
2470 Creates an InetSocketAddress from target and defaultPort. @param target Address string @param defaultPort Default port @return InetSocketAddress object
2471 Authenticates a request, potentially using a delegation token. @param request HTTP request object @param response HTTP response object @return AuthenticationToken or null if unauthorized
2472 Checks if a property exists and equals a default value. @param name Property name to check. @return True if property exists and equals DEFAULT_STRING_CHECK.
2473 Retrieves the raw value of a configuration property. @param name Property name to retrieve. @return Raw property value or null if not found.
2474 Sets a property with a given name, value, and source. @param name Property name. @param value Property value. @param source Source of the property.
2475 Removes a property by name, handling deprecation and aliases. @param name The name of the property to remove.
2476 Gets the virtual memory size in bytes. Refreshes metrics if needed before returning the value.
2477 Returns the physical memory size in bytes. Refreshes if needed.
2478 Gets the available virtual memory size in bytes. Refreshes metrics if needed before returning the value.
2479 Gets the available physical memory size in bytes. Refreshes metrics if needed before returning the value.
2480 Returns the number of processors. Refreshes metrics if needed.
2481 Returns the current CPU frequency in kHz. Refreshes metrics if needed before returning the value.
2482 Gets cumulative CPU time in milliseconds. Refreshes metrics if needed.
2483 Returns CPU usage percentage, divided by the number of processors.
2484 Returns the percentage of vCPUs used. Refreshes if needed.
2485 Returns the total number of bytes read from the network. Refreshes metrics if needed before returning the value.
2486 Returns the total number of network bytes written. Refreshes metrics if needed before returning the value.
2487 Refreshes the netgroup cache by fetching and caching group names.
2488 Updates the FsStatus of a mount point in the map. @param viewFileSystem ViewFileSystem object. @param mountPointMap Map of MountPoint to FsStatus. @param mountPoint The mount point to update. @param path The path for which to get the FsStatus.
2489 Lists status entries for paths within a HAR archive. @param f Path to list; resolves relative paths. @return Array of FileStatus objects.
2490 Gets FileStatus, using deprecated or native methods based on config. @param f The Path to get the status for. @param dereference Whether to dereference symlinks. @throws IOException if an I/O error occurs.
2491 Gets the FileStatus for a given path. @param f The path to get the status for. @return FileStatus object representing the path.
2492 Lists status of files/dirs under the given path. @param f The path to list. @return Array of FileStatus objects.
2493 Checks if a file or directory exists on the SFTP server. @param channel SFTP channel @param file Path to check @throws IOException if an I/O error occurs
2494 Retrieves a FileStatus from an SFTP LsEntry. @param channel SFTP channel @param sftpFile Entry containing SFTP file attributes @param parentPath Parent path of the file @return FileStatus object
2495 Checks if the given file exists and is a regular file. @param channel SFTP channel @param file Path to the file @throws IOException if an I/O error occurs
2496 Checks if a file exists on the FTP server. @param client FTP client connection @param file Path to the file @return True if the file exists, false otherwise.
2497 Lists file statuses for a given path on the FTP server. @param client FTP client @param file Path to list @return Array of FileStatus objects
2498 Checks if a file exists on the FTP server. @param client FTP client connection @param file Path to the file @return True if file exists, false otherwise.
2499 Initializes CBZip2InputStream with input stream and read mode. @param in Input stream for compressed data. @param readMode Read mode (CONTINUOUS or BYBLOCK). @throws IOException if an I/O error occurs.
2500 Reads compressed data until the next marker. @param in Input stream for BZip2 compressed data. @return Number of bytes read until next marker.
2501 Processes the result of a ZooKeeper operation. Handles leader election, standby state transitions, and retries.
2502 Processes ZooKeeper result, transitions to active/standby, or retries. @param rc Zookeeper result code. @param path Zookeeper path. @param ctx Client context. @param stat Stat object containing Zookeeper information.
2503 Creates an InetSocketAddress from target host. @param target Address string @return InetSocketAddress object
2504 Parses address specifications into a list of InetSocketAddresses. @param specs Comma/space-separated addresses or null for localhost. @param defaultPort Default port to use if not specified. @return List of InetSocketAddress objects.
2505 Builds a token service name from a URI and default port. @param uri The URI containing the token service address. @param defPort Default port number. @return Token service name as a String, or null if URI invalid.
2506 Creates an XML document representing the configuration. @param propertyName Property name to include, or null for all. @param redactor ConfigRedactor for redaction. @return XML document of configuration.
2507 Substitutes variables in a string expression. @param expr String expression to substitute variables in.
2508 Applies configuration changes from a request. @param out Output writer for messages. @param reconf Reconfigurable object. @param req HTTP request containing changes.
2509 Sets a property with a given name and value. @param name Property name. @param value Property value.
2510 Sets a property, logs the change, and calls the superclass set. @param name Property name. @param value Property value. @param source Source of the property.
2511 Recursively deletes a file or directory. @param dir The file or directory to delete. @param tryGrantPermissions Whether to grant permissions first.
2512 Returns the number of processors. Delegates to getNumProcessors().
2513 Gets the status of mount points for a given path. @param fileSystem The FileSystem to check. @param path The path to check. @return Map of MountPoint to FsStatus.
2514 Gets FileStatus of a file or symlink, qualifying symlink target. @param f The Path to get the status for. @return FileStatus object.
2515 Renames a file or directory on the SFTP server. @param channel SFTP channel @param src Source path @param dst Destination path @return True if rename was successful, false otherwise.
2516 Lists status of files/dirs under a path. @param client SFTP client @param file Path to list @return Array of FileStatus objects
2517 Creates directories recursively. @param client SFTP channel @param file Path to create @param permission FsPermission for the directory @throws IOException if an I/O error occurs
2518 Returns FileStatus objects matching the glob pattern. @param pathPattern Glob pattern to match. @return Array of matching FileStatus objects.
2519 Returns FileStatus objects matching the glob pattern. @param pathPattern Glob pattern to match. @param filter Path filter to apply. @return Array of FileStatus objects.
2520 Returns FileStatus objects matching the given path pattern. @param pathPattern The path pattern to match. @return Array of matching FileStatus objects.
2521 Returns an array of FileStatus objects matching the glob pattern. @param pathPattern Path pattern to match. @param filter Path filter to apply. @return Array of FileStatus objects.
2522 Renames a file or directory on the FTP server. @param client FTP client connection @param src Source path to rename @param dst Destination path @return True if rename was successful, false otherwise
2523 Deletes a file or directory recursively on the FTP server. @param client FTP client connection @param file Path to delete @param recursive Whether to delete recursively @throws IOException if directory is not empty and not recursive
2524 Creates directories recursively on the FTP server. @param client FTP client, @param file Path to create, @param permission Directory permission. @return True if created, false otherwise.
2525 Normalizes an IP address or IP:port string to hostname:port. @param ipPort IP address or IP:port string to normalize. @return Normalized hostname:port string.
2526 Gets the address of the token service. @param token The token to extract the service address from. @return InetSocketAddress representing the token service address.
2527 Builds a Text representation of the token service address. @param uri URI containing the token service authority. @return Text object representing the token service address.
2528 Gets the canonical service name. Returns null if child FS exists.
2529 Gets the canonical service name for the file system. Uses the URI to construct the service name.
2530 Substitutes common variables in a string expression. @param expr String expression to substitute variables in
2531 Retrieves a configuration property value by name. @param name Property name to retrieve. @return Property value or null if not found.
2532 Gets property value, handles deprecations, and substitutes vars. @param name Property name to retrieve. @param defaultValue Default value if property is not found.
2533 Adds an optional configuration key-value pair. @param key Configuration key. @param value Configuration value. @return Reference to this builder.
2534 Marks a configuration key as mandatory and sets its value. @param key Configuration key. @param value Configuration value. @return Reference to this builder.
2535 Sets the default file system URI in the configuration. @param conf Hadoop configuration object. @param uri URI of the default file system.
2536 Adds a link configuration to the given Hadoop configuration. @param conf Hadoop configuration object. @param mountTableName Mount table name. @param src Source path for the link.
2537 Adds a link merge slash configuration. @param conf Hadoop configuration object. @param mountTableName Mount table name. @param target The target URI.
2538 Adds a link fallback configuration for a mount table. @param conf Hadoop configuration object. @param mountTableName Mount table name. @param target URI of the fallback target.
2539 Adds a link merge configuration to the given Hadoop configuration. @param conf Hadoop configuration object. @param mountTableName Mount table name. @param targets Array of URIs to merge.
2540 Adds an NFly link configuration to the Hadoop configuration. @param conf Configuration object. @param mountTableName Mount table name. @param src Source path. @param settings Link settings. @param targets Target path.
2541 Adds a link regex configuration to the given Hadoop configuration. @param conf Hadoop configuration object. @param mountTableName Mount table name.
2542 Sets the home directory configuration for a view file system. @param conf Hadoop Configuration object. @param mountTableName Mount table name. @param homedir Home directory path.
2543 Sets the umask in the configuration. @param conf Hadoop configuration object. @param umask File system permission umask.
2544 Sets the compression codec classes in the configuration. @param conf Hadoop configuration object. @param classes List of codec class names.
2545 Sets the default compression type for sequence files. @param job Hadoop configuration object. @param val CompressionType to set.
2546 Retrieves a Configuration object with proxyuser settings. @param filterConfig Filter configuration containing init parameters @return Configuration object with proxyuser properties.
2547 Initializes the command-line interface and parses arguments. Prints help if no args are provided.
2548 Sets an integer property. Converts the value to a string. @param name Property name. @param value Integer value to set.
2549 Sets a long property. @param name Property name. @param value Long value to set.
2550 Sets a float property. @param name Property name. @param value Float value to set.
2551 Sets a double property. @param name Property name. @param value Double value to set.
2552 Sets a boolean property. @param name Property name. @param value Boolean value to set.
2553 Sets a time duration property with a value and unit. @param name Property name. @param value Duration value. @param unit TimeUnit for the duration.
2554 Sets the storage size property with name, value, and unit. @param name Property name. @param value Storage size value. @param unit Storage size unit.
2555 Sets a pattern for a given name. @param name Pattern name. @param pattern Pattern object.
2556 Sets a string property to a comma-separated string of values. @param name Property name. @param values String array to be joined.
2557 Sets a socket address property. @param name Property name. @param addr The InetSocketAddress to set.
2558 Sets a class property, ensuring the class is assignable. @param name Property name. @param theClass Class to set. @param xface Interface the class must implement.
2559 Recursively deletes a file or directory. @param dir The file or directory to delete.
2560 Recursively deletes a directory's contents. @param dir Directory to delete. @param tryGrantPermissions Whether to grant permissions first.
2561 Lists status of files/dirs under the given path. @param f The path to list. Returns FileStatus array. @throws IOException if an I/O error occurs.
2562 Gets FileStatus for a link, or file if link is broken. @param f Path to the file or link. @throws IOException if an I/O error occurs.
2563 Deletes a file or directory recursively. @param channel SFTP channel @param file Path to delete @param recursive Whether to delete recursively @return True if deleted, false otherwise
2564 Creates a SplitCompressionInputStream for BZip2 decompression. @param seekableIn Seekable input stream. @param decompressor Decompressor object. @param start Start position for decompression. @param end End position for decompression. @param readMode Read mode. @throws IOException if seekableIn is not Seekable.
2565 Adds a metric to a source field if it's not already set. @param source Object to add the metric to. @param field Field to add the metric for.
2566 Retrieves a configuration value for a storage type. @param conf Hadoop configuration object. @param t StorageType to retrieve config for. @param name Config property name.
2567 Gets the FTP transfer mode from the configuration. @param conf Hadoop configuration object. @return FTP transfer mode constant.
2568 Sets the FTP data connection mode based on configuration. @param client FTP client to configure. @param conf Hadoop configuration object.
2569 Gets the home directory value from the configuration. @param conf Hadoop configuration object. @param mountTableName Mount table name. @return Home directory value or null if not found.
2570 Gets the umask from the configuration. @param conf Hadoop configuration object. @return FsPermission representing the umask.
2571 Retrieves a list of CompressionCodec classes from configuration. @param conf Hadoop configuration object. @return List of CompressionCodec classes.
2572 Gets the default compression type from the configuration. @param job Hadoop job configuration. @return CompressionType, RECORD if not specified.
2573 Formats a security property string with value or <NOT SET>. @param property The name of the security property. @return Formatted string representation of the property.
2574 Validates Hadoop token files based on system properties/config. @param conf Hadoop configuration object.
2575 Loads the keystore, using password from env/file or default. @throws IOException if keystore creation or loading fails.
2576 Gets the local hostname, using configuration or falling back. @param conf Hadoop configuration object, or null. @return Hostname string.
2577 Gets the client principal from Kerberos info and config. @param protocol Class representing the protocol. @param conf Hadoop configuration. Returns client principal.
2578 Gets configuration value and trims leading/trailing spaces. @param name Property name to retrieve. @return Trimmed value or null if not found.
2579 Sets a property if it's not already set. @param name Property name. @param value Property value.
2580 Gets time duration, using default if not found. @param name Property name @param defaultValue Default value @param defaultUnit Default unit @param returnUnit Target unit for conversion
2581 Gets storage size for a key, using default if missing, converts units. @param name Key for storage size. @param defaultValue Default value if key is missing. @param targetUnit Desired storage unit. @return Storage size in the target unit.
2582 Gets storage size from config, converts to target unit. @param name Config name, @param defaultValue, @param targetUnit @return Storage size in target unit, or default if not found.
2583 Gets a pattern by name, using default if invalid or missing. @param name Pattern name. @param defaultValue Default pattern to use. @return Pattern object.
2584 Retrieves a comma-separated string collection by name. @param name Property name to retrieve.
2585 Converts a configuration property string to a string array. @param name Property name to retrieve. @return String array or null if property is not found.
2586 Gets a string array from configuration. @param name Property name. @param defaultValue Default array if property is missing. @return String array.
2587 Retrieves a trimmed string collection from a configuration property. @param name Property name to retrieve. @return Collection of trimmed strings or an empty collection.
2588 Retrieves trimmed strings from a configuration property. @param name Property name to retrieve. @return Array of trimmed strings.
2589 Retrieves trimmed strings from config or uses default. @param name Config property name. @param defaultValue Default string array if not found. @return Trimmed string array.
2590 Retrieves configuration properties with a given prefix. @param confPrefix Prefix to filter configuration properties. @return Map of properties starting with the given prefix.
2591 Appends a configuration property to a JSON generator. @param jsonGen JSON generator to write to. @param config Configuration object. @param name Property name. @param redactor ConfigRedactor to redact values.
2592 Reconfigures a property to a new value or removes it. @param property Property name. @param newVal New value.
2593 Retrieves a configuration property value by name, logging access. @param name Property name to retrieve. @return Property value.
2594 Gets the default mount table name from the configuration. @param conf Hadoop configuration object. @return Default mount table name.
2595 Checks if the native Bzip2 library is loaded. @param conf Hadoop configuration object. @return True if native library is loaded, false otherwise.
2596 Gets default SocketFactory from configuration, or uses default. @param conf Hadoop configuration. @return SocketFactory instance.
2597 Retrieves the username from the configuration, handling legacy format. @param conf Hadoop configuration object @return Username string, or default if not found.
2598 Prints the value of a Kerberos configuration option. @param option Configuration option name.
2599 Initializes TruststoreKeystore with configuration properties. @param conf Hadoop configuration object.
2600 Spawns a thread to renew user credentials, if needed. Forces renewal if `force` is true, or if not from keytab.
2601 Constructs a KeyProvider with a configuration. Sets JCEKS filter. @param conf Configuration object to initialize with.
2602 Retrieves ZooKeeper ACLs from configuration. @param conf Hadoop configuration object. @return List of ACL objects or throws IOException.
2603 Gets the hash type from the configuration. @param conf Hadoop configuration object. @return Integer representation of the hash type.
2604 Gets an EnumSet from the configuration. @param key Configuration key. @param enumClass Enum class. @param ignoreUnknown Ignore unknown enum values.
2605 Parses a range string into an IntegerRanges object. @param name Property name containing range string. @param defaultValue Default range string if property is missing.
2606 Gets property value, logs access, and redacts sensitive data. @param name Property name. @param defaultValue Default value if property not found.
2607 Adds an optional configuration key-value pair (boolean). @param key Configuration key. @param value Boolean configuration value. @return Reference to this builder.
2608 Adds an optional double configuration key-value pair. @param key Configuration key. @param value Double value to be configured. @return Reference to this builder.
2609 Marks a configuration key as mandatory, sets its boolean value. @param key Configuration key. @param value Boolean value to set. @return Reference to this builder.
2610 Marks a configuration key as mandatory, sets its double value. @param key Configuration key. @param value Double value to set. @return Reference to this builder.
2611 Sets the default file system URI in the configuration. @param conf Hadoop configuration object. @param uri URI of the default file system.
2612 Adds an NFly link configuration to Hadoop config. @param conf Configuration object. @param mountTableName Mount table name. @param src Source path. @param settings Link settings. @param targets Target path(s) as comma-separated string.
2613 Sets the index interval property in the configuration. @param conf Hadoop configuration object. @param interval Index interval value.
2614 Sets the IPC ping interval in the configuration. @param conf Hadoop configuration object. @param pingInterval Ping interval in milliseconds.
2615 Sets the client connect timeout in milliseconds. @param conf Hadoop configuration object. @param timeout Connect timeout value.
2616 Sets if nested mount points are supported in the configuration. @param conf Hadoop configuration object. @param isNestedMountPointSupported Boolean indicating support.
2617 Adds an optional key-value pair to the configuration. @param key Key to be added as optional. @param values Values associated with the key. @return Reference to this builder for chaining.
2618 Marks a configuration key as mandatory, adding it to the list. @param key Configuration key. @param values Values associated with the key. @return Reference to this builder.
2619 Updates a connect address property and returns it. @param name Property name. @param addr InetSocketAddress to set. @return Resolved InetSocketAddress.
2620 Sets the protocol engine class in the configuration. @param conf Hadoop configuration object. @param protocol Protocol class. @param engine Engine class to associate with protocol.
2621 Deletes a file or directory. @param p The Path to delete. @param recursive If true, deletes recursively. @return True if deleted, false otherwise.
2622 Recursively deletes a directory's contents. @param dir Directory to delete.
2623 Gets the status of a file or directory. @param f The path to the file or directory. @return FileStatus object.
2624 Lists status for paths under a given path. @param f The path to list status for. @return Array of FileStatus objects.
2625 Creates a data output stream for writing to a file. @param f Path to the file. @param overwrite Whether to overwrite existing files.
2626 Gets the umask. Uses cached value if available, otherwise fetches from config.
2627 Creates a BlockFactory based on the provided name. @param keyToBufferDir Key for buffer directory. @param configuration Hadoop configuration. @param name Factory type name. @return BlockFactory instance.
2628 Creates a CompressionCodecFactory with codecs from configuration. @param conf Hadoop configuration object.
2629 Gets configuration value; returns defaultValue if null. @param name Property name. @param defaultValue Value if property is not found.
2630 Gets an integer configuration value, using default if not found. @param name Property name. @param defaultValue Default value if property is not set.
2631 Gets a long configuration value, using default if not found. @param name Property name. @param defaultValue Default value if property is missing.
2632 Gets a long value representing bytes, using default if null. @param name Property name. @param defaultValue Default value if property is not found.
2633 Gets configuration as float, using defaultValue if not found. @param name Property name. @param defaultValue Default float value.
2634 Gets configuration as double, using defaultValue if not found. @param name Property name. @param defaultValue Default value if property is missing.
2635 Gets a boolean configuration value, using default if invalid. @param name Property name. @param defaultValue Default value if property is not found.
2636 Retrieves a class by name from configuration. @param name Class name to retrieve. @param defaultValue Default class if not found. @return Class object or defaultValue if not found.
2637 Sets a boolean property to the given value if it's not set. @param name Property name. @param value Boolean value to set.
2638 Gets time duration, using default unit for both. @param name Property name @param defaultValue Default value @param unit Unit for value and return
2639 Retrieves SASL properties from configuration. @param conf Configuration object. @param configKey Key for SASL properties. @param defaultQOP Default QOP value. @return Map of SASL properties.
2640 Parses configuration property into an array of integers. @param name Property name to parse. @return Array of integers parsed from the property.
2641 Retrieves classes by name, returning default if not found. @param name Class names to retrieve. @param defaultValue Default class array if not found. @return Array of Class objects or default if not found.
2642 Retrieves a file object using configured directories and a path. @param dirsProp Property name containing directory paths. @param path File path to construct. @throws IOException if no valid local directories are found.
2643 Constructs a SerializationFactory with configured serializers. @param conf Hadoop configuration object.
2644 Retrieves filter parameters from configuration. @param conf Configuration object. @param confPrefix Prefix for filter parameters. @return Map of filter parameters.
2645 Retrieves filter parameters from configuration with prefix. @param conf Configuration object. @param confPrefix Prefix for filtering configuration properties.
2646 Propagates configuration options to the FSBuilder. @param builder FSBuilder instance to set options. @param conf Configuration to extract options from.
2647 Prints a form displaying configuration changes. @param out PrintWriter to write HTML output. @param reconf Reconfigurable object.
2648 Adds a link configuration to the Hadoop configuration. @param conf Hadoop configuration object. @param src Source path for the link. @param target Target URI for the link.
2649 Adds a link merge slash config using the default mount table. @param conf Hadoop configuration object. @param target The target URI.
2650 Adds a link fallback configuration using the default mount table. @param conf Hadoop configuration object. @param target URI of the fallback target.
2651 Adds a link merge configuration to the Hadoop configuration. @param conf Hadoop configuration object. @param targets Array of URIs to merge.
2652 Sets the home directory configuration using default mount table. @param conf Hadoop Configuration object. @param homedir Home directory path.
2653 Gets home directory value from config using default mount table. @param conf Hadoop configuration object. @return Home directory value or null if not found.
2654 Creates an ErasureEncoder using the provided configuration. @param conf Hadoop configuration. @param options ErasureCodecOptions object.
2655 Creates an ErasureDecoder using the provided configuration. @param conf Hadoop configuration. @param options ErasureCodecOptions object. @return ErasureDecoder instance.
2656 Returns the Bzip2 compressor class based on native library status. @param conf Hadoop configuration object. @return Compressor class.
2657 Returns the Bzip2 decompressor class based on native library status. @param conf Hadoop configuration. @return Decompressor class.
2658 Gets a Bzip2Decompressor, using native or dummy implementation. @param conf Hadoop configuration object. @return Bzip2Decompressor or BZip2DummyDecompressor.
2659 Gets a SocketFactory, using a property or default. @param conf Hadoop configuration. @param clazz Class to determine property suffix. @return SocketFactory instance.
2660 Constructs a HadoopZookeeperFactory with Kerberos configuration. @param zkPrincipal ZooKeeper principal. @param kerberosPrincipal Kerberos principal. @param kerberosKeytab Kerberos keytab file.
2661 Initializes the SSL context and socket factory based on mode. Uses keystore managers, trust managers, and hostname verifier.
2662 Checks if simple authentication is enabled in the configuration. @param conf Hadoop configuration object @return True if simple authentication is enabled, false otherwise.
2663 Sets security rules based on authentication method. @param conf Hadoop configuration object
2664 Gets a CryptoCodec instance for the given cipher suite. @param conf Hadoop configuration. @param cipherSuite Cipher suite to use. @return CryptoCodec instance or null if not found.
2665 Gets a Hash instance based on the provided Hadoop configuration. @param conf Hadoop configuration object @return Hash instance or null if type is invalid.
2666 Builds a FlagSet from a configuration, enum class, key, and ignoreUnknown flag. @param enumClass Enum class for the flags. @param conf Configuration object. @param key Key for the enum set in the configuration. @param ignoreUnknown Whether to ignore unknown enum values.
2667 Writes configuration to XML. @param propertyName Property to include, or null. @param out Writer to write to. @param config Configuration object.
2668 Dumps the configuration to a JSON writer, redacting sensitive values. @param config Configuration object to dump. @param out Writer to write the JSON to.
2669 Sets an optional long configuration value. @param key Configuration key. @param value Long value to be configured. @return Reference to this builder.
2670 Sets a float value as an optional configuration. @param key Configuration key. Casts to long for optLong. @return Reference to this builder.
2671 Sets a configuration value as a long. @param key Configuration key. @param value Long value to configure. @return Reference to this builder.
2672 Marks a configuration key as mandatory, sets its int value. @param key Configuration key. @return Reference to this builder.
2673 Creates a MetricsSource for the given object. @param source Object to generate metrics for. @return MetricsSource object.
2674 Creates a data output stream for writing to a file. @param f Path to the file. Overwrites if true.
2675 Creates a new data output stream for the given file. @param f The path to create. @param createFlag Create flags. @param opts Create options, including permissions. @return FSDataOutputStream for writing data.
2676 Creates a directory with specified permissions and parent creation. @param dir The directory to create. @param permission The permissions for the directory. @param createParent Whether to create parent directories.
2677 Main method to compress/decompress files using codecs. @param args Command-line arguments for input/output flags.
2678 Extracts server principal based on config. @param principalConfig Principal configuration string. @param hostname Hostname for constructing the principal. @return Server principal string.
2679 Extracts server principal, replacing hostname if config matches. @param principalConfig Principal configuration string. @param addr Client address, used for hostname resolution. @return Server principal string.
2680 Adds a protocol and implementation to the server. @param rpcKind RPC kind. @param protocolClass Protocol class. @param protocolImpl Protocol implementation.
2681 Creates a KeyProvider from a configuration key name. @param conf Hadoop configuration. @param configKeyName Key name in the configuration. @return KeyProvider instance or null if not found.
2682 Gets the default URI for the filesystem. @param conf Hadoop configuration object. @return URI object representing the default filesystem.
2683 Validates the Kerberos kinit executable. @param kinit Path to the kinit executable.
2684 Gets an InetSocketAddress from a configuration property. @param name Property name, @param defaultAddress Default address
2685 Updates connect address using provided host and address properties. @param hostProperty Host property name. @param addressProperty Address property name.
2686 Builds and returns a CompletableFuture for FSDataInputStream. Uses configured parameters to open the file asynchronously.
2687 Builds and opens an FSDataInputStream using configured parameters. @return CompletableFuture FSDataInputStream
2688 Sets SFTP configuration from URI, falling back to defaults. @param uriInfo URI containing SFTP connection details. @param conf Hadoop configuration object.
2689 Establishes an SFTP connection using configuration values. @return ChannelSftp object representing the connection.
2690 Initializes buffer size from file system configuration.
2691 Opens a file for input stream, using default buffer size. @param f Path to the file to open. @return FSDataInputStream object for reading the file.
2692 Opens an FSDataInputStream for reading from a file. @param fd PathHandle object representing the file.
2693 Appends data to a file. @param f The path to the file.
2694 Appends data to a file. @param f the path to the file @param appendToNewBlock if true, append to a new block @return FSDataOutputStream for appending
2695 Initializes the Cache with a specified number of creation permits. @param conf Hadoop configuration object.
2696 Initializes Sorter with provided resources and configuration. @param conf Hadoop configuration object.
2697 Creates an LZ4 compression output stream. @param out Output stream. @param compressor LZ4 compressor. @return CompressionOutputStream for LZ4 compression.
2698 Creates an LZ4 input stream using provided input and decompressor. @param in Input stream to compress. @param decompressor LZ4 decompressor. @return CompressionInputStream for LZ4 decompression.
2699 Creates an LZ4 Decompressor with a buffer size from configuration.
2700 Creates a BZip2 compression output stream. Uses native library if available. @param out Output stream. @param compressor Compressor object. @return CompressionOutputStream instance. @throws IOException If an I/O error occurs.
2701 Creates an input stream for decompression. @param in Input stream to decompress. @param decompressor Decompressor object. @return CompressionInputStream for BZip2 decompression.
2702 Creates a Snappy compression output stream. @param out Output stream. @param compressor Snappy compressor. @return CompressionOutputStream for snappy compression.
2703 Creates a SnappyCompressor with a buffer size from configuration.
2704 Creates a Snappy input stream using the provided input and decompressor. @param in Input stream to decompress. @param decompressor Snappy decompressor. @return CompressionInputStream for snappy decompression.
2705 Creates a SnappyDecompressor with a buffer size from configuration.
2706 Copies bytes from an input stream to an output stream. @param in input stream @param out output stream @param conf Hadoop configuration object
2707 Copies bytes from an input stream to an output stream. @param in input stream @param out output stream @param conf Hadoop configuration @param close whether to close streams after copying
2708 Gets the buffer size from the configuration. @param conf Hadoop configuration object. @return Buffer size in bytes.
2709 Sets the configuration for the class, initializing scriptName & maxArgs. @param conf Hadoop configuration object
2710 Gets the crypto buffer size from configuration. @param conf Hadoop configuration object. @return Buffer size integer.
2711 Parses the number of priority levels from the configuration. @param ns Namespace. @param conf Hadoop configuration object. @return Number of priority levels.
2712 Gets the RPC timeout from the configuration. @param conf Hadoop configuration object. @return RPC timeout in milliseconds.
2713 Gets the ping interval from the configuration. @param conf Hadoop configuration object. @return Ping interval in milliseconds.
2714 Gets the RPC timeout from the configuration. @param conf Hadoop configuration object. @return RPC timeout in milliseconds, capped at 0 if negative.
2715 Constructs a LineReader with an input stream and buffer size. @param in The input stream to read from. @param conf Configuration object for buffer size.
2716 Constructs a LineReader with an input stream, config, and delimiter. @param in Input stream to read from. @param conf Configuration object. @param recordDelimiterBytes Record delimiter bytes.
2717 Gets an integer configuration value, logs access, uses default if absent. @param name Property name. @param defaultValue Default value.
2718 Sets the FTP control keep-alive timeout. @param client FTP client to configure. @param conf Hadoop configuration object.
2719 Gets a long configuration value; returns defVal if invalid. @param key Property name. @param defVal Default value if property is missing/invalid.
2720 Gets the default block size from the configuration. Uses 32MB as default if property is not found.
2721 Gets a long configuration value and logs its retrieval. @param name Property name. @param defaultValue Default value if property is missing.
2722 Gets configuration as float, logs access, uses defaultValue if not found. @param name Property name. @param defaultValue Default float value.
2723 Initializes trash policy with configuration. @param conf Hadoop configuration object. @param fs FileSystem instance. @param home Trash home directory.
2724 Checks if nested mount points are supported. @param conf Hadoop configuration object. @return True if supported, false otherwise.
2725 Creates an LZ4 compressor with configuration from the Hadoop conf. @return Lz4Compressor instance configured with buffer size & HC mode.
2726 Gets a MultipleLinearRandomRetry policy. @param conf Configuration object. @param retryPolicyEnabledKey Key for retry policy enabled. @param defaultRetryPolicyEnabled Default value if not found.
2727 Adds default application contexts for logs and static resources. @param parent Parent ContextHandlerCollection @param appDir Application directory @param conf Hadoop configuration
2728 Adds default servlets (stacks, logLevel, jmx, conf) to the server. Uses configuration to determine JMX servlet class.
2729 Checks if server failover is enabled for a namespace. @param namespace Namespace to check. @param conf Configuration object. @return True if failover is enabled, false otherwise.
2730 Constructs a Client with provided class, config, and socket factory. @param valueClass Writable class for RPC calls. @param conf Configuration object for client settings. @param factory Socket factory for connection management.
2731 Gets if client backoff is enabled, using default if invalid. @param prefix Configuration prefix. @param conf Configuration object.
2732 Checks if client backoff is enabled for given namespace & port. @param namespace RPC namespace. @param port Port number. @param conf Configuration object. @return True if backoff is enabled, false otherwise.
2733 Retrieves password from configuration, if enabled. @param name Configuration property name. @return Password char array or null if not found/disabled.
2734 Gets a boolean config value, logs access, and returns it. @param name Property name. @param defaultValue Default value.
2735 Retrieves a FileSystem class by scheme, using config or service files. @param scheme Filesystem scheme (e.g., "hdfs"). @param conf Hadoop configuration object. @return FileSystem class or throws UnsupportedFileSystemException.
2736 Creates a file system instance for the given URI and config. @param uri URI of the file system. @param conf Hadoop configuration. @return AbstractFileSystem instance.
2737 Retrieves the queue class for IPC calls. @param namespace Namespace for queue configuration. @param port Port number for queue configuration. @param conf Configuration object. @return Queue class for IPC calls.
2738 Retrieves the RPC scheduler class from configuration. @param namespace Namespace key. @param port Port number. @param conf Configuration object. @return Scheduler class or default if not found.
2739 Retrieves a class from configuration, ensuring it extends xface. @param name Class name to retrieve. @param defaultValue Default class if not found. @param xface Interface the class must extend. @return Class object or null if not found or incompatible.
2740 Retrieves a FileSystem instance for the given URI and key. Creates a new one if necessary, managing resources. @param uri URI of the filesystem. @param conf Configuration object. @param key Key identifying the filesystem. @return FileSystem instance. @throws IOException if an I/O error occurs.
2741 Gets the shutdown timeout duration from configuration. @param conf Hadoop configuration object @return Shutdown timeout duration in milliseconds
2742 Gets password from credential providers. @param name Credential entry name. Returns password char array. @throws IOException if there's an IO error.
2743 Parses call queue capacity weights from configuration. @param priorityLevels Number of priority levels. @param ns Namespace. @param conf Hadoop configuration. @return Array of capacity weights.
2744 Retrieves FilterInitializer instances from configuration. @param conf Hadoop configuration object. @return Array of FilterInitializer instances.
2745 Retrieves a list of instances implementing the specified interface. @param name Name of the classes to instantiate. @param xface Interface the instances must implement. @return List of instances implementing the interface.
2746 Initializes the Writer with configuration and data classes. @param config Hadoop configuration. @param outStream Output stream. @param key, val, codec, meta Classes and codec.
2747 Delegates option propagation to FutureIO. @param builder FSBuilder instance. @param conf Configuration to use.
2748 Propagates optional and mandatory configuration options to builder. @param builder FSBuilder instance @param conf Configuration to extract options from
2749 Checks native libraries; exits with error code if any are missing.
2750 Gets the BZip2 compressor type using the Hadoop configuration. @return Compressor class.
2751 Gets the Bzip2 decompressor class based on native library status.
2752 Creates a BZip2 decompressor using the provided Hadoop configuration. @param conf Hadoop configuration object. @return Bzip2Decompressor.
2753 Constructs a HadoopZookeeperFactory with ZooKeeper principal. @param zkPrincipal ZooKeeper principal to use for connection.
2754 Retrieves group names for a user from LDAP. @param result LDAP search result object. @param c DirContext for LDAP operations. @param goUpHierarchy Hierarchy level to traverse. @return Set of group names. @throws NamingException if LDAP operations fail.
2755 Gets a CryptoCodec instance using the configured cipher suite. @param conf Hadoop configuration. @return CryptoCodec instance or null if not found.
2756 Binds a server socket to an address with a specified backlog. @param socket ServerSocket to bind. @param address Address to bind to. @param backlog Backlog for the socket.
2757 Dumps a single configuration property to a JSON writer. @param config Configuration object. @param propertyName Property name to dump. @param out Writer to write the JSON to.
2758 Creates directory recursively. @param f The path to create. @return True if successful, false otherwise.
2759 Retrieves server principal, validating against configured pattern. @param authType Authentication type containing protocol/server ID. @return Server principal string or null if Kerberos unsupported.
2760 Decodes a HAR URI, extracting scheme and host. @param rawURI The original URI to decode. @param conf Hadoop configuration. @return Decoded URI.
2761 Gets a FileSystem instance. @param conf Hadoop configuration object @return FileSystem instance
2762 Initializes the FileSystem with a URI and configuration. @param name URI of the filesystem to connect to. @param conf Hadoop configuration object.
2763 Creates a new FileSystem instance. @param conf Hadoop configuration object. @throws IOException if an I/O error occurs.
2764 Checks if a path belongs to this file system, throwing exception if not. @param path The path to check.
2765 Gets an InetSocketAddress from host/address properties. @param hostProperty Host property name @param addressProperty Address property name @param defaultAddressValue Default address value @param defaultPort Default port @return InetSocketAddress or bindAddr if host is empty
2766 Creates a new data output stream for writing to a file. @param f Path to create. @param permission FsPermission for the file.
2767 Constructs a builder with a file system and path. @param fileSystem Hadoop file system instance. @param path The file system path.
2768 Creates a builder with a file system and path handle. @param fileSystem Hadoop file system instance. @param pathHandle Path handle for file operations.
2769 Opens a file, using fileSystem_openFile if available, otherwise uses open. @param instance DynamicWrappedIO instance @param fs FileSystem object @param status FileStatus object @param readPolicies Read policies string @return FSDataInputStream object @throws IOException if an I/O error occurs
2770 Checks if appending to the base path is supported. @param fs The FileSystem instance. @return True if appending is supported, false otherwise.
2771 Constructs Sorter with provided resources and configuration. @param fs FileSystem object @param comparator Key comparison function @param keyClass Key class @param valClass Value class @param conf Hadoop configuration
2772 Creates a Bzip2Compressor using block size and work factor from config. @param conf Hadoop configuration object
2773 Reinitializes the compressor with a new configuration. @param conf Hadoop configuration object
2774 Initializes the SequenceFile reader. Reads header and sets up deserializers.
2775 Reinitializes the compressor with a new compression level. @param conf Hadoop configuration object.
2776 Prepares a DataOutputStream for appending a value. @param length Length of the value to be appended, -1 for unknown. @return DataOutputStream for appending the value.
2777 Initializes a WBlockState with compression settings and streams. @param compressionAlgo Compression algorithm to use. @param fsOut Output stream for writing data.
2778 Sets the configuration for this class and its raw mapping. @param conf Hadoop configuration object
2779 Sets the dependency script name from the configuration. @param conf Hadoop configuration object.
2780 Creates Options object using provided configuration. @param conf Hadoop configuration object
2781 Gets the client timeout from the configuration. @param conf Hadoop configuration object. @return Timeout in milliseconds, or -1 if disabled.
2782 Connects to an FTP server using configuration settings. @return FTPClient instance or null on failure. @throws IOException if connection or login fails.
2783 Gets a positive long configuration value; uses defVal if negative. @param key Property name. @param defVal Default value if negative.
2784 Returns FsServerDefaults using configuration values. Uses defaults if properties are not found in configuration.
2785 Gets the default block size. Uses 32MB if not found.
2786 Moves a file with checksum failure to a "bad_files" directory. @param p Path of the file with checksum failure.
2787 Constructs CachingGetSpaceUsed with values from a builder. @param builder Builder object containing configuration values.
2788 Reads the next record length and key length. @param buffer DataOutputBuffer to write to. @return Key length or -1 if end of file.
2789 Gets a default retry policy based on configuration. @param conf Configuration object. @return RetryPolicy object.
2790 Constructs a Client with provided class and configuration. @param valueClass Writable class for RPC calls. @param conf Hadoop configuration object.
2791 Retrieves a cached client or creates a new one. @param conf Configuration object. @param factory Socket factory. @param valueClass Writable class for RPC calls.
2792 Excludes incompatible credential providers from config. @param config Hadoop configuration object. @param fileSystemClass Class of the filesystem. @return Modified Configuration object.
2793 Gets a file system instance for the given URI and config. @param uri URI of the file system. @param conf Hadoop configuration. @return AbstractFileSystem instance.
2794 Builds a Server instance using configured parameters. @return Server instance, built with provided configuration. @throws IOException, HadoopIllegalArgumentException on failure.
2795 Gets a TrashPolicy instance based on configuration. @param conf Hadoop configuration. @param fs FileSystem instance. @param home Trash home directory. @return TrashPolicy instance.
2796 Gets a TrashPolicy instance. @param conf Hadoop configuration. @param fs FileSystem instance. @return TrashPolicy instance.
2797 Creates and returns a DomainNameResolver instance. @param conf Hadoop configuration. @param configKey Key to retrieve resolver class from config.
2798 Gets the SaslPropertiesResolver instance from the configuration. @param conf Hadoop configuration object. @return SaslPropertiesResolver instance.
2799 Validates SASL resolver class and prints details. @param saslPropsResolverKey Key for the SASL resolver.
2800 Retrieves an ImpersonationProvider instance from configuration. @param conf Hadoop configuration object. @return ImpersonationProvider instance.
2801 Shuts down the executor, awaiting termination or forcefully shutting down. @param conf Hadoop configuration object
2802 Retrieves password from credential providers or config. @param name Configuration property name. @return Password char array or null if not found. @throws IOException if there's an IO error.
2803 Creates a RawErasureEncoder using the provided configuration. @param conf Hadoop configuration. @param codec Codec name. @param coderOptions Encoder options.
2804 Creates a RawErasureDecoder using fallback mechanisms. @param conf Hadoop configuration. @param codec Codec name. @param coderOptions Erasure coder options.
2805 Swaps the call queue and scheduler with new instances. @param schedulerClass Scheduler class. @param queueClassToUse Queue class. @param maxSize Queue max size. @param ns Namespace. @param conf Hadoop configuration.
2806 Creates a FairCallQueue with specified priority levels and capacity. @param priorityLevels Number of priority levels. @param capacity Total capacity of the queue.
2807 Stores an item in the configuration using Base64 encoding. @param conf Hadoop configuration. @param item Item to store. @param keyName Key name in the configuration.
2808 Loads an item from a configuration by key, deserializing it. @param conf Hadoop configuration. @param keyName Key name. @param itemClass Class of the item to load. @return Item.
2809 Stores an array of objects as a Base64 string in the config. @param conf Hadoop configuration. @param items Array to store. @param keyName Key name for storing the serialized array.
2810 Loads an array of items from configuration. @param conf Hadoop configuration. @param keyName Key name. @param itemClass Class of items in the array.
2811 Creates a Writer with specified parameters. @param fs FileSystem object. @param conf Hadoop configuration.
2812 Copies data from src to dst using serialization. @param conf Hadoop configuration. @param src Source object to copy. @param dst Destination object. @return Deserialized destination object.
2813 Propagates configuration options to the FSBuilder. @param builder FSBuilder instance @param conf Configuration to extract options from
2814 Retrieves group names for a user from LDAP. @param user User's DN. @param goUpHierarchy Hierarchy level to traverse. @return Set of group names. @throws NamingException if LDAP operations fail.
2815 Writes configuration data to a writer in JSON or XML format. @param conf Configuration object. @param out Writer to write to. @param format Output format (JSON or XML). @param propertyName Property name, or null.
2816 Initializes the authentication filter within the provided container. @param container Filter container to add the filter to. @param conf Hadoop configuration.
2817 Creates a SASL client based on the authentication type. @param authType Authentication type defining method/protocol. @return SASL client or null if not supported.
2818 Creates a FileSystem instance for the given URI and configuration. @param uri URI of the filesystem to connect to @param conf Hadoop configuration object @return FileSystem instance @throws IOException if filesystem creation or initialization fails
2819 Initializes the ViewFileSystem with a URI and configuration. @param theUri URI of the filesystem to connect to. @param conf Hadoop configuration object.
2820 Initializes the FileSystem, ensuring proper scheme handling. @param name URI of the filesystem to connect to. @param conf Hadoop configuration object.
2821 Makes a path qualified against this file system's URI/dir. @param path The path to qualify. @return Qualified Path object.
2822 Resolves a path by checking it and returning its Path object. @param p The path to resolve. @return Path object representing the resolved path.
2823 Checks if the given path belongs to this file system. @param path The path to check.
2824 Initializes AvroFSInput with file context and path. @param fc FileContext for file operations. @param p Path to the Avro file.
2825 Copies a file or directory from src to dst. @param src Source path. @param dst Destination path. @param deleteSource Delete source after copy. @param overwrite Overwrite if destination exists.
2826 Constructs a builder with a file system and path. @param fileSystem Hadoop file system instance. @param path The file system path.
2827 Creates a builder with a file system and path handle. @param fileSystem Hadoop file system instance. @param pathHandle Path handle for file operations.
2828 Opens a file using DynamicWrappedIO, using fileSystem_openFile if available. @param fs FileSystem object @param status FileStatus object @param readPolicies Read policies string @return FSDataInputStream object @throws IOException if an I/O error occurs
2829 Loads key permissions from path, tries backup if corrupted. @param path Path to key store. @param backupPath Backup path. @return FsPermission object.
2830 Constructs Sorter with provided resources and configuration. @param fs FileSystem object @param keyClass Key class @param valClass Value class @param conf Hadoop configuration
2831 Gets a Bzip2Compressor, using native library if available. @param conf Hadoop configuration object @return Bzip2Compressor or BZip2DummyCompressor.
2832 Initializes the reader with given parameters. @param filename Path to the sequence file.
2833 Creates a compression output stream using ZStandard. @param out The underlying OutputStream. @param compressor The compressor to use. @return CompressionOutputStream for compressed data.
2834 Creates a ZStandard compressor with level & buffer size. Uses config for compression level and buffer size.
2835 Creates an input stream for decompression. @param in Input stream to decompress. @param decompressor ZStandard decompressor. @throws IOException if an I/O error occurs.
2836 Creates a ZStandardDecompressor with a buffer size from config.
2837 Creates and returns a BlockAppender for writing a data block. Throws exception if previous block is open or meta blocks seen.
2838 Constructs a ScriptBasedMapping with the given Hadoop configuration. @param conf Hadoop configuration object
2839 Sets the Hadoop configuration for raw mapping dependencies. @param conf Hadoop configuration object
2840 Initializes command execution based on command-line arguments. Parses arguments and sets subcommands accordingly.
2841 Creates a ConnectionId with provided address, protocol, ticket, timeout, and retry policy. @param addr Server address.
2842 Creates a new file or directory on the FTP server. @param file Path to create, @param permission File permissions
2843 Retrieves default server settings for a given path. Uses configuration values or defaults if not found.
2844 Creates a data output stream for writing to a file. @param f Path to the file. Overwrites if true.
2845 Creates a data output stream for writing to a file. @param f Path to the file. @param progress Progressable object for tracking progress. @return FSDataOutputStream object.
2846 Creates an FSDataOutputStream for writing to a file. @param f Path to the file. @param replication File replication factor. @return FSDataOutputStream object.
2847 Creates a data output stream for writing to a file. @param f Path to the file. @param replication File replication factor. @param progress Progress reporting object. @return FSDataOutputStream for writing.
2848 Creates a data output stream, overwriting if specified. @param f Path to the file. @param overwrite Overwrite existing file if true. @param bufferSize Output stream buffer size.
2849 Creates a data output stream for writing to a file. @param f Path to the file. @param overwrite Whether to overwrite existing files.
2850 Constructs a builder with a file system and path. @param fileSystem Hadoop file system instance @param p The file system path
2851 Reads the next key from the sequence file. @param key Writable object to store the next key @return True if a key was read, false otherwise.
2852 Returns the next key from the sequence file. @param key Previous key, used for type checking. @return Next key object or null if end of file.
2853 Constructs an Invoker with given protocol, connection ID, config, etc. @param protocol Protocol class. @param connId Connection ID.
2854 Retrieves a cached client or creates a new one using default settings. @param conf Configuration object. @return Client instance.
2855 Retrieves a cached client or creates a new one. @param conf Configuration object. @param factory Socket factory.
2856 Constructs an Invoker with protocol details and connection. @param protocol Protocol class. @param connId Connection ID.
2857 Checks if a method is supported by a given RPC proxy. @param rpcProxy RPC proxy object. @param protocol Protocol class. @param rpcKind RPC kind. @param version Protocol version. @param methodName Method name to check.
2858 Constructs a Trash object with a FileSystem and Configuration. @param fs The FileSystem instance. @param conf Hadoop configuration.
2859 Gets a NetworkTopology instance using configuration. @param conf Configuration object. @return NetworkTopology instance.
2860 Constructs a SaslRpcClient with provided user info, protocol, address, and config. @param ugi UserGroupInformation @param protocol RPC protocol class @param serverAddr Server address @param conf Configuration object
2861 Initializes and refreshes proxy user group configuration. @param conf Hadoop configuration object. @param proxyUserPrefix Prefix for proxy user groups.
2862 Adds a shutdown hook with specified priority. @param shutdownHook Runnable to execute during shutdown. @param priority Hook execution priority.
2863 Retrieves password as String from configuration. @param conf Hadoop configuration object. @param name Property name to fetch password for. @return Password string or null if not found. @throws IOException if there's an IO error.
2864 Retrieves password for an alias, falling back to default. @param conf Configuration object. @param alias Password alias. @param defaultPass Default password if alias not found. @return Password string.
2865 Retrieves ZK auth infos from configuration. @param conf Hadoop configuration. @param configKey Key for the auth configuration. @throws IOException if there's an IO error.
2866 Constructs a DecayRpcScheduler with given levels, namespace, and config. @param numLevels Priority levels. Must be >= 1. @param ns Namespace for scheduler configuration. @param conf Hadoop configuration object.
2867 Creates a clone of a Writable object. @param orig The object to clone. @param conf Hadoop configuration. @return A clone of the original object.
2868 Writes the configuration to an XML file. @param out Output stream to write the XML configuration to.
2869 Selects a SASL authentication type from a list. @param authTypes List of available SASL authentication types. @return Selected SaslAuth or throws exception if none suitable.
2870 Constructs an FtpFs instance with a URI and configuration. @param theUri FTP URI @param conf Hadoop configuration
2871 Constructs a RawLocalFs using a URI and Configuration. @param theUri The URI of the file system. @param conf Hadoop configuration.
2872 Initializes the ChRootedFileSystem with a URI and configuration. @param name URI of the filesystem to connect to. @param conf Hadoop configuration object.
2873 Constructs the builder with a file system and path. @param fileSystem Hadoop file system. @param p Path to upload to.
2874 Initializes PathData with a FileSystem, path string, and status. @param fs The FileSystem object. @param pathString The path string. @param stat The FileStatus object.
2875 Checks if the path has the specified capability. @param path The path to check. @param capability Capability string to check. @return True if the path has the capability, false otherwise.
2876 Gets the enclosing root path for a given path. @param path The path to find the root for. @return Enclosing root Path object.
2877 Qualifies a path against the filter file system's URI. @param path The path to qualify. @return Qualified Path object.
2878 Gets the FileStatus, following symlinks if configured. @param item PathData containing file information. @param depth Current depth in the search. @return FileStatus object.
2879 Computes the full path by combining root and given path. @param path The path to resolve against the chroot path. @return A Path object representing the full path.
2880 Copies a file or directory from src to dst. @param src Source path. @param dst Destination path.
2881 Creates an FSDataInputStreamBuilder with a file system and path. @param fileSystem Hadoop file system instance @param path The file system path
2882 Creates a FSDataInputStreamBuilder with a file system and path. @param fileSystem Hadoop file system instance. @param pathHandle Path handle for file operations.
2883 Loads permissions from either the new or old path, or initializes keystore if neither exists. Returns FsPermission object.
2884 Creates a Bzip2 compressor using the Hadoop configuration. @param conf Hadoop configuration object @return Bzip2Compressor
2885 Retrieves a BlockReader for a given meta block name. @param name Name of the meta block. @return BlockReader instance. @throws MetaBlockDoesNotExist if block not found.
2886 Retrieves a BlockReader for the specified block index. @param blockIndex Index of the block to retrieve. @return BlockReader instance.
2887 Closes the writer, finalizing blocks and writing metadata. Throws IllegalStateException if a block is in progress.
2888 Prepares a meta block with given name and compression. @param name Meta block name. @param compressionName Compression algorithm name. @return BlockAppender for writing the meta block.
2889 Prepares a meta block with given name and default compression. @param name Meta block name. @return BlockAppender for writing the meta block.
2890 Initializes the data block appender for writing data. Creates a new BlockAppender if one doesn't exist.
2891 Creates a data output stream for writing to a file. @param f Path to the file. Overwrites if true. @return FSDataOutputStream for writing to the file.
2892 Creates a log file, retrying with increasing IDs if needed. @param initial Initial path for the log file. @throws IOException if file creation fails.
2893 Creates or appends to a log file, handling potential race conditions. @param targetFile Path to the log file.
2894 Saves an object to a file in JSON format. @param fs FileSystem object. @param path Path to save the JSON file. @param instance Object to serialize. @param overwrite Overwrites if true.
2895 Creates a Writer with specified filesystem, config, path, and metadata. @param fs Filesystem. @param conf Configuration.
2896 Creates a new file at the given path. @param f Path to create. Returns false if file exists.
2897 Constructs a builder with a file system and path. @param fileSystem Hadoop file system instance @param p The file system path
2898 Reads the next key-value pair from the sequence file. @param key Key object to store the next key @param val Value object to store the next value @return True if a key-value pair was read, false otherwise.
2899 Constructs a Trash object using a Configuration. @param conf Hadoop configuration object
2900 Creates a DomainNameResolver instance from URI. @param conf Hadoop configuration. @param uri URI containing host to resolve. @param configKey Key to retrieve resolver class from config.
2901 Retrieves the Groups service instance, creating it if necessary. @param conf Hadoop configuration object. @return Groups service instance.
2902 Returns Groups instance with the provided configuration. @param conf Hadoop configuration object. @return Groups object.
2903 Refreshes super user groups configuration using default prefix. @param conf Hadoop configuration object.
2904 Schedules a path for deletion on exit. @param f The path to be deleted on exit. @return True if scheduled, false if path doesn't exist.
2905 Registers this hook with the manager at the given priority. @param priority Hook execution priority.
2906 Logs startup/shutdown messages and registers UNIX signal handlers. @param clazz Class of the application. @param args Command-line arguments. @param log SLF4J logger.
2907 Loads SSL configuration from provided configuration. Reads keystore, password, and other SSL-related properties.
2908 Creates KeyManagers from configuration, handling passwords and reloading. @param mode SSLFactory.Mode - specifies the SSL mode
2909 Retrieves ZK auth infos from configuration. @param conf Hadoop configuration. @return List of ZKAuthInfo objects. @throws IOException if there's an IO error.
2910 Retrieves a list of group names for a user. @param user User's DN. @return List of group names.
2911 Writes the configuration to standard output.
2912 Establishes a SASL connection using the provided streams. @param ipcStreams Streams for sending/receiving SASL messages. @return Authentication method used for the connection.
2913 Initializes PathData with a FileSystem and path string. @param fs The FileSystem object. @param pathString The path string.
2914 Returns an array of PathData objects for files/dirs in this path. @return Array of PathData, sorted alphabetically.
2915 Re-throws FileNotFoundException if directory listing is inconsistent. @param fs Filesystem to use. @param path Path to check. @param e Original FileNotFoundException.
2916 Checks if the path has the FS_READ_ONLY_CONNECTOR capability. @param path The path to check. @param capability Capability string to check.
2917 Checks if a path has a specified capability. @param path The path to check. @param capability Capability string to check. @return True if the path has the capability, false otherwise.
2918 Gets the enclosing root path for a given path using FileSystem. @param fs FileSystem instance @param path Path to find the root for @return Enclosing root Path object
2919 Opens a file and returns a FutureDataInputStreamBuilder. @param path The path to the file to open. @return FutureDataInputStreamBuilder for the file.
2920 Opens a file for input stream creation. @param pathHandle Path handle for the file to open. @return FutureDataInputStreamBuilder for stream creation.
2921 Locates and loads the keystore, handling password and permissions.
2922 Initializes the TFileIndex if it's null, using meta data. Uses BlockReader and comparator from meta block.
2923 Retrieves a DataInputStream for a specified meta block. @param name Name of the meta block. @return DataInputStream for the block. @throws IOException, MetaBlockDoesNotExist
2924 Constructs a Reader, reading file metadata and initializing data structures. @param fin Input stream to read from. @param fileLength Length of the file. @param conf Hadoop configuration. @throws IOException if an I/O error occurs.
2925 Creates a meta block with given name and compression. @param name Meta block name. @param compressName Compression algorithm name. @return DataOutputStream for writing the meta block.
2926 Closes the TFile, finalizing blocks and writing metadata. Throws IllegalStateException if a block is in progress.
2927 Prepares a meta block with given name, finishing the current data block. @param name Meta block name. @return BlockAppender for writing the meta block.
2928 Prepares a DataOutputStream for appending a key of given length. Sets the state to IN_KEY.
2929 Copies a file or directory to a destination path. @param src Source file or directory. @param dstFS Destination filesystem. @param dst Destination path. @param deleteSource Whether to delete source after copy. @param conf Hadoop configuration.
2930 Completes a multipart upload, merging parts and finalizing the file. @param multipartUploadId Upload handle for the multipart upload. @param filePath Path to the final file. @param handleMap Map of part handles by part number. @throws IOException if an I/O error occurs.
2931 Creates a file and sets its permission. @param fs FileSystem instance. @param file Path to the file to create. @param permission Desired file permission. @return FSDataOutputStream for writing to the file.
2932 Creates a Writer with specified file system, config, and classes. @param fs FileSystem object. @param conf Hadoop configuration. @param name Output file path. @param keyClass, valClass Classes of key and value.
2933 Rolls the log directory, creating a new log file. Creates the directory and either appends or creates the log file.
2934 Reads the next key-value pair from the data file. @param key Key object to store the next key @param val Value object to store the next value @return True if a key-value pair was read, false otherwise.
2935 Creates a ProtocolProxy for the given protocol and configuration. @param protocol The protocol class. @param addr Remote address. @return ProtocolProxy instance.
2936 Retrieves the Groups service instance, using default configuration.
2937 Initializes various Kerberos-related configurations and metrics. @param conf Hadoop configuration object @param overrideNameRules Flag to override name rules
2938 Default constructor for the AccessControlList class.
2939 Constructs an ACL from a string representation. @param aclString String containing user/group definitions.
2940 Constructs an ACL with users and groups. @param users comma-separated user list @param groups comma-separated group list
2941 Refreshes super user groups configuration using default settings.
2942 Initializes SSL components based on configuration. @param mode SSLFactory.Mode - specifies the SSL mode
2943 Starts the ZooKeeper client with provided auth infos & SSL. @param authInfos List of AuthInfo objects. @param sslEnabled Whether SSL is enabled. @throws IOException if there's an IO error.
2944 Retrieves user groups, applying case transformation based on rule. @param user User's DN. @return List of group names, transformed according to the rule.
2945 Initializes the metrics system, starting it if not already running. @param prefix Metric prefix. @return MetricsSystem instance.
2946 Returns a new PathData object with the specified extension appended. @param extension The extension to append to the path.
2947 Gets PathData for a child path, ensuring it's a directory. @param child The child PathData object. @return PathData object for the child path.
2948 Recursively processes a path, using either iterative or iterator listing. @param item PathData to process. @throws IOException if an I/O error occurs.
2949 Checks if the path has the FS_READ_ONLY_CONNECTOR capability. @param path The path to check. @param capability Capability string to check.
2950 Checks if the path has the FS_READ_ONLY_CONNECTOR capability. @param path The path to check. @param capability Capability string to check.
2951 Checks if a path has the specified capability, excluding append/concat. @param path The path to check. @param capability Capability string to check.
2952 Lists status entries under a path. @param f The path to list. @return FileStatus array or throws exception.
2953 Copies a file or directory from source to destination. @param srcFS Source filesystem. @param src Source file status. @param dstFS Destination filesystem. @param dst Destination path.
2954 Copies a file or directory from source to destination. @param srcFS FileSystem of the source file. @param srcStatus FileStatus of the source. @param dst Destination file or directory. @param deleteSource Whether to delete the source after copy. @param conf Hadoop configuration. @return True if copy succeeded, false otherwise.
2955 Opens a file with specified read policy and file length hint. @param policy Read policy to apply when opening the file. @return FSDataInputStream for the opened file.
2956 Opens a file with specified options. @param fs FileSystem instance @param file Path to the file @param bufferSize Buffer size for the stream @param length File length, or -1 if unknown @return FSDataInputStream for the file
2957 Loads a JSON object from a file. @param fs FileSystem to use. @param path Path to the JSON file. @param status Optional FileStatus. @return Deserialized JSON object. @throws IOException if an I/O error occurs.
2958 Gets the first key from the TFileIndex. Returns null if empty.
2959 Gets the last key from the TFileIndex. Returns null if empty.
2960 Finds block index >= key. Throws exception if file is unsorted. @param key The key to search for. @param greater True for >=, false for >. @return Location of block or end if not found.
2961 Finds the RawComparable key near the given offset. @param offset The offset to search near. @return RawComparable key or null if not found.
2962 Constructs a Reader with given input stream, file length, and config. @param fsdis Input stream for the TFile. @param fileLength Length of the file. @param conf Configuration object. @throws IOException if an I/O error occurs.
2963 Initializes the block reader for a given block index. Closes existing reader and opens a new one. @param blockIndex Index of the block to initialize.
2964 Appends a key-value pair to the TFile. @param key Key data, offset, and length. @param value Value data, offset, and length.
2965 Returns the middle key in the MapFile. Returns null if the MapFile is empty.
2966 Skips to the last indexed entry or beginning, then scans to EOF. @param key WritableComparable key to read during scan
2967 Seeks to a position in the MapFile based on a key. @param key Key to seek for. @param before True to seek before the key. @return Comparison result.
2968 Merges input files, writing smallest key/value to output. Reads next key/value from each input after writing.
2969 Creates a ProtocolProxy for the given protocol and configuration. @param protocol Protocol class @return ProtocolProxy instance @throws IOException if an I/O error occurs
2970 Creates a ProtocolProxy for the given protocol and config. @param protocol Protocol class. @param clientVersion Client version. @param connId Connection ID.
2971 Gets the current trash directory path. @return Path to the trash directory, or null if disabled.
2972 Gets the trash directory for a given path. @param path The path to determine the trash dir for.
2973 Ensures UGI is initialized; initializes if not. Uses double-checked locking for thread safety.
2974 Sets the Hadoop configuration. @param conf Hadoop configuration object
2975 Launches a service with configuration and handles exceptions. @param conf Hadoop configuration. @param instance Service instance, or null to instantiate.
2976 Starts the ZooKeeper client with provided auth infos. @param authInfos List of AuthInfo objects for authentication. @throws IOException if there's an IO error.
2977 Constructs a LocalFs object with a URI and Configuration. @param theUri URI of the local file system. @param conf Hadoop configuration. @throws IOException, URISyntaxException on failure.
2978 Copies an input stream to a target file, handling overwrite and checksums.
2979 Copies a file or directory from source to destination. @param srcFS Source filesystem. @param src Source path. @param dstFS Destination filesystem. @param dst Destination path.
2980 Opens a file, repairing missing nodes if necessary. @param mrNodes Array of nodes to attempt open. @param f Path of the file to open. @param bufferSize Buffer size for file opening.
2981 Copies a file or directory to a destination. @param srcFS Source FileSystem. @param src Path of the source file/directory. @param dst Destination file or directory. @param deleteSource Delete source after copy. @param conf Hadoop configuration. @return True if copy succeeded, false otherwise.
2982 Opens file for sequential IO. @return FSDataInputStream for sequential read access. @throws IOException if an I/O error occurs.
2983 Loads a JSON object from a file. @param fs FileSystem to use. @param path Path to the JSON file.
2984 Gets the record number near the given offset. @param offset The offset to search near. @return Record number near the offset.
2985 Gets the current record number using the current location. @return Record number at the current location.
2986 Initializes the Scanner with a Reader and location bounds. @param reader Reader for TFile data. @param begin Start Location. @param end End Location.
2987 Seeks the scanner to the specified location. @param l Location to seek to; must be within bounds.
2988 Advances the scanner by one record. Returns false if at end.
2989 Appends a key-value pair to the TFile. @param key Key data. @param value Value data.
2990 Seeks to a position in the MapFile based on a key. @param key Key to seek for. @return Comparison result.
2991 Finds the closest key to the given key. @param key Key to find the closest match for. @param val Populates with the value at the closest key. @param before Seeks before the key if true. @return Closest key or null if not found.
2992 Creates a UserGroupInformation for testing purposes. @param user Username. @param userGroups User group array. @return UserGroupInformation object.
2993 Creates a proxy UGI for testing, adding specified user groups. @param user Proxy user principal. @param realUser Real user for proxy authentication. @param userGroups User groups to add. @return Proxy UserGroupInformation object.
2994 Gets the list of groups for the current user. Returns an empty list if group retrieval fails.
2995 Gets the user's groups set. @return Set of group names, or empty set on failure.
2996 Performs user login using provided Subject and LoginParams. @param subject Authentication Subject; null for default login. @param params Login parameters; null for default login. @return UserGroupInformation object representing the user. @throws IOException if login fails.
2997 Refreshes Service Acl with configuration and policy provider. @param conf Configuration object. @param provider Policy provider.
2998 Authorizes a user based on user group and remote address. @param user UserGroupInformation object @param remoteAddress Remote address string @throws AuthorizationException if authorization fails
2999 Authorizes a user based on group and remote address. @param user UserGroupInformation object to authorize @param remoteAddress Remote address of the user @throws AuthorizationException if authorization fails
3000 Launches a service using configuration and arguments. @param conf Hadoop configuration. @param processedArgs Command-line arguments. @return ExitException if an error occurs.
3001 Starts the ZooKeeper client with default authentication. @throws IOException if there's an IO error during startup.
3002 Copies a file from source to target, preserving attributes. @param src Source PathData. @param target Target PathData.
3003 Copies a file or directory from source to destination. @param srcFS Source filesystem. @param src Source path. @param dstFS Destination filesystem. @param dst Destination path. @param deleteSource Whether to delete source after copy. @param conf Hadoop configuration. @return True if copy succeeds, false otherwise.
3004 Opens a file for reading, attempting repair if needed. @param f Path of the file to open. @param bufferSize Buffer size for file opening. @throws IOException if file cannot be opened.
3005 Creates a Scanner for reading data within the current location bounds.
3006 Creates a Scanner for records between beginRecNum and endRecNum. @param beginRecNum Start record number (inclusive). @param endRecNum End record number (inclusive).
3007 Constructs a Scanner with specified begin and end offsets. @param reader Reader for TFile data. @param offBegin Start offset. @param offEnd End offset.
3008 Rewinds the scanner to its beginning location. Uses seekTo to move to the initial position.
3009 Seeks to the position of the given key in the MapFile. @param key Key to seek for. Returns true if found.
3010 Finds the closest key to the given key. @param key Key to find the closest match for. @param val Populates with the value at the closest key.
3011 Checks if security is enabled, excluding SIMPLE authentication.
3012 Logs out the user from Kerberos, shutting down renewal tasks. Throws KerberosAuthException if logout fails.
3013 Converts the user's groups set to a String array. @return String array of group names.
3014 Checks if a user or their groups are in the ACL. @param ugi UserGroupInformation to check. @return True if the user or their group is allowed.
3015 Gets UserGroupInformation from a Subject. @param subject Authentication Subject; null is not allowed. @return UserGroupInformation object representing the user. @throws IOException if login fails.
3016 Authorizes a user based on user group and remote address. @param user UserGroupInformation object @param remoteAddress Remote address string @param conf Hadoop configuration @throws AuthorizationException if authorization fails
3017 Authorizes the connection based on user and protocol. Authorizes the user, incrementing metrics on success/failure.
3018 Processes a path: copies files, throws exceptions for symlinks/dirs. @param src Source PathData. @param dst Destination PathData.
3019 Copies a file from HAR to local file system. @param delSrc Whether to delete source after copy. @param src Source path. @param dst Destination path.
3020 Copies a file or directory to local file system. @param delSrc Delete source after copy. @param src Source path. @param dst Destination local path.
3021 Creates a Scanner for a specific byte range. @param offset Start offset. @param length Number of bytes to include. @return Scanner object for the specified range.
3022 Initializes the Scanner with reader, begin/end keys. @param reader Reader for TFile data. @param beginKey Optional begin key; uses reader.begin() if null. @param endKey Optional end key; seeks to reader.end() if null.
3023 Seeks to a location based on the provided key. @param key The key to seek to. @return True if seek was successful.
3024 Seeks to the lower bound of the provided key. @param key The key to seek to. @param keyOffset Offset of the key. @param keyLen Length of the key.
3025 Seeks to the upper bound of a key in the TFile. @param key The key to seek to. @param keyOffset Offset of key in the byte array. @param keyLen Length of the key.
3026 Retrieves the value associated with a key. @param key Key to retrieve. @param val Writable object to hold the value. @return Value if found, otherwise null.
3027 Creates and returns a ProtocolProxy for the given protocol. @param protocol Protocol class. @param version Client version.
3028 Gets a protocol proxy for remote calls. @param protocol Protocol class. @param clientVersion Client version. @return ProtocolProxy instance. @throws IOException if an I/O error occurs.
3029 Gets a protocol proxy for remote calls. @param protocol Protocol class. @param clientVersion Client version. @return ProtocolProxy instance. @throws IOException if an I/O error occurs.
3030 Opens a RandomAccessFile securely for random read access. @param f File to open @param mode Access mode (e.g., "r") @param expectedOwner Expected file owner @param expectedGroup Expected file group @return RandomAccessFile object @throws IOException if access is denied or an error occurs
3031 Opens an FSDataInputStream, verifying owner & group. @param file File to open. @param expectedOwner Expected owner. @param expectedGroup Expected group. @throws IOException if open or stat fails.
3032 Opens a FileInputStream, verifying file owner and group. @param f File to open. @param expectedOwner Expected file owner. @param expectedGroup Expected file group. @return FileInputStream if secure, otherwise closes and throws.
3033 Dumps UGI details, including credentials and secret keys. @param title Title for the dump output. @param ugi UserGroupInformation object to dump.
3034 Gets the login user, creating it if it doesn't exist. Returns UserGroupInformation object or null if login fails.
3035 Logs in a user from an authentication Subject. @param subject Authentication Subject; null for default login. @throws IOException if login fails.
3036 Processes the connection context from the buffer. Extracts user info, authorizes, and increments connection count.
3037 Creates a Scanner for a key range. @param beginKey Optional begin key; null uses reader.begin(). @param endKey Optional end key; null uses reader.end().
3038 Seeks to a location based on the provided key. @param key The key to seek to. @return True if seek was successful.
3039 Seeks to the lower bound of the provided key. @param key The key to seek to.
3040 Seeks to the upper bound of a key in the TFile. @param key The key to seek to.
3041 Retrieves a key from the SequenceFile. @param key The key to retrieve. Returns key if found, null otherwise.
3042 Gets a value by key, checking Bloom filter first. @param key The key to retrieve. @param val Writable object to hold the value. @return Value if found, null if key probably absent.
3043 Gets a ProtocolProxy for the given protocol and version. @param protocol Protocol class. @param clientVersion Client version.
3044 Gets a protocol proxy for remote calls. @param protocol Protocol class. @param clientVersion Client version. @return ProtocolProxy instance. @throws IOException if an I/O error occurs.
3045 Sets up I/O streams for connection, handling auth & retries. @param fallbackToSimpleAuth AtomicBoolean for auth fallback.
3046 Opens a RandomAccessFile securely for random read access. @param f File to open, mode Access mode, owner/group expected values. @return RandomAccessFile object @throws IOException if access is denied or an error occurs
3047 Opens an FSDataInputStream, using secure mode if enabled. @param file File to open. @param expectedOwner Expected owner. @param expectedGroup Expected group. @throws IOException if open fails.
3048 Opens a file for reading, securely if security is enabled. @param f File to open. @param expectedOwner Expected owner. @param expectedGroup Expected group. @return FileInputStream.
3049 Checks if a user has administrator access based on ACL. @param servletContext Servlet context holding ADMINS_ACL. @param remoteUser Username to check for admin access.
3050 Authorizes a user for a protocol, checking ACLs and machine lists. @param user UserGroupInformation object. @param protocol Protocol class. @param conf Hadoop configuration. @param addr Client address.
3051 Gets the current user's UserGroupInformation, or the login user. Returns UGI object representing the current user.
3052 Checks if login is based on a keytab. Uses {@link #getLoginUser()} to determine keytab usage.
3053 Checks if the login is ticket-based. Delegates to {@link #getLoginUser()}.isFromTicket().
3054 Executes action as login user or runs it if security is disabled. @param action The action to perform. @return Result of the action.
3055 Executes action as the login user. @param action Action to execute @return Result of the action @throws IOException
3056 Cedes active status, executing doCedeActive as the login user. @param millisToCede Time to cede active status for. @throws AccessControlException, ServiceFailedException, IOException
3057 Performs a graceful failover operation as the login user. Executes gracefulFailover() within the context of the login user.
3058 Creates a Scanner for a key range. @param beginKey Optional begin key; null uses reader.begin(). @param endKey Optional end key; null uses reader.end().
3059 Creates a Scanner for a key range. @param beginKey Optional begin key; null uses reader.begin(). @param endKey Optional end key; null uses reader.end().
3060 Gets a protocol proxy for remote calls. @param protocol Protocol class. @param clientVersion Client version. @return ProtocolProxy instance.
3061 Gets a proxy for the specified protocol. @param protocol Protocol class. @param clientVersion Client version. @return Proxy object. @throws IOException if an I/O error occurs.
3062 Checks if a user has administrator access. @param servletContext Servlet context. @param request HTTP request. @param response HTTP response.
3063 Authorizes a user for a protocol, throwing an exception on failure. @param user UserGroupInformation object. @param protocolName Protocol name. @param addr Client address.
3064 Gets the user's home directory as a Path object. Uses username from UGI, falls back to system property.
3065 Checks if the user has the required access permissions. @param stat The file status to check. @param mode The required access mode.
3066 Constructs a ViewFileSystem instance. Initializes user and creation time.
3067 Constructs a ViewFS instance with a URI and configuration. @param theUri The URI for the ViewFS. @param conf Hadoop configuration.
3068 Initializes the InodeTree with configurations and link entries. @throws Various IOExceptions if initialization fails.
3069 Gets the user's home directory. Returns qualified Path object, falling back to system property.
3070 Opens a connection with URL, adding auth params. @param url URL to connect to @param token Token object @param doAs user to execute as @return HttpURLConnection object
3071 Gets the best UGI based on ticket cache path and user. @param ticketCachePath Path to ticket cache, or null. @param user Username, or null. @return UserGroupInformation object.
3072 Logs in a user from a keytab file and returns the UGI object. @param user User principal. @param path Keytab file path. @return UserGroupInformation object representing the user. @throws IOException if login fails.
3073 Logs user information (current, real, login) if debug is enabled. @param log Logger instance for logging. @param ugi UserGroupInformation object.
3074 Executes an action as the current user. @param action Action to perform with current user's privileges @return Result of the action @throws IOException
3075 Returns the short username if DoAsProxy is enabled, otherwise null.
3076 Waits for and retrieves a ProtocolProxy, retrying on connection errors. @param protocol Protocol class. @param clientVersion Client version. @param addr Server address. @param conf Hadoop configuration. @param timeout Wait timeout in milliseconds. @throws IOException if connection fails or timeout occurs.
3077 Creates a Scanner for a key range. @param beginKey Optional begin key; null uses reader.begin(). @param endKey Optional end key; null uses reader.end().
3078 Gets a protocol proxy for remote calls using current user. @param protocol Protocol class. @param clientVersion Client version. @param addr Server address.
3079 Gets a proxy for a protocol. @param protocol Protocol class. @param clientVersion Client version. @param addr Server address. @return Protocol proxy.
3080 Checks if instrumentation access is allowed based on config. @param servletContext Servlet context. @param request HTTP request. @param response HTTP response. @return True if access is allowed, false otherwise.
3081 Gets the trash root directory for a given path. @param path The path for which to get the trash root.
3082 Gets trash roots, either for current user or all users. @param allUsers True to get all users' trash roots. @return Collection of FileStatus objects representing trash roots.
3083 Checks file access permissions. @param path The path to check. @param mode The required access mode.
3084 Checks if the user has access to the path with the given mode. @param path The path to check. @param mode The required access mode.
3085 Constructs a ViewFileSystem instance. @param theUri URI of the filesystem. @param conf Hadoop configuration. @throws IOException if an I/O error occurs.
3086 Retrieves a FileSystem instance, creating one if needed. @param uri URI of the filesystem. @param conf Hadoop configuration. @return FileSystem instance. @throws IOException if an I/O error occurs.
3087 Gets the user's home directory. Returns qualified Path object.
3088 Opens a connection, delegating to super if token is not Token. @param url URL to connect to @param token Authentication token @return HttpURLConnection object
3089 Gets a FileSystem instance for the given URI and user. @param uri The URI of the file system. @param conf Hadoop configuration. @param user Username to use. @return FileSystem instance.
3090 Creates a new FileSystem instance with specified URI, config, and user. @param uri FileSystem URI. @param conf Hadoop configuration. @param user Username for FileSystem access. @return New FileSystem instance.
3091 Gets UGI from ticket cache, using Kerberos if enabled. @param ticketCache Cache path, user username. @return UserGroupInformation object. @throws IOException if login fails.
3092 Logs in using a keytab or current user, refreshing credentials. @throws IOException if login fails.
3093 Logs in a user from a keytab file. @param user User principal. @param path Keytab file path. @throws IOException if login fails.
3094 Logs user information (current, real, login) using the default logger. @param ugi UserGroupInformation object to log.
3095 Waits for and retrieves a ProtocolProxy, retrying on errors. @param protocol Protocol class. @param clientVersion Client version. @param addr Server address. @param conf Hadoop configuration. @param connTimeout Connection timeout in milliseconds. @throws IOException if connection fails or timeout occurs.
3096 Waits for and retrieves a protocol proxy. @param protocol Protocol class. @param clientVersion Client version. @param addr Server address. @param conf Hadoop configuration. @param rpcTimeout RPC timeout. @param timeout Wait timeout in milliseconds. @return Proxy instance. @throws IOException if connection fails or timeout occurs.
3097 Gets a proxy for remote calls. @param protocol Protocol class. @param clientVersion Client version. @param addr Server address.
3098 Gets a protocol proxy for remote calls. @param protocol Protocol class. @param clientVersion Client version. @param addr Server address. @param conf Hadoop configuration.
3099 Gets a proxy for the UserGroupMappingProtocol. @return UserGroupMappingProtocol proxy object. @throws IOException if an I/O error occurs.
3100 Creates a ZKFC proxy client using provided configuration and timeout. @param conf Hadoop configuration. @param timeoutMs Connection timeout in milliseconds. @return ZKFCProtocol client.
3101 Gets the trash root directory for a given path. @param path The path for which to get the trash root.
3102 Retrieves trash roots, for current or all users. @param allUsers True to get all users' trash roots.
3103 Constructs a ViewFileSystem instance using default URI. @param conf Hadoop configuration. @throws IOException if an I/O error occurs.
3104 Adds a FileSystem to the cache for testing purposes. @param uri The URI used to identify the file system. @param conf Hadoop configuration. @param fs The FileSystem to add to the cache.
3105 Creates a FileSystem instance, using defaults if necessary. @param uri URI of the filesystem. @param config Hadoop configuration. @throws IOException if an I/O error occurs.
3106 Creates a FileContext with the given filesystem and configuration. @param defFS Default filesystem to use. @param aConf Hadoop configuration.
3107 Opens a connection, delegating to super if token is not Token. @param url URL to connect to @param token Authentication token @return HttpURLConnection object
3108 Executes Kerberos diagnostics, validating configuration & login. @return True on success, false if validation fails.
3109 Processes args, attempts Kerberos login if -principal/-keytab are provided. @param args Command-line arguments @return Modified args array, potentially with Kerberos login applied. @throws IOException if login fails.
3110 Main method: gets current UGI, prints details, and optionally logs in via keytab. @param args Command line arguments: user principal and keytab path.
3111 Logs in a user from a keytab file using provided configuration. @param conf Configuration object. @param keytabFileKey Keytab file key. @param userNameKey User name key. @param hostname Hostname for principal. @throws IOException if login fails.
3112 Constructs a Server instance with configured parameters. @param bindAddress Server bind address. @param port Server port.
3113 Builds and sends a SASL negotiation response, including challenge if TOKEN is enabled. @return RpcSaslProto object containing the negotiation response. @throws InterruptedException, SaslException, IOException
3114 Waits for a ProtocolProxy. Overloads timeout to Long.MAX_VALUE. @param protocol Protocol class. @param clientVersion Client version. @param addr Server address. @param conf Hadoop configuration. @throws IOException if connection fails.
3115 Waits for and retrieves a ProtocolProxy. @param protocol Protocol class. @param clientVersion Client version. @param addr Server address. @param conf Hadoop configuration. @param connTimeout Connection timeout. @return Proxy object.
3116 Adds a resource from an input stream. @param in Input stream containing resource data. @param name Resource name.
3117 Gets a proxy for a given protocol. @param protocol Protocol class. @param clientVersion Client version. @param addr Server address. @param conf Hadoop configuration. @return Proxy object.
3118 Retrieves and prints user groups for provided usernames. Uses current user if no usernames are provided as args.
3119 Performs a graceful failover to the specified node via ZKFC. @param toNode Target HA service node for failover. @return 0 on success, -1 on failure.
3120 Requests a remote service to cede its active state. @param remote The HAServiceTarget to request ceding. @param timeout Timeout in milliseconds. @return ZKFCProtocol client.
3121 Handles GET requests to retrieve and serialize JMX data to JSON. @param request HTTP request containing query parameters. @param response HTTP response containing JMX data.
3122 Retrieves a FileSystem instance, potentially from cache or creating a new one. @param uri URI of the filesystem. @param conf Hadoop configuration. @return FileSystem instance. @throws IOException if an I/O error occurs.
3123 Creates a LocalFileSystem instance using the provided configuration. @param conf Hadoop configuration @return LocalFileSystem object
3124 Gets a new FileSystem instance for the given URI and config. @param uri URI of the filesystem. @param conf Hadoop configuration. @throws IOException if an I/O error occurs.
3125 Gets a FileContext using the provided filesystem. @param defaultFS Default filesystem to use. @return FileContext object.
3126 Gets a FileContext for the default filesystem, using current user. @param defaultFsUri URI of the default filesystem. @param aConf Hadoop configuration. @throws UnsupportedFileSystemException if filesystem is unsupported.
3127 Initializes the utility, processes args, and sets subcommands. @param args Command-line arguments, may trigger Kerberos login. @throws Exception if an error occurs during initialization.
3128 Logs in a user from a keytab file using provided configuration. @param conf Hadoop configuration. @param keytabFileKey Keytab file key. @param userNameKey User name key. @throws IOException if login fails.
3129 Processes a SASL message and generates a response. @param saslMessage SASL message to process. @return RPC SASL response. @throws SaslException, IOException, AccessControlException, InterruptedException
3130 Waits for a protocol proxy and returns the proxy instance. @param protocol Protocol class. @param clientVersion Client version. @param addr Server address. @param conf Hadoop configuration. @return The proxy object.
3131 Adds a resource to the configuration by name. @param name Resource name to add.
3132 Adds a resource from a URL to the configuration. @param url The URL of the resource to add.
3133 Adds a resource to the configuration and loads its properties. @param file Path to the resource file.
3134 Adds a resource from an input stream to the configuration. @param in Input stream containing resource data.
3135 Performs a graceful failover process to become active. Attempts to cede active state from other nodes.
3136 Creates a proxy to the health monitor service. @param conf Hadoop configuration. @param rpcTimeout Connection timeout. @param rpcConnectRetries Max connection retries. @return Proxy to the health monitor service.
3137 Gets a health monitor proxy with default retry count. @param conf Hadoop configuration. @param timeoutMs Connection timeout in milliseconds.
3138 Gets a proxy for HA service. @param conf Hadoop configuration. @param timeoutMs Connection timeout in milliseconds. @return Proxy to HA service.
3139 Initializes the HarFileSystem with a URI and Configuration. @param name URI of the HarFileSystem. @param conf Hadoop configuration.
3140 Moves a file or directory to trash, respecting server config. @param fs FileSystem instance. @param p Path to move. @param conf Hadoop configuration.
3141 Creates a PathData instance using a path string and configuration. @param pathString The path string. @param conf Hadoop configuration.
3142 Gets a FileSystem object by name. @param name FileSystem name. @param conf Hadoop configuration. @return FileSystem object. @throws IOException if an I/O error occurs.
3143 Gets a LocalFileSystem instance using the provided configuration. @param conf Hadoop configuration. @return LocalFileSystem instance. @throws IOException if an I/O error occurs.
3144 Constructs a ChRootedFileSystem with a specified URI and configuration. @param uri The URI defining the root path. @param conf Hadoop configuration.
3145 Retrieves a FileSystem instance. @param uri URI of the filesystem. @param conf Hadoop configuration. @return FileSystem instance.
3146 Gets a FileSystem instance for the given URI and config. @param uri URI of the filesystem. @param conf Hadoop configuration. @return FileSystem instance.
3147 Gets the FileSystem associated with this path's URI. @param conf Hadoop configuration. @return FileSystem instance. @throws IOException if an I/O error occurs.
3148 Retrieves the FileSystem instance, using supplied or getting a new one. @throws MetricsException if URI is invalid or connection fails.
3149 Lists status for a path, merging internal and fallback links. @param f The path to list status for. @return An array of FileStatus objects.
3150 Gets a FileContext for the default filesystem, using defaults. @param defaultFsUri URI of the default filesystem. @throws UnsupportedFileSystemException if filesystem is unsupported.
3151 Gets a FileContext for the default filesystem. @param aConf Hadoop configuration. @throws UnsupportedFileSystemException if filesystem is unsupported.
3152 Gets a FileContext for the local file system. @param aConf Hadoop configuration. @throws UnsupportedFileSystemException if filesystem is unsupported.
3153 Constructs a Server instance with configured parameters. @param protocolClass Protocol class to implement @param protocolImpl Implementation of the protocol
3154 Constructs a Server instance with configured parameters. @param protocolClass Protocol class, or null to derive from impl.
3155 Processes a SASL message, handling authentication and response. @throws RpcServerException, IOException, InterruptedException
3156 Loads mount table configurations from a file path. @param mountTableConfigPath Path to the mount table config. @param conf Hadoop configuration object.
3157 Checks if another target node is active. @param targetNodeToActivate ID of target node. @param forceActive Force active flag. @return True if another node is active.
3158 Performs pre-failover checks on the target service. @param from Source HAServiceTarget. @param target Target HAServiceTarget. @param forceActive Force active flag.
3159 Attempts graceful failover transition to standby. @param svc Target HA service to transition. @return True if successful, false otherwise.
3160 Resolves a path, following symlinks if enabled. @param filesys The FileSystem to use. @param path The path to resolve. @return Resolved value or calls next FS if needed. @throws IOException if resolution fails.
3161 Constructs PathData with a FileSystem and path from URI. @param localPath The URI representing the path. @param conf Hadoop configuration.
3162 Copies files from local file system to Hadoop. @param delSrc Delete source files after copy. @param overwrite Overwrite destination if it exists. @param srcs Source paths. @param dst Destination path.
3163 Copies a file from the local file system to Hadoop. @param delSrc Delete source file after copy. @param overwrite Overwrite destination if it exists. @param src Source path. @param dst Destination path.
3164 Copies a file or directory to a local file. @param delSrc Whether to delete source after copy. @param src Source path. @param dst Destination path. @param useRawLocalFileSystem Use raw local filesystem.
3165 Handles configuration changes for local directories. @param conf Hadoop configuration; updates local dir paths. @return Updated Context object.
3166 Gets a local path, trying each dir in dirsProp. @param dirsProp Property containing local directory names. @param path Path to create. @throws IOException if no valid local directories exist.
3167 Gets the raw FileSystem for a path, handling mount points/links. @param path The path to resolve. @param conf Hadoop configuration. @return FileSystem instance.
3168 Retrieves mount path info for a given path. @param path Path to resolve. @param conf Hadoop configuration. @return MountPathInfo object.
3169 Expands a glob pattern into an array of PathData objects. @param pattern The glob pattern to expand. @param conf Hadoop configuration. @return Array of PathData objects matching the pattern.
3170 Prints detailed information about a BCFile to the specified output stream. This includes metadata, block sizes, compression ratios, and a table of block details. @param out The output stream to write the information to. @param path The path to the BCFile. @throws IOException If an I/O error occurs while reading the BCFile.
3171 Reads token storage from a file. @param filename Path to the token storage file. @param conf Hadoop configuration. @throws IOException if an I/O error occurs.
3172 Retrieves libjars URLs from configuration, local only. @param conf Hadoop configuration. @return Array of URL objects or null if not found.
3173 Initializes the FileSystem and base directory. Creates the base directory and checks append support. @return True on success, false otherwise.
3174 Gets a FileContext for the local file system. Uses the default URI for the local filesystem. @throws UnsupportedFileSystemException if filesystem is unsupported.
3175 Gets a FileContext for the default filesystem. @throws UnsupportedFileSystemException if filesystem is unsupported.
3176 Constructs a Server instance with configured RPC parameters.
3177 Constructs a Server instance with specified configurations. @param protocolClass Protocol class, or null to derive from impl.
3178 Creates an SSLFactory with given mode and configuration. @param mode Client or server mode. @param conf Configuration object.
3179 Refreshes service ACLs using a configuration and provider. @param conf Configuration object. @param provider Policy provider.
3180 Performs failover transition from one service to another. @param fromSvc Source HAServiceTarget. @param toSvc Target HAServiceTarget.
3181 Determines the local destination path using provided arguments. @param args Command-line arguments; last arg is destination. @throws IOException if URI parsing fails and is not Windows.
3182 Moves files from local file system to Hadoop. @param srcs Source paths. @param dst Destination path.
3183 Copies files from local file system to Hadoop. @param delSrc Delete source. @param overwrite Overwrite. @param srcs Source paths. @param dst Destination path.
3184 Copies a local file to Hadoop. Deletes source if delSrc is true. @param delSrc Delete source file after copy. @param src Source path. @param dst Destination path.
3185 Copies a local file to the file system. @param delSrc Delete source. @param overwrite Overwrite. @param src Source path. @param dst Destination path.
3186 Copies a file or directory to a local file. @param delSrc Delete source after copy. @param src Source path. @param dst Destination path.
3187 Gets a local path for writing, selecting based on size/availability. @param pathStr Path string. @param size File size. @param conf Hadoop config. @param checkWrite Whether to check write status.
3188 Finds a local path for reading; throws DiskErrorException if not found. @param pathStr Path to search for. @param conf Hadoop configuration.
3189 Retrieves all local paths for reading. @param pathStr Path string to process; removes leading '/'. @param conf Hadoop configuration. @return Iterable of Path objects.
3190 Constructs NflyFSystem with given URIs, config, and flags. @param uris URIs for file system. @param conf Hadoop configuration. @param minReplication Minimum replication factor.
3191 Executes all commands for each source path. @return 0 on success, -1 if any command fails.
3192 Expands a glob argument into a list of PathData objects. @param arg The glob pattern to expand. @return List of PathData objects matching the pattern. @throws IOException If the glob pattern doesn't match.
3193 Determines the remote destination PathData. @param args Command-line arguments; last arg is destination path. @throws IOException If path is invalid or multiple matches found.
3194 Constructs a Reader with a file system, path, and configuration. @param fs FileSystem object @param file Path to the sequence file @param conf Hadoop configuration @throws IOException if an I/O error occurs
3195 Constructs Reader with input stream, buffer size, start, length. @param in Input stream. @param buffersize Buffer size. @param start Start offset. @param length Length of data to read. @param conf Hadoop configuration.
3196 Creates a SequenceFile Reader for the given data file. @param dataFile Path to the data file. @param conf Hadoop configuration. @param options Reader options. @return SequenceFile Reader object. @throws IOException if an I/O error occurs
3197 Reads the next raw key from the segment. @return True if a key was read, false otherwise.
3198 Initializes the Writer with options, creating/appending to a file. @param conf Hadoop configuration. @param opts Option objects for file writing.
3199 Main method: dumps TFile information for given file paths. @param args Command-line arguments, file paths to dump.
3200 Writes credentials to a file in the Hadoop file system. @param f File to write to. @param format Format of the credentials (WRITABLE or PB). @param creds Credentials object. @param conf Hadoop configuration.
3201 Rolls the log directory if needed, or forces a flush. Rolls log dir if stream is null or past nextFlush time.
3202 Lists JAR files in a directory. @param path Directory path, supports wildcard. @param useLocal Use local filesystem or not. @return List of Path objects representing JAR files.
3203 Constructs a Server instance with basic configurations. @param protocolClass Protocol class @param protocolImpl Protocol implementation @param conf Hadoop configuration @param bindAddress Address to bind to @param port Port number @throws IOException if an I/O error occurs
3204 Constructs a Server instance with specified configurations. @param protocolImpl Protocol implementation @param conf Configuration object
3205 Processes out-of-band RPC requests, handling SASL, context, and pings. @param header RPC request header @param buffer Data buffer for the request
3206 Establishes a connection to a URL, handling SSL/HTTPS if needed. @param url URL to connect to. @return URLConnection object. @throws Exception if connection fails.
3207 Copies a local file to Hadoop. @param src Source path. @param dst Destination path.
3208 Copies a local file to Hadoop and deletes the source. @param src Source path. @param dst Destination path.
3209 Copies a local file to the file system. @param delSrc Delete source file after copy. @param src Source path. @param dst Destination path.
3210 Copies a file or directory to a local file. @param src Source path. @param dst Destination path.
3211 Moves a file or directory to a local file. @param src Source path. @param dst Destination path.
3212 Copies a file or directory to a local file. @param delSrc Delete source after copy. @param src Source path. @param dst Destination path.
3213 Gets a local write path based on size, config, and write check. @param pathStr Path string. @param size File size. @param conf Hadoop config. @param checkWrite Whether to check write status. @return Path object.
3214 Creates a temporary file for writing in a local directory. @param pathStr Path string. @param size File size. @param conf Hadoop config. @return File object representing the temporary file.
3215 Gets the local path for reading. @param pathStr Path string. @param conf Hadoop configuration. @return Path object.
3216 Gets all local paths for reading. @param pathStr Path string; removes leading '/'. @param conf Hadoop configuration. @return Iterable of Path objects.
3217 Constructs NflyFSystem with URIs, config, minReplication, and flags.
3218 Creates a NflyFSystem with specified URIs, config, and flags. @param uris URIs for file system. @param conf Hadoop configuration.
3219 Expands a list of arguments into PathData objects. @param args List of string arguments to expand. @return LinkedList of PathData objects. @throws IOException If an argument expansion fails.
3220 Retrieves delegation tokens, optionally aliased, and writes them. @param tokenFile File to read/write tokens. @param fileFormat Token file format (WRITABLE or PB).
3221 Renames a token in a file, updating credentials. @param tokenFile File containing the token. @param fileFormat File format (WRITABLE or PB). @param alias New token alias. @param service Original token service. @param conf Hadoop configuration.
3222 Appends tokens from multiple files into a single file. @param tokenFiles List of token files to append. @param fileFormat File format (WRITABLE or PB). @param conf Hadoop configuration.
3223 Removes a token from a file, optionally canceling it. @param cancel Whether to cancel the token. @param tokenFile File containing the tokens. @param fileFormat Token file format. @param alias Token alias to remove. @param conf Hadoop configuration.
3224 Renews tokens in a file, if managed and matching alias. @param tokenFile File containing tokens. @param fileFormat Format of the token file. @param alias Token alias to match. @param conf Hadoop configuration.
3225 Imports a token file, decodes a token, and adds it to credentials. @param tokenFile File containing the token. @param fileFormat Format of the token file. @param alias Token alias. @param base64 Base64 encoded token string. @param conf Hadoop configuration.
3226 Lists JAR files in a directory. @param path Directory path, supports wildcard.
3227 Constructs a Server instance with basic configurations. @param instance Protocol implementation @param conf Hadoop configuration @param bindAddress Address to bind to @param port Port number @throws IOException if an I/O error occurs
3228 Processes a single RPC request from a client. @param bb RPC request data as a ByteBuffer. @throws IOException if an I/O error occurs. @throws InterruptedException if interrupted.
3229 Processes a URL string, connects, reads, and prints matching lines. @param urlString URL to process; connects and reads from it. @throws Exception if connection or reading fails.
3230 Moves a local file to the file system output. @param tmpLocalFile Local file to move. @param fsOutputFile File system output path.
3231 Copies a file or directory to local file system, optionally with CRC. @param src Source path. @param dst Destination path. @param copyCrc Copy CRC file.
3232 Gets a local write path based on size and config. @param pathStr Path string. @param size File size. @param conf Hadoop config.
3233 Creates a temporary file for writing using context configuration. @param pathStr Path string. @param size File size. @param conf Hadoop config. @return File object.
3234 Processes raw arguments after expanding them to PathData. @param args LinkedList of string arguments to process. @throws IOException if an I/O error occurs.
3235 Creates a SequenceFile Writer with configured compression. @param conf Hadoop configuration. @param opts Writer options. @return SequenceFile Writer instance.
3236 Creates a JAR file with classpath entries, expanding wildcards. @param inputClassPath Initial classpath string. @param pwd Working directory Path. @param targetDir Target directory Path. @param callerEnv Environment variables map. @return Array of paths: classpath JAR and wildcard classpath.
3237 Validates file paths, expands wildcards if enabled. @param files Comma-separated list of file paths. @param expandWildcard Whether to expand wildcard paths. @return Comma-separated string of qualified paths. @throws IOException if an I/O error occurs.
3238 Reads and processes RPC requests from the connection. Handles header validation and initiates RPC processing.
3239 Processes unencrypted RPCs from input buffer, handling partial reads.
3240 Retrieves log level for a class from the configured URL. @throws Exception if connection or reading fails.
3241 Sets the log level for a given class via a URL. @throws Exception if connection or reading fails.
3242 Creates a KeyProvider for the specified URI. @param providerUri KMS provider URI. @param conf Hadoop configuration. @return KeyProvider instance or null if scheme doesn't match.
3243 Moves a local file to the file system output. @param fsOutputFile File system output path. @param tmpLocalFile Local file to move.
3244 Creates a temporary file for writing data. @param pathStr Path string. @param size File size. @param conf Hadoop config. @return File object representing the temporary file.
3245 Gets a local write path based on config. @param pathStr Path string. @param conf Hadoop config.
3246 Executes the command, handles deprecation, options, and arguments. @param argv Command-line arguments passed to the command. @return Exit code indicating success or failure.
3247 Constructs a Reader for the given file in the file system. @param fs Hadoop FileSystem instance @param file Path to the file @param conf Hadoop Configuration
3248 Constructs a Reader with a FileSystem, directory, and comparator. @param fs Hadoop FileSystem instance. @param dirName Directory containing the SequenceFile.
3249 Constructs a Reader using a FileSystem and directory name. @param fs FileSystem object. @param dirName Directory name. @param conf Hadoop configuration. @throws IOException if an I/O error occurs.
3250 Creates a Reader with a provided FileSystem, directory, and comparator. @param fs FileSystem to use. @param dirName Directory name. @param comparator WritableComparator. @param conf Hadoop configuration. @throws IOException if an I/O error occurs.
3251 Creates a Writer with attributes cloned from an input file. @param inputFile Input file to clone attributes from. @param outputFile Output file to write to. @param prog Progressable object for tracking progress.
3252 Fixes a MapFile by creating an index file if one doesn't exist. @param fs Filesystem to operate on. @param dir Directory containing MapFile. @param keyClass Key class of the MapFile. @param valueClass Value class of the MapFile.
3253 Creates a SequenceFile Writer with specified file, key, value classes. @param fs FileSystem instance. @param conf Hadoop configuration. @param name File path. @param keyClass Key class type. @param valClass Value class type. @return SequenceFile Writer instance.
3254 Creates a SequenceFile Writer with specified file, key, value, and compression. @param fs FileSystem instance. @param conf Hadoop configuration. @param name Path of the sequence file.
3255 Creates a SequenceFile Writer with configured parameters. @param fs FileSystem instance. @param conf Hadoop configuration. @param name File path.
3256 Creates a SequenceFile Writer with specified file, key, value, and compression settings. @param fs FileSystem instance. @param conf Hadoop configuration. @param name Path to the output file.
3257 Creates a SequenceFile Writer with specified parameters. @param fs Filesystem. @param conf Hadoop configuration. @param name File path. @param keyClass Key class. @param valClass Value class.
3258 Creates a SequenceFile Writer with configured options. @param fs FileSystem, conf Hadoop configuration, name Path, etc.
3259 Creates a SequenceFile Writer with configured parameters. @param fs FileSystem, conf Configuration, name Path, keyClass, valClass, compressionType, codec, progress @return SequenceFile Writer instance
3260 Creates a SequenceFile Writer with specified key, value, and compression. @param conf Hadoop configuration. @param out FSDataOutputStream.
3261 Creates a SequenceFile Writer with specified key, value, and compression. @param conf Hadoop configuration. @param out FSDataOutputStream.
3262 Validates file paths, using default wildcard expansion setting. @param files Comma-separated list of file paths. @return Comma-separated string of qualified paths. @throws IOException if an I/O error occurs.
3263 Executes the log level operation (GET or SET). Throws IllegalArgumentException for invalid operations.
3264 Creates a DataBlock with a temporary file. @param index Block index. @param limit Data limit. @param statistics Upload statistics. @return DataBlock object. @throws IOException if an I/O error occurs.
3265 Creates a temporary file for caching, using local allocator. @param conf Hadoop configuration. @param localDirAllocator Local directory allocator. @return Temporary file path with POSIX permissions.
3266 Executes a command. @param argv Command-line arguments passed to the shell. @return Exit code indicating success or failure.
3267 Constructs a Reader with a FileSystem, directory, and configuration. @param fs FileSystem object @param dirName Directory name @param conf Hadoop configuration @throws IOException if an I/O error occurs
3268 Merges sorted segments into a RawKeyValueIterator. Handles multiple merge passes and cleanup.
3269 Creates a Writer with specified configuration, directory, and compression. @param conf Hadoop configuration. @param dirName Directory for data and index files. @param compress SequenceFile compression type.
3270 Constructs a Writer with given config, file system, file, and Writable class. @param conf Hadoop configuration @param fs FileSystem object @param file File path @param valClass Writable class to write
3271 Constructs a Writer with given configuration, file, class, compression, and progress.
3272 Creates a Writer with key and value classes, using a directory. @param conf Hadoop configuration. @param fs FileSystem instance. @param dirName Directory for data and index files. @param keyClass Key class. @param valClass Value class.
3273 Creates a Writer with key, value classes, compression, and progress. @param conf Hadoop configuration. @param fs FileSystem object. @param dirName Directory name.
3274 Creates a Writer with configured options and progress. @param conf Hadoop configuration. @param fs Filesystem. @param dirName Directory for data and index files. @param progress Progressable object.
3275 Creates a Writer with key, value, and compression classes. @param conf Hadoop configuration. @param fs Filesystem. @param dirName Directory for data and index files. @param keyClass Key class. @param valClass Value class. @param compress Compression type.
3276 Creates a Writer with a specified comparator and value class. @param conf Hadoop configuration. @param fs FileSystem object. @param dirName Directory for data and index files. @param comparator Comparator for sorting. @param valClass Value class for the SequenceFile.
3277 Creates a Writer with configured options, comparator, value class, and compression. @param conf Hadoop configuration. @param fs Filesystem. @param dirName Directory for data and index files. @param comparator Comparator for sorting. @param valClass Value class. @param compress Compression type.
3278 Creates a Writer with configured options and progress. @param conf Hadoop configuration. @param fs FileSystem. @param dirName Directory for data and index files. @param progress Progressable value.
3279 Creates a Writer with specified configuration and options. @param conf Hadoop configuration. @param fs FileSystem. @param dirName Directory for data files.
3280 Creates a SequenceFile writer with specified parameters. @param fc FileContext for file operations.
3281 Main method: processes command-line arguments, creates/writes JARs. @param args Command-line arguments; can include -h, --help, -jar.
3282 Creates a ClassLoader for the JAR file, using client or standard approach. @param file JAR file to load. @param workDir Working directory for JAR execution. @return ClassLoader for the JAR file. @throws MalformedURLException if URL creation fails.
3283 Processes general command-line options and configures Hadoop. Parses options like fs, jt, conf, D, libjars, files, archives, and tokenCacheFile to set configuration properties.
3284 Gets a temporary file path for caching. @param conf Hadoop configuration. @param localDirAllocator Local directory allocator. @return Temporary file path.
3285 Checks if there's enough cache space for a file. @param fileSize Size of the file to be cached. @param conf Hadoop configuration. @param localDirAllocator Local directory allocator.
3286 Merges sorted segments into a RawKeyValueIterator. @param segments List of segments to merge. @param tmpDir Temporary directory for merging. @return RawKeyValueIterator containing merged data.
3287 Merges sorted segments from input paths into a RawKeyValueIterator. @param inNames Input paths to merge. @param deleteInputs Whether to delete input files after merge. @param factor Merge factor. @param tmpDir Temporary directory. @return RawKeyValueIterator containing merged data.
3288 Merges sorted segments into a RawKeyValueIterator. @param inNames Input paths, tempDir temp directory, deleteInputs delete inputs @return RawKeyValueIterator object
3289 Merges sorted segments from a SequenceFile into a RawKeyValueIterator. @param inName Input SequenceFile path @param indexIn Index SequenceFile path @param tmpDir Temporary directory for merging @return RawKeyValueIterator containing merged data
3290 Creates a Writer with specified configuration, directory, and compression. @param conf Hadoop configuration @param fs Filesystem object @param dirName Directory for data and index files @param compress SequenceFile compression type
3291 Creates a Writer with key class, using a directory. @param fs FileSystem instance. @param dirName Directory for data and index files. @param keyClass Key class.
3292 Merges input MapFiles to an output MapFile, optionally deleting inputs. @param inMapFiles Input MapFile paths. @param deleteInputs Flag to delete input files after merge. @param outMapFile Output MapFile path.
3293 Creates a SequenceFile writer with specified parameters. @param fs FileSystem, conf, name, classes, etc.
3294 Parses general command-line options and configures Hadoop. @param opts Options object to parse. @param args Command-line arguments. @return True if parsing was successful, false otherwise.
3295 Adds a block to the cache, updating statistics and evicting if needed. @param blockNumber Block number to cache. @param buffer Data buffer to cache.
3296 Merges sorted segments into a RawKeyValueIterator. @param inNames Input paths to merge. @param deleteInputs Delete inputs after merge. @param tmpDir Temporary directory.
3297 Performs a merge pass, merging sorted segments and writing results. @param tmpDir Temporary directory for merging. @return 0 after merging.
3298 Entry point; runs the JAR file using the RunJar class. @param args Command-line arguments passed to the JAR.
3299 Initializes the parser with configuration, options, and arguments. @param conf Hadoop configuration. @param options Options to parse. @param args Command-line arguments.
3300 Sorts input files and returns a RawKeyValueIterator. @param inFiles Input file paths to sort. @param tempDir Temporary directory. @param deleteInput Delete input files after sorting.
3301 Merges input files into a single output file. @param inFiles Input paths to merge. @param outFile Path to the merged output file.
3302 Sorts input files and merges them into a single output file. @param inFiles Input file paths to sort. @param outFile Output file path. @param deleteInput Whether to delete input files after sorting.
3303 Constructs a GenericOptionsParser with a default Hadoop configuration. @param opts Options to parse. @param args Command-line arguments.
3304 Constructs a GenericOptionsParser with default configuration and options. @param args Command-line arguments to parse. @throws IOException if an I/O error occurs.
3305 Constructs a GenericOptionsParser with default options. @param conf Hadoop configuration. @param args Command-line arguments.
3306 Sorts a single input file and writes to an output file. @param inFile Input file path. @param outFile Output file path.
3307 Creates a GenericOptionsParser instance with config and args. @param conf Hadoop configuration @param argArray Command-line arguments @return GenericOptionsParser object
3308 Runs a Hadoop tool with specified configuration and arguments. @param conf Hadoop configuration. @param tool The tool to execute. @param args Command-line arguments. @return Exit status code.
3309 Parses command-line arguments, updates configuration, returns remainder. @param conf Hadoop configuration object. @param args Command-line argument list.
3310 Executes a Hadoop tool with given configuration and arguments. @param conf Hadoop configuration. @param argv Command-line arguments. @return Exit status code.
3311 Main entry point. Runs the CredentialShell tool. @param args Command-line arguments passed to the tool.
3312 Main entry point for the KeyShell application. Runs the KeyShell tool with configuration and arguments.
3313 Runs a Hadoop tool with configuration and arguments. @param tool The tool to execute. @param args Command-line arguments. @return Exit status code.
3314 Extracts command options from arguments, parsing them. @param conf Hadoop configuration. @param args Command-line arguments. @return List of parsed command options.
3315 Main method to execute Hadoop tools and handle exceptions. @param argv Command-line arguments passed to the tool.
3316 Main method to execute FsShell with provided arguments. @param argv Command-line arguments for the FsShell.
3317 Main entry point for the application; executes CLI tool. @param args Command-line arguments passed to the tool.
3318 Main method: Runs FindClass tool, handles exceptions, exits.
3319 Launches a service, handles exceptions, and exits. @param args Command-line arguments passed to the service.
3320 Launches the service using command-line arguments. @param args Command-line arguments for the service.
3321 Launches a service using provided arguments. @param args Command-line arguments for the service.
