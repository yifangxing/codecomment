1 Cancels a delegation token. @param token Token to cancel @param canceller User attempting to cancel the token @return TokenIdent of the canceled token @throws IOException if operation fails
2 Retrieves all groups for a specified user. Combines base Unix groups with netgroups. @param user username to fetch group information for @return List of group names including both Unix and netgroups @throws IOException if an I/O error occurs during execution
3 Extracts files from a tar archive. @param inFile the input tar file @param untarDir the target directory for extraction @throws IOException if an I/O error occurs during extraction
4 Changes file or directory permissions. @param filename path to the file or directory @param perm permission string (e.g., "755") @return exit code of the shell command execution @throws IOException if an I/O error occurs during execution
5 Sets file readability. @param f the file to modify @param readable true if the file should be readable, false otherwise @return true if operation is successful, false otherwise
6 Sets file writable status. @param f File to modify permissions for @param writable desired writable status @return true if operation successful, false otherwise
7 Sets file executable permission. @param f File object to modify @param executable true to set as executable, false otherwise @return true if successful, false otherwise
8 Loads file permission information using native I/O if available, otherwise falls back to non-native I/O.
9 Sets the owner and/or group of a file. @param p Hadoop Path object representing the target file @param username new user owner (can be null) @param groupname new group owner (can be null) @throws IOException if setting ownership fails
10 Sets file permissions for a given file. @param f the target file @param permission desired file permissions @throws IOException if operation fails
11 Caches netgroups by adding their users to the cache. @param groups list of netgroup names (with '@' for netgroups) @throws IOException if command execution fails
12 Dumps all tokens associated with a user. @param ugi UserGroupInformation object containing user credentials
13 Logs user information and tokens if debug is enabled. @param log Logger instance for logging @param caption Description of the log entry @param ugi UserGroupInformation object containing user details
14 Validates directory existence and permissions. @param localFS LocalFileSystem instance @param dir Path to the directory @param expected Expected FsPermission for the directory @throws DiskErrorException if directory access issues are found @throws IOException if an I/O error occurs
15 Validates directory existence and permissions with disk I/O checks. @param localFS LocalFileSystem instance @param dir Path to the directory @param expected Expected FsPermission for the directory @throws DiskErrorException if directory access issues are found @throws IOException if an I/O error occurs
16 Lists file statuses for multiple paths using default filter. @param files array of file paths to check @return array of FileStatus objects filtered by default criteria @throws AccessControlException if access is denied @throws FileNotFoundException if a path does not exist @throws IOException if an I/O error occurs
17 Retrieves the total used space of the root directory. @return Total used space as a long value @throws IOException if an I/O error occurs or not in mountpoint
18 Retrieves block locations for a file within an HAR archive. @param file FileStatus object representing the file @param start Starting offset of the range @param len Length of the range @return Array of BlockLocation objects @throws IOException if an I/O error occurs
19 Opens a file for reading within the HAR archive. @param f file path to open @param bufferSize buffer size for reading @return FSDataInputStream for the specified file @throws FileNotFoundException if the path is not a file @throws IOException if an I/O error occurs
20 Opens a file for reading with checksum verification. @param f the path of the file to open @param bufferSize size of the buffer used for reading @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs @throws UnresolvedLinkException if a symlink could not be resolved
21 Opens a file for reading with optional checksum verification. @param f Path to the file within the filesystem @param bufferSize size of the buffer used for reading @return FSDataInputStream instance for reading the file @throws IOException if an I/O error occurs
22 Renames a file or directory and its associated checksum file. Handles both files and directories, ensuring checksum integrity. @param src source path to rename @param dst destination path for renaming
23 Renames a file from source to destination. Handles relative paths and checks for different file systems. @param src source path @param dst destination path @param options optional Rename options (e.g., OVERWRITE) @throws IOException if an I/O error occurs
24 Populates a list with file statuses of children in the HAR archive. @param parent HarStatus object representing the parent directory @param statuses List to store FileStatus objects of child entries @throws IOException if an I/O error occurs during status retrieval
25 Retrieves file status from HAR archive. @param f path of the file within the archive @return FileStatus object with metadata @throws IOException if an I/O error occurs
26 Retrieves the FileStatus of a specified SFTP file. @param client active SFTP channel @param file path to the file @return FileStatus object or throws FileNotFoundException if not found
27 Retrieves FileStatus for a specified FTP file. @param client FTPClient connected to the server @param file Path of the file to retrieve status for @return FileStatus object representing the file's metadata @throws IOException if an I/O error occurs or file is not found
28 Constructs a MetricsSystemImpl with no prefix. Delegates to constructor with null prefix.
29 Initializes a new MutableRollingAverages instance with the given metric name. @param metricValueName name of the metric to track
30 Replaces the current scheduled task with a new one. @param windows number of time windows for rolling averages @param interval task execution interval @param timeUnit time unit for the interval
31 Rechecks electability based on health state and schedules recheck if necessary. Handles different health states to join or quit elections appropriately.
32 Handles re-joining election after failing to become active. Calls reJoinElection with a predefined sleep time.
33 Processes ZooKeeper watch events for leader election. Handles connection state changes and node updates. @param zk the ZooKeeper client instance @param event the WatchedEvent received
34 Creates a socket address with hostname resolution. @param target string representation of the target @param defaultPort default port to use if not specified in target @return InetSocketAddress with resolved IP or unresolved if fails
35 Handles authentication using delegation tokens. Checks authorization header and configures schemes for management operations. @param request HTTP servlet request object @param response HTTP servlet response object @return AuthenticationToken if authentication is successful, null otherwise @throws IOException if I/O error occurs during token processing @throws AuthenticationException if authentication fails
36 Checks if a configuration key exists. @param name original configuration property name @return true if the key or its deprecated replacements exist, false otherwise
37 Retrieves raw configuration value by key, handling deprecations. @param name original configuration property name @return raw configuration value or null if not found
38 Sets a configuration property with source information. Handles deprecation and alternative keys. @param name the configuration key @param value the configuration value @param source the source of the configuration (null if programmatically set)
39 Unsets a configuration property by removing it from both the overlay and main properties. Handles deprecated keys and alternative names if applicable. @param name the configuration key to unset
40 Returns virtual memory size. Refreshes metrics if needed before returning value. @return Virtual memory size in bytes
41 Retrieves physical memory size in bytes. Calls refreshIfNeeded to ensure metrics are up-to-date. @return Memory size in bytes
42 Retrieves available virtual memory size. Refreshes metrics if needed before returning value. @return Available virtual memory in bytes
43 Retrieves available physical memory size. Refreshes metrics if needed before returning the value. @return Available physical memory in bytes
44 Returns the number of processors. Refreshes metrics if needed and returns updated processor count.
45 Retrieves CPU frequency. Refreshes metrics if needed before returning current CPU frequency in kHz. @return CPU frequency in kHz
46 Returns the cumulative CPU time in milliseconds. Refreshes metrics if needed before returning the value. @return cumulative CPU time in ms
47 Returns CPU usage percentage. Refreshes metrics if needed, then calculates average per processor. @return CPU usage as a float percentage or -1 if unavailable
48 Retrieves the percentage of CPU cores used. Refreshes metrics if needed, then calculates and returns CPU usage as a percentage. @return CPU usage percentage or -1 if unavailable
49 Returns network bytes read. Refreshes metrics if needed before returning value. @return Total network bytes read since system boot
50 Returns the total network bytes written. Refreshes metrics if needed before returning the value. @return Network bytes written as a long
51 Refreshes the netgroup cache by clearing existing mappings and caching new ones. @throws IOException if command execution fails during refresh
52 Updates the filesystem status for a given mount point. @param viewFileSystem the ViewFileSystem instance @param mountPointMap map of MountPoint to FsStatus @param mountPoint the specific mount point to update @param path the path associated with the mount point @throws IOException if an I/O error occurs during status retrieval
53 Lists file statuses in a HAR archive. @param f path to the directory or file in the archive @return array of FileStatus objects representing entries in the archive @throws IOException if an I/O error occurs during listing
54 Retrieves file link status. @param f path to the file @param dereference whether to follow symbolic links @return FileStatus object with file details @throws IOException if an I/O error occurs
55 Retrieves file status for a given path in the virtual filesystem. @param f path of the file or directory to check @return FileStatus object representing the file's metadata @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnresolvedLinkException if there is an unresolved symlink @throws IOException for other I/O errors
56 Lists file statuses for a given path. @param f the path to list files in @return array of FileStatus objects representing the files and directories
57 Checks if a file exists on the SFTP server. @param channel active SFTP channel @param file path to the file @return true if file exists, false otherwise; throws IOException for other errors
58 Retrieves and constructs the FileStatus for a given SFTP file. @param channel active SFTP channel @param sftpFile LsEntry representing the SFTP file @param parentPath parent directory path @return FileStatus object @throws IOException if an error occurs during retrieval
59 Checks if a specified SFTP file is not a directory. @param channel active SFTP channel @param file path to the file @return true if the file exists and is not a directory, false otherwise @throws IOException if an I/O error occurs or file check fails
60 Checks if a file exists on the FTP server. @param client FTPClient connected to the server @param file Path of the file to check @return true if the file exists, false otherwise
61 Lists file statuses in a given directory on an FTP server. @param client the FTPClient instance connected to the server @param file the path of the directory to list @return array of FileStatus objects representing files and directories @throws IOException if an I/O error occurs during listing
62 Checks if a specified file exists and is regular. @param client connected FTPClient instance @param file Path of the file to check @return true if the file is regular, false if not found or an error occurs
63 Initializes CBZip2InputStream for decompression. @param in input stream containing BZip2 compressed data @param readMode mode of reading (CONTINUOUS or BYBLOCK) @throws IOException if I/O error occurs during initialization
64 Calculates the number of bytes processed until the next BZip2 marker. @param in input stream containing BZip2 compressed data @return Number of bytes read from the stream @throws IOException if I/O error occurs during processing
65 Processes result of ZooKeeper node creation. Handles success, existence, and error cases for leader election.
66 Processes ZooKeeper operation result for lock node. Handles leader election and state transitions based on result code. @param rc ZooKeeper result code @param path affected path in ZooKeeper @param ctx context object associated with the request @param stat statistics of the znode
67 Creates a socket address with default port. @param target string representation of the target @return InetSocketAddress with resolved IP or unresolved if fails
68 Parses network address specifications into a list of InetSocketAddress instances. @param specs comma or space-separated address strings @param defaultPort default port to use if not specified in specs @return List of InetSocketAddress objects
69 Builds a delegation token service name from URI. @param uri target URI for the service @param defPort default port to use if not specified in URI @return String representation of the delegation token service or null if authority is missing
70 Generates an XML document of configuration properties. Handles deprecation and appends properties to the XML. @param propertyName specific property to include, or null for all @param redactor optional redactor for sensitive values @return XML Document containing configuration data @throws IOException if XML creation fails @throws IllegalArgumentException if a specified property is not found
71 Substitutes variables in a configuration expression. @param expr input string with variable placeholders @return string with substituted values or original if no substitutions made
72 Applies configuration changes from HTTP request. @param out PrintWriter for outputting change results @param reconf Reconfigurable object to apply changes to @param req HttpServletRequest containing user input @throws ReconfigurationException if an error occurs during reconfiguration
73 Sets a configuration property without source information. @param name the configuration key @param value the configuration value
74 Sets a configuration property with logging. Logs the change and ensures sensitive values are redacted. @param name the configuration key @param value the configuration value @param source the source of the configuration (null if programmatically set)
75 Recursively deletes a directory and its contents. @param dir the directory to delete @param tryGrantPermissions whether to attempt granting permissions before deletion @return true if successfully deleted, false otherwise
76 Returns the number of CPU cores. Utilizes getNumProcessors to fetch and return the core count.
77 Retrieves the filesystem status for a given path. @param fileSystem the FileSystem to check @param path the path within the filesystem @return Map of MountPoint to FsStatus @throws IOException if an I/O error occurs or path is not in a mount point
78 Retrieves file status, resolving symlink paths. @param f path to the file @return FileStatus object with resolved symlink target if applicable @throws IOException if an I/O error occurs
79 Renames a file on the SFTP server. @param channel active SFTP channel @param src source path of the file to rename @param dst destination path for the file @return true if renaming is successful, false otherwise
80 Lists status of files and directories in a specified path. @param client SFTP channel for file operations @param file path to list @return array of FileStatus objects @throws IOException if an error occurs during listing
81 Creates directories recursively on the SFTP server. @param client active SFTP channel @param file path to create directory at @param permission file permissions for new directory @return true if directory creation succeeded, false otherwise @throws IOException if an I/O error occurs or directory cannot be created
82 Retrieves file statuses matching a given path pattern. @param pathPattern pattern to match file paths @return array of FileStatus objects or null if no matches found @throws IOException for I/O errors during processing
83 Retrieves file statuses matching a given pattern and filter. @param pathPattern the path pattern to match files @param filter the filter to apply to matched paths @return array of FileStatus objects or null if no matches found @throws IOException for I/O errors during processing
84 Executes a globbing operation to find files matching the given pattern. @param pathPattern the file path pattern to match @return array of FileStatus objects or null if no matches found @throws IOException for I/O errors during processing
85 Retrieves file statuses matching a given pattern and filter. @param pathPattern Pattern to match files against @param filter Filter to apply when matching files @return Array of FileStatus objects or null if no matches found @throws IOException for I/O errors during processing
86 Renames a file or directory on the FTP server. @param client connected FTPClient instance @param src source path of the file/directory to rename @param dst destination path for the renamed file/directory @return true if rename is successful, false otherwise @throws IOException if an I/O error occurs or conditions are not met
87 Deletes a file or directory on an FTP server. @param client FTPClient connected to the server @param file Path of the file or directory to delete @param recursive true to delete directories recursively, false otherwise @return true if deletion is successful, false otherwise @throws IOException if an I/O error occurs or directory is not empty and not recursive
88 Creates directories recursively on the FTP server. @param client connected FTPClient instance @param file Path of the directory to create @param permission FsPermission for the new directory @return true if all directories were created, false otherwise @throws IOException if an I/O error occurs
89 Normalizes IP:port to hostname:port. @param ipPort string in "IP:port" format @return normalized "hostname:port" or original if invalid
90 Retrieves the service address from a given token. @param token security token with associated service @return InetSocketAddress of the token's service or unresolved if fails
91 Builds a token service from a URI. @param uri URI containing authority information @return Text object with formatted token service
92 Returns the canonical service name for the file system. Uses delegation token service name if child file systems are not present. @return String representation of the service name or null
93 Constructs the canonical service name using the URI and default port. @return String representation of the delegation token service or null if authority is missing
94 Substitutes common variables in a configuration expression. @param expr input string with variable placeholders @return string with substituted values or original if no substitutions made
95 Retrieves configuration value by key, handling deprecation and variable substitution. @param name configuration property name @return resolved configuration value or null if not found
96 Retrieves a configuration property value. Handles deprecation and variable substitution. @param name property key @param defaultValue default value if not found @return the resolved property value or default
97 Marks a configuration key as optional and sets its value. @param key the configuration key @param value the configuration value @return the current builder instance
98 Marks a configuration key as mandatory and sets its value. @param key the configuration key @param value the configuration value @return the current builder instance
99 Sets the default file system URI in configuration. @param conf Configuration object to update @param uri Default file system URI
100 Adds a link to the configuration for a specified mount table. @param conf Hadoop Configuration object @param mountTableName name of the mount table @param src source path for the link @param target target URI for the link
101 Adds a link merge slash configuration for a specified mount table. @param conf Configuration object to update @param mountTableName name of the mount table @param target URI representing the target location
102 Adds a fallback link to the configuration. @param conf Hadoop Configuration object @param mountTableName name of the mount table @param target URI representing the fallback target
103 Adds link merge configuration for a mount table. @param conf Hadoop configuration object @param mountTableName name of the mount table @param targets array of target URIs to be merged
104 Adds a link configuration for an NFS mount table. @param conf Hadoop configuration object @param mountTableName name of the mount table @param src source path for the link @param settings additional settings for the link @param targets target paths for the link
105 Adds a regex-based link in Hadoop's view file system configuration. @param conf Configuration object to update @param mountTableName name of the mount table @param srcRegex source path regex pattern @param targetStr target path string @param interceptorSettings optional interceptor settings
106 Sets the home directory configuration for a specified mount table. @param conf Configuration object to update @param mountTableName name of the mount table @param homedir home directory path (must start with '/')
107 Sets the umask in the configuration. @param conf Configuration object to update @param umask FsPermission representing the umask value
108 Sets a list of codec classes in the configuration. @param conf Configuration object to update @param classes List of codec classes to set
109 Sets default compression type for sequence files. @param job Hadoop configuration object @param val desired compression type
110 Retrieves proxy user configuration from FilterConfig. @param filterConfig the web application's filter configuration @return Configuration object containing proxy user settings
111 Initializes the CredentialShell with command-line arguments. Parses commands and sets configurations, prints usage if no args. @param args command-line arguments @return 0 on success, 1 on error
112 Sets an integer configuration property. @param name the configuration key @param value the integer configuration value
113 Sets a configuration property with a long value. @param name the configuration key @param value the long configuration value to be converted to string
114 Sets a configuration property with a float value. @param name the configuration key @param value the float configuration value
115 Sets a configuration property as a double. @param name the configuration key @param value the double configuration value
116 Sets a configuration property as a boolean. @param name the configuration key @param value the boolean value to set
117 Sets a time duration configuration property. @param name the configuration key @param value the duration value @param unit the time unit (e.g., seconds, minutes)
118 Sets storage size with unit. @param name configuration key @param value storage size value @param unit storage unit (e.g., MB, GB)
119 Sets a configuration property with a regex pattern. @param name the configuration key @param pattern the regex pattern to set
120 Sets configuration property from array of strings. @param name config key @param values array of string values to concatenate
121 Sets a configuration property with a host:port value. @param name the configuration key @param addr InetSocketAddress object containing host and port information
122 Sets a configuration property with class information. @param name configuration key @param theClass class to be configured @param xface interface that the class must implement
123 Recursively deletes a directory and its contents without attempting to grant permissions. @param dir the directory to delete @return true if successfully deleted, false otherwise
124 Deletes all contents of a directory. @param dir the directory whose contents to delete @param tryGrantPermissions whether to attempt granting permissions before deletion @return true if all contents are successfully deleted, false otherwise
125 Lists file statuses for a given directory. @param f the Path object representing the directory @return array of FileStatus objects @throws IOException if an I/O error occurs or file does not exist
126 Retrieves file status for a given path, handling symbolic links. @param f path to the file or directory @return FileStatus object with details @throws IOException if an I/O error occurs
127 Deletes a file or directory on the SFTP server. @param channel active SFTP channel @param file path of the file or directory to delete @param recursive true if directories should be deleted recursively @return true if deletion is successful, false otherwise @throws IOException if an error occurs during deletion
128 Creates an input stream for reading BZip2 compressed data. @param seekableIn input stream that supports seeking @param decompressor decompressor instance (not used in this method) @param start starting position in the input stream @param end ending position in the input stream @param readMode mode of reading (CONTINUOUS or BYBLOCK) @return SplitCompressionInputStream for BZip2 data @throws IOException if I/O error occurs or seekableIn is not Seekable
129 Adds metrics for fields annotated with @Metric. @param source object containing the field to be instrumented @param field field to be checked and possibly instrumented
130 Retrieves configuration value for a specific storage type. @param conf Hadoop configuration object @param t storage type @param name configuration property name @return resolved configuration value or null if not found
131 Determines FTP transfer mode from configuration. @param conf Hadoop configuration object @return Transfer mode as an integer (default is BLOCK_TRANSFER_MODE)
132 Sets FTP client data connection mode based on configuration. @param client FTPClient instance to configure @param conf Configuration object containing settings @throws IOException if an I/O error occurs
133 Retrieves the home directory value for a specified mount table. @param conf Hadoop configuration object @param mountTableName name of the mount table @return home directory path or null if not found
134 Retrieves and parses the user mask from configuration. @param conf Hadoop configuration object @return FsPermission object representing the umask
135 Retrieves a list of CompressionCodec classes. @param conf Hadoop configuration object @return List of CompressionCodec classes configured or discovered via service loading
136 Retrieves default compression type for sequence files. @param job Configuration object containing settings @return CompressionType enum value, defaulting to RECORD if not specified
137 Converts a security property to a string representation. @param property name of the security property @return formatted string with property and its values or "<NOT SET>" if not found
138 Validates Hadoop token files by checking system properties and configuration. @param conf Hadoop configuration settings
139 Locates and initializes the keystore. Reads password from environment or file, loads keystore, handles exceptions.
140 Retrieves local host name using configuration or system defaults. @param conf Hadoop configuration object, optional @return Local host name as a String @throws UnknownHostException if host resolution fails
141 Retrieves the client principal for a given protocol and configuration. @param protocol the class representing the protocol @param conf the Hadoop configuration object @return client principal string or null if not found
142 Retrieves and trims configuration value by key. @param name configuration property name @return trimmed configuration value or null if not found
143 Sets configuration property if not already set. @param name configuration key @param value configuration value to set
144 Retrieves and converts a time duration configuration value. @param name configuration property name @param defaultValue default time duration value if not found @param defaultUnit default time unit for the default value @param returnUnit target time unit for conversion @return converted time duration in the target unit or default value if not set
145 Retrieves and converts storage size from configuration. @param name config key for storage size @param defaultValue default value if key is not found @param targetUnit unit to convert the storage size to @return storage size in the specified target unit
146 Retrieves and converts a storage size configuration value. @param name config property name @param defaultValue default value if not found or invalid @param targetUnit unit to convert the storage size to @return converted storage size in target units, or default value
147 Retrieves a compiled regex pattern from configuration. @param name config key for the regex pattern @param defaultValue fallback pattern if invalid or missing @return compiled Pattern object or default if not found/invalid
148 Retrieves and splits a configuration value into a collection of strings. @param name configuration property name @return collection of substrings or empty list if value is null
149 Retrieves and splits configuration values by key. @param name config property name @return array of substrings from the resolved config value
150 Retrieves array of strings for a configuration key. @param name config property name @param defaultValue default values if key is not found @return array of strings from config or default values
151 Retrieves and trims a collection of strings from configuration. @param name config property name @return Collection of trimmed strings or empty list if null
152 Retrieves and splits configuration value by key. @param name configuration property name @return array of trimmed substrings from the resolved configuration value or empty array if not found
153 Retrieves and splits a configuration property into trimmed strings. @param name configuration property name @param defaultValue default values to use if the property is not found @return array of trimmed strings from the configuration or default values
154 Retrieves configuration properties with a specified prefix. @param confPrefix prefix for filtering configuration keys @return Map of filtered configuration key-value pairs
155 Appends a configuration property as JSON. @param jsonGen JSON generator to write the property @param config Configuration object containing properties @param name Property key to append @param redactor Redactor for sensitive values @throws IOException on JSON writing errors
156 Reconfigures a property if it is reconfigurable. @param property name of the property to reconfigure @param newVal new value for the property @throws ReconfigurationException if the property cannot be reconfigured
157 Retrieves and logs configuration value by key. @param name configuration property name @return resolved configuration value or null if not found
158 Retrieves the default mount table name from configuration. @param conf Hadoop configuration object @return default mount table name or predefined constant if not found
159 Checks and loads the Bzip2 native library based on configuration. @param conf Hadoop configuration object @return true if native Bzip2 is loaded, false otherwise
160 Retrieves the default socket factory from configuration. @param conf Hadoop configuration object @return SocketFactory instance or default if not configured
161 Retrieves username from configuration. @param conf Configuration object @return Username string or default if not found
162 Prints configuration option value. @param option configuration property key
163 Initializes TruststoreKeystore with configuration settings. @param conf Configuration object containing security properties
164 Spawns a thread to automatically renew Kerberos credentials. @param force if true, forces renewal regardless of conditions
165 Initializes KeyProvider with configuration settings. @param conf Configuration object containing key management settings
166 Retrieves and parses ZooKeeper ACLs from configuration. @param conf configuration object containing ZK settings @return List of ACL objects for ZooKeeper access control @throws IOException if configuration resolution or parsing fails
167 Retrieves hash type from configuration. @param conf Hadoop configuration object @return integer representing the hash type or INVALID_HASH if unknown
168 Retrieves an EnumSet of configuration property values. @param key unique identifier for the configuration setting @param enumClass class of the enum type @param ignoreUnknown flag to ignore unknown values @return EnumSet containing parsed enum constants
169 Retrieves and parses an integer range from configuration. @param name property key @param defaultValue default value if not found @return IntegerRanges object representing the parsed ranges
170 Retrieves a configuration property value with logging. Logs the property key and values, redacting sensitive information. @param name property key @param defaultValue default value if not found @return the resolved property value or default
171 Marks a configuration key as optional and sets its boolean value. @param key the configuration key @param value the boolean configuration value @return the current builder instance
172 Marks a configuration key as optional and sets its double value. @param key the configuration key @param value the double value to set @return the current builder instance
173 Marks a configuration key as mandatory with a boolean value. @param key the configuration key @param value the boolean configuration value @return the current builder instance
174 Marks a configuration key as mandatory with a double value. @param key the configuration key @param value the double value to set @return the current builder instance
175 Sets default file system URI in configuration. @param conf Configuration object to update @param uri Default file system URI string
176 Adds a link configuration for an NFS mount table with default settings. @param conf Hadoop configuration object @param mountTableName name of the mount table @param src source path for the link @param settings additional settings for the link (default if null) @param targets target URIs for the link
177 Sets the index interval for MapFiles. @param conf Hadoop configuration object @param interval number of key-value pairs between index entries
178 Sets the IPC ping interval in configuration. @param conf Configuration object to update @param pingInterval new ping interval value in milliseconds
179 Sets the connection timeout for IPC client. @param conf configuration object @param timeout timeout value in milliseconds
180 Sets whether nested mount points are supported. @param conf Hadoop configuration object @param isNestedMountPointSupported flag indicating support for nested mount points
181 Marks a configuration key as optional and sets its string values. @param key config key to mark as optional @param values array of string values for the key @return current builder instance
182 Marks a configuration key as mandatory and sets its string values. @param key the configuration key to mark as mandatory @param values array of string values for the key @return the current builder instance
183 Updates the connection address for a given configuration key. @param name the configuration key @param addr initial InetSocketAddress object @return resolved InetSocketAddress suitable for connection
184 Sets the RPC protocol engine in configuration. @param conf configuration object @param protocol interface class of the protocol @param engine implementation class of the protocol engine
185 Deletes a file or directory. @param p the path to delete @param recursive whether to delete directories recursively @return true if successfully deleted, false otherwise @throws IOException if an I/O error occurs
186 Deletes all contents of a directory without attempting to grant permissions. @param dir the directory whose contents to delete @return true if all contents are successfully deleted, false otherwise
187 Retrieves file status for a given path. @param f the file path to check @return FileStatus object with detailed information about the file @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws IOException if an I/O error occurs
188 Lists file statuses for a given path. @param f the input file path @return array of FileStatus objects representing files and directories @throws AccessControlException if access is denied @throws FileNotFoundException if the path does not exist @throws IOException if an I/O error occurs
189 Creates a file with default permissions. @param f file path @param overwrite flag to overwrite existing files @param bufferSize buffer size for data transfer @param replication number of replications for the file @param blockSize block size for the file @param progress progress monitor @return FSDataOutputStream for writing to the file
190 Retrieves the user mask for file permissions. Uses cached value if available, otherwise fetches from configuration. @return FsPermission object representing the umask
191 Creates a BlockFactory based on the specified type. @param keyToBufferDir unique identifier for the buffer directory @param configuration Hadoop configuration settings @param name factory type (e.g., DATA_BLOCKS_BUFFER_ARRAY) @return configured BlockFactory instance or throws IllegalArgumentException if unsupported
192 Initializes the CompressionCodecFactory with codecs from configuration or defaults. @param conf Hadoop configuration object
193 Retrieves and trims configuration value by key, falling back to default if not found. @param name configuration property name @param defaultValue value to return if the key is not set or is empty @return trimmed configuration value or provided default
194 Retrieves an integer configuration value by name. @param name configuration property name @param defaultValue default integer value if not found or invalid @return parsed integer value or default if conversion fails
195 Retrieves a long configuration value by name. @param name configuration property name @param defaultValue default value if not found or invalid @return parsed long value or default if conversion fails
196 Retrieves configuration property as a byte size in long. @param name config property name @param defaultValue default value if property not found @return parsed byte size or default value
197 Retrieves a configuration property as a float. @param name configuration property name @param defaultValue default float value if property is not found or invalid @return parsed float value or default if parsing fails
198 Retrieves and parses a configuration property as a double. @param name configuration property name @param defaultValue default value to return if property is not found or invalid @return parsed double value or default if parsing fails
199 Retrieves a boolean configuration property. @param name property name @param defaultValue default boolean value if not found or invalid @return parsed boolean value or default if invalid
200 Retrieves and loads a class by configuration key. @param name config property name for the fully qualified class name @param defaultValue default Class to return if not found or fails to load @return loaded Class object or default value
201 Sets configuration property to boolean value if not already set. @param name configuration key @param value boolean value to set
202 Retrieves and converts a time duration configuration value. @param name configuration property name @param defaultValue default time duration value if not found @param unit time unit for the default value and conversion @return converted time duration in the specified unit or default value if not set
203 Retrieves SASL properties for a given configuration key. @param conf Configuration object containing settings @param configKey key for the SASL property @param defaultQOP default Quality of Protection setting @return Map of SASL properties with QOP and server auth enabled
204 Retrieves and parses integer values from configuration by key. @param name configuration property name @return array of integers parsed from the resolved configuration value or empty array if not found
205 Retrieves an array of Class objects by configuration property name. @param name configuration property name @param defaultValue default classes to return if property is not found @return array of Class objects or default values if none are found
206 Retrieves a file from a directory specified by configuration property. @param dirsProp configuration property name for directories @param path relative file path @return File object if directory is found and accessible, throws IOException otherwise
207 Initializes the SerializationFactory with configurations. @param conf Configuration object for serialization settings
208 Retrieves filter parameters from configuration. @param conf Configuration object containing settings @param confPrefix Prefix for filtering configuration keys @return Map of filtered configuration key-value pairs
209 Retrieves filter parameters from configuration. @param conf Configuration object containing settings @param confPrefix Prefix for filtering parameter keys @return Map of filtered configuration parameters
210 Propagates configuration options to a file system builder. @param builder FSBuilder instance to configure @param conf Configuration object containing properties @param prefix Prefix for filtering configuration keys @param mandatory Flag indicating if options are mandatory or optional
211 Generates an HTML form to display and apply configuration changes. @param out PrintWriter for outputting the HTML content @param reconf Reconfigurable object whose configuration is being modified
212 Adds a link to the default mount table in Hadoop configuration. @param conf Hadoop Configuration object @param src source path for the link @param target target URI for the link
213 Adds a link merge slash configuration using the default mount table. @param conf Hadoop configuration object to update @param target URI representing the target location
214 Adds a fallback link to the default mount table in Hadoop configuration. @param conf Hadoop Configuration object @param target URI representing the fallback target
215 Adds link merge configuration using default mount table. @param conf Hadoop configuration object @param targets array of target URIs to be merged
216 Sets home directory configuration using default mount table. @param conf Hadoop configuration object to update @param homedir home directory path (must start with '/')
217 Retrieves home directory value using default mount table. @param conf Hadoop configuration object @return home directory path or null if not found
218 Creates an encoder for erasure coding. @param conf Hadoop configuration settings @param options codec-specific options @return ErasureEncoder object or throws RuntimeException if creation fails
219 Creates an erasure decoder for a given configuration and options. @param conf Hadoop configuration settings @param options codec-specific options @return ErasureDecoder object or throws RuntimeException if creation fails
220 Determines the appropriate Bzip2 compressor class. @param conf Hadoop configuration object @return Bzip2Compressor if native library is loaded, otherwise BZip2DummyCompressor
221 Determines the appropriate decompressor class for Bzip2. @param conf Hadoop configuration object @return Bzip2Decompressor if native library is loaded, otherwise BZip2DummyDecompressor
222 Returns a Bzip2 decompressor based on native library availability. @param conf Hadoop configuration object @return Bzip2Decompressor if native library is loaded, otherwise BZip2DummyDecompressor
223 Retrieves a SocketFactory for a given class from configuration. @param conf Hadoop configuration object @param clazz the class requiring a socket factory @return configured SocketFactory or default if not specified
224 Constructs a HadoopZookeeperFactory with basic security configurations. @param zkPrincipal ZooKeeper principal for authentication @param kerberosPrincipal Kerberos principal for secure communication @param kerberosKeytab Path to the keytab file for Kerberos authentication
225 Initializes SSL/TLS configuration. @throws GeneralSecurityException on security errors @throws IOException on I/O errors
226 Checks if the authentication method is SIMPLE. @param conf Configuration object containing security settings @return true if authentication method is SIMPLE, false otherwise
227 Sets Kerberos configuration based on authentication method. @param conf Configuration object containing security settings @throws IOException if issues occur during configuration setup
228 Retrieves an instance of CryptoCodec for a given cipher suite. @param conf Hadoop configuration object @param cipherSuite cryptographic cipher suite @return CryptoCodec instance or null if not found
229 Retrieves a Hash instance based on configuration. @param conf Hadoop configuration object @return Hash instance or null if invalid type
230 Builds a FlagSet from configuration. @param enumClass class of the enum type representing flags @param conf configuration object containing settings @param key configuration key for flag values @param ignoreUnknown whether to ignore unknown flag values @return FlagSet instance with parsed flags
231 Writes configuration properties as XML. @param propertyName specific property to include, or null for all @param out Writer to output the XML data @param config Configuration object containing settings @throws IOException if writing fails @throws IllegalArgumentException if a specified property is not found
232 Dumps configuration to JSON output. @param config Configuration object to dump @param out Writer for JSON output @throws IOException on IO errors
233 Marks a configuration key as optional and sets its integer value. @param key the configuration key @param value the integer configuration value @return the current builder instance
234 Marks a configuration key as optional and sets its float value. @param key the configuration key @param value the float configuration value @return the current builder instance
235 Marks a configuration key as optional and sets its double value. @param key the configuration key @param value the double configuration value @return the current builder instance
236 Marks a configuration key as mandatory with an integer value. @param key the configuration key @param value the integer value to be set @return the current builder instance
237 Creates a MetricsSource from an annotated object. @param source the object to generate metrics from @return MetricsSource for collecting performance metrics
238 Creates a file with default progress monitor. @param f file path @param overwrite flag to overwrite existing files @param bufferSize buffer size for data transfer @param replication number of replications for the file @param blockSize block size for the file @return FSDataOutputStream for writing to the file
239 Creates a file with specified options and permissions. @param f file path to create @param createFlag flags for file creation @param opts additional options for file creation @return FSDataOutputStream for the created file @throws IOException if an I/O error occurs
240 Creates a directory with specified permissions. @param dir path of the directory to create @param permission permissions for the new directory @param createParent flag to create parent directories if needed
241 Main method for compressing or decompressing files using specified codecs. @param args command-line arguments: -in to encode, -out to decode, and file paths
242 Generates server principal by replacing pattern in configuration. @param principalConfig Kerberos principal configuration string @param hostname target hostname for replacement @return modified principal string or original if no change needed @throws IOException if an I/O error occurs while processing
243 Retrieves server principal by replacing hostname pattern. @param principalConfig full principal string @param addr client's InetAddress @return modified principal string or original if no replacement needed @throws IOException if address is null or I/O error occurs
244 Adds a protocol to the server. @param rpcKind type of RPC communication @param protocolClass the protocol class to add @param protocolImpl the implementation object for the protocol @return Server instance for method chaining
245 Creates a KeyProvider instance from the specified configuration key. @param conf Hadoop configuration object @param configKeyName name of the configuration key for the provider URI @return KeyProvider object or null if not found @throws IOException if instantiation fails or the provider is transient
246 Retrieves the default file system URI from configuration. @param conf Hadoop configuration object @return default FileSystem URI with validated scheme @throws IllegalArgumentException if URI has no scheme
247 Validates Kerberos kinit executable path. Checks if kinit command is set, prints its path, and verifies file validity.
248 Retrieves socket address from configuration. @param name config property name for address @param defaultAddress fallback address if not found @param defaultPort default port to use @return InetSocketAddress with resolved IP or unresolved if fails
249 Updates connection address for a specified host property. @param hostProperty key for the host configuration @param addressProperty key for the address configuration @param defaultAddressValue default value if address is not found @param addr initial socket address @return updated InetSocketAddress or original if conditions are not met
250 Builds FSDataInputStream asynchronously with specified file parameters. @return CompletableFuture of FSDataInputStream or throws IOException
251 Builds and opens a FSDataInputStream for a file. Uses either a path or path handle, setting various parameters. @return CompletableFuture containing the input stream or exception @throws IOException if an I/O error occurs
252 Sets configuration from URI and initializes connection pool. @param uriInfo the URI containing host, port, and user info @param conf the Configuration object to set properties @throws IOException if required configuration is missing or invalid
253 Establishes an SFTP connection using configuration properties. @return ChannelSftp object representing the established connection @throws IOException if connection fails or is invalid
254 Initializes buffer size from Hadoop configuration. Retrieves and sets the buffer size for file operations.
255 Opens a file for reading. @param f file path to open @return FSDataInputStream for the specified file @throws IOException if an I/O error occurs
256 Opens an input stream for reading a file with default buffer size. @param fd PathHandle identifying the file to open @return FSDataInputStream for reading file data @throws IOException if an I/O error occurs
257 Appends data to a file. @param f file path to append to @return FSDataOutputStream for writing data @throws IOException if an I/O error occurs
258 Appends data to a file with specified buffer size. @param f path of the file to append to @param appendToNewBlock flag indicating whether to append to a new block @return FSDataOutputStream for appending data @throws IOException if an I/O error occurs
259 Initializes the Cache with configuration settings. @param conf Hadoop Configuration object
260 Initializes a Sorter instance with specified FileSystem, comparator, and configuration. @param fs Hadoop FileSystem for file operations @param comparator comparator for sorting key-value pairs @param keyClass class of the keys to be sorted @param valClass class of the values associated with keys @param conf Configuration object containing sort parameters @param metadata additional metadata for the Sorter instance
261 Creates a LZ4 compression output stream. @param out underlying output stream for compressed data @param compressor compression algorithm to use @return CompressionOutputStream configured for LZ4
262 Creates an input stream for LZ4 decompression. @param in the input stream containing compressed data @param decompressor the decompression algorithm to use @return a BlockDecompressorStream configured with buffer size from settings @throws IOException if I/O error occurs or parameters are invalid
263 Creates an LZ4 decompressor with configured buffer size. @return Lz4Decompressor instance for data decompression
264 Creates a BZip2 compression output stream. @param out underlying output stream for compressed data @param compressor compressor to use for compression @return CompressionOutputStream configured for BZip2
265 Creates a BZip2 decompression input stream. @param in input stream containing compressed data @param decompressor decompressor to use for decompression @return CompressionInputStream for reading decompressed data @throws IOException if I/O error occurs during creation
266 Creates a CompressionOutputStream for Snappy. @param out underlying output stream @param compressor Snappy Compressor instance @return BlockCompressorStream configured with buffer size and overhead
267 Creates a new SnappyCompressor with configured buffer size. @return initialized SnappyCompressor instance
268 Creates a compression input stream for Snappy. @param in underlying input stream with compressed data @param decompressor the decompression algorithm to use @return BlockDecompressorStream configured with buffer size from settings @throws IOException if I/O error occurs or invalid parameters are provided
269 Creates a Snappy decompressor. @return SnappyDecompressor instance with configured buffer size
270 Copies bytes from input to output stream using buffer size from configuration. @param in InputStream to read from @param out OutputStream to write to @param conf Configuration object containing file buffer size @throws IOException if an I/O error occurs
271 Copies bytes from an input stream to an output stream using a buffer size specified in configuration. @param in InputStream to read from @param out OutputStream to write to @param conf Configuration object containing the buffer size setting @param close flag indicating whether to close streams after copying @throws IOException if an I/O error occurs
272 Retrieves buffer size from configuration. @param conf Hadoop configuration object @return buffer size integer value or default if not found
273 Sets the configuration for script execution. @param conf Configuration object containing settings
274 Retrieves buffer size from configuration. @param conf Hadoop configuration object @return buffer size integer value or default if not found
275 Parses the number of priority levels for call queues. @param ns namespace prefix @param conf configuration object @return parsed integer value representing priority levels @throws IllegalArgumentException if numLevels is less than 1
276 Retrieves the RPC timeout value from configuration. @param conf Configuration object containing settings @return Timeout in milliseconds, default if not specified
277 Retrieves the ping interval configuration. @param conf Configuration object containing settings @return Ping interval in milliseconds, default if not found
278 Retrieves the RPC timeout from configuration. @param conf Configuration object @return Timeout value in milliseconds, or 0 if invalid
279 Initializes a LineReader with an input stream and buffer size from configuration. @param in the InputStream to read from @param conf configuration object containing settings @throws IOException if initialization fails
280 Initializes a LineReader with the given input stream and configuration. @param in input stream to read from @param conf configuration object for settings @param recordDelimiterBytes byte array representing record delimiter @throws IOException if an I/O error occurs
281 Retrieves integer configuration value with logging. @param name config property name @param defaultValue default int if not found or invalid @return parsed int value or default if conversion fails
282 Sets FTP client control keep-alive timeout from configuration. @param client FTPClient instance to configure @param conf Configuration object containing settings
283 Retrieves and validates a long configuration value. @param key configuration property name @param defVal default value if not found or invalid @return parsed long value or default if conversion fails
284 Retrieves default block size. @return default block size in bytes, defaulting to 32MB
285 Retrieves a long configuration value by name with logging. @param name configuration property name @param defaultValue default value if not found or invalid @return parsed long value or default if conversion fails
286 Retrieves and logs a configuration property as a float. @param name configuration property name @param defaultValue default float value if property is not found or invalid @return parsed float value or default if parsing fails
287 Initializes trash policy with configuration settings. @param conf file system configuration @param fs file system instance @param home home directory path
288 Checks if nested mount points are supported. @param conf Hadoop configuration object @return true if nested mount points are supported, false otherwise
289 Creates an LZ4 compressor with configured buffer size and compression mode. @return Lz4Compressor instance for data compression
290 Retrieves a MultipleLinearRandomRetry policy from configuration. @param conf configuration object @param retryPolicyEnabledKey key for enabling the retry policy @param defaultRetryPolicyEnabled default enable status @param retryPolicySpecKey key for retry policy specification @param defaultRetryPolicySpec default retry policy specification @return configured RetryPolicy or null if invalid
291 Adds default web applications to the server. Configures log and static resource contexts. @param parent parent context handler collection @param appDir directory containing application files @param conf configuration settings @throws IOException if an I/O error occurs
292 Adds default servlets for web application context. Configures and registers servlets for stack, log level, JMX, and configuration management.
293 Determines if server failover is enabled for a given namespace. @param namespace configuration namespace @param conf Hadoop configuration object @return true if failover is enabled, false otherwise
294 Initializes a new Client for Hadoop IPC communication. @param valueClass class type of writable values @param conf configuration settings for the client @param factory socket factory for creating connections
295 Retrieves client backoff enable status from configuration. @param prefix configuration property prefix @param conf Configuration object @return boolean indicating if client backoff is enabled
296 Checks if client backoff is enabled for a specific namespace and port. @param namespace configuration namespace @param port network port number @param conf Configuration object @return true if backoff is enabled, false otherwise
297 Retrieves password from configuration. @param name config key for the password @return char array of password or null if not found
298 Retrieves a boolean configuration property and logs the access. @param name property name @param defaultValue default boolean value if not found or invalid @return parsed boolean value or default if invalid
299 Retrieves the FileSystem class based on the given scheme. @param scheme file system scheme (e.g., hdfs, s3) @param conf configuration settings @return FileSystem class or throws UnsupportedFileSystemException if not found
300 Creates an AbstractFileSystem instance for a given URI and configuration. @param uri file system URI @param conf configuration settings @return AbstractFileSystem object or throws UnsupportedFileSystemException if unsupported
301 Retrieves the BlockingQueue class for IPC calls. @param namespace configuration namespace @param port server port @param conf configuration object @return Class of BlockingQueue or LinkedBlockingQueue if not specified
302 Retrieves the RpcScheduler class for a given namespace and port. @param namespace configuration namespace @param port service port @param conf Configuration object @return configured RpcScheduler class or default if not found
303 Retrieves and validates a class by configuration key. @param name config property name for the fully qualified class name @param defaultValue default Class to return if not found or fails to load @param xface interface that the returned class must implement @return loaded Class object as subclass of xface or null if not found or invalid
304 Retrieves or creates a FileSystem instance for the given URI and configuration. @param uri URI of the file system @param conf Configuration object @param key Key for caching the FileSystem @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
305 Retrieves the shutdown timeout from configuration. @param conf Configuration object @return Shutdown timeout in milliseconds, clamped to minimum value
306 Retrieves password from credential providers. @param name configuration key name for the password @return character array representing the password or null if not found @throws IOException if an error occurs during retrieval
307 Parses capacity weights from configuration or generates defaults. @param priorityLevels number of priority levels @param ns namespace for configuration key @param conf configuration object @return array of parsed or default capacity weights
308 Retrieves and initializes filter initializers from configuration. @param conf Hadoop configuration object @return array of FilterInitializer objects or null if none found
309 Retrieves instances of a specified class by configuration property name. @param name configuration property name @param xface interface that the classes must implement @return list of instantiated objects or throws exception if class does not implement interface
310 Initializes the Writer for SequenceFile output. Configures serializers, compression, and metadata. @param config Hadoop configuration settings @param outStream output stream to write data @param ownStream flag indicating if the writer owns the output stream @param key class type of the key @param val class type of the value @param compCodec compression codec to use @param meta metadata for the file @param syncIntervalVal interval for synchronization markers @throws IOException if initialization fails
311 Propagates configuration options to a file system builder. @param builder FSBuilder instance to configure @param conf Configuration object containing properties @param prefix Prefix for filtering configuration keys @param mandatory Flag indicating if options are mandatory or optional
312 Propagates configuration options to file system builders with specified prefixes. @param builder FSBuilder instance to configure @param conf Configuration object containing properties @param optionalPrefix Prefix for optional configuration keys @param mandatoryPrefix Prefix for mandatory configuration keys @return Configured FSBuilder instance
313 Main method for checking native library availability. @param args command-line arguments: -a to check all libraries, -h for help
314 Retrieves the compressor type for BZip2. @return Class representing the BZip2 compressor
315 Returns the decompressor type for BZip2. @return Class of the decompressor to be used
316 Creates a decompressor for BZip2 format. @return Decompressor instance based on configuration
317 Constructs a HadoopZookeeperFactory with basic security configurations. Uses default values for Kerberos principal and keytab path. @param zkPrincipal ZooKeeper principal for authentication
318 Looks up group information for a user from LDAP. @param result LDAP search result object for the user @param c LDAP directory context @param goUpHierarchy number of levels to traverse upwards in the group hierarchy @return Set of group names associated with the user @throws NamingException if LDAP operations fail
319 Retrieves a CryptoCodec instance for the specified cipher suite. @param conf Hadoop configuration object @return CryptoCodec instance or null if not found
320 Binds a ServerSocket to an address with default configuration. @param socket ServerSocket to bind @param address target InetSocketAddress @param backlog maximum pending connections queue size @throws IOException if binding fails
321 Dumps a specific configuration property to JSON. @param config Configuration object to dump @param propertyName Property key to dump, or null for all properties @param out Writer for JSON output @throws IOException on IO errors
322 Creates directories with default permissions. @param f Hadoop Path object for the directory @return true if directory creation is successful, false otherwise @throws IOException if an I/O error occurs during creation
323 Retrieves and validates the server's Kerberos principal. @param authType authentication type details @return validated server principal string @throws IOException if configuration or validation fails
324 Decodes a HAR URI by extracting and validating its components. @param rawURI the original HAR URI to decode @param conf Hadoop configuration object @return decoded URI with corrected scheme and authority @throws IOException if URI is invalid or parsing fails
325 Retrieves a FileSystem instance based on configuration. @param conf Hadoop configuration object @return FileSystem object initialized with default URI from config @throws IOException if an I/O error occurs during initialization
326 Initializes the FileSystem with a URI and configuration. @param name file system URI, may be null or without scheme @param conf Hadoop configuration object @throws IOException if initialization fails
327 Creates a new instance of FileSystem using the default URI from configuration. @param conf Hadoop configuration object @return FileSystem instance configured with the default URI @throws IOException if an I/O error occurs during initialization
328 Validates that the given path is compatible with the file system. @param path the path to validate @throws IllegalArgumentException if the path is not valid for this file system
329 Retrieves socket address from configuration with optional host override. @param hostProperty property name for host override @param addressProperty property name for address @param defaultAddressValue fallback address if not found @param defaultPort default port to use @return InetSocketAddress with resolved IP or unresolved if fails
330 Creates a file on the SFTP server. Handles directory creation and overwrites if specified. @param f file path to create @param permission file permissions @param overwrite flag to overwrite existing files @param bufferSize buffer size for data transfer @param replication replication factor (not used) @param blockSize block size (not used) @param progress progress monitor (not used) @return FSDataOutputStream for writing to the created file @throws IOException if creation fails or file exists and overwrite is false
331 Constructs a FutureDataInputStreamBuilderImpl with a file system and path. @param fileSystem Hadoop FileSystem instance @param path file path within the file system
332 Constructs a FutureDataInputStreamBuilderImpl with specified file system and path handle. Initializes buffer size from Hadoop configuration. @param fileSystem mandatory Hadoop file system instance @param pathHandle mandatory file system path handle
333 Opens a file using the appropriate method based on availability. @param instance DynamicWrappedIO instance @param fs FileSystem instance @param status FileStatus object @param readPolicies Read policies for the file @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
334 Checks if appending to the base path is supported. @param fs FileSystem instance to check @return true if append is supported, false otherwise
335 Constructs a Sorter instance with default metadata. @param fs Hadoop FileSystem for file operations @param comparator comparator for sorting key-value pairs @param keyClass class of the keys to be sorted @param valClass class of the values associated with keys @param conf Configuration object containing sort parameters
336 Initializes a Bzip2Compressor with configuration settings. @param conf Hadoop configuration object
337 Reinitializes the Bzip2 compressor with new configuration. @param conf Hadoop configuration object
338 Initializes the sequence file reader. @param tempReader flag indicating temporary reader status @throws IOException if initialization fails or I/O error occurs
339 Reinitializes the compressor with a new configuration. @param conf Hadoop configuration object
340 Prepares to append a value of specified length. @param length expected length of the value (-1 for unknown) @return DataOutputStream for writing the value @throws IOException if an I/O error occurs during preparation
341 Initializes a writable block state for compressed data. @param compressionAlgo algorithm for data compression @param fsOut file system output stream @param fsOutputBuffer buffer for file system output @param conf Hadoop configuration object @throws IOException if an I/O error occurs during initialization
342 Sets configuration for script execution and underlying mapping. @param conf Configuration object containing settings
343 Sets the configuration for script execution. @param conf Configuration object containing settings
344 Creates and returns an Options object initialized with configuration. @param conf Hadoop configuration object @return Options object configured by the provided settings
345 Retrieves the RPC timeout from configuration. @param conf Configuration object @return Timeout value in milliseconds, or ping interval if disabled, or -1 if invalid
346 Establishes an FTP connection using configuration settings. @return connected FTPClient instance @throws IOException if connection or login fails
347 Retrieves and ensures a positive long configuration value. @param key configuration property name @param defVal default value if not found or invalid @return parsed long value, ensuring positivity or default if negative
348 Retrieves server default settings for file system operations. @return FsServerDefaults object with configuration values @throws IOException if an I/O error occurs
349 Retrieves default block size for a file path. @param f file path @return default block size in bytes, defaulting to 32MB
350 Reports and moves a checksum failure to a bad files directory. @param p the path of the corrupted file @param in input stream of the corrupted file @param inPos position in the input stream @param sums input stream of the checksum file @param sumsPos position in the checksum stream @return false, indicating failure to handle the error
351 Constructs a new instance of CachingGetSpaceUsed using a Builder. @param builder configuration builder with path, interval, jitter, and initial used space @throws IOException if canonical path cannot be determined
352 Reads the next record from a sequence file into a buffer. @param buffer DataOutputBuffer to store the record data @return Length of the key or -1 if end reached @throws IOException if an I/O error occurs
353 Retrieves the default retry policy based on configuration. @param conf configuration object @param retryPolicyEnabledKey key for enabling the retry policy @param defaultRetryPolicyEnabled default enable status @param retryPolicySpecKey key for retry policy specification @param defaultRetryPolicySpec default retry policy specification @param remoteExceptionToRetry exception to retry on remotely @return configured RetryPolicy or a no-retry policy if invalid
354 Constructs a new Hadoop IPC client. @param valueClass class type of writable values @param conf configuration settings for the client
355 Retrieves or creates a cached Hadoop IPC client. @param conf configuration settings for the client @param factory socket factory for creating connections @param valueClass class type of writable values @return Client instance from cache or newly created one
356 Excludes incompatible credential providers from configuration. @param config current Hadoop configuration @param fileSystemClass FileSystem class to check compatibility against @return new Configuration with filtered credential providers
357 Retrieves an AbstractFileSystem instance for a specified URI and configuration. @param uri file system URI @param conf configuration settings @return AbstractFileSystem object or throws UnsupportedFileSystemException if unsupported
358 Builds a server instance with configured parameters. Validates required fields and retrieves RPC engine. @throws IOException if an I/O error occurs @throws HadoopIllegalArgumentException if any required parameter is missing
359 Deprecated method to get a TrashPolicy instance. @param conf Hadoop configuration object @param fs FileSystem object @param home Home directory path @return Configured TrashPolicy instance initialized with given parameters
360 Retrieves and initializes a TrashPolicy instance based on configuration. @param conf Hadoop configuration settings @param fs FileSystem instance to manage @return configured TrashPolicy object
361 Creates a new DomainNameResolver instance based on configuration. @param conf system configuration @param configKey key for resolver class in configuration @return configured DomainNameResolver instance
362 Retrieves an instance of SaslPropertiesResolver configured by the given configuration. @param conf Hadoop configuration object @return SaslPropertiesResolver instance or default if not specified
363 Validates SASL properties resolver. @param saslPropsResolverKey configuration key for SASL resolver
364 Retrieves and instantiates the impersonation provider configured in Hadoop. @param conf Hadoop configuration object @return new instance of the configured impersonation provider
365 Shuts down the executor with a timeout. @param conf Configuration object
366 Retrieves password for a given configuration key. @param name configuration key name for the password @return character array representing the password or null if not found @throws IOException if an error occurs during retrieval
367 Creates a raw erasure encoder. @param conf Hadoop configuration object @param codec unique identifier for the codec @param coderOptions options for configuring the coder @return RawErasureEncoder instance or throws exception if creation fails
368 Creates a raw erasure decoder. @param conf Hadoop configuration object @param codec unique identifier for the codec @param coderOptions options for configuring the coder @return RawErasureDecoder instance or throws exception if creation fails
369 Swaps the current call queue with a new one. @param schedulerClass class of the new RpcScheduler @param queueClassToUse type of BlockingQueue to create @param maxSize maximum size of the new queue @param ns namespace for configuration @param conf configuration settings
370 Initializes a FairCallQueue with specified priority levels and capacity. @param priorityLevels number of priority queues @param capacity total queue capacity @param ns namespace for configuration keys @param capacityWeights weights for each priority level's capacity @param serverFailOverEnabled flag to enable server failover @param conf configuration object @throws IllegalArgumentException if priority levels are less than 1
371 Stores an item in Hadoop configuration as a Base64 encoded string. @param conf Hadoop configuration settings @param item object to store @param keyName configuration key for the stored item @throws IOException if serialization fails
372 Loads an object from Hadoop configuration using a Base64 encoded string. @param conf Hadoop configuration settings @param keyName configuration property name @param itemClass class type for deserialization @return deserialized object of type K @throws IOException if deserialization fails
373 Stores an array of objects in a Hadoop configuration as a Base64 encoded string. @param conf Hadoop configuration settings @param items array of objects to store @param keyName configuration key under which to store the array @throws IOException if serialization fails
374 Loads an array of objects from configuration. @param conf Hadoop configuration settings @param keyName configuration property name @param itemClass class type for the array items @return array of deserialized objects or empty if not found @throws IOException if deserialization fails
375 Initializes a SequenceFile Writer. @param fs FileSystem to write to @param conf Hadoop configuration settings @param name Path of the output file @param keyClass Class type of the key @param valClass Class type of the value @param bufferSize Buffer size for data transfer @param replication Number of replications for the file @param blockSize Block size for the file @param progress Progress monitor @param metadata Metadata for the file @throws IOException if initialization fails
376 Copies an object from source to destination using serialization. @param conf Configuration object for serialization settings @param src Source object to copy @param dst Destination object to copy into @return Destination object with copied data @throws IOException if I/O error occurs during serialization/deserialization
377 Deprecated method to propagate configuration options. @param builder FSBuilder instance to configure @param conf Configuration object containing properties @param optionalPrefix Prefix for optional config keys @param mandatoryPrefix Prefix for mandatory config keys @return Configured FSBuilder instance
378 Retrieves group names for a given user from LDAP. @param user username to search for @param goUpHierarchy number of levels to traverse upwards in the group hierarchy @return set of group names associated with the user @throws NamingException if LDAP operations fail
379 Writes configuration data to output in specified format. @param conf Configuration object containing settings @param out Writer for the response output @param format Desired output format ("json" or "xml") @param propertyName Specific property to include, or null for all @throws IOException on IO errors @throws IllegalArgumentException if a specified property is not found @throws BadFormatException if format is not supported
380 Initializes authentication filter in the given container. @param container target FilterContainer for adding the filter @param conf Hadoop configuration object
381 Creates a SASL client for authentication. @param authType type of SASL authentication @return SaslClient object or null if not applicable @throws SaslException on SASL-related errors @throws IOException on I/O errors
382 Creates a FileSystem instance for a given URI and configuration. @param uri file system URI @param conf Hadoop configuration object @return initialized FileSystem object @throws IOException if initialization fails
383 Initializes the ViewFileSystem with a URI and configuration. Sets up inner cache, client-side view, and working directory. @param theUri file system URI @param conf Hadoop configuration object @throws IOException if initialization fails
384 Initializes the FilterFileSystem with a URI and configuration. Ensures proper initialization of the underlying file system. @param name file system URI, may be null or without scheme @param conf Hadoop configuration object @throws IOException if initialization fails
385 Makes a given file path fully qualified. @param path the path to qualify @return fully qualified Path object
386 Resolves and returns the path of a file or directory. @param p the input path to resolve @return Path object representing the resolved location @throws IOException if an I/O error occurs during resolution
387 Validates the given file system path. @param path the path to validate
388 Initializes AvroFSInput with a file context and path. @param fc FileContext for file operations @param p Path to the input file @throws IOException if an I/O error occurs during initialization
389 Copies a file or directory from source to destination. @param src source path @param dst destination path @param deleteSource flag to delete the source after copy @param overwrite flag to overwrite if destination exists @return true if copy is successful, false otherwise @throws IOException for I/O errors
390 Constructs an FSDataInputStreamBuilder. @param fileSystem Hadoop FileSystem instance @param path file path within the file system
391 Constructs a FSDataInputStreamBuilder. @param fileSystem mandatory Hadoop file system instance @param pathHandle mandatory file system path handle
392 Opens a file using the appropriate method based on availability. @param fs FileSystem instance @param status FileStatus object @param readPolicies Read policies for the file @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
393 Attempts to load a keystore from the specified path or its backup. Handles loading, deletion of old backups, and renaming corrupted files. @param path primary path to the keystore file @param backupPath backup path to the keystore file @return FsPermission of the loaded keystore file @throws IOException if an I/O error occurs @throws NoSuchAlgorithmException if the algorithm used is not available @throws CertificateException if there is a problem with certificates
394 Constructs a Sorter instance with specified metadata. @param fs Hadoop FileSystem for file operations @param keyClass class of the keys to be sorted @param valClass class of the values associated with keys @param conf Configuration object containing sort parameters
395 Retrieves a Bzip2 compressor instance based on native library availability. @param conf Hadoop configuration object @return Bzip2Compressor if native library is loaded, otherwise BZip2DummyCompressor
396 Initializes the sequence file reader with specified parameters. @param filename path to the sequence file @param in input stream for reading the file @param start starting position in the file @param length length of data to read @param conf configuration settings @param tempReader flag indicating temporary reader status @throws IOException if initialization fails or I/O error occurs
397 Creates a compression output stream using ZStandard. @param out underlying output stream for compressed data @param compressor compression algorithm to use @return CompressionOutputStream configured with specified settings @throws IOException if native code is not available or input invalid
398 Creates a ZStandard compressor. Checks for native library availability and initializes with config settings. @return ZStandardCompressor instance
399 Creates a compression input stream for ZStandard. @param in the underlying input stream @param decompressor the decompression algorithm to use @return CompressionInputStream for reading compressed data @throws IOException if an I/O error occurs or native code is unavailable
400 Creates a decompressor using ZStandard algorithm. Checks for native library availability and initializes with configured buffer size. @return ZStandardDecompressor instance
401 Prepares a data block for writing. @return BlockAppender instance for appending data @throws IOException if an I/O error occurs or conditions are not met
402 Constructs a ScriptBasedMapping with specified configuration. @param conf Configuration object containing settings for script execution and mapping.
403 Sets configuration and propagates it to raw mapping. @param conf Configuration object for script execution
404 Initializes KeyShell commands and sets configuration options. @param args command-line arguments @return 0 on success, 1 on error or help request
405 Retrieves or creates a ConnectionId for Hadoop IPC. @param addr server address @param protocol communication protocol class @param ticket user credentials @param rpcTimeout timeout in milliseconds @param connectionRetryPolicy retry policy for connections @param conf configuration settings @return configured ConnectionId object
406 Creates a file on the FTP server. @param file path of the file to create @param permission permissions for the new file @param overwrite whether to overwrite if the file exists @param bufferSize buffer size for data transfer @param replication replication factor (not used in FTP) @param blockSize block size (not used in FTP) @param progress progress monitor (not used) @return FSDataOutputStream for writing to the created file @throws IOException if an I/O error occurs or file creation fails
407 Retrieves server default settings for file system operations at the specified path. @param p file path to check defaults for @return FsServerDefaults object with configuration values @throws IOException if an I/O error occurs
408 Creates a file with default settings in the Hadoop file system. @param f file path @param overwrite flag to overwrite existing files @return FSDataOutputStream for writing to the file
409 Creates a file with default settings. @param f file path @param progress progress monitor @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
410 Creates a file with specified replication. @param f file path @param replication number of replications for the file @return FSDataOutputStream for writing to the file
411 Creates a new file with specified replication and buffer size. @param f file path @param replication number of replications for the file @param progress progress monitor @return FSDataOutputStream for writing to the file
412 Creates a file with specified path and buffer size. @param f file path @param overwrite flag to overwrite existing files @param bufferSize buffer size for data transfer @return FSDataOutputStream for writing to the file
413 Creates a file with default replication and block size. @param f file path @param overwrite flag to overwrite existing files @param bufferSize buffer size for data transfer @param progress progress monitor @return FSDataOutputStream for writing to the file
414 Initializes a new FSDataOutputStreamBuilder for the specified file system and path. @param fileSystem Hadoop FileSystem instance @param p Path to the file
415 Reads the next key-value pair from a sequence file. @param key Writable object to store the read key @return true if a key is successfully read, false otherwise @throws IOException if an I/O error occurs or key class mismatch
416 Reads the next key-value pair from a sequence file. @param key the key to be populated with the read data @return the deserialized key object or null if end of file is reached @throws IOException if an I/O error occurs or key class mismatch
417 Constructs a new Invoker for remote procedure calls. @param protocol the RPC protocol class @param connId connection identifier @param conf configuration settings @param factory socket factory for connections @param alignmentContext context for data alignment
418 Retrieves or creates a cached Hadoop IPC client. @param conf configuration settings for the client @return Client instance from cache or newly created one
419 Retrieves or creates a cached Hadoop IPC client. @param conf configuration settings for the client @param factory socket factory for creating connections @return Client instance from cache or newly created one
420 Constructs a new Invoker instance for RPC operations. @param protocol the class representing the RPC protocol @param connId connection ID for the remote server @param conf configuration settings for the client @param factory socket factory for creating connections @param alignmentContext context for alignment purposes
421 Checks if a specific RPC method is supported by the server. @param rpcProxy proxy object for the RPC call @param protocol interface class of the protocol @param rpcKind kind of RPC (e.g., PROTOBUF) @param version protocol version to check @param methodName name of the method to verify @return true if the method is supported, false otherwise
422 Initializes a new Trash instance with specified FileSystem and Configuration. @param fs FileSystem to manage trash operations @param conf Hadoop configuration settings @throws IOException if an I/O error occurs
423 Creates and initializes a NetworkTopology instance using default node factory. @param conf configuration object for network topology @return configured NetworkTopology instance
424 Initializes a new instance of SaslRpcClient. @param ugi UserGroupInformation for authentication @param protocol RPC protocol class @param serverAddr Server address to connect to @param conf Hadoop configuration object
425 Refreshes superuser groups configuration for proxy users. @param conf Hadoop configuration object @param proxyUserPrefix prefix for proxy user group names
426 Adds a shutdown hook with specified priority. @param shutdownHook the runnable task to execute during shutdown @param priority execution priority of the hook
427 Retrieves password string from configuration. @param conf Configuration object @param name Password key name @return Password as string or null if not found @throws IOException on retrieval error
428 Retrieves password from configuration or default. @param conf Configuration object @param alias key for the password @param defaultPass fallback password if retrieval fails @return password as String
429 Retrieves and parses ZooKeeper authentication information from configuration. @param conf Hadoop configuration object @param configKey key for the authentication configuration @return List of ZKAuthInfo objects or empty list if not found @throws IOException if an error occurs during retrieval or parsing
430 Initializes a DecayRpcScheduler with configuration settings. @param numLevels number of priority levels for scheduling @param ns namespace for configuration keys @param conf Configuration object containing system settings
431 Clones a Writable object using serialization. @param orig original Writable object to clone @param conf configuration for cloning process @return cloned Writable object @throws RuntimeException if I/O error occurs during cloning
432 Writes configuration settings as XML to an output stream. @param out OutputStream to write the XML data @throws IOException if writing fails
433 Selects a suitable SASL client from available auth types. @param authTypes list of supported authentication methods @return chosen SaslAuth method or throws exception if none applicable @throws SaslException on SASL-related errors @throws AccessControlException if no valid auth type found @throws IOException on I/O errors
434 Initializes an FtpFs instance with given URI and configuration. @param theUri FTP file system URI @param conf Hadoop configuration object @throws IOException if initialization fails @throws URISyntaxException if URI is invalid
435 Initializes a RawLocalFs instance. @param theUri file system URI @param conf Hadoop configuration object @throws IOException if initialization fails @throws URISyntaxException if URI is invalid
436 Initializes the ChRootedFileSystem with a URI and configuration. Sets up the root path and underlying file system. @param name file system URI, may be null or without scheme @param conf Hadoop configuration object @throws IOException if initialization fails
437 Constructs a MultipartUploaderBuilderImpl with file system and path. @param fileSystem Hadoop FileSystem instance @param p Path to the file for upload
438 Initializes a new PathData instance. @param fs FileSystem object for path operations @param pathString file path string @param stat FileStatus object representing the file's metadata @throws IOException if path processing fails
439 Checks if a path has a specific capability. @param path file system path to check @param capability capability string to verify @return true if the path supports the capability, false otherwise
440 Retrieves the fully qualified root path. @param path input file path @return fully qualified root Path object @throws IOException if an I/O error occurs
441 Makes a given file path fully qualified, optionally swapping its scheme. @param path the path to qualify @return fully qualified Path object with swapped scheme if applicable
442 Retrieves the FileStatus of a given path, resolving symlinks if configured. @param item PathData object representing the file or directory @param depth current recursion depth for symlink resolution @return FileStatus object of the resolved path @throws IOException if an I/O error occurs during retrieval
443 Converts a given path to its full path within the root directory. @param path the relative or absolute path to convert @return the full path as a Path object
444 Copies a file or directory from source to destination without deletion or overwrite. @param src source path @param dst destination path @return true if copy is successful, false otherwise @throws IOException for I/O errors
445 Creates an FSDataInputStreamBuilder for a given FileSystem and Path. @param fileSystem Hadoop FileSystem instance @param path file path within the file system @return FSDataInputStreamBuilder object
446 Creates a builder for constructing FSDataInputStream. @param fileSystem mandatory Hadoop file system instance @param pathHandle mandatory file system path handle @return FSDataInputStreamBuilder object
447 Attempts to load an incomplete flush from the keystore. Checks for existence of _NEW and _OLD paths, loads permissions if available, otherwise initializes a new empty keystore. @param oldPath path to the old keystore file @param newPath path to the new keystore file @return FsPermission of the loaded keystore or newly created one @throws IOException if an I/O error occurs @throws NoSuchAlgorithmException if the algorithm used is not available @throws CertificateException if there is a problem with certificates
448 Creates a BZip2 compressor. @return Compressor instance based on configuration settings
449 Retrieves a meta block reader by name. @param name unique identifier for the meta block @return BlockReader instance for reading the meta block @throws IOException if an I/O error occurs @throws MetaBlockDoesNotExist if the meta block does not exist
450 Retrieves a data block reader for the specified index. @param blockIndex index of the block to read @return BlockReader instance for the given block index @throws IOException if an I/O error occurs or index is out of bounds
451 Closes the Writer, finalizing data and metadata writing. Ensures proper resource management and integrity checks. @throws IOException if an I/O error occurs during closure
452 Prepares a metadata block for writing using a specified compression algorithm. @param name unique identifier for the metadata block @param compressionName name of the compression algorithm to use @return BlockAppender object for writing metadata @throws IOException if an I/O error occurs @throws MetaBlockAlreadyExists if the metadata block already exists
453 Prepares a metadata block with the default compression algorithm. @param name unique identifier for the metadata block @return BlockAppender object for writing metadata @throws IOException if an I/O error occurs @throws MetaBlockAlreadyExists if the metadata block already exists
454 Initializes data block for writing. Ensures a new BlockAppender is available.
455 Creates a file in the Hadoop file system with default settings. @param f file path @return FSDataOutputStream for writing to the file
456 Creates a new log file with a unique name. Handles file existence checks and retries with incremented suffixes. @param initial base path for the log file @throws IOException if file creation fails
457 Attempts to create a log file or append to an existing one. @param targetFile the path of the log file @throws IOException if file operations fail
458 Saves a Java object as JSON to a Hadoop file. @param fs FileSystem to save the file @param path file path in the file system @param instance Java object to serialize @param overwrite flag to overwrite existing files @throws IOException if writing fails
459 Deprecated constructor for creating a SequenceFile writer. Initializes the Writer with no compression and default sync interval. @param fs FileSystem to write to @param conf Hadoop configuration settings @param name Path of the file to create @param keyClass Class type of the key @param valClass Class type of the value @param progress Progress monitor @param metadata Metadata for the file @throws IOException if an I/O error occurs
460 Creates a new file in the Hadoop file system. @param f Path to the new file @return true if file is created, false if it already exists or an error occurs
461 Initializes a new FSDataOutputStreamBuilder. @param fileSystem Hadoop FileSystem instance @param p Path to the file
462 Reads the next key-value pair from a sequence file. @param key Writable object to store the read key @param val Writable object to store the retrieved value @return true if a key is successfully read, false otherwise @throws IOException if an I/O error occurs or class mismatch
463 Constructs a new Trash instance with specified Configuration. @param conf Hadoop configuration settings @throws IOException if an I/O error occurs during initialization
464 Creates a DomainNameResolver for a given URI. @param conf system configuration @param uri target URI @param configKey base key for resolver class in configuration @return configured DomainNameResolver instance for the URI's host
465 Retrieves or creates a singleton instance of the Groups service. @param conf Hadoop configuration object @return Singleton Groups object for user-to-group mapping
466 Initializes and returns a Groups instance with the provided configuration. @param conf Hadoop configuration object @return Singleton Groups object initialized with given config
467 Refreshes superuser groups configuration using default proxy user prefix. @param conf Hadoop configuration object
468 Marks a file for deletion on JVM shutdown. @param f path to the file @return true if marked successfully, false if file does not exist @throws AccessControlException if access is denied @throws IOException if an I/O error occurs
469 Registers this shutdown hook with specified priority. Unregisters any existing hook first to ensure only one is active. @param priority execution priority of the shutdown hook
470 Logs startup and shutdown messages for a class. @param clazz the class being started @param args command-line arguments passed to the component @param log logger for recording messages
471 Loads SSL configuration from provided configuration. @throws IOException if required properties are missing or invalid
472 Creates key managers from configuration for specified SSL mode. @param mode SSLFactory mode to configure @param keystoreType type of the keystore (e.g., JKS, PKCS12) @param storesReloadInterval interval in milliseconds for reloading keystores @throws GeneralSecurityException if security settings are invalid @throws IOException if there's an I/O error accessing files
473 Retrieves ZooKeeper authentication information. @param conf Hadoop configuration object @return List of ZKAuthInfo objects or empty list if not found @throws IOException if an error occurs during retrieval
474 Retrieves and returns a list of groups for a given user. @param user username to search for @return List of group names associated with the user or empty list if fails
475 Main entry point to write configuration settings as XML. Initializes Configuration and writes it to standard output.
476 Initiates SASL authentication with the server. @param ipcStreams streams for communication @return negotiated AuthMethod or throws IOException on failure
477 Initializes a new PathData instance. @param fs FileSystem object for path operations @param pathString file path string @throws IOException if path processing fails
478 Retrieves and lists the contents of a directory. @return array of PathData objects representing directory items @throws IOException if path operations fail
479 Handles FileNotFoundException for directories, ignoring it if the filesystem does not support consistent listing. @param fs FileSystem instance to check capabilities @param path Path of the directory @param e FileNotFoundException to handle or ignore @throws FileNotFoundException if directory is missing and supported
480 Checks if a path has the specified capability. @param path file system path to check @param capability capability string to verify @return true if the path supports the capability, false otherwise
481 Checks if a path has a specific capability. @param path file system path to check @param capability capability string to verify @return true if the path supports the capability, false otherwise @throws IOException if an I/O error occurs during resolution
482 Retrieves the fully qualified root path of a given file system path. @param fs Hadoop FileSystem instance @param path input file path @return fully qualified root Path object @throws IOException if an I/O error occurs
483 Opens a file for reading. @param path file path within the file system @return FutureDataInputStreamBuilder object for asynchronous data input operations
484 Opens a file for reading using the provided path handle. @param pathHandle mandatory file system path handle @return FutureDataInputStreamBuilder object for further operations @throws IOException if an I/O error occurs @throws UnsupportedOperationException if not supported
485 Locates and loads the keystore, handling password retrieval and file consistency checks. @throws IOException if an I/O error occurs during keystore operations
486 Checks and initializes the TFile data index. Ensures proper resource management by closing the BlockReader. @throws IOException if an I/O error occurs
487 Retrieves a meta block input stream by name. @param name unique identifier for the meta block @return DataInputStream for reading the meta block @throws IOException if an I/O error occurs @throws MetaBlockDoesNotExist if the meta block does not exist
488 Initializes Reader to process BCFile. @param fin input stream for the file @param fileLength length of the file in bytes @param conf configuration settings @throws IOException if initialization fails
489 Prepares a metadata block for writing. @param name unique identifier for the metadata block @param compressName name of the compression algorithm to use @return DataOutputStream for writing metadata @throws IOException if an I/O error occurs @throws MetaBlockAlreadyExists if the metadata block already exists
490 Closes the TFile writer, finalizing data and metadata writing. Ensures proper resource management and integrity checks. @throws IOException if an I/O error occurs during closure
491 Prepares a metadata block for writing. @param name unique identifier for the metadata block @return DataOutputStream for writing metadata @throws IOException if an I/O error occurs @throws MetaBlockAlreadyExists if the metadata block already exists
492 Prepares for appending a new key. @param length expected length of the key @return DataOutputStream for writing the key @throws IOException if an I/O error occurs
493 Copies a file or directory to the specified destination. @param src source file or directory @param dstFS destination filesystem @param dst destination path @param deleteSource flag to delete source after copy @param conf configuration object @return true if successful, false otherwise @throws IOException if an I/O error occurs
494 Completes a multipart file upload. @param multipartUploadId unique identifier for the upload session @param filePath target path for the final file @param handleMap mapping of part numbers to PartHandles @return PathHandle of the completed file @throws IOException if an I/O error occurs during upload completion
495 Creates a file in Hadoop FS with specified permissions. @param fs FileSystem instance @param file Path to the new file @param permission FsPermission for the file @return FSDataOutputStream for writing to the file
496 Creates a SequenceFile writer without compression. @param fs Hadoop FileSystem instance @param conf Hadoop configuration settings @param name file path for the SequenceFile @param keyClass class type of the key @param valClass class type of the value @throws IOException if initialization fails
497 Rolls the log directory by creating a new log file. Handles directory creation and file appending or creation based on configuration. @throws IOException if file operations fail
498 Reads the next key-value pair from the MapFile. @param key object to store the read key @param val object to store the retrieved value @return true if a key is successfully read, false otherwise @throws IOException if an I/O error occurs
499 Creates a client proxy for the specified RPC protocol. @param protocol interface class for the communication protocol @param clientVersion version of the client @param addr address of the server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy retry policy for failed connections (not supported) @param fallbackToSimpleAuth flag to allow falling back to simple auth @param alignmentContext context for alignment (optional) @return ProtocolProxy instance wrapping the client proxy @throws IOException if an I/O error occurs
500 Retrieves or creates a singleton instance of the Groups service. Uses default Hadoop configuration settings. @return Singleton Groups object for user-to-group mapping
501 Initializes user group information with given configuration. @param conf Hadoop configuration object @param overrideNameRules flag to override Kerberos name rules
502 Constructs a new AccessControlList instance.
503 Constructs an AccessControlList from a space-separated ACL string. @param aclString string containing user and group access definitions
504 Constructs an AccessControlList with specified users and groups. @param users comma-separated user definitions @param groups comma-separated group definitions
505 Refreshes superuser groups configuration using default settings.
506 Initializes SSL key and trust managers based on configuration. @param mode SSLFactory mode for initialization @throws IOException if there's an I/O error accessing files @throws GeneralSecurityException if security settings are invalid
507 Starts a ZooKeeper connection with specified authentication and SSL settings. @param authInfos list of authentication information @param sslEnabled flag indicating whether SSL is enabled @throws IOException if configuration or connection fails
508 Retrieves and transforms user groups based on configured rule. @param user username to fetch groups for @return List of transformed group names or original if no transformation is applied
509 Initializes the metrics system with a given prefix. @param prefix metric property prefix @return MetricsSystem instance
510 Appends an extension to the current path. @param extension file extension to add @return new PathData instance with appended extension @throws IOException if path processing fails
511 Retrieves PathData for a child path. @param child PathData instance of the child path @return PathData object for the child path @throws IOException if path processing fails
512 Recursively processes a file system path. @param item PathData object representing the current directory or file @throws IOException if an I/O error occurs during processing
513 Checks if the given path has the specified capability. @param path file system path to check @param capability capability string to verify @return true for read-only connector, otherwise delegates to superclass
514 Checks if a path has the specified capability. @param path file system path to check @param capability capability string to verify @return true for read-only connector capability, otherwise delegates to superclass
515 Checks if a path has a specific capability. @param path file system path to check @param capability capability string to verify @return true if the path supports the capability, false otherwise
516 Lists file statuses within the specified directory. Handles FileNotFoundException and IOExceptions across nodes. @param f directory path @return array of FileStatus objects @throws FileNotFoundException if all nodes have not been found @throws IOException if an I/O error occurs
517 Copies a file or directory from one filesystem to another. Handles both single files and directories recursively. @param srcFS source FileSystem @param srcStatus status of the source file or directory @param dstFS destination FileSystem @param dst destination Path @param deleteSource flag to delete the source after copy @param overwrite flag to allow overwriting existing files @param conf Configuration object @return true if successful, false otherwise @throws IOException if an I/O error occurs
518 Recursively copies files or directories from source to destination. @param srcFS source FileSystem @param srcStatus FileStatus of the source file/directory @param dst destination File object @param deleteSource flag to delete source after copy @param conf Configuration object @return true if operation is successful, false otherwise
519 Opens a file with specified read policy and length. @param policy read policy for the file @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
520 Opens a file for reading with specified buffer size and length. @param fs FileSystem object @param file Path to the file @param bufferSize Buffer size for reading @param length Length of data to read, -1 for full file @return FSDataInputStream for file operations @throws IOException if an I/O error occurs
521 Loads Java object from JSON file in Hadoop FileSystem. @param fs FileSystem instance @param path file path within the file system @param status optional FileStatus for input stream configuration @return deserialized Java object of type T @throws IOException if an I/O error occurs
522 Retrieves the smallest key from the TFile index. Ensures the index is checked and initialized. @return RawComparable representing the first key or null if empty @throws IOException if an I/O error occurs during index check
523 Retrieves the last key from the TFile index. Initializes and checks the TFile data index if necessary. @return RawComparable representing the last key, or null if index is empty @throws IOException if an I/O error occurs during initialization
524 Retrieves the block containing a key. @param key the key to search for @param greater true to find upper bound, false for lower bound @return Location of the block or end if not found @throws IOException if an I/O error occurs
525 Retrieves the key nearest to a given offset. @param offset file position to search near @return RawComparable object or null if not found @throws IOException if an I/O error occurs
526 Initializes a Reader to access TFile data. @param fsdis input stream for the file @param fileLength length of the file @param conf configuration settings @throws IOException if an I/O error occurs
527 Initializes a new data block for reading. Closes any existing block reader and opens a new one at the specified index. Updates the current location to the start of the new block. @param blockIndex index of the block to initialize @throws IOException if an I/O error occurs
528 Appends a key-value pair to the TFile. @param key byte array containing the key data @param koff offset in the key array where the key starts @param klen length of the key @param value byte array containing the value data @param voff offset in the value array where the value starts @param vlen length of the value @throws IOException if an I/O error occurs during writing
529 Retrieves the middle key from the MapFile. @return WritableComparable middle key or null if file is empty @throws IOException if an I/O error occurs during index reading
530 Sets the final key in the map file. @param key WritableComparable object to store the last key @throws IOException if an I/O error occurs during operations
531 Seeks to the specified key position in a MapFile. @param key target key to seek @param before flag indicating if seeking before or at the key @return comparison result of the found key with the target key @throws IOException if an I/O error occurs during seek operations
532 Performs a single pass of merging input files into the output file. @throws IOException if an I/O error occurs during processing
533 Creates a client proxy for the specified RPC protocol. @param protocol interface class for the communication protocol @param clientVersion version of the client @param addr address of the server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy retry policy for failed connections (not supported) @return ProtocolProxy instance wrapping the client proxy @throws IOException if an I/O error occurs
534 Creates a client proxy for the specified RPC protocol using connection details. @param protocol interface class for the communication protocol @param clientVersion version of the client @param connId connection ID containing server address and credentials @param conf configuration settings @param factory socket factory for creating connections @param alignmentContext context for alignment (optional) @return ProtocolProxy instance wrapping the client proxy @throws IOException if an I/O error occurs
535 Retrieves the current trash directory path. @return Path object representing the trash directory @throws IOException if an I/O error occurs while accessing the trash directory
536 Retrieves the current trash directory for a given file system path. @param path file system path to check @return trash directory path or null if not applicable @throws IOException if an I/O error occurs
537 Ensures UserGroupInformation is initialized. Initializes with default configuration if not already done.
538 Sets Hadoop configuration and initializes user group information. @param conf Hadoop configuration object
539 Launches a Hadoop service with configuration and arguments. Handles exceptions, logs errors, and returns an ExitException. @param conf Configuration object for service initialization @param instance Service instance to be launched @param processedArgs List of command-line arguments @param addShutdownHook Flag to register shutdown hook @param execute Flag to execute the service @return ExitUtil.ExitException indicating success or failure
540 Initiates ZooKeeper connection with specified authentication. @param authInfos list of authentication information @throws IOException if configuration or connection fails
541 Constructs a LocalFs instance with specified URI. @param theUri local file system URI @param conf configuration settings for the file system @throws IOException if an I/O error occurs @throws URISyntaxException if URI syntax is invalid
542 Copies an input stream to a target path in the Hadoop file system. @param in InputStream to read from @param target PathData object representing the target file path @throws IOException if an I/O error occurs
543 Copies a file or directory from one filesystem to another. @param srcFS source FileSystem @param src source Path @param dstFS destination FileSystem @param dst destination Path @param deleteSource flag to delete the source after copy @param overwrite flag to allow overwriting existing files @param conf Configuration object @return true if successful, false otherwise @throws IOException if an I/O error occurs
544 Repairs and opens a file from the most recent node. @param mrNodes array of MRNflyNode objects representing nodes @param f file path to be opened @param bufferSize buffer size for reading @return FSDataInputStream for reading the file or null if failed
545 Copies a file or directory from Hadoop FileSystem to local. @param srcFS source FileSystem @param src source Path @param dst destination File object @param deleteSource flag to delete source after copy @param conf Configuration object @return true if operation is successful, false otherwise
546 Opens file for sequential read access. @return FSDataInputStream for reading the file sequentially @throws IOException if an I/O error occurs
547 Loads Java object from JSON file in Hadoop FileSystem. @param fs FileSystem instance @param path file path within the file system @return deserialized Java object of type T @throws IOException if an I/O error occurs
548 Retrieves the record number near a specified file offset. @param offset target file position @return The calculated record number as a long value @throws IOException if an I/O error occurs
549 Retrieves the current record number. @return The record number as a long value @throws IOException if an I/O error occurs
550 Initializes a Scanner for reading TFile data. @param reader Reader object to access the file @param begin Start location within the file @param end End location within the file @throws IOException if an I/O error occurs during initialization
551 Seeks to a specified location within the TFile. Validates the location and adjusts the cursor accordingly. @param l Location object to seek to @throws IOException if an I/O error occurs
552 Advances to the next record in the TFile. Returns false if at end of file, otherwise advances and returns true.
553 Appends a key-value pair to the TFile. @param key byte array containing the key data @param value byte array containing the value data @throws IOException if an I/O error occurs during writing
554 Seeks to the specified key position in a MapFile. @param key target key to seek @return comparison result of the found key with the target key @throws IOException if an I/O error occurs during seek operations
555 Retrieves the closest key-value pair to a specified key. @param key target key for comparison @param val Writable object to store the retrieved value @param before flag indicating if seeking before or at the key @return closest key or null if not found @throws IOException if an I/O error occurs during operations
556 Creates a UserGroupInformation object for testing purposes. @param user username of the test user @param userGroups array of group names associated with the user @return UserGroupInformation object configured for testing
557 Creates a proxy user for testing purposes. @param user username for the proxy @param realUser actual user being proxied @param userGroups array of group names to assign to the proxy user @return UserGroupInformation object representing the proxy user with specified groups
558 Retrieves the list of groups associated with the authenticated user. @return unmodifiable list of group names or empty list if retrieval fails
559 Retrieves the set of groups for the authenticated user. @return an unmodifiable set of group names or empty set if retrieval fails
560 Performs subject-based Kerberos login. @param subject user identity to authenticate @param params login parameters @return UserGroupInformation object for authenticated user @throws IOException if login fails
561 Refreshes service ACLs using provided configuration and policy. @param conf Configuration object containing security settings @param provider PolicyProvider for retrieving service definitions
562 Authorizes a proxy user based on their identity and remote address. @param user UserGroupInformation object representing the user @param remoteAddress String representation of the user's remote address @throws AuthorizationException if authorization fails or an error occurs
563 Authorizes proxy user access based on group info and remote address. @param user UserGroupInformation object representing the user @param remoteAddress InetAddress of the client making the request
564 Launches a Hadoop service with configuration and arguments. Calls the overloaded method with null service instance. @param conf Configuration object for service initialization @param processedArgs List of command-line arguments @param addShutdownHook Flag to register shutdown hook @param execute Flag to execute the service @return ExitUtil.ExitException indicating success or failure
565 Initiates ZooKeeper connection without authentication. @throws IOException if configuration or connection fails
566 Copies a file from source to target in Hadoop FS. Handles path checks, checksum verification, and attribute preservation. @param src source PathData object @param target destination PathData object @throws IOException if an I/O error occurs
567 Copies a file or directory from one filesystem to another. @param srcFS source FileSystem @param src source Path @param dstFS destination FileSystem @param dst destination Path @param deleteSource flag to delete the source after copy @param conf Configuration object @return true if successful, false otherwise @throws IOException if an I/O error occurs
568 Opens a file for reading across multiple nodes. @param f file path to be opened @param bufferSize buffer size for reading @return FSDataInputStream for reading the file @throws IOException if all nodes fail or an I/O error occurs
569 Creates a Scanner for reading TFile data. @return Scanner object initialized with file's start and end locations @throws IOException if an I/O error occurs during initialization
570 Creates a scanner for reading TFile data within specified record range. @param beginRecNum starting record number (inclusive) @param endRecNum ending record number (exclusive) @return Scanner object for the specified range @throws IOException if an I/O error occurs during creation
571 Initializes a Scanner with specific file offsets. @param reader TFile Reader object @param offBegin starting offset within the file @param offEnd ending offset within the file @throws IOException if initialization fails due to I/O error
572 Rewinds to the beginning of the TFile. @throws IOException if an I/O error occurs
573 Seeks to specified key in MapFile. @param key target key to seek @return true if exact match found, false otherwise @throws IOException if I/O error occurs during seek
574 Retrieves the closest key-value pair to a specified key. @param key target key for comparison @param val Writable object to store the retrieved value @return closest key or null if not found @throws IOException if an I/O error occurs during operations
575 Checks if security is enabled by verifying that SIMPLE authentication is not used. @return true if security is enabled, false otherwise
576 Logs out a user from Kerberos using the keytab. Handles shutdown of renewal executor and throws exception on failure.
577 Retrieves an array of group names for the authenticated user. @return an array of group names or empty array if retrieval fails
578 Checks if a user is allowed access based on username or group membership. @param ugi UserGroupInformation object representing the user @return true if user is in allowed list or groups, false otherwise
579 Retrieves UserGroupInformation from a given Subject. @param subject the user identity to authenticate @return UserGroupInformation object for authenticated user @throws IOException if authentication fails
580 Authorizes a proxy user based on their identity and remote address. @param user UserGroupInformation object representing the user @param remoteAddress String representation of the user's remote address @param conf Configuration object (deprecated parameter) @throws AuthorizationException if authorization fails or an error occurs
581 Authorizes the connection based on user and protocol. Handles proxy user authorization and increments success/failure metrics. @throws RpcServerException if authorization fails
582 Processes file operations based on source path type. Handles symlinks, regular files, and directories. @param src source PathData object @param dst destination PathData object @throws IOException if an I/O error occurs
583 Copies a file from HAR filesystem to the local filesystem. @param delSrc flag to delete source file after copy @param src source Path in HAR filesystem @param dst destination Path in local filesystem @throws IOException if an I/O error occurs
584 Copies a file from the distributed filesystem to the local filesystem. @param delSrc flag to delete the source file after copy @param src source Path in the distributed filesystem @param dst destination Path on the local filesystem @throws IOException if an I/O error occurs
585 Creates a Scanner for a specific byte range in the TFile. @param offset starting byte position @param length number of bytes to include in the range @return Scanner object covering the specified range @throws IOException if an I/O error occurs during initialization
586 Initializes a Scanner for reading TFile data within specified key ranges. @param reader Reader object to access the file @param beginKey Starting key for the scan range (inclusive) @param endKey Ending key for the scan range (exclusive) @throws IOException if an I/O error occurs during initialization
587 Seeks to a specified key within the TFile. @param key byte array containing the key @param keyOffset starting index of the key in the byte array @param keyLen length of the key @return true if successful, false if at end of file @throws IOException if an I/O error occurs
588 Seeks to the lower bound of a specified key within the TFile. @param key byte array containing the key @param keyOffset starting index in the key array @param keyLen length of the key in bytes @throws IOException if an I/O error occurs
589 Seeks to the upper bound of a specified key within the TFile. @param key byte array containing the key @param keyOffset offset in the byte array where the key starts @param keyLen length of the key in bytes @throws IOException if an I/O error occurs
590 Retrieves value for a given key from the MapFile. @param key target key to search for @param val Writable object to store the retrieved value @return the value associated with the key, or null if not found @throws IOException if I/O error occurs during operation
591 Retrieves or creates a protocol proxy for secure RPC communication. @param protocol the protocol class @param clientVersion version of the client @param connId connection identifier @param conf configuration object @param factory socket factory for connections @param alignmentContext context for alignment @return ProtocolProxy instance for the given protocol @throws IOException if an I/O error occurs during proxy creation
592 Creates a protocol proxy for remote procedure calls. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory @param rpcTimeout timeout for RPC operations @param connectionRetryPolicy retry policy for connections @param fallbackToSimpleAuth flag to allow fallback to simple auth @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
593 Creates a protocol proxy for remote procedure calls. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory for connections @param rpcTimeout timeout for RPC operations @param connectionRetryPolicy retry policy for connections @param fallbackToSimpleAuth flag to allow fallback to simple authentication @param alignmentContext context for protocol alignment @return ProtocolProxy instance for the given protocol @throws IOException if an I/O error occurs
594 Forces secure opening of a file for random read access. Validates owner and group against expected values. @param f the File object to open @param mode the access mode ("r", "rw", etc.) @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return RandomAccessFile instance if successful @throws IOException if file access fails or validation fails
595 Opens a file securely, checking ownership and group. @param file the File to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FSDataInputStream for the specified file @throws IOException if access or validation fails
596 Opens a file for secure reading, verifying owner and group. @param f the File object to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FileInputStream if access is granted @throws IOException if file cannot be opened securely
597 Dumps detailed information about a UserGroupInformation instance. @param title heading for the output section @param ugi UserGroupInformation object to inspect @throws IOException if an I/O error occurs during dumping
598 Retrieves the current login user's UserGroupInformation. Initializes if not already done and spawns a renewal thread. @return UserGroupInformation object for the logged-in user @throws IOException if initialization or retrieval fails
599 Logs in a user from a given Subject. @param subject user identity to authenticate @throws IOException if login fails
600 Processes the RPC connection context from a buffer. Handles authentication, authorization, and proxy user creation. @param buffer input buffer containing serialized connection context @throws RpcServerException if processing fails
601 Creates a Scanner for reading TFile data within specified key ranges. @param beginKey Starting key for the scan range (inclusive) @param endKey Ending key for the scan range (exclusive) @return Scanner object for the specified key range @throws IOException if an I/O error occurs during initialization
602 Seeks to a specified key within the TFile. @param key byte array containing the key @return true if successful, false if at end of file @throws IOException if an I/O error occurs
603 Seeks to the lower bound of a specified key within the TFile. @param key byte array containing the key @throws IOException if an I/O error occurs
604 Seeks to the upper bound of a specified key. @param key byte array containing the key @throws IOException if an I/O error occurs
605 Retrieves value for a specified key in SequenceFile. @param key target key to search @return key if found, otherwise null @throws IOException if I/O error occurs
606 Retrieves value for a given key from the BloomMapFile. Uses Bloom filter to check potential presence of key first. @param key target key to search for @param val Writable object to store the retrieved value @return the value associated with the key, or null if not found @throws IOException if I/O error occurs during operation
607 Retrieves or creates a protocol proxy for secure RPC communication. @param protocol the protocol class @param clientVersion version of the client @param connId connection identifier @param conf configuration object @param factory socket factory for connections @return ProtocolProxy instance for the given protocol @throws IOException if an I/O error occurs during proxy creation
608 Creates a protocol proxy for remote procedure calls with default fallback settings. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory @param rpcTimeout timeout for RPC operations @param connectionRetryPolicy retry policy for connections @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
609 Sets up I/O streams for the connection. Handles authentication and manages SASL connections. @param fallbackToSimpleAuth flag to allow simple authentication fallback
610 Opens a file for random read access securely. Checks if security is enabled and validates owner/group if necessary. @param f the File object to open @param mode the access mode (\"r\", \"rw\", etc.) @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return RandomAccessFile instance if successful @throws IOException if file access fails or validation fails
611 Opens a file for secure input stream. @param file the File to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FSDataInputStream for the specified file @throws IOException if access or validation fails
612 Opens a file for reading securely. @param f the File object to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FileInputStream if access is granted @throws IOException if file cannot be opened securely
613 Checks if a remote user has administrator access. @param servletContext the ServletContext object @param remoteUser username of the remote user @return true if user is an admin, false otherwise
614 Authorizes user access to a specified protocol. @param user UserGroupInformation object representing the user @param protocol Class representing the protocol @param conf Hadoop configuration object @param addr Client's InetAddress @throws AuthorizationException if user is not authorized
615 Retrieves the current user's UserGroupInformation. Initializes if not already done and constructs from Subject or login user. @return UserGroupInformation object for the current user @throws IOException if initialization or retrieval fails
616 Checks if the current login user's credentials are based on a keytab. @return true if using Kerberos and credentials from keytab; false otherwise @throws IOException if there is an issue retrieving the login user information
617 Determines if the current login is ticket-based. @return true if Kerberos and Hadoop login without keytab, false otherwise @throws IOException if there's an issue retrieving user information
618 Executes a privileged action as the login user or terminates if security is enabled and retrieval fails. @param action the PrivilegedAction to be executed @return result of the PrivilegedAction
619 Executes an action as the current login user. @param action the action to execute with elevated privileges @return result of the privileged action @throws IOException if an I/O error occurs or operation is interrupted
620 Cedes active status to another node after a specified delay. @param millisToCede milliseconds to wait before ceding @throws AccessControlException if access is denied @throws ServiceFailedException if service operation fails @throws IOException if an I/O error occurs
621 Initiates a graceful failover to the current node. Executes failover actions under the logged-in user's privileges. @throws ServiceFailedException if failover fails @throws IOException if an I/O error occurs during execution
622 Creates a Scanner for reading TFile data within specified key ranges. @param beginKey Starting key for the scan range (inclusive) @param endKey Ending key for the scan range (exclusive) @return Scanner object for the specified key range @throws IOException if an I/O error occurs during initialization
623 Creates a Scanner for reading TFile data within specified key ranges. @param beginKey Starting key for the scan range (inclusive) @param endKey Ending key for the scan range (exclusive) @return Scanner object for the specified key range @throws IOException if an I/O error occurs during initialization
624 Creates a protocol proxy for remote procedure calls with default retry settings. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
625 Retrieves a protocol proxy for remote procedure calls. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory @param rpcTimeout timeout for RPC operations @return Proxy object for server communication @throws IOException if an I/O error occurs
626 Checks if a user has administrator access. @param servletContext the ServletContext object @param request the HttpServletRequest object @param response the HttpServletResponse object @return true if user is an admin, false otherwise @throws IOException if sending error fails
627 Authorizes user access to a specified protocol. @param user UserGroupInformation object representing the user @param protocolName name of the protocol class @param addr Client's InetAddress @throws AuthorizationException if authorization fails or protocol is unknown
628 Retrieves the user's home directory path. @return fully qualified Path object representing the home directory
629 Checks if the current user has the required permissions for a file or directory. @param stat FileStatus object representing the file or directory @param mode FsAction object representing the required permission action @throws AccessControlException if the user lacks the required permissions @throws IOException if an I/O error occurs during permission check
630 Constructs a new ViewFileSystem instance. Initializes user group information and records creation time. @throws IOException if user group retrieval fails
631 Constructs a ViewFs instance. Initializes filesystem state and configuration. @param theUri URI of the ViewFs mount table @param conf Hadoop configuration object @throws IOException if initialization fails @throws URISyntaxException if URI is invalid
632 Initializes an InodeTree with configuration settings. @param config Hadoop configuration object @param viewName name of the view filesystem @param theUri URI associated with the filesystem @param initingUriAsFallbackOnNoMounts flag to handle empty mount tables @throws UnsupportedFileSystemException if unsupported file system is used @throws URISyntaxException if URI syntax is invalid @throws FileAlreadyExistsException if file already exists at target path @throws IOException for general IO errors
633 Returns the home directory path for the current user. Uses UserGroupInformation to fetch the username, falling back to system property if necessary. Constructs a fully qualified path using the file system's URI. @return Path representing the user's home directory
634 Opens a secure HTTP connection using a given URL, token, and proxy user. @param url target web service URL @param token authentication token @param doAs proxy user for impersonation @return HttpURLConnection with added authentication parameters @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
635 Retrieves UserGroupInformation based on ticket cache or username. @param ticketCachePath path to Kerberos ticket cache, can be null @param user username for remote user, can be null if ticket cache is provided @return UserGroupInformation object @throws IOException if retrieval fails
636 Logs in a user from a keytab and returns the UserGroupInformation. @param user Kerberos principal name @param path path to the keytab file @return UserGroupInformation for the logged-in user or current user if security is disabled @throws IOException if login fails
637 Logs detailed user information for debugging. @param log Logger instance for logging @param ugi UserGroupInformation object containing user details @throws IOException if user retrieval fails
638 Executes an action as the current user. @param action the action to execute with elevated privileges @return result of the privileged action @throws IOException if an I/O error occurs or operation is interrupted
639 Retrieves the doAs user if proxy authentication is used. @return Short username of the doAs user or null if not applicable @throws IOException if there's an error retrieving user information
640 Waits for and retrieves a protocol proxy with retries. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param rpcTimeout timeout for RPC operations @param connectionRetryPolicy retry policy for connections @param timeout maximum wait time in milliseconds @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs or timeout is reached
641 Creates a Scanner for reading TFile data within specified key ranges. @param beginKey Starting key for the scan range (inclusive) @param endKey Ending key for the scan range (exclusive) @return Scanner object for the specified key range @throws IOException if an I/O error occurs during initialization
642 Retrieves a protocol proxy for remote procedure calls. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param factory socket factory @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
643 Creates a protocol proxy for remote procedure calls. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory @return Proxy object for communication @throws IOException if an I/O error occurs
644 Determines if instrumentation access is allowed. @param servletContext the ServletContext object @param request the HttpServletRequest object @param response the HttpServletResponse object @return true if access is allowed, false otherwise @throws IOException if sending error fails
645 Retrieves the trash root directory for a given path. @param path the file or directory path @return fully qualified Path object representing the trash root
646 Retrieves trash root directories for users. @param allUsers if true, retrieves trash for all users; otherwise, only for the current user @return collection of FileStatus objects representing trash roots
647 Checks file access permissions for a given path. @param path the file or directory path to check @param mode required permission action (e.g., read, write) @throws AccessControlException if user lacks required permissions @throws FileNotFoundException if the specified path does not exist @throws IOException if an I/O error occurs during the check
648 Checks and enforces access permissions for a given file or directory. @param path the path to check access for @param mode the required permission action (e.g., read, write) @throws AccessControlException if the user lacks the required permissions @throws FileNotFoundException if the specified path does not exist @throws UnresolvedLinkException if a symlink cannot be resolved @throws IOException if an I/O error occurs during access check
649 Constructs and initializes a new ViewFileSystem instance. @param theUri file system URI @param conf Hadoop configuration object @throws IOException if initialization fails
650 Retrieves or creates a unique FileSystem instance for the given URI and configuration. @param uri URI of the file system @param conf Configuration object @return Unique FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
651 Retrieves the home directory path for the current user. @return Path representing the user's home directory on the default file system.
652 Opens a secure HTTP connection using the provided URL and token. @param url target web service URL @param token authentication token @return HttpURLConnection with added authentication parameters @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
653 Retrieves a FileSystem instance for the specified URI and configuration. Handles user authentication using Kerberos ticket cache or username. @param uri file system URI @param conf Hadoop configuration @param user username for remote user, can be null if ticket cache is provided @return FileSystem object @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
654 Creates a new FileSystem instance with specified URI and configuration. @param uri file system URI @param conf Hadoop configuration @param user username for remote user, can be null if ticket cache is provided @return FileSystem object @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
655 Retrieves UserGroupInformation from Kerberos ticket cache. @param ticketCache path to Kerberos ticket cache @param user username for remote user @return UserGroupInformation object or null if not found
656 Logs in using a Kerberos keytab and validates the UserGroupInformation. Handles re-login attempts if configured.
657 Logs in a user from a keytab and sets it as the current login user. @param user Kerberos principal name @param path path to the keytab file @throws IOException if login fails
658 Logs detailed user information. @param ugi UserGroupInformation object containing user details @throws IOException if user retrieval fails
659 Retrieves a protocol proxy with specified timeout. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param connTimeout connection timeout in milliseconds @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs or timeout is reached
660 Waits for and retrieves a protocol proxy with retries. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param rpcTimeout timeout for RPC operations @param timeout maximum wait time in milliseconds @return Proxy object for server communication @throws IOException if an I/O error occurs or timeout is reached
661 Retrieves a proxy for remote procedure calls. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param factory socket factory @return Proxy object for communication @throws IOException if an I/O error occurs
662 Retrieves a protocol proxy for remote procedure calls with default socket factory. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
663 Retrieves the GetUserMappingsProtocol proxy for communication. @return Proxy object for user group mapping protocol @throws IOException if an I/O error occurs during proxy creation
664 Creates a ZKFC proxy for communication with the ZooKeeper Failover Controller. @param conf Hadoop configuration object @param timeoutMs connection timeout in milliseconds @return ZKFCProtocol instance for interaction @throws IOException if an I/O error occurs during setup
665 Retrieves the trash root directory for a given path. @param path the file or directory path @return fully qualified Path object representing the trash root
666 Retrieves trash root directories. @param allUsers if true, retrieves trash for all users; otherwise, only for the current user @return collection of FileStatus objects representing trash roots
667 Constructs a new ViewFileSystem instance with default URI. @param conf Hadoop configuration object @throws IOException if initialization fails
668 Adds a FileSystem instance to the cache for testing purposes. @param uri URI of the file system @param conf Configuration settings @param fs FileSystem instance to add @throws IOException if an I/O error occurs
669 Creates a new FileSystem instance for the given URI and configuration. Uses default settings if scheme or authority are missing. @param uri URI of the file system @param config Configuration object @return FileSystem instance configured with the given URI @throws IOException if an I/O error occurs during initialization
670 Creates and returns a new FileContext instance. @param defFs default AbstractFileSystem @param aConf Hadoop configuration object @return initialized FileContext object
671 Opens a secure HTTP connection using the provided URL and token. @param url target web service URL @param token authentication token @return HttpURLConnection with added authentication parameters @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
672 Executes Kerberos diagnostics, printing configuration and environment details. @return true if diagnostics complete successfully, false otherwise @throws Exception if any diagnostic step fails
673 Processes command-line arguments for Kerberos login. @param args input command-line arguments @return filtered arguments without login parameters or null if login fails
674 Main method to demonstrate UserGroupInformation functionality. Retrieves and prints current user's UGI, authentication method, and keytab status. Optionally logs in a user from a keytab if two arguments are provided.
675 Logs in a user from a keytab if security is enabled. @param conf Hadoop configuration object @param keytabFileKey config key for the keytab file path @param userNameKey config key for the Kerberos principal name @param hostname target hostname for principal generation @throws IOException if login fails or config is invalid
676 Initializes a new Server instance for handling RPCs. Configures various settings including queues, authentication, and logging. @param bindAddress server's binding address @param port server's listening port @param rpcRequestClass class of RPC request objects @param handlerCount number of handlers for processing requests @param numReaders number of reader threads @param queueSizePerHandler size of the queue per handler @param conf Hadoop configuration object @param serverName name of the server @param secretManager SecretManager for managing tokens @param portRangeConfig configuration for port range @throws IOException if an error occurs during initialization
677 Builds SASL negotiation response with initial challenge for TOKEN auth. @return RpcSaslProto containing negotiation details @throws InterruptedException, SaslException, IOException on errors
678 Retrieves a protocol proxy with default timeout. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
679 Waits for and retrieves a protocol proxy. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param connTimeout connection timeout in milliseconds @return Proxy object for communication @throws IOException if an I/O error occurs or timeout is reached
680 Adds a configuration resource from an input stream. @param in input stream containing configuration data @param name resource's name
681 Retrieves a protocol proxy for remote procedure calls. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @return Proxy object for communication @throws IOException if an I/O error occurs
682 Executes command to retrieve and print user group mappings. @param args array of usernames, defaults to current user if empty @return exit status code (0 for success)
683 Initiates a graceful failover to a specified HA service node. @param toNode target HAServiceTarget for failover @return 0 on success, -1 if failover fails
684 Requests a remote service to cede its active state. @param remote target HAServiceTarget object @param timeoutMs duration for which the service should cede activity @return ZKFCProtocol instance used for communication @throws IOException if communication fails
685 Handles GET requests for retrieving JMX data in JSON format. Checks access, processes queries, and writes MBean details to response. @param request HttpServletRequest object containing the request @param response HttpServletResponse object to send the JSON response
686 Retrieves or creates a FileSystem instance for the given URI and configuration. @param uri URI of the file system @param conf Configuration object @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
687 Creates an instance of LocalFileSystem. @param conf Configuration object @return LocalFileSystem instance configured with the given configuration @throws IOException if an I/O error occurs during initialization
688 Retrieves a new FileSystem instance. @param uri URI of the file system @param conf Configuration object @return Configured FileSystem instance @throws IOException if an I/O error occurs during initialization
689 Initializes and returns a FileContext instance. @param defaultFS default AbstractFileSystem @return initialized FileContext object using default configuration
690 Creates and returns a FileContext instance for the specified URI. @param defaultFsUri default file system URI @param aConf Hadoop configuration object @return initialized FileContext object @throws UnsupportedFileSystemException if the file system is not supported
691 Initializes command-line arguments for token management. @param args input command-line arguments @return 0 on success, 1 on error
692 Logs in a user using a keytab file and Kerberos principal. @param conf Hadoop configuration object @param keytabFileKey config key for the keytab file path @param userNameKey config key for the Kerberos principal name @throws IOException if login fails or config is invalid
693 Processes SASL messages for secure authentication. Handles NEGOTIATE, INITIATE, and RESPONSE states. @param saslMessage incoming SASL message @return processed RpcSaslProto response or null if switching to simple auth @throws SaslException, IOException, AccessControlException, InterruptedException on errors
694 Waits for and retrieves a protocol proxy. @param protocol the protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @return Proxy object for server communication @throws IOException if an I/O error occurs
695 Adds a configuration resource by name. @param name resource identifier
696 Adds a configuration resource from a URL. @param url location of the configuration resource
697 Adds a configuration resource from a file path. @param file the Path object pointing to the configuration file
698 Adds configuration resource from input stream. @param in InputStream containing configuration data
699 Performs a graceful failover by requesting other nodes to cede their active state. Throws exceptions if pre-flight checks fail or if the local node cannot become active.
700 Creates a proxy to monitor service health. @return HAServiceProtocol proxy instance for monitoring @throws IOException if proxy creation fails
701 Retrieves a proxy for the health monitor service with default retry attempts. @param conf configuration settings @param timeoutMs RPC operation timeout in milliseconds @return HAServiceProtocol proxy instance @throws IOException if proxy creation fails
702 Retrieves an HA service proxy. @param conf configuration settings @param timeoutMs RPC operation timeout in milliseconds @return HAServiceProtocol proxy instance @throws IOException if proxy creation fails
703 Initializes HAR file system with given URI and configuration. @param name URI of the HAR file system @param conf Hadoop configuration object @throws IOException if initialization fails or files are missing
704 Moves a file or directory to the appropriate trash. @param fs FileSystem to manage trash operations @param p Path of the file or directory to move @param conf Configuration settings @return true if successfully moved, false otherwise @throws IOException if an I/O error occurs
705 Constructs a PathData instance. @param pathString file path string @param conf configuration object @throws IOException if an I/O error occurs during initialization
706 Retrieves or creates a FileSystem instance by name. @param name file system name @param conf Configuration object @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
707 Retrieves or creates a LocalFileSystem instance. @param conf Configuration object @return LocalFileSystem object @throws IOException if an I/O error occurs
708 Constructs a ChRootedFileSystem with a specified root directory. @param uri URI of the file system @param conf Configuration object @throws IOException if an I/O error occurs during initialization
709 Retrieves or creates a FileSystem instance for the given URI and configuration. @param uri URI of the file system @param conf Configuration object @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
710 Retrieves or creates a FileSystem instance for the given URI and configuration. If the URI scheme matches the root scheme, it directly creates the file system. Otherwise, it delegates to the default FileSystem.get method. @param uri URI of the file system @param conf Configuration object @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
711 Retrieves or creates a FileSystem instance for the path's URI. @param conf Configuration object @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
712 Retrieves or creates a FileSystem instance for logging metrics. Uses supplied filesystem if available, otherwise initializes from URI and configuration. @return FileSystem object for file operations @throws MetricsException on invalid URI or IO errors
713 Lists file statuses in the internal directory. @param f path to list @return array of FileStatus objects @throws IOException if an I/O error occurs
714 Creates a FileContext instance using the specified URI and default configuration. @param defaultFsUri default file system URI @return initialized FileContext object @throws UnsupportedFileSystemException if the file system is not supported
715 Retrieves FileContext for the default file system. @param aConf Hadoop configuration object @return initialized FileContext object @throws UnsupportedFileSystemException if URI has no valid scheme
716 Retrieves the local file system context. @param aConf Hadoop configuration object @return FileContext for the local file system @throws UnsupportedFileSystemException if local file system is unsupported
717 Constructs a new RPC Server instance. @param protocolClass class of the RPC protocol @param protocolImpl implementation of the RPC protocol @param conf Hadoop configuration object @param bindAddress server's binding address @param port server's listening port @param numHandlers number of handlers for processing requests @param numReaders number of reader threads @param queueSizePerHandler size of the queue per handler @param verbose flag to enable verbose logging @param secretManager SecretManager for managing tokens @param portRangeConfig configuration for port range @param alignmentContext context for alignment (optional) @throws IOException if an error occurs during initialization
718 Initializes a new RPC Server instance. @param protocolClass class of the RPC protocol @param protocolImpl implementation of the RPC protocol @param conf Hadoop configuration object @param bindAddress server's binding address @param port server's listening port @param numHandlers number of handlers for processing requests @param numReaders number of reader threads @param queueSizePerHandler size of the queue per handler @param verbose flag to enable verbose logging @param secretManager SecretManager for managing tokens @param portRangeConfig configuration for port range @param alignmentContext context for alignment @throws IOException if an error occurs during initialization
719 Processes SASL messages for secure authentication. Handles negotiation, re-login, and finalizes context establishment. @param saslMessage incoming SASL message @throws RpcServerException, IOException, InterruptedException on errors
720 Loads the latest mount table configuration from a specified path. @param mountTableConfigPath path to the mount table configuration files @param conf Hadoop configuration object to load into
721 Checks if other target nodes are active. @param targetNodeToActivate ID of the node to activate @param forceActive flag to force activation @return true if any other node is active, false otherwise
722 Performs pre-failover checks for transitioning a service. @param from source HAServiceTarget @param target destination HAServiceTarget @param forceActive flag to force failover even if not ready @throws FailoverFailedException if any check fails
723 Attempts to transition a service target to standby gracefully. @param svc the service target to be fenced @return true if successful, false otherwise
724 Resolves a file system path by following symbolic links. @param filesys FileSystem instance to operate on @param path Path to resolve @return Result of the operation (type T) @throws IOException if an I/O error occurs or symlink resolution fails
725 Initializes a new PathData instance for a local file path. @param localPath URI representing the local file path @param conf Configuration object for FileSystem initialization @throws IOException if an I/O error occurs during FileSystem setup
726 Copies files from local file system to Hadoop file system. @param delSrc flag to delete source files after copy @param overwrite flag to allow overwriting existing files @param srcs array of source Paths in local file system @param dst destination Path in Hadoop file system (must be a directory) @throws IOException if any I/O error occurs during copying
727 Copies a file from local to the Hadoop FileSystem. @param delSrc flag to delete the source file after copy @param overwrite flag to allow overwriting existing files @param src source Path on local filesystem @param dst destination Path on Hadoop FileSystem @throws IOException if an I/O error occurs
728 Copies a file from the Hadoop FileSystem to the local file system. @param delSrc flag to delete the source file after copy @param src source Path in Hadoop FileSystem @param dst destination Path in local file system @param useRawLocalFileSystem flag to use raw local file system @throws IOException if an I/O error occurs
729 Updates context with new local directories from configuration. @param conf Configuration object @return Updated Context object @throws IOException if directory operations fail or config is missing
730 Retrieves a local file path by hashing and trying each directory. @param dirsProp configuration property for directories @param path relative file path @return local Path object if successful, throws IOException otherwise
731 Retrieves the raw file system for a given path. @param path the Hadoop file system path @param conf configuration settings @return FileSystem object representing the raw file system @throws IOException if an I/O error occurs or no link is found
732 Retrieves mount path information for a given Hadoop file system path. @param path the file system path to query @param conf configuration settings for file system operations @return MountPathInfo object containing resolved path and file system details @throws IOException if an I/O error occurs during resolution or retrieval
733 Expands a glob pattern to find matching file paths. @param pattern the file path pattern to match @param conf Configuration object @return PathData array of matched paths or null if no matches found @throws IOException for I/O errors during processing
734 Dumps metadata and properties of a TFile to the specified output stream. @param file path to the TFile @param out PrintStream for output @param conf Configuration settings @throws IOException if an I/O error occurs
735 Reads token storage from a specified file. @param filename path to the token storage file @param conf configuration object for FileSystem operations @return Credentials object loaded from the file @throws IOException if an I/O error occurs during reading or parsing
736 Retrieves and processes libjars from configuration. @param conf Hadoop Configuration object @return Array of URLs for libjars or null if none found
737 Initializes the file system and prepares for logging. @return true if initialization is successful, false otherwise
738 Retrieves the local file system context. @return FileContext object for the local file system @throws UnsupportedFileSystemException if the local file system is not supported
739 Retrieves default FileContext using a new Configuration. @return initialized FileContext object @throws UnsupportedFileSystemException if URI has no valid scheme
740 Constructs a new RPC Server instance. Initializes server with specified configurations and handlers.
741 Constructs a new RPC Server instance. @param protocolClass class of the RPC protocol (deprecated) @param protocolImpl implementation of the RPC protocol @param conf Hadoop configuration object @param bindAddress server's binding address @param port server's listening port @param numHandlers number of handlers for processing requests @param numReaders number of reader threads @param queueSizePerHandler size of the queue per handler @param verbose flag to enable verbose logging @param secretManager SecretManager for managing tokens @param portRangeConfig configuration for port range (deprecated) @throws IOException if an error occurs during initialization
742 Constructs an SSLFactory for client or server mode. @param mode connection mode (CLIENT or SERVER) @param conf configuration object with SSL settings
743 Refreshes Service ACL with new configuration and policy provider. @param conf Configuration object containing security settings @param provider PolicyProvider for retrieving service definitions
744 Initiates a failover process between two HA service targets. @param fromSvc source HAServiceTarget to be fenced @param toSvc destination HAServiceTarget to become active @param forceFence flag to force fencing even if not necessary @param forceActive flag to force the target to become active @throws FailoverFailedException if failover fails
745 Sets the local destination path for file operations. @param args list of command-line arguments @throws IOException if an I/O error occurs or invalid URI syntax is found
746 Moves files from local file system to Hadoop file system. @param srcs array of source Paths in local file system @param dst destination Path in Hadoop file system (must be a directory) @throws IOException if any I/O error occurs during moving
747 Copies files from the local file system to the Hadoop file system. @param delSrc flag to delete source files after copy @param overwrite flag to allow overwriting existing files @param srcs array of source Paths in local file system @param dst destination Path in Hadoop file system (must be a directory) @throws IOException if any I/O error occurs during copying
748 Copies a file from local to Hadoop FileSystem without overwriting. @param delSrc flag to delete the source file after copy @param src source Path on local filesystem @param dst destination Path on Hadoop FileSystem @throws IOException if an I/O error occurs
749 Copies a file from the local filesystem to Hadoop. @param delSrc flag to delete the source file after copy @param overwrite flag to allow overwriting existing files @param src source Path on local filesystem @param dst destination Path on Hadoop FileSystem @throws IOException if an I/O error occurs
750 Copies a file from Hadoop FileSystem to local. @param delSrc flag to delete the source file after copy @param src source Path in Hadoop FileSystem @param dst destination Path in local file system @throws IOException if an I/O error occurs
751 Allocates a local path for writing files. @param pathStr file path string @param size required file size or SIZE_UNKNOWN for roulette selection @param conf Hadoop configuration object @param checkWrite flag to check write permissions @return Path object for writing, throws DiskErrorException if no valid directory found
752 Retrieves a local file path for reading. @param pathStr relative path to the file @param conf Configuration object @return Path to the file if found, throws DiskErrorException otherwise
753 Retrieves all local paths to read a file. @param pathStr file path string @param conf Configuration object @return Iterable of Path objects for reading @throws IOException if directory operations fail
754 Initializes NflyFSystem with URIs, configuration, and replication settings. @param uris array of file system URIs @param conf Hadoop configuration object @param minReplication minimum number of replicas required @param nflyFlags flags for Nfly operations @param fsGetter factory for creating FileSystem instances @throws IOException if initialization fails due to invalid input or I/O errors
755 Executes commands on all specified source paths. @return exit code: 0 for success, -1 if any error occurs
756 Expands a command argument as a glob pattern. @param arg the input argument to expand @return list of matched PathData objects @throws IOException if no matches are found or I/O error occurs
757 Sets the remote destination path. @param args list of command arguments @throws IOException if there are issues with path expansion or validation
758 Deprecated constructor to initialize a sequence file reader. @param fs FileSystem object @param file path to the sequence file @param conf Hadoop configuration settings @throws IOException if initialization fails or I/O error occurs
759 Initializes a sequence file reader with specified input stream and options. @param in input stream from Hadoop's FileSystem @param buffersize buffer size for reading @param start starting position in the file @param length length of data to read @param conf Hadoop configuration settings @throws IOException if initialization fails or I/O error occurs
760 Creates a SequenceFile reader for the specified data file. @param dataFile path to the data file @param conf Hadoop configuration settings @param options additional reader options @return initialized SequenceFile.Reader instance @throws IOException if initialization fails or I/O error occurs
761 Reads the next raw key from a sequence file segment. Initializes reader if not already set, checks class compatibility, and reads key. @return true if key is successfully read, false if end of segment reached @throws IOException if an I/O error occurs or class mismatch
762 Initializes a SequenceFile writer with specified options. @param conf Hadoop configuration settings @param opts variable number of file writing options @throws IOException if initialization fails or options are inconsistent
763 Main method for processing TFile paths. Prints version info and dumps metadata to the console. @param args array of TFile paths
764 Writes credentials to a file in the specified format. @param f File object representing the output file @param format desired serialization format ("writable" or "protobuf") @param creds Credentials object containing tokens to write @param conf Hadoop configuration object @throws IOException if an I/O error occurs
765 Rolls log directory if necessary, handling initialization and file operations. @throws MetricsException if an error occurs during log rolling
766 Retrieves all JAR files in a specified directory. @param path directory path to search, appends wildcard if not present @param useLocal flag to determine if local file system should be used @return List of Path objects representing JAR files
767 Constructs a new RPC Server instance with default settings. @param protocolClass class of the RPC protocol (deprecated) @param protocolImpl implementation of the RPC protocol @param conf Hadoop configuration object @param bindAddress server's binding address @param port server's listening port @throws IOException if an error occurs during initialization
768 Deprecated constructor for creating an RPC Server instance. @param protocolImpl implementation of the RPC protocol @param conf Hadoop configuration object @param bindAddress server's binding address @param port server's listening port @param numHandlers number of handlers for processing requests @param numReaders number of reader threads @param queueSizePerHandler size of the queue per handler @param verbose flag to enable verbose logging @param secretManager SecretManager for managing tokens @throws IOException if an error occurs during initialization
769 Processes out-of-band RPC requests. Handles connection context, SASL authentication, and ping messages. @param header request header containing call ID @param buffer input buffer with serialized data @throws RpcServerException, IOException, InterruptedException on errors
770 Establishes a secure or plain URL connection. @param url target URL for the connection @return established URLConnection object @throws Exception on connection errors
771 Copies a file from local to Hadoop FileSystem without deleting the source. @param src source Path on local filesystem @param dst destination Path on Hadoop FileSystem @throws IOException if an I/O error occurs
772 Moves a file from local to Hadoop FileSystem. @param src source Path on local filesystem @param dst destination Path on Hadoop FileSystem @throws IOException if an I/O error occurs
773 Copies a file from the local filesystem to Hadoop FileSystem. @param delSrc flag to delete the source file after copy @param src source Path on local filesystem @param dst destination Path on Hadoop FileSystem @throws IOException if an I/O error occurs
774 Copies a file from Hadoop FileSystem to local. @param src source Path in Hadoop FileSystem @param dst destination Path in local file system @throws IOException if an I/O error occurs
775 Moves a file from Hadoop FileSystem to local. @param src source Path in Hadoop FileSystem @param dst destination Path in local file system @throws IOException if an I/O error occurs
776 Copies a file from Hadoop FileSystem to local. @param delSrc flag to delete the source file after copy @param src source Path in Hadoop FileSystem @param dst destination Path in local file system @throws IOException if an I/O error occurs
777 Allocates a local path for writing files. @param pathStr file path string @param size required file size or SIZE_UNKNOWN for roulette selection @param conf Hadoop configuration object @param checkWrite flag to check write permissions @return Path object for writing, throws IOException if no valid directory found
778 Creates a temporary file for writing in the specified directory. @param pathStr base path string @param size required file size or SIZE_UNKNOWN @param conf Hadoop configuration object @return File object representing the created temporary file
779 Retrieves a local file path for reading within a specific context. @param pathStr relative path to the file @param conf Configuration object @return Path to the file if found, throws IOException otherwise
780 Retrieves all local paths for reading a file. @param pathStr file path string @param conf Configuration object @return Iterable of Path objects for reading @throws IOException if directory operations fail
781 Initializes NflyFSystem with URIs, configuration, and replication settings. @param uris array of file system URIs @param conf Hadoop configuration object @param minReplication minimum number of replicas required @param nflyFlags flags for Nfly operations @throws IOException if initialization fails due to invalid input or I/O errors
782 Creates an NflyFSystem instance with specified URIs, configuration, and settings. @param uris array of file system URIs @param conf Hadoop configuration object @param settings key-value pairs for configuring minReplication and flags @param fsGetter factory for creating FileSystem instances @return NflyFSystem instance configured with provided parameters @throws IOException if initialization fails due to invalid input or I/O errors
783 Expands command arguments as glob patterns. @param args list of raw command-line arguments @return LinkedList of PathData objects representing expanded paths @throws IOException if expansion fails for any argument
784 Retrieves and writes delegation tokens to a file. @param tokenFile File to store the token @param fileFormat Serialization format ("writable" or "protobuf") @param alias Token alias (optional) @param service Service name @param url Service URL @param renewer User allowed to renew the token @param conf Hadoop configuration @throws Exception if an error occurs during token retrieval or writing
785 Aliases a token service in a credentials file. @param tokenFile the file containing tokens @param fileFormat the format of the credentials file ("writable" or "protobuf") @param alias the new service alias @param service the original service to be aliased @param conf Hadoop configuration settings @throws Exception if an error occurs during processing
786 Appends tokens from multiple files to a single output file. @param tokenFiles list of input token files @param fileFormat serialization format for the output file @param conf Hadoop configuration settings @throws IOException if an I/O error occurs
787 Removes a token from the specified file by alias. @param cancel indicates whether to cancel the token if managed @param tokenFile file containing serialized tokens @param fileFormat desired serialization format ("writable" or "protobuf") @param alias unique identifier for the token to remove @param conf Hadoop configuration object @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
788 Renews delegation tokens in a specified token file. @param tokenFile File containing the tokens to renew @param fileFormat Format of the token storage ("writable" or "protobuf") @param alias Text alias for matching specific tokens (optional) @param conf Hadoop configuration settings @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
789 Imports a token from a base64 string into a credentials file. @param tokenFile file to store the token @param fileFormat format of the credentials file ("writable" or "protobuf") @param alias unique identifier for the token service @param base64 base64-encoded token string @param conf Hadoop configuration settings @throws IOException if an I/O error occurs
790 Retrieves all JAR files in a specified directory using the local file system. @param path directory path to search @return List of Path objects representing JAR files
791 Deprecated constructor for creating a new RPC Server. @param instance implementation of the RPC protocol @param conf Hadoop configuration object @param bindAddress server's binding address @param port server's listening port @throws IOException if an error occurs during initialization
792 Processes one RPC request from a ByteBuffer. Handles deserialization, header validation, and request processing. @param bb input buffer containing serialized RPC data
793 Processes log level URL by connecting and reading its content. @param urlString URL string for the log level operation @throws Exception on connection or I/O errors
794 Completes local file output by moving it to Hadoop FileSystem. @param fsOutputFile destination Path on Hadoop FileSystem @param tmpLocalFile temporary source Path on local filesystem @throws IOException if an I/O error occurs
795 Copies a file or directory from Hadoop FileSystem to local. @param src source Path in Hadoop FileSystem @param dst destination Path in local file system @param copyCrc if true, copies checksum file as well @throws IOException if an I/O error occurs
796 Allocates a local path for writing files. @param pathStr file path string @param size required file size or SIZE_UNKNOWN for roulette selection @param conf Hadoop configuration object @return Path object for writing, throws IOException if no valid directory found
797 Creates a temporary file for writing in the specified directory. @param pathStr base path string @param size required file size or SIZE_UNKNOWN @param conf Hadoop configuration object @return File object representing the created temporary file @throws IOException if an I/O error occurs
798 Processes raw command-line arguments by expanding them as glob patterns and then processing. @param args LinkedList of raw command-line arguments @throws IOException if an I/O error occurs during expansion or processing
799 Creates a SequenceFile writer with specified configuration and options. @param conf Hadoop configuration settings @param opts additional options for writer setup @return Writer instance based on compression type @throws IOException if an I/O error occurs during initialization
800 Creates a JAR file with expanded class path entries. @param inputClassPath original class path string @param pwd working directory path @param targetDir target directory for relative paths @param callerEnv environment variables map @return array containing created JAR path and unexpanded wildcards @throws IOException if I/O error occurs
801 Validates and processes file paths, expanding wildcards if specified. @param files comma-separated list of file paths @param expandWildcard flag to enable wildcard expansion @return processed file paths as a single string @throws IOException if an I/O error occurs or path is invalid
802 Reads and processes incoming data from the channel. Handles connection header, authentication, and RPC requests. @return number of bytes read or -1 if processing is complete or an error occurs @throws IOException if I/O error occurs during reading or processing @throws InterruptedException if thread is interrupted while waiting for data
803 Unwraps incoming SASL packet and processes contained RPCs. @param inBuf input buffer containing encrypted data @throws IOException if an I/O error occurs @throws InterruptedException if the thread is interrupted
804 Retrieves log level for a specified class. @throws Exception on connection or I/O errors
805 Sets log level for a specified class. @throws Exception on processing errors
806 Creates a KeyProvider for the specified URI and configuration. @param providerUri URI of the KMS server @param conf Hadoop configuration object @return LoadBalancingKMSClientProvider instance or null if unsupported scheme @throws IOException if there's an error in creating providers
807 Completes local file output by moving it to Hadoop FileSystem. @param fsOutputFile destination Path on Hadoop FileSystem @param tmpLocalFile temporary source Path on local filesystem @throws IOException if an I/O error occurs
808 Creates a temporary file for writing in the specified directory. @param pathStr base file path string @param size required file size or SIZE_UNKNOWN for roulette selection @param conf Hadoop configuration object @return File object representing the created temporary file
809 Allocates a local path for writing files. @param pathStr file path string @param conf Hadoop configuration object @return Path object for writing or throws IOException if no valid directory found
810 Executes the command with given arguments. @param argv command-line arguments @return exit code indicating success or failure
811 Initializes a new Reader to access data from a specified Hadoop file. @param fs FileSystem instance for file operations @param file path to the ArrayFile @param conf Configuration settings for the file system @throws IOException if an I/O error occurs while opening the file
812 Constructs a Reader to access SequenceFile data. @param fs Hadoop FileSystem instance @param dirName directory containing SequenceFiles @param comparator WritableComparator for key comparison @param conf Hadoop configuration settings @throws IOException if initialization fails or I/O error occurs
813 Deprecated constructor for initializing a Reader. @param fs FileSystem instance (unused) @param dirName directory name containing data and index files @param conf Hadoop configuration settings @throws IOException if initialization fails or I/O error occurs
814 Constructs a Reader for accessing MapFile data. @param fs FileSystem instance @param dirName directory containing data and index files @param comparator WritableComparator for sorting or comparing data @param conf Hadoop configuration settings @throws IOException if initialization fails or I/O error occurs
815 Clones file attributes from an input to an output path. @param inputFile source Hadoop path @param outputFile destination Hadoop path @param prog Progressable for tracking progress @return SequenceFile Writer with cloned attributes @throws IOException if I/O operations fail
816 Fixes a MapFile by creating an index if missing. @param fs Hadoop FileSystem instance @param dir directory containing the MapFile @param keyClass class of keys in the MapFile @param valueClass class of values in the MapFile @param dryrun true for simulation without actual changes @param conf Hadoop configuration settings @return number of entries processed or -1 if no fix was needed @throws Exception if an error occurs during fixing
817 Creates a SequenceFile writer. @param fs Hadoop file system @param conf configuration settings @param name file path @param keyClass class type for keys @param valClass class type for values @return Writer instance configured with specified parameters @throws IOException if an I/O error occurs
818 Creates a SequenceFile writer. @param fs Hadoop FileSystem instance @param conf Hadoop configuration settings @param name file path for the sequence file @param keyClass class type for keys @param valClass class type for values @param compressionType compression type to use @return Writer instance configured with specified parameters @throws IOException if an I/O error occurs during initialization
819 Creates a SequenceFile writer with specified parameters. @param fs Hadoop FileSystem instance @param conf Hadoop configuration settings @param name file path for the sequence file @param keyClass class type for keys @param valClass class type for values @param compressionType compression method to use @param progress Progressable object for tracking progress @return Writer instance configured with provided parameters @throws IOException if an I/O error occurs during setup
820 Creates a SequenceFile writer for the specified file system and path. @param fs Hadoop FileSystem instance @param conf Hadoop configuration settings @param name file path where the sequence file will be created @param keyClass class type for the keys in the sequence file @param valClass class type for the values in the sequence file @param compressionType type of compression to apply (NONE, RECORD, BLOCK) @param codec compression codec to use, defaults to DefaultCodec if null and type is not NONE @return Writer instance configured with specified parameters @throws IOException if an I/O error occurs during initialization
821 Creates a SequenceFile writer with specified parameters. @param fs FileSystem to write to @param conf Hadoop configuration settings @param name file path for the sequence file @param keyClass class type for keys @param valClass class type for values @param compressionType type of compression to use @param codec compression codec, defaults if null and compressionType is not NONE @param progress Progressable object for tracking progress @param metadata file metadata @return Writer instance configured with provided parameters @throws IOException if an I/O error occurs during writer creation
822 Creates a SequenceFile writer with specified configurations. @param fs FileSystem instance for file operations @param conf Hadoop configuration settings @param name Path to the sequence file @param keyClass Class type for keys @param valClass Class type for values @param bufferSize Buffer size for writing @param replication Replication factor for the file @param blockSize Block size in bytes @param compressionType Compression type for the file @param codec Compression codec to use @param progress Progressable object for tracking progress @param metadata Metadata configuration for the file @return Writer instance configured with specified options @throws IOException if an I/O error occurs during initialization
823 Creates a SequenceFile writer with specified parameters. @deprecated Use the new createWriter method instead. @param fs Hadoop FileSystem instance @param conf Hadoop Configuration settings @param name file path for the sequence file @param keyClass class type for keys @param valClass class type for values @param compressionType type of compression to use @param codec compression codec, can be null @param progress Progressable object for tracking progress @return Writer instance configured with specified options @throws IOException if an I/O error occurs during initialization
824 Creates a SequenceFile writer with specified configuration and options. @param conf Hadoop configuration settings @param out output stream for the file @param keyClass class type for keys @param valClass class type for values @param compressionType type of compression to use @param codec compression codec, defaults to DefaultCodec if null and type is not NONE @param metadata additional metadata for the file @return Writer instance based on provided parameters @throws IOException if an I/O error occurs during initialization
825 Creates a SequenceFile writer with specified configuration and options. @param conf Hadoop configuration settings @param out output stream for the sequence file @param keyClass class of keys in the sequence file @param valClass class of values in the sequence file @param compressionType type of compression to apply @param codec compression codec, defaults to DefaultCodec if null and type is not NONE @return Writer instance based on given parameters @throws IOException if an I/O error occurs during writer creation
826 Validates and processes file paths without wildcard expansion. @param files comma-separated list of file paths @return processed file paths as a single string @throws IOException if an I/O error occurs or path is invalid
827 Sends log level request based on operation. @throws HadoopIllegalArgumentException for invalid operations @throws Exception on connection or processing errors
828 Creates a DataBlock for writing data. @param index unique block identifier @param limit maximum capacity of the block @param statistics upload statistics tracker @return DataBlock object encapsulating the created file @throws IOException if file creation fails
829 Generates a temporary file path for caching. @param conf Hadoop configuration object @param localDirAllocator directory allocator for writing files @return Path object with POSIX file permissions set @throws IOException if an I/O error occurs
830 Executes a Hadoop file system command. Initializes FsShell, sets up tracing, and runs the specified command. @param argv command-line arguments @return exit code indicating success or failure
831 Initializes a new instance of the Reader class. @param fs FileSystem instance (unused) @param dirName directory name containing data and index files @param conf Hadoop configuration settings @throws IOException if initialization fails or I/O error occurs
832 Merges sorted segments into a final output file. @return RawKeyValueIterator for the merged data @throws IOException if an I/O error occurs during merging
833 Initializes a new Writer for creating SequenceFiles. @param conf Hadoop configuration settings @param fs FileSystem object for file operations @param dirName directory path for the SequenceFile @param comparator custom key comparator @param compress compression type for the SequenceFile @throws IOException if an I/O error occurs during initialization
834 Initializes a new Writer instance for outputting Writable objects to a file. @param conf Hadoop configuration settings @param fs FileSystem object representing the file system @param file path of the output file @param valClass class type of the Writable values to be written @throws IOException if an I/O error occurs during initialization
835 Initializes a Writer for outputting Writable objects to a file. @param conf Hadoop configuration settings @param fs FileSystem instance @param file target file path @param valClass class of the value to be written @param compress compression type for the file @param progress progress tracking callback @throws IOException if an I/O error occurs
836 Initializes a MapFile writer with specified configuration and options. @param conf Hadoop configuration settings @param fs FileSystem object for file operations @param dirName directory path for the MapFile @param keyClass class type of the keys @param valClass class type of the values @throws IOException if an I/O error occurs during initialization
837 Deprecated constructor for creating a MapFile Writer. Initializes with specified configuration, directory, key and value classes, compression, and progress monitor. @param conf Hadoop configuration settings @param fs FileSystem instance @param dirName directory path for the MapFile @param keyClass key class type @param valClass value class type @param compress Compression type to use @param progress Progressable object for monitoring write progress @throws IOException if an I/O error occurs during initialization
838 Deprecated constructor for creating a MapFile writer. @param conf Hadoop configuration settings @param fs FileSystem instance @param dirName directory path for the MapFile @param keyClass key class type @param valClass value class type @param compress compression type @param codec compression codec @param progress Progressable object @throws IOException if an I/O error occurs during initialization
839 Deprecated constructor for Writer. Initializes a MapFile writer with specified configuration, directory, key and value classes, and compression type. @param conf Hadoop configuration settings @param fs FileSystem instance @param dirName directory path for the MapFile @param keyClass key class type @param valClass value class type @param compress Compression type to be used @throws IOException if an I/O error occurs during initialization
840 Initializes a MapFile writer with specified configuration and options. @param conf Hadoop configuration settings @param fs FileSystem object for the directory path @param dirName directory path for the MapFile @param comparator WritableComparator to be used for sorting keys @param valClass class type to be used as the value @throws IOException if an I/O error occurs during initialization
841 Deprecated constructor for creating a MapFile Writer. @param conf Hadoop configuration settings @param fs FileSystem instance @param dirName directory path for the MapFile @param comparator WritableComparator for key sorting @param valClass value class type @param compress compression type for data @throws IOException if an I/O error occurs during setup
842 Initializes a MapFile writer with specified configuration and options. @param conf Hadoop configuration settings @param fs FileSystem to use for writing @param dirName directory path for the MapFile @param comparator WritableComparator for sorting keys @param valClass value class type @param compress compression type for data @param progress Progressable object for tracking progress @throws IOException if an I/O error occurs during initialization
843 Deprecated constructor for creating a MapFile Writer. @param conf Hadoop configuration settings @param fs FileSystem object @param dirName directory path for the MapFile @param comparator WritableComparator for sorting keys @param valClass value class type @param compress compression type for the file @param codec compression codec to use @param progress Progressable object for tracking progress @throws IOException if an I/O error occurs during initialization
844 Creates a SequenceFile writer with specified configuration and options. @param fc FileContext for file operations @param conf Hadoop configuration settings @param name path to the sequence file @param keyClass class type for keys @param valClass class type for values @param compressionType type of compression to use @param codec compression codec, defaults to DefaultCodec if null and type is not NONE @param metadata additional metadata for the file @param createFlag flags for file creation @param opts additional options for file creation @return Writer instance configured with provided parameters @throws IOException if an I/O error occurs during initialization
845 Main entry point for the Classpath utility. Parses command-line arguments and manages JAR creation or classpath display. @param args command-line arguments
846 Creates a ClassLoader for executing JAR files. @param file the JAR file to load @param workDir the working directory for classpath elements @return a configured ClassLoader instance @throws MalformedURLException if there's an issue with the URLs in the classpath
847 Processes general command line options for Hadoop. @param line CommandLine object containing parsed options @throws IOException if an I/O error occurs during processing
848 Retrieves the cache file path for storing blocks. @param conf Hadoop configuration object @param localDirAllocator directory allocator for writing files @return Path object with POSIX file permissions set @throws IOException if an I/O error occurs
849 Checks if cache space is available for a file. @param fileSize size of the file to be cached @param conf Hadoop configuration object @param localDirAllocator directory allocator for writing files @return true if sufficient space, false otherwise
850 Merges sorted segments into a final output file. @param segments list of segment descriptors to merge @param tmpDir temporary directory for intermediate files @return RawKeyValueIterator for the merged data @throws IOException if an I/O error occurs during merging
851 Merges multiple input files into a single sorted output. @param inNames array of input file paths @param deleteInputs flag to delete input files after processing @param factor merging factor @param tmpDir temporary directory for intermediate results @return RawKeyValueIterator for the merged data @throws IOException if an I/O error occurs during merging
852 Merges input files into a single sorted output. @param inNames array of input file paths @param tempDir temporary directory for intermediate outputs @param deleteInputs flag to delete input files after merging @return RawKeyValueIterator for the merged data @throws IOException if an I/O error occurs during merging
853 Merges segments from a SequenceFile into a final output. @param inName input file path @param indexIn index file path @param tmpDir temporary directory for processing @return RawKeyValueIterator of merged data @throws IOException if an I/O error occurs during merging
854 Initializes a new Writer for creating SequenceFiles. @param conf Hadoop configuration settings @param fs FileSystem object for file operations @param dirName directory path for the SequenceFile @param keyClass class of WritableComparable for keys @param compress compression type for the SequenceFile @throws IOException if an I/O error occurs during initialization
855 Initializes a SequenceFile writer. @param fs FileSystem object for file operations @param dirName directory path for the SequenceFile @param keyClass class type of the keys @throws IOException if an I/O error occurs during initialization
856 Merges multiple input map files into a single output file. @param inMapFiles array of input map file paths @param deleteInputs flag to indicate if input files should be deleted after merge @param outMapFile path for the merged output map file @throws IOException if an I/O error occurs during merging
857 Creates a SequenceFile writer with specified configurations. @param fs Hadoop FileSystem instance @param conf Hadoop Configuration settings @param name Path to the sequence file @param keyClass Class type for keys @param valClass Class type for values @param bufferSize Buffer size for writing @param replication Replication factor for the file @param blockSize Block size in bytes @param createParent Flag to create parent directories if needed @param compressionType Type of compression to use @param codec Compression codec, defaults to DefaultCodec if null and type is not NONE @param metadata Additional metadata for the file @return Writer instance configured with provided parameters @throws IOException if an I/O error occurs during initialization
858 Parses general command line options. @param opts initial Options object to add to @param args command line arguments @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs during processing
859 Caches a block by writing it to a file and updating cache metadata. @param blockNumber unique identifier for the block @param buffer data buffer containing block content @param conf Hadoop configuration object @param localDirAllocator directory allocator for writing files @throws IOException if an I/O error occurs during caching
860 Merges input files into a single sorted output. @param inNames array of input file paths @param deleteInputs flag to delete input files after processing @param tmpDir temporary directory for intermediate results @return RawKeyValueIterator for the merged data @throws IOException if an I/O error occurs during merging
861 Executes a single merge pass on input files. @param tmpDir temporary directory for processing @return 0 indicating successful completion @throws IOException if an I/O error occurs during merging or writing
862 Entry point for running JAR files in Hadoop. @param args command-line arguments including JAR path and main class
863 Initializes and parses command line options. @param conf Hadoop configuration object @param options initial command line options @param args command line arguments @throws IOException if parsing fails
864 Sorts input files and returns an iterator for the sorted data. @param inFiles array of input file paths @param tempDir temporary directory for intermediate results @param deleteInput flag to delete input files after processing @return RawKeyValueIterator for the sorted data @throws IOException if an I/O error occurs during sorting or merging
865 Merges multiple input files into a single sorted output file. @param inFiles array of input file paths @param outFile destination path for the merged file @throws IOException if an I/O error occurs during merging or writing
866 Sorts input files and writes sorted data to output file. @param inFiles array of input paths @param outFile output path for sorted data @param deleteInput flag to delete input files after processing @throws IOException if an I/O error occurs during sorting or merging
867 Constructs a GenericOptionsParser with default Hadoop configuration. @param opts command line options @param args command line arguments @throws IOException if parsing fails
868 Parses command line options with default configuration and options. @param args command line arguments @throws IOException if parsing fails
869 Parses command line options with default settings. @param conf Hadoop configuration object @param args command line arguments @throws IOException if parsing fails
870 Sorts a single input file and writes sorted data to output file. @param inFile input path for the file to be sorted @param outFile output path for sorted data @throws IOException if an I/O error occurs during sorting
871 Creates and returns a GenericOptionsParser. @param conf Hadoop configuration object @param argArray command line arguments array @return GenericOptionsParser instance for parsing options @throws IOException if parsing fails
872 Executes a Hadoop tool with specified configuration and arguments. @param conf Hadoop configuration object @param tool the Tool instance to run @param args command line arguments @return exit code from the tool's execution @throws Exception if an error occurs during execution
873 Parses command-line arguments and updates configuration. @param conf Hadoop configuration object @param args list of command-line arguments @return list of remaining unparsed arguments @throws ServiceLaunchException if parsing fails
874 Executes Kerberos diagnosis tool with given configuration and arguments. @param conf Hadoop configuration object @param argv command line arguments @return exit code from the tool's execution @throws Exception if an error occurs during execution
875 Main entry point for the CredentialShell utility. Initializes and runs the Hadoop tool with user arguments. @param args command line arguments
876 Entry point for executing KeyShell commands. Initializes configuration and runs KeyShell tool. @param args command line arguments
877 Executes a Hadoop tool with specified arguments. @param tool the Tool instance to run @param args command line arguments @return exit code from the tool's execution @throws Exception if an error occurs during execution
878 Extracts and parses command-line options. @param conf Hadoop configuration object @param args list of command-line arguments @return list of unparsed arguments after option extraction
879 Main entry point for Kerberos diagnosis tool. Executes diagnostics and handles exceptions. @param argv command line arguments
880 Main entry point for FsShell. Initializes and runs the Hadoop file system shell. @param argv command line arguments
881 Main entry point for the LogLevel application. Initializes and runs the command-line interface with provided arguments. @param args command line arguments
882 Main entry point for executing FindClass as a Hadoop tool. @param args command line arguments
883 Launches a Hadoop service with command-line arguments and handles exceptions. @param args list of command-line arguments
884 Entry point for the ServiceLauncher application. Parses command-line arguments and delegates to serviceMain. @param args command-line arguments passed to the application
885 Entry point for launching Hadoop services with varargs. Converts command-line arguments to list and delegates to main service handler. @param args variable-length array of command-line arguments
