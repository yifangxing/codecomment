1 Cancels a token by identifier. @param token the token to cancel @param canceller the entity cancelling the token @return TokenIdent of the cancelled token or null if not found @throws IOException if an I/O error occurs
2 Retrieves groups for a given user. @param user username to fetch groups for @return list of group names @throws IOException if an I/O error occurs
3 Extracts a tar file into a directory. @param inFile the tar file to extract @param untarDir the target directory for extraction @throws IOException if an I/O error occurs
4 Changes file permissions. @param filename path to the file @param perm permission string (e.g., "755") @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
5 Sets file readability. @param f the file to modify @param readable desired readability status @return true if operation successful, false otherwise
6 Sets file writable status. @param f the file to modify @param writable desired writable status @return true if operation succeeds, false otherwise
7 Sets file executable permission. @param f the file to modify @param executable true to set as executable, false otherwise @return true if operation succeeds, false otherwise
8 Loads permission information using native or non-native methods.
9 Sets file owner and group. @param p file path @param username new owner's username @param groupname new group name @throws IOException if operation fails
10 Sets file permissions using native methods if group/other differ or on Windows. @param f the File to set permissions on @param permission FsPermission object defining new permissions @throws IOException if an I/O error occurs
11 Caches netgroups from a list. @param groups list of group names to cache @throws IOException if an I/O error occurs
12 Dumps all tokens associated with a user group information. @param ugi UserGroupInformation object containing credentials
13 Logs user information and tokens. @param log Logger instance for logging @param caption Description of the log entry @param ugi UserGroupInformation object containing user details
14 Checks if directory has expected permissions. @param localFS Local file system instance @param dir Directory path to check @param expected Expected file permissions @throws DiskErrorException if disk error occurs @throws IOException if I/O error occurs
15 Checks directory permissions and performs disk I/O operation. @param localFS LocalFileSystem instance @param dir Path to the directory @param expected Expected FsPermission for the directory @throws DiskErrorException if disk error occurs @throws IOException if I/O error occurs
16 Lists file statuses for given paths. @param files array of Path objects to check @return array of FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if a file is not found @throws IOException for other I/O errors
17 Retrieves the used space in bytes for the file system. @return used space in bytes @throws IOException if an I/O error occurs
18 Retrieves block locations for a specified file range. @param file the FileStatus of the file @param start starting offset in the file @param len length of the data to retrieve @return array of BlockLocation objects or empty if none found
19 Opens an input stream for reading a file from the archive. @param f path to the file within the archive @param bufferSize size of the buffer used for reading @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs or the path is not a file
20 Opens a file input stream for reading. @param f the path to the file @param bufferSize size of the buffer @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs @throws UnresolvedLinkException if a symlink could not be resolved
21 Opens a file for reading with specified buffer size. @param f Path to the file @param bufferSize Size of the buffer @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
22 Renames a file or directory and its associated checksum file. @param src source path to be renamed @param dst destination path after renaming
23 Renames a file or directory within the same file system. @param src source path to rename @param dst destination path for renaming @param options optional rename options @throws IOException if an I/O error occurs
24 Adds file statuses to the index under a parent directory. @param parent HarStatus object representing the parent directory @param statuses List to store FileStatus objects @throws IOException if an I/O error occurs
25 Retrieves file status from a given path. @param f file path @return FileStatus object representing the file's metadata @throws IOException if an I/O error occurs
26 Retrieves file status from SFTP server. @param client SFTP channel client @param file path to the file @return FileStatus object or throws exception if not found
27 Retrieves the status of a file on an FTP server. @param client FTPClient instance connected to the server @param file Path object representing the file @return FileStatus object or throws FileNotFoundException if not found
28 Constructs a new MetricsSystemImpl with default settings.
29 Initializes a MutableRollingAverages instance. @param metricValueName name of the metric to track
30 Updates the scheduled task with new parameters. @param windows number of windows for rate calculation @param interval time interval between task executions @param timeUnit unit of time for the interval
31 Rechecks electability based on health and scheduling.
32 Attempts to rejoin election after failing to become active. @param SLEEP_AFTER_FAILURE_TO_BECOME_ACTIVE time to wait before retrying
33 Processes a ZooKeeper watch event. @param zk the ZooKeeper instance @param event the WatchedEvent received
34 Creates an InetSocketAddress from a target and port. @param target hostname or IP address string @param defaultPort port number to use if not specified in target @return InetSocketAddress instance
35 Authenticates request using specified schemes. @param request HTTP request object @param response HTTP response object @return AuthenticationToken or null if unauthorized
36 Checks if only the key exists without a value. @param name property name to check @return true if key exists with default value, false otherwise
37 Retrieves the raw property value by name. Handles deprecation and returns the first non-null property found. @param name property key to retrieve @return raw property value or null if not found
38 Sets a property with a given name and value. @param name the property name, must not be null or empty @param value the property value, must not be null @param source the source of the property update, defaults to "programmatically" if null
39 Removes a property by name, handling deprecations and alternatives. @param name the property name to unset
40 Returns the virtual memory size. @return size of virtual memory in bytes
41 Retrieves the physical memory size. Refreshes data if needed. @return memory size in bytes
42 Returns available virtual memory size. Refreshes data if needed. @return available virtual memory size in bytes
43 Returns available physical memory size. Refreshes data if needed. @return available memory in bytes
44 Returns the number of available processors. Refreshes processor count if needed. @return Number of processors
45 Returns current CPU frequency in kHz. Ensures data is refreshed if needed. @return CPU frequency in kHz
46 Returns cumulative CPU time in milliseconds. Refreshes data if needed.
47 Returns CPU usage percentage. Refreshes data if needed. @return CPU usage as a percentage per processor or -1 if unavailable
48 Returns the percentage of used virtual CPU cores. @return float representing the percentage of used vCores, or -1 if not available
49 Retrieves network bytes read. Refreshes data if needed. @return number of bytes read from the network
50 Returns the total network bytes written. Refreshes data if needed. @return Total bytes written to the network
51 Refreshes cached netgroups by clearing and repopulating. @throws IOException if an I/O error occurs during refresh
52 Updates the filesystem status for a given mount point. @param viewFileSystem the ViewFileSystem instance to query @param mountPointMap map of MountPoints to their FsStatus @param mountPoint the specific mount point to update @param path the path associated with the mount point
53 Lists file statuses for a given path. @param f the path to list @return array of FileStatus objects @throws IOException if an I/O error occurs
54 Retrieves file link status. @param f path to the file @param dereference whether to resolve symbolic links @return FileStatus object
55 Retrieves file status for a given path. @param f the path of the file @return FileStatus object with viewfs URI @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnresolvedLinkException if link cannot be resolved @throws IOException on other I/O errors
56 Lists file statuses in a directory. @param f path to the directory @return array of FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if the directory does not exist @throws UnresolvedLinkException if a symlink cannot be resolved @throws IOException for other I/O errors
57 Checks if a file exists in an SFTP channel. @param channel the SFTP channel to check @param file the path of the file to verify @return true if the file exists, false otherwise @throws IOException if an I/O error occurs
58 Retrieves file status from SFTP server. @param channel SFTP channel for communication @param sftpFile SFTP entry representing the file @param parentPath parent directory path @return FileStatus object with file details @throws IOException if an I/O error occurs
59 Checks if a given path is a file. @param channel SFTP channel for file operations @param file path to check @return true if the path is a file, false otherwise @throws IOException if an I/O error occurs or file check fails
60 Checks if a file exists on an FTP server. @param client FTP client instance @param file path to the file @return true if file exists, false otherwise
61 Lists file statuses in a directory or returns single file status. @param client FTPClient instance @param file path to the file or directory @return array of FileStatus objects @throws IOException if an I/O error occurs
62 Checks if a given path is a file on an FTP server. @param client FTPClient instance connected to the server @param file Path object representing the file to check @return true if the path is a file, false otherwise
63 Constructs a CBZip2InputStream with specified input stream and read mode. @param in the InputStream to read from @param readMode the READ_MODE for decompression @throws IOException if an I/O error occurs
64 Calculates bytes to next marker in BZip2 stream. @param in input stream of BZip2 data @return number of bytes processed till next marker @throws IOException if I/O error occurs
65 Processes Zookeeper create node result. @param rc operation result code @param path node path @param ctx context object @param name node name
66 Processes result of lock node monitoring. @param rc ZooKeeper return code @param path lock node path @param ctx context object @param stat lock node statistics
67 Creates an InetSocketAddress from a target string. @param target host or address to connect to @return InetSocketAddress object with default port -1
68 Parses address specifications into InetSocketAddress list. @param specs comma or space-separated host:port strings @param defaultPort port to use if not specified in specs @return List of InetSocketAddress objects
69 Builds a DT service name from URI and default port. @param uri the input URI @param defPort default port if not specified in URI @return the constructed service name or null if authority is missing
70 Converts configuration to XML document. @param propertyName specific property name or null for all properties @param redactor object for sensitive data handling @return XML Document representation of configuration @throws IOException if parser configuration fails @throws IllegalArgumentException if specified property is not found
71 Substitutes variables in a string with their values. @param expr input expression containing variables @return modified string with substituted variables or original if unchanged
72 Applies configuration changes based on request parameters. @param out PrintWriter for output messages @param reconf Reconfigurable object to apply changes @param req HttpServletRequest containing parameter values @throws ReconfigurationException if an error occurs during reconfiguration
73 Sets a configuration property. @param name property key @param value property value
74 Sets a property with logging and optional source information. @param name the property name @param value the property value @param source the source of the property (optional)
75 Deletes a directory and its contents recursively. @param dir the directory to delete @param tryGrantPermissions if true, attempts to grant permissions to parent folder @return true if deletion is successful, false otherwise
76 Returns the number of CPU cores. @return Number of CPU cores available
77 Retrieves filesystem status for a given path in a ViewFileSystem. @param fileSystem the ViewFileSystem instance @param path the path to check @return map of MountPoint to FsStatus or throws exception if not applicable
78 Retrieves file status, resolving symlinks to their qualified paths. @param f path to the file or symlink @return FileStatus object with resolved symlink path if applicable @throws IOException if an I/O error occurs
79 Renames a file on an SFTP server. @param channel SFTP channel for operations @param src source file path @param dst destination file path @return true if rename is successful, false otherwise @throws IOException if any I/O error occurs
80 Lists status of files in a directory. @param client SFTP client instance @param file path to the directory or file @return array of FileStatus objects @throws IOException if an I/O error occurs
81 Recursively creates directories on an SFTP server. @param client SFTP client instance @param file path of the directory to create @param permission permissions for the new directory @return true if directory creation was successful, false otherwise @throws IOException if an I/O error occurs
82 Retrieves file statuses matching a given path pattern. @param pathPattern the path pattern to match files against @return an array of FileStatus objects or null if no matches found
83 Retrieves file statuses matching a pattern with a filter. @param pathPattern the path pattern to match files @param filter the filter to apply to matched paths @return an array of FileStatus objects @throws AccessControlException if access is denied @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException if an I/O error occurs
84 Retrieves file status for paths matching a pattern. @param pathPattern the path pattern to match files against @return an array of FileStatus objects representing matched files
85 Retrieves file statuses matching a path pattern with an optional filter. @param pathPattern the path pattern to match files against @param filter the filter to apply to matched paths (can be null) @return array of FileStatus objects or empty if none found @throws IOException if an I/O error occurs during globbing
86 Renames a file on an FTP server. @param client FTPClient instance @param src source path @param dst destination path @return true if rename is successful, false otherwise
87 Deletes a file or directory on an FTP server. @param client FTPClient instance connected to the server @param file path of the file or directory to delete @param recursive true to delete directories recursively, false otherwise @return true if deletion is successful, false if not found @throws IOException if an I/O error occurs or directory is non-empty and recursive is false
88 Creates directories recursively on an FTP server. @param client FTP client instance @param file target directory path @param permission directory permissions @return true if directories were successfully created, false otherwise @throws IOException if an I/O error occurs
89 Converts IP:port to hostname:port. @param ipPort IP:port string @return hostname:port or original string if invalid
90 Retrieves socket address for token service. @param token security token @return InetSocketAddress of the service
91 Builds a token service from a URI. @param uri the URI containing the authority information @return a Text object representing the token service
92 Returns the canonical service name. @return Service name or null if child file systems are present
93 Returns the canonical service name. @return String representing the canonical service name
94 Substitutes common variables in an expression. @param expr input expression with variables @return modified expression with substituted variables
95 Retrieves property value by name, handling deprecation and variable substitution. @param name property key @return property value with variables substituted
96 Retrieves property value by name with variable substitution. @param name property key @param defaultValue default value if property not found @return substituted property value or default
97 Sets an optional key-value pair. @param key unique configuration key @param value associated value for the key @return current builder instance
98 Adds a required key-value pair to the configuration. @param key unique configuration key @param value associated value for the key @return current builder instance for method chaining
99 Sets default filesystem URI in configuration. @param conf Configuration object to update @param uri Default filesystem URI to set
100 Adds a link to the configuration. @param conf Configuration object @param mountTableName name of the mount table @param src source path for the link @param target URI of the link target
101 Sets a link merge slash configuration. @param conf Configuration object to update @param mountTableName name of the mount table @param target URI representing the target location
102 Sets a fallback link in the configuration. @param conf Configuration object to update @param mountTableName name of the mount table @param target URI for the fallback link
103 Sets link merge configuration for a table. @param conf Configuration object to update @param mountTableName name of the mounted table @param targets array of target URIs for merging
104 Adds a link configuration for ViewFs. @param conf Configuration object to update @param mountTableName Name of the mount table @param src Source path for the link @param settings Additional settings for the link @param targets Target paths for the link
105 Adds a regex-based link to configuration. @param conf Configuration object to update @param mountTableName Name of the mount table @param srcRegex Source regex pattern @param targetStr Target string for matching paths @param interceptorSettings Optional settings for interceptors
106 Sets the home directory configuration for a given mount table. @param conf Configuration object to update @param mountTableName name of the mount table @param homedir home directory path (must start with '/')
107 Sets the umask in the configuration. @param conf Configuration object to update @param umask File system permission for the umask
108 Sets codec classes in configuration. @param conf Configuration object to update @param classes List of codec classes to set
109 Sets default compression type for a job configuration. @param job Configuration object to modify @param val CompressionType value to set
110 Retrieves proxy user configuration from FilterConfig. @param filterConfig the FilterConfig object containing initialization parameters @return Configuration object with proxyuser settings or empty if none found
111 Parses command line arguments and initializes subcommands. @param args command line arguments array @return 0 on success, 1 on error
112 Sets an integer value by name. @param name key for the value @param value integer to be stored
113 Sets a property with a long value. @param name property name @param value long value to set
114 Sets a named float value. @param name key for the value @param value float to be stored
115 Sets a property with a double value. @param name property name @param value double value to be set
116 Sets a boolean value by converting it to a string. @param name key for the value @param value boolean value to be stored
117 Sets time duration with unit. @param name identifier for the time duration @param value numeric value of the duration @param unit TimeUnit enum representing the time unit
118 Sets storage size with unit. @param name key for storage setting @param value numeric size value @param unit StorageUnit enum representing the unit
119 Sets a named regex pattern. @param name unique identifier for the pattern @param pattern compiled regex pattern to store
120 Sets a string value by combining multiple strings. @param name key under which to store the combined string @param values variable number of strings to concatenate
121 Sets socket address by name. @param name key to identify the socket address @param addr InetSocketAddress object representing the address
122 Sets a class mapping with validation. @param name key for the class mapping @param theClass class to be mapped @param xface interface that theClass must implement
123 Deletes a directory and its contents recursively. @param dir directory to delete @return true if successful, false otherwise
124 Recursively deletes all contents of a directory. @param dir directory to delete contents from @param tryGrantPermissions if true, attempts to grant permissions before deleting @return true if all contents are successfully deleted, false otherwise
125 Lists file statuses in the specified directory. @param f path to the directory @return array of FileStatus objects @throws IOException if an I/O error occurs or directory does not exist
126 Retrieves the status of a file link. @param f path to the file @return FileStatus object, or null if the file is a dangling symlink @throws IOException if an I/O error occurs
127 Deletes a file or directory on an SFTP server. @param channel SFTP channel to operate on @param file path of the file or directory to delete @param recursive true to delete directories recursively @return true if deletion is successful, false otherwise @throws IOException if an I/O error occurs
128 Creates a compressed input stream for reading. @param seekableIn the underlying seekable input stream @param decompressor the decompressor to use @param start the starting position in the stream @param end the ending position in the stream @param readMode the mode for reading data @return a SplitCompressionInputStream for reading @throws IOException if seekableIn is not Seekable or other I/O error occurs
129 Adds metrics for fields annotated with @Metric. @param source object containing the fields @param field specific field to check for annotations
130 Retrieves configuration value by storage type and key. @param conf Configuration object containing settings @param t StorageType indicating the category of configuration @param name Specific key for the configuration setting @return String value of the configuration or null if not found
131 Retrieves the transfer mode from configuration. @param conf Configuration object @return Transfer mode as an integer, defaults to BLOCK_TRANSFER_MODE if invalid or not set
132 Sets FTP client data connection mode based on configuration. @param client FTPClient instance to configure @param conf Configuration object containing settings @throws IOException if an I/O error occurs
133 Retrieves home directory value from configuration. @param conf configuration object @param mountTableName name of the mount table @return home directory path as a string
134 Retrieves the umask from configuration. @param conf Configuration object @return FsPermission object representing the umask
135 Retrieves a list of CompressionCodec classes. @param conf Hadoop configuration object @return List of CompressionCodec classes configured in the system
136 Retrieves default compression type from configuration. @param job Configuration object containing settings @return CompressionType enum, defaulting to RECORD if not specified
137 Converts a security property to a formatted string. @param property the name of the security property @return formatted string with property and its value(s)
138 Validates Hadoop token files from system properties or configuration. @param conf Hadoop configuration object @throws ClassNotFoundException if class not found @throws KerberosDiagsFailure on Kerberos diagnostic failure @throws NoSuchMethodException if method does not exist @throws SecurityException for security violations
139 Loads a Java KeyStore from a file or creates an empty one if it doesn't exist. Sets the key store password and handles exceptions related to keystore operations.
140 Retrieves local host name using configuration or system defaults. @param conf Configuration object containing DNS settings (optional) @return Local host name as a String @throws UnknownHostException if unable to determine the local host name
141 Retrieves client principal from configuration. @param protocol class representing the security protocol @param conf configuration object containing security settings @return client principal string or null if not found
142 Retrieves and trims the string value associated with a key. @param name key to look up in the map @return trimmed string value or null if key is not found
143 Sets a value if it is not already set. @param name key for the value @param value to be set if not already present
144 Retrieves time duration from configuration. @param name key for the configuration value @param defaultValue default time value if not found @param defaultUnit unit of the default time value @param returnUnit desired unit for the returned time duration @return time duration in specified units, or default value if config missing
145 Retrieves storage size with default value and converts to target unit. @param name key for storage size configuration @param defaultValue default value if key is not found @param targetUnit desired unit for the result @return storage size in the specified target unit
146 Retrieves storage size for a given name, converting to target unit. @param name the key to look up in storage @param defaultValue default value if not found @param targetUnit unit to convert the result to @return storage size in target units or default value
147 Retrieves a compiled regex pattern by name, falling back to default if invalid. @param name property name of the regex pattern @param defaultValue pattern to use if named pattern is null or invalid @return compiled Pattern object or default value
148 Retrieves and parses a collection of strings by key. @param name key to fetch the string collection @return parsed Collection of Strings or empty if not found
149 Retrieves an array of strings by key. @param name key to fetch the string value @return array of strings or empty if not found
150 Retrieves strings by name or returns default values. @param name key to fetch string array @param defaultValue default values if key not found @return array of strings from fetched value or default values
151 Retrieves and trims a collection of strings by name. @param name key for the string collection @return trimmed collection of strings or empty list if null
152 Retrieves and trims strings by key. @param name key to fetch string value @return array of trimmed strings or empty if none
153 Retrieves and trims a string array by key. @param name key to fetch the string value @param defaultValue default values to return if none found @return trimmed strings or default values
154 Retrieves properties with a specified prefix. @param confPrefix prefix to filter property names @return Map of filtered properties without the prefix
155 Appends a JSON property to the generator. @param jsonGen JSON generator instance @param config configuration settings @param name property name @param redactor redactor for sensitive values @throws IOException if an I/O error occurs
156 Reconfigures a property if reconfigurable. @param property the name of the property to reconfigure @param newVal the new value for the property @throws ReconfigurationException if property is not reconfigurable
157 Retrieves and logs a configuration property. @param name the property name to retrieve @return the property value or null if not found
158 Retrieves the default mount table name from configuration. @param conf Hadoop configuration object @return Default mount table name as a String
159 Checks if the native bzip2 library is loaded. @param conf configuration object containing library settings @return true if native bzip2 is loaded, false otherwise
160 Retrieves default socket factory from configuration. @param conf Hadoop configuration object @return SocketFactory instance based on configuration or default if not specified
161 Retrieves username from configuration. @param conf Configuration object @return Username string or default if not found
162 Prints configuration option value. @param option configuration key to print
163 Initializes TruststoreKeystore with configuration settings. @param conf Configuration object containing SSL keystore and truststore details
164 Spawns a thread to auto-renew Kerberos credentials. @param force whether to force renewal regardless of conditions
165 Initializes a KeyProvider with the given configuration. Configures serial filter and adds Bouncy Castle provider if specified. @param conf Configuration object containing security settings
166 Retrieves ZooKeeper ACLs from configuration. @param conf Hadoop Configuration object @return List of ACL objects @throws IOException if parsing fails
167 Retrieves hash type from configuration. @param conf Configuration object @return Integer representing the hash type
168 Retrieves an EnumSet from configuration. @param key configuration key @param enumClass Enum class type @param ignoreUnknown whether to ignore unknown values @return EnumSet of parsed enums or empty set if key not found
169 Retrieves an IntegerRanges object based on a configuration key. @param name config key to fetch the value @param defaultValue default value if key is not found @return IntegerRanges object initialized with the fetched or default value
170 Retrieves a configuration value with logging. @param name key for the configuration setting @param defaultValue default value if not found @return configuration value or default
171 Retrieves an option value as a boolean. @param key unique identifier for the option @param value default boolean value if not found @return B object representing the option value
172 Retrieves double value by key with default. @param key unique identifier for the value @param value default double value if not found @return B object containing the double value or default
173 Adds a boolean condition with a specified key. @param key unique identifier for the condition @param value boolean value to be added @return current instance of B
174 Validates and converts a double value to a string. @param key unique identifier for validation @param value the double value to be validated and converted @return B object with validation result
175 Sets default URI in configuration. @param conf Configuration object to modify @param uri String representation of the URI
176 Adds a link for Nfly replication. @param conf HBase configuration @param mountTableName table name to mount @param src source path @param settings replication settings (default if null) @param targets target URIs for replication
177 Sets the index interval in the configuration. @param conf Configuration object to update @param interval new interval value
178 Sets the IPC ping interval in the configuration. @param conf Configuration object to update @param pingInterval new ping interval value in milliseconds
179 Sets the connection timeout in configuration. @param conf Configuration object to update @param timeout Timeout value in milliseconds
180 Sets whether nested mount points are supported. @param conf configuration object @param isNestedMountPointSupported flag indicating support for nested mount points
181 Adds an optional key with multiple string values. @param key the key to add @param values the string values associated with the key @return this builder instance
182 Marks a key as mandatory and sets its string values. @param key the key to be marked as mandatory @param values one or more string values for the key @return this builder instance
183 Updates and returns the connection address for a given name. @param name identifier for the connection @param addr new address to set @return updated InetSocketAddress
184 Sets the RPC engine for a given protocol in configuration. @param conf Configuration object to update @param protocol Protocol class @param engine Engine class implementing RpcEngine
185 Deletes a file or directory. @param p path to the file or directory @param recursive true to delete directories recursively @return true if deletion is successful, false otherwise @throws IOException if an I/O error occurs
186 Deletes all contents of a directory recursively. @param dir directory to delete contents from @return true if successful, false otherwise
187 Retrieves file status. @param f file path @return FileStatus object @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws IOException for other I/O errors
188 Lists file statuses in a directory. @param f path to the directory @return array of FileStatus objects representing files and directories @throws AccessControlException if access is denied @throws FileNotFoundException if the directory does not exist @throws IOException on input/output errors
189 Creates a new file with specified parameters. @param f file path @param overwrite flag to allow overwriting existing files @param bufferSize buffer size in bytes @param replication number of blocks to replicate @param blockSize block size in bytes @param progress progress callback @return FSDataOutputStream for writing data @throws IOException if an I/O error occurs
190 Returns the file system permission mask. @return FsPermission object representing the umask
191 Creates a BlockFactory based on the specified type. @param keyToBufferDir directory for key to buffer mapping @param configuration configuration settings @param name type of block factory (e.g., DATA_BLOCKS_BUFFER_ARRAY) @return BlockFactory instance or throws IllegalArgumentException if unsupported
192 Initializes compression codecs from configuration. @param conf Hadoop configuration
193 Retrieves trimmed string value or default if null. @param name key to fetch value @param defaultValue value to return if key is null @return trimmed string value or default
194 Retrieves an integer value by name, defaulting to a specified value. @param name the key for the value to retrieve @param defaultValue the value to return if no valid integer is found @return parsed integer or default value
195 Retrieves a long value by name, defaulting to a specified value. @param name key for the value @param defaultValue value to return if not found or invalid @return parsed long value or default if conversion fails
196 Retrieves a long value from a string with binary prefix. @param name key to fetch the string value @param defaultValue default long value if conversion fails or key is not found @return parsed long value or default
197 Retrieves a float value by name. @param name the key to look up the value @param defaultValue the default value to return if not found @return the parsed float or default value if parsing fails
198 Retrieves a double value by key. @param name the key for the value @param defaultValue default value to return if key not found or conversion fails @return parsed double value or default if invalid or missing
199 Retrieves a boolean value by name, returning a default if invalid. @param name the key for the boolean value @param defaultValue the default boolean value to return if not found or invalid @return the parsed boolean value or the default if invalid
200 Retrieves a class by name, returning a default if not found. @param name the fully qualified class name @param defaultValue the class to return if name is null or invalid @return the Class object or defaultValue
201 Sets a boolean value if it is unset. @param name key for the setting @param value boolean value to set
202 Retrieves time duration with default and specified units. @param name key for time duration @param defaultValue default time value if not found @param unit primary time unit @return time duration in the specified unit or default value
203 Retrieves SASL properties from configuration. @param conf Configuration object @param configKey key for QOP configuration @param defaultQOP default QualityOfProtection if not specified @return Map of SASL properties including QOP and server auth
204 Converts string array to integer array. @param name key for fetching trimmed strings @return array of integers from parsed strings
205 Retrieves an array of Class objects by name. @param name property key for class names @param defaultValue default classes if none found @return array of Class objects or default value
206 Retrieves a file from a set of directories based on the path. @param dirsProp property name for directory list @param path relative file path @return File object if found or created, throws IOException otherwise
207 Initializes a SerializationFactory with configurations. @param conf Configuration object containing serialization settings
208 Retrieves configuration properties with a specified prefix. @param conf Configuration object containing all properties @param confPrefix Prefix to filter properties by @return Map of filtered properties
209 Retrieves configuration properties with a specified prefix. @param conf Configuration object containing all settings @param confPrefix Prefix to filter property keys by @return Map of filtered properties with matching keys and values
210 Propagates configuration options to a FSBuilder. @param builder the FSBuilder to configure @param conf the Configuration object containing properties @param prefix the property prefix to filter by @param mandatory whether properties are required or optional
211 Prints configuration changes in a form for reconfiguration. @param out PrintWriter to output HTML @param reconf Reconfigurable object to fetch configurations from
212 Adds a link to the default mount table. @param conf configuration object @param src source path @param target target URI
213 Adds a link with a merged slash to configuration. @param conf Configuration object @param target Target URI
214 Adds a fallback link to configuration. @param conf configuration object @param target URI of the target resource
215 Adds link merge to configuration. @param conf Hadoop configuration object @param targets array of target URIs
216 Sets home directory configuration. @param conf Hadoop configuration object @param homedir home directory path
217 Retrieves home directory value from configuration. @param conf configuration object @return home directory path as a string
218 Creates an encoder for erasure coding. @param conf configuration settings @param options erasure codec options @return ErasureEncoder object
219 Creates an ErasureDecoder for the given configuration and options. @param conf Configuration object @param options ErasureCodecOptions specifying codec settings @return ErasureDecoder instance
220 Returns the appropriate Bzip2 compressor class. @param conf configuration object @return Bzip2Compressor if native library is loaded, otherwise BZip2DummyCompressor
221 Returns the appropriate Bzip2 decompressor class. @param conf configuration object @return Bzip2Decompressor if native library is loaded, otherwise BZip2DummyDecompressor
222 Returns a Bzip2 decompressor based on configuration. @param conf Configuration object @return Decompressor instance, either native or dummy
223 Retrieves a socket factory based on configuration. @param conf configuration object @param clazz class for which to find the socket factory @return SocketFactory instance or default if not specified
224 Constructs a HadoopZookeeperFactory with specified principals and keytab. @param zkPrincipal Zookeeper principal @param kerberosPrincipal Kerberos principal @param kerberosKeytab Path to Kerberos keytab file
225 Initializes SSL context and related components. @throws GeneralSecurityException if security setup fails @throws IOException if I/O error occurs during initialization
226 Checks if authentication method is simple. @param conf configuration object @return true if authentication is simple, false otherwise
227 Sets configuration for authentication rules. @param conf Configuration object containing security settings @throws IOException if Kerberos realm cannot be retrieved
228 Retrieves an instance of CryptoCodec based on configuration and cipher suite. @param conf Configuration object @param cipherSuite Cipher suite to match @return CryptoCodec instance or null if none found
229 Retrieves a Hash instance based on configuration. @param conf Configuration object containing hash settings @return Hash instance corresponding to configuration
230 Builds a FlagSet from configuration. @param enumClass type of enum for the flag set @param conf configuration source @param key configuration key prefix @param ignoreUnknown whether to ignore unknown values @return FlagSet containing parsed enum flags
231 Writes XML representation of a property to a Writer. @param propertyName name of the property to write or null for all properties @param out Writer to output the XML @param config Configuration object (optional) @throws IOException if an I/O error occurs @throws IllegalArgumentException if invalid arguments are provided
232 Dumps configuration properties to a JSON writer. @param config Configuration object to be dumped @param out Writer to output the JSON data @throws IOException if an I/O error occurs during writing
233 Retrieves a long value associated with a key. @param key the key to look up @param value default value if key not found @return the long value or default if key is null or missing
234 Retrieves long value for a key, defaulting to float cast. @param key unique identifier for the value @param value default float value if key not found @return B object with long value or default
235 Retrieves an optional long value for a given key, defaulting to a specified double. @param key unique identifier for the value @param value default double value if key is not found @return B object with the retrieved or default value
236 Ensures a condition is met by delegating to mustLong. @param key unique identifier for the condition @param value integer value to check @return result of mustLong method
237 Creates a MetricsSource from an object. @param source object to extract metrics from @return MetricsSource instance built from the source
238 Creates a new file with specified parameters. @param f file path @param overwrite if true, existing files are overwritten @param bufferSize buffer size for data transfer @param replication number of block replicas @param blockSize block size in bytes @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
239 Creates a file with specified flags and options. @param f path to the file @param createFlag flags for file creation @param opts additional options for file creation @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
240 Creates a directory with specified permissions. @param dir the path of the directory to create @param permission the permissions for the new directory @param createParent whether to create parent directories if they don't exist @throws IOException if an I/O error occurs
241 Main method to compress or decompress files based on command-line arguments. @param args command-line arguments: -in for encoding, -out for decoding, and file paths
242 Constructs server principal from configuration. @param principalConfig configuration string for the principal @param hostname server's hostname @return constructed principal or original config if invalid @throws IOException on I/O errors
243 Retrieves server principal by replacing hostname pattern. @param principalConfig configuration string for the principal @param addr IP address of the client @return modified principal string or original if no replacement is needed @throws IOException if client address is null or resolution fails
244 Registers an RPC protocol and its implementation. @param rpcKind type of RPC kind @param protocolClass class representing the protocol @param protocolImpl instance implementing the protocol @return current Server instance
245 Creates a KeyProvider using configuration settings. @param conf Configuration object containing key provider details @param configKeyName Name of the configuration key for the key provider URI @return KeyProvider instance or null if URI is invalid @throws IOException if an error occurs during creation
246 Retrieves the default file system URI from configuration. @param conf Configuration object containing file system settings @return Default FileSystem URI with a valid scheme @throws IllegalArgumentException if no scheme is present in the URI
247 Validates Kerberos kinit executable path. Prints and checks if the executable is valid.
248 Retrieves socket address for a given service. @param name service name @param defaultAddress fallback IP address @param defaultPort fallback port number @return InetSocketAddress object
249 Updates connection address using specified properties. @param hostProperty property name for host configuration @param addressProperty property name for address configuration @param defaultAddressValue default address value if not found @param addr original socket address @return updated InetSocketAddress or result of fallback logic
250 Builds and returns a CompletableFuture for opening a file with specified parameters. @return CompletableFuture of FSDataInputStream @throws IOException if an I/O error occurs
251 Builds and opens a file stream with specified parameters. @return CompletableFuture of FSDataInputStream for the file @throws IOException if an I/O error occurs
252 Sets configuration from URI. @param uriInfo URI containing host, port, and user info @param conf Configuration object to update @throws IOException if required information is missing
253 Establishes an SFTP connection using configuration settings. @return connected ChannelSftp object @throws IOException if connection fails
254 Initializes buffer size from file system configuration.
255 Opens an input stream for the specified file path. @param f file path to open @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
256 Opens a file input stream using the specified path handle. @param fd PathHandle of the file to open @return FSDataInputStream for reading from the file @throws IOException if an I/O error occurs
257 Appends data to a file. @param f file path @return FSDataOutputStream for appending @throws IOException if an I/O error occurs
258 Appends data to a file. @param f file path @param appendToNewBlock flag to append to a new block @return FSDataOutputStream for appending
259 Initializes the cache with configuration settings. @param conf Configuration object containing parallel count setting
260 Initializes a Sorter with specified configuration. @param fs FileSystem instance @param comparator RawComparator for key comparison @param keyClass Class of the sort keys @param valClass Class of the values to be sorted @param conf Configuration settings @param metadata Metadata associated with sorting
261 Creates a compression output stream. @param out underlying output stream @param compressor compressor to use @return CompressionOutputStream for writing compressed data
262 Creates a compression input stream using the specified decompressor. @param in input stream to be compressed @param decompressor decompressor to use for decompression @return CompressionInputStream for reading decompressed data @throws IOException if an I/O error occurs
263 Creates an LZ4 decompressor with configured buffer size. @return Lz4Decompressor instance initialized with bufferSize
264 Creates a compression output stream. @param out underlying output stream @param compressor compressor to use @return CompressionOutputStream for writing compressed data @throws IOException if an I/O error occurs
265 Creates a compression input stream for reading bzip2 files. @param in the input stream to read from @param decompressor the decompressor to use @return CompressionInputStream for reading compressed data
266 Creates a compression output stream. @param out the underlying output stream @param compressor the compressor to use @return CompressionOutputStream configured with Snappy settings @throws IOException if an I/O error occurs
267 Creates a Snappy compressor with configured buffer size. @return SnappyCompressor instance
268 Creates a compressed input stream. @param in input stream to be compressed @param decompressor decompressor for the compression @return CompressionInputStream for reading compressed data
269 Creates a Snappy decompressor with configured buffer size. @return SnappyDecompressor instance
270 Copies bytes from input stream to output stream with buffer size configuration. @param in source InputStream @param out destination OutputStream @param conf Configuration object containing buffer size settings
271 Copies bytes from input stream to output stream. @param in source InputStream @param out destination OutputStream @param conf configuration object @param close flag to close streams after copy
272 Retrieves buffer size from configuration. @param conf Configuration object @return Buffer size as integer
273 Sets configuration and initializes script settings. @param conf Configuration object containing script details
274 Retrieves buffer size from configuration. @param conf Configuration object @return Buffer size integer value
275 Parses the number of priority levels from configuration. @param ns namespace prefix for configuration keys @param conf Configuration object @return parsed number of levels, at least 1
276 Retrieves RPC timeout from configuration. @param conf Configuration object @return Timeout value in milliseconds
277 Retrieves ping interval from configuration. @param conf Configuration object @return Ping interval in milliseconds, default if key not found
278 Retrieves the RPC timeout from configuration. @param conf Configuration object @return Timeout in milliseconds, defaulting to 0 if negative or not set
279 Constructs a LineReader with the specified input stream and configuration. @param in input stream to read from @param conf configuration containing buffer size settings @throws IOException if an I/O error occurs
280 Initializes a LineReader with the given input stream and configuration. @param in InputStream to read from @param conf Configuration object for buffer size @param recordDelimiterBytes Byte array representing the record delimiter @throws IOException if an I/O error occurs
281 Retrieves integer value by name with logging. @param name key for the integer value @param defaultValue default value if not found @return retrieved integer value or default
282 Sets FTP client timeout from configuration. @param client FTPClient instance to configure @param conf Configuration object containing settings
283 Retrieves a long value from options by key. @param key option key @param defVal default value if key is empty or invalid @return long value or default if not found or invalid
284 Returns the default block size. @return Block size in bytes, defaults to 32MB
285 Retrieves a long value by name with logging. @param name key for the value to retrieve @param defaultValue default value if not found @return retrieved long value or default
286 Retrieves a float value by name with logging. @param name key for the float value @param defaultValue default value if not found @return retrieved float value or default if not found
287 Initializes trash settings from configuration. @param conf Hadoop configuration object @param fs FileSystem instance @param home Path to home directory
288 Checks if nested mount points are supported. @param conf configuration object @return true if supported, false otherwise
289 Creates an LZ4 compressor. @return Lz4Compressor instance configured with buffer size and HC setting
290 Retrieves a multiple linear random retry policy from configuration. @param conf configuration object @param retryPolicyEnabledKey key for enabling the retry policy @param defaultRetryPolicyEnabled default value for retry policy enabled @param retryPolicySpecKey key for retry policy specification @param defaultRetryPolicySpec default retry policy specification @return RetryPolicy object or null if not enabled or invalid spec
291 Adds default web applications for logs and static resources. @param parent parent context handler collection @param appDir directory containing application resources @param conf configuration settings @throws IOException if an I/O error occurs
292 Adds default servlets to the configuration. @param configuration Configuration object for setting up servlets
293 Retrieves server failover enable status from configuration. @param namespace configuration namespace @param conf Configuration object @return boolean value of server failover enable or default if not found
294 Initializes a new Client instance with configuration settings. @param valueClass the class type for writable values @param conf Hadoop configuration object @param factory socket factory for creating network connections
295 Deprecated method to check client backoff enabled status. @param prefix configuration key prefix @param conf Configuration object @return boolean indicating if backoff is enabled
296 Checks if client backoff is enabled for a namespace and port. @param namespace configuration namespace @param port service port number @param conf Configuration object @return true if backoff is enabled, false otherwise
297 Retrieves password from configuration. @param name key for the password in config @return char array of password or null if not found
298 Retrieves a boolean configuration property. @param name the property name @param defaultValue the default boolean value if not set @return the boolean value of the property or default
299 Retrieves the FileSystem class for a given scheme. @param scheme URI scheme for the filesystem @param conf configuration object (can be null) @return FileSystem implementation class @throws IOException if no FileSystem is found for the scheme
300 Creates a file system instance from the given URI and configuration. @param uri filesystem URI @param conf configuration settings @return AbstractFileSystem object @throws UnsupportedFileSystemException if unsupported scheme or class not found
301 Retrieves the call queue class for a given namespace and port. @param namespace configuration namespace @param port service port @param conf configuration object @return Class representing the blocking queue implementation
302 Retrieves RPC scheduler class based on configuration. @param namespace configuration namespace @param port service port @param conf configuration object @return RpcScheduler class or default if not specified
303 Retrieves a class by name, ensuring it implements a specified interface. @param name class name to retrieve @param defaultValue default class if not found @param xface interface the class must implement @return subclass of U or null if not found
304 Retrieves or creates a FileSystem instance for given URI and configuration. @param uri the URI of the file system @param conf configuration settings @param key unique identifier for the file system @return FileSystem object, possibly newly created @throws IOException if an I/O error occurs
305 Retrieves shutdown timeout from configuration. @param conf Configuration object @return Shutdown timeout in milliseconds, minimum is TIMEOUT_MINIMUM
306 Retrieves password for a given name from credential providers. @param name the identifier of the credential to retrieve @return character array containing the password, or null if not found @throws IOException if an I/O error occurs during retrieval
307 Parses capacity weights from configuration. @param priorityLevels number of priority levels @param ns namespace for configuration key @param conf configuration object @return array of parsed capacity weights
308 Retrieves filter initializers from configuration. @param conf Configuration object @return Array of FilterInitializer objects or null if config is invalid
309 Retrieves instances of a specified class by name. @param name the name to identify classes @param xface the interface or superclass that retrieved classes must implement @return a list of instances implementing the specified interface/class
310 Initializes a writer with specified configuration and output stream. @param config Hadoop configuration settings @param outStream FSDataOutputStream for writing data @param ownStream flag indicating if the stream is owned by this instance @param key Class of the key objects @param val Class of the value objects @param compCodec Compression codec to use @param meta Metadata associated with the writer @param syncIntervalVal Interval for synchronization operations @throws IOException if initialization fails or serializers are not found
311 Deprecated method to propagate options from configuration. @param builder FSBuilder instance @param conf Configuration object @param prefix option prefix @param mandatory flag for mandatory options
312 Propagates configuration options to FSBuilder. @param builder FSBuilder instance to configure @param conf Configuration source @param optionalPrefix prefix for optional properties @param mandatoryPrefix prefix for mandatory properties @return configured FSBuilder instance
313 Checks availability of native libraries and prints results. @param args command-line arguments: -a for all checks, -h for help
314 Returns the compressor type configured for BZIP2 compression. @return Class representing the BZIP2 compressor type
315 Returns the decompressor type for Bzip2. @return Class of Bzip2 decompressor
316 Creates a Bzip2 decompressor. @return Decompressor instance configured with provided settings
317 Constructs a HadoopZookeeperFactory with specified principal. @param zkPrincipal Zookeeper principal string
318 Looks up groups for a given search result. @param result the search result containing user information @param c the directory context for LDAP operations @param goUpHierarchy flag indicating whether to traverse group hierarchy @return set of group names associated with the user @throws NamingException if an error occurs during LDAP operations
319 Retrieves a CryptoCodec instance based on the configuration. @param conf Configuration object containing cipher suite settings @return CryptoCodec instance initialized with the specified cipher suite
320 Binds a server socket to an address with a specified backlog. @param socket the ServerSocket to bind @param address the InetSocketAddress to bind to @param backlog maximum length of the pending connection queue
321 Dumps configuration property to a Writer. @param config Configuration object @param propertyName Property name to dump @param out Writer for output @throws IOException if an I/O error occurs
322 Creates directories with optional permissions. @param f path of the directory to create @return true if created successfully, false otherwise
323 Retrieves the server's Kerberos principal based on authentication type. @param authType SaslAuth object containing protocol and server ID @return Server Kerberos principal string or null if not supported @throws IOException if there is an issue fetching Kerberos info
324 Decodes a HAR URI to its base URI. @param rawURI the original HAR URI @param conf configuration settings @return decoded base URI or default file system URI if authority is null @throws IOException if URI format is invalid
325 Retrieves FileSystem instance for default URI. @param conf configuration settings @return FileSystem object @throws IOException if an I/O error occurs
326 Initializes the file system with a given URI and configuration. @param name URI of the file system to initialize @param conf configuration settings for the file system @throws IOException if an I/O error occurs during initialization
327 Creates a new FileSystem instance. @param conf configuration settings @return FileSystem object configured with given settings @throws IOException if an I/O error occurs
328 Validates if the given path matches the file system's URI. @param path the path to validate @throws IllegalArgumentException if the path does not match
329 Retrieves socket address with optional host override. @param hostProperty property key for host @param addressProperty property key for address @param defaultAddressValue default address if not specified @param defaultPort default port number @return InetSocketAddress object
330 Creates a file with specified permissions and settings. @param f file path to create @param permission file permissions @param overwrite flag to overwrite existing file @param bufferSize buffer size for output stream @param replication replication factor @param blockSize block size @param progress progressable object @return FSDataOutputStream for writing data @throws IOException if an I/O error occurs
331 Constructs a FutureDataInputStreamBuilderImpl with given file system and path. @param fileSystem the file system to use @param path the path to initialize from
332 Initializes with a file system and path handle. @param fileSystem the file system to use @param pathHandle the path handle for the file
333 Opens a file using the specified instance and filesystem. @param instance DynamicWrappedIO instance for file operations @param fs FileSystem to use for opening the file @param status FileStatus of the file to open @param readPolicies Read policies for optimized file access @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
334 Checks if appending to the file system is supported. @param fs FileSystem object to check @return true if append operation is supported, false otherwise
335 Initializes a Sorter with specified parameters. @param fs FileSystem instance @param comparator RawComparator for sorting keys @param keyClass Class of the sort keys @param valClass Class of the values @param conf Configuration settings
336 Constructs a Bzip2Compressor with configuration settings. @param conf Configuration object containing compression parameters
337 Reinitializes the compressor with a new configuration. @param conf configuration settings for compression
338 Initializes SequenceFile reader. @param tempReader flag indicating temporary reader status @throws IOException if file read fails or format is incorrect
339 Reinitializes the compressor with a new configuration. @param conf Configuration object containing settings
340 Prepares to append a value. @param length expected length of the value; if negative, uses buffer @return DataOutputStream for appending value @throws IOException on I/O errors
341 Initializes a WBlockState with given parameters. @param compressionAlgo the compression algorithm to use @param fsOut file system output stream @param fsOutputBuffer buffer for file system output @param conf configuration settings @throws IOException if an I/O error occurs
342 Sets configuration for the current instance and its raw mapping. @param conf Configuration object to be set
343 Sets configuration and initializes script name. @param conf Configuration object to be set
344 Creates an Options instance using the provided configuration. @param conf Configuration object to initialize Options @return Options instance initialized with the given configuration
345 Retrieves the RPC timeout from configuration. @param conf Configuration object @return Timeout value in milliseconds, or -1 if not set
346 Establishes an FTP connection using configuration settings. @return connected FTPClient instance @throws IOException if connection fails
347 Retrieves positive long value for a given key. @param key configuration key @param defVal default value if key is not found or has negative value @return positive long value or default if negative
348 Retrieves default server settings. @return FsServerDefaults object with configured values @throws IOException if configuration retrieval fails
349 Returns the default block size. @param f file path (not used) @return default block size in bytes
350 Reports a checksum failure by moving the corrupted file to a backup directory. @param p path to the corrupted file @param in input stream of the corrupted file @param inPos position in the input stream @param sums input stream of the checksum file @param sumsPos position in the checksum stream @return always false, indicating failure
351 Constructs a new instance using a Builder. @param builder configuration for caching space used retrieval @throws IOException if an I/O error occurs during construction
352 Reads the next record from the sequence file. @param buffer output buffer to store the record data @return length of the key in bytes, or -1 if end of file is reached @throws IOException if an I/O error occurs or block compression is used
353 Retrieves default retry policy based on configuration. @param conf Configuration object @param retryPolicyEnabledKey Key for enabling retry policy @param defaultRetryPolicyEnabled Default retry policy enabled status @param retryPolicySpecKey Key for retry policy specification @param defaultRetryPolicySpec Default retry policy specification @param remoteExceptionToRetry RemoteException class to retry on @return RetryPolicy object or TRY_ONCE_THEN_FAIL if none configured
354 Constructs a Client with specified value class and configuration. @param valueClass type of writable objects to handle @param conf Hadoop configuration settings
355 Retrieves a cached or new client instance. @param conf configuration settings @param factory socket factory for connections @param valueClass class type for writable values @return Client object from cache or newly created
356 Excludes incompatible credential providers from configuration. @param config original Configuration object @param fileSystemClass FileSystem class to check compatibility against @return new Configuration with incompatible providers removed
357 Retrieves an abstract file system for a given URI and configuration. @param uri the target URI @param conf the configuration settings @return AbstractFileSystem instance @throws UnsupportedFileSystemException if the URI scheme is unsupported
358 Builds a Server instance. @throws IOException if an I/O error occurs @throws HadoopIllegalArgumentException if required fields are not set
359 Creates a TrashPolicy instance. @param conf configuration settings @param fs file system reference @param home home directory path @return configured TrashPolicy object
360 Retrieves the appropriate TrashPolicy instance. @param conf configuration settings @param fs file system reference @return configured TrashPolicy object
361 Creates a new instance of DomainNameResolver based on configuration. @param conf Configuration object containing settings @param configKey Key to retrieve resolver class from configuration @return New DomainNameResolver instance
362 Retrieves an instance of SaslPropertiesResolver from configuration. @param conf Configuration object containing resolver class information @return Instance of configured SaslPropertiesResolver or default if not specified
363 Validates and resolves SASL properties. @param saslPropsResolverKey key for SASL property resolver
364 Retrieves an instance of ImpersonationProvider. @param conf configuration object @return configured ImpersonationProvider instance
365 Shuts down the executor gracefully with a timeout. @param conf configuration settings
366 Retrieves password for a given username. @param name the username @return character array of the password or null if not found @throws IOException if an I/O error occurs
367 Creates a raw erasure encoder. @param conf configuration settings @param codec codec name @param coderOptions options for the erasure coder @return RawErasureEncoder instance
368 Creates a raw erasure decoder with fallback options. @param conf configuration settings @param codec erasure codec name @param coderOptions options for the erasure coder @return RawErasureDecoder instance
369 Swaps the current RPC queue with a new one. @param schedulerClass class of the new scheduler @param queueClassToUse class of the new blocking queue @param maxSize maximum size of the new queue @param ns namespace for configuration @param conf configuration object
370 Initializes a FairCallQueue with specified parameters. @param priorityLevels number of priority levels @param capacity total queue capacity @param ns namespace for logging and metrics @param capacityWeights weights for each queue's capacity @param serverFailOverEnabled flag to enable failover @param conf configuration settings
371 Stores an item in a configuration with a specified key. @param conf Configuration object to store the item @param item Item to be stored @param keyName Key under which the item is stored @throws IOException if an I/O error occurs during storage
372 Loads a configuration value by key and converts it to the specified class. @param conf Configuration object @param keyName key for the configuration value @param itemClass class type of the configuration value @return instance of the specified class or null if not found @throws IOException if an I/O error occurs
373 Stores an array of items in the configuration. @param conf Configuration object to store data @param items Array of items to store @param keyName Key under which to store the items @throws IOException if an I/O error occurs
374 Loads an array from configuration by key. @param conf Configuration object @param keyName key for the array in config @param itemClass class of array items @return array of deserialized objects or empty if not found
375 Initializes a Writer for writing to a file. @param fs FileSystem instance @param conf Configuration settings @param name Path of the file to write @param keyClass Class type for keys @param valClass Class type for values @param bufferSize Size of buffer @param replication Replication factor @param blockSize Block size @param progress Progressable object @param metadata Metadata for the file @throws IOException if an I/O error occurs
376 Copies data from source to destination using serialization. @param conf configuration for serialization @param src source object to copy from @param dst destination object to copy to @return copied destination object @throws IOException if an I/O error occurs during copying
377 Propagates options from configuration to the builder. @param <T> type of the FSBuilder @param <U> subtype of FSBuilder @param builder FSBuilder instance @param conf Configuration object @param optionalPrefix prefix for optional properties @param mandatoryPrefix prefix for mandatory properties @return FSBuilder with propagated options
378 Retrieves groups for a given user. @param user username to search for @param goUpHierarchy number of levels to traverse up the hierarchy @return set of group names or empty if none found @throws NamingException if LDAP operations fail
379 Writes configuration property to output in specified format. @param conf Configuration object @param out Writer for output @param format Output format ("json" or "xml") @param propertyName Property name to write @throws IOException on I/O error @throws IllegalArgumentException if invalid arguments @throws BadFormatException if unsupported format
380 Initializes authentication filter in the given container. @param container FilterContainer to add the filter to @param conf Configuration object containing filter settings
381 Creates a SASL client for authentication. @param authType type of authentication method @return SaslClient object or null if not applicable @throws SaslException if SASL creation fails @throws IOException if I/O error occurs
382 Creates a FileSystem instance for a given URI and configuration. @param uri the uniform resource identifier of the file system @param conf the configuration settings for the file system @return a FileSystem object initialized with the provided URI and configuration @throws IOException if an I/O error occurs during initialization
383 Initializes the ViewFileSystem with given URI and configuration. @param theUri the base URI for the file system @param conf the configuration settings @throws IOException if initialization fails
384 Initializes the file system with a given URI and configuration. @param name URI of the file system @param conf configuration settings for initialization @throws IOException if an I/O error occurs during initialization
385 Qualifies a given path. @param path the path to qualify @return qualified Path object
386 Resolves and returns the path of a given file. @param p the input file path @return the resolved file path @throws IOException if an I/O error occurs
387 Validates file system path. @param path file path to validate
388 Initializes AvroFSInput with file context and path. @param fc FileContext for file operations @param p Path to the file @throws IOException if an I/O error occurs
389 Copies a file or directory from source to destination. @param src source path @param dst destination path @param deleteSource flag to delete source after copy @param overwrite flag to overwrite existing files @return true if operation is successful, false otherwise @throws IOException various I/O exceptions
390 Constructs an FSDataInputStreamBuilder. @param fileSystem the FileSystem to use @param path the Path to read from
391 Initializes an FSDataInputStreamBuilder. @param fileSystem the filesystem to use @param pathHandle the path handle for the input stream
392 Opens a file using specified policies. @param fs FileSystem instance @param status FileStatus object @param readPolicies policies for reading the file @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
393 Attempts to load file system permissions from a primary or backup path. @param path primary path to load permissions @param backupPath fallback path if the primary fails @return FsPermission object or null if both paths fail @throws NoSuchAlgorithmException if cryptographic algorithm is unavailable @throws CertificateException if certificate handling fails @throws IOException if an I/O error occurs
394 Initializes a Sorter with specified FileSystem and configuration. @param fs the FileSystem to use @param keyClass the class of the keys to be sorted @param valClass the class of the values associated with the keys @param conf the Configuration object for sorting settings
395 Returns a Bzip2 compressor. @param conf configuration settings @return Bzip2Compressor if native library is loaded, otherwise BZip2DummyCompressor
396 Initializes the input stream for reading. @param filename path to the file @param in input stream to read from @param start starting position in the file @param length number of bytes to read @param conf configuration settings @param tempReader flag indicating if it's a temporary reader @throws IOException if an I/O error occurs
397 Creates a compressed output stream. @param out underlying output stream @param compressor compression algorithm to use @return CompressionOutputStream for writing compressed data @throws IOException if an I/O error occurs
398 Creates a ZStandard compressor. Checks if native code is loaded and initializes with configuration settings. @return ZStandardCompressor instance
399 Creates a compression input stream. @param in the input stream to be compressed @param decompressor the decompressor to use @return a CompressionInputStream for reading compressed data @throws IOException if an I/O error occurs
400 Creates a decompressor instance. Checks if native code is loaded and returns a ZStandard decompressor. @return ZStandardDecompressor object
401 Prepares a new data block for writing. @return BlockAppender instance for the new block @throws IOException if I/O error occurs
402 Constructs a new ScriptBasedMapping with the given configuration. @param conf Configuration object to be set
403 Sets configuration and propagates it to raw mapping. @param conf Configuration object to be set
404 Parses command-line arguments and initializes subcommands. @param args command-line arguments array @return 0 on success, 1 on error
405 Creates a ConnectionId for IPC communication. @param addr socket address of the server @param protocol class representing the protocol @param ticket user group information for authentication @param rpcTimeout timeout for RPC calls in milliseconds @param connectionRetryPolicy retry policy for establishing connections @param conf configuration settings @return ConnectionId object configured with provided parameters @throws IOException if an I/O error occurs during configuration
406 Creates a file on the FTP server. @param file path of the file to create @param permission file permissions @param overwrite flag to overwrite existing file @param bufferSize buffer size for data transfer @param replication replication factor (not used) @param blockSize block size (not used) @param progress progressable object (not used) @return FSDataOutputStream for writing the file @throws IOException if an I/O error occurs
407 Retrieves server defaults. @param p file system path (unused in current implementation) @return FsServerDefaults object @throws IOException if an I/O error occurs
408 Creates a new file output stream. @param f file path @param overwrite flag to overwrite existing file @return FSDataOutputStream for writing data @throws IOException if an I/O error occurs
409 Creates a file output stream for writing. @param f file path to be created @param progress monitor for write progress @return FSDataOutputStream for writing data @throws IOException if an I/O error occurs
410 Creates a new file output stream. @param f path to the file @param replication desired block replication factor @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
411 Creates a new file with specified replication and buffer size. @param f file path to create @param replication number of replicas for the file @param progress progress monitor for the operation @return FSDataOutputStream for writing to the file
412 Creates a file output stream. @param f path to the file @param overwrite true if existing file should be overwritten @param bufferSize size of buffer for data transfer @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
413 Creates a file output stream for writing data. @param f path to the file @param overwrite flag to allow overwriting existing files @param bufferSize size of the buffer used for writing @param progress callback for reporting write progress @return FSDataOutputStream for writing data to the file @throws IOException if an I/O error occurs
414 Initializes a FSDataOutputStreamBuilder with the given FileSystem and Path. @param fileSystem the FileSystem to use @param p the Path where data will be written
415 Reads the next key from input. @param key Writable object to store the read key @return true if successful, false if no more keys @throws IOException on I/O errors or invalid key class
416 Reads the next key from the input stream. @param key optional key to check class compatibility @return the next deserialized key or null if no more keys @throws IOException if an I/O error occurs or key class is incorrect
417 Initializes an Invoker for a given protocol and connection. @param protocol the protocol class to use @param connId unique connection identifier @param conf configuration settings @param factory socket factory for communication @param alignmentContext context for data alignment
418 Retrieves a client instance configured with the given settings. @param conf configuration object containing client settings @return Client instance initialized with provided configuration
419 Retrieves a client with specified configuration and socket factory. @param conf Configuration settings for the client @param factory SocketFactory used to create network connections @return Client instance configured with provided settings
420 Initializes an Invoker instance for a given protocol and connection. @param protocol the protocol class @param connId unique connection identifier @param conf configuration settings @param factory socket factory for connections @param alignmentContext context for data alignment
421 Checks if a specific RPC method is supported. @param rpcProxy the RPC proxy object @param protocol the interface class of the protocol @param rpcKind the kind of RPC @param version the version to check @param methodName the name of the method @return true if the method is supported, false otherwise @throws IOException if an I/O error occurs
422 Initializes a new Trash instance. @param fs FileSystem object representing the file system @param conf Configuration object for trash settings @throws IOException if an I/O error occurs during initialization
423 Returns an instance of NetworkTopology. @param conf configuration settings @return NetworkTopology object using InnerNodeImpl.FACTORY
424 Initializes a new SaslRpcClient instance. @param ugi UserGroupInformation object for authentication @param protocol Class representing the RPC protocol @param serverAddr InetSocketAddress of the server to connect to @param conf Configuration settings for SASL properties
425 Refreshes super user groups configuration. @param conf Configuration object @param proxyUserPrefix prefix for proxy users
426 Adds a shutdown hook with a specified priority. @param shutdownHook the task to run on shutdown @param priority execution priority of the hook
427 Retrieves password string from configuration. @param conf Configuration object @param name Key for the password @return Password as a string or null if not found @throws IOException if an I/O error occurs
428 Retrieves a password from configuration or returns a default value. @param conf Configuration object containing passwords @param alias Key for the password in the configuration @param defaultPass Default password to use if not found @return Retrieved password or default if an exception occurs
429 Retrieves ZooKeeper authentication information. @param conf configuration object @param configKey key for authentication configuration @return list of ZKAuthInfo objects or empty list if none found @throws IOException if reading fails
430 Initializes a DecayRpcScheduler with specified configuration. @param numLevels number of priority levels @param ns namespace for configuration @param conf configuration settings
431 Clones a writable object. @param <T> type extending Writable @param orig original writable object to clone @param conf configuration for cloning process @return cloned instance of T
432 Writes XML to an output stream using UTF-8 encoding. @param out the output stream to write to @throws IOException if an I/O error occurs
433 Selects a suitable SASL authentication method. @param authTypes list of available authentication types @return selected SaslAuth object or null if none applicable @throws SaslException, AccessControlException, IOException on failure
434 Constructs an FtpFs instance. @param theUri FTP URI @param conf configuration settings @throws IOException if connection fails @throws URISyntaxException if URI is invalid
435 Initializes a RawLocalFs instance. @param theUri file system URI @param conf configuration settings @throws IOException if initialization fails @throws URISyntaxException if URI is invalid
436 Initializes the object with the given URI and configuration. @param name the URI to initialize with @param conf the configuration settings @throws IOException if an I/O error occurs during initialization
437 Initializes a MultipartUploaderBuilderImpl with given filesystem and path. @param fileSystem the FileSystem instance @param p the Path to be used
438 Initializes a PathData object with file system details. @param fs FileSystem instance @param pathString path as string @param stat FileStatus object @throws IOException if an I/O error occurs
439 Checks if a path has a specific capability. @param path file system path to check @param capability capability to verify @return true if path supports capability, false otherwise
440 Returns the root path of the given file path. @param path the input file path @return the root path as a Path object @throws IOException if an I/O error occurs
441 Makes a path fully qualified with an optional scheme swap. @param path the input path to qualify @return fully qualified Path, possibly with swapped scheme
442 Retrieves FileStatus for a given path, optionally following symlinks. @param item PathData object containing the path and filesystem info @param depth current recursion depth @return FileStatus of the path or symlink target if followed @throws IOException on I/O errors
443 Converts a relative path to an absolute path. @param path the input path, may be relative or absolute @return the full absolute path
444 Copies a file from source to destination. @param src source file path @param dst destination file path @return true if copy is successful, false otherwise
445 Creates a builder for FSDataInputStream. @param fileSystem the FileSystem instance @param path the Path to read from @return FSDataInputStreamBuilder object
446 Creates a builder for FSDataInputStream. @param fileSystem the file system to operate on @param pathHandle the path handle for the data input stream @return FSDataInputStreamBuilder instance
447 Loads file permissions from _NEW or _OLD paths; initializes keystore if needed. @param oldPath path to the old file @param newPath path to the new file @return FsPermission object representing file permissions
448 Creates a Bzip2 compressor using provided configuration. @return Compressor instance configured with given settings
449 Retrieves a meta block by name. @param name the name of the meta block @return a BlockReader for the specified meta block @throws IOException if an I/O error occurs @throws MetaBlockDoesNotExist if the meta block does not exist
450 Retrieves a data block by index. @param blockIndex the index of the block to retrieve @return BlockReader for the specified block @throws IOException if an I/O error occurs @throws IndexOutOfBoundsException if blockIndex is out of range
451 Closes the data writer, finalizing block writes and flushing output. Throws IllegalStateException if close is called with an active block appender.
452 Prepares a meta block with specified name and compression. @param name block identifier @param compressionName type of compression to apply @return BlockAppender for the meta block @throws IOException if I/O error occurs @throws MetaBlockAlreadyExists if block already exists
453 Prepares a meta block with default compression. @param name block identifier @return BlockAppender for the meta block @throws IOException if an I/O error occurs @throws MetaBlockAlreadyExists if block already exists
454 Initializes data block with a new appender. @throws IOException if an I/O error occurs
455 Creates a new file output stream for writing data to a specified path. @param f the path of the file to be created @return an FSDataOutputStream for writing data @throws IOException if an I/O error occurs
456 Creates a log file with unique name. @param initial base file path @throws IOException if file creation fails
457 Creates or appends to a log file. @param targetFile path of the log file @throws IOException if file operations fail
458 Saves an instance to a specified file system path. @param fs FileSystem where the data will be saved @param path Path to the file where the instance will be stored @param instance Object to save as JSON @param overwrite Flag indicating if existing files should be overwritten @throws IOException if I/O operations fail
459 Initializes a Writer with specified parameters. @deprecated Use alternative constructor instead. @param fs FileSystem instance @param conf Configuration settings @param name Path to the file @param keyClass Class type for keys @param valClass Class type for values @param progress Progressable object @param metadata Metadata information @throws IOException if an I/O error occurs
460 Creates a new file at the specified path. @param f Path to the file to be created @return true if file is created successfully, false if it already exists
461 Constructs a new FileSystemDataOutputStreamBuilder. @param fileSystem the associated FileSystem @param p the target Path
462 Advances to the next key-value pair. @param key Writable object for storing the current key @param val Writable object for storing the current value @return true if there is a next record, false otherwise
463 Constructs a Trash instance with specified configuration. @param conf Hadoop configuration object @throws IOException if an I/O error occurs
464 Creates a new DomainNameResolver instance. @param conf configuration object @param uri URI to extract host from @param configKey configuration key for resolver settings @return DomainNameResolver instance
465 Returns a singleton instance of Groups. @param conf configuration settings @return Groups object initialized with given config
466 Initializes and returns a Groups service with loaded configuration. @param conf configuration settings for the Groups service @return Groups instance initialized with provided configuration
467 Refreshes super user groups configuration. @param conf Configuration object to update
468 Marks a file for deletion on JVM exit. @param f the path of the file to be deleted @return true if the file is marked for deletion, false if it doesn't exist @throws AccessControlException if access control fails @throws IOException if an I/O error occurs
469 Registers a shutdown hook with specified priority. @param priority execution order of the shutdown hook
470 Logs startup and shutdown messages for a class. @param clazz the class being started or shut down @param args command-line arguments @param log SLF4J logger instance
471 Loads SSL configuration settings. @throws IOException if required properties are missing or invalid
472 Creates SSL key managers from configuration. @param mode SSL mode (e.g., client or server) @param keystoreType type of the keystore (e.g., JKS, PKCS12) @param storesReloadInterval interval for reloading keystores (in milliseconds) @throws GeneralSecurityException if security settings are invalid @throws IOException if there is an I/O error reading the keystore
473 Retrieves ZooKeeper authentication information. @param conf configuration object @return list of ZKAuthInfo objects or empty list if none found
474 Retrieves groups for a given user. @param user username of the user @return list of group names associated with the user
475 Main entry point to write configuration as XML to stdout.
476 Performs SASL authentication using IPC streams. @param ipcStreams input/output streams for communication @return the negotiated authentication method @throws IOException if a network error occurs
477 Constructs PathData with file system and path string. @param fs the FileSystem instance @param pathString the path as a string @throws IOException if an I/O error occurs
478 Retrieves directory contents. @return sorted array of PathData objects representing files and directories @throws IOException if an I/O error occurs
479 Checks if a directory listing is inconsistent and ignores the exception if so. @param fs FileSystem instance @param path Path to check @param e FileNotFoundException to potentially throw or ignore @throws FileNotFoundException if directory listing is consistent
480 Checks if the path has a specific capability. @param path file system path to check @param capability capability to verify @return true if path supports the capability, false otherwise
481 Checks if a file system path has a specific capability. @param path the path to check @param capability the capability to verify @return true if the path supports the capability, false otherwise @throws IOException if an I/O error occurs
482 Retrieves the root directory enclosing the specified path. @param fs FileSystem instance to operate on @param path Path to find the enclosing root for @return Enclosing root Path @throws IOException if an I/O error occurs
483 Opens a file for reading. @param path file path to be opened @return FutureDataInputStreamBuilder for the file @throws IOException if an I/O error occurs @throws UnsupportedOperationException if operation is not supported
484 Opens a file using a PathHandle. @param pathHandle handle to the file path @return FutureDataInputStreamBuilder for reading data @throws IOException if an I/O error occurs @throws UnsupportedOperationException if operation is not supported
485 Locates and loads a keystore. @throws IOException if an I/O error occurs or keystore is inconsistent
486 Loads TFile index if not already present. @throws IOException if an I/O error occurs
487 Retrieves a meta block by name. @param name meta block identifier @return DataInputStream of the meta block @throws IOException if I/O error occurs @throws MetaBlockDoesNotExist if meta block is not found
488 Initializes Reader with file input stream and configuration. @param fin file input stream @param fileLength length of the file @param conf configuration settings @throws IOException if an I/O error occurs
489 Prepares a metadata block for writing. @param name block name @param compressName compression algorithm name @return DataOutputStream for the new meta block @throws IOException if I/O error occurs @throws MetaBlockAlreadyExists if block already exists
490 Closes the TFile writer, finalizing data and index blocks. @throws IOException if an I/O error occurs during closing
491 Prepares a meta block for writing. @param name unique identifier for the meta block @return DataOutputStream for writing meta data @throws IOException if I/O error occurs @throws MetaBlockAlreadyExists if meta block already exists
492 Prepares to append a key with specified length. @param length the length of the key to be appended @return DataOutputStream for writing the key @throws IOException if an I/O error occurs
493 Copies a file or directory to a destination FileSystem. @param src source file or directory @param dstFS destination FileSystem @param dst destination path in the FileSystem @param deleteSource whether to delete the source after copying @param conf configuration settings @return true if copy is successful, false otherwise @throws IOException if an I/O error occurs
494 Completes a multipart upload by merging parts into a final file. @param multipartUploadId unique identifier for the upload @param filePath destination path for the completed file @param handleMap map of part numbers to their handles @return PathHandle of the completed file @throws IOException if an I/O error occurs
495 Creates a new file with specified permissions. @param fs FileSystem instance @param file Path of the file to create @param permission FsPermission for the file @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
496 Initializes a Writer for writing data to a file system. @param fs the FileSystem instance @param conf the Configuration object @param name the Path of the file to write to @param keyClass the Class type of keys @param valClass the Class type of values @throws IOException if an I/O error occurs
497 Rolls the log directory by creating a new log file. @throws IOException if an I/O error occurs
498 Advances to the next key-value pair. @param key writable object to store the next key @param val writable object to store the next value @return true if a next pair exists, false otherwise
499 Creates a proxy for the specified protocol. @param <T> type of the protocol @param protocol interface of the protocol @param clientVersion version of the client @param addr address of the server @param ticket user authentication information @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy retry policy for connection attempts (not supported) @param fallbackToSimpleAuth flag to fall back to simple authentication @param alignmentContext context for alignment (optional) @return ProtocolProxy instance @throws IOException if an I/O error occurs
500 Retrieves user-to-groups mapping service. @return Groups object configured with default settings
501 Initializes security settings and configurations. @param conf configuration object @param overrideNameRules flag to override name rules
502 Constructs an empty AccessControlList instance.
503 Constructs an ACL from a string. @param aclString space-separated permissions string
504 Constructs an AccessControlList with specified users and groups. @param users comma-separated list of user names @param groups comma-separated list of group names
505 Refreshes super user groups configuration.
506 Initializes SSL configuration based on mode. @param mode SSL operation mode (SERVER or CLIENT) @throws IOException if I/O error occurs @throws GeneralSecurityException if security error occurs
507 Initializes a ZooKeeper client with authentication and SSL. @param authInfos list of authentication information @param sslEnabled flag to enable SSL @throws IOException if configuration or connection fails
508 Retrieves and transforms user groups based on a rule. @param user the username to fetch groups for @return List of group names transformed according to the rule
509 Initializes the Metrics System. @param prefix unique identifier for the metrics system @return current MetricsSystem instance
510 Appends an extension to the current path. @param extension file extension to add @return new PathData object with appended extension @throws IOException if an I/O error occurs
511 Retrieves path data for a specified child. @param child the child PathData object @return new PathData instance representing the child's path @throws IOException if an I/O error occurs
512 Recursively processes directory contents. @param item PathData object representing the current directory @throws IOException if an I/O error occurs
513 Checks if the path has a specific capability. @param path the file system path to check @param capability the capability to verify @return true if the path supports the capability, false otherwise @throws IOException if an I/O error occurs
514 Checks if the path has a specific capability. @param path the file system path to check @param capability the capability to verify @return true if the path supports the capability, false otherwise @throws IOException if an I/O error occurs
515 Checks if the file system supports a specific path capability. @param path the file path to check @param capability the capability to verify @return true if supported, false otherwise @throws IOException if an I/O error occurs
516 Lists file status for a given path. @param f the path to list @return array of FileStatus objects @throws FileNotFoundException if file not found @throws IOException on I/O errors
517 Copies a file or directory from source to destination. @param srcFS source filesystem @param srcStatus status of the source file/directory @param dstFS destination filesystem @param dst destination path @param deleteSource whether to delete the source after copy @param overwrite whether to overwrite existing files @param conf configuration settings @return true if successful, false otherwise
518 Recursively copies a file or directory from source to destination. @param srcFS source filesystem @param srcStatus status of the source file or directory @param dst destination file or directory @param deleteSource whether to delete the source after copy @param conf configuration settings @return true if operation successful, false otherwise
519 Opens a file with specified read policy. @param policy file read policy @return FSDataInputStream for the file @throws IOException if an I/O error occurs
520 Opens a file in the specified filesystem. @param fs Filesystem to open the file from @param file Path of the file to open @param bufferSize Buffer size for reading the file @param length Length of the file to read, -1 for full file @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
521 Loads and deserializes data from a specified path in the filesystem. @param fs FileSystem instance @param path Path to the file @param status Optional FileStatus object @return Deserialized object of type T @throws IOException if an I/O error occurs
522 Retrieves the first key from the TFile index. @return RawComparable representing the first key @throws IOException if an I/O error occurs
523 Retrieves the last key from the TFile index. @return RawComparable representing the last key @throws IOException if an I/O error occurs
524 Retrieves block containing key. @param key the search key @param greater true for upper bound, false for lower bound @return Location of block or end if not found
525 Retrieves key near the specified offset. @param offset file offset to search near @return RawComparable key or null if not found
526 Initializes a Reader for reading TFile data. @param fsdis input stream from the file system @param fileLength length of the file to read @param conf configuration settings @throws IOException if an I/O error occurs
527 Initializes block at specified index. @param blockIndex index of the block to initialize
528 Appends key-value pair to storage. @param key byte array containing the key @param koff offset in key array @param klen length of key data @param value byte array containing the value @param voff offset in value array @param vlen length of value data @throws IOException if an I/O error occurs
529 Retrieves the middle key from a sorted list of keys. @return WritableComparable representing the middle key or null if no keys exist @throws IOException if an I/O error occurs during index reading
530 Positions input stream to EOF using the given key. @param key key to use for positioning @throws IOException if an I/O error occurs
531 Seeks to the position of a given key in a sorted file. @param key the key to search for @param before if true, seek to the position before the key @return comparison result or 1 if not found @throws IOException on I/O error
532 Merges sorted input streams into a single output stream. Handles multiple readers and writes the smallest key-value pairs first.
533 Retrieves a protocol proxy with specified parameters. @param <T> type of the protocol @param protocol class representing the protocol @param clientVersion version of the client @param addr address of the server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy policy for retrying failed connections @return ProtocolProxy instance or throws IOException
534 Retrieves a protocol proxy for specified parameters. @param <T> generic type of the protocol @param protocol class representing the protocol @param clientVersion version of the client @param connId connection identifier containing address and ticket @param conf configuration settings @param factory socket factory for creating connections @param alignmentContext context for alignment @return ProtocolProxy object @throws IOException if an I/O error occurs
535 Returns the current trash directory path. @return Path object representing the trash directory @throws IOException if an I/O error occurs
536 Retrieves the current trash directory for a given path. @param path the original file or directory path @return the trash directory path @throws IOException if an I/O error occurs
537 Ensures the UserGroupInformation is initialized.
538 Sets configuration for initialization. @param conf Configuration object to be set
539 Launches a service with given configuration and parameters. @param conf Configuration for the service @param instance Service instance to launch @param processedArgs List of processed arguments @param addShutdownHook Whether to add a shutdown hook @param execute Whether to execute the service @return ExitException indicating success or failure
540 Starts authentication process with given info. @param authInfos list of authentication information objects @throws IOException if an I/O error occurs
541 Constructs a LocalFs instance. @param theUri file system URI @param conf configuration settings @throws IOException if an I/O error occurs @throws URISyntaxException if the URI is invalid
542 Copies an input stream to a target path. @param in the source InputStream @param target the destination PathData object @throws IOException if an I/O error occurs
543 Copies a file between two filesystems. @param srcFS source filesystem @param src source path @param dstFS destination filesystem @param dst destination path @param deleteSource true to delete the source file after copying @param overwrite true to overwrite the destination if it exists @param conf configuration settings @return true if copy is successful, false otherwise @throws IOException if an I/O error occurs
544 Repairs and opens a file from the most recent node. @param mrNodes array of MRNflyNode objects representing nodes @param f path to the file @param bufferSize size of buffer for reading the file @return FSDataInputStream if successful, null otherwise
545 Copies a file from a source filesystem to a destination. @param srcFS source filesystem @param src source path in the source filesystem @param dst destination file @param deleteSource true to delete the source file after copy @param conf configuration settings @return true if copy is successful, false otherwise
546 Opens file for sequential I/O operations. @return FSDataInputStream for reading @throws IOException if an I/O error occurs
547 Loads data from a file system path. @param fs the FileSystem to use @param path the Path to the file @return the loaded object of type T @throws IOException if an I/O error occurs
548 Retrieves record number near the specified offset. @param offset position in the data structure @return record number at or nearest to the given offset @throws IOException if an I/O error occurs
549 Retrieves the record number at the current location. @return The record number as a long. @throws IOException if an I/O error occurs
550 Initializes a Scanner with specified reader and location range. @param reader source of data to scan @param begin start location for scanning @param end end location for scanning @throws IOException if an I/O error occurs
551 Moves cursor to a specified location. @param l target location to seek @throws IOException if an I/O error occurs
552 Advances the cursor to the next record. @return true if successful, false if at end of file @throws IOException if an I/O error occurs
553 Appends key-value pair to storage. @param key array of bytes representing the key @param value array of bytes representing the value @throws IOException if an I/O error occurs
554 Seeks to the position of the given key. @param key the key to search for @return the position of the key or -1 if not found @throws IOException if an I/O error occurs
555 Retrieves the closest key to a given key. @param key the target key @param val value placeholder for the retrieved data @param before true if searching for the closest key less than the given key @return the closest matching key or null if not found @throws IOException if an I/O error occurs during processing
556 Creates a UserGroupInformation object for testing. @param user username for the UGI @param userGroups array of group names associated with the user @return UserGroupInformation object configured for testing
557 Creates a proxy UserGroupInformation for testing. @param user username for the proxy user @param realUser the actual user being proxied @param userGroups array of group names for the proxy user @return UserGroupInformation object configured for testing
558 Retrieves the list of groups for the current user. @return List of group names or empty list if an error occurs
559 Retrieves the set of groups for the current user. @return Set of group names or empty set if retrieval fails
560 Performs subject login with given parameters. @param subject security subject @param params login parameters @return UserGroupInformation object @throws IOException if login fails
561 Refreshes Service ACL with loaded configuration. @param conf Configuration object containing settings @param provider PolicyProvider for authorization policies
562 Authorizes user access. @param user UserGroupInformation object representing the user @param remoteAddress IP address of the client @throws AuthorizationException if authorization fails
563 Authorizes user access based on group information and IP address. @param user UserGroupInformation object representing the user @param remoteAddress InetAddress of the remote client @throws AuthorizationException if authorization fails
564 Launches a service with configuration and arguments. @param conf configuration settings for the service @param processedArgs list of processed command-line arguments @param addShutdownHook flag to add shutdown hook @param execute flag to execute the service @return ExitException object if an error occurs, null otherwise
565 Starts the process with an empty list. @throws IOException if an I/O error occurs
566 Copies a file from source to target. @param src PathData object representing the source file @param target PathData object representing the target file @throws IOException if an I/O error occurs during copying
567 Copies a file from source to destination. @param srcFS source filesystem @param src source path @param dstFS destination filesystem @param dst destination path @param deleteSource whether to delete the source file after copy @param conf configuration settings @return true if copy is successful, false otherwise
568 Opens a file for reading using multiple nodes. @param f the path to the file @param bufferSize size of the buffer @return FSDataInputStream if successful @throws IOException if fails to open the file
569 Creates a Scanner for the specified range. @return Scanner object initialized with the current instance and range @throws IOException if an I/O error occurs
570 Creates a scanner for records within a specified range. @param beginRecNum starting record number (inclusive) @param endRecNum ending record number (exclusive) @return Scanner object for the specified range @throws IOException if an I/O error occurs
571 Initializes Scanner with specified offsets. @param reader source Reader object @param offBegin starting offset @param offEnd ending offset @throws IOException if an I/O error occurs
572 Rewinds to the beginning of the stream. @throws IOException if an I/O error occurs
573 Seeks to specified key in data structure. @param key the key to seek @return true if found, false otherwise
574 Retrieves the closest key-value pair. @param key target key to find @param val value associated with the key @return closest WritableComparable or null if not found @throws IOException if an I/O error occurs
575 Checks if security is enabled. @return true if security is enabled, false otherwise
576 Logs out a user from Kerberos using the keytab. Throws IOException if logout fails.
577 Retrieves an array of group names. @return Array containing group names
578 Checks if user is in allowed list or group. @param ugi user group information @return true if user is allowed, false otherwise
579 Retrieves UserGroupInformation from a Subject. @param subject the security subject containing user principals @return UserGroupInformation object @throws IOException if authentication fails or subject is invalid
580 Authorizes user access. @deprecated Use {@link #authorize(UserGroupInformation, String)} instead. @param user user group information @param remoteAddress client's remote address @param conf configuration settings (unused) @throws AuthorizationException if authorization fails
581 Authorizes the connection based on user and protocol. Throws exception if unauthorized. @throws RpcServerException if authorization fails
582 Processes the source path by copying or throwing exceptions based on its type. @param src source path data @param dst destination path data @throws IOException if an I/O error occurs
583 Copies a file from a source path to a local destination. @param delSrc true if the source should be deleted after copying @param src source file path @param dst destination file path @throws IOException if an I/O error occurs during the copy process
584 Copies a file from HDFS to local filesystem. @param delSrc true if source file should be deleted after copy @param src source path in HDFS @param dst destination path on local filesystem
585 Creates a scanner for a specific byte range. @param offset starting byte position @param length number of bytes to scan @return Scanner object for the specified range @throws IOException if an I/O error occurs
586 Initializes Scanner with specified reader and key range. @param reader input source for data @param beginKey starting key for scanning (inclusive) @param endKey ending key for scanning (exclusive) @throws IOException if an I/O error occurs
587 Seeks to a position in the file using a byte array key. @param key byte array containing the key @param keyOffset offset within the key array @param keyLen length of the key @return true if successful, false otherwise @throws IOException if an I/O error occurs
588 Seeks to the first entry greater than or equal to the specified key. @param key byte array containing the key @param keyOffset offset within the key array @param keyLen length of the key @throws IOException if an I/O error occurs
589 Seeks to the first entry greater than or equal to the specified key. @param key byte array containing the key @param keyOffset offset within the key array @param keyLen length of the key @throws IOException if an I/O error occurs
590 Retrieves value by key. @param key the key to search for @param val object to store the retrieved value @return the value object if found, otherwise null
591 Creates a protocol proxy for communication. @param <T> the type of the protocol @param protocol the interface class of the protocol @param clientVersion version of the client @param connId unique connection identifier @param conf configuration settings @param factory socket factory for connections @param alignmentContext context for data alignment @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
592 Creates a protocol proxy for RPC communication. @param protocol interface class of the protocol @param clientVersion version of the client @param addr address of the server @param ticket user group information @param conf configuration settings @param factory socket factory for creating sockets @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy policy for retrying connections @param fallbackToSimpleAuth flag to allow fallback to simple authentication @return ProtocolProxy object for the given protocol @throws IOException if an I/O error occurs
593 Creates a protocol proxy for RPC communication. @param protocol the interface class of the protocol @param clientVersion the version of the client @param addr the address of the server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating sockets @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy policy for retrying failed connections @param fallbackToSimpleAuth flag to allow fallback to simple auth @param alignmentContext context for alignment (optional) @return a ProtocolProxy object for the specified protocol
594 Opens a file for secure random read with ownership checks. @param f the file to open @param mode the access mode ("r", "rw", etc.) @param expectedOwner the expected owner of the file @param expectedGroup the expected group of the file @return RandomAccessFile object if successful, throws IOException otherwise
595 Opens a file securely and checks ownership. @param file the file to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FSDataInputStream if successful @throws IOException if an I/O error occurs or ownership check fails
596 Opens a file securely for reading with owner and group checks. @param f the file to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FileInputStream if successful, throws IOException otherwise
597 Dumps UserGroupInformation details. @param title descriptive title for the dump @param ugi UserGroupInformation object to dump @throws IOException if an I/O error occurs
598 Retrieves the current login user's information. @return UserGroupInformation object representing the logged-in user @throws IOException if an error occurs during retrieval
599 Logs in user from given Subject. @param subject security subject containing user info
600 Processes the connection context from the RPC buffer. @param buffer containing the connection context data @throws RpcServerException if processing fails or is invalid
601 Creates a Scanner with specified key range. @param beginKey starting key for the scan (inclusive) @param endKey ending key for the scan (exclusive) @return Scanner object configured with given keys @throws IOException if an I/O error occurs
602 Seeks to specified key in data store. @param key byte array representing the key @return true if successful, false otherwise @throws IOException if an I/O error occurs
603 Sets the lower bound for key range. @param key byte array representing the key @throws IOException if an I/O error occurs
604 Sets the upper bound for searching with a byte array. @param key the byte array to use as the upper bound
605 Retrieves the first entry greater than or equal to the given key. @param key search key @return key if found, otherwise null @throws IOException on I/O errors
606 Retrieves a value by key if it probably exists. @param key the search key @param val placeholder for the found value @return the associated value or null if not found @throws IOException if an I/O error occurs
607 Retrieves a protocol proxy for communication. @param <T> the type of the protocol interface @param protocol the protocol interface class @param clientVersion version of the client @param connId unique connection identifier @param conf configuration settings @param factory socket factory for connections @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
608 Retrieves a protocol proxy for communication. @param <T> the type of the protocol @param protocol the interface class of the protocol @param clientVersion version of the client @param addr address of the server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy policy for retrying failed connections @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
609 Sets up IPC communication streams with a server. @param fallbackToSimpleAuth flag to use simple auth if SASL fails
610 Opens a file for random read access with security checks. @param f the file to open @param mode the access mode ("r", "rw", etc.) @param expectedOwner the expected owner of the file @param expectedGroup the expected group of the file @return RandomAccessFile object @throws IOException if an I/O error occurs or security checks fail
611 Opens a FSDataInputStream with security checks. @param file the file to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FSDataInputStream for the file @throws IOException if an I/O error occurs or security checks fail
612 Opens a file for reading with security checks. @param f the file to open @param expectedOwner the expected owner of the file @param expectedGroup the expected group of the file @return FileInputStream object @throws IOException if an I/O error occurs or security checks fail
613 Checks if the user has administrator access. @param servletContext application context @param remoteUser username of the remote user @return true if user is an admin, false otherwise
614 Authorizes a user for a specific protocol based on ACLs and machine lists. @param user the UserGroupInformation object representing the user @param protocol the protocol class to check authorization for @param conf the configuration settings @param addr the InetAddress of the client @throws AuthorizationException if the user is not authorized
615 Retrieves the current user's group information. @return UserGroupInformation object representing the current user @throws IOException if an I/O error occurs during retrieval
616 Checks if login authentication uses keytab. @return true if login is keytab-based, false otherwise
617 Checks if login is ticket-based. @return true if login uses ticket, false otherwise @throws IOException if an I/O error occurs while checking
618 Executes an action as the current login user or exits if security is enabled and fails. @param action the PrivilegedAction to execute @return result of the action execution
619 Executes an action as the current login user. @param action the action to be executed @return result of the action @throws IOException if an I/O error occurs
620 Cedes active status for a specified duration. @param millisToCede milliseconds to cede active status @throws AccessControlException if access is denied @throws ServiceFailedException if service fails @throws IOException if an I/O error occurs
621 Initiates graceful failover to the current node. Throws ServiceFailedException or IOException on failure.
622 Creates a Scanner for a range of keys. @param beginKey start of the key range or null for no lower bound @param endKey end of the key range or null for no upper bound @return Scanner object configured with specified key range @throws IOException if an I/O error occurs
623 Creates a scanner with specified key range. @param beginKey starting key for the scan @param endKey ending key for the scan @return Scanner object configured with the key range @throws IOException if an I/O error occurs
624 Creates a protocol proxy for RPC communication. @param <T> type of the protocol interface @param protocol class of the protocol interface @param clientVersion version of the client @param addr address of the remote server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating sockets @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
625 Retrieves a proxy for a specified protocol. @param <T> type of the protocol @param protocol interface class of the protocol @param clientVersion version of the client @param addr address of the server @param ticket user group information @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout for RPC calls @return proxy instance of type T @throws IOException if an I/O error occurs
626 Checks if user has administrator access. @param servletContext application context @param request HTTP request @param response HTTP response @return true if user has admin access, false otherwise
627 Authorizes user access based on protocol and address. @param user user information @param protocolName name of the communication protocol @param addr client's IP address @throws AuthorizationException if authorization fails
628 Retrieves the home directory path for the current user. @return Path object representing the user's home directory
629 Checks file access permissions. @param stat FileStatus object representing the file @param mode FsAction required permission level @throws AccessControlException if permission is denied @throws IOException on I/O errors
630 Constructs and initializes a ViewFileSystem instance. Sets the current user's group information and records the creation time. @throws IOException if an I/O error occurs while fetching user info
631 Constructs a ViewFs object with the given URI and configuration. @param theUri the URI for the view file system @param conf configuration settings for the file system @throws IOException if an I/O error occurs @throws URISyntaxException if the URI is invalid
632 Initializes an InodeTree with configuration and URI. @param config Configuration object @param viewName View name for mount table @param theUri Target URI @param initingUriAsFallbackOnNoMounts Flag to initialize URI as fallback @throws UnsupportedFileSystemException if unsupported file system @throws URISyntaxException if URI syntax is invalid @throws FileAlreadyExistsException if file already exists @throws IOException if other I/O errors occur
633 Retrieves the home directory path for the current user. Fallbacks to system property if unable to get username. @return Path object representing the home directory
634 Opens a connection to a URL using authentication and optional delegation tokens. @param url target URL @param token authentication token @param doAs proxy user string @return HttpURLConnection instance @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
635 Retrieves the best UserGroupInformation based on ticket cache or user name. @param ticketCachePath path to ticket cache file @param user username for remote user creation @return UserGroupInformation object @throws IOException if an I/O error occurs
636 Logs in a user from a keytab and returns the UserGroupInformation. @param user principal name of the user @param path path to the keytab file @return UserGroupInformation object for the logged-in user @throws IOException if login fails
637 Logs detailed user information for debugging. @param log Logger instance to use for logging @param ugi UserGroupInformation object containing user details @throws IOException if an I/O error occurs during logging
638 Executes an action as the current user. @param action the action to be performed @return result of the action @throws IOException if an I/O error occurs
639 Retrieves the proxy user if running under proxy authentication. @return The username of the proxy user or null if not using proxy
640 Waits for a protocol proxy with specified parameters. @param <T> type of protocol @param protocol class representing the protocol @param clientVersion version of the client @param addr address of the server @param conf configuration settings @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy policy for retrying connections @param timeout total wait time in milliseconds @return ProtocolProxy object or throws IOException if not available within timeout
641 Creates a scanner for a range of keys. @param beginKey start key (inclusive) @param endKey end key (exclusive) @return Scanner object for the specified key range @throws IOException if an I/O error occurs
642 Creates a protocol proxy for the given class and configuration. @param <T> type of the protocol interface @param protocol the protocol interface class @param clientVersion version of the client @param addr address of the server @param conf configuration settings @param factory socket factory to use @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
643 Retrieves a proxy for the given protocol. @param protocol the interface of the remote service @param clientVersion version of the client @param addr address of the server @param ticket user authentication information @param conf configuration settings @param factory socket factory for creating connections @return proxy object implementing the specified protocol @throws IOException if an I/O error occurs
644 Checks if instrumentation access is allowed. @param servletContext the ServletContext object @param request the HttpServletRequest object @param response the HttpServletResponse object @return true if access is allowed, false otherwise
645 Returns the trash root directory for a given path. @param path the original file or directory path @return qualified Path object representing the trash root
646 Retrieves trash root directories. @param allUsers if true, fetches for all users; otherwise, just the current user @return collection of FileStatus objects representing trash roots
647 Checks and enforces access permissions for a file or directory. @param path the Hadoop Path to access @param mode the required FsAction (read/write/execute) permissions @throws AccessControlException if access is denied @throws FileNotFoundException if the path does not exist @throws IOException for other I/O errors
648 Checks access permissions for a given file path. @param path the file path to check @param mode the required file system action (read/write) @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnresolvedLinkException if a symlink cannot be resolved @throws IOException for other I/O errors
649 Initializes file system view. @param theUri URI of the file system @param conf configuration settings @throws IOException if initialization fails
650 Retrieves a unique file system instance. @param uri URI of the file system @param conf configuration settings @return FileSystem object @throws IOException if an I/O error occurs
651 Retrieves the home directory path. @return Path representing the user's home directory
652 Opens a connection to the specified URL using the given authentication token. @param url target URL for the connection @param token authentication token for accessing the URL @return HttpURLConnection instance @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
653 Retrieves a FileSystem instance for the given URI and configuration. @param uri the file system URI @param conf the Hadoop configuration @param user the user to impersonate @return FileSystem object @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
654 Creates a new FileSystem instance with Kerberos authentication. @param uri URI of the file system @param conf Configuration settings @param user User for whom to create the FileSystem @return FileSystem object @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
655 Retrieves UserGroupInformation from a Kerberos ticket cache. @param ticketCache path to the Kerberos ticket cache @param user username for authentication @return UserGroupInformation object or throws IOException if fails
656 Logs in using a keytab file. @throws IOException if an I/O error occurs during login
657 Logs in a user from a keytab file. @param user username to log in @param path path to the keytab file @throws IOException if login fails
658 Logs all user information. @param ugi UserGroupInformation object containing user details
659 Waits for a protocol proxy. @param protocol class of the protocol to wait for @param clientVersion version of the client @param addr address of the server @param conf configuration settings @param connTimeout connection timeout in milliseconds @return ProtocolProxy instance or throws IOException
660 Waits for and returns a proxy for the specified protocol. @param protocol class of the protocol to wait for @param clientVersion version of the client @param addr address where the service is running @param conf configuration settings @param rpcTimeout timeout for RPC operations @param timeout overall timeout for waiting @return proxy object or throws IOException if fails
661 Retrieves a proxy for the specified protocol. @param protocol class of the protocol to use @param clientVersion version of the client @param addr address of the server @param conf configuration settings @param factory socket factory for creating connections @return proxy object for the given protocol @throws IOException if an I/O error occurs
662 Creates a protocol proxy for communication. @param <T> type of the protocol @param protocol class representing the protocol @param clientVersion version of the client @param addr server address @param conf configuration settings @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
663 Retrieves the GetUserMappingsProtocol proxy. @return GetUserMappingsProtocol instance @throws IOException if an I/O error occurs
664 Retrieves a ZKFC (ZooKeeper Failover Controller) proxy. @param conf configuration settings @param timeoutMs connection timeout in milliseconds @return ZKFCProtocol instance @throws IOException if connection fails
665 Returns the trash root path for a given file system path. @param path the input file system path @return the trash root path or throws NotInMountpointException if not found
666 Retrieves trash root directories. @param allUsers if true, returns trash for all users; otherwise, for current user @return collection of FileStatus objects representing trash roots
667 Constructs a ViewFileSystem with default URI and configuration. @param conf file system configuration @throws IOException if an I/O error occurs
668 Adds a filesystem to the cache for testing. @param uri URI of the filesystem @param conf configuration settings @param fs FileSystem instance to add @throws IOException if an I/O error occurs
669 Creates a FileSystem instance based on URI and configuration. @param uri the target filesystem URI @param config configuration settings for the filesystem @return FileSystem object or throws IOException if an error occurs
670 Creates and returns a FileContext instance. @param defFS default file system to use @param aConf configuration settings for the file context @return FileContext object initialized with given parameters
671 Opens a connection to the specified URL using the given authentication token. @param url the target URL @param token the authentication token @return HttpURLConnection instance @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
672 Executes Kerberos diagnostics checks and validations. @return true if all checks pass, false otherwise @throws Exception if any check fails or an error occurs
673 Parses command-line arguments for Kerberos principal and keytab. @param args input command-line arguments @return filtered arguments without principal and keytab options @throws IOException if login fails
674 Main method to demonstrate UGI retrieval and keytab login. @param args command line arguments (principal, keytab path if provided)
675 Logs in a user using a keytab file. @param conf configuration object containing keytab and user info @param keytabFileKey config key for the keytab file path @param userNameKey config key for the user name @param hostname server host name
676 Initializes a Server with specified configurations. @param bindAddress server's bind address @param port server's listening port @param rpcRequestClass class for RPC requests @param handlerCount number of handler threads @param numReaders number of reader threads @param queueSizePerHandler max queue size per handler @param conf configuration settings @param serverName name of the server @param secretManager secret manager for security @param portRangeConfig port range configuration @throws IOException if an I/O error occurs during initialization
677 Builds SASL negotiation response. @return RpcSaslProto with optional initial challenge for token auth @throws InterruptedException, SaslException, IOException on failure
678 Waits for a protocol proxy with specified parameters. @param protocol the protocol class to wait for @param clientVersion the version of the client @param addr the address to connect to @param conf the configuration settings @return ProtocolProxy instance or throws IOException if fails
679 Waits for and returns a proxy for the specified protocol. @param <T> type of the protocol @param protocol class representing the protocol @param clientVersion version of the client @param addr address to connect to @param conf configuration settings @param connTimeout connection timeout in milliseconds @return proxy object for the specified protocol @throws IOException if an I/O error occurs
680 Adds a resource with an input stream and name. @param in InputStream of the resource @param name Name of the resource
681 Retrieves a proxy for the specified protocol. @param <T> generic type of the protocol @param protocol class representing the protocol @param clientVersion version of the client @param addr address of the server @param conf configuration settings @return proxy instance of the specified protocol @throws IOException if an I/O error occurs
682 Prints user groups for given usernames. @param args array of usernames, defaults to current user if empty @return always returns 0
683 Initiates a graceful failover to the specified node via ZKFC. @param toNode target HAServiceTarget for failover @return 0 on success, -1 on failure
684 Requests a remote service to cede its active role. @param remote the target HAServiceTarget to request from @param timeout maximum time in ms for the operation @return ZKFCProtocol proxy of the old active service @throws IOException if communication fails
685 Handles GET requests for JMX data. @param request HTTP request containing query parameters @param response HTTP response to send JSON data or error messages
686 Retrieves FileSystem instance for given URI and configuration. @param uri target file system URI @param conf configuration settings @return FileSystem object or throws IOException
687 Creates a new instance of LocalFileSystem. @param conf configuration settings @return LocalFileSystem object @throws IOException if an I/O error occurs
688 Creates a new FileSystem instance. @param uri file system URI @param conf configuration settings @return FileSystem object configured with given URI and settings @throws IOException if an I/O error occurs
689 Retrieves a FileContext using the specified FileSystem and default configuration. @param defaultFS the AbstractFileSystem to use @return a FileContext instance
690 Retrieves FileContext for a given URI and configuration. @param defaultFsUri the default file system URI @param aConf the Hadoop configuration @return FileContext object initialized with the specified URI and config @throws UnsupportedFileSystemException if the filesystem is unsupported
691 Initializes the command with provided arguments. @param args command-line arguments @return 0 if successful, 1 otherwise
692 Logs in using specified configuration and keys. @param conf configuration settings @param keytabFileKey key for the keytab file path @param userNameKey key for the user name @throws IOException if login fails
693 Processes SASL message and returns response. @param saslMessage incoming SASL message @return RpcSaslProto response or null for SIMPLE auth @throws SaslException, IOException, AccessControlException, InterruptedException on error
694 Waits for and returns a proxy instance. @param <T> the type of the protocol @param protocol the interface class of the protocol @param clientVersion version of the client @param addr address to connect to @param conf configuration settings @return proxy instance of type T @throws IOException if an I/O error occurs
695 Adds a new resource by name. @param name resource identifier
696 Adds a resource from the given URL. @param url location of the resource to be added
697 Adds a resource from a file path. @param file the Path object representing the file
698 Adds a resource from an input stream. @param in InputStream containing the resource data
699 Performs a graceful failover procedure. @throws ServiceFailedException if failover fails @throws IOException on I/O errors @throws InterruptedException if interrupted during execution
700 Creates a proxy to monitor health. @return HAServiceProtocol instance for monitoring @throws IOException if connection fails
701 Retrieves health monitor proxy with specified configuration and timeout. @param conf Configuration object for settings @param timeoutMs Timeout in milliseconds @return HAServiceProtocol instance
702 Retrieves HAServiceProtocol proxy. @param conf configuration settings @param timeoutMs timeout in milliseconds @return HAServiceProtocol proxy instance @throws IOException if an I/O error occurs
703 Initializes the HAR filesystem with given URI and configuration. @param name URI of the filesystem to initialize @param conf configuration settings for initialization @throws IOException if initialization fails or invalid path is provided
704 Moves a file to the appropriate trash directory. @param fs FileSystem instance @param p Path of the file to move @param conf Configuration settings @return true if successful, false otherwise @throws IOException on I/O errors
705 Initializes PathData with given path and configuration. @param pathString file system path as a string @param conf Hadoop configuration @throws IOException if an I/O error occurs
706 Retrieves a named file system. @param name file system name or URI string @param conf configuration settings @return FileSystem object @throws IOException if an I/O error occurs @deprecated Use get(URI, Configuration) instead
707 Retrieves the local file system instance. @param conf configuration settings @return LocalFileSystem object @throws IOException if an I/O error occurs
708 Constructs a ChRootedFileSystem with specified URI and configuration. @param uri file system URI @param conf Hadoop configuration @throws IOException if an I/O error occurs
709 Retrieves FileSystem instance for given URI and configuration. @param uri file system URI @param conf Hadoop configuration @return FileSystem object @throws IOException if an I/O error occurs
710 Retrieves a FileSystem instance for the given URI. @param uri target file system URI @param conf configuration settings @return FileSystem object @throws IOException if an I/O error occurs
711 Retrieves the file system instance. @param conf configuration settings @return FileSystem object @throws IOException if an I/O error occurs
712 Retrieves the FileSystem instance. @return FileSystem object @throws MetricsException if URI is invalid or connection fails
713 Lists file statuses for a given path, handling mount links and internal directories. @param f the path to list statuses for @return array of FileStatus objects representing files and directories @throws IOException if an I/O error occurs
714 Retrieves file context for given URI. @param defaultFsUri URI of the default filesystem @return FileContext object for the specified URI @throws UnsupportedFileSystemException if filesystem is not supported
715 Retrieves FileContext for the default file system. @param aConf configuration object containing file system settings @return FileContext instance @throws UnsupportedFileSystemException if URI scheme is missing or invalid
716 Retrieves local file system context. @param aConf configuration settings @return FileContext for local file system @throws UnsupportedFileSystemException if local FS is unsupported
717 Initializes a new Server instance. @param protocolClass the RPC protocol class @param protocolImpl the implementation of the protocol @param conf configuration settings for the server @param bindAddress address to bind the server to @param port port number for the server @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler size of the queue per handler @param verbose flag indicating verbose logging @param secretManager secret manager for security tokens @param portRangeConfig configuration for port range @param alignmentContext context for data alignment @throws IOException if an I/O error occurs during initialization
718 Initializes server with specified configuration and binds to address. @param protocolClass interface class for the protocol @param protocolImpl implementation of the protocol @param conf configuration settings @param bindAddress network address to bind @param port port number to listen on @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler size of the request queue per handler @param verbose flag for verbose logging @param secretManager secret manager for security tokens @param portRangeConfig configuration for port range @param alignmentContext context for data alignment @throws IOException if initialization fails
719 Processes SASL authentication message. @param saslMessage incoming SASL message for processing
720 Loads the latest mount table from the specified path into the configuration. @param mountTableConfigPath path to the mount table configuration directory @param conf configuration object to load mount table properties into @throws IOException if an I/O error occurs while loading the mount table
721 Checks if other target nodes are active. @param targetNodeToActivate node to activate @param forceActive flag to force activation @return true if any other node is active, false otherwise
722 Performs pre-failover checks between two HAServiceTargets. @param from source HAServiceTarget @param target destination HAServiceTarget @param forceActive flag to force failover even if target is not ready @throws FailoverFailedException if any check fails
723 Attempts to transition a service to standby gracefully. @param svc the HAServiceTarget to be fenced @return true if successful, false otherwise
724 Resolves a file system path, handling symbolic links if enabled. @param filesys the FileSystem to operate on @param path the Path to resolve @return the resolved resource or null if not found @throws IOException if an I/O error occurs or symlink resolution fails
725 Initializes PathData with local file system and path. @param localPath URI representing the local path @param conf configuration settings for file system access @throws IOException if an I/O error occurs
726 Copies files from local source paths to a destination. @param delSrc true if source files should be deleted after copy @param overwrite true if existing destination files should be overwritten @param srcs array of source file paths @param dst destination directory path @throws IOException if an I/O error occurs during the copy process
727 Copies a file from a local source to a destination. @param delSrc true to delete the source file after copying @param overwrite true to overwrite the destination if it exists @param src source path of the local file @param dst destination path for the copied file @throws IOException if an I/O error occurs during the copy process
728 Copies a file from a source path to a destination path locally. @param delSrc true if the source file should be deleted after copying @param src source path of the file to copy @param dst destination path for the copied file @param useRawLocalFileSystem true if raw local file system is used @throws IOException if an I/O error occurs during the copy process
729 Updates context with new local directories from configuration. @param conf Configuration object containing settings @return Updated Context object or throws IOException if config is invalid
730 Retrieves a local file path. @param dirsProp property containing directory paths @param path file path to be created @return Path object for the first available directory @throws IOException if no valid directory is found
731 Retrieves raw FileSystem for a given Path and Configuration. @param path file system path @param conf configuration settings @return FileSystem object or throws exception if not found @throws IOException on I/O errors
732 Retrieves mount path information for a given file system path. @param path the file system path to resolve @param conf configuration settings @return MountPathInfo containing resolved path and file system @throws IOException if an I/O error occurs or path is not found
733 Expands a glob pattern to an array of PathData objects. @param pattern the glob pattern string @param conf configuration settings for file system operations @return sorted array of PathData matching the pattern @throws IOException if I/O error occurs during expansion
734 Dumps information about a TFile. @param file path to the TFile @param out output stream for the dump @param conf configuration settings @throws IOException if an I/O error occurs
735 Reads credentials from a token storage file. @param filename path to the token storage file @param conf configuration settings @return Credentials object containing read data @throws IOException if an I/O error occurs
736 Retrieves library JAR URLs from configuration. @param conf Hadoop configuration object @return Array of JAR URLs or null if none specified @throws IOException if an I/O error occurs
737 Initializes file system and prepares for writing. @return true if initialization is successful, false otherwise
738 Retrieves local file system context. @return FileContext for local file system @throws UnsupportedFileSystemException if local file system is unsupported
739 Retrieves default file context. @return FileContext instance configured with default settings @throws UnsupportedFileSystemException if default filesystem is unsupported
740 Initializes a new Server instance. @param protocolClass the class of the protocol to use @param protocolImpl implementation of the protocol @param conf configuration settings for the server @param bindAddress address to bind the server to @param port port number for the server @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler size of the request queue per handler @param verbose flag indicating if detailed logging is enabled @param secretManager manager for security tokens @param portRangeConfig configuration for port range @param alignmentContext context for data alignment @throws IOException if an I/O error occurs during initialization
741 Deprecated constructor for Server. @param protocolClass Class representing the protocol @param protocolImpl Implementation of the protocol @param conf Configuration settings @param bindAddress Address to bind the server @param port Port number for the server @param numHandlers Number of handler threads @param numReaders Number of reader threads @param queueSizePerHandler Queue size per handler @param verbose Enable verbose logging @param secretManager Secret manager for security tokens @param portRangeConfig Port range configuration @throws IOException if an I/O error occurs during server setup
742 Initializes SSL factory with specified mode and configuration. @param mode operation mode, cannot be null @param conf SSL configuration settings
743 Refreshes service ACLs using provided configuration and policy provider. @param conf Configuration object containing settings @param provider PolicyProvider for authorization policies
744 Performs a failover from one service target to another. @param fromSvc current active service target @param toSvc target service to become active @param forceFence whether to force fencing of the source service @param forceActive whether to force activation of the target service @throws FailoverFailedException if failover fails
745 Parses destination path from arguments or uses current directory. @param args list of command-line arguments @throws IOException if path parsing fails
746 Moves files from local source paths to a destination path. @param srcs array of source file paths @param dst destination file path @throws IOException if an I/O error occurs
747 Copies files from local to HDFS. @param delSrc true if source files should be deleted after copying @param overwrite true if destination files should be overwritten @param srcs array of source file paths on the local filesystem @param dst destination path in HDFS @throws IOException if an I/O error occurs during the operation
748 Copies file from source to destination. @param delSrc delete source file after copying if true @param src source file path @param dst destination file path
749 Copies a file from local filesystem to HDFS. @param delSrc true if source file should be deleted after copy @param overwrite true if destination file should be overwritten @param src source file path on local filesystem @param dst destination file path in HDFS
750 Copies file from source to destination. @param delSrc true if source file should be deleted after copying @param src source file path @param dst destination file path @throws IOException if an I/O error occurs
751 Finds a local writable path based on size and configuration. @param pathStr requested file path @param size required file size or SIZE_UNKNOWN @param conf configuration settings @param checkWrite whether to check write permissions @return Path object for writing if available, throws DiskErrorException otherwise
752 Retrieves a local file path for reading. @param pathStr relative path to the file @param conf configuration settings @return Path to the file if found, throws DiskErrorException otherwise
753 Retrieves all local file paths for reading. @param pathStr root directory path string @param conf configuration settings @return Iterable of local file paths @throws IOException if an I/O error occurs
754 Initializes NflyFSystem with given URIs and configuration. @param uris array of URI destinations @param conf system configuration @param minReplication minimum number of replicas required @param nflyFlags flags for NflyKey @param fsGetter file system getter instance @throws IOException if initialization fails due to invalid URIs or configuration issues
755 Executes all specified source files. @return Exit code: 0 for success, -1 if an error occurs
756 Expands a path argument using glob pattern. @param arg path or glob pattern @return list of matched PathData items @throws IOException if an I/O error occurs
757 Sets destination path from command arguments. @param args list of command-line arguments @throws IOException if path is invalid or not found
758 Deprecated constructor for initializing a Reader. @param fs FileSystem instance @param file file path @param conf configuration settings @throws IOException if an I/O error occurs
759 Constructs a Reader with specified input parameters. @param in file system data input stream @param buffersize buffer size for reading @param start starting position in the stream @param length length of data to read @param conf configuration settings @throws IOException if an I/O error occurs
760 Creates a SequenceFile reader for the specified data file. @param dataFile path to the sequence file @param conf Hadoop configuration @param options additional reader options @return SequenceFile.Reader instance @throws IOException if an I/O error occurs
761 Reads the next raw key from the input. @return true if a key is successfully read, false otherwise @throws IOException if an I/O error occurs
762 Initializes a Writer with specified configuration and options. @param conf Hadoop configuration @param opts variable number of option objects @throws IOException if initialization fails
763 Main entry point for TFile dumper. Prints version info and usage if no arguments provided. Dumps information for each specified TFile. @param args array of TFile paths
764 Writes credentials to a file in specified format. @param f file to write to @param format format type ("FORMAT_PB" for protobuf, default is writable) @param creds credentials to write @param conf configuration settings @throws IOException if an I/O error occurs
765 Rolls log directory if needed based on current time. Handles log file creation, closing, and scheduling.
766 Lists JAR files in a directory. @param path directory path, can include wildcard @param useLocal true to use local file system, false for HDFS @return List of Path objects representing JAR files
767 Constructs a Server instance. @param protocolClass protocol class type @param protocolImpl implementation of the protocol @param conf server configuration @param bindAddress address to bind the server @param port port number for the server @throws IOException if an I/O error occurs
768 Deprecated constructor for Server. @param protocolImpl implementation of the protocol @param conf configuration settings @param bindAddress address to bind server to @param port port number for the server @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler size of the queue per handler @param verbose flag for verbose output @param secretManager secret manager for security @throws IOException if an I/O error occurs
769 Processes out-of-band RPC requests. @param header request header containing call ID and metadata @param buffer data buffer for the request @throws RpcServerException if server encounters a fatal error @throws IOException if I/O operations fail @throws InterruptedException if operation is interrupted
770 Establishes an authenticated URL connection. @param url the target URL to connect to @return the established URLConnection @throws Exception if connection fails or is not supported
771 Copies file from local source to destination. @param src source file path @param dst destination file path @throws IOException if an I/O error occurs
772 Moves a file from local source to destination. @param src source file path @param dst destination file path @throws IOException if an I/O error occurs
773 Copies a file from local to HDFS. @param delSrc true to delete the source file after copying @param src source path on local filesystem @param dst destination path in HDFS @throws IOException if an I/O error occurs
774 Copies a file from source to destination locally. @param src source file path @param dst destination file path @throws IOException if an I/O error occurs during the copy process
775 Moves a file from source to destination. @param src source file path @param dst destination file path @throws IOException if an I/O error occurs
776 Copies a file from HDFS to the local filesystem. @param delSrc true if source file should be deleted after copying @param src source path in HDFS @param dst destination path on local filesystem @throws IOException if an I/O error occurs
777 Obtains local write path for a given configuration. @param pathStr string representation of the path @param size expected file size @param conf configuration settings @param checkWrite flag to check write permissions @return Path object suitable for writing @throws IOException if an I/O error occurs
778 Creates a temporary file for writing. @param pathStr base path string @param size desired file size @param conf configuration settings @return temporary File object @throws IOException if an I/O error occurs
779 Retrieves local file path for reading. @param pathStr string representation of the path @param conf configuration settings @return Path object for reading @throws IOException if an I/O error occurs
780 Retrieves all local paths for reading. @param pathStr base directory path @param conf configuration settings @return Iterable of Path objects
781 Initializes NflyFSystem with specified URIs and configuration. @param uris array of URI objects representing file locations @param conf Configuration object for system settings @param minReplication minimum replication factor required @param nflyFlags set of NflyKey flags to configure behavior @throws IOException if an I/O error occurs during initialization
782 Creates a FileSystem instance with specified URIs and configuration. @param uris array of URI objects representing file system locations @param conf Configuration object for the file system @param settings comma-separated key-value pairs for additional settings @param fsGetter FsGetter instance for file system retrieval @return NflyFSystem object configured with provided parameters @throws IOException if an I/O error occurs during creation
783 Expands command line arguments into PathData objects. @param args list of command line arguments @return LinkedList containing expanded PathData objects @throws IOException if an I/O error occurs during expansion
784 Retrieves and writes delegation tokens to a file. @param tokenFile destination file for tokens @param fileFormat format of the output file @param alias optional alias for the service @param service target service for which tokens are fetched @param url URL associated with the service @param renewer entity that can renew the token @param conf configuration settings @throws Exception if an error occurs during token retrieval or file writing
785 Aliases a specific service's token in the given token file. @param tokenFile the file containing tokens @param fileFormat format of the token file @param alias new service name for the token @param service existing service whose token needs to be aliased @param conf configuration settings
786 Appends tokens from multiple files into a single credentials object. @param tokenFiles list of token storage files @param fileFormat format for writing the combined tokens @param conf configuration settings @throws IOException if an I/O error occurs
787 Removes a token from the specified file. @param cancel whether to cancel managed tokens @param tokenFile file containing tokens @param fileFormat format of the token file @param alias alias of the token to remove @param conf configuration settings @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
788 Renews tokens in a file matching a specific alias. @param tokenFile the file containing tokens @param fileFormat format of the token file @param alias alias to match for token renewal @param conf configuration settings
789 Imports a token from a file or creates a new one. @param tokenFile the file containing the token @param fileFormat format of the token file @param alias service alias for the token @param base64 base64 encoded token string @param conf configuration settings
790 Retrieves JAR files from a specified directory. @param path directory path to search @return list of Path objects representing JAR files
791 Deprecated constructor for creating a Server. @param instance server instance object @param conf configuration settings @param bindAddress address to bind the server @param port port number for the server @throws IOException if an I/O error occurs
792 Processes a single RPC request from the buffer. @param bb ByteBuffer containing the RPC data @throws IOException if an I/O error occurs @throws InterruptedException if the thread is interrupted
793 Processes a URL to read and print lines starting with a marker. @param urlString the URL to connect to @throws Exception if connection or reading fails
794 Moves temporary local file to final output location. @param fsOutputFile destination path in filesystem @param tmpLocalFile source temporary file path @throws IOException if an I/O error occurs during the move operation
795 Copies a file or directory from HDFS to the local filesystem. @param src source path in HDFS @param dst destination path on local filesystem @param copyCrc whether to also copy checksum files @throws IOException if an I/O error occurs
796 Gets local write path with configuration. @param pathStr file path string @param size file size in bytes @param conf configuration settings @return Path for writing or throws IOException
797 Creates a temporary file for writing. @param pathStr file path string @param size desired file size in bytes @param conf configuration settings @return File object representing the created temporary file
798 Processes and expands raw command-line arguments. @param args LinkedList of raw argument strings @throws IOException if an I/O error occurs during processing
799 Creates a writer with specified configuration and options. @param conf configuration settings @param opts optional writer configurations @return Writer instance based on compression type @throws IOException if an I/O error occurs
800 Creates a JAR file with class path entries. @param inputClassPath the original class path string @param pwd working directory path @param targetDir target directory for relative paths @param callerEnv environment variables map @return array containing created JAR path and unexpanded wildcards @throws IOException if an I/O error occurs
801 Validates and processes file paths. @param files comma-separated list of file paths @param expandWildcard flag to expand wildcard paths @return comma-separated string of validated file paths @throws IOException if file operations fail
802 Reads and processes data from a channel, handling connection headers and RPC packets. @return The number of bytes read or -1 if processing is complete or an error occurs. @throws IOException if an I/O error occurs during reading. @throws InterruptedException if the thread is interrupted while waiting for data.
803 Unwraps and processes RPCs from input buffer. @param inBuf encrypted data buffer @throws IOException if I/O error occurs @throws InterruptedException if thread is interrupted
804 Retrieves log level for a specified class. @throws Exception if an error occurs during processing
805 Sets log level for a specified class. @param protocol HTTP or HTTPS protocol @param hostName server address @param className target class name @param level new log level
806 Creates a KeyProvider for the specified URI. @param providerUri URI of the key management service @param conf configuration settings @return KeyProvider instance or null if scheme does not match @throws IOException on invalid URI or configuration
807 Completes local file output by moving temporary file. @param fsOutputFile destination path for the final file @param tmpLocalFile temporary file path to be moved @throws IOException if an I/O error occurs
808 Creates a temporary file for writing. @param pathStr base path string @param size desired file size @param conf configuration settings @return created temporary File object @throws IOException if an I/O error occurs
809 Retrieves local file path for writing. @param pathStr file path string @param conf configuration settings @return Path object for writing @throws IOException if an I/O error occurs
810 Executes command with given arguments. @param argv command-line arguments @return exit code indicating success or error
811 Constructs a new Reader instance. @param fs FileSystem to use for reading @param file path of the file to read @param conf configuration settings @throws IOException if an I/O error occurs
812 Initializes a new Reader instance. @param fs FileSystem to operate on @param dirName directory name for reading @param comparator custom comparator for key sorting @param conf configuration settings @throws IOException if an I/O error occurs
813 Constructs a Reader from a directory name. @param fs FileSystem instance @param dirName directory path as string @param conf configuration settings @throws IOException if an I/O error occurs
814 Constructs a new Reader. @param fs FileSystem instance @param dirName directory name @param comparator WritableComparator for sorting @param conf configuration settings @throws IOException if an I/O error occurs
815 Clones file attributes from input to output. @param inputFile source file path @param outputFile destination file path @param prog progress tracking object @return Writer for the output file @throws IOException if an I/O error occurs
816 Fixes a SequenceFile by creating an index if missing. @param fs FileSystem object @param dir Directory containing the SequenceFile @param keyClass Key class of the SequenceFile @param valueClass Value class of the SequenceFile @param dryrun If true, perform a dry run without making changes @param conf Configuration for the operation @return Number of entries processed or -1 if no fixing was needed @throws Exception if an error occurs during processing
817 Creates a writer for a file in a specified filesystem. @param fs the FileSystem to write to @param conf configuration settings @param name path of the file to write @param keyClass class type for keys @param valClass class type for values @return Writer object for writing data @throws IOException if an I/O error occurs
818 Creates a writer for writing data to HDFS. @param fs FileSystem instance @param conf Configuration object @param name Path where data will be written @param keyClass Class type of the keys @param valClass Class type of the values @param compressionType Type of compression to use @return Writer for writing data @throws IOException if an I/O error occurs
819 Creates a writer for writing data to a file. @param fs FileSystem instance @param conf Configuration settings @param name Path of the file to write to @param keyClass Class type for keys @param valClass Class type for values @param compressionType Type of compression to use @param progress Progressable object for tracking progress @return Writer instance or null if creation fails
820 Creates a writer for writing data to a file in Hadoop. @param fs FileSystem instance @param conf Configuration object @param name Path of the file to write @param keyClass Class type of keys @param valClass Class type of values @param compressionType Type of compression @param codec Compression codec @return Writer object for writing data @throws IOException if an I/O error occurs
821 Creates a writer for a file in the specified filesystem. @param fs the filesystem where the file is located @param conf the configuration settings @param name the path of the file @param keyClass the class type of the keys @param valClass the class type of the values @param compressionType the type of compression to use @param codec the codec for compression @param progress a Progressable object for tracking progress @param metadata metadata associated with the file @return a Writer instance @throws IOException if an I/O error occurs
822 Creates a new writer for Hadoop FileSystem. @param fs FileSystem instance @param conf Configuration settings @param name Path to the file @param keyClass Class type of the keys @param valClass Class type of the values @param bufferSize Buffer size in bytes @param replication File replication factor @param blockSize Block size in bytes @param compressionType Compression type (NONE, RECORD, or BLOCK) @param codec Compression codec to use @param progress Progressable object for tracking progress @param metadata Metadata to associate with the file @return Writer instance for writing data @throws IOException if an I/O error occurs
823 Creates a new writer for writing to a Hadoop file system. @param fs the file system to write to @param conf the configuration settings @param name the path of the file to write @param keyClass the class type of keys @param valClass the class type of values @param compressionType the type of compression to use @param codec the compression codec to use @param progress an object for tracking progress @return a Writer instance configured with the provided parameters @throws IOException if an I/O error occurs
824 Creates a Writer instance with specified configuration and output stream. @param conf Hadoop Configuration object @param out file system data output stream @param keyClass class of the keys written by this writer @param valClass class of the values written by this writer @param compressionType type of compression (NONE, RECORD, or BLOCK) @param codec compression codec to use @param metadata additional metadata for the writer @return Writer instance configured with provided parameters @throws IOException if an I/O error occurs
825 Creates a deprecated writer with specified configuration and output stream. @param conf Hadoop configuration @param out file system data output stream @param keyClass class of the key @param valClass class of the value @param compressionType type of compression @param codec compression codec @return Writer object configured with given parameters @throws IOException if an I/O error occurs
826 Validates file paths. @param files comma-separated list of file paths @return validation result message @throws IOException if an I/O error occurs
827 Sends a log level request based on the operation. @throws HadoopIllegalArgumentException if invalid operation @throws Exception for other errors
828 Creates a DataBlock for writing. @param index block identifier @param limit maximum data size @param statistics upload statistics tracker @return DataBlock instance @throws IOException if file creation fails
829 Generates a temporary file path. @param conf Hadoop configuration object @param localDirAllocator allocator for local directories @return Path to the created temporary file with POSIX permissions set @throws IOException if an I/O error occurs
830 Runs a command with given arguments. @param argv command line arguments @return exit code of the command execution
831 Initializes a new instance of the Reader class. @param fs FileSystem object representing the file system @param dirName directory name to read from @param conf Configuration settings for the reader @throws IOException if an I/O error occurs during initialization
832 Merges multiple segments into a single sorted output. @return RawKeyValueIterator for merged data @throws IOException if an I/O error occurs
833 Initializes a Writer for sequence files. @param conf Hadoop configuration @param fs FileSystem instance @param dirName directory name for output @param comparator custom key comparator @param compress compression type for files @throws IOException if initialization fails
834 Initializes a Writer for writing data to a file. @param conf Hadoop configuration @param fs FileSystem instance @param file path to the output file @param valClass class of the writable values @throws IOException if an I/O error occurs
835 Initializes a Writer with specified configuration and parameters. @param conf Hadoop configuration @param fs FileSystem instance @param file Output file path @param valClass Class type of the value to write @param compress Compression type for output @param progress Progressable object for tracking progress @throws IOException if an I/O error occurs
836 Constructs a Writer instance with specified configuration and file system. @param conf Hadoop configuration @param fs FileSystem object @param dirName directory name for output @param keyClass class of keys to be written @param valClass class of values to be written @throws IOException if an I/O error occurs
837 Deprecated constructor for Writer. @param conf configuration settings @param fs file system @param dirName directory name @param keyClass key class type @param valClass value class type @param compress compression type @param progress progressable object @throws IOException if an I/O error occurs
838 Deprecated constructor for Writer. @param conf Hadoop configuration @param fs FileSystem instance @param dirName output directory name @param keyClass key class type @param valClass value class type @param compress compression type @param codec compression codec @param progress progressable object @throws IOException if an I/O error occurs
839 Deprecated constructor for Writer. @param conf Configuration object @param fs FileSystem instance @param dirName directory name @param keyClass key class type @param valClass value class type @param compress compression type @throws IOException if an I/O error occurs
840 Deprecated constructor for Writer. @param conf Configuration object @param fs FileSystem instance @param dirName directory name for output @param comparator WritableComparator for key comparison @param valClass class of the values @throws IOException if an I/O error occurs
841 Constructs a Writer with specified configuration. @param conf Hadoop configuration @param fs FileSystem instance @param dirName directory name for writing @param comparator key comparator @param valClass value class type @param compress compression type for sequence file @throws IOException if an I/O error occurs
842 Deprecated constructor for Writer. @param conf configuration settings @param fs file system reference @param dirName directory name for output @param comparator key comparator @param valClass value class type @param compress compression type @param progress progressable instance @throws IOException if an I/O error occurs
843 Deprecated constructor for Writer. @param conf configuration settings @param fs file system @param dirName directory name @param comparator key comparator @param valClass value class @param compress compression type @param codec compression codec @param progress progressable object @throws IOException if an I/O error occurs
844 Creates a Writer for writing data to a file. @param fc FileContext instance @param conf Configuration settings @param name Path of the file to write @param keyClass Class type of keys @param valClass Class type of values @param compressionType Compression type to use @param codec Compression codec @param metadata Metadata for the file @param createFlag Flags for file creation @param opts Additional options for creation @return Writer instance for writing data @throws IOException if an I/O error occurs
845 Main entry point for processing command line arguments. Handles options like -glob and -jar for classpath operations.
846 Creates a ClassLoader based on the provided file and work directory. @param file main file for classpath @param workDir working directory containing classes and libraries @return created ClassLoader instance
847 Processes general options from command line. @param line CommandLine object containing parsed options @throws IOException if an I/O error occurs
848 Retrieves cache file path using configuration and allocator. @param conf Hadoop configuration object @param localDirAllocator directory allocator for temporary files @return Path to the cache file @throws IOException if an I/O error occurs
849 Checks if cache space is available for a file. @param fileSize size of the file to be cached @param conf configuration settings @param localDirAllocator allocator for local directories @return true if sufficient space, false otherwise
850 Merges segment descriptors into a single iterator. @param segments list of segment descriptors to merge @param tmpDir temporary directory for intermediate files @return RawKeyValueIterator over merged data @throws IOException if an I/O error occurs during merging
851 Merges multiple input files into a single iterator. @param inNames array of input file paths @param deleteInputs flag to delete input files after merging @param factor merge factor @param tmpDir temporary directory for intermediate files @return RawKeyValueIterator over merged data @throws IOException if an I/O error occurs
852 Merges input files into a single sorted file. @param inNames array of input file paths @param tempDir temporary directory for intermediate outputs @param deleteInputs flag to delete input files after merging @return iterator over merged key-value pairs @throws IOException if an I/O error occurs
853 Merges segments from the given input and index paths. @param inName path to input data @param indexIn path to index file @param tmpDir temporary directory for merge operations @return RawKeyValueIterator containing merged data @throws IOException if an I/O error occurs during merging
854 Initializes a Writer with specified configuration and compression.
855 Initializes a Writer with specified FileSystem, directory, and key class. @param fs the FileSystem to use @param dirName the directory name for output @param keyClass the key class type @throws IOException if an I/O error occurs
856 Merges multiple input map files into one output file. @param inMapFiles array of input map file paths @param deleteInputs flag to delete input files after merging @param outMapFile path for the merged output file @throws IOException if an I/O error occurs during processing
857 Creates a writer for a file in the specified FileSystem. @param fs FileSystem instance @param conf Configuration settings @param name Path of the file to create @param keyClass Class type for keys @param valClass Class type for values @param bufferSize Size of the buffer @param replication Replication factor @param blockSize Block size @param createParent Flag to create parent directories if needed @param compressionType Type of compression @param codec Compression codec to use @param metadata Metadata for the file @return Writer object for the created file @throws IOException if an I/O error occurs
858 Parses general command-line options. @param opts Options object to configure @param args Command-line arguments array @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs during parsing
859 Caches a block of data in local storage. @param blockNumber unique identifier for the block @param buffer data to be cached @param conf configuration settings @param localDirAllocator allocator for local directories @throws IOException if an I/O error occurs
860 Merges multiple input paths into a single iterator. @param inNames array of input file paths @param deleteInputs flag to delete input files after merging @param tmpDir temporary directory for intermediate results @return RawKeyValueIterator containing merged data
861 Executes a merge pass on sorted files. @param tmpDir temporary directory for intermediate files @return 0 indicating successful completion @throws IOException if an I/O error occurs
862 Main entry point to run a JAR file. @param args command-line arguments passed to the application
863 Parses command-line arguments using provided configuration and options. @param conf Configuration object for parsing @param options Command-line options to be parsed @param args Array of command-line arguments @throws IOException if an I/O error occurs during parsing
864 Sorts input files and returns an iterator over sorted key-value pairs. @param inFiles array of input file paths @param tempDir temporary directory for sorting @param deleteInput flag to delete input files after processing @return RawKeyValueIterator over sorted data or null if no segments @throws IOException if sorting fails or output file already exists
865 Merges multiple input files into a single output file. @param inFiles array of input file paths @param outFile path to the output file @throws IOException if output file already exists or an I/O error occurs
866 Sorts input files and merges them into an output file. @param inFiles array of input file paths @param outFile path to the output file @param deleteInput flag to delete input files after processing @throws IOException if I/O operations fail or output file already exists
867 Constructs a GenericOptionsParser. @param opts command-line options @param args command-line arguments @throws IOException if an I/O error occurs
868 Parses command-line arguments using default configuration and options. @param args command-line arguments array @throws IOException if an I/O error occurs during parsing
869 Initializes GenericOptionsParser with configuration and arguments. @param conf Configuration object @param args Command-line arguments array @throws IOException if an I/O error occurs during parsing
870 Sorts input file and writes to output file. @param inFile path to the input file @param outFile path to the output file @throws IOException if an I/O error occurs
871 Creates a GenericOptionsParser with specified configuration and arguments. @param conf Configuration object @param argArray Array of command-line arguments @return GenericOptionsParser instance @throws IOException if there is an I/O error
872 Runs a Hadoop tool with given configuration and arguments. @param conf Configuration object, may be null @param tool Tool to execute @param args Command-line arguments @return Exit code from the tool's run method @throws Exception if an error occurs during execution
873 Parses command-line arguments and updates configuration. @param conf Configuration object to update @param args List of command-line arguments @return List of remaining arguments after parsing @throws ServiceLaunchException if parsing fails
874 Executes a diagnostic tool with configuration and arguments. @param conf configuration settings for the tool @param argv command-line arguments for the tool @return exit code from the tool execution @throws Exception if an error occurs during execution
875 Runs credential shell tool. @param args command-line arguments
876 Main entry point of the program. @param args command-line arguments @throws Exception if an error occurs during execution
877 Runs a tool with given arguments. @param tool the Tool instance to execute @param args command-line arguments for the tool @return exit code from the tool execution @throws Exception if an error occurs during execution
878 Extracts command options from arguments. @param conf configuration object @param args list of command-line arguments @return list of extracted options
879 Main entry point of the application. @param argv command line arguments
880 Executes Hadoop file system commands. @param argv command-line arguments
881 Main entry point for command-line tool. Initializes and runs CLI with provided arguments. @param args command-line arguments
882 Main entry point for running FindClass. @param args command-line arguments
883 Launches a service with provided arguments and exits. @param args list of command-line arguments
884 Entry point of the application. @param args command line arguments passed to the program
885 Main entry point for the service. Converts varargs to list and calls overloaded method. @param args command line arguments
