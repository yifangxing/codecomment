{
    "com.google.common.base.Optional": {
        "com.google.common.base.Optional:<init>()": "/**\n* Creates an empty Optional instance.\n* @return an empty Optional object\n*/",
        "com.google.common.base.Optional:toJavaUtil()": "/**\n* Converts the object to an Optional.\n* @return Optional containing the object or empty if null\n*/",
        "com.google.common.base.Optional:presentInstances(java.lang.Iterable)": "/**\n* Returns an iterable of present values from optional instances.\n* @param optionals iterable of optional values\n* @return iterable containing non-null values or empty if none present\n*/",
        "com.google.common.base.Optional:absent()": "/**\n* Returns an absent Optional instance of type T.\n* @return Optional<T> representing absence of value\n*/",
        "com.google.common.base.Optional:toJavaUtil(com.google.common.base.Optional)": "/**\n* Converts a Google Optional to a Java Optional.\n* @param googleOptional Google Optional to convert, can be null\n* @return Java Optional or null if input is null\n*/",
        "com.google.common.base.Optional:of(java.lang.Object)": "/**\n* Creates an Optional from a reference, ensuring it's non-null.\n* @param reference the object to wrap in an Optional\n* @return Optional containing the reference\n*/",
        "com.google.common.base.Optional:fromNullable(java.lang.Object)": "/**** Constructs an Optional from a nullable reference. \n* @param nullableReference may be null; wraps in Optional\n* @return Optional containing the reference or absent if null \n*/",
        "com.google.common.base.Optional:fromJavaUtil(java.util.Optional)": "/**\n* Converts a Java Optional to a nullable Optional.\n* @param javaUtilOptional Java Optional that may be null\n* @return Nullable Optional containing the value or null if input is null\n*/"
    },
    "com.google.common.base.Absent": {
        "com.google.common.base.Absent:get()": "/**\n* Retrieves the value, throwing an exception if absent.\n* @return the value of type T\n* @throws IllegalStateException if no value is present\n*/",
        "com.google.common.base.Absent:asSet()": "/**\n* Returns an empty set of type T.\n* @return an empty Set<T>\n*/",
        "com.google.common.base.Absent:withType()": "/**\n* Returns an Optional instance of the specified type T.\n* @return Optional<T> instance\n*/",
        "com.google.common.base.Absent:equals(java.lang.Object)": "/**\n* Compares this object with another for reference equality.\n* @param obj the object to compare with\n* @return true if this is the same instance as obj, false otherwise\n*/",
        "com.google.common.base.Absent:hashCode()": "/**\n* Returns a constant hash code value for the object.\n* @return constant integer hash code\n*/",
        "com.google.common.base.Absent:isPresent()": "/**\n* Checks if an item is present.\n* @return false indicating absence of the item\n*/",
        "com.google.common.base.Absent:orNull()": "/**\n* Returns null, indicating the absence of a value.\n* @return null as a placeholder for no value\n*/",
        "com.google.common.base.Absent:toString()": "/**\n* Returns a string representation of an absent optional value.\n* @return \"Optional.absent()\" indicating absence\n*/",
        "com.google.common.base.Absent:<init>()": "/**\n* Constructs an instance of Absent.\n* This constructor is private to prevent instantiation.\n*/",
        "com.google.common.base.Absent:or(java.lang.Object)": "/**\n* Returns a non-null default value or throws an exception if null.\n* @param defaultValue the default value to return if valid\n* @return the non-null default value\n*/",
        "com.google.common.base.Absent:or(com.google.common.base.Supplier)": "/**\n* Returns value from supplier, ensuring it's not null.\n* @param supplier a Supplier providing the value\n* @return non-null value from supplier\n*/",
        "com.google.common.base.Absent:or(com.google.common.base.Optional)": "/**\n* Returns the provided Optional after ensuring it's not null.\n* @param secondChoice an Optional value to return\n* @return the non-null Optional\n*/",
        "com.google.common.base.Absent:transform(com.google.common.base.Function)": "/**\n* Transforms input using a function; returns absent Optional if transformation fails.\n* @param function the function to apply to the input\n* @return Optional containing transformed value or absent if no value\n*/"
    },
    "com.google.common.base.Preconditions": {
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.Object)": "/**\n* Checks that the reference is not null and returns it.\n* @param reference the object to check\n* @param errorMessage the message for the exception if reference is null\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object)": "/**\n* Ensures the reference is not null; throws NullPointerException if it is.\n* @param reference the object to check for null\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkState(boolean)": "/**\n* Validates a boolean expression; throws IllegalStateException if false.\n* @param expression condition to check\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,int,int)": "/**\n* Validates an expression; throws IllegalArgumentException if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for error message\n* @param p1 first parameter for error message\n* @param p2 second parameter for error message\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean)": "/**\n* Validates an expression; throws IllegalArgumentException if false.\n* @param expression condition to check\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,java.lang.Object)": "/**\n* Validates an expression; throws IllegalArgumentException if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param errorMessageArgs arguments for the error message template\n*/",
        "com.google.common.base.Preconditions:<init>()": "/**\n* Private constructor to prevent instantiation of the Preconditions class.\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.Object)": "/**\n* Validates an expression, throwing IllegalArgumentException if false.\n* @param expression condition to check\n* @param errorMessage message for the exception if check fails\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,char)": "/**\n* Validates an expression; throws IllegalArgumentException if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for error message\n* @param p1 parameter for error message formatting\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,int)": "/**\n* Validates an expression; throws IllegalArgumentException if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 parameter for error message formatting\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,long)": "/**\n* Validates an expression; throws IllegalArgumentException if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 parameter for the error message formatting\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,char,char)": "/**\n* Validates an expression; throws IllegalArgumentException if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for error message\n* @param p1 first character for error message\n* @param p2 second character for error message\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,char,int)": "/**\n* Validates an expression and throws an exception if false.\n* @param expression condition to check\n* @param errorMessageTemplate message template for error\n* @param p1 character to include in error message\n* @param p2 integer to include in error message\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,char,long)": "/**\n* Validates an expression; throws IllegalArgumentException if false.\n* @param expression condition to check\n* @param errorMessageTemplate message format for the exception\n* @param p1 character parameter for the message\n* @param p2 long parameter for the message\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,char,java.lang.Object)": "/**\n* Validates an expression; throws IllegalArgumentException if false.\n* @param expression condition to check\n* @param errorMessageTemplate message format for the exception\n* @param p1 first parameter for the error message\n* @param p2 second parameter for the error message (nullable)\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,int,char)": "/**\n* Validates an expression; throws an exception if false.\n* @param expression condition to check\n* @param errorMessageTemplate message template for the exception\n* @param p1 integer parameter for the message\n* @param p2 character parameter for the message\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,int,long)": "/**\n* Validates an expression; throws IllegalArgumentException if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for error message\n* @param p1 first parameter for error message\n* @param p2 second parameter for error message\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,int,java.lang.Object)": "/**\n* Validates an expression; throws IllegalArgumentException if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 first parameter for the error message\n* @param p2 second parameter for the error message, can be null\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,long,char)": "/**\n* Validates an expression; throws IllegalArgumentException if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for error message\n* @param p1 first parameter for error message\n* @param p2 second parameter for error message\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,long,int)": "/**\n* Validates an expression; throws IllegalArgumentException if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 first parameter for message formatting\n* @param p2 second parameter for message formatting\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,long,long)": "/**\n* Validates an expression; throws exception if false with formatted error message.\n* @param expression condition to check\n* @param errorMessageTemplate template for error message\n* @param p1 first parameter for message formatting\n* @param p2 second parameter for message formatting\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,long,java.lang.Object)": "/**\n* Validates an expression; throws IllegalArgumentException if false.\n* @param expression condition to evaluate\n* @param errorMessageTemplate template for error message\n* @param p1 first parameter for the error message\n* @param p2 second parameter for the error message (nullable)\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,java.lang.Object,char)": "/**\n* Validates an expression and throws an exception if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 optional argument for the message\n* @param p2 character used in the message\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,java.lang.Object,int)": "/**\n* Validates an expression and throws an exception if false.\n* @param expression condition to check\n* @param errorMessageTemplate message format if invalid\n* @param p1 optional parameter for message formatting\n* @param p2 additional integer for message formatting\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,java.lang.Object,long)": "/**\n* Validates an expression; throws exception if false with a formatted error message.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 optional parameter for message formatting\n* @param p2 additional parameter for message formatting\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)": "/**\n* Validates an expression; throws IllegalArgumentException if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for error message\n* @param p1 first parameter for message formatting\n* @param p2 second parameter for message formatting\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Validates an expression, throwing an exception if false.\n* @param expression condition to check\n* @param errorMessageTemplate format for the error message\n* @param p1 optional parameter for message formatting\n* @param p2 optional parameter for message formatting\n* @param p3 optional parameter for message formatting\n*/",
        "com.google.common.base.Preconditions:checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Validates an expression and throws an exception with a formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 optional parameter for message formatting\n* @param p2 optional parameter for message formatting\n* @param p3 optional parameter for message formatting\n* @param p4 optional parameter for message formatting\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.Object)": "/**\n* Validates an expression; throws IllegalStateException if false.\n* @param expression condition to check\n* @param errorMessage optional message for the exception\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,char)": "/**\n* Validates an expression and throws an exception if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 parameter for the error message formatting\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,int)": "/**\n* Validates an expression and throws an exception if false.\n* @param expression condition to check\n* @param errorMessageTemplate message template for exception\n* @param p1 parameter for the message template\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,long)": "/**\n* Validates an expression; throws IllegalStateException if false.\n* @param expression condition to check\n* @param errorMessageTemplate message template for the exception\n* @param p1 parameter for the error message\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,java.lang.Object)": "/**\n* Validates expression; throws IllegalStateException if false with formatted error message.\n* @param expression condition to check\n* @param errorMessageTemplate template for error message\n* @param errorMessageArgs arguments for formatting the error message\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,char,char)": "/**\n* Validates an expression and throws an exception with a formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 first character for message formatting\n* @param p2 second character for message formatting\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,char,int)": "/**\n* Validates an expression and throws an exception with a formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate message template for the exception\n* @param p1 character to include in the message\n* @param p2 integer to include in the message\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,char,long)": "/**\n* Validates an expression and throws an exception with a formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 character to include in the message\n* @param p2 long value to include in the message\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,char,java.lang.Object)": "/**\n* Validates expression; throws IllegalStateException with formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate message template for error\n* @param p1 first parameter for message formatting\n* @param p2 second parameter for message formatting\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,int,char)": "/**\n* Validates an expression; throws IllegalStateException if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for error message\n* @param p1 integer parameter for message\n* @param p2 character parameter for message\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,int,int)": "/**\n* Validates an expression; throws an exception with a formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 first parameter for message formatting\n* @param p2 second parameter for message formatting\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,int,long)": "/**\n* Validates an expression and throws an exception with a formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 first parameter for formatting\n* @param p2 second parameter for formatting\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,int,java.lang.Object)": "/**\n* Validates a condition and throws an exception with a formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 first parameter for formatting the message\n* @param p2 second parameter for formatting the message, can be null\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,long,char)": "/**\n* Validates an expression and throws an exception with a formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 parameter for message formatting\n* @param p2 parameter for message formatting\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,long,int)": "/**\n* Validates an expression and throws an exception with a formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate message template for the exception\n* @param p1 first parameter for message formatting\n* @param p2 second parameter for message formatting\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,long,long)": "/**\n* Validates a condition and throws an exception with a message if false.\n* @param expression condition to check\n* @param errorMessageTemplate message format for the exception\n* @param p1 first parameter for the message\n* @param p2 second parameter for the message\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,long,java.lang.Object)": "/**\n* Validates an expression and throws an exception with a formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate message template for the exception\n* @param p1 value to format in the message\n* @param p2 optional value to format in the message\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,java.lang.Object,char)": "/**\n* Checks a condition and throws an exception with a formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 optional parameter for message formatting\n* @param p2 character for message formatting\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,java.lang.Object,int)": "/**\n* Validates an expression and throws an exception if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 optional parameter for error message\n* @param p2 additional parameter for error message\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,java.lang.Object,long)": "/**\n* Validates an expression and throws an exception if false.\n* @param expression condition to check\n* @param errorMessageTemplate message format for exception\n* @param p1 optional parameter for message formatting\n* @param p2 additional parameter for message formatting\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object)": "/**\n* Validates an expression; throws an exception with a formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 optional parameter for message formatting\n* @param p2 optional parameter for message formatting\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Validates an expression; throws IllegalStateException if false with formatted message.\n* @param expression condition to check\n* @param errorMessageTemplate message format for the exception\n* @param p1 optional parameter for message formatting\n* @param p2 optional parameter for message formatting\n* @param p3 optional parameter for message formatting\n*/",
        "com.google.common.base.Preconditions:checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Validates an expression and throws an exception with a formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for the error message\n* @param p1 optional parameter for formatting\n* @param p2 optional parameter for formatting\n* @param p3 optional parameter for formatting\n* @param p4 optional parameter for formatting\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,char)": "/**\n* Checks if reference is not null; throws NullPointerException if it is.\n* @param reference the object to check\n* @param errorMessageTemplate the error message template\n* @param p1 a character for error message formatting\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,int)": "/**\n* Validates that the reference is not null; throws NullPointerException if it is.\n* @param reference object to check for null\n* @param errorMessageTemplate template for the error message\n* @param p1 additional parameter for error message formatting\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,long)": "/**\n* Validates that the reference is not null; throws NullPointerException if it is.\n* @param reference the object to check for null\n* @param errorMessageTemplate the error message template for exception\n* @param p1 additional parameter for error message formatting\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)": "/**\n* Checks if the reference is not null; throws NullPointerException if it is.\n* @param reference the object to check\n* @param errorMessageTemplate the error message template if null\n* @param errorMessageArgs arguments for the error message template\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,char,char)": "/**\n* Checks if reference is non-null; throws NullPointerException if null.\n* @param reference object to check\n* @param errorMessageTemplate message template for exception\n* @param p1 first character for message formatting\n* @param p2 second character for message formatting\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,char,int)": "/**\n* Validates that the reference is not null; throws NullPointerException if it is.\n* @param reference the object to check for null\n* @param errorMessageTemplate message template for the exception\n* @param p1 additional parameter for the error message\n* @param p2 additional parameter for the error message\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,char,long)": "/**\n* Checks if the reference is non-null; throws NullPointerException if null.\n* @param reference the object to check\n* @param errorMessageTemplate the message template for the exception\n* @param p1 a character used in the error message\n* @param p2 a long value used in the error message\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,char,java.lang.Object)": "/**\n* Checks if reference is not null; throws NullPointerException if it is.\n* @param reference object to check\n* @param errorMessageTemplate message template for exception\n* @param p1 character for message formatting\n* @param p2 additional object for message formatting\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,int,char)": "/**\n* Checks if reference is not null; throws NullPointerException if it is.\n* @param reference object to check\n* @param errorMessageTemplate message for exception\n* @param p1 integer parameter for message formatting\n* @param p2 character parameter for message formatting\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,int,int)": "/**\n* Checks that the reference is not null and throws an exception if it is.\n* @param reference object to check for null\n* @param errorMessageTemplate message for the exception\n* @param p1 first parameter for error message formatting\n* @param p2 second parameter for error message formatting\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,int,long)": "/**\n* Validates that the reference is not null; throws NullPointerException if it is.\n* @param reference object to check for nullity\n* @param errorMessageTemplate template for the error message\n* @param p1 additional parameter for error message formatting\n* @param p2 additional parameter for error message formatting\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,int,java.lang.Object)": "/**\n* Checks if the reference is non-null; throws NullPointerException if null.\n* @param reference the object to check\n* @param errorMessageTemplate the message template for the exception\n* @param p1 a parameter for the error message\n* @param p2 an optional parameter for the error message\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,long,char)": "/**\n* Checks that the reference is not null and throws an exception if it is.\n* @param reference the object to check\n* @param errorMessageTemplate the error message template\n* @param p1 a long parameter for the error message\n* @param p2 a char parameter for the error message\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,long,int)": "/**\n* Checks if the reference is non-null; throws NPE with formatted message if null.\n* @param reference object to check\n* @param errorMessageTemplate template for the error message\n* @param p1 additional parameter for message formatting\n* @param p2 additional parameter for message formatting\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,long,long)": "/**\n* Checks if reference is not null, throws NullPointerException if it is.\n* @param reference the object to check\n* @param errorMessageTemplate message format for the exception\n* @param p1 first parameter for the error message\n* @param p2 second parameter for the error message\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,long,java.lang.Object)": "/**\n* Checks that the reference is not null, throwing an exception with a formatted message if it is.\n* @param reference the object to check\n* @param errorMessageTemplate the message template for the exception\n* @param p1 a parameter for the message formatting\n* @param p2 an additional parameter for the message formatting\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,char)": "/**\n* Checks if the reference is not null; throws NullPointerException if it is.\n* @param reference the object to check\n* @param errorMessageTemplate the error message format\n* @param p1 optional parameter for the error message\n* @param p2 optional char for the error message\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,int)": "/**\n* Checks that the reference is not null and throws an exception if it is.\n* @param reference the object to check for null\n* @param errorMessageTemplate the error message if reference is null\n* @param p1 additional parameter for formatting the error message\n* @param p2 another additional parameter for formatting\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,long)": "/**\n* Checks if the reference is not null; throws NullPointerException if it is.\n* @param reference the object to check for null\n* @param errorMessageTemplate the message template for the exception\n* @param p1 additional parameter for the error message\n* @param p2 additional parameter for the error message\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)": "/**\n* Validates that the reference is not null, throwing an exception if it is.\n* @param reference the object to check for null\n* @param errorMessageTemplate the message template for the exception\n* @param p1 optional parameter for the error message\n* @param p2 optional parameter for the error message\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Checks that the reference is not null, throwing an exception if it is.\n* @param reference the object to check\n* @param errorMessageTemplate the error message if reference is null\n* @param p1, p2, p3 optional parameters for formatting the error message\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Checks that the reference is not null and throws an exception if it is.\n* @param reference the object to check\n* @param errorMessageTemplate the error message if reference is null\n* @param p1, p2, p3, p4 optional parameters for formatting the error message\n* @return the non-null reference\n*/",
        "com.google.common.base.Preconditions:badElementIndex(int,int,java.lang.String)": "/**\n* Validates index against size and returns an error message if invalid.\n* @param index the index to validate\n* @param size the valid size limit\n* @param desc description of the index for error messages\n* @return formatted error message if invalid, otherwise null\n*/",
        "com.google.common.base.Preconditions:badPositionIndex(int,int,java.lang.String)": "/**\n* Validates index against size and generates error messages.\n* @param index the index to validate\n* @param size the maximum allowed size\n* @param desc description for the index\n* @return formatted error message if invalid\n*/",
        "com.google.common.base.Preconditions:checkElementIndex(int,int,java.lang.String)": "/**\n* Validates index against size and throws exception if invalid.\n* @param index the index to validate\n* @param size the valid size limit\n* @param desc description for error messages\n* @return the validated index\n*/",
        "com.google.common.base.Preconditions:checkPositionIndex(int,int,java.lang.String)": "/**\n* Validates index against size and throws exception if invalid.\n* @param index the index to validate\n* @param size the maximum allowed size\n* @param desc description for the index\n* @return the validated index\n*/",
        "com.google.common.base.Preconditions:badPositionIndexes(int,int,int)": "/**\n* Validates start and end indexes, returning error messages if invalid.\n* @param start beginning index\n* @param end ending index\n* @param size maximum allowed size\n* @return formatted error message or null if valid\n*/",
        "com.google.common.base.Preconditions:checkElementIndex(int,int)": "/**\n* Validates and returns the index against the specified size limit.\n* @param index the index to validate\n* @param size the valid size limit\n* @return the validated index\n*/",
        "com.google.common.base.Preconditions:checkPositionIndex(int,int)": "/**\n* Validates and returns the index against the specified size.\n* @param index the index to validate\n* @param size the maximum allowed size\n* @return the validated index\n*/",
        "com.google.common.base.Preconditions:checkPositionIndexes(int,int,int)": "/**\n* Validates position indexes and throws exception if invalid.\n* @param start beginning index, @param end ending index, @param size max allowed size\n*/"
    },
    "com.google.common.base.AbstractIterator": {
        "com.google.common.base.AbstractIterator:<init>()": "/**\n* Constructor for AbstractIterator, initializes a new instance.\n*/",
        "com.google.common.base.AbstractIterator:tryToComputeNext()": "/**\n* Attempts to compute the next state and updates the current state.\n* @return true if computation is initiated, false if already done\n*/",
        "com.google.common.base.AbstractIterator:remove()": "/**\n* Throws UnsupportedOperationException to indicate removal is not supported.\n*/",
        "com.google.common.base.AbstractIterator:endOfData()": "/**\n* Marks the end of data processing and returns null.\n* @return always null to indicate completion\n*/",
        "com.google.common.base.AbstractIterator:hasNext()": "/**\n* Checks if there is a next element based on current state.\n* @return true if next element exists, false if done or failed\n*/",
        "com.google.common.base.AbstractIterator:next()": "/**\n* Retrieves the next element in the iteration.\n* @return the next non-null element\n* @throws NoSuchElementException if no next element exists\n*/"
    },
    "com.google.common.base.NullnessCasts": {
        "com.google.common.base.NullnessCasts:uncheckedCastNullableTToT(java.lang.Object)": "/**\n* Casts a nullable object to a non-nullable type.\n* @param t nullable object to cast\n* @return the same object as non-nullable\n*/",
        "com.google.common.base.NullnessCasts:<init>()": "/**\n* Private constructor for NullnessCasts class to prevent instantiation.\n*/"
    },
    "com.google.common.base.Ascii": {
        "com.google.common.base.Ascii:<init>()": "/**\n* Private constructor for the Ascii class to prevent instantiation.\n*/",
        "com.google.common.base.Ascii:isUpperCase(char)": "/**\n* Checks if the character is an uppercase letter.\n* @param c character to check\n* @return true if uppercase, false otherwise\n*/",
        "com.google.common.base.Ascii:isLowerCase(char)": "/**\n* Checks if the given character is a lowercase letter.\n* @param c character to check\n* @return true if c is lowercase, false otherwise\n*/",
        "com.google.common.base.Ascii:getAlphaIndex(char)": "/**\n* Converts a character to its zero-indexed alphabet index (0-25).\n* @param c character to convert, case-insensitive\n* @return index of the alphabet (0 for 'a', 25 for 'z')\n*/",
        "com.google.common.base.Ascii:toLowerCase(java.lang.String)": "/**\n* Converts a string to lowercase if it contains uppercase letters.\n* @param string input string to convert\n* @return modified string in lowercase or original if no uppercase\n*/",
        "com.google.common.base.Ascii:toLowerCase(char)": "/**\n* Converts an uppercase character to lowercase.\n* @param c character to convert\n* @return lowercase version of c or c if not uppercase\n*/",
        "com.google.common.base.Ascii:toUpperCase(java.lang.String)": "/**\n* Converts a string to uppercase if it contains lowercase letters.\n* @param string input string to convert\n* @return uppercase version or original string if no lowercase letters\n*/",
        "com.google.common.base.Ascii:toUpperCase(char)": "/**\n* Converts a lowercase character to uppercase.\n* @param c character to convert\n* @return uppercase character or original if not lowercase\n*/",
        "com.google.common.base.Ascii:truncate(java.lang.CharSequence,int,java.lang.String)": "/**\n* Truncates a sequence to a specified length with an indicator.\n* @param seq input sequence to truncate\n* @param maxLength maximum length of the result\n* @param truncationIndicator string indicating truncation\n* @return truncated string with indicator\n*/",
        "com.google.common.base.Ascii:equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": "/**\n* Compares two CharSequences for equality, ignoring case.\n* @param s1 first sequence, may not be null\n* @param s2 second sequence, may not be null\n* @return true if equal ignoring case, false otherwise\n*/",
        "com.google.common.base.Ascii:toLowerCase(java.lang.CharSequence)": "/**\n* Converts a CharSequence to its lowercase representation.\n* @param chars input characters to convert\n* @return lowercase String version of chars\n*/",
        "com.google.common.base.Ascii:toUpperCase(java.lang.CharSequence)": "/**\n* Converts CharSequence to uppercase.\n* @param chars input sequence to convert\n* @return uppercase String representation\n*/"
    },
    "com.google.common.base.CaseFormat$3": {
        "com.google.common.base.CaseFormat$3:normalizeWord(java.lang.String)": "/**\n* Normalizes the input word for consistent formatting.\n* @param word the word to be normalized\n* @return the normalized version of the word\n*/",
        "com.google.common.base.CaseFormat$3:normalizeFirstWord(java.lang.String)": "/**\n* Normalizes the first word by calling normalizeWord.\n* @param word input string to normalize\n* @return normalized string from normalizeWord method\n*/"
    },
    "com.google.common.base.CaseFormat$4": {
        "com.google.common.base.CaseFormat$4:normalizeWord(java.lang.String)": "/**\n* Normalizes the input word to a standard format.\n* @param word the word to be normalized\n* @return the normalized version of the word\n*/"
    },
    "com.google.common.base.CaseFormat$StringConverter": {
        "com.google.common.base.CaseFormat$StringConverter:equals(java.lang.Object)": "/**\n* Compares this StringConverter with another object for equality.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.CaseFormat$StringConverter:hashCode()": "/**\n* Computes hash code based on source and target format.\n* @return combined hash code of source and target formats\n*/",
        "com.google.common.base.CaseFormat$StringConverter:toString()": "/**\n* Returns a string representation of the conversion formats.\n* @return formatted string indicating source and target formats\n*/",
        "com.google.common.base.CaseFormat$StringConverter:<init>(com.google.common.base.CaseFormat,com.google.common.base.CaseFormat)": "/**\n* Initializes StringConverter with source and target case formats.\n* @param sourceFormat the format to convert from\n* @param targetFormat the format to convert to\n*/",
        "com.google.common.base.CaseFormat$StringConverter:doForward(java.lang.String)": "/**\n* Converts input string to target case format.\n* @param s input string to convert\n* @return formatted string in target case format\n*/",
        "com.google.common.base.CaseFormat$StringConverter:doBackward(java.lang.String)": "/**\n* Converts a string to the target format using the source format.\n* @param s input string to convert\n* @return formatted string based on target format\n*/"
    },
    "com.google.common.base.CaseFormat": {
        "com.google.common.base.CaseFormat:normalizeFirstWord(java.lang.String)": "/**\n* Normalizes the first word by invoking the normalization method.\n* @param word the word to be normalized\n* @return normalized version of the input word\n*/",
        "com.google.common.base.CaseFormat:firstCharOnlyToUpper(java.lang.String)": "/**\n* Converts the first character of a string to uppercase; others to lowercase.\n* @param word input string to modify\n* @return modified string with first char upper and rest lower, or original if empty\n*/",
        "com.google.common.base.CaseFormat:converterTo(com.google.common.base.CaseFormat)": "/**\n* Creates a StringConverter for the specified target case format.\n* @param targetFormat the format to convert to\n* @return Converter instance for the conversion\n*/",
        "com.google.common.base.CaseFormat:convert(com.google.common.base.CaseFormat,java.lang.String)": "/**\n* Converts a string to a specified case format.\n* @param format the case format to apply\n* @param s the input string to convert\n* @return the formatted string\n*/",
        "com.google.common.base.CaseFormat:to(com.google.common.base.CaseFormat,java.lang.String)": "/**\n* Converts a string to the specified case format.\n* @param format the case format to apply\n* @param str the input string to convert\n* @return formatted string based on the case format\n*/"
    },
    "com.google.common.base.CharMatcher": {
        "com.google.common.base.CharMatcher:<init>()": "/**\n* Protected constructor for CharMatcher, prevents external instantiation.\n*/",
        "com.google.common.base.CharMatcher:setBits(java.util.BitSet)": "/**\n* Sets bits in the BitSet for characters matching the criteria.\n* @param table BitSet to update with matching character indices\n*/",
        "com.google.common.base.CharMatcher:apply(java.lang.Character)": "/**\n* Applies a match check on the given character.\n* @param character the character to match\n* @return true if matched, false otherwise\n*/",
        "com.google.common.base.CharMatcher:matchesAllOf(java.lang.CharSequence)": "/**\n* Checks if all characters in the sequence match a condition.\n* @param sequence input character sequence to evaluate\n* @return true if all characters match, false otherwise\n*/",
        "com.google.common.base.CharMatcher:countIn(java.lang.CharSequence)": "/**\n* Counts occurrences of matching characters in a sequence.\n* @param sequence input character sequence to analyze\n* @return number of matching characters found\n*/",
        "com.google.common.base.CharMatcher:none()": "/**\n* Returns a CharMatcher that matches no characters.\n* @return CharMatcher instance that matches nothing\n*/",
        "com.google.common.base.CharMatcher:toString()": "/**\n* Returns the string representation of the object.\n* @return String representation of the object\n*/",
        "com.google.common.base.CharMatcher:isSmall(int,int)": "/**\n* Checks if character count is small enough for optimization.\n* @param totalCharacters total number of characters\n* @param tableLength length of the character table\n* @return true if conditions for small character matcher are met\n*/",
        "com.google.common.base.CharMatcher:lastIndexIn(java.lang.CharSequence)": "/**\n* Finds the last index of a matching character in the sequence.\n* @param sequence the character sequence to search in\n* @return the last index of a match or -1 if not found\n*/",
        "com.google.common.base.CharMatcher:trimFrom(java.lang.CharSequence)": "/**\n* Trims characters from both ends of the given sequence.\n* @param sequence input character sequence to trim\n* @return trimmed string representation of the sequence\n*/",
        "com.google.common.base.CharMatcher:trimLeadingFrom(java.lang.CharSequence)": "/**\n* Trims leading characters that match a condition from the given sequence.\n* @param sequence input character sequence to trim\n* @return trimmed string without leading matching characters\n*/",
        "com.google.common.base.CharMatcher:trimTrailingFrom(java.lang.CharSequence)": "/**\n* Trims trailing characters from the given sequence.\n* @param sequence the input character sequence\n* @return trimmed string without trailing matched characters\n*/",
        "com.google.common.base.CharMatcher:finishCollapseFrom(java.lang.CharSequence,int,int,char,java.lang.StringBuilder,boolean)": "/**\n* Processes a sequence, replacing matches with a character.\n* @param sequence input character sequence\n* @param start starting index\n* @param end ending index\n* @param replacement character to replace matches\n* @param builder StringBuilder to accumulate results\n* @param inMatchingGroup indicates if currently in a match\n* @return modified string after processing\n*/",
        "com.google.common.base.CharMatcher:showCharacter(char)": "/**\n* Converts a character to its Unicode escape sequence.\n* @param c character to convert\n* @return Unicode escape sequence as a String\n*/",
        "com.google.common.base.CharMatcher:whitespace()": "/**\n* Returns a CharMatcher that matches whitespace characters.\n* @return CharMatcher instance for whitespace\n*/",
        "com.google.common.base.CharMatcher:ascii()": "/**\n* Returns a CharMatcher instance for matching ASCII characters.\n* @return CharMatcher for ASCII character set\n*/",
        "com.google.common.base.CharMatcher:javaIsoControl()": "/**\n* Returns a CharMatcher for Java ISO control characters.\n* @return CharMatcher instance for ISO control characters\n*/",
        "com.google.common.base.CharMatcher:is(char)": "/**\n* Creates a CharMatcher that matches a specific character.\n* @param match character to match\n* @return CharMatcher instance for the given character\n*/",
        "com.google.common.base.CharMatcher:isEither(char,char)": "/**\n* Creates an IsEither matcher for two characters.\n* @param c1 first character to match\n* @param c2 second character to match\n* @return IsEither object for matching\n*/",
        "com.google.common.base.CharMatcher:isNot(char)": "/**\n* Creates a CharMatcher that negates matches for a specified character.\n* @param match character to be excluded from matches\n* @return CharMatcher instance for the negated character\n*/",
        "com.google.common.base.CharMatcher:collapseFrom(java.lang.CharSequence,char)": "/**\n* Replaces matching characters in a sequence with a specified character.\n* @param sequence input character sequence\n* @param replacement character to replace matches\n* @return modified string or original if no replacement is needed\n*/",
        "com.google.common.base.CharMatcher:and(com.google.common.base.CharMatcher)": "/**\n* Combines this CharMatcher with another using logical AND.\n* @param other CharMatcher to combine with\n* @return new CharMatcher representing the AND operation\n*/",
        "com.google.common.base.CharMatcher:forPredicate(com.google.common.base.Predicate)": "/**\n* Returns a CharMatcher based on the provided character predicate.\n* @param predicate a character predicate to create the CharMatcher\n* @return CharMatcher instance derived from the predicate\n*/",
        "com.google.common.base.CharMatcher:negate()": "/**\n* Negates the current CharMatcher.\n* @return a new Negated CharMatcher instance\n*/",
        "com.google.common.base.CharMatcher:or(com.google.common.base.CharMatcher)": "/**\n* Combines this CharMatcher with another using logical OR.\n* @param other the CharMatcher to combine with\n* @return a new CharMatcher representing the combined matchers\n*/",
        "com.google.common.base.CharMatcher:inRange(char,char)": "/**\n* Creates a CharMatcher for a character range.\n* @param startInclusive starting character of the range\n* @param endInclusive ending character of the range\n* @return CharMatcher for the specified range\n*/",
        "com.google.common.base.CharMatcher:anyOf(java.lang.CharSequence)": "/**\n* Creates a CharMatcher for specified characters.\n* @param sequence characters to match\n* @return CharMatcher instance based on sequence length\n*/",
        "com.google.common.base.CharMatcher:trimAndCollapseFrom(java.lang.CharSequence,char)": "/**\n* Trims and collapses matching characters from a sequence.\n* @param sequence input character sequence\n* @param replacement character to replace matches\n* @return modified string after processing\n*/",
        "com.google.common.base.CharMatcher:noneOf(java.lang.CharSequence)": "/**\n* Creates a CharMatcher that excludes specified characters.\n* @param sequence characters to exclude\n* @return CharMatcher instance excluding the sequence characters\n*/",
        "com.google.common.base.CharMatcher:indexIn(java.lang.CharSequence,int)": "/**\n* Finds the index of a match in the sequence starting from a given index.\n* @param sequence the character sequence to search\n* @param start the index to start searching from\n* @return the index of the match or -1 if not found\n*/",
        "com.google.common.base.CharMatcher:precomputedPositive(int,java.util.BitSet,java.lang.String)": "/**\n* Creates a CharMatcher based on character count and BitSet.\n* @param totalCharacters number of characters to match\n* @param table BitSet of characters\n* @param description matcher description\n* @return CharMatcher instance for matching characters\n*/",
        "com.google.common.base.CharMatcher:indexIn(java.lang.CharSequence)": "/**\n* Finds the index of a match in the sequence from the start.\n* @param sequence the character sequence to search\n* @return the index of the match or -1 if not found\n*/",
        "com.google.common.base.CharMatcher:precomputedInternal()": "/**\n* Creates a CharMatcher based on character presence in a BitSet.\n* @return CharMatcher instance for matching characters\n*/",
        "com.google.common.base.CharMatcher:matchesNoneOf(java.lang.CharSequence)": "/**\n* Checks if no match is found in the given sequence.\n* @param sequence the character sequence to search\n* @return true if no match exists, false otherwise\n*/",
        "com.google.common.base.CharMatcher:removeFrom(java.lang.CharSequence)": "/**\n* Removes matched characters from the sequence.\n* @param sequence the character sequence to modify\n* @return modified string after removal\n*/",
        "com.google.common.base.CharMatcher:replaceFrom(java.lang.CharSequence,char)": "/**\n* Replaces characters in sequence based on matching criteria.\n* @param sequence input character sequence to modify\n* @param replacement character used for replacement\n* @return modified string with replacements\n*/",
        "com.google.common.base.CharMatcher:matchesAnyOf(java.lang.CharSequence)": "/**\n* Checks if any match is found in the given sequence.\n* @param sequence the character sequence to search\n* @return true if a match exists, false otherwise\n*/",
        "com.google.common.base.CharMatcher:retainFrom(java.lang.CharSequence)": "/**\n* Retains characters from the sequence after negation.\n* @param sequence the character sequence to filter\n* @return modified string after retaining characters\n*/",
        "com.google.common.base.CharMatcher:replaceFrom(java.lang.CharSequence,java.lang.CharSequence)": "/**\n* Replaces occurrences in sequence with a given replacement.\n* @param sequence input character sequence to modify\n* @param replacement characters to insert in place of matches\n* @return modified string with replacements\n*/",
        "com.google.common.base.CharMatcher:precomputed()": "/**\n* Precomputes a CharMatcher instance based on the current matcher.\n* @return precomputed CharMatcher instance\n*/"
    },
    "com.google.common.base.CharMatcher$And": {
        "com.google.common.base.CharMatcher$And:matches(char)": "/**\n* Checks if character matches both first and second conditions.\n* @param c character to be evaluated\n* @return true if both conditions match, false otherwise\n*/",
        "com.google.common.base.CharMatcher$And:toString()": "/**\n* Returns a string representation of the CharMatcher with its components.\n* @return formatted string of CharMatcher components\n*/",
        "com.google.common.base.CharMatcher$And:<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)": "/**\n* Initializes And with two non-null CharMatcher objects.\n* @param a first CharMatcher\n* @param b second CharMatcher\n*/",
        "com.google.common.base.CharMatcher$And:setBits(java.util.BitSet)": "/**\n* Updates BitSet with the intersection of two sets' bits.\n* @param table BitSet to update with matching character indices\n*/"
    },
    "com.google.common.base.CharMatcher$Any": {
        "com.google.common.base.CharMatcher$Any:indexIn(java.lang.CharSequence)": "/**\n* Returns the index of the first character in the sequence.\n* @param sequence input character sequence\n* @return 0 if not empty, otherwise -1 for empty sequence\n*/",
        "com.google.common.base.CharMatcher$Any:lastIndexIn(java.lang.CharSequence)": "/**\n* Returns the last index of the given sequence.\n* @param sequence input character sequence\n* @return last index of the sequence\n*/",
        "com.google.common.base.CharMatcher$Any:matchesNoneOf(java.lang.CharSequence)": "/**\n* Checks if the given sequence is empty.\n* @param sequence the character sequence to check\n* @return true if the sequence is empty, false otherwise\n*/",
        "com.google.common.base.CharMatcher$Any:replaceFrom(java.lang.CharSequence,char)": "/**\n* Replaces all characters in the sequence with the specified replacement character.\n* @param sequence input character sequence\n* @param replacement character to replace all characters with\n* @return new string of the same length filled with the replacement character\n*/",
        "com.google.common.base.CharMatcher$Any:replaceFrom(java.lang.CharSequence,java.lang.CharSequence)": "/**\n* Replaces each character in the sequence with the replacement string.\n* @param sequence input character sequence to be replaced\n* @param replacement string used for replacement\n* @return concatenated string of replacements\n*/",
        "com.google.common.base.CharMatcher$Any:collapseFrom(java.lang.CharSequence,char)": "/**\n* Collapses a sequence into a single replacement character if not empty.\n* @param sequence input character sequence\n* @param replacement character to replace the sequence\n* @return empty string or replacement character as string\n*/",
        "com.google.common.base.CharMatcher$Any:countIn(java.lang.CharSequence)": "/**\n* Returns the length of the given character sequence.\n* @param sequence the character sequence to measure\n* @return the length of the sequence\n*/",
        "com.google.common.base.CharMatcher$Any:negate()": "/**\n* Returns a CharMatcher that matches no characters.\n* @return CharMatcher instance that negates all characters\n*/",
        "com.google.common.base.CharMatcher$Any:matches(char)": "/**\n* Always returns true for any character input.\n* @param c character to match\n* @return true regardless of input character\n*/",
        "com.google.common.base.CharMatcher$Any:matchesAllOf(java.lang.CharSequence)": "/**\n* Checks if the input sequence matches all criteria.\n* @param sequence the character sequence to evaluate\n* @return true, indicating a match\n*/",
        "com.google.common.base.CharMatcher$Any:removeFrom(java.lang.CharSequence)": "/**\n* Removes content from the given sequence.\n* @param sequence the character sequence to modify\n* @return an empty string\n*/",
        "com.google.common.base.CharMatcher$Any:trimFrom(java.lang.CharSequence)": "/**\n* Trims the given CharSequence and returns an empty string.\n* @param sequence the CharSequence to trim\n* @return always returns an empty string\n*/",
        "com.google.common.base.CharMatcher$Any:and(com.google.common.base.CharMatcher)": "/**\n* Combines this matcher with another.\n* @param other the matcher to combine with\n* @return the non-null combined CharMatcher\n*/",
        "com.google.common.base.CharMatcher$Any:or(com.google.common.base.CharMatcher)": "/**\n* Combines this CharMatcher with another.\n* @param other another CharMatcher to combine with\n* @return this CharMatcher instance\n*/",
        "com.google.common.base.CharMatcher$Any:<init>()": "/**\n* Constructs a CharMatcher that matches any character.\n*/",
        "com.google.common.base.CharMatcher$Any:indexIn(java.lang.CharSequence,int)": "/**\n* Returns the index in sequence or -1 if at the end.\n* @param sequence the character sequence to search in\n* @param start the starting index for the search\n* @return index or -1 if start equals sequence length\n*/"
    },
    "com.google.common.base.CharMatcher$AnyOf": {
        "com.google.common.base.CharMatcher$AnyOf:matches(char)": "/**\n* Checks if the character exists in the chars array.\n* @param c character to search for\n* @return true if found, false otherwise\n*/",
        "com.google.common.base.CharMatcher$AnyOf:setBits(java.util.BitSet)": "/**\n* Sets bits in the provided BitSet for each character in chars.\n* @param table BitSet to modify with character bits\n*/",
        "com.google.common.base.CharMatcher$AnyOf:toString()": "/**\n* Returns a string representation of the CharMatcher with specified characters.\n* @return formatted description of the CharMatcher\n*/",
        "com.google.common.base.CharMatcher$AnyOf:<init>(java.lang.CharSequence)": "/**\n* Initializes AnyOf with sorted characters from the given CharSequence.\n* @param chars input characters to be stored and sorted\n*/",
        "com.google.common.base.CharMatcher$AnyOf:negate()": "/**\n* Creates a negated CharMatcher instance.\n* @return a new Negated CharMatcher based on the current instance\n*/"
    },
    "com.google.common.base.CharMatcher$BitSetMatcher": {
        "com.google.common.base.CharMatcher$BitSetMatcher:matches(char)": "/**\n* Checks if the character matches a condition in the table.\n* @param c character to be matched\n* @return true if matched, false otherwise\n*/",
        "com.google.common.base.CharMatcher$BitSetMatcher:setBits(java.util.BitSet)": "/**\n* Updates the provided BitSet by performing a bitwise OR with the internal table.\n* @param bitSet the BitSet to update\n*/",
        "com.google.common.base.CharMatcher$BitSetMatcher:<init>(java.util.BitSet,java.lang.String)": "/**\n* Initializes BitSetMatcher with a BitSet and description.\n* @param table BitSet for matching\n* @param description description of the matcher\n*/"
    },
    "com.google.common.base.CharMatcher$Digit": {
        "com.google.common.base.CharMatcher$Digit:zeroes()": "/**\n* Converts a predefined string of zeroes to a character array.\n* @return char array of zero characters\n*/",
        "com.google.common.base.CharMatcher$Digit:nines()": "/**\n* Generates an array of chars by adding 9 to each char in ZEROES.\n* @return char array with modified characters\n*/",
        "com.google.common.base.CharMatcher$Digit:<init>()": "/**\n* Initializes Digit matcher with character ranges for digits.\n*/"
    },
    "com.google.common.base.CharMatcher$ForPredicate": {
        "com.google.common.base.CharMatcher$ForPredicate:matches(char)": "/**\n* Checks if the character matches the given predicate.\n* @param c character to evaluate\n* @return true if it matches, false otherwise\n*/",
        "com.google.common.base.CharMatcher$ForPredicate:toString()": "/**\n* Returns a string representation of the CharMatcher with its predicate.\n* @return String description of the CharMatcher\n*/",
        "com.google.common.base.CharMatcher$ForPredicate:<init>(com.google.common.base.Predicate)": "/**\n* Constructs ForPredicate with a non-null character predicate.\n* @param predicate the character predicate to be used\n*/"
    },
    "com.google.common.base.CharMatcher$InRange": {
        "com.google.common.base.CharMatcher$InRange:setBits(java.util.BitSet)": "/**\n* Sets bits in the specified BitSet from startInclusive to endInclusive.\n* @param table the BitSet to modify\n*/",
        "com.google.common.base.CharMatcher$InRange:toString()": "/**\n* Returns a string representation of the character range.\n* @return formatted string showing inclusive character range\n*/",
        "com.google.common.base.CharMatcher$InRange:matches(char)": "/**\n* Checks if character is within inclusive range.\n* @param c character to check\n* @return true if c is in range, false otherwise\n*/",
        "com.google.common.base.CharMatcher$InRange:<init>(char,char)": "/**\n* Constructs a range with inclusive start and end characters.\n* @param startInclusive starting character of the range\n* @param endInclusive ending character of the range\n*/"
    },
    "com.google.common.base.CharMatcher$Is": {
        "com.google.common.base.CharMatcher$Is:<init>(char)": "/**\n* Sets the match character for comparison.\n* @param match character to be set as match\n*/",
        "com.google.common.base.CharMatcher$Is:replaceFrom(java.lang.CharSequence,char)": "/**\n* Replaces occurrences of 'match' in sequence with the specified replacement character.\n* @param sequence input character sequence to modify\n* @param replacement character to replace matches with\n* @return modified string with replacements\n*/",
        "com.google.common.base.CharMatcher$Is:and(com.google.common.base.CharMatcher)": "/**\n* Combines this matcher with another, returning this if both match, else none().\n* @param other the matcher to combine with\n* @return this matcher if both match, otherwise none()\n*/",
        "com.google.common.base.CharMatcher$Is:or(com.google.common.base.CharMatcher)": "/**\n* Combines this matcher with another, returning the other if it matches; otherwise, super's result.\n* @param other the CharMatcher to combine with\n* @return the combined CharMatcher\n*/",
        "com.google.common.base.CharMatcher$Is:negate()": "/**\n* Returns a CharMatcher that negates the current match condition.\n* @return CharMatcher representing the negated condition\n*/",
        "com.google.common.base.CharMatcher$Is:setBits(java.util.BitSet)": "/**\n* Sets a specific bit in the provided BitSet based on the match value.\n* @param table BitSet to modify\n*/",
        "com.google.common.base.CharMatcher$Is:toString()": "/**\n* Returns a string representation of the CharMatcher with the matched character.\n* @return formatted string indicating the matched character\n*/",
        "com.google.common.base.CharMatcher$Is:matches(char)": "/**\n* Checks if the given character matches the specified character.\n* @param c character to compare\n* @return true if c matches, false otherwise\n*/"
    },
    "com.google.common.base.CharMatcher$IsEither": {
        "com.google.common.base.CharMatcher$IsEither:<init>(char,char)": "/**\n* Initializes the IsEither object with two character matches.\n* @param match1 first character to match\n* @param match2 second character to match\n*/",
        "com.google.common.base.CharMatcher$IsEither:setBits(java.util.BitSet)": "/**\n* Sets specified bits in the provided BitSet.\n* @param table BitSet to modify with match1 and match2\n*/",
        "com.google.common.base.CharMatcher$IsEither:toString()": "/**\n* Returns a string representation of the CharMatcher with specified characters.\n* @return formatted string showing matched characters\n*/",
        "com.google.common.base.CharMatcher$IsEither:matches(char)": "/**\n* Checks if the character matches either match1 or match2.\n* @param c character to check for a match\n* @return true if c matches, false otherwise\n*/"
    },
    "com.google.common.base.CharMatcher$IsNot": {
        "com.google.common.base.CharMatcher$IsNot:<init>(char)": "/**\n* Initializes the IsNot object with a character to match against.\n* @param match character to be used for comparison\n*/",
        "com.google.common.base.CharMatcher$IsNot:and(com.google.common.base.CharMatcher)": "/**\n* Combines this CharMatcher with another, returning the other if it doesn't match.\n* @param other the CharMatcher to combine with\n* @return combined CharMatcher or the other if no match\n*/",
        "com.google.common.base.CharMatcher$IsNot:or(com.google.common.base.CharMatcher)": "/**\n* Combines this matcher with another; returns a matcher if either matches.\n* @param other another CharMatcher to combine\n* @return this matcher or a new matcher based on the match result\n*/",
        "com.google.common.base.CharMatcher$IsNot:setBits(java.util.BitSet)": "/**\n* Sets bits in the provided BitSet based on the match value.\n* @param table BitSet to modify with set bits\n*/",
        "com.google.common.base.CharMatcher$IsNot:negate()": "/**\n* Negates the current CharMatcher's matching condition.\n* @return a CharMatcher that matches non-matching characters\n*/",
        "com.google.common.base.CharMatcher$IsNot:toString()": "/**\n* Returns a string representation of the CharMatcher object.\n* @return formatted string indicating the character to match\n*/",
        "com.google.common.base.CharMatcher$IsNot:matches(char)": "/**\n* Checks if the character does not match the specified character.\n* @param c character to compare\n* @return true if c is not equal to match, false otherwise\n*/"
    },
    "com.google.common.base.CharMatcher$JavaDigit": {
        "com.google.common.base.CharMatcher$JavaDigit:matches(char)": "/**\n* Checks if the character is a digit.\n* @param c character to evaluate\n* @return true if c is a digit, false otherwise\n*/"
    },
    "com.google.common.base.CharMatcher$JavaLetter": {
        "com.google.common.base.CharMatcher$JavaLetter:matches(char)": "/**\n* Checks if the character is a letter.\n* @param c character to check\n* @return true if c is a letter, false otherwise\n*/",
        "com.google.common.base.CharMatcher$JavaLetter:negate()": "/**\n* Creates a Negated CharMatcher instance from the current one.\n* @return Negated CharMatcher object\n*/"
    },
    "com.google.common.base.CharMatcher$JavaLetterOrDigit": {
        "com.google.common.base.CharMatcher$JavaLetterOrDigit:matches(char)": "/**\n* Checks if the character is a letter or digit.\n* @param c character to evaluate\n* @return true if c is a letter or digit, false otherwise\n*/"
    },
    "com.google.common.base.CharMatcher$JavaLowerCase": {
        "com.google.common.base.CharMatcher$JavaLowerCase:matches(char)": "/**\n* Checks if the character is a lowercase letter.\n* @param c character to check\n* @return true if lowercase, false otherwise\n*/"
    },
    "com.google.common.base.CharMatcher$JavaUpperCase": {
        "com.google.common.base.CharMatcher$JavaUpperCase:matches(char)": "/**\n* Checks if the given character is an uppercase letter.\n* @param c character to check\n* @return true if c is uppercase, false otherwise\n*/",
        "com.google.common.base.CharMatcher$JavaUpperCase:negate()": "/**\n* Creates a negated CharMatcher instance.\n* @return a new Negated CharMatcher based on the current instance\n*/"
    },
    "com.google.common.base.CharMatcher$Negated": {
        "com.google.common.base.CharMatcher$Negated:matches(char)": "/**\n* Checks if the character does not match the original.\n* @param c character to be checked\n* @return true if not matched, false otherwise\n*/",
        "com.google.common.base.CharMatcher$Negated:toString()": "/**\n* Returns a string representation of the object with \".negate()\" appended.\n* @return formatted string of the original object\n*/",
        "com.google.common.base.CharMatcher$Negated:negate()": "/**\n* Returns the original CharMatcher without negation.\n* @return the original CharMatcher instance\n*/",
        "com.google.common.base.CharMatcher$Negated:<init>(com.google.common.base.CharMatcher)": "/**\n* Initializes Negated with a non-null CharMatcher.\n* @param original the CharMatcher to negate\n*/",
        "com.google.common.base.CharMatcher$Negated:setBits(java.util.BitSet)": "/**\n* Updates BitSet with flipped bits from original BitSet.\n* @param table BitSet to update with modified character indices\n*/",
        "com.google.common.base.CharMatcher$Negated:matchesNoneOf(java.lang.CharSequence)": "/**\n* Checks if no characters in the sequence match a condition.\n* @param sequence input character sequence to evaluate\n* @return true if no characters match, false otherwise\n*/",
        "com.google.common.base.CharMatcher$Negated:countIn(java.lang.CharSequence)": "/**\n* Counts unmatched characters in a sequence.\n* @param sequence input character sequence to analyze\n* @return number of unmatched characters found\n*/",
        "com.google.common.base.CharMatcher$Negated:matchesAllOf(java.lang.CharSequence)": "/**\n* Checks if all characters in the sequence match the original criteria.\n* @param sequence the character sequence to evaluate\n* @return true if all characters match, false otherwise\n*/"
    },
    "com.google.common.base.CharMatcher$None": {
        "com.google.common.base.CharMatcher$None:matchesAllOf(java.lang.CharSequence)": "/**\n* Checks if the given sequence is empty.\n* @param sequence the character sequence to check\n* @return true if the sequence is empty, false otherwise\n*/",
        "com.google.common.base.CharMatcher$None:removeFrom(java.lang.CharSequence)": "/**\n* Converts CharSequence to String.\n* @param sequence input character sequence\n* @return String representation of the sequence\n*/",
        "com.google.common.base.CharMatcher$None:replaceFrom(java.lang.CharSequence,char)": "/**\n* Converts CharSequence to String without replacing characters.\n* @param sequence input character sequence\n* @param replacement character to replace (unused)\n* @return String representation of the sequence\n*/",
        "com.google.common.base.CharMatcher$None:collapseFrom(java.lang.CharSequence,char)": "/**\n* Converts CharSequence to String without collapsing.\n* @param sequence input character sequence\n* @param replacement character used for collapsing (unused)\n* @return string representation of the sequence\n*/",
        "com.google.common.base.CharMatcher$None:trimFrom(java.lang.CharSequence)": "/**\n* Converts CharSequence to String without trimming.\n* @param sequence input character sequence\n* @return String representation of the sequence\n*/",
        "com.google.common.base.CharMatcher$None:trimLeadingFrom(java.lang.CharSequence)": "/**\n* Converts CharSequence to String without trimming.\n* @param sequence input character sequence\n* @return String representation of the input sequence\n*/",
        "com.google.common.base.CharMatcher$None:trimTrailingFrom(java.lang.CharSequence)": "/**\n* Returns the string representation of the given CharSequence.\n* @param sequence the CharSequence to convert\n* @return string representation of the sequence\n*/",
        "com.google.common.base.CharMatcher$None:negate()": "/**\n* Returns a CharMatcher that matches anything, effectively negating the current matcher.\n* @return CharMatcher that matches all characters\n*/",
        "com.google.common.base.CharMatcher$None:matches(char)": "/**\n* Checks if the character matches a specific condition.\n* @param c character to evaluate\n* @return false, indicating no match found\n*/",
        "com.google.common.base.CharMatcher$None:indexIn(java.lang.CharSequence)": "/**\n* Returns the index of this object in the given sequence.\n* @param sequence the CharSequence to search in\n* @return -1 as a placeholder for not found\n*/",
        "com.google.common.base.CharMatcher$None:lastIndexIn(java.lang.CharSequence)": "/**\n* Returns the last index of a character sequence.\n* @param sequence the character sequence to search\n* @return -1 as a placeholder for not found\n*/",
        "com.google.common.base.CharMatcher$None:matchesNoneOf(java.lang.CharSequence)": "/**\n* Checks if the given sequence matches none of the criteria.\n* @param sequence the character sequence to evaluate\n* @return true, indicating no matches found\n*/",
        "com.google.common.base.CharMatcher$None:replaceFrom(java.lang.CharSequence,java.lang.CharSequence)": "/**\n* Replaces content in a sequence with a specified replacement.\n* @param sequence the original character sequence\n* @param replacement the new content to insert; must not be null\n* @return the string representation of the original sequence\n*/",
        "com.google.common.base.CharMatcher$None:countIn(java.lang.CharSequence)": "/**\n* Counts occurrences in the given sequence.\n* @param sequence the character sequence to analyze\n* @return the count of occurrences (currently always 0)\n*/",
        "com.google.common.base.CharMatcher$None:and(com.google.common.base.CharMatcher)": "/**\n* Combines this CharMatcher with another.\n* @param other the CharMatcher to combine with\n* @return this CharMatcher instance\n*/",
        "com.google.common.base.CharMatcher$None:or(com.google.common.base.CharMatcher)": "/**\n* Combines this matcher with another.\n* @param other the matcher to combine with; must not be null\n* @return the non-null other matcher\n*/",
        "com.google.common.base.CharMatcher$None:<init>()": "/**\n* Constructs a None matcher with a specific description.\n*/",
        "com.google.common.base.CharMatcher$None:indexIn(java.lang.CharSequence,int)": "/**\n* Returns the index in the sequence starting from a valid position.\n* @param sequence the character sequence to search\n* @param start the starting index for the search\n* @return -1 as a placeholder for not found\n*/"
    },
    "com.google.common.base.CharMatcher$Or": {
        "com.google.common.base.CharMatcher$Or:matches(char)": "/**\n* Checks if character matches either of the two patterns.\n* @param c character to match\n* @return true if matched, otherwise false\n*/",
        "com.google.common.base.CharMatcher$Or:toString()": "/**\n* Returns a string representation of the CharMatcher with two components.\n* @return formatted string describing the CharMatcher\n*/",
        "com.google.common.base.CharMatcher$Or:<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)": "/**\n* Constructs an Or instance with two non-null CharMatcher objects.\n* @param a first CharMatcher, must not be null\n* @param b second CharMatcher, must not be null\n*/",
        "com.google.common.base.CharMatcher$Or:setBits(java.util.BitSet)": "/**\n* Updates BitSet with bits from first and second components.\n* @param table BitSet to update with matching character indices\n*/",
        "com.google.common.base.CharMatcher$Or:negate()": "/**\n* Creates a negated CharMatcher instance.\n* @return a new Negated CharMatcher based on the current instance\n*/"
    },
    "com.google.common.base.CharMatcher$RangesMatcher": {
        "com.google.common.base.CharMatcher$RangesMatcher:matches(char)": "/**\n* Checks if character matches defined ranges.\n* @param c character to check\n* @return true if c is within the ranges, false otherwise\n*/",
        "com.google.common.base.CharMatcher$RangesMatcher:toString()": "/**\n* Returns the string representation of the object.\n* @return description as a String\n*/",
        "com.google.common.base.CharMatcher$RangesMatcher:<init>(java.lang.String,char[],char[])": "/**\n* Constructs RangesMatcher with description and character ranges.\n* @param description description of the matcher\n* @param rangeStarts array of start characters for ranges\n* @param rangeEnds array of end characters for ranges\n*/",
        "com.google.common.base.CharMatcher$RangesMatcher:negate()": "/**\n* Creates a Negated CharMatcher instance based on the current one.\n* @return a new Negated CharMatcher\n*/"
    },
    "com.google.common.base.CharMatcher$Whitespace": {
        "com.google.common.base.CharMatcher$Whitespace:matches(char)": "/**\n* Checks if the character matches a condition based on TABLE lookup.\n* @param c character to match\n* @return true if matches, false otherwise\n*/",
        "com.google.common.base.CharMatcher$Whitespace:setBits(java.util.BitSet)": "/**\n* Sets bits in the provided BitSet based on characters in TABLE.\n* @param table BitSet to update with bits from TABLE\n*/",
        "com.google.common.base.CharMatcher$Whitespace:<init>()": "/**** Constructs a Whitespace matcher with a description. */"
    },
    "com.google.common.base.Charsets": {
        "com.google.common.base.Charsets:<init>()": "/**\n* Private constructor to prevent instantiation of the Charsets class.\n*/"
    },
    "com.google.common.base.Platform": {
        "com.google.common.base.Platform:patternCompilerIsPcreLike()": "/**\n* Checks if the pattern compiler is PCRE-like.\n* @return true if PCRE-like, false otherwise\n*/",
        "com.google.common.base.Platform:<init>()": "/**\n* Private constructor to prevent instantiation of the Platform class.\n*/",
        "com.google.common.base.Platform:formatCompact4Digits(double)": "/**\n* Formats a double value to a compact string with up to 4 significant digits.\n* @param value the double value to format\n* @return formatted string representation of the value\n*/",
        "com.google.common.base.Platform:stringIsNullOrEmpty(java.lang.String)": "/**\n* Checks if the given string is null or empty.\n* @param string the string to check\n* @return true if null or empty, otherwise false\n*/",
        "com.google.common.base.Platform:loadPatternCompiler()": "/**\n* Loads and returns a new instance of JdkPatternCompiler.\n* @return PatternCompiler instance for pattern compilation\n*/",
        "com.google.common.base.Platform:nullToEmpty(java.lang.String)": "/**\n* Converts null string to empty string.\n* @param string input string which may be null\n* @return empty string if input is null, otherwise the input string\n*/",
        "com.google.common.base.Platform:compilePattern(java.lang.String)": "/**\n* Compiles a regex pattern into a CommonPattern object.\n* @param pattern the regex pattern to compile\n* @return compiled CommonPattern object\n*/",
        "com.google.common.base.Platform:emptyToNull(java.lang.String)": "/**\n* Converts an empty string to null.\n* @param string input string which may be null or empty\n* @return null if empty, otherwise the original string\n*/",
        "com.google.common.base.Platform:getEnumIfPresent(java.lang.Class,java.lang.String)": "/**\n* Retrieves an enum constant by name if present.\n* @param enumClass the enum class type\n* @param value the name of the enum constant\n* @return Optional containing the enum constant or absent if not found\n*/",
        "com.google.common.base.Platform:precomputeCharMatcher(com.google.common.base.CharMatcher)": "/**\n* Precomputes a CharMatcher based on the provided matcher.\n* @param matcher the CharMatcher to precompute from\n* @return precomputed CharMatcher instance\n*/"
    },
    "com.google.common.base.Converter$ConverterComposition": {
        "com.google.common.base.Converter$ConverterComposition:doForward(java.lang.Object)": "/**\n* Throws AssertionError indicating method not implemented.\n* @param a input parameter of type A\n* @return never returns a value\n*/",
        "com.google.common.base.Converter$ConverterComposition:doBackward(java.lang.Object)": "/**\n* Throws an AssertionError indicating unsupported backward operation.\n* @param c input parameter of type C\n* @return never returns a value\n*/",
        "com.google.common.base.Converter$ConverterComposition:hashCode()": "/**\n* Computes the hash code based on first and second objects.\n* @return combined hash code as an integer\n*/",
        "com.google.common.base.Converter$ConverterComposition:toString()": "/**\n* Returns a string representation of the combined functions.\n* @return formatted string of first and second functions\n*/",
        "com.google.common.base.Converter$ConverterComposition:equals(java.lang.Object)": "/**\n* Compares this ConverterComposition to another for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Converter$ConverterComposition:<init>(com.google.common.base.Converter,com.google.common.base.Converter)": "/**\n* Initializes ConverterComposition with two converters.\n* @param first  converter from A to B\n* @param second converter from B to C\n*/",
        "com.google.common.base.Converter$ConverterComposition:correctedDoForward(java.lang.Object)": "/**\n* Processes input A through two correction steps.\n* @param a nullable input of type A\n* @return processed result of type C or null if input is null\n*/",
        "com.google.common.base.Converter$ConverterComposition:correctedDoBackward(java.lang.Object)": "/**\n* Corrects backward operation on input C.\n* @param c nullable input of type C\n* @return corrected result of type A or null if c is null\n*/"
    },
    "com.google.common.base.Converter": {
        "com.google.common.base.Converter:equals(java.lang.Object)": "/**\n* Compares this object to another for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Converter:<init>(boolean)": "/**\n* Initializes Converter with null handling option.\n* @param handleNullAutomatically true to handle nulls automatically, false otherwise\n*/",
        "com.google.common.base.Converter:from(com.google.common.base.Function,com.google.common.base.Function)": "/**\n* Creates a Converter using provided forward and backward functions.\n* @param forwardFunction transforms A to B\n* @param backwardFunction transforms B to A\n* @return a Converter instance for type A and B\n*/",
        "com.google.common.base.Converter:convertAll(java.lang.Iterable)": "/**\n* Converts elements from an Iterable of type A to type B.\n* @param fromIterable source Iterable of type A\n* @return Iterable of converted elements of type B\n*/",
        "com.google.common.base.Converter:unsafeDoForward(java.lang.Object)": "/**\n* Forwards input A after casting it to non-nullable type.\n* @param a nullable input of type A\n* @return result of type B or null if input is null\n*/",
        "com.google.common.base.Converter:unsafeDoBackward(java.lang.Object)": "/**\n* Executes a backward operation on input B, returning A or null.\n* @param b nullable input of type B\n* @return result of type A or null\n*/",
        "com.google.common.base.Converter:<init>()": "/**\n* Default constructor that initializes Converter with null handling enabled.\n*/",
        "com.google.common.base.Converter:correctedDoForward(java.lang.Object)": "/**\n* Processes input A, handling nulls based on configuration.\n* @param a nullable input of type A\n* @return processed result of type B or null if input is null\n*/",
        "com.google.common.base.Converter:correctedDoBackward(java.lang.Object)": "/**\n* Corrects backward operation on input B, handling nulls automatically.\n* @param b nullable input of type B\n* @return corrected result of type A or null if b is null\n*/",
        "com.google.common.base.Converter:convert(java.lang.Object)": "/**\n* Converts input A to output B, handling null values.\n* @param a nullable input of type A\n* @return processed output of type B or null if input is null\n*/",
        "com.google.common.base.Converter:doAndThen(com.google.common.base.Converter)": "/**\n* Composes two converters into one.\n* @param secondConverter the converter from B to C\n* @return a combined Converter from A to C\n*/",
        "com.google.common.base.Converter:reverse()": "/**\n* Returns a reversed Converter, creating one if not already initialized.\n* @return Converter<B, A> reversed Converter instance\n*/",
        "com.google.common.base.Converter:apply(java.lang.Object)": "/**\n* Applies conversion to input A, returning non-nullable output B.\n* @param a input of type A\n* @return converted output of type B\n*/",
        "com.google.common.base.Converter:andThen(com.google.common.base.Converter)": "/**\n* Combines this converter with a second converter.\n* @param secondConverter converter from B to C\n* @return combined Converter from A to C\n*/"
    },
    "com.google.common.base.Converter$FunctionBasedConverter": {
        "com.google.common.base.Converter$FunctionBasedConverter:doForward(java.lang.Object)": "/**\n* Applies forwardFunction to input A and returns result of type B.\n* @param a input of type A\n* @return result of type B from forwardFunction\n*/",
        "com.google.common.base.Converter$FunctionBasedConverter:doBackward(java.lang.Object)": "/**\n* Applies backward transformation on input B.\n* @param b input value of type B\n* @return transformed value of type A\n*/",
        "com.google.common.base.Converter$FunctionBasedConverter:equals(java.lang.Object)": "/**\n* Compares this converter to another for equality.\n* @param object the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Converter$FunctionBasedConverter:hashCode()": "/**\n* Computes the hash code based on forward and backward functions.\n* @return integer hash code value\n*/",
        "com.google.common.base.Converter$FunctionBasedConverter:toString()": "/**\n* Returns a string representation of the Converter with its functions.\n* @return formatted string of forward and backward functions\n*/",
        "com.google.common.base.Converter$FunctionBasedConverter:<init>(com.google.common.base.Function,com.google.common.base.Function)": "/**\n* Initializes FunctionBasedConverter with forward and backward functions.\n* @param forwardFunction function to convert A to B\n* @param backwardFunction function to convert B to A\n*/"
    },
    "com.google.common.base.Converter$IdentityConverter": {
        "com.google.common.base.Converter$IdentityConverter:reverse()": "/**\n* Returns the current IdentityConverter instance for reversing.\n* @return this IdentityConverter instance\n*/",
        "com.google.common.base.Converter$IdentityConverter:doBackward(java.lang.Object)": "/**\n* Returns the input object unchanged.\n* @param t the object to be returned\n* @return the same object passed as input\n*/",
        "com.google.common.base.Converter$IdentityConverter:doForward(java.lang.Object)": "/**\n* Returns the input object unchanged.\n* @param t the object to be returned\n* @return the same object passed as input\n*/",
        "com.google.common.base.Converter$IdentityConverter:doAndThen(com.google.common.base.Converter)": "/**\n* Returns the provided converter after ensuring it's not null.\n* @param otherConverter the converter to validate\n* @return the validated Converter object\n*/"
    },
    "com.google.common.base.Converter$ReverseConverter": {
        "com.google.common.base.Converter$ReverseConverter:doForward(java.lang.Object)": "/**\n* Throws an AssertionError to indicate unsupported operation.\n* @param b input parameter of type B\n* @return does not return a value\n*/",
        "com.google.common.base.Converter$ReverseConverter:doBackward(java.lang.Object)": "/**\n* Throws an AssertionError for unsupported backward operation.\n* @param a input of type A\n* @throws AssertionError if called\n*/",
        "com.google.common.base.Converter$ReverseConverter:hashCode()": "/**\n* Computes the hash code by inverting the original object's hash code.\n* @return inverted hash code of the original object\n*/",
        "com.google.common.base.Converter$ReverseConverter:toString()": "/**\n* Returns a string representation of the object with a reverse indication.\n* @return formatted string showing reverse operation\n*/",
        "com.google.common.base.Converter$ReverseConverter:equals(java.lang.Object)": "/**\n* Checks equality with another ReverseConverter object.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Converter$ReverseConverter:<init>(com.google.common.base.Converter)": "/**\n* Initializes ReverseConverter with the specified original Converter.\n* @param original the Converter to reverse\n*/",
        "com.google.common.base.Converter$ReverseConverter:correctedDoBackward(java.lang.Object)": "/**\n* Processes input A and returns the result from correctedDoForward.\n* @param a nullable input of type A\n* @return processed result of type B or null if input is null\n*/",
        "com.google.common.base.Converter$ReverseConverter:correctedDoForward(java.lang.Object)": "/**\n* Corrects forward operation on input B.\n* @param b nullable input of type B\n* @return corrected result of type A or null if b is null\n*/"
    },
    "com.google.common.base.Defaults": {
        "com.google.common.base.Defaults:<init>()": "/**\n* Private constructor to prevent instantiation of the Defaults class.\n*/",
        "com.google.common.base.Defaults:defaultValue(java.lang.Class)": "/**\n* Returns default value for a given primitive type or null for non-primitive types.\n* @param type the class of the primitive type\n* @return default value or null if type is non-primitive\n*/"
    },
    "com.google.common.base.Enums$StringConverter": {
        "com.google.common.base.Enums$StringConverter:doForward(java.lang.String)": "/**\n* Converts a string to its corresponding enum constant.\n* @param value string representation of the enum constant\n* @return enum constant of type T\n*/",
        "com.google.common.base.Enums$StringConverter:equals(java.lang.Object)": "/**\n* Compares this StringConverter to another object for equality.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Enums$StringConverter:hashCode()": "/**\n* Returns the hash code of the enum class.\n* @return hash code as an integer\n*/",
        "com.google.common.base.Enums$StringConverter:toString()": "/**\n* Returns a string representation of the enum class.\n* @return String describing the enum class\n*/",
        "com.google.common.base.Enums$StringConverter:doBackward(java.lang.Object)": "/**\n* Returns the name of the given enum value.\n* @param enumValue the enum instance to retrieve the name from\n* @return the name of the enum as a String\n*/",
        "com.google.common.base.Enums$StringConverter:<init>(java.lang.Class)": "/**\n* Initializes StringConverter with a non-null enum class.\n* @param enumClass the class of the enum type\n*/"
    },
    "com.google.common.base.Enums": {
        "com.google.common.base.Enums:<init>()": "/**\n* Private constructor to prevent instantiation of the Enums class.\n*/",
        "com.google.common.base.Enums:getField(java.lang.Enum)": "/**\n* Retrieves the Field object for the given enum value.\n* @param enumValue the enum instance to get the field for\n* @return the Field corresponding to the enum value\n*/",
        "com.google.common.base.Enums:populateCache(java.lang.Class)": "/**\n* Populates a cache with weak references to enum instances.\n* @param enumClass the class of the enum type\n* @return a map of enum names to weak references of enum instances\n*/",
        "com.google.common.base.Enums:getEnumConstants(java.lang.Class)": "/**\n* Retrieves cached enum constants or populates the cache if absent.\n* @param enumClass the class of the enum type\n* @return map of enum names to weak references of enum instances\n*/",
        "com.google.common.base.Enums:stringConverter(java.lang.Class)": "/**\n* Creates a Converter for converting Strings to Enum types.\n* @param enumClass the class of the enum type\n* @return a Converter that maps Strings to Enum values\n*/",
        "com.google.common.base.Enums:getIfPresent(java.lang.Class,java.lang.String)": "/**\n* Retrieves an enum constant if present by class and name.\n* @param enumClass the enum class type\n* @param value the name of the enum constant\n* @return Optional containing the enum constant or empty if not found\n*/"
    },
    "com.google.common.base.Equivalence": {
        "com.google.common.base.Equivalence:<init>()": "/**\n* Protected constructor for the Equivalence class.\n*/",
        "com.google.common.base.Equivalence:equivalent(java.lang.Object,java.lang.Object)": "/**\n* Checks if two objects are equivalent.\n* @param a first object, may be null\n* @param b second object, may be null\n* @return true if equivalent, false otherwise\n*/",
        "com.google.common.base.Equivalence:hash(java.lang.Object)": "/**\n* Computes hash code for the given object or returns 0 if null.\n* @param t object to hash, may be null\n* @return hash code as an integer\n*/",
        "com.google.common.base.Equivalence:wrap(java.lang.Object)": "/**\n* Wraps a reference in a Wrapper object.\n* @param reference the reference to wrap, can be null\n* @return a Wrapper containing the wrapped reference\n*/",
        "com.google.common.base.Equivalence:equals()": "/**\n* Returns the singleton instance of the Equals equivalence.\n* @return Equivalence instance for equality comparison\n*/",
        "com.google.common.base.Equivalence:identity()": "/**\n* Returns the identity equivalence instance.\n* @return Identity equivalence object\n*/",
        "com.google.common.base.Equivalence:test(java.lang.Object,java.lang.Object)": "/**\n* Tests if two objects are equivalent.\n* @param t first object, may be null\n* @param u second object, may be null\n* @return true if equivalent, false otherwise\n*/",
        "com.google.common.base.Equivalence:equivalentTo(java.lang.Object)": "/**\n* Creates a predicate that checks equivalence to the specified target.\n* @param target the value to compare against (nullable)\n* @return Predicate that evaluates equivalence\n*/",
        "com.google.common.base.Equivalence:onResultOf(com.google.common.base.Function)": "/**\n* Creates an Equivalence based on a mapping function.\n* @param function mapping function for equivalence\n* @return FunctionalEquivalence instance\n*/",
        "com.google.common.base.Equivalence:pairwise()": "/**\n* Creates a pairwise equivalence for iterable elements.\n* @return Equivalence<Iterable<S>> for comparing iterables of type S\n*/"
    },
    "com.google.common.base.Equivalence$Equals": {
        "com.google.common.base.Equivalence$Equals:doEquivalent(java.lang.Object,java.lang.Object)": "/**\n* Checks if two objects are equivalent.\n* @param a first object to compare\n* @param b second object to compare\n* @return true if objects are equivalent, false otherwise\n*/",
        "com.google.common.base.Equivalence$Equals:doHash(java.lang.Object)": "/**\n* Computes the hash code for the given object.\n* @param o the object to hash\n* @return the hash code of the object\n*/"
    },
    "com.google.common.base.Objects": {
        "com.google.common.base.Objects:equal(java.lang.Object,java.lang.Object)": "/**\n* Checks if two objects are equal.\n* @param a first object to compare\n* @param b second object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Objects:<init>()": "/**\n* Private constructor to prevent instantiation of the Objects class.\n*/"
    },
    "com.google.common.base.Equivalence$EquivalentToPredicate": {
        "com.google.common.base.Equivalence$EquivalentToPredicate:hashCode()": "/**\n* Computes the hash code based on equivalence and target fields.\n* @return hash code as an integer\n*/",
        "com.google.common.base.Equivalence$EquivalentToPredicate:toString()": "/**\n* Returns a string representation of the equivalence relationship.\n* @return formatted string showing equivalence and target\n*/",
        "com.google.common.base.Equivalence$EquivalentToPredicate:<init>(com.google.common.base.Equivalence,java.lang.Object)": "/**\n* Constructs an EquivalentToPredicate with specified equivalence and target value.\n* @param equivalence the equivalence relation to use\n* @param target the target value for comparison (nullable)\n*/",
        "com.google.common.base.Equivalence$EquivalentToPredicate:apply(java.lang.Object)": "/**\n* Checks if input is equivalent to target.\n* @param input object to compare, may be null\n* @return true if equivalent, false otherwise\n*/",
        "com.google.common.base.Equivalence$EquivalentToPredicate:equals(java.lang.Object)": "/**\n* Checks equality of this object with another object.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.base.Equivalence$Identity": {
        "com.google.common.base.Equivalence$Identity:doHash(java.lang.Object)": "/**\n* Computes the hash code for the given object using its identity hash code.\n* @param o the object to hash\n* @return the identity hash code of the object\n*/",
        "com.google.common.base.Equivalence$Identity:doEquivalent(java.lang.Object,java.lang.Object)": "/**\n* Checks if two objects are equivalent.\n* @param a first object to compare\n* @param b second object to compare\n* @return false as default implementation\n*/"
    },
    "com.google.common.base.Equivalence$Wrapper": {
        "com.google.common.base.Equivalence$Wrapper:toString()": "/**\n* Returns a string representation of the object in a specific format.\n* @return formatted string combining equivalence and reference\n*/",
        "com.google.common.base.Equivalence$Wrapper:<init>(com.google.common.base.Equivalence,java.lang.Object)": "/**\n* Constructs a Wrapper with an equivalence and a reference.\n* @param equivalence the equivalence relation (non-null)\n* @param reference the reference value (can be null)\n*/",
        "com.google.common.base.Equivalence$Wrapper:equals(java.lang.Object)": "/**\n* Compares this object with another for equality based on equivalence.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Equivalence$Wrapper:hashCode()": "/**\n* Computes hash code for the object using its equivalence relation.\n* @return hash code as an integer\n*/"
    },
    "com.google.common.base.FinalizableReferenceQueue": {
        "com.google.common.base.FinalizableReferenceQueue:cleanUp()": "/**\n* Cleans up references in the queue if the thread hasn't started.\n*/",
        "com.google.common.base.FinalizableReferenceQueue:<init>()": "/**\n* Initializes FinalizableReferenceQueue and starts the finalizer thread if possible.\n*/",
        "com.google.common.base.FinalizableReferenceQueue:getStartFinalizer(java.lang.Class)": "/**\n* Retrieves the 'startFinalizer' method from the specified class.\n* @param finalizer class containing the method\n* @return Method object for 'startFinalizer'\n*/",
        "com.google.common.base.FinalizableReferenceQueue:close()": "/**\n* Closes the resource by enqueuing and cleaning up references.\n*/"
    },
    "com.google.common.base.FinalizableReferenceQueue$DecoupledLoader": {
        "com.google.common.base.FinalizableReferenceQueue$DecoupledLoader:getBaseUrl()": "/**\n* Retrieves the base URL of the classpath.\n* @return Base URL for the classpath\n* @throws IOException if the class file or path is not found\n*/",
        "com.google.common.base.FinalizableReferenceQueue$DecoupledLoader:newLoader(java.net.URL)": "/**\n* Creates a new URLClassLoader with the specified base URL as its only source.\n* @param base the base URL for loading classes\n* @return a new URLClassLoader instance\n*/",
        "com.google.common.base.FinalizableReferenceQueue$DecoupledLoader:loadFinalizer()": "/**\n* Loads the finalizer class using a URLClassLoader.\n* @return Class<?> of the finalizer or null if loading fails\n*/"
    },
    "com.google.common.base.FinalizableReferenceQueue$DirectLoader": {
        "com.google.common.base.FinalizableReferenceQueue$DirectLoader:loadFinalizer()": "/**\n* Loads the finalizer class by name.\n* @return Class object of the finalizer\n* @throws AssertionError if class not found\n*/"
    },
    "com.google.common.base.FinalizableReferenceQueue$SystemLoader": {
        "com.google.common.base.FinalizableReferenceQueue$SystemLoader:loadFinalizer()": "/**\n* Loads the finalizer class if not disabled; returns null if unavailable.\n* @return Class<?> of finalizer or null if disabled or not found\n*/"
    },
    "com.google.common.base.FunctionalEquivalence": {
        "com.google.common.base.FunctionalEquivalence:equals(java.lang.Object)": "/**\n* Checks equality with another object based on function and result equivalence.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.FunctionalEquivalence:hashCode()": "/**\n* Computes the hash code based on function and result equivalence.\n* @return hash code as an integer\n*/",
        "com.google.common.base.FunctionalEquivalence:toString()": "/**\n* Returns a string representation of the object.\n* @return formatted string combining resultEquivalence and function\n*/",
        "com.google.common.base.FunctionalEquivalence:<init>(com.google.common.base.Function,com.google.common.base.Equivalence)": "/** Constructs FunctionalEquivalence with a function and result equivalence. \n* @param function mapping function\n* @param resultEquivalence equivalence relation for results\n*/",
        "com.google.common.base.FunctionalEquivalence:doEquivalent(java.lang.Object,java.lang.Object)": "/**\n* Checks if two function-applied objects are equivalent.\n* @param a first object of type F\n* @param b second object of type F\n* @return true if equivalent, false otherwise\n*/",
        "com.google.common.base.FunctionalEquivalence:doHash(java.lang.Object)": "/**\n* Computes hash code for the transformed input using result equivalence.\n* @param a input of type F to be hashed\n* @return hash code as an integer\n*/"
    },
    "com.google.common.base.Functions$ConstantFunction": {
        "com.google.common.base.Functions$ConstantFunction:<init>(java.lang.Object)": "/**\n* Initializes a constant function with a specified value.\n* @param value the constant value for the function\n*/",
        "com.google.common.base.Functions$ConstantFunction:hashCode()": "/**\n* Computes hash code for the object based on its value.\n* @return hash code as an integer, or 0 if value is null\n*/",
        "com.google.common.base.Functions$ConstantFunction:toString()": "/**\n* Returns a string representation of the constant function.\n* @return formatted string with the constant value\n*/",
        "com.google.common.base.Functions$ConstantFunction:apply(java.lang.Object)": "/**\n* Returns a constant value regardless of input.\n* @param from ignored input object\n* @return constant value of type E\n*/",
        "com.google.common.base.Functions$ConstantFunction:equals(java.lang.Object)": "/**\n* Compares this ConstantFunction to another object for equality.\n* @param obj object to compare\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.base.Functions$ForMapWithDefault": {
        "com.google.common.base.Functions$ForMapWithDefault:hashCode()": "/**\n* Computes hash code based on map and defaultValue.\n* @return hash code as an integer\n*/",
        "com.google.common.base.Functions$ForMapWithDefault:toString()": "/**\n* Returns a string representation of the Functions.forMap method call.\n* @return formatted string including map and defaultValue\n*/",
        "com.google.common.base.Functions$ForMapWithDefault:<init>(java.util.Map,java.lang.Object)": "/**\n* Initializes ForMapWithDefault with a map and a default value.\n* @param map the input map; must not be null\n* @param defaultValue the value returned for missing keys\n*/",
        "com.google.common.base.Functions$ForMapWithDefault:apply(java.lang.Object)": "/**\n* Retrieves value by key, casting if present; returns default if absent.\n* @param key the key to search in the map\n* @return the associated value or defaultValue if not found\n*/",
        "com.google.common.base.Functions$ForMapWithDefault:equals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param o object to compare\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.base.Functions$FunctionComposition": {
        "com.google.common.base.Functions$FunctionComposition:apply(java.lang.Object)": "/**\n* Applies function f to input a, then applies function g to the result.\n* @param a input of type A\n* @return result of type C after applying g\n*/",
        "com.google.common.base.Functions$FunctionComposition:equals(java.lang.Object)": "/**\n* Checks equality with another FunctionComposition object.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Functions$FunctionComposition:hashCode()": "/**\n* Computes the hash code by combining hash codes of f and g.\n* @return combined hash code as an integer\n*/",
        "com.google.common.base.Functions$FunctionComposition:toString()": "/**\n* Returns a string representation of the function in the format g(f).\n* @return formatted string of the function composition\n*/",
        "com.google.common.base.Functions$FunctionComposition:<init>(com.google.common.base.Function,com.google.common.base.Function)": "/**\n* Constructs a FunctionComposition with two functions.\n* @param g function to apply after f\n* @param f initial function to compose\n*/"
    },
    "com.google.common.base.Functions$FunctionForMapNoDefault": {
        "com.google.common.base.Functions$FunctionForMapNoDefault:equals(java.lang.Object)": "/**\n* Compares this object to another for equality.\n* @param o object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Functions$FunctionForMapNoDefault:hashCode()": "/**\n* Returns the hash code of the map object.\n* @return hash code as an integer\n*/",
        "com.google.common.base.Functions$FunctionForMapNoDefault:toString()": "/**\n* Returns a string representation of the Functions.forMap with the map contents.\n* @return formatted string of the map\n*/",
        "com.google.common.base.Functions$FunctionForMapNoDefault:<init>(java.util.Map)": "/**\n* Constructs a FunctionForMapNoDefault with a non-null map.\n* @param map the map to initialize, must not be null\n*/",
        "com.google.common.base.Functions$FunctionForMapNoDefault:apply(java.lang.Object)": "/**\n* Retrieves value by key from the map; ensures key's presence.\n* @param key the key to lookup\n* @return value associated with the key or throws an exception if absent\n*/"
    },
    "com.google.common.base.Functions$PredicateFunction": {
        "com.google.common.base.Functions$PredicateFunction:apply(java.lang.Object)": "/**\n* Applies the predicate to the given parameter.\n* @param t input parameter of type T\n* @return result of predicate application as Boolean\n*/",
        "com.google.common.base.Functions$PredicateFunction:equals(java.lang.Object)": "/**\n* Compares this PredicateFunction to another object for equality.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Functions$PredicateFunction:hashCode()": "/**\n* Returns the hash code of the predicate object.\n* @return hash code integer value of the predicate\n*/",
        "com.google.common.base.Functions$PredicateFunction:toString()": "/**\n* Returns a string representation of the function with its predicate.\n* @return string describing the function and its predicate\n*/",
        "com.google.common.base.Functions$PredicateFunction:<init>(com.google.common.base.Predicate)": "/**\n* Constructs a PredicateFunction with a non-null predicate.\n* @param predicate the predicate to be used\n*/"
    },
    "com.google.common.base.Functions$SupplierFunction": {
        "com.google.common.base.Functions$SupplierFunction:apply(java.lang.Object)": "/**\n* Applies a function to the input and returns a result from a supplier.\n* @param input the input value (not used in this implementation)\n* @return a result of type T from the supplier\n*/",
        "com.google.common.base.Functions$SupplierFunction:equals(java.lang.Object)": "/**\n* Compares this SupplierFunction to another object for equality.\n* @param obj object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Functions$SupplierFunction:hashCode()": "/**\n* Returns the hash code of the supplier.\n* @return hash code as an integer\n*/",
        "com.google.common.base.Functions$SupplierFunction:toString()": "/**\n* Returns a string representation of the Functions.forSupplier object.\n* @return formatted string including the supplier information\n*/",
        "com.google.common.base.Functions$SupplierFunction:<init>(com.google.common.base.Supplier)": "/**\n* Initializes SupplierFunction with a non-null Supplier.\n* @param supplier the Supplier to be used, must not be null\n*/"
    },
    "com.google.common.base.Functions": {
        "com.google.common.base.Functions:<init>()": "/**\n* Private constructor to prevent instantiation of the Functions class.\n*/",
        "com.google.common.base.Functions:forPredicate(com.google.common.base.Predicate)": "/**\n* Creates a Function from a given Predicate.\n* @param predicate the condition to evaluate\n* @return a Function that applies the predicate\n*/",
        "com.google.common.base.Functions:forSupplier(com.google.common.base.Supplier)": "/**\n* Creates a Function from a Supplier.\n* @param supplier provides the value for the Function\n* @return Function that calls the Supplier\n*/",
        "com.google.common.base.Functions:constant(java.lang.Object)": "/**\n* Creates a constant function returning the specified value.\n* @param value the constant value to be returned by the function\n* @return a Function that returns the constant value\n*/",
        "com.google.common.base.Functions:forMap(java.util.Map,java.lang.Object)": "/**\n* Creates a function returning values from a map or a default value.\n* @param map the input map; must not be null\n* @param defaultValue the value returned for missing keys\n* @return a function that fetches values from the map\n*/",
        "com.google.common.base.Functions:compose(com.google.common.base.Function,com.google.common.base.Function)": "/**\n* Composes two functions into one.\n* @param g function applied after f\n* @param f initial function to compose\n* @return composed Function<A, C>\n*/",
        "com.google.common.base.Functions:forMap(java.util.Map)": "/**\n* Creates a Function from a given map.\n* @param map the map to use for function mapping\n* @return Function that retrieves values from the map\n*/"
    },
    "com.google.common.base.Java8Compatibility": {
        "com.google.common.base.Java8Compatibility:clear(java.nio.Buffer)": "/**\n* Clears the specified buffer.\n* @param b the Buffer object to be cleared\n*/",
        "com.google.common.base.Java8Compatibility:flip(java.nio.Buffer)": "/**\n* Flips the buffer for reading after writing.\n* @param b the Buffer to flip\n*/",
        "com.google.common.base.Java8Compatibility:limit(java.nio.Buffer,int)": "/**\n* Sets the limit of the given Buffer.\n* @param b the Buffer to limit\n* @param limit the new limit value\n*/",
        "com.google.common.base.Java8Compatibility:position(java.nio.Buffer,int)": "/**\n* Sets the position of the given buffer.\n* @param b the buffer to modify\n* @param position the new position to set in the buffer\n*/",
        "com.google.common.base.Java8Compatibility:<init>()": "/**\n* Constructs a Java8Compatibility instance.\n*/"
    },
    "com.google.common.base.JdkPattern$JdkMatcher": {
        "com.google.common.base.JdkPattern$JdkMatcher:matches()": "/**\n* Checks if the current input matches the pattern.\n* @return true if matched, false otherwise\n*/",
        "com.google.common.base.JdkPattern$JdkMatcher:find()": "/**\n* Searches for the next occurrence of a pattern.\n* @return true if a match is found, false otherwise\n*/",
        "com.google.common.base.JdkPattern$JdkMatcher:find(int)": "/**\n* Finds the next occurrence of a pattern starting at the given index.\n* @param index starting position for the search\n* @return true if a match is found, false otherwise\n*/",
        "com.google.common.base.JdkPattern$JdkMatcher:replaceAll(java.lang.String)": "/**\n* Replaces all occurrences in the matcher with the given replacement string.\n* @param replacement the string to replace matches with\n* @return the resulting string after replacements\n*/",
        "com.google.common.base.JdkPattern$JdkMatcher:end()": "/**\n* Returns the end index of the last match.\n* @return end index of the last match\n*/",
        "com.google.common.base.JdkPattern$JdkMatcher:start()": "/**\n* Returns the starting index of the match.\n* @return starting index as an integer\n*/",
        "com.google.common.base.JdkPattern$JdkMatcher:<init>(java.util.regex.Matcher)": "/**\n* Constructs JdkMatcher with a non-null Matcher.\n* @param matcher the Matcher to be assigned\n*/"
    },
    "com.google.common.base.JdkPattern": {
        "com.google.common.base.JdkPattern:pattern()": "/**\n* Returns the string representation of the pattern.\n* @return string representation of the pattern\n*/",
        "com.google.common.base.JdkPattern:flags()": "/**\n* Returns the flags of the associated pattern.\n* @return an integer representing the pattern flags\n*/",
        "com.google.common.base.JdkPattern:toString()": "/**\n* Returns the string representation of the pattern.\n* @return String representation of the pattern\n*/",
        "com.google.common.base.JdkPattern:<init>(java.util.regex.Pattern)": "/**\n* Constructs JdkPattern with a non-null Pattern.\n* @param pattern the Pattern to be wrapped\n*/",
        "com.google.common.base.JdkPattern:matcher(java.lang.CharSequence)": "/**\n* Creates a CommonMatcher for the given CharSequence.\n* @param t the input text to match against the pattern\n* @return a CommonMatcher instance\n*/"
    },
    "com.google.common.base.Joiner": {
        "com.google.common.base.Joiner:toString(java.lang.Object)": "/**\n* Converts an object to CharSequence, handling null safely.\n* @param part object to convert, may be null\n* @return CharSequence representation of the object\n*/",
        "com.google.common.base.Joiner:<init>(com.google.common.base.Joiner)": "/**\n* Constructs a Joiner by copying the separator from a prototype instance.\n* @param prototype the Joiner instance to copy from\n*/",
        "com.google.common.base.Joiner:skipNulls()": "/**\n* Returns a Joiner that skips null values when joining parts.\n* @return Joiner configured to omit null elements\n*/",
        "com.google.common.base.Joiner:withKeyValueSeparator(java.lang.String)": "/**\n* Creates a MapJoiner with specified key-value separator.\n* @param keyValueSeparator string used to separate keys and values\n* @return a new MapJoiner instance\n*/",
        "com.google.common.base.Joiner:<init>(java.lang.String)": "/**\n* Initializes Joiner with a separator.\n* @param separator non-null string used to join elements\n*/",
        "com.google.common.base.Joiner:useForNull(java.lang.String)": "/**\n* Configures Joiner to use specified text for null values.\n* @param nullText text to use in place of null values\n* @return Joiner instance with custom null handling\n*/",
        "com.google.common.base.Joiner:iterable(java.lang.Object,java.lang.Object,java.lang.Object[])": "/**\n* Creates an iterable from two objects and an array.\n* @param first first object, may be null\n* @param second second object, may be null\n* @param rest array of additional objects, must not be null\n* @return Iterable containing the objects\n*/",
        "com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.util.Iterator)": "/**\n* Appends elements from an iterator to an Appendable, separated by a defined separator.\n* @param appendable destination for appending elements\n* @param parts iterator of elements to append\n* @return the modified Appendable\n*/",
        "com.google.common.base.Joiner:withKeyValueSeparator(char)": "/**\n* Creates a MapJoiner with specified character as key-value separator.\n* @param keyValueSeparator character used to separate keys and values\n* @return MapJoiner instance\n*/",
        "com.google.common.base.Joiner:on(java.lang.String)": "/**\n* Creates a Joiner instance with the specified separator.\n* @param separator string used to join elements\n* @return Joiner object initialized with the separator\n*/",
        "com.google.common.base.Joiner:on(char)": "/**** Creates a Joiner instance with a specified character separator. \n* @param separator character used to join elements \n* @return Joiner object initialized with the separator \n*/",
        "com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.lang.Iterable)": "/**\n* Appends elements from an Iterable to an Appendable.\n* @param appendable destination for appending elements\n* @param parts iterable of elements to append\n* @return the modified Appendable\n*/",
        "com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.util.Iterator)": "/**\n* Appends elements from an iterator to a StringBuilder.\n* @param builder destination StringBuilder\n* @param parts iterator of elements to append\n* @return modified StringBuilder\n*/",
        "com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.lang.Object[])": "/**\n* Appends elements from an array to an Appendable.\n* @param appendable destination for appending elements\n* @param parts array of elements to append\n* @return the modified Appendable\n*/",
        "com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.lang.Iterable)": "/**\n* Appends elements from an iterable to a StringBuilder.\n* @param builder destination StringBuilder\n* @param parts iterable of elements to append\n* @return modified StringBuilder\n*/",
        "com.google.common.base.Joiner:join(java.util.Iterator)": "/**\n* Joins elements from an iterator into a single string.\n* @param parts iterator of elements to join\n* @return concatenated string of elements\n*/",
        "com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.lang.Object[])": "/**\n* Appends elements from an array to a StringBuilder.\n* @param builder destination StringBuilder\n* @param parts array of elements to append\n* @return modified StringBuilder\n*/",
        "com.google.common.base.Joiner:join(java.lang.Iterable)": "/**\n* Joins elements from an iterable into a single string.\n* @param parts iterable of elements to join\n* @return concatenated string of elements\n*/",
        "com.google.common.base.Joiner:join(java.lang.Object[])": "/**\n* Joins an array of objects into a single string.\n* @param parts array of objects to join\n* @return concatenated string of elements\n*/"
    },
    "com.google.common.base.Joiner$1": {
        "com.google.common.base.Joiner$1:useForNull(java.lang.String)": "/**\n* Configures Joiner to replace nulls with specified text.\n* @param nullText text to use for null values\n* @return a Joiner instance with null handling\n*/",
        "com.google.common.base.Joiner$1:skipNulls()": "/**\n* Returns a Joiner that skips null elements during joining.\n* @return Joiner instance configured to skip nulls\n*/",
        "com.google.common.base.Joiner$1:toString(java.lang.Object)": "/**\n* Converts an object to CharSequence, handling null and non-CharSequence types.\n* @param part object to convert, may be null\n* @return CharSequence representation of the object\n*/"
    },
    "com.google.common.base.Joiner$2": {
        "com.google.common.base.Joiner$2:useForNull(java.lang.String)": "/**\n* Configures Joiner to use specified text for null values.\n* @param nullText text to replace null parts\n* @return Joiner instance with updated null handling\n*/",
        "com.google.common.base.Joiner$2:withKeyValueSeparator(java.lang.String)": "/**\n* Creates a MapJoiner with specified key-value separator.\n* @param keyValueSeparator string to separate keys and values\n* @return new MapJoiner instance\n*/"
    },
    "com.google.common.base.Joiner$MapJoiner": {
        "com.google.common.base.Joiner$MapJoiner:appendTo(java.lang.Appendable,java.util.Map)": "/**\n* Appends map entries to the provided Appendable.\n* @param appendable target to append entries to\n* @param map source of entries to append\n* @return the modified Appendable\n*/",
        "com.google.common.base.Joiner$MapJoiner:appendTo(java.lang.StringBuilder,java.util.Iterator)": "/**\n* Appends entries to a StringBuilder and returns it.\n* @param builder StringBuilder to append to\n* @param entries iterator of entries to append\n* @return the modified StringBuilder\n*/",
        "com.google.common.base.Joiner$MapJoiner:<init>(com.google.common.base.Joiner,java.lang.String)": "/**\n* Constructs a MapJoiner with a Joiner and key-value separator.\n* @param joiner the Joiner instance for joining keys and values\n* @param keyValueSeparator non-null separator for key-value pairs\n*/",
        "com.google.common.base.Joiner$MapJoiner:appendTo(java.lang.StringBuilder,java.lang.Iterable)": "/**\n* Appends entries to a StringBuilder.\n* @param builder StringBuilder to append to\n* @param entries iterable of entries to append\n* @return modified StringBuilder\n*/",
        "com.google.common.base.Joiner$MapJoiner:join(java.util.Iterator)": "/**\n* Joins entries into a single string.\n* @param entries iterator of entries to join\n* @return concatenated string representation of entries\n*/",
        "com.google.common.base.Joiner$MapJoiner:useForNull(java.lang.String)": "/**\n* Creates a MapJoiner with custom handling for null values.\n* @param nullText text to replace null values\n* @return configured MapJoiner instance\n*/",
        "com.google.common.base.Joiner$MapJoiner:appendTo(java.lang.StringBuilder,java.util.Map)": "/**** Appends map entries to a StringBuilder. \n* @param builder StringBuilder to append to \n* @param map entries to append \n* @return modified StringBuilder \n*/",
        "com.google.common.base.Joiner$MapJoiner:join(java.lang.Iterable)": "/**\n* Joins entries into a single string.\n* @param entries iterable of entries to join\n* @return concatenated string representation of entries\n*/",
        "com.google.common.base.Joiner$MapJoiner:join(java.util.Map)": "/**\n* Joins map entries into a single string.\n* @param map key-value pairs to join\n* @return concatenated string representation of map entries\n*/"
    },
    "com.google.common.base.MoreObjects$ToStringHelper": {
        "com.google.common.base.MoreObjects$ToStringHelper:isEmpty(java.lang.Object)": "/**\n* Checks if the given object is empty or not.\n* @param value the object to check for emptiness\n* @return true if empty, false otherwise\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:addHolder()": "/**\n* Creates and adds a new ValueHolder to the end of the list.\n* @return the newly created ValueHolder instance\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:addUnconditionalHolder()": "/**\n* Creates and adds a new UnconditionalValueHolder to the holder chain.\n* @return the newly created UnconditionalValueHolder\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:<init>(java.lang.String)": "/**\n* Constructs a ToStringHelper with a non-null class name.\n* @param className the name of the class, must not be null\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:toString()": "/**\n* Returns a string representation of the object, omitting null/empty values based on flags.\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:addHolder(java.lang.Object)": "/**\n* Adds a ValueHolder with a specified value to the list.\n* @param value the value to be held in the ValueHolder\n* @return this ToStringHelper instance for method chaining\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:addHolder(java.lang.String,java.lang.Object)": "/**\n* Adds a ValueHolder with name and value to the list.\n* @param name the name for the ValueHolder\n* @param value the value to be stored, can be null\n* @return ToStringHelper for method chaining\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:addUnconditionalHolder(java.lang.Object)": "/**\n* Adds a value to a new UnconditionalValueHolder and returns the ToStringHelper.\n* @param value the value to be held\n* @return this ToStringHelper instance\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:addUnconditionalHolder(java.lang.String,java.lang.Object)": "/**\n* Adds an unconditional holder with a name and value.\n* @param name the name of the holder\n* @param value the value to be held\n* @return this ToStringHelper instance\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:addValue(java.lang.Object)": "/**\n* Adds a value to the ToStringHelper.\n* @param value the value to be added\n* @return this ToStringHelper instance for method chaining\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,java.lang.Object)": "/**\n* Adds a name-value pair to the ToStringHelper.\n* @param name the name for the ValueHolder\n* @param value the value to be stored, can be null\n* @return ToStringHelper for method chaining\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:addValue(boolean)": "/**\n* Adds a boolean value to the ToStringHelper.\n* @param value the boolean value to add\n* @return updated ToStringHelper instance\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:addValue(char)": "/**\n* Adds a character value to the ToStringHelper.\n* @param value character to be added\n* @return this ToStringHelper instance\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:addValue(double)": "/**\n* Adds a double value to the ToStringHelper.\n* @param value the double value to be added\n* @return updated ToStringHelper instance\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:addValue(float)": "/**\n* Adds a float value to the ToStringHelper.\n* @param value the float value to be added\n* @return updated ToStringHelper instance\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:addValue(int)": "/**\n* Adds an integer value to the ToStringHelper.\n* @param value the integer to be added\n* @return this ToStringHelper instance\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:addValue(long)": "/**\n* Adds a long value to the ToStringHelper.\n* @param value the long value to add\n* @return this ToStringHelper instance\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,boolean)": "/ ** Adds a name-value pair to the ToStringHelper. \n* @param name the name to associate with the value \n* @param value the boolean value to be added \n* @return this ToStringHelper instance \n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,char)": "/**\n* Adds a character value to the ToStringHelper.\n* @param name the name of the character holder\n* @param value the character value to hold\n* @return this ToStringHelper instance\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,double)": "/**\n* Adds a name-value pair to the ToStringHelper.\n* @param name the name of the value\n* @param value the double value to be added\n* @return this ToStringHelper instance\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,float)": "/**\n* Adds a name-value pair to the ToStringHelper.\n* @param name the name of the holder\n* @param value the float value to be held\n* @return this ToStringHelper instance\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,int)": "/**\n* Adds a name-value pair to the ToStringHelper.\n* @param name the name of the holder\n* @param value the integer value to be held\n* @return this ToStringHelper instance\n*/",
        "com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,long)": "/**\n* Adds a name-value pair to the ToStringHelper.\n* @param name the name of the value\n* @param value the long value to be added\n* @return this ToStringHelper instance\n*/"
    },
    "com.google.common.base.MoreObjects": {
        "com.google.common.base.MoreObjects:firstNonNull(java.lang.Object,java.lang.Object)": "/**\n* Returns the first non-null value between two parameters.\n* @param first first value to check\n* @param second second value to check\n* @return first non-null value or throws NullPointerException if both are null\n*/",
        "com.google.common.base.MoreObjects:toStringHelper(java.lang.Object)": "/**\n* Creates a ToStringHelper for the object's class name.\n* @param self the object for which to create the helper\n* @return ToStringHelper instance initialized with the class name\n*/",
        "com.google.common.base.MoreObjects:toStringHelper(java.lang.Class)": "/**\n* Creates a ToStringHelper for the specified class.\n* @param clazz the class for which the helper is created\n* @return ToStringHelper instance initialized with class name\n*/",
        "com.google.common.base.MoreObjects:toStringHelper(java.lang.String)": "/**\n* Creates a ToStringHelper for the specified class name.\n* @param className name of the class for string representation\n* @return ToStringHelper instance for the class\n*/",
        "com.google.common.base.MoreObjects:<init>()": "/**\n* Private constructor to prevent instantiation of the MoreObjects utility class.\n*/"
    },
    "com.google.common.base.PairwiseEquivalence": {
        "com.google.common.base.PairwiseEquivalence:equals(java.lang.Object)": "/**\n* Compares this object to another for equality.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.PairwiseEquivalence:hashCode()": "/**\n* Computes the hash code for the object using element equivalence.\n* @return computed hash code as an integer\n*/",
        "com.google.common.base.PairwiseEquivalence:toString()": "/**\n* Returns a string representation of the object in a specific format.\n* @return formatted string of the element equivalence\n*/",
        "com.google.common.base.PairwiseEquivalence:<init>(com.google.common.base.Equivalence)": "/**\n* Constructs PairwiseEquivalence with a non-null element equivalence.\n* @param elementEquivalence the equivalence to be checked and assigned\n*/",
        "com.google.common.base.PairwiseEquivalence:doEquivalent(java.lang.Iterable,java.lang.Iterable)": "/**\n* Checks if two iterables are equivalent element-wise.\n* @param iterableA first iterable, may be null\n* @param iterableB second iterable, may be null\n* @return true if equivalent, false otherwise\n*/",
        "com.google.common.base.PairwiseEquivalence:doHash(java.lang.Iterable)": "/**\n* Computes hash code for an iterable collection of elements.\n* @param iterable collection of elements to hash\n* @return computed hash code as an integer\n*/"
    },
    "com.google.common.base.Predicate": {
        "com.google.common.base.Predicate:test(java.lang.Object)": "/**\n* Tests input using the apply method.\n* @param input value to be tested\n* @return true if the input passes the test, false otherwise\n*/"
    },
    "com.google.common.base.Predicates$AndPredicate": {
        "com.google.common.base.Predicates$AndPredicate:<init>(java.util.List)": "/**\n* Initializes AndPredicate with a list of components.\n* @param components list of predicates to combine\n*/",
        "com.google.common.base.Predicates$AndPredicate:apply(java.lang.Object)": "/**\n* Applies a function to each component and returns true if all succeed.\n* @param t input parameter for the components' apply methods\n* @return true if all components return true, false otherwise\n*/",
        "com.google.common.base.Predicates$AndPredicate:hashCode()": "/**\n* Computes hash code for the object, adding a constant to reduce collisions.\n* @return integer hash code value\n*/",
        "com.google.common.base.Predicates$AndPredicate:equals(java.lang.Object)": "/**\n* Checks equality with another AndPredicate object.\n* @param obj object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Predicates$AndPredicate:toString()": "/**\n* Returns a string representation of the object using a helper method.\n* @return formatted string of components\n*/"
    },
    "com.google.common.base.Predicates$CompositionPredicate": {
        "com.google.common.base.Predicates$CompositionPredicate:apply(java.lang.Object)": "/**\n* Applies function f to input a and then applies function p.\n* @param a input of type A\n* @return result of applying p, true if successful\n*/",
        "com.google.common.base.Predicates$CompositionPredicate:equals(java.lang.Object)": "/**\n* Checks equality of this CompositionPredicate with another object.\n* @param obj object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Predicates$CompositionPredicate:hashCode()": "/**\n* Computes the hash code by combining hash codes of fields f and p.\n* @return combined hash code as an integer\n*/",
        "com.google.common.base.Predicates$CompositionPredicate:toString()": "/**\n* Returns a string representation of the predicate and function.\n* @return formatted string of predicate and function\n*/",
        "com.google.common.base.Predicates$CompositionPredicate:<init>(com.google.common.base.Predicate,com.google.common.base.Function)": "/**\n* Constructs a CompositionPredicate with a predicate and a function.\n* @param p the predicate to evaluate\n* @param f the function to transform input\n*/"
    },
    "com.google.common.base.Predicates$ContainsPatternFromStringPredicate": {
        "com.google.common.base.Predicates$ContainsPatternFromStringPredicate:toString()": "/**\n* Returns a string representation of the pattern matcher.\n* @return descriptive string of the pattern used\n*/",
        "com.google.common.base.Predicates$ContainsPatternFromStringPredicate:<init>(java.lang.String)": "/**\n* Initializes predicate with a compiled pattern from the given string.\n* @param string the string pattern to compile\n*/"
    },
    "com.google.common.base.Predicates$ContainsPatternPredicate": {
        "com.google.common.base.Predicates$ContainsPatternPredicate:apply(java.lang.CharSequence)": "/**\n* Checks if the given sequence matches the defined pattern.\n* @param t the character sequence to test\n* @return true if a match is found, false otherwise\n*/",
        "com.google.common.base.Predicates$ContainsPatternPredicate:hashCode()": "/**\n* Computes hash code for the pattern based on its string and flags.\n* @return an integer hash code value\n*/",
        "com.google.common.base.Predicates$ContainsPatternPredicate:<init>(com.google.common.base.CommonPattern)": "/**\n* Constructs a predicate with a specified pattern.\n* @param pattern the common pattern to be used; must not be null\n*/",
        "com.google.common.base.Predicates$ContainsPatternPredicate:equals(java.lang.Object)": "/**\n* Checks equality of ContainsPatternPredicate objects based on pattern and flags.\n* @param obj object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Predicates$ContainsPatternPredicate:toString()": "/**\n* Returns a string representation of the predicate with pattern details.\n* @return formatted string including pattern and its flags\n*/"
    },
    "com.google.common.base.Predicates$InPredicate": {
        "com.google.common.base.Predicates$InPredicate:apply(java.lang.Object)": "/**\n* Checks if the target contains the specified element.\n* @param t element to check for presence in target\n* @return true if present, false if not or an exception occurs\n*/",
        "com.google.common.base.Predicates$InPredicate:equals(java.lang.Object)": "/**\n* Compares this InPredicate with another object for equality.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Predicates$InPredicate:hashCode()": "/**\n* Returns the hash code of the target object.\n* @return hash code as an integer\n*/",
        "com.google.common.base.Predicates$InPredicate:toString()": "/**\n* Returns a string representation of the Predicates.in object.\n* @return formatted string including the target value\n*/",
        "com.google.common.base.Predicates$InPredicate:<init>(java.util.Collection)": "/**\n* Constructs an InPredicate with a non-null target collection.\n* @param target collection of elements to check against\n*/"
    },
    "com.google.common.base.Predicates$InstanceOfPredicate": {
        "com.google.common.base.Predicates$InstanceOfPredicate:apply(java.lang.Object)": "/**\n* Checks if the object is an instance of the specified class.\n* @param o object to check\n* @return true if o is an instance of clazz, false otherwise\n*/",
        "com.google.common.base.Predicates$InstanceOfPredicate:hashCode()": "/**\n* Computes hash code based on the class type.\n* @return hash code of the class object\n*/",
        "com.google.common.base.Predicates$InstanceOfPredicate:toString()": "/**\n* Returns a string representation of the instance type.\n* @return string describing the instance type\n*/",
        "com.google.common.base.Predicates$InstanceOfPredicate:equals(java.lang.Object)": "/**\n* Compares this InstanceOfPredicate with another object for equality.\n* @param obj the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Predicates$InstanceOfPredicate:<init>(java.lang.Class)": "/**** Constructs an InstanceOfPredicate for the specified class.  \n* @param clazz the class to check instances against  \n*/"
    },
    "com.google.common.base.Predicates$IsEqualToPredicate": {
        "com.google.common.base.Predicates$IsEqualToPredicate:<init>(java.lang.Object)": "/**\n* Initializes a predicate to check equality with the given target object.\n* @param target object to compare against\n*/",
        "com.google.common.base.Predicates$IsEqualToPredicate:apply(java.lang.Object)": "/**\n* Compares the given object with the target for equality.\n* @param o object to compare with the target\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Predicates$IsEqualToPredicate:hashCode()": "/**\n* Returns the hash code of the target object.\n* @return hash code integer of the target\n*/",
        "com.google.common.base.Predicates$IsEqualToPredicate:equals(java.lang.Object)": "/**\n* Compares this predicate to another for equality.\n* @param obj object to compare with this predicate\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Predicates$IsEqualToPredicate:toString()": "/**\n* Returns a string representation of the Predicates object.\n* @return string format of the Predicates with target value\n*/",
        "com.google.common.base.Predicates$IsEqualToPredicate:withNarrowedType()": "/**\n* Returns a narrowed type Predicate of the current instance.\n* @return Predicate of type T, safely cast from this\n*/"
    },
    "com.google.common.base.Predicates$NotPredicate": {
        "com.google.common.base.Predicates$NotPredicate:apply(java.lang.Object)": "/**\n* Applies the negation of the predicate to the given input.\n* @param t input value of type T\n* @return true if predicate is false, otherwise false\n*/",
        "com.google.common.base.Predicates$NotPredicate:hashCode()": "/**\n* Computes the hash code by inverting the predicate's hash code.\n* @return inverted hash code of the predicate\n*/",
        "com.google.common.base.Predicates$NotPredicate:equals(java.lang.Object)": "/**\n* Compares this NotPredicate with another object for equality.\n* @param obj the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Predicates$NotPredicate:toString()": "/**\n* Returns a string representation of the negated predicate.\n* @return String describing the negated predicate\n*/",
        "com.google.common.base.Predicates$NotPredicate:<init>(com.google.common.base.Predicate)": "/**\n* Constructs a NotPredicate with a non-null predicate.\n* @param predicate the predicate to negate\n*/"
    },
    "com.google.common.base.Predicates$OrPredicate": {
        "com.google.common.base.Predicates$OrPredicate:<init>(java.util.List)": "/**\n* Initializes OrPredicate with a list of components.\n* @param components list of predicates to combine\n*/",
        "com.google.common.base.Predicates$OrPredicate:apply(java.lang.Object)": "/**\n* Applies a function to each component; returns true if any component matches.\n* @param t input value to apply on components\n* @return true if a component matches, false otherwise\n*/",
        "com.google.common.base.Predicates$OrPredicate:hashCode()": "/**\n* Computes hash code for the object with a random offset to reduce collisions.\n* @return computed hash code as an integer\n*/",
        "com.google.common.base.Predicates$OrPredicate:equals(java.lang.Object)": "/**\n* Compares this OrPredicate with another object for equality.\n* @param obj the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Predicates$OrPredicate:toString()": "/**\n* Returns a string representation of the object using a helper method.\n* @return formatted string of components\n*/"
    },
    "com.google.common.base.Predicates$SubtypeOfPredicate": {
        "com.google.common.base.Predicates$SubtypeOfPredicate:apply(java.lang.Class)": "/**\n* Checks if input class is assignable to the specified class.\n* @param input class to check against\n* @return true if assignable, false otherwise\n*/",
        "com.google.common.base.Predicates$SubtypeOfPredicate:hashCode()": "/**\n* Returns the hash code of the class object.\n* @return hash code as an integer\n*/",
        "com.google.common.base.Predicates$SubtypeOfPredicate:toString()": "/**\n* Returns a string representation of the subtype predicate.\n* @return string describing the subtype of the class\n*/",
        "com.google.common.base.Predicates$SubtypeOfPredicate:equals(java.lang.Object)": "/**\n* Compares this object to another for equality based on class type.\n* @param obj the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Predicates$SubtypeOfPredicate:<init>(java.lang.Class)": "/**\n* Constructs a SubtypeOfPredicate with a non-null class reference.\n* @param clazz the class to be assigned\n*/"
    },
    "com.google.common.base.Predicates": {
        "com.google.common.base.Predicates:<init>()": "/**\n* Private constructor to prevent instantiation of the Predicates class.\n*/",
        "com.google.common.base.Predicates:asList(com.google.common.base.Predicate,com.google.common.base.Predicate)": "/**\n* Converts two predicates into a list.\n* @param first the first predicate\n* @param second the second predicate\n* @return a list containing the provided predicates\n*/",
        "com.google.common.base.Predicates:instanceOf(java.lang.Class)": "/**\n* Returns a predicate that checks if an object is an instance of the given class.\n* @param clazz the class to check against\n* @return Predicate<T> that tests instances of type T\n*/",
        "com.google.common.base.Predicates:subtypeOf(java.lang.Class)": "/**\n* Creates a predicate to check if a class is a subtype of the specified class.\n* @param clazz the class to check against\n* @return Predicate that evaluates class subtypes\n*/",
        "com.google.common.base.Predicates:in(java.util.Collection)": "/**\n* Creates a predicate to check if elements are in the specified collection.\n* @param target collection of elements to check against\n* @return Predicate that tests membership in the collection\n*/",
        "com.google.common.base.Predicates:compose(com.google.common.base.Predicate,com.google.common.base.Function)": "/**\n* Composes a predicate with a function to transform input.\n* @param predicate the base predicate\n* @param function the transformation function\n* @return a new Predicate<A> based on the composition\n*/",
        "com.google.common.base.Predicates:toStringHelper(java.lang.String,java.lang.Iterable)": "/**\n* Constructs a string representation of a method call with components.\n* @param methodName the name of the method\n* @param components iterable collection of components\n* @return formatted string representing the method call\n*/",
        "com.google.common.base.Predicates:defensiveCopy(java.lang.Iterable)": "/**\n* Creates a defensive copy of the provided iterable.\n* @param iterable source of elements to copy\n* @return List containing non-null elements from iterable\n*/",
        "com.google.common.base.Predicates:alwaysTrue()": "/**\n* Returns a Predicate that always evaluates to true.\n* @return Predicate of type T, where T is a nullable object\n*/",
        "com.google.common.base.Predicates:alwaysFalse()": "/**\n* Returns a Predicate that always evaluates to false.\n* @return Predicate of type T, narrowed from ALWAYS_FALSE\n*/",
        "com.google.common.base.Predicates:isNull()": "/**\n* Returns a Predicate that checks for null values.\n* @return Predicate of type T for null checks\n*/",
        "com.google.common.base.Predicates:notNull()": "/**\n* Returns a Predicate that checks for non-null values.\n* @return Predicate of type T, where T is a nullable object\n*/",
        "com.google.common.base.Predicates:and(com.google.common.base.Predicate,com.google.common.base.Predicate)": "/**\n* Combines two predicates into a single AND predicate.\n* @param first the first predicate\n* @param second the second predicate\n* @return a new Predicate that represents the logical AND of both\n*/",
        "com.google.common.base.Predicates:or(com.google.common.base.Predicate,com.google.common.base.Predicate)": "/**\n* Combines two predicates using logical OR.\n* @param first the first predicate\n* @param second the second predicate\n* @return a Predicate that is true if either input predicate is true\n*/",
        "com.google.common.base.Predicates:contains(java.util.regex.Pattern)": "/**\n* Creates a predicate that checks if a CharSequence contains a specified pattern.\n* @param pattern the regex pattern to match; must not be null\n* @return Predicate that tests for pattern presence\n*/",
        "com.google.common.base.Predicates:not(com.google.common.base.Predicate)": "/**\n* Negates the given predicate.\n* @param predicate the predicate to negate\n* @return a new Predicate that represents the negation\n*/",
        "com.google.common.base.Predicates:and(java.lang.Iterable)": "/**** Combines multiple predicates into a single predicate.\\n* @param components iterable of predicates to combine\\n* @return Predicate that represents the logical AND of the components */",
        "com.google.common.base.Predicates:or(java.lang.Iterable)": "/**\n* Combines multiple predicates into a single OR predicate.\n* @param components iterable of predicates to combine\n* @return Predicate that represents the logical OR of the components\n*/",
        "com.google.common.base.Predicates:equalTo(java.lang.Object)": "/**\n* Returns a Predicate that checks for equality with the target value.\n* @param target value to compare against, can be null\n* @return Predicate for equality check or null check if target is null\n*/",
        "com.google.common.base.Predicates:containsPattern(java.lang.String)": "/**\n* Creates a predicate that checks for a substring pattern.\n* @param pattern the substring pattern to search for\n* @return Predicate that tests CharSequence for the pattern\n*/"
    },
    "com.google.common.base.Predicates$ObjectPredicate": {
        "com.google.common.base.Predicates$ObjectPredicate:withNarrowedType()": "/**\n* Returns a narrowed type Predicate of the current instance.\n* @return Predicate of type T, where T is a nullable object\n*/"
    },
    "com.google.common.base.Present": {
        "com.google.common.base.Present:asSet()": "/**\n* Returns a set containing the single reference element.\n* @return a Set with the reference element\n*/",
        "com.google.common.base.Present:equals(java.lang.Object)": "/**\n* Compares this Present object with another for equality.\n* @param obj the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Present:hashCode()": "/**\n* Computes the hash code based on the reference object's hash code.\n* @return computed hash code as an integer\n*/",
        "com.google.common.base.Present:toString()": "/**\n* Returns a string representation of the Optional reference.\n* @return formatted string of the Optional object\n*/",
        "com.google.common.base.Present:get()": "/**\n* Retrieves the stored reference.\n* @return the stored reference of type T\n*/",
        "com.google.common.base.Present:isPresent()": "/**\n* Checks if the object is present.\n* @return true if the object is present, false otherwise\n*/",
        "com.google.common.base.Present:orNull()": "/**\n* Returns the stored reference or null if not present.\n* @return stored reference of type T or null\n*/",
        "com.google.common.base.Present:<init>(java.lang.Object)": "/**\n* Initializes a Present instance with a reference.\n* @param reference the object to be wrapped in the Present\n*/",
        "com.google.common.base.Present:or(java.lang.Object)": "/**\n* Returns the reference or a default value if null.\n* @param defaultValue fallback value if reference is null\n* @return the reference\n*/",
        "com.google.common.base.Present:or(com.google.common.base.Optional)": "/**\n* Returns the current Optional or the second choice if present.\n* @param secondChoice an Optional to consider as an alternative\n* @return this Optional instance\n*/",
        "com.google.common.base.Present:or(com.google.common.base.Supplier)": "/**\n* Returns the reference or invokes the supplier if null.\n* @param supplier a Supplier to provide a fallback value\n* @return the reference of type T\n*/",
        "com.google.common.base.Present:transform(com.google.common.base.Function)": "/**\n* Transforms the reference using the provided function.\n* @param function a function to apply to the reference\n* @return an Optional containing the transformed value\n*/"
    },
    "com.google.common.base.SmallCharMatcher": {
        "com.google.common.base.SmallCharMatcher:smear(int)": "/**\n* Applies a smear function to the given hash code.\n* @param hashCode input hash code to be smeared\n* @return modified hash code after applying smear logic\n*/",
        "com.google.common.base.SmallCharMatcher:chooseTableSize(int)": "/**\n* Calculates optimal table size for a given set size.\n* @param setSize desired number of elements\n* @return adjusted table size as a power of 2\n*/",
        "com.google.common.base.SmallCharMatcher:checkFilter(int)": "/**\n* Checks if the bit at position 'c' in 'filter' is set.\n* @param c bit position to check\n* @return true if the bit is set, false otherwise\n*/",
        "com.google.common.base.SmallCharMatcher:setBits(java.util.BitSet)": "/**\n* Updates the given BitSet with values from the object's table.\n* @param table BitSet to modify based on internal values\n*/",
        "com.google.common.base.SmallCharMatcher:matches(char)": "/**\n* Checks if character matches in a hash table with linear probing.\n* @param c character to match; returns true if found, false otherwise\n*/",
        "com.google.common.base.SmallCharMatcher:<init>(char[],long,boolean,java.lang.String)": "/**\n* Constructs a SmallCharMatcher with specified parameters.\n* @param table character mapping table\n* @param filter bitmask for filtering characters\n* @param containsZero indicates if zero is included\n* @param description matcher description\n*/",
        "com.google.common.base.SmallCharMatcher:from(java.util.BitSet,java.lang.String)": "/**\n* Creates a CharMatcher from a BitSet and description.\n* @param chars BitSet of characters to match\n* @param description matcher description\n* @return CharMatcher instance\n*/"
    },
    "com.google.common.base.Splitter$SplittingIterator": {
        "com.google.common.base.Splitter$SplittingIterator:computeNext()": "/**\n* Computes the next substring between separators in a string.\n* @return next substring or null if no more data is available\n*/",
        "com.google.common.base.Splitter$SplittingIterator:<init>(com.google.common.base.Splitter,java.lang.CharSequence)": "/**\n* Initializes SplittingIterator with splitter settings and string to split.\n* @param splitter configuration for splitting behavior\n* @param toSplit string to be split based on splitter settings\n*/"
    },
    "com.google.common.base.Splitter": {
        "com.google.common.base.Splitter:<init>(com.google.common.base.Splitter$Strategy,boolean,com.google.common.base.CharMatcher,int)": "/**\n* Constructs a Splitter with specified strategy and options.\n* @param strategy splitting strategy to use\n* @param omitEmptyStrings flag to omit empty results\n* @param trimmer character matcher for trimming strings\n* @param limit maximum number of splits to perform\n*/",
        "com.google.common.base.Splitter:splittingIterator(java.lang.CharSequence)": "/**\n* Returns an iterator for splitting the given character sequence.\n* @param sequence the character sequence to split\n* @return an iterator over the split strings\n*/",
        "com.google.common.base.Splitter:withKeyValueSeparator(com.google.common.base.Splitter)": "/**\n* Creates a MapSplitter with the specified key-value separator.\n* @param keyValueSplitter defines how keys and values are split\n* @return a new MapSplitter instance\n*/",
        "com.google.common.base.Splitter:split(java.lang.CharSequence)": "/**\n* Splits a CharSequence into an Iterable of Strings.\n* @param sequence input sequence to split\n* @return Iterable of split Strings\n*/",
        "com.google.common.base.Splitter:<init>(com.google.common.base.Splitter$Strategy)": "/**\n* Initializes Splitter with specified strategy, default options.\n* @param strategy splitting strategy to use\n*/",
        "com.google.common.base.Splitter:omitEmptyStrings()": "/**\n* Creates a Splitter that omits empty strings in the result.\n* @return Splitter instance configured to omit empty results\n*/",
        "com.google.common.base.Splitter:limit(int)": "/**\n* Limits the number of splits to maxItems.\n* @param maxItems maximum number of splits (must be > 0)\n* @return new Splitter instance with specified limit\n*/",
        "com.google.common.base.Splitter:trimResults(com.google.common.base.CharMatcher)": "/**\n* Trims results using specified character matcher.\n* @param trimmer character matcher for trimming strings\n* @return new Splitter instance with trimming applied\n*/",
        "com.google.common.base.Splitter:splitToList(java.lang.CharSequence)": "/**\n* Splits a character sequence into an unmodifiable list of strings.\n* @param sequence the character sequence to split\n* @return unmodifiable list of split strings\n*/",
        "com.google.common.base.Splitter:on(java.util.regex.Pattern)": "/**\n* Creates a Splitter using the specified regex Pattern as a separator.\n* @param separatorPattern the regex Pattern to split on\n* @return Splitter instance configured with the given Pattern\n*/",
        "com.google.common.base.Splitter:onPattern(java.lang.String)": "/**\n* Creates a Splitter using the provided regex pattern.\n* @param separatorPattern regex pattern for splitting\n* @return Splitter instance configured with the pattern\n*/",
        "com.google.common.base.Splitter:splitToStream(java.lang.CharSequence)": "/**\n* Converts a CharSequence into a Stream of Strings.\n* @param sequence input sequence to split\n* @return Stream of split Strings\n*/",
        "com.google.common.base.Splitter:on(com.google.common.base.CharMatcher)": "/**\n* Creates a Splitter using the specified CharMatcher for separation.\n* @param separatorMatcher the matcher to identify split points\n* @return a new Splitter instance\n*/",
        "com.google.common.base.Splitter:fixedLength(int)": "/**\n* Creates a Splitter for fixed-length splits.\n* @param length the length of each split, must be > 0\n* @return a Splitter instance for fixed-length splitting\n*/",
        "com.google.common.base.Splitter:trimResults()": "/**\n* Trims results using whitespace matcher.\n* @return Splitter instance with whitespace trimming applied\n*/",
        "com.google.common.base.Splitter:on(char)": "/**\n* Creates a Splitter using the specified character as a separator.\n* @param separator character to separate input\n* @return Splitter instance for splitting input by the character\n*/",
        "com.google.common.base.Splitter:on(java.lang.String)": "/**\n* Creates a Splitter for the given separator string.\n* @param separator string used for splitting input\n* @return Splitter instance configured with the separator\n*/",
        "com.google.common.base.Splitter:withKeyValueSeparator(char)": "/**\n* Creates a MapSplitter with the specified key-value separator.\n* @param separator character to separate keys and values\n* @return MapSplitter instance for splitting key-value pairs\n*/",
        "com.google.common.base.Splitter:withKeyValueSeparator(java.lang.String)": "/**\n* Configures a MapSplitter with a specified key-value separator.\n* @param separator string used for splitting input\n* @return MapSplitter instance configured with the separator\n*/"
    },
    "com.google.common.base.StandardSystemProperty": {
        "com.google.common.base.StandardSystemProperty:value()": "/**\n* Retrieves the system property value for the specified key.\n* @return property value as a String or null if not found\n*/",
        "com.google.common.base.StandardSystemProperty:key()": "/**\n* Retrieves the key value.\n* @return the key as a String\n*/",
        "com.google.common.base.StandardSystemProperty:toString()": "/**\n* Returns a string representation of the key-value pair.\n* @return formatted string as \"key=value\"\n*/"
    },
    "com.google.common.base.Ticker": {
        "com.google.common.base.Ticker:systemTicker()": "/**\n* Retrieves the system ticker instance.\n* @return Ticker object representing the system ticker\n*/",
        "com.google.common.base.Ticker:<init>()": "/**\n* Constructs a new Ticker instance.\n*/"
    },
    "com.google.common.base.Stopwatch": {
        "com.google.common.base.Stopwatch:elapsedNanos()": "/**\n* Calculates elapsed time in nanoseconds since the start.\n* @return elapsed time in nanoseconds\n*/",
        "com.google.common.base.Stopwatch:chooseUnit(long)": "/**\n* Determines the largest TimeUnit for the given nanoseconds.\n* @param nanos duration in nanoseconds\n* @return corresponding TimeUnit for the duration\n*/",
        "com.google.common.base.Stopwatch:abbreviate(java.util.concurrent.TimeUnit)": "/**\n* Returns the abbreviation for the given TimeUnit.\n* @param unit the TimeUnit to abbreviate\n* @return abbreviation as a String\n*/",
        "com.google.common.base.Stopwatch:isRunning()": "/**\n* Checks if the process is currently running.\n* @return true if running, false otherwise\n*/",
        "com.google.common.base.Stopwatch:<init>(com.google.common.base.Ticker)": "/**\n* Constructs a Stopwatch with a non-null Ticker.\n* @param ticker the Ticker instance to be used\n*/",
        "com.google.common.base.Stopwatch:start()": "/**\n* Starts the stopwatch if not already running.\n* @return Stopwatch instance for method chaining\n*/",
        "com.google.common.base.Stopwatch:stop()": "/**\n* Stops the stopwatch and returns its current state.\n* @return Stopwatch instance with updated elapsed time\n*/",
        "com.google.common.base.Stopwatch:<init>()": "/**\n* Initializes a Stopwatch instance using the system ticker.\n*/",
        "com.google.common.base.Stopwatch:elapsed(java.util.concurrent.TimeUnit)": "/**\n* Converts elapsed time to the desired TimeUnit.\n* @param desiredUnit the unit to convert elapsed time into\n* @return elapsed time in the specified TimeUnit\n*/",
        "com.google.common.base.Stopwatch:elapsed()": "/**\n* Returns the duration elapsed since the start.\n* @return Duration representing elapsed time\n*/",
        "com.google.common.base.Stopwatch:toString()": "/**\n* Converts elapsed time to a formatted string with appropriate time unit.\n* @return formatted time string\n*/",
        "com.google.common.base.Stopwatch:createUnstarted(com.google.common.base.Ticker)": "/**\n* Creates an unstarted Stopwatch instance.\n* @param ticker the Ticker instance for the Stopwatch\n* @return a new Stopwatch object\n*/",
        "com.google.common.base.Stopwatch:createStarted(com.google.common.base.Ticker)": "/**\n* Creates and starts a Stopwatch with the provided Ticker.\n* @param ticker the Ticker instance for the Stopwatch\n* @return a started Stopwatch instance\n*/",
        "com.google.common.base.Stopwatch:createUnstarted()": "/**\n* Creates a new unstarted Stopwatch instance.\n* @return a Stopwatch object initialized but not started\n*/",
        "com.google.common.base.Stopwatch:createStarted()": "/**\n* Creates and starts a new Stopwatch instance.\n* @return Stopwatch instance for method chaining\n*/"
    },
    "com.google.common.base.Strings": {
        "com.google.common.base.Strings:<init>()": "/**\n* Private constructor to prevent instantiation of the Strings class.\n*/",
        "com.google.common.base.Strings:validSurrogatePairAt(java.lang.CharSequence,int)": "/**\n* Checks if a surrogate pair is valid at the specified index in the string.\n* @param string the character sequence to check\n* @param index the position to validate the surrogate pair\n* @return true if valid, false otherwise\n*/",
        "com.google.common.base.Strings:lenientToString(java.lang.Object)": "/**\n* Safely converts an object to its string representation.\n* @param o the object to convert, may be null\n* @return string representation or error message if exception occurs\n*/",
        "com.google.common.base.Strings:padStart(java.lang.String,int,char)": "/**\n* Pads the start of a string with a specified character to a minimum length.\n* @param string the original string to pad\n* @param minLength the minimum length of the resulting string\n* @param padChar the character to pad with\n* @return the padded string\n*/",
        "com.google.common.base.Strings:padEnd(java.lang.String,int,char)": "/**\n* Pads the end of a string with a specified character to meet minimum length.\n* @param string the original string\n* @param minLength the desired minimum length\n* @param padChar the character to pad with\n* @return the padded string\n*/",
        "com.google.common.base.Strings:isNullOrEmpty(java.lang.String)": "/**\n* Checks if the provided string is null or empty.\n* @param string the string to check\n* @return true if null or empty, otherwise false\n*/",
        "com.google.common.base.Strings:repeat(java.lang.String,int)": "/**\n* Repeats a string a specified number of times.\n* @param string the string to repeat\n* @param count the number of times to repeat the string\n* @return the repeated string\n*/",
        "com.google.common.base.Strings:nullToEmpty(java.lang.String)": "/**** Converts null string to empty string. \n* @param string input string which may be null \n* @return empty string if input is null, otherwise the input string \n*/",
        "com.google.common.base.Strings:commonPrefix(java.lang.CharSequence,java.lang.CharSequence)": "/**\n* Returns the common prefix of two CharSequences.\n* @param a first character sequence\n* @param b second character sequence\n* @return common prefix as a String\n*/",
        "com.google.common.base.Strings:commonSuffix(java.lang.CharSequence,java.lang.CharSequence)": "/**\n* Returns the common suffix of two CharSequences.\n* @param a first sequence, must not be null\n* @param b second sequence, must not be null\n* @return common suffix as a String\n*/",
        "com.google.common.base.Strings:emptyToNull(java.lang.String)": "/**\n* Converts an empty string to null.\n* @param string input string which may be null or empty\n* @return null if empty, otherwise the original string\n*/"
    },
    "com.google.common.base.Suppliers$ExpiringMemoizingSupplier": {
        "com.google.common.base.Suppliers$ExpiringMemoizingSupplier:toString()": "/**\n* Returns a string representation of the memoization configuration.\n* @return formatted string with delegate and expiration duration in NANOS\n*/",
        "com.google.common.base.Suppliers$ExpiringMemoizingSupplier:get()": "/**** Retrieves a cached value, refreshing it if expired. \n* @return the cached value or null if not present \n*/"
    },
    "com.google.common.base.Suppliers$MemoizingSupplier": {
        "com.google.common.base.Suppliers$MemoizingSupplier:toString()": "/**\n* Returns a string representation of the memoized supplier's state.\n* @return description of the supplier or its delegate\n*/",
        "com.google.common.base.Suppliers$MemoizingSupplier:<init>(com.google.common.base.Supplier)": "/**\n* Initializes a MemoizingSupplier with a non-null delegate.\n* @param delegate a Supplier to memoize\n*/",
        "com.google.common.base.Suppliers$MemoizingSupplier:get()": "/**\n* Retrieves a value, initializing it if not already done.\n* @return the initialized value of type T\n*/"
    },
    "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier": {
        "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier:toString()": "/**\n* Returns a string representation of the memoized supplier.\n* @return formatted string indicating the supplier's state\n*/",
        "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier:<init>(com.google.common.base.Supplier)": "/**\n* Constructs a NonSerializableMemoizingSupplier with a non-null delegate.\n* @param delegate a Supplier to be memoized\n*/",
        "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier:get()": "/**\n* Retrieves a cached value using double-checked locking.\n* @return cached value of type T\n*/"
    },
    "com.google.common.base.Suppliers$SupplierComposition": {
        "com.google.common.base.Suppliers$SupplierComposition:get()": "/**\n* Applies a function to the result of a supplier.\n* @return Result of function application on supplier output\n*/",
        "com.google.common.base.Suppliers$SupplierComposition:equals(java.lang.Object)": "/**\n* Compares this SupplierComposition with another object for equality.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.base.Suppliers$SupplierComposition:hashCode()": "/**\n* Computes the hash code based on function and supplier fields.\n* @return hash code as an integer\n*/",
        "com.google.common.base.Suppliers$SupplierComposition:toString()": "/**\n* Returns a string representation of the Suppliers.compose function.\n* @return formatted string showing function and supplier details\n*/",
        "com.google.common.base.Suppliers$SupplierComposition:<init>(com.google.common.base.Function,com.google.common.base.Supplier)": "/**\n* Constructs a SupplierComposition with a function and supplier.\n* @param function transformation function; @param supplier provides input value\n*/"
    },
    "com.google.common.base.Suppliers$SupplierFunctionImpl": {
        "com.google.common.base.Suppliers$SupplierFunctionImpl:apply(com.google.common.base.Supplier)": "/**\n* Applies the given supplier to obtain an object.\n* @param input a supplier that provides an object\n* @return the object supplied, or null if not present\n*/"
    },
    "com.google.common.base.Suppliers$SupplierOfInstance": {
        "com.google.common.base.Suppliers$SupplierOfInstance:<init>(java.lang.Object)": "/**\n* Constructs a SupplierOfInstance with the given instance.\n* @param instance the instance to be supplied\n*/",
        "com.google.common.base.Suppliers$SupplierOfInstance:hashCode()": "/**\n* Computes the hash code for the current object based on its instance field.\n* @return hash code as an integer\n*/",
        "com.google.common.base.Suppliers$SupplierOfInstance:toString()": "/**\n* Returns a string representation of the Suppliers instance.\n* @return formatted string with instance details\n*/",
        "com.google.common.base.Suppliers$SupplierOfInstance:get()": "/**\n* Retrieves the stored instance.\n* @return the instance of type T\n*/",
        "com.google.common.base.Suppliers$SupplierOfInstance:equals(java.lang.Object)": "/**\n* Compares this SupplierOfInstance with another object for equality.\n* @param obj object to compare\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.base.Suppliers$ThreadSafeSupplier": {
        "com.google.common.base.Suppliers$ThreadSafeSupplier:get()": "/**\n* Retrieves an object from the delegate in a thread-safe manner.\n* @return the object of type T from the delegate\n*/",
        "com.google.common.base.Suppliers$ThreadSafeSupplier:toString()": "/**\n* Returns a string representation of the synchronized supplier.\n* @return string describing the synchronized supplier\n*/",
        "com.google.common.base.Suppliers$ThreadSafeSupplier:<init>(com.google.common.base.Supplier)": "/**\n* Initializes ThreadSafeSupplier with a non-null delegate.\n* @param delegate the Supplier<T> to be used\n*/"
    },
    "com.google.common.base.Suppliers": {
        "com.google.common.base.Suppliers:<init>()": "/**\n* Private constructor to prevent instantiation of the Suppliers class.\n*/",
        "com.google.common.base.Suppliers:memoizeWithExpiration(com.google.common.base.Supplier,long,java.util.concurrent.TimeUnit)": "/**\n* Creates a memoized supplier with expiration.\n* @param delegate the original supplier\n* @param duration expiration time length\n* @param unit time unit for the duration\n* @return Supplier that caches results until expiration\n*/",
        "com.google.common.base.Suppliers:ofInstance(java.lang.Object)": "/**\n* Creates a Supplier for the given instance.\n* @param instance the instance to supply\n* @return Supplier of the provided instance\n*/",
        "com.google.common.base.Suppliers:memoize(com.google.common.base.Supplier)": "/**\n* Memoizes a Supplier to cache its results.\n* @param delegate the Supplier to be memoized\n* @return a memoized Supplier wrapping the delegate\n*/",
        "com.google.common.base.Suppliers:compose(com.google.common.base.Function,com.google.common.base.Supplier)": "/**\n* Composes a supplier with a transformation function.\n* @param function transformation function; @param supplier provides input value\n* @return Supplier that applies the function to the supplier's value\n*/",
        "com.google.common.base.Suppliers:synchronizedSupplier(com.google.common.base.Supplier)": "/**\n* Creates a thread-safe Supplier from the given delegate.\n* @param delegate the Supplier to wrap\n* @return a synchronized Supplier instance\n*/"
    },
    "com.google.common.base.Throwables": {
        "com.google.common.base.Throwables:<init>()": "/**\n* Private constructor to prevent instantiation of the Throwables class.\n*/",
        "com.google.common.base.Throwables:getRootCause(java.lang.Throwable)": "/**\n* Retrieves the root cause of a throwable.\n* @param throwable the throwable to inspect\n* @return the deepest cause or the original throwable if none found\n*/",
        "com.google.common.base.Throwables:getCauseAs(java.lang.Throwable,java.lang.Class)": "/**\n* Retrieves the cause of a Throwable as the specified type.\n* @param throwable the Throwable to inspect\n* @param expectedCauseType the expected cause's class type\n* @return cause of the specified type or null if not present\n*/",
        "com.google.common.base.Throwables:getStackTraceAsString(java.lang.Throwable)": "/**\n* Converts a Throwable's stack trace to a string.\n* @param throwable the exception to convert\n* @return stack trace as a string\n*/",
        "com.google.common.base.Throwables:lazyStackTraceIsLazy()": "/**\n* Checks if stack trace methods are available.\n* @return true if methods are not null, false otherwise\n*/",
        "com.google.common.base.Throwables:getGetMethod()": "/**\n* Retrieves the 'getStackTraceElement' method from Throwable class.\n* @return Method object or null if not found\n*/",
        "com.google.common.base.Throwables:getSizeMethod(java.lang.Object)": "/**\n* Retrieves the 'getStackTraceDepth' method from Throwable.\n* @param jla the object to invoke the method on\n* @return Method object or null if not found or invocation fails\n*/",
        "com.google.common.base.Throwables:throwIfInstanceOf(java.lang.Throwable,java.lang.Class)": "/**\n* Throws the throwable if it's an instance of the declared type.\n* @param throwable the Throwable to check\n* @param declaredType the Class type to compare against\n* @throws X if throwable is an instance of declaredType\n*/",
        "com.google.common.base.Throwables:throwIfUnchecked(java.lang.Throwable)": "/**\n* Throws the given unchecked throwable if it's a RuntimeException or Error.\n* @param throwable the Throwable to check and potentially throw\n*/",
        "com.google.common.base.Throwables:getCausalChain(java.lang.Throwable)": "/**\n* Retrieves the causal chain of exceptions.\n* @param throwable the root Throwable to analyze\n* @return unmodifiable list of Throwable causes\n*/",
        "com.google.common.base.Throwables:jlaStackTrace(java.lang.Throwable)": "/**** Returns a list of stack trace elements for a given throwable. \n* @param t the throwable to extract stack trace from \n* @return List of StackTraceElement objects \n*/",
        "com.google.common.base.Throwables:propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)": "/**\n* Throws throwable if it's an instance of declaredType.\n* @param throwable the Throwable to check\n* @param declaredType the Class type to compare against\n*/",
        "com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable)": "/**\n* Throws the given throwable if it's not null.\n* @param throwable the Throwable to potentially throw\n*/",
        "com.google.common.base.Throwables:propagate(java.lang.Throwable)": "/**\n* Propagates a Throwable as a RuntimeException.\n* @param throwable the Throwable to propagate\n* @return always throws RuntimeException\n*/",
        "com.google.common.base.Throwables:lazyStackTrace(java.lang.Throwable)": "/**\n* Returns stack trace elements based on laziness check.\n* @param throwable the throwable to extract stack trace from\n* @return List of StackTraceElement objects\n*/",
        "com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable,java.lang.Class)": "/**\n* Propagates throwable if it's an instance of declaredType or not null.\n* @param throwable the Throwable to check and potentially throw\n* @param declaredType the Class type for instance checking\n*/",
        "com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable,java.lang.Class,java.lang.Class)": "/**\n* Propagates throwable if it's an instance of declared types.\n* @param throwable the Throwable to check\n* @param declaredType1 first type for instance checking\n* @param declaredType2 second type for instance checking\n*/"
    },
    "com.google.common.base.Ticker$1": {
        "com.google.common.base.Ticker$1:read()": "/**\n* Reads data and returns the number of bytes read.\n* @return number of bytes read as a long value\n*/",
        "com.google.common.base.Ticker$1:<init>()": "/**\n* Constructs a new Ticker instance.\n*/"
    },
    "com.google.common.base.Utf8": {
        "com.google.common.base.Utf8:unpairedSurrogateMsg(int)": "/**\n* Generates a message for unpaired surrogate at specified index.\n* @param i index of the unpaired surrogate\n* @return formatted message string\n*/",
        "com.google.common.base.Utf8:isWellFormedSlowPath(byte[],int,int)": "/**\n* Validates UTF-8 byte sequence in the specified range.\n* @param bytes array of bytes to check\n* @param off starting index for validation\n* @param end ending index for validation\n* @return true if well-formed, false otherwise\n*/",
        "com.google.common.base.Utf8:<init>()": "/**\n* Private constructor to prevent instantiation of the Utf8 class.\n*/",
        "com.google.common.base.Utf8:encodedLengthGeneral(java.lang.CharSequence,int)": "/**\n* Calculates the UTF-8 encoded length of a CharSequence from a given start index.\n* @param sequence the character sequence to encode\n* @param start the starting index for encoding\n* @return the UTF-8 length in bytes\n*/",
        "com.google.common.base.Utf8:encodedLength(java.lang.CharSequence)": "/**\n* Calculates the UTF-8 encoded length of a CharSequence.\n* @param sequence the character sequence to encode\n* @return the UTF-8 length in bytes\n*/",
        "com.google.common.base.Utf8:isWellFormed(byte[],int,int)": "/**\n* Checks if the byte array is well-formed UTF-8.\n* @param bytes byte array to validate\n* @param off starting index for validation\n* @param len length of the section to check\n* @return true if well-formed, false otherwise\n*/",
        "com.google.common.base.Utf8:isWellFormed(byte[])": "/**\n* Validates if the entire byte array is well-formed UTF-8.\n* @param bytes byte array to validate\n* @return true if well-formed, false otherwise\n*/"
    },
    "com.google.common.base.VerifyException": {
        "com.google.common.base.VerifyException:<init>()": "/**\n* Constructs a new VerifyException with no detail message.\n*/",
        "com.google.common.base.VerifyException:<init>(java.lang.String)": "/**\n* Constructs a VerifyException with an optional message.\n* @param message detailed error message or null\n*/",
        "com.google.common.base.VerifyException:<init>(java.lang.Throwable)": "/**\n* Constructs a VerifyException with an optional cause.\n* @param cause the throwable that caused this exception, may be null\n*/",
        "com.google.common.base.VerifyException:<init>(java.lang.String,java.lang.Throwable)": "/**\n* Constructs a VerifyException with a message and cause.\n* @param message error message, can be null\n* @param cause underlying cause of the exception, can be null\n*/"
    },
    "com.google.common.base.Verify": {
        "com.google.common.base.Verify:verifyNotNull(java.lang.Object)": "/**\n* Verifies that the reference is not null.\n* @param reference the object to check for null\n* @return the non-null reference\n*/",
        "com.google.common.base.Verify:<init>()": "/**\n* Private constructor for the Verify class to prevent instantiation.\n*/",
        "com.google.common.base.Verify:verify(boolean)": "/**\n* Validates an expression; throws VerifyException if false.\n* @param expression condition to verify\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,char)": "/**\n* Verifies an expression; throws VerifyException if false.\n* @param expression condition to verify\n* @param errorMessageTemplate template for error message\n* @param p1 parameter for error message formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,int)": "/**\n* Verifies an expression and throws an exception with a formatted message if false.\n* @param expression condition to verify\n* @param errorMessageTemplate template for the error message\n* @param p1 parameter for message formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,long)": "/**\n* Verifies an expression; throws VerifyException if false with formatted error message.\n* @param expression boolean condition to verify\n* @param errorMessageTemplate template for error message\n* @param p1 parameter for message formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object)": "/**\n* Validates an expression; throws VerifyException with formatted message if false.\n* @param expression condition to verify\n* @param errorMessageTemplate template for error message\n* @param errorMessageArgs arguments for formatting the message\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,char,char)": "/**\n* Verifies an expression; throws VerifyException with a formatted message if false.\n* @param expression condition to verify\n* @param errorMessageTemplate template for error message\n* @param p1 first parameter for message formatting\n* @param p2 second parameter for message formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,int,char)": "/**\n* Validates an expression and throws an exception with a formatted message if false.\n* @param expression condition to verify\n* @param errorMessageTemplate template for the error message\n* @param p1 first parameter for formatting\n* @param p2 second parameter for formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,long,char)": "/**\n* Validates an expression; throws VerifyException with formatted message if false.\n* @param expression condition to verify\n* @param errorMessageTemplate template for error message\n* @param p1 parameter for message formatting\n* @param p2 parameter for message formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,char)": "/**\n* Validates an expression; throws VerifyException with formatted message if false.\n* @param expression condition to verify\n* @param errorMessageTemplate template for error message\n* @param p1 optional parameter for message formatting\n* @param p2 additional parameter for message formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,char,int)": "/**\n* Verifies an expression; throws VerifyException with formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for error message\n* @param p1 character for message formatting\n* @param p2 integer for message formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,int,int)": "/**\n* Verifies an expression; throws VerifyException if false with formatted error message.\n* @param expression condition to check\n* @param errorMessageTemplate template for error message\n* @param p1 first parameter for formatting\n* @param p2 second parameter for formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,long,int)": "/**\n* Verifies an expression; throws VerifyException with formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate message template for error\n* @param p1 first parameter for message formatting\n* @param p2 second parameter for message formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,int)": "/**\n* Validates an expression and throws an exception if false.\n* @param expression condition to verify\n* @param errorMessageTemplate template for error message\n* @param p1 optional parameter for message formatting\n* @param p2 additional parameter for message formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,char,long)": "/**\n* Verifies an expression; throws VerifyException if false with formatted error message.\n* @param expression condition to verify\n* @param errorMessageTemplate template for error message\n* @param p1 first parameter for message formatting\n* @param p2 second parameter for message formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,int,long)": "/**\n* Verifies an expression and throws an exception with a formatted error message if false.\n* @param expression condition to evaluate\n* @param errorMessageTemplate template for the error message\n* @param p1 integer parameter for message formatting\n* @param p2 long parameter for message formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,long,long)": "/**\n* Verifies an expression; throws VerifyException if false with formatted error message.\n* @param expression condition to verify\n* @param errorMessageTemplate template for the error message\n* @param p1 first parameter for message formatting\n* @param p2 second parameter for message formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,long)": "/**\n* Validates an expression; throws VerifyException with formatted message if false.\n* @param expression condition to verify\n* @param errorMessageTemplate template for error message\n* @param p1 additional parameter for message formatting\n* @param p2 another parameter for message formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,char,java.lang.Object)": "/**\n* Validates an expression and throws VerifyException with a formatted message if false.\n* @param expression condition to verify\n* @param errorMessageTemplate template for the error message\n* @param p1 first parameter for message formatting\n* @param p2 second parameter for message formatting, can be null\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,int,java.lang.Object)": "/**\n* Verifies an expression; throws VerifyException with formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate template for error message\n* @param p1 value to format in the message\n* @param p2 optional object for message formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,long,java.lang.Object)": "/**\n* Validates an expression; throws VerifyException with formatted message if false.\n* @param expression condition to verify\n* @param errorMessageTemplate template for error message\n* @param p1 parameter for formatting message\n* @param p2 optional parameter for formatting message\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object)": "/**\n* Verifies an expression; throws VerifyException if false with formatted error message.\n* @param expression condition to verify\n* @param errorMessageTemplate template for error message\n* @param p1 optional parameter for message formatting\n* @param p2 optional parameter for message formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Verifies an expression; throws VerifyException with formatted message if false.\n* @param expression condition to verify\n* @param errorMessageTemplate template for error message\n* @param p1 optional parameter for message formatting\n* @param p2 optional parameter for message formatting\n* @param p3 optional parameter for message formatting\n*/",
        "com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Verifies an expression; throws VerifyException with formatted message if false.\n* @param expression condition to check\n* @param errorMessageTemplate message template for error\n* @param p1 optional parameter for message formatting\n* @param p2 optional parameter for message formatting\n* @param p3 optional parameter for message formatting\n* @param p4 optional parameter for message formatting\n*/"
    },
    "com.google.common.base.internal.Finalizer": {
        "com.google.common.base.internal.Finalizer:getFinalizeReferentMethod()": "/**\n* Retrieves the 'finalizeReferent' method from FinalizableReference class if available.\n* @return Method object or null if class is unavailable\n*/",
        "com.google.common.base.internal.Finalizer:getInheritableThreadLocalsField()": "/**\n* Retrieves the inheritableThreadLocals field from the Thread class.\n* @return Field object or null if access fails\n*/",
        "com.google.common.base.internal.Finalizer:getBigThreadConstructor()": "/**\n* Retrieves the constructor for Thread with specific parameters.\n* @return Constructor of Thread or null if not available\n*/",
        "com.google.common.base.internal.Finalizer:cleanUp(java.lang.ref.Reference)": "/**\n* Cleans up references using the finalize method.\n* @param firstReference the first reference to process\n* @return true if cleanup succeeded, false otherwise\n*/",
        "com.google.common.base.internal.Finalizer:run()": "/**\n* Continuously processes and cleans up items from the queue until cleanup fails.\n*/",
        "com.google.common.base.internal.Finalizer:<init>(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference)": "/**\n* Initializes a Finalizer with class reference and queue for cleanup tracking.\n* @param finalizableReferenceClass class to finalize\n* @param queue reference queue for cleanup\n* @param frqReference phantom reference for termination\n*/",
        "com.google.common.base.internal.Finalizer:startFinalizer(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference)": "/**\n* Starts a finalizer thread for the specified class and reference queue.\n* @param finalizableReferenceClass class to finalize\n* @param queue reference queue for cleanup\n* @param frqReference phantom reference for termination\n*/"
    },
    "com.google.common.cache.LongAddables": {
        "com.google.common.cache.LongAddables:create()": "/**\n* Creates and returns a new LongAddable instance.\n* @return LongAddable object for concurrent long addition\n*/"
    },
    "com.google.common.cache.AbstractCache$SimpleStatsCounter": {
        "com.google.common.cache.AbstractCache$SimpleStatsCounter:recordHits(int)": "/**\n* Records the number of hits.\n* @param count number of hits to be recorded\n*/",
        "com.google.common.cache.AbstractCache$SimpleStatsCounter:recordMisses(int)": "/**\n* Records the number of misses.\n* @param count number of misses to record\n*/",
        "com.google.common.cache.AbstractCache$SimpleStatsCounter:recordLoadSuccess(long)": "/**\n* Records a successful load event with time.\n* @param loadTime duration of the load in milliseconds\n*/",
        "com.google.common.cache.AbstractCache$SimpleStatsCounter:recordLoadException(long)": "/**\n* Records a load exception with its load time.\n* @param loadTime duration of the load operation in milliseconds\n*/",
        "com.google.common.cache.AbstractCache$SimpleStatsCounter:recordEviction()": "/**\n* Increments the eviction count for tracking evictions.\n*/",
        "com.google.common.cache.AbstractCache$SimpleStatsCounter:negativeToMaxValue(long)": "/**\n* Returns the value or Long.MAX_VALUE if the value is negative.\n* @param value the input long value\n* @return the input value or Long.MAX_VALUE if negative\n*/",
        "com.google.common.cache.AbstractCache$SimpleStatsCounter:<init>()": "/**\n* Constructs a SimpleStatsCounter instance.\n*/",
        "com.google.common.cache.AbstractCache$SimpleStatsCounter:incrementBy(com.google.common.cache.AbstractCache$StatsCounter)": "/**\n* Increments stats by values from another StatsCounter.\n* @param other StatsCounter to aggregate statistics from\n*/",
        "com.google.common.cache.AbstractCache$SimpleStatsCounter:snapshot()": "/**\n* Creates a snapshot of cache statistics.\n* @return CacheStats object with current cache metrics\n*/"
    },
    "com.google.common.cache.CacheStats": {
        "com.google.common.cache.CacheStats:hitCount()": "/**\n* Retrieves the current hit count.\n* @return long representing the number of hits\n*/",
        "com.google.common.cache.CacheStats:missCount()": "/**\n* Returns the current miss count.\n* @return the number of misses recorded\n*/",
        "com.google.common.cache.CacheStats:loadSuccessCount()": "/**\n* Retrieves the current success count.\n* @return long representing the success count\n*/",
        "com.google.common.cache.CacheStats:loadExceptionCount()": "/**\n* Retrieves the count of loaded exceptions.\n* @return long representing the exception count\n*/",
        "com.google.common.cache.CacheStats:totalLoadTime()": "/**\n* Returns the total load time in milliseconds.\n* @return total load time as a long value\n*/",
        "com.google.common.cache.CacheStats:evictionCount()": "/**\n* Returns the current number of eviction occurrences.\n* @return long representing the eviction count\n*/",
        "com.google.common.cache.CacheStats:hashCode()": "/**\n* Computes hash code for cache statistics based on multiple counts.\n* @return hash code as an integer\n*/",
        "com.google.common.cache.CacheStats:<init>(long,long,long,long,long,long)": "/**\n* Initializes CacheStats with counts and total load time.\n* @param hitCount total cache hits\n* @param missCount total cache misses\n* @param loadSuccessCount successful load operations\n* @param loadExceptionCount failed load operations\n* @param totalLoadTime total time spent loading\n* @param evictionCount total evictions from cache\n*/",
        "com.google.common.cache.CacheStats:requestCount()": "/**\n* Calculates total request count by adding hits and misses.\n* @return total requests as a long value\n*/",
        "com.google.common.cache.CacheStats:loadCount()": "/**\n* Computes total load count by summing success and exception counts.\n* @return total load count as a long value\n*/",
        "com.google.common.cache.CacheStats:loadExceptionRate()": "/**\n* Calculates the rate of load exceptions.\n* @return exception rate as a double, or 0.0 if total load count is zero\n*/",
        "com.google.common.cache.CacheStats:averageLoadPenalty()": "/**\n* Calculates the average load penalty.\n* @return average load penalty as a double; returns 0.0 if total load count is zero\n*/",
        "com.google.common.cache.CacheStats:minus(com.google.common.cache.CacheStats)": "/**\n* Subtracts stats from another CacheStats object, ensuring non-negative results.\n* @param other CacheStats to subtract from this instance\n* @return new CacheStats with adjusted values\n*/",
        "com.google.common.cache.CacheStats:plus(com.google.common.cache.CacheStats)": "/**\n* Combines two CacheStats objects using saturated addition.\n* @param other CacheStats to combine with\n* @return new CacheStats with summed values\n*/",
        "com.google.common.cache.CacheStats:hitRate()": "/**\n* Calculates the hit rate as a ratio of hits to total requests.\n* @return hit rate as a double, 1.0 if no requests\n*/",
        "com.google.common.cache.CacheStats:missRate()": "/**\n* Calculates the miss rate as a percentage of total requests.\n* @return miss rate as a double, or 0.0 if no requests\n*/",
        "com.google.common.cache.CacheStats:toString()": "/**\n* Returns a string summary of load statistics including counts and times.\n* @return formatted string with various load metrics\n*/"
    },
    "com.google.common.cache.AbstractCache": {
        "com.google.common.cache.AbstractCache:<init>()": "/**\n* Protected constructor for AbstractCache class.\n*/",
        "com.google.common.cache.AbstractCache:get(java.lang.Object,java.util.concurrent.Callable)": "/**\n* Retrieves a value by key using a loader, but not supported in this implementation.\n* @param key the key to look up\n* @param valueLoader callable to load the value if not present\n* @throws ExecutionException if value loading fails\n*/",
        "com.google.common.cache.AbstractCache:put(java.lang.Object,java.lang.Object)": "/**\n* Throws UnsupportedOperationException for put operation.\n* @param key the key to associate with the value\n* @param value the value to be stored\n*/",
        "com.google.common.cache.AbstractCache:size()": "/**\n* Returns the size of the collection.\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.cache.AbstractCache:invalidate(java.lang.Object)": "/**\n* Invalidates the entry associated with the given key.\n* @param key the key of the entry to invalidate\n*/",
        "com.google.common.cache.AbstractCache:invalidateAll()": "/**\n* Invalidates all entries; operation is unsupported.\n*/",
        "com.google.common.cache.AbstractCache:stats()": "/**\n* Throws UnsupportedOperationException when stats() is called.\n* @throws UnsupportedOperationException if invoked\n*/",
        "com.google.common.cache.AbstractCache:asMap()": "/**\n* Returns a concurrent map view; always throws UnsupportedOperationException.\n* @return UnsupportedOperationException\n*/",
        "com.google.common.cache.AbstractCache:cleanUp()": "/**\n* Cleans up resources or performs finalization tasks.\n*/",
        "com.google.common.cache.AbstractCache:putAll(java.util.Map)": "/**\n* Inserts all key-value pairs from the provided map.\n* @param m map containing key-value pairs to insert\n*/",
        "com.google.common.cache.AbstractCache:invalidateAll(java.lang.Iterable)": "/**\n* Invalidates all entries associated with the given keys.\n* @param keys iterable collection of keys to invalidate\n*/",
        "com.google.common.cache.AbstractCache:getAllPresent(java.lang.Iterable)": "/**\n* Retrieves values for all present keys in an iterable.\n* @param keys collection of keys to look up\n* @return ImmutableMap of found key-value pairs\n*/"
    },
    "com.google.common.collect.Maps": {
        "com.google.common.collect.Maps:newLinkedHashMap()": "/**\n* Creates a new empty LinkedHashMap instance.\n* @return a new LinkedHashMap with no entries\n*/",
        "com.google.common.collect.Maps:immutableEntry(java.lang.Object,java.lang.Object)": "/**\n* Creates an immutable entry with the specified key and value.\n* @param key the entry key, can be null\n* @param value the entry value, can be null\n* @return an immutable Entry containing the key and value\n*/",
        "com.google.common.collect.Maps:keyIterator(java.util.Iterator)": "/**\n* Returns an iterator for keys from the given entry iterator.\n* @param entryIterator iterator of key-value entries\n* @return Iterator of keys\n*/",
        "com.google.common.collect.Maps:valueIterator(java.util.Iterator)": "/**\n* Returns an iterator for values from the given entry iterator.\n* @param entryIterator iterator of key-value entries\n* @return Iterator of values from the entries\n*/",
        "com.google.common.collect.Maps:keyOrNull(java.util.Map$Entry)": "/**\n* Returns the key from the entry or null if the entry is null.\n* @param entry the entry from which to retrieve the key\n* @return the key or null if entry is null\n*/",
        "com.google.common.collect.Maps:newHashMap()": "/**\n* Creates a new empty HashMap instance.\n* @return a new HashMap with no elements\n*/",
        "com.google.common.collect.Maps:putAllImpl(java.util.Map,java.util.Map)": "/**\n* Copies all entries from the provided map to the target map.\n* @param self target map to populate\n* @param map source map with entries to copy\n*/",
        "com.google.common.collect.Maps:equalsImpl(java.util.Map,java.lang.Object)": "/**\n* Compares a map with another object for equality.\n* @param map the map to compare\n* @param object the object to compare with, may be null\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Maps:valueOrNull(java.util.Map$Entry)": "/**\n* Returns the value from the entry or null if the entry is null.\n* @param entry the entry to extract the value from\n* @return the value or null if entry is null\n*/",
        "com.google.common.collect.Maps:valueFunction()": "/**\n* Returns a function to extract values from map entries.\n* @return Function to retrieve values from Entry objects\n*/",
        "com.google.common.collect.Maps:unmodifiableEntryIterator(java.util.Iterator)": "/**\n* Returns an unmodifiable iterator for the given entry iterator.\n* @param entryIterator an iterator of key-value entries\n* @return UnmodifiableIterator of Entry<K, V>\n*/",
        "com.google.common.collect.Maps:asMapEntryIterator(java.util.Set,com.google.common.base.Function)": "/**\n* Converts a set to an iterator of map entries using a transformation function.\n* @param set the input set of keys\n* @param function the function to transform keys to values\n* @return an iterator of map entries (key-value pairs)\n*/",
        "com.google.common.collect.Maps:<init>()": "/**\n* Private constructor to prevent instantiation of the Maps class.\n*/",
        "com.google.common.collect.Maps:newHashMap(java.util.Map)": "/**\n* Creates a new HashMap from the provided map.\n* @param map source map to copy elements from\n* @return a new HashMap containing the copied entries\n*/",
        "com.google.common.collect.Maps:newLinkedHashMap(java.util.Map)": "/**\n* Creates a new LinkedHashMap from the given map.\n* @param map source map to copy entries from\n* @return a new LinkedHashMap containing the same entries\n*/",
        "com.google.common.collect.Maps:newConcurrentMap()": "/**\n* Creates a new empty ConcurrentMap instance.\n* @return a new ConcurrentHashMap\n*/",
        "com.google.common.collect.Maps:newTreeMap()": "/**\n* Creates a new empty TreeMap instance.\n* @param <K> key type extending Comparable\n* @param <V> value type, can be nullable\n* @return a new TreeMap object\n*/",
        "com.google.common.collect.Maps:newTreeMap(java.util.SortedMap)": "/**\n* Creates a new TreeMap from a given sorted map.\n* @param map the sorted map to copy elements from\n* @return a new TreeMap containing the elements of the sorted map\n*/",
        "com.google.common.collect.Maps:newTreeMap(java.util.Comparator)": "/**\n* Creates a new TreeMap with an optional comparator.\n* @param comparator optional comparator for sorting keys\n* @return a new TreeMap instance\n*/",
        "com.google.common.collect.Maps:newEnumMap(java.util.Map)": "/**\n* Creates a new EnumMap from the provided map.\n* @param map a map with enum keys and values\n* @return an EnumMap containing the same entries\n*/",
        "com.google.common.collect.Maps:newIdentityHashMap()": "/**\n* Creates a new instance of IdentityHashMap.\n* @return a new IdentityHashMap with no elements\n*/",
        "com.google.common.collect.Maps:unmodifiableMap(java.util.Map)": "/**\n* Returns an unmodifiable view of the specified map.\n* @param map the map to be wrapped\n* @return an unmodifiable Map instance\n*/",
        "com.google.common.collect.Maps:removeOnlySet(java.util.Set)": "/**\n* Returns a read-only view of the given set.\n* @param set the original set to wrap\n* @return a set that disallows modifications\n*/",
        "com.google.common.collect.Maps:removeOnlySortedSet(java.util.SortedSet)": "/**\n* Returns a sorted set that disallows adding elements.\n* @param set the original sorted set to wrap\n* @return a new sorted set with restricted add operations\n*/",
        "com.google.common.collect.Maps:removeOnlyNavigableSet(java.util.NavigableSet)": "/**\n* Returns a NavigableSet that disallows adding elements.\n* @param set the original NavigableSet to wrap\n* @return a new NavigableSet that prevents modifications\n*/",
        "com.google.common.collect.Maps:keyFunction()": "/**\n* Returns a function to extract keys from map entries.\n* @return a Function that retrieves keys from Entry objects\n*/",
        "com.google.common.collect.Maps:newEnumMap(java.lang.Class)": "/**\n* Creates a new EnumMap for the specified enum type.\n* @param type the class of the enum keys\n* @return a new EnumMap instance\n*/",
        "com.google.common.collect.Maps:unmodifiableEntry(java.util.Map$Entry)": "/**\n* Returns an unmodifiable view of the given entry.\n* @param entry the entry to wrap\n* @return an unmodifiable Entry object\n*/",
        "com.google.common.collect.Maps:transformEntry(com.google.common.collect.Maps$EntryTransformer,java.util.Map$Entry)": "/**\n* Transforms an entry using a provided transformer.\n* @param transformer function to transform the entry\n* @param entry the entry to be transformed\n* @return a new transformed entry\n*/",
        "com.google.common.collect.Maps:asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer)": "/**\n* Converts an EntryTransformer to a Function for Entry transformation.\n* @param transformer the transformer to apply on each Entry\n* @return a Function that transforms Entries using the provided transformer\n*/",
        "com.google.common.collect.Maps:safeGet(java.util.Map,java.lang.Object)": "/**\n* Safely retrieves a value from a map by key, returning null on exceptions.\n* @param map the map to retrieve from\n* @param key the key whose associated value is to be returned\n* @return the value associated with the key or null if not found or an exception occurs\n*/",
        "com.google.common.collect.Maps:safeContainsKey(java.util.Map,java.lang.Object)": "/**\n* Safely checks if a map contains a key, handling exceptions gracefully.\n* @param map the map to search in\n* @param key the key to check for\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.Maps:safeRemove(java.util.Map,java.lang.Object)": "/**\n* Safely removes a key from the map, returning null on failure.\n* @param map the map to modify; @param key the key to remove\n* @return the removed value or null if an error occurs\n*/",
        "com.google.common.collect.Maps:capacity(int)": "/**\n* Computes the capacity based on expected size for collection initialization.\n* @param expectedSize desired size of the collection\n* @return calculated capacity as an integer\n*/",
        "com.google.common.collect.Maps:orNaturalOrder(java.util.Comparator)": "/**\n* Returns the provided comparator or natural ordering if null.\n* @param comparator optional custom comparator\n* @return Comparator instance for type E\n*/",
        "com.google.common.collect.Maps:containsKeyImpl(java.util.Map,java.lang.Object)": "/**\n* Checks if the map contains the specified key.\n* @param map the map to search\n* @param key the key to find, can be null\n* @return true if the key is found, otherwise false\n*/",
        "com.google.common.collect.Maps:containsValueImpl(java.util.Map,java.lang.Object)": "/**\n* Checks if the map contains the specified value.\n* @param map the map to search in\n* @param value the value to find, can be null\n* @return true if the value is found, otherwise false\n*/",
        "com.google.common.collect.Maps:valuePredicateOnEntries(com.google.common.base.Predicate)": "/**\n* Creates a predicate for map entries based on a value predicate.\n* @param valuePredicate predicate for value filtering\n* @return Predicate for Entry objects with filtered values\n*/",
        "com.google.common.collect.Maps:synchronizedBiMap(com.google.common.collect.BiMap)": "/**\n* Returns a synchronized view of the provided BiMap.\n* @param bimap the BiMap to synchronize\n* @return synchronized BiMap\n*/",
        "com.google.common.collect.Maps:keyPredicateOnEntries(com.google.common.base.Predicate)": "/**\n* Creates a predicate for filtering map entries by their keys.\n* @param keyPredicate predicate to test keys\n* @return Predicate<Entry<K, ?>> for filtering entries\n*/",
        "com.google.common.collect.Maps:asMap(java.util.Set,com.google.common.base.Function)": "/**\n* Converts a set to a map using a provided mapping function.\n* @param set non-null set of keys\n* @param function non-null function to map keys to values\n* @return Map with keys from the set and values from the function\n*/",
        "com.google.common.collect.Maps:asMap(java.util.NavigableSet,com.google.common.base.Function)": "/**\n* Converts a NavigableSet to a NavigableMap using a mapping function.\n* @param set the NavigableSet of keys\n* @param function the function to map keys to values\n* @return a NavigableMap view of the provided set\n*/",
        "com.google.common.collect.Maps:transformEntries(java.util.Map,com.google.common.collect.Maps$EntryTransformer)": "/**\n* Transforms entries of a map using a specified transformer.\n* @param fromMap source map to transform entries from\n* @param transformer function to transform entries\n* @return a new map with transformed entries\n*/",
        "com.google.common.collect.Maps:unmodifiableOrNull(java.util.Map$Entry)": "/**\n* Returns an unmodifiable entry or null if the input entry is null.\n* @param entry the entry to wrap\n* @return unmodifiable Entry object or null\n*/",
        "com.google.common.collect.Maps:containsEntryImpl(java.util.Collection,java.lang.Object)": "/**\n* Checks if a collection contains a specific entry.\n* @param c collection of entries\n* @param o object to check for presence as an entry\n* @return true if entry is found, false otherwise\n*/",
        "com.google.common.collect.Maps:removeEntryImpl(java.util.Collection,java.lang.Object)": "/**\n* Removes an entry from the collection if it matches the provided object.\n* @param c collection of entries\n* @param o object to remove, must be an Entry\n* @return true if removed, false otherwise\n*/",
        "com.google.common.collect.Maps:toStringImpl(java.util.Map)": "/**\n* Converts a map to its string representation.\n* @param map the map to convert\n* @return string representation of the map\n*/",
        "com.google.common.collect.Maps:newHashMapWithExpectedSize(int)": "/**\n* Creates a HashMap with a specified initial capacity.\n* @param expectedSize desired size for the HashMap\n* @return a new HashMap instance\n*/",
        "com.google.common.collect.Maps:newLinkedHashMapWithExpectedSize(int)": "/**\n* Creates a LinkedHashMap with specified expected size.\n* @param expectedSize desired size of the map\n* @return LinkedHashMap initialized with calculated capacity\n*/",
        "com.google.common.collect.Maps:doDifference(java.util.Map,java.util.Map,com.google.common.base.Equivalence,java.util.Map,java.util.Map,java.util.Map,java.util.Map)": "/**\n* Compares two maps and categorizes their entries into different collections.\n* @param left map to compare from\n* @param right map to compare against\n* @param valueEquivalence checks value equivalence\n* @param onlyOnLeft entries only in left map\n* @param onlyOnRight entries only in right map\n* @param onBoth entries in both maps\n* @param differences entries with differing values\n*/",
        "com.google.common.collect.Maps:subMap(java.util.NavigableMap,com.google.common.collect.Range)": "/**\n* Returns a submap of the given range from the specified NavigableMap.\n* @param map the source NavigableMap\n* @param range the range defining the submap\n* @return a NavigableMap view of the specified range\n*/",
        "com.google.common.collect.Maps:asMap(java.util.SortedSet,com.google.common.base.Function)": "/**\n* Converts a sorted set to a sorted map using a mapping function.\n* @param set non-null sorted set of keys\n* @param function non-null function to map keys to values\n* @return SortedMap mapping keys to values\n*/",
        "com.google.common.collect.Maps:transformEntries(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)": "/**\n* Transforms entries of a sorted map using a specified transformer.\n* @param fromMap source sorted map to transform\n* @param transformer function to transform map entries\n* @return new sorted map with transformed entries\n*/",
        "com.google.common.collect.Maps:transformValues(java.util.Map,com.google.common.base.Function)": "/**\n* Transforms values of a map using a specified function.\n* @param fromMap source map to transform values from\n* @param function function to apply to each value\n* @return new map with transformed values\n*/",
        "com.google.common.collect.Maps:asConverter(com.google.common.collect.BiMap)": "/**\n* Converts a BiMap to a Converter.\n* @param bimap the BiMap to convert\n* @return a Converter for the given BiMap\n*/",
        "com.google.common.collect.Maps:unmodifiableBiMap(com.google.common.collect.BiMap)": "/**** Creates an unmodifiable BiMap from the provided BiMap. \n* @param bimap the original BiMap to wrap \n* @return UnmodifiableBiMap instance\n*/",
        "com.google.common.collect.Maps:difference(java.util.Map,java.util.Map,com.google.common.base.Equivalence)": "/**\n* Computes the difference between two maps.\n* @param left map to compare from\n* @param right map to compare against\n* @param valueEquivalence checks value equivalence\n* @return MapDifference object representing the differences\n*/",
        "com.google.common.collect.Maps:difference(java.util.SortedMap,java.util.Map)": "/**\n* Computes differences between two sorted maps.\n* @param left  the left sorted map\n* @param right the right map to compare against\n* @return SortedMapDifference object with categorized entries\n*/",
        "com.google.common.collect.Maps:transformEntries(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)": "/**\n* Transforms entries of a NavigableMap using a specified transformer.\n* @param fromMap source map to transform entries from\n* @param transformer function to transform entries\n* @return new NavigableMap with transformed entries\n*/",
        "com.google.common.collect.Maps:transformValues(java.util.SortedMap,com.google.common.base.Function)": "/**\n* Transforms values of a sorted map using a provided function.\n* @param fromMap source sorted map to transform\n* @param function function to apply to map values\n* @return new sorted map with transformed values\n*/",
        "com.google.common.collect.Maps:unmodifiableEntrySet(java.util.Set)": "/**\n* Returns an unmodifiable view of the provided entry set.\n* @param entrySet the set of entries to wrap\n* @return unmodifiable set of entries\n*/",
        "com.google.common.collect.Maps:unmodifiableNavigableMap(java.util.NavigableMap)": "/**\n* Returns an unmodifiable view of the given navigable map.\n* @param map the navigable map to wrap\n* @return unmodifiable NavigableMap instance\n*/",
        "com.google.common.collect.Maps:difference(java.util.Map,java.util.Map)": "/**\n* Computes the difference between two maps.\n* @param left  map to compare from\n* @param right map to compare against\n* @return MapDifference object representing the differences\n*/",
        "com.google.common.collect.Maps:transformValues(java.util.NavigableMap,com.google.common.base.Function)": "/**\n* Transforms values of a NavigableMap using a provided function.\n* @param fromMap source map to transform values from\n* @param function function to transform values\n* @return new NavigableMap with transformed values\n*/",
        "com.google.common.collect.Maps:immutableEnumMap(java.util.Map)": "/**\n* Converts a mutable Map to an ImmutableMap, validating entries for null values.\n* @param map the mutable Map to convert\n* @return an ImmutableMap representation of the input Map\n*/",
        "com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$AbstractFilteredMap,com.google.common.base.Predicate)": "/**\n* Filters entries in a map based on a given predicate.\n* @param map the original filtered map\n* @param entryPredicate the condition to filter entries\n* @return a new filtered map with entries that match the predicate\n*/",
        "com.google.common.collect.Maps:synchronizedNavigableMap(java.util.NavigableMap)": "/**\n* Returns a synchronized NavigableMap from the given map.\n* @param navigableMap the map to synchronize\n* @return synchronized NavigableMap instance\n*/",
        "com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntryNavigableMap,com.google.common.base.Predicate)": "/**\n* Filters a NavigableMap based on a given entry predicate.\n* @param map the original filtered entry navigable map\n* @param entryPredicate condition to filter entries\n* @return a new filtered NavigableMap\n*/",
        "com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntrySortedMap,com.google.common.base.Predicate)": "/**\n* Filters entries in a sorted map based on a predicate.\n* @param map the original filtered entry sorted map\n* @param entryPredicate condition to filter entries\n* @return new SortedMap with filtered entries\n*/",
        "com.google.common.collect.Maps:filterKeys(java.util.Map,com.google.common.base.Predicate)": "/**\n* Filters keys in a map based on a given predicate.\n* @param unfiltered original map of entries\n* @param keyPredicate condition to filter keys\n* @return a new map with filtered keys\n*/",
        "com.google.common.collect.Maps:filterEntries(java.util.Map,com.google.common.base.Predicate)": "/**\n* Filters entries in a map based on a predicate.\n* @param unfiltered the original map\n* @param entryPredicate the condition to filter entries\n* @return a filtered map with matching entries\n*/",
        "com.google.common.collect.Maps:toImmutableEnumMap(java.util.function.Function,java.util.function.Function)": "/**\n* Creates an immutable EnumMap collector from key and value functions.\n* @param keyFunction extracts keys from elements\n* @param valueFunction extracts values from elements\n* @return Collector for building an ImmutableMap\n*/",
        "com.google.common.collect.Maps:toImmutableEnumMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)": "/**\n* Collects elements into an immutable EnumMap using key and value functions.\n* @param keyFunction extracts keys from elements\n* @param valueFunction extracts values from elements\n* @param mergeFunction merges values for duplicate keys\n* @return ImmutableMap of keys and values\n*/",
        "com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap,com.google.common.base.Predicate)": "/**\n* Filters a BiMap using a given entry predicate.\n* @param map the original filtered BiMap\n* @param entryPredicate condition to filter entries\n* @return a new FilteredEntryBiMap with combined predicates\n*/",
        "com.google.common.collect.Maps:filterEntries(java.util.NavigableMap,com.google.common.base.Predicate)": "/**\n* Filters entries of a NavigableMap based on a predicate.\n* @param unfiltered the original NavigableMap\n* @param entryPredicate condition to filter entries\n* @return a new filtered NavigableMap\n*/",
        "com.google.common.collect.Maps:filterEntries(java.util.SortedMap,com.google.common.base.Predicate)": "/**\n* Filters entries in a sorted map based on a predicate.\n* @param unfiltered the original sorted map\n* @param entryPredicate the condition to filter entries\n* @return a new SortedMap with filtered entries\n*/",
        "com.google.common.collect.Maps:filterValues(java.util.Map,com.google.common.base.Predicate)": "/**\n* Filters map entries by values using a given predicate.\n* @param unfiltered the original map\n* @param valuePredicate condition to filter values\n* @return a map with entries matching the value predicate\n*/",
        "com.google.common.collect.Maps:filterEntries(com.google.common.collect.BiMap,com.google.common.base.Predicate)": "/**\n* Filters entries in a BiMap based on the provided predicate.\n* @param unfiltered the original BiMap\n* @param entryPredicate the condition to filter entries\n* @return a new BiMap with filtered entries\n*/",
        "com.google.common.collect.Maps:filterKeys(java.util.NavigableMap,com.google.common.base.Predicate)": "/**\n* Filters keys of a NavigableMap based on a given predicate.\n* @param unfiltered the original NavigableMap\n* @param keyPredicate condition to filter keys\n* @return a new NavigableMap with filtered keys\n*/",
        "com.google.common.collect.Maps:filterValues(java.util.NavigableMap,com.google.common.base.Predicate)": "/**\n* Filters values of a NavigableMap based on a value predicate.\n* @param unfiltered the original NavigableMap\n* @param valuePredicate condition to filter values\n* @return a new filtered NavigableMap\n*/",
        "com.google.common.collect.Maps:filterKeys(java.util.SortedMap,com.google.common.base.Predicate)": "/**\n* Filters a sorted map by its keys using a provided predicate.\n* @param unfiltered the original sorted map\n* @param keyPredicate condition to filter keys\n* @return a new SortedMap with filtered keys\n*/",
        "com.google.common.collect.Maps:filterValues(java.util.SortedMap,com.google.common.base.Predicate)": "/**\n* Filters a sorted map by values using a specified predicate.\n* @param unfiltered the original sorted map\n* @param valuePredicate condition to filter values\n* @return a new SortedMap with filtered entries\n*/",
        "com.google.common.collect.Maps:uniqueIndex(java.util.Iterator,com.google.common.base.Function,com.google.common.collect.ImmutableMap$Builder)": "/**\n* Creates an ImmutableMap indexing values by keys generated from keyFunction.\n* @param values iterator of values to index\n* @param keyFunction function to generate keys from values\n* @param builder ImmutableMap builder instance\n* @return constructed ImmutableMap with unique keys\n*/",
        "com.google.common.collect.Maps:fromProperties(java.util.Properties)": "/**\n* Converts Properties to an ImmutableMap.\n* @param properties key-value pairs to convert\n* @return ImmutableMap of string entries from properties\n*/",
        "com.google.common.collect.Maps:indexMap(java.util.Collection)": "/**\n* Creates an ImmutableMap indexing elements by their position.\n* @param list collection of elements to index\n* @return ImmutableMap with elements as keys and their indices as values\n*/",
        "com.google.common.collect.Maps:toMap(java.util.Iterator,com.google.common.base.Function)": "/**\n* Converts keys to an ImmutableMap using a value function.\n* @param keys iterator of keys; @param valueFunction function to generate values\n* @return constructed ImmutableMap from keys and values\n*/",
        "com.google.common.collect.Maps:filterKeys(com.google.common.collect.BiMap,com.google.common.base.Predicate)": "/**\n* Filters keys in a BiMap based on a provided predicate.\n* @param unfiltered the original BiMap\n* @param keyPredicate condition to filter keys\n* @return a new BiMap with filtered keys\n*/",
        "com.google.common.collect.Maps:filterValues(com.google.common.collect.BiMap,com.google.common.base.Predicate)": "/**\n* Filters a BiMap by values using the provided predicate.\n* @param unfiltered the original BiMap\n* @param valuePredicate condition to filter values\n* @return a new BiMap with filtered entries\n*/",
        "com.google.common.collect.Maps:uniqueIndex(java.util.Iterator,com.google.common.base.Function)": "/**\n* Creates an ImmutableMap indexed by keys from values using a key function.\n* @param values iterator of values to index\n* @param keyFunction function to generate keys from values\n* @return constructed ImmutableMap with unique keys\n*/",
        "com.google.common.collect.Maps:toMap(java.lang.Iterable,com.google.common.base.Function)": "/**\n* Converts an Iterable of keys to an ImmutableMap using a value function.\n* @param keys iterable of keys; @param valueFunction function to generate values\n* @return constructed ImmutableMap from keys and values\n*/",
        "com.google.common.collect.Maps:uniqueIndex(java.lang.Iterable,com.google.common.base.Function)": "/**\n* Creates an ImmutableMap from values using a key function.\n* @param values iterable of values to index\n* @param keyFunction function to generate keys from values\n* @return constructed ImmutableMap with unique keys\n*/"
    },
    "com.google.common.util.concurrent.UncheckedExecutionException": {
        "com.google.common.util.concurrent.UncheckedExecutionException:<init>(java.lang.Throwable)": "/**\n* Constructs an UncheckedExecutionException with an optional cause.\n* @param cause the throwable that caused this exception, can be null\n*/",
        "com.google.common.util.concurrent.UncheckedExecutionException:<init>()": "/**\n* Constructor for UncheckedExecutionException, now deprecated.\n*/",
        "com.google.common.util.concurrent.UncheckedExecutionException:<init>(java.lang.String)": "/**\n* Constructs an UncheckedExecutionException with an optional message.\n* @param message optional detail message\n*/",
        "com.google.common.util.concurrent.UncheckedExecutionException:<init>(java.lang.String,java.lang.Throwable)": "/**\n* Constructs an UncheckedExecutionException with a message and cause.\n* @param message error message, may be null\n* @param cause the cause of the exception, may be null\n*/"
    },
    "com.google.common.cache.AbstractLoadingCache": {
        "com.google.common.cache.AbstractLoadingCache:refresh(java.lang.Object)": "/**\n* Throws UnsupportedOperationException for the refresh operation.\n* @param key the key to refresh (not supported)\n*/",
        "com.google.common.cache.AbstractLoadingCache:<init>()": "/**\n* Protected constructor for AbstractLoadingCache class.\n*/",
        "com.google.common.cache.AbstractLoadingCache:getUnchecked(java.lang.Object)": "/**\n* Retrieves value by key, throwing an unchecked exception on failure.\n* @param key the key to retrieve the value for\n* @return the value associated with the key\n*/",
        "com.google.common.cache.AbstractLoadingCache:apply(java.lang.Object)": "/**\n* Applies the function to the given key and retrieves the associated value.\n* @param key the key to retrieve the value for\n* @return value associated with the key\n*/",
        "com.google.common.cache.AbstractLoadingCache:getAll(java.lang.Iterable)": "/**\n* Retrieves values for specified keys and returns an immutable map.\n* @param keys iterable of keys to fetch values for\n* @return ImmutableMap containing key-value pairs\n*/"
    },
    "com.google.common.cache.CacheBuilder$1": {
        "com.google.common.cache.CacheBuilder$1:<init>()": "/**\n* Private constructor for CacheBuilder to prevent instantiation.\n*/"
    },
    "com.google.common.cache.CacheBuilder$2": {
        "com.google.common.cache.CacheBuilder$2:<init>()": "/**\n* Private constructor for CacheBuilder to prevent instantiation.\n*/"
    },
    "com.google.common.cache.CacheBuilder": {
        "com.google.common.cache.CacheBuilder:<init>()": "/**\n* Private constructor for CacheBuilder to prevent instantiation.\n*/",
        "com.google.common.cache.CacheBuilder:lenientParsing()": "/**\n* Enables lenient parsing for the cache builder.\n* @return the updated CacheBuilder instance\n*/",
        "com.google.common.cache.CacheBuilder:toNanosSaturated(java.time.Duration)": "/**\n* Converts Duration to nanoseconds, saturating on overflow.\n* @param duration the Duration to convert\n* @return nanoseconds as long, saturated at Long.MIN_VALUE or Long.MAX_VALUE\n*/",
        "com.google.common.cache.CacheBuilder:recordStats()": "/**\n* Enables statistics recording for the cache builder.\n* @return the CacheBuilder instance for method chaining\n*/",
        "com.google.common.cache.CacheBuilder:getConcurrencyLevel()": "/**\n* Returns the concurrency level, defaulting if unset.\n* @return current concurrency level or default value\n*/",
        "com.google.common.cache.CacheBuilder:getMaximumWeight()": "/**\n* Retrieves the maximum weight based on configuration settings.\n* @return maximum weight or 0 if expiration settings are not defined\n*/",
        "com.google.common.cache.CacheBuilder:getExpireAfterAccessNanos()": "/**\n* Returns expiration time in nanoseconds for access.\n* @return expiration time or default if unset\n*/",
        "com.google.common.cache.CacheBuilder:getExpireAfterWriteNanos()": "/**\n* Returns expiration time in nanoseconds after write.\n* @return expiration time or default if unset\n*/",
        "com.google.common.cache.CacheBuilder:getRefreshNanos()": "/**\n* Returns the refresh duration in nanoseconds.\n* @return refresh duration or default if unset\n*/",
        "com.google.common.cache.CacheBuilder:getStatsCounterSupplier()": "/**\n* Retrieves the supplier for StatsCounter instances.\n* @return Supplier of StatsCounter or its subclasses\n*/",
        "com.google.common.cache.CacheBuilder:getInitialCapacity()": "/**\n* Returns the initial capacity, defaulting if unset.\n* @return initial capacity value or default if unset\n*/",
        "com.google.common.cache.CacheBuilder:ticker(com.google.common.base.Ticker)": "/**\n* Sets the ticker for the cache builder.\n* @param ticker the Ticker instance to set\n* @return the current CacheBuilder instance\n*/",
        "com.google.common.cache.CacheBuilder:removalListener(com.google.common.cache.RemovalListener)": "/**\n* Sets a removal listener for the cache builder.\n* @param listener the listener to notify on removals\n* @return updated CacheBuilder instance\n*/",
        "com.google.common.cache.CacheBuilder:getWeigher()": "/**\n* Retrieves the Weigher instance or a default if null.\n* @return Weigher<K1, V1> instance or OneWeigher if weigher is null\n*/",
        "com.google.common.cache.CacheBuilder:getKeyStrength()": "/**\n* Retrieves the key strength, defaulting to STRONG if null.\n* @return Strength value indicating key strength\n*/",
        "com.google.common.cache.CacheBuilder:getValueStrength()": "/**\n* Retrieves the value strength, defaulting to STRONG if null.\n* @return Strength of the value or STRONG if valueStrength is null\n*/",
        "com.google.common.cache.CacheBuilder:getRemovalListener()": "/**\n* Retrieves the removal listener or a default instance if null.\n* @return RemovalListener of type K1, V1\n*/",
        "com.google.common.cache.CacheBuilder:checkNonLoadingCache()": "/**\n* Validates that the cache is not loading; throws exception if it is.\n*/",
        "com.google.common.cache.CacheBuilder:checkWeightWithWeigher()": "/**\n* Validates weight settings based on weigher presence and strict parsing mode.\n*/",
        "com.google.common.cache.CacheBuilder:initialCapacity(int)": "/**\n* Sets the initial capacity for the cache builder.\n* @param initialCapacity non-negative initial capacity value\n* @return CacheBuilder instance for method chaining\n*/",
        "com.google.common.cache.CacheBuilder:concurrencyLevel(int)": "/**\n* Sets the concurrency level for the cache builder.\n* @param concurrencyLevel positive integer for concurrency level\n* @return CacheBuilder instance for method chaining\n*/",
        "com.google.common.cache.CacheBuilder:maximumSize(long)": "/**\n* Sets the maximum size for the cache.\n* @param maximumSize the maximum number of entries; must be non-negative\n* @return the updated CacheBuilder instance\n*/",
        "com.google.common.cache.CacheBuilder:maximumWeight(long)": "/**\n* Sets the maximum weight for the cache.\n* @param maximumWeight non-negative weight limit\n* @return this CacheBuilder instance for chaining\n*/",
        "com.google.common.cache.CacheBuilder:weigher(com.google.common.cache.Weigher)": "/**\n* Sets the weigher for the cache builder.\n* @param weigher function to weigh cache entries\n* @return updated CacheBuilder instance\n*/",
        "com.google.common.cache.CacheBuilder:expireAfterWrite(long,java.util.concurrent.TimeUnit)": "/**\n* Sets expiration duration for cache entries.\n* @param duration time value for expiration\n* @param unit time unit of the duration\n* @return this CacheBuilder instance\n*/",
        "com.google.common.cache.CacheBuilder:expireAfterAccess(long,java.util.concurrent.TimeUnit)": "/**\n* Sets expiration time after access; validates duration and state.\n* @param duration time value for expiration\n* @param unit time unit for the duration\n* @return CacheBuilder instance for method chaining\n*/",
        "com.google.common.cache.CacheBuilder:refreshAfterWrite(long,java.util.concurrent.TimeUnit)": "/**\n* Sets the duration for refreshing cache entries after write.\n* @param duration positive duration value\n* @param unit time unit for the duration\n* @return updated CacheBuilder instance\n*/",
        "com.google.common.cache.CacheBuilder:keyEquivalence(com.google.common.base.Equivalence)": "/**\n* Sets the key equivalence for the cache builder.\n* @param equivalence the equivalence to set for keys\n* @return the updated CacheBuilder instance\n*/",
        "com.google.common.cache.CacheBuilder:valueEquivalence(com.google.common.base.Equivalence)": "/**\n* Sets the value equivalence for the cache.\n* @param equivalence the equivalence to set\n* @return the updated CacheBuilder instance\n*/",
        "com.google.common.cache.CacheBuilder:setKeyStrength(com.google.common.cache.LocalCache$Strength)": "/**** Sets the key strength for the cache. \n* @param strength the strength to be set for keys \n* @return the updated CacheBuilder instance \n*/",
        "com.google.common.cache.CacheBuilder:setValueStrength(com.google.common.cache.LocalCache$Strength)": "/**\n* Sets the value strength for the cache.\n* @param strength the strength to be set; cannot be null\n* @return the updated CacheBuilder instance\n*/",
        "com.google.common.cache.CacheBuilder:getTicker(boolean)": "/**\n* Retrieves the ticker, optionally recording time.\n* @param recordsTime flag to determine if system ticker is used\n* @return Ticker object or NULL_TICKER if not available\n*/",
        "com.google.common.cache.CacheBuilder:newBuilder()": "/**\n* Creates a new instance of CacheBuilder.\n* @return a new CacheBuilder object\n*/",
        "com.google.common.cache.CacheBuilder:getKeyEquivalence()": "/**\n* Retrieves key equivalence, defaulting to key strength's equivalence if null.\n* @return Equivalence object for key comparison\n*/",
        "com.google.common.cache.CacheBuilder:getValueEquivalence()": "/**\n* Retrieves value equivalence, defaulting if null.\n* @return Equivalence object or default equivalence if null\n*/",
        "com.google.common.cache.CacheBuilder:expireAfterWrite(java.time.Duration)": "/**\n* Sets cache entry expiration based on duration.\n* @param duration expiration duration\n* @return this CacheBuilder instance\n*/",
        "com.google.common.cache.CacheBuilder:expireAfterAccess(java.time.Duration)": "/**\n* Sets cache expiration time after access using specified duration.\n* @param duration time until expiration\n* @return CacheBuilder instance for method chaining\n*/",
        "com.google.common.cache.CacheBuilder:refreshAfterWrite(java.time.Duration)": "/**\n* Configures cache to refresh entries after a specified duration.\n* @param duration duration for refreshing cache entries\n* @return updated CacheBuilder instance\n*/",
        "com.google.common.cache.CacheBuilder:weakKeys()": "/**\n* Configures the cache to use weak keys.\n* @return updated CacheBuilder instance with weak key strength\n*/",
        "com.google.common.cache.CacheBuilder:weakValues()": "/**\n* Configures the cache to use weak references for values.\n* @return updated CacheBuilder instance with weak value strength\n*/",
        "com.google.common.cache.CacheBuilder:softValues()": "/**\n* Configures the cache to use soft references for values.\n* @return updated CacheBuilder instance\n*/",
        "com.google.common.cache.CacheBuilder:toString()": "/**\n* Builds a string representation of the object with relevant fields.\n* @return formatted string of object's state\n*/",
        "com.google.common.cache.CacheBuilder:from(com.google.common.cache.CacheBuilderSpec)": "/**\n* Creates a CacheBuilder from the given spec.\n* @param spec CacheBuilderSpec to configure the builder\n* @return configured CacheBuilder instance\n*/",
        "com.google.common.cache.CacheBuilder:build(com.google.common.cache.CacheLoader)": "/**\n* Builds a LoadingCache with the specified CacheLoader.\n* @param loader CacheLoader for loading values\n* @return LoadingCache instance\n*/",
        "com.google.common.cache.CacheBuilder:build()": "/**\n* Builds and returns a LocalManualCache instance.\n* @return Cache object configured with specified parameters\n*/",
        "com.google.common.cache.CacheBuilder:from(java.lang.String)": "/**\n* Creates a CacheBuilder from a specification string.\n* @param spec cache settings as a string\n* @return configured CacheBuilder instance\n*/"
    },
    "com.google.common.cache.CacheBuilderSpec$KeyStrengthParser": {
        "com.google.common.cache.CacheBuilderSpec$KeyStrengthParser:<init>(com.google.common.cache.LocalCache$Strength)": "/**\n* Initializes KeyStrengthParser with the specified Strength.\n* @param strength the strength value to be parsed\n*/",
        "com.google.common.cache.CacheBuilderSpec$KeyStrengthParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)": "/**\n* Parses cache specifications and validates key/value constraints.\n* @param spec cache configuration specifications\n* @param key identifier for the cache entry\n* @param value optional value associated with the key\n*/"
    },
    "com.google.common.cache.CacheBuilderSpec$ValueStrengthParser": {
        "com.google.common.cache.CacheBuilderSpec$ValueStrengthParser:<init>(com.google.common.cache.LocalCache$Strength)": "/**\n* Initializes ValueStrengthParser with a specified Strength object.\n* @param strength the Strength instance to be set\n*/",
        "com.google.common.cache.CacheBuilderSpec$ValueStrengthParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)": "/**\n* Parses CacheBuilderSpec, validating key-value constraints.\n* @param spec CacheBuilderSpec to modify\n* @param key identifier for the value\n* @param value optional value, must be null\n*/"
    },
    "com.google.common.cache.CacheBuilderSpec": {
        "com.google.common.cache.CacheBuilderSpec:<init>(java.lang.String)": "/**\n* Initializes CacheBuilderSpec with the given specification string.\n* @param specification cache configuration details\n*/",
        "com.google.common.cache.CacheBuilderSpec:toParsableString()": "/**\n* Returns the specification as a parsable string.\n* @return String representation of the specification\n*/",
        "com.google.common.cache.CacheBuilderSpec:durationInNanos(long,java.util.concurrent.TimeUnit)": "/**\n* Converts duration to nanoseconds based on the specified time unit.\n* @param duration the duration value to convert\n* @param unit the time unit for conversion, or null\n* @return duration in nanoseconds or null if unit is null\n*/",
        "com.google.common.cache.CacheBuilderSpec:hashCode()": "/**\n* Computes the hash code for the object based on its attributes.\n* @return computed hash code as an integer\n*/",
        "com.google.common.cache.CacheBuilderSpec:equals(java.lang.Object)": "/**\n* Compares this CacheBuilderSpec with another for equality.\n* @param obj object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.cache.CacheBuilderSpec:toString()": "/**\n* Returns a string representation of the object with parsable values included.\n* @return String representation of the object\n*/",
        "com.google.common.cache.CacheBuilderSpec:toCacheBuilder()": "/**\n* Builds and configures a CacheBuilder instance based on provided parameters.\n* @return configured CacheBuilder object\n*/",
        "com.google.common.cache.CacheBuilderSpec:parse(java.lang.String)": "/**\n* Parses cache builder specification and returns its configuration.\n* @param cacheBuilderSpecification string with cache settings\n* @return CacheBuilderSpec object with parsed settings\n*/",
        "com.google.common.cache.CacheBuilderSpec:disableCaching()": "/**\n* Disables caching by setting maximum size to zero.\n* @return CacheBuilderSpec with caching disabled\n*/"
    },
    "com.google.common.cache.CacheLoader": {
        "com.google.common.cache.CacheLoader:<init>()": "/**\n* Default constructor for CacheLoader, initializes a new instance.\n*/",
        "com.google.common.cache.CacheLoader:asyncReloading(com.google.common.cache.CacheLoader,java.util.concurrent.Executor)": "/**** Creates an async CacheLoader using a specified executor. \n* @param loader CacheLoader for loading values\n* @param executor Executor for executing tasks\n* @return CacheLoader that supports async operations\n*/",
        "com.google.common.cache.CacheLoader:loadAll(java.lang.Iterable)": "/**\n* Loads multiple values by keys, throws UnsupportedLoadingOperationException if unsupported.\n* @param keys iterable of keys to load values for\n* @throws Exception if loading operation is not supported\n*/",
        "com.google.common.cache.CacheLoader:from(com.google.common.base.Function)": "/**\n* Creates a CacheLoader from a given function.\n* @param function computes values for the cache\n* @return CacheLoader instance using the provided function\n*/",
        "com.google.common.cache.CacheLoader:from(com.google.common.base.Supplier)": "/**\n* Creates a CacheLoader from a value supplier.\n* @param supplier provides values for the CacheLoader\n* @return CacheLoader that uses the supplier for value computation\n*/",
        "com.google.common.cache.CacheLoader:reload(java.lang.Object,java.lang.Object)": "/**\n* Reloads a value for a given key.\n* @param key the key for which to reload the value\n* @param oldValue the old value to be replaced\n* @return ListenableFuture containing the new value\n*/"
    },
    "com.google.common.cache.CacheLoader$1": {
        "com.google.common.cache.CacheLoader$1:load(java.lang.Object)": "/**\n* Loads a value associated with the given key.\n* @param key the key to lookup\n* @return the associated value\n* @throws Exception if the load operation fails\n*/",
        "com.google.common.cache.CacheLoader$1:loadAll(java.lang.Iterable)": "/**\n* Loads multiple values by keys, throws exception if unsupported.\n* @param keys iterable of keys to load values for\n* @throws Exception if loading operation is not supported\n*/",
        "com.google.common.cache.CacheLoader$1:reload(java.lang.Object,java.lang.Object)": "/**\n* Reloads a value by key and returns a future result.\n* @param key the key to reload the value for\n* @param oldValue the old value to be replaced\n* @return ListenableFuture of the new value\n*/"
    },
    "com.google.common.cache.CacheLoader$InvalidCacheLoadException": {
        "com.google.common.cache.CacheLoader$InvalidCacheLoadException:<init>(java.lang.String)": "/**\n* Constructs an InvalidCacheLoadException with a specified error message.\n* @param message detailed error message\n*/"
    },
    "com.google.common.cache.CacheLoader$UnsupportedLoadingOperationException": {
        "com.google.common.cache.CacheLoader$UnsupportedLoadingOperationException:<init>()": "/**\n* Constructs an UnsupportedLoadingOperationException with no detail message.\n*/"
    },
    "com.google.common.math.LongMath": {
        "com.google.common.math.LongMath:saturatedAdd(long,long)": "/**\n* Performs saturated addition of two long integers.\n* @param a first operand\n* @param b second operand\n* @return saturated result, Long.MAX_VALUE or Long.MIN_VALUE on overflow\n*/",
        "com.google.common.math.LongMath:saturatedSubtract(long,long)": "/**\n* Performs saturated subtraction of two long values.\n* @param a minuend, @param b subtrahend\n* @return saturated result or Long.MAX_VALUE on overflow\n*/",
        "com.google.common.math.LongMath:isPowerOfTwo(long)": "/**\n* Checks if a number is a power of two.\n* @param x number to check\n* @return true if x is a power of two, false otherwise\n*/",
        "com.google.common.math.LongMath:lessThanBranchFree(long,long)": "/**\n* Returns the sign bit of the difference between x and y.\n* @param x first long value\n* @param y second long value\n* @return 0 if x >= y, 1 if x < y\n*/",
        "com.google.common.math.LongMath:fitsInInt(long)": "/**\n* Checks if a long value can fit in an int without loss.\n* @param x the long value to check\n* @return true if x fits in an int, false otherwise\n*/",
        "com.google.common.math.LongMath:mod(long,long)": "/**\n* Computes the modulus of x by m.\n* @param x the dividend\n* @param m the positive modulus\n* @return the non-negative remainder of x divided by m\n*/",
        "com.google.common.math.LongMath:saturatedMultiply(long,long)": "/**\n* Performs saturated multiplication of two long values.\n* @param a first multiplicand\n* @param b second multiplicand\n* @return saturated result or Long.MAX_VALUE if overflow occurs\n*/",
        "com.google.common.math.LongMath:<init>()": "/**\n* Private constructor for LongMath class, preventing instantiation.\n*/",
        "com.google.common.math.LongMath:divide(long,long,java.math.RoundingMode)": "/**\n* Divides two long values with specified rounding mode.\n* @param p dividend, @param q divisor, @param mode rounding strategy\n* @return the result of division rounded as per the mode\n*/",
        "com.google.common.math.LongMath:pow(long,int)": "/**\n* Computes b raised to the power of k.\n* @param b base value, can be -2, -1, 0, 1, or 2\n* @param k exponent, must be non-negative\n* @return result of b^k\n*/",
        "com.google.common.math.LongMath:factorial(int)": "/**\n* Computes the factorial of a non-negative integer n.\n* @param n non-negative integer for which the factorial is computed\n* @return factorial of n or Long.MAX_VALUE if n is too large\n*/",
        "com.google.common.math.LongMath:ceilingPowerOfTwo(long)": "/**\n* Calculates the smallest power of two greater than or equal to x.\n* @param x input value, must be positive and within range\n* @return closest power of two as long\n*/",
        "com.google.common.math.LongMath:floorPowerOfTwo(long)": "/**\n* Computes the largest power of two less than or equal to x.\n* @param x positive long value to check\n* @return the floor power of two of x\n*/",
        "com.google.common.math.LongMath:log2(long,java.math.RoundingMode)": "/**\n* Calculates the base-2 logarithm of x with specified rounding mode.\n* @param x positive long value for logarithm calculation\n* @param mode rounding mode for the result\n* @return logarithm base 2 of x as an integer\n*/",
        "com.google.common.math.LongMath:log10Floor(long)": "/**\n* Computes the floor of log10 for a given long value.\n* @param x the input long value\n* @return the floor of log10(x)\n*/",
        "com.google.common.math.LongMath:gcd(long,long)": "/**\n* Computes the greatest common divisor (GCD) of two non-negative long integers.\n* @param a first number\n* @param b second number\n* @return GCD of a and b\n*/",
        "com.google.common.math.LongMath:mod(long,int)": "/**\n* Computes the modulus of x by m, returning a non-negative integer.\n* @param x the dividend\n* @param m the positive modulus\n* @return non-negative remainder of x divided by m\n*/",
        "com.google.common.math.LongMath:checkedAdd(long,long)": "/**\n* Performs checked addition of two long values.\n* @param a first operand\n* @param b second operand\n* @return sum of a and b\n*/",
        "com.google.common.math.LongMath:checkedSubtract(long,long)": "/**\n* Performs checked subtraction of two long values.\n* @param a first operand\n* @param b second operand\n* @return difference of a and b\n*/",
        "com.google.common.math.LongMath:checkedMultiply(long,long)": "/**\n* Performs checked multiplication of two long values.\n* @param a first multiplicand\n* @param b second multiplicand\n* @return product of a and b\n*/",
        "com.google.common.math.LongMath:saturatedPow(long,int)": "/**\n* Computes saturated power of base b raised to exponent k.\n* @param b base value, must be within -2 to 2\n* @param k exponent, must be non-negative\n* @return saturated result or Long.MAX_VALUE if overflow occurs\n*/",
        "com.google.common.math.LongMath:roundToDouble(long,java.math.RoundingMode)": "/**\n* Rounds a long value to double based on the specified RoundingMode.\n* @param x the long value to round\n* @param mode the rounding mode to apply\n* @return the rounded double value\n*/",
        "com.google.common.math.LongMath:sqrt(long,java.math.RoundingMode)": "/**\n* Computes the square root of a non-negative long value with specified rounding mode.\n* @param x non-negative integer input\n* @param mode rounding mode for the result\n* @return rounded square root of x\n*/",
        "com.google.common.math.LongMath:log10(long,java.math.RoundingMode)": "/**\n* Computes log10 of x with specified rounding mode.\n* @param x value to compute log10, must be positive\n* @param mode rounding mode for the result\n* @return computed log10 value as an int\n*/",
        "com.google.common.math.LongMath:multiplyFraction(long,long,long)": "/**\n* Multiplies a fraction by a number after simplifying.\n* @param x multiplier, @param numerator fraction's numerator, @param denominator fraction's denominator\n* @return simplified product of x and fraction\n*/",
        "com.google.common.math.LongMath:checkedPow(long,int)": "/**\n* Calculates b raised to the power of k with overflow checks.\n* @param b base value\n* @param k exponent value\n* @return result of b^k\n*/",
        "com.google.common.math.LongMath:isPrime(long)": "/**\n* Checks if a number is prime.\n* @param n the number to check\n* @return true if n is prime, false otherwise\n*/",
        "com.google.common.math.LongMath:binomial(int,int)": "/**\n* Calculates the binomial coefficient C(n, k).\n* @param n total items, @param k chosen items\n* @return binomial coefficient or Long.MAX_VALUE if overflow occurs\n*/"
    },
    "com.google.common.cache.ForwardingCache$SimpleForwardingCache": {
        "com.google.common.cache.ForwardingCache$SimpleForwardingCache:delegate()": "/**\n* Returns the delegate cache instance.\n* @return the delegate Cache object\n*/",
        "com.google.common.cache.ForwardingCache$SimpleForwardingCache:<init>(com.google.common.cache.Cache)": "/**\n* Initializes SimpleForwardingCache with a non-null delegate.\n* @param delegate the cache to delegate operations to\n*/"
    },
    "com.google.common.collect.ForwardingObject": {
        "com.google.common.collect.ForwardingObject:<init>()": "/**\n* Default constructor for ForwardingObject class.\n*/",
        "com.google.common.collect.ForwardingObject:toString()": "/**\n* Returns the string representation of the delegate object.\n* @return string representation of the delegate\n*/"
    },
    "com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache": {
        "com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache:delegate()": "/**\n* Returns the underlying LoadingCache instance.\n* @return the delegate LoadingCache\n*/",
        "com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache:<init>(com.google.common.cache.LoadingCache)": "/**\n* Constructs SimpleForwardingLoadingCache with a non-null delegate.\n* @param delegate the LoadingCache to wrap\n*/"
    },
    "com.google.common.collect.ImmutableSet": {
        "com.google.common.collect.ImmutableSet:of()": "/**\n* Returns an empty ImmutableSet instance.\n* @param <E> the type of elements in the set\n* @return an empty ImmutableSet\n*/",
        "com.google.common.collect.ImmutableSet:of(java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableSet containing two elements.\n* @param e1 first element\n* @param e2 second element\n* @return ImmutableSet with e1 and e2\n*/",
        "com.google.common.collect.ImmutableSet:of(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an immutable set containing three elements.\n* @param e1 first element, e2 second, e3 third\n* @return ImmutableSet containing the provided elements\n*/",
        "com.google.common.collect.ImmutableSet:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an immutable set from four elements.\n* @param e1, e2, e3, e4 elements to include in the set\n* @return ImmutableSet containing the provided elements\n*/",
        "com.google.common.collect.ImmutableSet:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an immutable set containing five elements.\n* @param e1 to e5 elements to include in the set\n* @return ImmutableSet of the provided elements\n*/",
        "com.google.common.collect.ImmutableSet:isHashCodeFast()": "/**\n* Checks if the hash code computation is optimized for speed.\n* @return false indicating hash code is not fast\n*/",
        "com.google.common.collect.ImmutableSet:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; throws exception to enforce SerializedForm usage.\n* @param stream input stream for object deserialization\n* @throws InvalidObjectException when called\n*/",
        "com.google.common.collect.ImmutableSet:chooseTableSize(int)": "/**\n* Determines optimal table size based on set size.\n* @param setSize desired number of entries\n* @return calculated table size for storage\n*/",
        "com.google.common.collect.ImmutableSet:hashCode()": "/**\n* Computes the hash code for the current object.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.ImmutableSet:<init>()": "/**\n* Constructs an empty ImmutableSet.\n*/",
        "com.google.common.collect.ImmutableSet:writeReplace()": "/**\n* Prepares object for serialization replacement.\n* @return SerializedForm instance containing object data\n*/",
        "com.google.common.collect.ImmutableSet:toImmutableSet()": "/**\n* Returns a Collector to accumulate elements into an ImmutableSet.\n* @param <E> the type of input elements\n* @return a Collector for creating an ImmutableSet\n*/",
        "com.google.common.collect.ImmutableSet:equals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param object the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ImmutableSet:of(java.lang.Object)": "/**\n* Creates an ImmutableSet containing a single element.\n* @param e1 the element to include in the set\n* @return an ImmutableSet with the specified element\n*/",
        "com.google.common.collect.ImmutableSet:builderWithExpectedSize(int)": "/**\n* Creates a Builder with a specified expected size.\n* @param expectedSize desired capacity for the Builder\n* @return Builder instance initialized with expected size\n*/",
        "com.google.common.collect.ImmutableSet:copyOf(java.lang.Object[])": "/**\n* Creates an ImmutableSet from an array of elements.\n* @param elements array of elements to include\n* @return ImmutableSet containing the specified elements\n*/",
        "com.google.common.collect.ImmutableSet:builder()": "/**\n* Creates a new Builder instance for type E.\n* @return a Builder object for the specified type E\n*/",
        "com.google.common.collect.ImmutableSet:copyOfEnumSet(java.util.EnumSet)": "/**\n* Creates an ImmutableSet from an EnumSet.\n* @param enumSet the EnumSet to convert\n* @return ImmutableSet representation of the EnumSet\n*/",
        "com.google.common.collect.ImmutableSet:copyOf(java.util.Collection)": "/**\n* Creates an ImmutableSet from a Collection.\n* @param elements collection of elements to convert\n* @return ImmutableSet representation of the collection\n*/",
        "com.google.common.collect.ImmutableSet:copyOf(java.util.Iterator)": "/**\n* Creates an ImmutableSet from an iterator of elements.\n* @param elements iterator of elements to include\n* @return ImmutableSet containing the elements\n*/",
        "com.google.common.collect.ImmutableSet:copyOf(java.lang.Iterable)": "/**\n* Creates an ImmutableSet from an Iterable of elements.\n* @param elements iterable of elements to include\n* @return ImmutableSet containing the elements\n*/"
    },
    "com.google.common.cache.LocalCache": {
        "com.google.common.cache.LocalCache:isEmpty()": "/**\n* Checks if the collection is empty, accounting for concurrent modifications.\n* @return true if empty, false otherwise\n*/",
        "com.google.common.cache.LocalCache:connectAccessOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)": "/**\n* Connects two entries in the access order queue.\n* @param previous the entry preceding the next entry\n* @param next the entry following the previous entry\n*/",
        "com.google.common.cache.LocalCache:connectWriteOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)": "/**\n* Connects two entries in the write order queue.\n* @param previous the entry preceding the next entry\n* @param next the entry following the previous entry\n*/",
        "com.google.common.cache.LocalCache:unset()": "/**\n* Returns a reference indicating an unset value.\n* @return a ValueReference representing an unset state\n*/",
        "com.google.common.cache.LocalCache:longSize()": "/**\n* Calculates the total size of all segments.\n* @return total number of entries across segments\n*/",
        "com.google.common.cache.LocalCache:usesKeyReferences()": "/**\n* Checks if key references are used based on key strength.\n* @return true if key strength is not strong, false otherwise\n*/",
        "com.google.common.cache.LocalCache:usesValueReferences()": "/**\n* Checks if value references are used based on strength.\n* @return true if not strong, false otherwise\n*/",
        "com.google.common.cache.LocalCache:discardingQueue()": "/**\n* Returns a discarding queue instance.\n* @return a Queue that discards elements\n*/",
        "com.google.common.cache.LocalCache:customWeigher()": "/**\n* Checks if the current weigher is not the default OneWeigher instance.\n* @return true if weigher is different, false otherwise\n*/",
        "com.google.common.cache.LocalCache:refreshes()": "/**\n* Checks if refresh interval is set.\n* @return true if refreshNanos is greater than zero, false otherwise\n*/",
        "com.google.common.cache.LocalCache:evictsBySize()": "/**\n* Checks if eviction is based on size limits.\n* @return true if maxWeight is non-negative, false otherwise\n*/",
        "com.google.common.cache.LocalCache:processPendingNotifications()": "/**\n* Processes and handles pending removal notifications from the queue.\n*/",
        "com.google.common.cache.LocalCache:nullEntry()": "/**\n* Returns a null ReferenceEntry instance.\n* @return ReferenceEntry of type K, V, always null\n*/",
        "com.google.common.cache.LocalCache:newSegmentArray(int)": "/**\n* Creates a new array of Segment objects with specified size.\n* @param ssize the desired size of the Segment array\n* @return an array of Segment objects\n*/",
        "com.google.common.cache.LocalCache:expiresAfterWrite()": "/**\n* Checks if expiration is set after write.\n* @return true if expiration is enabled, false otherwise\n*/",
        "com.google.common.cache.LocalCache:expiresAfterAccess()": "/**\n* Checks if the expiration occurs after access.\n* @return true if expiration is enabled, false otherwise\n*/",
        "com.google.common.cache.LocalCache:segmentFor(int)": "/**\n* Retrieves the segment for a given hash.\n* @param hash the hash value to determine the segment\n* @return the corresponding Segment based on the hash\n*/",
        "com.google.common.cache.LocalCache:rehash(int)": "/**\n* Rehashes an integer using a bit manipulation technique.\n* @param h original hash value\n* @return modified hash value after rehashing\n*/",
        "com.google.common.cache.LocalCache:keySet()": "/**\n* Returns the set of keys, creating it if not already initialized.\n* @return Set of keys\n*/",
        "com.google.common.cache.LocalCache:values()": "/**\n* Retrieves the collection of values, creating it if not already initialized.\n* @return Collection of values\n*/",
        "com.google.common.cache.LocalCache:entrySet()": "/**\n* Returns the entry set of the map.\n* @return Set of key-value pairs, initializes if not present\n*/",
        "com.google.common.cache.LocalCache:nullifyAccessOrder(com.google.common.cache.ReferenceEntry)": "/**\n* Resets the access order of a ReferenceEntry to null.\n* @param nulled the ReferenceEntry to modify\n*/",
        "com.google.common.cache.LocalCache:nullifyWriteOrder(com.google.common.cache.ReferenceEntry)": "/**\n* Resets write order references of a ReferenceEntry.\n* @param nulled the ReferenceEntry to nullify write order\n*/",
        "com.google.common.cache.LocalCache:usesWriteQueue()": "/**\n* Determines if write queue is used based on expiration setting.\n* @return true if expiration is enabled after write, false otherwise\n*/",
        "com.google.common.cache.LocalCache:recordsWrite()": "/**\n* Checks if records should expire after write or refresh is enabled.\n* @return true if expiration or refresh is active, false otherwise\n*/",
        "com.google.common.cache.LocalCache:expires()": "/**\n* Determines if expiration is enabled after write or access.\n* @return true if expiration is enabled, false otherwise\n*/",
        "com.google.common.cache.LocalCache:usesAccessQueue()": "/**\n* Determines if access queue is used based on expiration or eviction settings.\n* @return true if access queue is utilized, false otherwise\n*/",
        "com.google.common.cache.LocalCache:recordsAccess()": "/**\n* Checks if records access is enabled based on expiration settings.\n* @return true if access expiration is enabled, false otherwise\n*/",
        "com.google.common.cache.LocalCache:isExpired(com.google.common.cache.ReferenceEntry,long)": "/**\n* Checks if the entry is expired based on access or write time.\n* @param entry the ReferenceEntry to check\n* @param now current time in nanoseconds\n* @return true if expired, false otherwise\n*/",
        "com.google.common.cache.LocalCache:newValueReference(com.google.common.cache.ReferenceEntry,java.lang.Object,int)": "/**\n* Creates a new ValueReference for the given entry and value.\n* @param entry the reference entry\n* @param value the value to reference\n* @param weight the weight of the value\n* @return a new ValueReference instance\n*/",
        "com.google.common.cache.LocalCache:hash(java.lang.Object)": "/**\n* Computes rehashed hash code for the given key object.\n* @param key object to hash, may be null\n* @return rehashed hash code as an integer\n*/",
        "com.google.common.cache.LocalCache:size()": "/**\n* Returns the size of segments as an int, safely cast from long.\n* @return saturated int size of segments\n*/",
        "com.google.common.cache.LocalCache:newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Creates a new map entry, locking the segment during the process.\n* @param key the key for the new entry\n* @param hash the hash code of the key\n* @param next the next entry in the chain, or null\n* @return a new ReferenceEntry object\n*/",
        "com.google.common.cache.LocalCache:copyEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)": "/**\n* Copies a reference entry for a given original entry and its next entry.\n* @param original the entry to copy\n* @param newNext the next entry in the chain\n* @return a new ReferenceEntry or null if key/value is collected\n*/",
        "com.google.common.cache.LocalCache:usesWriteEntries()": "/**\n* Determines if write entries are used based on queue or record settings.\n* @return true if either is active, false otherwise\n*/",
        "com.google.common.cache.LocalCache:recordsTime()": "/**\n* Determines if records are writable or accessible based on expiration settings.\n* @return true if records can be written or accessed, false otherwise\n*/",
        "com.google.common.cache.LocalCache:usesAccessEntries()": "/**\n* Checks if access entries are used based on queue or records access.\n* @return true if either access queue or records access is enabled\n*/",
        "com.google.common.cache.LocalCache:getLiveValue(com.google.common.cache.ReferenceEntry,long)": "/**\n* Retrieves live value from entry if not expired.\n* @param entry ReferenceEntry to check\n* @param now current time in nanoseconds\n* @return live value or null if expired or not present\n*/",
        "com.google.common.cache.LocalCache:createSegment(int,long,com.google.common.cache.AbstractCache$StatsCounter)": "/**\n* Creates a new Segment for caching.\n* @param initialCapacity initial capacity of the segment\n* @param maxSegmentWeight maximum weight for the segment\n* @param statsCounter stats tracker for the segment\n* @return new Segment instance\n*/",
        "com.google.common.cache.LocalCache:<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)": "/**\n* Constructs a LocalCache with specified builder and optional loader.\n* @param builder cache configuration settings\n* @param loader optional CacheLoader for loading values\n*/",
        "com.google.common.cache.LocalCache:reclaimKey(com.google.common.cache.ReferenceEntry)": "/**\n* Reclaims a cache entry by its reference.\n* @param entry the entry to reclaim from the cache\n*/",
        "com.google.common.cache.LocalCache:reclaimValue(com.google.common.cache.LocalCache$ValueReference)": "/**\n* Reclaims a value using its reference within the appropriate segment.\n* @param valueReference reference to the value to reclaim\n*/",
        "com.google.common.cache.LocalCache:getEntry(java.lang.Object)": "/**\n* Retrieves entry by key; returns null if key is null or not found.\n* @param key the key to search for\n* @return ReferenceEntry matching the key or null\n*/",
        "com.google.common.cache.LocalCache:isLive(com.google.common.cache.ReferenceEntry,long)": "/**\n* Checks if the cache entry is live based on its hash and current time.\n* @param entry the cache entry to check\n* @param now current time in nanoseconds\n* @return true if the entry is live, false otherwise\n*/",
        "com.google.common.cache.LocalCache:containsValue(java.lang.Object)": "/**\n* Checks if the map contains a specified value.\n* @param value the value to search for; may be null\n* @return true if the value is found, false otherwise\n*/",
        "com.google.common.cache.LocalCache:cleanUp()": "/**\n* Cleans up all segments by invoking their cleanUp methods.\n*/",
        "com.google.common.cache.LocalCache:put(java.lang.Object,java.lang.Object)": "/**\n* Inserts a key-value pair into the map, ensuring neither is null.\n* @param key the key to insert\n* @param value the value to associate with the key\n* @return previous value or null if new entry\n*/",
        "com.google.common.cache.LocalCache:putIfAbsent(java.lang.Object,java.lang.Object)": "/**\n* Inserts value if key is absent; returns previous value or null.\n* @param key the key for the entry\n* @param value the value to store\n* @return previous value or null if new entry\n*/",
        "com.google.common.cache.LocalCache:replace(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Replaces oldValue with newValue for the given key.\n* @param key the key for the entry to replace\n* @param oldValue the current value to replace\n* @param newValue the new value to set\n* @return true if replaced, false if oldValue is null or not found\n*/",
        "com.google.common.cache.LocalCache:replace(java.lang.Object,java.lang.Object)": "/**\n* Replaces value for a key, ensuring key and value are non-null.\n* @param key the key to replace value for\n* @param value the new value to set\n* @return previous value or null if key not found\n*/",
        "com.google.common.cache.LocalCache:remove(java.lang.Object)": "/**\n* Removes an entry by key from the cache.\n* @param key the key of the entry to remove\n* @return removed value or null if key is null or not found\n*/",
        "com.google.common.cache.LocalCache:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes an entry by key and value, returning success status.\n* @param key the key of the entry to remove\n* @param value the value to match for removal\n* @return true if the entry was removed, false otherwise\n*/",
        "com.google.common.cache.LocalCache:clear()": "/**\n* Clears all segments in the collection.\n* @return void\n*/",
        "com.google.common.cache.LocalCache:refresh(java.lang.Object)": "/**\n* Refreshes the cache entry for the given key.\n* @param key the key for the cached value\n*/",
        "com.google.common.cache.LocalCache:loadAll(java.util.Set,com.google.common.cache.CacheLoader)": "/****\n* Loads values from a cache using provided keys and a CacheLoader.\n* @param keys set of keys to load values for\n* @param loader cache loader to fetch values\n* @return map of loaded values\n* @throws ExecutionException if loading fails\n*/",
        "com.google.common.cache.LocalCache:putAll(java.util.Map)": "/**\n* Inserts all key-value pairs from the provided map.\n* @param m source map containing key-value pairs to insert\n*/",
        "com.google.common.cache.LocalCache:invalidateAll(java.lang.Iterable)": "/**\n* Invalidates all entries in the cache for the given keys.\n* @param keys iterable collection of keys to remove from the cache\n*/",
        "com.google.common.cache.LocalCache:containsKey(java.lang.Object)": "/**\n* Checks if the map contains a non-null key.\n* @param key the key to check\n* @return true if key exists, false if key is null or not present\n*/",
        "com.google.common.cache.LocalCache:compute(java.lang.Object,java.util.function.BiFunction)": "/**\n* Computes a value for the given key using a provided function.\n* @param key the key to compute the value for\n* @param function the function to compute the value\n* @return computed value or null if not computable\n*/",
        "com.google.common.cache.LocalCache:get(java.lang.Object)": "/**\n* Retrieves cached value by key; returns null if key is null or not found.\n* @param key the key to retrieve the value for\n* @return cached value or null\n*/",
        "com.google.common.cache.LocalCache:getIfPresent(java.lang.Object)": "/**\n* Retrieves cached value by key; records hit/miss statistics.\n* @param key the key to retrieve the value for\n* @return cached value or null if not found\n*/",
        "com.google.common.cache.LocalCache:computeIfAbsent(java.lang.Object,java.util.function.Function)": "/**\n* Computes value if absent; otherwise returns existing value.\n* @param key the key to check and compute for\n* @param function the function to compute the value\n* @return the computed or existing value\n*/",
        "com.google.common.cache.LocalCache:computeIfPresent(java.lang.Object,java.util.function.BiFunction)": "/**\n* Computes value if present for the given key using the provided function.\n* @param key the key to compute the value for\n* @param function the function to compute the value\n* @return computed value or null if not present\n*/",
        "com.google.common.cache.LocalCache:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)": "/**\n* Merges newValue with existing value for key using the provided function.\n* @param key the key to merge values for\n* @param newValue the new value to merge\n* @param function the function to combine values\n* @return merged value or null if no value exists\n*/",
        "com.google.common.cache.LocalCache:getOrDefault(java.lang.Object,java.lang.Object)": "/**\n* Retrieves value by key or returns default if not found.\n* @param key key to retrieve value for; may be null\n* @param defaultValue value to return if key is not found\n* @return cached value or defaultValue if key is not found\n*/",
        "com.google.common.cache.LocalCache:getAllPresent(java.lang.Iterable)": "/**\n* Retrieves values for given keys, counting hits and misses.\n* @param keys iterable collection of keys to fetch values for\n* @return ImmutableMap of found key-value pairs\n*/",
        "com.google.common.cache.LocalCache:removeIf(java.util.function.BiPredicate)": "/**\n* Removes entries matching the filter; returns true if any were removed.\n* @param filter predicate to test key-value pairs\n* @return true if entries were removed, false otherwise\n*/",
        "com.google.common.cache.LocalCache:get(java.lang.Object,com.google.common.cache.CacheLoader)": "/**\n* Retrieves a cached value or loads it using the provided CacheLoader.\n* @param key the cache key\n* @param loader CacheLoader to fetch the value\n* @return cached value or newly loaded value\n* @throws ExecutionException if loading fails\n*/",
        "com.google.common.cache.LocalCache:getOrLoad(java.lang.Object)": "/**\n* Retrieves cached value or loads it using the default loader.\n* @param key the cache key\n* @return cached value or newly loaded value\n* @throws ExecutionException if loading fails\n*/",
        "com.google.common.cache.LocalCache:getAll(java.lang.Iterable)": "/**\n* Retrieves values for given keys, loading missing ones if necessary.\n* @param keys iterable collection of keys to fetch values for\n* @return ImmutableMap of found values\n* @throws ExecutionException if loading fails\n*/"
    },
    "com.google.common.cache.LocalCache$AbstractReferenceEntry": {
        "com.google.common.cache.LocalCache$AbstractReferenceEntry:getValueReference()": "/**\n* Throws UnsupportedOperationException when accessing value reference.\n* @return always throws exception\n*/",
        "com.google.common.cache.LocalCache$AbstractReferenceEntry:setValueReference(com.google.common.cache.LocalCache$ValueReference)": "/**\n* Sets the value reference, but operation is unsupported.\n* @param valueReference the value reference to set\n*/",
        "com.google.common.cache.LocalCache$AbstractReferenceEntry:getNext()": "/**\n* Retrieves the next reference entry; throws exception if unsupported.\n* @return ReferenceEntry object\n*/",
        "com.google.common.cache.LocalCache$AbstractReferenceEntry:getHash()": "/**\n* Throws UnsupportedOperationException when called.\n* @return always throws an exception, no value returned\n*/",
        "com.google.common.cache.LocalCache$AbstractReferenceEntry:getKey()": "/**\n* Retrieves the key, but operation is unsupported.\n* @return UnsupportedOperationException is always thrown\n*/",
        "com.google.common.cache.LocalCache$AbstractReferenceEntry:getAccessTime()": "/**\n* Retrieves the access time, not supported in this implementation.\n* @return throws UnsupportedOperationException\n*/",
        "com.google.common.cache.LocalCache$AbstractReferenceEntry:setAccessTime(long)": "/**\n* Sets the access time but throws an exception as operation is unsupported.\n* @param time access time in milliseconds\n*/",
        "com.google.common.cache.LocalCache$AbstractReferenceEntry:getNextInAccessQueue()": "/**\n* Throws UnsupportedOperationException for accessing next entry in access queue.\n* @return always throws an exception\n*/",
        "com.google.common.cache.LocalCache$AbstractReferenceEntry:setNextInAccessQueue(com.google.common.cache.ReferenceEntry)": "/**\n* Sets the next entry in the access queue; not supported.\n* @param next the next ReferenceEntry to set\n*/",
        "com.google.common.cache.LocalCache$AbstractReferenceEntry:getPreviousInAccessQueue()": "/**\n* Throws UnsupportedOperationException for accessing previous entry in access queue.\n* @return always throws an exception\n*/",
        "com.google.common.cache.LocalCache$AbstractReferenceEntry:setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry)": "/**\n* Sets the previous entry in the access queue; operation unsupported.\n* @param previous the previous ReferenceEntry to set\n*/",
        "com.google.common.cache.LocalCache$AbstractReferenceEntry:getWriteTime()": "/**\n* Throws UnsupportedOperationException indicating write time retrieval is not supported.\n* @return never returns a value due to exception\n*/",
        "com.google.common.cache.LocalCache$AbstractReferenceEntry:setWriteTime(long)": "/**\n* Sets the write time, but this operation is unsupported.\n* @param time the write time to set\n*/",
        "com.google.common.cache.LocalCache$AbstractReferenceEntry:getNextInWriteQueue()": "/**\n* Retrieves the next entry in the write queue.\n* @return ReferenceEntry object or throws UnsupportedOperationException\n*/",
        "com.google.common.cache.LocalCache$AbstractReferenceEntry:setNextInWriteQueue(com.google.common.cache.ReferenceEntry)": "/**\n* Sets the next entry in the write queue; unsupported operation.\n* @param next the next ReferenceEntry in the queue\n*/",
        "com.google.common.cache.LocalCache$AbstractReferenceEntry:getPreviousInWriteQueue()": "/**\n* Throws UnsupportedOperationException for unsupported write queue retrieval.\n* @return always throws an exception\n*/",
        "com.google.common.cache.LocalCache$AbstractReferenceEntry:setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry)": "/**\n* Sets the previous entry in the write queue; not supported.\n* @param previous the previous ReferenceEntry to set\n*/"
    },
    "com.google.common.cache.LocalCache$AccessQueue": {
        "com.google.common.cache.LocalCache$AccessQueue:peek()": "/**\n* Retrieves the next entry in the access queue or null if at the head.\n* @return ReferenceEntry or null if no next entry exists\n*/",
        "com.google.common.cache.LocalCache$AccessQueue:contains(java.lang.Object)": "/**\n* Checks if the specified entry is in the access queue.\n* @param o object to check for presence in the queue\n* @return true if the entry exists, false otherwise\n*/",
        "com.google.common.cache.LocalCache$AccessQueue:isEmpty()": "/**\n* Checks if the access queue is empty.\n* @return true if empty, false otherwise\n*/",
        "com.google.common.cache.LocalCache$AccessQueue:size()": "/**\n* Returns the number of entries in the access queue.\n* @return the size of the access queue\n*/",
        "com.google.common.cache.LocalCache$AccessQueue:offer(com.google.common.cache.ReferenceEntry)": "/**\n* Adds an entry to the access queue.\n* @param entry the entry to be added\n* @return true if the entry was added successfully\n*/",
        "com.google.common.cache.LocalCache$AccessQueue:iterator()": "/**\n* Returns an iterator over access queue entries.\n* @return Iterator of ReferenceEntry or null if at the head.\n*/",
        "com.google.common.cache.LocalCache$AccessQueue:remove(java.lang.Object)": "/**\n* Removes an entry from the access order queue.\n* @param o the entry to remove\n* @return true if removed successfully, false if not\n*/",
        "com.google.common.cache.LocalCache$AccessQueue:clear()": "/**\n* Clears the access order of entries in the queue.\n*/",
        "com.google.common.cache.LocalCache$AccessQueue:poll()": "/**\n* Polls and removes the next entry in the access queue.\n* @return the next ReferenceEntry or null if the queue is empty\n*/"
    },
    "com.google.common.cache.LocalCache$EntryFactory": {
        "com.google.common.cache.LocalCache$EntryFactory:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)": "/**\n* Creates a copy of a reference entry.\n* @param segment the segment containing the entry\n* @param original the entry to copy\n* @param newNext the next entry in the chain\n* @param key the key for the new entry\n* @return a new ReferenceEntry instance\n*/",
        "com.google.common.cache.LocalCache$EntryFactory:getFactory(com.google.common.cache.LocalCache$Strength,boolean,boolean)": "/**\n* Retrieves an EntryFactory based on key strength and queue usage flags.\n* @param keyStrength strength type for keys\n* @param usesAccessQueue indicates if access queue is used\n* @param usesWriteQueue indicates if write queue is used\n* @return corresponding EntryFactory instance\n*/",
        "com.google.common.cache.LocalCache$EntryFactory:copyAccessEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)": "/**\n* Copies access entry properties and updates access order.\n* @param original the entry to copy from\n* @param newEntry the entry to update with copied values\n*/",
        "com.google.common.cache.LocalCache$EntryFactory:copyWriteEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)": "/**\n* Copies write entry details from original to newEntry and updates write order.\n* @param original the entry to copy from\n* @param newEntry the entry to copy to\n*/"
    },
    "com.google.common.cache.LocalCache$EntryIterator": {
        "com.google.common.cache.LocalCache$EntryIterator:next()": "/**\n* Retrieves the next entry in the iteration.\n* @return the next Entry object in the iteration\n*/"
    },
    "com.google.common.cache.LocalCache$EntrySet": {
        "com.google.common.cache.LocalCache$EntrySet:iterator()": "/**\n* Returns an iterator over the entries of the collection.\n* @return Iterator for key-value pairs in the collection\n*/",
        "com.google.common.cache.LocalCache$EntrySet:remove(java.lang.Object)": "/**\n* Removes an entry if it matches the key and value.\n* @param o the entry to remove\n* @return true if removed, false if not an Entry or not found\n*/",
        "com.google.common.cache.LocalCache$EntrySet:contains(java.lang.Object)": "/**\n* Checks if the cache contains the specified entry.\n* @param o entry object to check\n* @return true if present, false otherwise\n*/",
        "com.google.common.cache.LocalCache$EntrySet:removeIf(java.util.function.Predicate)": "/**\n* Removes entries matching the filter predicate.\n* @param filter predicate for key-value pair removal\n* @return true if any entries were removed, false otherwise\n*/"
    },
    "com.google.common.cache.LocalCache$WriteThroughEntry": {
        "com.google.common.cache.LocalCache$WriteThroughEntry:getKey()": "/**\n* Retrieves the key associated with this instance.\n* @return the key of type K\n*/",
        "com.google.common.cache.LocalCache$WriteThroughEntry:getValue()": "/**\n* Retrieves the stored value.\n* @return the value of type V\n*/",
        "com.google.common.cache.LocalCache$WriteThroughEntry:equals(java.lang.Object)": "/**\n* Compares this Entry with another for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.cache.LocalCache$WriteThroughEntry:hashCode()": "/**\n* Computes hash code using key and value hash codes.\n* @return combined hash code as an integer\n*/",
        "com.google.common.cache.LocalCache$WriteThroughEntry:toString()": "/**\n* Returns a string representation in the format \"key=value\".\n* @return String formatted as \"key=value\"\n*/",
        "com.google.common.cache.LocalCache$WriteThroughEntry:setValue(java.lang.Object)": "/**\n* Sets a new value and returns the old value.\n* @param newValue the new value to set\n* @return the previous value associated with the key\n*/"
    },
    "com.google.common.cache.LocalCache$KeySet": {
        "com.google.common.cache.LocalCache$KeySet:iterator()": "/**\n* Returns an iterator over the keys.\n* @return Iterator for the keys in the collection\n*/",
        "com.google.common.cache.LocalCache$KeySet:remove(java.lang.Object)": "/**\n* Removes an entry from the cache.\n* @param o the key of the entry to remove\n* @return true if removed, false if not found\n*/",
        "com.google.common.cache.LocalCache$KeySet:contains(java.lang.Object)": "/**\n* Checks if the cache contains the specified object.\n* @param o the object to check for presence in the cache\n* @return true if the object is present, false otherwise\n*/"
    },
    "com.google.common.cache.LocalCache$LoadingSerializationProxy": {
        "com.google.common.cache.LocalCache$LoadingSerializationProxy:get(java.lang.Object)": "/**\n* Retrieves the value associated with the given key.\n* @param key the key to lookup the value\n* @return the value associated with the key\n*/",
        "com.google.common.cache.LocalCache$LoadingSerializationProxy:getUnchecked(java.lang.Object)": "/**\n* Retrieves a value without checking for exceptions.\n* @param key the key for which the value is retrieved\n* @return the corresponding value for the key\n*/",
        "com.google.common.cache.LocalCache$LoadingSerializationProxy:getAll(java.lang.Iterable)": "/**\n* Retrieves a map of values for the given keys.\n* @param keys iterable collection of keys\n* @return ImmutableMap of key-value pairs\n*/",
        "com.google.common.cache.LocalCache$LoadingSerializationProxy:apply(java.lang.Object)": "/**\n* Applies the function to the given key.\n* @param key the input key\n* @return the result of applying the function to the key\n*/",
        "com.google.common.cache.LocalCache$LoadingSerializationProxy:refresh(java.lang.Object)": "/**\n* Refreshes the data associated with the given key.\n* @param key the key for which data needs to be refreshed\n*/",
        "com.google.common.cache.LocalCache$LoadingSerializationProxy:<init>(com.google.common.cache.LocalCache)": "/**\n* Initializes LoadingSerializationProxy with a LocalCache instance.\n* @param cache the LocalCache providing configuration parameters\n*/",
        "com.google.common.cache.LocalCache$LoadingSerializationProxy:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes the object and recreates the cache builder.\n* @param in ObjectInputStream for reading the object's data\n*/"
    },
    "com.google.common.cache.LocalCache$LoadingValueReference": {
        "com.google.common.cache.LocalCache$LoadingValueReference:isActive()": "/**\n* Checks if the old value is active.\n* @return true if active, false otherwise\n*/",
        "com.google.common.cache.LocalCache$LoadingValueReference:getWeight()": "/**\n* Retrieves the weight from the oldValue object.\n* @return weight as an integer\n*/",
        "com.google.common.cache.LocalCache$LoadingValueReference:get()": "/**\n* Retrieves the value from oldValue.\n* @return the value of type V from oldValue\n*/",
        "com.google.common.cache.LocalCache$LoadingValueReference:getOldValue()": "/**\n* Retrieves the old value reference.\n* @return ValueReference containing the old value\n*/",
        "com.google.common.cache.LocalCache$LoadingValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)": "/**\n* Returns the current instance for a copy operation.\n* @param queue reference queue for garbage collection\n* @param value value to associate with the copy\n* @param entry reference entry for the copy\n* @return this instance of ValueReference\n*/",
        "com.google.common.cache.LocalCache$LoadingValueReference:getEntry()": "/**\n* Retrieves the reference entry.\n* @return always returns null\n*/",
        "com.google.common.cache.LocalCache$LoadingValueReference:isLoading()": "/**\n* Indicates if the system is currently loading.\n* @return true if loading, false otherwise\n*/",
        "com.google.common.cache.LocalCache$LoadingValueReference:set(java.lang.Object)": "/**\n* Sets a new value and returns success status.\n* @param newValue the value to be set\n* @return true if the value was successfully set, false otherwise\n*/",
        "com.google.common.cache.LocalCache$LoadingValueReference:setException(java.lang.Throwable)": "/**\n* Sets the exception for the future value.\n* @param t the exception to set\n* @return true if the exception was set successfully\n*/",
        "com.google.common.cache.LocalCache$LoadingValueReference:waitForValue()": "/**\n* Waits for a value from a Future, handling interruptions.\n* @return the result of type V or null if not available\n*/",
        "com.google.common.cache.LocalCache$LoadingValueReference:elapsedNanos()": "/**\n* Returns elapsed time in nanoseconds.\n* @return elapsed time measured by the stopwatch\n*/",
        "com.google.common.cache.LocalCache$LoadingValueReference:notifyNewValue(java.lang.Object)": "/**\n* Notifies of a new value, updating state or delaying based on null check.\n* @param newValue the new value to be set or null to indicate removal\n*/",
        "com.google.common.cache.LocalCache$LoadingValueReference:compute(java.lang.Object,java.util.function.BiFunction)": "/****\n* Computes a new value based on a key and previous value.\n* @param key the key for value computation\n* @param function a function to compute the new value\n* @return the newly computed value\n*/",
        "com.google.common.cache.LocalCache$LoadingValueReference:fullyFailedFuture(java.lang.Throwable)": "/**\n* Creates a failed future with the specified throwable.\n* @param t the exception causing the failure\n* @return a ListenableFuture that is already failed\n*/",
        "com.google.common.cache.LocalCache$LoadingValueReference:<init>(com.google.common.cache.LocalCache$ValueReference)": "/**\n* Initializes LoadingValueReference with an optional old value.\n* @param oldValue previous ValueReference or null for unset state\n*/",
        "com.google.common.cache.LocalCache$LoadingValueReference:<init>()": "/**\n* Constructs a LoadingValueReference with no previous value.\n*/",
        "com.google.common.cache.LocalCache$LoadingValueReference:loadFuture(java.lang.Object,com.google.common.cache.CacheLoader)": "/**\n* Loads a value asynchronously using a cache loader.\n* @param key the key to load the value for\n* @param loader the CacheLoader to fetch the value\n* @return a ListenableFuture containing the loaded value or an error future\n*/"
    },
    "com.google.common.util.concurrent.SettableFuture": {
        "com.google.common.util.concurrent.SettableFuture:set(java.lang.Object)": "/**\n* Sets a value and returns success status.\n* @param value the value to be set\n* @return true if the value was successfully set, false otherwise\n*/",
        "com.google.common.util.concurrent.SettableFuture:setException(java.lang.Throwable)": "/**\n* Sets the exception and returns the result of the operation.\n* @param throwable the exception to set\n* @return true if the exception was set successfully\n*/",
        "com.google.common.util.concurrent.SettableFuture:setFuture(com.google.common.util.concurrent.ListenableFuture)": "/**\n* Sets a future value and returns success status.\n* @param future the future value to set\n* @return true if successful, false otherwise\n*/",
        "com.google.common.util.concurrent.SettableFuture:<init>()": "/**\n* Constructs a new instance of SettableFuture.\n*/",
        "com.google.common.util.concurrent.SettableFuture:create()": "/**\n* Creates a new instance of SettableFuture.\n* @return a new SettableFuture object\n*/"
    },
    "com.google.common.util.concurrent.MoreExecutors": {
        "com.google.common.util.concurrent.MoreExecutors:directExecutor()": "/**\n* Returns the singleton instance of DirectExecutor.\n* @return DirectExecutor instance for immediate execution\n*/",
        "com.google.common.util.concurrent.MoreExecutors:<init>()": "/**\n* Private constructor for MoreExecutors class to prevent instantiation.\n*/",
        "com.google.common.util.concurrent.MoreExecutors:newDirectExecutorService()": "/**\n* Creates a new DirectExecutorService instance.\n* @return ListeningExecutorService for immediate task execution\n*/",
        "com.google.common.util.concurrent.MoreExecutors:isAppEngineWithApiClasses()": "/**\n* Checks if the current environment is Google App Engine with API classes.\n* @return true if in App Engine, false otherwise\n*/",
        "com.google.common.util.concurrent.MoreExecutors:shutdownAndAwaitTermination(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)": "/**\n* Shuts down an ExecutorService and waits for termination.\n* @param service the ExecutorService to shut down\n* @param timeout maximum time to wait for termination\n* @param unit time unit of the timeout\n* @return true if terminated, false if not\n*/",
        "com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.Executor,com.google.common.base.Supplier)": "/**\n* Returns an Executor that renames threads using the provided nameSupplier.\n* @param executor the original Executor to decorate\n* @param nameSupplier supplies thread names\n* @return a decorated Executor with renamed threads\n*/",
        "com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.ExecutorService,com.google.common.base.Supplier)": "/**\n* Decorates an ExecutorService to rename threads using a provided name supplier.\n* @param service the ExecutorService to decorate\n* @param nameSupplier supplies thread names\n* @return a new ExecutorService with renamed threads\n*/",
        "com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.ScheduledExecutorService,com.google.common.base.Supplier)": "/**\n* Decorates a ScheduledExecutorService with a thread-renaming feature.\n* @param service the executor service to decorate\n* @param nameSupplier provides the name for the threads\n* @return a ScheduledExecutorService with renamed threads\n*/",
        "com.google.common.util.concurrent.MoreExecutors:rejectionPropagatingExecutor(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture)": "/**\n* Returns an executor that propagates rejection exceptions to a future.\n* @param delegate the original executor to wrap\n* @param future the future to set exceptions on\n*/",
        "com.google.common.util.concurrent.MoreExecutors:shutdownAndAwaitTermination(java.util.concurrent.ExecutorService,java.time.Duration)": "/**\n* Shuts down ExecutorService and waits for termination within a given timeout.\n* @param service the ExecutorService to shut down\n* @param timeout maximum time to wait for termination\n* @return true if terminated, false if not\n*/",
        "com.google.common.util.concurrent.MoreExecutors:newSequentialExecutor(java.util.concurrent.Executor)": "/**** Creates a new SequentialExecutor using the provided delegate. \n* @param delegate the Executor to be wrapped\n* @return a SequentialExecutor instance\n*/",
        "com.google.common.util.concurrent.MoreExecutors:submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)": "/**\n* Submits a task and adds its future to a blocking queue.\n* @param executorService the executor for task execution\n* @param task the callable task to be executed\n* @param queue the queue to hold the future result\n* @return ListenableFuture representing the task's result\n*/",
        "com.google.common.util.concurrent.MoreExecutors:useDaemonThreadFactory(java.util.concurrent.ThreadPoolExecutor)": "/**\n* Configures executor to use a daemon thread factory.\n* @param executor ThreadPoolExecutor to modify\n*/",
        "com.google.common.util.concurrent.MoreExecutors:platformThreadFactory()": "/**\n* Returns a ThreadFactory based on the environment (App Engine or default).\n* @return ThreadFactory instance for the current platform\n*/",
        "com.google.common.util.concurrent.MoreExecutors:listeningDecorator(java.util.concurrent.ExecutorService)": "/**\n* Wraps ExecutorService in a ListeningExecutorService for enhanced functionality.\n* @param delegate the ExecutorService to be wrapped\n* @return ListeningExecutorService instance\n*/",
        "com.google.common.util.concurrent.MoreExecutors:listeningDecorator(java.util.concurrent.ScheduledExecutorService)": "/**\n* Wraps ScheduledExecutorService in a ListeningScheduledExecutorService.\n* @param delegate the ScheduledExecutorService to wrap\n* @return ListeningScheduledExecutorService or a new decorator\n*/",
        "com.google.common.util.concurrent.MoreExecutors:invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,long,java.util.concurrent.TimeUnit)": "/**\n* Executes tasks and returns the result of the first completed one.\n* @param executorService the executor for task execution\n* @param tasks collection of callable tasks to execute\n* @param timed indicates if execution should be time-limited\n* @param timeout maximum time to wait for a result\n* @param unit time unit for the timeout\n* @return result of the first completed task\n* @throws InterruptedException if the execution is interrupted\n* @throws ExecutionException if a task fails\n* @throws TimeoutException if no task completes in time\n*/",
        "com.google.common.util.concurrent.MoreExecutors:newThread(java.lang.String,java.lang.Runnable)": "/**\n* Creates a new thread with a specified name and runnable task.\n* @param name thread name; must not be null\n* @param runnable task to execute; must not be null\n* @return Thread instance with the given name\n*/",
        "com.google.common.util.concurrent.MoreExecutors:invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,java.time.Duration)": "/**\n* Executes tasks and returns the result of the first completed one.\n* @param executorService the executor for task execution\n* @param tasks collection of callable tasks to execute\n* @param timed indicates if execution should be time-limited\n* @param timeout maximum time to wait for a result\n* @return result of the first completed task\n*/",
        "com.google.common.util.concurrent.MoreExecutors:addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)": "/**\n* Adds a delayed shutdown hook for the specified ExecutorService.\n* @param service the ExecutorService to shutdown\n* @param terminationTimeout max wait time for shutdown\n* @param timeUnit time unit for the termination timeout\n*/",
        "com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit)": "/**\n* Returns an unconfigurable ExecutorService with a shutdown hook.\n* @param executor ThreadPoolExecutor to configure\n* @param terminationTimeout max wait time for shutdown\n* @param timeUnit time unit for the termination timeout\n* @return configured ExecutorService\n*/",
        "com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit)": "/**\n* Configures and returns a ScheduledExecutorService with a shutdown hook.\n* @param executor the ScheduledThreadPoolExecutor to configure\n* @param terminationTimeout max wait time for shutdown\n* @param timeUnit time unit for the termination timeout\n* @return configured ScheduledExecutorService\n*/",
        "com.google.common.util.concurrent.MoreExecutors:addDelayedShutdownHook(java.util.concurrent.ExecutorService,java.time.Duration)": "/**\n* Adds a delayed shutdown hook for the ExecutorService using a Duration timeout.\n* @param service the ExecutorService to shutdown\n* @param terminationTimeout max wait time for shutdown\n*/",
        "com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)": "/**\n* Retrieves a configured ExecutorService with a shutdown hook.\n* @param executor the ThreadPoolExecutor to configure\n* @return configured ExecutorService\n*/",
        "com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,java.time.Duration)": "/**\n* Configures an ExecutorService with a shutdown hook based on a timeout duration.\n* @param executor ThreadPoolExecutor to configure\n* @param terminationTimeout max wait time for shutdown\n* @return configured ExecutorService\n*/",
        "com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor)": "/**\n* Retrieves a ScheduledExecutorService with a shutdown hook.\n* @param executor the ScheduledThreadPoolExecutor to configure\n* @return configured ScheduledExecutorService\n*/",
        "com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,java.time.Duration)": "/**\n* Configures a ScheduledExecutorService with a shutdown hook.\n* @param executor the ScheduledThreadPoolExecutor to configure\n* @param terminationTimeout max wait time for shutdown\n* @return configured ScheduledExecutorService\n*/"
    },
    "com.google.common.util.concurrent.Uninterruptibles": {
        "com.google.common.util.concurrent.Uninterruptibles:getUninterruptibly(java.util.concurrent.Future)": "/**\n* Retrieves result from Future, handling interruptions gracefully.\n* @param future the Future to retrieve the result from\n* @return the result of type V or null if not available\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:sleepUninterruptibly(long,java.util.concurrent.TimeUnit)": "/**\n* Sleeps for a specified duration, ignoring interruptions.\n* @param sleepFor duration to sleep\n* @param unit time unit of the duration\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:getUninterruptibly(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)": "/**\n* Retrieves the result of a Future without interruption.\n* @param future the Future to retrieve the result from\n* @param timeout maximum wait time\n* @param unit time unit for the timeout\n* @return result of the Future\n* @throws ExecutionException if the computation threw an exception\n* @throws TimeoutException if the timeout is exceeded\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.CountDownLatch)": "/**\n* Awaits latch completion, ignoring interruptions.\n* @param latch CountDownLatch to await\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.CountDownLatch,long,java.util.concurrent.TimeUnit)": "/**\n* Awaits latch completion, ignoring interruptions until timeout.\n* @param latch the CountDownLatch to wait on\n* @param timeout max wait time\n* @param unit time unit for timeout\n* @return true if latch counted down, false if timeout occurred\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.locks.Condition,long,java.util.concurrent.TimeUnit)": "/**\n* Awaits condition with timeout, handling interruptions.\n* @param condition the Condition to await\n* @param timeout maximum time to wait\n* @param unit time unit of the timeout\n* @return true if condition is met, false if timed out\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:joinUninterruptibly(java.lang.Thread)": "/**\n* Joins a thread without interruption, restoring interrupt status if interrupted.\n* @param toJoin the thread to join\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:takeUninterruptibly(java.util.concurrent.BlockingQueue)": "/**\n* Retrieves an element from the queue without interruption.\n* @param queue the BlockingQueue to take an element from\n* @return the taken element from the queue\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:putUninterruptibly(java.util.concurrent.BlockingQueue,java.lang.Object)": "/**\n* Puts an element into a BlockingQueue without interruption.\n* @param queue the BlockingQueue to add the element to\n* @param element the element to be added\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,int,long,java.util.concurrent.TimeUnit)": "/**\n* Acquires permits from a semaphore without interruption.\n* @param semaphore the Semaphore to acquire from\n* @param permits number of permits to acquire\n* @param timeout maximum wait time for acquiring permits\n* @param unit time unit of the timeout\n* @return true if permits were acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:tryLockUninterruptibly(java.util.concurrent.locks.Lock,long,java.util.concurrent.TimeUnit)": "/**\n* Attempts to acquire a lock without interruption for a specified timeout.\n* @param lock the Lock to acquire\n* @param timeout maximum time to wait\n* @param unit time unit of the timeout\n* @return true if the lock was acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:awaitTerminationUninterruptibly(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)": "/**\n* Awaits executor termination without interruption.\n* @param executor the ExecutorService to await\n* @param timeout maximum time to wait\n* @param unit time unit of the timeout\n* @return true if terminated, false if timeout reached\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:<init>()": "/**\n* Private constructor to prevent instantiation of the Uninterruptibles class.\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:joinUninterruptibly(java.lang.Thread,long,java.util.concurrent.TimeUnit)": "/**** Joins a thread uninterruptibly for a specified timeout. \n* @param toJoin thread to join\n* @param timeout maximum wait time\n* @param unit time unit of the timeout\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:sleepUninterruptibly(java.time.Duration)": "/**\n* Sleeps for a specified duration without interruptions.\n* @param sleepFor duration to sleep\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:getUninterruptibly(java.util.concurrent.Future,java.time.Duration)": "/**\n* Retrieves Future result without interruption using a saturated timeout duration.\n* @param future the Future to retrieve the result from\n* @param timeout maximum wait time as Duration\n* @return result of the Future\n* @throws ExecutionException if the computation threw an exception\n* @throws TimeoutException if the timeout is exceeded\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.CountDownLatch,java.time.Duration)": "/**\n* Awaits latch completion for a specified duration.\n* @param latch the CountDownLatch to wait on\n* @param timeout max wait time as Duration\n* @return true if latch counted down, false if timeout occurred\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.locks.Condition,java.time.Duration)": "/**\n* Awaits condition with a timeout duration.\n* @param condition the Condition to await\n* @param timeout maximum time to wait\n* @return true if condition is met, false if timed out\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,long,java.util.concurrent.TimeUnit)": "/**\n* Attempts to acquire one permit from a semaphore without interruption.\n* @param semaphore the Semaphore to acquire from\n* @param timeout maximum wait time for acquiring the permit\n* @param unit time unit of the timeout\n* @return true if the permit was acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,int,java.time.Duration)": "/**\n* Attempts to acquire permits from a semaphore without interruption.\n* @param semaphore the Semaphore to acquire from\n* @param permits number of permits to acquire\n* @param timeout maximum wait time for acquiring permits\n* @return true if permits were acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:tryLockUninterruptibly(java.util.concurrent.locks.Lock,java.time.Duration)": "/**\n* Attempts to acquire a lock without interruption for a specified duration.\n* @param lock the Lock to acquire\n* @param timeout maximum time to wait as Duration\n* @return true if the lock was acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:awaitTerminationUninterruptibly(java.util.concurrent.ExecutorService,java.time.Duration)": "/**\n* Awaits executor termination with a specified timeout duration.\n* @param executor the ExecutorService to await\n* @param timeout maximum time to wait\n* @return true if terminated, false if timeout reached\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:joinUninterruptibly(java.lang.Thread,java.time.Duration)": "/**\n* Joins a thread uninterruptibly for a given duration.\n* @param toJoin thread to join\n* @param timeout maximum wait time as Duration\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:awaitTerminationUninterruptibly(java.util.concurrent.ExecutorService)": "/**\n* Awaits executor termination without interruption.\n* @param executor the ExecutorService to await\n*/",
        "com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,java.time.Duration)": "/**\n* Attempts to acquire a permit from a semaphore without interruption.\n* @param semaphore the Semaphore to acquire from\n* @param timeout maximum wait time for acquiring the permit\n* @return true if the permit was acquired, false otherwise\n*/"
    },
    "com.google.common.cache.LocalCache$LocalLoadingCache": {
        "com.google.common.cache.LocalCache$LocalLoadingCache:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; suggests using LoadingSerializationProxy instead.\n* @param in ObjectInputStream for reading object data\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.cache.LocalCache$LocalLoadingCache:writeReplace()": "/**\n* Prepares the object for serialization.\n* @return LoadingSerializationProxy for the localCache instance\n*/",
        "com.google.common.cache.LocalCache$LocalLoadingCache:<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)": "/**\n* Constructs a LocalLoadingCache with specified builder and loader.\n* @param builder cache configuration settings\n* @param loader CacheLoader for loading values\n*/",
        "com.google.common.cache.LocalCache$LocalLoadingCache:refresh(java.lang.Object)": "/**\n* Refreshes the cache entry for the specified key.\n* @param key the key for the cached value\n*/",
        "com.google.common.cache.LocalCache$LocalLoadingCache:get(java.lang.Object)": "/**\n* Retrieves value from local cache by key.\n* @param key the cache key\n* @return cached or newly loaded value\n* @throws ExecutionException if loading fails\n*/",
        "com.google.common.cache.LocalCache$LocalLoadingCache:getAll(java.lang.Iterable)": "/**\n* Retrieves values for specified keys from the local cache.\n* @param keys iterable collection of keys to fetch values for\n* @return ImmutableMap of found values\n* @throws ExecutionException if loading fails\n*/",
        "com.google.common.cache.LocalCache$LocalLoadingCache:getUnchecked(java.lang.Object)": "/**\n* Retrieves value by key, throwing unchecked exception on failure.\n* @param key the cache key\n* @return cached value\n*/",
        "com.google.common.cache.LocalCache$LocalLoadingCache:apply(java.lang.Object)": "/**\n* Applies a function to the given key.\n* @param key the input key\n* @return cached value for the key\n*/"
    },
    "com.google.common.cache.LocalCache$LocalManualCache": {
        "com.google.common.cache.LocalCache$LocalManualCache:<init>(com.google.common.cache.LocalCache)": "/**\n* Constructs a LocalManualCache with the specified localCache.\n* @param localCache instance of LocalCache to be used\n*/",
        "com.google.common.cache.LocalCache$LocalManualCache:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; instructs to use ManualSerializationProxy instead.\n* @param in ObjectInputStream for reading serialized objects\n* @throws InvalidObjectException when called\n*/",
        "com.google.common.cache.LocalCache$LocalManualCache:asMap()": "/**\n* Returns the local cache as a ConcurrentMap.\n* @return ConcurrentMap containing cached key-value pairs\n*/",
        "com.google.common.cache.LocalCache$LocalManualCache:size()": "/**\n* Returns the total size of entries in the local cache.\n* @return total number of entries in the cache\n*/",
        "com.google.common.cache.LocalCache$LocalManualCache:stats()": "/**\n* Aggregates and returns cache statistics.\n* @return CacheStats object with aggregated metrics from local cache\n*/",
        "com.google.common.cache.LocalCache$LocalManualCache:writeReplace()": "/**\n* Prepares the object for serialization.\n* @return ManualSerializationProxy for the localCache instance\n*/",
        "com.google.common.cache.LocalCache$LocalManualCache:<init>(com.google.common.cache.CacheBuilder)": "/**\n* Initializes LocalManualCache using a CacheBuilder.\n* @param builder configuration for cache creation\n*/",
        "com.google.common.cache.LocalCache$LocalManualCache:cleanUp()": "/**\n* Cleans up local cache by invoking its cleanUp method.\n*/",
        "com.google.common.cache.LocalCache$LocalManualCache:put(java.lang.Object,java.lang.Object)": "/**\n* Inserts a key-value pair into the local cache.\n* @param key the key to insert\n* @param value the value to associate with the key\n*/",
        "com.google.common.cache.LocalCache$LocalManualCache:invalidate(java.lang.Object)": "/**\n* Invalidates the cache entry for the specified key.\n* @param key the key of the entry to invalidate\n*/",
        "com.google.common.cache.LocalCache$LocalManualCache:invalidateAll()": "/**\n* Invalidates all entries in the local cache.\n* @return void\n*/",
        "com.google.common.cache.LocalCache$LocalManualCache:putAll(java.util.Map)": "/**\n* Inserts all key-value pairs from the provided map into the local cache.\n* @param m source map containing key-value pairs to insert\n*/",
        "com.google.common.cache.LocalCache$LocalManualCache:invalidateAll(java.lang.Iterable)": "/**\n* Invalidates all cache entries for the specified keys.\n* @param keys iterable collection of keys to remove from the cache\n*/",
        "com.google.common.cache.LocalCache$LocalManualCache:getIfPresent(java.lang.Object)": "/**\n* Retrieves cached value by key.\n* @param key the key to retrieve the value for\n* @return cached value or null if not found\n*/",
        "com.google.common.cache.LocalCache$LocalManualCache:getAllPresent(java.lang.Iterable)": "/**\n* Retrieves values for given keys from local cache.\n* @param keys iterable collection of keys to fetch values for\n* @return ImmutableMap of found key-value pairs\n*/",
        "com.google.common.cache.LocalCache$LocalManualCache:get(java.lang.Object,java.util.concurrent.Callable)": "/**\n* Retrieves a cached value or loads it using the provided valueLoader.\n* @param key the cache key\n* @param valueLoader callable to fetch the value\n* @return cached value or newly loaded value\n* @throws ExecutionException if loading fails\n*/"
    },
    "com.google.common.cache.LocalCache$ManualSerializationProxy": {
        "com.google.common.cache.LocalCache$ManualSerializationProxy:delegate()": "/**\n* Returns the delegate cache instance.\n* @return the delegate Cache object\n*/",
        "com.google.common.cache.LocalCache$ManualSerializationProxy:recreateCacheBuilder()": "/**\n* Creates and configures a CacheBuilder instance.\n* @return configured CacheBuilder for cache creation\n*/",
        "com.google.common.cache.LocalCache$ManualSerializationProxy:<init>(com.google.common.cache.LocalCache$Strength,com.google.common.cache.LocalCache$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,long,long,long,com.google.common.cache.Weigher,int,com.google.common.cache.RemovalListener,com.google.common.base.Ticker,com.google.common.cache.CacheLoader)": "/**\n* Constructs a ManualSerializationProxy with specified cache parameters.\n* @param keyStrength strength for keys, valueStrength for values, and other cache settings\n*/",
        "com.google.common.cache.LocalCache$ManualSerializationProxy:<init>(com.google.common.cache.LocalCache)": "/**\n* Constructs a ManualSerializationProxy from a LocalCache instance.\n* @param cache the LocalCache providing configuration parameters\n*/",
        "com.google.common.cache.LocalCache$ManualSerializationProxy:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state and initializes cache from input stream.\n* @param in ObjectInputStream for reading serialized object data\n*/"
    },
    "com.google.common.cache.LocalCache$Segment": {
        "com.google.common.cache.LocalCache$Segment:newEntryArray(int)": "/**\n* Creates a new AtomicReferenceArray of specified size.\n* @param size the size of the new array\n* @return an AtomicReferenceArray of the given size\n*/",
        "com.google.common.cache.LocalCache$Segment:clearKeyReferenceQueue()": "/**\n* Clears all entries from the key reference queue.\n*/",
        "com.google.common.cache.LocalCache$Segment:clearValueReferenceQueue()": "/**\n* Clears all elements from the value reference queue.\n*/",
        "com.google.common.cache.LocalCache$Segment:getFirst(int)": "/**\n* Retrieves the first entry in the table for the given hash.\n* @param hash computed hash value\n* @return ReferenceEntry corresponding to the hash or null if absent\n*/",
        "com.google.common.cache.LocalCache$Segment:newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Creates a new entry for the map.\n* @param key the key for the new entry\n* @param hash the hash code of the key\n* @param next the next entry in the chain, or null\n* @return a new ReferenceEntry object\n*/",
        "com.google.common.cache.LocalCache$Segment:drainRecencyQueue()": "/**\n* Drains entries from the recency queue to the access queue if present.\n*/",
        "com.google.common.cache.LocalCache$Segment:copyEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)": "/**\n* Copies a reference entry if its key and value are not collected.\n* @param original the entry to copy\n* @param newNext the next entry in the chain\n* @return a new ReferenceEntry or null if key/value is collected\n*/",
        "com.google.common.cache.LocalCache$Segment:initTable(java.util.concurrent.atomic.AtomicReferenceArray)": "/**\n* Initializes the table with a new size and adjusts the threshold for expansion.\n* @param newTable new reference entry array for the table\n*/",
        "com.google.common.cache.LocalCache$Segment:clearReferenceQueues()": "/**\n* Clears key and value reference queues if they are in use.\n*/",
        "com.google.common.cache.LocalCache$Segment:runUnlockedCleanup()": "/**\n* Cleans up notifications if not held by the current thread.\n*/",
        "com.google.common.cache.LocalCache$Segment:getNextEvictable()": "/**\n* Retrieves the next evictable entry from the access queue.\n* @return ReferenceEntry with weight > 0\n*/",
        "com.google.common.cache.LocalCache$Segment:postWriteCleanup()": "/**\n* Performs cleanup after writing operations.\n*/",
        "com.google.common.cache.LocalCache$Segment:<init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)": "/**\n* Constructs a Segment with specified parameters for caching.\n* @param map local cache reference, @param initialCapacity initial capacity, \n* @param maxSegmentWeight max weight, @param statsCounter stats tracker\n*/",
        "com.google.common.cache.LocalCache$Segment:recordRead(com.google.common.cache.ReferenceEntry,long)": "/**\n* Records access time for an entry if access is enabled.\n* @param entry the entry to update\n* @param now the current time for access recording\n*/",
        "com.google.common.cache.LocalCache$Segment:recordLockedRead(com.google.common.cache.ReferenceEntry,long)": "/**\n* Records access time for a locked entry if access is enabled.\n* @param entry the entry to update\n* @param now the current access time in milliseconds\n*/",
        "com.google.common.cache.LocalCache$Segment:recordWrite(com.google.common.cache.ReferenceEntry,int,long)": "/**\n* Records an entry with its weight and current time, managing queues and timestamps.\n* @param entry the entry to record\n* @param weight the weight of the entry\n* @param now the current time for access/write timestamps\n*/",
        "com.google.common.cache.LocalCache$Segment:enqueueNotification(java.lang.Object,int,java.lang.Object,int,com.google.common.cache.RemovalCause)": "/**\n* Enqueues a removal notification with updated total weight and stats.\n* @param key the key for the notification (nullable)\n* @param hash the hash of the key\n* @param value the value for the notification (nullable)\n* @param weight the weight to deduct from totalWeight\n* @param cause the reason for removal (non-null)\n*/",
        "com.google.common.cache.LocalCache$Segment:waitForLoadingValue(com.google.common.cache.ReferenceEntry,java.lang.Object,com.google.common.cache.LocalCache$ValueReference)": "/**\n* Waits for a loading value and records access if successful.\n* @param e cache entry, key the key for the value, valueReference loading reference\n* @return loaded value\n*/",
        "com.google.common.cache.LocalCache$Segment:setValue(com.google.common.cache.ReferenceEntry,java.lang.Object,java.lang.Object,long)": "/**** Sets the value for an entry with weight and current time. \n* @param entry the entry to update\n* @param key the key associated with the value\n* @param value the new value to set\n* @param now the current time for timestamping \n*/",
        "com.google.common.cache.LocalCache$Segment:removeCollectedEntry(com.google.common.cache.ReferenceEntry)": "/**\n* Removes a collected entry and enqueues a removal notification.\n* @param entry the entry to be removed\n*/",
        "com.google.common.cache.LocalCache$Segment:expand()": "/**\n* Expands the table by doubling its capacity and reallocating entries.\n*/",
        "com.google.common.cache.LocalCache$Segment:removeEntryFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)": "/**\n* Removes a specified entry from the chain and updates the count.\n* @param first the first entry in the chain\n* @param entry the entry to remove\n* @return new first entry or null if none remain\n*/",
        "com.google.common.cache.LocalCache$Segment:removeValueFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,com.google.common.cache.LocalCache$ValueReference,com.google.common.cache.RemovalCause)": "/**\n* Removes an entry from the chain and enqueues a removal notification.\n* @param first initial entry in the chain, @param entry entry to remove, @param key key of entry,\n* @param hash hash of the key, @param value value to remove, @param valueReference reference for value,\n* @param cause reason for removal\n* @return new first entry or null if none remain\n*/",
        "com.google.common.cache.LocalCache$Segment:removeLoadingValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference)": "/**\n* Removes a loading value by key and hash.\n* @param key the key to identify the entry\n* @param hash the hash of the key\n* @param valueReference the value reference to remove\n* @return true if removed, false if not found\n*/",
        "com.google.common.cache.LocalCache$Segment:loadAsync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)": "/**** Loads a value asynchronously and records stats on completion. \n* @param key the key for the value to load \n* @param hash the hash of the key \n* @param loadingValueReference reference for loading value \n* @param loader the CacheLoader to fetch the value \n* @return ListenableFuture containing the loaded value \n*/",
        "com.google.common.cache.LocalCache$Segment:reclaimKey(com.google.common.cache.ReferenceEntry,int)": "/**\n* Reclaims a key from the entry chain if found.\n* @param entry the entry to reclaim, @param hash entry's hash\n* @return true if reclaimed, false if not found\n*/",
        "com.google.common.cache.LocalCache$Segment:reclaimValue(java.lang.Object,int,com.google.common.cache.LocalCache$ValueReference)": "/**\n* Reclaims a value associated with the key if found.\n* @param key the key to reclaim the value for\n* @param hash the hash of the key\n* @param valueReference reference to the value to reclaim\n* @return true if value was reclaimed, false otherwise\n*/",
        "com.google.common.cache.LocalCache$Segment:removeEntry(com.google.common.cache.ReferenceEntry,int,com.google.common.cache.RemovalCause)": "/**\n* Removes an entry from the cache if present.\n* @param entry entry to remove, @param hash entry's hash, @param cause reason for removal\n* @return true if removed, false if not found\n*/",
        "com.google.common.cache.LocalCache$Segment:expireEntries(long)": "/**\n* Expires entries in the cache based on the current time.\n* @param now current time in nanoseconds\n*/",
        "com.google.common.cache.LocalCache$Segment:evictEntries(com.google.common.cache.ReferenceEntry)": "/**\n* Evicts cache entries based on size limits.\n* @param newest the most recently added entry to consider for eviction\n*/",
        "com.google.common.cache.LocalCache$Segment:drainKeyReferenceQueue()": "/**** Drains key references from the queue and reclaims associated cache entries. */",
        "com.google.common.cache.LocalCache$Segment:drainValueReferenceQueue()": "/**\n* Drains and reclaims values from the value reference queue.\n*/",
        "com.google.common.cache.LocalCache$Segment:tryExpireEntries(long)": "/**\n* Attempts to expire cache entries if lock is acquired.\n* @param now current time in nanoseconds\n*/",
        "com.google.common.cache.LocalCache$Segment:drainReferenceQueues()": "/**\n* Drains key and value reference queues if they are in use.\n*/",
        "com.google.common.cache.LocalCache$Segment:tryDrainReferenceQueues()": "/**\n* Attempts to drain reference queues if lock acquisition is successful.\n*/",
        "com.google.common.cache.LocalCache$Segment:runLockedCleanup(long)": "/**\n* Cleans up references and expires cache entries if locked.\n* @param now current time in nanoseconds\n*/",
        "com.google.common.cache.LocalCache$Segment:getEntry(java.lang.Object,int)": "/**\n* Retrieves entry by key and hash; returns null if not found.\n* @param key the key to search for\n* @param hash computed hash value\n* @return ReferenceEntry matching the key or null\n*/",
        "com.google.common.cache.LocalCache$Segment:getLiveValue(com.google.common.cache.ReferenceEntry,long)": "/**\n* Retrieves live value from cache entry; returns null if expired or key is absent.\n* @param entry the ReferenceEntry to check\n* @param now current time in nanoseconds\n* @return live value or null if key is absent or entry is expired\n*/",
        "com.google.common.cache.LocalCache$Segment:preWriteCleanup(long)": "/**\n* Performs cleanup before writing.\n* @param now current time in nanoseconds\n*/",
        "com.google.common.cache.LocalCache$Segment:cleanUp()": "/**\n* Cleans up resources by running locked and unlocked cleanup processes.\n* @param now current time in nanoseconds\n*/",
        "com.google.common.cache.LocalCache$Segment:getLiveEntry(java.lang.Object,int,long)": "/**\n* Retrieves a live cache entry by key; returns null if not found or expired.\n* @param key the key to search for\n* @param hash computed hash value\n* @param now current time in nanoseconds\n* @return ReferenceEntry if live, otherwise null\n*/",
        "com.google.common.cache.LocalCache$Segment:insertLoadingValueReference(java.lang.Object,int,boolean)": "/**\n* Inserts a loading value reference for a key, or returns null if already loading.\n* @param key the key for the entry\n* @param hash the hash code of the key\n* @param checkTime flag to check if refresh is needed\n* @return LoadingValueReference or null if loading is pending\n*/",
        "com.google.common.cache.LocalCache$Segment:put(java.lang.Object,int,java.lang.Object,boolean)": "/**\n* Puts a value in the map, updating or creating entries based on conditions.\n* @param key the key for the entry\n* @param hash the hash of the key\n* @param value the value to store\n* @param onlyIfAbsent if true, do not overwrite existing value\n* @return previous value or null if new entry\n*/",
        "com.google.common.cache.LocalCache$Segment:replace(java.lang.Object,int,java.lang.Object,java.lang.Object)": "/**\n* Replaces oldValue with newValue for a key if it matches and is present.\n* @param key the key for the entry to replace\n* @param hash the hash of the key\n* @param oldValue the current value to replace\n* @param newValue the new value to set\n* @return true if replaced, false otherwise\n*/",
        "com.google.common.cache.LocalCache$Segment:replace(java.lang.Object,int,java.lang.Object)": "/**\n* Replaces value for a key if present; returns old value or null if absent.\n* @param key the key to replace value for\n* @param hash the hash of the key\n* @param newValue the new value to set\n* @return previous value or null if key not found\n*/",
        "com.google.common.cache.LocalCache$Segment:remove(java.lang.Object,int)": "/**\n* Removes an entry by key and hash from the cache.\n* @param key the key of the entry to remove\n* @param hash the hash of the key\n* @return the removed value or null if not found\n*/",
        "com.google.common.cache.LocalCache$Segment:remove(java.lang.Object,int,java.lang.Object)": "/**\n* Removes an entry by key and hash; returns true if explicitly removed.\n* @param key the key of the entry to remove\n* @param hash the hash of the key\n* @param value the value to match for removal\n* @return true if the entry was removed, false otherwise\n*/",
        "com.google.common.cache.LocalCache$Segment:storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object)": "/**\n* Stores a loaded value in the cache, updating or adding as necessary.\n* @param key the key for the value\n* @param hash the hash of the key\n* @param oldValueReference reference to the old value\n* @param newValue the new value to store\n* @return true if stored successfully, false if clobbered\n*/",
        "com.google.common.cache.LocalCache$Segment:clear()": "/**\n* Clears the map, removing all entries and resetting state.\n* @param count number of entries in the map\n*/",
        "com.google.common.cache.LocalCache$Segment:postReadCleanup()": "/**\n* Cleans up resources when read count reaches the drain threshold.\n*/",
        "com.google.common.cache.LocalCache$Segment:refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean)": "/**\n* Refreshes a cached value using a loader.\n* @param key the key for the cached value\n* @param hash the hash code of the key\n* @param loader the CacheLoader to fetch the value\n* @param checkTime flag to check if refresh is needed\n* @return the refreshed value or null if loading is pending\n*/",
        "com.google.common.cache.LocalCache$Segment:getAndRecordStats(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.util.concurrent.ListenableFuture)": "/**\n* Retrieves and stores a value, recording load stats and handling exceptions.\n* @param key the cache key\n* @param hash the hash of the key\n* @param loadingValueReference reference for loading value\n* @param newValue future value to retrieve\n* @return the loaded value\n*/",
        "com.google.common.cache.LocalCache$Segment:containsKey(java.lang.Object,int)": "/**\n* Checks if the map contains a key with a non-null value.\n* @param key the key to check\n* @param hash the hash of the key\n* @return true if the key exists with a non-null value, false otherwise\n*/",
        "com.google.common.cache.LocalCache$Segment:containsValue(java.lang.Object)": "/**\n* Checks if the specified value exists in the map.\n* @param value the value to search for\n* @return true if found, false otherwise\n*/",
        "com.google.common.cache.LocalCache$Segment:scheduleRefresh(com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,long,com.google.common.cache.CacheLoader)": "/**\n* Schedules a refresh of the cached value if conditions are met.\n* @param entry the cache entry to refresh\n* @param key the key for the cached value\n* @param hash the hash code of the key\n* @param oldValue the current cached value\n* @param now the current time in milliseconds\n* @param loader the CacheLoader to fetch the new value\n* @return the refreshed value or oldValue if no refresh occurs\n*/",
        "com.google.common.cache.LocalCache$Segment:compute(java.lang.Object,int,java.util.function.BiFunction)": "/**\n* Computes and caches a value for the given key using a provided function.\n* @param key the key to compute the value for\n* @param hash the hash of the key\n* @param function the function to compute the value\n* @return the computed value or null if not computable\n*/",
        "com.google.common.cache.LocalCache$Segment:loadSync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)": "/**\n* Loads a value synchronously from cache.\n* @param key cache key\n* @param hash key's hash\n* @param loadingValueReference reference for loading value\n* @param loader CacheLoader to fetch the value\n* @return loaded value\n*/",
        "com.google.common.cache.LocalCache$Segment:get(java.lang.Object,int)": "/**\n* Retrieves cached value by key; refreshes if accessed and not expired.\n* @param key the key to retrieve the value for\n* @param hash computed hash of the key\n* @return cached value or null if not found\n*/",
        "com.google.common.cache.LocalCache$Segment:lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader)": "/**\n* Retrieves or loads a value for the given key, handling concurrency and expiration.\n* @param key the cache key\n* @param hash the hash code of the key\n* @param loader CacheLoader to fetch the value\n* @return the cached or newly loaded value\n* @throws ExecutionException if loading fails\n*/",
        "com.google.common.cache.LocalCache$Segment:get(java.lang.Object,int,com.google.common.cache.CacheLoader)": "/**\n* Retrieves or loads a value for a given key, handling concurrency and expiration.\n* @param key the cache key\n* @param hash the hash code of the key\n* @param loader CacheLoader to fetch the value\n* @return the cached or newly loaded value\n* @throws ExecutionException if loading fails\n*/"
    },
    "com.google.common.util.concurrent.ExecutionError": {
        "com.google.common.util.concurrent.ExecutionError:<init>(java.lang.Error)": "/**\n* Constructs an ExecutionError with an optional cause.\n* @param cause the underlying error or null if none\n*/",
        "com.google.common.util.concurrent.ExecutionError:<init>()": "/**\n* Deprecated constructor for ExecutionError class.\n*/",
        "com.google.common.util.concurrent.ExecutionError:<init>(java.lang.String)": "/**\n* Constructs an ExecutionError with an optional message.\n* @param message optional error message, may be null\n*/",
        "com.google.common.util.concurrent.ExecutionError:<init>(java.lang.String,java.lang.Error)": "/**\n* Constructs an ExecutionError with a message and a cause.\n* @param message optional error message\n* @param cause optional underlying error cause\n*/"
    },
    "com.google.common.cache.LocalCache$WriteQueue": {
        "com.google.common.cache.LocalCache$WriteQueue:peek()": "/**\n* Retrieves the next entry in the write queue or null if at the head.\n* @return ReferenceEntry or null if no next entry exists\n*/",
        "com.google.common.cache.LocalCache$WriteQueue:contains(java.lang.Object)": "/**\n* Checks if the specified entry is in the write queue.\n* @param o entry to check for presence\n* @return true if entry exists, false otherwise\n*/",
        "com.google.common.cache.LocalCache$WriteQueue:isEmpty()": "/**\n* Checks if the queue is empty.\n* @return true if empty, false otherwise\n*/",
        "com.google.common.cache.LocalCache$WriteQueue:size()": "/**\n* Returns the number of entries in the write queue.\n* @return the count of entries in the queue\n*/",
        "com.google.common.cache.LocalCache$WriteQueue:offer(com.google.common.cache.ReferenceEntry)": "/**\n* Adds an entry to the write queue and maintains links.\n* @param entry the entry to be added\n* @return true if the entry is added successfully\n*/",
        "com.google.common.cache.LocalCache$WriteQueue:iterator()": "/**\n* Returns an iterator for the write queue entries.\n* @return Iterator of ReferenceEntry or null if at the head\n*/",
        "com.google.common.cache.LocalCache$WriteQueue:remove(java.lang.Object)": "/**\n* Removes an entry from the write order queue.\n* @param o the entry to remove\n* @return true if the entry was successfully removed\n*/",
        "com.google.common.cache.LocalCache$WriteQueue:clear()": "/**\n* Clears the write queue by resetting all entries to head.\n*/",
        "com.google.common.cache.LocalCache$WriteQueue:poll()": "/**\n* Retrieves and removes the next entry from the write queue.\n* @return the next ReferenceEntry or null if the queue is empty\n*/"
    },
    "com.google.common.cache.LocalCache$SoftValueReference": {
        "com.google.common.cache.LocalCache$SoftValueReference:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)": "/**\n* Constructs a SoftValueReference with a referent and entry.\n* @param queue ReferenceQueue for cleanup\n* @param referent the soft-referenced object\n* @param entry associated ReferenceEntry\n*/",
        "com.google.common.cache.LocalCache$SoftValueReference:waitForValue()": "/**\n* Retrieves the value, waiting for it to be available.\n* @return the retrieved value of type V\n*/",
        "com.google.common.cache.LocalCache$SoftValueReference:getEntry()": "/**\n* Retrieves the reference entry.\n* @return ReferenceEntry object associated with this instance\n*/",
        "com.google.common.cache.LocalCache$SoftValueReference:isActive()": "/**\n* Checks if the current object is active.\n* @return true, indicating the object is active\n*/",
        "com.google.common.cache.LocalCache$SoftValueReference:isLoading()": "/**\n* Indicates if the loading process is active.\n* @return false, as loading is not in progress\n*/",
        "com.google.common.cache.LocalCache$SoftValueReference:notifyNewValue(java.lang.Object)": "/**\n* Notifies listeners of a new value.\n* @param newValue the updated value to notify\n*/",
        "com.google.common.cache.LocalCache$SoftValueReference:getWeight()": "/**\n* Returns the weight value of the object.\n* @return weight as an integer, always returns 1\n*/",
        "com.google.common.cache.LocalCache$SoftValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)": "/**\n* Creates a copy of SoftValueReference for given value and entry.\n* @param queue ReferenceQueue for cleanup\n* @param value the soft-referenced object\n* @param entry associated ReferenceEntry\n* @return new ValueReference instance\n*/"
    },
    "com.google.common.cache.LocalCache$StrongValueReference": {
        "com.google.common.cache.LocalCache$StrongValueReference:<init>(java.lang.Object)": "/**\n* Constructs a StrongValueReference with the given referent.\n* @param referent the object to be strongly referenced\n*/",
        "com.google.common.cache.LocalCache$StrongValueReference:get()": "/**\n* Retrieves the referent value.\n* @return the referent of type V\n*/",
        "com.google.common.cache.LocalCache$StrongValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)": "/**\n* Returns the current instance for copying.\n* @param queue reference queue for garbage collection\n* @param value value to associate with the reference\n* @param entry reference entry associated with the key\n* @return the current ValueReference instance\n*/",
        "com.google.common.cache.LocalCache$StrongValueReference:getEntry()": "/**\n* Retrieves the reference entry.\n* @return null as no entry is currently available\n*/",
        "com.google.common.cache.LocalCache$StrongValueReference:isActive()": "/**\n* Checks if the current instance is active.\n* @return true if active, otherwise false\n*/",
        "com.google.common.cache.LocalCache$StrongValueReference:isLoading()": "/**\n* Indicates if the loading process is currently active.\n* @return false, as loading is not in progress\n*/",
        "com.google.common.cache.LocalCache$StrongValueReference:notifyNewValue(java.lang.Object)": "/**\n* Notifies listeners of a new value.\n* @param newValue the new value to notify\n*/",
        "com.google.common.cache.LocalCache$StrongValueReference:getWeight()": "/**\n* Returns the weight value of the object.\n* @return weight as an integer, always 1\n*/",
        "com.google.common.cache.LocalCache$StrongValueReference:waitForValue()": "/**\n* Waits for and retrieves the referent value.\n* @return the referent of type V\n*/"
    },
    "com.google.common.cache.LocalCache$WeakValueReference": {
        "com.google.common.cache.LocalCache$WeakValueReference:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)": "/**\n* Constructs a WeakValueReference with a reference entry.\n* @param queue  the reference queue for cleanup\n* @param referent  the referenced object\n* @param entry  the associated reference entry\n*/",
        "com.google.common.cache.LocalCache$WeakValueReference:waitForValue()": "/**\n* Retrieves the value, blocking until it is available.\n* @return the available value of type V\n*/",
        "com.google.common.cache.LocalCache$WeakValueReference:getEntry()": "/**\n* Retrieves the current reference entry.\n* @return ReferenceEntry object associated with this instance\n*/",
        "com.google.common.cache.LocalCache$WeakValueReference:isActive()": "/**\n* Checks if the current instance is active.\n* @return true if active, otherwise false\n*/",
        "com.google.common.cache.LocalCache$WeakValueReference:isLoading()": "/**\n* Checks if the loading process is currently active.\n* @return false, indicating loading is not in progress\n*/",
        "com.google.common.cache.LocalCache$WeakValueReference:notifyNewValue(java.lang.Object)": "/**\n* Notifies observers of a new value.\n* @param newValue the updated value to notify\n*/",
        "com.google.common.cache.LocalCache$WeakValueReference:getWeight()": "/**\n* Returns the weight of the object.\n* @return integer representing the weight\n*/",
        "com.google.common.cache.LocalCache$WeakValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)": "/**\n* Creates a copy of WeakValueReference using provided queue, value, and entry.\n* @param queue the reference queue for cleanup\n* @param value the value to be referenced\n* @param entry the associated reference entry\n* @return new WeakValueReference instance\n*/"
    },
    "com.google.common.cache.LocalCache$Values": {
        "com.google.common.cache.LocalCache$Values:iterator()": "/**\n* Returns an iterator over the values.\n* @return Iterator for the values in the collection\n*/",
        "com.google.common.cache.LocalCache$Values:isEmpty()": "/**\n* Checks if the cache is empty.\n* @return true if the cache is empty, false otherwise\n*/",
        "com.google.common.cache.LocalCache$Values:size()": "/**\n* Returns the size of the cache.\n* @return int representing the number of segments in the cache\n*/",
        "com.google.common.cache.LocalCache$Values:contains(java.lang.Object)": "/**\n* Checks if the cache contains a specified object.\n* @param o the object to search for; may be null\n* @return true if the object is found, false otherwise\n*/",
        "com.google.common.cache.LocalCache$Values:clear()": "/**\n* Clears all segments in the local cache.\n* @return void\n*/",
        "com.google.common.cache.LocalCache$Values:removeIf(java.util.function.Predicate)": "/**\n* Removes entries matching the filter predicate.\n* @param filter predicate to test values\n* @return true if entries were removed, false otherwise\n*/"
    },
    "com.google.common.cache.LocalCache$WeakEntry": {
        "com.google.common.cache.LocalCache$WeakEntry:getKey()": "/**\n* Retrieves the key associated with the current object.\n* @return the key of type K\n*/",
        "com.google.common.cache.LocalCache$WeakEntry:getAccessTime()": "/**\n* Throws UnsupportedOperationException as access time retrieval is not supported.\n* @return always throws exception, no value returned\n*/",
        "com.google.common.cache.LocalCache$WeakEntry:setAccessTime(long)": "/**\n* Sets the access time but throws an exception as operation is unsupported.\n* @param time the access time to set\n*/",
        "com.google.common.cache.LocalCache$WeakEntry:getNextInAccessQueue()": "/**\n* Throws UnsupportedOperationException when accessing the next entry in the access queue.\n*/",
        "com.google.common.cache.LocalCache$WeakEntry:setNextInAccessQueue(com.google.common.cache.ReferenceEntry)": "/**\n* Sets the next entry in the access queue; operation is unsupported.\n* @param next the next ReferenceEntry in the queue\n*/",
        "com.google.common.cache.LocalCache$WeakEntry:getPreviousInAccessQueue()": "/**\n* Throws UnsupportedOperationException for accessing previous entry in access queue.\n* @return always throws an exception\n*/",
        "com.google.common.cache.LocalCache$WeakEntry:setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry)": "/**\n* Sets the previous entry in the access queue; not supported.\n* @param previous the previous ReferenceEntry to set\n*/",
        "com.google.common.cache.LocalCache$WeakEntry:getWriteTime()": "/**\n* Throws UnsupportedOperationException for write time retrieval.\n* @return always throws exception, no value returned\n*/",
        "com.google.common.cache.LocalCache$WeakEntry:setWriteTime(long)": "/**\n* Throws UnsupportedOperationException when attempting to set write time.\n* @param time the write time to set (not supported)\n*/",
        "com.google.common.cache.LocalCache$WeakEntry:getNextInWriteQueue()": "/**\n* Throws an exception as getting the next entry in the write queue is unsupported.\n*/",
        "com.google.common.cache.LocalCache$WeakEntry:setNextInWriteQueue(com.google.common.cache.ReferenceEntry)": "/**\n* Sets the next entry in the write queue; operation not supported.\n* @param next the next ReferenceEntry in the queue\n*/",
        "com.google.common.cache.LocalCache$WeakEntry:getPreviousInWriteQueue()": "/**\n* Throws UnsupportedOperationException when accessing previous entry in write queue.\n* @return ReferenceEntry object, but not supported\n*/",
        "com.google.common.cache.LocalCache$WeakEntry:setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry)": "/**\n* Sets the previous entry in the write queue, unsupported operation.\n* @param previous the previous ReferenceEntry to set\n*/",
        "com.google.common.cache.LocalCache$WeakEntry:getHash()": "/**\n* Retrieves the hash value.\n* @return the hash integer value\n*/",
        "com.google.common.cache.LocalCache$WeakEntry:getNext()": "/**\n* Retrieves the next reference entry.\n* @return the next ReferenceEntry object\n*/",
        "com.google.common.cache.LocalCache$WeakEntry:getValueReference()": "/**\n* Retrieves the current value reference.\n* @return ValueReference object associated with the key-value pair\n*/",
        "com.google.common.cache.LocalCache$WeakEntry:setValueReference(com.google.common.cache.LocalCache$ValueReference)": "/**\n* Sets the value reference for the object.\n* @param valueReference the ValueReference to be set\n*/",
        "com.google.common.cache.LocalCache$WeakEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Constructs a WeakEntry with key, hash, and optional next entry.\n* @param queue reference queue for garbage collection\n* @param key the weakly referenced key\n* @param hash hash code for the key\n* @param next optional next entry in the chain\n*/"
    },
    "com.google.common.primitives.Ints": {
        "com.google.common.primitives.Ints:saturatedCast(long)": "/**\n* Casts long value to int with saturation at Integer limits.\n* @param value the long value to cast\n* @return saturated int value within Integer range\n*/",
        "com.google.common.primitives.Ints:compare(int,int)": "/**\n* Compares two integers.\n* @param a first integer to compare\n* @param b second integer to compare\n* @return negative if a < b, zero if a == b, positive if a > b\n*/",
        "com.google.common.primitives.Ints:fromBytes(byte,byte,byte,byte)": "/**\n* Converts four bytes to an integer.\n* @param b1, b2, b3, b4 byte values to combine\n* @return combined integer value\n*/",
        "com.google.common.primitives.Ints:toByteArray(int)": "/**\n* Converts an integer to a byte array (4 bytes).\n* @param value the integer to convert\n* @return byte array representing the integer\n*/",
        "com.google.common.primitives.Ints:hashCode(int)": "/**\n* Returns the hash code for a given integer value.\n* @param value the integer to hash\n* @return the integer itself as its hash code\n*/",
        "com.google.common.primitives.Ints:<init>()": "/**\n* Private constructor for the Ints class to prevent instantiation.\n*/",
        "com.google.common.primitives.Ints:indexOf(int[],int,int,int)": "/**\n* Finds the index of a target value in a subarray.\n* @param array the array to search\n* @param target the value to find\n* @param start the starting index for search\n* @param end the ending index for search\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Ints:lastIndexOf(int[],int,int,int)": "/**\n* Finds the last index of target in the specified array range.\n* @param array the array to search in\n* @param target the value to find\n* @param start the starting index for the search\n* @param end the ending index for the search\n* @return the last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Ints:indexOf(int[],int[])": "/**\n* Finds the starting index of target array in the given array.\n* @param array the array to search within\n* @param target the array to find\n* @return index of target in array or -1 if not found\n*/",
        "com.google.common.primitives.Ints:constrainToRange(int,int,int)": "/**\n* Constrains value within the specified range [min, max].\n* @param value the value to constrain\n* @param min the minimum allowable value\n* @param max the maximum allowable value\n* @return constrained value within [min, max]\n*/",
        "com.google.common.primitives.Ints:ensureCapacity(int[],int,int)": "/**\n* Ensures the array has at least minLength, adding padding if necessary.\n* @param array the original array\n* @param minLength minimum required length\n* @param padding additional length to add if resized\n* @return resized array or original if sufficient\n*/",
        "com.google.common.primitives.Ints:checkedCast(long)": "/**\n* Casts a long to int after validating the range.\n* @param value the long value to cast\n* @return the int result of the cast\n*/",
        "com.google.common.primitives.Ints:fromByteArray(byte[])": "/**\n* Converts a byte array to an integer.\n* @param bytes array of bytes, must be at least 4 elements\n* @return combined integer from the first four bytes\n*/",
        "com.google.common.primitives.Ints:toArray(java.util.Collection)": "/**\n* Converts a collection of Numbers to an integer array.\n* @param collection input collection of Numbers\n* @return an array of integers derived from the collection\n*/",
        "com.google.common.primitives.Ints:indexOf(int[],int)": "/**\n* Finds the index of a target value in the entire array.\n* @param array the array to search\n* @param target the value to find\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Ints:lastIndexOf(int[],int)": "/**\n* Finds the last index of target in the entire array.\n* @param array the array to search in\n* @param target the value to find\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Ints:tryParse(java.lang.String,int)": "/**\n* Parses a string to an Integer based on the specified radix.\n* @param string the string to parse; @param radix the base for conversion (2-36)\n* @return parsed Integer or null for invalid input or out of range\n*/",
        "com.google.common.primitives.Ints:reverse(int[],int,int)": "/**\n* Reverses a portion of the array from fromIndex to toIndex.\n* @param array the array to be reversed\n* @param fromIndex starting index of the portion\n* @param toIndex ending index of the portion\n*/",
        "com.google.common.primitives.Ints:tryParse(java.lang.String)": "/**\n* Parses a string to an Integer using base 10.\n* @param string the string to parse\n* @return parsed Integer or null for invalid input\n*/",
        "com.google.common.primitives.Ints:sortDescending(int[],int,int)": "/**\n* Sorts array in descending order from specified indices.\n* @param array the array to sort\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n*/",
        "com.google.common.primitives.Ints:reverse(int[])": "/**\n* Reverses the entire array after validating it is not null.\n* @param array the array to be reversed\n*/",
        "com.google.common.primitives.Ints:rotate(int[],int,int,int)": "/**\n* Rotates a subarray within the specified indices by a given distance.\n* @param array the array to rotate, @param distance the rotation distance, \n* @param fromIndex starting index, @param toIndex ending index\n*/",
        "com.google.common.primitives.Ints:sortDescending(int[])": "/**\n* Sorts the given array in descending order.\n* @param array the array to sort; must not be null\n*/",
        "com.google.common.primitives.Ints:rotate(int[],int)": "/**\n* Rotates the entire array by a specified distance.\n* @param array the array to rotate, @param distance the rotation distance\n*/"
    },
    "com.google.common.collect.Sets": {
        "com.google.common.collect.Sets:newLinkedHashSet()": "/**\n* Creates a new instance of LinkedHashSet.\n* @return a new LinkedHashSet of generic type E\n*/",
        "com.google.common.collect.Sets:hashCodeImpl(java.util.Set)": "/**\n* Computes the hash code for a given set.\n* @param s the set to calculate the hash code for\n* @return the computed hash code as an integer\n*/",
        "com.google.common.collect.Sets:equalsImpl(java.util.Set,java.lang.Object)": "/**\n* Compares a set with another object for equality.\n* @param s the set to compare\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Sets:removeAllImpl(java.util.Set,java.util.Iterator)": "/**\n* Removes all elements from the set using the provided iterator.\n* @param set the set from which elements are removed\n* @param iterator an iterator for the elements to remove\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.Sets:newHashSet()": "/**\n* Creates a new empty HashSet instance.\n* @return a new HashSet of type E\n*/",
        "com.google.common.collect.Sets:<init>()": "/**\n* Private constructor for the Sets class to prevent instantiation.\n*/",
        "com.google.common.collect.Sets:newTreeSet()": "/**\n* Creates a new empty TreeSet.\n* @return a TreeSet instance for storing comparable elements\n*/",
        "com.google.common.collect.Sets:newCopyOnWriteArraySet()": "/**\n* Creates a new, empty CopyOnWriteArraySet.\n* @return a new instance of CopyOnWriteArraySet\n*/",
        "com.google.common.collect.Sets:makeComplementByHand(java.util.Collection,java.lang.Class)": "/**\n* Creates the complement of an EnumSet from a given collection.\n* @param collection input collection of Enum values\n* @param type Enum class type for the elements\n* @return EnumSet containing elements not in the collection\n*/",
        "com.google.common.collect.Sets:newSetFromMap(java.util.Map)": "/**\n* Creates a set backed by the specified map.\n* @param map a map to back the set\n* @return a set view of the map keys\n*/",
        "com.google.common.collect.Sets:union(java.util.Set,java.util.Set)": "/**\n* Computes the union of two sets.\n* @param set1 first set, must not be null\n* @param set2 second set, must not be null\n* @return SetView representing the union of set1 and set2\n*/",
        "com.google.common.collect.Sets:intersection(java.util.Set,java.util.Set)": "/**\n* Computes the intersection of two sets.\n* @param set1 first set to intersect\n* @param set2 second set to intersect\n* @return SetView of common elements\n*/",
        "com.google.common.collect.Sets:difference(java.util.Set,java.util.Set)": "/**\n* Computes the difference between two sets.\n* @param set1 the primary set, @param set2 the set to subtract from\n* @return a SetView of elements in set1 not in set2\n*/",
        "com.google.common.collect.Sets:symmetricDifference(java.util.Set,java.util.Set)": "/**\n* Computes the symmetric difference of two sets.\n* @param set1 first input set\n* @param set2 second input set\n* @return SetView of elements in either set1 or set2 but not both\n*/",
        "com.google.common.collect.Sets:newTreeSet(java.util.Comparator)": "/**\n* Creates a new TreeSet with the specified comparator.\n* @param comparator the comparator for ordering elements\n* @return a new TreeSet instance\n*/",
        "com.google.common.collect.Sets:newIdentityHashSet()": "/**\n* Creates a new IdentityHashSet.\n* @return a Set backed by an IdentityHashMap\n*/",
        "com.google.common.collect.Sets:newConcurrentHashSet()": "/**\n* Creates a new thread-safe Set instance.\n* @return a thread-safe Set of type E\n*/",
        "com.google.common.collect.Sets:toImmutableEnumSet()": "/**\n* Creates a collector for immutable sets of enum constants.\n* @return Collector for converting enums to ImmutableSet\n*/",
        "com.google.common.collect.Sets:complementOf(java.util.Collection)": "/**\n* Returns the complement of an EnumSet from a given collection.\n* @param collection input collection of Enum values\n* @return EnumSet containing elements not in the collection\n*/",
        "com.google.common.collect.Sets:complementOf(java.util.Collection,java.lang.Class)": "/**\n* Returns the complement of an EnumSet from a given collection.\n* @param collection input collection of Enum values\n* @param type Enum class type for the elements\n* @return EnumSet containing elements not in the collection\n*/",
        "com.google.common.collect.Sets:removeAllImpl(java.util.Set,java.util.Collection)": "/**\n* Removes elements in collection from the specified set.\n* @param set the set to modify\n* @param collection elements to remove from the set\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.Sets:newHashSet(java.util.Iterator)": "/**\n* Creates a HashSet from an iterator of elements.\n* @param elements iterator providing elements to add\n* @return a new HashSet containing the elements\n*/",
        "com.google.common.collect.Sets:newHashSetWithExpectedSize(int)": "/**\n* Creates a HashSet with an initial capacity based on expected size.\n* @param expectedSize desired size of the HashSet\n* @return a new HashSet instance\n*/",
        "com.google.common.collect.Sets:newLinkedHashSetWithExpectedSize(int)": "/**\n* Creates a LinkedHashSet with an initial capacity based on expected size.\n* @param expectedSize desired size for the collection\n* @return a new LinkedHashSet instance\n*/",
        "com.google.common.collect.Sets:subSet(java.util.NavigableSet,com.google.common.collect.Range)": "/**\n* Returns a subset of a NavigableSet within the specified range.\n* @param set the original NavigableSet\n* @param range the range defining the subset\n* @return a NavigableSet view of the specified range\n*/",
        "com.google.common.collect.Sets:newEnumSet(java.lang.Iterable,java.lang.Class)": "/**\n* Creates an EnumSet from an iterable of enum elements.\n* @param iterable source of enum elements\n* @param elementType class of the enum type\n* @return EnumSet containing the elements\n*/",
        "com.google.common.collect.Sets:newConcurrentHashSet(java.lang.Iterable)": "/**\n* Creates a thread-safe Set from the provided elements.\n* @param elements source of elements to add\n* @return thread-safe Set containing the elements\n*/",
        "com.google.common.collect.Sets:newLinkedHashSet(java.lang.Iterable)": "/**\n* Creates a LinkedHashSet from an iterable of elements.\n* @param elements source elements to add\n* @return a new LinkedHashSet containing the elements\n*/",
        "com.google.common.collect.Sets:newTreeSet(java.lang.Iterable)": "/**\n* Creates a TreeSet from an iterable of comparable elements.\n* @param elements source of elements to add\n* @return a TreeSet containing the elements\n*/",
        "com.google.common.collect.Sets:newHashSet(java.lang.Iterable)": "/**** Creates a HashSet from an Iterable of elements. \n* @param elements iterable providing elements to add \n* @return a new HashSet containing the elements \n*/",
        "com.google.common.collect.Sets:filter(java.util.SortedSet,com.google.common.base.Predicate)": "/**\n* Filters a sorted set based on a given predicate.\n* @param unfiltered the original sorted set\n* @param predicate condition to filter elements\n* @return a new filtered sorted set\n*/",
        "com.google.common.collect.Sets:newCopyOnWriteArraySet(java.lang.Iterable)": "/**\n* Creates a CopyOnWriteArraySet from an Iterable of elements.\n* @param elements iterable providing elements for the set\n* @return new CopyOnWriteArraySet containing the elements\n*/",
        "com.google.common.collect.Sets:filter(java.util.NavigableSet,com.google.common.base.Predicate)": "/**\n* Filters a NavigableSet based on a given predicate.\n* @param unfiltered the original NavigableSet to filter\n* @param predicate the condition to filter elements\n* @return a new filtered NavigableSet\n*/",
        "com.google.common.collect.Sets:filter(java.util.Set,com.google.common.base.Predicate)": "/**\n* Filters a set based on a predicate.\n* @param unfiltered the original set to filter\n* @param predicate condition to filter elements\n* @return a new filtered set\n*/",
        "com.google.common.collect.Sets:unmodifiableNavigableSet(java.util.NavigableSet)": "/**\n* Returns an unmodifiable view of the given navigable set.\n* @param set the navigable set to wrap\n* @return unmodifiable NavigableSet\n*/",
        "com.google.common.collect.Sets:immutableEnumSet(java.lang.Iterable)": "/**\n* Converts an Iterable of Enums to an ImmutableSet.\n* @param elements iterable of Enum elements\n* @return ImmutableSet representation of the input\n*/",
        "com.google.common.collect.Sets:synchronizedNavigableSet(java.util.NavigableSet)": "/**** Creates a synchronized NavigableSet from the provided set. \n* @param navigableSet the navigable set to synchronize \n* @return synchronized NavigableSet instance \n*/",
        "com.google.common.collect.Sets:cartesianProduct(java.util.List)": "/**\n* Computes the Cartesian product of a list of sets.\n* @param sets list of sets to generate the product from\n* @return Set of lists representing the Cartesian product\n*/",
        "com.google.common.collect.Sets:combinations(java.util.Set,int)": "/**\n* Generates all combinations of a specified size from a given set.\n* @param set input set of elements\n* @param size size of each combination\n* @return Set of combinations of specified size\n*/",
        "com.google.common.collect.Sets:powerSet(java.util.Set)": "/**\n* Generates the power set of a given set.\n* @param set input set to generate its power set\n* @return Set of all subsets of the input set\n*/"
    },
    "com.google.common.cache.RemovalListeners": {
        "com.google.common.cache.RemovalListeners:<init>()": "/**\n* Private constructor for RemovalListeners; prevents instantiation.\n*/",
        "com.google.common.cache.RemovalListeners:asynchronous(com.google.common.cache.RemovalListener,java.util.concurrent.Executor)": "/**\n* Creates an asynchronous RemovalListener for removal notifications.\n* @param listener the listener to notify on removal\n* @param executor the executor to run the notification\n* @return a RemovalListener that executes notifications asynchronously\n*/"
    },
    "com.google.common.cache.RemovalNotification": {
        "com.google.common.cache.RemovalNotification:wasEvicted()": "/**\n* Checks if the object was evicted.\n* @return true if evicted, false otherwise\n*/",
        "com.google.common.cache.RemovalNotification:<init>(java.lang.Object,java.lang.Object,com.google.common.cache.RemovalCause)": "/**\n* Constructs a RemovalNotification with key, value, and cause.\n* @param key the key associated with the removal (nullable)\n* @param value the value associated with the removal (nullable)\n* @param cause the reason for removal (non-null)\n*/",
        "com.google.common.cache.RemovalNotification:create(java.lang.Object,java.lang.Object,com.google.common.cache.RemovalCause)": "/**\n* Creates a RemovalNotification with specified key, value, and removal cause.\n* @param key the key associated with the removal (nullable)\n* @param value the value associated with the removal (nullable)\n* @param cause the reason for removal (non-null)\n* @return a new RemovalNotification instance\n*/"
    },
    "com.google.common.collect.AbstractBiMap": {
        "com.google.common.collect.AbstractBiMap:checkValue(java.lang.Object)": "/**\n* Returns the input value as-is.\n* @param value the value to be returned\n* @return the same value passed as input\n*/",
        "com.google.common.collect.AbstractBiMap:entrySet()": "/**\n* Retrieves the set of key-value pairs in the map.\n* @return Set of map entries, initializes if not already created\n*/",
        "com.google.common.collect.AbstractBiMap:containsValue(java.lang.Object)": "/**\n* Checks if the specified value exists in the inverse map.\n* @param value the value to check for presence\n* @return true if the value is found, false otherwise\n*/",
        "com.google.common.collect.AbstractBiMap:clear()": "/**\n* Clears both the delegate and its inverse delegate.\n*/",
        "com.google.common.collect.AbstractBiMap:entrySetIterator()": "/**\n* Returns an iterator for the entry set of the map.\n* @return Iterator of map entries wrapped in BiMapEntry\n*/",
        "com.google.common.collect.AbstractBiMap:checkKey(java.lang.Object)": "/**\n* Returns the provided key, ensuring it can be null.\n* @param key the key to check and return\n* @return the same key, allowing null values\n*/",
        "com.google.common.collect.AbstractBiMap:values()": "/**\n* Returns a set of values, ensuring consistent iteration order.\n* @return Set of values from the map\n*/",
        "com.google.common.collect.AbstractBiMap:delegate()": "/**\n* Returns the delegate map instance.\n* @return the underlying Map<K, V> object\n*/",
        "com.google.common.collect.AbstractBiMap:keySet()": "/**\n* Returns the set of keys, initializing if not already created.\n* @return Set of keys associated with the map\n*/",
        "com.google.common.collect.AbstractBiMap:inverse()": "/**\n* Returns the inverse BiMap of the current map.\n* @return BiMap with keys and values swapped\n*/",
        "com.google.common.collect.AbstractBiMap:removeFromInverseMap(java.lang.Object)": "/**\n* Removes the specified value from the inverse map.\n* @param oldValue the value to be removed\n*/",
        "com.google.common.collect.AbstractBiMap:replaceAll(java.util.function.BiFunction)": "/**\n* Replaces all mappings and ensures inverse mapping consistency.\n* @param function mapping function for key-value pairs\n* @throws IllegalArgumentException if a value conflict occurs\n*/",
        "com.google.common.collect.AbstractBiMap:setInverse(com.google.common.collect.AbstractBiMap)": "/**\n* Sets the inverse bi-directional map.\n* @param inverse the AbstractBiMap to set as the inverse\n*/",
        "com.google.common.collect.AbstractBiMap:makeInverse(java.util.Map)": "/**\n* Creates an inverse mapping from the given backward map.\n* @param backward map of type V to K\n* @return AbstractBiMap representing the inverse mapping\n*/",
        "com.google.common.collect.AbstractBiMap:updateInverseMap(java.lang.Object,boolean,java.lang.Object,java.lang.Object)": "/**\n* Updates the inverse map with a new value, removing the old value if the key is contained.\n* @param key the key to associate with the new value\n* @param containedKey indicates if the key is already present\n* @param oldValue the value to be removed if containedKey is true\n* @param newValue the new value to be added\n*/",
        "com.google.common.collect.AbstractBiMap:removeFromBothMaps(java.lang.Object)": "/**\n* Removes a key from both maps and returns the associated value.\n* @param key the key to be removed\n* @return the value associated with the key or null if not found\n*/",
        "com.google.common.collect.AbstractBiMap:<init>(java.util.Map,com.google.common.collect.AbstractBiMap)": "/**\n* Initializes AbstractBiMap with backward and forward mappings.\n* @param backward map for backward relationships\n* @param forward map for forward relationships\n*/",
        "com.google.common.collect.AbstractBiMap:setDelegates(java.util.Map,java.util.Map)": "/**\n* Sets forward and backward mappings; ensures they are empty and valid before assignment.\n* @param forward map of type K to V\n* @param backward map of type V to K\n*/",
        "com.google.common.collect.AbstractBiMap:putInBothMaps(java.lang.Object,java.lang.Object,boolean)": "/**\n* Adds a key-value pair to both maps; updates inverse map if forced or checks for duplicates.\n* @param key the key to add\n* @param value the value to associate with the key\n* @param force indicates whether to overwrite existing values\n* @return the previous value associated with the key, or null if none\n*/",
        "com.google.common.collect.AbstractBiMap:remove(java.lang.Object)": "/**\n* Removes the value associated with the key if present.\n* @param key the key to remove\n* @return the associated value or null if key not found\n*/",
        "com.google.common.collect.AbstractBiMap:<init>(java.util.Map,java.util.Map)": "/**\n* Initializes AbstractBiMap with forward and backward mappings.\n* @param forward map of type K to V\n* @param backward map of type V to K\n*/",
        "com.google.common.collect.AbstractBiMap:put(java.lang.Object,java.lang.Object)": "/**\n* Adds a key-value pair without forcing overwrite.\n* @param key the key to add\n* @param value the value to associate with the key\n* @return previous value or null if none\n*/",
        "com.google.common.collect.AbstractBiMap:forcePut(java.lang.Object,java.lang.Object)": "/**\n* Forces addition of a key-value pair, overwriting existing values.\n* @param key the key to add\n* @param value the value to associate with the key\n* @return previous value or null if none\n*/",
        "com.google.common.collect.AbstractBiMap:putAll(java.util.Map)": "/**\n* Adds all key-value pairs from the provided map.\n* @param map source map containing key-value pairs to add\n*/"
    },
    "com.google.common.collect.AbstractBiMap$BiMapEntry": {
        "com.google.common.collect.AbstractBiMap$BiMapEntry:delegate()": "/**\n* Returns the delegate entry.\n* @return Entry containing key-value pair\n*/",
        "com.google.common.collect.AbstractBiMap$BiMapEntry:setValue(java.lang.Object)": "/**\n* Sets a new value for the entry; updates inverse map if changed.\n* @param value new value to set\n* @return previous value associated with the entry\n*/"
    },
    "com.google.common.collect.AbstractBiMap$EntrySet": {
        "com.google.common.collect.AbstractBiMap$EntrySet:remove(java.lang.Object)": "/**\n* Removes an Entry from the collection if present.\n* @param object the Entry to remove\n* @return true if removed, false if not found\n*/",
        "com.google.common.collect.AbstractBiMap$EntrySet:toArray()": "/**\n* Converts the collection to an array.\n* @return an array representation of the collection, or null if empty\n*/",
        "com.google.common.collect.AbstractBiMap$EntrySet:toArray(java.lang.Object[])": "/**\n* Converts the collection to an array of the specified type.\n* @param array the array to populate with elements\n* @return an array containing the collection elements\n*/",
        "com.google.common.collect.AbstractBiMap$EntrySet:delegate()": "/**\n* Returns the delegate set of entries.\n* @return Set of key-value entries from the delegate\n*/",
        "com.google.common.collect.AbstractBiMap$EntrySet:containsAll(java.util.Collection)": "/**\n* Checks if the collection contains all elements from the specified collection.\n* @param c collection of elements to check\n* @return true if all elements are present, false otherwise\n*/",
        "com.google.common.collect.AbstractBiMap$EntrySet:removeAll(java.util.Collection)": "/**\n* Removes all elements in the specified collection from this collection.\n* @param c collection of elements to be removed\n* @return true if this collection changed as a result of the call\n*/",
        "com.google.common.collect.AbstractBiMap$EntrySet:retainAll(java.util.Collection)": "/**\n* Retains only the elements in this collection that are also in the specified collection.\n* @param c collection containing elements to be retained\n* @return true if this collection changed as a result of the call\n*/",
        "com.google.common.collect.AbstractBiMap$EntrySet:clear()": "/**\n* Clears the delegate and its inverse delegate.\n*/",
        "com.google.common.collect.AbstractBiMap$EntrySet:iterator()": "/**\n* Returns an iterator for the map's entry set.\n* @return Iterator of map entries\n*/",
        "com.google.common.collect.AbstractBiMap$EntrySet:contains(java.lang.Object)": "/**\n* Checks if the collection contains a specific entry.\n* @param o object to check for presence as an entry\n* @return true if entry is found, false otherwise\n*/"
    },
    "com.google.common.collect.AbstractBiMap$Inverse": {
        "com.google.common.collect.AbstractBiMap$Inverse:<init>(java.util.Map,com.google.common.collect.AbstractBiMap)": "/**\n* Constructs an Inverse mapping using backward and forward maps.\n* @param backward map of type K to V\n* @param forward bi-directional map of type V to K\n*/",
        "com.google.common.collect.AbstractBiMap$Inverse:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object state and its inverse.\n* @param stream output stream for serialization\n* @throws IOException if an I/O error occurs during serialization\n*/",
        "com.google.common.collect.AbstractBiMap$Inverse:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes the object from the input stream and sets the inverse mapping.\n* @param stream the ObjectInputStream to read from\n* @throws IOException if an I/O error occurs\n* @throws ClassNotFoundException if the class of a serialized object cannot be found\n*/",
        "com.google.common.collect.AbstractBiMap$Inverse:readResolve()": "/**\n* Resolves the object to its inverse twice.\n* @return the double-inverted object\n*/",
        "com.google.common.collect.AbstractBiMap$Inverse:checkKey(java.lang.Object)": "/**\n* Validates and returns the provided key.\n* @param key the key to be checked\n* @return the same key if valid\n*/",
        "com.google.common.collect.AbstractBiMap$Inverse:checkValue(java.lang.Object)": "/**\n* Validates and returns the provided value using inverse key check.\n* @param value the value to validate, allowing null\n* @return validated value, could be null\n*/",
        "com.google.common.collect.AbstractBiMap$Inverse:values()": "/**\n* Returns a set of values, ensuring consistent iteration order.\n* @return Set of values from the map\n*/"
    },
    "com.google.common.collect.AbstractBiMap$KeySet": {
        "com.google.common.collect.AbstractBiMap$KeySet:delegate()": "/**\n* Returns the set of keys from the delegate map.\n* @return a set of keys from the delegate map\n*/",
        "com.google.common.collect.AbstractBiMap$KeySet:remove(java.lang.Object)": "/**\n* Removes the specified key from the collection.\n* @param key the key to remove; can be null\n* @return true if the key was removed, false if not found\n*/",
        "com.google.common.collect.AbstractBiMap$KeySet:removeAll(java.util.Collection)": "/**\n* Removes all elements in the specified collection from this collection.\n* @param keysToRemove collection of elements to be removed\n* @return true if this collection changed as a result of the call\n*/",
        "com.google.common.collect.AbstractBiMap$KeySet:retainAll(java.util.Collection)": "/**\n* Retains only the elements in this collection that are contained in the specified collection.\n* @param keysToRetain collection of elements to retain\n* @return true if this collection changed as a result of the call\n*/",
        "com.google.common.collect.AbstractBiMap$KeySet:clear()": "/**\n* Clears the delegate and its inverse delegate.\n*/",
        "com.google.common.collect.AbstractBiMap$KeySet:iterator()": "/**\n* Returns an iterator for the keys in the map.\n* @return Iterator for the keys of the map\n*/"
    },
    "com.google.common.collect.AbstractBiMap$ValueSet": {
        "com.google.common.collect.AbstractBiMap$ValueSet:toArray()": "/**\n* Converts the collection to an array.\n* @return an array containing the elements, or null if empty\n*/",
        "com.google.common.collect.AbstractBiMap$ValueSet:toArray(java.lang.Object[])": "/**\n* Converts the collection to an array of the specified type.\n* @param array the array to populate\n* @return an array containing the elements of the collection\n*/",
        "com.google.common.collect.AbstractBiMap$ValueSet:toString()": "/**\n* Returns a string representation of the object.\n* @return String representation of the object\n*/",
        "com.google.common.collect.AbstractBiMap$ValueSet:delegate()": "/**\n* Returns the set of values from the delegate.\n* @return Set<V> containing the values\n*/",
        "com.google.common.collect.AbstractBiMap$ValueSet:iterator()": "/**\n* Returns an iterator for values in the map.\n* @return Iterator of values from key-value entries\n*/"
    },
    "com.google.common.collect.NullnessCasts": {
        "com.google.common.collect.NullnessCasts:uncheckedCastNullableTToT(java.lang.Object)": "/**\n* Returns the input value without modifications.\n* @param t nullable input of type T\n* @return the same nullable value of type T\n*/",
        "com.google.common.collect.NullnessCasts:unsafeNull()": "/**\n* Returns a null value of a specified nullable type.\n* @param <T> the type of the returned null value\n* @return null of type T\n*/",
        "com.google.common.collect.NullnessCasts:<init>()": "/**\n* Private constructor for NullnessCasts class to prevent instantiation.\n*/"
    },
    "com.google.common.collect.AbstractIndexedListIterator": {
        "com.google.common.collect.AbstractIndexedListIterator:hasNext()": "/**\n* Checks if there are more elements to iterate over.\n* @return true if more elements exist, false otherwise\n*/",
        "com.google.common.collect.AbstractIndexedListIterator:hasPrevious()": "/**\n* Checks if there is a previous element in the collection.\n* @return true if a previous element exists, false otherwise\n*/",
        "com.google.common.collect.AbstractIndexedListIterator:nextIndex()": "/**\n* Returns the current position index.\n* @return current index of the element\n*/",
        "com.google.common.collect.AbstractIndexedListIterator:previousIndex()": "/**\n* Returns the index of the previous element in the collection.\n* @return index of the previous element or -1 if at the start\n*/",
        "com.google.common.collect.AbstractIndexedListIterator:next()": "/**\n* Retrieves the next element in the iteration.\n* @return the next element\n* @throws NoSuchElementException if no more elements exist\n*/",
        "com.google.common.collect.AbstractIndexedListIterator:previous()": "/**\n* Returns the previous element in the collection.\n* @return previous element\n* @throws NoSuchElementException if no previous element exists\n*/",
        "com.google.common.collect.AbstractIndexedListIterator:<init>(int,int)": "/**\n* Initializes an AbstractIndexedListIterator with size and position.\n* @param size total number of elements\n* @param position starting index for iteration\n*/",
        "com.google.common.collect.AbstractIndexedListIterator:<init>(int)": "/**\n* Initializes an AbstractIndexedListIterator with specified size and default position 0.\n* @param size total number of elements\n*/"
    },
    "com.google.common.collect.UnmodifiableIterator": {
        "com.google.common.collect.UnmodifiableIterator:<init>()": "/**\n* Constructs an instance of UnmodifiableIterator.\n*/",
        "com.google.common.collect.UnmodifiableIterator:remove()": "/**\n* Deprecated method that always throws UnsupportedOperationException.\n* @throws UnsupportedOperationException if called\n*/"
    },
    "com.google.common.collect.AbstractIterator": {
        "com.google.common.collect.AbstractIterator:tryToComputeNext()": "/**\n* Attempts to compute the next value; updates state and returns success status.\n* @return true if computation is ready, false if done\n*/",
        "com.google.common.collect.AbstractIterator:endOfData()": "/**\n* Marks the end of data processing and returns null.\n* @return always returns null\n*/",
        "com.google.common.collect.AbstractIterator:<init>()": "/**\n* Initializes an instance of AbstractIterator.\n*/",
        "com.google.common.collect.AbstractIterator:hasNext()": "/**\n* Checks if there is a next element to process.\n* @return true if ready, false if done or failed state\n*/",
        "com.google.common.collect.AbstractIterator:next()": "/**\n* Retrieves the next element if available.\n* @return the next element of type T\n* @throws NoSuchElementException if no more elements exist\n*/",
        "com.google.common.collect.AbstractIterator:peek()": "/**\n* Retrieves the next element without removing it.\n* @return the next element of type T\n* @throws NoSuchElementException if no next element exists\n*/"
    },
    "com.google.common.collect.AbstractListMultimap": {
        "com.google.common.collect.AbstractListMultimap:createUnmodifiableEmptyCollection()": "/**\n* Creates an unmodifiable empty list.\n* @return an empty, unmodifiable List of type V\n*/",
        "com.google.common.collect.AbstractListMultimap:unmodifiableCollectionSubclass(java.util.Collection)": "/**\n* Returns an unmodifiable view of the specified collection.\n* @param collection the collection to wrap\n* @return an unmodifiable Collection instance\n*/",
        "com.google.common.collect.AbstractListMultimap:wrapCollection(java.lang.Object,java.util.Collection)": "/**\n* Wraps a collection with a key for additional processing.\n* @param key identifier for the collection\n* @param collection input collection to wrap\n* @return wrapped collection\n*/",
        "com.google.common.collect.AbstractListMultimap:asMap()": "/**\n* Returns a map representation of the collection.\n* @return Map with keys of type K and values as collections of type V\n*/",
        "com.google.common.collect.AbstractListMultimap:equals(java.lang.Object)": "/**\n* Compares this object with the specified object for equality.\n* @param object the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.AbstractListMultimap:<init>(java.util.Map)": "/**\n* Initializes AbstractListMultimap with an empty map.\n* @param map initial map, must be empty\n*/",
        "com.google.common.collect.AbstractListMultimap:put(java.lang.Object,java.lang.Object)": "/**\n* Adds a value to the collection associated with the key.\n* @param key identifier for the collection\n* @param value to be added to the collection\n* @return true if value was added, false otherwise\n*/",
        "com.google.common.collect.AbstractListMultimap:get(java.lang.Object)": "/**\n* Retrieves a list associated with the given key.\n* @param key identifier for the list\n* @return List of type V associated with the key\n*/",
        "com.google.common.collect.AbstractListMultimap:removeAll(java.lang.Object)": "/**\n* Removes values associated with the key and returns them as a list.\n* @param key the key whose associated values are to be removed\n* @return List of removed values or an empty list if none found\n*/",
        "com.google.common.collect.AbstractListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a key and returns old values as a List.\n* @param key identifier for the collection\n* @param values new values to replace existing ones\n* @return List of old values\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries": {
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:iterator()": "/**\n* Returns an iterator over entries of key-collection pairs.\n* @return Iterator for key-collection entries\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:map()": "/**\n* Returns the underlying map as a collection of key-value pairs.\n* @return a Map of keys to their corresponding Collections of values\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:contains(java.lang.Object)": "/**\n* Checks if the specified object is in the submap's entry set.\n* @param o object to check for presence\n* @return true if found, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:spliterator()": "/**\n* Creates a Spliterator for the submap's entry set.\n* @return Spliterator of Entry<K, Collection<V>> from the submap\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:remove(java.lang.Object)": "/**\n* Removes the specified object if present.\n* @param o object to remove\n* @return true if removed, false if not found\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator": {
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator:hasNext()": "/**\n* Checks if the iterator has more elements.\n* @return true if more elements exist, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator:remove()": "/**\n* Removes the current element; clears the collection and updates total size.\n* @throws IllegalStateException if next() was not called since last remove()\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator:next()": "/**\n* Retrieves the next entry and wraps its collection.\n* @return Immutable entry with key and wrapped collection\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultimap$AsMap": {
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap:createEntrySet()": "/**\n* Creates a set of map entries.\n* @return Set of key-value pairs as entries\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap:keySet()": "/**\n* Returns the set of keys in the multimap.\n* @return a Set of keys from the multimap\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap:size()": "/**\n* Returns the number of entries in the submap.\n* @return size of the submap as an integer\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap:remove(java.lang.Object)": "/**\n* Removes and returns the collection associated with the key.\n* @param key the key whose associated collection is to be removed\n* @return the removed collection or null if key not found\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap:equals(java.lang.Object)": "/**\n* Checks equality with another object or submap.\n* @param object object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap:hashCode()": "/**\n* Returns the hash code of the submap.\n* @return hash code as an integer\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap:toString()": "/**\n* Returns a string representation of the submap.\n* @return String representation of the submap\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap:wrapEntry(java.util.Map$Entry)": "/**\n* Wraps an entry with a collection using its key.\n* @param entry the entry to wrap\n* @return an immutable entry containing the key and wrapped collection\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap:clear()": "/**\n* Clears the multimap; uses submap or main map based on context.\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap:get(java.lang.Object)": "/**\n* Retrieves a wrapped collection by key from a submap.\n* @param key the key to look up in the submap\n* @return WrappedCollection or null if not found\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$AsMap:containsKey(java.lang.Object)": "/**\n* Checks if the submap contains the specified key.\n* @param key the key to check for\n* @return true if the key exists, false otherwise\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultimap": {
        "com.google.common.collect.AbstractMapBasedMultimap:wrapCollection(java.lang.Object,java.util.Collection)": "/**\n* Wraps a collection with a given key.\n* @param key identifier for the collection\n* @param collection collection to wrap\n* @return WrappedCollection instance\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:clear()": "/**\n* Clears all collections in the map and resets total size to zero.\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:unmodifiableCollectionSubclass(java.util.Collection)": "/**\n* Returns an unmodifiable view of the specified collection.\n* @param collection the collection to be wrapped\n* @return an unmodifiable Collection containing the same elements\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:wrapList(java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection)": "/**\n* Wraps a list based on its type for enhanced functionality.\n* @param key the key used for wrapping the list\n* @param list the list to be wrapped\n* @param ancestor optional ancestor collection\n* @return a wrapped list instance\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:createCollection(java.lang.Object)": "/**\n* Creates a collection based on the provided key.\n* @param key identifier for collection creation\n* @return a new collection of type V\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:containsKey(java.lang.Object)": "/**\n* Checks if the map contains the specified key.\n* @param key the key to check for presence in the map\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:iteratorOrListIterator(java.util.Collection)": "/**\n* Returns an iterator for the given collection or a list iterator if it's a List.\n* @param collection the collection to iterate over\n* @return an Iterator or ListIterator for the collection\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:createKeySet()": "/**\n* Creates a set view of the keys contained in the map.\n* @return a Set of keys from the map\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:createMaybeNavigableKeySet()": "/**\n* Creates a key set based on the type of map.\n* @return Set of keys, specific to map type (Navigable, Sorted, or general)\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:createValues()": "/**\n* Creates a new collection of values.\n* @return Collection of values\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:valueIterator()": "/**\n* Returns an iterator for the values in the collection.\n* @return Iterator of values associated with the keys\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:size()": "/**\n* Returns the total size of the collection.\n* @return totalSize as an integer\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:createEntries()": "/**\n* Creates a collection of entries based on the map type.\n* @return Collection of Entry objects for SetMultimap or regular map\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:entryIterator()": "/**\n* Returns an iterator for key-value entries.\n* @return Iterator of Entry objects containing keys and values\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:createAsMap()": "/**\n* Creates a map view of the current collection.\n* @return a map with keys and their corresponding collections\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:createMaybeNavigableAsMap()": "/**\n* Creates a map view based on the type of the underlying map.\n* @return Map representation of the underlying data structure\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:backingMap()": "/**\n* Returns the backing map containing key-value collections.\n* @return Map of keys to their corresponding collections of values\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:forEach(java.util.function.BiConsumer)": "/**\n* Applies action to each key-value pair in the map.\n* @param action a BiConsumer to process each key and value\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:<init>(java.util.Map)": "/**\n* Constructs a multimap with an empty map.\n* @param map initial map, must be empty\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:setMap(java.util.Map)": "/**\n* Sets the map and calculates total size of its collections.\n* @param map a map with collections to set\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:createUnmodifiableEmptyCollection()": "/**\n* Creates an unmodifiable empty collection.\n* @return an unmodifiable Collection instance\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:put(java.lang.Object,java.lang.Object)": "/**\n* Adds a value to the collection associated with the key.\n* @param key identifier for the collection\n* @param value to be added to the collection\n* @return true if value was added, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:getOrCreateCollection(java.lang.Object)": "/**\n* Retrieves or creates a collection for the given key.\n* @param key identifier for the collection\n* @return existing or newly created Collection<V>\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:get(java.lang.Object)": "/**\n* Retrieves or creates a collection for the given key.\n* @param key identifier for the collection\n* @return Collection of type V associated with the key\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:values()": "/**\n* Retrieves a collection of values from the superclass.\n* @return Collection of values from the superclass\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:createKeys()": "/**\n* Creates a multiset of keys from the current instance.\n* @return Multiset of keys associated with this instance\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:entries()": "/**\n* Retrieves a collection of entries from the superclass.\n* @return Collection of Entry objects\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:removeValuesForKey(java.lang.Object)": "/**\n* Removes values associated with the specified key from the map.\n* @param key the key whose values are to be removed\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:removeAll(java.lang.Object)": "/**\n* Removes and returns values associated with the key; empty if none found.\n* @param key the key whose associated values are to be removed\n* @return unmodifiable Collection of removed values or an empty collection\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:valueSpliterator()": "/**\n* Creates a spliterator for the values in the map.\n* @return Spliterator for the map's values\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:entrySpliterator()": "/**\n* Creates a spliterator for map entries, transforming values into immutable entries.\n* @return Spliterator of transformed map entries\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a key and returns old values.\n* @param key identifier for the collection\n* @param values new values to replace existing ones\n* @return unmodifiable Collection of old values\n*/"
    },
    "com.google.common.collect.Iterators": {
        "com.google.common.collect.Iterators:emptyModifiableIterator()": "/**\n* Returns an empty modifiable iterator.\n* @return an Iterator of type T, which is empty\n*/",
        "com.google.common.collect.Iterators:pollNext(java.util.Iterator)": "/**\n* Retrieves and removes the next element from the iterator, or returns null if none exists.\n* @param iterator the iterator to poll from\n* @return the next element or null if the iterator is empty\n*/",
        "com.google.common.collect.Iterators:getNext(java.util.Iterator,java.lang.Object)": "/**\n* Returns the next element from the iterator or a default value if none exists.\n* @param iterator an iterator to fetch the next element from\n* @param defaultValue value returned if iterator is empty\n* @return next element or defaultValue if no elements are present\n*/",
        "com.google.common.collect.Iterators:contains(java.util.Iterator,java.lang.Object)": "/**\n* Checks if the iterator contains the specified element or null.\n* @param iterator the iterator to search\n* @param element the element to find, can be null\n* @return true if found, otherwise false\n*/",
        "com.google.common.collect.Iterators:toString(java.util.Iterator)": "/**\n* Converts an iterator to a string representation.\n* @param iterator the iterator to convert\n* @return string representation of the iterator's elements\n*/",
        "com.google.common.collect.Iterators:getOnlyElement(java.util.Iterator)": "/**\n* Retrieves the sole element from an iterator or throws an exception if not exactly one exists.\n* @param iterator input iterator of type T\n* @return the single element of type T\n*/",
        "com.google.common.collect.Iterators:checkNonnegative(int)": "/**\n* Validates that the position is non-negative; throws an exception if negative.\n* @param position the index to check\n*/",
        "com.google.common.collect.Iterators:getLast(java.util.Iterator)": "/**\n* Retrieves the last element from the provided iterator.\n* @param iterator an Iterator of type T, which may include nulls\n* @return the last element of type T or null if the iterator is empty\n*/",
        "com.google.common.collect.Iterators:<init>()": "/**\n* Private constructor to prevent instantiation of the Iterators class.\n*/",
        "com.google.common.collect.Iterators:emptyListIterator()": "/**\n* Returns an unmodifiable empty list iterator.\n* @return an empty UnmodifiableListIterator instance\n*/",
        "com.google.common.collect.Iterators:singletonIterator(java.lang.Object)": "/**\n* Creates an unmodifiable iterator for a single value.\n* @param value the single element to iterate over\n* @return an iterator containing the specified value\n*/",
        "com.google.common.collect.Iterators:indexOf(java.util.Iterator,com.google.common.base.Predicate)": "/**\n* Finds the index of the first element matching the predicate.\n* @param iterator the source iterator\n* @param predicate the condition to match\n* @return index of the matching element or -1 if none found\n*/",
        "com.google.common.collect.Iterators:unmodifiableIterator(java.util.Iterator)": "/**\n* Returns an unmodifiable iterator from a given iterator.\n* @param iterator the input iterator\n* @return an UnmodifiableIterator wrapping the input\n*/",
        "com.google.common.collect.Iterators:unmodifiableIterator(com.google.common.collect.UnmodifiableIterator)": "/**\n* Returns a non-null unmodifiable iterator.\n* @param iterator the iterator to check for null\n* @return the non-null unmodifiable iterator\n*/",
        "com.google.common.collect.Iterators:removeAll(java.util.Iterator,java.util.Collection)": "/**\n* Removes specified elements from the iterator.\n* @param removeFrom iterator for elements to modify\n* @param elementsToRemove collection of elements to remove\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.Iterators:removeIf(java.util.Iterator,com.google.common.base.Predicate)": "/**\n* Removes elements from iterator matching predicate.\n* @param removeFrom iterator to modify\n* @param predicate condition to check for removal\n* @return true if any element was removed, false otherwise\n*/",
        "com.google.common.collect.Iterators:retainAll(java.util.Iterator,java.util.Collection)": "/**\n* Retains elements from an iterator based on a collection.\n* @param removeFrom iterator of elements to filter\n* @param elementsToRetain collection of elements to keep\n* @return true if any elements were removed\n*/",
        "com.google.common.collect.Iterators:addAll(java.util.Collection,java.util.Iterator)": "/**\n* Adds all elements from an iterator to a collection.\n* @param addTo collection to add elements to\n* @param iterator source of elements to add\n* @return true if the collection was modified\n*/",
        "com.google.common.collect.Iterators:cycle(java.lang.Iterable)": "/**\n* Returns an iterator that cycles through the given iterable.\n* @param iterable the source of elements to iterate over\n* @return an Iterator that cycles through elements\n*/",
        "com.google.common.collect.Iterators:filter(java.util.Iterator,com.google.common.base.Predicate)": "/**\n* Filters elements from an iterator based on a predicate.\n* @param unfiltered the original iterator\n* @param retainIfTrue predicate to determine retention\n* @return an iterator of retained elements\n*/",
        "com.google.common.collect.Iterators:all(java.util.Iterator,com.google.common.base.Predicate)": "/**\n* Checks if all elements match the given predicate.\n* @param iterator the elements to check\n* @param predicate the condition to apply\n* @return true if all match, false otherwise\n*/",
        "com.google.common.collect.Iterators:find(java.util.Iterator,com.google.common.base.Predicate)": "/**** Finds an element in the iterator matching the predicate. \n* @param iterator the iterator to search through \n* @param predicate the condition to match \n* @return the matching element \n*/",
        "com.google.common.collect.Iterators:find(java.util.Iterator,com.google.common.base.Predicate,java.lang.Object)": "/**\n* Finds an element matching a predicate in an iterator or returns a default value.\n* @param iterator the iterator to search through\n* @param predicate the condition to match elements\n* @param defaultValue the value returned if no match is found\n* @return the matched element or defaultValue if none found\n*/",
        "com.google.common.collect.Iterators:transform(java.util.Iterator,com.google.common.base.Function)": "/**\n* Transforms elements from one iterator using a provided function.\n* @param fromIterator source iterator of type F\n* @param function transformation function from F to T\n* @return an iterator of transformed elements of type T\n*/",
        "com.google.common.collect.Iterators:consumingIterator(java.util.Iterator)": "/**\n* Returns an iterator that consumes elements from the provided iterator.\n* @param iterator the iterator to consume elements from\n* @return an unmodifiable iterator that removes elements\n*/",
        "com.google.common.collect.Iterators:clear(java.util.Iterator)": "/**\n* Clears all elements from the provided iterator.\n* @param iterator the iterator to clear elements from\n*/",
        "com.google.common.collect.Iterators:forEnumeration(java.util.Enumeration)": "/**\n* Converts an Enumeration to an UnmodifiableIterator.\n* @param enumeration the Enumeration to convert\n* @return UnmodifiableIterator for the given Enumeration\n*/",
        "com.google.common.collect.Iterators:asEnumeration(java.util.Iterator)": "/**** Converts an Iterator to an Enumeration. \n* @param iterator the Iterator to convert \n* @return Enumeration of the same elements \n*/",
        "com.google.common.collect.Iterators:peekingIterator(com.google.common.collect.PeekingIterator)": "/**\n* Returns a non-null PeekingIterator, ensuring input is not null.\n* @param iterator the PeekingIterator to validate\n* @return non-null PeekingIterator\n*/",
        "com.google.common.collect.Iterators:partitionImpl(java.util.Iterator,int,boolean)": "/**\n* Partitions an iterator into unmodifiable lists of specified size, with optional padding.\n* @param iterator source iterator\n* @param size size of each partition (must be > 0)\n* @param pad whether to pad with nulls\n* @return an iterator over unmodifiable lists\n*/",
        "com.google.common.collect.Iterators:elementsEqual(java.util.Iterator,java.util.Iterator)": "/**\n* Compares two iterators for element-wise equality.\n* @param iterator1 first iterator to compare\n* @param iterator2 second iterator to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Iterators:advance(java.util.Iterator,int)": "/**\n* Advances the iterator by a specified number of elements.\n* @param iterator the iterator to advance\n* @param numberToAdvance nonnegative count of elements to advance\n* @return actual number of elements advanced\n*/",
        "com.google.common.collect.Iterators:limit(java.util.Iterator,int)": "/**\n* Limits the number of elements returned by an iterator.\n* @param iterator the input iterator\n* @param limitSize maximum number of elements to return\n* @return an iterator with a limited number of elements\n*/",
        "com.google.common.collect.Iterators:size(java.util.Iterator)": "/**\n* Counts elements in an iterator.\n* @param iterator the iterator to count elements from\n* @return the number of elements as an int, saturated to Integer limits\n*/",
        "com.google.common.collect.Iterators:frequency(java.util.Iterator,java.lang.Object)": "/**\n* Counts occurrences of an element in the provided iterator.\n* @param iterator the iterator to search\n* @param element the element to count, can be null\n* @return the frequency of the element in the iterator\n*/",
        "com.google.common.collect.Iterators:getOnlyElement(java.util.Iterator,java.lang.Object)": "/**\n* Retrieves the sole element from an iterator or returns a default value.\n* @param iterator input iterator of type T\n* @param defaultValue value to return if iterator is empty\n* @return single element of type T or defaultValue if empty\n*/",
        "com.google.common.collect.Iterators:getLast(java.util.Iterator,java.lang.Object)": "/**\n* Returns the last element of the iterator or a default value if empty.\n* @param iterator an Iterator of type T\n* @param defaultValue value to return if iterator is empty\n* @return last element of type T or defaultValue\n*/",
        "com.google.common.collect.Iterators:emptyIterator()": "/**\n* Returns an unmodifiable empty iterator.\n* @return UnmodifiableIterator instance that is empty\n*/",
        "com.google.common.collect.Iterators:any(java.util.Iterator,com.google.common.base.Predicate)": "/**\n* Checks if any element matches the predicate.\n* @param iterator source iterator\n* @param predicate condition to match\n* @return true if a match is found, false otherwise\n*/",
        "com.google.common.collect.Iterators:peekingIterator(java.util.Iterator)": "/**\n* Returns a PeekingIterator for the given iterator.\n* @param iterator the input iterator, must not be null\n* @return PeekingIterator instance\n*/",
        "com.google.common.collect.Iterators:filter(java.util.Iterator,java.lang.Class)": "/**\n* Filters an iterator for elements of a specified type.\n* @param unfiltered the original iterator\n* @param desiredType the class type to retain\n* @return an iterator of elements matching the desired type\n*/",
        "com.google.common.collect.Iterators:partition(java.util.Iterator,int)": "/**\n* Partitions an iterator into unmodifiable lists of specified size.\n* @param iterator source iterator\n* @param size size of each partition (must be > 0)\n* @return iterator over unmodifiable lists\n*/",
        "com.google.common.collect.Iterators:paddedPartition(java.util.Iterator,int)": "/**\n* Partitions an iterator into unmodifiable lists with padding.\n* @param iterator source iterator\n* @param size size of each partition (must be > 0)\n* @return iterator over unmodifiable padded lists\n*/",
        "com.google.common.collect.Iterators:get(java.util.Iterator,int)": "/**\n* Retrieves the element at the specified position from the iterator.\n* @param iterator the iterator to retrieve from\n* @param position the index of the desired element\n* @return the element at the given position\n*/",
        "com.google.common.collect.Iterators:get(java.util.Iterator,int,java.lang.Object)": "/**\n* Retrieves an element from the iterator at a specified position or a default value.\n* @param iterator the iterator to fetch the element from\n* @param position the index of the element to retrieve\n* @param defaultValue value returned if the position is out of bounds\n* @return the element at the specified position or defaultValue\n*/",
        "com.google.common.collect.Iterators:tryFind(java.util.Iterator,com.google.common.base.Predicate)": "/**\n* Finds an element in an iterator matching the predicate.\n* @param iterator the iterator to search\n* @param predicate the condition to match\n* @return Optional containing the found element or absent if none matches\n*/",
        "com.google.common.collect.Iterators:concat(java.util.Iterator)": "/**\n* Concatenates multiple iterators into a single iterator.\n* @param inputs array of iterators to concatenate\n* @return combined Iterator of type T\n*/",
        "com.google.common.collect.Iterators:mergeSorted(java.lang.Iterable,java.util.Comparator)": "/**\n* Merges sorted iterators into a single unmodifiable iterator.\n* @param iterators collection of iterators to merge\n* @param comparator comparator for sorting items\n* @return UnmodifiableIterator of merged items\n*/",
        "com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator)": "/**\n* Concatenates two iterators into a single iterator.\n* @param a first iterator\n* @param b second iterator\n* @return combined Iterator of type T\n*/",
        "com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator,java.util.Iterator)": "/**\n* Concatenates three iterators into a single iterator.\n* @param a first iterator\n* @param b second iterator\n* @param c third iterator\n* @return combined Iterator of type T\n*/",
        "com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator,java.util.Iterator,java.util.Iterator)": "/**\n* Concatenates four iterators into a single iterator.\n* @param a, b, c, d iterators to concatenate\n* @return combined Iterator of type T\n*/",
        "com.google.common.collect.Iterators:toArray(java.util.Iterator,java.lang.Class)": "/**\n* Converts an iterator to an array of specified type.\n* @param iterator source of elements to convert\n* @param type class type of the array elements\n* @return array containing the elements of the iterator\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultimap$Itr": {
        "com.google.common.collect.AbstractMapBasedMultimap$Itr:hasNext()": "/**\n* Checks if there are more elements in either key or value iterators.\n* @return true if more elements exist, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$Itr:remove()": "/**\n* Removes the current element from iterators and updates total size.\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$Itr:next()": "/**\n* Retrieves the next value from the iterator or populates it from a new key-entry pair.\n* @return the next value of type T from the current collection\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultimap$KeySet": {
        "com.google.common.collect.AbstractMapBasedMultimap$KeySet:iterator()": "/**\n* Returns an iterator over the keys of the map.\n* @return Iterator of keys from the map entries\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$KeySet:spliterator()": "/**\n* Returns a Spliterator for the key set of the map.\n* @return Spliterator for the keys in the map\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$KeySet:remove(java.lang.Object)": "/**\n* Removes a key and its associated values from the map.\n* @param key the key to remove\n* @return true if any values were removed, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$KeySet:containsAll(java.util.Collection)": "/**\n* Checks if all elements in the collection are present in the map's key set.\n* @param c collection of elements to check\n* @return true if all elements are present, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$KeySet:equals(java.lang.Object)": "/**\n* Checks equality with another object based on key set comparison.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$KeySet:hashCode()": "/**\n* Computes hash code based on the key set of the underlying map.\n* @return hash code as an integer\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$KeySet:clear()": "/**\n* Clears all elements from the iterator of this collection.\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap": {
        "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:sortedMap()": "/**\n* Returns the submap as a sorted map.\n* @return SortedMap of collections from the submap\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:comparator()": "/**\n* Retrieves the comparator for the sorted map.\n* @return Comparator for the map, or null if not present\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:firstKey()": "/**\n* Retrieves the first key from the sorted submap.\n* @return First key of the sorted map or null if empty\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:lastKey()": "/**\n* Retrieves the last key from the sorted submap.\n* @return last key of type K from the sorted map\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:headMap(java.lang.Object)": "/**\n* Returns a sorted submap up to the specified key.\n* @param toKey the upper bound key for the submap\n* @return SortedMap of collections up to the specified key\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:subMap(java.lang.Object,java.lang.Object)": "/**\n* Returns a sorted submap of collections between specified keys.\n* @param fromKey starting key for the submap\n* @param toKey ending key for the submap\n* @return SortedMap of collections within the key range\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:tailMap(java.lang.Object)": "/**\n* Returns a tail map starting from the specified key.\n* @param fromKey the key from which the tail map starts\n* @return SortedMap of collections from the tail map\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:createKeySet()": "/**\n* Creates a sorted set of keys from the submap.\n* @return SortedSet of keys in the sorted map\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:keySet()": "/**\n* Retrieves a sorted set of keys; creates if not already initialized.\n* @return SortedSet of keys from the sorted map\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet": {
        "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:sortedMap()": "/**\n* Returns a sorted map of collections from the superclass map.\n* @return SortedMap with keys of type K and values of type Collection<V>\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:comparator()": "/**\n* Returns the comparator for the sorted map.\n* @return Comparator for keys of type K or null if none exists\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:first()": "/**\n* Retrieves the first key from the sorted map.\n* @return the first key of type K from the sorted map\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:headSet(java.lang.Object)": "/**\n* Returns a view of the portion of the set before the specified element.\n* @param toElement the upper bound element (exclusive)\n* @return SortedSet of keys less than toElement\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:last()": "/**\n* Retrieves the last key from a sorted map.\n* @return last key of type K from the sorted map\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:subSet(java.lang.Object,java.lang.Object)": "/**\n* Returns a subset of keys within the specified range.\n* @param fromElement start key (inclusive), @param toElement end key (exclusive)\n* @return SortedSet of keys in the specified range\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:tailSet(java.lang.Object)": "/**\n* Returns a view of the portion of this set whose elements are greater than or equal to fromElement.\n* @param fromElement the element to start the view from\n* @return SortedSet containing elements from fromElement to the end\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection": {
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:removeIfEmpty()": "/**\n* Removes the entry from the map if it's empty; checks ancestor first.\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:getDelegate()": "/**\n* Retrieves the delegate collection.\n* @return Collection of type V\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:addToMap()": "/**\n* Adds key-value pair to map or delegates to ancestor if available.\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:getAncestor()": "/**\n* Retrieves the ancestor collection.\n* @return WrappedCollection or null if no ancestor exists\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:getKey()": "/**\n* Retrieves the key of type K.\n* @return the key, which may be null\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:refreshIfEmpty()": "/**\n* Refreshes the delegate if empty; checks ancestor for modifications.\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:size()": "/**\n* Returns the size of the delegate, refreshing if it is empty.\n* @return the number of elements in the delegate\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:equals(java.lang.Object)": "/**\n* Compares this Multimap to another object for equality.\n* @param object the object to compare with this Multimap\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:hashCode()": "/**\n* Computes the hash code for the object.\n* @return hash code as an integer based on the delegate\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:toString()": "/**\n* Returns string representation of the object.\n* @return String output of delegate's toString method\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:iterator()": "/**\n* Returns an iterator for the collection, refreshing if empty.\n* @return Iterator for the collection's elements\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:spliterator()": "/**\n* Returns a Spliterator for the delegate after refreshing if empty.\n* @return Spliterator instance of type V\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:add(java.lang.Object)": "/**\n* Adds a value to the delegate; updates total size and map if it was empty.\n* @param value the value to add\n* @return true if the delegate changed, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:contains(java.lang.Object)": "/**\n* Checks if the delegate contains the specified object.\n* @param o object to check for presence in the delegate\n* @return true if present, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:containsAll(java.util.Collection)": "/**\n* Checks if all elements in the collection are present in the delegate.\n* @param c collection of elements to check\n* @return true if all elements are present, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:remove(java.lang.Object)": "/**\n* Removes an object; updates size and refreshes if empty.\n* @param o object to remove\n* @return true if removed, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:addAll(java.util.Collection)": "/**\n* Adds all elements from a collection and updates size tracking.\n* @param collection elements to add\n* @return true if the delegate changed, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:clear()": "/**\n* Clears the delegate and updates totalSize.\n* Removes entry if delegate was previously empty.\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:removeAll(java.util.Collection)": "/**\n* Removes all elements in collection c from the delegate.\n* @param c collection of elements to remove\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:retainAll(java.util.Collection)": "/**\n* Retains only elements in this collection that are contained in the specified collection.\n* @param c collection to retain elements from\n* @return true if this collection changed as a result of the call\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultimap$WrappedList": {
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:getListDelegate()": "/**\n* Retrieves a list delegate from the underlying delegate.\n* @return List of type V from the delegate\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:listIterator()": "/**\n* Returns a ListIterator over the elements in the collection.\n* @return ListIterator for traversing the collection\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:listIterator(int)": "/**\n* Returns a list iterator starting at the specified index.\n* @param index starting position of the iterator\n* @return ListIterator for the collection\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:addAll(int,java.util.Collection)": "/**\n* Adds all elements from collection at specified index.\n* @param index position to add elements\n* @param c collection of elements to add\n* @return true if the list was modified, false if empty\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:get(int)": "/**\n* Retrieves element at specified index from the list delegate.\n* @param index position of the element to retrieve\n* @return element of type V at the given index\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:set(int,java.lang.Object)": "/**\n* Sets the element at the specified index in the list.\n* @param index position to set the element\n* @param element value to be set at the index\n* @return previous element at the index\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:add(int,java.lang.Object)": "/**\n* Adds an element at the specified index and updates total size.\n* @param index position to insert the element\n* @param element the element to add\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:remove(int)": "/**\n* Removes an element at the specified index.\n* @param index position of the element to remove\n* @return the removed element of type V\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:indexOf(java.lang.Object)": "/**\n* Finds the index of an object in the list.\n* @param o object to find\n* @return index of the object or -1 if not found\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:lastIndexOf(java.lang.Object)": "/**\n* Returns the last index of the specified object in the list.\n* @param o object to find the last index of\n* @return last index of the object or -1 if not found\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList:subList(int,int)": "/**\n* Returns a sublist of elements wrapped for enhanced functionality.\n* @param fromIndex starting index of the sublist\n* @param toIndex ending index of the sublist\n* @return Wrapped sublist of type V\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator": {
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:getDelegateListIterator()": "/**\n* Retrieves a ListIterator for the delegate iterator.\n* @return ListIterator of type V\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:hasPrevious()": "/**\n* Checks if there is a previous element in the delegate iterator.\n* @return true if a previous element exists, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:previous()": "/**\n* Retrieves the previous element from the delegate iterator.\n* @return previous element of type V\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:nextIndex()": "/**\n* Returns the index of the next element in the delegate iterator.\n* @return index of the next element\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:previousIndex()": "/**\n* Returns the index of the previous element in the delegate iterator.\n* @return index of the previous element, or -1 if no previous element exists\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:set(java.lang.Object)": "/**\n* Sets the value using the delegate iterator.\n* @param value the value to set in the delegate\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:add(java.lang.Object)": "/**\n* Adds a value to the collection and updates size; adds to map if it was empty.\n* @param value the value to be added\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet": {
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:getSortedSetDelegate()": "/**\n* Retrieves the delegate as a SortedSet.\n* @return SortedSet of type V from the delegate\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:comparator()": "/**\n* Returns the comparator for the sorted set delegate.\n* @return Comparator for type V or null if not available\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:first()": "/**\n* Returns the first element of the sorted set.\n* @return first element of type V, or throws if empty\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:last()": "/**\n* Retrieves the last element from a sorted set delegate.\n* @return last element of type V or throws if empty\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:headSet(java.lang.Object)": "/**\n* Returns a view of the portion of this set whose elements are less than the specified element.\n* @param toElement the upper bound element\n* @return a SortedSet view of the specified range\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:subSet(java.lang.Object,java.lang.Object)": "/**\n* Returns a subset of elements between fromElement and toElement.\n* @param fromElement lower bound of the subset\n* @param toElement upper bound of the subset\n* @return SortedSet of type V within the specified range\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:tailSet(java.lang.Object)": "/**\n* Returns a view of the portion of the set from a specified element.\n* @param fromElement the starting element of the tail set\n* @return SortedSet view from the specified element\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet": {
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:wrap(java.util.NavigableSet)": "/**\n* Wraps a NavigableSet in a custom WrappedNavigableSet.\n* @param wrapped the NavigableSet to wrap\n* @return a WrappedNavigableSet instance\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:pollFirst()": "/**\n* Retrieves and removes the first element from the iterator.\n* @return the first element or null if iterator is empty\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:getSortedSetDelegate()": "/**\n* Returns the delegate as a NavigableSet.\n* @return NavigableSet of type V from the delegate\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:lower(java.lang.Object)": "/**\n* Retrieves the greatest element less than the specified value.\n* @param v the value to compare against\n* @return the lower element or null if none exists\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:floor(java.lang.Object)": "/**\n* Retrieves the greatest element less than or equal to the given value.\n* @param v the value to compare\n* @return the greatest element or null if not found\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:ceiling(java.lang.Object)": "/**\n* Retrieves the least element greater than or equal to the given value.\n* @param v the value to compare\n* @return the ceiling element or null if none exists\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:higher(java.lang.Object)": "/**\n* Retrieves the least element greater than the specified value.\n* @param v the value to compare\n* @return the higher element or null if none exists\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:descendingSet()": "/**\n* Returns a descending view of the NavigableSet.\n* @return NavigableSet in descending order\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:descendingIterator()": "/**\n* Returns an iterator for the elements in descending order.\n* @return Iterator of type V for descending iteration\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a subset of the NavigableSet within specified bounds.\n* @param fromElement starting element, inclusive if fromInclusive is true\n* @param fromInclusive true if fromElement is included\n* @param toElement ending element, inclusive if toInclusive is true\n* @param toInclusive true if toElement is included\n* @return Wrapped NavigableSet representing the subset\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:headSet(java.lang.Object,boolean)": "/**\n* Returns a view of the portion of this set up to the specified element.\n* @param toElement the element up to which the set is to be viewed\n* @param inclusive true if the view includes the specified element\n* @return NavigableSet view of the specified range\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:tailSet(java.lang.Object,boolean)": "/**\n* Returns a NavigableSet from a specified element onward.\n* @param fromElement the starting element for the tail set\n* @param inclusive whether the starting element is included\n* @return NavigableSet of type V from the delegate\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:pollLast()": "/**\n* Retrieves and removes the last element using a descending iterator.\n* @return the last element or null if none exists\n*/"
    },
    "com.google.common.collect.AbstractMultimap": {
        "com.google.common.collect.AbstractMultimap:values()": "/**\n* Returns a collection of values, creating them if not already initialized.\n* @return Collection of values\n*/",
        "com.google.common.collect.AbstractMultimap:entries()": "/**\n* Retrieves a collection of entries, creating them if not already available.\n* @return Collection of Entry objects\n*/",
        "com.google.common.collect.AbstractMultimap:entrySpliterator()": "/**\n* Returns a Spliterator for the map's entries.\n* @return Spliterator of map entries, distinct if SetMultimap\n*/",
        "com.google.common.collect.AbstractMultimap:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if no elements are present, false otherwise\n*/",
        "com.google.common.collect.AbstractMultimap:asMap()": "/**\n* Returns a map view of the collection.\n* @return a map of keys to their corresponding collections\n*/",
        "com.google.common.collect.AbstractMultimap:put(java.lang.Object,java.lang.Object)": "/**\n* Adds a value to the collection associated with the given key.\n* @param key the key for the collection\n* @param value the value to add\n* @return true if the value was added, false if it was already present\n*/",
        "com.google.common.collect.AbstractMultimap:keySet()": "/**\n* Retrieves the set of keys, creating it if not already initialized.\n* @return Set of keys in the collection\n*/",
        "com.google.common.collect.AbstractMultimap:keys()": "/**\n* Retrieves the multiset of keys, creating it if not already initialized.\n* @return Multiset of keys\n*/",
        "com.google.common.collect.AbstractMultimap:valueIterator()": "/**\n* Returns an iterator for values from key-value entries.\n* @return Iterator of values from the entries\n*/",
        "com.google.common.collect.AbstractMultimap:containsValue(java.lang.Object)": "/**\n* Checks if a value exists in any collection.\n* @param value the value to search for\n* @return true if found, otherwise false\n*/",
        "com.google.common.collect.AbstractMultimap:containsEntry(java.lang.Object,java.lang.Object)": "/**\n* Checks if the map contains the specified key-value entry.\n* @param key the key to check\n* @param value the value to check\n* @return true if entry exists, false otherwise\n*/",
        "com.google.common.collect.AbstractMultimap:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes a value from the collection associated with the given key.\n* @param key the key whose associated collection is modified\n* @param value the value to be removed from the collection\n* @return true if the value was removed, false otherwise\n*/",
        "com.google.common.collect.AbstractMultimap:hashCode()": "/**\n* Computes the hash code based on the collection's map view.\n* @return hash code integer for the object\n*/",
        "com.google.common.collect.AbstractMultimap:toString()": "/**\n* Returns a string representation of the object.\n* @return string representation of the map view of the collection\n*/",
        "com.google.common.collect.AbstractMultimap:putAll(com.google.common.collect.Multimap)": "/**\n* Adds all entries from the given multimap to this collection.\n* @param multimap the multimap containing entries to add\n* @return true if any entries were added, false otherwise\n*/",
        "com.google.common.collect.AbstractMultimap:equals(java.lang.Object)": "/**\n* Checks equality of this object with another object.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.AbstractMultimap:putAll(java.lang.Object,java.lang.Iterable)": "/**\n* Adds all values to the collection associated with the given key.\n* @param key the key for the collection\n* @param values iterable of values to add\n* @return true if the collection was modified\n*/",
        "com.google.common.collect.AbstractMultimap:valueSpliterator()": "/**\n* Creates a Spliterator for values from key-value entries.\n* @return Spliterator of values with specified size\n*/",
        "com.google.common.collect.AbstractMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a given key and returns removed values collection.\n* @param key the key whose values are to be replaced\n* @param values iterable of new values to associate with the key\n* @return Collection of removed values\n*/"
    },
    "com.google.common.collect.Multimaps$Keys": {
        "com.google.common.collect.Multimaps$Keys:<init>(com.google.common.collect.Multimap)": "/**\n* Initializes Keys with the provided multimap.\n* @param multimap a Multimap containing key-value pairs\n*/",
        "com.google.common.collect.Multimaps$Keys:entryIterator()": "/**\n* Returns an iterator over multiset entries with element count.\n* @return Iterator of Multiset.Entry containing elements and their counts\n*/",
        "com.google.common.collect.Multimaps$Keys:distinctElements()": "/**\n* Returns the count of distinct elements in the multimap.\n* @return number of unique keys in the multimap\n*/",
        "com.google.common.collect.Multimaps$Keys:size()": "/**\n* Returns the number of key-value pairs in the multimap.\n* @return int count of key-value pairs\n*/",
        "com.google.common.collect.Multimaps$Keys:contains(java.lang.Object)": "/**\n* Checks if the multimap contains the specified element.\n* @param element the element to check for presence\n* @return true if the element exists, false otherwise\n*/",
        "com.google.common.collect.Multimaps$Keys:clear()": "/**\n* Clears all entries from the multimap.\n*/",
        "com.google.common.collect.Multimaps$Keys:elementSet()": "/**\n* Returns the set of keys in the multimap.\n* @return Set of keys contained in the multimap\n*/",
        "com.google.common.collect.Multimaps$Keys:elementIterator()": "/**\n* Throws an AssertionError indicating this method should not be invoked.\n*/",
        "com.google.common.collect.Multimaps$Keys:forEach(java.util.function.Consumer)": "/**\n* Applies a consumer to each key in the multimap.\n* @param consumer the action to be performed on each key\n*/",
        "com.google.common.collect.Multimaps$Keys:iterator()": "/**\n* Returns an iterator for the keys in the multimap.\n* @return Iterator of keys from the multimap entries\n*/",
        "com.google.common.collect.Multimaps$Keys:spliterator()": "/**\n* Returns a Spliterator for the keys of the multimap's entries.\n* @return Spliterator of keys from the multimap\n*/",
        "com.google.common.collect.Multimaps$Keys:count(java.lang.Object)": "/**\n* Counts occurrences of an element in the multimap.\n* @param element the element to count\n* @return the number of occurrences, or 0 if not present\n*/",
        "com.google.common.collect.Multimaps$Keys:remove(java.lang.Object,int)": "/**\n* Removes specified occurrences of an element and returns the old count.\n* @param element the element to remove\n* @param occurrences the number of occurrences to remove\n* @return old count of occurrences before removal\n*/"
    },
    "com.google.common.collect.Count": {
        "com.google.common.collect.Count:getAndSet(int)": "/**\n* Gets the current value and updates it to newValue.\n* @param newValue the new value to set\n* @return the previous value before update\n*/",
        "com.google.common.collect.Count:get()": "/**\n* Retrieves the current value.\n* @return the current integer value\n*/",
        "com.google.common.collect.Count:addAndGet(int)": "/**\n* Adds delta to value and returns the updated value.\n* @param delta amount to add to the current value\n* @return updated value after addition\n*/",
        "com.google.common.collect.Count:set(int)": "/**\n* Sets the value to the specified new value.\n* @param newValue the new integer value to be set\n*/",
        "com.google.common.collect.Count:<init>(int)": "/**\n* Initializes Count object with a specified value.\n* @param value integer to set for the Count object\n*/",
        "com.google.common.collect.Count:add(int)": "/**\n* Increments the value by the specified delta.\n* @param delta the amount to add to the current value\n*/",
        "com.google.common.collect.Count:toString()": "/**\n* Returns a string representation of the integer value.\n* @return string representation of the value\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator": {
        "com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator:hasNext()": "/**\n* Checks if there are more elements to iterate over.\n* @return true if more elements exist, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator:next()": "/**\n* Returns the next key from the current entry, updating occurrences if needed.\n* @return the key of the current entry\n*/",
        "com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator:remove()": "/**\n* Removes an entry, updating frequency and size.\n* @throws ConcurrentModificationException if frequency is non-positive\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultiset": {
        "com.google.common.collect.AbstractMapBasedMultiset:elementIterator()": "/**\n* Returns an iterator over the elements in the backing map.\n* @return Iterator of elements from the backing map\n*/",
        "com.google.common.collect.AbstractMapBasedMultiset:entryIterator()": "/**\n* Returns an iterator for the multiset entries.\n* @return Iterator of Multiset.Entry containing elements and their counts\n*/",
        "com.google.common.collect.AbstractMapBasedMultiset:distinctElements()": "/**\n* Returns the count of distinct elements in the backing map.\n* @return number of distinct elements\n*/",
        "com.google.common.collect.AbstractMapBasedMultiset:iterator()": "/**\n* Returns an iterator for the multiset elements.\n* @return Iterator for the multiset elements\n*/",
        "com.google.common.collect.AbstractMapBasedMultiset:readObjectNoData()": "/**\n* Throws an exception if no data is found during object deserialization.\n* @throws InvalidObjectException if stream data is missing\n*/",
        "com.google.common.collect.AbstractMapBasedMultiset:setBackingMap(java.util.Map)": "/**\n* Sets the backing map for the data structure.\n* @param backingMap a map linking elements to their counts\n*/",
        "com.google.common.collect.AbstractMapBasedMultiset:forEachEntry(java.util.function.ObjIntConsumer)": "/**\n* Applies the given action to each entry in the backing map.\n* @param action consumer for processing map entries\n*/",
        "com.google.common.collect.AbstractMapBasedMultiset:<init>(java.util.Map)": "/**\n* Constructs a multiset with a backing map.\n* @param backingMap map of elements to their counts; must be empty\n*/",
        "com.google.common.collect.AbstractMapBasedMultiset:size()": "/**\n* Returns the size as a saturated int.\n* @return saturated int value of size\n*/",
        "com.google.common.collect.AbstractMapBasedMultiset:getAndSet(com.google.common.collect.Count,int)": "/**\n* Updates count in Count object and returns previous value.\n* @param i Count object or null; @param count new value to set\n* @return previous count or 0 if i is null\n*/",
        "com.google.common.collect.AbstractMapBasedMultiset:clear()": "/**\n* Resets all frequencies and clears the backing map.\n*/",
        "com.google.common.collect.AbstractMapBasedMultiset:count(java.lang.Object)": "/**\n* Counts occurrences of an element in the backing map.\n* @param element the element to count\n* @return the count of occurrences or 0 if not found\n*/",
        "com.google.common.collect.AbstractMapBasedMultiset:setCount(java.lang.Object,int)": "/**\n* Sets the count for an element, updating the backing map and returning the old count.\n* @param element the key for the count in the backing map\n* @param count the new count to set, must be non-negative\n* @return the previous count for the element\n*/",
        "com.google.common.collect.AbstractMapBasedMultiset:entrySet()": "/**\n* Returns a set of multiset entries from the superclass.\n* @return Set of Multiset.Entry objects\n*/",
        "com.google.common.collect.AbstractMapBasedMultiset:add(java.lang.Object,int)": "/**\n* Adds occurrences of an element; returns previous count or 0 if new.\n* @param element the element to add occurrences for\n* @param occurrences number of occurrences to add\n* @return previous count of occurrences for the element\n*/",
        "com.google.common.collect.AbstractMapBasedMultiset:remove(java.lang.Object,int)": "/**\n* Removes specified occurrences of an element; returns previous count.\n* @param element the element to remove\n* @param occurrences number of occurrences to remove\n* @return previous count of the element\n*/"
    },
    "com.google.common.collect.CollectPreconditions": {
        "com.google.common.collect.CollectPreconditions:checkNonnegative(int,java.lang.String)": "/**\n* Validates that the value is non-negative.\n* @param value integer to check\n* @param name name of the value for error messaging\n* @return the input value if non-negative\n*/",
        "com.google.common.collect.CollectPreconditions:checkEntryNotNull(java.lang.Object,java.lang.Object)": "/**\n* Validates that neither key nor value is null.\n* @param key the entry key\n* @param value the entry value\n* @throws NullPointerException if key or value is null\n*/",
        "com.google.common.collect.CollectPreconditions:checkNonnegative(long,java.lang.String)": "/**\n* Validates that the value is non-negative.\n* @param value the number to check\n* @param name the name of the value for error reporting\n* @return the non-negative value\n*/",
        "com.google.common.collect.CollectPreconditions:checkPositive(int,java.lang.String)": "/**\n* Validates that the given value is positive.\n* @param value the number to check\n* @param name the name of the value for error reporting\n*/",
        "com.google.common.collect.CollectPreconditions:checkRemove(boolean)": "/**\n* Validates if removal is allowed based on the state.\n* @param canRemove true if removal is permitted, false otherwise\n*/"
    },
    "com.google.common.collect.AbstractMapEntry": {
        "com.google.common.collect.AbstractMapEntry:setValue(java.lang.Object)": "/**\n* Sets the value; always throws UnsupportedOperationException.\n* @param value the value to set, ignored in this implementation\n* @return never returns a value\n*/",
        "com.google.common.collect.AbstractMapEntry:hashCode()": "/**\n* Computes the hash code based on key and value.\n* @return hash code as an integer\n*/",
        "com.google.common.collect.AbstractMapEntry:toString()": "/**\n* Returns a string representation of the key-value pair.\n* @return formatted string \"key=value\"\n*/",
        "com.google.common.collect.AbstractMapEntry:equals(java.lang.Object)": "/**\n* Compares this Entry with another for equality.\n* @param object object to compare with\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.collect.AbstractMultimap$Entries": {
        "com.google.common.collect.AbstractMultimap$Entries:iterator()": "/**\n* Returns an iterator over the entries in the collection.\n* @return Iterator of key-value entries\n*/",
        "com.google.common.collect.AbstractMultimap$Entries:multimap()": "/**\n* Returns the multimap instance from the enclosing AbstractMultimap.\n* @return Multimap containing key-value pairs\n*/",
        "com.google.common.collect.AbstractMultimap$Entries:spliterator()": "/**\n* Returns a Spliterator for the map's entries.\n* @return Spliterator of map entries\n*/"
    },
    "com.google.common.collect.AbstractMultimap$Values": {
        "com.google.common.collect.AbstractMultimap$Values:size()": "/**\n* Returns the number of elements in the multimap.\n* @return the size of the multimap\n*/",
        "com.google.common.collect.AbstractMultimap$Values:clear()": "/**\n* Clears all entries from the multimap.\n*/",
        "com.google.common.collect.AbstractMultimap$Values:iterator()": "/**\n* Returns an iterator for the values in the key-value entries.\n* @return Iterator of values from the entries\n*/",
        "com.google.common.collect.AbstractMultimap$Values:contains(java.lang.Object)": "/**\n* Checks if the collection contains the specified value.\n* @param o the value to search for\n* @return true if the value exists, otherwise false\n*/",
        "com.google.common.collect.AbstractMultimap$Values:spliterator()": "/**\n* Returns a Spliterator for the values of key-value entries.\n* @return Spliterator of values\n*/"
    },
    "com.google.common.collect.Multimaps": {
        "com.google.common.collect.Multimaps:equalsImpl(com.google.common.collect.Multimap,java.lang.Object)": "/**\n* Checks equality of a Multimap with another object.\n* @param multimap the Multimap to compare\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Multimaps:<init>()": "/**\n* Private constructor to prevent instantiation of the Multimaps class.\n*/",
        "com.google.common.collect.Multimaps:unmodifiableValueCollection(java.util.Collection)": "/**\n* Returns an unmodifiable view of the specified collection.\n* @param collection the collection to wrap\n* @return unmodifiable Collection of the input\n*/",
        "com.google.common.collect.Multimaps:asMap(com.google.common.collect.ListMultimap)": "/**\n* Converts a ListMultimap to a Map of keys and their corresponding list of values.\n* @param multimap the ListMultimap to convert\n* @return a Map with keys and lists of values from the multimap\n*/",
        "com.google.common.collect.Multimaps:asMap(com.google.common.collect.SetMultimap)": "/**\n* Converts a SetMultimap to a Map of Sets.\n* @param multimap the SetMultimap to convert\n* @return Map with keys and corresponding Sets of values\n*/",
        "com.google.common.collect.Multimaps:asMap(com.google.common.collect.SortedSetMultimap)": "/**\n* Converts a SortedSetMultimap to a Map of SortedSets.\n* @param multimap the SortedSetMultimap to convert\n* @return a Map with keys and corresponding SortedSets of values\n*/",
        "com.google.common.collect.Multimaps:asMap(com.google.common.collect.Multimap)": "/**\n* Converts a Multimap to a Map of collections.\n* @param multimap the input Multimap to convert\n* @return a Map with keys and collections of values\n*/",
        "com.google.common.collect.Multimaps:unmodifiableMultimap(com.google.common.collect.ImmutableMultimap)": "/**\n* Returns an unmodifiable view of the given multimap.\n* @param delegate the multimap to wrap\n* @return the non-null unmodifiable multimap\n*/",
        "com.google.common.collect.Multimaps:unmodifiableSetMultimap(com.google.common.collect.ImmutableSetMultimap)": "/**\n* Returns an unmodifiable view of the given SetMultimap.\n* @param delegate the ImmutableSetMultimap to wrap\n* @return non-null unmodifiable SetMultimap\n*/",
        "com.google.common.collect.Multimaps:unmodifiableListMultimap(com.google.common.collect.ImmutableListMultimap)": "/**\n* Returns an unmodifiable view of the given ListMultimap.\n* @param delegate the ListMultimap to wrap\n* @return non-null ListMultimap\n*/",
        "com.google.common.collect.Multimaps:toMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)": "/**\n* Collects elements into a multimap using key and value functions.\n* @param keyFunction function to extract keys\n* @param valueFunction function to extract values\n* @param multimapSupplier supplier for multimap instance\n* @return Collector for multimap\n*/",
        "com.google.common.collect.Multimaps:flatteningToMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)": "/**\n* Collects elements into a multimap using key and value functions.\n* @param keyFunction extracts keys from elements\n* @param valueFunction extracts values as streams from elements\n* @param multimapSupplier creates the multimap\n* @return a Collector for the multimap\n*/",
        "com.google.common.collect.Multimaps:forMap(java.util.Map)": "/**\n* Creates a SetMultimap from the given map.\n* @param map the map to initialize, must not be null\n* @return a new SetMultimap containing the map's entries\n*/",
        "com.google.common.collect.Multimaps:transformEntries(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer)": "/**\n* Transforms entries of a multimap using a specified transformer.\n* @param fromMap source multimap to transform\n* @param transformer function to transform entries\n* @return new multimap with transformed entries\n*/",
        "com.google.common.collect.Multimaps:filterFiltered(com.google.common.collect.FilteredMultimap,com.google.common.base.Predicate)": "/**\n* Filters entries in a multimap based on a combined predicate.\n* @param multimap the multimap to filter\n* @param entryPredicate additional filtering condition\n* @return a filtered multimap with the applied predicates\n*/",
        "com.google.common.collect.Multimaps:filterFiltered(com.google.common.collect.FilteredSetMultimap,com.google.common.base.Predicate)": "/**\n* Filters a multimap using combined predicates.\n* @param multimap the multimap to filter\n* @param entryPredicate the predicate to apply to entries\n* @return a filtered SetMultimap based on the predicates\n*/",
        "com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.ListMultimap,com.google.common.base.Predicate)": "/**\n* Filters keys in a multimap based on a given predicate.\n* @param unfiltered the original multimap to filter\n* @param keyPredicate the predicate to apply on keys\n* @return a filtered ListMultimap with applied key conditions\n*/",
        "com.google.common.collect.Multimaps:transformEntries(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer)": "/**\n* Transforms entries of a multimap using a specified transformer.\n* @param fromMap source multimap to transform\n* @param transformer function to transform entries\n* @return transformed ListMultimap\n*/",
        "com.google.common.collect.Multimaps:transformValues(com.google.common.collect.Multimap,com.google.common.base.Function)": "/**\n* Transforms values of a multimap using a provided function.\n* @param fromMultimap source multimap to transform\n* @param function function to transform values\n* @return new multimap with transformed values\n*/",
        "com.google.common.collect.Multimaps:newMultimap(java.util.Map,com.google.common.base.Supplier)": "/***************\n* Creates a new Multimap using the provided map and collection factory.\n* @param map initial key-collection mapping\n* @param factory supplier for new collections\n* @return a new Multimap instance\n***************/",
        "com.google.common.collect.Multimaps:unmodifiableMultimap(com.google.common.collect.Multimap)": "/**\n* Returns an unmodifiable view of the provided Multimap.\n* @param delegate the Multimap to wrap\n* @return UnmodifiableMultimap or the original if already unmodifiable\n*/",
        "com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)": "/**\n* Filters keys in a SetMultimap based on a given predicate.\n* @param unfiltered the original SetMultimap to filter\n* @param keyPredicate the predicate for filtering keys\n* @return a new filtered SetMultimap with keys that match the predicate\n*/",
        "com.google.common.collect.Multimaps:filterEntries(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)": "/**\n* Filters entries from an unfiltered multimap based on a predicate.\n* @param unfiltered the original multimap to filter\n* @param entryPredicate the condition to filter entries\n* @return a filtered SetMultimap\n*/",
        "com.google.common.collect.Multimaps:transformValues(com.google.common.collect.ListMultimap,com.google.common.base.Function)": "/**\n* Transforms values in a ListMultimap using a provided function.\n* @param fromMultimap source multimap to transform\n* @param function function to apply to each value\n* @return transformed ListMultimap\n*/",
        "com.google.common.collect.Multimaps:synchronizedMultimap(com.google.common.collect.Multimap)": "/**\n* Returns a synchronized version of the provided Multimap.\n* @param multimap the Multimap to wrap\n* @return a synchronized Multimap\n*/",
        "com.google.common.collect.Multimaps:newListMultimap(java.util.Map,com.google.common.base.Supplier)": "/**\n* Creates a new ListMultimap using a provided map and list factory.\n* @param map initial map of collections\n* @param factory list supplier for creating collections\n* @return ListMultimap instance\n*/",
        "com.google.common.collect.Multimaps:newSetMultimap(java.util.Map,com.google.common.base.Supplier)": "/**\n* Creates a new SetMultimap using the provided map and set factory.\n* @param map initial map for the multimap\n* @param factory supplier for creating sets\n* @return a new SetMultimap instance\n*/",
        "com.google.common.collect.Multimaps:unmodifiableListMultimap(com.google.common.collect.ListMultimap)": "/**\n* Returns an unmodifiable view of the given ListMultimap.\n* @param delegate the ListMultimap to wrap\n* @return unmodifiable ListMultimap\n*/",
        "com.google.common.collect.Multimaps:unmodifiableSetMultimap(com.google.common.collect.SetMultimap)": "/**\n* Returns an unmodifiable view of the provided SetMultimap.\n* @param delegate the SetMultimap to wrap\n* @return unmodifiable SetMultimap\n*/",
        "com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.Multimap,com.google.common.base.Predicate)": "/**\n* Filters keys in a multimap based on a specified predicate.\n* @param unfiltered the original multimap to filter\n* @param keyPredicate the predicate to apply on keys\n* @return a filtered multimap with the applied key conditions\n*/",
        "com.google.common.collect.Multimaps:filterValues(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)": "/**\n* Filters a multimap's values based on a provided predicate.\n* @param unfiltered the original multimap to filter\n* @param valuePredicate condition for filtering values\n* @return filtered SetMultimap with values matching the predicate\n*/",
        "com.google.common.collect.Multimaps:filterEntries(com.google.common.collect.Multimap,com.google.common.base.Predicate)": "/**\n* Filters entries in a multimap based on a predicate.\n* @param unfiltered the original multimap to filter\n* @param entryPredicate the condition to filter entries\n* @return a filtered multimap with the applied predicate\n*/",
        "com.google.common.collect.Multimaps:synchronizedListMultimap(com.google.common.collect.ListMultimap)": "/**\n* Returns a synchronized wrapper for the given ListMultimap.\n* @param multimap the ListMultimap to wrap\n* @return a synchronized ListMultimap\n*/",
        "com.google.common.collect.Multimaps:synchronizedSetMultimap(com.google.common.collect.SetMultimap)": "/**\n* Returns a synchronized SetMultimap from the given input multimap.\n* @param multimap input SetMultimap\n* @return synchronized SetMultimap\n*/",
        "com.google.common.collect.Multimaps:newSortedSetMultimap(java.util.Map,com.google.common.base.Supplier)": "/**\n* Creates a new SortedSetMultimap with the given map and sorted set factory.\n* @param map initial map of collections for multimap\n* @param factory supplier for creating sorted sets\n* @return a new instance of SortedSetMultimap\n*/",
        "com.google.common.collect.Multimaps:unmodifiableEntries(java.util.Collection)": "/**\n* Returns an unmodifiable collection of entries.\n* @param entries collection of entries to wrap\n* @return unmodifiable collection of entries\n*/",
        "com.google.common.collect.Multimaps:unmodifiableSortedSetMultimap(com.google.common.collect.SortedSetMultimap)": "/**\n* Returns an unmodifiable view of the given SortedSetMultimap.\n* @param delegate the SortedSetMultimap to wrap\n* @return unmodifiable SortedSetMultimap\n*/",
        "com.google.common.collect.Multimaps:filterValues(com.google.common.collect.Multimap,com.google.common.base.Predicate)": "/**\n* Filters values in a multimap based on a value predicate.\n* @param unfiltered the original multimap to filter\n* @param valuePredicate condition to filter values\n* @return filtered multimap with values matching the predicate\n*/",
        "com.google.common.collect.Multimaps:synchronizedSortedSetMultimap(com.google.common.collect.SortedSetMultimap)": "/**\n* Returns a synchronized version of the given SortedSetMultimap.\n* @param multimap the multimap to synchronize\n* @return synchronized SortedSetMultimap\n*/",
        "com.google.common.collect.Multimaps:index(java.util.Iterator,com.google.common.base.Function)": "/**\n* Creates an ImmutableListMultimap from an iterator of values using a key function.\n* @param values iterator of values to index\n* @param keyFunction function to extract keys from values\n* @return ImmutableListMultimap of keys to values\n*/",
        "com.google.common.collect.Multimaps:index(java.lang.Iterable,com.google.common.base.Function)": "/**\n* Creates an ImmutableListMultimap from iterable values using a key function.\n* @param values iterable of values to index\n* @param keyFunction function to extract keys from values\n* @return ImmutableListMultimap of keys to values\n*/"
    },
    "com.google.common.collect.AbstractMultiset$ElementSet": {
        "com.google.common.collect.AbstractMultiset$ElementSet:iterator()": "/**\n* Returns an iterator over elements of this collection.\n* @return an Iterator for the collection's elements\n*/",
        "com.google.common.collect.AbstractMultiset$ElementSet:multiset()": "/**\n* Returns the multiset instance from the enclosing AbstractMultiset.\n* @return Multiset<E> instance of the enclosing class\n*/"
    },
    "com.google.common.collect.AbstractMultiset$EntrySet": {
        "com.google.common.collect.AbstractMultiset$EntrySet:iterator()": "/**\n* Returns an iterator over the entries in the collection.\n* @return Iterator for the collection's entries\n*/",
        "com.google.common.collect.AbstractMultiset$EntrySet:size()": "/**\n* Returns the count of distinct elements.\n* @return number of distinct elements in the collection\n*/",
        "com.google.common.collect.AbstractMultiset$EntrySet:multiset()": "/**\n* Returns the multiset instance from the enclosing AbstractMultiset.\n* @return the current multiset\n*/"
    },
    "com.google.common.collect.AbstractMultiset": {
        "com.google.common.collect.AbstractMultiset:contains(java.lang.Object)": "/**\n* Checks if the collection contains the specified element.\n* @param element the object to check for presence\n* @return true if present, false otherwise\n*/",
        "com.google.common.collect.AbstractMultiset:add(java.lang.Object,int)": "/**\n* Adds an element a specified number of times; always throws UnsupportedOperationException.\n* @param element the element to add\n* @param occurrences the number of times to add the element\n* @return int (not applicable as exception is always thrown)\n*/",
        "com.google.common.collect.AbstractMultiset:remove(java.lang.Object,int)": "/**\n* Removes specified occurrences of an element.\n* @param element the element to remove\n* @param occurrences number of occurrences to remove\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.AbstractMultiset:createElementSet()": "/**\n* Creates and returns a new instance of ElementSet.\n* @return a Set containing elements of type E\n*/",
        "com.google.common.collect.AbstractMultiset:createEntrySet()": "/**\n* Creates and returns a set of entries.\n* @return a Set of Entry objects\n*/",
        "com.google.common.collect.AbstractMultiset:add(java.lang.Object)": "/**\n* Adds an element to the collection once.\n* @param element the element to add\n* @return true after adding the element\n*/",
        "com.google.common.collect.AbstractMultiset:remove(java.lang.Object)": "/**** Removes a single occurrence of the specified element. \n* @param element the element to remove \n* @return true if the element was removed, false otherwise \n*/",
        "com.google.common.collect.AbstractMultiset:removeAll(java.util.Collection)": "/**\n* Removes specified elements from this multiset.\n* @param elementsToRemove collection of elements to remove\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.AbstractMultiset:elementSet()": "/**\n* Retrieves the element set, creating it if not already initialized.\n* @return a Set containing elements of type E\n*/",
        "com.google.common.collect.AbstractMultiset:entrySet()": "/**\n* Returns a set of entries, creating it if not already initialized.\n* @return Set of Entry objects\n*/",
        "com.google.common.collect.AbstractMultiset:equals(java.lang.Object)": "/**\n* Compares this object for equality with another.\n* @param object the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.AbstractMultiset:retainAll(java.util.Collection)": "/**\n* Retains elements in this Multiset that are also in the specified collection.\n* @param elementsToRetain collection of elements to retain\n* @return true if this Multiset was modified\n*/",
        "com.google.common.collect.AbstractMultiset:setCount(java.lang.Object,int)": "/**\n* Sets the count of an element in the Multiset.\n* @param element the element to set the count for\n* @param count the new count for the element\n* @return the previous count of the element\n*/",
        "com.google.common.collect.AbstractMultiset:setCount(java.lang.Object,int,int)": "/**\n* Sets the count of an element in the multiset.\n* @param element the element to update\n* @param oldCount the expected current count\n* @param newCount the new count to set\n* @return true if count was updated, false otherwise\n*/",
        "com.google.common.collect.AbstractMultiset:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if there are no entries, false otherwise\n*/",
        "com.google.common.collect.AbstractMultiset:hashCode()": "/**\n* Computes hash code based on entry set.\n* @return hash code integer value of the entry set\n*/",
        "com.google.common.collect.AbstractMultiset:toString()": "/**\n* Returns string representation of the object using its entry set.\n* @return String representation of the entry set\n*/",
        "com.google.common.collect.AbstractMultiset:addAll(java.util.Collection)": "/**\n* Adds all elements from a collection to this multiset.\n* @param elementsToAdd collection of elements to add\n* @return true if elements were added, false if empty\n*/"
    },
    "com.google.common.collect.Multisets": {
        "com.google.common.collect.Multisets:removeAllImpl(com.google.common.collect.Multiset,java.util.Collection)": "/**\n* Removes specified elements from the given multiset.\n* @param self multiset from which elements are removed\n* @param elementsToRemove collection of elements to remove\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.Multisets:equalsImpl(com.google.common.collect.Multiset,java.lang.Object)": "/**\n* Checks equality between a Multiset and an object.\n* @param multiset the Multiset to compare\n* @param object the object to compare with the Multiset\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Multisets:elementIterator(java.util.Iterator)": "/**\n* Converts an Entry iterator to an element iterator.\n* @param entryIterator iterator of Entry objects\n* @return Iterator of elements extracted from entries\n*/",
        "com.google.common.collect.Multisets:inferDistinctElements(java.lang.Iterable)": "/**\n* Infers distinct elements count from a collection.\n* @param elements collection of elements\n* @return number of distinct elements or 11 if not a Multiset\n*/",
        "com.google.common.collect.Multisets:<init>()": "/**\n* Private constructor to prevent instantiation of the Multisets class.\n*/",
        "com.google.common.collect.Multisets:unmodifiableMultiset(com.google.common.collect.ImmutableMultiset)": "/**\n* Returns a non-null unmodifiable multiset from the given immutable multiset.\n* @param multiset the immutable multiset to check\n* @return the non-null multiset\n*/",
        "com.google.common.collect.Multisets:union(com.google.common.collect.Multiset,com.google.common.collect.Multiset)": "/**\n* Combines two multisets into a new multiset containing their union.\n* @param multiset1 first multiset\n* @param multiset2 second multiset\n* @return a new multiset representing the union\n*/",
        "com.google.common.collect.Multisets:intersection(com.google.common.collect.Multiset,com.google.common.collect.Multiset)": "/**\n* Computes the intersection of two multisets.\n* @param multiset1 first multiset\n* @param multiset2 second multiset\n* @return Multiset containing common elements with minimum counts\n*/",
        "com.google.common.collect.Multisets:sum(com.google.common.collect.Multiset,com.google.common.collect.Multiset)": "/**\n* Sums two multisets and returns a combined view.\n* @param multiset1 first multiset to sum\n* @param multiset2 second multiset to sum\n* @return a new multiset view containing elements from both\n*/",
        "com.google.common.collect.Multisets:difference(com.google.common.collect.Multiset,com.google.common.collect.Multiset)": "/**\n* Computes the difference between two multisets.\n* @param multiset1 first multiset\n* @param multiset2 second multiset\n* @return a new multiset representing the difference\n*/",
        "com.google.common.collect.Multisets:containsOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)": "/**\n* Checks if subMultiset's occurrences are in superMultiset.\n* @param superMultiset the multiset to check against\n* @param subMultiset the multiset to check for occurrences\n* @return true if subMultiset is contained in superMultiset, false otherwise\n*/",
        "com.google.common.collect.Multisets:retainOccurrencesImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset)": "/**\n* Modifies multiset by retaining specified occurrences; returns true if changed.\n* @param multisetToModify multiset to modify\n* @param occurrencesToRetain occurrences to retain\n* @return true if modifications were made\n*/",
        "com.google.common.collect.Multisets:removeOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)": "/**\n* Removes specified occurrences from a multiset.\n* @param multisetToModify the multiset to update\n* @param occurrencesToRemove the occurrences to be removed\n* @return true if changes were made, false otherwise\n*/",
        "com.google.common.collect.Multisets:retainAllImpl(com.google.common.collect.Multiset,java.util.Collection)": "/**\n* Retains elements in self that are also in elementsToRetain.\n* @param self the Multiset to modify\n* @param elementsToRetain collection of elements to retain\n* @return true if self was modified\n*/",
        "com.google.common.collect.Multisets:linearTimeSizeImpl(com.google.common.collect.Multiset)": "/**\n* Computes the total count of entries in a multiset.\n* @param multiset the multiset to analyze\n* @return total count as an int, saturated to Integer limits\n*/",
        "com.google.common.collect.Multisets:setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int)": "/**\n* Sets the count of an element in a Multiset.\n* @param self the Multiset to modify\n* @param element the element whose count is set\n* @param count the new count for the element\n* @return the previous count of the element\n*/",
        "com.google.common.collect.Multisets:setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int,int)": "/**\n* Updates the count of an element in a multiset if the old count matches.\n* @param self the multiset to update\n* @param element the element whose count is being updated\n* @param oldCount the expected current count of the element\n* @param newCount the new count to set for the element\n* @return true if count was updated, false otherwise\n*/",
        "com.google.common.collect.Multisets:iteratorImpl(com.google.common.collect.Multiset)": "/**\n* Creates an iterator for the specified multiset.\n* @param multiset the multiset to iterate over\n* @return Iterator for the multiset entries\n*/",
        "com.google.common.collect.Multisets:toMultiset(java.util.function.Function,java.util.function.ToIntFunction,java.util.function.Supplier)": "/**\n* Creates a multiset collector from element and count functions.\n* @param elementFunction transforms input to multiset elements\n* @param countFunction provides counts for each element\n* @param multisetSupplier supplies the multiset instance\n* @return Collector for building a multiset\n*/",
        "com.google.common.collect.Multisets:addAllImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset)": "/**\n* Adds all elements from 'elements' to 'self'.\n* @param self the target multiset to add elements to\n* @param elements the source multiset to add from\n* @return true if elements were added, false if empty\n*/",
        "com.google.common.collect.Multisets:retainOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)": "/**\n* Retains specified occurrences in a multiset.\n* @param multisetToModify multiset to modify\n* @param multisetToRetain occurrences to retain\n* @return true if modifications were made\n*/",
        "com.google.common.collect.Multisets:removeOccurrences(com.google.common.collect.Multiset,java.lang.Iterable)": "/**\n* Removes specified occurrences from a multiset.\n* @param multisetToModify the multiset to update\n* @param occurrencesToRemove the occurrences to be removed\n* @return true if changes were made, false otherwise\n*/",
        "com.google.common.collect.Multisets:filter(com.google.common.collect.Multiset,com.google.common.base.Predicate)": "/**\n* Filters a multiset based on a predicate.\n* @param unfiltered the source multiset to filter\n* @param predicate the condition to filter elements\n* @return a new FilteredMultiset containing filtered elements\n*/",
        "com.google.common.collect.Multisets:immutableEntry(java.lang.Object,int)": "/**\n* Creates an immutable entry for a multiset.\n* @param e element of the entry, may be null\n* @param n non-negative count of the element\n* @return Multiset.Entry containing the element and count\n*/",
        "com.google.common.collect.Multisets:spliteratorImpl(com.google.common.collect.Multiset)": "/**\n* Creates a Spliterator from a Multiset, replicating elements by their counts.\n* @param multiset the input Multiset to convert\n* @return a Spliterator for the elements in the Multiset\n*/",
        "com.google.common.collect.Multisets:addAllImpl(com.google.common.collect.Multiset,java.util.Collection)": "/**\n* Adds all elements from a collection to a multiset.\n* @param self the target multiset\n* @param elements source collection of elements\n* @return true if elements were added, false if empty\n*/",
        "com.google.common.collect.Multisets:unmodifiableMultiset(com.google.common.collect.Multiset)": "/**\n* Returns an unmodifiable view of the provided multiset.\n* @param multiset the multiset to wrap\n* @return an unmodifiable Multiset instance\n*/",
        "com.google.common.collect.Multisets:unmodifiableSortedMultiset(com.google.common.collect.SortedMultiset)": "/**\n* Returns an unmodifiable view of the given sorted multiset.\n* @param sortedMultiset the sorted multiset to wrap\n* @return an unmodifiable sorted multiset\n*/",
        "com.google.common.collect.Multisets:copyHighestCountFirst(com.google.common.collect.Multiset)": "/**\n* Returns an ImmutableMultiset sorted by highest counts from the given Multiset.\n* @param multiset input collection to sort\n* @return ImmutableMultiset sorted by element counts\n*/"
    },
    "com.google.common.collect.AbstractNavigableMap$DescendingMap": {
        "com.google.common.collect.AbstractNavigableMap$DescendingMap:entryIterator()": "/**\n* Returns an iterator for the entries in descending order.\n* @return Iterator of key-value entries\n*/",
        "com.google.common.collect.AbstractNavigableMap$DescendingMap:forward()": "/**\n* Returns the current instance of the NavigableMap.\n* @return the NavigableMap instance\n*/"
    },
    "com.google.common.collect.AbstractNavigableMap": {
        "com.google.common.collect.AbstractNavigableMap:lowerEntry(java.lang.Object)": "/**\n* Retrieves the greatest entry less than the specified key.\n* @param key the key to compare against\n* @return the lower entry or null if none exists\n*/",
        "com.google.common.collect.AbstractNavigableMap:floorEntry(java.lang.Object)": "/**\n* Retrieves the highest key-value pair less than or equal to the given key.\n* @param key the key to compare against\n* @return Entry with the floor key-value pair or null if not found\n*/",
        "com.google.common.collect.AbstractNavigableMap:ceilingEntry(java.lang.Object)": "/**\n* Retrieves the least entry greater than or equal to the specified key.\n* @param key the key to compare against\n* @return Entry object or null if no such entry exists\n*/",
        "com.google.common.collect.AbstractNavigableMap:higherEntry(java.lang.Object)": "/**\n* Retrieves the entry with the least key greater than the specified key.\n* @param key the key to compare against\n* @return the higher entry or null if none exists\n*/",
        "com.google.common.collect.AbstractNavigableMap:subMap(java.lang.Object,java.lang.Object)": "/**\n* Returns a view of the portion of this map between fromKey (inclusive) and toKey (exclusive).\n* @param fromKey starting key of the submap\n* @param toKey ending key of the submap\n* @return SortedMap containing the specified range of keys\n*/",
        "com.google.common.collect.AbstractNavigableMap:headMap(java.lang.Object)": "/**\n* Returns a view of the portion of this map whose keys are less than the specified key.\n* @param toKey the upper key for the headMap view\n* @return a sorted map containing keys less than toKey\n*/",
        "com.google.common.collect.AbstractNavigableMap:tailMap(java.lang.Object)": "/**\n* Returns a view of the portion of this map whose keys are greater than or equal to fromKey.\n* @param fromKey the key to start the view from\n* @return SortedMap containing entries from fromKey onwards\n*/",
        "com.google.common.collect.AbstractNavigableMap:descendingMap()": "/**\n* Returns a view of the map in descending order.\n* @return NavigableMap with entries in descending order\n*/",
        "com.google.common.collect.AbstractNavigableMap:pollFirstEntry()": "/**\n* Retrieves and removes the first entry from the map.\n* @return Entry object or null if the map is empty\n*/",
        "com.google.common.collect.AbstractNavigableMap:pollLastEntry()": "/**\n* Retrieves and removes the last entry from the map.\n* @return Entry object or null if the map is empty\n*/",
        "com.google.common.collect.AbstractNavigableMap:firstEntry()": "/**\n* Retrieves the first entry from the entry iterator.\n* @return the first Entry or null if no entries exist\n*/",
        "com.google.common.collect.AbstractNavigableMap:lastEntry()": "/**\n* Retrieves the last entry in the map.\n* @return last Entry<K, V> or null if map is empty\n*/",
        "com.google.common.collect.AbstractNavigableMap:lowerKey(java.lang.Object)": "/**\n* Retrieves the lowest key less than the specified key.\n* @param key the key to compare against\n* @return the lower key or null if none exists\n*/",
        "com.google.common.collect.AbstractNavigableMap:floorKey(java.lang.Object)": "/**\n* Retrieves the highest key less than or equal to the specified key.\n* @param key the key to compare against\n* @return the floor key or null if not found\n*/",
        "com.google.common.collect.AbstractNavigableMap:ceilingKey(java.lang.Object)": "/**\n* Retrieves the least key greater than or equal to the specified key.\n* @param key the key to compare against\n* @return the ceiling key or null if no such key exists\n*/",
        "com.google.common.collect.AbstractNavigableMap:higherKey(java.lang.Object)": "/**\n* Retrieves the highest key greater than the specified key.\n* @param key the key to compare against\n* @return the higher key or null if none exists\n*/",
        "com.google.common.collect.AbstractNavigableMap:descendingKeySet()": "/**\n* Returns a set of keys in descending order.\n* @return NavigableSet of keys from the descending map\n*/",
        "com.google.common.collect.AbstractNavigableMap:firstKey()": "/**\n* Retrieves the first key from the entry set.\n* @return the first key or throws NoSuchElementException if empty\n*/",
        "com.google.common.collect.AbstractNavigableMap:lastKey()": "/**\n* Returns the last key in the map.\n* @return last key of type K or throws NoSuchElementException if empty\n*/",
        "com.google.common.collect.AbstractNavigableMap:navigableKeySet()": "/**\n* Returns a NavigableSet of keys from the map.\n* @return NavigableSet containing the map's keys\n*/",
        "com.google.common.collect.AbstractNavigableMap:keySet()": "/**\n* Returns a set of keys from the map.\n* @return Set of keys, sourced from navigableKeySet()\n*/"
    },
    "com.google.common.collect.AbstractRangeSet": {
        "com.google.common.collect.AbstractRangeSet:<init>()": "/**\n* Constructs an instance of AbstractRangeSet.\n*/",
        "com.google.common.collect.AbstractRangeSet:contains(java.lang.Comparable)": "/**\n* Checks if the specified value is within the range.\n* @param value the value to check for containment\n* @return true if the value is in range, false otherwise\n*/",
        "com.google.common.collect.AbstractRangeSet:isEmpty()": "/**\n* Checks if the collection of ranges is empty.\n* @return true if no ranges exist, false otherwise\n*/",
        "com.google.common.collect.AbstractRangeSet:add(com.google.common.collect.Range)": "/**\n* Adds a range, but operation is unsupported.\n* @param range the range to be added\n*/",
        "com.google.common.collect.AbstractRangeSet:remove(com.google.common.collect.Range)": "/**\n* Removes elements within the specified range.\n* @param range the range of elements to remove\n* @throws UnsupportedOperationException if the operation is not supported\n*/",
        "com.google.common.collect.AbstractRangeSet:enclosesAll(com.google.common.collect.RangeSet)": "/**\n* Checks if this range set encloses all ranges in another range set.\n* @param other range set to check against\n* @return true if all ranges are enclosed, false otherwise\n*/",
        "com.google.common.collect.AbstractRangeSet:addAll(com.google.common.collect.RangeSet)": "/**\n* Adds all ranges from another RangeSet to this one.\n* @param other the RangeSet containing ranges to add\n*/",
        "com.google.common.collect.AbstractRangeSet:removeAll(com.google.common.collect.RangeSet)": "/**\n* Removes all ranges from this set that overlap with the specified range set.\n* @param other the range set to remove ranges from this set\n*/",
        "com.google.common.collect.AbstractRangeSet:intersects(com.google.common.collect.Range)": "/**\n* Checks if this range intersects with another range.\n* @param otherRange the range to check for intersection\n* @return true if intersecting, false otherwise\n*/",
        "com.google.common.collect.AbstractRangeSet:equals(java.lang.Object)": "/**\n* Compares this RangeSet to another object for equality.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.AbstractRangeSet:hashCode()": "/**\n* Computes the hash code based on the object's ranges.\n* @return integer hash code value\n*/",
        "com.google.common.collect.AbstractRangeSet:toString()": "/**\n* Returns a string representation of the object as ranges.\n* @return String representation of ranges\n*/",
        "com.google.common.collect.AbstractRangeSet:clear()": "/**\n* Clears all elements by removing them from the entire range.\n*/"
    },
    "com.google.common.collect.Range": {
        "com.google.common.collect.Range:all()": "/**\n* Returns a Range object representing all possible values.\n* @return Range object encompassing all values\n*/",
        "com.google.common.collect.Range:compareOrThrow(java.lang.Comparable,java.lang.Comparable)": "/**\n* Compares two Comparable objects and returns comparison result.\n* @param left first object to compare\n* @param right second object to compare\n* @return negative if left < right, zero if equal, positive if left > right\n*/",
        "com.google.common.collect.Range:lowerBoundType()": "/**\n* Retrieves the lower bound type of the current bound.\n* @return BoundType representing the lower bound\n*/",
        "com.google.common.collect.Range:upperBoundType()": "/**\n* Retrieves the upper bound type of the current bound.\n* @return BoundType representing the upper bound\n*/",
        "com.google.common.collect.Range:rangeLexOrdering()": "/**\n* Returns a lexicographical ordering for Range objects.\n* @param <C> type of the comparable elements in the range\n* @return Ordering<Range<C>> instance for comparison\n*/",
        "com.google.common.collect.Range:toString(com.google.common.collect.Cut,com.google.common.collect.Cut)": "/**\n* Converts bounds to a string representation.\n* @param lowerBound the lower bound of the range\n* @param upperBound the upper bound of the range\n* @return string representation of the range\n*/",
        "com.google.common.collect.Range:hashCode()": "/**\n* Computes the hash code based on lower and upper bounds.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.Range:contains(java.lang.Comparable)": "/**\n* Checks if value is within bounds.\n* @param value the value to check\n* @return true if within bounds, false otherwise\n*/",
        "com.google.common.collect.Range:hasLowerBound()": "/**\n* Checks if there is a lower bound set.\n* @return true if lowerBound is not below all values, false otherwise\n*/",
        "com.google.common.collect.Range:hasUpperBound()": "/**\n* Checks if there is an upper bound defined.\n* @return true if upperBound is not 'above all', false otherwise\n*/",
        "com.google.common.collect.Range:encloseAll(java.lang.Iterable)": "/**\n* Encloses all values in a Range.\n* @param values iterable collection of comparable elements\n* @return Range object defined by min and max values\n*/",
        "com.google.common.collect.Range:toString()": "/**\n* Returns string representation of the object using bounds.\n* @return string representation of the range defined by lower and upper bounds\n*/",
        "com.google.common.collect.Range:lowerEndpoint()": "/**\n* Retrieves the lower endpoint from the lower bound.\n* @return C instance of the lower endpoint\n*/",
        "com.google.common.collect.Range:upperEndpoint()": "/**\n* Retrieves the endpoint of the upper bound.\n* @return C instance of the upper bound's endpoint\n*/",
        "com.google.common.collect.Range:apply(java.lang.Comparable)": "/**\n* Applies the contains check on the input value.\n* @param input value to check for containment\n* @return true if input is contained, false otherwise\n*/",
        "com.google.common.collect.Range:containsAll(java.lang.Iterable)": "/**\n* Checks if all values are contained in the collection.\n* @param values iterable of elements to check\n* @return true if all elements are contained, false otherwise\n*/",
        "com.google.common.collect.Range:<init>(com.google.common.collect.Cut,com.google.common.collect.Cut)": "/**\n* Constructs a Range with specified bounds.\n* @param lowerBound the lower limit of the range\n* @param upperBound the upper limit of the range\n*/",
        "com.google.common.collect.Range:encloses(com.google.common.collect.Range)": "/**\n* Checks if this range encloses another range.\n* @param other the range to check\n* @return true if this range encloses the other, false otherwise\n*/",
        "com.google.common.collect.Range:isConnected(com.google.common.collect.Range)": "/**\n* Checks if this range is connected to another range.\n* @param other the range to check connection with\n* @return true if ranges are connected, false otherwise\n*/",
        "com.google.common.collect.Range:apply(java.lang.Object)": "/**\n* Checks if the input value is contained.\n* @param input value to check for containment\n* @return true if contained, false otherwise\n*/",
        "com.google.common.collect.Range:isEmpty()": "/**\n* Checks if the range is empty by comparing bounds.\n* @return true if lower and upper bounds are equal, false otherwise\n*/",
        "com.google.common.collect.Range:equals(java.lang.Object)": "/**\n* Checks equality of this Range object with another.\n* @param object object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Range:create(com.google.common.collect.Cut,com.google.common.collect.Cut)": "/**\n* Creates a Range object with specified lower and upper bounds.\n* @param lowerBound the lower limit of the range\n* @param upperBound the upper limit of the range\n* @return a Range object defined by the bounds\n*/",
        "com.google.common.collect.Range:readResolve()": "/**\n* Resolves object to ALL or returns itself.\n* @return resolved object based on equality with ALL\n*/",
        "com.google.common.collect.Range:intersection(com.google.common.collect.Range)": "/**\n* Computes the intersection of two ranges.\n* @param connectedRange the range to intersect with\n* @return a Range object representing the intersection\n*/",
        "com.google.common.collect.Range:gap(com.google.common.collect.Range)": "/**\n* Returns the gap between two ranges or throws if they overlap.\n* @param otherRange the range to check against\n* @return a Range object representing the gap\n*/",
        "com.google.common.collect.Range:span(com.google.common.collect.Range)": "/**\n* Combines this range with another and returns the encompassing range.\n* @param other the range to span with\n* @return the smallest range that includes both\n*/",
        "com.google.common.collect.Range:canonical(com.google.common.collect.DiscreteDomain)": "/**\n* Returns the canonical Range for the given discrete domain.\n* @param domain the discrete domain to consider\n* @return the canonical Range object\n*/"
    },
    "com.google.common.collect.AbstractSequentialIterator": {
        "com.google.common.collect.AbstractSequentialIterator:next()": "/**\n* Retrieves the next element and computes the subsequent one.\n* @return the next element of type T\n* @throws NoSuchElementException if there are no more elements\n*/",
        "com.google.common.collect.AbstractSequentialIterator:hasNext()": "/**\n* Checks if there is a next element available.\n* @return true if next element exists, false otherwise\n*/",
        "com.google.common.collect.AbstractSequentialIterator:<init>(java.lang.Object)": "/**\n* Initializes the iterator with the first element or null.\n* @param firstOrNull the first element or null if none\n*/"
    },
    "com.google.common.collect.AbstractSetMultimap": {
        "com.google.common.collect.AbstractSetMultimap:createUnmodifiableEmptyCollection()": "/**\n* Creates an unmodifiable empty set.\n* @return an empty unmodifiable Set of type V\n*/",
        "com.google.common.collect.AbstractSetMultimap:unmodifiableCollectionSubclass(java.util.Collection)": "/**\n* Returns an unmodifiable view of the specified collection.\n* @param collection the collection to wrap\n* @return unmodifiable Collection of the input collection\n*/",
        "com.google.common.collect.AbstractSetMultimap:wrapCollection(java.lang.Object,java.util.Collection)": "/**\n* Wraps a collection in a WrappedSet using the specified key.\n* @param key identifier for the collection\n* @param collection the collection to wrap\n* @return WrappedSet containing the collection elements\n*/",
        "com.google.common.collect.AbstractSetMultimap:asMap()": "/**\n* Returns a map representation of the object.\n* @return a map with keys of type K and values as collections of type V\n*/",
        "com.google.common.collect.AbstractSetMultimap:equals(java.lang.Object)": "/**\n* Compares this object to another for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.AbstractSetMultimap:<init>(java.util.Map)": "/**\n* Initializes AbstractSetMultimap with an empty map.\n* @param map initial map of collections for multimap\n*/",
        "com.google.common.collect.AbstractSetMultimap:put(java.lang.Object,java.lang.Object)": "/**\n* Adds a value to the collection associated with the key.\n* @param key identifier for the collection\n* @param value to be added to the collection\n* @return true if value was added, false otherwise\n*/",
        "com.google.common.collect.AbstractSetMultimap:get(java.lang.Object)": "/**\n* Retrieves a set of values associated with the given key.\n* @param key identifier for the value collection\n* @return Set of values associated with the key\n*/",
        "com.google.common.collect.AbstractSetMultimap:entries()": "/**\n* Returns a set of entries from the superclass.\n* @return Set of Entry objects\n*/",
        "com.google.common.collect.AbstractSetMultimap:removeAll(java.lang.Object)": "/**\n* Removes values associated with the key and returns them as a Set.\n* @param key the key whose associated values are to be removed\n* @return Set of removed values or an empty set if none found\n*/",
        "com.google.common.collect.AbstractSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a key and returns old values as a Set.\n* @param key identifier for the collection\n* @param values new values to replace existing ones\n* @return Set of old values\n*/"
    },
    "com.google.common.collect.AbstractSortedKeySortedSetMultimap": {
        "com.google.common.collect.AbstractSortedKeySortedSetMultimap:backingMap()": "/**\n* Returns the backing map as a sorted map of key to collection values.\n* @return SortedMap of keys and their associated collections\n*/",
        "com.google.common.collect.AbstractSortedKeySortedSetMultimap:keySet()": "/**\n* Returns the sorted set of keys from the map.\n* @return SortedSet containing the keys\n*/",
        "com.google.common.collect.AbstractSortedKeySortedSetMultimap:createKeySet()": "/**\n* Creates a set of keys from the map.\n* @return a Set containing the map's keys\n*/",
        "com.google.common.collect.AbstractSortedKeySortedSetMultimap:asMap()": "/**\n* Returns a sorted map representation of the object.\n* @return a sorted map with keys of type K and values as collections of type V\n*/",
        "com.google.common.collect.AbstractSortedKeySortedSetMultimap:<init>(java.util.SortedMap)": "/**\n* Constructs AbstractSortedKeySortedSetMultimap with the specified initial sorted map.\n* @param map initial sorted map of collections for multimap\n*/"
    },
    "com.google.common.collect.Ordering": {
        "com.google.common.collect.Ordering:natural()": "/**\n* Returns the natural ordering for comparable types.\n* @return Ordering instance for comparable elements\n*/",
        "com.google.common.collect.Ordering:<init>()": "/**\n* Constructs an instance of Ordering.\n*/",
        "com.google.common.collect.Ordering:min(java.lang.Object,java.lang.Object)": "/**\n* Returns the minimum of two comparable elements.\n* @param a first element\n* @param b second element\n* @return the smaller of a and b\n*/",
        "com.google.common.collect.Ordering:max(java.lang.Object,java.lang.Object)": "/**\n* Returns the maximum of two comparable elements.\n* @param a first element to compare\n* @param b second element to compare\n* @return the greater element or null if both are null\n*/",
        "com.google.common.collect.Ordering:isOrdered(java.lang.Iterable)": "/**\n* Checks if elements in the iterable are in non-decreasing order.\n* @param iterable collection of elements to check\n* @return true if ordered, false otherwise\n*/",
        "com.google.common.collect.Ordering:isStrictlyOrdered(java.lang.Iterable)": "/**\n* Checks if the elements in the iterable are strictly ordered.\n* @param iterable collection of elements to check order\n* @return true if strictly ordered, false otherwise\n*/",
        "com.google.common.collect.Ordering:binarySearch(java.util.List,java.lang.Object)": "/**\n* Performs binary search on a sorted list for a specified key.\n* @param sortedList a list of sorted elements\n* @param key the element to search for\n* @return index of the key or negative if not found\n*/",
        "com.google.common.collect.Ordering:from(com.google.common.collect.Ordering)": "/**\n* Validates and returns the specified Ordering object.\n* @param ordering the Ordering to validate\n* @return non-null Ordering object\n*/",
        "com.google.common.collect.Ordering:min(java.util.Iterator)": "/**\n* Finds the minimum element in an iterator.\n* @param iterator an iterator of comparable elements\n* @return the minimum element found\n*/",
        "com.google.common.collect.Ordering:max(java.util.Iterator)": "/**\n* Finds the maximum element in an iterator.\n* @param iterator an Iterator of comparable elements\n* @return the maximum element found\n*/",
        "com.google.common.collect.Ordering:onResultOf(com.google.common.base.Function)": "/**\n* Creates an Ordering based on a function applied to results.\n* @param function the function to apply for ordering\n* @return an Ordering instance for the specified function\n*/",
        "com.google.common.collect.Ordering:from(java.util.Comparator)": "/**\n* Converts a Comparator to an Ordering, or returns it if already an Ordering.\n* @param comparator the comparison logic to convert\n* @return Ordering instance based on the comparator\n*/",
        "com.google.common.collect.Ordering:compound(java.util.Comparator)": "/**\n* Creates a compound ordering with a secondary comparator.\n* @param secondaryComparator the comparator for tie-breaking\n* @return CompoundOrdering object for the combined ordering\n*/",
        "com.google.common.collect.Ordering:lexicographical()": "/**\n* Returns a lexicographical ordering for Iterable<S> instances.\n* @param <S> type of elements in the Iterable\n* @return Ordering<Iterable<S>> for lexicographical comparison\n*/",
        "com.google.common.collect.Ordering:nullsFirst()": "/**\n* Returns an Ordering that prioritizes null values first.\n* @return Ordering object that handles nulls at the beginning\n*/",
        "com.google.common.collect.Ordering:nullsLast()": "/**\n* Returns an Ordering that places nulls at the end.\n* @return Ordering for elements of type S extending T\n*/",
        "com.google.common.collect.Ordering:reverse()": "/**\n* Returns a reversed ordering of the current ordering.\n* @return Ordering object representing the reversed order\n*/",
        "com.google.common.collect.Ordering:min(java.lang.Iterable)": "/**\n* Finds the minimum element in an iterable collection.\n* @param iterable a collection of comparable elements\n* @return the minimum element or null if empty\n*/",
        "com.google.common.collect.Ordering:max(java.lang.Iterable)": "/**\n* Finds the maximum element in an iterable collection.\n* @param iterable a collection of comparable elements\n* @return the maximum element found\n*/",
        "com.google.common.collect.Ordering:onKeys()": "/**\n* Creates an Ordering based on map entry keys.\n* @return Ordering instance for map entry keys\n*/",
        "com.google.common.collect.Ordering:sortedCopy(java.lang.Iterable)": "/**\n* Returns a sorted copy of the input elements.\n* @param elements iterable source of elements to sort\n* @return List containing sorted elements\n*/",
        "com.google.common.collect.Ordering:leastOf(java.util.Iterator,int)": "/**\n* Retrieves the least k elements from an iterator.\n* @param iterator source of elements\n* @param k number of elements to retrieve\n* @return unmodifiable list of least k elements\n*/",
        "com.google.common.collect.Ordering:compound(java.lang.Iterable)": "/**\n* Creates a compound ordering from a collection of comparators.\n* @param comparators source of Comparator instances\n* @return Ordering object for the combined comparators\n*/",
        "com.google.common.collect.Ordering:leastOf(java.lang.Iterable,int)": "/**\n* Retrieves the least k elements from an iterable collection.\n* @param iterable source of elements\n* @param k number of elements to retrieve\n* @return unmodifiable list of least k elements\n*/",
        "com.google.common.collect.Ordering:greatestOf(java.util.Iterator,int)": "/**\n* Retrieves the greatest k elements from an iterator in reversed order.\n* @param iterator source of elements\n* @param k number of elements to retrieve\n* @return List of greatest k elements\n*/",
        "com.google.common.collect.Ordering:immutableSortedCopy(java.lang.Iterable)": "/**\n* Creates a sorted ImmutableList from the given elements.\n* @param elements source of elements to sort\n* @return sorted ImmutableList of elements\n*/",
        "com.google.common.collect.Ordering:greatestOf(java.lang.Iterable,int)": "/**\n* Retrieves the greatest k elements from an iterable collection.\n* @param iterable source of elements\n* @param k number of elements to retrieve\n* @return list of greatest k elements\n*/",
        "com.google.common.collect.Ordering:explicit(java.util.List)": "/**\n* Creates an Ordering from a specified list of values.\n* @param valuesInOrder ordered list of items\n* @return Ordering object based on the provided list\n*/"
    },
    "com.google.common.collect.AbstractSortedMultiset": {
        "com.google.common.collect.AbstractSortedMultiset:firstEntry()": "/**\n* Returns the first entry in the collection or null if empty.\n* @return first Entry object or null if no entries exist\n*/",
        "com.google.common.collect.AbstractSortedMultiset:lastEntry()": "/**\n* Retrieves the last entry in the collection.\n* @return last Entry<E> or null if the collection is empty\n*/",
        "com.google.common.collect.AbstractSortedMultiset:createDescendingMultiset()": "/**\n* Creates a descending sorted multiset.\n* @return SortedMultiset in descending order\n*/",
        "com.google.common.collect.AbstractSortedMultiset:comparator()": "/**\n* Returns the comparator used for sorting elements.\n* @return Comparator for the elements of type E\n*/",
        "com.google.common.collect.AbstractSortedMultiset:<init>(java.util.Comparator)": "/**\n* Constructs an AbstractSortedMultiset with a comparator.\n* @param comparator the comparator for ordering elements\n*/",
        "com.google.common.collect.AbstractSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Returns a sub-multiset bounded by specified elements and types.\n* @param fromElement starting element, @param toElement ending element\n* @return SortedMultiset bounded by fromElement and toElement\n*/",
        "com.google.common.collect.AbstractSortedMultiset:descendingMultiset()": "/**\n* Returns a descending sorted multiset.\n* @return SortedMultiset in descending order\n*/",
        "com.google.common.collect.AbstractSortedMultiset:<init>()": "/**\n* Initializes an AbstractSortedMultiset with natural ordering.\n*/",
        "com.google.common.collect.AbstractSortedMultiset:elementSet()": "/**\n* Returns the element set as a NavigableSet.\n* @return NavigableSet of elements of type E\n*/",
        "com.google.common.collect.AbstractSortedMultiset:descendingIterator()": "/**\n* Returns an iterator for the entries in descending order.\n* @return Iterator for the descending sorted multiset entries\n*/",
        "com.google.common.collect.AbstractSortedMultiset:createElementSet()": "/**\n* Creates a NavigableSet of elements from the current instance.\n* @return NavigableSet containing the elements\n*/",
        "com.google.common.collect.AbstractSortedMultiset:pollFirstEntry()": "/**\n* Retrieves and removes the first entry from the multiset.\n* @return Entry containing element and count or null if empty\n*/",
        "com.google.common.collect.AbstractSortedMultiset:pollLastEntry()": "/**\n* Retrieves and removes the last entry in descending order.\n* @return Entry object or null if no entries exist\n*/"
    },
    "com.google.common.collect.AbstractSortedSetMultimap": {
        "com.google.common.collect.AbstractSortedSetMultimap:wrapCollection(java.lang.Object,java.util.Collection)": "/**\n* Wraps a collection based on its type with a specified key.\n* @param key the key used for wrapping the collection\n* @param collection the collection to be wrapped\n* @return a wrapped collection of the same type\n*/",
        "com.google.common.collect.AbstractSortedSetMultimap:values()": "/**\n* Returns a collection of values from the superclass.\n* @return Collection of values contained in the map\n*/",
        "com.google.common.collect.AbstractSortedSetMultimap:asMap()": "/**\n* Returns a map representation of the object.\n* @return a map with keys of type K and values as collections of type V\n*/",
        "com.google.common.collect.AbstractSortedSetMultimap:<init>(java.util.Map)": "/**\n* Constructs AbstractSortedSetMultimap with the specified initial map.\n* @param map initial map of collections for multimap\n*/",
        "com.google.common.collect.AbstractSortedSetMultimap:get(java.lang.Object)": "/**\n* Retrieves a sorted set of values for the specified key.\n* @param key identifier for the value collection\n* @return SortedSet of values associated with the key\n*/",
        "com.google.common.collect.AbstractSortedSetMultimap:removeAll(java.lang.Object)": "/**\n* Removes values associated with the key and returns them as a SortedSet.\n* @param key the key whose associated values are to be removed\n* @return SortedSet of removed values or an empty set if none found\n*/",
        "com.google.common.collect.AbstractSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a key and returns old values as a SortedSet.\n* @param key identifier for the collection\n* @param values new values to replace existing ones\n* @return SortedSet of old values\n*/",
        "com.google.common.collect.AbstractSortedSetMultimap:unmodifiableCollectionSubclass(java.util.Collection)": "/**\n* Returns an unmodifiable view of the given collection.\n* @param collection input collection to wrap\n* @return SortedSet view of the collection\n*/",
        "com.google.common.collect.AbstractSortedSetMultimap:createUnmodifiableEmptyCollection()": "/**\n* Creates an unmodifiable empty collection.\n* @return SortedSet view of an empty collection\n*/"
    },
    "com.google.common.collect.AbstractTable$CellSet": {
        "com.google.common.collect.AbstractTable$CellSet:iterator()": "/**\n* Returns an iterator for table cells.\n* @return Iterator of Table.Cell objects\n*/",
        "com.google.common.collect.AbstractTable$CellSet:spliterator()": "/**\n* Returns a Spliterator for traversing cells.\n* @return Spliterator of Cell objects\n*/",
        "com.google.common.collect.AbstractTable$CellSet:size()": "/**\n* Returns the size of the table.\n* @return the number of elements in the table\n*/",
        "com.google.common.collect.AbstractTable$CellSet:contains(java.lang.Object)": "/**\n* Checks if a Cell is contained in the collection.\n* @param o object to check; must be a Cell\n* @return true if the Cell exists, false otherwise\n*/",
        "com.google.common.collect.AbstractTable$CellSet:remove(java.lang.Object)": "/**\n* Removes a Cell from the collection if present.\n* @param o the object to remove, must be a Cell\n* @return true if removed, false otherwise\n*/",
        "com.google.common.collect.AbstractTable$CellSet:clear()": "/**\n* Clears all elements from the cell set by invoking the parent clear method.\n*/"
    },
    "com.google.common.collect.AbstractTable": {
        "com.google.common.collect.AbstractTable:containsValue(java.lang.Object)": "/**\n* Checks if the map contains the specified value.\n* @param value the value to search for\n* @return true if the value is found, false otherwise\n*/",
        "com.google.common.collect.AbstractTable:rowKeySet()": "/**\n* Returns the set of row keys from the row map.\n* @return Set of row keys\n*/",
        "com.google.common.collect.AbstractTable:columnKeySet()": "/**\n* Returns a set of keys for the columns in the map.\n* @return Set of column keys\n*/",
        "com.google.common.collect.AbstractTable:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if the collection has no elements, false otherwise\n*/",
        "com.google.common.collect.AbstractTable:put(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Inserts a value into a specified row and column.\n* @param rowKey identifier for the row\n* @param columnKey identifier for the column\n* @param value the value to insert\n* @return previous value at the specified position or null if none\n*/",
        "com.google.common.collect.AbstractTable:createCellSet()": "/**\n* Creates and returns a set of cells.\n* @return Set of Cell objects\n*/",
        "com.google.common.collect.AbstractTable:createValues()": "/**\n* Creates and returns a new collection of values.\n* @return a Collection containing values\n*/",
        "com.google.common.collect.AbstractTable:toString()": "/**\n* Returns string representation of the rowMap.\n* @return string representation of the rowMap object\n*/",
        "com.google.common.collect.AbstractTable:putAll(com.google.common.collect.Table)": "/**\n* Inserts all entries from the given table into the current table.\n* @param table source table containing entries to insert\n*/",
        "com.google.common.collect.AbstractTable:cellSet()": "/**\n* Returns a set of cells, creating it if not already initialized.\n* @return Set of Cell objects\n*/",
        "com.google.common.collect.AbstractTable:values()": "/**\n* Retrieves values collection, creating it if not already initialized.\n* @return Collection of values\n*/",
        "com.google.common.collect.AbstractTable:equals(java.lang.Object)": "/**\n* Checks equality of the current object with another.\n* @param obj the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.AbstractTable:valuesSpliterator()": "/**\n* Retrieves a Spliterator for values from the cell Spliterator.\n* @return a Spliterator of values mapped from cells\n*/",
        "com.google.common.collect.AbstractTable:get(java.lang.Object,java.lang.Object)": "/**\n* Retrieves a value from a specified row and column in a map.\n* @param rowKey the key for the row; may be null\n* @param columnKey the key for the column; may be null\n* @return the value at the specified row and column, or null if not found\n*/",
        "com.google.common.collect.AbstractTable:containsRow(java.lang.Object)": "/**\n* Checks if a row exists by its key.\n* @param rowKey the key of the row to check\n* @return true if the row exists, false otherwise\n*/",
        "com.google.common.collect.AbstractTable:containsColumn(java.lang.Object)": "/**\n* Checks if the column map contains the specified column key.\n* @param columnKey the key of the column to check\n* @return true if the column exists, false otherwise\n*/",
        "com.google.common.collect.AbstractTable:contains(java.lang.Object,java.lang.Object)": "/**\n* Checks if a value exists in a specified row and column.\n* @param rowKey the key for the row\n* @param columnKey the key for the column\n* @return true if the value exists, false otherwise\n*/",
        "com.google.common.collect.AbstractTable:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes a value from a specified row and column in a map.\n* @param rowKey the key for the row; @param columnKey the key for the column\n* @return the removed value or null if not found\n*/",
        "com.google.common.collect.AbstractTable:clear()": "/**\n* Clears all elements from the cell set.\n*/",
        "com.google.common.collect.AbstractTable:valuesIterator()": "/**\n* Returns an iterator for cell values.\n* @return Iterator of values from cells in the set\n*/",
        "com.google.common.collect.AbstractTable:hashCode()": "/**\n* Computes hash code based on the cell set.\n* @return hash code integer derived from the cell set\n*/"
    },
    "com.google.common.collect.AbstractTable$Values": {
        "com.google.common.collect.AbstractTable$Values:size()": "/**\n* Returns the size of the AbstractTable.\n* @return the number of elements in the table\n*/",
        "com.google.common.collect.AbstractTable$Values:contains(java.lang.Object)": "/**\n* Checks if the collection contains the specified object.\n* @param o the object to search for\n* @return true if the object is found, false otherwise\n*/",
        "com.google.common.collect.AbstractTable$Values:spliterator()": "/**\n* Returns a Spliterator for values from the cell.\n* @return Spliterator of values mapped from cells\n*/",
        "com.google.common.collect.AbstractTable$Values:clear()": "/**\n* Clears all elements from the cell set by invoking the parent clear method.\n*/",
        "com.google.common.collect.AbstractTable$Values:iterator()": "/**\n* Returns an iterator for cell values.\n* @return Iterator of values from cells in the set\n*/"
    },
    "com.google.common.collect.Tables": {
        "com.google.common.collect.Tables:equalsImpl(com.google.common.collect.Table,java.lang.Object)": "/**\n* Compares a table with another object for equality.\n* @param table the reference table\n* @param obj the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Tables:<init>()": "/**\n* Private constructor to prevent instantiation of the Tables class.\n*/",
        "com.google.common.collect.Tables:newCustomTable(java.util.Map,com.google.common.base.Supplier)": "/**\n* Creates a new custom table with a backing map and a map factory.\n* @param backingMap initial map structure, must be empty\n* @param factory supplier for creating new map instances\n* @return a new StandardTable instance\n*/",
        "com.google.common.collect.Tables:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)": "/**\n* Collects elements into a table using specified mapping functions.\n* @param rowFunction maps input to row keys\n* @param columnFunction maps input to column keys\n* @param valueFunction maps input to values\n* @param mergeFunction merges values for duplicate keys\n* @param tableSupplier provides a new table instance\n* @return Collector that builds the table\n*/",
        "com.google.common.collect.Tables:transformValues(com.google.common.collect.Table,com.google.common.base.Function)": "/**\n* Transforms values of a table using a provided function.\n* @param fromTable source table to transform\n* @param function function to apply for transformation\n* @return new table with transformed values\n*/",
        "com.google.common.collect.Tables:transpose(com.google.common.collect.Table)": "/**\n* Transposes a given table.\n* @param table the table to transpose\n* @return transposed Table or original if already transposed\n*/",
        "com.google.common.collect.Tables:immutableCell(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an immutable cell with specified row, column, and value.\n* @param rowKey key for the row\n* @param columnKey key for the column\n* @param value cell value\n* @return Cell<R, C, V> instance\n*/",
        "com.google.common.collect.Tables:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.Supplier)": "/**\n* Collects elements into a table structure using specified row, column, and value functions.\n* @param rowFunction maps input to row keys\n* @param columnFunction maps input to column keys\n* @param valueFunction maps input to values\n* @param tableSupplier provides a new table instance\n* @return Collector that builds the table\n*/",
        "com.google.common.collect.Tables:unmodifiableTable(com.google.common.collect.Table)": "/**\n* Returns an unmodifiable view of the specified table.\n* @param table the table to wrap, must not be null\n* @return an UnmodifiableTable instance\n*/",
        "com.google.common.collect.Tables:synchronizedTable(com.google.common.collect.Table)": "/**\n* Creates a synchronized table for thread-safe access.\n* @param table the Table to synchronize\n* @return a SynchronizedTable instance\n*/",
        "com.google.common.collect.Tables:unmodifiableRowSortedTable(com.google.common.collect.RowSortedTable)": "/**\n* Returns an unmodifiable view of the given RowSortedTable.\n* @param table the RowSortedTable to wrap, must not be null\n* @return UnmodifiableRowSortedTable\n*/"
    },
    "com.google.common.collect.ArrayListMultimap": {
        "com.google.common.collect.ArrayListMultimap:createCollection()": "/**\n* Creates a new ArrayList initialized with expected values per key.\n* @return a List containing the expected values\n*/",
        "com.google.common.collect.ArrayListMultimap:trimToSize()": "/**\n* Trims the capacity of all ArrayLists in the backing map to their current size.\n* @deprecated Use alternative methods for better performance.\n*/",
        "com.google.common.collect.ArrayListMultimap:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object using default serialization and a Multimap.\n* @param stream the output stream for serialization\n* @throws IOException if an I/O error occurs during serialization\n*/",
        "com.google.common.collect.ArrayListMultimap:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from stream and populates internal map.\n* @param stream input stream for serialized object data\n*/",
        "com.google.common.collect.ArrayListMultimap:<init>(int,int)": "/**\n* Initializes ArrayListMultimap with expected keys and values per key.\n* @param expectedKeys initial capacity for keys\n* @param expectedValuesPerKey initial capacity for values per key\n*/",
        "com.google.common.collect.ArrayListMultimap:create(int,int)": "/**\n* Creates an ArrayListMultimap with specified capacities for keys and values.\n* @param expectedKeys initial capacity for keys\n* @param expectedValuesPerKey initial capacity for values per key\n* @return a new ArrayListMultimap instance\n*/",
        "com.google.common.collect.ArrayListMultimap:<init>()": "/**\n* Constructs an ArrayListMultimap with default capacities.\n* Initializes with 12 keys and default values per key.\n*/",
        "com.google.common.collect.ArrayListMultimap:<init>(com.google.common.collect.Multimap)": "/**\n* Constructs ArrayListMultimap from an existing multimap.\n* @param multimap source multimap to copy from\n*/",
        "com.google.common.collect.ArrayListMultimap:create()": "/**\n* Creates a new ArrayListMultimap instance.\n* @return a new ArrayListMultimap with default capacities\n*/",
        "com.google.common.collect.ArrayListMultimap:create(com.google.common.collect.Multimap)": "/**\n* Creates an ArrayListMultimap from the provided multimap.\n* @param multimap source multimap to copy from\n* @return new ArrayListMultimap instance\n*/"
    },
    "com.google.common.collect.Serialization": {
        "com.google.common.collect.Serialization:writeMultimap(com.google.common.collect.Multimap,java.io.ObjectOutputStream)": "/**\n* Serializes a Multimap to an ObjectOutputStream.\n* @param multimap the Multimap to serialize\n* @param stream the output stream for serialization\n* @throws IOException if an I/O error occurs during serialization\n*/",
        "com.google.common.collect.Serialization:readCount(java.io.ObjectInputStream)": "/**\n* Reads an integer from the given ObjectInputStream.\n* @param stream the input stream to read from\n* @return the integer read from the stream\n*/",
        "com.google.common.collect.Serialization:populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream,int)": "/**\n* Populates a Multimap from an ObjectInputStream.\n* @param multimap destination for key-value pairs\n* @param stream input stream for serialized data\n* @param distinctKeys number of unique keys to read\n*/",
        "com.google.common.collect.Serialization:getFieldSetter(java.lang.Class,java.lang.String)": "/**\n* Retrieves a FieldSetter for a specified field in the given class.\n* @param clazz the class containing the field\n* @param fieldName the name of the field to set\n* @return FieldSetter object for the specified field\n*/",
        "com.google.common.collect.Serialization:writeMap(java.util.Map,java.io.ObjectOutputStream)": "/**\n* Serializes a map to an ObjectOutputStream.\n* @param map the map to serialize\n* @param stream the output stream for serialization\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.collect.Serialization:writeMultiset(com.google.common.collect.Multiset,java.io.ObjectOutputStream)": "/**\n* Serializes a multiset to an output stream.\n* @param multiset the multiset to serialize\n* @param stream the output stream for serialization\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.collect.Serialization:populateMap(java.util.Map,java.io.ObjectInputStream,int)": "/**\n* Populates a map from an ObjectInputStream.\n* @param map target map to populate\n* @param stream input stream for reading key-value pairs\n* @param size number of entries to read\n*/",
        "com.google.common.collect.Serialization:populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream,int)": "/**\n* Populates a Multiset from an ObjectInputStream.\n* @param multiset target Multiset to populate\n* @param stream input stream for reading elements\n* @param distinctElements number of distinct elements to read\n*/",
        "com.google.common.collect.Serialization:<init>()": "/**\n* Private constructor to prevent instantiation of the Serialization class.\n*/",
        "com.google.common.collect.Serialization:populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream)": "/**\n* Populates a Multimap from an ObjectInputStream.\n* @param multimap destination for key-value pairs\n* @param stream input stream for serialized data\n*/",
        "com.google.common.collect.Serialization:populateMap(java.util.Map,java.io.ObjectInputStream)": "/**\n* Populates a map from an ObjectInputStream.\n* @param map target map to populate\n* @param stream input stream for reading key-value pairs\n*/",
        "com.google.common.collect.Serialization:populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream)": "/**\n* Populates a Multiset from an ObjectInputStream.\n* @param multiset target Multiset to populate\n* @param stream input stream for reading elements\n*/"
    },
    "com.google.common.collect.Tables$AbstractCell": {
        "com.google.common.collect.Tables$AbstractCell:<init>()": "/**\n* Constructs an instance of AbstractCell.\n*/",
        "com.google.common.collect.Tables$AbstractCell:hashCode()": "/**\n* Computes the hash code based on row key, column key, and value.\n* @return hash code as an integer\n*/",
        "com.google.common.collect.Tables$AbstractCell:toString()": "/**\n* Returns a string representation of the object in the format (rowKey,columnKey)=value.\n* @return formatted string of row key, column key, and value\n*/",
        "com.google.common.collect.Tables$AbstractCell:equals(java.lang.Object)": "/**\n* Checks if two Cell objects are equal based on row, column, and value keys.\n* @param obj object to compare\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.collect.ArrayTable$ArrayMap": {
        "com.google.common.collect.ArrayTable$ArrayMap:<init>(com.google.common.collect.ImmutableMap)": "/**\n* Constructs an ArrayMap with a given key index mapping.\n* @param keyIndex mapping of keys to their indices\n*/",
        "com.google.common.collect.ArrayTable$ArrayMap:size()": "/**\n* Returns the number of elements in the key index.\n* @return the size of the key index as an integer\n*/",
        "com.google.common.collect.ArrayTable$ArrayMap:get(java.lang.Object)": "/**\n* Retrieves the value associated with the given key.\n* @param key the key to look up\n* @return the corresponding value or null if not found\n*/",
        "com.google.common.collect.ArrayTable$ArrayMap:remove(java.lang.Object)": "/**\n* Removes the mapping for the specified key.\n* @param key the key whose mapping is to be removed\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.ArrayTable$ArrayMap:clear()": "/**\n* Clears the collection, but operation is unsupported.\n* @throws UnsupportedOperationException if called\n*/",
        "com.google.common.collect.ArrayTable$ArrayMap:keySet()": "/**\n* Returns the set of keys from the keyIndex.\n* @return Set of keys from the keyIndex\n*/",
        "com.google.common.collect.ArrayTable$ArrayMap:getKey(int)": "/**\n* Retrieves the key at the specified index.\n* @param index position of the key in the list\n* @return key of type K at the given index\n*/",
        "com.google.common.collect.ArrayTable$ArrayMap:put(java.lang.Object,java.lang.Object)": "/**\n* Puts a value for a key, throwing if the key is not found.\n* @param key the key to associate with the value\n* @param value the value to be set\n* @return previous value associated with the key or null\n*/",
        "com.google.common.collect.ArrayTable$ArrayMap:entryIterator()": "/**\n* Creates an iterator for key-value entries.\n* @return Iterator of Entry objects based on index\n*/",
        "com.google.common.collect.ArrayTable$ArrayMap:isEmpty()": "/**\n* Checks if the keyIndex collection is empty.\n* @return true if keyIndex has no elements, false otherwise\n*/",
        "com.google.common.collect.ArrayTable$ArrayMap:containsKey(java.lang.Object)": "/**\n* Checks if the key exists in the keyIndex map.\n* @param key the key to check for presence\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.ArrayTable$ArrayMap:getEntry(int)": "/**** Retrieves the entry at the specified index. \n* @param index the index of the entry \n* @return an Entry object containing key-value pair \n*/",
        "com.google.common.collect.ArrayTable$ArrayMap:entrySpliterator()": "/**\n* Creates a spliterator for the entries in the collection.\n* @return Spliterator for key-value entries\n*/"
    },
    "com.google.common.collect.ImmutableMap": {
        "com.google.common.collect.ImmutableMap:keySet()": "/**\n* Retrieves the key set, creating it if not already initialized.\n* @return ImmutableSet of keys\n*/",
        "com.google.common.collect.ImmutableMap:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if the collection has no elements, false otherwise\n*/",
        "com.google.common.collect.ImmutableMap:containsKey(java.lang.Object)": "/**\n* Checks if the map contains the specified key.\n* @param key the key to check for presence\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.ImmutableMap:of()": "/**\n* Returns an empty immutable map.\n* @param <K> key type\n* @param <V> value type\n* @return an empty ImmutableMap instance\n*/",
        "com.google.common.collect.ImmutableMap:<init>()": "/**\n* Constructs an empty ImmutableMap instance.\n*/",
        "com.google.common.collect.ImmutableMap:entrySet()": "/**\n* Returns an immutable set of key-value entries.\n* @return ImmutableSet of entries, created if not already cached\n*/",
        "com.google.common.collect.ImmutableMap:values()": "/**\n* Returns an immutable collection of values, creating it if not already initialized.\n* @return ImmutableCollection of values\n*/",
        "com.google.common.collect.ImmutableMap:isHashCodeFast()": "/**\n* Checks if hash code computation is optimized for speed.\n* @return false indicating non-optimized hash code\n*/",
        "com.google.common.collect.ImmutableMap:conflictException(java.lang.String,java.lang.Object,java.lang.Object)": "/**\n* Creates an IllegalArgumentException for conflicting entries.\n* @param conflictDescription description of the conflict\n* @param entry1 first conflicting entry\n* @param entry2 second conflicting entry\n* @return IllegalArgumentException with conflict details\n*/",
        "com.google.common.collect.ImmutableMap:put(java.lang.Object,java.lang.Object)": "/**\n* Throws UnsupportedOperationException when called.\n* @param k key to insert (ignored)\n* @param v value to insert (ignored)\n* @return always null\n*/",
        "com.google.common.collect.ImmutableMap:putIfAbsent(java.lang.Object,java.lang.Object)": "/**\n* Always throws UnsupportedOperationException; method is deprecated and should not be called.\n*/",
        "com.google.common.collect.ImmutableMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Deprecated method that always throws UnsupportedOperationException.\n* @param key the key to replace\n* @param oldValue the value to be replaced\n* @param newValue the new value to set\n* @throws UnsupportedOperationException always thrown\n*/",
        "com.google.common.collect.ImmutableMap:replace(java.lang.Object,java.lang.Object)": "/**\n* Always throws UnsupportedOperationException when called.\n* @param key the key to replace\n* @param value the new value\n* @return always throws an exception\n*/",
        "com.google.common.collect.ImmutableMap:computeIfAbsent(java.lang.Object,java.util.function.Function)": "/**\n* Always throws UnsupportedOperationException for the given key and mapping function.\n* @param key the key to compute a value for\n* @param mappingFunction function to compute the value if absent\n*/",
        "com.google.common.collect.ImmutableMap:computeIfPresent(java.lang.Object,java.util.function.BiFunction)": "/**\n* Always throws UnsupportedOperationException for any input.\n* @param key the key whose mapping is to be computed\n* @param remappingFunction the function to compute a new value\n*/",
        "com.google.common.collect.ImmutableMap:compute(java.lang.Object,java.util.function.BiFunction)": "/**\n* Computes value for the given key using a remapping function, always throws UnsupportedOperationException.\n* @param key the key to compute the value for\n* @param remappingFunction function to compute the new value\n* @return always throws exception, no return value\n*/",
        "com.google.common.collect.ImmutableMap:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)": "/**\n* Merges a value with a key using a provided function; always throws UnsupportedOperationException.\n* @param key the key to merge the value with\n* @param value the value to merge\n* @param function the function to combine values\n* @return always throws exception, no return value\n*/",
        "com.google.common.collect.ImmutableMap:putAll(java.util.Map)": "/**\n* Deprecated method that always throws UnsupportedOperationException.\n* @param map the map to be added (not used)\n*/",
        "com.google.common.collect.ImmutableMap:replaceAll(java.util.function.BiFunction)": "/**\n* Deprecated method that always throws UnsupportedOperationException.\n* @param function ignored; has no effect\n*/",
        "com.google.common.collect.ImmutableMap:remove(java.lang.Object)": "/**\n* Always throws UnsupportedOperationException when attempting to remove an element.\n* @param o the object to remove (ignored)\n* @return always throws exception, never returns a value\n*/",
        "com.google.common.collect.ImmutableMap:remove(java.lang.Object,java.lang.Object)": "/**\n* Always throws UnsupportedOperationException when called.\n* @param key the key to remove (unused)\n* @param value the value to remove (unused)\n* @return always throws exception\n*/",
        "com.google.common.collect.ImmutableMap:clear()": "/**\n* Clears the collection, but always throws UnsupportedOperationException.\n*/",
        "com.google.common.collect.ImmutableMap:getOrDefault(java.lang.Object,java.lang.Object)": "/**\n* Returns the value for the key or a default value if not found.\n* @param key the key to look up; may be null\n* @param defaultValue value to return if key is not found; may be null\n* @return the found value or defaultValue if key is absent\n*/",
        "com.google.common.collect.ImmutableMap:readObject(java.io.ObjectInputStream)": "/**\n* Prevents object deserialization; throws exception if invoked.\n* @param stream the ObjectInputStream used for reading\n* @throws InvalidObjectException when deserialization is attempted\n*/",
        "com.google.common.collect.ImmutableMap:equals(java.lang.Object)": "/**\n* Checks equality of the current object with another.\n* @param object the object to compare, may be null\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ImmutableMap:builderWithExpectedSize(int)": "/**\n* Creates a Builder with a specified initial capacity.\n* @param expectedSize the expected number of entries\n* @return a Builder instance configured for the expected size\n*/",
        "com.google.common.collect.ImmutableMap:keyIterator()": "/**\n* Returns an iterator for keys from an unmodifiable entry set.\n* @return UnmodifiableIterator of keys\n*/",
        "com.google.common.collect.ImmutableMap:hashCode()": "/**\n* Computes the hash code for the current object.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.ImmutableMap:containsValue(java.lang.Object)": "/**\n* Checks if the specified value is present in the collection.\n* @param value the value to search for\n* @return true if the value exists, false otherwise\n*/",
        "com.google.common.collect.ImmutableMap:checkNoConflict(boolean,java.lang.String,java.lang.Object,java.lang.Object)": "/**\n* Checks for conflicts and throws an exception if not safe.\n* @param safe indicates if the operation is safe\n* @param conflictDescription description of the conflict\n* @param entry1 first conflicting entry\n* @param entry2 second conflicting entry\n*/",
        "com.google.common.collect.ImmutableMap:keySpliterator()": "/**\n* Returns a Spliterator for the keys in the entry set.\n* @return Spliterator of keys from the entry set\n*/",
        "com.google.common.collect.ImmutableMap:entryOf(java.lang.Object,java.lang.Object)": "/**\n* Creates an Entry from the given key and value.\n* @param key the entry key; must not be null\n* @param value the entry value; must not be null\n* @return an Entry containing the key and value\n*/",
        "com.google.common.collect.ImmutableMap:builder()": "/**\n* Creates a new Builder instance for key-value pairs.\n* @return Builder object for constructing key-value mappings\n*/",
        "com.google.common.collect.ImmutableMap:writeReplace()": "/**\n* Prepares the object for serialization replacement.\n* @return SerializedForm containing the object's state\n*/",
        "com.google.common.collect.ImmutableMap:toString()": "/**\n* Returns the string representation of the current object.\n* @return string representation generated by toStringImpl\n*/",
        "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableMap from two key-value pairs.\n* @param k1 first key; @param v1 first value; @param k2 second key; @param v2 second value\n* @return ImmutableMap containing the specified entries\n*/",
        "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableMap from three key-value pairs.\n* @param k1, k2, k3 keys; must not be null\n* @param v1, v2, v3 values; must not be null\n* @return ImmutableMap containing the specified entries\n*/",
        "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableMap from four key-value pairs.\n* @param k1, k2, k3, k4 keys; must not be null\n* @param v1, v2, v3, v4 values; must not be null\n* @return an ImmutableMap containing the provided entries\n*/",
        "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableMap from up to five key-value pairs.\n* @param k1, k2, k3, k4, k5 keys; must not be null\n* @param v1, v2, v3, v4, v5 values; must not be null\n* @return an ImmutableMap containing the specified entries\n*/",
        "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an immutable map from six key-value pairs.\n* @param k1-k6 keys; must not be null\n* @param v1-v6 values; must not be null\n* @return an ImmutableMap containing the entries\n*/",
        "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableMap from seven key-value pairs.\n* @param k1-k7 keys; must not be null\n* @param v1-v7 values; must not be null\n* @return ImmutableMap containing the specified entries\n*/",
        "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an immutable map from up to eight key-value pairs.\n* @param k1-k8 keys; must not be null\n* @param v1-v8 values; must not be null\n* @return ImmutableMap containing the specified entries\n*/",
        "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableMap from up to nine key-value pairs.\n* @param k1-k9 keys; must not be null\n* @param v1-v9 values; must not be null\n* @return ImmutableMap containing the provided entries\n*/",
        "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableMap from up to ten key-value pairs.\n* @param k1-k10 keys; must not be null\n* @param v1-v10 values; must not be null\n* @return ImmutableMap containing the provided entries\n*/",
        "com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableMap with a single key-value pair.\n* @param k1 the unique key\n* @param v1 the associated value\n* @return ImmutableMap containing the key-value pair\n*/",
        "com.google.common.collect.ImmutableMap:copyOf(java.lang.Iterable)": "/**\n* Creates an ImmutableMap from a collection of key-value entries.\n* @param entries source of key-value pairs\n* @return ImmutableMap containing the provided entries\n*/",
        "com.google.common.collect.ImmutableMap:asMultimap()": "/**\n* Converts current instance to an ImmutableSetMultimap.\n* @return ImmutableSetMultimap representation of the instance\n*/",
        "com.google.common.collect.ImmutableMap:copyOfEnumMap(java.util.EnumMap)": "/**\n* Creates an ImmutableMap from an EnumMap.\n* @param original the EnumMap to copy\n* @return ImmutableMap representation of the copied EnumMap\n*/",
        "com.google.common.collect.ImmutableMap:copyOf(java.util.Map)": "/**\n* Creates an ImmutableMap from a given Map.\n* @param map source map to convert\n* @return ImmutableMap representation of the input map\n*/",
        "com.google.common.collect.ImmutableMap:toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)": "/**\n* Creates an ImmutableMap collector with specified key, value, and merge functions.\n* @param keyFunction extracts keys from elements\n* @param valueFunction extracts values from elements\n* @param mergeFunction merges values for duplicate keys\n* @return Collector for accumulating elements into an ImmutableMap\n*/",
        "com.google.common.collect.ImmutableMap:toImmutableMap(java.util.function.Function,java.util.function.Function)": "/**\n* Creates an ImmutableMap collector from key and value extraction functions.\n* @param keyFunction function to extract keys\n* @param valueFunction function to extract values\n* @return Collector for creating an ImmutableMap\n*/"
    },
    "com.google.common.collect.ArrayTable$ColumnMap": {
        "com.google.common.collect.ArrayTable$ColumnMap:getValue(int)": "/**\n* Retrieves a map of values for the specified column index.\n* @param index the column index to fetch values from\n* @return a map of values corresponding to the column\n*/",
        "com.google.common.collect.ArrayTable$ColumnMap:setValue(int,java.util.Map)": "/**\n* Sets a new value at the specified index, unsupported operation.\n* @param index position to set the new value\n* @param newValue the new value to be set\n* @throws UnsupportedOperationException if the operation is not supported\n*/",
        "com.google.common.collect.ArrayTable$ColumnMap:put(java.lang.Object,java.util.Map)": "/**\n* Unsupported operation for inserting a key-value map.\n* @param key the key to insert\n* @param value the map of values to associate with the key\n* @throws UnsupportedOperationException if called\n*/",
        "com.google.common.collect.ArrayTable$ColumnMap:getKeyRole()": "/**\n* Returns the key role as a string.\n* @return the key role, which is \"Column\"\n*/"
    },
    "com.google.common.collect.ArrayTable$RowMap": {
        "com.google.common.collect.ArrayTable$RowMap:getValue(int)": "/**\n* Retrieves a map of values for the specified row index.\n* @param index the row index to fetch values from\n* @return a map of values corresponding to the row\n*/",
        "com.google.common.collect.ArrayTable$RowMap:setValue(int,java.util.Map)": "/**\n* Sets a new value at the specified index, unsupported operation.\n* @param index position to set the value\n* @param newValue new map value to set\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.ArrayTable$RowMap:put(java.lang.Object,java.util.Map)": "/**\n* Throws UnsupportedOperationException when attempting to put a value.\n* @param key the key for the map entry\n* @param value the map to be associated with the key\n* @return always throws exception, no return value\n*/",
        "com.google.common.collect.ArrayTable$RowMap:getKeyRole()": "/**\n* Returns the key role as a string.\n* @return the key role \"Row\"\n*/"
    },
    "com.google.common.collect.ArrayTable": {
        "com.google.common.collect.ArrayTable:<init>(com.google.common.collect.ArrayTable)": "/**\n* Copies an existing ArrayTable to create a new instance.\n* @param table the ArrayTable to copy from\n*/",
        "com.google.common.collect.ArrayTable:eraseAll()": "/**\n* Clears all elements in the 2D array by setting them to null.\n*/",
        "com.google.common.collect.ArrayTable:toArray(java.lang.Class)": "/**\n* Converts a 2D list to an array of the specified class type.\n* @param valueClass class type of the array elements\n* @return 2D array of values or null if input is invalid\n*/",
        "com.google.common.collect.ArrayTable:clear()": "/**\n* Clears the collection, but always throws UnsupportedOperationException.\n*/",
        "com.google.common.collect.ArrayTable:isEmpty()": "/**\n* Checks if the row or column lists are empty.\n* @return true if either list is empty, false otherwise\n*/",
        "com.google.common.collect.ArrayTable:remove(java.lang.Object,java.lang.Object)": "/**\n* Always throws UnsupportedOperationException.\n* @param rowKey the key for the row to remove\n* @param columnKey the key for the column to remove\n* @return always throws exception, no value returned\n*/",
        "com.google.common.collect.ArrayTable:size()": "/**\n* Calculates the total size of the grid.\n* @return the product of row and column counts\n*/",
        "com.google.common.collect.ArrayTable:getCell(int)": "/**\n* Retrieves a cell by its index in a table.\n* @param index the cell's linear index\n* @return a Cell object containing row, column keys, and value\n*/",
        "com.google.common.collect.ArrayTable:columnMap()": "/**\n* Returns a map of columns with their associated rows and values.\n* @return a map of column to row-value mappings, initializes if null\n*/",
        "com.google.common.collect.ArrayTable:rowMap()": "/**\n* Returns a map of rows, creating it if not already initialized.\n* @return map of rows with column-value pairs\n*/",
        "com.google.common.collect.ArrayTable:column(java.lang.Object)": "/**\n* Retrieves a column map by its key.\n* @param columnKey the key for the desired column\n* @return Column map or empty map if key not found\n*/",
        "com.google.common.collect.ArrayTable:row(java.lang.Object)": "/**\n* Retrieves a row by its key.\n* @param rowKey the key to look up the row\n* @return a map of column values or an empty map if not found\n*/",
        "com.google.common.collect.ArrayTable:containsValue(java.lang.Object)": "/**\n* Checks if the array contains a specific value.\n* @param value the value to search for\n* @return true if found, false otherwise\n*/",
        "com.google.common.collect.ArrayTable:toString()": "/**\n* Returns string representation of the rowMap.\n* @return string representation of the rowMap object\n*/",
        "com.google.common.collect.ArrayTable:columnKeySet()": "/**\n* Retrieves the set of column keys.\n* @return ImmutableSet of column keys from the map\n*/",
        "com.google.common.collect.ArrayTable:rowKeySet()": "/**\n* Retrieves the set of row keys.\n* @return ImmutableSet of row keys from the key set\n*/",
        "com.google.common.collect.ArrayTable:containsColumn(java.lang.Object)": "/**\n* Checks if the specified column key exists in the map.\n* @param columnKey the key to check for presence\n* @return true if the column key exists, false otherwise\n*/",
        "com.google.common.collect.ArrayTable:containsRow(java.lang.Object)": "/**\n* Checks if a row exists by its key.\n* @param rowKey the key of the row to check\n* @return true if the row exists, false otherwise\n*/",
        "com.google.common.collect.ArrayTable:cellIterator()": "/**\n* Returns an iterator for accessing grid cells by index.\n* @return an iterator for Cell objects in the grid\n*/",
        "com.google.common.collect.ArrayTable:valuesIterator()": "/**\n* Returns an iterator for the values in the collection.\n* @return Iterator of values, or null if no values exist\n*/",
        "com.google.common.collect.ArrayTable:putAll(com.google.common.collect.Table)": "/**\n* Inserts all entries from the specified table into the current table.\n* @param table source table containing entries to insert\n*/",
        "com.google.common.collect.ArrayTable:cellSet()": "/**\n* Returns a set of cells from the superclass.\n* @return Set of Cell objects\n*/",
        "com.google.common.collect.ArrayTable:values()": "/**\n* Returns a collection of values from the superclass.\n* @return Collection of values, may include null elements\n*/",
        "com.google.common.collect.ArrayTable:equals(java.lang.Object)": "/**\n* Checks equality of the current object with another.\n* @param obj the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ArrayTable:contains(java.lang.Object,java.lang.Object)": "/**\n* Checks if a row and column exist in the data structure.\n* @param rowKey key of the row to check\n* @param columnKey key of the column to check\n* @return true if both row and column exist, false otherwise\n*/",
        "com.google.common.collect.ArrayTable:cellSpliterator()": "/**\n* Creates a spliterator for table cells.\n* @return Spliterator for indexed Cell objects\n*/",
        "com.google.common.collect.ArrayTable:at(int,int)": "/**\n* Retrieves the element at specified row and column indices.\n* @param rowIndex the row index to access\n* @param columnIndex the column index to access\n* @return the element at the specified indices\n*/",
        "com.google.common.collect.ArrayTable:set(int,int,java.lang.Object)": "/**\n* Sets the value at specified row and column, returning the old value.\n* @param rowIndex the row index to set the value\n* @param columnIndex the column index to set the value\n* @param value the new value to set\n* @return the previous value at the specified position\n*/",
        "com.google.common.collect.ArrayTable:hashCode()": "/**\n* Computes hash code for the object based on its cell set.\n* @return hash code integer derived from the cell set\n*/",
        "com.google.common.collect.ArrayTable:get(java.lang.Object,java.lang.Object)": "/**\n* Retrieves the value at specified row and column keys.\n* @param rowKey key for the row, may be null\n* @param columnKey key for the column, may be null\n* @return value at the specified keys or null if not found\n*/",
        "com.google.common.collect.ArrayTable:getValue(int)": "/**\n* Retrieves value from a 2D structure using a single index.\n* @param index linear index for row and column calculation\n* @return value at calculated row and column indices\n*/",
        "com.google.common.collect.ArrayTable:put(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Puts a value in a matrix at specified row and column keys.\n* @param rowKey key for the row\n* @param columnKey key for the column\n* @param value value to set; can be null\n* @return previous value at the specified position\n*/",
        "com.google.common.collect.ArrayTable:erase(java.lang.Object,java.lang.Object)": "/**\n* Erases the value at specified row and column keys.\n* @param rowKey the key for the row to erase\n* @param columnKey the key for the column to erase\n* @return previous value or null if keys are invalid\n*/",
        "com.google.common.collect.ArrayTable:valuesSpliterator()": "/**\n* Returns a spliterator for the values of this collection.\n* @return Spliterator for indexed values, ordered by insertion\n*/",
        "com.google.common.collect.ArrayTable:<init>(java.lang.Iterable,java.lang.Iterable)": "/**\n* Constructs an ArrayTable with specified row and column keys.\n* @param rowKeys iterable of row keys\n* @param columnKeys iterable of column keys\n*/",
        "com.google.common.collect.ArrayTable:create(java.lang.Iterable,java.lang.Iterable)": "/**\n* Creates an ArrayTable with specified row and column keys.\n* @param rowKeys iterable of row keys\n* @param columnKeys iterable of column keys\n* @return ArrayTable instance\n*/",
        "com.google.common.collect.ArrayTable:<init>(com.google.common.collect.Table)": "/**\n* Constructs an ArrayTable from an existing Table.\n* @param table source Table to initialize from\n*/",
        "com.google.common.collect.ArrayTable:create(com.google.common.collect.Table)": "/**\n* Creates an ArrayTable from a given Table.\n* @param table source Table to initialize from\n* @return new ArrayTable instance\n*/"
    },
    "com.google.common.collect.ByFunctionOrdering": {
        "com.google.common.collect.ByFunctionOrdering:compare(java.lang.Object,java.lang.Object)": "/**\n* Compares two objects using a specified ordering after applying a function.\n* @param left  first object to compare\n* @param right second object to compare\n* @return comparison result as an integer\n*/",
        "com.google.common.collect.ByFunctionOrdering:equals(java.lang.Object)": "/**\n* Compares this object to another for equality.\n* @param object the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ByFunctionOrdering:hashCode()": "/**\n* Generates a hash code based on function and ordering fields.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.ByFunctionOrdering:toString()": "/**\n* Returns a string representation of the ordering and function.\n* @return formatted string of ordering and function\n*/",
        "com.google.common.collect.ByFunctionOrdering:<init>(com.google.common.base.Function,com.google.common.collect.Ordering)": "/**\n* Constructs ByFunctionOrdering with a function and an ordering.\n* @param function the function to apply\n* @param ordering the ordering to use\n*/"
    },
    "com.google.common.collect.CartesianList$1": {
        "com.google.common.collect.CartesianList$1:size()": "/**\n* Returns the size of the first dimension of axes.\n* @return size as an integer\n*/",
        "com.google.common.collect.CartesianList$1:get(int)": "/**\n* Retrieves an element at the specified index from an immutable list.\n* @param index the index of the element to retrieve\n* @return an ImmutableList containing the element\n*/"
    },
    "com.google.common.collect.ImmutableList": {
        "com.google.common.collect.ImmutableList:of()": "/**\n* Returns an empty immutable list.\n* @return an empty ImmutableList of type E\n*/",
        "com.google.common.collect.ImmutableList:listIterator(int)": "/**\n* Returns an unmodifiable list iterator starting at the specified index.\n* @param index starting position for the iterator\n* @return UnmodifiableListIterator for the list elements\n*/",
        "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableList from two elements.\n* @param e1 first element\n* @param e2 second element\n* @return ImmutableList containing e1 and e2\n*/",
        "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableList from three elements.\n* @param e1 first element, e2 second, e3 third\n* @return ImmutableList containing the provided elements\n*/",
        "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableList from four elements.\n* @param e1, e2, e3, e4 elements to include in the list\n* @return an ImmutableList containing the provided elements\n*/",
        "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an immutable list from five elements.\n* @param e1, e2, e3, e4, e5 elements to include in the list\n* @return ImmutableList containing the provided elements\n*/",
        "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an immutable list from six elements.\n* @param e1 to e6 elements to include in the list\n* @return ImmutableList containing the provided elements\n*/",
        "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableList from seven elements.\n* @param e1 to e7 elements to include in the list\n* @return ImmutableList containing the provided elements\n*/",
        "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableList from up to eight elements.\n* @param e1 to e8 elements to include in the list\n* @return ImmutableList containing the provided elements\n*/",
        "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableList from up to nine elements.\n* @param e1 to e9 elements to include in the list\n* @return ImmutableList containing the provided elements\n*/",
        "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableList from up to ten elements.\n* @param e1 to e10 elements to include in the list\n* @return ImmutableList containing the provided elements\n*/",
        "com.google.common.collect.ImmutableList:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableList from up to 11 elements.\n* @param e1 to e11 elements to include in the list\n* @return ImmutableList containing provided elements\n*/",
        "com.google.common.collect.ImmutableList:subListUnchecked(int,int)": "/**\n* Creates a sublist from the specified range.\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n* @return ImmutableList containing the sublist elements\n*/",
        "com.google.common.collect.ImmutableList:addAll(int,java.util.Collection)": "/**\n* Always throws UnsupportedOperationException; method is deprecated and should not be called.\n* @param index position to add elements\n* @param newElements collection of elements to add\n* @return never returns a value\n*/",
        "com.google.common.collect.ImmutableList:set(int,java.lang.Object)": "/**\n* Throws UnsupportedOperationException when called.\n* @param index the position to set the element (ignored)\n* @param element the element to set (ignored)\n*/",
        "com.google.common.collect.ImmutableList:add(int,java.lang.Object)": "/**\n* Throws UnsupportedOperationException when attempting to add an element at a given index.\n* @param index position to add the element (ignored)\n* @param element element to add (ignored)\n*/",
        "com.google.common.collect.ImmutableList:remove(int)": "/**\n* Always throws UnsupportedOperationException when attempting to remove an element by index.\n* @param index the index of the element to remove\n*/",
        "com.google.common.collect.ImmutableList:replaceAll(java.util.function.UnaryOperator)": "/**\n* Deprecated method; always throws UnsupportedOperationException.\n* @param operator the UnaryOperator to apply (ignored)\n*/",
        "com.google.common.collect.ImmutableList:sort(java.util.Comparator)": "/**\n* Throws UnsupportedOperationException; sorting not supported.\n* @param c comparator for sorting (ignored)\n*/",
        "com.google.common.collect.ImmutableList:copyIntoArray(java.lang.Object[],int)": "/**\n* Copies elements into the specified array starting at the given offset.\n* @param dst array to copy elements into\n* @param offset starting index in the destination array\n* @return new offset after copying elements\n*/",
        "com.google.common.collect.ImmutableList:hashCode()": "/**\n* Computes the hash code for the object.\n* @return an integer hash code value\n*/",
        "com.google.common.collect.ImmutableList:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; throws exception if called.\n* @param stream input stream for object serialization\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.collect.ImmutableList:asList()": "/**\n* Returns the current instance as an immutable list.\n* @return ImmutableList containing the current instance elements\n*/",
        "com.google.common.collect.ImmutableList:forEach(java.util.function.Consumer)": "/**\n* Applies a consumer to each element in the collection.\n* @param consumer the function to apply to each element\n*/",
        "com.google.common.collect.ImmutableList:<init>()": "/**\n* Constructs an empty ImmutableList.\n*/",
        "com.google.common.collect.ImmutableList:writeReplace()": "/**\n* Replaces the object with its serialized form.\n* @return SerializedForm containing the object's data\n*/",
        "com.google.common.collect.ImmutableList:listIterator()": "/**\n* Returns an unmodifiable list iterator starting at the beginning.\n* @return UnmodifiableListIterator for the list elements\n*/",
        "com.google.common.collect.ImmutableList:toImmutableList()": "/**\n* Creates a Collector for accumulating elements into an ImmutableList.\n* @param <E> type of elements to collect\n* @return Collector for ImmutableList\n*/",
        "com.google.common.collect.ImmutableList:builderWithExpectedSize(int)": "/**\n* Creates a Builder with the specified expected size.\n* @param expectedSize initial capacity of the Builder\n* @return a new Builder instance\n*/",
        "com.google.common.collect.ImmutableList:iterator()": "/**\n* Returns an unmodifiable iterator for the collection elements.\n* @return UnmodifiableIterator for the collection\n*/",
        "com.google.common.collect.ImmutableList:indexOf(java.lang.Object)": "/**\n* Returns the index of the specified object in the list.\n* @param object the object to find, can be null\n* @return index of the object or -1 if not found\n*/",
        "com.google.common.collect.ImmutableList:lastIndexOf(java.lang.Object)": "/**\n* Returns the last index of the specified element or -1 if null.\n* @param object the element to find (nullable)\n* @return last index of the element or -1 if not found\n*/",
        "com.google.common.collect.ImmutableList:spliterator()": "/**\n* Creates a spliterator for the collection.\n* @return Spliterator for indexed elements of the collection\n*/",
        "com.google.common.collect.ImmutableList:equals(java.lang.Object)": "/**\n* Compares this object to another for equality.\n* @param obj the object to compare, may be null\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ImmutableList:builder()": "/**\n* Creates a new Builder instance for type E.\n* @return a new Builder<E> object\n*/",
        "com.google.common.collect.ImmutableList:reverse()": "/**\n* Returns a reversed ImmutableList if size > 1; otherwise, returns this list.\n* @return reversed ImmutableList or the same list if size <= 1\n*/",
        "com.google.common.collect.ImmutableList:of(java.lang.Object)": "/**\n* Creates an immutable list containing a single element.\n* @param e1 the element to include in the list\n* @return ImmutableList with the single element\n*/",
        "com.google.common.collect.ImmutableList:contains(java.lang.Object)": "/**\n* Checks if the list contains the specified object.\n* @param object the object to check, can be null\n* @return true if found, false otherwise\n*/",
        "com.google.common.collect.ImmutableList:copyOf(java.lang.Object[])": "/**\n* Creates an immutable list from an array of elements.\n* @param elements array of elements to copy\n* @return ImmutableList containing the copied elements\n*/",
        "com.google.common.collect.ImmutableList:asImmutableList(java.lang.Object[],int)": "/**\n* Converts an array to an ImmutableList.\n* @param elements input array, may contain nulls\n* @param length number of elements to consider\n* @return ImmutableList representation of the array\n*/",
        "com.google.common.collect.ImmutableList:subList(int,int)": "/**\n* Returns a sublist from the specified range.\n* @param fromIndex starting index, @param toIndex ending index\n* @return ImmutableList containing the sublist elements\n*/",
        "com.google.common.collect.ImmutableList:asImmutableList(java.lang.Object[])": "/**\n* Converts an array to an ImmutableList.\n* @param elements input array, may contain nulls\n* @return ImmutableList representation of the array\n*/",
        "com.google.common.collect.ImmutableList:copyOf(java.util.Iterator)": "/**\n* Creates an ImmutableList from an iterator of elements.\n* @param elements iterator of elements to copy\n* @return ImmutableList containing the copied elements\n*/",
        "com.google.common.collect.ImmutableList:sortedCopyOf(java.lang.Iterable)": "/**\n* Returns a sorted ImmutableList from the given elements.\n* @param elements source elements to sort\n* @return sorted ImmutableList of elements\n*/",
        "com.google.common.collect.ImmutableList:sortedCopyOf(java.util.Comparator,java.lang.Iterable)": "/**\n* Creates a sorted ImmutableList from elements using the provided comparator.\n* @param comparator the comparator for sorting elements\n* @param elements source of elements to sort\n* @return sorted ImmutableList of elements\n*/",
        "com.google.common.collect.ImmutableList:copyOf(java.util.Collection)": "/**\n* Creates an ImmutableList from a given collection.\n* @param elements collection to copy from\n* @return ImmutableList representation of the collection\n*/",
        "com.google.common.collect.ImmutableList:copyOf(java.lang.Iterable)": "/**\n* Creates an ImmutableList from an Iterable of elements.\n* @param elements iterable of elements to copy\n* @return ImmutableList containing the copied elements\n*/"
    },
    "com.google.common.collect.CartesianList": {
        "com.google.common.collect.CartesianList:getAxisIndexForProductIndex(int,int)": "/**\n* Calculates axis index based on product index and axis.\n* @param index product index\n* @param axis axis identifier\n* @return calculated axis index\n*/",
        "com.google.common.collect.CartesianList:indexOf(java.lang.Object)": "/**\n* Computes index for the given list based on axes configuration.\n* @param o input object, expected to be a List\n* @return computed index or -1 if input is invalid\n*/",
        "com.google.common.collect.CartesianList:lastIndexOf(java.lang.Object)": "/**\n* Computes last index of a given list in a multi-dimensional structure.\n* @param o the object to check, must be a List\n* @return computed index or -1 if invalid input or not found\n*/",
        "com.google.common.collect.CartesianList:size()": "/**\n* Returns the size of the first dimension of axes.\n* @return the size as an integer\n*/",
        "com.google.common.collect.CartesianList:contains(java.lang.Object)": "/**\n* Checks if the given object is a list containing all elements in axes.\n* @param object the object to check for containment\n* @return true if the object is a list matching axes, false otherwise\n*/",
        "com.google.common.collect.CartesianList:<init>(com.google.common.collect.ImmutableList)": "/**\n* Constructs a CartesianList from axes, calculating their size product.\n* @param axes list of lists representing axes for Cartesian product\n*/",
        "com.google.common.collect.CartesianList:get(int)": "/**\n* Retrieves an element at the specified index in an immutable list.\n* @param index the index of the element to retrieve\n* @return ImmutableList containing elements at the specified index\n*/",
        "com.google.common.collect.CartesianList:create(java.util.List)": "/**\n* Creates a Cartesian product of input lists.\n* @param lists input lists to generate Cartesian product\n* @return List of lists representing the Cartesian product\n*/"
    },
    "com.google.common.collect.CollectCollectors$EnumMapAccumulator": {
        "com.google.common.collect.CollectCollectors$EnumMapAccumulator:<init>(java.util.function.BinaryOperator)": "/**\n* Initializes EnumMapAccumulator with a merging function.\n* @param mergeFunction function to merge values\n*/",
        "com.google.common.collect.CollectCollectors$EnumMapAccumulator:combine(com.google.common.collect.CollectCollectors$EnumMapAccumulator)": "/**\n* Combines two EnumMapAccumulators.\n* @param other another EnumMapAccumulator to combine with\n* @return this instance with combined maps\n*/",
        "com.google.common.collect.CollectCollectors$EnumMapAccumulator:toImmutableMap()": "/**\n* Converts the current map to an immutable map.\n* @return ImmutableMap instance or an empty map if null\n*/"
    },
    "com.google.common.collect.CollectCollectors$EnumSetAccumulator": {
        "com.google.common.collect.CollectCollectors$EnumSetAccumulator:combine(com.google.common.collect.CollectCollectors$EnumSetAccumulator)": "/**\n* Combines two EnumSetAccumulator instances.\n* @param other the accumulator to combine with\n* @return this instance after combining sets\n*/",
        "com.google.common.collect.CollectCollectors$EnumSetAccumulator:toImmutableSet()": "/**\n* Converts the current set to an ImmutableSet.\n* @return ImmutableSet representation of the current set or an empty set if null\n*/"
    },
    "com.google.common.collect.CollectCollectors": {
        "com.google.common.collect.CollectCollectors:<init>()": "/**\n* Private constructor for CollectCollectors class to prevent instantiation.\n*/",
        "com.google.common.collect.CollectCollectors:toImmutableList()": "/**\n* Returns a Collector for creating an ImmutableList from a stream.\n* @param <E> the type of elements to collect\n* @return a Collector that accumulates elements into an ImmutableList\n*/",
        "com.google.common.collect.CollectCollectors:toImmutableRangeSet()": "/**\n* Returns a collector for creating an ImmutableRangeSet from Comparable elements.\n* @param <E> type of elements that are Comparable\n* @return Collector for building ImmutableRangeSet\n*/",
        "com.google.common.collect.CollectCollectors:toImmutableSet()": "/**\n* Returns a Collector that accumulates elements into an ImmutableSet.\n* @param <E> the type of input elements\n* @return a Collector for creating an ImmutableSet\n*/",
        "com.google.common.collect.CollectCollectors:toImmutableEnumSet()": "/**\n* Creates a collector for immutable sets of enum constants.\n* @return Collector for converting enums to ImmutableSet\n*/",
        "com.google.common.collect.CollectCollectors:toMultiset(java.util.function.Function,java.util.function.ToIntFunction,java.util.function.Supplier)": "/**\n* Creates a multiset collector from element and count functions.\n* @param elementFunction transforms input to multiset elements\n* @param countFunction provides counts for each element\n* @param multisetSupplier supplies the multiset instance\n* @return a Collector for building a multiset\n*/",
        "com.google.common.collect.CollectCollectors:toMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)": "/**\n* Collects elements into a multimap using provided key and value functions.\n* @param keyFunction function to extract keys\n* @param valueFunction function to extract values\n* @param multimapSupplier supplier for multimap instance\n* @return Collector for multimap\n*/",
        "com.google.common.collect.CollectCollectors:flatteningToMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)": "/**\n* Collects elements into a multimap using key and value functions.\n* @param keyFunction function to extract keys\n* @param valueFunction function to extract values as streams\n* @param multimapSupplier supplier for the multimap\n* @return a Collector for the multimap\n*/",
        "com.google.common.collect.CollectCollectors:toImmutableMultiset(java.util.function.Function,java.util.function.ToIntFunction)": "/**\n* Collects elements into an ImmutableMultiset using provided functions.\n* @param elementFunction transforms elements to E type\n* @param countFunction counts occurrences of T\n* @return an ImmutableMultiset of type E\n*/",
        "com.google.common.collect.CollectCollectors:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function)": "/**\n* Collects elements into an ImmutableSortedMap using provided key and value functions.\n* @param comparator for sorting keys\n* @param keyFunction to extract keys from elements\n* @param valueFunction to extract values from elements\n* @return Collector for building the ImmutableSortedMap\n*/",
        "com.google.common.collect.CollectCollectors:toImmutableEnumMap(java.util.function.Function,java.util.function.Function)": "/**\n* Collects elements into an immutable EnumMap using specified key and value functions.\n* @param keyFunction function to extract keys from elements\n* @param valueFunction function to extract values from elements\n* @return ImmutableMap containing collected key-value pairs\n*/",
        "com.google.common.collect.CollectCollectors:toImmutableEnumMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)": "/**\n* Collects elements into an immutable EnumMap using key and value functions.\n* @param keyFunction function to extract keys\n* @param valueFunction function to extract values\n* @param mergeFunction function to merge values\n* @return ImmutableMap of keys and values\n*/",
        "com.google.common.collect.CollectCollectors:toImmutableSortedSet(java.util.Comparator)": "/**\n* Creates a Collector for ImmutableSortedSet using the provided comparator.\n* @param comparator the comparator for sorting elements\n* @return a Collector that builds an ImmutableSortedSet\n*/",
        "com.google.common.collect.CollectCollectors:toImmutableEnumSetGeneric()": "/**\n* Creates a collector for converting enums to an immutable set.\n* @return Collector for Enum to ImmutableSet conversion\n*/",
        "com.google.common.collect.CollectCollectors:toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)": "/**\n* Collects elements into an ImmutableMap using specified key and value functions.\n* @param keyFunction function to extract keys\n* @param valueFunction function to extract values\n* @param mergeFunction function to merge values for duplicate keys\n* @return Collector to accumulate elements into an ImmutableMap\n*/",
        "com.google.common.collect.CollectCollectors:toImmutableRangeMap(java.util.function.Function,java.util.function.Function)": "/**\n* Collects elements into an ImmutableRangeMap using key and value functions.\n* @param keyFunction function to extract range keys\n* @param valueFunction function to extract values\n* @return ImmutableRangeMap populated with ranges and values\n*/",
        "com.google.common.collect.CollectCollectors:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)": "/**\n* Collects elements into an ImmutableSortedMap using provided functions and comparator.\n* @param comparator for sorting keys\n* @param keyFunction to extract keys\n* @param valueFunction to extract values\n* @param mergeFunction for resolving key collisions\n* @return ImmutableSortedMap of collected elements\n*/",
        "com.google.common.collect.CollectCollectors:toImmutableBiMap(java.util.function.Function,java.util.function.Function)": "/**\n* Collects elements into an ImmutableBiMap using key and value functions.\n* @param keyFunction function to extract keys\n* @param valueFunction function to extract values\n* @return Collector for ImmutableBiMap\n*/",
        "com.google.common.collect.CollectCollectors:toImmutableMap(java.util.function.Function,java.util.function.Function)": "/**\n* Collects elements into an ImmutableMap using provided key and value functions.\n* @param keyFunction function to extract keys\n* @param valueFunction function to extract values\n* @return Collector for creating an ImmutableMap\n*/",
        "com.google.common.collect.CollectCollectors:flatteningToImmutableListMultimap(java.util.function.Function,java.util.function.Function)": "/**\n* Collects elements into an ImmutableListMultimap using key and value functions.\n* @param keyFunction function to extract keys\n* @param valuesFunction function to extract values as streams\n* @return Collector for the ImmutableListMultimap\n*/",
        "com.google.common.collect.CollectCollectors:toImmutableSetMultimap(java.util.function.Function,java.util.function.Function)": "/**\n* Collects elements into an ImmutableSetMultimap using key and value functions.\n* @param keyFunction function to extract keys\n* @param valueFunction function to extract values\n* @return ImmutableSetMultimap of collected entries\n*/",
        "com.google.common.collect.CollectCollectors:toImmutableListMultimap(java.util.function.Function,java.util.function.Function)": "/**\n* Collects elements into an ImmutableListMultimap using key and value functions.\n* @param keyFunction function to extract keys\n* @param valueFunction function to extract values\n* @return ImmutableListMultimap of collected key-value pairs\n*/",
        "com.google.common.collect.CollectCollectors:flatteningToImmutableSetMultimap(java.util.function.Function,java.util.function.Function)": "/**\n* Converts input to an ImmutableSetMultimap using key and value functions.\n* @param keyFunction function to extract keys\n* @param valuesFunction function to extract values as streams\n* @return ImmutableSetMultimap constructed from the input\n*/"
    },
    "com.google.common.collect.ImmutableRangeMap$Builder": {
        "com.google.common.collect.ImmutableRangeMap$Builder:combine(com.google.common.collect.ImmutableRangeMap$Builder)": "/**\n* Combines entries from another builder into this builder.\n* @param builder the builder to combine entries from\n* @return the updated builder instance\n*/",
        "com.google.common.collect.ImmutableRangeMap$Builder:<init>()": "/**\n* Initializes a new Builder with an empty entries list.\n*/",
        "com.google.common.collect.ImmutableRangeMap$Builder:put(com.google.common.collect.Range,java.lang.Object)": "/**\n* Adds a key-value pair to entries if the range is non-empty.\n* @param range the key range, must not be null or empty\n* @param value the value to associate with the range, must not be null\n* @return the Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableRangeMap$Builder:putAll(com.google.common.collect.RangeMap)": "/**\n* Inserts all key-value pairs from a RangeMap.\n* @param rangeMap source of key-value pairs\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableRangeMap$Builder:build()": "/**\n* Builds an ImmutableRangeMap from sorted entries.\n* @return ImmutableRangeMap containing ranges and values\n*/"
    },
    "com.google.common.collect.CollectSpliterators$FlatMapSpliterator": {
        "com.google.common.collect.CollectSpliterators$FlatMapSpliterator:tryAdvance(java.util.function.Consumer)": "/**\n* Advances to the next element, applying an action if available.\n* @param action consumer to process the output element\n* @return true if an element was processed, false if no more elements\n*/",
        "com.google.common.collect.CollectSpliterators$FlatMapSpliterator:forEachRemaining(java.util.function.Consumer)": "/**\n* Applies the given action to remaining elements in the spliterator.\n* @param action the action to be performed on each element\n*/",
        "com.google.common.collect.CollectSpliterators$FlatMapSpliterator:estimateSize()": "/**\n* Estimates size based on prefix, ensuring non-negative return value.\n* @return estimated size as a non-negative long\n*/",
        "com.google.common.collect.CollectSpliterators$FlatMapSpliterator:characteristics()": "/**\n* Returns the characteristics value.\n* @return characteristics integer value\n*/",
        "com.google.common.collect.CollectSpliterators$FlatMapSpliterator:trySplit()": "/**\n* Attempts to split the spliterator, returning a new spliterator or null.\n* @return OutSpliteratorT or null if splitting is not possible\n*/"
    },
    "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfDouble": {
        "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfDouble:<init>(java.util.Spliterator$OfDouble,java.util.Spliterator,java.util.function.Function,int,long)": "/**\n* Constructs a FlatMapSpliterator for double values.\n* @param prefix optional prefix spliterator\n* @param from input spliterator of InElementT\n* @param function maps InElementT to OfDouble spliterator\n* @param characteristics spliterator characteristics\n* @param estimatedSize estimated size of the elements\n*/",
        "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfDouble:trySplit()": "/**\n* Attempts to split the spliterator and return a new OutSpliteratorT or null if not possible.\n*/"
    },
    "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive": {
        "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive:forEachRemaining(java.lang.Object)": "/**\n* Applies action to remaining elements, processing prefixes and transformed elements.\n* @param action function to apply to each element\n*/",
        "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive:tryAdvance(java.lang.Object)": "/**\n* Advances to the next element, applying an action if available.\n* @param action consumer to process the current element\n* @return true if an element was processed, false if none left\n*/",
        "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive:trySplit()": "/**\n* Attempts to split the spliterator and return a new OutSpliteratorT or null if not possible.\n*/"
    },
    "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfInt": {
        "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfInt:<init>(java.util.Spliterator$OfInt,java.util.Spliterator,java.util.function.Function,int,long)": "/**\n* Constructs a FlatMapSpliterator for int elements from a given spliterator.\n* @param prefix optional prefix spliterator\n* @param from input spliterator of InElementT type\n* @param function mapping function to convert InElementT to OfInt spliterator\n* @param characteristics characteristics of the spliterator\n* @param estimatedSize estimated size of the spliterator\n*/"
    },
    "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfLong": {
        "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfLong:<init>(java.util.Spliterator$OfLong,java.util.Spliterator,java.util.function.Function,int,long)": "/**\n* Constructs a FlatMapSpliterator for long values from a given source spliterator.\n* @param prefix optional prefix spliterator\n* @param from source spliterator for input elements\n* @param function maps input elements to long spliterators\n* @param characteristics spliterator characteristics\n* @param estimatedSize estimated number of elements\n*/",
        "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfLong:trySplit()": "/**\n* Attempts to split the spliterator and return a new OutSpliteratorT or null if not possible.\n*/"
    },
    "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfObject": {
        "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfObject:<init>(java.util.Spliterator,java.util.Spliterator,java.util.function.Function,int,long)": "/**\n* Constructs a FlatMapSpliterator for transforming input elements to output spliterators.\n* @param prefix optional prefix spliterator\n* @param from input spliterator of InElementT\n* @param function mapping function to transform InElementT to OutElementT spliterator\n* @param characteristics spliterator characteristics\n* @param estimatedSize estimated size of the output\n*/"
    },
    "com.google.common.collect.CollectSpliterators": {
        "com.google.common.collect.CollectSpliterators:<init>()": "/**\n* Private constructor to prevent instantiation of CollectSpliterators class.\n*/",
        "com.google.common.collect.CollectSpliterators:map(java.util.Spliterator,java.util.function.Function)": "/**\n* Maps elements from one Spliterator to another using the provided function.\n* @param fromSpliterator the source Spliterator\n* @param function the mapping function\n* @return a new Spliterator with mapped elements\n*/",
        "com.google.common.collect.CollectSpliterators:filter(java.util.Spliterator,java.util.function.Predicate)": "/**\n* Filters elements from a Spliterator based on a predicate.\n* @param fromSpliterator source Spliterator\n* @param predicate test for filtering elements\n* @return Spliterator of filtered elements\n*/",
        "com.google.common.collect.CollectSpliterators:indexed(int,int,java.util.function.IntFunction,java.util.Comparator)": "/**\n* Creates a spliterator with indexed characteristics.\n* @param size number of elements to split\n* @param extraCharacteristics additional characteristics\n* @param function mapping function for elements\n* @param comparator optional comparator for sorted order\n* @return a spliterator for the indexed elements\n*/",
        "com.google.common.collect.CollectSpliterators:flatMapToDouble(java.util.Spliterator,java.util.function.Function,int,long)": "/**\n* Transforms a spliterator of elements to a double spliterator.\n* @param fromSpliterator input spliterator of InElementT\n* @param function maps InElementT to OfDouble spliterator\n* @param topCharacteristics characteristics of the resulting spliterator\n* @param topSize estimated size of the elements\n* @return FlatMapSpliterator for double values\n*/",
        "com.google.common.collect.CollectSpliterators:flatMapToInt(java.util.Spliterator,java.util.function.Function,int,long)": "/**\n* Transforms elements from a spliterator to an OfInt spliterator.\n* @param fromSpliterator source spliterator\n* @param function mapping function to convert elements\n* @param topCharacteristics characteristics of the resulting spliterator\n* @param topSize estimated size of the resulting spliterator\n* @return OfInt spliterator containing transformed elements\n*/",
        "com.google.common.collect.CollectSpliterators:flatMapToLong(java.util.Spliterator,java.util.function.Function,int,long)": "/**\n* Transforms elements from a spliterator to a long spliterator.\n* @param fromSpliterator source of elements\n* @param function maps elements to long spliterators\n* @param topCharacteristics characteristics of the resulting spliterator\n* @param topSize estimated number of elements\n* @return FlatMapSpliteratorOfLong instance\n*/",
        "com.google.common.collect.CollectSpliterators:flatMap(java.util.Spliterator,java.util.function.Function,int,long)": "/**\n* Transforms input elements into output spliterators using a mapping function.\n* @param fromSpliterator input spliterator of InElementT\n* @param function mapping function to transform InElementT to OutElementT spliterator\n* @param topCharacteristics characteristics of the output spliterator\n* @param topSize estimated size of the output\n* @return FlatMapSpliterator for the transformed elements\n*/",
        "com.google.common.collect.CollectSpliterators:indexed(int,int,java.util.function.IntFunction)": "/**\n* Creates a spliterator for indexed elements.\n* @param size number of elements to split\n* @param extraCharacteristics additional characteristics\n* @param function mapping function for elements\n* @return a spliterator for the indexed elements\n*/"
    },
    "com.google.common.collect.Collections2$FilteredCollection": {
        "com.google.common.collect.Collections2$FilteredCollection:<init>(java.util.Collection,com.google.common.base.Predicate)": "/**\n* Constructs a filtered collection based on a predicate.\n* @param unfiltered the original collection to filter\n* @param predicate the condition to filter elements\n*/",
        "com.google.common.collect.Collections2$FilteredCollection:size()": "/**\n* Counts elements matching the predicate in the unfiltered collection.\n* @return number of elements that satisfy the predicate\n*/",
        "com.google.common.collect.Collections2$FilteredCollection:forEach(java.util.function.Consumer)": "/**\n* Applies action to each element matching the predicate.\n* @param action consumer for processing elements\n*/",
        "com.google.common.collect.Collections2$FilteredCollection:removeIf(java.util.function.Predicate)": "/**\n* Removes elements matching the given filter predicate.\n* @param filter condition to test elements for removal\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.Collections2$FilteredCollection:add(java.lang.Object)": "/**\n* Adds an element if it satisfies the predicate.\n* @param element the element to be added\n* @return true if added, false otherwise\n*/",
        "com.google.common.collect.Collections2$FilteredCollection:addAll(java.util.Collection)": "/**\n* Adds all elements from the collection if they satisfy the predicate.\n* @param collection elements to add\n* @return true if the collection was modified\n*/",
        "com.google.common.collect.Collections2$FilteredCollection:containsAll(java.util.Collection)": "/**\n* Checks if the collection contains all elements of the specified collection.\n* @param collection the collection of elements to check for presence\n* @return true if all elements are present, false otherwise\n*/",
        "com.google.common.collect.Collections2$FilteredCollection:spliterator()": "/**\n* Returns a filtered Spliterator of elements based on a predicate.\n* @return Spliterator of filtered elements from unfiltered source\n*/",
        "com.google.common.collect.Collections2$FilteredCollection:removeAll(java.util.Collection)": "/**\n* Removes all elements in the collection that match the given filter.\n* @param collection elements to be removed\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.Collections2$FilteredCollection:retainAll(java.util.Collection)": "/**\n* Retains elements in the collection that are also in the specified collection.\n* @param collection the collection to retain elements from\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.Collections2$FilteredCollection:contains(java.lang.Object)": "/**\n* Checks if an element satisfies a predicate in an unfiltered collection.\n* @param element the object to check\n* @return true if element satisfies the predicate, false otherwise\n*/",
        "com.google.common.collect.Collections2$FilteredCollection:iterator()": "/**\n* Returns an iterator filtered by the specified predicate.\n* @return Iterator of elements that match the predicate\n*/",
        "com.google.common.collect.Collections2$FilteredCollection:createCombined(com.google.common.base.Predicate)": "/**\n* Creates a filtered collection with a combined predicate.\n* @param newPredicate additional condition for filtering elements\n* @return FilteredCollection with combined predicates\n*/",
        "com.google.common.collect.Collections2$FilteredCollection:remove(java.lang.Object)": "/**\n* Removes an element if it exists in the collection.\n* @param element the object to remove\n* @return true if the element was removed, false otherwise\n*/",
        "com.google.common.collect.Collections2$FilteredCollection:clear()": "/**\n* Clears elements from the collection matching the predicate.\n*/",
        "com.google.common.collect.Collections2$FilteredCollection:toArray()": "/**\n* Converts the collection to an array using a filtered ArrayList.\n* @return Array of objects from the collection\n*/",
        "com.google.common.collect.Collections2$FilteredCollection:toArray(java.lang.Object[])": "/**\n* Converts iterator elements to an array.\n* @param array target array for elements\n* @return array containing the elements from the iterator\n*/",
        "com.google.common.collect.Collections2$FilteredCollection:isEmpty()": "/**\n* Checks if the collection is empty based on a predicate.\n* @return true if no elements match the predicate, false otherwise\n*/"
    },
    "com.google.common.collect.Collections2": {
        "com.google.common.collect.Collections2:containsAllImpl(java.util.Collection,java.util.Collection)": "/**\n* Checks if the collection contains all elements of another collection.\n* @param self the collection to check against\n* @param c the collection of elements to check for presence\n* @return true if all elements are present, false otherwise\n*/",
        "com.google.common.collect.Collections2:<init>()": "/**\n* Private constructor to prevent instantiation of the Collections2 class.\n*/",
        "com.google.common.collect.Collections2:safeContains(java.util.Collection,java.lang.Object)": "/** Checks if a collection contains a specified object safely. \n* @param collection the collection to check \n* @param object the object to find \n* @return true if found, false otherwise \n*/",
        "com.google.common.collect.Collections2:safeRemove(java.util.Collection,java.lang.Object)": "/**\n* Safely removes an object from a collection, handling exceptions.\n* @param collection the collection to modify\n* @param object the object to remove, can be null\n* @return true if removed, false if not found or an exception occurred\n*/",
        "com.google.common.collect.Collections2:newStringBuilderForCollection(int)": "/**\n* Creates a StringBuilder for a collection of specified size.\n* @param size the initial size for the StringBuilder\n* @return a StringBuilder instance with appropriate capacity\n*/",
        "com.google.common.collect.Collections2:transform(java.util.Collection,com.google.common.base.Function)": "/**\n* Transforms a collection using a specified function.\n* @param fromCollection source collection to transform\n* @param function transformation function applied to elements\n* @return new collection with transformed elements\n*/",
        "com.google.common.collect.Collections2:toStringImpl(java.util.Collection)": "/**\n* Converts a collection to its string representation.\n* @param collection the collection to convert\n* @return string representation of the collection\n*/",
        "com.google.common.collect.Collections2:filter(java.util.Collection,com.google.common.base.Predicate)": "/**\n* Filters a collection based on a predicate.\n* @param unfiltered the original collection to filter\n* @param predicate the condition to filter elements\n* @return a filtered collection\n*/",
        "com.google.common.collect.Collections2:isPermutation(java.util.List,java.util.List)": "/**\n* Checks if two lists are permutations of each other.\n* @param first the first list to compare\n* @param second the second list to compare\n* @return true if they are permutations, false otherwise\n*/",
        "com.google.common.collect.Collections2:orderedPermutations(java.lang.Iterable,java.util.Comparator)": "/**\n* Generates ordered permutations of elements.\n* @param elements source elements for permutations\n* @param comparator defines the order of elements\n* @return collection of ordered permutations\n*/",
        "com.google.common.collect.Collections2:orderedPermutations(java.lang.Iterable)": "/**\n* Generates ordered permutations of elements using natural ordering.\n* @param elements source elements for permutations\n* @return collection of ordered permutations\n*/",
        "com.google.common.collect.Collections2:permutations(java.util.Collection)": "/**\n* Generates all permutations of the given collection of elements.\n* @param elements collection of elements to permute\n* @return collection of lists representing all permutations\n*/"
    },
    "com.google.common.collect.Collections2$OrderedPermutationCollection": {
        "com.google.common.collect.Collections2$OrderedPermutationCollection:contains(java.lang.Object)": "/**\n* Checks if the given object is a permutation of the input list.\n* @param obj object to check, expected to be a List\n* @return true if obj is a permutation, false otherwise\n*/",
        "com.google.common.collect.Collections2$OrderedPermutationCollection:toString()": "/**\n* Returns a string representation of the ordered permutation collection.\n* @return formatted string with inputList\n*/",
        "com.google.common.collect.Collections2$OrderedPermutationCollection:calculateSize(java.util.List,java.util.Comparator)": "/**\n* Calculates the size of permutations from a sorted list.\n* @param sortedInputList input list of elements\n* @param comparator for comparing list elements\n* @return size of permutations or Integer.MAX_VALUE if overflow occurs\n*/",
        "com.google.common.collect.Collections2$OrderedPermutationCollection:iterator()": "/**\n* Returns an iterator for permutations of the input list.\n* @return Iterator of permuted lists based on the comparator\n*/",
        "com.google.common.collect.Collections2$OrderedPermutationCollection:<init>(java.lang.Iterable,java.util.Comparator)": "/**\n* Initializes OrderedPermutationCollection with sorted input and calculates its size.\n* @param input iterable source of elements to sort\n* @param comparator used for sorting elements\n*/"
    },
    "com.google.common.collect.Collections2$OrderedPermutationIterator": {
        "com.google.common.collect.Collections2$OrderedPermutationIterator:findNextJ()": "/**\n* Finds the next index for permutation adjustment.\n* @return index of the next permutation or -1 if none exists\n*/",
        "com.google.common.collect.Collections2$OrderedPermutationIterator:findNextL(int)": "/**\n* Finds the next index l greater than j for which nextPermutation[l] > nextPermutation[j].\n* @param j index to compare with\n* @return index l or throws AssertionError if unreachable\n*/",
        "com.google.common.collect.Collections2$OrderedPermutationIterator:calculateNextPermutation()": "/**\n* Calculates the next permutation of a list.\n* Sets nextPermutation to null if no next permutation exists.\n*/",
        "com.google.common.collect.Collections2$OrderedPermutationIterator:<init>(java.util.List,java.util.Comparator)": "/**** Initializes an OrderedPermutationIterator with a list and a comparator. \n* @param list elements to permute \n* @param comparator defines the order of permutations \n*/",
        "com.google.common.collect.Collections2$OrderedPermutationIterator:computeNext()": "/**\n* Computes the next permutation of elements.\n* @return List of elements or end of data if no next exists\n*/"
    },
    "com.google.common.collect.Collections2$PermutationCollection": {
        "com.google.common.collect.Collections2$PermutationCollection:<init>(com.google.common.collect.ImmutableList)": "/**\n* Initializes PermutationCollection with a given immutable input list.\n* @param input immutable list of elements\n*/",
        "com.google.common.collect.Collections2$PermutationCollection:contains(java.lang.Object)": "/**\n* Checks if the object is a permutation of the input list.\n* @param obj object to check for permutation\n* @return true if obj is a permutation, false otherwise\n*/",
        "com.google.common.collect.Collections2$PermutationCollection:toString()": "/**\n* Returns a string representation of the permutations of inputList.\n* @return formatted string indicating permutations of inputList\n*/",
        "com.google.common.collect.Collections2$PermutationCollection:size()": "/**\n* Returns the factorial of the input list size.\n* @return factorial of the list size or Integer.MAX_VALUE if too large\n*/",
        "com.google.common.collect.Collections2$PermutationCollection:iterator()": "/**\n* Returns an iterator for generating permutations of inputList.\n* @return Iterator of permutations as lists\n*/"
    },
    "com.google.common.collect.Collections2$PermutationIterator": {
        "com.google.common.collect.Collections2$PermutationIterator:switchDirection()": "/**\n* Reverses the direction of the element at index j and decrements j.\n*/",
        "com.google.common.collect.Collections2$PermutationIterator:calculateNextPermutation()": "/**\n* Calculates the next permutation of a list.\n* Handles empty list and updates indices accordingly.\n*/",
        "com.google.common.collect.Collections2$PermutationIterator:<init>(java.util.List)": "/**\n* Initializes PermutationIterator with a list for generating permutations.\n* @param list elements to permute\n*/",
        "com.google.common.collect.Collections2$PermutationIterator:computeNext()": "/**\n* Computes the next permutation of a list.\n* @return List of elements or end of data if no more permutations exist\n*/"
    },
    "com.google.common.collect.Collections2$TransformedCollection": {
        "com.google.common.collect.Collections2$TransformedCollection:clear()": "/**\n* Clears all elements from the fromCollection.\n*/",
        "com.google.common.collect.Collections2$TransformedCollection:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if the collection is empty, false otherwise\n*/",
        "com.google.common.collect.Collections2$TransformedCollection:size()": "/**\n* Returns the number of elements in the collection.\n* @return the size of the collection as an integer\n*/",
        "com.google.common.collect.Collections2$TransformedCollection:<init>(java.util.Collection,com.google.common.base.Function)": "/**\n* Constructs a TransformedCollection from a source collection and a transformation function.\n* @param fromCollection source collection to transform\n* @param function transformation function applied to elements\n*/",
        "com.google.common.collect.Collections2$TransformedCollection:forEach(java.util.function.Consumer)": "/**\n* Applies a given action to each element in the collection after transformation.\n* @param action a Consumer that processes each transformed element\n*/",
        "com.google.common.collect.Collections2$TransformedCollection:removeIf(java.util.function.Predicate)": "/**\n* Removes elements matching the filter from the collection.\n* @param filter predicate to test elements for removal\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.Collections2$TransformedCollection:spliterator()": "/**\n* Creates a Spliterator by mapping elements from the source collection.\n* @return a new Spliterator with mapped elements\n*/",
        "com.google.common.collect.Collections2$TransformedCollection:iterator()": "/**\n* Returns an iterator of transformed elements from the source collection.\n* @return Iterator of type T after applying the transformation function\n*/"
    },
    "com.google.common.collect.CompactHashMap": {
        "com.google.common.collect.CompactHashMap:delegateOrNull()": "/**\n* Returns the table as a Map if possible, or null if not.\n* @return Map representation of the table or null\n*/",
        "com.google.common.collect.CompactHashMap:needsAllocArrays()": "/**\n* Checks if allocation of arrays is needed.\n* @return true if table is null, false otherwise\n*/",
        "com.google.common.collect.CompactHashMap:incrementModCount()": "/**\n* Increments the modification count in metadata.\n*/",
        "com.google.common.collect.CompactHashMap:getSuccessor(int)": "/**\n* Returns the successor index of the given entry index.\n* @param entryIndex current index of the entry\n* @return next index or -1 if at the end\n*/",
        "com.google.common.collect.CompactHashMap:adjustAfterRemove(int,int)": "/**\n* Adjusts index after an element removal.\n* @param indexBeforeRemove original index before removal\n* @return updated index after removal\n*/",
        "com.google.common.collect.CompactHashMap:createHashFloodingResistantDelegate(int)": "/**\n* Creates a hash flooding resistant LinkedHashMap.\n* @param tableSize initial capacity of the map\n* @return a new LinkedHashMap instance\n*/",
        "com.google.common.collect.CompactHashMap:hashTableMask()": "/**\n* Computes the hash table mask based on metadata.\n* @return bitmask for hash table size\n*/",
        "com.google.common.collect.CompactHashMap:requireEntries()": "/**\n* Returns non-null entries array.\n* @return int[] array of entries\n*/",
        "com.google.common.collect.CompactHashMap:requireKeys()": "/**\n* Returns non-null array of keys.\n* @return array of keys or throws NullPointerException if null\n*/",
        "com.google.common.collect.CompactHashMap:requireValues()": "/**\n* Returns non-null values array, or throws NullPointerException if null.\n* @return non-null Object array\n*/",
        "com.google.common.collect.CompactHashMap:requireTable()": "/**\n* Retrieves the table object, ensuring it is not null.\n* @return the table object\n*/",
        "com.google.common.collect.CompactHashMap:accessEntry(int)": "/**\n* Accesses an entry at the specified index.\n* @param index position of the entry to access\n*/",
        "com.google.common.collect.CompactHashMap:createKeySet()": "/**\n* Creates a new set view of keys.\n* @return a Set containing the keys\n*/",
        "com.google.common.collect.CompactHashMap:createEntrySet()": "/**\n* Creates a set view of the entries in the map.\n* @return a Set of map entries\n*/",
        "com.google.common.collect.CompactHashMap:createValues()": "/**\n* Creates and returns a collection of values.\n* @return Collection of values encapsulated in ValuesView\n*/",
        "com.google.common.collect.CompactHashMap:keySetIterator()": "/**\n* Returns an iterator over the keys in the map.\n* @return Iterator for keys or a custom iterator if map is null\n*/",
        "com.google.common.collect.CompactHashMap:entrySetIterator()": "/**\n* Returns an iterator for the map's entry set or a custom iterator if null.\n* @return Iterator for map entries or custom iterator if map is null\n*/",
        "com.google.common.collect.CompactHashMap:size()": "/**\n* Returns the number of elements in the collection.\n* @return size of the collection or delegate map if available\n*/",
        "com.google.common.collect.CompactHashMap:valuesIterator()": "/**\n* Returns an iterator over values from the delegate map or a custom iterator if null.\n* @return Iterator of values or custom iterator if delegate is null\n*/",
        "com.google.common.collect.CompactHashMap:setHashTableMask(int)": "/**\n* Sets the hash table mask using the provided mask value.\n* @param mask bitmask for hash table calculation\n*/",
        "com.google.common.collect.CompactHashMap:entry(int)": "/**\n* Retrieves an entry by index from the entries array.\n* @param i index of the desired entry\n* @return entry at the specified index\n*/",
        "com.google.common.collect.CompactHashMap:setEntry(int,int)": "/**\n* Sets the entry at index i to the specified value.\n* @param i index of the entry to update\n* @param value new value for the entry\n*/",
        "com.google.common.collect.CompactHashMap:key(int)": "/**\n* Retrieves the key at the specified index.\n* @param i index of the desired key\n* @return key of type K from the keys array\n*/",
        "com.google.common.collect.CompactHashMap:setKey(int,java.lang.Object)": "/**\n* Sets the key at the specified index.\n* @param i index to set the key\n* @param key the key to be set\n*/",
        "com.google.common.collect.CompactHashMap:resizeEntries(int)": "/**\n* Resizes entries, keys, and values arrays to new capacity.\n* @param newCapacity the new size for the arrays\n*/",
        "com.google.common.collect.CompactHashMap:value(int)": "/**\n* Retrieves value at specified index from non-null values array.\n* @param i index of the value to retrieve\n* @return value of type V at index i\n*/",
        "com.google.common.collect.CompactHashMap:setValue(int,java.lang.Object)": "/**\n* Sets the value at index i in the values array.\n* @param i index to set the value\n* @param value value to be set at the specified index\n*/",
        "com.google.common.collect.CompactHashMap:keySet()": "/**\n* Returns the set of keys, creating it if not already initialized.\n* @return Set of keys in the collection\n*/",
        "com.google.common.collect.CompactHashMap:entrySet()": "/**\n* Returns a set view of the map entries.\n* @return Set of map entries, creating if not initialized\n*/",
        "com.google.common.collect.CompactHashMap:values()": "/**\n* Retrieves a collection of values, creating if not previously initialized.\n* @return Collection of values\n*/",
        "com.google.common.collect.CompactHashMap:init(int)": "/**\n* Initializes with expected size, ensuring it's non-negative and within valid range.\n* @param expectedSize expected size, must be >= 0 and <= MAX_SIZE\n*/",
        "com.google.common.collect.CompactHashMap:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if the collection has no elements, false otherwise\n*/",
        "com.google.common.collect.CompactHashMap:clear()": "/**\n* Clears the collection, resetting size and contents based on allocation state.\n*/",
        "com.google.common.collect.CompactHashMap:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object state, including size and entries.\n* @param stream output stream for serialization\n* @throws IOException if an I/O error occurs during serialization\n*/",
        "com.google.common.collect.CompactHashMap:resizeTable(int,int,int,int)": "/**\n* Resizes the hash table and rehashes entries for a new capacity.\n* @param oldMask current mask for the old table\n* @param newCapacity desired capacity for the new table\n* @param targetHash hash of the target entry\n* @param targetEntryIndex index of the target entry\n* @return new mask for the resized table\n*/",
        "com.google.common.collect.CompactHashMap:resizeMeMaybe(int)": "/**\n* Resizes internal arrays if newSize exceeds current entries size.\n* @param newSize desired size for resizing\n*/",
        "com.google.common.collect.CompactHashMap:containsValue(java.lang.Object)": "/**\n* Checks if the map contains the specified value.\n* @param value value to search for\n* @return true if found, false otherwise\n*/",
        "com.google.common.collect.CompactHashMap:insertEntry(int,java.lang.Object,java.lang.Object,int,int)": "/**\n* Inserts an entry with key and value at the specified index.\n* @param entryIndex index to insert the entry\n* @param key key to be inserted\n* @param value value to be inserted\n* @param hash hash code for the entry\n* @param mask bitmask for hash combination\n*/",
        "com.google.common.collect.CompactHashMap:replaceAll(java.util.function.BiFunction)": "/**\n* Replaces all values using the provided function.\n* @param function a BiFunction to transform keys and values\n*/",
        "com.google.common.collect.CompactHashMap:allocArrays()": "/**\n* Allocates arrays for entries, keys, and values based on expected size.\n* @return expectedSize number of entries allocated\n*/",
        "com.google.common.collect.CompactHashMap:indexOf(java.lang.Object)": "/**\n* Finds the index of a key in a hash table.\n* @param key the key to search for; returns -1 if not found\n* @return index of the key or -1 if not present\n*/",
        "com.google.common.collect.CompactHashMap:moveLastEntry(int,int)": "/**\n* Moves the last entry to a specified index, updating keys, values, and entries accordingly.\n* @param dstIndex target index for the last entry\n* @param mask bitmask for hash computation\n*/",
        "com.google.common.collect.CompactHashMap:<init>()": "/**\n* Constructs a CompactHashMap with default initial size.\n*/",
        "com.google.common.collect.CompactHashMap:<init>(int)": "/**\n* Constructs a CompactHashMap with specified initial size.\n* @param expectedSize initial capacity, must be >= 0 and <= MAX_SIZE\n*/",
        "com.google.common.collect.CompactHashMap:firstEntryIndex()": "/**\n* Returns the index of the first entry or -1 if empty.\n* @return index of first entry or -1 if collection is empty\n*/",
        "com.google.common.collect.CompactHashMap:trimToSize()": "/**\n* Trims the collection to its current size, resizing if necessary.\n*/",
        "com.google.common.collect.CompactHashMap:containsKey(java.lang.Object)": "/**\n* Checks if the map contains the specified key.\n* @param key the key to search for\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.CompactHashMap:get(java.lang.Object)": "/**\n* Retrieves value by key; returns null if not found.\n* @param key the key to search for\n* @return corresponding value or null if absent\n*/",
        "com.google.common.collect.CompactHashMap:removeHelper(java.lang.Object)": "/**\n* Removes entry by key from the hash table.\n* @param key the key to remove, can be null\n* @return old value or NOT_FOUND if not found\n*/",
        "com.google.common.collect.CompactHashMap:create()": "/**\n* Creates and returns a new CompactHashMap instance.\n* @return a new CompactHashMap with default initial size\n*/",
        "com.google.common.collect.CompactHashMap:createWithExpectedSize(int)": "/**\n* Creates a CompactHashMap with a specified initial capacity.\n* @param expectedSize initial capacity, must be >= 0 and <= MAX_SIZE\n* @return a new CompactHashMap instance\n*/",
        "com.google.common.collect.CompactHashMap:convertToHashFloodingResistantImplementation()": "/**\n* Converts to a hash flooding resistant map implementation.\n* @return a new hash flooding resistant Map instance\n*/",
        "com.google.common.collect.CompactHashMap:forEach(java.util.function.BiConsumer)": "/**\n* Applies action on each key-value pair; skips null action.\n* @param action the BiConsumer to apply\n*/",
        "com.google.common.collect.CompactHashMap:remove(java.lang.Object)": "/**\n* Removes entry by key from the map or hash table.\n* @param key the key to remove, can be null\n* @return old value or null if not found\n*/",
        "com.google.common.collect.CompactHashMap:put(java.lang.Object,java.lang.Object)": "/**\n* Puts a key-value pair in the map, resizing if necessary.\n* @param key the key to insert, @param value the value to insert\n* @return previous value associated with the key or null if new\n*/",
        "com.google.common.collect.CompactHashMap:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from input stream.\n* @param stream input stream for reading object data\n* @throws IOException if an I/O error occurs\n* @throws ClassNotFoundException if a class cannot be found\n*/"
    },
    "com.google.common.collect.CompactHashMap$Itr": {
        "com.google.common.collect.CompactHashMap$Itr:checkForConcurrentModification()": "/**\n* Checks for concurrent modifications and throws an exception if detected.\n*/",
        "com.google.common.collect.CompactHashMap$Itr:hasNext()": "/**\n* Checks if there are more elements to iterate.\n* @return true if more elements exist, false otherwise\n*/",
        "com.google.common.collect.CompactHashMap$Itr:incrementExpectedModCount()": "/**\n* Increments the expected modification count for metadata.\n*/",
        "com.google.common.collect.CompactHashMap$Itr:next()": "/**\n* Retrieves the next element in the iteration.\n* @return the next element or throws NoSuchElementException if none exists\n*/",
        "com.google.common.collect.CompactHashMap$Itr:remove()": "/**\n* Removes an element by key, ensuring valid state and handling modifications.\n*/"
    },
    "com.google.common.collect.CompactHashing": {
        "com.google.common.collect.CompactHashing:createTable(int)": "/**\n* Creates a table of specified size based on buckets.\n* @param buckets size of the table, must be power of 2 between 2 and 2^30\n* @return array of bytes, shorts, or ints depending on the size\n*/",
        "com.google.common.collect.CompactHashing:maskCombine(int,int,int)": "/**\n* Combines prefix and suffix using a bitmask.\n* @param prefix value to combine from\n* @param suffix value to combine with\n* @param mask bitmask to determine combination\n* @return combined integer result\n*/",
        "com.google.common.collect.CompactHashing:tableGet(java.lang.Object,int)": "/**\n* Retrieves an integer from a typed array based on the index.\n* @param table array of bytes, shorts, or ints\n* @param index position in the array\n* @return integer value at the specified index\n*/",
        "com.google.common.collect.CompactHashing:newCapacity(int)": "/**\n* Calculates new capacity based on the given mask.\n* @param mask the current mask value\n* @return calculated new capacity as an integer\n*/",
        "com.google.common.collect.CompactHashing:tableSet(java.lang.Object,int,int)": "/**\n* Sets an entry in a specified array type at a given index.\n* @param table the array to modify (byte[], short[], or int[])\n* @param index the index at which to set the entry\n* @param entry the value to set at the specified index\n*/",
        "com.google.common.collect.CompactHashing:getHashPrefix(int,int)": "/**\n* Computes the hash prefix by masking the given value.\n* @param value the input integer to hash\n* @param mask the mask to apply to the value\n* @return the hashed integer result\n*/",
        "com.google.common.collect.CompactHashing:getNext(int,int)": "/**\n* Computes the next value by applying a bitwise AND with the mask.\n* @param entry the initial integer value\n* @param mask the mask to apply for the operation\n* @return the result of entry & mask\n*/",
        "com.google.common.collect.CompactHashing:tableClear(java.lang.Object)": "/**\n* Clears the contents of a given array, setting all elements to zero.\n* @param table an array of bytes, shorts, or ints to be cleared\n*/",
        "com.google.common.collect.CompactHashing:<init>()": "/**\n* Private constructor for CompactHashing class to prevent instantiation.\n*/",
        "com.google.common.collect.CompactHashing:tableSize(int)": "/**\n* Computes optimal table size for a hash table.\n* @param expectedSize desired number of entries\n* @return recommended table size as an integer\n*/",
        "com.google.common.collect.CompactHashing:remove(java.lang.Object,java.lang.Object,int,java.lang.Object,int[],java.lang.Object[],java.lang.Object[])": "/**\n* Removes an entry by key and value from a hash table.\n* @param key the key to remove, can be null\n* @param value the value to match, can be null\n* @return index of removed entry or -1 if not found\n*/"
    },
    "com.google.common.collect.CompactHashSet": {
        "com.google.common.collect.CompactHashSet:getSuccessor(int)": "/**\n* Returns the successor index of the given entry index.\n* @param entryIndex current index to find the successor for\n* @return successor index or -1 if out of bounds\n*/",
        "com.google.common.collect.CompactHashSet:adjustAfterRemove(int,int)": "/**\n* Adjusts index after an element removal.\n* @param indexBeforeRemove the index before removal\n* @return updated index after removal\n*/",
        "com.google.common.collect.CompactHashSet:needsAllocArrays()": "/**\n* Checks if allocation of arrays is needed based on table's state.\n* @return true if table is null, false otherwise\n*/",
        "com.google.common.collect.CompactHashSet:createHashFloodingResistantDelegate(int)": "/**\n* Creates a hash flood resistant LinkedHashSet.\n* @param tableSize initial capacity of the set\n* @return a new LinkedHashSet instance\n*/",
        "com.google.common.collect.CompactHashSet:hashTableMask()": "/**\n* Computes the hash table mask based on metadata.\n* @return mask value for hash table operations\n*/",
        "com.google.common.collect.CompactHashSet:incrementModCount()": "/**\n* Increments the modification count in metadata.\n*/",
        "com.google.common.collect.CompactHashSet:delegateOrNull()": "/**\n* Returns the table as a Set if possible, otherwise null.\n* @return Set of elements or null if table is not a Set\n*/",
        "com.google.common.collect.CompactHashSet:requireEntries()": "/**\n* Returns the entries array, ensuring it is not null.\n* @return non-null entries array\n*/",
        "com.google.common.collect.CompactHashSet:requireElements()": "/**\n* Returns non-null elements array.\n* @return an array of elements or throws NullPointerException if null\n*/",
        "com.google.common.collect.CompactHashSet:requireTable()": "/**\n* Ensures the table is not null and returns it.\n* @return the non-null table object\n*/",
        "com.google.common.collect.CompactHashSet:setHashTableMask(int)": "/**\n* Sets the hash table mask based on the provided mask value.\n* @param mask bitmask for hash table configuration\n*/",
        "com.google.common.collect.CompactHashSet:isUsingHashFloodingResistance()": "/**\n* Checks if hash flooding resistance is enabled.\n* @return true if a Set is available, false otherwise\n*/",
        "com.google.common.collect.CompactHashSet:iterator()": "/**\n* Returns an iterator for the elements, or a delegate if available.\n* @return Iterator of elements\n*/",
        "com.google.common.collect.CompactHashSet:size()": "/**\n* Returns the size of the collection.\n* @return number of elements or current size if delegate is null\n*/",
        "com.google.common.collect.CompactHashSet:entry(int)": "/**\n* Retrieves an entry by index from the entries array.\n* @param i index of the entry to retrieve\n* @return entry at specified index\n*/",
        "com.google.common.collect.CompactHashSet:setEntry(int,int)": "/**\n* Sets the value at the specified index in the entries array.\n* @param i index of the entry to update\n* @param value new value to set at the specified index\n*/",
        "com.google.common.collect.CompactHashSet:resizeEntries(int)": "/**\n* Resizes entries and elements arrays to the specified capacity.\n* @param newCapacity desired size of the arrays\n*/",
        "com.google.common.collect.CompactHashSet:spliterator()": "/**\n* Creates a Spliterator for the collection's elements.\n* @return Spliterator for elements or an empty one if needed\n*/",
        "com.google.common.collect.CompactHashSet:toArray()": "/**\n* Converts the collection to an array.\n* @return Array of elements or an empty array if allocation is needed\n*/",
        "com.google.common.collect.CompactHashSet:element(int)": "/**\n* Retrieves the element at the specified index.\n* @param i index of the desired element\n* @return element of type E at index i\n*/",
        "com.google.common.collect.CompactHashSet:setElement(int,java.lang.Object)": "/**\n* Sets the element at specified index.\n* @param i index of the element to set\n* @param value new value to assign at index i\n*/",
        "com.google.common.collect.CompactHashSet:init(int)": "/**\n* Initializes with expected size, ensuring it's non-negative and within a valid range.\n* @param expectedSize the anticipated number of elements, must be >= 0\n*/",
        "com.google.common.collect.CompactHashSet:resizeTable(int,int,int,int)": "/**\n* Resizes the hash table and rehashes entries for a new capacity.\n* @param oldMask current mask of the old table\n* @param newCapacity desired capacity for the new table\n* @param targetHash hash of the target entry\n* @param targetEntryIndex index of the target entry to add\n* @return new mask for the resized table\n*/",
        "com.google.common.collect.CompactHashSet:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if there are no elements, false otherwise\n*/",
        "com.google.common.collect.CompactHashSet:clear()": "/**\n* Clears the collection, resetting size and invalidating iterators.\n*/",
        "com.google.common.collect.CompactHashSet:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object to the output stream.\n* @param stream output stream for serialization\n*/",
        "com.google.common.collect.CompactHashSet:resizeMeMaybe(int)": "/**\n* Resizes entries if newSize exceeds current size.\n* @param newSize desired size to resize entries\n*/",
        "com.google.common.collect.CompactHashSet:insertEntry(int,java.lang.Object,int,int)": "/**\n* Inserts an entry at specified index with combined hash value.\n* @param entryIndex index to insert the entry\n* @param object value to insert\n* @param hash hash code for the entry\n* @param mask bitmask for hash combination\n*/",
        "com.google.common.collect.CompactHashSet:allocArrays()": "/**\n* Allocates arrays for entries and elements; checks if allocation is needed.\n* @return expectedSize number of entries to allocate\n*/",
        "com.google.common.collect.CompactHashSet:contains(java.lang.Object)": "/**\n* Checks if the set contains the specified object.\n* @param object the object to check for presence\n* @return true if present, false otherwise\n*/",
        "com.google.common.collect.CompactHashSet:moveLastEntry(int,int)": "/**\n* Moves the last entry to a specified index, updating pointers and entries.\n* @param dstIndex target index for the last entry\n* @param mask bitmask for index operations\n*/",
        "com.google.common.collect.CompactHashSet:<init>()": "/**\n* Constructs a CompactHashSet with default initial size.\n*/",
        "com.google.common.collect.CompactHashSet:<init>(int)": "/**\n* Constructs a CompactHashSet with a specified initial size.\n* @param expectedSize initial capacity of the set, must be >= 0\n*/",
        "com.google.common.collect.CompactHashSet:trimToSize()": "/**\n* Trims the collection to its current size, resizing if necessary.\n*/",
        "com.google.common.collect.CompactHashSet:firstEntryIndex()": "/**\n* Returns the index of the first entry or -1 if empty.\n* @return index of first entry or -1 if collection is empty\n*/",
        "com.google.common.collect.CompactHashSet:remove(java.lang.Object)": "/**\n* Removes an object from the collection.\n* @param object the object to remove, can be null\n* @return true if removed, false if not found or allocation needed\n*/",
        "com.google.common.collect.CompactHashSet:create()": "/**\n* Creates and returns a new CompactHashSet instance.\n* @return a new CompactHashSet of type E\n*/",
        "com.google.common.collect.CompactHashSet:createWithExpectedSize(int)": "/**\n* Creates a CompactHashSet with the specified initial capacity.\n* @param expectedSize initial capacity of the set, must be >= 0\n* @return a new CompactHashSet instance\n*/",
        "com.google.common.collect.CompactHashSet:toArray(java.lang.Object[])": "/**\n* Converts elements to an array, allocating if necessary.\n* @param a array to fill with elements\n* @return populated array or the input array if no elements\n*/",
        "com.google.common.collect.CompactHashSet:convertToHashFloodingResistantImplementation()": "/**\n* Converts to a hash flood resistant set implementation.\n* @return new Set instance with elements from current set\n*/",
        "com.google.common.collect.CompactHashSet:forEach(java.util.function.Consumer)": "/**\n* Applies the given action to each element in the collection.\n* @param action the operation to be applied to each element\n*/",
        "com.google.common.collect.CompactHashSet:create(java.util.Collection)": "/**\n* Creates a CompactHashSet from a given collection.\n* @param collection input collection to add to the set\n* @return a new CompactHashSet containing elements of the collection\n*/",
        "com.google.common.collect.CompactHashSet:add(java.lang.Object)": "/**\n* Adds an object to the collection, resizing if necessary.\n* @param object the element to add\n* @return true if added, false if already present\n*/",
        "com.google.common.collect.CompactHashSet:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from input stream, initializing and adding elements.\n* @param stream input stream to read the object from\n* @throws IOException if an I/O error occurs\n* @throws ClassNotFoundException if a class cannot be found\n*/"
    },
    "com.google.common.collect.Hashing": {
        "com.google.common.collect.Hashing:closedTableSize(int,double)": "/**\n* Calculates the optimal closed table size based on entries and load factor.\n* @param expectedEntries number of expected entries\n* @param loadFactor desired load factor\n* @return recommended table size as an integer\n*/",
        "com.google.common.collect.Hashing:needsResizing(int,int,double)": "/**\n* Determines if resizing is needed based on size and load factor.\n* @param size current number of elements\n* @param tableSize current size of the hash table\n* @param loadFactor maximum allowed load factor\n* @return true if resizing is needed, false otherwise\n*/",
        "com.google.common.collect.Hashing:<init>()": "/**\n* Private constructor to prevent instantiation of the Hashing class.\n*/",
        "com.google.common.collect.Hashing:smear(int)": "/**\n* Applies a smear function to a hash code for better distribution.\n* @param hashCode input hash code to be smeared\n* @return transformed hash code after smearing\n*/",
        "com.google.common.collect.Hashing:smearedHash(java.lang.Object)": "/**\n* Computes a smeared hash code for an object.\n* @param o the object to hash, or null for a default value\n* @return transformed hash code after smearing\n*/"
    },
    "com.google.common.collect.CompactLinkedHashMap": {
        "com.google.common.collect.CompactLinkedHashMap:createHashFloodingResistantDelegate(int)": "/**\n* Creates a hash flooding resistant LinkedHashMap.\n* @param tableSize initial capacity of the map\n* @return a new LinkedHashMap instance\n*/",
        "com.google.common.collect.CompactLinkedHashMap:requireLinks()": "/**\n* Returns the non-null links array.\n* @return array of links\n*/",
        "com.google.common.collect.CompactLinkedHashMap:adjustAfterRemove(int,int)": "/**\n* Adjusts index after an element removal.\n* @param indexBeforeRemove index before the removal\n* @param indexRemoved index of the removed element\n* @return adjusted index based on removal\n*/",
        "com.google.common.collect.CompactLinkedHashMap:createEntrySet()": "/**\n* Creates a set view of the entries in the map.\n* @return a Set of map entries with distinct and ordered elements\n*/",
        "com.google.common.collect.CompactLinkedHashMap:createKeySet()": "/**\n* Creates a set view of keys.\n* @return Set of keys as KeySetImpl instance\n*/",
        "com.google.common.collect.CompactLinkedHashMap:createValues()": "/**\n* Creates a collection of values as a ValuesImpl instance.\n* @return Collection of values\n*/",
        "com.google.common.collect.CompactLinkedHashMap:link(int)": "/**\n* Retrieves a link by index from the links array.\n* @param i index of the desired link\n* @return the link at the specified index\n*/",
        "com.google.common.collect.CompactLinkedHashMap:setLink(int,long)": "/**\n* Sets a link value at the specified index.\n* @param i index of the link to set\n* @param value new link value\n*/",
        "com.google.common.collect.CompactLinkedHashMap:resizeEntries(int)": "/**\n* Resizes entries and updates the links array to the new capacity.\n* @param newCapacity the new size for the entries and links arrays\n*/",
        "com.google.common.collect.CompactLinkedHashMap:getPredecessor(int)": "/**\n* Retrieves the predecessor of an entry from the links array.\n* @param entry index of the desired entry\n* @return predecessor index or -1 if none exists\n*/",
        "com.google.common.collect.CompactLinkedHashMap:getSuccessor(int)": "/**\n* Retrieves the predecessor of a link by entry index.\n* @param entry index of the desired link\n* @return index of the predecessor link\n*/",
        "com.google.common.collect.CompactLinkedHashMap:setSuccessor(int,int)": "/**\n* Sets the successor of a specified entry.\n* @param entry index of the entry to update\n* @param succ new successor value to set\n*/",
        "com.google.common.collect.CompactLinkedHashMap:setPredecessor(int,int)": "/**\n* Sets the predecessor for a specified entry index.\n* @param entry index of the entry to update\n* @param pred new predecessor value\n*/",
        "com.google.common.collect.CompactLinkedHashMap:init(int)": "/**\n* Initializes the structure with a specified size.\n* @param expectedSize size for initialization, must be >= 0 and <= MAX_SIZE\n*/",
        "com.google.common.collect.CompactLinkedHashMap:clear()": "/**\n* Clears the collection, resetting entries and links if allocation is not needed.\n*/",
        "com.google.common.collect.CompactLinkedHashMap:allocArrays()": "/**\n* Allocates arrays for links and returns expected size.\n* @return expectedSize number of entries allocated\n*/",
        "com.google.common.collect.CompactLinkedHashMap:setSucceeds(int,int)": "/**\n* Updates entry links based on predecessor and successor values.\n* @param pred predecessor entry index\n* @param succ successor entry index\n*/",
        "com.google.common.collect.CompactLinkedHashMap:<init>(int,boolean)": "/**\n* Constructs a CompactLinkedHashMap with specified size and access order.\n* @param expectedSize initial capacity, must be >= 0\n* @param accessOrder true for access order, false for insertion order\n*/",
        "com.google.common.collect.CompactLinkedHashMap:insertEntry(int,java.lang.Object,java.lang.Object,int,int)": "/**\n* Inserts an entry and updates successor links.\n* @param entryIndex index for the new entry\n* @param key entry key\n* @param value entry value\n* @param hash hash code for the entry\n* @param mask bitmask for hash combination\n*/",
        "com.google.common.collect.CompactLinkedHashMap:accessEntry(int)": "/**\n* Updates entry position in access order.\n* @param index the index of the entry to access\n*/",
        "com.google.common.collect.CompactLinkedHashMap:moveLastEntry(int,int)": "/**\n* Moves the last entry to a specified index and updates links.\n* @param dstIndex target index for the last entry\n* @param mask bitmask for hash computation\n*/",
        "com.google.common.collect.CompactLinkedHashMap:<init>(int)": "/**\n* Constructs a CompactLinkedHashMap with specified size in insertion order.\n* @param expectedSize initial capacity, must be >= 0\n*/",
        "com.google.common.collect.CompactLinkedHashMap:convertToHashFloodingResistantImplementation()": "/**\n* Converts to a hash flooding resistant map and resets links.\n* @return a hash flooding resistant Map instance\n*/",
        "com.google.common.collect.CompactLinkedHashMap:createWithExpectedSize(int)": "/**\n* Creates a CompactLinkedHashMap with the specified initial capacity.\n* @param expectedSize initial capacity, must be >= 0\n* @return a new CompactLinkedHashMap instance\n*/",
        "com.google.common.collect.CompactLinkedHashMap:<init>()": "/**\n* Initializes a CompactLinkedHashMap with a default size.\n*/",
        "com.google.common.collect.CompactLinkedHashMap:create()": "/**\n* Creates and returns a new CompactLinkedHashMap instance.\n* @return a new CompactLinkedHashMap with default size\n*/"
    },
    "com.google.common.collect.CompactLinkedHashSet": {
        "com.google.common.collect.CompactLinkedHashSet:requirePredecessors()": "/**\n* Returns the non-null predecessor array.\n* @return int[] array of predecessors\n*/",
        "com.google.common.collect.CompactLinkedHashSet:requireSuccessors()": "/**\n* Returns non-null successors array.\n* @return array of successors, throws NullPointerException if null\n*/",
        "com.google.common.collect.CompactLinkedHashSet:adjustAfterRemove(int,int)": "/**\n* Adjusts index after an element removal.\n* @param indexBeforeRemove index before the removal\n* @param indexRemoved index of the removed element\n* @return adjusted index based on removal\n*/",
        "com.google.common.collect.CompactLinkedHashSet:spliterator()": "/**\n* Returns a Spliterator for the current collection, ordered and distinct.\n* @return a Spliterator instance for the elements\n*/",
        "com.google.common.collect.CompactLinkedHashSet:getPredecessor(int)": "/**\n* Retrieves the predecessor index for a given entry.\n* @param entry index of the entry in the predecessor array\n* @return predecessor index or -1 if entry is invalid\n*/",
        "com.google.common.collect.CompactLinkedHashSet:setPredecessor(int,int)": "/**\n* Sets the predecessor for a given entry.\n* @param entry index of the entry to update\n* @param pred predecessor value to set\n*/",
        "com.google.common.collect.CompactLinkedHashSet:getSuccessor(int)": "/**\n* Retrieves the predecessor of a successor by its entry index.\n* @param entry index of the successor\n* @return index of the predecessor, or throws NullPointerException if successors are null\n*/",
        "com.google.common.collect.CompactLinkedHashSet:setSuccessor(int,int)": "/**\n* Sets the successor for a given entry index.\n* @param entry index of the entry to update\n* @param succ new successor value to be set\n*/",
        "com.google.common.collect.CompactLinkedHashSet:resizeEntries(int)": "/**\n* Resizes entries and updates predecessor/successor arrays.\n* @param newCapacity desired size of the arrays\n*/",
        "com.google.common.collect.CompactLinkedHashSet:setSucceeds(int,int)": "/**\n* Updates entry successors and predecessors based on given indices.\n* @param pred predecessor index, @param succ successor index\n*/",
        "com.google.common.collect.CompactLinkedHashSet:toArray()": "/**\n* Converts the current object to an array.\n* @return an array representation of the object\n*/",
        "com.google.common.collect.CompactLinkedHashSet:init(int)": "/**\n* Initializes the structure and sets first/last entries to ENDPOINT.\n* @param expectedSize anticipated number of elements, must be >= 0\n*/",
        "com.google.common.collect.CompactLinkedHashSet:clear()": "/**\n* Clears the collection and resets entry references.\n* If arrays need allocation, skips the clearing process.\n*/",
        "com.google.common.collect.CompactLinkedHashSet:allocArrays()": "/**\n* Allocates predecessor and successor arrays based on expected size.\n* @return expectedSize number of entries allocated\n*/",
        "com.google.common.collect.CompactLinkedHashSet:insertEntry(int,java.lang.Object,int,int)": "/**\n* Inserts an entry and updates successors based on indices.\n* @param entryIndex index to insert the entry\n* @param object value to insert\n* @param hash hash code for the entry\n* @param mask bitmask for hash combination\n*/",
        "com.google.common.collect.CompactLinkedHashSet:moveLastEntry(int,int)": "/**\n* Moves the last entry to a specified index, updating successors and predecessors.\n* @param dstIndex target index for the last entry, @param mask bitmask for index operations\n*/",
        "com.google.common.collect.CompactLinkedHashSet:toArray(java.lang.Object[])": "/**\n* Converts the current object to an array of the specified type.\n* @param a target array for elements\n* @return filled array of type T\n*/",
        "com.google.common.collect.CompactLinkedHashSet:<init>()": "/**\n* Constructs a CompactLinkedHashSet with default initial size.\n*/",
        "com.google.common.collect.CompactLinkedHashSet:<init>(int)": "/**\n* Constructs a CompactLinkedHashSet with a specified initial size.\n* @param expectedSize initial capacity of the set, must be >= 0\n*/",
        "com.google.common.collect.CompactLinkedHashSet:create()": "/**\n* Creates a new instance of CompactLinkedHashSet.\n* @return A new CompactLinkedHashSet object.\n*/",
        "com.google.common.collect.CompactLinkedHashSet:createWithExpectedSize(int)": "/**\n* Creates a CompactLinkedHashSet with a specified initial size.\n* @param expectedSize initial capacity of the set, must be >= 0\n* @return CompactLinkedHashSet instance\n*/",
        "com.google.common.collect.CompactLinkedHashSet:convertToHashFloodingResistantImplementation()": "/**\n* Converts to a hash flood resistant set and resets predecessor/successor.\n* @return Set instance with elements from the current set\n*/",
        "com.google.common.collect.CompactLinkedHashSet:create(java.util.Collection)": "/**\n* Creates a CompactLinkedHashSet from a given collection.\n* @param collection input collection to add to the set\n* @return CompactLinkedHashSet containing elements from the collection\n*/"
    },
    "com.google.common.collect.ComparatorOrdering": {
        "com.google.common.collect.ComparatorOrdering:compare(java.lang.Object,java.lang.Object)": "/**\n* Compares two objects using a specified comparator.\n* @param a first object to compare\n* @param b second object to compare\n* @return comparison result as an integer\n*/",
        "com.google.common.collect.ComparatorOrdering:equals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param object the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ComparatorOrdering:hashCode()": "/**\n* Returns the hash code based on the comparator.\n* @return hash code of the comparator\n*/",
        "com.google.common.collect.ComparatorOrdering:toString()": "/**\n* Returns the string representation of the comparator.\n* @return string representation of the comparator\n*/",
        "com.google.common.collect.ComparatorOrdering:<init>(java.util.Comparator)": "/**\n* Constructs an instance of ComparatorOrdering with a non-null comparator.\n* @param comparator the comparison logic to use\n*/"
    },
    "com.google.common.collect.Comparators": {
        "com.google.common.collect.Comparators:<init>()": "/**\n* Private constructor to prevent instantiation of the Comparators class.\n*/",
        "com.google.common.collect.Comparators:min(java.lang.Object,java.lang.Object,java.util.Comparator)": "/**\n* Returns the minimum of two values based on the provided comparator.\n* @param a first value, may be null\n* @param b second value, may be null\n* @param comparator compares the two values\n* @return the minimum value, or one of them if equal\n*/",
        "com.google.common.collect.Comparators:max(java.lang.Object,java.lang.Object,java.util.Comparator)": "/**\n* Returns the maximum of two elements based on the provided comparator.\n* @param a first element, may be null\n* @param b second element, may be null\n* @param comparator comparison logic for elements\n* @return the greater of a or b, or null if both are null\n*/",
        "com.google.common.collect.Comparators:isInOrder(java.lang.Iterable,java.util.Comparator)": "/**\n* Checks if elements in iterable are in order according to the comparator.\n* @param iterable collection of elements to check\n* @param comparator defines the order of elements\n* @return true if in order, false otherwise\n*/",
        "com.google.common.collect.Comparators:isInStrictOrder(java.lang.Iterable,java.util.Comparator)": "/**\n* Checks if elements in iterable are in strict order using the comparator.\n* @param iterable collection of elements to check\n* @param comparator defines the order of elements\n* @return true if in strict order, false otherwise\n*/",
        "com.google.common.collect.Comparators:emptiesFirst(java.util.Comparator)": "/**\n* Returns a comparator that prioritizes empty Optionals first.\n* @param valueComparator comparator for non-empty values\n* @return Comparator for Optional<T> instances\n*/",
        "com.google.common.collect.Comparators:emptiesLast(java.util.Comparator)": "/**\n* Returns a comparator for Optional values, placing empty optionals last.\n* @param valueComparator comparator for the contained values\n* @return Comparator for Optional<T> with empty optionals at the end\n*/",
        "com.google.common.collect.Comparators:lexicographical(java.util.Comparator)": "/**\n* Returns a comparator for iterables using lexicographical ordering.\n* @param comparator defines the order of elements\n* @return Comparator for Iterable<S>\n*/",
        "com.google.common.collect.Comparators:least(int,java.util.Comparator)": "/**\n* Creates a collector for the least K elements using a comparator.\n* @param k number of elements to collect\n* @param comparator comparison logic for elements\n* @return Collector that gathers least K elements\n*/",
        "com.google.common.collect.Comparators:greatest(int,java.util.Comparator)": "/**\n* Collects the greatest K elements using a comparator.\n* @param k number of elements to collect\n* @param comparator comparison logic for elements\n* @return Collector that gathers greatest K elements\n*/"
    },
    "com.google.common.collect.TopKSelector": {
        "com.google.common.collect.TopKSelector:topK()": "/**\n* Returns the top K elements from the buffer sorted by a comparator.\n* @return unmodifiable list of top K elements\n*/",
        "com.google.common.collect.TopKSelector:swap(int,int)": "/**\n* Swaps elements at indices i and j in the buffer array.\n* @param i index of the first element\n* @param j index of the second element\n*/",
        "com.google.common.collect.TopKSelector:partition(int,int,int)": "/**\n* Partitions the array around a pivot and returns its new index.\n* @param left starting index of the partition\n* @param right ending index of the partition\n* @param pivotIndex index of the pivot element\n* @return new index of the pivot after partitioning\n*/",
        "com.google.common.collect.TopKSelector:trim()": "/**\n* Trims the buffer to size k and updates the threshold value.\n*/",
        "com.google.common.collect.TopKSelector:<init>(java.util.Comparator,int)": "/**\n* Initializes TopKSelector with a comparator and limit k.\n* @param comparator comparison logic for elements\n* @param k maximum number of elements to select\n*/",
        "com.google.common.collect.TopKSelector:offer(java.lang.Object)": "/**\n* Adds an element to the buffer and manages the threshold.\n* @param elem the element to add, may be null\n*/",
        "com.google.common.collect.TopKSelector:least(int,java.util.Comparator)": "/**\n* Creates a TopKSelector for selecting the least k elements.\n* @param k maximum number of elements to select\n* @param comparator comparison logic for elements\n* @return TopKSelector instance for least k elements\n*/",
        "com.google.common.collect.TopKSelector:greatest(int,java.util.Comparator)": "/**\n* Selects the top k elements based on the provided comparator in reverse order.\n* @param k maximum number of elements to select\n* @param comparator comparison logic for elements\n* @return TopKSelector for the top k elements\n*/",
        "com.google.common.collect.TopKSelector:combine(com.google.common.collect.TopKSelector)": "/**\n* Combines another TopKSelector into this one.\n* @param other the TopKSelector to combine\n* @return this TopKSelector after combination\n*/",
        "com.google.common.collect.TopKSelector:offerAll(java.util.Iterator)": "/**\n* Adds all elements from the iterator to the buffer.\n* @param elements iterator of elements to add\n*/",
        "com.google.common.collect.TopKSelector:least(int)": "/**\n* Selects the least k elements using natural ordering.\n* @param k maximum number of elements to select\n* @return TopKSelector instance for least k elements\n*/",
        "com.google.common.collect.TopKSelector:greatest(int)": "/**\n* Selects the top k comparable elements.\n* @param k maximum number of elements to select\n* @return TopKSelector for the top k elements\n*/",
        "com.google.common.collect.TopKSelector:offerAll(java.lang.Iterable)": "/**\n* Adds all elements from the iterable to the buffer.\n* @param elements iterable of elements to add\n*/"
    },
    "com.google.common.collect.ComparisonChain$1": {
        "com.google.common.collect.ComparisonChain$1:<init>()": "/**\n* Private constructor for ComparisonChain, prevents instantiation.\n*/",
        "com.google.common.collect.ComparisonChain$1:compare(java.lang.Comparable,java.lang.Comparable)": "/**\n* Compares two Comparable objects.\n* @param left the first object to compare\n* @param right the second object to compare\n* @return ComparisonChain for chaining comparisons\n*/",
        "com.google.common.collect.ComparisonChain$1:compare(java.lang.Object,java.lang.Object,java.util.Comparator)": "/**\n* Compares two objects using the provided comparator.\n* @param left the first object to compare\n* @param right the second object to compare\n* @param comparator the Comparator for comparison logic\n* @return a ComparisonChain for chaining comparisons\n*/",
        "com.google.common.collect.ComparisonChain$1:compare(float,float)": "/**\n* Compares two float values.\n* @param left the first float to compare\n* @param right the second float to compare\n* @return ComparisonChain for chaining comparisons\n*/",
        "com.google.common.collect.ComparisonChain$1:compare(double,double)": "/**\n* Compares two double values.\n* @param left value to compare\n* @param right value to compare\n* @return ComparisonChain for further comparisons\n*/",
        "com.google.common.collect.ComparisonChain$1:result()": "/**\n* Abstract method to compute and return a numerical result.\n* @return computed integer result\n*/",
        "com.google.common.collect.ComparisonChain$1:compare(int,int)": "/**\n* Compares two integers and returns a ComparisonChain.\n* @param left first integer to compare\n* @param right second integer to compare\n* @return ComparisonChain for chaining comparisons\n*/",
        "com.google.common.collect.ComparisonChain$1:compare(long,long)": "/**\n* Compares two long values for ordering.\n* @param left first long value\n* @param right second long value\n* @return ComparisonChain for chaining comparisons\n*/",
        "com.google.common.collect.ComparisonChain$1:compareTrueFirst(boolean,boolean)": "/**\n* Compares two boolean values with true prioritized first.\n* @param left first boolean value\n* @param right second boolean value\n* @return ComparisonChain for further comparisons\n*/",
        "com.google.common.collect.ComparisonChain$1:compareFalseFirst(boolean,boolean)": "/**\n* Compares two boolean values, prioritizing false over true.\n* @param left first boolean value\n* @param right second boolean value\n* @return ComparisonChain for further comparisons\n*/"
    },
    "com.google.common.primitives.Longs": {
        "com.google.common.primitives.Longs:compare(long,long)": "/**\n* Compares two long values.\n* @param a first long value\n* @param b second long value\n* @return negative if a < b, zero if a == b, positive if a > b\n*/",
        "com.google.common.primitives.Longs:fromBytes(byte,byte,byte,byte,byte,byte,byte,byte)": "/**\n* Converts eight bytes to a long value.\n* @return long representation of the provided bytes\n*/",
        "com.google.common.primitives.Longs:toByteArray(long)": "/**\n* Converts a long value to an 8-byte array.\n* @param value the long value to convert\n* @return byte array representing the long value\n*/",
        "com.google.common.primitives.Longs:hashCode(long)": "/**\n* Returns the hash code of a long value.\n* @param value the long value to hash\n* @return the hash code of the given long value\n*/",
        "com.google.common.primitives.Longs:<init>()": "/**\n* Private constructor to prevent instantiation of the Longs class.\n*/",
        "com.google.common.primitives.Longs:indexOf(long[],long,int,int)": "/**\n* Finds the index of target in the specified array range.\n* @param array the array to search in\n* @param target the value to find\n* @param start the starting index (inclusive)\n* @param end the ending index (exclusive)\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Longs:lastIndexOf(long[],long,int,int)": "/**\n* Finds the last index of target in the array within specified bounds.\n* @param array the long array to search\n* @param target the long value to find\n* @param start the starting index for the search\n* @param end the ending index for the search\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Longs:indexOf(long[],long[])": "/**\n* Finds the starting index of target array in the given array.\n* @param array the source array to search within\n* @param target the array to find\n* @return index of target in array or -1 if not found\n*/",
        "com.google.common.primitives.Longs:ensureCapacity(long[],int,int)": "/**\n* Ensures the array has at least minLength; extends if necessary with padding.\n* @param array the original long array\n* @param minLength minimum required length\n* @param padding additional length to add if resizing\n* @return resized array if needed, otherwise the original array\n*/",
        "com.google.common.primitives.Longs:checkNoOverflow(long)": "/**\n* Validates and casts long result to int; checks for overflow.\n* @param result value to check and convert\n* @return int value if valid, otherwise throws exception\n*/",
        "com.google.common.primitives.Longs:constrainToRange(long,long,long)": "/**\n* Constrains a value within a specified range.\n* @param value the value to constrain\n* @param min the minimum allowable value\n* @param max the maximum allowable value\n* @return constrained value within [min, max]\n*/",
        "com.google.common.primitives.Longs:fromByteArray(byte[])": "/**\n* Converts byte array to long after validating its size.\n* @param bytes input byte array\n* @return long representation of the first eight bytes\n*/",
        "com.google.common.primitives.Longs:toArray(java.util.Collection)": "/**\n* Converts a collection of Numbers to a long array.\n* @param collection input collection of Number objects\n* @return long array representation of the collection\n*/",
        "com.google.common.primitives.Longs:indexOf(long[],long)": "/**\n* Finds the index of target in the entire array.\n* @param array the array to search in\n* @param target the value to find\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Longs:lastIndexOf(long[],long)": "/**\n* Finds the last index of target in the array.\n* @param array the long array to search\n* @param target the long value to find\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Longs:tryParse(java.lang.String,int)": "/**\n* Parses a string to a Long value based on the specified radix.\n* @param string the string to parse; @param radix the base for conversion (2-36)\n* @return parsed Long value or null for invalid input\n*/",
        "com.google.common.primitives.Longs:tryParse(java.lang.String)": "/**\n* Parses a string to a Long value using base 10.\n* @param string the string to parse\n* @return parsed Long value or null for invalid input\n*/",
        "com.google.common.primitives.Longs:reverse(long[],int,int)": "/**\n* Reverses a portion of the array from fromIndex to toIndex.\n* @param array the array to be reversed\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n*/",
        "com.google.common.primitives.Longs:sortDescending(long[],int,int)": "/**\n* Sorts an array in descending order within specified index range.\n* @param array the array to sort\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n*/",
        "com.google.common.primitives.Longs:reverse(long[])": "/**** Reverses the entire array after ensuring it's not null. \n* @param array the array to be reversed \n*/",
        "com.google.common.primitives.Longs:rotate(long[],int,int,int)": "/**\n* Rotates a subarray within the specified range by a given distance.\n* @param array the array to rotate\n* @param distance the number of positions to rotate\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n*/",
        "com.google.common.primitives.Longs:sortDescending(long[])": "/**\n* Sorts the given array in descending order.\n* @param array the array to sort; must not be null\n*/",
        "com.google.common.primitives.Longs:rotate(long[],int)": "/**\n* Rotates the entire array by a specified distance.\n* @param array the array to rotate\n* @param distance the number of positions to rotate\n*/"
    },
    "com.google.common.primitives.Booleans": {
        "com.google.common.primitives.Booleans:compare(boolean,boolean)": "/**\n* Compares two boolean values.\n* @param a first boolean value\n* @param b second boolean value\n* @return comparison result: -1, 0, or 1\n*/",
        "com.google.common.primitives.Booleans:hashCode(boolean)": "/**\n* Returns the hash code of the specified boolean value.\n* @param value the boolean value to hash\n* @return the hash code of the boolean value\n*/",
        "com.google.common.primitives.Booleans:<init>()": "/**\n* Private constructor for the Booleans class to prevent instantiation.\n*/",
        "com.google.common.primitives.Booleans:indexOf(boolean[],boolean,int,int)": "/**\n* Finds the index of target boolean in the specified array range.\n* @param array boolean array to search\n* @param target boolean value to find\n* @param start starting index of the search\n* @param end ending index of the search\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Booleans:lastIndexOf(boolean[],boolean,int,int)": "/**\n* Returns the last index of target in the array within specified bounds.\n* @param array boolean array to search\n* @param target boolean value to find\n* @param start starting index for search\n* @param end ending index for search (exclusive)\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Booleans:indexOf(boolean[],boolean[])": "/**\n* Finds the starting index of target in array.\n* @param array the array to search within\n* @param target the boolean array to find\n* @return index of target in array or -1 if not found\n*/",
        "com.google.common.primitives.Booleans:ensureCapacity(boolean[],int,int)": "/**\n* Ensures array capacity meets minimum length with optional padding.\n* @param array input boolean array\n* @param minLength minimum required length\n* @param padding additional space to add if needed\n* @return resized array or original if sufficient capacity\n*/",
        "com.google.common.primitives.Booleans:toArray(java.util.Collection)": "/**\n* Converts a collection of Boolean to a boolean array.\n* @param collection input collection of Boolean values\n* @return boolean array representation of the collection\n*/",
        "com.google.common.primitives.Booleans:indexOf(boolean[],boolean)": "/**\n* Finds the index of target boolean in the array.\n* @param array boolean array to search\n* @param target boolean value to find\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Booleans:lastIndexOf(boolean[],boolean)": "/**\n* Finds the last index of a target boolean in the array.\n* @param array boolean array to search\n* @param target boolean value to find\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Booleans:reverse(boolean[],int,int)": "/**\n* Reverses a segment of a boolean array between specified indices.\n* @param array the boolean array to modify\n* @param fromIndex starting index of the segment\n* @param toIndex ending index of the segment\n*/",
        "com.google.common.primitives.Booleans:reverse(boolean[])": "/**\n* Reverses the entire boolean array after ensuring it's not null.\n* @param array the boolean array to reverse\n*/",
        "com.google.common.primitives.Booleans:rotate(boolean[],int,int,int)": "/**\n* Rotates a segment of a boolean array by a specified distance.\n* @param array the boolean array to modify\n* @param distance the number of positions to rotate\n* @param fromIndex starting index of the segment\n* @param toIndex ending index of the segment\n*/",
        "com.google.common.primitives.Booleans:rotate(boolean[],int)": "/**\n* Rotates the entire boolean array by a specified distance.\n* @param array the boolean array to modify\n* @param distance the number of positions to rotate\n*/"
    },
    "com.google.common.collect.ComparisonChain$InactiveComparisonChain": {
        "com.google.common.collect.ComparisonChain$InactiveComparisonChain:<init>(int)": "/**\n* Initializes InactiveComparisonChain with a result value.\n* @param result integer representing the comparison result\n*/",
        "com.google.common.collect.ComparisonChain$InactiveComparisonChain:compare(double,double)": "/**\n* Returns the current ComparisonChain instance without comparison.\n* @param left  first double value\n* @param right second double value\n* @return this ComparisonChain instance\n*/",
        "com.google.common.collect.ComparisonChain$InactiveComparisonChain:compare(float,float)": "/**\n* Returns the current ComparisonChain instance without performing any comparison.\n* @param left the first float value to compare\n* @param right the second float value to compare\n* @return this ComparisonChain instance\n*/",
        "com.google.common.collect.ComparisonChain$InactiveComparisonChain:compare(int,int)": "/**\n* Returns the current instance for method chaining.\n* @param left value to compare\n* @param right value to compare\n* @return this ComparisonChain instance\n*/",
        "com.google.common.collect.ComparisonChain$InactiveComparisonChain:compare(java.lang.Comparable,java.lang.Comparable)": "/**\n* Returns the current ComparisonChain instance for comparison.\n* @param left  the first comparable object\n* @param right the second comparable object\n* @return this ComparisonChain instance\n*/",
        "com.google.common.collect.ComparisonChain$InactiveComparisonChain:compare(java.lang.Object,java.lang.Object,java.util.Comparator)": "/**\n* Compares two objects using the provided comparator.\n* @param left  first object to compare\n* @param right second object to compare\n* @param comparator defines the comparison logic\n* @return this ComparisonChain instance\n*/",
        "com.google.common.collect.ComparisonChain$InactiveComparisonChain:compare(long,long)": "/**\n* Returns the current ComparisonChain instance for chaining.\n* @param left value to compare\n* @param right value to compare\n* @return this ComparisonChain instance\n*/",
        "com.google.common.collect.ComparisonChain$InactiveComparisonChain:compareFalseFirst(boolean,boolean)": "/**\n* Returns the current ComparisonChain instance for chaining.\n* @param left  boolean value to compare\n* @param right boolean value to compare\n* @return this ComparisonChain instance\n*/",
        "com.google.common.collect.ComparisonChain$InactiveComparisonChain:compareTrueFirst(boolean,boolean)": "/**\n* Returns the current ComparisonChain instance, prioritizing true values.\n* @param left first boolean value\n* @param right second boolean value\n* @return this ComparisonChain instance\n*/",
        "com.google.common.collect.ComparisonChain$InactiveComparisonChain:result()": "/**\n* Returns the current result value.\n* @return integer result\n*/"
    },
    "com.google.common.collect.ComparisonChain": {
        "com.google.common.collect.ComparisonChain:<init>()": "/**\n* Private constructor for ComparisonChain, prevents instantiation.\n*/",
        "com.google.common.collect.ComparisonChain:compare(java.lang.Boolean,java.lang.Boolean)": "/**\n* Compares two Boolean values, deprecated in favor of compareFalseFirst.\n* @param left first Boolean value\n* @param right second Boolean value\n* @return ComparisonChain result of the comparison\n*/",
        "com.google.common.collect.ComparisonChain:start()": "/**\n* Starts a comparison chain.\n* @return the active ComparisonChain instance\n*/"
    },
    "com.google.common.collect.CompoundOrdering": {
        "com.google.common.collect.CompoundOrdering:compare(java.lang.Object,java.lang.Object)": "/**\n* Compares two objects using multiple comparators.\n* @param left first object to compare\n* @param right second object to compare\n* @return negative if left < right, positive if left > right, 0 if equal\n*/",
        "com.google.common.collect.CompoundOrdering:equals(java.lang.Object)": "/**\n* Checks equality with another object.\n* @param object the object to compare\n* @return true if equal, otherwise false\n*/",
        "com.google.common.collect.CompoundOrdering:hashCode()": "/**\n* Computes the hash code for the object based on comparators array.\n* @return hash code as an integer\n*/",
        "com.google.common.collect.CompoundOrdering:toString()": "/**\n* Returns a string representation of the Ordering object.\n* @return formatted string of comparators array\n*/",
        "com.google.common.collect.CompoundOrdering:<init>(java.util.Comparator,java.util.Comparator)": "/**\n* Constructs CompoundOrdering with primary and secondary comparators.\n* @param primary main comparator for ordering\n* @param secondary secondary comparator for tie-breaking\n*/",
        "com.google.common.collect.CompoundOrdering:<init>(java.lang.Iterable)": "/**\n* Constructs CompoundOrdering from a collection of comparators.\n* @param comparators source of Comparator instances\n*/"
    },
    "com.google.common.collect.ComputationException": {
        "com.google.common.collect.ComputationException:<init>(java.lang.Throwable)": "/**\n* Constructs a ComputationException with an optional cause.\n* @param cause the throwable that caused this exception, can be null\n*/"
    },
    "com.google.common.collect.ForwardingIterator": {
        "com.google.common.collect.ForwardingIterator:next()": "/**\n* Retrieves the next element from the delegate iterator.\n* @return next element of type T\n*/",
        "com.google.common.collect.ForwardingIterator:hasNext()": "/**\n* Checks if there is another element in the iterator.\n* @return true if another element exists, false otherwise\n*/",
        "com.google.common.collect.ForwardingIterator:remove()": "/**\n* Removes the current element from the collection.\n*/",
        "com.google.common.collect.ForwardingIterator:<init>()": "/**\n* Initializes a new instance of ForwardingIterator.\n*/"
    },
    "com.google.common.collect.ConcurrentHashMultiset$EntrySet": {
        "com.google.common.collect.ConcurrentHashMultiset$EntrySet:multiset()": "/**\n* Returns the current instance of ConcurrentHashMultiset.\n* @return the ConcurrentHashMultiset object\n*/",
        "com.google.common.collect.ConcurrentHashMultiset$EntrySet:snapshot()": "/**\n* Creates a snapshot of multiset entries.\n* @return List of multiset entries\n*/",
        "com.google.common.collect.ConcurrentHashMultiset$EntrySet:toArray()": "/**\n* Converts multiset entries to an array.\n* @return Array of multiset entries from snapshot\n*/",
        "com.google.common.collect.ConcurrentHashMultiset$EntrySet:toArray(java.lang.Object[])": "/**\n* Converts multiset entries to an array.\n* @param array the array to populate with entries\n* @return an array containing the entries\n*/"
    },
    "com.google.common.collect.ConcurrentHashMultiset": {
        "com.google.common.collect.ConcurrentHashMultiset:createElementSet()": "/**\n* Creates a set of elements from the count map's keys.\n* @return a forwarding set that wraps the count map's key set\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:elementIterator()": "/**\n* Throws an AssertionError indicating this method should not be called.\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:createEntrySet()": "/**\n* Creates a set of multiset entries (deprecated).\n* @return Set of Multiset.Entry objects\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:distinctElements()": "/**\n* Returns the count of distinct elements in the collection.\n* @return number of unique elements\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:isEmpty()": "/**\n* Checks if the count map is empty.\n* @return true if count map has no entries, false otherwise\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:entryIterator()": "/**\n* Returns an iterator over non-zero count entries.\n* @return Iterator of Entry objects with count > 0\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:clear()": "/**\n* Clears all entries from the countMap.\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object, including the countMap field.\n* @param stream the output stream for serialization\n* @throws IOException if an I/O error occurs during serialization\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:<init>(java.util.concurrent.ConcurrentMap)": "/**\n* Constructs a ConcurrentHashMultiset with an empty backing map.\n* @param countMap a ConcurrentMap to store element counts\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:size()": "/**\n* Calculates the total size from countMap values.\n* @return saturated int size, constrained within Integer limits\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:contains(java.lang.Object)": "/**\n* Checks if the collection contains the specified element.\n* @param element the object to check for presence\n* @return true if present, false otherwise\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from stream and sets count map field.\n* @param stream input stream for reading object data\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:count(java.lang.Object)": "/**\n* Counts occurrences of the specified element.\n* @param element the element to count\n* @return the count of occurrences, or 0 if not found\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:removeExactly(java.lang.Object,int)": "/**\n* Removes specified occurrences of an element; returns true if successful.\n* @param element the element to remove occurrences from\n* @param occurrences the number of occurrences to remove\n* @return true if occurrences were removed, false otherwise\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:setCount(java.lang.Object,int)": "/**\n* Sets the count for an element, returning the old count.\n* @param element the element to update\n* @param count the new count, must be non-negative\n* @return the previous count or 0 if not found\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:setCount(java.lang.Object,int,int)": "/**\n* Updates the count for an element if the current count matches the expected value.\n* @param element the element to update\n* @param expectedOldCount the current expected count\n* @param newCount the new count to set\n* @return true if the count was updated, false otherwise\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:create()": "/**\n* Creates a new ConcurrentHashMultiset with an empty ConcurrentHashMap.\n* @return a new instance of ConcurrentHashMultiset\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:create(java.util.concurrent.ConcurrentMap)": "/**\n* Creates a ConcurrentHashMultiset using the provided count map.\n* @param countMap a ConcurrentMap for element counts\n* @return a new ConcurrentHashMultiset instance\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:elementSet()": "/**\n* Retrieves the element set, initializing it if necessary.\n* @return a Set containing elements of type E\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:entrySet()": "/**\n* Returns a set of entries, initializing it if not already done.\n* @return Set of Entry objects\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:iterator()": "/**\n* Returns an iterator for the current multiset.\n* @return Iterator for the multiset entries\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:add(java.lang.Object,int)": "/**\n* Adds occurrences of an element; returns previous count or 0 if new.\n* @param element item to add occurrences for\n* @param occurrences number of occurrences to add\n* @return previous count of occurrences or 0 if added new\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:remove(java.lang.Object,int)": "/**\n* Removes specified occurrences of an element and returns the previous count.\n* @param element the element to remove occurrences from\n* @param occurrences the number of occurrences to remove\n* @return the previous count of occurrences or 0 if not found\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:create(java.lang.Iterable)": "/**\n* Creates a ConcurrentHashMultiset from the provided elements.\n* @param elements source of elements to add\n* @return a new ConcurrentHashMultiset containing the elements\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:snapshot()": "/**\n* Creates a snapshot list of elements based on their counts.\n* @return List of elements with duplicates according to their counts\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:toArray()": "/**\n* Converts snapshot list to an array.\n* @return Array of elements from the snapshot\n*/",
        "com.google.common.collect.ConcurrentHashMultiset:toArray(java.lang.Object[])": "/**\n* Converts snapshot elements to an array.\n* @param array the array to populate with elements\n* @return an array containing the elements from the snapshot\n*/"
    },
    "com.google.common.collect.Serialization$FieldSetter": {
        "com.google.common.collect.Serialization$FieldSetter:set(java.lang.Object,java.lang.Object)": "/**\n* Sets the value of a field on a given instance.\n* @param instance the object instance to modify\n* @param value the new value to set for the field\n*/",
        "com.google.common.collect.Serialization$FieldSetter:set(java.lang.Object,int)": "/**\n* Sets the specified value to the given instance's field.\n* @param instance object whose field is to be set\n* @param value new value to assign to the field\n*/",
        "com.google.common.collect.Serialization$FieldSetter:<init>(java.lang.reflect.Field)": "/**\n* Initializes FieldSetter with a Field and sets it accessible.\n* @param field the Field to be accessed\n*/"
    },
    "com.google.common.collect.ConsumingQueueIterator": {
        "com.google.common.collect.ConsumingQueueIterator:computeNext()": "/**\n* Computes the next element from the queue or signals end of data.\n* @return next element or null if the queue is empty\n*/",
        "com.google.common.collect.ConsumingQueueIterator:<init>(java.util.Queue)": "/**\n* Initializes the iterator with a non-null queue.\n* @param queue the queue to iterate over\n*/"
    },
    "com.google.common.collect.DiscreteDomain": {
        "com.google.common.collect.DiscreteDomain:minValue()": "/**\n* Throws NoSuchElementException when minValue is called.\n* @return never returns a value\n*/",
        "com.google.common.collect.DiscreteDomain:maxValue()": "/**\n* Throws NoSuchElementException as no maximum value is available.\n* @return C maximum value of type C\n*/",
        "com.google.common.collect.DiscreteDomain:integers()": "/**\n* Returns the singleton instance of the Integer discrete domain.\n* @return DiscreteDomain<Integer> instance for integers\n*/",
        "com.google.common.collect.DiscreteDomain:longs()": "/**\n* Provides the instance of Long discrete domain.\n* @return DiscreteDomain<Long> instance for long values\n*/",
        "com.google.common.collect.DiscreteDomain:bigIntegers()": "/**\n* Returns the instance of the BigInteger discrete domain.\n* @return DiscreteDomain<BigInteger> instance for BigInteger values\n*/",
        "com.google.common.collect.DiscreteDomain:<init>(boolean)": "/**\n* Constructs a DiscreteDomain with fast offset support.\n* @param supportsFastOffset indicates if fast offset is enabled\n*/",
        "com.google.common.collect.DiscreteDomain:offset(java.lang.Comparable,long)": "/**\n* Computes the offset from a given origin by a specified distance.\n* @param origin starting point\n* @param distance non-negative distance to offset\n* @return new position after applying the offset\n*/",
        "com.google.common.collect.DiscreteDomain:<init>()": "/**\n* Initializes a DiscreteDomain with fast offset support disabled.\n*/"
    },
    "com.google.common.collect.ImmutableSortedSet": {
        "com.google.common.collect.ImmutableSortedSet:<init>(java.util.Comparator)": "/**\n* Constructs an ImmutableSortedSet with the specified comparator.\n* @param comparator the comparator to order the elements\n*/",
        "com.google.common.collect.ImmutableSortedSet:descendingSet()": "/**\n* Returns an immutable sorted set in descending order.\n* @return ImmutableSortedSet in descending order\n*/",
        "com.google.common.collect.ImmutableSortedSet:comparator()": "/**\n* Returns the comparator used for sorting elements.\n* @return Comparator for the elements of type E\n*/",
        "com.google.common.collect.ImmutableSortedSet:of()": "/**\n* Returns an immutable sorted set that is empty.\n* @param <E> the type of elements in the set\n* @return an empty ImmutableSortedSet\n*/",
        "com.google.common.collect.ImmutableSortedSet:unsafeCompare(java.util.Comparator,java.lang.Object,java.lang.Object)": "/**\n* Compares two objects using the provided comparator.\n* @param comparator the comparator for comparison\n* @param a first object to compare\n* @param b second object to compare\n* @return comparison result as an integer\n*/",
        "com.google.common.collect.ImmutableSortedSet:pollFirst()": "/**\n* Always throws UnsupportedOperationException when called.\n* @return always null as this method is deprecated\n*/",
        "com.google.common.collect.ImmutableSortedSet:pollLast()": "/**\n* Always throws UnsupportedOperationException when called.\n* @return always null as operation is unsupported\n*/",
        "com.google.common.collect.ImmutableSortedSet:spliterator()": "/**\n* Creates a Spliterator for the collection.\n* @return a Spliterator for iterating over elements\n*/",
        "com.google.common.collect.ImmutableSortedSet:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization and throws an exception.\n* @throws InvalidObjectException indicates improper deserialization usage\n*/",
        "com.google.common.collect.ImmutableSortedSet:headSet(java.lang.Object,boolean)": "/**\n* Returns a view of the portion of this set whose elements are less than or equal to the given element.\n* @param toElement the upper bound element\n* @param inclusive true if the upper bound is included\n* @return a sorted set view of the specified range\n*/",
        "com.google.common.collect.ImmutableSortedSet:tailSet(java.lang.Object,boolean)": "/**\n* Returns a view of the tail of this set starting at the specified element.\n* @param fromElement the element to start the tail set from\n* @param inclusive whether the tail set includes the fromElement\n* @return an ImmutableSortedSet view of the tail\n*/",
        "com.google.common.collect.ImmutableSortedSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a subset of the sorted set within specified bounds.\n* @param fromElement starting element of the subset\n* @param fromInclusive true if fromElement is included\n* @param toElement ending element of the subset\n* @param toInclusive true if toElement is included\n* @return ImmutableSortedSet of elements within the specified range\n*/",
        "com.google.common.collect.ImmutableSortedSet:writeReplace()": "/**\n* Prepares object for serialization by returning SerializedForm.\n* @return SerializedForm containing comparator and array of elements\n*/",
        "com.google.common.collect.ImmutableSortedSet:unsafeCompare(java.lang.Object,java.lang.Object)": "/**\n* Compares two objects using a predefined comparator.\n* @param a first object to compare\n* @param b second object to compare\n* @return comparison result as an integer\n*/",
        "com.google.common.collect.ImmutableSortedSet:headSet(java.lang.Object)": "/**\n* Retrieves a view of the set elements less than the specified element.\n* @param toElement the upper bound element\n* @return a sorted set view of the specified range\n*/",
        "com.google.common.collect.ImmutableSortedSet:tailSet(java.lang.Object)": "/**\n* Returns a tail set starting from the specified element.\n* @param fromElement the element to start the tail set from\n* @return ImmutableSortedSet view of the tail\n*/",
        "com.google.common.collect.ImmutableSortedSet:subSet(java.lang.Object,java.lang.Object)": "/**\n* Returns a subset of elements from 'fromElement' to 'toElement'.\n* @param fromElement starting element of the subset\n* @param toElement ending element of the subset\n* @return ImmutableSortedSet of elements in the specified range\n*/",
        "com.google.common.collect.ImmutableSortedSet:ceiling(java.lang.Object)": "/**\n* Returns the least element greater than or equal to the given element.\n* @param e the element to compare\n* @return the ceiling element or null if none exists\n*/",
        "com.google.common.collect.ImmutableSortedSet:higher(java.lang.Object)": "/**\n* Retrieves the least element greater than the specified element.\n* @param e the element to compare against\n* @return the higher element or null if none exists\n*/",
        "com.google.common.collect.ImmutableSortedSet:emptySet(java.util.Comparator)": "/**\n* Creates an empty sorted set with a specified comparator.\n* @param comparator defines the order of elements\n* @return an empty RegularImmutableSortedSet\n*/",
        "com.google.common.collect.ImmutableSortedSet:orderedBy(java.util.Comparator)": "/**\n* Creates a Builder for ordered elements using the specified comparator.\n* @param comparator logic for element comparison\n* @return Builder instance for ordered elements\n*/",
        "com.google.common.collect.ImmutableSortedSet:reverseOrder()": "/**\n* Creates a Builder with elements in reverse order.\n* @return Builder instance configured for reverse ordering\n*/",
        "com.google.common.collect.ImmutableSortedSet:naturalOrder()": "/**\n* Creates a Builder for natural ordering of comparable elements.\n* @return Builder instance for ordering elements naturally\n*/",
        "com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.lang.Iterable)": "/**\n* Creates an ImmutableSortedSet from elements using the provided comparator.\n* @param comparator the comparator for sorting elements\n* @param elements the source elements to copy\n* @return an ImmutableSortedSet containing the copied elements\n*/",
        "com.google.common.collect.ImmutableSortedSet:descendingIterator()": "/**\n* Returns an unmodifiable iterator for elements in descending order.\n* @return UnmodifiableIterator for reversed elements\n*/",
        "com.google.common.collect.ImmutableSortedSet:copyOf(java.lang.Iterable)": "/**\n* Creates an ImmutableSortedSet from elements using natural ordering.\n* @param elements source elements to copy\n* @return ImmutableSortedSet containing the copied elements\n*/",
        "com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.util.Collection)": "/**\n* Creates an ImmutableSortedSet from a collection using the provided comparator.\n* @param comparator the comparator for sorting elements\n* @param elements the source collection to copy\n* @return an ImmutableSortedSet containing the copied elements\n*/",
        "com.google.common.collect.ImmutableSortedSet:lower(java.lang.Object)": "/**\n* Retrieves the greatest element less than the specified element.\n* @param e the upper bound element\n* @return the greatest element less than e or null if none exists\n*/",
        "com.google.common.collect.ImmutableSortedSet:floor(java.lang.Object)": "/**\n* Retrieves the largest element less than or equal to the specified element.\n* @param e the element to compare\n* @return the floor element or null if none exists\n*/",
        "com.google.common.collect.ImmutableSortedSet:last()": "/**\n* Retrieves the last element in the collection.\n* @return last element of type E\n*/",
        "com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.util.Iterator)": "/**\n* Creates an ImmutableSortedSet from an iterator with a specified comparator.\n* @param comparator comparison logic for elements\n* @param elements iterator of elements to add\n* @return ImmutableSortedSet created from elements\n*/",
        "com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Collection)": "/**\n* Creates an ImmutableSortedSet from a collection using natural ordering.\n* @param elements source collection to copy\n* @return ImmutableSortedSet containing the copied elements\n*/",
        "com.google.common.collect.ImmutableSortedSet:iterator()": "/**\n* Returns an unmodifiable iterator for the collection elements.\n* @return UnmodifiableIterator for the collection\n*/",
        "com.google.common.collect.ImmutableSortedSet:toImmutableSortedSet(java.util.Comparator)": "/**\n* Returns a Collector for creating an ImmutableSortedSet.\n* @param comparator used for sorting elements\n* @return Collector for ImmutableSortedSet\n*/",
        "com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Iterator)": "/**\n* Creates an ImmutableSortedSet from an iterator of elements.\n* @param elements iterator of elements to add\n* @return ImmutableSortedSet created from elements\n*/",
        "com.google.common.collect.ImmutableSortedSet:first()": "/**\n* Retrieves the first element from the collection.\n* @return first element or throws NoSuchElementException if empty\n*/",
        "com.google.common.collect.ImmutableSortedSet:copyOfSorted(java.util.SortedSet)": "/**\n* Creates an ImmutableSortedSet from a sorted set.\n* @param sortedSet input sorted set\n* @return ImmutableSortedSet based on the input\n*/"
    },
    "com.google.common.collect.ContiguousSet": {
        "com.google.common.collect.ContiguousSet:builder()": "/**\n* Creates a new ImmutableSortedSet builder; always throws UnsupportedOperationException.\n* @return ImmutableSortedSet.Builder instance\n*/",
        "com.google.common.collect.ContiguousSet:tailSetImpl(java.lang.Object,boolean)": "/**\n* Returns a view of the portion of this set from the specified element.\n* @param fromElement the element to start the view from\n* @param inclusive true if the view should include fromElement\n* @return a ContiguousSet view starting from fromElement\n*/",
        "com.google.common.collect.ContiguousSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a subset of elements within specified range.\n* @param fromElement starting element, inclusive if fromInclusive is true\n* @param toElement ending element, inclusive if toInclusive is true\n* @return ContiguousSet of elements in the specified range\n*/",
        "com.google.common.collect.ContiguousSet:headSetImpl(java.lang.Object,boolean)": "/**\n* Returns a view of the portion of this set whose elements are less than or equal to the given element.\n* @param toElement the element to compare against\n* @param inclusive true to include the specified element, false otherwise\n* @return a view of the head set\n*/",
        "com.google.common.collect.ContiguousSet:headSet(java.lang.Comparable)": "/**\n* Returns a view of the portion of this set whose elements are less than toElement.\n* @param toElement the upper bound element (exclusive)\n* @return a contiguous set view of elements less than toElement\n*/",
        "com.google.common.collect.ContiguousSet:headSet(java.lang.Comparable,boolean)": "/**\n* Returns a view of the portion of this set whose elements are less than or equal to toElement.\n* @param toElement the upper bound element\n* @param inclusive true if the set includes toElement\n* @return a ContiguousSet view of the specified range\n*/",
        "com.google.common.collect.ContiguousSet:tailSet(java.lang.Comparable)": "/**\n* Returns a view of the portion of this set starting from the specified element.\n* @param fromElement the starting element of the tail set\n* @return a contiguous set view from the specified element\n*/",
        "com.google.common.collect.ContiguousSet:tailSet(java.lang.Comparable,boolean)": "/**\n* Returns a view of the portion of this set from the specified element.\n* @param fromElement the starting element of the tail set\n* @param inclusive true if the tail set includes fromElement\n* @return ContiguousSet view of the tail set\n*/",
        "com.google.common.collect.ContiguousSet:subSet(java.lang.Comparable,java.lang.Comparable)": "/**\n* Returns a subset of elements between fromElement and toElement.\n* @param fromElement starting element (inclusive)\n* @param toElement ending element (exclusive)\n*/",
        "com.google.common.collect.ContiguousSet:subSet(java.lang.Comparable,boolean,java.lang.Comparable,boolean)": "/**\n* Returns a subset of elements between two bounds.\n* @param fromElement starting element, inclusive if fromInclusive is true\n* @param toElement ending element, inclusive if toInclusive is true\n* @return ContiguousSet of elements within the specified range\n*/",
        "com.google.common.collect.ContiguousSet:<init>(com.google.common.collect.DiscreteDomain)": "/**\n* Constructs a ContiguousSet for the specified discrete domain.\n* @param domain the discrete domain for the set elements\n*/",
        "com.google.common.collect.ContiguousSet:headSet(java.lang.Object)": "/**\n* Returns a view of the set elements less than toElement.\n* @param toElement the upper bound element (exclusive)\n* @return a contiguous set view of elements less than toElement\n*/",
        "com.google.common.collect.ContiguousSet:headSet(java.lang.Object,boolean)": "/**\n* Returns a view of the set up to the specified element.\n* @param toElement the upper bound element\n* @param inclusive true if toElement is included\n* @return ContiguousSet view of the specified range\n*/",
        "com.google.common.collect.ContiguousSet:tailSet(java.lang.Object)": "/**\n* Returns a contiguous set starting from the specified element.\n* @param fromElement the starting element of the tail set\n* @return ContiguousSet view from the specified element\n*/",
        "com.google.common.collect.ContiguousSet:tailSet(java.lang.Object,boolean)": "/**\n* Returns a tail set view starting from specified element.\n* @param fromElement starting element of the tail set\n* @param inclusive true if the tail set includes fromElement\n* @return ContiguousSet view of the tail set\n*/",
        "com.google.common.collect.ContiguousSet:subSet(java.lang.Object,java.lang.Object)": "/**\n* Returns a subset of elements between fromElement and toElement.\n* @param fromElement starting element (inclusive)\n* @param toElement ending element (exclusive)\n*/",
        "com.google.common.collect.ContiguousSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a subset of elements between two bounds.\n* @param fromElement starting element, inclusive if fromInclusive is true\n* @param toElement ending element, inclusive if toInclusive is true\n* @return ContiguousSet of elements within the specified range\n*/",
        "com.google.common.collect.ContiguousSet:toString()": "/**\n* Returns string representation of the range object.\n* @return string representation of the range\n*/",
        "com.google.common.collect.ContiguousSet:createDescendingSet()": "/**\n* Creates a descending view of the current set.\n* @return DescendingImmutableSortedSet of the current set\n*/",
        "com.google.common.collect.ContiguousSet:create(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)": "/**\n* Creates a ContiguousSet based on the provided range and domain.\n* @param range the range of elements\n* @param domain the discrete domain for the elements\n* @return a ContiguousSet, empty if no valid range exists\n*/",
        "com.google.common.collect.ContiguousSet:closed(int,int)": "/**\n* Creates a ContiguousSet for a closed range of integers.\n* @param lower inclusive lower bound\n* @param upper inclusive upper bound\n* @return ContiguousSet of integers within the range\n*/",
        "com.google.common.collect.ContiguousSet:closed(long,long)": "/**\n* Creates a ContiguousSet of Longs within a closed range.\n* @param lower the lower bound of the range\n* @param upper the upper bound of the range\n* @return ContiguousSet of Longs for the specified range\n*/",
        "com.google.common.collect.ContiguousSet:closedOpen(int,int)": "/**\n* Creates a ContiguousSet for the closed-open range [lower, upper).\n* @param lower inclusive lower bound\n* @param upper exclusive upper bound\n* @return ContiguousSet of integers within the specified range\n*/",
        "com.google.common.collect.ContiguousSet:closedOpen(long,long)": "/**\n* Creates a ContiguousSet for a closed-open range of long values.\n* @param lower inclusive lower bound\n* @param upper exclusive upper bound\n* @return ContiguousSet of Longs within the specified range\n*/"
    },
    "com.google.common.collect.Cut": {
        "com.google.common.collect.Cut:<init>(java.lang.Comparable)": "/**\n* Sets the endpoint for the Cut instance.\n* @param endpoint the endpoint to be set\n*/",
        "com.google.common.collect.Cut:belowAll()": "/**\n* Returns a Cut object representing the lowest possible value.\n* @return Cut instance representing below all values\n*/",
        "com.google.common.collect.Cut:aboveAll()": "/**\n* Returns a Cut representing the 'above all' concept.\n* @return Cut object representing the upper bound\n*/",
        "com.google.common.collect.Cut:endpoint()": "/**\n* Returns the current endpoint instance.\n* @return C instance of the endpoint\n*/",
        "com.google.common.collect.Cut:canonical(com.google.common.collect.DiscreteDomain)": "/**\n* Returns the canonical Cut for the given discrete domain.\n* @param domain the discrete domain to consider\n* @return the canonical Cut instance\n*/",
        "com.google.common.collect.Cut:compareTo(com.google.common.collect.Cut)": "/**\n* Compares this Cut object with another Cut.\n* @param that Cut object to compare with\n* @return comparison result: positive, negative, or zero\n*/",
        "com.google.common.collect.Cut:aboveValue(java.lang.Comparable)": "/**\n* Creates a Cut above the specified endpoint.\n* @param endpoint the upper limit for the Cut\n* @return AboveValue instance representing the Cut\n*/",
        "com.google.common.collect.Cut:belowValue(java.lang.Comparable)": "/**\n* Creates a Cut instance representing a value below the specified endpoint.\n* @param endpoint the value below which the Cut is defined; must not be null\n* @return Cut object representing the below value\n*/",
        "com.google.common.collect.Cut:equals(java.lang.Object)": "/**\n* Compares this Cut object with another for equality.\n* @param obj object to compare\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.collect.Cut$AboveAll": {
        "com.google.common.collect.Cut$AboveAll:endpoint()": "/**\n* Throws an exception indicating an unbounded range.\n* @return always throws IllegalStateException\n*/",
        "com.google.common.collect.Cut$AboveAll:typeAsLowerBound()": "/**\n* Throws AssertionError indicating unreachable code for lower bound type.\n* @return never returns a value\n*/",
        "com.google.common.collect.Cut$AboveAll:typeAsUpperBound()": "/**\n* Throws IllegalStateException when accessing upper bound type.\n* @return never returns a value\n*/",
        "com.google.common.collect.Cut$AboveAll:withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)": "/**\n* Unreachable method for handling lower bound type.\n* @param boundType specifies the bound type\n* @param domain the discrete domain of comparable types\n* @throws AssertionError if called\n*/",
        "com.google.common.collect.Cut$AboveAll:withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)": "/**\n* Throws IllegalStateException; not implemented for upper bound type.\n* @param boundType specifies the type of bound\n* @param domain the discrete domain of comparable values\n* @return never returns a value\n*/",
        "com.google.common.collect.Cut$AboveAll:describeAsLowerBound(java.lang.StringBuilder)": "/**\n* Throws an AssertionError when called; no implementation provided.\n* @param sb StringBuilder to describe lower bound (unused)\n*/",
        "com.google.common.collect.Cut$AboveAll:describeAsUpperBound(java.lang.StringBuilder)": "/**\n* Appends the upper bound symbol \"+∞)\" to the provided StringBuilder.\n* @param sb StringBuilder to append the symbol to\n*/",
        "com.google.common.collect.Cut$AboveAll:leastValueAbove(com.google.common.collect.DiscreteDomain)": "/**\n* Throws an AssertionError; not implemented for least value above in the domain.\n* @param domain the discrete domain to evaluate\n* @return throws AssertionError\n*/",
        "com.google.common.collect.Cut$AboveAll:hashCode()": "/**\n* Returns the hash code of the object based on its identity.\n* @return int hash code representing the object's identity\n*/",
        "com.google.common.collect.Cut$AboveAll:compareTo(com.google.common.collect.Cut)": "/**\n* Compares this Cut object with another for ordering.\n* @param o the Cut object to compare\n* @return 0 if equal, otherwise 1\n*/",
        "com.google.common.collect.Cut$AboveAll:isLessThan(java.lang.Comparable)": "/**\n* Compares this object to a given value for order.\n* @param value the value to compare with\n* @return false, indicating this object is not less than the value\n*/",
        "com.google.common.collect.Cut$AboveAll:greatestValueBelow(com.google.common.collect.DiscreteDomain)": "/**\n* Retrieves the maximum value from the specified domain.\n* @param domain the discrete domain to search in\n* @return maximum Comparable value or throws NoSuchElementException\n*/",
        "com.google.common.collect.Cut$AboveAll:<init>()": "/**\n* Constructs an AboveAll instance with an empty string endpoint.\n*/"
    },
    "com.google.common.collect.Cut$AboveValue": {
        "com.google.common.collect.Cut$AboveValue:describeAsLowerBound(java.lang.StringBuilder)": "/**\n* Appends endpoint as a lower bound description to the StringBuilder.\n* @param sb StringBuilder to append the description\n*/",
        "com.google.common.collect.Cut$AboveValue:describeAsUpperBound(java.lang.StringBuilder)": "/**\n* Appends the endpoint to StringBuilder as an upper bound description.\n* @param sb StringBuilder to append the description\n*/",
        "com.google.common.collect.Cut$AboveValue:leastValueAbove(com.google.common.collect.DiscreteDomain)": "/**\n* Retrieves the least value above the specified endpoint in the given domain.\n* @param domain the discrete domain to search within\n* @return the least value above endpoint or null if none exists\n*/",
        "com.google.common.collect.Cut$AboveValue:hashCode()": "/**\n* Returns the bitwise negation of the hash code of the endpoint.\n* @return negated hash code of the endpoint\n*/",
        "com.google.common.collect.Cut$AboveValue:toString()": "/**\n* Returns a string representation of the endpoint.\n* @return formatted string of the endpoint with slashes\n*/",
        "com.google.common.collect.Cut$AboveValue:greatestValueBelow(com.google.common.collect.DiscreteDomain)": "/**\n* Returns the greatest value below the endpoint in the specified domain.\n* @param domain the discrete domain to consider\n* @return the greatest value below the endpoint\n*/",
        "com.google.common.collect.Cut$AboveValue:typeAsLowerBound()": "/**\n* Returns the lower bound type as OPEN.\n* @return BoundType representing the lower bound\n*/",
        "com.google.common.collect.Cut$AboveValue:typeAsUpperBound()": "/**\n* Returns the upper bound type as CLOSED.\n* @return BoundType representing the upper bound\n*/",
        "com.google.common.collect.Cut$AboveValue:isLessThan(java.lang.Comparable)": "/**\n* Checks if the current endpoint is less than the given value.\n* @param value the value to compare against\n* @return true if endpoint < value, otherwise false\n*/",
        "com.google.common.collect.Cut$AboveValue:<init>(java.lang.Comparable)": "/**** \n* Constructs AboveValue with a non-null endpoint.\n* @param endpoint the endpoint for the AboveValue instance\n*/",
        "com.google.common.collect.Cut$AboveValue:withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)": "/**\n* Adjusts the Cut object based on the lower bound type.\n* @param boundType type of the lower bound (OPEN or CLOSED)\n* @param domain discrete domain for calculating next value\n* @return modified Cut instance based on bound type\n*/",
        "com.google.common.collect.Cut$AboveValue:withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)": "/**\n* Returns a Cut with the specified upper bound type.\n* @param boundType type of the bound (OPEN or CLOSED)\n* @param domain discrete domain for calculating next value\n*/",
        "com.google.common.collect.Cut$AboveValue:canonical(com.google.common.collect.DiscreteDomain)": "/**\n* Returns the canonical Cut for the given domain.\n* @param domain the discrete domain to search within\n* @return Cut object based on the least value or above all\n*/"
    },
    "com.google.common.collect.Cut$BelowAll": {
        "com.google.common.collect.Cut$BelowAll:endpoint()": "/**\n* Throws an exception indicating an unbounded range.\n* @return always throws IllegalStateException\n*/",
        "com.google.common.collect.Cut$BelowAll:typeAsLowerBound()": "/**\n* Throws IllegalStateException when accessing lower bound type.\n* @return never returns a value\n*/",
        "com.google.common.collect.Cut$BelowAll:typeAsUpperBound()": "/**\n* Throws an AssertionError indicating unreachable code.\n* @return never returns a value\n*/",
        "com.google.common.collect.Cut$BelowAll:withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)": "/**\n* Throws IllegalStateException when called; no implementation provided.\n* @param boundType type of lower bound\n* @param domain discrete domain of comparable types\n* @return none\n*/",
        "com.google.common.collect.Cut$BelowAll:withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)": "/**\n* Throws an AssertionError indicating unreachable code.\n* @param boundType specifies the type of bound\n* @param domain the discrete domain of comparable types\n* @return never returns a value\n*/",
        "com.google.common.collect.Cut$BelowAll:describeAsLowerBound(java.lang.StringBuilder)": "/**\n* Appends the string representation of negative infinity to the StringBuilder.\n* @param sb the StringBuilder to append to\n*/",
        "com.google.common.collect.Cut$BelowAll:describeAsUpperBound(java.lang.StringBuilder)": "/**\n* Throws an AssertionError to indicate method not implemented.\n* @param sb StringBuilder for output description (unused)\n*/",
        "com.google.common.collect.Cut$BelowAll:greatestValueBelow(com.google.common.collect.DiscreteDomain)": "/**\n* Throws an AssertionError; not implemented for greatest value below in domain.\n* @param domain the discrete domain of comparable values\n* @return always throws an AssertionError\n*/",
        "com.google.common.collect.Cut$BelowAll:hashCode()": "/**\n* Returns the hash code based on the object's identity.\n* @return unique hash code for the current object\n*/",
        "com.google.common.collect.Cut$BelowAll:compareTo(com.google.common.collect.Cut)": "/**\n* Compares this Cut object with another for order.\n* @param o the Cut object to compare with\n* @return 0 if equal, otherwise -1\n*/",
        "com.google.common.collect.Cut$BelowAll:isLessThan(java.lang.Comparable)": "/**\n* Compares this object with a given value for order.\n* @param value the value to compare with\n* @return true if this object is less than the value\n*/",
        "com.google.common.collect.Cut$BelowAll:leastValueAbove(com.google.common.collect.DiscreteDomain)": "/**\n* Retrieves the least value above the specified domain.\n* @param domain the discrete domain of comparable values\n* @return the minimum value in the domain\n*/",
        "com.google.common.collect.Cut$BelowAll:<init>()": "/**\n* Constructs a BelowAll instance with a dummy endpoint.\n* This class overrides methods using the endpoint field.\n*/",
        "com.google.common.collect.Cut$BelowAll:canonical(com.google.common.collect.DiscreteDomain)": "/**\n* Returns a Cut representing the minimum value in the domain or itself if empty.\n* @param domain the discrete domain of comparable values\n* @return Cut object for the minimum value or this Cut if no min exists\n*/"
    },
    "com.google.common.collect.Cut$BelowValue": {
        "com.google.common.collect.Cut$BelowValue:describeAsLowerBound(java.lang.StringBuilder)": "/**\n* Appends lower bound description to StringBuilder.\n* @param sb StringBuilder to append the description\n*/",
        "com.google.common.collect.Cut$BelowValue:describeAsUpperBound(java.lang.StringBuilder)": "/**\n* Appends endpoint description as upper bound to StringBuilder.\n* @param sb StringBuilder to append the description\n*/",
        "com.google.common.collect.Cut$BelowValue:greatestValueBelow(com.google.common.collect.DiscreteDomain)": "/**\n* Retrieves the greatest value below the endpoint in the given domain.\n* @param domain the discrete domain to search within\n* @return the greatest value below endpoint or null if none exists\n*/",
        "com.google.common.collect.Cut$BelowValue:hashCode()": "/**\n* Returns the hash code for the endpoint.\n* @return integer hash code of the endpoint\n*/",
        "com.google.common.collect.Cut$BelowValue:toString()": "/**\n* Returns a string representation of the endpoint.\n* @return formatted endpoint string with leading and trailing slashes\n*/",
        "com.google.common.collect.Cut$BelowValue:leastValueAbove(com.google.common.collect.DiscreteDomain)": "/**\n* Returns the least value above the specified domain.\n* @param domain the discrete domain to check against\n* @return the least value above the domain\n*/",
        "com.google.common.collect.Cut$BelowValue:typeAsLowerBound()": "/**\n* Returns the lower bound type of the interval.\n* @return BoundType.CLOSED indicating a closed lower bound\n*/",
        "com.google.common.collect.Cut$BelowValue:typeAsUpperBound()": "/**\n* Returns the upper bound type as OPEN.\n* @return BoundType representing the upper bound\n*/",
        "com.google.common.collect.Cut$BelowValue:isLessThan(java.lang.Comparable)": "/**\n* Checks if the current endpoint is less than or equal to the given value.\n* @param value the value to compare with the endpoint\n* @return true if endpoint <= value, otherwise false\n*/",
        "com.google.common.collect.Cut$BelowValue:<init>(java.lang.Comparable)": "/**\n* Constructs a BelowValue instance with a non-null endpoint.\n* @param endpoint the endpoint to be set; must not be null\n*/",
        "com.google.common.collect.Cut$BelowValue:withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)": "/**\n* Returns a Cut with specified lower bound type.\n* @param boundType type of the lower bound (CLOSED or OPEN)\n* @param domain discrete domain for value retrieval\n* @return Cut instance based on the bound type\n*/",
        "com.google.common.collect.Cut$BelowValue:withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)": "/**\n* Returns a Cut with upper bound based on specified BoundType and domain.\n* @param boundType type of bound (CLOSED or OPEN)\n* @param domain discrete domain for the bound\n* @return Cut object representing the upper bound\n*/"
    },
    "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap": {
        "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:<init>(int)": "/**\n* Constructs an ImmutableArrayMap with the specified size.\n* @param size the number of elements in the map\n*/",
        "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:isFull()": "/**\n* Checks if the collection is full by comparing size and key count.\n* @return true if full, false otherwise\n*/",
        "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:get(java.lang.Object)": "/**\n* Retrieves the value associated with the specified key.\n* @param key the key whose associated value is to be returned\n* @return the value associated with the key or null if not found\n*/",
        "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:entryIterator()": "/**\n* Iterates over entries, returning non-null key-value pairs.\n* @return UnmodifiableIterator of key-value entries\n*/",
        "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:size()": "/**\n* Returns the current size of the collection.\n* @return the number of elements in the collection\n*/",
        "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:getKey(int)": "/**\n* Retrieves the key at the specified index.\n* @param index position of the key in the list\n* @return key of type K or null if index is out of bounds\n*/",
        "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:createKeySet()": "/**\n* Creates an immutable set of keys based on collection fullness.\n* @return ImmutableSet of keys from the map or super method\n*/"
    },
    "com.google.common.collect.DenseImmutableTable$Column": {
        "com.google.common.collect.DenseImmutableTable$Column:keyToIndex()": "/**\n* Returns a mapping of row keys to their corresponding indices.\n* @return ImmutableMap of row keys and their indices\n*/",
        "com.google.common.collect.DenseImmutableTable$Column:getValue(int)": "/**\n* Retrieves the value at the specified key index.\n* @param keyIndex index of the key\n* @return value at the key index or null if not present\n*/",
        "com.google.common.collect.DenseImmutableTable$Column:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return true, as this method always returns true\n*/"
    },
    "com.google.common.collect.DenseImmutableTable$ColumnMap": {
        "com.google.common.collect.DenseImmutableTable$ColumnMap:keyToIndex()": "/**\n* Returns a map of column keys to their corresponding indices.\n* @return ImmutableMap of column keys and their index values\n*/",
        "com.google.common.collect.DenseImmutableTable$ColumnMap:getValue(int)": "/**\n* Retrieves an immutable map based on the specified key index.\n* @param keyIndex index of the column to retrieve\n* @return ImmutableMap corresponding to the column\n*/",
        "com.google.common.collect.DenseImmutableTable$ColumnMap:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return false, as this view is not partial\n*/"
    },
    "com.google.common.collect.DenseImmutableTable$Row": {
        "com.google.common.collect.DenseImmutableTable$Row:keyToIndex()": "/**\n* Returns a map of column keys to their corresponding indices.\n* @return ImmutableMap of column keys and their indices\n*/",
        "com.google.common.collect.DenseImmutableTable$Row:getValue(int)": "/**\n* Retrieves the value at the specified key index in the current row.\n* @param keyIndex index of the value to retrieve\n* @return value at keyIndex or null if not present\n*/",
        "com.google.common.collect.DenseImmutableTable$Row:isPartialView()": "/**\n* Indicates if the current view is a partial view.\n* @return true, as this method always returns true\n*/"
    },
    "com.google.common.collect.DenseImmutableTable$RowMap": {
        "com.google.common.collect.DenseImmutableTable$RowMap:keyToIndex()": "/**\n* Retrieves a mapping of row keys to their corresponding indices.\n* @return ImmutableMap of row keys and their indices\n*/",
        "com.google.common.collect.DenseImmutableTable$RowMap:getValue(int)": "/**\n* Retrieves an immutable map for the specified key index.\n* @param keyIndex index of the key to retrieve the map for\n* @return ImmutableMap associated with the key index\n*/",
        "com.google.common.collect.DenseImmutableTable$RowMap:isPartialView()": "/**\n* Indicates if the view is partial.\n* @return false, as this view is not partial\n*/"
    },
    "com.google.common.collect.DenseImmutableTable": {
        "com.google.common.collect.DenseImmutableTable:get(java.lang.Object,java.lang.Object)": "/**\n* Retrieves a value from a 2D array by row and column keys.\n* @param rowKey key for the row\n* @param columnKey key for the column\n* @return value at specified keys or null if not found\n*/",
        "com.google.common.collect.DenseImmutableTable:getCell(int)": "/**\n* Retrieves a cell by its index.\n* @param index position of the cell\n* @return Cell object containing row key, column key, and value\n*/",
        "com.google.common.collect.DenseImmutableTable:getValue(int)": "/**\n* Retrieves the value at the specified index.\n* @param index position in the values array\n* @return value at the given index, never null\n*/",
        "com.google.common.collect.DenseImmutableTable:size()": "/**\n* Returns the number of elements in the cellRowIndices array.\n* @return the size of the cellRowIndices array\n*/",
        "com.google.common.collect.DenseImmutableTable:columnMap()": "/**\n* Returns an immutable map of column mappings.\n* @return ImmutableMap of columns to their corresponding row-value maps\n*/",
        "com.google.common.collect.DenseImmutableTable:rowMap()": "/**\n* Returns an immutable view of the row map.\n* @return ImmutableMap of rows to column-value maps\n*/",
        "com.google.common.collect.DenseImmutableTable:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)": "/**\n* Constructs a DenseImmutableTable from cells, row, and column sets.\n* @param cellList list of cells to populate the table\n* @param rowSpace set of unique row keys\n* @param columnSpace set of unique column keys\n*/"
    },
    "com.google.common.collect.ImmutableSortedMultiset": {
        "com.google.common.collect.ImmutableSortedMultiset:<init>()": "/**\n* Constructs an empty ImmutableSortedMultiset.\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:pollFirstEntry()": "/**\n* Always throws UnsupportedOperationException; method is deprecated and not callable.\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:pollLastEntry()": "/**\n* Always throws UnsupportedOperationException; method is deprecated and should not be called.\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; throws exception to enforce SerializedForm usage.\n* @param stream the ObjectInputStream for deserialization\n* @throws InvalidObjectException if called\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:toImmutableSortedMultiset(java.util.Comparator,java.util.function.Function,java.util.function.ToIntFunction)": "/**\n* Collects elements into an immutable sorted multiset.\n* @param comparator for ordering elements\n* @param elementFunction to transform input to elements\n* @param countFunction to determine element counts\n* @return ImmutableSortedMultiset of transformed elements\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:comparator()": "/**\n* Returns the comparator for sorting elements.\n* @return Comparator for elements of type E\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:writeReplace()": "/**\n* Prepares object for serialization by returning its SerializedForm.\n* @return SerializedForm instance representing the object\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:toImmutableSortedMultiset(java.util.Comparator)": "/**\n* Creates a collector for an immutable sorted multiset.\n* @param comparator for ordering elements\n* @return Collector for collecting elements into an ImmutableSortedMultiset\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Returns a sub-multiset within specified bounds.\n* @param lowerBound lower boundary element\n* @param upperBound upper boundary element\n* @return ImmutableSortedMultiset within the bounds\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:emptyMultiset(java.util.Comparator)": "/**\n* Creates an empty sorted multiset based on the provided comparator.\n* @param comparator defines the order of elements\n* @return an empty ImmutableSortedMultiset\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:descendingMultiset()": "/**\n* Retrieves a descending view of the multiset.\n* @return ImmutableSortedMultiset in descending order or empty if original is empty\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:orderedBy(java.util.Comparator)": "/**\n* Creates a Builder for ordered elements using the specified comparator.\n* @param comparator defines the order of elements\n* @return a Builder instance for the specified order\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:reverseOrder()": "/**\n* Creates a Builder for elements in reverse natural order.\n* @return Builder instance for reverse ordering of comparable elements\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:naturalOrder()": "/**\n* Creates a Builder with natural ordering for comparable elements.\n* @return Builder instance for element ordering\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:copyOfSortedEntries(java.util.Comparator,java.util.Collection)": "/**\n* Creates an ImmutableSortedMultiset from sorted entries.\n* @param comparator defines the order of elements\n* @param entries collection of elements with counts\n* @return ImmutableSortedMultiset built from entries\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Comparator,java.lang.Iterable)": "/**\n* Creates an ImmutableSortedMultiset from elements with a specified comparator.\n* @param comparator defines the order of elements\n* @param elements source of elements for the multiset\n* @return ImmutableSortedMultiset built from elements\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:copyOfSorted(com.google.common.collect.SortedMultiset)": "/**\n* Creates an ImmutableSortedMultiset from a SortedMultiset.\n* @param sortedMultiset input sorted multiset\n* @return ImmutableSortedMultiset built from sorted entries\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:copyOf(java.lang.Iterable)": "/**\n* Creates an ImmutableSortedMultiset from an iterable of elements.\n* @param elements source of elements for the multiset\n* @return ImmutableSortedMultiset built from elements\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Comparator,java.util.Iterator)": "/**\n* Creates an ImmutableSortedMultiset from given elements and comparator.\n* @param comparator element ordering comparator\n* @param elements iterator of elements to add\n* @return ImmutableSortedMultiset created from elements\n*/",
        "com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Iterator)": "/**\n* Creates an ImmutableSortedMultiset from an iterator of elements.\n* @param elements iterator of elements to add\n* @return ImmutableSortedMultiset created from elements\n*/"
    },
    "com.google.common.collect.DescendingImmutableSortedMultiset": {
        "com.google.common.collect.DescendingImmutableSortedMultiset:count(java.lang.Object)": "/**\n* Counts occurrences of the specified element.\n* @param element the object to count occurrences of\n* @return the number of occurrences of the element\n*/",
        "com.google.common.collect.DescendingImmutableSortedMultiset:firstEntry()": "/**\n* Retrieves the first entry in the collection.\n* @return the first Entry or null if empty\n*/",
        "com.google.common.collect.DescendingImmutableSortedMultiset:lastEntry()": "/**\n* Retrieves the last entry in the collection.\n* @return the last Entry object or null if empty\n*/",
        "com.google.common.collect.DescendingImmutableSortedMultiset:size()": "/**\n* Returns the number of elements in the collection.\n* @return the size of the collection as an integer\n*/",
        "com.google.common.collect.DescendingImmutableSortedMultiset:isPartialView()": "/**\n* Checks if the current view is a partial view.\n* @return true if it is a partial view, otherwise false\n*/",
        "com.google.common.collect.DescendingImmutableSortedMultiset:descendingMultiset()": "/**\n* Returns the multiset in descending order.\n* @return ImmutableSortedMultiset of elements in reverse order\n*/",
        "com.google.common.collect.DescendingImmutableSortedMultiset:<init>(com.google.common.collect.ImmutableSortedMultiset)": "/**\n* Constructs a DescendingImmutableSortedMultiset from a forward sorted multiset.\n* @param forward the ImmutableSortedMultiset to reverse\n*/",
        "com.google.common.collect.DescendingImmutableSortedMultiset:elementSet()": "/**\n* Returns an immutable sorted set of elements in descending order.\n* @return ImmutableSortedSet of elements\n*/",
        "com.google.common.collect.DescendingImmutableSortedMultiset:getEntry(int)": "/**\n* Retrieves the entry at the specified index from a reversed entry set.\n* @param index the position of the entry to retrieve\n* @return Entry object at the given index\n*/",
        "com.google.common.collect.DescendingImmutableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Retrieves a descending multiset up to the specified upper bound.\n* @param upperBound the upper limit for the multiset\n* @param boundType type of bound (inclusive/exclusive)\n* @return ImmutableSortedMultiset in descending order\n*/",
        "com.google.common.collect.DescendingImmutableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Returns a descending multiset starting from a lower bound.\n* @param lowerBound the lower bound element\n* @param boundType type of bound (inclusive/exclusive)\n* @return Descending ImmutableSortedMultiset\n*/"
    },
    "com.google.common.collect.DescendingImmutableSortedSet": {
        "com.google.common.collect.DescendingImmutableSortedSet:contains(java.lang.Object)": "/**\n* Checks if the specified object is contained in the collection.\n* @param object the object to check for presence\n* @return true if the object is found, false otherwise\n*/",
        "com.google.common.collect.DescendingImmutableSortedSet:size()": "/**\n* Returns the number of elements in the collection.\n* @return the size of the collection as an integer\n*/",
        "com.google.common.collect.DescendingImmutableSortedSet:createDescendingSet()": "/**\n* Throws an AssertionError; method should not be invoked.\n* @return never returns a value\n*/",
        "com.google.common.collect.DescendingImmutableSortedSet:isPartialView()": "/**\n* Checks if the current view is a partial view.\n* @return true if it's a partial view, false otherwise\n*/",
        "com.google.common.collect.DescendingImmutableSortedSet:descendingSet()": "/**\n* Returns an immutable sorted set in descending order.\n* @return ImmutableSortedSet of elements in reverse order\n*/",
        "com.google.common.collect.DescendingImmutableSortedSet:indexOf(java.lang.Object)": "/**\n* Returns the index of target in reverse order.\n* @param target object to find; can be null\n* @return index of target or -1 if not found\n*/",
        "com.google.common.collect.DescendingImmutableSortedSet:tailSetImpl(java.lang.Object,boolean)": "/**\n* Returns a view of the sorted set from a specified element.\n* @param fromElement the lower bound element\n* @param inclusive true if the lower bound is included\n* @return ImmutableSortedSet from the specified element onwards\n*/",
        "com.google.common.collect.DescendingImmutableSortedSet:headSetImpl(java.lang.Object,boolean)": "/**\n* Returns a descending view of the head set up to a specified element.\n* @param toElement the element to limit the head set\n* @param inclusive whether to include the toElement in the head set\n* @return ImmutableSortedSet in descending order\n*/",
        "com.google.common.collect.DescendingImmutableSortedSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a descending subset of sorted elements within specified bounds.\n* @param fromElement starting element of the subset\n* @param fromInclusive true if fromElement is included\n* @param toElement ending element of the subset\n* @param toInclusive true if toElement is included\n* @return ImmutableSortedSet of elements in descending order\n*/",
        "com.google.common.collect.DescendingImmutableSortedSet:floor(java.lang.Object)": "/**\n* Retrieves the greatest element less than or equal to the given element.\n* @param element the element to compare\n* @return the floor element or null if none exists\n*/",
        "com.google.common.collect.DescendingImmutableSortedSet:lower(java.lang.Object)": "/**\n* Retrieves the least element less than the specified element.\n* @param element the element to compare against\n* @return the lower element or null if none exists\n*/",
        "com.google.common.collect.DescendingImmutableSortedSet:<init>(com.google.common.collect.ImmutableSortedSet)": "/**\n* Constructs a descending immutable sorted set from a given sorted set.\n* @param forward the original ImmutableSortedSet to reverse\n*/",
        "com.google.common.collect.DescendingImmutableSortedSet:iterator()": "/**\n* Returns an unmodifiable iterator for elements in descending order.\n* @return UnmodifiableIterator for reversed elements\n*/",
        "com.google.common.collect.DescendingImmutableSortedSet:higher(java.lang.Object)": "/**\n* Retrieves the least element greater than the specified element.\n* @param element the reference element\n* @return the least element greater than element or null if none exists\n*/",
        "com.google.common.collect.DescendingImmutableSortedSet:ceiling(java.lang.Object)": "/**\n* Retrieves the smallest element greater than or equal to the specified element.\n* @param element the element to compare\n* @return the ceiling element or null if none exists\n*/",
        "com.google.common.collect.DescendingImmutableSortedSet:descendingIterator()": "/**\n* Returns an unmodifiable iterator for elements in descending order.\n* @return UnmodifiableIterator for the collection elements\n*/"
    },
    "com.google.common.collect.DescendingMultiset": {
        "com.google.common.collect.DescendingMultiset:pollFirstEntry()": "/**\n* Retrieves and removes the first entry from the multiset.\n* @return Entry<E> or null if the multiset is empty\n*/",
        "com.google.common.collect.DescendingMultiset:pollLastEntry()": "/**\n* Retrieves and removes the last entry from the multiset.\n* @return Entry object or null if multiset is empty\n*/",
        "com.google.common.collect.DescendingMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Retrieves a descending multiset of elements less than a specified element.\n* @param toElement the upper bound element\n* @param boundType specifies inclusion/exclusion of the bound\n* @return a SortedMultiset containing elements below the specified bound\n*/",
        "com.google.common.collect.DescendingMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Returns a descending view of the sub-multiset between specified elements.\n* @param fromElement lower bound element\n* @param fromBoundType type of lower bound (inclusive/exclusive)\n* @param toElement upper bound element\n* @param toBoundType type of upper bound (inclusive/exclusive)\n* @return descending SortedMultiset within the specified bounds\n*/",
        "com.google.common.collect.DescendingMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Returns a tail multiset starting from the specified element.\n* @param fromElement the starting element\n* @param boundType specifies the inclusivity of the starting element\n* @return SortedMultiset from the specified element onward\n*/",
        "com.google.common.collect.DescendingMultiset:delegate()": "/**\n* Returns the delegated multiset instance.\n* @return Multiset<E> instance from forwardMultiset()\n*/",
        "com.google.common.collect.DescendingMultiset:descendingMultiset()": "/**\n* Returns a descending view of the multiset.\n* @return SortedMultiset in descending order\n*/",
        "com.google.common.collect.DescendingMultiset:firstEntry()": "/**\n* Retrieves the first entry from the multiset.\n* @return Entry object or null if multiset is empty\n*/",
        "com.google.common.collect.DescendingMultiset:lastEntry()": "/**\n* Retrieves the last entry in the multiset.\n* @return Entry<E> object or null if multiset is empty\n*/",
        "com.google.common.collect.DescendingMultiset:createEntrySet()": "/**\n* Creates a set view of the entries in the multiset.\n* @return Set of Entry objects representing the multiset entries\n*/",
        "com.google.common.collect.DescendingMultiset:toArray()": "/**\n* Converts the collection to an array.\n* @return an array of objects or null if the collection is empty\n*/",
        "com.google.common.collect.DescendingMultiset:toArray(java.lang.Object[])": "/**\n* Converts collection to an array of specified type.\n* @param array the array to fill with collection elements\n* @return an array containing the collection elements\n*/",
        "com.google.common.collect.DescendingMultiset:entrySet()": "/**\n* Returns a set view of the entries in the multiset.\n* @return Set of Entry objects, creating one if not already initialized\n*/",
        "com.google.common.collect.DescendingMultiset:toString()": "/**\n* Returns a string representation of the multiset entries.\n* @return String of entry set representation\n*/",
        "com.google.common.collect.DescendingMultiset:iterator()": "/**\n* Returns an iterator over the elements in this multiset.\n* @return Iterator for the multiset entries\n*/",
        "com.google.common.collect.DescendingMultiset:elementSet()": "/**\n* Retrieves a NavigableSet of elements, initializing if necessary.\n* @return NavigableSet of elements\n*/",
        "com.google.common.collect.DescendingMultiset:comparator()": "/**\n* Returns a Comparator for the elements, creating one if not initialized.\n* @return Comparator for elements, or creates using forwardMultiset if null\n*/"
    },
    "com.google.common.collect.DiscreteDomain$BigIntegerDomain": {
        "com.google.common.collect.DiscreteDomain$BigIntegerDomain:<init>()": "/**\n* Constructs a BigIntegerDomain instance with a true flag.\n*/",
        "com.google.common.collect.DiscreteDomain$BigIntegerDomain:next(java.math.BigInteger)": "/**\n* Increments the given BigInteger value by one.\n* @param value the BigInteger to be incremented\n* @return the incremented BigInteger\n*/",
        "com.google.common.collect.DiscreteDomain$BigIntegerDomain:previous(java.math.BigInteger)": "/**\n* Returns the previous integer of the given value.\n* @param value the current BigInteger\n* @return BigInteger representing value - 1\n*/",
        "com.google.common.collect.DiscreteDomain$BigIntegerDomain:distance(java.math.BigInteger,java.math.BigInteger)": "/**\n* Calculates distance between two BigIntegers, clamped within MIN_LONG and MAX_LONG.\n* @param start starting value\n* @param end ending value\n* @return distance as long, clamped to specified limits\n*/",
        "com.google.common.collect.DiscreteDomain$BigIntegerDomain:offset(java.math.BigInteger,long)": "/**\n* Offsets a BigInteger by a non-negative distance.\n* @param origin the initial BigInteger value\n* @param distance the non-negative distance to add\n* @return the new BigInteger after offsetting\n*/"
    },
    "com.google.common.collect.DiscreteDomain$IntegerDomain": {
        "com.google.common.collect.DiscreteDomain$IntegerDomain:<init>()": "/**\n* Constructs an IntegerDomain instance with a default valid state.\n*/",
        "com.google.common.collect.DiscreteDomain$IntegerDomain:next(java.lang.Integer)": "/**\n* Returns the next integer after the given value.\n* @param value the current integer value\n* @return next integer or null if value is Integer.MAX_VALUE\n*/",
        "com.google.common.collect.DiscreteDomain$IntegerDomain:previous(java.lang.Integer)": "/**\n* Returns the previous integer value or null if input is Integer.MIN_VALUE.\n* @param value the current integer value\n* @return previous integer or null if value is Integer.MIN_VALUE\n*/",
        "com.google.common.collect.DiscreteDomain$IntegerDomain:distance(java.lang.Integer,java.lang.Integer)": "/**\n* Calculates the distance between two integers.\n* @param start the starting integer\n* @param end the ending integer\n* @return the distance as a long value\n*/",
        "com.google.common.collect.DiscreteDomain$IntegerDomain:minValue()": "/**\n* Returns the minimum integer value.\n* @return Integer.MIN_VALUE constant\n*/",
        "com.google.common.collect.DiscreteDomain$IntegerDomain:maxValue()": "/**\n* Returns the maximum value of an Integer.\n* @return Integer.MAX_VALUE, the largest possible Integer value\n*/",
        "com.google.common.collect.DiscreteDomain$IntegerDomain:offset(java.lang.Integer,long)": "/**\n* Calculates new offset by adding distance to origin.\n* @param origin starting point, must be non-null\n* @param distance value to add, must be non-negative\n* @return new offset as Integer\n*/"
    },
    "com.google.common.collect.DiscreteDomain$LongDomain": {
        "com.google.common.collect.DiscreteDomain$LongDomain:<init>()": "/**\n* Initializes LongDomain with a true flag for super constructor.\n*/",
        "com.google.common.collect.DiscreteDomain$LongDomain:next(java.lang.Long)": "/**\n* Returns the next Long value or null if at Long.MAX_VALUE.\n* @param value current Long value\n* @return next Long or null if value is Long.MAX_VALUE\n*/",
        "com.google.common.collect.DiscreteDomain$LongDomain:previous(java.lang.Long)": "/**\n* Returns the previous long value or null if input is Long.MIN_VALUE.\n* @param value the current long value\n* @return previous long value or null if value is Long.MIN_VALUE\n*/",
        "com.google.common.collect.DiscreteDomain$LongDomain:distance(java.lang.Long,java.lang.Long)": "/**\n* Calculates the distance between two Long values.\n* @param start the starting point\n* @param end the ending point\n* @return the distance or Long.MAX_VALUE/Long.MIN_VALUE on overflow/underflow\n*/",
        "com.google.common.collect.DiscreteDomain$LongDomain:minValue()": "/**\n* Returns the minimum possible value of a long.\n* @return Long.MIN_VALUE constant\n*/",
        "com.google.common.collect.DiscreteDomain$LongDomain:maxValue()": "/**\n* Returns the maximum value of a Long.\n* @return Long.MAX_VALUE constant\n*/",
        "com.google.common.collect.DiscreteDomain$LongDomain:offset(java.lang.Long,long)": "/**\n* Calculates new offset from origin by adding distance.\n* @param origin starting point\n* @param distance amount to add, must be non-negative\n* @return new offset value\n*/"
    },
    "com.google.common.collect.EmptyContiguousSet$SerializedForm": {
        "com.google.common.collect.EmptyContiguousSet$SerializedForm:<init>(com.google.common.collect.DiscreteDomain)": "/**\n* Initializes SerializedForm with a specified discrete domain.\n* @param domain the discrete domain to be associated with this form\n*/",
        "com.google.common.collect.EmptyContiguousSet$SerializedForm:readResolve()": "/**\n* Resolves serialization by returning an empty contiguous set for the specified domain.\n* @return EmptyContiguousSet instance initialized with the domain\n*/"
    },
    "com.google.common.collect.EmptyContiguousSet": {
        "com.google.common.collect.EmptyContiguousSet:first()": "/**\n* Retrieves the first element; throws exception if no elements exist.\n* @return the first element of type C\n*/",
        "com.google.common.collect.EmptyContiguousSet:last()": "/**\n* Throws NoSuchElementException when attempting to access the last element.\n* @return does not return a value\n*/",
        "com.google.common.collect.EmptyContiguousSet:range()": "/**\n* Throws NoSuchElementException indicating no range is available.\n* @return never returns a value, always throws an exception\n*/",
        "com.google.common.collect.EmptyContiguousSet:range(com.google.common.collect.BoundType,com.google.common.collect.BoundType)": "/**\n* Throws NoSuchElementException for range bounds.\n* @param lowerBoundType type of the lower bound\n* @param upperBoundType type of the upper bound\n*/",
        "com.google.common.collect.EmptyContiguousSet:equals(java.lang.Object)": "/**\n* Checks if the given object is an empty Set.\n* @param object the object to compare\n* @return true if object is an empty Set; false otherwise\n*/",
        "com.google.common.collect.EmptyContiguousSet:writeReplace()": "/**\n* Prepares the object for serialization by returning its SerializedForm.\n* @return SerializedForm containing the domain data\n*/",
        "com.google.common.collect.EmptyContiguousSet:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization and throws an exception.\n* @param stream the ObjectInputStream for reading the object\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.collect.EmptyContiguousSet:tailSetImpl(java.lang.Comparable,boolean)": "/**\n* Returns a tail set starting from a specified element.\n* @param fromElement the starting element of the tail set\n* @param fromInclusive true if the set includes fromElement\n* @return the contiguous tail set\n*/",
        "com.google.common.collect.EmptyContiguousSet:subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)": "/**\n* Returns a subset of elements within specified range.\n* @param fromElement starting element, inclusive if fromInclusive is true\n* @param toElement ending element, inclusive if toInclusive is true\n* @return ContiguousSet of elements in the specified range\n*/",
        "com.google.common.collect.EmptyContiguousSet:headSetImpl(java.lang.Comparable,boolean)": "/**\n* Returns a view of the portion of this set before the specified element.\n* @param toElement the element to head up to\n* @param inclusive whether to include the specified element\n* @return a contiguous set view of the specified range\n*/",
        "com.google.common.collect.EmptyContiguousSet:contains(java.lang.Object)": "/**\n* Checks if the collection contains the specified object.\n* @param object the object to check for presence\n* @return true if the object is found, false otherwise\n*/",
        "com.google.common.collect.EmptyContiguousSet:indexOf(java.lang.Object)": "/**\n* Returns -1 as the target is not found in the collection.\n* @param target object to find in the collection\n* @return index of the target, always -1\n*/",
        "com.google.common.collect.EmptyContiguousSet:intersection(com.google.common.collect.ContiguousSet)": "/**\n* Returns the intersection of this set with another set.\n* @param other the set to intersect with\n* @return this set as the intersection result\n*/",
        "com.google.common.collect.EmptyContiguousSet:isPartialView()": "/**\n* Indicates if the view is partial.\n* @return false, as this view is not partial\n*/",
        "com.google.common.collect.EmptyContiguousSet:asList()": "/**\n* Returns an empty immutable list of type C.\n* @return an empty ImmutableList of type C\n*/",
        "com.google.common.collect.EmptyContiguousSet:tailSetImpl(java.lang.Object,boolean)": "/**\n* Returns a contiguous set starting from a specified element.\n* @param fromElement the starting element of the tail set\n* @param fromInclusive true if the set includes fromElement\n* @return the contiguous tail set\n*/",
        "com.google.common.collect.EmptyContiguousSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a subset of elements based on specified range and inclusivity.\n* @param fromElement starting element, inclusive if fromInclusive is true\n* @param toElement ending element, inclusive if toInclusive is true\n* @return ContiguousSet of elements in the specified range\n*/",
        "com.google.common.collect.EmptyContiguousSet:headSetImpl(java.lang.Object,boolean)": "/**\n* Returns a view of the set before the specified element.\n* @param toElement the element to head up to\n* @param inclusive whether to include the specified element\n* @return a contiguous set view of the specified range\n*/",
        "com.google.common.collect.EmptyContiguousSet:<init>(com.google.common.collect.DiscreteDomain)": "/**\n* Initializes an empty contiguous set for the specified discrete domain.\n* @param domain the discrete domain for the set elements\n*/",
        "com.google.common.collect.EmptyContiguousSet:iterator()": "/**\n* Returns an unmodifiable empty iterator.\n* @return UnmodifiableIterator instance that is empty\n*/",
        "com.google.common.collect.EmptyContiguousSet:descendingIterator()": "/**\n* Returns an unmodifiable iterator for descending order elements.\n* @return UnmodifiableIterator instance that is empty\n*/",
        "com.google.common.collect.EmptyContiguousSet:createDescendingSet()": "/**\n* Creates a descending sorted set of elements.\n* @return ImmutableSortedSet in reverse natural order\n*/"
    },
    "com.google.common.collect.EmptyImmutableListMultimap": {
        "com.google.common.collect.EmptyImmutableListMultimap:asMap()": "/**\n* Returns an immutable map representation of the object.\n* @return ImmutableMap with object keys and collections as values\n*/",
        "com.google.common.collect.EmptyImmutableListMultimap:<init>()": "/**\n* Constructs an empty ImmutableListMultimap.\n*/"
    },
    "com.google.common.collect.EmptyImmutableSetMultimap": {
        "com.google.common.collect.EmptyImmutableSetMultimap:asMap()": "/**\n* Returns an immutable map representation of the object.\n* @return ImmutableMap of Object keys to Collection of Object values\n*/",
        "com.google.common.collect.EmptyImmutableSetMultimap:<init>()": "/**\n* Constructs an empty EmptyImmutableSetMultimap instance.\n*/"
    },
    "com.google.common.collect.EnumBiMap": {
        "com.google.common.collect.EnumBiMap:checkValue(java.lang.Object)": "/**\n* Validates that the provided value is not null.\n* @param value the value to check for null\n* @return the validated non-null value\n*/",
        "com.google.common.collect.EnumBiMap:checkKey(java.lang.Object)": "/**\n* Validates and returns the provided key.\n* @param key the key to be checked for null\n* @return the non-null key\n*/",
        "com.google.common.collect.EnumBiMap:inferKeyTypeOrObjectUnderJ2cl(java.util.Map)": "/**\n* Infers key type from a map; requires non-empty map.\n* @param map input map of enum keys\n* @return Class of enum keys or null if not applicable\n*/",
        "com.google.common.collect.EnumBiMap:inferValueTypeOrObjectUnderJ2cl(java.util.Map)": "/**\n* Infers the value type from a map or retrieves it from EnumBiMap.\n* @param map a map with enum values\n* @return Class of enum type V\n*/",
        "com.google.common.collect.EnumBiMap:entrySet()": "/**\n* Returns the set of key-value pairs in the map.\n* @return Set of map entries, initializes if null\n*/",
        "com.google.common.collect.EnumBiMap:containsValue(java.lang.Object)": "/**\n* Checks if the specified value exists in the inverse map.\n* @param value the value to check for presence\n* @return true if found, false otherwise\n*/",
        "com.google.common.collect.EnumBiMap:clear()": "/**\n* Clears both the delegate and its inverse delegate.\n*/",
        "com.google.common.collect.EnumBiMap:values()": "/**\n* Returns a set of values with consistent iteration order.\n* @return Set of values from the map, creating if not present\n*/",
        "com.google.common.collect.EnumBiMap:keySet()": "/**\n* Retrieves the set of keys, creating it if not already initialized.\n* @return Set of keys associated with the map\n*/",
        "com.google.common.collect.EnumBiMap:inverse()": "/**\n* Returns the inverse BiMap of the current map.\n* @return BiMap with keys and values swapped\n*/",
        "com.google.common.collect.EnumBiMap:replaceAll(java.util.function.BiFunction)": "/**\n* Replaces all mappings and maintains inverse mapping consistency.\n* @param function mapping function for key-value pairs\n* @throws IllegalArgumentException if a value conflict occurs\n*/",
        "com.google.common.collect.EnumBiMap:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object using ObjectOutputStream.\n* @param stream the output stream for serialization\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.collect.EnumBiMap:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from an ObjectInputStream.\n* @param stream input stream for reading object data\n*/",
        "com.google.common.collect.EnumBiMap:remove(java.lang.Object)": "/**\n* Removes the value associated with the key if present.\n* @param key the key to remove\n* @return associated value or null if key not found\n*/",
        "com.google.common.collect.EnumBiMap:<init>(java.lang.Class,java.lang.Class)": "/**\n* Constructs an EnumBiMap with specified key and value types.\n* @param keyTypeOrObjectUnderJ2cl key type class\n* @param valueTypeOrObjectUnderJ2cl value type class\n*/",
        "com.google.common.collect.EnumBiMap:put(java.lang.Object,java.lang.Object)": "/**\n* Adds a key-value pair to a map without forcing overwrite.\n* @param key the key to add\n* @param value the value to associate with the key\n* @return previous value or null if none\n*/",
        "com.google.common.collect.EnumBiMap:forcePut(java.lang.Object,java.lang.Object)": "/**\n* Forces addition of a key-value pair to maps, overwriting existing values.\n* @param key the key to add\n* @param value the value to associate with the key\n* @return previous value or null if none\n*/",
        "com.google.common.collect.EnumBiMap:create(java.lang.Class,java.lang.Class)": "/**\n* Creates an EnumBiMap with specified key and value enum types.\n* @param keyType key type class\n* @param valueType value type class\n* @return EnumBiMap instance\n*/",
        "com.google.common.collect.EnumBiMap:putAll(java.util.Map)": "/**\n* Adds all key-value pairs from the specified map to this map.\n* @param map source map containing key-value pairs to add\n*/",
        "com.google.common.collect.EnumBiMap:create(java.util.Map)": "/**\n* Creates an EnumBiMap from the provided map.\n* @param map source map of enum key-value pairs\n* @return EnumBiMap instance with specified keys and values\n*/"
    },
    "com.google.common.collect.EnumHashBiMap": {
        "com.google.common.collect.EnumHashBiMap:forcePut(java.lang.Object,java.lang.Object)": "/**\n* Forces insertion of a key-value pair, overriding existing value.\n* @param key the key to insert\n* @param value the value to associate with the key\n* @return previous value associated with the key, or null if none\n*/",
        "com.google.common.collect.EnumHashBiMap:put(java.lang.Object,java.lang.Object)": "/**\n* Inserts a key-value pair into the map.\n* @param key the key to insert\n* @param value the value associated with the key\n* @return previous value associated with the key, or null if none\n*/",
        "com.google.common.collect.EnumHashBiMap:checkKey(java.lang.Object)": "/**\n* Validates the provided key is not null.\n* @param key the key to validate\n* @return the validated key\n*/",
        "com.google.common.collect.EnumHashBiMap:entrySet()": "/**\n* Returns the set of key-value pairs in the map.\n* @return Set of map entries, initializes if null\n*/",
        "com.google.common.collect.EnumHashBiMap:containsValue(java.lang.Object)": "/**\n* Checks if the specified value exists in the inverse map.\n* @param value the value to check for presence\n* @return true if the value is found, false otherwise\n*/",
        "com.google.common.collect.EnumHashBiMap:clear()": "/**\n* Clears the delegate and its inverse delegate.\n*/",
        "com.google.common.collect.EnumHashBiMap:keySet()": "/**\n* Retrieves the set of keys, initializing if not already created.\n* @return Set of keys associated with the map\n*/",
        "com.google.common.collect.EnumHashBiMap:inverse()": "/**\n* Returns the inverse BiMap of the current map.\n* @return BiMap with keys and values swapped\n*/",
        "com.google.common.collect.EnumHashBiMap:replaceAll(java.util.function.BiFunction)": "/**\n* Replaces all mappings and maintains inverse consistency.\n* @param function mapping function for key-value pairs\n* @throws IllegalArgumentException if a value conflict occurs\n*/",
        "com.google.common.collect.EnumHashBiMap:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the current object to an ObjectOutputStream.\n* @param stream the output stream for serialization\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.collect.EnumHashBiMap:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from an ObjectInputStream.\n* @param stream input stream for reading object data\n*/",
        "com.google.common.collect.EnumHashBiMap:remove(java.lang.Object)": "/**** Removes the value associated with the key if present. \n* @param key the key to remove \n* @return associated value or null if key not found \n*/",
        "com.google.common.collect.EnumHashBiMap:<init>(java.lang.Class)": "/**\n* Constructs EnumHashBiMap with specified key type.\n* @param keyType class of the enum keys\n*/",
        "com.google.common.collect.EnumHashBiMap:create(java.lang.Class)": "/**\n* Creates an EnumHashBiMap for the specified enum key type.\n* @param keyType class of the enum keys\n* @return a new EnumHashBiMap instance\n*/",
        "com.google.common.collect.EnumHashBiMap:putAll(java.util.Map)": "/**\n* Adds all entries from the provided map to this collection.\n* @param map source map containing key-value pairs to add\n*/",
        "com.google.common.collect.EnumHashBiMap:create(java.util.Map)": "/**\n* Creates an EnumHashBiMap from the provided map.\n* @param map source map for key-value pairs\n* @return a new EnumHashBiMap instance\n*/"
    },
    "com.google.common.collect.EnumMultiset$Itr": {
        "com.google.common.collect.EnumMultiset$Itr:hasNext()": "/**\n* Checks if there are more elements available in the enumeration.\n* @return true if more elements exist, otherwise false\n*/",
        "com.google.common.collect.EnumMultiset$Itr:next()": "/**\n* Retrieves the next element in the enumeration.\n* @return next element of type T\n* @throws NoSuchElementException if no more elements exist\n*/",
        "com.google.common.collect.EnumMultiset$Itr:remove()": "/**\n* Removes an element if valid; updates counts and size.\n* @param toRemove index of the element to be removed\n*/"
    },
    "com.google.common.collect.EnumMultiset": {
        "com.google.common.collect.EnumMultiset:isActuallyE(java.lang.Object)": "/**\n* Checks if the object is a specific Enum constant.\n* @param o the object to check\n* @return true if o is a valid Enum constant, false otherwise\n*/",
        "com.google.common.collect.EnumMultiset:clear()": "/**\n* Resets the counts and size of the collection to initial values.\n*/",
        "com.google.common.collect.EnumMultiset:elementIterator()": "/**\n* Returns an iterator for the elements of the enum.\n* @return Iterator of enum constants\n*/",
        "com.google.common.collect.EnumMultiset:entryIterator()": "/**\n* Creates an iterator for entries with elements and their counts.\n* @return Iterator of Entry objects containing elements and their counts\n*/",
        "com.google.common.collect.EnumMultiset:setCount(java.lang.Object,int)": "/**\n* Sets the count for a specified element and updates distinct element count.\n* @param element the element to update\n* @param count new count for the element, must be non-negative\n* @return previous count of the element\n*/",
        "com.google.common.collect.EnumMultiset:add(java.lang.Object,int)": "/**\n* Adds occurrences of an element and returns the previous count.\n* @param element the element to add\n* @param occurrences number of occurrences to add\n* @return previous count of the element\n*/",
        "com.google.common.collect.EnumMultiset:distinctElements()": "/**\n* Retrieves the count of distinct elements.\n* @return number of distinct elements\n*/",
        "com.google.common.collect.EnumMultiset:forEachEntry(java.util.function.ObjIntConsumer)": "/**\n* Applies action to each entry with a positive count.\n* @param action consumer for processing entries\n*/",
        "com.google.common.collect.EnumMultiset:<init>(java.lang.Class)": "/**\n* Constructs an EnumMultiset for the specified enum type.\n* @param type the enum class type; must be an enum\n*/",
        "com.google.common.collect.EnumMultiset:size()": "/**\n* Returns the size as a saturated int value.\n* @return saturated int representation of size\n*/",
        "com.google.common.collect.EnumMultiset:contains(java.lang.Object)": "/**\n* Checks if the collection contains the specified element.\n* @param element the object to check for presence\n* @return true if present, false otherwise\n*/",
        "com.google.common.collect.EnumMultiset:checkIsE(java.lang.Object)": "/**\n* Validates that the element is not null and is of a specific Enum type.\n* @param element the object to check for null and type conformity\n* @throws ClassCastException if the element is not of the expected type\n*/",
        "com.google.common.collect.EnumMultiset:count(java.lang.Object)": "/**\n* Counts occurrences of the specified Enum element.\n* @param element the Enum element to count\n* @return the count or 0 if element is null or invalid\n*/",
        "com.google.common.collect.EnumMultiset:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object using ObjectOutputStream.\n* @param stream the output stream for serialization\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.collect.EnumMultiset:create(java.lang.Class)": "/**\n* Creates an EnumMultiset for the specified enum type.\n* @param type the enum class type; must be an enum\n* @return a new EnumMultiset instance\n*/",
        "com.google.common.collect.EnumMultiset:elementSet()": "/**\n* Returns the element set, initializing it if not already created.\n* @return a Set of elements of type E\n*/",
        "com.google.common.collect.EnumMultiset:entrySet()": "/**\n* Retrieves the set of entries, initializing if necessary.\n* @return Set of Entry objects\n*/",
        "com.google.common.collect.EnumMultiset:remove(java.lang.Object,int)": "/**\n* Removes specified occurrences of an Enum element.\n* @param element the Enum element to remove\n* @param occurrences number of occurrences to remove\n* @return the previous count of the element\n*/",
        "com.google.common.collect.EnumMultiset:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from stream and populates Multiset.\n* @param stream input stream for reading object data\n*/",
        "com.google.common.collect.EnumMultiset:iterator()": "/**\n* Returns an iterator for the multiset entries.\n* @return Iterator for the multiset elements\n*/",
        "com.google.common.collect.EnumMultiset:create(java.lang.Iterable)": "/**\n* Creates an EnumMultiset from the provided elements.\n* @param elements iterable of enum elements\n* @return EnumMultiset containing the elements\n*/",
        "com.google.common.collect.EnumMultiset:create(java.lang.Iterable,java.lang.Class)": "/**\n* Creates an EnumMultiset from elements of a specified enum type.\n* @param elements iterable of enum elements\n* @param type the enum class type\n* @return EnumMultiset containing the elements\n*/",
        "com.google.common.collect.EnumMultiset:setCount(java.lang.Object,int,int)": "/**\n* Updates the count of an element in the multiset.\n* @param element the element to update\n* @param oldCount expected current count\n* @param newCount the new count to set\n* @return true if count was updated, false otherwise\n*/",
        "com.google.common.collect.EnumMultiset:isEmpty()": "/**\n* Checks if the entry set is empty.\n* @return true if no entries exist, false otherwise\n*/"
    },
    "com.google.common.collect.EvictingQueue": {
        "com.google.common.collect.EvictingQueue:remainingCapacity()": "/**\n* Calculates the remaining capacity of the collection.\n* @return the number of additional elements that can be added\n*/",
        "com.google.common.collect.EvictingQueue:toArray()": "/**\n* Returns an array containing all elements in the collection.\n* @return an array of Objects from the collection\n*/",
        "com.google.common.collect.EvictingQueue:delegate()": "/**\n* Returns the underlying queue instance.\n* @return the delegate queue\n*/",
        "com.google.common.collect.EvictingQueue:add(java.lang.Object)": "/**\n* Adds an element, removing the oldest if at max size.\n* @param e element to add\n* @return true if added successfully\n*/",
        "com.google.common.collect.EvictingQueue:offer(java.lang.Object)": "/**\n* Adds an element to the collection.\n* @param e element to add\n* @return true if added successfully\n*/",
        "com.google.common.collect.EvictingQueue:addAll(java.util.Collection)": "/**\n* Adds elements from a collection, maintaining size limit.\n* @param collection elements to add\n* @return true if collection was modified\n*/",
        "com.google.common.collect.EvictingQueue:<init>(int)": "/**\n* Constructs an EvictingQueue with a specified maximum size.\n* @param maxSize the maximum number of elements in the queue\n*/",
        "com.google.common.collect.EvictingQueue:create(int)": "/**\n* Creates an EvictingQueue with a specified maximum size.\n* @param maxSize the maximum number of elements in the queue\n* @return a new EvictingQueue instance\n*/"
    },
    "com.google.common.collect.Ordering$IncomparableValueException": {
        "com.google.common.collect.Ordering$IncomparableValueException:<init>(java.lang.Object)": "/**\n* Constructs an IncomparableValueException with a specified value.\n* @param value the value that cannot be compared\n*/"
    },
    "com.google.common.collect.FilteredEntryMultimap": {
        "com.google.common.collect.FilteredEntryMultimap:clear()": "/**\n* Clears all entries in the collection.\n*/",
        "com.google.common.collect.FilteredEntryMultimap:size()": "/**\n* Returns the number of entries in the collection.\n* @return the size of the entries as an integer\n*/",
        "com.google.common.collect.FilteredEntryMultimap:containsKey(java.lang.Object)": "/**\n* Checks if the map contains the specified key.\n* @param key the key to check for presence\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.FilteredEntryMultimap:unmodifiableEmptyCollection()": "/**\n* Returns an unmodifiable empty collection based on the type of unfiltered.\n* @return an empty Set or List, never null\n*/",
        "com.google.common.collect.FilteredEntryMultimap:entryIterator()": "/**\n* Throws an AssertionError indicating this method should not be invoked.\n*/",
        "com.google.common.collect.FilteredEntryMultimap:createAsMap()": "/**\n* Creates and returns a new AsMap instance.\n* @return a map with keys of type K and values as collections of type V\n*/",
        "com.google.common.collect.FilteredEntryMultimap:createKeySet()": "/**\n* Creates a set of keys from the underlying map.\n* @return a set containing the keys of the map\n*/",
        "com.google.common.collect.FilteredEntryMultimap:createKeys()": "/**\n* Creates and returns a new instance of Keys multiset.\n* @return a new Multiset containing keys\n*/",
        "com.google.common.collect.FilteredEntryMultimap:entryPredicate()": "/**\n* Returns the entry predicate for filtering key-value pairs.\n* @return Predicate for Entry<K, V>\n*/",
        "com.google.common.collect.FilteredEntryMultimap:unfiltered()": "/**\n* Returns the unfiltered multimap.\n* @return Multimap containing key-value pairs without filters\n*/",
        "com.google.common.collect.FilteredEntryMultimap:<init>(com.google.common.collect.Multimap,com.google.common.base.Predicate)": "/**\n* Constructs a filtered entry multimap from an unfiltered multimap and a predicate.\n* @param unfiltered the original multimap to filter\n* @param predicate the condition to filter entries\n*/",
        "com.google.common.collect.FilteredEntryMultimap:satisfies(java.lang.Object,java.lang.Object)": "/**\n* Checks if the given key-value pair satisfies a condition.\n* @param key the entry key, can be null\n* @param value the entry value, can be null\n* @return true if the condition is met, false otherwise\n*/",
        "com.google.common.collect.FilteredEntryMultimap:removeAll(java.lang.Object)": "/**\n* Removes entries by key and returns the result.\n* @param key the key of the entry to remove\n* @return removed value or an empty collection if not found\n*/",
        "com.google.common.collect.FilteredEntryMultimap:createValues()": "/**\n* Creates a collection of values from the FilteredMultimap.\n* @return Collection of values associated with the multimap\n*/",
        "com.google.common.collect.FilteredEntryMultimap:filterCollection(java.util.Collection,com.google.common.base.Predicate)": "/**\n* Filters a collection based on a predicate.\n* @param collection the collection to filter\n* @param predicate the condition to filter elements\n* @return a filtered collection\n*/",
        "com.google.common.collect.FilteredEntryMultimap:get(java.lang.Object)": "/**\n* Retrieves filtered values by key.\n* @param key the key to lookup values\n* @return a collection of filtered values or null if not found\n*/",
        "com.google.common.collect.FilteredEntryMultimap:createEntries()": "/**\n* Creates filtered entries from unfiltered collection.\n* @return Collection of filtered entries based on predicate\n*/",
        "com.google.common.collect.FilteredEntryMultimap:removeEntriesIf(com.google.common.base.Predicate)": "/**\n* Removes entries based on a predicate.\n* @param predicate condition to evaluate entries\n* @return true if any entry was removed or modified\n*/"
    },
    "com.google.common.collect.Lists": {
        "com.google.common.collect.Lists:newArrayList()": "/**\n* Creates a new ArrayList instance.\n* @return a new empty ArrayList of type E\n*/",
        "com.google.common.collect.Lists:addAllImpl(java.util.List,int,java.lang.Iterable)": "/**\n* Adds all elements from iterable to the list at the specified index.\n* @param list the target list to add elements to\n* @param index the position in the list to insert elements\n* @param elements the iterable containing elements to add\n* @return true if the list was modified, false otherwise\n*/",
        "com.google.common.collect.Lists:subListImpl(java.util.List,int,int)": "/**\n* Returns a sublist from the specified list between given indices.\n* @param list the source list\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n* @return a sublist of the specified range\n*/",
        "com.google.common.collect.Lists:hashCodeImpl(java.util.List)": "/**\n* Computes the hash code for a given list.\n* @param list input list of objects\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.Lists:<init>()": "/**\n* Private constructor to prevent instantiation of the Lists class.\n*/",
        "com.google.common.collect.Lists:newLinkedList()": "/**\n* Creates a new empty LinkedList.\n* @return a new instance of LinkedList\n*/",
        "com.google.common.collect.Lists:newCopyOnWriteArrayList()": "/**\n* Creates a new CopyOnWriteArrayList instance.\n* @return a new CopyOnWriteArrayList of generic type E\n*/",
        "com.google.common.collect.Lists:indexOfRandomAccess(java.util.List,java.lang.Object)": "/**\n* Finds the index of the specified element in the list.\n* @param element the element to search for, can be null\n* @return index of the element or -1 if not found\n*/",
        "com.google.common.collect.Lists:lastIndexOfRandomAccess(java.util.List,java.lang.Object)": "/**\n* Returns the last index of the specified element in the list.\n* @param list the list to search\n* @param element the element to find (nullable)\n* @return the last index of element or -1 if not found\n*/",
        "com.google.common.collect.Lists:computeArrayListCapacity(int)": "/**\n* Computes capacity for an ArrayList based on its size.\n* @param arraySize the current size of the array\n* @return calculated capacity as an int\n*/",
        "com.google.common.collect.Lists:newArrayListWithCapacity(int)": "/**\n* Creates an ArrayList with the specified initial capacity.\n* @param initialArraySize the initial size of the ArrayList\n* @return a new ArrayList with the given capacity\n*/",
        "com.google.common.collect.Lists:charactersOf(java.lang.CharSequence)": "/**\n* Converts a CharSequence to a List of Characters.\n* @param sequence the CharSequence to convert\n* @return List of Characters derived from the sequence\n*/",
        "com.google.common.collect.Lists:indexOfImpl(java.util.List,java.lang.Object)": "/**\n* Finds the index of an element in a list.\n* @param list the list to search in\n* @param element the element to find, can be null\n* @return index of the element or -1 if not found\n*/",
        "com.google.common.collect.Lists:lastIndexOfImpl(java.util.List,java.lang.Object)": "/**\n* Finds the last index of an element in a list.\n* @param list the list to search\n* @param element the element to find (nullable)\n* @return last index of element or -1 if not found\n*/",
        "com.google.common.collect.Lists:newArrayList(java.util.Iterator)": "/**\n* Creates an ArrayList from an iterator of elements.\n* @param elements iterator providing elements for the list\n* @return new ArrayList containing the elements\n*/",
        "com.google.common.collect.Lists:listIteratorImpl(java.util.List,int)": "/**\n* Creates a ListIterator for the specified index of a given list.\n* @param list the list to iterate over\n* @param index the starting index for the iterator\n* @return ListIterator for the specified index\n*/",
        "com.google.common.collect.Lists:asList(java.lang.Object,java.lang.Object[])": "/**\n* Creates a list from a first element and an array of additional elements.\n* @param first initial element of the list\n* @param rest array of subsequent elements\n* @return List containing the first element followed by the rest\n*/",
        "com.google.common.collect.Lists:transform(java.util.List,com.google.common.base.Function)": "/**\n* Transforms a list using the provided function.\n* @param fromList source list to transform\n* @param function function to apply to each element\n* @return new list with transformed elements\n*/",
        "com.google.common.collect.Lists:asList(java.lang.Object,java.lang.Object,java.lang.Object[])": "/**\n* Converts two elements and an array into a List.\n* @param first the first element\n* @param second the second element\n* @param rest array of additional elements\n* @return List containing the provided elements\n*/",
        "com.google.common.collect.Lists:equalsImpl(java.util.List,java.lang.Object)": "/**\n* Compares two lists for equality.\n* @param thisList the first list to compare\n* @param other the second object to compare, may be null\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Lists:newArrayListWithExpectedSize(int)": "/**\n* Creates an ArrayList with an estimated initial capacity.\n* @param estimatedSize expected size of the ArrayList\n* @return a new ArrayList with the computed capacity\n*/",
        "com.google.common.collect.Lists:partition(java.util.List,int)": "/**\n* Partitions a list into sublists of specified size.\n* @param list the list to be partitioned\n* @param size the size of each partition\n* @return a list of sublists\n*/",
        "com.google.common.collect.Lists:newLinkedList(java.lang.Iterable)": "/**\n* Creates a new LinkedList from the given elements.\n* @param elements source of elements to add\n* @return a new LinkedList containing the elements\n*/",
        "com.google.common.collect.Lists:newArrayList(java.lang.Iterable)": "/**** Creates an ArrayList from an Iterable of elements. \n* @param elements iterable providing elements for the list \n* @return new ArrayList containing the elements \n*/",
        "com.google.common.collect.Lists:charactersOf(java.lang.String)": "/**\n* Converts a string to an ImmutableList of characters.\n* @param string input string to convert\n* @return ImmutableList of characters from the input string\n*/",
        "com.google.common.collect.Lists:newCopyOnWriteArrayList(java.lang.Iterable)": "/**\n* Creates a CopyOnWriteArrayList from an Iterable of elements.\n* @param elements iterable providing elements for the list\n* @return CopyOnWriteArrayList containing the elements\n*/",
        "com.google.common.collect.Lists:reverse(java.util.List)": "/**\n* Reverses the given list, handling different list types.\n* @param list the list to reverse\n* @return a reversed list of the same type\n*/",
        "com.google.common.collect.Lists:cartesianProduct(java.util.List)": "/**\n* Generates the Cartesian product of given lists.\n* @param lists input lists to generate the product\n* @return List of lists representing the Cartesian product\n*/"
    },
    "com.google.common.collect.FilteredEntryMultimap$AsMap": {
        "com.google.common.collect.FilteredEntryMultimap$AsMap:createKeySet()": "/**\n* Creates a set view of the keys in the map.\n* @return Set of keys from the associated map\n*/",
        "com.google.common.collect.FilteredEntryMultimap$AsMap:createEntrySet()": "/**\n* Creates a set of filtered map entries.\n* @return Set of map entries with non-empty collections\n*/",
        "com.google.common.collect.FilteredEntryMultimap$AsMap:createValues()": "/**\n* Creates a collection of value collections for the multimap.\n* @return Collection of Collections containing values\n*/",
        "com.google.common.collect.FilteredEntryMultimap$AsMap:clear()": "/**\n* Clears all entries in the filtered entry multimap.\n*/",
        "com.google.common.collect.FilteredEntryMultimap$AsMap:remove(java.lang.Object)": "/**\n* Removes and returns values associated with the key from the collection.\n* @param key the key to remove values for\n* @return collection of removed values or null if none found\n*/",
        "com.google.common.collect.FilteredEntryMultimap$AsMap:get(java.lang.Object)": "/**\n* Retrieves filtered collection by key.\n* @param key the key to lookup in the map\n* @return filtered collection or null if not found or empty\n*/",
        "com.google.common.collect.FilteredEntryMultimap$AsMap:containsKey(java.lang.Object)": "/**\n* Checks if the collection contains the specified key.\n* @param key the key to check for existence\n* @return true if the key is present, false otherwise\n*/"
    },
    "com.google.common.collect.FilteredEntryMultimap$Keys": {
        "com.google.common.collect.FilteredEntryMultimap$Keys:entrySet()": "/**\n* Returns a set of multiset entries with custom iterator and size methods.\n* @return Set of Multiset.Entry objects\n*/",
        "com.google.common.collect.FilteredEntryMultimap$Keys:remove(java.lang.Object,int)": "/**** Removes specified occurrences of the key from the collection. \n* @param key the key whose occurrences to remove\n* @param occurrences number of occurrences to remove\n* @return the number of occurrences removed\n*/"
    },
    "com.google.common.collect.FilteredEntryMultimap$ValuePredicate": {
        "com.google.common.collect.FilteredEntryMultimap$ValuePredicate:apply(java.lang.Object)": "/**\n* Checks if the given value satisfies a condition based on the key.\n* @param value the value to check\n* @return true if the condition is satisfied, false otherwise\n*/"
    },
    "com.google.common.collect.FilteredEntrySetMultimap": {
        "com.google.common.collect.FilteredEntrySetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for the given key and returns the updated set of values.\n* @param key the key for which values are replaced\n* @param values new values to associate with the key\n* @return updated set of values for the specified key\n*/",
        "com.google.common.collect.FilteredEntrySetMultimap:unfiltered()": "/**\n* Returns the unfiltered SetMultimap.\n* @return unfiltered SetMultimap of key-value pairs\n*/",
        "com.google.common.collect.FilteredEntrySetMultimap:entries()": "/**\n* Returns a set of key-value entries from the map.\n* @return Set of map entries (key-value pairs)\n*/",
        "com.google.common.collect.FilteredEntrySetMultimap:<init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)": "/**\n* Constructs a filtered entry multimap from an unfiltered multimap and a predicate.\n* @param unfiltered the original multimap to filter\n* @param predicate the condition to filter entries\n*/",
        "com.google.common.collect.FilteredEntrySetMultimap:removeAll(java.lang.Object)": "/**\n* Removes entries by key and returns the result as a Set.\n* @param key the key of the entries to remove\n* @return Set of removed values or empty Set if not found\n*/",
        "com.google.common.collect.FilteredEntrySetMultimap:createEntries()": "/**\n* Creates a filtered set of map entries based on a predicate.\n* @return filtered set of key-value map entries\n*/",
        "com.google.common.collect.FilteredEntrySetMultimap:get(java.lang.Object)": "/**\n* Retrieves a set of values by key.\n* @param key the key to lookup values\n* @return a set of values or null if not found\n*/"
    },
    "com.google.common.collect.FilteredKeyMultimap": {
        "com.google.common.collect.FilteredKeyMultimap:unfiltered()": "/**\n* Returns the unfiltered multimap.\n* @return Multimap containing all key-value pairs\n*/",
        "com.google.common.collect.FilteredKeyMultimap:size()": "/**\n* Computes the total number of elements across all collections.\n* @return total count of elements in all collections\n*/",
        "com.google.common.collect.FilteredKeyMultimap:containsKey(java.lang.Object)": "/**\n* Checks if the map contains a key satisfying the key predicate.\n* @param key the key to check for presence\n* @return true if the key exists and meets the predicate; false otherwise\n*/",
        "com.google.common.collect.FilteredKeyMultimap:unmodifiableEmptyCollection()": "/**\n* Returns an unmodifiable empty collection based on the type of unfiltered.\n* @return an empty Set or List collection\n*/",
        "com.google.common.collect.FilteredKeyMultimap:clear()": "/**\n* Clears all entries from the map.\n*/",
        "com.google.common.collect.FilteredKeyMultimap:entryIterator()": "/**\n* Throws an AssertionError indicating this method should not be invoked.\n*/",
        "com.google.common.collect.FilteredKeyMultimap:createEntries()": "/**\n* Creates and returns a collection of entries.\n* @return Collection of Entry objects\n*/",
        "com.google.common.collect.FilteredKeyMultimap:<init>(com.google.common.collect.Multimap,com.google.common.base.Predicate)": "/**\n* Constructs a FilteredKeyMultimap with specified unfiltered data and key filter.\n* @param unfiltered the original multimap to filter\n* @param keyPredicate the predicate to apply on keys\n*/",
        "com.google.common.collect.FilteredKeyMultimap:removeAll(java.lang.Object)": "/**\n* Removes all entries for the specified key or returns an empty collection if absent.\n* @param key the key whose entries are to be removed\n* @return Collection of removed entries or an unmodifiable empty collection\n*/",
        "com.google.common.collect.FilteredKeyMultimap:createValues()": "/**\n* Creates a collection of values from the FilteredMultimap.\n* @return Collection of values associated with the multimap\n*/",
        "com.google.common.collect.FilteredKeyMultimap:entryPredicate()": "/**\n* Returns a predicate for filtering map entries by their keys.\n* @return Predicate for map entries based on key criteria\n*/",
        "com.google.common.collect.FilteredKeyMultimap:createKeys()": "/**\n* Creates a filtered multiset of keys based on a predicate.\n* @return Filtered multiset of keys satisfying the predicate\n*/",
        "com.google.common.collect.FilteredKeyMultimap:get(java.lang.Object)": "/**\n* Retrieves values by key, applying a predicate for filtering.\n* @param key the key to retrieve values for\n* @return a collection of values or an empty collection if none found\n*/",
        "com.google.common.collect.FilteredKeyMultimap:createKeySet()": "/**\n* Creates a filtered set of keys based on a predicate.\n* @return Set of keys matching the keyPredicate\n*/",
        "com.google.common.collect.FilteredKeyMultimap:createAsMap()": "/**\n* Creates a map filtered by specified key predicate.\n* @return filtered map of collections grouped by keys\n*/"
    },
    "com.google.common.collect.FilteredKeyListMultimap": {
        "com.google.common.collect.FilteredKeyListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a given key and returns the updated list.\n* @param key the key whose values are to be replaced\n* @param values the new values to associate with the key\n* @return updated list of values for the specified key\n*/",
        "com.google.common.collect.FilteredKeyListMultimap:unfiltered()": "/**\n* Returns the unfiltered multimap from the superclass.\n* @return ListMultimap containing all key-value pairs\n*/",
        "com.google.common.collect.FilteredKeyListMultimap:<init>(com.google.common.collect.ListMultimap,com.google.common.base.Predicate)": "/**\n* Constructs a FilteredKeyListMultimap with specified unfiltered data and key filter.\n* @param unfiltered the original multimap to filter\n* @param keyPredicate the predicate to apply on keys\n*/",
        "com.google.common.collect.FilteredKeyListMultimap:removeAll(java.lang.Object)": "/**\n* Removes all entries for the specified key.\n* @param key the key whose entries are to be removed\n* @return List of removed entries or empty list if absent\n*/",
        "com.google.common.collect.FilteredKeyListMultimap:get(java.lang.Object)": "/**\n* Retrieves a list of values by key.\n* @param key the key to retrieve values for\n* @return a list of values or null if not found\n*/"
    },
    "com.google.common.collect.FilteredKeyMultimap$AddRejectingList": {
        "com.google.common.collect.FilteredKeyMultimap$AddRejectingList:delegate()": "/**\n* Returns an empty immutable list.\n* @return an empty List of type V\n*/",
        "com.google.common.collect.FilteredKeyMultimap$AddRejectingList:add(int,java.lang.Object)": "/**\n* Adds an element at the specified index after validation.\n* @param index position to add the element\n* @param element the element to add (can be null)\n*/",
        "com.google.common.collect.FilteredKeyMultimap$AddRejectingList:addAll(int,java.util.Collection)": "/**\n* Adds elements to the collection at the specified index.\n* @param index position to insert elements\n* @param elements collection of elements to add\n* @return true if the collection changed\n*/",
        "com.google.common.collect.FilteredKeyMultimap$AddRejectingList:<init>(java.lang.Object)": "/**\n* Initializes AddRejectingList with a key.\n* @param key the key to be associated with the list\n*/",
        "com.google.common.collect.FilteredKeyMultimap$AddRejectingList:add(java.lang.Object)": "/**\n* Adds an element at the start of the collection.\n* @param v the element to add (can be null)\n* @return true indicating successful addition\n*/",
        "com.google.common.collect.FilteredKeyMultimap$AddRejectingList:addAll(java.util.Collection)": "/**\n* Adds all elements from the specified collection to the beginning.\n* @param collection elements to add\n* @return true if the collection changed\n*/"
    },
    "com.google.common.collect.FilteredKeyMultimap$AddRejectingSet": {
        "com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:add(java.lang.Object)": "/**\n* Throws an exception if the element does not satisfy a specific predicate.\n* @param element the element to be added\n* @return always throws IllegalArgumentException\n*/",
        "com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:delegate()": "/**\n* Returns an empty set of type V.\n* @return an empty Set instance\n*/",
        "com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:addAll(java.util.Collection)": "/**\n* Adds all elements from the collection; throws if collection is null or key is invalid.\n* @param collection elements to add\n* @return false (not implemented)\n*/",
        "com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:<init>(java.lang.Object)": "/**\n* Initializes AddRejectingSet with a specified key.\n* @param key the key to be associated with the set\n*/"
    },
    "com.google.common.collect.FilteredKeyMultimap$Entries": {
        "com.google.common.collect.FilteredKeyMultimap$Entries:remove(java.lang.Object)": "/**\n* Removes an entry if it matches the key predicate.\n* @param o object to remove, expected to be an Entry\n* @return true if removed, false otherwise\n*/",
        "com.google.common.collect.FilteredKeyMultimap$Entries:delegate()": "/**\n* Returns a filtered collection of map entries based on a predicate.\n* @return filtered collection of entries\n*/"
    },
    "com.google.common.collect.FilteredKeySetMultimap": {
        "com.google.common.collect.FilteredKeySetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a given key and returns the updated set.\n* @param key the key whose values are to be replaced\n* @param values new values to associate with the key\n* @return updated set of values for the key\n*/",
        "com.google.common.collect.FilteredKeySetMultimap:entries()": "/**\n* Returns a set of key-value entries from the map.\n* @return a Set of Entry objects representing the map's entries\n*/",
        "com.google.common.collect.FilteredKeySetMultimap:createEntries()": "/**\n* Creates a set of entries for the map.\n* @return Set of key-value pairs (entries)\n*/",
        "com.google.common.collect.FilteredKeySetMultimap:unfiltered()": "/**\n* Returns the unfiltered SetMultimap instance.\n* @return unfiltered SetMultimap of type K and V\n*/",
        "com.google.common.collect.FilteredKeySetMultimap:<init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)": "/**\n* Constructs a FilteredKeySetMultimap with specified unfiltered data and key filter.\n* @param unfiltered the original multimap to filter\n* @param keyPredicate the predicate to apply on keys\n*/",
        "com.google.common.collect.FilteredKeySetMultimap:removeAll(java.lang.Object)": "/**\n* Removes all entries for the specified key.\n* @param key the key whose entries are to be removed\n* @return Set of removed entries or an empty set if absent\n*/",
        "com.google.common.collect.FilteredKeySetMultimap:get(java.lang.Object)": "/**\n* Retrieves a set of values by key.\n* @param key the key to retrieve values for\n* @return a set of values or null if not found\n*/"
    },
    "com.google.common.collect.FilteredMultimapValues": {
        "com.google.common.collect.FilteredMultimapValues:contains(java.lang.Object)": "/**\n* Checks if the multimap contains the specified value.\n* @param o the value to check for presence\n* @return true if the value exists, false otherwise\n*/",
        "com.google.common.collect.FilteredMultimapValues:size()": "/**\n* Returns the number of key-value pairs in the multimap.\n* @return the size of the multimap\n*/",
        "com.google.common.collect.FilteredMultimapValues:clear()": "/**\n* Clears all entries from the multimap.\n*/",
        "com.google.common.collect.FilteredMultimapValues:<init>(com.google.common.collect.FilteredMultimap)": "/**\n* Initializes with a non-null FilteredMultimap.\n* @param multimap the FilteredMultimap to set\n*/",
        "com.google.common.collect.FilteredMultimapValues:remove(java.lang.Object)": "/**\n* Removes the specified object from the multimap.\n* @param o object to remove\n* @return true if removed, false if not found\n*/",
        "com.google.common.collect.FilteredMultimapValues:iterator()": "/**\n* Returns an iterator for values in the multimap.\n* @return Iterator of values from the multimap entries\n*/",
        "com.google.common.collect.FilteredMultimapValues:removeAll(java.util.Collection)": "/**\n* Removes all entries from the multimap that match the given collection.\n* @param c collection of elements to remove\n* @return true if any entries were removed, false otherwise\n*/",
        "com.google.common.collect.FilteredMultimapValues:retainAll(java.util.Collection)": "/**\n* Retains entries in the multimap not in the specified collection.\n* @param c collection to check against\n* @return true if any entries were removed, false otherwise\n*/"
    },
    "com.google.common.collect.FluentIterable$3$1": {
        "com.google.common.collect.FluentIterable$3$1:get(int)": "/**\n* Retrieves the element at the specified position.\n* @param position index of the element to retrieve\n* @return element at the given position\n*/"
    },
    "com.google.common.collect.FluentIterable": {
        "com.google.common.collect.FluentIterable:from(java.lang.Iterable)": "/**\n* Converts an Iterable to a FluentIterable.\n* @param iterable input collection to convert\n* @return FluentIterable wrapping the input collection\n*/",
        "com.google.common.collect.FluentIterable:getDelegate()": "/**\n* Retrieves the delegate iterable, falling back to 'this' if not present.\n* @return an Iterable of type E\n*/",
        "com.google.common.collect.FluentIterable:concat(java.lang.Iterable,java.lang.Iterable)": "/**\n* Concatenates two iterables into a single FluentIterable.\n* @param a first iterable to concatenate\n* @param b second iterable to concatenate\n* @return FluentIterable containing elements from both iterables\n*/",
        "com.google.common.collect.FluentIterable:concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)": "/**\n* Concatenates three iterables into a single FluentIterable.\n* @param a first iterable\n* @param b second iterable\n* @param c third iterable\n* @return concatenated FluentIterable of type T\n*/",
        "com.google.common.collect.FluentIterable:concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)": "/**\n* Concatenates four iterables into a single FluentIterable.\n* @param a first iterable\n* @param b second iterable\n* @param c third iterable\n* @param d fourth iterable\n* @return concatenated FluentIterable of type T\n*/",
        "com.google.common.collect.FluentIterable:from(com.google.common.collect.FluentIterable)": "/**\n* Returns a non-null FluentIterable from the provided iterable.\n* @param iterable the FluentIterable to check for null\n* @return the non-null FluentIterable\n*/",
        "com.google.common.collect.FluentIterable:from(java.lang.Object[])": "/**\n* Converts an array of elements to a FluentIterable.\n* @param elements array of elements to convert\n* @return FluentIterable wrapping the input array\n*/",
        "com.google.common.collect.FluentIterable:of()": "/**\n* Creates an empty FluentIterable.\n* @return FluentIterable containing no elements\n*/",
        "com.google.common.collect.FluentIterable:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if no elements are present, false otherwise\n*/",
        "com.google.common.collect.FluentIterable:append(java.lang.Iterable)": "/**\n* Appends elements from another iterable to the current iterable.\n* @param other iterable to append\n* @return FluentIterable containing combined elements\n*/",
        "com.google.common.collect.FluentIterable:stream()": "/**\n* Converts the delegate to a Stream.\n* @return Stream of elements from the delegate Iterable\n*/",
        "com.google.common.collect.FluentIterable:cycle()": "/**** Returns a FluentIterable that cycles through the delegate elements. */",
        "com.google.common.collect.FluentIterable:filter(com.google.common.base.Predicate)": "/**\n* Filters elements based on a predicate.\n* @param predicate condition to retain elements\n* @return FluentIterable of filtered elements\n*/",
        "com.google.common.collect.FluentIterable:transform(com.google.common.base.Function)": "/**\n* Transforms elements using the provided function.\n* @param function function to apply to each element\n* @return FluentIterable of transformed elements\n*/",
        "com.google.common.collect.FluentIterable:<init>()": "/**\n* Initializes FluentIterable with an absent optional delegate.\n*/",
        "com.google.common.collect.FluentIterable:skip(int)": "/**\n* Skips specified elements from the iterable and returns a FluentIterable.\n* @param numberToSkip number of elements to skip\n* @return FluentIterable after skipping elements\n*/",
        "com.google.common.collect.FluentIterable:limit(int)": "/**\n* Limits the size of the iterable to maxSize.\n* @param maxSize maximum number of elements to return\n* @return FluentIterable containing limited elements\n*/",
        "com.google.common.collect.FluentIterable:toString()": "/**\n* Returns the string representation of the delegate iterable.\n* @return string representation of the iterable's elements\n*/",
        "com.google.common.collect.FluentIterable:<init>(java.lang.Iterable)": "/**\n* Constructs FluentIterable from an Iterable, wrapped in an Optional.\n* @param iterable collection of elements\n*/",
        "com.google.common.collect.FluentIterable:first()": "/**\n* Returns the first element as an Optional or absent if no elements exist.\n* @return Optional containing the first element or absent if empty\n*/",
        "com.google.common.collect.FluentIterable:last()": "/**\n* Returns the last element of the iterable or absent if empty.\n* @return Optional containing last element or absent if no elements exist\n*/",
        "com.google.common.collect.FluentIterable:contains(java.lang.Object)": "/**\n* Checks if the collection contains the specified target element.\n* @param target the element to find, can be null\n* @return true if found, otherwise false\n*/",
        "com.google.common.collect.FluentIterable:filter(java.lang.Class)": "/**\n* Filters elements by type from the delegate iterable.\n* @param type class type to filter by\n* @return FluentIterable of matching elements\n*/",
        "com.google.common.collect.FluentIterable:allMatch(com.google.common.base.Predicate)": "/**\n* Checks if all elements match the given predicate.\n* @param predicate condition to test each element\n* @return true if all match, false otherwise\n*/",
        "com.google.common.collect.FluentIterable:size()": "/**\n* Returns the number of elements in the delegate iterable.\n* @return count of elements as an int\n*/",
        "com.google.common.collect.FluentIterable:anyMatch(com.google.common.base.Predicate)": "/**\n* Checks if any element matches the given predicate.\n* @param predicate condition to match against elements\n* @return true if any element matches, false otherwise\n*/",
        "com.google.common.collect.FluentIterable:concat(java.lang.Iterable)": "/**\n* Concatenates multiple Iterables into a FluentIterable.\n* @param inputs variable number of Iterable inputs\n* @return FluentIterable containing concatenated elements\n*/",
        "com.google.common.collect.FluentIterable:get(int)": "/**\n* Retrieves the element at the specified position from the delegate iterable.\n* @param position index of the desired element\n* @return element at the given position\n*/",
        "com.google.common.collect.FluentIterable:firstMatch(com.google.common.base.Predicate)": "/**\n* Finds the first element matching the predicate in the delegate iterable.\n* @param predicate condition to match elements\n* @return Optional containing the matched element or empty if none found\n*/",
        "com.google.common.collect.FluentIterable:join(com.google.common.base.Joiner)": "/**\n* Joins elements using the provided Joiner.\n* @param joiner the Joiner to concatenate elements\n* @return concatenated string of elements\n*/",
        "com.google.common.collect.FluentIterable:transformAndConcat(com.google.common.base.Function)": "/**\n* Transforms elements and concatenates results into a FluentIterable.\n* @param function function to apply for transformation\n* @return FluentIterable containing concatenated transformed elements\n*/",
        "com.google.common.collect.FluentIterable:toArray(java.lang.Class)": "/**\n* Converts delegate iterable to an array of specified type.\n* @param type class type of the array elements\n* @return array of elements from the delegate iterable\n*/",
        "com.google.common.collect.FluentIterable:toSortedSet(java.util.Comparator)": "/**\n* Converts elements to an ImmutableSortedSet using the provided comparator.\n* @param comparator the comparator for sorting elements\n* @return ImmutableSortedSet of sorted elements\n*/",
        "com.google.common.collect.FluentIterable:toSortedList(java.util.Comparator)": "/**\n* Converts delegate elements to a sorted ImmutableList using the given comparator.\n* @param comparator defines the sorting order\n* @return sorted ImmutableList of elements\n*/",
        "com.google.common.collect.FluentIterable:toSet()": "/**\n* Converts the delegate to an ImmutableSet.\n* @return ImmutableSet containing non-null elements from the delegate\n*/",
        "com.google.common.collect.FluentIterable:toMultiset()": "/**\n* Converts the delegate to an ImmutableMultiset.\n* @return ImmutableMultiset of non-null elements from the delegate\n*/",
        "com.google.common.collect.FluentIterable:toList()": "/**\n* Converts the delegate to an ImmutableList.\n* @return ImmutableList of non-null elements from the delegate\n*/",
        "com.google.common.collect.FluentIterable:toMap(com.google.common.base.Function)": "/**\n* Converts delegate iterable to an ImmutableMap using a value function.\n* @param valueFunction function to generate values\n* @return constructed ImmutableMap from keys and values\n*/",
        "com.google.common.collect.FluentIterable:uniqueIndex(com.google.common.base.Function)": "/**\n* Creates an ImmutableMap from the delegate iterable using a key function.\n* @param keyFunction function to generate keys from values\n* @return ImmutableMap with unique keys mapped from the iterable\n*/",
        "com.google.common.collect.FluentIterable:index(com.google.common.base.Function)": "/**** Creates an ImmutableListMultimap from the delegate iterable using a key function. \n* @param keyFunction function to extract keys from values \n* @return ImmutableListMultimap of keys to values \n*/"
    },
    "com.google.common.collect.Streams": {
        "com.google.common.collect.Streams:stream(java.lang.Iterable)": "/**\n* Converts an Iterable to a Stream.\n* @param iterable the source Iterable\n* @return a Stream of elements from the Iterable\n*/",
        "com.google.common.collect.Streams:stream(java.util.Collection)": "/**\n* Returns a stream from the given collection.\n* @param collection the collection to convert to a stream\n* @return a Stream of elements from the collection\n*/",
        "com.google.common.collect.Streams:stream(java.util.Iterator)": "/**\n* Converts an Iterator to a Stream.\n* @param iterator the source Iterator\n* @return a Stream containing elements from the Iterator\n*/",
        "com.google.common.collect.Streams:stream(com.google.common.base.Optional)": "/**\n* Creates a stream from an Optional object.\n* @param optional an Optional containing a value or empty\n* @return Stream containing the value or an empty stream\n*/",
        "com.google.common.collect.Streams:stream(java.util.Optional)": "/**\n* Returns a stream containing the value of the optional, or an empty stream if not present.\n* @param optional an Optional containing the value to be streamed\n* @return Stream containing the optional value or an empty Stream\n*/",
        "com.google.common.collect.Streams:stream(java.util.OptionalInt)": "/**\n* Converts an OptionalInt to an IntStream.\n* @param optional OptionalInt to convert\n* @return IntStream containing value or empty stream if not present\n*/",
        "com.google.common.collect.Streams:stream(java.util.OptionalLong)": "/**\n* Converts an OptionalLong to a LongStream.\n* @param optional OptionalLong to convert\n* @return LongStream containing the value or empty stream if not present\n*/",
        "com.google.common.collect.Streams:stream(java.util.OptionalDouble)": "/**\n* Converts an OptionalDouble to a DoubleStream.\n* @param optional the OptionalDouble to convert\n* @return a DoubleStream containing the value or empty if not present\n*/",
        "com.google.common.collect.Streams:closeAll(java.util.stream.BaseStream[])": "/**\n* Closes multiple streams, suppressing exceptions for later handling.\n* @param toClose array of streams to be closed\n*/",
        "com.google.common.collect.Streams:findLast(java.util.stream.Stream)": "/**\n* Finds the last element in a stream, if present.\n* @param stream the input stream to search\n* @return Optional containing the last element or empty if none found\n*/",
        "com.google.common.collect.Streams:<init>()": "/**\n* Private constructor to prevent instantiation of the Streams class.\n*/",
        "com.google.common.collect.Streams:zip(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiFunction)": "/**\n* Combines two streams using a provided function to create a new stream.\n* @param streamA first input stream\n* @param streamB second input stream\n* @param function function to combine elements\n* @return a stream of combined results\n*/",
        "com.google.common.collect.Streams:mapWithIndex(java.util.stream.Stream,com.google.common.collect.Streams$FunctionWithIndex)": "/**\n* Maps elements of a stream to new values with their index.\n* @param stream input stream of elements\n* @param function mapping function with index\n* @return Stream of transformed elements\n*/",
        "com.google.common.collect.Streams:mapWithIndex(java.util.stream.IntStream,com.google.common.collect.Streams$IntFunctionWithIndex)": "/**\n* Maps each element of an IntStream to a new value with its index.\n* @param stream input IntStream\n* @param function mapping function with index\n* @return Stream of mapped values\n*/",
        "com.google.common.collect.Streams:mapWithIndex(java.util.stream.LongStream,com.google.common.collect.Streams$LongFunctionWithIndex)": "/**\n* Maps elements of a LongStream with their index using a provided function.\n* @param stream input LongStream\n* @param function function to apply with index\n* @return Stream of mapped results\n*/",
        "com.google.common.collect.Streams:mapWithIndex(java.util.stream.DoubleStream,com.google.common.collect.Streams$DoubleFunctionWithIndex)": "/**\n* Maps values from a DoubleStream with their index using a provided function.\n* @param stream input DoubleStream\n* @param function function to apply with value and index\n* @return Stream of mapped results\n*/",
        "com.google.common.collect.Streams:findLast(java.util.stream.IntStream)": "/**\n* Finds the last element in an IntStream as OptionalInt.\n* @param stream the IntStream to search\n* @return OptionalInt containing the last element or empty if none found\n*/",
        "com.google.common.collect.Streams:findLast(java.util.stream.LongStream)": "/**\n* Retrieves the last element from a LongStream as OptionalLong.\n* @param stream the LongStream to search\n* @return OptionalLong containing the last element or empty if not found\n*/",
        "com.google.common.collect.Streams:findLast(java.util.stream.DoubleStream)": "/**\n* Retrieves the last element from a DoubleStream as an OptionalDouble.\n* @param stream the input DoubleStream to search\n* @return OptionalDouble containing the last element or empty if none found\n*/",
        "com.google.common.collect.Streams:forEachPair(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiConsumer)": "/**\n* Applies a consumer to each pair of elements from two streams.\n* @param streamA first input stream\n* @param streamB second input stream\n* @param consumer function to process each pair\n*/"
    },
    "com.google.common.collect.ForwardingBlockingDeque": {
        "com.google.common.collect.ForwardingBlockingDeque:delegate()": "/**\n* Returns the underlying BlockingDeque instance.\n* @return BlockingDeque of type E\n*/",
        "com.google.common.collect.ForwardingBlockingDeque:remainingCapacity()": "/**\n* Returns the remaining capacity of the underlying BlockingDeque.\n* @return int representing the remaining capacity\n*/",
        "com.google.common.collect.ForwardingBlockingDeque:putFirst(java.lang.Object)": "/**\n* Inserts an element at the front of the deque.\n* @param e element to be added\n* @throws InterruptedException if interrupted while waiting\n*/",
        "com.google.common.collect.ForwardingBlockingDeque:putLast(java.lang.Object)": "/**\n* Adds an element to the end of the deque.\n* @param e element to be added\n* @throws InterruptedException if interrupted while waiting\n*/",
        "com.google.common.collect.ForwardingBlockingDeque:offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit)": "/**\n* Adds an element to the front with timeout.\n* @param e element to add\n* @param timeout maximum time to wait\n* @param unit time unit for timeout\n* @return true if added, false if timeout occurs\n*/",
        "com.google.common.collect.ForwardingBlockingDeque:offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit)": "/**\n* Adds an element to the end with a timeout.\n* @param e element to add\n* @param timeout maximum wait time\n* @param unit time unit for timeout\n* @return true if added, false if timeout occurs\n*/",
        "com.google.common.collect.ForwardingBlockingDeque:takeFirst()": "/**\n* Retrieves and removes the first element from the deque.\n* @return the first element or null if empty\n* @throws InterruptedException if interrupted while waiting\n*/",
        "com.google.common.collect.ForwardingBlockingDeque:takeLast()": "/**\n* Retrieves and removes the last element, blocking if necessary.\n* @return last element of type E\n* @throws InterruptedException if interrupted while waiting\n*/",
        "com.google.common.collect.ForwardingBlockingDeque:pollFirst(long,java.util.concurrent.TimeUnit)": "/**\n* Retrieves and removes the first element, waiting if necessary.\n* @param timeout maximum time to wait\n* @param unit time unit of the timeout\n* @return first element or null if none available\n*/",
        "com.google.common.collect.ForwardingBlockingDeque:pollLast(long,java.util.concurrent.TimeUnit)": "/**\n* Retrieves and removes the last element, waiting if necessary.\n* @param timeout maximum time to wait for an element\n* @param unit time unit of the timeout\n* @return last element or null if none available\n*/",
        "com.google.common.collect.ForwardingBlockingDeque:put(java.lang.Object)": "/**\n* Puts an element into the BlockingDeque.\n* @param e element to be added\n* @throws InterruptedException if interrupted while waiting\n*/",
        "com.google.common.collect.ForwardingBlockingDeque:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)": "/**\n* Offers an element with timeout to the queue.\n* @param e element to add, @param timeout max wait time, @param unit time unit\n* @return true if added, false if timeout occurs\n*/",
        "com.google.common.collect.ForwardingBlockingDeque:take()": "/**\n* Retrieves and removes the head of the queue, waiting if necessary.\n* @return the head element of the queue\n*/",
        "com.google.common.collect.ForwardingBlockingDeque:poll(long,java.util.concurrent.TimeUnit)": "/**\n* Polls an element from the queue with a timeout.\n* @param timeout maximum time to wait\n* @param unit time unit of the timeout\n* @return the polled element or null if none available\n*/",
        "com.google.common.collect.ForwardingBlockingDeque:drainTo(java.util.Collection)": "/**\n* Drains elements into the given collection.\n* @param c collection to receive elements\n* @return number of elements drained\n*/",
        "com.google.common.collect.ForwardingBlockingDeque:drainTo(java.util.Collection,int)": "/**\n* Drains elements to a collection, limited by maxElements.\n* @param c target collection for drained elements\n* @param maxElements maximum number of elements to drain\n* @return number of elements drained\n*/",
        "com.google.common.collect.ForwardingBlockingDeque:<init>()": "/**\n* Constructs a new instance of ForwardingBlockingDeque.\n*/"
    },
    "com.google.common.collect.ForwardingImmutableCollection": {
        "com.google.common.collect.ForwardingImmutableCollection:<init>()": "/**\n* Private constructor for ForwardingImmutableCollection class.\n*/"
    },
    "com.google.common.collect.ForwardingImmutableList": {
        "com.google.common.collect.ForwardingImmutableList:<init>()": "/**\n* Constructs a ForwardingImmutableList instance.\n*/"
    },
    "com.google.common.collect.ForwardingImmutableMap": {
        "com.google.common.collect.ForwardingImmutableMap:<init>()": "/**\n* Private constructor for ForwardingImmutableMap, prevents instantiation.\n*/"
    },
    "com.google.common.collect.ForwardingImmutableSet": {
        "com.google.common.collect.ForwardingImmutableSet:<init>()": "/**\n* Private constructor for ForwardingImmutableSet, prevents instantiation.\n*/"
    },
    "com.google.common.collect.ForwardingListIterator": {
        "com.google.common.collect.ForwardingListIterator:add(java.lang.Object)": "/**\n* Adds an element to the collection.\n* @param element the element to be added, may be null\n*/",
        "com.google.common.collect.ForwardingListIterator:hasPrevious()": "/**\n* Checks if there is a previous element in the iteration.\n* @return true if a previous element exists, false otherwise\n*/",
        "com.google.common.collect.ForwardingListIterator:nextIndex()": "/**\n* Returns the index of the next element in the iterator.\n* @return index of the next element\n*/",
        "com.google.common.collect.ForwardingListIterator:previous()": "/**\n* Retrieves the previous element from the delegate.\n* @return the previous element or null if none exists\n*/",
        "com.google.common.collect.ForwardingListIterator:previousIndex()": "/**\n* Returns the previous index in the delegate collection.\n* @return index of the previous element, or -1 if none exists\n*/",
        "com.google.common.collect.ForwardingListIterator:set(java.lang.Object)": "/**\n* Sets the specified element in the delegate.\n* @param element the element to set, may be null\n*/",
        "com.google.common.collect.ForwardingListIterator:<init>()": "/**\n* Constructs a new instance of ForwardingListIterator.\n*/"
    },
    "com.google.common.collect.ForwardingListMultimap": {
        "com.google.common.collect.ForwardingListMultimap:delegate()": "/**\n* Returns the delegate ListMultimap instance.\n* @return ListMultimap containing key-value pairs\n*/",
        "com.google.common.collect.ForwardingListMultimap:get(java.lang.Object)": "/**\n* Retrieves values associated with the given key.\n* @param key the key for which values are retrieved\n* @return List of values or null if no values exist\n*/",
        "com.google.common.collect.ForwardingListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a given key in the map.\n* @param key the key whose values are to be replaced\n* @param values new values to associate with the key\n* @return updated list of values for the key\n*/",
        "com.google.common.collect.ForwardingListMultimap:<init>()": "/**\n* Initializes a new instance of ForwardingListMultimap.\n*/",
        "com.google.common.collect.ForwardingListMultimap:removeAll(java.lang.Object)": "/**\n* Removes all mappings for the specified key.\n* @param key the key whose mappings are to be removed\n* @return list of removed values\n*/"
    },
    "com.google.common.collect.ForwardingMultiset$StandardElementSet": {
        "com.google.common.collect.ForwardingMultiset$StandardElementSet:multiset()": "/**\n* Returns the current multiset instance.\n* @return the ForwardingMultiset instance\n*/",
        "com.google.common.collect.ForwardingMultiset$StandardElementSet:iterator()": "/**\n* Returns an iterator over elements in the multiset.\n* @return Iterator of elements from the multiset\n*/"
    },
    "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap": {
        "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap:forward()": "/**\n* Returns the current instance of the forwarding navigable map.\n* @return NavigableMap instance being forwarded\n*/",
        "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap:entryIterator()": "/**\n* Returns an iterator for the map's entries in descending order.\n* @return Iterator of map entries\n*/",
        "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap:replaceAll(java.util.function.BiFunction)": "/**\n* Replaces all entries in the map using the provided function.\n* @param function the function to update map entries\n*/"
    },
    "com.google.common.collect.ForwardingNavigableMap": {
        "com.google.common.collect.ForwardingNavigableMap:delegate()": "/**\n* Returns the delegate NavigableMap instance.\n* @return NavigableMap containing key-value pairs\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardPollFirstEntry()": "/**\n* Retrieves and removes the first entry from the entry set.\n* @return Entry object or null if the entry set is empty\n*/",
        "com.google.common.collect.ForwardingNavigableMap:lowerEntry(java.lang.Object)": "/**\n* Retrieves the highest entry with a key less than the specified key.\n* @param key the key to compare against\n* @return the lower entry or null if none exists\n*/",
        "com.google.common.collect.ForwardingNavigableMap:lowerKey(java.lang.Object)": "/**\n* Retrieves the lowest key less than the specified key.\n* @param key the key to compare against\n* @return the lower key or null if none exists\n*/",
        "com.google.common.collect.ForwardingNavigableMap:floorEntry(java.lang.Object)": "/**\n* Retrieves the floor entry for a given key from the delegate map.\n* @param key the key to find the floor entry for\n* @return Entry with the largest key less than or equal to the given key, or null if not found\n*/",
        "com.google.common.collect.ForwardingNavigableMap:floorKey(java.lang.Object)": "/**\n* Retrieves the greatest key less than or equal to the given key.\n* @param key the key to compare\n* @return the floor key or null if not found\n*/",
        "com.google.common.collect.ForwardingNavigableMap:ceilingEntry(java.lang.Object)": "/**\n* Retrieves the least entry greater than or equal to the specified key.\n* @param key the key to compare against\n* @return Entry object or null if no such entry exists\n*/",
        "com.google.common.collect.ForwardingNavigableMap:ceilingKey(java.lang.Object)": "/**\n* Retrieves the least key greater than or equal to the given key.\n* @param key the key to compare against\n* @return the ceiling key or null if none exists\n*/",
        "com.google.common.collect.ForwardingNavigableMap:higherEntry(java.lang.Object)": "/**\n* Retrieves the entry with the least key greater than the specified key.\n* @param key the key to compare against\n* @return Entry with a higher key or null if none exists\n*/",
        "com.google.common.collect.ForwardingNavigableMap:higherKey(java.lang.Object)": "/**\n* Retrieves the least key greater than the specified key.\n* @param key the key to compare against\n* @return the higher key or null if none exists\n*/",
        "com.google.common.collect.ForwardingNavigableMap:firstEntry()": "/**\n* Retrieves the first key-value pair from the delegate map.\n* @return Entry object or null if the map is empty\n*/",
        "com.google.common.collect.ForwardingNavigableMap:lastEntry()": "/**\n* Retrieves the last key-value entry from the delegate map.\n* @return Entry containing the last key-value pair or null if empty\n*/",
        "com.google.common.collect.ForwardingNavigableMap:pollFirstEntry()": "/**\n* Retrieves and removes the first entry from the map.\n* @return Entry object or null if the map is empty\n*/",
        "com.google.common.collect.ForwardingNavigableMap:pollLastEntry()": "/**\n* Retrieves and removes the last entry from the map.\n* @return Entry containing key-value or null if empty\n*/",
        "com.google.common.collect.ForwardingNavigableMap:descendingMap()": "/**\n* Returns a NavigableMap view of the map in descending order.\n* @return NavigableMap with key-value pairs in descending order\n*/",
        "com.google.common.collect.ForwardingNavigableMap:navigableKeySet()": "/**\n* Returns a NavigableSet of keys from the delegate NavigableMap.\n* @return NavigableSet of keys\n*/",
        "com.google.common.collect.ForwardingNavigableMap:descendingKeySet()": "/**\n* Returns a NavigableSet of keys in descending order.\n* @return NavigableSet of keys from the delegate map\n*/",
        "com.google.common.collect.ForwardingNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a view of the portion of the map between specified keys.\n* @param fromKey starting key for the subMap\n* @param fromInclusive true if the starting key is included\n* @param toKey ending key for the subMap\n* @param toInclusive true if the ending key is included\n* @return NavigableMap view of the specified range\n*/",
        "com.google.common.collect.ForwardingNavigableMap:headMap(java.lang.Object,boolean)": "/**\n* Returns a view of the portion of the map up to the specified key.\n* @param toKey the key up to which the map is viewed\n* @param inclusive true if the key is included in the view\n* @return NavigableMap view of key-value pairs\n*/",
        "com.google.common.collect.ForwardingNavigableMap:tailMap(java.lang.Object,boolean)": "/**\n* Returns a view of the portion of the map from a key onwards.\n* @param fromKey the key to start the view from\n* @param inclusive true to include the fromKey, false otherwise\n* @return NavigableMap view of the tail portion\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardFirstEntry()": "/**\n* Retrieves the first entry from the entry set or null if empty.\n* @return Entry object or null if no entries exist\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardLowerKey(java.lang.Object)": "/**\n* Retrieves the lowest key less than the specified key.\n* @param key the key to compare against\n* @return the lower key or null if none exists\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardFloorKey(java.lang.Object)": "/**\n* Retrieves the largest key less than or equal to the specified key.\n* @param key the key to find the floor key for\n* @return the floor key or null if not found\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardCeilingKey(java.lang.Object)": "/**\n* Retrieves the ceiling key for the specified key.\n* @param key the key to find the ceiling for\n* @return the ceiling key or null if not found\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardHigherKey(java.lang.Object)": "/**\n* Retrieves the least key greater than the specified key.\n* @param key the key to compare against\n* @return the higher key or null if none exists\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardFirstKey()": "/**\n* Returns the first key from the map.\n* @return first key of the map\n* @throws NoSuchElementException if the map is empty\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardLastKey()": "/**\n* Retrieves the last key from the map.\n* @return last key of the map\n* @throws NoSuchElementException if the map is empty\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardLastEntry()": "/**\n* Retrieves the last entry from the map or null if empty.\n* @return Entry object or null if no entries exist\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardPollLastEntry()": "/**\n* Polls and returns the last entry from the descending map.\n* @return Entry object or null if the map is empty\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardDescendingKeySet()": "/**\n* Retrieves a set of keys in descending order from the map.\n* @return NavigableSet of keys in descending order\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardSubMap(java.lang.Object,java.lang.Object)": "/**\n* Returns a view of the map between specified keys.\n* @param fromKey starting key (inclusive)\n* @param toKey ending key (exclusive)\n* @return SortedMap view of the specified range\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardLowerEntry(java.lang.Object)": "/**\n* Retrieves the highest entry less than the specified key.\n* @param key the key to compare against\n* @return Entry object or null if no such entry exists\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardFloorEntry(java.lang.Object)": "/**\n* Retrieves the largest entry less than or equal to the specified key.\n* @param key the key to compare with\n* @return Entry object or null if no such entry exists\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardHeadMap(java.lang.Object)": "/**\n* Returns a view of the map up to the specified key (exclusive).\n* @param toKey the key up to which the map is viewed\n* @return SortedMap view of key-value pairs\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardCeilingEntry(java.lang.Object)": "/**\n* Retrieves the ceiling entry for a given key.\n* @param key the key to find the ceiling entry for\n* @return Entry object or null if not found\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardHigherEntry(java.lang.Object)": "/**\n* Retrieves the first entry greater than the specified key.\n* @param key the key to compare against\n* @return Entry object or null if no greater entry exists\n*/",
        "com.google.common.collect.ForwardingNavigableMap:standardTailMap(java.lang.Object)": "/**\n* Returns a view of the map from the specified key onwards.\n* @param fromKey the key to start the view from\n* @return SortedMap view of the tail portion\n*/",
        "com.google.common.collect.ForwardingNavigableMap:<init>()": "/**\n* Constructs a new instance of ForwardingNavigableMap.\n*/"
    },
    "com.google.common.collect.ForwardingNavigableSet": {
        "com.google.common.collect.ForwardingNavigableSet:standardFirst()": "/**\n* Retrieves the first element from the iterator.\n* @return the first element of type E\n*/",
        "com.google.common.collect.ForwardingNavigableSet:standardPollFirst()": "/**\n* Retrieves and removes the first element from the iterator.\n* @return the first element or null if the iterator is empty\n*/",
        "com.google.common.collect.ForwardingNavigableSet:delegate()": "/**\n* Returns the underlying NavigableSet instance.\n* @return NavigableSet<E> representing the delegate\n*/",
        "com.google.common.collect.ForwardingNavigableSet:lower(java.lang.Object)": "/**\n* Retrieves the greatest element less than the specified element.\n* @param e the element to compare against\n* @return the lower element or null if none exists\n*/",
        "com.google.common.collect.ForwardingNavigableSet:floor(java.lang.Object)": "/**\n* Returns the greatest element less than or equal to the given element.\n* @param e the element to compare\n* @return the greatest element or null if none exists\n*/",
        "com.google.common.collect.ForwardingNavigableSet:ceiling(java.lang.Object)": "/**\n* Returns the least element greater than or equal to the given element.\n* @param e the element to compare\n* @return the ceiling element or null if none exists\n*/",
        "com.google.common.collect.ForwardingNavigableSet:higher(java.lang.Object)": "/**\n* Retrieves the least element greater than the specified element.\n* @param e the element to compare\n* @return the higher element or null if none exists\n*/",
        "com.google.common.collect.ForwardingNavigableSet:pollFirst()": "/**\n* Retrieves and removes the first element from the set.\n* @return the first element or null if the set is empty\n*/",
        "com.google.common.collect.ForwardingNavigableSet:pollLast()": "/**\n* Retrieves and removes the last element or returns null if empty.\n* @return last element or null if the set is empty\n*/",
        "com.google.common.collect.ForwardingNavigableSet:descendingSet()": "/**\n* Returns a NavigableSet view of the elements in descending order.\n* @return NavigableSet<E> in descending order from the delegate\n*/",
        "com.google.common.collect.ForwardingNavigableSet:descendingIterator()": "/**\n* Returns an iterator over the elements in descending order.\n* @return Iterator for elements in descending order from the delegate set\n*/",
        "com.google.common.collect.ForwardingNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a view of the portion of this set between two elements.\n* @param fromElement starting element (inclusive/exclusive based on fromInclusive)\n* @param fromInclusive true if fromElement is included; false otherwise\n* @param toElement ending element (inclusive/exclusive based on toInclusive)\n* @param toInclusive true if toElement is included; false otherwise\n* @return NavigableSet view of the specified range\n*/",
        "com.google.common.collect.ForwardingNavigableSet:headSet(java.lang.Object,boolean)": "/**\n* Returns a view of the portion of this set whose elements are less than (or equal to) toElement.\n* @param toElement the high endpoint (exclusive or inclusive)\n* @param inclusive true if the endpoint is to be included\n* @return NavigableSet view of the specified range\n*/",
        "com.google.common.collect.ForwardingNavigableSet:tailSet(java.lang.Object,boolean)": "/**\n* Returns a view of the portion of this set whose elements are greater than or equal to fromElement.\n* @param fromElement the starting element for the tail set\n* @param inclusive whether the starting element is included\n* @return NavigableSet view of the tail set\n*/",
        "com.google.common.collect.ForwardingNavigableSet:standardPollLast()": "/**\n* Retrieves and removes the last element from a collection.\n* @return the last element or null if empty\n*/",
        "com.google.common.collect.ForwardingNavigableSet:standardLast()": "/**\n* Retrieves the last element using a descending iterator.\n* @return last element of the collection\n*/",
        "com.google.common.collect.ForwardingNavigableSet:standardSubSet(java.lang.Object,java.lang.Object)": "/**\n* Returns a view of the subset between two elements.\n* @param fromElement starting element (inclusive)\n* @param toElement ending element (exclusive)\n* @return SortedSet view of the specified range\n*/",
        "com.google.common.collect.ForwardingNavigableSet:standardLower(java.lang.Object)": "/**\n* Retrieves the greatest element less than the specified value.\n* @param e the value to compare against\n* @return the greatest element less than e or null if none exists\n*/",
        "com.google.common.collect.ForwardingNavigableSet:standardFloor(java.lang.Object)": "/**\n* Returns the largest element less than or equal to the specified element.\n* @param e the element to compare\n* @return the floor element or null if not found\n*/",
        "com.google.common.collect.ForwardingNavigableSet:standardHeadSet(java.lang.Object)": "/**\n* Returns a view of the set containing elements less than toElement.\n* @param toElement the high endpoint (exclusive)\n* @return SortedSet view of the specified range\n*/",
        "com.google.common.collect.ForwardingNavigableSet:standardCeiling(java.lang.Object)": "/**\n* Retrieves the ceiling element of the specified value.\n* @param e value to find the ceiling for\n* @return ceiling element or null if not found\n*/",
        "com.google.common.collect.ForwardingNavigableSet:standardHigher(java.lang.Object)": "/**\n* Retrieves the next higher element in the set after the specified element.\n* @param e the element to find the next higher value for\n* @return the next higher element or null if none exists\n*/",
        "com.google.common.collect.ForwardingNavigableSet:standardSubSet(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a subset of elements within the specified range.\n* @param fromElement starting element of the subset\n* @param fromInclusive whether the starting element is included\n* @param toElement ending element of the subset\n* @param toInclusive whether the ending element is included\n* @return NavigableSet of the subset\n*/",
        "com.google.common.collect.ForwardingNavigableSet:standardTailSet(java.lang.Object)": "/**\n* Returns a view of the set from the specified element onward, inclusive.\n* @param fromElement starting element for the tail set\n* @return SortedSet view of the tail set\n*/",
        "com.google.common.collect.ForwardingNavigableSet:<init>()": "/**\n* Initializes a new instance of ForwardingNavigableSet.\n*/"
    },
    "com.google.common.collect.ForwardingQueue": {
        "com.google.common.collect.ForwardingQueue:standardOffer(java.lang.Object)": "/**\n* Attempts to add an element; returns false if an exception occurs.\n* @param e element to add\n* @return true if added successfully, false if an exception is caught\n*/",
        "com.google.common.collect.ForwardingQueue:<init>()": "/**\n* Initializes a new instance of ForwardingQueue.\n*/",
        "com.google.common.collect.ForwardingQueue:delegate()": "/**\n* Provides the underlying BlockingQueue instance.\n* @return Queue of type E representing the delegate\n*/",
        "com.google.common.collect.ForwardingQueue:offer(java.lang.Object)": "/**\n* Offers an element to the queue.\n* @param o element to be added, may be null\n* @return true if the element was added, false otherwise\n*/",
        "com.google.common.collect.ForwardingQueue:poll()": "/**\n* Retrieves and removes the head of the queue, or returns null if empty.\n* @return element of type E or null if the queue is empty\n*/",
        "com.google.common.collect.ForwardingQueue:remove()": "/**\n* Removes and returns an element from the queue.\n* @return Element of type E removed from the queue\n*/",
        "com.google.common.collect.ForwardingQueue:peek()": "/**\n* Retrieves the head element without removing it.\n* @return the head element or null if the queue is empty\n*/",
        "com.google.common.collect.ForwardingQueue:element()": "/**\n* Returns the head element of the queue.\n* @return head element of type E or null if empty\n*/",
        "com.google.common.collect.ForwardingQueue:standardPoll()": "/**\n* Retrieves and removes an element from the queue or returns null if empty.\n* @return Element of type E or null if the queue is empty\n*/",
        "com.google.common.collect.ForwardingQueue:standardPeek()": "/**\n* Retrieves the head element without removing it.\n* @return head element of type E or null if queue is empty\n*/"
    },
    "com.google.common.collect.ForwardingSet": {
        "com.google.common.collect.ForwardingSet:equals(java.lang.Object)": "/**\n* Checks equality with another object.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ForwardingSet:hashCode()": "/**\n* Returns the hash code of the delegate object.\n* @return hash code as an integer\n*/",
        "com.google.common.collect.ForwardingSet:standardHashCode()": "/**\n* Computes the standard hash code for the current object.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.ForwardingSet:standardEquals(java.lang.Object)": "/**\n* Checks equality of the current object with another object.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ForwardingSet:<init>()": "/**\n* Initializes a new instance of ForwardingSet.\n*/",
        "com.google.common.collect.ForwardingSet:standardRemoveAll(java.util.Collection)": "/**\n* Removes all elements in the collection from this set.\n* @param collection elements to remove\n* @return true if any elements were removed, false otherwise\n*/"
    },
    "com.google.common.collect.ForwardingSortedMap": {
        "com.google.common.collect.ForwardingSortedMap:unsafeCompare(java.util.Comparator,java.lang.Object,java.lang.Object)": "/**\n* Compares two objects using a provided comparator or natural ordering.\n* @param comparator optional comparator for custom comparison\n* @param o1 first object to compare\n* @param o2 second object to compare\n* @return comparison result as an integer\n*/",
        "com.google.common.collect.ForwardingSortedMap:delegate()": "/**\n* Returns an unmodifiable sorted map of key-value pairs.\n* @return unmodifiable SortedMap of type K and V\n*/",
        "com.google.common.collect.ForwardingSortedMap:<init>()": "/**\n* Initializes a new instance of the ForwardingSortedMap class.\n*/",
        "com.google.common.collect.ForwardingSortedMap:comparator()": "/**\n* Retrieves the comparator from the delegate.\n* @return Comparator for the keys or null if not present\n*/",
        "com.google.common.collect.ForwardingSortedMap:firstKey()": "/**\n* Retrieves the first key from an unmodifiable sorted map.\n* @return the first key of type K from the map\n*/",
        "com.google.common.collect.ForwardingSortedMap:headMap(java.lang.Object)": "/**\n* Returns a view of the portion of the map whose keys are less than toKey.\n* @param toKey upper key limit for the head map\n* @return SortedMap of key-value pairs less than toKey\n*/",
        "com.google.common.collect.ForwardingSortedMap:lastKey()": "/**\n* Retrieves the last key from the sorted map.\n* @return last key of type K from the unmodifiable map\n*/",
        "com.google.common.collect.ForwardingSortedMap:subMap(java.lang.Object,java.lang.Object)": "/**\n* Returns a view of the portion of the map between fromKey and toKey.\n* @param fromKey inclusive starting key, @param toKey exclusive ending key\n* @return SortedMap view of the specified range\n*/",
        "com.google.common.collect.ForwardingSortedMap:tailMap(java.lang.Object)": "/**\n* Returns a view of the portion of the map whose keys are greater than or equal to fromKey.\n* @param fromKey the key to start the view from\n* @return SortedMap of key-value pairs from fromKey onwards\n*/",
        "com.google.common.collect.ForwardingSortedMap:standardContainsKey(java.lang.Object)": "/**\n* Checks if the map contains a specified key.\n* @param key the key to search for\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.ForwardingSortedMap:standardSubMap(java.lang.Object,java.lang.Object)": "/**\n* Returns a view of the map between fromKey and toKey.\n* @param fromKey starting key for the submap\n* @param toKey ending key for the submap\n* @return SortedMap of key-value pairs within the specified range\n*/"
    },
    "com.google.common.collect.ForwardingSortedMultiset": {
        "com.google.common.collect.ForwardingSortedMultiset:delegate()": "/**\n* Returns the delegate SortedMultiset instance.\n* @return SortedMultiset of type E\n*/",
        "com.google.common.collect.ForwardingSortedMultiset:elementSet()": "/**\n* Returns a NavigableSet view of the elements in the multiset.\n* @return NavigableSet of type E from the delegate\n*/",
        "com.google.common.collect.ForwardingSortedMultiset:comparator()": "/**\n* Returns the comparator for the delegate SortedMultiset.\n* @return Comparator for elements of type E\n*/",
        "com.google.common.collect.ForwardingSortedMultiset:descendingMultiset()": "/**\n* Retrieves a descending view of the multiset.\n* @return SortedMultiset of type E in descending order\n*/",
        "com.google.common.collect.ForwardingSortedMultiset:firstEntry()": "/**\n* Retrieves the first entry from the sorted multiset.\n* @return Entry of type E or null if the multiset is empty\n*/",
        "com.google.common.collect.ForwardingSortedMultiset:lastEntry()": "/**\n* Retrieves the last entry from the delegate SortedMultiset.\n* @return Entry of type E or null if the multiset is empty\n*/",
        "com.google.common.collect.ForwardingSortedMultiset:pollFirstEntry()": "/**\n* Retrieves and removes the first entry from the sorted multiset.\n* @return Entry of type E or null if the multiset is empty\n*/",
        "com.google.common.collect.ForwardingSortedMultiset:pollLastEntry()": "/**\n* Retrieves and removes the last entry from the sorted multiset.\n* @return Entry of type E or null if empty\n*/",
        "com.google.common.collect.ForwardingSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Retrieves a head multiset bounded by upperBound and boundType.\n* @param upperBound the upper limit for the multiset\n* @param boundType specifies inclusive or exclusive bound\n* @return SortedMultiset of type E limited by the upper bound\n*/",
        "com.google.common.collect.ForwardingSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Retrieves a sub-multiset defined by bounds.\n* @param lowerBound lower limit for the sub-multiset\n* @param lowerBoundType type of the lower bound (inclusive/exclusive)\n* @param upperBound upper limit for the sub-multiset\n* @param upperBoundType type of the upper bound (inclusive/exclusive)\n* @return SortedMultiset of type E within the specified bounds\n*/",
        "com.google.common.collect.ForwardingSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Retrieves a tail multiset starting from a lower bound.\n* @param lowerBound the starting element of the tail multiset\n* @param boundType type of bound (inclusive/exclusive)\n* @return SortedMultiset of type E from lowerBound onwards\n*/",
        "com.google.common.collect.ForwardingSortedMultiset:standardSubMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Retrieves a sub-multiset bounded by lower and upper limits.\n* @param lowerBound starting element for the sub-multiset\n* @param lowerBoundType type of lower bound (inclusive/exclusive)\n* @param upperBound ending element for the sub-multiset\n* @param upperBoundType type of upper bound (inclusive/exclusive)\n* @return SortedMultiset within specified bounds\n*/",
        "com.google.common.collect.ForwardingSortedMultiset:<init>()": "/**\n* Initializes a new instance of ForwardingSortedMultiset.\n*/",
        "com.google.common.collect.ForwardingSortedMultiset:standardFirstEntry()": "/**\n* Retrieves the first entry in the multiset or null if empty.\n* @return Entry object or null if no entries exist\n*/",
        "com.google.common.collect.ForwardingSortedMultiset:standardLastEntry()": "/**\n* Retrieves the last entry of the multiset or null if empty.\n* @return Entry containing element and count or null if none exists\n*/",
        "com.google.common.collect.ForwardingSortedMultiset:standardPollFirstEntry()": "/**\n* Retrieves and removes the first entry from the multiset.\n* @return Entry object or null if multiset is empty\n*/",
        "com.google.common.collect.ForwardingSortedMultiset:standardPollLastEntry()": "/**\n* Removes and returns the last entry from the multiset.\n* @return Entry containing element and count or null if empty\n*/"
    },
    "com.google.common.collect.ForwardingSortedSetMultimap": {
        "com.google.common.collect.ForwardingSortedSetMultimap:delegate()": "/**\n* Returns the delegate SortedSetMultimap instance.\n* @return SortedSetMultimap of type K and V\n*/",
        "com.google.common.collect.ForwardingSortedSetMultimap:get(java.lang.Object)": "/**\n* Retrieves a sorted set of values for the specified key.\n* @param key the key to lookup values for\n* @return SortedSet of values associated with the key\n*/",
        "com.google.common.collect.ForwardingSortedSetMultimap:removeAll(java.lang.Object)": "/**\n* Removes all values associated with the specified key.\n* @param key the key whose associated values are to be removed\n* @return a SortedSet of removed values\n*/",
        "com.google.common.collect.ForwardingSortedSetMultimap:valueComparator()": "/**\n* Returns the value comparator from the delegate SortedSetMultimap.\n* @return Comparator for values or null if not available\n*/",
        "com.google.common.collect.ForwardingSortedSetMultimap:<init>()": "/**\n* Initializes a new instance of ForwardingSortedSetMultimap.\n*/",
        "com.google.common.collect.ForwardingSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a specified key using the delegate.\n* @param key the key whose values are to be replaced\n* @param values the new values to associate with the key\n* @return SortedSet of replaced values\n*/"
    },
    "com.google.common.collect.ForwardingTable": {
        "com.google.common.collect.ForwardingTable:cellSet()": "/**\n* Returns a set of cells from the delegate.\n* @return Set of Cell objects containing row, column, and value\n*/",
        "com.google.common.collect.ForwardingTable:clear()": "/**\n* Clears all elements from the delegate collection.\n*/",
        "com.google.common.collect.ForwardingTable:column(java.lang.Object)": "/**\n* Retrieves a column from the delegate using the specified key.\n* @param columnKey the key for the column to retrieve\n* @return a map representing the column values\n*/",
        "com.google.common.collect.ForwardingTable:columnKeySet()": "/**\n* Returns a set of column keys from the delegate.\n* @return Set of column keys\n*/",
        "com.google.common.collect.ForwardingTable:columnMap()": "/**\n* Returns a map of column values indexed by column and row.\n* @return a nested map with column and row keys\n*/",
        "com.google.common.collect.ForwardingTable:contains(java.lang.Object,java.lang.Object)": "/**\n* Checks if the specified row and column keys are present.\n* @param rowKey the key for the row\n* @param columnKey the key for the column\n* @return true if both keys exist, false otherwise\n*/",
        "com.google.common.collect.ForwardingTable:containsColumn(java.lang.Object)": "/**\n* Checks if the specified column key exists.\n* @param columnKey the key of the column to check\n* @return true if the column exists, false otherwise\n*/",
        "com.google.common.collect.ForwardingTable:containsRow(java.lang.Object)": "/**\n* Checks if a row exists for the given key.\n* @param rowKey key of the row to check\n* @return true if the row exists, false otherwise\n*/",
        "com.google.common.collect.ForwardingTable:containsValue(java.lang.Object)": "/**\n* Checks if the collection contains the specified value.\n* @param value the value to check for presence\n* @return true if value is found, false otherwise\n*/",
        "com.google.common.collect.ForwardingTable:get(java.lang.Object,java.lang.Object)": "/**\n* Retrieves value by row and column keys.\n* @param rowKey the key for the row\n* @param columnKey the key for the column\n* @return value associated with the keys or null if not found\n*/",
        "com.google.common.collect.ForwardingTable:isEmpty()": "/**\n* Checks if the underlying collection is empty.\n* @return true if empty, false otherwise\n*/",
        "com.google.common.collect.ForwardingTable:put(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Inserts a value into a specified row and column.\n* @param rowKey the key for the row\n* @param columnKey the key for the column\n* @param value the value to insert\n* @return previous value associated with the keys or null if none\n*/",
        "com.google.common.collect.ForwardingTable:putAll(com.google.common.collect.Table)": "/**\n* Inserts all entries from the specified table into the current table.\n* @param table the source table containing entries to insert\n*/",
        "com.google.common.collect.ForwardingTable:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes the value at the specified row and column keys.\n* @param rowKey key for the row; may be null\n* @param columnKey key for the column; may be null\n* @return the removed value or null if absent\n*/",
        "com.google.common.collect.ForwardingTable:row(java.lang.Object)": "/**\n* Retrieves a map of values for the specified row key.\n* @param rowKey the key identifying the row\n* @return a map of values associated with the row key\n*/",
        "com.google.common.collect.ForwardingTable:rowKeySet()": "/**\n* Returns a set of row keys from the delegate.\n* @return Set of row keys\n*/",
        "com.google.common.collect.ForwardingTable:rowMap()": "/**\n* Returns a map of rows, each mapping column keys to their corresponding values.\n* @return Map of row keys to column-value maps\n*/",
        "com.google.common.collect.ForwardingTable:size()": "/**\n* Returns the number of elements in the collection.\n* @return the size of the collection as an integer\n*/",
        "com.google.common.collect.ForwardingTable:values()": "/**\n* Returns a collection of values from the delegate.\n* @return Collection of values\n*/",
        "com.google.common.collect.ForwardingTable:equals(java.lang.Object)": "/**\n* Checks if this object is equal to the specified object.\n* @param obj the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ForwardingTable:hashCode()": "/**\n* Returns the hash code of the delegate object.\n* @return hash code as an integer\n*/",
        "com.google.common.collect.ForwardingTable:<init>()": "/**\n* Default constructor for ForwardingTable class.\n*/"
    },
    "com.google.common.collect.GeneralRange": {
        "com.google.common.collect.GeneralRange:hasUpperBound()": "/**\n* Checks if an upper bound is set.\n* @return true if upper bound exists, false otherwise\n*/",
        "com.google.common.collect.GeneralRange:getUpperEndpoint()": "/**\n* Retrieves the upper endpoint value.\n* @return upper endpoint of type T or null if not set\n*/",
        "com.google.common.collect.GeneralRange:hasLowerBound()": "/**\n* Checks if a lower bound is set.\n* @return true if a lower bound exists, false otherwise\n*/",
        "com.google.common.collect.GeneralRange:getLowerEndpoint()": "/**\n* Retrieves the lower endpoint value.\n* @return the lower endpoint of type T or null if not set\n*/",
        "com.google.common.collect.GeneralRange:getLowerBoundType()": "/**\n* Retrieves the lower bound type of the current object.\n* @return BoundType representing the lower bound\n*/",
        "com.google.common.collect.GeneralRange:getUpperBoundType()": "/**\n* Retrieves the upper bound type.\n* @return BoundType representing the upper bound\n*/",
        "com.google.common.collect.GeneralRange:toString()": "/**\n* Returns a string representation of the bounded range with comparator and endpoints.\n* @return formatted string of the range with bounds\n*/",
        "com.google.common.collect.GeneralRange:comparator()": "/**\n* Returns the comparator used for sorting elements.\n* @return Comparator for elements of type T\n*/",
        "com.google.common.collect.GeneralRange:<init>(java.util.Comparator,boolean,java.lang.Object,com.google.common.collect.BoundType,boolean,java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Constructs a GeneralRange with specified bounds and comparator.\n* @param comparator comparator for range endpoints\n* @param hasLowerBound indicates if lower bound exists\n* @param lowerEndpoint lower bound value, may be null\n* @param lowerBoundType type of lower bound\n* @param hasUpperBound indicates if upper bound exists\n* @param upperEndpoint upper bound value, may be null\n* @param upperBoundType type of upper bound\n*/",
        "com.google.common.collect.GeneralRange:tooLow(java.lang.Object)": "/**\n* Checks if a value is below the lower bound.\n* @param t nullable value to compare against the lower bound\n* @return true if below the lower bound, false otherwise\n*/",
        "com.google.common.collect.GeneralRange:tooHigh(java.lang.Object)": "/**\n* Checks if the value exceeds the upper bound.\n* @param t nullable input of type T\n* @return true if t is greater than the upper bound, false otherwise\n*/",
        "com.google.common.collect.GeneralRange:equals(java.lang.Object)": "/**\n* Compares this GeneralRange object with another for equality.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.GeneralRange:hashCode()": "/**\n* Computes hash code based on comparator and endpoints' values.\n* @return hash code as an integer\n*/",
        "com.google.common.collect.GeneralRange:all(java.util.Comparator)": "/**\n* Creates a GeneralRange with no bounds.\n* @param comparator comparator for range endpoints\n* @return GeneralRange object with open bounds\n*/",
        "com.google.common.collect.GeneralRange:downTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Creates a downward range from the specified endpoint.\n* @param comparator for ordering elements\n* @param endpoint starting point of the range\n* @param boundType type of the range's lower bound\n* @return GeneralRange object representing the range\n*/",
        "com.google.common.collect.GeneralRange:upTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Creates a GeneralRange up to a specified endpoint.\n* @param comparator for ordering elements\n* @param endpoint upper bound value\n* @param boundType type of upper bound\n* @return GeneralRange object representing the range\n*/",
        "com.google.common.collect.GeneralRange:range(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Creates a GeneralRange with specified bounds and comparator.\n* @param comparator comparator for range endpoints\n* @param lower lower bound value, may be null\n* @param lowerType type of lower bound\n* @param upper upper bound value, may be null\n* @param upperType type of upper bound\n* @return GeneralRange object with defined bounds\n*/",
        "com.google.common.collect.GeneralRange:intersect(com.google.common.collect.GeneralRange)": "/**\n* Computes the intersection of two GeneralRange objects.\n* @param other the range to intersect with\n* @return a new GeneralRange representing the intersection\n*/",
        "com.google.common.collect.GeneralRange:isEmpty()": "/**\n* Checks if bounds are empty based on upper and lower limit conditions.\n* @return true if bounds are empty, false otherwise\n*/",
        "com.google.common.collect.GeneralRange:contains(java.lang.Object)": "/**\n* Checks if value is within bounds.\n* @param t value to check; returns true if within bounds, false otherwise\n*/",
        "com.google.common.collect.GeneralRange:from(com.google.common.collect.Range)": "/**\n* Creates a GeneralRange from a given Range object.\n* @param range the Range to convert\n* @return GeneralRange representation of the input Range\n*/",
        "com.google.common.collect.GeneralRange:reverse()": "/**\n* Returns a reversed GeneralRange instance.\n* @return reversed GeneralRange or cached instance if already created\n*/"
    },
    "com.google.common.collect.HashBasedTable$Factory": {
        "com.google.common.collect.HashBasedTable$Factory:<init>(int)": "/**\n* Initializes a Factory with the specified expected size.\n* @param expectedSize anticipated number of items to be produced\n*/",
        "com.google.common.collect.HashBasedTable$Factory:get()": "/**\n* Returns a LinkedHashMap with the specified expected size.\n* @return Map initialized with calculated capacity\n*/"
    },
    "com.google.common.collect.StandardTable": {
        "com.google.common.collect.StandardTable:<init>(java.util.Map,com.google.common.base.Supplier)": "/**\n* Constructs a StandardTable with a backing map and a factory for creating maps.\n* @param backingMap the initial map structure\n* @param factory a supplier for creating new map instances\n*/",
        "com.google.common.collect.StandardTable:columnMap()": "/**\n* Retrieves the column map, initializing it if null.\n* @return a Map of column data structures\n*/",
        "com.google.common.collect.StandardTable:columnKeySet()": "/**\n* Returns the set of column keys, initializing if null.\n* @return Set of column keys\n*/",
        "com.google.common.collect.StandardTable:column(java.lang.Object)": "/**\n* Returns a map view of the specified column.\n* @param columnKey key identifying the column\n* @return Map of the column's entries\n*/",
        "com.google.common.collect.StandardTable:row(java.lang.Object)": "/**\n* Returns a map representing the row associated with the given key.\n* @param rowKey the key for the desired row\n* @return a map of column-value pairs for the specified row\n*/",
        "com.google.common.collect.StandardTable:clear()": "/**\n* Clears all entries from the backing map.\n*/",
        "com.google.common.collect.StandardTable:size()": "/**\n* Returns the total number of entries in all maps.\n* @return total count of entries across backing maps\n*/",
        "com.google.common.collect.StandardTable:isEmpty()": "/**\n* Checks if the backing map is empty.\n* @return true if the map has no entries, false otherwise\n*/",
        "com.google.common.collect.StandardTable:createColumnKeyIterator()": "/**\n* Creates an iterator for column keys.\n* @return Iterator for column keys of type C\n*/",
        "com.google.common.collect.StandardTable:getOrCreate(java.lang.Object)": "/**\n* Retrieves or creates a map for the given row key.\n* @param rowKey identifier for the row\n* @return existing or newly created map associated with the row key\n*/",
        "com.google.common.collect.StandardTable:removeColumn(java.lang.Object)": "/**\n* Removes specified column from backing map and returns removed values.\n* @param column the column to remove\n* @return map of removed values keyed by row identifiers\n*/",
        "com.google.common.collect.StandardTable:cellIterator()": "/**\n* Returns an iterator for traversing cells in the structure.\n* @return Iterator of Cell objects\n*/",
        "com.google.common.collect.StandardTable:createRowMap()": "/**\n* Creates and returns a nested map structure for rows and columns.\n* @return a Map of row keys to column maps\n*/",
        "com.google.common.collect.StandardTable:containsValue(java.lang.Object)": "/**\n* Checks if the map contains the specified non-null value.\n* @param value the value to search for\n* @return true if found, false if null or not present\n*/",
        "com.google.common.collect.StandardTable:put(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Puts a value in the map for the specified row and column keys.\n* @param rowKey identifier for the row\n* @param columnKey identifier for the column\n* @param value the value to be stored\n* @return previous value associated with the column key or null\n*/",
        "com.google.common.collect.StandardTable:rowMap()": "/**\n* Returns a map of rows to columns, creating it if not already initialized.\n* @return Map of row keys to column maps\n*/",
        "com.google.common.collect.StandardTable:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes a value by row and column keys from a backing map.\n* @param rowKey key for the row; if null, returns null\n* @param columnKey key for the column; if null, returns null\n* @return removed value or null if not found\n*/",
        "com.google.common.collect.StandardTable:containsColumn(java.lang.Object)": "/**\n* Checks if a column exists in any map of the backing collection.\n* @param columnKey the key of the column to check\n* @return true if the column exists, false otherwise\n*/",
        "com.google.common.collect.StandardTable:containsRow(java.lang.Object)": "/**\n* Checks if a row exists by its key.\n* @param rowKey the key of the row to check\n* @return true if the row exists, false otherwise\n*/",
        "com.google.common.collect.StandardTable:cellSet()": "/**\n* Returns a set of cells from the superclass.\n* @return Set of Cell objects\n*/",
        "com.google.common.collect.StandardTable:values()": "/**\n* Returns a collection of values from the superclass.\n* @return Collection of values\n*/",
        "com.google.common.collect.StandardTable:cellSpliterator()": "/**\n* Creates a Spliterator for immutable cells from a backing map's entries.\n* @return Spliterator of Cell objects\n*/",
        "com.google.common.collect.StandardTable:rowKeySet()": "/**\n* Retrieves the set of row keys from the row map.\n* @return Set of row keys\n*/",
        "com.google.common.collect.StandardTable:get(java.lang.Object,java.lang.Object)": "/**\n* Retrieves a value from a map using row and column keys.\n* @param rowKey the key for the row; may be null\n* @param columnKey the key for the column; may be null\n* @return value at specified keys or null if either key is null\n*/",
        "com.google.common.collect.StandardTable:contains(java.lang.Object,java.lang.Object)": "/**\n* Checks if a value exists in the specified row and column.\n* @param rowKey the key for the row\n* @param columnKey the key for the column\n* @return true if exists, false if rowKey or columnKey is null or not found\n*/",
        "com.google.common.collect.StandardTable:containsMapping(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Checks if a value matches the mapping for given row and column keys.\n* @param rowKey the key for the row; may be null\n* @param columnKey the key for the column; may be null\n* @param value the value to check against; may be null\n* @return true if value matches, false otherwise\n*/",
        "com.google.common.collect.StandardTable:removeMapping(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Removes mapping if it exists; returns true if successful.\n* @param rowKey key for the row; may be null\n* @param columnKey key for the column; may be null\n* @param value value to check; may be null\n* @return true if mapping was removed, false otherwise\n*/"
    },
    "com.google.common.collect.HashBiMap$BiEntry": {
        "com.google.common.collect.HashBiMap$BiEntry:<init>(java.lang.Object,int,java.lang.Object,int)": "/**\n* Constructs a BiEntry with key, value, and their respective hashes.\n* @param key the entry key\n* @param keyHash hash of the key\n* @param value the entry value\n* @param valueHash hash of the value\n*/"
    },
    "com.google.common.collect.HashBiMap$Inverse$InverseKeySet": {
        "com.google.common.collect.HashBiMap$Inverse$InverseKeySet:iterator()": "/**\n* Returns an iterator for the values in the collection.\n* @return Iterator of values from the entries\n*/",
        "com.google.common.collect.HashBiMap$Inverse$InverseKeySet:remove(java.lang.Object)": "/**\n* Removes the specified object if present.\n* @param o the object to remove, or null to remove a default entry\n* @return true if removed, false if not found\n*/"
    },
    "com.google.common.collect.HashBiMap$Inverse": {
        "com.google.common.collect.HashBiMap$Inverse:size()": "/**\n* Returns the current size of the collection.\n* @return the number of elements in the collection\n*/",
        "com.google.common.collect.HashBiMap$Inverse:forward()": "/**\n* Returns the forward BiMap instance.\n* @return the current HashBiMap instance\n*/",
        "com.google.common.collect.HashBiMap$Inverse:put(java.lang.Object,java.lang.Object)": "/**\n* Inserts a value with a key and returns the previous value associated with the key.\n* @param value the value to insert\n* @param key the key for the value\n* @return previous value associated with the key or null if none\n*/",
        "com.google.common.collect.HashBiMap$Inverse:forcePut(java.lang.Object,java.lang.Object)": "/**\n* Inserts a value with a key, forcing the operation.\n* @param value the value to insert\n* @param key the associated key\n* @return the previous value associated with the key, or null\n*/",
        "com.google.common.collect.HashBiMap$Inverse:keySet()": "/**\n* Returns a set view of the keys in the map.\n* @return Set of keys contained in the map\n*/",
        "com.google.common.collect.HashBiMap$Inverse:entryIterator()": "/**\n* Returns an iterator for entries with keys and values inverted.\n* @return Iterator of Entry<V, K> with key-value pairs swapped\n*/",
        "com.google.common.collect.HashBiMap$Inverse:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; throws exception if invoked.\n* @param in ObjectInputStream for reading serialized object\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.collect.HashBiMap$Inverse:clear()": "/**\n* Clears all entries from the forward BiMap instance.\n*/",
        "com.google.common.collect.HashBiMap$Inverse:containsKey(java.lang.Object)": "/**\n* Checks if the specified value exists in the map.\n* @param value the value to check for presence\n* @return true if the value is present, false otherwise\n*/",
        "com.google.common.collect.HashBiMap$Inverse:inverse()": "/**\n* Returns the inverse BiMap instance.\n* @return the forward BiMap instance\n*/",
        "com.google.common.collect.HashBiMap$Inverse:values()": "/**\n* Retrieves the set of keys from the forward BiMap.\n* @return Set of keys in the BiMap\n*/",
        "com.google.common.collect.HashBiMap$Inverse:writeReplace()": "/**\n* Prepares the object for serialization by returning its inverse form.\n* @return InverseSerializedForm instance of the current HashBiMap\n*/",
        "com.google.common.collect.HashBiMap$Inverse:forEach(java.util.function.BiConsumer)": "/**\n* Applies action to each entry, reversing key-value pairs.\n* @param action the action to apply to each entry\n*/",
        "com.google.common.collect.HashBiMap$Inverse:replaceAll(java.util.function.BiFunction)": "/**\n* Replaces all entries using the provided function on values and keys.\n* @param function a BiFunction to transform values and keys\n*/",
        "com.google.common.collect.HashBiMap$Inverse:get(java.lang.Object)": "/**\n* Retrieves the key associated with a given value.\n* @param value the value to search for\n* @return the corresponding key or null if not found\n*/",
        "com.google.common.collect.HashBiMap$Inverse:remove(java.lang.Object)": "/**\n* Removes entry by value and returns its key.\n* @param value the value to remove\n* @return the associated key or null if not found\n*/"
    },
    "com.google.common.collect.HashBiMap$InverseSerializedForm": {
        "com.google.common.collect.HashBiMap$InverseSerializedForm:<init>(com.google.common.collect.HashBiMap)": "/**\n* Initializes InverseSerializedForm with a given bi-directional map.\n* @param bimap the bi-directional map to be inverted\n*/",
        "com.google.common.collect.HashBiMap$InverseSerializedForm:readResolve()": "/**\n* Returns the inverse BiMap for serialization resolution.\n* @return inverse BiMap instance\n*/"
    },
    "com.google.common.collect.HashBiMap": {
        "com.google.common.collect.HashBiMap:inverse()": "/**\n* Returns the inverse BiMap with keys and values swapped.\n* @return inverse BiMap instance or creates a new one if not present\n*/",
        "com.google.common.collect.HashBiMap:size()": "/**\n* Returns the current size of the collection.\n* @return the number of elements in the collection\n*/",
        "com.google.common.collect.HashBiMap:createTable(int)": "/**\n* Creates an array of BiEntry with the specified length.\n* @param length the size of the array to create\n* @return an array of BiEntry or null if the length is invalid\n*/",
        "com.google.common.collect.HashBiMap:delete(com.google.common.collect.HashBiMap$BiEntry)": "/**\n* Deletes a BiEntry from hash tables and key insertion order.\n* @param entry the BiEntry to be removed\n*/",
        "com.google.common.collect.HashBiMap:insert(com.google.common.collect.HashBiMap$BiEntry,com.google.common.collect.HashBiMap$BiEntry)": "/**\n* Inserts a BiEntry into hash tables and updates key insertion order.\n* @param entry the BiEntry to insert\n* @param oldEntryForKey previous entry for key or null if none\n*/",
        "com.google.common.collect.HashBiMap:clear()": "/**\n* Resets the data structure, clearing all entries and resetting size and order references.\n*/",
        "com.google.common.collect.HashBiMap:keySet()": "/**\n* Returns a set view of the keys contained in this map.\n* @return Set of keys in the map\n*/",
        "com.google.common.collect.HashBiMap:entryIterator()": "/**\n* Returns an iterator for map entries.\n* @return Iterator of key-value entry pairs\n*/",
        "com.google.common.collect.HashBiMap:forEach(java.util.function.BiConsumer)": "/**\n* Iterates over entries, applying action to each key-value pair.\n* @param action the action to apply to each entry\n*/",
        "com.google.common.collect.HashBiMap:seekByKey(java.lang.Object,int)": "/**\n* Searches for a BiEntry by key and keyHash in the hash table.\n* @param key the key to search for\n* @param keyHash the hash code of the key\n* @return BiEntry if found, null otherwise\n*/",
        "com.google.common.collect.HashBiMap:seekByValue(java.lang.Object,int)": "/**\n* Searches for a BiEntry by value and its hash.\n* @param value the value to search for\n* @param valueHash the hash of the value\n* @return matching BiEntry or null if not found\n*/",
        "com.google.common.collect.HashBiMap:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object using default serialization and a custom map serializer.\n* @param stream output stream for serialization\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.collect.HashBiMap:values()": "/**\n* Retrieves a set of values from the inverse BiMap.\n* @return Set of values from the inverse BiMap\n*/",
        "com.google.common.collect.HashBiMap:init(int)": "/**\n* Initializes hash table with specified expected size.\n* @param expectedSize desired number of entries for the hash table\n*/",
        "com.google.common.collect.HashBiMap:rehashIfNecessary()": "/**\n* Resizes hash tables if current size exceeds load factor.\n* Uses existing size and creates new tables.\n*/",
        "com.google.common.collect.HashBiMap:entrySet()": "/**** Returns a set view of the map's entries with iterator and spliterator support. */",
        "com.google.common.collect.HashBiMap:<init>(int)": "/**\n* Constructs a HashBiMap with specified initial size.\n* @param expectedSize desired number of entries for the hash table\n*/",
        "com.google.common.collect.HashBiMap:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from input stream.\n* @param stream the input stream for object data\n*/",
        "com.google.common.collect.HashBiMap:containsKey(java.lang.Object)": "/**\n* Checks if the hash table contains the specified key.\n* @param key the key to check for\n* @return true if key is present, false otherwise\n*/",
        "com.google.common.collect.HashBiMap:containsValue(java.lang.Object)": "/**\n* Checks if a value exists in the collection.\n* @param value the value to check for\n* @return true if the value is present, false otherwise\n*/",
        "com.google.common.collect.HashBiMap:get(java.lang.Object)": "/**\n* Retrieves the value associated with the specified key.\n* @param key the key to look up\n* @return the corresponding value or null if not found\n*/",
        "com.google.common.collect.HashBiMap:put(java.lang.Object,java.lang.Object,boolean)": "/**\n* Inserts a key-value pair, replacing existing values or throwing an error if duplicate value.\n* @param key the entry key\n* @param value the entry value\n* @param force if true, allows overwriting existing value\n* @return previous value or null if new entry\n*/",
        "com.google.common.collect.HashBiMap:putInverse(java.lang.Object,java.lang.Object,boolean)": "/**\n* Inserts or updates a key-value pair; returns previous key for value, or null if absent.\n* @param value the value to associate with the key\n* @param key the key to associate with the value\n* @param force if true, allows overwriting existing key\n* @return previous key for the value or null if none\n*/",
        "com.google.common.collect.HashBiMap:remove(java.lang.Object)": "/**\n* Removes a value by key and returns it, or null if not found.\n* @param key the key to remove\n* @return the removed value or null if absent\n*/",
        "com.google.common.collect.HashBiMap:create(int)": "/**\n* Creates a HashBiMap with a specified initial size.\n* @param expectedSize desired number of entries for the map\n* @return a new HashBiMap instance\n*/",
        "com.google.common.collect.HashBiMap:put(java.lang.Object,java.lang.Object)": "/**\n* Inserts a key-value pair without overwriting existing values.\n* @param key the entry key\n* @param value the entry value\n* @return previous value or null if new entry\n*/",
        "com.google.common.collect.HashBiMap:forcePut(java.lang.Object,java.lang.Object)": "/**\n* Forces insertion of a key-value pair, overwriting if exists.\n* @param key the entry key\n* @param value the entry value\n* @return previous value or null if new entry\n*/",
        "com.google.common.collect.HashBiMap:create()": "/**\n* Creates a HashBiMap with a default initial size of 16.\n* @return a new HashBiMap instance\n*/",
        "com.google.common.collect.HashBiMap:create(java.util.Map)": "/**\n* Creates a HashBiMap from a given map.\n* @param map input map to convert into a HashBiMap\n* @return new HashBiMap containing all entries from the input map\n*/",
        "com.google.common.collect.HashBiMap:replaceAll(java.util.function.BiFunction)": "/**\n* Replaces all entries using a provided mapping function.\n* @param function mapping function for key-value transformation\n*/"
    },
    "com.google.common.collect.HashBiMap$Itr": {
        "com.google.common.collect.HashBiMap$Itr:hasNext()": "/**\n* Checks if there are more elements to iterate.\n* @return true if more elements exist; false otherwise\n*/",
        "com.google.common.collect.HashBiMap$Itr:remove()": "/**\n* Removes the last returned element from the collection.\n* @throws ConcurrentModificationException if collection was modified concurrently\n* @throws IllegalStateException if not called after next()\n*/",
        "com.google.common.collect.HashBiMap$Itr:next()": "/**\n* Retrieves the next element in the iteration.\n* @return the next element of type T\n* @throws NoSuchElementException if no more elements exist\n*/"
    },
    "com.google.common.collect.HashBiMap$KeySet": {
        "com.google.common.collect.HashBiMap$KeySet:iterator()": "/**\n* Returns an iterator for the keys in the collection.\n* @return Iterator of keys of type K\n*/",
        "com.google.common.collect.HashBiMap$KeySet:remove(java.lang.Object)": "/**\n* Removes an entry by object; returns true if successful.\n* @param o object to remove; may be null\n* @return true if entry was removed, false if not found\n*/"
    },
    "com.google.common.collect.Maps$IteratorBasedAbstractMap": {
        "com.google.common.collect.Maps$IteratorBasedAbstractMap:entrySet()": "/**\n* Returns a set view of the map's entries.\n* @return Set of map entries with iterator and spliterator support\n*/",
        "com.google.common.collect.Maps$IteratorBasedAbstractMap:entrySpliterator()": "/**\n* Returns a Spliterator for the map's entries.\n* @return Spliterator for map entries with size and distinct characteristics\n*/",
        "com.google.common.collect.Maps$IteratorBasedAbstractMap:forEachEntry(java.util.function.Consumer)": "/**\n* Applies the given action to each entry using an entry iterator.\n* @param action a consumer to process each entry\n*/",
        "com.google.common.collect.Maps$IteratorBasedAbstractMap:clear()": "/**\n* Clears all entries from the current iterator.\n*/"
    },
    "com.google.common.collect.ImmutableAsList$SerializedForm": {
        "com.google.common.collect.ImmutableAsList$SerializedForm:<init>(com.google.common.collect.ImmutableCollection)": "/**\n* Constructs SerializedForm with a given immutable collection.\n* @param collection an immutable collection to serialize\n*/",
        "com.google.common.collect.ImmutableAsList$SerializedForm:readResolve()": "/**\n* Resolves the object by converting the collection to an ImmutableList.\n* @return ImmutableList representation of the collection\n*/"
    },
    "com.google.common.collect.ImmutableAsList": {
        "com.google.common.collect.ImmutableAsList:contains(java.lang.Object)": "/**\n* Checks if the collection contains the specified target object.\n* @param target object to search for in the collection\n* @return true if the target is found, false otherwise\n*/",
        "com.google.common.collect.ImmutableAsList:size()": "/**\n* Returns the number of elements in the collection.\n* @return size of the delegate collection\n*/",
        "com.google.common.collect.ImmutableAsList:isEmpty()": "/**\n* Checks if the delegate collection is empty.\n* @return true if the collection has no elements, false otherwise\n*/",
        "com.google.common.collect.ImmutableAsList:isPartialView()": "/**\n* Checks if the collection is a partial view.\n* @return true if it is a partial view, false otherwise\n*/",
        "com.google.common.collect.ImmutableAsList:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; always throws InvalidObjectException.\n* @param stream the ObjectInputStream to read from\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.collect.ImmutableAsList:writeReplace()": "/**\n* Prepares the object for serialization.\n* @return SerializedForm of the delegate collection\n*/"
    },
    "com.google.common.collect.ImmutableMap$Builder": {
        "com.google.common.collect.ImmutableMap$Builder:<init>(int)": "/**\n* Initializes a Builder with a specified initial capacity.\n* @param initialCapacity the initial size of the entries array\n*/",
        "com.google.common.collect.ImmutableMap$Builder:lastEntryForEachKey(java.util.Map$Entry[],int)": "/**\n* Returns last unique entries for each key from the provided array.\n* @param entries array of entries to process\n* @param size number of entries in the array\n* @return array of unique entries or null if none found\n*/",
        "com.google.common.collect.ImmutableMap$Builder:orderEntriesByValue(java.util.Comparator)": "/**\n* Sets the value comparator for ordering entries.\n* @param valueComparator comparator for entry values\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableMap$Builder:<init>()": "/** Initializes a Builder with a default initial capacity. */",
        "com.google.common.collect.ImmutableMap$Builder:ensureCapacity(int)": "/**\n* Ensures the array has at least the specified minimum capacity.\n* @param minCapacity minimum required capacity for the array\n*/",
        "com.google.common.collect.ImmutableMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder)": "/**\n* Combines another builder into this one.\n* @param other the builder to combine\n* @return the updated builder instance\n*/",
        "com.google.common.collect.ImmutableMap$Builder:put(java.lang.Object,java.lang.Object)": "/**\n* Adds a key-value pair to the builder.\n* @param key the entry key; must not be null\n* @param value the entry value; must not be null\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableMap$Builder:put(java.util.Map$Entry)": "/**\n* Adds an entry to the builder using its key and value.\n* @param entry the entry containing key and value\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableMap$Builder:putAll(java.lang.Iterable)": "/**\n* Adds all entries from the iterable to the builder.\n* @param entries iterable of key-value pairs\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableMap$Builder:putAll(java.util.Map)": "/**\n* Adds all entries from the provided map to the builder.\n* @param map key-value pairs to add\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableMap$Builder:buildJdkBacked()": "/**\n* Builds an ImmutableMap for testing with specific conditions and size.\n* @return ImmutableMap constructed based on current size and entries\n*/",
        "com.google.common.collect.ImmutableMap$Builder:build(boolean)": "/**\n* Builds an ImmutableMap from entries, handling duplicates based on provided flag.\n* @param throwIfDuplicateKeys flag to throw on duplicate keys\n* @return ImmutableMap constructed from entries\n*/",
        "com.google.common.collect.ImmutableMap$Builder:buildOrThrow()": "/**\n* Builds an ImmutableMap and throws on duplicate keys.\n* @return ImmutableMap constructed from entries\n*/",
        "com.google.common.collect.ImmutableMap$Builder:buildKeepingLast()": "/**\n* Builds an ImmutableMap keeping the last duplicate entry.\n* @return ImmutableMap constructed from entries\n*/",
        "com.google.common.collect.ImmutableMap$Builder:build()": "/**\n* Builds and returns an ImmutableMap.\n* @return ImmutableMap constructed from entries\n*/"
    },
    "com.google.common.collect.ImmutableBiMap": {
        "com.google.common.collect.ImmutableBiMap:of()": "/**\n* Returns an empty ImmutableBiMap instance.\n* @param <K> key type\n* @param <V> value type\n* @return an empty ImmutableBiMap\n*/",
        "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableBiMap from two key-value pairs.\n* @param k1 first key, @param v1 first value, @param k2 second key, @param v2 second value\n* @return ImmutableBiMap containing the provided key-value pairs\n*/",
        "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an immutable bi-map from three key-value pairs.\n* @param k1 first key, v1 first value, k2 second key, v2 second value, k3 third key, v3 third value\n* @return ImmutableBiMap containing the specified key-value pairs\n*/",
        "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an immutable bi-map from four key-value pairs.\n* @param k1, k2, k3, k4 keys; @param v1, v2, v3, v4 values\n* @return ImmutableBiMap containing the specified entries\n*/",
        "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an immutable bi-directional map from five key-value pairs.\n* @return ImmutableBiMap containing the specified entries\n*/",
        "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an immutable bi-map from six key-value pairs.\n* @return ImmutableBiMap containing the provided entries\n*/",
        "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an immutable bi-map from seven key-value pairs.\n* @param k1-k7 keys, @param v1-v7 values for the bi-map\n* @return ImmutableBiMap containing the provided entries\n*/",
        "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an immutable bi-directional map from up to eight key-value pairs.\n* @param k1 to k8 keys for the map\n* @param v1 to v8 values for the map\n* @return ImmutableBiMap containing the provided key-value pairs\n*/",
        "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableBiMap from nine key-value pairs.\n* @param k1-k9 keys, @param v1-v9 values\n* @return ImmutableBiMap containing the provided entries\n*/",
        "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an immutable bi-map from ten key-value pairs.\n* @param k1-k10 keys and v1-v10 values for the bi-map\n* @return ImmutableBiMap containing the provided entries\n*/",
        "com.google.common.collect.ImmutableBiMap:<init>()": "/**\n* Constructs an empty ImmutableBiMap instance.\n*/",
        "com.google.common.collect.ImmutableBiMap:createValues()": "/**\n* Throws an AssertionError, indicating this method should not be invoked.\n*/",
        "com.google.common.collect.ImmutableBiMap:forcePut(java.lang.Object,java.lang.Object)": "/**\n* Always throws UnsupportedOperationException for forceful insertion.\n* @param key the key to insert\n* @param value the value to associate with the key\n* @return always throws exception\n*/",
        "com.google.common.collect.ImmutableBiMap:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; throws exception if invoked.\n* @param stream the ObjectInputStream to read from\n* @throws InvalidObjectException always thrown\n*/",
        "com.google.common.collect.ImmutableBiMap:builderWithExpectedSize(int)": "/**\n* Creates a Builder with a specified initial capacity.\n* @param expectedSize initial size of the Builder\n* @return Builder instance configured with expected size\n*/",
        "com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableBiMap with a single key-value pair.\n* @param k1 the unique key\n* @param v1 the associated value\n* @return ImmutableBiMap containing the key-value pair\n*/",
        "com.google.common.collect.ImmutableBiMap:builder()": "/**\n* Creates a new Builder instance for key-value pairs.\n* @return Builder object for constructing key-value mappings\n*/",
        "com.google.common.collect.ImmutableBiMap:inverse()": "/**\n* Returns the inverse of the ImmutableBiMap.\n* @return an ImmutableBiMap with inverted key-value pairs\n*/",
        "com.google.common.collect.ImmutableBiMap:writeReplace()": "/**\n* Prepares the object for serialization.\n* @return SerializedForm representing the current object\n*/",
        "com.google.common.collect.ImmutableBiMap:values()": "/**\n* Returns the set of values by retrieving keys from the inverted ImmutableBiMap.\n* @return ImmutableSet of values\n*/",
        "com.google.common.collect.ImmutableBiMap:copyOf(java.lang.Iterable)": "/**\n* Creates an ImmutableBiMap from an Iterable of entries.\n* @param entries source of key-value pairs\n* @return ImmutableBiMap containing the entries\n*/",
        "com.google.common.collect.ImmutableBiMap:copyOf(java.util.Map)": "/**\n* Creates an ImmutableBiMap from a given Map.\n* @param map source of key-value pairs\n* @return ImmutableBiMap containing the entries\n*/",
        "com.google.common.collect.ImmutableBiMap:toImmutableBiMap(java.util.function.Function,java.util.function.Function)": "/**\n* Creates a Collector for ImmutableBiMap using provided key and value functions.\n* @param keyFunction function to extract keys\n* @param valueFunction function to extract values\n* @return Collector for ImmutableBiMap\n*/"
    },
    "com.google.common.collect.ImmutableBiMap$Builder": {
        "com.google.common.collect.ImmutableBiMap$Builder:buildKeepingLast()": "/**\n* Throws UnsupportedOperationException for ImmutableBiMap.\n* @return never returns a value as it always throws an exception\n*/",
        "com.google.common.collect.ImmutableBiMap$Builder:<init>(int)": "/**\n* Initializes a Builder with a specified initial capacity.\n* @param size the initial size of the entries array\n*/",
        "com.google.common.collect.ImmutableBiMap$Builder:orderEntriesByValue(java.util.Comparator)": "/**\n* Sets the value comparator for ordering entries.\n* @param valueComparator comparator for entry values\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableBiMap$Builder:<init>()": "/**\n* Initializes a Builder with a default initial capacity.\n*/",
        "com.google.common.collect.ImmutableBiMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder)": "/**\n* Combines another builder into this one and returns the updated builder.\n* @param builder the builder to combine\n* @return the updated builder instance\n*/",
        "com.google.common.collect.ImmutableBiMap$Builder:put(java.lang.Object,java.lang.Object)": "/**\n* Adds a key-value pair to the builder and returns the builder instance.\n* @param key the entry key; must not be null\n* @param value the entry value; must not be null\n* @return this Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableBiMap$Builder:put(java.util.Map$Entry)": "/**\n* Adds an entry to the builder and returns the builder instance for chaining.\n* @param entry the entry containing key and value\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableBiMap$Builder:putAll(java.lang.Iterable)": "/**\n* Adds all entries from the iterable to the builder.\n* @param entries iterable of key-value pairs\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableBiMap$Builder:putAll(java.util.Map)": "/**\n* Adds all entries from the provided map to the builder.\n* @param map key-value pairs to add\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableBiMap$Builder:buildOrThrow()": "/**\n* Builds an ImmutableBiMap or throws an exception based on the size of entries.\n* @return ImmutableBiMap constructed from current entries\n*/",
        "com.google.common.collect.ImmutableBiMap$Builder:buildJdkBacked()": "/**\n* Builds an ImmutableBiMap based on the current entries.\n* @return ImmutableBiMap constructed from the entries\n*/",
        "com.google.common.collect.ImmutableBiMap$Builder:build()": "/**\n* Builds an ImmutableBiMap using the current entries.\n* @return ImmutableBiMap constructed from current entries\n*/"
    },
    "com.google.common.collect.ImmutableClassToInstanceMap": {
        "com.google.common.collect.ImmutableClassToInstanceMap:of()": "/**\n* Returns an empty ImmutableClassToInstanceMap.\n* @return an empty instance of ImmutableClassToInstanceMap\n*/",
        "com.google.common.collect.ImmutableClassToInstanceMap:putInstance(java.lang.Class,java.lang.Object)": "/**\n* Throws UnsupportedOperationException when called.\n* @param type class type of the instance\n* @param value instance to be put, ignored\n* @return always null\n*/",
        "com.google.common.collect.ImmutableClassToInstanceMap:delegate()": "/**\n* Returns the delegate map of class types to their corresponding instances.\n* @return Map of class types to instances of type B\n*/",
        "com.google.common.collect.ImmutableClassToInstanceMap:getInstance(java.lang.Class)": "/**\n* Retrieves an instance of type T from the delegate.\n* @param type class type of the instance to fetch\n* @return instance of T or null if not found\n*/",
        "com.google.common.collect.ImmutableClassToInstanceMap:readResolve()": "/**\n* Resolves the object state during deserialization.\n* @return this or an empty ImmutableClassToInstanceMap if empty\n*/",
        "com.google.common.collect.ImmutableClassToInstanceMap:<init>(com.google.common.collect.ImmutableMap)": "/**\n* Constructs ImmutableClassToInstanceMap with a delegate ImmutableMap.\n* @param delegate map of class types to instances\n*/",
        "com.google.common.collect.ImmutableClassToInstanceMap:builder()": "/**\n* Creates a new Builder instance for key-value pairs.\n* @return Builder object for constructing key-value mappings\n*/",
        "com.google.common.collect.ImmutableClassToInstanceMap:of(java.lang.Class,java.lang.Object)": "/**\n* Creates an ImmutableClassToInstanceMap from a class type and its instance.\n* @param type the class type of the value\n* @param value the instance of the specified class type\n* @return an ImmutableClassToInstanceMap containing the type-value pair\n*/",
        "com.google.common.collect.ImmutableClassToInstanceMap:copyOf(java.util.Map)": "/**\n* Creates an ImmutableClassToInstanceMap from a given map.\n* @param map entries with class types as keys and values\n* @return ImmutableClassToInstanceMap constructed from entries or empty instance\n*/"
    },
    "com.google.common.collect.ImmutableCollection$Builder": {
        "com.google.common.collect.ImmutableCollection$Builder:expandedCapacity(int,int)": "/**\n* Calculates new capacity for an array based on old and minimum required capacity.\n* @param oldCapacity current array capacity\n* @param minCapacity minimum required capacity\n* @return new capacity that is sufficient to hold minCapacity\n*/",
        "com.google.common.collect.ImmutableCollection$Builder:<init>()": "/**\n* Constructs a new Builder instance.\n*/",
        "com.google.common.collect.ImmutableCollection$Builder:addAll(java.lang.Iterable)": "/**\n* Adds all elements from the iterable to the builder.\n* @param elements iterable of elements to add\n* @return the builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableCollection$Builder:addAll(java.util.Iterator)": "/**\n* Adds all elements from the iterator to the builder.\n* @param elements iterator of elements to add\n* @return this Builder instance for chaining\n*/"
    },
    "com.google.common.collect.ImmutableCollection": {
        "com.google.common.collect.ImmutableCollection:<init>()": "/**\n* Constructs an empty ImmutableCollection.\n*/",
        "com.google.common.collect.ImmutableCollection:spliterator()": "/**\n* Returns a Spliterator for the current collection.\n* @return Spliterator for elements in the collection\n*/",
        "com.google.common.collect.ImmutableCollection:internalArray()": "/**\n* Returns an internal array, currently always null.\n* @return an array of Objects or null\n*/",
        "com.google.common.collect.ImmutableCollection:internalArrayStart()": "/**\n* Indicates the starting index of an internal array.\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.ImmutableCollection:internalArrayEnd()": "/**\n* Throws UnsupportedOperationException when called.\n* Indicates method is not supported for this operation.\n*/",
        "com.google.common.collect.ImmutableCollection:copyIntoArray(java.lang.Object[],int)": "/**\n* Copies elements into the specified array starting at the given offset.\n* @param dst array to copy elements into\n* @param offset starting index in the array\n* @return new offset after copying elements\n*/",
        "com.google.common.collect.ImmutableCollection:add(java.lang.Object)": "/**\n* Always throws UnsupportedOperationException when attempting to add an element.\n* @param e element to add (ignored)\n* @return false (operation not supported)\n*/",
        "com.google.common.collect.ImmutableCollection:remove(java.lang.Object)": "/**\n* Always throws UnsupportedOperationException when called.\n* @param object the object to remove (ignored)\n* @return false (not supported)\n*/",
        "com.google.common.collect.ImmutableCollection:addAll(java.util.Collection)": "/**\n* Always throws UnsupportedOperationException when attempting to add elements.\n* @param newElements collection of elements to add\n* @return never returns a value\n*/",
        "com.google.common.collect.ImmutableCollection:removeAll(java.util.Collection)": "/**\n* Always throws UnsupportedOperationException; removal not supported.\n* @param oldElements collection of elements to remove\n* @return always throws exception\n*/",
        "com.google.common.collect.ImmutableCollection:removeIf(java.util.function.Predicate)": "/**\n* Always throws UnsupportedOperationException; method is deprecated and unsupported.\n* @param filter a predicate to test elements for removal\n* @return always throws exception, no return value\n*/",
        "com.google.common.collect.ImmutableCollection:retainAll(java.util.Collection)": "/**\n* Always throws UnsupportedOperationException; method is deprecated and should not be used.\n*/",
        "com.google.common.collect.ImmutableCollection:clear()": "/**\n* Clears the collection, always throws UnsupportedOperationException.\n* @throws UnsupportedOperationException always\n*/",
        "com.google.common.collect.ImmutableCollection:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; throws exception if invoked.\n* @param stream the ObjectInputStream for reading serialized objects\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.collect.ImmutableCollection:toArray(java.lang.Object[])": "/**\n* Converts collection to array, ensuring proper size and null handling.\n* @param other target array for the elements\n* @return array containing collection elements\n*/",
        "com.google.common.collect.ImmutableCollection:toArray()": "/**\n* Converts the collection to an array using an empty array as a target.\n* @return array containing collection elements\n*/",
        "com.google.common.collect.ImmutableCollection:writeReplace()": "/**\n* Serializes the object to an ImmutableList.SerializedForm.\n* @return SerializedForm representing the object state\n*/",
        "com.google.common.collect.ImmutableCollection:asList()": "/**** Converts the current collection to an ImmutableList. \n* @return ImmutableList representation of the collection \n*/"
    },
    "com.google.common.collect.Platform": {
        "com.google.common.collect.Platform:copy(java.lang.Object[],int,int,java.lang.Object[])": "/**\n* Copies a range from source array to a new array of specified type.\n* @param source source array to copy from\n* @param from starting index (inclusive)\n* @param to ending index (exclusive)\n* @param arrayOfType array type for the new array\n* @return new array containing copied elements\n*/",
        "com.google.common.collect.Platform:newArray(java.lang.Object[],int)": "/**\n* Creates a new array of specified length from a reference array.\n* @param reference the source array for type inference\n* @param length desired length of the new array\n* @return a new array of the specified length\n*/",
        "com.google.common.collect.Platform:newConcurrentHashSet()": "/**\n* Creates a new concurrent hash set.\n* @return a thread-safe Set instance\n*/",
        "com.google.common.collect.Platform:<init>()": "/**\n* Private constructor to prevent instantiation of the Platform class.\n*/",
        "com.google.common.collect.Platform:preservesInsertionOrderOnPutsMap()": "/**\n* Creates a map that preserves insertion order on puts.\n* @return a new LinkedHashMap with no entries\n*/",
        "com.google.common.collect.Platform:preservesInsertionOrderOnAddsSet()": "/**\n* Creates a Set that preserves insertion order on additions.\n* @return a Set of generic type E with insertion order preserved\n*/",
        "com.google.common.collect.Platform:tryWeakKeys(com.google.common.collect.MapMaker)": "/**\n* Configures MapMaker to use weak keys.\n* @param mapMaker instance of MapMaker to modify\n* @return updated MapMaker with weak key strength\n*/",
        "com.google.common.collect.Platform:newHashMapWithExpectedSize(int)": "/**\n* Creates a new HashMap with the specified initial capacity.\n* @param expectedSize desired size for the HashMap\n* @return a new HashMap instance\n*/",
        "com.google.common.collect.Platform:newLinkedHashMapWithExpectedSize(int)": "/**\n* Creates a LinkedHashMap with specified expected size.\n* @param expectedSize desired size of the map\n* @return LinkedHashMap initialized with calculated capacity\n*/",
        "com.google.common.collect.Platform:newHashSetWithExpectedSize(int)": "/**\n* Creates a HashSet with a specified initial capacity.\n* @param expectedSize desired size of the HashSet\n* @return a new HashSet instance\n*/",
        "com.google.common.collect.Platform:newLinkedHashSetWithExpectedSize(int)": "/**\n* Creates a LinkedHashSet with specified initial capacity.\n* @param expectedSize desired size for the collection\n* @return a new LinkedHashSet instance\n*/"
    },
    "com.google.common.collect.ImmutableList$SerializedForm": {
        "com.google.common.collect.ImmutableList$SerializedForm:<init>(java.lang.Object[])": "/**\n* Constructs a SerializedForm with the given elements.\n* @param elements array of objects to be serialized\n*/",
        "com.google.common.collect.ImmutableList$SerializedForm:readResolve()": "/**\n* Resolves the object state by creating an immutable copy of elements.\n* @return ImmutableList of elements\n*/"
    },
    "com.google.common.collect.ImmutableEnumMap$EnumSerializedForm": {
        "com.google.common.collect.ImmutableEnumMap$EnumSerializedForm:<init>(java.util.EnumMap)": "/**\n* Constructs EnumSerializedForm with the specified EnumMap.\n* @param delegate the EnumMap to be serialized\n*/",
        "com.google.common.collect.ImmutableEnumMap$EnumSerializedForm:readResolve()": "/**\n* Returns a new ImmutableEnumMap from the delegate.\n* @return an ImmutableEnumMap instance\n*/"
    },
    "com.google.common.collect.ImmutableEnumMap": {
        "com.google.common.collect.ImmutableEnumMap:keySpliterator()": "/**\n* Returns a Spliterator for the keys in the map.\n* @return Spliterator for the map's key set\n*/",
        "com.google.common.collect.ImmutableEnumMap:size()": "/**\n* Returns the number of elements in the collection.\n* @return the size of the collection as an integer\n*/",
        "com.google.common.collect.ImmutableEnumMap:containsKey(java.lang.Object)": "/**\n* Checks if the specified key is present in the map.\n* @param key the key to check for presence\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.ImmutableEnumMap:get(java.lang.Object)": "/**\n* Retrieves the value associated with the specified key.\n* @param key the key whose associated value is to be returned\n* @return the value associated with the key or null if not found\n*/",
        "com.google.common.collect.ImmutableEnumMap:equals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ImmutableEnumMap:forEach(java.util.function.BiConsumer)": "/**\n* Applies the given action to each entry in the map.\n* @param action a BiConsumer to process key-value pairs\n*/",
        "com.google.common.collect.ImmutableEnumMap:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization and throws an exception.\n* @param stream the ObjectInputStream to read from\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.collect.ImmutableEnumMap:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return false, as this view is not partial\n*/",
        "com.google.common.collect.ImmutableEnumMap:<init>(java.util.EnumMap)": "/**\n* Constructs an ImmutableEnumMap from a non-empty EnumMap.\n* @param delegate the EnumMap to wrap, must not be empty\n*/",
        "com.google.common.collect.ImmutableEnumMap:writeReplace()": "/**\n* Prepares object for serialization by returning EnumSerializedForm.\n* @return EnumSerializedForm containing the delegate EnumMap\n*/",
        "com.google.common.collect.ImmutableEnumMap:entryIterator()": "/**\n* Returns an unmodifiable iterator for the map's entry set.\n* @return UnmodifiableIterator of map entries\n*/",
        "com.google.common.collect.ImmutableEnumMap:keyIterator()": "/**\n* Returns an unmodifiable iterator for the keys in the delegate's key set.\n* @return UnmodifiableIterator for the keys\n*/",
        "com.google.common.collect.ImmutableEnumMap:entrySpliterator()": "/**\n* Returns a Spliterator for the map's entries.\n* @return Spliterator of unmodifiable map entries\n*/",
        "com.google.common.collect.ImmutableEnumMap:asImmutable(java.util.EnumMap)": "/**\n* Converts an EnumMap to an ImmutableMap.\n* @param map the EnumMap to convert\n* @return ImmutableMap representation of the EnumMap\n*/"
    },
    "com.google.common.collect.ImmutableEnumSet$EnumSerializedForm": {
        "com.google.common.collect.ImmutableEnumSet$EnumSerializedForm:<init>(java.util.EnumSet)": "/**\n* Constructs EnumSerializedForm with the specified EnumSet.\n* @param delegate the EnumSet to be wrapped\n*/",
        "com.google.common.collect.ImmutableEnumSet$EnumSerializedForm:readResolve()": "/**\n* Returns a resolved instance of ImmutableEnumSet by cloning the delegate.\n* @return cloned ImmutableEnumSet object\n*/"
    },
    "com.google.common.collect.ImmutableEnumSet": {
        "com.google.common.collect.ImmutableEnumSet:spliterator()": "/**\n* Returns a Spliterator for traversing elements.\n* @return Spliterator for the elements in the delegate\n*/",
        "com.google.common.collect.ImmutableEnumSet:forEach(java.util.function.Consumer)": "/**\n* Applies the given action to each element in the collection.\n* @param action a function to be applied to each element\n*/",
        "com.google.common.collect.ImmutableEnumSet:size()": "/**\n* Returns the number of elements in the collection.\n* @return the size of the collection as an integer\n*/",
        "com.google.common.collect.ImmutableEnumSet:contains(java.lang.Object)": "/**\n* Checks if the specified object is contained in the collection.\n* @param object the object to check for presence\n* @return true if the object is found, false otherwise\n*/",
        "com.google.common.collect.ImmutableEnumSet:containsAll(java.util.Collection)": "/**\n* Checks if this set contains all elements of the specified collection.\n* @param collection the collection to check\n* @return true if all elements are present, false otherwise\n*/",
        "com.google.common.collect.ImmutableEnumSet:isEmpty()": "/**\n* Checks if the delegate collection is empty.\n* @return true if empty, false otherwise\n*/",
        "com.google.common.collect.ImmutableEnumSet:equals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ImmutableEnumSet:hashCode()": "/**\n* Computes hash code, caching the result for efficiency.\n* @return cached hash code or computed hash code if not cached\n*/",
        "com.google.common.collect.ImmutableEnumSet:toString()": "/**\n* Returns the string representation of the delegate object.\n* @return string representation of the delegate\n*/",
        "com.google.common.collect.ImmutableEnumSet:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; throws exception when invoked.\n* @param stream the ObjectInputStream for deserialization\n* @throws InvalidObjectException if called\n*/",
        "com.google.common.collect.ImmutableEnumSet:isPartialView()": "/**\n* Indicates if the view is partial.\n* @return false, as this view is not partial\n*/",
        "com.google.common.collect.ImmutableEnumSet:writeReplace()": "/**\n* Prepares object for serialization by wrapping it in EnumSerializedForm.\n* @return wrapped EnumSerializedForm instance\n*/",
        "com.google.common.collect.ImmutableEnumSet:iterator()": "/**\n* Returns an unmodifiable iterator over the elements.\n* @return UnmodifiableIterator wrapping the delegate's iterator\n*/",
        "com.google.common.collect.ImmutableEnumSet:<init>(java.util.EnumSet)": "/**\n* Constructs an ImmutableEnumSet with a given EnumSet delegate.\n* @param delegate the EnumSet to be wrapped\n*/",
        "com.google.common.collect.ImmutableEnumSet:asImmutable(java.util.EnumSet)": "/**\n* Converts an EnumSet to an ImmutableSet.\n* @param set the EnumSet to convert\n* @return ImmutableSet representation of the EnumSet\n*/"
    },
    "com.google.common.collect.ImmutableList$Builder": {
        "com.google.common.collect.ImmutableList$Builder:add(java.lang.Object[],int)": "/**\n* Adds elements to the contents array.\n* @param elements array of objects to add, may contain nulls\n* @param n number of elements to add from the array\n*/",
        "com.google.common.collect.ImmutableList$Builder:add(java.lang.Object)": "/**** Adds an element to the builder. \n* @param element the element to add\n* @return this builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableList$Builder:<init>(int)": "/**\n* Constructs a new Builder with specified capacity.\n* @param capacity initial size of the contents array\n*/",
        "com.google.common.collect.ImmutableList$Builder:addAll(java.util.Iterator)": "/**\n* Adds all elements from the iterator to the builder.\n* @param elements iterator of elements to add\n* @return this Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableList$Builder:addAll(java.lang.Iterable)": "/**** Adds elements from an iterable to the builder. \n* @param elements iterable of elements to add \n* @return this builder instance for chaining */",
        "com.google.common.collect.ImmutableList$Builder:combine(com.google.common.collect.ImmutableList$Builder)": "/**\n* Combines another builder's contents into this builder.\n* @param builder the Builder to combine with\n* @return this Builder instance\n*/",
        "com.google.common.collect.ImmutableList$Builder:<init>()": "/**\n* Initializes a Builder with default initial capacity.\n*/",
        "com.google.common.collect.ImmutableList$Builder:build()": "/**\n* Builds an ImmutableList from contents.\n* @return ImmutableList representation of the current contents\n*/"
    },
    "com.google.common.collect.ImmutableList$ReverseImmutableList": {
        "com.google.common.collect.ImmutableList$ReverseImmutableList:size()": "/**\n* Returns the number of elements in the forwardList.\n* @return the size of the forwardList\n*/",
        "com.google.common.collect.ImmutableList$ReverseImmutableList:isPartialView()": "/**\n* Checks if the forward list is in a partial view state.\n* @return true if partial view, false otherwise\n*/",
        "com.google.common.collect.ImmutableList$ReverseImmutableList:reverseIndex(int)": "/**\n* Computes the reverse index in a list.\n* @param index original index in the list\n* @return reversed index based on list size\n*/",
        "com.google.common.collect.ImmutableList$ReverseImmutableList:reversePosition(int)": "/**\n* Calculates the reverse position in a list based on the given index.\n* @param index the original index to reverse\n* @return the reversed position in the list\n*/",
        "com.google.common.collect.ImmutableList$ReverseImmutableList:<init>(com.google.common.collect.ImmutableList)": "/**\n* Constructs a ReverseImmutableList from a given ImmutableList.\n* @param backingList the list to reverse\n*/",
        "com.google.common.collect.ImmutableList$ReverseImmutableList:listIterator()": "/**\n* Returns an unmodifiable list iterator starting at the beginning.\n* @return UnmodifiableListIterator for the list elements\n*/",
        "com.google.common.collect.ImmutableList$ReverseImmutableList:get(int)": "/**** Retrieves an element from the list at the specified index. \n* @param index the index of the element to retrieve \n* @return the element at the given index \n*/",
        "com.google.common.collect.ImmutableList$ReverseImmutableList:lastIndexOf(java.lang.Object)": "/**\n* Finds the last index of an object in the list.\n* @param object the object to locate, can be null\n* @return reversed index or -1 if not found\n*/",
        "com.google.common.collect.ImmutableList$ReverseImmutableList:indexOf(java.lang.Object)": "/**\n* Finds the reverse index of an object in the list.\n* @param object the element to search for (nullable)\n* @return reversed index or -1 if not found\n*/",
        "com.google.common.collect.ImmutableList$ReverseImmutableList:contains(java.lang.Object)": "/**\n* Checks if the list contains the specified object.\n* @param object the object to check, can be null\n* @return true if found, false otherwise\n*/",
        "com.google.common.collect.ImmutableList$ReverseImmutableList:subList(int,int)": "/**\n* Returns a sublist from the specified range after validating indexes.\n* @param fromIndex starting index, @param toIndex ending index\n* @return reversed ImmutableList of the sublist elements\n*/"
    },
    "com.google.common.collect.ImmutableListMultimap": {
        "com.google.common.collect.ImmutableListMultimap:of()": "/**\n* Returns an empty ImmutableListMultimap instance.\n* @param <K> key type\n* @param <V> value type\n* @return an empty ImmutableListMultimap\n*/",
        "com.google.common.collect.ImmutableListMultimap:removeAll(java.lang.Object)": "/**\n* Removes all elements associated with the specified key.\n* @param key the key whose associated elements are to be removed\n* @throws UnsupportedOperationException always thrown\n*/",
        "com.google.common.collect.ImmutableListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Always throws UnsupportedOperationException when called.\n* @param key the key whose values are to be replaced\n* @param values the new values to replace existing ones\n*/",
        "com.google.common.collect.ImmutableListMultimap:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object using default serialization and writes a Multimap.\n* @param stream the output stream for serialization\n* @throws IOException if an I/O error occurs during serialization\n*/",
        "com.google.common.collect.ImmutableListMultimap:get(java.lang.Object)": "/**\n* Retrieves an ImmutableList by key; returns an empty list if not found.\n* @param key the key to lookup in the map\n* @return ImmutableList of values associated with the key\n*/",
        "com.google.common.collect.ImmutableListMultimap:<init>(com.google.common.collect.ImmutableMap,int)": "/**\n* Initializes an ImmutableListMultimap from a map and its size.\n* @param map a map of collections to initialize the multimap\n* @param size the total number of entries in the multimap\n*/",
        "com.google.common.collect.ImmutableListMultimap:builder()": "/**\n* Creates a new Builder instance for key-value pairs.\n* @return Builder object for constructing key-value mappings\n*/",
        "com.google.common.collect.ImmutableListMultimap:fromMapEntries(java.util.Collection,java.util.Comparator)": "/**\n* Creates an ImmutableListMultimap from map entries with optional value sorting.\n* @param mapEntries collection of map entries to convert\n* @param valueComparator optional comparator for sorting values\n* @return constructed ImmutableListMultimap\n*/",
        "com.google.common.collect.ImmutableListMultimap:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from stream and populates fields.\n* @param stream input stream for reading object data\n* @throws IOException if an I/O error occurs\n* @throws ClassNotFoundException if a class cannot be found\n*/",
        "com.google.common.collect.ImmutableListMultimap:copyOf(com.google.common.collect.Multimap)": "/**\n* Creates an ImmutableListMultimap from a given multimap.\n* @param multimap source multimap to copy from\n* @return copied ImmutableListMultimap\n*/",
        "com.google.common.collect.ImmutableListMultimap:flatteningToImmutableListMultimap(java.util.function.Function,java.util.function.Function)": "/**\n* Collects elements into an ImmutableListMultimap using key and value functions.\n* @param keyFunction function to extract keys\n* @param valuesFunction function to extract values as streams\n* @return Collector for the ImmutableListMultimap\n*/",
        "com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableListMultimap from a single key-value pair.\n* @param k1 the key, @param v1 the value\n* @return ImmutableListMultimap with the provided key-value pair\n*/",
        "com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableListMultimap from two key-value pairs.\n* @param k1 first key, v1 first value, k2 second key, v2 second value\n* @return ImmutableListMultimap containing the key-value pairs\n*/",
        "com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableListMultimap from three key-value pairs.\n* @param k1, k2, k3 keys for the entries\n* @param v1, v2, v3 values for the entries\n* @return ImmutableListMultimap containing the entries\n*/",
        "com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableListMultimap from four key-value pairs.\n* @param k1, k2, k3, k4 keys; v1, v2, v3, v4 values\n* @return ImmutableListMultimap instance\n*/",
        "com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableListMultimap from key-value pairs.\n* @param k1-k5 keys, v1-v5 values to map\n* @return ImmutableListMultimap containing the pairs\n*/",
        "com.google.common.collect.ImmutableListMultimap:copyOf(java.lang.Iterable)": "/**\n* Creates an ImmutableListMultimap from the provided entries.\n* @param entries iterable of key-value pairs\n* @return ImmutableListMultimap instance\n*/",
        "com.google.common.collect.ImmutableListMultimap:invert()": "/**\n* Inverts key-value pairs in the multimap.\n* @return ImmutableListMultimap with keys and values swapped\n*/",
        "com.google.common.collect.ImmutableListMultimap:toImmutableListMultimap(java.util.function.Function,java.util.function.Function)": "/**\n* Collects elements into an ImmutableListMultimap using key and value functions.\n* @param keyFunction function to extract keys\n* @param valueFunction function to extract values\n* @return Collector for building ImmutableListMultimap\n*/",
        "com.google.common.collect.ImmutableListMultimap:inverse()": "/**\n* Returns an inverse multimap; computes if not cached.\n* @return ImmutableListMultimap with inverted key-value pairs\n*/"
    },
    "com.google.common.collect.ImmutableMultimap": {
        "com.google.common.collect.ImmutableMultimap:<init>(com.google.common.collect.ImmutableMap,int)": "/**\n* Constructs an ImmutableMultimap from a map and its size.\n* @param map a map of collections to initialize the multimap\n* @param size the total number of entries in the multimap\n*/",
        "com.google.common.collect.ImmutableMultimap:entryIterator()": "/**\n* Returns an unmodifiable iterator for map entries.\n* @return UnmodifiableIterator of key-value pairs\n*/",
        "com.google.common.collect.ImmutableMultimap:isPartialView()": "/**\n* Checks if the current map is in a partial view state.\n* @return true if partial view, false otherwise\n*/",
        "com.google.common.collect.ImmutableMultimap:size()": "/**\n* Returns the number of elements in the collection.\n* @return the size of the collection as an integer\n*/",
        "com.google.common.collect.ImmutableMultimap:keys()": "/**\n* Returns an immutable multiset of keys from the super implementation.\n* @return ImmutableMultiset of keys\n*/",
        "com.google.common.collect.ImmutableMultimap:containsValue(java.lang.Object)": "/**\n* Checks if the collection contains a non-null value.\n* @param value the object to check for presence\n* @return true if value is found, false otherwise\n*/",
        "com.google.common.collect.ImmutableMultimap:valueIterator()": "/**\n* Returns an iterator for the values in the map, unmodifiable and sequential.\n* @return UnmodifiableIterator of values\n*/",
        "com.google.common.collect.ImmutableMultimap:removeAll(java.lang.Object)": "/**\n* Removes all instances of the specified key, always throws UnsupportedOperationException.\n* @param key the key to remove, nullable\n* @throws UnsupportedOperationException always\n*/",
        "com.google.common.collect.ImmutableMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a key, always throws UnsupportedOperationException.\n* @param key the key for which values are replaced\n* @param values the new values to be associated with the key\n*/",
        "com.google.common.collect.ImmutableMultimap:clear()": "/**\n* Clears the collection, but always throws UnsupportedOperationException.\n*/",
        "com.google.common.collect.ImmutableMultimap:put(java.lang.Object,java.lang.Object)": "/**\n* Always throws UnsupportedOperationException; method is deprecated and not callable.\n* @param key the key to associate with the value\n* @param value the value to be stored\n* @return always throws an exception\n*/",
        "com.google.common.collect.ImmutableMultimap:putAll(java.lang.Object,java.lang.Iterable)": "/**\n* Always throws UnsupportedOperationException when called.\n* @param key the key to associate with the values\n* @param values the values to associate with the key\n*/",
        "com.google.common.collect.ImmutableMultimap:putAll(com.google.common.collect.Multimap)": "/**\n* Unsupported operation to add all entries from a multimap.\n* @param multimap entries to add (ignored, always throws exception)\n* @throws UnsupportedOperationException always\n*/",
        "com.google.common.collect.ImmutableMultimap:remove(java.lang.Object,java.lang.Object)": "/**\n* Always throws UnsupportedOperationException when called.\n* @param key the key to remove (ignored)\n* @param value the value to remove (ignored)\n* @return always throws exception\n*/",
        "com.google.common.collect.ImmutableMultimap:createKeySet()": "/**\n* Creates a key set; always throws an AssertionError if called.\n* @return never returns a value\n*/",
        "com.google.common.collect.ImmutableMultimap:createAsMap()": "/**\n* Throws an AssertionError indicating this method should not be called.\n* @return never returns a value\n*/",
        "com.google.common.collect.ImmutableMultimap:entries()": "/**\n* Returns an immutable collection of key-value entries.\n* @return ImmutableCollection of Entry objects\n*/",
        "com.google.common.collect.ImmutableMultimap:asMap()": "/**\n* Returns the map as an immutable map of collections.\n* @return ImmutableMap with keys of type K and values of type Collection<V>\n*/",
        "com.google.common.collect.ImmutableMultimap:createKeys()": "/**\n* Creates and returns an immutable multiset of keys.\n* @return ImmutableMultiset containing keys\n*/",
        "com.google.common.collect.ImmutableMultimap:values()": "/**\n* Returns an immutable collection of values.\n* @return ImmutableCollection of values from super class\n*/",
        "com.google.common.collect.ImmutableMultimap:keySet()": "/**\n* Returns an immutable set of keys from the map.\n* @return ImmutableSet of keys in the map\n*/",
        "com.google.common.collect.ImmutableMultimap:containsKey(java.lang.Object)": "/**\n* Checks if the map contains the specified key.\n* @param key the key to check for presence\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.ImmutableMultimap:of()": "/**\n* Creates an empty ImmutableMultimap instance.\n* @param <K> key type\n* @param <V> value type\n* @return an empty ImmutableMultimap\n*/",
        "com.google.common.collect.ImmutableMultimap:forEach(java.util.function.BiConsumer)": "/**\n* Applies the given action to each key-value pair in the map.\n* @param action a BiConsumer to process each key and value\n*/",
        "com.google.common.collect.ImmutableMultimap:entrySpliterator()": "/**\n* Creates a spliterator for map entries, transforming values into immutable entries.\n* @return Spliterator of Entry<K, V> for the map's key-value pairs\n*/",
        "com.google.common.collect.ImmutableMultimap:createEntries()": "/**\n* Creates an ImmutableCollection of entries from this instance.\n* @return ImmutableCollection of Entry objects\n*/",
        "com.google.common.collect.ImmutableMultimap:createValues()": "/**\n* Creates an ImmutableCollection of values.\n* @return ImmutableCollection containing the values\n*/",
        "com.google.common.collect.ImmutableMultimap:builder()": "/**\n* Creates a new Builder instance for key-value pairs.\n* @return Builder object for building key-value mappings\n*/",
        "com.google.common.collect.ImmutableMultimap:copyOf(com.google.common.collect.Multimap)": "/**\n* Creates an ImmutableMultimap from a given multimap.\n* @param multimap source multimap to copy from\n* @return copied ImmutableMultimap\n*/",
        "com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableMultimap from a key-value pair.\n* @param k1 the key, @param v1 the value\n* @return ImmutableMultimap with the provided key-value pair\n*/",
        "com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableMultimap from two key-value pairs.\n* @param k1 first key, v1 first value, k2 second key, v2 second value\n* @return ImmutableMultimap containing the key-value pairs\n*/",
        "com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**** Creates an ImmutableMultimap from three key-value pairs. \n* @param k1, k2, k3 keys for the entries \n* @param v1, v2, v3 values for the entries \n* @return ImmutableMultimap containing the entries \n*/",
        "com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableMultimap from four key-value pairs.\n* @param k1, k2, k3, k4 keys; v1, v2, v3, v4 values\n* @return ImmutableMultimap instance\n*/",
        "com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableMultimap from up to five key-value pairs.\n* @param k1-k5 keys, v1-v5 values to map\n* @return ImmutableMultimap containing the pairs\n*/",
        "com.google.common.collect.ImmutableMultimap:copyOf(java.lang.Iterable)": "/**\n* Creates an ImmutableMultimap from the given entries.\n* @param entries iterable of key-value pairs\n* @return ImmutableMultimap instance\n*/"
    },
    "com.google.common.collect.ImmutableMapEntrySet": {
        "com.google.common.collect.ImmutableMapEntrySet:<init>()": "/**\n* Creates an immutable set of map entries.\n*/",
        "com.google.common.collect.ImmutableMapEntrySet:size()": "/**\n* Returns the number of elements in the map.\n* @return the size of the map as an integer\n*/",
        "com.google.common.collect.ImmutableMapEntrySet:contains(java.lang.Object)": "/**\n* Checks if the map contains the specified entry.\n* @param object entry to check for presence\n* @return true if entry is present, false otherwise\n*/",
        "com.google.common.collect.ImmutableMapEntrySet:isPartialView()": "/**\n* Checks if the current view is a partial view.\n* @return true if it is a partial view, false otherwise\n*/",
        "com.google.common.collect.ImmutableMapEntrySet:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; throws exception to enforce EntrySetSerializedForm usage.\n*/",
        "com.google.common.collect.ImmutableMapEntrySet:isHashCodeFast()": "/**\n* Determines if hash code computation is optimized for speed.\n* @return true if optimized, otherwise false\n*/",
        "com.google.common.collect.ImmutableMapEntrySet:writeReplace()": "/**\n* Prepares object for serialization.\n* @return EntrySetSerializedForm containing the current map's data\n*/",
        "com.google.common.collect.ImmutableMapEntrySet:hashCode()": "/**\n* Returns the hash code for the current object based on its map.\n* @return computed hash code as an integer\n*/"
    },
    "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap": {
        "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap:entrySpliterator()": "/**\n* Creates a Spliterator for the map's entries.\n* @return Spliterator of map entries with distinct, non-null, immutable order\n*/",
        "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap:createEntrySet()": "/**\n* Creates an immutable set of map entries.\n* @return ImmutableSet of map entries\n*/",
        "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap:createKeySet()": "/**\n* Creates an immutable set of keys from the current map.\n* @return ImmutableSet of keys\n*/",
        "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap:createValues()": "/**** Creates an immutable collection of values. \n* @return ImmutableCollection of values from the current context \n*/"
    },
    "com.google.common.collect.ImmutableMapKeySet": {
        "com.google.common.collect.ImmutableMapKeySet:<init>(com.google.common.collect.ImmutableMap)": "/**\n* Initializes an ImmutableMapKeySet with the given immutable map.\n* @param map the immutable map to use for the key set\n*/",
        "com.google.common.collect.ImmutableMapKeySet:size()": "/**\n* Returns the number of elements in the map.\n* @return the size of the map\n*/",
        "com.google.common.collect.ImmutableMapKeySet:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return true, as this method always returns true\n*/",
        "com.google.common.collect.ImmutableMapKeySet:forEach(java.util.function.Consumer)": "/**\n* Executes action for each key in the map.\n* @param action consumer to process each key\n*/",
        "com.google.common.collect.ImmutableMapKeySet:contains(java.lang.Object)": "/**\n* Checks if the map contains the specified object.\n* @param object the key to check for presence\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.ImmutableMapKeySet:get(int)": "/**\n* Retrieves the key at the specified index from the map.\n* @param index the position of the key in the entry set\n* @return the key associated with the specified index\n*/",
        "com.google.common.collect.ImmutableMapKeySet:iterator()": "/**\n* Returns an iterator for keys from the map.\n* @return UnmodifiableIterator of keys\n*/",
        "com.google.common.collect.ImmutableMapKeySet:spliterator()": "/**\n* Returns a Spliterator for the keys in the map.\n* @return Spliterator of keys from the entry set\n*/"
    },
    "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets": {
        "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:size()": "/**\n* Returns the number of entries in the ImmutableMap.\n* @return size of the ImmutableMap\n*/",
        "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:isPartialView()": "/**\n* Checks if the view is partial.\n* @return true if the view is partial, false otherwise\n*/",
        "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:createKeySet()": "/**\n* Creates and returns an immutable set of keys from the map.\n* @return ImmutableSet of keys from the map\n*/",
        "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:containsKey(java.lang.Object)": "/**\n* Checks if the map contains the specified key.\n* @param key the key to check for presence\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:entryIterator()": "/**\n* Returns an unmodifiable iterator of entries with keys and immutable set of values.\n* @return UnmodifiableIterator of Entry with key and ImmutableSet of values\n*/",
        "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:isHashCodeFast()": "/**\n* Delegates hash code speed check to ImmutableMap.\n* @return result of ImmutableMap's isHashCodeFast method\n*/",
        "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:hashCode()": "/**\n* Returns the hash code of the ImmutableMap instance.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:get(java.lang.Object)": "/**\n* Retrieves a value by key and wraps it in an ImmutableSet.\n* @param key the key to look up\n* @return ImmutableSet containing the value or null if not found\n*/"
    },
    "com.google.common.collect.ImmutableSetMultimap": {
        "com.google.common.collect.ImmutableSetMultimap:of()": "/**\n* Returns an empty immutable set multimap instance.\n* @return an empty ImmutableSetMultimap\n*/",
        "com.google.common.collect.ImmutableSetMultimap:removeAll(java.lang.Object)": "/**\n* Removes all occurrences of the specified key; always throws UnsupportedOperationException.\n* @param key the object to be removed\n*/",
        "com.google.common.collect.ImmutableSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Always throws UnsupportedOperationException when called.\n* @param key the key whose values are to be replaced\n* @param values the new values for the specified key\n*/",
        "com.google.common.collect.ImmutableSetMultimap:get(java.lang.Object)": "/**\n* Retrieves an ImmutableSet by key, returning an empty set if not found.\n* @param key the key to lookup in the map\n* @return ImmutableSet associated with the key or an empty set\n*/",
        "com.google.common.collect.ImmutableSetMultimap:valueComparator()": "/**\n* Returns the comparator for an ImmutableSortedSet or null if not applicable.\n* @return Comparator for values or null if emptySet is not an ImmutableSortedSet\n*/",
        "com.google.common.collect.ImmutableSetMultimap:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object and its value comparator to an ObjectOutputStream.\n* @param stream the output stream for serialization\n* @throws IOException if an I/O error occurs during serialization\n*/",
        "com.google.common.collect.ImmutableSetMultimap:emptySet(java.util.Comparator)": "/**\n* Returns an empty ImmutableSet, optionally sorted by the given comparator.\n* @param valueComparator defines the order of elements, or null for an unsorted set\n* @return an empty ImmutableSet\n*/",
        "com.google.common.collect.ImmutableSetMultimap:entries()": "/**\n* Retrieves entries as an ImmutableSet; initializes if not already set.\n* @return ImmutableSet of Entry objects\n*/",
        "com.google.common.collect.ImmutableSetMultimap:builder()": "/**\n* Creates a new Builder instance for key-value pairs.\n* @return Builder object for constructing key-value mappings\n*/",
        "com.google.common.collect.ImmutableSetMultimap:<init>(com.google.common.collect.ImmutableMap,int,java.util.Comparator)": "/**\n* Constructs an ImmutableSetMultimap from a map and size.\n* @param map map of collections to initialize the multimap\n* @param size total number of entries in the multimap\n* @param valueComparator defines order of elements or null for unsorted\n*/",
        "com.google.common.collect.ImmutableSetMultimap:valuesBuilder(java.util.Comparator)": "/**\n* Creates a values builder for ImmutableSet or ImmutableSortedSet.\n* @param valueComparator optional comparator for sorting values\n* @return ImmutableSet.Builder instance\n*/",
        "com.google.common.collect.ImmutableSetMultimap:valueSet(java.util.Comparator,java.util.Collection)": "/**\n* Creates an ImmutableSet from a collection, sorted if a comparator is provided.\n* @param valueComparator optional comparator for sorting elements\n* @param values collection of values to copy\n* @return ImmutableSet containing the copied elements\n*/",
        "com.google.common.collect.ImmutableSetMultimap:fromMapEntries(java.util.Collection,java.util.Comparator)": "/**\n* Creates an ImmutableSetMultimap from map entries and an optional value comparator.\n* @param mapEntries collection of map entries with key-value pairs\n* @param valueComparator optional comparator for sorting values\n* @return ImmutableSetMultimap constructed from the entries\n*/",
        "com.google.common.collect.ImmutableSetMultimap:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from the input stream, validating key-value pairs.\n* @param stream the ObjectInputStream for deserialization\n*/",
        "com.google.common.collect.ImmutableSetMultimap:copyOf(com.google.common.collect.Multimap,java.util.Comparator)": "/**\n* Creates an ImmutableSetMultimap from a given multimap and optional value comparator.\n* @param multimap source multimap to copy from\n* @param valueComparator optional comparator for sorting values\n* @return ImmutableSetMultimap constructed from the multimap\n*/",
        "com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableSetMultimap from a single key-value pair.\n* @param k1 key for the entry\n* @param v1 value for the entry\n* @return ImmutableSetMultimap containing the entry\n*/",
        "com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableSetMultimap from two key-value pairs.\n* @param k1 first key, @param v1 first value, @param k2 second key, @param v2 second value\n* @return ImmutableSetMultimap containing the key-value pairs\n*/",
        "com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableSetMultimap from three key-value pairs.\n* @param k1, k2, k3 keys for the entries\n* @param v1, v2, v3 values for the entries\n* @return ImmutableSetMultimap containing the key-value pairs\n*/",
        "com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableSetMultimap from four key-value pairs.\n* @return ImmutableSetMultimap containing the provided entries\n*/",
        "com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableSetMultimap from five key-value pairs.\n* @param k1-k5 keys, @param v1-v5 values\n* @return ImmutableSetMultimap containing the entries\n*/",
        "com.google.common.collect.ImmutableSetMultimap:copyOf(java.lang.Iterable)": "/****\n* Creates an ImmutableSetMultimap from given entries.\n* @param entries iterable of key-value pairs\n* @return ImmutableSetMultimap constructed from entries\n*/",
        "com.google.common.collect.ImmutableSetMultimap:invert()": "/**\n* Inverts key-value pairs in the multimap.\n* @return ImmutableSetMultimap with keys and values swapped\n*/",
        "com.google.common.collect.ImmutableSetMultimap:copyOf(com.google.common.collect.Multimap)": "/**\n* Creates an ImmutableSetMultimap from a given multimap.\n* @param multimap source multimap to copy from\n* @return ImmutableSetMultimap constructed from the multimap\n*/",
        "com.google.common.collect.ImmutableSetMultimap:toImmutableSetMultimap(java.util.function.Function,java.util.function.Function)": "/**\n* Collects elements into an ImmutableSetMultimap using key and value functions.\n* @param keyFunction function to extract keys\n* @param valueFunction function to extract values\n* @return Collector for ImmutableSetMultimap\n*/",
        "com.google.common.collect.ImmutableSetMultimap:inverse()": "/**\n* Returns the inverse of the multimap.\n* @return ImmutableSetMultimap with keys and values swapped\n*/",
        "com.google.common.collect.ImmutableSetMultimap:flatteningToImmutableSetMultimap(java.util.function.Function,java.util.function.Function)": "/**\n* Collects elements into an ImmutableSetMultimap using key and value functions.\n* @param keyFunction function to extract keys\n* @param valuesFunction function to extract values as streams\n* @return Collector for ImmutableSetMultimap\n*/"
    },
    "com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm": {
        "com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm:<init>(com.google.common.collect.ImmutableMap)": "/**\n* Initializes EntrySetSerializedForm with the given immutable map.\n* @param map an immutable map of key-value pairs\n*/",
        "com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm:readResolve()": "/**** \n* Returns the entry set of the map for serialization.\n* @return ImmutableSet of key-value entries from the map\n*/"
    },
    "com.google.common.collect.RegularImmutableAsList": {
        "com.google.common.collect.RegularImmutableAsList:<init>(com.google.common.collect.ImmutableCollection,com.google.common.collect.ImmutableList)": "/**\n* Constructs RegularImmutableAsList with a delegate collection and a delegate list.\n* @param delegate the immutable collection to delegate to\n* @param delegateList the immutable list to use as the delegate list\n*/",
        "com.google.common.collect.RegularImmutableAsList:delegateCollection()": "/**\n* Returns the immutable collection delegate.\n* @return ImmutableCollection of type E\n*/",
        "com.google.common.collect.RegularImmutableAsList:internalArray()": "/**\n* Retrieves the internal array from the delegate list.\n* @return an array of objects or null if not available\n*/",
        "com.google.common.collect.RegularImmutableAsList:internalArrayStart()": "/**\n* Returns the starting index of the internal array.\n* @return index of the first element in the internal array\n*/",
        "com.google.common.collect.RegularImmutableAsList:internalArrayEnd()": "/**\n* Returns the end index of the internal array.\n* @return end index as an integer\n*/",
        "com.google.common.collect.RegularImmutableAsList:get(int)": "/**\n* Retrieves the element at the specified index from the delegate list.\n* @param index position of the element to retrieve\n* @return element at the specified index\n*/",
        "com.google.common.collect.RegularImmutableAsList:delegateList()": "/**\n* Returns the immutable delegate list.\n* @return an immutable list of type E\n*/",
        "com.google.common.collect.RegularImmutableAsList:listIterator(int)": "/**\n* Returns an unmodifiable list iterator starting at the specified index.\n* @param index starting position for the iterator\n* @return UnmodifiableListIterator for the list elements\n*/",
        "com.google.common.collect.RegularImmutableAsList:copyIntoArray(java.lang.Object[],int)": "/**\n* Copies elements from delegateList into the specified array starting at offset.\n* @param dst array to copy elements into\n* @param offset starting index in the destination array\n* @return new offset after copying elements\n*/",
        "com.google.common.collect.RegularImmutableAsList:forEach(java.util.function.Consumer)": "/**\n* Applies a consumer action to each element in the delegate list.\n* @param action the function to apply to each element\n*/",
        "com.google.common.collect.RegularImmutableAsList:<init>(com.google.common.collect.ImmutableCollection,java.lang.Object[])": "/**\n* Constructs RegularImmutableAsList with a delegate collection and an array.\n* @param delegate the immutable collection to delegate to\n* @param array input array for creating an ImmutableList\n*/"
    },
    "com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm": {
        "com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm:<init>(com.google.common.collect.ImmutableMap)": "/**\n* Initializes KeySetSerializedForm with the provided immutable map.\n* @param map an immutable map to be associated with this form\n*/",
        "com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm:readResolve()": "/**\n* Returns the key set from the map for serialization.\n* @return ImmutableSet of keys from the map\n*/"
    },
    "com.google.common.collect.ImmutableMapValues$SerializedForm": {
        "com.google.common.collect.ImmutableMapValues$SerializedForm:<init>(com.google.common.collect.ImmutableMap)": "/**\n* Initializes SerializedForm with a given immutable map.\n* @param map an immutable map to be serialized\n*/",
        "com.google.common.collect.ImmutableMapValues$SerializedForm:readResolve()": "/**\n* Resolves object during deserialization.\n* @return ImmutableCollection of values from the map\n*/"
    },
    "com.google.common.collect.ImmutableMapValues": {
        "com.google.common.collect.ImmutableMapValues:size()": "/**\n* Returns the number of entries in the map.\n* @return the size of the map as an integer\n*/",
        "com.google.common.collect.ImmutableMapValues:iterator()": "/**\n* Returns an unmodifiable iterator over the values in the map.\n* @return UnmodifiableIterator of map values\n*/",
        "com.google.common.collect.ImmutableMapValues:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return true, as this method always returns true\n*/",
        "com.google.common.collect.ImmutableMapValues:forEach(java.util.function.Consumer)": "/**\n* Applies a given action to each value in the map.\n* @param action the function to apply to each value\n*/",
        "com.google.common.collect.ImmutableMapValues:<init>(com.google.common.collect.ImmutableMap)": "/**\n* Initializes ImmutableMapValues with the provided ImmutableMap.\n* @param map the ImmutableMap to be wrapped\n*/",
        "com.google.common.collect.ImmutableMapValues:asList()": "/**\n* Converts the map values to an immutable list.\n* @return ImmutableList of values from the map\n*/",
        "com.google.common.collect.ImmutableMapValues:contains(java.lang.Object)": "/**\n* Checks if the collection contains the specified object.\n* @param object the object to find, can be null\n* @return true if found, otherwise false\n*/",
        "com.google.common.collect.ImmutableMapValues:spliterator()": "/**\n* Returns a Spliterator for the values in the map.\n* @return Spliterator of values from the map's entry set\n*/"
    },
    "com.google.common.collect.ImmutableMultimap$EntryCollection": {
        "com.google.common.collect.ImmutableMultimap$EntryCollection:contains(java.lang.Object)": "/**\n* Checks if the multimap contains a specified entry.\n* @param object potential Entry to check for\n* @return true if the entry exists, false otherwise\n*/",
        "com.google.common.collect.ImmutableMultimap$EntryCollection:<init>(com.google.common.collect.ImmutableMultimap)": "/**\n* Constructs EntryCollection with the provided ImmutableMultimap.\n* @param multimap the ImmutableMultimap to associate with this EntryCollection\n*/",
        "com.google.common.collect.ImmutableMultimap$EntryCollection:iterator()": "/**\n* Returns an unmodifiable iterator for map entries.\n* @return UnmodifiableIterator of key-value pairs\n*/",
        "com.google.common.collect.ImmutableMultimap$EntryCollection:isPartialView()": "/**\n* Determines if the current map is in a partial view state.\n* @return true if partial view, false otherwise\n*/",
        "com.google.common.collect.ImmutableMultimap$EntryCollection:size()": "/**\n* Returns the number of elements in the multimap.\n* @return the size of the multimap as an integer\n*/"
    },
    "com.google.common.collect.ImmutableMultiset": {
        "com.google.common.collect.ImmutableMultiset:<init>()": "/**\n* Constructs an empty ImmutableMultiset.\n*/",
        "com.google.common.collect.ImmutableMultiset:of()": "/**\n* Returns an empty immutable multiset.\n* @return an empty ImmutableMultiset instance\n*/",
        "com.google.common.collect.ImmutableMultiset:of(java.lang.Object)": "/**\n* Creates an ImmutableMultiset containing a single element.\n* @param e1 element to include in the multiset\n* @return ImmutableMultiset with the specified element\n*/",
        "com.google.common.collect.ImmutableMultiset:of(java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableMultiset from two elements.\n* @param e1 first element\n* @param e2 second element\n* @return ImmutableMultiset containing e1 and e2\n*/",
        "com.google.common.collect.ImmutableMultiset:of(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableMultiset from three elements.\n* @param e1 first element\n* @param e2 second element\n* @param e3 third element\n* @return ImmutableMultiset containing the provided elements\n*/",
        "com.google.common.collect.ImmutableMultiset:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableMultiset from four elements.\n* @param e1, e2, e3, e4 elements to include in the multiset\n* @return ImmutableMultiset containing the provided elements\n*/",
        "com.google.common.collect.ImmutableMultiset:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableMultiset from five elements.\n* @param e1 to e5 elements to be included in the multiset\n* @return ImmutableMultiset containing the provided elements\n*/",
        "com.google.common.collect.ImmutableMultiset:copyOf(java.lang.Object[])": "/**\n* Creates an immutable multiset from the given array of elements.\n* @param elements array of elements to copy\n* @return ImmutableMultiset containing the elements\n*/",
        "com.google.common.collect.ImmutableMultiset:asList()": "/**\n* Returns an immutable list of elements, caching the result for future calls.\n* @return ImmutableList of elements\n*/",
        "com.google.common.collect.ImmutableMultiset:contains(java.lang.Object)": "/**\n* Checks if the collection contains the specified object.\n* @param object the object to check for presence\n* @return true if present, false otherwise\n*/",
        "com.google.common.collect.ImmutableMultiset:add(java.lang.Object,int)": "/**\n* Always throws UnsupportedOperationException when adding an element.\n* @param element the element to add\n* @param occurrences the number of times to add the element\n* @throws UnsupportedOperationException always\n*/",
        "com.google.common.collect.ImmutableMultiset:remove(java.lang.Object,int)": "/**\n* Throws UnsupportedOperationException when attempting to remove elements.\n* @param element the object to remove (ignored)\n* @param occurrences number of occurrences to remove (ignored)\n* @return always throws exception\n*/",
        "com.google.common.collect.ImmutableMultiset:setCount(java.lang.Object,int)": "/**\n* Sets the count for an element, always throws UnsupportedOperationException.\n* @param element the element whose count is to be set\n* @param count the new count value\n* @return always throws exception, no return value\n*/",
        "com.google.common.collect.ImmutableMultiset:setCount(java.lang.Object,int,int)": "/**\n* Always throws UnsupportedOperationException; method is deprecated and should not be called.\n*/",
        "com.google.common.collect.ImmutableMultiset:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization, enforcing use of SerializedForm.\n* @param stream the input stream to read from\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.collect.ImmutableMultiset:createEntrySet()": "/**\n* Creates an entry set; returns empty set if no entries exist.\n* @return ImmutableSet of Entry objects\n*/",
        "com.google.common.collect.ImmutableMultiset:equals(java.lang.Object)": "/**\n* Checks equality of this object with another.\n* @param object the object to compare with this instance\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ImmutableMultiset:writeReplace()": "/**\n* Prepares the object for serialization.\n* @return SerializedForm instance representing the object\n*/",
        "com.google.common.collect.ImmutableMultiset:entrySet()": "/**\n* Retrieves the entry set, creating it if not already initialized.\n* @return ImmutableSet of Entry objects\n*/",
        "com.google.common.collect.ImmutableMultiset:iterator()": "/**\n* Returns an unmodifiable iterator over the elements.\n* @return UnmodifiableIterator of elements\n*/",
        "com.google.common.collect.ImmutableMultiset:copyIntoArray(java.lang.Object[],int)": "/**\n* Copies multiset entries into the provided array.\n* @param dst destination array for elements\n* @param offset starting index in the destination array\n* @return updated offset after copying\n*/",
        "com.google.common.collect.ImmutableMultiset:hashCode()": "/**\n* Computes the hash code for the current object.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.ImmutableMultiset:toString()": "/**\n* Returns a string representation of the entry set.\n* @return String representation of the entry set\n*/",
        "com.google.common.collect.ImmutableMultiset:elementSet()": "/**\n* Returns an immutable set of elements.\n* @return ImmutableSet of elements\n*/",
        "com.google.common.collect.ImmutableMultiset:toImmutableMultiset()": "/**\n* Returns a Collector for creating an ImmutableMultiset from elements.\n* @param <E> type of elements to collect\n* @return a Collector for ImmutableMultiset<E>\n*/",
        "com.google.common.collect.ImmutableMultiset:toImmutableMultiset(java.util.function.Function,java.util.function.ToIntFunction)": "/**\n* Collects elements into an ImmutableMultiset using provided functions.\n* @param elementFunction transforms elements to E type\n* @param countFunction counts occurrences of T\n* @return ImmutableMultiset of type E\n*/",
        "com.google.common.collect.ImmutableMultiset:builder()": "/**\n* Creates a new Builder instance for type E.\n* @return Builder<E> instance for constructing objects\n*/",
        "com.google.common.collect.ImmutableMultiset:copyFromEntries(java.util.Collection)": "/**\n* Creates an ImmutableMultiset from given entries.\n* @param entries collection of multiset entries\n* @return ImmutableMultiset based on entries or empty if none\n*/",
        "com.google.common.collect.ImmutableMultiset:copyOf(java.lang.Iterable)": "/**\n* Creates an ImmutableMultiset from the given elements.\n* @param elements source elements to copy\n* @return ImmutableMultiset based on elements\n*/",
        "com.google.common.collect.ImmutableMultiset:copyOf(java.util.Iterator)": "/**\n* Creates an ImmutableMultiset from an iterator of elements.\n* @param elements iterator of elements to be added\n* @return ImmutableMultiset containing the elements\n*/"
    },
    "com.google.common.collect.ImmutableMultimap$Keys": {
        "com.google.common.collect.ImmutableMultimap$Keys:count(java.lang.Object)": "/**\n* Counts the number of values associated with the specified element.\n* @param element the key to lookup in the map\n* @return the count of values or 0 if none exist\n*/",
        "com.google.common.collect.ImmutableMultimap$Keys:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; throws exception if invoked.\n* @throws InvalidObjectException indicates incorrect usage\n*/",
        "com.google.common.collect.ImmutableMultimap$Keys:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return true, as this method always represents a partial view\n*/",
        "com.google.common.collect.ImmutableMultimap$Keys:size()": "/**\n* Returns the number of elements in the collection.\n* @return the size of the collection as an integer\n*/",
        "com.google.common.collect.ImmutableMultimap$Keys:writeReplace()": "/**\n* Prepares object for serialization.\n* @return KeysSerializedForm representing the current instance\n*/",
        "com.google.common.collect.ImmutableMultimap$Keys:elementSet()": "/**\n* Returns an immutable set of elements from the collection.\n* @return ImmutableSet of keys in the map\n*/",
        "com.google.common.collect.ImmutableMultimap$Keys:contains(java.lang.Object)": "/**\n* Checks if the map contains the specified object.\n* @param object the object to check for presence\n* @return true if the object exists, false otherwise\n*/",
        "com.google.common.collect.ImmutableMultimap$Keys:getEntry(int)": "/**\n* Retrieves a multiset entry by index.\n* @param index position of the entry in the list\n* @return Multiset.Entry for the specified index\n*/"
    },
    "com.google.common.collect.ImmutableMultimap$KeysSerializedForm": {
        "com.google.common.collect.ImmutableMultimap$KeysSerializedForm:<init>(com.google.common.collect.ImmutableMultimap)": "/**\n* Initializes KeysSerializedForm with the given immutable multimap.\n* @param multimap the immutable multimap to serialize\n*/",
        "com.google.common.collect.ImmutableMultimap$KeysSerializedForm:readResolve()": "/**\n* Resolves the object during deserialization.\n* @return Immutable multiset of keys from the multimap\n*/"
    },
    "com.google.common.collect.ImmutableMultiset$ElementSet": {
        "com.google.common.collect.ImmutableMultiset$ElementSet:<init>(java.util.List,com.google.common.collect.Multiset)": "/**\n* Constructs an ElementSet with specified entries and a delegate multiset.\n* @param entries list of entries to initialize the set\n* @param delegate multiset for managing element counts\n*/",
        "com.google.common.collect.ImmutableMultiset$ElementSet:get(int)": "/**\n* Retrieves the element at the specified index.\n* @param index position of the element in the list\n* @return the element at the given index\n*/",
        "com.google.common.collect.ImmutableMultiset$ElementSet:contains(java.lang.Object)": "/**\n* Checks if the collection contains the specified object.\n* @param object the object to check for presence\n* @return true if the object is found, false otherwise\n*/",
        "com.google.common.collect.ImmutableMultiset$ElementSet:size()": "/**\n* Returns the number of entries in the collection.\n* @return the size of the entries list\n*/",
        "com.google.common.collect.ImmutableMultiset$ElementSet:isPartialView()": "/**\n* Indicates if the current view is a partial view.\n* @return true if it is a partial view, false otherwise\n*/"
    },
    "com.google.common.collect.ImmutableMultiset$EntrySet": {
        "com.google.common.collect.ImmutableMultiset$EntrySet:isPartialView()": "/**\n* Checks if the multiset is in a partial view state.\n* @return true if partial view, false otherwise\n*/",
        "com.google.common.collect.ImmutableMultiset$EntrySet:get(int)": "/**\n* Retrieves the entry at the specified index.\n* @param index position of the entry to retrieve\n* @return Entry object at the given index\n*/",
        "com.google.common.collect.ImmutableMultiset$EntrySet:contains(java.lang.Object)": "/**\n* Checks if the collection contains the specified entry with the correct count.\n* @param o the object to check, expected to be an Entry\n* @return true if the entry is present with the correct count, false otherwise\n*/",
        "com.google.common.collect.ImmutableMultiset$EntrySet:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; throws InvalidObjectException with a specific message.\n* @throws InvalidObjectException if invoked\n*/",
        "com.google.common.collect.ImmutableMultiset$EntrySet:writeReplace()": "/**\n* Serializes the current ImmutableMultiset for replacement.\n* @return serialized EntrySetSerializedForm object\n*/",
        "com.google.common.collect.ImmutableMultiset$EntrySet:hashCode()": "/**\n* Returns the hash code for the current ImmutableMultiset object.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.ImmutableMultiset$EntrySet:size()": "/**\n* Returns the number of elements in the set.\n* @return integer count of elements\n*/"
    },
    "com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm": {
        "com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm:<init>(com.google.common.collect.ImmutableMultiset)": "/**\n* Constructs an EntrySetSerializedForm from the given ImmutableMultiset.\n* @param multiset the ImmutableMultiset to serialize\n*/",
        "com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm:readResolve()": "/**\n* Resolves the object by returning the multiset's entry set.\n* @return ImmutableSet of Entry objects from the multiset\n*/"
    },
    "com.google.common.collect.ImmutableMultiset$SerializedForm": {
        "com.google.common.collect.ImmutableMultiset$SerializedForm:<init>(com.google.common.collect.Multiset)": "/**\n* Initializes serialized form from a given multiset.\n* @param multiset a collection of elements with their counts\n*/",
        "com.google.common.collect.ImmutableMultiset$SerializedForm:readResolve()": "/**\n* Resolves object state by creating an ImmutableMultiset from elements and their counts.\n* @return ImmutableMultiset of elements\n*/"
    },
    "com.google.common.collect.ImmutableRangeMap": {
        "com.google.common.collect.ImmutableRangeMap:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableList)": "/**\n* Constructs an ImmutableRangeMap with specified ranges and values.\n* @param ranges non-empty list of ranges\n* @param values corresponding values for each range\n*/",
        "com.google.common.collect.ImmutableRangeMap:of()": "/**\n* Returns an empty ImmutableRangeMap instance.\n* @return an empty ImmutableRangeMap of type K and V\n*/",
        "com.google.common.collect.ImmutableRangeMap:put(com.google.common.collect.Range,java.lang.Object)": "/**\n* Deprecated method that always throws UnsupportedOperationException.\n* @param range the range to put the value into (ignored)\n* @param value the value to put (ignored)\n*/",
        "com.google.common.collect.ImmutableRangeMap:putCoalescing(com.google.common.collect.Range,java.lang.Object)": "/**\n* Deprecated method that always throws UnsupportedOperationException.\n* @param range the range to put the value in (ignored)\n* @param value the value to put (ignored)\n*/",
        "com.google.common.collect.ImmutableRangeMap:putAll(com.google.common.collect.RangeMap)": "/**\n* Deprecated method; always throws UnsupportedOperationException.\n* @param rangeMap the RangeMap to add, but operation is unsupported\n*/",
        "com.google.common.collect.ImmutableRangeMap:clear()": "/**\n* Clears the collection, but always throws UnsupportedOperationException.\n*/",
        "com.google.common.collect.ImmutableRangeMap:remove(com.google.common.collect.Range)": "/**\n* Removes elements in the specified range; always throws UnsupportedOperationException.\n* @param range the range of elements to remove\n*/",
        "com.google.common.collect.ImmutableRangeMap:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)": "/**\n* Merges a value into the specified range, always throws UnsupportedOperationException.\n* @param range the range to merge into\n* @param value the value to merge, can be null\n* @param remappingFunction function to compute new value, ignored here\n*/",
        "com.google.common.collect.ImmutableRangeMap:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; throws exception to enforce use of SerializedForm.\n* @param stream ObjectInputStream for deserialization\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.collect.ImmutableRangeMap:builder()": "/**\n* Creates a new Builder instance for key-value pairs.\n* @return a new Builder object\n*/",
        "com.google.common.collect.ImmutableRangeMap:asMapOfRanges()": "/**\n* Converts ranges to an immutable map of ranges to values.\n* @return ImmutableMap mapping ranges to corresponding values\n*/",
        "com.google.common.collect.ImmutableRangeMap:hashCode()": "/**\n* Computes the hash code based on the ranges map.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.ImmutableRangeMap:equals(java.lang.Object)": "/**\n* Checks equality with another RangeMap object.\n* @param o object to compare, may be null\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ImmutableRangeMap:writeReplace()": "/**\n* Replaces the object with its serialized form.\n* @return SerializedForm instance representing the object\n*/",
        "com.google.common.collect.ImmutableRangeMap:toString()": "/**\n* Returns string representation of the object using its range map.\n* @return string representation of the object\n*/",
        "com.google.common.collect.ImmutableRangeMap:span()": "/**\n* Returns a Range spanning from the first to the last range in the collection.\n* @return Range object defined by the first and last bounds\n*/",
        "com.google.common.collect.ImmutableRangeMap:asDescendingMapOfRanges()": "/**\n* Returns an ImmutableMap of ranges in descending order.\n* @return ImmutableMap with ranges as keys and corresponding values\n*/",
        "com.google.common.collect.ImmutableRangeMap:of(com.google.common.collect.Range,java.lang.Object)": "/**\n* Creates an ImmutableRangeMap with a single range and its corresponding value.\n* @param range the range for the map\n* @param value the value associated with the range\n* @return ImmutableRangeMap containing the specified range and value\n*/",
        "com.google.common.collect.ImmutableRangeMap:subRangeMap(com.google.common.collect.Range)": "/**\n* Returns a subrange map for the specified range.\n* @param range the range to create a subrange map for\n* @return ImmutableRangeMap for the specified range or empty if no match\n*/",
        "com.google.common.collect.ImmutableRangeMap:copyOf(com.google.common.collect.RangeMap)": "/**\n* Creates a copy of the given RangeMap.\n* @param rangeMap the RangeMap to copy\n* @return an ImmutableRangeMap containing the same ranges and values\n*/",
        "com.google.common.collect.ImmutableRangeMap:toImmutableRangeMap(java.util.function.Function,java.util.function.Function)": "/**\n* Collects elements into an ImmutableRangeMap using key and value functions.\n* @param keyFunction extracts range keys, @param valueFunction extracts values\n* @return Collector for ImmutableRangeMap\n*/"
    },
    "com.google.common.collect.ImmutableRangeMap$SerializedForm": {
        "com.google.common.collect.ImmutableRangeMap$SerializedForm:<init>(com.google.common.collect.ImmutableMap)": "/**\n* Initializes SerializedForm with a map of ranges.\n* @param mapOfRanges mapping of ranges to values\n*/",
        "com.google.common.collect.ImmutableRangeMap$SerializedForm:createRangeMap()": "/**\n* Creates an ImmutableRangeMap from the current range entries.\n* @return ImmutableRangeMap built from existing entries\n*/",
        "com.google.common.collect.ImmutableRangeMap$SerializedForm:readResolve()": "/**\n* Resolves the object state, returning an empty map or a created range map.\n* @return Object representing the resolved state\n*/"
    },
    "com.google.common.collect.ImmutableRangeSet$AsSet": {
        "com.google.common.collect.ImmutableRangeSet$AsSet:iterator()": "/**\n* Returns an unmodifiable iterator over elements in specified ranges.\n* @return UnmodifiableIterator of type C\n*/",
        "com.google.common.collect.ImmutableRangeSet$AsSet:descendingIterator()": "/**\n* Returns an iterator for elements in descending order.\n* @return UnmodifiableIterator of elements\n*/",
        "com.google.common.collect.ImmutableRangeSet$AsSet:isPartialView()": "/**\n* Checks if the current view is a partial view.\n* @return true if partial view, false otherwise\n*/",
        "com.google.common.collect.ImmutableRangeSet$AsSet:toString()": "/**\n* Returns a string representation of the ranges.\n* @return String representation of the ranges object\n*/",
        "com.google.common.collect.ImmutableRangeSet$AsSet:readObject(java.io.ObjectInputStream)": "/**\n* Prevents object deserialization; throws exception if invoked.\n* @param stream ObjectInputStream for reading serialized objects\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.collect.ImmutableRangeSet$AsSet:writeReplace()": "/**\n* Prepares object for serialization by returning its serialized form.\n* @return AsSetSerializedForm instance containing ranges and domain\n*/",
        "com.google.common.collect.ImmutableRangeSet$AsSet:contains(java.lang.Object)": "/**\n* Checks if the range contains the specified object.\n* @param o the object to check for containment\n* @return true if object is in range, false otherwise\n*/",
        "com.google.common.collect.ImmutableRangeSet$AsSet:createDescendingSet()": "/**\n* Creates a descending immutable sorted set from the current set.\n* @return DescendingImmutableSortedSet instance\n*/",
        "com.google.common.collect.ImmutableRangeSet$AsSet:size()": "/**\n* Computes the size of the collection, caching the result for efficiency.\n* @return the total size as an int, saturated at Integer limits\n*/",
        "com.google.common.collect.ImmutableRangeSet$AsSet:indexOf(java.lang.Object)": "/**\n* Finds the index of the target in ranges.\n* @param target the object to find\n* @return index of target or -1 if not found\n*/",
        "com.google.common.collect.ImmutableRangeSet$AsSet:subSet(com.google.common.collect.Range)": "/**\n* Returns an immutable sorted set for the specified range.\n* @param range the range to create a subset from\n* @return ImmutableSortedSet of elements within the range\n*/",
        "com.google.common.collect.ImmutableRangeSet$AsSet:headSetImpl(java.lang.Comparable,boolean)": "/**\n* Returns a sorted set of elements up to a specified element.\n* @param toElement upper limit for the set\n* @param inclusive true to include the upper limit element\n* @return ImmutableSortedSet of elements up to the limit\n*/",
        "com.google.common.collect.ImmutableRangeSet$AsSet:subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)": "/**\n* Returns a subset of elements in a specified range.\n* @param fromElement start of range, inclusive if fromInclusive\n* @param fromInclusive true if fromElement is included\n* @param toElement end of range, inclusive if toInclusive\n* @param toInclusive true if toElement is included\n* @return ImmutableSortedSet of elements within the range\n*/",
        "com.google.common.collect.ImmutableRangeSet$AsSet:tailSetImpl(java.lang.Comparable,boolean)": "/**\n* Returns a tail set of elements from a specified element.\n* @param fromElement starting element for the tail set\n* @param inclusive true to include the starting element\n* @return ImmutableSortedSet from the specified element onward\n*/",
        "com.google.common.collect.ImmutableRangeSet$AsSet:headSetImpl(java.lang.Object,boolean)": "/**\n* Returns a sorted set of elements up to a specified element.\n* @param toElement upper limit for the set\n* @param inclusive true to include the upper limit element\n* @return ImmutableSortedSet of elements up to the limit\n*/",
        "com.google.common.collect.ImmutableRangeSet$AsSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a subset of elements within a specified range.\n* @param fromElement start of range, inclusive if fromInclusive\n* @param toElement end of range, inclusive if toInclusive\n* @return ImmutableSortedSet of elements in the range\n*/",
        "com.google.common.collect.ImmutableRangeSet$AsSet:tailSetImpl(java.lang.Object,boolean)": "/**** Returns a tail set starting from a specified element. \n* @param fromElement the starting element for the tail set \n* @param inclusive true to include the starting element \n* @return ImmutableSortedSet from the specified element onward \n*/"
    },
    "com.google.common.collect.BoundType": {
        "com.google.common.collect.BoundType:forBoolean(boolean)": "/**\n* Returns BoundType based on inclusivity for boolean values.\n* @param inclusive true for CLOSED, false for OPEN\n* @return corresponding BoundType\n*/"
    },
    "com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm": {
        "com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.DiscreteDomain)": "/**\n* Initializes a set with specified ranges and discrete domain.\n* @param ranges list of ranges to define the set\n* @param domain discrete domain for the set elements\n*/",
        "com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm:readResolve()": "/**\n* Resolves the object during deserialization.\n* @return ImmutableSortedSet of elements within the specified domain\n*/"
    },
    "com.google.common.collect.ImmutableRangeSet": {
        "com.google.common.collect.ImmutableRangeSet:of()": "/**\n* Returns an empty ImmutableRangeSet.\n* @return an instance of ImmutableRangeSet of type C\n*/",
        "com.google.common.collect.ImmutableRangeSet:all()": "/**\n* Returns an immutable range set containing all possible values.\n* @return ImmutableRangeSet of all comparable values\n*/",
        "com.google.common.collect.ImmutableRangeSet:isPartialView()": "/**\n* Checks if the current ranges are in a partial view state.\n* @return true if partial view, false otherwise\n*/",
        "com.google.common.collect.ImmutableRangeSet:isEmpty()": "/**\n* Checks if the ranges collection is empty.\n* @return true if ranges is empty, false otherwise\n*/",
        "com.google.common.collect.ImmutableRangeSet:add(com.google.common.collect.Range)": "/**\n* Deprecated: Always throws UnsupportedOperationException when called.\n* @param range the range to add (not supported)\n*/",
        "com.google.common.collect.ImmutableRangeSet:addAll(com.google.common.collect.RangeSet)": "/**\n* Deprecated method that always throws UnsupportedOperationException.\n* @param other RangeSet to add, ignored as operation is unsupported\n*/",
        "com.google.common.collect.ImmutableRangeSet:addAll(java.lang.Iterable)": "/**\n* Deprecated method that always throws UnsupportedOperationException.\n* @param other iterable of Range objects to add\n*/",
        "com.google.common.collect.ImmutableRangeSet:remove(com.google.common.collect.Range)": "/**\n* Removes elements in the specified range; always throws UnsupportedOperationException.\n* @param range the range of elements to remove\n*/",
        "com.google.common.collect.ImmutableRangeSet:removeAll(com.google.common.collect.RangeSet)": "/**\n* Deprecated method that always throws UnsupportedOperationException.\n* @param other the RangeSet to remove elements from (not supported)\n*/",
        "com.google.common.collect.ImmutableRangeSet:removeAll(java.lang.Iterable)": "/**\n* Deprecated method that always throws UnsupportedOperationException.\n* @param other iterable of ranges to remove\n*/",
        "com.google.common.collect.ImmutableRangeSet:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; throws exception to enforce SerializedForm usage.\n* @param stream ObjectInputStream for deserialization\n* @throws InvalidObjectException when deserialization is attempted\n*/",
        "com.google.common.collect.ImmutableRangeSet:<init>(com.google.common.collect.ImmutableList)": "/**\n* Constructs an ImmutableRangeSet with specified ranges.\n* @param ranges list of Range objects to initialize the set\n*/",
        "com.google.common.collect.ImmutableRangeSet:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableRangeSet)": "/**\n* Constructs an ImmutableRangeSet with specified ranges and its complement.\n* @param ranges list of ranges to include\n* @param complement range set that complements this set\n*/",
        "com.google.common.collect.ImmutableRangeSet:contains(java.lang.Comparable)": "/**\n* Checks if the range contains the specified value.\n* @param value the value to check for containment\n* @return true if value is in range, false otherwise\n*/",
        "com.google.common.collect.ImmutableRangeSet:enclosesAll(com.google.common.collect.RangeSet)": "/**\n* Checks if this range set encloses all ranges in another range set.\n* @param other range set to check against\n* @return true if all ranges are enclosed, false otherwise\n*/",
        "com.google.common.collect.ImmutableRangeSet:equals(java.lang.Object)": "/**\n* Checks equality with another object, specifically a RangeSet.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ImmutableRangeSet:writeReplace()": "/**\n* Replaces the object with its serialized form.\n* @return SerializedForm object representing the current instance\n*/",
        "com.google.common.collect.ImmutableRangeSet:toImmutableRangeSet()": "/**\n* Creates a collector for building an ImmutableRangeSet from Comparable elements.\n* @param <E> type of elements that are Comparable\n* @return Collector for ImmutableRangeSet\n*/",
        "com.google.common.collect.ImmutableRangeSet:clear()": "/**\n* Clears all elements by removing them from the entire range.\n*/",
        "com.google.common.collect.ImmutableRangeSet:asRanges()": "/**\n* Converts the stored ranges to an ImmutableSet.\n* @return ImmutableSet of Range objects or empty if no ranges exist\n*/",
        "com.google.common.collect.ImmutableRangeSet:builder()": "/**\n* Creates a new Builder instance for Comparable types.\n* @return a new Builder<C> for building comparable objects\n*/",
        "com.google.common.collect.ImmutableRangeSet:complement()": "/**\n* Computes the complement of the current ImmutableRangeSet.\n* @return ImmutableRangeSet representing the complement ranges\n*/",
        "com.google.common.collect.ImmutableRangeSet:span()": "/**\n* Returns a Range spanning the first and last bounds of stored ranges.\n* @return Range object defined by the first lower and last upper bounds\n*/",
        "com.google.common.collect.ImmutableRangeSet:asDescendingSetOfRanges()": "/**\n* Returns a descending set of ranges from the current ranges.\n* @return ImmutableSet of Range objects in descending order\n*/",
        "com.google.common.collect.ImmutableRangeSet:of(com.google.common.collect.Range)": "/**\n* Creates an ImmutableRangeSet from a specified range.\n* @param range the Range to convert\n* @return ImmutableRangeSet based on the range provided\n*/",
        "com.google.common.collect.ImmutableRangeSet:intersectRanges(com.google.common.collect.Range)": "/**\n* Computes intersections of stored ranges with a given range.\n* @param range the range to intersect with stored ranges\n* @return ImmutableList of intersected Range objects\n*/",
        "com.google.common.collect.ImmutableRangeSet:asSet(com.google.common.collect.DiscreteDomain)": "/**\n* Converts the range set to an immutable sorted set for a given discrete domain.\n* @param domain the discrete domain for the range set\n* @return ImmutableSortedSet of elements within the specified domain\n*/",
        "com.google.common.collect.ImmutableRangeSet:intersects(com.google.common.collect.Range)": "/**\n* Checks if this range intersects with another range.\n* @param otherRange the range to check for intersection\n* @return true if ranges intersect, false otherwise\n*/",
        "com.google.common.collect.ImmutableRangeSet:encloses(com.google.common.collect.Range)": "/**\n* Checks if this range encloses another specified range.\n* @param otherRange the range to check\n* @return true if this range encloses otherRange, false otherwise\n*/",
        "com.google.common.collect.ImmutableRangeSet:rangeContaining(java.lang.Comparable)": "/**\n* Finds the range containing the specified value.\n* @param value the value to locate within ranges\n* @return Range object or null if not found\n*/",
        "com.google.common.collect.ImmutableRangeSet:subRangeSet(com.google.common.collect.Range)": "/**\n* Returns a subrange set based on the specified range.\n* @param range the range to create a subrange set from\n* @return ImmutableRangeSet of the subrange or an empty set\n*/",
        "com.google.common.collect.ImmutableRangeSet:copyOf(java.lang.Iterable)": "/**\n* Creates an ImmutableRangeSet from the given ranges.\n* @param ranges iterable of ranges to include\n* @return ImmutableRangeSet containing the specified ranges\n*/",
        "com.google.common.collect.ImmutableRangeSet:copyOf(com.google.common.collect.RangeSet)": "/**\n* Creates an ImmutableRangeSet from a given RangeSet.\n* @param rangeSet the source RangeSet to copy from\n* @return a new ImmutableRangeSet based on the input\n*/",
        "com.google.common.collect.ImmutableRangeSet:unionOf(java.lang.Iterable)": "/**\n* Creates an ImmutableRangeSet from the union of given ranges.\n* @param ranges Iterable of Range objects to combine\n* @return ImmutableRangeSet representing the union of ranges\n*/",
        "com.google.common.collect.ImmutableRangeSet:intersection(com.google.common.collect.RangeSet)": "/**\n* Computes intersection of this RangeSet with another.\n* @param other the RangeSet to intersect with\n* @return an ImmutableRangeSet representing the intersection\n*/",
        "com.google.common.collect.ImmutableRangeSet:difference(com.google.common.collect.RangeSet)": "/**\n* Computes the difference between two range sets.\n* @param other the range set to subtract from this set\n* @return an ImmutableRangeSet representing the difference\n*/",
        "com.google.common.collect.ImmutableRangeSet:union(com.google.common.collect.RangeSet)": "/**\n* Combines current and given RangeSet into an ImmutableRangeSet.\n* @param other RangeSet to combine with the current one\n* @return ImmutableRangeSet representing the union of both sets\n*/"
    },
    "com.google.common.collect.ImmutableRangeSet$SerializedForm": {
        "com.google.common.collect.ImmutableRangeSet$SerializedForm:<init>(com.google.common.collect.ImmutableList)": "/**\n* Constructs SerializedForm with specified ranges.\n* @param ranges a list of immutable ranges\n*/",
        "com.google.common.collect.ImmutableRangeSet$SerializedForm:readResolve()": "/**\n* Resolves the object state based on ranges.\n* @return Object representing the resolved state\n*/"
    },
    "com.google.common.collect.ImmutableSet$EmptySetBuilderImpl": {
        "com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:instance()": "/**\n* Returns an instance of SetBuilderImpl.\n* @return SetBuilderImpl instance of the generic type E\n*/",
        "com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:copy()": "/**\n* Returns a copy of the current SetBuilderImpl instance.\n* @return a reference to the current SetBuilderImpl object\n*/",
        "com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:build()": "/**\n* Builds and returns an empty ImmutableSet instance.\n* @return an empty ImmutableSet of type E\n*/",
        "com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:<init>()": "/**\n* Constructs an EmptySetBuilderImpl with no initial capacity.\n*/",
        "com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:add(java.lang.Object)": "/**\n* Creates a new RegularSetBuilderImpl and adds an element to it.\n* @param e element to add\n* @return SetBuilderImpl instance with the added element\n*/"
    },
    "com.google.common.collect.ImmutableSet$SetBuilderImpl": {
        "com.google.common.collect.ImmutableSet$SetBuilderImpl:<init>(int)": "/**\n* Initializes SetBuilderImpl with a specified capacity.\n* @param expectedCapacity initial capacity for deduped elements\n*/",
        "com.google.common.collect.ImmutableSet$SetBuilderImpl:<init>(com.google.common.collect.ImmutableSet$SetBuilderImpl)": "/**\n* Copies elements from another SetBuilderImpl instance.\n* @param toCopy instance to copy elements from\n*/",
        "com.google.common.collect.ImmutableSet$SetBuilderImpl:combine(com.google.common.collect.ImmutableSet$SetBuilderImpl)": "/**\n* Combines two SetBuilderImpl instances.\n* @param other another SetBuilderImpl to combine with\n* @return a new SetBuilderImpl containing combined elements\n*/",
        "com.google.common.collect.ImmutableSet$SetBuilderImpl:review()": "/**\n* Returns the current instance of SetBuilderImpl.\n* @return the current SetBuilderImpl instance\n*/",
        "com.google.common.collect.ImmutableSet$SetBuilderImpl:ensureCapacity(int)": "/**\n* Ensures array capacity is sufficient for minCapacity.\n* @param minCapacity minimum required capacity for the array\n*/",
        "com.google.common.collect.ImmutableSet$SetBuilderImpl:addDedupedElement(java.lang.Object)": "/**\n* Adds a deduplicated element to the array.\n* @param e element to add, ensuring no duplicates are stored\n*/"
    },
    "com.google.common.collect.ImmutableSet$Indexed$1": {
        "com.google.common.collect.ImmutableSet$Indexed$1:get(int)": "/**\n* Retrieves the element at the specified index.\n* @param index position of the element to retrieve\n* @return element at the given index\n*/"
    },
    "com.google.common.collect.ImmutableSet$Indexed": {
        "com.google.common.collect.ImmutableSet$Indexed:createAsList()": "/**\n* Creates an immutable list view of the indexed collection.\n* @return ImmutableList containing elements from the indexed collection\n*/",
        "com.google.common.collect.ImmutableSet$Indexed:forEach(java.util.function.Consumer)": "/**\n* Applies the given consumer to each element in the collection.\n* @param consumer a function to apply to each element\n*/",
        "com.google.common.collect.ImmutableSet$Indexed:copyIntoArray(java.lang.Object[],int)": "/**\n* Copies elements into the specified array starting at the given offset.\n* @param dst array to copy elements into\n* @param offset starting index in the destination array\n* @return new offset after copying elements\n*/",
        "com.google.common.collect.ImmutableSet$Indexed:spliterator()": "/**\n* Creates a Spliterator for the collection elements.\n* @return Spliterator for the collection elements\n*/",
        "com.google.common.collect.ImmutableSet$Indexed:iterator()": "/**\n* Returns an unmodifiable iterator for the collection elements.\n* @return UnmodifiableIterator for the collection\n*/"
    },
    "com.google.common.collect.JdkBackedImmutableSet": {
        "com.google.common.collect.JdkBackedImmutableSet:<init>(java.util.Set,com.google.common.collect.ImmutableList)": "/**\n* Constructs an immutable set backed by a delegate set and a delegate list.\n* @param delegate the original set to back the immutable set\n* @param delegateList the list providing additional immutability\n*/",
        "com.google.common.collect.JdkBackedImmutableSet:get(int)": "/**\n* Retrieves the element at the specified index from the delegate list.\n* @param index position of the element to retrieve\n* @return element at the given index\n*/",
        "com.google.common.collect.JdkBackedImmutableSet:contains(java.lang.Object)": "/**\n* Checks if the collection contains the specified object.\n* @param object the object to check for presence\n* @return true if the object is found, false otherwise\n*/",
        "com.google.common.collect.JdkBackedImmutableSet:size()": "/**\n* Returns the number of elements in the delegate list.\n* @return the size of the delegate list\n*/",
        "com.google.common.collect.JdkBackedImmutableSet:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return false, as this view is not a partial view\n*/"
    },
    "com.google.common.collect.RegularImmutableSet": {
        "com.google.common.collect.RegularImmutableSet:<init>(java.lang.Object[],int,java.lang.Object[],int)": "/**\n* Constructs a RegularImmutableSet with specified elements and hash properties.\n* @param elements array of elements in the set\n* @param hashCode precomputed hash code of the set\n* @param table hash table for element storage\n* @param mask bitmask for hash table indexing\n*/",
        "com.google.common.collect.RegularImmutableSet:iterator()": "/**\n* Returns an unmodifiable iterator over the elements array.\n* @return UnmodifiableIterator of elements\n*/",
        "com.google.common.collect.RegularImmutableSet:spliterator()": "/**\n* Returns a Spliterator for the elements collection.\n* @return Spliterator for traversing the elements\n*/",
        "com.google.common.collect.RegularImmutableSet:copyIntoArray(java.lang.Object[],int)": "/**\n* Copies elements into the specified array starting at the given offset.\n* @param dst the destination array\n* @param offset the starting index in the destination array\n* @return the new offset after copying\n*/",
        "com.google.common.collect.RegularImmutableSet:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return false, as this view is not partial\n*/",
        "com.google.common.collect.RegularImmutableSet:contains(java.lang.Object)": "/**\n* Checks if the target object is present in the hash table.\n* @param target object to search for\n* @return true if found, false otherwise\n*/",
        "com.google.common.collect.RegularImmutableSet:createAsList()": "/**\n* Creates an ImmutableList from elements or returns an empty list if no elements exist.\n* @return ImmutableList containing elements or an empty list\n*/"
    },
    "com.google.common.collect.ImmutableSet$SerializedForm": {
        "com.google.common.collect.ImmutableSet$SerializedForm:<init>(java.lang.Object[])": "/**\n* Initializes SerializedForm with an array of elements.\n* @param elements array of objects to be serialized\n*/",
        "com.google.common.collect.ImmutableSet$SerializedForm:readResolve()": "/**\n* Resolves the object by creating an ImmutableSet from elements.\n* @return ImmutableSet containing the elements\n*/"
    },
    "com.google.common.collect.ImmutableSetMultimap$EntrySet": {
        "com.google.common.collect.ImmutableSetMultimap$EntrySet:contains(java.lang.Object)": "/**\n* Checks if the multimap contains a specific entry.\n* @param object the entry to check for, can be null\n* @return true if the entry exists, false otherwise\n*/",
        "com.google.common.collect.ImmutableSetMultimap$EntrySet:size()": "/**\n* Returns the number of key-value pairs in the multimap.\n* @return size of the multimap as an integer\n*/",
        "com.google.common.collect.ImmutableSetMultimap$EntrySet:iterator()": "/**\n* Returns an unmodifiable iterator over the multimap's entries.\n* @return an iterator for the multimap entries\n*/",
        "com.google.common.collect.ImmutableSetMultimap$EntrySet:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return false, as this view is not partial\n*/",
        "com.google.common.collect.ImmutableSetMultimap$EntrySet:<init>(com.google.common.collect.ImmutableSetMultimap)": "/**\n* Initializes EntrySet with the provided ImmutableSetMultimap.\n* @param multimap the ImmutableSetMultimap to associate with this EntrySet\n*/"
    },
    "com.google.common.collect.ImmutableSortedMap$Builder": {
        "com.google.common.collect.ImmutableSortedMap$Builder:orderEntriesByValue(java.util.Comparator)": "/**\n* Throws UnsupportedOperationException for ordering entries by value.\n* @param valueComparator comparator for value ordering\n* @return always throws exception\n*/",
        "com.google.common.collect.ImmutableSortedMap$Builder:buildKeepingLast()": "/**\n* Builds an ImmutableSortedMap, not yet implemented.\n* @return ImmutableSortedMap with last entries kept\n* @throws UnsupportedOperationException if called\n*/",
        "com.google.common.collect.ImmutableSortedMap$Builder:<init>(java.util.Comparator)": "/**\n* Initializes a Builder with a non-null comparator.\n* @param comparator the comparator used for ordering\n*/",
        "com.google.common.collect.ImmutableSortedMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder)": "/**\n* Combines another builder into this one.\n* @param other the builder to combine\n* @return the updated builder instance\n*/",
        "com.google.common.collect.ImmutableSortedMap$Builder:put(java.lang.Object,java.lang.Object)": "/**\n* Adds a key-value pair to the builder and returns the builder instance.\n* @param key the entry key; must not be null\n* @param value the entry value; must not be null\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableSortedMap$Builder:buildOrThrow()": "/**\n* Builds an ImmutableSortedMap based on the current size and entries.\n* @return ImmutableSortedMap with sorted entries\n*/",
        "com.google.common.collect.ImmutableSortedMap$Builder:put(java.util.Map$Entry)": "/**\n* Adds an entry to the builder and returns the builder instance for chaining.\n* @param entry the entry containing key and value\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableSortedMap$Builder:build()": "/**\n* Builds and returns an ImmutableSortedMap of entries.\n* @return ImmutableSortedMap containing sorted entries\n*/",
        "com.google.common.collect.ImmutableSortedMap$Builder:putAll(java.lang.Iterable)": "/**\n* Adds all entries to the builder and returns the builder instance.\n* @param entries iterable of key-value pairs\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableSortedMap$Builder:putAll(java.util.Map)": "/****\n* Adds all entries from the provided map to the builder.\n* @param map key-value pairs to add\n* @return Builder instance for method chaining\n*/"
    },
    "com.google.common.collect.ImmutableSortedMap": {
        "com.google.common.collect.ImmutableSortedMap:of()": "/**\n* Returns an empty ImmutableSortedMap instance.\n* @return an empty ImmutableSortedMap of type K and V\n*/",
        "com.google.common.collect.ImmutableSortedMap:<init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSortedMap)": "/**\n* Constructs an ImmutableSortedMap with a key set, value list, and optional descending map.\n* @param keySet sorted set of keys\n* @param valueList list of values corresponding to keys\n* @param descendingMap optional descending view of the map\n*/",
        "com.google.common.collect.ImmutableSortedMap:size()": "/**\n* Returns the number of elements in the value list.\n* @return size of the value list as an integer\n*/",
        "com.google.common.collect.ImmutableSortedMap:entrySet()": "/**\n* Returns an immutable set of key-value pairs from the map.\n* @return ImmutableSet of map entries\n*/",
        "com.google.common.collect.ImmutableSortedMap:createKeySet()": "/**\n* Throws an AssertionError as this method should not be invoked.\n* @return never returns a value\n*/",
        "com.google.common.collect.ImmutableSortedMap:createValues()": "/**\n* Throws an AssertionError as this method should not be invoked.\n*/",
        "com.google.common.collect.ImmutableSortedMap:keySet()": "/**\n* Returns an immutable sorted set of keys.\n* @return ImmutableSortedSet containing the keys\n*/",
        "com.google.common.collect.ImmutableSortedMap:pollFirstEntry()": "/**\n* Always throws UnsupportedOperationException; method is deprecated and not usable.\n*/",
        "com.google.common.collect.ImmutableSortedMap:pollLastEntry()": "/**\n* Always throws UnsupportedOperationException; method is deprecated and should not be called.\n*/",
        "com.google.common.collect.ImmutableSortedMap:descendingKeySet()": "/**\n* Returns a descending view of the key set.\n* @return ImmutableSortedSet of keys in descending order\n*/",
        "com.google.common.collect.ImmutableSortedMap:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; throws exception for invalid object input.\n* @param stream ObjectInputStream for reading serialized objects\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.collect.ImmutableSortedMap:values()": "/**\n* Returns an immutable collection of values.\n* @return ImmutableCollection of values\n*/",
        "com.google.common.collect.ImmutableSortedMap:navigableKeySet()": "/**\n* Returns the navigable key set of the sorted map.\n* @return ImmutableSortedSet of keys\n*/",
        "com.google.common.collect.ImmutableSortedMap:createEntrySet()": "/**\n* Creates an entry set of key-value pairs.\n* @return ImmutableSet of map entries or empty set if map is empty\n*/",
        "com.google.common.collect.ImmutableSortedMap:<init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList)": "/**\n* Constructs an ImmutableSortedMap with a key set and value list.\n* @param keySet sorted set of keys\n* @param valueList list of values corresponding to keys\n*/",
        "com.google.common.collect.ImmutableSortedMap:forEach(java.util.function.BiConsumer)": "/**\n* Applies action to each key-value pair in the map.\n* @param action function to process each key-value pair\n*/",
        "com.google.common.collect.ImmutableSortedMap:isPartialView()": "/**\n* Determines if the view is partial based on keySet or valueList.\n* @return true if either is partial, false otherwise\n*/",
        "com.google.common.collect.ImmutableSortedMap:firstEntry()": "/**\n* Retrieves the first entry of the map or null if empty.\n* @return Entry object or null if the map is empty\n*/",
        "com.google.common.collect.ImmutableSortedMap:lastEntry()": "/**\n* Retrieves the last entry of the map.\n* @return last Entry or null if the map is empty\n*/",
        "com.google.common.collect.ImmutableSortedMap:comparator()": "/**\n* Returns the comparator for sorting keys.\n* @return Comparator for keys of type K\n*/",
        "com.google.common.collect.ImmutableSortedMap:get(java.lang.Object)": "/**\n* Retrieves the value associated with the given key.\n* @param key the key to look up; returns null if not found\n* @return value associated with the key or null if not found\n*/",
        "com.google.common.collect.ImmutableSortedMap:emptyMap(java.util.Comparator)": "/**\n* Creates an empty ImmutableSortedMap with a specified comparator.\n* @param comparator defines the order of keys\n* @return an empty ImmutableSortedMap\n*/",
        "com.google.common.collect.ImmutableSortedMap:naturalOrder()": "/**\n* Creates a Builder for natural ordering of comparable keys.\n* @return Builder instance for key-value pairs with natural order\n*/",
        "com.google.common.collect.ImmutableSortedMap:orderedBy(java.util.Comparator)": "/**\n* Creates a Builder ordered by the specified comparator.\n* @param comparator the comparator for key ordering\n* @return a new Builder instance\n*/",
        "com.google.common.collect.ImmutableSortedMap:reverseOrder()": "/**\n* Creates a Builder with reversed natural ordering for comparable keys.\n* @return Builder instance for key-value pairs\n*/",
        "com.google.common.collect.ImmutableSortedMap:writeReplace()": "/**\n* Prepares object for serialization replacement.\n* @return SerializedForm representing the current object\n*/",
        "com.google.common.collect.ImmutableSortedMap:descendingMap()": "/**\n* Returns a descending view of the map.\n* @return ImmutableSortedMap in descending order or empty if original map is empty\n*/",
        "com.google.common.collect.ImmutableSortedMap:of(java.util.Comparator,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableSortedMap with a single key-value pair.\n* @param comparator key comparator\n* @param k1 key for the map\n* @param v1 value for the map\n* @return ImmutableSortedMap containing the key-value pair\n*/",
        "com.google.common.collect.ImmutableSortedMap:fromEntries(java.util.Comparator,boolean,java.util.Map$Entry[],int)": "/**\n* Creates an ImmutableSortedMap from provided entries.\n* @param comparator key comparator\n* @param sameComparator indicates if the same comparator is used\n* @param entryArray array of key-value entries\n* @param size number of entries in the array\n* @return ImmutableSortedMap built from the entries\n*/",
        "com.google.common.collect.ImmutableSortedMap:getSubMap(int,int)": "/**\n* Retrieves a submap from specified index range.\n* @param fromIndex starting index, @param toIndex ending index\n* @return ImmutableSortedMap of the specified range\n*/",
        "com.google.common.collect.ImmutableSortedMap:fromEntries(java.util.Comparator,boolean,java.lang.Iterable)": "/**\n* Creates an ImmutableSortedMap from the provided entries.\n* @param comparator key comparator\n* @param sameComparator indicates if the same comparator is used\n* @param entries iterable of key-value entries\n* @return ImmutableSortedMap built from the entries\n*/",
        "com.google.common.collect.ImmutableSortedMap:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function)": "/**\n* Creates an ImmutableSortedMap collector from provided key and value functions.\n* @param comparator for sorting keys\n* @param keyFunction to extract keys from elements\n* @param valueFunction to extract values from elements\n* @return Collector for building the ImmutableSortedMap\n*/",
        "com.google.common.collect.ImmutableSortedMap:lastKey()": "/**\n* Retrieves the last key from the key set.\n* @return last key of type K from the key set\n*/",
        "com.google.common.collect.ImmutableSortedMap:headMap(java.lang.Object,boolean)": "/**\n* Retrieves a submap up to a specified key.\n* @param toKey the key up to which the map is returned\n* @param inclusive true to include the key, false to exclude it\n* @return ImmutableSortedMap of the specified range\n*/",
        "com.google.common.collect.ImmutableSortedMap:tailMap(java.lang.Object,boolean)": "/**\n* Retrieves a tail map starting from a specified key.\n* @param fromKey the key to start the tail map from\n* @param inclusive if true, includes the fromKey in the result\n* @return ImmutableSortedMap from the specified key onward\n*/",
        "com.google.common.collect.ImmutableSortedMap:copyOf(java.lang.Iterable,java.util.Comparator)": "/**\n* Creates an ImmutableSortedMap from the given entries and comparator.\n* @param entries iterable of key-value entries\n* @param comparator key comparator\n* @return ImmutableSortedMap built from the entries\n*/",
        "com.google.common.collect.ImmutableSortedMap:copyOfSorted(java.util.SortedMap)": "/**\n* Creates an ImmutableSortedMap from a SortedMap.\n* @param map source SortedMap\n* @return ImmutableSortedMap representation of the input map\n*/",
        "com.google.common.collect.ImmutableSortedMap:copyOfInternal(java.util.Map,java.util.Comparator)": "/**\n* Creates an ImmutableSortedMap from a given map with a specified key comparator.\n* @param map input map to copy from\n* @param comparator key comparator for sorting\n* @return ImmutableSortedMap built from the input map\n*/",
        "com.google.common.collect.ImmutableSortedMap:headMap(java.lang.Object)": "/**\n* Retrieves a submap excluding the specified key.\n* @param toKey the key up to which the map is returned\n* @return ImmutableSortedMap of the specified range\n*/",
        "com.google.common.collect.ImmutableSortedMap:lowerEntry(java.lang.Object)": "/**\n* Retrieves the entry less than the specified key.\n* @param key the key to compare against\n* @return Entry object or null if no such entry exists\n*/",
        "com.google.common.collect.ImmutableSortedMap:floorEntry(java.lang.Object)": "/**\n* Retrieves the floor entry for a specified key.\n* @param key the key to find the floor entry for\n* @return Entry object or null if not found\n*/",
        "com.google.common.collect.ImmutableSortedMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Retrieves a submap between specified keys.\n* @param fromKey starting key, inclusive if fromInclusive is true\n* @param toKey ending key, inclusive if toInclusive is true\n* @return ImmutableSortedMap of the specified range\n*/",
        "com.google.common.collect.ImmutableSortedMap:tailMap(java.lang.Object)": "/**\n* Retrieves an immutable tail map starting from the specified key.\n* @param fromKey the key to start the tail map from\n* @return ImmutableSortedMap from the specified key onward\n*/",
        "com.google.common.collect.ImmutableSortedMap:ceilingEntry(java.lang.Object)": "/**\n* Retrieves the ceiling entry for the given key.\n* @param key the key to find the ceiling entry for\n* @return Entry object or null if no ceiling entry exists\n*/",
        "com.google.common.collect.ImmutableSortedMap:higherEntry(java.lang.Object)": "/**\n* Retrieves the entry higher than the specified key.\n* @param key the key to find the next higher entry\n* @return Entry object or null if no higher entry exists\n*/",
        "com.google.common.collect.ImmutableSortedMap:copyOf(java.lang.Iterable)": "/**\n* Creates an ImmutableSortedMap from given entries.\n* @param entries iterable of key-value entries\n* @return ImmutableSortedMap built from the entries\n*/",
        "com.google.common.collect.ImmutableSortedMap:copyOf(java.util.Map)": "/**\n* Creates an ImmutableSortedMap from the provided map.\n* @param map input map to copy from\n* @return ImmutableSortedMap built from the input map\n*/",
        "com.google.common.collect.ImmutableSortedMap:copyOf(java.util.Map,java.util.Comparator)": "/**\n* Creates an ImmutableSortedMap from a given map with a specified key comparator.\n* @param map input map to copy from\n* @param comparator key comparator for sorting\n* @return ImmutableSortedMap built from the input map\n*/",
        "com.google.common.collect.ImmutableSortedMap:firstKey()": "/**\n* Retrieves the first key from the key set.\n* @return first key or throws NoSuchElementException if empty\n*/",
        "com.google.common.collect.ImmutableSortedMap:lowerKey(java.lang.Object)": "/**\n* Retrieves the lowest key less than the specified key.\n* @param key the key to compare against\n* @return the lower key or null if no such key exists\n*/",
        "com.google.common.collect.ImmutableSortedMap:floorKey(java.lang.Object)": "/**\n* Retrieves the largest key less than or equal to the specified key.\n* @param key the key to compare\n* @return the floor key or null if not found\n*/",
        "com.google.common.collect.ImmutableSortedMap:subMap(java.lang.Object,java.lang.Object)": "/**\n* Retrieves a submap between specified keys.\n* @param fromKey starting key, inclusive\n* @param toKey ending key, exclusive\n* @return ImmutableSortedMap of the specified range\n*/",
        "com.google.common.collect.ImmutableSortedMap:ceilingKey(java.lang.Object)": "/**\n* Retrieves the ceiling key for a given key.\n* @param key the key to find the ceiling for\n* @return the ceiling key or null if none exists\n*/",
        "com.google.common.collect.ImmutableSortedMap:higherKey(java.lang.Object)": "/**\n* Retrieves the key higher than the specified key.\n* @param key the key to find the next higher key\n* @return the higher key or null if none exists\n*/",
        "com.google.common.collect.ImmutableSortedMap:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)": "/**\n* Collects elements into an ImmutableSortedMap using provided functions and comparator.\n* @param comparator for sorting keys\n* @param keyFunction to extract keys\n* @param valueFunction to extract values\n* @param mergeFunction for resolving key collisions\n* @return Collector for building an ImmutableSortedMap\n*/"
    },
    "com.google.common.collect.RegularImmutableSortedSet": {
        "com.google.common.collect.RegularImmutableSortedSet:isPartialView()": "/**\n* Checks if the view is partial by delegating to elements.\n* @return true if the view is partial, false otherwise\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:internalArray()": "/**\n* Retrieves the internal array of elements.\n* @return array of elements or null if not initialized\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:internalArrayStart()": "/**\n* Retrieves the starting index of the internal array.\n* @return starting index of the internal array\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:internalArrayEnd()": "/**\n* Retrieves the end index of the internal array.\n* @return end index of the internal array\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:size()": "/**\n* Returns the number of elements in the collection.\n* @return the size of the collection as an integer\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:unsafeComparator()": "/**\n* Returns a comparator with unchecked type casting.\n* @return Comparator<Object> instance\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:first()": "/**\n* Retrieves the first element of the collection.\n* @return the first element of type E\n* @throws NoSuchElementException if the collection is empty\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:headIndex(java.lang.Object,boolean)": "/**\n* Finds head index of an element; returns adjusted index based on inclusivity.\n* @param toElement element to search for\n* @param inclusive true to include the element, false to exclude\n* @return adjusted index of the element\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:tailIndex(java.lang.Object,boolean)": "/**\n* Finds the tail index of an element in a sorted collection.\n* @param fromElement the element to search for\n* @param inclusive if true, includes the element in the result\n* @return the tail index of the element\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:<init>(com.google.common.collect.ImmutableList,java.util.Comparator)": "/**\n* Constructs a RegularImmutableSortedSet with given elements and comparator.\n* @param elements list of elements in the set\n* @param comparator defines the order of elements\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:copyIntoArray(java.lang.Object[],int)": "/**\n* Copies elements into the specified array starting at the given offset.\n* @param dst array to copy elements into\n* @param offset starting index in the destination array\n* @return new offset after copying elements\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:last()": "/**\n* Retrieves the last element from the collection.\n* @return last element of type E or throws NoSuchElementException if empty\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:unsafeBinarySearch(java.lang.Object)": "/**\n* Performs a binary search for a key in elements.\n* @param key the element to search for\n* @return index of the key or negative if not found\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:indexOf(java.lang.Object)": "/**\n* Finds the index of the target object in the elements array.\n* @param target object to search for; returns -1 if not found or null\n* @return index of target or -1 if not found or null\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:forEach(java.util.function.Consumer)": "/**\n* Applies the given action to each element in the collection.\n* @param action the function to apply to each element\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:lower(java.lang.Object)": "/**\n* Retrieves the largest element less than the specified element.\n* @param element the reference element to compare against\n* @return the largest element less than 'element' or null if none exists\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:floor(java.lang.Object)": "/**\n* Retrieves the largest element less than or equal to the given element.\n* @param element the reference element to compare\n* @return the floor element or null if none exists\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:ceiling(java.lang.Object)": "/**\n* Retrieves the least element greater than or equal to the specified element.\n* @param element the element to compare\n* @return the ceiling element or null if none exists\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:higher(java.lang.Object)": "/**\n* Retrieves the next higher element in the collection after the specified element.\n* @param element the element to compare against\n* @return the next higher element or null if none exists\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:createAsList()": "/**\n* Creates an ImmutableList from the current elements.\n* @return ImmutableList of elements or the original if size is 1 or less\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:contains(java.lang.Object)": "/**\n* Checks if the collection contains the specified element.\n* @param o element to check for; returns false if null or not found\n* @return true if the element is present, false otherwise\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:iterator()": "/**\n* Returns an unmodifiable iterator for the collection elements.\n* @return UnmodifiableIterator for the collection\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:spliterator()": "/**\n* Creates a spliterator for this collection's elements.\n* @return Spliterator for indexed elements of the collection\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:descendingIterator()": "/**\n* Returns an unmodifiable iterator for the elements in descending order.\n* @return UnmodifiableIterator for reversed elements\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:createDescendingSet()": "/**\n* Creates a descending sorted set of elements.\n* @return ImmutableSortedSet in descending order or empty set if no elements\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:containsAll(java.util.Collection)": "/**\n* Checks if the collection contains all elements from targets.\n* @param targets collection of elements to check\n* @return true if all elements are present, false otherwise\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:getSubSet(int,int)": "/**\n* Returns a subset of the sorted set based on the given indices.\n* @param newFromIndex starting index, @param newToIndex ending index\n* @return RegularImmutableSortedSet of the specified range or empty set\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:equals(java.lang.Object)": "/**\n* Compares this set to another for equality.\n* @param object the object to compare with this set\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:headSetImpl(java.lang.Object,boolean)": "/**\n* Returns a view of the set containing elements before a specified element.\n* @param toElement the element to limit the view\n* @param inclusive true to include the element, false to exclude\n* @return ImmutableSortedSet of elements before the specified element\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:tailSetImpl(java.lang.Object,boolean)": "/**\n* Returns a view of the sorted set from a specified element.\n* @param fromElement the element to start from\n* @param inclusive if true, includes the fromElement\n* @return ImmutableSortedSet from the specified element\n*/",
        "com.google.common.collect.RegularImmutableSortedSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a subset of the sorted set between two elements.\n* @param fromElement starting element, inclusive or exclusive based on fromInclusive\n* @param toElement ending element, inclusive or exclusive based on toInclusive\n* @return ImmutableSortedSet of elements within the specified range\n*/"
    },
    "com.google.common.collect.ImmutableSortedMultiset$SerializedForm": {
        "com.google.common.collect.ImmutableSortedMultiset$SerializedForm:<init>(com.google.common.collect.SortedMultiset)": "/**\n* Initializes SerializedForm from a SortedMultiset.\n* @param multiset source multiset to serialize elements and counts\n*/",
        "com.google.common.collect.ImmutableSortedMultiset$SerializedForm:readResolve()": "/**\n* Restores object state by rebuilding from stored elements and counts.\n* @return rebuilt object instance\n*/"
    },
    "com.google.common.collect.ImmutableSortedSet$Builder": {
        "com.google.common.collect.ImmutableSortedSet$Builder:copy()": "/**\n* Creates a copy of the current elements array.\n*/",
        "com.google.common.collect.ImmutableSortedSet$Builder:sortAndDedup()": "/**\n* Sorts and deduplicates the elements array in-place.\n* @throws AssertionError if comparator violates its contract\n*/",
        "com.google.common.collect.ImmutableSortedSet$Builder:add(java.lang.Object)": "/**** Adds an element to the builder, expanding capacity if necessary. \n* @param element the element to add \n* @return the builder instance for chaining \n*/",
        "com.google.common.collect.ImmutableSortedSet$Builder:<init>(java.util.Comparator)": "/**\n* Initializes Builder with a specified comparator and default capacity.\n* @param comparator comparison logic for elements\n*/",
        "com.google.common.collect.ImmutableSortedSet$Builder:addAll(java.lang.Iterable)": "/**** Adds all elements from the iterable to the builder. \n* @param elements iterable of elements to add \n* @return this builder instance for chaining \n*/",
        "com.google.common.collect.ImmutableSortedSet$Builder:addAll(java.util.Iterator)": "/**\n* Adds all elements from the iterator to the builder.\n* @param elements iterator of elements to add\n* @return this Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableSortedSet$Builder:combine(com.google.common.collect.ImmutableSet$Builder)": "/**\n* Combines elements from another builder into this builder.\n* @param builder the builder to combine elements from\n* @return this builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableSortedSet$Builder:build()": "/**\n* Builds an ImmutableSortedSet from sorted elements.\n* @return ImmutableSortedSet or empty set if no elements exist\n*/"
    },
    "com.google.common.collect.ImmutableSortedSet$SerializedForm": {
        "com.google.common.collect.ImmutableSortedSet$SerializedForm:<init>(java.util.Comparator,java.lang.Object[])": "/**\n* Initializes SerializedForm with a comparator and elements array.\n* @param comparator comparison logic for elements\n* @param elements array of elements to be serialized\n*/",
        "com.google.common.collect.ImmutableSortedSet$SerializedForm:readResolve()": "/**\n* Resolves the object state during deserialization.\n* @return Builder object with elements added and built as ImmutableSortedSet\n*/"
    },
    "com.google.common.collect.ImmutableTable$Builder": {
        "com.google.common.collect.ImmutableTable$Builder:combine(com.google.common.collect.ImmutableTable$Builder)": "/**\n* Combines cells from another Builder.\n* @param other Builder to combine with\n* @return this Builder instance\n*/",
        "com.google.common.collect.ImmutableTable$Builder:orderRowsBy(java.util.Comparator)": "/**\n* Sets the row order comparator for the builder.\n* @param rowComparator comparator for row ordering\n* @return the updated Builder instance\n*/",
        "com.google.common.collect.ImmutableTable$Builder:orderColumnsBy(java.util.Comparator)": "/**\n* Sets the column order comparator and returns the builder.\n* @param columnComparator comparator for ordering columns\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableTable$Builder:<init>()": "/**\n* Constructs a new Builder instance.\n*/",
        "com.google.common.collect.ImmutableTable$Builder:put(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Adds a cell with specified keys and value to the builder.\n* @param rowKey key for the row\n* @param columnKey key for the column\n* @param value cell value\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableTable$Builder:put(com.google.common.collect.Table$Cell)": "/**\n* Adds a cell to the builder after validating its keys and value.\n* @param cell the cell to add\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableTable$Builder:putAll(com.google.common.collect.Table)": "/**\n* Adds all cells from the specified table to the builder.\n* @param table the table containing cells to add\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableTable$Builder:buildOrThrow()": "/**\n* Builds an ImmutableTable based on cell size.\n* @return ImmutableTable instance, empty or populated based on cells\n*/",
        "com.google.common.collect.ImmutableTable$Builder:build()": "/**\n* Builds and returns an ImmutableTable instance.\n* @return ImmutableTable created by buildOrThrow()\n*/"
    },
    "com.google.common.collect.ImmutableTable": {
        "com.google.common.collect.ImmutableTable:of()": "/**\n* Returns an empty ImmutableTable instance.\n* @return an empty ImmutableTable of generic types R, C, and V\n*/",
        "com.google.common.collect.ImmutableTable:<init>()": "/**\n* Constructs an instance of ImmutableTable.\n*/",
        "com.google.common.collect.ImmutableTable:cellIterator()": "/**\n* Throws an AssertionError indicating this method should not be invoked.\n*/",
        "com.google.common.collect.ImmutableTable:cellSpliterator()": "/**\n* Throws an AssertionError indicating this method should not be invoked.\n*/",
        "com.google.common.collect.ImmutableTable:valuesIterator()": "/**\n* Throws an AssertionError indicating this method should not be called.\n*/",
        "com.google.common.collect.ImmutableTable:clear()": "/**\n* Clears the collection, but always throws UnsupportedOperationException.\n*/",
        "com.google.common.collect.ImmutableTable:put(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Unsupported operation for putting values; always throws UnsupportedOperationException.\n* @param rowKey the key for the row\n* @param columnKey the key for the column\n* @param value the value to be put\n* @return always throws exception, never returns a value\n*/",
        "com.google.common.collect.ImmutableTable:putAll(com.google.common.collect.Table)": "/**\n* Deprecated method that always throws UnsupportedOperationException.\n* @param table the table to be added, which is not supported\n*/",
        "com.google.common.collect.ImmutableTable:remove(java.lang.Object,java.lang.Object)": "/**\n* Always throws UnsupportedOperationException when attempting to remove an entry.\n* @param rowKey the key for the row to remove\n* @param columnKey the key for the column to remove\n*/",
        "com.google.common.collect.ImmutableTable:writeReplace()": "/**\n* Provides a replacement object for serialization.\n* @return replacement Object for serialization process\n*/",
        "com.google.common.collect.ImmutableTable:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; throws exception to enforce SerializedForm usage.\n* @param stream the input stream for object deserialization\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.collect.ImmutableTable:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if the collection has no elements, false otherwise\n*/",
        "com.google.common.collect.ImmutableTable:toString()": "/**\n* Returns string representation of the object using rowMap.\n* @return string representation of the rowMap object\n*/",
        "com.google.common.collect.ImmutableTable:columnKeySet()": "/**\n* Retrieves the set of column keys.\n* @return ImmutableSet of column keys from the column map\n*/",
        "com.google.common.collect.ImmutableTable:column(java.lang.Object)": "/**\n* Retrieves an immutable map for the specified column key.\n* @param columnKey the key of the column to retrieve\n* @return ImmutableMap associated with the column or an empty map if not found\n*/",
        "com.google.common.collect.ImmutableTable:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)": "/**\n* Collects elements into an ImmutableTable using specified functions.\n* @param rowFunction transforms input to row key\n* @param columnFunction transforms input to column key\n* @param valueFunction transforms input to value\n* @param mergeFunction merges duplicate values\n* @return an ImmutableTable constructed from the input elements\n*/",
        "com.google.common.collect.ImmutableTable:cellSet()": "/**\n* Returns an immutable set of cells from the superclass.\n* @return ImmutableSet of Cell objects\n*/",
        "com.google.common.collect.ImmutableTable:values()": "/**\n* Returns an immutable collection of values.\n* @return ImmutableCollection of values from the superclass\n*/",
        "com.google.common.collect.ImmutableTable:equals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param obj the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ImmutableTable:builder()": "/**\n* Creates a new Builder instance.\n* @return a new Builder object for constructing R, C, V types\n*/",
        "com.google.common.collect.ImmutableTable:of(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableTable with a single row and column.\n* @param rowKey the key for the row\n* @param columnKey the key for the column\n* @param value the value at the specified row and column\n* @return an ImmutableTable instance\n*/",
        "com.google.common.collect.ImmutableTable:get(java.lang.Object,java.lang.Object)": "/**\n* Retrieves a value from a specified row and column in a map.\n* @param rowKey the key for the row; may be null\n* @param columnKey the key for the column; may be null\n* @return the value at the specified row and column, or null if not found\n*/",
        "com.google.common.collect.ImmutableTable:containsRow(java.lang.Object)": "/**\n* Checks if a row exists by its key.\n* @param rowKey the key of the row to check\n* @return true if the row exists, false otherwise\n*/",
        "com.google.common.collect.ImmutableTable:containsColumn(java.lang.Object)": "/**\n* Checks if the column map contains the specified column key.\n* @param columnKey the key of the column to check\n* @return true if the column exists, false otherwise\n*/",
        "com.google.common.collect.ImmutableTable:hashCode()": "/**\n* Computes hash code for the object based on its cell set.\n* @return hash code integer derived from the cell set\n*/",
        "com.google.common.collect.ImmutableTable:containsValue(java.lang.Object)": "/**\n* Checks if the collection contains the specified value.\n* @param value the object to check for presence\n* @return true if value is found, false otherwise\n*/",
        "com.google.common.collect.ImmutableTable:cellOf(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Creates a Cell instance with specified row, column, and value.\n* @param rowKey key for the row\n* @param columnKey key for the column\n* @param value cell value\n* @return Cell<R, C, V> instance\n*/",
        "com.google.common.collect.ImmutableTable:contains(java.lang.Object,java.lang.Object)": "/**\n* Checks if a value exists at the specified row and column keys.\n* @param rowKey the key for the row; may be null\n* @param columnKey the key for the column; may be null\n* @return true if value exists, false otherwise\n*/",
        "com.google.common.collect.ImmutableTable:rowMap()": "/**\n* Returns an ImmutableMap of rows with column-value pairs.\n* @return ImmutableMap mapping row identifiers to column-value maps\n*/",
        "com.google.common.collect.ImmutableTable:createValues()": "/**\n* Creates an ImmutableCollection of values.\n* @return ImmutableCollection containing specified values\n*/",
        "com.google.common.collect.ImmutableTable:row(java.lang.Object)": "/**\n* Retrieves row data by key, returning an empty map if not found.\n* @param rowKey the key to lookup the row\n* @return ImmutableMap of column-value pairs for the specified row\n*/",
        "com.google.common.collect.ImmutableTable:rowKeySet()": "/**\n* Retrieves the set of row keys from the row map.\n* @return ImmutableSet of row keys\n*/",
        "com.google.common.collect.ImmutableTable:copyOf(java.lang.Iterable)": "/**\n* Creates an ImmutableTable from provided cells.\n* @param cells iterable collection of Cell objects\n* @return ImmutableTable constructed from the cells\n*/",
        "com.google.common.collect.ImmutableTable:copyOf(com.google.common.collect.Table)": "/**\n* Creates an ImmutableTable from a given Table.\n* @param table input Table to convert\n* @return ImmutableTable representation of the input Table\n*/",
        "com.google.common.collect.ImmutableTable:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function)": "/**\n* Collects elements into an ImmutableTable using specified row, column, and value functions.\n* @param rowFunction extracts row keys, columnFunction extracts column keys, valueFunction extracts values\n* @return Collector for creating an ImmutableTable\n*/"
    },
    "com.google.common.collect.ImmutableTable$SerializedForm": {
        "com.google.common.collect.ImmutableTable$SerializedForm:<init>(java.lang.Object[],java.lang.Object[],java.lang.Object[],int[],int[])": "/**\n* Constructs a SerializedForm with specified keys and values.\n* @param rowKeys array of row keys\n* @param columnKeys array of column keys\n* @param cellValues array of cell values\n* @param cellRowIndices array of row indices for cell values\n* @param cellColumnIndices array of column indices for cell values\n*/",
        "com.google.common.collect.ImmutableTable$SerializedForm:create(com.google.common.collect.ImmutableTable,int[],int[])": "/**\n* Creates SerializedForm from an ImmutableTable and cell indices.\n* @param table the ImmutableTable to serialize\n* @param cellRowIndices indices for row cells\n* @param cellColumnIndices indices for column cells\n* @return SerializedForm object\n*/",
        "com.google.common.collect.ImmutableTable$SerializedForm:readResolve()": "/**\n* Resolves the state of the object, reconstructing it from cell values.\n* @return RegularImmutableTable instance or empty if no values\n*/"
    },
    "com.google.common.collect.IndexedImmutableSet$1": {
        "com.google.common.collect.IndexedImmutableSet$1:get(int)": "/**\n* Retrieves the element at the specified index.\n* @param index position of the element to retrieve\n* @return the element at the given index\n*/"
    },
    "com.google.common.collect.IndexedImmutableSet": {
        "com.google.common.collect.IndexedImmutableSet:createAsList()": "/**\n* Creates an immutable list view of the IndexedImmutableSet.\n* @return ImmutableList representation of the set\n*/",
        "com.google.common.collect.IndexedImmutableSet:forEach(java.util.function.Consumer)": "/**\n* Applies the given consumer to each element in the collection.\n* @param consumer the action to be performed on each element\n*/",
        "com.google.common.collect.IndexedImmutableSet:copyIntoArray(java.lang.Object[],int)": "/**\n* Copies elements into the specified array starting at the given offset.\n* @param dst array to copy elements into\n* @param offset starting index in the destination array\n* @return new offset after copying elements\n*/",
        "com.google.common.collect.IndexedImmutableSet:spliterator()": "/**\n* Creates a Spliterator for the collection elements.\n* @return Spliterator for indexed elements of the collection\n*/",
        "com.google.common.collect.IndexedImmutableSet:iterator()": "/**\n* Returns an unmodifiable iterator for the collection elements.\n* @return UnmodifiableIterator for the collection\n*/"
    },
    "com.google.common.collect.MapMaker": {
        "com.google.common.collect.MapMaker:<init>()": "/**\n* Constructs a new MapMaker instance.\n*/",
        "com.google.common.collect.MapMaker:getInitialCapacity()": "/**\n* Returns the initial capacity, using default if unset.\n* @return initial capacity value\n*/",
        "com.google.common.collect.MapMaker:getConcurrencyLevel()": "/**\n* Returns the current concurrency level or default if unset.\n* @return current concurrency level or DEFAULT_CONCURRENCY_LEVEL if unset\n*/",
        "com.google.common.collect.MapMaker:getKeyStrength()": "/**\n* Retrieves the key strength, defaulting to STRONG if null.\n* @return Strength representing the key's strength\n*/",
        "com.google.common.collect.MapMaker:getValueStrength()": "/**\n* Retrieves the value strength or defaults to STRONG if null.\n* @return Strength valueStrength or STRONG if null\n*/",
        "com.google.common.collect.MapMaker:initialCapacity(int)": "/**\n* Sets the initial capacity; validates if not already set.\n* @param initialCapacity non-negative initial capacity value\n* @return MapMaker instance for method chaining\n*/",
        "com.google.common.collect.MapMaker:concurrencyLevel(int)": "/**\n* Sets the concurrency level if not already set.\n* @param concurrencyLevel positive integer for concurrency setting\n* @return current MapMaker instance\n*/",
        "com.google.common.collect.MapMaker:keyEquivalence(com.google.common.base.Equivalence)": "/**\n* Sets key equivalence for the MapMaker.\n* @param equivalence the equivalence to set\n* @return the updated MapMaker instance\n*/",
        "com.google.common.collect.MapMaker:setKeyStrength(com.google.common.collect.MapMakerInternalMap$Strength)": "/**\n* Sets the key strength for the map; returns the updated MapMaker instance.\n* @param strength the desired key strength\n* @return this MapMaker instance\n*/",
        "com.google.common.collect.MapMaker:setValueStrength(com.google.common.collect.MapMakerInternalMap$Strength)": "/**\n* Sets the value strength and returns the MapMaker instance.\n* @param strength the desired value strength to set\n* @return this MapMaker instance for chaining\n*/",
        "com.google.common.collect.MapMaker:getKeyEquivalence()": "/**\n* Retrieves key equivalence, defaulting to strength's equivalence if null.\n* @return Equivalence object for key comparison\n*/",
        "com.google.common.collect.MapMaker:weakKeys()": "/**\n* Configures the map to use weak keys.\n* @return updated MapMaker instance with weak key strength\n*/",
        "com.google.common.collect.MapMaker:weakValues()": "/**\n* Configures the MapMaker to use weak values.\n* @return MapMaker instance for further configuration\n*/",
        "com.google.common.collect.MapMaker:toString()": "/**\n* Returns a string representation of the object with relevant fields included.\n* @return formatted string of object's state\n*/",
        "com.google.common.collect.MapMaker:makeMap()": "/**\n* Creates a ConcurrentMap based on configuration settings.\n* @return ConcurrentMap instance\n*/"
    },
    "com.google.common.collect.Interners$InternerFunction": {
        "com.google.common.collect.Interners$InternerFunction:<init>(com.google.common.collect.Interner)": "/**\n* Initializes the InternerFunction with a given interner.\n* @param interner instance of Interner to be used\n*/",
        "com.google.common.collect.Interners$InternerFunction:apply(java.lang.Object)": "/**\n* Interns the given input object for memory efficiency.\n* @param input the object to intern\n* @return the interned object\n*/",
        "com.google.common.collect.Interners$InternerFunction:hashCode()": "/**\n* Returns the hash code of the interner object.\n* @return hash code as an integer\n*/",
        "com.google.common.collect.Interners$InternerFunction:equals(java.lang.Object)": "/**\n* Compares this InternerFunction to another object for equality.\n* @param other object to compare\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.collect.Interners": {
        "com.google.common.collect.Interners:<init>()": "/**\n* Private constructor to prevent instantiation of the Interners class.\n*/",
        "com.google.common.collect.Interners:newBuilder()": "/**\n* Creates a new instance of InternerBuilder.\n* @return a new InternerBuilder object\n*/",
        "com.google.common.collect.Interners:asFunction(com.google.common.collect.Interner)": "/**\n* Converts an Interner to a Function.\n* @param interner instance of Interner to be converted\n* @return Function that uses the provided interner\n*/",
        "com.google.common.collect.Interners:newStrongInterner()": "/**\n* Creates a strong interner instance.\n* @return Interner<E> configured for strong interning\n*/",
        "com.google.common.collect.Interners:newWeakInterner()": "/**\n* Creates a weak Interner instance.\n* @return Interner<E> configured for weak interning\n*/"
    },
    "com.google.common.collect.Interners$InternerBuilder": {
        "com.google.common.collect.Interners$InternerBuilder:strong()": "/**\n* Sets the builder to use strong interning.\n* @return this InternerBuilder instance for chaining\n*/",
        "com.google.common.collect.Interners$InternerBuilder:weak()": "/**\n* Configures the builder for weak interning.\n* @return the current InternerBuilder instance\n*/",
        "com.google.common.collect.Interners$InternerBuilder:<init>()": "/**\n* Constructs a new InternerBuilder instance.\n*/",
        "com.google.common.collect.Interners$InternerBuilder:concurrencyLevel(int)": "/**\n* Sets the concurrency level for the builder.\n* @param concurrencyLevel positive integer for concurrency setting\n* @return current InternerBuilder instance\n*/",
        "com.google.common.collect.Interners$InternerBuilder:build()": "/**\n* Builds an Interner instance based on key strength.\n* @return Interner<E> instance configured with mapMaker\n*/"
    },
    "com.google.common.collect.Iterables$UnmodifiableIterable": {
        "com.google.common.collect.Iterables$UnmodifiableIterable:forEach(java.util.function.Consumer)": "/**\n* Applies the given action to each element in the iterable.\n* @param action a Consumer to process each element\n*/",
        "com.google.common.collect.Iterables$UnmodifiableIterable:spliterator()": "/**\n* Returns a Spliterator for the underlying iterable.\n* @return Spliterator of type T from the iterable\n*/",
        "com.google.common.collect.Iterables$UnmodifiableIterable:toString()": "/**\n* Returns a string representation of the iterable object.\n* @return string representation of the iterable\n*/",
        "com.google.common.collect.Iterables$UnmodifiableIterable:iterator()": "/**\n* Returns an unmodifiable iterator for the iterable collection.\n* @return an unmodifiable Iterator of type T\n*/",
        "com.google.common.collect.Iterables$UnmodifiableIterable:<init>(java.lang.Iterable)": "/**\n* Initializes UnmodifiableIterable with a given iterable.\n* @param iterable source collection of elements\n*/"
    },
    "com.google.common.collect.Iterables": {
        "com.google.common.collect.Iterables:<init>()": "/**\n* Private constructor to prevent instantiation of the Iterables class.\n*/",
        "com.google.common.collect.Iterables:getLastInNonemptyList(java.util.List)": "/**\n* Returns the last element of a non-empty list.\n* @param list a non-empty list of elements\n* @return the last element of the list\n*/",
        "com.google.common.collect.Iterables:isEmpty(java.lang.Iterable)": "/**\n* Checks if the given iterable is empty.\n* @param iterable the iterable to check\n* @return true if empty, false otherwise\n*/",
        "com.google.common.collect.Iterables:mergeSorted(java.lang.Iterable,java.util.Comparator)": "/**\n* Merges sorted iterables using a comparator.\n* @param iterables sorted input iterables\n* @param comparator comparator for sorting\n* @return merged iterable of type T\n*/",
        "com.google.common.collect.Iterables:unmodifiableIterable(java.lang.Iterable)": "/**\n* Returns an unmodifiable view of the given iterable.\n* @param iterable the iterable to wrap\n* @return unmodifiable Iterable instance\n*/",
        "com.google.common.collect.Iterables:unmodifiableIterable(com.google.common.collect.ImmutableCollection)": "/**\n* Returns an unmodifiable iterable from the given collection.\n* @param iterable collection to be checked and returned\n* @return non-null iterable\n*/",
        "com.google.common.collect.Iterables:removeFirstMatching(java.lang.Iterable,com.google.common.base.Predicate)": "/**\n* Removes and returns the first matching element from the iterable.\n* @param removeFrom iterable to remove from, @param predicate condition to match\n* @return matched element or null if none found\n*/",
        "com.google.common.collect.Iterables:cycle(java.lang.Iterable)": "/**\n* Returns an iterable that cycles through the provided iterable.\n* @param iterable input collection to cycle through\n* @return an iterable that repeats elements of the input\n*/",
        "com.google.common.collect.Iterables:filter(java.lang.Iterable,com.google.common.base.Predicate)": "/**\n* Filters elements from unfiltered based on retainIfTrue predicate.\n* @param unfiltered collection to filter from\n* @param retainIfTrue condition to retain elements\n* @return Iterable of filtered elements\n*/",
        "com.google.common.collect.Iterables:transform(java.lang.Iterable,com.google.common.base.Function)": "/**\n* Transforms elements of an Iterable using a provided function.\n* @param fromIterable source elements to transform\n* @param function function to apply to each element\n* @return Iterable of transformed elements\n*/",
        "com.google.common.collect.Iterables:consumingIterable(java.lang.Iterable)": "/**\n* Returns an iterable that consumes elements from the provided iterable.\n* @param iterable the source iterable to consume elements from\n* @return an iterable that consumes elements when iterated\n*/",
        "com.google.common.collect.Iterables:partition(java.lang.Iterable,int)": "/**\n* Partitions an iterable into lists of specified size.\n* @param iterable input collection to partition\n* @param size size of each partitioned list\n* @return iterable of partitioned lists\n*/",
        "com.google.common.collect.Iterables:paddedPartition(java.lang.Iterable,int)": "/**\n* Creates padded partitions of the given iterable.\n* @param iterable input collection to partition\n* @param size size of each partition\n* @return Iterable of padded lists\n*/",
        "com.google.common.collect.Iterables:skip(java.lang.Iterable,int)": "/**\n* Skips the first 'numberToSkip' elements of the given iterable.\n* @param iterable the source iterable\n* @param numberToSkip non-negative number of elements to skip\n* @return an iterable starting after the skipped elements\n*/",
        "com.google.common.collect.Iterables:limit(java.lang.Iterable,int)": "/**\n* Limits the size of an iterable to a specified limit.\n* @param iterable the source iterable\n* @param limitSize maximum number of elements to return\n* @return an iterable containing up to limitSize elements\n*/",
        "com.google.common.collect.Iterables:getFirst(java.lang.Iterable,java.lang.Object)": "/**\n* Retrieves the first element from an iterable or a default value if empty.\n* @param iterable source of elements to fetch from\n* @param defaultValue value returned if iterable is empty\n* @return first element or defaultValue if iterable is empty\n*/",
        "com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable)": "/**\n* Concatenates two iterables into a single Iterable.\n* @param a first iterable to concatenate\n* @param b second iterable to concatenate\n* @return Iterable containing elements from both iterables\n*/",
        "com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)": "/**\n* Concatenates three iterables into one.\n* @param a first iterable, @param b second iterable, @param c third iterable\n* @return combined Iterable of type T\n*/",
        "com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)": "/**\n* Concatenates four iterables into a single Iterable.\n* @param a first iterable, b second iterable, c third iterable, d fourth iterable\n* @return concatenated Iterable of type T\n*/",
        "com.google.common.collect.Iterables:toString(java.lang.Iterable)": "/**\n* Converts an Iterable to its string representation.\n* @param iterable the Iterable to convert\n* @return string representation of the Iterable's elements\n*/",
        "com.google.common.collect.Iterables:getOnlyElement(java.lang.Iterable)": "/**\n* Retrieves the sole element from an iterable.\n* @param iterable input collection of type T\n* @return single element of type T or null if empty\n*/",
        "com.google.common.collect.Iterables:getLast(java.lang.Iterable)": "/**\n* Retrieves the last element from an Iterable or throws if empty.\n* @param iterable collection to retrieve the last element from\n* @return last element of type T or throws NoSuchElementException if empty\n*/",
        "com.google.common.collect.Iterables:indexOf(java.lang.Iterable,com.google.common.base.Predicate)": "/**\n* Finds the index of the first element matching the predicate.\n* @param iterable source collection to search\n* @param predicate condition to match\n* @return index of the matching element or -1 if none found\n*/",
        "com.google.common.collect.Iterables:contains(java.lang.Iterable,java.lang.Object)": "/**\n* Checks if the iterable contains the specified element.\n* @param iterable the collection to search\n* @param element the element to find, can be null\n* @return true if found, otherwise false\n*/",
        "com.google.common.collect.Iterables:filter(java.lang.Iterable,java.lang.Class)": "/**\n* Filters elements by desired type from the unfiltered collection.\n* @param unfiltered collection to filter from\n* @param desiredType class type to filter by\n* @return Iterable of elements matching the desired type\n*/",
        "com.google.common.collect.Iterables:removeAll(java.lang.Iterable,java.util.Collection)": "/**\n* Removes specified elements from a collection or iterable.\n* @param removeFrom collection or iterable to modify\n* @param elementsToRemove elements to be removed\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.Iterables:removeIf(java.lang.Iterable,com.google.common.base.Predicate)": "/**\n* Removes elements from the iterable that match the predicate.\n* @param removeFrom iterable to modify\n* @param predicate condition for removal\n* @return true if any element was removed, false otherwise\n*/",
        "com.google.common.collect.Iterables:retainAll(java.lang.Iterable,java.util.Collection)": "/**\n* Retains specified elements in a collection or iterable.\n* @param removeFrom collection to modify\n* @param elementsToRetain elements to keep\n* @return true if the collection was modified\n*/",
        "com.google.common.collect.Iterables:addAll(java.util.Collection,java.lang.Iterable)": "/**\n* Adds elements from an iterable to a collection.\n* @param addTo collection to add elements to\n* @param elementsToAdd source of elements to add\n* @return true if the collection was modified\n*/",
        "com.google.common.collect.Iterables:all(java.lang.Iterable,com.google.common.base.Predicate)": "/**\n* Checks if all elements in an iterable match a given predicate.\n* @param iterable the elements to check\n* @param predicate the condition to apply\n* @return true if all match, false otherwise\n*/",
        "com.google.common.collect.Iterables:find(java.lang.Iterable,com.google.common.base.Predicate)": "/**\n* Finds an element in the iterable matching the predicate.\n* @param iterable collection to search through\n* @param predicate condition to match\n* @return matching element or null if not found\n*/",
        "com.google.common.collect.Iterables:find(java.lang.Iterable,com.google.common.base.Predicate,java.lang.Object)": "/**\n* Finds an element matching a predicate or returns a default value.\n* @param iterable the collection to search in\n* @param predicate the condition to match elements\n* @param defaultValue the value returned if no match is found\n* @return matched element or defaultValue if none found\n*/",
        "com.google.common.collect.Iterables:elementsEqual(java.lang.Iterable,java.lang.Iterable)": "/**\n* Checks if two Iterables are element-wise equal.\n* @param iterable1 first Iterable to compare\n* @param iterable2 second Iterable to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Iterables:get(java.lang.Iterable,int,java.lang.Object)": "/**\n* Retrieves element at specified position or default if out of bounds.\n* @param iterable source collection\n* @param position index of the element to retrieve\n* @param defaultValue value returned if position is invalid\n* @return element at position or defaultValue if invalid\n*/",
        "com.google.common.collect.Iterables:size(java.lang.Iterable)": "/**\n* Returns the number of elements in the given iterable.\n* @param iterable the collection to count elements from\n* @return the number of elements as an int\n*/",
        "com.google.common.collect.Iterables:frequency(java.lang.Iterable,java.lang.Object)": "/**\n* Counts occurrences of an element in an iterable collection.\n* @param iterable collection to search in\n* @param element the element to count, can be null\n* @return the frequency of the element in the iterable\n*/",
        "com.google.common.collect.Iterables:getOnlyElement(java.lang.Iterable,java.lang.Object)": "/**\n* Retrieves the sole element from an iterable or returns a default value.\n* @param iterable input iterable of type T\n* @param defaultValue value to return if iterable is empty\n* @return single element of type T or defaultValue if empty\n*/",
        "com.google.common.collect.Iterables:getLast(java.lang.Iterable,java.lang.Object)": "/**\n* Retrieves the last element from an iterable or returns a default value if empty.\n* @param iterable source of elements\n* @param defaultValue value returned if iterable is empty\n* @return last element of type T or defaultValue\n*/",
        "com.google.common.collect.Iterables:any(java.lang.Iterable,com.google.common.base.Predicate)": "/**\n* Checks if any element in the iterable matches the given predicate.\n* @param iterable source elements to evaluate\n* @param predicate condition to match against elements\n* @return true if any element matches, false otherwise\n*/",
        "com.google.common.collect.Iterables:castOrCopyToCollection(java.lang.Iterable)": "/**\n* Casts or copies an Iterable to a Collection.\n* @param iterable source of elements to convert\n* @return Collection of elements or a new ArrayList\n*/",
        "com.google.common.collect.Iterables:get(java.lang.Iterable,int)": "/**\n* Retrieves the element at the specified position from an iterable.\n* @param iterable the source iterable\n* @param position the index of the desired element\n* @return the element at the given position\n*/",
        "com.google.common.collect.Iterables:tryFind(java.lang.Iterable,com.google.common.base.Predicate)": "/**\n* Finds an element in an iterable matching the predicate.\n* @param iterable collection to search through\n* @param predicate condition to match elements\n* @return Optional containing the found element or empty if none matches\n*/",
        "com.google.common.collect.Iterables:toArray(java.lang.Iterable,java.lang.Object[])": "/**\n* Converts an Iterable to an array using the provided array as a template.\n* @param iterable source of elements to convert\n* @param array array to hold the converted elements\n* @return an array containing the elements of the Iterable\n*/",
        "com.google.common.collect.Iterables:toArray(java.lang.Iterable)": "/**\n* Converts an Iterable to an array.\n* @param iterable source of elements to convert\n* @return Object array of elements\n*/",
        "com.google.common.collect.Iterables:toArray(java.lang.Iterable,java.lang.Class)": "/**\n* Converts an Iterable to an array of specified type.\n* @param iterable source of elements to convert\n* @param type class type of the array elements\n* @return array containing the elements of the Iterable\n*/",
        "com.google.common.collect.Iterables:concat(java.lang.Iterable)": "/**\n* Concatenates multiple Iterables into a single Iterable.\n* @param inputs variable number of Iterable inputs\n* @return Iterable containing concatenated elements\n*/"
    },
    "com.google.common.collect.ObjectArrays": {
        "com.google.common.collect.ObjectArrays:newArray(java.lang.Class,int)": "/**\n* Creates a new array of the specified type and length.\n* @param type class type of the array elements\n* @param length desired length of the array\n* @return newly created array of the specified type\n*/",
        "com.google.common.collect.ObjectArrays:<init>()": "/**\n* Private constructor for ObjectArrays class to prevent instantiation.\n*/",
        "com.google.common.collect.ObjectArrays:concat(java.lang.Object[],java.lang.Object)": "/**\n* Concatenates an element to the end of an array.\n* @param array the original array\n* @param element the element to append\n* @return a new array with the element added\n*/",
        "com.google.common.collect.ObjectArrays:fillArray(java.lang.Iterable,java.lang.Object[])": "/**\n* Fills the provided array with elements from the iterable.\n* @param elements iterable source of elements\n* @param array array to fill with elements\n* @return the filled array\n*/",
        "com.google.common.collect.ObjectArrays:checkElementNotNull(java.lang.Object,int)": "/**\n* Checks if the element is not null; throws NullPointerException if it is.\n* @param element the object to check\n* @param index the index of the element for error reporting\n* @return the non-null element\n*/",
        "com.google.common.collect.ObjectArrays:concat(java.lang.Object[],java.lang.Object[],java.lang.Class)": "/**\n* Concatenates two arrays of the same type.\n* @param first the first array\n* @param second the second array\n* @param type the class type of the array elements\n* @return a new array containing elements of both arrays\n*/",
        "com.google.common.collect.ObjectArrays:newArray(java.lang.Object[],int)": "/**\n* Creates a new array of specified length from a reference array.\n* @param reference source array for type inference\n* @param length desired length of the new array\n* @return a new array of the specified length\n*/",
        "com.google.common.collect.ObjectArrays:toArrayImpl(java.util.Collection)": "/**\n* Converts a collection to an array.\n* @param c the collection to convert\n* @return an array containing the collection elements\n*/",
        "com.google.common.collect.ObjectArrays:checkElementsNotNull(java.lang.Object[],int)": "/**\n* Validates that all elements in the array are non-null.\n* @param array the array to check\n* @param length the number of elements to validate\n* @return the original array if all elements are non-null\n*/",
        "com.google.common.collect.ObjectArrays:concat(java.lang.Object,java.lang.Object[])": "/**\n* Concatenates an element to the beginning of an array.\n* @param element the element to add; @return new array with the element added\n*/",
        "com.google.common.collect.ObjectArrays:toArrayImpl(java.util.Collection,java.lang.Object[])": "/**\n* Converts a collection to an array, resizing if necessary.\n* @param c collection to convert\n* @param array target array for elements\n* @return the filled array\n*/",
        "com.google.common.collect.ObjectArrays:toArrayImpl(java.lang.Object[],int,int,java.lang.Object[])": "/**\n* Copies a subarray from src to dst, resizing dst if necessary.\n* @param src source array, @param offset start index, @param len length to copy, @param dst destination array\n* @return the destination array\n*/",
        "com.google.common.collect.ObjectArrays:copyAsObjectArray(java.lang.Object[],int,int)": "/**\n* Copies a subarray of objects into a new array.\n* @param elements source array, @param offset starting index, @param length number of elements to copy\n* @return new Object array containing the copied elements\n*/"
    },
    "com.google.common.collect.Iterators$ConcatenatedIterator": {
        "com.google.common.collect.Iterators$ConcatenatedIterator:getTopMetaIterator()": "/**\n* Retrieves the next available top meta iterator.\n* @return an Iterator of Iterators or null if none are available\n*/",
        "com.google.common.collect.Iterators$ConcatenatedIterator:remove()": "/**\n* Removes the last element returned by next().\n* @throws IllegalStateException if next() was not called\n*/",
        "com.google.common.collect.Iterators$ConcatenatedIterator:hasNext()": "/**\n* Checks if the iterator has more elements, updating iterators as needed.\n* @return true if more elements exist, false otherwise\n*/",
        "com.google.common.collect.Iterators$ConcatenatedIterator:next()": "/**\n* Returns the next element in the iterator.\n* @return next element of type T or throws NoSuchElementException if none exists\n*/",
        "com.google.common.collect.Iterators$ConcatenatedIterator:<init>(java.util.Iterator)": "/**\n* Initializes ConcatenatedIterator with a non-null metaIterator.\n* @param metaIterator iterator of iterators to concatenate\n*/"
    },
    "com.google.common.collect.Iterators$EmptyModifiableIterator": {
        "com.google.common.collect.Iterators$EmptyModifiableIterator:next()": "/**\n* Retrieves the next element; always throws NoSuchElementException.\n* @return never returns a value\n*/",
        "com.google.common.collect.Iterators$EmptyModifiableIterator:remove()": "/**\n* Removes an item if allowed.\n* @throws IllegalStateException if removal is not permitted\n*/"
    },
    "com.google.common.collect.Iterators$MergingIterator": {
        "com.google.common.collect.Iterators$MergingIterator:hasNext()": "/**\n* Checks if there are more elements in the queue.\n* @return true if the queue is not empty, false otherwise\n*/",
        "com.google.common.collect.Iterators$MergingIterator:next()": "/**\n* Retrieves the next element from the iterator queue.\n* @return the next element of type T\n*/",
        "com.google.common.collect.Iterators$MergingIterator:<init>(java.lang.Iterable,java.util.Comparator)": "/**\n* Merges multiple iterators into a sorted order using a comparator.\n* @param iterators collection of iterators to merge\n* @param itemComparator comparator for sorting items\n*/"
    },
    "com.google.common.collect.Iterators$PeekingImpl": {
        "com.google.common.collect.Iterators$PeekingImpl:hasNext()": "/**\n* Checks if there are more elements to iterate over.\n* @return true if more elements exist, false otherwise\n*/",
        "com.google.common.collect.Iterators$PeekingImpl:<init>(java.util.Iterator)": "/**\n* Constructs PeekingImpl with a non-null iterator.\n* @param iterator the iterator to be used, must not be null\n*/",
        "com.google.common.collect.Iterators$PeekingImpl:remove()": "/**\n* Removes the current element; fails if the next element has been peeked.\n*/",
        "com.google.common.collect.Iterators$PeekingImpl:next()": "/**\n* Retrieves the next element, using a cached peeked element if available.\n* @return the next element of type E or null if no more elements exist\n*/",
        "com.google.common.collect.Iterators$PeekingImpl:peek()": "/**\n* Retrieves the next element without advancing the iterator.\n* @return the next element or null if not available\n*/"
    },
    "com.google.common.collect.JdkBackedImmutableBiMap$InverseEntries": {
        "com.google.common.collect.JdkBackedImmutableBiMap$InverseEntries:size()": "/**\n* Returns the number of entries in the collection.\n* @return the size of the entries list\n*/",
        "com.google.common.collect.JdkBackedImmutableBiMap$InverseEntries:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return false, as this view is not partial\n*/",
        "com.google.common.collect.JdkBackedImmutableBiMap$InverseEntries:get(int)": "/**\n* Retrieves an entry by index and returns it as an immutable Entry.\n* @param index the index of the entry\n* @return an immutable Entry with value and key\n*/"
    },
    "com.google.common.collect.JdkBackedImmutableBiMap": {
        "com.google.common.collect.JdkBackedImmutableBiMap:size()": "/**\n* Returns the number of entries in the collection.\n* @return the size of the entries list\n*/",
        "com.google.common.collect.JdkBackedImmutableBiMap:get(java.lang.Object)": "/**\n* Retrieves the value associated with the specified key.\n* @param key the key whose associated value is to be returned\n* @return the value associated with the key or null if not found\n*/",
        "com.google.common.collect.JdkBackedImmutableBiMap:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return false, as the view is not partial\n*/",
        "com.google.common.collect.JdkBackedImmutableBiMap:<init>(com.google.common.collect.ImmutableList,java.util.Map,java.util.Map)": "/**\n* Constructs a JdkBackedImmutableBiMap with given entries and delegates.\n* @param entries list of key-value pairs\n* @param forwardDelegate map for forward lookups\n* @param backwardDelegate map for backward lookups\n*/",
        "com.google.common.collect.JdkBackedImmutableBiMap:createKeySet()": "/**\n* Creates an immutable set of keys from the current map.\n* @return ImmutableSet of keys\n*/",
        "com.google.common.collect.JdkBackedImmutableBiMap:inverse()": "/**\n* Returns the inverse of the current ImmutableBiMap.\n* @return an ImmutableBiMap with reversed key-value pairs\n*/",
        "com.google.common.collect.JdkBackedImmutableBiMap:createEntrySet()": "/**\n* Creates an immutable set of map entries.\n* @return ImmutableSet of Entry objects\n*/",
        "com.google.common.collect.JdkBackedImmutableBiMap:create(int,java.util.Map$Entry[])": "/**\n* Creates an ImmutableBiMap from an array of entries.\n* @param n number of entries to process\n* @param entryArray array of key-value pairs\n* @return ImmutableBiMap constructed from the entries\n*/"
    },
    "com.google.common.collect.JdkBackedImmutableMap": {
        "com.google.common.collect.JdkBackedImmutableMap:size()": "/**\n* Returns the number of entries in the collection.\n* @return the size of the entries collection\n*/",
        "com.google.common.collect.JdkBackedImmutableMap:get(java.lang.Object)": "/**\n* Retrieves the value associated with the specified key.\n* @param key the key whose associated value is to be returned\n* @return the value associated with the key or null if not found\n*/",
        "com.google.common.collect.JdkBackedImmutableMap:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return false, as this view is not partial\n*/",
        "com.google.common.collect.JdkBackedImmutableMap:<init>(java.util.Map,com.google.common.collect.ImmutableList)": "/**\n* Constructs JdkBackedImmutableMap with a delegate map and entries.\n* @param delegateMap source map for key-value pairs\n* @param entries list of immutable entries for the map\n*/",
        "com.google.common.collect.JdkBackedImmutableMap:createKeySet()": "/**\n* Creates an immutable key set from the current map.\n* @return ImmutableSet containing the map's keys\n*/",
        "com.google.common.collect.JdkBackedImmutableMap:forEach(java.util.function.BiConsumer)": "/**\n* Applies an action to each key-value pair in entries.\n* @param action function to apply for each entry\n*/",
        "com.google.common.collect.JdkBackedImmutableMap:createValues()": "/**\n* Creates an ImmutableCollection of values from the current instance.\n* @return ImmutableCollection of values\n*/",
        "com.google.common.collect.JdkBackedImmutableMap:createEntrySet()": "/**\n* Creates an immutable set of map entries.\n* @return ImmutableSet of Entry objects representing the entries\n*/",
        "com.google.common.collect.JdkBackedImmutableMap:create(int,java.util.Map$Entry[],boolean)": "/**\n* Creates an ImmutableMap from entries, handling duplicate keys based on the flag.\n* @param n number of entries to process\n* @param entryArray array of key-value pairs\n* @param throwIfDuplicateKeys flag to throw on duplicate keys\n* @return ImmutableMap constructed from the entries\n*/"
    },
    "com.google.common.collect.JdkBackedImmutableMultiset": {
        "com.google.common.collect.JdkBackedImmutableMultiset:count(java.lang.Object)": "/**\n* Returns the count of the specified element.\n* @param element the element to count occurrences of\n* @return the count of the element, or 0 if not found\n*/",
        "com.google.common.collect.JdkBackedImmutableMultiset:getEntry(int)": "/**\n* Retrieves the entry at the specified index.\n* @param index position of the entry in the list\n* @return Entry object at the given index\n*/",
        "com.google.common.collect.JdkBackedImmutableMultiset:isPartialView()": "/**\n* Indicates if the view is partial.\n* @return false, as the view is not partial\n*/",
        "com.google.common.collect.JdkBackedImmutableMultiset:size()": "/**\n* Returns the size of the collection as an int.\n* @return saturated int size within Integer limits\n*/",
        "com.google.common.collect.JdkBackedImmutableMultiset:<init>(java.util.Map,com.google.common.collect.ImmutableList,long)": "/**\n* Initializes JdkBackedImmutableMultiset with delegateMap, entries, and size.\n* @param delegateMap mapping of elements to their counts\n* @param entries list of entries in the multiset\n* @param size total number of elements in the multiset\n*/",
        "com.google.common.collect.JdkBackedImmutableMultiset:elementSet()": "/**\n* Returns an immutable set of elements, initializing if not already set.\n* @return ImmutableSet of elements\n*/",
        "com.google.common.collect.JdkBackedImmutableMultiset:create(java.util.Collection)": "/**\n* Creates an immutable multiset from a collection of entries.\n* @param entries collection of multiset entries\n* @return ImmutableMultiset containing the elements and their counts\n*/"
    },
    "com.google.common.collect.LexicographicalOrdering": {
        "com.google.common.collect.LexicographicalOrdering:compare(java.lang.Iterable,java.lang.Iterable)": "/**\n* Compares two iterables element-wise; returns comparison result or length difference.\n* @param leftIterable first iterable to compare\n* @param rightIterable second iterable to compare\n* @return negative if left < right, positive if left > right, zero if equal\n*/",
        "com.google.common.collect.LexicographicalOrdering:equals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.LexicographicalOrdering:hashCode()": "/**\n* Computes the hash code for the object using element order.\n* @return integer hash code value\n*/",
        "com.google.common.collect.LexicographicalOrdering:toString()": "/**\n* Returns a string representation of the element order in lexicographical format.\n* @return formatted string of element order\n*/",
        "com.google.common.collect.LexicographicalOrdering:<init>(java.util.Comparator)": "/**\n* Constructs a LexicographicalOrdering with the specified comparator.\n* @param elementOrder comparator for ordering elements\n*/"
    },
    "com.google.common.collect.LinkedHashMultimap$ValueEntry": {
        "com.google.common.collect.LinkedHashMultimap$ValueEntry:getSuccessorInMultimap()": "/**\n* Retrieves the successor entry in the multimap.\n* @return ValueEntry object, must not be null\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueEntry:<init>(java.lang.Object,java.lang.Object,int,com.google.common.collect.LinkedHashMultimap$ValueEntry)": "/**\n* Constructs a ValueEntry with key, value, hash, and next entry in bucket.\n* @param key the entry key\n* @param value the entry value\n* @param smearedValueHash hash of the value\n* @param nextInValueBucket next ValueEntry in the bucket or null\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueEntry:getPredecessorInValueSet()": "/**\n* Retrieves the predecessor in the value set.\n* @return ValueSetLink object, never null\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueEntry:getSuccessorInValueSet()": "/**\n* Retrieves the successor in the value set.\n* @return ValueSetLink object, must not be null\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueEntry:getPredecessorInMultimap()": "/**\n* Retrieves the predecessor entry in the multimap.\n* @return ValueEntry of type K and V, must not be null\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueEntry:setSuccessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)": "/**\n* Sets the successor entry in the multimap.\n* @param multimapSuccessor the successor ValueEntry to set\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueEntry:setPredecessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)": "/**\n* Sets the predecessor entry in the multimap.\n* @param multimapPredecessor the predecessor ValueEntry to set\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueEntry:setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)": "/**\n* Sets the predecessor entry in the value set.\n* @param entry the ValueSetLink to set as predecessor\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueEntry:setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)": "/**\n* Sets the successor in the value set.\n* @param entry the ValueSetLink to set as successor\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueEntry:matchesValue(java.lang.Object,int)": "/**\n* Checks if the smeared value hash matches and value is equal to the given object.\n* @param v object to compare with the stored value\n* @param smearedVHash hash to compare with the stored smeared value hash\n* @return true if both match, false otherwise\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueEntry:newHeader()": "/**** Creates a new ValueEntry with null key, value, and hash. @return new ValueEntry instance */"
    },
    "com.google.common.collect.LinkedHashMultimap$ValueSet": {
        "com.google.common.collect.LinkedHashMultimap$ValueSet:iterator()": "/**\n* Returns an iterator for traversing values in the collection.\n* @return Iterator of values\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueSet:getSuccessorInValueSet()": "/**\n* Retrieves the first entry in the value set.\n* @return ValueSetLink object representing the first entry\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueSet:mask()": "/**\n* Returns the mask value for the hash table.\n* @return mask value based on hash table length\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueSet:getPredecessorInValueSet()": "/**\n* Retrieves the last entry in the value set.\n* @return ValueSetLink object representing the last entry\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueSet:setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)": "/**\n* Sets the predecessor entry in the value set.\n* @param entry ValueSetLink instance to be set as predecessor\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueSet:setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)": "/**\n* Sets the successor entry in the value set.\n* @param entry the successor ValueSetLink to be set\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueSet:forEach(java.util.function.Consumer)": "/**\n* Applies the given action to each value in the value set.\n* @param action the operation to apply on each value\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueSet:rehashIfNecessary()": "/**\n* Resizes hash table if necessary based on current size and load factor.\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueSet:clear()": "/**\n* Clears the hash table and resets its size and entries.\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueSet:contains(java.lang.Object)": "/**\n* Checks if the object is present in the hash table.\n* @param o object to search for; may be null\n* @return true if found, false otherwise\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueSet:remove(java.lang.Object)": "/**\n* Removes the specified object from the hash table.\n* @param o object to be removed, may be null\n* @return true if the object was removed, false otherwise\n*/",
        "com.google.common.collect.LinkedHashMultimap$ValueSet:add(java.lang.Object)": "/**\n* Adds a value to the hash table if not already present.\n* @param value the value to add\n* @return true if added, false if already exists\n*/"
    },
    "com.google.common.collect.LinkedHashMultimap": {
        "com.google.common.collect.LinkedHashMultimap:succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink)": "/**\n* Links two ValueSetLinks as predecessor and successor.\n* @param pred predecessor ValueSetLink\n* @param succ successor ValueSetLink\n*/",
        "com.google.common.collect.LinkedHashMultimap:createCollection(java.lang.Object)": "/**\n* Creates a new collection of values for the given key.\n* @param key identifier for the value collection\n* @return a Collection of values associated with the key\n*/",
        "com.google.common.collect.LinkedHashMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for the specified key and returns the updated value set.\n* @param key the key whose values are to be replaced\n* @param values new values to associate with the key\n* @return updated set of values for the key\n*/",
        "com.google.common.collect.LinkedHashMultimap:entries()": "/**\n* Returns a set of key-value entries from the map.\n* @return Set of key-value pairs (Entry<K, V>)\n*/",
        "com.google.common.collect.LinkedHashMultimap:keySet()": "/**\n* Returns a set of keys from the map.\n* @return Set of keys contained in the map\n*/",
        "com.google.common.collect.LinkedHashMultimap:values()": "/**\n* Returns a collection of values from the superclass.\n* @return Collection of values\n*/",
        "com.google.common.collect.LinkedHashMultimap:entryIterator()": "/**\n* Returns an iterator for entries in the multimap.\n* @return Iterator of key-value pairs in the multimap\n*/",
        "com.google.common.collect.LinkedHashMultimap:deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)": "/**\n* Deletes entry from value set by linking predecessor and successor.\n* @param entry ValueSetLink to be removed\n*/",
        "com.google.common.collect.LinkedHashMultimap:succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry)": "/**\n* Links predecessor and successor entries in a multimap.\n* @param pred predecessor ValueEntry\n* @param succ successor ValueEntry\n*/",
        "com.google.common.collect.LinkedHashMultimap:entrySpliterator()": "/**\n* Creates a Spliterator for the map entries.\n* @return Spliterator of key-value pairs with distinct and ordered properties\n*/",
        "com.google.common.collect.LinkedHashMultimap:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object state to the given output stream.\n* @param stream output stream for serialization\n*/",
        "com.google.common.collect.LinkedHashMultimap:valueIterator()": "/**\n* Returns an iterator for values in the multimap.\n* @return Iterator of values from key-value entries\n*/",
        "com.google.common.collect.LinkedHashMultimap:deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)": "/**\n* Deletes an entry from a multimap by linking its predecessor and successor.\n* @param entry the ValueEntry to be deleted\n*/",
        "com.google.common.collect.LinkedHashMultimap:clear()": "/**\n* Clears the multimap and links header entry to itself.\n*/",
        "com.google.common.collect.LinkedHashMultimap:valueSpliterator()": "/**\n* Returns a Spliterator for the values of the entries.\n* @return Spliterator of values mapped from entry Spliterator\n*/",
        "com.google.common.collect.LinkedHashMultimap:<init>(int,int)": "/**\n* Initializes a LinkedHashMultimap with specified key and value capacities.\n* @param keyCapacity desired capacity for keys\n* @param valueSetCapacity expected values per key\n*/",
        "com.google.common.collect.LinkedHashMultimap:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from input stream.\n* @param stream input stream for reading object data\n* @throws IOException if an I/O error occurs\n* @throws ClassNotFoundException if class of a serialized object cannot be found\n*/",
        "com.google.common.collect.LinkedHashMultimap:createCollection()": "/**\n* Creates a LinkedHashSet with a specified initial capacity.\n* @return a Set of type V with the defined capacity\n*/",
        "com.google.common.collect.LinkedHashMultimap:create()": "/**\n* Creates a new LinkedHashMultimap with default capacities.\n* @return a LinkedHashMultimap instance\n*/",
        "com.google.common.collect.LinkedHashMultimap:create(int,int)": "/**\n* Creates a LinkedHashMultimap with specified key and value capacities.\n* @param expectedKeys desired number of keys\n* @param expectedValuesPerKey expected values per key\n* @return initialized LinkedHashMultimap instance\n*/",
        "com.google.common.collect.LinkedHashMultimap:create(com.google.common.collect.Multimap)": "/**\n* Creates a LinkedHashMultimap from an existing multimap.\n* @param multimap source multimap to copy from\n* @return initialized LinkedHashMultimap instance\n*/"
    },
    "com.google.common.collect.LinkedListMultimap$1": {
        "com.google.common.collect.LinkedListMultimap$1:size()": "/**\n* Returns the current size of the collection.\n* @return the number of elements in the collection\n*/"
    },
    "com.google.common.collect.LinkedListMultimap": {
        "com.google.common.collect.LinkedListMultimap:containsKey(java.lang.Object)": "/**\n* Checks if the specified key exists in the key-to-key list.\n* @param key the key to check for presence\n* @return true if the key is found, false otherwise\n*/",
        "com.google.common.collect.LinkedListMultimap:size()": "/**\n* Returns the current size of the collection.\n* @return the number of elements in the collection\n*/",
        "com.google.common.collect.LinkedListMultimap:removeNode(com.google.common.collect.LinkedListMultimap$Node)": "/**\n* Removes a node from the linked structure and updates key associations.\n* @param node the node to be removed\n*/",
        "com.google.common.collect.LinkedListMultimap:clear()": "/**\n* Clears the data structure, resetting head, tail, and size to initial state.\n*/",
        "com.google.common.collect.LinkedListMultimap:get(java.lang.Object)": "/**\n* Retrieves a list of values associated with a given key.\n* @param key the key to look up values\n* @return a list of values or an empty list if no values are found\n*/",
        "com.google.common.collect.LinkedListMultimap:createKeySet()": "/**\n* Creates a set of keys for the multimap.\n* @return a Set containing the keys\n*/",
        "com.google.common.collect.LinkedListMultimap:createValues()": "/**\n* Creates a list of values from entries.\n* @return List of values contained in entries\n*/",
        "com.google.common.collect.LinkedListMultimap:createEntries()": "/**\n* Creates a list of key-value entries.\n* @return List of Entry objects representing the entries\n*/",
        "com.google.common.collect.LinkedListMultimap:entryIterator()": "/**\n* Throws an AssertionError indicating this method should not be invoked.\n*/",
        "com.google.common.collect.LinkedListMultimap:isEmpty()": "/**\n* Checks if the list is empty.\n* @return true if the list has no elements, false otherwise\n*/",
        "com.google.common.collect.LinkedListMultimap:values()": "/**\n* Returns a list of values from the superclass.\n* @return List of values cast from the superclass collection\n*/",
        "com.google.common.collect.LinkedListMultimap:createKeys()": "/**\n* Creates a multiset of keys from the current instance.\n* @return Multiset of keys associated with this instance\n*/",
        "com.google.common.collect.LinkedListMultimap:entries()": "/**\n* Returns a list of entries from the superclass.\n* @return List of Entry objects\n*/",
        "com.google.common.collect.LinkedListMultimap:asMap()": "/**\n* Returns a map view of the collection, creating it if not already initialized.\n* @return map of keys to their corresponding collections\n*/",
        "com.google.common.collect.LinkedListMultimap:keySet()": "/**\n* Returns the set of keys, creating it if not initialized.\n* @return Set of keys in the collection\n*/",
        "com.google.common.collect.LinkedListMultimap:keys()": "/**\n* Retrieves the multiset of keys, initializing if not present.\n* @return Multiset of keys\n*/",
        "com.google.common.collect.LinkedListMultimap:addNode(java.lang.Object,java.lang.Object,com.google.common.collect.LinkedListMultimap$Node)": "/**\n* Adds a node to the list and updates key-to-key list mapping.\n* @param key the key for the new node\n* @param value the value for the new node\n* @param nextSibling the node before which to insert, or null to add at the end\n* @return the newly added Node\n*/",
        "com.google.common.collect.LinkedListMultimap:removeAllNodes(java.lang.Object)": "/**\n* Removes all nodes associated with the specified key.\n* @param key the key for which nodes are to be removed\n*/",
        "com.google.common.collect.LinkedListMultimap:createAsMap()": "/**\n* Creates a map view of the Multimap.\n* @return Map of keys to collections of values\n*/",
        "com.google.common.collect.LinkedListMultimap:containsValue(java.lang.Object)": "/**\n* Checks if the specified value is present in the collection.\n* @param value the value to search for\n* @return true if the value exists, otherwise false\n*/",
        "com.google.common.collect.LinkedListMultimap:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object state to the output stream.\n* @param stream the output stream for serialization\n*/",
        "com.google.common.collect.LinkedListMultimap:containsEntry(java.lang.Object,java.lang.Object)": "/**\n* Checks if the map contains the specified key-value entry.\n* @param key the key to check\n* @param value the value to check\n* @return true if entry exists, false otherwise\n*/",
        "com.google.common.collect.LinkedListMultimap:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes a value from the collection associated with the given key.\n* @param key the key whose associated collection is modified\n* @param value the value to be removed from the collection\n* @return true if the value was removed, false otherwise\n*/",
        "com.google.common.collect.LinkedListMultimap:hashCode()": "/**\n* Computes the hash code using the map view of the collection.\n* @return hash code integer for the object\n*/",
        "com.google.common.collect.LinkedListMultimap:toString()": "/**\n* Returns a string representation of the object.\n* @return string representation of the map view of the collection\n*/",
        "com.google.common.collect.LinkedListMultimap:putAll(com.google.common.collect.Multimap)": "/**\n* Adds all entries from the given multimap; returns true if any were added.\n* @param multimap the multimap containing entries to add\n* @return true if entries were added, false otherwise\n*/",
        "com.google.common.collect.LinkedListMultimap:equals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.LinkedListMultimap:put(java.lang.Object,java.lang.Object)": "/**\n* Adds a key-value pair and always returns true.\n* @param key the key to insert\n* @param value the value to associate with the key\n* @return always true\n*/",
        "com.google.common.collect.LinkedListMultimap:putAll(java.lang.Object,java.lang.Iterable)": "/**\n* Adds all values to the collection associated with the given key.\n* @param key the key for the collection\n* @param values iterable of values to add\n* @return true if the collection was modified\n*/",
        "com.google.common.collect.LinkedListMultimap:getCopy(java.lang.Object)": "/**\n* Returns an unmodifiable copy of values for a given key.\n* @param key the key to retrieve values for\n* @return unmodifiable List of values associated with the key\n*/",
        "com.google.common.collect.LinkedListMultimap:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from stream.\n* @param stream input stream for reading object data\n*/",
        "com.google.common.collect.LinkedListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a given key and returns the old values.\n* @param key the key to replace values for\n* @param values new values to set for the key\n* @return List of old values associated with the key\n*/",
        "com.google.common.collect.LinkedListMultimap:removeAll(java.lang.Object)": "/**\n* Removes all nodes for a given key and returns previous values.\n* @param key the key to remove associated nodes\n* @return List of previous values for the key\n*/",
        "com.google.common.collect.LinkedListMultimap:<init>(int)": "/**\n* Initializes a LinkedListMultimap with a specified number of expected keys.\n* @param expectedKeys anticipated number of keys for efficient storage\n*/",
        "com.google.common.collect.LinkedListMultimap:create(int)": "/**\n* Creates a LinkedListMultimap with a specified number of expected keys.\n* @param expectedKeys anticipated number of keys for efficient storage\n* @return new LinkedListMultimap instance\n*/",
        "com.google.common.collect.LinkedListMultimap:<init>()": "/**\n* Default constructor for LinkedListMultimap initializing with 12 expected keys.\n*/",
        "com.google.common.collect.LinkedListMultimap:<init>(com.google.common.collect.Multimap)": "/**\n* Initializes LinkedListMultimap from another multimap.\n* @param multimap source multimap to copy entries from\n*/",
        "com.google.common.collect.LinkedListMultimap:create()": "/**\n* Creates a new LinkedListMultimap instance.\n* @return a new LinkedListMultimap with no entries\n*/",
        "com.google.common.collect.LinkedListMultimap:create(com.google.common.collect.Multimap)": "/**\n* Creates a LinkedListMultimap from the provided multimap.\n* @param multimap source multimap to copy entries from\n* @return a new LinkedListMultimap containing the same entries\n*/"
    },
    "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator": {
        "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:checkForConcurrentModification()": "/**\n* Checks for concurrent modifications; throws exception if detected.\n*/",
        "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:hasNext()": "/**\n* Checks if there are more elements to iterate.\n* @return true if next element exists, false otherwise\n*/",
        "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:next()": "/**\n* Returns the next unseen key; throws exception if no more elements exist.\n* @return the next key\n*/",
        "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:remove()": "/**\n* Removes the current element; validates state and checks for modifications.\n*/"
    },
    "com.google.common.collect.LinkedListMultimap$KeyList": {
        "com.google.common.collect.LinkedListMultimap$KeyList:<init>(com.google.common.collect.LinkedListMultimap$Node)": "/**\n* Initializes KeyList with the first node.\n* @param firstNode the initial node of the KeyList\n*/"
    },
    "com.google.common.collect.LinkedListMultimap$Node": {
        "com.google.common.collect.LinkedListMultimap$Node:<init>(java.lang.Object,java.lang.Object)": "/**\n* Constructs a Node with specified key and value.\n* @param key the key associated with the node\n* @param value the value associated with the node\n*/"
    },
    "com.google.common.collect.LinkedListMultimap$NodeIterator": {
        "com.google.common.collect.LinkedListMultimap$NodeIterator:checkForConcurrentModification()": "/**\n* Checks for concurrent modifications and throws exception if detected.\n*/",
        "com.google.common.collect.LinkedListMultimap$NodeIterator:set(java.util.Map$Entry)": "/**\n* Throws UnsupportedOperationException when attempting to set an entry.\n* @param e the entry to set (not supported)\n*/",
        "com.google.common.collect.LinkedListMultimap$NodeIterator:add(java.util.Map$Entry)": "/**\n* Throws UnsupportedOperationException when attempting to add an entry.\n* @param e the entry to be added\n*/",
        "com.google.common.collect.LinkedListMultimap$NodeIterator:setValue(java.lang.Object)": "/**\n* Sets the current value after validating its existence.\n* @param value the new value to set\n*/",
        "com.google.common.collect.LinkedListMultimap$NodeIterator:hasNext()": "/**\n* Checks if there is a next element available.\n* @return true if next element exists, false otherwise\n*/",
        "com.google.common.collect.LinkedListMultimap$NodeIterator:next()": "/**\n* Retrieves the next node in the iteration.\n* @return the current Node, or throws NoSuchElementException if no more nodes exist\n*/",
        "com.google.common.collect.LinkedListMultimap$NodeIterator:remove()": "/**\n* Removes the current element from the collection.\n* @throws IllegalStateException if remove() is called improperly\n*/",
        "com.google.common.collect.LinkedListMultimap$NodeIterator:hasPrevious()": "/**\n* Checks if there is a previous element.\n* @return true if previous is not null, otherwise false\n*/",
        "com.google.common.collect.LinkedListMultimap$NodeIterator:previous()": "/**\n* Returns the previous node in the iteration.\n* @return Node object or throws NoSuchElementException if none exists\n*/"
    },
    "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator": {
        "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:previous()": "/**\n* Retrieves the previous element's value and updates the current state.\n* @return value of the previous element\n* @throws NoSuchElementException if there is no previous element\n*/",
        "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:next()": "/**\n* Retrieves the next value in the sequence or throws an exception if none exists.\n* @return the next value of type V\n* @throws NoSuchElementException if there is no next element\n*/",
        "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:add(java.lang.Object)": "/**\n* Adds a value to the collection, updating previous and current nodes.\n* @param value the value to be added\n*/",
        "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:hasNext()": "/**\n* Checks if there is a next element available.\n* @return true if next element exists, false otherwise\n*/",
        "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:set(java.lang.Object)": "/**\n* Sets the value of the current object if it is not null.\n* @param value the new value to set\n*/",
        "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:remove()": "/**\n* Removes the current node; validates state before removal.\n* @throws IllegalStateException if not in a valid state\n*/"
    },
    "com.google.common.collect.Lists$AbstractListWrapper": {
        "com.google.common.collect.Lists$AbstractListWrapper:add(int,java.lang.Object)": "/**\n* Inserts an element at the specified index in the backing list.\n* @param index position to insert the element\n* @param element the element to be added\n*/",
        "com.google.common.collect.Lists$AbstractListWrapper:addAll(int,java.util.Collection)": "/**\n* Inserts all elements from collection at specified index.\n* @param index position to insert elements\n* @param c collection of elements to add\n* @return true if the list changed as a result of the call\n*/",
        "com.google.common.collect.Lists$AbstractListWrapper:get(int)": "/**\n* Retrieves the element at the specified index from the backing list.\n* @param index position of the element to retrieve\n* @return element at the given index, or null if not present\n*/",
        "com.google.common.collect.Lists$AbstractListWrapper:remove(int)": "/**\n* Removes and returns element at specified index.\n* @param index position of the element to remove\n* @return the removed element\n*/",
        "com.google.common.collect.Lists$AbstractListWrapper:set(int,java.lang.Object)": "/**\n* Sets the element at the specified index and returns the old element.\n* @param index position in the list to set the new element\n* @param element new element to be set at the index\n* @return old element previously at the specified index\n*/",
        "com.google.common.collect.Lists$AbstractListWrapper:contains(java.lang.Object)": "/**\n* Checks if the backing list contains the specified object.\n* @param o object to check for presence in the list\n* @return true if the object is found, otherwise false\n*/",
        "com.google.common.collect.Lists$AbstractListWrapper:size()": "/**\n* Returns the number of elements in the backing list.\n* @return the size of the backing list\n*/",
        "com.google.common.collect.Lists$AbstractListWrapper:<init>(java.util.List)": "/**\n* Constructs an AbstractListWrapper with a non-null backing list.\n* @param backingList the list to be wrapped\n*/"
    },
    "com.google.common.collect.Lists$CharSequenceAsList": {
        "com.google.common.collect.Lists$CharSequenceAsList:<init>(java.lang.CharSequence)": "/**\n* Initializes CharSequenceAsList with the provided CharSequence.\n* @param sequence the CharSequence to be stored\n*/",
        "com.google.common.collect.Lists$CharSequenceAsList:size()": "/**\n* Returns the length of the sequence.\n* @return the number of elements in the sequence\n*/",
        "com.google.common.collect.Lists$CharSequenceAsList:get(int)": "/**\n* Retrieves character at specified index.\n* @param index the index of the character to retrieve\n* @return character at the given index\n*/"
    },
    "com.google.common.collect.Lists$Partition": {
        "com.google.common.collect.Lists$Partition:<init>(java.util.List,int)": "/**\n* Initializes a partition with a list and specified partition size.\n* @param list the list to be partitioned\n* @param size the size of each partition\n*/",
        "com.google.common.collect.Lists$Partition:isEmpty()": "/**\n* Checks if the list is empty.\n* @return true if the list has no elements, false otherwise\n*/",
        "com.google.common.collect.Lists$Partition:size()": "/**\n* Returns the size of the list adjusted by a ceiling division.\n* @return adjusted size as an integer\n*/",
        "com.google.common.collect.Lists$Partition:get(int)": "/**\n* Retrieves a sublist of elements from the specified index.\n* @param index starting index for the sublist\n* @return List of elements from the specified index\n*/"
    },
    "com.google.common.collect.Lists$ReverseList": {
        "com.google.common.collect.Lists$ReverseList:size()": "/**\n* Returns the number of elements in the forward list.\n* @return the size of the forward list\n*/",
        "com.google.common.collect.Lists$ReverseList:clear()": "/**\n* Clears all elements from the forward list.\n*/",
        "com.google.common.collect.Lists$ReverseList:iterator()": "/**\n* Returns an iterator over elements of type T.\n* @return Iterator<T> for traversing the collection\n*/",
        "com.google.common.collect.Lists$ReverseList:getForwardList()": "/**\n* Retrieves the list of forward items.\n* @return List of forward items of type T\n*/",
        "com.google.common.collect.Lists$ReverseList:<init>(java.util.List)": "/**\n* Initializes ReverseList with a non-null forwardList.\n* @param forwardList list to be reversed\n*/",
        "com.google.common.collect.Lists$ReverseList:reverseIndex(int)": "/**\n* Computes the reverse index based on the current size.\n* @param index the original index to reverse\n* @return the reversed index within the list bounds\n*/",
        "com.google.common.collect.Lists$ReverseList:reversePosition(int)": "/**\n* Calculates the reverse position in a list.\n* @param index position to reverse\n* @return the reverse position based on the list size\n*/",
        "com.google.common.collect.Lists$ReverseList:remove(int)": "/**\n* Removes an element at the specified index.\n* @param index the index of the element to remove\n* @return the removed element or null if not found\n*/",
        "com.google.common.collect.Lists$ReverseList:set(int,java.lang.Object)": "/**\n* Sets an element at the specified index after reversing it.\n* @param index position to set the element\n* @param element value to set at the index\n* @return previous element at the reversed index\n*/",
        "com.google.common.collect.Lists$ReverseList:get(int)": "/**\n* Retrieves an element by index from a reversed list.\n* @param index the original index to access\n* @return the element at the reversed index\n*/",
        "com.google.common.collect.Lists$ReverseList:add(int,java.lang.Object)": "/**\n* Adds an element at a specified index after reversing its position.\n* @param index position to add the element\n* @param element the element to add\n*/",
        "com.google.common.collect.Lists$ReverseList:listIterator(int)": "/**\n* Returns a ListIterator starting from a reversed index.\n* @param index position to start from\n* @return ListIterator for traversing the list\n*/",
        "com.google.common.collect.Lists$ReverseList:subList(int,int)": "/**\n* Returns a reversed sublist from the forward list.\n* @param fromIndex starting position, @param toIndex ending position\n* @return reversed sublist from forwardList\n*/",
        "com.google.common.collect.Lists$ReverseList:removeRange(int,int)": "/**\n* Removes elements in the specified range from the list.\n* @param fromIndex starting position, @param toIndex ending position\n*/"
    },
    "com.google.common.collect.Lists$StringAsImmutableList": {
        "com.google.common.collect.Lists$StringAsImmutableList:indexOf(java.lang.Object)": "/**\n* Returns the index of the specified character in the string.\n* @param object character to find; returns -1 if not found or not a character\n* @return index of the character or -1 if not found\n*/",
        "com.google.common.collect.Lists$StringAsImmutableList:lastIndexOf(java.lang.Object)": "/**\n* Returns the last index of the specified character in the string.\n* @param object character to find; null returns -1\n* @return last index of character or -1 if not found\n*/",
        "com.google.common.collect.Lists$StringAsImmutableList:size()": "/**\n* Returns the length of the string.\n* @return the number of characters in the string\n*/",
        "com.google.common.collect.Lists$StringAsImmutableList:isPartialView()": "/**\n* Indicates if the view is partial.\n* @return false, as the view is not partial\n*/",
        "com.google.common.collect.Lists$StringAsImmutableList:<init>(java.lang.String)": "/**\n* Initializes ImmutableList with a given string.\n* @param string the string to be stored in the ImmutableList\n*/",
        "com.google.common.collect.Lists$StringAsImmutableList:get(int)": "/**\n* Retrieves character at specified index from the string.\n* @param index position of the character to retrieve\n* @return character at the given index\n*/",
        "com.google.common.collect.Lists$StringAsImmutableList:subList(int,int)": "/**\n* Returns a sublist of characters from the specified string range.\n* @param fromIndex starting index, @param toIndex ending index\n* @return ImmutableList of characters from the substring\n*/"
    },
    "com.google.common.collect.Lists$TransformingRandomAccessList": {
        "com.google.common.collect.Lists$TransformingRandomAccessList:removeRange(int,int)": "/**\n* Removes elements from the specified range in the list.\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n*/",
        "com.google.common.collect.Lists$TransformingRandomAccessList:get(int)": "/**\n* Retrieves an element from the list and applies a function to it.\n* @param index the position of the element in the list\n* @return transformed element of type T\n*/",
        "com.google.common.collect.Lists$TransformingRandomAccessList:iterator()": "/**\n* Returns an iterator over the elements in this collection.\n* @return an Iterator for the collection elements\n*/",
        "com.google.common.collect.Lists$TransformingRandomAccessList:listIterator(int)": "/**\n* Returns a ListIterator starting at the specified index.\n* @param index starting position for the iterator\n* @return ListIterator of transformed elements\n*/",
        "com.google.common.collect.Lists$TransformingRandomAccessList:isEmpty()": "/**\n* Checks if the underlying list is empty.\n* @return true if the list has no elements, false otherwise\n*/",
        "com.google.common.collect.Lists$TransformingRandomAccessList:remove(int)": "/**\n* Removes an element at the specified index and applies a function.\n* @param index the index of the element to remove\n* @return the transformed element after removal\n*/",
        "com.google.common.collect.Lists$TransformingRandomAccessList:size()": "/**\n* Returns the number of elements in the list.\n* @return size of the list as an integer\n*/",
        "com.google.common.collect.Lists$TransformingRandomAccessList:<init>(java.util.List,com.google.common.base.Function)": "/**\n* Initializes a TransformingRandomAccessList with a source list and a transformation function.\n* @param fromList source list to transform\n* @param function function to apply to each element\n*/",
        "com.google.common.collect.Lists$TransformingRandomAccessList:removeIf(java.util.function.Predicate)": "/**\n* Removes elements from the list based on the provided filter predicate.\n* @param filter a predicate to apply for removal criteria\n* @return true if any elements were removed, false otherwise\n*/"
    },
    "com.google.common.collect.Lists$TransformingSequentialList": {
        "com.google.common.collect.Lists$TransformingSequentialList:removeRange(int,int)": "/**\n* Removes elements in the specified range from the list.\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n*/",
        "com.google.common.collect.Lists$TransformingSequentialList:size()": "/**\n* Returns the number of elements in the list.\n* @return size of the list as an integer\n*/",
        "com.google.common.collect.Lists$TransformingSequentialList:listIterator(int)": "/**\n* Returns a list iterator starting at the specified index.\n* @param index the starting position for the iterator\n* @return a ListIterator for the transformed elements\n*/",
        "com.google.common.collect.Lists$TransformingSequentialList:<init>(java.util.List,com.google.common.base.Function)": "/**\n* Initializes a TransformingSequentialList with a source list and transformation function.\n* @param fromList the source list to transform\n* @param function the function to apply to each element\n*/",
        "com.google.common.collect.Lists$TransformingSequentialList:removeIf(java.util.function.Predicate)": "/**\n* Removes elements matching the filter predicate from the list.\n* @param filter condition to test elements for removal\n* @return true if any elements were removed, false otherwise\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy": {
        "com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:writeMapTo(java.io.ObjectOutputStream)": "/**\n* Serializes a map to an ObjectOutputStream.\n* @param out the output stream for serialization\n* @throws IOException if an I/O error occurs during writing\n*/",
        "com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:readEntries(java.io.ObjectInputStream)": "/**\n* Reads key-value pairs from an ObjectInputStream and stores them in a delegate map.\n* @param in input stream to read objects from\n* @throws IOException if an I/O error occurs\n* @throws ClassNotFoundException if a class of a serialized object cannot be found\n*/",
        "com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:delegate()": "/**\n* Returns the delegate ConcurrentMap instance.\n* @return the delegate ConcurrentMap\n*/",
        "com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:readMapMaker(java.io.ObjectInputStream)": "/**\n* Reads MapMaker configuration from ObjectInputStream.\n* @param in input stream for reading data\n* @return configured MapMaker instance\n*/",
        "com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:<init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap)": "/**\n* Constructs an AbstractSerializationProxy with specified parameters.\n* @param keyStrength strength of keys\n* @param valueStrength strength of values\n* @param keyEquivalence equivalence for keys\n* @param valueEquivalence equivalence for values\n* @param concurrencyLevel level of concurrency\n* @param delegate underlying ConcurrentMap\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry": {
        "com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry:<init>(java.lang.Object,int)": "/**\n* Constructs an AbstractStrongKeyEntry with a key and its hash.\n* @param key the key associated with the entry\n* @param hash the hash code of the key\n*/",
        "com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry:getHash()": "/**\n* Returns the hash value.\n* @return integer representing the hash\n*/",
        "com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry:getKey()": "/**\n* Returns the key associated with this instance.\n* @return the key of type K\n*/",
        "com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry:getNext()": "/**\n* Retrieves the next element in the sequence.\n* @return the next element or null if none exists\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry": {
        "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)": "/**\n* Constructs an AbstractWeakKeyEntry with specified key and hash.\n* @param queue ReferenceQueue for the weak key\n* @param key Weak key reference\n* @param hash Hash code of the key\n*/",
        "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry:getKey()": "/**\n* Retrieves the key associated with this object.\n* @return key of type K\n*/",
        "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry:getHash()": "/**\n* Returns the hash value.\n* @return the hash integer value\n*/",
        "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry:getNext()": "/**\n* Retrieves the next element in the sequence.\n* @return the next element or null if none exists\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$CleanupMapTask": {
        "com.google.common.collect.MapMakerInternalMap$CleanupMapTask:<init>(com.google.common.collect.MapMakerInternalMap)": "/**\n* Initializes CleanupMapTask with a weak reference to the provided map.\n* @param map the MapMakerInternalMap to reference weakly\n*/",
        "com.google.common.collect.MapMakerInternalMap$CleanupMapTask:run()": "/**\n* Executes cleanup on each segment of the map.\n* @throws CancellationException if the map is not available\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry": {
        "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry:<init>()": "/**\n* Prevents instantiation of the DummyInternalEntry class.\n* Throws AssertionError if invoked.\n*/",
        "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry:getNext()": "/**\n* Throws an AssertionError indicating method not implemented.\n* @return never returns a value\n*/",
        "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry:getHash()": "/**\n* Throws AssertionError to indicate method not implemented.\n* @return never returns a value\n*/",
        "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry:getKey()": "/**\n* Always throws an AssertionError when called.\n* @return never returns a value\n*/",
        "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry:getValue()": "/**\n* Throws an AssertionError when getValue() is called.\n* @return never returns a value\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$EntryIterator": {
        "com.google.common.collect.MapMakerInternalMap$EntryIterator:next()": "/**\n* Returns the next entry in the iteration.\n* @return Entry object containing key-value pair\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$EntrySet": {
        "com.google.common.collect.MapMakerInternalMap$EntrySet:iterator()": "/**\n* Returns an iterator over the entries in the collection.\n* @return Iterator for key-value pairs in the collection\n*/",
        "com.google.common.collect.MapMakerInternalMap$EntrySet:isEmpty()": "/**\n* Checks if the map is empty.\n* @return true if the map is empty, false otherwise\n*/",
        "com.google.common.collect.MapMakerInternalMap$EntrySet:size()": "/**\n* Returns the total count of segments in the map.\n* @return total count as an int\n*/",
        "com.google.common.collect.MapMakerInternalMap$EntrySet:clear()": "/**\n* Clears all segments in the collection.\n*/",
        "com.google.common.collect.MapMakerInternalMap$EntrySet:remove(java.lang.Object)": "/**\n* Removes an entry if it's an instance of Entry and key is non-null.\n* @param o object to remove\n* @return true if removed, false if not an Entry or key is null\n*/",
        "com.google.common.collect.MapMakerInternalMap$EntrySet:contains(java.lang.Object)": "/**\n* Checks if the map contains the specified entry.\n* @param o entry to check for; must be an instance of Entry\n* @return true if entry exists, false otherwise\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap": {
        "com.google.common.collect.MapMakerInternalMap:valueEquivalence()": "/**\n* Retrieves the default equivalence for value strength.\n* @return Equivalence object for value comparison\n*/",
        "com.google.common.collect.MapMakerInternalMap:isEmpty()": "/**\n* Checks if the collection is empty, accounting for concurrent modifications.\n* @return true if empty, false otherwise\n*/",
        "com.google.common.collect.MapMakerInternalMap:unsetWeakValueReference()": "/**\n* Returns a reference to an unset weak value.\n* @return WeakValueReference object representing unset state\n*/",
        "com.google.common.collect.MapMakerInternalMap:newSegmentArray(int)": "/**\n* Creates a new array of Segment objects with specified size.\n* @param ssize the desired size of the segment array\n* @return an array of Segment objects\n*/",
        "com.google.common.collect.MapMakerInternalMap:createSegment(int)": "/**\n* Creates a new segment with the specified initial capacity.\n* @param initialCapacity the initial size of the segment\n* @return a new Segment instance\n*/",
        "com.google.common.collect.MapMakerInternalMap:segmentFor(int)": "/**\n* Retrieves the segment corresponding to the given hash.\n* @param hash integer hash value for segment selection\n* @return Segment object associated with the hash\n*/",
        "com.google.common.collect.MapMakerInternalMap:rehash(int)": "/**\n* Rehashes an integer using a variant of Wang/Jenkins hash.\n* @param h the integer to be rehashed\n* @return the rehashed integer\n*/",
        "com.google.common.collect.MapMakerInternalMap:keyStrength()": "/**\n* Retrieves the strength of the key.\n* @return Strength object representing the key's strength\n*/",
        "com.google.common.collect.MapMakerInternalMap:valueStrength()": "/**\n* Retrieves the strength value from the entry helper.\n* @return Strength object representing the value strength\n*/",
        "com.google.common.collect.MapMakerInternalMap:keySet()": "/**\n* Returns the set of keys, creating it if not already initialized.\n* @return Set of keys associated with the map\n*/",
        "com.google.common.collect.MapMakerInternalMap:values()": "/**\n* Returns a collection of values; initializes if not already set.\n* @return Collection of values\n*/",
        "com.google.common.collect.MapMakerInternalMap:entrySet()": "/**\n* Returns the set of entries in the map.\n* @return Set of map entries, initializes if not present\n*/",
        "com.google.common.collect.MapMakerInternalMap:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; throws exception to enforce SerializationProxy usage.\n* @param in ObjectInputStream for reading serialized objects\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.collect.MapMakerInternalMap:size()": "/**\n* Returns the total count of segments, capped at Integer limits.\n* @return total count as an int\n*/",
        "com.google.common.collect.MapMakerInternalMap:containsValue(java.lang.Object)": "/**\n* Checks if the map contains the specified value.\n* @param value the value to check for presence\n* @return true if the value exists, false otherwise\n*/",
        "com.google.common.collect.MapMakerInternalMap:isLiveForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)": "/**\n* Checks if the entry is live for testing.\n* @param entry internal entry to check\n* @return true if live value exists, false otherwise\n*/",
        "com.google.common.collect.MapMakerInternalMap:hash(java.lang.Object)": "/**\n* Computes hash for a given key and rehashes it.\n* @param key the object to hash, may be null\n* @return rehashed integer representing the hash code\n*/",
        "com.google.common.collect.MapMakerInternalMap:reclaimValue(com.google.common.collect.MapMakerInternalMap$WeakValueReference)": "/**\n* Reclaims a value using its WeakValueReference.\n* @param valueReference reference to the weak value to reclaim\n*/",
        "com.google.common.collect.MapMakerInternalMap:clear()": "/**\n* Clears all segments in the collection.\n*/",
        "com.google.common.collect.MapMakerInternalMap:<init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper)": "/**\n* Initializes MapMakerInternalMap with builder and entry helper.\n* @param builder configuration settings\n* @param entryHelper helper for entry management\n*/",
        "com.google.common.collect.MapMakerInternalMap:getEntry(java.lang.Object)": "/**\n* Retrieves an entry by key, returning null if key is null or not found.\n* @param key the key to search for\n* @return the corresponding entry or null\n*/",
        "com.google.common.collect.MapMakerInternalMap:create(com.google.common.collect.MapMaker)": "/**\n* Creates MapMakerInternalMap based on key and value strength from builder.\n* @param builder configuration settings for map creation\n* @return MapMakerInternalMap instance with specified key/value strengths\n*/",
        "com.google.common.collect.MapMakerInternalMap:createWithDummyValues(com.google.common.collect.MapMaker)": "/**\n* Creates a MapMakerInternalMap with dummy values based on key/value strength settings.\n* @param builder configuration settings for map creation\n* @return MapMakerInternalMap instance with specified dummy values\n*/",
        "com.google.common.collect.MapMakerInternalMap:put(java.lang.Object,java.lang.Object)": "/**\n* Inserts a key-value pair into the map.\n* @param key the key to insert, must not be null\n* @param value the value to associate with the key, must not be null\n* @return previous value associated with the key or null if newly added\n*/",
        "com.google.common.collect.MapMakerInternalMap:putIfAbsent(java.lang.Object,java.lang.Object)": "/**\n* Inserts value if key is absent; returns previous value or null.\n* @param key the key to insert\n* @param value the value to associate with the key\n* @return previous value associated with the key or null if newly added\n*/",
        "com.google.common.collect.MapMakerInternalMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Replaces oldValue with newValue for the specified key.\n* @param key the key to search for\n* @param oldValue the expected value to replace\n* @param newValue the new value to set\n* @return true if replaced, false if not found or values don't match\n*/",
        "com.google.common.collect.MapMakerInternalMap:replace(java.lang.Object,java.lang.Object)": "/**\n* Replaces value for a key; returns old value or null if not found.\n* @param key key to replace value for\n* @param value new value to set\n* @return old value or null if key not found\n*/",
        "com.google.common.collect.MapMakerInternalMap:remove(java.lang.Object)": "/**\n* Removes an entry by key from the collection.\n* @param key the key to remove, may be null\n* @return the removed value or null if not found\n*/",
        "com.google.common.collect.MapMakerInternalMap:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes an entry by key and value if both are non-null.\n* @param key the key to remove\n* @param value the value to match for removal\n* @return true if the value was removed, false otherwise\n*/",
        "com.google.common.collect.MapMakerInternalMap:writeReplace()": "/**\n* Prepares the object for serialization by creating a SerializationProxy.\n* @return SerializationProxy instance for this object\n*/",
        "com.google.common.collect.MapMakerInternalMap:putAll(java.util.Map)": "/**\n* Inserts all key-value pairs from the specified map.\n* @param m map containing key-value pairs to insert\n*/",
        "com.google.common.collect.MapMakerInternalMap:get(java.lang.Object)": "/**\n* Retrieves value by key, returning null if the key is null or not found.\n* @param key the key to search for\n* @return value associated with the key or null\n*/",
        "com.google.common.collect.MapMakerInternalMap:containsKey(java.lang.Object)": "/**\n* Checks if the map contains a non-null key.\n* @param key the key to check for presence\n* @return true if key exists, false if null or not found\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$HashIterator": {
        "com.google.common.collect.MapMakerInternalMap$HashIterator:nextInChain()": "/**\n* Advances to the next entry in the chain if available.\n* @return true if successfully advanced, false otherwise\n*/",
        "com.google.common.collect.MapMakerInternalMap$HashIterator:hasNext()": "/**\n* Checks if there is a next element available.\n* @return true if next element exists, false otherwise\n*/",
        "com.google.common.collect.MapMakerInternalMap$HashIterator:nextInTable()": "/**\n* Attempts to advance to the next non-null entry in the table.\n* @return true if a valid entry is found, false otherwise\n*/",
        "com.google.common.collect.MapMakerInternalMap$HashIterator:advance()": "/**\n* Advances to the next valid entry in the chain or table.\n* @return void\n*/",
        "com.google.common.collect.MapMakerInternalMap$HashIterator:nextEntry()": "/**\n* Retrieves the next entry, advancing to it if available.\n* @return WriteThroughEntry next entry or throws NoSuchElementException\n*/",
        "com.google.common.collect.MapMakerInternalMap$HashIterator:remove()": "/**\n* Removes the last returned entry from the map if permitted.\n* @throws IllegalStateException if removal is not allowed\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$KeyIterator": {
        "com.google.common.collect.MapMakerInternalMap$KeyIterator:next()": "/**\n* Retrieves the next key from the iterator.\n* @return the next key of type K\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$KeySet": {
        "com.google.common.collect.MapMakerInternalMap$KeySet:iterator()": "/**\n* Returns an iterator over the keys in the collection.\n* @return an Iterator for the keys\n*/",
        "com.google.common.collect.MapMakerInternalMap$KeySet:isEmpty()": "/**\n* Checks if the map is empty.\n* @return true if the map has no entries, false otherwise\n*/",
        "com.google.common.collect.MapMakerInternalMap$KeySet:size()": "/**\n* Returns the total count of segments in the map.\n* @return total count as an int\n*/",
        "com.google.common.collect.MapMakerInternalMap$KeySet:clear()": "/**\n* Clears all segments in the collection by invoking the parent clear method.\n*/",
        "com.google.common.collect.MapMakerInternalMap$KeySet:remove(java.lang.Object)": "/**\n* Removes an object from the map.\n* @param o the object to remove, may be null\n* @return true if the object was removed, false otherwise\n*/",
        "com.google.common.collect.MapMakerInternalMap$KeySet:contains(java.lang.Object)": "/**\n* Checks if the map contains the specified object as a key.\n* @param o the key to check for presence\n* @return true if the key exists, false otherwise\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$Segment": {
        "com.google.common.collect.MapMakerInternalMap$Segment:newEntryArray(int)": "/**\n* Creates a new AtomicReferenceArray of specified size.\n* @param size the length of the array to be created\n* @return an AtomicReferenceArray of the given size\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:initTable(java.util.concurrent.atomic.AtomicReferenceArray)": "/**\n* Initializes the table and sets the threshold at 75% of its length.\n* @param newTable the new AtomicReferenceArray to initialize\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:getKeyReferenceQueueForTesting()": "/**\n* Throws an AssertionError for testing purposes.\n* @return ReferenceQueue for keys (not applicable here)\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:getValueReferenceQueueForTesting()": "/**\n* Retrieves a reference queue for testing purposes.\n* @return ReferenceQueue for value references\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)": "/**\n* Retrieves a weak value reference for testing purposes.\n* @param entry internal entry to obtain the reference from\n* @return always throws AssertionError\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)": "/**\n* Creates a weak value reference for testing purposes.\n* @param entry internal entry object\n* @param value value to be referenced\n* @return WeakValueReference instance\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference)": "/**\n* Sets a weak value reference for testing; always throws AssertionError.\n* @param entry the internal entry to set the reference for\n* @param valueReference the weak value reference to be set\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:setTableEntryForTesting(int,com.google.common.collect.MapMakerInternalMap$InternalEntry)": "/**\n* Sets a table entry for testing at the specified index.\n* @param i index of the table entry\n* @param entry the InternalEntry to set at the index\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:copyForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry)": "/**\n* Creates a copy of the entry for testing purposes.\n* @param entry the entry to copy\n* @param newNext optional next entry in the chain\n* @return a copy of the entry\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:setValueForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)": "/**\n* Sets a test value for a given internal entry.\n* @param entry the internal entry to update\n* @param value the value to set for testing\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:newEntryForTesting(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry)": "/**\n* Creates a new entry for testing purposes.\n* @param key the key for the new entry\n* @param hash the hash code of the key\n* @param next the next entry in the chain, can be null\n* @return a new entry of type E\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:removeTableEntryForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)": "/**\n* Removes a table entry for testing purposes.\n* @param entry the entry to be removed\n* @return true if removal was successful, false otherwise\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:removeFromChainForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry)": "/**\n* Removes an entry from a chain for testing purposes.\n* @param first the first entry in the chain\n* @param entry the entry to remove\n* @return the removed entry or null if not found\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:getLiveValueForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)": "/**\n* Retrieves live value for testing from the given internal entry.\n* @param entry the internal entry to fetch the value from\n* @return live value or null if not available\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:maybeDrainReferenceQueues()": "/**\n* Conditionally drains reference queues if applicable.\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:drainKeyReferenceQueue(java.lang.ref.ReferenceQueue)": "/**\n* Drains references from the key reference queue, reclaiming keys in the map.\n* @param keyReferenceQueue the queue to drain references from\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:clearReferenceQueue(java.lang.ref.ReferenceQueue)": "/**\n* Clears all references from the given reference queue.\n* @param referenceQueue the ReferenceQueue to be cleared\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:getFirst(int)": "/**\n* Retrieves the first element from the table using the specified hash.\n* @param hash computed hash value\n* @return the element at the computed index or null if absent\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:maybeClearReferenceQueues()": "/**\n* Clears reference queues if necessary to free up memory resources.\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:reclaimValue(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference)": "/**\n* Reclaims a value reference for a given key and hash.\n* @param key the key to reclaim the value for\n* @param hash the hash of the key\n* @param valueReference the value reference to reclaim\n* @return true if reclaimed, false otherwise\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:clearValueForTesting(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference)": "/**** Clears the value for a key in the map if it matches the provided reference. \n* @param key the key to clear\n* @param hash the hash of the key\n* @param valueReference the reference to check for removal\n* @return true if cleared, false otherwise \n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:expand()": "/**\n* Expands the table by doubling its capacity and reclassifying nodes.\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:<init>(com.google.common.collect.MapMakerInternalMap,int)": "/**\n* Constructs a Segment with a specified map and initializes its table.\n* @param map the MapMakerInternalMap associated with this segment\n* @param initialCapacity initial capacity for the entry array\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:tryDrainReferenceQueues()": "/**\n* Attempts to drain reference queues if lock acquisition is successful.\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:runLockedCleanup()": "/**\n* Cleans up resources if lock is acquired, resets read count.\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:clear()": "/**\n* Clears the collection and resets its count.\n* Calls maybeClearReferenceQueues() to manage memory.\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:getEntry(java.lang.Object,int)": "/**\n* Retrieves an entry by key and hash from the table.\n* @param key the key to search for\n* @param hash computed hash value\n* @return the corresponding entry or null if not found\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:preWriteCleanup()": "/**\n* Performs cleanup before writing, ensuring resources are managed.\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:runCleanup()": "/**\n* Executes the cleanup process by running locked cleanup routines.\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:drainValueReferenceQueue(java.lang.ref.ReferenceQueue)": "/**\n* Drains values from the reference queue, reclaiming them up to a max limit.\n* @param valueReferenceQueue the queue to drain values from\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:getLiveEntry(java.lang.Object,int)": "/**\n* Retrieves a live entry by key and hash.\n* @param key the key to search for\n* @param hash computed hash value\n* @return the corresponding entry or null if not found\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:put(java.lang.Object,int,java.lang.Object,boolean)": "/**\n* Inserts or updates a value for a key in the map.\n* @param key the key to insert or update\n* @param hash the hash of the key\n* @param value the value to associate with the key\n* @param onlyIfAbsent if true, updates only if key is absent\n* @return previous value associated with the key or null if newly added\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:replace(java.lang.Object,int,java.lang.Object,java.lang.Object)": "/**\n* Replaces oldValue with newValue for a given key if found.\n* @param key the key to search for\n* @param hash the hash of the key\n* @param oldValue the value to replace\n* @param newValue the new value to set\n* @return true if replaced, false if not found or values don't match\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:replace(java.lang.Object,int,java.lang.Object)": "/**\n* Replaces value for a key if present; returns old value or null if not found.\n* @param key key to replace value for\n* @param hash hash of the key\n* @param newValue new value to set\n* @return old value or null if key not found\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:remove(java.lang.Object,int)": "/**** Removes an entry by key and hash from the collection. \n* @param key the key to remove, may be null \n* @param hash the hash code of the key \n* @return the removed value or null if not found \n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:remove(java.lang.Object,int,java.lang.Object)": "/**\n* Removes an entry by key and hash; returns true if value was explicitly removed.\n* @param key the key to remove\n* @param hash the hash of the key\n* @param value the value to match for removal\n* @return true if the value was removed, false otherwise\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:postReadCleanup()": "/**\n* Cleans up after reading if the read count reaches the drain threshold.\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:get(java.lang.Object,int)": "/**\n* Retrieves value by key and hash; cleans up after reading.\n* @param key the key to search for\n* @param hash computed hash value\n* @return value associated with the key or null if not found\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:containsKey(java.lang.Object,int)": "/**\n* Checks if the key exists and has a non-null value.\n* @param key the key to check\n* @param hash computed hash value\n* @return true if key has a non-null value, false otherwise\n*/",
        "com.google.common.collect.MapMakerInternalMap$Segment:containsValue(java.lang.Object)": "/**\n* Checks if the value is present in the collection.\n* @param value the value to search for\n* @return true if found, false otherwise\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$SerializationProxy": {
        "com.google.common.collect.MapMakerInternalMap$SerializationProxy:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object to the output stream.\n* @param out the ObjectOutputStream to write the object to\n* @throws IOException if an I/O error occurs during serialization\n*/",
        "com.google.common.collect.MapMakerInternalMap$SerializationProxy:<init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap)": "/**\n* Constructs a SerializationProxy with specified key/value strengths and equivalences.\n* @param keyStrength strength of keys\n* @param valueStrength strength of values\n* @param keyEquivalence equivalence for keys\n* @param valueEquivalence equivalence for values\n* @param concurrencyLevel level of concurrency\n* @param delegate underlying ConcurrentMap\n*/",
        "com.google.common.collect.MapMakerInternalMap$SerializationProxy:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state and initializes map and entries.\n* @param in ObjectInputStream for reading object data\n* @throws IOException if an I/O error occurs\n* @throws ClassNotFoundException if a class cannot be found\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$LinkedStrongKeyDummyValueEntry": {
        "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$LinkedStrongKeyDummyValueEntry:<init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry)": "/**\n* Constructs a LinkedStrongKeyDummyValueEntry with key, hash, and next entry.\n* @param key the key for the entry\n* @param hash the hash code of the key\n* @param next the next StrongKeyDummyValueEntry in the linked list\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$LinkedStrongKeyDummyValueEntry:getNext()": "/**\n* Retrieves the next StrongKeyDummyValueEntry in the sequence.\n* @return next StrongKeyDummyValueEntry or null if none exists\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper": {
        "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:setValue(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry,com.google.common.collect.MapMaker$Dummy)": "/**\n* Sets the value in the specified segment using the provided entry.\n* @param segment the segment to update\n* @param entry the entry key for the value\n* @param value the value to set\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:instance()": "/**\n* Returns a singleton instance of Helper.\n* @return Helper instance cast to the specified generic type K\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:keyStrength()": "/**\n* Returns the strength level of the key.\n* @return Strength enum indicating key strength\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:valueStrength()": "/**\n* Returns the strength level as STRONG.\n* @return Strength enum representing the strength level\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry)": "/**\n* Creates a new StrongKeyDummyValueEntry or LinkedStrongKeyDummyValueEntry.\n* @param segment the segment for the entry (unused)\n* @param key the key for the entry\n* @param hash the hash code of the key\n* @param next the next entry in the linked list or null\n* @return a new StrongKeyDummyValueEntry or LinkedStrongKeyDummyValueEntry\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry)": "/**\n* Copies a StrongKeyDummyValueEntry with a new next entry.\n* @param segment the segment for the entry (unused)\n* @param entry the entry to copy\n* @param newNext the new next entry or null\n* @return a copied StrongKeyDummyValueEntry\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)": "/**\n* Creates a new StrongKeyDummyValueSegment for the given map with specified capacity.\n* @param map the associated MapMakerInternalMap\n* @param initialCapacity the initial capacity for the segment\n* @return a new StrongKeyDummyValueSegment instance\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry": {
        "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry:getValue()": "/**\n* Returns the constant Dummy value.\n* @return Dummy constant instance\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry:<init>(java.lang.Object,int)": "/**\n* Constructs a StrongKeyDummyValueEntry with a key and its hash.\n* @param key the key associated with the entry\n* @param hash the hash code of the key\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment": {
        "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment:castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)": "/**\n* Casts an InternalEntry to StrongKeyDummyValueEntry for testing.\n* @param entry the InternalEntry to cast\n* @return casted StrongKeyDummyValueEntry\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment:self()": "/**\n* Returns the current instance of StrongKeyDummyValueSegment.\n* @return this instance of StrongKeyDummyValueSegment\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)": "/**\n* Constructs a StrongKeyDummyValueSegment with a specified map and initial capacity.\n* @param map associated MapMakerInternalMap\n* @param initialCapacity initial capacity for the entry array\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper": {
        "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:setValue(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry,java.lang.Object)": "/**\n* Sets the value of a specified entry in a segment.\n* @param segment the segment containing the entry\n* @param entry the entry to update\n* @param value the new value to set\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:instance()": "/**\n* Returns a singleton instance of Helper with generic types K and V.\n* @return Helper instance cast to specified generic types\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:keyStrength()": "/**\n* Returns the strength level of the key.\n* @return Strength enum representing the key's strength\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:valueStrength()": "/**\n* Returns the strength level as STRONG.\n* @return Strength enum representing the strength level\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)": "/**\n* Creates a new entry for the key-value segment.\n* @param segment the segment to which the entry belongs\n* @param key the key for the new entry\n* @param hash the hash code of the key\n* @param next the next entry in the linked list or null\n* @return StrongKeyStrongValueEntry instance\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)": "/**\n* Copies an entry, creating a new instance with the same key and value.\n* @param segment the segment of the entry\n* @param entry the entry to copy\n* @param newNext the next entry or null\n* @return a new StrongKeyStrongValueEntry instance\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)": "/**\n* Creates a new StrongKeyStrongValueSegment with specified map and capacity.\n* @param map the associated MapMakerInternalMap\n* @param initialCapacity initial capacity for the segment\n* @return a new StrongKeyStrongValueSegment instance\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$LinkedStrongKeyStrongValueEntry": {
        "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$LinkedStrongKeyStrongValueEntry:<init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)": "/**\n* Initializes a LinkedStrongKeyStrongValueEntry with key, hash, and next entry.\n* @param key the key of the entry\n* @param hash the hash code of the key\n* @param next the next entry in the linked list\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$LinkedStrongKeyStrongValueEntry:getNext()": "/**\n* Retrieves the next StrongKeyStrongValueEntry in the sequence.\n* @return the next StrongKeyStrongValueEntry or null if none exists\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment": {
        "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment:castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)": "/**\n* Casts an InternalEntry to StrongKeyStrongValueEntry for testing.\n* @param entry the InternalEntry to cast, may be null\n* @return the casted StrongKeyStrongValueEntry or null if entry is null\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment:self()": "/**\n* Returns the current instance of StrongKeyStrongValueSegment.\n* @return this instance of StrongKeyStrongValueSegment\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)": "/**\n* Constructs a StrongKeyStrongValueSegment with a map and initial capacity.\n* @param map the associated MapMakerInternalMap\n* @param initialCapacity initial capacity for the entry array\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper": {
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:setValue(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,java.lang.Object)": "/**\n* Sets the value of the entry and clears the previous weak reference.\n* @param segment the segment containing the entry\n* @param entry the entry to update\n* @param value the new value to set\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:instance()": "/**\n* Returns a singleton instance of Helper with generic types K and V.\n* @return Helper instance\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:keyStrength()": "/**\n* Returns the strength level of the key.\n* @return Strength enum representing key strength\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:valueStrength()": "/**\n* Returns the strength value as WEAK.\n* @return Strength enumeration representing the strength\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)": "/**\n* Creates a new StrongKeyWeakValueEntry or LinkedStrongKeyWeakValueEntry.\n* @param segment the segment to which the entry belongs\n* @param key the strong key for the entry\n* @param hash the hash code of the key\n* @param next the next entry in the linked list or null\n* @return a new StrongKeyWeakValueEntry or LinkedStrongKeyWeakValueEntry\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)": "/**\n* Copies a StrongKeyWeakValueEntry, returning null if the original is collected.\n* @param segment the segment containing the entry\n* @param entry the entry to copy\n* @param newNext the next entry in the new list or null\n* @return a copied StrongKeyWeakValueEntry or null if collected\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)": "/**\n* Creates a new StrongKeyWeakValueSegment with specified map and capacity.\n* @param map the associated MapMakerInternalMap\n* @param initialCapacity initial capacity for the segment\n* @return a new StrongKeyWeakValueSegment instance\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$LinkedStrongKeyWeakValueEntry": {
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$LinkedStrongKeyWeakValueEntry:<init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)": "/**\n* Constructs a LinkedStrongKeyWeakValueEntry with a key, hash, and next entry.\n* @param key the strong key for the entry\n* @param hash the hash code of the key\n* @param next the next entry in the linked list\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$LinkedStrongKeyWeakValueEntry:getNext()": "/**\n* Retrieves the next StrongKeyWeakValueEntry in the sequence.\n* @return the next StrongKeyWeakValueEntry object\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry": {
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry:getValue()": "/**\n* Retrieves the value from the reference.\n* @return the value or null if not present\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry:getValueReference()": "/**\n* Retrieves the weak value reference associated with the entry.\n* @return WeakValueReference object of type K, V\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry:<init>(java.lang.Object,int)": "/**\n* Constructs a StrongKeyWeakValueEntry with a key and its hash.\n* @param key the key associated with the entry\n* @param hash the hash code of the key\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment": {
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)": "/**\n* Casts an InternalEntry to StrongKeyWeakValueEntry for testing.\n* @param entry the InternalEntry to cast, may be null\n* @return the casted StrongKeyWeakValueEntry or null if entry is null\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:maybeDrainReferenceQueues()": "/**\n* Conditionally drains the reference queue for values.\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:maybeClearReferenceQueues()": "/**\n* Conditionally clears the reference queue for values.\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:self()": "/**\n* Returns the current instance of StrongKeyWeakValueSegment.\n* @return this instance of StrongKeyWeakValueSegment\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)": "/**** Creates a WeakValueReference for testing. \n* @param e InternalEntry to cast, may be null \n* @param value the value to be referenced \n* @return WeakValueReferenceImpl instance \n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference)": "/**\n* Sets a weak value reference for testing on a given InternalEntry.\n* @param e the InternalEntry to update\n* @param valueReference the new WeakValueReference to set\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)": "/**\n* Retrieves weak value reference for testing from an InternalEntry.\n* @param e the InternalEntry to cast and retrieve reference from\n* @return WeakValueReference object associated with the entry\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)": "/**\n* Constructs a StrongKeyWeakValueSegment with a specified map and initial capacity.\n* @param map the associated MapMakerInternalMap\n* @param initialCapacity initial capacity for the entry array\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$ValueIterator": {
        "com.google.common.collect.MapMakerInternalMap$ValueIterator:next()": "/**\n* Returns the value of the next entry in the iteration.\n* @return value of the next entry\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$Values": {
        "com.google.common.collect.MapMakerInternalMap$Values:iterator()": "/**\n* Returns an iterator over the values.\n* @return Iterator for the values in the collection\n*/",
        "com.google.common.collect.MapMakerInternalMap$Values:isEmpty()": "/**\n* Checks if the map is empty.\n* @return true if the map has no entries, false otherwise\n*/",
        "com.google.common.collect.MapMakerInternalMap$Values:size()": "/**\n* Returns the total count of segments in the map.\n* @return total count as an int\n*/",
        "com.google.common.collect.MapMakerInternalMap$Values:contains(java.lang.Object)": "/**\n* Checks if the map contains the specified object.\n* @param o the object to check for presence\n* @return true if the object exists, false otherwise\n*/",
        "com.google.common.collect.MapMakerInternalMap$Values:clear()": "/**\n* Clears all segments in the collection.\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper": {
        "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry)": "/**\n* Creates a new WeakKeyDummyValueEntry or LinkedWeakKeyDummyValueEntry.\n* @param segment the segment for the entry\n* @param key the key for the entry\n* @param hash the hash code for the key\n* @param next the next entry in the chain, or null if none\n* @return a new entry instance\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:setValue(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry,com.google.common.collect.MapMaker$Dummy)": "/**\n* Sets the value in the specified segment and entry.\n* @param segment the segment to update\n* @param entry the entry to modify\n* @param value the new value to set\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:instance()": "/**\n* Returns a singleton instance of Helper.\n* @return Helper instance cast to generic type K\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:keyStrength()": "/**\n* Returns the key strength level.\n* @return Strength enum indicating the strength level\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:valueStrength()": "/**\n* Returns the strength value as STRONG.\n* @return Strength enum representing the strength level\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry)": "/**\n* Copies a WeakKeyDummyValueEntry, returning null if the key is collected.\n* @param segment the segment for the entry\n* @param entry the entry to copy\n* @param newNext the next entry in the chain or null\n* @return a copied entry or null if the key is collected\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)": "/**\n* Creates a new WeakKeyDummyValueSegment.\n* @param map associated MapMakerInternalMap\n* @param initialCapacity initial capacity for the segment\n* @return a new WeakKeyDummyValueSegment instance\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$LinkedWeakKeyDummyValueEntry": {
        "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$LinkedWeakKeyDummyValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry)": "/**\n* Constructs a LinkedWeakKeyDummyValueEntry with given parameters.\n* @param queue reference queue for garbage collection\n* @param key the weak key associated with the entry\n* @param hash hash code of the key\n* @param next reference to the next entry in the linked list\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$LinkedWeakKeyDummyValueEntry:getNext()": "/**\n* Returns the next WeakKeyDummyValueEntry in the sequence.\n* @return next WeakKeyDummyValueEntry object\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$LinkedWeakKeyDummyValueEntry:getValue()": "/**\n* Returns the constant Dummy value.\n* @return Dummy constant instance\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry": {
        "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry:getValue()": "/**\n* Retrieves the constant Dummy value.\n* @return Dummy constant instance\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)": "/**\n* Constructs a WeakKeyDummyValueEntry with specified queue, key, and hash.\n* @param queue ReferenceQueue for the weak key\n* @param key Weak key reference\n* @param hash Hash code of the key\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment": {
        "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment:maybeDrainReferenceQueues()": "/**\n* Drains key reference queue if applicable.\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment:maybeClearReferenceQueues()": "/**\n* Conditionally clears the reference queue for keys.\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment:castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)": "/**\n* Casts an InternalEntry to WeakKeyDummyValueEntry for testing purposes.\n* @param entry the InternalEntry to be cast\n* @return casted WeakKeyDummyValueEntry\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment:self()": "/**\n* Returns the current instance of WeakKeyDummyValueSegment.\n* @return the instance of WeakKeyDummyValueSegment\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)": "/**\n* Constructs a WeakKeyDummyValueSegment with a map and initial capacity.\n* @param map associated MapMakerInternalMap\n* @param initialCapacity initial capacity for the entry array\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper": {
        "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry)": "/**\n* Creates a new entry for the weak key-strong value map.\n* @param segment the segment to which the entry belongs\n* @param key the key for the new entry\n* @param hash the hash of the key\n* @param next the next entry in the chain or null\n* @return a new WeakKeyStrongValueEntry or LinkedWeakKeyStrongValueEntry\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:setValue(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry,java.lang.Object)": "/**\n* Sets the value of a given entry in the specified segment.\n* @param segment the segment containing the entry\n* @param entry the entry to update\n* @param value the new value to set\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:instance()": "/**\n* Returns a cached instance of Helper with specified key and value types.\n* @return Helper instance with generic types K and V\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:keyStrength()": "/**\n* Returns the key strength level.\n* @return Strength enum indicating key strength, always WEAK\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:valueStrength()": "/**\n* Returns the strength level as STRONG.\n* @return Strength enum representing strength level\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry)": "/**\n* Copies an entry in the weak key-strong value map.\n* @param segment the segment of the map\n* @param entry the entry to copy\n* @param newNext the next entry or null\n* @return a new WeakKeyStrongValueEntry or null if key is collected\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)": "/**\n* Creates a new segment with specified map and capacity.\n* @param map the associated MapMakerInternalMap\n* @param initialCapacity the initial capacity for the segment\n* @return a new WeakKeyStrongValueSegment instance\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$LinkedWeakKeyStrongValueEntry": {
        "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$LinkedWeakKeyStrongValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry)": "/**\n* Constructs a LinkedWeakKeyStrongValueEntry with specified parameters.\n* @param queue ReferenceQueue for garbage collection\n* @param key weak reference key\n* @param hash hash code of the key\n* @param next next entry in the linked list\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$LinkedWeakKeyStrongValueEntry:getNext()": "/**\n* Retrieves the next WeakKeyStrongValueEntry in the sequence.\n* @return next entry or null if there is none\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment": {
        "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment:maybeDrainReferenceQueues()": "/**\n* Drains the reference queue for keys if necessary.\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment:maybeClearReferenceQueues()": "/**\n* Clears the reference queue for keys if necessary.\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment:castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)": "/**\n* Casts an InternalEntry to WeakKeyStrongValueEntry for testing.\n* @param entry the InternalEntry to cast\n* @return casted WeakKeyStrongValueEntry\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment:self()": "/**\n* Returns the current instance of WeakKeyStrongValueSegment.\n* @return this instance of WeakKeyStrongValueSegment\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)": "/**\n* Constructs a segment with a specified map and initial capacity.\n* @param map associated MapMakerInternalMap\n* @param initialCapacity initial capacity for the entry array\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper": {
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:setValue(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,java.lang.Object)": "/**\n* Sets the value in the specified entry and clears the previous reference.\n* @param segment the segment containing the entry\n* @param entry the entry to update\n* @param value the new value to set\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:instance()": "/**\n* Returns a singleton instance of Helper.\n* @return Helper instance with generic types K and V\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:keyStrength()": "/**\n* Returns the key strength level.\n* @return Strength enum indicating the key strength\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:valueStrength()": "/**\n* Returns the strength level as WEAK.\n* @return Strength enum representing the strength level\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)": "/**\n* Creates a new WeakKeyWeakValueSegment with specified map and capacity.\n* @param map the associated MapMakerInternalMap\n* @param initialCapacity initial capacity for the segment\n* @return a new WeakKeyWeakValueSegment instance\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)": "/**\n* Creates a new WeakKeyWeakValueEntry or LinkedWeakKeyWeakValueEntry.\n* @param segment segment containing the queue for keys\n* @param key weak key reference\n* @param hash hash code of the key\n* @param next next entry in the linked list or null\n* @return newly created WeakKeyWeakValueEntry\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)": "/**\n* Copies a WeakKeyWeakValueEntry if the key is not collected.\n* @param segment the segment containing the entry\n* @param entry the entry to copy\n* @param newNext the next entry or null\n* @return a new WeakKeyWeakValueEntry or null if key is collected\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$LinkedWeakKeyWeakValueEntry": {
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$LinkedWeakKeyWeakValueEntry:getNext()": "/**\n* Retrieves the next WeakKeyWeakValueEntry in the sequence.\n* @return next WeakKeyWeakValueEntry or null if none exists\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$LinkedWeakKeyWeakValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)": "/**\n* Initializes a LinkedWeakKeyWeakValueEntry with a weak key and a reference to the next entry.\n* @param queue ReferenceQueue for weak key references\n* @param key Weak key reference\n* @param hash Hash code of the key\n* @param next Next entry in the linked list\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry": {
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry:getValue()": "/**\n* Retrieves the value from the reference.\n* @return the value of type V, or null if not present\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry:getValueReference()": "/**\n* Retrieves the weak value reference associated with the entry.\n* @return WeakValueReference for the entry\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)": "/**\n* Constructs a WeakKeyWeakValueEntry with a reference queue, key, and hash.\n* @param queue ReferenceQueue for weak key references\n* @param key Weak key reference\n* @param hash Hash code of the key\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment": {
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)": "/**\n* Casts an InternalEntry to WeakKeyWeakValueEntry for testing.\n* @param entry the entry to cast, may be null\n* @return casted WeakKeyWeakValueEntry or null\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:maybeDrainReferenceQueues()": "/**\n* Drains key and value reference queues if necessary.\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:maybeClearReferenceQueues()": "/**\n* Conditionally clears the reference queue for keys.\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:self()": "/**\n* Returns the current instance of WeakKeyWeakValueSegment.\n* @return this instance of WeakKeyWeakValueSegment\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)": "/**\n* Creates a new weak value reference for testing.\n* @param e InternalEntry to cast for reference\n* @param value the value to associate with the reference\n* @return WeakValueReference for the given entry and value\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference)": "/**\n* Sets weak value reference for testing an InternalEntry.\n* @param e entry to update, may be null\n* @param valueReference new weak value reference\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)": "/**\n* Retrieves weak value reference for testing from an InternalEntry.\n* @param e the InternalEntry to cast, may be null\n* @return WeakValueReference for the entry\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)": "/**\n* Initializes a segment with a specified map and initial capacity.\n* @param map the associated MapMakerInternalMap\n* @param initialCapacity initial capacity for the entry array\n*/"
    },
    "com.google.common.collect.Maps$AbstractFilteredMap": {
        "com.google.common.collect.Maps$AbstractFilteredMap:<init>(java.util.Map,com.google.common.base.Predicate)": "/**\n* Constructs AbstractFilteredMap with unfiltered entries and a filtering predicate.\n* @param unfiltered the original map of entries\n* @param predicate the condition to filter entries\n*/",
        "com.google.common.collect.Maps$AbstractFilteredMap:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if the collection has no elements, false otherwise\n*/",
        "com.google.common.collect.Maps$AbstractFilteredMap:apply(java.lang.Object,java.lang.Object)": "/**\n* Applies a predicate to an immutable entry of key and value.\n* @param key the entry key, must be in the map\n* @param value the entry value, can be null\n* @return true if predicate holds; false otherwise\n*/",
        "com.google.common.collect.Maps$AbstractFilteredMap:put(java.lang.Object,java.lang.Object)": "/**\n* Inserts a key-value pair after validation.\n* @param key the key to insert; @param value the value to insert\n* @return previous value associated with the key or null\n*/",
        "com.google.common.collect.Maps$AbstractFilteredMap:putAll(java.util.Map)": "/**\n* Validates and adds all entries from the provided map to the unfiltered map.\n* @param map entries to add, with keys and values of any subtype\n*/",
        "com.google.common.collect.Maps$AbstractFilteredMap:containsKey(java.lang.Object)": "/**\n* Checks if the map contains the key and applies a predicate to its value.\n* @param key the key to check in the map\n* @return true if the key exists and predicate holds; false otherwise\n*/",
        "com.google.common.collect.Maps$AbstractFilteredMap:get(java.lang.Object)": "/**\n* Retrieves value by key if it satisfies the predicate.\n* @param key the key to look up, may be null\n* @return value associated with key or null if not found or predicate fails\n*/",
        "com.google.common.collect.Maps$AbstractFilteredMap:createValues()": "/**\n* Creates a collection of filtered values.\n* @return Collection of filtered values based on the predicate\n*/",
        "com.google.common.collect.Maps$AbstractFilteredMap:remove(java.lang.Object)": "/**\n* Removes the value associated with the key if present.\n* @param key the key to remove\n* @return the removed value or null if not found\n*/"
    },
    "com.google.common.collect.Maps$AsMapView": {
        "com.google.common.collect.Maps$AsMapView:backingSet()": "/**\n* Returns the backing set.\n* @return a Set containing the elements of the backing data structure\n*/",
        "com.google.common.collect.Maps$AsMapView:createEntrySet()": "/**\n* Creates a set of map entries for the current map view.\n* @return Set of map entries\n*/",
        "com.google.common.collect.Maps$AsMapView:<init>(java.util.Set,com.google.common.base.Function)": "/**\n* Constructs AsMapView with a set and a mapping function.\n* @param set non-null set of keys\n* @param function non-null function to map keys to values\n*/",
        "com.google.common.collect.Maps$AsMapView:createKeySet()": "/**\n* Creates a key set from the backing data structure.\n* @return Set of keys derived from the backing set\n*/",
        "com.google.common.collect.Maps$AsMapView:size()": "/**\n* Returns the number of elements in the backing set.\n* @return the size of the backing set\n*/",
        "com.google.common.collect.Maps$AsMapView:containsKey(java.lang.Object)": "/**\n* Checks if the backing set contains the specified key.\n* @param key the key to check for presence\n* @return true if key is in the set, false otherwise\n*/",
        "com.google.common.collect.Maps$AsMapView:remove(java.lang.Object)": "/**\n* Removes a key and returns its mapped value.\n* @param key the key to remove\n* @return the mapped value or null if not found\n*/",
        "com.google.common.collect.Maps$AsMapView:clear()": "/**\n* Clears all elements from the backing set.\n*/",
        "com.google.common.collect.Maps$AsMapView:forEach(java.util.function.BiConsumer)": "/**\n* Applies the given action to each key-value pair in the backing set.\n* @param action a BiConsumer to process each key-value pair\n*/",
        "com.google.common.collect.Maps$AsMapView:getOrDefault(java.lang.Object,java.lang.Object)": "/**\n* Retrieves value by key or returns default if not found.\n* @param key the key to search for\n* @param defaultValue the value to return if key is absent\n* @return the associated value or defaultValue if key is not found\n*/",
        "com.google.common.collect.Maps$AsMapView:createValues()": "/**\n* Creates a collection of transformed values from a set.\n* @return Collection of transformed values based on the specified function\n*/",
        "com.google.common.collect.Maps$AsMapView:get(java.lang.Object)": "/**\n* Retrieves value by key or returns null if not found.\n* @param key the key to search for\n* @return associated value or null if key is absent\n*/"
    },
    "com.google.common.collect.Maps$BiMapConverter": {
        "com.google.common.collect.Maps$BiMapConverter:equals(java.lang.Object)": "/**\n* Checks equality with another BiMapConverter based on bimap content.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Maps$BiMapConverter:hashCode()": "/**\n* Returns the hash code for the bimap object.\n* @return hash code as an integer\n*/",
        "com.google.common.collect.Maps$BiMapConverter:toString()": "/**\n* Returns a string representation of the converter with bimap details.\n* @return String representation of the converter\n*/",
        "com.google.common.collect.Maps$BiMapConverter:convert(com.google.common.collect.BiMap,java.lang.Object)": "/**\n* Converts input to its mapped value in the BiMap.\n* @param bimap mapping of X to Y\n* @param input key to retrieve the corresponding value\n* @return mapped value Y or throws exception if not found\n*/",
        "com.google.common.collect.Maps$BiMapConverter:<init>(com.google.common.collect.BiMap)": "/**\n* Constructs BiMapConverter with a non-null BiMap.\n* @param bimap the BiMap to be converted; must not be null\n*/",
        "com.google.common.collect.Maps$BiMapConverter:doForward(java.lang.Object)": "/**\n* Transforms input A into output B using a BiMap.\n* @param a input value to be converted\n* @return corresponding mapped value B\n*/",
        "com.google.common.collect.Maps$BiMapConverter:doBackward(java.lang.Object)": "/**\n* Converts input B using the inverse of a BiMap and returns the mapped value A.\n* @param b input key to retrieve the corresponding value\n* @return mapped value A from the BiMap\n*/"
    },
    "com.google.common.collect.Maps$DescendingMap": {
        "com.google.common.collect.Maps$DescendingMap:delegate()": "/**\n* Returns the delegated map from the forward method.\n* @return a Map containing key-value pairs\n*/",
        "com.google.common.collect.Maps$DescendingMap:firstKey()": "/**\n* Retrieves the first key from the forward collection.\n* @return the first key of type K\n*/",
        "com.google.common.collect.Maps$DescendingMap:lastKey()": "/**\n* Retrieves the last key from the collection.\n* @return the last key of type K\n*/",
        "com.google.common.collect.Maps$DescendingMap:lowerEntry(java.lang.Object)": "/**\n* Retrieves the entry less than the specified key.\n* @param key the key to compare against\n* @return the lower entry or null if not found\n*/",
        "com.google.common.collect.Maps$DescendingMap:lowerKey(java.lang.Object)": "/**\n* Retrieves the greatest key less than the specified key.\n* @param key the reference key to compare\n* @return the lower key or null if none exists\n*/",
        "com.google.common.collect.Maps$DescendingMap:floorEntry(java.lang.Object)": "/**\n* Retrieves the greatest entry less than or equal to the specified key.\n* @param key the key to compare against\n* @return the floor entry or null if none exists\n*/",
        "com.google.common.collect.Maps$DescendingMap:floorKey(java.lang.Object)": "/**\n* Retrieves the greatest key less than or equal to the specified key.\n* @param key the key to compare\n* @return the floor key or null if not present\n*/",
        "com.google.common.collect.Maps$DescendingMap:ceilingEntry(java.lang.Object)": "/**\n* Retrieves the least entry greater than or equal to the specified key.\n* @param key the key to compare against\n* @return Entry object or null if no such entry exists\n*/",
        "com.google.common.collect.Maps$DescendingMap:ceilingKey(java.lang.Object)": "/**\n* Retrieves the least key greater than or equal to the specified key.\n* @param key the key to compare\n* @return the ceiling key or null if none exists\n*/",
        "com.google.common.collect.Maps$DescendingMap:higherEntry(java.lang.Object)": "/**\n* Retrieves the entry greater than the specified key.\n* @param key the key to compare with\n* @return Entry object or null if no greater entry exists\n*/",
        "com.google.common.collect.Maps$DescendingMap:higherKey(java.lang.Object)": "/**\n* Retrieves the highest key less than the specified key.\n* @param key the key to compare against\n* @return the highest key less than key or null if none exists\n*/",
        "com.google.common.collect.Maps$DescendingMap:firstEntry()": "/**\n* Retrieves the first entry in the collection.\n* @return Entry object or null if the collection is empty\n*/",
        "com.google.common.collect.Maps$DescendingMap:lastEntry()": "/**\n* Retrieves the last entry in the map.\n* @return Entry containing key-value pair or null if map is empty\n*/",
        "com.google.common.collect.Maps$DescendingMap:pollFirstEntry()": "/**\n* Retrieves and removes the first entry in the map.\n* @return Entry containing key-value pair or null if empty\n*/",
        "com.google.common.collect.Maps$DescendingMap:pollLastEntry()": "/**\n* Retrieves and removes the last entry in the map.\n* @return Entry with key-value pair or null if empty\n*/",
        "com.google.common.collect.Maps$DescendingMap:descendingMap()": "/**\n* Returns a view of the map in descending order.\n* @return NavigableMap with entries in descending order\n*/",
        "com.google.common.collect.Maps$DescendingMap:createEntrySet()": "/**\n* Creates a set of entries for the map.\n* @return a Set of map entries\n*/",
        "com.google.common.collect.Maps$DescendingMap:descendingKeySet()": "/**\n* Returns a NavigableSet of keys in descending order.\n* @return NavigableSet of keys sorted in descending order\n*/",
        "com.google.common.collect.Maps$DescendingMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a reversed view of the subMap between specified keys.\n* @param fromKey starting key for the subMap\n* @param fromInclusive true if fromKey is included\n* @param toKey ending key for the subMap\n* @param toInclusive true if toKey is included\n* @return NavigableMap view of the specified range in reverse order\n*/",
        "com.google.common.collect.Maps$DescendingMap:headMap(java.lang.Object,boolean)": "/**\n* Returns a view of the portion of this map whose keys are less than (or equal to) toKey.\n* @param toKey the upper key for the head map\n* @param inclusive true for inclusive upper bound, false otherwise\n* @return NavigableMap view of the specified range\n*/",
        "com.google.common.collect.Maps$DescendingMap:tailMap(java.lang.Object,boolean)": "/**\n* Returns a view of the portion of the map from a key onwards.\n* @param fromKey starting key for the tailMap\n* @param inclusive true to include fromKey, false to exclude it\n* @return NavigableMap view from fromKey to the end\n*/",
        "com.google.common.collect.Maps$DescendingMap:toString()": "/**\n* Returns the string representation of the object.\n* @return a string describing the object\n*/",
        "com.google.common.collect.Maps$DescendingMap:entrySet()": "/**\n* Returns a set of map entries, creating it if not already initialized.\n* @return Set of map entries\n*/",
        "com.google.common.collect.Maps$DescendingMap:subMap(java.lang.Object,java.lang.Object)": "/**\n* Returns a view of the subMap between specified keys.\n* @param fromKey starting key (inclusive)\n* @param toKey ending key (exclusive)\n* @return SortedMap view of the specified range\n*/",
        "com.google.common.collect.Maps$DescendingMap:headMap(java.lang.Object)": "/**\n* Returns a view of the map with keys less than toKey.\n* @param toKey the upper key for the head map\n* @return SortedMap view of the specified range\n*/",
        "com.google.common.collect.Maps$DescendingMap:tailMap(java.lang.Object)": "/**\n* Returns a view of the map from the specified key onwards.\n* @param fromKey starting key for the tailMap\n* @return SortedMap view from fromKey to the end\n*/",
        "com.google.common.collect.Maps$DescendingMap:values()": "/**\n* Returns a collection of values from the current object.\n* @return Collection of values\n*/",
        "com.google.common.collect.Maps$DescendingMap:reverse(java.util.Comparator)": "/**\n* Reverses the ordering based on the provided comparator.\n* @param forward the comparator to reverse\n* @return Ordering object representing the reversed order\n*/",
        "com.google.common.collect.Maps$DescendingMap:navigableKeySet()": "/**\n* Returns the NavigableKeySet of the current instance.\n* @return NavigableSet of keys, initializes if null\n*/",
        "com.google.common.collect.Maps$DescendingMap:comparator()": "/**\n* Retrieves the comparator, reversing it if not already set.\n* @return Comparator for key type K\n*/",
        "com.google.common.collect.Maps$DescendingMap:keySet()": "/**\n* Returns the set of keys in the current instance.\n* @return Set of keys obtained from navigableKeySet()\n*/"
    },
    "com.google.common.collect.Maps$EntrySet": {
        "com.google.common.collect.Maps$EntrySet:size()": "/**\n* Returns the number of elements in the map.\n* @return the size of the map as an integer\n*/",
        "com.google.common.collect.Maps$EntrySet:clear()": "/**\n* Clears all entries from the underlying map.\n*/",
        "com.google.common.collect.Maps$EntrySet:isEmpty()": "/**\n* Checks if the underlying map is empty.\n* @return true if the map is empty, false otherwise\n*/",
        "com.google.common.collect.Maps$EntrySet:contains(java.lang.Object)": "/**\n* Checks if the map contains the specified entry.\n* @param o entry to check for; must be an instance of Entry\n* @return true if the entry exists, false otherwise\n*/",
        "com.google.common.collect.Maps$EntrySet:remove(java.lang.Object)": "/**\n* Removes the specified entry if present in the map.\n* @param o entry to remove; must be an instance of Entry\n* @return true if removed, false otherwise\n*/",
        "com.google.common.collect.Maps$EntrySet:retainAll(java.util.Collection)": "/**\n* Retains only elements in this collection that are also in the specified collection.\n* @param c collection to retain elements from\n* @return true if this collection was modified\n*/",
        "com.google.common.collect.Maps$EntrySet:removeAll(java.util.Collection)": "/**\n* Removes all elements in the specified collection from this set.\n* @param c collection of elements to remove\n* @return true if any elements were removed, false otherwise\n*/"
    },
    "com.google.common.collect.Maps$FilteredEntryBiMap": {
        "com.google.common.collect.Maps$FilteredEntryBiMap:inversePredicate(com.google.common.base.Predicate)": "/**\n* Creates an inverse predicate from a given forward predicate.\n* @param forwardPredicate original predicate to invert\n* @return Predicate that applies the inverse logic\n*/",
        "com.google.common.collect.Maps$FilteredEntryBiMap:unfiltered()": "/**\n* Returns the unfiltered BiMap.\n* @return unfiltered BiMap instance\n*/",
        "com.google.common.collect.Maps$FilteredEntryBiMap:values()": "/**\n* Returns a set of keys from the inverse map.\n* @return Set of keys from the inverse map\n*/",
        "com.google.common.collect.Maps$FilteredEntryBiMap:inverse()": "/**\n* Returns the inverse BiMap of the current map.\n* @return BiMap with keys and values swapped\n*/",
        "com.google.common.collect.Maps$FilteredEntryBiMap:forcePut(java.lang.Object,java.lang.Object)": "/**\n* Puts a key-value pair after validation.\n* @param key the key to insert, @param value the value to associate\n* @return the previous value or null if none existed\n*/",
        "com.google.common.collect.Maps$FilteredEntryBiMap:replaceAll(java.util.function.BiFunction)": "/**\n* Replaces all entries in the map based on a given function and a predicate.\n* @param function mapping function for key-value pairs\n*/",
        "com.google.common.collect.Maps$FilteredEntryBiMap:<init>(com.google.common.collect.BiMap,com.google.common.base.Predicate,com.google.common.collect.BiMap)": "/**\n* Constructs a filtered entry bi-map with a delegate and inverse mapping.\n* @param delegate the original bi-map\n* @param predicate the condition to filter entries\n* @param inverse the inverse bi-map for reverse lookups\n*/",
        "com.google.common.collect.Maps$FilteredEntryBiMap:<init>(com.google.common.collect.BiMap,com.google.common.base.Predicate)": "/**** Constructs a filtered entry bi-map with delegate and filtering predicate. \n* @param delegate original bi-map \n* @param predicate condition to filter entries */"
    },
    "com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1": {
        "com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1:delegate()": "/**\n* Returns the filtered entry set of key-value pairs.\n* @return Set of filtered entries\n*/",
        "com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1:setValue(java.lang.Object)": "/**\n* Sets a value and returns the previous one.\n* @param value new value to set\n* @return previous value of type V\n*/"
    },
    "com.google.common.collect.Maps$FilteredEntryMap$EntrySet": {
        "com.google.common.collect.Maps$FilteredEntryMap$EntrySet:iterator()": "/**\n* Returns an iterator over transformed entries of the filtered entry set.\n* @return Iterator of map entries with transformed values\n*/",
        "com.google.common.collect.Maps$FilteredEntryMap$EntrySet:delegate()": "/**\n* Returns the filtered entry set.\n* @return Set of key-value pairs in the filtered entry set\n*/"
    },
    "com.google.common.collect.Maps$FilteredEntryMap$KeySet": {
        "com.google.common.collect.Maps$FilteredEntryMap$KeySet:remove(java.lang.Object)": "/**\n* Removes the specified object if present.\n* @param o object to be removed\n* @return true if the object was removed, false otherwise\n*/",
        "com.google.common.collect.Maps$FilteredEntryMap$KeySet:removeAll(java.util.Collection)": "/**\n* Removes entries from the unfiltered map based on the predicate and provided collection.\n* @param collection keys to check for removal\n* @return true if any entries were removed, false otherwise\n*/",
        "com.google.common.collect.Maps$FilteredEntryMap$KeySet:retainAll(java.util.Collection)": "/**\n* Retains elements in the collection based on a key predicate.\n* @param collection collection of elements to retain\n* @return true if any elements were removed\n*/",
        "com.google.common.collect.Maps$FilteredEntryMap$KeySet:toArray()": "/**\n* Converts the iterator elements to an array.\n* @return Array of elements from the iterator\n*/",
        "com.google.common.collect.Maps$FilteredEntryMap$KeySet:toArray(java.lang.Object[])": "/**\n* Converts iterator elements to an array.\n* @param array the array to fill with elements\n* @return an array containing the elements\n*/"
    },
    "com.google.common.collect.Maps$FilteredEntryMap": {
        "com.google.common.collect.Maps$FilteredEntryMap:removeAllKeys(java.util.Map,com.google.common.base.Predicate,java.util.Collection)": "/**\n* Removes entries from the map based on a predicate and key collection.\n* @param map the map to modify\n* @param entryPredicate condition for entry removal\n* @param keyCollection keys to check for removal\n* @return true if any entries were removed, false otherwise\n*/",
        "com.google.common.collect.Maps$FilteredEntryMap:retainAllKeys(java.util.Map,com.google.common.base.Predicate,java.util.Collection)": "/**\n* Removes entries from the map based on a key predicate and key collection.\n* @param map the map to modify\n* @param entryPredicate condition for retaining entries\n* @param keyCollection collection of keys to check against\n* @return true if any entries were removed\n*/",
        "com.google.common.collect.Maps$FilteredEntryMap:createEntrySet()": "/**\n* Creates a set of entries for the map.\n* @return a Set of map entries\n*/",
        "com.google.common.collect.Maps$FilteredEntryMap:createKeySet()": "/**\n* Creates a new set of keys.\n* @return a Set containing the keys\n*/",
        "com.google.common.collect.Maps$FilteredEntryMap:<init>(java.util.Map,com.google.common.base.Predicate)": "/**\n* Constructs a filtered entry map from the given unfiltered map and predicate.\n* @param unfiltered the original map of entries\n* @param entryPredicate the condition to filter entries\n*/"
    },
    "com.google.common.collect.Maps$FilteredEntryNavigableMap": {
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:comparator()": "/**\n* Returns the comparator for the unfiltered collection.\n* @return Comparator for keys or null if none exists\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:navigableKeySet()": "/**\n* Returns a NavigableSet of keys with custom removeAll and retainAll behavior.\n* @return NavigableSet of keys\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:size()": "/**\n* Returns the number of elements in the filtered collection.\n* @return size of the filtered collection as an integer\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:get(java.lang.Object)": "/**\n* Retrieves value associated with the given key.\n* @param key the key to look up, may be null\n* @return value associated with key or null if not found\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:containsKey(java.lang.Object)": "/**\n* Checks if the specified key exists in the delegate.\n* @param key the key to check for presence\n* @return true if the key is found, false otherwise\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:put(java.lang.Object,java.lang.Object)": "/**\n* Inserts a key-value pair into the map.\n* @param key the key to insert\n* @param value the value to associate with the key\n* @return previous value associated with key or null if none\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:remove(java.lang.Object)": "/**\n* Removes the value associated with the specified key.\n* @param key the key to remove the associated value\n* @return the removed value or null if not found\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:putAll(java.util.Map)": "/**\n* Inserts all mappings from the specified map into the filteredDelegate.\n* @param m the map containing mappings to insert\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:clear()": "/**\n* Clears the contents of the filtered delegate.\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:entrySet()": "/**\n* Returns a set of entries from the filtered delegate.\n* @return Set of key-value pairs from the delegate\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:pollFirstEntry()": "/**\n* Retrieves and removes the first matching entry from the map.\n* @return Entry object or null if no match found\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:pollLastEntry()": "/**\n* Retrieves and removes the last entry from the map.\n* @return Entry<K, V> or null if no matching entry exists\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:entryIterator()": "/**\n* Returns an iterator of filtered map entries based on a predicate.\n* @return Iterator of retained map entries\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:descendingEntryIterator()": "/**\n* Returns an iterator for entries in descending order filtered by a predicate.\n* @return Iterator of filtered entries\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:values()": "/**\n* Returns a collection of values filtered by the entryPredicate.\n* @return Collection of filtered values from the unfiltered map\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:isEmpty()": "/**\n* Checks if the collection is empty based on a predicate.\n* @return true if no entries match the predicate, false otherwise\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:<init>(java.util.NavigableMap,com.google.common.base.Predicate)": "/**** Constructs a filtered entry navigable map from an unfiltered map and a predicate. \n* @param unfiltered the original navigable map \n* @param entryPredicate the condition to filter entries \n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:descendingMap()": "/**\n* Returns a descending view of the filtered entries.\n* @return NavigableMap containing filtered entries in descending order\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a filtered subMap based on keys and inclusion criteria.\n* @param fromKey starting key, inclusive if fromInclusive is true\n* @param toKey ending key, inclusive if toInclusive is true\n* @return filtered NavigableMap of entries between fromKey and toKey\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:headMap(java.lang.Object,boolean)": "/**\n* Returns a filtered headMap up to a specified key.\n* @param toKey the key up to which entries are returned\n* @param inclusive whether to include the toKey entry\n* @return filtered NavigableMap based on the entryPredicate\n*/",
        "com.google.common.collect.Maps$FilteredEntryNavigableMap:tailMap(java.lang.Object,boolean)": "/**\n* Returns a tail map starting from a key.\n* @param fromKey the key to start the tail map from\n* @param inclusive true if the key is included in the tail map\n* @return filtered NavigableMap based on the entry predicate\n*/"
    },
    "com.google.common.collect.Maps$FilteredEntrySortedMap": {
        "com.google.common.collect.Maps$FilteredEntrySortedMap:sortedMap()": "/**\n* Returns the unfiltered map as a SortedMap.\n* @return SortedMap view of the unfiltered map\n*/",
        "com.google.common.collect.Maps$FilteredEntrySortedMap:keySet()": "/**\n* Returns a sorted set of keys from the map.\n* @return SortedSet of keys in natural order\n*/",
        "com.google.common.collect.Maps$FilteredEntrySortedMap:createKeySet()": "/**\n* Creates a new sorted set of keys.\n* @return SortedSet containing the keys\n*/",
        "com.google.common.collect.Maps$FilteredEntrySortedMap:comparator()": "/**\n* Retrieves the comparator for the sorted map.\n* @return Comparator for the map, or null if none exists\n*/",
        "com.google.common.collect.Maps$FilteredEntrySortedMap:lastKey()": "/**\n* Retrieves the last valid key from the sorted map.\n* @return last key or throws NoSuchElementException if empty\n*/",
        "com.google.common.collect.Maps$FilteredEntrySortedMap:firstKey()": "/**\n* Retrieves the first key from the map.\n* @return first key or throws NoSuchElementException if empty\n*/",
        "com.google.common.collect.Maps$FilteredEntrySortedMap:<init>(java.util.SortedMap,com.google.common.base.Predicate)": "/**\n* Constructs a filtered entry sorted map from the given unfiltered map and predicate.\n* @param unfiltered the original sorted map of entries\n* @param entryPredicate the condition to filter entries\n*/",
        "com.google.common.collect.Maps$FilteredEntrySortedMap:headMap(java.lang.Object)": "/**\n* Returns a view of the portion of the map before the specified key.\n* @param toKey the key before which to return the map view\n* @return SortedMap containing entries before toKey\n*/",
        "com.google.common.collect.Maps$FilteredEntrySortedMap:subMap(java.lang.Object,java.lang.Object)": "/**\n* Returns a view of the portion of this map between fromKey and toKey.\n* @param fromKey the starting key (inclusive)\n* @param toKey the ending key (exclusive)\n* @return SortedMap of the specified range\n*/",
        "com.google.common.collect.Maps$FilteredEntrySortedMap:tailMap(java.lang.Object)": "/**\n* Returns a view of the portion of the map from the specified key.\n* @param fromKey the key to start the view from\n* @return SortedMap view starting from fromKey\n*/"
    },
    "com.google.common.collect.Maps$FilteredKeyMap": {
        "com.google.common.collect.Maps$FilteredKeyMap:containsKey(java.lang.Object)": "/**\n* Checks if the map contains the specified key satisfying the key predicate.\n* @param key the key to check for presence\n* @return true if the key exists and matches the predicate, false otherwise\n*/",
        "com.google.common.collect.Maps$FilteredKeyMap:<init>(java.util.Map,com.google.common.base.Predicate,com.google.common.base.Predicate)": "/**\n* Constructs FilteredKeyMap with filtering predicates for keys and entries.\n* @param unfiltered original map of entries\n* @param keyPredicate condition to filter keys\n* @param entryPredicate condition to filter entries\n*/",
        "com.google.common.collect.Maps$FilteredKeyMap:createEntrySet()": "/**\n* Creates a filtered entry set based on a predicate.\n* @return a filtered set of entries from the unfiltered map\n*/",
        "com.google.common.collect.Maps$FilteredKeyMap:createKeySet()": "/**\n* Creates a filtered set of keys based on a predicate.\n* @return a set of keys that match the predicate\n*/"
    },
    "com.google.common.collect.Maps$FilteredMapValues": {
        "com.google.common.collect.Maps$FilteredMapValues:removeAll(java.util.Collection)": "/**\n* Removes entries matching predicate and values in the given collection.\n* @param collection values to be removed\n* @return true if any entries were removed, otherwise false\n*/",
        "com.google.common.collect.Maps$FilteredMapValues:retainAll(java.util.Collection)": "/**\n* Retains elements matching the predicate from the collection.\n* @param collection elements to retain\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.Maps$FilteredMapValues:remove(java.lang.Object)": "/**\n* Removes an entry matching the value and predicate from the collection.\n* @param o value to remove\n* @return true if removed, false otherwise\n*/",
        "com.google.common.collect.Maps$FilteredMapValues:<init>(java.util.Map,java.util.Map,com.google.common.base.Predicate)": "/**\n* Constructs FilteredMapValues with a filtered and unfiltered map plus a predicate.\n* @param filteredMap filtered key-value pairs\n* @param unfiltered original key-value pairs\n* @param predicate condition to filter entries\n*/",
        "com.google.common.collect.Maps$FilteredMapValues:toArray()": "/**\n* Converts the collection to an array, filtering elements once.\n* @return array of objects from the collection\n*/",
        "com.google.common.collect.Maps$FilteredMapValues:toArray(java.lang.Object[])": "/**\n* Converts iterator elements to an array.\n* @param array target array for storing elements\n* @return array populated with iterator elements\n*/"
    },
    "com.google.common.collect.Maps$KeySet": {
        "com.google.common.collect.Maps$KeySet:map()": "/**\n* Returns the map instance.\n* @return the current Map<K, V> object\n*/",
        "com.google.common.collect.Maps$KeySet:<init>(java.util.Map)": "/**\n* Initializes KeySet with a non-null map.\n* @param map the map to associate with this KeySet\n*/",
        "com.google.common.collect.Maps$KeySet:forEach(java.util.function.Consumer)": "/**\n* Iterates over map keys, applying the provided action.\n* @param action the operation to apply to each key\n*/",
        "com.google.common.collect.Maps$KeySet:iterator()": "/**\n* Returns an iterator for the keys in the map.\n* @return Iterator of keys from the map entries\n*/",
        "com.google.common.collect.Maps$KeySet:size()": "/**\n* Returns the number of elements in the map.\n* @return size of the map as an integer\n*/",
        "com.google.common.collect.Maps$KeySet:isEmpty()": "/**\n* Checks if the map is empty.\n* @return true if the map has no entries, false otherwise\n*/",
        "com.google.common.collect.Maps$KeySet:contains(java.lang.Object)": "/**\n* Checks if the map contains the specified key.\n* @param o key to check for presence in the map\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.Maps$KeySet:clear()": "/**\n* Clears all entries from the map.\n* @return void\n*/",
        "com.google.common.collect.Maps$KeySet:remove(java.lang.Object)": "/**\n* Removes the specified object if present in the collection.\n* @param o object to remove\n* @return true if removed, false if not found\n*/"
    },
    "com.google.common.collect.Maps$MapDifferenceImpl": {
        "com.google.common.collect.Maps$MapDifferenceImpl:<init>(java.util.Map,java.util.Map,java.util.Map,java.util.Map)": "/**\n* Constructs a MapDifferenceImpl with specified map differences.\n* @param onlyOnLeft entries unique to the left map\n* @param onlyOnRight entries unique to the right map\n* @param onBoth entries present in both maps\n* @param differences differing entries in both maps\n*/",
        "com.google.common.collect.Maps$MapDifferenceImpl:areEqual()": "/**\n* Checks if there are no differences between two sets.\n* @return true if both sets are empty, false otherwise\n*/",
        "com.google.common.collect.Maps$MapDifferenceImpl:entriesOnlyOnLeft()": "/**\n* Returns a map of entries that exist only on the left.\n* @return Map containing left-only entries\n*/",
        "com.google.common.collect.Maps$MapDifferenceImpl:entriesOnlyOnRight()": "/**\n* Returns a map of entries that exist only on the right side.\n* @return Map containing entries unique to the right side\n*/",
        "com.google.common.collect.Maps$MapDifferenceImpl:entriesInCommon()": "/**\n* Returns a map of entries common to both collections.\n* @return Map containing common key-value pairs\n*/",
        "com.google.common.collect.Maps$MapDifferenceImpl:entriesDiffering()": "/**\n* Returns a map of differing entries.\n* @return Map of key-value differences between entries\n*/",
        "com.google.common.collect.Maps$MapDifferenceImpl:toString()": "/**\n* Returns a string representation of equality status and differences.\n* @return \"equal\" or details of differences if not equal\n*/",
        "com.google.common.collect.Maps$MapDifferenceImpl:equals(java.lang.Object)": "/**\n* Compares this MapDifference with another for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Maps$MapDifferenceImpl:hashCode()": "/**\n* Computes hash code based on collection entry differences.\n* @return computed hash code as an integer\n*/"
    },
    "com.google.common.collect.Maps$NavigableAsMapView": {
        "com.google.common.collect.Maps$NavigableAsMapView:comparator()": "/**\n* Returns the comparator for the underlying set.\n* @return Comparator for the set or null if not defined\n*/",
        "com.google.common.collect.Maps$NavigableAsMapView:clear()": "/**\n* Clears all elements from the set.\n*/",
        "com.google.common.collect.Maps$NavigableAsMapView:forEach(java.util.function.BiConsumer)": "/**\n* Applies the given action to each key-value pair in the set.\n* @param action a BiConsumer to process each key and its corresponding value\n*/",
        "com.google.common.collect.Maps$NavigableAsMapView:navigableKeySet()": "/**\n* Returns a navigable set of keys from the underlying set.\n* @return NavigableSet of keys\n*/",
        "com.google.common.collect.Maps$NavigableAsMapView:size()": "/**\n* Returns the number of elements in the set.\n* @return the size of the set as an integer\n*/",
        "com.google.common.collect.Maps$NavigableAsMapView:<init>(java.util.NavigableSet,com.google.common.base.Function)": "/**\n* Initializes a NavigableAsMapView with a set and a value function.\n* @param ks a NavigableSet of keys\n* @param vFunction a function to map keys to values\n*/",
        "com.google.common.collect.Maps$NavigableAsMapView:entryIterator()": "/**\n* Returns an iterator of map entries from a set using a transformation function.\n* @return Iterator of Entry objects (key-value pairs)\n*/",
        "com.google.common.collect.Maps$NavigableAsMapView:entrySpliterator()": "/**\n* Creates a Spliterator for map entries from a set.\n* @return Spliterator of Entry<K, V> with mapped values\n*/",
        "com.google.common.collect.Maps$NavigableAsMapView:getOrDefault(java.lang.Object,java.lang.Object)": "/**\n* Retrieves value by key or returns default if not found.\n* @param key the key to lookup\n* @param defaultValue the value to return if key is absent\n* @return corresponding value or defaultValue\n*/",
        "com.google.common.collect.Maps$NavigableAsMapView:get(java.lang.Object)": "/**\n* Retrieves value by key or returns null if not found.\n* @param key the key to lookup\n* @return corresponding value or null if absent\n*/",
        "com.google.common.collect.Maps$NavigableAsMapView:subMap(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a view of the portion of the map between the specified keys.\n* @param fromKey starting key, inclusive or exclusive based on fromInclusive\n* @param fromInclusive true if fromKey is inclusive\n* @param toKey ending key, inclusive or exclusive based on toInclusive\n* @param toInclusive true if toKey is inclusive\n* @return NavigableMap view of the specified range\n*/",
        "com.google.common.collect.Maps$NavigableAsMapView:headMap(java.lang.Object,boolean)": "/**\n* Returns a NavigableMap for keys less than or equal to toKey.\n* @param toKey the upper key limit\n* @param inclusive true if toKey is included in the map\n* @return NavigableMap view of the head set\n*/",
        "com.google.common.collect.Maps$NavigableAsMapView:tailMap(java.lang.Object,boolean)": "/**\n* Returns a view of the portion of this map whose keys are greater than or equal to fromKey.\n* @param fromKey the key to start the view from\n* @param inclusive true if the fromKey should be included\n* @return NavigableMap view of the tail portion of the map\n*/",
        "com.google.common.collect.Maps$NavigableAsMapView:descendingMap()": "/**\n* Returns a NavigableMap view of the descending set of keys.\n* @return NavigableMap with keys in descending order\n*/",
        "com.google.common.collect.Maps$NavigableAsMapView:descendingEntryIterator()": "/**\n* Returns an iterator over the entries in descending order.\n* @return Iterator of key-value entries in descending order\n*/"
    },
    "com.google.common.collect.Maps$NavigableKeySet": {
        "com.google.common.collect.Maps$NavigableKeySet:map()": "/**\n* Returns the underlying NavigableMap.\n* @return NavigableMap instance containing key-value pairs\n*/",
        "com.google.common.collect.Maps$NavigableKeySet:lower(java.lang.Object)": "/**\n* Retrieves the greatest key less than the specified key.\n* @param e the key to compare against\n* @return the lower key or null if none exists\n*/",
        "com.google.common.collect.Maps$NavigableKeySet:floor(java.lang.Object)": "/**\n* Retrieves the greatest key less than or equal to the given key.\n* @param e the key to compare\n* @return the floor key or null if not found\n*/",
        "com.google.common.collect.Maps$NavigableKeySet:ceiling(java.lang.Object)": "/**\n* Retrieves the least key greater than or equal to the given key.\n* @param e the key to compare\n* @return the ceiling key or null if none exists\n*/",
        "com.google.common.collect.Maps$NavigableKeySet:higher(java.lang.Object)": "/**\n* Retrieves the least key greater than the given key.\n* @param e the key to compare\n* @return the higher key or null if none exists\n*/",
        "com.google.common.collect.Maps$NavigableKeySet:pollFirst()": "/**\n* Retrieves and removes the first key from the map.\n* @return the first key or null if the map is empty\n*/",
        "com.google.common.collect.Maps$NavigableKeySet:pollLast()": "/**\n* Retrieves and removes the last key from the map.\n* @return the last key or null if the map is empty\n*/",
        "com.google.common.collect.Maps$NavigableKeySet:descendingSet()": "/**\n* Returns a NavigableSet of keys in descending order.\n* @return NavigableSet of keys from the underlying map\n*/",
        "com.google.common.collect.Maps$NavigableKeySet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a subset of keys within specified range from a NavigableMap.\n* @param fromElement starting key, inclusive if fromInclusive is true\n* @param toElement ending key, inclusive if toInclusive is true\n* @return NavigableSet of keys in the specified range\n*/",
        "com.google.common.collect.Maps$NavigableKeySet:headSet(java.lang.Object,boolean)": "/**\n* Retrieves a view of the portion of the set up to a specified element.\n* @param toElement the upper bound element\n* @param inclusive true if the upper bound is included\n* @return NavigableSet containing keys up to the specified element\n*/",
        "com.google.common.collect.Maps$NavigableKeySet:tailSet(java.lang.Object,boolean)": "/**\n* Returns a NavigableSet of keys greater than or equal to fromElement.\n* @param fromElement the key to start the tail set from\n* @param inclusive true if the set includes fromElement\n* @return NavigableSet of keys from the specified element\n*/",
        "com.google.common.collect.Maps$NavigableKeySet:descendingIterator()": "/**\n* Returns an iterator over keys in descending order.\n* @return Iterator for keys from the descending set\n*/",
        "com.google.common.collect.Maps$NavigableKeySet:subSet(java.lang.Object,java.lang.Object)": "/**\n* Returns a view of the portion of this set between fromElement and toElement.\n* @param fromElement starting key, inclusive\n* @param toElement ending key, exclusive\n* @return SortedSet of keys in the specified range\n*/",
        "com.google.common.collect.Maps$NavigableKeySet:headSet(java.lang.Object)": "/**\n* Retrieves a view of the set up to the specified element, excluding it.\n* @param toElement the upper bound element\n* @return SortedSet containing keys up to the specified element\n*/",
        "com.google.common.collect.Maps$NavigableKeySet:tailSet(java.lang.Object)": "/**\n* Returns a sorted set of keys greater than or equal to fromElement.\n* @param fromElement the key to start the tail set from\n* @return NavigableSet of keys from the specified element\n*/",
        "com.google.common.collect.Maps$NavigableKeySet:<init>(java.util.NavigableMap)": "/**\n* Constructs a NavigableKeySet from the provided NavigableMap.\n* @param map the NavigableMap to associate with this NavigableKeySet\n*/"
    },
    "com.google.common.collect.Maps$TransformedEntriesMap": {
        "com.google.common.collect.Maps$TransformedEntriesMap:size()": "/**\n* Returns the number of entries in the map.\n* @return size of the map as an integer\n*/",
        "com.google.common.collect.Maps$TransformedEntriesMap:containsKey(java.lang.Object)": "/**\n* Checks if the map contains the specified key.\n* @param key the key to check for presence\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.Maps$TransformedEntriesMap:clear()": "/**\n* Clears all entries from the fromMap.\n*/",
        "com.google.common.collect.Maps$TransformedEntriesMap:keySet()": "/**\n* Returns a set of keys from the underlying map.\n* @return Set of keys contained in the map\n*/",
        "com.google.common.collect.Maps$TransformedEntriesMap:<init>(java.util.Map,com.google.common.collect.Maps$EntryTransformer)": "/**\n* Constructs TransformedEntriesMap with a source map and a transformer.\n* @param fromMap source map to transform entries from\n* @param transformer function to transform entries\n*/",
        "com.google.common.collect.Maps$TransformedEntriesMap:forEach(java.util.function.BiConsumer)": "/**\n* Applies the given action to each entry in the map after transformation.\n* @param action the action to apply on each key-value pair\n*/",
        "com.google.common.collect.Maps$TransformedEntriesMap:getOrDefault(java.lang.Object,java.lang.Object)": "/**\n* Retrieves value by key or returns default if absent.\n* @param key the key to look up; @param defaultValue fallback value if key is missing\n* @return the found value or defaultValue if not present\n*/",
        "com.google.common.collect.Maps$TransformedEntriesMap:remove(java.lang.Object)": "/**\n* Removes entry by key and transforms it.\n* @param key the key of the entry to remove\n* @return transformed value or null if not found\n*/",
        "com.google.common.collect.Maps$TransformedEntriesMap:values()": "/**\n* Returns a collection of values from the current object.\n* @return Collection of V2 type values\n*/",
        "com.google.common.collect.Maps$TransformedEntriesMap:entryIterator()": "/**\n* Returns an iterator of transformed map entries.\n* @return Iterator of Entry<K, V2> after applying the transformation\n*/",
        "com.google.common.collect.Maps$TransformedEntriesMap:entrySpliterator()": "/**\n* Creates a Spliterator for transformed map entries.\n* @return a Spliterator of transformed Entry<K, V2>\n*/",
        "com.google.common.collect.Maps$TransformedEntriesMap:get(java.lang.Object)": "/**\n* Retrieves value by key or returns null if absent.\n* @param key the key to look up\n* @return value associated with key or null if not found\n*/"
    },
    "com.google.common.collect.Maps$TransformedEntriesSortedMap": {
        "com.google.common.collect.Maps$TransformedEntriesSortedMap:fromMap()": "/**\n* Returns a sorted map from the existing data structure.\n* @return SortedMap containing key-value pairs\n*/",
        "com.google.common.collect.Maps$TransformedEntriesSortedMap:comparator()": "/**\n* Retrieves the comparator for the sorted map.\n* @return Comparator for keys or null if not available\n*/",
        "com.google.common.collect.Maps$TransformedEntriesSortedMap:firstKey()": "/**\n* Retrieves the first key from the sorted map.\n* @return First key of type K from the map\n*/",
        "com.google.common.collect.Maps$TransformedEntriesSortedMap:lastKey()": "/**\n* Retrieves the last key from the sorted map.\n* @return Last key of the map or null if empty\n*/",
        "com.google.common.collect.Maps$TransformedEntriesSortedMap:<init>(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)": "/**\n* Constructs TransformedEntriesSortedMap with a source sorted map and a transformer.\n* @param fromMap source sorted map to transform entries from\n* @param transformer function to transform entries\n*/",
        "com.google.common.collect.Maps$TransformedEntriesSortedMap:headMap(java.lang.Object)": "/**\n* Returns a sorted map of entries before the specified key.\n* @param toKey the upper key bound, exclusive\n* @return SortedMap containing entries before toKey\n*/",
        "com.google.common.collect.Maps$TransformedEntriesSortedMap:subMap(java.lang.Object,java.lang.Object)": "/**\n* Returns a submap view of the specified range.\n* @param fromKey starting key (inclusive)\n* @param toKey ending key (exclusive)\n* @return SortedMap of the specified range\n*/",
        "com.google.common.collect.Maps$TransformedEntriesSortedMap:tailMap(java.lang.Object)": "/**\n* Returns a tail map starting from the specified key.\n* @param fromKey the key from which the tail map starts\n* @return SortedMap containing entries from fromKey onward\n*/"
    },
    "com.google.common.collect.Maps$UnmodifiableBiMap": {
        "com.google.common.collect.Maps$UnmodifiableBiMap:forcePut(java.lang.Object,java.lang.Object)": "/**\n* Throws UnsupportedOperationException for forced key-value insertion.\n* @param key the key to insert\n* @param value the value to associate with the key\n* @return always throws an exception\n*/",
        "com.google.common.collect.Maps$UnmodifiableBiMap:replaceAll(java.util.function.BiFunction)": "/**\n* Replaces all entries using the provided function; unsupported operation.\n* @param function a BiFunction to compute new values\n*/",
        "com.google.common.collect.Maps$UnmodifiableBiMap:putIfAbsent(java.lang.Object,java.lang.Object)": "/**\n* Attempts to insert a value for a key if absent; always throws UnsupportedOperationException.\n* @param key the key to check for absence\n* @param value the value to insert if key is absent\n* @return null, as operation is unsupported\n*/",
        "com.google.common.collect.Maps$UnmodifiableBiMap:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes the specified key-value pair; always throws UnsupportedOperationException.\n* @param key the key to remove\n* @param value the value to remove\n* @return always throws an exception\n*/",
        "com.google.common.collect.Maps$UnmodifiableBiMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Replaces oldValue with newValue for the specified key.\n* @param key the key whose value is to be replaced\n* @param oldValue the current value to be replaced\n* @param newValue the new value to set\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Maps$UnmodifiableBiMap:replace(java.lang.Object,java.lang.Object)": "/**\n* Replaces the value for the given key; always throws UnsupportedOperationException.\n* @param key the key whose value is to be replaced\n* @param value the new value to be associated with the key\n* @return always throws an exception\n*/",
        "com.google.common.collect.Maps$UnmodifiableBiMap:computeIfAbsent(java.lang.Object,java.util.function.Function)": "/**\n* Throws UnsupportedOperationException when computing absent values.\n* @param key the key to check for absence\n* @param mappingFunction function to compute value if key is absent\n*/",
        "com.google.common.collect.Maps$UnmodifiableBiMap:computeIfPresent(java.lang.Object,java.util.function.BiFunction)": "/**\n* Computes a new value for the given key if present using the remapping function.\n* @param key the key to look up\n* @param remappingFunction function to compute new value if key is present\n* @return computed value or null if key not found\n*/",
        "com.google.common.collect.Maps$UnmodifiableBiMap:compute(java.lang.Object,java.util.function.BiFunction)": "/**\n* Computes a value for the given key using a remapping function.\n* @param key the key to compute the value for\n* @param remappingFunction function to compute the new value\n* @return computed value or null if absent\n*/",
        "com.google.common.collect.Maps$UnmodifiableBiMap:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)": "/**\n* Merges a value with a key using a specified function.\n* @param key the key to merge the value with\n* @param value the value to merge\n* @param function the merging function\n* @return merged value or null if not applicable\n*/",
        "com.google.common.collect.Maps$UnmodifiableBiMap:values()": "/**\n* Returns an unmodifiable set of values from the delegate.\n* @return unmodifiable set of values\n*/",
        "com.google.common.collect.Maps$UnmodifiableBiMap:delegate()": "/**\n* Returns an unmodifiable view of the underlying map.\n* @return unmodifiableMap containing key-value pairs\n*/",
        "com.google.common.collect.Maps$UnmodifiableBiMap:<init>(com.google.common.collect.BiMap,com.google.common.collect.BiMap)": "/**\n* Constructs an unmodifiable BiMap from a delegate and optional inverse.\n* @param delegate the original BiMap to wrap\n* @param inverse optional inverse BiMap or null\n*/",
        "com.google.common.collect.Maps$UnmodifiableBiMap:inverse()": "/**\n* Returns the inverse BiMap; creates it if not already initialized.\n* @return inverse BiMap or a new UnmodifiableBiMap if null\n*/"
    },
    "com.google.common.collect.Maps$UnmodifiableEntries": {
        "com.google.common.collect.Maps$UnmodifiableEntries:toArray()": "/**\n* Converts the collection to an array.\n* @return an array of objects, may be null if empty\n*/",
        "com.google.common.collect.Maps$UnmodifiableEntries:toArray(java.lang.Object[])": "/**\n* Converts the collection to an array of the specified type.\n* @param array the array to fill with collection elements\n* @return an array containing the elements of the collection\n*/",
        "com.google.common.collect.Maps$UnmodifiableEntries:delegate()": "/**\n* Returns the collection of entries in the delegate.\n* @return Collection of key-value entries\n*/",
        "com.google.common.collect.Maps$UnmodifiableEntries:iterator()": "/**\n* Returns an unmodifiable iterator over key-value entries.\n* @return Iterator of unmodifiable Entry<K, V>\n*/",
        "com.google.common.collect.Maps$UnmodifiableEntries:<init>(java.util.Collection)": "/**\n* Constructs an UnmodifiableEntries instance with the given collection of entries.\n* @param entries collection of entries to be wrapped as unmodifiable\n*/"
    },
    "com.google.common.collect.Maps$UnmodifiableNavigableMap": {
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:delegate()": "/**\n* Returns an unmodifiable view of the delegate sorted map.\n* @return unmodifiable SortedMap of key-value pairs\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:lowerEntry(java.lang.Object)": "/**\n* Retrieves the entry with the highest key less than the specified key.\n* @param key the key to compare against\n* @return the lower entry or null if none exists\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:lowerKey(java.lang.Object)": "/**\n* Retrieves the greatest key less than the specified key.\n* @param key the reference key to compare against\n* @return the lower key or null if none exists\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:floorEntry(java.lang.Object)": "/**\n* Retrieves the greatest entry less than or equal to the specified key.\n* @param key the key to compare against\n* @return Entry object or null if no such entry exists\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:floorKey(java.lang.Object)": "/**\n* Retrieves the greatest key less than or equal to the specified key.\n* @param key the key to compare\n* @return the floor key or null if none exists\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:ceilingEntry(java.lang.Object)": "/**\n* Retrieves the least entry greater than or equal to the specified key.\n* @param key the key to compare against\n* @return the ceiling entry or null if not found\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:ceilingKey(java.lang.Object)": "/**\n* Retrieves the least key greater than or equal to the specified key.\n* @param key the key to compare\n* @return the least key greater than or equal to key or null if none exists\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:higherEntry(java.lang.Object)": "/**\n* Retrieves the entry with the least key greater than the specified key.\n* @param key the key to compare against\n* @return Entry with a higher key or null if none exists\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:higherKey(java.lang.Object)": "/**\n* Retrieves the least key greater than the specified key.\n* @param key the key to compare against\n* @return the higher key or null if none exists\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:firstEntry()": "/**\n* Retrieves the first entry in the map.\n* @return Entry containing key-value pair or null if map is empty\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:lastEntry()": "/**\n* Retrieves the last entry in the map.\n* @return last Entry or null if the map is empty\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:pollFirstEntry()": "/**\n* Throws UnsupportedOperationException for polling the first entry.\n* @return always throws an exception\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:pollLastEntry()": "/**\n* Throws UnsupportedOperationException when attempting to poll the last entry.\n* @return always throws exception, no value returned\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:replaceAll(java.util.function.BiFunction)": "/**\n* Throws UnsupportedOperationException when attempting to replace all entries.\n* @param function transformation function for key-value pairs\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:putIfAbsent(java.lang.Object,java.lang.Object)": "/**\n* Throws UnsupportedOperationException for putIfAbsent operation.\n* @param key the key to check for absence\n* @param value the value to insert if key is absent\n* @return always throws exception, no return value\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes the specified key-value pair; always throws UnsupportedOperationException.\n* @param key the key to remove\n* @param value the value to remove\n* @return always throws exception\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Replaces oldValue with newValue for the specified key.\n* @param key the key whose value is to be replaced\n* @param oldValue the current value to be replaced\n* @param newValue the new value to set\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:replace(java.lang.Object,java.lang.Object)": "/**\n* Replaces the value for a given key; always throws UnsupportedOperationException.\n* @param key the key whose value is to be replaced\n* @param value the new value to associate with the key\n* @return always throws an exception\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:computeIfAbsent(java.lang.Object,java.util.function.Function)": "/**\n* Computes value for key if absent using the provided mapping function.\n* @param key the key to check for absence\n* @param mappingFunction function to compute value if key is absent\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:computeIfPresent(java.lang.Object,java.util.function.BiFunction)": "/**\n* Computes a new value for the given key if present using the remapping function.\n* @param key the key whose associated value is to be computed\n* @param remappingFunction function to compute the new value\n* @return the new value or null if absent\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:compute(java.lang.Object,java.util.function.BiFunction)": "/**\n* Computes a value for the given key using a remapping function.\n* @param key the key to compute the value for\n* @param remappingFunction function to compute the value\n* @return computed value or null\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)": "/**\n* Merges a value with the existing value for a key using a provided function.\n* @param key the key to merge the value for\n* @param value the new value to merge\n* @param function the merging function\n* @return merged value or null if not applicable\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:<init>(java.util.NavigableMap)": "/**\n* Constructs an unmodifiable navigable map from a delegate map.\n* @param delegate the navigable map to wrap\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:<init>(java.util.NavigableMap,com.google.common.collect.Maps$UnmodifiableNavigableMap)": "/**\n* Constructs an unmodifiable navigable map with a delegate and descending map.\n* @param delegate the navigable map to be wrapped\n* @param descendingMap the descending view of the map\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:descendingMap()": "/**\n* Returns the descending view of the navigable map.\n* @return NavigableMap in descending order, creating it if not already present\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns an unmodifiable view of the submap defined by the given keys.\n* @param fromKey starting key, inclusive or exclusive based on fromInclusive\n* @param fromInclusive true if fromKey is inclusive\n* @param toKey ending key, inclusive or exclusive based on toInclusive\n* @param toInclusive true if toKey is inclusive\n* @return unmodifiable NavigableMap of the specified submap\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:headMap(java.lang.Object,boolean)": "/**\n* Returns an unmodifiable view of the head map up to a specified key.\n* @param toKey the key up to which the map is returned\n* @param inclusive true to include the key, false otherwise\n* @return unmodifiable NavigableMap instance\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:tailMap(java.lang.Object,boolean)": "/**\n* Returns an unmodifiable view of the tail map starting from a key.\n* @param fromKey starting key for the tail map\n* @param inclusive true if the map includes the fromKey\n* @return unmodifiable NavigableMap instance\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:navigableKeySet()": "/**\n* Returns an unmodifiable view of the navigable key set.\n* @return unmodifiable NavigableSet of keys\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:descendingKeySet()": "/**\n* Returns an unmodifiable view of the descending key set.\n* @return unmodifiable NavigableSet of descending keys\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:subMap(java.lang.Object,java.lang.Object)": "/**\n* Returns a submap from fromKey (inclusive) to toKey (exclusive).\n* @param fromKey starting key, inclusive\n* @param toKey ending key, exclusive\n* @return SortedMap of the specified submap\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:headMap(java.lang.Object)": "/**\n* Returns a view of the map up to the specified key, exclusive.\n* @param toKey the key up to which the map is returned\n* @return unmodifiable SortedMap instance\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:tailMap(java.lang.Object)": "/**\n* Returns a tail map starting from the specified key.\n* @param fromKey starting key for the tail map\n* @return SortedMap view from the specified key onward\n*/",
        "com.google.common.collect.Maps$UnmodifiableNavigableMap:keySet()": "/**\n* Returns an unmodifiable view of the key set.\n* @return Set of keys from the navigable key set\n*/"
    },
    "com.google.common.collect.Maps$ValueDifferenceImpl": {
        "com.google.common.collect.Maps$ValueDifferenceImpl:<init>(java.lang.Object,java.lang.Object)": "/**\n* Constructs ValueDifferenceImpl with specified left and right values.\n* @param left  first value, may be null\n* @param right second value, may be null\n*/",
        "com.google.common.collect.Maps$ValueDifferenceImpl:hashCode()": "/**\n* Computes the hash code based on left and right properties.\n* @return integer hash code value\n*/",
        "com.google.common.collect.Maps$ValueDifferenceImpl:toString()": "/**\n* Returns a string representation of the object in the format (left, right).\n* @return formatted string of left and right values\n*/",
        "com.google.common.collect.Maps$ValueDifferenceImpl:leftValue()": "/**\n* Returns the left value of the pair.\n* @return left value of type V\n*/",
        "com.google.common.collect.Maps$ValueDifferenceImpl:rightValue()": "/**\n* Returns the right value of the object.\n* @return the right value of type V\n*/",
        "com.google.common.collect.Maps$ValueDifferenceImpl:equals(java.lang.Object)": "/**\n* Checks equality with another ValueDifference object.\n* @param object object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Maps$ValueDifferenceImpl:create(java.lang.Object,java.lang.Object)": "/**\n* Creates a ValueDifference from left and right values.\n* @param left first value, may be null\n* @param right second value, may be null\n* @return ValueDifference object encapsulating the values\n*/"
    },
    "com.google.common.collect.Maps$Values": {
        "com.google.common.collect.Maps$Values:map()": "/**\n* Returns the internal map instance.\n* @return a Map containing key-value pairs\n*/",
        "com.google.common.collect.Maps$Values:<init>(java.util.Map)": "/**** Initializes the Values object with a non-null map. \n* @param map the map to be assigned, must not be null \n*/",
        "com.google.common.collect.Maps$Values:forEach(java.util.function.Consumer)": "/**\n* Iterates over map values, applying the given action.\n* @param action the operation to apply on each value\n*/",
        "com.google.common.collect.Maps$Values:iterator()": "/**\n* Returns an iterator for values from the map's entry set.\n* @return Iterator of values from the map\n*/",
        "com.google.common.collect.Maps$Values:remove(java.lang.Object)": "/**\n* Removes an object; returns true if found and removed, false otherwise.\n* @param o object to remove\n*/",
        "com.google.common.collect.Maps$Values:size()": "/**\n* Returns the number of key-value pairs in the internal map.\n* @return size of the map as an integer\n*/",
        "com.google.common.collect.Maps$Values:isEmpty()": "/**\n* Checks if the internal map is empty.\n* @return true if the map has no entries, false otherwise\n*/",
        "com.google.common.collect.Maps$Values:contains(java.lang.Object)": "/**\n* Checks if the map contains the specified value.\n* @param o the value to check for presence in the map\n* @return true if the value is found, false otherwise\n*/",
        "com.google.common.collect.Maps$Values:clear()": "/**\n* Clears all entries from the internal map.\n*/",
        "com.google.common.collect.Maps$Values:removeAll(java.util.Collection)": "/**\n* Removes all elements in the specified collection from this collection.\n* @param c collection of elements to be removed\n* @return true if this collection changed as a result of the call\n*/",
        "com.google.common.collect.Maps$Values:retainAll(java.util.Collection)": "/**\n* Retains only elements present in the specified collection.\n* @param c collection of elements to retain\n* @return true if this set changed as a result\n*/"
    },
    "com.google.common.collect.Maps$ViewCachingAbstractMap": {
        "com.google.common.collect.Maps$ViewCachingAbstractMap:entrySet()": "/**\n* Returns the set of entries in the map.\n* @return Set of map entries, creating if not already initialized\n*/",
        "com.google.common.collect.Maps$ViewCachingAbstractMap:createKeySet()": "/**\n* Creates a new KeySet instance associated with the current object.\n* @return KeySet containing keys from the current context\n*/",
        "com.google.common.collect.Maps$ViewCachingAbstractMap:createValues()": "/**\n* Creates a collection of values based on the current object.\n* @return Collection of values\n*/",
        "com.google.common.collect.Maps$ViewCachingAbstractMap:keySet()": "/**\n* Returns the key set, creating it if not already initialized.\n* @return Set of keys associated with the current object\n*/",
        "com.google.common.collect.Maps$ViewCachingAbstractMap:values()": "/**\n* Retrieves a collection of values, creating it if not already initialized.\n* @return Collection of values\n*/"
    },
    "com.google.common.collect.Synchronized": {
        "com.google.common.collect.Synchronized:biMap(com.google.common.collect.BiMap,java.lang.Object)": "/**\n* Returns a synchronized view of the given BiMap.\n* @param bimap the BiMap to synchronize\n* @param mutex optional mutex for synchronization\n* @return a synchronized BiMap\n*/",
        "com.google.common.collect.Synchronized:<init>()": "/**\n* Private constructor to prevent instantiation of the Synchronized class.\n*/",
        "com.google.common.collect.Synchronized:collection(java.util.Collection,java.lang.Object)": "/**\n* Wraps a collection in a synchronized view.\n* @param collection the collection to synchronize\n* @param mutex an optional mutex for synchronization\n* @return a synchronized collection\n*/",
        "com.google.common.collect.Synchronized:set(java.util.Set,java.lang.Object)": "/**\n* Creates a synchronized set from the given set and optional mutex.\n* @param set the set to synchronize\n* @param mutex optional mutex for synchronization control\n* @return a synchronized Set instance\n*/",
        "com.google.common.collect.Synchronized:queue(java.util.Queue,java.lang.Object)": "/**\n* Wraps a queue in a SynchronizedQueue for thread safety.\n* @param queue the queue to synchronize\n* @param mutex optional mutex for synchronization\n* @return a synchronized Queue instance\n*/",
        "com.google.common.collect.Synchronized:multiset(com.google.common.collect.Multiset,java.lang.Object)": "/**\n* Returns a synchronized multiset or the original if already synchronized/immutable.\n* @param multiset the multiset to synchronize\n* @param mutex optional object for controlling access\n* @return a synchronized multiset\n*/",
        "com.google.common.collect.Synchronized:sortedSet(java.util.SortedSet,java.lang.Object)": "/**\n* Creates a synchronized sorted set from a given set and optional mutex.\n* @param set the sorted set to synchronize\n* @param mutex optional object for synchronization control\n* @return a synchronized SortedSet instance\n*/",
        "com.google.common.collect.Synchronized:deque(java.util.Deque,java.lang.Object)": "/**\n* Creates a synchronized deque from the given deque and optional mutex.\n* @param deque the deque to synchronize\n* @param mutex optional mutex for thread safety\n* @return a synchronized Deque instance\n*/",
        "com.google.common.collect.Synchronized:list(java.util.List,java.lang.Object)": "/**\n* Returns a synchronized list based on input type.\n* @param list the list to synchronize\n* @param mutex optional lock object for thread safety\n* @return synchronized List<E>\n*/",
        "com.google.common.collect.Synchronized:nullableSynchronizedEntry(java.util.Map$Entry,java.lang.Object)": "/**\n* Creates a synchronized entry or returns null if the entry is null.\n* @param entry the entry to synchronize\n* @param mutex optional mutex for synchronization\n* @return synchronized entry or null\n*/",
        "com.google.common.collect.Synchronized:map(java.util.Map,java.lang.Object)": "/**\n* Wraps a map in a synchronized wrapper for thread safety.\n* @param map non-null map to synchronize\n* @param mutex optional mutex for synchronization\n* @return synchronized map\n*/",
        "com.google.common.collect.Synchronized:multimap(com.google.common.collect.Multimap,java.lang.Object)": "/**\n* Returns a synchronized Multimap or the original if already synchronized.\n* @param multimap the Multimap to wrap\n* @param mutex optional mutex for thread safety\n* @return a synchronized Multimap\n*/",
        "com.google.common.collect.Synchronized:table(com.google.common.collect.Table,java.lang.Object)": "/**\n* Creates a synchronized table with an optional mutex for thread safety.\n* @param table the Table to synchronize\n* @param mutex optional mutex for synchronization\n* @return a SynchronizedTable instance\n*/",
        "com.google.common.collect.Synchronized:navigableSet(java.util.NavigableSet,java.lang.Object)": "/**\n* Creates a synchronized navigable set.\n* @param navigableSet the navigable set to synchronize\n* @param mutex optional object for synchronization control\n* @return a synchronized NavigableSet\n*/",
        "com.google.common.collect.Synchronized:typePreservingSet(java.util.Set,java.lang.Object)": "/**\n* Creates a synchronized set preserving type from the given set and optional mutex.\n* @param set the set to synchronize\n* @param mutex optional mutex for synchronization control\n* @return synchronized Set instance\n*/",
        "com.google.common.collect.Synchronized:typePreservingCollection(java.util.Collection,java.lang.Object)": "/**\n* Preserves type of collection while synchronizing it.\n* @param collection the collection to synchronize\n* @param mutex optional mutex for synchronization control\n* @return synchronized Collection<E> instance\n*/",
        "com.google.common.collect.Synchronized:sortedMap(java.util.SortedMap,java.lang.Object)": "/**\n* Creates a synchronized SortedMap from the provided map and optional mutex.\n* @param sortedMap the SortedMap to synchronize\n* @param mutex optional mutex for thread safety\n* @return a synchronized SortedMap instance\n*/",
        "com.google.common.collect.Synchronized:listMultimap(com.google.common.collect.ListMultimap,java.lang.Object)": "/**\n* Wraps a ListMultimap in a synchronized wrapper if not already synchronized.\n* @param multimap the ListMultimap to wrap\n* @param mutex optional mutex for synchronization\n* @return a synchronized ListMultimap\n*/",
        "com.google.common.collect.Synchronized:setMultimap(com.google.common.collect.SetMultimap,java.lang.Object)": "/**\n* Returns a synchronized SetMultimap or original if already synchronized.\n* @param multimap input SetMultimap\n* @param mutex optional mutex for synchronization\n* @return synchronized SetMultimap\n*/",
        "com.google.common.collect.Synchronized:navigableSet(java.util.NavigableSet)": "/**\n* Creates a synchronized navigable set from the provided set.\n* @param navigableSet the navigable set to synchronize\n* @return a synchronized NavigableSet\n*/",
        "com.google.common.collect.Synchronized:navigableMap(java.util.NavigableMap,java.lang.Object)": "/**\n* Creates a synchronized NavigableMap.\n* @param navigableMap the map to synchronize\n* @param mutex optional mutex for thread safety\n* @return synchronized NavigableMap instance\n*/",
        "com.google.common.collect.Synchronized:sortedSetMultimap(com.google.common.collect.SortedSetMultimap,java.lang.Object)": "/**\n* Returns a synchronized version of the given SortedSetMultimap.\n* @param multimap the multimap to synchronize\n* @param mutex optional mutex for thread safety\n* @return synchronized SortedSetMultimap\n*/",
        "com.google.common.collect.Synchronized:navigableMap(java.util.NavigableMap)": "/**\n* Creates a synchronized NavigableMap.\n* @param navigableMap the map to synchronize\n* @return synchronized NavigableMap instance\n*/"
    },
    "com.google.common.collect.MinMaxPriorityQueue": {
        "com.google.common.collect.MinMaxPriorityQueue:elementData(int)": "/**\n* Retrieves element at specified index from the queue.\n* @param index position in the queue\n* @return element of type E at the given index\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:size()": "/**\n* Returns the current size of the collection.\n* @return the number of elements in the collection\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:orderedBy(java.util.Comparator)": "/**\n* Creates a new Builder instance sorted by the given comparator.\n* @param comparator defines the order of elements\n* @return a Builder object for further configuration\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:removeFirst()": "/**\n* Removes and returns the first element from the collection.\n* @return the removed element or null if empty\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:iterator()": "/**\n* Returns an iterator for the queue elements.\n* @return an Iterator over the elements in the queue\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:toArray()": "/**\n* Returns a copy of the queue as an array.\n* @return an array containing the elements of the queue\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:capAtMaximumSize(int,int)": "/**\n* Caps the queue size at a specified maximum limit.\n* @param queueSize current size of the queue\n* @param maximumSize the maximum allowable size\n* @return adjusted queue size, ensuring it does not exceed maximumSize\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:isEvenLevel(int)": "/**\n* Checks if the one-based index is at an even level.\n* @param index zero-based index to evaluate\n* @return true if even level, false otherwise\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:peek()": "/**\n* Returns the first element of the queue or null if empty.\n* @return first element of type E or null if the queue is empty\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:initialQueueSize(int,int,java.lang.Iterable)": "/**\n* Calculates initial queue size based on configuration and contents.\n* @param configuredExpectedSize desired size or unset value\n* @param maximumSize upper limit for the queue size\n* @param initialContents items to initialize the queue\n* @return adjusted initial queue size\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:expectedSize(int)": "/**\n* Creates a Comparable Builder with specified expected size.\n* @param expectedSize non-negative expected size value\n* @return Builder instance for Comparable types\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:maximumSize(int)": "/**\n* Creates a Comparable Builder with a specified maximum size.\n* @param maximumSize positive integer for maximum size\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:heapForIndex(int)": "/**\n* Returns the appropriate heap based on index level.\n* @param i zero-based index to evaluate\n* @return Heap instance (minHeap or maxHeap)\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:getMaxElementIndex()": "/**\n* Returns index of the maximum element in the queue.\n* @return index of the maximum element (0 for single, 1 or 2 for two elements)\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:peekFirst()": "/**\n* Retrieves the first element of the queue.\n* @return first element of type E or null if the queue is empty\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:calculateNewCapacity()": "/**\n* Calculates new queue capacity based on current size.\n* @return adjusted capacity not exceeding maximumSize\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:isIntact()": "/**\n* Checks if all heaps are intact by verifying each index.\n* @return true if all indices are valid, false otherwise\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:<init>(com.google.common.collect.MinMaxPriorityQueue$Builder,int)": "/**\n* Initializes MinMaxPriorityQueue with specified builder and size.\n* @param builder configuration for the queue\n* @param queueSize maximum number of elements in the queue\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:peekLast()": "/**\n* Retrieves the last element or null if the queue is empty.\n* @return last element of type E or null if empty\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:growIfNeeded()": "/**\n* Grows the queue if its size exceeds current capacity.\n* Uses calculateNewCapacity() to determine new size.\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:fillHole(int,java.lang.Object)": "/**\n* Fills a hole in the heap with an element and attempts to bubble it up.\n* @param index position of the hole in the heap\n* @param toTrickle element to be moved into the hole\n* @return MoveDesc with moved element or null if bubbling fails\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:removeAt(int)": "/**\n* Removes element at specified index and returns MoveDesc of moved elements.\n* @param index position of the element to remove\n* @return MoveDesc with moved elements or null if no move occurred\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:removeAndGet(int)": "/**\n* Removes and returns element at specified index.\n* @param index position in the queue\n* @return element of type E at the given index\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:poll()": "/**\n* Retrieves and removes the head of the queue, or returns null if empty.\n* @return element of type E or null if the queue is empty\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:pollLast()": "/**\n* Retrieves and removes the last element, or returns null if empty.\n* @return last element of type E or null if the queue is empty\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:removeLast()": "/**\n* Removes and returns the last element from the queue.\n* @return element of type E, or throws NoSuchElementException if empty\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:pollFirst()": "/**\n* Retrieves and removes the first element of the queue.\n* @return element of type E or null if the queue is empty\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:offer(java.lang.Object)": "/**\n* Adds an element to the heap and maintains its properties.\n* @param element the element to add\n* @return true if added successfully, false if exceeds max size\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:add(java.lang.Object)": "/**\n* Adds an element to the collection and always returns true.\n* @param element the element to add\n* @return true after adding the element\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:addAll(java.util.Collection)": "/**\n* Adds all elements from the collection to the heap.\n* @param newElements collection of elements to add\n* @return true if at least one element was added\n*/",
        "com.google.common.collect.MinMaxPriorityQueue:create(java.lang.Iterable)": "/**** Creates a MinMaxPriorityQueue from initial contents. \n* @param initialContents items to initialize the queue \n* @return a new MinMaxPriorityQueue instance \n*/",
        "com.google.common.collect.MinMaxPriorityQueue:create()": "/**\n* Creates a new MinMaxPriorityQueue with natural ordering for comparable elements.\n* @return a new MinMaxPriorityQueue instance\n*/"
    },
    "com.google.common.collect.MinMaxPriorityQueue$Heap": {
        "com.google.common.collect.MinMaxPriorityQueue$Heap:getParentIndex(int)": "/**\n* Calculates the parent index of a given node in a binary tree.\n* @param i index of the child node\n* @return parent index of the child node\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Heap:getLeftChildIndex(int)": "/**\n* Calculates the index of the left child in a binary heap.\n* @param i index of the parent node\n* @return index of the left child node\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Heap:getRightChildIndex(int)": "/**\n* Calculates the index of the right child in a binary heap.\n* @param i index of the parent node\n* @return index of the right child node\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Heap:compareElements(int,int)": "/**\n* Compares two elements by their indices in the queue.\n* @param a index of the first element\n* @param b index of the second element\n* @return comparison result of the elements\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Heap:getGrandparentIndex(int)": "/**\n* Computes the grandparent index of a given node in a binary tree.\n* @param i index of the child node\n* @return grandparent index of the child node\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Heap:crossOverUp(int,java.lang.Object)": "/**\n* Bubbles up an element in the heap if it's larger than its parent.\n* @param index position of the element to bubble up\n* @param x element to compare and potentially bubble up\n* @return new index of the element after bubbling\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Heap:swapWithConceptuallyLastElement(java.lang.Object)": "/**\n* Swaps the last element with its aunt if conditions are met.\n* @param actualLastElement the element to be swapped\n* @return index of the swapped element or size if no swap occurred\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Heap:findMin(int,int)": "/**\n* Finds the index of the minimum element in a specified range.\n* @param index starting index; @param len length of the range\n* @return index of minimum element or -1 if out of bounds\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Heap:bubbleUpAlternatingLevels(int,java.lang.Object)": "/**\n* Bubbles up an element in the queue to maintain order.\n* @param index current index of the element\n* @param x element to be inserted\n* @return new index of the element after bubbling up\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Heap:verifyIndex(int)": "/**\n* Verifies if the index maintains heap properties.\n* @param i index to verify\n* @return true if properties hold, false otherwise\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Heap:findMinChild(int)": "/**\n* Finds the index of the minimum child of a given node.\n* @param index index of the parent node\n* @return index of the minimum child node\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Heap:findMinGrandChild(int)": "/**\n* Finds the minimum grandchild index in a binary heap.\n* @param index parent node index\n* @return index of minimum grandchild or -1 if no grandchild exists\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Heap:bubbleUp(int,java.lang.Object)": "/**\n* Bubbles up an element in the appropriate heap based on its position.\n* @param index initial position of the element\n* @param x element to bubble up in the heap\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Heap:crossOver(int,java.lang.Object)": "/**\n* Swaps element with minimum child if smaller; otherwise bubbles up.\n* @param index position of the element to check\n* @param x element to compare and potentially swap\n* @return new index of the element after operation\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Heap:fillHoleAt(int)": "/**\n* Fills hole in heap and returns final index.\n* @param index starting position in the heap\n* @return final index after filling the hole\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Heap:tryCrossOverAndBubbleUp(int,int,java.lang.Object)": "/**\n* Attempts to crossover and bubble up an element; returns MoveDesc or null if unsuccessful.\n* @param removeIndex index of the element to be removed\n* @param vacated index of the vacated position\n* @param toTrickle element to be moved\n* @return MoveDesc containing moved element and parent, or null if crossover fails\n*/"
    },
    "com.google.common.collect.MinMaxPriorityQueue$MoveDesc": {
        "com.google.common.collect.MinMaxPriorityQueue$MoveDesc:<init>(java.lang.Object,java.lang.Object)": "/**\n* Initializes MoveDesc with target and replaced elements.\n* @param toTrickle element to be moved\n* @param replaced element being replaced\n*/"
    },
    "com.google.common.collect.MinMaxPriorityQueue$QueueIterator": {
        "com.google.common.collect.MinMaxPriorityQueue$QueueIterator:checkModCount()": "/**\n* Validates modification count to prevent concurrent modifications.\n* @throws ConcurrentModificationException if counts do not match\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$QueueIterator:foundAndRemovedExactReference(java.lang.Iterable,java.lang.Object)": "/**\n* Checks and removes the exact reference of target from elements.\n* @param elements collection to search in\n* @param target element to find and remove\n* @return true if target was found and removed, false otherwise\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$QueueIterator:nextNotInSkipMe(int)": "/**** Updates nextCursor to the next valid index not in skipMe. \n* @param c current index to check against skipMe */",
        "com.google.common.collect.MinMaxPriorityQueue$QueueIterator:hasNext()": "/**\n* Checks if there are more elements to iterate.\n* @return true if more elements exist, false otherwise\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$QueueIterator:next()": "/**\n* Retrieves the next element in the queue or from forgetMeNot.\n* @return next element of type E\n* @throws NoSuchElementException if no more elements are available\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$QueueIterator:removeExact(java.lang.Object)": "/**\n* Removes the exact target from the queue if found.\n* @param target object to remove\n* @return true if removed, false if not found\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$QueueIterator:remove()": "/**\n* Removes the current element and updates related collections.\n* @throws ConcurrentModificationException if modification count is invalid\n*/"
    },
    "com.google.common.collect.MoreCollectors$ToOptionalState": {
        "com.google.common.collect.MoreCollectors$ToOptionalState:<init>()": "/**\n* Initializes an OptionalState with null element and empty extras list.\n*/",
        "com.google.common.collect.MoreCollectors$ToOptionalState:multiples(boolean)": "/**\n* Throws IllegalArgumentException with a detailed message about element count.\n* @param overflow indicates if additional elements exist\n*/",
        "com.google.common.collect.MoreCollectors$ToOptionalState:add(java.lang.Object)": "/**** Adds an object to the collection, ensuring it's not null and within size limits. */",
        "com.google.common.collect.MoreCollectors$ToOptionalState:combine(com.google.common.collect.MoreCollectors$ToOptionalState)": "/**\n* Combines two ToOptionalState objects and manages their elements.\n* @param other another ToOptionalState to combine with\n* @return this ToOptionalState with combined elements\n*/",
        "com.google.common.collect.MoreCollectors$ToOptionalState:getOptional()": "/**\n* Returns an Optional of element or throws if extras are not empty.\n* @return Optional containing element or empty if null\n*/",
        "com.google.common.collect.MoreCollectors$ToOptionalState:getElement()": "/**\n* Retrieves an element or throws an exception if not available.\n* @return the element if present; throws NoSuchElementException if absent\n*/"
    },
    "com.google.common.collect.MoreCollectors": {
        "com.google.common.collect.MoreCollectors:<init>()": "/**\n* Private constructor to prevent instantiation of the MoreCollectors class.\n*/"
    },
    "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys": {
        "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:<init>()": "/**\n* Constructs a new instance of MultimapBuilderWithKeys.\n*/",
        "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:linkedListValues()": "/**\n* Creates a linked list multimap builder.\n* @return ListMultimapBuilder for constructing linked list multimaps\n*/",
        "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:treeSetValues(java.util.Comparator)": "/**\n* Creates a builder for a SortedSetMultimap with a specified comparator.\n* @param comparator the comparator for sorting values\n* @return a SortedSetMultimapBuilder instance\n*/",
        "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:enumSetValues(java.lang.Class)": "/**\n* Creates a SetMultimapBuilder for enum values.\n* @param valueClass the enum class type\n* @return a SetMultimapBuilder for the specified enum type\n*/",
        "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:arrayListValues(int)": "/****\n* Builds a ListMultimap with specified expected values per key.\n* @param expectedValuesPerKey minimum values expected for each key\n* @return ListMultimapBuilder for constructing a ListMultimap\n*/",
        "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:hashSetValues(int)": "/**\n* Creates a SetMultimapBuilder with specified expected values per key.\n* @param expectedValuesPerKey minimum values expected for each key\n* @return a new SetMultimapBuilder instance\n*/",
        "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:linkedHashSetValues(int)": "/**\n* Creates a SetMultimapBuilder with linked hash set values.\n* @param expectedValuesPerKey expected number of values per key\n* @return SetMultimapBuilder instance\n*/",
        "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:treeSetValues()": "/**\n* Builds a SortedSetMultimap using natural ordering for comparable keys.\n* @return SortedSetMultimapBuilder instance\n*/",
        "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:arrayListValues()": "/**\n* Initializes a ListMultimapBuilder with default expected values per key.\n* @return ListMultimapBuilder instance\n*/",
        "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:hashSetValues()": "/**\n* Creates a SetMultimapBuilder with default expected values per key.\n* @return SetMultimapBuilder instance\n*/",
        "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:linkedHashSetValues()": "/**\n* Creates a SetMultimapBuilder with default linked hash set values.\n* @return SetMultimapBuilder instance\n*/"
    },
    "com.google.common.collect.MultimapBuilder$ArrayListSupplier": {
        "com.google.common.collect.MultimapBuilder$ArrayListSupplier:get()": "/**\n* Returns a copy of the expected values per key.\n* @return List of expected values\n*/",
        "com.google.common.collect.MultimapBuilder$ArrayListSupplier:<init>(int)": "/**\n* Initializes ArrayListSupplier with a non-negative expected values per key.\n* @param expectedValuesPerKey number of expected values per key\n*/"
    },
    "com.google.common.collect.MultimapBuilder$EnumSetSupplier": {
        "com.google.common.collect.MultimapBuilder$EnumSetSupplier:get()": "/**\n* Returns an empty set of the specified enum type.\n* @return an empty EnumSet of type V\n*/",
        "com.google.common.collect.MultimapBuilder$EnumSetSupplier:<init>(java.lang.Class)": "/**\n* Initializes EnumSetSupplier with a non-null class reference.\n* @param clazz the class type for the EnumSet\n*/"
    },
    "com.google.common.collect.MultimapBuilder$LinkedListSupplier": {
        "com.google.common.collect.MultimapBuilder$LinkedListSupplier:get()": "/**\n* Returns an empty LinkedList for compatibility purposes.\n* @return an empty List instance\n*/",
        "com.google.common.collect.MultimapBuilder$LinkedListSupplier:instance()": "/**\n* Returns a supplier that generates a new LinkedList of type V on each call.\n* @return Supplier<List<V>> providing fresh LinkedList instances\n*/"
    },
    "com.google.common.collect.MultimapBuilder$ListMultimapBuilder": {
        "com.google.common.collect.MultimapBuilder$ListMultimapBuilder:<init>()": "/**\n* Constructs a new ListMultimapBuilder instance.\n*/",
        "com.google.common.collect.MultimapBuilder$ListMultimapBuilder:build(com.google.common.collect.Multimap)": "/**\n* Builds a ListMultimap from the given multimap.\n* @param multimap source multimap to copy entries from\n* @return a new ListMultimap containing the copied entries\n*/"
    },
    "com.google.common.collect.MultimapBuilder": {
        "com.google.common.collect.MultimapBuilder:build(com.google.common.collect.Multimap)": "/**\n* Builds a new Multimap and populates it with entries from the provided multimap.\n* @param multimap source multimap to copy entries from\n* @return a new Multimap containing the copied entries\n*/",
        "com.google.common.collect.MultimapBuilder:<init>()": "/**\n* Private constructor for MultimapBuilder, preventing instantiation.\n*/",
        "com.google.common.collect.MultimapBuilder:treeKeys(java.util.Comparator)": "/**\n* Creates a MultimapBuilder with tree-based keys.\n* @param comparator key order comparator\n* @return MultimapBuilderWithKeys instance\n*/",
        "com.google.common.collect.MultimapBuilder:enumKeys(java.lang.Class)": "/**\n* Creates a MultimapBuilderWithKeys for the specified enum class.\n* @param keyClass the enum class type\n* @return MultimapBuilderWithKeys instance\n*/",
        "com.google.common.collect.MultimapBuilder:hashKeys(int)": "/**\n* Creates a MultimapBuilder with specified expected keys.\n* @param expectedKeys number of expected keys, must be non-negative\n* @return MultimapBuilderWithKeys instance\n*/",
        "com.google.common.collect.MultimapBuilder:linkedHashKeys(int)": "/**\n* Creates a linked hash map builder with expected key size.\n* @param expectedKeys number of expected keys, must be non-negative\n* @return MultimapBuilderWithKeys instance\n*/",
        "com.google.common.collect.MultimapBuilder:treeKeys()": "/**\n* Creates a MultimapBuilder with natural ordering for comparable keys.\n* @return MultimapBuilderWithKeys instance\n*/",
        "com.google.common.collect.MultimapBuilder:hashKeys()": "/**\n* Creates a MultimapBuilder with default expected keys.\n* @return MultimapBuilderWithKeys instance\n*/",
        "com.google.common.collect.MultimapBuilder:linkedHashKeys()": "/**\n* Creates a linked hash map builder with default expected key size.\n* @return MultimapBuilderWithKeys instance\n*/"
    },
    "com.google.common.collect.MultimapBuilder$SetMultimapBuilder": {
        "com.google.common.collect.MultimapBuilder$SetMultimapBuilder:<init>()": "/**\n* Constructs a new instance of SetMultimapBuilder.\n*/",
        "com.google.common.collect.MultimapBuilder$SetMultimapBuilder:build(com.google.common.collect.Multimap)": "/**\n* Builds a SetMultimap from the provided multimap.\n* @param multimap source multimap to copy entries from\n* @return a new SetMultimap containing copied entries\n*/"
    },
    "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder": {
        "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder:build()": "/**\n* Builds and returns a SortedSetMultimap of specified key-value types.\n* @param <K> type of keys, extending K0\n* @param <V> type of values, extending V0\n* @return SortedSetMultimap containing the key-value pairs\n*/",
        "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder:<init>()": "/**\n* Constructs a new instance of SortedSetMultimapBuilder.\n*/",
        "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder:build(com.google.common.collect.Multimap)": "/**\n* Builds a SortedSetMultimap from the provided multimap.\n* @param multimap source multimap to copy entries from\n* @return a new SortedSetMultimap containing copied entries\n*/"
    },
    "com.google.common.collect.MultimapBuilder$TreeSetSupplier": {
        "com.google.common.collect.MultimapBuilder$TreeSetSupplier:get()": "/**\n* Creates a new sorted set using the specified comparator.\n* @return a SortedSet instance ordered by the comparator\n*/",
        "com.google.common.collect.MultimapBuilder$TreeSetSupplier:<init>(java.util.Comparator)": "/**\n* Constructs a TreeSetSupplier with a non-null comparator.\n* @param comparator the comparator for ordering elements\n*/"
    },
    "com.google.common.collect.Multimaps$AsMap": {
        "com.google.common.collect.Multimaps$AsMap:removeValuesForKey(java.lang.Object)": "/**\n* Removes all values associated with the specified key from the multimap.\n* @param key the key whose values are to be removed\n*/",
        "com.google.common.collect.Multimaps$AsMap:size()": "/**\n* Returns the number of unique keys in the multimap.\n* @return count of unique keys\n*/",
        "com.google.common.collect.Multimaps$AsMap:createEntrySet()": "/**\n* Creates a set of entries for the map.\n* @return a Set of Entry objects containing key-value collections\n*/",
        "com.google.common.collect.Multimaps$AsMap:containsKey(java.lang.Object)": "/**\n* Checks if the multimap contains the specified key.\n* @param key the key to check for presence\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.Multimaps$AsMap:keySet()": "/**\n* Returns a set of keys from the multimap.\n* @return Set of keys contained in the multimap\n*/",
        "com.google.common.collect.Multimaps$AsMap:isEmpty()": "/**\n* Checks if the multimap is empty.\n* @return true if multimap has no entries, false otherwise\n*/",
        "com.google.common.collect.Multimaps$AsMap:clear()": "/**\n* Clears all entries from the multimap.\n*/",
        "com.google.common.collect.Multimaps$AsMap:<init>(com.google.common.collect.Multimap)": "/**\n* Initializes AsMap with a non-null Multimap.\n* @param multimap the Multimap to be assigned\n*/",
        "com.google.common.collect.Multimaps$AsMap:get(java.lang.Object)": "/**\n* Retrieves values by key from the multimap.\n* @param key the key to retrieve values for\n* @return Collection of values or null if key not found\n*/",
        "com.google.common.collect.Multimaps$AsMap:remove(java.lang.Object)": "/**\n* Removes values associated with the key from the multimap.\n* @param key the key whose associated values are to be removed\n* @return Collection of removed values or null if key not present\n*/"
    },
    "com.google.common.collect.Multimaps$CustomListMultimap": {
        "com.google.common.collect.Multimaps$CustomListMultimap:createKeySet()": "/**\n* Creates a set of keys from the collection.\n* @return a Set of keys\n*/",
        "com.google.common.collect.Multimaps$CustomListMultimap:createAsMap()": "/**\n* Creates a map representation of the collection.\n* @return a map with keys of type K and values as collections of type V\n*/",
        "com.google.common.collect.Multimaps$CustomListMultimap:createCollection()": "/**\n* Creates a new collection using the factory.\n* @return a List of type V from the factory\n*/",
        "com.google.common.collect.Multimaps$CustomListMultimap:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object state to the provided output stream.\n* @param stream the output stream for serialization\n* @throws IOException if an I/O error occurs during serialization\n*/",
        "com.google.common.collect.Multimaps$CustomListMultimap:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from an ObjectInputStream.\n* @param stream input stream to read serialized data\n* @throws IOException if an I/O error occurs\n* @throws ClassNotFoundException if a class cannot be found\n*/",
        "com.google.common.collect.Multimaps$CustomListMultimap:<init>(java.util.Map,com.google.common.base.Supplier)": "/**\n* Constructs a CustomListMultimap with a provided map and list factory.\n* @param map initial map of collections\n* @param factory list supplier for creating collections\n*/"
    },
    "com.google.common.collect.Multimaps$CustomMultimap": {
        "com.google.common.collect.Multimaps$CustomMultimap:createKeySet()": "/**\n* Creates a set of keys from the collection.\n* @return a Set containing the keys\n*/",
        "com.google.common.collect.Multimaps$CustomMultimap:createAsMap()": "/**\n* Creates a map of collections from key-value pairs.\n* @return Map of keys to collections of values\n*/",
        "com.google.common.collect.Multimaps$CustomMultimap:createCollection()": "/**\n* Creates a new collection using the provided factory.\n* @return a Collection of type V\n*/",
        "com.google.common.collect.Multimaps$CustomMultimap:wrapCollection(java.lang.Object,java.util.Collection)": "/**\n* Wraps a collection based on its type using a specified key.\n* @param key identifier for the collection\n* @param collection input collection to wrap\n* @return wrapped collection of the same type\n*/",
        "com.google.common.collect.Multimaps$CustomMultimap:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object state to the provided output stream.\n* @param stream the output stream for serialization\n* @throws IOException if an I/O error occurs during serialization\n*/",
        "com.google.common.collect.Multimaps$CustomMultimap:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from input stream.\n* @param stream input stream for reading object data\n* @throws IOException if an I/O error occurs\n* @throws ClassNotFoundException if a class cannot be found\n*/",
        "com.google.common.collect.Multimaps$CustomMultimap:<init>(java.util.Map,com.google.common.base.Supplier)": "/**\n* Initializes CustomMultimap with a map and a collection factory.\n* @param map initial map of keys to collections\n* @param factory supplier for creating new collections\n*/",
        "com.google.common.collect.Multimaps$CustomMultimap:unmodifiableCollectionSubclass(java.util.Collection)": "/**\n* Returns an unmodifiable view of the specified collection.\n* @param collection the collection to wrap\n* @return unmodifiable Collection object\n*/"
    },
    "com.google.common.collect.Multimaps$CustomSetMultimap": {
        "com.google.common.collect.Multimaps$CustomSetMultimap:createKeySet()": "/**\n* Creates a set of keys from the collection.\n* @return a Set containing the keys\n*/",
        "com.google.common.collect.Multimaps$CustomSetMultimap:createAsMap()": "/**\n* Creates a map with collections of values.\n* @return Map of keys to collections of values\n*/",
        "com.google.common.collect.Multimaps$CustomSetMultimap:createCollection()": "/**\n* Creates and returns a new collection using the factory.\n* @return a Set of type V from the factory\n*/",
        "com.google.common.collect.Multimaps$CustomSetMultimap:wrapCollection(java.lang.Object,java.util.Collection)": "/**\n* Wraps a collection based on its type with a key.\n* @param key the key associated with the collection\n* @param collection the collection to wrap\n* @return wrapped collection of type Collection<V>\n*/",
        "com.google.common.collect.Multimaps$CustomSetMultimap:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object state to the output stream.\n* @param stream the ObjectOutputStream to write to\n* @throws IOException if an I/O error occurs during serialization\n*/",
        "com.google.common.collect.Multimaps$CustomSetMultimap:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from input stream.\n* @param stream the ObjectInputStream to read from\n* @throws IOException if an I/O error occurs\n* @throws ClassNotFoundException if a class cannot be found\n*/",
        "com.google.common.collect.Multimaps$CustomSetMultimap:<init>(java.util.Map,com.google.common.base.Supplier)": "/**\n* Initializes CustomSetMultimap with a map and a set factory.\n* @param map initial map of collections for multimap\n* @param factory supplier for creating sets\n*/",
        "com.google.common.collect.Multimaps$CustomSetMultimap:unmodifiableCollectionSubclass(java.util.Collection)": "/**\n* Returns an unmodifiable view of the given collection.\n* @param collection the collection to wrap\n* @return unmodifiable Collection\n*/"
    },
    "com.google.common.collect.Multimaps$CustomSortedSetMultimap": {
        "com.google.common.collect.Multimaps$CustomSortedSetMultimap:createKeySet()": "/**\n* Creates a set of keys from the collection.\n* @return Set of keys, potentially navigable\n*/",
        "com.google.common.collect.Multimaps$CustomSortedSetMultimap:createAsMap()": "/**\n* Creates a map with collections of values for each key.\n* @return a map of keys to collections of values\n*/",
        "com.google.common.collect.Multimaps$CustomSortedSetMultimap:createCollection()": "/**\n* Creates a new sorted set using the provided factory.\n* @return a new SortedSet of type V\n*/",
        "com.google.common.collect.Multimaps$CustomSortedSetMultimap:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object state to the output stream.\n* @param stream the output stream for serialization\n* @throws IOException if an I/O error occurs during serialization\n*/",
        "com.google.common.collect.Multimaps$CustomSortedSetMultimap:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from an ObjectInputStream.\n* @param stream the input stream to read the object data from\n* @throws IOException if an I/O error occurs\n* @throws ClassNotFoundException if a class cannot be found\n*/",
        "com.google.common.collect.Multimaps$CustomSortedSetMultimap:valueComparator()": "/**\n* Returns the comparator for values.\n* @return Comparator for values, or null if not set\n*/",
        "com.google.common.collect.Multimaps$CustomSortedSetMultimap:<init>(java.util.Map,com.google.common.base.Supplier)": "/**\n* Initializes CustomSortedSetMultimap with a map and a sorted set factory.\n* @param map initial map of collections for multimap\n* @param factory supplier for creating sorted sets\n*/"
    },
    "com.google.common.collect.Multimaps$Entries": {
        "com.google.common.collect.Multimaps$Entries:size()": "/**\n* Returns the number of entries in the multimap.\n* @return size of the multimap as an integer\n*/",
        "com.google.common.collect.Multimaps$Entries:contains(java.lang.Object)": "/**\n* Checks if the multimap contains a specific entry.\n* @param o object to check for, expected to be a Map.Entry\n* @return true if the entry exists, false otherwise\n*/",
        "com.google.common.collect.Multimaps$Entries:remove(java.lang.Object)": "/**\n* Removes an entry from the multimap if it matches the provided key-value pair.\n* @param o entry to remove, must be a Map.Entry\n* @return true if the entry was removed, false otherwise\n*/",
        "com.google.common.collect.Multimaps$Entries:clear()": "/**\n* Clears all entries in the multimap.\n*/"
    },
    "com.google.common.collect.Multimaps$MapMultimap$1": {
        "com.google.common.collect.Multimaps$MapMultimap$1:size()": "/**\n* Returns the number of entries in the map.\n* @return size of the map as an integer\n*/"
    },
    "com.google.common.collect.Multimaps$MapMultimap": {
        "com.google.common.collect.Multimaps$MapMultimap:size()": "/**\n* Returns the number of elements in the map.\n* @return the size of the map as an integer\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:containsKey(java.lang.Object)": "/**\n* Checks if the map contains the specified key.\n* @param key the key to check for presence in the map\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:containsValue(java.lang.Object)": "/**\n* Checks if the map contains the specified value.\n* @param value the value to check for presence\n* @return true if value is found, false otherwise\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:get(java.lang.Object)": "/**\n* Retrieves a set containing the value associated with the given key.\n* @param key the key to look up in the map\n* @return a set with one value if found, otherwise an empty set\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:put(java.lang.Object,java.lang.Object)": "/**\n* Unsupported operation for putting a key-value pair in the map.\n* @param key the key to be added\n* @param value the value associated with the key\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:putAll(java.lang.Object,java.lang.Iterable)": "/**\n* Throws UnsupportedOperationException when attempting to put all values for a key.\n* @param key the key for which values are to be put\n* @param values iterable collection of values to associate with the key\n* @return always throws an exception, no return value\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:putAll(com.google.common.collect.Multimap)": "/**\n* Throws UnsupportedOperationException when attempting to put all entries from a multimap.\n* @param multimap the source multimap to copy entries from\n* @return always throws an exception, does not return a boolean value\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a given key.\n* @param key the key for which values are replaced\n* @param values the new values to set for the key\n* @throws UnsupportedOperationException if not supported\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:removeAll(java.lang.Object)": "/**\n* Removes values associated with the given key from the map.\n* @param key the key whose associated values are to be removed\n* @return a set of removed values, or an empty set if key not found\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:clear()": "/**\n* Clears all entries from the map.\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:createKeySet()": "/**\n* Returns a set of keys from the map.\n* @return Set of keys contained in the map\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:createValues()": "/**\n* Returns a collection of values from the map.\n* @return Collection of values stored in the map\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:entries()": "/**\n* Returns a set of key-value pairs from the map.\n* @return Set of entries in the map\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:createEntries()": "/**\n* Creates entries, but always throws an AssertionError as it's unreachable.\n* @return Collection of entries (not applicable)\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:entryIterator()": "/**\n* Returns an iterator over the entries in the map.\n* @return Iterator for map entries (key-value pairs)\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:hashCode()": "/**\n* Returns the hash code for the object based on its map.\n* @return hash code integer value of the map\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:<init>(java.util.Map)": "/**\n* Initializes MapMultimap with a non-null map.\n* @param map the map to initialize, must not be null\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:containsEntry(java.lang.Object,java.lang.Object)": "/**\n* Checks if the map contains a specific key-value entry.\n* @param key the entry key, can be null\n* @param value the entry value, can be null\n* @return true if the entry exists, false otherwise\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes the entry with specified key and value from the map.\n* @param key the entry key, can be null\n* @param value the entry value, can be null\n* @return true if the entry was removed, false otherwise\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:createKeys()": "/**\n* Creates a Multiset of keys from the current object.\n* @return Multiset containing keys associated with the object\n*/",
        "com.google.common.collect.Multimaps$MapMultimap:createAsMap()": "/**\n* Creates a map view of the collection.\n* @return Map of keys to their corresponding collections\n*/"
    },
    "com.google.common.collect.Multimaps$TransformedEntriesListMultimap": {
        "com.google.common.collect.Multimaps$TransformedEntriesListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values associated with a key.\n* @param key the key whose values are to be replaced\n* @param values new values to associate with the key\n* @return UnsupportedOperationException is always thrown\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesListMultimap:<init>(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer)": "/**\n* Constructs a TransformedEntriesListMultimap from a source multimap and a transformer.\n* @param fromMultimap source multimap to transform entries from\n* @param transformer function to transform entries\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesListMultimap:transform(java.lang.Object,java.util.Collection)": "/**\n* Transforms a collection of values using a key and a transformer function.\n* @param key identifier for transformation\n* @param values collection of input values\n* @return list of transformed values\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesListMultimap:get(java.lang.Object)": "/**\n* Retrieves transformed values for a given key.\n* @param key identifier for value retrieval\n* @return list of transformed values or empty if none found\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesListMultimap:removeAll(java.lang.Object)": "/**\n* Removes values by key and transforms the result.\n* @param key identifier for removal\n* @return list of transformed values\n*/"
    },
    "com.google.common.collect.Multimaps$TransformedEntriesMultimap": {
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:clear()": "/**\n* Clears all entries from the multimap.\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:containsKey(java.lang.Object)": "/**\n* Checks if the specified key exists in the multimap.\n* @param key the key to check for presence\n* @return true if the key is present, false otherwise\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:createEntries()": "/**\n* Creates and returns a collection of entries.\n* @return Collection of Entry objects\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:isEmpty()": "/**\n* Checks if the multimap is empty.\n* @return true if the multimap has no elements, false otherwise\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:createKeySet()": "/**\n* Returns a set of keys from the multimap.\n* @return Set of keys contained in the multimap\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:createKeys()": "/**\n* Creates a multiset of keys from the multimap.\n* @return Multiset of keys from the multimap\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:put(java.lang.Object,java.lang.Object)": "/**\n* Unsupported operation for putting a key-value pair.\n* @param key the key to associate with the value\n* @param value the value to be stored\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:putAll(java.lang.Object,java.lang.Iterable)": "/**\n* Unsupported operation for adding multiple values for a key.\n* @param key the key to associate with the values\n* @param values iterable collection of values to add\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:putAll(com.google.common.collect.Multimap)": "/**\n* Unsupported operation to add all entries from a given multimap.\n* @param multimap the multimap to add entries from\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a given key; always throws UnsupportedOperationException.\n* @param key the key whose values are to be replaced\n* @param values new values to associate with the key\n* @return UnsupportedOperationException\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:size()": "/**\n* Returns the number of entries in the multimap.\n* @return the size of the multimap as an integer\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:<init>(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer)": "/**\n* Constructs a TransformedEntriesMultimap with a source multimap and a transformer.\n* @param fromMultimap source multimap to transform entries from\n* @param transformer function to transform entries\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:entryIterator()": "/**\n* Returns an iterator of transformed entries from the multimap.\n* @return Iterator of Entry<K, V2> after transformation\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:createValues()": "/**\n* Creates a collection of transformed values from a multimap's entries.\n* @return Collection of transformed values\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:transform(java.lang.Object,java.util.Collection)": "/**\n* Transforms a collection of values using a transformation function.\n* @param key key for transformation context\n* @param values collection of values to transform\n* @return transformed collection of V2 elements\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:createAsMap()": "/**\n* Creates a map from a multimap, transforming its entries.\n* @return transformed map with collections of values\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:get(java.lang.Object)": "/**\n* Retrieves transformed values for a given key.\n* @param key key for fetching values\n* @return collection of transformed V2 elements\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:removeAll(java.lang.Object)": "/**\n* Removes all values associated with the given key and transforms the result.\n* @param key the key whose associated values are to be removed\n* @return transformed collection of V2 elements\n*/",
        "com.google.common.collect.Multimaps$TransformedEntriesMultimap:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes a value associated with a key from the collection.\n* @param key the key for value removal\n* @param value the value to be removed\n* @return true if the value was removed, false otherwise\n*/"
    },
    "com.google.common.collect.Multimaps$UnmodifiableMultimap": {
        "com.google.common.collect.Multimaps$UnmodifiableMultimap:delegate()": "/**\n* Returns the delegate multimap instance.\n* @return Multimap containing key-value pairs\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableMultimap:clear()": "/**\n* Clears the collection; operation is unsupported.\n* @throws UnsupportedOperationException if called\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableMultimap:entries()": "/**\n* Returns a collection of entries, creating if not already initialized.\n* @return unmodifiable collection of entries\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableMultimap:get(java.lang.Object)": "/**\n* Retrieves an unmodifiable collection of values for the given key.\n* @param key the key to look up values\n* @return unmodifiable collection of values associated with the key\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableMultimap:keySet()": "/**\n* Returns an unmodifiable set of keys from the delegate.\n* @return Set of keys, cached for performance\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableMultimap:put(java.lang.Object,java.lang.Object)": "/**\n* Throws UnsupportedOperationException when attempting to put a key-value pair.\n* @param key the key to be added\n* @param value the value associated with the key\n* @return always throws an exception\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableMultimap:putAll(java.lang.Object,java.lang.Iterable)": "/**\n* Throws UnsupportedOperationException for putAll operation.\n* @param key the key to associate with the values\n* @param values the values to be associated with the key\n* @return always throws an exception, no return value\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableMultimap:putAll(com.google.common.collect.Multimap)": "/**\n* Unsupported operation to add all entries from a multimap.\n* @param multimap source multimap to add entries from\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableMultimap:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes the specified key-value pair; always throws UnsupportedOperationException.\n* @param key the key to remove\n* @param value the value associated with the key\n* @return always throws an exception\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableMultimap:removeAll(java.lang.Object)": "/**\n* Unsupported operation to remove all elements by key.\n* @param key the key to remove associated elements\n* @throws UnsupportedOperationException if called\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a given key; unsupported operation.\n* @param key the key whose values are to be replaced\n* @param values new values to associate with the key\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableMultimap:values()": "/**\n* Returns an unmodifiable collection of values.\n* @return Collection of values, initializes if null\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableMultimap:forEach(java.util.function.BiConsumer)": "/**\n* Applies a BiConsumer to each entry's key-value pair after validating it is not null.\n* @param consumer a BiConsumer to process each key-value pair\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableMultimap:<init>(com.google.common.collect.Multimap)": "/**\n* Constructs an UnmodifiableMultimap with a non-null delegate.\n* @param delegate the Multimap to wrap\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableMultimap:asMap()": "/**\n* Returns an unmodifiable view of the map of collections.\n* @return Map of keys to unmodifiable collections of values\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableMultimap:keys()": "/**\n* Returns an unmodifiable view of the multiset of keys.\n* @return Multiset of keys, wrapped as unmodifiable\n*/"
    },
    "com.google.common.collect.Multimaps$UnmodifiableListMultimap": {
        "com.google.common.collect.Multimaps$UnmodifiableListMultimap:removeAll(java.lang.Object)": "/**\n* Throws UnsupportedOperationException for removeAll operation.\n* @param key the key whose mappings are to be removed (ignored)\n* @return never returns a value\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a given key; not supported in this implementation.\n* @param key the key for which values are replaced\n* @param values iterable of new values to set\n* @return UnsupportedOperationException\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableListMultimap:delegate()": "/**\n* Returns the delegate multimap instance as ListMultimap.\n* @return ListMultimap containing key-value pairs\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableListMultimap:get(java.lang.Object)": "/**\n* Retrieves an unmodifiable list of values for the given key.\n* @param key the key to look up values\n* @return unmodifiable list of values associated with the key\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableListMultimap:<init>(com.google.common.collect.ListMultimap)": "/**\n* Constructs an UnmodifiableListMultimap with a delegate.\n* @param delegate the ListMultimap to wrap\n*/"
    },
    "com.google.common.collect.Multimaps$UnmodifiableSetMultimap": {
        "com.google.common.collect.Multimaps$UnmodifiableSetMultimap:removeAll(java.lang.Object)": "/**\n* Removes all values associated with the specified key.\n* @param key the key whose associated values are to be removed\n* @throws UnsupportedOperationException if the operation is not supported\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a given key; not supported.\n* @param key the key for which values are replaced\n* @param values new values to associate with the key\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableSetMultimap:delegate()": "/**\n* Returns the delegate multimap as a SetMultimap.\n* @return SetMultimap containing key-value pairs\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableSetMultimap:get(java.lang.Object)": "/**\n* Retrieves an unmodifiable set of values for the given key.\n* @param key the key for which values are retrieved\n* @return unmodifiable Set of values associated with the key\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableSetMultimap:<init>(com.google.common.collect.SetMultimap)": "/**\n* Constructs an UnmodifiableSetMultimap with a given SetMultimap delegate.\n* @param delegate the SetMultimap to wrap\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableSetMultimap:entries()": "/**\n* Returns an unmodifiable set of map entries.\n* @return unmodifiable set of entries from the delegate map\n*/"
    },
    "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap": {
        "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:removeAll(java.lang.Object)": "/**\n* Removes all values associated with the given key.\n* @param key the key whose associated values are to be removed\n* @throws UnsupportedOperationException if the operation is not supported\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values associated with a key; not supported.\n* @param key the key for which values are replaced\n* @param values the new values to associate with the key\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:delegate()": "/**\n* Returns the delegate as a SortedSetMultimap.\n* @return SortedSetMultimap containing key-value pairs\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:get(java.lang.Object)": "/**\n* Retrieves an unmodifiable sorted set of values for the given key.\n* @param key the key to look up values\n* @return unmodifiable sorted set of values or empty set if none found\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:valueComparator()": "/**\n* Returns the value comparator from the delegate.\n* @return Comparator for values or null if not available\n*/",
        "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:<init>(com.google.common.collect.SortedSetMultimap)": "/**\n* Constructs an UnmodifiableSortedSetMultimap from a given SortedSetMultimap delegate.\n* @param delegate the SortedSetMultimap to wrap\n*/"
    },
    "com.google.common.collect.Multisets$AbstractEntry": {
        "com.google.common.collect.Multisets$AbstractEntry:hashCode()": "/**\n* Computes the hash code using element's hash and count.\n* @return combined hash code as an integer\n*/",
        "com.google.common.collect.Multisets$AbstractEntry:toString()": "/**\n* Returns a string representation of the element and its count.\n* @return formatted string of element and its count\n*/",
        "com.google.common.collect.Multisets$AbstractEntry:equals(java.lang.Object)": "/**\n* Compares this entry to another for equality based on count and element.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.collect.Multisets$DecreasingCount": {
        "com.google.common.collect.Multisets$DecreasingCount:compare(com.google.common.collect.Multiset$Entry,com.google.common.collect.Multiset$Entry)": "/**\n* Compares two entries based on their count in descending order.\n* @param entry1 first entry to compare\n* @param entry2 second entry to compare\n* @return negative if entry1 < entry2, positive if entry1 > entry2, zero if equal\n*/"
    },
    "com.google.common.collect.Multisets$ElementSet": {
        "com.google.common.collect.Multisets$ElementSet:clear()": "/**\n* Clears all elements from the multiset.\n*/",
        "com.google.common.collect.Multisets$ElementSet:contains(java.lang.Object)": "/**\n* Checks if the multiset contains the specified object.\n* @param o object to check for presence\n* @return true if present, false otherwise\n*/",
        "com.google.common.collect.Multisets$ElementSet:containsAll(java.util.Collection)": "/**\n* Checks if the multiset contains all elements of the specified collection.\n* @param c collection of elements to check\n* @return true if all elements are present, false otherwise\n*/",
        "com.google.common.collect.Multisets$ElementSet:isEmpty()": "/**\n* Checks if the multiset is empty.\n* @return true if multiset has no elements, false otherwise\n*/",
        "com.google.common.collect.Multisets$ElementSet:remove(java.lang.Object)": "/**\n* Removes an object from the multiset.\n* @param o object to remove, can be null\n* @return true if the object was removed, false otherwise\n*/",
        "com.google.common.collect.Multisets$ElementSet:size()": "/**\n* Returns the number of entries in the multiset.\n* @return the size of the multiset\n*/"
    },
    "com.google.common.collect.Multisets$EntrySet": {
        "com.google.common.collect.Multisets$EntrySet:contains(java.lang.Object)": "/**\n* Checks if the multiset contains the specified entry with the correct count.\n* @param o potential Entry object to check\n* @return true if the entry is present with the correct count, false otherwise\n*/",
        "com.google.common.collect.Multisets$EntrySet:remove(java.lang.Object)": "/**\n* Removes the specified Multiset.Entry from the multiset.\n* @param object the entry to remove\n* @return true if removed, false if entry count is zero or not found\n*/",
        "com.google.common.collect.Multisets$EntrySet:clear()": "/**\n* Clears all elements from the multiset.\n*/"
    },
    "com.google.common.collect.Multisets$FilteredMultiset": {
        "com.google.common.collect.Multisets$FilteredMultiset:elementIterator()": "/**\n* Throws an AssertionError indicating this method should not be called.\n*/",
        "com.google.common.collect.Multisets$FilteredMultiset:entryIterator()": "/**\n* Throws an AssertionError indicating this method should not be invoked.\n*/",
        "com.google.common.collect.Multisets$FilteredMultiset:count(java.lang.Object)": "/**\n* Counts occurrences of an element if it satisfies a predicate.\n* @param element the object to count\n* @return the count if predicate is true, otherwise 0\n*/",
        "com.google.common.collect.Multisets$FilteredMultiset:<init>(com.google.common.collect.Multiset,com.google.common.base.Predicate)": "/**\n* Constructs a FilteredMultiset with an unfiltered multiset and a predicate.\n* @param unfiltered the source multiset to filter\n* @param predicate the condition to filter elements\n*/",
        "com.google.common.collect.Multisets$FilteredMultiset:add(java.lang.Object,int)": "/**\n* Adds an element if it matches a predicate, returning the count of occurrences added.\n* @param element element to add; must match the predicate\n* @param occurrences number of times to add the element\n* @return total occurrences added\n*/",
        "com.google.common.collect.Multisets$FilteredMultiset:remove(java.lang.Object,int)": "/**\n* Removes specified occurrences of an element; returns count if occurrences is 0.\n* @param element the object to remove\n* @param occurrences number of times to remove the element\n* @return number of removed occurrences\n*/",
        "com.google.common.collect.Multisets$FilteredMultiset:iterator()": "/**\n* Returns an unmodifiable iterator filtered by a predicate.\n* @return filtered UnmodifiableIterator of elements\n*/",
        "com.google.common.collect.Multisets$FilteredMultiset:createElementSet()": "/**\n* Creates a filtered set of elements based on a predicate.\n* @return a new filtered set of elements\n*/",
        "com.google.common.collect.Multisets$FilteredMultiset:createEntrySet()": "/**\n* Creates a filtered entry set based on a predicate.\n* @return Set of entries that match the predicate condition\n*/"
    },
    "com.google.common.collect.Multisets$MultisetIteratorImpl": {
        "com.google.common.collect.Multisets$MultisetIteratorImpl:<init>(com.google.common.collect.Multiset,java.util.Iterator)": "/**\n* Constructs a MultisetIteratorImpl with specified multiset and entry iterator.\n* @param multiset the multiset to iterate over\n* @param entryIterator iterator for multiset entries\n*/",
        "com.google.common.collect.Multisets$MultisetIteratorImpl:hasNext()": "/**\n* Checks if there are more elements to iterate.\n* @return true if more elements are available, false otherwise\n*/",
        "com.google.common.collect.Multisets$MultisetIteratorImpl:next()": "/**\n* Retrieves the next element in the iteration.\n* @return the next element\n* @throws NoSuchElementException if no more elements are available\n*/",
        "com.google.common.collect.Multisets$MultisetIteratorImpl:remove()": "/**\n* Removes an entry from the multiset if allowed.\n* @param canRemove indicates if removal is permitted\n*/"
    },
    "com.google.common.collect.Multisets$UnmodifiableMultiset": {
        "com.google.common.collect.Multisets$UnmodifiableMultiset:createElementSet()": "/**\n* Creates an unmodifiable set of elements from the delegate.\n* @return unmodifiable Set of elements\n*/",
        "com.google.common.collect.Multisets$UnmodifiableMultiset:entrySet()": "/**\n* Returns an unmodifiable set of multiset entries.\n* @return Set of Multiset.Entry objects\n*/",
        "com.google.common.collect.Multisets$UnmodifiableMultiset:add(java.lang.Object)": "/**\n* Throws UnsupportedOperationException when attempting to add an element.\n* @param element the element to add (not supported)\n* @return always throws an exception\n*/",
        "com.google.common.collect.Multisets$UnmodifiableMultiset:add(java.lang.Object,int)": "/**\n* Adds an element a specified number of times.\n* @param element the element to add\n* @param occurrences number of times to add the element\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Multisets$UnmodifiableMultiset:addAll(java.util.Collection)": "/**\n* Unsupported operation for adding multiple elements to the collection.\n* @param elementsToAdd collection of elements to add\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Multisets$UnmodifiableMultiset:remove(java.lang.Object)": "/**\n* Attempts to remove an element; always throws UnsupportedOperationException.\n* @param element the object to remove, may be null\n* @return always throws an exception\n*/",
        "com.google.common.collect.Multisets$UnmodifiableMultiset:remove(java.lang.Object,int)": "/**\n* Removes specified occurrences of an element.\n* @param element the element to remove, may be null\n* @param occurrences number of times to remove the element\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Multisets$UnmodifiableMultiset:removeAll(java.util.Collection)": "/**\n* Unsupported operation to remove all specified elements from the collection.\n* @param elementsToRemove collection of elements to remove\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Multisets$UnmodifiableMultiset:retainAll(java.util.Collection)": "/**\n* Unsupported operation to retain specified elements in the collection.\n* @param elementsToRetain collection of elements to retain\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Multisets$UnmodifiableMultiset:clear()": "/**\n* Clears the collection, but operation is unsupported.\n* @throws UnsupportedOperationException if called\n*/",
        "com.google.common.collect.Multisets$UnmodifiableMultiset:setCount(java.lang.Object,int)": "/**\n* Sets the count for the specified element.\n* @param element the element to set the count for\n* @param count the new count value\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Multisets$UnmodifiableMultiset:setCount(java.lang.Object,int,int)": "/**\n* Sets the count for a given element, but operation is unsupported.\n* @param element the element to set the count for\n* @param oldCount the current count of the element\n* @param newCount the new count to set for the element\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Multisets$UnmodifiableMultiset:delegate()": "/**\n* Returns the delegate Multiset instance.\n* @return casted Multiset of type E\n*/",
        "com.google.common.collect.Multisets$UnmodifiableMultiset:elementSet()": "/**\n* Retrieves the element set, creating it if not already initialized.\n* @return Set of elements, either existing or newly created\n*/",
        "com.google.common.collect.Multisets$UnmodifiableMultiset:iterator()": "/**\n* Returns an unmodifiable iterator of the delegate's elements.\n* @return an unmodifiable Iterator of type E\n*/",
        "com.google.common.collect.Multisets$UnmodifiableMultiset:<init>(com.google.common.collect.Multiset)": "/**\n* Creates an unmodifiable multiset from the given delegate.\n* @param delegate a multiset to wrap as unmodifiable\n*/"
    },
    "com.google.common.collect.Multisets$ViewMultiset": {
        "com.google.common.collect.Multisets$ViewMultiset:clear()": "/**\n* Clears all elements from the set.\n*/",
        "com.google.common.collect.Multisets$ViewMultiset:distinctElements()": "/**\n* Returns the count of distinct elements in the collection.\n* @return number of unique elements\n*/",
        "com.google.common.collect.Multisets$ViewMultiset:size()": "/**\n* Returns the total count of entries in the current multiset.\n* @return total count as an int\n*/",
        "com.google.common.collect.Multisets$ViewMultiset:iterator()": "/**\n* Returns an iterator over the elements in this collection.\n* @return Iterator for the collection elements\n*/"
    },
    "com.google.common.collect.MutableClassToInstanceMap$1": {
        "com.google.common.collect.MutableClassToInstanceMap$1:delegate()": "/**\n* Returns the delegate map of class types to their corresponding instances.\n* @return Map of class types to instances\n*/",
        "com.google.common.collect.MutableClassToInstanceMap$1:setValue(java.lang.Object)": "/**\n* Sets the value and returns the previous value.\n* @param value new value to set\n* @return previous value of type V\n*/"
    },
    "com.google.common.collect.MutableClassToInstanceMap": {
        "com.google.common.collect.MutableClassToInstanceMap:delegate()": "/**\n* Returns the delegate map of class types to their corresponding instances.\n* @return Map of class types to instances of type B\n*/",
        "com.google.common.collect.MutableClassToInstanceMap:checkedEntry(java.util.Map$Entry)": "/**\n* Creates a checked entry that enforces type constraints on values.\n* @param entry the original map entry to wrap\n* @return a new entry with type checks applied\n*/",
        "com.google.common.collect.MutableClassToInstanceMap:entrySet()": "/**\n* Returns a set of entries mapping class types to instances.\n* @return Set of class-instance entries\n*/",
        "com.google.common.collect.MutableClassToInstanceMap:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; throws exception to enforce SerializedForm usage.\n* @param stream the input stream for deserialization\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.collect.MutableClassToInstanceMap:writeReplace()": "/**\n* Prepares object for serialization using SerializedForm.\n* @return SerializedForm instance for the object\n*/",
        "com.google.common.collect.MutableClassToInstanceMap:cast(java.lang.Class,java.lang.Object)": "/**\n* Casts an object to the specified type using wrapper classes.\n* @param type the target class type\n* @param value the object to cast\n* @return the casted object or null if not applicable\n*/",
        "com.google.common.collect.MutableClassToInstanceMap:<init>(java.util.Map)": "/**\n* Constructs MutableClassToInstanceMap with a non-null delegate map.\n* @param delegate map of class types to instances\n*/",
        "com.google.common.collect.MutableClassToInstanceMap:getInstance(java.lang.Class)": "/**\n* Retrieves an instance of the specified type.\n* @param type the class type to retrieve\n* @return instance of type T or null if not found\n*/",
        "com.google.common.collect.MutableClassToInstanceMap:create()": "/**\n* Creates a MutableClassToInstanceMap with an empty HashMap.\n* @return a new MutableClassToInstanceMap instance\n*/",
        "com.google.common.collect.MutableClassToInstanceMap:create(java.util.Map)": "/**\n* Creates a MutableClassToInstanceMap from a given backing map.\n* @param backingMap map of class types to instances\n* @return MutableClassToInstanceMap containing the instances\n*/",
        "com.google.common.collect.MutableClassToInstanceMap:put(java.lang.Class,java.lang.Object)": "/**\n* Puts a key-value pair in the map after casting the key.\n* @param key class type as key, @param value associated value\n* @return previous value or null if none existed\n*/",
        "com.google.common.collect.MutableClassToInstanceMap:putAll(java.util.Map)": "/**\n* Inserts mappings from the provided map after casting keys and values.\n* @param map mappings to be added\n*/",
        "com.google.common.collect.MutableClassToInstanceMap:putInstance(java.lang.Class,java.lang.Object)": "/**\n* Inserts a value of specified type and returns the casted instance.\n* @param type the class type for the value\n* @param value the value to insert\n* @return casted instance or null if operation fails\n*/"
    },
    "com.google.common.collect.MutableClassToInstanceMap$SerializedForm": {
        "com.google.common.collect.MutableClassToInstanceMap$SerializedForm:<init>(java.util.Map)": "/**\n* Constructs SerializedForm with a backing map.\n* @param backingMap a map of class types to their corresponding objects\n*/",
        "com.google.common.collect.MutableClassToInstanceMap$SerializedForm:readResolve()": "/**\n* Resolves an object by creating it from a backing map.\n* @return Object created from the backingMap\n*/"
    },
    "com.google.common.collect.NullsFirstOrdering": {
        "com.google.common.collect.NullsFirstOrdering:compare(java.lang.Object,java.lang.Object)": "/**\n* Compares two objects for order; handles null values.\n* @param left first object to compare\n* @param right second object to compare\n* @return comparison result: negative, zero, or positive\n*/",
        "com.google.common.collect.NullsFirstOrdering:equals(java.lang.Object)": "/**\n* Compares this object to another for equality.\n* @param object the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.NullsFirstOrdering:hashCode()": "/**\n* Computes the hash code using ordering's hash and a constant.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.NullsFirstOrdering:toString()": "/**\n* Returns a string representation of the ordering with nulls first.\n* @return formatted string of the ordering\n*/",
        "com.google.common.collect.NullsFirstOrdering:<init>(com.google.common.collect.Ordering)": "/**\n* Constructs NullsFirstOrdering with specified ordering.\n* @param ordering the underlying Ordering to use\n*/",
        "com.google.common.collect.NullsFirstOrdering:nullsLast()": "/**\n* Returns an Ordering that places nulls at the end.\n* @param <S> type extending T, nullable\n* @return Ordering for nullable elements of type S\n*/",
        "com.google.common.collect.NullsFirstOrdering:reverse()": "/**\n* Returns a reversed ordering with nulls placed last.\n* @return Ordering object for type S extending T\n*/"
    },
    "com.google.common.collect.NullsLastOrdering": {
        "com.google.common.collect.NullsLastOrdering:compare(java.lang.Object,java.lang.Object)": "/**\n* Compares two objects, returning comparison result or handling nulls.\n* @param left first object to compare\n* @param right second object to compare\n* @return negative if left < right, positive if left > right, zero if equal\n*/",
        "com.google.common.collect.NullsLastOrdering:equals(java.lang.Object)": "/**\n* Compares this object to another for equality.\n* @param object the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.NullsLastOrdering:hashCode()": "/**\n* Computes the hash code based on ordering.\n* @return hash code as an integer\n*/",
        "com.google.common.collect.NullsLastOrdering:toString()": "/**\n* Returns a string representation of the ordering with nullsLast() appended.\n* @return formatted string of ordering\n*/",
        "com.google.common.collect.NullsLastOrdering:<init>(com.google.common.collect.Ordering)": "/**\n* Constructs NullsLastOrdering with the specified Ordering.\n* @param ordering the Ordering to be used for comparison\n*/",
        "com.google.common.collect.NullsLastOrdering:nullsFirst()": "/**\n* Returns an Ordering prioritizing null values first.\n* @return Ordering object with nulls handled at the beginning\n*/",
        "com.google.common.collect.NullsLastOrdering:reverse()": "/**\n* Returns a reversed ordering with nulls prioritized first.\n* @return Ordering object with reversed order and nulls first\n*/"
    },
    "com.google.common.collect.Ordering$ArbitraryOrdering": {
        "com.google.common.collect.Ordering$ArbitraryOrdering:getUid(java.lang.Object)": "/**\n* Retrieves or generates a unique ID for the given object.\n* @param obj the object to get the unique ID for\n* @return unique integer ID associated with the object\n*/",
        "com.google.common.collect.Ordering$ArbitraryOrdering:identityHashCode(java.lang.Object)": "/**\n* Returns the identity hash code of the given object.\n* @param object the object to compute the hash code for\n* @return the identity hash code as an integer\n*/",
        "com.google.common.collect.Ordering$ArbitraryOrdering:compare(java.lang.Object,java.lang.Object)": "/**\n* Compares two objects based on identity hash code and unique ID.\n* @param left first object to compare\n* @param right second object to compare\n* @return negative if left < right, positive if left > right, zero if equal\n*/"
    },
    "com.google.common.collect.Queues": {
        "com.google.common.collect.Queues:<init>()": "/**\n* Private constructor to prevent instantiation of the Queues class.\n*/",
        "com.google.common.collect.Queues:newArrayBlockingQueue(int)": "/**\n* Creates a new ArrayBlockingQueue with specified capacity.\n* @param capacity maximum number of elements in the queue\n* @return a new ArrayBlockingQueue instance\n*/",
        "com.google.common.collect.Queues:newArrayDeque()": "/**\n* Creates and returns a new empty ArrayDeque instance.\n* @return a new ArrayDeque object\n*/",
        "com.google.common.collect.Queues:newConcurrentLinkedQueue()": "/**\n* Creates a new instance of ConcurrentLinkedQueue.\n* @return a new ConcurrentLinkedQueue object\n*/",
        "com.google.common.collect.Queues:newLinkedBlockingDeque()": "/**\n* Creates a new instance of LinkedBlockingDeque.\n* @return a new LinkedBlockingDeque instance\n*/",
        "com.google.common.collect.Queues:newLinkedBlockingDeque(int)": "/**\n* Creates a new LinkedBlockingDeque with specified capacity.\n* @param capacity maximum number of elements in the deque\n* @return a LinkedBlockingDeque instance\n*/",
        "com.google.common.collect.Queues:newLinkedBlockingQueue()": "/**\n* Creates a new instance of LinkedBlockingQueue.\n* @return a new LinkedBlockingQueue object\n*/",
        "com.google.common.collect.Queues:newLinkedBlockingQueue(int)": "/**\n* Creates a new LinkedBlockingQueue with specified capacity.\n* @param capacity maximum number of elements in the queue\n* @return a new LinkedBlockingQueue instance\n*/",
        "com.google.common.collect.Queues:newPriorityBlockingQueue()": "/**\n* Creates a new instance of PriorityBlockingQueue.\n* @return a new PriorityBlockingQueue of comparable elements\n*/",
        "com.google.common.collect.Queues:newPriorityQueue()": "/**\n* Creates a new empty PriorityQueue.\n* @return a new instance of PriorityQueue\n*/",
        "com.google.common.collect.Queues:newSynchronousQueue()": "/**\n* Creates a new empty SynchronousQueue instance.\n* @return a new SynchronousQueue of type E\n*/",
        "com.google.common.collect.Queues:drain(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit)": "/**\n* Drains elements from a BlockingQueue into a buffer with a timeout.\n* @param q the queue to drain from\n* @param buffer collection to store drained elements\n* @param numElements maximum elements to drain\n* @param timeout duration to wait for elements\n* @param unit time unit for the timeout\n* @return number of elements successfully drained\n*/",
        "com.google.common.collect.Queues:drainUninterruptibly(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit)": "/**\n* Drains elements from a BlockingQueue to a buffer, respecting timeout.\n* @param q the source queue, @param buffer the collection to fill, \n* @param numElements max elements to drain, @param timeout max wait time, @param unit time unit\n* @return number of elements added to the buffer\n*/",
        "com.google.common.collect.Queues:drain(java.util.concurrent.BlockingQueue,java.util.Collection,int,java.time.Duration)": "/**\n* Drains elements from a BlockingQueue into a buffer with a timeout.\n* @param q the queue to drain from\n* @param buffer collection to store drained elements\n* @param numElements maximum elements to drain\n* @param timeout duration to wait for elements\n* @return number of elements successfully drained\n*/",
        "com.google.common.collect.Queues:drainUninterruptibly(java.util.concurrent.BlockingQueue,java.util.Collection,int,java.time.Duration)": "/**\n* Drains elements from a BlockingQueue to a buffer without interruption.\n* @param q source queue, @param buffer collection to fill, @param numElements max to drain, @param timeout max wait duration\n* @return number of elements added to the buffer\n*/",
        "com.google.common.collect.Queues:synchronizedQueue(java.util.Queue)": "/**\n* Returns a synchronized version of the provided queue.\n* @param queue the queue to synchronize\n* @return a synchronized Queue instance\n*/",
        "com.google.common.collect.Queues:newArrayDeque(java.lang.Iterable)": "/**\n* Creates a new ArrayDeque from the given elements.\n* @param elements source of elements to add\n* @return ArrayDeque containing the elements\n*/",
        "com.google.common.collect.Queues:newConcurrentLinkedQueue(java.lang.Iterable)": "/**\n* Creates a ConcurrentLinkedQueue from the given elements.\n* @param elements source of elements to add\n* @return new ConcurrentLinkedQueue containing the elements\n*/",
        "com.google.common.collect.Queues:newLinkedBlockingDeque(java.lang.Iterable)": "/**\n* Creates a new LinkedBlockingDeque from the given elements.\n* @param elements source of elements to add\n* @return LinkedBlockingDeque containing the elements\n*/",
        "com.google.common.collect.Queues:newLinkedBlockingQueue(java.lang.Iterable)": "/**\n* Creates a LinkedBlockingQueue from an iterable of elements.\n* @param elements source of elements to add\n* @return LinkedBlockingQueue containing the elements\n*/",
        "com.google.common.collect.Queues:newPriorityBlockingQueue(java.lang.Iterable)": "/**\n* Creates a new PriorityBlockingQueue from the provided elements.\n* @param elements source of elements to add\n* @return a PriorityBlockingQueue containing the elements\n*/",
        "com.google.common.collect.Queues:newPriorityQueue(java.lang.Iterable)": "/**\n* Creates a new priority queue from the given elements.\n* @param elements source of elements to add\n* @return PriorityQueue containing the elements\n*/",
        "com.google.common.collect.Queues:synchronizedDeque(java.util.Deque)": "/**\n* Creates a synchronized deque from the provided deque.\n* @param deque the deque to synchronize\n* @return a synchronized Deque instance\n*/"
    },
    "com.google.common.collect.RangeSet": {
        "com.google.common.collect.RangeSet:enclosesAll(java.lang.Iterable)": "/**\n* Checks if the current range encloses all provided ranges.\n* @param other an iterable of ranges to check\n* @return true if all ranges are enclosed, false otherwise\n*/",
        "com.google.common.collect.RangeSet:addAll(java.lang.Iterable)": "/**\n* Adds all specified ranges to the collection.\n* @param ranges iterable of Range objects to add\n*/",
        "com.google.common.collect.RangeSet:removeAll(java.lang.Iterable)": "/**\n* Removes all specified ranges from the collection.\n* @param ranges iterable of Range objects to be removed\n*/"
    },
    "com.google.common.collect.RegularContiguousSet": {
        "com.google.common.collect.RegularContiguousSet:last()": "/**\n* Retrieves the last element in the range.\n* @return the greatest value below the upper bound of the range\n*/",
        "com.google.common.collect.RegularContiguousSet:first()": "/**\n* Retrieves the first element in the range above the domain.\n* @return the first element of type C in the range\n*/",
        "com.google.common.collect.RegularContiguousSet:createAsList()": "/**\n* Creates an immutable list representation of the set.\n* @return ImmutableList of elements from the set\n*/",
        "com.google.common.collect.RegularContiguousSet:writeReplace()": "/**\n* Serializes the object for replacement during serialization.\n* @return SerializedForm containing range and domain data\n*/",
        "com.google.common.collect.RegularContiguousSet:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization of the object; throws an exception if invoked.\n* @param stream the ObjectInputStream to read from\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.collect.RegularContiguousSet:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return false, as this view is not partial\n*/",
        "com.google.common.collect.RegularContiguousSet:hashCode()": "/**\n* Computes the hash code for this object.\n* @return the computed hash code as an integer\n*/",
        "com.google.common.collect.RegularContiguousSet:containsAll(java.util.Collection)": "/**\n* Checks if this collection contains all elements of the specified targets.\n* @param targets collection of elements to check for presence\n* @return true if all targets are present, false otherwise\n*/",
        "com.google.common.collect.RegularContiguousSet:equalsOrThrow(java.lang.Comparable,java.lang.Comparable)": "/**\n* Checks if two Comparable objects are equal.\n* @param left first object to compare\n* @param right second object to compare, may be null\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.RegularContiguousSet:descendingIterator()": "/**\n* Returns an iterator for the elements in descending order.\n* @return UnmodifiableIterator of elements or null if at the end\n*/",
        "com.google.common.collect.RegularContiguousSet:iterator()": "/**\n* Returns an iterator over elements in the sequence.\n* @return UnmodifiableIterator of type C for the sequence\n*/",
        "com.google.common.collect.RegularContiguousSet:size()": "/**\n* Calculates the number of elements in the range.\n* @return size as an integer, capped at Integer.MAX_VALUE\n*/",
        "com.google.common.collect.RegularContiguousSet:equals(java.lang.Object)": "/**\n* Compares this set to another for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.RegularContiguousSet:contains(java.lang.Object)": "/**** Checks if the object is within the specified range. \n* @param object the object to check \n* @return true if within range, false otherwise \n*/",
        "com.google.common.collect.RegularContiguousSet:<init>(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)": "/**\n* Initializes a RegularContiguousSet with a specified range and discrete domain.\n* @param range the range of elements in the set\n* @param domain the discrete domain for the set elements\n*/",
        "com.google.common.collect.RegularContiguousSet:indexOf(java.lang.Object)": "/**\n* Finds the index of the target object in the domain.\n* @param target object to find; returns -1 if not found\n* @return index of the target or -1 if not present\n*/",
        "com.google.common.collect.RegularContiguousSet:range(com.google.common.collect.BoundType,com.google.common.collect.BoundType)": "/**\n* Generates a Range object with specified bound types.\n* @param lowerBoundType type of the lower bound\n* @param upperBoundType type of the upper bound\n* @return Range object defined by the bounds\n*/",
        "com.google.common.collect.RegularContiguousSet:range()": "/**\n* Returns a closed Range object.\n* @return Range defined by closed bounds\n*/",
        "com.google.common.collect.RegularContiguousSet:intersectionInCurrentDomain(com.google.common.collect.Range)": "/**\n* Computes the intersection of two ranges in the current domain.\n* @param other the range to intersect with\n* @return ContiguousSet of the intersection or an empty set if not connected\n*/",
        "com.google.common.collect.RegularContiguousSet:intersection(com.google.common.collect.ContiguousSet)": "/**\n* Computes the intersection of two ContiguousSets.\n* @param other the set to intersect with\n* @return the intersected ContiguousSet or empty set if no overlap\n*/",
        "com.google.common.collect.RegularContiguousSet:headSetImpl(java.lang.Comparable,boolean)": "/**\n* Returns a head set of elements up to a given element.\n* @param toElement the upper bound element\n* @param inclusive true to include the upper bound\n* @return ContiguousSet of elements up to the specified element\n*/",
        "com.google.common.collect.RegularContiguousSet:subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)": "/**\n* Creates a subset within a range defined by fromElement and toElement.\n* @param fromElement starting element of the subset\n* @param fromInclusive true if starting element is included\n* @param toElement ending element of the subset\n* @param toInclusive true if ending element is included\n* @return ContiguousSet of the defined range or an empty set if invalid\n*/",
        "com.google.common.collect.RegularContiguousSet:tailSetImpl(java.lang.Comparable,boolean)": "/**\n* Returns a tail set starting from a specified element.\n* @param fromElement the starting element of the tail set\n* @param inclusive true for including the starting element\n* @return ContiguousSet from the specified element onward\n*/",
        "com.google.common.collect.RegularContiguousSet:headSetImpl(java.lang.Object,boolean)": "/**\n* Returns a head set of elements up to a specified element.\n* @param toElement the upper bound element\n* @param inclusive true to include the upper bound\n* @return ContiguousSet of elements up to the specified element\n*/",
        "com.google.common.collect.RegularContiguousSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Creates a subset within a specified range of elements.\n* @param fromElement starting element of the subset\n* @param fromInclusive true if starting element is included\n* @param toElement ending element of the subset\n* @param toInclusive true if ending element is included\n* @return ContiguousSet of the defined range or an empty set if invalid\n*/",
        "com.google.common.collect.RegularContiguousSet:tailSetImpl(java.lang.Object,boolean)": "/**\n* Returns a tail set starting from a specified element.\n* @param fromElement the starting element of the tail set\n* @param inclusive true for including the starting element\n* @return ContiguousSet from the specified element onward\n*/"
    },
    "com.google.common.collect.RegularContiguousSet$SerializedForm": {
        "com.google.common.collect.RegularContiguousSet$SerializedForm:<init>(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)": "/**\n* Constructs a SerializedForm with specified range and discrete domain.\n* @param range the range of values\n* @param domain the discrete domain of values\n*/",
        "com.google.common.collect.RegularContiguousSet$SerializedForm:readResolve()": "/**\n* Resolves the object during deserialization.\n* @return new RegularContiguousSet with specified range and domain\n*/"
    },
    "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet": {
        "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:hashCode()": "/**\n* Returns the hash code of the object.\n* @return integer hash code value\n*/",
        "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:createAsList()": "/**\n* Creates an immutable list of entries with reversed key-value pairs.\n* @return ImmutableList of Entry objects\n*/",
        "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:map()": "/**\n* Returns the inverse map of the current instance.\n* @return ImmutableMap of values to keys\n*/",
        "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:forEach(java.util.function.Consumer)": "/**\n* Applies the given action to each entry in the collection.\n* @param action the function to apply to each entry\n*/",
        "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:iterator()": "/**\n* Returns an unmodifiable iterator for the collection entries.\n* @return UnmodifiableIterator of Entry<V, K> objects\n*/"
    },
    "com.google.common.collect.RegularImmutableBiMap$Inverse": {
        "com.google.common.collect.RegularImmutableBiMap$Inverse:inverse()": "/**\n* Returns the inverse of the ImmutableBiMap.\n* @return the same ImmutableBiMap instance\n*/",
        "com.google.common.collect.RegularImmutableBiMap$Inverse:createEntrySet()": "/**\n* Creates an immutable set of entries for the inverse mapping.\n* @return ImmutableSet of entry pairs (V, K)\n*/",
        "com.google.common.collect.RegularImmutableBiMap$Inverse:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization of the object.\n* @param stream the ObjectInputStream used for reading\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.collect.RegularImmutableBiMap$Inverse:isPartialView()": "/**\n* Indicates if the view is partial.\n* @return false, as the view is not partial\n*/",
        "com.google.common.collect.RegularImmutableBiMap$Inverse:createKeySet()": "/**\n* Creates an immutable key set from the current instance.\n* @return ImmutableSet of keys\n*/",
        "com.google.common.collect.RegularImmutableBiMap$Inverse:size()": "/**\n* Returns the size of the inverse ImmutableBiMap.\n* @return the number of entries in the inverse map\n*/",
        "com.google.common.collect.RegularImmutableBiMap$Inverse:get(java.lang.Object)": "/**\n* Retrieves the key associated with the given value from the value table.\n* @param value the value to search for\n* @return the corresponding key or null if not found\n*/",
        "com.google.common.collect.RegularImmutableBiMap$Inverse:writeReplace()": "/**\n* Replaces the object with its inverse representation for serialization.\n* @return InverseSerializedForm of the current ImmutableBiMap\n*/",
        "com.google.common.collect.RegularImmutableBiMap$Inverse:forEach(java.util.function.BiConsumer)": "/**\n* Applies action to each entry in the map with reversed key-value pairs.\n* @param action the action to apply to each value-key pair\n*/"
    },
    "com.google.common.collect.ImmutableMapEntry": {
        "com.google.common.collect.ImmutableMapEntry:getNextInValueBucket()": "/**\n* Retrieves the next entry in the value bucket.\n* @return ImmutableMapEntry or null if no next entry exists\n*/",
        "com.google.common.collect.ImmutableMapEntry:createEntryArray(int)": "/**\n* Creates an array of ImmutableMapEntry with specified size.\n* @param size the desired array length\n* @return an array of ImmutableMapEntry with generic types K and V\n*/",
        "com.google.common.collect.ImmutableMapEntry:isReusable()": "/**\n* Checks if the current object is reusable.\n* @return true if reusable, false otherwise\n*/",
        "com.google.common.collect.ImmutableMapEntry:getNextInKeyBucket()": "/**\n* Retrieves the next entry in the key bucket.\n* @return next ImmutableMapEntry or null if none exists\n*/",
        "com.google.common.collect.ImmutableMapEntry:<init>(java.lang.Object,java.lang.Object)": "/**\n* Constructs an ImmutableMapEntry with key and value.\n* @param key the entry key; must not be null\n* @param value the entry value; must not be null\n*/"
    },
    "com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm": {
        "com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm:<init>(com.google.common.collect.ImmutableBiMap)": "/**\n* Initializes InverseSerializedForm with a given ImmutableBiMap.\n* @param forward the ImmutableBiMap to be used\n*/",
        "com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm:readResolve()": "/**\n* Resolves serialization by returning the inverse of the forward ImmutableBiMap.\n* @return an ImmutableBiMap with inverted key-value pairs\n*/"
    },
    "com.google.common.collect.RegularImmutableList": {
        "com.google.common.collect.RegularImmutableList:copyIntoArray(java.lang.Object[],int)": "/**\n* Copies elements from the internal array to the destination array.\n* @param dst destination array to copy to\n* @param dstOff offset in the destination array\n* @return new offset after copying elements\n*/",
        "com.google.common.collect.RegularImmutableList:listIterator(int)": "/**\n* Returns an unmodifiable list iterator starting at the specified index.\n* @param index the starting position of the iterator\n* @return an UnmodifiableListIterator for the array elements\n*/",
        "com.google.common.collect.RegularImmutableList:spliterator()": "/**\n* Returns a Spliterator for the underlying array.\n* @return Spliterator for traversing elements of the array\n*/",
        "com.google.common.collect.RegularImmutableList:isPartialView()": "/**\n* Indicates if the view is partial.\n* @return false, as the view is not partial\n*/",
        "com.google.common.collect.RegularImmutableList:<init>(java.lang.Object[])": "/**\n* Constructs a RegularImmutableList from the given array.\n* @param array elements to be stored in the list\n*/"
    },
    "com.google.common.collect.RegularImmutableMap$KeySet$SerializedForm": {
        "com.google.common.collect.RegularImmutableMap$KeySet$SerializedForm:<init>(com.google.common.collect.ImmutableMap)": "/**\n* Constructs SerializedForm with a given immutable map.\n* @param map an immutable map to initialize the SerializedForm\n*/",
        "com.google.common.collect.RegularImmutableMap$KeySet$SerializedForm:readResolve()": "/**\n* Returns the key set of the map for serialization resolution.\n* @return ImmutableSet of keys from the map\n*/"
    },
    "com.google.common.collect.RegularImmutableMap$KeySet": {
        "com.google.common.collect.RegularImmutableMap$KeySet:<init>(com.google.common.collect.RegularImmutableMap)": "/**\n* Initializes KeySet with a given immutable map.\n* @param map the immutable map to associate with this KeySet\n*/",
        "com.google.common.collect.RegularImmutableMap$KeySet:get(int)": "/**\n* Retrieves the key at the specified index from the entries map.\n* @param index position of the entry in the map\n* @return key associated with the entry at the given index\n*/",
        "com.google.common.collect.RegularImmutableMap$KeySet:contains(java.lang.Object)": "/**\n* Checks if the map contains the specified object as a key.\n* @param object the key to check for presence in the map\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.RegularImmutableMap$KeySet:isPartialView()": "/**\n* Indicates whether the view is a partial view.\n* @return true if it is a partial view, false otherwise\n*/",
        "com.google.common.collect.RegularImmutableMap$KeySet:size()": "/**** Returns the number of entries in the collection. @return the size of the entries array */"
    },
    "com.google.common.collect.RegularImmutableMap": {
        "com.google.common.collect.RegularImmutableMap:size()": "/**\n* Returns the number of entries in the collection.\n* @return the size of the entries array\n*/",
        "com.google.common.collect.RegularImmutableMap:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return false, as this view is not partial\n*/",
        "com.google.common.collect.RegularImmutableMap:forEach(java.util.function.BiConsumer)": "/**\n* Applies the given action to each key-value pair in the entries.\n* @param action the action to be applied to each entry\n*/",
        "com.google.common.collect.RegularImmutableMap:<init>(java.util.Map$Entry[],com.google.common.collect.ImmutableMapEntry[],int)": "/**\n* Constructs a RegularImmutableMap with specified entries and table.\n* @param entries key-value pairs for the map\n* @param table hash table for entries\n* @param mask bitmask for hash table\n*/",
        "com.google.common.collect.RegularImmutableMap:removeDuplicates(java.util.Map$Entry[],int,int,java.util.IdentityHashMap)": "/**\n* Removes duplicate entries from an array.\n* @param entries array of entries to filter\n* @param n current size of the entries array\n* @param newN size of the filtered array\n* @param duplicates map tracking duplicate status\n* @return array of unique entries\n*/",
        "com.google.common.collect.RegularImmutableMap:createKeySet()": "/**\n* Creates an immutable set of keys for the current object.\n* @return ImmutableSet containing keys\n*/",
        "com.google.common.collect.RegularImmutableMap:checkNoConflictInKeyBucket(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry,boolean)": "/**\n* Checks for key conflicts in a bucket; returns entry or null.\n* @param key key to check for conflicts\n* @param newValue new value associated with the key\n* @param keyBucketHead head of the key bucket\n* @param throwIfDuplicateKeys flag to throw on duplicates\n* @return ImmutableMapEntry if conflict exists, otherwise null\n*/",
        "com.google.common.collect.RegularImmutableMap:get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)": "/**\n* Retrieves value by key from the keyTable, returning null if not found.\n* @param key the key to search for\n* @param keyTable array of ImmutableMapEntry for lookup\n* @param mask bitmask for index calculation\n* @return value associated with key or null if absent\n*/",
        "com.google.common.collect.RegularImmutableMap:makeImmutable(java.util.Map$Entry,java.lang.Object,java.lang.Object)": "/**\n* Creates an ImmutableMapEntry from an existing entry or new key-value pair.\n* @param entry existing entry to check for reusability\n* @param key new entry key\n* @param value new entry value\n* @return ImmutableMapEntry based on reusability\n*/",
        "com.google.common.collect.RegularImmutableMap:get(java.lang.Object)": "/**\n* Retrieves value associated with the given key.\n* @param key the key to search for\n* @return value associated with key or null if absent\n*/",
        "com.google.common.collect.RegularImmutableMap:fromEntryArrayCheckingBucketOverflow(int,java.util.Map$Entry[],boolean)": "/**\n* Creates an ImmutableMap from entry array, checking for duplicates and bucket overflow.\n* @param n number of entries in the array\n* @param entryArray array of key-value entries\n* @param throwIfDuplicateKeys flag to throw on duplicate keys\n* @return ImmutableMap constructed from the entries\n* @throws BucketOverflowException if bucket overflow occurs\n*/",
        "com.google.common.collect.RegularImmutableMap:makeImmutable(java.util.Map$Entry)": "/**\n* Creates an ImmutableMapEntry from an existing entry.\n* @param entry existing entry to check for reusability\n* @return ImmutableMapEntry based on reusability\n*/",
        "com.google.common.collect.RegularImmutableMap:createValues()": "/**\n* Creates an ImmutableCollection of Values from the current instance.\n* @return ImmutableCollection containing Values objects\n*/",
        "com.google.common.collect.RegularImmutableMap:fromEntryArray(int,java.util.Map$Entry[],boolean)": "/**\n* Creates an ImmutableMap from an entry array, handling duplicates and bucket overflow.\n* @param n number of entries to process\n* @param entryArray array of key-value pairs\n* @param throwIfDuplicateKeys flag to throw on duplicate keys\n* @return ImmutableMap constructed from the entries\n*/",
        "com.google.common.collect.RegularImmutableMap:createEntrySet()": "/**\n* Creates an immutable set of map entries.\n* @return ImmutableSet of map entries\n*/"
    },
    "com.google.common.collect.RegularImmutableMap$Values$SerializedForm": {
        "com.google.common.collect.RegularImmutableMap$Values$SerializedForm:<init>(com.google.common.collect.ImmutableMap)": "/**\n* Constructs SerializedForm with the given immutable map.\n* @param map an immutable map to be serialized\n*/",
        "com.google.common.collect.RegularImmutableMap$Values$SerializedForm:readResolve()": "/**\n* Returns the values from the map for serialization resolution.\n* @return ImmutableCollection of values from the map\n*/"
    },
    "com.google.common.collect.RegularImmutableMap$Values": {
        "com.google.common.collect.RegularImmutableMap$Values:get(int)": "/**\n* Retrieves the value at the specified index from the entries map.\n* @param index position in the entries array\n* @return value associated with the given index\n*/",
        "com.google.common.collect.RegularImmutableMap$Values:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return true, as this method always returns true\n*/",
        "com.google.common.collect.RegularImmutableMap$Values:size()": "/**\n* Returns the number of entries in the map.\n* @return the size of the map entries\n*/",
        "com.google.common.collect.RegularImmutableMap$Values:<init>(com.google.common.collect.RegularImmutableMap)": "/**\n* Constructs Values object with a given RegularImmutableMap.\n* @param map the RegularImmutableMap to be assigned\n*/"
    },
    "com.google.common.collect.Multisets$ImmutableEntry": {
        "com.google.common.collect.Multisets$ImmutableEntry:nextInBucket()": "/**\n* Retrieves the next entry in the bucket.\n* @return ImmutableEntry or null if no more entries exist\n*/",
        "com.google.common.collect.Multisets$ImmutableEntry:getElement()": "/**\n* Retrieves the stored element.\n* @return the element of type E, may be null\n*/",
        "com.google.common.collect.Multisets$ImmutableEntry:getCount()": "/**\n* Returns the current count value.\n* @return the current count as an integer\n*/",
        "com.google.common.collect.Multisets$ImmutableEntry:<init>(java.lang.Object,int)": "/**\n* Constructs an ImmutableEntry with an element and count.\n* @param element the entry element\n* @param count non-negative count of the element\n*/"
    },
    "com.google.common.collect.RegularImmutableSortedMultiset": {
        "com.google.common.collect.RegularImmutableSortedMultiset:getCount(int)": "/**\n* Calculates count between two cumulative counts.\n* @param index position in cumulativeCounts array\n* @return count as an integer\n*/",
        "com.google.common.collect.RegularImmutableSortedMultiset:elementSet()": "/**\n* Returns an immutable sorted set of elements.\n* @return ImmutableSortedSet containing the elements\n*/",
        "com.google.common.collect.RegularImmutableSortedMultiset:isPartialView()": "/**\n* Checks if the view is partial based on offset and length.\n* @return true if the view is partial, false otherwise\n*/",
        "com.google.common.collect.RegularImmutableSortedMultiset:size()": "/**\n* Calculates the size based on cumulative counts.\n* @return saturated int value representing the size\n*/",
        "com.google.common.collect.RegularImmutableSortedMultiset:<init>(com.google.common.collect.RegularImmutableSortedSet,long[],int,int)": "/**\n* Constructs a RegularImmutableSortedMultiset with specified elements and counts.\n* @param elementSet sorted set of elements\n* @param cumulativeCounts array of cumulative counts for elements\n* @param offset starting index in cumulativeCounts\n* @param length number of elements to include\n*/",
        "com.google.common.collect.RegularImmutableSortedMultiset:forEachEntry(java.util.function.ObjIntConsumer)": "/**\n* Applies action to each entry in the collection with its count.\n* @param action consumer that processes each element and its count\n*/",
        "com.google.common.collect.RegularImmutableSortedMultiset:count(java.lang.Object)": "/**\n* Counts occurrences of an element in the set.\n* @param element the object to count; returns 0 if not found\n* @return count of the element as an integer\n*/",
        "com.google.common.collect.RegularImmutableSortedMultiset:getEntry(int)": "/**\n* Retrieves an entry from the multiset by index.\n* @param index position of the entry in the element set\n* @return Entry containing element and its count\n*/",
        "com.google.common.collect.RegularImmutableSortedMultiset:<init>(java.util.Comparator)": "/**\n* Initializes a sorted multiset with a specified comparator.\n* @param comparator defines the order of elements\n*/",
        "com.google.common.collect.RegularImmutableSortedMultiset:firstEntry()": "/**\n* Returns the first entry of the multiset or null if empty.\n* @return Entry containing element and its count or null if empty\n*/",
        "com.google.common.collect.RegularImmutableSortedMultiset:lastEntry()": "/**\n* Returns the last entry of the multiset or null if empty.\n* @return Entry containing element and its count or null\n*/",
        "com.google.common.collect.RegularImmutableSortedMultiset:getSubMultiset(int,int)": "/**\n* Returns a sub-multiset from specified index range.\n* @param from starting index, @param to ending index\n* @return ImmutableSortedMultiset within the range\n*/",
        "com.google.common.collect.RegularImmutableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Retrieves a sub-multiset up to a specified upper bound.\n* @param upperBound the upper limit for the multiset\n* @param boundType type of bound (inclusive/exclusive)\n* @return ImmutableSortedMultiset up to the upper bound\n*/",
        "com.google.common.collect.RegularImmutableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Retrieves a sub-multiset starting from a lower bound.\n* @param lowerBound the lower bound element\n* @param boundType type of bound (inclusive/exclusive)\n* @return ImmutableSortedMultiset from lower bound to end\n*/"
    },
    "com.google.common.collect.RegularImmutableTable$CellSet": {
        "com.google.common.collect.RegularImmutableTable$CellSet:size()": "/**\n* Returns the size of the RegularImmutableTable.\n* @return the number of elements in the table\n*/",
        "com.google.common.collect.RegularImmutableTable$CellSet:get(int)": "/**\n* Retrieves the cell at the specified index.\n* @param index position of the cell to retrieve\n* @return Cell object at the given index\n*/",
        "com.google.common.collect.RegularImmutableTable$CellSet:contains(java.lang.Object)": "/**\n* Checks if the table contains a specified cell.\n* @param object the cell to check for presence\n* @return true if the cell exists with matching value, false otherwise\n*/",
        "com.google.common.collect.RegularImmutableTable$CellSet:isPartialView()": "/**\n* Indicates if the view is partial.\n* @return false as the view is not partial\n*/"
    },
    "com.google.common.collect.RegularImmutableTable$Values": {
        "com.google.common.collect.RegularImmutableTable$Values:size()": "/**\n* Returns the size of the RegularImmutableTable.\n* @return the number of elements in the table\n*/",
        "com.google.common.collect.RegularImmutableTable$Values:get(int)": "/**\n* Retrieves the value at the specified index.\n* @param index position of the desired value\n* @return value associated with the index\n*/",
        "com.google.common.collect.RegularImmutableTable$Values:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return true if it is a partial view, otherwise false\n*/"
    },
    "com.google.common.collect.ReverseNaturalOrdering": {
        "com.google.common.collect.ReverseNaturalOrdering:min(java.util.Iterator)": "/**\n* Returns the minimum element from the given iterator.\n* @param iterator an iterator of comparable elements\n* @return the minimum element or null if empty\n*/",
        "com.google.common.collect.ReverseNaturalOrdering:min(java.lang.Iterable)": "/**\n* Returns the minimum element from the given iterable.\n* @param iterable collection of comparable elements\n* @return minimum element or null if iterable is empty\n*/",
        "com.google.common.collect.ReverseNaturalOrdering:max(java.util.Iterator)": "/**\n* Returns the maximum element from the provided iterator.\n* @param iterator an Iterator of comparable elements\n* @return the maximum element or null if the iterator is empty\n*/",
        "com.google.common.collect.ReverseNaturalOrdering:max(java.lang.Iterable)": "/**\n* Returns the maximum element from an iterable collection.\n* @param iterable collection of comparable elements\n* @return maximum element or null if empty\n*/",
        "com.google.common.collect.ReverseNaturalOrdering:max(java.lang.Object,java.lang.Object)": "/**\n* Returns the maximum of two comparable elements.\n* @param a first element\n* @param b second element\n* @return the greater of a or b\n*/",
        "com.google.common.collect.ReverseNaturalOrdering:min(java.lang.Object,java.lang.Object)": "/**\n* Returns the maximum of two comparable elements.\n* @param a first element\n* @param b second element\n* @return the greater of a and b\n*/",
        "com.google.common.collect.ReverseNaturalOrdering:compare(java.lang.Comparable,java.lang.Comparable)": "/**\n* Compares two Comparable objects; throws NullPointerException if left is null.\n* @param left first object to compare\n* @param right second object to compare\n* @return comparison result: 0 if equal, otherwise a negative/positive integer\n*/",
        "com.google.common.collect.ReverseNaturalOrdering:reverse()": "/**\n* Returns the reverse ordering for comparable types.\n* @return Ordering instance for comparable elements\n*/",
        "com.google.common.collect.ReverseNaturalOrdering:<init>()": "/**\n* Constructs an instance of ReverseNaturalOrdering.\n*/"
    },
    "com.google.common.collect.ReverseOrdering": {
        "com.google.common.collect.ReverseOrdering:compare(java.lang.Object,java.lang.Object)": "/**\n* Compares two objects in reverse order.\n* @param a first object to compare\n* @param b second object to compare\n* @return comparison result as integer\n*/",
        "com.google.common.collect.ReverseOrdering:hashCode()": "/**\n* Returns the hash code of the object, negating the hash code of forwardOrder.\n* @return negated hash code of forwardOrder\n*/",
        "com.google.common.collect.ReverseOrdering:equals(java.lang.Object)": "/**\n* Compares this ReverseOrdering with another object for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ReverseOrdering:toString()": "/**\n* Returns the string representation of the reversed forwardOrder.\n* @return reversed forwardOrder as a String\n*/",
        "com.google.common.collect.ReverseOrdering:<init>(com.google.common.collect.Ordering)": "/**\n* Constructs ReverseOrdering with a non-null forward order.\n* @param forwardOrder the ordering to reverse\n*/",
        "com.google.common.collect.ReverseOrdering:max(java.lang.Object,java.lang.Object)": "/**\n* Returns the maximum of two comparable elements.\n* @param a first element\n* @param b second element\n* @return the larger of a and b\n*/",
        "com.google.common.collect.ReverseOrdering:min(java.lang.Object,java.lang.Object)": "/**\n* Returns the minimum of two elements using the maximum function.\n* @param a first element to compare\n* @param b second element to compare\n* @return the lesser element or null if both are null\n*/",
        "com.google.common.collect.ReverseOrdering:max(java.util.Iterator)": "/**\n* Finds the maximum element in an iterator using the minimum function.\n* @param iterator an iterator of comparable elements\n* @return the maximum element found\n*/",
        "com.google.common.collect.ReverseOrdering:min(java.util.Iterator)": "/**\n* Returns the minimum element from an iterator using max method.\n* @param iterator an Iterator of comparable elements\n* @return minimum element found\n*/",
        "com.google.common.collect.ReverseOrdering:max(java.lang.Iterable)": "/**\n* Retrieves the maximum element from an iterable collection.\n* @param iterable a collection of comparable elements\n* @return the maximum element or null if empty\n*/",
        "com.google.common.collect.ReverseOrdering:min(java.lang.Iterable)": "/**\n* Returns the minimum element from an iterable collection.\n* @param iterable a collection of comparable elements\n* @return minimum element found or null if empty\n*/"
    },
    "com.google.common.collect.Sets$CartesianSet": {
        "com.google.common.collect.Sets$CartesianSet:contains(java.lang.Object)": "/**\n* Checks if the given object is a list matching the axes' criteria.\n* @param object the object to check for containment\n* @return true if the object is a matching list, false otherwise\n*/",
        "com.google.common.collect.Sets$CartesianSet:delegate()": "/**\n* Returns the delegate collection of lists.\n* @return Collection of lists of type E\n*/",
        "com.google.common.collect.Sets$CartesianSet:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.CartesianList)": "/**\n* Constructs a CartesianSet with specified axes and delegate.\n* @param axes list of immutable sets defining the axes\n* @param delegate CartesianList for additional functionality\n*/",
        "com.google.common.collect.Sets$CartesianSet:hashCode()": "/**\n* Computes the hash code for the object based on its axes.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.Sets$CartesianSet:equals(java.lang.Object)": "/**\n* Compares this CartesianSet to another object for equality.\n* @param object the object to compare, may be null\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Sets$CartesianSet:create(java.util.List)": "/**\n* Creates a CartesianSet from a list of sets.\n* @param sets list of sets to convert\n* @return CartesianSet of lists derived from the input sets\n*/"
    },
    "com.google.common.collect.Sets$DescendingSet": {
        "com.google.common.collect.Sets$DescendingSet:lower(java.lang.Object)": "/**\n* Retrieves the least element greater than the specified element.\n* @param e the reference element\n* @return the next higher element or null if none exists\n*/",
        "com.google.common.collect.Sets$DescendingSet:floor(java.lang.Object)": "/**\n* Returns the greatest element less than or equal to the given element.\n* @param e the element to compare\n* @return the floor element or null if no such element exists\n*/",
        "com.google.common.collect.Sets$DescendingSet:ceiling(java.lang.Object)": "/**\n* Returns the greatest element less than or equal to the given element.\n* @param e the element to compare\n* @return the ceiling element or null if not found\n*/",
        "com.google.common.collect.Sets$DescendingSet:higher(java.lang.Object)": "/**\n* Returns the greatest element less than the specified element.\n* @param e the reference element to compare\n* @return the lower element or null if none exists\n*/",
        "com.google.common.collect.Sets$DescendingSet:pollFirst()": "/**\n* Retrieves and removes the last element from the collection.\n* @return the last element or null if empty\n*/",
        "com.google.common.collect.Sets$DescendingSet:pollLast()": "/**\n* Retrieves and removes the last element, or returns null if empty.\n* @return last element or null if the collection is empty\n*/",
        "com.google.common.collect.Sets$DescendingSet:descendingIterator()": "/**\n* Returns an iterator for elements in descending order.\n* @return Iterator of elements in reverse sequence\n*/",
        "com.google.common.collect.Sets$DescendingSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a reversed view of the subset from 'fromElement' to 'toElement'.\n* @param fromElement starting element of the subset\n* @param fromInclusive true if 'fromElement' is included\n* @param toElement ending element of the subset\n* @param toInclusive true if 'toElement' is included\n* @return NavigableSet view of the specified range in reverse order\n*/",
        "com.google.common.collect.Sets$DescendingSet:subSet(java.lang.Object,java.lang.Object)": "/**\n* Returns a view of the portion of this set between fromElement and toElement.\n* @param fromElement the starting element (inclusive)\n* @param toElement the ending element (exclusive)\n* @return a sorted set containing the specified range\n*/",
        "com.google.common.collect.Sets$DescendingSet:headSet(java.lang.Object,boolean)": "/**\n* Returns a view of the portion of this set up to (or excluding) the specified element.\n* @param toElement the element up to which the set is to be viewed\n* @param inclusive true to include the element, false to exclude it\n* @return NavigableSet view of the specified range\n*/",
        "com.google.common.collect.Sets$DescendingSet:headSet(java.lang.Object)": "/**\n* Returns a view of the portion of this set whose elements are less than the specified element.\n* @param toElement the upper bound element\n* @return a SortedSet containing elements less than toElement\n*/",
        "com.google.common.collect.Sets$DescendingSet:tailSet(java.lang.Object,boolean)": "/**\n* Returns a view of the portion of this set starting from a specified element.\n* @param fromElement the element to start from\n* @param inclusive true if the set includes fromElement\n* @return NavigableSet view from fromElement to the end\n*/",
        "com.google.common.collect.Sets$DescendingSet:tailSet(java.lang.Object)": "/**\n* Returns a view of the portion of this set starting from the specified element.\n* @param fromElement the starting element of the tail set\n* @return a sorted set view of the tail portion\n*/",
        "com.google.common.collect.Sets$DescendingSet:first()": "/**\n* Retrieves the last element from the forward collection.\n* @return the last element of type E\n*/",
        "com.google.common.collect.Sets$DescendingSet:last()": "/**\n* Retrieves the first element from the forward collection.\n* @return the first element of type E\n*/",
        "com.google.common.collect.Sets$DescendingSet:iterator()": "/**\n* Returns an iterator that traverses elements in reverse order.\n* @return Iterator for elements in descending order\n*/",
        "com.google.common.collect.Sets$DescendingSet:toArray()": "/**\n* Converts the collection to an array.\n* @return an array of objects or null if empty\n*/",
        "com.google.common.collect.Sets$DescendingSet:toArray(java.lang.Object[])": "/**\n* Converts the collection to an array of the specified type.\n* @param array the array to populate\n* @return an array containing the elements of the collection\n*/",
        "com.google.common.collect.Sets$DescendingSet:toString()": "/**\n* Returns a string representation of the object.\n* @return string representation of the object\n*/",
        "com.google.common.collect.Sets$DescendingSet:delegate()": "/**\n* Returns the underlying NavigableSet instance.\n* @return NavigableSet<E> representing the delegate\n*/",
        "com.google.common.collect.Sets$DescendingSet:descendingSet()": "/**\n* Returns the descending view of the set.\n* @return NavigableSet in descending order\n*/",
        "com.google.common.collect.Sets$DescendingSet:reverse(java.util.Comparator)": "/**\n* Reverses the ordering based on the provided comparator.\n* @param forward the comparator for ordering elements\n* @return Ordering object representing the reversed order\n*/",
        "com.google.common.collect.Sets$DescendingSet:comparator()": "/**\n* Retrieves a comparator for elements, reversing if necessary.\n* @return Comparator for elements or natural ordering if none found\n*/",
        "com.google.common.collect.Sets$DescendingSet:<init>(java.util.NavigableSet)": "/**\n* Initializes a DescendingSet with a given NavigableSet.\n* @param forward the NavigableSet to be wrapped\n*/"
    },
    "com.google.common.collect.Sets$FilteredNavigableSet": {
        "com.google.common.collect.Sets$FilteredNavigableSet:unfiltered()": "/**\n* Returns the unfiltered NavigableSet.\n* @return unfiltered NavigableSet of type E\n*/",
        "com.google.common.collect.Sets$FilteredNavigableSet:pollFirst()": "/**\n* Removes and returns the first matching element from the set.\n* @return matched element or null if none found\n*/",
        "com.google.common.collect.Sets$FilteredNavigableSet:pollLast()": "/**\n* Removes and returns the last matching element from a descending set.\n* @return matched element or null if none found\n*/",
        "com.google.common.collect.Sets$FilteredNavigableSet:descendingIterator()": "/**\n* Returns an iterator over elements in descending order filtered by a predicate.\n* @return Iterator of filtered elements in descending order\n*/",
        "com.google.common.collect.Sets$FilteredNavigableSet:last()": "/**\n* Retrieves the last element matching the predicate from the unfiltered set.\n* @return last matching element or null if not found\n*/",
        "com.google.common.collect.Sets$FilteredNavigableSet:lower(java.lang.Object)": "/**\n* Finds the greatest element less than the specified element.\n* @param e the element to compare against\n* @return the found element or null if none exists\n*/",
        "com.google.common.collect.Sets$FilteredNavigableSet:floor(java.lang.Object)": "/**\n* Retrieves the greatest element less than or equal to the specified element.\n* @param e the element to compare against\n* @return the matched element or null if none found\n*/",
        "com.google.common.collect.Sets$FilteredNavigableSet:ceiling(java.lang.Object)": "/**\n* Retrieves the least element greater than or equal to the given element.\n* @param e the element to compare\n* @return the matching element or null if none found\n*/",
        "com.google.common.collect.Sets$FilteredNavigableSet:higher(java.lang.Object)": "/**\n* Retrieves the next higher element in the set after the specified element.\n* @param e the element to compare against\n* @return the higher element or null if none exists\n*/",
        "com.google.common.collect.Sets$FilteredNavigableSet:<init>(java.util.NavigableSet,com.google.common.base.Predicate)": "/**\n* Creates a filtered navigable set based on a predicate.\n* @param unfiltered original navigable set to filter\n* @param predicate condition to filter elements\n*/",
        "com.google.common.collect.Sets$FilteredNavigableSet:descendingSet()": "/**\n* Returns a filtered descending view of the unfiltered NavigableSet.\n* @return filtered NavigableSet in descending order\n*/",
        "com.google.common.collect.Sets$FilteredNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a subset of elements from the unfiltered NavigableSet based on given bounds.\n* @param fromElement starting element of the subset\n* @param fromInclusive true if fromElement is included\n* @param toElement ending element of the subset\n* @param toInclusive true if toElement is included\n* @return filtered NavigableSet within specified bounds\n*/",
        "com.google.common.collect.Sets$FilteredNavigableSet:headSet(java.lang.Object,boolean)": "/**\n* Returns a filtered headSet of elements up to a specified element.\n* @param toElement the upper bound element\n* @param inclusive whether to include the upper bound element\n* @return filtered NavigableSet of elements\n*/",
        "com.google.common.collect.Sets$FilteredNavigableSet:tailSet(java.lang.Object,boolean)": "/**\n* Retrieves a tail set of elements from a NavigableSet.\n* @param fromElement starting element for the tail set\n* @param inclusive true to include fromElement in the tail set\n* @return filtered NavigableSet starting from fromElement\n*/"
    },
    "com.google.common.collect.Sets$FilteredSortedSet": {
        "com.google.common.collect.Sets$FilteredSortedSet:comparator()": "/**\n* Returns the comparator for the sorted set.\n* @return Comparator for elements or null if natural ordering is used\n*/",
        "com.google.common.collect.Sets$FilteredSortedSet:last()": "/**\n* Returns the last element matching the predicate from the sorted set.\n* @return last matching element or null if none found\n*/",
        "com.google.common.collect.Sets$FilteredSortedSet:first()": "/**\n* Retrieves the first element matching the predicate from the iterator.\n* @return the first matching element or null if none found\n*/",
        "com.google.common.collect.Sets$FilteredSortedSet:<init>(java.util.SortedSet,com.google.common.base.Predicate)": "/**\n* Constructs a filtered sorted set based on a predicate.\n* @param unfiltered original sorted set to filter\n* @param predicate condition to filter elements\n*/",
        "com.google.common.collect.Sets$FilteredSortedSet:subSet(java.lang.Object,java.lang.Object)": "/**\n* Returns a subset of the sorted set within specified bounds.\n* @param fromElement lower bound (inclusive), @param toElement upper bound (exclusive)\n* @return filtered SortedSet between the bounds\n*/",
        "com.google.common.collect.Sets$FilteredSortedSet:headSet(java.lang.Object)": "/**\n* Returns a view of the portion of the set before the specified element.\n* @param toElement the element to compare against\n* @return a sorted set of elements less than toElement\n*/",
        "com.google.common.collect.Sets$FilteredSortedSet:tailSet(java.lang.Object)": "/**\n* Returns a view of the portion of the set from the specified element.\n* @param fromElement the starting element for the tail set\n* @return SortedSet view of elements greater than or equal to fromElement\n*/"
    },
    "com.google.common.collect.Sets$SubSet": {
        "com.google.common.collect.Sets$SubSet:<init>(com.google.common.collect.ImmutableMap,int)": "/**\n* Initializes a SubSet with a given input set and mask.\n* @param inputSet immutable map of elements and their counts\n* @param mask integer representing the subset selection\n*/",
        "com.google.common.collect.Sets$SubSet:iterator()": "/**\n* Returns an unmodifiable iterator over the elements of the input set.\n* @return Iterator of elements in the input set\n*/",
        "com.google.common.collect.Sets$SubSet:size()": "/**\n* Returns the number of set bits in the mask.\n* @return count of set bits as an integer\n*/",
        "com.google.common.collect.Sets$SubSet:contains(java.lang.Object)": "/**\n* Checks if the set contains the specified object.\n* @param o the object to check for presence\n* @return true if present, false otherwise\n*/"
    },
    "com.google.common.collect.Sets$PowerSet": {
        "com.google.common.collect.Sets$PowerSet:size()": "/**\n* Calculates the size based on the input set's size.\n* @return size as 2 raised to the power of inputSet's size\n*/",
        "com.google.common.collect.Sets$PowerSet:toString()": "/**\n* Returns a string representation of the power set.\n* @return formatted string of the input set\n*/",
        "com.google.common.collect.Sets$PowerSet:contains(java.lang.Object)": "/**\n* Checks if the input set contains all elements of the given set.\n* @param obj potential set to check for containment\n* @return true if all elements are present, false otherwise\n*/",
        "com.google.common.collect.Sets$PowerSet:iterator()": "/**\n* Returns an iterator over subsets of the input set.\n* @return Iterator for the collection of subsets\n*/",
        "com.google.common.collect.Sets$PowerSet:hashCode()": "/**\n* Computes the hash code based on input set's key set.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.Sets$PowerSet:equals(java.lang.Object)": "/**\n* Compares this PowerSet with another for equality based on their key sets.\n* @param obj the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Sets$PowerSet:<init>(java.util.Set)": "/**\n* Constructs a PowerSet from a given set, ensuring size limit.\n* @param input set of elements to create the power set from\n*/"
    },
    "com.google.common.collect.Sets$SetView": {
        "com.google.common.collect.Sets$SetView:<init>()": "/**\n* Private constructor for SetView to prevent subclassing.\n*/",
        "com.google.common.collect.Sets$SetView:add(java.lang.Object)": "/**\n* Always throws UnsupportedOperationException; method is deprecated and cannot add elements.\n*/",
        "com.google.common.collect.Sets$SetView:remove(java.lang.Object)": "/**\n* Always throws UnsupportedOperationException when called.\n* @param object the object to remove (ignored)\n* @return always throws an exception\n*/",
        "com.google.common.collect.Sets$SetView:addAll(java.util.Collection)": "/**\n* Unsupported operation for adding elements to the collection.\n* @param newElements collection of elements to add\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Sets$SetView:removeAll(java.util.Collection)": "/**\n* Always throws UnsupportedOperationException; removal not supported.\n* @param oldElements collection of elements to remove\n* @return always throws exception\n*/",
        "com.google.common.collect.Sets$SetView:removeIf(java.util.function.Predicate)": "/**\n* Always throws UnsupportedOperationException when called.\n* @param filter a predicate to filter elements (ignored)\n* @return always throws an exception\n*/",
        "com.google.common.collect.Sets$SetView:retainAll(java.util.Collection)": "/**\n* Unsupported operation to retain specified elements in the collection.\n* @param elementsToKeep elements to retain (ignored)\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Sets$SetView:clear()": "/**\n* Clears the collection, but always throws UnsupportedOperationException.\n*/",
        "com.google.common.collect.Sets$SetView:iterator()": "/**\n* Returns an unmodifiable iterator over the elements.\n* @return UnmodifiableIterator of type E\n*/",
        "com.google.common.collect.Sets$SetView:immutableCopy()": "/**\n* Creates an ImmutableSet copy of elements in the collection.\n* @return ImmutableSet containing non-null elements\n*/"
    },
    "com.google.common.collect.Sets$UnmodifiableNavigableSet": {
        "com.google.common.collect.Sets$UnmodifiableNavigableSet:removeIf(java.util.function.Predicate)": "/**\n* Removes elements matching the filter predicate.\n* @param filter condition to test elements for removal\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Sets$UnmodifiableNavigableSet:stream()": "/**\n* Returns a stream of elements from the delegate.\n* @return Stream of elements of type E\n*/",
        "com.google.common.collect.Sets$UnmodifiableNavigableSet:parallelStream()": "/**\n* Returns a parallel stream of elements from the delegate.\n* @return Stream of elements in parallel\n*/",
        "com.google.common.collect.Sets$UnmodifiableNavigableSet:forEach(java.util.function.Consumer)": "/**\n* Applies the given action to each element using the delegate.\n* @param action a function to process each element\n*/",
        "com.google.common.collect.Sets$UnmodifiableNavigableSet:lower(java.lang.Object)": "/**\n* Retrieves the greatest element less than the specified element.\n* @param e the element to compare against\n* @return the lower element or null if none exists\n*/",
        "com.google.common.collect.Sets$UnmodifiableNavigableSet:floor(java.lang.Object)": "/**\n* Returns the greatest element less than or equal to the given element.\n* @param e the element to compare\n* @return the greatest element or null if no such element exists\n*/",
        "com.google.common.collect.Sets$UnmodifiableNavigableSet:ceiling(java.lang.Object)": "/**\n* Returns the least element greater than or equal to the given element.\n* @param e the element to compare\n* @return the least element or null if no such element exists\n*/",
        "com.google.common.collect.Sets$UnmodifiableNavigableSet:higher(java.lang.Object)": "/**\n* Returns the least element greater than the specified element.\n* @param e the element to compare\n* @return the next higher element or null if none exists\n*/",
        "com.google.common.collect.Sets$UnmodifiableNavigableSet:pollFirst()": "/**\n* Throws UnsupportedOperationException when attempting to poll the first element.\n* @return always throws an exception\n*/",
        "com.google.common.collect.Sets$UnmodifiableNavigableSet:pollLast()": "/**\n* Throws UnsupportedOperationException when attempting to poll the last element.\n* @return always throws exception, no return value\n*/",
        "com.google.common.collect.Sets$UnmodifiableNavigableSet:delegate()": "/**\n* Returns an unmodifiable sorted set delegate.\n* @return an unmodifiable SortedSet of type E\n*/",
        "com.google.common.collect.Sets$UnmodifiableNavigableSet:descendingIterator()": "/**\n* Returns an unmodifiable descending iterator of elements.\n* @return unmodifiable Iterator of elements in descending order\n*/",
        "com.google.common.collect.Sets$UnmodifiableNavigableSet:<init>(java.util.NavigableSet)": "/**\n* Constructs an unmodifiable navigable set from a delegate set.\n* @param delegate the navigable set to wrap\n*/",
        "com.google.common.collect.Sets$UnmodifiableNavigableSet:descendingSet()": "/**\n* Returns an unmodifiable view of the descending set.\n* @return NavigableSet in descending order\n*/",
        "com.google.common.collect.Sets$UnmodifiableNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns an unmodifiable view of the subset from the delegate NavigableSet.\n* @param fromElement starting element of the subset\n* @param fromInclusive true if the starting element is included\n* @param toElement ending element of the subset\n* @param toInclusive true if the ending element is included\n* @return unmodifiable NavigableSet of the specified range\n*/",
        "com.google.common.collect.Sets$UnmodifiableNavigableSet:headSet(java.lang.Object,boolean)": "/**\n* Returns an unmodifiable view of the head set up to a specified element.\n* @param toElement the element up to which the head set is defined\n* @param inclusive true to include the toElement, false otherwise\n* @return unmodifiable NavigableSet of elements before toElement\n*/",
        "com.google.common.collect.Sets$UnmodifiableNavigableSet:tailSet(java.lang.Object,boolean)": "/**\n* Returns an unmodifiable view of the tail set starting from an element.\n* @param fromElement the starting element of the tail set\n* @param inclusive true if the tail set includes the element\n* @return unmodifiable NavigableSet of the tail set\n*/"
    },
    "com.google.common.collect.SingletonImmutableBiMap": {
        "com.google.common.collect.SingletonImmutableBiMap:get(java.lang.Object)": "/**\n* Retrieves value by key if it matches the single key.\n* @param key the key to compare with the single key\n* @return associated value or null if keys do not match\n*/",
        "com.google.common.collect.SingletonImmutableBiMap:containsKey(java.lang.Object)": "/**\n* Checks if the specified key matches the single stored key.\n* @param key the key to check for equality\n* @return true if the key matches, false otherwise\n*/",
        "com.google.common.collect.SingletonImmutableBiMap:containsValue(java.lang.Object)": "/**\n* Checks if the specified value matches the stored single value.\n* @param value the value to check for equality\n* @return true if value matches, false otherwise\n*/",
        "com.google.common.collect.SingletonImmutableBiMap:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return false, as the view is not partial\n*/",
        "com.google.common.collect.SingletonImmutableBiMap:forEach(java.util.function.BiConsumer)": "/**\n* Applies the given action to the single key-value pair.\n* @param action a BiConsumer to process the key and value\n*/",
        "com.google.common.collect.SingletonImmutableBiMap:<init>(java.lang.Object,java.lang.Object)": "/**\n* Initializes a SingletonImmutableBiMap with a key and value.\n* @param singleKey the unique key\n* @param singleValue the associated value\n*/",
        "com.google.common.collect.SingletonImmutableBiMap:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableBiMap)": "/**\n* Initializes SingletonImmutableBiMap with key, value, and inverse mapping.\n* @param singleKey the single key of the map\n* @param singleValue the single value associated with the key\n* @param inverse the inverse ImmutableBiMap\n*/",
        "com.google.common.collect.SingletonImmutableBiMap:inverse()": "/**\n* Returns the inverse of the ImmutableBiMap.\n* @return an ImmutableBiMap with inverted key-value pairs\n*/",
        "com.google.common.collect.SingletonImmutableBiMap:createEntrySet()": "/**\n* Creates an entry set containing a single key-value pair.\n* @return ImmutableSet of entries with one key and value\n*/",
        "com.google.common.collect.SingletonImmutableBiMap:createKeySet()": "/**\n* Creates an ImmutableSet containing a single key.\n* @return ImmutableSet with the specified key\n*/"
    },
    "com.google.common.collect.SingletonImmutableList": {
        "com.google.common.collect.SingletonImmutableList:spliterator()": "/**\n* Returns a Spliterator for a singleton containing the specified element.\n* @return Spliterator for the single element\n*/",
        "com.google.common.collect.SingletonImmutableList:toString()": "/**\n* Returns a string representation of the element wrapped in brackets.\n* @return formatted string of the element\n*/",
        "com.google.common.collect.SingletonImmutableList:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return false, as this view is not partial\n*/",
        "com.google.common.collect.SingletonImmutableList:iterator()": "/**\n* Returns an iterator for a single element.\n* @return an unmodifiable iterator containing the element\n*/",
        "com.google.common.collect.SingletonImmutableList:<init>(java.lang.Object)": "/**\n* Constructs a singleton immutable list with the given element.\n* @param element the element to include in the list\n*/",
        "com.google.common.collect.SingletonImmutableList:get(int)": "/**\n* Retrieves the element at the specified index.\n* @param index position of the element to retrieve\n* @return the element at the given index\n*/",
        "com.google.common.collect.SingletonImmutableList:subList(int,int)": "/**\n* Returns a sublist from the current list based on index range.\n* @param fromIndex starting index, @param toIndex ending index\n* @return ImmutableList of elements or an empty list if indices are equal\n*/"
    },
    "com.google.common.collect.SingletonImmutableSet": {
        "com.google.common.collect.SingletonImmutableSet:contains(java.lang.Object)": "/**\n* Checks if the specified target is equal to the element.\n* @param target object to compare with the element\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.SingletonImmutableSet:hashCode()": "/**\n* Returns the hash code of the element.\n* @return hash code as an integer\n*/",
        "com.google.common.collect.SingletonImmutableSet:toString()": "/**\n* Returns a string representation of the element enclosed in brackets.\n* @return formatted string of the element\n*/",
        "com.google.common.collect.SingletonImmutableSet:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return false, as this view is not partial\n*/",
        "com.google.common.collect.SingletonImmutableSet:iterator()": "/**\n* Returns an iterator for a single element.\n* @return UnmodifiableIterator containing the element\n*/",
        "com.google.common.collect.SingletonImmutableSet:<init>(java.lang.Object)": "/**\n* Creates a singleton set containing the given element.\n* @param element the element to be included in the set\n*/",
        "com.google.common.collect.SingletonImmutableSet:asList()": "/**\n* Returns an immutable list containing the specified element.\n* @return ImmutableList with the single element\n*/"
    },
    "com.google.common.collect.SortedIterables": {
        "com.google.common.collect.SortedIterables:<init>()": "/**\n* Private constructor to prevent instantiation of the SortedIterables class.\n*/",
        "com.google.common.collect.SortedIterables:comparator(java.util.SortedSet)": "/**\n* Retrieves the comparator for a sorted set or natural ordering if none exists.\n* @param sortedSet the sorted set to get the comparator from\n* @return Comparator for the sorted set elements\n*/",
        "com.google.common.collect.SortedIterables:hasSameComparator(java.util.Comparator,java.lang.Iterable)": "/**\n* Checks if the given comparator matches the elements' comparator.\n* @param comparator the comparator to compare\n* @param elements the iterable elements to check against\n* @return true if comparators match, false otherwise\n*/"
    },
    "com.google.common.collect.SortedLists$KeyPresentBehavior$2": {
        "com.google.common.collect.SortedLists$KeyPresentBehavior$2:resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int)": "/**\n* Retrieves the index of a specified key in a sorted list using a comparator.\n* @param comparator the comparator for comparing elements\n* @param key the element to find in the list\n* @param list the sorted list to search\n* @param foundIndex the index where the key was found\n* @return the index of the key or -1 if not found\n*/"
    },
    "com.google.common.collect.SortedLists$KeyPresentBehavior$3": {
        "com.google.common.collect.SortedLists$KeyPresentBehavior$3:resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int)": "/**\n* Finds the index of a key in a sorted list using a comparator.\n* @param comparator compares elements in the list\n* @param key element to search for\n* @param list sorted list to search within\n* @param foundIndex index where the key was found, or -1 if not found\n* @return index of the key or -1 if not present\n*/"
    },
    "com.google.common.collect.SortedLists$KeyPresentBehavior$4": {
        "com.google.common.collect.SortedLists$KeyPresentBehavior$4:resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int)": "/**\n* Finds the index of a key in a sorted list using a comparator.\n* @param comparator comparison logic for elements\n* @param key element to search for\n* @param list sorted list to search within\n* @param foundIndex index of the found key or -1 if not found\n* @return index of the key in the list\n*/"
    },
    "com.google.common.collect.SortedLists$KeyPresentBehavior$5": {
        "com.google.common.collect.SortedLists$KeyPresentBehavior$5:resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int)": "/**\n* Finds the index of a specified key in a sorted list using a comparator.\n* @param comparator the comparator for comparing elements\n* @param key the element to find in the list\n* @param list the list to search within\n* @param foundIndex the index where the key was found\n* @return the index of the key or -1 if not found\n*/"
    },
    "com.google.common.collect.SortedLists": {
        "com.google.common.collect.SortedLists:<init>()": "/**\n* Private constructor for SortedLists class to prevent instantiation.\n*/",
        "com.google.common.collect.SortedLists:binarySearch(java.util.List,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior)": "/**\n* Performs binary search on a list for a specified key.\n* @param list sorted list to search, @param key element to find,\n* @param comparator for comparing elements, @param presentBehavior for found key actions,\n* @param absentBehavior for not found key actions\n* @return index of key or result from absentBehavior if not found\n*/",
        "com.google.common.collect.SortedLists:binarySearch(java.util.List,com.google.common.base.Function,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior)": "/**\n* Performs binary search on transformed list using a key function.\n* @param list source list, @param keyFunction function to transform elements,\n* @param key element to find, @param keyComparator for comparing keys,\n* @param presentBehavior actions if key is found, @param absentBehavior actions if not found\n* @return index of key or result from absentBehavior if not found\n*/"
    },
    "com.google.common.collect.SortedMultisets$ElementSet": {
        "com.google.common.collect.SortedMultisets$ElementSet:<init>(com.google.common.collect.SortedMultiset)": "/**\n* Initializes ElementSet with a sorted multiset.\n* @param multiset a sorted multiset of elements\n*/",
        "com.google.common.collect.SortedMultisets$ElementSet:multiset()": "/**\n* Returns the sorted multiset instance.\n* @return SortedMultiset containing elements\n*/",
        "com.google.common.collect.SortedMultisets$ElementSet:iterator()": "/**\n* Returns an iterator over elements in the multiset.\n* @return Iterator of elements from the multiset\n*/",
        "com.google.common.collect.SortedMultisets$ElementSet:comparator()": "/**\n* Returns the comparator for the multiset elements.\n* @return Comparator for the multiset or null if none exists\n*/",
        "com.google.common.collect.SortedMultisets$ElementSet:subSet(java.lang.Object,java.lang.Object)": "/**\n* Returns a view of the portion of the set between two elements.\n* @param fromElement starting element (inclusive)\n* @param toElement ending element (exclusive)\n* @return SortedSet of elements in the specified range\n*/",
        "com.google.common.collect.SortedMultisets$ElementSet:headSet(java.lang.Object)": "/**\n* Retrieves a view of the elements less than the specified element.\n* @param toElement the upper bound element (exclusive)\n* @return a sorted set of elements less than toElement\n*/",
        "com.google.common.collect.SortedMultisets$ElementSet:tailSet(java.lang.Object)": "/**\n* Returns a view of the sorted set from the specified element.\n* @param fromElement the starting element of the tail set\n* @return SortedSet containing elements from fromElement onwards\n*/",
        "com.google.common.collect.SortedMultisets$ElementSet:first()": "/**\n* Retrieves the first element from the sorted multiset.\n* @return the first element or throws if empty\n*/",
        "com.google.common.collect.SortedMultisets$ElementSet:last()": "/**\n* Retrieves the last element from the sorted multiset.\n* @return last element or throws exception if empty\n*/"
    },
    "com.google.common.collect.SortedMultisets$NavigableElementSet": {
        "com.google.common.collect.SortedMultisets$NavigableElementSet:lower(java.lang.Object)": "/**\n* Retrieves the greatest element less than the specified element.\n* @param e the reference element to compare\n* @return the lower element or null if none exists\n*/",
        "com.google.common.collect.SortedMultisets$NavigableElementSet:floor(java.lang.Object)": "/**\n* Retrieves the greatest element less than or equal to the specified element.\n* @param e the reference element\n* @return the floor element or null if not found\n*/",
        "com.google.common.collect.SortedMultisets$NavigableElementSet:ceiling(java.lang.Object)": "/**\n* Retrieves the least element greater than or equal to the specified element.\n* @param e the element to compare\n* @return the ceiling element or null if none exists\n*/",
        "com.google.common.collect.SortedMultisets$NavigableElementSet:higher(java.lang.Object)": "/**\n* Retrieves the next higher element in the multiset after the given element.\n* @param e the reference element to find the next higher element\n* @return the higher element or null if none exists\n*/",
        "com.google.common.collect.SortedMultisets$NavigableElementSet:pollFirst()": "/**\n* Retrieves and removes the first element, or returns null if empty.\n* @return first element or null if no elements exist\n*/",
        "com.google.common.collect.SortedMultisets$NavigableElementSet:pollLast()": "/**\n* Retrieves and removes the last element from the multiset.\n* @return last element or null if multiset is empty\n*/",
        "com.google.common.collect.SortedMultisets$NavigableElementSet:<init>(com.google.common.collect.SortedMultiset)": "/**\n* Constructs a NavigableElementSet using a sorted multiset.\n* @param multiset a sorted multiset of elements\n*/",
        "com.google.common.collect.SortedMultisets$NavigableElementSet:descendingSet()": "/**\n* Returns a NavigableSet view of the elements in descending order.\n* @return NavigableSet containing elements in descending order\n*/",
        "com.google.common.collect.SortedMultisets$NavigableElementSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a subset of elements within specified bounds.\n* @param fromElement starting element, inclusive if fromInclusive is true\n* @param fromInclusive true for inclusive start\n* @param toElement ending element, inclusive if toInclusive is true\n* @param toInclusive true for inclusive end\n* @return NavigableSet of elements within the specified range\n*/",
        "com.google.common.collect.SortedMultisets$NavigableElementSet:headSet(java.lang.Object,boolean)": "/**\n* Returns a view of the portion of this set up to the specified element.\n* @param toElement the upper endpoint of the head set\n* @param inclusive true if the head set includes the endpoint\n* @return NavigableSet of elements up to toElement\n*/",
        "com.google.common.collect.SortedMultisets$NavigableElementSet:tailSet(java.lang.Object,boolean)": "/**\n* Retrieves a view of the tail set starting from the specified element.\n* @param fromElement starting element of the tail set\n* @param inclusive true if the set includes the starting element\n* @return NavigableSet view of the tail set\n*/",
        "com.google.common.collect.SortedMultisets$NavigableElementSet:descendingIterator()": "/**\n* Returns an iterator for elements in descending order.\n* @return Iterator of elements from the descending set\n*/"
    },
    "com.google.common.collect.SortedMultisets": {
        "com.google.common.collect.SortedMultisets:<init>()": "/**\n* Private constructor for SortedMultisets class.\n*/",
        "com.google.common.collect.SortedMultisets:getElementOrThrow(com.google.common.collect.Multiset$Entry)": "/**\n* Retrieves element from entry or throws exception if entry is null.\n* @param entry nullable Entry containing the element\n* @return the element from the entry\n*/",
        "com.google.common.collect.SortedMultisets:getElementOrNull(com.google.common.collect.Multiset$Entry)": "/**\n* Returns the element from the entry or null if the entry is null.\n* @param entry an optional Entry containing the element\n* @return the element or null if entry is null\n*/"
    },
    "com.google.common.collect.StandardRowSortedTable$RowSortedMap": {
        "com.google.common.collect.StandardRowSortedTable$RowSortedMap:keySet()": "/**\n* Returns a sorted set view of the keys in this map.\n* @return a SortedSet containing the keys\n*/",
        "com.google.common.collect.StandardRowSortedTable$RowSortedMap:comparator()": "/**\n* Returns the comparator for the sorted backing map.\n* @return Comparator for the elements, or null if none exists\n*/",
        "com.google.common.collect.StandardRowSortedTable$RowSortedMap:firstKey()": "/**\n* Returns the first key in the sorted map.\n* @return the first key of type R\n*/",
        "com.google.common.collect.StandardRowSortedTable$RowSortedMap:lastKey()": "/**\n* Retrieves the last key from the sorted backing map.\n* @return the last key of type R\n*/",
        "com.google.common.collect.StandardRowSortedTable$RowSortedMap:createKeySet()": "/**\n* Creates a sorted key set from the current object.\n* @return SortedSet of keys associated with this object\n*/",
        "com.google.common.collect.StandardRowSortedTable$RowSortedMap:headMap(java.lang.Object)": "/**\n* Returns a sorted map of rows up to a specified key.\n* @param toKey the upper key limit for the map\n* @return SortedMap of rows to column maps\n*/",
        "com.google.common.collect.StandardRowSortedTable$RowSortedMap:subMap(java.lang.Object,java.lang.Object)": "/**\n* Returns a sorted sub-map for specified row key range.\n* @param fromKey starting row key (inclusive)\n* @param toKey ending row key (exclusive)\n* @return SortedMap of row keys to column maps\n*/",
        "com.google.common.collect.StandardRowSortedTable$RowSortedMap:tailMap(java.lang.Object)": "/**\n* Returns a tail map starting from the specified key.\n* @param fromKey the key to start the tail map from\n* @return SortedMap of rows to column maps from the specified key\n*/"
    },
    "com.google.common.collect.StandardRowSortedTable": {
        "com.google.common.collect.StandardRowSortedTable:createRowMap()": "/**\n* Creates a sorted map of rows.\n* @return a SortedMap of rows with column-value mappings\n*/",
        "com.google.common.collect.StandardRowSortedTable:sortedBackingMap()": "/**\n* Returns the backing map as a sorted map.\n* @return SortedMap of row keys to column-value maps\n*/",
        "com.google.common.collect.StandardRowSortedTable:<init>(java.util.SortedMap,com.google.common.base.Supplier)": "/**\n* Constructs a StandardRowSortedTable with a backing map and a factory for maps.\n* @param backingMap initial sorted map structure\n* @param factory supplier for creating new map instances\n*/",
        "com.google.common.collect.StandardRowSortedTable:rowMap()": "/**\n* Retrieves a sorted map of rows to column maps.\n* @return SortedMap of row keys to column maps\n*/",
        "com.google.common.collect.StandardRowSortedTable:rowKeySet()": "/**\n* Returns a sorted set of row keys.\n* @return SortedSet of row keys from the row map\n*/"
    },
    "com.google.common.collect.StandardTable$CellIterator": {
        "com.google.common.collect.StandardTable$CellIterator:hasNext()": "/**\n* Checks if there are more elements in either row or column iterators.\n* @return true if more elements exist, false otherwise\n*/",
        "com.google.common.collect.StandardTable$CellIterator:remove()": "/**\n* Removes current column and, if empty, removes corresponding row entry.\n*/",
        "com.google.common.collect.StandardTable$CellIterator:next()": "/**\n* Retrieves the next cell in the iteration.\n* @return Cell<R, C, V> representing the next cell\n*/"
    },
    "com.google.common.collect.StandardTable$Column$EntrySet": {
        "com.google.common.collect.StandardTable$Column$EntrySet:iterator()": "/**\n* Returns an iterator over the entries in the set.\n* @return an Iterator for the Entry<R, V> elements\n*/",
        "com.google.common.collect.StandardTable$Column$EntrySet:size()": "/**\n* Counts the number of maps containing the specified column key.\n* @return the count of maps with the column key\n*/",
        "com.google.common.collect.StandardTable$Column$EntrySet:contains(java.lang.Object)": "/**\n* Checks if the collection contains a specific entry.\n* @param o object to check, should be an Entry\n* @return true if entry is found, false otherwise\n*/",
        "com.google.common.collect.StandardTable$Column$EntrySet:remove(java.lang.Object)": "/**\n* Removes the specified entry if it matches the key and value.\n* @param obj the entry to remove\n* @return true if removed, false if not found or invalid\n*/",
        "com.google.common.collect.StandardTable$Column$EntrySet:clear()": "/**\n* Clears all entries by removing them from the column.\n*/",
        "com.google.common.collect.StandardTable$Column$EntrySet:retainAll(java.util.Collection)": "/**\n* Retains elements in the collection that are in the specified collection.\n* @param c collection of elements to retain\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.StandardTable$Column$EntrySet:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if no column exists, false otherwise\n*/"
    },
    "com.google.common.collect.StandardTable$Column$EntrySetIterator": {
        "com.google.common.collect.StandardTable$Column$EntrySetIterator:computeNext()": "/**\n* Computes the next entry with a specified column key.\n* @return Entry containing key-value pair or null if no entry found\n*/"
    },
    "com.google.common.collect.StandardTable$Column": {
        "com.google.common.collect.StandardTable$Column:createEntrySet()": "/**\n* Creates a set of entries for the map.\n* @return Set of map entries\n*/",
        "com.google.common.collect.StandardTable$Column:createKeySet()": "/**\n* Creates and returns a new KeySet instance.\n* @return a Set of keys\n*/",
        "com.google.common.collect.StandardTable$Column:createValues()": "/**\n* Creates and returns a new collection of values.\n* @return a Collection of type V\n*/",
        "com.google.common.collect.StandardTable$Column:removeFromColumnIf(com.google.common.base.Predicate)": "/**\n* Removes column entries if they match the predicate.\n* @param predicate condition to check each entry\n* @return true if any entry was removed, false otherwise\n*/",
        "com.google.common.collect.StandardTable$Column:put(java.lang.Object,java.lang.Object)": "/**\n* Puts a value in the table for the specified row key.\n* @param key identifier for the row\n* @param value the value to be stored\n* @return previous value associated with the row key or null\n*/",
        "com.google.common.collect.StandardTable$Column:remove(java.lang.Object)": "/**\n* Removes a value by key from the table.\n* @param key key for the value to remove\n* @return removed value or null if not found\n*/",
        "com.google.common.collect.StandardTable$Column:get(java.lang.Object)": "/**\n* Retrieves a value from the table using the specified key.\n* @param key the key for the value; may be null\n* @return value associated with the key or null if not found\n*/",
        "com.google.common.collect.StandardTable$Column:containsKey(java.lang.Object)": "/**\n* Checks if the specified key exists in the table's column.\n* @param key the key to check for existence\n* @return true if the key exists, false otherwise\n*/"
    },
    "com.google.common.collect.StandardTable$ColumnKeyIterator": {
        "com.google.common.collect.StandardTable$ColumnKeyIterator:computeNext()": "/**\n* Computes the next unique key from the iterator.\n* @return the next unique key or endOfData() if no more keys exist\n*/"
    },
    "com.google.common.collect.StandardTable$ColumnKeySet": {
        "com.google.common.collect.StandardTable$ColumnKeySet:remove(java.lang.Object)": "/**\n* Removes the specified object from the collection.\n* @param obj the object to remove; returns false if null\n* @return true if the object was removed, false otherwise\n*/",
        "com.google.common.collect.StandardTable$ColumnKeySet:retainAll(java.util.Collection)": "/**\n* Retains only elements in this collection that are contained in the specified collection.\n* @param c collection to retain elements from\n* @return true if this collection was modified\n*/",
        "com.google.common.collect.StandardTable$ColumnKeySet:iterator()": "/**\n* Returns an iterator for column keys.\n* @return Iterator for column keys of type C\n*/",
        "com.google.common.collect.StandardTable$ColumnKeySet:removeAll(java.util.Collection)": "/**\n* Removes specified elements from the backing map's key sets.\n* @param c collection of elements to remove\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.StandardTable$ColumnKeySet:size()": "/**\n* Returns the number of elements in the iterator.\n* @return number of elements as an int\n*/",
        "com.google.common.collect.StandardTable$ColumnKeySet:contains(java.lang.Object)": "/**\n* Checks if the object is present in the collection.\n* @param obj object to check for existence\n* @return true if the object exists, false otherwise\n*/"
    },
    "com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues": {
        "com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues:remove(java.lang.Object)": "/**\n* Removes the specified object from the column map.\n* @param obj object to be removed\n* @return true if the object was found and removed, false otherwise\n*/",
        "com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues:removeAll(java.util.Collection)": "/**\n* Removes columns present in the specified collection.\n* @param c collection of columns to remove\n* @return true if any columns were removed, false otherwise\n*/",
        "com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues:retainAll(java.util.Collection)": "/**\n* Retains only columns present in the specified collection.\n* @param c collection of columns to retain\n* @return true if any columns were removed, false otherwise\n*/"
    },
    "com.google.common.collect.StandardTable$ColumnMap": {
        "com.google.common.collect.StandardTable$ColumnMap:createEntrySet()": "/**\n* Creates a set of entries mapping columns to row-value pairs.\n* @return Set of column to row-value map entries\n*/",
        "com.google.common.collect.StandardTable$ColumnMap:createValues()": "/**\n* Creates a collection of column map values.\n* @return Collection of maps containing key-value pairs\n*/",
        "com.google.common.collect.StandardTable$ColumnMap:keySet()": "/**\n* Returns the set of keys for the columns.\n* @return Set of column keys from columnKeySet()\n*/",
        "com.google.common.collect.StandardTable$ColumnMap:get(java.lang.Object)": "/**\n* Retrieves a map for the specified key if it exists.\n* @param key the key to lookup in the collection\n* @return Map associated with the key or null if not found\n*/",
        "com.google.common.collect.StandardTable$ColumnMap:containsKey(java.lang.Object)": "/**\n* Checks if a key exists in the collection.\n* @param key the key to check for existence\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.StandardTable$ColumnMap:remove(java.lang.Object)": "/**\n* Removes a column by key if it exists.\n* @param key the key of the column to remove\n* @return removed column map or null if not found\n*/"
    },
    "com.google.common.collect.StandardTable$Row": {
        "com.google.common.collect.StandardTable$Row:wrapEntry(java.util.Map$Entry)": "/**\n* Wraps an Entry for enhanced functionality.\n* @param entry the Entry to wrap\n* @return a ForwardingMapEntry that delegates to the provided Entry\n*/",
        "com.google.common.collect.StandardTable$Row:computeBackingRowMap()": "/**\n* Retrieves the backing row map for a given row key.\n* @return Map of type C to V or null if not found\n*/",
        "com.google.common.collect.StandardTable$Row:updateBackingRowMapField()": "/**\n* Updates backingRowMap if null or empty and rowKey exists in backingMap.\n*/",
        "com.google.common.collect.StandardTable$Row:maintainEmptyInvariant()": "/**\n* Maintains invariant for empty backingRowMap.\n* Updates backingRowMap and removes rowKey if empty.\n*/",
        "com.google.common.collect.StandardTable$Row:containsKey(java.lang.Object)": "/**\n* Checks if the backing map contains the specified key.\n* @param key the key to check; may be null\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.StandardTable$Row:get(java.lang.Object)": "/**\n* Retrieves a value from backingRowMap by key after updating the map.\n* @param key the key to look up in the map\n* @return value associated with the key or null if key is null or not found\n*/",
        "com.google.common.collect.StandardTable$Row:size()": "/**\n* Returns the size of the backingRowMap or 0 if it's null.\n* @return size of backingRowMap\n*/",
        "com.google.common.collect.StandardTable$Row:entryIterator()": "/**\n* Returns an iterator over the entries in backingRowMap.\n* @return Iterator of map entries or empty if backingRowMap is null\n*/",
        "com.google.common.collect.StandardTable$Row:entrySpliterator()": "/**\n* Returns a Spliterator for backingRowMap entries.\n* @return Spliterator of Entry<C, V> or empty if backingRowMap is null\n*/",
        "com.google.common.collect.StandardTable$Row:put(java.lang.Object,java.lang.Object)": "/**\n* Stores a value for a given key after null checks.\n* @param key the key for the value to be stored\n* @param value the value to store\n* @return previous value associated with the key or null\n*/",
        "com.google.common.collect.StandardTable$Row:remove(java.lang.Object)": "/**\n* Removes a key from the backingRowMap.\n* @param key the key to remove; @return removed value or null if absent\n*/",
        "com.google.common.collect.StandardTable$Row:clear()": "/**\n* Clears the backingRowMap and updates its invariant.\n* Calls updateBackingRowMapField and maintainEmptyInvariant.\n*/"
    },
    "com.google.common.collect.StandardTable$RowMap$EntrySet": {
        "com.google.common.collect.StandardTable$RowMap$EntrySet:size()": "/**\n* Returns the number of entries in the backing map.\n* @return the size of the backing map\n*/",
        "com.google.common.collect.StandardTable$RowMap$EntrySet:remove(java.lang.Object)": "/**\n* Removes the specified entry from the backing map if valid.\n* @param obj the entry to remove, must be an instance of Entry\n* @return true if the entry was removed, false otherwise\n*/",
        "com.google.common.collect.StandardTable$RowMap$EntrySet:iterator()": "/**\n* Returns an iterator of map entries from the backing map's key set.\n* @return iterator of entries (row key and associated column-value map)\n*/",
        "com.google.common.collect.StandardTable$RowMap$EntrySet:contains(java.lang.Object)": "/**\n* Checks if the map contains a specific Entry object.\n* @param obj the object to check for containment\n* @return true if the Entry is found, false otherwise\n*/"
    },
    "com.google.common.collect.StandardTable$RowMap": {
        "com.google.common.collect.StandardTable$RowMap:remove(java.lang.Object)": "/**\n* Removes entry by key from the map.\n* @param key the key to remove; returns null if key is null\n* @return value associated with the key or null if not found\n*/",
        "com.google.common.collect.StandardTable$RowMap:createEntrySet()": "/**\n* Creates a set of entries mapping rows to column-value maps.\n* @return a Set of Entry objects representing the data\n*/",
        "com.google.common.collect.StandardTable$RowMap:containsKey(java.lang.Object)": "/**\n* Checks if a key exists in the data structure.\n* @param key the key to check for existence\n* @return true if the key is present, false otherwise\n*/",
        "com.google.common.collect.StandardTable$RowMap:get(java.lang.Object)": "/**\n* Retrieves a map by key if the row exists.\n* @param key the key to lookup the row\n* @return map of column-value pairs or null if row not found\n*/"
    },
    "com.google.common.collect.StandardTable$TableSet": {
        "com.google.common.collect.StandardTable$TableSet:isEmpty()": "/**\n* Checks if the backing map is empty.\n* @return true if the map has no entries, false otherwise\n*/",
        "com.google.common.collect.StandardTable$TableSet:clear()": "/**\n* Clears all entries from the backing map.\n*/"
    },
    "com.google.common.collect.Streams$MapWithIndexSpliterator": {
        "com.google.common.collect.Streams$MapWithIndexSpliterator:trySplit()": "/**\n* Attempts to split the current spliterator.\n* @return a new split or null if splitting is not possible\n*/",
        "com.google.common.collect.Streams$MapWithIndexSpliterator:estimateSize()": "/**\n* Estimates the size of elements in the spliterator.\n* @return estimated number of elements as a long\n*/",
        "com.google.common.collect.Streams$MapWithIndexSpliterator:characteristics()": "/**\n* Returns the combined characteristics of the spliterator.\n* @return bitwise AND of ORDERED, SIZED, and SUBSIZED characteristics\n*/"
    },
    "com.google.common.collect.Streams$TemporaryPair": {
        "com.google.common.collect.Streams$TemporaryPair:<init>(java.lang.Object,java.lang.Object)": "/**\n* Constructs a TemporaryPair with specified elements.\n* @param a first element of type A\n* @param b second element of type B\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedAsMapValues": {
        "com.google.common.collect.Synchronized$SynchronizedAsMapValues:<init>(java.util.Collection,java.lang.Object)": "/**\n* Constructs SynchronizedAsMapValues with a delegate collection and mutex for synchronization.\n* @param delegate collection of values to synchronize\n* @param mutex optional object for locking\n*/",
        "com.google.common.collect.Synchronized$SynchronizedAsMapValues:iterator()": "/**\n* Returns a synchronized iterator over transformed collections.\n* @return Iterator of type Collection<V> from the delegate collection\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedSet": {
        "com.google.common.collect.Synchronized$SynchronizedSet:<init>(java.util.Set,java.lang.Object)": "/**\n* Constructs a SynchronizedSet with a delegate set and an optional mutex for synchronization.\n* @param delegate the underlying set to synchronize\n* @param mutex optional object for synchronization control\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSet:delegate()": "/**\n* Returns a Set view of the collection delegate from the superclass.\n* @return Set of type E from the superclass delegate\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSet:equals(java.lang.Object)": "/**\n* Compares this object to another for equality.\n* @param o object to compare with this instance\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSet:hashCode()": "/**\n* Computes the hash code of the object.\n* @return hash code value as an integer\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedAsMapEntries": {
        "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:iterator()": "/**\n* Returns an iterator over entries with synchronized value collections.\n* @return Iterator of map entries with collections of values\n*/",
        "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:equals(java.lang.Object)": "/**\n* Checks equality with another object.\n* @param o object to compare for equality\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:containsAll(java.util.Collection)": "/**\n* Checks if the collection contains all elements of the specified collection.\n* @param c collection of elements to check for presence\n* @return true if all elements are present, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:<init>(java.util.Set,java.lang.Object)": "/**\n* Constructs a SynchronizedAsMapEntries with a delegate set and optional mutex for synchronization.\n* @param delegate set of map entries to synchronize\n* @param mutex optional object for synchronization control\n*/",
        "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:removeAll(java.util.Collection)": "/**\n* Removes specified elements from the collection.\n* @param c collection of elements to remove\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:retainAll(java.util.Collection)": "/**\n* Retains elements in the collection that are also in the specified collection.\n* @param c collection of elements to retain\n* @return true if any elements were removed\n*/",
        "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:toArray()": "/**\n* Converts the collection to an array.\n* @return an array of objects, may be null if collection contains nulls\n*/",
        "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:contains(java.lang.Object)": "/**\n* Checks if the collection contains a specific entry.\n* @param o object to check for presence as an entry\n* @return true if entry is found, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:remove(java.lang.Object)": "/**\n* Removes the specified object from the collection.\n* @param o object to remove, can be null\n* @return true if removed, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedAsMapEntries:toArray(java.lang.Object[])": "/**\n* Converts the collection to an array of specified type.\n* @param array target array for elements\n* @return filled array of type T\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedObject": {
        "com.google.common.collect.Synchronized$SynchronizedObject:delegate()": "/**\n* Returns the delegate object.\n* @return the delegate instance\n*/",
        "com.google.common.collect.Synchronized$SynchronizedObject:toString()": "/**\n* Returns the string representation of the delegate object.\n* @return string representation of the delegate\n*/",
        "com.google.common.collect.Synchronized$SynchronizedObject:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object to the provided output stream.\n* @param stream the output stream for serialization\n* @throws IOException if an I/O error occurs during serialization\n*/",
        "com.google.common.collect.Synchronized$SynchronizedObject:<init>(java.lang.Object,java.lang.Object)": "/**\n* Initializes SynchronizedObject with a delegate and optional mutex.\n* @param delegate non-null object to delegate calls\n* @param mutex optional mutex for synchronization\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedQueue": {
        "com.google.common.collect.Synchronized$SynchronizedQueue:<init>(java.util.Queue,java.lang.Object)": "/**\n* Constructs a SynchronizedQueue with a delegate and optional mutex for synchronization.\n* @param delegate the underlying queue to synchronize\n* @param mutex optional mutex object for thread safety\n*/",
        "com.google.common.collect.Synchronized$SynchronizedQueue:delegate()": "/**\n* Returns a Queue delegate of the current instance.\n* @return Queue of type E from the superclass delegate\n*/",
        "com.google.common.collect.Synchronized$SynchronizedQueue:element()": "/**\n* Retrieves the head element of the queue.\n* @return head element of type E from the delegate queue\n*/",
        "com.google.common.collect.Synchronized$SynchronizedQueue:offer(java.lang.Object)": "/**\n* Adds an element to the queue.\n* @param e element to be added\n* @return true if added successfully, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedQueue:peek()": "/**\n* Retrieves the next element without removing it.\n* @return the next element of type E or null if empty\n*/",
        "com.google.common.collect.Synchronized$SynchronizedQueue:poll()": "/**\n* Retrieves and removes the head of the queue.\n* @return the head element or null if the queue is empty\n*/",
        "com.google.common.collect.Synchronized$SynchronizedQueue:remove()": "/**\n* Removes and returns an element from the queue.\n* @return the removed element of type E\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedList": {
        "com.google.common.collect.Synchronized$SynchronizedList:<init>(java.util.List,java.lang.Object)": "/**\n* Constructs a SynchronizedList with a delegate and optional mutex for thread safety.\n* @param delegate the list to synchronize\n* @param mutex optional object for locking; if null, uses the list itself\n*/",
        "com.google.common.collect.Synchronized$SynchronizedList:delegate()": "/**\n* Returns a list delegate of the current instance.\n* @return List of type E from the superclass delegate\n*/",
        "com.google.common.collect.Synchronized$SynchronizedList:add(int,java.lang.Object)": "/**\n* Adds an element at the specified index in a thread-safe manner.\n* @param index position to insert the element\n* @param element the element to be added\n*/",
        "com.google.common.collect.Synchronized$SynchronizedList:addAll(int,java.util.Collection)": "/**\n* Adds all elements from collection c at specified index.\n* @param index position to insert elements\n* @param c collection of elements to add\n* @return true if the collection was modified\n*/",
        "com.google.common.collect.Synchronized$SynchronizedList:get(int)": "/**\n* Retrieves element at specified index in a thread-safe manner.\n* @param index position of the element to retrieve\n* @return element of type E at the given index\n*/",
        "com.google.common.collect.Synchronized$SynchronizedList:indexOf(java.lang.Object)": "/**\n* Returns the index of the specified object in the list.\n* @param o object to find the index of\n* @return index of the object, or -1 if not found\n*/",
        "com.google.common.collect.Synchronized$SynchronizedList:lastIndexOf(java.lang.Object)": "/**\n* Returns the last index of the specified element in the collection.\n* @param o the element to search for\n* @return the last index of the element, or -1 if not found\n*/",
        "com.google.common.collect.Synchronized$SynchronizedList:listIterator()": "/**\n* Returns a list iterator for the current instance.\n* @return ListIterator of type E from the delegated list\n*/",
        "com.google.common.collect.Synchronized$SynchronizedList:listIterator(int)": "/**\n* Returns a list iterator starting at the specified index.\n* @param index the starting position for the iterator\n* @return ListIterator of type E\n*/",
        "com.google.common.collect.Synchronized$SynchronizedList:remove(int)": "/**\n* Removes element at specified index from the delegate.\n* @param index position of the element to remove\n* @return removed element of type E\n*/",
        "com.google.common.collect.Synchronized$SynchronizedList:set(int,java.lang.Object)": "/**\n* Sets the element at the specified index in the collection.\n* @param index position to set the element\n* @param element value to be set\n* @return previous element at the specified index\n*/",
        "com.google.common.collect.Synchronized$SynchronizedList:replaceAll(java.util.function.UnaryOperator)": "/**\n* Replaces all elements using the provided operator.\n* @param operator function to apply to each element\n*/",
        "com.google.common.collect.Synchronized$SynchronizedList:sort(java.util.Comparator)": "/**\n* Sorts elements using the provided comparator.\n* @param c comparator for sorting, can be null for natural order\n*/",
        "com.google.common.collect.Synchronized$SynchronizedList:subList(int,int)": "/**\n* Returns a sublist from the current instance's list.\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n* @return sublist of type E\n*/",
        "com.google.common.collect.Synchronized$SynchronizedList:equals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param o object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedList:hashCode()": "/**\n* Computes the hash code of the current instance.\n* @return hash code as an integer\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedMultiset": {
        "com.google.common.collect.Synchronized$SynchronizedMultiset:<init>(com.google.common.collect.Multiset,java.lang.Object)": "/**\n* Constructs a SynchronizedMultiset with a delegate and optional mutex for synchronization.\n* @param delegate the underlying multiset to synchronize\n* @param mutex optional object for controlling access\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultiset:delegate()": "/**\n* Returns the Multiset delegate of the current instance.\n* @return Multiset of type E from the superclass delegate\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultiset:count(java.lang.Object)": "/**\n* Counts occurrences of an object in a synchronized manner.\n* @param o object to count occurrences of\n* @return number of occurrences of the object\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultiset:add(java.lang.Object,int)": "/**\n* Adds n occurrences of element e to the collection.\n* @param e element to add, may be null\n* @param n number of occurrences to add\n* @return total occurrences after addition\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultiset:remove(java.lang.Object,int)": "/**\n* Removes n occurrences of object o from the collection.\n* @param o object to remove; @param n number of occurrences to remove\n* @return number of occurrences removed\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultiset:setCount(java.lang.Object,int)": "/**\n* Sets the count for a specified element in a synchronized manner.\n* @param element the element to set the count for\n* @param count the new count value\n* @return previous count of the element\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultiset:setCount(java.lang.Object,int,int)": "/**\n* Updates the count of an element in a synchronized manner.\n* @param element the element to update, @param oldCount current count, @param newCount new count\n* @return true if the count was updated, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultiset:elementSet()": "/**\n* Returns a synchronized set of elements from the multiset.\n* @return Set of elements of type E\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultiset:entrySet()": "/**\n* Retrieves the entry set of the multiset, initializing it if necessary.\n* @return Set of Multiset.Entry objects\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultiset:equals(java.lang.Object)": "/**\n* Checks equality with another object.\n* @param o object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultiset:hashCode()": "/**\n* Computes the hash code of the current instance.\n* @return hash code as an integer\n*/"
    },
    "com.google.common.collect.TableCollectors$MutableCell": {
        "com.google.common.collect.TableCollectors$MutableCell:getRowKey()": "/**\n* Retrieves the current row key.\n* @return the row key of type R\n*/",
        "com.google.common.collect.TableCollectors$MutableCell:getColumnKey()": "/**\n* Retrieves the key for the current column.\n* @return the column key of type C\n*/",
        "com.google.common.collect.TableCollectors$MutableCell:getValue()": "/**\n* Retrieves the stored value.\n* @return the value of type V\n*/",
        "com.google.common.collect.TableCollectors$MutableCell:merge(java.lang.Object,java.util.function.BinaryOperator)": "/**\n* Merges a value using the provided binary operator.\n* @param value the value to merge\n* @param mergeFunction function to combine current and new value\n*/",
        "com.google.common.collect.TableCollectors$MutableCell:<init>(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Initializes a MutableCell with row, column, and value.\n* @param row the row position\n* @param column the column position\n* @param value the cell value\n*/"
    },
    "com.google.common.collect.TableCollectors": {
        "com.google.common.collect.TableCollectors:<init>()": "/**\n* Private constructor to prevent instantiation of the TableCollectors class.\n*/",
        "com.google.common.collect.TableCollectors:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)": "/**\n* Collects elements into an ImmutableTable using specified row, column, and value functions.\n* @param rowFunction transforms input to row key\n* @param columnFunction transforms input to column key\n* @param valueFunction transforms input to value\n* @param mergeFunction merges duplicate values\n* @return an ImmutableTable constructed from the input elements\n*/",
        "com.google.common.collect.TableCollectors:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)": "/**\n* Collects elements into a table structure based on provided functions.\n* @param rowFunction maps input to row keys\n* @param columnFunction maps input to column keys\n* @param valueFunction maps input to values\n* @param mergeFunction merges values for duplicate keys\n* @param tableSupplier provides a new table instance\n* @return Collector that builds the table\n*/",
        "com.google.common.collect.TableCollectors:mergeTables(com.google.common.collect.Table,java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)": "/**\n* Merges value into a table at specified row and column using a merge function.\n* @param table the target table to merge into\n* @param row the row key for the table\n* @param column the column key for the table\n* @param value the value to merge\n* @param mergeFunction function to combine existing and new values\n*/",
        "com.google.common.collect.TableCollectors:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.Supplier)": "/**\n* Collects elements into a table structure based on row, column, and value functions.\n* @param rowFunction maps input to row keys\n* @param columnFunction maps input to column keys\n* @param valueFunction maps input to values\n* @param tableSupplier provides a new table instance\n* @return Collector that builds the table\n*/",
        "com.google.common.collect.TableCollectors:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function)": "/**\n* Collects elements into an ImmutableTable using specified functions for rows, columns, and values.\n* @param rowFunction function to extract row keys\n* @param columnFunction function to extract column keys\n* @param valueFunction function to extract values\n* @return ImmutableTable constructed from the collected elements\n*/"
    },
    "com.google.common.collect.Tables$1": {
        "com.google.common.collect.Tables$1:<init>()": "/**\n* Private constructor to prevent instantiation of the Tables class.\n*/"
    },
    "com.google.common.collect.Tables$TransformedTable": {
        "com.google.common.collect.Tables$TransformedTable:contains(java.lang.Object,java.lang.Object)": "/**\n* Checks if the table contains the specified row and column keys.\n* @param rowKey the key for the row\n* @param columnKey the key for the column\n* @return true if both keys exist, false otherwise\n*/",
        "com.google.common.collect.Tables$TransformedTable:size()": "/**\n* Returns the number of elements in the collection.\n* @return size of the collection as an integer\n*/",
        "com.google.common.collect.Tables$TransformedTable:clear()": "/**\n* Clears all entries from the fromTable.\n*/",
        "com.google.common.collect.Tables$TransformedTable:put(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Unsupported operation for putting a value in the data structure.\n* @param rowKey key for the row\n* @param columnKey key for the column\n* @param value value to be inserted\n*/",
        "com.google.common.collect.Tables$TransformedTable:putAll(com.google.common.collect.Table)": "/**\n* Throws UnsupportedOperationException for putAll operation.\n* @param table the table to be added, which is not supported\n*/",
        "com.google.common.collect.Tables$TransformedTable:rowKeySet()": "/**\n* Returns the set of row keys from the underlying table.\n* @return Set of row keys\n*/",
        "com.google.common.collect.Tables$TransformedTable:columnKeySet()": "/**\n* Returns a set of column keys from the underlying table.\n* @return Set of column keys\n*/",
        "com.google.common.collect.Tables$TransformedTable:<init>(com.google.common.collect.Table,com.google.common.base.Function)": "/**\n* Constructs a TransformedTable from a source table and a transformation function.\n* @param fromTable the source table to transform\n* @param function the function to apply for transformation\n*/",
        "com.google.common.collect.Tables$TransformedTable:get(java.lang.Object,java.lang.Object)": "/**\n* Retrieves value from table by row and column keys.\n* @param rowKey key for the row, can be null\n* @param columnKey key for the column, can be null\n* @return corresponding value or null if not found\n*/",
        "com.google.common.collect.Tables$TransformedTable:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes value by row and column keys if present.\n* @param rowKey key for the row, may be null\n* @param columnKey key for the column, may be null\n* @return removed value or null if not found\n*/",
        "com.google.common.collect.Tables$TransformedTable:cellSpliterator()": "/**\n* Creates a Spliterator for cell values using a mapping function.\n* @return Spliterator of mapped Cell objects\n*/",
        "com.google.common.collect.Tables$TransformedTable:cellIterator()": "/**\n* Returns an iterator over transformed cells from the table.\n* @return Iterator of transformed Cell objects\n*/",
        "com.google.common.collect.Tables$TransformedTable:createValues()": "/**\n* Creates a collection of transformed values from a source table.\n* @return Collection of transformed values\n*/",
        "com.google.common.collect.Tables$TransformedTable:row(java.lang.Object)": "/**\n* Transforms values of a row in the table based on a given function.\n* @param rowKey key identifying the row\n* @return new map with transformed values from the row\n*/",
        "com.google.common.collect.Tables$TransformedTable:column(java.lang.Object)": "/**\n* Transforms values of a specified column in a table.\n* @param columnKey key of the column to transform\n* @return new map with transformed column values\n*/",
        "com.google.common.collect.Tables$TransformedTable:rowMap()": "/**\n* Transforms the row map of a table using a specified function.\n* @return transformed map with rows as keys and transformed values\n*/",
        "com.google.common.collect.Tables$TransformedTable:columnMap()": "/**\n* Transforms column map of a table using a specified function.\n* @return transformed map of columns with values modified by the function\n*/"
    },
    "com.google.common.collect.Tables$TransposeTable": {
        "com.google.common.collect.Tables$TransposeTable:clear()": "/**\n* Clears all elements from the original collection.\n*/",
        "com.google.common.collect.Tables$TransposeTable:column(java.lang.Object)": "/**\n* Retrieves a map of values for the specified column key.\n* @param columnKey the key for the desired column\n* @return a map of values associated with the column key\n*/",
        "com.google.common.collect.Tables$TransposeTable:columnKeySet()": "/**\n* Returns the set of column keys from the original data structure.\n* @return Set of column keys\n*/",
        "com.google.common.collect.Tables$TransposeTable:columnMap()": "/**\n* Returns a map of columns from the original row map.\n* @return a map of column keys to value maps\n*/",
        "com.google.common.collect.Tables$TransposeTable:contains(java.lang.Object,java.lang.Object)": "/**\n* Checks if the specified row and column keys exist in the original data structure.\n* @param rowKey the key for the row\n* @param columnKey the key for the column\n* @return true if both keys are present, false otherwise\n*/",
        "com.google.common.collect.Tables$TransposeTable:containsColumn(java.lang.Object)": "/**\n* Checks if the specified column key exists.\n* @param columnKey key of the column to check\n* @return true if the column exists, false otherwise\n*/",
        "com.google.common.collect.Tables$TransposeTable:containsRow(java.lang.Object)": "/**\n* Checks if the specified row key exists in the original data.\n* @param rowKey the key of the row to check\n* @return true if the row exists, false otherwise\n*/",
        "com.google.common.collect.Tables$TransposeTable:containsValue(java.lang.Object)": "/**\n* Checks if the collection contains the specified value.\n* @param value the value to check for presence\n* @return true if the value is found, false otherwise\n*/",
        "com.google.common.collect.Tables$TransposeTable:get(java.lang.Object,java.lang.Object)": "/**\n* Retrieves value by specified row and column keys.\n* @param rowKey key for the row\n* @param columnKey key for the column\n* @return value associated with the keys or null if not found\n*/",
        "com.google.common.collect.Tables$TransposeTable:put(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Puts a value in the specified row and column.\n* @param rowKey the key for the row\n* @param columnKey the key for the column\n* @param value the value to be stored\n* @return previous value or null if not present\n*/",
        "com.google.common.collect.Tables$TransposeTable:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes the entry for the specified row and column keys.\n* @param rowKey the key for the row to remove\n* @param columnKey the key for the column to remove\n* @return the removed value or null if not found\n*/",
        "com.google.common.collect.Tables$TransposeTable:row(java.lang.Object)": "/**\n* Retrieves a map of values for the specified row key.\n* @param rowKey key identifying the row\n* @return map of values corresponding to the row key\n*/",
        "com.google.common.collect.Tables$TransposeTable:rowKeySet()": "/**\n* Returns the set of row keys from the original structure.\n* @return Set of row keys\n*/",
        "com.google.common.collect.Tables$TransposeTable:rowMap()": "/**\n* Returns a map of rows to columns from the original structure.\n* @return Map of row keys to their corresponding column maps\n*/",
        "com.google.common.collect.Tables$TransposeTable:size()": "/**\n* Returns the number of elements in the original collection.\n* @return size of the original collection\n*/",
        "com.google.common.collect.Tables$TransposeTable:values()": "/**\n* Returns a collection of values from the original map.\n* @return Collection of values from the original map\n*/",
        "com.google.common.collect.Tables$TransposeTable:<init>(com.google.common.collect.Table)": "/**\n* Initializes TransposeTable with a non-null original table.\n* @param original the table to transpose\n*/",
        "com.google.common.collect.Tables$TransposeTable:cellSpliterator()": "/**\n* Returns a Spliterator for transposed cells from the original cell set.\n* @return Spliterator of transposed Cell objects\n*/",
        "com.google.common.collect.Tables$TransposeTable:cellIterator()": "/**\n* Returns an iterator of transposed cells from the original cell set.\n* @return Iterator of Cell objects with transposed dimensions\n*/",
        "com.google.common.collect.Tables$TransposeTable:putAll(com.google.common.collect.Table)": "/**\n* Inserts all entries from the transposed table into the original table.\n* @param table the table to transpose and insert\n*/"
    },
    "com.google.common.collect.Tables$UnmodifiableTable": {
        "com.google.common.collect.Tables$UnmodifiableTable:delegate()": "/**\n* Returns the delegate Table instance with a covariant cast.\n* @return Table<R, C, V> delegate instance\n*/",
        "com.google.common.collect.Tables$UnmodifiableTable:clear()": "/**\n* Clears the collection, but operation is unsupported.\n* @throws UnsupportedOperationException if called\n*/",
        "com.google.common.collect.Tables$UnmodifiableTable:put(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Unsupported operation to put a value in the data structure.\n* @param rowKey the key for the row\n* @param columnKey the key for the column\n* @param value the value to be stored\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.Tables$UnmodifiableTable:putAll(com.google.common.collect.Table)": "/**\n* Throws UnsupportedOperationException for putAll operation.\n* @param table the Table to add elements from\n*/",
        "com.google.common.collect.Tables$UnmodifiableTable:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes an entry by row and column keys.\n* @param rowKey the key for the row\n* @param columnKey the key for the column\n* @return null as operation is unsupported\n*/",
        "com.google.common.collect.Tables$UnmodifiableTable:cellSet()": "/**\n* Returns an unmodifiable set of cells from the delegate.\n* @return Set of Cell objects containing row, column, and value\n*/",
        "com.google.common.collect.Tables$UnmodifiableTable:column(java.lang.Object)": "/**\n* Returns an unmodifiable map of column values by key.\n* @param columnKey the key for the column to retrieve\n* @return unmodifiable map of column values\n*/",
        "com.google.common.collect.Tables$UnmodifiableTable:columnKeySet()": "/**\n* Returns an unmodifiable set of column keys from the delegate.\n* @return Set of column keys\n*/",
        "com.google.common.collect.Tables$UnmodifiableTable:row(java.lang.Object)": "/**\n* Returns an unmodifiable map of values for the specified row key.\n* @param rowKey the key identifying the row\n* @return unmodifiable map of values associated with the row key\n*/",
        "com.google.common.collect.Tables$UnmodifiableTable:rowKeySet()": "/**\n* Returns an unmodifiable set of row keys from the delegate.\n* @return unmodifiable Set of row keys\n*/",
        "com.google.common.collect.Tables$UnmodifiableTable:values()": "/**\n* Returns an unmodifiable collection of values from the delegate.\n* @return unmodifiable Collection of values\n*/",
        "com.google.common.collect.Tables$UnmodifiableTable:<init>(com.google.common.collect.Table)": "/**\n* Constructs an UnmodifiableTable with a non-null delegate.\n* @param delegate the table to be wrapped, must not be null\n*/",
        "com.google.common.collect.Tables$UnmodifiableTable:columnMap()": "/**\n* Returns an unmodifiable nested map of column values.\n* @return unmodifiable map of columns to rows with values\n*/",
        "com.google.common.collect.Tables$UnmodifiableTable:rowMap()": "/**\n* Returns an unmodifiable view of the row map.\n* @return unmodifiable Map of row keys to column-value maps\n*/"
    },
    "com.google.common.collect.TransformedIterator": {
        "com.google.common.collect.TransformedIterator:hasNext()": "/**\n* Checks if there are more elements in the iterator.\n* @return true if more elements exist, false otherwise\n*/",
        "com.google.common.collect.TransformedIterator:next()": "/**\n* Retrieves the next transformed element from the iterator.\n* @return transformed element of type T\n*/",
        "com.google.common.collect.TransformedIterator:remove()": "/**\n* Removes the current element from the backing iterator.\n*/",
        "com.google.common.collect.TransformedIterator:<init>(java.util.Iterator)": "/**\n* Initializes TransformedIterator with a non-null backing iterator.\n* @param backingIterator the iterator to transform\n*/"
    },
    "com.google.common.collect.TransformedListIterator": {
        "com.google.common.collect.TransformedListIterator:backingIterator()": "/**\n* Returns a ListIterator for the backing collection.\n* @return ListIterator of type F from the backing collection\n*/",
        "com.google.common.collect.TransformedListIterator:set(java.lang.Object)": "/**\n* Throws UnsupportedOperationException when attempting to set an element.\n* @param element the element to set, not supported in this implementation\n*/",
        "com.google.common.collect.TransformedListIterator:add(java.lang.Object)": "/**\n* Throws UnsupportedOperationException when attempting to add an element.\n* @param element the element to add (not used)\n*/",
        "com.google.common.collect.TransformedListIterator:hasPrevious()": "/**\n* Checks if there is a previous element in the collection.\n* @return true if a previous element exists, false otherwise\n*/",
        "com.google.common.collect.TransformedListIterator:previous()": "/**\n* Returns the previous element after transforming it.\n* @return transformed element of type T from the backing collection\n*/",
        "com.google.common.collect.TransformedListIterator:nextIndex()": "/**\n* Returns the next index of the backing iterator.\n* @return next index as an integer from the backing collection\n*/",
        "com.google.common.collect.TransformedListIterator:previousIndex()": "/**\n* Retrieves the previous index in the backing collection.\n* @return index of the previous element, or -1 if no such element exists\n*/",
        "com.google.common.collect.TransformedListIterator:<init>(java.util.ListIterator)": "/**\n* Constructs TransformedListIterator from a backing ListIterator.\n* @param backingIterator iterator to transform\n*/"
    },
    "com.google.common.collect.TreeBasedTable$Factory": {
        "com.google.common.collect.TreeBasedTable$Factory:<init>(java.util.Comparator)": "/**\n* Constructs a Factory with the specified comparator.\n* @param comparator the comparator for ordering elements\n*/",
        "com.google.common.collect.TreeBasedTable$Factory:get()": "/**\n* Creates a new TreeMap with the specified comparator.\n* @return a TreeMap instance with the defined ordering\n*/"
    },
    "com.google.common.collect.TreeBasedTable": {
        "com.google.common.collect.TreeBasedTable:columnComparator()": "/**\n* Returns the column comparator.\n* @return Comparator for the column, deprecated method\n*/",
        "com.google.common.collect.TreeBasedTable:row(java.lang.Object)": "/**\n* Retrieves a sorted map of values for the specified row key.\n* @param rowKey the key identifying the row\n* @return a SortedMap of column-value pairs for the row\n*/",
        "com.google.common.collect.TreeBasedTable:<init>(java.util.Comparator,java.util.Comparator)": "/**\n* Constructs a TreeBasedTable with specified row and column comparators.\n* @param rowComparator comparator for row ordering\n* @param columnComparator comparator for column ordering\n*/",
        "com.google.common.collect.TreeBasedTable:create()": "/**\n* Creates a TreeBasedTable with natural ordering for rows and columns.\n* @return TreeBasedTable instance with specified comparators\n*/",
        "com.google.common.collect.TreeBasedTable:create(java.util.Comparator,java.util.Comparator)": "/**\n* Creates a TreeBasedTable with specified row and column comparators.\n* @param rowComparator comparator for row ordering\n* @param columnComparator comparator for column ordering\n* @return a new TreeBasedTable instance\n*/",
        "com.google.common.collect.TreeBasedTable:rowMap()": "/**\n* Returns a sorted map of rows to column maps.\n* @return SortedMap of row keys to column maps\n*/",
        "com.google.common.collect.TreeBasedTable:rowKeySet()": "/**\n* Returns a sorted set of row keys from the row map.\n* @return SortedSet of row keys\n*/",
        "com.google.common.collect.TreeBasedTable:createColumnKeyIterator()": "/**\n* Creates an iterator for unique column keys sorted by a comparator.\n* @return Iterator of unique column keys\n*/",
        "com.google.common.collect.TreeBasedTable:rowComparator()": "/**\n* Returns the row comparator, ensuring it's non-null.\n* @return Comparator for row keys\n*/",
        "com.google.common.collect.TreeBasedTable:create(com.google.common.collect.TreeBasedTable)": "/**\n* Creates a new TreeBasedTable by copying from an existing one.\n* @param table source table to copy from\n* @return a new TreeBasedTable instance\n*/"
    },
    "com.google.common.collect.TreeBasedTable$TreeRow": {
        "com.google.common.collect.TreeBasedTable$TreeRow:firstKey()": "/**\n* Retrieves the first key from the sorted map.\n* @return the first key of the sorted map\n* @throws NoSuchElementException if the map is empty\n*/",
        "com.google.common.collect.TreeBasedTable$TreeRow:lastKey()": "/**\n* Retrieves the last key from the sorted map.\n* @return last key of type C or throws NoSuchElementException if empty\n*/",
        "com.google.common.collect.TreeBasedTable$TreeRow:updateWholeRowField()": "/**\n* Updates wholeRow from backingMap if it is null or empty for the given rowKey.\n*/",
        "com.google.common.collect.TreeBasedTable$TreeRow:comparator()": "/**\n* Returns a comparator for type C.\n* @return Comparator for type C, using a deprecated method.\n*/",
        "com.google.common.collect.TreeBasedTable$TreeRow:computeBackingRowMap()": "/**\n* Computes a sub-map of wholeRow based on lower and upper bounds.\n* @return filtered SortedMap or null if wholeRow is empty\n*/",
        "com.google.common.collect.TreeBasedTable$TreeRow:maintainEmptyInvariant()": "/**\n* Maintains invariant by clearing empty wholeRow from backingMap.\n*/",
        "com.google.common.collect.TreeBasedTable$TreeRow:compare(java.lang.Object,java.lang.Object)": "/**\n* Compares two objects using a comparator.\n* @param a first object to compare\n* @param b second object to compare\n* @return comparison result as an integer\n*/",
        "com.google.common.collect.TreeBasedTable$TreeRow:keySet()": "/**\n* Returns a sorted set view of the keys contained in this map.\n* @return SortedSet of keys\n*/",
        "com.google.common.collect.TreeBasedTable$TreeRow:rangeContains(java.lang.Object)": "/**\n* Checks if an object is within the defined range.\n* @param o object to check for range inclusion\n* @return true if within range, false otherwise\n*/",
        "com.google.common.collect.TreeBasedTable$TreeRow:subMap(java.lang.Object,java.lang.Object)": "/**\n* Returns a sorted map view from fromKey to toKey.\n* @param fromKey starting key, must not be null\n* @param toKey ending key, must not be null\n* @return SortedMap from fromKey to toKey\n*/",
        "com.google.common.collect.TreeBasedTable$TreeRow:headMap(java.lang.Object)": "/**\n* Returns a view of the portion of this map whose keys are less than toKey.\n* @param toKey the upper key for the head map\n* @return SortedMap containing keys less than toKey\n*/",
        "com.google.common.collect.TreeBasedTable$TreeRow:tailMap(java.lang.Object)": "/**\n* Returns a view of the portion of this map whose keys are greater than or equal to fromKey.\n* @param fromKey the key to start the view from; must not be null\n* @return a sorted map containing the tail of the entries\n*/",
        "com.google.common.collect.TreeBasedTable$TreeRow:containsKey(java.lang.Object)": "/**\n* Checks if the key is within range and exists in the backing map.\n* @param key the key to check; may be null\n* @return true if key is in range and exists, false otherwise\n*/",
        "com.google.common.collect.TreeBasedTable$TreeRow:put(java.lang.Object,java.lang.Object)": "/**\n* Stores a value for a key after validation checks.\n* @param key the key for the value to be stored\n* @param value the value to store\n* @return previous value associated with the key or null\n*/"
    },
    "com.google.common.collect.TreeMultimap": {
        "com.google.common.collect.TreeMultimap:createAsMap()": "/**\n* Creates a map representation of key-value pairs.\n* @return Map of keys to collections of values\n*/",
        "com.google.common.collect.TreeMultimap:createCollection()": "/**\n* Creates a sorted collection using the specified value comparator.\n* @return a SortedSet of values sorted by the comparator\n*/",
        "com.google.common.collect.TreeMultimap:keyComparator()": "/**\n* Returns the key comparator for this collection.\n* @return Comparator for keys, or null if not set\n*/",
        "com.google.common.collect.TreeMultimap:get(java.lang.Object)": "/**\n* Retrieves a NavigableSet by key.\n* @param key the key to look up\n* @return NavigableSet associated with the key\n*/",
        "com.google.common.collect.TreeMultimap:valueComparator()": "/**\n* Returns the comparator for values in the collection.\n* @return Comparator for values, or null if not set\n*/",
        "com.google.common.collect.TreeMultimap:keySet()": "/**\n* Returns the navigable set of keys from the map.\n* @return NavigableSet containing the keys\n*/",
        "com.google.common.collect.TreeMultimap:createCollection(java.lang.Object)": "/**\n* Creates a collection based on the provided key.\n* @param key the key to create the collection for\n* @return a Collection of type V\n*/",
        "com.google.common.collect.TreeMultimap:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object state to an output stream.\n* @param stream the output stream for serialization\n* @throws IOException if an I/O error occurs during serialization\n*/",
        "com.google.common.collect.TreeMultimap:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from an ObjectInputStream.\n* @param stream input stream for serialized data\n*/",
        "com.google.common.collect.TreeMultimap:asMap()": "/**\n* Returns a sorted map of collections from the object.\n* @return a NavigableMap with keys of type K and values of type Collection<V>\n*/",
        "com.google.common.collect.TreeMultimap:<init>(java.util.Comparator,java.util.Comparator)": "/**\n* Initializes TreeMultimap with key and value comparators.\n* @param keyComparator comparator for keys\n* @param valueComparator comparator for values\n*/",
        "com.google.common.collect.TreeMultimap:create()": "/**** Creates a TreeMultimap with natural ordering for keys and values. */",
        "com.google.common.collect.TreeMultimap:create(java.util.Comparator,java.util.Comparator)": "/**\n* Creates a TreeMultimap with specified key and value comparators.\n* @param keyComparator comparator for keys\n* @param valueComparator comparator for values\n* @return new TreeMultimap instance\n*/",
        "com.google.common.collect.TreeMultimap:<init>(java.util.Comparator,java.util.Comparator,com.google.common.collect.Multimap)": "/**\n* Initializes TreeMultimap with comparators and populates it from another multimap.\n* @param keyComparator comparator for keys\n* @param valueComparator comparator for values\n* @param multimap source multimap to copy entries from\n*/",
        "com.google.common.collect.TreeMultimap:create(com.google.common.collect.Multimap)": "/**\n* Creates a TreeMultimap from the given multimap.\n* @param multimap source multimap to copy entries from\n* @return TreeMultimap with natural ordering for keys and values\n*/"
    },
    "com.google.common.collect.TreeMultiset$AvlNode": {
        "com.google.common.collect.TreeMultiset$AvlNode:getCount()": "/**\n* Returns the current element count.\n* @return the number of elements\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:<init>()": "/**\n* Initializes an AVL tree node with null element and count of 1.\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:pred()": "/**\n* Returns the predecessor node.\n* @return AvlNode<E> predecessor node, never null\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:succ()": "/**\n* Returns the successor node.\n* @return the successor AvlNode or throws NullPointerException if not present\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:totalCount(com.google.common.collect.TreeMultiset$AvlNode)": "/**\n* Returns the total count of nodes in the AVL tree.\n* @param node the root node of the AVL tree, or null if empty\n* @return total count of nodes, or 0 if node is null\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:height(com.google.common.collect.TreeMultiset$AvlNode)": "/**\n* Returns the height of the AVL tree node.\n* @param node the AVL node; null returns height as 0\n* @return height of the node or 0 if node is null\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:<init>(java.lang.Object,int)": "/**\n* Initializes an AVL tree node with element and count.\n* @param elem element stored in the node\n* @param elemCount positive count of the element\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:getElement()": "/**\n* Retrieves an element, casting it to a nullable type.\n* @return the element of type E, possibly null\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:recomputeMultiset()": "/**\n* Recomputes distinct elements and total count for the multiset.\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:recomputeHeight()": "/**\n* Recomputes the height of the AVL tree node based on its children.\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:balanceFactor()": "/**\n* Calculates the balance factor of the AVL tree node.\n* @return difference between heights of left and right subtrees\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:addRightChild(java.lang.Object,int)": "/**\n* Adds a right child node to the AVL tree.\n* @param e element to store in the new node\n* @param count positive count of the element\n* @return the updated AvlNode with the new child\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:addLeftChild(java.lang.Object,int)": "/** Adds a left child node and updates tree properties. @param e element for the node @param count count of the element @return this AVL node */",
        "com.google.common.collect.TreeMultiset$AvlNode:count(java.util.Comparator,java.lang.Object)": "/**\n* Counts occurrences of element e using the comparator.\n* @param comparator defines the comparison logic\n* @param e element to count occurrences of\n* @return number of occurrences of e\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:ceiling(java.util.Comparator,java.lang.Object)": "/**\n* Finds the smallest node greater than or equal to the given element.\n* @param comparator used for element comparison\n* @param e element to compare against\n* @return the ceiling node or null if not found\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:floor(java.util.Comparator,java.lang.Object)": "/**\n* Finds the largest node less than or equal to the given element.\n* @param comparator used for comparison\n* @param e element to compare against\n* @return AvlNode or null if no such node exists\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:recompute()": "/**\n* Updates multiset and height of the AVL tree node.\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:toString()": "/**\n* Returns a string representation of the multiset entry.\n* @return string describing the entry with its element and count\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:rotateLeft()": "/**\n* Performs a left rotation on the AVL tree node.\n* @return new top node after rotation\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:rotateRight()": "/**\n* Performs a right rotation on the AVL tree node.\n* @return new top node after rotation\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:rebalance()": "/**\n* Rebalances the AVL tree node based on its balance factor.\n* @return the new top node after rebalancing\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:add(java.util.Comparator,java.lang.Object,int,int[])": "/**\n* Adds an element to the AVL tree, updating counts and balancing as needed.\n* @param comparator for element comparison\n* @param e element to add\n* @param count number of occurrences\n* @param result array for operation outcome\n* @return updated AvlNode after addition\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:removeMin(com.google.common.collect.TreeMultiset$AvlNode)": "/**\n* Removes the minimum node from the AVL tree.\n* @param node the current node being processed\n* @return the new top node after removal and rebalancing\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:removeMax(com.google.common.collect.TreeMultiset$AvlNode)": "/**\n* Removes the maximum node from the AVL tree.\n* @param node the node from which to remove the maximum\n* @return the updated node after removal and rebalancing\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:deleteMe()": "/**\n* Deletes the current node and returns the new top node after rebalancing.\n* @return updated AvlNode or null if no children exist\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:remove(java.util.Comparator,java.lang.Object,int,int[])": "/**\n* Removes specified elements from the AVL tree.\n* @param comparator used for element comparison\n* @param e element to remove\n* @param count number of occurrences to remove\n* @param result array to store removal count\n* @return updated node or null if deleted\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:setCount(java.util.Comparator,java.lang.Object,int,int[])": "/**\n* Updates the count of an element in the AVL tree.\n* @param comparator for comparing elements\n* @param e the element to update\n* @param count new count for the element\n* @param result array to store previous count\n* @return updated AvlNode or null if deleted\n*/",
        "com.google.common.collect.TreeMultiset$AvlNode:setCount(java.util.Comparator,java.lang.Object,int,int,int[])": "/**\n* Updates the count of an element in the AVL tree.\n* @param comparator used for element comparison\n* @param e element whose count is to be set\n* @param expectedCount current count of the element\n* @param newCount new count to set\n* @param result array to store the old count\n* @return updated AvlNode or null if deleted\n*/"
    },
    "com.google.common.collect.TreeMultiset$Aggregate$1": {
        "com.google.common.collect.TreeMultiset$Aggregate$1:nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode)": "/**\n* Computes an aggregate value for the given AVL tree node.\n* @param node the AVL tree node to aggregate\n* @return the aggregated integer value\n*/",
        "com.google.common.collect.TreeMultiset$Aggregate$1:treeAggregate(com.google.common.collect.TreeMultiset$AvlNode)": "/**\n* Computes aggregate value of nodes in an AVL tree.\n* @param root the root node of the AVL tree\n* @return the aggregated long value of the tree nodes\n*/"
    },
    "com.google.common.collect.TreeMultiset$Aggregate$2": {
        "com.google.common.collect.TreeMultiset$Aggregate$2:treeAggregate(com.google.common.collect.TreeMultiset$AvlNode)": "/**\n* Computes the aggregate value of nodes in an AVL tree.\n* @param root the root node of the AVL tree\n* @return the aggregate long value of the tree nodes\n*/",
        "com.google.common.collect.TreeMultiset$Aggregate$2:nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode)": "/**\n* Computes an aggregate value for the given AVL tree node.\n* @param node the AVL tree node to aggregate\n* @return the aggregate integer value\n*/"
    },
    "com.google.common.collect.TreeMultiset": {
        "com.google.common.collect.TreeMultiset:distinctElements(com.google.common.collect.TreeMultiset$AvlNode)": "/**\n* Returns the count of distinct elements in the AVL tree node.\n* @param node the AVL tree node, may be null\n* @return number of distinct elements, or 0 if node is null\n*/",
        "com.google.common.collect.TreeMultiset:successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)": "/**\n* Links two AVL nodes as successor and predecessor.\n* @param a first AVL node to link\n* @param b second AVL node to link\n*/",
        "com.google.common.collect.TreeMultiset:entryIterator()": "/**\n* Returns an iterator for entries within a specified range.\n* @return Iterator of Entry<E> elements\n*/",
        "com.google.common.collect.TreeMultiset:wrapEntry(com.google.common.collect.TreeMultiset$AvlNode)": "/**\n* Wraps an AvlNode into an Entry for element retrieval and count management.\n* @param baseEntry the AvlNode to wrap\n* @return a new Entry representing the wrapped node\n*/",
        "com.google.common.collect.TreeMultiset:descendingEntryIterator()": "/**\n* Returns an iterator for entries in descending order.\n* @return Iterator of Entry<E> objects\n*/",
        "com.google.common.collect.TreeMultiset:firstEntry()": "/**\n* Retrieves the first entry in the collection or null if empty.\n* @return first Entry object or null if no entries exist\n*/",
        "com.google.common.collect.TreeMultiset:lastEntry()": "/**\n* Retrieves the last entry in the collection.\n* @return last Entry<E> or null if the collection is empty\n*/",
        "com.google.common.collect.TreeMultiset:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object to an output stream.\n* @param stream the output stream for serialization\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.collect.TreeMultiset:successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)": "/**\n* Links three AVL nodes as successors.\n* @param a first node, b second node, c third node to link\n*/",
        "com.google.common.collect.TreeMultiset:elementIterator()": "/**\n* Converts entry iterator to an element iterator.\n* @return Iterator of elements extracted from entries\n*/",
        "com.google.common.collect.TreeMultiset:comparator()": "/**\n* Returns the comparator used for sorting elements.\n* @return Comparator for elements of type E\n*/",
        "com.google.common.collect.TreeMultiset:<init>(com.google.common.collect.TreeMultiset$Reference,com.google.common.collect.GeneralRange,com.google.common.collect.TreeMultiset$AvlNode)": "/**\n* Initializes TreeMultiset with root reference, range, and end link.\n* @param rootReference reference to the root node\n* @param range the range of elements\n* @param endLink the end node for the multiset\n*/",
        "com.google.common.collect.TreeMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Returns a sub-multiset bounded by specified elements and types.\n* @param fromElement starting element, @param toElement ending element\n* @return SortedMultiset bounded by fromElement and toElement\n*/",
        "com.google.common.collect.TreeMultiset:clear()": "/**\n* Clears all elements from the AVL tree; handles bounds and rebalancing.\n*/",
        "com.google.common.collect.TreeMultiset:descendingMultiset()": "/**\n* Returns a descending sorted multiset or creates it if not already initialized.\n* @return SortedMultiset in descending order\n*/",
        "com.google.common.collect.TreeMultiset:iterator()": "/**\n* Returns an iterator for the current multiset.\n* @return Iterator for the multiset entries\n*/",
        "com.google.common.collect.TreeMultiset:aggregateBelowRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)": "/**\n* Recursively aggregates values below a specified range in a binary tree.\n* @param aggr the Aggregate object for calculations\n* @param node the current AvlNode to evaluate, nullable\n* @return the aggregated long value\n*/",
        "com.google.common.collect.TreeMultiset:aggregateAboveRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)": "/**\n* Aggregates values above a specified range in a tree.\n* @param aggr the aggregation strategy\n* @param node the current tree node, nullable\n* @return total aggregated value above the range\n*/",
        "com.google.common.collect.TreeMultiset:<init>(java.util.Comparator)": "/**\n* Constructs a TreeMultiset with specified comparator.\n* @param comparator the comparator for ordering elements\n*/",
        "com.google.common.collect.TreeMultiset:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from input stream and initializes internal structures.\n* @param stream input stream for reading serialized object data\n*/",
        "com.google.common.collect.TreeMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Creates a head multiset up to a specified upper bound.\n* @param upperBound the upper limit for the multiset\n* @param boundType type of bound for the upper limit\n* @return SortedMultiset containing elements up to the upperBound\n*/",
        "com.google.common.collect.TreeMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Creates a tail multiset starting from lowerBound.\n* @param lowerBound the element to start from\n* @param boundType specifies the inclusivity of lowerBound\n* @return SortedMultiset containing elements from lowerBound onwards\n*/",
        "com.google.common.collect.TreeMultiset:count(java.lang.Object)": "/**\n* Counts occurrences of an element in the tree.\n* @param element the element to count; returns 0 if not in range or an error occurs\n*/",
        "com.google.common.collect.TreeMultiset:firstNode()": "/**\n* Retrieves the first node within a specified range.\n* @return the first AvlNode or null if not found or outside bounds\n*/",
        "com.google.common.collect.TreeMultiset:lastNode()": "/**\n* Returns the last node within a specified range, or null if none exists.\n* @return last AvlNode<E> within range or null if not found\n*/",
        "com.google.common.collect.TreeMultiset:aggregateForEntries(com.google.common.collect.TreeMultiset$Aggregate)": "/**\n* Aggregates tree values considering specified bounds.\n* @param aggr the aggregation strategy\n* @return total aggregated long value\n*/",
        "com.google.common.collect.TreeMultiset:create()": "/**\n* Creates a TreeMultiset using natural ordering for comparable elements.\n* @return a TreeMultiset instance\n*/",
        "com.google.common.collect.TreeMultiset:create(java.util.Comparator)": "/**** Creates a TreeMultiset with optional comparator. \n* @param comparator optional comparator for element ordering \n* @return TreeMultiset instance \n*/",
        "com.google.common.collect.TreeMultiset:pollFirstEntry()": "/**\n* Retrieves and removes the first entry from the multiset.\n* @return Entry with element and count or null if empty\n*/",
        "com.google.common.collect.TreeMultiset:pollLastEntry()": "/**\n* Retrieves and removes the last entry in descending order.\n* @return Entry object or null if no entries exist\n*/",
        "com.google.common.collect.TreeMultiset:forEachEntry(java.util.function.ObjIntConsumer)": "/**\n* Applies an action to each entry in the range.\n* @param action consumer for elements and their counts\n*/",
        "com.google.common.collect.TreeMultiset:size()": "/**\n* Returns the size of entries as an int, using saturation for overflow.\n* @return saturated int size of entries\n*/",
        "com.google.common.collect.TreeMultiset:distinctElements()": "/**\n* Returns the count of distinct elements.\n* @return number of distinct elements as an int\n*/",
        "com.google.common.collect.TreeMultiset:create(java.lang.Iterable)": "/**\n* Creates a TreeMultiset from the provided elements.\n* @param elements source of elements to add\n* @return TreeMultiset containing the elements\n*/",
        "com.google.common.collect.TreeMultiset:add(java.lang.Object,int)": "/**\n* Adds occurrences of an element to the AVL tree.\n* @param element to add; @param occurrences count to add; @return previous count or 0 if new\n*/",
        "com.google.common.collect.TreeMultiset:remove(java.lang.Object,int)": "/**\n* Removes specified occurrences of an element from the AVL tree.\n* @param element the element to remove\n* @param occurrences number of occurrences to remove\n* @return count of removed occurrences\n*/",
        "com.google.common.collect.TreeMultiset:setCount(java.lang.Object,int)": "/**\n* Sets the count of an element; returns previous count or 0 if not found.\n* @param element the element to update; @param count new count for the element\n* @return previous count of the element\n*/",
        "com.google.common.collect.TreeMultiset:setCount(java.lang.Object,int,int)": "/**\n* Sets the count of an element in the AVL tree.\n* @param element the element to update\n* @param oldCount the current count of the element\n* @param newCount the new count to set\n* @return true if count was updated, false otherwise\n*/"
    },
    "com.google.common.collect.TreeMultiset$Reference": {
        "com.google.common.collect.TreeMultiset$Reference:checkAndSet(java.lang.Object,java.lang.Object)": "/**\n* Checks if the current value matches expected and sets newValue if it does.\n* @param expected the expected current value\n* @param newValue the new value to set if expected matches\n*/",
        "com.google.common.collect.TreeMultiset$Reference:get()": "/**\n* Retrieves the stored value.\n* @return the stored value or null if not set\n*/",
        "com.google.common.collect.TreeMultiset$Reference:clear()": "/**\n* Resets the value to null, effectively clearing its content.\n*/"
    },
    "com.google.common.collect.TreeRangeMap$1": {
        "com.google.common.collect.TreeRangeMap$1:<init>()": "/**\n* Initializes a new TreeRangeMap with an empty entries map.\n*/",
        "com.google.common.collect.TreeRangeMap$1:span()": "/**\n* Returns the span of the range map.\n* @return Range object representing the lower and upper bounds\n* @throws NoSuchElementException if the range map is empty\n*/",
        "com.google.common.collect.TreeRangeMap$1:putAll(com.google.common.collect.RangeMap)": "/**\n* Adds all entries from the specified range map to this map.\n* @param rangeMap the range map containing entries to add\n*/",
        "com.google.common.collect.TreeRangeMap$1:asMapOfRanges()": "/**\n* Returns a map of ranges from the current entries.\n* @return Map of ranges with corresponding values\n*/",
        "com.google.common.collect.TreeRangeMap$1:asDescendingMapOfRanges()": "/**\n* Returns a descending map of ranges from the current entries.\n* @return Map of ranges with corresponding values\n*/",
        "com.google.common.collect.TreeRangeMap$1:clear()": "/**\n* Clears all entries from the entriesByLowerBound collection.\n*/",
        "com.google.common.collect.TreeRangeMap$1:put(com.google.common.collect.Range,java.lang.Object)": "/**\n* Inserts a value into the map for a specified range if not empty.\n* @param range the range key for the value\n* @param value the value to insert, must not be null\n*/",
        "com.google.common.collect.TreeRangeMap$1:putCoalescing(com.google.common.collect.Range,java.lang.Object)": "/**\n* Inserts value into the coalesced range or adds a new entry if empty.\n* @param range the range to coalesce\n* @param value the value to associate with the range\n*/",
        "com.google.common.collect.TreeRangeMap$1:remove(com.google.common.collect.Range)": "/**\n* Removes the specified range from the range map.\n* @param rangeToRemove the range to be removed, must not be null or empty\n*/",
        "com.google.common.collect.TreeRangeMap$1:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)": "/**\n* Merges values in a specified range using a remapping function.\n* @param range the range to merge values within\n* @param value the value to assign to unmapped ranges\n* @param remappingFunction function to combine existing and new values\n*/",
        "com.google.common.collect.TreeRangeMap$1:subRangeMap(com.google.common.collect.Range)": "/**\n* Returns a sub-range map based on the provided range.\n* @param subRange the range to create a sub-range map from\n* @return SubRangeMap for the given range or this if the range is all\n*/"
    },
    "com.google.common.collect.TreeRangeMap$AsMapOfRanges": {
        "com.google.common.collect.TreeRangeMap$AsMapOfRanges:size()": "/**\n* Returns the number of entries in the collection.\n* @return the size of the entries collection\n*/",
        "com.google.common.collect.TreeRangeMap$AsMapOfRanges:entryIterator()": "/**\n* Returns an iterator over entries in the entryIterable.\n* @return Iterator of Entry<Range<K>, V>\n*/",
        "com.google.common.collect.TreeRangeMap$AsMapOfRanges:get(java.lang.Object)": "/**\n* Retrieves value by key if key is a Range.\n* @param key potential Range key\n* @return associated value or null if not found\n*/",
        "com.google.common.collect.TreeRangeMap$AsMapOfRanges:containsKey(java.lang.Object)": "/**\n* Checks if the map contains a key.\n* @param key potential key to check\n* @return true if key is present, false otherwise\n*/"
    },
    "com.google.common.collect.TreeRangeMap$RangeMapEntry": {
        "com.google.common.collect.TreeRangeMap$RangeMapEntry:<init>(com.google.common.collect.Range,java.lang.Object)": "/**\n* Constructs a RangeMapEntry with specified range and value.\n* @param range the range of keys\n* @param value the associated value for the range\n*/",
        "com.google.common.collect.TreeRangeMap$RangeMapEntry:getUpperBound()": "/**\n* Retrieves the upper bound of the key.\n* @return Cut object representing the upper bound\n*/",
        "com.google.common.collect.TreeRangeMap$RangeMapEntry:getLowerBound()": "/**\n* Retrieves the lower bound key.\n* @return Cut object representing the lower bound\n*/",
        "com.google.common.collect.TreeRangeMap$RangeMapEntry:contains(java.lang.Comparable)": "/**\n* Checks if the key contains the specified value.\n* @param value the value to check\n* @return true if the key contains the value, false otherwise\n*/",
        "com.google.common.collect.TreeRangeMap$RangeMapEntry:<init>(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object)": "/**\n* Constructs a RangeMapEntry with specified bounds and value.\n* @param lowerBound the lower limit of the range\n* @param upperBound the upper limit of the range\n* @param value the associated value for the range\n*/"
    },
    "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap": {
        "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:entrySet()": "/**\n* Returns a set view of the mappings in the range map.\n* @return Set of entries with Range keys and corresponding values\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:keySet()": "/**\n* Returns a set of keys (ranges) in the map.\n* @return Set of Range<K> representing the keys\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:values()": "/**\n* Returns a collection of values from the map.\n* @return Collection of values associated with the map entries\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:entryIterator()": "/**\n* Returns an iterator over entries within a specified sub-range.\n* @return Iterator of Range<K> and V entries or empty iterator if sub-range is empty\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:get(java.lang.Object)": "/**\n* Retrieves value for the specified range key if it is valid and matches the sub-range.\n* @param key the range key to retrieve value for\n* @return value associated with the range or null if invalid\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:containsKey(java.lang.Object)": "/**\n* Checks if the specified key exists in the map.\n* @param key the key to check for existence\n* @return true if the key is present, false otherwise\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:remove(java.lang.Object)": "/**\n* Removes value by key if present and returns it.\n* @param key the key to remove the associated value\n* @return the removed value or null if not found\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:removeEntryIf(com.google.common.base.Predicate)": "/**\n* Removes entries matching the predicate and returns if any were removed.\n* @param predicate criteria for entry removal\n* @return true if entries were removed, false otherwise\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:clear()": "/**\n* Clears the sub-range map by invoking the clear method.\n*/"
    },
    "com.google.common.collect.TreeRangeMap$SubRangeMap": {
        "com.google.common.collect.TreeRangeMap$SubRangeMap:asMapOfRanges()": "/**\n* Returns a map representation of the range mappings.\n* @return map of ranges to values\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap:asDescendingMapOfRanges()": "/**\n* Returns a descending map of ranges from the subRange.\n* @return Map of Range<K> to V entries within subRange\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap:equals(java.lang.Object)": "/**\n* Compares this RangeMap to another object for equality.\n* @param o object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap:hashCode()": "/**\n* Computes the hash code based on range mappings.\n* @return hash code of the map representation of ranges\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap:toString()": "/**\n* Converts the object to its string representation.\n* @return string representation of the range mappings\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap:span()": "/**\n* Computes the span of a range based on lower and upper bounds.\n* @return Range object defined by the calculated bounds\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap:get(java.lang.Comparable)": "/**\n* Retrieves value for key if within subRange; otherwise returns null.\n* @param key the key to look up\n* @return associated value or null if out of range\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap:getEntry(java.lang.Comparable)": "/**** Retrieves an entry for a key within a specified sub-range. \n* @param key the key to look up \n* @return an Entry if found within subRange, otherwise null \n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap:subRangeMap(com.google.common.collect.Range)": "/**\n* Returns a sub-range map for the specified range.\n* @param range the range to create a sub-map from\n* @return RangeMap for the specified sub-range or empty if not connected\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap:clear()": "/**\n* Clears the range map by removing the specified sub-range.\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap:remove(com.google.common.collect.Range)": "/**\n* Removes intersecting range from the range map if connected.\n* @param range the range to be removed\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap:put(com.google.common.collect.Range,java.lang.Object)": "/**\n* Adds a value to the range map if the range is within the subRange.\n* @param range the range of keys for the value\n* @param value the value to associate with the range\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap:putCoalescing(com.google.common.collect.Range,java.lang.Object)": "/**\n* Inserts a value into a range, coalescing with existing ranges if within a subRange.\n* @param range the range for the value\n* @param value the value to associate with the range\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap:putAll(com.google.common.collect.RangeMap)": "/**\n* Inserts entries from a range map if its span is enclosed by the current range.\n* @param rangeMap the range map to copy entries from\n*/",
        "com.google.common.collect.TreeRangeMap$SubRangeMap:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)": "/**** Merges a value into a specified range after validating the range's enclosure. \n* @param range the range to merge\n* @param value the value to merge\n* @param remappingFunction function to remap existing values \n*/"
    },
    "com.google.common.collect.TreeRangeMap": {
        "com.google.common.collect.TreeRangeMap:clear()": "/**\n* Clears all entries from the lower bound collection.\n*/",
        "com.google.common.collect.TreeRangeMap:asMapOfRanges()": "/**\n* Returns a map of ranges from the current entries.\n* @return a map with Range keys and corresponding values\n*/",
        "com.google.common.collect.TreeRangeMap:asDescendingMapOfRanges()": "/**\n* Returns a descending map of ranges from the current entries.\n* @return Map of Range keys to values in descending order\n*/",
        "com.google.common.collect.TreeRangeMap:toString()": "/**\n* Returns a string representation of the entries by lower bound.\n* @return String of entry values\n*/",
        "com.google.common.collect.TreeRangeMap:emptySubRangeMap()": "/**\n* Returns an empty RangeMap instance.\n* @return an empty RangeMap of type K and V\n*/",
        "com.google.common.collect.TreeRangeMap:<init>()": "/**\n* Initializes a TreeRangeMap with an empty entries map.\n*/",
        "com.google.common.collect.TreeRangeMap:equals(java.lang.Object)": "/**\n* Compares this RangeMap with another object for equality.\n* @param o object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.TreeRangeMap:hashCode()": "/**\n* Computes the hash code based on current entries' range map.\n* @return hash code of the range map\n*/",
        "com.google.common.collect.TreeRangeMap:create()": "/**\n* Creates a new empty TreeRangeMap instance.\n* @return a TreeRangeMap with no entries\n*/",
        "com.google.common.collect.TreeRangeMap:getEntry(java.lang.Comparable)": "/**\n* Retrieves the entry for a given key from the range map.\n* @param key the key to look up\n* @return Entry if found, otherwise null\n*/",
        "com.google.common.collect.TreeRangeMap:get(java.lang.Comparable)": "/**\n* Retrieves value associated with the given key.\n* @param key the key to look up\n* @return value if found, otherwise null\n*/",
        "com.google.common.collect.TreeRangeMap:subRangeMap(com.google.common.collect.Range)": "/**\n* Returns a sub-range map based on the provided range.\n* @param subRange the range to create a sub-map from\n* @return RangeMap for the specified sub-range\n*/",
        "com.google.common.collect.TreeRangeMap:span()": "/**\n* Returns a Range spanning the first and last entries.\n* @return Range object defined by the first and last entry bounds\n*/",
        "com.google.common.collect.TreeRangeMap:coalesce(com.google.common.collect.Range,java.lang.Object,java.util.Map$Entry)": "/**\n* Coalesces a range with an entry if they are connected and values match.\n* @param range the range to potentially coalesce\n* @param value the value to compare with entry's value\n* @param entry optional entry for connection check\n* @return the coalesced range or the original range\n*/",
        "com.google.common.collect.TreeRangeMap:putRangeMapEntry(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object)": "/**\n* Adds a range entry to the map with specified bounds and value.\n* @param lowerBound the lower limit of the range\n* @param upperBound the upper limit of the range\n* @param value the associated value for the range\n*/",
        "com.google.common.collect.TreeRangeMap:coalescedRange(com.google.common.collect.Range,java.lang.Object)": "/**\n* Coalesces a range with adjacent entries based on a value.\n* @param range the range to coalesce\n* @param value the value to compare with entries\n* @return the coalesced Range object\n*/",
        "com.google.common.collect.TreeRangeMap:remove(com.google.common.collect.Range)": "/**\n* Removes a specified range from the range map.\n* @param rangeToRemove the range to be removed\n*/",
        "com.google.common.collect.TreeRangeMap:split(com.google.common.collect.Cut)": "/**\n* Splits a range at the specified cut point.\n* @param cut the Cut point to split the range\n*/",
        "com.google.common.collect.TreeRangeMap:put(com.google.common.collect.Range,java.lang.Object)": "/**\n* Adds a value to the range map; replaces existing entry if range is not empty.\n* @param range the range of keys for the value\n* @param value the value to associate with the range\n*/",
        "com.google.common.collect.TreeRangeMap:putCoalescing(com.google.common.collect.Range,java.lang.Object)": "/**\n* Inserts a value into a range, coalescing with adjacent ranges if necessary.\n* @param range the range of keys for the value\n* @param value the value to associate with the range\n*/",
        "com.google.common.collect.TreeRangeMap:putAll(com.google.common.collect.RangeMap)": "/**\n* Inserts all entries from the given range map into this range map.\n* @param rangeMap the range map to copy entries from\n*/",
        "com.google.common.collect.TreeRangeMap:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)": "/**\n* Merges a range with a value using a remapping function.\n* @param range the range to merge\n* @param value the value to merge\n* @param remappingFunction function to remap existing values\n*/"
    },
    "com.google.common.collect.TreeRangeSet$AsRanges": {
        "com.google.common.collect.TreeRangeSet$AsRanges:delegate()": "/**\n* Returns the collection of ranges.\n* @return Collection of Range objects\n*/",
        "com.google.common.collect.TreeRangeSet$AsRanges:hashCode()": "/**\n* Returns the hash code of the current object using its set representation.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.TreeRangeSet$AsRanges:equals(java.lang.Object)": "/**\n* Checks if this object is equal to the specified object.\n* @param o object to compare with\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.collect.TreeRangeSet$RangesByUpperBound": {
        "com.google.common.collect.TreeRangeSet$RangesByUpperBound:<init>(java.util.NavigableMap,com.google.common.collect.Range)": "/**\n* Constructs RangesByUpperBound with specified lower bounds and upper bound window.\n* @param rangesByLowerBound map of lower bounds to ranges\n* @param upperBoundWindow range defining the upper bound limits\n*/",
        "com.google.common.collect.TreeRangeSet$RangesByUpperBound:<init>(java.util.NavigableMap)": "/**\n* Initializes RangesByUpperBound with lower bounds and sets the upper bound window.\n* @param rangesByLowerBound map of lower bounds to their corresponding ranges\n*/",
        "com.google.common.collect.TreeRangeSet$RangesByUpperBound:comparator()": "/**\n* Returns a comparator for Cut<C> using natural ordering.\n* @return Comparator for Cut<C> elements\n*/",
        "com.google.common.collect.TreeRangeSet$RangesByUpperBound:entryIterator()": "/**\n* Iterates over ranges within the upperBoundWindow.\n* @return an iterator of Entry objects containing Cut and Range pairs\n*/",
        "com.google.common.collect.TreeRangeSet$RangesByUpperBound:descendingEntryIterator()": "/**\n* Returns an iterator of descending entries within the upper bound range.\n* @return Iterator of Entry objects or empty if no valid entries exist\n*/",
        "com.google.common.collect.TreeRangeSet$RangesByUpperBound:get(java.lang.Object)": "/**\n* Retrieves a Range by key if it's a valid Cut; returns null otherwise.\n* @param key the key to lookup, expected to be a Cut\n* @return Range object or null if not found or invalid\n*/",
        "com.google.common.collect.TreeRangeSet$RangesByUpperBound:size()": "/**** Returns the number of elements in the range or the size of the lower bound ranges. */",
        "com.google.common.collect.TreeRangeSet$RangesByUpperBound:isEmpty()": "/**\n* Checks if the range is empty based on upperBoundWindow comparison.\n* @return true if empty, false otherwise\n*/",
        "com.google.common.collect.TreeRangeSet$RangesByUpperBound:containsKey(java.lang.Object)": "/**\n* Checks if the given key is present in the collection.\n* @param key the key to check for existence\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.TreeRangeSet$RangesByUpperBound:subMap(com.google.common.collect.Range)": "/**\n* Returns a sub-map of ranges within the specified window.\n* @param window the range defining the sub-map limits\n* @return NavigableMap of ranges or an empty map if disconnected\n*/",
        "com.google.common.collect.TreeRangeSet$RangesByUpperBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)": "/**\n* Returns a sub-map of ranges defined by keys and inclusivity.\n* @param fromKey starting key, inclusive if fromInclusive is true\n* @param fromInclusive true for including fromKey\n* @param toKey ending key, inclusive if toInclusive is true\n* @param toInclusive true for including toKey\n* @return NavigableMap of ranges within the specified limits\n*/",
        "com.google.common.collect.TreeRangeSet$RangesByUpperBound:headMap(com.google.common.collect.Cut,boolean)": "/**\n* Returns a sub-map up to a specified key with optional inclusivity.\n* @param toKey the upper limit key for the sub-map\n* @param inclusive true for inclusive range, false for exclusive\n* @return NavigableMap of ranges up to the specified key\n*/",
        "com.google.common.collect.TreeRangeSet$RangesByUpperBound:tailMap(com.google.common.collect.Cut,boolean)": "/**\n* Retrieves a tail map starting from a specified key.\n* @param fromKey the starting key for the tail map\n* @param inclusive true to include fromKey, false to exclude it\n* @return NavigableMap of ranges from the specified key\n*/"
    },
    "com.google.common.collect.TreeRangeSet": {
        "com.google.common.collect.TreeRangeSet:asRanges()": "/**\n* Returns a set of ranges, initializing if not already done.\n* @return Set of Range<C> objects\n*/",
        "com.google.common.collect.TreeRangeSet:asDescendingSetOfRanges()": "/**\n* Returns a descending set of ranges.\n* @return Set of Range<C> or initializes if not previously set\n*/",
        "com.google.common.collect.TreeRangeSet:complement()": "/**\n* Returns the complement of the current RangeSet.\n* @return RangeSet representing the complement\n*/",
        "com.google.common.collect.TreeRangeSet:<init>(java.util.NavigableMap)": "/**\n* Constructs a TreeRangeSet with specified lower cut ranges.\n* @param rangesByLowerCut map of ranges keyed by their lower cut\n*/",
        "com.google.common.collect.TreeRangeSet:contains(java.lang.Comparable)": "/**\n* Checks if the specified value is within the range.\n* @param value the value to check for containment\n* @return true if the value is in range, false otherwise\n*/",
        "com.google.common.collect.TreeRangeSet:isEmpty()": "/**\n* Checks if the collection of ranges is empty.\n* @return true if no ranges exist, false otherwise\n*/",
        "com.google.common.collect.TreeRangeSet:enclosesAll(com.google.common.collect.RangeSet)": "/**\n* Checks if this range set encloses all ranges in another range set.\n* @param other range set to check against\n* @return true if all ranges are enclosed, false otherwise\n*/",
        "com.google.common.collect.TreeRangeSet:addAll(com.google.common.collect.RangeSet)": "/**\n* Adds all ranges from another RangeSet to this one.\n* @param other the RangeSet containing ranges to add\n*/",
        "com.google.common.collect.TreeRangeSet:removeAll(com.google.common.collect.RangeSet)": "/**\n* Removes all ranges that overlap with the specified range set.\n* @param other the range set to remove ranges from this set\n*/",
        "com.google.common.collect.TreeRangeSet:equals(java.lang.Object)": "/**\n* Checks equality with another object, specifically a RangeSet.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.TreeRangeSet:create()": "/**\n* Creates a new TreeRangeSet instance with an empty range map.\n* @return a TreeRangeSet object\n*/",
        "com.google.common.collect.TreeRangeSet:clear()": "/**\n* Clears all elements by removing them from the entire range.\n*/",
        "com.google.common.collect.TreeRangeSet:create(com.google.common.collect.RangeSet)": "/**\n* Creates a TreeRangeSet from the provided RangeSet.\n* @param rangeSet ranges to include in the TreeRangeSet\n* @return a new TreeRangeSet instance\n*/",
        "com.google.common.collect.TreeRangeSet:create(java.lang.Iterable)": "/**\n* Creates a TreeRangeSet from the given ranges.\n* @param ranges Iterable of Range objects to be added\n* @return TreeRangeSet containing the specified ranges\n*/",
        "com.google.common.collect.TreeRangeSet:encloses(com.google.common.collect.Range)": "/**\n* Checks if this range encloses another range.\n* @param range the range to check\n* @return true if this range encloses the given range, false otherwise\n*/",
        "com.google.common.collect.TreeRangeSet:rangeEnclosing(com.google.common.collect.Range)": "/**\n* Returns the enclosing range for the given range.\n* @param range the range to check for enclosure\n* @return the enclosing Range or null if not found\n*/",
        "com.google.common.collect.TreeRangeSet:replaceRangeWithSameLowerBound(com.google.common.collect.Range)": "/**\n* Updates range collection based on lower bound; removes if empty.\n* @param range the Range object to process\n*/",
        "com.google.common.collect.TreeRangeSet:subRangeSet(com.google.common.collect.Range)": "/**\n* Returns a subrange set based on the given view.\n* @param view the range to compare with\n* @return this or a new SubRangeSet if view is not all values\n*/",
        "com.google.common.collect.TreeRangeSet:span()": "/**\n* Returns a Range spanning from the first to the last entry in the collection.\n* @return Range object defined by the lower and upper bounds of the first and last entries\n*/",
        "com.google.common.collect.TreeRangeSet:add(com.google.common.collect.Range)": "/**\n* Adds a range to the collection, coalescing overlapping ranges.\n* @param rangeToAdd the Range object to be added\n*/",
        "com.google.common.collect.TreeRangeSet:remove(com.google.common.collect.Range)": "/**\n* Removes specified range from the collection, adjusting overlapping ranges.\n* @param rangeToRemove the Range object to be removed\n*/",
        "com.google.common.collect.TreeRangeSet:intersects(com.google.common.collect.Range)": "/**\n* Checks if this range intersects with another range.\n* @param range the range to check for intersection\n* @return true if ranges intersect, false otherwise\n*/"
    },
    "com.google.common.collect.TreeTraverser": {
        "com.google.common.collect.TreeTraverser:<init>()": "/**\n* Constructs a TreeTraverser instance.\n*/",
        "com.google.common.collect.TreeTraverser:preOrderIterator(java.lang.Object)": "/**\n* Creates a pre-order iterator for the given tree root.\n* @param root the starting node of the tree\n* @return an unmodifiable iterator for tree traversal\n*/",
        "com.google.common.collect.TreeTraverser:postOrderIterator(java.lang.Object)": "/**\n* Creates a post-order iterator for a tree starting from the given root node.\n* @param root the root node of the tree\n* @return an iterator for traversing nodes in post-order\n*/",
        "com.google.common.collect.TreeTraverser:using(com.google.common.base.Function)": "/**\n* Creates a TreeTraverser using a function to get children of a node.\n* @param nodeToChildrenFunction function to retrieve children nodes\n* @return TreeTraverser instance for traversing nodes\n*/",
        "com.google.common.collect.TreeTraverser:preOrderTraversal(java.lang.Object)": "/**\n* Performs a pre-order traversal of a tree starting from the root.\n* @param root the root node of the tree\n* @return a FluentIterable of nodes in pre-order\n*/",
        "com.google.common.collect.TreeTraverser:postOrderTraversal(java.lang.Object)": "/**\n* Performs post-order traversal on a tree structure from the given root.\n* @param root the starting node for traversal\n* @return a FluentIterable of nodes in post-order\n*/",
        "com.google.common.collect.TreeTraverser:breadthFirstTraversal(java.lang.Object)": "/**\n* Performs a breadth-first traversal starting from the root node.\n* @param root the starting node for traversal\n* @return a FluentIterable of nodes in breadth-first order\n*/"
    },
    "com.google.common.collect.TreeTraverser$1": {
        "com.google.common.collect.TreeTraverser$1:children(java.lang.Object)": "/**\n* Retrieves child elements of the specified root element.\n* @param root the parent element to fetch children from\n* @return an iterable collection of child elements\n*/"
    },
    "com.google.common.collect.TreeTraverser$BreadthFirstIterator": {
        "com.google.common.collect.TreeTraverser$BreadthFirstIterator:hasNext()": "/**\n* Checks if there are more elements in the queue.\n* @return true if the queue is not empty, false otherwise\n*/",
        "com.google.common.collect.TreeTraverser$BreadthFirstIterator:peek()": "/**\n* Retrieves the head of the queue without removing it.\n* @return the head element of the queue\n*/",
        "com.google.common.collect.TreeTraverser$BreadthFirstIterator:next()": "/**\n* Retrieves the next element from the queue and adds its children to the queue.\n* @return the next element of type T from the queue\n*/"
    },
    "com.google.common.collect.TreeTraverser$PreOrderIterator": {
        "com.google.common.collect.TreeTraverser$PreOrderIterator:hasNext()": "/**\n* Checks if there are more elements in the stack.\n* @return true if stack is not empty, false otherwise\n*/",
        "com.google.common.collect.TreeTraverser$PreOrderIterator:next()": "/**\n* Retrieves the next element from the stack, advancing iterators as needed.\n* @return the next element of type T\n*/"
    },
    "com.google.common.collect.UnmodifiableListIterator": {
        "com.google.common.collect.UnmodifiableListIterator:add(java.lang.Object)": "/**\n* Always throws UnsupportedOperationException when called.\n* @param e element to add (ignored)\n*/",
        "com.google.common.collect.UnmodifiableListIterator:set(java.lang.Object)": "/**\n* Deprecated method that always throws UnsupportedOperationException.\n* @param e element to set (ignored)\n*/",
        "com.google.common.collect.UnmodifiableListIterator:<init>()": "/**\n* Constructs an instance of UnmodifiableListIterator.\n*/"
    },
    "com.google.common.collect.UnmodifiableSortedMultiset": {
        "com.google.common.collect.UnmodifiableSortedMultiset:pollFirstEntry()": "/**\n* Retrieves and removes the first entry, unsupported in this implementation.\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.UnmodifiableSortedMultiset:pollLastEntry()": "/**\n* Unsupported operation to poll the last entry.\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.collect.UnmodifiableSortedMultiset:delegate()": "/**\n* Returns the sorted multiset delegate instance.\n* @return SortedMultiset of type E from the superclass delegate\n*/",
        "com.google.common.collect.UnmodifiableSortedMultiset:elementSet()": "/**\n* Returns the element set as a NavigableSet.\n* @return NavigableSet of elements from the superclass\n*/",
        "com.google.common.collect.UnmodifiableSortedMultiset:comparator()": "/**\n* Returns the comparator used by the sorted multiset delegate.\n* @return Comparator for elements of type E\n*/",
        "com.google.common.collect.UnmodifiableSortedMultiset:firstEntry()": "/**\n* Retrieves the first entry from the sorted multiset.\n* @return first Entry of type E or null if empty\n*/",
        "com.google.common.collect.UnmodifiableSortedMultiset:lastEntry()": "/**\n* Retrieves the last entry from the sorted multiset.\n* @return Entry of type E or null if the multiset is empty\n*/",
        "com.google.common.collect.UnmodifiableSortedMultiset:<init>(com.google.common.collect.SortedMultiset)": "/**\n* Creates an unmodifiable sorted multiset from the given delegate.\n* @param delegate a sorted multiset to wrap as unmodifiable\n*/",
        "com.google.common.collect.UnmodifiableSortedMultiset:descendingMultiset()": "/**\n* Returns an unmodifiable view of the descending sorted multiset.\n* @return SortedMultiset of type E in descending order\n*/",
        "com.google.common.collect.UnmodifiableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Returns an unmodifiable view of the head multiset up to the upperBound.\n* @param upperBound the upper limit for the multiset\n* @param boundType the type of bound (inclusive/exclusive)\n* @return an unmodifiable SortedMultiset\n*/",
        "com.google.common.collect.UnmodifiableSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Returns an unmodifiable view of the sub-multiset within specified bounds.\n* @param lowerBound lower bound element\n* @param lowerBoundType type of lower bound\n* @param upperBound upper bound element\n* @param upperBoundType type of upper bound\n* @return unmodifiable sorted multiset within bounds\n*/",
        "com.google.common.collect.UnmodifiableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)": "/**\n* Returns an unmodifiable view of the tail multiset from the lower bound.\n* @param lowerBound the lower bound element\n* @param boundType type of bound for the lower bound\n* @return unmodifiable SortedMultiset from the specified lower bound\n*/",
        "com.google.common.collect.UnmodifiableSortedMultiset:createElementSet()": "/**\n* Creates an unmodifiable NavigableSet of elements.\n* @return unmodifiable NavigableSet of elements from the delegate\n*/"
    },
    "com.google.common.collect.UsingToStringOrdering": {
        "com.google.common.collect.UsingToStringOrdering:compare(java.lang.Object,java.lang.Object)": "/**\n* Compares two objects by their string representations.\n* @param left first object to compare\n* @param right second object to compare\n* @return negative if left < right, positive if left > right, zero if equal\n*/",
        "com.google.common.collect.UsingToStringOrdering:<init>()": "/**\n* Constructs an instance of UsingToStringOrdering.\n*/"
    },
    "com.google.common.escape.ArrayBasedEscaperMap": {
        "com.google.common.escape.ArrayBasedEscaperMap:getReplacementArray()": "/**\n* Retrieves the replacement array.\n* @return 2D char array representing replacements\n*/",
        "com.google.common.escape.ArrayBasedEscaperMap:<init>(char[][])": "/**\n* Constructs an ArrayBasedEscaperMap with a replacement character array.\n* @param replacementArray 2D char array for character replacements\n*/",
        "com.google.common.escape.ArrayBasedEscaperMap:createReplacementArray(java.util.Map)": "/**\n* Creates a 2D char array from a character-to-string map.\n* @param map character to string mappings\n* @return 2D char array representing replacements\n*/",
        "com.google.common.escape.ArrayBasedEscaperMap:create(java.util.Map)": "/**\n* Creates an ArrayBasedEscaperMap from character-to-string replacements.\n* @param replacements mappings of characters to their string replacements\n* @return ArrayBasedEscaperMap instance\n*/"
    },
    "com.google.common.escape.ArrayBasedCharEscaper": {
        "com.google.common.escape.ArrayBasedCharEscaper:escape(char)": "/**\n* Escapes a character into a char array or returns null if safe.\n* @param c character to escape\n* @return escaped char array or null if safe\n*/",
        "com.google.common.escape.ArrayBasedCharEscaper:escape(java.lang.String)": "/**\n* Escapes special characters in the input string.\n* @param s input string to escape\n* @return escaped string or original if no changes needed\n*/",
        "com.google.common.escape.ArrayBasedCharEscaper:<init>(com.google.common.escape.ArrayBasedEscaperMap,char,char)": "/**\n* Initializes ArrayBasedCharEscaper with map and safe character range.\n* @param escaperMap mapping of characters for escaping\n* @param safeMin minimum safe character\n* @param safeMax maximum safe character\n*/",
        "com.google.common.escape.ArrayBasedCharEscaper:<init>(java.util.Map,char,char)": "/**\n* Constructs ArrayBasedCharEscaper with replacements and safe character range.\n* @param replacementMap character-to-string mappings\n* @param safeMin minimum safe character\n* @param safeMax maximum safe character\n*/"
    },
    "com.google.common.escape.ArrayBasedUnicodeEscaper": {
        "com.google.common.escape.ArrayBasedUnicodeEscaper:escape(int)": "/**\n* Escapes a code point to its corresponding character array.\n* @param cp the code point to escape\n* @return escaped character array or null for safe code points\n*/",
        "com.google.common.escape.ArrayBasedUnicodeEscaper:nextEscapeIndex(java.lang.CharSequence,int,int)": "/**\n* Finds the next index to escape in the given character sequence.\n* @param csq character sequence to inspect\n* @param index starting index for search\n* @param end ending index for search\n* @return next index needing escape\n*/",
        "com.google.common.escape.ArrayBasedUnicodeEscaper:escape(java.lang.String)": "/**\n* Escapes special characters in the input string.\n* @param s input string to escape\n* @return escaped string or original if no changes needed\n*/",
        "com.google.common.escape.ArrayBasedUnicodeEscaper:<init>(com.google.common.escape.ArrayBasedEscaperMap,int,int,java.lang.String)": "/**\n* Constructs a UnicodeEscaper with specified safe character ranges and replacements.\n* @param escaperMap mapping of characters to replacements\n* @param safeMin minimum safe character code\n* @param safeMax maximum safe character code\n* @param unsafeReplacement optional replacement for unsafe characters\n*/",
        "com.google.common.escape.ArrayBasedUnicodeEscaper:<init>(java.util.Map,int,int,java.lang.String)": "/**\n* Constructs a UnicodeEscaper with character replacements and safe ranges.\n* @param replacementMap mappings of characters to their replacements\n* @param safeMin minimum safe character code\n* @param safeMax maximum safe character code\n* @param unsafeReplacement optional replacement for unsafe characters\n*/"
    },
    "com.google.common.escape.Escaper": {
        "com.google.common.escape.Escaper:<init>()": "/**\n* Protected constructor for the Escaper class, preventing instantiation from outside. \n*/",
        "com.google.common.escape.Escaper:asFunction()": "/**\n* Returns a Function that maps String to String.\n* @return Function<String, String> instance\n*/"
    },
    "com.google.common.escape.Platform": {
        "com.google.common.escape.Platform:charBufferFromThreadLocal()": "/**\n* Retrieves a character buffer from a ThreadLocal variable.\n* @return character array from ThreadLocal, never null\n*/",
        "com.google.common.escape.Platform:<init>()": "/**\n* Private constructor to prevent instantiation of the Platform class.\n*/"
    },
    "com.google.common.escape.CharEscaper": {
        "com.google.common.escape.CharEscaper:growBuffer(char[],int,int)": "/**\n* Grows the buffer to a new size and copies existing data.\n* @param dest current character array\n* @param index number of elements to copy from dest\n* @param size new size of the buffer\n* @return new character array with copied elements\n*/",
        "com.google.common.escape.CharEscaper:<init>()": "/**\n* Protected constructor for the CharEscaper class, preventing external instantiation.\n*/",
        "com.google.common.escape.CharEscaper:escapeSlow(java.lang.String,int)": "/**\n* Escapes special characters in a string from a given index.\n* @param s input string to escape\n* @param index starting position for escaping\n* @return escaped string\n*/",
        "com.google.common.escape.CharEscaper:escape(java.lang.String)": "/**\n* Escapes special characters in a string or returns it unchanged.\n* @param string input string to escape\n* @return escaped string or original if no special chars found\n*/"
    },
    "com.google.common.escape.CharEscaperBuilder$CharArrayDecorator": {
        "com.google.common.escape.CharEscaperBuilder$CharArrayDecorator:escape(java.lang.String)": "/**\n* Escapes special characters in the input string.\n* @param s the input string to be escaped\n* @return the escaped string or original if no characters need escaping\n*/",
        "com.google.common.escape.CharEscaperBuilder$CharArrayDecorator:escape(char)": "/**\n* Escapes a character using predefined replacements.\n* @param c character to escape\n* @return array of escaped characters or null if no replacement exists\n*/",
        "com.google.common.escape.CharEscaperBuilder$CharArrayDecorator:<init>(char[][])": "/**\n* Initializes CharArrayDecorator with replacement character arrays.\n* @param replacements array of character arrays for replacements\n*/"
    },
    "com.google.common.escape.CharEscaperBuilder": {
        "com.google.common.escape.CharEscaperBuilder:<init>()": "/**\n* Initializes a new CharEscaperBuilder with an empty character mapping.\n*/",
        "com.google.common.escape.CharEscaperBuilder:toArray()": "/**\n* Converts a map of characters to an array of char arrays.\n* @return 2D char array representing values or null for empty map\n*/",
        "com.google.common.escape.CharEscaperBuilder:addEscape(char,java.lang.String)": "/**\n* Adds an escape mapping for a character.\n* @param c character to escape\n* @param r replacement string for the character\n* @return this CharEscaperBuilder instance\n*/",
        "com.google.common.escape.CharEscaperBuilder:addEscapes(char[],java.lang.String)": "/**\n* Adds escape mappings for multiple characters.\n* @param cs array of characters to escape\n* @param r replacement string for each character\n* @return this CharEscaperBuilder instance\n*/",
        "com.google.common.escape.CharEscaperBuilder:toEscaper()": "/**\n* Converts the current object to an Escaper using character arrays.\n* @return Escaper instance created from character arrays\n*/"
    },
    "com.google.common.escape.Escapers$Builder": {
        "com.google.common.escape.Escapers$Builder:<init>()": "/**\n* Private constructor for Builder class to prevent instantiation.\n*/",
        "com.google.common.escape.Escapers$Builder:build()": "/**\n* Builds an Escaper with specified replacement characters.\n* @return Escaper instance for character escaping\n*/",
        "com.google.common.escape.Escapers$Builder:setSafeRange(char,char)": "/**\n* Sets the safe range with minimum and maximum characters.\n* @param safeMin minimum character of the safe range\n* @param safeMax maximum character of the safe range\n* @return the Builder instance for method chaining\n*/",
        "com.google.common.escape.Escapers$Builder:setUnsafeReplacement(java.lang.String)": "/**\n* Sets the unsafeReplacement value and returns the Builder instance.\n* @param unsafeReplacement the value to set, can be null\n* @return the Builder instance for method chaining\n*/",
        "com.google.common.escape.Escapers$Builder:addEscape(char,java.lang.String)": "/**\n* Adds a character escape mapping.\n* @param c character to escape\n* @param replacement string to replace the character\n* @return Builder for method chaining\n*/"
    },
    "com.google.common.escape.Escapers": {
        "com.google.common.escape.Escapers:<init>()": "/**\n* Private constructor to prevent instantiation of the Escapers class.\n*/",
        "com.google.common.escape.Escapers:builder()": "/**\n* Creates a new instance of Builder for object construction.\n* @return a Builder instance\n*/",
        "com.google.common.escape.Escapers:stringOrNull(char[])": "/**\n* Converts a char array to a String or returns null if the array is null.\n* @param in char array input, may be null\n* @return String representation or null if input is null\n*/",
        "com.google.common.escape.Escapers:computeReplacement(com.google.common.escape.CharEscaper,char)": "/**\n* Computes a replacement string for a character using the provided escaper.\n* @param escaper the CharEscaper to use for escaping characters\n* @param c the character to be escaped\n* @return escaped String or null if input is null\n*/",
        "com.google.common.escape.Escapers:computeReplacement(com.google.common.escape.UnicodeEscaper,int)": "/**\n* Computes a string replacement for a code point using an escaper.\n* @param escaper the UnicodeEscaper for escaping characters\n* @param cp the code point to escape\n* @return escaped string or null if input is null\n*/"
    },
    "com.google.common.escape.Platform$1": {
        "com.google.common.escape.Platform$1:<init>()": "/**\n* Private constructor to prevent instantiation of the Platform class.\n*/"
    },
    "com.google.common.escape.UnicodeEscaper": {
        "com.google.common.escape.UnicodeEscaper:growBuffer(char[],int,int)": "/**\n* Grows a character buffer to a new size.\n* @param dest current character array\n* @param index number of valid characters in dest\n* @param size new size for the buffer\n* @return a new character array with the specified size\n*/",
        "com.google.common.escape.UnicodeEscaper:codePointAt(java.lang.CharSequence,int,int)": "/**\n* Returns the Unicode code point at the specified index in the CharSequence.\n* @param seq the character sequence to inspect\n* @param index the index of the character\n* @param end the end index of the sequence\n* @return the Unicode code point\n*/",
        "com.google.common.escape.UnicodeEscaper:<init>()": "/**\n* Protected constructor for UnicodeEscaper class to prevent external instantiation.\n*/",
        "com.google.common.escape.UnicodeEscaper:nextEscapeIndex(java.lang.CharSequence,int,int)": "/**\n* Finds the next escape index in a CharSequence.\n* @param csq the character sequence to inspect\n* @param start the starting index for the search\n* @param end the ending index for the search\n* @return the index of the next escape character\n*/",
        "com.google.common.escape.UnicodeEscaper:escapeSlow(java.lang.String,int)": "/**\n* Escapes special characters in a string starting from a given index.\n* @param s input string to escape characters from\n* @param index starting position for escaping\n* @return escaped string with special characters replaced\n*/",
        "com.google.common.escape.UnicodeEscaper:escape(java.lang.String)": "/**\n* Escapes special characters in a string.\n* @param string input string to escape\n* @return escaped string or original if no characters to escape\n*/"
    },
    "com.google.common.eventbus.Dispatcher": {
        "com.google.common.eventbus.Dispatcher:legacyAsync()": "/**\n* Creates and returns a new instance of LegacyAsyncDispatcher.\n* @return Dispatcher instance for asynchronous operations\n*/",
        "com.google.common.eventbus.Dispatcher:perThreadDispatchQueue()": "/**\n* Creates a new instance of PerThreadQueuedDispatcher.\n* @return a Dispatcher for per-thread queue management\n*/",
        "com.google.common.eventbus.Dispatcher:immediate()": "/**\n* Returns the singleton instance of ImmediateDispatcher.\n* @return ImmediateDispatcher instance\n*/"
    },
    "com.google.common.eventbus.Subscriber": {
        "com.google.common.eventbus.Subscriber:dispatchEvent(java.lang.Object)": "/**\n* Dispatches an event for processing in a separate thread.\n* @param event the event object to be dispatched\n*/",
        "com.google.common.eventbus.Subscriber:isDeclaredThreadSafe(java.lang.reflect.Method)": "/**\n* Checks if a method is declared thread-safe using AllowConcurrentEvents annotation.\n* @param method the Method to check for thread safety\n* @return true if thread-safe, false otherwise\n*/",
        "com.google.common.eventbus.Subscriber:hashCode()": "/**\n* Computes hash code based on method and target object.\n* @return unique hash code for the instance\n*/",
        "com.google.common.eventbus.Subscriber:equals(java.lang.Object)": "/**\n* Compares this Subscriber to another object for equality.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.eventbus.Subscriber:invokeSubscriberMethod(java.lang.Object)": "/**\n* Invokes a method on the target with the provided event object.\n* @param event the event to pass to the method\n* @throws InvocationTargetException if the invoked method throws an exception\n*/",
        "com.google.common.eventbus.Subscriber:<init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method)": "/**\n* Constructs a Subscriber with an EventBus, target object, and method.\n* @param bus the EventBus instance\n* @param target the target object for event handling\n* @param method the method to invoke on the target\n*/",
        "com.google.common.eventbus.Subscriber:context(java.lang.Object)": "/**** Creates a SubscriberExceptionContext for the given event. \n* @param event the event being processed \n* @return SubscriberExceptionContext instance \n*/",
        "com.google.common.eventbus.Subscriber:create(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method)": "/**\n* Creates a Subscriber or SynchronizedSubscriber based on method thread safety.\n* @param bus the EventBus instance\n* @param listener the target object for event handling\n* @param method the method to invoke on the target\n* @return Subscriber instance for event handling\n*/"
    },
    "com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher$EventWithSubscriber": {
        "com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher$EventWithSubscriber:<init>(java.lang.Object,com.google.common.eventbus.Subscriber)": "/**\n* Constructs an EventWithSubscriber with specified event and subscriber.\n* @param event the event object\n* @param subscriber the subscriber associated with the event\n*/"
    },
    "com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$Event": {
        "com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$Event:<init>(java.lang.Object,java.util.Iterator)": "/**\n* Initializes an Event with the given object and its subscribers.\n* @param event the event object\n* @param subscribers iterator of subscribers for the event\n*/"
    },
    "com.google.common.eventbus.SubscriberExceptionContext": {
        "com.google.common.eventbus.SubscriberExceptionContext:getEventBus()": "/**\n* Retrieves the current EventBus instance.\n* @return EventBus object associated with this instance\n*/",
        "com.google.common.eventbus.SubscriberExceptionContext:getSubscriberMethod()": "/**\n* Retrieves the subscriber method.\n* @return Method object representing the subscriber method\n*/",
        "com.google.common.eventbus.SubscriberExceptionContext:getSubscriber()": "/**\n* Retrieves the subscriber object.\n* @return the subscriber object\n*/",
        "com.google.common.eventbus.SubscriberExceptionContext:getEvent()": "/**\n* Retrieves the current event object.\n* @return the event object\n*/",
        "com.google.common.eventbus.SubscriberExceptionContext:<init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.Object,java.lang.reflect.Method)": "/**\n* Constructs a SubscriberExceptionContext with provided event details.\n* @param eventBus the EventBus instance\n* @param event the event being processed\n* @param subscriber the subscriber handling the event\n* @param subscriberMethod the method invoked on the subscriber\n*/"
    },
    "com.google.common.eventbus.EventBus": {
        "com.google.common.eventbus.EventBus:identifier()": "/**\n* Returns the identifier string.\n* @return the identifier value\n*/",
        "com.google.common.eventbus.EventBus:executor()": "/**\n* Returns the current Executor instance.\n* @return Executor object for task execution\n*/",
        "com.google.common.eventbus.EventBus:handleSubscriberException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext)": "/**\n* Handles subscriber exceptions and logs errors from the handler.\n* @param e exception to handle\n* @param context context of the subscriber exception\n*/",
        "com.google.common.eventbus.EventBus:<init>(java.lang.String,java.util.concurrent.Executor,com.google.common.eventbus.Dispatcher,com.google.common.eventbus.SubscriberExceptionHandler)": "/**\n* Constructs an EventBus with specified parameters.\n* @param identifier unique identifier for the EventBus\n* @param executor task executor for event handling\n* @param dispatcher event dispatcher for message delivery\n* @param exceptionHandler handles exceptions during event processing\n*/",
        "com.google.common.eventbus.EventBus:toString()": "/**\n* Returns a string representation of the object including its identifier.\n* @return formatted string of the object\n*/",
        "com.google.common.eventbus.EventBus:<init>(java.lang.String)": "/**\n* Initializes EventBus with a unique identifier and default handlers.\n* @param identifier unique identifier for the EventBus\n*/",
        "com.google.common.eventbus.EventBus:<init>(com.google.common.eventbus.SubscriberExceptionHandler)": "/**\n* Constructs an EventBus with a default identifier and specified exception handler.\n* @param exceptionHandler handles exceptions during event processing\n*/",
        "com.google.common.eventbus.EventBus:<init>()": "/**** \n* Initializes EventBus with a default identifier. \n* @param identifier unique identifier for the EventBus \n*/",
        "com.google.common.eventbus.EventBus:post(java.lang.Object)": "/**\n* Posts an event to subscribers; creates DeadEvent if no subscribers exist.\n* @param event the event object to post\n*/",
        "com.google.common.eventbus.EventBus:register(java.lang.Object)": "/**\n* Registers an event listener object for event handling.\n* @param object listener containing event handling methods\n*/",
        "com.google.common.eventbus.EventBus:unregister(java.lang.Object)": "/**\n* Unregisters a listener by removing its subscribers for various event types.\n* @param object the listener object to be unregistered\n*/"
    },
    "com.google.common.eventbus.Subscriber$SynchronizedSubscriber": {
        "com.google.common.eventbus.Subscriber$SynchronizedSubscriber:<init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method)": "/**\n* Initializes a synchronized subscriber with an event bus, target, and method.\n* @param bus the EventBus instance for event delivery\n* @param target the object that will handle the events\n* @param method the method to invoke on the target\n*/",
        "com.google.common.eventbus.Subscriber$SynchronizedSubscriber:invokeSubscriberMethod(java.lang.Object)": "/**\n* Synchronously invokes a method on the subscriber with the given event.\n* @param event the event to pass to the method\n* @throws InvocationTargetException if the invoked method throws an exception\n*/"
    },
    "com.google.common.reflect.TypeToken": {
        "com.google.common.reflect.TypeToken:getTypes()": "/**\n* Creates and returns a new instance of TypeSet.\n* @return a new TypeSet object\n*/",
        "com.google.common.reflect.TypeToken:rejectTypeVariables()": "/**\n* Rejects type variables in the runtime type for safety checks.\n* @return this TypeToken instance\n*/",
        "com.google.common.reflect.TypeToken:equals(java.lang.Object)": "/**\n* Compares this TypeToken with another object for equality.\n* @param o object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.reflect.TypeToken:getType()": "/**\n* Retrieves the runtime type.\n* @return Type representing the current runtime type\n*/",
        "com.google.common.reflect.TypeToken:isPrimitive()": "/**\n* Checks if the runtime type is a primitive class.\n* @return true if primitive, false otherwise\n*/",
        "com.google.common.reflect.TypeToken:hashCode()": "/**\n* Computes hash code based on runtime type.\n* @return hash code integer for the runtimeType\n*/",
        "com.google.common.reflect.TypeToken:canonicalizeWildcardsInParameterizedType(java.lang.reflect.ParameterizedType)": "/**\n* Canonicalizes wildcards in a ParameterizedType.\n* @param type the ParameterizedType to canonicalize\n* @return a new ParameterizedType with wildcards resolved\n*/",
        "com.google.common.reflect.TypeToken:getOwnerTypeIfPresent()": "/**\n* Retrieves the owner type of the runtime type if available.\n* @return Type of the owner or null if not present\n*/",
        "com.google.common.reflect.TypeToken:newArrayClassOrGenericArrayType(java.lang.reflect.Type)": "/**\n* Creates a new array type for the given component type.\n* @param componentType the type of the array's elements\n* @return a new array Type instance\n*/",
        "com.google.common.reflect.TypeToken:<init>(java.lang.reflect.Type)": "/**\n* Constructs a TypeToken with a non-null type.\n* @param type the runtime type, must not be null\n*/",
        "com.google.common.reflect.TypeToken:<init>()": "/**\n* Constructs TypeToken and validates runtimeType is not a TypeVariable.\n*/",
        "com.google.common.reflect.TypeToken:isWrapper()": "/**\n* Checks if the runtime type is a wrapper class.\n* @return true if it's a wrapper type, false otherwise\n*/",
        "com.google.common.reflect.TypeToken:every(java.lang.reflect.Type[])": "/**\n* Checks if all bounds match and returns a Bounds object.\n* @param bounds array of Type objects to validate\n* @return Bounds initialized with the provided types\n*/",
        "com.google.common.reflect.TypeToken:any(java.lang.reflect.Type[])": "/**\n* Creates Bounds object with any match from given type array.\n* @param bounds array of Type objects\n* @return Bounds initialized with the type array and true flag\n*/",
        "com.google.common.reflect.TypeToken:of(java.lang.Class)": "/**\n* Creates a TypeToken for the specified class type.\n* @param type the class type to create a TypeToken for\n* @return a TypeToken instance representing the class type\n*/",
        "com.google.common.reflect.TypeToken:of(java.lang.reflect.Type)": "/**\n* Creates a TypeToken for the specified type.\n* @param type the Type to associate with the TypeToken\n* @return a TypeToken instance representing the type\n*/",
        "com.google.common.reflect.TypeToken:toString()": "/**\n* Returns string representation of the object's runtime type.\n* @return string representation of the runtime type\n*/",
        "com.google.common.reflect.TypeToken:wrap()": "/**\n* Wraps primitive type into its corresponding wrapper TypeToken.\n* @return TypeToken of the wrapped type or itself if not primitive\n*/",
        "com.google.common.reflect.TypeToken:unwrap()": "/**\n* Returns a TypeToken unwrapped from a wrapper class if applicable.\n* @return unwrapped TypeToken or itself if not a wrapper\n*/",
        "com.google.common.reflect.TypeToken:getComponentType()": "/**\n* Retrieves the TypeToken of the component type from the runtime type.\n* @return TypeToken of the component type or null if not applicable\n*/",
        "com.google.common.reflect.TypeToken:isSubtypeOfArrayType(java.lang.reflect.GenericArrayType)": "/**\n* Checks if runtimeType is a subtype of the given GenericArrayType.\n* @param supertype the GenericArrayType to check against\n* @return true if subtype, false otherwise\n*/",
        "com.google.common.reflect.TypeToken:isSupertypeOfArray(java.lang.reflect.GenericArrayType)": "/**\n* Checks if the given subtype is a supertype of the runtime type array.\n* @param subtype the GenericArrayType to check against\n* @return true if subtype is a supertype, false otherwise\n*/",
        "com.google.common.reflect.TypeToken:getSubtypeFromLowerBounds(java.lang.Class,java.lang.reflect.Type[])": "/**\n* Retrieves subtype from lower bounds for a given subclass.\n* @param subclass the subclass to check against lower bounds\n* @param lowerBounds array of lower bound types\n* @return TypeToken of the subtype\n*/",
        "com.google.common.reflect.TypeToken:isArray()": "/**\n* Checks if the current type is an array.\n* @return true if it's an array, false otherwise\n*/",
        "com.google.common.reflect.TypeToken:getArraySupertype(java.lang.Class)": "/**\n* Retrieves the supertype of an array type given its component supertype.\n* @param supertype the supertype of the array's component type\n* @return TypeToken representing the array's supertype\n*/",
        "com.google.common.reflect.TypeToken:getRawTypes()": "/**\n* Collects raw types of the runtime type T.\n* @return ImmutableSet of Class objects representing raw types of T\n*/",
        "com.google.common.reflect.TypeToken:getRawType()": "/**\n* Returns the raw type of T, determined from its first bound.\n* @return Class representing the raw type of T\n*/",
        "com.google.common.reflect.TypeToken:someRawTypeIsSubclassOf(java.lang.Class)": "/**\n* Checks if any raw type is a subclass of the given superclass.\n* @param superclass the class to check against\n* @return true if a subclass exists, false otherwise\n*/",
        "com.google.common.reflect.TypeToken:canonicalizeWildcardType(java.lang.reflect.TypeVariable,java.lang.reflect.WildcardType)": "/**\n* Canonicalizes a wildcard type based on its declaration.\n* @param declaration the type variable declaration\n* @param type the wildcard type to canonicalize\n* @return a canonicalized WildcardType instance\n*/",
        "com.google.common.reflect.TypeToken:boundAsSuperclass(java.lang.reflect.Type)": "/**\n* Returns TypeToken for the superclass of T or null if bound is an interface.\n* @param bound the Type to check for superclass\n* @return TypeToken of superclass or null\n*/",
        "com.google.common.reflect.TypeToken:boundsAsInterfaces(java.lang.reflect.Type[])": "/**\n* Converts bounds to TypeTokens, returning interfaces as an ImmutableList.\n* @param bounds array of Type bounds\n* @return ImmutableList of TypeToken interfaces\n*/",
        "com.google.common.reflect.TypeToken:constructor(java.lang.reflect.Constructor)": "/**\n* Validates constructor's declaring class and returns an Invokable instance.\n* @param constructor the constructor to validate\n* @return Invokable instance for the constructor\n*/",
        "com.google.common.reflect.TypeToken:isSubtypeOf(java.lang.reflect.Type)": "/**\n* Checks if the current type is a subtype of the given supertype.\n* @param supertype the type to check against\n* @return true if current type is a subtype, false otherwise\n*/",
        "com.google.common.reflect.TypeToken:method(java.lang.reflect.Method)": "/**\n* Validates method's declaring class and returns an Invokable representation.\n* @param method the Method to validate and wrap\n* @return Invokable object for the method\n*/",
        "com.google.common.reflect.TypeToken:isSupertypeOf(com.google.common.reflect.TypeToken)": "/**\n* Checks if the current type is a supertype of the given type.\n* @param type TypeToken to check against\n* @return true if current type is a supertype, false otherwise\n*/",
        "com.google.common.reflect.TypeToken:isSupertypeOf(java.lang.reflect.Type)": "/**\n* Checks if the current type is a supertype of the given type.\n* @param type the Type to check against\n* @return true if current type is a supertype, false otherwise\n*/",
        "com.google.common.reflect.TypeToken:isSubtypeOf(com.google.common.reflect.TypeToken)": "/**\n* Checks if the current type is a subtype of the given TypeToken.\n* @param type TypeToken to check against\n* @return true if a subtype, false otherwise\n*/",
        "com.google.common.reflect.TypeToken:isOwnedBySubtypeOf(java.lang.reflect.Type)": "/**\n* Checks if any type is owned by a subtype of the given supertype.\n* @param supertype the type to check against\n* @return true if owned by a subtype, false otherwise\n*/",
        "com.google.common.reflect.TypeToken:canonicalizeWildcardsInType(java.lang.reflect.Type)": "/**\n* Canonicalizes wildcards in a given type.\n* @param type the Type to canonicalize\n* @return the canonicalized Type\n*/",
        "com.google.common.reflect.TypeToken:toGenericType(java.lang.Class)": "/**\n* Converts a class to a TypeToken, handling arrays and generics.\n* @param cls the class to convert\n* @return TypeToken representing the class type\n*/",
        "com.google.common.reflect.TypeToken:is(java.lang.reflect.Type,java.lang.reflect.TypeVariable)": "/**\n* Checks if the runtime type matches the formal type or its wildcards.\n* @param formalType the type to compare against\n* @param declaration the type variable declaration\n* @return true if they match, false otherwise\n*/",
        "com.google.common.reflect.TypeToken:canonicalizeTypeArg(java.lang.reflect.TypeVariable,java.lang.reflect.Type)": "/**\n* Canonicalizes a type argument or wildcard type.\n* @param declaration the type variable declaration\n* @param typeArg the type argument to canonicalize\n* @return the canonicalized Type\n*/",
        "com.google.common.reflect.TypeToken:where(com.google.common.reflect.TypeParameter,com.google.common.reflect.TypeToken)": "/**\n* Resolves type variables with provided arguments.\n* @param typeParam the type parameter to resolve\n* @param typeArg the type argument for the parameter\n* @return a TypeToken representing the resolved type\n*/",
        "com.google.common.reflect.TypeToken:writeReplace()": "/**\n* Transforms the type to a Serializable implementation.\n* @return transformed Object for serialization\n*/",
        "com.google.common.reflect.TypeToken:<init>(java.lang.Class)": "/**\n* Constructs a TypeToken from the given class, resolving its runtime type.\n* @param declaringClass the class to derive the TypeToken from\n*/",
        "com.google.common.reflect.TypeToken:getCovariantTypeResolver()": "/**\n* Retrieves the covariant TypeResolver, creating it if not already set.\n* @return TypeResolver instance for runtimeType\n*/",
        "com.google.common.reflect.TypeToken:getInvariantTypeResolver()": "/**\n* Retrieves or creates a TypeResolver for the invariant type.\n* @return TypeResolver instance for the invariant type\n*/",
        "com.google.common.reflect.TypeToken:where(com.google.common.reflect.TypeParameter,java.lang.Class)": "/**\n* Resolves a type parameter with a class type argument.\n* @param typeParam the type parameter to resolve\n* @param typeArg the class type argument\n* @return a TypeToken representing the resolved type\n*/",
        "com.google.common.reflect.TypeToken:resolveSupertype(java.lang.reflect.Type)": "/**\n* Resolves the supertype for a given Type.\n* @param type the Type to resolve the supertype for\n* @return TypeToken representing the resolved supertype\n*/",
        "com.google.common.reflect.TypeToken:isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType)": "/**\n* Checks if a class is a subtype of a given parameterized type.\n* @param supertype the parameterized type to check against\n* @return true if it is a subtype, false otherwise\n*/",
        "com.google.common.reflect.TypeToken:resolveType(java.lang.reflect.Type)": "/**\n* Resolves a Type to a TypeToken.\n* @param type the Type to resolve\n* @return TypeToken representing the resolved type\n*/",
        "com.google.common.reflect.TypeToken:getGenericSuperclass()": "/**\n* Retrieves the generic superclass of the current type.\n* @return TypeToken of the generic superclass or null if none exists\n*/",
        "com.google.common.reflect.TypeToken:getGenericInterfaces()": "/**\n* Retrieves generic interfaces for the type T.\n* @return ImmutableList of TypeToken super interfaces\n*/",
        "com.google.common.reflect.TypeToken:getSupertype(java.lang.Class)": "/**\n* Retrieves the supertype of a given class.\n* @param superclass the class to check as a supertype\n* @return TypeToken representing the resolved supertype\n*/",
        "com.google.common.reflect.TypeToken:getSupertypeFromUpperBounds(java.lang.Class,java.lang.reflect.Type[])": "/**\n* Retrieves the supertype of T from its upper bounds.\n* @param supertype the class to check as a supertype\n* @param upperBounds array of upper bounds for type T\n* @return TypeToken representing the resolved supertype\n*/",
        "com.google.common.reflect.TypeToken:resolveTypeArgsForSubclass(java.lang.Class)": "/**\n* Resolves type arguments for a subclass based on its relationship to the runtime type.\n* @param subclass the subclass to resolve type arguments for\n* @return Type representing resolved type arguments\n*/",
        "com.google.common.reflect.TypeToken:getSubtype(java.lang.Class)": "/**\n* Retrieves a subtype of the current type for the given subclass.\n* @param subclass the class to check for subtype\n* @return TypeToken representing the subtype\n*/",
        "com.google.common.reflect.TypeToken:getArraySubtype(java.lang.Class)": "/**\n* Retrieves array subtype TypeToken from given subclass type.\n* @param subclass the array subclass to analyze\n* @return TypeToken of the array subtype\n*/"
    },
    "com.google.common.eventbus.SubscriberRegistry$MethodIdentifier": {
        "com.google.common.eventbus.SubscriberRegistry$MethodIdentifier:<init>(java.lang.reflect.Method)": "/**\n* Initializes MethodIdentifier with method name and parameter types.\n* @param method Java Method object\n*/",
        "com.google.common.eventbus.SubscriberRegistry$MethodIdentifier:hashCode()": "/**\n* Computes the hash code based on name and parameter types.\n* @return hash code as an integer\n*/",
        "com.google.common.eventbus.SubscriberRegistry$MethodIdentifier:equals(java.lang.Object)": "/**\n* Compares this MethodIdentifier with another object for equality.\n* @param o object to compare with\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.graph.EndpointPairIterator": {
        "com.google.common.graph.EndpointPairIterator:of(com.google.common.graph.BaseGraph)": "/**\n* Creates an EndpointPairIterator based on graph type (directed or undirected).\n* @param graph the BaseGraph to iterate over\n* @return EndpointPairIterator for the specified graph\n*/",
        "com.google.common.graph.EndpointPairIterator:advance()": "/**\n* Advances to the next node; returns false if no more nodes exist.\n* @return true if advanced, false otherwise\n*/",
        "com.google.common.graph.EndpointPairIterator:<init>(com.google.common.graph.BaseGraph)": "/**\n* Initializes EndpointPairIterator with a BaseGraph instance.\n* @param graph the BaseGraph to iterate over nodes\n*/"
    },
    "com.google.common.graph.AbstractBaseGraph": {
        "com.google.common.graph.AbstractBaseGraph:isOrderingCompatible(com.google.common.graph.EndpointPair)": "/**\n* Checks if the ordering of endpoints matches the directionality of the graph.\n* @param endpoints pair of endpoints to check\n* @return true if compatible, false otherwise\n*/",
        "com.google.common.graph.AbstractBaseGraph:edges()": "/**\n* Returns a set of edges as EndpointPairs in the graph.\n* @return Set of EndpointPair objects representing graph edges\n*/",
        "com.google.common.graph.AbstractBaseGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)": "/**\n* Checks if an edge exists between two nodes.\n* @param nodeU first node\n* @param nodeV second node\n* @return true if edge exists, false otherwise\n*/",
        "com.google.common.graph.AbstractBaseGraph:incidentEdges(java.lang.Object)": "/**\n* Retrieves incident edges for a specified node in the graph.\n* @param node the graph node to find incident edges for\n* @return a set of EndpointPair representing the incident edges\n*/",
        "com.google.common.graph.AbstractBaseGraph:validateEndpoints(com.google.common.graph.EndpointPair)": "/**\n* Validates endpoint pair for null and correct ordering.\n* @param endpoints the pair of endpoints to validate\n*/",
        "com.google.common.graph.AbstractBaseGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)": "/**\n* Checks if an edge exists between the given endpoints.\n* @param endpoints pair of nodes to check for an edge\n* @return true if edge exists, false otherwise\n*/",
        "com.google.common.graph.AbstractBaseGraph:degree(java.lang.Object)": "/**\n* Calculates the degree of a node in a graph.\n* @param node the graph node\n* @return the degree as an integer\n*/",
        "com.google.common.graph.AbstractBaseGraph:incidentEdgeOrder()": "/**\n* Returns an unordered ElementOrder for incident edges.\n* @return ElementOrder object representing unordered type\n*/",
        "com.google.common.graph.AbstractBaseGraph:edgeCount()": "/**\n* Calculates the number of edges in the graph based on node degrees.\n* @return half the sum of node degrees\n*/",
        "com.google.common.graph.AbstractBaseGraph:inDegree(java.lang.Object)": "/**\n* Computes the in-degree of a node in a graph.\n* @param node the graph node\n* @return the in-degree as an integer\n*/",
        "com.google.common.graph.AbstractBaseGraph:outDegree(java.lang.Object)": "/**\n* Calculates the out-degree of a node in a graph.\n* @param node the graph node\n* @return out-degree as an integer\n*/"
    },
    "com.google.common.graph.EndpointPair": {
        "com.google.common.graph.EndpointPair:nodeU()": "/**\n* Returns the current nodeU value.\n* @return the nodeU of type N\n*/",
        "com.google.common.graph.EndpointPair:nodeV()": "/**\n* Retrieves the nodeV value.\n* @return the current nodeV of type N\n*/",
        "com.google.common.graph.EndpointPair:unordered(java.lang.Object,java.lang.Object)": "/**\n* Creates an unordered pair of nodes.\n* @param nodeU first node\n* @param nodeV second node\n* @return EndpointPair with nodes in swapped order\n*/",
        "com.google.common.graph.EndpointPair:ordered(java.lang.Object,java.lang.Object)": "/**\n* Creates an ordered pair of endpoints.\n* @param source the starting endpoint\n* @param target the ending endpoint\n* @return EndpointPair containing the source and target\n*/",
        "com.google.common.graph.EndpointPair:adjacentNode(java.lang.Object)": "/**\n* Returns the adjacent node for a given node in an endpoint pair.\n* @param node the node for which to find the adjacent node\n* @return the adjacent node or throws IllegalArgumentException if not found\n*/",
        "com.google.common.graph.EndpointPair:iterator()": "/**\n* Returns an unmodifiable iterator over the nodes.\n* @return UnmodifiableIterator of nodes\n*/",
        "com.google.common.graph.EndpointPair:<init>(java.lang.Object,java.lang.Object)": "/**\n* Constructs an EndpointPair with two non-null nodes.\n* @param nodeU first node, must not be null\n* @param nodeV second node, must not be null\n*/",
        "com.google.common.graph.EndpointPair:of(com.google.common.graph.Graph,java.lang.Object,java.lang.Object)": "/****\n* Creates an EndpointPair from nodes in a graph.\n* @param graph the graph context\n* @param nodeU first node\n* @param nodeV second node\n* @return EndpointPair based on graph direction\n*/",
        "com.google.common.graph.EndpointPair:of(com.google.common.graph.Network,java.lang.Object,java.lang.Object)": "/**\n* Creates an EndpointPair from nodes in a network.\n* @param network the network context\n* @param nodeU first node\n* @param nodeV second node\n* @return EndpointPair based on network direction\n*/"
    },
    "com.google.common.graph.IncidentEdgeSet": {
        "com.google.common.graph.IncidentEdgeSet:<init>(com.google.common.graph.BaseGraph,java.lang.Object)": "/**\n* Initializes an IncidentEdgeSet for a specified node in a graph.\n* @param graph the base graph containing the node\n* @param node the node for which incident edges are retrieved\n*/",
        "com.google.common.graph.IncidentEdgeSet:remove(java.lang.Object)": "/**\n* Removes the specified element, unsupported operation.\n* @param o element to remove, may be null\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.graph.IncidentEdgeSet:size()": "/**\n* Returns the number of edges connected to the node.\n* @return total edge count for the node in the graph\n*/",
        "com.google.common.graph.IncidentEdgeSet:contains(java.lang.Object)": "/**\n* Checks if the graph contains the specified EndpointPair.\n* @param obj the object to check for containment\n* @return true if the pair exists in the graph, false otherwise\n*/"
    },
    "com.google.common.graph.BaseGraph": {
        "com.google.common.graph.BaseGraph:predecessors(java.lang.Object)": "/**\n* Retrieves the set of predecessor nodes for the given node.\n* @param node the target node to find predecessors for\n* @return a set of predecessor nodes\n*/",
        "com.google.common.graph.BaseGraph:successors(java.lang.Object)": "/**\n* Retrieves the set of successor nodes for a given node.\n* @param node the node for which successors are retrieved\n* @return a Set of successor nodes\n*/"
    },
    "com.google.common.graph.AbstractDirectedNetworkConnections": {
        "com.google.common.graph.AbstractDirectedNetworkConnections:incidentEdges()": "/**\n* Returns a set of incident edges, excluding self-loops.\n* @return Set of incident edges\n*/",
        "com.google.common.graph.AbstractDirectedNetworkConnections:inEdges()": "/**\n* Returns an unmodifiable set of incoming edges.\n* @return Set of incoming edge elements\n*/",
        "com.google.common.graph.AbstractDirectedNetworkConnections:outEdges()": "/**\n* Returns an unmodifiable set of outgoing edges.\n* @return Set of outgoing edge elements\n*/",
        "com.google.common.graph.AbstractDirectedNetworkConnections:adjacentNode(java.lang.Object)": "/**\n* Retrieves the adjacent node for a given outgoing edge.\n* @param edge the outgoing edge from the source node\n* @return the adjacent node connected by the edge\n*/",
        "com.google.common.graph.AbstractDirectedNetworkConnections:removeOutEdge(java.lang.Object)": "/**\n* Removes and returns the previous node associated with the given edge.\n* @param edge the edge to remove\n* @return the previous node associated with the edge\n*/",
        "com.google.common.graph.AbstractDirectedNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)": "/**\n* Adds an outgoing edge to the node.\n* @param edge the edge to add\n* @param node the target node for the edge\n*/",
        "com.google.common.graph.AbstractDirectedNetworkConnections:adjacentNodes()": "/**\n* Returns the union of predecessor and successor nodes.\n* @return Set of adjacent nodes\n*/",
        "com.google.common.graph.AbstractDirectedNetworkConnections:<init>(java.util.Map,java.util.Map,int)": "/**\n* Initializes directed network connections with edge maps and self-loop count.\n* @param inEdgeMap incoming edges mapping\n* @param outEdgeMap outgoing edges mapping\n* @param selfLoopCount number of self-loops\n*/",
        "com.google.common.graph.AbstractDirectedNetworkConnections:removeInEdge(java.lang.Object,boolean)": "/**\n* Removes an incoming edge; updates self-loop count if applicable.\n* @param edge the edge to remove\n* @param isSelfLoop indicates if the edge is a self-loop\n* @return previous node associated with the edge\n*/",
        "com.google.common.graph.AbstractDirectedNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)": "/**\n* Adds an incoming edge for a node; checks for null and self-loop conditions.\n* @param edge the edge to add\n* @param node the target node for the edge\n* @param isSelfLoop indicates if the edge is a self-loop\n*/"
    },
    "com.google.common.graph.AbstractGraph": {
        "com.google.common.graph.AbstractGraph:<init>()": "/**\n* Constructs an instance of AbstractGraph.\n*/",
        "com.google.common.graph.AbstractGraph:edges()": "/**\n* Returns a set of edges in the graph as EndpointPair objects.\n* @return Set of EndpointPair representing graph edges\n*/",
        "com.google.common.graph.AbstractGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)": "/**\n* Checks if an edge exists between two nodes.\n* @param nodeU first node\n* @param nodeV second node\n* @return true if edge exists, false otherwise\n*/",
        "com.google.common.graph.AbstractGraph:incidentEdges(java.lang.Object)": "/**\n* Retrieves incident edges for a specified node in the graph.\n* @param node the graph node to find incident edges for\n* @return a set of EndpointPair representing the incident edges\n*/",
        "com.google.common.graph.AbstractGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)": "/**\n* Checks if an edge exists between two nodes.\n* @param endpoints pair of nodes to check for an edge\n* @return true if edge exists, false otherwise\n*/",
        "com.google.common.graph.AbstractGraph:equals(java.lang.Object)": "/**\n* Compares this graph to another for equality.\n* @param obj object to compare with this graph\n* @return true if equal, false otherwise\n*/",
        "com.google.common.graph.AbstractGraph:hashCode()": "/**\n* Computes the hash code based on graph edges.\n* @return hash code of the edges set\n*/",
        "com.google.common.graph.AbstractGraph:toString()": "/**\n* Returns a string representation of the graph's properties.\n* @return formatted string with graph details\n*/",
        "com.google.common.graph.AbstractGraph:degree(java.lang.Object)": "/**\n* Computes the degree of a graph node.\n* @param node the graph node\n* @return degree as an integer\n*/",
        "com.google.common.graph.AbstractGraph:incidentEdgeOrder()": "/**\n* Returns an unordered ElementOrder for incident edges.\n* @return ElementOrder object representing unordered type\n*/",
        "com.google.common.graph.AbstractGraph:inDegree(java.lang.Object)": "/**\n* Returns the in-degree of a node in a directed graph.\n* @param node the graph node\n* @return the in-degree as an integer\n*/",
        "com.google.common.graph.AbstractGraph:outDegree(java.lang.Object)": "/**\n* Returns the out-degree of a node in a graph.\n* @param node the graph node\n* @return out-degree as an integer\n*/"
    },
    "com.google.common.graph.AbstractNetwork": {
        "com.google.common.graph.AbstractNetwork:<init>()": "/**\n* Constructs an instance of AbstractNetwork.\n*/",
        "com.google.common.graph.AbstractNetwork:asGraph()": "/**\n* Converts the network to a graph representation.\n* @return a Graph instance representing the network structure\n*/",
        "com.google.common.graph.AbstractNetwork:connectedPredicate(java.lang.Object,java.lang.Object)": "/**\n* Creates a predicate to check if two nodes are connected by an edge.\n* @param nodePresent the node currently present\n* @param nodeToCheck the node to verify connection with\n* @return Predicate evaluating edge connection between nodes\n*/",
        "com.google.common.graph.AbstractNetwork:isOrderingCompatible(com.google.common.graph.EndpointPair)": "/**\n* Checks if the ordering of endpoints matches the directionality of the graph.\n* @param endpoints pair of endpoints to check\n* @return true if compatible, false otherwise\n*/",
        "com.google.common.graph.AbstractNetwork:hasEdgeConnecting(java.lang.Object,java.lang.Object)": "/**\n* Checks if an edge exists between two nodes.\n* @param nodeU first node\n* @param nodeV second node\n* @return true if edge exists, false otherwise\n*/",
        "com.google.common.graph.AbstractNetwork:validateEndpoints(com.google.common.graph.EndpointPair)": "/**\n* Validates endpoint pair; checks for null and ordering compatibility.\n* @param endpoints pair of endpoints to validate\n*/",
        "com.google.common.graph.AbstractNetwork:hasEdgeConnecting(com.google.common.graph.EndpointPair)": "/**\n* Checks if an edge exists between two endpoints.\n* @param endpoints pair of nodes to check for an edge\n* @return true if edge exists, false if not or incompatible\n*/",
        "com.google.common.graph.AbstractNetwork:edgeIncidentNodesMap(com.google.common.graph.Network)": "/**\n* Creates a map of edges to their incident nodes in the network.\n* @param network the network containing edges and nodes\n* @return Map of edges to corresponding EndpointPair of incident nodes\n*/",
        "com.google.common.graph.AbstractNetwork:equals(java.lang.Object)": "/**\n* Compares this Network to another for equality.\n* @param obj object to compare with this Network\n* @return true if equal, false otherwise\n*/",
        "com.google.common.graph.AbstractNetwork:hashCode()": "/**\n* Computes hash code using incident nodes map from the current network.\n* @return hash code as an integer\n*/",
        "com.google.common.graph.AbstractNetwork:toString()": "/**\n* Returns a string representation of the graph's properties and structure.\n* @return formatted string with graph details\n*/",
        "com.google.common.graph.AbstractNetwork:adjacentEdges(java.lang.Object)": "/**\n* Returns edges adjacent to the specified edge.\n* @param edge the edge to find adjacent edges for\n* @return a set of adjacent edges excluding the specified edge\n*/",
        "com.google.common.graph.AbstractNetwork:edgesConnecting(java.lang.Object,java.lang.Object)": "/**\n* Retrieves edges connecting two nodes.\n* @param nodeU first node, @param nodeV second node\n* @return Set of edges connecting nodeU to nodeV\n*/",
        "com.google.common.graph.AbstractNetwork:degree(java.lang.Object)": "/**\n* Computes the degree of a node in a graph.\n* @param node the target node\n* @return the degree as an integer, considering directed/undirected edges\n*/",
        "com.google.common.graph.AbstractNetwork:edgesConnecting(com.google.common.graph.EndpointPair)": "/**\n* Retrieves edges connecting two nodes from a validated endpoint pair.\n* @param endpoints pair of nodes to connect\n* @return Set of edges connecting the nodes\n*/",
        "com.google.common.graph.AbstractNetwork:edgeConnectingOrNull(java.lang.Object,java.lang.Object)": "/**\n* Returns a single edge connecting two nodes or null if none exists.\n* @param nodeU first node, @param nodeV second node\n* @return edge or null if no edge exists\n*/",
        "com.google.common.graph.AbstractNetwork:inDegree(java.lang.Object)": "/**\n* Computes the in-degree of a node in a graph.\n* @param node the target node\n* @return in-degree as an integer based on graph direction\n*/",
        "com.google.common.graph.AbstractNetwork:outDegree(java.lang.Object)": "/**\n* Calculates the out-degree of a node in a graph.\n* @param node the target node\n* @return the out-degree as an integer\n*/",
        "com.google.common.graph.AbstractNetwork:edgeConnecting(java.lang.Object,java.lang.Object)": "/**\n* Retrieves an edge connecting two nodes, wrapped in an Optional.\n* @param nodeU first node, @param nodeV second node\n* @return Optional containing the edge or empty if none exists\n*/",
        "com.google.common.graph.AbstractNetwork:edgeConnectingOrNull(com.google.common.graph.EndpointPair)": "/**\n* Retrieves an edge between two nodes from an endpoint pair.\n* @param endpoints pair of nodes to find the connecting edge\n* @return edge or null if no edge exists\n*/",
        "com.google.common.graph.AbstractNetwork:edgeConnecting(com.google.common.graph.EndpointPair)": "/**\n* Retrieves an edge between two nodes from a validated endpoint pair.\n* @param endpoints pair of nodes to connect\n* @return Optional containing the edge or empty if none exists\n*/"
    },
    "com.google.common.graph.AbstractUndirectedNetworkConnections": {
        "com.google.common.graph.AbstractUndirectedNetworkConnections:predecessors()": "/**\n* Retrieves the set of predecessor nodes.\n* @return Set of predecessor nodes\n*/",
        "com.google.common.graph.AbstractUndirectedNetworkConnections:successors()": "/**\n* Returns the set of successor nodes.\n* @return Set of adjacent nodes\n*/",
        "com.google.common.graph.AbstractUndirectedNetworkConnections:incidentEdges()": "/**\n* Returns an unmodifiable set of incident edges.\n* @return Set of edges associated with the current element\n*/",
        "com.google.common.graph.AbstractUndirectedNetworkConnections:adjacentNode(java.lang.Object)": "/**\n* Returns the adjacent node for a given edge.\n* @param edge the edge connecting to the adjacent node\n* @return the adjacent node corresponding to the edge\n*/",
        "com.google.common.graph.AbstractUndirectedNetworkConnections:removeOutEdge(java.lang.Object)": "/**\n* Removes an outgoing edge and returns the previous node it was connected to.\n* @param edge the outgoing edge to be removed\n* @return the previous node associated with the edge\n*/",
        "com.google.common.graph.AbstractUndirectedNetworkConnections:<init>(java.util.Map)": "/**\n* Constructs an AbstractUndirectedNetworkConnections with a non-null edge map.\n* @param incidentEdgeMap mapping of edges to nodes\n*/",
        "com.google.common.graph.AbstractUndirectedNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)": "/**\n* Adds an outgoing edge for a node; ensures no existing edge is overwritten.\n* @param edge the edge to add\n* @param node the node associated with the edge\n*/",
        "com.google.common.graph.AbstractUndirectedNetworkConnections:inEdges()": "/**\n* Returns the set of incoming edges for the current element.\n* @return unmodifiable set of incident edges\n*/",
        "com.google.common.graph.AbstractUndirectedNetworkConnections:outEdges()": "/**\n* Retrieves the outgoing edges of the current element.\n* @return Set of edges associated with the current element\n*/",
        "com.google.common.graph.AbstractUndirectedNetworkConnections:removeInEdge(java.lang.Object,boolean)": "/**\n* Removes an incoming edge; returns the previous node or null for self-loops.\n* @param edge the incoming edge to be removed\n* @param isSelfLoop whether the edge is a self-loop\n* @return previous node or null if it's a self-loop\n*/",
        "com.google.common.graph.AbstractUndirectedNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)": "/**\n* Adds an incoming edge unless it's a self-loop.\n* @param edge the edge to add\n* @param node the node associated with the edge\n* @param isSelfLoop flag indicating if the edge is a self-loop\n*/"
    },
    "com.google.common.graph.AbstractValueGraph": {
        "com.google.common.graph.AbstractValueGraph:<init>()": "/**\n* Constructs an instance of AbstractValueGraph.\n*/",
        "com.google.common.graph.AbstractValueGraph:asGraph()": "/**\n* Converts the current graph to a Graph interface representation.\n* @return Graph representation of the current AbstractValueGraph\n*/",
        "com.google.common.graph.AbstractValueGraph:edgeValue(java.lang.Object,java.lang.Object)": "/**\n* Retrieves the edge value between two nodes.\n* @param nodeU first node\n* @param nodeV second node\n* @return Optional containing edge value or empty if not present\n*/",
        "com.google.common.graph.AbstractValueGraph:edgeValue(com.google.common.graph.EndpointPair)": "/**\n* Retrieves the edge value for given endpoints.\n* @param endpoints pair of nodes defining the edge\n* @return Optional containing edge value or empty if not present\n*/",
        "com.google.common.graph.AbstractValueGraph:edges()": "/**\n* Returns a set of graph edges as EndpointPairs.\n* @return Set of EndpointPair objects representing graph edges\n*/",
        "com.google.common.graph.AbstractValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)": "/**\n* Checks if an edge exists between two nodes.\n* @param nodeU first node\n* @param nodeV second node\n* @return true if edge exists, false otherwise\n*/",
        "com.google.common.graph.AbstractValueGraph:incidentEdges(java.lang.Object)": "/**\n* Retrieves incident edges for a specified node in the graph.\n* @param node the graph node to find incident edges for\n* @return a set of EndpointPair representing the incident edges\n*/",
        "com.google.common.graph.AbstractValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)": "/**\n* Checks if an edge exists between the given endpoints.\n* @param endpoints pair of nodes to check for an edge\n* @return true if edge exists, false otherwise\n*/",
        "com.google.common.graph.AbstractValueGraph:edgeValueMap(com.google.common.graph.ValueGraph)": "/**\n* Creates a map of edge values from the given graph.\n* @param graph the ValueGraph containing edges and values\n* @return a map of EndpointPair to their corresponding values\n*/",
        "com.google.common.graph.AbstractValueGraph:degree(java.lang.Object)": "/**\n* Calculates the degree of a graph node.\n* @param node the graph node\n* @return degree as an integer\n*/",
        "com.google.common.graph.AbstractValueGraph:equals(java.lang.Object)": "/**\n* Compares this graph with another for equality.\n* @param obj object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.graph.AbstractValueGraph:hashCode()": "/**\n* Computes hash code based on edge values from the graph.\n* @return hash code as an integer\n*/",
        "com.google.common.graph.AbstractValueGraph:toString()": "/**\n* Returns a string representation of the graph's properties and edges.\n* @return formatted string with graph info\n*/",
        "com.google.common.graph.AbstractValueGraph:incidentEdgeOrder()": "/**\n* Returns an unordered ElementOrder for incident edges.\n* @return ElementOrder object representing unordered type\n*/",
        "com.google.common.graph.AbstractValueGraph:inDegree(java.lang.Object)": "/**\n* Returns the in-degree of a node in a graph.\n* @param node the graph node\n* @return the in-degree as an integer\n*/",
        "com.google.common.graph.AbstractValueGraph:outDegree(java.lang.Object)": "/**\n* Returns the out-degree of a node in a graph.\n* @param node the graph node\n* @return out-degree as an integer\n*/"
    },
    "com.google.common.graph.DirectedGraphConnections$NodeConnection$Pred": {
        "com.google.common.graph.DirectedGraphConnections$NodeConnection$Pred:equals(java.lang.Object)": "/**\n* Compares this object with another for equality based on the node property.\n* @param that object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.graph.DirectedGraphConnections$NodeConnection$Pred:hashCode()": "/**\n* Computes hash code for the instance to ensure uniqueness.\n* @return unique hash code based on class and node\n*/",
        "com.google.common.graph.DirectedGraphConnections$NodeConnection$Pred:<init>(java.lang.Object)": "/**\n* Constructs a Pred instance with the specified node.\n* @param node the node to connect, must not be null\n*/"
    },
    "com.google.common.graph.DirectedGraphConnections$NodeConnection$Succ": {
        "com.google.common.graph.DirectedGraphConnections$NodeConnection$Succ:equals(java.lang.Object)": "/**\n* Compares this object to another for equality based on the node.\n* @param that object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.graph.DirectedGraphConnections$NodeConnection$Succ:hashCode()": "/**\n* Computes hash code for the instance combining class and node hash codes.\n* @return combined hash code as an integer\n*/",
        "com.google.common.graph.DirectedGraphConnections$NodeConnection$Succ:<init>(java.lang.Object)": "/**** Constructs a Succ node from a given Node. \n* @param node the node to connect, must not be null \n*/"
    },
    "com.google.common.graph.DirectedGraphConnections$PredAndSucc": {
        "com.google.common.graph.DirectedGraphConnections$PredAndSucc:<init>(java.lang.Object)": "/**\n* Initializes an instance with the specified successor value.\n* @param successorValue the value to be set as successor\n*/"
    },
    "com.google.common.graph.ElementOrder": {
        "com.google.common.graph.ElementOrder:type()": "/**\n* Returns the current type.\n* @return Type object representing the current type\n*/",
        "com.google.common.graph.ElementOrder:comparator()": "/**\n* Retrieves the comparator for ordering elements.\n* @return Comparator<T> for the elements\n* @throws UnsupportedOperationException if comparator is not defined\n*/",
        "com.google.common.graph.ElementOrder:hashCode()": "/**\n* Computes hash code based on type and comparator fields.\n* @return generated hash code as an integer\n*/",
        "com.google.common.graph.ElementOrder:cast()": "/**\n* Casts the current instance to ElementOrder of type T1.\n* @return casted ElementOrder instance\n*/",
        "com.google.common.graph.ElementOrder:<init>(com.google.common.graph.ElementOrder$Type,java.util.Comparator)": "/**\n* Constructs an ElementOrder with type and optional comparator.\n* @param type the order type; @param comparator optional sorting criterion\n*/",
        "com.google.common.graph.ElementOrder:equals(java.lang.Object)": "/**\n* Compares this ElementOrder with another for equality.\n* @param obj object to compare with this ElementOrder\n* @return true if equal, false otherwise\n*/",
        "com.google.common.graph.ElementOrder:unordered()": "/**\n* Creates an unordered ElementOrder instance.\n* @return ElementOrder object representing unordered type\n*/",
        "com.google.common.graph.ElementOrder:stable()": "/**\n* Creates a stable ElementOrder with no comparator.\n* @return ElementOrder instance configured for stable ordering\n*/",
        "com.google.common.graph.ElementOrder:insertion()": "/**** \n* Creates an ElementOrder for insertion without a comparator.\n* @return ElementOrder instance for insertion order\n*/",
        "com.google.common.graph.ElementOrder:natural()": "/**\n* Creates a natural ordering for comparable elements.\n* @return ElementOrder instance for sorted elements\n*/",
        "com.google.common.graph.ElementOrder:sorted(java.util.Comparator)": "/**\n* Creates a sorted ElementOrder using the provided comparator.\n* @param comparator the comparator for sorting elements\n* @return ElementOrder instance for sorted elements\n*/",
        "com.google.common.graph.ElementOrder:toString()": "/**\n* Returns a string representation of the object with type and comparator values.\n* @return formatted string of object properties\n*/",
        "com.google.common.graph.ElementOrder:createMap(int)": "/**** Creates a map based on specified type and expected size. \n* @param expectedSize desired size for the map \n* @return a Map instance of the appropriate type \n*/"
    },
    "com.google.common.graph.DirectedGraphConnections": {
        "com.google.common.graph.DirectedGraphConnections:adjacentNodes()": "/**\n* Returns a set of adjacent nodes.\n* @return unmodifiable set of adjacent node values\n*/",
        "com.google.common.graph.DirectedGraphConnections:predecessors()": "/**\n* Returns a set of predecessor nodes.\n* @return Set of predecessor nodes in the graph\n*/",
        "com.google.common.graph.DirectedGraphConnections:successors()": "/**\n* Returns a set of successor nodes in the graph.\n* @return Set of successor nodes\n*/",
        "com.google.common.graph.DirectedGraphConnections:isPredecessor(java.lang.Object)": "/**\n* Checks if the value is a predecessor.\n* @param value object to check, can be null\n* @return true if value is PRED or an instance of PredAndSucc, false otherwise\n*/",
        "com.google.common.graph.DirectedGraphConnections:isSuccessor(java.lang.Object)": "/**\n* Checks if the value is not null and not equal to PRED.\n* @param value object to check\n* @return true if value is valid, false otherwise\n*/",
        "com.google.common.graph.DirectedGraphConnections:value(java.lang.Object)": "/**\n* Retrieves the value associated with a node, returning null for a specific placeholder.\n* @param node the node to retrieve the value for\n* @return the associated value or null if a placeholder is found\n*/",
        "com.google.common.graph.DirectedGraphConnections:<init>(java.util.Map,java.util.List,int,int)": "/**\n* Initializes DirectedGraphConnections with adjacency data and counts.\n* @param adjacentNodeValues map of adjacent node values\n* @param orderedNodeConnections list of ordered connections (nullable)\n* @param predecessorCount number of predecessors\n* @param successorCount number of successors\n*/",
        "com.google.common.graph.DirectedGraphConnections:removePredecessor(java.lang.Object)": "/**\n* Removes predecessor node if present and updates connections.\n* @param node the node to remove as predecessor\n*/",
        "com.google.common.graph.DirectedGraphConnections:addPredecessor(java.lang.Object,java.lang.Object)": "/**\n* Adds a predecessor node and updates connections if necessary.\n* @param node the predecessor node to add\n* @param unused unused parameter for method compatibility\n*/",
        "com.google.common.graph.DirectedGraphConnections:removeSuccessor(java.lang.Object)": "/**** Removes the successor node and returns its value. \n* @param node the node whose successor is to be removed\n* @return the removed successor value or null if none exists \n*/",
        "com.google.common.graph.DirectedGraphConnections:addSuccessor(java.lang.Object,java.lang.Object)": "/**\n* Adds a successor node and returns the previous successor value.\n* @param node the node to which the successor is added\n* @param value the successor value to associate with the node\n* @return previous successor value or null if none existed\n*/",
        "com.google.common.graph.DirectedGraphConnections:of(com.google.common.graph.ElementOrder)": "/**\n* Creates DirectedGraphConnections based on incident edge order.\n* @param incidentEdgeOrder defines order of edges\n* @return DirectedGraphConnections instance\n*/",
        "com.google.common.graph.DirectedGraphConnections:incidentEdgeIterator(java.lang.Object)": "/**\n* Returns an iterator of incident edges for a given node.\n* @param thisNode the node to find incident edges for\n* @return Iterator of EndpointPair representing incident edges\n*/",
        "com.google.common.graph.DirectedGraphConnections:ofImmutable(java.lang.Object,java.lang.Iterable,com.google.common.base.Function)": "/**\n* Creates immutable DirectedGraphConnections from incident edges.\n* @param thisNode the node for which connections are created\n* @param incidentEdges edges connected to thisNode\n* @param successorNodeToValueFn function to map successors to values\n* @return DirectedGraphConnections instance\n*/"
    },
    "com.google.common.graph.DirectedMultiNetworkConnections": {
        "com.google.common.graph.DirectedMultiNetworkConnections:getReference(java.lang.ref.Reference)": "/**\n* Retrieves the referenced object or null if the reference is null.\n* @param reference a nullable Reference object\n* @return the referenced object or null\n*/",
        "com.google.common.graph.DirectedMultiNetworkConnections:edgesConnecting(java.lang.Object)": "/**\n* Retrieves edges connected to a specified node.\n* @param node the node for which to find connecting edges\n* @return a set of edges connected to the node\n*/",
        "com.google.common.graph.DirectedMultiNetworkConnections:removeOutEdge(java.lang.Object)": "/**\n* Removes an outgoing edge and updates successors.\n* @param edge the edge to remove\n* @return the node associated with the removed edge\n*/",
        "com.google.common.graph.DirectedMultiNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)": "/**\n* Adds an outgoing edge and updates the successors multiset.\n* @param edge the edge to add\n* @param node the target node for the edge\n*/",
        "com.google.common.graph.DirectedMultiNetworkConnections:<init>(java.util.Map,java.util.Map,int)": "/**\n* Constructs DirectedMultiNetworkConnections with edge mappings and self-loop count.\n* @param inEdges incoming edges mapping\n* @param outEdges outgoing edges mapping\n* @param selfLoopCount number of self-loops\n*/",
        "com.google.common.graph.DirectedMultiNetworkConnections:removeInEdge(java.lang.Object,boolean)": "/**\n* Removes an incoming edge and updates predecessor count if applicable.\n* @param edge the edge to remove\n* @param isSelfLoop indicates if the edge is a self-loop\n* @return the previous node associated with the edge\n*/",
        "com.google.common.graph.DirectedMultiNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)": "/**\n* Adds an incoming edge to a node and updates its predecessors.\n* @param edge the edge to add, @param node target node, @param isSelfLoop indicates self-loop\n*/",
        "com.google.common.graph.DirectedMultiNetworkConnections:of()": "/**\n* Creates a new DirectedMultiNetworkConnections instance with default mappings and zero self-loops.\n* @return DirectedMultiNetworkConnections object\n*/",
        "com.google.common.graph.DirectedMultiNetworkConnections:predecessorsMultiset()": "/**\n* Retrieves or creates a multiset of predecessors.\n* @return Multiset of predecessors, cached in a soft reference\n*/",
        "com.google.common.graph.DirectedMultiNetworkConnections:successorsMultiset()": "/******************************************************************************* \n* Retrieves a multiset of successors, creating it if not cached. \n* @return Multiset of successors \n*******************************************************************************/",
        "com.google.common.graph.DirectedMultiNetworkConnections:predecessors()": "/**\n* Returns an unmodifiable set of predecessors.\n* @return Set of predecessors from the multiset\n*/",
        "com.google.common.graph.DirectedMultiNetworkConnections:successors()": "/**\n* Returns an unmodifiable set of successors.\n* @return Set of successor elements\n*/",
        "com.google.common.graph.DirectedMultiNetworkConnections:ofImmutable(java.util.Map,java.util.Map,int)": "/**\n* Creates an immutable DirectedMultiNetworkConnections instance.\n* @param inEdges incoming edges mapping\n* @param outEdges outgoing edges mapping\n* @param selfLoopCount number of self-loops\n* @return DirectedMultiNetworkConnections object\n*/"
    },
    "com.google.common.graph.DirectedNetworkConnections": {
        "com.google.common.graph.DirectedNetworkConnections:predecessors()": "/**\n* Returns an unmodifiable set of predecessors from the inEdgeMap.\n* @return Set of predecessors\n*/",
        "com.google.common.graph.DirectedNetworkConnections:successors()": "/**\n* Returns an unmodifiable set of successor nodes.\n* @return Set of successor nodes from the outEdgeMap\n*/",
        "com.google.common.graph.DirectedNetworkConnections:edgesConnecting(java.lang.Object)": "/**\n* Retrieves edges connected to the specified node.\n* @param node the node to find connected edges for\n* @return a set of edges connecting to the node\n*/",
        "com.google.common.graph.DirectedNetworkConnections:<init>(java.util.Map,java.util.Map,int)": "/**\n* Constructs directed network connections with specified edge maps and self-loop count.\n* @param inEdgeMap incoming edges mapping\n* @param outEdgeMap outgoing edges mapping\n* @param selfLoopCount number of self-loops\n*/",
        "com.google.common.graph.DirectedNetworkConnections:of()": "/**\n* Creates a new DirectedNetworkConnections instance with empty edge mappings.\n* @return DirectedNetworkConnections object\n*/",
        "com.google.common.graph.DirectedNetworkConnections:ofImmutable(java.util.Map,java.util.Map,int)": "/**\n* Creates an immutable DirectedNetworkConnections from edge maps and self-loop count.\n* @param inEdges incoming edges mapping\n* @param outEdges outgoing edges mapping\n* @param selfLoopCount number of self-loops\n* @return DirectedNetworkConnections instance\n*/"
    },
    "com.google.common.graph.EdgesConnecting": {
        "com.google.common.graph.EdgesConnecting:getConnectingEdge()": "/**\n* Retrieves the connecting edge for the target node.\n* @return Edge object or null if no edge exists\n*/",
        "com.google.common.graph.EdgesConnecting:<init>(java.util.Map,java.lang.Object)": "/**\n* Initializes EdgesConnecting with a map and target node.\n* @param nodeToEdgeMap mapping of nodes to edges\n* @param targetNode the node to connect edges to\n*/",
        "com.google.common.graph.EdgesConnecting:iterator()": "/**\n* Returns an iterator over the connecting edge or an empty iterator if none exists.\n* @return UnmodifiableIterator for the connecting edge or empty if not found\n*/",
        "com.google.common.graph.EdgesConnecting:size()": "/**\n* Returns the size based on the existence of a connecting edge.\n* @return 1 if an edge exists, otherwise 0\n*/",
        "com.google.common.graph.EdgesConnecting:contains(java.lang.Object)": "/**\n* Checks if the specified edge is the connecting edge.\n* @param edge the edge to check for connection\n* @return true if the edge is the connecting edge, false otherwise\n*/"
    },
    "com.google.common.graph.EndpointPair$Ordered": {
        "com.google.common.graph.EndpointPair$Ordered:<init>(java.lang.Object,java.lang.Object)": "/**\n* Initializes an Ordered object with source and target nodes.\n* @param source starting node\n* @param target ending node\n*/",
        "com.google.common.graph.EndpointPair$Ordered:source()": "/**\n* Returns the source node.\n* @return the source node of type N\n*/",
        "com.google.common.graph.EndpointPair$Ordered:target()": "/**\n* Returns the target node.\n* @return the node of type N\n*/",
        "com.google.common.graph.EndpointPair$Ordered:isOrdered()": "/**\n* Checks if the collection is ordered.\n* @return true if the collection maintains a specific order\n*/",
        "com.google.common.graph.EndpointPair$Ordered:hashCode()": "/**\n* Computes hash code based on source and target nodes.\n* @return hash code as an integer\n*/",
        "com.google.common.graph.EndpointPair$Ordered:toString()": "/**\n* Returns a string representation of the source and target nodes.\n* @return formatted string in the form \"<source -> target>\"\n*/",
        "com.google.common.graph.EndpointPair$Ordered:equals(java.lang.Object)": "/**\n* Compares this EndpointPair with another for equality.\n* @param obj object to compare\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.graph.EndpointPair$Unordered": {
        "com.google.common.graph.EndpointPair$Unordered:<init>(java.lang.Object,java.lang.Object)": "/**\n* Constructs an Unordered object with two nodes.\n* @param nodeU first node\n* @param nodeV second node\n*/",
        "com.google.common.graph.EndpointPair$Unordered:source()": "/**\n* Throws an exception indicating source retrieval is unsupported in undirected graphs.\n* @return always throws UnsupportedOperationException\n*/",
        "com.google.common.graph.EndpointPair$Unordered:target()": "/**\n* Throws UnsupportedOperationException for target retrieval in undirected graphs.\n* @return N not applicable for undirected graphs\n*/",
        "com.google.common.graph.EndpointPair$Unordered:isOrdered()": "/**\n* Checks if the collection is ordered.\n* @return false, indicating the collection is not ordered\n*/",
        "com.google.common.graph.EndpointPair$Unordered:hashCode()": "/**\n* Computes the hash code based on nodeU and nodeV.\n* @return combined hash code of both nodes\n*/",
        "com.google.common.graph.EndpointPair$Unordered:toString()": "/**\n* Returns a string representation of the object in the format [nodeU, nodeV].\n* @return formatted string of nodeU and nodeV values\n*/",
        "com.google.common.graph.EndpointPair$Unordered:iterator()": "/**\n* Returns an unmodifiable iterator over nodes.\n* @return UnmodifiableIterator of nodes from nodeU and nodeV\n*/",
        "com.google.common.graph.EndpointPair$Unordered:equals(java.lang.Object)": "/**\n* Compares this EndpointPair with another for equality.\n* @param obj the object to compare with\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.graph.EndpointPairIterator$Directed": {
        "com.google.common.graph.EndpointPairIterator$Directed:<init>(com.google.common.graph.BaseGraph)": "/**\n* Initializes a Directed graph from the provided base graph.\n* @param graph the base graph to convert into a Directed graph\n*/",
        "com.google.common.graph.EndpointPairIterator$Directed:computeNext()": "/**\n* Computes the next EndpointPair from the current node and successor iterator.\n* @return EndpointPair or end of data if no more successors exist\n*/"
    },
    "com.google.common.graph.ForwardingGraph": {
        "com.google.common.graph.ForwardingGraph:nodes()": "/**\n* Retrieves a set of nodes from the delegate.\n* @return Set of nodes of type N\n*/",
        "com.google.common.graph.ForwardingGraph:edgeCount()": "/**\n* Returns the count of edges in the graph.\n* @return number of edges as a long value\n*/",
        "com.google.common.graph.ForwardingGraph:isDirected()": "/**\n* Checks if the graph is directed.\n* @return true if the graph is directed, false otherwise\n*/",
        "com.google.common.graph.ForwardingGraph:allowsSelfLoops()": "/**\n* Checks if self-loops are allowed in the graph.\n* @return true if self-loops are permitted, false otherwise\n*/",
        "com.google.common.graph.ForwardingGraph:nodeOrder()": "/**\n* Retrieves the node order from the delegate.\n* @return ElementOrder representing the node order\n*/",
        "com.google.common.graph.ForwardingGraph:incidentEdgeOrder()": "/**\n* Retrieves the order of incident edges for the graph.\n* @return ElementOrder of incident edges\n*/",
        "com.google.common.graph.ForwardingGraph:adjacentNodes(java.lang.Object)": "/**\n* Retrieves adjacent nodes for a given node.\n* @param node the node for which adjacent nodes are requested\n* @return a set of adjacent nodes\n*/",
        "com.google.common.graph.ForwardingGraph:incidentEdges(java.lang.Object)": "/**\n* Retrieves incident edges for the specified node.\n* @param node the node for which to find incident edges\n* @return a set of EndpointPair representing the incident edges\n*/",
        "com.google.common.graph.ForwardingGraph:degree(java.lang.Object)": "/**\n* Returns the degree of the specified node.\n* @param node the node whose degree is to be calculated\n* @return the degree of the node as an integer\n*/",
        "com.google.common.graph.ForwardingGraph:inDegree(java.lang.Object)": "/**\n* Returns the in-degree of the specified node.\n* @param node the node for which to find the in-degree\n* @return the in-degree as an integer\n*/",
        "com.google.common.graph.ForwardingGraph:outDegree(java.lang.Object)": "/**\n* Returns the out-degree of the specified node.\n* @param node the node for which to calculate out-degree\n* @return the number of edges originating from the node\n*/",
        "com.google.common.graph.ForwardingGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)": "/**\n* Checks if an edge exists between two nodes.\n* @param nodeU first node\n* @param nodeV second node\n* @return true if an edge connects nodeU and nodeV, false otherwise\n*/",
        "com.google.common.graph.ForwardingGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)": "/**\n* Checks if an edge exists between the given endpoints.\n* @param endpoints pair of endpoints to check for connection\n* @return true if an edge exists, false otherwise\n*/",
        "com.google.common.graph.ForwardingGraph:predecessors(java.lang.Object)": "/**\n* Retrieves predecessor nodes for the specified node.\n* @param node the target node to find predecessors for\n* @return a set of predecessor nodes\n*/",
        "com.google.common.graph.ForwardingGraph:successors(java.lang.Object)": "/**\n* Retrieves successor nodes for a given node.\n* @param node the node for which successors are retrieved\n* @return Set of successor nodes\n*/"
    },
    "com.google.common.graph.ForwardingNetwork": {
        "com.google.common.graph.ForwardingNetwork:nodes()": "/**\n* Returns a set of nodes from the delegate.\n* @return Set of nodes of type N\n*/",
        "com.google.common.graph.ForwardingNetwork:edges()": "/**\n* Returns the set of edges from the graph.\n* @return a Set of edges present in the graph\n*/",
        "com.google.common.graph.ForwardingNetwork:isDirected()": "/**\n* Checks if the graph is directed.\n* @return true if the graph is directed, false otherwise\n*/",
        "com.google.common.graph.ForwardingNetwork:allowsParallelEdges()": "/**\n* Checks if parallel edges are allowed in the graph.\n* @return true if parallel edges are allowed, false otherwise\n*/",
        "com.google.common.graph.ForwardingNetwork:allowsSelfLoops()": "/**\n* Checks if self-loops are allowed in the graph.\n* @return true if self-loops are permitted, false otherwise\n*/",
        "com.google.common.graph.ForwardingNetwork:nodeOrder()": "/**\n* Retrieves the node order of the graph.\n* @return ElementOrder representing the order of nodes\n*/",
        "com.google.common.graph.ForwardingNetwork:edgeOrder()": "/**\n* Retrieves the edge order of the graph.\n* @return ElementOrder representing the edge order\n*/",
        "com.google.common.graph.ForwardingNetwork:adjacentNodes(java.lang.Object)": "/**\n* Retrieves adjacent nodes for the specified node.\n* @param node the node for which adjacent nodes are requested\n* @return a set of adjacent nodes\n*/",
        "com.google.common.graph.ForwardingNetwork:predecessors(java.lang.Object)": "/**\n* Retrieves the set of predecessor nodes for a given node.\n* @param node the node to find predecessors for\n* @return a set of predecessor nodes\n*/",
        "com.google.common.graph.ForwardingNetwork:successors(java.lang.Object)": "/**\n* Retrieves the set of successor nodes for a given node.\n* @param node the node for which successors are requested\n* @return a set of successor nodes\n*/",
        "com.google.common.graph.ForwardingNetwork:incidentEdges(java.lang.Object)": "/**\n* Retrieves edges incident to the specified node.\n* @param node the node for which incident edges are retrieved\n* @return a set of incident edges for the given node\n*/",
        "com.google.common.graph.ForwardingNetwork:inEdges(java.lang.Object)": "/**\n* Retrieves incoming edges for a specified node.\n* @param node the node to get incoming edges for\n* @return a set of incoming edges to the node\n*/",
        "com.google.common.graph.ForwardingNetwork:outEdges(java.lang.Object)": "/**\n* Retrieves outgoing edges for a specified node.\n* @param node the target node to get outgoing edges from\n* @return a set of outgoing edges from the node\n*/",
        "com.google.common.graph.ForwardingNetwork:incidentNodes(java.lang.Object)": "/**\n* Retrieves the incident nodes of the given edge.\n* @param edge the edge for which incident nodes are requested\n* @return an EndpointPair containing the incident nodes\n*/",
        "com.google.common.graph.ForwardingNetwork:adjacentEdges(java.lang.Object)": "/**\n* Retrieves a set of edges adjacent to the specified edge.\n* @param edge the edge for which adjacent edges are retrieved\n* @return Set of adjacent edges\n*/",
        "com.google.common.graph.ForwardingNetwork:degree(java.lang.Object)": "/**\n* Returns the degree of the specified node.\n* @param node the node whose degree is to be calculated\n* @return the degree of the node as an integer\n*/",
        "com.google.common.graph.ForwardingNetwork:inDegree(java.lang.Object)": "/**\n* Returns the in-degree of the specified node.\n* @param node the node whose in-degree is to be calculated\n* @return the in-degree of the node as an integer\n*/",
        "com.google.common.graph.ForwardingNetwork:outDegree(java.lang.Object)": "/**\n* Returns the out-degree of the specified node.\n* @param node the node to evaluate\n* @return the number of outgoing edges from the node\n*/",
        "com.google.common.graph.ForwardingNetwork:edgesConnecting(java.lang.Object,java.lang.Object)": "/**\n* Retrieves edges connecting two nodes.\n* @param nodeU first node\n* @param nodeV second node\n* @return Set of edges between nodeU and nodeV\n*/",
        "com.google.common.graph.ForwardingNetwork:edgesConnecting(com.google.common.graph.EndpointPair)": "/**\n* Retrieves edges connecting the specified endpoints.\n* @param endpoints pair of endpoints to find connecting edges\n* @return Set of edges connecting the endpoints\n*/",
        "com.google.common.graph.ForwardingNetwork:edgeConnecting(java.lang.Object,java.lang.Object)": "/**\n* Retrieves an optional edge connecting two nodes.\n* @param nodeU first node\n* @param nodeV second node\n* @return Optional edge between nodeU and nodeV\n*/",
        "com.google.common.graph.ForwardingNetwork:edgeConnecting(com.google.common.graph.EndpointPair)": "/**\n* Retrieves an edge connecting the specified endpoints.\n* @param endpoints pair of endpoints to find the connecting edge\n* @return Optional containing the edge or empty if none exists\n*/",
        "com.google.common.graph.ForwardingNetwork:edgeConnectingOrNull(java.lang.Object,java.lang.Object)": "/**\n* Retrieves the edge connecting two nodes or returns null if none exists.\n* @param nodeU first node\n* @param nodeV second node\n* @return edge connecting nodes or null if not found\n*/",
        "com.google.common.graph.ForwardingNetwork:edgeConnectingOrNull(com.google.common.graph.EndpointPair)": "/**\n* Retrieves the edge connecting the specified endpoints or null if absent.\n* @param endpoints pair of endpoints to find the connecting edge\n* @return the connecting edge or null if not found\n*/",
        "com.google.common.graph.ForwardingNetwork:hasEdgeConnecting(java.lang.Object,java.lang.Object)": "/**\n* Checks if an edge connects two specified nodes.\n* @param nodeU first node\n* @param nodeV second node\n* @return true if an edge exists, false otherwise\n*/",
        "com.google.common.graph.ForwardingNetwork:hasEdgeConnecting(com.google.common.graph.EndpointPair)": "/**\n* Checks if there is an edge connecting the given endpoints.\n* @param endpoints pair of endpoints to check for connection\n* @return true if an edge exists, false otherwise\n*/"
    },
    "com.google.common.graph.ForwardingValueGraph": {
        "com.google.common.graph.ForwardingValueGraph:nodes()": "/**\n* Returns a set of nodes from the delegate.\n* @return Set of nodes of type N\n*/",
        "com.google.common.graph.ForwardingValueGraph:edgeCount()": "/**\n* Returns the number of edges in the graph.\n* @return count of edges as a long value\n*/",
        "com.google.common.graph.ForwardingValueGraph:isDirected()": "/**\n* Checks if the graph is directed.\n* @return true if directed, false otherwise\n*/",
        "com.google.common.graph.ForwardingValueGraph:allowsSelfLoops()": "/**\n* Checks if self-loops are allowed in the graph.\n* @return true if self-loops are permitted, false otherwise\n*/",
        "com.google.common.graph.ForwardingValueGraph:nodeOrder()": "/**\n* Retrieves the node order from the delegate.\n* @return ElementOrder representing the node order\n*/",
        "com.google.common.graph.ForwardingValueGraph:incidentEdgeOrder()": "/**\n* Retrieves the order of incident edges for the graph.\n* @return ElementOrder of incident edges\n*/",
        "com.google.common.graph.ForwardingValueGraph:adjacentNodes(java.lang.Object)": "/**\n* Retrieves adjacent nodes for the specified node.\n* @param node the node to find adjacent nodes for\n* @return a set of adjacent nodes\n*/",
        "com.google.common.graph.ForwardingValueGraph:predecessors(java.lang.Object)": "/**\n* Retrieves the set of predecessor nodes for the specified node.\n* @param node the target node to find predecessors for\n* @return a set of predecessor nodes\n*/",
        "com.google.common.graph.ForwardingValueGraph:degree(java.lang.Object)": "/**\n* Returns the degree of the specified node.\n* @param node the node whose degree is to be calculated\n* @return the degree of the node as an integer\n*/",
        "com.google.common.graph.ForwardingValueGraph:inDegree(java.lang.Object)": "/**\n* Returns the in-degree of the specified node.\n* @param node the node to evaluate\n* @return the number of incoming edges to the node\n*/",
        "com.google.common.graph.ForwardingValueGraph:outDegree(java.lang.Object)": "/**\n* Returns the out-degree of the specified node.\n* @param node the node to evaluate\n* @return the number of edges leaving the node\n*/",
        "com.google.common.graph.ForwardingValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)": "/**\n* Checks if there is an edge connecting two nodes.\n* @param nodeU first node\n* @param nodeV second node\n* @return true if an edge exists, false otherwise\n*/",
        "com.google.common.graph.ForwardingValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)": "/**\n* Checks if there is an edge connecting the specified endpoints.\n* @param endpoints pair of endpoints to check\n* @return true if an edge exists, false otherwise\n*/",
        "com.google.common.graph.ForwardingValueGraph:edgeValue(java.lang.Object,java.lang.Object)": "/**\n* Retrieves the value of the edge connecting two nodes.\n* @param nodeU first node\n* @param nodeV second node\n* @return Optional containing edge value or empty if no edge exists\n*/",
        "com.google.common.graph.ForwardingValueGraph:edgeValue(com.google.common.graph.EndpointPair)": "/**\n* Retrieves the value of the edge between specified endpoints.\n* @param endpoints pair of nodes defining the edge\n* @return Optional containing edge value or empty if not present\n*/",
        "com.google.common.graph.ForwardingValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Retrieves edge value or returns default if absent.\n* @param nodeU first node, nodeV second node, defaultValue fallback value\n* @return edge value or defaultValue if edge is not present\n*/",
        "com.google.common.graph.ForwardingValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)": "/**\n* Returns edge value for given endpoints or default if not present.\n* @param endpoints pair of nodes defining the edge\n* @param defaultValue value to return if edge is absent\n* @return edge value or defaultValue if edge is not found\n*/",
        "com.google.common.graph.ForwardingValueGraph:successors(java.lang.Object)": "/**\n* Retrieves the set of successor nodes for a given node.\n* @param node the node for which successors are requested\n* @return Set of successor nodes\n*/"
    },
    "com.google.common.graph.ValueGraph": {
        "com.google.common.graph.ValueGraph:successors(java.lang.Object)": "/**\n* Retrieves the set of successor nodes for a given node.\n* @param node the node for which successors are requested\n* @return a Set of successor nodes\n*/"
    },
    "com.google.common.graph.Graph": {
        "com.google.common.graph.Graph:successors(java.lang.Object)": "/**\n* Retrieves the set of successor nodes for a given node.\n* @param node the node for which successors are retrieved\n* @return a set of successor nodes\n*/",
        "com.google.common.graph.Graph:predecessors(java.lang.Object)": "/**\n* Retrieves the set of predecessor nodes for a given node.\n* @param node the target node to find predecessors for\n* @return a set of predecessor nodes\n*/"
    },
    "com.google.common.graph.GraphBuilder": {
        "com.google.common.graph.GraphBuilder:allowsSelfLoops(boolean)": "/**\n* Sets whether self-loops are allowed in the graph.\n* @param allowsSelfLoops true to allow self-loops, false otherwise\n* @return the GraphBuilder instance for method chaining\n*/",
        "com.google.common.graph.GraphBuilder:cast()": "/**\n* Casts the current instance to GraphBuilder of type N1.\n* @return casted GraphBuilder instance\n*/",
        "com.google.common.graph.GraphBuilder:nodeOrder(com.google.common.graph.ElementOrder)": "/**\n* Creates a new GraphBuilder with specified node order.\n* @param nodeOrder defines the order of nodes\n* @return a new GraphBuilder instance\n*/",
        "com.google.common.graph.GraphBuilder:incidentEdgeOrder(com.google.common.graph.ElementOrder)": "/**\n* Sets incident edge order; supports unordered and stable types.\n* @param incidentEdgeOrder defines the order of incident edges\n* @return a new GraphBuilder with the specified edge order\n*/",
        "com.google.common.graph.GraphBuilder:expectedNodeCount(int)": "/**** Sets the expected node count, ensuring it's non-negative. \n* @param expectedNodeCount the desired count of nodes \n* @return the updated GraphBuilder instance \n*/",
        "com.google.common.graph.GraphBuilder:<init>(boolean)": "/**\n* Initializes GraphBuilder with directed or undirected graph setting.\n* @param directed true for directed graph, false for undirected\n*/",
        "com.google.common.graph.GraphBuilder:directed()": "/**\n* Creates a directed GraphBuilder instance.\n* @return GraphBuilder configured for directed graphs\n*/",
        "com.google.common.graph.GraphBuilder:undirected()": "/**\n* Creates a GraphBuilder for an undirected graph.\n* @return GraphBuilder instance configured for undirected graph\n*/",
        "com.google.common.graph.GraphBuilder:from(com.google.common.graph.Graph)": "/**\n* Builds a GraphBuilder from an existing graph.\n* @param graph the source graph to configure the builder\n* @return a configured GraphBuilder instance\n*/",
        "com.google.common.graph.GraphBuilder:copy()": "/**\n* Creates a copy of the current GraphBuilder instance.\n* @return a new GraphBuilder with the same properties\n*/",
        "com.google.common.graph.GraphBuilder:build()": "/**\n* Builds a MutableGraph instance using the current builder properties.\n* @return a MutableGraph of type N1\n*/",
        "com.google.common.graph.GraphBuilder:immutable()": "/**\n* Creates an ImmutableGraph.Builder from the current GraphBuilder instance.\n* @return ImmutableGraph.Builder for the specified node type\n*/"
    },
    "com.google.common.graph.GraphConstants": {
        "com.google.common.graph.GraphConstants:<init>()": "/**\n* Prevents instantiation of the GraphConstants class.\n*/"
    },
    "com.google.common.graph.Graphs$TransposedGraph": {
        "com.google.common.graph.Graphs$TransposedGraph:delegate()": "/**\n* Returns the underlying graph instance.\n* @return the Graph object managed by this delegate\n*/",
        "com.google.common.graph.Graphs$TransposedGraph:<init>(com.google.common.graph.Graph)": "/**\n* Constructs a transposed graph from the given graph.\n* @param graph the original graph to transpose\n*/",
        "com.google.common.graph.Graphs$TransposedGraph:incidentEdges(java.lang.Object)": "/**\n* Retrieves incident edges for a specified node.\n* @param node the target node\n* @return set of EndpointPair representing incident edges\n*/",
        "com.google.common.graph.Graphs$TransposedGraph:predecessors(java.lang.Object)": "/**\n* Retrieves predecessor nodes by transposing the successor relationship.\n* @param node the node for which predecessors are retrieved\n* @return set of predecessor nodes\n*/",
        "com.google.common.graph.Graphs$TransposedGraph:successors(java.lang.Object)": "/**\n* Retrieves the predecessor nodes of a given node (transposed).\n* @param node the target node to find predecessors for\n* @return set of predecessor nodes\n*/",
        "com.google.common.graph.Graphs$TransposedGraph:inDegree(java.lang.Object)": "/**\n* Returns the in-degree of a node by calculating its out-degree in the transposed graph.\n* @param node the node whose in-degree is calculated\n* @return the in-degree of the specified node\n*/",
        "com.google.common.graph.Graphs$TransposedGraph:outDegree(java.lang.Object)": "/**\n* Returns the out-degree of a node by fetching its in-degree from the transposed graph.\n* @param node the target node to evaluate\n* @return the out-degree count of the specified node\n*/",
        "com.google.common.graph.Graphs$TransposedGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)": "/**\n* Checks if an edge exists between two nodes, transposing the parameters.\n* @param nodeU first node\n* @param nodeV second node\n* @return true if an edge exists, false otherwise\n*/",
        "com.google.common.graph.Graphs$TransposedGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)": "/**\n* Checks if an edge connects the given endpoints.\n* @param endpoints the EndpointPair to check connection\n* @return true if connected, false otherwise\n*/"
    },
    "com.google.common.graph.Graphs$TransposedNetwork": {
        "com.google.common.graph.Graphs$TransposedNetwork:<init>(com.google.common.graph.Network)": "/**\n* Initializes a TransposedNetwork with the given network.\n* @param network the original network to transpose\n*/",
        "com.google.common.graph.Graphs$TransposedNetwork:delegate()": "/**\n* Returns the delegated network instance.\n* @return the Network<N, E> instance being delegated\n*/",
        "com.google.common.graph.Graphs$TransposedNetwork:predecessors(java.lang.Object)": "/**\n* Retrieves the predecessors of a node by transposing its successors.\n* @param node the node for which predecessors are sought\n* @return Set of predecessor nodes\n*/",
        "com.google.common.graph.Graphs$TransposedNetwork:successors(java.lang.Object)": "/**\n* Retrieves the predecessors of a given node by transposing the graph.\n* @param node the node whose predecessors are to be fetched\n* @return a set of predecessor nodes\n*/",
        "com.google.common.graph.Graphs$TransposedNetwork:inDegree(java.lang.Object)": "/**\n* Returns the in-degree of a node by transposing the graph.\n* @param node the target node to evaluate\n* @return the in-degree count of the specified node\n*/",
        "com.google.common.graph.Graphs$TransposedNetwork:outDegree(java.lang.Object)": "/**\n* Returns the out-degree of a node via its in-degree in a transposed graph.\n* @param node the target node for which to calculate the out-degree\n* @return the out-degree count of the specified node\n*/",
        "com.google.common.graph.Graphs$TransposedNetwork:inEdges(java.lang.Object)": "/**\n* Returns the incoming edges of a node by transposing the outgoing edges.\n* @param node the target node\n* @return Set of incoming edges for the specified node\n*/",
        "com.google.common.graph.Graphs$TransposedNetwork:outEdges(java.lang.Object)": "/**\n* Retrieves the incoming edges of a specified node.\n* @param node the target node for edge retrieval\n* @return a set of incoming edges for the node\n*/",
        "com.google.common.graph.Graphs$TransposedNetwork:edgesConnecting(java.lang.Object,java.lang.Object)": "/**\n* Retrieves edges connecting two nodes, transposing their order.\n* @param nodeU first node\n* @param nodeV second node\n* @return Set of edges connecting the nodes\n*/",
        "com.google.common.graph.Graphs$TransposedNetwork:edgeConnecting(java.lang.Object,java.lang.Object)": "/**\n* Retrieves the edge connecting two nodes in transposed order.\n* @param nodeU first node\n* @param nodeV second node\n* @return Optional edge between nodeU and nodeV\n*/",
        "com.google.common.graph.Graphs$TransposedNetwork:edgeConnectingOrNull(java.lang.Object,java.lang.Object)": "/**\n* Returns the edge connecting two nodes or null if none exists.\n* @param nodeU first node, @param nodeV second node\n* @return edge instance or null if no edge connects them\n*/",
        "com.google.common.graph.Graphs$TransposedNetwork:hasEdgeConnecting(java.lang.Object,java.lang.Object)": "/**\n* Checks if an edge connects nodeU and nodeV (transposed).\n* @param nodeU first node\n* @param nodeV second node\n* @return true if an edge exists, false otherwise\n*/",
        "com.google.common.graph.Graphs$TransposedNetwork:incidentNodes(java.lang.Object)": "/**\n* Returns transposed incident nodes for a given edge.\n* @param edge the edge to find incident nodes for\n* @return EndpointPair of incident nodes in transposed order\n*/",
        "com.google.common.graph.Graphs$TransposedNetwork:edgesConnecting(com.google.common.graph.EndpointPair)": "/**\n* Retrieves edges connecting specified endpoints.\n* @param endpoints the EndpointPair to connect\n* @return Set of edges connecting the given endpoints\n*/",
        "com.google.common.graph.Graphs$TransposedNetwork:edgeConnecting(com.google.common.graph.EndpointPair)": "/**\n* Retrieves an edge connecting two nodes.\n* @param endpoints the EndpointPair of nodes\n* @return Optional edge or empty if none exists\n*/",
        "com.google.common.graph.Graphs$TransposedNetwork:edgeConnectingOrNull(com.google.common.graph.EndpointPair)": "/**\n* Returns the edge connecting the given endpoints or null if none exists.\n* @param endpoints the EndpointPair to check for a connecting edge\n* @return the connecting edge or null if not found\n*/",
        "com.google.common.graph.Graphs$TransposedNetwork:hasEdgeConnecting(com.google.common.graph.EndpointPair)": "/**\n* Checks if an edge connects the given endpoints.\n* @param endpoints the EndpointPair to check\n* @return true if an edge exists, false otherwise\n*/"
    },
    "com.google.common.graph.Graphs$TransposedValueGraph": {
        "com.google.common.graph.Graphs$TransposedValueGraph:<init>(com.google.common.graph.ValueGraph)": "/**\n* Initializes TransposedValueGraph with the given ValueGraph.\n* @param graph the original ValueGraph to transpose\n*/",
        "com.google.common.graph.Graphs$TransposedValueGraph:delegate()": "/**\n* Returns the underlying ValueGraph instance.\n* @return ValueGraph object representing the graph\n*/",
        "com.google.common.graph.Graphs$TransposedValueGraph:predecessors(java.lang.Object)": "/**\n* Retrieves predecessor nodes by transposing the successors of a given node.\n* @param node the node for which predecessors are requested\n* @return Set of predecessor nodes\n*/",
        "com.google.common.graph.Graphs$TransposedValueGraph:successors(java.lang.Object)": "/**** Returns the predecessors of a given node in the transposed graph. \n* @param node the node to find predecessors for \n* @return Set of predecessor nodes \n*/",
        "com.google.common.graph.Graphs$TransposedValueGraph:inDegree(java.lang.Object)": "/**\n* Returns the in-degree of a node by transposing the out-degree.\n* @param node the node whose in-degree is calculated\n* @return the in-degree count of the specified node\n*/",
        "com.google.common.graph.Graphs$TransposedValueGraph:outDegree(java.lang.Object)": "/**\n* Returns the out-degree of a node by fetching its in-degree from the transposed graph.\n* @param node the graph node to evaluate\n* @return the out-degree of the specified node\n*/",
        "com.google.common.graph.Graphs$TransposedValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)": "/**\n* Checks if an edge exists between two nodes, transposing the input.\n* @param nodeU first node\n* @param nodeV second node\n* @return true if an edge connects nodeU to nodeV, false otherwise\n*/",
        "com.google.common.graph.Graphs$TransposedValueGraph:edgeValue(java.lang.Object,java.lang.Object)": "/**\n* Retrieves the value of the edge between two nodes, transposing parameters.\n* @param nodeU first node\n* @param nodeV second node\n* @return Optional containing edge value or empty if no edge exists\n*/",
        "com.google.common.graph.Graphs$TransposedValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Retrieves edge value or default for specified nodes.\n* @param nodeU first node, @param nodeV second node, @param defaultValue value if not found\n* @return edge value or defaultValue if edge does not exist\n*/",
        "com.google.common.graph.Graphs$TransposedValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)": "/**\n* Checks if an edge connects the given endpoints.\n* @param endpoints the EndpointPair to check\n* @return true if an edge exists, false otherwise\n*/",
        "com.google.common.graph.Graphs$TransposedValueGraph:edgeValue(com.google.common.graph.EndpointPair)": "/**\n* Retrieves the edge value for given endpoints.\n* @param endpoints the EndpointPair to query\n* @return Optional containing edge value or empty if not present\n*/",
        "com.google.common.graph.Graphs$TransposedValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)": "/**\n* Retrieves edge value or default for given endpoints.\n* @param endpoints the EndpointPair to check\n* @param defaultValue value returned if edge not found\n* @return edge value or defaultValue if edge is absent\n*/"
    },
    "com.google.common.graph.Graphs": {
        "com.google.common.graph.Graphs:<init>()": "/**\n* Private constructor to prevent instantiation of the Graphs class.\n*/",
        "com.google.common.graph.Graphs:canTraverseWithoutReusingEdge(com.google.common.graph.Graph,java.lang.Object,java.lang.Object)": "/**\n* Determines if traversal is possible without reusing an edge.\n* @param graph the graph to traverse\n* @param nextNode the next node to visit\n* @param previousNode the last visited node, can be null\n* @return true if traversal is allowed, false otherwise\n*/",
        "com.google.common.graph.Graphs:checkNonNegative(int)": "/**\n* Validates if the value is non-negative and returns it.\n* @param value the integer to check\n* @return the validated non-negative integer\n*/",
        "com.google.common.graph.Graphs:checkPositive(int)": "/**\n* Validates if a number is positive and returns it.\n* @param value the number to check\n* @return the positive number if valid\n*/",
        "com.google.common.graph.Graphs:checkNonNegative(long)": "/**\n* Validates and returns a non-negative value.\n* @param value number to check\n* @return the non-negative value\n*/",
        "com.google.common.graph.Graphs:checkPositive(long)": "/**\n* Validates if the value is positive and returns it.\n* @param value number to check\n* @return the positive value\n*/",
        "com.google.common.graph.Graphs:transpose(com.google.common.graph.EndpointPair)": "/**\n* Transposes endpoints if ordered; returns original otherwise.\n* @param endpoints the EndpointPair to transpose\n* @return transposed EndpointPair or original if unordered\n*/",
        "com.google.common.graph.Graphs:transpose(com.google.common.graph.Graph)": "/**\n* Transposes a directed graph or returns it unchanged if undirected.\n* @param graph the original graph to transpose\n* @return TransposedGraph or original graph if undirected\n*/",
        "com.google.common.graph.Graphs:transpose(com.google.common.graph.Network)": "/**\n* Transposes a directed network or returns it unchanged if undirected.\n* @param network the original network to transpose\n* @return transposed Network or original if undirected\n*/",
        "com.google.common.graph.Graphs:transpose(com.google.common.graph.ValueGraph)": "/**\n* Transposes the given directed ValueGraph.\n* @param graph the ValueGraph to transpose\n* @return the transposed ValueGraph or the original if undirected\n*/",
        "com.google.common.graph.Graphs:hasCycle(com.google.common.graph.Graph)": "/**\n* Checks if the given graph has a cycle.\n* @param graph the graph to check for cycles\n* @return true if a cycle exists, false otherwise\n*/",
        "com.google.common.graph.Graphs:hasCycle(com.google.common.graph.Network)": "/**\n* Checks if the given network has a cycle.\n* @param network the network to check for cycles\n* @return true if a cycle exists, false otherwise\n*/",
        "com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.Network,java.lang.Iterable)": "/**\n* Creates a subgraph from the specified nodes of a given network.\n* @param network the source network\n* @param nodes the nodes to include in the subgraph\n* @return MutableNetwork representing the induced subgraph\n*/",
        "com.google.common.graph.Graphs:copyOf(com.google.common.graph.Network)": "/**\n* Creates a copy of the given network.\n* @param network the source network to copy from\n* @return a MutableNetwork copy of the original network\n*/",
        "com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.ValueGraph,java.lang.Iterable)": "/**\n* Creates a subgraph from the given nodes of the specified graph.\n* @param graph the source ValueGraph\n* @param nodes the nodes to include in the subgraph\n* @return a MutableValueGraph representing the subgraph\n*/",
        "com.google.common.graph.Graphs:copyOf(com.google.common.graph.ValueGraph)": "/**\n* Creates a copy of the given ValueGraph.\n* @param graph the source ValueGraph to copy from\n* @return a new MutableValueGraph instance\n*/",
        "com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.Graph,java.lang.Iterable)": "/**\n* Creates an induced subgraph from specified nodes.\n* @param graph the source graph\n* @param nodes nodes to include in the subgraph\n* @return a MutableGraph representing the induced subgraph\n*/",
        "com.google.common.graph.Graphs:copyOf(com.google.common.graph.Graph)": "/**\n* Creates a copy of the given graph.\n* @param graph the source graph to copy from\n* @return a new MutableGraph instance with copied nodes and edges\n*/",
        "com.google.common.graph.Graphs:reachableNodes(com.google.common.graph.Graph,java.lang.Object)": "/**\n* Retrieves reachable nodes from a given graph starting from a specified node.\n* @param graph the graph to traverse\n* @param node the starting node for traversal\n* @return ImmutableSet of reachable nodes\n*/",
        "com.google.common.graph.Graphs:transitiveClosure(com.google.common.graph.Graph)": "/**\n* Computes the transitive closure of a graph.\n* @param graph the input graph\n* @return ImmutableGraph representing the transitive closure\n*/"
    },
    "com.google.common.graph.Traverser": {
        "com.google.common.graph.Traverser:forGraph(com.google.common.graph.SuccessorsFunction)": "/**\n* Creates a Traverser for the given graph's successors function.\n* @param graph the successors function of the graph\n* @return a Traverser instance for the graph\n*/",
        "com.google.common.graph.Traverser:<init>(com.google.common.graph.SuccessorsFunction)": "/**\n* Constructs a Traverser with the given successors function.\n* @param successorFunction function to retrieve successors for nodes\n*/",
        "com.google.common.graph.Traverser:forTree(com.google.common.graph.SuccessorsFunction)": "/**\n* Creates a Traverser for a directed tree structure.\n* @param tree successors function representing the tree\n* @return Traverser instance for the provided tree\n*/",
        "com.google.common.graph.Traverser:validate(java.lang.Iterable)": "/**\n* Validates nodes and returns an immutable set of them.\n* @param startNodes iterable of nodes to validate\n* @return ImmutableSet of validated nodes\n*/",
        "com.google.common.graph.Traverser:breadthFirst(java.lang.Iterable)": "/**\n* Performs breadth-first traversal on validated nodes.\n* @param startNodes iterable of nodes to start traversal\n* @return Iterable of nodes in breadth-first order\n*/",
        "com.google.common.graph.Traverser:depthFirstPreOrder(java.lang.Iterable)": "/**\n* Performs depth-first pre-order traversal on validated nodes.\n* @param startNodes nodes to traverse\n* @return Iterable of nodes in pre-order sequence\n*/",
        "com.google.common.graph.Traverser:depthFirstPostOrder(java.lang.Iterable)": "/**\n* Performs depth-first post-order traversal on validated nodes.\n* @param startNodes nodes to traverse\n* @return Iterable of nodes in post-order sequence\n*/",
        "com.google.common.graph.Traverser:breadthFirst(java.lang.Object)": "/**\n* Initiates breadth-first traversal from a single start node.\n* @param startNode the node to begin traversal from\n* @return Iterable of nodes in breadth-first order\n*/",
        "com.google.common.graph.Traverser:depthFirstPreOrder(java.lang.Object)": "/**\n* Executes depth-first pre-order traversal starting from a single node.\n* @param startNode the node to begin traversal from\n* @return Iterable of nodes in pre-order sequence\n*/",
        "com.google.common.graph.Traverser:depthFirstPostOrder(java.lang.Object)": "/**\n* Executes depth-first post-order traversal starting from a single node.\n* @param startNode the node to begin traversal from\n* @return Iterable of nodes in post-order sequence\n*/"
    },
    "com.google.common.graph.ImmutableGraph$Builder": {
        "com.google.common.graph.ImmutableGraph$Builder:addNode(java.lang.Object)": "/**\n* Adds a node to the mutable graph and returns the builder.\n* @param node the node to be added\n* @return the Builder instance for method chaining\n*/",
        "com.google.common.graph.ImmutableGraph$Builder:putEdge(java.lang.Object,java.lang.Object)": "/**\n* Adds an edge between two nodes to the graph.\n* @param nodeU first node\n* @param nodeV second node\n* @return Builder instance for method chaining\n*/",
        "com.google.common.graph.ImmutableGraph$Builder:putEdge(com.google.common.graph.EndpointPair)": "/**\n* Adds an edge between specified endpoints to the graph.\n* @param endpoints pair of nodes defining the edge\n* @return Builder for method chaining\n*/",
        "com.google.common.graph.ImmutableGraph$Builder:<init>(com.google.common.graph.GraphBuilder)": "/**\n* Constructs a Builder from GraphBuilder, creating a stable mutable graph.\n* @param graphBuilder source GraphBuilder instance\n*/",
        "com.google.common.graph.ImmutableGraph$Builder:build()": "/**\n* Builds an ImmutableGraph from the mutableGraph.\n* @return ImmutableGraph instance created from mutableGraph\n*/"
    },
    "com.google.common.graph.ImmutableGraph": {
        "com.google.common.graph.ImmutableGraph:<init>(com.google.common.graph.BaseGraph)": "/**\n* Constructs an ImmutableGraph from a given backing graph.\n* @param backingGraph the base graph to be wrapped as immutable\n*/",
        "com.google.common.graph.ImmutableGraph:delegate()": "/**\n* Returns the backing graph instance.\n* @return BaseGraph<N> instance representing the underlying graph\n*/",
        "com.google.common.graph.ImmutableGraph:copyOf(com.google.common.graph.ImmutableGraph)": "/**\n* Returns a non-null copy of the provided graph.\n* @param graph the ImmutableGraph to be copied\n* @return the non-null ImmutableGraph\n*/",
        "com.google.common.graph.ImmutableGraph:nodes()": "/**\n* Retrieves nodes from the delegate.\n* @return Set of nodes of type N\n*/",
        "com.google.common.graph.ImmutableGraph:isDirected()": "/**\n* Delegates to check if the graph is directed.\n* @return true if directed, false otherwise\n*/",
        "com.google.common.graph.ImmutableGraph:allowsSelfLoops()": "/**\n* Delegates check for self-loop allowance in the graph.\n* @return true if self-loops are allowed, false otherwise\n*/",
        "com.google.common.graph.ImmutableGraph:nodeOrder()": "/**\n* Retrieves node order from the delegate.\n* @return ElementOrder representing the node order\n*/",
        "com.google.common.graph.ImmutableGraph:adjacentNodes(java.lang.Object)": "/**\n* Retrieves adjacent nodes for a specified node.\n* @param node the node for which adjacent nodes are requested\n* @return a set of adjacent nodes\n*/",
        "com.google.common.graph.ImmutableGraph:incidentEdges(java.lang.Object)": "/**\n* Retrieves incident edges for the specified node.\n* @param node the node for which to find incident edges\n* @return a set of EndpointPair representing the incident edges\n*/",
        "com.google.common.graph.ImmutableGraph:degree(java.lang.Object)": "/**\n* Returns the degree of the specified node.\n* @param node the node whose degree is to be calculated\n* @return degree of the node as an integer\n*/",
        "com.google.common.graph.ImmutableGraph:inDegree(java.lang.Object)": "/**\n* Returns the in-degree of the specified node.\n* @param node the node for which to find the in-degree\n* @return the in-degree as an integer\n*/",
        "com.google.common.graph.ImmutableGraph:outDegree(java.lang.Object)": "/**\n* Returns the out-degree of the specified node.\n* @param node the node for which to calculate out-degree\n* @return number of edges originating from the node\n*/",
        "com.google.common.graph.ImmutableGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)": "/**\n* Checks if an edge exists between two nodes.\n* @param nodeU first node\n* @param nodeV second node\n* @return true if an edge connects nodeU and nodeV, false otherwise\n*/",
        "com.google.common.graph.ImmutableGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)": "/**\n* Checks if an edge exists between the specified endpoints.\n* @param endpoints pair of endpoints to check for connection\n* @return true if an edge exists, false otherwise\n*/",
        "com.google.common.graph.ImmutableGraph:predecessors(java.lang.Object)": "/**\n* Retrieves predecessor nodes for the specified node.\n* @param node the target node to find predecessors for\n* @return a set of predecessor nodes\n*/",
        "com.google.common.graph.ImmutableGraph:successors(java.lang.Object)": "/**\n* Retrieves successor nodes for a given node.\n* @param node the node for which successors are retrieved\n* @return Set of successor nodes\n*/",
        "com.google.common.graph.ImmutableGraph:incidentEdgeOrder()": "/**\n* Returns a stable ordering of incident edges.\n* @return ElementOrder instance for stable edge ordering\n*/",
        "com.google.common.graph.ImmutableGraph:connectionsOf(com.google.common.graph.Graph,java.lang.Object)": "/**\n* Creates graph connections for a given node with edge presence.\n* @param graph the graph to analyze, @param node the specific node\n* @return GraphConnections instance for the node\n*/",
        "com.google.common.graph.ImmutableGraph:getNodeConnections(com.google.common.graph.Graph)": "/**\n* Retrieves connections for each node in the graph.\n* @param graph the graph to analyze\n* @return ImmutableMap of nodes to their GraphConnections\n*/",
        "com.google.common.graph.ImmutableGraph:copyOf(com.google.common.graph.Graph)": "/**\n* Creates an ImmutableGraph from a given Graph.\n* @param graph the source graph to copy\n* @return an ImmutableGraph instance\n*/"
    },
    "com.google.common.graph.ImmutableNetwork$Builder": {
        "com.google.common.graph.ImmutableNetwork$Builder:addNode(java.lang.Object)": "/**\n* Adds a node to the network and returns the builder instance.\n* @param node the node to be added\n* @return ImmutableNetwork.Builder for method chaining\n*/",
        "com.google.common.graph.ImmutableNetwork$Builder:addEdge(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Adds an edge between two nodes in the network.\n* @param nodeU first node\n* @param nodeV second node\n* @param edge edge connecting the nodes\n* @return builder for method chaining\n*/",
        "com.google.common.graph.ImmutableNetwork$Builder:addEdge(com.google.common.graph.EndpointPair,java.lang.Object)": "/**\n* Adds an edge between specified endpoints to the network.\n* @param endpoints pair of nodes defining the edge\n* @param edge the edge to be added\n* @return the builder for method chaining\n*/",
        "com.google.common.graph.ImmutableNetwork$Builder:<init>(com.google.common.graph.NetworkBuilder)": "/**\n* Initializes Builder with a MutableNetwork from the provided NetworkBuilder.\n* @param networkBuilder source for building the MutableNetwork\n*/",
        "com.google.common.graph.ImmutableNetwork$Builder:build()": "/**\n* Builds an ImmutableNetwork from a mutable network.\n* @return ImmutableNetwork instance created from mutableNetwork\n*/"
    },
    "com.google.common.graph.ImmutableNetwork": {
        "com.google.common.graph.ImmutableNetwork:sourceNodeFn(com.google.common.graph.Network)": "/**\n* Returns a function to get the source node of a given edge in the network.\n* @param network the network from which to retrieve nodes\n* @return a function mapping edges to their source nodes\n*/",
        "com.google.common.graph.ImmutableNetwork:targetNodeFn(com.google.common.graph.Network)": "/**\n* Returns a function to get the target node from a given edge in the network.\n* @param network the network to query\n* @return a function that retrieves the target node for an edge\n*/",
        "com.google.common.graph.ImmutableNetwork:adjacentNodeFn(com.google.common.graph.Network,java.lang.Object)": "/**\n* Returns a function to find adjacent nodes for a given edge in the network.\n* @param network the graph structure containing nodes and edges\n* @param node the reference node to find adjacent nodes for\n* @return Function mapping an edge to its adjacent node to the specified node\n*/",
        "com.google.common.graph.ImmutableNetwork:copyOf(com.google.common.graph.ImmutableNetwork)": "/**\n* Returns a non-null copy of the given ImmutableNetwork.\n* @param network the ImmutableNetwork to copy\n* @return the non-null ImmutableNetwork\n*/",
        "com.google.common.graph.ImmutableNetwork:asGraph()": "/**\n* Converts the current object to an ImmutableGraph.\n* @return ImmutableGraph representation of the current object\n*/",
        "com.google.common.graph.ImmutableNetwork:edgeOrder()": "/**\n* Returns the current edge order.\n* @return ElementOrder<E> representing the edge order\n*/",
        "com.google.common.graph.ImmutableNetwork:nodeOrder()": "/**\n* Returns the current node order.\n* @return ElementOrder<N> representing the node order\n*/",
        "com.google.common.graph.ImmutableNetwork:allowsSelfLoops()": "/**\n* Returns whether self-loops are permitted in the graph.\n* @return true if self-loops are allowed, false otherwise\n*/",
        "com.google.common.graph.ImmutableNetwork:allowsParallelEdges()": "/**\n* Indicates if parallel edges are permitted in the graph.\n* @return true if parallel edges are allowed, false otherwise\n*/",
        "com.google.common.graph.ImmutableNetwork:isDirected()": "/**\n* Returns whether the graph is directed.\n* @return true if directed, false otherwise\n*/",
        "com.google.common.graph.ImmutableNetwork:nodes()": "/**\n* Returns an unmodifiable set of nodes from the connection map.\n* @return Set of nodes\n*/",
        "com.google.common.graph.ImmutableNetwork:edges()": "/**\n* Returns an unmodifiable set of edges from the backing map.\n* @return Set of edges, unmodifiable and thread-safe\n*/",
        "com.google.common.graph.ImmutableNetwork:incidentNodes(java.lang.Object)": "/**\n* Retrieves incident nodes for a given edge.\n* @param edge the edge to lookup\n* @return EndpointPair of incident nodes in the network\n*/",
        "com.google.common.graph.ImmutableNetwork:incidentEdges(java.lang.Object)": "/**\n* Retrieves incident edges for a specified node.\n* @param node the node to get incident edges for\n* @return Set of edges incident to the specified node\n*/",
        "com.google.common.graph.ImmutableNetwork:adjacentNodes(java.lang.Object)": "/**\n* Retrieves valid adjacent nodes for a given node.\n* @param node the node to find adjacent nodes for\n* @return Set of valid adjacent nodes\n*/",
        "com.google.common.graph.ImmutableNetwork:edgesConnecting(java.lang.Object,java.lang.Object)": "/**\n* Retrieves edges connecting two nodes in the graph.\n* @param nodeU first node, @param nodeV second node\n* @return Set of edges connecting nodeU and nodeV\n*/",
        "com.google.common.graph.ImmutableNetwork:inEdges(java.lang.Object)": "/**\n* Retrieves in-edges for a specified node after validating connections.\n* @param node the node to retrieve in-edges for\n* @return Set of in-edges associated with the node\n*/",
        "com.google.common.graph.ImmutableNetwork:outEdges(java.lang.Object)": "/**\n* Retrieves outgoing edges for the specified node.\n* @param node the node to retrieve edges from\n* @return Set of outgoing edges associated with the node\n*/",
        "com.google.common.graph.ImmutableNetwork:successors(java.lang.Object)": "/**\n* Retrieves valid successor nodes for a given node.\n* @param node the node to find successors for\n* @return Set of valid successor nodes\n*/",
        "com.google.common.graph.ImmutableNetwork:connectionsOf(com.google.common.graph.Network,java.lang.Object)": "/**\n* Creates network connections for a specified node in a directed or undirected network.\n* @param network the network structure to analyze\n* @param node the node for which connections are created\n* @return NetworkConnections instance for the specified node\n*/",
        "com.google.common.graph.ImmutableNetwork:getNodeConnections(com.google.common.graph.Network)": "/**\n* Constructs a map of nodes to their network connections.\n* @param network the network structure to analyze\n* @return Map of nodes and their corresponding NetworkConnections\n*/",
        "com.google.common.graph.ImmutableNetwork:getEdgeToReferenceNode(com.google.common.graph.Network)": "/**\n* Maps edges to their corresponding reference nodes in a network.\n* @param network the input Network object\n* @return a Map of edges to reference nodes\n*/",
        "com.google.common.graph.ImmutableNetwork:<init>(com.google.common.graph.Network)": "/**\n* Constructs an ImmutableNetwork from an existing Network.\n* @param network source network to build the immutable version\n*/",
        "com.google.common.graph.ImmutableNetwork:copyOf(com.google.common.graph.Network)": "/**\n* Creates an ImmutableNetwork from a given Network.\n* @param network source network to copy\n* @return ImmutableNetwork instance\n*/"
    },
    "com.google.common.graph.StandardNetwork": {
        "com.google.common.graph.StandardNetwork:edgeOrder()": "/**\n* Retrieves the current edge order.\n* @return ElementOrder<E> representing the edge order\n*/",
        "com.google.common.graph.StandardNetwork:nodeOrder()": "/**\n* Retrieves the current node order.\n* @return ElementOrder<N> representing the node order\n*/",
        "com.google.common.graph.StandardNetwork:allowsSelfLoops()": "/**\n* Checks if self-loops are permitted in the graph.\n* @return true if self-loops are allowed, false otherwise\n*/",
        "com.google.common.graph.StandardNetwork:allowsParallelEdges()": "/**\n* Checks if parallel edges are allowed in the graph.\n* @return true if parallel edges are allowed, false otherwise\n*/",
        "com.google.common.graph.StandardNetwork:isDirected()": "/**\n* Checks if the graph is directed.\n* @return true if directed, false otherwise\n*/",
        "com.google.common.graph.StandardNetwork:nodes()": "/**\n* Returns an unmodifiable set of nodes from the connection map.\n* @return Set of nodes\n*/",
        "com.google.common.graph.StandardNetwork:containsNode(java.lang.Object)": "/**\n* Checks if the node exists in the connections.\n* @param node the node to check for existence\n* @return true if the node is present, false otherwise\n*/",
        "com.google.common.graph.StandardNetwork:edges()": "/**\n* Returns an unmodifiable set of edges from the backing map.\n* @return Set of edges, unmodifiable and thread-safe\n*/",
        "com.google.common.graph.StandardNetwork:containsEdge(java.lang.Object)": "/**\n* Checks if the specified edge exists in the edge-to-reference mapping.\n* @param edge the edge to check for existence\n* @return true if the edge is present, false otherwise\n*/",
        "com.google.common.graph.StandardNetwork:<init>(com.google.common.graph.NetworkBuilder,java.util.Map,java.util.Map)": "/**\n* Initializes a StandardNetwork with builder parameters and node/edge mappings.\n* @param builder configuration for the network\n* @param nodeConnections mapping of nodes to their connections\n* @param edgeToReferenceNode mapping of edges to reference nodes\n*/",
        "com.google.common.graph.StandardNetwork:checkedReferenceNode(java.lang.Object)": "/**\n* Retrieves reference node for the given edge; throws if not found.\n* @param edge the edge to lookup\n* @return the corresponding reference node\n*/",
        "com.google.common.graph.StandardNetwork:checkedConnections(java.lang.Object)": "/**\n* Retrieves connections for a given node; throws if node is not in graph.\n* @param node the node to retrieve connections for\n* @return NetworkConnections object associated with the node\n*/",
        "com.google.common.graph.StandardNetwork:incidentNodes(java.lang.Object)": "/**\n* Retrieves incident nodes for a given edge.\n* @param edge the edge to lookup\n* @return EndpointPair of incident nodes in the network\n*/",
        "com.google.common.graph.StandardNetwork:<init>(com.google.common.graph.NetworkBuilder)": "/**\n* Initializes a StandardNetwork with builder and connection mappings.\n* @param builder configuration for the network\n*/",
        "com.google.common.graph.StandardNetwork:incidentEdges(java.lang.Object)": "/**\n* Retrieves incident edges for a given node.\n* @param node the node to get incident edges for\n* @return Set of edges incident to the specified node\n*/",
        "com.google.common.graph.StandardNetwork:adjacentNodes(java.lang.Object)": "/**\n* Retrieves adjacent nodes for a given node.\n* @param node the node to find adjacent nodes for\n* @return Set of adjacent nodes\n*/",
        "com.google.common.graph.StandardNetwork:edgesConnecting(java.lang.Object,java.lang.Object)": "/**\n* Retrieves edges connecting two nodes in the graph.\n* @param nodeU first node, @param nodeV second node\n* @return Set of edges connecting nodeU and nodeV\n*/",
        "com.google.common.graph.StandardNetwork:inEdges(java.lang.Object)": "/**\n* Retrieves in-edges for a specified node after checking its connections.\n* @param node the node to retrieve in-edges for\n* @return Set of in-edges associated with the node\n*/",
        "com.google.common.graph.StandardNetwork:outEdges(java.lang.Object)": "/**\n* Retrieves outgoing edges for a given node.\n* @param node the node to retrieve edges from\n* @return Set of outgoing edges associated with the node\n*/",
        "com.google.common.graph.StandardNetwork:predecessors(java.lang.Object)": "/**\n* Retrieves the predecessors of a given node.\n* @param node the node to find predecessors for\n* @return Set of predecessors for the specified node\n*/",
        "com.google.common.graph.StandardNetwork:successors(java.lang.Object)": "/**\n* Returns successors of a given node in the graph.\n* @param node the node to find successors for\n* @return Set of successor nodes\n*/"
    },
    "com.google.common.graph.ImmutableValueGraph$Builder": {
        "com.google.common.graph.ImmutableValueGraph$Builder:addNode(java.lang.Object)": "/**\n* Adds a node to the graph and returns the builder instance.\n* @param node the node to be added\n* @return this builder for method chaining\n*/",
        "com.google.common.graph.ImmutableValueGraph$Builder:putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Adds an edge with a value between two nodes.\n* @param nodeU source node, nodeV target node, value edge value\n* @return Builder for chaining method calls\n*/",
        "com.google.common.graph.ImmutableValueGraph$Builder:putEdgeValue(com.google.common.graph.EndpointPair,java.lang.Object)": "/**\n* Adds an edge value to the graph and returns the builder.\n* @param endpoints pair of nodes defining the edge\n* @param value value to associate with the edge\n* @return this builder for method chaining\n*/",
        "com.google.common.graph.ImmutableValueGraph$Builder:<init>(com.google.common.graph.ValueGraphBuilder)": "/**\n* Constructs a Builder using a copy of the given ValueGraphBuilder.\n* @param graphBuilder source for the mutable value graph\n*/",
        "com.google.common.graph.ImmutableValueGraph$Builder:build()": "/**\n* Constructs an ImmutableValueGraph from a mutable source graph.\n* @return ImmutableValueGraph instance created from mutableValueGraph\n*/"
    },
    "com.google.common.graph.StandardValueGraph": {
        "com.google.common.graph.StandardValueGraph:nodeOrder()": "/**\n* Retrieves the current node order.\n* @return ElementOrder instance representing the node order\n*/",
        "com.google.common.graph.StandardValueGraph:allowsSelfLoops()": "/**\n* Checks if self-loops are permitted in the graph.\n* @return true if self-loops are allowed, false otherwise\n*/",
        "com.google.common.graph.StandardValueGraph:isDirected()": "/**\n* Checks if the graph is directed.\n* @return true if directed, false otherwise\n*/",
        "com.google.common.graph.StandardValueGraph:nodes()": "/**\n* Returns an unmodifiable set of nodes from the connection map.\n* @return Set of nodes\n*/",
        "com.google.common.graph.StandardValueGraph:containsNode(java.lang.Object)": "/**\n* Checks if the specified node is present in connections.\n* @param node the node to check for presence\n* @return true if node exists, false otherwise\n*/",
        "com.google.common.graph.StandardValueGraph:edgeCount()": "/**\n* Returns the number of edges in the graph.\n* @return long representing the edge count\n*/",
        "com.google.common.graph.StandardValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder,java.util.Map,long)": "/**\n* Constructs a StandardValueGraph with specified properties and connections.\n* @param builder graph properties builder\n* @param nodeConnections map of node connections\n* @param edgeCount non-negative count of edges\n*/",
        "com.google.common.graph.StandardValueGraph:checkedConnections(java.lang.Object)": "/**\n* Retrieves connections for a specified node; throws if node is absent.\n* @param node the node to retrieve connections for\n* @return GraphConnections object for the node\n*/",
        "com.google.common.graph.StandardValueGraph:hasEdgeConnectingInternal(java.lang.Object,java.lang.Object)": "/**\n* Checks if there is an edge between two nodes in the graph.\n* @param nodeU first node\n* @param nodeV second node\n* @return true if an edge exists, false otherwise\n*/",
        "com.google.common.graph.StandardValueGraph:edgeValueOrDefaultInternal(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Retrieves edge value between nodes or returns default if not present.\n* @param nodeU first node, nodeV second node, defaultValue fallback value if not found\n* @return edge value or defaultValue if edge does not exist\n*/",
        "com.google.common.graph.StandardValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder)": "/**\n* Constructs a StandardValueGraph using a builder and node connections map.\n* @param builder graph properties builder\n*/",
        "com.google.common.graph.StandardValueGraph:adjacentNodes(java.lang.Object)": "/**\n* Retrieves adjacent nodes for a given node.\n* @param node the node to find adjacent nodes for\n* @return Set of adjacent nodes\n*/",
        "com.google.common.graph.StandardValueGraph:predecessors(java.lang.Object)": "/**\n* Retrieves predecessors of a specified node.\n* @param node the node to find predecessors for\n* @return Set of predecessor nodes\n*/",
        "com.google.common.graph.StandardValueGraph:successors(java.lang.Object)": "/**\n* Retrieves successors of a specified node.\n* @param node the node to find successors for\n* @return Set of successors for the given node\n*/",
        "com.google.common.graph.StandardValueGraph:incidentEdges(java.lang.Object)": "/**\n* Retrieves incident edges for a specified node.\n* @param node the node to find incident edges for\n* @return a set of EndpointPair objects representing incident edges\n*/",
        "com.google.common.graph.StandardValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)": "/**\n* Checks if there is an edge between two nodes.\n* @param nodeU first node, must not be null\n* @param nodeV second node, must not be null\n* @return true if an edge exists, false otherwise\n*/",
        "com.google.common.graph.StandardValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)": "/**\n* Checks if there is an edge between two endpoints in a graph.\n* @param endpoints pair of nodes to check for connection\n* @return true if an edge exists, false otherwise\n*/",
        "com.google.common.graph.StandardValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Retrieves edge value between nodes or returns default if not present.\n* @param nodeU first node, nodeV second node, defaultValue fallback value if not found\n* @return edge value or defaultValue if edge does not exist\n*/",
        "com.google.common.graph.StandardValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)": "/**\n* Retrieves edge value for given endpoints or returns default if not present.\n* @param endpoints pair of nodes to check for an edge\n* @param defaultValue fallback value if edge does not exist\n* @return edge value or defaultValue if edge is absent\n*/"
    },
    "com.google.common.graph.MapIteratorCache": {
        "com.google.common.graph.MapIteratorCache:clearCache()": "/**\n* Clears the cache by setting cacheEntry to null.\n*/",
        "com.google.common.graph.MapIteratorCache:getIfCached(java.lang.Object)": "/**\n* Retrieves cached value by key if present.\n* @param key the key to look up in the cache\n* @return cached value or null if not found\n*/",
        "com.google.common.graph.MapIteratorCache:unmodifiableKeySet()": "/**\n* Returns an unmodifiable view of the key set from the backing map.\n* @return Set of keys, unmodifiable and thread-safe\n*/",
        "com.google.common.graph.MapIteratorCache:<init>(java.util.Map)": "/**\n* Initializes MapIteratorCache with a non-null backing map.\n* @param backingMap the map to be used for caching\n*/",
        "com.google.common.graph.MapIteratorCache:getWithoutCaching(java.lang.Object)": "/**\n* Retrieves value from the backing map without caching.\n* @param key the key to look up in the map\n* @return the value associated with the key or null if not found\n*/",
        "com.google.common.graph.MapIteratorCache:put(java.lang.Object,java.lang.Object)": "/**\n* Inserts a key-value pair into the map after validating inputs and clearing the cache.\n* @param key the key to insert\n* @param value the value associated with the key\n* @return previous value associated with the key or null if none\n*/",
        "com.google.common.graph.MapIteratorCache:remove(java.lang.Object)": "/**\n* Removes the entry for the specified key and clears the cache.\n* @param key the key of the entry to remove\n* @return the value associated with the key, or null if not found\n*/",
        "com.google.common.graph.MapIteratorCache:clear()": "/**\n* Clears the cache and backing map.\n*/",
        "com.google.common.graph.MapIteratorCache:containsKey(java.lang.Object)": "/**\n* Checks if the key exists in cache or backing map.\n* @param key the key to check for existence\n* @return true if key is present, false otherwise\n*/",
        "com.google.common.graph.MapIteratorCache:get(java.lang.Object)": "/**\n* Retrieves value by key, checking cache first, then the backing map.\n* @param key the key to look up\n* @return cached value or null if not found\n*/"
    },
    "com.google.common.graph.MapRetrievalCache$CacheEntry": {
        "com.google.common.graph.MapRetrievalCache$CacheEntry:<init>(java.lang.Object,java.lang.Object)": "/**\n* Constructs a CacheEntry with specified key and value.\n* @param key the entry's key\n* @param value the entry's value\n*/"
    },
    "com.google.common.graph.MapRetrievalCache": {
        "com.google.common.graph.MapRetrievalCache:addToCache(com.google.common.graph.MapRetrievalCache$CacheEntry)": "/**\n* Adds a new cache entry, replacing the second entry with the first.\n* @param entry the CacheEntry to be added\n*/",
        "com.google.common.graph.MapRetrievalCache:clearCache()": "/**\n* Clears the cache and resets cacheEntry1 and cacheEntry2 to null.\n*/",
        "com.google.common.graph.MapRetrievalCache:getIfCached(java.lang.Object)": "/**\n* Retrieves cached value by key; adds to cache if found in second entry.\n* @param key the key to look up in the cache\n* @return cached value or null if not found\n*/",
        "com.google.common.graph.MapRetrievalCache:addToCache(java.lang.Object,java.lang.Object)": "/**\n* Adds a key-value pair to the cache.\n* @param key the key to be cached\n* @param value the value associated with the key\n*/",
        "com.google.common.graph.MapRetrievalCache:<init>(java.util.Map)": "/**\n* Initializes MapRetrievalCache with a non-null backing map.\n* @param backingMap the map to be used for caching\n*/",
        "com.google.common.graph.MapRetrievalCache:get(java.lang.Object)": "/**\n* Retrieves value by key, caching it if fetched without cache.\n* @param key the key to look up\n* @return cached value or null if not found\n*/"
    },
    "com.google.common.graph.MultiEdgesConnecting": {
        "com.google.common.graph.MultiEdgesConnecting:iterator()": "/**\n* Returns an iterator over elements matching the target node.\n* @return UnmodifiableIterator of elements or end of data if none found\n*/",
        "com.google.common.graph.MultiEdgesConnecting:contains(java.lang.Object)": "/**\n* Checks if the specified edge connects to the target node.\n* @param edge the edge to check for connection\n* @return true if edge connects to target node, false otherwise\n*/",
        "com.google.common.graph.MultiEdgesConnecting:<init>(java.util.Map,java.lang.Object)": "/**\n* Initializes MultiEdgesConnecting with edge map and target node.\n* @param outEdgeToNode mapping of edges to nodes\n* @param targetNode the target node to connect\n*/"
    },
    "com.google.common.graph.NetworkBuilder": {
        "com.google.common.graph.NetworkBuilder:allowsParallelEdges(boolean)": "/**\n* Sets whether parallel edges are allowed in the network.\n* @param allowsParallelEdges true to allow, false to disallow\n* @return the updated NetworkBuilder instance\n*/",
        "com.google.common.graph.NetworkBuilder:allowsSelfLoops(boolean)": "/**\n* Sets whether self-loops are allowed in the network.\n* @param allowsSelfLoops true to allow self-loops, false otherwise\n* @return the current NetworkBuilder instance\n*/",
        "com.google.common.graph.NetworkBuilder:cast()": "/**\n* Casts the current instance to NetworkBuilder of specified types.\n* @return casted NetworkBuilder instance\n*/",
        "com.google.common.graph.NetworkBuilder:nodeOrder(com.google.common.graph.ElementOrder)": "/**\n* Creates a new NetworkBuilder with specified node order.\n* @param nodeOrder order of nodes in the network\n* @return a new NetworkBuilder instance\n*/",
        "com.google.common.graph.NetworkBuilder:edgeOrder(com.google.common.graph.ElementOrder)": "/**\n* Sets the edge order for the network builder.\n* @param edgeOrder specifies the order of edges\n* @return a new NetworkBuilder with the specified edge order\n*/",
        "com.google.common.graph.NetworkBuilder:expectedNodeCount(int)": "/**** Sets the expected node count and returns the builder instance. \n* @param expectedNodeCount the desired number of nodes \n* @return NetworkBuilder instance for chaining \n*/",
        "com.google.common.graph.NetworkBuilder:expectedEdgeCount(int)": "/****\n* Sets the expected edge count after validating it's non-negative.\n* @param expectedEdgeCount the desired number of edges\n* @return the updated NetworkBuilder instance\n*/",
        "com.google.common.graph.NetworkBuilder:<init>(boolean)": "/**\n* Constructs a NetworkBuilder with directed graph setting.\n* @param directed true for directed graph, false for undirected\n*/",
        "com.google.common.graph.NetworkBuilder:directed()": "/**\n* Creates a directed NetworkBuilder instance.\n* @return NetworkBuilder with directed graph setting\n*/",
        "com.google.common.graph.NetworkBuilder:undirected()": "/**\n* Creates an undirected NetworkBuilder instance.\n* @return NetworkBuilder configured for undirected graph\n*/",
        "com.google.common.graph.NetworkBuilder:from(com.google.common.graph.Network)": "/**\n* Creates a NetworkBuilder from an existing network.\n* @param network the source network to build from\n* @return a new NetworkBuilder instance configured with network properties\n*/",
        "com.google.common.graph.NetworkBuilder:build()": "/**\n* Builds and returns a MutableNetwork using the current configuration.\n* @return MutableNetwork instance based on the builder's settings\n*/",
        "com.google.common.graph.NetworkBuilder:immutable()": "/**\n* Creates an ImmutableNetwork builder from the casted NetworkBuilder.\n* @return ImmutableNetwork.Builder instance\n*/"
    },
    "com.google.common.graph.Traverser$Traversal": {
        "com.google.common.graph.Traverser$Traversal:inGraph(com.google.common.graph.SuccessorsFunction)": "/**\n* Creates a traversal for graph nodes using successors function.\n* @param graph defines node successors\n* @return Traversal object for iterating over nodes\n*/",
        "com.google.common.graph.Traverser$Traversal:postOrder(java.util.Iterator)": "/**\n* Iterates nodes in post-order starting from given nodes.\n* @param startNodes initial nodes to traverse\n* @return Iterator of nodes in post-order sequence\n*/",
        "com.google.common.graph.Traverser$Traversal:<init>(com.google.common.graph.SuccessorsFunction)": "/**\n* Initializes Traversal with a specified successors function.\n* @param successorFunction function to retrieve successors of a node\n*/",
        "com.google.common.graph.Traverser$Traversal:topDown(java.util.Iterator,com.google.common.graph.Traverser$InsertionOrder)": "/**\n* Traverses nodes in a specified order, returning an iterator of nodes.\n* @param startNodes initial nodes to traverse\n* @param order order of node insertion into the traversal\n* @return Iterator of nodes in the specified traversal order\n*/",
        "com.google.common.graph.Traverser$Traversal:breadthFirst(java.util.Iterator)": "/**\n* Performs breadth-first traversal of nodes.\n* @param startNodes initial nodes to traverse\n* @return Iterator of nodes in breadth-first order\n*/",
        "com.google.common.graph.Traverser$Traversal:preOrder(java.util.Iterator)": "/**\n* Performs a pre-order traversal of nodes.\n* @param startNodes initial nodes to traverse\n* @return Iterator of nodes in pre-order sequence\n*/",
        "com.google.common.graph.Traverser$Traversal:inTree(com.google.common.graph.SuccessorsFunction)": "/**\n* Creates a Traversal object for tree traversal.\n* @param tree function to retrieve successors of a node\n* @return Traversal instance for navigating the tree\n*/"
    },
    "com.google.common.graph.Traverser$InsertionOrder$1": {
        "com.google.common.graph.Traverser$InsertionOrder$1:insertInto(java.util.Deque,java.lang.Object)": "/**\n* Inserts a value into the provided deque.\n* @param deque the Deque to insert into\n* @param value the value to insert\n*/"
    },
    "com.google.common.graph.Traverser$InsertionOrder$2": {
        "com.google.common.graph.Traverser$InsertionOrder$2:insertInto(java.util.Deque,java.lang.Object)": "/**\n* Inserts a value into the specified deque.\n* @param deque the deque to insert into\n* @param value the value to be inserted\n*/"
    },
    "com.google.common.graph.Traverser$Traversal$1": {
        "com.google.common.graph.Traverser$Traversal$1:visitNext(java.util.Deque)": "/**\n* Visits the next node in the horizon deque.\n* @param horizon a deque of iterators to traverse\n* @return the next node or null if none exists\n*/"
    },
    "com.google.common.graph.UndirectedGraphConnections": {
        "com.google.common.graph.UndirectedGraphConnections:adjacentNodes()": "/**\n* Returns an unmodifiable set of adjacent nodes.\n* @return Set of adjacent node keys\n*/",
        "com.google.common.graph.UndirectedGraphConnections:value(java.lang.Object)": "/**\n* Retrieves the value associated with the given node.\n* @param node the node whose value is to be fetched\n* @return value associated with the node or null if not found\n*/",
        "com.google.common.graph.UndirectedGraphConnections:removeSuccessor(java.lang.Object)": "/**\n* Removes the successor node and returns its value.\n* @param node the node whose successor value is to be removed\n* @return value of the removed node or null if not found\n*/",
        "com.google.common.graph.UndirectedGraphConnections:addSuccessor(java.lang.Object,java.lang.Object)": "/**\n* Adds a successor node with a given value.\n* @param node the successor node to add\n* @param value the value associated with the node\n* @return previous value associated with the node or null if none\n*/",
        "com.google.common.graph.UndirectedGraphConnections:<init>(java.util.Map)": "/**\n* Constructs an UndirectedGraphConnections with adjacent node values.\n* @param adjacentNodeValues map of adjacent nodes and their values\n*/",
        "com.google.common.graph.UndirectedGraphConnections:predecessors()": "/**\n* Retrieves the set of predecessor nodes.\n* @return Set of adjacent node keys representing predecessors\n*/",
        "com.google.common.graph.UndirectedGraphConnections:successors()": "/**\n* Returns the set of successor nodes.\n* @return unmodifiable set of adjacent node keys\n*/",
        "com.google.common.graph.UndirectedGraphConnections:removePredecessor(java.lang.Object)": "/**\n* Removes the predecessor node by invoking removeSuccessor.\n* @param node the node whose predecessor is to be removed\n*/",
        "com.google.common.graph.UndirectedGraphConnections:addPredecessor(java.lang.Object,java.lang.Object)": "/**\n* Adds a predecessor node with a given value.\n* @param node the predecessor node to add\n* @param value the value associated with the node\n*/",
        "com.google.common.graph.UndirectedGraphConnections:incidentEdgeIterator(java.lang.Object)": "/**\n* Returns an iterator of incident edges for a given node.\n* @param thisNode the node for which incident edges are retrieved\n* @return Iterator of EndpointPair representing incident edges\n*/",
        "com.google.common.graph.UndirectedGraphConnections:of(com.google.common.graph.ElementOrder)": "/**\n* Creates UndirectedGraphConnections based on edge order type.\n* @param incidentEdgeOrder defines the order of incident edges\n* @return UndirectedGraphConnections instance\n*/",
        "com.google.common.graph.UndirectedGraphConnections:ofImmutable(java.util.Map)": "/**\n* Creates an UndirectedGraphConnections from an immutable map of adjacent nodes.\n* @param adjacentNodeValues map of adjacent nodes and their values\n* @return UndirectedGraphConnections instance\n*/"
    },
    "com.google.common.graph.UndirectedMultiNetworkConnections": {
        "com.google.common.graph.UndirectedMultiNetworkConnections:getReference(java.lang.ref.Reference)": "/**\n* Retrieves the referenced object or null if reference is null.\n* @param reference the Reference object to dereference\n* @return the referenced object or null\n*/",
        "com.google.common.graph.UndirectedMultiNetworkConnections:edgesConnecting(java.lang.Object)": "/**\n* Retrieves edges connecting to a specified node.\n* @param node the node for which to find connecting edges\n* @return a set of edges connected to the node\n*/",
        "com.google.common.graph.UndirectedMultiNetworkConnections:removeOutEdge(java.lang.Object)": "/**\n* Removes an outgoing edge and updates adjacent nodes.\n* @param edge the outgoing edge to be removed\n* @return the previous node associated with the edge\n*/",
        "com.google.common.graph.UndirectedMultiNetworkConnections:<init>(java.util.Map)": "/**\n* Constructs an UndirectedMultiNetworkConnections with given edge-to-node mapping.\n* @param incidentEdges mapping of edges to nodes\n*/",
        "com.google.common.graph.UndirectedMultiNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)": "/**\n* Adds an outgoing edge and updates adjacent nodes.\n* @param edge the edge to add\n* @param node the node associated with the edge\n*/",
        "com.google.common.graph.UndirectedMultiNetworkConnections:removeInEdge(java.lang.Object,boolean)": "/**\n* Removes an incoming edge; returns previous node or null if self-loop.\n* @param edge the incoming edge to be removed\n* @param isSelfLoop indicates if the edge is a self-loop\n* @return previous node associated with the edge or null if self-loop\n*/",
        "com.google.common.graph.UndirectedMultiNetworkConnections:of()": "/**\n* Creates an UndirectedMultiNetworkConnections instance with default settings.\n* @return new UndirectedMultiNetworkConnections object\n*/",
        "com.google.common.graph.UndirectedMultiNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)": "/**\n* Adds an incoming edge unless it's a self-loop.\n* @param edge the edge to add\n* @param node the node associated with the edge\n* @param isSelfLoop indicates if the edge is a self-loop\n*/",
        "com.google.common.graph.UndirectedMultiNetworkConnections:adjacentNodesMultiset()": "/**\n* Retrieves or creates a multiset of adjacent nodes.\n* @return Multiset of adjacent nodes\n*/",
        "com.google.common.graph.UndirectedMultiNetworkConnections:adjacentNodes()": "/**\n* Returns an unmodifiable set of adjacent nodes.\n* @return Set of unique adjacent nodes\n*/",
        "com.google.common.graph.UndirectedMultiNetworkConnections:ofImmutable(java.util.Map)": "/**\n* Creates an UndirectedMultiNetworkConnections from an immutable edge-to-node mapping.\n* @param incidentEdges mapping of edges to nodes\n* @return UndirectedMultiNetworkConnections instance\n*/"
    },
    "com.google.common.graph.UndirectedNetworkConnections": {
        "com.google.common.graph.UndirectedNetworkConnections:adjacentNodes()": "/**\n* Returns an unmodifiable set of adjacent nodes from the incident edge map.\n* @return Set of adjacent nodes\n*/",
        "com.google.common.graph.UndirectedNetworkConnections:<init>(java.util.Map)": "/**\n* Initializes UndirectedNetworkConnections with an edge map.\n* @param incidentEdgeMap mapping of edges to nodes\n*/",
        "com.google.common.graph.UndirectedNetworkConnections:edgesConnecting(java.lang.Object)": "/**\n* Retrieves edges connected to a specified node.\n* @param node the node for which connected edges are retrieved\n* @return a set of edges connected to the node\n*/",
        "com.google.common.graph.UndirectedNetworkConnections:of()": "/**\n* Creates an instance of UndirectedNetworkConnections with an empty edge map.\n* @return UndirectedNetworkConnections object\n*/",
        "com.google.common.graph.UndirectedNetworkConnections:ofImmutable(java.util.Map)": "/****\n* Creates an UndirectedNetworkConnections from an immutable edge map.\n* @param incidentEdges mapping of edges to nodes\n* @return UndirectedNetworkConnections instance\n*/"
    },
    "com.google.common.graph.ValueGraphBuilder": {
        "com.google.common.graph.ValueGraphBuilder:allowsSelfLoops(boolean)": "/**\n* Sets whether self-loops are allowed in the graph.\n* @param allowsSelfLoops true to allow self-loops, false otherwise\n* @return the updated ValueGraphBuilder instance\n*/",
        "com.google.common.graph.ValueGraphBuilder:cast()": "/**\n* Casts current instance to ValueGraphBuilder with specified generic types.\n* @return casted ValueGraphBuilder instance\n*/",
        "com.google.common.graph.ValueGraphBuilder:nodeOrder(com.google.common.graph.ElementOrder)": "/**\n* Sets the node order for the graph builder.\n* @param nodeOrder specifies the order of nodes\n* @return a new ValueGraphBuilder with updated node order\n*/",
        "com.google.common.graph.ValueGraphBuilder:incidentEdgeOrder(com.google.common.graph.ElementOrder)": "/**\n* Sets incident edge order; supports unordered and stable types only.\n* @param incidentEdgeOrder specifies the edge order\n* @return updated ValueGraphBuilder instance\n*/",
        "com.google.common.graph.ValueGraphBuilder:expectedNodeCount(int)": "/**** Sets the expected node count for the graph. \n* @param expectedNodeCount non-negative expected count \n* @return ValueGraphBuilder instance for chaining \n*/",
        "com.google.common.graph.ValueGraphBuilder:<init>(boolean)": "/**\n* Constructs a ValueGraphBuilder with a specified graph direction.\n* @param directed true for directed graph, false for undirected\n*/",
        "com.google.common.graph.ValueGraphBuilder:directed()": "/**\n* Creates a directed ValueGraphBuilder instance.\n* @return ValueGraphBuilder for directed graphs\n*/",
        "com.google.common.graph.ValueGraphBuilder:undirected()": "/**\n* Creates a ValueGraphBuilder for an undirected graph.\n* @return ValueGraphBuilder instance configured for undirected graphs\n*/",
        "com.google.common.graph.ValueGraphBuilder:from(com.google.common.graph.ValueGraph)": "/**\n* Creates a ValueGraphBuilder from an existing ValueGraph.\n* @param graph the source ValueGraph to build from\n* @return a new ValueGraphBuilder configured with the graph's properties\n*/",
        "com.google.common.graph.ValueGraphBuilder:copy()": "/**\n* Creates a copy of the current ValueGraphBuilder instance.\n* @return a new ValueGraphBuilder with the same properties\n*/",
        "com.google.common.graph.ValueGraphBuilder:build()": "/**\n* Builds a MutableValueGraph using the current builder properties.\n* @return a new MutableValueGraph instance\n*/",
        "com.google.common.graph.ValueGraphBuilder:immutable()": "/**\n* Creates an ImmutableValueGraph.Builder from the current instance.\n* @return ImmutableValueGraph.Builder for the graph\n*/"
    },
    "com.google.common.hash.AbstractByteHasher": {
        "com.google.common.hash.AbstractByteHasher:update(byte[],int,int)": "/**\n* Updates the state with a byte array segment.\n* @param b byte array to update from\n* @param off starting index in the array\n* @param len number of bytes to process\n*/",
        "com.google.common.hash.AbstractByteHasher:putByte(byte)": "/**\n* Updates the hasher with a byte and returns the hasher instance.\n* @param b the byte to be added\n* @return the updated Hasher instance\n*/",
        "com.google.common.hash.AbstractByteHasher:update(byte[])": "/**\n* Updates the state with the entire byte array.\n* @param b byte array to update from\n*/",
        "com.google.common.hash.AbstractByteHasher:update(java.nio.ByteBuffer)": "/**\n* Updates buffer content; handles array or direct buffer cases.\n* @param b ByteBuffer to be processed\n*/",
        "com.google.common.hash.AbstractByteHasher:update(int)": "/**\n* Updates the Hasher state with byte data.\n* @param bytes number of bytes to process\n* @return this Hasher instance\n*/",
        "com.google.common.hash.AbstractByteHasher:putBytes(byte[])": "/**\n* Validates and updates the hasher with the provided byte array.\n* @param bytes input byte array to process\n* @return this Hasher instance for chaining\n*/",
        "com.google.common.hash.AbstractByteHasher:putBytes(java.nio.ByteBuffer)": "/**\n* Processes a ByteBuffer and returns the Hasher instance.\n* @param bytes ByteBuffer to be processed\n* @return Hasher instance for method chaining\n*/",
        "com.google.common.hash.AbstractByteHasher:putShort(short)": "/**\n* Inserts a short value and updates the Hasher state.\n* @param s short value to insert\n* @return this Hasher instance for chaining\n*/",
        "com.google.common.hash.AbstractByteHasher:putInt(int)": "/**\n* Inserts an integer into the Hasher and updates its state.\n* @param i the integer to insert\n* @return this Hasher instance\n*/",
        "com.google.common.hash.AbstractByteHasher:putLong(long)": "/**\n* Adds a long value to the Hasher and updates its state.\n* @param l long value to be added\n* @return this Hasher instance for method chaining\n*/",
        "com.google.common.hash.AbstractByteHasher:putChar(char)": "/**\n* Adds a character to the Hasher and updates its state.\n* @param c character to add\n* @return updated Hasher instance\n*/",
        "com.google.common.hash.AbstractByteHasher:putBytes(byte[],int,int)": "/**\n* Validates and updates the hasher with a byte array segment.\n* @param bytes byte array to process, @param off start index, @param len number of bytes\n* @return Hasher instance for chaining\n*/"
    },
    "com.google.common.hash.Java8Compatibility": {
        "com.google.common.hash.Java8Compatibility:position(java.nio.Buffer,int)": "/**\n* Sets the position of the given buffer.\n* @param b the buffer to modify\n* @param position the new position index to set\n*/",
        "com.google.common.hash.Java8Compatibility:clear(java.nio.Buffer)": "/**\n* Clears the contents of the given Buffer.\n* @param b the Buffer to be cleared\n*/",
        "com.google.common.hash.Java8Compatibility:limit(java.nio.Buffer,int)": "/**\n* Sets the limit of the given buffer.\n* @param b the buffer to limit\n* @param limit the new limit value\n*/",
        "com.google.common.hash.Java8Compatibility:flip(java.nio.Buffer)": "/**\n* Flips the buffer, setting the limit to the current position and the position to zero.\n* @param b the Buffer to flip\n*/",
        "com.google.common.hash.Java8Compatibility:<init>()": "/**\n* Private constructor for Java8Compatibility class to prevent instantiation.\n*/"
    },
    "com.google.common.hash.AbstractCompositeHashFunction": {
        "com.google.common.hash.AbstractCompositeHashFunction:fromHashers(com.google.common.hash.Hasher[])": "/**\n* Creates a composite Hasher from an array of Hashers.\n* @param hashers array of Hasher instances\n* @return a new Hasher that delegates to the provided hashers\n*/",
        "com.google.common.hash.AbstractCompositeHashFunction:newHasher()": "/**\n* Creates a new Hasher by aggregating individual hashers from functions array.\n* @return composite Hasher instance\n*/",
        "com.google.common.hash.AbstractCompositeHashFunction:newHasher(int)": "/**\n* Creates a new Hasher with the specified expected input size.\n* @param expectedInputSize non-negative size for input data\n* @return composite Hasher from individual Hashers\n*/"
    },
    "com.google.common.hash.AbstractHashFunction": {
        "com.google.common.hash.AbstractHashFunction:hashObject(java.lang.Object,com.google.common.hash.Funnel)": "/**\n* Computes the hash code for the given object using the specified funnel.\n* @param instance object to hash, may be null\n* @param funnel function to extract data from the object\n* @return HashCode representing the object's hash\n*/",
        "com.google.common.hash.AbstractHashFunction:hashString(java.lang.CharSequence,java.nio.charset.Charset)": "/**\n* Computes hash code for the given input string using specified charset.\n* @param input string to hash\n* @param charset character set for encoding\n* @return HashCode object representing the hash\n*/",
        "com.google.common.hash.AbstractHashFunction:newHasher(int)": "/**\n* Creates a new Hasher with specified expected input size.\n* @param expectedInputSize non-negative expected size for the input\n* @return Hasher instance\n*/",
        "com.google.common.hash.AbstractHashFunction:hashUnencodedChars(java.lang.CharSequence)": "/**\n* Computes hash code for unencoded characters from input.\n* @param input character sequence to hash\n* @return HashCode object representing the hash\n*/",
        "com.google.common.hash.AbstractHashFunction:hashInt(int)": "/**\n* Generates a HashCode for an integer input.\n* @param input integer to be hashed\n* @return HashCode instance of the hashed input\n*/",
        "com.google.common.hash.AbstractHashFunction:hashBytes(java.nio.ByteBuffer)": "/**\n* Computes hash code from byte buffer input.\n* @param input ByteBuffer containing data to hash\n* @return HashCode object representing the computed hash\n*/",
        "com.google.common.hash.AbstractHashFunction:hashLong(long)": "/**\n* Generates a HashCode from a long input.\n* @param input the long value to hash\n* @return HashCode instance generated from the input\n*/",
        "com.google.common.hash.AbstractHashFunction:hashBytes(byte[],int,int)": "/**\n* Computes hash code for a byte array segment.\n* @param input byte array to hash, @param off start index, @param len length to hash\n* @return HashCode of the specified byte segment\n*/",
        "com.google.common.hash.AbstractHashFunction:hashBytes(byte[])": "/**\n* Computes hash code for the entire byte array.\n* @param input byte array to hash\n* @return HashCode of the input byte array\n*/"
    },
    "com.google.common.hash.AbstractHasher": {
        "com.google.common.hash.AbstractHasher:putBoolean(boolean)": "/**\n* Converts boolean to byte and adds it to the hasher.\n* @param b boolean value to convert\n* @return updated Hasher instance\n*/",
        "com.google.common.hash.AbstractHasher:putLong(long)": "/**\n* Inserts a long value into the hasher as bytes.\n* @param l the long value to be inserted\n* @return the current Hasher instance\n*/",
        "com.google.common.hash.AbstractHasher:putInt(int)": "/**\n* Inserts an integer as four bytes into the hasher.\n* @param i the integer to be added\n* @return this Hasher instance for chaining\n*/",
        "com.google.common.hash.AbstractHasher:putChar(char)": "/**\n* Adds a character to the hasher by storing its bytes.\n* @param c character to be added\n* @return this Hasher instance for method chaining\n*/",
        "com.google.common.hash.AbstractHasher:putShort(short)": "/**\n* Adds a short value to the hasher.\n* @param s the short value to add\n* @return the current Hasher instance\n*/",
        "com.google.common.hash.AbstractHasher:putObject(java.lang.Object,com.google.common.hash.Funnel)": "/**\n* Adds an object to the hasher using a specified funnel.\n* @param instance the object to add; may be null\n* @param funnel the funnel to process the object\n* @return the current Hasher instance\n*/",
        "com.google.common.hash.AbstractHasher:putDouble(double)": "/**\n* Inserts a double as bytes after converting to long.\n* @param d the double value to be inserted\n* @return current Hasher instance\n*/",
        "com.google.common.hash.AbstractHasher:putFloat(float)": "/**\n* Converts a float to an int and inserts it into the hasher.\n* @param f the float to be added\n* @return this Hasher instance for chaining\n*/",
        "com.google.common.hash.AbstractHasher:putUnencodedChars(java.lang.CharSequence)": "/**\n* Adds each character from the CharSequence to the hasher.\n* @param charSequence sequence of characters to add\n* @return this Hasher instance for method chaining\n*/",
        "com.google.common.hash.AbstractHasher:putBytes(byte[],int,int)": "/**\n* Puts a byte array into the hasher from specified offset and length.\n* @param bytes byte array to process, @param off starting index, @param len number of bytes\n* @return this Hasher instance for chaining\n*/",
        "com.google.common.hash.AbstractHasher:putBytes(byte[])": "/**\n* Puts the entire byte array into the hasher.\n* @param bytes byte array to process\n* @return this Hasher instance for chaining\n*/",
        "com.google.common.hash.AbstractHasher:putBytes(java.nio.ByteBuffer)": "/**\n* Processes bytes from a ByteBuffer and returns the Hasher instance.\n* @param b ByteBuffer containing bytes to process\n* @return this Hasher instance for chaining\n*/",
        "com.google.common.hash.AbstractHasher:putString(java.lang.CharSequence,java.nio.charset.Charset)": "/**\n* Converts a CharSequence to bytes using a charset and puts them into the hasher.\n* @param charSequence input string to convert\n* @param charset character encoding to use\n* @return this Hasher instance for chaining\n*/"
    },
    "com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream": {
        "com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream:<init>(int)": "/**\n* Constructs an ExposedByteArrayOutputStream with a specified initial size.\n* @param expectedInputSize expected size of input data\n*/",
        "com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream:write(java.nio.ByteBuffer)": "/**\n* Writes bytes from ByteBuffer to internal buffer, expanding if necessary.\n* @param input ByteBuffer containing data to write\n*/",
        "com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream:byteArray()": "/**\n* Returns the byte array from the buffer.\n* @return byte array containing buffer data\n*/",
        "com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream:length()": "/**\n* Returns the current length count.\n* @return the length as an integer\n*/"
    },
    "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher": {
        "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:putByte(byte)": "/**\n* Writes a byte to the stream and returns the Hasher instance.\n* @param b the byte to write\n* @return the current Hasher instance\n*/",
        "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:putBytes(byte[],int,int)": "/**\n* Writes a byte array to the stream.\n* @param bytes byte array to write\n* @param off starting offset in the array\n* @param len number of bytes to write\n* @return the Hasher instance for method chaining\n*/",
        "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:putBytes(java.nio.ByteBuffer)": "/**\n* Writes bytes to the stream and returns the Hasher instance.\n* @param bytes ByteBuffer containing data to write\n* @return Hasher instance for method chaining\n*/",
        "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:hash()": "/**\n* Computes the hash code from the byte array of the stream.\n* @return HashCode object representing the computed hash\n*/"
    },
    "com.google.common.hash.AbstractNonStreamingHashFunction": {
        "com.google.common.hash.AbstractNonStreamingHashFunction:hashInt(int)": "/**\n* Computes hash code for an integer input.\n* @param input integer value to hash\n* @return HashCode object representing the hash\n*/",
        "com.google.common.hash.AbstractNonStreamingHashFunction:hashLong(long)": "/**\n* Generates a HashCode from a long input using little-endian byte order.\n* @param input the long value to hash\n* @return HashCode derived from the input\n*/",
        "com.google.common.hash.AbstractNonStreamingHashFunction:hashUnencodedChars(java.lang.CharSequence)": "/**\n* Computes hash code for unencoded characters from the input sequence.\n* @param input character sequence to hash\n* @return HashCode object representing the hash\n*/",
        "com.google.common.hash.AbstractNonStreamingHashFunction:hashString(java.lang.CharSequence,java.nio.charset.Charset)": "/**\n* Computes hash code for the given string using specified charset.\n* @param input string to hash\n* @param charset character encoding for the string\n* @return HashCode object representing the hash\n*/",
        "com.google.common.hash.AbstractNonStreamingHashFunction:newHasher(int)": "/**\n* Creates a new Hasher with specified input size.\n* @param expectedInputSize non-negative expected input size\n* @return Hasher instance for buffering input\n*/",
        "com.google.common.hash.AbstractNonStreamingHashFunction:newHasher()": "/**\n* Creates a new Hasher instance with a default input size of 32.\n* @return Hasher instance for buffering input\n*/",
        "com.google.common.hash.AbstractNonStreamingHashFunction:hashBytes(java.nio.ByteBuffer)": "/**\n* Generates a HashCode from the given ByteBuffer input.\n* @param input ByteBuffer containing the data to hash\n* @return HashCode representing the hashed data\n*/"
    },
    "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray": {
        "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:toPlainArray(java.util.concurrent.atomic.AtomicLongArray)": "/**\n* Converts AtomicLongArray to a plain long array.\n* @param atomicLongArray the AtomicLongArray to convert\n* @return a long array containing the elements of atomicLongArray\n*/",
        "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:bitCount()": "/**\n* Returns the total count of bits set to 1.\n* @return total number of bits set in the bitCount object\n*/",
        "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:bitSize()": "/**\n* Calculates the bit size of the data.\n* @return total bit size based on data length\n*/",
        "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:putData(int,long)": "/**\n* Updates data at index i by performing a bitwise OR with longValue.\n* @param i index to update in the data array\n* @param longValue value to OR with the existing data\n*/",
        "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:get(long)": "/**\n* Retrieves the value of the bit at the specified index.\n* @param bitIndex index of the bit to retrieve\n* @return true if the bit is set, false otherwise\n*/",
        "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:dataLength()": "/**\n* Returns the length of the data string.\n* @return length of the data string\n*/",
        "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:<init>(long[])": "/**\n* Constructs a LockFreeBitArray from provided long array.\n* @param data array of long values, must not be empty\n*/",
        "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:equals(java.lang.Object)": "/**\n* Compares this LockFreeBitArray to another object for equality.\n* @param o object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:hashCode()": "/**\n* Computes the hash code for the object.\n* @return hash code as an integer\n*/",
        "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:putAll(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)": "/**\n* Copies elements from another LockFreeBitArray if lengths match.\n* @param other the LockFreeBitArray to copy from\n*/",
        "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:set(long)": "/**\n* Sets the bit at the specified index if it's not already set.\n* @param bitIndex index of the bit to set\n* @return true if the bit was set, false if it was already set\n*/",
        "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:copy()": "/**\n* Creates a copy of the LockFreeBitArray.\n* @return a new LockFreeBitArray instance with the same data\n*/",
        "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:<init>(long)": "/**\n* Initializes LockFreeBitArray with specified bit length.\n* @param bits number of bits, must be greater than zero\n*/"
    },
    "com.google.common.hash.BloomFilter": {
        "com.google.common.hash.BloomFilter:mightContain(java.lang.Object)": "/**\n* Checks if the object might be contained in a data structure.\n* @param object the object to check for potential containment\n* @return true if the object might be contained, false otherwise\n*/",
        "com.google.common.hash.BloomFilter:put(java.lang.Object)": "/**\n* Inserts an object using a specified strategy.\n* @param object the object to be inserted\n* @return true if insertion was successful, false otherwise\n*/",
        "com.google.common.hash.BloomFilter:hashCode()": "/**\n* Computes the hash code for the object using its fields.\n* @return an integer hash code value\n*/",
        "com.google.common.hash.BloomFilter:optimalNumOfBits(long,double)": "/**\n* Calculates optimal number of bits for given size and probability.\n* @param n size in bits, @param p probability value\n* @return optimal number of bits as a long\n*/",
        "com.google.common.hash.BloomFilter:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization; throws exception to enforce SerializedForm usage.\n* @param stream the input stream for deserialization\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.hash.BloomFilter:<init>(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray,int,com.google.common.hash.Funnel,com.google.common.hash.BloomFilter$Strategy)": "/**\n* Constructs a BloomFilter with specified parameters.\n* @param bits bit array for storing bits\n* @param numHashFunctions number of hashing functions\n* @param funnel function to hash elements\n* @param strategy strategy for BloomFilter behavior\n*/",
        "com.google.common.hash.BloomFilter:apply(java.lang.Object)": "/**\n* Checks if the input might be contained in a data structure.\n* @param input object to check for potential containment\n* @return true if input might be contained, false otherwise\n*/",
        "com.google.common.hash.BloomFilter:toBloomFilter(com.google.common.hash.Funnel,long,double)": "/**\n* Creates a BloomFilter collector with specified funnel and parameters.\n* @param funnel function to hash elements\n* @param expectedInsertions estimated number of elements\n* @param fpp false positive probability\n* @return Collector for BloomFilter<T>\n*/",
        "com.google.common.hash.BloomFilter:bitSize()": "/**\n* Retrieves the total bit size of the data.\n* @return long representing the total bit size\n*/",
        "com.google.common.hash.BloomFilter:writeTo(java.io.OutputStream)": "/**\n* Writes serialized data to an OutputStream.\n* @param out OutputStream to write serialized data\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.hash.BloomFilter:writeReplace()": "/**\n* Prepares the object for serialization.\n* @return SerialForm instance representing the object state\n*/",
        "com.google.common.hash.BloomFilter:equals(java.lang.Object)": "/**\n* Compares this BloomFilter to another object for equality.\n* @param object object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.hash.BloomFilter:toBloomFilter(com.google.common.hash.Funnel,long)": "/**\n* Creates a BloomFilter collector with specified funnel and expected insertions.\n* @param funnel function to hash elements\n* @param expectedInsertions estimated number of elements\n* @return Collector for BloomFilter<T>\n*/",
        "com.google.common.hash.BloomFilter:expectedFpp()": "/**\n* Calculates the expected false positive probability.\n* @return expected false positive probability as a double\n*/",
        "com.google.common.hash.BloomFilter:isCompatible(com.google.common.hash.BloomFilter)": "/**\n* Checks compatibility with another BloomFilter.\n* @param that the BloomFilter to compare with\n* @return true if compatible, false otherwise\n*/",
        "com.google.common.hash.BloomFilter:putAll(com.google.common.hash.BloomFilter)": "/**\n* Merges another BloomFilter into this one after validating compatibility.\n* @param that the BloomFilter to merge\n*/",
        "com.google.common.hash.BloomFilter:copy()": "/**\n* Creates a copy of the BloomFilter instance.\n* @return a new BloomFilter with the same parameters\n*/",
        "com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long,double,com.google.common.hash.BloomFilter$Strategy)": "/**\n* Creates a BloomFilter with specified parameters.\n* @param funnel function to hash elements\n* @param expectedInsertions expected number of elements to insert\n* @param fpp false positive probability\n* @param strategy BloomFilter behavior strategy\n* @return a new BloomFilter instance\n*/",
        "com.google.common.hash.BloomFilter:readFrom(java.io.InputStream,com.google.common.hash.Funnel)": "/**\n* Reads a BloomFilter from an InputStream.\n* @param in InputStream to read from\n* @param funnel Funnel for hashing elements\n* @return BloomFilter object\n* @throws IOException if reading fails\n*/",
        "com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long,double)": "/**\n* Creates a BloomFilter with specified parameters.\n* @param funnel function to hash elements\n* @param expectedInsertions expected number of elements to insert\n* @param fpp false positive probability\n* @return a new BloomFilter instance\n*/",
        "com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,int,double)": "/**\n* Creates a BloomFilter with specified parameters.\n* @param funnel function to hash elements\n* @param expectedInsertions expected number of elements to insert\n* @param fpp false positive probability\n* @return a new BloomFilter instance\n*/",
        "com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long)": "/**\n* Creates a BloomFilter with specified funnel and expected insertions.\n* @param funnel function to hash elements\n* @param expectedInsertions expected number of elements to insert\n* @return BloomFilter instance with 3% false positive rate\n*/",
        "com.google.common.hash.BloomFilter:approximateElementCount()": "/**\n* Estimates approximate element count based on bit size and set bits.\n* @return estimated number of elements in the data structure\n*/",
        "com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,int)": "/**\n* Creates a BloomFilter using the specified funnel and expected insertions.\n* @param funnel function to hash elements\n* @param expectedInsertions expected number of elements to insert\n* @return BloomFilter instance with 3% false positive rate\n*/"
    },
    "com.google.common.primitives.UnsignedBytes": {
        "com.google.common.primitives.UnsignedBytes:toInt(byte)": "/**\n* Converts a byte to an unsigned int.\n* @param value byte to convert\n* @return unsigned int representation of the byte\n*/",
        "com.google.common.primitives.UnsignedBytes:lexicographicalComparatorJavaImpl()": "/**\n* Returns a comparator for byte arrays using lexicographical order.\n* @return a Comparator<byte[]> for comparing byte arrays\n*/",
        "com.google.common.primitives.UnsignedBytes:<init>()": "/**\n* Private constructor for UnsignedBytes class; prevents instantiation.\n*/",
        "com.google.common.primitives.UnsignedBytes:flip(byte)": "/**\n* Flips the most significant bit of the given byte.\n* @param b input byte to flip\n* @return byte with the flipped most significant bit\n*/",
        "com.google.common.primitives.UnsignedBytes:parseUnsignedByte(java.lang.String,int)": "/**\n* Parses a string as an unsigned byte in the specified radix.\n* @param string the string to parse\n* @param radix the base for parsing\n* @return the parsed byte value\n*/",
        "com.google.common.primitives.UnsignedBytes:checkedCast(long)": "/**\n* Casts long to byte after validating range.\n* @param value long value to cast\n* @return byte representation of value\n*/",
        "com.google.common.primitives.UnsignedBytes:saturatedCast(long)": "/**\n* Casts long value to byte with saturation.\n* @param value long to convert\n* @return saturated byte value\n*/",
        "com.google.common.primitives.UnsignedBytes:compare(byte,byte)": "/**\n* Compares two bytes as unsigned integers.\n* @param a first byte to compare\n* @param b second byte to compare\n* @return negative if a < b, positive if a > b, zero if equal\n*/",
        "com.google.common.primitives.UnsignedBytes:toString(byte,int)": "/**\n* Converts a byte to a string representation in the specified radix.\n* @param x byte to convert\n* @param radix base for the string representation\n* @return string representation of the byte in the given radix\n*/",
        "com.google.common.primitives.UnsignedBytes:parseUnsignedByte(java.lang.String)": "/**\n* Parses a string as an unsigned byte in base 10.\n* @param string the string to parse\n* @return parsed byte value\n*/",
        "com.google.common.primitives.UnsignedBytes:toString(byte)": "/**\n* Converts a byte to its string representation in decimal format.\n* @param x byte to convert\n* @return string representation of the byte\n*/",
        "com.google.common.primitives.UnsignedBytes:sort(byte[],int,int)": "/**\n* Sorts a byte array after flipping bits in a specified range.\n* @param array the byte array to sort\n* @param fromIndex starting index for sorting\n* @param toIndex ending index for sorting\n*/",
        "com.google.common.primitives.UnsignedBytes:sortDescending(byte[],int,int)": "/**\n* Sorts a byte array in descending order.\n* @param array the byte array to sort\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n*/",
        "com.google.common.primitives.UnsignedBytes:sort(byte[])": "/**\n* Sorts a byte array after ensuring it is not null.\n* @param array the byte array to sort\n*/",
        "com.google.common.primitives.UnsignedBytes:sortDescending(byte[])": "/**\n* Sorts a byte array in descending order after null check.\n* @param array the byte array to sort\n*/"
    },
    "com.google.common.hash.Hashing": {
        "com.google.common.hash.Hashing:murmur3_128()": "/**\n* Returns the Murmur3 128-bit hash function instance.\n* @return HashFunction for 128-bit Murmur3 hashing\n*/",
        "com.google.common.hash.Hashing:hmacToString(java.lang.String,java.security.Key)": "/**\n* Converts HMAC details to a string representation.\n* @param methodName the name of the hashing method\n* @param key the cryptographic key used for hashing\n* @return formatted string with method and key details\n*/",
        "com.google.common.hash.Hashing:<init>()": "/**\n* Private constructor to prevent instantiation of the Hashing class.\n*/",
        "com.google.common.hash.Hashing:murmur3_32_fixed()": "/**\n* Returns the fixed Murmur3 32-bit hash function instance.\n* @return HashFunction for Murmur3 32-bit hashing\n*/",
        "com.google.common.hash.Hashing:checkPositiveAndMakeMultipleOf32(int)": "/**\n* Validates and adjusts bits to the nearest multiple of 32.\n* @param bits positive integer to adjust\n* @return adjusted integer multiple of 32\n*/",
        "com.google.common.hash.Hashing:concatenating(java.lang.Iterable)": "/**\n* Creates a concatenated HashFunction from provided iterable.\n* @param hashFunctions iterable of HashFunction objects\n* @return ConcatenatedHashFunction instance\n*/",
        "com.google.common.hash.Hashing:murmur3_32(int)": "/**\n* Creates a Murmur3_32 hash function with the given seed.\n* @param seed hash seed value\n* @return HashFunction instance\n*/",
        "com.google.common.hash.Hashing:murmur3_32_fixed(int)": "/**\n* Creates a fixed Murmur3_32 hash function with a given seed.\n* @param seed hash seed value\n* @return HashFunction instance\n*/",
        "com.google.common.hash.Hashing:murmur3_128(int)": "/**** Creates a Murmur3_128 hash function using the specified seed. \n* @param seed initial value to influence hash output \n* @return HashFunction instance \n*/",
        "com.google.common.hash.Hashing:consistentHash(long,int)": "/**\n* Computes a consistent hash for a given input across specified buckets.\n* @param input value to hash\n* @param buckets number of hash buckets\n* @return bucket index for the input\n*/",
        "com.google.common.hash.Hashing:sipHash24(long,long)": "/**\n* Creates a SipHash function with specified keys.\n* @param k0 first key for hashing\n* @param k1 second key for hashing\n* @return HashFunction instance configured for SipHash\n*/",
        "com.google.common.hash.Hashing:goodFastHash(int)": "/**\n* Generates a HashFunction based on minimum bits.\n* @param minimumBits required bits for hash function\n* @return HashFunction instance tailored for specified bits\n*/",
        "com.google.common.hash.Hashing:consistentHash(com.google.common.hash.HashCode,int)": "/**\n* Computes consistent hash index for a given HashCode across specified buckets.\n* @param hashCode input hash code to convert\n* @param buckets number of hash buckets\n* @return bucket index for the hash code\n*/",
        "com.google.common.hash.Hashing:hmacMd5(java.security.Key)": "/**\n* Creates HMAC MD5 HashFunction using the provided key.\n* @param key secret key for HMAC initialization\n* @return HashFunction instance for HmacMD5\n*/",
        "com.google.common.hash.Hashing:hmacSha1(java.security.Key)": "/**\n* Creates HMAC-SHA1 HashFunction using the provided key.\n* @param key secret key for HMAC initialization\n* @return HashFunction instance for HMAC-SHA1\n*/",
        "com.google.common.hash.Hashing:hmacSha256(java.security.Key)": "/**\n* Creates HMAC SHA-256 HashFunction using the provided key.\n* @param key secret key for HMAC initialization\n* @return HashFunction instance for HmacSHA256\n*/",
        "com.google.common.hash.Hashing:hmacSha512(java.security.Key)": "/**\n* Creates HMAC SHA-512 HashFunction using specified key.\n* @param key secret key for HMAC initialization\n* @return HashFunction instance for HMAC SHA-512\n*/",
        "com.google.common.hash.Hashing:combineOrdered(java.lang.Iterable)": "/**\n* Combines multiple HashCode objects into a single HashCode.\n* @param hashCodes iterable collection of HashCode objects\n* @return combined HashCode from the input hashes\n*/",
        "com.google.common.hash.Hashing:combineUnordered(java.lang.Iterable)": "/**\n* Combines multiple HashCodes into one.\n* @param hashCodes iterable collection of HashCode objects\n* @return combined HashCode from the input\n*/",
        "com.google.common.hash.Hashing:hmacMd5(byte[])": "/**\n* Creates HMAC MD5 HashFunction from the provided byte array key.\n* @param key secret key for HMAC initialization\n* @return HashFunction instance for HmacMD5\n*/",
        "com.google.common.hash.Hashing:hmacSha1(byte[])": "/**\n* Creates HMAC-SHA1 HashFunction using the provided key.\n* @param key secret key for HMAC initialization\n* @return HashFunction instance for HMAC-SHA1\n*/",
        "com.google.common.hash.Hashing:hmacSha256(byte[])": "/**\n* Creates HMAC SHA-256 HashFunction from the provided key.\n* @param key byte array for HMAC initialization\n* @return HashFunction instance for HmacSHA256\n*/",
        "com.google.common.hash.Hashing:hmacSha512(byte[])": "/**\n* Creates HMAC SHA-512 HashFunction using the provided key.\n* @param key secret key for HMAC initialization\n* @return HashFunction instance for HMAC SHA-512\n*/"
    },
    "com.google.common.hash.HashCode": {
        "com.google.common.hash.HashCode:getBytesInternal()": "/**\n* Retrieves the internal byte representation.\n* @return byte array of the internal data\n*/",
        "com.google.common.hash.HashCode:<init>()": "/**\n* Generates a hash code for the object.\n* @return integer hash code value\n*/",
        "com.google.common.hash.HashCode:decode(char)": "/**\n* Decodes a hex character to its integer value.\n* @param ch hexadecimal character (0-9, a-f)\n* @return integer value of the hex character\n*/",
        "com.google.common.hash.HashCode:equals(java.lang.Object)": "/**\n* Compares this HashCode object with another for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.hash.HashCode:hashCode()": "/**\n* Computes hash code based on internal byte representation.\n* @return computed hash code as an integer\n*/",
        "com.google.common.hash.HashCode:toString()": "/**\n* Converts internal byte representation to a hexadecimal string.\n* @return hexadecimal string of the internal data\n*/",
        "com.google.common.hash.HashCode:fromBytesNoCopy(byte[])": "/**\n* Creates a HashCode from a byte array without copying the data.\n* @param bytes non-null byte array for hash code generation\n* @return HashCode object\n*/",
        "com.google.common.hash.HashCode:fromInt(int)": "/**\n* Creates a HashCode from an integer hash value.\n* @param hash integer value for hashing\n* @return HashCode instance based on the provided hash\n*/",
        "com.google.common.hash.HashCode:fromLong(long)": "/**\n* Creates a HashCode instance from a long hash value.\n* @param hash long value representing the hash code\n* @return HashCode object initialized with the given hash\n*/",
        "com.google.common.hash.HashCode:writeBytesTo(byte[],int,int)": "/**\n* Writes bytes to destination array and returns the number of bytes written.\n* @param dest destination byte array, @param offset start position, @param maxLength max bytes to write\n* @return number of bytes written\n*/",
        "com.google.common.hash.HashCode:fromBytes(byte[])": "/**\n* Creates a HashCode from a byte array.\n* @param bytes non-null byte array with at least 1 byte\n* @return HashCode object\n*/",
        "com.google.common.hash.HashCode:fromString(java.lang.String)": "/**\n* Converts a hex string to a HashCode.\n* @param string hex string (must be even length and at least 2 chars)\n* @return HashCode generated from the byte array\n*/"
    },
    "com.google.common.hash.ChecksumHashFunction$ChecksumHasher": {
        "com.google.common.hash.ChecksumHashFunction$ChecksumHasher:update(byte)": "/**\n* Updates the checksum with the given byte value.\n* @param b byte value to update the checksum\n*/",
        "com.google.common.hash.ChecksumHashFunction$ChecksumHasher:update(byte[],int,int)": "/**\n* Updates the checksum with the specified byte array segment.\n* @param bytes the byte array to update from\n* @param off the starting offset in the byte array\n* @param len the number of bytes to update\n*/",
        "com.google.common.hash.ChecksumHashFunction$ChecksumHasher:hash()": "/**\n* Generates a HashCode based on the checksum value.\n* @return HashCode instance derived from checksum value\n*/"
    },
    "com.google.common.hash.ChecksumHashFunction": {
        "com.google.common.hash.ChecksumHashFunction:newHasher()": "/**\n* Creates a new ChecksumHasher instance using the provided checksum supplier.\n* @return a new Hasher object\n*/",
        "com.google.common.hash.ChecksumHashFunction:bits()": "/**\n* Returns the current value of bits.\n* @return the value of bits as an integer\n*/",
        "com.google.common.hash.ChecksumHashFunction:<init>(com.google.common.hash.ImmutableSupplier,int,java.lang.String)": "/**\n* Initializes ChecksumHashFunction with supplier, bit size, and string representation.\n* @param checksumSupplier supplier for Checksum instance\n* @param bits bit size (32 or 64)\n* @param toString string representation of the function\n*/"
    },
    "com.google.common.hash.Crc32cHashFunction$Crc32cHasher": {
        "com.google.common.hash.Crc32cHashFunction$Crc32cHasher:computeForWord(int)": "/**\n* Computes a value from a word using a stride table.\n* @param word input integer to compute value from\n* @return computed integer based on stride table\n*/",
        "com.google.common.hash.Crc32cHashFunction$Crc32cHasher:combine(int,int)": "/**\n* Combines checksum values using bitwise operations.\n* @param csum initial checksum value\n* @param crc checksum to combine with\n* @return updated checksum after combination\n*/",
        "com.google.common.hash.Crc32cHashFunction$Crc32cHasher:process(java.nio.ByteBuffer)": "/**\n* Processes ByteBuffer for CRC computation.\n* @param bb ByteBuffer containing data for CRC calculation\n*/",
        "com.google.common.hash.Crc32cHashFunction$Crc32cHasher:processRemaining(java.nio.ByteBuffer)": "/**\n* Processes remaining bytes in ByteBuffer and updates the checksum.\n* @param bb ByteBuffer containing data to process\n*/",
        "com.google.common.hash.Crc32cHashFunction$Crc32cHasher:<init>()": "/**\n* Initializes Crc32cHasher with a fixed chunk size of 16.\n*/",
        "com.google.common.hash.Crc32cHashFunction$Crc32cHasher:makeHash()": "/**\n* Generates a HashCode from the current CRC value.\n* @return HashCode based on the inverted crc0 value\n*/"
    },
    "com.google.common.hash.LittleEndianByteArray": {
        "com.google.common.hash.LittleEndianByteArray:load64(byte[],int)": "/**\n* Loads a 64-bit long from a byte array at the specified offset.\n* @param input byte array containing data\n* @param offset position in the array to read from\n* @return 64-bit long value from the byte array\n*/",
        "com.google.common.hash.LittleEndianByteArray:load32(byte[],int)": "/**\n* Loads a 32-bit integer from a byte array at a specified offset.\n* @param source byte array containing data\n* @param offset starting position to read from\n* @return 32-bit integer constructed from the bytes\n*/",
        "com.google.common.hash.LittleEndianByteArray:load64Safely(byte[],int,int)": "/**\n* Loads a 64-bit long value from a byte array safely.\n* @param input byte array to read from\n* @param offset starting position in the array\n* @param length number of bytes to consider\n* @return constructed long value from the input bytes\n*/",
        "com.google.common.hash.LittleEndianByteArray:store64(byte[],int,long)": "/**\n* Stores a 64-bit long value in a byte array at a specified offset.\n* @param sink byte array to store the value\n* @param offset position in the array to start storing\n* @param value 64-bit long value to be stored\n*/",
        "com.google.common.hash.LittleEndianByteArray:<init>()": "/**\n* Private constructor for LittleEndianByteArray class.\n*/"
    },
    "com.google.common.hash.FarmHashFingerprint64": {
        "com.google.common.hash.FarmHashFingerprint64:hashLength16(long,long,long)": "/**\n* Computes a 16-byte hash from two long values using a multiplication factor.\n* @param u first long value\n* @param v second long value\n* @param mul multiplication factor\n* @return computed hash as a long\n*/",
        "com.google.common.hash.FarmHashFingerprint64:shiftMix(long)": "/**\n* Mixes the bits of a long value using a right shift and XOR operation.\n* @param val input long value to be mixed\n* @return mixed long value after bit manipulation\n*/",
        "com.google.common.hash.FarmHashFingerprint64:bits()": "/**\n* Returns the number of bits used by the data type.\n* @return int representing the bit size, fixed at 64\n*/",
        "com.google.common.hash.FarmHashFingerprint64:weakHashLength32WithSeeds(byte[],int,long,long,long[])": "/**\n* Computes a 32-bit weak hash with two seeds from byte array.\n* @param bytes input byte array\n* @param offset starting position in the array\n* @param seedA first seed value\n* @param seedB second seed value\n* @param output array to store the resulting hash values\n*/",
        "com.google.common.hash.FarmHashFingerprint64:hashLength17to32(byte[],int,int)": "/**\n* Computes a 16-byte hash from a byte array segment.\n* @param bytes input byte array, @param offset start position, @param length size of segment\n* @return computed hash as a long\n*/",
        "com.google.common.hash.FarmHashFingerprint64:hashLength33To64(byte[],int,int)": "/**\n* Computes a 64-bit hash from a byte array using specified offset and length.\n* @param bytes input byte array for hashing\n* @param offset starting position in the byte array\n* @param length number of bytes to include in the hash\n* @return computed 64-bit hash as a long\n*/",
        "com.google.common.hash.FarmHashFingerprint64:hashLength0to16(byte[],int,int)": "/**\n* Computes a hash for byte array segment based on its length.\n* @param bytes byte array to hash\n* @param offset starting position in the array\n* @param length number of bytes to consider\n* @return computed hash as a long value\n*/",
        "com.google.common.hash.FarmHashFingerprint64:hashLength65Plus(byte[],int,int)": "/**\n* Computes a hash for byte array with length over 65.\n* @param bytes input byte array to hash\n* @param offset starting position in the array\n* @param length total length of the byte array\n* @return computed hash as a long value\n*/",
        "com.google.common.hash.FarmHashFingerprint64:fingerprint(byte[],int,int)": "/**\n* Computes a fingerprint for a byte array segment based on its length.\n* @param bytes input byte array, @param offset start position, @param length size of segment\n* @return computed fingerprint as a long value\n*/",
        "com.google.common.hash.FarmHashFingerprint64:hashBytes(byte[],int,int)": "/**\n* Computes a HashCode from a byte array segment.\n* @param input byte array to process, @param off start index, @param len segment length\n* @return HashCode object derived from the specified segment\n*/"
    },
    "com.google.common.hash.Fingerprint2011": {
        "com.google.common.hash.Fingerprint2011:hash128to64(long,long)": "/**\n* Computes a 64-bit hash from two 64-bit long values.\n* @param high upper 64 bits of the hash\n* @param low lower 64 bits of the hash\n* @return 64-bit hash value\n*/",
        "com.google.common.hash.Fingerprint2011:shiftMix(long)": "/**\n* Mixes the bits of the input long value.\n* @param val the long value to be mixed\n* @return the mixed long value\n*/",
        "com.google.common.hash.Fingerprint2011:bits()": "/**\n* Returns the number of bits used by the data type.\n* @return int representing the bit count, always 64\n*/",
        "com.google.common.hash.Fingerprint2011:weakHashLength32WithSeeds(byte[],int,long,long,long[])": "/**\n* Computes a weak hash with two seeds from byte array data.\n* @param bytes input byte array\n* @param offset position in byte array\n* @param seedA first seed for hashing\n* @param seedB second seed for hashing\n* @param output array to store two hash results\n*/",
        "com.google.common.hash.Fingerprint2011:hashLength33To64(byte[],int,int)": "/**\n* Computes a 64-bit hash from a byte array using specified offset and length.\n* @param bytes input byte array\n* @param offset starting position in the array\n* @param length number of bytes to hash\n* @return computed 64-bit hash value\n*/",
        "com.google.common.hash.Fingerprint2011:murmurHash64WithSeed(byte[],int,int,long)": "/**\n* Computes MurmurHash64 with a seed from byte array segment.\n* @param bytes input byte array, @param offset start position, @param length size to hash, @param seed initial hash seed\n* @return computed 64-bit hash value\n*/",
        "com.google.common.hash.Fingerprint2011:fullFingerprint(byte[],int,int)": "/**\n* Computes a full fingerprint from a byte array.\n* @param bytes input byte array\n* @param offset starting position in the array\n* @param length number of bytes to process\n* @return computed fingerprint as a long value\n*/",
        "com.google.common.hash.Fingerprint2011:fingerprint(byte[],int,int)": "/**\n* Computes a fingerprint from a byte array segment.\n* @param bytes input byte array, @param offset start position, @param length size to process\n* @return computed fingerprint as a long value\n*/",
        "com.google.common.hash.Fingerprint2011:hashBytes(byte[],int,int)": "/**\n* Computes a HashCode from a byte array segment.\n* @param input byte array to process, @param off start index, @param len length to process\n* @return HashCode object derived from the input segment\n*/"
    },
    "com.google.common.hash.Funnels$ByteArrayFunnel": {
        "com.google.common.hash.Funnels$ByteArrayFunnel:funnel(byte[],com.google.common.hash.PrimitiveSink)": "/**\n* Funnels byte array into a PrimitiveSink.\n* @param from byte array to be processed\n* @param into target PrimitiveSink to receive bytes\n*/"
    },
    "com.google.common.hash.Funnels$IntegerFunnel": {
        "com.google.common.hash.Funnels$IntegerFunnel:funnel(java.lang.Integer,com.google.common.hash.PrimitiveSink)": "/**\n* Funnels an integer into a PrimitiveSink.\n* @param from integer to be put into the sink\n* @param into the PrimitiveSink receiving the integer\n*/"
    },
    "com.google.common.hash.Funnels$LongFunnel": {
        "com.google.common.hash.Funnels$LongFunnel:funnel(java.lang.Long,com.google.common.hash.PrimitiveSink)": "/**\n* Funnels a long value into a PrimitiveSink.\n* @param from the long value to funnel\n* @param into the PrimitiveSink to receive the value\n*/"
    },
    "com.google.common.hash.Funnels$SequentialFunnel": {
        "com.google.common.hash.Funnels$SequentialFunnel:funnel(java.lang.Iterable,com.google.common.hash.PrimitiveSink)": "/**\n* Funnels elements from an iterable into a PrimitiveSink.\n* @param from iterable source of elements\n* @param into target PrimitiveSink for output\n*/",
        "com.google.common.hash.Funnels$SequentialFunnel:toString()": "/**\n* Returns a string representation of the sequential funnel.\n* @return formatted string of the funnel's element\n*/",
        "com.google.common.hash.Funnels$SequentialFunnel:equals(java.lang.Object)": "/**\n* Checks equality of this SequentialFunnel with another object.\n* @param o object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.hash.Funnels$SequentialFunnel:hashCode()": "/**\n* Computes the hash code for the object using class and element funnel hash codes.\n* @return combined hash code as an integer\n*/",
        "com.google.common.hash.Funnels$SequentialFunnel:<init>(com.google.common.hash.Funnel)": "/**\n* Constructs a SequentialFunnel with a non-null element funnel.\n* @param elementFunnel funnel for elements, must not be null\n*/"
    },
    "com.google.common.hash.Funnels$SinkAsStream": {
        "com.google.common.hash.Funnels$SinkAsStream:write(int)": "/**\n* Writes a byte to the sink.\n* @param b the byte to write\n*/",
        "com.google.common.hash.Funnels$SinkAsStream:write(byte[])": "/**\n* Writes byte array to the sink.\n* @param bytes data to be written\n*/",
        "com.google.common.hash.Funnels$SinkAsStream:write(byte[],int,int)": "/**\n* Writes a specified number of bytes to the sink.\n* @param bytes byte array to write from\n* @param off starting offset in the byte array\n* @param len number of bytes to write\n*/",
        "com.google.common.hash.Funnels$SinkAsStream:toString()": "/**\n* Returns a string representation of the Funnels.asOutputStream with the sink value.\n* @return String representation of the output stream\n*/",
        "com.google.common.hash.Funnels$SinkAsStream:<init>(com.google.common.hash.PrimitiveSink)": "/**\n* Initializes SinkAsStream with a non-null PrimitiveSink.\n* @param sink the PrimitiveSink to be assigned\n*/"
    },
    "com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm": {
        "com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm:<init>(java.nio.charset.Charset)": "/**\n* Initializes SerializedForm with the specified charset.\n* @param charset character set for serialization\n*/",
        "com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm:readResolve()": "/****\n* Resolves object serialization by creating a Funnel for CharSequence.\n* @return Funnel instance for CharSequence\n*/"
    },
    "com.google.common.hash.Funnels$StringCharsetFunnel": {
        "com.google.common.hash.Funnels$StringCharsetFunnel:funnel(java.lang.CharSequence,com.google.common.hash.PrimitiveSink)": "/**\n* Funnels a CharSequence into a PrimitiveSink using specified charset.\n* @param from input CharSequence to funnel\n* @param into target PrimitiveSink to receive the data\n*/",
        "com.google.common.hash.Funnels$StringCharsetFunnel:toString()": "/**\n* Returns a string representation of the Funnel with its charset name.\n* @return formatted string indicating the charset used\n*/",
        "com.google.common.hash.Funnels$StringCharsetFunnel:equals(java.lang.Object)": "/**\n* Compares this object with another for equality based on charset.\n* @param o object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.hash.Funnels$StringCharsetFunnel:hashCode()": "/**\n* Computes hash code based on class and charset.\n* @return combined hash code of class and charset\n*/",
        "com.google.common.hash.Funnels$StringCharsetFunnel:readObject(java.io.ObjectInputStream)": "/**\n* Prevents deserialization and throws an exception.\n* @param stream the ObjectInputStream for reading objects\n* @throws InvalidObjectException if deserialization is attempted\n*/",
        "com.google.common.hash.Funnels$StringCharsetFunnel:<init>(java.nio.charset.Charset)": "/**\n* Constructs a StringCharsetFunnel with the specified charset.\n* @param charset character set to be used, must not be null\n*/",
        "com.google.common.hash.Funnels$StringCharsetFunnel:writeReplace()": "/**\n* Replaces the object with its serialized form.\n* @return SerializedForm object initialized with charset\n*/"
    },
    "com.google.common.hash.Funnels$UnencodedCharsFunnel": {
        "com.google.common.hash.Funnels$UnencodedCharsFunnel:funnel(java.lang.CharSequence,com.google.common.hash.PrimitiveSink)": "/**\n* Funnels characters from 'from' to 'into' without encoding.\n* @param from input character sequence\n* @param into sink to receive the characters\n*/"
    },
    "com.google.common.hash.Funnels": {
        "com.google.common.hash.Funnels:<init>()": "/**\n* Private constructor to prevent instantiation of the Funnels class.\n*/",
        "com.google.common.hash.Funnels:sequentialFunnel(com.google.common.hash.Funnel)": "/**\n* Creates a funnel for iterables using a specified element funnel.\n* @param elementFunnel funnel for individual elements\n* @return Funnel for iterables of the specified elements\n*/",
        "com.google.common.hash.Funnels:asOutputStream(com.google.common.hash.PrimitiveSink)": "/**\n* Converts a PrimitiveSink to an OutputStream.\n* @param sink the PrimitiveSink to convert\n* @return OutputStream representing the sink\n*/",
        "com.google.common.hash.Funnels:stringFunnel(java.nio.charset.Charset)": "/**\n* Creates a Funnel for CharSequence using the specified character set.\n* @param charset character set for encoding, must not be null\n* @return Funnel instance for CharSequence\n*/"
    },
    "com.google.common.hash.HashCode$BytesHashCode": {
        "com.google.common.hash.HashCode$BytesHashCode:asBytes()": "/**\n* Returns a cloned byte array of the instance data.\n* @return cloned byte array of the instance's bytes\n*/",
        "com.google.common.hash.HashCode$BytesHashCode:padToLong()": "/**\n* Converts byte array to long representation.\n* @return long value derived from the first 8 bytes of the array\n*/",
        "com.google.common.hash.HashCode$BytesHashCode:writeBytesToImpl(byte[],int,int)": "/**\n* Copies bytes to the destination array from a specified offset.\n* @param dest destination array to copy bytes into\n* @param offset starting position in the destination array\n* @param maxLength number of bytes to copy\n*/",
        "com.google.common.hash.HashCode$BytesHashCode:bits()": "/**\n* Calculates the total number of bits from the byte array length.\n* @return total bits as an integer\n*/",
        "com.google.common.hash.HashCode$BytesHashCode:asInt()": "/**\n* Converts byte array to int after validating its length.\n* @return integer representation of the first four bytes\n*/",
        "com.google.common.hash.HashCode$BytesHashCode:equalsSameBits(com.google.common.hash.HashCode)": "/**\n* Compares byte arrays for equality in constant time.\n* @param that HashCode object to compare with\n* @return true if byte arrays are equal, false otherwise\n*/",
        "com.google.common.hash.HashCode$BytesHashCode:<init>(byte[])": "/**\n* Constructs a BytesHashCode from a byte array.\n* @param bytes non-null byte array for hash code generation\n*/",
        "com.google.common.hash.HashCode$BytesHashCode:asLong()": "/**\n* Converts byte array to long after validating its length.\n* @return long representation of the byte array\n*/"
    },
    "com.google.common.hash.HashCode$IntHashCode": {
        "com.google.common.hash.HashCode$IntHashCode:asLong()": "/**\n* Throws an exception indicating 32-bit limitation for HashCode to long conversion.\n*/",
        "com.google.common.hash.HashCode$IntHashCode:equalsSameBits(com.google.common.hash.HashCode)": "/**\n* Compares hash with another HashCode's integer value.\n* @param that HashCode object to compare against\n* @return true if hashes are equal, false otherwise\n*/",
        "com.google.common.hash.HashCode$IntHashCode:asBytes()": "/**\n* Converts hash to a byte array representation.\n* @return byte array of the hash value\n*/",
        "com.google.common.hash.HashCode$IntHashCode:asInt()": "/**\n* Returns the hash value as an integer.\n* @return hash value of the object\n*/",
        "com.google.common.hash.HashCode$IntHashCode:bits()": "/**\n* Returns the number of bits, which is fixed at 32.\n* @return always returns 32\n*/",
        "com.google.common.hash.HashCode$IntHashCode:writeBytesToImpl(byte[],int,int)": "/**\n* Writes bytes of the hash to the destination array.\n* @param dest byte array to write to\n* @param offset starting position in dest\n* @param maxLength number of bytes to write\n*/",
        "com.google.common.hash.HashCode$IntHashCode:<init>(int)": "/**\n* Initializes IntHashCode with a specified hash value.\n* @param hash integer value for hashing\n*/",
        "com.google.common.hash.HashCode$IntHashCode:padToLong()": "/**\n* Pads the hash to a long value.\n* @return long representation of the hash\n*/"
    },
    "com.google.common.primitives.UnsignedInts": {
        "com.google.common.primitives.UnsignedInts:toLong(int)": "/**\n* Converts an int to a long using a bitwise AND with INT_MASK.\n* @param value the integer value to convert\n* @return the resulting long value\n*/",
        "com.google.common.primitives.UnsignedInts:toString(int,int)": "/**\n* Converts an integer to its string representation in the specified radix.\n* @param x the integer to convert\n* @param radix the base for conversion (2-36)\n* @return string representation of the integer in the given radix\n*/",
        "com.google.common.primitives.UnsignedInts:<init>()": "/**\n* Private constructor to prevent instantiation of the UnsignedInts class.\n*/",
        "com.google.common.primitives.UnsignedInts:flip(int)": "/**\n* Flips the sign bit of an integer.\n* @param value integer to flip\n* @return integer with flipped sign bit\n*/",
        "com.google.common.primitives.UnsignedInts:parseUnsignedInt(java.lang.String,int)": "/**\n* Parses a string to an unsigned integer in the specified radix.\n* @param string the string to parse\n* @param radix the base for the conversion\n* @return the parsed unsigned integer\n*/",
        "com.google.common.primitives.UnsignedInts:checkedCast(long)": "/**\n* Casts long to int after validating the range.\n* @param value long value to cast\n* @return int representation of value\n*/",
        "com.google.common.primitives.UnsignedInts:divide(int,int)": "/**\n* Divides two integers after converting them to long.\n* @param dividend the number to be divided\n* @param divisor the number to divide by\n* @return the result of the division as an int\n*/",
        "com.google.common.primitives.UnsignedInts:remainder(int,int)": "/**\n* Calculates the remainder of two integers.\n* @param dividend the number to be divided\n* @param divisor the number to divide by\n* @return the remainder of the division\n*/",
        "com.google.common.primitives.UnsignedInts:toString(int)": "/**\n* Converts an integer to its string representation in decimal.\n* @param x the integer to convert\n* @return string representation of the integer\n*/",
        "com.google.common.primitives.UnsignedInts:compare(int,int)": "/**\n* Compares two integers after flipping their sign bits.\n* @param a first integer to compare\n* @param b second integer to compare\n* @return negative if a < b, zero if a == b, positive if a > b\n*/",
        "com.google.common.primitives.UnsignedInts:parseUnsignedInt(java.lang.String)": "/**\n* Parses a string to an unsigned integer in base 10.\n* @param s the string to parse\n* @return the parsed unsigned integer\n*/",
        "com.google.common.primitives.UnsignedInts:decode(java.lang.String)": "/**\n* Decodes a string to an unsigned integer.\n* @param stringValue the string to decode\n* @return parsed unsigned integer\n*/",
        "com.google.common.primitives.UnsignedInts:sort(int[],int,int)": "/**\n* Sorts and flips elements in a specified range of the array.\n* @param array the array to sort, @param fromIndex start index, @param toIndex end index\n*/",
        "com.google.common.primitives.UnsignedInts:sortDescending(int[],int,int)": "/**\n* Sorts the array in descending order within the specified index range.\n* @param array the array to sort, @param fromIndex start index, @param toIndex end index\n*/",
        "com.google.common.primitives.UnsignedInts:sort(int[])": "/**\n* Sorts the entire array after checking for null reference.\n* @param array the array to sort\n*/",
        "com.google.common.primitives.UnsignedInts:sortDescending(int[])": "/**\n* Sorts the given array in descending order.\n* @param array the array to sort; must not be null\n*/"
    },
    "com.google.common.hash.HashCode$LongHashCode": {
        "com.google.common.hash.HashCode$LongHashCode:equalsSameBits(com.google.common.hash.HashCode)": "/**\n* Compares hash with another HashCode's long value for equality.\n* @param that HashCode object to compare with\n* @return true if hashes are equal, false otherwise\n*/",
        "com.google.common.hash.HashCode$LongHashCode:asBytes()": "/**\n* Converts the hash to a byte array representation.\n* @return byte array of the hash value\n*/",
        "com.google.common.hash.HashCode$LongHashCode:asInt()": "/**\n* Returns the hash as an integer.\n* @return integer representation of the hash value\n*/",
        "com.google.common.hash.HashCode$LongHashCode:asLong()": "/**\n* Returns the hash value as a long.\n* @return hash value of type long\n*/",
        "com.google.common.hash.HashCode$LongHashCode:bits()": "/**\n* Returns the number of bits used by the data type.\n* @return integer representing the bit size (64 for this type)\n*/",
        "com.google.common.hash.HashCode$LongHashCode:padToLong()": "/**\n* Returns the hash value as a long.\n* @return long representation of the hash\n*/",
        "com.google.common.hash.HashCode$LongHashCode:writeBytesToImpl(byte[],int,int)": "/**\n* Writes bytes from hash to the destination array.\n* @param dest array to write bytes into\n* @param offset starting position in dest\n* @param maxLength number of bytes to write\n*/",
        "com.google.common.hash.HashCode$LongHashCode:<init>(long)": "/**\n* Initializes LongHashCode with a specified hash value.\n* @param hash long value representing the hash code\n*/"
    },
    "com.google.common.hash.Hashing$ConcatenatedHashFunction": {
        "com.google.common.hash.Hashing$ConcatenatedHashFunction:bits()": "/**\n* Calculates the total number of bits from all hash functions.\n* @return sum of bits from all hash functions\n*/",
        "com.google.common.hash.Hashing$ConcatenatedHashFunction:equals(java.lang.Object)": "/**\n* Compares this object to another for equality.\n* @param object the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.hash.Hashing$ConcatenatedHashFunction:hashCode()": "/**\n* Computes the hash code for the object based on its functions array.\n* @return hash code as an integer\n*/",
        "com.google.common.hash.Hashing$ConcatenatedHashFunction:makeHash(com.google.common.hash.Hasher[])": "/**\n* Creates a HashCode from an array of Hasher objects.\n* @param hashers array of Hasher instances\n* @return HashCode generated from the combined hashes\n*/"
    },
    "com.google.common.hash.Hashing$Crc32CSupplier": {
        "com.google.common.hash.Hashing$Crc32CSupplier:pickFunction()": "/**\n* Selects a CRC32C supplier based on runtime environment.\n* @return Crc32CSupplier instance for CRC32C calculation\n*/"
    },
    "com.google.common.hash.Hashing$Crc32cMethodHandles": {
        "com.google.common.hash.Hashing$Crc32cMethodHandles:newLinkageError(java.lang.Throwable)": "/**\n* Creates a new LinkageError with the specified cause.\n* @param cause the underlying Throwable that caused the error\n* @return a LinkageError instance\n*/",
        "com.google.common.hash.Hashing$Crc32cMethodHandles:crc32cConstructor()": "/**\n* Retrieves a MethodHandle for CRC32C constructor as Checksum.\n* @return MethodHandle for CRC32C constructor\n*/",
        "com.google.common.hash.Hashing$Crc32cMethodHandles:newCrc32c()": "/**\n* Creates a new CRC32C Checksum instance.\n* @return Checksum object for CRC32C calculation\n*/"
    },
    "com.google.common.hash.Hashing$LinearCongruentialGenerator": {
        "com.google.common.hash.Hashing$LinearCongruentialGenerator:<init>(long)": "/**\n* Initializes the generator with a specified seed value.\n* @param seed initial state for random number generation\n*/",
        "com.google.common.hash.Hashing$LinearCongruentialGenerator:nextDouble()": "/**\n* Generates the next pseudorandom double value in the range [0.0, 1.0).\n* @return a pseudorandom double value\n*/"
    },
    "com.google.common.hash.Murmur3_32HashFunction": {
        "com.google.common.hash.Murmur3_32HashFunction:<init>(int,boolean)": "/**\n* Constructs a Murmur3_32 hash function with a seed and supplementary plane fix option.\n* @param seed hash seed value\n* @param supplementaryPlaneFix enables supplementary plane character handling\n*/",
        "com.google.common.hash.Murmur3_32HashFunction:toString()": "/**\n* Returns a string representation of the Murmur3_32 hashing function with the seed value.\n* @return String description of the hashing function\n*/",
        "com.google.common.hash.Murmur3_32HashFunction:hashCode()": "/**\n* Computes the hash code using class hash and a seed value.\n* @return integer hash code value\n*/",
        "com.google.common.hash.Murmur3_32HashFunction:mixK1(int)": "/**\n* Transforms the input integer k1 using bit manipulation and constants.\n* @param k1 input integer to be mixed\n* @return mixed integer after transformations\n*/",
        "com.google.common.hash.Murmur3_32HashFunction:mixH1(int,int)": "/**\n* Applies a mixing transformation to an integer hash.\n* @param h1 initial hash value\n* @param k1 key value to mix with hash\n* @return transformed hash value\n*/",
        "com.google.common.hash.Murmur3_32HashFunction:charToTwoUtf8Bytes(char)": "/**\n* Converts a 11-bit char to two UTF-8 bytes.\n* @param c character to convert\n* @return long representing two UTF-8 bytes\n*/",
        "com.google.common.hash.Murmur3_32HashFunction:charToThreeUtf8Bytes(char)": "/**\n* Converts a char to its equivalent three-byte UTF-8 representation.\n* @param c character to convert\n* @return long representing three UTF-8 bytes\n*/",
        "com.google.common.hash.Murmur3_32HashFunction:codePointToFourUtf8Bytes(int)": "/**\n* Converts a Unicode code point to its UTF-8 byte representation.\n* @param codePoint Unicode code point (0 to 0x10FFFF)\n* @return long representing four UTF-8 bytes\n*/",
        "com.google.common.hash.Murmur3_32HashFunction:bits()": "/**\n* Returns the number of bits used by the data type.\n* @return int representing the bit size (32 bits)\n*/",
        "com.google.common.hash.Murmur3_32HashFunction:newHasher()": "/**\n* Creates a new Murmur3_32Hasher instance.\n* @return Hasher initialized with the seed value\n*/",
        "com.google.common.hash.Murmur3_32HashFunction:getIntLittleEndian(byte[],int)": "/**\n* Retrieves an integer from a byte array in little-endian format.\n* @param input byte array containing data\n* @param offset starting index for reading bytes\n* @return integer value constructed from four bytes\n*/",
        "com.google.common.hash.Murmur3_32HashFunction:fmix(int,int)": "/**\n* Applies FMix hash function to an integer and length.\n* @param h1 initial hash value, @param length input length\n* @return HashCode instance derived from the processed hash\n*/",
        "com.google.common.hash.Murmur3_32HashFunction:hashInt(int)": "/**\n* Computes a HashCode from an integer input.\n* @param input integer to be hashed\n* @return HashCode derived from the input\n*/",
        "com.google.common.hash.Murmur3_32HashFunction:hashLong(long)": "/**\n* Computes hash code from a long input.\n* @param input long value to hash\n* @return HashCode derived from the input value\n*/",
        "com.google.common.hash.Murmur3_32HashFunction:hashUnencodedChars(java.lang.CharSequence)": "/**\n* Computes a hash from unencoded characters in a CharSequence.\n* @param input character sequence to hash\n* @return HashCode derived from the input characters\n*/",
        "com.google.common.hash.Murmur3_32HashFunction:hashString(java.lang.CharSequence,java.nio.charset.Charset)": "/**\n* Hashes a string using a specified charset, optimizing for UTF-8.\n* @param input the character sequence to hash\n* @param charset the charset for encoding the input\n* @return HashCode instance derived from the hashed input\n*/",
        "com.google.common.hash.Murmur3_32HashFunction:hashBytes(byte[],int,int)": "/**\n* Computes a HashCode from byte array input.\n* @param input byte array to hash, @param off start offset, @param len length to hash\n* @return HashCode derived from the input bytes\n*/"
    },
    "com.google.common.hash.Murmur3_128HashFunction": {
        "com.google.common.hash.Murmur3_128HashFunction:<init>(int)": "/**\n* Constructs a Murmur3_128 hash function with a specified seed.\n* @param seed initial value to influence hash output\n*/",
        "com.google.common.hash.Murmur3_128HashFunction:toString()": "/**\n* Returns a string representation of the hashing algorithm with its seed value.\n* @return formatted string indicating the hashing method and seed\n*/",
        "com.google.common.hash.Murmur3_128HashFunction:hashCode()": "/**\n* Computes the hash code using class hash and a seed value.\n* @return computed hash code as an integer\n*/",
        "com.google.common.hash.Murmur3_128HashFunction:bits()": "/**\n* Returns the number of bits, which is fixed at 128.\n* @return constant integer value of 128\n*/",
        "com.google.common.hash.Murmur3_128HashFunction:newHasher()": "/**** Creates a new Murmur3_128Hasher instance with the specified seed. \n* @return Hasher instance for hashing operations \n*/"
    },
    "com.google.common.hash.HashingInputStream": {
        "com.google.common.hash.HashingInputStream:read()": "/**\n* Reads a byte from the input stream and updates the hasher.\n* @return byte read or -1 if end of stream is reached\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.hash.HashingInputStream:reset()": "/**\n* Throws IOException indicating reset operation is not supported.\n* @throws IOException when reset is attempted\n*/",
        "com.google.common.hash.HashingInputStream:hash()": "/**\n* Computes and returns the hash code using the hasher instance.\n* @return HashCode object representing the computed hash\n*/",
        "com.google.common.hash.HashingInputStream:<init>(com.google.common.hash.HashFunction,java.io.InputStream)": "/**\n* Initializes HashingInputStream with a hash function and input stream.\n* @param hashFunction the hashing algorithm to use\n* @param in the input stream to be hashed\n*/",
        "com.google.common.hash.HashingInputStream:read(byte[],int,int)": "/**\n* Reads bytes into an array and updates the hasher.\n* @param bytes destination array, @param off start index, @param len max bytes to read\n* @return number of bytes read or -1 if end of stream\n*/"
    },
    "com.google.common.hash.HashingOutputStream": {
        "com.google.common.hash.HashingOutputStream:write(int)": "/**\n* Writes a byte to the output and updates the hasher.\n* @param b the byte to write\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.hash.HashingOutputStream:hash()": "/**\n* Computes and returns the hash code using the hasher.\n* @return HashCode object representing the computed hash\n*/",
        "com.google.common.hash.HashingOutputStream:close()": "/**\n* Closes the output stream, releasing any associated resources.\n* @throws IOException if an I/O error occurs during closing\n*/",
        "com.google.common.hash.HashingOutputStream:<init>(com.google.common.hash.HashFunction,java.io.OutputStream)": "/**\n* Constructs a HashingOutputStream with a hash function and output stream.\n* @param hashFunction the hash function to use\n* @param out the output stream to write data to\n*/",
        "com.google.common.hash.HashingOutputStream:write(byte[],int,int)": "/**\n* Writes bytes to output after processing with a hasher.\n* @param bytes byte array to write, @param off starting index, @param len number of bytes\n* @throws IOException if an I/O error occurs\n*/"
    },
    "com.google.common.hash.LittleEndianByteArray$UnsafeByteArray": {
        "com.google.common.hash.LittleEndianByteArray$UnsafeByteArray:getUnsafe()": "/**\n* Retrieves the Unsafe instance, using reflection if necessary.\n* @return Unsafe instance\n*/"
    },
    "com.google.common.hash.MacHashFunction$MacHasher": {
        "com.google.common.hash.MacHashFunction$MacHasher:<init>(javax.crypto.Mac)": "/**\n* Initializes MacHasher with a specified Mac instance.\n* @param mac the Mac object used for hashing\n*/",
        "com.google.common.hash.MacHashFunction$MacHasher:checkNotDone()": "/****\n* Ensures the Hasher is not in a done state before reuse.\n* @throws IllegalStateException if already done\n*/",
        "com.google.common.hash.MacHashFunction$MacHasher:update(byte)": "/**\n* Updates the hashing process with a byte.\n* @param b the byte to update the hash with\n*/",
        "com.google.common.hash.MacHashFunction$MacHasher:update(byte[])": "/**\n* Updates the hashing process with new byte data.\n* @param b byte array to update the hash\n*/",
        "com.google.common.hash.MacHashFunction$MacHasher:update(byte[],int,int)": "/**\n* Updates the MAC with the specified byte array segment.\n* @param b byte array to update from\n* @param off offset to start reading from\n* @param len number of bytes to read\n*/",
        "com.google.common.hash.MacHashFunction$MacHasher:update(java.nio.ByteBuffer)": "/**\n* Updates the MAC with new data from the ByteBuffer.\n* @param bytes buffer containing data to update the MAC\n*/",
        "com.google.common.hash.MacHashFunction$MacHasher:hash()": "/**\n* Computes and returns a HashCode after finalizing the hashing process.\n* @return HashCode object from the final byte array\n*/"
    },
    "com.google.common.hash.MacHashFunction": {
        "com.google.common.hash.MacHashFunction:getMac(java.lang.String,java.security.Key)": "/**\n* Initializes and returns a Mac instance for the specified algorithm and key.\n* @param algorithmName the name of the MAC algorithm\n* @param key the secret key for MAC initialization\n* @return initialized Mac instance\n*/",
        "com.google.common.hash.MacHashFunction:supportsClone(javax.crypto.Mac)": "/**\n* Checks if the given Mac object supports cloning.\n* @param mac the Mac object to check\n* @return true if cloning is supported, false otherwise\n*/",
        "com.google.common.hash.MacHashFunction:bits()": "/**\n* Returns the number of bits.\n* @return integer representing the bit count\n*/",
        "com.google.common.hash.MacHashFunction:newHasher()": "/**\n* Creates a new Hasher instance, cloning if supported; otherwise, initializes with Mac.\n* @return Hasher instance for hashing operations\n*/",
        "com.google.common.hash.MacHashFunction:<init>(java.lang.String,java.security.Key,java.lang.String)": "/**\n* Initializes MacHashFunction with algorithm, key, and string representation.\n* @param algorithmName MAC algorithm name\n* @param key secret key for MAC initialization\n* @param toString string representation of the function\n*/"
    },
    "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher": {
        "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:<init>(java.security.MessageDigest,int)": "/**\n* Initializes MessageDigestHasher with a MessageDigest and byte size.\n* @param digest MessageDigest instance for hashing\n* @param bytes number of bytes for the hash output\n*/",
        "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:checkNotDone()": "/**\n* Ensures the hasher is not done; throws exception if it is.\n*/",
        "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(byte)": "/**\n* Updates the digest with a byte after verifying the process is not complete.\n*/",
        "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(byte[],int,int)": "/**\n* Updates the digest with byte array data.\n* @param b byte array containing data to update\n* @param off offset to start reading from\n* @param len number of bytes to read\n*/",
        "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(java.nio.ByteBuffer)": "/**\n* Updates the digest with new byte data.\n* @param bytes data to be added to the digest\n*/",
        "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:hash()": "/**\n* Computes and returns the hash code after finalizing the digest.\n* @return HashCode object representing the computed hash\n*/"
    },
    "com.google.common.hash.MessageDigestHashFunction$SerializedForm": {
        "com.google.common.hash.MessageDigestHashFunction$SerializedForm:<init>(java.lang.String,int,java.lang.String)": "/**\n* Constructs a SerializedForm with specified algorithm, byte size, and string representation.\n* @param algorithmName name of the algorithm\n* @param bytes size in bytes\n* @param toString string representation of the form\n*/",
        "com.google.common.hash.MessageDigestHashFunction$SerializedForm:readResolve()": "/**\n* Resolves serialization by creating a MessageDigestHashFunction instance.\n* @return MessageDigestHashFunction object\n*/"
    },
    "com.google.common.hash.MessageDigestHashFunction": {
        "com.google.common.hash.MessageDigestHashFunction:getMessageDigest(java.lang.String)": "/**\n* Retrieves a MessageDigest instance for the specified algorithm.\n* @param algorithmName name of the cryptographic algorithm\n* @return MessageDigest instance for the algorithm\n*/",
        "com.google.common.hash.MessageDigestHashFunction:supportsClone(java.security.MessageDigest)": "/**\n* Checks if the MessageDigest supports cloning.\n* @param digest the MessageDigest instance to check\n* @return true if cloning is supported, false otherwise\n*/",
        "com.google.common.hash.MessageDigestHashFunction:writeReplace()": "/**\n* Prepares object for serialization by returning its SerializedForm.\n* @return SerializedForm instance containing algorithm, bytes, and string representation\n*/",
        "com.google.common.hash.MessageDigestHashFunction:readObject(java.io.ObjectInputStream)": "/**\n* Restricts object deserialization, throwing an exception if invoked.\n* @throws InvalidObjectException indicates deserialization is not allowed\n*/",
        "com.google.common.hash.MessageDigestHashFunction:bits()": "/**\n* Calculates total bits from byte count.\n* @return total number of bits as an integer\n*/",
        "com.google.common.hash.MessageDigestHashFunction:newHasher()": "/**\n* Creates a new Hasher instance using a prototype MessageDigest.\n* @return Hasher instance configured with the algorithm and bytes\n*/",
        "com.google.common.hash.MessageDigestHashFunction:<init>(java.lang.String,java.lang.String)": "/**\n* Initializes MessageDigestHashFunction with algorithm and string representation.\n* @param algorithmName cryptographic algorithm name\n* @param toString string representation of the hash function\n*/",
        "com.google.common.hash.MessageDigestHashFunction:<init>(java.lang.String,int,java.lang.String)": "/**\n* Constructs a MessageDigestHashFunction with specified algorithm and byte length.\n* @param algorithmName cryptographic algorithm name\n* @param bytes length of the hash output\n* @param toString string representation of the function\n*/"
    },
    "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher": {
        "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:mixK1(long)": "/**\n* Mixes the input long value using constants C1 and C2.\n* @param k1 input long value to be mixed\n* @return mixed long value after transformations\n*/",
        "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:mixK2(long)": "/**\n* Mixes the input long value using constants and bit manipulation.\n* @param k2 input value to be mixed\n* @return mixed long value after transformations\n*/",
        "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:fmix64(long)": "/**\n* Applies FMix64 hash function to a 64-bit integer.\n* @param k input long value to be mixed\n* @return mixed long value after applying FMix64\n*/",
        "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:bmix64(long,long)": "/**\n* Updates state variables h1 and h2 using mixed long inputs k1 and k2.\n* @param k1 first input long value\n* @param k2 second input long value\n*/",
        "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:processRemaining(java.nio.ByteBuffer)": "/**\n* Processes remaining bytes from ByteBuffer, mixing them into two long values.\n* @param bb ByteBuffer containing bytes to process\n*/",
        "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:process(java.nio.ByteBuffer)": "/**\n* Processes ByteBuffer to update state using two long values.\n* @param bb ByteBuffer containing long inputs for processing\n*/",
        "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:<init>(int)": "/**\n* Initializes Murmur3_128Hasher with a seed value.\n* @param seed initial value for hash calculations\n*/",
        "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:makeHash()": "/**\n* Generates a HashCode using mixed length values.\n* @return HashCode object from the computed byte array\n*/"
    },
    "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher": {
        "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:<init>(int)": "/**\n* Initializes Murmur3_32Hasher with a seed value.\n* @param seed initial hash seed\n*/",
        "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:update(int,long)": "/**\n* Updates the buffer and shifts for a specified number of bytes.\n* @param nBytes number of bytes to update (1 to 4)\n* @param update value to incorporate into the buffer\n*/",
        "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:hash()": "/**\n* Computes and returns the hash code after validating state.\n* @return HashCode object representing the computed hash\n*/",
        "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putByte(byte)": "/**\n* Updates buffer with a byte and returns the Hasher instance.\n* @param b byte to update in the buffer\n* @return Hasher instance for method chaining\n*/",
        "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putInt(int)": "/**\n* Inserts an integer into the hasher and returns the updated hasher instance.\n* @param i the integer to insert\n* @return Hasher instance for chaining\n*/",
        "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putLong(long)": "/**\n* Adds a long value to the hasher.\n* @param l the long value to add\n* @return this Hasher instance for chaining\n*/",
        "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putChar(char)": "/**\n* Adds a character to the hasher and returns the updated hasher instance.\n* @param c character to add\n* @return updated Hasher instance\n*/",
        "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putBytes(java.nio.ByteBuffer)": "/**\n* Processes bytes from a ByteBuffer and updates the hasher.\n* @param buffer source ByteBuffer containing bytes to process\n* @return Hasher instance for method chaining\n*/",
        "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putBytes(byte[],int,int)": "/**\n* Adds bytes from an array to the Hasher.\n* @param bytes byte array to add, @param off start index, @param len number of bytes to add\n* @return Hasher instance for method chaining\n*/",
        "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putString(java.lang.CharSequence,java.nio.charset.Charset)": "/**\n* Converts a CharSequence to bytes using a specified charset.\n* @param input string to convert\n* @param charset character encoding to use\n* @return this Hasher instance for chaining\n*/"
    },
    "com.google.common.hash.SipHashFunction$SipHasher": {
        "com.google.common.hash.SipHashFunction$SipHasher:processRemaining(java.nio.ByteBuffer)": "/**\n* Processes remaining bytes in the buffer, updating finalM and byte count b.\n* @param buffer ByteBuffer containing data to process\n*/",
        "com.google.common.hash.SipHashFunction$SipHasher:sipRound(int)": "/**\n* Performs SIP hashing rounds for a specified number of iterations.\n* @param iterations number of rounds to execute\n*/",
        "com.google.common.hash.SipHashFunction$SipHasher:processM(long)": "/**\n* Processes a long value by modifying internal state with SIP hashing.\n* @param m value to be processed\n*/",
        "com.google.common.hash.SipHashFunction$SipHasher:process(java.nio.ByteBuffer)": "/**\n* Processes a ByteBuffer by updating state and processing a long value.\n* @param buffer input ByteBuffer to extract long value\n*/",
        "com.google.common.hash.SipHashFunction$SipHasher:<init>(int,int,long,long)": "/**\n* Initializes SipHasher with parameters for hashing.\n* @param c first parameter affecting hash computation\n* @param d second parameter affecting hash computation\n* @param k0 first key for hash state\n* @param k1 second key for hash state\n*/",
        "com.google.common.hash.SipHashFunction$SipHasher:makeHash()": "/**\n* Creates a HashCode object using finalM and SIP hashing.\n* @return HashCode initialized with combined hash values\n*/"
    },
    "com.google.common.hash.SipHashFunction": {
        "com.google.common.hash.SipHashFunction:toString()": "/**\n* Returns a string representation of the SipHash function with parameters.\n* @return formatted string of SipHash parameters\n*/",
        "com.google.common.hash.SipHashFunction:hashCode()": "/**\n* Computes the hash code for the object based on class and fields.\n* @return computed hash code as an integer\n*/",
        "com.google.common.hash.SipHashFunction:bits()": "/**\n* Returns the number of bits used by the data type.\n* @return integer representing the bit count, always 64\n*/",
        "com.google.common.hash.SipHashFunction:<init>(int,int,long,long)": "/**\n* Initializes SipHash function parameters with validation.\n* @param c number of iterations for compression\n* @param d number of iterations for finalization\n* @param k0 first key for hashing\n* @param k1 second key for hashing\n*/",
        "com.google.common.hash.SipHashFunction:newHasher()": "/**\n* Creates a new Hasher instance using SipHasher.\n* @return Hasher object for hashing operations\n*/"
    },
    "com.google.common.html.HtmlEscapers": {
        "com.google.common.html.HtmlEscapers:<init>()": "/**\n* Private constructor to prevent instantiation of HtmlEscapers class.\n*/"
    },
    "com.google.common.io.AppendableWriter": {
        "com.google.common.io.AppendableWriter:checkNotClosed()": "/**\n* Verifies if the writer is closed and throws IOException if it is.\n* @throws IOException if the writer is closed\n*/",
        "com.google.common.io.AppendableWriter:close()": "/**\n* Closes the resource and marks it as closed.\n* @throws IOException if an I/O error occurs during closing\n*/",
        "com.google.common.io.AppendableWriter:<init>(java.lang.Appendable)": "/**\n* Initializes an AppendableWriter with a non-null target.\n* @param target the Appendable object to write to\n*/",
        "com.google.common.io.AppendableWriter:write(char[],int,int)": "/**\n* Writes characters from a buffer to the target.\n* @param cbuf character buffer, @param off offset, @param len length to write\n* @throws IOException if the writer is closed\n*/",
        "com.google.common.io.AppendableWriter:write(int)": "/**\n* Writes a character to the target.\n* @param c character to write\n* @throws IOException if the writer is closed\n*/",
        "com.google.common.io.AppendableWriter:write(java.lang.String)": "/**\n* Writes a string to the target after validating input and state.\n* @param str the string to be written\n* @throws IOException if the writer is closed\n*/",
        "com.google.common.io.AppendableWriter:write(java.lang.String,int,int)": "/**\n* Writes a substring to the target.\n* @param str the string to write, @param off the start index, @param len the length to write\n* @throws IOException if the writer is closed\n*/",
        "com.google.common.io.AppendableWriter:flush()": "/**\n* Flushes the output to the target if it's Flushable.\n* @throws IOException if the writer is closed or flush fails\n*/",
        "com.google.common.io.AppendableWriter:append(char)": "/**\n* Appends a character to the writer.\n* @param c character to append\n* @return this Writer instance\n* @throws IOException if the writer is closed\n*/",
        "com.google.common.io.AppendableWriter:append(java.lang.CharSequence)": "/**\n* Appends a character sequence to the writer.\n* @param charSeq sequence to append; may be null\n* @return this Writer instance\n* @throws IOException if the writer is closed\n*/",
        "com.google.common.io.AppendableWriter:append(java.lang.CharSequence,int,int)": "/**\n* Appends a subsequence of characters to the writer.\n* @param charSeq sequence to append, @param start start index, @param end end index\n* @return this Writer instance\n* @throws IOException if the writer is closed\n*/"
    },
    "com.google.common.io.ByteSink": {
        "com.google.common.io.ByteSink:<init>()": "/**\n* Protected constructor for ByteSink class.\n*/",
        "com.google.common.io.ByteSink:asCharSink(java.nio.charset.Charset)": "/**\n* Converts the current object to a CharSink using the specified charset.\n* @param charset character encoding to use\n* @return CharSink instance for the given charset\n*/",
        "com.google.common.io.ByteSink:openBufferedStream()": "/**\n* Opens a buffered output stream from a source.\n* @return BufferedOutputStream wrapping the output stream\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.ByteSink:write(byte[])": "/**\n* Writes byte array to an output stream.\n* @param bytes data to write, must not be null\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.ByteSink:writeFrom(java.io.InputStream)": "/**\n* Writes bytes from an InputStream to an OutputStream.\n* @param input source InputStream\n* @return total bytes written\n* @throws IOException if an I/O error occurs\n*/"
    },
    "com.google.common.io.ByteSource": {
        "com.google.common.io.ByteSource:<init>()": "/**\n* Default constructor for ByteSource class.\n*/",
        "com.google.common.io.ByteSource:openBufferedStream()": "/**\n* Opens a buffered input stream from an underlying source.\n* @return BufferedInputStream wrapped around the original stream\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.ByteSource:empty()": "/**\n* Returns an empty ByteSource instance.\n* @return an instance of EmptyByteSource\n*/",
        "com.google.common.io.ByteSource:slice(long,long)": "/**\n* Creates a sliced ByteSource from the specified offset and length.\n* @param offset starting position of the slice\n* @param length number of bytes in the slice\n* @return a new ByteSource representing the sliced data\n*/",
        "com.google.common.io.ByteSource:asCharSource(java.nio.charset.Charset)": "/**\n* Converts to CharSource with specified character set.\n* @param charset the character set for conversion\n* @return CharSource instance configured with the charset\n*/",
        "com.google.common.io.ByteSource:sizeIfKnown()": "/**\n* Returns an absent Optional indicating size is not known.\n* @return Optional<Long> representing absence of size value\n*/",
        "com.google.common.io.ByteSource:concat(java.lang.Iterable)": "/********************/",
        "com.google.common.io.ByteSource:countBySkipping(java.io.InputStream)": "/**\n* Counts total bytes skipped from InputStream until no more can be skipped.\n* @param in InputStream to skip bytes from\n* @return total bytes skipped\n*/",
        "com.google.common.io.ByteSource:wrap(byte[])": "/**\n* Wraps byte array into a ByteSource.\n* @param b byte array to be wrapped\n* @return ByteSource constructed from the byte array\n*/",
        "com.google.common.io.ByteSource:isEmpty()": "/**\n* Checks if the stream is empty. Throws IOException on errors.\n* @return true if empty, false otherwise\n*/",
        "com.google.common.io.ByteSource:size()": "/**\n* Calculates the size of a stream, returning 0 if unknown.\n* @return size in bytes or throws IOException on error\n*/",
        "com.google.common.io.ByteSource:copyTo(java.io.OutputStream)": "/**\n* Copies bytes from an InputStream to an OutputStream.\n* @param output destination OutputStream\n* @return total bytes copied\n* @throws IOException if an error occurs during copying or closing\n*/",
        "com.google.common.io.ByteSource:copyTo(com.google.common.io.ByteSink)": "/**\n* Copies bytes from an InputStream to a ByteSink.\n* @param sink destination ByteSink\n* @return total bytes copied\n* @throws IOException if an error occurs during copying\n*/",
        "com.google.common.io.ByteSource:read()": "/**\n* Reads data from an InputStream into a byte array.\n* @return byte array of data read from the stream\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.ByteSource:read(com.google.common.io.ByteProcessor)": "/**** Reads bytes from an InputStream using a ByteProcessor. \n* @param processor the ByteProcessor to process bytes\n* @return processed result or null if no useful result\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.ByteSource:contentEquals(com.google.common.io.ByteSource)": "/**\n* Compares content of this ByteSource with another.\n* @param other ByteSource to compare with\n* @return true if contents are equal, false otherwise\n*/",
        "com.google.common.io.ByteSource:hash(com.google.common.hash.HashFunction)": "/**\n* Computes hash code using the provided hash function.\n* @param hashFunction function to create a new hasher\n* @return computed HashCode object\n* @throws IOException if an error occurs during copying\n*/",
        "com.google.common.io.ByteSource:concat(java.util.Iterator)": "/**\n* Concatenates ByteSource elements from an iterator into a single ByteSource.\n* @param sources iterator of ByteSource elements\n* @return concatenated ByteSource\n*/"
    },
    "com.google.common.io.BaseEncoding$DecodingException": {
        "com.google.common.io.BaseEncoding$DecodingException:<init>(java.lang.String)": "/**\n* Constructs a DecodingException with an optional message.\n* @param message descriptive error message, can be null\n*/"
    },
    "com.google.common.io.BaseEncoding$Alphabet": {
        "com.google.common.io.BaseEncoding$Alphabet:equals(java.lang.Object)": "/**\n* Compares this Alphabet with another for equality.\n* @param other object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.io.BaseEncoding$Alphabet:hashCode()": "/**\n* Computes hash code for the object based on character array and case sensitivity.\n* @return computed hash code as an integer\n*/",
        "com.google.common.io.BaseEncoding$Alphabet:encode(int)": "/**\n* Encodes an integer to a character.\n* @param bits index for character lookup\n* @return character corresponding to the index\n*/",
        "com.google.common.io.BaseEncoding$Alphabet:isValidPaddingStartPosition(int)": "/**\n* Checks if the padding start position is valid based on the index.\n* @param index position to validate\n* @return true if valid, false otherwise\n*/",
        "com.google.common.io.BaseEncoding$Alphabet:matches(char)": "/**\n* Checks if character 'c' is valid in the decodabet.\n* @param c character to validate\n* @return true if valid, false otherwise\n*/",
        "com.google.common.io.BaseEncoding$Alphabet:canDecode(char)": "/**\n* Checks if a character can be decoded.\n* @param ch character to check\n* @return true if decodable, false otherwise\n*/",
        "com.google.common.io.BaseEncoding$Alphabet:hasUpperCase()": "/**\n* Checks if any character in 'chars' is uppercase.\n* @return true if an uppercase character is found, false otherwise\n*/",
        "com.google.common.io.BaseEncoding$Alphabet:hasLowerCase()": "/**** Checks if any character in 'chars' is a lowercase letter. \n* @return true if a lowercase letter is found, false otherwise \n*/",
        "com.google.common.io.BaseEncoding$Alphabet:decodabetFor(char[])": "/**\n* Creates a decoding array for ASCII characters.\n* @param chars array of characters to decode\n* @return byte array mapping characters to indices\n*/",
        "com.google.common.io.BaseEncoding$Alphabet:decode(char)": "/**\n* Decodes a character to an integer value.\n* @param ch character to decode\n* @return decoded integer value\n* @throws DecodingException if character is unrecognized\n*/",
        "com.google.common.io.BaseEncoding$Alphabet:<init>(java.lang.String,char[],byte[],boolean)": "/**\n* Initializes an Alphabet instance with name, chars, decodabet, and case sensitivity.\n* @param name the name of the alphabet\n* @param chars character array for the alphabet\n* @param decodabet byte array for decoding\n* @param ignoreCase flag to ignore case sensitivity\n*/",
        "com.google.common.io.BaseEncoding$Alphabet:<init>(java.lang.String,char[])": "/**\n* Constructs an Alphabet with name and characters, using a decoding array.\n* @param name the name of the alphabet\n* @param chars character array for the alphabet\n*/",
        "com.google.common.io.BaseEncoding$Alphabet:ignoreCase()": "/**\n* Returns a new Alphabet instance with case sensitivity ignored.\n* @return Alphabet object with updated decodabet for case insensitivity\n*/",
        "com.google.common.io.BaseEncoding$Alphabet:upperCase()": "/**\n* Returns an Alphabet instance with all characters converted to uppercase.\n* @return Uppercase Alphabet object or this if no lowercase characters exist\n*/",
        "com.google.common.io.BaseEncoding$Alphabet:lowerCase()": "/**\n* Converts alphabet to lowercase if it contains uppercase characters.\n* @return Alphabet instance in lowercase or this if no uppercase found\n*/"
    },
    "com.google.common.io.BaseEncoding": {
        "com.google.common.io.BaseEncoding:<init>()": "/**\n* Constructs a BaseEncoding object for encoding and decoding data.\n*/",
        "com.google.common.io.BaseEncoding:extract(byte[],int)": "/**\n* Extracts a byte array of specified length from the result array.\n* @param result the source byte array\n* @param length the desired length of the extracted array\n* @return a byte array of the specified length\n*/",
        "com.google.common.io.BaseEncoding:base16()": "/**\n* Returns the Base16 encoding instance.\n* @return BaseEncoding object for Base16 encoding\n*/",
        "com.google.common.io.BaseEncoding:encodingSink(com.google.common.io.CharSink)": "/**\n* Creates a ByteSink from a given CharSink.\n* @param encodedSink CharSink to encode data from\n* @return ByteSink for writing encoded data\n*/",
        "com.google.common.io.BaseEncoding:decodingSource(com.google.common.io.CharSource)": "/**\n* Creates a ByteSource from a CharSource by decoding its content.\n* @param encodedSource source to decode\n* @return ByteSource for decoded content\n*/",
        "com.google.common.io.BaseEncoding:trimTrailingPadding(java.lang.CharSequence)": "/**\n* Trims trailing padding from a CharSequence.\n* @param chars input CharSequence to process\n* @return non-null CharSequence with padding trimmed\n*/",
        "com.google.common.io.BaseEncoding:ignoringReader(java.io.Reader,java.lang.String)": "/**\n* Creates a Reader that ignores specified characters during reading.\n* @param delegate the original Reader to delegate to\n* @param toIgnore characters to be ignored in the output\n* @return a new Reader that skips specified characters\n*/",
        "com.google.common.io.BaseEncoding:separatingAppendable(java.lang.Appendable,java.lang.String,int)": "/**\n* Creates an Appendable that inserts a separator after a specified number of characters.\n* @param delegate the underlying Appendable to write to\n* @param separator the string to insert as a separator\n* @param afterEveryChars number of characters before inserting the separator\n* @return a new Appendable with separator functionality\n*/",
        "com.google.common.io.BaseEncoding:decodeChecked(java.lang.CharSequence)": "/**\n* Decodes a checked CharSequence into a byte array.\n* @param chars input CharSequence to decode\n* @return byte array of decoded data\n*/",
        "com.google.common.io.BaseEncoding:separatingWriter(java.io.Writer,java.lang.String,int)": "/**\n* Creates a Writer that appends a separator after a specified number of characters.\n* @param delegate the underlying Writer to write to\n* @param separator the string to insert as a separator\n* @param afterEveryChars number of characters before inserting the separator\n* @return a new Writer with separator functionality\n*/",
        "com.google.common.io.BaseEncoding:decode(java.lang.CharSequence)": "/**\n* Decodes a CharSequence into a byte array.\n* @param chars input CharSequence to decode\n* @return byte array of decoded data\n*/",
        "com.google.common.io.BaseEncoding:encode(byte[],int,int)": "/**\n* Encodes a byte array to a String.\n* @param bytes input byte array, @param off start offset, @param len length to encode\n* @return encoded String result\n*/",
        "com.google.common.io.BaseEncoding:encode(byte[])": "/**\n* Encodes a byte array to a String.\n* @param bytes input byte array to encode\n* @return encoded String result\n*/"
    },
    "com.google.common.io.BaseEncoding$SeparatedBaseEncoding": {
        "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:encodingStream(java.io.Writer)": "/**\n* Returns an OutputStream for encoding from a given Writer.\n* @param output the Writer to encode from\n* @return an OutputStream for encoding data\n*/",
        "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:encodeTo(java.lang.Appendable,byte[],int,int)": "/**\n* Encodes byte array to the target Appendable with separators.\n* @param target the Appendable to write to\n* @param bytes the byte array to encode\n* @param off the starting offset in the byte array\n* @param len the number of bytes to encode\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:maxDecodedSize(int)": "/**\n* Returns the maximum decoded size for the given character count.\n* @param chars number of characters to decode\n* @return maximum decoded size as an integer\n*/",
        "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:canDecode(java.lang.CharSequence)": "/**\n* Checks if the given characters can be decoded, ignoring separators.\n* @param chars input character sequence\n* @return true if decodable, false otherwise\n*/",
        "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:decodeTo(byte[],java.lang.CharSequence)": "/**\n* Decodes characters to a byte array after removing separators.\n* @param target byte array to store decoded data\n* @param chars input character sequence to decode\n* @return number of bytes written to target\n* @throws DecodingException if decoding fails\n*/",
        "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:decodingStream(java.io.Reader)": "/**\n* Returns an InputStream for decoding from the specified Reader.\n* @param reader the Reader to decode from\n* @return InputStream for the decoded content\n*/",
        "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:omitPadding()": "/**\n* Configures encoding to omit padding and add a separator.\n* @return BaseEncoding with padding omitted and custom separator\n*/",
        "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:withPadChar(char)": "/**\n* Configures padding character and returns updated BaseEncoding.\n* @param padChar character used for padding\n* @return modified BaseEncoding instance\n*/",
        "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:withSeparator(java.lang.String,int)": "/**\n* Throws UnsupportedOperationException if a separator is already set.\n* @param separator the string to use as a separator\n* @param afterEveryChars number of chars after which to insert the separator\n*/",
        "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:upperCase()": "/**\n* Returns a BaseEncoding with uppercase letters and specified separator.\n* @return BaseEncoding instance with updated formatting\n*/",
        "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:lowerCase()": "/**\n* Returns a lower-case BaseEncoding with specified separator.\n* @return modified BaseEncoding instance\n*/",
        "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:ignoreCase()": "/**\n* Returns a BaseEncoding that ignores case and applies a separator.\n* @return modified BaseEncoding with case ignored and specified separator\n*/",
        "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:toString()": "/**\n* Returns a string representation of the object with separator details.\n* @return formatted string including delegate and separator info\n*/",
        "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:<init>(com.google.common.io.BaseEncoding,java.lang.String,int)": "/**\n* Constructs SeparatedBaseEncoding with delegate, separator, and interval for separation.\n* @param delegate BaseEncoding for encoding/decoding\n* @param separator String to insert between encoded segments\n* @param afterEveryChars Interval after which the separator is added\n*/",
        "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:trimTrailingPadding(java.lang.CharSequence)": "/**\n* Trims trailing padding from the provided CharSequence.\n* @param chars input CharSequence to process\n* @return trimmed CharSequence without trailing padding\n*/",
        "com.google.common.io.BaseEncoding$SeparatedBaseEncoding:maxEncodedSize(int)": "/**\n* Calculates maximum encoded size based on input bytes.\n* @param bytes input size in bytes\n* @return maximum encoded size including separators\n*/"
    },
    "com.google.common.io.BaseEncoding$StandardBaseEncoding": {
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:toString()": "/**\n* Returns a string representation of the BaseEncoding object.\n* @return descriptive string including alphabet and padding info\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:maxDecodedSize(int)": "/**\n* Calculates maximum decoded size in bytes for given character count.\n* @param chars number of characters to decode\n* @return maximum decoded size in bytes\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:encodingStream(java.io.Writer)": "/**\n* Creates an OutputStream that encodes data from a Writer using a specified alphabet.\n* @param out the Writer to encode data into\n* @return an OutputStream for writing encoded data\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:trimTrailingPadding(java.lang.CharSequence)": "/**\n* Trims trailing padding characters from the input CharSequence.\n* @param chars input sequence to trim\n* @return trimmed CharSequence without trailing padding\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:decodingStream(java.io.Reader)": "/**\n* Creates an InputStream that decodes characters from a Reader.\n* @param reader the Reader to decode from\n* @return an InputStream for reading decoded bytes\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:equals(java.lang.Object)": "/**\n* Compares this StandardBaseEncoding with another for equality.\n* @param other object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:hashCode()": "/**\n* Computes hash code for the object using alphabet and paddingChar.\n* @return computed hash code as an integer\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:<init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)": "/**\n* Constructs a StandardBaseEncoding with an alphabet and optional padding character.\n* @param alphabet the encoding alphabet\n* @param paddingChar optional character used for padding, must not be in alphabet\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:canDecode(java.lang.CharSequence)": "/**\n* Validates if the given CharSequence can be decoded.\n* @param chars input sequence to check\n* @return true if decodable, false otherwise\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:decodeTo(byte[],java.lang.CharSequence)": "/**\n* Decodes characters into a byte array.\n* @param target output byte array\n* @param chars input character sequence\n* @return number of bytes written\n* @throws DecodingException if input is invalid\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:withSeparator(java.lang.String,int)": "/**\n* Creates a BaseEncoding with a specified separator and interval for separation.\n* @param separator string to insert between encoded segments\n* @param afterEveryChars interval after which the separator is added\n* @return new SeparatedBaseEncoding instance\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)": "/**\n* Creates a new StandardBaseEncoding instance.\n* @param alphabet the encoding alphabet\n* @param paddingChar optional padding character\n* @return a new StandardBaseEncoding object\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:maxEncodedSize(int)": "/**\n* Calculates maximum encoded size based on input bytes.\n* @param bytes input byte count\n* @return maximum encoded size as an integer\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:encodeChunkTo(java.lang.Appendable,byte[],int,int)": "/**\n* Encodes a byte chunk to a target Appendable.\n* @param target destination for encoded characters\n* @param bytes input byte array\n* @param off start offset in bytes\n* @param len number of bytes to encode\n* @throws IOException if writing to target fails\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:omitPadding()": "/**\n* Returns a BaseEncoding without padding.\n* @return BaseEncoding instance with padding omitted\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:withPadChar(char)": "/**\n* Returns a BaseEncoding with specified padding character.\n* @param padChar character used for padding\n* @return modified BaseEncoding instance\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:encodeTo(java.lang.Appendable,byte[],int,int)": "/**\n* Encodes byte array to Appendable in chunks.\n* @param target destination for encoded output\n* @param bytes input byte array\n* @param off start offset in bytes\n* @param len number of bytes to encode\n* @throws IOException if writing to target fails\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:<init>(java.lang.String,java.lang.String,java.lang.Character)": "/**\n* Constructs a StandardBaseEncoding with a name, alphabet characters, and optional padding.\n* @param name name of the encoding\n* @param alphabetChars characters used for encoding\n* @param paddingChar optional padding character, can be null\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:ignoreCase()": "/**\n* Returns a BaseEncoding instance with case insensitivity.\n* @return BaseEncoding object for case-insensitive encoding\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:upperCase()": "/**\n* Returns an uppercase BaseEncoding instance.\n* @return BaseEncoding object, cached or newly created\n*/",
        "com.google.common.io.BaseEncoding$StandardBaseEncoding:lowerCase()": "/**\n* Returns a lowercase BaseEncoding instance.\n* @return BaseEncoding in lowercase or cached instance if available\n*/"
    },
    "com.google.common.io.CharSink": {
        "com.google.common.io.CharSink:<init>()": "/**\n* Protected constructor for CharSink class.\n*/",
        "com.google.common.io.CharSink:openBufferedStream()": "/**\n* Opens a buffered stream for writing.\n* @return BufferedWriter instance for writing data\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.CharSink:writeLines(java.util.Iterator,java.lang.String)": "/**\n* Writes lines to a buffered stream with a specified line separator.\n* @param lines iterator of lines to write\n* @param lineSeparator string used to separate lines\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.CharSink:writeLines(java.lang.Iterable,java.lang.String)": "/**\n* Writes lines from an iterable to a stream with a specified separator.\n* @param lines iterable of lines to write\n* @param lineSeparator string used to separate lines\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.CharSink:writeLines(java.util.stream.Stream,java.lang.String)": "/**\n* Writes lines from a stream to a buffered output with a specified separator.\n* @param lines stream of lines to write\n* @param lineSeparator string used to separate lines\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.CharSink:writeLines(java.lang.Iterable)": "/**\n* Writes lines to a stream using the system's line separator.\n* @param lines iterable of lines to write\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.CharSink:writeLines(java.util.stream.Stream)": "/**\n* Writes lines to output using a default line separator.\n* @param lines stream of lines to write\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.CharSink:write(java.lang.CharSequence)": "/**\n* Writes the given CharSequence to a stream.\n* @param charSequence the data to write\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.CharSink:writeFrom(java.lang.Readable)": "/**\n* Writes characters from a Readable to a stream and returns the count.\n* @param readable source of characters to write\n* @return number of characters written\n*/"
    },
    "com.google.common.io.ByteSink$AsCharSink": {
        "com.google.common.io.ByteSink$AsCharSink:openStream()": "/**\n* Opens a stream for writing with the specified charset.\n* @return Writer for output; throws IOException on failure\n*/",
        "com.google.common.io.ByteSink$AsCharSink:toString()": "/**\n* Returns a string representation of the ByteSink with charset information.\n* @return descriptive string of the ByteSink object\n*/"
    },
    "com.google.common.io.Closer": {
        "com.google.common.io.Closer:register(java.io.Closeable)": "/**\n* Registers a Closeable object and returns it.\n* @param closeable the Closeable to register, may be null\n* @return the registered Closeable object\n*/",
        "com.google.common.io.Closer:<init>(com.google.common.io.Closer$Suppressor)": "/**\n* Initializes Closer with a non-null Suppressor.\n* @param suppressor non-null Suppressor instance\n*/",
        "com.google.common.io.Closer:create()": "/**** Creates a new Closer instance with a suppressor. \n* @return Closer object initialized with SUPPRESSING_SUPPRESSOR \n*/",
        "com.google.common.io.Closer:rethrow(java.lang.Throwable)": "/**\n* Rethrows a Throwable as a RuntimeException after checks.\n* @param e the Throwable to rethrow\n* @throws IOException if e is an instance of IOException\n*/",
        "com.google.common.io.Closer:rethrow(java.lang.Throwable,java.lang.Class)": "/**\n* Rethrows a Throwable as a RuntimeException after validation.\n* @param e the Throwable to rethrow\n* @param declaredType the Class type for instance checking\n* @throws IOException if e is an instance of IOException\n* @throws X if e is an instance of declaredType\n*/",
        "com.google.common.io.Closer:close()": "/**\n* Closes resources in LIFO order, suppressing exceptions and rethrowing if necessary.\n* @throws IOException if an error occurs during closing\n*/",
        "com.google.common.io.Closer:rethrow(java.lang.Throwable,java.lang.Class,java.lang.Class)": "/**\n* Rethrows a Throwable as a RuntimeException or specified checked exception types.\n* @param e the Throwable to rethrow\n* @param declaredType1 first checked exception type\n* @param declaredType2 second checked exception type\n* @throws IOException if e is an instance of IOException\n* @throws X1 if e is an instance of declaredType1\n* @throws X2 if e is an instance of declaredType2\n*/"
    },
    "com.google.common.io.CharSource": {
        "com.google.common.io.CharSource:<init>()": "/**\n* Constructor for CharSource class, initializes a new instance.\n*/",
        "com.google.common.io.CharSource:asByteSource(java.nio.charset.Charset)": "/**\n* Converts the current object to a ByteSource using the specified charset.\n* @param charset the character set to use for conversion\n* @return a ByteSource representing the current object\n*/",
        "com.google.common.io.CharSource:empty()": "/**\n* Returns an instance of an empty CharSource.\n* @return CharSource representing no characters\n*/",
        "com.google.common.io.CharSource:openBufferedStream()": "/**\n* Opens a BufferedReader from a stream.\n* @return BufferedReader instance for reading data\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.CharSource:countBySkipping(java.io.Reader)": "/**\n* Counts bytes skipped from the reader until EOF.\n* @param reader the Reader to skip bytes from\n* @return total number of bytes skipped\n*/",
        "com.google.common.io.CharSource:lines()": "/**\n* Returns a stream of lines from a buffered reader.\n* @return Stream of strings from the reader\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.CharSource:lengthIfKnown()": "/**\n* Returns an absent Optional indicating unknown length.\n* @return Optional<Long> representing absence of length value\n*/",
        "com.google.common.io.CharSource:concat(java.lang.Iterable)": "/**\n* Concatenates multiple CharSource instances into a single source.\n* @param sources iterable collection of CharSource instances\n* @return ConcatenatedCharSource combining all sources\n*/",
        "com.google.common.io.CharSource:forEachLine(java.util.function.Consumer)": "/**\n* Processes each line from a stream using the provided action.\n* @param action consumer to apply on each line\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.CharSource:wrap(java.lang.CharSequence)": "/**\n* Wraps CharSequence in CharSource.\n* @param charSequence the CharSequence to wrap\n* @return CharSource instance based on the type of CharSequence\n*/",
        "com.google.common.io.CharSource:length()": "/**\n* Computes the length of a stream, returning it or calculating by skipping bytes.\n* @return length in bytes\n* @throws IOException if an error occurs during stream processing\n*/",
        "com.google.common.io.CharSource:copyTo(java.lang.Appendable)": "/**\n* Copies characters from a stream to an Appendable.\n* @param appendable destination for copied characters\n* @return total number of characters copied\n* @throws IOException if an error occurs during copying\n*/",
        "com.google.common.io.CharSource:copyTo(com.google.common.io.CharSink)": "/**\n* Copies characters from a stream to a CharSink.\n* @param sink destination CharSink for character output\n* @return number of characters copied\n*/",
        "com.google.common.io.CharSource:readFirstLine()": "/**\n* Reads the first line from a buffered stream.\n* @return the first line as a String or null if none exists\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.CharSource:readLines(com.google.common.io.LineProcessor)": "/**\n* Reads lines using a LineProcessor and manages resources.\n* @param processor processes each line and returns a result\n* @return result from the LineProcessor\n* @throws IOException if an error occurs during reading\n*/",
        "com.google.common.io.CharSource:isEmpty()": "/**\n* Checks if the stream is empty.\n* @return true if empty, false otherwise\n* @throws IOException if an error occurs during stream operations\n*/",
        "com.google.common.io.CharSource:read()": "/**\n* Reads content from a stream and returns it as a String.\n* @return String content from the stream\n* @throws IOException if an error occurs during reading or closing\n*/",
        "com.google.common.io.CharSource:concat(java.util.Iterator)": "/**\n* Concatenates CharSource instances from an iterator.\n* @param sources iterator of CharSource instances\n* @return ConcatenatedCharSource from the provided sources\n*/",
        "com.google.common.io.CharSource:readLines()": "/**\n* Reads lines from a buffered stream and returns them as an ImmutableList.\n* @return ImmutableList of lines read\n* @throws IOException if an I/O error occurs\n*/"
    },
    "com.google.common.io.ByteSource$AsCharSource": {
        "com.google.common.io.ByteSource$AsCharSource:openStream()": "/**\n* Opens a stream for reading bytes as characters.\n* @return Reader for the byte stream\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.ByteSource$AsCharSource:toString()": "/**\n* Returns a string representation of the ByteSource with charset info.\n* @return formatted string indicating charset used\n*/",
        "com.google.common.io.ByteSource$AsCharSource:asByteSource(java.nio.charset.Charset)": "/**\n* Converts object to ByteSource using specified charset.\n* @param charset the character set for conversion\n* @return ByteSource instance based on charset match\n*/",
        "com.google.common.io.ByteSource$AsCharSource:read()": "/**\n* Reads data from an InputStream and returns it as a String.\n* @return String representation of the data read\n* @throws IOException if an I/O error occurs\n*/"
    },
    "com.google.common.io.ByteSource$ByteArrayByteSource": {
        "com.google.common.io.ByteSource$ByteArrayByteSource:openStream()": "/**\n* Opens an input stream from a byte array.\n* @return InputStream for the specified byte range\n*/",
        "com.google.common.io.ByteSource$ByteArrayByteSource:read()": "/**\n* Reads a byte range from the array.\n* @return byte array from specified offset to length\n*/",
        "com.google.common.io.ByteSource$ByteArrayByteSource:read(com.google.common.io.ByteProcessor)": "/**\n* Reads bytes and processes them using the provided ByteProcessor.\n* @param processor processes the byte data and returns a result\n* @return result from the ByteProcessor after processing the bytes\n*/",
        "com.google.common.io.ByteSource$ByteArrayByteSource:copyTo(java.io.OutputStream)": "/**\n* Copies bytes to the given output stream.\n* @param output the OutputStream to write bytes to\n* @return number of bytes copied\n*/",
        "com.google.common.io.ByteSource$ByteArrayByteSource:hash(com.google.common.hash.HashFunction)": "/**\n* Computes hash code using the provided hash function.\n* @param hashFunction the hash function to use\n* @return HashCode object representing the computed hash\n*/",
        "com.google.common.io.ByteSource$ByteArrayByteSource:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if the collection has no elements, false otherwise\n*/",
        "com.google.common.io.ByteSource$ByteArrayByteSource:size()": "/**\n* Returns the size of the object.\n* @return the length of the object as a long\n*/",
        "com.google.common.io.ByteSource$ByteArrayByteSource:<init>(byte[],int,int)": "/**\n* Initializes ByteArrayByteSource with byte data and its offset/length.\n* @param bytes byte array data\n* @param offset starting index in the byte array\n* @param length number of bytes to consider\n*/",
        "com.google.common.io.ByteSource$ByteArrayByteSource:openBufferedStream()": "/**\n* Opens a buffered input stream.\n* @return InputStream from the byte array\n*/",
        "com.google.common.io.ByteSource$ByteArrayByteSource:<init>(byte[])": "/**\n* Constructs ByteArrayByteSource from byte array.\n* @param bytes byte array data to initialize source\n*/",
        "com.google.common.io.ByteSource$ByteArrayByteSource:slice(long,long)": "/**\n* Slices the byte source from a specified offset and length.\n* @param offset starting position in the byte source\n* @param length number of bytes to slice\n* @return ByteSource representing the sliced bytes\n*/",
        "com.google.common.io.ByteSource$ByteArrayByteSource:sizeIfKnown()": "/**\n* Returns the size as an Optional if known.\n* @return Optional containing the length or empty if unknown\n*/",
        "com.google.common.io.ByteSource$ByteArrayByteSource:toString()": "/**\n* Returns a string representation of the ByteSource with truncated encoded bytes.\n* @return formatted string with byte encoding or truncation indicator\n*/"
    },
    "com.google.common.io.ByteSource$ConcatenatedByteSource": {
        "com.google.common.io.ByteSource$ConcatenatedByteSource:toString()": "/**\n* Returns a string representation of the ByteSource concatenation.\n* @return formatted string of ByteSource sources\n*/",
        "com.google.common.io.ByteSource$ConcatenatedByteSource:<init>(java.lang.Iterable)": "/**\n* Constructs a ConcatenatedByteSource from given byte sources.\n* @param sources iterable collection of ByteSource instances\n*/",
        "com.google.common.io.ByteSource$ConcatenatedByteSource:sizeIfKnown()": "/**\n* Calculates total size if known from sources; returns absent if unknown.\n* @return Optional<Long> representing total size or absence of size\n*/",
        "com.google.common.io.ByteSource$ConcatenatedByteSource:openStream()": "/**\n* Opens a new InputStream from a collection of ByteSource elements.\n* @return InputStream for reading data\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.ByteSource$ConcatenatedByteSource:isEmpty()": "/**\n* Checks if all ByteSource objects are empty.\n* @return true if all sources are empty, false otherwise\n*/",
        "com.google.common.io.ByteSource$ConcatenatedByteSource:size()": "/**\n* Calculates total size of all ByteSource objects.\n* @return total size in bytes or Long.MAX_VALUE on overflow\n*/"
    },
    "com.google.common.io.ByteSource$SlicedByteSource": {
        "com.google.common.io.ByteSource$SlicedByteSource:toString()": "/**\n* Returns a string representation of the ByteSource slice.\n* @return descriptive string of the slice with offset and length\n*/",
        "com.google.common.io.ByteSource$SlicedByteSource:slice(long,long)": "/**\n* Slices the ByteSource from a specified offset and length.\n* @param offset starting position of the slice\n* @param length number of bytes to slice\n* @return sliced ByteSource or empty if out of bounds\n*/",
        "com.google.common.io.ByteSource$SlicedByteSource:sizeIfKnown()": "/**\n* Computes the size if known, limited by offset and length.\n* @return Optional<Long> representing the calculated size or absent if unknown\n*/",
        "com.google.common.io.ByteSource$SlicedByteSource:sliceStream(java.io.InputStream)": "/**\n* Slices InputStream by skipping bytes and limiting its length.\n* @param in InputStream to slice\n* @return Sliced InputStream or empty stream if offset exceeds EOF\n*/",
        "com.google.common.io.ByteSource$SlicedByteSource:openStream()": "/**\n* Opens a sliced InputStream from the original ByteSource.\n* @return Sliced InputStream or empty stream if offset exceeds EOF\n*/",
        "com.google.common.io.ByteSource$SlicedByteSource:openBufferedStream()": "/**\n* Opens a buffered input stream and slices it.\n* @return Sliced InputStream wrapped around the original stream\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.ByteSource$SlicedByteSource:isEmpty()": "/**\n* Checks if the stream is empty.\n* @return true if length is 0 or super method indicates empty, false otherwise\n*/"
    },
    "com.google.common.io.ByteStreams": {
        "com.google.common.io.ByteStreams:createBuffer()": "/**\n* Creates a new byte array buffer of predefined size.\n* @return byte array of size BUFFER_SIZE\n*/",
        "com.google.common.io.ByteStreams:<init>()": "/**\n* Private constructor to prevent instantiation of ByteStreams class.\n*/",
        "com.google.common.io.ByteStreams:combineBuffers(java.util.Queue,int)": "/**\n* Combines byte arrays from a queue into a single byte array.\n* @param bufs queue of byte arrays to combine\n* @param totalLen total length of the resulting byte array\n* @return combined byte array of specified length\n*/",
        "com.google.common.io.ByteStreams:skipSafely(java.io.InputStream,long)": "/**\n* Skips a specified number of bytes in the InputStream.\n* @param in InputStream to skip bytes from\n* @param n number of bytes to skip\n* @return actual number of bytes skipped\n*/",
        "com.google.common.io.ByteStreams:copy(java.io.InputStream,java.io.OutputStream)": "/**\n* Copies bytes from InputStream to OutputStream.\n* @param from source InputStream\n* @param to destination OutputStream\n* @return total bytes copied\n*/",
        "com.google.common.io.ByteStreams:exhaust(java.io.InputStream)": "/**\n* Reads from InputStream and returns total bytes read.\n* @param in InputStream to read data from\n* @return total number of bytes read\n*/",
        "com.google.common.io.ByteStreams:readBytes(java.io.InputStream,com.google.common.io.ByteProcessor)": "/**\n* Reads bytes from an InputStream and processes them using a ByteProcessor.\n* @param input the InputStream to read from\n* @param processor the ByteProcessor to process the bytes\n* @return processed result from the ByteProcessor\n*/",
        "com.google.common.io.ByteStreams:newDataInput(java.io.ByteArrayInputStream)": "/**\n* Creates a ByteArrayDataInput from a ByteArrayInputStream.\n* @param byteArrayInputStream source for reading bytes\n* @return ByteArrayDataInput instance\n*/",
        "com.google.common.io.ByteStreams:newDataOutput(java.io.ByteArrayOutputStream)": "/**\n* Creates a ByteArrayDataOutput from a ByteArrayOutputStream.\n* @param byteArrayOutputStream the output stream to write data to\n* @return ByteArrayDataOutput instance\n*/",
        "com.google.common.io.ByteStreams:copy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel)": "/**\n* Copies data from a ReadableByteChannel to a WritableByteChannel.\n* @param from source channel, must not be null\n* @param to destination channel, must not be null\n* @return total bytes copied\n*/",
        "com.google.common.io.ByteStreams:skipUpTo(java.io.InputStream,long)": "/**\n* Skips up to n bytes in the InputStream.\n* @param in InputStream to skip bytes from\n* @param n maximum number of bytes to skip\n* @return total bytes actually skipped\n*/",
        "com.google.common.io.ByteStreams:limit(java.io.InputStream,long)": "/**\n* Limits the number of bytes read from the InputStream.\n* @param in InputStream to wrap\n* @param limit maximum number of bytes to read\n* @return LimitedInputStream with the specified byte limit\n*/",
        "com.google.common.io.ByteStreams:toByteArrayInternal(java.io.InputStream,java.util.Queue,int)": "/**\n* Reads from InputStream into a byte array using dynamic buffer sizing.\n* @param in InputStream to read from\n* @param bufs Queue to store byte arrays\n* @param totalLen total length of bytes read\n* @return combined byte array of read data\n*/",
        "com.google.common.io.ByteStreams:newDataInput(byte[])": "/**\n* Creates a ByteArrayDataInput from a byte array.\n* @param bytes source byte array for reading\n* @return ByteArrayDataInput instance\n*/",
        "com.google.common.io.ByteStreams:newDataOutput()": "/**\n* Creates a ByteArrayDataOutput using a new ByteArrayOutputStream.\n* @return ByteArrayDataOutput instance\n*/",
        "com.google.common.io.ByteStreams:newDataOutput(int)": "/**\n* Creates a ByteArrayDataOutput with specified size.\n* @param size the initial size of the output stream\n* @return ByteArrayDataOutput instance\n*/",
        "com.google.common.io.ByteStreams:skipFully(java.io.InputStream,long)": "/**\n* Skips n bytes in the InputStream, throwing EOFException if not enough bytes are skipped.\n* @param in InputStream to skip bytes from\n* @param n number of bytes to skip\n*/",
        "com.google.common.io.ByteStreams:newDataInput(byte[],int)": "/**\n* Creates a ByteArrayDataInput from a byte array starting at a specified index.\n* @param bytes byte array source\n* @param start starting index for reading\n* @return ByteArrayDataInput instance\n*/",
        "com.google.common.io.ByteStreams:read(java.io.InputStream,byte[],int,int)": "/**\n* Reads bytes from InputStream into byte array.\n* @param in InputStream to read from, @param b buffer array, @param off start offset, @param len max bytes\n* @return number of bytes read\n*/",
        "com.google.common.io.ByteStreams:toByteArray(java.io.InputStream)": "/**\n* Converts InputStream to byte array.\n* @param in InputStream to read from\n* @return byte array representation of the stream\n*/",
        "com.google.common.io.ByteStreams:toByteArray(java.io.InputStream,long)": "/**\n* Reads bytes from InputStream into a byte array of expected size.\n* @param in InputStream to read from\n* @param expectedSize expected number of bytes to read\n* @return byte array containing read data\n*/",
        "com.google.common.io.ByteStreams:readFully(java.io.InputStream,byte[],int,int)": "/**\n* Reads exactly 'len' bytes from InputStream into byte array.\n* @param in InputStream to read from, @param b buffer array, @param off start offset, @param len bytes to read\n* @throws EOFException if fewer than 'len' bytes are read\n*/",
        "com.google.common.io.ByteStreams:readFully(java.io.InputStream,byte[])": "/**** Reads entire InputStream into byte array. \n* @param in InputStream to read from, @param b buffer array \n* @throws IOException if an I/O error occurs \n*/"
    },
    "com.google.common.io.ByteStreams$1": {
        "com.google.common.io.ByteStreams$1:<init>()": "/**\n* Private constructor to prevent instantiation of the ByteStreams class.\n*/"
    },
    "com.google.common.io.ByteStreams$ByteArrayDataInputStream": {
        "com.google.common.io.ByteStreams$ByteArrayDataInputStream:<init>(java.io.ByteArrayInputStream)": "/**\n* Initializes ByteArrayDataInputStream with a ByteArrayInputStream.\n* @param byteArrayInputStream source for reading bytes\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readFully(byte[])": "/**\n* Reads bytes into the provided array, throwing an exception on failure.\n* @param b byte array to fill with data\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readFully(byte[],int,int)": "/**\n* Reads bytes into array from input stream.\n* @param b byte array to store data, @param off offset, @param len number of bytes to read\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataInputStream:skipBytes(int)": "/**\n* Skips the specified number of bytes in the input stream.\n* @param n number of bytes to skip\n* @return number of bytes actually skipped\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readBoolean()": "/**\n* Reads a boolean value from input stream.\n* @return true or false from the input stream\n* @throws IllegalStateException if an I/O error occurs\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readByte()": "/**\n* Reads a byte from input stream, throws exception on EOF or IO errors.\n* @return byte read from the input stream\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readUnsignedByte()": "/**\n* Reads an unsigned byte from input.\n* @return unsigned byte value\n* @throws IllegalStateException if an I/O error occurs\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readShort()": "/**\n* Reads a short value from input stream.\n* @return short value read from the stream\n* @throws IllegalStateException if an I/O error occurs\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readUnsignedShort()": "/**\n* Reads an unsigned short value from input.\n* @return unsigned short value from input stream\n* @throws IllegalStateException if an I/O error occurs\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readChar()": "/**\n* Reads a character from input stream.\n* @return character read from the input\n* @throws IllegalStateException if an IOException occurs\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readInt()": "/**\n* Reads an integer from input stream.\n* @return the integer read from the input stream\n* @throws IllegalStateException if an I/O error occurs\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readLong()": "/**\n* Reads a long value from input stream.\n* @return long value read from the stream\n* @throws IllegalStateException if an I/O error occurs\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readFloat()": "/**\n* Reads a float value from input stream.\n* @return float value read from the stream\n* @throws IllegalStateException if an I/O error occurs\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readDouble()": "/**\n* Reads a double value from input, throwing an exception on failure.\n* @return double value read from input\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readLine()": "/**\n* Reads a line of text from input.\n* @return the line read or null if an error occurs\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataInputStream:readUTF()": "/**\n* Reads a UTF-encoded string from input.\n* @return UTF-encoded string read from input\n* @throws IllegalStateException if an IO error occurs\n*/"
    },
    "com.google.common.io.ByteStreams$ByteArrayDataOutputStream": {
        "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:<init>(java.io.ByteArrayOutputStream)": "/**\n* Initializes ByteArrayDataOutputStream with a ByteArrayOutputStream.\n* @param byteArrayOutputStream the output stream to write data to\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:write(int)": "/**\n* Writes a byte to the output stream, asserting on IOException.\n* @param b byte to write\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:write(byte[])": "/**\n* Writes byte array to output stream, throwing an error on IOException.\n* @param b byte array to write\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:write(byte[],int,int)": "/**\n* Writes a byte array to output stream from specified offset and length.\n* @param b byte array to write\n* @param off starting offset in the array\n* @param len number of bytes to write\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeBoolean(boolean)": "/**\n* Writes a boolean value to the output stream.\n* @param v the boolean value to write\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeByte(int)": "/**\n* Writes a byte value to the output stream.\n* @param v the byte value to write\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeBytes(java.lang.String)": "/**\n* Writes the given string as bytes to the output.\n* @param s the string to write\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeChar(int)": "/**\n* Writes a character to the output stream.\n* @param v the character value to write\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeChars(java.lang.String)": "/**\n* Writes characters from a string to output.\n* @param s the string to write\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeDouble(double)": "/**\n* Writes a double value to the output stream.\n* @param v the double value to write\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeFloat(float)": "/**\n* Writes a float value to the output stream.\n* @param v the float value to write\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeInt(int)": "/**\n* Writes an integer value to the output stream.\n* @param v the integer value to write\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeLong(long)": "/**\n* Writes a long value to the output stream.\n* @param v the long value to write\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeShort(int)": "/**\n* Writes a short value to the output stream.\n* @param v the short value to write\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:writeUTF(java.lang.String)": "/**\n* Writes a UTF-8 encoded string to the output.\n* @param s the string to write\n*/",
        "com.google.common.io.ByteStreams$ByteArrayDataOutputStream:toByteArray()": "/**\n* Converts the output stream to a byte array.\n* @return byte array representation of the output stream\n*/"
    },
    "com.google.common.io.ByteStreams$LimitedInputStream": {
        "com.google.common.io.ByteStreams$LimitedInputStream:available()": "/**\n* Returns the number of bytes available to read.\n* @return number of bytes available, limited by 'left'\n*/",
        "com.google.common.io.ByteStreams$LimitedInputStream:mark(int)": "/**\n* Marks the current position in the input stream with a specified read limit.\n* @param readLimit maximum number of bytes that can be read before the mark is invalidated\n*/",
        "com.google.common.io.ByteStreams$LimitedInputStream:read()": "/**\n* Reads a byte from the input stream, decrementing remaining bytes.\n* @return byte read or -1 if no bytes left\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.ByteStreams$LimitedInputStream:read(byte[],int,int)": "/**\n* Reads up to len bytes from the input stream into the array b.\n* @param b byte array to store read data\n* @param off offset in the array to start storing data\n* @param len maximum number of bytes to read\n* @return number of bytes read or -1 if end of stream is reached\n*/",
        "com.google.common.io.ByteStreams$LimitedInputStream:reset()": "/**\n* Resets the input stream to the last marked position.\n* @throws IOException if mark is not supported or not set\n*/",
        "com.google.common.io.ByteStreams$LimitedInputStream:skip(long)": "/**\n* Skips over and discards 'n' bytes from the input stream.\n* @param n number of bytes to skip\n* @return actual number of bytes skipped\n*/",
        "com.google.common.io.ByteStreams$LimitedInputStream:<init>(java.io.InputStream,long)": "/**\n* Constructs a LimitedInputStream with a specified byte limit.\n* @param in InputStream to wrap\n* @param limit maximum number of bytes to read, must be non-negative\n*/"
    },
    "com.google.common.io.Java8Compatibility": {
        "com.google.common.io.Java8Compatibility:flip(java.nio.Buffer)": "/**\n* Flips the buffer for reading after writing.\n* @param b the buffer to be flipped\n*/",
        "com.google.common.io.Java8Compatibility:clear(java.nio.Buffer)": "/**\n* Clears the specified buffer.\n* @param b the Buffer instance to be cleared\n*/",
        "com.google.common.io.Java8Compatibility:limit(java.nio.Buffer,int)": "/**\n* Sets the limit of the given buffer.\n* @param b the buffer to limit\n* @param limit the new limit value for the buffer\n*/",
        "com.google.common.io.Java8Compatibility:mark(java.nio.Buffer)": "/**\n* Marks the current position in the given buffer.\n* @param b the Buffer to mark the current position\n*/",
        "com.google.common.io.Java8Compatibility:position(java.nio.Buffer,int)": "/**\n* Sets the position of the given buffer.\n* @param b the buffer to modify\n* @param position the new position index\n*/",
        "com.google.common.io.Java8Compatibility:reset(java.nio.Buffer)": "/**\n* Resets the given Buffer to its initial state.\n* @param b the Buffer instance to reset\n*/",
        "com.google.common.io.Java8Compatibility:<init>()": "/**\n* Constructor for Java8Compatibility; initializes compatibility settings.\n*/"
    },
    "com.google.common.io.CharSequenceReader": {
        "com.google.common.io.CharSequenceReader:checkOpen()": "/**\n* Validates if the reader is open; throws IOException if closed.\n* @throws IOException if the reader is closed\n*/",
        "com.google.common.io.CharSequenceReader:remaining()": "/**\n* Calculates the number of remaining elements in the sequence.\n* @return count of elements from current position to the end\n*/",
        "com.google.common.io.CharSequenceReader:<init>(java.lang.CharSequence)": "/**\n* Constructs a CharSequenceReader from a non-null CharSequence.\n* @param seq the CharSequence to read\n*/",
        "com.google.common.io.CharSequenceReader:ready()": "/**\n* Checks if the reader is ready.\n* @return true if ready; throws IOException if closed.\n*/",
        "com.google.common.io.CharSequenceReader:mark(int)": "/**\n* Sets a mark at the current position with a read-ahead limit.\n* @param readAheadLimit non-negative limit for reading ahead\n* @throws IOException if reader is closed\n*/",
        "com.google.common.io.CharSequenceReader:reset()": "/**\n* Resets the reader to the last marked position.\n* @throws IOException if the reader is closed\n*/",
        "com.google.common.io.CharSequenceReader:hasRemaining()": "/**\n* Checks if there are remaining elements in the sequence.\n* @return true if elements remain, false otherwise\n*/",
        "com.google.common.io.CharSequenceReader:skip(long)": "/**\n* Skips a specified number of characters in the stream.\n* @param n number of characters to skip; must be non-negative\n* @return actual number of characters skipped\n*/",
        "com.google.common.io.CharSequenceReader:read(java.nio.CharBuffer)": "/**\n* Reads characters into target buffer; returns number of chars read.\n* @param target buffer to store read characters\n* @return number of characters read, or -1 if none remain\n*/",
        "com.google.common.io.CharSequenceReader:read()": "/**\n* Reads a character from the sequence if available.\n* @return character or -1 if no characters remain\n*/",
        "com.google.common.io.CharSequenceReader:read(char[],int,int)": "/**\n* Reads characters into a buffer; returns number read.\n* @param cbuf char array to fill, @param off start offset, @param len max chars to read\n* @return number of characters read, or -1 if none\n*/"
    },
    "com.google.common.io.CharSource$AsByteSource": {
        "com.google.common.io.CharSource$AsByteSource:toString()": "/**\n* Returns a string representation of the CharSource with charset info.\n* @return formatted string indicating CharSource and charset\n*/",
        "com.google.common.io.CharSource$AsByteSource:asCharSource(java.nio.charset.Charset)": "/**\n* Converts to CharSource with specified charset if different from current charset.\n* @param charset the character set for conversion\n* @return CharSource instance with the specified charset\n*/",
        "com.google.common.io.CharSource$AsByteSource:openStream()": "/**\n* Opens an InputStream using the specified charset and a buffer size of 8192.\n* @return InputStream for reading data\n* @throws IOException if an I/O error occurs\n*/"
    },
    "com.google.common.io.CharSource$CharSequenceCharSource": {
        "com.google.common.io.CharSource$CharSequenceCharSource:read()": "/**\n* Returns the string representation of the sequence.\n* @return String representation of the sequence\n*/",
        "com.google.common.io.CharSource$CharSequenceCharSource:isEmpty()": "/**\n* Checks if the sequence is empty.\n* @return true if the sequence length is zero, false otherwise\n*/",
        "com.google.common.io.CharSource$CharSequenceCharSource:length()": "/**\n* Returns the length of the sequence.\n* @return length of the sequence as a long\n*/",
        "com.google.common.io.CharSource$CharSequenceCharSource:linesIterator()": "/**\n* Returns an iterator over non-empty lines from a split sequence.\n* @return Iterator of strings, skipping the last empty line if present\n*/",
        "com.google.common.io.CharSource$CharSequenceCharSource:<init>(java.lang.CharSequence)": "/**\n* Initializes CharSource with a non-null CharSequence.\n* @param seq the CharSequence to be wrapped\n*/",
        "com.google.common.io.CharSource$CharSequenceCharSource:lines()": "/**\n* Returns a Stream of non-empty lines from the source iterator.\n* @return Stream of strings derived from the lines iterator\n*/",
        "com.google.common.io.CharSource$CharSequenceCharSource:readFirstLine()": "/**\n* Reads the first non-empty line or returns null if none exists.\n* @return First line as a String or null if no lines are present\n*/",
        "com.google.common.io.CharSource$CharSequenceCharSource:readLines(com.google.common.io.LineProcessor)": "/**\n* Reads lines and processes them with a LineProcessor.\n* @param processor processes each line and returns a result\n* @return processed result from the LineProcessor\n*/",
        "com.google.common.io.CharSource$CharSequenceCharSource:openStream()": "/**\n* Opens a stream from the given CharSequence.\n* @return Reader for the CharSequence\n*/",
        "com.google.common.io.CharSource$CharSequenceCharSource:toString()": "/**\n* Returns a string representation of the CharSource with truncated sequence.\n* @return formatted string with truncated sequence\n*/",
        "com.google.common.io.CharSource$CharSequenceCharSource:lengthIfKnown()": "/**\n* Returns the length of the sequence as an Optional.\n* @return Optional containing sequence length or an empty Optional if unknown\n*/",
        "com.google.common.io.CharSource$CharSequenceCharSource:readLines()": "/**\n* Reads lines and returns them as an ImmutableList.\n* @return ImmutableList of non-empty lines\n*/"
    },
    "com.google.common.io.CharSource$ConcatenatedCharSource": {
        "com.google.common.io.CharSource$ConcatenatedCharSource:toString()": "/**\n* Returns a string representation of the CharSource object.\n* @return formatted string describing the CharSource\n*/",
        "com.google.common.io.CharSource$ConcatenatedCharSource:<init>(java.lang.Iterable)": "/**\n* Initializes ConcatenatedCharSource with non-null sources.\n* @param sources iterable collection of CharSource instances\n*/",
        "com.google.common.io.CharSource$ConcatenatedCharSource:lengthIfKnown()": "/**\n* Calculates total length if known from sources.\n* @return Optional<Long> total length or absent if any source length is unknown\n*/",
        "com.google.common.io.CharSource$ConcatenatedCharSource:openStream()": "/**\n* Opens a stream from multiple CharSource objects.\n* @return Reader for reading from the sources\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.CharSource$ConcatenatedCharSource:length()": "/**\n* Calculates total length of all CharSource objects.\n* @return total length in bytes\n* @throws IOException if an error occurs during processing\n*/",
        "com.google.common.io.CharSource$ConcatenatedCharSource:isEmpty()": "/**\n* Checks if all sources are empty.\n* @return true if all sources are empty, false otherwise\n*/"
    },
    "com.google.common.io.CharSource$StringCharSource": {
        "com.google.common.io.CharSource$StringCharSource:openStream()": "/**\n* Opens a stream from the given string sequence.\n* @return Reader for the string sequence\n*/",
        "com.google.common.io.CharSource$StringCharSource:copyTo(java.lang.Appendable)": "/**\n* Copies sequence to the given Appendable.\n* @param appendable destination for the sequence\n* @return length of the copied sequence\n*/",
        "com.google.common.io.CharSource$StringCharSource:<init>(java.lang.String)": "/**\n* Constructs a StringCharSource from a given sequence.\n* @param seq the CharSequence to be wrapped\n*/",
        "com.google.common.io.CharSource$StringCharSource:copyTo(com.google.common.io.CharSink)": "/**\n* Copies sequence to the provided CharSink.\n* @param sink destination for the sequence\n* @return length of the copied sequence\n* @throws IOException if an I/O error occurs\n*/"
    },
    "com.google.common.io.CharStreams$NullWriter": {
        "com.google.common.io.CharStreams$NullWriter:append(char)": "/**\n* Appends a character to the writer.\n* @param c character to append\n* @return this Writer instance for chaining\n*/",
        "com.google.common.io.CharStreams$NullWriter:append(java.lang.CharSequence)": "/**\n* Appends the given character sequence and returns the current Writer instance.\n* @param csq character sequence to append\n* @return current Writer instance\n*/",
        "com.google.common.io.CharStreams$NullWriter:write(char[])": "/**\n* Validates and writes character buffer.\n* @param cbuf character array to be processed, must not be null\n*/",
        "com.google.common.io.CharStreams$NullWriter:write(java.lang.String)": "/**\n* Validates and writes a non-null string.\n* @param str the string to write; must not be null\n*/",
        "com.google.common.io.CharStreams$NullWriter:write(char[],int,int)": "/**\n* Writes a character buffer to output after validating position indexes.\n* @param cbuf character buffer, @param off start offset, @param len number of characters to write\n*/",
        "com.google.common.io.CharStreams$NullWriter:write(java.lang.String,int,int)": "/**\n* Writes a substring of the given string.\n* @param str the string to write from, @param off starting index, @param len length to write\n*/",
        "com.google.common.io.CharStreams$NullWriter:append(java.lang.CharSequence,int,int)": "/**\n* Appends a sequence of characters from specified range.\n* @param csq character sequence, @param start start index, @param end end index\n* @return this Writer instance\n*/"
    },
    "com.google.common.io.CharStreams": {
        "com.google.common.io.CharStreams:createBuffer()": "/**\n* Creates a CharBuffer with a default size.\n* @return a new CharBuffer instance\n*/",
        "com.google.common.io.CharStreams:<init>()": "/**\n* Private constructor for CharStreams class to prevent instantiation.\n*/",
        "com.google.common.io.CharStreams:nullWriter()": "/**\n* Returns a singleton instance of a null writer.\n* @return Writer instance that performs no operations\n*/",
        "com.google.common.io.CharStreams:copyReaderToBuilder(java.io.Reader,java.lang.StringBuilder)": "/**\n* Copies characters from Reader to StringBuilder.\n* @param from source Reader, @param to destination StringBuilder\n* @return total number of characters copied\n*/",
        "com.google.common.io.CharStreams:copyReaderToWriter(java.io.Reader,java.io.Writer)": "/**\n* Copies characters from Reader to Writer and returns total characters copied.\n* @param from source Reader\n* @param to destination Writer\n* @return total number of characters copied\n*/",
        "com.google.common.io.CharStreams:skipFully(java.io.Reader,long)": "/**\n* Skips n characters in the given Reader.\n* @param reader the Reader to skip characters from\n* @param n number of characters to skip\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.CharStreams:exhaust(java.lang.Readable)": "/**\n* Reads from a Readable source and counts total bytes read.\n* @param readable source to read from\n* @return total number of bytes read\n*/",
        "com.google.common.io.CharStreams:asWriter(java.lang.Appendable)": "/**\n* Converts an Appendable to a Writer.\n* @param target the Appendable to convert\n* @return Writer instance or a new AppendableWriter\n*/",
        "com.google.common.io.CharStreams:readLines(java.lang.Readable)": "/**\n* Reads lines from a readable source into a list.\n* @param r the source to read lines from\n* @return a list of lines read from the source\n*/",
        "com.google.common.io.CharStreams:readLines(java.lang.Readable,com.google.common.io.LineProcessor)": "/**\n* Reads lines from a Readable source using a LineProcessor.\n* @param readable source to read from\n* @param processor processes each line and returns a result\n* @return result from the LineProcessor\n*/",
        "com.google.common.io.CharStreams:copy(java.lang.Readable,java.lang.Appendable)": "/**\n* Copies characters from a Readable source to an Appendable destination.\n* @param from source Readable, @param to destination Appendable\n* @return total number of characters copied\n*/",
        "com.google.common.io.CharStreams:toStringBuilder(java.lang.Readable)": "/**\n* Converts Readable to StringBuilder.\n* @param r Readable source to convert\n* @return StringBuilder containing the copied content\n*/",
        "com.google.common.io.CharStreams:toString(java.lang.Readable)": "/**\n* Converts a Readable source to a String.\n* @param r Readable source to convert\n* @return String representation of the Readable content\n*/"
    },
    "com.google.common.io.Closeables": {
        "com.google.common.io.Closeables:<init>()": "/**\n* Private constructor to prevent instantiation of the Closeables utility class.\n*/",
        "com.google.common.io.Closeables:close(java.io.Closeable,boolean)": "/**\n* Closes a Closeable resource, optionally swallowing IOExceptions.\n* @param closeable the resource to close, may be null\n* @param swallowIOException if true, logs and ignores IOException\n* @throws IOException if closeable closing fails and swallowIOException is false\n*/",
        "com.google.common.io.Closeables:closeQuietly(java.io.InputStream)": "/**\n* Closes InputStream without throwing IOException.\n* @param inputStream the InputStream to close, may be null\n*/",
        "com.google.common.io.Closeables:closeQuietly(java.io.Reader)": "/**\n* Closes a Reader quietly, suppressing any IOExceptions.\n* @param reader the Reader to close, may be null\n*/"
    },
    "com.google.common.io.CountingInputStream": {
        "com.google.common.io.CountingInputStream:read()": "/**\n* Reads a byte and counts successful reads.\n* @return byte read or -1 if end of stream is reached\n*/",
        "com.google.common.io.CountingInputStream:read(byte[],int,int)": "/**\n* Reads bytes into array and counts total bytes read.\n* @param b byte array to read data into\n* @param off offset in array to start storing data\n* @param len maximum number of bytes to read\n* @return number of bytes read or -1 if end of stream\n*/",
        "com.google.common.io.CountingInputStream:skip(long)": "/**\n* Skips over n bytes in the input stream.\n* @param n number of bytes to skip\n* @return actual number of bytes skipped\n*/",
        "com.google.common.io.CountingInputStream:mark(int)": "/**\n* Marks the current position in the input stream for future reset.\n* @param readlimit maximum number of bytes that can be read before the mark becomes invalid\n*/",
        "com.google.common.io.CountingInputStream:reset()": "/**\n* Resets the input stream to the last marked position.\n* @throws IOException if mark is not supported or not set\n*/",
        "com.google.common.io.CountingInputStream:<init>(java.io.InputStream)": "/**\n* Initializes CountingInputStream with a non-null InputStream.\n* @param in the InputStream to wrap\n*/"
    },
    "com.google.common.io.CountingOutputStream": {
        "com.google.common.io.CountingOutputStream:write(byte[],int,int)": "/**\n* Writes a portion of a byte array to the output stream.\n* @param b byte array to write from\n* @param off offset in the array to start writing\n* @param len number of bytes to write\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.CountingOutputStream:write(int)": "/**\n* Writes a byte to the output stream and increments the count.\n* @param b byte to be written\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.CountingOutputStream:close()": "/**\n* Closes the output stream, releasing any associated resources.\n* @throws IOException if an I/O error occurs during closing\n*/",
        "com.google.common.io.CountingOutputStream:<init>(java.io.OutputStream)": "/**\n* Initializes CountingOutputStream with a non-null OutputStream.\n* @param out the OutputStream to be wrapped\n*/"
    },
    "com.google.common.io.FileBackedOutputStream$MemoryOutput": {
        "com.google.common.io.FileBackedOutputStream$MemoryOutput:getBuffer()": "/**\n* Returns the current buffer as a byte array.\n* @return byte array representing the buffer\n*/",
        "com.google.common.io.FileBackedOutputStream$MemoryOutput:getCount()": "/**\n* Returns the current count value.\n* @return the current count as an integer\n*/"
    },
    "com.google.common.io.FileBackedOutputStream": {
        "com.google.common.io.FileBackedOutputStream:close()": "/**\n* Closes the output stream safely.\n* @throws IOException if an I/O error occurs during closing\n*/",
        "com.google.common.io.FileBackedOutputStream:flush()": "/**\n* Flushes the output stream to ensure all data is written.\n* @throws IOException if an I/O error occurs during flushing\n*/",
        "com.google.common.io.FileBackedOutputStream:<init>(int,boolean)": "/**\n* Constructs FileBackedOutputStream with threshold and reset option.\n* @param fileThreshold max bytes in memory before writing to file\n* @param resetOnFinalize whether to reset on object finalization\n*/",
        "com.google.common.io.FileBackedOutputStream:openInputStream()": "/**\n* Opens an InputStream from a file or memory buffer.\n* @return InputStream for file or memory data\n* @throws IOException if file access fails\n*/",
        "com.google.common.io.FileBackedOutputStream:update(int)": "/**\n* Updates output stream if memory exceeds threshold.\n* @param len additional length to consider for memory\n* @throws IOException if an I/O error occurs during file operations\n*/",
        "com.google.common.io.FileBackedOutputStream:reset()": "/**\n* Resets the output stream and memory; deletes associated file if present.\n* @throws IOException if an I/O error occurs during closing or file deletion\n*/",
        "com.google.common.io.FileBackedOutputStream:<init>(int)": "/**\n* Initializes FileBackedOutputStream with default reset option.\n* @param fileThreshold max bytes in memory before writing to file\n*/",
        "com.google.common.io.FileBackedOutputStream:write(int)": "/**\n* Writes a byte to the output stream after updating memory.\n* @param b the byte to be written\n* @throws IOException if an I/O error occurs during writing\n*/",
        "com.google.common.io.FileBackedOutputStream:write(byte[],int,int)": "/**\n* Writes bytes to output stream and updates memory usage.\n* @param b byte array to write, @param off start offset, @param len number of bytes to write\n* @throws IOException if an I/O error occurs during writing\n*/",
        "com.google.common.io.FileBackedOutputStream:write(byte[])": "/**\n* Writes byte array to output stream.\n* @param b byte array to write\n* @throws IOException if an I/O error occurs during writing\n*/"
    },
    "com.google.common.io.Files$2": {
        "com.google.common.io.Files$2:<init>()": "/**\n* Private constructor to prevent instantiation of the Files class.\n*/"
    },
    "com.google.common.io.Files$FileByteSink": {
        "com.google.common.io.Files$FileByteSink:openStream()": "/**\n* Opens a FileOutputStream for the specified file in append mode if applicable.\n* @return FileOutputStream for the file\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.Files$FileByteSink:toString()": "/**\n* Returns a string representation of the Files.asByteSink object.\n* @return formatted string with file and modes information\n*/"
    },
    "com.google.common.io.Files$FileByteSource": {
        "com.google.common.io.Files$FileByteSource:openStream()": "/**\n* Opens a FileInputStream for the specified file.\n* @return FileInputStream for the file\n* @throws IOException if the file cannot be opened\n*/",
        "com.google.common.io.Files$FileByteSource:size()": "/**\n* Returns the size of the file in bytes.\n* @return file size in bytes\n* @throws IOException if the file is not found\n*/",
        "com.google.common.io.Files$FileByteSource:toString()": "/**\n* Returns a string representation of the Files.asByteSource with the file name.\n* @return String representation of the file source\n*/",
        "com.google.common.io.Files$FileByteSource:<init>(java.io.File)": "/**\n* Constructs FileByteSource with a non-null File object.\n* @param file the File object to be wrapped\n*/",
        "com.google.common.io.Files$FileByteSource:sizeIfKnown()": "/**\n* Returns file size if it's a regular file; otherwise, returns absent Optional.\n* @return Optional<Long> containing file size or absent if not a file\n*/",
        "com.google.common.io.Files$FileByteSource:read()": "/**** Reads bytes from a file input stream into a byte array. @return byte array of file data */"
    },
    "com.google.common.io.Files": {
        "com.google.common.io.Files:<init>()": "/**\n* Private constructor to prevent instantiation of the Files class.\n*/",
        "com.google.common.io.Files:asByteSource(java.io.File)": "/**\n* Converts a File to a ByteSource.\n* @param file the File to convert\n* @return ByteSource representation of the file\n*/",
        "com.google.common.io.Files:createTempDir()": "/**\n* Creates a temporary directory.\n* @return File object representing the temporary directory created\n*/",
        "com.google.common.io.Files:newReader(java.io.File,java.nio.charset.Charset)": "/**\n* Creates a BufferedReader for the specified file with the given charset.\n* @param file the file to read from\n* @param charset the character set for decoding\n* @return BufferedReader for the file\n* @throws FileNotFoundException if the file does not exist\n*/",
        "com.google.common.io.Files:newWriter(java.io.File,java.nio.charset.Charset)": "/**\n* Creates a BufferedWriter for the specified file and charset.\n* @param file the file to write to\n* @param charset the character encoding\n* @return BufferedWriter for the file\n* @throws FileNotFoundException if the file cannot be created\n*/",
        "com.google.common.io.Files:touch(java.io.File)": "",
        "com.google.common.io.Files:createParentDirs(java.io.File)": "/**** Creates parent directories for the specified file. \n* @param file the file for which to create parent directories \n* @throws IOException if unable to create directories \n*/",
        "com.google.common.io.Files:getFileExtension(java.lang.String)": "",
        "com.google.common.io.Files:getNameWithoutExtension(java.lang.String)": "/**\n* Retrieves the file name without its extension.\n* @param file the file path as a string\n* @return name without extension or full name if no extension exists\n*/",
        "com.google.common.io.Files:asCharSource(java.io.File,java.nio.charset.Charset)": "/**\n* Converts a File to CharSource using specified charset.\n* @param file the File to convert\n* @param charset the character set for conversion\n* @return CharSource instance of the file\n*/",
        "com.google.common.io.Files:fileTraverser()": "/**\n* Creates a Traverser for file structure traversal.\n* @return Traverser instance for FILE_TREE\n*/",
        "com.google.common.io.Files:mapInternal(java.io.File,java.nio.channels.FileChannel$MapMode,long)": "/**\n* Maps a file to a memory buffer.\n* @param file the file to map\n* @param mode the mapping mode (READ_ONLY or READ_WRITE)\n* @param size the size of the mapping or -1 for full file size\n* @return MappedByteBuffer for the mapped region\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.Files:simplifyPath(java.lang.String)": "/**\n* Simplifies a file path by resolving '.', '..', and redundant slashes.\n* @param pathname the original file path\n* @return the simplified file path\n*/",
        "com.google.common.io.Files:write(byte[],java.io.File)": "/**\n* Writes byte array to specified file.\n* @param from data to write, must not be null\n* @param to target file for output\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.Files:copy(java.io.File,java.io.OutputStream)": "/**\n* Copies content from a File to an OutputStream.\n* @param from source File to copy from\n* @param to destination OutputStream\n* @throws IOException if an error occurs during copying\n*/",
        "com.google.common.io.Files:copy(java.io.File,java.io.File)": "/**\n* Copies a file from source to destination.\n* @param from source File, must not equal to 'to'\n* @param to destination File\n* @throws IOException if an error occurs during copying\n*/",
        "com.google.common.io.Files:toByteArray(java.io.File)": "/**\n* Converts a File to a byte array.\n* @param file the File to convert\n* @return byte array representation of the file\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.Files:readBytes(java.io.File,com.google.common.io.ByteProcessor)": "/**** \n* Reads bytes from a file using a ByteProcessor.\n* @param file the File to read from\n* @param processor the ByteProcessor to process bytes\n* @return processed result or null if no useful result\n*/",
        "com.google.common.io.Files:equal(java.io.File,java.io.File)": "/**\n* Compares two files for equality based on reference or content.\n* @param file1 first file to compare\n* @param file2 second file to compare\n* @return true if files are equal, false otherwise\n*/",
        "com.google.common.io.Files:write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)": "/**\n* Writes CharSequence data to a file with specified charset.\n* @param from data to write, @param to target file, @param charset encoding format\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.Files:append(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)": "/**\n* Appends CharSequence to a file using specified charset.\n* @param from data to append, @param to target file, @param charset encoding used\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.Files:copy(java.io.File,java.nio.charset.Charset,java.lang.Appendable)": "/**\n* Copies content from a File to an Appendable using specified charset.\n* @param from source File to read from\n* @param charset character set for encoding\n* @param to destination Appendable for copied content\n* @throws IOException if an error occurs during copying\n*/",
        "com.google.common.io.Files:readFirstLine(java.io.File,java.nio.charset.Charset)": "/**\n* Reads the first line from a file with specified charset.\n* @param file the File to read from\n* @param charset the character set for reading\n* @return the first line as a String or null if none exists\n*/",
        "com.google.common.io.Files:readLines(java.io.File,java.nio.charset.Charset)": "/**\n* Reads lines from a file using specified charset.\n* @param file the File to read from\n* @param charset the character set for reading\n* @return List of strings read from the file\n* @throws IOException if an error occurs during reading\n*/",
        "com.google.common.io.Files:readLines(java.io.File,java.nio.charset.Charset,com.google.common.io.LineProcessor)": "/**\n* Reads lines from a file using a specified charset and processor callback.\n* @param file the File to read from\n* @param charset the character set for reading\n* @param callback processes each line and returns a result\n* @return result from the LineProcessor\n* @throws IOException if an error occurs during reading\n*/",
        "com.google.common.io.Files:map(java.io.File,java.nio.channels.FileChannel$MapMode)": "/**\n* Maps a file to a memory buffer.\n* @param file the file to map\n* @param mode the mapping mode (READ_ONLY or READ_WRITE)\n* @return MappedByteBuffer for the mapped region\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.Files:map(java.io.File,java.nio.channels.FileChannel$MapMode,long)": "/**\n* Maps a file to a memory buffer.\n* @param file the file to map\n* @param mode the mapping mode (READ_ONLY or READ_WRITE)\n* @param size the size of the mapping\n* @return MappedByteBuffer for the mapped region\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.Files:hash(java.io.File,com.google.common.hash.HashFunction)": "/**\n* Computes hash code for a file using the specified hash function.\n* @param file the File to hash\n* @param hashFunction function to create a new hasher\n* @return computed HashCode object\n*/",
        "com.google.common.io.Files:move(java.io.File,java.io.File)": "/**\n* Moves a file from source to destination; throws IOException on failure.\n* @param from source File; must not be null\n* @param to destination File; must not be null\n*/",
        "com.google.common.io.Files:map(java.io.File)": "/**\n* Maps a file to a read-only memory buffer.\n* @param file the file to map\n* @return MappedByteBuffer for the mapped region\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.Files:toString(java.io.File,java.nio.charset.Charset)": "/**\n* Converts a File to String using specified charset.\n* @param file the File to convert\n* @param charset the character set for conversion\n* @return String content of the file\n*/"
    },
    "com.google.common.io.Flushables": {
        "com.google.common.io.Flushables:<init>()": "/**\n* Private constructor to prevent instantiation of the Flushables class.\n*/",
        "com.google.common.io.Flushables:flush(java.io.Flushable,boolean)": "/**\n* Flushes the given Flushable, optionally swallowing IOExceptions.\n* @param flushable the Flushable to flush\n* @param swallowIOException if true, logs IOException instead of throwing it\n* @throws IOException if an error occurs and swallowIOException is false\n*/",
        "com.google.common.io.Flushables:flushQuietly(java.io.Flushable)": "/**\n* Flushes the given Flushable quietly, logging any IOException that occurs.\n* @param flushable the Flushable to flush\n*/"
    },
    "com.google.common.io.InsecureRecursiveDeleteException": {
        "com.google.common.io.InsecureRecursiveDeleteException:<init>(java.lang.String)": "/**\n* Constructs an InsecureRecursiveDeleteException with a file name.\n* @param file optional file name related to the exception\n*/"
    },
    "com.google.common.io.LineBuffer": {
        "com.google.common.io.LineBuffer:finishLine(boolean)": "/**\n* Finalizes the current line and handles it based on newline characters.\n* @param sawNewline indicates if a newline was detected\n* @return true if a newline was seen, otherwise false\n*/",
        "com.google.common.io.LineBuffer:add(char[],int,int)": "/**\n* Processes character buffer for line endings and updates the line content.\n* @param cbuf character buffer to read from\n* @param off offset to start reading from\n* @param len number of characters to read\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.LineBuffer:finish()": "/**\n* Finalizes the current line if conditions are met.\n* @throws IOException if an I/O error occurs during processing\n*/"
    },
    "com.google.common.io.LittleEndianDataInputStream": {
        "com.google.common.io.LittleEndianDataInputStream:readLine()": "/**\n* Throws UnsupportedOperationException for unsupported readLine operation.\n* @return always throws exception\n*/",
        "com.google.common.io.LittleEndianDataInputStream:skipBytes(int)": "/**\n* Skips over n bytes in the input stream.\n* @param n number of bytes to skip\n* @return actual number of bytes skipped\n*/",
        "com.google.common.io.LittleEndianDataInputStream:readUnsignedByte()": "/**\n* Reads an unsigned byte from input stream.\n* @return the byte value (0-255) or throws EOFException if end of stream is reached\n*/",
        "com.google.common.io.LittleEndianDataInputStream:readAndCheckByte()": "/**\n* Reads a byte from input and checks for end-of-file.\n* @return byte read from input\n* @throws IOException if an I/O error occurs\n* @throws EOFException if end of file is reached\n*/",
        "com.google.common.io.LittleEndianDataInputStream:readUTF()": "/**\n* Reads a UTF-encoded string from the input stream.\n* @return UTF-encoded string\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.LittleEndianDataInputStream:<init>(java.io.InputStream)": "/**\n* Constructs LittleEndianDataInputStream from an InputStream.\n* @param in the InputStream to read data from\n*/",
        "com.google.common.io.LittleEndianDataInputStream:readByte()": "/**\n* Reads a byte from the input stream.\n* @return byte value or throws IOException if an error occurs\n*/",
        "com.google.common.io.LittleEndianDataInputStream:readBoolean()": "/**\n* Reads a boolean value from input stream.\n* @return true if byte is non-zero, false if zero\n*/",
        "com.google.common.io.LittleEndianDataInputStream:readUnsignedShort()": "/**\n* Reads two bytes and converts them to an unsigned short.\n* @return combined unsigned short value\n*/",
        "com.google.common.io.LittleEndianDataInputStream:readInt()": "/**\n* Reads four bytes and converts them to an integer.\n* @return combined integer from the four bytes read\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.LittleEndianDataInputStream:readLong()": "/**\n* Reads eight bytes and converts them to a long value.\n* @return long value constructed from the bytes\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.LittleEndianDataInputStream:readShort()": "/**\n* Reads two bytes and returns them as a signed short.\n* @return signed short value from the byte data\n*/",
        "com.google.common.io.LittleEndianDataInputStream:readChar()": "/**\n* Reads a character by converting two bytes to a char.\n* @return character value from unsigned short conversion\n*/",
        "com.google.common.io.LittleEndianDataInputStream:readFloat()": "/**\n* Reads a float value by converting four bytes to an integer.\n* @return float value converted from integer bits\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.LittleEndianDataInputStream:readDouble()": "/**\n* Reads eight bytes and converts them to a double value.\n* @return double value constructed from the bytes\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.LittleEndianDataInputStream:readFully(byte[],int,int)": "/**\n* Reads 'len' bytes into buffer from the current InputStream.\n* @param b buffer to store bytes, @param off start offset, @param len bytes to read\n*/",
        "com.google.common.io.LittleEndianDataInputStream:readFully(byte[])": "/**\n* Reads data from InputStream into the provided byte array.\n* @param b buffer array to store read data\n* @throws IOException if an I/O error occurs\n*/"
    },
    "com.google.common.io.LittleEndianDataOutputStream": {
        "com.google.common.io.LittleEndianDataOutputStream:write(byte[],int,int)": "/**\n* Writes a specified number of bytes from the array to the output stream.\n* @param b byte array to write from\n* @param off offset in the array to start writing\n* @param len number of bytes to write\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.LittleEndianDataOutputStream:writeBoolean(boolean)": "/**\n* Writes a boolean value to the output stream.\n* @param v boolean value to write\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.LittleEndianDataOutputStream:writeByte(int)": "/**\n* Writes a byte to the output stream.\n* @param v the byte value to write\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.LittleEndianDataOutputStream:writeBytes(java.lang.String)": "/**\n* Writes a string as bytes to the output stream. \n* @param s the string to write\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.LittleEndianDataOutputStream:writeShort(int)": "/**\n* Writes a short value to output stream in two bytes.\n* @param v short value to write\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.LittleEndianDataOutputStream:writeInt(int)": "/**\n* Writes an integer to the output stream in bytes.\n* @param v the integer value to write\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.LittleEndianDataOutputStream:writeUTF(java.lang.String)": "/**\n* Writes a string in modified UTF-8 format to the output stream.\n* @param str the string to write\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.LittleEndianDataOutputStream:close()": "/**\n* Closes the output stream, releasing any associated resources.\n* @throws IOException if an I/O error occurs during closing\n*/",
        "com.google.common.io.LittleEndianDataOutputStream:<init>(java.io.OutputStream)": "/**\n* Constructs a LittleEndianDataOutputStream from the given OutputStream.\n* @param out the OutputStream to wrap; must not be null\n*/",
        "com.google.common.io.LittleEndianDataOutputStream:writeChar(int)": "/**\n* Writes a char value to output stream using two bytes.\n* @param v char value to write\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.LittleEndianDataOutputStream:writeFloat(float)": "/**\n* Writes a float as bytes to the output stream.\n* @param v the float value to write\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.LittleEndianDataOutputStream:writeLong(long)": "/**\n* Writes a long value in reversed byte order to the output stream.\n* @param v the long value to write\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.LittleEndianDataOutputStream:writeChars(java.lang.String)": "/**\n* Writes each character of the string to the output stream.\n* @param s string to write characters from\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.LittleEndianDataOutputStream:writeDouble(double)": "/**\n* Writes a double value as a long in reversed byte order.\n* @param v the double value to write\n* @throws IOException if an I/O error occurs\n*/"
    },
    "com.google.common.io.MoreFiles$PathByteSink": {
        "com.google.common.io.MoreFiles$PathByteSink:openStream()": "/**\n* Opens an output stream to the specified path with given options.\n* @return OutputStream for writing data\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.MoreFiles$PathByteSink:toString()": "/**\n* Returns a string representation of the MoreFiles.asByteSink object.\n* @return formatted string with path and options\n*/"
    },
    "com.google.common.io.MoreFiles$PathByteSource": {
        "com.google.common.io.MoreFiles$PathByteSource:followLinks(java.nio.file.OpenOption[])": "/**\n* Checks if links should be followed based on provided options.\n* @param options array of OpenOption settings\n* @return true if links are to be followed, false if NOFOLLOW_LINKS is present\n*/",
        "com.google.common.io.MoreFiles$PathByteSource:openStream()": "/**\n* Opens an input stream for the specified file path.\n* @return InputStream for reading file data\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.MoreFiles$PathByteSource:readAttributes()": "/**\n* Reads file attributes from the specified path.\n* @return BasicFileAttributes of the file\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.MoreFiles$PathByteSource:toString()": "/**\n* Returns a string representation of the MoreFiles.asByteSource object.\n* @return formatted string with path and options\n*/",
        "com.google.common.io.MoreFiles$PathByteSource:asCharSource(java.nio.charset.Charset)": "/**** Converts to CharSource based on OpenOptions and charset. \n* @param charset character set for conversion \n* @return CharSource instance \n*/",
        "com.google.common.io.MoreFiles$PathByteSource:size()": "/**\n* Returns the file size in bytes.\n* @return size in bytes or throws IOException for directories/symbolic links\n*/",
        "com.google.common.io.MoreFiles$PathByteSource:sizeIfKnown()": "/**\n* Returns file size if known; otherwise, an absent Optional.\n* @return Optional<Long> containing file size or absent if unknown\n*/",
        "com.google.common.io.MoreFiles$PathByteSource:read()": "/**\n* Reads bytes from a file into a byte array.\n* @return byte array containing file data\n* @throws IOException if an I/O error occurs\n*/"
    },
    "com.google.common.io.MoreFiles": {
        "com.google.common.io.MoreFiles:<init>()": "/**\n* Private constructor to prevent instantiation of the MoreFiles class.\n*/",
        "com.google.common.io.MoreFiles:getFileExtension(java.nio.file.Path)": "/**\n* Retrieves the file extension from a given path.\n* @param path the file path\n* @return file extension as a string or empty if none exists\n*/",
        "com.google.common.io.MoreFiles:getNameWithoutExtension(java.nio.file.Path)": "/**\n* Returns the file name without its extension.\n* @param path the file path\n* @return file name without extension or empty string if path is invalid\n*/",
        "com.google.common.io.MoreFiles:getParentPath(java.nio.file.Path)": "/**\n* Returns the parent path of the given path or null if no parent exists.\n* @param path the input path\n* @return parent Path or null if the path has no parent\n*/",
        "com.google.common.io.MoreFiles:addException(java.util.Collection,java.io.IOException)": "/**\n* Adds an IOException to a collection, creating it if null.\n* @param exceptions collection of IOExceptions or null\n* @param e IOException to add\n* @return updated collection of IOExceptions\n*/",
        "com.google.common.io.MoreFiles:concat(java.util.Collection,java.util.Collection)": "/**\n* Concatenates two collections of IOExceptions.\n* @param exceptions first collection of exceptions\n* @param other second collection to concatenate\n* @return combined collection or null if both are null\n*/",
        "com.google.common.io.MoreFiles:touch(java.nio.file.Path)": "/**\n* Updates the last modified time of a file or creates it if it doesn't exist.\n* @param path the file path to update or create\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.MoreFiles:checkAllowsInsecure(java.nio.file.Path,com.google.common.io.RecursiveDeleteOption[])": "/**\n* Validates if insecure deletion is allowed; throws exception if not.\n* @param path file path for the operation\n* @param options array of deletion options\n*/",
        "com.google.common.io.MoreFiles:deleteRecursivelyInsecure(java.nio.file.Path)": "/**\n* Deletes a directory and its contents; returns IOExceptions encountered.\n* @param path directory path to delete\n* @return collection of IOExceptions or null if none occurred\n*/",
        "com.google.common.io.MoreFiles:deleteDirectoryContentsSecure(java.nio.file.SecureDirectoryStream)": "/**\n* Deletes contents of a directory securely, collecting IOExceptions.\n* @param dir directory to delete contents from\n* @return collection of IOExceptions or null if none occurred\n*/",
        "com.google.common.io.MoreFiles:pathNotFound(java.nio.file.Path,java.util.Collection)": "/**\n* Checks for NoSuchFileException from a collection and resolves its parent path.\n* @param path the original file path\n* @param exceptions collection of IOExceptions to analyze\n* @return NoSuchFileException if conditions are met, otherwise null\n*/",
        "com.google.common.io.MoreFiles:deleteDirectoryContentsInsecure(java.nio.file.DirectoryStream)": "/**\n* Deletes contents of a directory, returning IOExceptions encountered.\n* @param dir directory stream to iterate over\n* @return collection of IOExceptions or null if none occurred\n*/",
        "com.google.common.io.MoreFiles:deleteRecursivelySecure(java.nio.file.SecureDirectoryStream,java.nio.file.Path)": "/**\n* Deletes a directory or file securely, collecting IOExceptions if any occur.\n* @param dir secure directory stream for operations\n* @param path path to the directory or file to delete\n* @return collection of IOExceptions or null if none occurred\n*/",
        "com.google.common.io.MoreFiles:throwDeleteFailed(java.nio.file.Path,java.util.Collection)": "/**\n* Throws FileSystemException if deletion fails, analyzing IOExceptions for details.\n* @param path the file path attempted for deletion\n* @param exceptions collection of IOExceptions encountered during deletion\n*/",
        "com.google.common.io.MoreFiles:equal(java.nio.file.Path,java.nio.file.Path)": "/**\n* Compares two file paths for equality.\n* @param path1 first file path\n* @param path2 second file path\n* @return true if files are equal, false otherwise\n*/",
        "com.google.common.io.MoreFiles:listFiles(java.nio.file.Path)": "/**\n* Lists files in a directory as an ImmutableList.\n* @param dir directory path to list files from\n* @return ImmutableList of file paths\n*/",
        "com.google.common.io.MoreFiles:fileTreeChildren(java.nio.file.Path)": "/**\n* Retrieves files in a directory or returns an empty list if not a directory.\n* @param dir directory path to list files from\n* @return Iterable of file paths or empty list if not a directory\n*/",
        "com.google.common.io.MoreFiles:fileTraverser()": "/**\n* Creates a Traverser for file paths using the file tree structure.\n* @return Traverser instance for traversing file paths\n*/"
    },
    "com.google.common.io.MultiInputStream": {
        "com.google.common.io.MultiInputStream:close()": "/**\n* Closes the input stream and sets it to null.\n* @throws IOException if an I/O error occurs during closing\n*/",
        "com.google.common.io.MultiInputStream:available()": "/**\n* Returns the number of bytes available for reading.\n* @return number of bytes or 0 if input stream is null\n*/",
        "com.google.common.io.MultiInputStream:advance()": "/**\n* Advances to the next input stream if available.\n* @throws IOException if an I/O error occurs during closing\n*/",
        "com.google.common.io.MultiInputStream:<init>(java.util.Iterator)": "/**\n* Initializes MultiInputStream with an iterator of ByteSource.\n* @param it iterator of ByteSource elements\n* @throws IOException if an I/O error occurs during initialization\n*/",
        "com.google.common.io.MultiInputStream:read()": "/**\n* Reads next byte from input stream, advancing if necessary.\n* @return byte value or -1 if end of stream is reached\n*/",
        "com.google.common.io.MultiInputStream:read(byte[],int,int)": "/**\n* Reads bytes into an array; returns number of bytes read or -1 if end of stream.\n* @param b byte array to fill\n* @param off offset in array to start filling\n* @param len number of bytes to read\n* @return number of bytes read or -1 if end of stream\n*/",
        "com.google.common.io.MultiInputStream:skip(long)": "/**\n* Skips specified bytes in the input stream.\n* @param n number of bytes to skip\n* @return actual bytes skipped or 0 if none\n*/"
    },
    "com.google.common.io.MultiReader": {
        "com.google.common.io.MultiReader:close()": "/**\n* Closes the current resource and nullifies it.\n* @throws IOException if an I/O error occurs during closing\n*/",
        "com.google.common.io.MultiReader:ready()": "/**\n* Checks if the current object is ready for processing.\n* @return true if current is not null and ready, false otherwise\n*/",
        "com.google.common.io.MultiReader:advance()": "/**\n* Advances to the next item, closing the current resource if applicable.\n* @throws IOException if an I/O error occurs during closing\n*/",
        "com.google.common.io.MultiReader:<init>(java.util.Iterator)": "/**\n* Initializes MultiReader with a given iterator of CharSource objects.\n* @param readers iterator of CharSource instances\n* @throws IOException if an I/O error occurs during initialization\n*/",
        "com.google.common.io.MultiReader:read(char[],int,int)": "/**\n* Reads characters into a buffer; returns -1 if end of stream is reached.\n* @param cbuf buffer to store characters, @param off offset, @param len max chars to read\n* @return number of characters read or -1 if end of stream\n*/",
        "com.google.common.io.MultiReader:skip(long)": "/**\n* Skips 'n' bytes in the current stream.\n* @param n number of bytes to skip; must be non-negative\n* @return number of bytes actually skipped\n*/"
    },
    "com.google.common.io.PatternFilenameFilter": {
        "com.google.common.io.PatternFilenameFilter:accept(java.io.File,java.lang.String)": "/**\n* Checks if the given file name matches the specified pattern.\n* @param dir directory of the file (unused)\n* @param fileName name of the file to check\n* @return true if the file name matches the pattern, false otherwise\n*/",
        "com.google.common.io.PatternFilenameFilter:<init>(java.util.regex.Pattern)": "/**\n* Initializes filter with a non-null pattern.\n* @param pattern the regex pattern for filtering filenames\n*/",
        "com.google.common.io.PatternFilenameFilter:<init>(java.lang.String)": "/**\n* Constructs a PatternFilenameFilter using a regex pattern string.\n* @param patternStr the regex pattern for filtering filenames\n*/"
    },
    "com.google.common.io.ReaderInputStream": {
        "com.google.common.io.ReaderInputStream:close()": "/**\n* Closes the reader resource, releasing any system resources.\n* @throws IOException if an I/O error occurs during closing\n*/",
        "com.google.common.io.ReaderInputStream:drain(byte[],int,int)": "/**\n* Drains bytes from byteBuffer into the provided array.\n* @param b destination array, @param off starting offset, @param len max bytes to drain\n* @return number of bytes actually drained\n*/",
        "com.google.common.io.ReaderInputStream:availableCapacity(java.nio.Buffer)": "/**\n* Calculates available capacity in the given buffer.\n* @param buffer the Buffer object to evaluate\n* @return the available capacity as an integer\n*/",
        "com.google.common.io.ReaderInputStream:read()": "/**\n* Reads a byte and returns its unsigned int value or -1 if no byte is read.\n* @return unsigned int value of the byte or -1 if not available\n*/",
        "com.google.common.io.ReaderInputStream:<init>(java.io.Reader,java.nio.charset.CharsetEncoder,int)": "/**\n* Initializes ReaderInputStream with reader, encoder, and buffer size.\n* @param reader input reader\n* @param encoder charset encoder\n* @param bufferSize size of the buffer, must be positive\n*/",
        "com.google.common.io.ReaderInputStream:startDraining(boolean)": "/**\n* Initiates draining process; reallocates buffer if overflow occurs.\n* @param overflow indicates if overflow condition is met\n*/",
        "com.google.common.io.ReaderInputStream:grow(java.nio.CharBuffer)": "/**\n* Doubles the capacity of the given CharBuffer.\n* @param buf the CharBuffer to grow\n* @return a new CharBuffer with increased capacity\n*/",
        "com.google.common.io.ReaderInputStream:<init>(java.io.Reader,java.nio.charset.Charset,int)": "/**\n* Constructs ReaderInputStream with specified reader, charset, and buffer size.\n* @param reader input reader\n* @param charset character set for encoding\n* @param bufferSize size of the buffer, must be positive\n*/",
        "com.google.common.io.ReaderInputStream:readMoreChars()": "/**\n* Reads more characters into the buffer, expanding if necessary.\n* @throws IOException if an I/O error occurs during reading\n*/",
        "com.google.common.io.ReaderInputStream:read(byte[],int,int)": "/**\n* Reads bytes into the array, encoding characters from input.\n* @param b destination array, @param off starting offset, @param len max bytes to read\n* @return number of bytes read or -1 if end of stream is reached\n*/"
    },
    "com.google.common.io.Resources$UrlByteSource": {
        "com.google.common.io.Resources$UrlByteSource:openStream()": "/**\n* Opens a stream from the specified URL.\n* @return InputStream for reading data from the URL\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.Resources$UrlByteSource:toString()": "/**\n* Returns a string representation of the object in a specific format.\n* @return formatted string with resource URL\n*/",
        "com.google.common.io.Resources$UrlByteSource:<init>(java.net.URL)": "/**\n* Constructs UrlByteSource with a non-null URL.\n* @param url the URL to be assigned\n*/"
    },
    "com.google.common.io.Resources": {
        "com.google.common.io.Resources:<init>()": "/**\n* Private constructor to prevent instantiation of the Resources class.\n*/",
        "com.google.common.io.Resources:asByteSource(java.net.URL)": "/**\n* Converts a URL to a ByteSource.\n* @param url the URL to convert\n* @return a ByteSource representing the URL's content\n*/",
        "com.google.common.io.Resources:getResource(java.lang.String)": "/**\n* Retrieves a resource URL by name.\n* @param resourceName name of the resource to find\n* @return URL of the resource\n*/",
        "com.google.common.io.Resources:getResource(java.lang.Class,java.lang.String)": "/**\n* Retrieves a resource URL; throws if not found.\n* @param contextClass class context for resource lookup\n* @param resourceName name of the resource to find\n* @return URL of the resource\n*/",
        "com.google.common.io.Resources:asCharSource(java.net.URL,java.nio.charset.Charset)": "/**\n* Converts a URL to CharSource with specified character set.\n* @param url the URL to convert\n* @param charset the character set for conversion\n* @return CharSource instance configured with the charset\n*/",
        "com.google.common.io.Resources:copy(java.net.URL,java.io.OutputStream)": "/**\n* Copies content from a URL to an OutputStream.\n* @param from URL source to copy from\n* @param to destination OutputStream\n* @throws IOException if an error occurs during copying\n*/",
        "com.google.common.io.Resources:toByteArray(java.net.URL)": "/**\n* Converts a URL to a byte array.\n* @param url the URL to convert\n* @return byte array of content from the URL\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.Resources:readLines(java.net.URL,java.nio.charset.Charset,com.google.common.io.LineProcessor)": "/**\n* Reads lines from a URL using a specified charset and processes them.\n* @param url the URL to read lines from\n* @param charset the character set for reading\n* @param callback processes each line and returns a result\n* @return result from the LineProcessor\n* @throws IOException if an error occurs during reading\n*/",
        "com.google.common.io.Resources:readLines(java.net.URL,java.nio.charset.Charset)": "/**\n* Reads lines from a URL and returns them as a mutable list.\n* @param url the URL to read from\n* @param charset the character set for reading\n* @return list of lines read from the URL\n* @throws IOException if an error occurs during reading\n*/",
        "com.google.common.io.Resources:toString(java.net.URL,java.nio.charset.Charset)": "/**\n* Converts a URL to a String using the specified character set.\n* @param url the URL to convert\n* @param charset the character set for conversion\n* @return String content from the URL\n* @throws IOException if an error occurs during reading\n*/"
    },
    "com.google.common.io.TempFileCreator$JavaIoCreator": {
        "com.google.common.io.TempFileCreator$JavaIoCreator:createTempFile(java.lang.String)": "/**\n* Creates a temporary file with the given prefix.\n* @param prefix the prefix for the temp file name\n* @return the created temporary File object\n*/",
        "com.google.common.io.TempFileCreator$JavaIoCreator:createTempDir()": "/**\n* Creates a temporary directory in the system's temp folder.\n* @return File object of the created temp directory\n*/"
    },
    "com.google.common.io.TempFileCreator$ThrowingCreator": {
        "com.google.common.io.TempFileCreator$ThrowingCreator:createTempDir()": "/**\n* Throws an exception indicating temporary directory creation is not allowed.\n* @throws IllegalStateException with a predefined message\n*/",
        "com.google.common.io.TempFileCreator$ThrowingCreator:createTempFile(java.lang.String)": "/**\n* Creates a temporary file with the specified prefix.\n* @param prefix the prefix for the temporary file name\n* @throws IOException if file creation fails\n*/"
    },
    "com.google.common.io.TempFileCreator": {
        "com.google.common.io.TempFileCreator:pickSecureCreator()": "/**\n* Selects a secure TempFileCreator based on the environment.\n* @return TempFileCreator instance for file creation\n*/",
        "com.google.common.io.TempFileCreator:<init>()": "/**\n* Private constructor for TempFileCreator to prevent instantiation.\n*/"
    },
    "com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder": {
        "com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder:<init>()": "/**\n* Constructor for BigDecimalToDoubleRounder, initializes the instance.\n*/",
        "com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder:roundToDoubleArbitrarily(java.math.BigDecimal)": "/**\n* Converts BigDecimal to double.\n* @param bigDecimal the BigDecimal to convert\n* @return the double representation of the BigDecimal\n*/",
        "com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder:sign(java.math.BigDecimal)": "/**\n* Returns the sign of the given BigDecimal.\n* @param bigDecimal the BigDecimal to evaluate\n* @return -1 for negative, 0 for zero, 1 for positive\n*/",
        "com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder:toX(double,java.math.RoundingMode)": "/**\n* Converts a double to BigDecimal using specified rounding mode.\n* @param d value to convert\n* @param mode rounding mode to apply\n* @return BigDecimal representation of the double\n*/",
        "com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder:minus(java.math.BigDecimal,java.math.BigDecimal)": "/**\n* Subtracts one BigDecimal from another.\n* @param a minuend value\n* @param b subtrahend value\n* @return result of a - b\n*/"
    },
    "com.google.common.math.BigDecimalMath": {
        "com.google.common.math.BigDecimalMath:<init>()": "/**\n* Private constructor for BigDecimalMath class to prevent instantiation.\n*/",
        "com.google.common.math.BigDecimalMath:roundToDouble(java.math.BigDecimal,java.math.RoundingMode)": "/**\n* Rounds a BigDecimal to a double using the specified rounding mode.\n* @param x the BigDecimal to round\n* @param mode the rounding mode to apply\n* @return the rounded double value\n*/"
    },
    "com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder": {
        "com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:<init>()": "/**\n* Constructs a BigIntegerToDoubleRounder instance.\n*/",
        "com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:sign(java.math.BigInteger)": "/**\n* Returns the sign of the given BigInteger.\n* @param bigInteger the number to evaluate\n* @return -1 if negative, 0 if zero, 1 if positive\n*/",
        "com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:minus(java.math.BigInteger,java.math.BigInteger)": "/**\n* Subtracts two BigInteger values.\n* @param a the minuend\n* @param b the subtrahend\n* @return the result of a - b\n*/",
        "com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:roundToDoubleArbitrarily(java.math.BigInteger)": "/**\n* Rounds BigInteger to double using precise conversion.\n* @param bigInteger value to convert\n* @return double representation of bigInteger\n*/",
        "com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:toX(double,java.math.RoundingMode)": "/**\n* Converts a double to BigInteger using specified rounding mode.\n* @param d value to convert\n* @param mode rounding strategy\n* @return rounded BigInteger\n*/"
    },
    "com.google.common.math.DoubleUtils": {
        "com.google.common.math.DoubleUtils:bigToDouble(java.math.BigInteger)": "/**\n* Converts BigInteger to double with precise rounding.\n* @param x BigInteger to convert\n* @return double representation of x\n*/",
        "com.google.common.math.DoubleUtils:isFinite(double)": "/**\n* Checks if a double value is finite.\n* @param d the double value to check\n* @return true if finite, false otherwise\n*/",
        "com.google.common.math.DoubleUtils:isNormal(double)": "/**\n* Checks if the given double is a normal number.\n* @param d the double value to check\n* @return true if normal, false otherwise\n*/",
        "com.google.common.math.DoubleUtils:scaleNormalize(double)": "/**\n* Normalizes a double value by scaling its significand.\n* @param x input double value to normalize\n* @return normalized double with adjusted significand\n*/",
        "com.google.common.math.DoubleUtils:<init>()": "/**\n* Private constructor to prevent instantiation of the utility class.\n*/",
        "com.google.common.math.DoubleUtils:nextDown(double)": "/**\n* Returns the largest double less than the specified value.\n* @param d the reference double value\n* @return the next lower double value\n*/",
        "com.google.common.math.DoubleUtils:ensureNonNegative(double)": "/**\n* Ensures the value is non-negative.\n* @param value input number\n* @return maximum of value and 0\n*/",
        "com.google.common.math.DoubleUtils:getSignificand(double)": "/**\n* Retrieves the significand of a double value.\n* @param d input double, must be finite\n* @return significand as a long\n*/"
    },
    "com.google.common.math.MathPreconditions": {
        "com.google.common.math.MathPreconditions:checkPositive(java.lang.String,java.math.BigInteger)": "/**\n* Validates if the given BigInteger is positive.\n* @param role description of the value being checked\n* @param x BigInteger to validate\n* @return the input BigInteger if positive\n*/",
        "com.google.common.math.MathPreconditions:checkRoundingUnnecessary(boolean)": "/**\n* Validates if rounding is unnecessary; throws exception if not.\n* @param condition true if rounding is unnecessary\n*/",
        "com.google.common.math.MathPreconditions:checkNonNegative(java.lang.String,java.math.BigInteger)": "/**\n* Validates that x is non-negative.\n* @param role description of the value being checked\n* @param x value to validate\n* @return x if non-negative\n* @throws IllegalArgumentException if x is negative\n*/",
        "com.google.common.math.MathPreconditions:checkNonNegative(java.lang.String,int)": "/**\n* Validates that x is non-negative and returns it.\n* @param role description of the value being checked\n* @param x the integer to validate\n* @return x if non-negative\n* @throws IllegalArgumentException if x is negative\n*/",
        "com.google.common.math.MathPreconditions:checkInRangeForRoundingInputs(boolean,double,java.math.RoundingMode)": "/**\n* Validates if input is within range for rounding.\n* @param condition true if in range; otherwise, throws exception\n* @param input the value to check\n* @param mode the rounding mode applied\n*/",
        "com.google.common.math.MathPreconditions:checkNonNegative(java.lang.String,double)": "/**\n* Validates that x is non-negative and returns it.\n* @param role description of the value being checked\n* @param x value to validate\n* @return the validated non-negative value x\n*/",
        "com.google.common.math.MathPreconditions:checkPositive(java.lang.String,int)": "/**\n* Validates that x is positive; throws exception if not.\n* @param role description of the value being checked\n* @param x value to validate\n* @return the validated positive integer x\n*/",
        "com.google.common.math.MathPreconditions:checkNoOverflow(boolean,java.lang.String,int,int)": "/**\n* Checks for overflow condition and throws an exception if violated.\n* @param condition boolean indicating overflow status\n* @param methodName name of the method being checked\n* @param a first integer value\n* @param b second integer value\n*/",
        "com.google.common.math.MathPreconditions:checkPositive(java.lang.String,long)": "/**\n* Validates that x is positive; throws exception if not.\n* @param role description of the value being checked\n* @param x value to check for positivity\n* @return x if positive\n*/",
        "com.google.common.math.MathPreconditions:checkNonNegative(java.lang.String,long)": "/**\n* Checks if a number is non-negative and returns it.\n* @param role description of the value being checked\n* @param x number to validate\n* @return validated non-negative number\n*/",
        "com.google.common.math.MathPreconditions:checkNoOverflow(boolean,java.lang.String,long,long)": "/**\n* Checks for overflow based on a condition; throws an exception if it occurs.\n* @param condition boolean indicating overflow status\n* @param methodName name of the method being checked\n* @param a first operand\n* @param b second operand\n*/",
        "com.google.common.math.MathPreconditions:<init>()": "/**\n* Private constructor to prevent instantiation of the MathPreconditions class.\n*/"
    },
    "com.google.common.math.BigIntegerMath": {
        "com.google.common.math.BigIntegerMath:fitsInLong(java.math.BigInteger)": "/**\n* Checks if a BigInteger can fit in a long.\n* @param x the BigInteger to check\n* @return true if x fits in a long, false otherwise\n*/",
        "com.google.common.math.BigIntegerMath:roundToDouble(java.math.BigInteger,java.math.RoundingMode)": "/**\n* Rounds a BigInteger to a double using the specified rounding mode.\n* @param x the BigInteger to round\n* @param mode the rounding mode to apply\n* @return the rounded double value\n*/",
        "com.google.common.math.BigIntegerMath:divide(java.math.BigInteger,java.math.BigInteger,java.math.RoundingMode)": "/**\n* Divides two BigIntegers with specified rounding mode.\n* @param p dividend, @param q divisor, @param mode rounding behavior\n* @return result as BigInteger\n*/",
        "com.google.common.math.BigIntegerMath:listProduct(java.util.List,int,int)": "/**\n* Calculates the product of a sublist of BigIntegers.\n* @param nums list of BigIntegers\n* @param start starting index\n* @param end ending index\n* @return product of elements from start to end\n*/",
        "com.google.common.math.BigIntegerMath:<init>()": "/**\n* Private constructor for BigIntegerMath class to prevent instantiation.\n*/",
        "com.google.common.math.BigIntegerMath:isPowerOfTwo(java.math.BigInteger)": "/**\n* Checks if a BigInteger is a power of two.\n* @param x the BigInteger to check\n* @return true if x is a power of two, false otherwise\n*/",
        "com.google.common.math.BigIntegerMath:listProduct(java.util.List)": "/**\n* Computes the product of all BigIntegers in the list.\n* @param nums list of BigIntegers\n* @return product of all elements in the list\n*/",
        "com.google.common.math.BigIntegerMath:log2(java.math.BigInteger,java.math.RoundingMode)": "/**\n* Computes the base-2 logarithm of a BigInteger with specified rounding mode.\n* @param x the BigInteger to compute the log for\n* @param mode the rounding mode to apply\n* @return the logarithm base 2 of x, rounded as specified\n*/",
        "com.google.common.math.BigIntegerMath:factorial(int)": "/**\n* Computes the factorial of a non-negative integer n.\n* @param n non-negative integer for factorial calculation\n* @return BigInteger representing n! (factorial of n)\n*/",
        "com.google.common.math.BigIntegerMath:ceilingPowerOfTwo(java.math.BigInteger)": "/**\n* Computes the smallest power of two greater than or equal to x.\n* @param x the BigInteger input\n* @return BigInteger representing the ceiling power of two\n*/",
        "com.google.common.math.BigIntegerMath:floorPowerOfTwo(java.math.BigInteger)": "/**\n* Computes the largest power of two less than or equal to x.\n* @param x the BigInteger to evaluate\n* @return BigInteger representing the floor power of two\n*/",
        "com.google.common.math.BigIntegerMath:log10(java.math.BigInteger,java.math.RoundingMode)": "/**\n* Computes log10 of a BigInteger with specified rounding mode.\n* @param x BigInteger to compute log10, must be positive\n* @param mode rounding mode for the result\n* @return computed log10 value as an int\n*/",
        "com.google.common.math.BigIntegerMath:binomial(int,int)": "/**\n* Calculates the binomial coefficient C(n, k).\n* @param n total items, @param k chosen items\n* @return BigInteger representing C(n, k)\n*/",
        "com.google.common.math.BigIntegerMath:sqrtApproxWithDoubles(java.math.BigInteger)": "/**\n* Approximates square root of BigInteger using doubles.\n* @param x input BigInteger\n* @return rounded BigInteger square root\n*/",
        "com.google.common.math.BigIntegerMath:sqrtFloor(java.math.BigInteger)": "/**\n* Computes the floor of the square root of a BigInteger.\n* @param x the input BigInteger\n* @return the largest integer less than or equal to sqrt(x)\n*/",
        "com.google.common.math.BigIntegerMath:sqrt(java.math.BigInteger,java.math.RoundingMode)": "/**\n* Computes the square root of a BigInteger with specified rounding mode.\n* @param x non-negative BigInteger input\n* @param mode rounding mode for the result\n* @return the square root of x as BigInteger\n*/"
    },
    "com.google.common.math.DoubleMath": {
        "com.google.common.math.DoubleMath:log2(double)": "/**\n* Computes the base-2 logarithm of a given value.\n* @param x the value to compute the logarithm for\n* @return the base-2 logarithm of x\n*/",
        "com.google.common.math.DoubleMath:<init>()": "/**\n* Private constructor for DoubleMath; prevents instantiation of this utility class.\n*/",
        "com.google.common.math.DoubleMath:factorial(int)": "/**\n* Calculates the factorial of a non-negative integer.\n* @param n the integer for which to calculate the factorial\n* @return factorial value or POSITIVE_INFINITY if n exceeds MAX_FACTORIAL\n*/",
        "com.google.common.math.DoubleMath:checkFinite(double)": "/**\n* Validates and returns a finite double value.\n* @param argument the double value to check\n* @return the argument if finite\n*/",
        "com.google.common.math.DoubleMath:fuzzyEquals(double,double,double)": "/**\n* Checks if two doubles are approximately equal within a specified tolerance.\n* @param a first double to compare\n* @param b second double to compare\n* @param tolerance acceptable difference between a and b\n* @return true if a and b are approximately equal, false otherwise\n*/",
        "com.google.common.math.DoubleMath:mean(java.util.Iterator)": "/**\n* Calculates the mean of a set of numbers.\n* @param values iterator of Number objects\n* @return mean value as a double\n*/",
        "com.google.common.math.DoubleMath:isPowerOfTwo(double)": "/**\n* Checks if a number is a power of two.\n* @param x the number to check\n* @return true if x is a power of two, false otherwise\n*/",
        "com.google.common.math.DoubleMath:isMathematicalInteger(double)": "/**\n* Checks if a number is a mathematical integer.\n* @param x the double value to check\n* @return true if x is a finite integer, false otherwise\n*/",
        "com.google.common.math.DoubleMath:fuzzyCompare(double,double,double)": "/**\n* Compares two doubles with tolerance; returns 0, -1, or 1 based on their relation.\n* @param a first double to compare\n* @param b second double to compare\n* @param tolerance acceptable difference for equality\n* @return comparison result: 0 if equal, -1 if a < b, 1 if a > b\n*/",
        "com.google.common.math.DoubleMath:mean(java.lang.Iterable)": "/**\n* Calculates the mean of a collection of numbers.\n* @param values iterable of Number objects\n* @return mean value as a double\n*/",
        "com.google.common.math.DoubleMath:log2(double,java.math.RoundingMode)": "/**** Computes the base-2 logarithm of a positive finite double with specified rounding mode.  \n* @param x the input double, must be positive and finite  \n* @param mode the rounding mode to apply  \n* @return the base-2 logarithm of x, adjusted based on the rounding mode  \n*/",
        "com.google.common.math.DoubleMath:roundIntermediate(double,java.math.RoundingMode)": "/**\n* Rounds a double value based on the specified RoundingMode.\n* @param x the value to round\n* @param mode the rounding mode to apply\n* @return the rounded double value\n*/",
        "com.google.common.math.DoubleMath:roundToInt(double,java.math.RoundingMode)": "/**\n* Rounds a double to an int based on RoundingMode after validating the range.\n* @param x the value to round\n* @param mode the rounding mode to apply\n* @return the rounded integer value\n*/",
        "com.google.common.math.DoubleMath:roundToLong(double,java.math.RoundingMode)": "/**\n* Rounds a double to long using specified RoundingMode.\n* @param x value to round\n* @param mode rounding mode to apply\n* @return rounded long value\n*/",
        "com.google.common.math.DoubleMath:roundToBigInteger(double,java.math.RoundingMode)": "/**\n* Rounds a double to BigInteger using specified rounding mode.\n* @param x value to round\n* @param mode rounding strategy\n* @return rounded BigInteger\n*/"
    },
    "com.google.common.math.IntMath": {
        "com.google.common.math.IntMath:isPowerOfTwo(int)": "/**\n* Checks if a number is a power of two.\n* @param x the integer to check\n* @return true if x is a power of two, false otherwise\n*/",
        "com.google.common.math.IntMath:lessThanBranchFree(int,int)": "/**\n* Compares two integers without branching.\n* @param x first integer\n* @param y second integer\n* @return 1 if x < y, 0 if x >= y\n*/",
        "com.google.common.math.IntMath:sqrtFloor(int)": "/**\n* Calculates the largest integer less than or equal to the square root of x.\n* @param x non-negative integer input\n* @return integer floor of the square root of x\n*/",
        "com.google.common.math.IntMath:mod(int,int)": "/**\n* Computes the modulus of x by m.\n* @param x the dividend\n* @param m the positive modulus\n* @return the non-negative remainder of x divided by m\n*/",
        "com.google.common.math.IntMath:<init>()": "/**\n* Private constructor to prevent instantiation of the IntMath utility class.\n*/",
        "com.google.common.math.IntMath:saturatedAdd(int,int)": "/**\n* Performs saturated addition of two integers.\n* @param a first integer\n* @param b second integer\n* @return saturated result within Integer limits\n*/",
        "com.google.common.math.IntMath:saturatedSubtract(int,int)": "/**\n* Performs saturated subtraction of two integers.\n* @param a minuend integer\n* @param b subtrahend integer\n* @return saturated result as int\n*/",
        "com.google.common.math.IntMath:saturatedMultiply(int,int)": "/**\n* Multiplies two integers with saturation to prevent overflow.\n* @param a first integer\n* @param b second integer\n* @return saturated result of multiplication\n*/",
        "com.google.common.math.IntMath:divide(int,int,java.math.RoundingMode)": "/**\n* Divides two integers with specified rounding mode.\n* @param p dividend, @param q divisor, @param mode rounding mode\n* @return rounded quotient\n*/",
        "com.google.common.math.IntMath:pow(int,int)": "/**\n* Computes power of base b raised to exponent k.\n* @param b base integer, @param k non-negative exponent\n* @return result of b^k\n*/",
        "com.google.common.math.IntMath:gcd(int,int)": "/**\n* Computes the greatest common divisor (GCD) of two non-negative integers.\n* @param a first non-negative integer\n* @param b second non-negative integer\n* @return GCD of a and b\n*/",
        "com.google.common.math.IntMath:factorial(int)": "/**\n* Computes factorial of a non-negative integer.\n* @param n the integer for which to compute the factorial\n* @return factorial of n or Integer.MAX_VALUE if n is too large\n*/",
        "com.google.common.math.IntMath:binomial(int,int)": "/**\n* Calculates the binomial coefficient C(n, k).\n* @param n total items, @param k items to choose\n* @return binomial coefficient or Integer.MAX_VALUE if out of bounds\n*/",
        "com.google.common.math.IntMath:ceilingPowerOfTwo(int)": "/**\n* Computes the smallest power of two greater than or equal to x.\n* @param x positive integer input\n* @return smallest power of two as an int\n*/",
        "com.google.common.math.IntMath:floorPowerOfTwo(int)": "/**\n* Returns the highest power of two less than or equal to x.\n* @param x positive integer to evaluate\n* @return highest power of two as an integer\n*/",
        "com.google.common.math.IntMath:log2(int,java.math.RoundingMode)": "/**\n* Computes the base-2 logarithm of x with specified rounding mode.\n* @param x positive integer to compute log2 for\n* @param mode rounding mode for the result\n* @return log2 of x as an integer\n*/",
        "com.google.common.math.IntMath:log10Floor(int)": "/**\n* Calculates floor(log10(x)) using a branch-free approach.\n* @param x input integer\n* @return floor(log10(x)) value\n*/",
        "com.google.common.math.IntMath:sqrt(int,java.math.RoundingMode)": "/**\n* Computes square root of x with specified rounding mode.\n* @param x non-negative integer input\n* @param mode rounding mode for the result\n* @return rounded square root of x\n*/",
        "com.google.common.math.IntMath:checkedAdd(int,int)": "/**\n* Safely adds two integers, checking for overflow.\n* @param a first integer value\n* @param b second integer value\n* @return sum of a and b\n*/",
        "com.google.common.math.IntMath:checkedSubtract(int,int)": "/**\n* Subtracts two integers with overflow check.\n* @param a first integer\n* @param b second integer\n* @return result of a - b\n*/",
        "com.google.common.math.IntMath:checkedMultiply(int,int)": "/**\n* Multiplies two integers with overflow check.\n* @param a first integer to multiply\n* @param b second integer to multiply\n* @return product of a and b\n*/",
        "com.google.common.math.IntMath:saturatedPow(int,int)": "/**\n* Computes b raised to the power of k with saturation to prevent overflow.\n* @param b base integer\n* @param k exponent (must be non-negative)\n* @return saturated result of b^k\n*/",
        "com.google.common.math.IntMath:log10(int,java.math.RoundingMode)": "/**\n* Computes logarithm base 10 of x with specified rounding mode.\n* @param x positive integer input\n* @param mode rounding mode for the result\n* @return calculated logarithm based on rounding\n*/",
        "com.google.common.math.IntMath:checkedPow(int,int)": "/**\n* Computes b raised to the power of k with overflow checks.\n* @param b base integer\n* @param k exponent, must be non-negative\n* @return result of b^k\n*/",
        "com.google.common.math.IntMath:isPrime(int)": "/**\n* Checks if a number is prime.\n* @param n the number to check\n* @return true if n is prime, false otherwise\n*/"
    },
    "com.google.common.math.LinearTransformation$LinearTransformationBuilder": {
        "com.google.common.math.LinearTransformation$LinearTransformationBuilder:<init>(double,double)": "/**\n* Constructs a LinearTransformationBuilder with specified coordinates.\n* @param x1 x-coordinate\n* @param y1 y-coordinate\n*/",
        "com.google.common.math.LinearTransformation$LinearTransformationBuilder:withSlope(double)": "/**\n* Creates a LinearTransformation based on the given slope.\n* @param slope the slope of the transformation\n* @return RegularLinearTransformation or VerticalLinearTransformation\n*/",
        "com.google.common.math.LinearTransformation$LinearTransformationBuilder:and(double,double)": "/**\n* Creates a LinearTransformation based on two points.\n* @param x2 second x-coordinate\n* @param y2 second y-coordinate\n* @return LinearTransformation based on the provided points\n*/"
    },
    "com.google.common.math.LinearTransformation": {
        "com.google.common.math.LinearTransformation:<init>()": "/**\n* Default constructor for LinearTransformation, marked as deprecated.\n*/",
        "com.google.common.math.LinearTransformation:forNaN()": "/**\n* Returns a singleton instance of NaNLinearTransformation.\n* @return NaNLinearTransformation instance\n*/",
        "com.google.common.math.LinearTransformation:mapping(double,double)": "/**\n* Creates a LinearTransformationBuilder with specified coordinates.\n* @param x1 x-coordinate; @param y1 y-coordinate\n* @return LinearTransformationBuilder instance\n*/",
        "com.google.common.math.LinearTransformation:horizontal(double)": "/**\n* Creates a horizontal linear transformation at given y-intercept.\n* @param y the y-intercept value\n* @return RegularLinearTransformation instance\n*/",
        "com.google.common.math.LinearTransformation:vertical(double)": "/**\n* Creates a vertical transformation with a finite factor.\n* @param x vertical transformation factor\n* @return LinearTransformation instance\n*/"
    },
    "com.google.common.math.LinearTransformation$RegularLinearTransformation": {
        "com.google.common.math.LinearTransformation$RegularLinearTransformation:toString()": "/**\n* Returns a string representation of the linear equation in slope-intercept form.\n* @return formatted string \"y = slope * x + yIntercept\"\n*/",
        "com.google.common.math.LinearTransformation$RegularLinearTransformation:isHorizontal()": "/**\n* Checks if the line is horizontal based on its slope.\n* @return true if slope is zero, false otherwise\n*/",
        "com.google.common.math.LinearTransformation$RegularLinearTransformation:isVertical()": "/**\n* Checks if the shape is vertical.\n* @return false indicating the shape is not vertical\n*/",
        "com.google.common.math.LinearTransformation$RegularLinearTransformation:slope()": "/**\n* Retrieves the slope value.\n* @return the current slope as a double\n*/",
        "com.google.common.math.LinearTransformation$RegularLinearTransformation:transform(double)": "/**\n* Transforms input value using linear equation y = mx + b.\n* @param x input value to transform\n* @return transformed value based on slope and yIntercept\n*/",
        "com.google.common.math.LinearTransformation$RegularLinearTransformation:<init>(double,double)": "/**\n* Initializes a RegularLinearTransformation with slope and y-intercept.\n* @param slope the slope of the linear transformation\n* @param yIntercept the y-intercept of the linear transformation\n*/",
        "com.google.common.math.LinearTransformation$RegularLinearTransformation:<init>(double,double,com.google.common.math.LinearTransformation)": "/**\n* Initializes a RegularLinearTransformation with slope and y-intercept.\n* @param slope line slope value\n* @param yIntercept line y-intercept value\n* @param inverse inverse LinearTransformation object\n*/",
        "com.google.common.math.LinearTransformation$RegularLinearTransformation:createInverse()": "/**\n* Creates an inverse linear transformation based on slope and y-intercept.\n* @return LinearTransformation representing the inverse\n*/",
        "com.google.common.math.LinearTransformation$RegularLinearTransformation:inverse()": "/**\n* Returns the inverse linear transformation, creating it if not already cached.\n* @return LinearTransformation object representing the inverse\n*/"
    },
    "com.google.common.math.LinearTransformation$VerticalLinearTransformation": {
        "com.google.common.math.LinearTransformation$VerticalLinearTransformation:slope()": "/**\n* Throws IllegalStateException when slope calculation is not implemented.\n* @return never returns a value\n*/",
        "com.google.common.math.LinearTransformation$VerticalLinearTransformation:transform(double)": "/**\n* Throws an exception indicating the method is not implemented.\n* @param x input value to transform (not used)\n* @throws IllegalStateException if called\n*/",
        "com.google.common.math.LinearTransformation$VerticalLinearTransformation:toString()": "/**\n* Returns a string representation of the object with its x value.\n* @return formatted string of the x value\n*/",
        "com.google.common.math.LinearTransformation$VerticalLinearTransformation:isHorizontal()": "/**\n* Checks if the object is horizontal.\n* @return false, indicating the object is not horizontal\n*/",
        "com.google.common.math.LinearTransformation$VerticalLinearTransformation:isVertical()": "/**\n* Checks if the shape is vertical.\n* @return true if the shape is vertical, false otherwise\n*/",
        "com.google.common.math.LinearTransformation$VerticalLinearTransformation:<init>(double)": "/**\n* Initializes VerticalLinearTransformation with x value.\n* @param x vertical transformation factor\n*/",
        "com.google.common.math.LinearTransformation$VerticalLinearTransformation:<init>(double,com.google.common.math.LinearTransformation)": "/**\n* Constructs a VerticalLinearTransformation with x and its inverse transformation.\n* @param x value for vertical transformation\n* @param inverse LinearTransformation to apply in reverse\n*/",
        "com.google.common.math.LinearTransformation$VerticalLinearTransformation:createInverse()": "/**\n* Creates an inverse LinearTransformation with a slope of 0.\n* @return RegularLinearTransformation object representing the inverse\n*/",
        "com.google.common.math.LinearTransformation$VerticalLinearTransformation:inverse()": "/**\n* Returns the inverse of the LinearTransformation.\n* @return LinearTransformation object representing the inverse\n*/"
    },
    "com.google.common.math.LongMath$MillerRabinTester": {
        "com.google.common.math.LongMath$MillerRabinTester:powMod(long,long,long)": "/**\n* Computes (a^p) mod m using binary exponentiation.\n* @param a base, @param p exponent, @param m modulus\n* @return result of (a^p) mod m\n*/",
        "com.google.common.math.LongMath$MillerRabinTester:testWitness(long,long)": "/**\n* Tests if the base is a witness for non-primality of n.\n* @param base the base to test, @param n the number to check\n* @return true if n is likely composite, false if probably prime\n*/",
        "com.google.common.math.LongMath$MillerRabinTester:test(long,long)": "/**\n* Tests if base is a witness for non-primality of n.\n* @param base the base to test\n* @param n the number to check\n* @return true if n is likely composite, false if probably prime\n*/"
    },
    "com.google.common.math.PairedStats": {
        "com.google.common.math.PairedStats:<init>(com.google.common.math.Stats,com.google.common.math.Stats,double)": "/**\n* Initializes PairedStats with xStats, yStats, and their sum of products of deltas.\n* @param xStats statistics for x variable\n* @param yStats statistics for y variable\n* @param sumOfProductsOfDeltas sum of products of deltas for x and y\n*/",
        "com.google.common.math.PairedStats:xStats()": "/**\n* Retrieves the current xStats object.\n* @return Stats object containing xStats data\n*/",
        "com.google.common.math.PairedStats:yStats()": "/**\n* Retrieves the current yStats object.\n* @return Stats object representing y statistics\n*/",
        "com.google.common.math.PairedStats:ensurePositive(double)": "/**\n* Ensures a positive value; returns Double.MIN_VALUE if non-positive.\n* @param value the input value to check\n* @return the original value if positive, else Double.MIN_VALUE\n*/",
        "com.google.common.math.PairedStats:ensureInUnitRange(double)": "/**\n* Clamps the value to the range [-1.0, 1.0].\n* @param value input value to be clamped\n* @return clamped value within the range\n*/",
        "com.google.common.math.PairedStats:hashCode()": "/**\n* Computes the hash code based on xStats, yStats, and sumOfProductsOfDeltas.\n* @return hash code as an integer\n*/",
        "com.google.common.math.PairedStats:sumOfProductsOfDeltas()": "/**\n* Returns the sum of products of deltas.\n* @return sum of products of deltas as a double\n*/",
        "com.google.common.math.PairedStats:count()": "/**\n* Returns the current count value.\n* @return the current count as a long\n*/",
        "com.google.common.math.PairedStats:equals(java.lang.Object)": "/**\n* Compares this PairedStats object with another for equality.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.math.PairedStats:toByteArray()": "/**\n* Converts statistics to a byte array.\n* @return byte array containing serialized statistics data\n*/",
        "com.google.common.math.PairedStats:populationCovariance()": "/**\n* Calculates the population covariance.\n* @return population covariance as a double\n*/",
        "com.google.common.math.PairedStats:sampleCovariance()": "/**\n* Calculates the sample covariance.\n* @return the sample covariance as a double\n*/",
        "com.google.common.math.PairedStats:pearsonsCorrelationCoefficient()": "/**\n* Computes Pearson's correlation coefficient.\n* @return correlation coefficient or NaN if not computable\n*/",
        "com.google.common.math.PairedStats:fromByteArray(byte[])": "/**\n* Creates PairedStats from byte array.\n* @param byteArray input data for PairedStats\n* @return PairedStats object constructed from byteArray\n*/",
        "com.google.common.math.PairedStats:leastSquaresFit()": "/**\n* Computes the least squares linear transformation.\n* @return LinearTransformation based on data statistics\n*/",
        "com.google.common.math.PairedStats:toString()": "/**\n* Returns a string representation of the object with stats if count is positive.\n* @return formatted string with stats or empty values\n*/"
    },
    "com.google.common.math.Stats": {
        "com.google.common.math.Stats:count()": "/**\n* Returns the current count value.\n* @return the current count as a long\n*/",
        "com.google.common.math.Stats:sumOfSquaresOfDeltas()": "/**\n* Returns the sum of squares of deltas.\n* @return total sum of squares of deltas as a double\n*/",
        "com.google.common.math.Stats:equals(java.lang.Object)": "/**\n* Compares this Stats object with another for equality.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.math.Stats:<init>(long,double,double,double,double)": "/**\n* Initializes statistical metrics for a dataset.\n* @param count number of elements\n* @param mean average value\n* @param sumOfSquaresOfDeltas variance measure\n* @param min minimum value\n* @param max maximum value\n*/",
        "com.google.common.math.Stats:hashCode()": "/**\n* Computes the hash code based on statistical properties.\n* @return hash code as an integer\n*/",
        "com.google.common.math.Stats:mean()": "/**\n* Returns the mean value if count is non-zero.\n* @return mean value as double\n*/",
        "com.google.common.math.Stats:min()": "/**\n* Returns the minimum value if count is non-zero.\n* @return minimum value or throws IllegalStateException if count is zero\n*/",
        "com.google.common.math.Stats:max()": "/**\n* Returns the maximum value; throws if count is zero.\n* @return maximum value as double\n*/",
        "com.google.common.math.Stats:writeTo(java.nio.ByteBuffer)": "/**\n* Writes statistical data to a ByteBuffer.\n* @param buffer the ByteBuffer to write data into\n*/",
        "com.google.common.math.Stats:readFrom(java.nio.ByteBuffer)": "/**\n* Reads Stats object from ByteBuffer.\n* @param buffer input ByteBuffer with data\n* @return Stats object populated from buffer\n*/",
        "com.google.common.math.Stats:toByteArray()": "/**\n* Converts object data to a byte array.\n* @return byte array representation of the object\n*/",
        "com.google.common.math.Stats:populationVariance()": "/**\n* Calculates the population variance of a dataset.\n* @return population variance as a double, or NaN if invalid\n*/",
        "com.google.common.math.Stats:sampleVariance()": "/**\n* Calculates the sample variance from deltas.\n* @return sample variance or NaN if input is invalid\n*/",
        "com.google.common.math.Stats:meanOf(java.util.Iterator)": "/**\n* Calculates the mean of a series of numbers from an iterator.\n* @param values iterator of Number objects\n* @return computed mean value\n*/",
        "com.google.common.math.Stats:fromByteArray(byte[])": "/**\n* Converts byte array to Stats object.\n* @param byteArray input byte array representing Stats\n* @return Stats object populated from byte array\n*/",
        "com.google.common.math.Stats:toStats()": "/**\n* Collects numbers into a Stats object using StatsAccumulator.\n* @return Collector for aggregating numbers into Stats\n*/",
        "com.google.common.math.Stats:populationStandardDeviation()": "/**\n* Calculates the population standard deviation.\n* @return standard deviation as a double\n*/",
        "com.google.common.math.Stats:sampleStandardDeviation()": "/**\n* Calculates the sample standard deviation.\n* @return sample standard deviation or NaN if input is invalid\n*/",
        "com.google.common.math.Stats:meanOf(java.lang.Iterable)": "/**\n* Computes the mean of a series of numbers from an iterable.\n* @param values iterable of Number objects\n* @return computed mean value\n*/",
        "com.google.common.math.Stats:toString()": "/**\n* Returns a string representation of the object with statistical values if count > 0.\n*/",
        "com.google.common.math.Stats:of(java.lang.Iterable)": "/**\n* Computes statistics from a collection of numbers.\n* @param values iterable collection of Number objects\n* @return Stats object containing computed metrics\n*/",
        "com.google.common.math.Stats:of(java.util.Iterator)": "/**\n* Computes statistics from a given iterator of numbers.\n* @param values iterator of Numbers to calculate statistics\n* @return Stats object with computed metrics\n*/",
        "com.google.common.math.Stats:of(java.util.stream.DoubleStream)": "/**\n* Creates Stats object from a stream of values.\n* @param values stream of double values to process\n* @return Stats object with calculated metrics\n*/",
        "com.google.common.math.Stats:of(java.util.stream.IntStream)": "/**\n* Creates Stats from an IntStream by accumulating values and taking a snapshot.\n* @param values input stream of integers\n* @return Stats object with accumulated metrics\n*/",
        "com.google.common.math.Stats:of(java.util.stream.LongStream)": "/**\n* Collects statistics from a LongStream and returns a Stats object.\n* @param values stream of long values to analyze\n* @return Stats object with calculated metrics\n*/"
    },
    "com.google.common.math.StatsAccumulator": {
        "com.google.common.math.StatsAccumulator:<init>()": "/**\n* Initializes a new instance of StatsAccumulator.\n*/",
        "com.google.common.math.StatsAccumulator:count()": "/**\n* Returns the current count value.\n* @return current count as a long\n*/",
        "com.google.common.math.StatsAccumulator:sumOfSquaresOfDeltas()": "/**\n* Returns the sum of squares of deltas.\n* @return double representing the computed sum\n*/",
        "com.google.common.math.StatsAccumulator:mean()": "/**\n* Computes the mean value.\n* @return mean value if count is non-zero; throws exception otherwise\n*/",
        "com.google.common.math.StatsAccumulator:min()": "/**\n* Returns the minimum value.\n* @throws IllegalStateException if no values are present\n*/",
        "com.google.common.math.StatsAccumulator:max()": "/**\n* Returns the maximum value; throws if count is zero.\n* @return maximum value as double\n*/",
        "com.google.common.math.StatsAccumulator:calculateNewMeanNonFinite(double,double)": "/**\n* Calculates new mean considering non-finite values.\n* @param previousMean existing mean value\n* @param value new value to incorporate\n* @return updated mean or NaN for non-finite cases\n*/",
        "com.google.common.math.StatsAccumulator:snapshot()": "/**\n* Creates a snapshot of statistical metrics.\n* @return Stats object with current metrics values\n*/",
        "com.google.common.math.StatsAccumulator:populationVariance()": "/**\n* Calculates the population variance of a dataset.\n* @return population variance or NaN if invalid data\n*/",
        "com.google.common.math.StatsAccumulator:sampleVariance()": "/**\n* Calculates the sample variance.\n* @return sample variance or NaN if invalid state\n*/",
        "com.google.common.math.StatsAccumulator:add(double)": "/**\n* Updates statistical values with a new input.\n* @param value new value to add for calculations\n*/",
        "com.google.common.math.StatsAccumulator:merge(long,double,double,double,double)": "/**\n* Merges statistics from another dataset.\n* @param otherCount number of elements in the other dataset\n* @param otherMean average of the other dataset\n* @param otherSumOfSquaresOfDeltas sum of squares of deltas for the other dataset\n* @param otherMin minimum value in the other dataset\n* @param otherMax maximum value in the other dataset\n*/",
        "com.google.common.math.StatsAccumulator:populationStandardDeviation()": "/**\n* Computes the population standard deviation.\n* @return standard deviation calculated from population variance\n*/",
        "com.google.common.math.StatsAccumulator:sampleStandardDeviation()": "/**\n* Computes the sample standard deviation.\n* @return standard deviation calculated from sample variance\n*/",
        "com.google.common.math.StatsAccumulator:addAll(java.lang.Iterable)": "/**\n* Adds all numeric values from the iterable to the statistics.\n* @param values collection of Number objects to add\n*/",
        "com.google.common.math.StatsAccumulator:addAll(java.util.Iterator)": "/**\n* Adds all numeric values from the iterator to statistical calculations.\n* @param values iterator of Numbers to be added\n*/",
        "com.google.common.math.StatsAccumulator:addAll(com.google.common.math.Stats)": "/**\n* Merges statistics from another Stats object if it has non-zero count.\n* @param values Stats object containing statistical data\n*/",
        "com.google.common.math.StatsAccumulator:addAll(com.google.common.math.StatsAccumulator)": "/**\n* Merges statistics from another StatsAccumulator if it has values.\n* @param values StatsAccumulator containing statistics to merge\n*/",
        "com.google.common.math.StatsAccumulator:addAll(java.util.stream.DoubleStream)": "/**\n* Merges statistics from a DoubleStream into StatsAccumulator.\n* @param values stream of double values to process\n*/",
        "com.google.common.math.StatsAccumulator:addAll(java.util.stream.IntStream)": "/**\n* Merges statistics from an IntStream into a StatsAccumulator.\n* @param values IntStream of integers to add for calculations\n*/",
        "com.google.common.math.StatsAccumulator:addAll(java.util.stream.LongStream)": "/**\n* Merges statistics from a LongStream into an existing StatsAccumulator.\n* @param values LongStream containing values to add for calculations\n*/"
    },
    "com.google.common.primitives.Doubles": {
        "com.google.common.primitives.Doubles:isFinite(double)": "/**\n* Checks if a double value is finite (not infinite or NaN).\n* @param value the double value to check\n* @return true if finite, false otherwise\n*/",
        "com.google.common.primitives.Doubles:constrainToRange(double,double,double)": "/**\n* Constrains a value within the specified range [min, max].\n* @param value the number to constrain\n* @param min the minimum allowable value\n* @param max the maximum allowable value\n* @return constrained value within the range\n* @throws IllegalArgumentException if min > max\n*/",
        "com.google.common.primitives.Doubles:hashCode(double)": "/**\n* Returns the hash code for a double value.\n* @param value the double value to hash\n* @return the hash code of the specified double\n*/",
        "com.google.common.primitives.Doubles:<init>()": "/**\n* Private constructor for the Doubles class to prevent instantiation.\n*/",
        "com.google.common.primitives.Doubles:compare(double,double)": "/**\n* Compares two double values.\n* @param a first double value\n* @param b second double value\n* @return negative if a < b, zero if a == b, positive if a > b\n*/",
        "com.google.common.primitives.Doubles:indexOf(double[],double,int,int)": "/**\n* Finds the index of target in the specified range of the array.\n* @param array the array to search in\n* @param target the value to find\n* @param start the starting index of the search\n* @param end the ending index of the search\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Doubles:lastIndexOf(double[],double,int,int)": "/**\n* Returns the last index of target in the array within specified bounds.\n* @param array the array to search\n* @param target the value to find\n* @param start the starting index for search\n* @param end the ending index for search\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Doubles:fpPattern()": "/**\n* Compiles a regex pattern for floating-point literals.\n* @return Pattern object for matching float/double values\n*/",
        "com.google.common.primitives.Doubles:tryParse(java.lang.String)": "/**\n* Attempts to parse a string as a Double.\n* @param string input string to parse\n* @return parsed Double or null if parsing fails\n*/",
        "com.google.common.primitives.Doubles:indexOf(double[],double[])": "/**\n* Finds the starting index of target array in the given array.\n* @param array the array to search within\n* @param target the array to find\n* @return index of target in array or -1 if not found\n*/",
        "com.google.common.primitives.Doubles:ensureCapacity(double[],int,int)": "/**\n* Ensures the array has at least minLength; extends if necessary with padding.\n* @param array the original array\n* @param minLength minimum required length\n* @param padding additional space to add if resizing\n* @return the resized array\n*/",
        "com.google.common.primitives.Doubles:toArray(java.util.Collection)": "/**\n* Converts a collection of Numbers to a double array.\n* @param collection input collection of Number objects\n* @return double array representation of the collection\n*/",
        "com.google.common.primitives.Doubles:indexOf(double[],double)": "/**\n* Finds the index of target in the array.\n* @param array the array to search in\n* @param target the value to find\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Doubles:lastIndexOf(double[],double)": "/**\n* Finds the last index of target in the array.\n* @param array the array to search\n* @param target the value to find\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Doubles:reverse(double[],int,int)": "/**\n* Reverses a portion of the array from fromIndex to toIndex.\n* @param array the array to reverse\n* @param fromIndex starting index\n* @param toIndex ending index\n*/",
        "com.google.common.primitives.Doubles:sortDescending(double[],int,int)": "/**\n* Sorts a subarray in descending order.\n* @param array the array to sort, @param fromIndex starting index, @param toIndex ending index\n*/",
        "com.google.common.primitives.Doubles:reverse(double[])": "/**\n* Reverses the entire array after checking for null.\n* @param array the array to reverse\n*/",
        "com.google.common.primitives.Doubles:rotate(double[],int,int,int)": "/**\n* Rotates a subarray within the specified indices by a given distance.\n* @param array the array to rotate\n* @param distance the number of positions to rotate\n* @param fromIndex starting index of the subarray\n* @param toIndex ending index of the subarray\n*/",
        "com.google.common.primitives.Doubles:sortDescending(double[])": "/**\n* Sorts the given array in descending order.\n* @param array the array to sort; must not be null\n*/",
        "com.google.common.primitives.Doubles:rotate(double[],int)": "/**\n* Rotates the entire array by a specified distance.\n* @param array the array to rotate\n* @param distance the number of positions to rotate\n*/"
    },
    "com.google.common.math.PairedStatsAccumulator": {
        "com.google.common.math.PairedStatsAccumulator:ensurePositive(double)": "/**\n* Ensures a positive value; returns MIN_VALUE if input is non-positive.\n* @param value input number to check\n* @return positive value or Double.MIN_VALUE if input is non-positive\n*/",
        "com.google.common.math.PairedStatsAccumulator:<init>()": "/**\n* Constructs a new instance of PairedStatsAccumulator.\n*/",
        "com.google.common.math.PairedStatsAccumulator:count()": "/**\n* Returns the current count value from xStats.\n* @return current count as a long\n*/",
        "com.google.common.math.PairedStatsAccumulator:ensureInUnitRange(double)": "/**\n* Ensures value is within the range [-1.0, 1.0].\n* @param value the number to constrain\n* @return constrained value within the unit range\n*/",
        "com.google.common.math.PairedStatsAccumulator:populationCovariance()": "/**\n* Calculates the population covariance.\n* @return population covariance as a double\n*/",
        "com.google.common.math.PairedStatsAccumulator:sampleCovariance()": "/**\n* Calculates sample covariance based on current data.\n* @return sample covariance as a double\n*/",
        "com.google.common.math.PairedStatsAccumulator:pearsonsCorrelationCoefficient()": "/**\n* Calculates Pearson's correlation coefficient.\n* @return correlation value in range [-1, 1] or NaN if invalid data\n*/",
        "com.google.common.math.PairedStatsAccumulator:snapshot()": "/**\n* Creates a snapshot of paired statistics.\n* @return PairedStats object with x and y statistics\n*/",
        "com.google.common.math.PairedStatsAccumulator:xStats()": "/**\n* Retrieves current statistical metrics snapshot.\n* @return Stats object containing current metrics values\n*/",
        "com.google.common.math.PairedStatsAccumulator:yStats()": "/**\n* Retrieves current statistical metrics.\n* @return Stats object containing metrics values\n*/",
        "com.google.common.math.PairedStatsAccumulator:leastSquaresFit()": "/**\n* Computes the least squares linear transformation.\n* @return LinearTransformation based on data statistics\n*/",
        "com.google.common.math.PairedStatsAccumulator:add(double,double)": "/**\n* Updates statistics with two new values and computes sum of products of their deltas.\n* @param x first value to add\n* @param y second value to add\n*/",
        "com.google.common.math.PairedStatsAccumulator:addAll(com.google.common.math.PairedStats)": "/**\n* Merges statistics from another PairedStats object if it has non-zero count.\n* @param values PairedStats object containing statistical data\n*/"
    },
    "com.google.common.math.Quantiles$Scale": {
        "com.google.common.math.Quantiles$Scale:index(int)": "/**\n* Creates a ScaleAndIndex object with given scale and index.\n* @param index the index to be used in the ScaleAndIndex\n* @return a new ScaleAndIndex instance\n*/",
        "com.google.common.math.Quantiles$Scale:<init>(int)": "/**\n* Constructs a Scale object with a positive integer scale.\n* @param scale positive integer representing the scale value\n*/",
        "com.google.common.math.Quantiles$Scale:indexes(java.util.Collection)": "/**\n* Creates ScaleAndIndexes from scale and integer collection.\n* @param indexes collection of integer indexes\n* @return ScaleAndIndexes object\n*/"
    },
    "com.google.common.math.Quantiles$ScaleAndIndex": {
        "com.google.common.math.Quantiles$ScaleAndIndex:<init>(int,int)": "/**\n* Initializes ScaleAndIndex with given scale and index.\n* @param scale scaling factor\n* @param index position index\n*/",
        "com.google.common.math.Quantiles$ScaleAndIndex:compute(java.util.Collection)": "/**\n* Computes a result from a collection of Numbers.\n* @param dataset input collection of Number objects\n* @return computed double result\n*/"
    },
    "com.google.common.math.Quantiles": {
        "com.google.common.math.Quantiles:<init>()": "/**\n* Constructor for Quantiles class, marked as deprecated.\n*/",
        "com.google.common.math.Quantiles:scale(int)": "/**\n* Creates a new Scale instance with the specified scale value.\n* @param scale the scale value for the new Scale\n* @return a Scale object initialized with the given value\n*/",
        "com.google.common.math.Quantiles:checkIndex(int,int)": "/**\n* Validates the index against the scale limits.\n* @param index the index to check\n* @param scale the upper limit for the index\n* @throws IllegalArgumentException if index is out of bounds\n*/",
        "com.google.common.math.Quantiles:swap(double[],int,int)": "/**\n* Swaps elements at indices i and j in the given array.\n* @param array the array containing elements to swap\n* @param i first index to swap\n* @param j second index to swap\n*/",
        "com.google.common.math.Quantiles:chooseNextSelection(int[],int,int,int,int)": "/**\n* Selects the closest index to the center in a sorted range.\n* @param allRequired sorted array of required values\n* @param requiredFrom start index for search\n* @param requiredTo end index for search\n* @param from lower bound of the range\n* @param to upper bound of the range\n* @return index of the closest required value to the center\n*/",
        "com.google.common.math.Quantiles:longsToDoubles(long[])": "/**\n* Converts an array of longs to an array of doubles.\n* @param longs array of long values\n* @return array of double values\n*/",
        "com.google.common.math.Quantiles:intsToDoubles(int[])": "/**\n* Converts an array of integers to an array of doubles.\n* @param ints input array of integers\n* @return array of doubles corresponding to the input integers\n*/",
        "com.google.common.math.Quantiles:interpolate(double,double,double,double)": "/**\n* Interpolates a value between lower and upper based on remainder and scale.\n* @param lower the lower bound\n* @param upper the upper bound\n* @param remainder the interpolation factor\n* @param scale the scaling factor\n* @return interpolated double value or NaN for infinite bounds\n*/",
        "com.google.common.math.Quantiles:median()": "/**\n* Computes the median ScaleAndIndex using predefined scale and index values.\n* @return ScaleAndIndex object representing the median\n*/",
        "com.google.common.math.Quantiles:quartiles()": "/**\n* Creates a Scale instance for quartiles.\n* @return Scale object initialized for quartile value of 4\n*/",
        "com.google.common.math.Quantiles:percentiles()": "/**\n* Creates a Scale object for percentiles.\n* @return Scale initialized to 100 for percentile calculations\n*/",
        "com.google.common.math.Quantiles:movePivotToStartOfSlice(double[],int,int)": "/**\n* Moves the pivot to the start of the slice in the given array.\n* @param array the array to modify\n* @param from starting index of the slice\n* @param to ending index of the slice\n*/",
        "com.google.common.math.Quantiles:partition(double[],int,int)": "/**\n* Partitions the array around a pivot and returns the pivot's final index.\n* @param array the array to partition\n* @param from starting index of the partition\n* @param to ending index of the partition\n* @return the final index of the pivot\n*/",
        "com.google.common.math.Quantiles:selectInPlace(int,double[],int,int)": "/**\n* Selects the required element in place from the array.\n* @param required index of the desired element\n* @param array the array to select from\n* @param from starting index of the selection range\n* @param to ending index of the selection range\n*/",
        "com.google.common.math.Quantiles:selectAllInPlace(int[],int,int,double[],int,int)": "/**\n* Selects all required elements in place from the array.\n* @param allRequired sorted array of required values\n* @param requiredFrom start index for selection\n* @param requiredTo end index for selection\n* @param array the array to select from\n* @param from lower bound of the range\n* @param to upper bound of the range\n*/"
    },
    "com.google.common.net.HostAndPort": {
        "com.google.common.net.HostAndPort:<init>(java.lang.String,int,boolean)": "/**\n* Constructs a HostAndPort object with specified host, port, and bracketless colon flag.\n* @param host host name or IP address\n* @param port port number\n* @param hasBracketlessColons indicates if colons are bracketless\n*/",
        "com.google.common.net.HostAndPort:hasPort()": "/**\n* Checks if the port number is valid (non-negative).\n* @return true if port is valid, false otherwise\n*/",
        "com.google.common.net.HostAndPort:isValidPort(int)": "/**\n* Checks if the given port number is valid.\n* @param port integer port number to validate\n* @return true if valid, false otherwise\n*/",
        "com.google.common.net.HostAndPort:hashCode()": "/**\n* Computes the hash code based on host and port.\n* @return hash code as an integer\n*/",
        "com.google.common.net.HostAndPort:getHost()": "/**\n* Retrieves the host value.\n* @return the host as a String\n*/",
        "com.google.common.net.HostAndPort:equals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param other object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.net.HostAndPort:getHostAndPortFromBracketedHost(java.lang.String)": "/**\n* Extracts host and port from a bracketed host-port string.\n* @param hostPortString input string formatted as [host:port]\n* @return String array with host and port, or empty port if not present\n*/",
        "com.google.common.net.HostAndPort:requireBracketsForIPv6()": "/**\n* Validates IPv6 format requires brackets; throws exception if not.\n* @return HostAndPort instance\n*/",
        "com.google.common.net.HostAndPort:getPort()": "/**\n* Retrieves the port number if it exists.\n* @return port number as an integer\n*/",
        "com.google.common.net.HostAndPort:getPortOrDefault(int)": "/**\n* Returns the port number or a default value if invalid.\n* @param defaultPort fallback port number if current is invalid\n* @return current port or defaultPort\n*/",
        "com.google.common.net.HostAndPort:toString()": "/**\n* Returns string representation of host with optional port.\n* @return formatted string of host and port if valid\n*/",
        "com.google.common.net.HostAndPort:withDefaultPort(int)": "/**\n* Returns HostAndPort with default port if none exists.\n* @param defaultPort the port to use if no port is set\n* @return HostAndPort object with default port\n*/",
        "com.google.common.net.HostAndPort:fromString(java.lang.String)": "/**\n* Parses a host-port string into HostAndPort object.\n* @param hostPortString formatted host and port string\n* @return HostAndPort instance with host and port details\n*/",
        "com.google.common.net.HostAndPort:fromParts(java.lang.String,int)": "/**** Constructs HostAndPort from host string and port number. \n* @param host hostname or IP address \n* @param port port number \n* @return HostAndPort instance \n*/",
        "com.google.common.net.HostAndPort:fromHost(java.lang.String)": "/**\n* Parses a host string into HostAndPort; ensures no port is present.\n* @param host formatted host string\n* @return HostAndPort instance with host details\n*/"
    },
    "com.google.common.net.HostSpecifier": {
        "com.google.common.net.HostSpecifier:<init>(java.lang.String)": "/**\n* Constructs a HostSpecifier with the given canonical form.\n* @param canonicalForm the canonical representation of the host\n*/",
        "com.google.common.net.HostSpecifier:equals(java.lang.Object)": "/**\n* Checks equality of this HostSpecifier with another object.\n* @param other object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.net.HostSpecifier:hashCode()": "/**\n* Returns the hash code for the object based on its canonical form.\n* @return hash code as an integer\n*/",
        "com.google.common.net.HostSpecifier:fromValid(java.lang.String)": "/**\n* Creates a HostSpecifier from a valid host string.\n* @param specifier host string without port\n* @return HostSpecifier object or throws IllegalArgumentException\n*/",
        "com.google.common.net.HostSpecifier:from(java.lang.String)": "/**\n* Converts a string to a HostSpecifier or throws ParseException for invalid input.\n* @param specifier host string without port\n* @return HostSpecifier object\n*/",
        "com.google.common.net.HostSpecifier:isValid(java.lang.String)": "/**\n* Checks if the host specifier is valid.\n* @param specifier host string without port\n* @return true if valid, false if invalid\n*/"
    },
    "com.google.common.net.InetAddresses": {
        "com.google.common.net.InetAddresses:forString(java.lang.String)": "/**\n* Converts an IP string to InetAddress.\n* @param ipString the IP address in string format\n* @return InetAddress corresponding to the IP string\n*/",
        "com.google.common.net.InetAddresses:<init>()": "/**\n* Private constructor to prevent instantiation of the InetAddresses class.\n*/",
        "com.google.common.net.InetAddresses:isInetAddress(java.lang.String)": "/**\n* Checks if the given string is a valid IP address.\n* @param ipString the IP address string to validate\n* @return true if valid, false otherwise\n*/",
        "com.google.common.net.InetAddresses:parseOctet(java.lang.String,int,int)": "/**\n* Parses and validates a substring as an octet (0-255) from a decimal string.\n* @param ipString the string containing the octet\n* @param start the starting index of the substring\n* @param end the ending index of the substring\n* @return the parsed byte value of the octet\n*/",
        "com.google.common.net.InetAddresses:parseHextet(java.lang.String,int,int)": "/**\n* Parses a hextet from a hex string.\n* @param ipString the hex string, @param start start index, @param end end index\n* @return parsed short value of the hextet\n*/",
        "com.google.common.net.InetAddresses:compressLongestRunOfZeroes(int[])": "/**\n* Compresses the longest run of zeroes in the given array.\n* @param hextets array of integers representing hextets\n*/",
        "com.google.common.net.InetAddresses:hextetsToIPv6String(int[])": "/**\n* Converts an array of hextets to an IPv6 string representation.\n* @param hextets array of hextet integers\n* @return formatted IPv6 address as a string\n*/",
        "com.google.common.net.InetAddresses:forUriString(java.lang.String)": "/**\n* Converts a URI string to an InetAddress.\n* @param hostAddr the URI string to convert\n* @return InetAddress object corresponding to the URI\n* @throws IllegalArgumentException if the URI is invalid\n*/",
        "com.google.common.net.InetAddresses:isUriInetAddress(java.lang.String)": "/**\n* Checks if the given string is a valid URI InetAddress.\n* @param ipString the string to validate as URI InetAddress\n* @return true if valid, false otherwise\n*/",
        "com.google.common.net.InetAddresses:isCompatIPv4Address(java.net.Inet6Address)": "/**\n* Checks if the given Inet6Address is a compatible IPv4 address.\n* @param ip the Inet6Address to check\n* @return true if compatible, false otherwise\n*/",
        "com.google.common.net.InetAddresses:is6to4Address(java.net.Inet6Address)": "/**\n* Checks if the given IPv6 address is a 6to4 address.\n* @param ip the Inet6Address to check\n* @return true if it is a 6to4 address, false otherwise\n*/",
        "com.google.common.net.InetAddresses:isTeredoAddress(java.net.Inet6Address)": "/**\n* Checks if the given IPv6 address is a Teredo address.\n* @param ip the Inet6Address to check\n* @return true if it's a Teredo address, false otherwise\n*/",
        "com.google.common.net.InetAddresses:isMappedIPv4Address(java.lang.String)": "/**\n* Checks if the given string is a mapped IPv4 address.\n* @param ipString the IP address string to validate\n* @return true if mapped IPv4, false otherwise\n*/",
        "com.google.common.net.InetAddresses:toBigInteger(java.net.InetAddress)": "/**\n* Converts an InetAddress to a BigInteger.\n* @param address the InetAddress to convert\n* @return BigInteger representation of the address\n*/",
        "com.google.common.net.InetAddresses:fromLittleEndianByteArray(byte[])": "/**\n* Converts a little-endian byte array to an InetAddress.\n* @param addr byte array representing the address\n* @return InetAddress object constructed from the reversed array\n* @throws UnknownHostException if the address is invalid\n*/",
        "com.google.common.net.InetAddresses:isMaximum(java.net.InetAddress)": "/**\n* Checks if the given IP address is the maximum (255.255.255.255).\n* @param address the InetAddress to check\n* @return true if maximum, false otherwise\n*/",
        "com.google.common.net.InetAddresses:decrement(java.net.InetAddress)": "/**\n* Decrements the given InetAddress by one.\n* @param address the InetAddress to decrement\n* @return decremented InetAddress\n*/",
        "com.google.common.net.InetAddresses:increment(java.net.InetAddress)": "/**\n* Increments the given IP address.\n* @param address the InetAddress to increment\n* @return the incremented InetAddress\n*/",
        "com.google.common.net.InetAddresses:fromBigInteger(java.math.BigInteger,boolean)": "/**\n* Converts BigInteger to InetAddress based on IPv4/IPv6 flag.\n* @param address BigInteger representation of the IP address\n* @param isIpv6 true for IPv6, false for IPv4\n* @return InetAddress corresponding to the given BigInteger\n*/",
        "com.google.common.net.InetAddresses:getInet4Address(byte[])": "/**\n* Converts a 4-byte array to an Inet4Address.\n* @param bytes array containing 4 bytes of an IPv4 address\n* @return Inet4Address object representing the IP address\n*/",
        "com.google.common.net.InetAddresses:textToNumericFormatV4(java.lang.String)": "/**\n* Converts an IPv4 string to a byte array.\n* @param ipString the IPv4 address as a string\n* @return byte array of octets or null if invalid format\n*/",
        "com.google.common.net.InetAddresses:textToNumericFormatV6(java.lang.String)": "/**\n* Converts IPv6 string to numeric format.\n* @param ipString the IPv6 address as a string\n* @return byte array of numeric format or null if invalid\n*/",
        "com.google.common.net.InetAddresses:toAddrString(java.net.InetAddress)": "/**\n* Converts InetAddress to its string representation.\n* @param ip the InetAddress to convert\n* @return formatted IP address as a string\n*/",
        "com.google.common.net.InetAddresses:isIsatapAddress(java.net.Inet6Address)": "/**\n* Determines if the given IPv6 address is an ISATAP address.\n* @param ip the Inet6Address to check\n* @return true if it's an ISATAP address, false otherwise\n*/",
        "com.google.common.net.InetAddresses:hasEmbeddedIPv4ClientAddress(java.net.Inet6Address)": "/**\n* Checks if the given Inet6Address has an embedded IPv4 client address.\n* @param ip the Inet6Address to check\n* @return true if it has an embedded IPv4 address, false otherwise\n*/",
        "com.google.common.net.InetAddresses:fromIPv4BigInteger(java.math.BigInteger)": "/**\n* Converts a BigInteger to an Inet4Address.\n* @param address BigInteger representation of the IPv4 address\n* @return Inet4Address corresponding to the given BigInteger\n*/",
        "com.google.common.net.InetAddresses:fromIPv6BigInteger(java.math.BigInteger)": "/**\n* Converts a BigInteger to an Inet6Address for IPv6.\n* @param address BigInteger representation of the IPv6 address\n* @return Inet6Address corresponding to the given BigInteger\n*/",
        "com.google.common.net.InetAddresses:fromInteger(int)": "/**\n* Converts an integer to an Inet4Address.\n* @param address integer representation of an IPv4 address\n* @return Inet4Address object corresponding to the integer\n*/",
        "com.google.common.net.InetAddresses:convertDottedQuadToHex(java.lang.String)": "/**\n* Converts a dotted quad IP address to hex format.\n* @param ipString the IP address in dotted quad format\n* @return hex representation or null if invalid\n*/",
        "com.google.common.net.InetAddresses:toUriString(java.net.InetAddress)": "/**\n* Converts InetAddress to URI string format.\n* @param ip the InetAddress to convert\n* @return formatted URI string representation\n*/",
        "com.google.common.net.InetAddresses:getCompatIPv4Address(java.net.Inet6Address)": "/**\n* Retrieves compatible IPv4 address from an Inet6Address.\n* @param ip the Inet6Address to check\n* @return Inet4Address object\n*/",
        "com.google.common.net.InetAddresses:get6to4IPv4Address(java.net.Inet6Address)": "/**\n* Retrieves IPv4 address from a 6to4 IPv6 address.\n* @param ip Inet6Address to convert\n* @return Inet4Address derived from the IPv6 address\n*/",
        "com.google.common.net.InetAddresses:getIsatapIPv4Address(java.net.Inet6Address)": "/**\n* Retrieves the Inet4Address from an ISATAP IPv6 address.\n* @param ip the Inet6Address to validate and convert\n* @return Inet4Address corresponding to the ISATAP address\n*/",
        "com.google.common.net.InetAddresses:getTeredoInfo(java.net.Inet6Address)": "/**\n* Retrieves TeredoInfo from a given IPv6 address.\n* @param ip the Inet6Address to analyze\n* @return TeredoInfo containing server, client, port, and flags\n*/",
        "com.google.common.net.InetAddresses:getEmbeddedIPv4ClientAddress(java.net.Inet6Address)": "/**\n* Retrieves embedded IPv4 address from an Inet6Address.\n* @param ip the Inet6Address to analyze\n* @return Inet4Address of the embedded client or throws exception if none exists\n*/",
        "com.google.common.net.InetAddresses:getCoercedIPv4Address(java.net.InetAddress)": "/**\n* Coerces an InetAddress to an Inet4Address, handling special IPv6 cases.\n* @param ip the InetAddress to coerce\n* @return corresponding Inet4Address or null if coercion fails\n*/",
        "com.google.common.net.InetAddresses:coerceToInteger(java.net.InetAddress)": "/**\n* Converts InetAddress to an integer via its IPv4 representation.\n* @param ip InetAddress to coerce\n* @return integer representation of the IPv4 address\n*/"
    },
    "com.google.common.net.InternetDomainName": {
        "com.google.common.net.InternetDomainName:toString()": "/**\n* Returns the string representation of the object, which is the name.\n* @return name of the object as a String\n*/",
        "com.google.common.net.InternetDomainName:matchesType(com.google.common.base.Optional,com.google.common.base.Optional)": "/**\n* Checks if the actual type matches the desired type.\n* @param desiredType expected PublicSuffixType, may be absent\n* @param actualType actual PublicSuffixType, may be absent\n* @return true if types match or desired is absent, false otherwise\n*/",
        "com.google.common.net.InternetDomainName:hasParent()": "/**\n* Checks if the object has a parent based on parts size.\n* @return true if parts contain more than one element, false otherwise\n*/",
        "com.google.common.net.InternetDomainName:equals(java.lang.Object)": "/**\n* Compares this object to another for equality.\n* @param object the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.net.InternetDomainName:hashCode()": "/**\n* Computes hash code based on the name field.\n* @return hash code integer for the name\n*/",
        "com.google.common.net.InternetDomainName:findSuffixOfType(com.google.common.base.Optional)": "/**\n* Finds index of suffix matching desired type from parts.\n* @param desiredType expected suffix type, may be absent\n* @return index of matching suffix or NO_SUFFIX_FOUND\n*/",
        "com.google.common.net.InternetDomainName:publicSuffixIndex()": "/**\n* Retrieves the public suffix index, initializing if necessary.\n* @return index of public suffix or NO_SUFFIX_FOUND if not initialized\n*/",
        "com.google.common.net.InternetDomainName:registrySuffixIndex()": "/**\n* Retrieves the index of the registry suffix, initializing if necessary.\n* @return index of the registry suffix or NO_SUFFIX_FOUND if not initialized\n*/",
        "com.google.common.net.InternetDomainName:validatePart(java.lang.String,boolean)": "/**\n* Validates a domain part's length and character conditions.\n* @param part the domain part to validate\n* @param isFinalPart indicates if this is the last domain part\n* @return true if valid, false otherwise\n*/",
        "com.google.common.net.InternetDomainName:isPublicSuffix()": "/**\n* Checks if the current domain is a public suffix.\n* @return true if it is a public suffix, false otherwise\n*/",
        "com.google.common.net.InternetDomainName:hasPublicSuffix()": "/**\n* Checks if the current domain has a public suffix.\n* @return true if a public suffix exists, false otherwise\n*/",
        "com.google.common.net.InternetDomainName:isUnderPublicSuffix()": "/**\n* Checks if the current domain is under a public suffix.\n* @return true if under public suffix, false otherwise\n*/",
        "com.google.common.net.InternetDomainName:isTopPrivateDomain()": "/**\n* Checks if the domain is a top private domain.\n* @return true if it's a top private domain, false otherwise\n*/",
        "com.google.common.net.InternetDomainName:isRegistrySuffix()": "/**\n* Checks if the registry suffix is uninitialized.\n* @return true if uninitialized, false otherwise\n*/",
        "com.google.common.net.InternetDomainName:hasRegistrySuffix()": "/**\n* Checks if a registry suffix is present.\n* @return true if suffix exists, false otherwise\n*/",
        "com.google.common.net.InternetDomainName:isUnderRegistrySuffix()": "/**\n* Checks if the current index is under a valid registry suffix.\n* @return true if index is greater than zero, false otherwise\n*/",
        "com.google.common.net.InternetDomainName:isTopDomainUnderRegistrySuffix()": "/**\n* Checks if the top domain is under the registry suffix.\n* @return true if it is, false otherwise.\n*/",
        "com.google.common.net.InternetDomainName:validateSyntax(java.util.List)": "/**\n* Validates syntax of domain parts.\n* @param parts list of domain parts to validate\n* @return true if all parts are valid, false otherwise\n*/",
        "com.google.common.net.InternetDomainName:<init>(java.lang.String)": "/**\n* Constructs an Internet domain name with normalization and validation.\n* @param name input domain name to normalize and validate\n*/",
        "com.google.common.net.InternetDomainName:from(java.lang.String)": "/**\n* Creates an InternetDomainName from a given string.\n* @param domain the input domain name to normalize and validate\n* @return InternetDomainName instance\n*/",
        "com.google.common.net.InternetDomainName:ancestor(int)": "/**\n* Returns the ancestor domain name after removing specified levels.\n* @param levels number of parts to remove from the domain name\n* @return InternetDomainName of the ancestor domain\n*/",
        "com.google.common.net.InternetDomainName:child(java.lang.String)": "/**\n* Creates a child domain name from the given left parts and the current domain name.\n* @param leftParts the left part of the domain to append\n* @return InternetDomainName instance for the child domain\n*/",
        "com.google.common.net.InternetDomainName:isValid(java.lang.String)": "/**\n* Validates a domain name format.\n* @param name the domain name to validate\n* @return true if valid, false if invalid\n*/",
        "com.google.common.net.InternetDomainName:publicSuffix()": "/**\n* Retrieves the public suffix of the domain if it exists.\n* @return InternetDomainName of the public suffix or null if none exists\n*/",
        "com.google.common.net.InternetDomainName:topPrivateDomain()": "/**\n* Returns the ancestor domain if not top private; checks public suffix status first.\n* @return InternetDomainName of ancestor or this if top private domain\n*/",
        "com.google.common.net.InternetDomainName:registrySuffix()": "/**\n* Returns the registry suffix domain name or null if not present.\n* @return InternetDomainName or null if no suffix exists\n*/",
        "com.google.common.net.InternetDomainName:topDomainUnderRegistrySuffix()": "/**\n* Returns the top domain if under registry suffix; otherwise, throws an error.\n* @return InternetDomainName of the top domain\n*/",
        "com.google.common.net.InternetDomainName:parent()": "/**\n* Retrieves the parent domain name if it exists.\n* @return InternetDomainName of the parent or throws an exception if none exists\n*/"
    },
    "com.google.common.net.HttpHeaders$ReferrerPolicyValues": {
        "com.google.common.net.HttpHeaders$ReferrerPolicyValues:<init>()": "/**\n* Private constructor for ReferrerPolicyValues class.\n*/"
    },
    "com.google.common.net.HttpHeaders": {
        "com.google.common.net.HttpHeaders:<init>()": "/**\n* Private constructor for HttpHeaders class to prevent instantiation.\n*/"
    },
    "com.google.common.net.InetAddresses$TeredoInfo": {
        "com.google.common.net.InetAddresses$TeredoInfo:getClient()": "/**\n* Retrieves the client's IPv4 address.\n* @return Inet4Address of the client\n*/",
        "com.google.common.net.InetAddresses$TeredoInfo:<init>(java.net.Inet4Address,java.net.Inet4Address,int,int)": "/**\n* Initializes TeredoInfo with server, client, port, and flags.\n* @param server optional server address\n* @param client optional client address\n* @param port valid port number (0-65535)\n* @param flags valid flags value (0-65535)\n*/"
    },
    "com.google.common.net.MediaType$Tokenizer": {
        "com.google.common.net.MediaType$Tokenizer:<init>(java.lang.String)": "/**\n* Initializes Tokenizer with the given input string.\n* @param input the string to be tokenized\n*/",
        "com.google.common.net.MediaType$Tokenizer:hasMore()": "/**\n* Checks if there are more elements to read in the input.\n* @return true if more elements are available, false otherwise\n*/",
        "com.google.common.net.MediaType$Tokenizer:previewChar()": "/**\n* Returns the character at the current position.\n* @throws IllegalStateException if no more characters are available\n*/",
        "com.google.common.net.MediaType$Tokenizer:consumeCharacter(com.google.common.base.CharMatcher)": "/**\n* Consumes and returns a character matching the given matcher.\n* @param matcher condition to match the character\n* @return the matched character\n*/",
        "com.google.common.net.MediaType$Tokenizer:consumeCharacter(char)": "/**\n* Consumes and returns a character if it matches the expected value.\n* @param c expected character to consume\n* @return the consumed character\n*/",
        "com.google.common.net.MediaType$Tokenizer:consumeTokenIfPresent(com.google.common.base.CharMatcher)": "/**\n* Consumes a token if present using the provided CharMatcher.\n* @param matcher CharMatcher to identify the token\n* @return the consumed token or remaining input if none found\n*/",
        "com.google.common.net.MediaType$Tokenizer:consumeToken(com.google.common.base.CharMatcher)": "/**\n* Consumes a token using CharMatcher and checks state change.\n* @param matcher CharMatcher to identify the token\n* @return consumed token as a String\n*/"
    },
    "com.google.common.net.MediaType": {
        "com.google.common.net.MediaType:<init>(java.lang.String,java.lang.String,com.google.common.collect.ImmutableListMultimap)": "/**\n* Constructs a MediaType with specified type, subtype, and parameters.\n* @param type MIME type\n* @param subtype MIME subtype\n* @param parameters additional parameters for the MediaType\n*/",
        "com.google.common.net.MediaType:addKnownType(com.google.common.net.MediaType)": "/**\n* Adds a known media type to the collection.\n* @param mediaType the MediaType to add\n* @return the added MediaType\n*/",
        "com.google.common.net.MediaType:hasWildcard()": "/**\n* Checks if type or subtype is a wildcard.\n* @return true if either is a wildcard, false otherwise\n*/",
        "com.google.common.net.MediaType:is(com.google.common.net.MediaType)": "/**\n* Checks if the media type matches this instance.\n* @param mediaTypeRange MediaType to compare\n* @return true if matches, false otherwise\n*/",
        "com.google.common.net.MediaType:escapeAndQuote(java.lang.String)": "/**\n* Escapes special characters in a string and wraps it in quotes.\n* @param value input string to escape and quote\n* @return escaped and quoted string\n*/",
        "com.google.common.net.MediaType:normalizeToken(java.lang.String)": "/**\n* Normalizes a token by validating and converting it to lowercase.\n* @param token input string to normalize\n* @return lowercase version of the token\n*/",
        "com.google.common.net.MediaType:normalizeParameterValue(java.lang.String,java.lang.String)": "/**\n* Normalizes a parameter value to lowercase if it matches a specific attribute.\n* @param attribute the attribute to check against CHARSET_ATTRIBUTE\n* @param value the value to normalize, must be non-null ASCII\n* @return normalized value or original if attribute does not match\n*/",
        "com.google.common.net.MediaType:createConstant(java.lang.String,java.lang.String)": "/**** Creates a MediaType with specified type and subtype. \n* @param type MIME type \n* @param subtype MIME subtype \n* @return MediaType object with absent charset \n*/",
        "com.google.common.net.MediaType:createConstantUtf8(java.lang.String,java.lang.String)": "/**\n* Creates a UTF-8 MediaType and adds it to known types.\n* @param type MIME type\n* @param subtype MIME subtype\n* @return MediaType object with UTF-8 charset\n*/",
        "com.google.common.net.MediaType:charset()": "/**\n* Retrieves the charset from parameters or returns absent if not defined.\n* @return Optional<Charset> containing the charset or absent if none found\n*/",
        "com.google.common.net.MediaType:computeToString()": "/**\n* Constructs a string representation of the object.\n* @return formatted string including type, subtype, and parameters\n*/",
        "com.google.common.net.MediaType:toString()": "/**\n* Returns a string representation of the object, caching the result.\n* @return formatted string including type, subtype, and parameters\n*/",
        "com.google.common.net.MediaType:parametersAsMap()": "/**\n* Converts parameters to a map of ImmutableMultisets.\n* @return map with parameter names and their corresponding ImmutableMultisets\n*/",
        "com.google.common.net.MediaType:equals(java.lang.Object)": "/**\n* Compares this MediaType to another object for equality.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.net.MediaType:hashCode()": "/**\n* Computes hash code based on type, subtype, and parameters.\n* @return computed hash code as an integer\n*/",
        "com.google.common.net.MediaType:withParameters(java.lang.String,java.lang.Iterable)": "/**\n* Creates a MediaType with updated parameters based on the given attribute and values.\n* @param attribute the attribute to be normalized\n* @param values collection of values to associate with the attribute\n* @return MediaType instance with updated parameters\n*/",
        "com.google.common.net.MediaType:create(java.lang.String,java.lang.String,com.google.common.collect.Multimap)": "/**\n* Creates a MediaType from type, subtype, and parameters.\n* @param type MIME type, @param subtype MIME subtype, @param parameters key-value pairs\n* @return MediaType instance or known type constant\n*/",
        "com.google.common.net.MediaType:withParameter(java.lang.String,java.lang.String)": "/**\n* Creates a MediaType with a single parameter.\n* @param attribute the attribute to be set\n* @param value the value associated with the attribute\n* @return MediaType instance with the specified parameter\n*/",
        "com.google.common.net.MediaType:withParameters(com.google.common.collect.Multimap)": "/**\n* Creates a MediaType with specified parameters.\n* @param parameters key-value pairs for the MediaType\n* @return MediaType instance created with the parameters\n*/",
        "com.google.common.net.MediaType:create(java.lang.String,java.lang.String)": "/**\n* Creates a MediaType with specified type and subtype.\n* @param type MIME type, @param subtype MIME subtype\n* @return MediaType instance with absent charset\n*/",
        "com.google.common.net.MediaType:parse(java.lang.String)": "/**\n* Parses a media type from the input string.\n* @param input media type string to parse\n* @return MediaType object constructed from parsed values\n*/",
        "com.google.common.net.MediaType:withCharset(java.nio.charset.Charset)": "/**\n* Creates MediaType with specified charset.\n* @param charset character set to be used\n* @return MediaType instance with charset attribute\n*/",
        "com.google.common.net.MediaType:withoutParameters()": "/**\n* Returns MediaType without parameters.\n* @return MediaType instance without parameters or itself if empty\n*/",
        "com.google.common.net.MediaType:createApplicationType(java.lang.String)": "/**\n* Creates a MediaType for application with specified subtype.\n* @param subtype MIME subtype for the application type\n* @return MediaType instance for the application type\n*/",
        "com.google.common.net.MediaType:createAudioType(java.lang.String)": "/**\n* Creates a MediaType for audio with specified subtype.\n* @param subtype MIME subtype for audio\n* @return MediaType instance for audio type\n*/",
        "com.google.common.net.MediaType:createFontType(java.lang.String)": "/**\n* Creates a MediaType for fonts with specified subtype.\n* @param subtype MIME subtype for the font\n* @return MediaType instance for the font type\n*/",
        "com.google.common.net.MediaType:createImageType(java.lang.String)": "/**\n* Creates a MediaType for images with specified subtype.\n* @param subtype MIME subtype for the image\n* @return MediaType instance for the image type\n*/",
        "com.google.common.net.MediaType:createTextType(java.lang.String)": "/**\n* Creates a MediaType for text with specified subtype.\n* @param subtype MIME subtype for the text type\n* @return MediaType instance for the text type\n*/",
        "com.google.common.net.MediaType:createVideoType(java.lang.String)": "/**\n* Creates a MediaType for video with specified subtype.\n* @param subtype MIME subtype for the video type\n* @return MediaType instance for the video type\n*/"
    },
    "com.google.common.net.PercentEscaper": {
        "com.google.common.net.PercentEscaper:createSafeOctets(java.lang.String)": "/**\n* Creates a boolean array for safe characters.\n* @param safeChars string of safe characters\n* @return boolean array indicating presence of each character\n*/",
        "com.google.common.net.PercentEscaper:escape(int)": "/**\n* Escapes a Unicode code point into a percent-encoded char array.\n* @param cp Unicode code point to escape\n* @return percent-encoded char array or null for safe octets\n*/",
        "com.google.common.net.PercentEscaper:nextEscapeIndex(java.lang.CharSequence,int,int)": "/**\n* Finds the next index of a character outside safe octets.\n* @param csq character sequence to inspect\n* @param index starting index for search\n* @param end ending index for search\n* @return index of first unsafe character or end index\n*/",
        "com.google.common.net.PercentEscaper:escape(java.lang.String)": "/**\n* Escapes unsafe characters in the input string.\n* @param s input string to escape\n* @return escaped string or original if safe\n*/",
        "com.google.common.net.PercentEscaper:<init>(java.lang.String,boolean)": "/**\n* Constructs a PercentEscaper with specified safe characters and space encoding option.\n* @param safeChars characters deemed safe for escaping\n* @param plusForSpace whether to encode spaces as plus signs\n*/"
    },
    "com.google.common.net.UrlEscapers": {
        "com.google.common.net.UrlEscapers:<init>()": "/**\n* Private constructor to prevent instantiation of the UrlEscapers class.\n*/"
    },
    "com.google.common.primitives.Booleans$BooleanArrayAsList": {
        "com.google.common.primitives.Booleans$BooleanArrayAsList:<init>(boolean[],int,int)": "/**\n* Initializes a sublist view of a boolean array.\n* @param array the source boolean array\n* @param start the starting index of the sublist\n* @param end the ending index of the sublist\n*/",
        "com.google.common.primitives.Booleans$BooleanArrayAsList:size()": "/**\n* Returns the size of the range defined by start and end.\n* @return the difference between end and start\n*/",
        "com.google.common.primitives.Booleans$BooleanArrayAsList:contains(java.lang.Object)": "/**\n* Checks if the array contains the specified Boolean target.\n* @param target the Boolean object to search for\n* @return true if found, false otherwise\n*/",
        "com.google.common.primitives.Booleans$BooleanArrayAsList:indexOf(java.lang.Object)": "/**\n* Finds the index of a Boolean target in the array.\n* @param target the Boolean value to locate\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Booleans$BooleanArrayAsList:lastIndexOf(java.lang.Object)": "/**\n* Finds the last index of a specified Boolean in the array.\n* @param target the Boolean value to search for\n* @return the last index or -1 if not found\n*/",
        "com.google.common.primitives.Booleans$BooleanArrayAsList:toBooleanArray()": "/**\n* Converts a subarray to a boolean array.\n* @return boolean array from specified range of the original array\n*/",
        "com.google.common.primitives.Booleans$BooleanArrayAsList:<init>(boolean[])": "/**** Initializes a BooleanArrayAsList with the entire boolean array. \n* @param array the source boolean array */",
        "com.google.common.primitives.Booleans$BooleanArrayAsList:equals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.primitives.Booleans$BooleanArrayAsList:toString()": "/**\n* Converts the range of boolean values to a string representation.\n* @return formatted string of boolean values in the range\n*/",
        "com.google.common.primitives.Booleans$BooleanArrayAsList:hashCode()": "/**\n* Computes the hash code for a boolean array segment.\n* @return hash code based on the boolean values in the array\n*/",
        "com.google.common.primitives.Booleans$BooleanArrayAsList:get(int)": "/**\n* Retrieves the element at the specified index.\n* @param index the index of the element to retrieve\n* @return the element at the given index\n*/",
        "com.google.common.primitives.Booleans$BooleanArrayAsList:set(int,java.lang.Boolean)": "/**** Sets element at specified index and returns the old value.\\n@param index position in the array\\n@param element new Boolean value\\n@return old Boolean value at the index****/",
        "com.google.common.primitives.Booleans$BooleanArrayAsList:subList(int,int)": "/**\n* Returns a sublist of boolean values from the specified range.\n* @param fromIndex starting index of the sublist\n* @param toIndex ending index of the sublist\n* @return List of Boolean values from the specified range\n*/"
    },
    "com.google.common.primitives.Booleans$BooleanComparator": {
        "com.google.common.primitives.Booleans$BooleanComparator:compare(java.lang.Boolean,java.lang.Boolean)": "/**\n* Compares two Boolean values, returning their relative order.\n* @param a first Boolean to compare\n* @param b second Boolean to compare\n* @return positive if b > a, negative if b < a, zero if equal\n*/"
    },
    "com.google.common.primitives.Bytes$ByteArrayAsList": {
        "com.google.common.primitives.Bytes$ByteArrayAsList:<init>(byte[],int,int)": "/**\n* Initializes a view of a byte array from start to end indices.\n* @param array the byte array to be viewed\n* @param start the starting index (inclusive)\n* @param end the ending index (exclusive)\n*/",
        "com.google.common.primitives.Bytes$ByteArrayAsList:size()": "/**\n* Returns the number of elements in the range.\n* @return the count of elements between start and end\n*/",
        "com.google.common.primitives.Bytes$ByteArrayAsList:contains(java.lang.Object)": "/**\n* Checks if the array contains the specified Byte target.\n* @param target the Byte object to search for\n* @return true if found, false otherwise\n*/",
        "com.google.common.primitives.Bytes$ByteArrayAsList:indexOf(java.lang.Object)": "/**\n* Finds the index of a target Byte in the array.\n* @param target the Byte to find\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Bytes$ByteArrayAsList:lastIndexOf(java.lang.Object)": "/**\n* Returns the last index of target Byte in the array.\n* @param target the Byte to search for\n* @return last index or -1 if not found\n*/",
        "com.google.common.primitives.Bytes$ByteArrayAsList:toByteArray()": "/**\n* Converts a subarray to a byte array.\n* @return byte array from specified range of the original array\n*/",
        "com.google.common.primitives.Bytes$ByteArrayAsList:<init>(byte[])": "/**\n* Initializes a ByteArrayAsList with the entire byte array.\n* @param array the byte array to be viewed\n*/",
        "com.google.common.primitives.Bytes$ByteArrayAsList:equals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param object the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.primitives.Bytes$ByteArrayAsList:toString()": "/**\n* Returns a string representation of the array elements between start and end.\n* @return formatted string of array elements\n*/",
        "com.google.common.primitives.Bytes$ByteArrayAsList:hashCode()": "/****\n* Computes the hash code for a byte array segment.\n* @return computed hash code as an int\n*/",
        "com.google.common.primitives.Bytes$ByteArrayAsList:get(int)": "/**\n* Retrieves a byte from the array at the specified index.\n* @param index the index of the byte to retrieve\n* @return the byte at the given index\n*/",
        "com.google.common.primitives.Bytes$ByteArrayAsList:set(int,java.lang.Byte)": "/**\n* Sets the element at the specified index and returns the old value.\n* @param index position to set the new element\n* @param element new value to set\n* @return old element at the specified index\n*/",
        "com.google.common.primitives.Bytes$ByteArrayAsList:subList(int,int)": "/**\n* Returns a sublist of bytes from specified indices.\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n* @return List of Byte elements in the specified range\n*/"
    },
    "com.google.common.primitives.Bytes": {
        "com.google.common.primitives.Bytes:hashCode(byte)": "/**\n* Returns the hash code of a byte as an int.\n* @param value the byte value to hash\n* @return the int representation of the byte\n*/",
        "com.google.common.primitives.Bytes:<init>()": "/**\n* Private constructor to prevent instantiation of the Bytes class.\n*/",
        "com.google.common.primitives.Bytes:indexOf(byte[],byte,int,int)": "/**\n* Finds the index of a target byte in a specified array range.\n* @param array the byte array to search\n* @param target the byte to find\n* @param start the starting index for search\n* @param end the ending index for search\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Bytes:lastIndexOf(byte[],byte,int,int)": "/**\n* Finds the last index of a target byte in a specified range of the array.\n* @param array byte array to search\n* @param target byte to find\n* @param start starting index for search\n* @param end ending index for search\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Bytes:indexOf(byte[],byte[])": "/**** Finds the starting index of target byte array in the given byte array. \n* @param array the byte array to search in \n* @param target the byte array to find \n* @return index of target in array or -1 if not found \n*/",
        "com.google.common.primitives.Bytes:ensureCapacity(byte[],int,int)": "/**\n* Ensures byte array has at least minLength, adding padding if necessary.\n* @param array byte array to check\n* @param minLength minimum required length\n* @param padding additional length to add if resized\n* @return resized byte array if needed\n*/",
        "com.google.common.primitives.Bytes:toArray(java.util.Collection)": "/**\n* Converts a collection of Numbers to a byte array.\n* @param collection input collection of Numbers\n* @return byte array representation of the collection\n*/",
        "com.google.common.primitives.Bytes:indexOf(byte[],byte)": "/**\n* Finds the index of a target byte in the entire array.\n* @param array the byte array to search\n* @param target the byte to find\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Bytes:lastIndexOf(byte[],byte)": "/**\n* Finds the last index of a target byte in the entire array.\n* @param array byte array to search\n* @param target byte to find\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Bytes:reverse(byte[],int,int)": "/**\n* Reverses a portion of the byte array.\n* @param array the byte array to modify\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n*/",
        "com.google.common.primitives.Bytes:reverse(byte[])": "/**\n* Reverses the entire byte array after ensuring it's not null.\n* @param array the byte array to reverse\n*/",
        "com.google.common.primitives.Bytes:rotate(byte[],int,int,int)": "/**\n* Rotates a subarray by a specified distance.\n* @param array the byte array to rotate\n* @param distance the rotation distance (can be negative)\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n*/",
        "com.google.common.primitives.Bytes:rotate(byte[],int)": "/**\n* Rotates the entire byte array by a specified distance.\n* @param array the byte array to rotate\n* @param distance the rotation distance (can be negative)\n*/"
    },
    "com.google.common.primitives.Chars$CharArrayAsList": {
        "com.google.common.primitives.Chars$CharArrayAsList:<init>(char[],int,int)": "/**\n* Constructs a CharArrayAsList with specified array and range.\n* @param array character array, @param start starting index, @param end ending index\n*/",
        "com.google.common.primitives.Chars$CharArrayAsList:size()": "/**\n* Returns the number of elements in the range.\n* @return the size calculated as end minus start\n*/",
        "com.google.common.primitives.Chars$CharArrayAsList:contains(java.lang.Object)": "/**\n* Checks if the array contains the specified character.\n* @param target the character to search for\n* @return true if found, false otherwise\n*/",
        "com.google.common.primitives.Chars$CharArrayAsList:indexOf(java.lang.Object)": "/**\n* Returns the index of the target character in the array.\n* @param target character to find; null returns -1\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Chars$CharArrayAsList:lastIndexOf(java.lang.Object)": "/**\n* Returns the last index of the specified character in the array.\n* @param target character to find; null returns -1\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Chars$CharArrayAsList:toCharArray()": "/**\n* Converts a specified range of an array to a char array.\n* @return a char array from 'start' to 'end' indices\n*/",
        "com.google.common.primitives.Chars$CharArrayAsList:<init>(char[])": "/**\n* Constructs a CharArrayAsList from a character array.\n* @param array the character array to wrap\n*/",
        "com.google.common.primitives.Chars$CharArrayAsList:equals(java.lang.Object)": "/**\n* Checks equality with another CharArrayAsList object.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.primitives.Chars$CharArrayAsList:toString()": "/**\n* Converts the array range to a string representation.\n* @return formatted string of array elements within the range\n*/",
        "com.google.common.primitives.Chars$CharArrayAsList:hashCode()": "/**\n* Computes the hash code for a range of characters in an array.\n* @return integer hash code value\n*/",
        "com.google.common.primitives.Chars$CharArrayAsList:get(int)": "/**\n* Retrieves the character at the specified index.\n* @param index position of the character in the array\n* @return Character at the given index\n*/",
        "com.google.common.primitives.Chars$CharArrayAsList:set(int,java.lang.Character)": "/**\n* Sets the element at the specified index and returns the old value.\n* @param index index to set the element\n* @param element new character to set\n* @return old character at the specified index\n*/",
        "com.google.common.primitives.Chars$CharArrayAsList:subList(int,int)": "/**\n* Returns a sublist of characters from specified indices.\n* @param fromIndex starting index, @param toIndex ending index\n* @return List of characters in the specified range\n*/"
    },
    "com.google.common.primitives.Chars": {
        "com.google.common.primitives.Chars:hashCode(char)": "/**\n* Returns the hash code of a character as its integer value.\n* @param value the character to hash\n* @return the integer representation of the character\n*/",
        "com.google.common.primitives.Chars:compare(char,char)": "/**\n* Compares two characters.\n* @param a first character\n* @param b second character\n* @return integer comparison result\n*/",
        "com.google.common.primitives.Chars:<init>()": "/**\n* Private constructor for Chars class to prevent instantiation.\n*/",
        "com.google.common.primitives.Chars:indexOf(char[],char,int,int)": "/**\n* Finds the index of a target character in a specified array range.\n* @param array character array to search\n* @param target character to find\n* @param start starting index for search\n* @param end ending index for search\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Chars:lastIndexOf(char[],char,int,int)": "/**\n* Returns the last index of target in array between start and end.\n* @param array character array to search\n* @param target character to find\n* @param start starting index for search\n* @param end ending index for search\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Chars:fromBytes(byte,byte)": "/**\n* Converts two bytes into a char.\n* @param b1 high byte, b2 low byte\n* @return char representation of the combined bytes\n*/",
        "com.google.common.primitives.Chars:indexOf(char[],char[])": "/**\n* Finds the starting index of target in array.\n* @param array the char array to search in\n* @param target the char array to find\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Chars:ensureCapacity(char[],int,int)": "/**\n* Ensures the array has at least minLength, adding padding if necessary.\n* @param array the original character array\n* @param minLength minimum required length\n* @param padding additional space to add if resizing\n* @return resized character array or original if sufficient\n*/",
        "com.google.common.primitives.Chars:checkedCast(long)": "/**\n* Casts long to char after validating the range.\n* @param value long value to cast\n* @return char representation of the value\n*/",
        "com.google.common.primitives.Chars:constrainToRange(char,char,char)": "/**\n* Constrains a character value within a specified range.\n* @param value character to constrain\n* @param min minimum allowed character\n* @param max maximum allowed character\n* @return constrained character within [min, max]\n*/",
        "com.google.common.primitives.Chars:toArray(java.util.Collection)": "/**\n* Converts a Collection of Characters to a char array.\n* @param collection input collection of Character objects\n* @return char array representation of the collection\n*/",
        "com.google.common.primitives.Chars:indexOf(char[],char)": "/**\n* Searches for a target character in a character array.\n* @param array character array to search\n* @param target character to find\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Chars:lastIndexOf(char[],char)": "/**\n* Finds the last index of a character in an array.\n* @param array character array to search\n* @param target character to find\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Chars:fromByteArray(byte[])": "/**\n* Converts a byte array to a char.\n* @param bytes input byte array, must be at least 2 bytes long\n* @return char representation from the first two bytes\n*/",
        "com.google.common.primitives.Chars:reverse(char[],int,int)": "/**\n* Reverses a portion of the character array from fromIndex to toIndex.\n* @param array the character array to modify\n* @param fromIndex starting index of the range\n* @param toIndex ending index of the range\n*/",
        "com.google.common.primitives.Chars:sortDescending(char[],int,int)": "/**\n* Sorts a character array in descending order.\n* @param array the character array to sort\n* @param fromIndex starting index of the sorting range\n* @param toIndex ending index of the sorting range\n*/",
        "com.google.common.primitives.Chars:reverse(char[])": "/**\n* Reverses the entire character array after null check.\n* @param array the character array to reverse\n*/",
        "com.google.common.primitives.Chars:rotate(char[],int,int,int)": "/**\n* Rotates a section of the array by a specified distance.\n* @param array the character array to rotate\n* @param distance the number of positions to rotate\n* @param fromIndex starting index of the section\n* @param toIndex ending index of the section\n*/",
        "com.google.common.primitives.Chars:sortDescending(char[])": "/**\n* Sorts the character array in descending order.\n* @param array the character array to sort\n*/",
        "com.google.common.primitives.Chars:rotate(char[],int)": "/**** Rotates the entire character array by a specified distance. \n* @param array the character array to rotate\n* @param distance the number of positions to rotate\n*/"
    },
    "com.google.common.primitives.Doubles$DoubleArrayAsList": {
        "com.google.common.primitives.Doubles$DoubleArrayAsList:<init>(double[],int,int)": "/**\n* Constructs a DoubleArrayAsList from a specified range of a double array.\n* @param array the source double array\n* @param start the starting index (inclusive)\n* @param end the ending index (exclusive)\n*/",
        "com.google.common.primitives.Doubles$DoubleArrayAsList:size()": "/**\n* Returns the size of the range defined by start and end.\n* @return the difference between end and start\n*/",
        "com.google.common.primitives.Doubles$DoubleArrayAsList:spliterator()": "/**\n* Returns a Spliterator for the double array segment.\n* @return Spliterator.OfDouble for the specified range\n*/",
        "com.google.common.primitives.Doubles$DoubleArrayAsList:contains(java.lang.Object)": "/**\n* Checks if the array contains the specified Double target.\n* @param target object to check for presence in the array\n* @return true if found, false otherwise\n*/",
        "com.google.common.primitives.Doubles$DoubleArrayAsList:indexOf(java.lang.Object)": "/**\n* Finds the index of a target Double in the array.\n* @param target the Double to locate\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Doubles$DoubleArrayAsList:lastIndexOf(java.lang.Object)": "/**\n* Finds the last index of a target Double in the array.\n* @param target the object to search for\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Doubles$DoubleArrayAsList:toDoubleArray()": "/**\n* Converts a specified range of the array to a double array.\n* @return a new double array from 'start' to 'end' indices\n*/",
        "com.google.common.primitives.Doubles$DoubleArrayAsList:<init>(double[])": "/**\n* Constructs a DoubleArrayAsList from the entire given double array.\n* @param array the source double array\n*/",
        "com.google.common.primitives.Doubles$DoubleArrayAsList:equals(java.lang.Object)": "/**\n* Compares this object to another for equality.\n* @param object the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.primitives.Doubles$DoubleArrayAsList:toString()": "/**\n* Converts the range of array elements to a string representation.\n* @return formatted string of array elements from start to end\n*/",
        "com.google.common.primitives.Doubles$DoubleArrayAsList:hashCode()": "/**\n* Computes hash code for a range of double values in an array.\n* @return computed hash code based on array elements\n*/",
        "com.google.common.primitives.Doubles$DoubleArrayAsList:get(int)": "/**\n* Retrieves the element at the specified index.\n* @param index the index of the element to retrieve\n* @return the element at the given index\n*/",
        "com.google.common.primitives.Doubles$DoubleArrayAsList:set(int,java.lang.Double)": "/**\n* Sets the element at the specified index and returns the old value.\n* @param index the index to set the element\n* @param element the new value to be set\n* @return the old value at the specified index\n*/",
        "com.google.common.primitives.Doubles$DoubleArrayAsList:subList(int,int)": "/**\n* Returns a sublist of doubles from specified indices.\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n* @return List of doubles from the specified range\n*/"
    },
    "com.google.common.primitives.Doubles$DoubleConverter": {
        "com.google.common.primitives.Doubles$DoubleConverter:doForward(java.lang.String)": "/**\n* Converts a string to a Double.\n* @param value string representation of a number\n* @return Double object corresponding to the string value\n*/",
        "com.google.common.primitives.Doubles$DoubleConverter:doBackward(java.lang.Double)": "/**\n* Converts a Double value to its String representation.\n* @param value the Double to convert\n* @return String representation of the Double\n*/"
    },
    "com.google.common.primitives.Doubles$LexicographicalComparator": {
        "com.google.common.primitives.Doubles$LexicographicalComparator:compare(double[],double[])": "/**\n* Compares two double arrays lexicographically.\n* @param left first array to compare\n* @param right second array to compare\n* @return negative if left < right, positive if left > right, zero if equal\n*/"
    },
    "com.google.common.primitives.Floats$FloatArrayAsList": {
        "com.google.common.primitives.Floats$FloatArrayAsList:<init>(float[],int,int)": "/**\n* Initializes a FloatArrayAsList with specified array and range.\n* @param array float array to wrap\n* @param start starting index (inclusive)\n* @param end ending index (exclusive)\n*/",
        "com.google.common.primitives.Floats$FloatArrayAsList:size()": "/**\n* Returns the number of elements in the range defined by start and end.\n* @return the size as an integer\n*/",
        "com.google.common.primitives.Floats$FloatArrayAsList:contains(java.lang.Object)": "/**\n* Checks if the array contains the specified Float object.\n* @param target the object to check for presence in the array\n* @return true if found, false otherwise\n*/",
        "com.google.common.primitives.Floats$FloatArrayAsList:indexOf(java.lang.Object)": "/**\n* Finds the index of a Float in the array.\n* @param target the Float object to find\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Floats$FloatArrayAsList:lastIndexOf(java.lang.Object)": "/**\n* Returns the last index of the specified target in the array.\n* @param target the object to find; returns -1 if not found\n* @return last index of target or -1 if not present\n*/",
        "com.google.common.primitives.Floats$FloatArrayAsList:toFloatArray()": "/**\n* Converts a specified range of an array to a float array.\n* @return a float array from 'start' to 'end' indices\n*/",
        "com.google.common.primitives.Floats$FloatArrayAsList:<init>(float[])": "/**** Constructs a FloatArrayAsList from a float array. \n* @param array float array to wrap \n*/",
        "com.google.common.primitives.Floats$FloatArrayAsList:equals(java.lang.Object)": "/**\n* Compares this object to another for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.primitives.Floats$FloatArrayAsList:toString()": "/**\n* Converts the array range to a string representation.\n* @return formatted string of array elements within the range\n*/",
        "com.google.common.primitives.Floats$FloatArrayAsList:hashCode()": "/**\n* Computes hash code for a range of floats in an array.\n* @return computed hash code as an int\n*/",
        "com.google.common.primitives.Floats$FloatArrayAsList:get(int)": "/**\n* Retrieves the element at the specified index.\n* @param index the index of the element to retrieve\n* @return the element at the given index\n*/",
        "com.google.common.primitives.Floats$FloatArrayAsList:set(int,java.lang.Float)": "/**\n* Sets the element at the specified index and returns the old value.\n* @param index position to set the new element\n* @param element new value to set\n* @return old value at the specified index\n*/",
        "com.google.common.primitives.Floats$FloatArrayAsList:subList(int,int)": "/**\n* Returns a sublist of Float elements from specified indices.\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n* @return List of Float elements in the specified range\n*/"
    },
    "com.google.common.primitives.Floats": {
        "com.google.common.primitives.Floats:hashCode(float)": "/**\n* Returns the hash code for a float value.\n* @param value the float to compute the hash code for\n* @return the hash code as an int\n*/",
        "com.google.common.primitives.Floats:<init>()": "/**\n* Private constructor for the Floats class to prevent instantiation.\n*/",
        "com.google.common.primitives.Floats:compare(float,float)": "/**\n* Compares two float values for order.\n* @param a first float value\n* @param b second float value\n* @return negative if a < b, zero if a == b, positive if a > b\n*/",
        "com.google.common.primitives.Floats:indexOf(float[],float,int,int)": "/**\n* Finds the index of a target float in a specified array range.\n* @param array the float array to search\n* @param target the float value to find\n* @param start the starting index of the search\n* @param end the ending index of the search\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Floats:lastIndexOf(float[],float,int,int)": "/**\n* Returns the last index of target in the array between start and end.\n* @param array the float array to search\n* @param target the float value to find\n* @param start the starting index for the search\n* @param end the ending index for the search\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Floats:constrainToRange(float,float,float)": "/**\n* Constrains a value within the specified range.\n* @param value the value to constrain\n* @param min the minimum allowable value\n* @param max the maximum allowable value\n* @return constrained value within [min, max]\n* @throws IllegalArgumentException if min > max\n*/",
        "com.google.common.primitives.Floats:tryParse(java.lang.String)": "/**\n* Attempts to parse a string into a Float.\n* @param string input string to parse\n* @return Float value or null if parsing fails\n*/",
        "com.google.common.primitives.Floats:indexOf(float[],float[])": "/**\n* Finds the starting index of target array in the given array.\n* @param array the array to search in\n* @param target the array to find\n* @return index of target in array or -1 if not found\n*/",
        "com.google.common.primitives.Floats:ensureCapacity(float[],int,int)": "/**\n* Ensures array has minimum length with optional padding.\n* @param array input array to check\n* @param minLength minimum required length\n* @param padding additional length if extended\n* @return extended or original array\n*/",
        "com.google.common.primitives.Floats:toArray(java.util.Collection)": "/**\n* Converts a collection of Numbers to a float array.\n* @param collection input collection of Number objects\n* @return float array representation of the collection\n*/",
        "com.google.common.primitives.Floats:indexOf(float[],float)": "/**\n* Finds index of target float in the entire array.\n* @param array the float array to search\n* @param target the float value to find\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Floats:lastIndexOf(float[],float)": "/**\n* Finds last index of target in the array.\n* @param array the float array to search\n* @param target the float value to find\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Floats:reverse(float[],int,int)": "/**\n* Reverses a portion of the array from fromIndex to toIndex.\n* @param array the array to reverse elements in\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n*/",
        "com.google.common.primitives.Floats:sortDescending(float[],int,int)": "/**\n* Sorts array elements in descending order within specified range.\n* @param array the array to sort, @param fromIndex start index, @param toIndex end index\n*/",
        "com.google.common.primitives.Floats:reverse(float[])": "/**\n* Reverses the entire array after validating it's not null.\n* @param array the array to reverse elements in\n*/",
        "com.google.common.primitives.Floats:rotate(float[],int,int,int)": "/**\n* Rotates a portion of the array by a specified distance.\n* @param array the array to rotate\n* @param distance the number of positions to rotate\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n*/",
        "com.google.common.primitives.Floats:sortDescending(float[])": "/**\n* Sorts the given array in descending order.\n* @param array the array to sort, must not be null\n*/",
        "com.google.common.primitives.Floats:rotate(float[],int)": "/**\n* Rotates the entire array by a specified distance.\n* @param array the array to rotate\n* @param distance the number of positions to rotate\n*/"
    },
    "com.google.common.primitives.Floats$FloatConverter": {
        "com.google.common.primitives.Floats$FloatConverter:doForward(java.lang.String)": "/**\n* Converts a string to a Float object.\n* @param value the string to convert\n* @return Float representation of the string\n*/",
        "com.google.common.primitives.Floats$FloatConverter:doBackward(java.lang.Float)": "/**\n* Converts a Float to its String representation.\n* @param value the Float to convert\n* @return String representation of the Float\n*/"
    },
    "com.google.common.primitives.Floats$LexicographicalComparator": {
        "com.google.common.primitives.Floats$LexicographicalComparator:compare(float[],float[])": "/**\n* Compares two float arrays lexicographically.\n* @param left first float array\n* @param right second float array\n* @return negative, zero, or positive if left <, =, or > right\n*/"
    },
    "com.google.common.primitives.ImmutableDoubleArray$AsList": {
        "com.google.common.primitives.ImmutableDoubleArray$AsList:<init>(com.google.common.primitives.ImmutableDoubleArray)": "/**\n* Initializes AsList with the provided ImmutableDoubleArray.\n* @param parent the ImmutableDoubleArray to be wrapped\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$AsList:spliterator()": "/**\n* Returns a Spliterator for the parent object.\n* @return Spliterator of Double elements from the parent\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$AsList:size()": "/**\n* Returns the size of the parent object.\n* @return size as an integer based on parent length\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$AsList:hashCode()": "/**\n* Returns the hash code of the parent object.\n* @return calculated hash code based on parent object\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$AsList:indexOf(java.lang.Object)": "/**\n* Finds the index of a target object in the parent array.\n* @param target the object to search for, must be a Double\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$AsList:lastIndexOf(java.lang.Object)": "/**\n* Returns the last index of a Double target in the parent array.\n* @param target object to search for\n* @return last index or -1 if target is not a Double\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$AsList:toString()": "/**\n* Returns string representation of the parent object.\n* @return formatted string from parent or null if parent is null\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$AsList:contains(java.lang.Object)": "/**\n* Checks if the target object is present in the collection.\n* @param target object to search for, can be null\n* @return true if found, false otherwise\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$AsList:get(int)": "/**\n* Retrieves the element at the specified index from the parent array.\n* @param index the index of the element to retrieve\n* @return the element at the given index\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$AsList:subList(int,int)": "/**\n* Returns a sublist of Doubles from the parent array.\n* @param fromIndex inclusive start index, @param toIndex exclusive end index\n* @return List<Double> representing the specified range\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$AsList:equals(java.lang.Object)": "/**\n* Checks equality with another object, comparing list elements and size.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.primitives.ImmutableDoubleArray": {
        "com.google.common.primitives.ImmutableDoubleArray:length()": "/**\n* Calculates the length by subtracting start from end.\n* @return the difference between end and start\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:asList()": "/**\n* Converts the current object to a List of Doubles.\n* @return List<Double> representation of the object\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:<init>(double[],int,int)": "/**\n* Initializes an ImmutableDoubleArray with a specified range of a double array.\n* @param array the source double array\n* @param start the starting index (inclusive)\n* @param end the ending index (exclusive)\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:areEqual(double,double)": "/**\n* Compares two double values for equality.\n* @param a first double value\n* @param b second double value\n* @return true if equal, false otherwise\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:stream()": "/**\n* Creates a DoubleStream from a specified subarray.\n* @return a DoubleStream of elements from start to end\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:toArray()": "/**\n* Returns a copy of the specified range of the array.\n* @return a double array containing elements from start to end\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:spliterator()": "/**\n* Creates a Spliterator for the specified double array segment.\n* @return Spliterator.OfDouble for the array segment\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if the collection has no elements, false otherwise\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:isPartialView()": "/**\n* Checks if the view is partial based on start and end indices.\n* @return true if partial view, false otherwise\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:forEach(java.util.function.DoubleConsumer)": "/**\n* Applies a DoubleConsumer to each element in the specified range.\n* @param consumer function to apply to each element\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:hashCode()": "/**\n* Computes hash code for a range of double values in an array.\n* @return calculated hash code based on array values\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:builder(int)": "/****\n* Creates a Builder instance with specified initial capacity.\n* @param initialCapacity size of the internal array\n* @return Builder object initialized with the given capacity\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:builder()": "/**\n* Creates a new Builder instance with an initial capacity of 10.\n* @return a Builder object\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:<init>(double[])": "/**\n* Initializes an ImmutableDoubleArray from a double array.\n* @param array the source double array\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:indexOf(double)": "/**\n* Finds the index of a target value in an array.\n* @param target the value to search for\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:lastIndexOf(double)": "/**\n* Finds the last index of target in the array.\n* @param target value to search for\n* @return last index or -1 if not found\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:toString()": "/**\n* Returns a string representation of the collection.\n* @return formatted string of elements or \"[]\" if empty\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:readResolve()": "/**\n* Resolves the object state; returns EMPTY if empty, else returns this instance.\n* @return resolved object based on state\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:of(double)": "/**\n* Creates an ImmutableDoubleArray from a single double value.\n* @param e0 the double value to be included in the array\n* @return an ImmutableDoubleArray containing the specified value\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:of(double,double)": "/**\n* Creates an ImmutableDoubleArray from two double values.\n* @param e0 first double value\n* @param e1 second double value\n* @return ImmutableDoubleArray containing e0 and e1\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:of(double,double,double)": "/**\n* Creates an ImmutableDoubleArray from three double values.\n* @param e0 first double value, e1 second, e2 third\n* @return ImmutableDoubleArray containing the values\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double)": "/**\n* Creates an ImmutableDoubleArray from four double elements.\n* @param e0 first element, e1 second, e2 third, e3 fourth\n* @return new ImmutableDoubleArray instance\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double,double)": "/**\n* Creates an ImmutableDoubleArray from five double elements.\n* @return ImmutableDoubleArray containing the specified elements\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double,double,double)": "/**\n* Creates an ImmutableDoubleArray from six double values.\n* @return ImmutableDoubleArray containing the specified values\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:copyOf(double[])": "/**\n* Creates an ImmutableDoubleArray from a double array.\n* @param values source double array\n* @return ImmutableDoubleArray or EMPTY if input is empty\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:copyOf(java.util.Collection)": "/**\n* Creates an ImmutableDoubleArray from a collection of doubles.\n* @param values collection of Double objects\n* @return ImmutableDoubleArray or EMPTY if collection is empty\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:copyOf(java.util.stream.DoubleStream)": "/**\n* Creates an ImmutableDoubleArray from a DoubleStream.\n* @param stream input stream of double values\n* @return ImmutableDoubleArray or EMPTY if the stream is empty\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:trimmed()": "/**\n* Returns a trimmed ImmutableDoubleArray or itself if not partial.\n* @return ImmutableDoubleArray based on view status\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:contains(double)": "/**\n* Checks if the array contains a target value.\n* @param target the value to search for\n* @return true if found, false otherwise\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:get(int)": "/**\n* Retrieves the element at the specified index from the array.\n* @param index the index of the element to retrieve\n* @return the element at the given index\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:subArray(int,int)": "/**\n* Creates a subarray from the current array.\n* @param startIndex inclusive start index, @param endIndex exclusive end index\n* @return ImmutableDoubleArray for the specified range\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:writeReplace()": "/**\n* Returns a trimmed ImmutableDoubleArray for serialization.\n* @return ImmutableDoubleArray after applying trim\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:equals(java.lang.Object)": "/**\n* Compares this ImmutableDoubleArray with another for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.primitives.ImmutableDoubleArray:copyOf(java.lang.Iterable)": "/**\n* Creates an ImmutableDoubleArray from an iterable of Double values.\n* @param values iterable of Double values\n* @return ImmutableDoubleArray or EMPTY if iterable is empty\n*/"
    },
    "com.google.common.primitives.ImmutableDoubleArray$Builder": {
        "com.google.common.primitives.ImmutableDoubleArray$Builder:<init>(int)": "/**\n* Initializes a Builder with a specified initial capacity.\n* @param initialCapacity size of the internal array\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$Builder:expandedCapacity(int,int)": "/**\n* Calculates new array capacity based on old and minimum required capacity.\n* @param oldCapacity current array size\n* @param minCapacity minimum required size\n* @return new calculated capacity\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$Builder:build()": "/**\n* Builds an ImmutableDoubleArray from the current state.\n* @return ImmutableDoubleArray instance, EMPTY if count is zero\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$Builder:ensureRoomFor(int)": "/**\n* Ensures sufficient array capacity for new elements.\n* @param numberToAdd number of elements to add\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$Builder:add(double)": "/**\n* Adds a double value to the builder's array.\n* @param value the double value to add\n* @return the Builder instance for chaining\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(double[])": "/**\n* Adds multiple double values to the builder.\n* @param values array of double values to add\n* @return the Builder instance for chaining\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.util.Collection)": "/**\n* Adds all values from the collection to the array.\n* @param values collection of Double values to add\n* @return Builder instance for method chaining\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(com.google.common.primitives.ImmutableDoubleArray)": "/**\n* Adds all elements from ImmutableDoubleArray to the builder.\n* @param values source array of double values\n* @return this Builder instance for chaining\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.util.stream.DoubleStream)": "/**\n* Adds all elements from a DoubleStream to the builder.\n* @param stream the DoubleStream to add elements from\n* @return the Builder instance for chaining\n*/",
        "com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.lang.Iterable)": "/**\n* Adds all values from an iterable to the builder.\n* @param values iterable of Double values to add\n* @return Builder instance for method chaining\n*/"
    },
    "com.google.common.primitives.ImmutableIntArray$AsList": {
        "com.google.common.primitives.ImmutableIntArray$AsList:<init>(com.google.common.primitives.ImmutableIntArray)": "/**\n* Initializes AsList with the given ImmutableIntArray.\n* @param parent the ImmutableIntArray to be associated with this AsList\n*/",
        "com.google.common.primitives.ImmutableIntArray$AsList:spliterator()": "/**\n* Returns a Spliterator for the parent collection.\n* @return Spliterator of Integer elements from the parent\n*/",
        "com.google.common.primitives.ImmutableIntArray$AsList:size()": "/**\n* Returns the size of the parent object.\n* @return the length of the parent as an integer\n*/",
        "com.google.common.primitives.ImmutableIntArray$AsList:indexOf(java.lang.Object)": "/**\n* Returns index of target if it's an Integer; otherwise, returns -1.\n* @param target object to search for\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.ImmutableIntArray$AsList:lastIndexOf(java.lang.Object)": "/**\n* Returns the last index of target if it's an Integer; otherwise, returns -1.\n* @param target the value to search for\n* @return last index or -1 if target is not an Integer\n*/",
        "com.google.common.primitives.ImmutableIntArray$AsList:contains(java.lang.Object)": "/**\n* Checks if the target object is present.\n* @param target object to search for\n* @return true if found, false otherwise\n*/",
        "com.google.common.primitives.ImmutableIntArray$AsList:hashCode()": "/**\n* Returns the hash code of the parent object.\n* @return computed hash code based on parent\n*/",
        "com.google.common.primitives.ImmutableIntArray$AsList:toString()": "/**\n* Returns string representation of parent object.\n* @return formatted string from parent's toString() method\n*/",
        "com.google.common.primitives.ImmutableIntArray$AsList:get(int)": "/**\n* Retrieves the element at the specified index from the parent array.\n* @param index the index of the element to retrieve\n* @return the element at the given index\n*/",
        "com.google.common.primitives.ImmutableIntArray$AsList:subList(int,int)": "/**\n* Returns a list of integers from a subarray defined by indices.\n* @param fromIndex inclusive start index\n* @param toIndex exclusive end index\n* @return List of integers from the specified subarray\n*/",
        "com.google.common.primitives.ImmutableIntArray$AsList:equals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param object the object to compare\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.primitives.ImmutableIntArray": {
        "com.google.common.primitives.ImmutableIntArray:length()": "/**\n* Calculates the length between start and end points.\n* @return the difference between end and start\n*/",
        "com.google.common.primitives.ImmutableIntArray:indexOf(int)": "/**\n* Finds the index of target in the array.\n* @param target value to search for\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.ImmutableIntArray:lastIndexOf(int)": "/**\n* Returns the last index of target in the array.\n* @param target the value to search for\n* @return last index relative to start or -1 if not found\n*/",
        "com.google.common.primitives.ImmutableIntArray:asList()": "/**\n* Converts the current object to a list of integers.\n* @return List of integers representing the object\n*/",
        "com.google.common.primitives.ImmutableIntArray:<init>(int[],int,int)": "/**\n* Constructs an ImmutableIntArray from a subarray defined by start and end indices.\n* @param array the source integer array\n* @param start the starting index (inclusive)\n* @param end the ending index (exclusive)\n*/",
        "com.google.common.primitives.ImmutableIntArray:stream()": "/**\n* Creates a stream from a specified range of the array.\n* @return IntStream for the array slice from start to end\n*/",
        "com.google.common.primitives.ImmutableIntArray:toArray()": "/**\n* Copies a range of elements from the array to a new int array.\n* @return a new int array containing elements from start to end\n*/",
        "com.google.common.primitives.ImmutableIntArray:spliterator()": "/**\n* Creates a Spliterator for the specified int array segment.\n* @return Spliterator.OfInt for the array from start to end\n*/",
        "com.google.common.primitives.ImmutableIntArray:isEmpty()": "/**\n* Checks if the data structure is empty.\n* @return true if empty, false otherwise\n*/",
        "com.google.common.primitives.ImmutableIntArray:isPartialView()": "/**\n* Checks if the view is partial based on start and end indices.\n* @return true if the view is partial, false otherwise\n*/",
        "com.google.common.primitives.ImmutableIntArray:forEach(java.util.function.IntConsumer)": "/**\n* Applies a consumer to each element in the array from start to end.\n* @param consumer the function to apply to each element\n*/",
        "com.google.common.primitives.ImmutableIntArray:contains(int)": "/**\n* Checks if the array contains the specified target value.\n* @param target value to search for\n* @return true if found, false otherwise\n*/",
        "com.google.common.primitives.ImmutableIntArray:builder(int)": "/**\n* Creates a Builder with specified initial capacity.\n* @param initialCapacity initial size of the internal array\n* @return Builder instance\n*/",
        "com.google.common.primitives.ImmutableIntArray:builder()": "/**\n* Creates a new Builder instance with an initial capacity of 10.\n* @return a Builder object\n*/",
        "com.google.common.primitives.ImmutableIntArray:<init>(int[])": "/**\n* Constructs an ImmutableIntArray from the entire given integer array.\n* @param array the source integer array\n*/",
        "com.google.common.primitives.ImmutableIntArray:hashCode()": "/**\n* Computes hash code for a range in an array.\n* @return computed hash code based on array elements\n*/",
        "com.google.common.primitives.ImmutableIntArray:toString()": "/**\n* Returns a string representation of the data structure.\n* @return formatted string or \"[]\" if empty\n*/",
        "com.google.common.primitives.ImmutableIntArray:readResolve()": "/**\n* Resolves the object state during deserialization.\n* @return this object or EMPTY if empty\n*/",
        "com.google.common.primitives.ImmutableIntArray:of(int)": "/**\n* Creates an ImmutableIntArray containing a single element.\n* @param e0 the integer element to include in the array\n* @return ImmutableIntArray instance with the given element\n*/",
        "com.google.common.primitives.ImmutableIntArray:of(int,int)": "/**\n* Creates an ImmutableIntArray from two integers.\n* @param e0 first integer element\n* @param e1 second integer element\n* @return ImmutableIntArray containing e0 and e1\n*/",
        "com.google.common.primitives.ImmutableIntArray:of(int,int,int)": "/**\n* Creates an ImmutableIntArray from three integers.\n* @param e0 first integer, e1 second, e2 third\n* @return ImmutableIntArray containing the integers\n*/",
        "com.google.common.primitives.ImmutableIntArray:of(int,int,int,int)": "/**\n* Creates an ImmutableIntArray from four integer elements.\n* @param e0 first integer element\n* @param e1 second integer element\n* @param e2 third integer element\n* @param e3 fourth integer element\n* @return new ImmutableIntArray instance\n*/",
        "com.google.common.primitives.ImmutableIntArray:of(int,int,int,int,int)": "/**\n* Creates an ImmutableIntArray from five specified integers.\n* @param e0 to e4 integers to include in the array\n* @return a new ImmutableIntArray instance\n*/",
        "com.google.common.primitives.ImmutableIntArray:of(int,int,int,int,int,int)": "/**\n* Creates an ImmutableIntArray from six integers.\n* @param e0 to e5 integers to be included in the array\n* @return ImmutableIntArray instance\n*/",
        "com.google.common.primitives.ImmutableIntArray:copyOf(int[])": "/**\n* Creates an ImmutableIntArray from the given integer array.\n* @param values source integer array\n* @return ImmutableIntArray or EMPTY if input is empty\n*/",
        "com.google.common.primitives.ImmutableIntArray:copyOf(java.util.stream.IntStream)": "/**\n* Creates an ImmutableIntArray from an IntStream.\n* @param stream source IntStream\n* @return ImmutableIntArray or EMPTY if stream is empty\n*/",
        "com.google.common.primitives.ImmutableIntArray:trimmed()": "/**\n* Returns a trimmed ImmutableIntArray if partial, otherwise the current instance.\n* @return trimmed ImmutableIntArray or current instance\n*/",
        "com.google.common.primitives.ImmutableIntArray:copyOf(java.util.Collection)": "/**\n* Creates an ImmutableIntArray from a collection of integers.\n* @param values collection of integers to copy\n* @return ImmutableIntArray or EMPTY if input is empty\n*/",
        "com.google.common.primitives.ImmutableIntArray:get(int)": "/**\n* Retrieves the element at the specified index from the array.\n* @param index the index of the element to retrieve\n* @return the element at the given index\n*/",
        "com.google.common.primitives.ImmutableIntArray:subArray(int,int)": "/**\n* Creates a subarray from the current ImmutableIntArray.\n* @param startIndex inclusive starting index\n* @param endIndex exclusive ending index\n* @return new ImmutableIntArray representing the subarray\n*/",
        "com.google.common.primitives.ImmutableIntArray:writeReplace()": "/**\n* Prepares the object for serialization.\n* @return trimmed ImmutableIntArray for serialization\n*/",
        "com.google.common.primitives.ImmutableIntArray:equals(java.lang.Object)": "/**\n* Checks equality of this object with another ImmutableIntArray.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.primitives.ImmutableIntArray:copyOf(java.lang.Iterable)": "/**\n* Creates an ImmutableIntArray from an iterable of integers.\n* @param values integers to copy\n* @return ImmutableIntArray or EMPTY if input is empty\n*/"
    },
    "com.google.common.primitives.ImmutableIntArray$Builder": {
        "com.google.common.primitives.ImmutableIntArray$Builder:<init>(int)": "/**\n* Initializes a Builder with a specified initial capacity.\n* @param initialCapacity initial size of the internal array\n*/",
        "com.google.common.primitives.ImmutableIntArray$Builder:expandedCapacity(int,int)": "/**\n* Calculates new capacity based on old and minimum required capacities.\n* @param oldCapacity current capacity\n* @param minCapacity minimum required capacity\n* @return expanded capacity ensuring it's at least minCapacity\n*/",
        "com.google.common.primitives.ImmutableIntArray$Builder:build()": "/**\n* Builds an ImmutableIntArray from the current state.\n* @return ImmutableIntArray instance or EMPTY if count is zero\n*/",
        "com.google.common.primitives.ImmutableIntArray$Builder:ensureRoomFor(int)": "/**\n* Ensures sufficient array capacity for additional elements.\n* @param numberToAdd elements to add to the current count\n*/",
        "com.google.common.primitives.ImmutableIntArray$Builder:add(int)": "/**\n* Adds a value to the array and returns the builder instance.\n* @param value the integer value to add\n* @return Builder instance for method chaining\n*/",
        "com.google.common.primitives.ImmutableIntArray$Builder:addAll(int[])": "/**\n* Adds multiple integers to the array and returns the Builder.\n* @param values array of integers to add\n* @return Builder instance for method chaining\n*/",
        "com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.util.Collection)": "/**\n* Adds all integers from the collection to the builder.\n* @param values collection of integers to add\n* @return Builder instance for method chaining\n*/",
        "com.google.common.primitives.ImmutableIntArray$Builder:addAll(com.google.common.primitives.ImmutableIntArray)": "/**\n* Adds all elements from an ImmutableIntArray to the builder.\n* @param values array of integers to add\n* @return the Builder instance for method chaining\n*/",
        "com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.util.stream.IntStream)": "/**\n* Adds all elements from an IntStream to the builder.\n* @param stream the IntStream of integers to add\n* @return Builder instance for method chaining\n*/",
        "com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.lang.Iterable)": "/**\n* Adds all integers from the iterable to the builder.\n* @param values integers to add\n* @return Builder instance for method chaining\n*/"
    },
    "com.google.common.primitives.ImmutableLongArray$AsList": {
        "com.google.common.primitives.ImmutableLongArray$AsList:<init>(com.google.common.primitives.ImmutableLongArray)": "/**\n* Initializes AsList with a parent ImmutableLongArray.\n* @param parent the ImmutableLongArray to be associated\n*/",
        "com.google.common.primitives.ImmutableLongArray$AsList:spliterator()": "/**\n* Returns a Spliterator for the parent object.\n* @return Spliterator of Long elements from the parent\n*/",
        "com.google.common.primitives.ImmutableLongArray$AsList:size()": "/**\n* Returns the size of the parent object.\n* @return size as an integer based on parent's length\n*/",
        "com.google.common.primitives.ImmutableLongArray$AsList:indexOf(java.lang.Object)": "/**\n* Returns the index of a Long target in the parent array or -1 if not found.\n* @param target the value to search for\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.ImmutableLongArray$AsList:lastIndexOf(java.lang.Object)": "/**\n* Returns the last index of target Long in parent array.\n* @param target value to search for\n* @return last index or -1 if not found\n*/",
        "com.google.common.primitives.ImmutableLongArray$AsList:contains(java.lang.Object)": "/**\n* Checks if the array contains the specified target.\n* @param target the value to search for\n* @return true if found, false otherwise\n*/",
        "com.google.common.primitives.ImmutableLongArray$AsList:hashCode()": "/**\n* Computes the hash code based on the parent object's hash code.\n* @return computed hash code of the parent\n*/",
        "com.google.common.primitives.ImmutableLongArray$AsList:toString()": "/**\n* Returns string representation of the parent object.\n* @return formatted string of parent or null if not applicable\n*/",
        "com.google.common.primitives.ImmutableLongArray$AsList:get(int)": "/**\n* Retrieves the element at the specified index from the parent array.\n* @param index position of the element to retrieve\n* @return Long element at the given index\n*/",
        "com.google.common.primitives.ImmutableLongArray$AsList:subList(int,int)": "/**\n* Returns a list of Long values from a sub-array.\n* @param fromIndex inclusive start index, @param toIndex exclusive end index\n* @return List of Long values in the specified range\n*/",
        "com.google.common.primitives.ImmutableLongArray$AsList:equals(java.lang.Object)": "/**\n* Compares this AsList with another object for equality.\n* @param object the object to compare\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.primitives.ImmutableLongArray": {
        "com.google.common.primitives.ImmutableLongArray:length()": "/**\n* Calculates the length by subtracting start from end.\n* @return the calculated length as an integer\n*/",
        "com.google.common.primitives.ImmutableLongArray:indexOf(long)": "/**\n* Returns the index of target in the array or -1 if not found.\n* @param target the value to search for\n* @return index of target relative to start or -1 if not found\n*/",
        "com.google.common.primitives.ImmutableLongArray:lastIndexOf(long)": "/**\n* Returns the last index of the target in the array.\n* @param target the value to search for\n* @return last index relative to start, or -1 if not found\n*/",
        "com.google.common.primitives.ImmutableLongArray:asList()": "/**\n* Converts the current object to a list of Long values.\n* @return List of Long representing the object state\n*/",
        "com.google.common.primitives.ImmutableLongArray:<init>(long[],int,int)": "/**\n* Constructs an ImmutableLongArray from a specified range of a long array.\n* @param array the source long array\n* @param start the starting index (inclusive)\n* @param end the ending index (exclusive)\n*/",
        "com.google.common.primitives.ImmutableLongArray:stream()": "/**\n* Creates a LongStream from a specified subarray.\n* @return LongStream of elements from 'array' between 'start' and 'end'\n*/",
        "com.google.common.primitives.ImmutableLongArray:toArray()": "/**\n* Converts a specified range of the array to a new long array.\n* @return a new long array from start to end indices\n*/",
        "com.google.common.primitives.ImmutableLongArray:spliterator()": "/**\n* Creates a Spliterator for the specified long array segment.\n* @return a Spliterator.OfLong for the array elements from start to end\n*/",
        "com.google.common.primitives.ImmutableLongArray:isEmpty()": "/**\n* Checks if the data structure is empty.\n* @return true if empty, false otherwise\n*/",
        "com.google.common.primitives.ImmutableLongArray:isPartialView()": "/**\n* Checks if the view is partial based on start and end indices.\n* @return true if view is partial, false otherwise\n*/",
        "com.google.common.primitives.ImmutableLongArray:forEach(java.util.function.LongConsumer)": "/**\n* Applies a LongConsumer to each element in the specified range.\n* @param consumer function to apply to each element\n*/",
        "com.google.common.primitives.ImmutableLongArray:contains(long)": "/**\n* Checks if the array contains the specified target value.\n* @param target the value to search for\n* @return true if found, false otherwise\n*/",
        "com.google.common.primitives.ImmutableLongArray:builder(int)": "/**\n* Creates a Builder with specified initial capacity.\n* @param initialCapacity initial size of the internal array\n* @return Builder instance\n*/",
        "com.google.common.primitives.ImmutableLongArray:builder()": "/**\n* Creates a new Builder instance with an initial capacity of 10.\n* @return a Builder object\n*/",
        "com.google.common.primitives.ImmutableLongArray:<init>(long[])": "/**\n* Constructs an ImmutableLongArray from a full long array.\n* @param array the source long array\n*/",
        "com.google.common.primitives.ImmutableLongArray:hashCode()": "/**\n* Computes the hash code for a range of long values in an array.\n* @return computed hash code\n*/",
        "com.google.common.primitives.ImmutableLongArray:toString()": "/**\n* Returns a string representation of the array.\n* @return formatted string with array elements or \"[]\" if empty\n*/",
        "com.google.common.primitives.ImmutableLongArray:readResolve()": "/**\n* Resolves the object state for serialization.\n* @return this or EMPTY if the object is empty\n*/",
        "com.google.common.primitives.ImmutableLongArray:of(long)": "/**\n* Creates an ImmutableLongArray from a single long element.\n* @param e0 the long element to include in the array\n* @return an ImmutableLongArray containing e0\n*/",
        "com.google.common.primitives.ImmutableLongArray:of(long,long)": "/**\n* Creates an ImmutableLongArray from two long values.\n* @param e0 first long value\n* @param e1 second long value\n* @return ImmutableLongArray containing e0 and e1\n*/",
        "com.google.common.primitives.ImmutableLongArray:of(long,long,long)": "/****\n* Creates an ImmutableLongArray from three long elements.\n* @param e0 first long element\n* @param e1 second long element\n* @param e2 third long element\n* @return ImmutableLongArray containing the elements\n*/",
        "com.google.common.primitives.ImmutableLongArray:of(long,long,long,long)": "/**\n* Creates an ImmutableLongArray from four long elements.\n* @param e0 first long element\n* @param e1 second long element\n* @param e2 third long element\n* @param e3 fourth long element\n* @return ImmutableLongArray containing the provided elements\n*/",
        "com.google.common.primitives.ImmutableLongArray:of(long,long,long,long,long)": "/**\n* Creates an ImmutableLongArray from five long elements.\n* @param e0 to e4 long values to include in the array\n* @return ImmutableLongArray containing the specified elements\n*/",
        "com.google.common.primitives.ImmutableLongArray:of(long,long,long,long,long,long)": "/**\n* Creates an ImmutableLongArray from six long elements.\n* @param e0 to e5 long values to include in the array\n* @return ImmutableLongArray instance\n*/",
        "com.google.common.primitives.ImmutableLongArray:copyOf(long[])": "/**\n* Creates an ImmutableLongArray from a given long array.\n* @param values source long array\n* @return ImmutableLongArray or EMPTY if input is empty\n*/",
        "com.google.common.primitives.ImmutableLongArray:copyOf(java.util.stream.LongStream)": "/**\n* Creates an ImmutableLongArray from a LongStream.\n* @param stream source LongStream\n* @return ImmutableLongArray or EMPTY if stream is empty\n*/",
        "com.google.common.primitives.ImmutableLongArray:trimmed()": "/**\n* Returns a trimmed ImmutableLongArray if partial, else returns the current instance.\n* @return ImmutableLongArray object\n*/",
        "com.google.common.primitives.ImmutableLongArray:copyOf(java.util.Collection)": "/**\n* Creates an ImmutableLongArray from a collection of Longs.\n* @param values collection of Long objects\n* @return ImmutableLongArray or EMPTY if input is empty\n*/",
        "com.google.common.primitives.ImmutableLongArray:get(int)": "/**\n* Retrieves the element at the specified index from the array.\n* @param index position of the element to retrieve\n* @return the element at the given index\n*/",
        "com.google.common.primitives.ImmutableLongArray:subArray(int,int)": "/**\n* Creates a sub-array from the current ImmutableLongArray.\n* @param startIndex inclusive start index, @param endIndex exclusive end index\n* @return new ImmutableLongArray for the specified range\n*/",
        "com.google.common.primitives.ImmutableLongArray:writeReplace()": "/**\n* Replaces the object with a trimmed version.\n* @return ImmutableLongArray after trimming\n*/",
        "com.google.common.primitives.ImmutableLongArray:equals(java.lang.Object)": "/**\n* Compares this ImmutableLongArray with another object for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.primitives.ImmutableLongArray:copyOf(java.lang.Iterable)": "/**\n* Creates an ImmutableLongArray from an Iterable of Longs.\n* @param values iterable of Long values\n* @return ImmutableLongArray representation of the input\n*/"
    },
    "com.google.common.primitives.ImmutableLongArray$Builder": {
        "com.google.common.primitives.ImmutableLongArray$Builder:<init>(int)": "/**\n* Initializes a Builder with a specified initial capacity.\n* @param initialCapacity the initial size of the internal array\n*/",
        "com.google.common.primitives.ImmutableLongArray$Builder:expandedCapacity(int,int)": "/**\n* Calculates new capacity based on old and minimum required capacity.\n* @param oldCapacity current capacity\n* @param minCapacity minimum required capacity\n* @return new expanded capacity\n*/",
        "com.google.common.primitives.ImmutableLongArray$Builder:build()": "/**\n* Builds an ImmutableLongArray from the current state.\n* @return ImmutableLongArray instance or EMPTY if count is zero\n*/",
        "com.google.common.primitives.ImmutableLongArray$Builder:ensureRoomFor(int)": "/**\n* Ensures array has enough room for new elements.\n* @param numberToAdd number of elements to add\n*/",
        "com.google.common.primitives.ImmutableLongArray$Builder:add(long)": "/**\n* Adds a value to the array and returns the builder instance.\n* @param value the value to add to the array\n* @return the current Builder instance\n*/",
        "com.google.common.primitives.ImmutableLongArray$Builder:addAll(long[])": "/**** Adds all values to the internal array. \n* @param values array of long values to add \n* @return Builder instance for method chaining \n*/",
        "com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.util.Collection)": "/**\n* Adds all values from the collection to the builder.\n* @param values collection of Long values to add\n* @return the Builder instance for method chaining\n*/",
        "com.google.common.primitives.ImmutableLongArray$Builder:addAll(com.google.common.primitives.ImmutableLongArray)": "/**\n* Adds all elements from ImmutableLongArray to the builder.\n* @param values array of long values to add\n* @return the builder instance for method chaining\n*/",
        "com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.util.stream.LongStream)": "/**\n* Adds all elements from a LongStream to the builder.\n* @param stream the LongStream to add elements from\n* @return the current Builder instance\n*/",
        "com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.lang.Iterable)": "/**\n* Adds all Long values from the iterable to the builder.\n* @param values iterable of Long values to add\n* @return the Builder instance for method chaining\n*/"
    },
    "com.google.common.primitives.Ints$IntArrayAsList": {
        "com.google.common.primitives.Ints$IntArrayAsList:<init>(int[],int,int)": "/**\n* Constructs a sublist of an integer array.\n* @param array the source integer array\n* @param start the starting index of the sublist\n* @param end the ending index of the sublist\n*/",
        "com.google.common.primitives.Ints$IntArrayAsList:size()": "/**\n* Returns the size calculated as the difference between end and start.\n* @return size as an integer\n*/",
        "com.google.common.primitives.Ints$IntArrayAsList:spliterator()": "/**\n* Returns a Spliterator for the specified int array segment.\n* @return Spliterator.OfInt for the array from start to end\n*/",
        "com.google.common.primitives.Ints$IntArrayAsList:contains(java.lang.Object)": "/**\n* Checks if the array contains the specified Integer target.\n* @param target the object to check for presence in the array\n* @return true if found, false otherwise\n*/",
        "com.google.common.primitives.Ints$IntArrayAsList:indexOf(java.lang.Object)": "/**\n* Finds the index of the target Integer in the array.\n* @param target the Integer to find\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Ints$IntArrayAsList:lastIndexOf(java.lang.Object)": "/**\n* Finds the last index of the specified target in the array.\n* @param target object to find; returns -1 if not found\n* @return last index of target or -1 if not present\n*/",
        "com.google.common.primitives.Ints$IntArrayAsList:toIntArray()": "/**\n* Converts a subrange of the array to an integer array.\n* @return a new integer array from 'start' to 'end'\n*/",
        "com.google.common.primitives.Ints$IntArrayAsList:hashCode()": "/**\n* Computes the hash code for a range of integers in an array.\n* @return computed hash code as an integer\n*/",
        "com.google.common.primitives.Ints$IntArrayAsList:<init>(int[])": "/**** Constructs an IntArrayAsList from an integer array. \n* @param array the source integer array \n*/",
        "com.google.common.primitives.Ints$IntArrayAsList:equals(java.lang.Object)": "/**\n* Compares this IntArrayAsList to another object for equality.\n* @param object object to compare with; returns true if equal\n*/",
        "com.google.common.primitives.Ints$IntArrayAsList:toString()": "/**\n* Converts array segment to a string representation.\n* @return formatted string of array elements from start to end\n*/",
        "com.google.common.primitives.Ints$IntArrayAsList:get(int)": "/**\n* Retrieves element at specified index from the array.\n* @param index the position of the element to retrieve\n* @return the element at the given index\n*/",
        "com.google.common.primitives.Ints$IntArrayAsList:set(int,java.lang.Integer)": "/**\n* Sets element at specified index and returns the old value.\n* @param index position to set the element\n* @param element new value to store\n* @return previous value at the index\n*/",
        "com.google.common.primitives.Ints$IntArrayAsList:subList(int,int)": "/**\n* Returns a sublist of integers from specified indices.\n* @param fromIndex starting index of the sublist\n* @param toIndex ending index of the sublist\n* @return List of integers from fromIndex to toIndex\n*/"
    },
    "com.google.common.primitives.Ints$IntConverter": {
        "com.google.common.primitives.Ints$IntConverter:doForward(java.lang.String)": "/**\n* Converts a string to an Integer.\n* @param value the string representation of an integer\n* @return the Integer value or throws NumberFormatException if invalid\n*/",
        "com.google.common.primitives.Ints$IntConverter:doBackward(java.lang.Integer)": "/**\n* Converts an Integer to its String representation.\n* @param value the Integer to convert\n* @return String representation of the Integer\n*/"
    },
    "com.google.common.primitives.Longs$AsciiDigits": {
        "com.google.common.primitives.Longs$AsciiDigits:<init>()": "/**\n* Private constructor for AsciiDigits class to prevent instantiation.\n*/",
        "com.google.common.primitives.Longs$AsciiDigits:digit(char)": "/**\n* Returns the digit value of a character or -1 if not a valid ASCII digit.\n* @param c character to convert\n* @return digit value (0-9) or -1 for invalid characters\n*/"
    },
    "com.google.common.primitives.Longs$LongArrayAsList": {
        "com.google.common.primitives.Longs$LongArrayAsList:<init>(long[],int,int)": "/**\n* Initializes a LongArrayAsList with specified array and range.\n* @param array the source long array\n* @param start the starting index (inclusive)\n* @param end the ending index (exclusive)\n*/",
        "com.google.common.primitives.Longs$LongArrayAsList:size()": "/**\n* Returns the size of the range defined by start and end.\n* @return the difference between end and start\n*/",
        "com.google.common.primitives.Longs$LongArrayAsList:spliterator()": "/**\n* Returns a Spliterator for the specified long array segment.\n* @return Spliterator.OfLong for array elements from start to end\n*/",
        "com.google.common.primitives.Longs$LongArrayAsList:contains(java.lang.Object)": "/**\n* Checks if the target Long is present in the array.\n* @param target object to check for presence\n* @return true if found, false otherwise\n*/",
        "com.google.common.primitives.Longs$LongArrayAsList:indexOf(java.lang.Object)": "/**\n* Finds the index of a target Long in the array.\n* @param target the Long object to find\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Longs$LongArrayAsList:lastIndexOf(java.lang.Object)": "/**\n* Returns the last index of the specified Long in the array.\n* @param target the Long object to find\n* @return the last index, or -1 if not found\n*/",
        "com.google.common.primitives.Longs$LongArrayAsList:toLongArray()": "/**\n* Converts a subrange of an array to a long array.\n* @return a new long array from the specified range\n*/",
        "com.google.common.primitives.Longs$LongArrayAsList:hashCode()": "/**\n* Computes the hash code for a range of long values in an array.\n* @return computed hash code based on the array elements\n*/",
        "com.google.common.primitives.Longs$LongArrayAsList:<init>(long[])": "/**\n* Initializes LongArrayAsList with the entire provided array.\n* @param array the source long array\n*/",
        "com.google.common.primitives.Longs$LongArrayAsList:equals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.primitives.Longs$LongArrayAsList:toString()": "/**\n* Converts the range of the array to a string representation.\n* @return formatted string of array elements within the range\n*/",
        "com.google.common.primitives.Longs$LongArrayAsList:get(int)": "/**\n* Retrieves the element at the specified index.\n* @param index the index of the element to retrieve\n* @return the element at the given index\n*/",
        "com.google.common.primitives.Longs$LongArrayAsList:set(int,java.lang.Long)": "/**\n* Replaces element at specified index and returns the old value.\n* @param index position to set the new element\n* @param element new value to be set\n* @return old value at the specified index\n*/",
        "com.google.common.primitives.Longs$LongArrayAsList:subList(int,int)": "/**\n* Returns a sublist of Long values from specified range.\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n* @return List of Longs within the specified range\n*/"
    },
    "com.google.common.primitives.Longs$LongConverter": {
        "com.google.common.primitives.Longs$LongConverter:doForward(java.lang.String)": "/**\n* Converts a string to a Long value.\n* @param value string representation of a number\n* @return Long object parsed from the string\n*/",
        "com.google.common.primitives.Longs$LongConverter:doBackward(java.lang.Long)": "/**\n* Converts a Long value to its String representation.\n* @param value Long to be converted\n* @return String representation of the Long value\n*/"
    },
    "com.google.common.primitives.ParseRequest": {
        "com.google.common.primitives.ParseRequest:<init>(java.lang.String,int)": "/**\n* Initializes a ParseRequest with raw value and radix.\n* @param rawValue the string to be parsed\n* @param radix the base for parsing the raw value\n*/",
        "com.google.common.primitives.ParseRequest:fromString(java.lang.String)": "/**\n* Parses a string to create a ParseRequest with appropriate radix.\n* @param stringValue the string to parse\n* @return ParseRequest object initialized with parsed value and radix\n*/"
    },
    "com.google.common.primitives.Primitives": {
        "com.google.common.primitives.Primitives:<init>()": "/**\n* Private constructor to prevent instantiation of the Primitives class.\n*/",
        "com.google.common.primitives.Primitives:add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class)": "/**\n* Adds a key-value pair to forward and backward maps.\n* @param forward map for forward relationships\n* @param backward map for backward relationships\n* @param key class to be added as a key\n* @param value class to be added as a value\n*/",
        "com.google.common.primitives.Primitives:allPrimitiveTypes()": "/**\n* Returns a set of all primitive types.\n* @return Set of Class<?> representing primitive types\n*/",
        "com.google.common.primitives.Primitives:allWrapperTypes()": "/**\n* Retrieves a set of all wrapper class types.\n* @return Set of Class<?> representing wrapper types\n*/",
        "com.google.common.primitives.Primitives:isWrapperType(java.lang.Class)": "/**\n* Checks if the given class type is a wrapper type.\n* @param type the class to check\n* @return true if it's a wrapper type, false otherwise\n*/",
        "com.google.common.primitives.Primitives:wrap(java.lang.Class)": "/**\n* Wraps a primitive class type into its corresponding wrapper class type.\n* @param type the primitive class to wrap\n* @return Class<T> corresponding wrapper class or original type if not found\n*/",
        "com.google.common.primitives.Primitives:unwrap(java.lang.Class)": "/**\n* Unwraps wrapper class to primitive class.\n* @param type the class to unwrap\n* @return unwrapped primitive class or original class if not a wrapper\n*/"
    },
    "com.google.common.primitives.Shorts": {
        "com.google.common.primitives.Shorts:compare(short,short)": "/**\n* Compares two short values.\n* @param a first short value\n* @param b second short value\n* @return comparison result: negative, zero, or positive\n*/",
        "com.google.common.primitives.Shorts:hashCode(short)": "/**\n* Returns the hash code of a short value as an int.\n* @param value the short value to compute the hash code for\n* @return the int representation of the short value\n*/",
        "com.google.common.primitives.Shorts:<init>()": "/**\n* Private constructor to prevent instantiation of the Shorts class.\n*/",
        "com.google.common.primitives.Shorts:indexOf(short[],short,int,int)": "/**\n* Finds the index of a target short in a specified range of the array.\n* @param array the short array to search\n* @param target the short value to find\n* @param start the starting index of the search\n* @param end the ending index of the search\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Shorts:lastIndexOf(short[],short,int,int)": "/**\n* Finds the last index of target in the specified short array.\n* @param array the array to search\n* @param target the short value to find\n* @param start the starting index for search\n* @param end the ending index for search\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Shorts:fromBytes(byte,byte)": "/**\n* Converts two bytes into a short value.\n* @param b1 first byte (high-order)\n* @param b2 second byte (low-order)\n* @return combined short value\n*/",
        "com.google.common.primitives.Shorts:indexOf(short[],short[])": "/**\n* Finds the starting index of target in array.\n* @param array the source array\n* @param target the subarray to find\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Shorts:constrainToRange(short,short,short)": "/**\n* Constrains a value within a specified range.\n* @param value the value to constrain\n* @param min the minimum allowable value\n* @param max the maximum allowable value\n* @return constrained value within the range [min, max]\n*/",
        "com.google.common.primitives.Shorts:ensureCapacity(short[],int,int)": "/**\n* Ensures array has at least minLength; pads if necessary.\n* @param array the original short array\n* @param minLength minimum required length\n* @param padding additional space to add if expanded\n* @return resized array if needed, or original array\n*/",
        "com.google.common.primitives.Shorts:checkedCast(long)": "/**\n* Casts long to short after validating the range.\n* @param value long value to cast\n* @return short representation of the value\n*/",
        "com.google.common.primitives.Shorts:toArray(java.util.Collection)": "/**\n* Converts a collection of Numbers to a short array.\n* @param collection input collection of Numbers\n* @return short array representation of the collection\n*/",
        "com.google.common.primitives.Shorts:indexOf(short[],short)": "/**\n* Finds the index of a target short in the array.\n* @param array the short array to search\n* @param target the short value to find\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Shorts:lastIndexOf(short[],short)": "/**** \n* Finds the last index of target in the specified short array.\n* @param array the array to search\n* @param target the short value to find\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Shorts:fromByteArray(byte[])": "/**\n* Converts a byte array to a short value.\n* @param bytes input byte array (must be at least 2 bytes)\n* @return combined short value from the first two bytes\n*/",
        "com.google.common.primitives.Shorts:reverse(short[],int,int)": "/**\n* Reverses elements in the array between specified indexes.\n* @param array the array to reverse\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n*/",
        "com.google.common.primitives.Shorts:sortDescending(short[],int,int)": "/**\n* Sorts the array in descending order.\n* @param array the array to sort\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n*/",
        "com.google.common.primitives.Shorts:reverse(short[])": "/**\n* Reverses the entire array after checking for null.\n* @param array the array to reverse\n*/",
        "com.google.common.primitives.Shorts:rotate(short[],int,int,int)": "/**\n* Rotates a subarray by a specified distance.\n* @param array the array to rotate\n* @param distance the rotation distance (can be negative)\n* @param fromIndex start index (inclusive)\n* @param toIndex end index (exclusive)\n*/",
        "com.google.common.primitives.Shorts:sortDescending(short[])": "/**\n* Sorts the given array in descending order.\n* @param array the array to sort; must not be null\n*/",
        "com.google.common.primitives.Shorts:rotate(short[],int)": "/**\n* Rotates the entire array by a specified distance.\n* @param array the array to rotate\n* @param distance the rotation distance (can be negative)\n*/"
    },
    "com.google.common.primitives.Shorts$ShortArrayAsList": {
        "com.google.common.primitives.Shorts$ShortArrayAsList:<init>(short[],int,int)": "/**\n* Initializes a view of a short array from start to end indices.\n* @param array the short array to view\n* @param start the starting index (inclusive)\n* @param end the ending index (exclusive)\n*/",
        "com.google.common.primitives.Shorts$ShortArrayAsList:size()": "/**\n* Returns the size calculated as the difference between end and start.\n* @return size as an integer\n*/",
        "com.google.common.primitives.Shorts$ShortArrayAsList:contains(java.lang.Object)": "/**\n* Checks if the array contains the specified Short object.\n* @param target the Short object to search for\n* @return true if found, false otherwise\n*/",
        "com.google.common.primitives.Shorts$ShortArrayAsList:indexOf(java.lang.Object)": "/**\n* Returns the index of the target Short in the array.\n* @param target the Short object to find\n* @return index of target or -1 if not found\n*/",
        "com.google.common.primitives.Shorts$ShortArrayAsList:lastIndexOf(java.lang.Object)": "/**\n* Returns the last index of the specified target in the array.\n* @param target the object to find; may be null\n* @return last index of target or -1 if not found\n*/",
        "com.google.common.primitives.Shorts$ShortArrayAsList:toShortArray()": "/**\n* Converts a specified range of an array to a short array.\n* @return a short array from 'start' to 'end' indices\n*/",
        "com.google.common.primitives.Shorts$ShortArrayAsList:<init>(short[])": "/**\n* Constructs a view of the entire short array.\n* @param array the short array to view\n*/",
        "com.google.common.primitives.Shorts$ShortArrayAsList:equals(java.lang.Object)": "/**\n* Compares this ShortArrayAsList to another object for equality.\n* @param object the object to compare to\n* @return true if equal, false otherwise\n*/",
        "com.google.common.primitives.Shorts$ShortArrayAsList:toString()": "/**\n* Converts the array to a string representation.\n* @return formatted string of array elements within bounds\n*/",
        "com.google.common.primitives.Shorts$ShortArrayAsList:hashCode()": "/**\n* Computes hash code for a range of shorts in an array.\n* @return computed hash code as an int\n*/",
        "com.google.common.primitives.Shorts$ShortArrayAsList:get(int)": "/**\n* Retrieves the element at the specified index from the array.\n* @param index the index of the element to retrieve\n* @return the element at the given index\n*/",
        "com.google.common.primitives.Shorts$ShortArrayAsList:set(int,java.lang.Short)": "/**\n* Sets element at specified index and returns the old value.\n* @param index position to set the element\n* @param element new value to set\n* @return previous value at the index\n*/",
        "com.google.common.primitives.Shorts$ShortArrayAsList:subList(int,int)": "/**\n* Returns a sublist of Short elements from specified indices.\n* @param fromIndex starting index (inclusive), @param toIndex ending index (exclusive)\n* @return List of Short elements from the array\n*/"
    },
    "com.google.common.primitives.Shorts$ShortConverter": {
        "com.google.common.primitives.Shorts$ShortConverter:doForward(java.lang.String)": "/**\n* Converts a string to a Short value.\n* @param value string representation of a Short\n* @return Short object or null if the string is invalid\n*/",
        "com.google.common.primitives.Shorts$ShortConverter:doBackward(java.lang.Short)": "/**\n* Converts a Short value to its String representation.\n* @param value Short to convert\n* @return String representation of the Short value\n*/"
    },
    "com.google.common.primitives.SignedBytes": {
        "com.google.common.primitives.SignedBytes:compare(byte,byte)": "/**\n* Compares two byte values.\n* @param a first byte to compare\n* @param b second byte to compare\n* @return negative if a < b, zero if a == b, positive if a > b\n*/",
        "com.google.common.primitives.SignedBytes:<init>()": "/**\n* Private constructor for SignedBytes class to prevent instantiation.\n*/",
        "com.google.common.primitives.SignedBytes:checkedCast(long)": "/**\n* Casts long to byte after validating the range.\n* @param value the long value to cast\n* @return the byte representation of the value\n*/",
        "com.google.common.primitives.SignedBytes:sortDescending(byte[],int,int)": "/**\n* Sorts a byte array in descending order within specified indices.\n* @param array the byte array to sort\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n*/",
        "com.google.common.primitives.SignedBytes:sortDescending(byte[])": "/**\n* Sorts the byte array in descending order.\n* @param array the byte array to sort; must not be null\n*/"
    },
    "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator": {
        "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator:getUnsafe()": "/**\n* Retrieves the Unsafe instance, using reflection if necessary.\n* @return Unsafe instance or throws RuntimeException if unavailable\n*/",
        "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator:compare(byte[],byte[])": "/**\n* Compares two byte arrays lexicographically.\n* @param left first byte array\n* @param right second byte array\n* @return negative if left < right, positive if left > right, zero if equal\n*/"
    },
    "com.google.common.primitives.UnsignedInteger": {
        "com.google.common.primitives.UnsignedInteger:<init>(int)": "/**\n* Constructs an UnsignedInteger from a signed integer value.\n* @param value signed integer to convert to UnsignedInteger\n*/",
        "com.google.common.primitives.UnsignedInteger:longValue()": "/**\n* Converts the current value to a long.\n* @return long representation of the value\n*/",
        "com.google.common.primitives.UnsignedInteger:fromIntBits(int)": "/**\n* Creates an UnsignedInteger from a signed integer bit representation.\n* @param bits signed integer to convert\n* @return UnsignedInteger instance\n*/",
        "com.google.common.primitives.UnsignedInteger:toString(int)": "/**\n* Converts the integer value to its string representation in the specified radix.\n* @param radix the base for conversion (2-36)\n* @return string representation of the integer in the given radix\n*/",
        "com.google.common.primitives.UnsignedInteger:floatValue()": "/**\n* Converts the current value to a float.\n* @return float representation of the value\n*/",
        "com.google.common.primitives.UnsignedInteger:doubleValue()": "/**\n* Converts the current value to a double.\n* @return double representation of the value\n*/",
        "com.google.common.primitives.UnsignedInteger:bigIntegerValue()": "/**\n* Converts the current value to a BigInteger.\n* @return BigInteger representation of the value\n*/",
        "com.google.common.primitives.UnsignedInteger:valueOf(long)": "/**\n* Converts a long to UnsignedInteger after validating its range.\n* @param value long to convert; must fit in unsigned integer range\n* @return UnsignedInteger representation of the value\n*/",
        "com.google.common.primitives.UnsignedInteger:valueOf(java.math.BigInteger)": "/**\n* Converts BigInteger to UnsignedInteger.\n* @param value non-negative BigInteger within Integer range\n* @return UnsignedInteger representation\n*/",
        "com.google.common.primitives.UnsignedInteger:valueOf(java.lang.String,int)": "/**\n* Converts a string to an UnsignedInteger in the specified radix.\n* @param string the string to convert\n* @param radix the base for conversion\n* @return UnsignedInteger instance\n*/",
        "com.google.common.primitives.UnsignedInteger:plus(com.google.common.primitives.UnsignedInteger)": "/**\n* Adds two UnsignedInteger values.\n* @param val the UnsignedInteger to add\n* @return the sum as an UnsignedInteger\n*/",
        "com.google.common.primitives.UnsignedInteger:minus(com.google.common.primitives.UnsignedInteger)": "/**\n* Subtracts another UnsignedInteger from this instance.\n* @param val the UnsignedInteger to subtract\n* @return the result as an UnsignedInteger\n*/",
        "com.google.common.primitives.UnsignedInteger:times(com.google.common.primitives.UnsignedInteger)": "/**\n* Multiplies this UnsignedInteger by another.\n* @param val the UnsignedInteger to multiply with\n* @return the product as an UnsignedInteger\n*/",
        "com.google.common.primitives.UnsignedInteger:dividedBy(com.google.common.primitives.UnsignedInteger)": "/**\n* Divides the current UnsignedInteger by another.\n* @param val divisor UnsignedInteger, must not be null\n* @return result as UnsignedInteger\n*/",
        "com.google.common.primitives.UnsignedInteger:mod(com.google.common.primitives.UnsignedInteger)": "/**\n* Computes the modulus of this UnsignedInteger with another.\n* @param val divisor UnsignedInteger\n* @return UnsignedInteger result of the modulus operation\n*/",
        "com.google.common.primitives.UnsignedInteger:toString()": "/**\n* Returns the string representation of the object in decimal format.\n* @return string representation in base 10\n*/",
        "com.google.common.primitives.UnsignedInteger:compareTo(com.google.common.primitives.UnsignedInteger)": "/**\n* Compares this UnsignedInteger with another.\n* @param other the UnsignedInteger to compare with\n* @return negative if this < other, zero if equal, positive if this > other\n*/",
        "com.google.common.primitives.UnsignedInteger:valueOf(java.lang.String)": "/**\n* Converts a string to an UnsignedInteger in base 10.\n* @param string the string to convert\n* @return UnsignedInteger instance\n*/"
    },
    "com.google.common.primitives.UnsignedLong": {
        "com.google.common.primitives.UnsignedLong:<init>(long)": "/**\n* Constructs an UnsignedLong with the specified long value.\n* @param value the long value to be assigned\n*/",
        "com.google.common.primitives.UnsignedLong:bigIntegerValue()": "/**\n* Converts the stored value to a BigInteger, handling negative values.\n* @return BigInteger representation of the value\n*/",
        "com.google.common.primitives.UnsignedLong:hashCode()": "/**\n* Computes the hash code for the current object's long value.\n* @return hash code of the long value\n*/",
        "com.google.common.primitives.UnsignedLong:fromLongBits(long)": "/**\n* Creates an UnsignedLong from a long bit representation.\n* @param bits long value representing bits\n* @return UnsignedLong instance with specified bits\n*/",
        "com.google.common.primitives.UnsignedLong:valueOf(long)": "/**\n* Converts a long to an UnsignedLong if non-negative.\n* @param value long value to convert\n* @return UnsignedLong representation of the value\n*/",
        "com.google.common.primitives.UnsignedLong:valueOf(java.math.BigInteger)": "/**\n* Converts BigInteger to UnsignedLong after validation.\n* @param value the BigInteger to convert\n* @return UnsignedLong representation of the value\n*/",
        "com.google.common.primitives.UnsignedLong:plus(com.google.common.primitives.UnsignedLong)": "/**\n* Adds two UnsignedLong values.\n* @param val the UnsignedLong to add; must not be null\n* @return the sum as an UnsignedLong\n*/",
        "com.google.common.primitives.UnsignedLong:minus(com.google.common.primitives.UnsignedLong)": "/**\n* Subtracts an UnsignedLong from this instance.\n* @param val the UnsignedLong to subtract\n* @return resulting UnsignedLong after subtraction\n*/",
        "com.google.common.primitives.UnsignedLong:times(com.google.common.primitives.UnsignedLong)": "/**\n* Multiplies this UnsignedLong by another.\n* @param val the UnsignedLong to multiply with\n* @return the product as an UnsignedLong\n*/",
        "com.google.common.primitives.UnsignedLong:compareTo(com.google.common.primitives.UnsignedLong)": "/**\n* Compares this UnsignedLong with another for order.\n* @param o the UnsignedLong to compare with\n* @return negative if less, zero if equal, positive if greater\n*/",
        "com.google.common.primitives.UnsignedLong:valueOf(java.lang.String,int)": "/**\n* Converts a string to an UnsignedLong using the specified radix.\n* @param string the string to convert\n* @param radix the base of the number system\n* @return UnsignedLong representation of the string\n*/",
        "com.google.common.primitives.UnsignedLong:dividedBy(com.google.common.primitives.UnsignedLong)": "/**\n* Divides this UnsignedLong by another.\n* @param val divisor UnsignedLong; must not be null\n* @return result as UnsignedLong\n*/",
        "com.google.common.primitives.UnsignedLong:mod(com.google.common.primitives.UnsignedLong)": "/**\n* Computes the modulus of this UnsignedLong with another.\n* @param val the divisor UnsignedLong\n* @return UnsignedLong result of modulus operation\n*/",
        "com.google.common.primitives.UnsignedLong:valueOf(java.lang.String)": "/**\n* Converts a string to an UnsignedLong using base 10.\n* @param string the string to convert\n* @return UnsignedLong representation of the string\n*/",
        "com.google.common.primitives.UnsignedLong:toString(int)": "/**\n* Converts the value to a string in the specified radix.\n* @param radix base for the conversion (2-36)\n* @return string representation of the value\n*/",
        "com.google.common.primitives.UnsignedLong:toString()": "/**\n* Returns the string representation of the unsigned long value.\n* @return string representation of the value in decimal\n*/"
    },
    "com.google.common.primitives.UnsignedLongs$ParseOverflowDetection": {
        "com.google.common.primitives.UnsignedLongs$ParseOverflowDetection:<init>()": "/**\n* Constructor for ParseOverflowDetection, initializes the instance.\n*/",
        "com.google.common.primitives.UnsignedLongs$ParseOverflowDetection:overflowInParse(long,int,int)": "/**\n* Checks for overflow in parsing a number based on current value, digit, and radix.\n* @param current current parsed value\n* @param digit next digit to parse\n* @param radix base of the number system\n* @return true if overflow occurs, false otherwise\n*/"
    },
    "com.google.common.primitives.UnsignedLongs": {
        "com.google.common.primitives.UnsignedLongs:<init>()": "/**\n* Private constructor for UnsignedLongs class to prevent instantiation.\n*/",
        "com.google.common.primitives.UnsignedLongs:flip(long)": "/**\n* Flips the sign bit of the given long value.\n* @param a the long value to be flipped\n* @return the flipped long value\n*/",
        "com.google.common.primitives.UnsignedLongs:compare(long,long)": "/**\n* Compares two long values after flipping their sign bits.\n* @param a first long value\n* @param b second long value\n* @return comparison result of flipped values\n*/",
        "com.google.common.primitives.UnsignedLongs:parseUnsignedLong(java.lang.String,int)": "/**\n* Parses a string to an unsigned long.\n* @param string the string to parse\n* @param radix the base of the number system\n* @return parsed unsigned long value\n*/",
        "com.google.common.primitives.UnsignedLongs:divide(long,long)": "/**\n* Divides two long values, handling negative divisors and optimizing for positive dividends.\n* @param dividend the number to be divided\n* @param divisor the number by which to divide\n* @return the quotient of the division\n*/",
        "com.google.common.primitives.UnsignedLongs:remainder(long,long)": "/**\n* Computes the remainder of a division operation.\n* @param dividend the value to be divided\n* @param divisor the value by which to divide\n* @return the remainder after division\n*/",
        "com.google.common.primitives.UnsignedLongs:parseUnsignedLong(java.lang.String)": "/**\n* Parses a string to an unsigned long using base 10.\n* @param string the string to parse\n* @return parsed unsigned long value\n*/",
        "com.google.common.primitives.UnsignedLongs:decode(java.lang.String)": "/**\n* Decodes a string to a long value.\n* @param stringValue the string to decode\n* @return decoded long value\n*/",
        "com.google.common.primitives.UnsignedLongs:sort(long[],int,int)": "/**\n* Sorts a subarray after flipping its elements' sign bits.\n* @param array the array to sort, @param fromIndex start index, @param toIndex end index\n*/",
        "com.google.common.primitives.UnsignedLongs:sortDescending(long[],int,int)": "/**\n* Sorts array in descending order within specified index range.\n* @param array the array to sort, @param fromIndex starting index, @param toIndex ending index\n*/",
        "com.google.common.primitives.UnsignedLongs:toString(long,int)": "/**\n* Converts a long value to a string in the specified radix.\n* @param x the long value to convert\n* @param radix the base for the conversion (2-36)\n* @return string representation of the value in the given radix\n*/",
        "com.google.common.primitives.UnsignedLongs:sort(long[])": "/**\n* Sorts the provided array after checking for null.\n* @param array the array to sort\n*/",
        "com.google.common.primitives.UnsignedLongs:sortDescending(long[])": "/**\n* Sorts the provided array in descending order.\n* @param array the array to sort; must not be null\n*/",
        "com.google.common.primitives.UnsignedLongs:toString(long)": "/**\n* Converts a long value to its string representation in decimal.\n* @param x the long value to convert\n* @return string representation of the value in decimal\n*/"
    },
    "com.google.common.reflect.AbstractInvocationHandler": {
        "com.google.common.reflect.AbstractInvocationHandler:<init>()": "/**\n* Constructs a new instance of AbstractInvocationHandler.\n*/",
        "com.google.common.reflect.AbstractInvocationHandler:hashCode()": "/**\n* Returns the hash code of the object using the superclass implementation.\n* @return hash code as an integer\n*/",
        "com.google.common.reflect.AbstractInvocationHandler:isProxyOfSameInterfaces(java.lang.Object,java.lang.Class)": "/**\n* Checks if an object is a proxy of the same interfaces as the given proxy class.\n* @param arg object to check\n* @param proxyClass class to compare against\n* @return true if arg is a proxy of proxyClass interfaces, false otherwise\n*/",
        "com.google.common.reflect.AbstractInvocationHandler:equals(java.lang.Object)": "/**\n* Compares this object to another for equality.\n* @param obj the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.reflect.AbstractInvocationHandler:toString()": "/**\n* Returns the string representation of the object.\n* @return String representation from the superclass\n*/",
        "com.google.common.reflect.AbstractInvocationHandler:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": "/**\n* Invokes methods on a proxy object, handling specific cases like hashCode, equals, and toString.\n* @param proxy the proxy instance\n* @param method the method to invoke\n* @param args method arguments, can be null\n* @return result of the method invocation or null\n*/"
    },
    "com.google.common.reflect.ClassPath": {
        "com.google.common.reflect.ClassPath:getClassName(java.lang.String)": "/**\n* Extracts class name from a given filename.\n* @param filename the full name of the class file\n* @return class name with '.' instead of '/' \n*/",
        "com.google.common.reflect.ClassPath:<init>(com.google.common.collect.ImmutableSet)": "/**\n* Initializes ClassPath with a set of resource information.\n* @param resources immutable set of ResourceInfo objects\n*/",
        "com.google.common.reflect.ClassPath:getClassPathEntry(java.io.File,java.lang.String)": "/**\n* Constructs a URL for a specified path in a JAR file.\n* @param jarFile the JAR file to reference\n* @param path the path within the JAR\n* @return URL pointing to the path in the JAR\n*/",
        "com.google.common.reflect.ClassPath:toFile(java.net.URL)": "/**\n* Converts a URL to a File object, ensuring the protocol is 'file'.\n* @param url the URL to convert\n* @return File object corresponding to the URL\n*/",
        "com.google.common.reflect.ClassPath:parseJavaClassPath()": "/**\n* Parses the Java class path into a list of URLs.\n* @return ImmutableList of URLs from the class path entries\n*/",
        "com.google.common.reflect.ClassPath:getClassLoaderUrls(java.lang.ClassLoader)": "/**\n* Retrieves URLs from the given ClassLoader.\n* @param classloader the ClassLoader to extract URLs from\n* @return ImmutableList of URLs or empty list if none found\n*/",
        "com.google.common.reflect.ClassPath:getClassPathFromManifest(java.io.File,java.util.jar.Manifest)": "/**\n* Retrieves class path files from a JAR manifest.\n* @param jarFile the JAR file to read from\n* @param manifest the manifest containing class path info\n* @return ImmutableSet of class path Files or empty if manifest is null\n*/",
        "com.google.common.reflect.ClassPath:getClassPathEntries(java.lang.ClassLoader)": "/**\n* Retrieves classpath entries from a ClassLoader.\n* @param classloader the ClassLoader to extract entries from\n* @return ImmutableMap of File-ClassLoader pairs\n*/",
        "com.google.common.reflect.ClassPath:locationsFrom(java.lang.ClassLoader)": "/**\n* Constructs an immutable set of LocationInfo from classpath entries.\n* @param classloader the ClassLoader to extract entries from\n* @return ImmutableSet of LocationInfo objects\n*/",
        "com.google.common.reflect.ClassPath:getAllClasses()": "/**\n* Retrieves all ClassInfo instances from resources as an ImmutableSet.\n* @return ImmutableSet of ClassInfo objects\n*/",
        "com.google.common.reflect.ClassPath:getTopLevelClasses()": "/**\n* Retrieves top-level class information from resources.\n* @return ImmutableSet of top-level ClassInfo objects\n*/",
        "com.google.common.reflect.ClassPath:getTopLevelClasses(java.lang.String)": "/**\n* Retrieves top-level ClassInfo objects for a specified package.\n* @param packageName the name of the package to filter classes\n* @return ImmutableSet of ClassInfo objects in the package\n*/",
        "com.google.common.reflect.ClassPath:getTopLevelClassesRecursive(java.lang.String)": "/**\n* Retrieves top-level ClassInfo objects for a given package.\n* @param packageName the package name to filter classes\n* @return ImmutableSet of ClassInfo matching the package\n*/",
        "com.google.common.reflect.ClassPath:from(java.lang.ClassLoader)": "/**\n* Constructs ClassPath from ClassLoader scanning for resources.\n* @param classloader the ClassLoader to extract locations from\n* @return ClassPath object containing scanned resources\n*/"
    },
    "com.google.common.reflect.Reflection": {
        "com.google.common.reflect.Reflection:getPackageName(java.lang.String)": "/**\n* Extracts package name from a fully qualified class name.\n* @param classFullName the full class name\n* @return package name or empty string if no package\n*/",
        "com.google.common.reflect.Reflection:<init>()": "/**\n* Private constructor to prevent instantiation of the Reflection class.\n*/",
        "com.google.common.reflect.Reflection:newProxy(java.lang.Class,java.lang.reflect.InvocationHandler)": "/**\n* Creates a new proxy instance for the specified interface type.\n* @param interfaceType the interface to proxy\n* @param handler the invocation handler for method calls\n* @return a proxy instance of the specified interface type\n*/",
        "com.google.common.reflect.Reflection:getPackageName(java.lang.Class)": "/**\n* Retrieves the package name from a given class.\n* @param clazz the class to extract the package name from\n* @return package name as a string\n*/"
    },
    "com.google.common.reflect.ClassPath$ClassInfo": {
        "com.google.common.reflect.ClassPath$ClassInfo:isTopLevel()": "/**\n* Checks if the class is a top-level class.\n* @return true if no '$' in className, false otherwise\n*/",
        "com.google.common.reflect.ClassPath$ClassInfo:load()": "/**\n* Loads a class by name from the class loader.\n* @return Class<?> object of the loaded class\n* @throws IllegalStateException if the class is not found\n*/",
        "com.google.common.reflect.ClassPath$ClassInfo:getName()": "/**\n* Retrieves the name of the class.\n* @return the name of the class as a String\n*/",
        "com.google.common.reflect.ClassPath$ClassInfo:getPackageName()": "/**\n* Retrieves the package name from a class name.\n* @return package name or empty string if no package\n*/",
        "com.google.common.reflect.ClassPath$ClassInfo:<init>(java.io.File,java.lang.String,java.lang.ClassLoader)": "/**\n* Initializes ClassInfo with resource details and extracts class name.\n* @param file resource file, @param resourceName name of the resource, @param loader class loader\n*/",
        "com.google.common.reflect.ClassPath$ClassInfo:getSimpleName()": "/**\n* Retrieves the simple name of a class, excluding package and inner class details.\n* @return simple class name as a string\n*/"
    },
    "com.google.common.reflect.ClassPath$LocationInfo": {
        "com.google.common.reflect.ClassPath$LocationInfo:equals(java.lang.Object)": "/**\n* Compares this LocationInfo object with another for equality.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.reflect.ClassPath$LocationInfo:hashCode()": "/**\n* Returns the hash code of the home object.\n* @return hash code as an integer\n*/",
        "com.google.common.reflect.ClassPath$LocationInfo:toString()": "/**\n* Returns the string representation of the home object.\n* @return String representation of home\n*/",
        "com.google.common.reflect.ClassPath$LocationInfo:file()": "/**\n* Returns the home file reference.\n* @return File object representing the home directory\n*/",
        "com.google.common.reflect.ClassPath$LocationInfo:<init>(java.io.File,java.lang.ClassLoader)": "/**\n* Constructs LocationInfo with specified home directory and class loader.\n* @param home file representing home directory\n* @param classloader class loader for loading classes\n*/",
        "com.google.common.reflect.ClassPath$LocationInfo:scanJarFile(java.util.jar.JarFile,com.google.common.collect.ImmutableSet$Builder)": "/**\n* Scans a JAR file and adds ResourceInfo for each entry to the builder.\n* @param file JAR file to scan\n* @param builder collects ResourceInfo instances\n*/",
        "com.google.common.reflect.ClassPath$LocationInfo:scanDirectory(java.io.File,java.lang.String,java.util.Set,com.google.common.collect.ImmutableSet$Builder)": "/**\n* Scans a directory for files and subdirectories, adding ResourceInfo to the builder.\n* @param directory the directory to scan\n* @param packagePrefix the prefix for resource names\n* @param currentPath the set of currently scanned directories\n* @param builder the builder for ResourceInfo instances\n*/",
        "com.google.common.reflect.ClassPath$LocationInfo:scanDirectory(java.io.File,com.google.common.collect.ImmutableSet$Builder)": "/**\n* Scans a directory and adds ResourceInfo to the builder.\n* @param directory the directory to scan\n* @param builder the builder for ResourceInfo instances\n*/",
        "com.google.common.reflect.ClassPath$LocationInfo:scanJar(java.io.File,java.util.Set,com.google.common.collect.ImmutableSet$Builder)": "/**\n* Scans a JAR file for resources and adds them to the builder.\n* @param file the JAR file to scan\n* @param scannedUris set of already scanned URIs\n* @param builder collects ResourceInfo instances\n*/",
        "com.google.common.reflect.ClassPath$LocationInfo:scan(java.io.File,java.util.Set,com.google.common.collect.ImmutableSet$Builder)": "/**\n* Scans a file; processes as directory or JAR, adding resources to the builder.\n* @param file the file to scan\n* @param scannedUris set of already scanned URIs\n* @param builder collects ResourceInfo instances\n*/",
        "com.google.common.reflect.ClassPath$LocationInfo:scanResources(java.util.Set)": "/**\n* Scans resources from specified files and returns an immutable set of ResourceInfo.\n* @param scannedFiles set of files to scan\n* @return ImmutableSet of ResourceInfo instances found\n*/",
        "com.google.common.reflect.ClassPath$LocationInfo:scanResources()": "/**\n* Scans resources without specified files.\n* @return ImmutableSet of ResourceInfo instances found\n*/"
    },
    "com.google.common.reflect.ClassPath$ResourceInfo": {
        "com.google.common.reflect.ClassPath$ResourceInfo:url()": "/**\n* Retrieves the URL of a resource by its name.\n* @return URL of the resource\n* @throws NoSuchElementException if the resource is not found\n*/",
        "com.google.common.reflect.ClassPath$ResourceInfo:hashCode()": "/**\n* Returns the hash code of the resource name.\n* @return hash code as an integer\n*/",
        "com.google.common.reflect.ClassPath$ResourceInfo:equals(java.lang.Object)": "/**\n* Compares this ResourceInfo with another object for equality.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.reflect.ClassPath$ResourceInfo:getFile()": "/**\n* Retrieves the associated File object.\n* @return the File instance held by this method\n*/",
        "com.google.common.reflect.ClassPath$ResourceInfo:getResourceName()": "/**\n* Retrieves the name of the resource.\n* @return the resource name as a String\n*/",
        "com.google.common.reflect.ClassPath$ResourceInfo:<init>(java.io.File,java.lang.String,java.lang.ClassLoader)": "/**\n* Constructs ResourceInfo with file, resource name, and class loader.\n* @param file the resource file\n* @param resourceName the name of the resource\n* @param loader the class loader for the resource\n*/",
        "com.google.common.reflect.ClassPath$ResourceInfo:asByteSource()": "/**** Converts resource URL to ByteSource. \n* @return ByteSource representing the resource's content \n*/",
        "com.google.common.reflect.ClassPath$ResourceInfo:asCharSource(java.nio.charset.Charset)": "/**\n* Converts a URL to CharSource using the specified character set.\n* @param charset the character set for conversion\n* @return CharSource instance configured with the charset\n*/",
        "com.google.common.reflect.ClassPath$ResourceInfo:of(java.io.File,java.lang.String,java.lang.ClassLoader)": "/**\n* Creates ResourceInfo or ClassInfo based on resource name extension.\n* @param file resource file\n* @param resourceName name of the resource\n* @param loader class loader for the resource\n* @return ResourceInfo or ClassInfo instance\n*/"
    },
    "com.google.common.reflect.ImmutableTypeToInstanceMap": {
        "com.google.common.reflect.ImmutableTypeToInstanceMap:builder()": "/**\n* Creates a new Builder instance for type B.\n* @return a new Builder<B> object\n*/",
        "com.google.common.reflect.ImmutableTypeToInstanceMap:trustedGet(com.google.common.reflect.TypeToken)": "/**\n* Retrieves a value of type T from the delegate.\n* @param type TypeToken for the desired type T\n* @return value of type T or null if not found\n*/",
        "com.google.common.reflect.ImmutableTypeToInstanceMap:putInstance(com.google.common.reflect.TypeToken,java.lang.Object)": "/**\n* Always throws UnsupportedOperationException for putInstance call.\n* @param type type of the instance to put\n* @param value instance value to put\n* @return always null\n*/",
        "com.google.common.reflect.ImmutableTypeToInstanceMap:putInstance(java.lang.Class,java.lang.Object)": "/**\n* Throws UnsupportedOperationException when called.\n* @param type class type of the instance\n* @param value instance to put, not used\n* @return always null\n*/",
        "com.google.common.reflect.ImmutableTypeToInstanceMap:put(com.google.common.reflect.TypeToken,java.lang.Object)": "/**\n* Always throws UnsupportedOperationException; method is deprecated and should not be called.\n* @param key the type token for the value\n* @param value the value to associate with the key\n* @return always throws exception, no return value\n*/",
        "com.google.common.reflect.ImmutableTypeToInstanceMap:putAll(java.util.Map)": "/**\n* Deprecated method that always throws UnsupportedOperationException.\n* @param map the map of entries to be added (ignored)\n*/",
        "com.google.common.reflect.ImmutableTypeToInstanceMap:delegate()": "/**\n* Returns the delegate map of type tokens to their corresponding values.\n* @return Map of TypeToken to B objects\n*/",
        "com.google.common.reflect.ImmutableTypeToInstanceMap:getInstance(com.google.common.reflect.TypeToken)": "/**\n* Retrieves an instance of type T, rejecting type variables for safety.\n* @param type TypeToken for the desired type T\n* @return instance of type T or null if not found\n*/",
        "com.google.common.reflect.ImmutableTypeToInstanceMap:<init>(com.google.common.collect.ImmutableMap)": "/**\n* Constructs an ImmutableTypeToInstanceMap with a given delegate.\n* @param delegate immutable map of type tokens to instances\n*/",
        "com.google.common.reflect.ImmutableTypeToInstanceMap:getInstance(java.lang.Class)": "/**\n* Retrieves an instance of type T from the delegate.\n* @param type the class type to retrieve\n* @return instance of type T or null if not found\n*/",
        "com.google.common.reflect.ImmutableTypeToInstanceMap:of()": "/**\n* Creates an empty ImmutableTypeToInstanceMap.\n* @return an empty ImmutableTypeToInstanceMap instance\n*/"
    },
    "com.google.common.reflect.Invokable$ConstructorInvokable": {
        "com.google.common.reflect.Invokable$ConstructorInvokable:invokeInternal(java.lang.Object,java.lang.Object[])": "/**\n* Invokes the constructor with provided arguments.\n* @param receiver unused; can be null\n* @param args constructor arguments\n* @return newly created object instance\n*/",
        "com.google.common.reflect.Invokable$ConstructorInvokable:getGenericReturnType()": "/**\n* Returns the generic return type of the declaring class.\n* @return Type representing the generic return type\n*/",
        "com.google.common.reflect.Invokable$ConstructorInvokable:mayNeedHiddenThis()": "/**\n* Determines if a hidden 'this' reference is needed for the constructor.\n* @return true if enclosed in a non-static context, false otherwise\n*/",
        "com.google.common.reflect.Invokable$ConstructorInvokable:getAnnotatedParameterTypes()": "/**\n* Retrieves annotated parameter types of the constructor.\n* @return array of AnnotatedType representing parameter annotations\n*/",
        "com.google.common.reflect.Invokable$ConstructorInvokable:getAnnotatedReturnType()": "/**\n* Retrieves the annotated return type of the constructor.\n* @return AnnotatedType of the constructor's return type\n*/",
        "com.google.common.reflect.Invokable$ConstructorInvokable:getGenericExceptionTypes()": "/**\n* Retrieves the generic exception types of the constructor.\n* @return array of Type representing generic exceptions\n*/",
        "com.google.common.reflect.Invokable$ConstructorInvokable:getParameterAnnotations()": "/**\n* Retrieves annotations for parameters of the constructor.\n* @return 2D array of Annotation objects for each parameter\n*/",
        "com.google.common.reflect.Invokable$ConstructorInvokable:getTypeParameters()": "/**\n* Returns combined type parameters from class and constructor.\n* @return array of TypeVariable<?> including both class and constructor parameters\n*/",
        "com.google.common.reflect.Invokable$ConstructorInvokable:isVarArgs()": "/**\n* Checks if the constructor accepts variable arguments.\n* @return true if the constructor is varargs, false otherwise\n*/",
        "com.google.common.reflect.Invokable$ConstructorInvokable:isOverridable()": "/**\n* Indicates if the method can be overridden.\n* @return false, as this method is not overridable\n*/",
        "com.google.common.reflect.Invokable$ConstructorInvokable:getGenericParameterTypes()": "/**\n* Retrieves generic parameter types, excluding 'this' if needed.\n* @return array of Type objects representing parameter types\n*/",
        "com.google.common.reflect.Invokable$ConstructorInvokable:<init>(java.lang.reflect.Constructor)": "/**\n* Initializes ConstructorInvokable with a specified constructor.\n* @param constructor the Constructor to invoke\n*/"
    },
    "com.google.common.reflect.Invokable$MethodInvokable": {
        "com.google.common.reflect.Invokable$MethodInvokable:invokeInternal(java.lang.Object,java.lang.Object[])": "/**\n* Invokes a method on a given receiver with specified arguments.\n* @param receiver the object to invoke the method on\n* @param args the arguments to pass to the method\n* @return result of the method invocation or null\n*/",
        "com.google.common.reflect.Invokable$MethodInvokable:getGenericReturnType()": "/**\n* Retrieves the generic return type of the method.\n* @return Type representing the method's generic return type\n*/",
        "com.google.common.reflect.Invokable$MethodInvokable:getGenericParameterTypes()": "/**\n* Retrieves the generic parameter types of the method.\n* @return an array of Type representing the generic parameter types\n*/",
        "com.google.common.reflect.Invokable$MethodInvokable:getAnnotatedParameterTypes()": "/**\n* Retrieves annotated parameter types of the method.\n* @return array of AnnotatedType representing parameter annotations\n*/",
        "com.google.common.reflect.Invokable$MethodInvokable:getAnnotatedReturnType()": "/**\n* Retrieves the annotated return type of the method.\n* @return AnnotatedType representing the method's return type\n*/",
        "com.google.common.reflect.Invokable$MethodInvokable:getGenericExceptionTypes()": "/**\n* Retrieves the generic exception types of the method.\n* @return an array of Type representing the generic exception types\n*/",
        "com.google.common.reflect.Invokable$MethodInvokable:getParameterAnnotations()": "/**\n* Retrieves annotations for method parameters.\n* @return array of parameter annotations\n*/",
        "com.google.common.reflect.Invokable$MethodInvokable:getTypeParameters()": "/**\n* Retrieves the type parameters of the method.\n* @return array of TypeVariable objects for the method's type parameters\n*/",
        "com.google.common.reflect.Invokable$MethodInvokable:isOverridable()": "/**\n* Checks if the method can be overridden.\n* @return true if overridable, false if final, private, static, or in a final class\n*/",
        "com.google.common.reflect.Invokable$MethodInvokable:isVarArgs()": "/**\n* Checks if the method accepts variable arguments.\n* @return true if method has varargs, false otherwise\n*/",
        "com.google.common.reflect.Invokable$MethodInvokable:<init>(java.lang.reflect.Method)": "/**\n* Constructs MethodInvokable with a specified Method instance.\n* @param method the Method to invoke\n*/"
    },
    "com.google.common.reflect.Invokable": {
        "com.google.common.reflect.Invokable:isAnnotationPresent(java.lang.Class)": "/**\n* Checks if the specified annotation is present.\n* @param annotationClass the annotation class to check for\n* @return true if the annotation is present, false otherwise\n*/",
        "com.google.common.reflect.Invokable:getAnnotation(java.lang.Class)": "/**\n* Retrieves the specified annotation from the accessible object.\n* @param annotationClass class of the annotation to retrieve\n* @return the annotation instance or null if not present\n*/",
        "com.google.common.reflect.Invokable:getAnnotations()": "/**\n* Retrieves annotations from the accessible object.\n* @return an array of Annotation objects\n*/",
        "com.google.common.reflect.Invokable:getDeclaredAnnotations()": "/**\n* Retrieves all declared annotations of the accessible object.\n* @return array of Annotation objects\n*/",
        "com.google.common.reflect.Invokable:setAccessible(boolean)": "/**\n* Sets the accessibility of the accessible object.\n* @param flag true to allow access, false to deny\n*/",
        "com.google.common.reflect.Invokable:trySetAccessible()": "/**\n* Attempts to set the accessible flag of an object.\n* @return true if successful, false if an exception occurs\n*/",
        "com.google.common.reflect.Invokable:isAccessible()": "/**\n* Checks if the accessible object is accessible.\n* @return true if accessible, false otherwise\n*/",
        "com.google.common.reflect.Invokable:getName()": "/**\n* Retrieves the name of the member.\n* @return the name as a String\n*/",
        "com.google.common.reflect.Invokable:getModifiers()": "/**\n* Retrieves the modifiers of the member.\n* @return integer representing member's modifiers\n*/",
        "com.google.common.reflect.Invokable:isSynthetic()": "/**\n* Checks if the member is synthetic.\n* @return true if the member is synthetic, false otherwise\n*/",
        "com.google.common.reflect.Invokable:hashCode()": "/**\n* Returns the hash code of the member object.\n* @return hash code as an integer\n*/",
        "com.google.common.reflect.Invokable:toString()": "/**\n* Returns string representation of the member object.\n* @return String representation of the member\n*/",
        "com.google.common.reflect.Invokable:getDeclaringClass()": "/**\n* Returns the declaring class of the member.\n* @return Class object representing the declaring class of T\n*/",
        "com.google.common.reflect.Invokable:initAnnotatedTypeExists()": "/**\n* Checks if the AnnotatedType class exists.\n* @return true if exists, false otherwise\n*/",
        "com.google.common.reflect.Invokable:<init>(java.lang.reflect.AccessibleObject)": "/**\n* Initializes Invokable with a non-null member.\n* @param member an AccessibleObject and Member instance\n*/",
        "com.google.common.reflect.Invokable:isPublic()": "/**\n* Checks if the member is public.\n* @return true if public, false otherwise\n*/",
        "com.google.common.reflect.Invokable:isProtected()": "/**\n* Checks if the member is protected.\n* @return true if protected, false otherwise\n*/",
        "com.google.common.reflect.Invokable:isPrivate()": "/**\n* Checks if the member is private.\n* @return true if private, false otherwise\n*/",
        "com.google.common.reflect.Invokable:isStatic()": "/**\n* Checks if the member is static.\n* @return true if static, false otherwise\n*/",
        "com.google.common.reflect.Invokable:isFinal()": "/**\n* Checks if the member is final.\n* @return true if final, false otherwise\n*/",
        "com.google.common.reflect.Invokable:isAbstract()": "/**\n* Checks if the member is abstract.\n* @return true if member is abstract, false otherwise\n*/",
        "com.google.common.reflect.Invokable:isNative()": "/**\n* Checks if the member is native.\n* @return true if native, false otherwise\n*/",
        "com.google.common.reflect.Invokable:isSynchronized()": "/**\n* Checks if the member is synchronized.\n* @return true if synchronized, false otherwise\n*/",
        "com.google.common.reflect.Invokable:isVolatile()": "/**\n* Checks if the member is volatile.\n* @return true if volatile, false otherwise\n*/",
        "com.google.common.reflect.Invokable:isTransient()": "/**\n* Checks if the member is transient.\n* @return true if transient, false otherwise\n*/",
        "com.google.common.reflect.Invokable:isPackagePrivate()": "/**\n* Checks if the member is package-private.\n* @return true if package-private, false otherwise\n*/",
        "com.google.common.reflect.Invokable:getOwnerType()": "/**** Returns a TypeToken representing the owner type of the generic type T. */",
        "com.google.common.reflect.Invokable:getReturnType()": "/**\n* Retrieves the return type as a TypeToken.\n* @return TypeToken representing the method's return type\n*/",
        "com.google.common.reflect.Invokable:from(java.lang.reflect.Constructor)": "/**\n* Creates an Invokable from a specified constructor.\n* @param constructor the Constructor to invoke\n* @return ConstructorInvokable instance\n*/",
        "com.google.common.reflect.Invokable:from(java.lang.reflect.Method)": "/**\n* Creates an Invokable instance from a Method.\n* @param method the Method to invoke\n* @return Invokable object for the given Method\n*/",
        "com.google.common.reflect.Invokable:equals(java.lang.Object)": "/**\n* Compares this Invokable with another object for equality.\n* @param obj object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.reflect.Invokable:getParameters()": "/**\n* Retrieves method parameters as an ImmutableList.\n* @return ImmutableList of Parameter objects\n*/",
        "com.google.common.reflect.Invokable:getExceptionTypes()": "/**\n* Retrieves a list of exception types as TypeTokens.\n* @return ImmutableList of TypeToken representing exception types\n*/",
        "com.google.common.reflect.Invokable:returning(com.google.common.reflect.TypeToken)": "/****\n* Returns an Invokable with a specified return type.\n* @param returnType expected return type as TypeToken\n* @return Invokable instance specialized for R1\n*/",
        "com.google.common.reflect.Invokable:returning(java.lang.Class)": "/**\n* Creates an Invokable for the specified return type.\n* @param returnType expected return type as Class<R1>\n* @return Invokable instance specialized for R1\n*/"
    },
    "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1": {
        "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1:delegate()": "/**\n* Returns the delegate entry.\n* @return the delegate Entry object\n*/"
    },
    "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry": {
        "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:transformEntries(java.util.Set)": "/**\n* Transforms entries in a set to an unmodifiable format.\n* @param entries the set of entries to transform\n* @return a set of unmodifiable entries\n*/",
        "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:setValue(java.lang.Object)": "/**\n* Sets the value, but operation is not supported.\n* @param value the value to set, can be null\n* @throws UnsupportedOperationException if called\n*/",
        "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:delegate()": "/**\n* Returns the delegate entry.\n* @return the delegate Entry object\n*/",
        "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:<init>(java.util.Map$Entry)": "/**\n* Constructs an UnmodifiableEntry with a non-null delegate.\n* @param delegate the entry to be wrapped\n*/",
        "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:transformEntries(java.util.Iterator)": "/**\n* Transforms entries iterator into unmodifiable entries.\n* @param entries iterator of Entry<K, V> to transform\n* @return iterator of unmodifiable Entry<K, V>\n*/"
    },
    "com.google.common.reflect.MutableTypeToInstanceMap": {
        "com.google.common.reflect.MutableTypeToInstanceMap:trustedGet(com.google.common.reflect.TypeToken)": "/**\n* Retrieves a value from backingMap by its TypeToken.\n* @param type TypeToken representing the desired type\n* @return value of type T or null if not found\n*/",
        "com.google.common.reflect.MutableTypeToInstanceMap:trustedPut(com.google.common.reflect.TypeToken,java.lang.Object)": "/**\n* Puts a value in the backing map and returns it.\n* @param type the type token for the value's type\n* @param value the value to store, may be null\n* @return the stored value or null if not applicable\n*/",
        "com.google.common.reflect.MutableTypeToInstanceMap:put(com.google.common.reflect.TypeToken,java.lang.Object)": "/**\n* Throws UnsupportedOperationException; use putInstance() instead.\n* @param key TypeToken for the entry key\n* @param value value to associate with the key\n* @return always throws exception, no return value\n*/",
        "com.google.common.reflect.MutableTypeToInstanceMap:putAll(java.util.Map)": "/**\n* Deprecated method to add all entries from a map; always throws UnsupportedOperationException.\n* @param map entries to add, not used due to deprecation\n*/",
        "com.google.common.reflect.MutableTypeToInstanceMap:delegate()": "/**\n* Returns the backing map of type tokens to their corresponding values.\n* @return a map of type tokens to values\n*/",
        "com.google.common.reflect.MutableTypeToInstanceMap:getInstance(com.google.common.reflect.TypeToken)": "/**\n* Retrieves an instance of type T, rejecting type variables for safety.\n* @param type TypeToken representing the desired type\n* @return instance of type T or null if not found\n*/",
        "com.google.common.reflect.MutableTypeToInstanceMap:putInstance(com.google.common.reflect.TypeToken,java.lang.Object)": "/**\n* Stores an instance of the specified type in the backing map.\n* @param type type token for the value's type\n* @param value the value to store, may be null\n* @return the stored value or null if not applicable\n*/",
        "com.google.common.reflect.MutableTypeToInstanceMap:<init>()": "/**\n* Constructs a new MutableTypeToInstanceMap instance.\n*/",
        "com.google.common.reflect.MutableTypeToInstanceMap:getInstance(java.lang.Class)": "/**\n* Retrieves an instance of the specified type.\n* @param type the class type to retrieve an instance of\n* @return instance of type T or null if not found\n*/",
        "com.google.common.reflect.MutableTypeToInstanceMap:putInstance(java.lang.Class,java.lang.Object)": "/**\n* Stores an instance of the specified type.\n* @param type the class type of the instance to store\n* @param value the instance to store, may be null\n* @return the stored instance or null if not applicable\n*/",
        "com.google.common.reflect.MutableTypeToInstanceMap:entrySet()": "/**\n* Returns an unmodifiable set of entries from the backing map.\n* @return Set of key-value pairs with TypeToken keys and B values\n*/"
    },
    "com.google.common.reflect.Parameter": {
        "com.google.common.reflect.Parameter:getDeclaredAnnotations()": "/**\n* Returns an array of declared annotations.\n* @return array of Annotation objects\n*/",
        "com.google.common.reflect.Parameter:getAnnotatedType()": "/**\n* Returns the annotated type, ensuring it is not null.\n* @return AnnotatedType object\n*/",
        "com.google.common.reflect.Parameter:toString()": "/**\n* Returns a string representation of the object with type and position.\n* @return formatted string of type and position\n*/",
        "com.google.common.reflect.Parameter:getAnnotations()": "/**\n* Retrieves declared annotations of the class.\n* @return array of Annotation objects\n*/",
        "com.google.common.reflect.Parameter:getAnnotation(java.lang.Class)": "/**\n* Retrieves an annotation of the specified type from the collection.\n* @param annotationType the class of the annotation to retrieve\n* @return the annotation instance or null if not found\n*/",
        "com.google.common.reflect.Parameter:getDeclaredAnnotation(java.lang.Class)": "/**\n* Retrieves a declared annotation of specified type.\n* @param annotationType the class type of the annotation\n* @return the annotation instance or null if not found\n*/",
        "com.google.common.reflect.Parameter:isAnnotationPresent(java.lang.Class)": "/**\n* Checks if the specified annotation is present.\n* @param annotationType the class of the annotation to check\n* @return true if annotation is present, false otherwise\n*/",
        "com.google.common.reflect.Parameter:equals(java.lang.Object)": "/**\n* Compares this Parameter with another object for equality.\n* @param obj object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.reflect.Parameter:<init>(com.google.common.reflect.Invokable,int,com.google.common.reflect.TypeToken,java.lang.annotation.Annotation[],java.lang.Object)": "/**\n* Constructs a Parameter with declaration, position, type, annotations, and annotatedType.\n* @param declaration method or constructor declaration\n* @param position index of the parameter\n* @param type type of the parameter\n* @param annotations array of annotations for the parameter\n* @param annotatedType optional annotated type value\n*/",
        "com.google.common.reflect.Parameter:getDeclaredAnnotationsByType(java.lang.Class)": "/**\n* Retrieves declared annotations of specified type.\n* @param annotationType class type of the annotation\n* @return array of annotations of the specified type\n*/",
        "com.google.common.reflect.Parameter:getAnnotationsByType(java.lang.Class)": "/**\n* Retrieves annotations of specified type.\n* @param annotationType class type of the annotation\n* @return array of annotations of the specified type\n*/"
    },
    "com.google.common.reflect.TypeParameter": {
        "com.google.common.reflect.TypeParameter:hashCode()": "/**\n* Returns the hash code of the typeVariable.\n* @return hash code as an integer\n*/",
        "com.google.common.reflect.TypeParameter:equals(java.lang.Object)": "/**\n* Compares this TypeParameter with another object for equality.\n* @param o object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.reflect.TypeParameter:toString()": "/**\n* Returns string representation of the typeVariable object.\n* @return string representation of typeVariable\n*/",
        "com.google.common.reflect.TypeParameter:<init>()": "/**\n* Constructs a TypeParameter, ensuring the type is a TypeVariable.\n* @throws IllegalArgumentException if type is not a TypeVariable\n*/"
    },
    "com.google.common.reflect.TypeResolver$TypeMappingIntrospector": {
        "com.google.common.reflect.TypeResolver$TypeMappingIntrospector:visitClass(java.lang.Class)": "/**\n* Visits the class's generic superclass and interfaces.\n* @param clazz the class to inspect\n*/",
        "com.google.common.reflect.TypeResolver$TypeMappingIntrospector:visitTypeVariable(java.lang.reflect.TypeVariable)": "/**\n* Visits the bounds of a type variable.\n* @param t the type variable to visit\n*/",
        "com.google.common.reflect.TypeResolver$TypeMappingIntrospector:visitWildcardType(java.lang.reflect.WildcardType)": "/**\n* Visits the upper bounds of a wildcard type.\n* @param t the WildcardType to visit\n*/",
        "com.google.common.reflect.TypeResolver$TypeMappingIntrospector:map(com.google.common.reflect.TypeResolver$TypeVariableKey,java.lang.reflect.Type)": "/**\n* Maps a TypeVariableKey to a Type, avoiding cycles in the mapping.\n* @param var the TypeVariableKey to map\n* @param arg the Type to map to the TypeVariableKey\n*/",
        "com.google.common.reflect.TypeResolver$TypeMappingIntrospector:visitParameterizedType(java.lang.reflect.ParameterizedType)": "/**\n* Processes a ParameterizedType, mapping its type variables to actual arguments.\n* @param parameterizedType the ParameterizedType to visit\n*/",
        "com.google.common.reflect.TypeResolver$TypeMappingIntrospector:getTypeMappings(java.lang.reflect.Type)": "/**\n* Retrieves type mappings for a given context type.\n* @param contextType the type to introspect\n* @return ImmutableMap of type mappings\n*/"
    },
    "com.google.common.reflect.TypeResolver$TypeTable": {
        "com.google.common.reflect.TypeResolver$TypeTable:<init>(com.google.common.collect.ImmutableMap)": "/**\n* Constructs a TypeTable with the given mapping of type variables to types.\n* @param map immutable mapping of TypeVariableKey to Type\n*/",
        "com.google.common.reflect.TypeResolver$TypeTable:<init>()": "/**\n* Initializes TypeTable with an empty immutable map.\n*/",
        "com.google.common.reflect.TypeResolver$TypeTable:where(java.util.Map)": "/**\n* Creates a TypeTable from type mappings, ensuring no variable binds to itself.\n* @param mappings mapping of TypeVariableKey to Type\n* @return TypeTable constructed from the mappings\n*/",
        "com.google.common.reflect.TypeResolver$TypeTable:resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable)": "/**\n* Resolves a TypeVariable's type or returns its original if bounds are unchanged.\n* @param var TypeVariable to resolve\n* @param forDependants TypeTable for dependent types\n* @return resolved Type or original TypeVariable\n*/",
        "com.google.common.reflect.TypeResolver$TypeTable:resolve(java.lang.reflect.TypeVariable)": "/**\n* Resolves a TypeVariable's type using a guarded TypeTable.\n* @param var TypeVariable to resolve\n* @return resolved Type or original TypeVariable\n*/"
    },
    "com.google.common.reflect.TypeResolver$TypeVariableKey": {
        "com.google.common.reflect.TypeResolver$TypeVariableKey:hashCode()": "/**\n* Computes the hash code based on variable's declaration and name.\n* @return hash code as an integer\n*/",
        "com.google.common.reflect.TypeResolver$TypeVariableKey:equalsTypeVariable(java.lang.reflect.TypeVariable)": "/**\n* Compares this type variable with another for equality.\n* @param that the type variable to compare with\n* @return true if both type variables are equal, false otherwise\n*/",
        "com.google.common.reflect.TypeResolver$TypeVariableKey:toString()": "/**\n* Returns a string representation of the object.\n* @return string representation of 'var'\n*/",
        "com.google.common.reflect.TypeResolver$TypeVariableKey:<init>(java.lang.reflect.TypeVariable)": "/**\n* Initializes TypeVariableKey with a non-null TypeVariable.\n* @param var the TypeVariable to be assigned\n*/",
        "com.google.common.reflect.TypeResolver$TypeVariableKey:equals(java.lang.Object)": "/**\n* Checks equality with another object, specifically TypeVariableKey.\n* @param obj object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.reflect.TypeResolver$TypeVariableKey:equalsType(java.lang.reflect.Type)": "/**\n* Checks if the given type is a TypeVariable and equals it.\n* @param type the type to compare\n* @return true if it's a TypeVariable and equal, false otherwise\n*/",
        "com.google.common.reflect.TypeResolver$TypeVariableKey:forLookup(java.lang.reflect.Type)": "/**\n* Creates a TypeVariableKey from a Type if it's a TypeVariable.\n* @param t the Type to convert\n* @return TypeVariableKey or null if t is not a TypeVariable\n*/"
    },
    "com.google.common.reflect.TypeResolver$WildcardCapturer": {
        "com.google.common.reflect.TypeResolver$WildcardCapturer:<init>(java.util.concurrent.atomic.AtomicInteger)": "/**\n* Constructs a WildcardCapturer with a given ID.\n* @param id an AtomicInteger representing the unique identifier\n*/",
        "com.google.common.reflect.TypeResolver$WildcardCapturer:forTypeVariable(java.lang.reflect.TypeVariable)": "/**\n* Creates a WildcardCapturer for a given type variable.\n* @param typeParam the type variable to capture\n* @return a WildcardCapturer instance for the type variable\n*/",
        "com.google.common.reflect.TypeResolver$WildcardCapturer:captureNullable(java.lang.reflect.Type)": "/**\n* Captures a nullable type or returns null if the input is null.\n* @param type the Type to capture, may be null\n* @return captured Type or null if input is null\n*/",
        "com.google.common.reflect.TypeResolver$WildcardCapturer:<init>()": "/**\n* Default constructor initializing WildcardCapturer with a new AtomicInteger ID.\n*/",
        "com.google.common.reflect.TypeResolver$WildcardCapturer:notForTypeVariable()": "/**\n* Creates a new WildcardCapturer instance using the unique identifier.\n* @return WildcardCapturer object\n*/",
        "com.google.common.reflect.TypeResolver$WildcardCapturer:captureAsTypeVariable(java.lang.reflect.Type[])": "/**** Captures a type variable with upper bounds. \n* @param upperBounds array of upper bound types \n* @return new TypeVariable instance with generated name \n*/",
        "com.google.common.reflect.TypeResolver$WildcardCapturer:capture(java.lang.reflect.Type)": "/**\n* Captures a Type, handling various subtypes and returning the appropriate representation.\n* @param type the Type to capture, must not be null\n* @return captured Type based on input type\n*/"
    },
    "com.google.common.reflect.TypeResolver": {
        "com.google.common.reflect.TypeResolver:<init>(com.google.common.reflect.TypeResolver$TypeTable)": "/**\n* Initializes TypeResolver with a specified TypeTable.\n* @param typeTable the table of types to resolve\n*/",
        "com.google.common.reflect.TypeResolver:populateTypeMappings(java.util.Map,java.lang.reflect.Type,java.lang.reflect.Type)": "/**\n* Populates type mappings from 'from' to 'to' into the provided 'mappings' map.\n* @param mappings map to store type variable mappings\n* @param from source type to map from\n* @param to target type to map to\n*/",
        "com.google.common.reflect.TypeResolver:resolveTypes(java.lang.reflect.Type[])": "/**\n* Resolves an array of types to their specific representations.\n* @param types array of Type objects to resolve\n* @return array of resolved Type objects\n*/",
        "com.google.common.reflect.TypeResolver:expectArgument(java.lang.Class,java.lang.Object)": "/**\n* Casts an object to a specified type, validating its compatibility.\n* @param type the class type to cast to\n* @param arg the object to be cast\n* @return the cast object of type T\n* @throws IllegalArgumentException if the cast fails\n*/",
        "com.google.common.reflect.TypeResolver:<init>()": "/**\n* Initializes TypeResolver with a new TypeTable instance.\n*/",
        "com.google.common.reflect.TypeResolver:resolveWildcardType(java.lang.reflect.WildcardType)": "/**\n* Resolves WildcardType to its specific representation.\n* @param type the WildcardType to resolve\n* @return a WildcardTypeImpl with resolved bounds\n*/",
        "com.google.common.reflect.TypeResolver:resolveGenericArrayType(java.lang.reflect.GenericArrayType)": "/**\n* Resolves and creates a new array type from a generic array type.\n* @param type the generic array type to resolve\n* @return new array Type instance based on the resolved component type\n*/",
        "com.google.common.reflect.TypeResolver:where(java.util.Map)": "/**\n* Resolves types based on provided mappings.\n* @param mappings type variable mappings to resolve\n* @return TypeResolver instance with resolved types\n*/",
        "com.google.common.reflect.TypeResolver:resolveType(java.lang.reflect.Type)": "/**\n* Resolves a Type instance to its specific representation.\n* @param type the Type to resolve\n* @return the resolved Type instance\n*/",
        "com.google.common.reflect.TypeResolver:covariantly(java.lang.reflect.Type)": "/**\n* Creates a TypeResolver for the specified context type.\n* @param contextType the type to resolve mappings for\n* @return TypeResolver instance with resolved types\n*/",
        "com.google.common.reflect.TypeResolver:invariantly(java.lang.reflect.Type)": "/**\n* Creates a TypeResolver for the given context type.\n* @param contextType the type to resolve mappings for\n* @return TypeResolver instance with resolved types\n*/",
        "com.google.common.reflect.TypeResolver:where(java.lang.reflect.Type,java.lang.reflect.Type)": "/**\n* Resolves type variables from formal to actual types.\n* @param formal the formal type to resolve\n* @param actual the actual type to map to\n* @return TypeResolver instance with resolved types\n*/",
        "com.google.common.reflect.TypeResolver:resolveTypesInPlace(java.lang.reflect.Type[])": "/**\n* Resolves an array of Type instances in place.\n* @param types array of Type instances to resolve\n* @return the same array with resolved Type instances\n*/",
        "com.google.common.reflect.TypeResolver:resolveParameterizedType(java.lang.reflect.ParameterizedType)": "/**\n* Resolves a ParameterizedType and returns a new instance.\n* @param type the ParameterizedType to resolve\n* @return a new ParameterizedType with resolved types\n*/"
    },
    "com.google.common.reflect.TypeToken$1": {
        "com.google.common.reflect.TypeToken$1:toString()": "/**\n* Returns a string representation of the runtime type.\n* @return String representation of the runtime type\n*/",
        "com.google.common.reflect.TypeToken$1:getGenericReturnType()": "/**\n* Retrieves the generic return type of the method.\n* @return Type representing the method's generic return type\n*/",
        "com.google.common.reflect.TypeToken$1:getGenericParameterTypes()": "/**\n* Retrieves the method's generic parameter types.\n* @return an array of Type representing the generic parameter types\n*/",
        "com.google.common.reflect.TypeToken$1:getGenericExceptionTypes()": "/**\n* Retrieves generic exception types of the method.\n* @return an array of Type representing the generic exception types\n*/"
    },
    "com.google.common.reflect.Types": {
        "com.google.common.reflect.Types:getArrayClass(java.lang.Class)": "/**\n* Returns the array class for the specified component type.\n* @param componentType the type of array elements\n* @return Class object representing the array type\n*/",
        "com.google.common.reflect.Types:toString(java.lang.reflect.Type)": "/**\n* Converts Type to its string representation.\n* @param type the Type to convert\n* @return class name if type is Class, else type's string\n*/",
        "com.google.common.reflect.Types:toArray(java.util.Collection)": "/**\n* Converts a Collection of Type to an array of Type.\n* @param types collection of Type elements\n* @return array of Type elements\n*/",
        "com.google.common.reflect.Types:<init>()": "/**\n* Private constructor to prevent instantiation of the Types class.\n*/",
        "com.google.common.reflect.Types:getComponentType(java.lang.reflect.Type)": "/**\n* Retrieves the component type of a given Type.\n* @param type the Type to analyze\n* @return the component Type or null if not applicable\n*/",
        "com.google.common.reflect.Types:disallowPrimitiveType(java.lang.reflect.Type[],java.lang.String)": "/**\n* Validates that no primitive types are present in the provided array.\n* @param types array of Type objects to check\n* @param usedAs context for the usage of types\n*/",
        "com.google.common.reflect.Types:filterUpperBounds(java.lang.Iterable)": "/**\n* Filters out Object.class from the provided bounds.\n* @param bounds collection of type bounds\n* @return Iterable of bounds excluding Object.class\n*/",
        "com.google.common.reflect.Types:newTypeVariableImpl(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[])": "/**\n* Creates a new TypeVariable instance with specified declaration and bounds.\n* @param genericDeclaration the generic declaration context\n* @param name the name of the type variable\n* @param bounds the upper bounds of the type variable\n* @return a proxy TypeVariable instance\n*/",
        "com.google.common.reflect.Types:subtypeOf(java.lang.reflect.Type)": "/**\n* Creates a WildcardType with specified upper bound.\n* @param upperBound the upper bound of the wildcard\n* @return WildcardType instance with no lower bounds\n*/",
        "com.google.common.reflect.Types:supertypeOf(java.lang.reflect.Type)": "/**\n* Creates a wildcard type with a specified lower bound.\n* @param lowerBound the lower bound for the wildcard\n* @return WildcardType with the given lower bound and upper bound as Object\n*/",
        "com.google.common.reflect.Types:subtypeOfComponentType(java.lang.reflect.Type[])": "/**\n* Retrieves the subtype of the first non-null component type from bounds.\n* @param bounds array of Type bounds\n* @return subtype of the component type or null if none found\n*/",
        "com.google.common.reflect.Types:newArrayType(java.lang.reflect.Type)": "/**\n* Creates a new array type based on the component type.\n* @param componentType type of array elements\n* @return new array Type instance\n*/"
    },
    "com.google.common.reflect.TypeToken$Bounds": {
        "com.google.common.reflect.TypeToken$Bounds:<init>(java.lang.reflect.Type[],boolean)": "/**\n* Initializes Bounds with specified type array and target flag.\n* @param bounds array of Type objects\n* @param target boolean indicating target status\n*/",
        "com.google.common.reflect.TypeToken$Bounds:isSubtypeOf(java.lang.reflect.Type)": "/**\n* Checks if any bound is a subtype of the given supertype.\n* @param supertype the type to check against\n* @return true if a subtype is found, false otherwise\n*/",
        "com.google.common.reflect.TypeToken$Bounds:isSupertypeOf(java.lang.reflect.Type)": "/**\n* Checks if the given subtype is a supertype of any bounds.\n* @param subtype the type to check against bounds\n* @return true if subtype is a supertype, false otherwise\n*/"
    },
    "com.google.common.reflect.TypeToken$TypeCollector": {
        "com.google.common.reflect.TypeToken$TypeCollector:classesOnly()": "/**\n* Collects only non-interface types from the given types.\n* @return TypeCollector for non-interface types\n*/",
        "com.google.common.reflect.TypeToken$TypeCollector:collectTypes(java.lang.Object,java.util.Map)": "/**\n* Collects type hierarchy levels into a map.\n* @param type the type to analyze\n* @param map a map storing type levels\n* @return the level of the provided type in hierarchy\n*/",
        "com.google.common.reflect.TypeToken$TypeCollector:sortKeysByValue(java.util.Map,java.util.Comparator)": "/**\n* Sorts keys of a map based on their corresponding values.\n* @param map the input map with keys and values\n* @param valueComparator comparator for value comparison\n* @return sorted list of keys in immutable form\n*/",
        "com.google.common.reflect.TypeToken$TypeCollector:collectTypes(java.lang.Iterable)": "/**\n* Collects type hierarchy levels and returns them sorted in reverse order.\n* @param types iterable collection of types\n* @return sorted immutable list of types by hierarchy level\n*/",
        "com.google.common.reflect.TypeToken$TypeCollector:collectTypes(java.lang.Object)": "/**\n* Collects type hierarchy levels from a single type.\n* @param type the type to collect hierarchy from\n* @return sorted immutable list of types by hierarchy level\n*/"
    },
    "com.google.common.reflect.TypeToken$ClassSet": {
        "com.google.common.reflect.TypeToken$ClassSet:interfaces()": "/**\n* Throws exception indicating interfaces retrieval is unsupported.\n* @throws UnsupportedOperationException if called\n*/",
        "com.google.common.reflect.TypeToken$ClassSet:readResolve()": "/**\n* Resolves object by returning its class types.\n* @return a ClassSet representing the object's types\n*/",
        "com.google.common.reflect.TypeToken$ClassSet:rawTypes()": "/**\n* Returns a set of raw types for the generic type T.\n* @return Set of Class objects representing raw types of T\n*/",
        "com.google.common.reflect.TypeToken$ClassSet:delegate()": "/**\n* Returns a set of non-type-variable classes for the generic type.\n* @return Set of TypeToken for non-type-variable classes\n*/"
    },
    "com.google.common.reflect.TypeToken$TypeSet": {
        "com.google.common.reflect.TypeToken$TypeSet:classes()": "/**\n* Creates and returns a new ClassSet instance.\n* @return a new TypeSet representing classes\n*/",
        "com.google.common.reflect.TypeToken$TypeSet:interfaces()": "/**\n* Creates a new InterfaceSet instance based on the current object.\n* @return InterfaceSet containing interfaces of this object\n*/",
        "com.google.common.reflect.TypeToken$TypeSet:rawTypes()": "/**\n* Returns a set of raw types for the generic type T.\n* @return Set of Class objects representing super types of T\n*/",
        "com.google.common.reflect.TypeToken$TypeSet:delegate()": "/**\n* Retrieves a set of type tokens, collecting if not already cached.\n* @return Set of TypeToken or an empty set if none found\n*/"
    },
    "com.google.common.reflect.TypeToken$InterfaceSet": {
        "com.google.common.reflect.TypeToken$InterfaceSet:classes()": "/**\n* Throws an exception indicating unsupported operation for classes method.\n* @return UnsupportedOperationException\n*/",
        "com.google.common.reflect.TypeToken$InterfaceSet:readResolve()": "/**\n* Resolves the object by fetching its types and interfaces.\n* @return Object representing the resolved type interfaces\n*/",
        "com.google.common.reflect.TypeToken$InterfaceSet:delegate()": "/**\n* Returns a set of interface type tokens, caching the result if not already present.\n* @return Set of TypeToken representing interfaces\n*/",
        "com.google.common.reflect.TypeToken$InterfaceSet:rawTypes()": "/**\n* Returns a set of interface types for the raw type of T.\n* @return Set of interface classes or empty if none found\n*/"
    },
    "com.google.common.reflect.TypeToken$SimpleTypeToken": {
        "com.google.common.reflect.TypeToken$SimpleTypeToken:<init>(java.lang.reflect.Type)": "/**\n* Constructs a SimpleTypeToken with the specified type.\n* @param type the Type to associate with this token\n*/"
    },
    "com.google.common.reflect.TypeToken$TypeCollector$1": {
        "com.google.common.reflect.TypeToken$TypeCollector$1:getSuperclass(java.lang.Object)": "/**\n* Retrieves the superclass of the given type.\n* @param type the class type to find the superclass for\n* @return the superclass type or null if none exists\n*/",
        "com.google.common.reflect.TypeToken$TypeCollector$1:getInterfaces(java.lang.Object)": "/**\n* Retrieves interfaces associated with the given type.\n* @param type the type for which interfaces are to be fetched\n* @return an iterable collection of interfaces extending K\n*/",
        "com.google.common.reflect.TypeToken$TypeCollector$1:getRawType(java.lang.Object)": "/**\n* Retrieves the raw type of the specified parameterized type.\n* @param type the parameterized type to analyze\n* @return the raw Class object representing the type\n*/"
    },
    "com.google.common.reflect.TypeToken$TypeCollector$2": {
        "com.google.common.reflect.TypeToken$TypeCollector$2:getSuperclass(java.lang.Object)": "/**\n* Retrieves the superclass of the given type.\n* @param type the type whose superclass is to be found\n* @return the superclass type or null if none exists\n*/",
        "com.google.common.reflect.TypeToken$TypeCollector$2:getInterfaces(java.lang.Object)": "/**\n* Retrieves interfaces of the specified type.\n* @param type the type for which to get interfaces\n* @return an iterable collection of interfaces of type K\n*/",
        "com.google.common.reflect.TypeToken$TypeCollector$2:getRawType(java.lang.Object)": "/**\n* Retrieves the raw type of the given parameterized type.\n* @param type a parameterized type\n* @return the raw Class type associated with the parameterized type\n*/"
    },
    "com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector": {
        "com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector:<init>(com.google.common.reflect.TypeToken$TypeCollector)": "/**\n* Initializes ForwardingTypeCollector with a delegate TypeCollector.\n* @param delegate the TypeCollector to delegate operations to\n*/",
        "com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector:getRawType(java.lang.Object)": "/**\n* Returns the raw type of the given parameterized type.\n* @param type the parameterized type\n* @return the raw Class type associated with the parameter\n*/",
        "com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector:getInterfaces(java.lang.Object)": "/**\n* Retrieves interfaces of the specified type.\n* @param type the class type to get interfaces for\n* @return an iterable of interfaces extending K\n*/",
        "com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector:getSuperclass(java.lang.Object)": "/**\n* Retrieves the superclass of the specified type.\n* @param type the class type to find the superclass of\n* @return superclass of the type or null if none exists\n*/"
    },
    "com.google.common.reflect.TypeVisitor": {
        "com.google.common.reflect.TypeVisitor:visitTypeVariable(java.lang.reflect.TypeVariable)": "/**\n* Processes a type variable during a type visit operation.\n* @param t the type variable to be visited\n*/",
        "com.google.common.reflect.TypeVisitor:visitWildcardType(java.lang.reflect.WildcardType)": "/**\n* Processes a WildcardType instance during type analysis.\n* @param t the WildcardType to be visited\n*/",
        "com.google.common.reflect.TypeVisitor:visitParameterizedType(java.lang.reflect.ParameterizedType)": "/**\n* Visits a ParameterizedType instance for processing.\n* @param t the ParameterizedType to visit\n*/",
        "com.google.common.reflect.TypeVisitor:visitClass(java.lang.Class)": "/**\n* Visits a class of any type.\n* @param t the class to be visited\n*/",
        "com.google.common.reflect.TypeVisitor:visitGenericArrayType(java.lang.reflect.GenericArrayType)": "/**\n* Processes a GenericArrayType instance.\n* @param t the GenericArrayType to be visited\n*/"
    },
    "com.google.common.reflect.Types$ClassOwnership$1": {
        "com.google.common.reflect.Types$ClassOwnership$1:getOwnerType(java.lang.Class)": "/**\n* Retrieves the owner type for a given raw class type.\n* @param rawType the class for which to find the owner type\n* @return the owner type class or null if none exists\n*/"
    },
    "com.google.common.reflect.Types$ClassOwnership$2": {
        "com.google.common.reflect.Types$ClassOwnership$2:getOwnerType(java.lang.Class)": "/**\n* Retrieves the owner type for a given raw type.\n* @param rawType the class to analyze\n* @return the owner class or null if not applicable\n*/"
    },
    "com.google.common.reflect.Types$ClassOwnership": {
        "com.google.common.reflect.Types$ClassOwnership:detectJvmBehavior()": "/**\n* Detects JVM behavior regarding class ownership.\n* @return ClassOwnership based on LocalClass's parameterized type\n*/"
    },
    "com.google.common.reflect.Types$GenericArrayTypeImpl": {
        "com.google.common.reflect.Types$GenericArrayTypeImpl:<init>(java.lang.reflect.Type)": "/**\n* Constructs GenericArrayTypeImpl with specified component type.\n* @param componentType the type of the array's components\n*/",
        "com.google.common.reflect.Types$GenericArrayTypeImpl:hashCode()": "/**\n* Returns the hash code based on the component type.\n* @return hash code integer of the component type\n*/",
        "com.google.common.reflect.Types$GenericArrayTypeImpl:getGenericComponentType()": "/**\n* Retrieves the generic component type.\n* @return Type of the generic component\n*/",
        "com.google.common.reflect.Types$GenericArrayTypeImpl:toString()": "/**\n* Returns string representation of the array type.\n* @return string of component type followed by \"[]\"\n*/",
        "com.google.common.reflect.Types$GenericArrayTypeImpl:equals(java.lang.Object)": "/**\n* Compares this GenericArrayType with another for equality.\n* @param obj object to compare with this GenericArrayType\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.reflect.Types$JavaVersion$3": {
        "com.google.common.reflect.Types$JavaVersion$3:newArrayType(java.lang.reflect.Type)": "/**\n* Creates a new array type based on the specified component type.\n* @param componentType the type of the array's elements\n* @return a new array Type instance\n*/",
        "com.google.common.reflect.Types$JavaVersion$3:usedInGenericType(java.lang.reflect.Type)": "/**\n* Determines the type used in a generic type.\n* @param type the generic type to analyze\n* @return the underlying Type used in the generic type\n*/",
        "com.google.common.reflect.Types$JavaVersion$3:typeName(java.lang.reflect.Type)": "/**\n* Converts a Type object to its string representation.\n* @param type the Type to convert\n* @return string representation of the Type\n*/"
    },
    "com.google.common.reflect.Types$JavaVersion$4": {
        "com.google.common.reflect.Types$JavaVersion$4:newArrayType(java.lang.reflect.Type)": "/**\n* Creates a new array type for the specified component type.\n* @param componentType the type of the array's elements\n* @return a new Type representing the array type\n*/",
        "com.google.common.reflect.Types$JavaVersion$4:usedInGenericType(java.lang.reflect.Type)": "/**\n* Determines the type used in a generic type.\n* @param type the generic type to analyze\n* @return the underlying Type used in the generic type\n*/",
        "com.google.common.reflect.Types$JavaVersion$4:typeName(java.lang.reflect.Type)": "/**\n* Converts Type to its string representation.\n* @param type the Type to convert\n* @return string representation of the Type\n*/"
    },
    "com.google.common.reflect.Types$ParameterizedTypeImpl": {
        "com.google.common.reflect.Types$ParameterizedTypeImpl:getActualTypeArguments()": "/**\n* Returns an array of actual type arguments.\n* @return array of Type objects from the argumentsList\n*/",
        "com.google.common.reflect.Types$ParameterizedTypeImpl:getRawType()": "/**\n* Returns the raw type of the current instance.\n* @return the raw Type object associated with this instance\n*/",
        "com.google.common.reflect.Types$ParameterizedTypeImpl:getOwnerType()": "/**\n* Retrieves the owner type.\n* @return Type of the owner, or null if not set\n*/",
        "com.google.common.reflect.Types$ParameterizedTypeImpl:hashCode()": "/**\n* Computes the hash code for the object based on ownerType and argumentsList.\n* @return an integer hash code value\n*/",
        "com.google.common.reflect.Types$ParameterizedTypeImpl:equals(java.lang.Object)": "/**\n* Compares this ParameterizedType with another for equality.\n* @param other object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.reflect.Types$ParameterizedTypeImpl:toString()": "/**\n* Returns a string representation of the object, including type and arguments.\n*/",
        "com.google.common.reflect.Types$ParameterizedTypeImpl:<init>(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])": "/**\n* Constructs ParameterizedTypeImpl with owner type, raw type, and type arguments.\n* @param ownerType optional owner type\n* @param rawType class of the parameterized type\n* @param typeArguments array of type arguments\n*/"
    },
    "com.google.common.reflect.Types$JavaVersion": {
        "com.google.common.reflect.Types$JavaVersion:jdkTypeDuplicatesOwnerName()": "/**\n* Checks for duplicate owner names in JDK types.\n* @return true if duplicates exist, false otherwise\n*/",
        "com.google.common.reflect.Types$JavaVersion:typeName(java.lang.reflect.Type)": "/**\n* Converts Type to its string representation.\n* @param type the Type to convert\n* @return string representation of the Type\n*/",
        "com.google.common.reflect.Types$JavaVersion:usedInGenericType(java.lang.reflect.Type[])": "/**\n* Constructs an ImmutableList of used types from an array.\n* @param types array of Type elements\n* @return ImmutableList of used Type elements\n*/"
    },
    "com.google.common.reflect.Types$TypeVariableImpl": {
        "com.google.common.reflect.Types$TypeVariableImpl:getBounds()": "/**\n* Returns an array of bounds.\n* @return array of Type representing the bounds\n*/",
        "com.google.common.reflect.Types$TypeVariableImpl:hashCode()": "/**\n* Computes hash code based on generic declaration and name.\n* @return combined hash code as an integer\n*/",
        "com.google.common.reflect.Types$TypeVariableImpl:getName()": "/**\n* Retrieves the name of the object.\n* @return the name as a String\n*/",
        "com.google.common.reflect.Types$TypeVariableImpl:getGenericDeclaration()": "/**\n* Retrieves the generic declaration.\n* @return the generic declaration of type D\n*/",
        "com.google.common.reflect.Types$TypeVariableImpl:equals(java.lang.Object)": "/**\n* Compares this TypeVariable to another for equality based on name and declaration.\n* @param obj the object to compare, may be null\n* @return true if equal, false otherwise\n*/",
        "com.google.common.reflect.Types$TypeVariableImpl:<init>(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[])": "/**\n* Constructs a TypeVariableImpl with specified declaration, name, and bounds.\n* @param genericDeclaration the generic declaration of the type variable\n* @param name the name of the type variable\n* @param bounds array of bounds for the type variable\n*/"
    },
    "com.google.common.reflect.Types$TypeVariableInvocationHandler": {
        "com.google.common.reflect.Types$TypeVariableInvocationHandler:<init>(com.google.common.reflect.Types$TypeVariableImpl)": "/**\n* Initializes the handler with a TypeVariableImpl instance.\n* @param typeVariableImpl the TypeVariableImpl to be handled\n*/",
        "com.google.common.reflect.Types$TypeVariableInvocationHandler:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": "/**\n* Invokes a method on a proxy with specified arguments.\n* @param proxy the proxy instance\n\n* @param method the method to invoke\n* @param args method arguments\n* @return result of method invocation or throws exception\n*/"
    },
    "com.google.common.reflect.Types$WildcardTypeImpl": {
        "com.google.common.reflect.Types$WildcardTypeImpl:getLowerBounds()": "/**\n* Returns an array of lower bounds for the type.\n* @return an array of Type representing lower bounds\n*/",
        "com.google.common.reflect.Types$WildcardTypeImpl:getUpperBounds()": "/**\n* Returns an array of upper bound types.\n* @return array of Type objects representing upper bounds\n*/",
        "com.google.common.reflect.Types$WildcardTypeImpl:hashCode()": "/**\n* Computes the hash code by combining bounds' hash codes.\n* @return combined integer hash code value\n*/",
        "com.google.common.reflect.Types$WildcardTypeImpl:toString()": "/**\n* Constructs a string representation of type bounds.\n* @return String representation of lower and upper type bounds\n*/",
        "com.google.common.reflect.Types$WildcardTypeImpl:equals(java.lang.Object)": "/**\n* Compares this WildcardType to another for equality.\n* @param obj the object to compare, may be null\n* @return true if equal, false otherwise\n*/",
        "com.google.common.reflect.Types$WildcardTypeImpl:<init>(java.lang.reflect.Type[],java.lang.reflect.Type[])": "/**\n* Constructs WildcardTypeImpl with specified lower and upper bounds.\n* @param lowerBounds array of lower bounds for the wildcard\n* @param upperBounds array of upper bounds for the wildcard\n*/"
    },
    "com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture": {
        "com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture:setResult(com.google.common.util.concurrent.ListenableFuture)": "/**\n* Sets the result of the computation.\n* @param result future result to be set\n*/",
        "com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction)": "/**\n* Constructs an AsyncCatchingFuture for handling exceptions asynchronously.\n* @param input future to monitor for exceptions\n* @param exceptionType type of exception to catch\n* @param fallback async function for handling the exception\n*/"
    },
    "com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture": {
        "com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture:setResult(java.lang.Object)": "/**\n* Sets the result value.\n* @param result the value to be set, can be null\n*/",
        "com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function)": "/**\n* Constructs a CatchingFuture to handle exceptions with a fallback.\n* @param input future to monitor for exceptions\n* @param exceptionType type of exception to catch\n* @param fallback fallback function for handling the exception\n*/"
    },
    "com.google.common.util.concurrent.NullnessCasts": {
        "com.google.common.util.concurrent.NullnessCasts:uncheckedCastNullableTToT(java.lang.Object)": "/**\n* Casts a nullable object to a nullable type without safety checks.\n* @param t the nullable object to cast\n* @return the casted nullable object\n*/",
        "com.google.common.util.concurrent.NullnessCasts:uncheckedNull()": "/**\n* Returns a null value of a parameterized type T.\n* @param <T> the type of the object, which can be nullable\n* @return null of type T\n*/",
        "com.google.common.util.concurrent.NullnessCasts:<init>()": "/**\n* Private constructor for NullnessCasts class to prevent instantiation.\n*/"
    },
    "com.google.common.util.concurrent.Platform": {
        "com.google.common.util.concurrent.Platform:isInstanceOfThrowableClass(java.lang.Throwable,java.lang.Class)": "/**\n* Checks if the given Throwable is an instance of the expected class.\n* @param t the Throwable to check, may be null\n* @param expectedClass the class to check against\n* @return true if t is an instance of expectedClass, false otherwise\n*/",
        "com.google.common.util.concurrent.Platform:<init>()": "/**\n* Private constructor to prevent instantiation of the Platform class.\n*/",
        "com.google.common.util.concurrent.Platform:restoreInterruptIfIsInterruptedException(java.lang.Throwable)": "/**\n* Restores interrupt status if the throwable is an InterruptedException.\n* @param t throwable to check for interrupt status\n*/"
    },
    "com.google.common.util.concurrent.AbstractCatchingFuture": {
        "com.google.common.util.concurrent.AbstractCatchingFuture:pendingToString()": "/**\n* Returns a string representation of pending state details.\n* @return formatted string or null if no details are available\n*/",
        "com.google.common.util.concurrent.AbstractCatchingFuture:afterDone()": "/**\n* Cleans up after task completion, resetting futures and exception state.\n*/",
        "com.google.common.util.concurrent.AbstractCatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,java.lang.Object)": "/**\n* Constructs an AbstractCatchingFuture with input future and exception handling.\n* @param inputFuture future to monitor for exceptions\n* @param exceptionType type of exception to catch\n* @param fallback fallback function for handling the exception\n*/",
        "com.google.common.util.concurrent.AbstractCatchingFuture:run()": "/**\n* Executes the future task, handling exceptions and fallback logic.\n* @param inputFuture the future to process\n* @param exceptionType the expected exception type\n* @param fallback the fallback action on failure\n*/",
        "com.google.common.util.concurrent.AbstractCatchingFuture:create(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)": "/**\n* Creates a future that handles exceptions with a fallback.\n* @param input future to monitor\n* @param exceptionType type of exception to catch\n* @param fallback function to handle the exception\n* @param executor executor for handling the listener\n* @return ListenableFuture that manages exceptions\n*/"
    },
    "com.google.common.util.concurrent.AbstractExecutionThreadService": {
        "com.google.common.util.concurrent.AbstractExecutionThreadService:executor()": "/**\n* Returns an Executor that starts commands in a new thread.\n* @return Executor for executing commands asynchronously\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:triggerShutdown()": "/**\n* Initiates the shutdown process for the application.\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:startUp()": "/**\n* Initializes the system components at startup.\n* @throws Exception if initialization fails\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:shutDown()": "/**\n* Shuts down the system, releasing resources and performing cleanup.\n* @throws Exception if an error occurs during shutdown\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:serviceName()": "/**\n* Returns the simple name of the current class.\n* @return simple class name as a String\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:<init>()": "/**\n* Protected constructor for AbstractExecutionThreadService class.\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:state()": "/**\n* Returns the current state from the delegate.\n* @return State object representing the current state\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:isRunning()": "/**\n* Checks if the delegate is currently running.\n* @return true if running, false otherwise\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor)": "/**\n* Adds a listener with a specified executor for event handling.\n* @param listener the listener to be added\n* @param executor the executor for listener execution\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:failureCause()": "/**\n* Retrieves the cause of failure from the delegate.\n* @return Throwable representing the failure cause\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:startAsync()": "/**\n* Starts the service asynchronously.\n* @return the current Service instance\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:stopAsync()": "/**\n* Stops the service asynchronously and returns the current instance.\n* @return the current Service instance\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:awaitRunning()": "/**\n* Waits until the delegate is in a running state.\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:awaitRunning(long,java.util.concurrent.TimeUnit)": "/**\n* Waits for the process to be in a running state within the specified timeout.\n* @param timeout maximum time to wait\n* @param unit time unit of the timeout\n* @throws TimeoutException if the timeout is exceeded\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:awaitTerminated()": "/**\n* Waits for the delegate to terminate.\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:awaitTerminated(long,java.util.concurrent.TimeUnit)": "/**\n* Awaits termination of the process within a specified timeout.\n* @param timeout maximum time to wait\n* @param unit time unit of the timeout\n* @throws TimeoutException if the wait times out\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:toString()": "/**\n* Returns a string representation of the object including service name and state.\n* @return formatted string with service name and current state\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:awaitRunning(java.time.Duration)": "/**\n* Awaits the running state of the service with a specified timeout.\n* @param timeout maximum duration to wait before timeout\n* @throws TimeoutException if the wait exceeds the timeout\n*/",
        "com.google.common.util.concurrent.AbstractExecutionThreadService:awaitTerminated(java.time.Duration)": "/**\n* Awaits termination of the service with a specified timeout.\n* @param timeout maximum duration to wait before timing out\n* @throws TimeoutException if the wait exceeds the timeout\n*/"
    },
    "com.google.common.util.concurrent.AbstractFuture$Cancellation": {
        "com.google.common.util.concurrent.AbstractFuture$Cancellation:<init>(boolean,java.lang.Throwable)": "/**\n* Constructs a Cancellation object with interruption status and an optional cause.\n* @param wasInterrupted indicates if the operation was interrupted\n* @param cause optional Throwable that caused the cancellation\n*/"
    },
    "com.google.common.util.concurrent.AbstractFuture$Listener": {
        "com.google.common.util.concurrent.AbstractFuture$Listener:<init>(java.lang.Runnable,java.util.concurrent.Executor)": "/**\n* Initializes a Listener with a task and an executor.\n* @param task the Runnable task to be executed\n* @param executor the Executor to run the task\n*/",
        "com.google.common.util.concurrent.AbstractFuture$Listener:<init>()": "/**\n* Initializes a new Listener with null task and executor.\n*/"
    },
    "com.google.common.util.concurrent.AbstractFuture": {
        "com.google.common.util.concurrent.AbstractFuture:<init>()": "/**\n* Constructs an instance of AbstractFuture.\n*/",
        "com.google.common.util.concurrent.AbstractFuture:isDone()": "/**\n* Checks if the task is complete.\n* @return true if done, false otherwise\n*/",
        "com.google.common.util.concurrent.AbstractFuture:isCancelled()": "/**\n* Checks if the current operation is cancelled.\n* @return true if cancelled, false otherwise\n*/",
        "com.google.common.util.concurrent.AbstractFuture:cancellationExceptionWithCause(java.lang.String,java.lang.Throwable)": "/**\n* Creates a CancellationException with an optional cause.\n* @param message the detail message\n* @param cause the throwable cause, can be null\n* @return a CancellationException instance\n*/",
        "com.google.common.util.concurrent.AbstractFuture:executeListener(java.lang.Runnable,java.util.concurrent.Executor)": "/**\n* Executes a Runnable using the specified Executor, logging exceptions if they occur.\n* @param runnable the task to execute\n* @param executor the Executor to run the task\n*/",
        "com.google.common.util.concurrent.AbstractFuture:getUninterruptibly(java.util.concurrent.Future)": "/**\n* Retrieves value from a Future, handling interruptions gracefully.\n* @param future the Future to obtain the value from\n* @return the value of type V, which may be null\n* @throws ExecutionException if the computation threw an exception\n*/",
        "com.google.common.util.concurrent.AbstractFuture:interruptTask()": "/**\n* Interrupts the currently running task.\n*/",
        "com.google.common.util.concurrent.AbstractFuture:afterDone()": "/**\n* Invoked after the completion of a task for custom implementation.\n*/",
        "com.google.common.util.concurrent.AbstractFuture:clearListeners(com.google.common.util.concurrent.AbstractFuture$Listener)": "/**\n* Clears listeners by swapping with TOMBSTONE and reversing the list.\n* @param onto existing listener stack to append reversed listeners\n* @return new head of the reversed listener stack\n*/",
        "com.google.common.util.concurrent.AbstractFuture:wasInterrupted()": "/**\n* Checks if the operation was interrupted due to cancellation.\n* @return true if interrupted, false otherwise\n*/",
        "com.google.common.util.concurrent.AbstractFuture:pendingToString()": "/**\n* Returns a string representation of pending delay if this is a ScheduledFuture.\n* @return formatted delay string or null if not a ScheduledFuture\n*/",
        "com.google.common.util.concurrent.AbstractFuture:appendUserObject(java.lang.StringBuilder,java.lang.Object)": "/**\n* Appends user object to StringBuilder, handling recursion and exceptions.\n* @param builder StringBuilder to append to\n* @param o Object to append, may be null or cause exceptions\n*/",
        "com.google.common.util.concurrent.AbstractFuture:appendResultObject(java.lang.StringBuilder,java.lang.Object)": "/**\n* Appends a string representation of an object to the StringBuilder.\n* @param builder StringBuilder to append to\n* @param o Object to represent, may be null\n*/",
        "com.google.common.util.concurrent.AbstractFuture:getDoneValue(java.lang.Object)": "/**\n* Retrieves a value from an object, handling cancellation and failure cases.\n* @param obj the object to retrieve the value from\n* @return the value of type V or throws ExecutionException if failed\n*/",
        "com.google.common.util.concurrent.AbstractFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)": "/**\n* Adds a listener to be executed by the executor if not already completed.\n* @param listener the task to execute when done\n* @param executor the executor for running the listener\n*/",
        "com.google.common.util.concurrent.AbstractFuture:maybePropagateCancellationTo(java.util.concurrent.Future)": "/**\n* Conditionally cancels a related Future if this operation is cancelled.\n* @param related Future to potentially cancel\n*/",
        "com.google.common.util.concurrent.AbstractFuture:addDoneString(java.lang.StringBuilder)": "/**\n* Appends status of operation to StringBuilder based on computation result.\n* @param builder StringBuilder to append status messages\n*/",
        "com.google.common.util.concurrent.AbstractFuture:getFutureValue(com.google.common.util.concurrent.ListenableFuture)": "/**\n* Retrieves value from a ListenableFuture, handling cancellations and exceptions.\n* @param future the ListenableFuture to obtain the value from\n* @return Object value or Cancellation/Failure based on the future's state\n*/",
        "com.google.common.util.concurrent.AbstractFuture:get()": "/**\n* Retrieves a value, potentially blocking until available.\n* @return value of type V\n* @throws InterruptedException if interrupted while waiting\n* @throws ExecutionException if computation fails\n*/",
        "com.google.common.util.concurrent.AbstractFuture:complete(com.google.common.util.concurrent.AbstractFuture,boolean)": "/**\n* Completes the future by releasing waiters and executing listeners.\n* @param param the AbstractFuture to complete\n* @param callInterruptTask flag to determine if interruption should occur\n*/",
        "com.google.common.util.concurrent.AbstractFuture:addPendingString(java.lang.StringBuilder)": "/**\n* Appends pending status to StringBuilder, handling future completion and exceptions.\n* @param builder StringBuilder to append pending information\n*/",
        "com.google.common.util.concurrent.AbstractFuture:cancel(boolean)": "/**\n* Cancels the future, optionally interrupting if running.\n* @param mayInterruptIfRunning indicates interruption preference\n* @return true if cancellation was successful, false otherwise\n*/",
        "com.google.common.util.concurrent.AbstractFuture:set(java.lang.Object)": "/**\n* Sets a value if current value is null and completes the operation.\n* @param value the value to set, or null to set a placeholder\n* @return true if the value was set, false otherwise\n*/",
        "com.google.common.util.concurrent.AbstractFuture:setException(java.lang.Throwable)": "/**\n* Sets the exception and completes the future if not already set.\n* @param throwable the Throwable to store; must not be null\n* @return true if the exception was set, false otherwise\n*/",
        "com.google.common.util.concurrent.AbstractFuture:setFuture(com.google.common.util.concurrent.ListenableFuture)": "/**\n* Sets a future value if none is set; cancels if already cancelled.\n* @param future the ListenableFuture to set\n* @return true if the future was successfully set, false otherwise\n*/",
        "com.google.common.util.concurrent.AbstractFuture:toString()": "/**\n* Returns a string representation of the object with its status.\n* @return formatted string with class name and status\n*/",
        "com.google.common.util.concurrent.AbstractFuture:get(long,java.util.concurrent.TimeUnit)": "/**\n* Retrieves a value with a timeout.\n* @param timeout maximum wait time\n* @param unit time unit for the timeout\n* @return value of type V\n*/"
    },
    "com.google.common.util.concurrent.OverflowAvoidingLockSupport": {
        "com.google.common.util.concurrent.OverflowAvoidingLockSupport:parkNanos(java.lang.Object,long)": "/**\n* Parks the current thread for a specified duration in nanoseconds.\n* @param blocker optional object to identify the reason for blocking\n* @param nanos duration to park the thread in nanoseconds\n*/",
        "com.google.common.util.concurrent.OverflowAvoidingLockSupport:<init>()": "/**\n* Private constructor to prevent instantiation of OverflowAvoidingLockSupport class.\n*/"
    },
    "com.google.common.util.concurrent.AbstractIdleService": {
        "com.google.common.util.concurrent.AbstractIdleService:executor()": "/**\n* Provides an Executor that starts commands in new threads with a specific name.\n* @return Executor for executing commands in new threads\n*/",
        "com.google.common.util.concurrent.AbstractIdleService:serviceName()": "/**\n* Returns the simple name of the current class.\n* @return String representing the class name\n*/",
        "com.google.common.util.concurrent.AbstractIdleService:state()": "/**\n* Retrieves the current state from the delegate.\n* @return State object representing the current state\n*/",
        "com.google.common.util.concurrent.AbstractIdleService:<init>()": "/**\n* Constructor for AbstractIdleService, initializes the service instance.\n*/",
        "com.google.common.util.concurrent.AbstractIdleService:isRunning()": "/**\n* Checks if the delegate is currently running.\n* @return true if running, false otherwise\n*/",
        "com.google.common.util.concurrent.AbstractIdleService:addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor)": "/**\n* Adds a listener with an associated executor for event handling.\n* @param listener the listener to be added\n* @param executor the executor for listener execution\n*/",
        "com.google.common.util.concurrent.AbstractIdleService:failureCause()": "/**\n* Retrieves the cause of the failure from the delegate.\n* @return Throwable representing the failure cause\n*/",
        "com.google.common.util.concurrent.AbstractIdleService:startAsync()": "/**\n* Starts the service asynchronously and returns the current instance.\n* @return the Service instance for method chaining\n*/",
        "com.google.common.util.concurrent.AbstractIdleService:stopAsync()": "/**\n* Stops the service asynchronously and returns the current instance.\n* @return the Service instance for method chaining\n*/",
        "com.google.common.util.concurrent.AbstractIdleService:awaitRunning()": "/**\n* Waits for the delegate to be in a running state.\n*/",
        "com.google.common.util.concurrent.AbstractIdleService:awaitRunning(long,java.util.concurrent.TimeUnit)": "/**\n* Waits for the delegate to be in a running state within the specified timeout.\n* @param timeout maximum time to wait\n* @param unit time unit of the timeout\n* @throws TimeoutException if the timeout expires\n*/",
        "com.google.common.util.concurrent.AbstractIdleService:awaitTerminated()": "/**\n* Waits for the delegate to terminate its execution.\n*/",
        "com.google.common.util.concurrent.AbstractIdleService:awaitTerminated(long,java.util.concurrent.TimeUnit)": "/**\n* Awaits termination of the delegate with a timeout.\n* @param timeout maximum time to wait\n* @param unit time unit of the timeout\n* @throws TimeoutException if the wait times out\n*/",
        "com.google.common.util.concurrent.AbstractIdleService:toString()": "/**\n* Returns a string representation of the service with its state.\n* @return formatted string of service name and current state\n*/",
        "com.google.common.util.concurrent.AbstractIdleService:awaitRunning(java.time.Duration)": "/**\n* Awaits a running state with a specified timeout.\n* @param timeout maximum duration to wait before timeout\n* @throws TimeoutException if the wait exceeds the timeout\n*/",
        "com.google.common.util.concurrent.AbstractIdleService:awaitTerminated(java.time.Duration)": "/**\n* Awaits service termination with a specified timeout.\n* @param timeout maximum duration to wait before timing out\n* @throws TimeoutException if the wait exceeds the timeout\n*/"
    },
    "com.google.common.util.concurrent.AbstractListeningExecutorService": {
        "com.google.common.util.concurrent.AbstractListeningExecutorService:<init>()": "/**\n* Constructs an instance of AbstractListeningExecutorService.\n*/",
        "com.google.common.util.concurrent.AbstractListeningExecutorService:submit(java.lang.Runnable)": "/**\n* Submits a Runnable task for execution.\n* @param task the task to be executed\n* @return a ListenableFuture representing the pending result of the task\n*/",
        "com.google.common.util.concurrent.AbstractListeningExecutorService:submit(java.lang.Runnable,java.lang.Object)": "/**\n* Submits a runnable task and returns a future for the specified result type.\n* @param task the task to be executed\n* @param result the expected result of the task execution\n* @return a ListenableFuture for the task's result\n*/",
        "com.google.common.util.concurrent.AbstractListeningExecutorService:submit(java.util.concurrent.Callable)": "/**\n* Submits a callable task for execution.\n* @param task the task to be executed\n* @return a ListenableFuture representing the task's result\n*/",
        "com.google.common.util.concurrent.AbstractListeningExecutorService:newTaskFor(java.util.concurrent.Callable)": "/**\n* Creates a new RunnableFuture for the given callable task.\n* @param callable task to be executed\n* @return RunnableFuture instance for the callable\n*/",
        "com.google.common.util.concurrent.AbstractListeningExecutorService:newTaskFor(java.lang.Runnable,java.lang.Object)": "/**\n* Creates a RunnableFuture task for execution with a result value.\n* @param runnable task to execute\n* @param value result value to return upon completion\n* @return RunnableFuture instance\n*/"
    },
    "com.google.common.util.concurrent.Service$Listener": {
        "com.google.common.util.concurrent.Service$Listener:<init>()": "/**\n* Constructs a new Listener instance.\n*/",
        "com.google.common.util.concurrent.Service$Listener:starting()": "/**\n* Initiates the starting process of the application.\n*/",
        "com.google.common.util.concurrent.Service$Listener:running()": "/**\n* Executes the running process without parameters or return value.\n*/",
        "com.google.common.util.concurrent.Service$Listener:terminated(com.google.common.util.concurrent.Service$State)": "/**\n* Marks the current state as terminated from the specified previous state.\n* @param from the state from which termination occurred\n*/",
        "com.google.common.util.concurrent.Service$Listener:stopping(com.google.common.util.concurrent.Service$State)": "/**\n* Stops the process from the given state.\n* @param from the state to stop from\n*/",
        "com.google.common.util.concurrent.Service$Listener:failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable)": "/**\n* Handles failure events with the given state and exception.\n* @param from the state where the failure occurred\n* @param failure the Throwable representing the failure\n*/"
    },
    "com.google.common.util.concurrent.AbstractScheduledService": {
        "com.google.common.util.concurrent.AbstractScheduledService:serviceName()": "/**\n* Retrieves the simple name of the current class.\n* @return String representing the class name\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService:shutDown()": "/**\n* Shuts down the system, releasing resources and handling exceptions.\n* @throws Exception if an error occurs during shutdown\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService:startUp()": "/**\n* Initializes the system during startup.\n* @throws Exception if an error occurs during initialization\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService:<init>()": "/**\n* Protected constructor for AbstractScheduledService class.\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService:addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor)": "/**\n* Adds a listener with the specified executor.\n* @param listener the listener to add\n* @param executor the executor to run the listener\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService:state()": "/**\n* Retrieves the current state from the delegate.\n* @return State object representing the current state\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService:isRunning()": "/**\n* Checks if the delegate is currently running.\n* @return true if running, false otherwise\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService:failureCause()": "/**\n* Returns the cause of the failure from the delegate.\n* @return Throwable representing the failure cause\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService:startAsync()": "/**\n* Starts the service asynchronously and returns the service instance.\n* @return the current Service instance\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService:stopAsync()": "/**\n* Stops the service asynchronously.\n* @return the current Service instance for chaining\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService:awaitRunning()": "/**\n* Waits until the delegate is in a running state.\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService:awaitRunning(long,java.util.concurrent.TimeUnit)": "/**\n* Waits for the task to reach the running state within a timeout.\n* @param timeout maximum time to wait\n* @param unit time unit of the timeout\n* @throws TimeoutException if the timeout expires\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService:awaitTerminated()": "/**\n* Waits until the delegate has terminated.\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService:awaitTerminated(long,java.util.concurrent.TimeUnit)": "/**\n* Waits for termination with a specified timeout.\n* @param timeout maximum time to wait\n* @param unit time unit of the timeout\n* @throws TimeoutException if the wait times out\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService:executor()": "/**\n* Creates a single-threaded scheduled executor and adds a shutdown listener.\n* @return ScheduledExecutorService instance\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService:toString()": "/**\n* Returns a string representation of the service with its current state.\n* @return formatted string of service name and state\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService:awaitRunning(java.time.Duration)": "/**\n* Awaits a running state with a specified timeout.\n* @param timeout maximum duration to wait before timeout\n* @throws TimeoutException if the wait exceeds the timeout\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService:awaitTerminated(java.time.Duration)": "/**\n* Awaits termination of the service with a specified timeout.\n* @param timeout maximum duration to wait before timing out\n* @throws TimeoutException if the wait exceeds the timeout\n*/"
    },
    "com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable": {
        "com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable:<init>(java.util.concurrent.Future)": "/**\n* Initializes a cancellable future with the specified delegate.\n* @param delegate the future to be wrapped as cancellable\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable:cancel(boolean)": "/**\n* Cancels the task, optionally interrupting if running.\n* @param mayInterruptIfRunning true to interrupt, false to wait\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable:isCancelled()": "/**\n* Checks if the task is cancelled.\n* @return true if cancelled, otherwise false\n*/"
    },
    "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable": {
        "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:submitToExecutor(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule)": "/**\n* Schedules a task for execution after a delay.\n* @param schedule contains delay and time unit for scheduling\n* @return ScheduledFuture representing the scheduled task\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:initializeOrUpdateCancellationDelegate(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule)": "/**** Initializes or updates the cancellation delegate based on the provided schedule. \n* @param schedule the schedule for task execution\n* @return Cancellable instance for managing task cancellation\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:reschedule()": "/**\n* Reschedules the task, handling exceptions and ensuring cancellation management.\n* @return Cancellable instance for the rescheduled task\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:call()": "/**\n* Executes a runnable and reschedules the task.\n* @return null after execution\n*/"
    },
    "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture": {
        "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture:<init>(java.util.concurrent.locks.ReentrantLock,java.util.concurrent.Future)": "/**\n* Constructs a SupplantableFuture with a lock and current future.\n* @param lock the ReentrantLock for synchronization\n* @param currentFuture the current Future to supplant, can be null\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture:cancel(boolean)": "/**\n* Cancels the current task execution.\n* @param mayInterruptIfRunning true to interrupt if running, false otherwise\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture:isCancelled()": "/**\n* Checks if the current future task is cancelled.\n* @return true if cancelled, false otherwise\n*/"
    },
    "com.google.common.util.concurrent.Internal": {
        "com.google.common.util.concurrent.Internal:toNanosSaturated(java.time.Duration)": "/**\n* Converts Duration to nanoseconds, saturating on overflow.\n* @param duration the Duration to convert\n* @return nanoseconds as long, saturated at Long.MIN_VALUE or Long.MAX_VALUE\n*/",
        "com.google.common.util.concurrent.Internal:<init>()": "/**\n* Private constructor to prevent instantiation of the Internal class.\n*/"
    },
    "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler": {
        "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler:<init>()": "/**\n* Constructs a new instance of CustomScheduler.\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)": "/**\n* Schedules a task for execution and returns a cancellable instance.\n* @param service the service to execute\n* @param executor the executor for scheduling\n* @param runnable the task to run\n* @return Cancellable instance for the scheduled task\n*/"
    },
    "com.google.common.util.concurrent.AbstractScheduledService$Scheduler": {
        "com.google.common.util.concurrent.AbstractScheduledService$Scheduler:<init>()": "/**\n* Private constructor to prevent instantiation of the Scheduler class.\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedDelaySchedule(long,long,java.util.concurrent.TimeUnit)": "/**\n* Creates a Scheduler with fixed delay; validates inputs.\n* @param initialDelay initial delay before first execution\n* @param delay delay between subsequent executions\n* @param unit time unit for delays\n* @return Scheduler instance for scheduling tasks\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedRateSchedule(long,long,java.util.concurrent.TimeUnit)": "/**\n* Creates a fixed-rate schedule for task execution.\n* @param initialDelay delay before the first execution\n* @param period interval between successive executions\n* @param unit time unit for delay and period\n* @return Scheduler for scheduling tasks\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedDelaySchedule(java.time.Duration,java.time.Duration)": "/**\n* Creates a Scheduler with fixed delays using specified durations.\n* @param initialDelay initial delay before first execution\n* @param delay delay between subsequent executions\n* @return Scheduler instance for scheduling tasks\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedRateSchedule(java.time.Duration,java.time.Duration)": "/**\n* Creates a fixed-rate schedule for task execution.\n* @param initialDelay delay before the first execution\n* @param period interval between successive executions\n* @return Scheduler for scheduling tasks\n*/"
    },
    "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate": {
        "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate:doStop()": "/**\n* Stops the running task and shuts down the executor service if in STOPPING state.\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate:doStart()": "/**\n* Initializes and starts the executor service with a scheduled task.\n* @throws Throwable if startup fails\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate:toString()": "/**\n* Returns string representation of the scheduled service's current state.\n* @return formatted string of service name and state\n*/"
    },
    "com.google.common.util.concurrent.AbstractService$1": {
        "com.google.common.util.concurrent.AbstractService$1:<init>()": "/**\n* Protected constructor for AbstractService class.\n*/"
    },
    "com.google.common.util.concurrent.AbstractService$2": {
        "com.google.common.util.concurrent.AbstractService$2:<init>()": "/**\n* Protected constructor for AbstractService class.\n*/"
    },
    "com.google.common.util.concurrent.AbstractService$3": {
        "com.google.common.util.concurrent.AbstractService$3:toString()": "/**\n* Returns a string representation of the object with its class name and state.\n* @return formatted string of class name and state\n*/"
    },
    "com.google.common.util.concurrent.AbstractService$4": {
        "com.google.common.util.concurrent.AbstractService$4:toString()": "/**\n* Returns a string representation of the object's class and its state.\n* @return formatted string with class name and state\n*/"
    },
    "com.google.common.util.concurrent.AbstractService$5": {
        "com.google.common.util.concurrent.AbstractService$5:toString()": "/**\n* Returns a string representation of the object's class name and its state.\n* @return formatted string with class name and state\n*/"
    },
    "com.google.common.util.concurrent.AbstractService": {
        "com.google.common.util.concurrent.AbstractService:terminatedEvent(com.google.common.util.concurrent.Service$State)": "/**\n* Creates a terminated event for listeners with the given state.\n* @param from the state from which the event is triggered\n* @return an Event object for listener handling\n*/",
        "com.google.common.util.concurrent.AbstractService:stoppingEvent(com.google.common.util.concurrent.Service$State)": "/**\n* Creates an event for stopping listeners with the given state.\n* @param from the state from which the event is triggered\n* @return ListenerCallQueue.Event for stopping listeners\n*/",
        "com.google.common.util.concurrent.AbstractService:doCancelStart()": "/**\n* Cancels the start process in a subclass implementation.\n*/",
        "com.google.common.util.concurrent.AbstractService:state()": "/**\n* Retrieves the current state from the snapshot.\n* @return current State from externalState() method\n*/",
        "com.google.common.util.concurrent.AbstractService:failureCause()": "/**\n* Returns the cause of failure from the snapshot.\n* @return Throwable cause of failure, never null if state is FAILED\n*/",
        "com.google.common.util.concurrent.AbstractService:awaitRunning(java.time.Duration)": "/**\n* Awaits a running state with a specified timeout.\n* @param timeout maximum duration to wait before timeout\n* @throws TimeoutException if the wait exceeds the timeout\n*/",
        "com.google.common.util.concurrent.AbstractService:awaitTerminated(java.time.Duration)": "/**\n* Awaits termination of the service with a specified timeout.\n* @param timeout maximum duration to wait before timing out\n* @throws TimeoutException if the wait exceeds the timeout\n*/",
        "com.google.common.util.concurrent.AbstractService:isRunning()": "/**\n* Checks if the current state is RUNNING.\n* @return true if running, false otherwise\n*/",
        "com.google.common.util.concurrent.AbstractService:toString()": "/**\n* Returns a string representation of the object with its class name and state.\n* @return formatted string containing class name and state\n*/",
        "com.google.common.util.concurrent.AbstractService:dispatchListenerEvents()": "/**\n* Dispatches events to listeners if not occupied by current thread.\n*/",
        "com.google.common.util.concurrent.AbstractService:<init>()": "/**\n* Initializes an instance of AbstractService.\n*/",
        "com.google.common.util.concurrent.AbstractService:checkCurrentState(com.google.common.util.concurrent.Service$State)": "/**\n* Validates the current state against an expected state.\n* @param expected the expected State to compare with the actual state\n*/",
        "com.google.common.util.concurrent.AbstractService:enqueueStartingEvent()": "/**\n* Enqueues the starting event for processing.\n*/",
        "com.google.common.util.concurrent.AbstractService:enqueueRunningEvent()": "/**** Enqueues a running event for processing. */",
        "com.google.common.util.concurrent.AbstractService:enqueueStoppingEvent(com.google.common.util.concurrent.Service$State)": "/**** Enqueues stopping event based on the current state. \n* @param from current state of the process \n*/",
        "com.google.common.util.concurrent.AbstractService:enqueueTerminatedEvent(com.google.common.util.concurrent.Service$State)": "/**\n* Enqueues termination events based on the current state.\n* @param from the current state of the process\n*/",
        "com.google.common.util.concurrent.AbstractService:enqueueFailedEvent(com.google.common.util.concurrent.Service$State,java.lang.Throwable)": "/**\n* Enqueues a failed event with state and cause.\n* @param from the state before the failure\n* @param cause the Throwable that caused the failure\n*/",
        "com.google.common.util.concurrent.AbstractService:addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor)": "/**\n* Adds a listener with an executor to the listener queue.\n* @param listener the event listener, must not be null\n* @param executor the executor for running events, must not be null\n*/",
        "com.google.common.util.concurrent.AbstractService:notifyStopped()": "/**\n* Notifies service has stopped, updating state and dispatching events.\n* @throws IllegalStateException if called in invalid state\n*/",
        "com.google.common.util.concurrent.AbstractService:notifyFailed(java.lang.Throwable)": "/**\n* Notifies of a failure by updating state and dispatching events.\n* @param cause the Throwable that caused the failure\n*/",
        "com.google.common.util.concurrent.AbstractService:startAsync()": "/**\n* Starts the service asynchronously and returns the service instance.\n* @return Service instance after starting\n*/",
        "com.google.common.util.concurrent.AbstractService:stopAsync()": "/**\n* Stops the service asynchronously and handles state transitions.\n* @return Service instance for method chaining\n*/",
        "com.google.common.util.concurrent.AbstractService:notifyStarted()": "/**\n* Notifies that the service has started and updates its state accordingly.\n* @throws IllegalStateException if service is not in STARTING state\n*/",
        "com.google.common.util.concurrent.AbstractService:awaitRunning()": "/**\n* Waits until the running state is reached.\n* @param hasReachedRunning condition to check for running state\n*/",
        "com.google.common.util.concurrent.AbstractService:awaitTerminated()": "/**\n* Awaits termination state, blocking until stopped.\n* @param isStopped condition to check for termination\n*/",
        "com.google.common.util.concurrent.AbstractService:awaitRunning(long,java.util.concurrent.TimeUnit)": "/**** Waits for the system to reach the RUNNING state within a timeout period. \n* @param timeout maximum wait time \n* @param unit time unit of the timeout \n* @throws TimeoutException if waiting exceeds the timeout \n*/",
        "com.google.common.util.concurrent.AbstractService:awaitTerminated(long,java.util.concurrent.TimeUnit)": "/**\n* Waits for termination with a timeout.\n* @param timeout maximum wait time\n* @param unit time unit for the timeout\n* @throws TimeoutException if the wait times out\n*/"
    },
    "com.google.common.util.concurrent.Monitor": {
        "com.google.common.util.concurrent.Monitor:enterIf(com.google.common.util.concurrent.Monitor$Guard)": "/**\n* Checks if the guard condition is satisfied and locks accordingly.\n* @param guard the Guard to evaluate\n* @return true if the guard condition is satisfied, false otherwise\n*/",
        "com.google.common.util.concurrent.Monitor:enter()": "/**\n* Acquires a lock for thread synchronization.\n*/",
        "com.google.common.util.concurrent.Monitor:isOccupiedByCurrentThread()": "/**\n* Checks if the current thread holds the lock.\n* @return true if the lock is held by this thread, false otherwise\n*/",
        "com.google.common.util.concurrent.Monitor:<init>(boolean)": "/**\n* Initializes a Monitor with specified fairness for the lock.\n* @param fair true for fair locking, false for unfair\n*/",
        "com.google.common.util.concurrent.Monitor:remainingNanos(long,long)": "/**\n* Calculates remaining nanoseconds until timeout.\n* @param startTime start time in nanoseconds\n* @param timeoutNanos total timeout duration in nanoseconds\n* @return remaining nanoseconds or 0 if timeout has expired\n*/",
        "com.google.common.util.concurrent.Monitor:enterInterruptibly()": "/**\n* Acquires the lock interruptibly, allowing interruption.\n* @throws InterruptedException if the thread is interrupted while waiting\n*/",
        "com.google.common.util.concurrent.Monitor:enterInterruptibly(long,java.util.concurrent.TimeUnit)": "/**\n* Attempts to acquire the lock within the specified time.\n* @param time duration to wait for the lock\n* @param unit time unit of the duration\n* @return true if the lock was acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.Monitor:tryEnter()": "/**\n* Attempts to acquire the lock without blocking.\n* @return true if the lock was acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.Monitor:initNanoTime(long)": "/**\n* Initializes nano time; returns current time or 1L if system time is zero.\n* @param timeoutNanos timeout duration in nanoseconds\n* @return current nano time or 1L if current time is zero\n*/",
        "com.google.common.util.concurrent.Monitor:enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard)": "/**\n* Attempts to enter a guard interruptibly.\n* @param guard the Guard to check satisfaction\n* @return true if guard is satisfied, false otherwise\n* @throws InterruptedException if the thread is interrupted while waiting\n*/",
        "com.google.common.util.concurrent.Monitor:enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)": "/**\n* Attempts to enter a guard interruptibly within a specified time.\n* @param guard the Guard object to check satisfaction\n* @param time the time to wait before giving up\n* @param unit the time unit of the wait time\n* @return true if guard is satisfied, false otherwise\n*/",
        "com.google.common.util.concurrent.Monitor:tryEnterIf(com.google.common.util.concurrent.Monitor$Guard)": "/**\n* Attempts to enter a guard if conditions are satisfied.\n* @param guard the Guard object to check conditions\n* @return true if conditions are met, false otherwise\n*/",
        "com.google.common.util.concurrent.Monitor:isOccupied()": "/**\n* Checks if the resource is currently occupied.\n* @return true if locked, false if available\n*/",
        "com.google.common.util.concurrent.Monitor:getOccupiedDepth()": "/**\n* Returns the current hold count of the lock.\n* @return the number of holds on the lock\n*/",
        "com.google.common.util.concurrent.Monitor:getQueueLength()": "/**\n* Returns the length of the queue associated with the lock.\n* @return int representing the number of threads in the queue\n*/",
        "com.google.common.util.concurrent.Monitor:hasQueuedThreads()": "/**\n* Checks if there are threads waiting to acquire the lock.\n* @return true if queued threads exist, false otherwise\n*/",
        "com.google.common.util.concurrent.Monitor:hasQueuedThread(java.lang.Thread)": "/**\n* Checks if a specific thread is queued for the lock.\n* @param thread the thread to check\n* @return true if the thread is queued, false otherwise\n*/",
        "com.google.common.util.concurrent.Monitor:getWaitQueueLength(com.google.common.util.concurrent.Monitor$Guard)": "/**\n* Retrieves the length of the wait queue for a given guard.\n* @param guard the Guard object to check\n* @return the number of waiters in the queue\n*/",
        "com.google.common.util.concurrent.Monitor:signalAllWaiters()": "/**\n* Signals all waiting threads for each active guard.\n*/",
        "com.google.common.util.concurrent.Monitor:beginWaitingFor(com.google.common.util.concurrent.Monitor$Guard)": "/**\n* Initiates waiting for a guard, managing active guards list.\n* @param guard the guard to wait for\n*/",
        "com.google.common.util.concurrent.Monitor:endWaitingFor(com.google.common.util.concurrent.Monitor$Guard)": "/**\n* Ends waiting for a guard and unlinks it if no waiters remain.\n* @param guard the Guard object to be processed\n*/",
        "com.google.common.util.concurrent.Monitor:newGuard(java.util.function.BooleanSupplier)": "/**\n* Creates a new Guard instance based on the satisfaction condition.\n* @param isSatisfied condition to evaluate guard status\n* @return a new Guard object\n*/",
        "com.google.common.util.concurrent.Monitor:<init>()": "/**\n* Constructs a Monitor with unfair locking by default.\n*/",
        "com.google.common.util.concurrent.Monitor:enterInterruptibly(java.time.Duration)": "/**\n* Acquires lock interruptibly within specified duration.\n* @param time duration to wait for the lock\n* @return true if lock acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.Monitor:enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)": "/**\n* Attempts to enter a guard interruptibly within a specified duration.\n* @param guard the Guard object to check satisfaction\n* @param time the duration to wait before giving up\n* @return true if guard is satisfied, false otherwise\n*/",
        "com.google.common.util.concurrent.Monitor:hasWaiters(com.google.common.util.concurrent.Monitor$Guard)": "/**\n* Checks if there are waiters for the specified guard.\n* @param guard the Guard object to check\n* @return true if waiters exist, false otherwise\n*/",
        "com.google.common.util.concurrent.Monitor:isSatisfied(com.google.common.util.concurrent.Monitor$Guard)": "/**\n* Checks if the guard condition is satisfied and signals waiters on exception.\n* @param guard the Guard to evaluate\n* @return true if satisfied, false otherwise\n*/",
        "com.google.common.util.concurrent.Monitor:toSafeNanos(long,java.util.concurrent.TimeUnit)": "/**\n* Converts time to nanoseconds and constrains it to a safe range.\n* @param time duration to convert\n* @param unit time unit of the duration\n* @return constrained duration in nanoseconds\n*/",
        "com.google.common.util.concurrent.Monitor:signalNextWaiter()": "/**\n* Signals the next waiter if any guard condition is satisfied.\n*/",
        "com.google.common.util.concurrent.Monitor:enter(long,java.util.concurrent.TimeUnit)": "/**\n* Attempts to acquire a lock within a specified time duration.\n* @param time duration to wait for the lock\n* @param unit time unit of the duration\n* @return true if the lock was acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.Monitor:leave()": "/**\n* Releases the lock and signals next waiter if lock was held only once.\n*/",
        "com.google.common.util.concurrent.Monitor:await(com.google.common.util.concurrent.Monitor$Guard,boolean)": "/**\n* Waits for a guard condition to be satisfied, optionally signaling next waiter first.\n* @param guard the guard to wait for\n* @param signalBeforeWaiting indicates if the next waiter should be signaled before waiting\n*/",
        "com.google.common.util.concurrent.Monitor:awaitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,boolean)": "/**\n* Awaits a guard condition, optionally signaling before waiting.\n* @param guard the guard to wait for\n* @param signalBeforeWaiting if true, signals next waiter before waiting\n*/",
        "com.google.common.util.concurrent.Monitor:awaitNanos(com.google.common.util.concurrent.Monitor$Guard,long,boolean)": "/**\n* Awaits a condition with a timeout, signaling before waiting if specified.\n* @param guard the condition guard to wait on\n* @param nanos timeout duration in nanoseconds\n* @param signalBeforeWaiting whether to signal before waiting\n* @return true if condition satisfied, false if timed out\n*/",
        "com.google.common.util.concurrent.Monitor:enter(java.time.Duration)": "/**\n* Attempts to acquire a lock within a specified duration.\n* @param time duration to wait for the lock\n* @return true if the lock was acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.Monitor:enterIf(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)": "/**\n* Acquires a lock if guard condition is satisfied within time limit.\n* @param guard condition to check before locking\n* @param time duration to wait for the lock\n* @param unit time unit of the duration\n* @return true if lock acquired and guard satisfied, false otherwise\n*/",
        "com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard)": "/**\n* Enters a guard condition, waiting if not satisfied.\n* @param guard the guard to check and wait on\n* @throws InterruptedException if interrupted while waiting\n*/",
        "com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard)": "/**\n* Waits for a guard condition, ensuring the monitor is held by the current thread.\n* @param guard the guard to wait for\n* @throws InterruptedException if the waiting thread is interrupted\n*/",
        "com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard)": "/**\n* Enters a guard condition uninterruptibly, waiting if not satisfied.\n* @param guard the guard to check and wait on\n*/",
        "com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard)": "/**\n* Waits for a guard condition uninterruptibly.\n* @param guard the guard to wait for\n*/",
        "com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)": "/**\n* Enters a guard condition with a timeout.\n* @param guard the condition to wait on\n* @param time duration to wait\n* @param unit time unit of the duration\n* @return true if condition satisfied, false if timed out\n*/",
        "com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)": "/**\n* Enters a guard when uninterruptibly, waiting with a timeout.\n* @param guard the condition guard to wait on\n* @param time duration to wait\n* @param unit time unit of the duration\n* @return true if condition satisfied, false if timed out\n*/",
        "com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)": "/**\n* Waits for a condition to be satisfied or times out.\n* @param guard the condition guard to wait on\n* @param time duration to wait\n* @param unit time unit of the duration\n* @return true if condition satisfied, false if timed out\n*/",
        "com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)": "/**\n* Waits for a condition to be satisfied or timeout.\n* @param guard the condition to wait on\n* @param time duration to wait\n* @param unit time unit of the duration\n* @return true if condition satisfied, false if timed out\n*/",
        "com.google.common.util.concurrent.Monitor:enterIf(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)": "/**\n* Attempts to acquire a lock if guard condition is met within specified duration.\n* @param guard condition to check before locking\n* @param time duration to wait for the lock\n* @return true if lock acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)": "/**\n* Enters a guard condition with a timeout duration.\n* @param guard the condition to wait on\n* @param time duration to wait before timing out\n* @return true if condition satisfied, false if timed out\n*/",
        "com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)": "/**\n* Enters a guard uninterruptibly for a specified duration.\n* @param guard the condition guard to wait on\n* @param time duration to wait\n* @return true if condition satisfied, false if timed out\n*/",
        "com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)": "/**\n* Waits for a condition to be satisfied within a specified duration.\n* @param guard the condition to wait on\n* @param time duration to wait before timing out\n* @return true if condition satisfied, false if timed out\n*/",
        "com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)": "/**\n* Waits for a condition to be satisfied or timeout.\n* @param guard the condition to wait on\n* @param time duration to wait\n* @return true if condition satisfied, false if timed out\n*/"
    },
    "com.google.common.util.concurrent.AbstractService$StateSnapshot": {
        "com.google.common.util.concurrent.AbstractService$StateSnapshot:externalState()": "/**\n* Retrieves the current state, adjusting for shutdown conditions.\n* @return current State, or STOPPING if conditions are met\n*/",
        "com.google.common.util.concurrent.AbstractService$StateSnapshot:<init>(com.google.common.util.concurrent.Service$State,boolean,java.lang.Throwable)": "/**\n* Initializes StateSnapshot with internal state and failure condition.\n* @param internalState current state of the system\n* @param shutdownWhenStartupFinishes flag for shutdown behavior\n* @param failure optional error cause if state is FAILED\n*/",
        "com.google.common.util.concurrent.AbstractService$StateSnapshot:failureCause()": "/**\n* Retrieves the cause of failure if the service is in a FAILED state.\n* @return Throwable cause of failure, never null if state is FAILED\n*/",
        "com.google.common.util.concurrent.AbstractService$StateSnapshot:<init>(com.google.common.util.concurrent.Service$State)": "/**\n* Constructs StateSnapshot with given internal state, defaults for shutdown and failure.\n* @param internalState current state of the system\n*/"
    },
    "com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture": {
        "com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture:setResult(com.google.common.util.concurrent.ListenableFuture)": "/**\n* Sets the result of the future computation.\n* @param result the future result to be set\n*/",
        "com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture:doTransform(com.google.common.util.concurrent.AsyncFunction,java.lang.Object)": "/**\n* Transforms input using an AsyncFunction and ensures output is not null.\n* @param function the asynchronous function to apply\n* @param input the input for the function\n* @return a ListenableFuture representing the transformation result\n*/",
        "com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction)": "/**\n* Initializes AsyncTransformFuture with input future and transformation function.\n* @param inputFuture future to transform\n* @param function transformation function to apply\n*/"
    },
    "com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture": {
        "com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture:doTransform(com.google.common.base.Function,java.lang.Object)": "/**\n* Transforms input using the provided function.\n* @param function transformation function\n* @param input value to transform\n* @return transformed output\n*/",
        "com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture:setResult(java.lang.Object)": "/**\n* Sets the result value.\n* @param result the value to be set, can be null\n*/",
        "com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)": "/**\n* Constructs a TransformFuture with input future and transformation function.\n* @param inputFuture future to transform\n* @param function transformation function to apply\n*/"
    },
    "com.google.common.util.concurrent.AbstractTransformFuture": {
        "com.google.common.util.concurrent.AbstractTransformFuture:afterDone()": "/**\n* Cleans up resources after task completion and propagates cancellation if needed.\n*/",
        "com.google.common.util.concurrent.AbstractTransformFuture:pendingToString()": "/**\n* Converts pending state to string representation.\n* @return formatted string of input future and function or null if none exist\n*/",
        "com.google.common.util.concurrent.AbstractTransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Object)": "/**\n* Initializes AbstractTransformFuture with input future and transformation function.\n* @param inputFuture future to transform\n* @param function transformation function to apply\n*/",
        "com.google.common.util.concurrent.AbstractTransformFuture:run()": "/**\n* Executes the transformation function on the input future result.\n* Handles exceptions and cancellation states.\n*/",
        "com.google.common.util.concurrent.AbstractTransformFuture:create(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)": "/**\n* Transforms input future using a function and returns the resulting future.\n* @param input future to transform\n* @param function transformation function\n* @param executor executor for handling listener execution\n* @return transformed future\n*/"
    },
    "com.google.common.util.concurrent.AggregateFutureState": {
        "com.google.common.util.concurrent.AggregateFutureState:<init>(int)": "/**\n* Initializes AggregateFutureState with remaining futures count.\n* @param remainingFutures count of futures left to process\n*/",
        "com.google.common.util.concurrent.AggregateFutureState:decrementRemainingAndGet()": "/**\n* Decrements the remaining count and returns the updated value.\n* @return updated remaining count after decrement\n*/",
        "com.google.common.util.concurrent.AggregateFutureState:getOrInitSeenExceptions()": "/**\n* Initializes or retrieves a thread-safe set of seen exceptions.\n* @return Set of Throwable representing seen exceptions\n*/"
    },
    "com.google.common.util.concurrent.AggregateFuture": {
        "com.google.common.util.concurrent.AggregateFuture:pendingToString()": "/**\n* Returns string representation of pending futures or calls super method if none exist.\n* @return String representation of futures or null if futures are not set\n*/",
        "com.google.common.util.concurrent.AggregateFuture:addCausalChain(java.util.Set,java.lang.Throwable)": "/**\n* Adds throwable causes to a set; returns false if any cause is already seen.\n* @param seen set of previously seen throwables\n* @param param throwable to analyze for causes\n* @return true if all causes are new, false if any cause was seen before\n*/",
        "com.google.common.util.concurrent.AggregateFuture:log(java.lang.Throwable)": "/**\n* Logs throwable details, distinguishing between Error and multiple failures.\n* @param throwable the Throwable to log\n*/",
        "com.google.common.util.concurrent.AggregateFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason)": "/**\n* Releases resources by nullifying futures based on the provided reason.\n* @param reason the reason for releasing resources\n*/",
        "com.google.common.util.concurrent.AggregateFuture:init()": "/**\n* Initializes futures and sets listeners based on completion requirements.\n* @param futures list of futures to track\n*/",
        "com.google.common.util.concurrent.AggregateFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,boolean)": "/**\n* Initializes AggregateFuture with futures and success criteria.\n* @param futures collection of futures to aggregate\n* @param allMustSucceed true if all futures must succeed\n* @param collectsValues true if values should be collected\n*/",
        "com.google.common.util.concurrent.AggregateFuture:addInitialException(java.util.Set)": "/**\n* Adds initial exception to seen set if not cancelled.\n* @param seen set of previously seen throwables\n*/",
        "com.google.common.util.concurrent.AggregateFuture:handleException(java.lang.Throwable)": "/**\n* Handles exceptions by logging and managing causal chains.\n* @param throwable the exception to process\n*/",
        "com.google.common.util.concurrent.AggregateFuture:afterDone()": "/**\n* Finalizes task completion and releases associated resources.\n* @param OUTPUT_FUTURE_DONE reason for resource release\n*/",
        "com.google.common.util.concurrent.AggregateFuture:collectValueFromNonCancelledFuture(int,java.util.concurrent.Future)": "/**\n* Collects value from a completed Future; handles exceptions if any occur.\n* @param index position of the value to collect\n* @param future the Future containing the value\n*/",
        "com.google.common.util.concurrent.AggregateFuture:processCompleted(com.google.common.collect.ImmutableCollection)": "/**\n* Processes completed futures, collects values, and releases resources.\n* @param futuresIfNeedToCollectAtCompletion collection of futures to process\n*/",
        "com.google.common.util.concurrent.AggregateFuture:decrementCountAndMaybeComplete(com.google.common.collect.ImmutableCollection)": "/**\n* Decrements the count of futures and completes if none remain.\n* @param futuresIfNeedToCollectAtCompletion futures to process upon completion\n*/"
    },
    "com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper": {
        "com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper:compareAndSetSeenExceptions(com.google.common.util.concurrent.AggregateFutureState,java.util.Set,java.util.Set)": "/**\n* Updates seen exceptions in the given state if it matches the expected set.\n* @param state current aggregate future state\n* @param expect expected set of exceptions\n* @param update new set of exceptions to set\n*/",
        "com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper:decrementAndGetRemainingCount(com.google.common.util.concurrent.AggregateFutureState)": "/**\n* Decrements remaining count and returns the updated value.\n* @param state the current AggregateFutureState\n* @return updated remaining count after decrement\n*/"
    },
    "com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper": {
        "com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper:compareAndSetSeenExceptions(com.google.common.util.concurrent.AggregateFutureState,java.util.Set,java.util.Set)": "/**\n* Updates seen exceptions if the current value matches the expected set.\n* @param state the future state to update\n* @param expect the expected set of exceptions\n* @param update the new set of exceptions to set\n*/",
        "com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper:decrementAndGetRemainingCount(com.google.common.util.concurrent.AggregateFutureState)": "/**\n* Decrements remaining count in a synchronized manner.\n* @param state the AggregateFutureState object\n* @return the updated remaining count after decrement\n*/"
    },
    "com.google.common.util.concurrent.AtomicDouble": {
        "com.google.common.util.concurrent.AtomicDouble:<init>(double)": "/**\n* Initializes AtomicDouble with a given initial value.\n* @param initialValue the starting value for the AtomicDouble\n*/",
        "com.google.common.util.concurrent.AtomicDouble:<init>()": "/**\n* Constructs an AtomicDouble instance, asserting 0.0 representation.\n*/",
        "com.google.common.util.concurrent.AtomicDouble:get()": "/**\n* Converts stored long bits to a double value.\n* @return double representation of the stored long bits\n*/",
        "com.google.common.util.concurrent.AtomicDouble:set(double)": "/**\n* Sets the internal value to the raw bits of the given double.\n* @param newValue the double value to set\n*/",
        "com.google.common.util.concurrent.AtomicDouble:lazySet(double)": "/**\n* Updates the value lazily with a new double.\n* @param newValue the new double value to set\n*/",
        "com.google.common.util.concurrent.AtomicDouble:getAndSet(double)": "/**\n* Updates value and returns the previous value.\n* @param newValue the new value to set\n* @return the previous value before the update\n*/",
        "com.google.common.util.concurrent.AtomicDouble:compareAndSet(double,double)": "/**\n* Atomically sets the value if it matches the expected value.\n* @param expect the expected current value\n* @param update the new value to set if matched\n* @return true if successful, false otherwise\n*/",
        "com.google.common.util.concurrent.AtomicDouble:weakCompareAndSet(double,double)": "/**\n* Atomically sets the value if it matches the expected value.\n* @param expect the expected current value\n* @param update the new value to set if expected matches\n* @return true if successful, false otherwise\n*/",
        "com.google.common.util.concurrent.AtomicDouble:getAndUpdate(java.util.function.DoubleUnaryOperator)": "/**\n* Updates value using a provided function and returns the previous value.\n* @param updateFunction function to compute the new value\n* @return previous value before the update\n*/",
        "com.google.common.util.concurrent.AtomicDouble:updateAndGet(java.util.function.DoubleUnaryOperator)": "/**\n* Updates the current value using the provided function and returns the new value.\n* @param updateFunction function to compute the new value\n* @return updated double value after applying the function\n*/",
        "com.google.common.util.concurrent.AtomicDouble:toString()": "/**\n* Returns string representation of the stored double value.\n* @return string format of the double value\n*/",
        "com.google.common.util.concurrent.AtomicDouble:intValue()": "/**\n* Converts stored long bits to an int value.\n* @return int representation of the stored long bits\n*/",
        "com.google.common.util.concurrent.AtomicDouble:longValue()": "/**\n* Converts the stored value to a long.\n* @return long representation of the stored double value\n*/",
        "com.google.common.util.concurrent.AtomicDouble:floatValue()": "/**\n* Returns the float representation of the stored long bits.\n* @return float value converted from long bits\n*/",
        "com.google.common.util.concurrent.AtomicDouble:doubleValue()": "/**\n* Returns the double representation of stored long bits.\n* @return double value from stored long bits\n*/",
        "com.google.common.util.concurrent.AtomicDouble:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object, writing its state and a double value.\n* @param s ObjectOutputStream to write the object data\n* @throws IOException if an I/O error occurs during serialization\n*/",
        "com.google.common.util.concurrent.AtomicDouble:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from input stream.\n* @param s input stream to read object data\n*/",
        "com.google.common.util.concurrent.AtomicDouble:getAndAccumulate(double,java.util.function.DoubleBinaryOperator)": "/**\n* Accumulates a value using a binary operator.\n* @param x value to accumulate\n* @param accumulatorFunction function to combine values\n* @return updated accumulated value\n*/",
        "com.google.common.util.concurrent.AtomicDouble:accumulateAndGet(double,java.util.function.DoubleBinaryOperator)": "/**\n* Accumulates a value using a binary operator.\n* @param x value to accumulate\n* @param accumulatorFunction function to combine values\n* @return updated accumulated double value\n*/",
        "com.google.common.util.concurrent.AtomicDouble:getAndAdd(double)": "/**\n* Adds delta to the current value and returns the updated value.\n* @param delta value to add\n* @return updated value after addition\n*/",
        "com.google.common.util.concurrent.AtomicDouble:addAndGet(double)": "/**\n* Adds delta to current value and returns updated result.\n* @param delta value to add\n* @return updated accumulated double value\n*/"
    },
    "com.google.common.util.concurrent.AtomicDoubleArray": {
        "com.google.common.util.concurrent.AtomicDoubleArray:<init>(int)": "/**\n* Initializes an AtomicDoubleArray with the specified length.\n* @param length the number of elements in the array\n*/",
        "com.google.common.util.concurrent.AtomicDoubleArray:<init>(double[])": "/**\n* Initializes AtomicDoubleArray with given double values.\n* @param array input array of doubles to convert\n*/",
        "com.google.common.util.concurrent.AtomicDoubleArray:length()": "/**\n* Returns the length of the longs array.\n* @return the number of elements in the longs array\n*/",
        "com.google.common.util.concurrent.AtomicDoubleArray:get(int)": "/**\n* Retrieves a double value at the specified index.\n* @param i index of the double in the list\n* @return double value at the index\n*/",
        "com.google.common.util.concurrent.AtomicDoubleArray:set(int,double)": "/**\n* Sets the value at index i to newValue as a raw long bit representation.\n* @param i index to update\n* @param newValue value to be set\n*/",
        "com.google.common.util.concurrent.AtomicDoubleArray:lazySet(int,double)": "/**\n* Sets a double value at the specified index using lazy set semantics.\n* @param i index to set the value\n* @param newValue the double value to set\n*/",
        "com.google.common.util.concurrent.AtomicDoubleArray:getAndSet(int,double)": "/**\n* Updates value at index and returns the previous value.\n* @param i index to update\n* @param newValue new value to set\n* @return previous value at the index\n*/",
        "com.google.common.util.concurrent.AtomicDoubleArray:compareAndSet(int,double,double)": "/**\n* Atomically sets the value if it equals the expected value.\n* @param i index to update, @param expect expected value, @param update new value to set\n* @return true if the update was successful, false otherwise\n*/",
        "com.google.common.util.concurrent.AtomicDoubleArray:weakCompareAndSet(int,double,double)": "/**\n* Performs a weak compare-and-set operation on a double value.\n* @param i index for the operation\n* @param expect expected current value\n* @param update new value to set if expected matches\n* @return true if successful, false otherwise\n*/",
        "com.google.common.util.concurrent.AtomicDoubleArray:getAndUpdate(int,java.util.function.DoubleUnaryOperator)": "/**\n* Updates a value at index i using updaterFunction and returns the old value.\n* @param i index to update\n* @param updaterFunction function to compute the new value\n* @return the old value before update\n*/",
        "com.google.common.util.concurrent.AtomicDoubleArray:updateAndGet(int,java.util.function.DoubleUnaryOperator)": "/**\n* Updates value at index i using updaterFunction and returns the new value.\n* @param i index to update\n* @param updaterFunction function to compute new value\n* @return updated value after applying the function\n*/",
        "com.google.common.util.concurrent.AtomicDoubleArray:toString()": "/**\n* Converts longs array to a formatted string representation.\n* @return formatted string of long values in brackets\n*/",
        "com.google.common.util.concurrent.AtomicDoubleArray:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object, including its array length and elements.\n* @param s output stream for serialization\n*/",
        "com.google.common.util.concurrent.AtomicDoubleArray:getAndAccumulate(int,double,java.util.function.DoubleBinaryOperator)": "/**\n* Accumulates a value at index i using the accumulatorFunction.\n* @param i index to update\n* @param x value to accumulate\n* @param accumulatorFunction function to compute new value\n* @return updated value at index i\n*/",
        "com.google.common.util.concurrent.AtomicDoubleArray:accumulateAndGet(int,double,java.util.function.DoubleBinaryOperator)": "/**\n* Accumulates value x at index i using the accumulatorFunction.\n* @param i index to update\n* @param x value to accumulate\n* @param accumulatorFunction function to combine values\n* @return updated accumulated value\n*/",
        "com.google.common.util.concurrent.AtomicDoubleArray:getAndAdd(int,double)": "/**\n* Adds delta to the value at index i and returns the updated value.\n* @param i index to update\n* @param delta value to add\n* @return updated value at index i\n*/",
        "com.google.common.util.concurrent.AtomicDoubleArray:addAndGet(int,double)": "/**\n* Adds delta to value at index i and returns updated value.\n* @param i index to update\n* @param delta value to add\n* @return updated value after addition\n*/",
        "com.google.common.util.concurrent.AtomicDoubleArray:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state and populates AtomicLongArray from input stream.\n* @param s input stream for object serialization\n*/"
    },
    "com.google.common.util.concurrent.AtomicLongMap": {
        "com.google.common.util.concurrent.AtomicLongMap:get(java.lang.Object)": "/**\n* Retrieves the value associated with the given key or 0 if not present.\n* @param key the key to look up\n* @return the associated long value or 0 if key is absent\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:remove(java.lang.Object)": "/**\n* Removes a key from the map and returns its value or 0 if not found.\n* @param key the key to remove\n* @return the removed value or 0 if the key was absent\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:remove(java.lang.Object,long)": "/**\n* Removes the entry for the specified key and value from the map.\n* @param key the key to remove\n* @param value the value associated with the key\n* @return true if the entry was removed, false otherwise\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:removeAllZeros()": "/**\n* Removes all entries with value zero from the map.\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:sum()": "/**\n* Computes the sum of all values in the map.\n* @return total sum as a long\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:createAsMap()": "/**\n* Returns an unmodifiable view of the internal map.\n* @return unmodifiable Map of key-value pairs\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:containsKey(java.lang.Object)": "/**\n* Checks if the map contains the specified key.\n* @param key the key to check for presence in the map\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:size()": "/**\n* Returns the number of entries in the map.\n* @return the size of the map as an integer\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:isEmpty()": "/**\n* Checks if the map is empty.\n* @return true if the map has no elements, false otherwise\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:clear()": "/**\n* Clears all entries from the map.\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:toString()": "/**\n* Returns the string representation of the map.\n* @return string representation of the map object\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:putIfAbsent(java.lang.Object,long)": "/**\n* Inserts newValue if key is absent or its value is zero.\n* @param key the key to check and potentially insert\n* @param newValue the value to insert if key is absent or zero\n* @return 0 if inserted, else the existing value\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:<init>(java.util.concurrent.ConcurrentHashMap)": "/**\n* Initializes AtomicLongMap with a non-null ConcurrentHashMap.\n* @param map the ConcurrentHashMap to be used\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:updateAndGet(java.lang.Object,java.util.function.LongUnaryOperator)": "/**\n* Updates value by key using updaterFunction and returns the new value.\n* @param key the key to update\n* @param updaterFunction function to update the value\n* @return updated long value\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:getAndUpdate(java.lang.Object,java.util.function.LongUnaryOperator)": "/**\n* Updates value by key using a provided function and returns the old value.\n* @param key the key to update\n* @param updaterFunction function to compute new value\n* @return the previous value associated with the key\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:removeIfZero(java.lang.Object)": "/**\n* Removes the entry for the specified key if its value is zero.\n* @param key the key to check and remove\n* @return true if the entry was removed, false otherwise\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:asMap()": "/**\n* Returns a map of key-value pairs, creating it if not already initialized.\n* @return unmodifiable Map of key-value pairs\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:replace(java.lang.Object,long,long)": "/**\n* Replaces value for key if expectedOldValue matches or inserts newValue if absent.\n* @param key the key to replace or insert\n* @param expectedOldValue the expected current value for validation\n* @param newValue the new value to set if conditions are met\n* @return true if replaced or inserted, false otherwise\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:create()": "/**\n* Creates a new AtomicLongMap instance.\n* @return a new AtomicLongMap with a ConcurrentHashMap backing\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:accumulateAndGet(java.lang.Object,long,java.util.function.LongBinaryOperator)": "/**\n* Accumulates a value using the provided key and function.\n* @param key the key for accumulation\n* @param x the value to accumulate\n* @param accumulatorFunction function to combine values\n* @return the updated accumulated long value\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:getAndAccumulate(java.lang.Object,long,java.util.function.LongBinaryOperator)": "/**\n* Accumulates a value using a binary operator and updates the key's value.\n* @param key the key to update\n* @param x the value to accumulate\n* @param accumulatorFunction function to combine old and new values\n* @return the previous value associated with the key\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:put(java.lang.Object,long)": "/**\n* Updates the value associated with the key and returns the old value.\n* @param key the key to update\n* @param newValue the new value to set\n* @return the previous value associated with the key\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:addAndGet(java.lang.Object,long)": "/**\n* Adds delta to the accumulated value for the given key.\n* @param key the key for accumulation\n* @param delta the value to add\n* @return updated accumulated long value\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:getAndAdd(java.lang.Object,long)": "/**\n* Updates the value by adding delta and returns the previous value.\n* @param key the key to update\n* @param delta the value to add\n* @return the previous value associated with the key\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:putAll(java.util.Map)": "/**\n* Inserts all entries from the given map into the current map.\n* @param m map containing key-value pairs to insert\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:incrementAndGet(java.lang.Object)": "/**\n* Increments the accumulated value for the given key by 1.\n* @param key the key for accumulation\n* @return updated accumulated long value\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:decrementAndGet(java.lang.Object)": "/**\n* Decrements the accumulated value for the given key by one.\n* @param key the key for accumulation\n* @return updated accumulated long value\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:getAndIncrement(java.lang.Object)": "/**\n* Increments the value associated with the key by 1.\n* @param key the key to update\n* @return previous value associated with the key\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:getAndDecrement(java.lang.Object)": "/**\n* Decrements the value associated with the key and returns the previous value.\n* @param key the key to decrement\n* @return previous value before decrement\n*/",
        "com.google.common.util.concurrent.AtomicLongMap:create(java.util.Map)": "/**\n* Creates an AtomicLongMap from the provided map.\n* @param m map containing key-value pairs for initialization\n* @return a new AtomicLongMap populated with entries from m\n*/"
    },
    "com.google.common.util.concurrent.Atomics": {
        "com.google.common.util.concurrent.Atomics:<init>()": "/**\n* Private constructor to prevent instantiation of the Atomics class.\n*/",
        "com.google.common.util.concurrent.Atomics:newReference()": "/**\n* Creates a new AtomicReference instance.\n* @return an AtomicReference initialized to null\n*/",
        "com.google.common.util.concurrent.Atomics:newReference(java.lang.Object)": "/**\n* Creates a new AtomicReference with the given initial value.\n* @param initialValue the initial value for the reference\n* @return an AtomicReference containing the initial value\n*/",
        "com.google.common.util.concurrent.Atomics:newReferenceArray(int)": "/**\n* Creates a new AtomicReferenceArray of specified length.\n* @param length the size of the array to create\n* @return an AtomicReferenceArray of the given length\n*/",
        "com.google.common.util.concurrent.Atomics:newReferenceArray(java.lang.Object[])": "/**\n* Creates an AtomicReferenceArray from a given array.\n* @param array input array of elements\n* @return AtomicReferenceArray containing the elements\n*/"
    },
    "com.google.common.util.concurrent.Callables": {
        "com.google.common.util.concurrent.Callables:<init>()": "/**\n* Private constructor to prevent instantiation of the Callables class.\n*/",
        "com.google.common.util.concurrent.Callables:returning(java.lang.Object)": "/**\n* Returns a Callable that returns the given value.\n* @param value the value to be returned by the Callable\n* @return a Callable that returns the specified value\n*/",
        "com.google.common.util.concurrent.Callables:trySetName(java.lang.String,java.lang.Thread)": "/**\n* Attempts to set the name of the specified thread.\n* @param threadName new name for the thread\n* @param currentThread the thread to rename\n* @return true if the name was set, false if a SecurityException occurred\n*/",
        "com.google.common.util.concurrent.Callables:asAsyncCallable(java.util.concurrent.Callable,com.google.common.util.concurrent.ListeningExecutorService)": "/**\n* Converts a Callable to an AsyncCallable using a ListeningExecutorService.\n* @param callable the Callable to execute asynchronously\n* @param listeningExecutorService the service for executing tasks\n* @return AsyncCallable that submits the callable\n*/",
        "com.google.common.util.concurrent.Callables:threadRenaming(java.util.concurrent.Callable,com.google.common.base.Supplier)": "/**\n* Wraps a Callable to rename the thread during execution.\n* @param callable the task to execute\n* @param nameSupplier provides the new thread name\n* @return a Callable that restores the original thread name after execution\n*/",
        "com.google.common.util.concurrent.Callables:threadRenaming(java.lang.Runnable,com.google.common.base.Supplier)": "/**\n* Creates a Runnable that renames the thread while executing a task.\n* @param task the task to run\n* @param nameSupplier provides the new thread name\n* @return a Runnable that executes the task with a renamed thread\n*/"
    },
    "com.google.common.util.concurrent.ClosingFuture$2": {
        "com.google.common.util.concurrent.ClosingFuture$2:toString()": "/**\n* Returns a string representation of the object, including state and future values.\n* @return formatted string with object's state and future information\n*/"
    },
    "com.google.common.util.concurrent.ClosingFuture$3": {
        "com.google.common.util.concurrent.ClosingFuture$3:toString()": "/**\n* Returns a string representation of the object with state and future details.\n* @return formatted string of the object's state and future\n*/"
    },
    "com.google.common.util.concurrent.ClosingFuture$4": {
        "com.google.common.util.concurrent.ClosingFuture$4:toString()": "/**\n* Returns a string representation of the object with state and future values.\n* @return formatted string of the object's state and future\n*/"
    },
    "com.google.common.util.concurrent.ClosingFuture$5": {
        "com.google.common.util.concurrent.ClosingFuture$5:toString()": "/**\n* Returns a string representation of the object with state and future details.\n* @return formatted string of object's state and future\n*/"
    },
    "com.google.common.util.concurrent.ClosingFuture$7": {
        "com.google.common.util.concurrent.ClosingFuture$7:toString()": "/**\n* Returns a string representation of the object with state and future details.\n* @return formatted string of the object's current state and future value\n*/"
    },
    "com.google.common.util.concurrent.ClosingFuture$8": {
        "com.google.common.util.concurrent.ClosingFuture$8:toString()": "/**\n* Returns a string representation of the object, including state and future values.\n* @return String representation of the object\n*/"
    },
    "com.google.common.util.concurrent.ClosingFuture$DeferredCloser": {
        "com.google.common.util.concurrent.ClosingFuture$DeferredCloser:<init>(com.google.common.util.concurrent.ClosingFuture$CloseableList)": "/**\n* Initializes DeferredCloser with a list of closeable resources.\n* @param list a list of Closeable objects to manage\n*/",
        "com.google.common.util.concurrent.ClosingFuture$DeferredCloser:eventuallyClose(java.lang.Object,java.util.concurrent.Executor)": "/**\n* Adds a closeable resource if not null; returns the closeable.\n* @param closeable resource to add, may be null\n* @param closingExecutor executor for the resource\n* @return the closeable resource\n*/"
    },
    "com.google.common.util.concurrent.ClosingFuture$CloseableList": {
        "com.google.common.util.concurrent.ClosingFuture$CloseableList:close()": "/**\n* Closes the resource and releases associated resources.\n* Ensures thread safety and notifies when closed.\n*/",
        "com.google.common.util.concurrent.ClosingFuture$CloseableList:add(java.lang.AutoCloseable,java.util.concurrent.Executor)": "/****\n* Adds a closeable resource with an executor if not closed.\n* @param closeable resource to add, may be null\n* @param executor executor for the resource\n*/",
        "com.google.common.util.concurrent.ClosingFuture$CloseableList:whenClosedCountDown()": "/**\n* Returns a CountDownLatch for the closed state.\n* @return CountDownLatch initialized to 0 or 1 based on closure status\n*/",
        "com.google.common.util.concurrent.ClosingFuture$CloseableList:applyAsyncClosingFunction(com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.lang.Object)": "/**\n* Applies an async transformation and manages closeable resources.\n* @param transformation async function to transform input\n* @param input value to be transformed\n* @return ClosingFuture's future result\n*/",
        "com.google.common.util.concurrent.ClosingFuture$CloseableList:applyClosingFunction(com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.lang.Object)": "/**\n* Applies a transformation and manages closeable resources.\n* @param transformation function to apply on input\n* @param input value to transform\n* @return ListenableFuture of the transformed result\n*/"
    },
    "com.google.common.util.concurrent.ClosingFuture$Combiner2": {
        "com.google.common.util.concurrent.ClosingFuture$Combiner2:call(com.google.common.util.concurrent.ClosingFuture$Combiner2$ClosingFunction2,java.util.concurrent.Executor)": "/**\n* Executes a function with two futures in an executor context.\n* @param function to be executed with two futures\n* @param executor for managing execution\n* @return ClosingFuture containing the result of the function\n*/",
        "com.google.common.util.concurrent.ClosingFuture$Combiner2:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner2$AsyncClosingFunction2,java.util.concurrent.Executor)": "/**\n* Executes an asynchronous function with closing support.\n* @param function the async function to execute\n* @param executor the executor for async execution\n* @return a ClosingFuture representing the result\n*/",
        "com.google.common.util.concurrent.ClosingFuture$Combiner2:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)": "/**\n* Initializes Combiner2 with two ClosingFuture instances.\n* @param future1 first ClosingFuture\n* @param future2 second ClosingFuture\n*/"
    },
    "com.google.common.util.concurrent.ClosingFuture$Combiner3": {
        "com.google.common.util.concurrent.ClosingFuture$Combiner3:call(com.google.common.util.concurrent.ClosingFuture$Combiner3$ClosingFunction3,java.util.concurrent.Executor)": "/**\n* Executes a function with three parameters asynchronously.\n* @param function the function to execute with parameters\n* @param executor the executor to run the function\n* @return ClosingFuture representing the result of the function\n*/",
        "com.google.common.util.concurrent.ClosingFuture$Combiner3:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner3$AsyncClosingFunction3,java.util.concurrent.Executor)": "/**\n* Executes an async function with closing support.\n* @param function async function to execute\n* @param executor executor for async execution\n* @return ClosingFuture of type U\n*/",
        "com.google.common.util.concurrent.ClosingFuture$Combiner3:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)": "/**\n* Initializes a Combiner3 with three ClosingFutures.\n* @param future1 first future, future2 second, future3 third\n*/"
    },
    "com.google.common.util.concurrent.ClosingFuture$Combiner4": {
        "com.google.common.util.concurrent.ClosingFuture$Combiner4:call(com.google.common.util.concurrent.ClosingFuture$Combiner4$ClosingFunction4,java.util.concurrent.Executor)": "/**\n* Executes a function with four parameters asynchronously.\n* @param function a callable with four inputs and a return value\n* @param executor the executor for running the function\n* @return ClosingFuture containing the result of the function\n*/",
        "com.google.common.util.concurrent.ClosingFuture$Combiner4:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner4$AsyncClosingFunction4,java.util.concurrent.Executor)": "/**\n* Executes an async function with provided parameters using the given executor.\n* @param function async function to execute\n* @param executor executor for running the function\n* @return ClosingFuture containing the result of the function\n*/",
        "com.google.common.util.concurrent.ClosingFuture$Combiner4:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)": "/**\n* Initializes a Combiner4 with four ClosingFuture instances.\n* @param future1, future2, future3, future4 ClosingFuture objects to combine\n*/"
    },
    "com.google.common.util.concurrent.ClosingFuture$Combiner5": {
        "com.google.common.util.concurrent.ClosingFuture$Combiner5:call(com.google.common.util.concurrent.ClosingFuture$Combiner5$ClosingFunction5,java.util.concurrent.Executor)": "/**\n* Executes a function with five parameters asynchronously.\n* @param function the function to execute\n* @param executor the executor for asynchronous execution\n* @return ClosingFuture of the function's result\n*/",
        "com.google.common.util.concurrent.ClosingFuture$Combiner5:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner5$AsyncClosingFunction5,java.util.concurrent.Executor)": "/**\n* Executes an asynchronous function with provided parameters.\n* @param function async function to execute\n* @param executor executor for asynchronous execution\n* @return ClosingFuture representing the result of the async call\n*/",
        "com.google.common.util.concurrent.ClosingFuture$Combiner5:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)": "/**\n* Constructs a Combiner5 with five ClosingFuture instances.\n* @param future1 to future5 ClosingFuture objects to combine\n*/"
    },
    "com.google.common.util.concurrent.ClosingFuture$ValueAndCloser": {
        "com.google.common.util.concurrent.ClosingFuture$ValueAndCloser:closeAsync()": "/**\n* Closes the asynchronous operation using the closingFuture.\n*/",
        "com.google.common.util.concurrent.ClosingFuture$ValueAndCloser:<init>(com.google.common.util.concurrent.ClosingFuture)": "/**\n* Initializes ValueAndCloser with a non-null ClosingFuture.\n* @param closingFuture the ClosingFuture to be assigned\n*/",
        "com.google.common.util.concurrent.ClosingFuture$ValueAndCloser:get()": "/**** Retrieves result from a completed Future. \n* @return result of type V or throws ExecutionException if not done \n*/"
    },
    "com.google.common.util.concurrent.ClosingFuture": {
        "com.google.common.util.concurrent.ClosingFuture:submit(com.google.common.util.concurrent.ClosingFuture$ClosingCallable,java.util.concurrent.Executor)": "/**\n* Submits a callable task for execution and returns a ClosingFuture.\n* @param callable the task to execute\n* @param executor the executor to run the task\n* @return ClosingFuture representing the task's result\n*/",
        "com.google.common.util.concurrent.ClosingFuture:submitAsync(com.google.common.util.concurrent.ClosingFuture$AsyncClosingCallable,java.util.concurrent.Executor)": "/**\n* Submits an asynchronous callable for execution.\n* @param callable the task to execute\n* @param executor the executor for task execution\n* @return ClosingFuture representing the task's result\n*/",
        "com.google.common.util.concurrent.ClosingFuture:whenAllComplete(java.lang.Iterable)": "/**\n* Creates a Combiner for completed futures.\n* @param futures iterable collection of ClosingFuture objects\n* @return a Combiner instance for the provided futures\n*/",
        "com.google.common.util.concurrent.ClosingFuture:whenAllSucceed(java.lang.Iterable)": "/**\n* Creates a Combiner that succeeds when all futures complete successfully.\n* @param futures iterable collection of ClosingFuture objects\n* @return a Combiner instance configured for success\n*/",
        "com.google.common.util.concurrent.ClosingFuture:whenAllSucceed(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)": "/**\n* Combines two ClosingFutures into a Combiner2.\n* @param future1 first ClosingFuture\n* @param future2 second ClosingFuture\n* @return Combiner2 instance for both futures\n*/",
        "com.google.common.util.concurrent.ClosingFuture:whenAllSucceed(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)": "/**\n* Combines three ClosingFutures into a single Combiner3.\n* @param future1, future2, future3 ClosingFutures to combine\n* @return a Combiner3 instance for the provided futures\n*/",
        "com.google.common.util.concurrent.ClosingFuture:whenAllSucceed(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)": "/**\n* Combines four ClosingFutures into a single Combiner4.\n* @param future1, future2, future3, future4 ClosingFuture objects to combine\n* @return Combiner4 instance for the provided futures\n*/",
        "com.google.common.util.concurrent.ClosingFuture:whenAllSucceed(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)": "/**\n* Combines multiple ClosingFutures into a single Combiner5.\n* @param future1 to future5 ClosingFutures to combine\n* @return a Combiner5 instance for the provided futures\n*/",
        "com.google.common.util.concurrent.ClosingFuture:compareAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State)": "/**\n* Compares and updates the state atomically.\n* @param oldState the expected current state\n* @param newState the new state to set if oldState matches\n* @return true if the update was successful, false otherwise\n*/",
        "com.google.common.util.concurrent.ClosingFuture:withoutCloser(com.google.common.util.concurrent.AsyncFunction)": "/**\n* Creates an AsyncClosingFunction from an AsyncFunction.\n* @param function the AsyncFunction to convert\n* @return an AsyncClosingFunction that applies the input\n*/",
        "com.google.common.util.concurrent.ClosingFuture:closeQuietly(java.lang.AutoCloseable,java.util.concurrent.Executor)": "/**\n* Closes an AutoCloseable quietly using the provided Executor.\n* @param closeable resource to close, may be null\n* @param executor for executing the close operation\n*/",
        "com.google.common.util.concurrent.ClosingFuture:close()": "/**\n* Logs closure and closes associated resources.\n*/",
        "com.google.common.util.concurrent.ClosingFuture:finishToFuture()": "/**\n* Completes the future if in OPEN state; throws exceptions for invalid states.\n* @return FluentFuture instance representing the completion state\n*/",
        "com.google.common.util.concurrent.ClosingFuture:finishToValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,java.util.concurrent.Executor)": "/**\n* Completes the process by setting up a consumer and adding a future listener.\n* @param consumer the consumer to operate on\n* @param executor the executor for asynchronous execution\n*/",
        "com.google.common.util.concurrent.ClosingFuture:checkAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State)": "/**\n* Validates and updates state if the current state matches the expected old state.\n* @param oldState the expected current state\n* @param newState the new state to set if oldState matches\n*/",
        "com.google.common.util.concurrent.ClosingFuture:provideValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,com.google.common.util.concurrent.ClosingFuture)": "/**\n* Accepts a consumer and provides a ValueAndCloser initialized with a ClosingFuture.\n* @param consumer the consumer to accept the ValueAndCloser\n* @param closingFuture the ClosingFuture to be used in ValueAndCloser\n*/",
        "com.google.common.util.concurrent.ClosingFuture:whenClosedCountDown()": "/**\n* Retrieves a CountDownLatch indicating the closed state of closeables.\n* @return CountDownLatch initialized to 0 or 1 based on closure status\n*/",
        "com.google.common.util.concurrent.ClosingFuture:cancel(boolean)": "/**\n* Cancels the future task and closes resources if successful.\n* @param mayInterruptIfRunning allows interruption if true\n* @return true if cancelled, false otherwise\n*/",
        "com.google.common.util.concurrent.ClosingFuture:finalize()": "/**\n* Cleans up resources if the state is OPEN during finalization.\n*/",
        "com.google.common.util.concurrent.ClosingFuture:becomeSubsumedInto(com.google.common.util.concurrent.ClosingFuture$CloseableList)": "/**\n* Updates state to SUBSUMED and adds closeables to another list.\n* @param otherCloseables list to add closeables to\n*/",
        "com.google.common.util.concurrent.ClosingFuture:toString()": "/**\n* Returns a string representation of the object with state and future values.\n* @return formatted string of object's state and future\n*/",
        "com.google.common.util.concurrent.ClosingFuture:<init>(com.google.common.util.concurrent.ListenableFuture)": "/**\n* Constructs a ClosingFuture from a ListenableFuture.\n* @param future the ListenableFuture to wrap\n*/",
        "com.google.common.util.concurrent.ClosingFuture:statusFuture()": "/**\n* Returns a future representing the status, non-cancellable.\n* @return ListenableFuture with status information\n*/",
        "com.google.common.util.concurrent.ClosingFuture:from(com.google.common.util.concurrent.ListenableFuture)": "/**\n* Creates a ClosingFuture from a ListenableFuture.\n* @param future the ListenableFuture to wrap\n* @return a ClosingFuture instance\n*/",
        "com.google.common.util.concurrent.ClosingFuture:derive(com.google.common.util.concurrent.FluentFuture)": "/**\n* Derives a ClosingFuture from a FluentFuture.\n* @param future the FluentFuture to wrap\n* @return a ClosingFuture instance\n*/",
        "com.google.common.util.concurrent.ClosingFuture:eventuallyClosing(com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.Executor)": "/**\n* Creates a ClosingFuture that closes resources when the future completes.\n* @param future the ListenableFuture to monitor\n* @param closingExecutor executor for closing resources\n* @return ClosingFuture instance managing the resource lifecycle\n*/",
        "com.google.common.util.concurrent.ClosingFuture:transform(com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)": "/**\n* Transforms a ClosingFunction asynchronously and returns a ClosingFuture.\n* @param function the function to apply; @param executor the executor for async execution\n* @return a ClosingFuture containing the transformed result\n*/",
        "com.google.common.util.concurrent.ClosingFuture:transformAsync(com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)": "/**\n* Transforms a future asynchronously using a closing function.\n* @param function the async function to apply\n* @param executor the executor for async execution\n* @return a ClosingFuture with the transformation result\n*/",
        "com.google.common.util.concurrent.ClosingFuture:catchingMoreGeneric(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)": "/**\n* Handles exceptions with a fallback function asynchronously.\n* @param exceptionType the type of exception to catch\n* @param fallback the function to execute on exception\n* @param executor the executor for the asynchronous operation\n* @return a ClosingFuture wrapping the result of the fallback\n*/",
        "com.google.common.util.concurrent.ClosingFuture:catchingAsyncMoreGeneric(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)": "/**\n* Handles exceptions asynchronously using a fallback function.\n* @param exceptionType the type of exception to catch\n* @param fallback function to execute on exception\n* @param executor the executor for asynchronous tasks\n* @return a ClosingFuture that represents the result\n*/",
        "com.google.common.util.concurrent.ClosingFuture:catching(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)": "/**\n* Handles exceptions of type X with a fallback function asynchronously.\n* @param exceptionType the type of exception to catch\n* @param fallback the function to execute on exception\n* @param executor the executor for the asynchronous operation\n* @return a ClosingFuture wrapping the result of the fallback\n*/",
        "com.google.common.util.concurrent.ClosingFuture:catchingAsync(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)": "/**\n* Handles exceptions asynchronously with a fallback function.\n* @param exceptionType type of exception to catch\n* @param fallback function to execute on exception\n* @param executor for executing tasks\n* @return ClosingFuture representing the result\n*/"
    },
    "com.google.common.util.concurrent.CollectionFuture$Present": {
        "com.google.common.util.concurrent.CollectionFuture$Present:<init>(java.lang.Object)": "/**\n* Initializes a Present object with the given value.\n* @param value the value to be stored, can be null\n*/"
    },
    "com.google.common.util.concurrent.CollectionFuture": {
        "com.google.common.util.concurrent.CollectionFuture:handleAllCompleted()": "/**\n* Handles completion of all tasks by combining results and setting the value.\n*/",
        "com.google.common.util.concurrent.CollectionFuture:collectOneValue(int,java.lang.Object)": "/**\n* Stores a value at the specified index in the localValues list.\n* @param index position to store the value\n* @param returnValue value to be stored, can be null\n*/",
        "com.google.common.util.concurrent.CollectionFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason)": "/**\n* Releases resources and nullifies values.\n* @param reason the reason for releasing resources\n*/",
        "com.google.common.util.concurrent.CollectionFuture:<init>(com.google.common.collect.ImmutableCollection,boolean)": "/**\n* Initializes CollectionFuture with futures and success criteria.\n* @param futures collection of futures to aggregate\n* @param allMustSucceed true if all futures must succeed\n*/"
    },
    "com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask": {
        "com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask:setValue(com.google.common.util.concurrent.ListenableFuture)": "/**\n* Sets the future value for the combined future.\n* @param value a ListenableFuture representing the value to set\n*/",
        "com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask:toPendingString()": "/**\n* Returns the string representation of the callable object.\n* @return string representation of the callable\n*/",
        "com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask:runInterruptibly()": "/**\n* Executes a callable and ensures the result is not null.\n* @return ListenableFuture of type V, never null\n*/"
    },
    "com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask": {
        "com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask:runInterruptibly()": "/**\n* Executes a callable task that may throw an exception.\n* @return result of the callable task\n* @throws Exception if the callable fails\n*/",
        "com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask:setValue(java.lang.Object)": "/**\n* Sets the value in the CombinedFuture instance.\n* @param value the value to be set, can be null\n*/",
        "com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask:toPendingString()": "/**\n* Returns the string representation of the callable object.\n* @return String representation of the callable\n*/"
    },
    "com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask": {
        "com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask:isDone()": "/**\n* Checks if the combined future is complete.\n* @return true if done, false otherwise\n*/",
        "com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask:execute()": "/**\n* Executes a task and handles potential execution rejection.\n* @throws RejectedExecutionException if task execution is rejected\n*/",
        "com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask:afterRanInterruptiblySuccess(java.lang.Object)": "/**\n* Clears task reference and sets the result after successful interruptible execution.\n* @param result the result of the task execution\n*/",
        "com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask:afterRanInterruptiblyFailure(java.lang.Throwable)": "/**\n* Handles failure after an interruptible task execution.\n* @param error the Throwable that caused the failure\n*/"
    },
    "com.google.common.util.concurrent.CombinedFuture": {
        "com.google.common.util.concurrent.CombinedFuture:interruptTask()": "/**\n* Interrupts the currently running task if it exists.\n*/",
        "com.google.common.util.concurrent.CombinedFuture:handleAllCompleted()": "/**\n* Executes the task if it is not null after completion.\n* @throws RejectedExecutionException if task execution is rejected\n*/",
        "com.google.common.util.concurrent.CombinedFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason)": "/**\n* Releases resources based on the reason provided.\n* @param reason indicates the reason for resource release\n*/",
        "com.google.common.util.concurrent.CombinedFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,java.util.concurrent.Executor,com.google.common.util.concurrent.AsyncCallable)": "/**** Initializes CombinedFuture with futures and task execution parameters. \n* @param futures collection of futures to aggregate \n* @param allMustSucceed true if all futures must succeed \n* @param listenerExecutor executor for listener callbacks \n* @param callable asynchronous task to execute \n*/",
        "com.google.common.util.concurrent.CombinedFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,java.util.concurrent.Executor,java.util.concurrent.Callable)": "/**\n* Constructs a CombinedFuture with specified futures and task execution settings.\n* @param futures collection of futures to aggregate\n* @param allMustSucceed true if all futures must succeed\n* @param listenerExecutor executor for task execution\n* @param callable task to execute when futures complete\n*/"
    },
    "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock": {
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock:isAcquiredByCurrentThread()": "/**\n* Checks if the lock is held by the current thread.\n* @return true if held, false otherwise\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock:lock()": "/**\n* Acquires the lock and notifies state change.\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock:lockInterruptibly()": "/**\n* Acquires the lock interruptibly, handling state changes.\n* @throws InterruptedException if interrupted while waiting\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock:tryLock()": "/**\n* Attempts to acquire the lock; updates state before and after.\n* @return true if lock acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock:tryLock(long,java.util.concurrent.TimeUnit)": "/**\n* Attempts to acquire the lock within the given timeout.\n* @param timeout maximum time to wait for the lock\n* @param unit time unit of the timeout\n* @return true if the lock was acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock:unlock()": "/**\n* Unlocks the resource and notifies lock state change.\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock:getLockGraphNode()": "/**\n* Retrieves the current LockGraphNode instance.\n* @return LockGraphNode object associated with this instance\n*/"
    },
    "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock": {
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock:lock()": "/**\n* Acquires the lock and updates the lock state.\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock:lockInterruptibly()": "/**\n* Acquires the lock interruptibly, handling interruptions.\n* @throws InterruptedException if the thread is interrupted while waiting\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock:tryLock()": "/**\n* Attempts to acquire the lock and updates lock state.\n* @return true if the lock was acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock:tryLock(long,java.util.concurrent.TimeUnit)": "/**\n* Attempts to acquire the lock within the specified timeout.\n* @param timeout maximum wait time for the lock\n* @param unit time unit of the timeout\n* @return true if the lock was acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock:unlock()": "/**\n* Unlocks the resource and updates the lock state.\n*/"
    },
    "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock": {
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock:isAcquiredByCurrentThread()": "/**\n* Checks if the current thread holds a write or read lock.\n* @return true if the thread has acquired a lock, false otherwise\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock:writeLock()": "/**\n* Returns the write lock associated with this object.\n* @return WriteLock instance for synchronization\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock:readLock()": "/**\n* Returns the current read lock.\n* @return ReadLock instance associated with this object\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock:getLockGraphNode()": "/**\n* Retrieves the current LockGraphNode instance.\n* @return the LockGraphNode object\n*/"
    },
    "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock": {
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock:lock()": "/**\n* Acquires the lock and notifies state change.\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock:lockInterruptibly()": "/**\n* Acquires the lock interruptibly, handling interruptions and state changes.\n* @throws InterruptedException if the thread is interrupted while waiting\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock:tryLock()": "/**\n* Attempts to acquire the lock and updates lock state.\n* @return true if lock acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock:tryLock(long,java.util.concurrent.TimeUnit)": "/**\n* Attempts to acquire the lock within the specified timeout.\n* @param timeout maximum time to wait for the lock\n* @param unit time unit of the timeout\n* @return true if the lock was acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock:unlock()": "/**\n* Unlocks the resource and notifies lock state change.\n*/"
    },
    "com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode": {
        "com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:getLockName()": "/**\n* Retrieves the name of the lock.\n* @return the lock name as a String\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,java.util.Set)": "/**\n* Recursively finds a path to a target node in the lock graph.\n* @param node target lock node to find\n* @param seen set of already traversed nodes\n* @return ExampleStackTrace or null if no path exists\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:checkAcquiredLock(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)": "/**\n* Validates lock acquisition order to prevent deadlocks.\n* @param policy handles potential deadlock exceptions\n* @param acquiredLock the lock being acquired\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:checkAcquiredLocks(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,java.util.List)": "/**\n* Validates lock acquisition for a list of locks.\n* @param policy manages deadlock prevention\n* @param acquiredLocks list of locks to check\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:<init>(java.lang.String)": "/**\n* Constructs a LockGraphNode with a non-null lock name.\n* @param lockName name of the lock, must not be null\n*/"
    },
    "com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException": {
        "com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException:getConflictingStackTrace()": "/**\n* Retrieves the conflicting stack trace.\n* @return ExampleStackTrace object representing the conflict\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException:getMessage()": "/**\n* Constructs a detailed message from the superclass and causes.\n* @return concatenated message string from superclass and causes\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace)": "/**\n* Constructs PotentialDeadlockException with lock nodes and conflicting stack trace.\n* @param node1 first lock node\n* @param node2 second lock node\n* @param conflictingStackTrace stack trace causing the deadlock\n*/"
    },
    "com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering": {
        "com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,java.util.Map)": "/**\n* Constructs WithExplicitOrdering with a policy and lock graph nodes.\n* @param policy the policy to be applied\n* @param lockGraphNodes mapping of elements to LockGraphNode instances\n*/"
    },
    "com.google.common.util.concurrent.CycleDetectingLockFactory": {
        "com.google.common.util.concurrent.CycleDetectingLockFactory:getLockName(java.lang.Enum)": "/**\n* Generates a lock name based on the enum's class and name.\n* @param rank the enum instance to derive the lock name\n* @return a string representing the lock name\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory:lockStateChanged(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)": "/**\n* Updates the list of acquired locks when a lock state changes.\n* @param lock the CycleDetectingLock whose state has changed\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy)": "/**\n* Constructs a CycleDetectingLockFactory with a non-null policy.\n* @param policy the locking policy, must not be null\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory:newInstance(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy)": "/**\n* Creates a new CycleDetectingLockFactory instance.\n* @param policy the locking policy, must not be null\n* @return a CycleDetectingLockFactory object\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory:aboutToAcquire(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)": "/**\n* Validates and updates acquired locks before acquiring a new lock.\n* @param lock the lock to be acquired\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantLock(java.lang.String,boolean)": "/**\n* Creates a new ReentrantLock based on policy.\n* @param lockName name of the lock, must not be null\n* @param fair specifies if the lock should be fair\n* @return ReentrantLock instance\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantReadWriteLock(java.lang.String,boolean)": "/**\n* Creates a ReentrantReadWriteLock based on the policy.\n* @param lockName name of the lock\n* @param fair indicates if the lock should be fair\n* @return ReentrantReadWriteLock instance\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory:createNodes(java.lang.Class)": "/**\n* Creates a map of LockGraphNodes for each enum value.\n* @param clazz the enum class type\n* @return unmodifiable map of enum values to LockGraphNodes\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantLock(java.lang.String)": "/**\n* Creates a non-fair ReentrantLock instance.\n* @param lockName name of the lock, must not be null\n* @return ReentrantLock instance\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantReadWriteLock(java.lang.String)": "/**\n* Creates a non-fair ReentrantReadWriteLock.\n* @param lockName name of the lock\n* @return ReentrantReadWriteLock instance\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory:getOrCreateNodes(java.lang.Class)": "/**\n* Retrieves or creates LockGraphNodes for the specified enum class.\n* @param clazz the enum class type\n* @return map of enum values to LockGraphNodes\n*/",
        "com.google.common.util.concurrent.CycleDetectingLockFactory:newInstanceWithExplicitOrdering(java.lang.Class,com.google.common.util.concurrent.CycleDetectingLockFactory$Policy)": "/**\n* Creates WithExplicitOrdering instance for specified enum class and policy.\n* @param enumClass the enum class type\n* @param policy the policy to be applied\n* @return WithExplicitOrdering instance\n*/"
    },
    "com.google.common.util.concurrent.DirectExecutor": {
        "com.google.common.util.concurrent.DirectExecutor:execute(java.lang.Runnable)": "/**\n* Executes the given Runnable command.\n* @param command the Runnable to be executed\n*/"
    },
    "com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair": {
        "com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair:<init>(java.lang.Runnable,java.util.concurrent.Executor,com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair)": "/**\n* Constructs a RunnableExecutorPair with a runnable, executor, and optional next pair.\n* @param runnable the task to execute\n* @param executor the executor to run the task\n* @param next optional next RunnableExecutorPair\n*/"
    },
    "com.google.common.util.concurrent.ExecutionList": {
        "com.google.common.util.concurrent.ExecutionList:<init>()": "/**\n* Constructs a new ExecutionList instance.\n*/",
        "com.google.common.util.concurrent.ExecutionList:executeListener(java.lang.Runnable,java.util.concurrent.Executor)": "/**\n* Executes a Runnable using the provided Executor, logging exceptions without halting execution.\n* @param runnable the task to execute\n* @param executor the executor to run the task\n*/",
        "com.google.common.util.concurrent.ExecutionList:add(java.lang.Runnable,java.util.concurrent.Executor)": "/**\n* Adds a Runnable to be executed by an Executor, enforcing non-null constraints.\n* @param runnable the task to execute\n* @param executor the executor to run the task\n*/",
        "com.google.common.util.concurrent.ExecutionList:execute()": "/**\n* Executes registered runnables in reverse order if not already executed.\n*/"
    },
    "com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor": {
        "com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:run()": "/**\n* Executes the runnable task, handling reentrancy and task queuing.\n* @throws NullPointerException if task or sequencer is null\n*/",
        "com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:trySetStarted()": "/**\n* Attempts to set the state from NOT_RUN to STARTED.\n* @return true if the state was changed, false otherwise\n*/",
        "com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:trySetCancelled()": "/**\n* Attempts to set the state to CANCELLED if currently NOT_RUN.\n* @return true if the state was successfully changed, false otherwise\n*/",
        "com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:execute(java.lang.Runnable)": "/**\n* Executes a Runnable task if not cancelled; handles reentrancy and task queueing.\n* @param task the Runnable task to execute\n*/",
        "com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:<init>(java.util.concurrent.Executor,com.google.common.util.concurrent.ExecutionSequencer)": "/**\n* Constructs a TaskNonReentrantExecutor with a delegate and sequencer.\n* @param delegate the executor to delegate tasks to\n* @param sequencer controls task execution sequencing\n*/"
    },
    "com.google.common.util.concurrent.Futures": {
        "com.google.common.util.concurrent.Futures:immediateVoidFuture()": "/**\n* Returns an immediate future that completes with a null value.\n* @return ListenableFuture that is already completed with null\n*/",
        "com.google.common.util.concurrent.Futures:catchingAsync(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)": "/**\n* Handles exceptions in async operations with a fallback function.\n* @param input future result to handle exceptions for\n* @param exceptionType type of exception to catch\n* @param fallback function to execute on exception\n* @param executor executor for async tasks\n* @return a future representing the result or fallback value\n*/",
        "com.google.common.util.concurrent.Futures:transformAsync(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)": "/**\n* Transforms input future asynchronously using the provided function.\n* @param input future to transform\n* @param function async function to apply on input\n* @param executor executor for async execution\n* @return transformed future of type O\n*/",
        "com.google.common.util.concurrent.Futures:<init>()": "/**\n* Private constructor to prevent instantiation of the Futures class.\n*/",
        "com.google.common.util.concurrent.Futures:lazyTransform(java.util.concurrent.Future,com.google.common.base.Function)": "/**\n* Transforms a Future result using a provided function.\n* @param input Future input value\n* @param function transformation function\n* @return Future of transformed output\n*/",
        "com.google.common.util.concurrent.Futures:getDone(java.util.concurrent.Future)": "/**** Retrieves result from a completed Future; throws exception if not done. \n* @param future the Future to check and retrieve result from\n* @return result of type V or throws ExecutionException if not done\n*/",
        "com.google.common.util.concurrent.Futures:getUnchecked(java.util.concurrent.Future)": "/**\n* Retrieves result from Future, throwing unchecked exceptions on failure.\n* @param future the Future to retrieve the result from\n* @return result of type V or throws UncheckedExecutionException/Error\n*/",
        "com.google.common.util.concurrent.Futures:immediateFuture(java.lang.Object)": "/**\n* Creates a ListenableFuture with the given value or returns a null future.\n* @param value the value to hold, can be null\n* @return ListenableFuture containing the value or a null future if value is null\n*/",
        "com.google.common.util.concurrent.Futures:immediateFailedFuture(java.lang.Throwable)": "/**\n* Creates a failed future with the specified throwable.\n* @param throwable the exception causing the failure\n* @return a ListenableFuture that is already failed\n*/",
        "com.google.common.util.concurrent.Futures:immediateCancelledFuture()": "/**\n* Returns a cancelled future instance of specified type.\n* @param <V> the type of the future result\n* @return ListenableFuture of type V, always cancelled\n*/",
        "com.google.common.util.concurrent.Futures:nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)": "/**\n* Wraps a future to prevent cancellation propagation.\n* @param future the ListenableFuture to wrap\n* @return a NonCancellationPropagatingFuture instance\n*/",
        "com.google.common.util.concurrent.Futures:submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)": "/**\n* Submits an AsyncCallable for execution and returns its future.\n* @param callable task to be executed asynchronously\n* @param executor the executor to run the task\n* @return a ListenableFuture representing the task's result\n*/",
        "com.google.common.util.concurrent.Futures:scheduleAsync(com.google.common.util.concurrent.AsyncCallable,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)": "/**\n* Schedules an AsyncCallable for delayed execution.\n* @param callable task to execute asynchronously\n* @param delay time to wait before execution\n* @param timeUnit unit of the delay\n* @param executorService service to schedule the task\n* @return a ListenableFuture representing the scheduled task\n*/",
        "com.google.common.util.concurrent.Futures:submit(java.util.concurrent.Callable,java.util.concurrent.Executor)": "/**\n* Submits a callable task for execution and returns a future for its result.\n* @param callable task to be executed\n* @param executor the executor to run the task\n* @return a ListenableFuture for the task's result\n*/",
        "com.google.common.util.concurrent.Futures:submit(java.lang.Runnable,java.util.concurrent.Executor)": "/**\n* Submits a Runnable task for execution.\n* @param runnable task to execute\n* @param executor executor to run the task\n* @return ListenableFuture representing task completion\n*/",
        "com.google.common.util.concurrent.Futures:withTimeout(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)": "/**\n* Returns a future that completes with a timeout.\n* @param delegate the future to wrap\n* @param time delay duration\n* @param unit time unit\n* @param scheduledExecutor service for scheduling\n* @return ListenableFuture that completes with a timeout\n*/",
        "com.google.common.util.concurrent.Futures:scheduleAsync(com.google.common.util.concurrent.AsyncCallable,java.time.Duration,java.util.concurrent.ScheduledExecutorService)": "/**** Schedules an AsyncCallable for delayed execution. \n* @param callable task to execute asynchronously \n* @param delay time to wait before execution \n* @param executorService service to schedule the task \n* @return ListenableFuture representing the scheduled task \n*/",
        "com.google.common.util.concurrent.Futures:catching(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)": "/**\n* Handles exceptions from a future with a fallback function.\n* @param input future to monitor\n* @param exceptionType type of exception to catch\n* @param fallback function to handle the exception\n* @param executor executor for handling the listener\n* @return ListenableFuture managing exceptions\n*/",
        "com.google.common.util.concurrent.Futures:transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)": "/**\n* Transforms input future using a function and returns the resulting future.\n* @param input future to transform\n* @param function transformation function\n* @param executor executor for handling listener execution\n* @return transformed future\n*/",
        "com.google.common.util.concurrent.Futures:addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)": "/**\n* Adds a callback to a ListenableFuture for asynchronous execution.\n* @param future the future to monitor\n* @param callback the callback to execute upon completion\n* @param executor the executor for running the callback\n*/",
        "com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit)": "/**\n* Retrieves a value from a Future with a timeout, throwing specified exceptions on failure.\n* @param future the Future to retrieve the value from\n* @param exceptionClass the class of the exception to throw on failure\n* @param timeout the maximum time to wait\n* @param unit the time unit of the timeout\n* @return the retrieved value\n* @throws X if the operation fails\n*/",
        "com.google.common.util.concurrent.Futures:withTimeout(com.google.common.util.concurrent.ListenableFuture,java.time.Duration,java.util.concurrent.ScheduledExecutorService)": "/**\n* Wraps a future with a timeout using a scheduled executor.\n* @param delegate the future to wrap\n* @param time duration before timeout\n* @param scheduledExecutor executor for scheduling\n* @return ListenableFuture that completes with a timeout\n*/",
        "com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class)": "/**\n* Retrieves a value from a Future, throwing specified exception on failure.\n* @param future the Future to get the value from\n* @param exceptionClass the class of the exception to throw\n* @return the value from the Future\n* @throws X if interrupted or execution fails\n*/",
        "com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class,java.time.Duration)": "/**\n* Retrieves a value from a Future with a timeout, throwing specified exceptions on failure.\n* @param future the Future to retrieve the value from\n* @param exceptionClass the class of the exception to throw on failure\n* @param timeout the maximum time to wait\n* @return the retrieved value\n*/",
        "com.google.common.util.concurrent.Futures:allAsList(java.lang.Iterable)": "/**\n* Aggregates futures into a ListenableFuture of a list.\n* @param futures iterable of futures to aggregate\n* @return ListenableFuture containing the aggregated list\n*/",
        "com.google.common.util.concurrent.Futures:whenAllComplete(java.lang.Iterable)": "/**\n* Combines futures into a FutureCombiner.\n* @param futures iterable of ListenableFutures to combine\n* @return FutureCombiner containing the combined futures\n*/",
        "com.google.common.util.concurrent.Futures:whenAllSucceed(java.lang.Iterable)": "/**\n* Combines futures to succeed when all complete.\n* @param futures iterable of futures to combine\n* @return FutureCombiner for managing combined results\n*/",
        "com.google.common.util.concurrent.Futures:successfulAsList(java.lang.Iterable)": "/**\n* Converts a collection of futures to a successful result list.\n* @param futures iterable of futures to aggregate\n* @return ListenableFuture containing a list of successful results\n*/",
        "com.google.common.util.concurrent.Futures:gwtCompatibleToArray(java.lang.Iterable)": "/**\n* Converts Iterable of ListenableFutures to an array.\n* @param futures iterable of futures to convert\n* @return array of ListenableFutures\n*/",
        "com.google.common.util.concurrent.Futures:inCompletionOrder(java.lang.Iterable)": "/**\n* Arranges futures in completion order.\n* @param futures iterable of ListenableFutures to order\n* @return ImmutableList of ordered ListenableFutures\n*/"
    },
    "com.google.common.util.concurrent.FakeTimeLimiter": {
        "com.google.common.util.concurrent.FakeTimeLimiter:<init>()": "/**\n* Constructs a new instance of FakeTimeLimiter.\n*/",
        "com.google.common.util.concurrent.FakeTimeLimiter:newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit)": "/**\n* Creates a new proxy for the given target object.\n* @param target the object to be proxied\n* @param interfaceType the interface type for the proxy\n* @param timeoutDuration the duration for the timeout\n* @param timeoutUnit the unit of the timeout duration\n* @return the target object\n*/",
        "com.google.common.util.concurrent.FakeTimeLimiter:runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)": "/**** Executes a Runnable with a timeout; wraps exceptions as unchecked. \n* @param runnable the task to execute\n* @param timeoutDuration duration before timeout\n* @param timeoutUnit unit of the timeout duration\n*/",
        "com.google.common.util.concurrent.FakeTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)": "/**\n* Executes a callable with a timeout, handling exceptions and errors.\n* @param callable the task to execute\n* @param timeoutDuration duration to wait before timeout\n* @param timeoutUnit unit of the timeout duration\n* @return result of the callable execution\n* @throws ExecutionException if execution fails\n*/",
        "com.google.common.util.concurrent.FakeTimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)": "/**\n* Executes a Runnable without interruption, applying a timeout.\n* @param runnable the task to execute\n* @param timeoutDuration duration before timeout\n* @param timeoutUnit unit of the timeout duration\n*/",
        "com.google.common.util.concurrent.FakeTimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)": "/**\n* Executes a callable without interruption, using a timeout.\n* @param callable the task to execute\n* @param timeoutDuration duration to wait before timeout\n* @param timeoutUnit unit of the timeout duration\n* @return result of the callable execution\n* @throws ExecutionException if execution fails\n*/"
    },
    "com.google.common.util.concurrent.FluentFuture": {
        "com.google.common.util.concurrent.FluentFuture:<init>()": "/**\n* Constructs a new FluentFuture instance for asynchronous computation.\n*/",
        "com.google.common.util.concurrent.FluentFuture:from(com.google.common.util.concurrent.FluentFuture)": "/**\n* Returns a non-null FluentFuture from the provided future.\n* @param future the FluentFuture to check for null\n* @return the non-null FluentFuture\n*/",
        "com.google.common.util.concurrent.FluentFuture:catchingAsync(java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)": "/**\n* Handles exceptions asynchronously with a fallback function.\n* @param exceptionType type of exception to catch\n* @param fallback function to execute on exception\n* @param executor executor for async tasks\n* @return FluentFuture representing the result or fallback value\n*/",
        "com.google.common.util.concurrent.FluentFuture:transformAsync(com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)": "/**\n* Transforms the current future asynchronously using the provided function and executor.\n* @param function async function to apply on the future\n* @param executor executor for async execution\n* @return transformed FluentFuture of type T\n*/",
        "com.google.common.util.concurrent.FluentFuture:from(com.google.common.util.concurrent.ListenableFuture)": "/**** Converts a ListenableFuture to a FluentFuture. \n* @param future the ListenableFuture to convert \n* @return FluentFuture instance wrapping the input future \n*/",
        "com.google.common.util.concurrent.FluentFuture:withTimeout(long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)": "/**\n* Wraps a future with a timeout.\n* @param timeout duration before timeout occurs\n* @param unit time unit for the timeout\n* @param scheduledExecutor executor for scheduling\n* @return FluentFuture that completes with a timeout\n*/",
        "com.google.common.util.concurrent.FluentFuture:catching(java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)": "/**\n* Handles exceptions from a future with a fallback function.\n* @param exceptionType type of exception to catch\n* @param fallback function to handle the exception\n* @param executor executor for handling the listener\n* @return FluentFuture managing exceptions\n*/",
        "com.google.common.util.concurrent.FluentFuture:transform(com.google.common.base.Function,java.util.concurrent.Executor)": "/**\n* Transforms the current future using a provided function and executor.\n* @param function transformation function for the future's value\n* @param executor executor for handling listener execution\n* @return transformed FluentFuture\n*/",
        "com.google.common.util.concurrent.FluentFuture:addCallback(com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)": "/**\n* Adds a callback for the completion of this future.\n* @param callback the callback to execute upon completion\n* @param executor the executor for running the callback\n*/",
        "com.google.common.util.concurrent.FluentFuture:withTimeout(java.time.Duration,java.util.concurrent.ScheduledExecutorService)": "/**\n* Wraps a future with a specified timeout.\n* @param timeout duration before timeout occurs\n* @param scheduledExecutor executor for scheduling\n* @return FluentFuture that completes with a timeout\n*/"
    },
    "com.google.common.util.concurrent.FluentFuture$TrustedFuture": {
        "com.google.common.util.concurrent.FluentFuture$TrustedFuture:get()": "/**\n* Retrieves the result of the computation.\n* @return the computed value\n* @throws InterruptedException if the current thread is interrupted\n* @throws ExecutionException if the computation threw an exception\n*/",
        "com.google.common.util.concurrent.FluentFuture$TrustedFuture:get(long,java.util.concurrent.TimeUnit)": "/**\n* Retrieves a value with a specified timeout.\n* @param timeout maximum wait time\n* @param unit time unit for the timeout\n* @return value retrieved or throws exceptions on failure\n*/",
        "com.google.common.util.concurrent.FluentFuture$TrustedFuture:isDone()": "/**\n* Checks if the task is completed.\n* @return true if the task is done, false otherwise\n*/",
        "com.google.common.util.concurrent.FluentFuture$TrustedFuture:isCancelled()": "/**\n* Checks if the operation is cancelled.\n* @return true if cancelled, false otherwise\n*/",
        "com.google.common.util.concurrent.FluentFuture$TrustedFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)": "/**\n* Adds a listener to be executed with the given executor.\n* @param listener the Runnable to execute\n* @param executor the Executor to run the listener\n*/",
        "com.google.common.util.concurrent.FluentFuture$TrustedFuture:cancel(boolean)": "/**\n* Cancels the task with an option to interrupt if running.\n* @param mayInterruptIfRunning true to interrupt, false otherwise\n* @return true if the task was cancelled, false if already completed\n*/"
    },
    "com.google.common.util.concurrent.ForwardingBlockingDeque": {
        "com.google.common.util.concurrent.ForwardingBlockingDeque:delegate()": "/**\n* Returns the blocking deque delegate for this implementation.\n* @return BlockingDeque instance used by this class\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingDeque:remainingCapacity()": "/**\n* Returns the remaining capacity of the blocking deque.\n* @return remaining capacity as an integer\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingDeque:putFirst(java.lang.Object)": "/**\n* Inserts an element at the front of the deque.\n* @param e the element to be added\n* @throws InterruptedException if interrupted while waiting\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingDeque:putLast(java.lang.Object)": "/**\n* Adds an element to the end of the blocking deque.\n* @param e element to be added\n* @throws InterruptedException if interrupted while waiting\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingDeque:offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit)": "/**\n* Inserts an element at the front with a timeout.\n* @param e element to insert\n* @param timeout maximum time to wait\n* @param unit time unit of the timeout\n* @return true if successful, false if timeout occurred\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingDeque:offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit)": "/**\n* Adds an element to the end with a timeout.\n* @param e element to add, @param timeout max wait, @param unit time unit for timeout\n* @return true if added, false if timeout occurs\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingDeque:takeFirst()": "/**\n* Retrieves and removes the first element from the deque.\n* @return the first element, or null if empty\n* @throws InterruptedException if interrupted while waiting\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingDeque:takeLast()": "/**\n* Retrieves and removes the last element, blocking if necessary.\n* @return the last element or null if empty\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingDeque:pollFirst(long,java.util.concurrent.TimeUnit)": "/**\n* Retrieves and removes the first element, waiting up to the specified timeout.\n* @param timeout maximum time to wait for an element\n* @param unit time unit of the timeout\n* @return the first element or null if none available within timeout\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingDeque:pollLast(long,java.util.concurrent.TimeUnit)": "/**\n* Retrieves and removes the last element with a timeout.\n* @param timeout maximum time to wait\n* @param unit time unit for the timeout\n* @return last element or null if none available\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingDeque:put(java.lang.Object)": "/**\n* Inserts an element into the blocking deque.\n* @param e element to be added\n* @throws InterruptedException if interrupted while waiting\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingDeque:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)": "/**\n* Offers an element with a timeout.\n* @param e element to add; @param timeout max wait time; @param unit time unit for timeout\n* @return true if successful, false if timeout occurs\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingDeque:take()": "/**\n* Retrieves and removes the head of the queue, waiting if necessary.\n* @return the head element of the queue\n* @throws InterruptedException if interrupted while waiting\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingDeque:poll(long,java.util.concurrent.TimeUnit)": "/**\n* Retrieves and removes an element, waiting if necessary.\n* @param timeout maximum time to wait\n* @param unit time unit of the timeout\n* @return element or null if none available\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingDeque:drainTo(java.util.Collection)": "/**\n* Drains elements into the specified collection.\n* @param c collection to drain elements into\n* @return number of elements drained\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingDeque:drainTo(java.util.Collection,int)": "/**\n* Drains elements to a collection, limiting by maxElements.\n* @param c collection to drain elements into\n* @param maxElements maximum number of elements to drain\n* @return number of elements drained\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingDeque:<init>()": "/**\n* Constructs a new instance of ForwardingBlockingDeque.\n*/"
    },
    "com.google.common.util.concurrent.ForwardingBlockingQueue": {
        "com.google.common.util.concurrent.ForwardingBlockingQueue:delegate()": "/**\n* Returns the underlying BlockingQueue instance.\n* @return BlockingQueue of type E\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingQueue:drainTo(java.util.Collection,int)": "/**\n* Drains elements to a collection, limited by maxElements.\n* @param c collection to drain elements into\n* @param maxElements maximum number of elements to drain\n* @return number of elements drained\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingQueue:drainTo(java.util.Collection)": "/**\n* Drains elements into the provided collection.\n* @param c collection to receive drained elements\n* @return number of elements drained\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingQueue:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)": "/**\n* Offers an element with timeout to the queue.\n* @param e element to add, @param timeout max wait time, @param unit time unit\n* @return true if successful, false if timeout occurs\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingQueue:poll(long,java.util.concurrent.TimeUnit)": "/**\n* Retrieves and removes the head of the queue, waiting if necessary.\n* @param timeout maximum time to wait for an element\n* @param unit time unit of the timeout\n* @return the head element or null if the queue is empty\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingQueue:put(java.lang.Object)": "/**\n* Puts an element into the BlockingQueue.\n* @param e the element to be added\n* @throws InterruptedException if interrupted while waiting\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingQueue:remainingCapacity()": "/**\n* Returns the remaining capacity of the underlying BlockingQueue.\n* @return remaining capacity as an integer\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingQueue:take()": "/**\n* Retrieves and removes the head of the queue.\n* @return element at the head of the queue\n* @throws InterruptedException if interrupted while waiting\n*/",
        "com.google.common.util.concurrent.ForwardingBlockingQueue:<init>()": "/**\n* Initializes a new instance of ForwardingBlockingQueue.\n*/"
    },
    "com.google.common.util.concurrent.ForwardingCondition": {
        "com.google.common.util.concurrent.ForwardingCondition:await()": "/**\n* Waits until the condition is signaled.\n* @throws InterruptedException if the thread is interrupted while waiting\n*/",
        "com.google.common.util.concurrent.ForwardingCondition:await(long,java.util.concurrent.TimeUnit)": "/**\n* Awaits for a specified time or until interrupted.\n* @param time duration to wait\n* @param unit time unit of the duration\n* @return true if successful, false if interrupted\n*/",
        "com.google.common.util.concurrent.ForwardingCondition:awaitUninterruptibly()": "/**\n* Waits indefinitely until the condition is met, ignoring interruptions.\n*/",
        "com.google.common.util.concurrent.ForwardingCondition:awaitNanos(long)": "/**\n* Awaits for a specified time in nanoseconds.\n* @param nanosTimeout maximum wait time in nanoseconds\n* @return remaining time in nanoseconds or 0 if interrupted\n*/",
        "com.google.common.util.concurrent.ForwardingCondition:awaitUntil(java.util.Date)": "/**\n* Waits until the specified deadline.\n* @param deadline the time to wait until\n* @return true if successful, false if interrupted\n*/",
        "com.google.common.util.concurrent.ForwardingCondition:signal()": "/**\n* Signals the delegate to perform its action.\n*/",
        "com.google.common.util.concurrent.ForwardingCondition:signalAll()": "/**\n* Signals all waiting threads to wake up.\n*/"
    },
    "com.google.common.util.concurrent.ForwardingExecutorService": {
        "com.google.common.util.concurrent.ForwardingExecutorService:awaitTermination(long,java.util.concurrent.TimeUnit)": "/**\n* Waits for termination with a specified timeout.\n* @param timeout maximum time to wait\n* @param unit time unit of the timeout\n* @return true if terminated; false if timeout reached\n*/",
        "com.google.common.util.concurrent.ForwardingExecutorService:invokeAll(java.util.Collection)": "/**\n* Executes a collection of tasks and returns their results as futures.\n* @param tasks collection of callable tasks to execute\n* @return list of futures representing task results\n*/",
        "com.google.common.util.concurrent.ForwardingExecutorService:invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)": "/**\n* Executes a collection of tasks and returns their futures.\n* @param tasks collection of Callable tasks to execute\n* @param timeout maximum time to wait for task completion\n* @param unit time unit for the timeout\n* @return list of Future objects representing task results\n*/",
        "com.google.common.util.concurrent.ForwardingExecutorService:invokeAny(java.util.Collection)": "/**\n* Executes a collection of tasks and returns the result of any successful task.\n* @param tasks collection of Callable tasks to execute\n* @return result of the first completed task\n* @throws InterruptedException if the current thread is interrupted\n* @throws ExecutionException if the execution of the task fails\n*/",
        "com.google.common.util.concurrent.ForwardingExecutorService:invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)": "/**\n* Executes tasks and returns the result of the first completed one.\n* @param tasks collection of callable tasks to execute\n* @param timeout maximum time to wait for a task to complete\n* @param unit time unit for the timeout\n* @return result of the first completed task or null if none completed\n*/",
        "com.google.common.util.concurrent.ForwardingExecutorService:isShutdown()": "/**\n* Checks if the delegate is in a shutdown state.\n* @return true if shutdown, false otherwise\n*/",
        "com.google.common.util.concurrent.ForwardingExecutorService:isTerminated()": "/**\n* Checks if the current process is terminated.\n* @return true if terminated, false otherwise\n*/",
        "com.google.common.util.concurrent.ForwardingExecutorService:shutdown()": "/**\n* Shuts down the delegate component.\n*/",
        "com.google.common.util.concurrent.ForwardingExecutorService:shutdownNow()": "/**\n* Initiates an immediate shutdown and returns pending tasks.\n* @return List of Runnable tasks that were not executed\n*/",
        "com.google.common.util.concurrent.ForwardingExecutorService:execute(java.lang.Runnable)": "/**\n* Executes the given Runnable command using the delegate.\n* @param command the Runnable task to execute\n*/",
        "com.google.common.util.concurrent.ForwardingExecutorService:submit(java.util.concurrent.Callable)": "/**\n* Submits a callable task for execution.\n* @param task the callable task to be executed\n* @return a Future representing the task's result\n*/",
        "com.google.common.util.concurrent.ForwardingExecutorService:submit(java.lang.Runnable)": "/**\n* Submits a Runnable task for execution.\n* @param task the task to be executed\n* @return a Future representing the task's result\n*/",
        "com.google.common.util.concurrent.ForwardingExecutorService:submit(java.lang.Runnable,java.lang.Object)": "/**\n* Submits a Runnable task and returns a Future with a specified result type.\n* @param task the task to execute\n* @param result the result to return upon completion\n* @return a Future representing the task's completion\n*/",
        "com.google.common.util.concurrent.ForwardingExecutorService:<init>()": "/**\n* Default constructor for ForwardingExecutorService class.\n*/"
    },
    "com.google.common.util.concurrent.ForwardingFluentFuture": {
        "com.google.common.util.concurrent.ForwardingFluentFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)": "/**\n* Adds a listener to be executed by the specified executor.\n* @param listener Runnable to be executed\n* @param executor Executor to run the listener\n*/",
        "com.google.common.util.concurrent.ForwardingFluentFuture:cancel(boolean)": "/**\n* Cancels the task execution.\n* @param mayInterruptIfRunning true to interrupt if running, false otherwise\n* @return true if the task was cancelled, false if already completed\n*/",
        "com.google.common.util.concurrent.ForwardingFluentFuture:isCancelled()": "/**\n* Checks if the operation is cancelled.\n* @return true if cancelled, false otherwise\n*/",
        "com.google.common.util.concurrent.ForwardingFluentFuture:isDone()": "/**\n* Checks if the delegated task is completed.\n* @return true if the task is done, false otherwise\n*/",
        "com.google.common.util.concurrent.ForwardingFluentFuture:get()": "/**\n* Retrieves the value, potentially blocking until available.\n* @return the value of type V from the delegate\n* @throws InterruptedException if the operation is interrupted\n* @throws ExecutionException if the computation threw an exception\n*/",
        "com.google.common.util.concurrent.ForwardingFluentFuture:get(long,java.util.concurrent.TimeUnit)": "/**\n* Retrieves a value with a specified timeout.\n* @param timeout maximum wait time for retrieval\n* @param unit time unit of the timeout\n* @return value retrieved from the delegate\n* @throws InterruptedException if interrupted while waiting\n* @throws ExecutionException if computation threw an exception\n* @throws TimeoutException if the timeout is reached\n*/",
        "com.google.common.util.concurrent.ForwardingFluentFuture:toString()": "/**\n* Returns the string representation of the delegate object.\n* @return string representation of the delegate\n*/",
        "com.google.common.util.concurrent.ForwardingFluentFuture:<init>(com.google.common.util.concurrent.ListenableFuture)": "/**\n* Constructs a ForwardingFluentFuture with a non-null delegate.\n* @param delegate the ListenableFuture to be wrapped\n*/"
    },
    "com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture": {
        "com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture:delegate()": "/**\n* Returns the future delegate instance.\n* @return Future<V> representing the delegate\n*/",
        "com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture:<init>(java.util.concurrent.Future)": "/**\n* Constructs SimpleForwardingFuture with a non-null delegate.\n* @param delegate the Future to delegate tasks to\n*/"
    },
    "com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture": {
        "com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture:delegate()": "/**\n* Returns the delegate ListenableFuture instance.\n* @return ListenableFuture of type V\n*/",
        "com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture:<init>(com.google.common.util.concurrent.ListenableFuture)": "/**\n* Constructs a SimpleForwardingListenableFuture with a non-null delegate.\n* @param delegate the ListenableFuture to delegate to\n*/"
    },
    "com.google.common.util.concurrent.ForwardingListeningExecutorService": {
        "com.google.common.util.concurrent.ForwardingListeningExecutorService:delegate()": "/**\n* Provides the underlying ListeningExecutorService implementation.\n* @return ListeningExecutorService instance used for task execution\n*/",
        "com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.lang.Runnable)": "/**\n* Submits a Runnable task for execution.\n* @param task the task to be executed\n* @return a ListenableFuture representing the pending result\n*/",
        "com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.lang.Runnable,java.lang.Object)": "/**\n* Submits a Runnable task with a result for future completion.\n* @param task the task to execute\n* @param result the expected result of the task\n* @return ListenableFuture representing the task's completion\n*/",
        "com.google.common.util.concurrent.ForwardingListeningExecutorService:<init>()": "/**\n* Default constructor for ForwardingListeningExecutorService class.\n*/",
        "com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.util.concurrent.Callable)": "/**\n* Submits a callable task for execution.\n* @param task the task to be executed\n* @return ListenableFuture representing the task's result\n*/"
    },
    "com.google.common.util.concurrent.ForwardingLock": {
        "com.google.common.util.concurrent.ForwardingLock:lock()": "/**\n* Locks the delegate resource.\n*/",
        "com.google.common.util.concurrent.ForwardingLock:lockInterruptibly()": "/**\n* Acquires the lock interruptibly, allowing interruption.\n* @throws InterruptedException if the thread is interrupted while waiting\n*/",
        "com.google.common.util.concurrent.ForwardingLock:tryLock()": "/**\n* Attempts to acquire the lock.\n* @return true if the lock was acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.ForwardingLock:tryLock(long,java.util.concurrent.TimeUnit)": "/**\n* Attempts to acquire the lock within the specified time.\n* @param time maximum time to wait for the lock\n* @param unit time unit of the wait time\n* @return true if lock acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.ForwardingLock:unlock()": "/**\n* Unlocks the delegate object.\n*/",
        "com.google.common.util.concurrent.ForwardingLock:newCondition()": "/**\n* Creates a new Condition instance.\n* @return a new Condition object from the delegate\n*/"
    },
    "com.google.common.util.concurrent.Futures$FutureCombiner": {
        "com.google.common.util.concurrent.Futures$FutureCombiner:<init>(boolean,com.google.common.collect.ImmutableList)": "/**\n* Initializes FutureCombiner with success requirement and futures list.\n* @param allMustSucceed indicates if all futures must succeed\n* @param futures list of futures to combine\n*/",
        "com.google.common.util.concurrent.Futures$FutureCombiner:callAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)": "/**\n* Executes an asynchronous task using a combiner.\n* @param combiner task to execute asynchronously\n* @param executor executor for task execution\n* @return ListenableFuture for the result of the task\n*/",
        "com.google.common.util.concurrent.Futures$FutureCombiner:call(java.util.concurrent.Callable,java.util.concurrent.Executor)": "/**\n* Executes a combiner task with specified futures.\n* @param combiner task to combine futures' results\n* @param executor for task execution\n* @return ListenableFuture representing the combined result\n*/",
        "com.google.common.util.concurrent.Futures$FutureCombiner:run(java.lang.Runnable,java.util.concurrent.Executor)": "/**\n* Executes a Runnable combiner using the provided Executor.\n* @param combiner task to run\n* @param executor for task execution\n* @return ListenableFuture representing the execution result\n*/"
    },
    "com.google.common.util.concurrent.Futures$InCompletionOrderFuture": {
        "com.google.common.util.concurrent.Futures$InCompletionOrderFuture:pendingToString()": "/**\n* Converts pending state to a string representation.\n* @return formatted string of input count and remaining outputs or null if state is null\n*/",
        "com.google.common.util.concurrent.Futures$InCompletionOrderFuture:<init>(com.google.common.util.concurrent.Futures$InCompletionOrderState)": "/**\n* Initializes InCompletionOrderFuture with the given state.\n* @param state the InCompletionOrderState to set\n*/",
        "com.google.common.util.concurrent.Futures$InCompletionOrderFuture:cancel(boolean)": "/**\n* Cancels the operation, optionally interrupting if running.\n* @param interruptIfRunning indicates interruption preference\n* @return true if cancellation was successful, false otherwise\n*/"
    },
    "com.google.common.util.concurrent.Futures$InCompletionOrderState": {
        "com.google.common.util.concurrent.Futures$InCompletionOrderState:<init>(com.google.common.util.concurrent.ListenableFuture[])": "/**\n* Initializes InCompletionOrderState with an array of futures.\n* @param inputFutures array of futures to track completion\n*/",
        "com.google.common.util.concurrent.Futures$InCompletionOrderState:recordCompletion()": "/**\n* Records completion and cancels input futures if all outputs are complete and wasCancelled is true.\n*/",
        "com.google.common.util.concurrent.Futures$InCompletionOrderState:recordOutputCancellation(boolean)": "/**\n* Cancels output and manages input futures based on interruption flag.\n* @param interruptIfRunning determines cancellation method for input futures\n*/",
        "com.google.common.util.concurrent.Futures$InCompletionOrderState:recordInputCompletion(com.google.common.collect.ImmutableList,int)": "/**\n* Records completion of an input future for delegate futures.\n* @param delegates list of delegate futures\n* @param inputFutureIndex index of the input future\n*/"
    },
    "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture": {
        "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture:run()": "/**\n* Sets the future delegate if not null to prevent cancellation propagation.\n* @param delegate the ListenableFuture to be set\n*/",
        "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture:pendingToString()": "/**\n* Converts pending delegate to string representation if available.\n* @return string of delegate or null if not present\n*/",
        "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture:<init>(com.google.common.util.concurrent.ListenableFuture)": "/**\n* Initializes NonCancellationPropagatingFuture with a delegate future.\n* @param delegate the ListenableFuture to prevent cancellation propagation\n*/"
    },
    "com.google.common.util.concurrent.ImmediateFuture": {
        "com.google.common.util.concurrent.ImmediateFuture:<init>(java.lang.Object)": "/**\n* Constructs an ImmediateFuture with the given value.\n* @param value the value to be held by this future\n*/",
        "com.google.common.util.concurrent.ImmediateFuture:get()": "/**\n* Returns the stored value.\n* @return the value of type V, may be null\n*/",
        "com.google.common.util.concurrent.ImmediateFuture:toString()": "/**\n* Returns a string representation of the object, including status and result.\n* @return formatted string with status and result value\n*/",
        "com.google.common.util.concurrent.ImmediateFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)": "/**\n* Adds a listener to be executed by the specified executor.\n* @param listener the Runnable to execute\n* @param executor the Executor to run the listener\n*/",
        "com.google.common.util.concurrent.ImmediateFuture:get(long,java.util.concurrent.TimeUnit)": "/**\n* Retrieves a value with a timeout.\n* @param timeout duration to wait before timing out\n* @param unit time unit of the timeout\n* @return the stored value or null\n* @throws ExecutionException if the operation fails\n*/"
    },
    "com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedFuture": {
        "com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedFuture:<init>(java.lang.Throwable)": "/**\n* Constructs an ImmediateFailedFuture with the given exception.\n* @param thrown the exception to be set\n*/"
    },
    "com.google.common.util.concurrent.ImmediateFuture$ImmediateCancelledFuture": {
        "com.google.common.util.concurrent.ImmediateFuture$ImmediateCancelledFuture:<init>()": "/**\n* Cancels the future task without interrupting if already running.\n*/"
    },
    "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator": {
        "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator:validateClass(java.lang.Class)": "/**\n* Validates the provided exception class and caches the result.\n* @param exceptionClass class of the exception to validate\n*/"
    },
    "com.google.common.util.concurrent.FuturesGetChecked": {
        "com.google.common.util.concurrent.FuturesGetChecked:weakSetValidator()": "/**\n* Provides a weak set validator instance for testing purposes.\n* @return GetCheckedTypeValidator instance\n*/",
        "com.google.common.util.concurrent.FuturesGetChecked:bestGetCheckedTypeValidator()": "/**\n* Retrieves the best instance of GetCheckedTypeValidator.\n* @return GetCheckedTypeValidator singleton instance\n*/",
        "com.google.common.util.concurrent.FuturesGetChecked:newFromConstructor(java.lang.reflect.Constructor,java.lang.Throwable)": "/**\n* Creates a new instance using the specified constructor and cause.\n* @param constructor the constructor to invoke\n* @param cause the Throwable to pass as an argument\n* @return new instance or null if instantiation fails\n*/",
        "com.google.common.util.concurrent.FuturesGetChecked:isCheckedException(java.lang.Class)": "/**\n* Checks if the given exception type is a checked exception.\n* @param type exception class to check\n* @return true if checked, false if unchecked\n*/",
        "com.google.common.util.concurrent.FuturesGetChecked:<init>()": "/**\n* Initializes a FuturesGetChecked instance.\n*/",
        "com.google.common.util.concurrent.FuturesGetChecked:newWithCause(java.lang.Class,java.lang.Throwable)": "/**\n* Creates an exception instance with a cause.\n* @param exceptionClass the class of the exception to create\n* @param cause the Throwable cause for the exception\n* @return new exception instance\n*/",
        "com.google.common.util.concurrent.FuturesGetChecked:wrapAndThrowExceptionOrError(java.lang.Throwable,java.lang.Class)": "/**\n* Wraps and throws a Throwable as a specified exception or error type.\n* @param cause the throwable to wrap\n* @param exceptionClass the class of the exception to throw\n*/",
        "com.google.common.util.concurrent.FuturesGetChecked:hasConstructorUsableByGetChecked(java.lang.Class)": "/**\n* Checks if a constructor of the exception class can be used.\n* @param exceptionClass the class of the exception to check\n* @return true if usable, false otherwise\n*/",
        "com.google.common.util.concurrent.FuturesGetChecked:getChecked(com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator,java.util.concurrent.Future,java.lang.Class)": "/**\n* Retrieves a value from a Future, throwing a specified exception on failure.\n* @param validator validates the exception class\n* @param future the Future to get the value from\n* @param exceptionClass the class of the exception to throw\n* @return the value from the Future\n* @throws X if interrupted or execution fails\n*/",
        "com.google.common.util.concurrent.FuturesGetChecked:getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit)": "/**\n* Retrieves a value from a Future with a timeout, throwing specified exceptions on failure.\n* @param future the Future to retrieve the value from\n* @param exceptionClass the class of the exception to throw on failure\n* @param timeout the maximum time to wait\n* @param unit the time unit of the timeout\n* @return the retrieved value\n* @throws X if the operation fails\n*/",
        "com.google.common.util.concurrent.FuturesGetChecked:checkExceptionClassValidity(java.lang.Class)": "/**\n* Validates the exception class for Futures.getChecked usage.\n* @param exceptionClass the exception class to validate\n*/",
        "com.google.common.util.concurrent.FuturesGetChecked:getChecked(java.util.concurrent.Future,java.lang.Class)": "/**** Retrieves a value from a Future, throwing specified exception on failure. \n* @param future the Future to get the value from \n* @param exceptionClass the class of the exception to throw \n* @return the value from the Future \n* @throws X if interrupted or execution fails \n*/"
    },
    "com.google.common.util.concurrent.InterruptibleTask$Blocker": {
        "com.google.common.util.concurrent.InterruptibleTask$Blocker:setOwner(java.lang.Thread)": "/**\n* Sets the exclusive owner thread for synchronization.\n* @param thread the thread to set as the owner\n*/",
        "com.google.common.util.concurrent.InterruptibleTask$Blocker:getOwner()": "/**\n* Retrieves the thread currently owning the lock.\n* @return the owning Thread or null if no thread owns the lock\n*/",
        "com.google.common.util.concurrent.InterruptibleTask$Blocker:run()": "/**\n* Executes the run method for the thread.\n*/",
        "com.google.common.util.concurrent.InterruptibleTask$Blocker:toString()": "/**\n* Returns a string representation of the task.\n* @return String representation of the task's state\n*/",
        "com.google.common.util.concurrent.InterruptibleTask$Blocker:<init>(com.google.common.util.concurrent.InterruptibleTask)": "/**\n* Constructs a Blocker with the specified InterruptibleTask.\n* @param task the task to be interrupted\n*/"
    },
    "com.google.common.util.concurrent.InterruptibleTask": {
        "com.google.common.util.concurrent.InterruptibleTask:toString()": "/**\n* Returns a string representation of the current state of the Runnable.\n* @return String indicating the running state of the Runnable\n*/",
        "com.google.common.util.concurrent.InterruptibleTask:waitForInterrupt(java.lang.Thread)": "/**\n* Waits for an interrupt signal while managing thread state.\n* @param currentThread the thread to restore interrupt status if needed\n*/",
        "com.google.common.util.concurrent.InterruptibleTask:interruptTask()": "/**\n* Interrupts the currently running task if it is a Thread.\n* Ensures safe interruption and handling of blocked tasks.\n*/",
        "com.google.common.util.concurrent.InterruptibleTask:run()": "/**\n* Runs the task, managing thread state and handling interruptions.\n* @return void\n*/"
    },
    "com.google.common.util.concurrent.InterruptibleTask$DoNothingRunnable": {
        "com.google.common.util.concurrent.InterruptibleTask$DoNothingRunnable:run()": "/**\n* Executes the run method for the thread.\n*/"
    },
    "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter": {
        "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:delegate()": "/**\n* Returns the current delegate Future instance.\n* @return Future<V> representing the delegate\n*/",
        "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:<init>(java.util.concurrent.Future,java.util.concurrent.Executor)": "/**\n* Adapts a Future to a ListenableFuture.\n* @param delegate the original Future to adapt\n* @param adapterExecutor executor for asynchronous tasks\n*/",
        "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:addListener(java.lang.Runnable,java.util.concurrent.Executor)": "/**** Adds a listener to be executed upon delegate completion. \n* @param listener the task to run when delegate is done \n* @param exec the executor for running the listener \n*/",
        "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:<init>(java.util.concurrent.Future)": "/**\n* Constructs a ListenableFutureAdapter from a Future.\n* @param delegate the original Future to adapt\n*/"
    },
    "com.google.common.util.concurrent.ThreadFactoryBuilder": {
        "com.google.common.util.concurrent.ThreadFactoryBuilder:<init>()": "/**\n* Constructs a new ThreadFactoryBuilder instance.\n*/",
        "com.google.common.util.concurrent.ThreadFactoryBuilder:setDaemon(boolean)": "/**\n* Sets the daemon status for threads created by this factory.\n* @param daemon true for daemon threads, false for user threads\n* @return this ThreadFactoryBuilder instance\n*/",
        "com.google.common.util.concurrent.ThreadFactoryBuilder:setNameFormat(java.lang.String)": "/**\n* Sets the name format for created threads.\n* @param nameFormat format string for thread names\n* @return this ThreadFactoryBuilder instance\n*/",
        "com.google.common.util.concurrent.ThreadFactoryBuilder:doBuild(com.google.common.util.concurrent.ThreadFactoryBuilder)": "/**\n* Builds a customized ThreadFactory from the provided builder settings.\n* @param builder configuration for thread properties\n* @return a ThreadFactory instance with specified attributes\n*/",
        "com.google.common.util.concurrent.ThreadFactoryBuilder:setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)": "/**\n* Sets the uncaught exception handler for the ThreadFactoryBuilder.\n* @param uncaughtExceptionHandler handler for uncaught exceptions\n* @return this ThreadFactoryBuilder instance\n*/",
        "com.google.common.util.concurrent.ThreadFactoryBuilder:setThreadFactory(java.util.concurrent.ThreadFactory)": "/**** Sets the backing ThreadFactory and returns the builder instance. \n* @param backingThreadFactory the ThreadFactory to set \n* @return ThreadFactoryBuilder instance for chaining \n*/",
        "com.google.common.util.concurrent.ThreadFactoryBuilder:setPriority(int)": "/**\n* Sets the thread priority and validates it within bounds.\n* @param priority thread priority level to set\n* @return this ThreadFactoryBuilder instance\n*/",
        "com.google.common.util.concurrent.ThreadFactoryBuilder:build()": "/**\n* Builds a ThreadFactory using current settings.\n* @return a ThreadFactory instance configured with this instance's settings\n*/"
    },
    "com.google.common.util.concurrent.JdkFutureAdapters": {
        "com.google.common.util.concurrent.JdkFutureAdapters:<init>()": "/**\n* Private constructor to prevent instantiation of the JdkFutureAdapters class.\n*/",
        "com.google.common.util.concurrent.JdkFutureAdapters:listenInPoolThread(java.util.concurrent.Future,java.util.concurrent.Executor)": "/**\n* Converts a Future to a ListenableFuture using an executor.\n* @param future the original Future to adapt\n* @param executor executor for asynchronous tasks\n* @return ListenableFuture adapted from the original Future\n*/",
        "com.google.common.util.concurrent.JdkFutureAdapters:listenInPoolThread(java.util.concurrent.Future)": "/**\n* Converts a Future to ListenableFuture, adapting if necessary.\n* @param future the original Future to adapt\n* @return ListenableFuture instance\n*/"
    },
    "com.google.common.util.concurrent.ListenableFutureTask": {
        "com.google.common.util.concurrent.ListenableFutureTask:get(long,java.util.concurrent.TimeUnit)": "/**\n* Retrieves a value with a specified timeout.\n* @param timeout maximum wait time\n* @param unit time unit for the timeout\n* @return the retrieved value\n* @throws TimeoutException if the wait exceeds the timeout\n* @throws InterruptedException if the waiting thread is interrupted\n* @throws ExecutionException if the computation threw an exception\n*/",
        "com.google.common.util.concurrent.ListenableFutureTask:<init>(java.util.concurrent.Callable)": "/**\n* Initializes a ListenableFutureTask with a callable.\n* @param callable task to be executed\n*/",
        "com.google.common.util.concurrent.ListenableFutureTask:<init>(java.lang.Runnable,java.lang.Object)": "/**\n* Constructs a ListenableFutureTask with a runnable and a result.\n* @param runnable the task to execute\n* @param result the result to return on completion\n*/",
        "com.google.common.util.concurrent.ListenableFutureTask:create(java.util.concurrent.Callable)": "/**\n* Creates a ListenableFutureTask from a given callable.\n* @param callable task to be executed\n* @return ListenableFutureTask instance\n*/",
        "com.google.common.util.concurrent.ListenableFutureTask:create(java.lang.Runnable,java.lang.Object)": "/**\n* Creates a ListenableFutureTask with a runnable and a result.\n* @param runnable the task to execute\n* @param result the result to return on completion\n* @return a new ListenableFutureTask instance\n*/",
        "com.google.common.util.concurrent.ListenableFutureTask:addListener(java.lang.Runnable,java.util.concurrent.Executor)": "/**** Adds a listener for execution. \n* @param listener the Runnable to be executed \n* @param exec the Executor to run the listener \n*/",
        "com.google.common.util.concurrent.ListenableFutureTask:done()": "/**\n* Executes the registered runnables in reverse order upon completion.\n*/"
    },
    "com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue": {
        "com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue:add(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.Object)": "/**\n* Adds an event and its label to the respective queues.\n* @param event the event to be added\n* @param label associated label for the event\n*/",
        "com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue:dispatch()": "/**** Dispatches the current task to the executor if not already scheduled. */",
        "com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue:run()": "/**\n* Executes events from a queue while handling exceptions and maintaining state.\n*/",
        "com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue:<init>(java.lang.Object,java.util.concurrent.Executor)": "/**** Initializes PerListenerQueue with a listener and executor. \n* @param listener the event listener, must not be null\n* @param executor the executor for running events, must not be null\n*/"
    },
    "com.google.common.util.concurrent.MoreExecutors$Application": {
        "com.google.common.util.concurrent.MoreExecutors$Application:addShutdownHook(java.lang.Thread)": "/**\n* Adds a shutdown hook to the JVM.\n* @param hook thread to be executed on JVM shutdown\n*/",
        "com.google.common.util.concurrent.MoreExecutors$Application:addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)": "/**** Adds a delayed shutdown hook for the given ExecutorService. \n* @param service the ExecutorService to shutdown \n* @param terminationTimeout max wait time for shutdown \n* @param timeUnit time unit for the termination timeout \n*/",
        "com.google.common.util.concurrent.MoreExecutors$Application:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit)": "/**\n* Configures and returns an unconfigurable ExecutorService with a shutdown hook.\n* @param executor the ThreadPoolExecutor to configure\n* @param terminationTimeout max wait time for shutdown\n* @param timeUnit time unit for the termination timeout\n* @return configured ExecutorService\n*/",
        "com.google.common.util.concurrent.MoreExecutors$Application:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit)": "/**\n* Configures and returns a ScheduledExecutorService with a shutdown hook.\n* @param executor the ScheduledThreadPoolExecutor to configure\n* @param terminationTimeout max wait time for shutdown\n* @param timeUnit time unit for the termination timeout\n* @return configured ScheduledExecutorService\n*/",
        "com.google.common.util.concurrent.MoreExecutors$Application:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)": "/**\n* Configures an ExecutorService with a shutdown hook.\n* @param executor the ThreadPoolExecutor to configure\n* @return configured ExecutorService\n*/",
        "com.google.common.util.concurrent.MoreExecutors$Application:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor)": "/**** Configures a ScheduledExecutorService with a shutdown hook. \n* @param executor the ScheduledThreadPoolExecutor to configure \n* @return configured ScheduledExecutorService \n*/"
    },
    "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator": {
        "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:awaitTermination(long,java.util.concurrent.TimeUnit)": "/**\n* Awaits termination of the executor service within the specified timeout.\n* @param timeout maximum time to wait\n* @param unit time unit of the timeout\n* @return true if terminated, false if timeout elapsed\n*/",
        "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:isShutdown()": "/**\n* Checks if the delegate is in shutdown state.\n* @return true if shutdown, false otherwise\n*/",
        "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:isTerminated()": "/**\n* Checks if the delegate process is terminated.\n* @return true if terminated, false otherwise\n*/",
        "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:shutdown()": "/**\n* Shuts down the delegate component gracefully.\n*/",
        "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:shutdownNow()": "/**\n* Immediately shuts down the executor and returns the tasks that were not executed.\n* @return list of Runnable tasks that were not executed\n*/",
        "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:execute(java.lang.Runnable)": "/**\n* Executes the given Runnable command using the delegate.\n* @param command the Runnable task to be executed\n*/",
        "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:toString()": "/**\n* Returns a string representation of the object, including delegate info.\n* @return formatted string with class and delegate details\n*/",
        "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:<init>(java.util.concurrent.ExecutorService)": "/**\n* Creates a ListeningDecorator with a non-null ExecutorService.\n* @param delegate the ExecutorService to be wrapped\n*/"
    },
    "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask": {
        "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask:cancel(boolean)": "/**\n* Cancels the task and its scheduled delegate if successful.\n* @param mayInterruptIfRunning indicates if the task can be interrupted\n* @return true if the task was cancelled, false otherwise\n*/",
        "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask:getDelay(java.util.concurrent.TimeUnit)": "/**\n* Retrieves the delay in the specified time unit.\n* @param unit the time unit for the delay\n* @return delay duration in the specified unit\n*/",
        "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask:compareTo(java.util.concurrent.Delayed)": "/**\n* Compares this object with another Delayed for order.\n* @param other the Delayed object to compare with\n* @return negative, zero, or positive integer as this is less than, equal to, or greater than other\n*/",
        "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask:<init>(com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.ScheduledFuture)": "/**\n* Initializes a ListenableScheduledTask with delegates for future and scheduled tasks.\n* @param listenableDelegate the ListenableFuture to delegate to\n* @param scheduledDelegate the ScheduledFuture to manage scheduling\n*/"
    },
    "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask": {
        "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask:run()": "/**\n* Executes the delegate's run method and handles exceptions.\n* @throws Throwable if the delegate throws an exception\n*/",
        "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask:pendingToString()": "/**\n* Returns a string representation of the pending task.\n* @return String describing the task with its delegate\n*/",
        "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask:<init>(java.lang.Runnable)": "/**\n* Constructs a task with a non-null delegate.\n* @param delegate the Runnable task to execute\n*/"
    },
    "com.google.common.util.concurrent.Partially": {
        "com.google.common.util.concurrent.Partially:<init>()": "/**\n* Private constructor for Partially class to prevent instantiation.\n*/"
    },
    "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch": {
        "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch:<init>()": "/**\n* Constructs a SleepingStopwatch instance.\n*/",
        "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch:createFromSystemTimer()": "/**\n* Creates a SleepingStopwatch instance using the system timer.\n* @return a new SleepingStopwatch object\n*/"
    },
    "com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty": {
        "com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty:<init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,double)": "/**\n* Initializes SmoothBursty with a stopwatch and maximum burst duration.\n* @param stopwatch the SleepingStopwatch instance\n* @param maxBurstSeconds maximum allowed burst time in seconds\n*/",
        "com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty:coolDownIntervalMicros()": "/**\n* Returns the stable cooldown interval in microseconds.\n* @return cooldown interval in microseconds\n*/",
        "com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty:doSetRate(double,double)": "/**\n* Updates rate limits based on permits and interval.\n* @param permitsPerSecond rate of permits allowed per second\n* @param stableIntervalMicros interval in microseconds for stability\n*/",
        "com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty:storedPermitsToWaitTime(double,double)": "/**\n* Converts stored permits to equivalent wait time.\n* @param storedPermits available permits\n* @param permitsToTake permits requested to take\n* @return wait time in milliseconds\n*/"
    },
    "com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp": {
        "com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp:<init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,long,java.util.concurrent.TimeUnit,double)": "/**\n* Initializes SmoothWarmingUp with a stopwatch, warmup period, and cold factor.\n* @param stopwatch the SleepingStopwatch instance\n* @param warmupPeriod duration for warmup\n* @param timeUnit unit of the warmup period\n* @param coldFactor factor influencing warmup behavior\n*/",
        "com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp:permitsToTime(double)": "/**\n* Converts permits to time using a linear formula.\n* @param permits number of permits\n* @return calculated time in double format\n*/",
        "com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp:coolDownIntervalMicros()": "/**\n* Calculates cooldown interval in microseconds.\n* @return cooldown interval based on warmup period and max permits\n*/",
        "com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp:doSetRate(double,double)": "/**\n* Updates rate limits based on permits and interval duration.\n* @param permitsPerSecond rate of permits allowed per second\n* @param stableIntervalMicros duration of stable interval in microseconds\n*/",
        "com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp:storedPermitsToWaitTime(double,double)": "/**\n* Calculates wait time based on stored permits and permits to take.\n* @param storedPermits current permits available\n* @param permitsToTake permits requested to be taken\n* @return wait time in microseconds\n*/"
    },
    "com.google.common.util.concurrent.RateLimiter": {
        "com.google.common.util.concurrent.RateLimiter:mutex()": "/**\n* Retrieves a mutex object, initializing it if not already set.\n* @return an Object used for synchronization\n*/",
        "com.google.common.util.concurrent.RateLimiter:reserveAndGetWaitLength(int,long)": "/**\n* Reserves permits and calculates wait time in microseconds.\n* @param permits number of permits to reserve\n* @param nowMicros current time in microseconds\n* @return wait time in microseconds, or 0 if available immediately\n*/",
        "com.google.common.util.concurrent.RateLimiter:canAcquire(long,long)": "/**\n* Checks if resource can be acquired within the given timeout.\n* @param nowMicros current time in microseconds\n* @param timeoutMicros maximum wait time in microseconds\n* @return true if resource can be acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.RateLimiter:<init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)": "/**\n* Initializes RateLimiter with a stopwatch.\n* @param stopwatch the SleepingStopwatch instance to be used\n*/",
        "com.google.common.util.concurrent.RateLimiter:checkPermits(int)": "/**\n* Validates that requested permits are positive.\n* @param permits number of permits requested\n*/",
        "com.google.common.util.concurrent.RateLimiter:create(double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)": "/**\n* Creates a RateLimiter with specified rate and stopwatch.\n* @param permitsPerSecond rate of permits allowed per second\n* @param stopwatch instance for measuring time\n* @return configured RateLimiter instance\n*/",
        "com.google.common.util.concurrent.RateLimiter:create(double,long,java.util.concurrent.TimeUnit,double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)": "/**\n* Creates a RateLimiter with specified warmup and cold factor.\n* @param permitsPerSecond rate of permits allowed per second\n* @param warmupPeriod duration for warmup\n* @param unit time unit for warmup period\n* @param coldFactor factor influencing warmup behavior\n* @param stopwatch the SleepingStopwatch instance\n* @return configured RateLimiter\n*/",
        "com.google.common.util.concurrent.RateLimiter:setRate(double)": "/**\n* Sets the rate of permits per second.\n* @param permitsPerSecond positive rate value to set\n*/",
        "com.google.common.util.concurrent.RateLimiter:getRate()": "/**\n* Retrieves the current rate in a thread-safe manner.\n* @return the current rate as a double\n*/",
        "com.google.common.util.concurrent.RateLimiter:reserve(int)": "/**\n* Reserves permits and returns wait time in microseconds.\n* @param permits number of permits to reserve\n* @return wait time in microseconds\n*/",
        "com.google.common.util.concurrent.RateLimiter:tryAcquire(int,long,java.util.concurrent.TimeUnit)": "/**\n* Attempts to acquire permits within a specified timeout.\n* @param permits number of permits to acquire\n* @param timeout maximum wait time\n* @param unit time unit for the timeout\n* @return true if permits acquired, false if timeout reached\n*/",
        "com.google.common.util.concurrent.RateLimiter:toString()": "/**\n* Returns a string representation of the RateLimiter with its stable rate.\n* @return formatted string showing the stable rate in queries per second (qps)\n*/",
        "com.google.common.util.concurrent.RateLimiter:acquire(int)": "/**\n* Acquires permits after reserving and sleeping for wait time.\n* @param permits number of permits to acquire\n* @return wait time in seconds as a double\n*/",
        "com.google.common.util.concurrent.RateLimiter:tryAcquire(java.time.Duration)": "/**\n* Attempts to acquire a permit within the given timeout duration.\n* @param timeout maximum wait time to acquire the permit\n* @return true if permit acquired, false if timeout reached\n*/",
        "com.google.common.util.concurrent.RateLimiter:tryAcquire(long,java.util.concurrent.TimeUnit)": "/**\n* Attempts to acquire one permit within a specified timeout.\n* @param timeout maximum wait time for acquiring the permit\n* @param unit time unit for the timeout\n* @return true if permit acquired, false if timeout reached\n*/",
        "com.google.common.util.concurrent.RateLimiter:tryAcquire(int)": "/**\n* Attempts to acquire specified permits without waiting.\n* @param permits number of permits to acquire\n* @return true if permits acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.RateLimiter:tryAcquire()": "/**\n* Attempts to acquire one permit immediately.\n* @return true if permit acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.RateLimiter:tryAcquire(int,java.time.Duration)": "/**\n* Attempts to acquire specified permits within a timeout duration.\n* @param permits number of permits to acquire\n* @param timeout maximum wait time for acquiring permits\n* @return true if permits acquired, false otherwise\n*/",
        "com.google.common.util.concurrent.RateLimiter:acquire()": "/**\n* Acquires one permit and returns the wait time in seconds.\n* @return wait time in seconds as a double\n*/",
        "com.google.common.util.concurrent.RateLimiter:create(double)": "/**\n* Creates a RateLimiter with a specified rate of permits per second.\n* @param permitsPerSecond rate of permits allowed per second\n* @return configured RateLimiter instance\n*/",
        "com.google.common.util.concurrent.RateLimiter:create(double,long,java.util.concurrent.TimeUnit)": "/******************************************************************************* \n* Creates a RateLimiter with specified permits per second and warmup duration.\n* @param permitsPerSecond rate of permits allowed per second\n* @param warmupPeriod duration for warmup\n* @param unit time unit for warmup period\n* @return configured RateLimiter instance\n*******************************************************************************/",
        "com.google.common.util.concurrent.RateLimiter:create(double,java.time.Duration)": "/**\n* Creates a RateLimiter with specified permits per second and warmup duration.\n* @param permitsPerSecond rate of permits allowed per second\n* @param warmupPeriod duration for warmup\n* @return configured RateLimiter instance\n*/"
    },
    "com.google.common.util.concurrent.Runnables$1": {
        "com.google.common.util.concurrent.Runnables$1:<init>()": "/**\n* Private constructor to prevent instantiation of the Runnables class.\n*/"
    },
    "com.google.common.util.concurrent.Runnables": {
        "com.google.common.util.concurrent.Runnables:<init>()": "/**\n* Private constructor to prevent instantiation of the Runnables class.\n*/"
    },
    "com.google.common.util.concurrent.SequentialExecutor$1": {
        "com.google.common.util.concurrent.SequentialExecutor$1:toString()": "/**\n* Returns a string representation of the SequentialExecutor instance.\n* @return formatted string with executor details\n*/"
    },
    "com.google.common.util.concurrent.SequentialExecutor$QueueWorker": {
        "com.google.common.util.concurrent.SequentialExecutor$QueueWorker:workOnQueue()": "/**\n* Processes tasks from a queue, handling interruptions and exceptions.\n*/",
        "com.google.common.util.concurrent.SequentialExecutor$QueueWorker:toString()": "/**\n* Returns a string representation of the SequentialExecutorWorker's state or running task.\n* @return String describing the current running task or worker state\n*/",
        "com.google.common.util.concurrent.SequentialExecutor$QueueWorker:run()": "/**\n* Executes tasks from a queue, handling errors and updating worker state.\n*/"
    },
    "com.google.common.util.concurrent.SequentialExecutor": {
        "com.google.common.util.concurrent.SequentialExecutor:toString()": "/**\n* Returns a string representation of the SequentialExecutor instance.\n* @return formatted string with executor details and identity hash code\n*/",
        "com.google.common.util.concurrent.SequentialExecutor:<init>(java.util.concurrent.Executor)": "/**\n* Initializes SequentialExecutor with a non-null Executor.\n* @param executor the Executor to be used\n*/",
        "com.google.common.util.concurrent.SequentialExecutor:execute(java.lang.Runnable)": "/**\n* Executes a Runnable task, ensuring it's not null and managing worker state and queue.\n* @param task the Runnable task to execute\n*/"
    },
    "com.google.common.util.concurrent.ServiceManager$Listener": {
        "com.google.common.util.concurrent.ServiceManager$Listener:healthy()": "/**\n* Indicates the health status of the system.\n*/",
        "com.google.common.util.concurrent.ServiceManager$Listener:stopped()": "/**\n* Indicates that the process has been stopped.\n*/",
        "com.google.common.util.concurrent.ServiceManager$Listener:<init>()": "/**\n* Default constructor for the Listener class.\n*/",
        "com.google.common.util.concurrent.ServiceManager$Listener:failure(com.google.common.util.concurrent.Service)": "/**\n* Handles failure for the specified service.\n* @param service the service that encountered a failure\n*/"
    },
    "com.google.common.util.concurrent.ServiceManager$FailedService": {
        "com.google.common.util.concurrent.ServiceManager$FailedService:<init>(com.google.common.util.concurrent.Service)": "/**\n* Constructs a FailedService with service details and failure cause.\n* @param service the Service object containing failure information\n*/"
    },
    "com.google.common.util.concurrent.ServiceManager$NoOpService": {
        "com.google.common.util.concurrent.ServiceManager$NoOpService:doStart()": "/**\n* Notifies that the process has started.\n*/",
        "com.google.common.util.concurrent.ServiceManager$NoOpService:doStop()": "/**\n* Stops the current process and notifies that it has stopped.\n*/"
    },
    "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard": {
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard:isSatisfied()": "/**\n* Checks if all services are running or if any has terminated/failed.\n* @return true if conditions are satisfied, otherwise false\n*/"
    },
    "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$StoppedGuard": {
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$StoppedGuard:isSatisfied()": "/**\n* Checks if all services are either terminated or failed.\n* @return true if all services are accounted for, false otherwise\n*/"
    },
    "com.google.common.util.concurrent.SimpleTimeLimiter": {
        "com.google.common.util.concurrent.SimpleTimeLimiter:newProxy(java.lang.Class,java.lang.reflect.InvocationHandler)": "/**\n* Creates a new proxy instance for the specified interface.\n* @param interfaceType the interface class to proxy\n* @param handler the invocation handler for method calls\n* @return a proxy instance of the specified interface type\n*/",
        "com.google.common.util.concurrent.SimpleTimeLimiter:declaresInterruptedEx(java.lang.reflect.Method)": "/**\n* Checks if the method declares InterruptedException.\n* @param method the method to check for exceptions\n* @return true if InterruptedException is declared, false otherwise\n*/",
        "com.google.common.util.concurrent.SimpleTimeLimiter:<init>(java.util.concurrent.ExecutorService)": "/**\n* Initializes SimpleTimeLimiter with an ExecutorService.\n* @param executor the ExecutorService to use, must not be null\n*/",
        "com.google.common.util.concurrent.SimpleTimeLimiter:checkPositiveTimeout(long)": "/**\n* Validates that the timeout duration is positive.\n* @param timeoutDuration duration to check\n*/",
        "com.google.common.util.concurrent.SimpleTimeLimiter:wrapAndThrowExecutionExceptionOrError(java.lang.Throwable)": "/**\n* Wraps and throws exceptions based on the cause type.\n* @param cause the throwable to wrap and throw\n*/",
        "com.google.common.util.concurrent.SimpleTimeLimiter:wrapAndThrowRuntimeExecutionExceptionOrError(java.lang.Throwable)": "/**\n* Wraps and throws a RuntimeException or Error based on the cause type.\n* @param cause the throwable to wrap and throw\n*/",
        "com.google.common.util.concurrent.SimpleTimeLimiter:findInterruptibleMethods(java.lang.Class)": "/**\n* Finds methods in an interface that declare InterruptedException.\n* @param interfaceType the class to inspect for methods\n* @return a set of methods that declare InterruptedException\n*/",
        "com.google.common.util.concurrent.SimpleTimeLimiter:create(java.util.concurrent.ExecutorService)": "/**\n* Creates a SimpleTimeLimiter with the provided ExecutorService.\n* @param executor the ExecutorService to use, must not be null\n* @return a new SimpleTimeLimiter instance\n*/",
        "com.google.common.util.concurrent.SimpleTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)": "/**\n* Executes a callable with a timeout.\n* @param callable the task to execute\n* @param timeoutDuration max duration to wait\n* @param timeoutUnit unit of the timeout duration\n* @return result of the callable\n* @throws TimeoutException if the timeout expires\n* @throws InterruptedException if the execution is interrupted\n* @throws ExecutionException if the callable throws an exception\n*/",
        "com.google.common.util.concurrent.SimpleTimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)": "/**\n* Executes a callable with a timeout, returning its result or throwing exceptions.\n* @param callable task to execute\n* @param timeoutDuration max wait time\n* @param timeoutUnit unit of the timeout\n* @return result of the callable\n* @throws TimeoutException if the timeout is exceeded\n* @throws ExecutionException if the callable throws an exception\n*/",
        "com.google.common.util.concurrent.SimpleTimeLimiter:runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)": "/**\n* Executes a Runnable with a specified timeout.\n* @param runnable the task to execute\n* @param timeoutDuration maximum time to wait\n* @param timeoutUnit unit of the timeout duration\n*/",
        "com.google.common.util.concurrent.SimpleTimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)": "/**\n* Executes a Runnable with a timeout, ensuring non-null parameters.\n* @param runnable task to execute\n* @param timeoutDuration max execution time\n* @param timeoutUnit unit of the timeout duration\n* @throws TimeoutException if execution exceeds the timeout\n*/",
        "com.google.common.util.concurrent.SimpleTimeLimiter:throwCause(java.lang.Exception,boolean)": "/**\n* Throws the root cause of an exception, optionally combining stack traces.\n* @param e the original exception\n* @param combineStackTraces flag to combine stack traces if true\n* @throws Exception the cause or the original exception\n*/",
        "com.google.common.util.concurrent.SimpleTimeLimiter:newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit)": "/**\n* Creates a proxy for the given target with a timeout.\n* @param target the object to proxy\n* @param interfaceType the interface type for the proxy\n* @param timeoutDuration the duration for method execution timeout\n* @param timeoutUnit the unit of the timeout duration\n* @return a proxy instance of the specified interface type\n*/",
        "com.google.common.util.concurrent.SimpleTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit,boolean)": "/**\n* Executes a callable with a timeout; cancels if exceeded.\n* @param callable task to execute\n* @param timeoutDuration max wait time\n* @param timeoutUnit unit of timeout\n* @param amInterruptible allows interruption\n* @return result of callable\n* @throws Exception on execution failure or timeout\n*/"
    },
    "com.google.common.util.concurrent.UncheckedTimeoutException": {
        "com.google.common.util.concurrent.UncheckedTimeoutException:<init>(java.lang.Throwable)": "/**\n* Constructs an UncheckedTimeoutException with an optional cause.\n* @param cause the throwable that caused this exception, or null\n*/",
        "com.google.common.util.concurrent.UncheckedTimeoutException:<init>()": "/**\n* Constructs a new UncheckedTimeoutException with no detail message.\n*/",
        "com.google.common.util.concurrent.UncheckedTimeoutException:<init>(java.lang.String)": "/**\n* Constructs an UncheckedTimeoutException with an optional message.\n* @param message detail message or null\n*/",
        "com.google.common.util.concurrent.UncheckedTimeoutException:<init>(java.lang.String,java.lang.Throwable)": "/**\n* Constructs an UncheckedTimeoutException with a message and cause.\n* @param message optional detail message\n* @param cause optional cause of the exception\n*/"
    },
    "com.google.common.util.concurrent.SmoothRateLimiter": {
        "com.google.common.util.concurrent.SmoothRateLimiter:resync(long)": "/**\n* Resynchronizes permits if the next free ticket is in the past.\n* @param nowMicros current time in microseconds\n*/",
        "com.google.common.util.concurrent.SmoothRateLimiter:doGetRate()": "/**\n* Calculates the rate based on stable interval in microseconds.\n* @return rate as a double value\n*/",
        "com.google.common.util.concurrent.SmoothRateLimiter:queryEarliestAvailable(long)": "/**\n* Returns the next available ticket time in microseconds.\n* @param nowMicros current time in microseconds\n* @return next available ticket time in microseconds\n*/",
        "com.google.common.util.concurrent.SmoothRateLimiter:doSetRate(double,long)": "/**\n* Sets the rate of permits per second and resynchronizes time.\n* @param permitsPerSecond rate of permits issued per second\n* @param nowMicros current time in microseconds\n*/",
        "com.google.common.util.concurrent.SmoothRateLimiter:reserveEarliestAvailable(int,long)": "/**\n* Reserves earliest available permits and updates next free ticket time.\n* @param requiredPermits number of permits to reserve\n* @param nowMicros current time in microseconds\n* @return timestamp of the earliest available permit\n*/",
        "com.google.common.util.concurrent.SmoothRateLimiter:<init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)": "/**\n* Constructs a SmoothRateLimiter using a SleepingStopwatch.\n* @param stopwatch the SleepingStopwatch instance for rate limiting\n*/"
    },
    "com.google.common.util.concurrent.Striped$LargeLazyStriped": {
        "com.google.common.util.concurrent.Striped$LargeLazyStriped:size()": "/**\n* Returns the current size of the collection.\n* @return the number of elements in the collection\n*/",
        "com.google.common.util.concurrent.Striped$LargeLazyStriped:getAt(int)": "/**\n* Retrieves an element at a specified index, creating it if absent.\n* @param index the index to access\n* @return the existing or newly created element\n*/",
        "com.google.common.util.concurrent.Striped$LargeLazyStriped:<init>(int,com.google.common.base.Supplier)": "/**\n* Initializes LargeLazyStriped with stripes and a supplier for values.\n* @param stripes number of stripes for locking\n* @param supplier supplier for creating values\n*/"
    },
    "com.google.common.util.concurrent.Striped$PaddedLock": {
        "com.google.common.util.concurrent.Striped$PaddedLock:<init>()": "/**\n* Constructs a PaddedLock instance with non-fair locking policy.\n*/"
    },
    "com.google.common.util.concurrent.Striped$PaddedSemaphore": {
        "com.google.common.util.concurrent.Striped$PaddedSemaphore:<init>(int)": "/**\n* Constructs PaddedSemaphore with specified number of permits.\n* @param permits the number of permits for the semaphore\n*/"
    },
    "com.google.common.util.concurrent.Striped$PowerOfTwoStriped": {
        "com.google.common.util.concurrent.Striped$PowerOfTwoStriped:indexFor(java.lang.Object)": "/**\n* Computes index for a given key using its hash code.\n* @param key object to derive index from\n* @return calculated index based on hash and mask\n*/",
        "com.google.common.util.concurrent.Striped$PowerOfTwoStriped:<init>(int)": "/**\n* Constructs a PowerOfTwoStriped object with a positive stripe count.\n* @param stripes number of stripes, must be positive\n*/",
        "com.google.common.util.concurrent.Striped$PowerOfTwoStriped:get(java.lang.Object)": "/**\n* Retrieves value by key using its computed index.\n* @param key object to find the associated value\n* @return value associated with the key or null if not found\n*/"
    },
    "com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference": {
        "com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference:<init>(java.lang.Object,int,java.lang.ref.ReferenceQueue)": "/**\n* Constructs an ArrayReference with a referent and index.\n* @param referent the object being referenced\n* @param index the index of the reference in the array\n* @param queue the reference queue for cleanup\n*/"
    },
    "com.google.common.util.concurrent.Striped$SmallLazyStriped": {
        "com.google.common.util.concurrent.Striped$SmallLazyStriped:size()": "/**\n* Returns the current size of the collection.\n* @return the number of elements in the collection\n*/",
        "com.google.common.util.concurrent.Striped$SmallLazyStriped:drainQueue()": "/**\n* Drains and clears references from the queue.\n*/",
        "com.google.common.util.concurrent.Striped$SmallLazyStriped:<init>(int,com.google.common.base.Supplier)": "/**\n* Initializes SmallLazyStriped with stripes and a supplier.\n* @param stripes number of stripes, must be positive\n* @param supplier provides instances of type L\n*/",
        "com.google.common.util.concurrent.Striped$SmallLazyStriped:getAt(int)": "/**\n* Retrieves an element at the specified index, creating it if not present.\n* @param index the index of the element to retrieve\n* @return the element at the index or a newly created one\n*/"
    },
    "com.google.common.util.concurrent.Striped$WeakSafeCondition": {
        "com.google.common.util.concurrent.Striped$WeakSafeCondition:<init>(java.util.concurrent.locks.Condition,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock)": "/**\n* Constructs a WeakSafeCondition with a delegate and strong reference lock.\n* @param delegate the condition to be wrapped\n* @param strongReference the associated read-write lock\n*/",
        "com.google.common.util.concurrent.Striped$WeakSafeCondition:delegate()": "/**\n* Returns the delegate condition.\n* @return the delegate Condition object\n*/"
    },
    "com.google.common.util.concurrent.Striped$WeakSafeLock": {
        "com.google.common.util.concurrent.Striped$WeakSafeLock:<init>(java.util.concurrent.locks.Lock,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock)": "/**\n* Constructs a WeakSafeLock with a delegate lock and a strong reference.\n* @param delegate the lock to be wrapped\n* @param strongReference the strong reference to the read-write lock\n*/",
        "com.google.common.util.concurrent.Striped$WeakSafeLock:delegate()": "/**\n* Returns the delegate Lock instance.\n* @return the Lock object being delegated\n*/",
        "com.google.common.util.concurrent.Striped$WeakSafeLock:newCondition()": "/**\n* Creates a new condition instance.\n* @return a WeakSafeCondition wrapping a new condition\n*/"
    },
    "com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock": {
        "com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock:<init>()": "/**\n* Initializes a new instance of WeakSafeReadWriteLock with a ReentrantReadWriteLock.\n*/",
        "com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock:readLock()": "/**\n* Returns a read lock wrapped in a WeakSafeLock.\n* @return Lock instance that provides read access\n*/",
        "com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock:writeLock()": "/**\n* Returns a write lock wrapped in a WeakSafeLock.\n* @return Lock instance for writing operations\n*/"
    },
    "com.google.common.util.concurrent.Striped": {
        "com.google.common.util.concurrent.Striped:<init>()": "/**\n* Private constructor for Striped class to prevent instantiation.\n*/",
        "com.google.common.util.concurrent.Striped:custom(int,com.google.common.base.Supplier)": "/**\n* Creates a Striped instance with specified stripes and a value supplier.\n* @param stripes number of stripes\n* @param supplier provides values for the stripes\n* @return Striped instance of type L\n*/",
        "com.google.common.util.concurrent.Striped:lazyWeakLock(int)": "/**\n* Creates a lazy initialized weak lock with specified stripes.\n* @param stripes number of lock stripes\n* @return Striped<Lock> instance for concurrent access\n*/",
        "com.google.common.util.concurrent.Striped:lazyWeakSemaphore(int,int)": "/**\n* Creates a lazy weak semaphore with specified stripes and permits.\n* @param stripes number of stripes for the semaphore\n* @param permits number of permits for each semaphore\n* @return Striped<Semaphore> instance\n*/",
        "com.google.common.util.concurrent.Striped:smear(int)": "/**\n* Applies a hash smearing algorithm to improve hash distribution.\n* @param hashCode initial hash code to be smeared\n* @return modified hash code after smearing\n*/",
        "com.google.common.util.concurrent.Striped:lazyWeakReadWriteLock(int)": "/**\n* Creates a Striped ReadWriteLock with specified stripes.\n* @param stripes number of stripes for the lock\n* @return Striped<ReadWriteLock> instance\n*/",
        "com.google.common.util.concurrent.Striped:lock(int)": "/**\n* Creates a Striped Lock instance with the specified number of stripes.\n* @param stripes number of stripes for the Lock\n* @return Striped<Lock> instance\n*/",
        "com.google.common.util.concurrent.Striped:semaphore(int,int)": "/**\n* Creates a Striped instance of Semaphore with specified stripes and permits.\n* @param stripes number of stripes\n* @param permits number of permits for each semaphore\n* @return Striped<Semaphore> instance\n*/",
        "com.google.common.util.concurrent.Striped:readWriteLock(int)": "/**\n* Creates a Striped instance of ReadWriteLock with specified stripes.\n* @param stripes number of stripes for the Striped instance\n* @return Striped<ReadWriteLock> instance\n*/",
        "com.google.common.util.concurrent.Striped:ceilToPowerOfTwo(int)": "/**\n* Rounds up x to the nearest power of two.\n* @param x positive integer to round\n* @return nearest power of two as an integer\n*/",
        "com.google.common.util.concurrent.Striped:bulkGet(java.lang.Iterable)": "/**\n* Retrieves locks corresponding to given keys.\n* @param keys iterable of keys to fetch locks for\n* @return an unmodifiable Iterable of locks\n*/"
    },
    "com.google.common.util.concurrent.TimeoutFuture$Fire": {
        "com.google.common.util.concurrent.TimeoutFuture$Fire:run()": "/**\n* Executes timeout handling for a future task, setting exceptions or cancelling if done.\n*/",
        "com.google.common.util.concurrent.TimeoutFuture$Fire:<init>(com.google.common.util.concurrent.TimeoutFuture)": "/**\n* Initializes a reference to a TimeoutFuture.\n* @param timeoutFuture the TimeoutFuture instance to be referenced\n*/"
    },
    "com.google.common.util.concurrent.TimeoutFuture$TimeoutFutureException": {
        "com.google.common.util.concurrent.TimeoutFuture$TimeoutFutureException:<init>(java.lang.String)": "/**\n* Constructs a TimeoutFutureException with the specified message.\n* @param message detail message for the exception\n*/",
        "com.google.common.util.concurrent.TimeoutFuture$TimeoutFutureException:fillInStackTrace()": "/**\n* Clears the stack trace and returns the current Throwable instance.\n* @return this Throwable with an empty stack trace\n*/"
    },
    "com.google.common.util.concurrent.TimeoutFuture": {
        "com.google.common.util.concurrent.TimeoutFuture:pendingToString()": "/**\n* Returns a string representation of pending input future and timer delay.\n* @return formatted string or null if no input future exists\n*/",
        "com.google.common.util.concurrent.TimeoutFuture:afterDone()": "/**\n* Cleans up resources after task completion, cancelling the timer and resetting references.\n*/",
        "com.google.common.util.concurrent.TimeoutFuture:<init>(com.google.common.util.concurrent.ListenableFuture)": "/**\n* Constructs a TimeoutFuture with a non-null delegate.\n* @param delegate the ListenableFuture to be wrapped\n*/",
        "com.google.common.util.concurrent.TimeoutFuture:create(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)": "/**\n* Creates a TimeoutFuture with a scheduled task.\n* @param delegate the future to wrap, @param time delay duration, @param unit time unit, \n* @param scheduledExecutor service for scheduling\n* @return a ListenableFuture that completes with a timeout\n*/"
    },
    "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask": {
        "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask:isDone()": "/**\n* Checks if the task is completed.\n* @return true if the task is done, false otherwise\n*/",
        "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask:afterRanInterruptiblySuccess(com.google.common.util.concurrent.ListenableFuture)": "/**\n* Sets the future result after a successful interruptible operation.\n* @param result the ListenableFuture to be set\n*/",
        "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask:afterRanInterruptiblyFailure(java.lang.Throwable)": "/**\n* Sets the exception encountered during interruptible failure.\n* @param error the Throwable that represents the failure\n*/",
        "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask:toPendingString()": "/**\n* Returns the string representation of the callable object.\n* @return String representation of the callable\n*/",
        "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask:runInterruptibly()": "/**\n* Executes a callable and ensures it returns a non-null Future.\n* @return ListenableFuture result of the callable execution\n* @throws Exception if callable execution fails\n*/"
    },
    "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask": {
        "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask:isDone()": "/**\n* Checks if the task is completed.\n* @return true if the task is done, false otherwise\n*/",
        "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask:runInterruptibly()": "/**\n* Executes the callable and returns its result.\n* @return result of the callable execution\n* @throws Exception if the callable throws an exception\n*/",
        "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask:afterRanInterruptiblySuccess(java.lang.Object)": "/**\n* Sets the result of the task after successful interruptible execution.\n* @param result the value to set, can be null\n*/",
        "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask:afterRanInterruptiblyFailure(java.lang.Throwable)": "/**\n* Handles failure after an interruptible run by setting the exception.\n* @param error the Throwable that caused the failure\n*/",
        "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask:toPendingString()": "/**\n* Returns the string representation of the callable object.\n* @return String representation of the callable\n*/"
    },
    "com.google.common.util.concurrent.TrustedListenableFutureTask": {
        "com.google.common.util.concurrent.TrustedListenableFutureTask:<init>(com.google.common.util.concurrent.AsyncCallable)": "/**\n* Initializes a TrustedListenableFutureTask with an AsyncCallable.\n* @param callable task to be executed asynchronously\n*/",
        "com.google.common.util.concurrent.TrustedListenableFutureTask:<init>(java.util.concurrent.Callable)": "/**\n* Initializes a TrustedListenableFutureTask with a callable.\n* @param callable task to be executed\n*/",
        "com.google.common.util.concurrent.TrustedListenableFutureTask:pendingToString()": "/**\n* Returns a string representation of the pending task.\n* @return string description of the task or superclass representation if none\n*/",
        "com.google.common.util.concurrent.TrustedListenableFutureTask:afterDone()": "/**\n* Finalizes task completion; interrupts if previously interrupted.\n* Clears the current task reference.\n*/",
        "com.google.common.util.concurrent.TrustedListenableFutureTask:create(com.google.common.util.concurrent.AsyncCallable)": "/**\n* Creates a TrustedListenableFutureTask from an AsyncCallable.\n* @param callable task to be executed asynchronously\n* @return a new TrustedListenableFutureTask instance\n*/",
        "com.google.common.util.concurrent.TrustedListenableFutureTask:create(java.util.concurrent.Callable)": "/**\n* Creates a TrustedListenableFutureTask with the given callable.\n* @param callable task to be executed\n* @return a new TrustedListenableFutureTask instance\n*/",
        "com.google.common.util.concurrent.TrustedListenableFutureTask:create(java.lang.Runnable,java.lang.Object)": "/**\n* Creates a TrustedListenableFutureTask from a Runnable and a result value.\n* @param runnable task to execute\n* @param result value to return upon completion\n* @return a new TrustedListenableFutureTask\n*/",
        "com.google.common.util.concurrent.TrustedListenableFutureTask:run()": "/**\n* Executes the assigned task and clears the reference afterward.\n* @return void\n*/"
    },
    "com.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter": {
        "com.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter:uncaughtException(java.lang.Thread,java.lang.Throwable)": "/**\n* Handles uncaught exceptions by logging and terminating the application.\n* @param t Thread where the exception occurred\n* @param e Throwable exception to log\n*/"
    },
    "com.google.common.util.concurrent.UncaughtExceptionHandlers": {
        "com.google.common.util.concurrent.UncaughtExceptionHandlers:<init>()": "/**\n* Private constructor to prevent instantiation of UncaughtExceptionHandlers class.\n*/",
        "com.google.common.util.concurrent.UncaughtExceptionHandlers:systemExit()": "/**\n* Creates an UncaughtExceptionHandler that exits the system on uncaught exceptions.\n* @return UncaughtExceptionHandler instance\n*/"
    },
    "com.google.common.util.concurrent.WrappingExecutorService": {
        "com.google.common.util.concurrent.WrappingExecutorService:wrapTask(java.lang.Runnable)": "/**\n* Wraps a Runnable task to handle exceptions and restore interrupts.\n* @param command the Runnable task to be wrapped\n* @return a Runnable that executes the wrapped task with exception handling\n*/",
        "com.google.common.util.concurrent.WrappingExecutorService:shutdown()": "/**\n* Initiates the shutdown process for the delegate.\n*/",
        "com.google.common.util.concurrent.WrappingExecutorService:shutdownNow()": "/**\n* Immediately shuts down executor, returning tasks that were not executed.\n* @return List of Runnable tasks that were waiting to be executed\n*/",
        "com.google.common.util.concurrent.WrappingExecutorService:isShutdown()": "/**\n* Checks if the delegate service is shut down.\n* @return true if shut down, false otherwise\n*/",
        "com.google.common.util.concurrent.WrappingExecutorService:isTerminated()": "/**\n* Checks if the delegate process has terminated.\n* @return true if terminated, false otherwise\n*/",
        "com.google.common.util.concurrent.WrappingExecutorService:awaitTermination(long,java.util.concurrent.TimeUnit)": "/**\n* Waits for termination within a specified timeout.\n* @param timeout maximum time to wait\n* @param unit time unit of the timeout\n* @return true if terminated, false if timeout reached\n*/",
        "com.google.common.util.concurrent.WrappingExecutorService:<init>(java.util.concurrent.ExecutorService)": "/**\n* Constructs a WrappingExecutorService with a non-null delegate.\n* @param delegate the ExecutorService to wrap\n*/",
        "com.google.common.util.concurrent.WrappingExecutorService:submit(java.util.concurrent.Callable)": "/**\n* Submits a callable task for execution.\n* @param task the task to execute; must not be null\n* @return Future representing the task's result\n*/",
        "com.google.common.util.concurrent.WrappingExecutorService:execute(java.lang.Runnable)": "/**\n* Executes a wrapped Runnable task with exception handling.\n* @param command the Runnable task to execute\n*/",
        "com.google.common.util.concurrent.WrappingExecutorService:submit(java.lang.Runnable)": "/**\n* Submits a Runnable task for execution.\n* @param task the Runnable task to be submitted\n* @return a Future representing the task's result\n*/",
        "com.google.common.util.concurrent.WrappingExecutorService:submit(java.lang.Runnable,java.lang.Object)": "/**\n* Submits a Runnable task with a result for execution.\n* @param task the Runnable task to execute\n* @param result the result to return upon completion\n* @return Future representing the pending result of the task\n*/",
        "com.google.common.util.concurrent.WrappingExecutorService:wrapTasks(java.util.Collection)": "/**\n* Wraps tasks in Callable and returns an ImmutableList.\n* @param tasks collection of Callable tasks to wrap\n* @return ImmutableList of wrapped Callable tasks\n*/",
        "com.google.common.util.concurrent.WrappingExecutorService:invokeAll(java.util.Collection)": "/**\n* Invokes all given tasks and returns their futures.\n* @param tasks collection of Callable tasks to execute\n* @return List of Future objects for the executed tasks\n*/",
        "com.google.common.util.concurrent.WrappingExecutorService:invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)": "/**\n* Invokes all tasks with a timeout.\n* @param tasks collection of Callable tasks to execute\n* @param timeout maximum time to wait for task completion\n* @param unit time unit of the timeout\n* @return List of Future results for the tasks\n*/",
        "com.google.common.util.concurrent.WrappingExecutorService:invokeAny(java.util.Collection)": "/**\n* Executes any task from the collection and returns its result.\n* @param tasks collection of Callable tasks to execute\n* @return result of the first successfully executed task\n*/",
        "com.google.common.util.concurrent.WrappingExecutorService:invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)": "/**\n* Executes any task from a collection, returning its result or throwing exceptions.\n* @param tasks collection of Callable tasks to execute\n* @param timeout maximum time to wait for a task to complete\n* @param unit time unit for the timeout\n* @return result of the first completed task\n*/"
    },
    "com.google.common.util.concurrent.WrappingScheduledExecutorService": {
        "com.google.common.util.concurrent.WrappingScheduledExecutorService:schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)": "/**\n* Schedules a task for execution after a specified delay.\n* @param command the task to execute\n* @param delay the time to wait before execution\n* @param unit the time unit of the delay\n* @return a ScheduledFuture representing the pending completion of the task\n*/",
        "com.google.common.util.concurrent.WrappingScheduledExecutorService:schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)": "/**\n* Schedules a task for execution after a specified delay.\n* @param task the task to be executed\n* @param delay delay time before execution\n* @param unit time unit of the delay\n* @return ScheduledFuture representing the pending result of the task\n*/",
        "com.google.common.util.concurrent.WrappingScheduledExecutorService:scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": "/**\n* Schedules a task to run at a fixed rate.\n* @param command task to execute; @param initialDelay delay before first execution; \n* @param period interval between executions; @param unit time unit for delays and periods\n* @return ScheduledFuture representing the scheduled task\n*/",
        "com.google.common.util.concurrent.WrappingScheduledExecutorService:scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": "/**\n* Schedules a task with fixed delays between executions.\n* @param command the task to execute\n* @param initialDelay delay before first execution\n* @param delay delay between subsequent executions\n* @param unit time unit for delays\n* @return ScheduledFuture representing the scheduled task\n*/",
        "com.google.common.util.concurrent.WrappingScheduledExecutorService:<init>(java.util.concurrent.ScheduledExecutorService)": "/**\n* Constructs a WrappingScheduledExecutorService with a delegate.\n* @param delegate the ScheduledExecutorService to wrap\n*/"
    },
    "com.google.common.xml.XmlEscapers": {
        "com.google.common.xml.XmlEscapers:<init>()": "/**\n* Private constructor to prevent instantiation of the XmlEscapers class.\n*/"
    },
    "com.google.thirdparty.publicsuffix.PublicSuffixPatterns": {
        "com.google.thirdparty.publicsuffix.PublicSuffixPatterns:<init>()": "/**\n* Private constructor for PublicSuffixPatterns class.\n*/"
    },
    "com.google.thirdparty.publicsuffix.PublicSuffixType": {
        "com.google.thirdparty.publicsuffix.PublicSuffixType:getInnerNodeCode()": "/**\n* Retrieves the inner node code.\n* @return character representing the inner node code\n*/",
        "com.google.thirdparty.publicsuffix.PublicSuffixType:getLeafNodeCode()": "/**\n* Retrieves the leaf node code.\n* @return character representing the leaf node code\n*/",
        "com.google.thirdparty.publicsuffix.PublicSuffixType:fromCode(char)": "/**\n* Retrieves PublicSuffixType by matching inner or leaf node code.\n* @param code character representing node code\n* @return corresponding PublicSuffixType\n*/"
    },
    "com.google.thirdparty.publicsuffix.TrieParser": {
        "com.google.thirdparty.publicsuffix.TrieParser:reverse(java.lang.CharSequence)": "/**\n* Reverses the given CharSequence.\n* @param s input CharSequence to reverse\n* @return reversed CharSequence\n*/",
        "com.google.thirdparty.publicsuffix.TrieParser:doParseTrieToBuilder(java.util.Deque,java.lang.CharSequence,int,com.google.common.collect.ImmutableMap$Builder)": "/**\n* Parses encoded trie data into a builder.\n* @param stack temporary storage for node segments\n* @param encoded encoded trie string\n* @param start starting index for parsing\n* @param builder mutable map builder for results\n* @return number of characters processed\n*/",
        "com.google.thirdparty.publicsuffix.TrieParser:parseFullString(java.lang.String)": "/**\n* Parses an encoded string into an ImmutableMap of PublicSuffixType.\n* @param encoded encoded trie string\n* @return ImmutableMap of suffix types\n*/"
    },
    "com.google.common.base.CharMatcher$BreakingWhitespace": {
        "com.google.common.base.CharMatcher$BreakingWhitespace:matches(char)": "/**\n* Checks if the character is a whitespace or specific type.\n* @param c character to evaluate\n* @return true if whitespace, false otherwise\n*/"
    },
    "com.google.common.base.CharMatcher$FastMatcher": {
        "com.google.common.base.CharMatcher$FastMatcher:precomputed()": "/**\n* Returns the current instance as a precomputed CharMatcher.\n* @return this CharMatcher instance\n*/",
        "com.google.common.base.CharMatcher$FastMatcher:negate()": "/**\n* Negates the current CharMatcher.\n* @return NegatedFastMatcher instance of this CharMatcher\n*/"
    },
    "com.google.common.base.CharMatcher$NamedFastMatcher": {
        "com.google.common.base.CharMatcher$NamedFastMatcher:toString()": "/**\n* Returns the string representation of the object.\n* @return the description of the object\n*/",
        "com.google.common.base.CharMatcher$NamedFastMatcher:<init>(java.lang.String)": "/**\n* Constructs a NamedFastMatcher with a non-null description.\n* @param description the description of the matcher\n*/"
    },
    "com.google.common.base.CharMatcher$Ascii": {
        "com.google.common.base.CharMatcher$Ascii:matches(char)": "/**\n* Checks if the character is within the ASCII range.\n* @param c character to check\n* @return true if c is ASCII, false otherwise\n*/",
        "com.google.common.base.CharMatcher$Ascii:<init>()": "/**** Constructs an Ascii matcher with a description. */"
    },
    "com.google.common.base.CharMatcher$JavaIsoControl": {
        "com.google.common.base.CharMatcher$JavaIsoControl:matches(char)": "/**\n* Checks if character is a control character.\n* @param c character to check\n* @return true if c is a control character, false otherwise\n*/",
        "com.google.common.base.CharMatcher$JavaIsoControl:<init>()": "/**\n* Constructs a JavaIsoControl matcher with a specific description.\n*/"
    },
    "com.google.common.base.CharMatcher$NegatedFastMatcher": {
        "com.google.common.base.CharMatcher$NegatedFastMatcher:precomputed()": "/**\n* Returns the current CharMatcher instance.\n* @return the CharMatcher instance itself\n*/",
        "com.google.common.base.CharMatcher$NegatedFastMatcher:<init>(com.google.common.base.CharMatcher)": "/**\n* Initializes NegatedFastMatcher with a CharMatcher.\n* @param original the CharMatcher to negate\n*/"
    },
    "com.google.common.cache.LocalCache$StrongEntry": {
        "com.google.common.cache.LocalCache$StrongEntry:getHash()": "/**\n* Returns the hash value.\n* @return the current hash integer\n*/",
        "com.google.common.cache.LocalCache$StrongEntry:getKey()": "/**\n* Retrieves the key associated with this object.\n* @return the key of type K\n*/",
        "com.google.common.cache.LocalCache$StrongEntry:getNext()": "/**\n* Returns the next ReferenceEntry in the sequence.\n* @return next ReferenceEntry object or null if none exists\n*/",
        "com.google.common.cache.LocalCache$StrongEntry:getValueReference()": "/**\n* Retrieves the current value reference.\n* @return ValueReference object associated with the key-value pair\n*/",
        "com.google.common.cache.LocalCache$StrongEntry:setValueReference(com.google.common.cache.LocalCache$ValueReference)": "/**\n* Sets the value reference for the current instance.\n* @param valueReference the ValueReference to be set\n*/",
        "com.google.common.cache.LocalCache$StrongEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Initializes a StrongEntry with key, hash, and next reference.\n* @param key the entry's key\n* @param hash the hash code of the key\n* @param next the next entry in the chain\n*/"
    },
    "com.google.common.cache.LocalCache$HashIterator": {
        "com.google.common.cache.LocalCache$HashIterator:hasNext()": "/**\n* Checks if there is a next element available.\n* @return true if next element exists, false otherwise\n*/",
        "com.google.common.cache.LocalCache$HashIterator:advanceTo(com.google.common.cache.ReferenceEntry)": "/**\n* Advances to the next valid entry if live; cleans up resources afterward.\n* @param entry ReferenceEntry to evaluate\n* @return true if entry is valid, false if stale\n*/",
        "com.google.common.cache.LocalCache$HashIterator:remove()": "/**\n* Removes the last returned entry from the cache.\n* @throws IllegalStateException if lastReturned is null\n*/",
        "com.google.common.cache.LocalCache$HashIterator:nextInChain()": "/**\n* Advances to the next valid entry in the chain.\n* @return true if a valid entry is found, false otherwise\n*/",
        "com.google.common.cache.LocalCache$HashIterator:nextInTable()": "/**\n* Iterates through entries in the table; returns true if a valid entry is found.\n* @return true if a valid entry is found, false if none are valid\n*/",
        "com.google.common.cache.LocalCache$HashIterator:advance()": "/**\n* Advances to the next valid entry in the chain or table.\n* @return void\n*/",
        "com.google.common.cache.LocalCache$HashIterator:nextEntry()": "/**\n* Retrieves the next entry, advancing the current position.\n* @return WriteThroughEntry object or throws NoSuchElementException if none exists\n*/"
    },
    "com.google.common.cache.RemovalCause$1": {
        "com.google.common.cache.RemovalCause$1:wasEvicted()": "/**\n* Checks if the object was evicted from a cache.\n* @return true if evicted, false otherwise\n*/"
    },
    "com.google.common.cache.RemovalCause$2": {
        "com.google.common.cache.RemovalCause$2:wasEvicted()": "/**\n* Checks if the object was evicted from a cache.\n* @return true if evicted, false otherwise\n*/"
    },
    "com.google.common.cache.RemovalCause$3": {
        "com.google.common.cache.RemovalCause$3:wasEvicted()": "/**\n* Checks if the current object was evicted from a collection.\n* @return true if evicted, false otherwise\n*/"
    },
    "com.google.common.cache.RemovalCause$4": {
        "com.google.common.cache.RemovalCause$4:wasEvicted()": "/**\n* Checks if the current object was evicted from a cache.\n* @return true if evicted, false otherwise\n*/"
    },
    "com.google.common.cache.RemovalCause$5": {
        "com.google.common.cache.RemovalCause$5:wasEvicted()": "/**\n* Checks if the object was evicted from the cache.\n* @return true if evicted, false otherwise\n*/"
    },
    "com.google.common.collect.CompactHashMap$MapEntry": {
        "com.google.common.collect.CompactHashMap$MapEntry:getKey()": "/**\n* Retrieves the key associated with the object.\n* @return the key of type K, may be null\n*/",
        "com.google.common.collect.CompactHashMap$MapEntry:updateLastKnownIndex()": "/****\n* Updates lastKnownIndex based on key validity and size.\n* If invalid, sets it to the index of the key.\n*/",
        "com.google.common.collect.CompactHashMap$MapEntry:getValue()": "/**\n* Retrieves value by key from a map or returns last known value if absent.\n* @return value associated with key or null if not found\n*/",
        "com.google.common.collect.CompactHashMap$MapEntry:setValue(java.lang.Object)": "/**** Sets the value for a key in the map and returns the previous value.  \n* @param value new value to set  \n* @return previous value associated with the key or null if not found  \n*/"
    },
    "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry": {
        "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry:getNextInKeyBucket()": "/**\n* Retrieves the next entry in the key bucket.\n* @return ImmutableMapEntry or null if none exists\n*/",
        "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry:isReusable()": "/**\n* Indicates if the object is reusable.\n* @return false, as the object is not reusable\n*/",
        "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry)": "/**\n* Constructs a NonTerminalImmutableMapEntry with key, value, and next entry reference.\n* @param key the entry key; must not be null\n* @param value the entry value; must not be null\n* @param nextInKeyBucket reference to the next entry in the key bucket, can be null\n*/"
    },
    "com.google.common.collect.SparseImmutableTable": {
        "com.google.common.collect.SparseImmutableTable:size()": "/**\n* Returns the number of elements in the cellRowIndices array.\n* @return the size of the cellRowIndices array\n*/",
        "com.google.common.collect.SparseImmutableTable:getCell(int)": "/**\n* Retrieves a cell by its index from a 2D structure.\n* @param index position of the cell\n* @return Cell object corresponding to the specified index\n*/",
        "com.google.common.collect.SparseImmutableTable:columnMap()": "/**\n* Returns an immutable map of column maps.\n* @return ImmutableMap of column keys to row maps\n*/",
        "com.google.common.collect.SparseImmutableTable:rowMap()": "/**\n* Returns an immutable view of the row map.\n* @return ImmutableMap of rows mapping to column-value maps\n*/",
        "com.google.common.collect.SparseImmutableTable:getValue(int)": "/**\n* Retrieves a value from a cell based on its index.\n* @param index the cell index in the collection\n* @return the value at the specified cell index\n*/",
        "com.google.common.collect.SparseImmutableTable:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)": "/**\n* Constructs a SparseImmutableTable from given cell data, row, and column spaces.\n* @param cellList list of cells containing values\n* @param rowSpace set of unique row identifiers\n* @param columnSpace set of unique column identifiers\n*/"
    },
    "com.google.common.collect.SingletonImmutableTable": {
        "com.google.common.collect.SingletonImmutableTable:size()": "/**\n* Returns the size of the collection, which is always 1.\n* @return size of the collection\n*/",
        "com.google.common.collect.SingletonImmutableTable:<init>(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Initializes a singleton immutable table with specified row, column, and value.\n* @param rowKey the key for the single row\n* @param columnKey the key for the single column\n* @param value the value at the specified row and column\n*/",
        "com.google.common.collect.SingletonImmutableTable:<init>(com.google.common.collect.Table$Cell)": "/**\n* Constructs a SingletonImmutableTable from a Cell object.\n* @param cell the Cell containing row key, column key, and value\n*/",
        "com.google.common.collect.SingletonImmutableTable:column(java.lang.Object)": "/**\n* Returns an immutable map for the specified column key.\n* @param columnKey the key for the column\n* @return ImmutableMap with single row or empty if not found\n*/",
        "com.google.common.collect.SingletonImmutableTable:columnMap()": "/**\n* Creates a column map with a single key-value pair.\n* @return ImmutableMap mapping column key to a map of row key and value\n*/",
        "com.google.common.collect.SingletonImmutableTable:rowMap()": "/**\n* Returns an ImmutableMap representing a single row with column-value pairs.\n* @return ImmutableMap mapping row key to a map of column keys and values\n*/",
        "com.google.common.collect.SingletonImmutableTable:createCellSet()": "/**\n* Creates a set of cells using specified row, column, and value.\n* @return ImmutableSet of Cell objects\n*/",
        "com.google.common.collect.SingletonImmutableTable:createValues()": "/**\n* Creates an ImmutableCollection containing a single value.\n* @return ImmutableCollection with the specified single value\n*/"
    },
    "com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset": {
        "com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset:forwardMultiset()": "/**\n* Returns the forward multiset instance.\n* @return the current ForwardingSortedMultiset\n*/"
    },
    "com.google.common.collect.ImmutableList$SubList": {
        "com.google.common.collect.ImmutableList$SubList:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return true if it is a partial view, false otherwise\n*/",
        "com.google.common.collect.ImmutableList$SubList:listIterator(int)": "/**\n* Returns an unmodifiable list iterator starting at the specified index.\n* @param index starting position for the iterator\n* @return UnmodifiableListIterator for the list elements\n*/",
        "com.google.common.collect.ImmutableList$SubList:listIterator()": "/**\n* Returns an unmodifiable list iterator starting at the beginning.\n* @return UnmodifiableListIterator for the list elements\n*/",
        "com.google.common.collect.ImmutableList$SubList:get(int)": "/**\n* Retrieves the element at the specified index.\n* @param index index of the element to retrieve\n* @return the element at the given index\n*/",
        "com.google.common.collect.ImmutableList$SubList:subList(int,int)": "/**\n* Returns a sublist from specified range after index validation.\n* @param fromIndex starting index, @param toIndex ending index\n* @return ImmutableList containing the sublist elements\n*/"
    },
    "com.google.common.collect.ImmutableRangeSet$1": {
        "com.google.common.collect.ImmutableRangeSet$1:isPartialView()": "/**\n* Checks if the current range is a partial view.\n* @return true if partial view, false otherwise\n*/"
    },
    "com.google.common.collect.ImmutableRangeSet$ComplementRanges": {
        "com.google.common.collect.ImmutableRangeSet$ComplementRanges:isPartialView()": "/**\n* Indicates if the current view is a partial view.\n* @return true if it is a partial view, false otherwise\n*/",
        "com.google.common.collect.ImmutableRangeSet$ComplementRanges:get(int)": "/**\n* Retrieves the range for the specified index.\n* @param index position in the collection\n* @return Range object defined by the bounds at the index\n*/"
    },
    "com.google.common.collect.ImmutableMultimap$Values": {
        "com.google.common.collect.ImmutableMultimap$Values:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return true if it is a partial view, false otherwise\n*/",
        "com.google.common.collect.ImmutableMultimap$Values:<init>(com.google.common.collect.ImmutableMultimap)": "/**\n* Initializes Values with the provided ImmutableMultimap.\n* @param multimap the ImmutableMultimap to be assigned\n*/",
        "com.google.common.collect.ImmutableMultimap$Values:copyIntoArray(java.lang.Object[],int)": "/**\n* Copies elements from multimap to the specified array starting at offset.\n* @param dst array to copy elements into\n* @param offset starting index in the array\n* @return new offset after copying elements\n*/",
        "com.google.common.collect.ImmutableMultimap$Values:size()": "/**\n* Returns the number of elements in the multimap.\n* @return the size of the multimap as an integer\n*/",
        "com.google.common.collect.ImmutableMultimap$Values:contains(java.lang.Object)": "/**\n* Checks if the multimap contains the specified object.\n* @param object the object to check for presence\n* @return true if object is found, false otherwise\n*/",
        "com.google.common.collect.ImmutableMultimap$Values:iterator()": "/**\n* Returns an unmodifiable iterator over the multimap's values.\n* @return UnmodifiableIterator of values from the multimap\n*/"
    },
    "com.google.common.collect.RegularImmutableMultiset": {
        "com.google.common.collect.RegularImmutableMultiset:getEntry(int)": "/**\n* Retrieves the entry at the specified index.\n* @param index position of the entry in the array\n* @return Entry<E> object at the given index\n*/",
        "com.google.common.collect.RegularImmutableMultiset:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return false, as this view is not partial\n*/",
        "com.google.common.collect.RegularImmutableMultiset:size()": "/**\n* Returns the current size of the collection.\n* @return the number of elements in the collection\n*/",
        "com.google.common.collect.RegularImmutableMultiset:<init>(com.google.common.collect.Multisets$ImmutableEntry[],com.google.common.collect.Multisets$ImmutableEntry[],int,int,com.google.common.collect.ImmutableSet)": "/**\n* Constructs a RegularImmutableMultiset with specified entries and properties.\n* @param entries array of ImmutableEntry elements\n* @param hashTable optional hash table for entries\n* @param size total number of elements\n* @param hashCode computed hash code\n* @param elementSet optional set of unique elements\n*/",
        "com.google.common.collect.RegularImmutableMultiset:elementSet()": "/**\n* Returns an immutable set of elements, initializing if null.\n* @return ImmutableSet of elements\n*/",
        "com.google.common.collect.RegularImmutableMultiset:hashFloodingDetected(com.google.common.collect.Multisets$ImmutableEntry[])": "/**\n* Checks for hash flooding in the hash table.\n* @param hashTable array of hash table entries\n* @return true if flooding is detected, otherwise false\n*/",
        "com.google.common.collect.RegularImmutableMultiset:count(java.lang.Object)": "/**\n* Counts occurrences of an element in the hash table.\n* @param element the object to count, may be null\n* @return the count of the element, or 0 if not found\n*/",
        "com.google.common.collect.RegularImmutableMultiset:create(java.util.Collection)": "/**\n* Creates an ImmutableMultiset from a collection of entries.\n* @param entries collection of multiset entries\n* @return ImmutableMultiset representing the entries\n*/"
    },
    "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet": {
        "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:map()": "/**\n* Returns an immutable map containing key-value pairs.\n* @return ImmutableMap of type K and V\n*/",
        "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:copyIntoArray(java.lang.Object[],int)": "/**\n* Copies entries into the specified array starting at the given offset.\n* @param dst array to copy entries into\n* @param offset starting index in the destination array\n* @return new offset after copying entries\n*/",
        "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:<init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableList)": "/**\n* Constructs a RegularEntrySet with a map and entries.\n* @param map immutable map of key-value pairs\n* @param entries immutable list of map entries\n*/",
        "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:createAsList()": "/**\n* Creates an ImmutableList from current entries.\n* @return ImmutableList of Entry objects\n*/",
        "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:forEach(java.util.function.Consumer)": "/**\n* Applies a consumer action to each entry in the collection.\n* @param action function to apply to each entry\n*/",
        "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:iterator()": "/**\n* Returns an unmodifiable iterator for the entry collection.\n* @return UnmodifiableIterator for the entries\n*/",
        "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:spliterator()": "/**\n* Creates a spliterator for the entries collection.\n* @return Spliterator for indexed Entry<K, V> elements\n*/",
        "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:<init>(com.google.common.collect.ImmutableMap,java.util.Map$Entry[])": "/**** Constructs a RegularEntrySet from a map and an array of entries. \n* @param map immutable map of key-value pairs \n* @param entries array of map entries \n*/"
    },
    "com.google.common.collect.RegularImmutableBiMap": {
        "com.google.common.collect.RegularImmutableBiMap:isPartialView()": "/**\n* Indicates if the view is a partial view.\n* @return false, as this view is not partial\n*/",
        "com.google.common.collect.RegularImmutableBiMap:forEach(java.util.function.BiConsumer)": "/**\n* Applies a BiConsumer action to each entry in the map.\n* @param action the action to apply to each key-value pair\n*/",
        "com.google.common.collect.RegularImmutableBiMap:inverse()": "/**\n* Returns the inverse of the ImmutableBiMap.\n* @return an ImmutableBiMap with keys and values swapped\n*/",
        "com.google.common.collect.RegularImmutableBiMap:<init>(com.google.common.collect.ImmutableMapEntry[],com.google.common.collect.ImmutableMapEntry[],java.util.Map$Entry[],int,int)": "/**\n* Constructs a RegularImmutableBiMap with specified key/value tables and properties.\n* @param keyTable array of key entries, may be null\n* @param valueTable array of value entries, may be null\n* @param entries array of map entries\n* @param mask bitmask for hash table\n* @param hashCode precomputed hash code\n*/",
        "com.google.common.collect.RegularImmutableBiMap:createKeySet()": "/**\n* Creates an immutable set of keys from the current map.\n* @return ImmutableSet of keys\n*/",
        "com.google.common.collect.RegularImmutableBiMap:checkNoConflictInValueBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)": "/**\n* Checks for conflicts in the value bucket and ensures bucket size limit is not exceeded.\n* @param value value to check for conflicts\n* @param entry current entry being processed\n* @param valueBucketHead head of the value bucket\n* @throws BucketOverflowException if bucket size exceeds the limit\n*/",
        "com.google.common.collect.RegularImmutableBiMap:get(java.lang.Object)": "/**\n* Retrieves value by key from the map.\n* @param key the key to search for\n* @return associated value or null if absent\n*/",
        "com.google.common.collect.RegularImmutableBiMap:fromEntryArray(int,java.util.Map$Entry[])": "/**\n* Creates an ImmutableBiMap from an array of entries.\n* @param n number of entries to process\n* @param entryArray array of key-value pairs\n* @return ImmutableBiMap constructed from the entries\n*/",
        "com.google.common.collect.RegularImmutableBiMap:createEntrySet()": "/**\n* Creates an entry set from the map.\n* @return ImmutableSet of map entries or an empty set if the map is empty\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry": {
        "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry:getValue()": "/**\n* Retrieves the stored value.\n* @return the stored value or null if not set\n*/",
        "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry:<init>(java.lang.Object,int)": "/**\n* Constructs a StrongKeyStrongValueEntry with a key and its hash.\n* @param key the key associated with the entry\n* @param hash the hash code of the key\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry": {
        "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry:getValue()": "/**\n* Retrieves the current value.\n* @return the value of type V, or null if not set\n*/",
        "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)": "/**\n* Initializes a WeakKeyStrongValueEntry with specified queue, key, and hash.\n* @param queue ReferenceQueue for the weak key\n* @param key Weak key reference\n* @param hash Hash code of the key\n*/"
    },
    "com.google.common.collect.ArrayTable$Column": {
        "com.google.common.collect.ArrayTable$Column:getKeyRole()": "/**\n* Returns the key role as a string.\n* @return key role, which is \"Row\"\n*/",
        "com.google.common.collect.ArrayTable$Column:getValue(int)": "/**\n* Retrieves the value at the specified index.\n* @param index the index to access\n* @return value at the index or null if not found\n*/",
        "com.google.common.collect.ArrayTable$Column:setValue(int,java.lang.Object)": "/**\n* Sets a new value at the specified index and returns the old value.\n* @param index the index to set the new value\n* @param newValue the new value to set\n* @return previous value at the specified index\n*/"
    },
    "com.google.common.collect.ArrayTable$Row": {
        "com.google.common.collect.ArrayTable$Row:getKeyRole()": "/**\n* Returns the key role as a string.\n* @return key role \"Column\"\n*/",
        "com.google.common.collect.ArrayTable$Row:getValue(int)": "/**\n* Retrieves the value at the specified index.\n* @param index the index of the desired value\n* @return the value at the index or null\n*/",
        "com.google.common.collect.ArrayTable$Row:setValue(int,java.lang.Object)": "/**\n* Sets a new value at the specified index and returns the old value.\n* @param index the column index to set the new value\n* @param newValue the new value to set\n* @return the previous value at the specified index\n*/"
    },
    "com.google.common.collect.AllEqualOrdering": {
        "com.google.common.collect.AllEqualOrdering:compare(java.lang.Object,java.lang.Object)": "/**\n* Compares two objects for order, always returning 0 (equal).\n* @param left first object to compare\n* @param right second object to compare\n* @return 0 indicating both objects are considered equal\n*/",
        "com.google.common.collect.AllEqualOrdering:sortedCopy(java.lang.Iterable)": "/**\n* Creates a sorted copy of the provided iterable.\n* @param iterable elements to copy and sort\n* @return List containing sorted elements\n*/",
        "com.google.common.collect.AllEqualOrdering:immutableSortedCopy(java.lang.Iterable)": "/**\n* Creates an ImmutableList from a sorted Iterable.\n* @param iterable elements to copy\n* @return ImmutableList containing the copied elements\n*/"
    },
    "com.google.common.collect.CompactHashMap$EntrySetView": {
        "com.google.common.collect.CompactHashMap$EntrySetView:map()": "/**\n* Returns the underlying CompactHashMap instance.\n* @return the CompactHashMap containing key-value pairs\n*/",
        "com.google.common.collect.CompactHashMap$EntrySetView:contains(java.lang.Object)": "/**\n* Checks if the collection contains the specified object.\n* @param o object to check for presence\n* @return true if present, false otherwise\n*/",
        "com.google.common.collect.CompactHashMap$EntrySetView:iterator()": "/**\n* Returns an iterator for the map's entry set.\n* @return Iterator for map entries\n*/",
        "com.google.common.collect.CompactHashMap$EntrySetView:spliterator()": "/**\n* Returns a Spliterator for the map's entries or indexed elements if null.\n* @return Spliterator of map entries or indexed elements\n*/",
        "com.google.common.collect.CompactHashMap$EntrySetView:remove(java.lang.Object)": "/**\n* Removes an entry from the collection if present.\n* @param o entry to remove, can be null\n* @return true if removed, false otherwise\n*/"
    },
    "com.google.common.collect.ForwardingMap$StandardEntrySet": {
        "com.google.common.collect.ForwardingMap$StandardEntrySet:map()": "/**\n* Returns the backing map of the forwarding map.\n* @return the underlying map instance\n*/"
    },
    "com.google.common.collect.Multimaps$AsMap$EntrySet": {
        "com.google.common.collect.Multimaps$AsMap$EntrySet:map()": "/**\n* Returns the underlying map as a collection of key-value pairs.\n* @return Map of keys to collections of values\n*/",
        "com.google.common.collect.Multimaps$AsMap$EntrySet:iterator()": "/**\n* Returns an iterator over map entries of keys and their corresponding value collections.\n* @return Iterator of map entries (key-collection pairs)\n*/",
        "com.google.common.collect.Multimaps$AsMap$EntrySet:remove(java.lang.Object)": "/**\n* Removes the specified object if present; returns false if not found.\n* @param o object to remove\n* @return true if removed, false otherwise\n*/"
    },
    "com.google.common.collect.SortedLists$KeyAbsentBehavior$1": {
        "com.google.common.collect.SortedLists$KeyAbsentBehavior$1:resultIndex(int)": "/**\n* Returns the result index based on the given higher index.\n* @param higherIndex the index to evaluate\n* @return calculated result index as an integer\n*/"
    },
    "com.google.common.collect.SortedLists$KeyAbsentBehavior$2": {
        "com.google.common.collect.SortedLists$KeyAbsentBehavior$2:resultIndex(int)": "/**\n* Abstract method to determine result index based on higher index.\n* @param higherIndex index to evaluate\n* @return calculated result index\n*/"
    },
    "com.google.common.collect.SortedLists$KeyAbsentBehavior$3": {
        "com.google.common.collect.SortedLists$KeyAbsentBehavior$3:resultIndex(int)": "/**\n* Determines the result index based on the provided higher index.\n* @param higherIndex index to evaluate\n* @return computed result index\n*/"
    },
    "com.google.common.collect.SortedLists$KeyPresentBehavior$1": {
        "com.google.common.collect.SortedLists$KeyPresentBehavior$1:resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int)": "/**\n* Returns the index of a key in a sorted list using a comparator.\n* @param comparator used for comparison\n* @param key element to find\n* @param list sorted list to search in\n* @param foundIndex index of the found element\n* @return index of the key or -1 if not found\n*/"
    },
    "com.google.common.collect.Tables$ImmutableCell": {
        "com.google.common.collect.Tables$ImmutableCell:getColumnKey()": "/**\n* Retrieves the column key.\n* @return the column key of type C\n*/",
        "com.google.common.collect.Tables$ImmutableCell:getRowKey()": "/**\n* Retrieves the row key.\n* @return the row key of type R\n*/",
        "com.google.common.collect.Tables$ImmutableCell:getValue()": "/**\n* Retrieves the stored value.\n* @return the stored value of type V, possibly null\n*/",
        "com.google.common.collect.Tables$ImmutableCell:<init>(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Constructs an ImmutableCell with specified row, column, and value.\n* @param rowKey key for the row\n* @param columnKey key for the column\n* @param value cell value\n*/"
    },
    "com.google.common.collect.Iterators$ArrayItr": {
        "com.google.common.collect.Iterators$ArrayItr:get(int)": "/**\n* Retrieves the element at the specified index from the array.\n* @param index the position of the element to retrieve\n* @return the element at the given index\n*/"
    },
    "com.google.common.graph.StandardMutableGraph": {
        "com.google.common.graph.StandardMutableGraph:delegate()": "/**\n* Returns the underlying BaseGraph instance.\n* @return BaseGraph object representing the delegate graph\n*/",
        "com.google.common.graph.StandardMutableGraph:removeNode(java.lang.Object)": "/**\n* Removes a node from the graph.\n* @param node the node to remove\n* @return true if the node was removed, false if not found\n*/",
        "com.google.common.graph.StandardMutableGraph:removeEdge(java.lang.Object,java.lang.Object)": "/**\n* Removes an edge between two nodes.\n* @param nodeU first node\n* @param nodeV second node\n* @return true if edge was removed, false otherwise\n*/",
        "com.google.common.graph.StandardMutableGraph:removeEdge(com.google.common.graph.EndpointPair)": "/**\n* Removes an edge between two endpoints.\n* @param endpoints pair of nodes defining the edge\n* @return true if edge was removed, false otherwise\n*/",
        "com.google.common.graph.StandardMutableGraph:<init>(com.google.common.graph.AbstractGraphBuilder)": "/**\n* Constructs a StandardMutableGraph using specified builder properties.\n* @param builder graph properties builder\n*/",
        "com.google.common.graph.StandardMutableGraph:addNode(java.lang.Object)": "/**\n* Adds a node to the graph using the backing value graph.\n* @param node the node to add\n* @return true if added, false if it already exists\n*/",
        "com.google.common.graph.StandardMutableGraph:putEdge(java.lang.Object,java.lang.Object)": "/**\n* Adds an edge between two nodes if it doesn't exist yet.\n* @param nodeU first node, @param nodeV second node\n* @return true if edge was added, false if it already existed\n*/",
        "com.google.common.graph.StandardMutableGraph:putEdge(com.google.common.graph.EndpointPair)": "/**\n* Adds an edge between two nodes specified by an EndpointPair.\n* @param endpoints pair of nodes to connect\n* @return true if edge was added, false if it already existed\n*/"
    },
    "com.google.common.hash.Crc32cHashFunction": {
        "com.google.common.hash.Crc32cHashFunction:bits()": "/**\n* Returns the number of bits used by the data type.\n* @return integer representing the bit count (32)\n*/",
        "com.google.common.hash.Crc32cHashFunction:newHasher()": "/**\n* Creates a new Crc32cHasher instance.\n* @return Hasher object for CRC32C hashing\n*/"
    },
    "com.google.common.math.LinearTransformation$NaNLinearTransformation": {
        "com.google.common.math.LinearTransformation$NaNLinearTransformation:inverse()": "/**\n* Returns the inverse of the linear transformation (identity in this case).\n* @return LinearTransformation object representing the inverse\n*/",
        "com.google.common.math.LinearTransformation$NaNLinearTransformation:isHorizontal()": "/**\n* Checks if the object is horizontal.\n* @return false indicating the object is not horizontal\n*/",
        "com.google.common.math.LinearTransformation$NaNLinearTransformation:isVertical()": "/**\n* Checks if the shape is vertical.\n* @return false indicating the shape is not vertical\n*/",
        "com.google.common.math.LinearTransformation$NaNLinearTransformation:slope()": "/**\n* Returns the slope value, currently not implemented.\n* @return NaN indicating undefined slope\n*/",
        "com.google.common.math.LinearTransformation$NaNLinearTransformation:transform(double)": "/**\n* Transforms the input value x and returns NaN.\n* @param x the value to be transformed\n* @return NaN as the transformation result\n*/"
    },
    "com.google.common.math.LongMath$MillerRabinTester$1": {
        "com.google.common.math.LongMath$MillerRabinTester$1:mulMod(long,long,long)": "/**\n* Computes (a * b) mod m.\n* @param a first multiplicand\n* @param b second multiplicand\n* @param m modulus\n* @return result of (a * b) mod m\n*/",
        "com.google.common.math.LongMath$MillerRabinTester$1:squareMod(long,long)": "/**\n* Computes the square of 'a' modulo 'm'.\n* @param a the base number\n* @param m the modulus\n* @return the result of (a^2) mod m\n*/"
    },
    "com.google.common.util.concurrent.Striped$CompactStriped": {
        "com.google.common.util.concurrent.Striped$CompactStriped:getAt(int)": "/**\n* Retrieves the element at the specified index from the array.\n* @param index position of the element to retrieve\n* @return element of type L at the given index\n*/",
        "com.google.common.util.concurrent.Striped$CompactStriped:size()": "/**\n* Returns the number of elements in the array.\n* @return the length of the array\n*/",
        "com.google.common.util.concurrent.Striped$CompactStriped:<init>(int,com.google.common.base.Supplier)": "/**\n* Initializes CompactStriped with stripes and a supplier for elements.\n* @param stripes number of stripes, must be <= 2^30\n* @param supplier provides elements for the array\n*/"
    },
    "com.google.common.base.Functions$IdentityFunction": {
        "com.google.common.base.Functions$IdentityFunction:apply(java.lang.Object)": "/**\n* Returns the input object as-is.\n* @param o input object, may be null\n* @return the same input object or null\n*/"
    },
    "com.google.common.base.Platform$JdkPatternCompiler": {
        "com.google.common.base.Platform$JdkPatternCompiler:isPcreLike()": "/**\n* Indicates if the implementation is compatible with PCRE syntax.\n* @return true if PCRE-like, otherwise false\n*/",
        "com.google.common.base.Platform$JdkPatternCompiler:compile(java.lang.String)": "/**\n* Compiles a regex pattern into a CommonPattern.\n* @param pattern the regex pattern to compile\n* @return a CommonPattern object\n*/"
    },
    "com.google.common.cache.CacheBuilder$NullListener": {
        "com.google.common.cache.CacheBuilder$NullListener:onRemoval(com.google.common.cache.RemovalNotification)": "/**\n* Handles removal notifications for cache entries.\n* @param notification details of the removed entry\n*/"
    },
    "com.google.common.cache.CacheBuilder$OneWeigher": {
        "com.google.common.cache.CacheBuilder$OneWeigher:weigh(java.lang.Object,java.lang.Object)": "/**\n* Returns a constant weight of 1 for any key-value pair.\n* @param key the key object\n* @param value the value object\n* @return constant weight of 1\n*/"
    },
    "com.google.common.cache.LocalCache$NullEntry": {
        "com.google.common.cache.LocalCache$NullEntry:getAccessTime()": "/**\n* Retrieves the access time.\n* @return access time as a long value\n*/",
        "com.google.common.cache.LocalCache$NullEntry:getHash()": "/**\n* Returns a constant hash value of zero.\n* @return integer hash value\n*/",
        "com.google.common.cache.LocalCache$NullEntry:getKey()": "/**\n* Retrieves the key object, returns null if not available.\n* @return key object or null\n*/",
        "com.google.common.cache.LocalCache$NullEntry:getNext()": "/**\n* Returns the next ReferenceEntry in the sequence.\n* @return next ReferenceEntry or null if none exists\n*/",
        "com.google.common.cache.LocalCache$NullEntry:getNextInAccessQueue()": "/**\n* Returns the current instance as the next entry in the access queue.\n* @return ReferenceEntry of the current instance\n*/",
        "com.google.common.cache.LocalCache$NullEntry:getNextInWriteQueue()": "/**\n* Returns the current ReferenceEntry in the write queue.\n* @return this ReferenceEntry instance\n*/",
        "com.google.common.cache.LocalCache$NullEntry:getPreviousInAccessQueue()": "/**\n* Returns the current ReferenceEntry as the previous in access queue.\n* @return this ReferenceEntry instance\n*/",
        "com.google.common.cache.LocalCache$NullEntry:getPreviousInWriteQueue()": "/**\n* Returns the current instance as the previous entry in the write queue.\n* @return ReferenceEntry object representing the current entry\n*/",
        "com.google.common.cache.LocalCache$NullEntry:getValueReference()": "/**\n* Returns a nullable ValueReference object.\n* @return ValueReference or null if not available\n*/",
        "com.google.common.cache.LocalCache$NullEntry:getWriteTime()": "/**\n* Returns the write time, currently always returns 0.\n* @return long representing the write time in milliseconds\n*/",
        "com.google.common.cache.LocalCache$NullEntry:setAccessTime(long)": "/**\n* Sets the access time to the specified value.\n* @param time the access time in milliseconds since epoch\n*/",
        "com.google.common.cache.LocalCache$NullEntry:setNextInAccessQueue(com.google.common.cache.ReferenceEntry)": "/**\n* Sets the next entry in the access queue.\n* @param next the next ReferenceEntry to set\n*/",
        "com.google.common.cache.LocalCache$NullEntry:setNextInWriteQueue(com.google.common.cache.ReferenceEntry)": "/**\n* Sets the next entry in the write queue.\n* @param next the next ReferenceEntry in the queue\n*/",
        "com.google.common.cache.LocalCache$NullEntry:setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry)": "/**\n* Sets the previous entry in the access queue.\n* @param previous the previous ReferenceEntry in the queue\n*/",
        "com.google.common.cache.LocalCache$NullEntry:setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry)": "/**\n* Sets the previous entry in the write queue.\n* @param previous the previous ReferenceEntry to set\n*/",
        "com.google.common.cache.LocalCache$NullEntry:setValueReference(com.google.common.cache.LocalCache$ValueReference)": "/**\n* Sets the value reference for the object.\n* @param valueReference the ValueReference to be set\n*/",
        "com.google.common.cache.LocalCache$NullEntry:setWriteTime(long)": "/**\n* Sets the write time for the object.\n* @param time the write time in milliseconds since epoch\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$1": {
        "com.google.common.collect.MapMakerInternalMap$1:clear()": "/**\n* Clears all segments in the collection.\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$WeakValueReferenceImpl": {
        "com.google.common.collect.MapMakerInternalMap$WeakValueReferenceImpl:getEntry()": "/**\n* Retrieves the current entry.\n* @return the entry of type E\n*/"
    },
    "com.google.common.graph.StandardMutableValueGraph": {
        "com.google.common.graph.StandardMutableValueGraph:incidentEdgeOrder()": "/**\n* Returns the order of incident edges.\n* @return ElementOrder representing the order of edges\n*/",
        "com.google.common.graph.StandardMutableValueGraph:removeNode(java.lang.Object)": "/**\n* Removes a node and its connections from the graph.\n* @param node the node to remove\n* @return true if the node was removed, false if not found\n*/",
        "com.google.common.graph.StandardMutableValueGraph:removeEdge(java.lang.Object,java.lang.Object)": "/**\n* Removes an edge between two nodes and returns its value.\n* @param nodeU first node\n* @param nodeV second node\n* @return value of the removed edge or null if not found\n*/",
        "com.google.common.graph.StandardMutableValueGraph:removeEdge(com.google.common.graph.EndpointPair)": "/**\n* Removes an edge using the given endpoints.\n* @param endpoints pair of nodes defining the edge\n* @return value of the removed edge or null if not found\n*/",
        "com.google.common.graph.StandardMutableValueGraph:newConnections()": "/**\n* Creates new graph connections based on directionality.\n* @return GraphConnections instance for the graph\n*/",
        "com.google.common.graph.StandardMutableValueGraph:addNodeInternal(java.lang.Object)": "/**\n* Adds a node and its connections to the graph.\n* @param node the node to add\n* @return GraphConnections instance for the new node\n*/",
        "com.google.common.graph.StandardMutableValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder)": "/**\n* Initializes a StandardMutableValueGraph with specified builder properties.\n* @param builder graph properties builder\n*/",
        "com.google.common.graph.StandardMutableValueGraph:addNode(java.lang.Object)": "/**\n* Adds a node to the graph if it doesn't already exist.\n* @param node the node to add\n* @return true if added, false if it already exists\n*/",
        "com.google.common.graph.StandardMutableValueGraph:putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Adds an edge between two nodes with a value.\n* @param nodeU first node, @param nodeV second node, @param value edge value\n* @return previous value associated with the edge or null if newly added\n*/",
        "com.google.common.graph.StandardMutableValueGraph:putEdgeValue(com.google.common.graph.EndpointPair,java.lang.Object)": "/**\n* Adds an edge value between two nodes specified by EndpointPair.\n* @param endpoints pair of nodes, @param value edge value\n* @return previous value or null if newly added\n*/"
    },
    "com.google.common.util.concurrent.Monitor$Guard": {
        "com.google.common.util.concurrent.Monitor$Guard:<init>(com.google.common.util.concurrent.Monitor)": "/**\n* Initializes Guard with a Monitor, ensuring it's not null.\n* @param monitor the Monitor object to guard\n*/"
    },
    "com.google.common.base.Functions$ToStringFunction": {
        "com.google.common.base.Functions$ToStringFunction:apply(java.lang.Object)": "/**\n* Converts an object to its string representation.\n* @param o object to be converted; must not be null\n* @return string representation of the object\n*/"
    },
    "com.google.common.base.Splitter$MapSplitter": {
        "com.google.common.base.Splitter$MapSplitter:<init>(com.google.common.base.Splitter,com.google.common.base.Splitter)": "/**\n* Constructs a MapSplitter with specified outer and entry splitters.\n* @param outerSplitter the splitter for outer elements\n* @param entrySplitter the splitter for entry elements (must not be null)\n*/",
        "com.google.common.base.Splitter$MapSplitter:split(java.lang.CharSequence)": "/**\n* Splits a sequence into a map of key-value pairs.\n* @param sequence input sequence to split\n* @return unmodifiable map of key-value pairs\n*/"
    },
    "com.google.common.cache.CacheLoader$FunctionToCacheLoader": {
        "com.google.common.cache.CacheLoader$FunctionToCacheLoader:load(java.lang.Object)": "/**\n* Loads a value by key using a computing function.\n* @param key the key to lookup\n* @return the computed value associated with the key\n*/",
        "com.google.common.cache.CacheLoader$FunctionToCacheLoader:<init>(com.google.common.base.Function)": "/**\n* Initializes FunctionToCacheLoader with a non-null computing function.\n* @param computingFunction function to compute values\n*/"
    },
    "com.google.common.cache.CacheLoader$SupplierToCacheLoader": {
        "com.google.common.cache.CacheLoader$SupplierToCacheLoader:load(java.lang.Object)": "/**\n* Loads a value by key after ensuring key is not null.\n* @param key the key to load the value for\n* @return the loaded value\n*/",
        "com.google.common.cache.CacheLoader$SupplierToCacheLoader:<init>(com.google.common.base.Supplier)": "/**\n* Constructs a SupplierToCacheLoader with a non-null computing supplier.\n* @param computingSupplier supplier for computing values\n*/"
    },
    "com.google.common.collect.ImmutableMultimap$Builder": {
        "com.google.common.collect.ImmutableMultimap$Builder:orderKeysBy(java.util.Comparator)": "/**** Sets the key comparator for ordering keys. \n* @param keyComparator comparator for key ordering \n* @return Builder instance for method chaining \n*/",
        "com.google.common.collect.ImmutableMultimap$Builder:orderValuesBy(java.util.Comparator)": "/**\n* Sets the value comparator for ordering.\n* @param valueComparator comparator for values\n* @return the Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableMultimap$Builder:put(java.lang.Object,java.lang.Object)": "/**** Adds a key-value pair to the builder. \n* @param key the entry key \n* @param value the entry value \n* @return the Builder instance for chaining \n*/",
        "com.google.common.collect.ImmutableMultimap$Builder:<init>()": "/**\n* Constructs a new Builder instance.\n*/",
        "com.google.common.collect.ImmutableMultimap$Builder:put(java.util.Map$Entry)": "/**\n* Adds an entry to the builder using its key and value.\n* @param entry the entry containing key and value\n* @return Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)": "/**\n* Adds multiple values for a given key.\n* @param key the entry key\n* @param values the values to associate with the key\n* @return the Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableMultimap$Builder:putAll(java.lang.Iterable)": "/**\n* Adds multiple entries to the builder.\n* @param entries iterable of entries to add\n* @return Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableMultimap$Builder:putAll(com.google.common.collect.Multimap)": "/**\n* Adds all entries from a Multimap to the builder.\n* @param multimap the source Multimap to add entries from\n* @return the Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder)": "/**\n* Combines another Builder's entries into this Builder.\n* @param other Builder to combine with\n* @return this Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableMultimap$Builder:build()": "/**\n* Builds an ImmutableMultimap from the current state.\n* @return ImmutableMultimap or an empty instance if builderMap is null\n*/"
    },
    "com.google.common.collect.ImmutableMultiset$Builder": {
        "com.google.common.collect.ImmutableMultiset$Builder:add(java.lang.Object)": "/**\n* Adds an element to the builder.\n* @param element the element to add\n* @return the Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableMultiset$Builder:addCopies(java.lang.Object,int)": "/**\n* Adds copies of an element to the contents.\n* @param element the element to add\n* @param occurrences number of copies to add\n* @return the Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableMultiset$Builder:setCount(java.lang.Object,int)": "/**\n* Sets the count for a specified element.\n* @param element the element to set the count for\n* @param count the new count value\n* @return the Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableMultiset$Builder:<init>(com.google.common.collect.Multiset)": "/**\n* Constructs a Builder with specified contents.\n* @param contents a Multiset containing elements for the Builder\n*/",
        "com.google.common.collect.ImmutableMultiset$Builder:addAll(java.util.Iterator)": "/**\n* Adds all elements from the iterator to the builder and returns the builder instance.\n* @param elements iterator of elements to add\n* @return this Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableMultiset$Builder:addAll(java.lang.Iterable)": "/**\n* Adds elements from an iterable or multiset to the builder.\n* @param elements iterable of elements to add\n* @return the builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableMultiset$Builder:<init>()": "/**\n* Constructs a Builder with an empty LinkedHashMultiset.\n*/",
        "com.google.common.collect.ImmutableMultiset$Builder:buildJdkBacked()": "/**\n* Builds an ImmutableMultiset from existing contents or returns an empty one.\n* @return ImmutableMultiset instance based on contents\n*/",
        "com.google.common.collect.ImmutableMultiset$Builder:build()": "/**\n* Builds an ImmutableMultiset from current contents.\n* @return ImmutableMultiset based on contents\n*/"
    },
    "com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl": {
        "com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:add(java.lang.Object)": "/**\n* Adds an element to the set; ensures element is non-null.\n* @param e element to add\n* @return this SetBuilderImpl instance\n*/",
        "com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:<init>(com.google.common.collect.ImmutableSet$SetBuilderImpl)": "/**\n* Initializes a JdkBackedSetBuilderImpl from a SetBuilderImpl instance.\n* @param toCopy instance to copy elements from\n*/",
        "com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:copy()": "/**\n* Creates a copy of the current SetBuilderImpl instance.\n* @return a new JdkBackedSetBuilderImpl with copied elements\n*/",
        "com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:build()": "/**\n* Builds an ImmutableSet based on distinct element count.\n* @return ImmutableSet containing deduplicated elements\n*/"
    },
    "com.google.common.collect.Lists$OnePlusArrayList": {
        "com.google.common.collect.Lists$OnePlusArrayList:<init>(java.lang.Object,java.lang.Object[])": "/**\n* Constructs OnePlusArrayList with a first element and an array of additional elements.\n* @param first initial element of the list\n* @param rest array of subsequent elements (must not be null)\n*/",
        "com.google.common.collect.Lists$OnePlusArrayList:size()": "/**\n* Returns the size of the collection, incremented by one.\n* @return size as an integer, considering array length\n*/",
        "com.google.common.collect.Lists$OnePlusArrayList:get(int)": "/**\n* Retrieves element at specified index from the collection.\n* @param index the index of the element to retrieve\n* @return the element at the given index\n*/"
    },
    "com.google.common.collect.Lists$TwoPlusArrayList": {
        "com.google.common.collect.Lists$TwoPlusArrayList:<init>(java.lang.Object,java.lang.Object,java.lang.Object[])": "/**\n* Constructs a TwoPlusArrayList with two elements and an array of additional elements.\n* @param first the first element\n* @param second the second element\n* @param rest array of additional elements, must not be null\n*/",
        "com.google.common.collect.Lists$TwoPlusArrayList:size()": "/**\n* Returns the size by adding 2 to the length of the rest array.\n* @return size as an integer\n*/",
        "com.google.common.collect.Lists$TwoPlusArrayList:get(int)": "/**\n* Retrieves the element at the specified index.\n* @param index the index of the element to retrieve\n* @return the element at the given index\n*/"
    },
    "com.google.common.collect.MinMaxPriorityQueue$Builder": {
        "com.google.common.collect.MinMaxPriorityQueue$Builder:<init>(java.util.Comparator)": "/**\n* Initializes Builder with a comparator.\n* @param comparator the Comparator to be used, must not be null\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Builder:expectedSize(int)": "/**\n* Sets the expected size for the builder.\n* @param expectedSize non-negative expected size value\n* @return the current Builder instance\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Builder:maximumSize(int)": "/**\n* Sets the maximum size for the builder.\n* @param maximumSize positive integer for maximum size\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Builder:ordering()": "/**\n* Creates an Ordering instance from a Comparator.\n* @return Ordering<T> based on the provided comparator\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Builder:create(java.lang.Iterable)": "/**\n* Creates a MinMaxPriorityQueue from initial contents.\n* @param initialContents items to initialize the queue\n* @return a new MinMaxPriorityQueue instance\n*/",
        "com.google.common.collect.MinMaxPriorityQueue$Builder:create()": "/**\n* Creates an empty MinMaxPriorityQueue.\n* @return a new MinMaxPriorityQueue instance\n*/"
    },
    "com.google.common.collect.Multimap": {
        "com.google.common.collect.Multimap:forEach(java.util.function.BiConsumer)": "/**\n* Applies an action to each entry's key-value pair.\n* @param action a BiConsumer to process each key-value pair\n*/"
    },
    "com.google.common.collect.Multiset": {
        "com.google.common.collect.Multiset:forEachEntry(java.util.function.ObjIntConsumer)": "/**\n* Applies an action for each entry in the set.\n* @param action a consumer that processes each element and its count\n*/",
        "com.google.common.collect.Multiset:forEach(java.util.function.Consumer)": "/**\n* Applies the given action to each element, repeating by its count.\n* @param action the operation to apply on each element\n*/",
        "com.google.common.collect.Multiset:spliterator()": "/**\n* Returns a Spliterator for the elements in this Multiset.\n* @return Spliterator for the Multiset elements\n*/"
    },
    "com.google.common.collect.NaturalOrdering": {
        "com.google.common.collect.NaturalOrdering:compare(java.lang.Comparable,java.lang.Comparable)": "/**\n* Compares two Comparable objects.\n* @param left first object to compare\n* @param right second object to compare\n* @return comparison result as int\n*/",
        "com.google.common.collect.NaturalOrdering:<init>()": "/**\n* Constructs an instance of NaturalOrdering.\n*/",
        "com.google.common.collect.NaturalOrdering:nullsFirst()": "/**\n* Returns an Ordering prioritizing null values first.\n* @return Ordering object handling nulls at the beginning\n*/",
        "com.google.common.collect.NaturalOrdering:nullsLast()": "/**\n* Returns an Ordering that places nulls at the end.\n* @return Ordering for elements of type S extending Comparable\n*/"
    },
    "com.google.common.collect.Sets$ImprovedAbstractSet": {
        "com.google.common.collect.Sets$ImprovedAbstractSet:retainAll(java.util.Collection)": "/**\n* Retains only elements in this collection that are also in the specified collection.\n* @param c collection to retain elements from\n* @return true if this collection was modified\n*/",
        "com.google.common.collect.Sets$ImprovedAbstractSet:removeAll(java.util.Collection)": "/**\n* Removes all elements in the specified collection from this set.\n* @param c collection of elements to remove\n* @return true if any elements were removed, false otherwise\n*/"
    },
    "com.google.common.collect.TreeTraverser$PostOrderNode": {
        "com.google.common.collect.TreeTraverser$PostOrderNode:<init>(java.lang.Object,java.util.Iterator)": "/**\n* Constructs a PostOrderNode with a non-null root and child iterator.\n* @param root the root node of type T\n* @param childIterator an iterator for child nodes of type T\n*/"
    },
    "com.google.common.eventbus.DeadEvent": {
        "com.google.common.eventbus.DeadEvent:<init>(java.lang.Object,java.lang.Object)": "/**\n* Creates a DeadEvent with a non-null source and event.\n* @param source the source of the event\n* @param event the event object\n*/",
        "com.google.common.eventbus.DeadEvent:toString()": "/**\n* Returns a string representation of the object with source and event details.\n* @return formatted string of object's fields\n*/"
    },
    "com.google.common.graph.DirectedGraphConnections$NodeConnection": {
        "com.google.common.graph.DirectedGraphConnections$NodeConnection:<init>(java.lang.Object)": "/**\n* Constructs a NodeConnection with a non-null node.\n* @param node the node to connect, must not be null\n*/"
    },
    "com.google.common.graph.ImmutableValueGraph": {
        "com.google.common.graph.ImmutableValueGraph:copyOf(com.google.common.graph.ImmutableValueGraph)": "/**\n* Returns a non-null copy of the given ImmutableValueGraph.\n* @param graph the ImmutableValueGraph to copy\n* @return the non-null ImmutableValueGraph\n*/",
        "com.google.common.graph.ImmutableValueGraph:asGraph()": "/**\n* Converts the current object to an ImmutableGraph.\n* @return ImmutableGraph representation of the current object\n*/",
        "com.google.common.graph.ImmutableValueGraph:nodeOrder()": "/**\n* Returns the current node order.\n* @return ElementOrder instance representing the node order\n*/",
        "com.google.common.graph.ImmutableValueGraph:allowsSelfLoops()": "/**\n* Returns whether self-loops are permitted in the graph.\n* @return true if self-loops are allowed, false otherwise\n*/",
        "com.google.common.graph.ImmutableValueGraph:isDirected()": "/**\n* Returns whether the graph is directed.\n* @return true if directed, false otherwise\n*/",
        "com.google.common.graph.ImmutableValueGraph:nodes()": "/**\n* Returns an unmodifiable set of nodes from the connection map.\n* @return Set of nodes\n*/",
        "com.google.common.graph.ImmutableValueGraph:incidentEdgeOrder()": "/**\n* Returns a stable ordering of incident edges.\n* @return ElementOrder instance for stable edge ordering\n*/",
        "com.google.common.graph.ImmutableValueGraph:adjacentNodes(java.lang.Object)": "/**\n* Retrieves adjacent nodes for a given node.\n* @param node the node to find adjacent nodes for\n* @return Set of adjacent nodes\n*/",
        "com.google.common.graph.ImmutableValueGraph:predecessors(java.lang.Object)": "/**\n* Retrieves the set of predecessor nodes for a given node.\n* @param node the node to find predecessors for\n* @return Set of predecessor nodes\n*/",
        "com.google.common.graph.ImmutableValueGraph:successors(java.lang.Object)": "/**\n* Retrieves valid successors of a specified node.\n* @param node the node to find successors for\n* @return Set of valid successors for the given node\n*/",
        "com.google.common.graph.ImmutableValueGraph:incidentEdges(java.lang.Object)": "/**\n* Retrieves incident edges for a specified node.\n* @param node the node to find incident edges for\n* @return a set of EndpointPair objects representing incident edges\n*/",
        "com.google.common.graph.ImmutableValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)": "/**\n* Checks if there is an edge between two non-null nodes.\n* @param nodeU first node\n* @param nodeV second node\n* @return true if an edge exists, false otherwise\n*/",
        "com.google.common.graph.ImmutableValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair)": "/**\n* Checks if an edge exists between two nodes in a graph.\n* @param endpoints pair of nodes to check\n* @return true if an edge exists, false otherwise\n*/",
        "com.google.common.graph.ImmutableValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Returns edge value between nodes or default if not present.\n* @param nodeU first node, nodeV second node, defaultValue fallback value if not found\n* @return edge value or defaultValue if edge does not exist\n*/",
        "com.google.common.graph.ImmutableValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)": "/**\n* Retrieves edge value for given endpoints or returns default if not present.\n* @param endpoints pair of nodes to check for an edge\n* @param defaultValue fallback value if edge does not exist\n* @return edge value or defaultValue if edge is absent\n*/",
        "com.google.common.graph.ImmutableValueGraph:connectionsOf(com.google.common.graph.ValueGraph,java.lang.Object)": "/****\n* Creates GraphConnections for a given node in a ValueGraph.\n* @param graph the ValueGraph instance\n* @param node the node for which connections are created\n* @return GraphConnections for the specified node\n*/",
        "com.google.common.graph.ImmutableValueGraph:getNodeConnections(com.google.common.graph.ValueGraph)": "/**\n* Retrieves ImmutableMap of node connections from a ValueGraph.\n* @param graph the ValueGraph instance\n* @return ImmutableMap of nodes to their GraphConnections\n*/",
        "com.google.common.graph.ImmutableValueGraph:<init>(com.google.common.graph.ValueGraph)": "/**\n* Constructs an ImmutableValueGraph from a given ValueGraph.\n* @param graph source ValueGraph to build from\n*/",
        "com.google.common.graph.ImmutableValueGraph:copyOf(com.google.common.graph.ValueGraph)": "/**\n* Creates an ImmutableValueGraph from a given ValueGraph.\n* @param graph source ValueGraph to copy\n* @return ImmutableValueGraph instance\n*/"
    },
    "com.google.common.graph.Traverser$Traversal$2": {
        "com.google.common.graph.Traverser$Traversal$2:visitNext(java.util.Deque)": "/**\n* Visits the next element in a deque of iterators.\n* @param horizon deque of iterators to traverse\n* @return the next element or null if none exists\n*/",
        "com.google.common.graph.Traverser$Traversal$2:<init>(com.google.common.graph.SuccessorsFunction)": "/**\n* Initializes Traversal with a specified successors function.\n* @param successorFunction function to retrieve successors of a node\n*/"
    },
    "com.google.common.reflect.Types$JavaVersion$2": {
        "com.google.common.reflect.Types$JavaVersion$2:usedInGenericType(java.lang.reflect.Type)": "/**\n* Abstract method to determine the generic type usage.\n* @param type the Type to analyze\n* @return the modified Type based on its usage\n*/",
        "com.google.common.reflect.Types$JavaVersion$2:newArrayType(java.lang.reflect.Type)": "/**\n* Creates a new array type based on the specified component type.\n* @param componentType the type of the array's components\n* @return Type representing the new array type\n*/"
    },
    "com.google.common.util.concurrent.AbstractFuture$Failure": {
        "com.google.common.util.concurrent.AbstractFuture$Failure:<init>(java.lang.Throwable)": "/**\n* Stores a non-null exception.\n* @param exception the Throwable to store; must not be null\n*/"
    },
    "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule": {
        "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule:<init>(long,java.util.concurrent.TimeUnit)": "/**\n* Initializes a Schedule with a delay and time unit.\n* @param delay time duration before execution\n* @param unit time unit for the delay\n*/",
        "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule:<init>(java.time.Duration)": "/**\n* Initializes a Schedule with a specified delay.\n* @param delay time duration before execution\n*/"
    },
    "com.google.common.util.concurrent.ClosingFuture$Peeker": {
        "com.google.common.util.concurrent.ClosingFuture$Peeker:<init>(com.google.common.collect.ImmutableList)": "/**\n* Initializes Peeker with a list of futures.\n* @param futures non-null list of ClosingFuture objects\n*/",
        "com.google.common.util.concurrent.ClosingFuture$Peeker:call(com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList)": "/**\n* Executes a CombiningCallable and manages closeable resources.\n* @param combiner callable to execute\n* @param closeables list of closeable resources\n* @return result of the combiner's call\n*/",
        "com.google.common.util.concurrent.ClosingFuture$Peeker:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList)": "/****\n* Calls an asynchronous combining function and manages resources.\n* @param combiner function to combine results asynchronously\n* @param closeables resources to manage during execution\n* @return FluentFuture containing the result of the async call\n*/",
        "com.google.common.util.concurrent.ClosingFuture$Peeker:getDone(com.google.common.util.concurrent.ClosingFuture)": "/**\n* Retrieves result from a ClosingFuture after validating its state and existence.\n* @param closingFuture the ClosingFuture to retrieve result from\n* @return result of type D or throws ExecutionException if not done\n*/"
    },
    "com.google.common.hash.AbstractStreamingHasher": {
        "com.google.common.hash.AbstractStreamingHasher:<init>(int,int)": "/**\n* Constructs AbstractStreamingHasher with specified chunk and buffer sizes.\n* @param chunkSize size of each data chunk\n* @param bufferSize total buffer size, must be multiple of chunkSize\n*/",
        "com.google.common.hash.AbstractStreamingHasher:processRemaining(java.nio.ByteBuffer)": "/**\n* Processes remaining bytes in ByteBuffer by padding with zeros and flipping it.\n* @param bb ByteBuffer to process\n*/",
        "com.google.common.hash.AbstractStreamingHasher:munch()": "/**\n* Processes chunks from the buffer until fewer than chunkSize bytes remain.\n*/",
        "com.google.common.hash.AbstractStreamingHasher:<init>(int)": "/**\n* Initializes AbstractStreamingHasher with equal chunk and buffer sizes.\n* @param chunkSize size of each data chunk\n*/",
        "com.google.common.hash.AbstractStreamingHasher:hash()": "/**\n* Generates a hash code after processing the buffer.\n* @return HashCode object representing the computed hash\n*/",
        "com.google.common.hash.AbstractStreamingHasher:munchIfFull()": "/**\n* Processes buffer chunks if less than 8 bytes remain for a primitive.\n*/",
        "com.google.common.hash.AbstractStreamingHasher:putBytesInternal(java.nio.ByteBuffer)": "/**\n* Adds bytes from a ByteBuffer to the internal buffer and processes them.\n* @param readBuffer source of bytes to add\n* @return Hasher instance for method chaining\n*/",
        "com.google.common.hash.AbstractStreamingHasher:putByte(byte)": "/**\n* Adds a byte to the buffer and processes it if full.\n* @param b byte to add\n* @return this Hasher instance for chaining\n*/",
        "com.google.common.hash.AbstractStreamingHasher:putShort(short)": "/**\n* Adds a short value to the buffer and processes if full.\n* @param s short value to add\n* @return Hasher instance for method chaining\n*/",
        "com.google.common.hash.AbstractStreamingHasher:putChar(char)": "/**\n* Adds a character to the buffer and processes if full.\n* @param c character to add\n* @return this Hasher instance for chaining\n*/",
        "com.google.common.hash.AbstractStreamingHasher:putInt(int)": "/**\n* Adds an integer to the buffer and processes it if full.\n* @param i the integer to be added\n* @return the current Hasher instance\n*/",
        "com.google.common.hash.AbstractStreamingHasher:putLong(long)": "/**\n* Adds a long value to the buffer and processes if full.\n* @param l the long value to add\n* @return this Hasher instance for chaining\n*/",
        "com.google.common.hash.AbstractStreamingHasher:putBytes(byte[],int,int)": "/**\n* Wraps bytes in ByteBuffer and adds them to the internal buffer.\n* @param bytes byte array to be added\n* @param off offset in the byte array\n* @param len number of bytes to add\n* @return Hasher instance for method chaining\n*/",
        "com.google.common.hash.AbstractStreamingHasher:putBytes(java.nio.ByteBuffer)": "/**\n* Adds bytes from a ByteBuffer to the internal buffer in little-endian order.\n* @param readBuffer source of bytes to add\n* @return Hasher instance for method chaining\n*/"
    },
    "com.google.common.base.CommonPattern": {
        "com.google.common.base.CommonPattern:isPcreLike()": "/**\n* Determines if the pattern compiler is PCRE-like.\n* @return true if PCRE-like, false otherwise\n*/",
        "com.google.common.base.CommonPattern:compile(java.lang.String)": "/**\n* Compiles a regex pattern into a CommonPattern object.\n* @param pattern the regex pattern to compile\n* @return compiled CommonPattern object\n*/"
    },
    "com.google.common.base.FinalizablePhantomReference": {
        "com.google.common.base.FinalizablePhantomReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)": "/**\n* Initializes a FinalizablePhantomReference and cleans up the reference queue.\n* @param referent the referent object to be referenced\n* @param queue the FinalizableReferenceQueue to manage the reference\n*/"
    },
    "com.google.common.base.FinalizableSoftReference": {
        "com.google.common.base.FinalizableSoftReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)": "/**\n* Constructs a FinalizableSoftReference with a referent and cleans up the reference queue.\n* @param referent the object to be referenced\n* @param queue the FinalizableReferenceQueue to manage references\n*/"
    },
    "com.google.common.base.FinalizableWeakReference": {
        "com.google.common.base.FinalizableWeakReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)": "/**\n* Constructs a FinalizableWeakReference and cleans up the reference queue.\n* @param referent the object to be referenced\n* @param queue the FinalizableReferenceQueue for managing references\n*/"
    },
    "com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser": {
        "com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser:parseInteger(com.google.common.cache.CacheBuilderSpec,int)": "/**\n* Parses and sets the concurrency level in CacheBuilderSpec.\n* @param spec CacheBuilderSpec object to modify\n* @param value new concurrency level to set\n*/"
    },
    "com.google.common.cache.CacheBuilderSpec$InitialCapacityParser": {
        "com.google.common.cache.CacheBuilderSpec$InitialCapacityParser:parseInteger(com.google.common.cache.CacheBuilderSpec,int)": "/**\n* Parses and sets initial capacity in CacheBuilderSpec if not already set.\n* @param spec CacheBuilderSpec object to modify\n* @param value new initial capacity value\n*/"
    },
    "com.google.common.cache.CacheBuilderSpec$MaximumSizeParser": {
        "com.google.common.cache.CacheBuilderSpec$MaximumSizeParser:parseLong(com.google.common.cache.CacheBuilderSpec,long)": "/**\n* Parses and sets maximum size in CacheBuilderSpec if not already defined.\n* @param spec CacheBuilderSpec to modify\n* @param value new maximum size to set\n*/"
    },
    "com.google.common.cache.CacheBuilderSpec$MaximumWeightParser": {
        "com.google.common.cache.CacheBuilderSpec$MaximumWeightParser:parseLong(com.google.common.cache.CacheBuilderSpec,long)": "/**\n* Parses and sets maximum weight in CacheBuilderSpec if not already defined.\n* @param spec CacheBuilderSpec object to modify\n* @param value new maximum weight to set\n*/"
    },
    "com.google.common.reflect.TypeCapture": {
        "com.google.common.reflect.TypeCapture:capture()": "/**\n* Captures the first type argument of the superclass.\n* @return The first actual type argument of a parameterized superclass.\n*/"
    },
    "com.google.common.cache.CacheBuilderSpec$AccessDurationParser": {
        "com.google.common.cache.CacheBuilderSpec$AccessDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)": "/**\n* Parses duration and sets access expiration in CacheBuilderSpec.\n* @param spec CacheBuilderSpec to modify\n* @param duration duration value to set\n* @param unit time unit for the duration\n*/"
    },
    "com.google.common.cache.CacheBuilderSpec$RecordStatsParser": {
        "com.google.common.cache.CacheBuilderSpec$RecordStatsParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)": "/**\n* Parses CacheBuilderSpec, setting recordStats to true if conditions are met.\n* @param spec CacheBuilderSpec to modify\n* @param key unused key parameter\n* @param value must be null for valid operation\n*/"
    },
    "com.google.common.cache.CacheBuilderSpec$RefreshDurationParser": {
        "com.google.common.cache.CacheBuilderSpec$RefreshDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)": "/**\n* Parses and sets refresh duration and time unit in CacheBuilderSpec.\n* @param spec CacheBuilderSpec to modify\n* @param duration duration value to set\n* @param unit time unit for the duration\n*/"
    },
    "com.google.common.cache.CacheBuilderSpec$WriteDurationParser": {
        "com.google.common.cache.CacheBuilderSpec$WriteDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)": "/**\n* Parses and sets write expiration duration and time unit in CacheBuilderSpec.\n* @param spec CacheBuilderSpec to modify\n* @param duration duration value to set\n* @param unit time unit of the duration\n*/"
    },
    "com.google.common.math.Quantiles$ScaleAndIndexes": {
        "com.google.common.math.Quantiles$ScaleAndIndexes:<init>(int,int[])": "/**\n* Initializes ScaleAndIndexes with scale and non-empty indexes.\n* @param scale scaling factor\n* @param indexes array of index values\n*/",
        "com.google.common.math.Quantiles$ScaleAndIndexes:compute(java.util.Collection)": "/**\n* Computes a map from a collection of Numbers.\n* @param dataset input collection of Number objects\n* @return Map with Integer keys and Double values\n*/"
    },
    "com.google.common.collect.RegularImmutableTable": {
        "com.google.common.collect.RegularImmutableTable:checkNoDuplicate(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Validates no duplicate key exists for row and column.\n* @param rowKey key for the row\n* @param columnKey key for the column\n* @param existingValue current value or null if absent\n* @param newValue value to check for duplication\n*/",
        "com.google.common.collect.RegularImmutableTable:createCellSet()": "/**\n* Creates a set of cells or returns an empty set if no cells exist.\n* @return ImmutableSet of Cell objects\n*/",
        "com.google.common.collect.RegularImmutableTable:createValues()": "/**\n* Creates an ImmutableCollection of values.\n* @return ImmutableList if empty, else new Values collection\n*/",
        "com.google.common.collect.RegularImmutableTable:<init>()": "/**\n* Constructs a new instance of RegularImmutableTable.\n*/",
        "com.google.common.collect.RegularImmutableTable:forOrderedComponents(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)": "/**\n* Creates a RegularImmutableTable based on cell data and row/column spaces.\n* @param cellList list of cells with values\n* @param rowSpace unique row identifiers\n* @param columnSpace unique column identifiers\n* @return RegularImmutableTable instance\n*/",
        "com.google.common.collect.RegularImmutableTable:forCellsInternal(java.lang.Iterable,java.util.Comparator,java.util.Comparator)": "/**\n* Constructs a RegularImmutableTable from cell data with optional row/column sorting.\n* @param cells input cell data\n* @param rowComparator optional comparator for row sorting\n* @param columnComparator optional comparator for column sorting\n* @return RegularImmutableTable instance\n*/",
        "com.google.common.collect.RegularImmutableTable:forCells(java.util.List,java.util.Comparator,java.util.Comparator)": "/**\n* Constructs a RegularImmutableTable from cell data with optional sorting.\n* @param cells input cell data\n* @param rowComparator optional row sorting comparator\n* @param columnComparator optional column sorting comparator\n* @return RegularImmutableTable instance\n*/",
        "com.google.common.collect.RegularImmutableTable:forCells(java.lang.Iterable)": "/**\n* Creates a RegularImmutableTable from cell data.\n* @param cells input cell data\n* @return RegularImmutableTable instance\n*/"
    },
    "com.google.common.io.TempFileCreator$JavaNioCreator": {
        "com.google.common.io.TempFileCreator$JavaNioCreator:createTempDir()": "/**\n* Creates a temporary directory in the specified system temp path.\n* @return File object representing the created directory\n*/",
        "com.google.common.io.TempFileCreator$JavaNioCreator:createTempFile(java.lang.String)": "/**\n* Creates a temporary file with the specified prefix.\n* @param prefix file name prefix\n* @return File object representing the created temp file\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.TempFileCreator$JavaNioCreator:userPermissions()": "/**** \n* Creates a PermissionSupplier for user permissions based on the current username.\n* @return PermissionSupplier that provides ACL attributes or throws IOException on failure\n*/"
    },
    "com.google.common.cache.CacheBuilder$3": {
        "com.google.common.cache.CacheBuilder$3:<init>()": "/**\n* Constructs a new CacheBuilder instance.\n*/"
    },
    "com.google.common.cache.ForwardingCache": {
        "com.google.common.cache.ForwardingCache:<init>()": "/**\n* Default constructor for ForwardingCache class.\n*/",
        "com.google.common.cache.ForwardingCache:delegate()": "/**\n* Returns the delegate cache instance.\n* @return the delegate Cache object\n*/",
        "com.google.common.cache.ForwardingCache:getIfPresent(java.lang.Object)": "/**\n* Retrieves value associated with the key if present.\n* @param key the key to look up\n* @return value or null if not found\n*/",
        "com.google.common.cache.ForwardingCache:get(java.lang.Object,java.util.concurrent.Callable)": "/**\n* Retrieves a value by key, loading it if absent.\n* @param key the key to retrieve the value for\n* @param valueLoader callable to load the value if not found\n* @return the value associated with the key\n*/",
        "com.google.common.cache.ForwardingCache:getAllPresent(java.lang.Iterable)": "/**\n* Retrieves all present values for given keys.\n* @param keys iterable collection of keys\n* @return ImmutableMap of found key-value pairs\n*/",
        "com.google.common.cache.ForwardingCache:put(java.lang.Object,java.lang.Object)": "/**\n* Stores a key-value pair in the cache.\n* @param key the key to be stored\n* @param value the value associated with the key\n*/",
        "com.google.common.cache.ForwardingCache:putAll(java.util.Map)": "/**\n* Inserts all mappings from the specified map into the current map.\n* @param m the map containing mappings to insert\n*/",
        "com.google.common.cache.ForwardingCache:invalidate(java.lang.Object)": "/**\n* Invalidates the cache entry associated with the given key.\n* @param key the identifier of the cache entry to invalidate\n*/",
        "com.google.common.cache.ForwardingCache:invalidateAll(java.lang.Iterable)": "/**\n* Invalidates all entries for the given keys.\n* @param keys iterable collection of keys to invalidate\n*/",
        "com.google.common.cache.ForwardingCache:invalidateAll()": "/**\n* Invalidates all cached entries using the delegate cache.\n*/",
        "com.google.common.cache.ForwardingCache:size()": "/**\n* Returns the size of the delegate cache.\n* @return size of the cache as a long value\n*/",
        "com.google.common.cache.ForwardingCache:stats()": "/**\n* Retrieves cache statistics from the delegate.\n* @return CacheStats object containing cache performance metrics\n*/",
        "com.google.common.cache.ForwardingCache:asMap()": "/**\n* Returns a concurrent map view of the cache.\n* @return ConcurrentMap containing cache entries\n*/",
        "com.google.common.cache.ForwardingCache:cleanUp()": "/**\n* Cleans up resources by invoking the delegate's cleanUp method.\n*/"
    },
    "com.google.common.collect.ForwardingCollection": {
        "com.google.common.collect.ForwardingCollection:<init>()": "/**\n* Initializes a new instance of ForwardingCollection.\n*/",
        "com.google.common.collect.ForwardingCollection:standardContainsAll(java.util.Collection)": "/**\n* Checks if the collection contains all elements of the specified collection.\n* @param collection the collection of elements to check for presence\n* @return true if all elements are present, false otherwise\n*/",
        "com.google.common.collect.ForwardingCollection:standardAddAll(java.util.Collection)": "/**\n* Adds all elements from the specified collection to this collection.\n* @param collection elements to be added\n* @return true if this collection was modified\n*/",
        "com.google.common.collect.ForwardingCollection:standardToString()": "/**\n* Converts the current object to its string representation.\n* @return string representation of the object\n*/",
        "com.google.common.collect.ForwardingCollection:standardToArray(java.lang.Object[])": "/**\n* Converts the current collection to an array of specified type.\n* @param array target array for elements\n* @return filled array of type T\n*/",
        "com.google.common.collect.ForwardingCollection:delegate()": "/**\n* Returns a collection of elements.\n* @return Collection of type E containing elements\n*/",
        "com.google.common.collect.ForwardingCollection:iterator()": "/**\n* Returns an iterator over the elements provided by delegate().\n* @return Iterator of type E from the delegate's collection\n*/",
        "com.google.common.collect.ForwardingCollection:size()": "/**\n* Returns the number of elements in the collection.\n* @return size of the collection as an integer\n*/",
        "com.google.common.collect.ForwardingCollection:removeAll(java.util.Collection)": "/**\n* Removes all elements in the specified collection.\n* @param collection elements to be removed\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.ForwardingCollection:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if empty, false otherwise\n*/",
        "com.google.common.collect.ForwardingCollection:contains(java.lang.Object)": "/**\n* Checks if the collection contains the specified object.\n* @param object the object to search for\n* @return true if the object is found, false otherwise\n*/",
        "com.google.common.collect.ForwardingCollection:add(java.lang.Object)": "/**\n* Adds an element to the collection.\n* @param element the element to be added\n* @return true if the element was added successfully\n*/",
        "com.google.common.collect.ForwardingCollection:remove(java.lang.Object)": "/**\n* Removes the specified object from the collection.\n* @param object the object to be removed\n* @return true if the object was removed, false otherwise\n*/",
        "com.google.common.collect.ForwardingCollection:containsAll(java.util.Collection)": "/**\n* Checks if all elements in the collection are present.\n* @param collection elements to check for presence\n* @return true if all elements are found, false otherwise\n*/",
        "com.google.common.collect.ForwardingCollection:addAll(java.util.Collection)": "/**\n* Adds all elements from the specified collection.\n* @param collection collection of elements to add\n* @return true if the collection was modified\n*/",
        "com.google.common.collect.ForwardingCollection:retainAll(java.util.Collection)": "/**\n* Retains only elements present in the specified collection.\n* @param collection collection of elements to retain\n* @return true if this collection changed as a result of the call\n*/",
        "com.google.common.collect.ForwardingCollection:clear()": "/**\n* Clears all elements from the delegate collection.\n*/",
        "com.google.common.collect.ForwardingCollection:toArray()": "/**\n* Converts collection to an array.\n* @return Array of objects from the collection\n*/",
        "com.google.common.collect.ForwardingCollection:toArray(java.lang.Object[])": "/**\n* Converts elements to an array of specified type.\n* @param array target array for the elements\n* @return array containing the elements\n*/",
        "com.google.common.collect.ForwardingCollection:standardContains(java.lang.Object)": "/**\n* Checks if the collection contains the specified object.\n* @param object the object to search for, can be null\n* @return true if found, otherwise false\n*/",
        "com.google.common.collect.ForwardingCollection:standardRemove(java.lang.Object)": "/**\n* Removes the specified object if present.\n* @param object the object to remove\n* @return true if removed, false if not found\n*/",
        "com.google.common.collect.ForwardingCollection:standardRemoveAll(java.util.Collection)": "/**\n* Removes specified elements from the collection using the iterator.\n* @param collection elements to remove\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.ForwardingCollection:standardRetainAll(java.util.Collection)": "/**\n* Retains elements in the collection based on the provided iterator.\n* @param collection elements to retain\n* @return true if any elements were removed\n*/",
        "com.google.common.collect.ForwardingCollection:standardClear()": "/**\n* Clears all elements from the standard iterator.\n*/",
        "com.google.common.collect.ForwardingCollection:standardIsEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if no elements exist, false otherwise\n*/",
        "com.google.common.collect.ForwardingCollection:standardToArray()": "/**** Converts the collection to an array. \n* @return Array of elements in the collection \n*/"
    },
    "com.google.common.collect.ForwardingMap": {
        "com.google.common.collect.ForwardingMap:<init>()": "/**\n* Default constructor for ForwardingMap class.\n*/",
        "com.google.common.collect.ForwardingMap:standardPutAll(java.util.Map)": "/**\n* Populates the current map with entries from the specified map.\n* @param map source map with entries to copy\n*/",
        "com.google.common.collect.ForwardingMap:standardEquals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param object the object to compare with, may be null\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ForwardingMap:standardContainsKey(java.lang.Object)": "/**\n* Checks if the map contains the specified key.\n* @param key the key to find, can be null\n* @return true if the key is found, otherwise false\n*/",
        "com.google.common.collect.ForwardingMap:standardContainsValue(java.lang.Object)": "/**\n* Checks if the current map contains the specified value.\n* @param value the value to find, can be null\n* @return true if the value is found, otherwise false\n*/",
        "com.google.common.collect.ForwardingMap:delegate()": "/**\n* Returns the backing map of type tokens to their corresponding values.\n* @return a map of type tokens to values\n*/",
        "com.google.common.collect.ForwardingMap:standardToString()": "/**\n* Returns string representation of the current object.\n* @return string representation generated by toStringImpl\n*/",
        "com.google.common.collect.ForwardingMap:size()": "/**\n* Returns the number of elements in the collection.\n* @return the size of the collection as an integer\n*/",
        "com.google.common.collect.ForwardingMap:isEmpty()": "/**\n* Checks if the backing map is empty.\n* @return true if the map has no entries, false otherwise\n*/",
        "com.google.common.collect.ForwardingMap:remove(java.lang.Object)": "/**\n* Removes the value associated with the specified key.\n* @param key the key to remove; can be null\n* @return the removed value or null if not found\n*/",
        "com.google.common.collect.ForwardingMap:clear()": "/**\n* Clears the backing map of type tokens and their values.\n*/",
        "com.google.common.collect.ForwardingMap:containsKey(java.lang.Object)": "/**\n* Checks if the map contains the specified key.\n* @param key the key to check for presence in the map\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.ForwardingMap:containsValue(java.lang.Object)": "/**\n* Checks if the backing map contains the specified value.\n* @param value the value to check for presence\n* @return true if value exists, false otherwise\n*/",
        "com.google.common.collect.ForwardingMap:get(java.lang.Object)": "/**\n* Retrieves value associated with the given key.\n* @param key the key to look up\n* @return the corresponding value or null if not found\n*/",
        "com.google.common.collect.ForwardingMap:put(java.lang.Object,java.lang.Object)": "/**\n* Puts a key-value pair in the map and returns the previous value.\n* @param key the key to insert\n* @param value the value to associate with the key\n* @return previous value associated with the key or null\n*/",
        "com.google.common.collect.ForwardingMap:putAll(java.util.Map)": "/**\n* Inserts all mappings from the specified map into this map.\n* @param map the mappings to be added\n*/",
        "com.google.common.collect.ForwardingMap:keySet()": "/**\n* Returns a set of keys from the backing map.\n* @return a Set of keys of type K\n*/",
        "com.google.common.collect.ForwardingMap:values()": "/**\n* Retrieves a collection of values from the backing map.\n* @return Collection of values associated with type tokens\n*/",
        "com.google.common.collect.ForwardingMap:entrySet()": "/**\n* Returns a set of entries from the backing map.\n* @return Set of key-value pairs from the map\n*/",
        "com.google.common.collect.ForwardingMap:equals(java.lang.Object)": "/**\n* Checks if the given object is equal to this instance.\n* @param object the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ForwardingMap:hashCode()": "/**\n* Returns the hash code of the object using the backing map.\n* @return hash code as an integer\n*/",
        "com.google.common.collect.ForwardingMap:standardRemove(java.lang.Object)": "/**\n* Removes and returns value associated with the given key.\n* @param key the key to remove\n* @return value associated with the key or null if not found\n*/",
        "com.google.common.collect.ForwardingMap:standardClear()": "/**\n* Clears all entries from the standard collection.\n*/",
        "com.google.common.collect.ForwardingMap:standardIsEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if no entries exist, false otherwise\n*/",
        "com.google.common.collect.ForwardingMap:standardHashCode()": "/**\n* Computes the standard hash code for the current set of entries.\n* @return computed hash code as an integer\n*/"
    },
    "com.google.common.collect.ForwardingMapEntry": {
        "com.google.common.collect.ForwardingMapEntry:<init>()": "/**\n* Default constructor for ForwardingMapEntry class.\n*/",
        "com.google.common.collect.ForwardingMapEntry:delegate()": "/**\n* Abstract method to retrieve the delegate entry.\n* @return Entry object of type K, V\n*/",
        "com.google.common.collect.ForwardingMapEntry:getKey()": "/**\n* Retrieves the key from the delegate entry.\n* @return Key of type K from the delegate entry\n*/",
        "com.google.common.collect.ForwardingMapEntry:getValue()": "/**\n* Retrieves the value from the delegate entry.\n* @return Value of type V from the delegate\n*/",
        "com.google.common.collect.ForwardingMapEntry:setValue(java.lang.Object)": "/**\n* Sets the value and returns the previous value.\n* @param value new value to set\n* @return previous value of type V\n*/",
        "com.google.common.collect.ForwardingMapEntry:equals(java.lang.Object)": "/**\n* Checks if the current object is equal to the specified object.\n* @param object object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ForwardingMapEntry:hashCode()": "/**\n* Computes the hash code using the delegate object's hash code.\n* @return hash code as an integer\n*/",
        "com.google.common.collect.ForwardingMapEntry:standardEquals(java.lang.Object)": "/**\n* Compares this entry with another for equality.\n* @param object the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ForwardingMapEntry:standardHashCode()": "/**\n* Computes hash code using key and value; handles nulls.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.ForwardingMapEntry:standardToString()": "/**\n* Returns a string representation of the key-value pair.\n* @return formatted string \"key=value\"\n*/"
    },
    "com.google.common.collect.ForwardingMultimap": {
        "com.google.common.collect.ForwardingMultimap:<init>()": "/**\n* Default constructor for ForwardingMultimap class.\n*/",
        "com.google.common.collect.ForwardingMultimap:delegate()": "/**\n* Returns the delegate multimap instance.\n* @return Multimap containing key-value pairs\n*/",
        "com.google.common.collect.ForwardingMultimap:asMap()": "/**\n* Returns a map view of the delegate's key-value pairs.\n* @return Map containing keys and their associated collections\n*/",
        "com.google.common.collect.ForwardingMultimap:clear()": "/**\n* Clears all entries in the delegate multimap.\n*/",
        "com.google.common.collect.ForwardingMultimap:containsEntry(java.lang.Object,java.lang.Object)": "/**\n* Checks if the delegate contains the specified key-value entry.\n* @param key the key to check\n* @param value the value to check\n* @return true if the entry exists, false otherwise\n*/",
        "com.google.common.collect.ForwardingMultimap:containsKey(java.lang.Object)": "/**\n* Checks if the specified key exists in the multimap.\n* @param key the key to check for presence\n* @return true if the key is found, false otherwise\n*/",
        "com.google.common.collect.ForwardingMultimap:containsValue(java.lang.Object)": "/**\n* Checks if the specified value is present in the collection.\n* @param value the value to search for\n* @return true if the value exists, false otherwise\n*/",
        "com.google.common.collect.ForwardingMultimap:entries()": "/**\n* Retrieves a collection of key-value entries.\n* @return Collection of Entry objects from the delegate multimap\n*/",
        "com.google.common.collect.ForwardingMultimap:get(java.lang.Object)": "/**\n* Retrieves values associated with the specified key.\n* @param key the key for which to retrieve values\n* @return Collection of values or empty if none found\n*/",
        "com.google.common.collect.ForwardingMultimap:isEmpty()": "/**\n* Checks if the delegate multimap is empty.\n* @return true if empty, false otherwise\n*/",
        "com.google.common.collect.ForwardingMultimap:keys()": "/**\n* Returns a multiset of keys from the delegate multimap.\n* @return Multiset containing keys from the multimap\n*/",
        "com.google.common.collect.ForwardingMultimap:keySet()": "/**\n* Returns a set of keys from the delegate multimap.\n* @return Set of keys contained in the multimap\n*/",
        "com.google.common.collect.ForwardingMultimap:put(java.lang.Object,java.lang.Object)": "/**\n* Inserts a key-value pair into the multimap.\n* @param key the key to insert\n* @param value the value associated with the key\n* @return true if the pair was added, false otherwise\n*/",
        "com.google.common.collect.ForwardingMultimap:putAll(java.lang.Object,java.lang.Iterable)": "/**\n* Adds all values for a key to the delegate multimap.\n* @param key the key to associate with the values\n* @param values the values to add\n* @return true if the operation was successful\n*/",
        "com.google.common.collect.ForwardingMultimap:putAll(com.google.common.collect.Multimap)": "/**\n* Adds all key-value pairs from the given multimap.\n* @param multimap source multimap to add from\n* @return true if operation succeeded, false otherwise\n*/",
        "com.google.common.collect.ForwardingMultimap:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes a key-value pair from the delegate multimap.\n* @param key the key to remove\n* @param value the value to remove\n* @return true if removed, false otherwise\n*/",
        "com.google.common.collect.ForwardingMultimap:removeAll(java.lang.Object)": "/**\n* Removes all values associated with the specified key.\n* @param key the key whose associated values are to be removed\n* @return Collection of removed values\n*/",
        "com.google.common.collect.ForwardingMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for the specified key in the multimap.\n* @param key the key for which values are replaced\n* @param values new values to associate with the key\n* @return collection of previous values associated with the key\n*/",
        "com.google.common.collect.ForwardingMultimap:size()": "/**\n* Returns the number of key-value pairs in the multimap.\n* @return count of entries in the multimap\n*/",
        "com.google.common.collect.ForwardingMultimap:values()": "/**\n* Returns a collection of values from the delegate multimap.\n* @return Collection of values stored in the multimap\n*/",
        "com.google.common.collect.ForwardingMultimap:equals(java.lang.Object)": "/**\n* Checks equality with another object using delegate's equals method.\n* @param object object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ForwardingMultimap:hashCode()": "/**\n* Computes the hash code for the object.\n* @return hash code as an integer based on delegate's hash code\n*/"
    },
    "com.google.common.util.concurrent.ForwardingFuture": {
        "com.google.common.util.concurrent.ForwardingFuture:<init>()": "/**\n* Default constructor for ForwardingFuture class.\n*/",
        "com.google.common.util.concurrent.ForwardingFuture:delegate()": "/**\n* Retrieves the current delegate Future instance.\n* @return Future representing the delegate instance\n*/",
        "com.google.common.util.concurrent.ForwardingFuture:cancel(boolean)": "/**\n* Cancels the current task execution.\n* @param mayInterruptIfRunning true to interrupt if running, false otherwise\n* @return true if the task was cancelled, false if already completed\n*/",
        "com.google.common.util.concurrent.ForwardingFuture:isCancelled()": "/**\n* Checks if the current task is cancelled.\n* @return true if cancelled, false otherwise\n*/",
        "com.google.common.util.concurrent.ForwardingFuture:isDone()": "/**\n* Checks if the delegate Future is completed.\n* @return true if done, false otherwise\n*/",
        "com.google.common.util.concurrent.ForwardingFuture:get()": "/**\n* Retrieves the result of the delegate Future.\n* @return value of type V from the delegate Future\n* @throws InterruptedException if interrupted while waiting\n* @throws ExecutionException if the computation threw an exception\n*/",
        "com.google.common.util.concurrent.ForwardingFuture:get(long,java.util.concurrent.TimeUnit)": "/**\n* Retrieves the value with a timeout.\n* @param timeout maximum time to wait\n* @param unit time unit for the timeout\n* @return value retrieved from delegate\n*/"
    },
    "com.google.common.cache.ForwardingLoadingCache": {
        "com.google.common.cache.ForwardingLoadingCache:delegate()": "/**\n* Returns the underlying LoadingCache instance.\n* @return the delegate LoadingCache\n*/",
        "com.google.common.cache.ForwardingLoadingCache:<init>()": "/**\n* Initializes a new instance of the ForwardingLoadingCache class.\n*/",
        "com.google.common.cache.ForwardingLoadingCache:get(java.lang.Object)": "/**\n* Retrieves a value by key from the delegate cache.\n* @param key the key for the desired value\n* @return the value associated with the key\n* @throws ExecutionException if retrieval fails\n*/",
        "com.google.common.cache.ForwardingLoadingCache:getUnchecked(java.lang.Object)": "/**\n* Retrieves value without checked exceptions.\n* @param key the key to look up in the cache\n* @return the corresponding value from the cache\n*/",
        "com.google.common.cache.ForwardingLoadingCache:getAll(java.lang.Iterable)": "/**\n* Retrieves an immutable map of values for the given keys.\n* @param keys iterable of keys to fetch values for\n* @return ImmutableMap of values associated with the keys\n*/",
        "com.google.common.cache.ForwardingLoadingCache:apply(java.lang.Object)": "/**\n* Applies the function to the given key using the delegate cache.\n* @param key the key to apply the function to\n* @return the result of applying the function\n*/",
        "com.google.common.cache.ForwardingLoadingCache:refresh(java.lang.Object)": "/**\n* Refreshes the cache entry for the specified key.\n* @param key the key whose cache entry is to be refreshed\n*/"
    },
    "com.google.common.eventbus.SubscriberRegistry": {
        "com.google.common.eventbus.SubscriberRegistry:getSubscribersForTesting(java.lang.Class)": "/**\n* Retrieves subscribers for a specific event type.\n* @param eventType the class type of the event\n* @return Set of Subscribers or an empty set if none found\n*/",
        "com.google.common.eventbus.SubscriberRegistry:<init>(com.google.common.eventbus.EventBus)": "/**\n* Initializes SubscriberRegistry with an EventBus instance.\n* @param bus the EventBus to be registered, must not be null\n*/",
        "com.google.common.eventbus.SubscriberRegistry:getAnnotatedMethods(java.lang.Class)": "/**\n* Retrieves annotated methods from a class.\n* @param clazz the class to inspect for annotated methods\n* @return ImmutableList of methods or throws an exception on error\n*/",
        "com.google.common.eventbus.SubscriberRegistry:flattenHierarchy(java.lang.Class)": "/**\n* Retrieves cached hierarchy of classes for a given concrete class.\n* @param concreteClass the class to flatten the hierarchy for\n* @return ImmutableSet of classes in the hierarchy\n*/",
        "com.google.common.eventbus.SubscriberRegistry:getSubscribers(java.lang.Object)": "/**\n* Retrieves subscribers for a given event.\n* @param event the event object to get subscribers for\n* @return an iterator of Subscriber objects\n*/",
        "com.google.common.eventbus.SubscriberRegistry:findAllSubscribers(java.lang.Object)": "/**\n* Finds all subscribers for events in the given listener.\n* @param listener the object containing event handling methods\n* @return Multimap mapping event types to Subscriber instances\n*/",
        "com.google.common.eventbus.SubscriberRegistry:register(java.lang.Object)": "/**\n* Registers event listener methods for various event types.\n* @param listener object containing event handling methods\n*/",
        "com.google.common.eventbus.SubscriberRegistry:unregister(java.lang.Object)": "/**** Unregisters a listener by removing its subscribers for various event types. \n* @param listener the object whose subscribers are to be unregistered\n*/",
        "com.google.common.eventbus.SubscriberRegistry:getAnnotatedMethodsNotCached(java.lang.Class)": "/**\n* Retrieves methods with @Subscribe annotation from a class's supertypes.\n* @param clazz the class to inspect for annotated methods\n* @return ImmutableList of annotated methods found\n*/"
    },
    "com.google.common.reflect.TypeToken$TypeCollector$3": {
        "com.google.common.reflect.TypeToken$TypeCollector$3:getInterfaces(java.lang.Object)": "/**\n* Retrieves interfaces of the specified type.\n* @param type the type to fetch interfaces for\n* @return an iterable collection of interfaces\n*/",
        "com.google.common.reflect.TypeToken$TypeCollector$3:collectTypes(java.lang.Iterable)": "/**\n* Collects and sorts types with their order numbers.\n* @param types Iterable of types to collect\n* @return ImmutableList of types sorted by order number\n*/"
    },
    "com.google.common.cache.LocalCache$AbstractCacheSet": {
        "com.google.common.cache.LocalCache$AbstractCacheSet:isEmpty()": "/**\n* Checks if the cache is empty.\n* @return true if the cache is empty, false otherwise\n*/",
        "com.google.common.cache.LocalCache$AbstractCacheSet:size()": "/**\n* Returns the size of the LocalCache.\n* @return int representing the number of segments in the cache\n*/",
        "com.google.common.cache.LocalCache$AbstractCacheSet:clear()": "/**\n* Clears all segments in the local cache.\n* @return void\n*/"
    },
    "com.google.common.cache.LocalCache$EntryFactory$2": {
        "com.google.common.cache.LocalCache$EntryFactory$2:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)": "/**\n* Creates a copy of a reference entry.\n* @param segment the segment containing the entry\n* @param original the entry to copy\n* @param newNext the next entry in the chain\n* @param key the key for the new entry\n* @return a new ReferenceEntry instance\n*/",
        "com.google.common.cache.LocalCache$EntryFactory$2:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Creates a new ReferenceEntry for the specified segment.\n* @param segment the segment to which the entry belongs\n* @param key the key for the new entry\n* @param hash the hash code of the key\n* @param next the next entry in the chain, or null if none\n* @return a new ReferenceEntry instance\n*/"
    },
    "com.google.common.cache.LocalCache$EntryFactory$3": {
        "com.google.common.cache.LocalCache$EntryFactory$3:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)": "/**\n* Copies a reference entry with a new key and next entry.\n* @param segment the segment containing the entry\n* @param original the entry to copy\n* @param newNext the next entry in the chain\n* @param key the key for the new entry\n* @return a new ReferenceEntry instance\n*/",
        "com.google.common.cache.LocalCache$EntryFactory$3:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Creates a new ReferenceEntry for a given segment and key.\n* @param segment the segment to which the entry belongs\n* @param key the entry's key\n* @param hash the hash code of the key\n* @param next the next entry in the chain, or null if none\n* @return a new ReferenceEntry instance\n*/"
    },
    "com.google.common.cache.LocalCache$EntryFactory$4": {
        "com.google.common.cache.LocalCache$EntryFactory$4:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)": "/**** \n* Copies a reference entry for a given segment.\n* @param segment the segment containing the entry\n* @param original the entry to copy\n* @param newNext the next entry in the chain\n* @param key the key for the new entry\n* @return a new ReferenceEntry instance\n*/",
        "com.google.common.cache.LocalCache$EntryFactory$4:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Creates a new ReferenceEntry for a given segment and key.\n* @param segment the segment to which the entry belongs\n* @param key the entry's key\n* @param hash the hash code of the key\n* @param next the next entry in the chain, or null if none\n* @return a new ReferenceEntry instance\n*/"
    },
    "com.google.common.cache.LocalCache$EntryFactory$6": {
        "com.google.common.cache.LocalCache$EntryFactory$6:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)": "/**\n* Creates a copy of a reference entry.\n* @param segment the segment containing the entry\n* @param original the entry to copy\n* @param newNext the next entry in the chain\n* @param key the key for the new entry\n* @return a new ReferenceEntry instance\n*/",
        "com.google.common.cache.LocalCache$EntryFactory$6:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Creates a new ReferenceEntry for the specified segment and key.\n* @param segment the segment to which the entry belongs\n* @param key the key for the new entry\n* @param hash the hash code for the key\n* @param next optional next entry in the chain\n* @return a new ReferenceEntry instance\n*/"
    },
    "com.google.common.cache.LocalCache$EntryFactory$7": {
        "com.google.common.cache.LocalCache$EntryFactory$7:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)": "/**\n* Creates a copy of a reference entry.\n* @param segment the segment containing the entry\n* @param original the entry to copy\n* @param newNext the next entry in the chain\n* @param key the key for the new entry\n* @return a new ReferenceEntry instance\n*/",
        "com.google.common.cache.LocalCache$EntryFactory$7:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Creates a new ReferenceEntry for the specified segment and key.\n* @param segment the segment to which the entry belongs\n* @param key the key for the new entry\n* @param hash the hash code of the key\n* @param next optional next entry in the chain\n* @return a new ReferenceEntry instance\n*/"
    },
    "com.google.common.cache.LocalCache$EntryFactory$8": {
        "com.google.common.cache.LocalCache$EntryFactory$8:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)": "/**\n* Creates a copy of a reference entry.\n* @param segment the segment containing the entry\n* @param original the entry to copy\n* @param newNext the next entry in the chain\n* @param key the key for the new entry\n* @return a new ReferenceEntry instance\n*/",
        "com.google.common.cache.LocalCache$EntryFactory$8:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Creates a new ReferenceEntry for a given segment and key.\n* @param segment the segment to which the entry belongs\n* @param key the key for the entry\n* @param hash hash code of the key\n* @param next optional next entry in the chain\n* @return a new ReferenceEntry instance\n*/"
    },
    "com.google.common.cache.LocalCache$KeyIterator": {
        "com.google.common.cache.LocalCache$KeyIterator:next()": "/**\n* Retrieves the next key from the entry.\n* @return the next key of type K\n*/"
    },
    "com.google.common.cache.LocalCache$WeightedSoftValueReference": {
        "com.google.common.cache.LocalCache$WeightedSoftValueReference:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry,int)": "/********************************\n* Constructs a WeightedSoftValueReference.\n* @param queue ReferenceQueue for cleanup\n* @param referent the soft-referenced object\n* @param entry associated ReferenceEntry\n* @param weight the weight of the reference\n********************************/",
        "com.google.common.cache.LocalCache$WeightedSoftValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)": "/****\n* Creates a copy of the value reference.\n* @param queue ReferenceQueue for cleanup\n* @param value the soft-referenced object\n* @param entry associated ReferenceEntry\n* @return new ValueReference instance\n*/"
    },
    "com.google.common.cache.LocalCache$WeightedStrongValueReference": {
        "com.google.common.cache.LocalCache$WeightedStrongValueReference:<init>(java.lang.Object,int)": "/**\n* Constructs a WeightedStrongValueReference with a referent and its associated weight.\n* @param referent the object to be strongly referenced\n* @param weight the weight of the reference\n*/"
    },
    "com.google.common.cache.LocalCache$Strength$1": {
        "com.google.common.cache.LocalCache$Strength$1:defaultEquivalence()": "/**\n* Returns the default equivalence instance for Object type.\n* @return Equivalence<Object> instance for comparison\n*/",
        "com.google.common.cache.LocalCache$Strength$1:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)": "/**\n* Creates a ValueReference for a given entry with specified value and weight.\n* @param segment the segment containing the entry\n* @param entry the entry to reference\n* @param value the value to associate with the entry\n* @param weight the weight of the reference\n* @return a ValueReference object\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$Strength$1": {
        "com.google.common.collect.MapMakerInternalMap$Strength$1:defaultEquivalence()": "/**\n* Provides the default equivalence instance for object comparison.\n* @return Equivalence instance for equality checks\n*/"
    },
    "com.google.common.cache.LocalCache$Strength$2": {
        "com.google.common.cache.LocalCache$Strength$2:defaultEquivalence()": "/**\n* Returns the default equivalence instance for objects.\n* @return Equivalence<Object> instance for object comparison\n*/",
        "com.google.common.cache.LocalCache$Strength$2:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)": "/**\n* Retrieves a ValueReference for a given segment and entry.\n* @param segment the segment containing the entry\n* @param entry the ReferenceEntry to reference\n* @param value the value associated with the entry\n* @param weight the weight of the reference\n* @return a ValueReference object\n*/"
    },
    "com.google.common.cache.LocalCache$Strength$3": {
        "com.google.common.cache.LocalCache$Strength$3:defaultEquivalence()": "/**\n* Returns the default equivalence instance for objects.\n* @return Equivalence<Object> instance for object comparison\n*/",
        "com.google.common.cache.LocalCache$Strength$3:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)": "/**\n* Returns a ValueReference for the given segment and entry with specified value and weight.\n* @param segment the segment to which the entry belongs\n* @param entry the reference entry for the value\n* @param value the value to be referenced\n* @param weight the weight of the reference\n* @return a ValueReference object\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$Strength$2": {
        "com.google.common.collect.MapMakerInternalMap$Strength$2:defaultEquivalence()": "/**\n* Returns the default equivalence instance for objects.\n* @return Equivalence<Object> instance for object comparison\n*/"
    },
    "com.google.common.cache.LocalCache$WeightedWeakValueReference": {
        "com.google.common.cache.LocalCache$WeightedWeakValueReference:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry,int)": "/**\n* Constructs a WeightedWeakValueReference with a given weight.\n* @param queue the reference queue for cleanup\n* @param referent the referenced object\n* @param entry the associated reference entry\n* @param weight the weight of the reference\n*/",
        "com.google.common.cache.LocalCache$WeightedWeakValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)": "/****\n* Creates a copy of the value reference.\n* @param queue reference queue for cleanup\n* @param value the value to reference\n* @param entry the associated reference entry\n* @return a new ValueReference instance\n*/"
    },
    "com.google.common.cache.LocalCache$ValueIterator": {
        "com.google.common.cache.LocalCache$ValueIterator:next()": "/**\n* Returns the value of the next entry in the sequence.\n* @return the value of type V from the next entry\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap": {
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:sortedMap()": "/**\n* Returns the submap as a sorted NavigableMap.\n* @return NavigableMap of collections from the submap\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollAsMapEntry(java.util.Iterator)": "/**\n* Polls an entry from the iterator, returning an immutable map entry.\n* @param entryIterator iterator of map entries\n* @return Immutable entry with key and unmodifiable collection of values, or null if empty\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lowerEntry(java.lang.Object)": "/**\n* Retrieves the lower entry for the given key in the sorted map.\n* @param key the key to find the lower entry for\n* @return Entry or null if no lower entry exists\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lowerKey(java.lang.Object)": "/**\n* Retrieves the greatest key less than the specified key.\n* @param key the key to compare against\n* @return the lower key or null if none exists\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:floorEntry(java.lang.Object)": "/**\n* Retrieves the floor entry for the given key.\n* @param key the key to find the floor entry for\n* @return wrapped Entry or null if not found\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:floorKey(java.lang.Object)": "/**\n* Retrieves the greatest key less than or equal to the specified key.\n* @param key the key to compare\n* @return the floor key or null if not found\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:ceilingEntry(java.lang.Object)": "/**\n* Retrieves the ceiling entry for a given key.\n* @param key the key to find the ceiling entry for\n* @return Entry with key and collection or null if not found\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:ceilingKey(java.lang.Object)": "/**\n* Retrieves the least key greater than or equal to the specified key.\n* @param key the key to compare\n* @return the ceiling key or null if not found\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:higherEntry(java.lang.Object)": "/**\n* Retrieves the entry greater than the specified key.\n* @param key the key to compare with\n* @return wrapped entry or null if not found\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:higherKey(java.lang.Object)": "/**\n* Retrieves the least key greater than the specified key.\n* @param key the key to compare against\n* @return the higher key or null if none exists\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:firstEntry()": "/**\n* Retrieves the first entry from the sorted map.\n* @return Entry of key and collection or null if empty\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lastEntry()": "/**\n* Retrieves the last entry from the sorted map.\n* @return last Entry or null if the map is empty\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:descendingMap()": "/**\n* Returns a descending view of the map as a NavigableMap.\n* @return NavigableMap of collections in descending order\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:createKeySet()": "/**\n* Creates a NavigableSet of keys from the sorted map.\n* @return NavigableSet of keys from the sorted map\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Retrieves a submap of collections within specified key range.\n* @param fromKey starting key, inclusive if fromInclusive is true\n* @param toKey ending key, inclusive if toInclusive is true\n* @return NavigableMap of collections within the key range\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:headMap(java.lang.Object,boolean)": "/**\n* Returns a sorted submap up to a specified key.\n* @param toKey upper limit key for the submap\n* @param inclusive indicates if the upper limit is inclusive\n* @return NavigableMap of collections up to the specified key\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:tailMap(java.lang.Object,boolean)": "/**\n* Retrieves a tail map starting from the specified key.\n* @param fromKey the key to start the tail map from\n* @param inclusive true if the fromKey should be included\n* @return NavigableMap of collections from the tail map\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollFirstEntry()": "/**\n* Polls the first entry from the map as an immutable key-value collection.\n* @return Immutable entry or null if the map is empty\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollLastEntry()": "/**\n* Polls the last entry from the map as an immutable map entry.\n* @return Entry with key and collection of values, or null if empty\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:descendingKeySet()": "/**\n* Returns a NavigableSet of keys in descending order.\n* @return NavigableSet of keys from the descending map\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:subMap(java.lang.Object,java.lang.Object)": "/**\n* Retrieves a submap of collections within specified key range.\n* @param fromKey starting key, inclusive\n* @param toKey ending key, exclusive\n* @return NavigableMap of collections within the key range\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:headMap(java.lang.Object)": "/**\n* Returns a NavigableMap of collections up to the specified key, exclusive.\n* @param toKey upper limit key for the submap\n* @return NavigableMap of collections up to the specified key\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:tailMap(java.lang.Object)": "/**\n* Retrieves a tail map starting from the specified key.\n* @param fromKey the key to start the tail map from\n* @return NavigableMap of collections from the tail map\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:keySet()": "/**\n* Returns a navigable set of keys from the sorted map.\n* @return NavigableSet of keys\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:navigableKeySet()": "/**\n* Returns a navigable set of keys from the sorted map.\n* @return NavigableSet of keys\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet": {
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:sortedMap()": "/**\n* Returns a sorted navigable map of collections from the superclass.\n* @return NavigableMap with keys of type K and values of type Collection<V>\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:pollFirst()": "/**\n* Retrieves and removes the first element from the iterator.\n* @return the first element or null if the iterator is empty\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:lower(java.lang.Object)": "/**\n* Retrieves the lowest key less than the specified key.\n* @param k the key to compare with\n* @return the lower key or null if none exists\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:floor(java.lang.Object)": "/**\n* Returns the greatest key less than or equal to the given key.\n* @param k the key to compare\n* @return the floor key or null if not found\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:ceiling(java.lang.Object)": "/**\n* Retrieves the least key greater than or equal to the specified key.\n* @param k the key to compare\n* @return the ceiling key or null if none exists\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:higher(java.lang.Object)": "/**\n* Retrieves the least key greater than the specified key.\n* @param k the key to compare against\n* @return the higher key or null if none exists\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:descendingSet()": "/**\n* Returns a navigable set of keys in descending order.\n* @return NavigableSet of keys from the sorted map\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:headSet(java.lang.Object,boolean)": "/**\n* Returns a view of the portion of the set up to the specified element.\n* @param toElement the upper bound element\n* @param inclusive true if the set includes the upper bound\n* @return NavigableSet of keys up to toElement\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a subset of keys within specified range.\n* @param fromElement start key, inclusive if fromInclusive is true\n* @param toElement end key, inclusive if toInclusive is true\n* @return NavigableSet of keys within the range\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:tailSet(java.lang.Object,boolean)": "/**\n* Returns a view of the portion of the set greater than or equal to fromElement.\n* @param fromElement the starting element for the tail set\n* @param inclusive true if the set includes fromElement\n* @return NavigableSet view of the tail set\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:descendingIterator()": "/**\n* Returns an iterator over keys in descending order.\n* @return Iterator for keys from the descending set\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:headSet(java.lang.Object)": "/**\n* Returns a view of the set up to the specified element, excluding it.\n* @param toElement the upper bound element\n* @return NavigableSet of keys up to toElement, excluding toElement\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:subSet(java.lang.Object,java.lang.Object)": "/**\n* Retrieves a navigable subset of keys within a specified range.\n* @param fromElement start key, inclusive\n* @param toElement end key, exclusive\n* @return NavigableSet of keys in the range\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:tailSet(java.lang.Object)": "/**\n* Returns a view of the set from the specified element onward.\n* @param fromElement the starting element for the tail set\n* @return NavigableSet view of the tail set including fromElement\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:pollLast()": "/**\n* Retrieves and removes the last key in descending order.\n* @return the last key or null if none exists\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator": {
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:remove()": "/**\n* Removes current element and updates total size.\n* Calls removeIfEmpty() to clean up if necessary.\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:validateIterator()": "/**\n* Validates iterator state; checks for concurrent modifications.\n* @throws ConcurrentModificationException if delegate is modified\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:hasNext()": "/**\n* Checks if there are more elements in the iterator.\n* @return true if more elements exist, false otherwise\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:next()": "/**\n* Returns the next element from the iterator.\n* @return next element of type V\n*/",
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:getDelegateIterator()": "/**\n* Returns the delegate iterator after validating its state.\n* @return Iterator of type V\n*/"
    },
    "com.google.common.collect.HashMultiset": {
        "com.google.common.collect.HashMultiset:iterator()": "/**\n* Returns an iterator for the multiset elements.\n* @return Iterator for the multiset elements\n*/",
        "com.google.common.collect.HashMultiset:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object using default serialization and custom multiset serialization.\n* @param stream output stream for serialization\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.collect.HashMultiset:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state and populates Multiset from input stream.\n* @param stream the input stream for reading object data\n*/",
        "com.google.common.collect.HashMultiset:forEachEntry(java.util.function.ObjIntConsumer)": "/**\n* Applies action to each entry in the backing map with non-null check.\n* @param action consumer for processing map entries\n*/",
        "com.google.common.collect.HashMultiset:<init>()": "/**\n* Initializes a HashMultiset with an empty HashMap for element counts.\n*/",
        "com.google.common.collect.HashMultiset:size()": "/**\n* Returns the size as a saturated int.\n* @return saturated int value of size\n*/",
        "com.google.common.collect.HashMultiset:clear()": "/**\n* Resets frequencies and clears the backing map.\n*/",
        "com.google.common.collect.HashMultiset:count(java.lang.Object)": "/**\n* Counts occurrences of an element in the backing map.\n* @param element the element to count\n* @return the count of occurrences or 0 if not found\n*/",
        "com.google.common.collect.HashMultiset:create()": "/**\n* Creates and returns a new empty HashMultiset.\n* @return a new HashMultiset instance\n*/",
        "com.google.common.collect.HashMultiset:setCount(java.lang.Object,int)": "/**\n* Sets the count for an element and returns the previous count.\n* @param element the key for the count in the backing map\n* @param count the new count to set, must be non-negative\n* @return the previous count for the element\n*/",
        "com.google.common.collect.HashMultiset:<init>(int)": "/**\n* Initializes a HashMultiset with a specified number of distinct elements.\n* @param distinctElements expected number of unique elements\n*/",
        "com.google.common.collect.HashMultiset:entrySet()": "/**\n* Returns a set of multiset entries from the superclass.\n* @return Set of Multiset.Entry objects\n*/",
        "com.google.common.collect.HashMultiset:add(java.lang.Object,int)": "/**\n* Adds occurrences of an element; returns previous count or 0 if new.\n* @param element the element to add occurrences for\n* @param occurrences number of occurrences to add\n* @return previous count of occurrences for the element\n*/",
        "com.google.common.collect.HashMultiset:remove(java.lang.Object,int)": "/**\n* Removes specified occurrences of an element; returns previous count.\n* @param element the element to remove\n* @param occurrences number of occurrences to remove\n* @return previous count of the element\n*/",
        "com.google.common.collect.HashMultiset:create(int)": "/**\n* Creates a HashMultiset with a specified number of distinct elements.\n* @param distinctElements expected number of unique elements\n* @return a new HashMultiset instance\n*/",
        "com.google.common.collect.HashMultiset:create(java.lang.Iterable)": "/**\n* Creates a HashMultiset from given elements.\n* @param elements source elements for the multiset\n* @return a HashMultiset containing the elements\n*/"
    },
    "com.google.common.collect.LinkedHashMultiset": {
        "com.google.common.collect.LinkedHashMultiset:iterator()": "/**\n* Returns an iterator for the multiset elements.\n* @return Iterator for the multiset elements\n*/",
        "com.google.common.collect.LinkedHashMultiset:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object using default serialization and writes a multiset.\n* @param stream output stream for serialization\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.collect.LinkedHashMultiset:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from stream and populates backing map.\n* @param stream input stream for reading object data\n*/",
        "com.google.common.collect.LinkedHashMultiset:forEachEntry(java.util.function.ObjIntConsumer)": "/**\n* Applies an action to each entry in the backing map.\n* @param action consumer for processing map entries\n*/",
        "com.google.common.collect.LinkedHashMultiset:<init>()": "/**\n* Initializes a LinkedHashMultiset with an empty backing map.\n*/",
        "com.google.common.collect.LinkedHashMultiset:size()": "/**\n* Returns the size as a saturated int.\n* @return saturated int value of size\n*/",
        "com.google.common.collect.LinkedHashMultiset:clear()": "/**\n* Resets all frequencies and clears the backing map.\n*/",
        "com.google.common.collect.LinkedHashMultiset:count(java.lang.Object)": "/**\n* Counts occurrences of an element in the backing map.\n* @param element the element to count\n* @return the count of occurrences or 0 if not found\n*/",
        "com.google.common.collect.LinkedHashMultiset:create()": "/**\n* Creates an empty LinkedHashMultiset instance.\n* @return a new LinkedHashMultiset object\n*/",
        "com.google.common.collect.LinkedHashMultiset:setCount(java.lang.Object,int)": "/**\n* Updates the count for an element and returns the previous count.\n* @param element the key for the count in the backing map\n* @param count the new count to set, must be non-negative\n* @return the previous count for the element\n*/",
        "com.google.common.collect.LinkedHashMultiset:<init>(int)": "/**\n* Constructs a LinkedHashMultiset with specified distinct element capacity.\n* @param distinctElements desired number of unique elements\n*/",
        "com.google.common.collect.LinkedHashMultiset:entrySet()": "/**\n* Returns a set of multiset entries from the superclass.\n* @return Set of Multiset.Entry objects\n*/",
        "com.google.common.collect.LinkedHashMultiset:add(java.lang.Object,int)": "/**\n* Adds occurrences of an element; returns previous count or 0 if new.\n* @param element the element to add occurrences for\n* @param occurrences number of occurrences to add\n* @return previous count of occurrences for the element\n*/",
        "com.google.common.collect.LinkedHashMultiset:remove(java.lang.Object,int)": "/**\n* Removes specified occurrences of an element from the collection.\n* @param element the element to remove\n* @param occurrences number of occurrences to remove\n* @return previous count of the element\n*/",
        "com.google.common.collect.LinkedHashMultiset:create(int)": "/**\n* Creates a LinkedHashMultiset with a specified capacity for unique elements.\n* @param distinctElements desired number of unique elements\n* @return a new LinkedHashMultiset instance\n*/",
        "com.google.common.collect.LinkedHashMultiset:create(java.lang.Iterable)": "/**\n* Creates a LinkedHashMultiset from the given elements.\n* @param elements source of elements to add\n* @return a new LinkedHashMultiset instance\n*/"
    },
    "com.google.common.collect.MultimapBuilder$HashSetSupplier": {
        "com.google.common.collect.MultimapBuilder$HashSetSupplier:<init>(int)": "/**\n* Initializes HashSetSupplier with expected values per key.\n* @param expectedValuesPerKey non-negative expected value count\n*/",
        "com.google.common.collect.MultimapBuilder$HashSetSupplier:get()": "/**\n* Retrieves a set with an expected size for values.\n* @return Set of values with specified initial capacity\n*/"
    },
    "com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier": {
        "com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier:<init>(int)": "/**\n* Initializes LinkedHashSetSupplier with expected values per key.\n* @param expectedValuesPerKey non-negative expected values per key\n*/",
        "com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier:get()": "/**\n* Retrieves a set with a specified initial capacity.\n* @return Set of values with expected size for efficiency\n*/"
    },
    "com.google.common.collect.AbstractMultimap$EntrySet": {
        "com.google.common.collect.AbstractMultimap$EntrySet:hashCode()": "/**\n* Computes the hash code for the current object.\n* @return hash code as an integer based on the object's set representation\n*/",
        "com.google.common.collect.AbstractMultimap$EntrySet:equals(java.lang.Object)": "/**\n* Checks equality of the current object with another.\n* @param obj object to compare with\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.collect.FilteredKeySetMultimap$EntrySet": {
        "com.google.common.collect.FilteredKeySetMultimap$EntrySet:hashCode()": "/**\n* Computes the hash code for the current object.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.FilteredKeySetMultimap$EntrySet:equals(java.lang.Object)": "/**\n* Checks equality of this object with another object.\n* @param o the object to compare with\n* @return true if equal, false otherwise\n*/"
    },
    "com.google.common.collect.Maps$UnmodifiableEntrySet": {
        "com.google.common.collect.Maps$UnmodifiableEntrySet:hashCode()": "/**\n* Computes the hash code for the current object.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.Maps$UnmodifiableEntrySet:equals(java.lang.Object)": "/**\n* Checks equality of this object with another.\n* @param object the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Maps$UnmodifiableEntrySet:<init>(java.util.Set)": "/**\n* Constructs an UnmodifiableEntrySet from a given set of entries.\n* @param entries set of entries to be wrapped as unmodifiable\n*/"
    },
    "com.google.common.collect.Sets$FilteredSet": {
        "com.google.common.collect.Sets$FilteredSet:hashCode()": "/**\n* Computes the hash code for this object.\n* @return the computed hash code as an integer\n*/",
        "com.google.common.collect.Sets$FilteredSet:equals(java.lang.Object)": "/**\n* Checks if this object is equal to the specified object.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Sets$FilteredSet:<init>(java.util.Set,com.google.common.base.Predicate)": "/**\n* Constructs a filtered set based on a predicate.\n* @param unfiltered the original set to filter\n* @param predicate the condition to filter elements\n*/"
    },
    "com.google.common.collect.ForwardingMultiset": {
        "com.google.common.collect.ForwardingMultiset:standardRemoveAll(java.util.Collection)": "/**\n* Removes specified elements from the multiset.\n* @param elementsToRemove collection of elements to remove\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.ForwardingMultiset:standardEquals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param object the object to compare with this instance\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ForwardingMultiset:delegate()": "/**\n* Returns the delegate Multiset instance.\n* @return casted Multiset of type E\n*/",
        "com.google.common.collect.ForwardingMultiset:standardRetainAll(java.util.Collection)": "/**\n* Retains specified elements in the Multiset.\n* @param elementsToRetain collection of elements to keep\n* @return true if the Multiset was modified\n*/",
        "com.google.common.collect.ForwardingMultiset:<init>()": "/**\n* Initializes a new instance of ForwardingMultiset.\n*/",
        "com.google.common.collect.ForwardingMultiset:standardSize()": "/**\n* Returns the total count of entries in the multiset.\n* @return total count as an int\n*/",
        "com.google.common.collect.ForwardingMultiset:standardSetCount(java.lang.Object,int)": "/**\n* Sets the count of an element in this Multiset.\n* @param element the element to set the count for\n* @param count the new count for the element\n* @return previous count of the element\n*/",
        "com.google.common.collect.ForwardingMultiset:standardSetCount(java.lang.Object,int,int)": "/**\n* Sets the count of an element in the multiset.\n* @param element the element to update\n* @param oldCount the expected current count\n* @param newCount the new count to set\n* @return true if count was updated, false otherwise\n*/",
        "com.google.common.collect.ForwardingMultiset:standardIterator()": "/**\n* Provides an iterator for the current multiset.\n* @return Iterator for the multiset entries\n*/",
        "com.google.common.collect.ForwardingMultiset:count(java.lang.Object)": "/**\n* Counts occurrences of the specified element.\n* @param element the element to count\n* @return the number of occurrences of the element\n*/",
        "com.google.common.collect.ForwardingMultiset:add(java.lang.Object,int)": "/**\n* Adds specified occurrences of an element to the multiset.\n* @param element the element to add\n* @param occurrences number of times to add the element\n* @return total number of occurrences after addition\n*/",
        "com.google.common.collect.ForwardingMultiset:remove(java.lang.Object,int)": "/**\n* Removes specified occurrences of an element from the collection.\n* @param element the element to remove\n* @param occurrences number of occurrences to remove\n* @return number of occurrences removed\n*/",
        "com.google.common.collect.ForwardingMultiset:elementSet()": "/**\n* Returns a set view of the elements in the Multiset.\n* @return Set of elements from the delegate Multiset\n*/",
        "com.google.common.collect.ForwardingMultiset:entrySet()": "/**\n* Returns a set of entries from the delegate Multiset.\n* @return Set of key-value pairs from the Multiset\n*/",
        "com.google.common.collect.ForwardingMultiset:equals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ForwardingMultiset:hashCode()": "/**\n* Returns the hash code of the delegate Multiset instance.\n* @return hash code as an integer\n*/",
        "com.google.common.collect.ForwardingMultiset:setCount(java.lang.Object,int)": "/**\n* Sets the count of an element in the Multiset.\n* @param element the element to update\n* @param count new count for the element\n* @return previous count of the element\n*/",
        "com.google.common.collect.ForwardingMultiset:setCount(java.lang.Object,int,int)": "/**\n* Updates the count of an element in the Multiset.\n* @param element the element to update\n* @param oldCount the current count of the element\n* @param newCount the new count to set\n* @return true if the count was updated, false otherwise\n*/",
        "com.google.common.collect.ForwardingMultiset:standardContains(java.lang.Object)": "/**\n* Checks if the collection contains the specified object.\n* @param object the object to check for presence\n* @return true if present, false otherwise\n*/",
        "com.google.common.collect.ForwardingMultiset:standardAdd(java.lang.Object)": "/**\n* Adds an element to the collection and returns success status.\n* @param element the element to add\n* @return true indicating the addition was successful\n*/",
        "com.google.common.collect.ForwardingMultiset:standardRemove(java.lang.Object)": "/**\n* Removes one occurrence of the specified element.\n* @param element the element to remove\n* @return true if an element was removed, false otherwise\n*/",
        "com.google.common.collect.ForwardingMultiset:standardClear()": "/**\n* Clears all entries from the standard collection.\n*/",
        "com.google.common.collect.ForwardingMultiset:standardCount(java.lang.Object)": "/**\n* Counts occurrences of an object in the Multiset.\n* @param object the object to count\n* @return number of occurrences or 0 if not found\n*/",
        "com.google.common.collect.ForwardingMultiset:standardHashCode()": "/**\n* Computes the hash code for the standard representation of the Multiset.\n* @return hash code of the entry set\n*/",
        "com.google.common.collect.ForwardingMultiset:standardToString()": "/**\n* Converts the Multiset to a string representation.\n* @return String representation of the Multiset entries\n*/",
        "com.google.common.collect.ForwardingMultiset:standardAddAll(java.util.Collection)": "/**\n* Adds all elements from a collection to the multiset.\n* @param elementsToAdd collection of elements to add\n* @return true if elements were added, false if empty\n*/"
    },
    "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound": {
        "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:comparator()": "/**\n* Returns a comparator for Cut objects using natural ordering.\n* @return Comparator for Cut<C> instances\n*/",
        "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:<init>(java.util.NavigableMap,com.google.common.collect.Range)": "/**\n* Constructs ComplementRangesByLowerBound with specified ranges and window.\n* @param positiveRangesByLowerBound map of lower bounds to ranges\n* @param window upper bound range for complements\n*/",
        "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:entryIterator()": "/**\n* Iterates over complement ranges based on lower bounds.\n* @return Iterator of Entry mapping Cut to Range objects\n*/",
        "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:descendingEntryIterator()": "/**\n* Returns an iterator of descending complement ranges within a specified window.\n* @return Iterator of Entry objects containing Cut and Range of complement ranges\n*/",
        "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:<init>(java.util.NavigableMap)": "/**** Constructs ComplementRangesByLowerBound with specified positive ranges. \n* @param positiveRangesByLowerBound map of lower bounds to ranges \n*/",
        "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:size()": "/**\n* Returns the number of elements in the entry iterator.\n* @return count of elements as an int\n*/",
        "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:subMap(com.google.common.collect.Range)": "/**\n* Returns a submap of ranges within a specified window.\n* @param subWindow the range to filter the map\n* @return filtered NavigableMap or empty if not connected\n*/",
        "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)": "/**\n* Returns a submap filtered by key range with inclusivity options.\n* @param fromKey starting key, inclusive if fromInclusive is true\n* @param toKey ending key, inclusive if toInclusive is true\n* @return filtered NavigableMap of ranges\n*/",
        "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:headMap(com.google.common.collect.Cut,boolean)": "/**\n* Returns a map of ranges up to a specified key.\n* @param toKey upper bound key for the map\n* @param inclusive true for inclusive range, false for exclusive\n* @return filtered NavigableMap of ranges\n*/",
        "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:tailMap(com.google.common.collect.Cut,boolean)": "/**\n* Retrieves a tail map starting from a specified key.\n* @param fromKey the starting key for the tail map\n* @param inclusive true for including the key, false otherwise\n* @return NavigableMap from the specified key onward\n*/",
        "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:get(java.lang.Object)": "/**\n* Retrieves a Range by key if it's a Cut; returns null otherwise.\n* @param key the key to look up, expected to be a Cut\n* @return corresponding Range or null if not found\n*/",
        "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:containsKey(java.lang.Object)": "/**\n* Checks if the specified key exists in the collection.\n* @param key the key to check for presence\n* @return true if the key exists; false otherwise\n*/"
    },
    "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound": {
        "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:comparator()": "/**\n* Returns a comparator for Cut objects using natural ordering.\n* @return Comparator for Cut<C> instances\n*/",
        "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:<init>(com.google.common.collect.Range,com.google.common.collect.Range,java.util.NavigableMap)": "/**\n* Constructs SubRangeSetRangesByLowerBound with bounds and a map of ranges.\n* @param lowerBoundWindow the lower bound range\n* @param restriction the restriction range\n* @param rangesByLowerBound map of lower bounds to ranges\n*/",
        "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:entryIterator()": "/**\n* Iterates over entries of ranges within specified restrictions.\n* @return Iterator of Entry objects for valid ranges\n*/",
        "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:descendingEntryIterator()": "/**\n* Returns an iterator for descending entries within a specified range.\n* @return Iterator of Entry objects for Range within bounds\n*/",
        "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:size()": "/**\n* Returns the number of elements in the entry iterator.\n* @return the count of elements as an int\n*/",
        "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:subMap(com.google.common.collect.Range)": "/**\n* Returns a sub-map of ranges intersecting with the given window.\n* @param window the range to intersect with\n* @return NavigableMap of intersecting ranges or an empty map if disconnected\n*/",
        "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:get(java.lang.Object)": "/**\n* Retrieves the intersection of a range by key if within bounds.\n* @param key the Cut object to check\n* @return Range object or null if out of bounds or not found\n*/",
        "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)": "/**\n* Returns a sub-map of ranges defined by the specified keys and inclusivity.\n* @param fromKey starting key of the range\n* @param fromInclusive true for including fromKey\n* @param toKey ending key of the range\n* @param toInclusive true for including toKey\n* @return NavigableMap of the specified range\n*/",
        "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:headMap(com.google.common.collect.Cut,boolean)": "/**\n* Retrieves a head map up to a specified key.\n* @param toKey upper limit for the map entries\n* @param inclusive true to include the key, false to exclude it\n* @return NavigableMap of entries up to the key\n*/",
        "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:tailMap(com.google.common.collect.Cut,boolean)": "/**\n* Returns a tail map of ranges from a specified key.\n* @param fromKey the starting key for the tail map\n* @param inclusive true for inclusive range\n* @return NavigableMap of ranges starting from fromKey\n*/",
        "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:containsKey(java.lang.Object)": "/**\n* Checks if the specified key exists in the collection.\n* @param key the key to check for presence\n* @return true if the key is found, false otherwise\n*/"
    },
    "com.google.common.collect.ExplicitOrdering": {
        "com.google.common.collect.ExplicitOrdering:<init>(com.google.common.collect.ImmutableMap)": "/**\n* Constructs an ExplicitOrdering with a rank map.\n* @param rankMap mapping of items to their ranks\n*/",
        "com.google.common.collect.ExplicitOrdering:toString()": "/**\n* Returns a string representation of the Ordering with its key set.\n* @return formatted string of the key set\n*/",
        "com.google.common.collect.ExplicitOrdering:rank(java.lang.Object)": "/**\n* Retrieves the rank of a value from rankMap.\n* @param value the value to get the rank for\n* @return the rank as an integer\n* @throws IncomparableValueException if value is not found\n*/",
        "com.google.common.collect.ExplicitOrdering:compare(java.lang.Object,java.lang.Object)": "/**\n* Compares two objects based on their ranks.\n* @param left first object to compare\n* @param right second object to compare\n* @return difference of ranks as an integer\n*/",
        "com.google.common.collect.ExplicitOrdering:equals(java.lang.Object)": "/**\n* Compares this ExplicitOrdering with another object for equality.\n* @param object the object to compare, may be null\n* @return true if equal based on rankMap, false otherwise\n*/",
        "com.google.common.collect.ExplicitOrdering:hashCode()": "/**\n* Returns the hash code for the current object based on rankMap.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.ExplicitOrdering:<init>(java.util.List)": "/**** Constructs an ExplicitOrdering from a list of values. \n* @param valuesInOrder ordered list of items \n*/"
    },
    "com.google.common.collect.HashMultimap": {
        "com.google.common.collect.HashMultimap:writeObject(java.io.ObjectOutputStream)": "/**\n* Serializes the object using default serialization and a Multimap.\n* @param stream the output stream for serialization\n* @throws IOException if an I/O error occurs during serialization\n*/",
        "com.google.common.collect.HashMultimap:<init>(int,int)": "/**\n* Constructs a HashMultimap with specified key and value capacities.\n* @param expectedKeys initial number of keys\n* @param expectedValuesPerKey initial values per key\n*/",
        "com.google.common.collect.HashMultimap:<init>(com.google.common.collect.Multimap)": "/**\n* Initializes a HashMultimap from an existing multimap.\n* @param multimap source multimap to copy from\n*/",
        "com.google.common.collect.HashMultimap:readObject(java.io.ObjectInputStream)": "/**\n* Deserializes object state from an ObjectInputStream.\n* @param stream input stream for serialized data\n*/",
        "com.google.common.collect.HashMultimap:createCollection()": "/**\n* Creates a set with a specified initial capacity.\n* @return a HashSet with expected size for efficiency\n*/",
        "com.google.common.collect.HashMultimap:create(int,int)": "/**\n* Creates a HashMultimap with specified key and value capacities.\n* @param expectedKeys initial number of keys\n* @param expectedValuesPerKey initial values per key\n* @return a new HashMultimap instance\n*/",
        "com.google.common.collect.HashMultimap:<init>()": "/**\n* Initializes a HashMultimap with default capacities.\n* @param expectedKeys initial number of keys\n* @param expectedValuesPerKey initial values per key\n*/",
        "com.google.common.collect.HashMultimap:create(com.google.common.collect.Multimap)": "/**\n* Creates a HashMultimap from the provided multimap.\n* @param multimap source multimap to copy from\n* @return new HashMultimap instance\n*/",
        "com.google.common.collect.HashMultimap:create()": "/**\n* Creates and returns a new HashMultimap instance.\n* @return a new HashMultimap with default capacities\n*/"
    },
    "com.google.common.collect.CompactHashMap$KeySetView": {
        "com.google.common.collect.CompactHashMap$KeySetView:remove(java.lang.Object)": "/**\n* Removes the specified object from the collection.\n* @param o object to be removed\n* @return true if the object was removed, false otherwise\n*/",
        "com.google.common.collect.CompactHashMap$KeySetView:spliterator()": "/**\n* Returns a Spliterator for the collection's keys.\n* @return Spliterator of keys or an empty one if allocation is needed\n*/",
        "com.google.common.collect.CompactHashMap$KeySetView:iterator()": "/**\n* Returns an iterator over the keys in the map.\n* @return Iterator for keys provided by keySetIterator()\n*/",
        "com.google.common.collect.CompactHashMap$KeySetView:toArray(java.lang.Object[])": "/**\n* Converts the collection to an array, allocating if necessary.\n* @param a array to store elements\n* @return an array containing the elements\n*/",
        "com.google.common.collect.CompactHashMap$KeySetView:toArray()": "/**\n* Converts the collection to an array of keys.\n* @return Array of keys or an empty array if allocation is needed\n*/",
        "com.google.common.collect.CompactHashMap$KeySetView:forEach(java.util.function.Consumer)": "/**\n* Applies the given action to each key in the collection.\n* @param action the operation to apply on each key\n*/"
    },
    "com.google.common.collect.CompactHashMap$ValuesView": {
        "com.google.common.collect.CompactHashMap$ValuesView:spliterator()": "/**\n* Creates a Spliterator for the collection's values.\n* @return Spliterator of values or an empty one if allocation is needed\n*/",
        "com.google.common.collect.CompactHashMap$ValuesView:iterator()": "/**\n* Returns an iterator over the values in the collection.\n* @return Iterator of values from the delegate map or custom iterator if null\n*/",
        "com.google.common.collect.CompactHashMap$ValuesView:toArray(java.lang.Object[])": "/**\n* Converts collection to array; allocates if needed.\n* @param a target array for elements\n* @return array of elements or empty if none\n*/",
        "com.google.common.collect.CompactHashMap$ValuesView:toArray()": "/**\n* Converts the collection to an array.\n* @return Object array of values or an empty array if allocation is needed\n*/",
        "com.google.common.collect.CompactHashMap$ValuesView:forEach(java.util.function.Consumer)": "/**\n* Applies action to each value in the collection or delegate if not null.\n* @param action consumer to process each value\n*/"
    },
    "com.google.common.primitives.Ints$LexicographicalComparator": {
        "com.google.common.primitives.Ints$LexicographicalComparator:compare(int[],int[])": "/**\n* Compares two integer arrays lexicographically.\n* @param left first array to compare\n* @param right second array to compare\n* @return negative if left < right, zero if equal, positive if left > right\n*/"
    },
    "com.google.common.primitives.Longs$LexicographicalComparator": {
        "com.google.common.primitives.Longs$LexicographicalComparator:compare(long[],long[])": "/**\n* Compares two long arrays element-wise.\n* @param left first array to compare\n* @param right second array to compare\n* @return negative if left < right, positive if left > right, zero if equal\n*/"
    },
    "com.google.common.primitives.Booleans$LexicographicalComparator": {
        "com.google.common.primitives.Booleans$LexicographicalComparator:compare(boolean[],boolean[])": "/**\n* Compares two boolean arrays lexicographically.\n* @param left first boolean array\n* @param right second boolean array\n* @return comparison result: -1, 0, or 1\n*/"
    },
    "com.google.common.collect.ConcurrentHashMultiset$3": {
        "com.google.common.collect.ConcurrentHashMultiset$3:next()": "/**\n* Retrieves the next element from the delegate iterator.\n* @return next element of type T\n*/"
    },
    "com.google.common.collect.ImmutableRangeSet$Builder": {
        "com.google.common.collect.ImmutableRangeSet$Builder:<init>()": "/**\n* Initializes a new Builder with an empty list of ranges.\n*/",
        "com.google.common.collect.ImmutableRangeSet$Builder:add(com.google.common.collect.Range)": "/**** Adds a non-empty range to the builder. \n* @param range the range to add \n* @return this Builder instance for chaining \n*/",
        "com.google.common.collect.ImmutableRangeSet$Builder:addAll(java.lang.Iterable)": "/**** Adds multiple non-empty ranges to the builder. \n* @param ranges iterable of ranges to add \n* @return this Builder instance for chaining \n*/",
        "com.google.common.collect.ImmutableRangeSet$Builder:addAll(com.google.common.collect.RangeSet)": "/**\n* Adds multiple ranges from a RangeSet to the builder.\n* @param ranges a RangeSet containing ranges to add\n* @return this Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableRangeSet$Builder:combine(com.google.common.collect.ImmutableRangeSet$Builder)": "/**\n* Combines ranges from another builder into this builder.\n* @param builder the builder with ranges to combine\n* @return this Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableRangeSet$Builder:build()": "/**\n* Builds an ImmutableRangeSet from merged, non-overlapping ranges.\n* @return ImmutableRangeSet of combined ranges\n*/"
    },
    "com.google.common.io.Files$1": {
        "com.google.common.io.Files$1:<init>()": "/**\n* Private constructor to prevent instantiation of the Files class.\n*/"
    },
    "com.google.common.io.Resources$1": {
        "com.google.common.io.Resources$1:<init>()": "/**\n* Private constructor for Resources class to prevent instantiation.\n*/"
    },
    "com.google.common.collect.ForwardingList": {
        "com.google.common.collect.ForwardingList:delegate()": "/**\n* Returns an empty immutable list of type E.\n* @return an empty List of type E\n*/",
        "com.google.common.collect.ForwardingList:standardAddAll(int,java.lang.Iterable)": "/**\n* Adds elements to the list at the specified index.\n* @param index position to insert elements\n* @param elements iterable containing elements to add\n* @return true if the list was modified, false otherwise\n*/",
        "com.google.common.collect.ForwardingList:standardSubList(int,int)": "/**\n* Returns a sublist from the current list between specified indices.\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n* @return sublist of the current list\n*/",
        "com.google.common.collect.ForwardingList:standardHashCode()": "/**\n* Computes the standard hash code for the current object.\n* @return computed hash code as an integer\n*/",
        "com.google.common.collect.ForwardingList:<init>()": "/**\n* Initializes a new instance of ForwardingList.\n*/",
        "com.google.common.collect.ForwardingList:add(int,java.lang.Object)": "/**\n* Adds an element at the specified index.\n* @param index position to insert the element\n* @param element the element to add, can be null\n*/",
        "com.google.common.collect.ForwardingList:addAll(int,java.util.Collection)": "/**\n* Adds all elements at the specified index.\n* @param index position to insert elements\n* @param elements collection of elements to add\n* @return true if the collection changed, false otherwise\n*/",
        "com.google.common.collect.ForwardingList:get(int)": "/**\n* Retrieves element at specified index from an immutable list.\n* @param index position of the element to retrieve\n* @return element of type E at the given index\n*/",
        "com.google.common.collect.ForwardingList:indexOf(java.lang.Object)": "/**\n* Returns the index of the specified element in the list.\n* @param element the element to search for\n* @return index of the element or -1 if not found\n*/",
        "com.google.common.collect.ForwardingList:lastIndexOf(java.lang.Object)": "/**\n* Returns the last index of the specified element.\n* @param element the object to locate\n* @return the last index of element or -1 if not found\n*/",
        "com.google.common.collect.ForwardingList:listIterator()": "/**\n* Returns a list iterator for the delegate's list.\n* @return ListIterator of type E from the delegate\n*/",
        "com.google.common.collect.ForwardingList:listIterator(int)": "/**\n* Returns a list iterator starting at the specified index.\n* @param index the starting position of the iterator\n* @return ListIterator for the underlying list\n*/",
        "com.google.common.collect.ForwardingList:remove(int)": "/**\n* Removes an element at the specified index.\n* @param index the index of the element to remove\n* @return the removed element\n*/",
        "com.google.common.collect.ForwardingList:set(int,java.lang.Object)": "/**\n* Sets the element at the specified index and returns the previous element.\n* @param index position in the list\n* @param element new element to set\n* @return previous element at the specified index\n*/",
        "com.google.common.collect.ForwardingList:subList(int,int)": "/**\n* Returns a sublist from the delegate list.\n* @param fromIndex starting index (inclusive)\n* @param toIndex ending index (exclusive)\n* @return sublist of type E from delegate\n*/",
        "com.google.common.collect.ForwardingList:equals(java.lang.Object)": "/**\n* Checks equality with another object using delegate method.\n* @param object the object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ForwardingList:hashCode()": "/**\n* Computes hash code based on delegate's hash code.\n* @return hash code as an integer\n*/",
        "com.google.common.collect.ForwardingList:standardIndexOf(java.lang.Object)": "/**\n* Returns the index of the specified element in the list.\n* @param element the element to find, can be null\n* @return index of the element or -1 if not found\n*/",
        "com.google.common.collect.ForwardingList:standardLastIndexOf(java.lang.Object)": "/**\n* Returns the last index of the specified element in the list.\n* @param element the element to find (nullable)\n* @return last index or -1 if not found\n*/",
        "com.google.common.collect.ForwardingList:standardListIterator(int)": "/**\n* Returns a ListIterator starting at the specified index.\n* @param start the index to begin iteration from\n* @return ListIterator for the current list\n*/",
        "com.google.common.collect.ForwardingList:standardEquals(java.lang.Object)": "/**\n* Checks equality of the current object with another.\n* @param object the object to compare, may be null\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.ForwardingList:standardAdd(java.lang.Object)": "/**\n* Adds an element to the end of the collection.\n* @param element the element to add, can be null\n* @return true after adding the element\n*/",
        "com.google.common.collect.ForwardingList:standardIterator()": "/**\n* Returns an iterator for the standard iteration of elements.\n* @return Iterator of type E from the delegate list\n*/",
        "com.google.common.collect.ForwardingList:standardListIterator()": "/**\n* Returns a list iterator starting at the beginning of the list.\n* @return ListIterator for the underlying list\n*/"
    },
    "com.google.common.collect.ForwardingSetMultimap": {
        "com.google.common.collect.ForwardingSetMultimap:delegate()": "/**\n* Returns the delegate SortedSetMultimap instance.\n* @return SortedSetMultimap of type K and V\n*/",
        "com.google.common.collect.ForwardingSetMultimap:<init>()": "/**\n* Initializes a new instance of ForwardingSetMultimap.\n*/",
        "com.google.common.collect.ForwardingSetMultimap:get(java.lang.Object)": "/**\n* Retrieves values associated with the given key.\n* @param key the key to look up\n* @return a set of values or an empty set if none found\n*/",
        "com.google.common.collect.ForwardingSetMultimap:removeAll(java.lang.Object)": "/**\n* Removes all values for the specified key.\n* @param key the key whose associated values are to be removed\n* @return Set of removed values\n*/",
        "com.google.common.collect.ForwardingSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a given key using the delegate.\n* @param key the key whose values are to be replaced\n* @param values new values to associate with the key\n* @return Set of replaced values\n*/",
        "com.google.common.collect.ForwardingSetMultimap:entries()": "/**\n* Retrieves synchronized set of map entries from the delegate.\n* @return Set of map entries, synchronized with optional mutex\n*/"
    },
    "com.google.common.collect.HashBasedTable": {
        "com.google.common.collect.HashBasedTable:<init>(java.util.Map,com.google.common.collect.HashBasedTable$Factory)": "/**\n* Constructs a HashBasedTable with a backing map and a factory for creating values.\n* @param backingMap the initial map structure\n* @param factory a supplier for creating new map instances\n*/",
        "com.google.common.collect.HashBasedTable:columnMap()": "/**\n* Returns a map of column data structures, initializing if null.\n* @return Map of column data structures\n*/",
        "com.google.common.collect.HashBasedTable:columnKeySet()": "/**\n* Retrieves the set of column keys, initializing if null.\n* @return Set of column keys\n*/",
        "com.google.common.collect.HashBasedTable:column(java.lang.Object)": "/**\n* Creates a new Column instance for the specified column key.\n* @param columnKey key identifying the column\n* @return Map representation of the column\n*/",
        "com.google.common.collect.HashBasedTable:row(java.lang.Object)": "/**\n* Creates a new Row object for the specified row key.\n* @param rowKey the key for the desired row\n* @return a Map representing the row associated with the key\n*/",
        "com.google.common.collect.HashBasedTable:clear()": "/**\n* Clears all entries from the backing map.\n*/",
        "com.google.common.collect.HashBasedTable:size()": "/**\n* Calculates total number of entries across all backing maps.\n* @return total count of entries in all maps\n*/",
        "com.google.common.collect.HashBasedTable:isEmpty()": "/**\n* Checks if the backing map is empty.\n* @return true if no entries exist, false otherwise\n*/",
        "com.google.common.collect.HashBasedTable:containsValue(java.lang.Object)": "/**\n* Checks if the map contains the specified non-null value.\n* @param value the value to search for\n* @return true if found, false if null or not present\n*/",
        "com.google.common.collect.HashBasedTable:create()": "/**\n* Creates a new HashBasedTable with a LinkedHashMap as backing store.\n* @return a new HashBasedTable instance\n*/",
        "com.google.common.collect.HashBasedTable:put(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Stores a value in the map for specified row and column keys.\n* @param rowKey identifier for the row\n* @param columnKey identifier for the column\n* @param value the value to be stored\n* @return previous value or null if none existed\n*/",
        "com.google.common.collect.HashBasedTable:rowMap()": "/**\n* Retrieves or initializes a map of rows to columns.\n* @return Map of row keys to column maps\n*/",
        "com.google.common.collect.HashBasedTable:remove(java.lang.Object,java.lang.Object)": "/**** Removes a value by row and column keys from a backing map. \n* @param rowKey key for the row; if null, returns null \n* @param columnKey key for the column; if null, returns null \n* @return removed value or null if not found \n*/",
        "com.google.common.collect.HashBasedTable:containsColumn(java.lang.Object)": "/**\n* Checks if a column exists by its key.\n* @param columnKey the key of the column to check\n* @return true if the column exists, false otherwise\n*/",
        "com.google.common.collect.HashBasedTable:containsRow(java.lang.Object)": "/**\n* Checks if a row exists by its key.\n* @param rowKey the key of the row to check\n* @return true if the row exists, false otherwise\n*/",
        "com.google.common.collect.HashBasedTable:create(int,int)": "/**\n* Creates a HashBasedTable with specified row and cell capacities.\n* @param expectedRows number of rows in the table\n* @param expectedCellsPerRow cells per row in the table\n* @return a new HashBasedTable instance\n*/",
        "com.google.common.collect.HashBasedTable:cellSet()": "/**\n* Returns a set of cells from the superclass.\n* @return Set of Cell objects\n*/",
        "com.google.common.collect.HashBasedTable:values()": "/**\n* Returns a collection of values from the superclass.\n* @return Collection of values\n*/",
        "com.google.common.collect.HashBasedTable:create(com.google.common.collect.Table)": "/**\n* Creates a HashBasedTable from an existing Table.\n* @param table source Table to copy data from\n* @return a new HashBasedTable instance populated with table data\n*/",
        "com.google.common.collect.HashBasedTable:rowKeySet()": "/**\n* Retrieves the set of row keys from the row map.\n* @return Set of row keys\n*/",
        "com.google.common.collect.HashBasedTable:get(java.lang.Object,java.lang.Object)": "/**\n* Retrieves a value from the map using row and column keys.\n* @param rowKey the key for the row; may be null\n* @param columnKey the key for the column; may be null\n* @return value at specified keys or null if either key is null\n*/",
        "com.google.common.collect.HashBasedTable:contains(java.lang.Object,java.lang.Object)": "/**\n* Checks if a value exists in the specified row and column.\n* @param rowKey the key for the row\n* @param columnKey the key for the column\n* @return true if both keys are non-null and value exists\n*/"
    },
    "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet": {
        "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:size()": "/**\n* Returns the number of column keys.\n* @return count of column keys in the set\n*/",
        "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:iterator()": "/**\n* Returns an iterator of map entries for the table's columns.\n* @return Iterator of Entry containing column keys and their associated row-value maps\n*/",
        "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:removeAll(java.util.Collection)": "/**\n* Removes all elements in collection from this set.\n* @param c collection of elements to remove\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:retainAll(java.util.Collection)": "/**\n* Retains only elements present in the specified collection.\n* @param c collection of elements to retain\n* @return true if this collection changed, false otherwise\n*/",
        "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:contains(java.lang.Object)": "/**\n* Checks if the collection contains a specific Entry object.\n* @param obj the Entry to check for existence\n* @return true if the Entry is found, false otherwise\n*/",
        "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:remove(java.lang.Object)": "/**\n* Removes an Entry from the collection if present.\n* @param obj the Entry object to remove\n* @return true if removed, false if not found\n*/"
    },
    "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl": {
        "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:rebuildHashTable(int,java.lang.Object[],int)": "/**\n* Rebuilds a hash table with the specified size and elements.\n* @param newTableSize desired size of the hash table\n* @param elements array of elements to be hashed\n* @param n number of elements to process\n* @return populated hash table or null if empty\n*/",
        "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:<init>(int)": "/**\n* Initializes RegularSetBuilderImpl with a specified capacity.\n* @param expectedCapacity initial capacity for deduped elements\n*/",
        "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:<init>(com.google.common.collect.ImmutableSet$RegularSetBuilderImpl)": "/**\n* Copies elements from another RegularSetBuilderImpl instance.\n* @param toCopy instance to copy elements from\n*/",
        "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:copy()": "/**\n* Creates a copy of the current RegularSetBuilderImpl instance.\n* @return a new RegularSetBuilderImpl containing the same elements\n*/",
        "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:maxRunBeforeFallback(int)": "/**\n* Calculates maximum run length before fallback.\n* @param tableSize size of the table to determine max run\n* @return maximum run length as an integer\n*/",
        "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:ensureTableCapacity(int)": "/**\n* Ensures hash table capacity meets minimum requirement.\n* @param minCapacity minimum required size for the hash table\n*/",
        "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:hashFloodingDetected(java.lang.Object[])": "/**\n* Detects hash flooding in the given hash table.\n* @param hashTable array representing the hash table\n* @return true if flooding is detected, false otherwise\n*/",
        "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:build()": "/**\n* Builds an ImmutableSet based on distinct element count.\n* @return ImmutableSet containing the specified elements\n*/",
        "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:insertInHashTable(java.lang.Object)": "/**\n* Inserts an element into the hash table; handles collisions and duplicates.\n* @param e element to insert\n* @return this SetBuilderImpl instance\n*/",
        "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:review()": "/**\n* Reviews and adjusts the hash table if necessary.\n* @return updated SetBuilderImpl or a new instance if flooding is detected\n*/",
        "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:add(java.lang.Object)": "/**\n* Adds an element to the set, ensuring non-null and handling duplicates.\n* @param e element to add\n* @return this SetBuilderImpl instance\n*/"
    },
    "com.google.common.collect.ImmutableMap$SerializedForm": {
        "com.google.common.collect.ImmutableMap$SerializedForm:makeBuilder(int)": "/**\n* Creates a new Builder with specified initial capacity.\n* @param size initial capacity for the Builder\n* @return a Builder instance\n*/",
        "com.google.common.collect.ImmutableMap$SerializedForm:<init>(com.google.common.collect.ImmutableMap)": "/**\n* Initializes SerializedForm with keys and values from the given map.\n* @param map ImmutableMap of key-value pairs\n*/",
        "com.google.common.collect.ImmutableMap$SerializedForm:legacyReadResolve()": "/**\n* Reconstructs the object from serialized state using keys and values.\n* @return ImmutableMap of keys and values\n*/",
        "com.google.common.collect.ImmutableMap$SerializedForm:readResolve()": "/**\n* Resolves the object state for serialization.\n* @return deserialized object or legacy state if keys are not ImmutableSet\n*/"
    },
    "com.google.common.collect.ImmutableSet$Builder": {
        "com.google.common.collect.ImmutableSet$Builder:<init>(boolean)": "/**\n* Constructs a new Builder instance, initializing impl to null.\n* @param subclass unused boolean parameter\n*/",
        "com.google.common.collect.ImmutableSet$Builder:addAll(java.lang.Iterable)": "/**\n* Adds all elements from the iterable to the builder.\n* @param elements iterable of elements to add\n* @return this builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableSet$Builder:addAll(java.util.Iterator)": "/**\n* Adds all elements from the iterator to the builder.\n* @param elements iterator of elements to add\n* @return this Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableSet$Builder:<init>(int)": "/**\n* Initializes Builder with specified capacity for element storage.\n* @param capacity initial capacity; positive for RegularSet, otherwise EmptySet\n*/",
        "com.google.common.collect.ImmutableSet$Builder:<init>()": "/**\n* Constructs a Builder with default initial capacity of zero.\n*/",
        "com.google.common.collect.ImmutableSet$Builder:copy()": "/**\n* Replaces the current implementation with its copy.\n* @throws NullPointerException if impl is null\n*/",
        "com.google.common.collect.ImmutableSet$Builder:forceJdk()": "/**\n* Forces the use of JDK-backed implementation.\n* @param impl non-null implementation to be wrapped\n*/",
        "com.google.common.collect.ImmutableSet$Builder:copyIfNecessary()": "/**\n* Copies implementation if forceCopy is true, then resets forceCopy.\n*/",
        "com.google.common.collect.ImmutableSet$Builder:combine(com.google.common.collect.ImmutableSet$Builder)": "/**** Combines two builders and returns the current builder instance.  \n* @param other another Builder to combine with  \n* @return this Builder instance after combining  \n*/",
        "com.google.common.collect.ImmutableSet$Builder:build()": "/**\n* Builds an immutable set after reviewing the implementation.\n* @return ImmutableSet of elements from the reviewed implementation\n*/",
        "com.google.common.collect.ImmutableSet$Builder:add(java.lang.Object)": "/**\n* Adds an element to the builder after validation and copying if necessary.\n* @param element the element to add\n* @return this Builder instance\n*/"
    },
    "com.google.common.collect.ImmutableSortedAsList": {
        "com.google.common.collect.ImmutableSortedAsList:<init>(com.google.common.collect.ImmutableSortedSet,com.google.common.collect.ImmutableList)": "/**\n* Constructs ImmutableSortedAsList with a backing set and list.\n* @param backingSet the immutable sorted set\n* @param backingList the immutable list to use\n*/",
        "com.google.common.collect.ImmutableSortedAsList:delegateCollection()": "/**\n* Returns the immutable sorted set delegate.\n* @return ImmutableSortedSet of type E\n*/",
        "com.google.common.collect.ImmutableSortedAsList:comparator()": "/**\n* Returns the comparator for sorting elements.\n* @return Comparator for elements of type E\n*/",
        "com.google.common.collect.ImmutableSortedAsList:indexOf(java.lang.Object)": "/**\n* Returns the index of the target in the sorted set or -1 if not found.\n* @param target object to find in the set\n* @return index of the target or -1 if absent\n*/",
        "com.google.common.collect.ImmutableSortedAsList:subListUnchecked(int,int)": "/**\n* Returns a sublist of elements as an ImmutableSortedAsList.\n* @param fromIndex starting index of the sublist\n* @param toIndex ending index of the sublist\n* @return ImmutableList of sorted elements in the specified range\n*/",
        "com.google.common.collect.ImmutableSortedAsList:spliterator()": "/**\n* Creates a Spliterator for the collection with indexed characteristics.\n* @return Spliterator for the elements in the collection\n*/",
        "com.google.common.collect.ImmutableSortedAsList:lastIndexOf(java.lang.Object)": "/**\n* Returns the last index of the target in the sorted set.\n* @param target object to find in the set\n* @return last index of the target or -1 if absent\n*/",
        "com.google.common.collect.ImmutableSortedAsList:contains(java.lang.Object)": "/**\n* Checks if the target object is present in the set.\n* @param target object to find\n* @return true if present, false otherwise\n*/"
    },
    "com.google.common.collect.Lists$RandomAccessPartition": {
        "com.google.common.collect.Lists$RandomAccessPartition:<init>(java.util.List,int)": "/**\n* Constructs a RandomAccessPartition with a specified list and partition size.\n* @param list the list to be partitioned\n* @param size the size of each partition\n*/"
    },
    "com.google.common.collect.ForwardingConcurrentMap": {
        "com.google.common.collect.ForwardingConcurrentMap:delegate()": "/**\n* Returns the delegate ConcurrentMap instance.\n* @return the delegate ConcurrentMap\n*/",
        "com.google.common.collect.ForwardingConcurrentMap:<init>()": "/**\n* Initializes a new instance of the ForwardingConcurrentMap class.\n*/",
        "com.google.common.collect.ForwardingConcurrentMap:putIfAbsent(java.lang.Object,java.lang.Object)": "/**\n* Adds key-value pair if absent; returns existing value or null.\n* @param key the key to add\n* @param value the value to associate with the key\n* @return existing value or null if absent\n*/",
        "com.google.common.collect.ForwardingConcurrentMap:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes the specified key-value pair from the map.\n* @param key the key to remove\n* @param value the value to remove\n* @return true if the pair was removed, false otherwise\n*/",
        "com.google.common.collect.ForwardingConcurrentMap:replace(java.lang.Object,java.lang.Object)": "/**\n* Replaces the value for a given key in the map.\n* @param key the key to replace the value for\n* @param value the new value to associate with the key\n* @return previous value associated with the key or null if absent\n*/",
        "com.google.common.collect.ForwardingConcurrentMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Replaces oldValue with newValue for the specified key.\n* @param key the key to replace value for\n* @param oldValue the current value to be replaced\n* @param newValue the new value to set\n* @return true if replaced, false otherwise\n*/"
    },
    "com.google.common.collect.Maps$SortedAsMapView": {
        "com.google.common.collect.Maps$SortedAsMapView:backingSet()": "/**\n* Returns the backing set as a SortedSet.\n* @return SortedSet containing elements of the backing data structure\n*/",
        "com.google.common.collect.Maps$SortedAsMapView:<init>(java.util.SortedSet,com.google.common.base.Function)": "/**** Constructs SortedAsMapView with a sorted set and a mapping function. \n* @param set non-null sorted set of keys \n* @param function non-null function to map keys to values */",
        "com.google.common.collect.Maps$SortedAsMapView:comparator()": "/**\n* Returns the comparator of the backing set.\n* @return Comparator for the backing set, or null if none exists\n*/",
        "com.google.common.collect.Maps$SortedAsMapView:keySet()": "/**\n* Retrieves the key set by processing the backing set.\n* @return Set of keys after applying removal logic\n*/",
        "com.google.common.collect.Maps$SortedAsMapView:firstKey()": "/**\n* Retrieves the first key from the backing set.\n* @return First key of type K or null if backing set is empty\n*/",
        "com.google.common.collect.Maps$SortedAsMapView:lastKey()": "/**\n* Returns the last key from the backing set.\n* @return last key of type K from the SortedSet\n*/",
        "com.google.common.collect.Maps$SortedAsMapView:subMap(java.lang.Object,java.lang.Object)": "/**\n* Returns a sorted map view of the specified key range.\n* @param fromKey starting key (inclusive)\n* @param toKey ending key (exclusive)\n* @return SortedMap of the specified range\n*/",
        "com.google.common.collect.Maps$SortedAsMapView:headMap(java.lang.Object)": "/**\n* Returns a sorted map of keys less than the specified key.\n* @param toKey the upper bound key (exclusive)\n* @return SortedMap of keys mapped from the backing set\n*/",
        "com.google.common.collect.Maps$SortedAsMapView:tailMap(java.lang.Object)": "/**\n* Returns a sorted map view of the tail of the backing set from the given key.\n* @param fromKey the key from which to start the tail map\n* @return SortedMap containing elements from fromKey to the end\n*/"
    },
    "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet": {
        "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:comparator()": "/**\n* Returns the comparator for the sorted map.\n* @return Comparator for the map or null if none exists\n*/",
        "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:last()": "/**\n* Returns the last key from the sorted map.\n* @return last key or throws NoSuchElementException if empty\n*/",
        "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:first()": "/**\n* Returns the first key from the map.\n* @return first key or throws NoSuchElementException if empty\n*/",
        "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:headSet(java.lang.Object)": "/**\n* Returns a view of the portion of the set before the specified element.\n* @param toElement the element before which the set view is returned\n* @return SortedSet containing elements before toElement\n*/",
        "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:subSet(java.lang.Object,java.lang.Object)": "/**\n* Returns a view of the portion of this set between fromElement and toElement.\n* @param fromElement starting element (inclusive)\n* @param toElement ending element (exclusive)\n* @return SortedSet of the specified range\n*/",
        "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:tailSet(java.lang.Object)": "/**\n* Returns a view of the portion of the set from the specified element.\n* @param fromElement the element to start the view from\n* @return SortedSet view starting from fromElement\n*/"
    },
    "com.google.common.collect.Maps$SortedKeySet": {
        "com.google.common.collect.Maps$SortedKeySet:map()": "/**\n* Returns a sorted map instance from the superclass.\n* @return SortedMap<K, V> from the superclass map method\n*/",
        "com.google.common.collect.Maps$SortedKeySet:<init>(java.util.SortedMap)": "/**\n* Initializes SortedKeySet with a sorted map.\n* @param map the sorted map to associate with this SortedKeySet\n*/",
        "com.google.common.collect.Maps$SortedKeySet:comparator()": "/**\n* Retrieves the comparator for the map.\n* @return Comparator for the map or null if not defined\n*/",
        "com.google.common.collect.Maps$SortedKeySet:first()": "/**\n* Retrieves the first key from the sorted map.\n* @return first key of the map or null if empty\n*/",
        "com.google.common.collect.Maps$SortedKeySet:last()": "/**\n* Retrieves the last key from the sorted map.\n* @return last key of the sorted map\n*/",
        "com.google.common.collect.Maps$SortedKeySet:subSet(java.lang.Object,java.lang.Object)": "/**\n* Returns a subset of the sorted set between specified elements.\n* @param fromElement the starting element (inclusive)\n* @param toElement the ending element (exclusive)\n* @return SortedSet containing elements in the specified range\n*/",
        "com.google.common.collect.Maps$SortedKeySet:headSet(java.lang.Object)": "/**** Returns a view of the portion of the set before the specified element. \n* @param toElement the element before which the set is to be viewed \n* @return SortedSet of elements before toElement \n*/",
        "com.google.common.collect.Maps$SortedKeySet:tailSet(java.lang.Object)": "/**\n* Returns a view of the portion of this set whose elements are greater than or equal to fromElement.\n* @param fromElement the starting element for the tail set\n* @return a SortedSet view of the tail portion\n*/"
    },
    "com.google.common.collect.Maps$SortedMapDifferenceImpl": {
        "com.google.common.collect.Maps$SortedMapDifferenceImpl:<init>(java.util.SortedMap,java.util.SortedMap,java.util.SortedMap,java.util.SortedMap)": "/**\n* Initializes SortedMapDifferenceImpl with specified map differences.\n* @param onlyOnLeft unique entries in left map\n* @param onlyOnRight unique entries in right map\n* @param onBoth entries present in both maps\n* @param differences differing entries in both maps\n*/",
        "com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesOnlyOnLeft()": "/**\n* Retrieves entries that exist only on the left as a sorted map.\n* @return SortedMap of left-only entries\n*/",
        "com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesOnlyOnRight()": "/**\n* Retrieves a sorted map of entries unique to the right side.\n* @return SortedMap of entries only present on the right\n*/",
        "com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesInCommon()": "/**\n* Retrieves common entries from the parent class.\n* @return SortedMap of common key-value pairs\n*/",
        "com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesDiffering()": "/**\n* Returns differing entries from the superclass as a sorted map.\n* @return SortedMap of key-value differences between entries\n*/"
    },
    "com.google.common.collect.Maps$TransformedEntriesNavigableMap": {
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:fromMap()": "/**\n* Returns a navigable map from the superclass implementation.\n* @return NavigableMap of key-value pairs\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:transformEntry(java.util.Map$Entry)": "/**\n* Transforms an entry if not null using a specified transformer.\n* @param entry the entry to transform, or null\n* @return transformed entry or null if input was null\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:ceilingKey(java.lang.Object)": "/**\n* Retrieves the least key greater than or equal to the specified key.\n* @param key the key to compare\n* @return the ceiling key or null if no such key exists\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:descendingKeySet()": "/**\n* Returns a navigable set of keys in descending order.\n* @return NavigableSet of keys from the map\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:floorKey(java.lang.Object)": "/**\n* Retrieves the greatest key less than or equal to the specified key.\n* @param key the key to compare\n* @return the floor key or null if not found\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:higherKey(java.lang.Object)": "/**\n* Retrieves the least key greater than the specified key.\n* @param key the key to compare\n* @return the higher key or null if none exists\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:lowerKey(java.lang.Object)": "/**\n* Retrieves the lowest key less than the specified key.\n* @param key the key to compare against\n* @return the lower key or null if none exists\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:navigableKeySet()": "/**\n* Retrieves a navigable set of keys from the map.\n* @return NavigableSet of keys from the map\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:<init>(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)": "/**\n* Constructs TransformedEntriesNavigableMap using a source map and a transformer.\n* @param fromMap source navigable map to transform entries from\n* @param transformer function to transform entries\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:ceilingEntry(java.lang.Object)": "/**\n* Retrieves the ceiling entry for a given key from the map.\n* @param key the key to find the ceiling entry for\n* @return ceiling entry or null if not found\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:firstEntry()": "/**\n* Retrieves the first entry from the map, transformed if not null.\n* @return transformed first entry or null if map is empty\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:floorEntry(java.lang.Object)": "/**\n* Retrieves the floor entry for a given key in a navigable map.\n* @param key the key to find the floor entry for\n* @return transformed floor entry or null if not found\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:higherEntry(java.lang.Object)": "/**\n* Retrieves the entry with the next higher key.\n* @param key the key to compare against\n* @return transformed higher entry or null if none exists\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:lastEntry()": "/**\n* Retrieves the last entry from the map, transformed if not null.\n* @return transformed last entry or null if map is empty\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:lowerEntry(java.lang.Object)": "/**\n* Retrieves the lower entry for a given key.\n* @param key the key to find the lower entry for\n* @return transformed lower entry or null if not found\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:pollFirstEntry()": "/**\n* Retrieves and transforms the first entry from the map.\n* @return transformed Entry or null if map is empty\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:pollLastEntry()": "/**\n* Retrieves and transforms the last entry from the map.\n* @return transformed last entry or null if map is empty\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:descendingMap()": "/**\n* Returns a descending view of the transformed entries from the source map.\n* @return NavigableMap with transformed entries in descending order\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:headMap(java.lang.Object,boolean)": "/**\n* Returns a head map of entries up to a specified key.\n* @param toKey the key up to which entries are included\n* @param inclusive true to include the key itself\n* @return NavigableMap of entries up to toKey\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Retrieves a sub-map based on specified keys and inclusivity.\n* @param fromKey starting key for the sub-map\n* @param fromInclusive true if fromKey is inclusive\n* @param toKey ending key for the sub-map\n* @param toInclusive true if toKey is inclusive\n* @return NavigableMap of the specified range\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:tailMap(java.lang.Object,boolean)": "/**\n* Returns a tail map starting from a specified key.\n* @param fromKey key to start the tail map from\n* @param inclusive true to include the fromKey in the tail map\n* @return NavigableMap of entries from the specified key onwards\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:headMap(java.lang.Object)": "/**\n* Retrieves a head map of entries up to a specified key, excluding the key itself.\n* @param toKey the key up to which entries are included\n* @return NavigableMap of entries up to toKey\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:subMap(java.lang.Object,java.lang.Object)": "/**\n* Retrieves a sub-map from fromKey to toKey (exclusive).\n* @param fromKey starting key for the sub-map\n* @param toKey ending key for the sub-map\n* @return NavigableMap of the specified range\n*/",
        "com.google.common.collect.Maps$TransformedEntriesNavigableMap:tailMap(java.lang.Object)": "/**\n* Returns a tail map starting from the specified key.\n* @param fromKey key to start the tail map from\n* @return NavigableMap of entries from the specified key onwards\n*/"
    },
    "com.google.common.collect.MutableClassToInstanceMap$2": {
        "com.google.common.collect.MutableClassToInstanceMap$2:delegate()": "/**\n* Returns the delegate map of class types to instances of type B.\n* @return Map of class types to instances of type B\n*/"
    },
    "com.google.common.collect.Range$RangeLexOrdering": {
        "com.google.common.collect.Range$RangeLexOrdering:compare(com.google.common.collect.Range,com.google.common.collect.Range)": "/**\n* Compares two Range objects based on their bounds.\n* @param left  the first Range to compare\n* @param right the second Range to compare\n* @return comparison result as an integer\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedAsMap": {
        "com.google.common.collect.Synchronized$SynchronizedAsMap:values()": "/**\n* Retrieves synchronized collection of map values.\n* @return Collection of synchronized values from the map\n*/",
        "com.google.common.collect.Synchronized$SynchronizedAsMap:containsValue(java.lang.Object)": "/**\n* Checks if the map contains the specified value.\n* @param o the value to check for presence in the map\n* @return true if the value is found, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedAsMap:entrySet()": "/**\n* Returns a synchronized set of map entries.\n* @return Set of map entries, synchronized on the mutex\n*/",
        "com.google.common.collect.Synchronized$SynchronizedAsMap:<init>(java.util.Map,java.lang.Object)": "/**\n* Initializes SynchronizedAsMap with a delegate map and optional mutex for synchronization.\n* @param delegate non-null map to delegate operations\n* @param mutex optional mutex for thread safety\n*/",
        "com.google.common.collect.Synchronized$SynchronizedAsMap:get(java.lang.Object)": "/**\n* Retrieves a type-preserving collection by key.\n* @param key the key for which the collection is retrieved\n* @return Collection of values or null if not found\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedSortedSet": {
        "com.google.common.collect.Synchronized$SynchronizedSortedSet:<init>(java.util.SortedSet,java.lang.Object)": "/**\n* Constructs a SynchronizedSortedSet with a delegate and optional mutex for synchronization.\n* @param delegate the sorted set to synchronize\n* @param mutex optional object for synchronization control\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedSet:delegate()": "/**\n* Returns a sorted set view of the superclass's delegate collection.\n* @return SortedSet of type E from the superclass delegate\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedSet:comparator()": "/**\n* Retrieves the comparator for the delegate collection.\n* @return Comparator for type E or null if not present\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedSet:subSet(java.lang.Object,java.lang.Object)": "/**\n* Returns a sorted subset of elements between specified bounds.\n* @param fromElement inclusive start of the subset\n* @param toElement exclusive end of the subset\n* @return SortedSet of elements within the specified range\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedSet:headSet(java.lang.Object)": "/**\n* Returns a view of the sorted set up to the specified element.\n* @param toElement the upper bound element\n* @return SortedSet view of elements less than toElement\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedSet:tailSet(java.lang.Object)": "/**\n* Returns a view of the portion of this set whose elements are greater than or equal to fromElement.\n* @param fromElement the starting element of the tail set\n* @return a sorted set view of the tail portion\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedSet:first()": "/**\n* Retrieves the first element from the sorted delegate collection.\n* @return first element of type E or throws NoSuchElementException if empty\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedSet:last()": "/**\n* Returns the last element from the sorted set delegate.\n* @return last element of type E or throws NoSuchElementException if empty\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedCollection": {
        "com.google.common.collect.Synchronized$SynchronizedCollection:delegate()": "/**\n* Returns a collection delegate of the current instance.\n* @return Collection of type E from the superclass delegate\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:<init>(java.util.Collection,java.lang.Object)": "/**\n* Constructs a SynchronizedCollection with a delegate and optional mutex.\n* @param delegate collection to delegate calls to\n* @param mutex optional mutex for synchronization\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:add(java.lang.Object)": "/**\n* Adds an element to the collection.\n* @param e element to be added\n* @return true if the element was added, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:addAll(java.util.Collection)": "/**\n* Adds all elements from the specified collection to this instance.\n* @param c collection of elements to be added\n* @return true if this instance changed as a result of the call\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:clear()": "/**\n* Clears the collection delegate in a synchronized manner.\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:contains(java.lang.Object)": "/**\n* Checks if the collection contains the specified object.\n* @param o object to check for presence in the collection\n* @return true if the object is found, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:containsAll(java.util.Collection)": "/**\n* Checks if the collection contains all elements of the specified collection.\n* @param c collection of elements to check\n* @return true if all elements are present, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if the collection has no elements, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:iterator()": "/**\n* Returns an iterator over the elements in the collection.\n* @return Iterator of type E from the delegate collection\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:spliterator()": "/**\n* Returns a Spliterator of elements, synchronized on mutex.\n* @return Spliterator for elements of type E\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:stream()": "/**\n* Returns a stream of elements from the delegate collection.\n* @return Stream of type E from the delegate collection\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:parallelStream()": "/**\n* Returns a parallel stream of elements from the delegate collection.\n* @return Stream of type E from the delegate collection\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:forEach(java.util.function.Consumer)": "/**\n* Applies the given action to each element in the collection.\n* @param action a Consumer to process each element\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:remove(java.lang.Object)": "/**\n* Removes the specified element from the collection.\n* @param o the element to be removed\n* @return true if the element was removed, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:removeAll(java.util.Collection)": "/**\n* Removes all elements in the specified collection from this instance.\n* @param c collection of elements to be removed\n* @return true if this instance changed as a result of the call\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:retainAll(java.util.Collection)": "/**\n* Retains only elements in this collection that are also in the specified collection.\n* @param c collection of elements to retain\n* @return true if this collection changed as a result of the call\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:removeIf(java.util.function.Predicate)": "/**\n* Removes elements matching the filter predicate.\n* @param filter condition to evaluate elements\n* @return true if any element was removed, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:size()": "/**\n* Returns the size of the collection in a thread-safe manner.\n* @return number of elements in the collection\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:toArray()": "/**\n* Converts the collection to an array.\n* @return Array of objects from the delegate collection\n*/",
        "com.google.common.collect.Synchronized$SynchronizedCollection:toArray(java.lang.Object[])": "/**\n* Converts the collection to an array of the specified type.\n* @param a the array into which the elements are to be stored\n* @return an array containing the elements of the collection\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedEntry": {
        "com.google.common.collect.Synchronized$SynchronizedEntry:delegate()": "/**\n* Returns the delegate map entry.\n* @return Map.Entry instance of type K and V\n*/",
        "com.google.common.collect.Synchronized$SynchronizedEntry:<init>(java.util.Map$Entry,java.lang.Object)": "/**\n* Constructs a SynchronizedEntry with a delegate and optional mutex for synchronization.\n* @param delegate non-null entry to delegate calls\n* @param mutex optional mutex for thread safety\n*/",
        "com.google.common.collect.Synchronized$SynchronizedEntry:equals(java.lang.Object)": "/**\n* Compares this object to another for equality.\n* @param obj the object to compare\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedEntry:hashCode()": "/**\n* Computes the hash code in a synchronized manner.\n* @return hash code integer based on delegate's hash code\n*/",
        "com.google.common.collect.Synchronized$SynchronizedEntry:getKey()": "/**\n* Retrieves the key from the delegate map entry.\n* @return key of type K from the delegate\n*/",
        "com.google.common.collect.Synchronized$SynchronizedEntry:getValue()": "/**\n* Retrieves the value in a synchronized manner.\n* @return Value of type V from the delegate map entry\n*/",
        "com.google.common.collect.Synchronized$SynchronizedEntry:setValue(java.lang.Object)": "/**\n* Sets the value in a synchronized manner.\n* @param value the new value to set\n* @return previous value before setting the new one\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedMap": {
        "com.google.common.collect.Synchronized$SynchronizedMap:delegate()": "/**\n* Returns a map delegate instance cast to specific key-value types.\n* @return Map<K, V> delegate object\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:<init>(java.util.Map,java.lang.Object)": "/**\n* Constructs a SynchronizedMap with a delegate and optional mutex for synchronization.\n* @param delegate non-null map to delegate operations\n* @param mutex optional mutex for thread safety\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:clear()": "/**\n* Clears the delegate's contents in a synchronized manner.\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:containsKey(java.lang.Object)": "/**\n* Checks if the map contains the specified key.\n* @param key the key to check for presence\n* @return true if the key exists, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:containsValue(java.lang.Object)": "/**\n* Checks if the collection contains the specified value.\n* @param value the value to check for presence\n* @return true if the value is found, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:entrySet()": "/**\n* Retrieves a synchronized set of map entries.\n* @return Set of map entries, synchronized with the mutex\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:forEach(java.util.function.BiConsumer)": "/**\n* Applies the given action to each entry in the map.\n* @param action a BiConsumer to process each key-value pair\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:get(java.lang.Object)": "/**\n* Retrieves value by key in a synchronized manner.\n* @param key the key for which the value is to be retrieved\n* @return value associated with the key or null if not found\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:getOrDefault(java.lang.Object,java.lang.Object)": "/**\n* Retrieves value by key or returns default if not found.\n* @param key the key to search for\n* @param defaultValue value to return if key is not present\n* @return value associated with key or defaultValue if absent\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if empty, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:keySet()": "/**\n* Retrieves a synchronized set of keys from the delegate.\n* @return Set of keys, synchronized for thread safety\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:put(java.lang.Object,java.lang.Object)": "/**\n* Inserts a key-value pair into the map.\n* @param key the key to insert\n* @param value the value associated with the key\n* @return previous value associated with key or null\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:putIfAbsent(java.lang.Object,java.lang.Object)": "/**\n* Puts value if absent for the given key, synchronized on mutex.\n* @param key the key to check and insert\n* @param value the value to insert if key is absent\n* @return previous value or null if absent\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Replaces oldValue with newValue for the specified key.\n* @param key the key to update\n* @param oldValue the current value to replace\n* @param newValue the new value to set\n* @return true if the replacement was successful, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:replace(java.lang.Object,java.lang.Object)": "/**\n* Replaces the value for a specified key in a synchronized manner.\n* @param key the key to be replaced\n* @param value the new value for the key\n* @return previous value associated with the key or null if absent\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:computeIfAbsent(java.lang.Object,java.util.function.Function)": "/**\n* Computes value if absent; synchronizes access to the delegate.\n* @param key the key to check for absence\n* @param mappingFunction function to compute value if absent\n* @return computed or existing value\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:computeIfPresent(java.lang.Object,java.util.function.BiFunction)": "/**\n* Computes new value if present for the given key using a remapping function.\n* @param key the key to check for presence\n* @param remappingFunction function to compute new value\n* @return updated value or null if key not present\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:compute(java.lang.Object,java.util.function.BiFunction)": "/**\n* Computes a value for the given key using a remapping function.\n* @param key the key to compute the value for\n* @param remappingFunction function to compute the value\n* @return computed value or null if absent\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)": "/**\n* Merges value into map for given key using a remapping function.\n* @param key the key to merge\n* @param value the value to merge\n* @param remappingFunction function to compute new value\n* @return merged value or null if absent\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:putAll(java.util.Map)": "/**\n* Inserts all mappings from the specified map into this map.\n* @param map mappings to be added\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:replaceAll(java.util.function.BiFunction)": "/**\n* Replaces all mappings in the map using the provided function.\n* @param function a BiFunction to update values based on keys\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:remove(java.lang.Object)": "/**\n* Removes the value associated with the specified key.\n* @param key the key whose mapping is to be removed\n* @return the previous value associated with key, or null if not found\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes the specified key-value pair from the collection.\n* @param key the key to remove\n* @param value the value to remove\n* @return true if the pair was removed, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:size()": "/**\n* Returns the number of elements in the collection.\n* @return size of the collection as an integer\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:values()": "/**\n* Returns a collection of values, synchronized for thread safety.\n* @return Collection of values from the delegate\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:equals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param o object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMap:hashCode()": "/**\n* Computes the hash code in a synchronized manner.\n* @return hash code of the delegate map\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedMultimap": {
        "com.google.common.collect.Synchronized$SynchronizedMultimap:delegate()": "/**\n* Returns the Multimap delegate instance.\n* @return Multimap<K, V> delegate object\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:<init>(com.google.common.collect.Multimap,java.lang.Object)": "/**\n* Constructs SynchronizedMultimap with a delegate and optional mutex for synchronization.\n* @param delegate non-null Multimap to delegate calls\n* @param mutex optional mutex for thread safety\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:size()": "/**\n* Returns the number of elements in the collection.\n* @return the size of the collection as an integer\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if empty, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:containsKey(java.lang.Object)": "/**\n* Checks if the map contains the specified key.\n* @param key the key to check for presence\n* @return true if key exists, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:containsValue(java.lang.Object)": "/**\n* Checks if the collection contains the specified value.\n* @param value the value to check for presence\n* @return true if the value is found, otherwise false\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:containsEntry(java.lang.Object,java.lang.Object)": "/**\n* Checks if the delegate contains the specified key-value entry.\n* @param key the key to check\n* @param value the value to check\n* @return true if entry exists, otherwise false\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:get(java.lang.Object)": "/**\n* Retrieves a collection of values by key.\n* @param key the key to look up values\n* @return Collection of values associated with the key\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:put(java.lang.Object,java.lang.Object)": "/**\n* Adds a key-value pair to the collection.\n* @param key the key to be added\n* @param value the value associated with the key\n* @return true if the pair was added, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:putAll(java.lang.Object,java.lang.Iterable)": "/**\n* Adds all values associated with the specified key.\n* @param key the key to associate values with\n* @param values iterable collection of values to add\n* @return true if successful, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:putAll(com.google.common.collect.Multimap)": "/**\n* Adds all entries from the specified multimap.\n* @param multimap source multimap to add entries from\n* @return true if successful, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a given key in a thread-safe manner.\n* @param key the key for which values are replaced\n* @param values new values to associate with the key\n* @return collection of previous values associated with the key\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes a key-value pair from the collection.\n* @param key the key to remove\n* @param value the value to remove\n* @return true if removed, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:removeAll(java.lang.Object)": "/**\n* Removes all values associated with the specified key.\n* @param key the key whose associated values are to be removed\n* @return Collection of removed values\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:clear()": "/**\n* Clears the contents of the Multimap delegate.\n* Synchronizes access to ensure thread safety.\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:keySet()": "/**\n* Returns a set of keys, initializing if necessary.\n* @return Set of keys from the delegate Multimap\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:values()": "/**\n* Retrieves a synchronized collection of values from the delegate.\n* @return Collection of values from the delegate\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:entries()": "/**\n* Retrieves a synchronized collection of map entries.\n* @return Collection of map entries, initialized on first call\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:forEach(java.util.function.BiConsumer)": "/**\n* Executes action on each key-value pair in a synchronized manner.\n* @param action a BiConsumer to process each key-value pair\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:equals(java.lang.Object)": "/**\n* Checks equality with another object using the delegate's equals method.\n* @param o object to compare with\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:hashCode()": "/**\n* Computes the hash code of the object.\n* @return hash code integer based on the delegate's hash code\n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:keys()": "/**** Retrieves a synchronized multiset of keys. \n* @return Multiset<K> of keys from the delegate instance \n*/",
        "com.google.common.collect.Synchronized$SynchronizedMultimap:asMap()": "/**\n* Returns a synchronized view of the delegate map as a Map<K, Collection<V>>.\n* @return synchronized map of collections from the delegate\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedTable": {
        "com.google.common.collect.Synchronized$SynchronizedTable:delegate()": "/**\n* Returns the delegate Table instance cast to specific types.\n* @return cast delegate Table<R, C, V>\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:<init>(com.google.common.collect.Table,java.lang.Object)": "/**\n* Constructs a SynchronizedTable with a delegate and optional mutex for synchronization.\n* @param delegate non-null Table to delegate calls\n* @param mutex optional mutex for thread safety\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:contains(java.lang.Object,java.lang.Object)": "/**\n* Checks if the table contains the specified row and column keys.\n* @param rowKey the key for the row, can be null\n* @param columnKey the key for the column, can be null\n* @return true if the keys exist, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:containsRow(java.lang.Object)": "/**\n* Checks if a row exists for the given key.\n* @param rowKey the key of the row to check\n* @return true if the row exists, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:containsColumn(java.lang.Object)": "/**\n* Checks if a column exists by its key.\n* @param columnKey the key of the column to check\n* @return true if the column exists, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:containsValue(java.lang.Object)": "/**\n* Checks if the collection contains the specified value.\n* @param value the value to search for\n* @return true if value is present, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:get(java.lang.Object,java.lang.Object)": "/**\n* Retrieves value for specified row and column keys.\n* @param rowKey the key for the row; may be null\n* @param columnKey the key for the column; may be null\n* @return value associated with keys or null if not found\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:isEmpty()": "/**\n* Checks if the collection is empty.\n* @return true if empty, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:size()": "/**\n* Returns the size of the collection in a thread-safe manner.\n* @return the number of elements in the collection\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:clear()": "/**\n* Clears the delegate Table instance in a synchronized block.\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:put(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Puts a value in the table at specified row and column keys.\n* @param rowKey the key for the row\n* @param columnKey the key for the column\n* @param value the value to be stored\n* @return previous value or null if none existed\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:putAll(com.google.common.collect.Table)": "/**\n* Inserts all entries from the provided table into the current table.\n* @param table source table with entries to insert\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:remove(java.lang.Object,java.lang.Object)": "/**\n* Removes the value at specified row and column keys.\n* @param rowKey the key for the row\n* @param columnKey the key for the column\n* @return the removed value or null if not found\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:cellSet()": "/**\n* Returns a synchronized set of cells from the delegate.\n* @return synchronized Set of Cell objects\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:rowKeySet()": "/**\n* Retrieves a synchronized set of row keys.\n* @return a synchronized Set of row keys from the delegate\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:columnKeySet()": "/**\n* Retrieves a synchronized set of column keys.\n* @return a synchronized Set of column keys\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:values()": "/**\n* Retrieves a collection of values in a thread-safe manner.\n* @return Collection of values from the delegate Table\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:hashCode()": "/**\n* Computes the hash code of the object.\n* @return hash code as an integer\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:equals(java.lang.Object)": "/**\n* Compares this object with another for equality.\n* @param obj object to compare with this instance\n* @return true if equal, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:row(java.lang.Object)": "/**\n* Retrieves a synchronized row from the delegate table.\n* @param rowKey key for the desired row\n* @return synchronized map of the row's data\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:column(java.lang.Object)": "/**\n* Retrieves a synchronized column from the delegate table.\n* @param columnKey key for the desired column\n* @return synchronized Map of column values\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:rowMap()": "/**\n* Retrieves a synchronized row map with transformed values.\n* @return Map of row keys to synchronized column maps\n*/",
        "com.google.common.collect.Synchronized$SynchronizedTable:columnMap()": "/**\n* Returns a synchronized column map of the table.\n* @return nested map of columns and their associated values\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedDeque": {
        "com.google.common.collect.Synchronized$SynchronizedDeque:<init>(java.util.Deque,java.lang.Object)": "/**\n* Constructs a SynchronizedDeque with a delegate and optional mutex for synchronization.\n* @param delegate the underlying deque to synchronize\n* @param mutex optional mutex object for thread safety\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:delegate()": "/**\n* Returns a deque delegate from the superclass.\n* @return Deque of type E from the superclass delegate\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:addFirst(java.lang.Object)": "/**\n* Adds an element to the front of the deque.\n* @param e element to be added\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:addLast(java.lang.Object)": "/**\n* Adds an element to the end of the deque.\n* @param e the element to be added\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:offerFirst(java.lang.Object)": "/**\n* Inserts an element at the front of the deque.\n* @param e element to be added\n* @return true if the element was added successfully\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:offerLast(java.lang.Object)": "/**\n* Adds an element to the end of the deque.\n* @param e element to be added\n* @return true if the element was added successfully\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:removeFirst()": "/**\n* Removes and returns the first element from the deque.\n* @return the first element of type E or throws NoSuchElementException if empty\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:removeLast()": "/**\n* Removes and returns the last element from the deque.\n* @return the last element of type E, or null if empty\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:pollFirst()": "/**\n* Retrieves and removes the first element from the deque.\n* @return the first element or null if the deque is empty\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:pollLast()": "/**\n* Retrieves and removes the last element from the deque.\n* @return last element of type E or null if empty\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:getFirst()": "/**\n* Retrieves the first element from the deque.\n* @return the first element of type E or throws NoSuchElementException if empty\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:getLast()": "/**\n* Retrieves the last element from the deque.\n* @return last element of type E from the deque\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:peekFirst()": "/**\n* Retrieves the first element without removing it.\n* @return the first element or null if empty\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:peekLast()": "/**\n* Returns the last element of the deque or null if empty.\n* @return last element of type E or null\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:removeFirstOccurrence(java.lang.Object)": "/**\n* Removes the first occurrence of an object from the collection.\n* @param o object to be removed\n* @return true if the object was found and removed, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:removeLastOccurrence(java.lang.Object)": "/**\n* Removes the last occurrence of the specified element.\n* @param o the element to be removed, may be null\n* @return true if the element was removed, false otherwise\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:push(java.lang.Object)": "/**\n* Pushes an element onto the stack in a thread-safe manner.\n* @param e element to be pushed onto the stack\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:pop()": "/**\n* Pops an element from the deque.\n* @return element of type E from the deque\n*/",
        "com.google.common.collect.Synchronized$SynchronizedDeque:descendingIterator()": "/**\n* Returns an iterator for traversing elements in descending order.\n* @return Iterator of type E for descending iteration\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedRandomAccessList": {
        "com.google.common.collect.Synchronized$SynchronizedRandomAccessList:<init>(java.util.List,java.lang.Object)": "/**** Constructs a synchronized random access list with optional mutex for thread safety. */"
    },
    "com.google.common.collect.Tables$UnmodifiableRowSortedMap": {
        "com.google.common.collect.Tables$UnmodifiableRowSortedMap:delegate()": "/**\n* Returns the RowSortedTable delegate instance.\n* @return RowSortedTable<R, C, V> delegate instance\n*/",
        "com.google.common.collect.Tables$UnmodifiableRowSortedMap:rowKeySet()": "/**\n* Returns an unmodifiable set of row keys from the delegate.\n* @return SortedSet of row keys\n*/",
        "com.google.common.collect.Tables$UnmodifiableRowSortedMap:<init>(com.google.common.collect.RowSortedTable)": "/**\n* Constructs an UnmodifiableRowSortedMap with a non-null delegate.\n* @param delegate the RowSortedTable to be wrapped, must not be null\n*/",
        "com.google.common.collect.Tables$UnmodifiableRowSortedMap:rowMap()": "/**\n* Returns an unmodifiable view of the row map.\n* @return SortedMap of rows mapped to unmodifiable column maps\n*/"
    },
    "com.google.common.eventbus.Dispatcher$ImmediateDispatcher": {
        "com.google.common.eventbus.Dispatcher$ImmediateDispatcher:dispatch(java.lang.Object,java.util.Iterator)": "/**\n* Dispatches an event to all subscribers.\n* @param event the event to be dispatched\n* @param subscribers iterator of Subscriber objects\n*/"
    },
    "com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher": {
        "com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher:dispatch(java.lang.Object,java.util.Iterator)": "/**\n* Dispatches an event to all subscribers.\n* @param event the event to dispatch\n* @param subscribers iterator of subscribers to receive the event\n*/"
    },
    "com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher": {
        "com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher:dispatch(java.lang.Object,java.util.Iterator)": "/**\n* Dispatches an event to subscribers if not already dispatching.\n* @param event the event to dispatch\n* @param subscribers iterator of subscribers to notify\n*/"
    },
    "com.google.common.eventbus.EventBus$LoggingHandler": {
        "com.google.common.eventbus.EventBus$LoggingHandler:logger(com.google.common.eventbus.SubscriberExceptionContext)": "/**\n* Retrieves a Logger instance for the specified EventBus context.\n* @param context SubscriberExceptionContext for identifying the EventBus\n* @return Logger associated with the EventBus\n*/",
        "com.google.common.eventbus.EventBus$LoggingHandler:message(com.google.common.eventbus.SubscriberExceptionContext)": "/**\n* Constructs an error message for subscriber exceptions.\n* @param context provides subscriber method and event details\n* @return formatted error message string\n*/",
        "com.google.common.eventbus.EventBus$LoggingHandler:handleException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext)": "/**\n* Logs severe exceptions with context details.\n* @param exception the exception to log\n* @param context provides context for the logging event\n*/"
    },
    "com.google.common.graph.EndpointPairIterator$Undirected": {
        "com.google.common.graph.EndpointPairIterator$Undirected:computeNext()": "/**\n* Computes the next endpoint pair of nodes, skipping visited ones.\n* @return EndpointPair or null if no more pairs exist\n*/",
        "com.google.common.graph.EndpointPairIterator$Undirected:<init>(com.google.common.graph.BaseGraph)": "/**\n* Initializes an Undirected graph with given base graph.\n* @param graph the base graph to initialize from\n*/"
    },
    "com.google.common.graph.Traverser$1": {
        "com.google.common.graph.Traverser$1:newTraversal()": "/**\n* Creates a new traversal for graph nodes.\n* @return Traversal object for iterating over nodes\n*/"
    },
    "com.google.common.hash.Hasher": {
        "com.google.common.hash.Hasher:putLong(long)": "/**\n* Inserts a long value into the hasher as bytes.\n* @param l the long value to be inserted\n* @return the current Hasher instance\n*/",
        "com.google.common.hash.Hasher:putChar(char)": "/**\n* Adds a character to the hasher and returns the Hasher instance.\n* @param c character to be added\n* @return this Hasher instance for method chaining\n*/",
        "com.google.common.hash.Hasher:putDouble(double)": "/**** Inserts a double value into the Hasher. \n* @param d the double value to be inserted \n* @return current Hasher instance \n*/",
        "com.google.common.hash.Hasher:putBytes(byte[],int,int)": "/**\n* Adds a byte array to the hasher from a specified offset and length.\n* @param bytes byte array to process, @param off starting index, @param len number of bytes\n* @return this Hasher instance for chaining\n*/",
        "com.google.common.hash.Hasher:putBytes(byte[])": "/***************\n* Processes a byte array for hashing.\n* @param bytes byte array to process\n* @return this Hasher instance for chaining\n****************/"
    },
    "com.google.common.hash.BloomFilter$SerialForm": {
        "com.google.common.hash.BloomFilter$SerialForm:<init>(com.google.common.hash.BloomFilter)": "/**\n* Constructs SerialForm from a BloomFilter, extracting its data and configuration.\n* @param bf the BloomFilter to convert\n*/",
        "com.google.common.hash.BloomFilter$SerialForm:readResolve()": "/**\n* Resolves the BloomFilter object during deserialization.\n* @return BloomFilter instance created from stored data\n*/"
    },
    "com.google.common.io.ByteSource$EmptyByteSource": {
        "com.google.common.io.ByteSource$EmptyByteSource:asCharSource(java.nio.charset.Charset)": "/**** Converts the given Charset to a CharSource instance. \n* @param charset the Charset to convert \n* @return CharSource representing no characters \n*/",
        "com.google.common.io.ByteSource$EmptyByteSource:<init>()": "/**\n* Constructs an EmptyByteSource with an empty byte array.\n*/"
    },
    "com.google.common.io.LineReader": {
        "com.google.common.io.LineReader:readLine()": "/**\n* Reads a line from the input, returning null on end-of-stream.\n* @return the read line or null if no more lines are available\n*/",
        "com.google.common.io.LineReader:<init>(java.lang.Readable)": "/**\n* Initializes LineReader with a non-null Readable source.\n* @param readable source to read from\n*/"
    },
    "com.google.common.math.ToDoubleRounder": {
        "com.google.common.math.ToDoubleRounder:roundToDouble(java.lang.Number,java.math.RoundingMode)": "/**\n* Rounds a value of type X to double based on specified RoundingMode.\n* @param x value to round\n* @param mode rounding strategy\n* @return rounded double value\n*/"
    },
    "com.google.common.primitives.Chars$LexicographicalComparator": {
        "com.google.common.primitives.Chars$LexicographicalComparator:compare(char[],char[])": "/**\n* Compares two character arrays lexicographically.\n* @param left first character array\n* @param right second character array\n* @return comparison result: negative, zero, or positive\n*/"
    },
    "com.google.common.primitives.Shorts$LexicographicalComparator": {
        "com.google.common.primitives.Shorts$LexicographicalComparator:compare(short[],short[])": "/**\n* Compares two short arrays lexicographically.\n* @param left first short array\n* @param right second short array\n* @return negative, zero, or positive comparison result\n*/"
    },
    "com.google.common.primitives.SignedBytes$LexicographicalComparator": {
        "com.google.common.primitives.SignedBytes$LexicographicalComparator:compare(byte[],byte[])": "/**\n* Compares two byte arrays lexicographically.\n* @param left first byte array\n* @param right second byte array\n* @return negative if left < right, zero if equal, positive if left > right\n*/"
    },
    "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder": {
        "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder:getBestComparator()": "/**\n* Returns the best comparator for byte arrays, falling back to lexicographical if needed.\n* @return Comparator<byte[]> for comparing byte arrays\n*/"
    },
    "com.google.common.reflect.Types$JavaVersion$1": {
        "com.google.common.reflect.Types$JavaVersion$1:newArrayType(java.lang.reflect.Type)": "/**\n* Creates a new array type based on the specified component type.\n* @param componentType the type of the array's components\n* @return a new Type representing the array type\n*/",
        "com.google.common.reflect.Types$JavaVersion$1:usedInGenericType(java.lang.reflect.Type)": "/**\n* Retrieves the type used in a generic context.\n* @param type the type to analyze\n* @return the Type used in the generic type context\n*/"
    },
    "com.google.common.util.concurrent.AbstractFuture$TrustedFuture": {
        "com.google.common.util.concurrent.AbstractFuture$TrustedFuture:isDone()": "/**\n* Checks if the task is complete.\n* @return true if done, false otherwise\n*/",
        "com.google.common.util.concurrent.AbstractFuture$TrustedFuture:isCancelled()": "/**\n* Checks if the current operation is cancelled.\n* @return true if cancelled, false otherwise\n*/",
        "com.google.common.util.concurrent.AbstractFuture$TrustedFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)": "/**\n* Adds a listener to be executed by the specified executor.\n* @param listener the task to execute when done\n* @param executor the executor for running the listener\n*/",
        "com.google.common.util.concurrent.AbstractFuture$TrustedFuture:get()": "/**\n* Retrieves a value, potentially blocking until available.\n* @return value of type V\n* @throws InterruptedException if interrupted while waiting\n* @throws ExecutionException if computation fails\n*/",
        "com.google.common.util.concurrent.AbstractFuture$TrustedFuture:cancel(boolean)": "/**\n* Cancels the future, forwarding the call to the superclass.\n* @param mayInterruptIfRunning indicates interruption preference\n* @return true if cancellation was successful, false otherwise\n*/",
        "com.google.common.util.concurrent.AbstractFuture$TrustedFuture:get(long,java.util.concurrent.TimeUnit)": "/**\n* Retrieves a value with a specified timeout.\n* @param timeout maximum wait time\n* @param unit time unit for the timeout\n* @return value of type V\n*/"
    },
    "com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier": {
        "com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier:get()": "/**\n* Combines service name and current state as a string.\n* @return concatenated service name and class state\n*/"
    },
    "com.google.common.util.concurrent.ListeningExecutorService": {
        "com.google.common.util.concurrent.ListeningExecutorService:submit(java.util.concurrent.Callable)": "/**\n* Submits a callable task for execution.\n* @param task the task to be executed\n* @return ListenableFuture representing the task's result\n*/",
        "com.google.common.util.concurrent.ListeningExecutorService:invokeAll(java.util.Collection,java.time.Duration)": "/**\n* Invokes all tasks with a timeout.\n* @param tasks collection of Callable tasks\n* @param timeout maximum duration to wait for tasks\n* @return list of Future results for the tasks\n*/",
        "com.google.common.util.concurrent.ListeningExecutorService:invokeAny(java.util.Collection,java.time.Duration)": "/**\n* Executes a collection of tasks with a timeout.\n* @param tasks collection of Callable tasks\n* @param timeout maximum duration to wait\n* @return result of the first completed task\n*/",
        "com.google.common.util.concurrent.ListeningExecutorService:awaitTermination(java.time.Duration)": "/**\n* Awaits termination with a specified timeout.\n* @param timeout duration to wait before timing out\n* @return true if terminated, false if timed out\n*/"
    },
    "com.google.common.util.concurrent.ServiceManager$ServiceListener": {
        "com.google.common.util.concurrent.ServiceManager$ServiceListener:<init>(com.google.common.util.concurrent.Service,java.lang.ref.WeakReference)": "/**** Constructs a ServiceListener with a service and a weak reference to ServiceManagerState. \n* @param service the service instance to be managed\n* @param state weak reference to the ServiceManagerState\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceListener:starting()": "/**\n* Initiates the starting process of a service if in a valid state.\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceListener:running()": "/**\n* Transitions the service to the RUNNING state if current state is not null.\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceListener:stopping(com.google.common.util.concurrent.Service$State)": "/**\n* Transitions service to STOPPING state if current state is valid.\n* @param from the current state of the service\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceListener:terminated(com.google.common.util.concurrent.Service$State)": "/**\n* Handles service termination and logs the previous state.\n* @param from previous state of the service\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceListener:failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable)": "/**\n* Handles service failure by logging and transitioning to the FAILED state.\n* @param from current service state\n* @param failure the Throwable that caused the failure\n*/"
    },
    "com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1": {
        "com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)": "/**\n* Schedules a runnable task for execution.\n* @param service the service to schedule the task for\n* @param executor the executor to run the task\n* @param runnable the task to be executed\n* @return a Cancellable object to manage task cancellation\n*/"
    },
    "com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2": {
        "com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)": "/**\n* Schedules a Runnable task for execution.\n* @param service the service to be scheduled\n* @param executor the executor for task execution\n* @param runnable the task to be executed\n* @return Cancellable object to manage task cancellation\n*/"
    },
    "com.google.common.util.concurrent.ListeningScheduledExecutorService": {
        "com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.util.concurrent.Callable,java.time.Duration)": "/**\n* Schedules a callable task with a specified delay.\n* @param callable the task to be scheduled\n* @param delay duration to wait before execution\n* @return ListenableScheduledFuture for the scheduled task\n*/",
        "com.google.common.util.concurrent.ListeningScheduledExecutorService:scheduleAtFixedRate(java.lang.Runnable,java.time.Duration,java.time.Duration)": "/**\n* Schedules a command to run at a fixed rate after an initial delay.\n* @param command the task to execute\n* @param initialDelay delay before first execution\n* @param period time between successive executions\n* @return a ListenableScheduledFuture for the scheduled task\n*/",
        "com.google.common.util.concurrent.ListeningScheduledExecutorService:scheduleWithFixedDelay(java.lang.Runnable,java.time.Duration,java.time.Duration)": "/**\n* Schedules a command with fixed delay after an initial delay.\n* @param command the task to execute\n* @param initialDelay delay before first execution\n* @param delay delay between subsequent executions\n* @return a ListenableScheduledFuture for the scheduled task\n*/",
        "com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)": "/**\n* Schedules a Runnable task for execution after a specified delay.\n* @param command the task to execute\n* @param delay the delay before execution\n* @param unit the time unit of the delay\n* @return a ListenableScheduledFuture representing the scheduled task\n*/",
        "com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.lang.Runnable,java.time.Duration)": "/**\n* Schedules a Runnable task after a specified delay.\n* @param command the task to execute\n* @param delay the delay before execution\n* @return ListenableScheduledFuture representing the scheduled task\n*/"
    },
    "com.google.common.util.concurrent.Service": {
        "com.google.common.util.concurrent.Service:awaitRunning(java.time.Duration)": "/**\n* Awaits a running state with a specified timeout.\n* @param timeout maximum duration to wait before timeout\n* @throws TimeoutException if the wait exceeds the timeout\n*/",
        "com.google.common.util.concurrent.Service:awaitTerminated(java.time.Duration)": "/**\n* Awaits termination with a specified timeout.\n* @param timeout maximum duration to wait before timing out\n* @throws TimeoutException if the wait exceeds the timeout\n*/"
    },
    "com.google.common.util.concurrent.TimeLimiter": {
        "com.google.common.util.concurrent.TimeLimiter:newProxy(java.lang.Object,java.lang.Class,java.time.Duration)": "/**\n* Creates a new proxy for the target with a specified timeout.\n* @param target the object to be proxied\n* @param interfaceType the interface type for the proxy\n* @param timeout the duration to wait before timing out\n* @return a proxy instance of type T\n*/",
        "com.google.common.util.concurrent.TimeLimiter:callWithTimeout(java.util.concurrent.Callable,java.time.Duration)": "/**\n* Executes a callable with a timeout.\n* @param callable the task to execute\n* @param timeout duration to wait before timing out\n* @return result of the callable\n*/",
        "com.google.common.util.concurrent.TimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,java.time.Duration)": "/**\n* Executes a Callable with a timeout, ignoring interruptions.\n* @param callable the task to execute\n* @param timeout maximum time to wait for execution\n* @return result of the Callable\n* @throws TimeoutException if the timeout is reached\n* @throws ExecutionException if the Callable fails\n*/",
        "com.google.common.util.concurrent.TimeLimiter:runWithTimeout(java.lang.Runnable,java.time.Duration)": "/**\n* Executes a Runnable with a specified timeout duration.\n* @param runnable the task to execute\n* @param timeout the maximum time to wait before timeout\n*/",
        "com.google.common.util.concurrent.TimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,java.time.Duration)": "/**\n* Executes a Runnable without interruption for a specified timeout.\n* @param runnable the task to execute\n* @param timeout the maximum duration to run the task\n* @throws TimeoutException if the task exceeds the timeout\n*/"
    },
    "com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace": {
        "com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)": "/**\n* Initializes stack trace with lock names and filters excluded classes.\n* @param node1 first lock node\n* @param node2 second lock node\n*/"
    },
    "com.google.common.util.concurrent.ExecutionSequencer": {
        "com.google.common.util.concurrent.ExecutionSequencer:<init>()": "/**\n* Private constructor for ExecutionSequencer to prevent instantiation.\n*/",
        "com.google.common.util.concurrent.ExecutionSequencer:create()": "/**\n* Creates a new instance of ExecutionSequencer.\n* @return a new ExecutionSequencer object\n*/",
        "com.google.common.util.concurrent.ExecutionSequencer:submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)": "/**\n* Submits an AsyncCallable for execution and returns a non-cancellable future.\n* @param callable task to execute asynchronously\n* @param executor executor for task execution\n* @return ListenableFuture representing the result of the callable\n*/",
        "com.google.common.util.concurrent.ExecutionSequencer:submit(java.util.concurrent.Callable,java.util.concurrent.Executor)": "/**\n* Submits a Callable for execution and returns its result as a ListenableFuture.\n* @param callable task to execute asynchronously\n* @param executor executor for task execution\n* @return ListenableFuture representing the result of the callable\n*/"
    },
    "com.google.common.collect.ForwardingDeque": {
        "com.google.common.collect.ForwardingDeque:delegate()": "/**\n* Returns the blocking deque for this implementation.\n* @return Deque instance used by this class\n*/",
        "com.google.common.collect.ForwardingDeque:addFirst(java.lang.Object)": "/**\n* Adds an element to the front of the deque.\n* @param e element to be added, can be null\n*/",
        "com.google.common.collect.ForwardingDeque:addLast(java.lang.Object)": "/**\n* Adds an element to the end of the deque.\n* @param e element to be added, can be null\n*/",
        "com.google.common.collect.ForwardingDeque:descendingIterator()": "/**\n* Returns an iterator over the elements in descending order.\n* @return Iterator for elements in reverse sequence\n*/",
        "com.google.common.collect.ForwardingDeque:getFirst()": "/**\n* Retrieves the first element from the blocking deque.\n* @return first element or null if deque is empty\n*/",
        "com.google.common.collect.ForwardingDeque:getLast()": "/**\n* Retrieves the last element from the blocking deque.\n* @return last element or null if deque is empty\n*/",
        "com.google.common.collect.ForwardingDeque:offerFirst(java.lang.Object)": "/**\n* Inserts an element at the front of the deque.\n* @param e element to be added; may be null if supported\n* @return true if the element was added successfully\n*/",
        "com.google.common.collect.ForwardingDeque:offerLast(java.lang.Object)": "/**\n* Adds an element to the end of the deque.\n* @param e element to add, may be null\n* @return true if added successfully, false otherwise\n*/",
        "com.google.common.collect.ForwardingDeque:peekFirst()": "/**\n* Retrieves the first element without removing it.\n* @return the first element or null if empty\n*/",
        "com.google.common.collect.ForwardingDeque:peekLast()": "/**\n* Retrieves the last element without removing it.\n* @return last element or null if deque is empty\n*/",
        "com.google.common.collect.ForwardingDeque:pollFirst()": "/**\n* Retrieves and removes the first element from the deque.\n* @return the first element or null if empty\n*/",
        "com.google.common.collect.ForwardingDeque:pollLast()": "/**\n* Retrieves and removes the last element from the deque.\n* @return last element or null if deque is empty\n*/",
        "com.google.common.collect.ForwardingDeque:pop()": "/**\n* Pops an element from the stack.\n* @return the popped element from the underlying deque\n*/",
        "com.google.common.collect.ForwardingDeque:push(java.lang.Object)": "/**\n* Pushes an element onto the stack.\n* @param e element to be pushed onto the stack\n*/",
        "com.google.common.collect.ForwardingDeque:removeFirst()": "/**\n* Removes and returns the first element from the deque.\n* @return the first element or null if the deque is empty\n*/",
        "com.google.common.collect.ForwardingDeque:removeLast()": "/**\n* Removes and returns the last element from the deque.\n* @return the last element or null if deque is empty\n*/",
        "com.google.common.collect.ForwardingDeque:removeFirstOccurrence(java.lang.Object)": "/**\n* Removes the first occurrence of the specified element.\n* @param o element to be removed, can be null\n* @return true if the element was removed, false otherwise\n*/",
        "com.google.common.collect.ForwardingDeque:removeLastOccurrence(java.lang.Object)": "/**\n* Removes the last occurrence of the specified element.\n* @param o element to be removed\n* @return true if the element was found and removed; false otherwise\n*/",
        "com.google.common.collect.ForwardingDeque:<init>()": "/**\n* Constructs a new instance of ForwardingDeque.\n*/"
    },
    "com.google.common.util.concurrent.ForwardingListenableFuture": {
        "com.google.common.util.concurrent.ForwardingListenableFuture:delegate()": "/**\n* Returns the delegate ListenableFuture instance.\n* @return ListenableFuture of type V\n*/",
        "com.google.common.util.concurrent.ForwardingListenableFuture:<init>()": "/**\n* Default constructor for ForwardingListenableFuture class.\n*/",
        "com.google.common.util.concurrent.ForwardingListenableFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)": "/**\n* Adds a listener with the specified executor.\n* @param listener the Runnable to execute\n* @param exec the Executor to run the listener\n*/"
    },
    "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder": {
        "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder:getBestValidator()": "/**** Retrieves the best validator, falling back to a weak set validator if necessary. */"
    },
    "com.google.common.util.concurrent.ListenerCallQueue": {
        "com.google.common.util.concurrent.ListenerCallQueue:enqueueHelper(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.Object)": "/**\n* Enqueues an event with a label to all listener queues.\n* @param event the event to enqueue\n* @param label associated label for the event\n*/",
        "com.google.common.util.concurrent.ListenerCallQueue:dispatch()": "/**\n* Dispatches events to all registered listeners in order.\n*/",
        "com.google.common.util.concurrent.ListenerCallQueue:enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event)": "/**\n* Enqueues an event with its label for processing.\n* @param event the event to enqueue\n*/",
        "com.google.common.util.concurrent.ListenerCallQueue:enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.String)": "/**\n* Enqueues an event with a specified label.\n* @param event the event to enqueue\n* @param label associated label for the event\n*/",
        "com.google.common.util.concurrent.ListenerCallQueue:addListener(java.lang.Object,java.util.concurrent.Executor)": "/**\n* Adds a listener with an executor to the listener queue.\n* @param listener the event listener, must not be null\n* @param executor the executor for running events, must not be null\n*/"
    },
    "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1": {
        "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:sleepMicrosUninterruptibly(long)": "/**\n* Sleeps for a specified duration in microseconds without interruptions.\n* @param micros duration to sleep in microseconds\n*/",
        "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:readMicros()": "/**\n* Reads and returns the time in microseconds.\n* @return elapsed time in microseconds\n*/",
        "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:<init>()": "/**\n* Initializes a new instance of SleepingStopwatch.\n*/"
    },
    "com.google.common.collect.ImmutableSortedMap$1EntrySet": {
        "com.google.common.collect.ImmutableSortedMap$1EntrySet:forEach(java.util.function.Consumer)": "/**\n* Applies a consumer to each element in the collection.\n* @param consumer function to apply to each element\n*/",
        "com.google.common.collect.ImmutableSortedMap$1EntrySet:iterator()": "/**\n* Returns an unmodifiable iterator for the collection elements.\n* @return UnmodifiableIterator for the collection\n*/",
        "com.google.common.collect.ImmutableSortedMap$1EntrySet:spliterator()": "/**\n* Creates a spliterator for indexed elements of the collection.\n* @return Spliterator for the collection's elements\n*/"
    },
    "com.google.common.collect.ImmutableListMultimap$Builder": {
        "com.google.common.collect.ImmutableListMultimap$Builder:orderKeysBy(java.util.Comparator)": "/**\n* Sets the key comparator for ordering keys.\n* @param keyComparator comparator for key ordering\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableListMultimap$Builder:orderValuesBy(java.util.Comparator)": "/**\n* Sets the value comparator for ordering and returns the Builder instance.\n* @param valueComparator comparator for values\n* @return Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableListMultimap$Builder:put(java.lang.Object,java.lang.Object)": "/**\n* Adds a key-value pair to the builder and returns the builder instance.\n* @param key the entry key\n* @param value the entry value\n* @return Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableListMultimap$Builder:<init>()": "/**\n* Constructs a new Builder instance.\n*/",
        "com.google.common.collect.ImmutableListMultimap$Builder:put(java.util.Map$Entry)": "/**\n* Adds an entry to the builder and returns the builder instance for chaining.\n* @param entry the entry containing key and value\n* @return Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableListMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)": "/**\n* Adds multiple values for a key and returns the Builder instance for chaining.\n* @param key the entry key\n* @param values the values to associate with the key\n* @return Builder instance\n*/",
        "com.google.common.collect.ImmutableListMultimap$Builder:putAll(java.lang.Iterable)": "/**\n* Adds multiple entries to the builder and returns the builder instance.\n* @param entries iterable of entries to add\n* @return Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableListMultimap$Builder:putAll(com.google.common.collect.Multimap)": "/**** Adds entries from a Multimap to the builder. \n* @param multimap source Multimap with entries to add \n* @return Builder instance for method chaining \n*/",
        "com.google.common.collect.ImmutableListMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder)": "/**\n* Combines entries from another Builder into this Builder.\n* @param other Builder to combine with\n* @return this Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableListMultimap$Builder:build()": "/**\n* Builds an ImmutableListMultimap from the current state.\n* @return ImmutableListMultimap instance\n*/"
    },
    "com.google.common.collect.ImmutableSetMultimap$Builder": {
        "com.google.common.collect.ImmutableSetMultimap$Builder:orderKeysBy(java.util.Comparator)": "/**\n* Sets the key comparator for ordering keys.\n* @param keyComparator comparator for key ordering\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableSetMultimap$Builder:orderValuesBy(java.util.Comparator)": "/**\n* Sets the value comparator for ordering and returns the Builder instance.\n* @param valueComparator comparator for values\n* @return Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableSetMultimap$Builder:put(java.lang.Object,java.lang.Object)": "/**\n* Adds a key-value pair to the builder and returns the builder instance.\n* @param key the entry key\n* @param value the entry value\n* @return Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableSetMultimap$Builder:<init>()": "/**\n* Constructs a new Builder instance.\n*/",
        "com.google.common.collect.ImmutableSetMultimap$Builder:put(java.util.Map$Entry)": "/**\n* Adds an entry to the builder and returns the builder instance for chaining.\n* @param entry the entry containing key and value\n* @return Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableSetMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)": "/**\n* Adds multiple values for a given key and returns the builder instance.\n* @param key the entry key\n* @param values the values to associate with the key\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableSetMultimap$Builder:putAll(java.lang.Iterable)": "/**** Adds multiple entries to the builder and returns the builder instance for chaining. \n* @param entries iterable of entries to add \n* @return Builder instance for chaining \n*/",
        "com.google.common.collect.ImmutableSetMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder)": "/**\n* Combines entries from another Builder into this Builder.\n* @param other Builder to combine with\n* @return this Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableSetMultimap$Builder:putAll(com.google.common.collect.Multimap)": "/**\n* Adds all entries from a Multimap to the builder.\n* @param multimap the source Multimap to copy entries from\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableSetMultimap$Builder:build()": "/**\n* Builds an ImmutableSetMultimap from the builderMap entries.\n* @return ImmutableSetMultimap or empty if builderMap is null\n*/"
    },
    "com.google.common.collect.ImmutableSortedMultiset$Builder": {
        "com.google.common.collect.ImmutableSortedMultiset$Builder:add(java.lang.Object)": "/******************************************************************************* \n* Adds an element to the builder and returns the builder instance for chaining. \n* @param element the element to add \n* @return Builder instance for method chaining \n*******************************************************************************/",
        "com.google.common.collect.ImmutableSortedMultiset$Builder:addCopies(java.lang.Object,int)": "/**\n* Adds specified copies of an element and returns the Builder instance.\n* @param element the element to add\n* @param occurrences number of copies to add\n* @return Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableSortedMultiset$Builder:setCount(java.lang.Object,int)": "/**\n* Sets the count for a specified element and returns the Builder instance.\n* @param element the element to set the count for\n* @param count the new count value\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableSortedMultiset$Builder:addAll(java.util.Iterator)": "/**\n* Adds all elements from the iterator to the builder.\n* @param elements iterator of elements to add\n* @return this Builder instance for chaining\n*/",
        "com.google.common.collect.ImmutableSortedMultiset$Builder:addAll(java.lang.Iterable)": "/************** \n* Adds elements from an iterable to the builder.\n* @param elements iterable of elements to add\n* @return this builder instance for chaining\n****************/",
        "com.google.common.collect.ImmutableSortedMultiset$Builder:<init>(java.util.Comparator)": "/**\n* Constructs a Builder with a specified comparator for element ordering.\n* @param comparator optional comparator for element ordering\n*/",
        "com.google.common.collect.ImmutableSortedMultiset$Builder:build()": "/**\n* Builds an ImmutableSortedMultiset from the current contents.\n* @return ImmutableSortedMultiset created from contents\n*/"
    },
    "com.google.common.collect.Lists$RandomAccessListWrapper": {
        "com.google.common.collect.Lists$RandomAccessListWrapper:<init>(java.util.List)": "/**\n* Constructs a RandomAccessListWrapper with a non-null backing list.\n* @param backingList the list to be wrapped\n*/"
    },
    "com.google.common.collect.Lists$RandomAccessReverseList": {
        "com.google.common.collect.Lists$RandomAccessReverseList:<init>(java.util.List)": "/**\n* Constructs RandomAccessReverseList from a given list to be reversed.\n* @param forwardList list to be reversed\n*/"
    },
    "com.google.common.collect.TreeTraverser$PostOrderIterator": {
        "com.google.common.collect.TreeTraverser$PostOrderIterator:expand(java.lang.Object)": "/**\n* Expands a node with value T and its children.\n* @param t the value to create a new PostOrderNode\n* @return a new PostOrderNode with the specified value and its children\n*/",
        "com.google.common.collect.TreeTraverser$PostOrderIterator:computeNext()": "/**\n* Computes the next element in a post-order traversal.\n* @return next element or endOfData() if traversal is complete\n*/"
    },
    "com.google.common.collect.ImmutableClassToInstanceMap$Builder": {
        "com.google.common.collect.ImmutableClassToInstanceMap$Builder:cast(java.lang.Class,java.lang.Object)": "/**** Casts an object to the specified type. \n* @param type the class type to cast to \n* @param value the object to be cast \n* @return the casted object of type T \n*/",
        "com.google.common.collect.ImmutableClassToInstanceMap$Builder:<init>()": "/**\n* Constructs a new Builder instance for key-value pairs.\n* @return Builder object for constructing key-value mappings\n*/",
        "com.google.common.collect.ImmutableClassToInstanceMap$Builder:put(java.lang.Class,java.lang.Object)": "/**\n* Adds a key-value pair to the builder.\n* @param key the class type of the entry; must not be null\n* @param value the entry value; must not be null\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableClassToInstanceMap$Builder:putAll(java.util.Map)": "/**\n* Adds all entries from a map to the builder.\n* @param map entries with class types as keys and values\n* @return Builder instance for method chaining\n*/",
        "com.google.common.collect.ImmutableClassToInstanceMap$Builder:build()": "/**\n* Builds an ImmutableClassToInstanceMap from a map or returns an empty instance if empty.\n* @return ImmutableClassToInstanceMap constructed from entries or empty instance\n*/"
    },
    "com.google.common.util.concurrent.AbstractIdleService$DelegateService": {
        "com.google.common.util.concurrent.AbstractIdleService$DelegateService:doStart()": "/**\n* Initializes the service and executes startup tasks with renamed threads.\n*/",
        "com.google.common.util.concurrent.AbstractIdleService$DelegateService:doStop()": "/**\n* Stops the executor, shutting down and notifying status.\n* @throws Throwable if shutdown fails, triggers failure notification\n*/",
        "com.google.common.util.concurrent.AbstractIdleService$DelegateService:toString()": "/**\n* Returns the string representation of the service's state.\n* @return formatted string of service name and current state\n*/"
    },
    "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$Task": {
        "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$Task:run()": "/**\n* Executes a scheduled task iteration, handling cancellations and exceptions.\n* @throws Throwable if an error occurs during task execution\n*/"
    },
    "com.google.common.base.CaseFormat$1": {
        "com.google.common.base.CaseFormat$1:normalizeWord(java.lang.String)": "/**\n* Normalizes the input word to a standard format.\n* @param word the string to normalize\n* @return normalized version of the input word\n*/",
        "com.google.common.base.CaseFormat$1:convert(com.google.common.base.CaseFormat,java.lang.String)": "/**\n* Converts a string to a specified case format with word separation.\n* @param format the case format to apply\n* @param s the input string to convert\n* @return the formatted string\n*/"
    },
    "com.google.common.base.CaseFormat$2": {
        "com.google.common.base.CaseFormat$2:normalizeWord(java.lang.String)": "/**\n* Normalizes the input word for consistent formatting.\n* @param word the string to be normalized\n* @return normalized string representation of the word\n*/",
        "com.google.common.base.CaseFormat$2:convert(com.google.common.base.CaseFormat,java.lang.String)": "/**\n* Converts a string to a specified case format with word boundaries.\n* @param format the case format to apply\n* @param s the input string to convert\n* @return the formatted string\n*/"
    },
    "com.google.common.base.CaseFormat$5": {
        "com.google.common.base.CaseFormat$5:normalizeWord(java.lang.String)": "/**\n* Normalizes the given word for consistent formatting.\n* @param word input string to normalize\n* @return normalized version of the word\n*/",
        "com.google.common.base.CaseFormat$5:convert(com.google.common.base.CaseFormat,java.lang.String)": "/**\n* Converts a string to a specified case format with word boundaries.\n* @param format the case format to apply\n* @param s the input string to convert\n* @return the formatted string\n*/"
    },
    "com.google.common.base.CharMatcher$Invisible": {
        "com.google.common.base.CharMatcher$Invisible:<init>()": "/**\n* Constructs an Invisible CharMatcher with predefined character ranges.\n*/"
    },
    "com.google.common.base.CharMatcher$SingleWidth": {
        "com.google.common.base.CharMatcher$SingleWidth:<init>()": "/**\n* Initializes SingleWidth matcher with specific character ranges for single-width characters.\n*/"
    },
    "com.google.common.cache.CacheBuilderSpec$DurationParser": {
        "com.google.common.cache.CacheBuilderSpec$DurationParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)": "/**\n* Parses a duration from a string and updates cache specifications.\n* @param spec cache specifications to update\n* @param key identifier for the duration value\n* @param value duration string ending with time unit\n*/"
    },
    "com.google.common.cache.CacheBuilderSpec$IntegerParser": {
        "com.google.common.cache.CacheBuilderSpec$IntegerParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)": "/**\n* Parses an integer from value; throws if value is null, empty, or not an integer.\n* @param spec cache specification, @param key identifier for value, @param value string to parse\n*/"
    },
    "com.google.common.cache.CacheBuilderSpec$LongParser": {
        "com.google.common.cache.CacheBuilderSpec$LongParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)": "/**\n* Parses a value into a long; throws exceptions for invalid input.\n* @param spec cache specification, @param key identifier, @param value string to parse\n*/"
    },
    "com.google.common.cache.LocalCache$EntryFactory$1": {
        "com.google.common.cache.LocalCache$EntryFactory$1:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Creates a new ReferenceEntry for the specified segment and key.\n* @param segment the segment to which the entry belongs\n* @param key the entry's key\n* @param hash the hash code of the key\n* @param next the next entry in the chain, or null if none\n* @return a new ReferenceEntry instance\n*/"
    },
    "com.google.common.cache.LocalCache$StrongAccessEntry": {
        "com.google.common.cache.LocalCache$StrongAccessEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Constructs a StrongAccessEntry with key, hash, and next reference.\n* @param key entry's key\n* @param hash hash code of the key\n* @param next next entry in the chain\n*/"
    },
    "com.google.common.cache.LocalCache$StrongAccessWriteEntry": {
        "com.google.common.cache.LocalCache$StrongAccessWriteEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Constructs a StrongAccessWriteEntry with key, hash, and next entry reference.\n* @param key the entry's key\n* @param hash the hash code of the key\n* @param next the next entry in the chain\n*/"
    },
    "com.google.common.cache.LocalCache$StrongWriteEntry": {
        "com.google.common.cache.LocalCache$StrongWriteEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Constructs a StrongWriteEntry with key, hash, and next entry reference.\n* @param key the entry's key\n* @param hash the hash code of the key\n* @param next the next entry in the chain\n*/"
    },
    "com.google.common.cache.LocalCache$EntryFactory$5": {
        "com.google.common.cache.LocalCache$EntryFactory$5:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Creates a new ReferenceEntry for a given segment and key.\n* @param segment the segment to which the entry belongs\n* @param key the key for the new entry\n* @param hash the hash code of the key\n* @param next optional next entry in the chain\n* @return a new ReferenceEntry instance\n*/"
    },
    "com.google.common.cache.LocalCache$WeakAccessEntry": {
        "com.google.common.cache.LocalCache$WeakAccessEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Constructs a WeakAccessEntry with specified parameters.\n* @param queue reference queue for garbage collection\n* @param key the weakly referenced key\n* @param hash hash code for the key\n* @param next optional next entry in the chain\n*/"
    },
    "com.google.common.cache.LocalCache$WeakAccessWriteEntry": {
        "com.google.common.cache.LocalCache$WeakAccessWriteEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Constructs a WeakAccessWriteEntry with key, hash, and optional next entry.\n* @param queue reference queue for garbage collection\n* @param key the weakly referenced key\n* @param hash hash code for the key\n* @param next optional next entry in the chain\n*/"
    },
    "com.google.common.cache.LocalCache$WeakWriteEntry": {
        "com.google.common.cache.LocalCache$WeakWriteEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)": "/**\n* Constructs a WeakWriteEntry with key, hash, and optional next entry.\n* @param queue reference queue for garbage collection\n* @param key the weakly referenced key\n* @param hash hash code for the key\n* @param next optional next entry in the chain\n*/"
    },
    "com.google.common.util.concurrent.Futures$CallbackListener": {
        "com.google.common.util.concurrent.Futures$CallbackListener:run()": "/**\n* Executes the task, handling success or failure from a Future.\n* @param future the Future to check for completion\n*/",
        "com.google.common.util.concurrent.Futures$CallbackListener:toString()": "/**\n* Returns a string representation of the object including the callback value.\n* @return string representation of the object\n*/",
        "com.google.common.util.concurrent.Futures$CallbackListener:<init>(java.util.concurrent.Future,com.google.common.util.concurrent.FutureCallback)": "/**\n* Initializes CallbackListener with a Future and its callback.\n* @param future the Future to monitor\n* @param callback the callback to execute upon completion\n*/"
    },
    "com.google.common.collect.TreeMultiset$1": {
        "com.google.common.collect.TreeMultiset$1:getElement()": "/**\n* Retrieves an element, casting it to a nullable type.\n* @return the element of type E, possibly null\n*/",
        "com.google.common.collect.TreeMultiset$1:getCount()": "/**** Returns the current element count. \n* @return number of elements in the collection \n*/"
    },
    "com.google.common.util.concurrent.CollectionFuture$ListFuture": {
        "com.google.common.util.concurrent.CollectionFuture$ListFuture:combine(java.util.List)": "/**\n* Combines values from a list of Present objects into a new unmodifiable list.\n* @param values list of Present objects containing values\n* @return unmodifiable list of extracted values, null if Present is null\n*/",
        "com.google.common.util.concurrent.CollectionFuture$ListFuture:<init>(com.google.common.collect.ImmutableCollection,boolean)": "/**** Initializes ListFuture with futures and success criteria. \n* @param futures collection of futures to aggregate \n* @param allMustSucceed true if all futures must succeed \n*/"
    },
    "com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry": {
        "com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry:<init>(java.lang.Object,int,com.google.common.collect.Multisets$ImmutableEntry)": "/**\n* Constructs a NonTerminalEntry with element, count, and next entry in bucket.\n* @param element the entry element\n* @param count non-negative count of the element\n* @param nextInBucket the next ImmutableEntry in the bucket\n*/"
    },
    "com.google.common.collect.TreeRangeSet$Complement": {
        "com.google.common.collect.TreeRangeSet$Complement:contains(java.lang.Comparable)": "/**\n* Checks if the specified value is within the range.\n* @param value the value to check for containment\n* @return true if the value is in range, false otherwise\n*/",
        "com.google.common.collect.TreeRangeSet$Complement:remove(com.google.common.collect.Range)": "/**\n* Removes a specified range from the range set.\n* @param rangeToRemove the Range object to be removed\n*/",
        "com.google.common.collect.TreeRangeSet$Complement:add(com.google.common.collect.Range)": "/**\n* Adds a range to the set by removing it first.\n* @param rangeToAdd the Range object to be added\n*/"
    },
    "com.google.common.collect.TreeRangeSet$SubRangeSet": {
        "com.google.common.collect.TreeRangeSet$SubRangeSet:contains(java.lang.Comparable)": "/**\n* Checks if the value is within the defined range.\n* @param value the value to check for containment\n* @return true if within range, false otherwise\n*/",
        "com.google.common.collect.TreeRangeSet$SubRangeSet:encloses(com.google.common.collect.Range)": "/**\n* Checks if the restriction range encloses the given range.\n* @param range the range to check\n* @return true if the restriction encloses the range, false otherwise\n*/",
        "com.google.common.collect.TreeRangeSet$SubRangeSet:subRangeSet(com.google.common.collect.Range)": "/**\n* Returns a subrange set based on the specified view range.\n* @param view the range to check against the restriction\n* @return a RangeSet representing the subrange or an empty set\n*/",
        "com.google.common.collect.TreeRangeSet$SubRangeSet:add(com.google.common.collect.Range)": "/**\n* Adds a range to the set if it is enclosed by the restriction.\n* @param rangeToAdd the Range object to be added\n*/",
        "com.google.common.collect.TreeRangeSet$SubRangeSet:remove(com.google.common.collect.Range)": "/**\n* Removes the specified range if connected to the restriction.\n* @param rangeToRemove the Range object to be removed\n*/",
        "com.google.common.collect.TreeRangeSet$SubRangeSet:clear()": "/**\n* Clears the range set by removing the specified restriction.\n*/"
    },
    "com.google.common.graph.AbstractDirectedNetworkConnections$1": {
        "com.google.common.graph.AbstractDirectedNetworkConnections$1:iterator()": "/**\n* Returns an unmodifiable iterator over the elements.\n* @return UnmodifiableIterator of type E\n*/"
    },
    "com.google.common.collect.ImmutableBiMap$SerializedForm": {
        "com.google.common.collect.ImmutableBiMap$SerializedForm:makeBuilder(int)": "/**\n* Creates a new Builder with a specified initial capacity.\n* @param size the initial size of the entries array\n* @return a Builder instance\n*/",
        "com.google.common.collect.ImmutableBiMap$SerializedForm:<init>(com.google.common.collect.ImmutableBiMap)": "/**\n* Constructs SerializedForm from an ImmutableBiMap.\n* @param bimap ImmutableBiMap of key-value pairs\n*/"
    },
    "com.google.common.collect.StandardTable$Column$Values": {
        "com.google.common.collect.StandardTable$Column$Values:removeAll(java.util.Collection)": "/**\n* Removes all entries matching the specified collection.\n* @param c collection of elements to remove\n* @return true if any entries were removed, false otherwise\n*/",
        "com.google.common.collect.StandardTable$Column$Values:retainAll(java.util.Collection)": "/**\n* Retains only elements in the collection that are not in the specified collection.\n* @param c collection of elements to check against\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.StandardTable$Column$Values:remove(java.lang.Object)": "/**\n* Removes an object from the collection if it matches the specified criteria.\n* @param obj object to remove, must not be null\n* @return true if the object was removed, false otherwise\n*/"
    },
    "com.google.common.collect.ImmutableSortedMap$SerializedForm": {
        "com.google.common.collect.ImmutableSortedMap$SerializedForm:<init>(com.google.common.collect.ImmutableSortedMap)": "/**\n* Constructs SerializedForm from sorted map.\n* @param sortedMap ImmutableSortedMap of key-value pairs\n*/",
        "com.google.common.collect.ImmutableSortedMap$SerializedForm:makeBuilder(int)": "/**\n* Creates a new Builder with specified size.\n* @param size the initial size of the Builder\n* @return a Builder instance\n*/"
    },
    "com.google.common.collect.SortedMapDifference": {
        "com.google.common.collect.SortedMapDifference:entriesOnlyOnLeft()": "/**** Retrieves left-only entries as a sorted map. \n* @return SortedMap of entries only present on the left \n*/",
        "com.google.common.collect.SortedMapDifference:entriesDiffering()": "/**\n* Retrieves differing entries from the superclass as a sorted map.\n* @return SortedMap of key-value differences between entries\n*/"
    },
    "com.google.common.collect.ForwardingSortedSet": {
        "com.google.common.collect.ForwardingSortedSet:delegate()": "/**\n* Returns an unmodifiable sorted set delegate.\n* @return an unmodifiable SortedSet of type E\n*/",
        "com.google.common.collect.ForwardingSortedSet:<init>()": "/**\n* Initializes a new instance of ForwardingSortedSet.\n*/",
        "com.google.common.collect.ForwardingSortedSet:comparator()": "/**\n* Retrieves the comparator of the unmodifiable sorted set.\n* @return Comparator for type E or null if none exists\n*/",
        "com.google.common.collect.ForwardingSortedSet:first()": "/**\n* Retrieves the first element from the sorted set delegate.\n* @return the first element of type E or null if empty\n*/",
        "com.google.common.collect.ForwardingSortedSet:headSet(java.lang.Object)": "/**\n* Returns a view of the portion of the set before the specified element.\n* @param toElement the element before which to return the set view\n* @return a sorted set of elements before toElement\n*/",
        "com.google.common.collect.ForwardingSortedSet:last()": "/**\n* Retrieves the last element from an unmodifiable sorted set.\n* @return last element of type E from the sorted set\n*/",
        "com.google.common.collect.ForwardingSortedSet:subSet(java.lang.Object,java.lang.Object)": "/**\n* Returns a view of the portion of this set between fromElement and toElement.\n* @param fromElement lower bound of the subset (inclusive)\n* @param toElement upper bound of the subset (exclusive)\n* @return SortedSet of elements in the specified range\n*/",
        "com.google.common.collect.ForwardingSortedSet:tailSet(java.lang.Object)": "/**\n* Returns a view of the portion of this set whose elements are greater than or equal to fromElement.\n* @param fromElement the starting element for the tail set\n* @return a SortedSet view of the tail portion of the set\n*/",
        "com.google.common.collect.ForwardingSortedSet:standardContains(java.lang.Object)": "/**\n* Checks if the set contains the specified object.\n* @param object the object to check for presence\n* @return true if present, false if not or on exception\n*/",
        "com.google.common.collect.ForwardingSortedSet:standardRemove(java.lang.Object)": "/**\n* Removes the specified object from the sorted set if present.\n* @param object the object to remove\n* @return true if the object was removed, false otherwise\n*/",
        "com.google.common.collect.ForwardingSortedSet:standardSubSet(java.lang.Object,java.lang.Object)": "/**\n* Returns a subset of elements between fromElement and toElement.\n* @param fromElement starting element (inclusive)\n* @param toElement ending element (exclusive)\n* @return SortedSet of elements in the specified range\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedNavigableSet": {
        "com.google.common.collect.Synchronized$SynchronizedNavigableSet:<init>(java.util.NavigableSet,java.lang.Object)": "/**\n* Constructs a synchronized navigable set with a delegate and optional mutex for synchronization.\n* @param delegate the navigable set to synchronize\n* @param mutex optional object for synchronization control\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableSet:delegate()": "/**\n* Returns a sorted set view of the superclass's delegate collection.\n* @return NavigableSet of type E from the superclass delegate\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableSet:ceiling(java.lang.Object)": "/**\n* Retrieves the least element greater than or equal to the given element.\n* @param e the element to compare\n* @return the ceiling element or null if none exists\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableSet:descendingIterator()": "/**\n* Returns an iterator for the elements in descending order.\n* @return Iterator of type E for descending traversal\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableSet:descendingSet()": "/**\n* Returns a synchronized descending view of the navigable set.\n* @return NavigableSet in descending order, synchronized on mutex\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableSet:floor(java.lang.Object)": "/**\n* Retrieves greatest element less than or equal to the specified element.\n* @param e the element to compare\n* @return the greatest element or null if not found\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableSet:headSet(java.lang.Object,boolean)": "/**\n* Returns a synchronized view of the head set up to the specified element.\n* @param toElement the endpoint element\n* @param inclusive true if the endpoint is included\n* @return synchronized NavigableSet of elements up to toElement\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableSet:higher(java.lang.Object)": "/**\n* Retrieves the least element greater than the specified element.\n* @param e the element to compare\n* @return the higher element or null if none exists\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableSet:lower(java.lang.Object)": "/**\n* Retrieves the greatest element less than the specified element.\n* @param e the element to compare against\n* @return the greatest element less than e, or null if none exists\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableSet:pollFirst()": "/**\n* Retrieves and removes the first element, if present.\n* @return first element of type E or null if empty\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableSet:pollLast()": "/**\n* Retrieves and removes the last element from the collection.\n* @return last element or null if empty\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a synchronized subset of a NavigableSet.\n* @param fromElement starting element, inclusive or exclusive based on fromInclusive\n* @param toElement ending element, inclusive or exclusive based on toInclusive\n* @return synchronized NavigableSet view of the specified range\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableSet:tailSet(java.lang.Object,boolean)": "/**\n* Returns a synchronized view of the tail set starting from the specified element.\n* @param fromElement the element to start the tail set from\n* @param inclusive whether the tail set includes the specified element\n* @return synchronized NavigableSet containing elements from the tail set\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableSet:headSet(java.lang.Object)": "/**\n* Returns a view of the set up to the specified element, excluding it.\n* @param toElement the endpoint element\n* @return SortedSet up to toElement, not including it\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableSet:subSet(java.lang.Object,java.lang.Object)": "/**\n* Returns a view of the portion of this set between fromElement and toElement.\n* @param fromElement starting element (inclusive)\n* @param toElement ending element (exclusive)\n* @return SortedSet view of the specified range\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableSet:tailSet(java.lang.Object)": "/**\n* Returns a synchronized view of the tail set starting from the specified element.\n* @param fromElement the element to start the tail set from\n* @return SortedSet containing elements from the tail set\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedBiMap": {
        "com.google.common.collect.Synchronized$SynchronizedBiMap:delegate()": "/**\n* Returns a BiMap delegate instance from the superclass.\n* @return BiMap<K, V> delegate object\n*/",
        "com.google.common.collect.Synchronized$SynchronizedBiMap:<init>(com.google.common.collect.BiMap,java.lang.Object,com.google.common.collect.BiMap)": "/**\n* Initializes SynchronizedBiMap with delegate and optional mutex and inverse map.\n* @param delegate non-null BiMap to delegate operations\n* @param mutex optional mutex for thread safety\n* @param inverse optional inverse BiMap\n*/",
        "com.google.common.collect.Synchronized$SynchronizedBiMap:values()": "/**\n* Returns a synchronized set of values from the delegate.\n* @return Set<V> synchronized set of values\n*/",
        "com.google.common.collect.Synchronized$SynchronizedBiMap:forcePut(java.lang.Object,java.lang.Object)": "/**\n* Puts a key-value pair in a thread-safe manner.\n* @param key the key to insert\n* @param value the value to associate with the key\n* @return the previous value associated with the key, or null if none\n*/",
        "com.google.common.collect.Synchronized$SynchronizedBiMap:inverse()": "/**\n* Returns the inverse BiMap, initializing it if not already done.\n* @return inverse BiMap or null if not initialized\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedSortedMap": {
        "com.google.common.collect.Synchronized$SynchronizedSortedMap:delegate()": "/**\n* Returns a sorted map delegate instance.\n* @return SortedMap<K, V> casted delegate object\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedMap:<init>(java.util.SortedMap,java.lang.Object)": "/**\n* Constructs a SynchronizedSortedMap with a delegate and optional mutex for synchronization.\n* @param delegate non-null SortedMap to delegate operations\n* @param mutex optional mutex for thread safety\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedMap:comparator()": "/**\n* Retrieves the comparator for sorting keys.\n* @return Comparator for keys or null if not available\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedMap:firstKey()": "/**** Retrieves the first key from the sorted map. \n* @return First key of the sorted map \n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedMap:lastKey()": "/**\n* Retrieves the last key from the sorted map.\n* @return last key of the map, or null if the map is empty\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedMap:headMap(java.lang.Object)": "/**\n* Returns a synchronized view of the portion of the map before the specified key.\n* @param toKey the key before which to return the map\n* @return a synchronized SortedMap instance\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedMap:subMap(java.lang.Object,java.lang.Object)": "/**\n* Returns a synchronized subMap view between specified keys.\n* @param fromKey starting key of the subMap\n* @param toKey ending key of the subMap\n* @return a synchronized SortedMap view of the specified range\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedMap:tailMap(java.lang.Object)": "/**\n* Returns a synchronized view of the tail map starting from the specified key.\n* @param fromKey the key from which the tail map is to be retrieved\n* @return a synchronized SortedMap instance\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedListMultimap": {
        "com.google.common.collect.Synchronized$SynchronizedListMultimap:delegate()": "/**\n* Returns the ListMultimap delegate instance.\n* @return ListMultimap<K, V> delegate object\n*/",
        "com.google.common.collect.Synchronized$SynchronizedListMultimap:<init>(com.google.common.collect.ListMultimap,java.lang.Object)": "/**\n* Initializes SynchronizedListMultimap with a delegate and optional mutex for synchronization.\n* @param delegate non-null ListMultimap to delegate calls\n* @param mutex optional mutex for thread safety\n*/",
        "com.google.common.collect.Synchronized$SynchronizedListMultimap:get(java.lang.Object)": "/**\n* Retrieves values associated with the given key.\n* @param key the key to look up values for\n* @return List of values or empty list if none found\n*/",
        "com.google.common.collect.Synchronized$SynchronizedListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a given key in a thread-safe manner.\n* @param key the key for which values are to be replaced\n* @param values new values to associate with the key\n* @return list of previous values associated with the key\n*/",
        "com.google.common.collect.Synchronized$SynchronizedListMultimap:removeAll(java.lang.Object)": "/**\n* Removes all mappings for the specified key.\n* @param key the key whose mappings are to be removed\n* @return list of removed values\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedSetMultimap": {
        "com.google.common.collect.Synchronized$SynchronizedSetMultimap:delegate()": "/**\n* Returns the SetMultimap delegate instance.\n* @return SetMultimap<K, V> delegate object\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSetMultimap:<init>(com.google.common.collect.SetMultimap,java.lang.Object)": "/**\n* Constructs SynchronizedSetMultimap with a delegate and optional mutex for synchronization.\n* @param delegate non-null SetMultimap to delegate calls\n* @param mutex optional mutex for thread safety\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSetMultimap:get(java.lang.Object)": "/**\n* Retrieves a synchronized set of values by key.\n* @param key the key to lookup values\n* @return synchronized Set of values for the given key\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSetMultimap:removeAll(java.lang.Object)": "/**\n* Removes all values associated with the specified key.\n* @param key the key whose associated values are to be removed\n* @return Set of removed values\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a given key in a thread-safe manner.\n* @param key the key whose values are to be replaced\n* @param values new values to associate with the key\n* @return Set of replaced values\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSetMultimap:entries()": "/**\n* Retrieves a synchronized set of map entries.\n* @return a Set of map entries, synchronized with optional mutex\n*/"
    },
    "com.google.common.escape.Escapers$1": {
        "com.google.common.escape.Escapers$1:<init>()": "/**\n* Protected constructor for the Escapers class, preventing external instantiation.\n*/"
    },
    "com.google.common.graph.AbstractNetwork$1": {
        "com.google.common.graph.AbstractNetwork$1:edges()": "/**\n* Returns a set of edges in the graph as EndpointPair objects.\n* @return Set of EndpointPair representing graph edges\n*/"
    },
    "com.google.common.graph.AbstractValueGraph$1": {
        "com.google.common.graph.AbstractValueGraph$1:edges()": "/**\n* Returns a set of graph edges as EndpointPairs.\n* @return Set of EndpointPair objects representing graph edges\n*/",
        "com.google.common.graph.AbstractValueGraph$1:degree(java.lang.Object)": "/**\n* Calculates the degree of a graph node.\n* @param node the graph node\n* @return degree as an integer\n*/",
        "com.google.common.graph.AbstractValueGraph$1:incidentEdgeOrder()": "/**\n* Returns an unordered ElementOrder for incident edges.\n* @return ElementOrder object representing unordered type\n*/",
        "com.google.common.graph.AbstractValueGraph$1:inDegree(java.lang.Object)": "/**\n* Calculates the in-degree of a node in a graph.\n* @param node the graph node\n* @return the in-degree as an integer\n*/",
        "com.google.common.graph.AbstractValueGraph$1:outDegree(java.lang.Object)": "/**\n* Computes the out-degree of a graph node.\n* @param node the graph node\n* @return out-degree as an integer\n*/"
    },
    "com.google.common.hash.AbstractCompositeHashFunction$1": {
        "com.google.common.hash.AbstractCompositeHashFunction$1:putLong(long)": "/**\n* Inserts a long value into the hasher as bytes.\n* @param l the long value to be inserted\n* @return the current Hasher instance\n*/",
        "com.google.common.hash.AbstractCompositeHashFunction$1:putChar(char)": "/**\n* Adds a character to the hasher for processing.\n* @param c character to be added\n* @return this Hasher instance for method chaining\n*/",
        "com.google.common.hash.AbstractCompositeHashFunction$1:putBytes(byte[],int,int)": "/**\n* Adds a byte array to the hasher from a specified offset and length.\n* @param bytes byte array to process, @param off starting index, @param len number of bytes\n* @return this Hasher instance for chaining\n*/",
        "com.google.common.hash.AbstractCompositeHashFunction$1:putBytes(byte[])": "/**\n* Processes a byte array for hashing.\n* @param bytes byte array to process\n* @return this Hasher instance for chaining\n*/"
    },
    "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator": {
        "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator:compare(byte[],byte[])": "/**\n* Compares two byte arrays lexicographically.\n* @param left first byte array\n* @param right second byte array\n* @return negative if left < right, positive if left > right, zero if equal\n*/"
    },
    "com.google.common.io.BaseEncoding$Base16Encoding": {
        "com.google.common.io.BaseEncoding$Base16Encoding:decodeTo(byte[],java.lang.CharSequence)": "/**\n* Decodes characters to bytes and writes to target array.\n* @param target byte array to fill with decoded values\n* @param chars input character sequence to decode\n* @return number of bytes written to target\n*/",
        "com.google.common.io.BaseEncoding$Base16Encoding:<init>(com.google.common.io.BaseEncoding$Alphabet)": "/**\n* Initializes Base16Encoding with a specified alphabet.\n* @param alphabet must contain exactly 16 characters\n*/",
        "com.google.common.io.BaseEncoding$Base16Encoding:encodeTo(java.lang.Appendable,byte[],int,int)": "/**\n* Encodes bytes to target using a specified encoding.\n* @param target the destination for encoded output\n* @param bytes input byte array to encode\n* @param off starting offset in the byte array\n* @param len number of bytes to encode\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.BaseEncoding$Base16Encoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)": "/**\n* Creates a new Base16Encoding instance.\n* @param alphabet specifies the encoding alphabet\n* @param paddingChar optional character for padding\n* @return BaseEncoding instance\n*/",
        "com.google.common.io.BaseEncoding$Base16Encoding:<init>(java.lang.String,java.lang.String)": "/**\n* Constructs Base16Encoding with a name and specified alphabet characters.\n* @param name name of the encoding\n* @param alphabetChars characters for the alphabet, must be 16 characters long\n*/"
    },
    "com.google.common.io.BaseEncoding$Base64Encoding": {
        "com.google.common.io.BaseEncoding$Base64Encoding:decodeTo(byte[],java.lang.CharSequence)": "/**\n* Decodes characters into bytes and stores them in the target array.\n* @param target byte array to hold decoded bytes\n* @param chars character sequence to decode\n* @return number of bytes written to the target\n* @throws DecodingException if input length is invalid or decoding fails\n*/",
        "com.google.common.io.BaseEncoding$Base64Encoding:<init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)": "/**\n* Constructs Base64Encoding with given alphabet and optional padding character.\n* @param alphabet encoding alphabet (must have 64 characters)\n* @param paddingChar optional padding character\n*/",
        "com.google.common.io.BaseEncoding$Base64Encoding:encodeTo(java.lang.Appendable,byte[],int,int)": "/**\n* Encodes a byte array to a target Appendable.\n* @param target destination for encoded output\n* @param bytes input byte array to encode\n* @param off starting offset in the byte array\n* @param len number of bytes to encode\n* @throws IOException if an I/O error occurs\n*/",
        "com.google.common.io.BaseEncoding$Base64Encoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)": "/**\n* Creates a new Base64Encoding instance.\n* @param alphabet encoding alphabet (must have 64 characters)\n* @param paddingChar optional padding character\n* @return BaseEncoding instance\n*/",
        "com.google.common.io.BaseEncoding$Base64Encoding:<init>(java.lang.String,java.lang.String,java.lang.Character)": "/**\n* Constructs Base64Encoding with specified name, alphabet characters, and optional padding.\n* @param name encoding name\n* @param alphabetChars characters for the encoding alphabet\n* @param paddingChar optional padding character\n*/"
    },
    "com.google.common.primitives.UnsignedInts$LexicographicalComparator": {
        "com.google.common.primitives.UnsignedInts$LexicographicalComparator:compare(int[],int[])": "/**\n* Compares two integer arrays for equality and returns comparison result.\n* @param left first array to compare\n* @param right second array to compare\n* @return negative if left < right, zero if equal, positive if left > right\n*/"
    },
    "com.google.common.primitives.UnsignedLongs$LexicographicalComparator": {
        "com.google.common.primitives.UnsignedLongs$LexicographicalComparator:compare(long[],long[])": "/**\n* Compares two long arrays element-wise.\n* @param left first long array\n* @param right second long array\n* @return negative if left < right, positive if left > right, zero if equal\n*/"
    },
    "com.google.common.util.concurrent.AbstractExecutionThreadService$1": {
        "com.google.common.util.concurrent.AbstractExecutionThreadService$1:toString()": "/**\n* Returns a string representation of the service including its name and state.\n* @return formatted string with service name and current state\n*/"
    },
    "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator": {
        "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:<init>(java.util.concurrent.ScheduledExecutorService)": "/**\n* Initializes ScheduledListeningDecorator with a non-null ScheduledExecutorService.\n* @param delegate the ScheduledExecutorService to be wrapped\n*/",
        "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)": "/**\n* Schedules a Runnable task for execution after a specified delay.\n* @param command the task to execute\n* @param delay the delay before execution\n* @param unit the time unit of the delay\n* @return a ListenableScheduledFuture representing the scheduled task\n*/",
        "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)": "/**\n* Schedules a callable task with a delay.\n* @param callable the task to be executed\n* @param delay delay duration before execution\n* @param unit time unit of the delay\n* @return ListenableScheduledFuture for the scheduled task\n*/",
        "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": "/**\n* Schedules a task to run at fixed intervals.\n* @param command task to execute periodically\n* @param initialDelay delay before first execution\n* @param period time between successive executions\n* @param unit time unit for delays and periods\n* @return ListenableScheduledFuture for the scheduled task\n*/",
        "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": "/**\n* Schedules a task with fixed delay execution.\n* @param command task to execute; @param initialDelay initial delay before first execution; \n* @param delay delay between subsequent executions; @param unit time unit for delays.\n* @return ListenableScheduledFuture for the scheduled task.\n*/"
    },
    "com.google.common.util.concurrent.AbstractService$HasReachedRunningGuard": {
        "com.google.common.util.concurrent.AbstractService$HasReachedRunningGuard:isSatisfied()": "/**\n* Checks if the current state is RUNNING or greater.\n* @return true if state is RUNNING or above, false otherwise\n*/"
    },
    "com.google.common.util.concurrent.AbstractService$IsStartableGuard": {
        "com.google.common.util.concurrent.AbstractService$IsStartableGuard:isSatisfied()": "/**\n* Checks if the current state is NEW.\n* @return true if state is NEW, false otherwise\n*/"
    },
    "com.google.common.util.concurrent.AbstractService$IsStoppableGuard": {
        "com.google.common.util.concurrent.AbstractService$IsStoppableGuard:isSatisfied()": "/**\n* Checks if the current state is RUNNING or lower.\n* @return true if state is RUNNING or less, false otherwise\n*/"
    },
    "com.google.common.util.concurrent.AbstractService$IsStoppedGuard": {
        "com.google.common.util.concurrent.AbstractService$IsStoppedGuard:isSatisfied()": "/**\n* Checks if the current state is TERMINATED or beyond.\n* @return true if state is TERMINATED or greater, false otherwise\n*/"
    },
    "com.google.common.util.concurrent.ServiceManager$ServiceManagerState": {
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:dispatchListenerEvents()": "/**\n* Dispatches events to listeners after validating thread state.\n* @throws IllegalStateException if monitor is held by current thread\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:<init>(com.google.common.collect.ImmutableCollection)": "/**\n* Initializes ServiceManagerState with given services.\n* @param services collection of services to manage\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueStoppedEvent()": "/**\n* Enqueues a stopped event for processing.\n* @param STOPPED_EVENT the event indicating a stopped state\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueHealthyEvent()": "/**\n* Enqueues a healthy event for processing.\n* @param HEALTHY_EVENT the event to enqueue\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueFailedEvent(com.google.common.util.concurrent.Service)": "/****\n* Enqueues a failure event for the specified service.\n* @param service the service that failed\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor)": "/**\n* Adds a listener with an executor to the listener queue.\n* @param listener the event listener, must not be null\n* @param executor the executor for running events, must not be null\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:tryStartTiming(com.google.common.util.concurrent.Service)": "/**\n* Starts timing for a service if not already started.\n* @param service the service to time\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State)": "/**\n* Transitions a service between states and manages related events.\n* @param service the service to transition\n* @param from the current state of the service\n* @param to the target state of the service\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:checkHealthy()": "/**\n* Validates service health; throws exception if not all services are running.\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitStopped()": "/**\n* Waits until the stopped condition is satisfied.\n* @param stoppedGuard the guard condition to check for stopping\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitStopped(long,java.util.concurrent.TimeUnit)": "/**\n* Awaits service termination with a timeout.\n* @param timeout max wait time\n* @param unit time unit for the timeout\n* @throws TimeoutException if services do not stop in time\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitHealthy()": "/**\n* Awaits service health check, blocking until conditions are met.\n* Calls enterWhenUninterruptibly and checkHealthy, then leaves monitor.\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitHealthy(long,java.util.concurrent.TimeUnit)": "/**\n* Waits for services to become healthy within a specified timeout.\n* @param timeout maximum wait time\n* @param unit time unit for the timeout\n* @throws TimeoutException if services are not healthy in time\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:startupTimes()": "/**\n* Collects startup times for services and returns them as an ImmutableMap.\n* @return ImmutableMap of services and their startup durations in milliseconds\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:servicesByState()": "/**\n* Builds an ImmutableSetMultimap of services filtered by state.\n* @return ImmutableSetMultimap of State-Service pairs\n*/",
        "com.google.common.util.concurrent.ServiceManager$ServiceManagerState:markReady()": "/**\n* Marks the service as ready if no transitions occurred; otherwise, throws an exception.\n*/"
    },
    "com.google.common.collect.StandardTable$Column$KeySet": {
        "com.google.common.collect.StandardTable$Column$KeySet:retainAll(java.util.Collection)": "/**\n* Retains only elements in the collection that are not in the specified collection.\n* @param c collection of elements to check against\n* @return true if any elements were removed, false otherwise\n*/",
        "com.google.common.collect.StandardTable$Column$KeySet:remove(java.lang.Object)": "/**\n* Removes an object from the table by column key.\n* @param obj object to remove; if null, returns false\n* @return true if the object was removed, false otherwise\n*/",
        "com.google.common.collect.StandardTable$Column$KeySet:contains(java.lang.Object)": "/**\n* Checks if an object exists in the specified column.\n* @param obj the object to check for existence\n* @return true if exists in the column, false otherwise\n*/"
    },
    "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet": {
        "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet:removeAll(java.util.Collection)": "/**\n* Removes elements from the set based on the provided collection.\n* @param c collection of elements to remove\n* @return true if elements were removed, false if none were found\n*/"
    },
    "com.google.common.graph.StandardMutableNetwork": {
        "com.google.common.graph.StandardMutableNetwork:removeEdge(java.lang.Object)": "/**\n* Removes an edge from the graph and updates connections.\n* @param edge the edge to remove\n* @return true if removed, false if not found\n*/",
        "com.google.common.graph.StandardMutableNetwork:<init>(com.google.common.graph.NetworkBuilder)": "/**\n* Constructs a StandardMutableNetwork using the provided builder.\n* @param builder configuration for the network\n*/",
        "com.google.common.graph.StandardMutableNetwork:newConnections()": "/**\n* Creates a new NetworkConnections instance based on direction and edge allowance.\n* @return NetworkConnections object\n*/",
        "com.google.common.graph.StandardMutableNetwork:addNodeInternal(java.lang.Object)": "/**\n* Adds a node and returns its associated connections.\n* @param node the node to be added\n* @return NetworkConnections for the added node\n*/",
        "com.google.common.graph.StandardMutableNetwork:addNode(java.lang.Object)": "/**\n* Adds a node if not already present.\n* @param node the node to add\n* @return true if added, false if already exists\n*/",
        "com.google.common.graph.StandardMutableNetwork:addEdge(java.lang.Object,java.lang.Object,java.lang.Object)": "/**\n* Adds an edge between two nodes; returns false if edge already exists.\n* @param nodeU first node, nodeV second node, edge the edge to add\n* @return true if edge was added, false if it already existed\n*/",
        "com.google.common.graph.StandardMutableNetwork:addEdge(com.google.common.graph.EndpointPair,java.lang.Object)": "/**\n* Adds an edge between two endpoints.\n* @param endpoints pair of nodes, @param edge the edge to add\n* @return true if edge was added, false if it already existed\n*/",
        "com.google.common.graph.StandardMutableNetwork:removeNode(java.lang.Object)": "/**\n* Removes a node and its edges from the network.\n* @param node the node to remove\n* @return true if removed, false if not found\n*/"
    },
    "com.google.common.graph.AbstractGraphBuilder": {
        "com.google.common.graph.AbstractGraphBuilder:<init>(boolean)": "/**\n* Initializes AbstractGraphBuilder with directed or undirected graph setting.\n* @param directed true for directed graph, false for undirected\n*/"
    },
    "com.google.common.collect.FluentIterable$2": {
        "com.google.common.collect.FluentIterable$2:<init>(java.lang.Iterable)": "/**\n* Initializes FluentIterable with a provided iterable.\n* @param iterable the source Iterable to wrap\n*/"
    },
    "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry": {
        "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry)": "/**\n* Constructs a NonTerminalImmutableBiMapEntry with key, value, and next entries.\n* @param key the entry key; must not be null\n* @param value the entry value; must not be null\n* @param nextInKeyBucket reference to the next entry in the key bucket, can be null\n* @param nextInValueBucket reference to the next entry in the value bucket, can be null\n*/"
    },
    "com.google.common.reflect.ImmutableTypeToInstanceMap$Builder": {
        "com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:<init>()": "/**\n* Private constructor for Builder class, preventing instantiation.\n*/",
        "com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:put(java.lang.Class,java.lang.Object)": "/**\n* Adds a key-value pair to the builder using class type as key.\n* @param key class type for the entry; must not be null\n* @param value entry value; must not be null\n* @return Builder instance for method chaining\n*/",
        "com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:put(com.google.common.reflect.TypeToken,java.lang.Object)": "/**\n* Adds a key-value pair to the builder with type safety.\n* @param key the type token key; must not be null\n* @param value the entry value; must not be null\n* @return Builder instance for method chaining\n*/",
        "com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:build()": "/**\n* Constructs an ImmutableTypeToInstanceMap from a built ImmutableMap.\n* @return ImmutableTypeToInstanceMap instance created from map entries\n*/"
    },
    "com.google.common.util.concurrent.ServiceManager": {
        "com.google.common.util.concurrent.ServiceManager:stopAsync()": "/**\n* Stops all services asynchronously.\n* @return ServiceManager instance for method chaining\n*/",
        "com.google.common.util.concurrent.ServiceManager:isHealthy()": "/**\n* Checks if all services are running.\n* @return true if all services are running, false otherwise\n*/",
        "com.google.common.util.concurrent.ServiceManager:toString()": "/**\n* Returns a string representation of ServiceManager, excluding NoOpService instances.\n* @return formatted string of services\n*/",
        "com.google.common.util.concurrent.ServiceManager:addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor)": "/**\n* Adds a listener with an executor to the state.\n* @param listener the event listener, must not be null\n* @param executor the executor for running events, must not be null\n*/",
        "com.google.common.util.concurrent.ServiceManager:startAsync()": "/**** Starts all services asynchronously if they are in the NEW state. @return ServiceManager instance */",
        "com.google.common.util.concurrent.ServiceManager:awaitStopped()": "/**\n* Waits until the stopped condition is satisfied.\n* Calls state.awaitStopped() to check the stopping condition.\n*/",
        "com.google.common.util.concurrent.ServiceManager:awaitStopped(long,java.util.concurrent.TimeUnit)": "/**\n* Awaits service termination with specified timeout.\n* @param timeout max wait time in specified unit\n* @param unit time unit for the timeout\n* @throws TimeoutException if services do not stop in time\n*/",
        "com.google.common.util.concurrent.ServiceManager:awaitHealthy()": "/**\n* Waits for the service to be healthy by invoking state check.\n*/",
        "com.google.common.util.concurrent.ServiceManager:awaitHealthy(long,java.util.concurrent.TimeUnit)": "/**\n* Waits for services to become healthy within a specified timeout.\n* @param timeout maximum wait time\n* @param unit time unit for the timeout\n* @throws TimeoutException if services are not healthy in time\n*/",
        "com.google.common.util.concurrent.ServiceManager:startupTimes()": "/**\n* Retrieves startup times for services.\n* @return ImmutableMap of services and their startup durations in milliseconds\n*/",
        "com.google.common.util.concurrent.ServiceManager:awaitStopped(java.time.Duration)": "/**\n* Awaits service termination with a specified timeout.\n* @param timeout max wait time as Duration\n* @throws TimeoutException if services do not stop in time\n*/",
        "com.google.common.util.concurrent.ServiceManager:awaitHealthy(java.time.Duration)": "/**\n* Waits for services to become healthy within a specified duration.\n* @param timeout maximum wait time as Duration\n* @throws TimeoutException if services are not healthy in time\n*/",
        "com.google.common.util.concurrent.ServiceManager:startupDurations()": "/**\n* Converts service startup times to durations.\n* @return ImmutableMap of services and their startup durations\n*/",
        "com.google.common.util.concurrent.ServiceManager:servicesByState()": "/**\n* Retrieves services organized by state.\n* @return ImmutableSetMultimap of State-Service pairs\n*/",
        "com.google.common.util.concurrent.ServiceManager:<init>(java.lang.Iterable)": "/**\n* Initializes ServiceManager with services; substitutes placeholder if none provided.\n* @param services iterable of service instances\n*/"
    },
    "com.google.common.eventbus.AsyncEventBus": {
        "com.google.common.eventbus.AsyncEventBus:<init>(java.lang.String,java.util.concurrent.Executor)": "/**\n* Initializes AsyncEventBus with identifier and executor.\n* @param identifier unique identifier for the EventBus\n* @param executor task executor for event handling\n*/",
        "com.google.common.eventbus.AsyncEventBus:<init>(java.util.concurrent.Executor,com.google.common.eventbus.SubscriberExceptionHandler)": "/**\n* Constructs AsyncEventBus with default settings.\n* @param executor task executor for event handling\n* @param subscriberExceptionHandler handles exceptions during processing\n*/",
        "com.google.common.eventbus.AsyncEventBus:<init>(java.util.concurrent.Executor)": "/**\n* Initializes AsyncEventBus with default settings.\n* @param executor task executor for event handling\n*/"
    },
    "com.google.common.collect.Maps$6": {
        "com.google.common.collect.Maps$6:descendingSet()": "/**\n* Returns a NavigableSet of elements in descending order.\n* @return NavigableSet<E> in descending order from the delegate\n*/",
        "com.google.common.collect.Maps$6:subSet(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a subset of the NavigableSet between two elements.\n* @param fromElement starting element (inclusive/exclusive based on fromInclusive)\n* @param fromInclusive true if fromElement is included\n* @param toElement ending element (inclusive/exclusive based on toInclusive)\n* @param toInclusive true if toElement is included\n* @return NavigableSet view of the specified range\n*/",
        "com.google.common.collect.Maps$6:headSet(java.lang.Object,boolean)": "/**\n* Returns a view of the set with elements less than (or equal to) toElement.\n* @param toElement the high endpoint (exclusive or inclusive)\n* @param inclusive true if the endpoint is to be included\n* @return NavigableSet view of the specified range\n*/",
        "com.google.common.collect.Maps$6:tailSet(java.lang.Object,boolean)": "/**\n* Returns a view of the tail set starting from the specified element.\n* @param fromElement the starting element for the tail set\n* @param inclusive whether the starting element is included\n* @return NavigableSet view of the tail set\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedNavigableMap": {
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:delegate()": "/**\n* Returns a casted NavigableMap delegate from the superclass.\n* @return NavigableMap instance of the delegate\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:<init>(java.util.NavigableMap,java.lang.Object)": "/**\n* Constructs a SynchronizedNavigableMap with a delegate and optional mutex for synchronization.\n* @param delegate non-null NavigableMap to delegate operations\n* @param mutex optional mutex for thread safety\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:ceilingEntry(java.lang.Object)": "/**\n* Retrieves the ceiling entry for a given key in a synchronized manner.\n* @param key the key to find the ceiling entry for\n* @return Entry object or null if no ceiling entry exists\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:ceilingKey(java.lang.Object)": "/**\n* Retrieves the least key greater than or equal to the given key.\n* @param key the key to compare\n* @return the ceiling key or null if none exists\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:descendingKeySet()": "/**\n* Retrieves a synchronized descending key set.\n* @return NavigableSet of descending keys, synchronized with mutex\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:firstEntry()": "/**\n* Retrieves the first entry in the map.\n* @return Entry object or null if the map is empty\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:floorEntry(java.lang.Object)": "/**\n* Retrieves the greatest entry less than or equal to the specified key.\n* @param key the key to compare against\n* @return Entry object or null if no such entry exists\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:floorKey(java.lang.Object)": "/**\n* Retrieves the greatest key less than or equal to the specified key.\n* @param key the key to compare against\n* @return the floor key or null if not found\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:higherEntry(java.lang.Object)": "/**\n* Retrieves the entry with the smallest key greater than the specified key.\n* @param key the key to compare against\n* @return Entry object or null if no higher key exists\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:higherKey(java.lang.Object)": "/**\n* Retrieves the least key greater than the specified key.\n* @param key the key to compare\n* @return the higher key or null if none exists\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:lastEntry()": "/**\n* Retrieves the last entry in the map.\n* @return last Entry or null if the map is empty\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:lowerEntry(java.lang.Object)": "/**\n* Retrieves the entry less than the specified key.\n* @param key the key to compare against\n* @return Entry or null if no such entry exists\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:lowerKey(java.lang.Object)": "/**\n* Retrieves the lowest key less than the specified key.\n* @param key the key to compare against\n* @return the lower key or null if none exists\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:navigableKeySet()": "/**\n* Returns a synchronized NavigableSet of keys.\n* @return NavigableSet of keys, synchronized with the provided mutex\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:pollFirstEntry()": "/**\n* Retrieves and removes the first entry from the map.\n* @return Entry object or null if the map is empty\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:pollLastEntry()": "/**\n* Retrieves and removes the last entry from the map.\n* @return Entry object or null if the map is empty\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:keySet()": "/**\n* Returns a set of keys from the navigable collection.\n* @return Set of keys from the navigableKeySet\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:descendingMap()": "/**\n* Returns a synchronized descending view of the NavigableMap.\n* @return NavigableMap containing the descending order of elements\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:headMap(java.lang.Object,boolean)": "/**** Returns a synchronized headMap view up to the specified key.  \n* @param toKey the key up to which the map is to be viewed  \n* @param inclusive true if the headMap includes toKey  \n* @return synchronized NavigableMap instance  \n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)": "/**\n* Returns a submap view of the range [fromKey, toKey].\n* @param fromKey starting key of the submap\n* @param fromInclusive true if fromKey is included\n* @param toKey ending key of the submap\n* @param toInclusive true if toKey is included\n* @return NavigableMap view of the specified range\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:tailMap(java.lang.Object,boolean)": "/**\n* Returns a view of the portion of this map from fromKey to the end.\n* @param fromKey the key to start the view\n* @param inclusive true to include fromKey, false otherwise\n* @return NavigableMap view of the specified range\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:headMap(java.lang.Object)": "/**\n* Returns a view of the map up to the specified key, exclusive.\n* @param toKey the key up to which the map is to be viewed\n* @return SortedMap instance excluding toKey\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:subMap(java.lang.Object,java.lang.Object)": "/**\n* Retrieves a view of the sorted map within the specified key range.\n* @param fromKey starting key (inclusive) of the submap\n* @param toKey ending key (exclusive) of the submap\n* @return SortedMap view of the specified range\n*/",
        "com.google.common.collect.Synchronized$SynchronizedNavigableMap:tailMap(java.lang.Object)": "/**\n* Returns a view of the map from the specified key to the end.\n* @param fromKey the key to start the view\n* @return SortedMap view from fromKey to the end\n*/"
    },
    "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap": {
        "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:delegate()": "/**\n* Returns the SortedSetMultimap delegate instance.\n* @return SortedSetMultimap<K, V> delegate object\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:<init>(com.google.common.collect.SortedSetMultimap,java.lang.Object)": "/**\n* Initializes SynchronizedSortedSetMultimap with delegate and optional mutex for sync.\n* @param delegate non-null SortedSetMultimap to delegate calls\n* @param mutex optional mutex for thread safety\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:get(java.lang.Object)": "/**\n* Retrieves a sorted set of values for the given key.\n* @param key the key to lookup values\n* @return SortedSet<V> of values associated with the key\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:removeAll(java.lang.Object)": "/**\n* Removes all values associated with the specified key.\n* @param key the key whose associated values are to be removed\n* @return SortedSet of removed values\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a specified key in a thread-safe manner.\n* @param key the key whose values are to be replaced\n* @param values the new values to associate with the key\n* @return SortedSet of replaced values\n*/",
        "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:valueComparator()": "/**\n* Returns the comparator for values in the map.\n* @return Comparator for values, or null if not present\n*/"
    },
    "com.google.common.graph.Traverser$2": {
        "com.google.common.graph.Traverser$2:newTraversal()": "/**\n* Creates a new Traversal instance for navigating nodes.\n* @return Traversal object for node traversal\n*/"
    },
    "com.google.common.io.CharSource$EmptyCharSource": {
        "com.google.common.io.CharSource$EmptyCharSource:<init>()": "/**\n* Constructs an EmptyCharSource with an empty string.\n*/"
    },
    "com.google.common.math.LongMath$MillerRabinTester$2": {
        "com.google.common.math.LongMath$MillerRabinTester$2:mulMod(long,long,long)": "/**\n* Computes the modular product of two numbers.\n* @param a first multiplicand\n* @param b second multiplicand\n* @param m modulus value\n* @return result of (a * b) % m\n*/",
        "com.google.common.math.LongMath$MillerRabinTester$2:squareMod(long,long)": "/**\n* Computes the square of a modulo operation.\n* @param a the value to be squared\n* @param m the modulus\n* @return the result of (a^2) mod m\n*/"
    },
    "com.google.common.collect.StandardTable$Row$2": {
        "com.google.common.collect.StandardTable$Row$2:setValue(java.lang.Object)": "/**\n* Sets a value and returns the previous value.\n* @param value new value to set\n* @return previous value of type V\n*/"
    },
    "com.google.common.cache.LocalCache$ComputingValueReference": {
        "com.google.common.cache.LocalCache$ComputingValueReference:<init>(com.google.common.cache.LocalCache$ValueReference)": "/**\n* Initializes ComputingValueReference with an optional previous ValueReference.\n* @param oldValue previous ValueReference or null for unset state\n*/"
    },
    "com.google.common.collect.ImmutableSet$CachingAsList": {
        "com.google.common.collect.ImmutableSet$CachingAsList:iterator()": "/**\n* Returns an unmodifiable iterator over the elements.\n* @return UnmodifiableIterator of elements\n*/",
        "com.google.common.collect.ImmutableSet$CachingAsList:createAsList()": "/**\n* Creates an ImmutableList from the current object and its array representation.\n* @return ImmutableList containing elements of the current object\n*/",
        "com.google.common.collect.ImmutableSet$CachingAsList:asList()": "/**\n* Returns an ImmutableList representation of the current object.\n* @return ImmutableList containing elements or creates it if not initialized\n*/"
    },
    "com.google.common.collect.Maps$5": {
        "com.google.common.collect.Maps$5:headSet(java.lang.Object)": "/**\n* Returns a view of the set before the specified element.\n* @param toElement the element before which to return the set view\n* @return SortedSet of elements before toElement\n*/",
        "com.google.common.collect.Maps$5:subSet(java.lang.Object,java.lang.Object)": "/**\n* Returns a subset of the sorted set between specified elements.\n* @param fromElement lower bound (inclusive), @param toElement upper bound (exclusive)\n* @return SortedSet of elements in the specified range\n*/",
        "com.google.common.collect.Maps$5:tailSet(java.lang.Object)": "/**\n* Returns a sorted set view of elements greater than or equal to fromElement.\n* @param fromElement the starting element for the tail set\n* @return SortedSet view of the tail portion of the set\n*/"
    },
    "com.google.common.collect.SetMultimap": {
        "com.google.common.collect.SetMultimap:removeAll(java.lang.Object)": "/**\n* Removes all values associated with the specified key.\n* @param key the key whose associated values are to be removed\n* @return Set of removed values\n*/",
        "com.google.common.collect.SetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a given key in a thread-safe manner.\n* @param key the key whose values are to be replaced\n* @param values new values to associate with the key\n* @return Set of replaced values\n*/",
        "com.google.common.collect.SetMultimap:entries()": "/**\n* Retrieves a synchronized set of map entries.\n* @return a Set of map entries, synchronized with optional mutex\n*/"
    },
    "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator": {
        "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator:validateClass(java.lang.Class)": "/**\n* Validates and caches a class of exception if not already known.\n* @param exceptionClass the exception class to validate\n*/"
    },
    "com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl": {
        "com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl:remove(java.lang.Object)": "/**\n* Removes and returns values for the given key from the collection.\n* @param key the key to remove values for\n* @return collection of removed values or null if none found\n*/"
    },
    "com.google.common.collect.ListMultimap": {
        "com.google.common.collect.ListMultimap:removeAll(java.lang.Object)": "/**\n* Removes all mappings for the specified key.\n* @param key the key whose mappings are to be removed\n* @return list of removed values\n*/"
    },
    "com.google.common.collect.TableCollectors$ImmutableTableCollectorState": {
        "com.google.common.collect.TableCollectors$ImmutableTableCollectorState:put(java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)": "/**\n* Inserts or merges a value in the table at specified row and column.\n* @param row the row position; @param column the column position; \n* @param value the value to insert or merge; @param merger function to combine values\n*/",
        "com.google.common.collect.TableCollectors$ImmutableTableCollectorState:combine(com.google.common.collect.TableCollectors$ImmutableTableCollectorState,java.util.function.BinaryOperator)": "/**\n* Combines another table state into this one using a merger function.\n* @param other the state to combine; @param merger function to combine values\n* @return this updated table state\n*/",
        "com.google.common.collect.TableCollectors$ImmutableTableCollectorState:toTable()": "/**\n* Converts insertion order to an ImmutableTable.\n* @return ImmutableTable constructed from the insertionOrder collection\n*/"
    },
    "com.google.common.collect.Interners$InternerImpl": {
        "com.google.common.collect.Interners$InternerImpl:<init>(com.google.common.collect.MapMaker)": "/**\n* Initializes InternerImpl with a MapMaker using equals for key equivalence.\n* @param mapMaker configuration for creating the internal map\n*/",
        "com.google.common.collect.Interners$InternerImpl:intern(java.lang.Object)": "/**** Interns a sample object, returning its canonical form or the sample if absent.  \n* @param sample the object to intern  \n* @return the canonical object or the sample itself if not found  \n*/"
    },
    "com.google.common.collect.ImmutableRangeMap$2": {
        "com.google.common.collect.ImmutableRangeMap$2:asDescendingMapOfRanges()": "/**\n* Returns an ImmutableMap of ranges in descending order.\n* @return ImmutableMap with ranges as keys and corresponding values\n*/",
        "com.google.common.collect.ImmutableRangeMap$2:subRangeMap(com.google.common.collect.Range)": "/**\n* Returns a subrange map for the specified range.\n* @param range the range to create a subrange map for\n* @return ImmutableRangeMap for the specified range or empty if no match\n*/"
    },
    "com.google.common.graph.AbstractBaseGraph$2": {
        "com.google.common.graph.AbstractBaseGraph$2:iterator()": "/**\n* Returns an unmodifiable iterator over the elements.\n* @return UnmodifiableIterator of type E\n*/"
    },
    "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry": {
        "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry:setValue(java.lang.Object)": "/**\n* Sets the value for the current key and returns the old value.\n* @param newValue the new value to associate with the key\n* @return previous value associated with the key\n*/"
    },
    "com.google.common.collect.RowSortedTable": {
        "com.google.common.collect.RowSortedTable:rowMap()": "/**\n* Returns an unmodifiable view of the row map.\n* @return SortedMap of rows mapped to unmodifiable column maps\n*/"
    },
    "com.google.common.collect.SortedSetMultimap": {
        "com.google.common.collect.SortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)": "/**\n* Replaces values for a specified key in a thread-safe manner.\n* @param key the key whose values are to be replaced\n* @param values the new values to associate with the key\n* @return SortedSet of replaced values\n*/"
    },
    "com.google.common.reflect.TypeResolver$WildcardCapturer$1": {
        "com.google.common.reflect.TypeResolver$WildcardCapturer$1:captureAsTypeVariable(java.lang.reflect.Type[])": "/**\n* Creates a TypeVariable from upper bounds.\n* @param upperBounds array of upper bound types\n* @return new TypeVariable instance with generated name\n*/"
    },
    "com.google.common.collect.FilteredEntryMultimap$Keys$1": {
        "com.google.common.collect.FilteredEntryMultimap$Keys$1:removeEntriesIf(com.google.common.base.Predicate)": "/**\n* Removes entries based on a predicate.\n* @param predicate condition to evaluate entries\n* @return true if any entry was removed or modified\n*/"
    },
    "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1": {
        "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1:remove(java.lang.Object)": "/**\n* Removes value by key if present and returns it.\n* @param key the key to remove the associated value\n* @return removed value or null if not found\n*/"
    },
    "com.google.common.util.concurrent.ClosingFuture$Combiner": {
        "com.google.common.util.concurrent.ClosingFuture$Combiner:<init>(boolean,java.lang.Iterable)": "/****\n* Constructs a Combiner with input futures.\n* @param allMustSucceed true if all inputs must succeed\n* @param inputs iterable of ClosingFuture elements\n*/",
        "com.google.common.util.concurrent.ClosingFuture$Combiner:inputFutures()": "/**\n* Converts input collection to an ImmutableList of FluentFuture objects.\n* @return ImmutableList of transformed FluentFuture elements\n*/",
        "com.google.common.util.concurrent.ClosingFuture$Combiner:futureCombiner()": "/**\n* Creates a FutureCombiner based on success criteria.\n* @return FutureCombiner for managing input futures\n*/",
        "com.google.common.util.concurrent.ClosingFuture$Combiner:call(com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable,java.util.concurrent.Executor)": "/**\n* Executes a combining callable and returns a ClosingFuture.\n* @param combiningCallable callable to combine inputs\n* @param executor for task execution\n* @return ClosingFuture containing the result\n*/",
        "com.google.common.util.concurrent.ClosingFuture$Combiner:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable,java.util.concurrent.Executor)": "/**\n* Executes an asynchronous task and returns a ClosingFuture.\n* @param combiningCallable task to execute asynchronously\n* @param executor executor for task execution\n* @return ClosingFuture containing the task result\n*/"
    },
    "com.google.common.reflect.TypeToken$2": {
        "com.google.common.reflect.TypeToken$2:getGenericReturnType()": "/**\n* Returns the generic return type of the declaring class.\n* @return Type representing the generic return type or class itself\n*/",
        "com.google.common.reflect.TypeToken$2:getGenericParameterTypes()": "/**\n* Retrieves generic parameter types, excluding hidden 'this' if applicable.\n* @return array of Type objects representing parameter types\n*/",
        "com.google.common.reflect.TypeToken$2:getGenericExceptionTypes()": "/**\n* Retrieves generic exception types of the constructor.\n* @return array of Type representing generic exceptions\n*/",
        "com.google.common.reflect.TypeToken$2:toString()": "/**\n* Returns string representation of the object's runtime type.\n* @return string of the runtime type\n*/"
    },
    "com.google.common.reflect.TypeResolver$TypeTable$1": {
        "com.google.common.reflect.TypeResolver$TypeTable$1:resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable)": "/**\n* Resolves a TypeVariable, returning either the original or a new TypeVariable with resolved bounds.\n* @param var TypeVariable to resolve\n* @param forDependants TypeTable for dependent types\n* @return resolved Type or original TypeVariable\n*/"
    }
}