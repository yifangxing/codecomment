1 Returns the internal entry for the specified key. The entry may be loading, expired, or partially collected.
2 This method is a convenience for testing. Code should call {@link Segment#getLiveValue} instead.
3 Returns a newly inserted {@code LoadingValueReference}, or null if the live value reference is already loading.
4 Performs routine cleanup following a read. Normally cleanup happens during writes. If cleanup is not observed after a sufficient number of reads, try cleaning up from the read thread.
5 Resolves {@code var} using the encapsulated type mapping. If it maps to yet another non-reified type or has bounds, {@code forDependants} is used to do further resolution, which doesn't try to resolve any type variable on generic declarations that are already being resolved. <p>Should only be called and overridden by {@link #resolve(TypeVariable)}.
6 Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a combining function to their values. The function can use a {@link DeferredCloser} to capture objects to be closed when the pipeline is done. <p>If this combiner was returned by a {@link #whenAllSucceed} method and any of the inputs fail, so will the returned step. <p>If the combiningCallable throws a {@code CancellationException}, the pipeline will be cancelled. <p>If the combiningCallable throws an {@code ExecutionException}, the cause of the thrown {@code ExecutionException} will be extracted and used as the failure of the derived step.
7 Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a {@code ClosingFuture}-returning function to their values. The function can use a {@link DeferredCloser} to capture objects to be closed when the pipeline is done (other than those captured by the returned {@link ClosingFuture}). <p>If this combiner was returned by a {@link #whenAllSucceed} method and any of the inputs fail, so will the returned step. <p>If the combiningCallable throws a {@code CancellationException}, the pipeline will be cancelled. <p>If the combiningCallable throws an {@code ExecutionException}, the cause of the thrown {@code ExecutionException} will be extracted and used as the failure of the derived step. <p>If the combiningCallable throws any other exception, it will be used as the failure of the derived step. <p>If an exception is thrown after the combiningCallable creates a {@code ClosingFuture}, then none of the closeable objects in that {@code ClosingFuture} will be closed. <p>Usage guidelines for this method: <ul> <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a {@code ClosingFuture}. If possible, prefer calling {@link #call(CombiningCallable, Executor)} instead, with a function that returns the next value directly. <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()} for every closeable object this step creates in order to capture it for later closing. <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code ClosingFuture} call {@link #from(ListenableFuture)}. </ul> <p>The same warnings about doing heavyweight operations within {@link ClosingFuture#transformAsync(AsyncClosingFunction, Executor)} apply here.
8 Attempts to return a {@code HostSpecifier} for the given string, throwing an exception if parsing fails. Always use this method in preference to {@link #fromValid(String)} for a specifier that is not already known to be valid. @throws ParseException if the specifier is not valid.
9 Determines whether {@code specifier} represents a valid {@link HostSpecifier} as described in the documentation for {@link #fromValid(String)}.
10 Returns the {@linkplain #isPublicSuffix() public suffix} portion of the domain name, or {@code null} if no public suffix is present. @since 6.0
11 Returns the portion of this domain name that is one level beneath the {@linkplain #isPublicSuffix() public suffix}. For example, for {@code x.adwords.google.co.uk} it returns {@code google.co.uk}, since {@code co.uk} is a public suffix. Similarly, for {@code myblog.blogspot.com} it returns the same domain, {@code myblog.blogspot.com}, since {@code blogspot.com} is a public suffix. <p>If {@link #isTopPrivateDomain()} is true, the current domain name instance is returned. <p>This method can be used to determine the probable highest level parent domain for which cookies may be set, though even that depends on individual browsers' implementations of cookie controls. @throws IllegalStateException if this domain does not end with a public suffix @since 6.0
12 Returns the {@linkplain #isRegistrySuffix() registry suffix} portion of the domain name, or {@code null} if no registry suffix is present. @since 23.3
13 Returns the portion of this domain name that is one level beneath the {@linkplain #isRegistrySuffix() registry suffix}. For example, for {@code x.adwords.google.co.uk} it returns {@code google.co.uk}, since {@code co.uk} is a registry suffix. Similarly, for {@code myblog.blogspot.com} it returns {@code blogspot.com}, since {@code com} is a registry suffix. <p>If {@link #isTopDomainUnderRegistrySuffix()} is true, the current domain name instance is returned. <p><b>Warning:</b> This method should not be used to determine whether a domain is probably the highest level for which cookies may be set. Use {@link #isTopPrivateDomain()} for that purpose. @throws IllegalStateException if this domain does not end with a registry suffix @since 23.3
14 Returns an {@code InternetDomainName} that is the immediate ancestor of this one; that is, the current domain with the leftmost part removed. For example, the parent of {@code www.google.com} is {@code google.com}. @throws IllegalStateException if the domain has no parent, as determined by {@link #hasParent}
15 Returns a {@link Collector} that accumulates elements into an {@code ImmutableListMultimap} whose keys and values are the result of applying the provided mapping functions to the input elements. <p>For streams with defined encounter order (as defined in the Ordering section of the {@link java.util.stream} Javadoc), that order is preserved, but entries are <a href="ImmutableMultimap.html#iteration">grouped by key</a>. <p>Example: {@snippet : static final Multimap<Character, String> FIRST_LETTER_MULTIMAP = Stream.of("banana", "apple", "carrot", "asparagus", "cherry") .collect(toImmutableListMultimap(str -> str.charAt(0), str -> str.substring(1))); // is equivalent to static final Multimap<Character, String> FIRST_LETTER_MULTIMAP = new ImmutableListMultimap.Builder<Character, String>() .put('b', "anana") .putAll('a', "pple", "sparagus") .putAll('c', "arrot", "herry") .build(); } @since 21.0
16 Returns an immutable multimap containing a single entry.
17 Returns an immutable multimap containing the given entries, in order.
18 Returns an immutable multimap containing the given entries, in the "key-grouped" insertion order described in the <a href="#iteration">class documentation</a>.
19 Returns an immutable multimap containing the given entries, in the "key-grouped" insertion order described in the <a href="#iteration">class documentation</a>.
20 Returns an immutable multimap containing the given entries, in the "key-grouped" insertion order described in the <a href="#iteration">class documentation</a>.
21 Returns an immutable multimap containing the specified entries. The returned multimap iterates over keys in the order they were first encountered in the input, and the values for each key are iterated in the order they were encountered. @throws NullPointerException if any key, value, or entry is null @since 19.0
22 {@inheritDoc} <p>Because an inverse of a list multimap can contain multiple pairs with the same key and value, this method returns an {@code ImmutableListMultimap} rather than the {@code ImmutableMultimap} specified in the {@code ImmutableMultimap} class. @since 11.0
23 Creates an index {@code ImmutableListMultimap} that contains the results of applying a specified function to each item in an {@code Iterable} of values. Each value will be stored as a value in the resulting multimap, yielding a multimap with the same size as the input iterable. The key used to store that value in the multimap will be the result of calling the function on that value. The resulting multimap is created as an immutable snapshot. In the returned multimap, keys appear in the order they are first encountered, and the values corresponding to each key appear in the same order as they are encountered. <p>For example, {@snippet : List<String> badGuys = Arrays.asList("Inky", "Blinky", "Pinky", "Pinky", "Clyde"); Function<String, Integer> stringLengthFunction = ...; Multimap<Integer, String> index = Multimaps.index(badGuys, stringLengthFunction); System.out.println(index); } <p>prints {@snippet : {4=[Inky], 6=[Blinky], 5=[Pinky, Pinky, Clyde]} } <p>The returned multimap is serializable if its keys and values are all serializable. @param values the values to use when constructing the {@code ImmutableListMultimap} @param keyFunction the function used to produce the key for each value @return {@code ImmutableListMultimap} mapping the result of evaluating the function {@code keyFunction} on each value in the input collection to that value @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code keyFunction} produces {@code null} for any key
24 <em>Replaces</em> all parameters with the given attribute with a single parameter with the given value. If multiple parameters with the same attributes are necessary use {@link #withParameters(String, Iterable)}. Prefer {@link #withCharset} for setting the {@code charset} parameter when using a {@link Charset} object. @throws IllegalArgumentException if either {@code attribute} or {@code value} is invalid
25 <em>Replaces</em> all parameters with the given parameters. @throws IllegalArgumentException if any parameter or value is invalid
26 Creates a new media type with the given type and subtype. @throws IllegalArgumentException if type or subtype is invalid or if a wildcard is used for the type, but not the subtype.
27 Parses a media type from its string representation. @throws IllegalArgumentException if the input is not parsable
28 Constructs a new instance for managing the given services. @param services The services to manage @throws IllegalArgumentException if not all services are {@linkplain State#NEW new} or if there are any duplicate services.
29 Returns a {@code Collector} accumulating entries into an {@code ImmutableSetMultimap}. Each input element is mapped to a key and a stream of values, each of which are put into the resulting {@code Multimap}, in the encounter order of the stream and the encounter order of the streams of values. <p>Example: {@snippet : static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP = Stream.of("banana", "apple", "carrot", "asparagus", "cherry") .collect( flatteningToImmutableSetMultimap( str -> str.charAt(0), str -> str.substring(1).chars().mapToObj(c -> (char) c)); // is equivalent to static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP = ImmutableSetMultimap.<Character, Character>builder() .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a')) .putAll('a', Arrays.asList('p', 'p', 'l', 'e')) .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't')) .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's')) .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y')) .build(); // after deduplication, the resulting multimap is equivalent to static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP = ImmutableSetMultimap.<Character, Character>builder() .putAll('b', Arrays.asList('a', 'n')) .putAll('a', Arrays.asList('p', 'l', 'e', 's', 'a', 'r', 'g', 'u')) .putAll('c', Arrays.asList('a', 'r', 'o', 't', 'h', 'e', 'y')) .build(); } } @since 21.0
30 Resolves the given {@code type} against the type context represented by this type. For example: {@snippet : new TypeToken<List<String>>() {}.resolveType( List.class.getMethod("get", int.class).getGenericReturnType()) => String.class }
31 Creates a new min-max priority queue with default settings: natural order, no maximum size, no initial contents, and an initial expected size of 11.
