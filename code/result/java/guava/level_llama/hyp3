1 Creates an Optional instance with the given non-null value. @param reference the object to be wrapped
2 Creates an unstarted Stopwatch instance with the given Ticker. @param ticker unique identifier for time measurement
3 Finds the index of the first element in an iterable matching a given predicate. @param iterable Iterable to search @param predicate Function to evaluate elements against @return Index of matching element, or -1 if not found
4 Checks if an iterator contains at least one element matching a given predicate. @param iterator Iterator to search @param predicate Predicate function to evaluate elements against @return true if any element matches the predicate, false otherwise
5 Returns a natural ordering builder for sorted set multimaps with default comparator.
6 Transforms input elements into ImmutableTable format using provided functions. @param rowFunction function to extract table rows from input @param columnFunction function to extract table columns from input @param valueFunction function to extract table values from input @param mergeFunction function to merge duplicate table values
7 Returns a predicate that checks equivalence to the given target object. @param target nullable target object for comparison
8 Creates a function that returns values from the provided map with default value. @param map input map @param defaultValue default value to return for missing keys
9 Composes two functions by applying the output of the first function (f) to the input of the second function (g). @param g the output of which is used as input for the composed function @param f the input function whose output serves as input for the composed function
10 Creates a function from a non-null input map. @param map the input map to validate and store
11 Initializes a new splitter instance with a custom delimiter pattern. @param separatorPattern regular expression pattern for splitting
12 Initializes Joiner with custom separator. @param separator string to separate joined elements
13 Creates a Joiner instance with a custom separator character. @param separator single character to separate joined elements
14 Configures the Joiner to display null values as a custom string. @param nullText text to display for null elements
15 Configures splitter to split based on a regular expression pattern. @param separatorPattern input string containing the compilation pattern
16 Creates a predicate that checks if CharSequence matches the specified regex pattern. @param pattern regex Pattern object to evaluate against
17 Negates a given predicate. @param predicate original predicate to negate
18 Combines predicates from an iterable into a single AND predicate. @param components iterable of component predicates
19 Combines multiple predicates using logical OR operation. @param components iterable of component predicates
20 Splits the input sequence into a map of key-value pairs based on specified delimiters. @param sequence character sequence to split
21 Converts the result of splitting a CharSequence into a Stream.
22 Creates a memoized supplier from the provided delegate. @param delegate Supplier instance to cache values from
23 Composes a transformation function with a supplier. @param function the function to apply to the supplier's value @param supplier the supplier providing input for the function
24 Creates a thread-safe supplier by wrapping the given delegate. @param delegate Supplier of object to be retrieved; must not be null
25 Propagates the specified exception type if it's an instance of the given class. @param throwable the exception to check @param declaredType the expected exception class
26 Propagates unchecked Throwable, throwing it if possible. @param throwable nullable exception to propagate
27 Propagates the given Throwable as a RuntimeException. @param throwable exception to propagate
28 Retrieves a list of stack trace elements from the given throwable. If lazy stack trace is enabled, uses jlaStackTrace; otherwise, returns an unmodifiable list of the throwable's stack trace. @param throwable input throwable @return List of StackTraceElement or empty list if lazy is disabled
29 Creates a new cache entry with the given key and hash. @param key unique cache identifier @param hash cached value's hash code @param next optional reference to the previous entry in the segment
30 Creates a RemovalNotification with specified key, value and removal cause. @param key nullable cache key @param value nullable removed cache value @param cause non-null reason for the removal
31 Creates a multiset collector from a stream of data. @param elementFunction function to extract elements @param countFunction function to extract counts @param multisetSupplier supplier for the resulting multiset
32 Creates a Multimap collector from a stream of data. @param keyFunction maps each element to its key @param valueFunction maps each element to its value @param multimapSupplier provides the initial Multimap instance
33 Creates a collector that accumulates elements into an immutable Multimap. @param keyFunction function to extract the key from each element @param valueFunction function to generate a stream of values for each element @param multimapSupplier supplier for creating the underlying Multimap
34 Creates a transformed collection view from the given source collection and mapping function. @param fromCollection original collection to transform @param function mapping function to apply to each element
35 Checks if an iterable contains a specified object. @param iterable the iterable to search @param element the object to find in the iterable @return true if found, false otherwise
36 Returns a contiguous set containing elements up to and optionally including the specified element. @param toElement upper bound of the returned set @param inclusive whether to include the toElement in the result
37 Returns the tail set of contiguous elements starting from the specified element. @param fromElement starting element @param inclusive whether to include the start element in the result
38 Adds an element to the queue, potentially removing the oldest one due to size constraints. @param e the new element to add
39 Configures key ordering using the specified comparator. @param keyComparator comparator to sort keys by
40 Configures key ordering using the specified comparator. @param keyComparator comparator to sort keys by
41 Sets a custom comparator to order multimap values. @param valueComparator Comparator for ordering values; nulls are allowed
42 Adds an element to the multiset. @param element the element to be added
43 Adds specified copies of an element to the multiset. @param element element to add @param occurrences number of copies to add
44 Sets the specified count for an element in the multiset. @param element element to modify @param count new count value
45 Creates an immutable sorted multiset from a collection using the provided comparator. @param comparator custom ordering comparator for elements of type E
46 Returns a view of elements in this set strictly less than {@code toElement}. @param toElement upper bound (exclusive)
47 Returns a view of elements in this set that are greater than or equal to the specified element. @param fromElement lower bound (inclusive if positive, exclusive if negative)
48 Cycles through elements of the underlying iterable. @return FluentIterable object with cycled elements
49 Filters iterable elements based on the given predicate. @param predicate condition to apply for filtering
50 Filters an iterable collection to only include elements of a specific type. @param unfiltered original iterable to filter @param desiredType target class to check against @return Iterable of elements that match the desired type
51 Applies a transformation function to each element of the iterable. @param function mapping function to apply to each element
52 Creates a PeekingIterator instance from an existing Iterator. @param iterator input iterator to wrap
53 Removes all specified elements from the given iterable. @param removeFrom iterable to modify @param elementsToRemove collection of elements to remove @return true if any elements were removed, false otherwise
54 Removes elements from iterable that match the given predicate. @param removeFrom iterable to modify @param predicate condition to apply for removal @return true if any element was removed, false otherwise
55 Retains only specified elements in the iterable collection. @param removeFrom iterable collection to modify @param elementsToRetain collection of elements to retain @return true if any elements were removed, false otherwise
56 Delegates adding all elements from the given collection to this collection. @param collection Collection containing elements to add
57 Adds all elements from the given iterable to the specified collection. @param addTo Collection to add elements to @param elementsToAdd Iterable of elements to add @return true if any elements were added, false otherwise
58 Creates a new ArrayList instance and populates it with elements from the given iterator. @param elements Iterator of elements to add
59 Creates a hash set from an iterator of elements. @param elements Iterator of elements to add
60 Filters an iterator based on a class type predicate. @param unfiltered original iterator @param desiredType target class to check against @return filtered UnmodifiableIterator or null if empty
61 Checks if all elements in an iterable match a given predicate. @param iterable iterable to evaluate @param predicate predicate function to apply to each element
62 Finds the first element in an iterable that satisfies a given predicate. @param iterable collection to search @param predicate condition to match
63 Removes all nodes associated with the given key. @param key unique identifier for the key to remove
64 Wraps the given list and returns a list iterator starting at the specified index. @param list the backing list @param index the start position of the iterator
65 Creates a list with an initial element and optional additional elements. @param first mandatory initial element @param rest array of optional additional elements (validated by checkNotNull)
66 Applies a transformation function to each element in the given list. @param fromList original list to transform @param function function to apply to each element
67 Creates a list with two predefined elements and an additional array. @param first The first predefined element @param second The second predefined element @param rest Array of additional elements (checked for null)
68 Creates a map from a set and key-value mapping function. @param set underlying set of keys @param function function to map keys to values
69 Creates a navigable map view from the specified set and mapping function. @param set underlying navigable set @param function function to apply to each key, yielding its value
70 Transforms the key-value pairs of a map using an entry transformer. @param fromMap source map to transform @param transformer transformation function for key-value pairs @return transformed map with updated values
71 Checks if a map collection contains the given entry. @param c Collection of Map entries to search @param o Entry object to look for
72 Removes a specific map entry from the given collection. @param c Collection of entries to remove from @param o Entry object to be removed, null if not found
73 Returns the occurrence count of the specified element. @param element nullable element to query @return count or 0 if not found in multiset
74 Removes exactly 'occurrences' occurrences of the specified element from the multiset. @param element element to remove @param occurrences number of occurrences to remove (must be positive)
75 Sets the count of an element in the multiset. @param element element to update @param count new count value @return old count value, or 0 if removed
76 Updates the count of an element in the multiset. @param element the element to update @param expectedOldCount the expected old count @param newCount the new count @return true if the operation was successful, false otherwise
77 Removes values associated with the given key. @param key nullable key to remove
78 Configures the MultimapBuilder to use a natural ordering for comparable elements.
79 Converts a map to a unmodifiable set multimap. @param map the underlying map to be wrapped
80 Transforms entries in a multimap using the provided transformation function. @param fromMap source multimap to transform @param transformer entry transformation function
81 Adds all elements from an iterable to the builder. @param elements Iterable of elements to be added
82 Adds all elements from the given multiset to this one. @param self this multiset @param elements multiset containing elements to add
83 Retains specified occurrences in the provided Multiset. @param multisetToModify the Multiset to be modified @param multisetToRetain the occurrences to retain in the Multiset @return true if changes were made, false otherwise
84 Removes occurrences of elements from one multiset in another. @param multisetToModify the multiset to modify @param occurrencesToRemove the multiset or iterable containing elements to remove
85 Retains all elements present in the provided collection. @param elementsToRetain Collection of elements to retain @return true if retention operation was successful, false otherwise
86 Drains a specified number of elements from the blocking queue into the provided collection. @param q BlockingQueue to drain from @param buffer Collection to add drained elements to @param numElements Number of elements to drain @param timeout Timeout duration in nanoseconds @return Number of elements successfully added to the buffer
87 Drains elements from a blocking queue into a collection with interruptible handling and timeouts. @param q the blocking queue to drain from @param buffer the collection to add drained elements to @param numElements the maximum number of elements to drain @param timeout the duration to wait for additional elements (converted to nanoseconds)
88 Checks if the given value lies within this range. @param input object to check for containment
89 Checks if all values from the given iterable collection lie within this range. @param values iterable to check
90 Applies a BiConsumer to each pair of elements from two input streams. @param streamA first input stream @param streamB second input stream @param consumer BiConsumer to apply to each pair of elements
91 Builds a Collector for transforming input elements into an ImmutableTable. @param rowFunction function to apply to each element, returning the row key @param columnFunction function to apply to each element, returning the column key @param valueFunction function to apply to each element, returning the table cell value @param mergeFunction binary operator for merging duplicate entries in the table @param tableSupplier supplier of the ImmutableTable to collect into
92 Transforms table values using the given function. @param fromTable original table to transform @param function transformation function applied to each value
93 Returns the transposed Table object. @param table the original two-dimensional Table to transpose
94 Creates an escaper map from a given character replacement map. @param replacements Map of characters to their replacements
95 Adds multiple character escape mappings to the builder. @param cs array of characters to be escaped @param r replacement string for each character in cs
96 Finds the next Unicode escape index in a character sequence. @param csq input character sequence @param start starting position @param end end of the valid range @return next escape index or the provided end if none found
97 Creates SubscriberExceptionContext instance with given event.
98 Creates a sequential funnel for iterables of elements processed by the given element funnel. @param elementFunnel funnel to process individual elements
99 Converts primitive sink to output stream. @param sink PrimitiveSink instance
100 Creates a funnel for strings with the specified character set. @param charset non-null Charset instance
101 Converts an Appendable to a Writer, or returns the target if it's already a Writer. @param target nullable Appendable object to convert
102 Decodes a CharSequence into a byte array using checked decoding. @throws DecodingException if decoding fails
103 Creates a new Closer instance with default exception suppression behavior.
104 Initializes the filter with a specified string regular expression pattern. @param patternStr regex pattern to match file names against
105 Calculates the base-2 logarithm of a BigInteger value. @param x the input BigInteger @param mode the rounding mode to apply @return the integer part of the logarithm, or throws an assertion error if invalid
106 Parses a string representation of an unsigned byte value. @param string string to parse
107 Parses a string as an unsigned int with default radix of 10. @param s input string to parse
108 Creates a TypeVariableKey instance from the given type, or returns null if not applicable. @param t the input type to evaluate
109 Retrieves the value of a ListenableFuture. @param future Future object containing the computation result
110 Initializes schedule with specified delay. @param delay duration to wait before executing tasks
111 Creates an instance of AtomicLongMap with an empty ConcurrentHashMap.
112 Accumulates and updates atomic long value associated with a given key. @param key unique map key @param x value to accumulate @param accumulatorFunction function to apply for accumulation and updating the value @return updated long value or null if not found
113 Accumulates a value associated with the given key using the provided function. @param key unique map key @param x accumulation value @param accumulatorFunction binary operator to compute new accumulated value
114 Sets value associated with given key to specified new value. @param key unique map key @param newValue new long value to set
115 Adds a closeable resource to be closed using the specified executor. @param closeable AutoCloseable item to be added @param closingExecutor Executor for asynchronous processing
116 Creates a new instance of the factory with a specified locking policy. @param policy locking policy to utilize
117 Creates a sequential executor instance wrapping the specified delegate. @param delegate underlying executor service
118 Creates a SimpleTimeLimiter instance with the given ExecutorService. @param executor service to manage task execution
119 Joins the specified thread uninterruptibly with a given duration timeout. @param toJoin thread to join @param timeout time interval in Duration
120 Returns an ElementOrder instance with UNORDERED type.
121 Creates an ordered collection with stable ordering.
122 Creates an instance of ElementOrder with INSERTION type ordering.
123 Returns a natural ordering for comparable elements. @return ElementOrder instance for default sort order
124 Creates an ordered element order with a custom comparator. @param comparator the sorting comparator; must not be null
125 Initializes a latch to be triggered upon closure of all resources. @return CountDownLatch object
126 Converts a CharSequence to lowercase, handling both string and character sequences. @param chars the input sequence of characters
127 Converts a CharSequence or String to uppercase ASCII representation. @param chars input sequence of characters
128 Serializes paired statistical data to a byte array. @return byte array representation of the statistics
129 Converts this Stats object into a byte array.
130 Initializes the compact hash map with a specified expected size. @param expectedSize initial capacity of the hash map
131 Initializes the set with an estimated size. @param expectedSize initial capacity estimate @throws IllegalArgumentException if invalid size provided
132 Combines this matcher with another to form an AND matcher. @param other second CharMatcher
133 Creates a CharMatcher from a custom character filter. @param predicate predicate to evaluate characters against
134 Combines this matcher with another to create an "Or" character matcher.
135 Creates a character matcher for a specified range (inclusive). @param startInclusive the starting character (inclusive) @param endInclusive the ending character (inclusive)
136 Computes difference of two cache performance metrics. @param other another CacheStats object @return new CacheStats with subtracted values
137 Adds two cache statistics objects and returns a new CacheStats object with the combined metrics. @param other CacheStats object to add to this instance
138 Initializes multimap from an empty map. @param map empty map to initialize from
139 Initializes multimap from an empty map. @param map empty map to initialize from
140 Returns a contiguous subset of this set within the specified range. @param fromElement start element (inclusive/exclusive) @param fromInclusive whether start is inclusive @param toElement end element (inclusive/exclusive) @param toInclusive whether end is inclusive
141 Creates an EnumMultiset instance for a specified enum class. @param type the target enum class
142 Returns a subset of this sorted set from {@code fromElement} (inclusive) up to but not including {@code toElement}. @param fromElement starting element @param toElement ending element
143 Partitions the input iterator into chunks of specified size. @param iterator input iterator to partition @param size chunk size
144 Partitions the given iterator into chunks of specified size with padding. @param iterator input iterator to partition @param size chunk size @return UnmodifiableIterator over List of partitioned elements
145 Configures the MinMaxPriorityQueue with an expected size. @param expectedSize non-negative integer
146 Sets the maximum size of the MinMaxPriorityQueue with a natural ordering. @param maximumSize non-negative integer
147 Initializes AbstractStreamingHasher with default buffer and chunk sizes.
148 Calculates the population variance of the dataset. @return Population variance value or NaN if invalid
149 Calculates sample variance. @return sample variance or NaN if sum of squares is invalid
150 Calculates population variance. @return Population variance or NaN if sum of squares is invalid
151 Calculates the sample variance of accumulated data. @return Sample variance or NaN if sum of squares is invalid
152 Creates a CharMatcher that matches any of the characters in the specified sequence. @param sequence input character sequence
153 Trims and collapses character sequence by replacing non-matching characters with a specified replacement char. @param sequence CharSequence to process @param replacement replacement character for non-matches @return collapsed string as String result
154 Wraps objects with a custom equivalence strategy using the provided function. @param function mapping function to apply for comparison
155 Creates a pairwise equivalence strategy for iterable objects. @return PairwiseEquivalence instance, wrapping this equivalence strategy
156 Compares two iterables for element equality. @param iterable1 first iterable to compare @param iterable2 second iterable to compare @return true if both iterables are equal, false otherwise
157 Checks if two lists are equal. @param thisList the list to compare @param other nullable object to validate (may be a List) @return true if both lists contain the same elements, false otherwise
158 Creates a new instance of the ConcurrentHashMultiset with an initially empty backing map.
159 Creates a ConcurrentHashMultiset instance from an existing element counts map. @param countMap the initial state of the multiset's element counts
160 Joins iterable elements to an Appendable with customizable separator. @param appendable target Appendable @param parts iterator of elements to join @return the modified Appendable or throws IOException if occurs
161 Appends iterable elements to a StringBuilder with customizable separator. @param builder target StringBuilder @param parts iterator of elements to append @return the modified StringBuilder or throws IOException if occurs
162 Appends map entries to a StringBuilder. @param builder target StringBuilder @param map input map containing key-value pairs
163 Joins map entries into a string representation. @param entries iterable of key-value pairs
164 Adds a new unconditional value holder with the specified value. @param value value to be added, or null for no value
165 Adds a named value holder with optional value. @param name unique identifier for the value @param value nullable object to associate with the name
166 Adds a boolean value to the string representation. @param value boolean value to be held
167 Adds an unconditional string representation of a character.
168 Adds a double value to the string representation. @param value the double value to be added
169 Adds an unconditional float value to the string representation. @param value float value to be held
170 Adds an unconditional integer value holder with the specified value. @param value integer to be held
171 Adds an unconditional holder with the specified numeric value.
172 Adds a conditional value holder with a specified name and boolean value. @param name unique identifier for the value @param value boolean value to be stored in the collection
173 Adds an unconditional character holder to the collection with a specified name and value. @param name unique identifier for the character @param value character to be stored in the collection as a string
174 Adds an unconditional holder with a specified name and numeric value. @param name unique identifier for the value @param value numerical object to be stored in the collection
175 Adds a float value to the collection with a specified name. @param name unique identifier for the value @param value floating-point number to be stored in the collection
176 Adds an unconditional integer value holder with specified name and value. @param name unique identifier for the value @param value integer to be stored in the collection
177 Adds an unconditional value holder to the collection with a specified name and numeric value. @param name unique identifier for the value @param value numeric object to be stored in the collection as a string representation.
178 Creates an Optional instance for a potentially null value. @param nullableReference the reference to wrap, or null if absent
179 Initializes an empty iterable collection.
180 Returns an optional byte count if available. @return Optional<Long> containing the byte count or absent if unknown
181 Returns the length of the character source if known. @return Optional.Long instance with length or absent if unknown
182 Returns null if input string is null or empty; otherwise returns original string. @param string input string to evaluate
183 Parses a string in the format "host[:port]" and returns a HostAndPort instance. @param hostPortString input string
184 Skips a specified number of elements from the beginning of an iterable. @param numberToSkip count of elements to skip (must be non-negative)
185 Limits the number of elements in this iterable to a specified size. @param maxSize maximum number of elements to include
186 Retrieves an element from an iterable at a specified position or returns a default value if exhausted. @param iterable iterable collection to fetch from @param position index of the desired element (must be non-negative) @param defaultValue value to return if iterable is empty or position is out of bounds @return element at the specified position or default value
187 Retrieves an element from the given iterator at a specified non-negative index. @param iterator iterator to access @param position index of desired element
188 Retrieves an element from an iterator at a specified non-negative index. @param iterator iterator to fetch from @param position index of desired element (must be >= 0) @param defaultValue value to return if iterator is empty or exhausted @return element at specified index, or default value if not found
189 Creates a traverser for file structures. @return Traverser instance representing the file tree
190 Limits input stream to specified byte count. @param in underlying input stream @param limit maximum number of bytes that can be read from this stream
191 Creates an IPv4 InetAddress from a BigInteger representation. @param address the BigInteger to convert
192 Creates an IPv6 InetAddress from a BigInteger representation. @param address the BigInteger to convert
193 Creates a SIP-24 hash function instance with given keys. @param k0 first key value @param k1 second key value
194 Initializes FileBackedOutputStream with specified memory threshold. @param fileThreshold non-negative memory limit before switching to file storage
195 Converts an integer value into an IPv4 Inet4Address object. @param address the integer value to convert
196 Reserves a specified number of permits and returns wait time until they're available. @param permits number of permits to validate and acquire
197 Tries to acquire a specified number of permits within a given time window. @param permits number of permits to validate @param timeout maximum allowed wait time in the specified unit @param unit unit of time for the timeout value (e.g. TimeUnit.SECONDS) @return true if permits can be acquired, false otherwise
198 Serializes Bloom filter to output stream, including strategy and bitset data. @param out the OutputStream to write to
199 Creates a fixed-delay scheduler with specified timing configuration. @param initialDelay time to wait before first execution @param delay interval between subsequent executions
200 Creates a fixed-rate schedule with specified timing parameters. @param initialDelay time to wait before first execution @param period interval between subsequent executions
201 Converts a duration from the specified unit to nanoseconds, constraining it within a safe range. @param time duration in specified unit @param unit TimeUnit object specifying the unit of time
202 Creates and starts a stopwatch with the given Ticker instance. @param ticker unique identifier for time measurement
203 Configures the Builder to order entries by their associated values. @param valueComparator comparator for ordering values
204 Sets the desired concurrency level for thread-safe operations. @param concurrencyLevel positive integer value
205 Configures cache expiration after write operation based on input duration. @param duration non-negative time duration
206 Sets cache expiration after last access to specified duration. @param duration positive time span
207 Configures the cache to refresh after each write operation based on a given time duration. @param duration positive time duration for refresh
208 Sets cache key strength to Weak. @return this CacheBuilder instance for chaining
209 Sets cache value strength to Weak. @return updated CacheBuilder instance
210 Sets cache value strength to Soft. @return CacheBuilder instance with updated configuration
211 Creates a map with weak keys. @return MapMaker instance for further configuration
212 Configures map to use weak values. @return MapMaker instance with weak value strength
213 Retrieves the failure cause of the service. @return The Throwable object representing the cause of failure, or null if not failed
214 Validates element index against collection size. @param index index to validate @param size collection size
215 Validates collection index position. @param index target index value @param size collection size
216 Validates position indexes for a collection. @param start starting index @param end ending index @param size total collection size
217 Creates a predicate that checks for equality with the given target object. @param target the object to compare against
218 Filters a filtered multimap using an additional entry predicate. @param multimap underlying filtered multimap @param entryPredicate predicate to filter entries further
219 Filters a multiset based on the given predicate. @param unfiltered original multiset to filter @param predicate condition for element inclusion
220 Creates a Splitter for splitting based on the given character matcher. @param separatorMatcher matcher to identify separators in input string
221 Creates a Splitter with fixed-length splitting strategy. @param length minimum chunk size
222 Returns a pre-configured splitter with whitespace trimmed from split results.
223 Creates an unstarted stopwatch instance.
224 Creates and starts a stopwatch instance.
225 Calculates the encoded length of a UTF-8 CharSequence in bytes. @param sequence input character sequence
226 Awaits executor termination without interruption indefinitely. @param executor ExecutorService to wait for
227 Continuously processes and cleans up finalizable references from the queue.
228 Initializes an empty Builder instance.
229 Creates a cache loader based on a provided computation function. @param function function to compute values based on keys
230 Creates a CacheLoader instance from a supplier function. @param supplier generates values when needed
231 Loads all values for the specified keys, throwing an exception if unsupported. @param keys iterable of unique keys
232 Calculates cache hit rate by dividing hits by total requests. @return Hit rate as a double value
233 Calculates cache miss rate as a ratio of misses to total requests. @return Miss rate value or 0 if no requests
234 Initializes an empty ForwardingLoadingCache instance.
235 Initializes an empty ForwardingList instance.
236 Initializes an empty ForwardingMultiset instance.
237 Initializes an empty ForwardingQueue instance.
238 Initializes an empty ForwardingSet instance with default behavior.
239 Initializes an empty ForwardingIterator instance.
240 Initializes an instance of AbstractBiMap with a pre-existing forward and inverse mapping. @param backward the forward mapping (key-value pairs) @param forward the inverse mapping (value-key pairs)
241 Initializes an empty ForwardingConcurrentMap instance.
242 Initializes an empty ForwardingSortedMap instance.
243 Initializes an empty instance of MutableTypeToInstanceMap.
244 Initializes an empty ForwardingListMultimap instance.
245 Initializes an empty ForwardingMultimap instance.
246 Initializes an empty ForwardingExecutorService instance with default settings.
247 Initializes an empty ForwardingFuture instance with default settings.
248 Creates a new cache entry with the given key and reference information. @param segment the associated cache segment @param key the associated key @param hash the hash value of the key @param next the next entry in the linked structure (optional)
249 Creates a new cache entry with the specified key and hash value. @param segment associated cache segment @param key weakly referenced key @param hash entry hash value @param next next entry in access or write queues (may be null)
250 Retrieves result from completed future while ensuring resource closure. @throws ExecutionException if future operation fails
251 Triggers cleanup and cache removal notifications after write operation.
252 Creates a weighted soft value reference from the given cache segment and reference entry. @param segment cache segment containing cached data @param entry reference entry with metadata about the cached data @param value associated value of the cache entry @param weight importance factor for prioritization
253 Creates a strong value reference with specified weight. @param segment cache segment @param entry associated reference entry @param value referenced object value @param weight importance score for caching eviction policy
254 Creates a new value reference with specified attributes. @param segment segment association @param entry key-value pair reference entry @param value associated object @param weight priority value for this reference
255 Updates cache entry's access time and adds to recency queue. @param entry cached entry @param now current timestamp
256 Records a locked read operation for the given cache entry. @param entry cached entry being accessed @param now current timestamp
257 Updates cache entry with the given details after a write operation. @param entry cached entry to update @param weight new weight value @param now current timestamp
258 Retrieves the live value from a cache entry. @param entry ReferenceEntry object to check @param now current timestamp in nanoseconds @return V cached value or null if expired or invalid
259 Calculates the number of elements in an iterable collection. @param iterable The input iterable to be counted
260 Calculates the size of this multisets using linear time complexity. @return size of the multiset
261 Converts InputStream to byte array by dynamically allocating buffers. @param in input stream @param bufs queue of allocated byte arrays @param totalLen total length of the combined buffer @return byte array containing the input data or throws OutOfMemoryError if too large
262 Sets the delegates, a forward and an inverse map, to the provided mappings. @param forward The forward map @param backward The inverse map
263 Creates an empty GeneralRange with specified comparator. @param comparator comparison function for range endpoints
264 Creates a range that starts from the specified endpoint and goes down to infinity. @param comparator comparison function for range endpoints @param endpoint starting point of the range @param boundType type of lower bound (inclusive or exclusive)
265 Creates a range with the specified upper bound and endpoint value. @param comparator comparison function for range endpoints @param endpoint nullable upper endpoint value @param boundType type of upper bound (inclusive or exclusive)
266 Creates a GeneralRange with specified bounds and comparator. @param comparator comparison function for range endpoints @param lower nullable lower endpoint value @param lowerType type of lower bound (inclusive or exclusive) @param upper nullable upper endpoint value @param upperType type of upper bound (inclusive or exclusive)
267 Computes the intersection of two ranges with specified bounds and comparator. @param other the range to intersect with @return a new GeneralRange object representing the intersection
268 Retrieves the next element in the sequence without removing it. @return The next element, or null if not available
269 Removes all values associated with the specified key. @param key unique identifier to remove
270 Validates iterator state to prevent concurrent modification issues.
271 Associates a value with a key, or adds to an existing collection. @param key unique identifier @param value associated value @return true if added successfully, false otherwise
272 Associates a value with a key, or adds to an existing collection. @param key unique identifier @param value associated value @return true if added successfully, false otherwise
273 Retrieves a list of values associated with the specified key. @param key unique identifier
274 Retrieves a multiset view for the specified key. @param key unique identifier
275 Returns a collection of key-value pairs associated with this multimap. @return Collection of Entry objects or null if not initialized
276 Writes the contents of this multimap to an ObjectOutputStream. @param size total number of key-value pairs @throws IOException if serialization fails
277 Converts a collection to a string representation. @param collection the input collection
278 Converts a map to a human-readable string representation.
279 Creates an ArrayList with the specified expected size. @param estimatedSize initial capacity estimate
280 Creates a new HashMap instance with the specified expected size. @param expectedSize anticipated number of entries
281 Creates a linked hash map with the specified expected size. @param expectedSize anticipated number of entries
282 Creates a HashSet with the specified initial capacity based on expected size. @param expectedSize anticipated number of entries
283 Creates a linked hash set with the specified expected size. @param expectedSize anticipated number of entries
284 Creates a list-based multimap builder with default expected value count per key. @see #arrayListValues(int) for customization
285 Creates a SetMultimapBuilder with default expected values per key.
286 Creates a builder for a linked set multimap with default expected values per key.
287 Creates a MultimapBuilder with hash keys and default expected key count.
288 Creates a MultimapBuilder with linked hash keys and default expected size.
289 Creates an immutable entry with the given element and count. @param e the associated element @param n the occurrence count (validated to be non-negative)
290 Updates the count of a specific element in this multiset. @param element the element to update @param count the new count value @return the previous count value
291 Updates the count of an element in this multiset. @param element the element whose count is updated @param oldCount the current count @param newCount the new count
292 Computes hash code based on map representation of multimap. @return Hash code value
293 Returns a string representation of this multimap in map format.
294 Returns a set of entries in this multiset. @return Set of Multiset.Entry objects
295 Calculates hash code based on the multiset's entries. @return Hash code value
296 Returns a string representation of this multiset as its entries set.
297 Retrieves the first entry from this map's entry set. @return first entry or null if empty
298 Finds the smallest element in this set that is greater than or equal to the specified element. @param e target element @return ceiling element or null if not found
299 Returns the highest element in this set greater than or equal to the specified element. @param e the reference element @return higher element or null if not found
300 Creates an empty TreeRangeSet instance.
301 Checks if the given Comparable value falls within any managed range. @param value the value to check for containment
302 Checks if the input iterable has a comparator that is equal to the provided one. @param comparator comparator to compare with @param elements iterable to check (must be a SortedSet or SortedIterable) @return true if the comparators are equal, false otherwise
303 Inserts all values from another Table into this AbstractTable. @param table the source Table containing values to be inserted
304 Retrieves the set of cells within this table. @return Set of Cell objects or creates a new one if not initialized
305 Retrieves the set of cells within this table. @return Set of Cell objects or creates a new one if not initialized
306 Retrieves table values.
307 Retrieves table values, delegating to superclass implementation.
308 Creates an ordering based on the result of applying a given transformation function. @param function Function to apply for sorting
309 Creates an ordering instance based on the provided comparator. @param comparator nullable comparator to initialize or validate
310 Creates a CompoundOrdering instance with this comparator as primary and the given comparator for secondary sorting. @param secondaryComparator additional comparator for tie-breaking
311 Creates an immutable cell with a specified row key, column key, and value. @param rowKey unique row identifier @param columnKey unique column identifier @param value stored cell value
312 Checks if ArrayTable contains specified row and column keys. @param rowKey object to search for (row key) @param columnKey object to search for (column key) @return true if both row and column keys exist, false otherwise
313 Creates an immutable map entry with the given key and value. @param key unique key identifier @param value associated value
314 Creates an immutable map entry from the given Entry or creates a new one if it's not reusable. @param entry existing entry to reuse @param key unique key identifier @param value associated value
315 Adds an Entry to the multimap using its key and value. @param entry a pre-existing Entry object
316 Adds a key-value pair to the multimap. @param key unique key @param value associated value
317 Dynamically resizes the compact hash map's internal structures if necessary. @param newSize target size for entries, keys, and values arrays
318 Inserts a new entry at the specified index with given key and value. @param entryIndex compacted index of entry to insert @param key new key for entry @param value new value for entry @param hash hash code for key @param mask bit mask controlling combination with prefix value
319 Dynamically resizes the compact hash set's internal structures to accommodate a specified capacity. @param newSize desired size of the resized arrays
320 Inserts a new entry into the compact hash set. @param entryIndex index to insert at @param object new element value @param hash hash code for the entry @param mask bit mask for the entry
321 Allocates internal arrays for storing key-value pairs and updates metadata. @return estimated number of hash table entries
322 Allocates internal arrays and configures the compact hash table. @return estimated number of hash table entries
323 Checks if this range completely encloses another. @param other the range to check
324 Checks if this range overlaps with another. @param other the other Range to compare
325 Serializes the ImmutableSetMultimap to an ObjectOutputStream. @throws IOException if serialization fails
326 Creates an immutable range map builder.
327 Creates an empty range set builder.
328 Creates an empty ImmutableTable Builder instance.
329 Returns an unmodifiable iterator over the elements of this view. @return UnmodifiableIterator object
330 Counts occurrences of an object in an iterable collection. @param iterable the collection to search @param element the object to find in the collection @return frequency of the object (0 or more)
331 Checks if this map contains a specific key. @param key the key to find in the map @return true if found, false otherwise
332 Checks if this map contains a specified value. @param value the object to find in the map
333 Finds the lower entry with a key <= the given key. @param key The key to find the corresponding lower entry for @return Lower entry's key or null if not found
334 Finds the smallest map key greater than or equal to the target key. @param key target key @return Key object, or null if no such key exists
335 Finds the smallest key greater than or equal to the given key. @param key key for which to find the entry @return Key object or null if not found
336 Returns the entry with the highest key greater than or equal to the specified key. @param key The reference key
337 Returns the first key in the map. @return First key or throws NoSuchElementException if empty
338 Retrieves the last key in the map. @return Last key or throws NoSuchElementException if empty
339 Retrieves the last entry from this map's entries in descending key order. @return Last Entry object or null if empty
340 Retrieves last entry from descending map view.
341 Returns a view of this map's keys in reverse order. @return A new NavigableSet object with keys sorted in descending order
342 Returns a sub-map containing key-value pairs between the specified keys (inclusive for 'fromKey', exclusive for 'toKey'). @param fromKey starting key @param toKey ending key
343 Retrieves the entry with the lowest key greater than or equal to the specified key. @param key target key
344 Returns floor entry in this map with the specified key. @param key key to find
345 Returns a view of all key-value pairs in this map with keys less than 'toKey'. @param toKey maximum key (exclusive)
346 Returns the entry with the smallest value greater than or equal to the given key. @param key the target key @return Entry object or null if not found
347 Returns the entry with the highest key value greater than the given key. @param key target key
348 Returns a view of the map's entries starting from the given key. Includes the starting key (inclusive). @param fromKey starting key
349 Creates a sub-multiset from the standard multiset with specified bounds. @param lowerBound minimum value (inclusive) @param lowerBoundType specifies whether to include or exclude the bound @param upperBound maximum value (inclusive) @param upperBoundType specifies whether to include or exclude the bound
350 Creates a new instance of the HashBasedTable with an empty backing map and default value factory.
351 Deserializes EnumMultiset object from an ObjectInputStream. @param stream input stream containing serialized data
352 Moves the last entry in the compact hash map to a specified position. @param dstIndex target index to move the last entry to @param mask bit mask to control combination operations
353 Moves the last entry in the compact hash set to a specified index. @param dstIndex target position for the last entry @param mask bit mask controlling movement and updates
354 Checks if map contains specified value. @param value the value to search for
355 Creates a new builder with the specified expected size. @param expectedSize initial capacity of the entries array
356 Initializes builder with default initial capacity.
357 Creates an instance of the immutable map builder.
358 Initializes builder with a specified comparator. @param comparator Comparator instance to order map entries
359 Creates an immutable bi-map with a single key-value pair. @param k1 unique key @param v1 associated value
360 Adds a unique element to the set.
361 Initializes the Builder object with default capacity.
362 Creates a Builder object with an initial capacity based on the specified size. @param expectedSize non-negative integer value for the expected list size
363 Adds all elements from an iterable to the builder. @param elements Iterable of elements to be added
364 Adds multiple copies of specified elements from an iterator to the multiset. @param elements Iterator of elements to be added
365 Adds all elements from an iterator to the collection. @param elements Iterator of elements to be added
366 Creates a serialized representation of this ImmutableMap instance.
367 Creates an immutable table instance with the given row key, column key, and value. @param rowKey unique row identifier @param columnKey unique column identifier @param value associated data value
368 Converts iterable delegate to a comma-separated string representation. @return string representation of the underlying iterable
369 Adds multiple entries with the same key. @param key unique map key @param values collection of values to add @return Builder instance for method chaining
370 Retrieves the single element from an iterable, returning the default value if empty. @param iterable iterable collection @param defaultValue value to return if iterable is empty
371 Retrieves the last element from an iterable with optional default value. @param iterable Iterable object to extract elements from @param defaultValue Default value to return if iterable is empty or contains no elements
372 Associates a single value with the specified key. @param key unique identifier @param value associated value
373 Partitions the input list into sublists of specified size. @param list collection to be divided @param size number of elements per sublist
374 Searches this list for the specified element. @param element object to find
375 Searches for the last occurrence of a specified object in this list. @param element the object being searched for (may be null) @return index of last occurrence or -1 if not found
376 Performs locked cleanup before writing to ensure thread safety.
377 Creates an empty unmodifiable TreeMap instance to store range entries.
378 Finds the minimum element within a specified range in the heap. @param index starting index of the range @param len length of the range @return index of the minimum element or -1 if not found
379 Returns the index of the maximum element in the queue.
380 Retrieves the minimum element from the priority queue.
381 Bubbles up the given element to its correct position in the heap, alternating between levels. @param index starting node index @param x element to be bubbled up @return new index of the bubbled-up element
382 Returns an iterator over the elements of this multisets. @return iterator instance
383 Concatenates a single object with an existing array. @param element the object to add @param array the array to concatenate into
384 Converts a Collection to an array of specified type. @param c collection to convert @param array target array; may be resized or filled @return the converted array
385 Finds the minimum element in an iterable based on custom ordering criteria. @param iterable collection of elements to compare
386 Finds the maximum element in an iterable collection. @param iterable a sequence of elements to compare
387 Returns human-readable string representation of this contiguous set's range. @see #range()
388 Creates a GeneralRange from an existing Range, preserving its bounds and comparator. @param range input range to convert
389 Creates a submap of the provided NavigableMap within the specified Range. @param map original NavigableMap @param range range to create submap for @return submap instance or original map if no valid range was specified
390 Creates a subset of the specified NavigableSet within the given Range. @param set original NavigableSet @param range subset bounds @return Subset NavigableSet or the original set if no bounds are provided
391 Returns a sorted map of rows to their respective column maps. @return Sorted map of rows (R) to maps of columns (C) to values (V)
392 Creates a synchronized view of the given queue. @param queue underlying queue to synchronize
393 Initializes ArrayBasedCharEscaper with a mapping and character range. @param escaperMap mapping of characters to their escaped representations @param safeMin minimum safe character value @param safeMax maximum safe character value
394 Initializes a new instance of ArrayBasedUnicodeEscaper with the provided parameters. @param escaperMap map containing character mappings @param safeMin minimum safe code point value @param safeMax maximum safe code point value @param unsafeReplacement replacement string for unsafe characters
395 Creates a PercentEscaper instance with the specified safe characters and space encoding option. @param safeChars String containing allowed characters @param plusForSpace whether to include '+' for space encoding
396 Escapes special characters in the input string. @param string input string to process @return escaped string or original if no special chars found
397 Creates a subscriber instance for the given event bus, listener object, and method. If the method is thread-safe, creates a regular Subscriber; otherwise, uses a synchronized wrapper. @param bus EventBus instance @param listener Object to invoke the method on @param method Method to be executed in response to events @return Subscriber instance or its synchronized variant if the method is not thread-safe
398 Returns a string representation of the graph, including its properties. @return String containing directed status, self-loop allowance, node count, and edge set
399 Returns a set of all edges in the graph as EndpointPairs. @return Set<EndpointPair<N>> containing all edges in the graph
400 Returns a set of all edges in the graph as EndpointPairs. @return Set<EndpointPair<N>> containing all edges in the graph
401 Inserts a double value into the hash process by converting it to its raw long bits. @param d the double value to be hashed
402 Creates a Bloom filter collector with the specified funnel and parameters. @param funnel Funnel to use for inserting elements @param expectedInsertions Expected number of insertions (must be >= 0)
403 Calculates the expected false positive probability using the Bloom filter's parameters. @return Expected false positive rate as a double value
404 Checks if another BloomFilter is compatible with this instance. @param that the other BloomFilter to compare
405 Converts single byte to its string representation in base 10.
406 Merges another BloomFilter into this instance, ensuring both filters have the same hash functions, bit size, strategy, and funnel. @param that BloomFilter to combine with
407 Creates a hash code instance from the given byte array. @param bytes nullable byte array to validate and store
408 Creates a HashCode instance from an integer hash value. @param hash the integer hash code to be wrapped
409 Creates a new HashCode instance from a given long hash value. @param hash the long hash value to be wrapped
410 Returns this unsigned integer's value as an unsigned float.
411 Converts this unsigned integer to a double value.
412 Converts this unsigned integer to a BigInteger representation. @return BigInteger object representing the unsigned integer's value
413 Returns a fast hash function based on Murmur3 with the specified minimum number of bits. @param minimumBits input number of bits
414 Computes a consistent hash value within the given number of buckets. @param hashCode Hash object to be padded and hashed @param buckets positive integer number of hash buckets @return index representing the hashed bucket
415 Generates HMAC-MD5 hash function using the specified secret key. @param key secret key for hashing operations
416 Generates HMAC-SHA1 hash function using the provided secret key. @param key secret key for hashing operations
417 Generates an HMAC SHA-256 hash function instance. @param key secret key for hashing operations
418 Generates an HMAC SHA-512 hash function instance with the specified secret key. @param key secret key for hashing operations
419 Concatenates multiple byte streams into one. @param sources iterable of ByteSources to concatenate
420 Concatenates multiple character sources into one. @param sources iterable of sources to be concatenated
421 Creates a ByteArrayDataInput instance from a byte array. @param bytes input byte array
422 Creates a ByteArrayDataOutput instance with no underlying byte array output stream. @return new ByteArrayDataOutput object
423 Creates a ByteArrayDataOutput instance with specified initial capacity. @param size initial byte array size
424 Initializes ReaderInputStream with a Reader, Charset, and buffer size. @param reader input character stream @param charset character encoding scheme @param bufferSize initial buffer capacity
425 Counts total bytes by skipping and summing up skipped amounts. @param in InputStream to count from @return total byte count or throws IOException if an error occurs.
426 Skips a specified number of bytes from the InputStream. @param in InputStream to skip from @param n maximum number of bytes to skip @throws EOFException if end of stream reached before skipping all bytes
427 Writes multiple lines to the output stream using a specified line separator. @param lines iterator over CharSequence objects @param lineSeparator string representing the line separator (e.g. "\n", "\r\n")
428 Writes multiple lines to the output stream using a specified line separator. @param lines iterator over CharSequence objects @param lineSeparator string representing the line separator (e.g. "\n", "\r\n")
429 Iterates over each line of character source and applies the given action. @throws IOException if an I/O error occurs
430 Reads all lines from a given Readable source. @param r input source, validated against NPE @return List of strings containing each line or an empty list if no lines are available
431 Reads lines from a readable source and processes them using the provided LineProcessor. @param readable input source, validated against NPE @param processor callback to process each line; must not be null @return result of processing (or null if no lines were processed)
432 Reads more characters from the input stream into the character buffer. Handles cases where the buffer is full or needs to be resized.
433 Reads and returns a signed short value from two bytes. @throws IOException I/O error occurred
434 Reads and returns an unsigned short value, then casts it to a char. @throws IOException I/O error occurred
435 Reads and returns a little-endian float value from four bytes. @throws IOException I/O error occurred
436 Reads and returns a double value from the input stream in little-endian byte order. @throws IOException I/O error occurred
437 Writes a string as an array of characters in little-endian byte order. @param s the input string to be written
438 Writes double value to output stream in little-endian order. @param v the double value to write
439 Deletes directory contents recursively using an insecure method. @param dir DirectoryStream containing paths to delete @return collection of IOExceptions encountered during deletion or null if successful
440 Recursively deletes a directory and its contents securely. @param dir SecureDirectoryStream to the target directory @param path Path to delete @return Collection of IOExceptions encountered during deletion or null if successful
441 Initializes the stream with an iterator of byte sources. @param it iterator of input streams
442 Converts resource to CharSource object using specified character set. @param charset target character set
443 Calculates the number of ordered permutations for a given sorted input list. @param sortedInputList sorted list of elements @param comparator comparator to determine element order @return number of permutations or MAX_VALUE on overflow
444 Calculates the mean of a stream of numbers. @param values iterator over Number objects @return calculated mean value or NaN if invalid input
445 Checks if a double value represents a power of two. @param x input double value @return true if power of two, false otherwise
446 Checks if a double value represents a mathematical integer. @param x input double value @return true if x is a mathematical integer, false otherwise
447 Rounds a long integer value to a double, according to the specified RoundingMode. @param x long value to round @param mode rounding strategy (e.g. UNNECESSARY, FLOOR, CEILING, etc.)
448 Compares two double values with a given tolerance. @param a first value @param b second value @param tolerance maximum allowed difference
449 Calculates maximum run length before hash table rebuild based on log2 table size. @param tableSize current hash table capacity
450 Trims the buffer to size K and updates the threshold. @param k desired buffer size
451 Calculates the base-10 logarithm of an integer, considering rounding mode. @param x input integer value @param mode rounding mode (UNNECESSARY, FLOOR, DOWN, CEILING, UP, HALF_DOWN, HALF_UP, or HALF_EVEN) @return the calculated log10 value with rounding applied according to the specified mode
452 Calculates the square root of an integer with rounding based on mode. @param x input integer value @param mode rounding mode (e.g. UNNECESSARY, FLOOR) @return square root value or rounded value based on mode
453 Calculates the new capacity for the priority queue while considering size constraints and ensuring efficient growth. @return new capacity, capped at the specified maximum size
454 Creates a horizontal linear transformation with given y-coordinate. @param y the y-coordinate of the line
455 Constructs a linear transformation with the specified slope. @param slope the vertical scale factor
456 Creates a linear transformation with a given horizontal scale factor. @param x horizontal scale factor
457 Calculates the factorial of a given integer. @param n input value (non-negative) @return BigInteger representation of the factorial result
458 Computes the base-10 logarithm of a long integer value. @param x input value @param mode rounding mode to apply (e.g. UNNECESSARY, FLOOR, CEILING) @return log10(x) as an int
459 Simplifies the product of a whole number and fraction using GCD to reduce fraction. @param x whole number @param numerator numerator of the fraction @param denominator denominator of the fraction @return product as a long integer
460 Computes the power of a long integer with overflow check. @param b base value @param k exponent (throws exception if < 0)
461 Calculates population covariance between paired variables. @return Covariance value or throws IllegalStateException if count is zero
462 Calculates sample covariance between paired variables. @return Sample covariance value
463 Calculates Pearson's correlation coefficient. @return Correlation coefficient value or NaN if invalid
464 Computes the arithmetic mean of a dataset. @param values iterator over numerical data points @return the calculated mean value
465 Adds a data point to the accumulator and updates statistics. @param value the new data point value
466 Calculates population covariance between paired data points. @return Population covariance value or throws IllegalStateException if no data points exist
467 Calculates sample covariance. @return Sample covariance value
468 Calculates the Pearson's correlation coefficient. @return The correlation coefficient value or NaN if invalid data
469 Partitions the given numerical array around a pivot element. @param array input numerical array @param from index where the pivot should be placed @param to end index of the slice @return index after which all elements are greater than the pivot
470 Creates PairedStats object from a byte array. @param byteArray input data stream @return initialized PairedStats object or throws exception if invalid
471 Creates a Stats object from a byte array. @param byteArray input data in little-endian order
472 Returns a snapshot of current statistical metrics. @return Stats object containing aggregated data
473 Returns a snapshot of paired statistical metrics. @return Stats object containing aggregated data
474 Returns aggregated Y-statistical metrics snapshot.
475 Creates a Collector to accumulate Numbers into aggregated statistical metrics. @return A Collector that computes mean, variance, and standard deviation
476 Converts an InetAddress object to a URI string representation. @param ip InetAddress object @return String representation of the IP address in URI format, or [IP] for IPv6 addresses.
477 Retrieves Inet4Address from an IPv6 address that is compatible with IPv4. @param ip the IPv6 address to check @return Inet4Address object or throws exception if not compatible
478 Retrieves the IPv4 address from a given 6to4 IPv6 address. @param ip IPv6Address object to extract IPv4 address from
479 Retrieves the IPv4 part of an ISATAP address. @param ip Inet6Address object containing the ISATAP address
480 Computes result from scaled and indexed dataset. @param dataset Collection of numbers to process
481 Computes quantiles from the provided numerical dataset. @param dataset Collection of numbers to process @return Mapping of calculated quantile values
482 Adds a double value to the immutable array. @param value the double element to be added
483 Adds all elements from the specified double array. @param values double array to be added
484 Adds all double values from the specified collection, ensuring sufficient capacity. @param values collection of double values to add
485 Adds all elements from the specified immutable double array. @param values ImmutableDoubleArray to be added
486 Creates an immutable double array with a single element. @param e0 initial double value
487 Creates an ImmutableDoubleArray from two specified doubles. @param e0 first double value @param e1 second double value
488 Creates an immutable double array with a specified size. @param e0 first element @param e1 second element @param e2 third element
489 Creates an ImmutableDoubleArray instance from a compacted array of four doubles. @param e0 first double value @param e1 second double value @param e2 third double value @param e3 fourth double value
490 Creates an ImmutableDoubleArray instance from a specified array of five doubles. @param e0 first double value @param e1 second double value @param e2 third double value @param e3 fourth double value @param e4 fifth double value
491 Creates an immutable array with a fixed size of 6 doubles. @param e0 first double value @param e1 second double value @param e2 third double value @param e3 fourth double value @param e4 fifth double value @param e5 sixth double value
492 Creates an immutable double array copy from a given array. @param values original double array
493 Creates an immutable double array from a collection of Double values. @param values Collection of doubles to convert
494 Creates an ImmutableDoubleArray from a DoubleStream. @param stream input stream of doubles
495 Returns an immutable double array with excess elements removed. @return A trimmed view of the original data, or a copy if partial
496 Checks if this array contains the specified double value. @param target double to search for
497 Adds an integer to the builder's internal array. @param value integer to be added
498 Adds all integers from the given array to the builder. @param values integer array to add
499 Adds all integers from a collection to the immutable integer array. @param values collection of integers to be added
500 Adds all integers from the specified ImmutableIntArray to this builder. @param values ImmutableIntArray containing additional integers
501 Creates an ImmutableIntArray with a single integer element. @param e0 initial integer value
502 Creates an immutable integer array with two elements. @param e0 first element @param e1 second element
503 Creates an ImmutableIntArray with specified integer elements. @param e0 first element @param e1 second element @param e2 third element
504 Constructs a 4-element ImmutableIntArray from individual integer values. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element
505 Creates an ImmutableIntArray with the specified integer values. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @param e4 fifth element
506 Creates an ImmutableIntArray from six integer elements. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @param e4 fifth element @param e5 sixth element
507 Copies an integer array into an immutable array. @param values input integer array
508 Creates a new ImmutableIntArray from an IntStream. @param stream IntStream to copy
509 Returns a trimmed view of this array, preserving integrity if partially visible.
510 Adds a single long value to the builder, ensuring sufficient internal storage capacity. @param value the long value to be added
511 Adds all long values from the specified array to the builder. @param values array of long values to be added
512 Adds all long values from the specified collection. @param values Collection of long integers to be added
513 Adds all long values from the given ImmutableLongArray. @param values source immutable array
514 Creates an ImmutableLongArray instance from a single long value. @param e0 The initial element in the array
515 Creates an ImmutableLongArray instance from two specified long values. @param e0 first long element @param e1 second long element
516 Creates an ImmutableLongArray instance from three specific long values. @param e0 first long value @param e1 second long value @param e2 third long value
517 Constructs an ImmutableLongArray instance from four specified long values. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element
518 Constructs an ImmutableLongArray instance from five specified long values. @param e0 first value @param e1 second value @param e2 third value @param e3 fourth value @param e4 fifth value
519 Creates an ImmutableLongArray instance from a specified array of six long elements.
520 Creates an ImmutableLongArray instance from a specified long array. @param values input array of long integers
521 Creates an ImmutableLongArray instance from a LongStream. @param stream input stream of long values
522 Returns a trimmed view of this array if it's a partial view; otherwise, returns this array itself.
523 Creates ScaleAndIndexes object from collection of integer indexes. @param indexes collection of integers to convert
524 Creates a new ImmutableIntArray from a given collection of integers. @param values input integer collection
525 Creates an immutable long array from a given collection of longs. @param values Collection containing long elements
526 Tries to parse a string representation of an integer value in the specified radix. @param string string representation of the integer value @param radix base number system (2-36) @return parsed Integer value or null if invalid input
527 Attempts to parse a string representation of a long value in radix 10. @param string string representation of the long value
528 Decodes a string into an unsigned int using automatic radix detection. @param stringValue input string to parse
529 Creates UnsignedInteger instance from a long value, checking for valid unsigned range. @param value the long value to convert
530 Creates UnsignedInteger instance from BigInteger, ensuring it's within unsigned integer range. @param value BigInteger to be converted
531 Constructs an UnsignedInteger from a string representation with specified radix. @param string input string to parse @param radix base of the number in the string
532 Performs unsigned integer addition with another value. @param val the value to add (must not be null)
533 Performs unsigned integer subtraction. @param val other unsigned integer value to subtract @return result of this - val
534 Multiplies two unsigned integers. @param val the other factor @return product of this and val, or null if val is null
535 Divides this unsigned integer by another. @param val The divisor
536 Computes the unsigned integer remainder of this value divided by divisor. @param val other value to divide with @return UnsignedInteger result of division operation
537 Returns string representation of unsigned integer in decimal radix.
538 Compares this unsigned integer with another, flipping signs for unsigned comparison. @param other UnsignedInteger to compare against
539 Creates an UnsignedLong instance from a given non-negative long integer value. @param value long value to create UnsignedLong instance from
540 Creates an UnsignedLong instance from a BigInteger value. @param value non-negative BigInteger value
541 Adds an unsigned long value to this instance. @param val the value to add @return the sum as a new UnsignedLong object
542 Subtracts an unsigned long value. @param val value to subtract @return result of subtraction or null if input is invalid
543 Computes product of this unsigned long value and another. @param val other unsigned long value @return product as an UnsignedLong instance
544 Divides two unsigned long values and handles overflow. @param dividend value to be divided @param divisor value by which to divide @return result of division or an approximation if necessary
545 Computes the remainder of unsigned long division. @param dividend dividend value @param divisor divisor value @return remainder value
546 Parses a string representation of an unsigned long in the specified radix. @param string string to parse @param radix base of the number system
547 Parses an unsigned long from a string in base 10. @param string string to parse
548 Decodes a string representation of an unsigned long, automatically determining the radix. @param stringValue string containing numerical value
549 Checks if the underlying member is package-private. @return true if private, protected, or public, false otherwise
550 Wraps the represented type with its corresponding wrapper class if it's a primitive. @return TypeToken instance for the wrapped Class object, or the original token if not primitive
551 Unwraps the primitive wrapper class from its corresponding primitive type. @return The original TypeToken instance if not a wrapper, otherwise a new TypeToken for the unwrapped type
552 Retrieves the component type from the runtime type, or returns null if not found. @return TypeToken representation of the component type, or null if not present
553 Retrieves result of asynchronous computation. @throws InterruptedException if interrupted while waiting @throws ExecutionException if task execution failed
554 Submits a task for execution and adds the resulting future to a blocking queue. @param executorService executor service instance @param task callable task to be executed @param queue blocking queue where future will be added @return ListenableFuture representing the submitted task
555 Awaits service to reach running state within specified timeout. @param timeout time interval for waiting
556 Awaits service to reach running state within specified timeout. @param timeout time interval for waiting
557 Awaits service to reach running state within specified timeout. @param timeout time interval for waiting
558 Awaits service to reach running state within specified timeout. @param timeout time interval for waiting
559 Awaits service termination within specified timeout. @param timeout time interval to wait
560 Awaits service termination within specified timeout. @param timeout time interval to wait
561 Awaits service termination within specified timeout. @param timeout time interval to wait
562 Awaits service termination within specified timeout. @param timeout time interval to wait
563 Collects a value from a non-cancelled future, handling exceptions if any. @param index the position of the value in the collection @param future the Future to get result from
564 Adds a value to the atomic double and returns the result. @param delta value to add @return updated double value or -9223372036854775808.0 if failed
565 Atomically adds and returns a new value by summing the current value with the provided input. @param delta input double value to be added
566 Adds a value to the atomic array at index i and returns the result. @param i array index @param delta value to add
567 Atomically adds a value to array element at index i and returns result. @param i array index to update @param delta value to add
568 Cancels the asynchronous task and closes managed resources. @param mayInterruptIfRunning whether to interrupt running tasks @return true if cancellation was successful, false otherwise
569 Finds a path from the current node to the given target node in the lock graph. @param node target node @param seen set of visited nodes to prevent infinite recursion @return ExampleStackTrace object representing the found path, or null if not found
570 Creates a ListenableFutureTask from the given callable. @param callable task to be executed
571 Creates a new ListenableFutureTask instance with a given Runnable task and result. @param runnable executable task to be executed @param result null-allowed return value of the task
572 Executes pending runnables when task completion is notified.
573 Creates an instance of the ExecutionSequencer class.
574 Wraps a ListenableFuture in a FluentFuture, if not already one. @param future the asynchronous computation to wrap
575 Propagates a non-cancellation future from the provided ListenableFuture. @param future input future to be propagated @return ListenableFuture with propagation enabled
576 Reloads cached value for a given key and old value. @param key unique cache key @param oldValue previous cached value (null if not cached) @return ListenableFuture containing the new loaded value or null
577 Enqueues an event with its associated label to all registered listener queues. @param event Event object
578 Enqueues an event with its associated label to all registered listener queues. @param event Event object @param label Label object for the event
579 Dispatches events to registered listeners when the current thread is holding the lock. @param none
580 Dispatches events to all registered listener in order they were received. @throws Exception if monitor is held by current thread
581 Signals the next waiting thread whose condition is satisfied.
582 Submits an asynchronous operation for execution on the specified executor. @param callable async operation to be executed @param executor thread pool to run the operation in
583 Schedules async operation with specified delay. @param callable asynchronous operation to be executed @param delay time before execution in the given unit @param timeUnit time unit for delay @param executorService scheduling service @return ListenableFuture representing scheduled task
584 Creates a ListenableFutureTask for the given Callable. @param callable asynchronous operation to be executed
585 Submits a task to the given executor and returns a ListenableFuture. @param callable asynchronous operation to be executed @param executor thread pool responsible for execution
586 Creates a task with a given Runnable and its associated result. @param runnable asynchronous operation to be executed @param value value associated with the task's completion
587 Submits a Runnable to an Executor for asynchronous execution. @param runnable asynchronous operation to be executed @param executor thread pool to execute the task in @return ListenableFuture representing the asynchronous task's completion
588 Tries to acquire a semaphore uninterruptibly for the specified duration. @param semaphore the semaphore to acquire @param timeout time interval
