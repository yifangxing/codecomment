1 Tries to expire entries based on the current timestamp. @param now current system time in milliseconds
2 Creates a new instance with explicit ordering for the given enum class and policy. @param enumClass Class of the enumeration to process @param policy Policy object used in processing
3 Registers an object with the subscribers list. @param object Object to be registered
4 Unregisters an object from subscription service. @param object Object to be unregistered
5 Returns an ImmutableGraph Builder instance.
6 Filters BiMap entries based on the provided predicate. @param unfiltered original BiMap @param entryPredicate predicate to filter entries by @return filtered BiMap or null if unfiltered is not a FilteredEntryBiMap
7 Filters keys from the input map based on the provided predicate. @param unfiltered original map to filter @param keyPredicate condition to apply to each key @return filtered NavigableMap or null if all entries removed
8 Filters a navigable map by retaining entries with values matching the given predicate. @param unfiltered original map to be filtered @param valuePredicate predicate to determine which values to keep @return filtered NavigableMap or null if input is null
9 Filters the keys of a sorted map based on a predicate. @param unfiltered input map to filter @param keyPredicate key filtering condition @return filtered SortedMap with matching keys
10 Filters a sorted map by a predicate on its values. @param unfiltered the original map to filter @param valuePredicate the condition for inclusion in the result @return a new sorted map with filtered entries or an empty map if all entries are removed
11 Creates an immutable sorted multiset from a collection of elements. @param comparator comparison function for sorting elements @param elements iterator over elements to include in the set
12 Creates an immutable set of location information from the given class loader. @param classloader Class loader to fetch location info for
13 Finds the first component type in a given bounds array. @param bounds array of potential bounds @return first class or array component type, or null if not found
14 Creates a new array type from the given component type. @param componentType the type of elements in the array
15 Generates all permutations of input elements in sorted order. @param elements iterable collection of comparable elements
16 Creates a new ImmutableMultiset from the given iterable of elements. @param elements iterable containing the elements to be copied into the multiset
17 Creates a read-only multiset from an iterator of elements. @param elements iterable collection of elements @return ImmutableMultiset object representing the copied data
18 Copies the multiset with elements ordered by highest count first. @param multiset input multiset to copy @return a new ImmutableMultiset instance
19 Generates all possible permutations of given collection's elements. @param elements input iterable to permute
20 Creates an immutable list from the given iterable. @param elements input collection
21 Creates an immutable copy of the given RangeSet. @param rangeSet input RangeSet to be copied
22 Creates an immutable sorted set from a given sorted set. @param sortedSet input sorted set @return ImmutableSortedSet instance or empty set if input is empty
23 Reads and returns a list of lines from the underlying stream. @return List<String> containing read lines or an empty list if none
24 Constructs an immutable map from the builder's results. @return non-empty map or empty map if build() method returned no mappings
25 Creates a multimap from map entries, with optional value sorting. @param mapEntries collection of key-value pairs where values are collections @param valueComparator (optional) comparator to sort values before adding to multimap @return ImmutableListMultimap or empty instance if input is empty
26 Builds an immutable map instance. Calls buildOrThrow() internally to perform actual construction.
27 Creates a multimap from map entries, filtering out empty value collections. @param mapEntries collection of key-value pairs with collection values @param valueComparator comparator for ordering values (optional) @return ImmutableSetMultimap or an empty one if input is empty
28 Converts a Properties object into an ImmutableMap of key-value pairs. @param properties input Properties object
29 Creates an index map from a collection of elements. @param list input collection @return ImmutableMap with element as key and index as value
30 Builds an immutable map of type instances from the builder's result. @return An ImmutableTypeToInstanceMap containing the built data.
31 Builds a TypeTable from the given mappings and user-supplied type variables. @param mappings map of type variable keys to their corresponding types
32 Converts an iterator of keys and a function to values into an immutable map. @param keys iterator of unique keys @param valueFunction function to compute corresponding values
33 Returns a subset of this map containing keys within the specified range. @param fromKey starting key (inclusive) @param toKey ending key (exclusive)
34 Converts a stream of objects to an immutable sorted map. @param comparator key comparison function @param keyFunction maps each object to its key @param valueFunction maps each object to its value @param mergeFunction merges values for duplicate keys @return ImmutableSortedMap<K, V>
35 Retrieves and removes the last element from the collection. @return the removed element, or null if empty.
36 Removes and returns the last element. @return Element removed or null if empty
37 Converts this object to an immutable set of elements. @return Set of elements or null if delegate is null
38 Checks if this TypeToken is a supertype of another. @param type the TypeToken to check against @return true if this token is a superclass, false otherwise
39 Checks if the given Type is a supertype of this Type. @param type Type to check @return true if given Type is a supertype, false otherwise
40 Checks if this token is a subtype of another TypeToken. @param type TypeToken to check against
