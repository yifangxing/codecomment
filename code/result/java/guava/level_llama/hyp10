1 Tries to expire cache entries that have reached their expiration time. @param now current timestamp in nanoseconds
2 Creates a WithExplicitOrdering instance with explicit ordering policy. @param enumClass Enum class to associate with the lock graph nodes @param policy concurrency policy to enforce
3 Registers an event listener object with this EventBus. @param object Object to invoke subscriber methods on
4 Unregisters event listeners associated with the given object. @param object Object to stop invoking subscriber methods on
5 Creates an immutable graph builder, casting to the specified type.
6 Filters entries in a bi-map based on an additional predicate. @param unfiltered original bi-map to filter @param entryPredicate condition for entries to be included @return FilteredEntryBiMap instance or the original if already filtered
7 Filters a navigable map based on a key predicate. @param unfiltered the original map to filter @param keyPredicate condition for keys to be included in the map
8 Filters a navigable map based on the provided value predicate. @param unfiltered original map to filter @param valuePredicate condition for values to be included in the map
9 Filters keys in a sorted map based on the provided predicate. @param unfiltered original sorted map @param keyPredicate condition for keys to be included @return filtered sorted map
10 Filters map entries based on the given value predicate. @param unfiltered original sorted map @param valuePredicate condition for entry values to be included @return filtered sorted map or new FilteredEntrySortedMap instance if necessary
11 Creates a new immutable sorted multiset from an iterator of elements. @param comparator comparison function for multiset elements or null for natural ordering @param elements Iterator of elements to be added @return ImmutableSortedMultiset object containing the copied elements
12 Retrieves location information from the given class loader. @param classloader ClassLoader instance to fetch entries from @return ImmutableSet of LocationInfo objects or an empty set if none found
13 Retrieves the component type of a given Type array, handling various type representations. @param bounds input Type array to analyze @return the component Type or null if not found
14 Creates a new array type with the specified component type. @param componentType Type of elements in the array
15 Generates all permutations of the input iterable in natural order. @param elements Input collection to permute
16 Creates a new ImmutableMultiset from an iterable of elements. If the input is already an ImmutableMultiset, it will be returned directly if not a partial view. Otherwise, a LinkedHashMultiset will be created and copied into an ImmutableMultiset. @param elements Iterable of elements to add
17 Creates an immutable multiset from the given iterator of elements. @param elements Iterator containing elements to be added to the multiset
18 Creates an immutable multiset with elements ordered by highest count first. @param multiset Multiset to copy from
19 Generates all permutations of a given collection. @param elements input collection to generate permutations from
20 Creates an immutable list by copying all elements from the provided iterable. @param elements Iterable of elements to be added
21 Creates an immutable copy of the given RangeSet. @param rangeSet input range set to copy
22 Creates an immutable sorted set copy from a specified sorted set. @param sortedSet the input sorted set
23 Reads all lines from the character source and returns them as an immutable list. @return List of strings, or null if not found
24 Constructs an immutable map from the builder, returning a new instance if non-empty. @return ImmutableClassToInstanceMap object or empty instance if no entries
25 Creates an ImmutableMultimap instance from a collection of key-value mappings. @param mapEntries Collection of Map.Entry objects containing keys and collections of values @param valueComparator Optional comparator to sort values in each list; null for unsorted lists @return ImmutableListMultimap object or empty if input is empty
26 Builds an immutable map with duplicate key checks enabled.
27 Creates an ImmutableSetMultimap instance from a collection of map entries. @param mapEntries collection of key-value pairs where each value is a collection @param valueComparator optional comparator for sorting values; null for unordered
28 Converts a Properties object to an immutable map. @param properties input Properties object @return ImmutableMap<String, String> or throws Exception if duplicate keys are detected
29 Creates an index map from a collection of elements. @param list the input collection to be indexed @return an ImmutableMap with element as key and index as value
30 Constructs an immutable map with duplicate key checks enabled. @throws Exception if duplicate keys are detected
31 Constructs a TypeTable with the given mappings of type variables to their types. @param mappings immutable mapping of type variables to their corresponding types
32 Converts an iterator of keys into a map with values generated by the given function. @param keys iterator of unique keys @param valueFunction function to compute associated value for each key @return ImmutableMap instance or throws NPE if input is null
33 Returns a view of the sorted map within the specified range. @param fromKey key to start at @param toKey key to stop at
34 Creates an immutable sorted map from a stream of data. @param comparator key comparison function @param keyFunction extracts the key for each element @param valueFunction extracts the value for each element @param mergeFunction merges values in case of duplicate keys
35 Retrieves and removes the maximum element from the queue. @return element value or null if empty
36 Removes and returns the maximum element from the queue. @return element value or null if removed
37 Converts this iterable to an immutable set. @return an ImmutableSet of elements, or null if not set
38 Checks if the given supertype is a subtype of this token's type. @param type Type to check against bounds
39 Checks if a given supertype is a subtype of this token. @param type Type to check against bounds @return true if supertype is a subtype, false otherwise
40 Checks if another TypeToken represents a subtype of this token. @param type the other TypeToken to check @return true if supertype is a subtype, false otherwise
