1 Returns an {@link Optional} containing the first element in this fluent iterable. If the iterable is empty, {@code Optional.absent()} is returned. <p><b>{@code Stream} equivalent:</b> if the goal is to obtain any element, {@link Stream#findAny}; if it must specifically be the <i>first</i> element, {@code Stream#findFirst}. @throws NullPointerException if the first element is null; if this is a possibility, use {@code iterator().next()} or {@link Iterables#getFirst} instead.
2 Returns an {@link Optional} containing the last element in this fluent iterable. If the iterable is empty, {@code Optional.absent()} is returned. If the underlying {@code iterable} is a {@link List} with {@link java.util.RandomAccess} support, then this operation is guaranteed to be {@code O(1)}. <p><b>{@code Stream} equivalent:</b> {@code stream.reduce((a, b) -> b)}. @throws NullPointerException if the last element is null; if this is a possibility, use {@link Iterables#getLast} instead.
3 Returns an {@link Optional} containing the first element in {@code iterator} that satisfies the given predicate, if such an element exists. If no such element is found, an empty {@link Optional} will be returned from this method and the iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null} is matched in {@code iterator}, a NullPointerException will be thrown. @since 11.0
4 Specifies the expected number of nodes in the graph. @throws IllegalArgumentException if {@code expectedNodeCount} is negative
5 Specifies the expected number of nodes in the network. @throws IllegalArgumentException if {@code expectedNodeCount} is negative
6 Specifies the expected number of edges in the network. @throws IllegalArgumentException if {@code expectedEdgeCount} is negative
7 Specifies the expected number of nodes in the graph. @throws IllegalArgumentException if {@code expectedNodeCount} is negative
8 Returns {@code true} if any element in {@code iterable} satisfies the predicate. <p><b>{@code Stream} equivalent:</b> {@link Stream#anyMatch}.
9 Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested contains any match for the given regular expression pattern. The test used is equivalent to {@code Pattern.compile(pattern).matcher(arg).find()} @throws IllegalArgumentException if the pattern is invalid @since 3.0
10 Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link RuntimeException}, {@link Error}, or {@code declaredType}. <p><b>Discouraged</b> in favor of calling {@link #throwIfInstanceOf} and {@link #throwIfUnchecked}. @param throwable the Throwable to possibly propagate @param declaredType the single checked exception type declared by the calling method @deprecated Use a combination of {@link #throwIfInstanceOf} and {@link #throwIfUnchecked}, which togther provide the same behavior except that they reject {@code null}.
11 Flattens a class's type hierarchy into a set of {@code Class} objects including all superclasses (transitively) and all interfaces implemented by these superclasses.
12 Returns a default thread factory used to create new threads. <p>When running on AppEngine with access to <a href="https://cloud.google.com/appengine/docs/standard/java/javadoc/">AppEngine legacy APIs</a>, this method returns {@code ThreadManager.currentRequestThreadFactory()}. Otherwise, it returns {@link Executors#defaultThreadFactory()}. @since 14.0
13 Returns {@code true} if this fluent iterable contains any object for which {@code equals(target)} is true. <p><b>{@code Stream} equivalent:</b> {@code stream.anyMatch(Predicate.isEqual(target))}.
14 Support removal operations when filtering a filtered multimap. Since a filtered multimap has iterators that don't support remove, passing one to the FilteredEntryMultimap constructor would lead to a multimap whose removal operations would fail. This method combines the predicates to avoid that problem.
15 Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a key that doesn't satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 14.0
16 Returns the elements from this fluent iterable that are instances of class {@code type}. <p><b>{@code Stream} equivalent:</b> {@code stream.filter(type::isInstance).map(type::cast)}. This does perform a little more work than necessary, so another option is to insert an unchecked cast at some later point: {@snippet : @SuppressWarnings("unchecked") // safe because of ::isInstance check ImmutableList<NewType> result = (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList()); }
17 A sensible definition of {@link #removeAll} in terms of {@link #iterator} and {@link #remove}. If you override {@code iterator} or {@code remove}, you may wish to override {@link #removeAll} to forward to this implementation. @since 7.0 (this version overrides the {@code ForwardingCollection} version as of 12.0)
18 Creates a new {@code EnumMultiset} containing the specified elements. <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}. @param elements the elements that the multiset should contain @throws IllegalArgumentException if {@code elements} is empty
19 Creates a <i>mutable</i> {@code LinkedList} instance containing the given elements; a very thin shortcut for creating an empty list then calling {@link Iterables#addAll}. <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link ImmutableList#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link FluentIterable} and call {@code elements.toList()}.) <p><b>Performance note:</b> {@link ArrayList} and {@link java.util.ArrayDeque} consistently outperform {@code LinkedList} except in certain rare and specific situations. Unless you have spent a lot of time benchmarking your specific needs, use one of those instead. <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Use the {@code LinkedList} {@linkplain LinkedList#LinkedList(Collection) constructor} directly, taking advantage of <a href="https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation">"diamond" syntax</a>.
20 Creates an {@code ArrayDeque} containing the elements of the specified iterable, in the order they are returned by the iterable's iterator. @since 12.0
21 Creates a {@code ConcurrentLinkedQueue} containing the elements of the specified iterable, in the order they are returned by the iterable's iterator.
22 Creates a {@code LinkedBlockingDeque} with a capacity of {@link Integer#MAX_VALUE}, containing the elements of the specified iterable, in the order they are returned by the iterable's iterator. @since 12.0
23 Creates a {@code LinkedBlockingQueue} with a capacity of {@link Integer#MAX_VALUE}, containing the elements of the specified iterable, in the order they are returned by the iterable's iterator. @param elements the elements that the queue should contain, in order @return a new {@code LinkedBlockingQueue} containing those elements
24 Creates a {@code PriorityBlockingQueue} containing the given elements. <p><b>Note:</b> If the specified iterable is a {@code SortedSet} or a {@code PriorityQueue}, this priority queue will be ordered according to the same ordering. @since 11.0 (but the bound of {@code E} was changed from {@code Object} to {@code Comparable} in 15.0)
25 Creates a {@code PriorityQueue} containing the given elements. <p><b>Note:</b> If the specified iterable is a {@code SortedSet} or a {@code PriorityQueue}, this priority queue will be ordered according to the same ordering. @since 11.0 (but the bound of {@code E} was changed from {@code Object} to {@code Comparable} in 15.0)
26 Returns a new, <i>mutable</i> {@code EnumSet} instance containing the given elements in their natural order. This method behaves identically to {@link EnumSet#copyOf(Collection)}, but also accepts non-{@code Collection} iterables and empty iterables.
27 Creates a thread-safe set backed by a hash map and containing the given elements. The set is backed by a {@link ConcurrentHashMap} instance, and thus carries the same concurrency guarantees. <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be used as an element. The set is serializable. @param elements the elements that the set should contain @return a new thread-safe set containing those elements (minus duplicates) @throws NullPointerException if {@code elements} or any of its contents is null @since 15.0
28 Creates a <i>mutable</i> {@code LinkedHashSet} instance containing the given elements in order. <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link ImmutableSet#copyOf(Iterable)} instead. <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Instead, use the {@code LinkedHashSet} constructor directly, taking advantage of <a href="https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation">"diamond" syntax</a>. <p>Overall, this method is not very useful and will likely be deprecated in the future. @param elements the elements that the set should contain, in order @return a new {@code LinkedHashSet} containing those elements (minus duplicates)
29 Creates a <i>mutable</i> {@code TreeSet} instance containing the given elements sorted by their natural ordering. <p><b>Note:</b> if mutability is not required, use {@link ImmutableSortedSet#copyOf(Iterable)} instead. <p><b>Note:</b> If {@code elements} is a {@code SortedSet} with an explicit comparator, this method has different behavior than {@link TreeSet#TreeSet(SortedSet)}, which returns a {@code TreeSet} with that comparator. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead, use the {@code TreeSet} constructor directly, taking advantage of <a href="https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation">"diamond" syntax</a>. <p>This method is just a small convenience for creating an empty set and then calling {@link Iterables#addAll}. This method is not very useful and will likely be deprecated in the future. @param elements the elements that the set should contain @return a new {@code TreeSet} containing those elements (minus duplicates)
30 Converts an iterable into a collection. If the iterable is already a collection, it is returned. Otherwise, an {@link java.util.ArrayList} is created with the contents of the iterable in the same iteration order.
31 Creates a <i>mutable</i> {@code ArrayList} instance containing the given elements; a very thin shortcut for creating an empty list then calling {@link Iterables#addAll}. <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link ImmutableList#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link FluentIterable} and call {@code elements.toList()}.) <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Use the {@code ArrayList} {@linkplain ArrayList#ArrayList(Collection) constructor} directly, taking advantage of <a href="https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation">"diamond" syntax</a>.
32 Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin convenience for creating an empty set then calling {@link Collection#addAll} or {@link Iterables#addAll}. <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link ImmutableSet#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link FluentIterable} and call {@code elements.toSet()}.) <p><b>Note:</b> if {@code E} is an {@link Enum} type, use {@link #newEnumSet(Iterable, Class)} instead. <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Instead, use the {@code HashSet} constructor directly, taking advantage of <a href="https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation">"diamond" syntax</a>. <p>Overall, this method is not very useful and will likely be deprecated in the future.
33 Returns {@code true} if every element in this fluent iterable satisfies the predicate. If this fluent iterable is empty, {@code true} is returned. <p><b>{@code Stream} equivalent:</b> {@link Stream#allMatch} (same).
34 A sensible default implementation of {@link #listIterator(int)}, in terms of {@link #size}, {@link #get(int)}, {@link #set(int, Object)}, {@link #add(int, Object)}, and {@link #remove(int)}. If you override any of these methods, you may wish to override {@link #listIterator(int)} to forward to this implementation. @since 7.0
35 Returns a view of the sorted set as a map, mapping keys from the set according to the specified function. <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code entrySet} views of the returned map iterate in the same order as the backing set. <p>Modifications to the backing set are read through to the returned map. The returned map supports removal operations if the backing set does. Removal operations write through to the backing set. The returned map does not support put operations. <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the set does not contain {@code null}, because the view cannot stop {@code null} from being added to the set. <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the resulting map view. @since 14.0
36 Returns a view of a sorted map whose values are derived from the original sorted map's entries. In contrast to {@link #transformValues}, this method's entry-transformation logic may depend on the key as well as the value. <p>All other properties of the transformed map, such as iteration order, are left intact. For example, the code: {@snippet : Map<String, Boolean> options = ImmutableSortedMap.of("verbose", true, "sort", false); EntryTransformer<String, Boolean, String> flagPrefixer = new EntryTransformer<String, Boolean, String>() { public String transformEntry(String key, Boolean value) { return value ? key : "yes" + key; } }; SortedMap<String, String> transformed = Maps.transformEntries(options, flagPrefixer); System.out.println(transformed); } ... prints {@code {sort=yessort, verbose=verbose}}. <p>Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. <p>It's acceptable for the underlying map to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed map might contain null values if the transformer sometimes gives a null result. <p>The returned map is not thread-safe or serializable, even if the underlying map is. <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the transformer will be applied many times for bulk operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing. <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the transformed map. @since 11.0
37 Returns a view of a map where each value is transformed by a function. All other properties of the map, such as iteration order, are left intact. For example, the code: {@snippet : Map<String, Integer> map = ImmutableMap.of("a", 4, "b", 9); Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in); Map<String, Double> transformed = Maps.transformValues(map, sqrt); System.out.println(transformed); } ... prints {@code {a=2.0, b=3.0}}. <p>Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. <p>It's acceptable for the underlying map to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed map might contain null values, if the function sometimes gives a null result. <p>The returned map is not thread-safe or serializable, even if the underlying map is. <p>The function is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the function will be applied many times for bulk operations like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing.
38 {@inheritDoc} @throws IllegalArgumentException if the call would result in more than {@link Integer#MAX_VALUE} occurrences of {@code element} in this multiset.
39 Adds a number of occurrences of the specified element to this multiset. @param element the element to add @param occurrences the number of occurrences to add @return the previous count of the element before the operation; possibly zero @throws IllegalArgumentException if {@code occurrences} is negative, or if the resulting amount would exceed {@link Integer#MAX_VALUE}
40 Returns a view of a {@code ListMultimap} whose values are derived from the original multimap's entries. In contrast to {@link #transformValues(ListMultimap, Function)}, this method's entry-transformation logic may depend on the key as well as the value. <p>All other properties of the transformed multimap, such as iteration order, are left intact. For example, the code: {@snippet : Multimap<String, Integer> multimap = ImmutableMultimap.of("a", 1, "a", 4, "b", 6); EntryTransformer<String, Integer, String> transformer = new EntryTransformer<String, Integer, String>() { public String transformEntry(String key, Integer value) { return key + value; } }; Multimap<String, String> transformed = Multimaps.transformEntries(multimap, transformer); System.out.println(transformed); } ... prints {@code {"a"=["a1", "a4"], "b"=["b6"]}}. <p>Changes in the underlying multimap are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying multimap. <p>It's acceptable for the underlying multimap to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed multimap might contain null values if the transformer sometimes gives a null result. <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap is. <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned multimap to be a view, but it means that the transformer will be applied many times for bulk operations like {@link Multimap#containsValue} and {@link Object#toString}. For this to perform well, {@code transformer} should be fast. To avoid lazy evaluation when the returned multimap doesn't need to be a view, copy the returned multimap into a new multimap of your choosing. <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the transformed multimap. @since 7.0
41 Returns a view of a multimap where each value is transformed by a function. All other properties of the multimap, such as iteration order, are left intact. For example, the code: {@snippet : Multimap<String, Integer> multimap = ImmutableSetMultimap.of("a", 2, "b", -3, "b", -3, "a", 4, "c", 6); Function<Integer, String> square = new Function<Integer, String>() { public String apply(Integer in) { return Integer.toString(in * in); } }; Multimap<String, String> transformed = Multimaps.transformValues(multimap, square); System.out.println(transformed); } ... prints {@code {a=[4, 16], b=[9, 9], c=[36]}}. <p>Changes in the underlying multimap are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying multimap. <p>It's acceptable for the underlying multimap to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed multimap might contain null values, if the function sometimes gives a null result. <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap is. The {@code equals} and {@code hashCode} methods of the returned multimap are meaningless, since there is not a definition of {@code equals} or {@code hashCode} for general collections, and {@code get()} will return a general {@code Collection} as opposed to a {@code List} or a {@code Set}. <p>The function is applied lazily, invoked when needed. This is necessary for the returned multimap to be a view, but it means that the function will be applied many times for bulk operations like {@link Multimap#containsValue} and {@code Multimap.toString()}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned multimap doesn't need to be a view, copy the returned multimap into a new multimap of your choosing. @since 7.0
42 Adds each element of {@code elements} to the {@code ImmutableSortedMultiset}. @param elements the {@code Iterable} to add to the {@code ImmutableSortedMultiset} @return this {@code Builder} object @throws NullPointerException if {@code elements} is null or contains a null element
43 An implementation of {@link Multiset#addAll}.
44 @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #contains} instead.
45 Returns a {@link Collector} that accumulates elements into a {@code Table} created using the specified supplier, whose cells are generated by applying the provided mapping functions to the input elements. Cells are inserted into the generated {@code Table} in encounter order. <p>If multiple input elements map to the same row and column, an {@code IllegalStateException} is thrown when the collection operation is performed. <p>To collect to an {@link ImmutableTable}, use {@link ImmutableTable#toImmutableTable}. @since 21.0
46 Returns the escaped form of a given literal string, starting at the given index. This method is called by the {@link #escape(String)} method when it discovers that escaping is required. It is protected to allow subclasses to override the fastpath escaping function to inline their escaping test. See {@link CharEscaperBuilder} for an example usage. <p>This method is not reentrant and may only be invoked by the top level {@link #escape(String)} method. @param s the literal string to be escaped @param index the index to start escaping from @return the escaped form of {@code string} @throws NullPointerException if {@code string} is null @throws IllegalArgumentException if invalid surrogate characters are encountered
47 Constructs a graph with the properties specified in {@code builder}, initialized with the given node and edge maps.
48 Constructs a graph with the properties specified in {@code builder}, initialized with the given node map.
49 Copies all characters between the {@link Readable} and {@link Appendable} objects. Does not close or flush either object. @param from the object to read from @param to the object to write to @return the number of characters copied @throws IOException if an I/O error occurs
50 Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the inverse operation to {@link #encode(byte[])}. @throws IllegalArgumentException if the input is not a valid encoded string according to this encoding.
51 Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to {@code BigInteger.valueOf(2).pow(log2(x, CEILING))}. @throws IllegalArgumentException if {@code x <= 0} @since 20.0
52 Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code BigInteger.valueOf(2).pow(log2(x, FLOOR))}. @throws IllegalArgumentException if {@code x <= 0} @since 20.0
53 Returns {@link Invokable} of {@code constructor}.
54 Returns {@link Invokable} of {@code method}.
55 Unblocks all threads and runs all listeners.
56 Adds {@code delta} to the value currently associated with {@code key}, and returns the new value.
57 Adds {@code delta} to the value currently associated with {@code key}, and returns the old value.
58 Copies all of the mappings from the specified map to this map. The effect of this call is equivalent to that of calling {@code put(k, v)} on this map once for each mapping from key {@code k} to value {@code v} in the specified map. The behavior of this operation is undefined if the specified map is modified while the operation is in progress.
59 Creates a new instance with the specified edge directionality. @param directed if true, creates an instance for graphs whose edges are each directed; if false, creates an instance for graphs whose edges are each undirected.
60 Adds a listener that will be called using the given executor when events are later {@link #enqueue enqueued} and {@link #dispatch dispatched}.
61 Returns a representation of {@code a} as an instance of type {@code B}. @return the converted value; is null <i>if and only if</i> {@code a} is null
62 Constructs a new empty instance of {@code CompactHashMap}.
63 Constructs a new instance of {@code CompactHashMap} with the specified capacity. @param expectedSize the initial capacity of this {@code CompactHashMap}.
64 Constructs a new empty instance of {@code CompactHashSet}.
65 Constructs a new instance of {@code CompactHashSet} with the specified capacity. @param expectedSize the initial capacity of this {@code CompactHashSet}.
66 Returns the simple name of the underlying class as given in the source code. <p>Behaves similarly to {@link Class#getSimpleName()} but does not require the class to be loaded. <p>But note that this class uses heuristics to identify the simple name. See a related discussion in <a href="https://github.com/google/guava/issues/3349">issue 3349</a>.
67 Creates a new multimap that uses the provided map. @param map place to store the mapping from each key to its corresponding values
68 Creates a new {@code Multimap} backed by {@code map}, whose internal value collections are generated by {@code factory}. Most users should prefer {@link MultimapBuilder}, though a small number of users will need this method to cover map or collection types that {@link MultimapBuilder} does not support. <p><b>Warning: do not use</b> this method when the collections returned by {@code factory} implement either {@link List} or {@code Set}! Use the more specific method {@link #newListMultimap}, {@link #newSetMultimap} or {@link #newSortedSetMultimap} instead, to avoid very surprising behavior from {@link Multimap#equals}. <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code toString} methods for the multimap and its returned views. However, the multimap's {@code get} method returns instances of a different class than {@code factory.get()} does. <p>The multimap is serializable if {@code map}, {@code factory}, the collections generated by {@code factory}, and the multimap contents are all serializable. <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if {@code map} and the instances generated by {@code factory} are. Concurrent read operations will work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link #synchronizedMultimap}. <p>Call this method only when the simpler methods {@link ArrayListMultimap#create()}, {@link HashMultimap#create()}, {@link LinkedHashMultimap#create()}, {@link LinkedListMultimap#create()}, {@link TreeMultimap#create()}, and {@link TreeMultimap#create(Comparator, Comparator)} won't suffice. <p>Note: the multimap assumes complete ownership over of {@code map} and the collections returned by {@code factory}. Those objects should not be manually updated and they should not use soft, weak, or phantom references. @param map place to store the mapping from each key to its corresponding values @param factory supplier of new, empty collections that will each hold all values for a given key @throws IllegalArgumentException if {@code map} is not empty
69 Creates a new, empty {@code HashMultiset} using the default initial capacity.
70 Creates a new, empty {@code LinkedHashMultiset} using the default initial capacity.
71 Returns a new {@code EnumMultiset} instance containing the given elements. Unlike {@link EnumMultiset#create(Iterable)}, this method does not produce an exception on an empty iterable. @since 14.0
72 Returns the <a href="http://en.wikipedia.org/wiki/Standard_deviation#Definition_of_population_values"> population standard deviation</a> of the values. The count must be non-zero. <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty
73 Returns the <a href="http://en.wikipedia.org/wiki/Standard_deviation#Corrected_sample_standard_deviation"> corrected sample standard deviation</a> of the values. If this dataset is a sample drawn from a population, this is an estimator of the population standard deviation of the population which is less biased than {@link #populationStandardDeviation()} (the unbiased estimator depends on the distribution). The count must be greater than one. <p>This is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty or contains a single value
74 Returns the <a href="http://en.wikipedia.org/wiki/Standard_deviation#Definition_of_population_values"> population standard deviation</a> of the values. The count must be non-zero. <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty
75 Returns the <a href="http://en.wikipedia.org/wiki/Standard_deviation#Corrected_sample_standard_deviation"> corrected sample standard deviation</a> of the values. If this dataset is a sample drawn from a population, this is an estimator of the population standard deviation of the population which is less biased than {@link #populationStandardDeviation()} (the unbiased estimator depends on the distribution). The count must be greater than one. <p>This is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty or contains a single value
76 Returns a {@code char} matcher that matches any BMP character not present in the given character sequence. Returns a bogus matcher if the sequence contains supplementary characters.
77 Returns a serializable {@code Converter} that converts strings from this format to {@code targetFormat}. @since 16.0
78 Package-private non-final implementation of andThen() so only we can override it.
79 Returns the reversed view of this converter, which converts {@code this.convert(a)} back to a value roughly equivalent to {@code a}. <p>The returned converter is serializable if {@code this} converter is. <p><b>Note:</b> you should not override this method. It is non-final for legacy reasons.
80 Returns a serializable converter that converts between strings and {@code enum} values of type {@code enumClass} using {@link Enum#valueOf(Class, String)} and {@link Enum#name()}. The converter will throw an {@code IllegalArgumentException} if the argument is not the name of any enum constant in the specified enum. @since 16.0
81 Returns a {@link Converter} that converts values using {@link BiMap#get bimap.get()}, and whose inverse view converts values using {@link BiMap#inverse bimap.inverse()}{@code .get()}. <p>To use a plain {@link Map} as a {@link Function}, see {@link com.google.common.base.Functions#forMap(Map)} or {@link com.google.common.base.Functions#forMap(Map, Object)}. @since 16.0
82 A sensible definition of {@link #equals(Object)} in terms of {@link #size} and {@link #iterator}. If you override either of those methods, you may wish to override {@link #equals(Object)} to forward to this implementation. @since 7.0
83 Creates a new {@code ConcurrentHashMultiset} containing the specified elements, using the default initial capacity, load factor, and concurrency settings. <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}. @param elements the elements that the multiset should contain
84 Appends the string representation of each of {@code parts}, using the previously configured separator between each, to {@code appendable}.
85 Appends the string representation of each of {@code parts}, using the previously configured separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.
86 Returns a string containing the string representation of each of {@code parts}, using the previously configured separator between each. @since 11.0
87 Returns a string containing the string representation of each entry of {@code map}, using the previously configured separator and key-value separator.
88 Returns a string representation for this CacheBuilderSpec instance. The form of this representation is not guaranteed.
89 Returns a string representation for this MapMaker instance. The exact form of the returned string is not specified.
90 Returns a string representation for this CacheBuilder instance. The exact form of the returned string is not specified.
91 Creates a new, empty map with the specified strategy, initial capacity and concurrency level.
92 Returns the equivalent {@code com.google.common.base.Optional} value to the given {@code java.util.Optional}, or {@code null} if the argument is null. @since 21.0 (but only since 33.4.0 in the Android flavor)
93 Build a HostAndPort instance from separate host and port values. <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to prohibit these. @param host the host string to parse. Must not contain a port number. @param port a port number from [0..65535] @return if parsing was successful, a populated HostAndPort object. @throws IllegalArgumentException if {@code host} contains a port number, or {@code port} is out of range.
94 Build a HostAndPort instance from a host only. <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to prohibit these. @param host the host-only string to parse. Must not contain a port number. @return if parsing was successful, a populated HostAndPort object. @throws IllegalArgumentException if {@code host} contains a port number. @since 17.0
95 Returns the element at the specified position in an iterable. <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (throws {@code NoSuchElementException} if out of bounds) @param position position of the element to return @return the element at the specified position in {@code iterable} @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to the size of {@code iterable}
96 Creates a new {@code BloomFilter} that's a copy of this instance. The new instance is equal to this instance but shares no mutable state. @since 12.0
97 Acquires the given number of permits from this {@code RateLimiter}, blocking until the request can be granted. Tells the amount of time slept, if any. @param permits the number of permits to acquire @return time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited @throws IllegalArgumentException if the requested number of permits is negative or zero @since 16.0 (present in 13.0 with {@code void} return type})
98 Acquires a permit from this {@code RateLimiter} if it can be obtained without exceeding the specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permit would not have been granted before the timeout expired. <p>This method is equivalent to {@code tryAcquire(1, timeout)}. @param timeout the maximum time to wait for the permit. Negative values are treated as zero. @return {@code true} if the permit was acquired, {@code false} otherwise @throws IllegalArgumentException if the requested number of permits is negative or zero @since 28.0 (but only since 33.4.0 in the Android flavor)
99 Acquires a permit from this {@code RateLimiter} if it can be obtained without exceeding the specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permit would not have been granted before the timeout expired. <p>This method is equivalent to {@code tryAcquire(1, timeout, unit)}. @param timeout the maximum time to wait for the permit. Negative values are treated as zero. @param unit the time unit of the timeout argument @return {@code true} if the permit was acquired, {@code false} otherwise @throws IllegalArgumentException if the requested number of permits is negative or zero
100 Acquires permits from this {@link RateLimiter} if it can be acquired immediately without delay. <p>This method is equivalent to {@code tryAcquire(permits, 0, anyUnit)}. @param permits the number of permits to acquire @return {@code true} if the permits were acquired, {@code false} otherwise @throws IllegalArgumentException if the requested number of permits is negative or zero @since 14.0
101 Acquires a permit from this {@link RateLimiter} if it can be acquired immediately without delay. <p>This method is equivalent to {@code tryAcquire(1)}. @return {@code true} if the permit was acquired, {@code false} otherwise @since 14.0
102 Acquires the given number of permits from this {@code RateLimiter} if it can be obtained without exceeding the specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permits would not have been granted before the timeout expired. @param permits the number of permits to acquire @param timeout the maximum time to wait for the permits. Negative values are treated as zero. @return {@code true} if the permits were acquired, {@code false} otherwise @throws IllegalArgumentException if the requested number of permits is negative or zero @since 28.0 (but only since 33.4.0 in the Android flavor)
103 Enters this monitor. Blocks at most the given time. @return whether the monitor was entered
104 Constructor for use by subclasses.
105 Returns {@code true} if the MinMax heap structure holds. This is only used in testing. <p>TODO(kevinb): move to the test class?
106 Returns a CacheBuilder configured according to this instance's specification.
107 Configures the given map maker to use weak keys, if possible; does nothing otherwise (i.e., in GWT). This is sometimes acceptable, when only server-side code could generate enough volume that reclamation becomes important.
108 Checks that the current state is equal to the expected state.
109 Returns the value corresponding to the specified row and column indices. The same value is returned by {@code get(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex))}, but this method runs more quickly. @param rowIndex position of the row key in {@link #rowKeyList()} @param columnIndex position of the row key in {@link #columnKeyList()} @return the value with the specified row and column @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal to the number of allowed column keys
110 Associates {@code value} with the specified row and column indices. The logic {@code put(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex), value)} has the same behavior, but this method runs more quickly. @param rowIndex position of the row key in {@link #rowKeyList()} @param columnIndex position of the row key in {@link #columnKeyList()} @param value value to store in the table @return the previous value with the specified row and column @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal to the number of allowed column keys
111 Returns the {@code double} value present at the given index. @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to {@link #length}
112 Returns the {@code int} value present at the given index. @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to {@link #length}
113 Returns the {@code long} value present at the given index. @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to {@link #length}
114 Returns the index of the first matching BMP character in a character sequence, starting from a given position, or {@code -1} if no character matches after that position. <p>The default implementation iterates over the sequence in forward order, beginning at {@code start}, calling {@link #matches} for each character. @param sequence the character sequence to examine @param start the first index to examine; must be nonnegative and no greater than {@code sequence.length()} @return the index of the first matching character, guaranteed to be no less than {@code start}, or {@code -1} if no character matches @throws IndexOutOfBoundsException if start is negative or greater than {@code sequence.length()}
115 Constructs an iterator across a sequence of the given size with the given initial position. That is, the first call to {@link #nextIndex()} will return {@code position}, and the first call to {@link #next()} will return the element at that index, if available. Calls to {@link #previous()} can retrieve the preceding {@code position} elements. @throws IndexOutOfBoundsException if {@code position} is negative or is greater than {@code size} @throws IllegalArgumentException if {@code size} is negative
116 Returns a new {@link ByteArrayDataInput} instance to read from the {@code bytes} array, starting at the given position. @throws IndexOutOfBoundsException if {@code start} is negative or greater than the length of the array
117 Returns whether the given byte array slice is a well-formed UTF-8 byte sequence, as defined by {@link #isWellFormed(byte[])}. Note that this can be false even when {@code isWellFormed(bytes)} is true. @param bytes the input buffer @param off the offset in the buffer of the first byte to read @param len the number of bytes to read from the buffer
118 Implementation of {@link Collection#toArray(Object[])} for collections backed by an object array. the runtime type of the returned array is that of the specified array. If the collection fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of the specified collection. <p>If the collection fits in the specified array with room to spare (i.e., the array has more elements than the collection), the element in the array immediately following the end of the collection is set to {@code null}. This is useful in determining the length of the collection <i>only</i> if the caller knows that the collection does not contain any null elements.
119 Returns a copy of the specified subrange of the specified array that is literally an Object[], and not e.g. a {@code String[]}.
120 Copies bytes from this hash code into {@code dest}. @param dest the byte array into which the hash code will be written @param offset the start offset in the data @param maxLength the maximum number of bytes to write @return the number of bytes written to {@code dest} @throws IndexOutOfBoundsException if there is not enough room in {@code dest}
121 Encodes the specified range of the specified byte array, and returns the encoded {@code String}.
122 Reads some bytes from an input stream and stores them into the buffer array {@code b}. This method blocks until {@code len} bytes of input data have been read into the array, or end of file is detected. The number of bytes read is returned, possibly zero. Does not close the stream. <p>A caller can detect EOF if the number of bytes read is less than {@code len}. All subsequent calls on the same stream will return zero. <p>If {@code b} is null, a {@code NullPointerException} is thrown. If {@code off} is negative, or {@code len} is negative, or {@code off+len} is greater than the length of the array {@code b}, then an {@code IndexOutOfBoundsException} is thrown. If {@code len} is zero, then no bytes are read. Otherwise, the first byte read is stored into element {@code b[off]}, the next one into {@code b[off+1]}, and so on. The number of bytes read is, at most, equal to {@code len}. @param in the input stream to read from @param b the buffer into which the data is read @param off an int specifying the offset into the data @param len an int specifying the number of bytes to read @return the number of bytes read @throws IOException if an I/O error occurs @throws IndexOutOfBoundsException if {@code off} is negative, if {@code len} is negative, or if {@code off + len} is greater than {@code b.length}
123 Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.reverse(Booleans.asList(array).subList(fromIndex, toIndex))}, but is likely to be more efficient. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 23.1
124 Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.reverse(Bytes.asList(array).subList(fromIndex, toIndex))}, but is likely to be more efficient. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 23.1
125 Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.reverse(Chars.asList(array).subList(fromIndex, toIndex))}, but is likely to be more efficient. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 23.1
126 Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.reverse(Doubles.asList(array).subList(fromIndex, toIndex))}, but is likely to be more efficient. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 23.1
127 Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.reverse(Floats.asList(array).subList(fromIndex, toIndex))}, but is likely to be more efficient. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 23.1
128 Returns a new immutable array containing the values in the specified range. <p><b>Performance note:</b> The returned array has the same full memory footprint as this one does (no actual copying is performed). To reduce memory usage, use {@code subArray(start, end).trimmed()}.
129 Returns a new immutable array containing the values in the specified range. <p><b>Performance note:</b> The returned array has the same full memory footprint as this one does (no actual copying is performed). To reduce memory usage, use {@code subArray(start, end).trimmed()}.
130 Returns a new immutable array containing the values in the specified range. <p><b>Performance note:</b> The returned array has the same full memory footprint as this one does (no actual copying is performed). To reduce memory usage, use {@code subArray(start, end).trimmed()}.
131 Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.reverse(Ints.asList(array).subList(fromIndex, toIndex))}, but is likely to be more efficient. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 23.1
132 Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.reverse(Longs.asList(array).subList(fromIndex, toIndex))}, but is likely to be more efficient. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 23.1
133 Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.reverse(Shorts.asList(array).subList(fromIndex, toIndex))}, but is likely to be more efficient. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 23.1
134 Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its elements as unsigned bytes. @since 23.1
135 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order, interpreting them as unsigned 8-bit integers. @since 23.1
136 Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its elements as unsigned 32-bit integers. @since 23.1
137 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order, interpreting them as unsigned 32-bit integers. @since 23.1
138 Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its elements as unsigned 64-bit integers. @since 23.1
139 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order, interpreting them as unsigned 64-bit integers. @since 23.1
140 Returns the elements of {@code unfiltered} that satisfy a predicate. The returned collection is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting collection's iterator does not support {@code remove()}, but all other collection methods are supported. When given an element that doesn't satisfy the predicate, the collection's {@code add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods such as {@code removeAll()} and {@code clear()} are called on the filtered collection, only elements that satisfy the filter will be removed from the underlying collection. <p>The returned collection isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered collection's methods, such as {@code size()}, iterate across every element in the underlying collection and determine which elements satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and use the copy. <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link Iterables#filter(Iterable, Class)} for related functionality.) <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#filter Stream.filter}.
141 Returns a splitter that uses the given single-character separator. For example, {@code Splitter.on(',').split("foo,,bar")} returns an iterable containing {@code ["foo", "", "bar"]}. @param separator the character to recognize as a separator @return a splitter, with default settings, that recognizes that separator
142 Constructor for use by subclasses.
143 Constructs a new finalizer thread.
144 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableListMultimap#builder}.
145 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
146 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableSetMultimap#builder}.
147 Constructor for use by subclasses.
148 Constructor for use by subclasses.
149 Constructor for use by subclasses.
150 Constructor for use by subclasses.
151 Constructor for use by subclasses.
152 Returns an unmodifiable view of the specified bimap. This method allows modules to provide users with "read-only" access to internal bimaps. Query operations on the returned bimap "read through" to the specified bimap, and attempts to modify the returned map, whether direct or via its collection views, result in an {@code UnsupportedOperationException}. <p>The returned bimap will be serializable if the specified bimap is serializable. @param bimap the bimap for which an unmodifiable view is to be returned @return an unmodifiable view of the specified bimap
153 Returns a new {@code MutableClassToInstanceMap} instance backed by a {@link HashMap} using the default initial capacity and load factor.
154 Returns a new {@code MutableClassToInstanceMap} instance backed by a given empty {@code backingMap}. The caller surrenders control of the backing map, and thus should not allow any direct references to it to remain accessible.
155 Returns an empty type to instance map.
156 Constructor for use by subclasses.
157 Returns an unmodifiable view of the specified multimap. Query operations on the returned multimap "read through" to the specified multimap, and attempts to modify the returned multimap, either directly or through the multimap's views, result in an {@code UnsupportedOperationException}. <p>The returned multimap will be serializable if the specified multimap is serializable. @param delegate the multimap for which an unmodifiable view is to be returned @return an unmodifiable view of the specified multimap
158 Returns an unmodifiable view of the specified table. This method allows modules to provide users with "read-only" access to internal tables. Query operations on the returned table "read through" to the specified table, and attempts to modify the returned table, whether direct or via its collection views, result in an {@code UnsupportedOperationException}. <p>The returned table will be serializable if the specified table is serializable. <p>Consider using an {@link ImmutableTable}, which is guaranteed never to change. @since 11.0
159 Submits a blocking task for the given {@link Future} to provide {@link ListenableFuture} functionality. <p><b>Warning:</b> If the input future does not already implement {@code ListenableFuture}, the returned future will emulate {@link ListenableFuture#addListener} by submitting a task to the given executor at the first call to {@code addListener}. The task must be started by the executor promptly, or else the returned {@code ListenableFuture} may fail to work. The task's execution consists of blocking until the input future is {@linkplain Future#isDone() done}, so each call to this method may claim and hold a thread for an arbitrary length of time. Use of bounded executors or other executors that may fail to execute a task promptly may result in deadlocks. <p>Prefer to create {@code ListenableFuture} instances with {@link SettableFuture}, {@link MoreExecutors#listeningDecorator( java.util.concurrent.ExecutorService)}, {@link ListenableFutureTask}, {@link AbstractFuture}, and other utilities over creating plain {@code Future} instances to be upgraded to {@code ListenableFuture} after the fact. @since 12.0
160 @since 11.0
161 @since 11.0
162 @since 11.0
163 @since 11.0
164 @since 12.0
165 @since 11.0
166 Creates a new entry. @param segment to create the entry for @param key of the entry @param hash of the key @param next entry in the same bucket
167 Creates a new entry. @param segment to create the entry for @param key of the entry @param hash of the key @param next entry in the same bucket
168 Creates a new entry. @param segment to create the entry for @param key of the entry @param hash of the key @param next entry in the same bucket
169 Creates a new entry. @param segment to create the entry for @param key of the entry @param hash of the key @param next entry in the same bucket
170 Creates a new entry. @param segment to create the entry for @param key of the entry @param hash of the key @param next entry in the same bucket
171 Creates a new entry. @param segment to create the entry for @param key of the entry @param hash of the key @param next entry in the same bucket
172 Sets a new value of an entry. Adds newly created entries at the end of the access queue.
173 Returns the number of elements in this fluent iterable. <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.
174 Returns the number of edges in this graph; used to calculate the size of {@link Graph#edges()}. This implementation requires O(|N|) time. Classes extending this one may manually keep track of the number of edges as the graph is updated, and override this method for better performance.
175 Reads all bytes from an input stream into a byte array. Does not close the stream. <p><b>Java 9+ users:</b> use {@code in#readAllBytes()} instead. @param in the input stream to read from @return a byte array containing all the bytes from the stream @throws IOException if an I/O error occurs
176 Reads all bytes from an input stream into a byte array. The given expected size is used to create an initial byte array, but if the actual number of bytes read from the stream differs, the correct result will be returned anyway.
177 Package-private constructor for creating a map-backed bimap.
178 {@inheritDoc} <p>Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a {@link List}, instead of the {@link Collection} specified in the {@link Multimap} interface.
179 {@inheritDoc} <p>The returned collection is immutable.
180 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.
181 Returns a collection view of all values associated with a key. If no mappings in the multimap have the provided key, an empty collection is returned. <p>Changes to the returned collection will update the underlying multimap, and vice versa. <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link Multimap} interface.
182 A sensible definition of {@link #toString} in terms of {@link #iterator}. If you override {@link #iterator}, you may wish to override {@link #toString} to forward to this implementation. @since 7.0
183 A sensible definition of {@link #toString} in terms of the {@code iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #toString} to forward to this implementation. @since 7.0
184 Returns the platform preferred implementation of a map based on a hash table.
185 Returns true if {@code graph} has at least one cycle. A cycle is defined as a non-empty subset of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges) starting and ending with the same node. <p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).
186 Creates an empty {@code HashBasedTable} with the specified map sizes. @param expectedRows the expected number of distinct row keys @param expectedCellsPerRow the expected number of column key / value mappings in each row @throws IllegalArgumentException if {@code expectedRows} or {@code expectedCellsPerRow} is negative
187 Returns the platform preferred implementation of an insertion ordered map based on a hash table.
188 Returns an empty mutable map whose keys will respect this {@link ElementOrder}.
189 Returns the platform preferred implementation of a set based on a hash table.
190 Returns the platform preferred implementation of an insertion ordered set based on a hash table.
191 It is implicitly assumed that all the services are NEW and that they will all remain NEW until all the Listeners are installed and {@link #markReady()} is called. It is our caller's responsibility to only call {@link #markReady()} if all services were new at the time this method was called and when all the listeners were installed.
192 A sensible definition of {@link #firstEntry()} in terms of {@code entrySet().iterator()}. <p>If you override {@link #entrySet()}, you may wish to override {@link #firstEntry()} to forward to this implementation.
193 A sensible definition of {@link #lastEntry()} in terms of {@code descendingMultiset().entrySet().iterator()}. <p>If you override {@link #descendingMultiset} or {@link #entrySet()}, you may wish to override {@link #firstEntry()} to forward to this implementation.
194 A sensible definition of {@link #pollFirstEntry()} in terms of {@code entrySet().iterator()}. <p>If you override {@link #entrySet()}, you may wish to override {@link #pollFirstEntry()} to forward to this implementation.
195 A sensible definition of {@link #pollLastEntry()} in terms of {@code descendingMultiset().entrySet().iterator()}. <p>If you override {@link #descendingMultiset()} or {@link #entrySet()}, you may wish to override {@link #pollLastEntry()} to forward to this implementation.
196 {@inheritDoc} <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the current count of that element in the multiset, as opposed to the count at the time the entry was retrieved.
197 {@inheritDoc} <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the current count of that element in the multiset, as opposed to the count at the time the entry was retrieved.
198 Returns a {@code TreeRangeSet} initialized with the ranges in the specified range set.
199 Returns a {@code TreeRangeSet} representing the union of the specified ranges. <p>This is the smallest {@code RangeSet} which encloses each of the specified ranges. An element will be contained in this {@code RangeSet} if and only if it is contained in at least one {@code Range} in {@code ranges}. @since 21.0
200 {@inheritDoc} <p>Because a {@code TreeMultimap} has unique sorted keys, this method returns a {@link NavigableMap}, instead of the {@link java.util.Map} specified in the {@link Multimap} interface. @since 14.0 (present with return type {@code SortedMap} since 2.0)
201 {@inheritDoc} <p>The set's iterator traverses the mappings for the first row, the mappings for the second row, and so on. <p>Each cell is an immutable snapshot of a row key / column key / value mapping, taken at the time the cell is returned by a method call to the set or its iterator.
202 {@inheritDoc} <p>The collection's iterator traverses the values for the first row, the values for the second row, and so on.
203 Returns the same range relative to the reversed comparator.
204 Verifies that {@code rowKey}, {@code columnKey} and {@code value} are non-null, and returns a new entry with those values.
205 @since 21.0 (present with return type {@code Set} since 2.0)
206 Associates {@code key} with {@code value} in the built map. If the same key is put more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last value put for that key.
207 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided
208 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided
209 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided
210 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided
211 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided @since 31.0
212 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided @since 31.0
213 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided @since 31.0
214 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided @since 31.0
215 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided @since 31.0
216 Makes an entry usable internally by a new ImmutableMap.
217 {@inheritDoc} @since 11.0
218 Adds entries to the built multimap. @since 19.0
219 Adds an entry to the built multimap if it is not already present. @since 11.0
220 Returns the elements of a {@code SortedSet}, {@code unfiltered}, that satisfy a predicate. The returned set is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting set's iterator does not support {@code remove()}, but all other set methods are supported. When given an element that doesn't satisfy the predicate, the set's {@code add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods such as {@code removeAll()} and {@code clear()} are called on the filtered set, only elements that satisfy the filter will be removed from the underlying set. <p>The returned set isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered set's methods, such as {@code size()}, iterate across every element in the underlying set and determine which elements satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and use the copy. <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link Iterables#filter(Iterable, Class)} for related functionality.) @since 11.0
221 Ensures that this {@code CompactHashMap} has the smallest representation in memory, given its current size.
222 Ensures that this {@code CompactHashSet} has the smallest representation in memory, given its current size.
223 Returns {@code true} if this range is of the form {@code [v..v)} or {@code (v..v]}. (This does not encompass ranges of the form {@code (v..v)}, because such ranges are <i>invalid</i> and can't be constructed at all.) <p>Note that certain discrete ranges such as the integer range {@code (3..4)} are <b>not</b> considered empty, even though they contain no actual values. In these cases, it may be helpful to preprocess ranges with {@link #canonical(DiscreteDomain)}.
224 Returns {@code true} if {@code object} is a range having the same endpoints and bound types as this range. Note that discrete ranges such as {@code (1..4)} and {@code [2..3]} are <b>not</b> equal to one another, despite the fact that they each contain precisely the same set of values. Similarly, empty ranges are not equal unless they have exactly the same representation, so {@code [3..3)}, {@code (3..3]}, {@code (4..4]} are all unequal.
225 A sensible default implementation of {@link #add(Object)}, in terms of {@link #add(int, Object)}. If you override {@link #add(int, Object)}, you may wish to override {@link #add(Object)} to forward to this implementation. @since 7.0
226 A sensible default implementation of {@link #iterator}, in terms of {@link #listIterator()}. If you override {@link #listIterator()}, you may wish to override {@link #iterator} to forward to this implementation. @since 7.0
227 A sensible default implementation of {@link #listIterator()}, in terms of {@link #listIterator(int)}. If you override {@link #listIterator(int)}, you may wish to override {@link #listIterator()} to forward to this implementation. @since 7.0
228 Returns the first node in the tree that is in range.
229 Creates a {@code HashBasedTable} with the same mappings as the specified table. @param table the table to copy @throws NullPointerException if any of the row keys, column keys, or values in {@code table} is null
230 Creates an empty {@code TreeBasedTable} that uses the natural orderings of both row and column keys. <p>The method signature specifies {@code R extends Comparable} with a raw {@link Comparable}, instead of {@code R extends Comparable<? super R>}, and the same for {@code C}. That's necessary to support classes defined without generics.
231 Creates an empty {@code TreeBasedTable} that is ordered by the specified comparators. @param rowComparator the comparator that orders the row keys @param columnComparator the comparator that orders the column keys
232 Constructs a new, empty bimap with the specified expected size. @param expectedSize the expected number of entries @throws IllegalArgumentException if the specified expected size is negative
233 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
234 Creates a new builder.
235 Returns a builder that creates immutable sorted maps whose keys are ordered by their natural ordering. The sorted maps use {@link Ordering#natural()} as the comparator.
236 Returns a builder that creates immutable sorted maps with an explicit comparator. If the comparator has a more general type than the map's keys, such as creating a {@code SortedMap<Integer, String>} with a {@code Comparator<Number>}, use the {@link Builder} constructor instead. @throws NullPointerException if {@code comparator} is null
237 Returns a builder that creates immutable sorted maps whose keys are ordered by the reverse of their natural ordering.
238 Returns an immutable map containing a single entry. This map behaves and performs comparably to {@link Collections#singletonMap} but will not accept a null key or value. It is preferable mainly for consistency and maintainability of your code.
239 {@inheritDoc} <p>The inverse of an {@code ImmutableBiMap} is another {@code ImmutableBiMap}.
240 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
241 Returns a builder that creates immutable sorted sets with an explicit comparator. If the comparator has a more general type than the set being generated, such as creating a {@code SortedSet<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor instead. @throws NullPointerException if {@code comparator} is null
242 Returns a builder that creates immutable sorted sets whose elements are ordered by the reverse of their natural ordering.
243 Returns a builder that creates immutable sorted sets whose elements are ordered by their natural ordering. The sorted sets use {@link Ordering#natural()} as the comparator. This method provides more type-safety than {@link #builder}, as it can be called only for classes that implement {@link Comparable}.
244 Returns a view of this immutable list in reverse order. For example, {@code ImmutableList.of(1, 2, 3).reverse()} is equivalent to {@code ImmutableList.of(3, 2, 1)}. @return a view of this immutable list in reverse order @since 7.0
245 Returns a view of the specified string as an immutable list of {@code Character} values. @since 7.0
246 Returns an immutable list containing a single element. This list behaves and performs comparably to {@link Collections#singletonList}, but will not accept a null element. It is preferable mainly for consistency and maintainability of your code. @throws NullPointerException if the element is null
247 Returns an immutable collection of all key-value pairs in the multimap. Its iterator traverses the values for the first key, the values for the second key, and so on.
248 Returns an immutable set containing the given element. Preferred over {@link Collections#singleton} for code consistency, {@code null} rejection, and because the return type conveys the immutability guarantee.
249 Returns an optional charset for the value of the charset parameter if it is specified. @throws IllegalStateException if multiple charset values have been set for this media type @throws IllegalCharsetNameException if a charset value is present, but illegal @throws UnsupportedCharsetException if a charset value is present, but no support is available in this instance of the Java virtual machine
250 Initiates service {@linkplain Service#stopAsync shutdown} if necessary on all the services being managed. @return this
251 Returns true if all services are currently in the {@linkplain State#RUNNING running} state. <p>Users who want more detailed information should use the {@link #servicesByState} method to get detailed information about which services are not running.
252 Returns a new builder, expecting the specified number of distinct elements to be added. <p>If {@code expectedSize} is exactly the number of distinct elements added to the builder before {@link Builder#build} is called, the builder is likely to perform better than an unsized {@link #builder()} would have. <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to, but not exactly, the number of distinct elements added to the builder. @since 23.1
253 Stores another multimap's entries in the built multimap. The generated multimap's key and value orderings correspond to the iteration ordering of the {@code multimap.asMap()} view, with new keys and values following any existing keys and values. @throws NullPointerException if any key or value in {@code multimap} is null. The builder is left in an invalid state.
254 Throws an exception indicating that one or more files couldn't be deleted when deleting {@code path} or its contents. <p>If there is only one exception in the collection, and it is a {@link NoSuchFileException} thrown because {@code path} itself didn't exist, then throws that exception. Otherwise, the thrown exception contains all the exceptions in the given collection as suppressed exceptions.
255 Combines multiple iterators into a single iterator. The returned iterator iterates across the elements of each iterator in {@code inputs}. The input iterators are not polled until necessary. <p>The returned iterator supports {@code remove()} when the corresponding input iterator supports it. @throws NullPointerException if any of the provided iterators is null
256 Returns the internal entry for the specified key. The entry may be computing or partially collected. Does not impact recency ordering.
257 Performs routine cleanup following a read. Normally cleanup happens during writes, or from the cleanupExecutor. If cleanup is not observed after a sufficient number of reads, try cleaning up from the read thread.
258 A sensible definition of {@link #containsKey} in terms of the {@code firstKey()} method of {@link #tailMap}. If you override {@link #tailMap}, you may wish to override {@link #containsKey} to forward to this implementation. @since 7.0
259 A sensible default implementation of {@link #subMap(Object, Object)} in terms of {@link #headMap(Object)} and {@link #tailMap(Object)}. In some situations, you may wish to override {@link #subMap(Object, Object)} to forward to this implementation. @since 7.0
260 Computes the difference between two maps. This difference is an immutable snapshot of the state of the maps at the time this method is called. It will never change, even if the maps change at a later time. <p>Since this method uses {@code HashMap} instances internally, the keys of the supplied maps must be well-behaved with respect to {@link Object#equals} and {@link Object#hashCode}. @param left the map to treat as the "left" map for purposes of comparison @param right the map to treat as the "right" map for purposes of comparison @param valueEquivalence the equivalence relationship to use to compare values @return the difference between the two maps @since 10.0
261 Computes the difference between two sorted maps, using the comparator of the left map, or {@code Ordering.natural()} if the left map uses the natural ordering of its elements. This difference is an immutable snapshot of the state of the maps at the time this method is called. It will never change, even if the maps change at a later time. <p>Since this method uses {@code TreeMap} instances internally, the keys of the right map must all compare as distinct according to the comparator of the left map. <p><b>Note:</b>If you only need to know whether two sorted maps have the same mappings, call {@code left.equals(right)} instead of this method. @param left the map to treat as the "left" map for purposes of comparison @param right the map to treat as the "right" map for purposes of comparison @return the difference between the two maps @since 11.0
262 Creates a new AsyncEventBus that will use {@code executor} to dispatch events. Assigns {@code identifier} as the bus's name for logging purposes. @param identifier short name for the bus, for logging purposes. @param executor Executor to use to dispatch events. It is the caller's responsibility to shut down the executor after the last event has been posted to this event bus.
263 Creates a new AsyncEventBus that will use {@code executor} to dispatch events. @param executor Executor to use to dispatch events. It is the caller's responsibility to shut down the executor after the last event has been posted to this event bus. @param subscriberExceptionHandler Handler used to handle exceptions thrown from subscribers. See {@link SubscriberExceptionHandler} for more information. @since 16.0
264 Creates a new AsyncEventBus that will use {@code executor} to dispatch events. @param executor Executor to use to dispatch events. It is the caller's responsibility to shut down the executor after the last event has been posted to this event bus.
265 Creates a new EventBus with the given {@code identifier}. @param identifier a brief name for this bus, for logging purposes. Should be a valid Java identifier.
266 Creates a new EventBus with the given {@link SubscriberExceptionHandler}. @param exceptionHandler Handler for subscriber exceptions. @since 16.0
267 Returns the minimum child or {@code -1} if no child exists.
268 Returns the minimum grand child or -1 if no grand child exists.
269 Retrieves, but does not remove, the greatest element of this queue, or returns {@code null} if the queue is empty.
270 Bubbles a value from {@code index} up the appropriate heap if required.
271 A sensible definition of {@link #contains} in terms of {@link #count}. If you override {@link #count}, you may wish to override {@link #contains} to forward to this implementation. @since 7.0
272 A sensible definition of {@link #add(Object)} in terms of {@link #add(Object, int)}. If you override {@link #add(Object, int)}, you may wish to override {@link #add(Object)} to forward to this implementation. @since 7.0
273 A sensible definition of {@link #remove(Object)} in terms of {@link #remove(Object, int)}. If you override {@link #remove(Object, int)}, you may wish to override {@link #remove(Object)} to forward to this implementation. @since 7.0
274 A sensible definition of {@link #clear} in terms of the {@code iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #clear} to forward to this implementation. @since 7.0
275 A sensible, albeit inefficient, definition of {@link #count} in terms of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #count} to forward to this implementation. @since 7.0
276 A sensible definition of {@link #hashCode} as {@code entrySet().hashCode()} . If you override {@link #entrySet}, you may wish to override {@link #hashCode} to forward to this implementation. @since 7.0
277 A sensible definition of {@link #toString} as {@code entrySet().toString()} . If you override {@link #entrySet}, you may wish to override {@link #toString} to forward to this implementation. @since 7.0
278 A sensible definition of {@link #toArray(Object[])} in terms of {@link #size} and {@link #iterator}. If you override either of these methods, you may wish to override {@link #toArray} to forward to this implementation. @since 7.0
279 A sensible definition of {@link #pollLast} in terms of the {@code descendingIterator} method. If you override {@link #descendingIterator} you may wish to override {@link #pollLast} to forward to this implementation.
280 A sensible definition of {@link #subSet(Object, Object)} in terms of the {@link #subSet(Object, boolean, Object, boolean)} method. If you override {@link #subSet(Object, boolean, Object, boolean)}, you may wish to override {@link #subSet(Object, Object)} to forward to this implementation.
281 A sensible definition of {@link #lower} in terms of the {@code descendingIterator} method of {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may wish to override {@link #lower} to forward to this implementation.
282 A sensible definition of {@link #floor} in terms of the {@code descendingIterator} method of {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may wish to override {@link #floor} to forward to this implementation.
283 A sensible definition of {@link #headSet(Object)} in terms of the {@link #headSet(Object, boolean)} method. If you override {@link #headSet(Object, boolean)}, you may wish to override {@link #headSet(Object)} to forward to this implementation.
284 A sensible definition of {@link #ceiling} in terms of the {@code iterator} method of {@link #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may wish to override {@link #ceiling} to forward to this implementation.
285 A sensible definition of {@link #higher} in terms of the {@code iterator} method of {@link #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may wish to override {@link #higher} to forward to this implementation.
286 A sensible definition of {@link #subSet(Object, boolean, Object, boolean)} in terms of the {@code headSet} and {@code tailSet} methods. In many cases, you may wish to override {@link #subSet(Object, boolean, Object, boolean)} to forward to this implementation.
287 A sensible definition of {@link #tailSet(Object)} in terms of the {@link #tailSet(Object, boolean)} method. If you override {@link #tailSet(Object, boolean)}, you may wish to override {@link #tailSet(Object)} to forward to this implementation.
288 {@inheritDoc} <p>This method returns a {@link SortedSet}, instead of the {@code Set} specified in the {@link Table} interface.
289 {@inheritDoc} <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link Table} interface.
290 Returns a synchronized (thread-safe) deque backed by the specified deque. In order to guarantee serial access, it is critical that <b>all</b> access to the backing deque is accomplished through the returned deque. <p>It is imperative that the user manually synchronize on the returned deque when accessing any of the deque's iterators: {@snippet : Deque<E> deque = Queues.synchronizedDeque(Queues.<E>newArrayDeque()); ... deque.add(element); // Needn't be in synchronized block ... synchronized (deque) { // Must synchronize on deque! Iterator<E> i = deque.iterator(); // Must be in synchronized block while (i.hasNext()) { foo(i.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>The returned deque will be serializable if the specified deque is serializable. @param deque the deque to be wrapped in a synchronized view @return a synchronized view of the specified deque @since 15.0
291 Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe range. If {@code safeMax < safeMin} then no characters are considered safe. <p>If a character has no mapped replacement then it is checked against the safe range. If it lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed. @param replacementMap a map of characters to their escaped representations @param safeMin the lowest character value in the safe range @param safeMax the highest character value in the safe range
292 Convert this builder into a char escaper which is just a decorator around the underlying array of replacement char[]s. @return an escaper that escapes based on the underlying array.
293 Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified safe range. If {@code safeMax < safeMin} then no code points are considered safe. <p>If a code point has no mapped replacement then it is checked against the safe range. If it lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed. @param replacementMap a map of characters to their escaped representations @param safeMin the lowest character value in the safe range @param safeMax the highest character value in the safe range @param unsafeReplacement the default replacement for unsafe characters or null if no default replacement is required
294 Creates a {@code HashCode} from a byte array. The array is defensively copied to preserve the immutability contract of {@code HashCode}. The array cannot be empty. @since 15.0 (since 12.0 in HashCodes)
295 Creates a {@code HashCode} from a hexadecimal ({@code base 16}) encoded string. The string must be at least 2 characters long, and contain only valid, lower-cased hexadecimal characters. <p>This method accepts the exact format generated by {@link #toString}. If you require more lenient {@code base 16} decoding, please use {@link com.google.common.io.BaseEncoding#decode} (and pass the result to {@link #fromBytes}). @since 15.0
296 Returns a hash code, having the same bit length as each of the input hash codes, that combines the information of these hash codes in an ordered fashion. That is, whenever two equal hash codes are produced by two calls to this method, it is <i>as likely as possible</i> that each was computed from the <i>same</i> input hash codes in the <i>same</i> order. @throws IllegalArgumentException if {@code hashCodes} is empty, or the hash codes do not all have the same bit length
297 Returns a hash code, having the same bit length as each of the input hash codes, that combines the information of these hash codes in an unordered fashion. That is, whenever two equal hash codes are produced by two calls to this method, it is <i>as likely as possible</i> that each was computed from the <i>same</i> input hash codes in <i>some</i> order. @throws IllegalArgumentException if {@code hashCodes} is empty, or the hash codes do not all have the same bit length
298 Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the MD5 (128 hash bits) hash function and a {@link SecretKeySpec} created from the given byte array and the MD5 algorithm. <p>If you are designing a new system that needs HMAC, prefer {@link #hmacSha256} or other future-proof algorithms <a href="https://datatracker.ietf.org/doc/html/rfc6151#section-2.3">over {@code hmacMd5}</a>. @param key the key material of the secret key @since 20.0
299 Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-1 (160 hash bits) hash function and a {@link SecretKeySpec} created from the given byte array and the SHA-1 algorithm. @param key the key material of the secret key @since 20.0
300 Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-256 (256 hash bits) hash function and a {@link SecretKeySpec} created from the given byte array and the SHA-256 algorithm. @param key the key material of the secret key @since 20.0
301 Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-512 (512 hash bits) hash function and a {@link SecretKeySpec} created from the given byte array and the SHA-512 algorithm. @param key the key material of the secret key @since 20.0
302 Returns a view of the given byte array as a {@link ByteSource}. To view only a specific range in the array, use {@code ByteSource.wrap(b).slice(offset, length)}. <p>Note that the given byte array may be passed directly to methods on, for example, {@code OutputStream} (when {@code copyTo(OutputStream)} is called on the resulting {@code ByteSource}). This could allow a malicious {@code OutputStream} implementation to modify the contents of the array, but provides better performance in the normal case. @since 15.0 (since 14.0 as {@code ByteStreams.asByteSource(byte[])}).
303 Returns a view of the given character sequence as a {@link CharSource}. The behavior of the returned {@code CharSource} and any {@code Reader} instances created by it is unspecified if the {@code charSequence} is mutated while it is being read, so don't do that. @since 15.0 (since 14.0 as {@code CharStreams.asCharSource(String)})
304 Writes the given lines of text to this sink with each line (including the last) terminated with the operating system's default line separator. This method is equivalent to {@code writeLines(lines, System.getProperty("line.separator"))}. @throws IOException if an I/O error occurs while writing to this sink
305 Writes the given lines of text to this sink with each line (including the last) terminated with the operating system's default line separator. This method is equivalent to {@code writeLines(lines, System.getProperty("line.separator"))}. @throws IOException if an I/O error occurs while writing to this sink @since 22.0 (but only since 33.4.0 in the Android flavor)
306 Reads a byte stream, which was written by {@linkplain #writeTo(OutputStream)}, into a {@code BloomFilter}. <p>The {@code Funnel} to be used is not encoded in the stream, so it must be provided here. <b>Warning:</b> the funnel provided <b>must</b> behave identically to the one used to populate the original Bloom filter! @throws IOException if the InputStream throws an {@code IOException}, or if its data does not appear to be a BloomFilter serialized using the {@linkplain #writeTo(OutputStream)} method.
307 Returns the <a href="http://en.wikipedia.org/wiki/Arithmetic_mean">arithmetic mean</a> of {@code values}. <p>If these values are a sample drawn from a population, this is also an unbiased estimator of the arithmetic mean of the population. @param values a nonempty series of values, which will be converted to {@code double} values (this may cause loss of precision) @throws IllegalArgumentException if {@code values} is empty or contains any non-finite value @deprecated Use {@link Stats#meanOf} instead, noting the less strict handling of non-finite values.
308 Returns the base 2 logarithm of a double value, rounded with the specified rounding mode to an {@code int}. <p>Regardless of the rounding mode, this is faster than {@code (int) log2(x)}. @throws IllegalArgumentException if {@code x <= 0.0}, {@code x} is NaN, or {@code x} is infinite
309 Checks the whole hash table for poor hash distribution. Takes O(n) in the worst case, O(n / log n) on average. <p>The online hash flooding detecting in RegularSetBuilderImpl.add can detect e.g. many exactly matching hash codes, which would cause construction to take O(n^2), but can't detect e.g. hash codes adversarially designed to go into ascending table locations, which keeps construction O(n) (as desired) but then can have O(n) queries later. <p>If this returns false, then no query can take more than O(log n). <p>Note that for a RegularImmutableSet with elements with truly random hash codes, contains operations take expected O(1) time but with high probability take O(log n) for at least some element. (https://en.wikipedia.org/wiki/Linear_probing#Analysis) <p>This method may return {@code true} even on truly random input, but {@code ImmutableSetTest} tests that the probability of that is low.
310 Adds {@code elem} as a candidate for the top {@code k} elements. This operation takes amortized O(1) time.
311 Returns an equivalent {@code Alphabet} except it ignores case.
312 Returns a {@code TopKSelector} that collects the lowest {@code k} elements added to it, relative to the specified comparator, and returns them via {@link #topK} in ascending order. @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}
313 Returns a {@code TopKSelector} that collects the greatest {@code k} elements added to it, relative to the specified comparator, and returns them via {@link #topK} in descending order. @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}
314 Finish building an instance which also maps {@code x = x2} to {@code y = y2}. These values must not both be identical to the values given in the first mapping. If only the {@code x} values are identical, the transformation is vertical. If only the {@code y} values are identical, the transformation is horizontal (i.e. the slope is zero).
315 Returns a linear transformation giving the best fit to the data according to <a href="http://mathworld.wolfram.com/LeastSquaresFitting.html">Ordinary Least Squares linear regression</a> of {@code y} as a function of {@code x}. The count must be greater than one, and either the {@code x} or {@code y} data must have a non-zero population variance (i.e. {@code xStats().populationVariance() > 0.0 || yStats().populationVariance() > 0.0}). The result is guaranteed to be horizontal if there is variance in the {@code x} data but not the {@code y} data, and vertical if there is variance in the {@code y} data but not the {@code x} data. <p>This fit minimizes the root-mean-square error in {@code y} as a function of {@code x}. This error is defined as the square root of the mean of the squares of the differences between the actual {@code y} values of the data and the values predicted by the fit for the {@code x} values (i.e. it is the square root of the mean of the squares of the vertical distances between the data points and the best fit line). For this fit, this error is a fraction {@code sqrt(1 - R*R)} of the population standard deviation of {@code y}, where {@code R} is the Pearson's correlation coefficient (as given by {@link #pearsonsCorrelationCoefficient()}). <p>The corresponding root-mean-square error in {@code x} as a function of {@code y} is a fraction {@code sqrt(1/(R*R) - 1)} of the population standard deviation of {@code x}. This fit does not normally minimize that error: to do that, you should swap the roles of {@code x} and {@code y}. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link LinearTransformation#forNaN()}. @throws IllegalStateException if the dataset is empty or contains a single pair of values, or both the {@code x} and {@code y} dataset must have zero population variance
316 Returns a linear transformation giving the best fit to the data according to <a href="http://mathworld.wolfram.com/LeastSquaresFitting.html">Ordinary Least Squares linear regression</a> of {@code y} as a function of {@code x}. The count must be greater than one, and either the {@code x} or {@code y} data must have a non-zero population variance (i.e. {@code xStats().populationVariance() > 0.0 || yStats().populationVariance() > 0.0}). The result is guaranteed to be horizontal if there is variance in the {@code x} data but not the {@code y} data, and vertical if there is variance in the {@code y} data but not the {@code x} data. <p>This fit minimizes the root-mean-square error in {@code y} as a function of {@code x}. This error is defined as the square root of the mean of the squares of the differences between the actual {@code y} values of the data and the values predicted by the fit for the {@code x} values (i.e. it is the square root of the mean of the squares of the vertical distances between the data points and the best fit line). For this fit, this error is a fraction {@code sqrt(1 - R*R)} of the population standard deviation of {@code y}, where {@code R} is the Pearson's correlation coefficient (as given by {@link #pearsonsCorrelationCoefficient()}). <p>The corresponding root-mean-square error in {@code x} as a function of {@code y} is a fraction {@code sqrt(1/(R*R) - 1)} of the population standard deviation of {@code x}. This fit does not normally minimize that error: to do that, you should swap the roles of {@code x} and {@code y}. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link LinearTransformation#forNaN()}. @throws IllegalStateException if the dataset is empty or contains a single pair of values, or both the {@code x} and {@code y} dataset have zero population variance
317 Returns {@code true} if {@code n} is a <a href="http://mathworld.wolfram.com/PrimeNumber.html">prime number</a>: an integer <i>greater than one</i> that cannot be factored into a product of <i>smaller</i> positive integers. Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i> be factored into smaller positive integers). <p>To test larger numbers, use {@link BigInteger#isProbablePrime}. @throws IllegalArgumentException if {@code n} is negative @since 20.0
318 Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode. @throws IllegalArgumentException if {@code x <= 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x} is not a power of ten
319 Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and {@code k}, or {@link Long#MAX_VALUE} if the result does not fit in a {@code long}. @throws IllegalArgumentException if {@code n < 0}, {@code k < 0}, or {@code k > n}
320 Returns the <a href="http://en.wikipedia.org/wiki/Arithmetic_mean">arithmetic mean</a> of the values. The count must be non-zero. <p>The definition of the mean is the same as {@link Stats#mean}. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision) @throws IllegalArgumentException if the dataset is empty
321 Adds the given pair of values to the dataset.
322 Adds the given values to the dataset. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision)
323 Adds the given values to the dataset. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision)
324 Adds the given statistics to the dataset, as if the individual values used to compute the statistics had been added directly.
325 Adds the given statistics to the dataset, as if the individual values used to compute the statistics had been added directly. @since 28.2
326 Performs an in-place selection to find the element which would appear at a given index in a dataset if it were sorted. The following preconditions should hold: <ul> <li>{@code required}, {@code from}, and {@code to} should all be indexes into {@code array}; <li>{@code required} should be in the range [{@code from}, {@code to}]; <li>all the values with indexes in the range [0, {@code from}) should be less than or equal to all the values with indexes in the range [{@code from}, {@code to}]; <li>all the values with indexes in the range ({@code to}, {@code array.length - 1}] should be greater than or equal to all the values with indexes in the range [{@code from}, {@code to}]. </ul> This method will reorder the values with indexes in the range [{@code from}, {@code to}] such that all the values with indexes in the range [{@code from}, {@code required}) are less than or equal to the value with index {@code required}, and all the values with indexes in the range ({@code required}, {@code to}] are greater than or equal to that value. Therefore, the value at {@code required} is the value which would appear at that index in the sorted dataset.
327 Appends all values from {@code stream}, in order, to the end of the values the built {@link ImmutableDoubleArray} will contain. @since 22.0 (but only since 33.4.0 in the Android flavor)
328 Appends {@code values}, in order, to the end of the values the built {@link ImmutableDoubleArray} will contain.
329 Appends all values from {@code stream}, in order, to the end of the values the built {@link ImmutableIntArray} will contain. @since 22.0 (but only since 33.4.0 in the Android flavor)
330 Appends {@code values}, in order, to the end of the values the built {@link ImmutableIntArray} will contain.
331 Appends all values from {@code stream}, in order, to the end of the values the built {@link ImmutableLongArray} will contain. @since 22.0 (but only since 33.4.0 in the Android flavor)
332 Reconstitutes the instance from a stream (that is, deserializes it).
333 Appends {@code values}, in order, to the end of the values the built {@link ImmutableLongArray} will contain.
334 Parses the specified string as a signed decimal integer value. The ASCII character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign. <p>Unlike {@link Integer#parseInt(String)}, this method returns {@code null} instead of throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns {@code null} if non-ASCII digits are present in the string. <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link Integer#parseInt(String)} accepts them. @param string the string representation of an integer value @return the integer value represented by {@code string}, or {@code null} if {@code string} has a length of zero or cannot be parsed as an integer value @throws NullPointerException if {@code string} is {@code null} @since 11.0
335 Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as an unsigned {@code int} value. @throws NumberFormatException if the string does not contain a parsable unsigned {@code int} value
336 Returns the result of dividing this by {@code val}. @since 14.0
337 Returns a string representation of {@code x} for the given radix, where {@code x} is treated as unsigned. <p><b>Java 8+ users:</b> use {@link Long#toUnsignedString(long, int)} instead. @param x the value to convert to a string. @param radix the radix to use while working with {@code x} @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}.
338 Returns a * b mod m.
339 Returns a^2 mod m.
340 Returns this modulo {@code val}. @since 14.0
341 Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as an unsigned {@code long} value. @throws NumberFormatException if the string does not contain a parsable unsigned {@code long} value
342 A sensible definition of {@link #equals(Object)} in terms of {@link #getKey()} and {@link #getValue()}. If you override either of these methods, you may wish to override {@link #equals(Object)} to forward to this implementation. @since 7.0
343 A sensible definition of {@link #hashCode()} in terms of {@link #getKey()} and {@link #getValue()}. If you override either of these methods, you may wish to override {@link #hashCode()} to forward to this implementation. @since 7.0
344 A sensible definition of {@link #toString} in terms of {@link #getKey} and {@link #getValue}. If you override either of these methods, you may wish to override {@link #equals} to forward to this implementation. @since 7.0
345 Returns true if this type is known to be an array type, such as {@code int[]}, {@code T[]}, {@code <? extends Map<String, Integer>[]>} etc.
346 Creates an {@link ExecutorService} whose {@code submit} and {@code invokeAll} methods submit {@link ListenableFutureTask} instances to the given delegate executor. Those methods, as well as {@code execute} and {@code invokeAny}, are implemented in terms of calls to {@code delegate.execute}. All other methods are forwarded unchanged to the delegate. This implies that the returned {@code ListeningExecutorService} never calls the delegate's {@code submit}, {@code invokeAll}, and {@code invokeAny} methods, so any special handling of tasks must be implemented in the delegate's {@code execute} method or by wrapping the returned {@code ListeningExecutorService}. <p>If the delegate executor was already an instance of {@code ListeningExecutorService}, it is returned untouched, and the rest of this documentation does not apply. @since 10.0
347 Creates a {@link ScheduledExecutorService} whose {@code submit} and {@code invokeAll} methods submit {@link ListenableFutureTask} instances to the given delegate executor. Those methods, as well as {@code execute} and {@code invokeAny}, are implemented in terms of calls to {@code delegate.execute}. All other methods are forwarded unchanged to the delegate. This implies that the returned {@code ListeningScheduledExecutorService} never calls the delegate's {@code submit}, {@code invokeAll}, and {@code invokeAny} methods, so any special handling of tasks must be implemented in the delegate's {@code execute} method or by wrapping the returned {@code ListeningScheduledExecutorService}. <p>If the delegate executor was already an instance of {@code ListeningScheduledExecutorService}, it is returned untouched, and the rest of this documentation does not apply. @since 10.0
348 An implementation of {@link ExecutorService#invokeAny} for {@link ListeningExecutorService} implementations.
349 Creates the {@link ListenableFuture} which will return the result of calling {@link AsyncCallable#call} in {@code combiner} when all futures complete, using the specified {@code executor}. <p>If the combiner throws a {@code CancellationException}, the returned future will be cancelled. <p>If the combiner throws an {@code ExecutionException}, the cause of the thrown {@code ExecutionException} will be extracted and returned as the cause of the new {@code ExecutionException} that gets thrown by the returned combined future. <p>Canceling this future will attempt to cancel all the component futures. @return a future whose result is based on {@code combiner} (or based on the input futures passed to {@code whenAllSucceed}, if that is the method you used to create this {@code FutureCombiner}). Even if you don't care about the value of the future, you should typically check whether it failed: See <a href="https://errorprone.info/bugpattern/FutureReturnValueIgnored">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.
350 Creates the {@link ListenableFuture} which will return the result of calling {@link Callable#call} in {@code combiner} when all futures complete, using the specified {@code executor}. <p>If the combiner throws a {@code CancellationException}, the returned future will be cancelled. <p>If the combiner throws an {@code ExecutionException}, the cause of the thrown {@code ExecutionException} will be extracted and returned as the cause of the new {@code ExecutionException} that gets thrown by the returned combined future. <p>Canceling this future will attempt to cancel all the component futures. @return a future whose result is based on {@code combiner} (or based on the input futures passed to {@code whenAllSucceed}, if that is the method you used to create this {@code FutureCombiner}). Even if you don't care about the value of the future, you should typically check whether it failed: See <a href="https://errorprone.info/bugpattern/FutureReturnValueIgnored">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.
351 Checks the acquisition-ordering between {@code this}, which is about to be acquired, and the specified {@code acquiredLock}. <p>When this method returns, the {@code acquiredLock} should be in either the {@code preAcquireLocks} map, for the case in which it is safe to acquire {@code this} after the {@code acquiredLock}, or in the {@code disallowedPriorLocks} map, in which case it is not safe.
352 Computes or retrieves a replacement value corresponding to an already-cached {@code key}. This method is called when an existing cache entry is refreshed by {@link CacheBuilder#refreshAfterWrite}, or through a call to {@link LoadingCache#refresh}. <p>This implementation synchronously delegates to {@link #load}. It is recommended that it be overridden with an asynchronous implementation when using {@link CacheBuilder#refreshAfterWrite}. <p><b>Note:</b> <i>all exceptions thrown by this method will be logged and then swallowed</i>. @param key the non-null key whose value should be loaded @param oldValue the non-null old value corresponding to {@code key} @return the future new value associated with {@code key}; <b>must not be null, must not return null</b> @throws Exception if unable to reload the result @throws InterruptedException if this method is interrupted. {@code InterruptedException} is treated like any other {@code Exception} in all respects except that, when it is caught, the thread's interrupt status is set @since 11.0
353 Returns a future that finishes when this step does. Calling {@code get()} on the returned future returns {@code null} if the step is successful or throws the same exception that would be thrown by calling {@code finishToFuture().get()} if this were the last step. Calling {@code cancel()} on the returned future has no effect on the {@code ClosingFuture} pipeline. <p>{@code statusFuture} differs from most methods on {@code ClosingFuture}: You can make calls to {@code statusFuture} <i>in addition to</i> the call you make to {@link #finishToFuture()} or a derivation method <i>on the same instance</i>. This is important because calling {@code statusFuture} alone does not provide a way to close the pipeline.
354 Enqueues a task to run when the previous task (if any) completes. <p>Cancellation does not propagate from the output future to the future returned from {@code callable} or a callable that has begun to execute, but if the output future is cancelled before {@link AsyncCallable#call()} is invoked, {@link AsyncCallable#call()} will not be invoked.
355 Implementation of {@link Futures#getChecked(Future, Class)}.
356 Implementation of {@link Futures#getChecked(Future, Class, long, TimeUnit)}.
357 Leaves this monitor. May be called only by a thread currently occupying this monitor.
358 Caller should check before calling that guard is not satisfied.
359 Returns a future that delegates to another but will finish early (via a {@link TimeoutException} wrapped in an {@link ExecutionException}) if the specified duration expires. <p>The delegate future is interrupted and cancelled if it times out. @param delegate The future to delegate to. @param time when to time out the future @param unit the time unit of the time parameter @param scheduledExecutor The executor service to enforce the timeout. @since 19.0
360 Schedules {@code callable} on the specified {@code executor}, returning a {@code Future}. @throws RejectedExecutionException if the task cannot be scheduled for execution @since 28.0 (but only since 33.4.0 in the Android flavor)
