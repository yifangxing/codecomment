1 Drains reference queues for map, handling key and value references separately.
2 Filters the keys of a BiMap based on a predicate. @param unfiltered input BiMap to filter @param keyPredicate function to test each key @return filtered BiMap with only matching keys
3 Filters entries in a bidirectional map based on the provided predicate for values. @param unfiltered input BiMap to filter @param valuePredicate predicate to evaluate each value @return filtered BiMap with updated key-value pairs
4 Creates a new sorted multiset from an iterator of elements. @param elements iterator containing elements to be copied
5 Transforms a Class to its corresponding TypeToken. @param cls the input Class
6 Converts this multimap to an immutable multiset. @return Multiset containing all elements from the original map
7 Builds an ImmutableMultiset from the underlying contents. @return ImmutableMultiset instance containing all elements.
8 Computes the Cartesian product of multiple lists. @param lists list of lists to combine @return a list containing all possible combinations as sublists
9 Parses a string into CacheBuilderSpec object. @param cacheBuilderSpecification string representation of cache builder specs
10 Converts this immutable collection to a list. @return List of elements or null if delegate is null
11 Retrieves a list of files in the specified directory. @param dir directory path to scan @return immutable list of file paths or empty if directory is invalid
12 Initializes InternetDomainName with normalized domain name. @param name the domain name to initialize from
13 Collects futures into a single future containing a list of values. @param futures iterable of ListenableFutures to collect @return ListenableFuture containing the collected list of values
14 Combines multiple ListenableFutures into a single FutureCombiner. @param futures iterable of futures to combine
15 Combines all given ListenableFutures to a single result, succeeding only if all input futures succeed. @param futures iterable of futures to combine
16 Converts a collection of potentially failed futures to a list of successful values. @param futures iterable of ListenableFutures potentially containing values of type V @return ListenableFuture containing the successful values as a list, or an empty list if all failed.
17 Converts iterable of ListenableFutures to array. @param futures iterable of futures @return array of futures or null if not found
18 Creates an immutable range set by taking the union of the given iterable ranges. @param ranges iterable collection of ranges to combine
19 Computes the intersection of two range sets. @param other the other range set to intersect with @return an immutable range set containing overlapping ranges
20 Computes the set difference between this range set and another. @param other the range set to subtract from this one @return a new immutable range set containing the differences
21 Converts a stream of elements into an immutable bi-map using the provided key and value functions. @param keyFunction function to extract key from each element @param valueFunction function to extract value from each element
22 Creates a copy of the provided map, converting it to an immutable instance map. @param map input map with class-S instances @return ImmutableClassToInstanceMap or newly created one if not already immutable
23 Creates a copy of the given multimap. @param multimap input multimap to copy @return ImmutableListMultimap instance or original if already immutable and not partial view
24 Builds an ImmutableMultimap from the builder state. @return ImmutableMultimap instance or empty if no entries
25 Merges a range of entries into the existing map. @param range merge range @param value new value for unmapped ranges (null to ignore) @param remappingFunction function to remap existing values
26 Builds an ImmutableSetMultimap from the internal builder state. @return ImmutableSetMultimap object or empty if no entries exist
27 Creates a unique index map from an iterator of values using the provided key function. @param values iterator of values to index @param keyFunction function to generate keys from values @return immutable map with unique keys and corresponding values
28 Generates all combinations of a given set size from the input set. @param set input set @param size desired combination size @return Set of Sets containing all combinations, or empty set if no combinations exist
29 Creates a deep copy of the given graph. @param graph original graph to be copied @return ImmutableGraph object containing the copied data or null if input is null
30 Creates a new TypeResolver instance with filtered type mappings. @param mappings map of type variable keys to their resolved types
31 Converts an iterable of keys to a map using the provided function to generate values. @param keys iterable of unique keys @param valueFunction function that generates values for the given key
32 Retrieves and removes the first element from this queue. @return The polled element or null if queue is empty.
33 Offers an element to the heap and returns whether the heap's size is within limits. @param element element to offer
34 Retrieves all ClassInfo objects from resources. @return immutable set of ClassInfo objects
35 Retrieves a set of top-level ClassInfo objects from resources. @return Set of ClassInfo objects or empty set if none found
36 Performs breadth-first traversal on a set of nodes, starting from the provided initial nodes. @param startNodes Iterable of initial nodes to begin traversal
37 Performs a depth-first pre-order traversal on the given nodes. @param startNodes iterable of starting nodes
38 Performs depth-first post-order traversal on the given nodes. @param startNodes iterable of starting node(s)
39 Scans resources from a set of files and builds an immutable set. @param scannedFiles collection of files to scan @return ImmutableSet of ResourceInfo objects
40 Returns a specialized invokable with the specified return type. @param returnType TypeToken representing the desired return type
