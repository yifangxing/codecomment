1 Returns a {@code char} matcher functionally equivalent to this one, but which may be faster to query than the original; your mileage may vary. Precomputation takes time and requires more memory, so it is only likely to be worthwhile if the precomputed matcher is queried very often. <p>This method has no effect (returns {@code this}) when called in GWT: it's unclear whether a precomputed matcher is faster, but it certainly would consume more memory (which doesn't seem like a worthwhile tradeoff in a browser).
2 Computes the hash code of the {@code file} using {@code hashFunction}. @param file the file to read @param hashFunction the hash function to use to hash the data @return the {@link HashCode} of all of the bytes in the file @throws IOException if an I/O error occurs @since 12.0 @deprecated Prefer {@code asByteSource(file).hash(hashFunction)}.
3 Moves a file from one path to another. This method can rename a file and/or move it to a different directory. In either case {@code to} must be the target path for the file itself; not just the new name for the file or the path to the new parent directory. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#move}. @param from the source file @param to the destination file @throws IOException if an I/O error occurs @throws IllegalArgumentException if {@code from.equals(to)}
4 Reads all of the lines from a URL. The lines do not include line-termination characters, but do include other leading and trailing whitespace. <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code Resources.asCharSource(url, charset).readLines()}. @param url the URL to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @return a mutable {@link List} containing all the lines @throws IOException if an I/O error occurs
5 Fully maps a file read-only in to memory as per {@link FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)}. <p>Files are mapped from offset 0 to its length. <p>This only works for files â‰¤ {@link Integer#MAX_VALUE} bytes. @param file the file to map @return a read-only buffer reflecting {@code file} @throws FileNotFoundException if the {@code file} does not exist @throws IOException if an I/O error occurs @see FileChannel#map(MapMode, long, long) @since 2.0
6 Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}. @param executor the executor to modify to make sure it exits when the application is finished @param terminationTimeout how long to wait for the executor to finish before terminating the JVM @param timeUnit unit of time for the time parameter @return an unmodifiable version of the input which will not hang the JVM
7 Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}. @param executor the executor to modify to make sure it exits when the application is finished @param terminationTimeout how long to wait for the executor to finish before terminating the JVM @param timeUnit unit of time for the time parameter @return an unmodifiable version of the input which will not hang the JVM
8 Add a shutdown hook to wait for thread completion in the given {@link ExecutorService service}. This is useful if the given service uses daemon threads, and we want to keep the JVM from exiting immediately on shutdown, instead giving these daemon threads a chance to terminate normally. @param service ExecutorService which uses daemon threads @param terminationTimeout how long to wait for the executor to finish before terminating the JVM @since 28.0 (but only since 33.4.0 in the Android flavor)
9 Removes an entry whose key has been garbage collected.
10 Removes an entry whose value has been garbage collected.
11 Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy}. The manager will become healthy after all the component services have reached the {@linkplain State#RUNNING running} state. @throws IllegalStateException if the service manager reaches a state from which it cannot become {@linkplain #isHealthy() healthy}.
12 Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy} for no more than the given time. The manager will become healthy after all the component services have reached the {@linkplain State#RUNNING running} state. @param timeout the maximum time to wait @param unit the time unit of the timeout argument @throws TimeoutException if not all of the services have finished starting within the deadline @throws IllegalStateException if the service manager reaches a state from which it cannot become {@linkplain #isHealthy() healthy}.
13 Returns the service load times. This value will only return startup times for services that have finished starting. @return Map of services and their corresponding startup time in millis, the map entries will be ordered by startup time.
14 @since 18.0
15 Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to {@code compareTo()}, only the first one specified is included. To create a copy of a {@code SortedSet} that preserves the comparator, call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once. <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)} returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s}, while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>} containing one element (the given set itself). <p><b>Note:</b> Despite what the method name suggests, if {@code elements} is an {@code ImmutableSortedSet}, it may be returned instead of a copy. <p>This method is not type-safe, as it may be called on elements that are not mutually comparable. <p>This method is safe to use even when {@code elements} is a synchronized or concurrent collection that is currently being modified by another thread. @throws ClassCastException if the elements are not mutually comparable @throws NullPointerException if any of {@code elements} is null @since 7.0 (source-compatible since 2.0)
16 Returns a synchronized (thread-safe) navigable map backed by the specified navigable map. In order to guarantee serial access, it is critical that <b>all</b> access to the backing navigable map is accomplished through the returned navigable map (or its views). <p>It is imperative that the user manually synchronize on the returned navigable map when iterating over any of its collection views, or the collections views of any of its {@code descendingMap}, {@code subMap}, {@code headMap} or {@code tailMap} views. {@snippet : NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>()); // Needn't be in synchronized block NavigableSet<K> set = map.navigableKeySet(); synchronized (map) { // Synchronizing on map, not set! Iterator<K> it = set.iterator(); // Must be in synchronized block while (it.hasNext()) { foo(it.next()); } } } <p>or: {@snippet : NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>()); NavigableMap<K, V> map2 = map.subMap(foo, false, bar, true); // Needn't be in synchronized block NavigableSet<K> set2 = map2.descendingKeySet(); synchronized (map) { // Synchronizing on map, not map2 or set2! Iterator<K> it = set2.iterator(); // Must be in synchronized block while (it.hasNext()) { foo(it.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>The returned navigable map will be serializable if the specified navigable map is serializable. @param navigableMap the navigable map to be "wrapped" in a synchronized navigable map. @return a synchronized view of the specified navigable map. @since 13.0
17 Reads all characters from a file into a {@link String}, using the given character set. @param file the file to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @return a string containing all the characters from the file @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSource(file, charset).read()}.
18 Reads all characters from a URL into a {@link String}, using the given character set. @param url the URL to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @return a string containing all the characters from the URL @throws IOException if an I/O error occurs.
19 Creates an empty {@code CompactLinkedHashMap} instance.
20 Constructs a {@code TreeMultimap}, ordered by the natural ordering of its keys and values, with the same mappings as the specified multimap. @param multimap the multimap whose contents are copied to this multimap
21 Creates a {@link ReentrantLock} with the given fairness policy. The {@code lockName} is used in the warning or exception output to help identify the locks involved in the detected deadlock.
22 Creates a {@link ReentrantReadWriteLock} with the given fairness policy. The {@code lockName} is used in the warning or exception output to help identify the locks involved in the detected deadlock.
23 For a given Enum type, creates an immutable map from each of the Enum's values to a corresponding LockGraphNode, with the {@code allowedPriorLocks} and {@code disallowedPriorLocks} prepopulated with nodes according to the natural ordering of the associated Enum values.
24 Helper method for {@link #validateSyntax(List)}. Validates that one part of a domain name is valid. @param part The domain name part to be validated @param isFinalPart Is this the final (rightmost) domain part? @return Whether the part is valid
25 Returns an integer representing an IPv4 address regardless of whether the supplied argument is an IPv4 address or not. <p>IPv6 addresses are <b>coerced</b> to IPv4 addresses before being converted to integers. <p>As long as there are applications that assume that all IP addresses are IPv4 addresses and can therefore be converted safely to integers (for whatever purpose) this function can be used to handle IPv6 addresses as well until the application is suitably fixed. <p>NOTE: an IPv6 address coerced to an IPv4 address can only be used for such purposes as rudimentary identification or indexing into a collection of real {@link InetAddress}es. They cannot be used as real addresses for the purposes of network communication. @param ip {@link InetAddress} to convert @return {@code int}, "coerced" if ip is not an IPv4 address @since 7.0
26 A sensible definition of {@link #contains} in terms of {@link #iterator}. If you override {@link #iterator}, you may wish to override {@link #contains} to forward to this implementation. @since 7.0
27 A sensible definition of {@link #remove} in terms of {@link #iterator}, using the iterator's {@code remove} method. If you override {@link #iterator}, you may wish to override {@link #remove} to forward to this implementation. @since 7.0
28 A sensible definition of {@link #removeAll} in terms of {@link #iterator}, using the iterator's {@code remove} method. If you override {@link #iterator}, you may wish to override {@link #removeAll} to forward to this implementation. @since 7.0
29 A sensible definition of {@link #retainAll} in terms of {@link #iterator}, using the iterator's {@code remove} method. If you override {@link #iterator}, you may wish to override {@link #retainAll} to forward to this implementation. @since 7.0
30 A sensible definition of {@link #clear} in terms of {@link #iterator}, using the iterator's {@code remove} method. If you override {@link #iterator}, you may wish to override {@link #clear} to forward to this implementation. @since 7.0
31 A sensible definition of {@link #isEmpty} as {@code !iterator().hasNext}. If you override {@link #isEmpty}, you may wish to override {@link #isEmpty} to forward to this implementation. Alternately, it may be more efficient to implement {@code isEmpty} as {@code size() == 0}. @since 7.0
32 A sensible definition of {@link #toArray()} in terms of {@link #toArray(Object[])}. If you override {@link #toArray(Object[])}, you may wish to override {@link #toArray} to forward to this implementation. @since 7.0
33 Duration-based overload of {@link #schedule(Runnable, long, TimeUnit)}. @since 29.0
34 Returns all subscribers for the given listener grouped by the type of event they subscribe to.
35 Returns the subgraph of {@code network} induced by {@code nodes}. This subgraph is a new graph that contains all of the nodes in {@code nodes}, and all of the {@link Network#edges() edges} from {@code network} for which the {@link Network#incidentNodes(Object) incident nodes} are both contained by {@code nodes}. @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph
36 Creates a mutable copy of {@code network} with the same nodes and edges.
37 Returns an empty {@link MutableGraph} with the properties of this {@link GraphBuilder}.
38 Returns the subgraph of {@code graph} induced by {@code nodes}. This subgraph is a new graph that contains all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges} (and associated edge values) from {@code graph} for which both nodes are contained by {@code nodes}. @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph
39 Creates a mutable copy of {@code graph} with the same nodes, edges, and edge values.
40 Associates all of the given map's keys and values in the built bimap. Duplicate keys or values are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key or value in {@code map} is null
41 Associates all of the given map's keys and values in the built map. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key or value in {@code map} is null
42 Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered navigable map.
43 Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered sorted map.
44 Returns a map containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings whose keys satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
45 Returns a map containing the mappings in {@code unfiltered} that satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the map's entries have a {@link Entry#setValue} method that throws an {@link IllegalArgumentException} when the existing key and the provided value don't satisfy the predicate. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings that satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}.
46 Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose keys and values are the result of applying the provided mapping functions to the input elements. The generated map is sorted by the specified comparator. <p>If the mapped keys contain duplicates (according to the specified comparator), an {@code IllegalArgumentException} is thrown when the collection operation is performed. (This differs from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which throws an {@code IllegalStateException}.) @since 21.0
47 Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys and values are the result of applying the provided mapping functions to the input elements. The resulting implementation is specialized for enum key types. The returned map and its views will iterate over keys in their enum definition order, not encounter order. <p>If the mapped keys contain duplicates, an {@code IllegalArgumentException} is thrown when the collection operation is performed. (This differs from the {@code Collector} returned by {@link java.util.stream.Collectors#toMap(java.util.function.Function, java.util.function.Function) Collectors.toMap(Function, Function)}, which throws an {@code IllegalStateException}.) @since 21.0
48 Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys and values are the result of applying the provided mapping functions to the input elements. The resulting implementation is specialized for enum key types. The returned map and its views will iterate over keys in their enum definition order, not encounter order. <p>If the mapped keys contain duplicates, the values are merged using the specified merging function. @since 21.0
49 Returns type mappings using type parameters and type arguments found in the generic superclass and the super interfaces of {@code contextClass}.
50 Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. <p>Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream. <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method is called. This will fail if the iterator is infinite and may cause problems if the iterator eagerly fetches data for each source when iterated (rather than producing sources that only load data through their streams). Prefer using the {@link #concat(Iterable)} overload if possible. @param sources the sources to concatenate @return a {@code ByteSource} containing the concatenated data @throws NullPointerException if any of {@code sources} is {@code null} @since 15.0
51 Concatenates multiple {@link CharSource} instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. <p>Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream. <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method is called. This will fail if the iterator is infinite and may cause problems if the iterator eagerly fetches data for each source when iterated (rather than producing sources that only load data through their streams). Prefer using the {@link #concat(Iterable)} overload if possible. @param sources the sources to concatenate @return a {@code CharSource} containing the concatenated data @throws NullPointerException if any of {@code sources} is {@code null} @since 15.0
52 Returns an {@code ImmutableRangeSet} containing each of the specified disjoint ranges. Overlapping ranges and empty ranges are forbidden, though adjacent ranges are permitted and will be merged. @throws IllegalArgumentException if any ranges overlap or are empty @since 21.0
53 Returns an immutable sorted multiset containing the given elements sorted by the given {@code Comparator}. This method iterates over {@code elements} at most once. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if {@code comparator} or any of {@code elements} is null
54 Returns an immutable sorted multiset containing the elements of a sorted multiset, sorted by the same {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always uses the natural ordering of the elements. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. <p>This method is safe to use even when {@code sortedMultiset} is a synchronized or concurrent collection that is currently being modified by another thread. @throws NullPointerException if {@code sortedMultiset} or any of its elements is null
55 Returns an {@code ImmutableList} containing the same elements, in the same order, as this collection. <p><b>Performance note:</b> in most cases this method can return quickly without actually copying anything. The exact circumstances under which the copy is performed are undefined and subject to change. @since 2.0
56 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableSortedSet}, ordered by the specified comparator. <p>If the elements contain duplicates (according to the comparator), only the first duplicate in encounter order will appear in the result. @since 21.0
57 Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to {@code compareTo()}, only the first one specified is included. <p>This method is not type-safe, as it may be called on elements that are not mutually comparable. @throws ClassCastException if the elements are not mutually comparable @throws NullPointerException if any of {@code elements} is null
58 Returns a newly-created immutable bimap, or throws an exception if any key or value was added more than once. The iteration order of the returned bimap is the order in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case entries are sorted by value. @throws IllegalArgumentException if duplicate keys or values were added @since 31.0
59 This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less than (or equal to, if {@code inclusive}) {@code toKey}. <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code toKey}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code toKey}. @since 12.0
60 This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are greater than (or equal to, if {@code inclusive}) {@code fromKey}. <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code fromKey}. @since 12.0
61 Indicates whether this domain name represents a <i>public suffix</i>, as defined by the Mozilla Foundation's <a href="http://publicsuffix.org/">Public Suffix List</a> (PSL). A public suffix is one under which Internet users can directly register names, such as {@code com}, {@code co.uk} or {@code pvt.k12.wy.us}. Examples of domain names that are <i>not</i> public suffixes include {@code google.com}, {@code foo.co.uk}, and {@code myblog.blogspot.com}. <p>Public suffixes are a proper superset of {@linkplain #isRegistrySuffix() registry suffixes}. The list of public suffixes additionally contains privately owned domain names under which Internet users can register subdomains. An example of a public suffix that is not a registry suffix is {@code blogspot.com}. Note that it is true that all public suffixes <i>have</i> registry suffixes, since domain name registries collectively control all internet domain names. <p>For considerations on whether the public suffix or registry suffix designation is more suitable for your application, see <a href="https://github.com/google/guava/wiki/InternetDomainNameExplained">this article</a>. @return {@code true} if this domain name appears exactly on the public suffix list @since 6.0
62 Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix}, including if it is a public suffix itself. For example, returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code invalid} or {@code google.invalid}. This is the recommended method for determining whether a domain is potentially an addressable host. <p>Note that this method is equivalent to {@link #hasRegistrySuffix()} because all registry suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes. @since 6.0
63 Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix}, while not being a public suffix itself. For example, returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and {@code myblog.blogspot.com}, but not for {@code com}, {@code co.uk}, {@code google.invalid}, or {@code blogspot.com}. <p>This method can be used to determine whether it will probably be possible to set cookies on the domain, though even that depends on individual browsers' implementations of cookie controls. See <a href="http://www.ietf.org/rfc/rfc2109.txt">RFC 2109</a> for details. @since 6.0
64 Indicates whether this domain name is composed of exactly one subdomain component followed by a {@linkplain #isPublicSuffix() public suffix}. For example, returns {@code true} for {@code google.com} {@code foo.co.uk}, and {@code myblog.blogspot.com}, but not for {@code www.google.com}, {@code co.uk}, or {@code blogspot.com}. <p>This method can be used to determine whether a domain is probably the highest level for which cookies may be set, though even that depends on individual browsers' implementations of cookie controls. See <a href="http://www.ietf.org/rfc/rfc2109.txt">RFC 2109</a> for details. @since 6.0
65 Indicates whether this domain name represents a <i>registry suffix</i>, as defined by a subset of the Mozilla Foundation's <a href="http://publicsuffix.org/">Public Suffix List</a> (PSL). A registry suffix is one under which Internet users can directly register names via a domain name registrar, and have such registrations lawfully protected by internet-governing bodies such as ICANN. Examples of registry suffixes include {@code com}, {@code co.uk}, and {@code pvt.k12.wy.us}. Examples of domain names that are <i>not</i> registry suffixes include {@code google.com} and {@code foo.co.uk}. <p>Registry suffixes are a proper subset of {@linkplain #isPublicSuffix() public suffixes}. The list of public suffixes additionally contains privately owned domain names under which Internet users can register subdomains. An example of a public suffix that is not a registry suffix is {@code blogspot.com}. Note that it is true that all public suffixes <i>have</i> registry suffixes, since domain name registries collectively control all internet domain names. <p>For considerations on whether the public suffix or registry suffix designation is more suitable for your application, see <a href="https://github.com/google/guava/wiki/InternetDomainNameExplained">this article</a>. @return {@code true} if this domain name appears exactly on the public suffix list as part of the registry suffix section (labelled "ICANN"). @since 23.3
66 Indicates whether this domain name ends in a {@linkplain #isRegistrySuffix() registry suffix}, including if it is a registry suffix itself. For example, returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code invalid} or {@code google.invalid}. <p>Note that this method is equivalent to {@link #hasPublicSuffix()} because all registry suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes. @since 23.3
67 Indicates whether this domain name ends in a {@linkplain #isRegistrySuffix() registry suffix}, while not being a registry suffix itself. For example, returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and {@code blogspot.com}, but not for {@code com}, {@code co.uk}, or {@code google.invalid}. @since 23.3
68 Indicates whether this domain name is composed of exactly one subdomain component followed by a {@linkplain #isRegistrySuffix() registry suffix}. For example, returns {@code true} for {@code google.com}, {@code foo.co.uk}, and {@code blogspot.com}, but not for {@code www.google.com}, {@code co.uk}, or {@code myblog.blogspot.com}. <p><b>Warning:</b> This method should not be used to determine the probable highest level parent domain for which cookies may be set. Use {@link #topPrivateDomain()} for that purpose. @since 23.3
69 Returns an immutable map containing the given entries, with keys sorted by the provided comparator. @throws NullPointerException if any key or value in {@code map} is null @throws IllegalArgumentException if any two keys are equal according to the comparator @since 19.0
70 Returns an immutable map containing the same entries as the provided sorted map, with the same ordering. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if any key or value in {@code map} is null
71 Returns an immutable copy of the current contents of this set view. Does not support null elements. <p><b>Warning:</b> this may have unexpected results if a backing set of this view uses a nonstandard notion of equivalence, for example if it is a {@link TreeSet} using a comparator that is inconsistent with {@link Object#equals(Object)}.
72 Returns the raw types of the types in this set, in the same order.
73 Removes the element at position {@code index}. <p>Normally this method leaves the elements at up to {@code index - 1}, inclusive, untouched. Under these circumstances, it returns {@code null}. <p>Occasionally, in order to maintain the heap invariant, it must swap a later element of the list with one before {@code index}. Under these circumstances it returns a pair of elements as a {@link MoveDesc}. The first one is the element that was previously at the end of the heap and is now at some position before {@code index}. The second element is the one that was swapped down to replace the element at {@code index}. This fact is used by iterator.remove so as to visit elements during a traversal once and only once.
74 Returns the square root of {@code x}, rounded with the specified rounding mode. @throws IllegalArgumentException if {@code x < 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code sqrt(x)} is not an integer
75 Returns an immutable set containing each of {@code elements}, minus duplicates, in the order each appears first in the source iterator. @throws NullPointerException if any of {@code elements} is null
76 Recursively scan the given directory, adding resources for each file encountered. Symlinks which have already been traversed in the current tree path will be skipped to eliminate cycles; otherwise symlinks are traversed. @param directory the root of the directory to scan @param packagePrefix resource path prefix inside {@code classloader} for any files found under {@code directory} @param currentPath canonical files already visited in the current directory tree path, for cycle elimination
77 Returns the class path URIs specified by the {@code Class-Path} manifest attribute, according to <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/jar/jar.html#Main_Attributes">JAR File Specification</a>. If {@code manifest} is null, it means the jar file has no manifest, and an empty set will be returned.
78 Returns the raw type of {@code T}. Formally speaking, if {@code T} is returned by {@link java.lang.reflect.Method#getGenericReturnType}, the raw type is what's returned by {@link java.lang.reflect.Method#getReturnType} of the same method object. Specifically: <ul> <li>If {@code T} is a {@code Class} itself, {@code T} itself is returned. <li>If {@code T} is a {@link ParameterizedType}, the raw type of the parameterized type is returned. <li>If {@code T} is a {@link GenericArrayType}, the returned type is the corresponding array class. For example: {@code List<Integer>[] => List[]}. <li>If {@code T} is a type variable or a wildcard type, the raw type of the first upper bound is returned. For example: {@code <X extends Foo> => Foo}. </ul>
79 Returns the {@code k} greatest elements of the given iterable according to this ordering, in order from greatest to least. If there are fewer than {@code k} elements present, all will be included. <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple elements are equivalent, it is undefined which will come first. <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterable).collect(Comparators.greatest(k, thisComparator))} instead. @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in <i>descending order</i> @throws IllegalArgumentException if {@code k} is negative @since 8.0
80 Waits for the all the services to reach a terminal state for no more than the given time. After this method returns all services will either be {@linkplain Service.State#TERMINATED terminated} or {@linkplain Service.State#FAILED failed}. @param timeout the maximum time to wait @throws TimeoutException if not all of the services have stopped within the deadline @since 28.0 (but only since 33.4.0 in the Android flavor)
