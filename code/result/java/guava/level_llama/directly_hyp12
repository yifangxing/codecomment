1 Tries to lock and drain reference queues, releasing lock on failure.
2 Resolves a given Type object to its resolved form. @param type the Type object to resolve @return the resolved Type object or the original Type if not resolvable
3 Checks if the runtime type is compatible with the formal type. @param formalType the expected type @param declaration the type variable declaration @return true if types are compatible, false otherwise
4 Canonicalizes a type argument for a type variable. @param declaration the type variable to canonicalize against @param typeArg the type argument to canonicalize @return the canonicalized type argument
5 Creates a CacheBuilder instance from a cache specification string. @param spec cache specification string to parse and use as builder configuration.
6 Disables caching by setting maximum size to zero.
7 Creates an InternetDomainName object from a string representation. @param domain string representation of the domain name
8 Combines multiple ListenableFutures into an ordered list. @param futures Iterable of futures to combine @return Ordered list of futures or empty list if none provided
9 Computes the union of this range set and another. @param other RangeSet to combine with @return Union of ranges in both sets
10 Creates an immutable copy of the given multimap. @param multimap input multimap to copy @return ImmutableMultimap object or existing one if it's not a partial view
11 Builds and returns an ImmutableListMultimap instance.
12 Converts a stream of objects into an immutable map using specified key and value functions. @param keyFunction function to extract key from each object @param valueFunction function to extract value from each object
13 Creates a multimap with a single entry for the given key-value pair. @param k1 unique key @param v1 associated value
14 Creates a multimap with two key-value pairs. @param k1 first key @param v1 value associated with key1 @param k2 second key @param v2 value associated with key2 @return ImmutableSetMultimap instance containing the specified entries
15 Creates an Immutable Multimap with three key-value pairs. @param k1 key1 @param v1 value1 @param k2 key2 @param v2 value2 @param k3 key3 @param v3 value3
16 Creates a multimap with four key-value pairs. @param k1 first key @param v1 value for k1 @param k2 second key @param v2 value for k2 @param k3 third key @param v3 value for k3 @param k4 fourth key @param v4 value for k4 @return ImmutableSetMultimap instance
17 Creates an ImmutableSetMultimap with the specified key-value pairs. @param k1,k2,k3,k4,k5 keys @param v1,v2,v3,v4,v5 values
18 Creates an immutable multimap from the given iterable of key-value pairs. @param entries iterable of key-value entries to copy
19 Creates an immutable multimap copy from a given multimap. @param multimap the multimap to copy
20 Creates an indexed map from a collection of values. @param values iterable collection of values @param keyFunction function to extract keys from values @return ImmutableMap with unique indices or null if not found
21 Creates an ArrayTable instance with the given row and column keys. @param rowKeys iterable of unique row identifiers @param columnKeys iterable of unique column identifiers
22 Generates the power set of the given set. @param set input set @return a set containing all possible subsets of the original set
23 Creates an immutable table from a list of ordered cells. @param cellList list of cells with values @param rowSpace set of unique row identifiers @param columnSpace set of unique column identifiers @return Dense or Sparse ImmutableTable instance based on cell density
24 Builds an immutable graph from a mutable one. @return ImmutableGraph object representing the graph data
25 Creates an immutable copy of the given network. @param network original network to copy
26 Creates an immutable copy of the given ValueGraph. @param graph original graph to replicate @return ImmutableValueGraph instance or existing one if already immutable
27 Resolves type covariance by creating a TypeResolver with type mappings from the given context type. @param contextType the type for which to resolve covariance
28 Resolves type mappings from a given context type. @param contextType the type to resolve mappings for
29 Resolves type parameters for the given types. @param formal expected type @param actual actual type @return TypeResolver object
30 Converts the delegate iterable to an immutable map using a provided function. @param valueFunction function that maps each element to its map value @return ImmutableMap or null if not applicable (but see note)
31 Creates a Min-Max Priority Queue initialized with the given contents. @param initialContents iterable of elements to populate the queue
32 Adds an element to the collection. @param element object to be added
33 Retrieves top-level classes within the specified package. @param packageName unique package identifier @return ImmutableSet of ClassInfo objects for matching package
34 Recursively fetches topLevel classes whose names start with the given package name. @param packageName package name to filter by
35 Performs breadth-first search from the given starting node. @param startNode initial node to begin traversal
36 Performs depth-first pre-order traversal of graph starting from given node. @param startNode root node of traversal
37 Performs a depth-first post-order traversal of a graph starting from the given node. @param startNode the node to begin traversal from
38 Scans resources and returns an immutable set of ResourceInfo objects. @return Set of ResourceInfo objects
39 Constructs a classpath from the given class loader, scanning all resources. @param classloader ClassLoader to use when resolving resources @return ClassPath object containing resolved resource information
40 Returns an invokable instance with specified return type. @param returnType class of the expected return value
