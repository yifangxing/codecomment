1 Refreshes the value associated with {@code key}, unless another thread is already doing so. Returns the newly refreshed value associated with {@code key} if it was refreshed inline, or {@code null} if another thread is performing the refresh or if an error occurs during refresh.
2 Waits uninterruptibly for {@code newValue} to be loaded, and then records loading stats.
3 Advances to the given entry. Returns true if the entry was valid, false if it should be skipped.
4 This method is a convenience for testing. Code should call {@link LocalCache#containsValue} directly.
5 Creates an index {@code ImmutableListMultimap} that contains the results of applying a specified function to each item in this {@code FluentIterable} of values. Each element of this iterable will be stored as a value in the resulting multimap, yielding a multimap with the same size as this iterable. The key used to store that value in the multimap will be the result of calling the function on that value. The resulting multimap is created as an immutable snapshot. In the returned multimap, keys appear in the order they are first encountered, and the values corresponding to each key appear in the same order as they are encountered. <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.groupingBy(keyFunction))} behaves similarly, but returns a mutable {@code Map<K, List<E>>} instead, and may not preserve the order of entries. @param keyFunction the function used to produce the key for each value @throws NullPointerException if any element of this iterable is {@code null}, or if {@code keyFunction} produces {@code null} for any key @since 14.0
6 Returns a new instance with the same type and subtype as this instance, with the {@code charset} parameter set to the {@link Charset#name name} of the given charset. Only one {@code charset} parameter will be present on the new instance regardless of the number set on this one. <p>If a charset must be specified that is not supported on this JVM (and thus is not representable as a {@link Charset} instance), use {@link #withParameter}.
7 Returns a new instance with the same type and subtype as this instance, but without any parameters.
8 Creates a media type with the "application" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
9 Creates a media type with the "audio" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
10 Creates a media type with the "font" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
11 Creates a media type with the "image" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
12 Creates a media type with the "text" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
13 Creates a media type with the "video" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
14 Returns a newly-created immutable table, or throws an exception if duplicate key pairs were added. @throws IllegalArgumentException if duplicate key pairs were added @since 31.0
15 Returns the generic superclass of this type or {@code null} if the type represents {@link Object} or an interface. This method is similar but different from {@link Class#getGenericSuperclass}. For example, {@code new TypeToken<StringArrayList>() {}.getGenericSuperclass()} will return {@code new TypeToken<ArrayList<String>>() {}}; while {@code StringArrayList.class.getGenericSuperclass()} will return {@code ArrayList<E>}, where {@code E} is the type variable declared by class {@code ArrayList}. <p>If this type is a type variable or wildcard, its first upper bound is examined and returned if the bound is a class or extends from a class. This means that the returned type could be a type variable too.
16 Returns the generic interfaces that this type directly {@code implements}. This method is similar but different from {@link Class#getGenericInterfaces()}. For example, {@code new TypeToken<List<String>>() {}.getGenericInterfaces()} will return a list that contains {@code new TypeToken<Iterable<String>>() {}}; while {@code List.class.getGenericInterfaces()} will return an array that contains {@code Iterable<T>}, where the {@code T} is the type variable declared by interface {@code Iterable}. <p>If this type is a type variable or wildcard, its upper bounds are examined and those that are either an interface or upper-bounded only by interfaces are returned. This means that the returned types could include type variables too.
17 Returns the generic form of {@code superclass}. For example, if this is {@code ArrayList<String>}, {@code Iterable<String>} is returned given the input {@code Iterable.class}.
