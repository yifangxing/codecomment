1 Attempts to lock and process reference queues.
2 Resolves the specified type to its actual type. @param type the type to resolve @return resolved Type object
3 Checks if the runtime type matches the formal type or its wildcard bounds. @param formalType the declared type to compare against @param declaration the type variable declaration @return true if types match or are within wildcard bounds, false otherwise
4 Canonicalizes a type argument. @param declaration the original type variable declaration @param typeArg the type argument to canonicalize @return the canonicalized type argument
5 Creates a CacheBuilder instance from a specification string. @param spec configuration string for the cache builder @return CacheBuilder object configured according to the spec
6 Disables caching by setting maximum size to zero. @return CacheBuilderSpec with caching disabled
7 Creates an InternetDomainName instance from a string. @param domain the domain name as a string @return InternetDomainName object
8 Returns a list of futures that complete in the order they finish. @param futures iterable of listenable futures to be ordered @return immutable list of futures completing in input order
9 Returns the union of this range set and another. @param other the RangeSet to be unioned with this set @return an ImmutableRangeSet containing all ranges from both sets
10 Creates an immutable copy of a given multimap. @param multimap the original multimap to copy @return an ImmutableMultimap containing the same entries as the input
11 Builds and returns an immutable list multimap. @return Immutable list multimap containing all entries
12 Converts a stream of objects to an ImmutableMap. @param keyFunction function extracting map keys @param valueFunction function extracting map values @return Collector for creating ImmutableMap
13 Creates an ImmutableSetMultimap with a single key-value pair. @param k1 the key @param v1 the value associated with the key @return an ImmutableSetMultimap containing the specified key-value pair
14 Creates an immutable multimap with two key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @return ImmutableSetMultimap containing the specified entries
15 Creates an immutable multimap with three key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @return ImmutableSetMultimap containing the specified entries
16 Creates an immutable set multimap from key-value pairs. @param k1,k2,k3,k4 keys for the entries @param v1,v2,v3,v4 values for the entries @return ImmutableSetMultimap containing the specified entries
17 Creates an ImmutableSetMultimap with five key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @param k4 fourth key @param v4 value for the fourth key @param k5 fifth key @param v5 value for the fifth key @return ImmutableSetMultimap containing the specified entries
18 Creates an immutable set multimap from given entries. @param entries iterable of key-value pairs @return ImmutableSetMultimap containing the provided entries
19 Creates an immutable copy of a given multimap. @param multimap the source multimap to copy @return ImmutableSetMultimap instance containing the same key-value pairs
20 Creates an immutable map from iterable values using a key function. @param values the iterable source of values @param keyFunction the function to extract keys from values @return ImmutableMap with unique keys derived from values
21 Creates a new ArrayTable with specified rows and columns. @param rowKeys iterable of row keys @param columnKeys iterable of column keys @return ArrayTable instance initialized with the given keys
22 Generates the power set of a given set. @param set input set whose power set is to be generated @return a set containing all possible subsets of the input set
23 Creates an immutable table based on ordered components. @param cellList list of cells with row, column, and value @param rowSpace set of row keys @param columnSpace set of column keys @return RegularImmutableTable instance using either dense or sparse representation
24 Builds an immutable graph from the mutable one. @return ImmutableGraph instance created from mutableGraph
25 Creates an immutable copy of a given network. @param network the original network to copy @return an ImmutableNetwork instance
26 Returns an immutable copy of the given graph. @param graph the original ValueGraph to copy @return an ImmutableValueGraph instance
27 Creates a type resolver with covariant mappings. @param contextType the base type to introspect @return a TypeResolver configured with covariant mappings
28 Creates an invariant type resolver. @param contextType the context type to capture @return a TypeResolver with captured mappings
29 Resolves type by mapping formal to actual. @param formal the formal Type @param actual the actual Type @return a TypeResolver instance with resolved mappings
30 Converts delegate elements to a map using a value function. @param valueFunction maps each element to its corresponding value @return ImmutableMap with non-null keys and values
31 Creates a MinMaxPriorityQueue with initial contents. @param initialContents iterable of elements to add initially @return MinMaxPriorityQueue containing the specified elements
32 Adds an element to this collection. @param element the element to add @return always true, as per Collection contract
33 Retrieves top-level classes within a specified package. @param packageName the name of the package to search @return an ImmutableSet of ClassInfo objects for the package
34 Retrieves top-level classes within a package recursively. @param packageName the base package name to search in @return an ImmutableSet of ClassInfo objects matching the package
35 Performs breadth-first traversal starting from given node. @param startNode the initial node to start traversal @return an iterable of nodes in breadth-first order
36 Performs depth-first pre-order traversal starting from given node. @param startNode initial node for traversal @return iterable of nodes in depth-first pre-order
37 Performs depth-first post-order traversal starting from a given node. @param startNode the initial node to start traversal @return Iterable of nodes in post-order sequence
38 Scans resources and returns an immutable set. @throws IOException if an I/O error occurs during scanning
39 Constructs a ClassPath from the given ClassLoader. @param classloader the ClassLoader to scan @return a ClassPath object representing the scanned resources @throws IOException if an I/O error occurs during scanning
40 Specifies the return type of an invokable. @param returnType the expected return type class @return Invokable with specified return type
