1 Attempts to expire and remove outdated cache entries. @param now current time in nanoseconds
2 Creates a new WithExplicitOrdering instance for an enum class. @param enumClass the enum class to process @param policy concurrency policy to enforce @return WithExplicitOrdering instance configured with lock graph nodes
3 Registers an object as an event listener. @param object the object with event handler methods
4 Unregisters event listeners associated with an object. @param object listener to be unregistered
5 Creates an ImmutableGraph builder from the current configuration. @return ImmutableGraph.Builder instance with generic type N1
6 Filters entries of a BiMap based on a predicate. @param unfiltered the original bi-map to filter @param entryPredicate the condition for entries to satisfy @return a new FilteredEntryBiMap with filtered entries
7 Filters navigable map entries by key predicate. @param unfiltered the original map to filter keys from @param keyPredicate condition for keys to be included @return a new filtered navigable map
8 Filters a navigable map by values using a predicate. @param unfiltered the original map to filter entries from @param valuePredicate condition to evaluate on entry values @return a new filtered navigable map
9 Filters entries in a sorted map by key. @param unfiltered the original sorted map to filter @param keyPredicate condition for keys to be included @return a new SortedMap with filtered entries based on key predicate
10 Filters entries of a sorted map by their values. @param unfiltered the original sorted map to filter @param valuePredicate condition to evaluate on entry values @return a new SortedMap with filtered entries based on value predicate
11 Creates an immutable sorted multiset from an iterator. @param comparator custom comparator for element ordering @param elements iterator providing elements to add @return ImmutableSortedMultiset instance with sorted elements
12 Constructs a set of LocationInfo objects from the given class loader. @param classloader the ClassLoader to inspect for resources @return ImmutableSet of LocationInfo containing file and class loader pairs
13 Determines the subtype of a component type from an array of bounds. @param bounds array of type bounds @return Type representing the subtype or null if not found
14 Creates a new array type from the given component type. Handles wildcard types by processing their bounds. @param componentType the type of components in the array @return Type representing the new array
15 Generates ordered permutations of an iterable using natural ordering. @param elements iterable of comparable elements to permute @return collection of ordered permutations
16 Creates an immutable multiset from the specified iterable. @param elements the iterable containing elements to add @return ImmutableMultiset containing the specified elements or empty if none provided
17 Creates an immutable multiset from an iterator of elements. @param elements source iterator providing the elements @return ImmutableMultiset containing all elements from the iterator
18 Creates an immutable multiset with entries sorted by descending count. @param multiset the input multiset to process @return ImmutableMultiset with elements ordered by highest count first
19 Generates all permutations of a collection. @param elements source collection of elements to permute @return Collection containing all permutations as lists
20 Creates an immutable list from the given iterable. @param elements iterable providing elements to include @return ImmutableList containing all elements from the iterable
21 Creates an immutable copy of the given RangeSet. @param rangeSet the RangeSet to copy @return ImmutableRangeSet containing all ranges from the input set
22 Creates an ImmutableSortedSet from a SortedSet. @param sortedSet the input SortedSet to copy @return an ImmutableSortedSet with elements and order preserved
23 Reads all lines from the character source. @return ImmutableList containing all read lines @throws IOException if an I/O error occurs during reading
24 Constructs an immutable map from the builder's entries. @return ImmutableClassToInstanceMap instance based on builder's state
25 Constructs an ImmutableListMultimap from map entries. @param mapEntries collection of key-value pairs @param valueComparator optional comparator for values @return Immutable list multimap with sorted or unsorted values
26 Builds an immutable map instance. @return ImmutableMap based on builder's state or throws if duplicate keys exist
27 Creates an ImmutableSetMultimap from a collection of map entries. @param mapEntries collection of key-value pairs where values are collections @param valueComparator comparator for sorting values, or null for unordered sets @return ImmutableSetMultimap instance containing the entries
28 Converts a Properties object to an ImmutableMap. @param properties source Properties object @return ImmutableMap containing key-value pairs from the Properties
29 Creates an immutable map from a collection, mapping each element to its index. @param list the collection of elements to be indexed @return ImmutableMap with elements as keys and their indices as values
30 Builds an immutable map from the current builder state. @return ImmutableTypeToInstanceMap instance based on builder's entries
31 Constructs a new TypeTable with additional mappings. @param mappings map of TypeVariableKey to Type representing new bindings @return new TypeTable instance including updated mappings
32 Converts an iterator of keys and a value function into an ImmutableMap. @param keys Iterator providing the map keys @param valueFunction Function to compute values from keys @return ImmutableMap with keys mapped to their computed values
33 Returns a submap with keys in the specified range. @param fromKey lower bound of the keys @param toKey upper bound of the keys @return ImmutableSortedMap with keys between fromKey (inclusive) and toKey (exclusive)
34 Collects elements into an immutable sorted map. @param comparator key comparator for the sorted map @param keyFunction function to extract keys from elements @param valueFunction function to extract values from elements @param mergeFunction function to resolve conflicts between values @return Collector that accumulates elements into an ImmutableSortedMap
35 Removes and returns the maximum element from the queue. Returns null if the queue is empty.
36 Removes and returns the maximum element from the queue. Throws NoSuchElementException if the queue is empty. @return The removed maximum element
37 Converts the iterable to an immutable set. @return ImmutableSet containing all elements from the delegate iterable
38 Checks if this type is a supertype of the given type. @param type the TypeToken to compare against @return true if this type is a supertype, false otherwise
39 Checks if this type token represents a supertype of the specified type. @param type the type to check against @return true if this type is a supertype, false otherwise
40 Checks if this type token is a subtype of another type. @param type the TypeToken to check against @return true if this type is a subtype, false otherwise
