1 Returns an optional enum constant for the given type, using {@link Enum#valueOf}. If the constant does not exist, {@link Optional#absent} is returned. A common use case is for parsing user input or falling back to a default enum constant. For example, {@code Enums.getIfPresent(Country.class, countryInput).or(Country.DEFAULT);} @since 12.0
2 Returns an {@link Optional} containing the first element in {@code iterable} that satisfies the given predicate, if such an element exists. <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null} is matched in {@code iterable}, a NullPointerException will be thrown. <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()} @since 11.0
3 Returns {@code true} if any element in this fluent iterable satisfies the predicate. <p><b>{@code Stream} equivalent:</b> {@link Stream#anyMatch} (same).
4 Helper method for {@link #precomputedInternal} that doesn't test if the negation is cheaper.
5 Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link RuntimeException}, {@link Error}, {@code declaredType1}, or {@code declaredType2}. @param throwable the Throwable to possibly propagate @param declaredType1 any checked exception type declared by the calling method @param declaredType2 any other checked exception type declared by the calling method @deprecated Use a combination of two calls to {@link #throwIfInstanceOf} and one call to {@link #throwIfUnchecked}, which togther provide the same behavior except that they reject {@code null}.
6 Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code IOException}, {@code RuntimeException} or {@code Error}. Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b> Be sure to declare all of the checked exception types your try block can throw when calling an overload of this method so as to avoid losing the original exception type. <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e);} to ensure the compiler knows that it will throw. @return this method does not return; it always throws @throws IOException when the given throwable is an IOException
7 Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code IOException}, {@code RuntimeException}, {@code Error} or a checked exception of the given type. Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b> Be sure to declare all of the checked exception types your try block can throw when calling an overload of this method so as to avoid losing the original exception type. <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e, ...);} to ensure the compiler knows that it will throw. @return this method does not return; it always throws @throws IOException when the given throwable is an IOException @throws X when the given throwable is of the declared type X
8 Closes all {@code Closeable} instances that have been added to this {@code Closer}. If an exception was thrown in the try block and passed to one of the {@code exceptionThrown} methods, any exceptions thrown when attempting to close a closeable will be suppressed. Otherwise, the <i>first</i> exception to be thrown from an attempt to close a closeable will be thrown and any additional exceptions that are thrown after that will be suppressed.
9 Creates a thread using {@link #platformThreadFactory}, and sets its name to {@code name} unless changing the name is forbidden by the security manager.
10 Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a key that doesn't satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 14.0
11 Returns a multimap containing the mappings in {@code unfiltered} that satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a key/value pair that doesn't satisfy the predicate, multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. @since 14.0
12 @since 18.0
13 Returns an iterator over the merged contents of all given {@code iterators}, traversing every element of the input iterators. Equivalent entries will not be de-duplicated. <p>Callers must ensure that the source {@code iterators} are in non-descending order as this method does not sort its input. <p>For any equivalent elements across all {@code iterators}, it is undefined which element is returned first. @since 11.0
14 Copies an iterable's elements into an array. @param iterable the iterable to copy @return a newly-allocated array into which all the elements of the iterable have been copied
15 {@inheritDoc} <p>If any entries for the specified {@code key} already exist in the multimap, their values are changed in-place without affecting the iteration order. <p>The returned list is immutable and implements {@link java.util.RandomAccess}.
16 {@inheritDoc} <p>The returned list is immutable and implements {@link java.util.RandomAccess}.
17 Creates a {@code CopyOnWriteArrayList} instance containing the given elements. @param elements the elements that the list should contain, in order @return a new {@code CopyOnWriteArrayList} containing those elements @since 12.0
18 Creates a {@code CopyOnWriteArraySet} instance containing the given elements. @param elements the elements that the set should contain, in order @return a new {@code CopyOnWriteArraySet} containing those elements @since 12.0
19 Searches the specified list for the specified object using the binary search algorithm. The list must be sorted into ascending order according to the specified comparator (as by the {@link Collections#sort(List, Comparator) Collections.sort(List, Comparator)} method), prior to making this call. If it is not sorted, the results are undefined. <p>If there are elements in the list which compare as equal to the key, the choice of {@link KeyPresentBehavior} decides which index is returned. If no elements compare as equal to the key, the choice of {@link KeyAbsentBehavior} decides which index is returned. <p>This method runs in log(n) time on random-access lists, which offer near-constant-time access to each list element. @param list the list to be searched. @param key the value to be searched for. @param comparator the comparator by which the list is ordered. @param presentBehavior the specification for what to do if at least one element of the list compares as equal to the key. @param absentBehavior the specification for what to do if no elements of the list compare as equal to the key. @return the index determined by the {@code KeyPresentBehavior}, if the key is in the list; otherwise the index determined by the {@code KeyAbsentBehavior}.
20 Returns the stripes that correspond to the passed objects, in ascending (as per {@link #getAt(int)}) order. Thus, threads that use the stripes in the order returned by this method are guaranteed to not deadlock each other. <p>It should be noted that using a {@code Striped<L>} with relatively few stripes, and {@code bulkGet(keys)} with a relative large number of keys can cause an excessive number of shared stripes (much like the birthday paradox, where much fewer than anticipated birthdays are needed for a pair of them to match). Please consider carefully the implications of the number of stripes, the intended concurrency level, and the typical number of keys used in a {@code bulkGet(keys)} operation. See <a href="http://www.mathpages.com/home/kmath199.htm">Balls in Bins model</a> for mathematical formulas that can be used to estimate the probability of collisions. @param keys arbitrary non-null keys @return the stripes corresponding to the objects (one per each object, derived by delegating to {@link #get(Object)}; may contain duplicates), in an increasing index order.
21 Returns a string representation of this network.
22 Returns a string representation of this graph.
23 Returns a view of a navigable map whose values are derived from the original navigable map's entries. In contrast to {@link #transformValues}, this method's entry-transformation logic may depend on the key as well as the value. <p>All other properties of the transformed map, such as iteration order, are left intact. For example, the code: {@snippet : NavigableMap<String, Boolean> options = Maps.newTreeMap(); options.put("verbose", false); options.put("sort", true); EntryTransformer<String, Boolean, String> flagPrefixer = new EntryTransformer<String, Boolean, String>() { public String transformEntry(String key, Boolean value) { return value ? key : ("yes" + key); } }; NavigableMap<String, String> transformed = LabsMaps.transformNavigableEntries(options, flagPrefixer); System.out.println(transformed); } ... prints {@code {sort=yessort, verbose=verbose}}. <p>Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. <p>It's acceptable for the underlying map to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed map might contain null values if the transformer sometimes gives a null result. <p>The returned map is not thread-safe or serializable, even if the underlying map is. <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the transformer will be applied many times for bulk operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing. <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the transformed map. @since 13.0
24 Returns a view of a sorted map where each value is transformed by a function. All other properties of the map, such as iteration order, are left intact. For example, the code: {@snippet : SortedMap<String, Integer> map = ImmutableSortedMap.of("a", 4, "b", 9); Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in); SortedMap<String, Double> transformed = Maps.transformValues(map, sqrt); System.out.println(transformed); } ... prints {@code {a=2.0, b=3.0}}. <p>Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. <p>It's acceptable for the underlying map to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed map might contain null values, if the function sometimes gives a null result. <p>The returned map is not thread-safe or serializable, even if the underlying map is. <p>The function is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the function will be applied many times for bulk operations like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing. @since 11.0
25 {@inheritDoc} @throws IllegalArgumentException if the call would result in more than {@link Integer#MAX_VALUE} occurrences of {@code element} in this multiset.
26 {@inheritDoc} @throws IllegalArgumentException if the call would result in more than {@link Integer#MAX_VALUE} occurrences of {@code element} in this multiset.
27 Returns a view of a {@code ListMultimap} where each value is transformed by a function. All other properties of the multimap, such as iteration order, are left intact. For example, the code: {@snippet : ListMultimap<String, Integer> multimap = ImmutableListMultimap.of("a", 4, "a", 16, "b", 9); Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in); ListMultimap<String, Double> transformed = Multimaps.transformValues(map, sqrt); System.out.println(transformed); } ... prints {@code {a=[2.0, 4.0], b=[3.0]}}. <p>Changes in the underlying multimap are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying multimap. <p>It's acceptable for the underlying multimap to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed multimap might contain null values, if the function sometimes gives a null result. <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap is. <p>The function is applied lazily, invoked when needed. This is necessary for the returned multimap to be a view, but it means that the function will be applied many times for bulk operations like {@link Multimap#containsValue} and {@code Multimap.toString()}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned multimap doesn't need to be a view, copy the returned multimap into a new multimap of your choosing. @since 7.0
28 {@inheritDoc} <p>This implementation is highly efficient when {@code elementsToAdd} is itself a {@link Multiset}.
29 A sensible definition of {@link #addAll(Collection)} in terms of {@link #add(Object)} and {@link #add(Object, int)}. If you override either of these methods, you may wish to override {@link #addAll(Collection)} to forward to this implementation. @since 7.0
30 Returns a synchronized (thread-safe) multimap backed by the specified multimap. In order to guarantee serial access, it is critical that <b>all</b> access to the backing multimap is accomplished through the returned multimap. <p>It is imperative that the user manually synchronize on the returned multimap when accessing any of its collection views: {@snippet : Multimap<K, V> multimap = Multimaps.synchronizedMultimap( HashMultimap.<K, V>create()); ... Collection<V> values = multimap.get(key); // Needn't be in synchronized block ... synchronized (multimap) { // Synchronizing on multimap, not values! Iterator<V> i = values.iterator(); // Must be in synchronized block while (i.hasNext()) { foo(i.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>Note that the generated multimap's {@link Multimap#removeAll} and {@link Multimap#replaceValues} methods return collections that aren't synchronized. <p>The returned multimap will be serializable if the specified multimap is serializable. @param multimap the multimap to be wrapped in a synchronized view @return a synchronized view of the specified multimap
31 Returns a synchronized (thread-safe) table backed by the specified table. In order to guarantee serial access, it is critical that <b>all</b> access to the backing table is accomplished through the returned table. <p>It is imperative that the user manually synchronize on the returned table when accessing any of its collection views: {@snippet : Table<R, C, V> table = Tables.synchronizedTable(HashBasedTable.<R, C, V>create()); ... Map<C, V> row = table.row(rowKey); // Needn't be in synchronized block ... synchronized (table) { // Synchronizing on table, not row! Iterator<Entry<C, V>> i = row.entrySet().iterator(); // Must be in synchronized block while (i.hasNext()) { foo(i.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>The returned table will be serializable if the specified table is serializable. @param table the table to be wrapped in a synchronized view @return a synchronized view of the specified table @since 22.0
32 Returns the escaped form of a given literal string. <p>If you are escaping input in arbitrary successive chunks, then it is not generally safe to use this method. If an input string ends with an unmatched high surrogate character, then this method will throw {@link IllegalArgumentException}. You should ensure your input is valid <a href="http://en.wikipedia.org/wiki/UTF-16">UTF-16</a> before calling this method. <p><b>Note:</b> When implementing an escaper it is a good idea to override this method for efficiency by inlining the implementation of {@link #nextEscapeIndex(CharSequence, int, int)} directly. Doing this for {@link com.google.common.net.PercentEscaper} more than doubled the performance for unescaped strings (as measured by {@code CharEscapersBenchmark}). @param string the literal string to be escaped @return the escaped form of {@code string} @throws NullPointerException if {@code string} is null @throws IllegalArgumentException if invalid surrogate characters are encountered
33 Reads all characters from a {@link Readable} object into a new {@link StringBuilder} instance. Does not close the {@code Readable}. @param r the object to read from @return a {@link StringBuilder} containing all the characters @throws IOException if an I/O error occurs
34 Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the primary input fails with the given {@code exceptionType}, from the result provided by the {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so if the primary input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an exception is thrown, this exception is used as the result of the output {@code Future}. <p>Usage example: {@snippet : ListenableFuture<Integer> fetchCounterFuture = ...; // Falling back to a zero counter in case an exception happens when // processing the RPC to fetch counters. ListenableFuture<Integer> faultTolerantFuture = Futures.catching( fetchCounterFuture, FetchException.class, x -> 0, directExecutor()); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the warnings the {@link MoreExecutors#directExecutor} documentation. @param input the primary input {@code Future} @param exceptionType the exception type that triggers use of {@code fallback}. The exception type is matched against the input's exception. "The input's exception" means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a different kind of exception, that exception itself. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding {@code Throwable.class} in particular. @param fallback the {@link Function} to be called if {@code input} fails with the expected exception type. The function's argument is the input's exception. "The input's exception" means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a different kind of exception, that exception itself. @param executor the executor that runs {@code fallback} if {@code input} fails @since 19.0
35 {@inheritDoc} <p>If a cancellation attempt succeeds on a {@code Future} that had previously been {@linkplain #setFuture set asynchronously}, then the cancellation will also be propagated to the delegate {@code Future} that was supplied in the {@code setFuture} call. <p>Rather than override this method to perform additional cancellation work or cleanup, subclasses should override {@link #afterDone}, consulting {@link #isCancelled} and {@link #wasInterrupted} as necessary. This ensures that the work is done even if the future is cancelled without a call to {@code cancel}, such as by calling {@code setFuture(cancelledFuture)}. <p>Beware of completing a future while holding a lock. Its listeners may do slow work or acquire other locks, risking deadlocks.
36 Sets the result of this {@code Future} unless this {@code Future} has already been cancelled or set (including {@linkplain #setFuture set asynchronously}). When a call to this method returns, the {@code Future} is guaranteed to be {@linkplain #isDone done} <b>only if</b> the call was accepted (in which case it returns {@code true}). If it returns {@code false}, the {@code Future} may have previously been set asynchronously, in which case its result may not be known yet. That result, though not yet known, cannot be overridden by a call to a {@code set*} method, only by a call to {@link #cancel}. <p>Beware of completing a future while holding a lock. Its listeners may do slow work or acquire other locks, risking deadlocks. @param value the value to be used as the result @return true if the attempt was accepted, completing the {@code Future}
37 Sets the failed result of this {@code Future} unless this {@code Future} has already been cancelled or set (including {@linkplain #setFuture set asynchronously}). When a call to this method returns, the {@code Future} is guaranteed to be {@linkplain #isDone done} <b>only if</b> the call was accepted (in which case it returns {@code true}). If it returns {@code false}, the {@code Future} may have previously been set asynchronously, in which case its result may not be known yet. That result, though not yet known, cannot be overridden by a call to a {@code set*} method, only by a call to {@link #cancel}. <p>Beware of completing a future while holding a lock. Its listeners may do slow work or acquire other locks, risking deadlocks. @param throwable the exception to be used as the failed result @return true if the attempt was accepted, completing the {@code Future}
38 Sets the result of this {@code Future} to match the supplied input {@code Future} once the supplied {@code Future} is done, unless this {@code Future} has already been cancelled or set (including "set asynchronously," defined below). <p>If the supplied future is {@linkplain #isDone done} when this method is called and the call is accepted, then this future is guaranteed to have been completed with the supplied future by the time this method returns. If the supplied future is not done and the call is accepted, then the future will be <i>set asynchronously</i>. Note that such a result, though not yet known, cannot be overridden by a call to a {@code set*} method, only by a call to {@link #cancel}. <p>If the call {@code setFuture(delegate)} is accepted and this {@code Future} is later cancelled, cancellation will be propagated to {@code delegate}. Additionally, any call to {@code setFuture} after any cancellation will propagate cancellation to the supplied {@code Future}. <p>Note that, even if the supplied future is cancelled and it causes this future to complete, it will never trigger interruption behavior. In particular, it will not cause this future to invoke the {@link #interruptTask} method, and the {@link #wasInterrupted} method will not return {@code true}. <p>Beware of completing a future while holding a lock. Its listeners may do slow work or acquire other locks, risking deadlocks. @param future the future to delegate to @return true if the attempt was accepted, indicating that the {@code Future} was not previously cancelled or set. @since 19.0
39 Returns a new {@code Future} whose result is derived from the result of the given {@code Future}. If {@code input} fails, the returned {@code Future} fails with the same exception (and the function is not invoked). Example usage: {@snippet : ListenableFuture<QueryResult> queryFuture = ...; ListenableFuture<List<Row>> rowsFuture = transform(queryFuture, QueryResult::getRows, executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the warnings the {@link MoreExecutors#directExecutor} documentation. <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel the input, and if the input is cancelled, the returned {@code Future} will receive a callback in which it will attempt to cancel itself. <p>An example use of this method is to convert a serializable object returned from an RPC into a POJO. @param input The future to transform @param function A Function to transform the results of the provided future to the results of the returned future. @param executor Executor to run the function in. @return A future that holds result of the transformation. @since 9.0 (in 2.0 as {@code compose})
40 Increments by one the value currently associated with {@code key}, and returns the new value.
41 Decrements by one the value currently associated with {@code key}, and returns the new value.
42 Increments by one the value currently associated with {@code key}, and returns the old value.
43 Decrements by one the value currently associated with {@code key}, and returns the old value.
44 Creates an {@code AtomicLongMap} with the same mappings as the specified {@code Map}.
45 Creates a new instance with the specified edge directionality.
46 Creates a new instance with the specified edge directionality.
47 Creates a new instance with the specified edge directionality.
48 @since 13.0
49 @deprecated Provided to satisfy the {@code Function} interface; use {@link #convert} instead.
50 Creates an empty {@code CompactHashMap} instance.
51 Creates a {@code CompactHashMap} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without growth. @param expectedSize the number of elements you expect to add to the returned set @return a new, empty {@code CompactHashMap} with enough capacity to hold {@code expectedSize} elements without resizing @throws IllegalArgumentException if {@code expectedSize} is negative
52 Creates an empty {@code CompactHashSet} instance.
53 Creates a {@code CompactHashSet} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without growth. @param expectedSize the number of elements you expect to add to the returned set @return a new, empty {@code CompactHashSet} with enough capacity to hold {@code expectedSize} elements without resizing @throws IllegalArgumentException if {@code expectedSize} is negative
54 Creates a new {@code ListMultimap} that uses the provided map and factory. It can generate a multimap based on arbitrary {@link Map} and {@link List} classes. Most users should prefer {@link MultimapBuilder}, though a small number of users will need this method to cover map or collection types that {@link MultimapBuilder} does not support. <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code toString} methods for the multimap and its returned views. The multimap's {@code get}, {@code removeAll}, and {@code replaceValues} methods return {@code RandomAccess} lists if the factory does. However, the multimap's {@code get} method returns instances of a different class than does {@code factory.get()}. <p>The multimap is serializable if {@code map}, {@code factory}, the lists generated by {@code factory}, and the multimap contents are all serializable. <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if {@code map} and the instances generated by {@code factory} are. Concurrent read operations will work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link #synchronizedListMultimap}. <p>Call this method only when the simpler methods {@link ArrayListMultimap#create()} and {@link LinkedListMultimap#create()} won't suffice. <p>Note: the multimap assumes complete ownership over of {@code map} and the lists returned by {@code factory}. Those objects should not be manually updated, they should be empty when provided, and they should not use soft, weak, or phantom references. @param map place to store the mapping from each key to its corresponding values @param factory supplier of new, empty lists that will each hold all values for a given key @throws IllegalArgumentException if {@code map} is not empty
55 Creates a new {@code SetMultimap} that uses the provided map and factory. It can generate a multimap based on arbitrary {@link Map} and {@link Set} classes. Most users should prefer {@link MultimapBuilder}, though a small number of users will need this method to cover map or collection types that {@link MultimapBuilder} does not support. <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code toString} methods for the multimap and its returned views. However, the multimap's {@code get} method returns instances of a different class than {@code factory.get()} does. <p>The multimap is serializable if {@code map}, {@code factory}, the sets generated by {@code factory}, and the multimap contents are all serializable. <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if {@code map} and the instances generated by {@code factory} are. Concurrent read operations will work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link #synchronizedSetMultimap}. <p>Call this method only when the simpler methods {@link HashMultimap#create()}, {@link LinkedHashMultimap#create()}, {@link TreeMultimap#create()}, and {@link TreeMultimap#create(Comparator, Comparator)} won't suffice. <p>Note: the multimap assumes complete ownership over of {@code map} and the sets returned by {@code factory}. Those objects should not be manually updated and they should not use soft, weak, or phantom references. @param map place to store the mapping from each key to its corresponding values @param factory supplier of new, empty sets that will each hold all values for a given key @throws IllegalArgumentException if {@code map} is not empty
56 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableMultiset#builder}.
57 Returns a converter whose {@code convert} method applies {@code secondConverter} to the result of this converter. Its {@code reverse} method applies the converters in reverse order. <p>The returned converter is serializable if {@code this} converter and {@code secondConverter} are.
58 Appends the string representation of each of {@code parts}, using the previously configured separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.
59 Returns a string containing the string representation of each of {@code parts}, using the previously configured separator between each.
60 Returns a fresh {@link MapMakerInternalMap} as specified by the given {@code builder}.
61 Returns a fresh {@link MapMakerInternalMap} with {@link MapMaker.Dummy} values but otherwise as specified by the given {@code builder}. The returned {@link MapMakerInternalMap} will be optimized to saved memory. Since {@link MapMaker.Dummy} is a singleton, we don't need to store any values at all. Because of this optimization, {@code build.getValueStrength()} must be {@link Strength#STRONG}. <p>This method is intended to only be used by the internal implementation of {@link Interners}, since a map of dummy values is the exact use case there.
62 Returns a fluent iterable that combines several iterables. The returned iterable has an iterator that traverses the elements of each iterable in {@code inputs}. The input iterators are not polled until necessary. <p>The returned iterable's iterator supports {@code remove()} when the corresponding input iterator supports it. <p><b>{@code Stream} equivalent:</b> to concatenate an arbitrary number of streams, use {@code Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}. @throws NullPointerException if any of the provided iterables is {@code null} @since 20.0
63 Returns the element at the specified position in this fluent iterable. <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (but note that this throws different exception types, and throws an exception if {@code null} would be returned). @param position position of the element to return @return the element at the specified position in this fluent iterable @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to the size of this fluent iterable
64 Acquires a single permit from this {@code RateLimiter}, blocking until the request can be granted. Tells the amount of time slept, if any. <p>This method is equivalent to {@code acquire(1)}. @return time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited @since 16.0 (present in 13.0 with {@code void} return type})
65 Enters this monitor. Blocks at most the given time. @return whether the monitor was entered @since 28.0 (but only since 33.4.0 in the Android flavor)
66 Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the lock, but does not wait for the guard to be satisfied. @return whether the monitor was entered, which guarantees that the guard is now satisfied
67 Constructs a new {@code CacheBuilder} instance with the settings specified in {@code spec}. @since 12.0
68 Returns a new thread-safe interner which retains a strong reference to each instance it has interned, thus preventing these instances from being garbage-collected. If this retention is acceptable, this implementation may perform better than {@link #newWeakInterner}.
69 Returns a new thread-safe interner which retains a weak reference to each instance it has interned, and so does not prevent these instances from being garbage-collected. This most likely does not perform as well as {@link #newStrongInterner}, but is the best alternative when the memory usage of that implementation is unacceptable.
70 {@inheritDoc} @throws IllegalArgumentException if {@code rowKey} is not in {@link #rowKeySet()} or {@code columnKey} is not in {@link #columnKeySet()}.
71 Associates the value {@code null} with the specified keys, assuming both keys are valid. If either key is null or isn't among the keys provided during construction, this method has no effect. <p>This method is equivalent to {@code put(rowKey, columnKey, null)} when both provided keys are valid. @param rowKey row key of mapping to be erased @param columnKey column key of mapping to be erased @return the value previously associated with the keys, or {@code null} if no mapping existed for the keys
72 Returns {@code true} if {@code object} is an {@code ImmutableDoubleArray} containing the same values as this one, in the same order. Values are compared as if by {@link Double#equals}.
73 Returns {@code true} if {@code object} is an {@code ImmutableIntArray} containing the same values as this one, in the same order.
74 Returns {@code true} if {@code object} is an {@code ImmutableLongArray} containing the same values as this one, in the same order.
75 Enum values can override for performance reasons.
76 Returns the index of the first matching BMP character in a character sequence, or {@code -1} if no matching character is present. <p>The default implementation iterates over the sequence in forward order calling {@link #matches} for each character. @param sequence the character sequence to examine from the beginning @return an index, or {@code -1} if no character matches
77 Constructs an iterator across a sequence of the given size whose initial position is 0. That is, the first call to {@link #next()} will return the first element (or throw {@link NoSuchElementException} if {@code size} is zero). @throws IllegalArgumentException if {@code size} is negative
78 Returns the Teredo information embedded in a Teredo address. @param ip {@link Inet6Address} to be examined for embedded Teredo information @return extracted {@code TeredoInfo} @throws IllegalArgumentException if the argument is not a valid IPv6 Teredo address
79 Returns {@code true} if {@code bytes} is a <i>well-formed</i> UTF-8 byte sequence according to Unicode 6.0. Note that this is a stronger criterion than simply whether the bytes can be decoded. For example, some versions of the JDK decoder will accept "non-shortest form" byte sequences, but encoding never reproduces these. Such byte sequences are <i>not</i> considered well-formed. <p>This method returns {@code true} if and only if {@code Arrays.equals(bytes, new String(bytes, UTF_8).getBytes(UTF_8))} does, but is more efficient in both time and space.
80 Encodes the specified byte array, and returns the encoded {@code String}.
81 Attempts to read {@code len} bytes from the stream into the given array starting at {@code off}, with the same behavior as {@link DataInput#readFully(byte[], int, int)}. Does not close the stream. @param in the input stream to read from. @param b the buffer into which the data is read. @param off an int specifying the offset into the data. @param len an int specifying the number of bytes to read. @throws EOFException if this stream reaches the end before reading all the bytes. @throws IOException if an I/O error occurs.
82 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Booleans.asList(array))}, but is likely to be more efficient. @since 23.1
83 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Booleans.asList(array).subList(fromIndex, toIndex), distance)}, but is somewhat faster. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
84 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Bytes.asList(array))}, but is likely to be more efficient. @since 23.1
85 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Bytes.asList(array).subList(fromIndex, toIndex), distance)}, but is somewhat faster. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
86 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. @since 23.1
87 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. @since 23.1
88 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Chars.asList(array))}, but is likely to be more efficient. @since 23.1
89 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Chars.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
90 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. <p>Note that this method uses the total order imposed by {@link Double#compare}, which treats all NaN values as equal and 0.0 as greater than -0.0. @since 23.1
91 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Doubles.asList(array))}, but is likely to be more efficient. @since 23.1
92 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Bytes.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
93 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. <p>Note that this method uses the total order imposed by {@link Float#compare}, which treats all NaN values as equal and 0.0 as greater than -0.0. @since 23.1
94 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Floats.asList(array))}, but is likely to be more efficient. @since 23.1
95 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Floats.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
96 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. @since 23.1
97 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Ints.asList(array))}, but is likely to be more efficient. @since 23.1
98 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Ints.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
99 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. @since 23.1
100 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Longs.asList(array))}, but is likely to be more efficient. @since 23.1
101 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Longs.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
102 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. @since 23.1
103 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Shorts.asList(array))}, but is likely to be more efficient. @since 23.1
104 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Shorts.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
105 Sorts the array, treating its elements as unsigned bytes. @since 23.1
106 Sorts the elements of {@code array} in descending order, interpreting them as unsigned 8-bit integers. @since 23.1
107 Sorts the array, treating its elements as unsigned 32-bit integers. @since 23.1
108 Sorts the elements of {@code array} in descending order, interpreting them as unsigned 32-bit integers. @since 23.1
109 Sorts the array, treating its elements as unsigned 64-bit integers. @since 23.1
110 Sorts the elements of {@code array} in descending order, interpreting them as unsigned 64-bit integers. @since 23.1
111 Returns a splitter that uses the given fixed string as a separator. For example, {@code Splitter.on(", ").split("foo, bar,baz")} returns an iterable containing {@code ["foo", "bar,baz"]}. @param separator the literal, nonempty string to recognize as a separator @return a splitter, with default settings, that recognizes that separator
112 Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries into keys and values using the specified separator. @since 14.0
113 Starts the Finalizer thread. FinalizableReferenceQueue calls this method reflectively. @param finalizableReferenceClass FinalizableReference.class. @param queue a reference queue that the thread will poll. @param frqReference a phantom reference to the FinalizableReferenceQueue, which will be queued either when the FinalizableReferenceQueue is no longer referenced anywhere, or when its close() method is called.
114 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
115 Returns a new {@link Builder}.
116 Returns an unmodifiable view of the specified multiset. Query operations on the returned multiset "read through" to the specified multiset, and attempts to modify the returned multiset result in an {@link UnsupportedOperationException}. <p>The returned multiset will be serializable if the specified multiset is serializable. @param multiset the multiset for which an unmodifiable view is to be generated @return an unmodifiable view of the multiset
117 Creates and returns a new evicting queue that will hold up to {@code maxSize} elements. <p>When {@code maxSize} is zero, elements will be evicted immediately after being added to the queue.
118 Constructor for use by subclasses.
119 Constructor for use by subclasses.
120 Constructor for use by subclasses.
121 Returns an unmodifiable view of the specified set of entries. The {@link Entry#setValue} operation throws an {@link UnsupportedOperationException}, as do any operations that would modify the returned set. @param entrySet the entries for which to return an unmodifiable view @return an unmodifiable view of the entries
122 Returns an unmodifiable view of the specified navigable map. Query operations on the returned map read through to the specified map, and attempts to modify the returned map, whether direct or via its views, result in an {@code UnsupportedOperationException}. <p>The returned navigable map will be serializable if the specified navigable map is serializable. <p>This method's signature will not permit you to convert a {@code NavigableMap<? extends K, V>} to a {@code NavigableMap<K, V>}. If it permitted this, the returned map's {@code comparator()} method might return a {@code Comparator<? extends K>}, which works only on a particular subtype of {@code K}, but promise that it's a {@code Comparator<? super K>}, which must work on any type of {@code K}. @param map the navigable map for which an unmodifiable view is to be returned @return an unmodifiable view of the specified navigable map @since 12.0
123 Returns an unmodifiable view of the specified {@code ListMultimap}. Query operations on the returned multimap "read through" to the specified multimap, and attempts to modify the returned multimap, either directly or through the multimap's views, result in an {@code UnsupportedOperationException}. <p>The returned multimap will be serializable if the specified multimap is serializable. @param delegate the multimap for which an unmodifiable view is to be returned @return an unmodifiable view of the specified multimap
124 Returns an unmodifiable view of the specified {@code SetMultimap}. Query operations on the returned multimap "read through" to the specified multimap, and attempts to modify the returned multimap, either directly or through the multimap's views, result in an {@code UnsupportedOperationException}. <p>The returned multimap will be serializable if the specified multimap is serializable. @param delegate the multimap for which an unmodifiable view is to be returned @return an unmodifiable view of the specified multimap
125 Returns an unmodifiable view of the specified row-sorted table. This method allows modules to provide users with "read-only" access to internal tables. Query operations on the returned table "read through" to the specified table, and attempts to modify the returned table, whether direct or via its collection views, result in an {@code UnsupportedOperationException}. <p>The returned table will be serializable if the specified table is serializable. @param table the row-sorted table for which an unmodifiable view is to be returned @return an unmodifiable view of the specified table @since 11.0
126 Assigns a thread to the given {@link Future} to provide {@link ListenableFuture} functionality. <p><b>Warning:</b> If the input future does not already implement {@code ListenableFuture}, the returned future will emulate {@link ListenableFuture#addListener} by taking a thread from an internal, unbounded pool at the first call to {@code addListener} and holding it until the future is {@linkplain Future#isDone() done}. <p>Prefer to create {@code ListenableFuture} instances with {@link SettableFuture}, {@link MoreExecutors#listeningDecorator( java.util.concurrent.ExecutorService)}, {@link ListenableFutureTask}, {@link AbstractFuture}, and other utilities over creating plain {@code Future} instances to be upgraded to {@code ListenableFuture} after the fact.
127 Registers separate success and failure callbacks to be run when the {@code Future}'s computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the computation is already complete, immediately. <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of callbacks, but any callback added through this method is guaranteed to be called once the computation is complete. <p>Exceptions thrown by a {@code callback} will be propagated up to the executor. Any exception thrown during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and logged. <p>Example: {@snippet : ListenableFuture<QueryResult> future = ...; Executor e = ... addCallback(future, new FutureCallback<QueryResult>() { public void onSuccess(QueryResult result) { storeInCache(result); } public void onFailure(Throwable t) { reportError(t); } }, e); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the warnings the {@link MoreExecutors#directExecutor} documentation. <p>For a more general interface to attach a completion listener to a {@code Future}, see {@link ListenableFuture#addListener addListener}. @param future The future attach the callback to. @param callback The callback to invoke when {@code future} is completed. @param executor The executor to run {@code callback} when the future completes. @since 10.0
128 Creates a new, empty map with the specified strategy, initial capacity and concurrency level.
129 Creates a new, empty multiset, sorted according to the elements' natural order. All elements inserted into the multiset must implement the {@code Comparable} interface. Furthermore, all such elements must be <i>mutually comparable</i>: {@code e1.compareTo(e2)} must not throw a {@code ClassCastException} for any elements {@code e1} and {@code e2} in the multiset. If the user attempts to add an element to the multiset that violates this constraint (for example, the user attempts to add a string element to a set whose elements are integers), the {@code add(Object)} call will throw a {@code ClassCastException}. <p>The type specification is {@code <E extends Comparable>}, instead of the more specific {@code <E extends Comparable<? super E>>}, to support classes defined without generics.
130 Creates a new, empty multiset, sorted according to the specified comparator. All elements inserted into the multiset must be <i>mutually comparable</i> by the specified comparator: {@code comparator.compare(e1, e2)} must not throw a {@code ClassCastException} for any elements {@code e1} and {@code e2} in the multiset. If the user attempts to add an element to the multiset that violates this constraint, the {@code add(Object)} call will throw a {@code ClassCastException}. @param comparator the comparator that will be used to sort this multiset. A null value indicates that the elements' <i>natural ordering</i> should be used.
131 {@inheritDoc} <p>Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a {@link List}, instead of the {@link Collection} specified in the {@link Multimap} interface.
132 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface. <p>Any duplicates in {@code values} will be stored in the multimap once.
133 Removes all values associated with a given key. The returned collection is immutable. <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link Multimap} interface.
134 Creates a new, empty {@code HashMultiset} with the specified expected number of distinct elements. @param distinctElements the expected number of distinct elements @throws IllegalArgumentException if {@code distinctElements} is negative
135 Returns true if {@code network} has at least one cycle. A cycle is defined as a non-empty subset of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges) starting and ending with the same node. <p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).
136 Creates a new, empty {@code LinkedHashMultiset} with the specified expected number of distinct elements. @param distinctElements the expected number of distinct elements @throws IllegalArgumentException if {@code distinctElements} is negative
137 Constructs a graph with the properties specified in {@code builder}.
138 Constructs a graph with the properties specified in {@code builder}.
139 {@inheritDoc} <p>Creates an empty {@code HashSet} for a collection of values for one key. @return a new {@code HashSet} containing a collection of values for one key
140 {@inheritDoc} <p>Creates an empty {@code LinkedHashSet} for a collection of values for one key. @return a new {@code LinkedHashSet} containing a collection of values for one key
141 Associates the ({@code rowKey}, {@code columnKey}) pair with {@code value} in the built table. Duplicate key pairs are not allowed and will cause {@link #build} to fail.
142 Associates {@code key} with {@code value} in the built bimap. Duplicate keys or values are not allowed, and will cause {@link #build} to fail.
143 Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed, and will cause {@link #build} to fail.
144 Associates all of {@code map's} keys and values in the built map. Duplicate keys are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key or value in {@code map} is null @throws ClassCastException if any value is not an instance of the type specified by its key
145 Adds the given {@code entry} to the map, making it immutable if necessary. If the same key is put more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last value put for that key. @since 11.0
146 Associates {@code key} with {@code value} in the built map. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause {@link #build} to fail.
147 Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed, and will cause {@link #build} to fail.
148 Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed, and will cause {@link #build} to fail.
149 {@inheritDoc} @since 19.0
150 {@inheritDoc} @since 19.0
151 Returns the elements of a {@code NavigableSet}, {@code unfiltered}, that satisfy a predicate. The returned set is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting set's iterator does not support {@code remove()}, but all other set methods are supported. When given an element that doesn't satisfy the predicate, the set's {@code add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods such as {@code removeAll()} and {@code clear()} are called on the filtered set, only elements that satisfy the filter will be removed from the underlying set. <p>The returned set isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered set's methods, such as {@code size()}, iterate across every element in the underlying set and determine which elements satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and use the copy. <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link Iterables#filter(Iterable, Class)} for related functionality.) @since 14.0
152 Returns a newly-created immutable sorted map, or throws an exception if any two keys are equal. @throws IllegalArgumentException if any two keys are equal according to the comparator (which might be the keys' natural order) @since 31.0
153 Associates the specified range with the specified value. @throws IllegalArgumentException if {@code range} is empty
154 Add the specified range to this builder. Adjacent ranges are permitted and will be merged, but overlapping ranges will cause an exception when {@link #build()} is called. @throws IllegalArgumentException if {@code range} is empty
155 Returns the maximal range {@linkplain #encloses enclosed} by both this range and {@code connectedRange}, if such a range exists. <p>For example, the intersection of {@code [1..5]} and {@code (3..7)} is {@code (3..5]}. The resulting range may be empty; for example, {@code [1..5)} intersected with {@code [5..7)} yields the empty range {@code [5..5)}. <p>The intersection exists if and only if the two ranges are {@linkplain #isConnected connected}. <p>The intersection operation is commutative, associative and idempotent, and its identity element is {@link Range#all}). @throws IllegalArgumentException if {@code isConnected(connectedRange)} is {@code false}
156 Returns the maximal range lying between this range and {@code otherRange}, if such a range exists. The resulting range may be empty if the two ranges are adjacent but non-overlapping. <p>For example, the gap of {@code [1..5]} and {@code (7..10)} is {@code (5..7]}. The resulting range may be empty; for example, the gap between {@code [1..5)} {@code [5..7)} yields the empty range {@code [5..5)}. <p>The gap exists if and only if the two ranges are either disconnected or immediately adjacent (any intersection must be an empty range). <p>The gap operation is commutative. @throws IllegalArgumentException if this range and {@code otherRange} have a nonempty intersection @since 27.0
157 Returns the minimal range that {@linkplain #encloses encloses} both this range and {@code other}. For example, the span of {@code [1..3]} and {@code (5..7)} is {@code [1..7)}. <p><i>If</i> the input ranges are {@linkplain #isConnected connected}, the returned range can also be called their <i>union</i>. If they are not, note that the span might contain values that are not contained in either input range. <p>Like {@link #intersection(Range) intersection}, this operation is commutative, associative and idempotent. Unlike it, it is always well-defined for any two input ranges.
158 Returns the canonical form of this range in the given domain. The canonical form has the following properties: <ul> <li>equivalence: {@code a.canonical().contains(v) == a.contains(v)} for all {@code v} (in other words, {@code ContiguousSet.create(a.canonical(domain), domain).equals( ContiguousSet.create(a, domain))} <li>uniqueness: unless {@code a.isEmpty()}, {@code ContiguousSet.create(a, domain).equals(ContiguousSet.create(b, domain))} implies {@code a.canonical(domain).equals(b.canonical(domain))} <li>idempotence: {@code a.canonical(domain).canonical(domain).equals(a.canonical(domain))} </ul> <p>Furthermore, this method guarantees that the range returned will be one of the following canonical forms: <ul> <li>[start..end) <li>[start..+∞) <li>(-∞..end) (only if type {@code C} is unbounded below) <li>(-∞..+∞) (only if type {@code C} is unbounded below) </ul>
159 Returns a new, empty {@code HashBiMap} with the default initial capacity (16).
160 Constructs a new bimap containing initial values from {@code map}. The bimap is created with an initial capacity sufficient to hold the mappings in the specified map.
161 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
162 Returns an {@code ImmutableClassToInstanceMap} containing a single entry. @since 19.0
163 Returns an immutable set of the values in this map, in the same order they appear in {@link #entrySet}.
164 Returns a reversed view of the specified list. For example, {@code Lists.reverse(Arrays.asList(1, 2, 3))} returns a list containing {@code 3, 2, 1}. The returned list is backed by this list, so changes in the returned list are reflected in this list, and vice-versa. The returned list supports all of the optional list operations supported by this list. <p>The returned list is random-access if the specified list is random access. @since 7.0
165 Returns an immutable list containing the given elements, in order. @throws NullPointerException if {@code elements} contains a null element @since 3.0
166 Views the array as an immutable list. Copies if the specified range does not cover the complete array. Does not check for nulls.
167 Returns an immutable list of the elements between the specified {@code fromIndex}, inclusive, and {@code toIndex}, exclusive. (If {@code fromIndex} and {@code toIndex} are equal, the empty immutable list is returned.) <p><b>Note:</b> in almost all circumstances, the returned {@link ImmutableList} retains a strong reference to {@code this}, which may prevent the original list from being garbage collected. If you want the original list to be eligible for garbage collection, you should create and use a copy of the sub list (e.g., {@code ImmutableList.copyOf(originalList.subList(...))}).
168 Returns an immutable range map mapping a single range to a single value.
169 Returns an immutable range set containing the specified single range. If {@link Range#isEmpty() range.isEmpty()}, this is equivalent to {@link ImmutableRangeSet#of()}.
170 Returns an immutable map containing a single entry.
171 Returns an immutable set containing each of {@code elements}, minus duplicates, in the order each appears first in the source array. @throws NullPointerException if any of {@code elements} is null @since 3.0
172 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
173 Combines two iterators into a single iterator. The returned iterator iterates across the elements in {@code a}, followed by the elements in {@code b}. The source iterators are not polled until necessary. <p>The returned iterator supports {@code remove()} when the corresponding input iterator supports it.
174 Combines three iterators into a single iterator. The returned iterator iterates across the elements in {@code a}, followed by the elements in {@code b}, followed by the elements in {@code c}. The source iterators are not polled until necessary. <p>The returned iterator supports {@code remove()} when the corresponding input iterator supports it.
175 Combines four iterators into a single iterator. The returned iterator iterates across the elements in {@code a}, followed by the elements in {@code b}, followed by the elements in {@code c}, followed by the elements in {@code d}. The source iterators are not polled until necessary. <p>The returned iterator supports {@code remove()} when the corresponding input iterator supports it.
176 Gets an iterator representing an immutable snapshot of all subscribers to the given event at the time this method is called.
177 Returns the value of {@code closingFuture}. @throws ExecutionException if {@code closingFuture} is a failed step @throws CancellationException if the {@code closingFuture}'s future was cancelled @throws IllegalArgumentException if {@code closingFuture} is not one of the futures passed to {@link #whenAllComplete(Iterable)} or {@link #whenAllComplete(Iterable)} @throws IllegalStateException if called outside of a call to {@link CombiningCallable#call(DeferredCloser, Peeker)} or {@link AsyncCombiningCallable#call(DeferredCloser, Peeker)}
178 This method is a convenience for testing. Code should call {@link MapMakerInternalMap#containsValue} directly.
179 A sensible, albeit inefficient, definition of {@link #remove} in terms of the {@code iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #remove} to forward to this implementation. <p>Alternately, you may wish to override {@link #remove} with {@code keySet().remove}, assuming that approach would not lead to an infinite loop. @since 7.0
180 A sensible definition of {@link #clear} in terms of the {@code iterator} method of {@link #entrySet}. In many cases, you may wish to override {@link #clear} to forward to this implementation. @since 7.0
181 A sensible definition of {@link #isEmpty} in terms of the {@code iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #isEmpty} to forward to this implementation. @since 7.0
182 A sensible definition of {@link #hashCode} in terms of the {@code iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #hashCode} to forward to this implementation. @since 7.0
183 Computes the difference between two maps. This difference is an immutable snapshot of the state of the maps at the time this method is called. It will never change, even if the maps change at a later time. <p>Since this method uses {@code HashMap} instances internally, the keys of the supplied maps must be well-behaved with respect to {@link Object#equals} and {@link Object#hashCode}. <p><b>Note:</b>If you only need to know whether two maps have the same mappings, call {@code left.equals(right)} instead of this method. @param left the map to treat as the "left" map for purposes of comparison @param right the map to treat as the "right" map for purposes of comparison @return the difference between the two maps
184 Creates a new EventBus named "default".
185 Crosses an element over to the opposite heap by moving it one level down (or up if there are no elements below it). <p>Returns the new position of the element.
186 Fills the hole at {@code index} by moving in the least of its grandchildren to this position, then recursively filling the new hole created. @return the position of the new hole (where the lowest grandchild moved from, that had no grandchild to replace it)
187 A sensible definition of {@link #contains} in terms of the {@code first()} method of {@link #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #contains} to forward to this implementation. @since 7.0
188 A sensible definition of {@link #remove} in terms of the {@code iterator()} method of {@link #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #remove} to forward to this implementation. @since 7.0
189 A sensible default implementation of {@link #subSet(Object, Object)} in terms of {@link #headSet(Object)} and {@link #tailSet(Object)}. In some situations, you may wish to override {@link #subSet(Object, Object)} to forward to this implementation. @since 7.0
190 {@inheritDoc} <p>This method returns a {@link SortedSet}, instead of the {@code Set} specified in the {@link Table} interface.
191 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap} interface.
192 Creates a {@link BloomFilter} with the expected number of insertions and expected false positive probability. <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified, will result in its saturation, and a sharp deterioration of its false positive probability. <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>} is. <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since {@link #equals} also relies on object identity of funnels. @param funnel the funnel of T's that the constructed {@code BloomFilter} will use @param expectedInsertions the number of expected insertions to the constructed {@code BloomFilter}; must be positive @param fpp the desired false positive probability (must be positive and less than 1.0) @return a {@code BloomFilter} @since 19.0
193 Returns the {@code int} value that is equal to {@code x} rounded with the specified rounding mode, if possible. @throws ArithmeticException if <ul> <li>{@code x} is infinite or NaN <li>{@code x}, after being rounded to a mathematical integer using the specified rounding mode, is either less than {@code Integer.MIN_VALUE} or greater than {@code Integer.MAX_VALUE} <li>{@code x} is not a mathematical integer and {@code mode} is {@link RoundingMode#UNNECESSARY} </ul>
194 Returns the {@code long} value that is equal to {@code x} rounded with the specified rounding mode, if possible. @throws ArithmeticException if <ul> <li>{@code x} is infinite or NaN <li>{@code x}, after being rounded to a mathematical integer using the specified rounding mode, is either less than {@code Long.MIN_VALUE} or greater than {@code Long.MAX_VALUE} <li>{@code x} is not a mathematical integer and {@code mode} is {@link RoundingMode#UNNECESSARY} </ul>
195 Adds each member of {@code elements} as a candidate for the top {@code k} elements. This operation takes amortized linear time in the length of {@code elements}. The iterator is consumed after this operation completes. <p>If all input data to this {@code TopKSelector} is in a single {@code Iterator}, prefer {@link Ordering#leastOf(Iterator, int)}, which provides a simpler API for that use case.
196 Returns a {@code TopKSelector} that collects the lowest {@code k} elements added to it, relative to the natural ordering of the elements, and returns them via {@link #topK} in ascending order. @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}
197 Returns a {@code TopKSelector} that collects the greatest {@code k} elements added to it, relative to the natural ordering of the elements, and returns them via {@link #topK} in descending order. @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}
198 Returns {@code true} if {@code n} is a <a href="http://mathworld.wolfram.com/PrimeNumber.html">prime number</a>: an integer <i>greater than one</i> that cannot be factored into a product of <i>smaller</i> positive integers. Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i> be factored into smaller positive integers). <p>To test larger numbers, use {@link LongMath#isPrime} or {@link BigInteger#isProbablePrime}. @throws IllegalArgumentException if {@code n} is negative @since 20.0
199 Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and {@code k}, that is, {@code n! / (k! (n - k)!)}. <p><b>Warning:</b> the result can take as much as <i>O(k log n)</i> space. @throws IllegalArgumentException if {@code n < 0}, {@code k < 0}, or {@code k > n}
200 Returns statistics over a dataset containing the given values. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision)
201 Returns statistics over a dataset containing the given values. The iterator will be completely consumed by this method. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision)
202 Adds the given statistics to the dataset, as if the individual values used to compute the statistics had been added directly.
203 Returns statistics over a dataset containing the given values. The stream will be completely consumed by this method. <p>If you have a {@code Stream<Double>} rather than a {@code DoubleStream}, you should collect the values using {@link #toStats()} instead. @param values a series of values @since 28.2 (but only since 33.4.0 in the Android flavor)
204 Returns statistics over a dataset containing the given values. The stream will be completely consumed by this method. <p>If you have a {@code Stream<Integer>} rather than an {@code IntStream}, you should collect the values using {@link #toStats()} instead. @param values a series of values @since 28.2 (but only since 33.4.0 in the Android flavor)
205 Returns statistics over a dataset containing the given values. The stream will be completely consumed by this method. <p>If you have a {@code Stream<Long>} rather than a {@code LongStream}, you should collect the values using {@link #toStats()} instead. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15)) @since 28.2 (but only since 33.4.0 in the Android flavor)
206 Adds the given values to the dataset. The stream will be completely consumed by this method. @param values a series of values @since 28.2 (but only since 33.4.0 in the Android flavor)
207 Adds the given values to the dataset. The stream will be completely consumed by this method. @param values a series of values @since 28.2 (but only since 33.4.0 in the Android flavor)
208 Adds the given values to the dataset. The stream will be completely consumed by this method. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15)) @since 28.2 (but only since 33.4.0 in the Android flavor)
209 Performs an in-place selection, like {@link #selectInPlace}, to select all the indexes {@code allRequired[i]} for {@code i} in the range [{@code requiredFrom}, {@code requiredTo}]. These indexes must be sorted in the array and must all be in the range [{@code from}, {@code to}].
210 Returns an immutable array containing the given values, in order. <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link Builder#addAll(Iterable)}, with all the performance implications associated with that.
211 Returns an immutable array containing the given values, in order. <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link Builder#addAll(Iterable)}, with all the performance implications associated with that.
212 Returns an immutable array containing the given values, in order. <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link Builder#addAll(Iterable)}, with all the performance implications associated with that.
213 Returns a string representation of the {@code UnsignedLong} value, in base {@code radix}. If {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix {@code 10} is used.
214 Returns a string representation of x, where x is treated as unsigned. <p><b>Java 8+ users:</b> use {@link Long#toUnsignedString(long)} instead.
215 An implementation of {@link ExecutorService#invokeAny} for {@link ListeningExecutorService} implementations.
216 Creates the {@link ListenableFuture} which will return the result of running {@code combiner} when all Futures complete. {@code combiner} will run using {@code executor}. <p>If the combiner throws a {@code CancellationException}, the returned future will be cancelled. <p>Canceling this Future will attempt to cancel all the component futures. @since 23.6 @return a future whose result is based on {@code combiner} (or based on the input futures passed to {@code whenAllSucceed}, if that is the method you used to create this {@code FutureCombiner}). Even though the future never produces a value other than {@code null}, you should typically check whether it failed: See <a href="https://errorprone.info/bugpattern/FutureReturnValueIgnored">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.
217 Starts a {@link ClosingFuture} pipeline with a {@link ListenableFuture}. <p>{@code future}'s value will not be closed when the pipeline is done even if {@code V} implements {@link Closeable}. In order to start a pipeline with a value that will be closed when the pipeline is done, use {@link #submit(ClosingCallable, Executor)} instead.
218 A sensible definition of {@link #poll} in terms of {@link #remove}. If you override {@link #remove}, you may wish to override {@link #poll} to forward to this implementation. @since 7.0
219 A sensible definition of {@link #peek} in terms of {@link #element}. If you override {@link #element}, you may wish to override {@link #peek} to forward to this implementation. @since 7.0
220 Enqueues a task to run when the previous task (if any) completes. <p>Cancellation does not propagate from the output future to a callable that has begun to execute, but if the output future is cancelled before {@link Callable#call()} is invoked, {@link Callable#call()} will not be invoked.
221 Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new instance of the given checked exception type. This reduces boilerplate for a common use of {@code Future} in which it is unnecessary to programmatically distinguish between exception types or to extract other information from the exception instance. <p>Exceptions from {@code Future.get} are treated as follows: <ul> <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}. <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the interrupt). <li>Any {@link TimeoutException} is wrapped in an {@code X}. <li>Any {@link CancellationException} is propagated untouched, as is any other {@link RuntimeException} (though {@code get} implementations are discouraged from throwing such exceptions). </ul> <p>The overall principle is to continue to treat every checked exception as a checked exception, every unchecked exception as an unchecked exception, and every error as an error. In addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the new stack trace matches that of the current thread. <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor that accepts zero or more arguments, all of type {@code String} or {@code Throwable} (preferring constructors with at least one {@code String}) and calling the constructor via reflection. If the exception did not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code IllegalArgumentException} is thrown. @throws X if {@code get} throws any checked exception except for an {@code ExecutionException} whose cause is not itself a checked exception @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a {@code RuntimeException} as its cause @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code Error} as its cause @throws CancellationException if {@code get} throws a {@code CancellationException} @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or does not have a suitable constructor @since 19.0 (in 10.0 as {@code get} and with different parameter order)
222 Implementing classes should invoke this method once their service has stopped. It will cause the service to transition from {@link State#STARTING} or {@link State#STOPPING} to {@link State#TERMINATED}. @throws IllegalStateException if the service is not one of {@link State#STOPPING}, {@link State#STARTING}, or {@link State#RUNNING}.
223 Invoke this method to transition the service to the {@link State#FAILED}. The service will <b>not be stopped</b> if it is running. Invoke this method when a service has failed critically or otherwise cannot be started nor stopped.
224 Attempts to start the timer immediately prior to the service being started via {@link Service#startAsync()}.
225 Updates the state with the given service transition. <p>This method performs the main logic of ServiceManager in the following steps. <ol> <li>Update the {@link #servicesByState()} <li>Update the {@link #startupTimers} <li>Based on the new state queue listeners to run <li>Run the listeners (outside of the lock) </ol>
226 Enters this monitor when the guard is satisfied. Blocks indefinitely, but may be interrupted. @throws InterruptedException if interrupted while waiting
227 Waits for the guard to be satisfied. Waits indefinitely, but may be interrupted. May be called only by a thread currently occupying this monitor. @throws InterruptedException if interrupted while waiting
228 Enters this monitor when the guard is satisfied. Blocks indefinitely.
229 Waits for the guard to be satisfied. Waits indefinitely. May be called only by a thread currently occupying this monitor.
230 Enters this monitor when the guard is satisfied. Blocks at most the given time, including both the time to acquire the lock and the time to wait for the guard to be satisfied, and may be interrupted. @return whether the monitor was entered, which guarantees that the guard is now satisfied @throws InterruptedException if interrupted while waiting
231 Enters this monitor when the guard is satisfied. Blocks at most the given time, including both the time to acquire the lock and the time to wait for the guard to be satisfied. @return whether the monitor was entered, which guarantees that the guard is now satisfied
232 Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May be called only by a thread currently occupying this monitor. @return whether the guard is now satisfied @throws InterruptedException if interrupted while waiting
233 Waits for the guard to be satisfied. Waits at most the given time. May be called only by a thread currently occupying this monitor. @return whether the guard is now satisfied
234 Returns a future that delegates to this future but will finish early (via a {@link TimeoutException} wrapped in an {@link ExecutionException}) if the specified timeout expires. If the timeout expires, not only will the output future finish, but also the input future ({@code this}) will be cancelled and interrupted. @param timeout when to time out the future @param unit the time unit of the time parameter @param scheduledExecutor The executor service to enforce the timeout.
235 Returns a future that delegates to another but will finish early (via a {@link TimeoutException} wrapped in an {@link ExecutionException}) if the specified duration expires. <p>The delegate future is interrupted and cancelled if it times out. @param delegate The future to delegate to. @param time when to time out the future @param scheduledExecutor The executor service to enforce the timeout. @since 28.0 (but only since 33.4.0 in the Android flavor)
