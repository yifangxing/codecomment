1 Overwrites a file with the contents of a byte array. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)}. @param from the bytes to write @param to the destination file @throws IOException if an I/O error occurs
2 Hashes the contents of this byte source using the given hash function. @throws IOException if an I/O error occurs while reading from this source
3 Copies all bytes from a file to an output stream. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#copy(java.nio.file.Path, OutputStream)}. @param from the source file @param to the output stream @throws IOException if an I/O error occurs
4 Copies all bytes from a URL to an output stream. @param from the URL to read from @param to the output stream @throws IOException if an I/O error occurs
5 Copies all the bytes from one file to another. <p>Copying is not an atomic operation - in the case of an I/O error, power loss, process termination, or other problems, {@code to} may not be a complete copy of {@code from}. If you need to guard against those conditions, you should employ other file-level synchronization. <p><b>Warning:</b> If {@code to} represents an existing file, that file will be overwritten with the contents of {@code from}. If {@code to} and {@code from} refer to the <i>same</i> file, the contents of that file will be deleted. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)}. @param from the source file @param to the destination file @throws IOException if an I/O error occurs @throws IllegalArgumentException if {@code from.equals(to)}
6 Reads all bytes from a file into a byte array. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#readAllBytes}. @param file the file to read from @return a byte array containing all the bytes from file @throws IllegalArgumentException if the file is bigger than the largest possible byte array (2^31 - 1) @throws IOException if an I/O error occurs
7 Reads all bytes from a URL into a byte array. @param url the URL to read from @return a byte array containing all the bytes from the URL @throws IOException if an I/O error occurs
8 Process the bytes of a file. <p>(If this seems too complicated, maybe you're looking for {@link #toByteArray}.) @param file the file to read @param processor the object to which the bytes of the file are passed. @return the result of the byte processor @throws IOException if an I/O error occurs @deprecated Prefer {@code asByteSource(file).read(processor)}.
9 Returns true if the given files exist, are not directories, and contain the same bytes. @throws IOException if an I/O error occurs
10 Returns true if the files located by the given paths exist, are not directories, and contain the same bytes. @throws IOException if an I/O error occurs @since 22.0
11 Writes a character sequence (such as a string) to a file using the given character set. @param from the character sequence to write @param to the destination file @param charset the charset used to encode the output stream; see {@link StandardCharsets} for helpful predefined constants @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSink(to, charset).write(from)}.
12 Appends a character sequence (such as a string) to a file using the given character set. @param from the character sequence to append @param to the destination file @param charset the charset used to encode the output stream; see {@link StandardCharsets} for helpful predefined constants @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSink(to, charset, FileWriteMode.APPEND).write(from)}. This method is scheduled to be removed in October 2019.
13 Copies all characters from a file to an appendable object, using the given character set. @param from the source file @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @param to the appendable object @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSource(from, charset).copyTo(to)}.
14 Reads the first line from a file. The line does not include line-termination characters, but does include other leading and trailing whitespace. @param file the file to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @return the first line, or null if the file is empty @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSource(file, charset).readFirstLine()}.
15 Reads all of the lines from a file. The lines do not include line-termination characters, but do include other leading and trailing whitespace. <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code Files.asCharSource(file, charset).readLines()}. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#readAllLines(java.nio.file.Path, Charset)}. @param file the file to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @return a mutable {@link List} containing all the lines @throws IOException if an I/O error occurs
16 Streams lines from a {@link File}, stopping when our callback returns false, or we have read all of the lines. @param file the file to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @param callback the {@link LineProcessor} to use to handle the lines @return the output of processing the lines @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSource(file, charset).readLines(callback)}.
17 Streams lines from a URL, stopping when our callback returns false, or we have read all of the lines. @param url the URL to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @param callback the LineProcessor to use to handle the lines @return the output of processing the lines @throws IOException if an I/O error occurs
18 Fully maps a file in to memory as per {@link FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)} using the requested {@link MapMode}. <p>Files are mapped from offset 0 to its length. <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes. @param file the file to map @param mode the mode to use when mapping {@code file} @return a buffer reflecting {@code file} @throws FileNotFoundException if the {@code file} does not exist @throws IOException if an I/O error occurs @see FileChannel#map(MapMode, long, long) @since 2.0
19 Maps a file in to memory as per {@link FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)} using the requested {@link MapMode}. <p>Files are mapped from offset 0 to {@code size}. <p>If the mode is {@link MapMode#READ_WRITE} and the file does not exist, it will be created with the requested {@code size}. Thus this method is useful for creating memory mapped files which do not yet exist. <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes. @param file the file to map @param mode the mode to use when mapping {@code file} @return a buffer reflecting {@code file} @throws IOException if an I/O error occurs @see FileChannel#map(MapMode, long, long) @since 2.0
20 Add a shutdown hook to wait for thread completion in the given {@link ExecutorService service}. This is useful if the given service uses daemon threads, and we want to keep the JVM from exiting immediately on shutdown, instead giving these daemon threads a chance to terminate normally. @param service ExecutorService which uses daemon threads @param terminationTimeout how long to wait for the executor to finish before terminating the JVM @param timeUnit unit of time for the time parameter
21 Returns a multimap containing the mappings in {@code unfiltered} whose values satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a value that doesn't satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose value satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 11.0
22 Returns an ordering which tries each given comparator in order until a non-zero result is found, returning that result, and returning zero only if all comparators return zero. The returned ordering is based on the state of the {@code comparators} iterable at the time it was provided to this method. <p>The returned ordering is equivalent to that produced using {@code Ordering.from(comp1).compound(comp2).compound(comp3) . . .}. <p>The returned object is serializable if each of the {@code comparators} is serializable. <p><b>Warning:</b> Supplying an argument with undefined iteration order, such as a {@link HashSet}, will produce non-deterministic results. <p><b>Java 8+ users:</b> Use a chain of calls to {@link Comparator#thenComparing(Comparator)}, or {@code comparatorCollection.stream().reduce(Comparator::thenComparing).get()} (if the collection might be empty, also provide a default comparator as the {@code identity} parameter to {@code reduce}). @param comparators the comparators to try in order
23 Returns an immutable bimap containing the same entries as {@code map}. If {@code map} somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose comparator is not <i>consistent with equals</i>), the results of this method are undefined. <p>The returned {@code BiMap} iterates over entries in the same order as the {@code entrySet} of the original map. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws IllegalArgumentException if two keys have the same value or two values have the same key @throws NullPointerException if any key or value in {@code map} is null
24 Returns an array containing all of the elements from this fluent iterable in iteration order. <p><b>{@code Stream} equivalent:</b> if an object array is acceptable, use {@code stream.toArray()}; if {@code type} is a class literal such as {@code MyType.class}, use {@code stream.toArray(MyType[]::new)}. Otherwise use {@code stream.toArray( len -> (E[]) Array.newInstance(type, len))}. @param type the type of the elements @return a newly-allocated array into which all the elements of this fluent iterable have been copied
25 Copies an iterator's elements into an array. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. @param iterator the iterator to copy @param type the type of the elements @return a newly-allocated array into which all the elements of the iterator have been copied
26 Returns an {@code ImmutableSortedSet} containing all of the elements from this {@code FluentIterable} in the order specified by {@code comparator}, with duplicates (determined by {@code comparator.compare(x, y) == 0}) removed. To produce an {@code ImmutableSortedSet} sorted by its natural ordering, use {@code toSortedSet(Ordering.natural())}. <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableSortedSet#toImmutableSortedSet} to {@code stream.collect()}. @param comparator the function by which to sort set elements @throws NullPointerException if any element of this iterable is {@code null} @since 14.0 (since 12.0 as {@code toImmutableSortedSet()}).
27 Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to {@code compareTo()}, only the first one specified is included. To create a copy of a {@code SortedSet} that preserves the comparator, call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once. <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)} returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s}, while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>} containing one element (the given set itself). <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. <p>This method is not type-safe, as it may be called on elements that are not mutually comparable. @throws ClassCastException if the elements are not mutually comparable @throws NullPointerException if any of {@code elements} is null
28 Returns an immutable sorted set containing the given elements sorted by the given {@code Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the first one specified is included. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. <p>This method is safe to use even when {@code elements} is a synchronized or concurrent collection that is currently being modified by another thread. @throws NullPointerException if {@code comparator} or any of {@code elements} is null @since 7.0 (source-compatible since 2.0)
29 {@inheritDoc} <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link Table} interface.
30 Returns the string representation of this media type in the format described in <a href="http://www.ietf.org/rfc/rfc2045.txt">RFC 2045</a>.
31 Returns a synchronized (thread-safe) {@code SortedSetMultimap} backed by the specified multimap. <p>You must follow the warnings described in {@link #synchronizedMultimap}. <p>The returned multimap will be serializable if the specified multimap is serializable. @param multimap the multimap to be wrapped @return a synchronized view of the specified multimap
32 Reads the contents of this source as a string. @throws IOException if an I/O error occurs while reading from this source
33 Creates a {@code CompactLinkedHashMap} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures. @param expectedSize the number of elements you expect to add to the returned set @return a new, empty {@code CompactLinkedHashMap} with enough capacity to hold {@code expectedSize} elements without resizing @throws IllegalArgumentException if {@code expectedSize} is negative
34 Creates a <i>mutable</i> {@code CompactLinkedHashSet} instance containing the elements of the given collection in the order returned by the collection's iterator. @param collection the elements that the set should contain @return a new {@code CompactLinkedHashSet} containing those elements (minus duplicates)
35 Creates an empty {@code TreeMultimap} ordered by the natural ordering of its keys and values.
36 Creates an empty {@code TreeMultimap} instance using explicit comparators. Neither comparator may be null; use {@link Ordering#natural()} to specify natural order. @param keyComparator the comparator that determines the key ordering @param valueComparator the comparator that determines the value ordering
37 Returns {@code true} if a character sequence contains at least one matching BMP character. Equivalent to {@code !matchesNoneOf(sequence)}. <p>The default implementation iterates over the sequence, invoking {@link #matches} for each character, until this returns {@code true} or the end is reached. @param sequence the character sequence to examine, possibly empty @return {@code true} if this matcher matches at least one character in the sequence @since 8.0
38 Returns a string containing all matching BMP characters of a character sequence, in order. For example: {@snippet : CharMatcher.is('a').retainFrom("bazaar") } ... returns {@code "aaa"}.
39 Returns a string copy of the input character sequence, with each matching BMP character replaced by a given replacement sequence. For example: {@snippet : CharMatcher.is('a').replaceFrom("yaha", "oo") } ... returns {@code "yoohoo"}. <p><b>Note:</b> If the replacement is a fixed string with only one character, you are better off calling {@link #replaceFrom(CharSequence, char)} directly. @param sequence the character sequence to replace matching characters in @param replacement the characters to append to the result string in place of each matching character in {@code sequence} @return the new string
40 Coerces an IPv6 address into an IPv4 address. <p>HACK: As long as applications continue to use IPv4 addresses for indexing into tables, accounting, et cetera, it may be necessary to <b>coerce</b> IPv6 addresses into IPv4 addresses. This method does so by hashing 64 bits of the IPv6 address into {@code 224.0.0.0/3} (64 bits into 29 bits): <ul> <li>If the IPv6 address contains an embedded IPv4 address, the function hashes that. <li>Otherwise, it hashes the upper 64 bits of the IPv6 address. </ul> <p>A "coerced" IPv4 address is equivalent to itself. <p>NOTE: This method is failsafe for security purposes: ALL IPv6 addresses (except localhost (::1)) are hashed to avoid the security risk associated with extracting an embedded IPv4 address that might permit elevated privileges. @param ip {@link InetAddress} to "coerce" @return {@link Inet4Address} represented "coerced" address @since 7.0
41 Creates a {@code RateLimiter} with the specified stable throughput, given as "permits per second" (commonly referred to as <i>QPS</i>, queries per second), and a <i>warmup period</i>, during which the {@code RateLimiter} smoothly ramps up its rate, until it reaches its maximum rate at the end of the period (as long as there are enough requests to saturate it). Similarly, if the {@code RateLimiter} is left <i>unused</i> for a duration of {@code warmupPeriod}, it will gradually return to its "cold" state, i.e. it will go through the same warming up process as when it was first created. <p>The returned {@code RateLimiter} is intended for cases where the resource that actually fulfills the requests (e.g., a remote server) needs "warmup" time, rather than being immediately accessed at the stable (maximum) rate. <p>The returned {@code RateLimiter} starts in a "cold" state (i.e. the warmup period will follow), and if it is left unused for long enough, it will return to that state. @param permitsPerSecond the rate of the returned {@code RateLimiter}, measured in how many permits become available per second @param warmupPeriod the duration of the period where the {@code RateLimiter} ramps up its rate, before reaching its stable (maximum) rate @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero or {@code warmupPeriod} is negative @since 28.0 (but only since 33.4.0 in the Android flavor)
42 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap} interface.
43 @since 15.0 (previously returned ScheduledFuture)
44 Builds a cache, which either returns an already-loaded value for a given key or atomically computes or retrieves it using the supplied {@code CacheLoader}. If another thread is currently loading the value for this key, simply waits for that thread to finish and returns its loaded value. Note that multiple threads can concurrently load values for distinct keys. <p>This method does not alter the state of this {@code CacheBuilder} instance, so it can be invoked again to create multiple independent caches. @param loader the cache loader used to obtain new values @return a cache having the requested features
45 Builds a cache which does not automatically load values when keys are requested. <p>Consider {@link #build(CacheLoader)} instead, if it is feasible to implement a {@code CacheLoader}. <p>This method does not alter the state of this {@code CacheBuilder} instance, so it can be invoked again to create multiple independent caches. @return a cache having the requested features @since 11.0
46 Returns a builder that creates immutable sorted multisets with an explicit comparator. If the comparator has a more general type than the set being generated, such as creating a {@code SortedMultiset<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor instead. @throws NullPointerException if {@code comparator} is null
47 Returns a builder that creates immutable sorted multisets whose elements are ordered by the reverse of their natural ordering. <p>Note: the type parameter {@code E} extends {@code Comparable<?>} rather than {@code Comparable<? super E>} in order to accommodate users of obsolete javac versions affected by <a href="https://bugs.openjdk.org/browse/JDK-6468354">JDK-6468354</a>.
48 Returns a builder that creates immutable sorted multisets whose elements are ordered by their natural ordering. The sorted multisets use {@link Ordering#natural()} as the comparator. This method provides more type-safety than {@link #builder}, as it can be called only for classes that implement {@link Comparable}. <p>Note: the type parameter {@code E} extends {@code Comparable<?>} rather than {@code Comparable<? super E>} in order to accommodate users of obsolete javac versions affected by <a href="https://bugs.openjdk.org/browse/JDK-6468354">JDK-6468354</a>.
49 Returns a new bimap with the same mappings as the specified map. If the specified map is an {@code EnumBiMap}, the new bimap has the same types as the provided map. Otherwise, the specified map must contain at least one mapping, in order to determine the key and value types. @param map the map whose mappings are to be placed in this map @throws IllegalArgumentException if map is not an {@code EnumBiMap} instance and contains no mappings
50 Constructs a new bimap with the same mappings as the specified map. If the specified map is an {@code EnumHashBiMap} or an {@link EnumBiMap}, the new bimap has the same key type as the input bimap. Otherwise, the specified map must contain at least one mapping, in order to determine the key type. @param map the map whose mappings are to be placed in this map @throws IllegalArgumentException if map is not an {@code EnumBiMap} or an {@code EnumHashBiMap} instance and contains no mappings
51 Stores a collection of values with the same key, replacing any existing values for that key. <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method returns a {@link SortedSet}, instead of the {@link java.util.Collection} specified in the {@link Multimap} interface. <p>Any duplicates in {@code values} will be stored in the multimap once.
52 Returns {@code true} if the second list is a permutation of the first.
53 Creates a new, empty {@code ArrayListMultimap} with the default initial capacities. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys().arrayListValues().build()}, which provides more control over the underlying data structure.
54 Constructs an {@code ArrayListMultimap} with the same mappings as the specified multimap. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys().arrayListValues().build(multimap)}, which provides more control over the underlying data structure. @param multimap the multimap whose contents are copied to this multimap
55 Creates a new, empty {@code HashMultimap} with the default initial capacities. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys().hashSetValues().build()}, which provides more control over the underlying data structure.
56 Creates a new, empty {@code LinkedListMultimap} with the default initial capacity.
57 Constructs a {@code LinkedListMultimap} with the same mappings as the specified {@code Multimap}. The new multimap has the same {@link Multimap#entries()} iteration order as the input multimap. @param multimap the multimap whose contents are copied to this multimap
58 Constructs a {@code LinkedHashMultimap} with the same mappings as the specified multimap. If a key-value mapping appears multiple times in the input multimap, it only appears once in the constructed multimap. The new multimap has the same {@link Multimap#entries()} iteration order as the input multimap, except for excluding duplicate mappings. @param multimap the multimap whose contents are copied to this multimap
59 Returns an empty {@link MutableNetwork} with the properties of this {@link NetworkBuilder}.
60 Constructs a {@link MutableGraph} with the properties specified in {@code builder}.
61 Returns an empty {@link MutableValueGraph} with the properties of this {@link ValueGraphBuilder}.
62 Associates all of the given table's keys and values in the built table. Duplicate row key column key pairs are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key or value in {@code table} is null
63 Adds all of the given entries to the built bimap. Duplicate keys or values are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key, value, or entry is null @since 19.0
64 Associates all of the given map's keys and values in the built map. If the same key is put more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last value put for that key. @throws NullPointerException if any key or value in {@code map} is null
65 Adds all the given entries to the built map. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key, value, or entry is null @since 19.0
66 Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered map.
67 Add all ranges from the specified range set to this builder. Adjacent ranges are permitted and will be merged, but overlapping ranges will cause an exception when {@link #build()} is called.
68 Returns a view of the intersection of this range set with the given range.
69 Returns a nonempty contiguous set containing all {@code int} values from {@code lower} (inclusive) to {@code upper} (inclusive). (These are the same values contained in {@code Range.closed(lower, upper)}.) @throws IllegalArgumentException if {@code lower} is greater than {@code upper} @since 23.0
70 Returns a nonempty contiguous set containing all {@code long} values from {@code lower} (inclusive) to {@code upper} (inclusive). (These are the same values contained in {@code Range.closed(lower, upper)}.) @throws IllegalArgumentException if {@code lower} is greater than {@code upper} @since 23.0
71 Returns a contiguous set containing all {@code int} values from {@code lower} (inclusive) to {@code upper} (exclusive). If the endpoints are equal, an empty set is returned. (These are the same values contained in {@code Range.closedOpen(lower, upper)}.) @throws IllegalArgumentException if {@code lower} is greater than {@code upper} @since 23.0
72 Returns a contiguous set containing all {@code long} values from {@code lower} (inclusive) to {@code upper} (exclusive). If the endpoints are equal, an empty set is returned. (These are the same values contained in {@code Range.closedOpen(lower, upper)}.) @throws IllegalArgumentException if {@code lower} is greater than {@code upper} @since 23.0
73 Computes the coalesced range for the given range+value - does not mutate the map.
74 Adds {@code node} to the graph and returns the associated {@link NetworkConnections}. @throws IllegalStateException if {@code node} is already present
75 Returns an immutable map containing the same entries as {@code map}. The returned map iterates over entries in the same order as the {@code entrySet} of the original map. If {@code map} somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose comparator is not <i>consistent with equals</i>), the results of this method are undefined. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if any key or value in {@code map} is null
76 {@inheritDoc} @throws NullPointerException if {@code rowKey} is {@code null}
77 @since 12.0
78 @since 12.0
79 Returns an immutable list containing the given elements, in order. @throws NullPointerException if {@code elements} contains a null element
80 Returns an {@code ImmutableRangeMap} containing the associations previously added to this builder. @throws IllegalArgumentException if any two ranges inserted into this builder overlap
81 Returns an {@code ImmutableRangeSet} containing the ranges added to this builder. @throws IllegalArgumentException if any input ranges have nonempty overlap
82 Returns the URLs in the class path specified by the {@code java.class.path} {@linkplain System#getProperty system property}.
83 Returns all declared parameters of this {@code Invokable}. Note that if this is a constructor of a non-static inner class, unlike {@link Constructor#getParameterTypes}, the hidden {@code this} parameter of the enclosing class is excluded from the returned parameters.
84 Returns all declared exception types of this {@code Invokable}.
85 Wraps a collection of tasks. @throws NullPointerException if any element of {@code tasks} is null
86 Returns an immutable list containing the given elements, sorted according to their natural order. The sorting algorithm used is stable, so elements that compare as equal will stay in the order in which they appear in the input. <p>If your data has no duplicates, or you wish to deduplicate elements, use {@code ImmutableSortedSet.copyOf(elements)}; if you want a {@code List} you can use its {@code asList()} view. <p><b>Java 8+ users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted {@code ImmutableList}, use {@code stream.sorted().collect(toImmutableList())}. @throws NullPointerException if any element in the input is null @since 21.0
87 Returns an immutable list containing the given elements, in sorted order relative to the specified comparator. The sorting algorithm used is stable, so elements that compare as equal will stay in the order in which they appear in the input. <p>If your data has no duplicates, or you wish to deduplicate elements, use {@code ImmutableSortedSet.copyOf(comparator, elements)}; if you want a {@code List} you can use its {@code asList()} view. <p><b>Java 8+ users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted {@code ImmutableList}, use {@code stream.sorted(comparator).collect(toImmutableList())}. @throws NullPointerException if any element in the input is null @since 21.0
88 Returns an immutable sorted set containing the given elements sorted by the given {@code Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the first one specified is included. @throws NullPointerException if {@code comparator} or any of {@code elements} is null
89 Creates an ImmutableMap from the first n entries in entryArray. This implementation may replace the entries in entryArray with its own entry objects (though they will have the same key/value contents), and may take ownership of entryArray.
90 The index in the {@link #parts()} list at which the public suffix begins. For example, for the domain name {@code myblog.blogspot.co.uk}, the value would be 1 (the index of the {@code blogspot} part). The value is negative (specifically, {@link #NO_SUFFIX_FOUND}) if no public suffix was found.
91 The index in the {@link #parts()} list at which the registry suffix begins. For example, for the domain name {@code myblog.blogspot.co.uk}, the value would be 2 (the index of the {@code co} part). The value is negative (specifically, {@link #NO_SUFFIX_FOUND}) if no registry suffix was found.
92 Accepts a collection of possibly-null entries. If {@code sameComparator}, then it is assumed that they do not need to be sorted or checked for dupes.
93 Creates a {@code TreeBasedTable} with the same mappings and sort order as the specified {@code TreeBasedTable}.
94 Creates a {@link BloomFilter} with the expected number of insertions and a default expected false positive probability of 3%. <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified, will result in its saturation, and a sharp deterioration of its false positive probability. <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>} is. <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since {@link #equals} also relies on object identity of funnels. @param funnel the funnel of T's that the constructed {@code BloomFilter} will use @param expectedInsertions the number of expected insertions to the constructed {@code BloomFilter}; must be positive @return a {@code BloomFilter}
95 Returns a {@code Collector} that returns the {@code k} greatest (relative to the specified {@code Comparator}) input elements, in descending order, as an unmodifiable {@code List}. Ties are broken arbitrarily. <p>For example: {@snippet : Stream.of("foo", "quux", "banana", "elephant") .collect(greatest(2, comparingInt(String::length))) // returns {"elephant", "banana"} } <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log k)), as opposed to e.g. {@code Stream.sorted(comparator.reversed()).limit(k)}, which currently takes O(n log n) time and O(n) space. @throws IllegalArgumentException if {@code k < 0} @since 22.0
96 Returns the {@code k} least elements of the given iterable according to this ordering, in order from least to greatest. If there are fewer than {@code k} elements present, all will be included. <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple elements are equivalent, it is undefined which will come first. <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterable).collect(Comparators.least(k, thisComparator))} instead. @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending order @throws IllegalArgumentException if {@code k} is negative @since 8.0
97 Returns the {@code k} greatest elements from the given iterator according to this ordering, in order from greatest to least. If there are fewer than {@code k} elements present, all will be included. <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple elements are equivalent, it is undefined which will come first. <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).collect(Comparators.greatest(k, thisComparator))} instead. @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in <i>descending order</i> @throws IllegalArgumentException if {@code k} is negative @since 14.0
98 Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function to its exception if it is an instance of a given exception type. The function can use a {@link DeferredCloser} to capture objects to be closed when the pipeline is done. <p>If this {@code ClosingFuture} succeeds or fails with a different exception type, the function will not be called, and the derived {@code ClosingFuture} will be equivalent to this one. <p>If the function throws an exception, that exception is used as the result of the derived {@code ClosingFuture}. <p>Example usage: {@snippet : ClosingFuture<QueryResult> queryFuture = queryFuture.catching( QueryException.class, (closer, x) -> Query.emptyQueryResult(), executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. <p>After calling this method, you may not call {@link #finishToFuture()}, {@link #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on the original {@code ClosingFuture} instance. @param exceptionType the exception type that triggers use of {@code fallback}. The exception type is matched against this step's exception. "This step's exception" means the cause of the {@link ExecutionException} thrown by {@link Future#get()} on the {@link Future} underlying this step or, if {@code get()} throws a different kind of exception, that exception itself. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding {@code Throwable.class} in particular. @param fallback the function to be called if this step fails with the expected exception type. The function's argument is this step's exception. "This step's exception" means the cause of the {@link ExecutionException} thrown by {@link Future#get()} on the {@link Future} underlying this step or, if {@code get()} throws a different kind of exception, that exception itself. @param executor the executor that runs {@code fallback} if the input fails
99 Waits for the all the services to reach a terminal state. After this method returns all services will either be {@linkplain Service.State#TERMINATED terminated} or {@linkplain Service.State#FAILED failed}.
100 Waits for the all the services to reach a terminal state for no more than the given time. After this method returns all services will either be {@linkplain Service.State#TERMINATED terminated} or {@linkplain Service.State#FAILED failed}. @param timeout the maximum time to wait @param unit the time unit of the timeout argument @throws TimeoutException if not all of the services have stopped within the deadline
