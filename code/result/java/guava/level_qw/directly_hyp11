1 Drains reference queues for keys and values. Ensures proper cleanup of weak references.
2 Filters a bi-map by keys using a predicate. @param unfiltered the original bi-map to filter @param keyPredicate predicate for filtering keys @return a new bi-map with entries that match the key predicate
3 Filters entries in a BiMap by value. @param unfiltered the original BiMap to filter @param valuePredicate predicate for filtering values @return a new BiMap with filtered entries
4 Creates an immutable sorted multiset from iterator elements using natural ordering. @param elements iterator of elements to include in the multiset @return ImmutableSortedMultiset with sorted elements
5 Converts a class to its generic type token. @param cls the class to convert @return TypeToken representing the generic type
6 Converts the delegate to an immutable multiset. @return ImmutableMultiset containing non-null elements from the delegate
7 Builds an immutable multiset from current contents. @return ImmutableMultiset containing all elements
8 Computes the Cartesian product of multiple lists. @param lists collection of lists to compute the product @return List of Lists containing all possible combinations
9 Parses a cache builder specification string. @param cacheBuilderSpecification configuration string for cache settings @return CacheBuilderSpec object representing parsed settings
10 Converts delegate to an immutable list. @return Immutable list of elements
11 Lists files in a directory. @param dir directory path to list files from @return immutable list of file paths @throws IOException if an I/O error occurs
12 Constructs an InternetDomainName object. @param name the domain name to be normalized and validated
13 Combines multiple ListenableFutures into a single future containing their results. @param futures iterable of ListenableFutures to combine @return ListenableFuture with list of results or exceptions from input futures
14 Combines multiple ListenableFutures into a single Future that completes when all input futures complete. @param futures iterable of ListenableFutures to combine @return FutureCombiner object representing the combined future state
15 Combines multiple listenable futures to wait for all successful completions. @param futures collection of listenable futures @return FutureCombiner that aggregates results
16 Combines multiple ListenableFutures into a single future that completes when all input futures succeed. @param futures iterable of ListenableFutures to combine @return ListenableFuture containing list of results or nulls if any input future fails
17 Converts an Iterable of ListenableFutures to an array. @param futures iterable of ListenableFutures @return array of ListenableFutures
18 Creates an immutable range set from the union of given ranges. @param ranges iterable collection of ranges to be combined @return ImmutableRangeSet containing all elements from input ranges
19 Computes intersection of two range sets. @param other the second RangeSet to intersect with @return ImmutableRangeSet containing common ranges
20 Computes the difference between this range set and another. @param other the range set to subtract from this one @return an ImmutableRangeSet representing the difference
21 Collects elements into an ImmutableBiMap using provided key and value functions. @param keyFunction extracts the key from each element @param valueFunction extracts the value from each element @return ImmutableBiMap with keys and values extracted from elements
22 Creates an immutable map from a given map. @param map input map with class keys and instances as values @return ImmutableClassToInstanceMap containing the same entries
23 Creates an immutable copy of the given multimap. @param multimap the multimap to copy @return an ImmutableListMultimap containing the same mappings as the input
24 Builds an immutable multimap. @return ImmutableMultimap instance based on builder settings
25 Merges a range with a value using a remapping function. @param range the range to merge @param value the value to associate with the range @param remappingFunction function to determine new value
26 Builds an immutable set multimap. @return ImmutableSetMultimap with entries sorted by key if comparator is provided
27 Creates an immutable map from iterator values with unique keys. @param values iterator of values to index @param keyFunction function to extract keys from values @return ImmutableMap with unique keys or IllegalArgumentException if duplicates exist
28 Generates all combinations of a given size from a set. @param set the input set @param size the size of each combination @return a set of sets containing all combinations
29 Creates an immutable copy of the given graph. @param graph the original graph to copy @return an ImmutableGraph instance
30 Creates a new TypeResolver with specified type mappings. @param mappings map of TypeVariableKey to resolved types @return new TypeResolver instance with updated mappings
31 Converts iterable keys to an immutable map using a value function. @param keys the iterable of keys @param valueFunction the function to compute values from keys @return ImmutableMap with keys and computed values
32 Retrieves and removes the first element of the queue. @return the head of this queue or null if it is empty
33 Adds an element to the priority queue. @param element the element to add @return true if the element was added, false if it exceeded the max size
34 Retrieves all ClassInfo objects from resources. @return ImmutableSet of ClassInfo instances
35 Retrieves top-level classes from resources. @return Immutable set of ClassInfo objects representing top-level classes
36 Performs breadth-first traversal starting from given nodes. @param startNodes initial set of nodes to start traversal @return Iterable for traversed nodes in breadth-first order
37 Performs depth-first pre-order traversal starting from given nodes. @param startNodes initial nodes to begin traversal @return Iterable of nodes in pre-order sequence
38 Performs depth-first post-order traversal. @param startNodes initial nodes to start traversal @return Iterable of nodes in post-order
39 Scans files and returns resource information. @param scannedFiles set of files to scan @return ImmutableSet of ResourceInfo objects @throws IOException if file operations fail
40 Returns a specialized invokable with the specified return type. @param <R1> the new return type parameter @param returnType the expected return type @return an Invokable with the specified return type @throws IllegalArgumentException if the specified type is not a supertype of the current return type
