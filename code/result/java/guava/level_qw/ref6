1 Returns an {@link Optional} containing the first element in this fluent iterable that satisfies the given predicate, if such an element exists. <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null} is matched in this fluent iterable, a {@link NullPointerException} will be thrown. <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()}.
2 This is the actual implementation of {@link #precomputed}, but we bounce calls through a method on {@link Platform} so that we can have different behavior in GWT. <p>This implementation tries to be smart in a number of ways. It recognizes cases where the negation is cheaper to precompute than the matcher itself; it tries to build small hash tables for matchers that only match a few characters, and so on. In the worst-case scenario, it constructs an eight-kilobyte bit array and queries that. In many situations this produces a matcher which is faster to query than the original.
3 Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code IOException}, {@code RuntimeException}, {@code Error} or a checked exception of either of the given types. Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b> Be sure to declare all of the checked exception types your try block can throw when calling an overload of this method so as to avoid losing the original exception type. <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e, ...);} to ensure the compiler knows that it will throw. @return this method does not return; it always throws @throws IOException when the given throwable is an IOException @throws X1 when the given throwable is of the declared type X1 @throws X2 when the given throwable is of the declared type X2
4 Writes all the given bytes to this sink. @throws IOException if an I/O occurs while writing to this sink
5 Writes all the bytes from the given {@code InputStream} to this sink. Does not close {@code input}. @return the number of bytes written @throws IOException if an I/O occurs while reading from {@code input} or writing to this sink
6 Returns whether the source has zero bytes. The default implementation first checks {@link #sizeIfKnown}, returning true if it's known to be zero and false if it's known to be non-zero. If the size is not known, it falls back to opening a stream and checking for EOF. <p>Note that, in cases where {@code sizeIfKnown} returns zero, it is <i>possible</i> that bytes are actually available for reading. (For example, some special files may return a size of 0 despite actually having content when read.) This means that a source may return {@code true} from {@code isEmpty()} despite having readable content. @throws IOException if an I/O error occurs @since 15.0
7 Returns the size of this source in bytes, even if doing so requires opening and traversing an entire stream. To avoid a potentially expensive operation, see {@link #sizeIfKnown}. <p>The default implementation calls {@link #sizeIfKnown} and returns the value if present. If absent, it will fall back to a heavyweight operation that will open a stream, read (or {@link InputStream#skip(long) skip}, if possible) to the end of the stream and return the total number of bytes that were read. <p>Note that for some sources that implement {@link #sizeIfKnown} to provide a more efficient implementation, it is <i>possible</i> that this method will return a different number of bytes than would be returned by reading all of the bytes (for example, some special files may return a size of 0 despite actually having content when read). <p>In either case, for mutable sources such as files, a subsequent read may return a different number of bytes if the contents are changed. @throws IOException if an I/O error occurs while reading the size of this source
8 Copies the contents of this byte source to the given {@code OutputStream}. Does not close {@code output}. @return the number of bytes copied @throws IOException if an I/O error occurs while reading from this source or writing to {@code output}
9 Copies the contents of this byte source to the given {@code ByteSink}. @return the number of bytes copied @throws IOException if an I/O error occurs while reading from this source or writing to {@code sink}
10 Reads the full contents of this byte source as a byte array. @throws IOException if an I/O error occurs while reading from this source
11 Reads the contents of this byte source using the given {@code processor} to process bytes as they are read. Stops when all bytes have been read or the consumer returns {@code false}. Returns the result produced by the processor. @throws IOException if an I/O error occurs while reading from this source or if {@code processor} throws an {@code IOException} @since 16.0
12 Checks that the contents of this byte source are equal to the contents of the given byte source. @throws IOException if an I/O error occurs while reading from this source or {@code other}
13 Writes the given character sequence to this sink. @throws IOException if an I/O error while writing to this sink
14 Writes all the text from the given {@link Readable} (such as a {@link Reader}) to this sink. Does not close {@code readable} if it is {@code Closeable}. @return the number of characters written @throws IOException if an I/O error occurs while reading from {@code readable} or writing to this sink
15 Returns the length of this source in chars, even if doing so requires opening and traversing an entire stream. To avoid a potentially expensive operation, see {@link #lengthIfKnown}. <p>The default implementation calls {@link #lengthIfKnown} and returns the value if present. If absent, it will fall back to a heavyweight operation that will open a stream, {@link Reader#skip(long) skip} to the end of the stream, and return the total number of chars that were skipped. <p>Note that for sources that implement {@link #lengthIfKnown} to provide a more efficient implementation, it is <i>possible</i> that this method will return a different number of chars than would be returned by reading all of the chars. <p>In either case, for mutable sources such as files, a subsequent read may return a different number of chars if the contents are changed. @throws IOException if an I/O error occurs while reading the length of this source @since 19.0
16 Appends the contents of this source to the given {@link Appendable} (such as a {@link Writer}). Does not close {@code appendable} if it is {@code Closeable}. @return the number of characters copied @throws IOException if an I/O error occurs while reading from this source or writing to {@code appendable}
17 Copies the contents of this source to the given sink. @return the number of characters copied @throws IOException if an I/O error occurs while reading from this source or writing to {@code sink}
18 Reads the first line of this source as a string. Returns {@code null} if this source is empty. <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code \n}. If the source's content does not end in a line termination sequence, it is treated as if it does. @throws IOException if an I/O error occurs while reading from this source
19 Reads lines of text from this source, processing each line as it is read using the given {@link LineProcessor processor}. Stops when all lines have been processed or the processor returns {@code false} and returns the result produced by the processor. <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code \n}. If the source's content does not end in a line termination sequence, it is treated as if it does. @throws IOException if an I/O error occurs while reading from this source or if {@code processor} throws an {@code IOException} @since 16.0
20 Returns whether the source has zero chars. The default implementation first checks {@link #lengthIfKnown}, returning true if it's known to be zero and false if it's known to be non-zero. If the length is not known, it falls back to opening a stream and checking for EOF. <p>Note that, in cases where {@code lengthIfKnown} returns zero, it is <i>possible</i> that chars are actually available for reading. This means that a source may return {@code true} from {@code isEmpty()} despite having readable content. @throws IOException if an I/O error occurs @since 15.0
21 Expands the table if possible.
22 Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a key that doesn't satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 11.0
23 Returns a multimap containing the mappings in {@code unfiltered} whose values satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a value that doesn't satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose value satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 14.0
24 Returns a multimap containing the mappings in {@code unfiltered} that satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a key/value pair that doesn't satisfy the predicate, multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. @since 11.0
25 Overridden column iterator to return columns values in globally sorted order.
26 Returns an immutable bimap containing the given entries. The returned bimap iterates over entries in the same order as the original iterable. @throws IllegalArgumentException if two keys have the same value or two values have the same key @throws NullPointerException if any key, value, or entry is null @since 19.0
27 Returns an immutable map containing the specified entries. The returned map iterates over entries in the same order as the original iterable. @throws NullPointerException if any key, value, or entry is null @throws IllegalArgumentException if two entries have the same key @since 19.0
28 Copies an iterable's elements into an array. @param iterable the iterable to copy @param type the type of the elements @return a newly-allocated array into which all the elements of the iterable have been copied
29 Returns an immutable sorted set containing the given elements sorted by the given {@code Comparator}. When multiple elements are equivalent according to {@code compare()}, only the first one specified is included. This method iterates over {@code elements} at most once. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if {@code comparator} or any of {@code elements} is null
30 Binary searches the list for the specified key, using the specified key function. <p>Equivalent to {@link #binarySearch(List, Object, Comparator, KeyPresentBehavior, KeyAbsentBehavior)} using {@link Lists#transform(List, Function) Lists.transform(list, keyFunction)}.
31 {@inheritDoc} <p>Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a {@link List}, instead of the {@link java.util.Collection} specified in the {@link Multimap} interface.
32 Returns a view of a navigable map where each value is transformed by a function. All other properties of the map, such as iteration order, are left intact. For example, the code: {@snippet : NavigableMap<String, Integer> map = Maps.newTreeMap(); map.put("a", 4); map.put("b", 9); Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in); NavigableMap<String, Double> transformed = Maps.transformNavigableValues(map, sqrt); System.out.println(transformed); } ... prints {@code {a=2.0, b=3.0}}. <p>Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. <p>It's acceptable for the underlying map to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed map might contain null values, if the function sometimes gives a null result. <p>The returned map is not thread-safe or serializable, even if the underlying map is. <p>The function is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the function will be applied many times for bulk operations like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing. @since 13.0
33 Remove a row key / column key / value mapping, if present.
34 Returns a synchronized (thread-safe) {@code ListMultimap} backed by the specified multimap. <p>You must follow the warnings described in {@link #synchronizedMultimap}. @param multimap the multimap to be wrapped @return a synchronized view of the specified multimap
35 Returns a synchronized (thread-safe) {@code SetMultimap} backed by the specified multimap. <p>You must follow the warnings described in {@link #synchronizedMultimap}. <p>The returned multimap will be serializable if the specified multimap is serializable. @param multimap the multimap to be wrapped @return a synchronized view of the specified multimap
36 Reads all characters from a {@link Readable} object into a {@link String}. Does not close the {@code Readable}. @param r the object to read from @return a string containing all the characters @throws IOException if an I/O error occurs
37 Returns a {@code Future} whose result is taken from this {@code Future} or, if this {@code Future} fails with the given {@code exceptionType}, from the result provided by the {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so if the primary input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an exception is thrown, this exception is used as the result of the output {@code Future}. <p>Usage example: {@snippet : // Falling back to a zero counter in case an exception happens when processing the RPC to fetch // counters. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catching(FetchException.class, x -> 0, directExecutor()); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link #addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. <p>This method is similar to {@link java.util.concurrent.CompletableFuture#exceptionally}. It can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #transform}. @param exceptionType the exception type that triggers use of {@code fallback}. The exception type is matched against the input's exception. "The input's exception" means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a different kind of exception, that exception itself. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding {@code Throwable.class} in particular. @param fallback the {@link Function} to be called if the input fails with the expected exception type. The function's argument is the input's exception. "The input's exception" means the cause of the {@link ExecutionException} thrown by {@code this.get()} or, if {@code get()} throws a different kind of exception, that exception itself. @param executor the executor that runs {@code fallback} if the input fails
38 Returns a new {@code Future} whose result is derived from the result of this {@code Future}. If this input {@code Future} fails, the returned {@code Future} fails with the same exception (and the function is not invoked). Example usage: {@snippet : ListenableFuture<List<Row>> rowsFuture = queryFuture.transform(QueryResult::getRows, executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link #addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel the input, and if the input is cancelled, the returned {@code Future} will receive a callback in which it will attempt to cancel itself. <p>An example use of this method is to convert a serializable object returned from an RPC into a POJO. <p>This method is similar to {@link java.util.concurrent.CompletableFuture#thenApply} and {@link java.util.concurrent.CompletableFuture#thenApplyAsync}. It can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #catching}. @param function A Function to transform the results of this future to the results of the returned future. @param executor Executor to run the function in. @return A future that holds result of the transformation.
39 Returns a {@link GraphBuilder} for building directed graphs.
40 Returns a {@link GraphBuilder} for building undirected graphs.
41 Returns a {@link GraphBuilder} initialized with all properties queryable from {@code graph}. <p>The "queryable" properties are those that are exposed through the {@link Graph} interface, such as {@link Graph#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)}, are not set in the new builder.
42 Returns a {@link NetworkBuilder} for building directed networks.
43 Returns a {@link NetworkBuilder} for building undirected networks.
44 Returns a {@link NetworkBuilder} initialized with all properties queryable from {@code network}. <p>The "queryable" properties are those that are exposed through the {@link Network} interface, such as {@link Network#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)}, are not set in the new builder.
45 Returns a {@link ValueGraphBuilder} for building directed graphs.
46 Returns a {@link ValueGraphBuilder} for building undirected graphs.
47 Returns a {@link ValueGraphBuilder} initialized with all properties queryable from {@code graph}. <p>The "queryable" properties are those that are exposed through the {@link ValueGraph} interface, such as {@link ValueGraph#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)}, are not set in the new builder.
48 Registers a {@link Listener} to be {@linkplain Executor#execute executed} on the given executor. The listener will not have previous state changes replayed, so it is suggested that listeners are added before any of the managed services are {@linkplain Service#startAsync started}. <p>{@code addListener} guarantees execution ordering across calls to a given listener but not across calls to multiple listeners. Specifically, a given listener will have its callbacks invoked in the same order as the underlying service enters those states. Additionally, at most one of the listener's callbacks will execute at once. However, multiple listeners' callbacks may execute concurrently, and listeners may execute in an order different from the one in which they were registered. <p>RuntimeExceptions thrown by a listener will be caught and logged. Any exception thrown during {@code Executor.execute} (e.g., a {@code RejectedExecutionException}) will be caught and logged. <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener} documentation. @param listener the listener to run when the manager changes state @param executor the executor in which the listeners callback methods will be run.
49 Creates an empty {@code CompactLinkedHashSet} instance.
50 Creates a <i>mutable</i> {@code CompactHashSet} instance containing the elements of the given collection in unspecified order. @param collection the elements that the set should contain @return a new {@code CompactHashSet} containing those elements (minus duplicates)
51 Creates a {@code CompactLinkedHashSet} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures. @param expectedSize the number of elements you expect to add to the returned set @return a new, empty {@code CompactLinkedHashSet} with enough capacity to hold {@code expectedSize} elements without resizing @throws IllegalArgumentException if {@code expectedSize} is negative
52 Creates a new {@code SortedSetMultimap} that uses the provided map and factory. It can generate a multimap based on arbitrary {@link Map} and {@link SortedSet} classes. <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code toString} methods for the multimap and its returned views. However, the multimap's {@code get} method returns instances of a different class than {@code factory.get()} does. <p>The multimap is serializable if {@code map}, {@code factory}, the sets generated by {@code factory}, and the multimap contents are all serializable. <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if {@code map} and the instances generated by {@code factory} are. Concurrent read operations will work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link #synchronizedSortedSetMultimap}. <p>Call this method only when the simpler methods {@link TreeMultimap#create()} and {@link TreeMultimap#create(Comparator, Comparator)} won't suffice. <p>Note: the multimap assumes complete ownership over of {@code map} and the sets returned by {@code factory}. Those objects should not be manually updated and they should not use soft, weak, or phantom references. @param map place to store the mapping from each key to its corresponding values @param factory supplier of new, empty sorted sets that will each hold all values for a given key @throws IllegalArgumentException if {@code map} is not empty
53 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableMultiset}. Elements iterate in order by the <i>first</i> appearance of that element in encounter order. @since 21.0
54 Returns a {@code Collector} that accumulates elements into an {@code ImmutableMultiset} whose elements are the result of applying {@code elementFunction} to the inputs, with counts equal to the result of applying {@code countFunction} to the inputs. <p>If the mapped elements contain duplicates (according to {@link Object#equals}), the first occurrence in encounter order appears in the resulting multiset, with count equal to the sum of the outputs of {@code countFunction.applyAsInt(t)} for each {@code t} mapped to that element. @since 22.0
55 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
56 Returns a string containing the string representation of each of {@code parts}, using the previously configured separator between each.
57 Returns a {@link String} containing all of the elements of this fluent iterable joined with {@code joiner}. <p><b>{@code Stream} equivalent:</b> {@code joiner.join(stream.iterator())}, or, if you are not using any optional {@code Joiner} features, {@code stream.collect(Collectors.joining(delimiter)}. @since 18.0
58 Returns the lexically cleaned form of the path name, <i>usually</i> (but not always) equivalent to the original. The following heuristics are used: <ul> <li>empty string becomes . <li>. stays as . <li>fold out ./ <li>fold out ../ when possible <li>collapse multiple slashes <li>delete trailing slashes (unless the path is just "/") </ul> <p>These heuristics do not always match the behavior of the filesystem. In particular, consider the path {@code a/../b}, which {@code simplifyPath} will change to {@code b}. If {@code a} is a symlink to {@code x}, {@code a/../b} may refer to a sibling of {@code x}, rather than the sibling of {@code a} referred to by {@code b}. @since 11.0
59 Parses a trie node and returns the number of characters consumed. @param stack The prefixes that precede the characters represented by this node. Each entry of the stack is in reverse order. @param encoded The serialized trie. @param start An index in the encoded serialized trie to begin reading characters from. @param builder A map builder to which all entries will be added. @return The number of characters consumed from {@code encoded}.
60 Builds a thread-safe map. This method does not alter the state of this {@code MapMaker} instance, so it can be invoked again to create multiple independent maps. <p>The bulk operations {@code putAll}, {@code equals}, and {@code clear} are not guaranteed to be performed atomically on the returned map. Additionally, {@code size} and {@code containsValue} are implemented as bulk read operations, and thus may fail to observe concurrent writes. @return a serializable concurrent map having the requested features
61 Applies {@code function} to each element of this fluent iterable and returns a fluent iterable with the concatenated combination of results. {@code function} returns an Iterable of results. <p>The returned fluent iterable's iterator supports {@code remove()} if this function-returned iterables' iterator does. After a successful {@code remove()} call, the returned fluent iterable no longer contains the corresponding element. <p><b>{@code Stream} equivalent:</b> {@link Stream#flatMap} (using a function that produces streams, not iterables). @since 13.0 (required {@code Function<E, Iterable<T>>} until 14.0)
62 Combines multiple iterables into a single iterable. The returned iterable has an iterator that traverses the elements of each iterable in {@code inputs}. The input iterators are not polled until necessary. <p>The returned iterable's iterator supports {@code remove()} when the corresponding input iterator supports it. <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code Streams.concat(...)}. @throws NullPointerException if any of the provided iterables is null
63 {@inheritDoc} <p>The default {@link AbstractFuture} implementation throws {@code InterruptedException} if the current thread is interrupted during the call, even if the value is already available. @throws CancellationException {@inheritDoc}
64 Adds {@code node} to the graph and returns the associated {@link GraphConnections}. @throws IllegalStateException if {@code node} is already present
65 Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the lock, but does not wait for the guard to be satisfied. @return whether the monitor was entered, which guarantees that the guard is now satisfied @since 28.0 (but only since 33.4.0 in the Android flavor)
66 Enum values can override for performance reasons.
67 Enum values can override for performance reasons.
68 Enum values can override for performance reasons.
69 Converts the specified {@code String str} from this format to the specified {@code format}. A "best effort" approach is taken; if {@code str} does not conform to the assumed format, then the behavior of this method is undefined but we make a reasonable effort at converting anyway.
70 Returns {@code true} if a character sequence contains no matching BMP characters. Equivalent to {@code !matchesAnyOf(sequence)}. <p>The default implementation iterates over the sequence, invoking {@link #matches} for each character, until this returns {@code true} or the end is reached. @param sequence the character sequence to examine, possibly empty @return {@code true} if this matcher matches no characters in the sequence, including when the sequence is empty
71 Returns a string containing all non-matching characters of a character sequence, in order. For example: {@snippet : CharMatcher.is('a').removeFrom("bazaar") } ... returns {@code "bzr"}.
72 Returns a string copy of the input character sequence, with each matching BMP character replaced by a given replacement character. For example: {@snippet : CharMatcher.is('a').replaceFrom("radar", 'o') } ... returns {@code "rodor"}. <p>The default implementation uses {@link #indexIn(CharSequence)} to find the first matching character, then iterates the remainder of the sequence calling {@link #matches(char)} for each character. @param sequence the character sequence to replace matching characters in @param replacement the character to append to the result string in place of each matching character in {@code sequence} @return the new string
73 Examines the Inet6Address to extract the embedded IPv4 client address if the InetAddress is an IPv6 address of one of the specified address types that contain an embedded IPv4 address. <p>NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial spoofability. With other transition addresses spoofing involves (at least) infection of one's BGP routing table. @param ip {@link Inet6Address} to be examined for embedded IPv4 client address @return {@link Inet4Address} of embedded IPv4 client address @throws IllegalArgumentException if the argument does not have a valid embedded IPv4 address
74 Reads the specified bytes of data from the underlying input stream and updates the hasher with the bytes read.
75 Attempts to read enough bytes from the stream to fill the given byte array, with the same behavior as {@link DataInput#readFully(byte[])}. Does not close the stream. @param in the input stream to read from. @param b the buffer into which the data is read. @throws EOFException if this stream reaches the end before reading all the bytes. @throws IOException if an I/O error occurs.
76 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Booleans.asList(array), distance)}, but is somewhat faster. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
77 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Bytes.asList(array), distance)}, but is somewhat faster. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
78 Sorts the elements of {@code array} in descending order. @since 23.1
79 Sorts the elements of {@code array} in descending order. @since 23.1
80 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Chars.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
81 Sorts the elements of {@code array} in descending order. <p>Note that this method uses the total order imposed by {@link Double#compare}, which treats all NaN values as equal and 0.0 as greater than -0.0. @since 23.1
82 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Bytes.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
83 Sorts the elements of {@code array} in descending order. <p>Note that this method uses the total order imposed by {@link Float#compare}, which treats all NaN values as equal and 0.0 as greater than -0.0. @since 23.1
84 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Floats.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
85 Sorts the elements of {@code array} in descending order. @since 23.1
86 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Ints.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
87 Sorts the elements of {@code array} in descending order. @since 23.1
88 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Longs.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
89 Sorts the elements of {@code array} in descending order. @since 23.1
90 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Shorts.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
91 Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries into keys and values using the specified separator. @since 10.0
92 Creates a {@code RateLimiter} with the specified stable throughput, given as "permits per second" (commonly referred to as <i>QPS</i>, queries per second), and a <i>warmup period</i>, during which the {@code RateLimiter} smoothly ramps up its rate, until it reaches its maximum rate at the end of the period (as long as there are enough requests to saturate it). Similarly, if the {@code RateLimiter} is left <i>unused</i> for a duration of {@code warmupPeriod}, it will gradually return to its "cold" state, i.e. it will go through the same warming up process as when it was first created. <p>The returned {@code RateLimiter} is intended for cases where the resource that actually fulfills the requests (e.g., a remote server) needs "warmup" time, rather than being immediately accessed at the stable (maximum) rate. <p>The returned {@code RateLimiter} starts in a "cold" state (i.e. the warmup period will follow), and if it is left unused for long enough, it will return to that state. @param permitsPerSecond the rate of the returned {@code RateLimiter}, measured in how many permits become available per second @param warmupPeriod the duration of the period where the {@code RateLimiter} ramps up its rate, before reaching its stable (maximum) rate @param unit the time unit of the warmupPeriod argument @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero or {@code warmupPeriod} is negative
93 Returns an unmodifiable view of the specified sorted multiset. Query operations on the returned multiset "read through" to the specified multiset, and attempts to modify the returned multiset result in an {@link UnsupportedOperationException}. <p>The returned multiset will be serializable if the specified multiset is serializable. @param sortedMultiset the sorted multiset for which an unmodifiable view is to be generated @return an unmodifiable view of the multiset @since 11.0
94 Returns an unmodifiable view of the specified navigable set. This method allows modules to provide users with "read-only" access to internal navigable sets. Query operations on the returned set "read through" to the specified set, and attempts to modify the returned set, whether direct or via its collection views, result in an {@code UnsupportedOperationException}. <p>The returned navigable set will be serializable if the specified navigable set is serializable. <p><b>Java 8+ users and later:</b> Prefer {@link Collections#unmodifiableNavigableSet}. @param set the navigable set for which an unmodifiable view is to be returned @return an unmodifiable view of the specified navigable set @since 12.0
95 Returns an unmodifiable view of the specified collection of entries. The {@link Entry#setValue} operation throws an {@link UnsupportedOperationException}. If the specified collection is a {@code Set}, the returned collection is also a {@code Set}. @param entries the entries for which to return an unmodifiable view @return an unmodifiable view of the entries
96 Returns an unmodifiable view of the specified {@code SortedSetMultimap}. Query operations on the returned multimap "read through" to the specified multimap, and attempts to modify the returned multimap, either directly or through the multimap's views, result in an {@code UnsupportedOperationException}. <p>The returned multimap will be serializable if the specified multimap is serializable. @param delegate the multimap for which an unmodifiable view is to be returned @return an unmodifiable view of the specified multimap
97 Starts a {@link ClosingFuture} pipeline with a {@link ListenableFuture}. <p>If {@code future} succeeds, its value will be closed (using {@code closingExecutor)}) when the pipeline is done, even if the pipeline is canceled or fails. <p>Cancelling the pipeline will not cancel {@code future}, so that the pipeline can access its value in order to close it. @param future the future to create the {@code ClosingFuture} from. For discussion of the future's result type {@code C}, see {@link DeferredCloser#eventuallyClose(Object, Executor)}. @param closingExecutor the future's result will be closed on this executor @deprecated Creating {@link Future}s of closeable types is dangerous in general because the underlying value may never be closed if the {@link Future} is canceled after its operation begins. Consider replacing code that creates {@link ListenableFuture}s of closeable types, including those that pass them to this method, with {@link #submit(ClosingCallable, Executor)} in order to ensure that resources do not leak. Or, to start a pipeline with a {@link ListenableFuture} that doesn't create values that should be closed, use {@link ClosingFuture#from}.
98 Registers separate success and failure callbacks to be run when this {@code Future}'s computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the computation is already complete, immediately. <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of callbacks, but any callback added through this method is guaranteed to be called once the computation is complete. <p>Example: {@snippet : future.addCallback( new FutureCallback<QueryResult>() { public void onSuccess(QueryResult result) { storeInCache(result); } public void onFailure(Throwable t) { reportError(t); } }, executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link #addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight callbacks passed to this method. <p>For a more general interface to attach a completion listener, see {@link #addListener}. <p>This method is similar to {@link java.util.concurrent.CompletableFuture#whenComplete} and {@link java.util.concurrent.CompletableFuture#whenCompleteAsync}. It also serves the use case of {@link java.util.concurrent.CompletableFuture#thenAccept} and {@link java.util.concurrent.CompletableFuture#thenAcceptAsync}. @param callback The callback to invoke when this {@code Future} is completed. @param executor The executor to run {@code callback} when the future completes.
99 Returns a new, empty {@code EnumBiMap} using the specified key and value types. @param keyType the key type @param valueType the value type
100 Returns a new, empty {@code EnumHashBiMap} using the specified key type. @param keyType the key type
101 Creates an empty multiset containing the given initial elements, sorted according to the elements' natural order. <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}. <p>The type specification is {@code <E extends Comparable>}, instead of the more specific {@code <E extends Comparable<? super E>>}, to support classes defined without generics.
102 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableSortedMultiset#orderedBy(Comparator)}.
103 Stores a collection of values with the same key, replacing any existing values for that key. The returned collection is immutable. <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link Multimap} interface. <p>Any duplicates in {@code values} will be stored in the multimap once.
104 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap} interface. <p>Any duplicates in {@code values} will be stored in the multimap once.
105 Creates a new {@code HashMultiset} containing the specified elements. <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}. @param elements the elements that the multiset should contain
106 Constructs an empty {@code ArrayListMultimap} with enough capacity to hold the specified numbers of keys and values without resizing. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys(expectedKeys).arrayListValues(expectedValuesPerKey).build()}, which provides more control over the underlying data structure. @param expectedKeys the expected number of distinct keys @param expectedValuesPerKey the expected average number of values per key @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is negative
107 Constructs an empty {@code HashMultimap} with enough capacity to hold the specified numbers of keys and values without rehashing. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys(expectedKeys).hashSetValues(expectedValuesPerKey).build()}, which provides more control over the underlying data structure. @param expectedKeys the expected number of distinct keys @param expectedValuesPerKey the expected average number of values per key @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is negative
108 Constructs a {@code HashMultimap} with the same mappings as the specified multimap. If a key-value mapping appears multiple times in the input multimap, it only appears once in the constructed multimap. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys().hashSetValues().build(multimap)}, which provides more control over the underlying data structure. @param multimap the multimap whose contents are copied to this multimap
109 Constructs an empty {@code LinkedListMultimap} with enough capacity to hold the specified number of keys without rehashing. @param expectedKeys the expected number of distinct keys @throws IllegalArgumentException if {@code expectedKeys} is negative
110 Creates a new {@code LinkedHashMultiset} containing the specified elements. <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}. @param elements the elements that the multiset should contain
111 Creates a new, empty {@code LinkedHashMultimap} with the default initial capacities.
112 Constructs an empty {@code LinkedHashMultimap} with enough capacity to hold the specified numbers of keys and values without rehashing. @param expectedKeys the expected number of distinct keys @param expectedValuesPerKey the expected average number of values per key @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is negative
113 Constructs a mutable graph with the properties specified in {@code builder}.
114 Constructs a mutable graph with the properties specified in {@code builder}.
115 Adds the given {@code cell} to the table, making it immutable if necessary. Duplicate key pairs are not allowed and will cause {@link #build} to fail.
116 Adds the given {@code entry} to the bimap. Duplicate keys or values are not allowed, and will cause {@link #build} to fail. @since 19.0
117 Adds all of the given entries to the built map. If the same key is put more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last value put for that key. @throws NullPointerException if any key, value, or entry is null @since 19.0
118 Adds the given {@code entry} to the map, making it immutable if necessary. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause {@link #build} to fail. @since 11.0
119 Returns a multimap view of the map. @since 14.0
120 Returns a newly-created immutable sorted map. <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method will throw an exception if there are duplicate keys. The {@code build()} method will soon be deprecated. @throws IllegalArgumentException if any two keys are equal according to the comparator (which might be the keys' natural order)
121 Copies all associations from the specified range map into this builder.
122 Add all of the specified ranges to this builder. Adjacent ranges are permitted and will be merged, but overlapping ranges will cause an exception when {@link #build()} is called. @throws IllegalArgumentException if any inserted ranges are empty @since 21.0
123 Returns a list containing the nonempty intersections of {@code range} with the ranges in this range set.
124 Returns a {@code ContiguousSet} containing the same values in the given domain {@linkplain Range#contains contained} by the range. @throws IllegalArgumentException if neither range nor the domain has a lower bound, or if neither has an upper bound @since 13.0
125 Returns the range that spans the given range and entry, if the entry can be coalesced.
126 Returns an {@link ImmutableSortedSet} containing the same values in the given domain {@linkplain RangeSet#contains contained} by this range set. <p><b>Note:</b> {@code a.asSet(d).equals(b.asSet(d))} does not imply {@code a.equals(b)}! For example, {@code a} and {@code b} could be {@code [2..4]} and {@code (1..5)}, or the empty ranges {@code [3..3)} and {@code [4..4)}. <p><b>Warning:</b> Be extremely careful what you do with the {@code asSet} view of a large range set (such as {@code ImmutableRangeSet.of(Range.greaterThan(0))}). Certain operations on such a set can be performed efficiently, but others (such as {@link Set#hashCode} or {@link Collections#frequency}) can cause major performance problems. <p>The returned set's {@link Object#toString} method returns a shorthand form of the set's contents, such as {@code "[1..100]}"}. @throws IllegalArgumentException if neither this range nor the domain has a lower bound, or if neither has an upper bound
127 Returns an immutable map instance containing the given entries. Internally, the returned map will be backed by an {@link EnumMap}. <p>The iteration order of the returned map follows the enum's iteration order, not the order in which the elements appear in the given map. @param map the map to make an immutable copy of @return an immutable map containing those entries @since 14.0
128 {@inheritDoc} <p>The value {@code Map<C, V>} instances in the returned map are {@link ImmutableMap} instances as well.
129 @since 12.0
130 Returns a newly-created {@code ImmutableList} based on the contents of the {@code Builder}.
131 Views the array as an immutable list. Does not check for nulls; does not copy. <p>The array must be internally created.
132 Returns a newly-created {@code ImmutableSortedSet} based on the contents of the {@code Builder} and its comparator.
133 Creates an {@code ImmutableMap} backed by a JDK HashMap. Used when probable hash flooding is detected. This implementation may replace the entries in entryArray with its own entry objects (though they will have the same key/value contents), and will take ownership of entryArray.
134 Returns the index of the leftmost part of the suffix, or -1 if not found. Note that the value defined as a suffix may not produce {@code true} results from {@link #isPublicSuffix()} or {@link #isRegistrySuffix()} if the domain ends with an excluded domain pattern such as {@code "nhs.uk"}. <p>If a {@code desiredType} is specified, this method only finds suffixes of the given type. Otherwise, it finds the first suffix of any type.
135 Returns an immutable set instance containing the given enum elements. Internally, the returned set will be backed by an {@link EnumSet}. <p>The iteration order of the returned set follows the enum's iteration order, not the order in which the elements appear in the given collection. @param elements the elements, all of the same {@code enum} type, that the set should contain @return an immutable set containing those elements, minus duplicates
136 Scope the return type to {@link UnmodifiableIterator} to ensure this is an unmodifiable view. @since 20.0 (present with return type {@link Iterator} since 2.0)
137 Posts an event to all registered subscribers. This method will return successfully after the event has been posted to all subscribers, and regardless of any exceptions thrown by subscribers. <p>If no subscribers have been subscribed for {@code event}'s class, and {@code event} is not already a {@link DeadEvent}, it will be wrapped in a DeadEvent and reposted. @param event event to post.
138 Tries to move {@code toTrickle} from a min to a max level and bubble up there. If it moved before {@code removeIndex} this method returns a pair as described in {@link #removeAt}.
139 Returns the comparator that orders the rows. With natural ordering, {@link Ordering#natural()} is returned. @deprecated Use {@code table.rowKeySet().comparator()} instead.
140 Returns a synchronized (thread-safe) navigable set backed by the specified navigable set. In order to guarantee serial access, it is critical that <b>all</b> access to the backing navigable set is accomplished through the returned navigable set (or its views). <p>It is imperative that the user manually synchronize on the returned sorted set when iterating over it or any of its {@code descendingSet}, {@code subSet}, {@code headSet}, or {@code tailSet} views. {@snippet : NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>()); ... synchronized (set) { // Must be in the synchronized block Iterator<E> it = set.iterator(); while (it.hasNext()) { foo(it.next()); } } } <p>or: {@snippet : NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>()); NavigableSet<E> set2 = set.descendingSet().headSet(foo); ... synchronized (set) { // Note: set, not set2!!! // Must be in the synchronized block Iterator<E> it = set2.descendingIterator(); while (it.hasNext()) { foo(it.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>The returned navigable set will be serializable if the specified navigable set is serializable. <p><b>Java 8+ users and later:</b> Prefer {@link Collections#synchronizedNavigableSet}. @param navigableSet the navigable set to be "wrapped" in a synchronized navigable set. @return a synchronized view of the specified navigable set. @since 13.0
141 Creates a {@link BloomFilter} with the expected number of insertions and expected false positive probability. <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified, will result in its saturation, and a sharp deterioration of its false positive probability. <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>} is. <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since {@link #equals} also relies on object identity of funnels. @param funnel the funnel of T's that the constructed {@code BloomFilter} will use @param expectedInsertions the number of expected insertions to the constructed {@code BloomFilter}; must be positive @param fpp the desired false positive probability (must be positive and less than 1.0) @return a {@code BloomFilter}
142 Creates a {@link BloomFilter} with the expected number of insertions and a default expected false positive probability of 3%. <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified, will result in its saturation, and a sharp deterioration of its false positive probability. <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>} is. <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since {@link #equals} also relies on object identity of funnels. @param funnel the funnel of T's that the constructed {@code BloomFilter} will use @param expectedInsertions the number of expected insertions to the constructed {@code BloomFilter}; must be positive @return a {@code BloomFilter} @since 19.0
143 Returns an estimate for the total number of distinct elements that have been added to this Bloom filter. This approximation is reasonably accurate if it does not exceed the value of {@code expectedInsertions} that was used when constructing the filter. @since 22.0
144 Returns a {@code Collector} that returns the {@code k} smallest (relative to the specified {@code Comparator}) input elements, in ascending order, as an unmodifiable {@code List}. Ties are broken arbitrarily. <p>For example: {@snippet : Stream.of("foo", "quux", "banana", "elephant") .collect(least(2, comparingInt(String::length))) // returns {"foo", "quux"} } <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log k)), as opposed to e.g. {@code Stream.sorted(comparator).limit(k)}, which currently takes O(n log n) time and O(n) space. @throws IllegalArgumentException if {@code k < 0} @since 22.0
145 Returns the {@code k} least elements from the given iterator according to this ordering, in order from least to greatest. If there are fewer than {@code k} elements present, all will be included. <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple elements are equivalent, it is undefined which will come first. <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).collect(Comparators.least(k, thisComparator))} instead. @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending order @throws IllegalArgumentException if {@code k} is negative @since 14.0
146 Adds each member of {@code elements} as a candidate for the top {@code k} elements. This operation takes amortized linear time in the length of {@code elements}. <p>If all input data to this {@code TopKSelector} is in a single {@code Iterable}, prefer {@link Ordering#leastOf(Iterable, int)}, which provides a simpler API for that use case.
147 Returns a string representation of the {@code UnsignedLong} value, in base 10.
148 CycleDetectingLock implementations must call this method before attempting to acquire the lock.
149 Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function to its value. The function can use a {@link DeferredCloser} to capture objects to be closed when the pipeline is done. <p>If this {@code ClosingFuture} fails, the function will not be called, and the derived {@code ClosingFuture} will be equivalent to this one. <p>If the function throws an exception, that exception is used as the result of the derived {@code ClosingFuture}. <p>Example usage: {@snippet : ClosingFuture<List<Row>> rowsFuture = queryFuture.transform((closer, result) -> result.getRows(), executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. <p>After calling this method, you may not call {@link #finishToFuture()}, {@link #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on the original {@code ClosingFuture} instance. @param function transforms the value of this step to the value of the derived step @param executor executor to run the function in @return the derived step @throws IllegalStateException if a {@code ClosingFuture} has already been derived from this one, or if this {@code ClosingFuture} has already been {@linkplain #finishToFuture() finished}
150 Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function that returns a {@code ClosingFuture} to its value. The function can use a {@link DeferredCloser} to capture objects to be closed when the pipeline is done (other than those captured by the returned {@link ClosingFuture}). <p>If this {@code ClosingFuture} succeeds, the derived one will be equivalent to the one returned by the function. <p>If this {@code ClosingFuture} fails, the function will not be called, and the derived {@code ClosingFuture} will be equivalent to this one. <p>If the function throws an exception, that exception is used as the result of the derived {@code ClosingFuture}. But if the exception is thrown after the function creates a {@code ClosingFuture}, then none of the closeable objects in that {@code ClosingFuture} will be closed. <p>Usage guidelines for this method: <ul> <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a {@code ClosingFuture}. If possible, prefer calling {@link #transform(ClosingFunction, Executor)} instead, with a function that returns the next value directly. <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()} for every closeable object this step creates in order to capture it for later closing. <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code ClosingFuture} call {@link #from(ListenableFuture)}. <li>In case this step doesn't create new closeables, you can adapt an API that returns a {@link ListenableFuture} to return a {@code ClosingFuture} by wrapping it with a call to {@link #withoutCloser(AsyncFunction)} </ul> <p>Example usage: {@snippet : // Result.getRowsClosingFuture() returns a ClosingFuture. ClosingFuture<List<Row>> rowsFuture = queryFuture.transformAsync((closer, result) -> result.getRowsClosingFuture(), executor); // Result.writeRowsToOutputStreamFuture() returns a ListenableFuture that resolves to the // number of written rows. openOutputFile() returns a FileOutputStream (which implements // Closeable). ClosingFuture<Integer> rowsFuture2 = queryFuture.transformAsync( (closer, result) -> { FileOutputStream fos = closer.eventuallyClose(openOutputFile(), closingExecutor); return ClosingFuture.from(result.writeRowsToOutputStreamFuture(fos)); }, executor); // Result.getRowsFuture() returns a ListenableFuture (no new closeables are created). ClosingFuture<List<Row>> rowsFuture3 = queryFuture.transformAsync(withoutCloser(Result::getRowsFuture), executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. (Specifically, {@code directExecutor} functions should avoid heavyweight operations inside {@code AsyncClosingFunction.apply}. Any heavyweight operations should occur in other threads responsible for completing the returned {@code ClosingFuture}.) <p>After calling this method, you may not call {@link #finishToFuture()}, {@link #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on the original {@code ClosingFuture} instance. @param function transforms the value of this step to a {@code ClosingFuture} with the value of the derived step @param executor executor to run the function in @return the derived step @throws IllegalStateException if a {@code ClosingFuture} has already been derived from this one, or if this {@code ClosingFuture} has already been {@linkplain #finishToFuture() finished}
151 Returns the result of {@link Future#get()}, converting most exceptions to a new instance of the given checked exception type. This reduces boilerplate for a common use of {@code Future} in which it is unnecessary to programmatically distinguish between exception types or to extract other information from the exception instance. <p>Exceptions from {@code Future.get} are treated as follows: <ul> <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}. <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the interrupt). <li>Any {@link CancellationException} is propagated untouched, as is any other {@link RuntimeException} (though {@code get} implementations are discouraged from throwing such exceptions). </ul> <p>The overall principle is to continue to treat every checked exception as a checked exception, every unchecked exception as an unchecked exception, and every error as an error. In addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the new stack trace matches that of the current thread. <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor that accepts zero or more arguments, all of type {@code String} or {@code Throwable} (preferring constructors with at least one {@code String}, then preferring constructors with at least one {@code Throwable}) and calling the constructor via reflection. If the exception did not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code IllegalArgumentException} is thrown. @throws X if {@code get} throws any checked exception except for an {@code ExecutionException} whose cause is not itself a checked exception @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a {@code RuntimeException} as its cause @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code Error} as its cause @throws CancellationException if {@code get} throws a {@code CancellationException} @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or does not have a suitable constructor @since 19.0 (in 10.0 as {@code get})
152 Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new instance of the given checked exception type. This reduces boilerplate for a common use of {@code Future} in which it is unnecessary to programmatically distinguish between exception types or to extract other information from the exception instance. <p>Exceptions from {@code Future.get} are treated as follows: <ul> <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}. <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the interrupt). <li>Any {@link TimeoutException} is wrapped in an {@code X}. <li>Any {@link CancellationException} is propagated untouched, as is any other {@link RuntimeException} (though {@code get} implementations are discouraged from throwing such exceptions). </ul> <p>The overall principle is to continue to treat every checked exception as a checked exception, every unchecked exception as an unchecked exception, and every error as an error. In addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the new stack trace matches that of the current thread. <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor that accepts zero or more arguments, all of type {@code String} or {@code Throwable} (preferring constructors with at least one {@code String}, then preferring constructors with at least one {@code Throwable}) and calling the constructor via reflection. If the exception did not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code IllegalArgumentException} is thrown. @throws X if {@code get} throws any checked exception except for an {@code ExecutionException} whose cause is not itself a checked exception @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a {@code RuntimeException} as its cause @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code Error} as its cause @throws CancellationException if {@code get} throws a {@code CancellationException} @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or does not have a suitable constructor @since 28.0 (but only since 33.4.0 in the Android flavor)
153 Atomically reschedules this task and assigns the new future to {@link #cancellationDelegate}.
154 Implementing classes should invoke this method once their service has started. It will cause the service to transition from {@link State#STARTING} to {@link State#RUNNING}. @throws IllegalStateException if the service is not {@link State#STARTING}.
155 Initiates service {@linkplain Service#startAsync startup} on all the services being managed. It is only valid to call this method if all of the services are {@linkplain State#NEW new}. @return this @throws IllegalStateException if any of the Services are not {@link State#NEW new} when the method is called.
156 Enters this monitor when the guard is satisfied. Blocks at most the given time, including both the time to acquire the lock and the time to wait for the guard to be satisfied, and may be interrupted. @return whether the monitor was entered, which guarantees that the guard is now satisfied @throws InterruptedException if interrupted while waiting @since 28.0 (but only since 33.4.0 in the Android flavor)
157 Enters this monitor when the guard is satisfied. Blocks at most the given time, including both the time to acquire the lock and the time to wait for the guard to be satisfied. @return whether the monitor was entered, which guarantees that the guard is now satisfied @since 28.0 (but only since 33.4.0 in the Android flavor)
158 Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May be called only by a thread currently occupying this monitor. @return whether the guard is now satisfied @throws InterruptedException if interrupted while waiting @since 28.0 (but only since 33.4.0 in the Android flavor)
159 Waits for the guard to be satisfied. Waits at most the given time. May be called only by a thread currently occupying this monitor. @return whether the guard is now satisfied @since 28.0 (but only since 33.4.0 in the Android flavor)
160 Returns a future that delegates to this future but will finish early (via a {@link TimeoutException} wrapped in an {@link ExecutionException}) if the specified timeout expires. If the timeout expires, not only will the output future finish, but also the input future ({@code this}) will be cancelled and interrupted. @param timeout when to time out the future @param scheduledExecutor The executor service to enforce the timeout. @since 28.0 (but only since 33.4.0 in the Android flavor)
