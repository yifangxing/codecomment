1 Returns an {@code Optional} instance containing the given non-null reference. To have {@code null} treated as {@link #absent}, use {@link #fromNullable} instead. <p><b>Comparison to {@code java.util.Optional}:</b> no differences. @throws NullPointerException if {@code reference} is null
2 Creates (but does not start) a new stopwatch, using the specified time source. @since 15.0
3 Returns the index in {@code iterable} of the first element that satisfies the provided {@code predicate}, or {@code -1} if the Iterable has no such elements. <p>More formally, returns the lowest index {@code i} such that {@code predicate.apply(Iterables.get(iterable, i))} returns {@code true}, or {@code -1} if there is no such index. @since 2.0
4 Returns {@code true} if one or more elements returned by {@code iterator} satisfy the given predicate.
5 Uses a naturally-ordered {@link TreeSet} to store value collections.
6 Returns a {@code Collector} that accumulates elements into an {@code ImmutableTable}. Each input element is mapped to one cell in the returned table, with the rows, columns, and values generated by applying the specified functions. If multiple inputs are mapped to the same row and column pair, they will be combined with the specified merging function in encounter order. <p>The returned {@code Collector} will throw a {@code NullPointerException} at collection time if the row, column, value, or merging functions return null on any input. @since 21.0
7 Returns a predicate that evaluates to true if and only if the input is equivalent to {@code target} according to this equivalence relation. @since 10.0
8 Returns a function which performs a map lookup with a default value. The function created by this method returns {@code defaultValue} for all inputs that do not belong to the map's key set. See also {@link #forMap(Map)}, which throws an exception in this case. <p>Prefer to write the lambda expression {@code k -> map.getOrDefault(k, defaultValue)} instead. Note that it is not serializable unless you explicitly make it {@link Serializable}, typically by writing {@code (Function<K, V> & Serializable) k -> map.getOrDefault(k, defaultValue)}. @param map source map that determines the function behavior @param defaultValue the value to return for inputs that aren't map keys @return function that returns {@code map.get(a)} when {@code a} is a key, or {@code defaultValue} otherwise
9 Returns the composition of two functions. For {@code f: A->B} and {@code g: B->C}, composition is defined as the function h such that {@code h(a) == g(f(a))} for each {@code a}. <p><b>JRE users and Android users who opt in to library desugaring:</b> use {@code g.compose(f)} or (probably clearer) {@code f.andThen(g)} instead. Note that it is not serializable. @param g the second function to apply @param f the first function to apply @return the composition of {@code f} and {@code g} @see <a href="//en.wikipedia.org/wiki/Function_composition">function composition</a>
10 Returns a function which performs a map lookup. The returned function throws an {@link IllegalArgumentException} if given a key that does not exist in the map. See also {@link #forMap(Map, Object)}, which returns a default value in this case. <p>Note: if {@code map} is a {@link com.google.common.collect.BiMap BiMap} (or can be one), you can use {@link com.google.common.collect.Maps#asConverter Maps.asConverter} instead to get a function that also supports reverse conversion. <p>If you are okay with {@code null} being returned for an unrecognized key (instead of an exception being thrown), you can use the method reference {@code map::get} instead. Note that it is not serializable unless you explicitly make it {@link Serializable}, typically by writing {@code (Function<K, V> & Serializable) map::get}.
11 Returns a splitter that considers any subsequence matching {@code pattern} to be a separator. For example, {@code Splitter.on(Pattern.compile("\r?\n")).split(entireFile)} splits a string into lines whether it uses DOS-style or UNIX-style line terminators. @param separatorPattern the pattern that determines whether a subsequence is a separator. This pattern may not match the empty string. @return a splitter, with default settings, that uses this pattern @throws IllegalArgumentException if {@code separatorPattern} matches the empty string
12 Returns a joiner which automatically places {@code separator} between consecutive elements.
13 Returns a joiner which automatically places {@code separator} between consecutive elements.
14 Returns a map joiner with the same behavior as this one, except automatically substituting {@code nullText} for any provided null keys or values.
15 Returns a splitter that considers any subsequence matching a given pattern (regular expression) to be a separator. For example, {@code Splitter.onPattern("\r?\n").split(entireFile)} splits a string into lines whether it uses DOS-style or UNIX-style line terminators. This is equivalent to {@code Splitter.on(Pattern.compile(pattern))}. @param separatorPattern the pattern that determines whether a subsequence is a separator. This pattern may not match the empty string. @return a splitter, with default settings, that uses this pattern @throws IllegalArgumentException if {@code separatorPattern} matches the empty string or is a malformed expression
16 Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested contains any match for the given regular expression pattern. The test used is equivalent to {@code pattern.matcher(arg).find()} @since 3.0
17 Returns a predicate that evaluates to {@code true} if the given predicate evaluates to {@code false}. <p><b>Discouraged:</b> Prefer using {@code predicate.negate()}.
18 Returns a predicate that evaluates to {@code true} if each of its components evaluates to {@code true}. The components are evaluated in order, and evaluation will be "short-circuited" as soon as a false predicate is found. It defensively copies the iterable passed in, so future changes to it won't alter the behavior of this predicate. If {@code components} is empty, the returned predicate will always evaluate to {@code true}. <p><b>Discouraged:</b> Prefer using {@code first.and(second).and(third).and(...)}.
19 Returns a predicate that evaluates to {@code true} if any one of its components evaluates to {@code true}. The components are evaluated in order, and evaluation will be "short-circuited" as soon as a true predicate is found. It defensively copies the iterable passed in, so future changes to it won't alter the behavior of this predicate. If {@code components} is empty, the returned predicate will always evaluate to {@code false}. <p><b>Discouraged:</b> Prefer using {@code first.or(second).or(third).or(...)}.
20 Splits {@code sequence} into substrings, splits each substring into an entry, and returns an unmodifiable map with each of the entries. For example, {@code Splitter.on(';').trimResults().withKeyValueSeparator("=>").split("a=>b ; c=>b")} will return a mapping from {@code "a"} to {@code "b"} and {@code "c"} to {@code "b"}. <p>The returned map preserves the order of the entries from {@code sequence}. @throws IllegalArgumentException if the specified sequence does not split into valid map entries, or if there are duplicate keys
21 Splits {@code sequence} into string components and makes them available through an {@link Stream}, which may be lazily evaluated. If you want an eagerly computed {@link List}, use {@link #splitToList(CharSequence)}. @param sequence the sequence of characters to split @return a stream over the segments split from the parameter @since 28.2 (but only since 33.4.0 in the Android flavor)
22 Returns a supplier which caches the instance retrieved during the first call to {@code get()} and returns that value on subsequent calls to {@code get()}. See: <a href="http://en.wikipedia.org/wiki/Memoization">memoization</a> <p>The returned supplier is thread-safe. The delegate's {@code get()} method will be invoked at most once unless the underlying {@code get()} throws an exception. The supplier's serialized form does not contain the cached value, which will be recalculated when {@code get()} is called on the deserialized instance. <p>When the underlying delegate throws an exception then this memoizing supplier will keep delegating calls until it returns valid data. <p>If {@code delegate} is an instance created by an earlier call to {@code memoize}, it is returned directly.
23 Returns a new supplier which is the composition of the provided function and supplier. In other words, the new supplier's value will be computed by retrieving the value from {@code supplier}, and then applying {@code function} to that value. Note that the resulting supplier will not call {@code supplier} or invoke {@code function} until it is called.
24 Returns a supplier whose {@code get()} method synchronizes on {@code delegate} before calling it, making it thread-safe.
25 Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@code declaredType}. Example usage: <pre> try { someMethodThatCouldThrowAnything(); } catch (IKnowWhatToDoWithThisException e) { handle(e); } catch (Throwable t) { Throwables.propagateIfInstanceOf(t, IOException.class); Throwables.propagateIfInstanceOf(t, SQLException.class); throw Throwables.propagate(t); } </pre> @deprecated Use {@link #throwIfInstanceOf}, which has the same behavior but rejects {@code null}.
26 Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link RuntimeException} or {@link Error}. @deprecated Use {@link #throwIfUnchecked}, which has the same behavior but rejects {@code null}.
27 Propagates {@code throwable} as-is if it is an instance of {@link RuntimeException} or {@link Error}, or else as a last resort, wraps it in a {@code RuntimeException} and then propagates. <p>This method always throws an exception. The {@code RuntimeException} return type allows client code to signal to the compiler that statements after the call are unreachable. Example usage: <pre> T doSomething() { try { return someMethodThatCouldThrowAnything(); } catch (IKnowWhatToDoWithThisException e) { return handle(e); } catch (Throwable t) { throw Throwables.propagate(t); } } </pre> @param throwable the Throwable to propagate @return nothing will ever be returned; this return type is only for your convenience, as illustrated in the example above @deprecated To preserve behavior, use {@code throw e} or {@code throw new RuntimeException(e)} directly, or use a combination of {@link #throwIfUnchecked} and {@code throw new RuntimeException(e)}. But consider whether users would be better off if your API threw a different type of exception. For background on the deprecation, read <a href="https://github.com/google/guava/wiki/Why-we-deprecated-Throwables.propagate">Why we deprecated {@code Throwables.propagate}</a>.
28 Returns the stack trace of {@code throwable}, possibly providing slower iteration over the full trace but faster iteration over parts of the trace. Here, "slower" and "faster" are defined in comparison to the normal way to access the stack trace, {@link Throwable#getStackTrace() throwable.getStackTrace()}. Note, however, that this method's special implementation is not available for all platforms and configurations. If that implementation is unavailable, this method falls back to {@code getStackTrace}. Callers that require the special implementation can check its availability with {@link #lazyStackTraceIsLazy()}. <p>The expected (but not guaranteed) performance of the special implementation differs from {@code getStackTrace} in one main way: The {@code lazyStackTrace} call itself returns quickly by delaying the per-stack-frame work until each element is accessed. Roughly speaking: <ul> <li>{@code getStackTrace} takes {@code stackSize} time to return but then negligible time to retrieve each element of the returned list. <li>{@code lazyStackTrace} takes negligible time to return but then {@code 1/stackSize} time to retrieve each element of the returned list (probably slightly more than {@code 1/stackSize}). </ul> <p>Note: The special implementation does not respect calls to {@link Throwable#setStackTrace throwable.setStackTrace}. Instead, it always reflects the original stack trace from the exception's creation. @since 19.0 @deprecated This method is equivalent to {@link Throwable#getStackTrace()} on JDK versions past JDK 8 and on all Android versions. Use {@link Throwable#getStackTrace()} directly, or where possible use the {@code java.lang.StackWalker.walk} method introduced in JDK 9.
29 This method is a convenience for testing. Code should call {@link Segment#newEntry} directly.
30 Creates a new {@code RemovalNotification} for the given {@code key}/{@code value} pair, with the given {@code cause} for the removal. The {@code key} and/or {@code value} may be {@code null} if they were already garbage collected. @since 19.0
31 Returns a {@code Collector} that accumulates elements into a multiset created via the specified {@code Supplier}, whose elements are the result of applying {@code elementFunction} to the inputs, with counts equal to the result of applying {@code countFunction} to the inputs. Elements are added in encounter order. <p>If the mapped elements contain duplicates (according to {@link Object#equals}), the element will be added more than once, with the count summed over all appearances of the element. <p>Note that {@code stream.collect(toMultiset(function, e -> 1, supplier))} is equivalent to {@code stream.map(function).collect(Collectors.toCollection(supplier))}. <p>To collect to an {@link ImmutableMultiset}, use {@link ImmutableMultiset#toImmutableMultiset}. @since 22.0
32 Returns a {@code Collector} accumulating entries into a {@code Multimap} generated from the specified supplier. The keys and values of the entries are the result of applying the provided mapping functions to the input elements, accumulated in the encounter order of the stream. <p>Example: {@snippet : static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP = Stream.of("banana", "apple", "carrot", "asparagus", "cherry") .collect( toMultimap( str -> str.charAt(0), str -> str.substring(1), MultimapBuilder.treeKeys().arrayListValues()::build)); // is equivalent to static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP; static { FIRST_LETTER_MULTIMAP = MultimapBuilder.treeKeys().arrayListValues().build(); FIRST_LETTER_MULTIMAP.put('b', "anana"); FIRST_LETTER_MULTIMAP.put('a', "pple"); FIRST_LETTER_MULTIMAP.put('a', "sparagus"); FIRST_LETTER_MULTIMAP.put('c', "arrot"); FIRST_LETTER_MULTIMAP.put('c', "herry"); } } <p>To collect to an {@link ImmutableMultimap}, use either {@link ImmutableSetMultimap#toImmutableSetMultimap} or {@link ImmutableListMultimap#toImmutableListMultimap}. @since 21.0
33 Returns a {@code Collector} accumulating entries into a {@code Multimap} generated from the specified supplier. Each input element is mapped to a key and a stream of values, each of which are put into the resulting {@code Multimap}, in the encounter order of the stream and the encounter order of the streams of values. <p>Example: {@snippet : static final ListMultimap<Character, Character> FIRST_LETTER_MULTIMAP = Stream.of("banana", "apple", "carrot", "asparagus", "cherry") .collect( flatteningToMultimap( str -> str.charAt(0), str -> str.substring(1).chars().mapToObj(c -> (char) c), MultimapBuilder.linkedHashKeys().arrayListValues()::build)); // is equivalent to static final ListMultimap<Character, Character> FIRST_LETTER_MULTIMAP; static { FIRST_LETTER_MULTIMAP = MultimapBuilder.linkedHashKeys().arrayListValues().build(); FIRST_LETTER_MULTIMAP.putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a')); FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('p', 'p', 'l', 'e')); FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't')); FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's')); FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y')); } } @since 21.0
34 Returns a collection that applies {@code function} to each element of {@code fromCollection}. The returned collection is a live view of {@code fromCollection}; changes to one affect the other. <p>The returned collection's {@code add()} and {@code addAll()} methods throw an {@link UnsupportedOperationException}. All other collection methods are supported, as long as {@code fromCollection} supports them. <p>The returned collection isn't threadsafe or serializable, even if {@code fromCollection} is. <p>When a live view is <i>not</i> needed, it may be faster to copy the transformed collection and use the copy. <p>If the input {@code Collection} is known to be a {@code List}, consider {@link Lists#transform}. If only an {@code Iterable} is available, use {@link Iterables#transform}. <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#map Stream.map}.
35 Returns {@code true} if {@code iterable} contains any element {@code o} for which {@code Objects.equals(o, element)} would return {@code true}. Otherwise returns {@code false}, even in cases where {@link Collection#contains} might throw {@link NullPointerException} or {@link ClassCastException}.
36 @since 12.0
37 @since 12.0
38 Adds the given element to this queue. If the queue is currently full, the element at the head of the queue is evicted to make room. @return {@code true} always
39 {@inheritDoc} @since 8.0
40 {@inheritDoc} @since 8.0
41 {@inheritDoc} @since 8.0
42 Adds {@code element} to the {@code ImmutableSortedMultiset}. @param element the element to add @return this {@code Builder} object @throws NullPointerException if {@code element} is null
43 Adds a number of occurrences of an element to this {@code ImmutableSortedMultiset}. @param element the element to add @param occurrences the number of occurrences of the element to add. May be zero, in which case no change will be made. @return this {@code Builder} object @throws NullPointerException if {@code element} is null @throws IllegalArgumentException if {@code occurrences} is negative, or if this operation would result in more than {@link Integer#MAX_VALUE} occurrences of the element
44 Adds or removes the necessary occurrences of an element such that the element attains the desired count. @param element the element to add or remove occurrences of @param count the desired count of the element in this multiset @return this {@code Builder} object @throws NullPointerException if {@code element} is null @throws IllegalArgumentException if {@code count} is negative
45 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableMultiset}. Elements are sorted by the specified comparator. <p><b>Warning:</b> {@code comparator} should be <i>consistent with {@code equals}</i> as explained in the {@link Comparator} documentation. @since 21.0
46 {@inheritDoc} <p>This method returns a serializable {@code ImmutableSortedSet}. <p>The {@link SortedSet#headSet} documentation states that a subset of a subset throws an {@link IllegalArgumentException} if passed a {@code toElement} greater than an earlier {@code toElement}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code toElement}.
47 {@inheritDoc} <p>This method returns a serializable {@code ImmutableSortedSet}. <p>The {@link SortedSet#tailSet} documentation states that a subset of a subset throws an {@link IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code fromElement}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code fromElement}.
48 Returns a fluent iterable whose {@code Iterator} cycles indefinitely over the elements of this fluent iterable. <p>That iterator supports {@code remove()} if {@code iterable.iterator()} does. After {@code remove()} is called, subsequent cycles omit the removed element, which is no longer in this fluent iterable. The iterator's {@code hasNext()} method returns {@code true} until this fluent iterable is empty. <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit {@code break} or be certain that you will eventually remove all the elements. <p><b>{@code Stream} equivalent:</b> if the source iterable has only a single element {@code e}, use {@code Stream.generate(() -> e)}. Otherwise, collect your stream into a collection and use {@code Stream.generate(() -> collection).flatMap(Collection::stream)}.
49 Returns the elements from this fluent iterable that satisfy a predicate. The resulting fluent iterable's iterator does not support {@code remove()}. <p><b>{@code Stream} equivalent:</b> {@link Stream#filter} (same).
50 Returns a view of {@code unfiltered} containing all elements that are of the type {@code desiredType}. The returned iterable's iterator does not support {@code remove()}. <p><b>{@code Stream} equivalent:</b> {@code stream.filter(type::isInstance).map(type::cast)}. This does perform a little more work than necessary, so another option is to insert an unchecked cast at some later point: {@snippet : @SuppressWarnings("unchecked") // safe because of ::isInstance check ImmutableList<NewType> result = (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList()); }
51 Returns a fluent iterable that applies {@code function} to each element of this fluent iterable. <p>The returned fluent iterable's iterator supports {@code remove()} if this iterable's iterator does. After a successful {@code remove()} call, this fluent iterable no longer contains the corresponding element. <p><b>{@code Stream} equivalent:</b> {@link Stream#map}.
52 Returns a {@code PeekingIterator} backed by the given iterator. <p>Calls to the {@code peek} method with no intervening calls to {@code next} do not affect the iteration, and hence return the same object each time. A subsequent call to {@code next} is guaranteed to return the same object again. For example: {@snippet : PeekingIterator<String> peekingIterator = Iterators.peekingIterator(Iterators.forArray("a", "b")); String a1 = peekingIterator.peek(); // returns "a" String a2 = peekingIterator.peek(); // also returns "a" String a3 = peekingIterator.next(); // also returns "a" } <p>Any structural changes to the underlying iteration (aside from those performed by the iterator's own {@link PeekingIterator#remove()} method) will leave the iterator in an undefined state. <p>The returned iterator does not support removal after peeking, as explained by {@link PeekingIterator#remove()}. <p>Note: If the given iterator is already a {@code PeekingIterator}, it <i>might</i> be returned to the caller, although this is neither guaranteed to occur nor required to be consistent. For example, this method <i>might</i> choose to pass through recognized implementations of {@code PeekingIterator} when the behavior of the implementation is known to meet the contract guaranteed by this method. <p>There is no {@link Iterable} equivalent to this method, so use this method to wrap each individual iterator as it is generated. @param iterator the backing iterator. The {@link PeekingIterator} assumes ownership of this iterator, so users should cease making direct calls to it after calling this method. @return a peeking iterator backed by that iterator. Apart from the additional {@link PeekingIterator#peek()} method, this iterator behaves exactly the same as {@code iterator}.
53 Removes, from an iterable, every element that belongs to the provided collection. <p>This method calls {@link Collection#removeAll} if {@code iterable} is a collection, and {@link Iterators#removeAll} otherwise. @param removeFrom the iterable to (potentially) remove elements from @param elementsToRemove the elements to remove @return {@code true} if any element was removed from {@code iterable}
54 Removes, from an iterable, every element that satisfies the provided predicate. <p>Removals may or may not happen immediately as each element is tested against the predicate. The behavior of this method is not specified if {@code predicate} is dependent on {@code removeFrom}. <p><b>Java 8+ users:</b> if {@code removeFrom} is a {@link Collection}, use {@code removeFrom.removeIf(predicate)} instead. @param removeFrom the iterable to (potentially) remove elements from @param predicate a predicate that determines whether an element should be removed @return {@code true} if any elements were removed from the iterable @throws UnsupportedOperationException if the iterable does not support {@code remove()}. @since 2.0
55 Removes, from an iterable, every element that does not belong to the provided collection. <p>This method calls {@link Collection#retainAll} if {@code iterable} is a collection, and {@link Iterators#retainAll} otherwise. @param removeFrom the iterable to (potentially) remove elements from @param elementsToRetain the elements to retain @return {@code true} if any element was removed from {@code iterable}
56 A sensible definition of {@link #addAll} in terms of {@link #add}. If you override {@link #add}, you may wish to override {@link #addAll} to forward to this implementation. @since 7.0
57 Adds all elements in {@code iterable} to {@code collection}. @return {@code true} if {@code collection} was modified as a result of this operation.
58 Creates a <i>mutable</i> {@code ArrayList} instance containing the given elements; a very thin shortcut for creating an empty list and then calling {@link Iterators#addAll}. <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link ImmutableList#copyOf(Iterator)} instead.
59 Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin convenience for creating an empty set and then calling {@link Iterators#addAll}. <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link ImmutableSet#copyOf(Iterator)} instead. <p><b>Note:</b> if {@code E} is an {@link Enum} type, you should create an {@link EnumSet} instead. <p>Overall, this method is not very useful and will likely be deprecated in the future.
60 Returns a view of {@code unfiltered} containing all elements that are of the type {@code desiredType}.
61 Returns {@code true} if every element in {@code iterable} satisfies the predicate. If {@code iterable} is empty, {@code true} is returned. <p><b>{@code Stream} equivalent:</b> {@link Stream#allMatch}.
62 Returns the first element in {@code iterable} that satisfies the given predicate; use this method only when such an element is known to exist. If it is possible that <i>no</i> element will match, use {@link #tryFind} or {@link #find(Iterable, Predicate, Object)} instead. <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst().get()} @throws NoSuchElementException if no element in {@code iterable} matches the given predicate
63 Removes all nodes for the specified key.
64 Returns an implementation of {@link List#listIterator(int)}.
65 Returns an unmodifiable list containing the specified first element and backed by the specified array of additional elements. Changes to the {@code rest} array will be reflected in the returned list. Unlike {@link Arrays#asList}, the returned list is unmodifiable. <p>This is useful when a varargs method needs to use a signature such as {@code (Foo firstFoo, Foo... moreFoos)}, in order to avoid overload ambiguity or to enforce a minimum argument count. <p>The returned list is serializable and implements {@link RandomAccess}. @param first the first element @param rest an array of additional elements, possibly empty @return an unmodifiable list containing the specified elements
66 Returns a list that applies {@code function} to each element of {@code fromList}. The returned list is a transformed view of {@code fromList}; changes to {@code fromList} will be reflected in the returned list and vice versa. <p>Since functions are not reversible, the transform is one-way and new items cannot be stored in the returned list. The {@code add}, {@code addAll} and {@code set} methods are unsupported in the returned list. <p>The function is applied lazily, invoked when needed. This is necessary for the returned list to be a view, but it means that the function will be applied many times for bulk operations like {@link List#contains} and {@link List#hashCode}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned list doesn't need to be a view, copy the returned list into a new list of your choosing. <p>If {@code fromList} implements {@link RandomAccess}, so will the returned list. The returned list is threadsafe if the supplied list and function are. <p>If only a {@code Collection} or {@code Iterable} input is available, use {@link Collections2#transform} or {@link Iterables#transform}. <p><b>Note:</b> serializing the returned list is implemented by serializing {@code fromList}, its contents, and {@code function} -- <i>not</i> by serializing the transformed values. This can lead to surprising behavior, so serializing the returned list is <b>not recommended</b>. Instead, copy the list using {@link ImmutableList#copyOf(Collection)} (for example), then serialize the copy. Other methods similar to this do not implement serialization at all for this reason. <p><b>Java 8+ users:</b> many use cases for this method are better addressed by {@link java.util.stream.Stream#map}. This method is not being deprecated, but we gently encourage you to migrate to streams.
67 Returns an unmodifiable list containing the specified first and second element, and backed by the specified array of additional elements. Changes to the {@code rest} array will be reflected in the returned list. Unlike {@link Arrays#asList}, the returned list is unmodifiable. <p>This is useful when a varargs method needs to use a signature such as {@code (Foo firstFoo, Foo secondFoo, Foo... moreFoos)}, in order to avoid overload ambiguity or to enforce a minimum argument count. <p>The returned list is serializable and implements {@link RandomAccess}. @param first the first element @param second the second element @param rest an array of additional elements, possibly empty @return an unmodifiable list containing the specified elements
68 Returns a live {@link Map} view whose keys are the contents of {@code set} and whose values are computed on demand using {@code function}. To get an immutable <i>copy</i> instead, use {@link #toMap(Iterable, Function)}. <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code entrySet} views of the returned map iterate in the same order as the backing set. <p>Modifications to the backing set are read through to the returned map. The returned map supports removal operations if the backing set does. Removal operations write through to the backing set. The returned map does not support put operations. <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the set does not contain {@code null}, because the view cannot stop {@code null} from being added to the set. <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the resulting map view. @since 14.0
69 Returns a view of the navigable set as a map, mapping keys from the set according to the specified function. <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code entrySet} views of the returned map iterate in the same order as the backing set. <p>Modifications to the backing set are read through to the returned map. The returned map supports removal operations if the backing set does. Removal operations write through to the backing set. The returned map does not support put operations. <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the set does not contain {@code null}, because the view cannot stop {@code null} from being added to the set. <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the resulting map view. @since 14.0
70 Returns a view of a map whose values are derived from the original map's entries. In contrast to {@link #transformValues}, this method's entry-transformation logic may depend on the key as well as the value. <p>All other properties of the transformed map, such as iteration order, are left intact. For example, the code: {@snippet : Map<String, Boolean> options = ImmutableMap.of("verbose", true, "sort", false); EntryTransformer<String, Boolean, String> flagPrefixer = new EntryTransformer<String, Boolean, String>() { public String transformEntry(String key, Boolean value) { return value ? key : "no" + key; } }; Map<String, String> transformed = Maps.transformEntries(options, flagPrefixer); System.out.println(transformed); } ... prints {@code {verbose=verbose, sort=nosort}}. <p>Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. <p>It's acceptable for the underlying map to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed map might contain null values if the transformer sometimes gives a null result. <p>The returned map is not thread-safe or serializable, even if the underlying map is. <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the transformer will be applied many times for bulk operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing. <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the transformed map. @since 7.0
71 Implements {@code Collection.contains} safely for forwarding collections of map entries. If {@code o} is an instance of {@code Entry}, it is wrapped using {@link #unmodifiableEntry} to protect against a possible nefarious equals method. <p>Note that {@code c} is the backing (delegate) collection, rather than the forwarding collection. @param c the delegate (unwrapped) collection of map entries @param o the object that might be contained in {@code c} @return {@code true} if {@code c} contains {@code o}
72 Implements {@code Collection.remove} safely for forwarding collections of map entries. If {@code o} is an instance of {@code Entry}, it is wrapped using {@link #unmodifiableEntry} to protect against a possible nefarious equals method. <p>Note that {@code c} is backing (delegate) collection, rather than the forwarding collection. @param c the delegate (unwrapped) collection of map entries @param o the object to remove from {@code c} @return {@code true} if {@code c} was changed
73 Returns the number of occurrences of {@code element} in this multiset. @param element the element to look for @return the nonnegative number of occurrences of the element
74 Removes exactly the specified number of occurrences of {@code element}, or makes no change if this is not possible. <p>This method, in contrast to {@link #remove(Object, int)}, has no effect when the element count is smaller than {@code occurrences}. @param element the element to remove @param occurrences the number of occurrences of {@code element} to remove @return {@code true} if the removal was possible (including if {@code occurrences} is zero) @throws IllegalArgumentException if {@code occurrences} is negative
75 Adds or removes occurrences of {@code element} such that the {@link #count} of the element becomes {@code count}. @return the count of {@code element} in the multiset before this call @throws IllegalArgumentException if {@code count} is negative
76 Sets the number of occurrences of {@code element} to {@code newCount}, but only if the count is currently {@code expectedOldCount}. If {@code element} does not appear in the multiset exactly {@code expectedOldCount} times, no changes will be made. @return {@code true} if the change was successful. This usually indicates that the multiset has been modified, but not always: in the case that {@code expectedOldCount == newCount}, the method will return {@code true} if the condition was met. @throws IllegalArgumentException if {@code expectedOldCount} or {@code newCount} is negative
77 Removes all values for the provided key.
78 Uses a naturally-ordered {@link TreeMap} to map keys to value collections. <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link Multimap#asMap()} will iterate through the keys in sorted order. <p>For all multimaps generated by the resulting builder, the {@link Multimap#keySet()} can be safely cast to a {@link java.util.SortedSet}, and the {@link Multimap#asMap()} can safely be cast to a {@link java.util.SortedMap}.
79 Returns a multimap view of the specified map. The multimap is backed by the map, so changes to the map are reflected in the multimap, and vice versa. If the map is modified while an iteration over one of the multimap's collection views is in progress (except through the iterator's own {@code remove} operation, or through the {@code setValue} operation on a map entry returned by the iterator), the results of the iteration are undefined. <p>The multimap supports mapping removal, which removes the corresponding mapping from the map. It does not support any operations which might add mappings, such as {@code put}, {@code putAll} or {@code replaceValues}. <p>The returned multimap will be serializable if the specified map is serializable. @param map the backing map for the returned multimap view
80 Returns a view of a multimap whose values are derived from the original multimap's entries. In contrast to {@link #transformValues}, this method's entry-transformation logic may depend on the key as well as the value. <p>All other properties of the transformed multimap, such as iteration order, are left intact. For example, the code: {@snippet : SetMultimap<String, Integer> multimap = ImmutableSetMultimap.of("a", 1, "a", 4, "b", -6); EntryTransformer<String, Integer, String> transformer = new EntryTransformer<String, Integer, String>() { public String transformEntry(String key, Integer value) { return (value >= 0) ? key : "no" + key; } }; Multimap<String, String> transformed = Multimaps.transformEntries(multimap, transformer); System.out.println(transformed); } ... prints {@code {a=[a, a], b=[nob]}}. <p>Changes in the underlying multimap are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying multimap. <p>It's acceptable for the underlying multimap to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed multimap might contain null values if the transformer sometimes gives a null result. <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap is. The {@code equals} and {@code hashCode} methods of the returned multimap are meaningless, since there is not a definition of {@code equals} or {@code hashCode} for general collections, and {@code get()} will return a general {@code Collection} as opposed to a {@code List} or a {@code Set}. <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned multimap to be a view, but it means that the transformer will be applied many times for bulk operations like {@link Multimap#containsValue} and {@link Object#toString}. For this to perform well, {@code transformer} should be fast. To avoid lazy evaluation when the returned multimap doesn't need to be a view, copy the returned multimap into a new multimap of your choosing. <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the transformed multimap. @since 7.0
81 Adds each element of {@code elements} to the {@code ImmutableMultiset}. @param elements the {@code Iterable} to add to the {@code ImmutableMultiset} @return this {@code Builder} object @throws NullPointerException if {@code elements} is null or contains a null element
82 A specialization of {@code addAllImpl} for when {@code elements} is itself a Multiset.
83 Modifies {@code multisetToModify} so that its count for an element {@code e} is at most {@code multisetToRetain.count(e)}. <p>To be precise, {@code multisetToModify.count(e)} is set to {@code Math.min(multisetToModify.count(e), multisetToRetain.count(e))}. This is similar to {@link #intersection(Multiset, Multiset) intersection} {@code (multisetToModify, multisetToRetain)}, but mutates {@code multisetToModify} instead of returning a view. <p>In contrast, {@code multisetToModify.retainAll(multisetToRetain)} keeps all occurrences of elements that appear at all in {@code multisetToRetain}, and deletes all occurrences of all other elements. @return {@code true} if {@code multisetToModify} was changed as a result of this operation @since 10.0
84 For each occurrence of an element {@code e} in {@code occurrencesToRemove}, removes one occurrence of {@code e} in {@code multisetToModify}. <p>Equivalently, this method modifies {@code multisetToModify} so that {@code multisetToModify.count(e)} is set to {@code Math.max(0, multisetToModify.count(e) - Iterables.frequency(occurrencesToRemove, e))}. <p>This is <i>not</i> the same as {@code multisetToModify.} {@link Multiset#removeAll removeAll}{@code (occurrencesToRemove)}, which removes all occurrences of elements that appear in {@code occurrencesToRemove}. However, this operation <i>is</i> equivalent to, albeit sometimes more efficient than, the following: {@snippet : for (E e : occurrencesToRemove) { multisetToModify.remove(e); } } @return {@code true} if {@code multisetToModify} was changed as a result of this operation @since 18.0 (present in 10.0 with a requirement that the second parameter be a {@code Multiset})
85 A sensible definition of {@link #retainAll} in terms of the {@code retainAll} method of {@link #elementSet}. If you override {@link #elementSet}, you may wish to override {@link #retainAll} to forward to this implementation. @since 7.0
86 Drains the queue as {@link BlockingQueue#drainTo(Collection, int)}, but if the requested {@code numElements} elements are not available, it will wait for them up to the specified timeout. @param q the blocking queue to be drained @param buffer where to add the transferred elements @param numElements the number of elements to be waited for @param timeout how long to wait before giving up @return the number of elements transferred @throws InterruptedException if interrupted while waiting @since 28.0 (but only since 33.4.0 in the Android flavor)
87 Drains the queue as {@linkplain #drain(BlockingQueue, Collection, int, Duration)}, but with a different behavior in case it is interrupted while waiting. In that case, the operation will continue as usual, and in the end the thread's interruption status will be set (no {@code InterruptedException} is thrown). @param q the blocking queue to be drained @param buffer where to add the transferred elements @param numElements the number of elements to be waited for @param timeout how long to wait before giving up @return the number of elements transferred @since 28.0 (but only since 33.4.0 in the Android flavor)
88 @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #contains} instead.
89 Returns {@code true} if every element in {@code values} is {@linkplain #contains contained} in this range.
90 Invokes {@code consumer} once for each pair of <i>corresponding</i> elements in {@code streamA} and {@code streamB}. If one stream is longer than the other, the extra elements are silently ignored. Elements passed to the consumer are guaranteed to come from the same position in their respective source streams. For example: {@snippet : Streams.forEachPair( Stream.of("foo1", "foo2", "foo3"), Stream.of("bar1", "bar2"), (arg1, arg2) -> System.out.println(arg1 + ":" + arg2) } <p>will print: {@snippet : foo1:bar1 foo2:bar2 } <p><b>Warning:</b> If either supplied stream is a parallel stream, the same correspondence between elements will be made, but the order in which those pairs of elements are passed to the consumer is <i>not</i> defined. <p>Note that many usages of this method can be replaced with simpler calls to {@link #zip}. This method behaves equivalently to {@linkplain #zip zipping} the stream elements into temporary pair objects and then using {@link Stream#forEach} on that stream. @since 22.0 (but only since 33.4.0 in the Android flavor)
91 Returns a {@link Collector} that accumulates elements into a {@code Table} created using the specified supplier, whose cells are generated by applying the provided mapping functions to the input elements. Cells are inserted into the generated {@code Table} in encounter order. <p>If multiple input elements map to the same row and column, the specified merging function is used to combine the values. Like {@link java.util.stream.Collectors#toMap(java.util.function.Function, java.util.function.Function, BinaryOperator, java.util.function.Supplier)}, this Collector throws a {@code NullPointerException} on null values returned from {@code valueFunction}, and treats nulls returned from {@code mergeFunction} as removals of that row/column pair. @since 21.0
92 Returns a view of a table where each value is transformed by a function. All other properties of the table, such as iteration order, are left intact. <p>Changes in the underlying table are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying table. <p>It's acceptable for the underlying table to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed table might contain null values, if the function sometimes gives a null result. <p>The returned table is not thread-safe or serializable, even if the underlying table is. <p>The function is applied lazily, invoked when needed. This is necessary for the returned table to be a view, but it means that the function will be applied many times for bulk operations like {@link Table#containsValue} and {@code Table.toString()}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned table doesn't need to be a view, copy the returned table into a new table of your choosing. @since 10.0
93 Creates a transposed view of a given table that flips its row and column keys. In other words, calling {@code get(columnKey, rowKey)} on the generated table always returns the same value as calling {@code get(rowKey, columnKey)} on the original table. Updating the original table changes the contents of the transposed table and vice versa. <p>The returned table supports update operations as long as the input table supports the analogous operation with swapped rows and columns. For example, in a {@link HashBasedTable} instance, {@code rowKeySet().iterator()} supports {@code remove()} but {@code columnKeySet().iterator()} doesn't. With a transposed {@link HashBasedTable}, it's the other way around.
94 Returns a new ArrayBasedEscaperMap for creating ArrayBasedCharEscaper or ArrayBasedUnicodeEscaper instances. @param replacements a map of characters to their escaped representations
95 Add multiple mappings at once for a particular index.
96 Scans a sub-sequence of characters from a given {@link CharSequence}, returning the index of the next character that requires escaping. <p><b>Note:</b> When implementing an escaper, it is a good idea to override this method for efficiency. The base class implementation determines successive Unicode code points and invokes {@link #escape(int)} for each of them. If the semantics of your escaper are such that code points in the supplementary range are either all escaped or all unescaped, this method can be implemented more efficiently using {@link CharSequence#charAt(int)}. <p>Note however that if your escaper does not escape characters in the supplementary range, you should either continue to validate the correctness of any surrogate characters encountered or provide a clear warning to users that your escaper does not validate its input. <p>See {@link com.google.common.net.PercentEscaper} for an example. @param csq a sequence of characters @param start the index of the first character to be scanned @param end the index immediately after the last character to be scanned @throws IllegalArgumentException if the scanned sub-sequence of {@code csq} contains invalid surrogate pairs
97 Gets the context for the given event.
98 Returns a funnel that processes an {@code Iterable} by funneling its elements in iteration order with the specified funnel. No separators are added between the elements. @since 15.0
99 Wraps a {@code PrimitiveSink} as an {@link OutputStream}, so it is easy to {@link Funnel#funnel funnel} an object to a {@code PrimitiveSink} if there is already a way to write the contents of the object to an {@code OutputStream}. <p>The {@code close} and {@code flush} methods of the returned {@code OutputStream} do nothing, and no method throws {@code IOException}. @since 13.0
100 Returns a funnel that encodes the characters of a {@code CharSequence} with the specified {@code Charset}. @since 15.0
101 Returns a Writer that sends all output to the given {@link Appendable} target. Closing the writer will close the target if it is {@link Closeable}, and flushing the writer will flush the target if it is {@link java.io.Flushable}. @param target the object to which output will be sent @return a new Writer object, unless target is a Writer, in which case the target is returned
102 Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the inverse operation to {@link #encode(byte[])}. @throws DecodingException if the input is not a valid encoded string according to this encoding.
103 Creates a new {@link Closer}.
104 Constructs a pattern file name filter object. @param patternStr the pattern string on which to filter file names @throws PatternSyntaxException if pattern compilation fails (runtime)
105 Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode. @throws IllegalArgumentException if {@code x <= 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x} is not a power of two
106 Returns the unsigned {@code byte} value represented by the given decimal string. @throws NumberFormatException if the string does not contain a valid unsigned {@code byte} value @throws NullPointerException if {@code string} is null (in contrast to {@link Byte#parseByte(String)}) @since 13.0
107 Returns the unsigned {@code int} value represented by the given decimal string. <p><b>Java 8+ users:</b> use {@link Integer#parseUnsignedInt(String)} instead. @throws NumberFormatException if the string does not contain a valid unsigned {@code int} value @throws NullPointerException if {@code s} is null (in contrast to {@link Integer#parseInt(String)})
108 Wraps {@code t} in a {@code TypeVariableKey} if it's a type variable.
109 Returns a value that satisfies the contract of the {@link #value} field based on the state of given future. <p>This is approximately the inverse of {@link #getDoneValue(Object)}
110 @param delay the time from now to delay execution @since 31.1 (but only since 33.4.0 in the Android flavor)
111 Creates an {@code AtomicLongMap}.
112 Updates the value currently associated with {@code key} by combining it with {@code x} via the specified accumulator function, returning the new value. The previous value associated with {@code key} (or zero, if there is none) is passed as the first argument to {@code accumulatorFunction}, and {@code x} is passed as the second argument. @since 21.0
113 Updates the value currently associated with {@code key} by combining it with {@code x} via the specified accumulator function, returning the old value. The previous value associated with {@code key} (or zero, if there is none) is passed as the first argument to {@code accumulatorFunction}, and {@code x} is passed as the second argument. @since 21.0
114 Associates {@code newValue} with {@code key} in this map, and returns the value previously associated with {@code key}, or zero if there was no such value.
115 Captures an object to be closed when a {@link ClosingFuture} pipeline is done. <p>For users of the {@code -jre} flavor of Guava, the object can be any {@code AutoCloseable}. For users of the {@code -android} flavor, the object must be a {@code Closeable}. (For more about the flavors, see <a href="https://github.com/google/guava#adding-guava-to-your-build">Adding Guava to your build</a>.) <p>Be careful when targeting an older SDK than you are building against (most commonly when building for Android): Ensure that any object you pass implements the interface not just in your current SDK version but also at the oldest version you support. For example, <a href="https://developer.android.com/sdk/api_diff/16/">API Level 16</a> is the first version in which {@code Cursor} is {@code Closeable}. To support older versions, pass a wrapper {@code Closeable} with a method reference like {@code cursor::close}. <p>Note that this method is still binary-compatible between flavors because the erasure of its parameter type is {@code Object}, not {@code AutoCloseable} or {@code Closeable}. @param closeable the object to be closed (see notes above) @param closingExecutor the object will be closed on this executor @return the first argument
116 Creates a new factory with the specified policy.
117 Returns an {@link Executor} that runs each task executed sequentially, such that no two tasks are running concurrently. <p>{@linkplain Executor#execute executed} tasks have a happens-before order as defined in the Java Language Specification. Tasks execute with the same happens-before order that the function calls to {@link Executor#execute execute()} that submitted those tasks had. <p>The executor uses {@code delegate} in order to {@link Executor#execute execute} each task in turn, and does not create any threads of its own. <p>After execution begins on a thread from the {@code delegate} {@link Executor}, tasks are polled and executed from a task queue until there are no more tasks. The thread will not be released until there are no more tasks to run. <p>If a task is submitted while a thread is executing tasks from the task queue, the thread will not be released until that submitted task is also complete. <p>If a task is {@linkplain Thread#interrupt interrupted} while a task is running: <ol> <li>execution will not stop until the task queue is empty. <li>tasks will begin execution with the thread marked as not interrupted - any interruption applies only to the task that was running at the point of interruption. <li>if the thread was interrupted before the SequentialExecutor's worker begins execution, the interrupt will be restored to the thread after it completes so that its {@code delegate} Executor may process the interrupt. <li>subtasks are run with the thread uninterrupted and interrupts received during execution of a task are ignored. </ol> <p>{@code RuntimeException}s thrown by tasks are simply logged and the executor keeps trucking. If an {@code Error} is thrown, the error will propagate and execution will stop until the next time a task is submitted. <p>When an {@code Error} is thrown by an executed task, previously submitted tasks may never run. An attempt will be made to restart execution on the next call to {@code execute}. If the {@code delegate} has begun to reject execution, the previously submitted tasks may never run, despite not throwing a RejectedExecutionException synchronously with the call to {@code execute}. If this behaviour is problematic, use an Executor with a single thread (e.g. {@link Executors#newSingleThreadExecutor}). @since 23.3 (since 23.1 as {@code sequentialExecutor})
118 Creates a TimeLimiter instance using the given executor service to execute method calls. <p><b>Warning:</b> using a bounded executor may be counterproductive! If the thread pool fills up, any time callers spend waiting for a thread may count toward their time limit, and in this case the call may even time out before the target method is ever invoked. @param executor the ExecutorService that will execute the method calls on the target objects; for example, a {@link Executors#newCachedThreadPool()}. @since 22.0
119 Invokes {@code unit.}{@link TimeUnit#timedJoin(Thread, long) timedJoin(toJoin, timeout)} uninterruptibly. @since 28.0 (but only since 33.4.0 in the Android flavor)
120 Returns an instance which specifies that no ordering is guaranteed.
121 Returns an instance which specifies that ordering is guaranteed to be always be the same across iterations, and across releases. Some methods may have stronger guarantees. <p>This instance is only useful in combination with {@code incidentEdgeOrder}, e.g. {@code graphBuilder.incidentEdgeOrder(ElementOrder.stable())}. <h3>In combination with {@code incidentEdgeOrder}</h3> <p>{@code incidentEdgeOrder(ElementOrder.stable())} guarantees the ordering of the returned collections of the following methods: <ul> <li>For {@link Graph} and {@link ValueGraph}: <ul> <li>{@code edges()}: Stable order <li>{@code adjacentNodes(node)}: Connecting edge insertion order <li>{@code predecessors(node)}: Connecting edge insertion order <li>{@code successors(node)}: Connecting edge insertion order <li>{@code incidentEdges(node)}: Edge insertion order </ul> <li>For {@link Network}: <ul> <li>{@code adjacentNodes(node)}: Stable order <li>{@code predecessors(node)}: Connecting edge insertion order <li>{@code successors(node)}: Connecting edge insertion order <li>{@code incidentEdges(node)}: Stable order <li>{@code inEdges(node)}: Edge insertion order <li>{@code outEdges(node)}: Edge insertion order <li>{@code adjacentEdges(edge)}: Stable order <li>{@code edgesConnecting(nodeU, nodeV)}: Edge insertion order </ul> </ul> @since 29.0
122 Returns an instance which specifies that insertion ordering is guaranteed.
123 Returns an instance which specifies that the natural ordering of the elements is guaranteed.
124 Returns an instance which specifies that the ordering of the elements is guaranteed to be determined by {@code comparator}.
125 Returns an object that can be used to wait until this objects' deferred closeables have all had {@link Runnable}s that close them submitted to each one's closing {@link Executor}.
126 Returns a copy of the input character sequence in which all {@linkplain #isUpperCase(char) uppercase ASCII characters} have been converted to lowercase. All other characters are copied without modification. @since 14.0
127 Returns a copy of the input character sequence in which all {@linkplain #isLowerCase(char) lowercase ASCII characters} have been converted to uppercase. All other characters are copied without modification. @since 14.0
128 Gets a byte array representation of this instance. <p><b>Note:</b> No guarantees are made regarding stability of the representation between versions.
129 Gets a byte array representation of this instance. <p><b>Note:</b> No guarantees are made regarding stability of the representation between versions.
130 Pseudoconstructor for serialization support.
131 Pseudoconstructor for serialization support.
132 Returns a matcher that matches any character matched by both this matcher and {@code other}.
133 Returns a matcher with identical behavior to the given {@link Character}-based predicate, but which operates on primitive {@code char} instances instead.
134 Returns a matcher that matches any character matched by either this matcher or {@code other}.
135 Returns a {@code char} matcher that matches any character in a given BMP range (both endpoints are inclusive). For example, to match any lowercase letter of the English alphabet, use {@code CharMatcher.inRange('a', 'z')}. @throws IllegalArgumentException if {@code endInclusive < startInclusive}
136 Returns a new {@code CacheStats} representing the difference between this {@code CacheStats} and {@code other}. Negative values, which aren't supported by {@code CacheStats} will be rounded up to zero.
137 Returns a new {@code CacheStats} representing the sum of this {@code CacheStats} and {@code other}. <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is guaranteed not to throw an exception). If you require specific handling, we recommend implementing your own stats collector. @since 11.0
138 Creates a new multimap that uses the provided map. @param map place to store the mapping from each key to its corresponding values
139 Creates a new multimap that uses the provided map. @param map place to store the mapping from each key to its corresponding values
140 @since 12.0
141 Creates an empty {@code EnumMultiset}.
142 {@inheritDoc} <p>This method returns a serializable {@code ImmutableSortedSet}. <p>The {@link SortedSet#subSet} documentation states that a subset of a subset throws an {@link IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code fromElement}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code fromElement}. Similarly, this method keeps the original {@code toElement}, instead of throwing an exception, if passed a {@code toElement} greater than an earlier {@code toElement}.
143 Divides an iterator into unmodifiable sublists of the given size (the final list may be smaller). For example, partitioning an iterator containing {@code [a, b, c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterator containing two inner lists of three and two elements, all in the original order. <p>The returned lists implement {@link java.util.RandomAccess}. <p><b>Note:</b> The current implementation eagerly allocates storage for {@code size} elements. As a consequence, passing values like {@code Integer.MAX_VALUE} can lead to {@link OutOfMemoryError}. @param iterator the iterator to return a partitioned view of @param size the desired size of each partition (the last may be smaller) @return an iterator of immutable lists containing the elements of {@code iterator} divided into partitions @throws IllegalArgumentException if {@code size} is nonpositive
144 Divides an iterator into unmodifiable sublists of the given size, padding the final iterator with null values if necessary. For example, partitioning an iterator containing {@code [a, b, c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e, null]]} -- an outer iterator containing two inner lists of three elements each, all in the original order. <p>The returned lists implement {@link java.util.RandomAccess}. @param iterator the iterator to return a partitioned view of @param size the desired size of each partition @return an iterator of immutable lists containing the elements of {@code iterator} divided into partitions (the final iterable may have trailing null elements) @throws IllegalArgumentException if {@code size} is nonpositive
145 Creates and returns a new builder, configured to build {@code MinMaxPriorityQueue} instances sized appropriately to hold {@code expectedSize} elements.
146 Creates and returns a new builder, configured to build {@code MinMaxPriorityQueue} instances that are limited to {@code maximumSize} elements. Each time a queue grows beyond this bound, it immediately removes its greatest element (according to its comparator), which might be the element that was just added.
147 Constructor for use by subclasses. This hasher instance will process chunks of the specified size. @param chunkSize the number of bytes available per {@link #process(ByteBuffer)} invocation; must be at least 4
148 Returns the <a href="http://en.wikipedia.org/wiki/Variance#Population_variance">population variance</a> of the values. The count must be non-zero. <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty
149 Returns the <a href="http://en.wikipedia.org/wiki/Variance#Sample_variance">unbiased sample variance</a> of the values. If this dataset is a sample drawn from a population, this is an unbiased estimator of the population variance of the population. The count must be greater than one. <p>This is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty or contains a single value
150 Returns the <a href="http://en.wikipedia.org/wiki/Variance#Population_variance">population variance</a> of the values. The count must be non-zero. <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty
151 Returns the <a href="http://en.wikipedia.org/wiki/Variance#Sample_variance">unbiased sample variance</a> of the values. If this dataset is a sample drawn from a population, this is an unbiased estimator of the population variance of the population. The count must be greater than one. <p>This is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty or contains a single value
152 Returns a {@code char} matcher that matches any BMP character present in the given character sequence. Returns a bogus matcher if the sequence contains supplementary characters.
153 Collapses groups of matching characters exactly as {@link #collapseFrom} does, except that groups of matching BMP characters at the start or end of the sequence are removed without replacement.
154 Returns a new equivalence relation for {@code F} which evaluates equivalence by first applying {@code function} to the argument, then evaluating using {@code this}. That is, for any pair of non-null objects {@code x} and {@code y}, {@code equivalence.onResultOf(function).equivalent(a, b)} is true if and only if {@code equivalence.equivalent(function.apply(a), function.apply(b))} is true. <p>For example: {@snippet : Equivalence<Person> SAME_AGE = Equivalence.equals().onResultOf(GET_PERSON_AGE); } <p>{@code function} will never be invoked with a null value. <p>Note that {@code function} must be consistent according to {@code this} equivalence relation. That is, invoking {@link Function#apply} multiple times for a given value must return equivalent results. For example, {@code Equivalence.identity().onResultOf(Functions.toStringFunction())} is broken because it's not guaranteed that {@link Object#toString}) always returns the same string instance. @since 10.0
155 Returns an equivalence over iterables based on the equivalence of their elements. More specifically, two iterables are considered equivalent if they both contain the same number of elements, and each pair of corresponding elements is equivalent according to {@code this}. Null iterables are equivalent to one another. <p>Note that this method performs a similar function for equivalences as {@link com.google.common.collect.Ordering#lexicographical} does for orderings. <p>The returned object is serializable if this object is serializable. @since 10.0
156 Determines whether two iterables contain equal elements in the same order. More specifically, this method returns {@code true} if {@code iterable1} and {@code iterable2} contain the same number of elements and every element of {@code iterable1} is equal to the corresponding element of {@code iterable2}.
157 An implementation of {@link List#equals(Object)}.
158 Creates a new, empty {@code ConcurrentHashMultiset} using the default initial capacity, load factor, and concurrency settings.
159 Creates a new, empty {@code ConcurrentHashMultiset} using {@code countMap} as the internal backing map. <p>This instance will assume ownership of {@code countMap}, and other code should not maintain references to the map or modify it in any way. <p>The returned multiset is serializable if the input map is. @param countMap backing map for storing the elements in the multiset and their counts. It must be empty. @throws IllegalArgumentException if {@code countMap} is not empty @since 20.0
160 Appends the string representation of each of {@code parts}, using the previously configured separator between each, to {@code appendable}.
161 Appends the string representation of each of {@code parts}, using the previously configured separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}. @since 11.0
162 Appends the string representation of each entry of {@code map}, using the previously configured separator and key-value separator, to {@code builder}. Identical to {@link #appendTo(Appendable, Map)}, except that it does not throw {@link IOException}.
163 Returns a string containing the string representation of each entry in {@code entries}, using the previously configured separator and key-value separator. @since 10.0
164 Adds an unnamed value to the formatted output. <p>It is strongly encouraged to use {@link #add(String, Object)} instead and give value a readable name.
165 Adds a name/value pair to the formatted output in {@code name=value} format. If {@code value} is {@code null}, the string {@code "null"} is used, unless {@link #omitNullValues()} is called, in which case this name/value pair will not be added.
166 Adds an unnamed value to the formatted output. <p>It is strongly encouraged to use {@link #add(String, boolean)} instead and give value a readable name. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).
167 Adds an unnamed value to the formatted output. <p>It is strongly encouraged to use {@link #add(String, char)} instead and give value a readable name. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).
168 Adds an unnamed value to the formatted output. <p>It is strongly encouraged to use {@link #add(String, double)} instead and give value a readable name. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).
169 Adds an unnamed value to the formatted output. <p>It is strongly encouraged to use {@link #add(String, float)} instead and give value a readable name. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).
170 Adds an unnamed value to the formatted output. <p>It is strongly encouraged to use {@link #add(String, int)} instead and give value a readable name. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).
171 Adds an unnamed value to the formatted output. <p>It is strongly encouraged to use {@link #add(String, long)} instead and give value a readable name. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).
172 Adds a name/value pair to the formatted output in {@code name=value} format. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).
173 Adds a name/value pair to the formatted output in {@code name=value} format. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).
174 Adds a name/value pair to the formatted output in {@code name=value} format. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).
175 Adds a name/value pair to the formatted output in {@code name=value} format. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).
176 Adds a name/value pair to the formatted output in {@code name=value} format. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).
177 Adds a name/value pair to the formatted output in {@code name=value} format. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).
178 If {@code nullableReference} is non-null, returns an {@code Optional} instance containing that reference; otherwise returns {@link Optional#absent}. <p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's {@code Optional.ofNullable}.
179 Constructor for use by subclasses.
180 Returns the size of this source in bytes, if the size can be easily determined without actually opening the data stream. <p>The default implementation returns {@link Optional#absent}. Some sources, such as a file, may return a non-absent value. Note that in such cases, it is <i>possible</i> that this method will return a different number of bytes than would be returned by reading all of the bytes (for example, some special files may return a size of 0 despite actually having content when read). <p>Additionally, for mutable sources such as files, a subsequent read may return a different number of bytes if the contents are changed. @since 19.0
181 Returns the size of this source in chars, if the size can be easily determined without actually opening the data stream. <p>The default implementation returns {@link Optional#absent}. Some sources, such as a {@code CharSequence}, may return a non-absent value. Note that in such cases, it is <i>possible</i> that this method will return a different number of chars than would be returned by reading all of the chars. <p>Additionally, for mutable sources such as {@code StringBuilder}s, a subsequent read may return a different number of chars if the contents are changed. @since 19.0
182 Returns the given string if it is nonempty; {@code null} otherwise. @param string the string to test and possibly return @return {@code string} itself if it is nonempty; {@code null} if it is empty or null
183 Split a freeform string into a host and port, without strict validation. <p>Note that the host-only formats will leave the port field undefined. You can use {@link #withDefaultPort(int)} to patch in a default value. @param hostPortString the input string to parse. @return if parsing was successful, a populated HostAndPort object. @throws IllegalArgumentException if nothing meaningful could be parsed.
184 Returns a view of this fluent iterable that skips its first {@code numberToSkip} elements. If this fluent iterable contains fewer than {@code numberToSkip} elements, the returned fluent iterable skips all of its elements. <p>Modifications to this fluent iterable before a call to {@code iterator()} are reflected in the returned fluent iterable. That is, the iterator skips the first {@code numberToSkip} elements that exist when the iterator is created, not when {@code skip()} is called. <p>The returned fluent iterable's iterator supports {@code remove()} if the {@code Iterator} of this fluent iterable supports it. Note that it is <i>not</i> possible to delete the last skipped element by immediately calling {@code remove()} on the returned fluent iterable's iterator, as the {@code Iterator} contract states that a call to {@code * remove()} before a call to {@code next()} will throw an {@link IllegalStateException}. <p><b>{@code Stream} equivalent:</b> {@link Stream#skip} (same).
185 Creates a fluent iterable with the first {@code size} elements of this fluent iterable. If this fluent iterable does not contain that many elements, the returned fluent iterable will have the same behavior as this fluent iterable. The returned fluent iterable's iterator supports {@code remove()} if this fluent iterable's iterator does. <p><b>{@code Stream} equivalent:</b> {@link Stream#limit} (same). @param maxSize the maximum number of elements in the returned fluent iterable @throws IllegalArgumentException if {@code size} is negative
186 Returns the element at the specified position in an iterable or a default value otherwise. <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().orElse(defaultValue)} (returns the default value if the index is out of bounds) @param position position of the element to return @param defaultValue the default value to return if {@code position} is greater than or equal to the size of the iterable @return the element at the specified position in {@code iterable} or {@code defaultValue} if {@code iterable} contains fewer than {@code position + 1} elements. @throws IndexOutOfBoundsException if {@code position} is negative @since 4.0
187 Advances {@code iterator} {@code position + 1} times, returning the element at the {@code position}th position. @param position position of the element to return @return the element at the specified position in {@code iterator} @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to the number of elements remaining in {@code iterator}
188 Advances {@code iterator} {@code position + 1} times, returning the element at the {@code position}th position or {@code defaultValue} otherwise. @param position position of the element to return @param defaultValue the default value to return if the iterator is empty or if {@code position} is greater than the number of elements remaining in {@code iterator} @return the element at the specified position in {@code iterator} or {@code defaultValue} if {@code iterator} produces fewer than {@code position + 1} elements. @throws IndexOutOfBoundsException if {@code position} is negative @since 4.0
189 Returns a {@link Traverser} instance for the file and directory tree. The returned traverser starts from a {@link File} and will return all files and directories it encounters. <p><b>Warning:</b> {@code File} provides no support for symbolic links, and as such there is no way to ensure that a symbolic link to a directory is not followed when traversing the tree. In this case, iterables created by this traverser could contain files that are outside of the given directory or even be infinite if there is a symbolic link loop. <p>If available, consider using {@link MoreFiles#fileTraverser()} instead. It behaves the same except that it doesn't follow symbolic links and returns {@code Path} instances. <p>If the {@link File} passed to one of the {@link Traverser} methods does not exist or is not a directory, no exception will be thrown and the returned {@link Iterable} will contain a single element: that file. <p>Example: {@code Files.fileTraverser().depthFirstPreOrder(new File("/"))} may return files with the following paths: {@code ["/", "/etc", "/etc/config.txt", "/etc/fonts", "/home", "/home/alice", ...]} @since 23.5
190 Wraps a {@link InputStream}, limiting the number of bytes which can be read. @param in the input stream to be wrapped @param limit the maximum number of bytes to be read @return a length-limited {@link InputStream} @since 14.0 (since 1.0 as com.google.common.io.LimitInputStream)
191 Returns the {@code Inet4Address} corresponding to a given {@code BigInteger}. @param address BigInteger representing the IPv4 address @return Inet4Address representation of the given BigInteger @throws IllegalArgumentException if the BigInteger is not between 0 and 2^32-1 @since 28.2
192 Returns the {@code Inet6Address} corresponding to a given {@code BigInteger}. @param address BigInteger representing the IPv6 address @return Inet6Address representation of the given BigInteger @throws IllegalArgumentException if the BigInteger is not between 0 and 2^128-1 @since 28.2
193 Returns a hash function implementing the <a href="https://131002.net/siphash/">64-bit SipHash-2-4 algorithm</a> using the given seed. @since 15.0
194 Creates a new instance that uses the given file threshold, and does not reset the data when the {@link ByteSource} returned by {@link #asByteSource} is finalized. @param fileThreshold the number of bytes before the stream should switch to buffering to a file @throws IllegalArgumentException if {@code fileThreshold} is negative
195 Returns an Inet4Address having the integer value specified by the argument. @param address {@code int}, the 32bit integer address to be converted @return {@link Inet4Address} equivalent of the argument
196 Reserves the given number of permits from this {@code RateLimiter} for future use, returning the number of microseconds until the reservation can be consumed. @return time in microseconds to wait until the resource can be acquired, never negative
197 Acquires the given number of permits from this {@code RateLimiter} if it can be obtained without exceeding the specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permits would not have been granted before the timeout expired. @param permits the number of permits to acquire @param timeout the maximum time to wait for the permits. Negative values are treated as zero. @param unit the time unit of the timeout argument @return {@code true} if the permits were acquired, {@code false} otherwise @throws IllegalArgumentException if the requested number of permits is negative or zero
198 Writes this {@code BloomFilter} to an output stream, with a custom format (not Java serialization). This has been measured to save at least 400 bytes compared to regular serialization. <p>Use {@linkplain #readFrom(InputStream, Funnel)} to reconstruct the written BloomFilter.
199 Returns a {@link Scheduler} that schedules the task using the {@link ScheduledExecutorService#scheduleWithFixedDelay} method. @param initialDelay the time to delay first execution @param delay the delay between the termination of one execution and the commencement of the next @since 28.0 (but only since 33.4.0 in the Android flavor)
200 Returns a {@link Scheduler} that schedules the task using the {@link ScheduledExecutorService#scheduleAtFixedRate} method. @param initialDelay the time to delay first execution @param period the period between successive executions of the task @since 28.0 (but only since 33.4.0 in the Android flavor)
201 Returns unit.toNanos(time), additionally ensuring the returned value is not at risk of overflowing or underflowing, by bounding the value between 0 and (Long.MAX_VALUE / 4) * 3. Actually waiting for more than 219 years is not supported!
202 Creates (and starts) a new stopwatch, using the specified time source. @since 15.0
203 Configures this {@code Builder} to order entries by value according to the specified comparator. <p>The sort order is stable, that is, if two entries have values that compare as equivalent, the entry that was inserted first will be first in the built map's iteration order. @throws IllegalStateException if this method was already called @since 19.0
204 Sets the concurrency level that will be used by the to-be-built {@link Interner}. @see MapMaker#concurrencyLevel(int)
205 Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed after the entry's creation, or the most recent replacement of its value. <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long) maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be useful in testing, or to disable caching temporarily without a code change. <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or write operations. Expired entries are cleaned up as part of the routine maintenance described in the class javadoc. @param duration the length of time after an entry is created that it should be automatically removed @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code duration} is negative @throws IllegalStateException if {@link #expireAfterWrite} was already set @throws ArithmeticException for durations greater than +/- approximately 292 years @since 25.0 (but only since 33.3.0 in the Android <a href="https://github.com/google/guava#guava-google-core-libraries-for-java">flavor</a>)
206 Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed after the entry's creation, the most recent replacement of its value, or its last access. Access time is reset by all cache read and write operations (including {@code Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by {@code containsKey(Object)}, nor by operations on the collection-views of {@link Cache#asMap}}. So, for example, iterating through {@code Cache.asMap().entrySet()} does not reset access time for the entries you retrieve. <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long) maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be useful in testing, or to disable caching temporarily without a code change. <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or write operations. Expired entries are cleaned up as part of the routine maintenance described in the class javadoc. @param duration the length of time after an entry is last accessed that it should be automatically removed @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code duration} is negative @throws IllegalStateException if {@link #expireAfterAccess} was already set @throws ArithmeticException for durations greater than +/- approximately 292 years @since 25.0 (but only since 33.3.0 in the Android <a href="https://github.com/google/guava#guava-google-core-libraries-for-java">flavor</a>)
207 Specifies that active entries are eligible for automatic refresh once a fixed duration has elapsed after the entry's creation, or the most recent replacement of its value. The semantics of refreshes are specified in {@link LoadingCache#refresh}, and are performed by calling {@link CacheLoader#reload}. <p>As the default implementation of {@link CacheLoader#reload} is synchronous, it is recommended that users of this method override {@link CacheLoader#reload} with an asynchronous implementation; otherwise refreshes will be performed during unrelated cache read and write operations. <p>Currently automatic refreshes are performed when the first stale request for an entry occurs. The request triggering refresh will make a synchronous call to {@link CacheLoader#reload} to obtain a future of the new value. If the returned future is already complete, it is returned immediately. Otherwise, the old value is returned. <p><b>Note:</b> <i>all exceptions thrown during refresh will be logged and then swallowed</i>. @param duration the length of time after an entry is created that it should be considered stale, and thus eligible for refresh @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code duration} is negative @throws IllegalStateException if {@link #refreshAfterWrite} was already set @throws ArithmeticException for durations greater than +/- approximately 292 years @since 25.0 (but only since 33.3.0 in the Android <a href="https://github.com/google/guava#guava-google-core-libraries-for-java">flavor</a>)
208 Specifies that each key (not value) stored in the cache should be wrapped in a {@link WeakReference} (by default, strong references are used). <p><b>Warning:</b> when this method is used, the resulting cache will use identity ({@code ==}) comparison to determine equality of keys. Its {@link Cache#asMap} view will therefore technically violate the {@link Map} specification (in the same way that {@link IdentityHashMap} does). <p>Entries with keys that have been garbage collected may be counted in {@link Cache#size}, but will never be visible to read or write operations; such entries are cleaned up as part of the routine maintenance described in the class javadoc. @return this {@code CacheBuilder} instance (for chaining) @throws IllegalStateException if the key strength was already set
209 Specifies that each value (not key) stored in the cache should be wrapped in a {@link WeakReference} (by default, strong references are used). <p>Weak values will be garbage collected once they are weakly reachable. This makes them a poor candidate for caching; consider {@link #softValues} instead. <p><b>Note:</b> when this method is used, the resulting cache will use identity ({@code ==}) comparison to determine equality of values. <p>Entries with values that have been garbage collected may be counted in {@link Cache#size}, but will never be visible to read or write operations; such entries are cleaned up as part of the routine maintenance described in the class javadoc. @return this {@code CacheBuilder} instance (for chaining) @throws IllegalStateException if the value strength was already set
210 Specifies that each value (not key) stored in the cache should be wrapped in a {@link SoftReference} (by default, strong references are used). Softly-referenced objects will be garbage-collected in a <i>globally</i> least-recently-used manner, in response to memory demand. <p><b>Warning:</b> in most circumstances it is better to set a per-cache {@linkplain #maximumSize(long) maximum size} instead of using soft references. You should only use this method if you are well familiar with the practical consequences of soft references. <p><b>Note:</b> when this method is used, the resulting cache will use identity ({@code ==}) comparison to determine equality of values. <p>Entries with values that have been garbage collected may be counted in {@link Cache#size}, but will never be visible to read or write operations; such entries are cleaned up as part of the routine maintenance described in the class javadoc. @return this {@code CacheBuilder} instance (for chaining) @throws IllegalStateException if the value strength was already set
211 Specifies that each key (not value) stored in the map should be wrapped in a {@link WeakReference} (by default, strong references are used). <p><b>Warning:</b> when this method is used, the resulting map will use identity ({@code ==}) comparison to determine equality of keys, which is a technical violation of the {@link Map} specification, and may not be what you expect. @throws IllegalStateException if the key strength was already set @see WeakReference
212 Specifies that each value (not key) stored in the map should be wrapped in a {@link WeakReference} (by default, strong references are used). <p>Weak values will be garbage collected once they are weakly reachable. This makes them a poor candidate for caching. <p><b>Warning:</b> when this method is used, the resulting map will use identity ({@code ==}) comparison to determine equality of values. This technically violates the specifications of the methods {@link Map#containsValue containsValue}, {@link ConcurrentMap#remove(Object, Object) remove(Object, Object)} and {@link ConcurrentMap#replace(Object, Object, Object) replace(K, V, V)}, and may not be what you expect. @throws IllegalStateException if the value strength was already set @see WeakReference
213 @since 14.0
214 Ensures that {@code index} specifies a valid <i>element</i> in an array, list or string of size {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive. @param index a user-supplied index identifying an element of an array, list or string @param size the size of that array, list or string @return the value of {@code index} @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size} @throws IllegalArgumentException if {@code size} is negative
215 Ensures that {@code index} specifies a valid <i>position</i> in an array, list or string of size {@code size}. A position index may range from zero to {@code size}, inclusive. <p><b>Java 9 users:</b> consider using {@link java.util.Objects#checkIndex(index, size)} instead. However, note that {@code checkIndex()} throws {@code IndexOutOfBoundsException} when {@code size} is negative, while this method throws {@code IllegalArgumentException}. @param index a user-supplied index identifying a position in an array, list or string @param size the size of that array, list or string @return the value of {@code index} @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size} @throws IllegalArgumentException if {@code size} is negative
216 Ensures that {@code start} and {@code end} specify valid <i>positions</i> in an array, list or string of size {@code size}, and are in order. A position index may range from zero to {@code size}, inclusive. @param start a user-supplied index identifying a starting position in an array, list or string @param end a user-supplied index identifying an ending position in an array, list or string @param size the size of that array, list or string @throws IndexOutOfBoundsException if either index is negative or is greater than {@code size}, or if {@code end} is less than {@code start} @throws IllegalArgumentException if {@code size} is negative
217 Returns a predicate that evaluates to {@code true} if the object being tested {@code equals()} the given target or both are null. <p><b>Discouraged:</b> Prefer using {@code x -> Objects.equals(x, target)}, but note that lambdas do not have human-readable {@link #toString()} representations and are not serializable.
218 Support removal operations when filtering a filtered multimap. Since a filtered multimap has iterators that don't support remove, passing one to the FilteredEntryMultimap constructor would lead to a multimap whose removal operations would fail. This method combines the predicates to avoid that problem.
219 Returns a view of the elements of {@code unfiltered} that satisfy a predicate. The returned multiset is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multiset's iterators, and those of its {@code entrySet()} and {@code elementSet()}, do not support {@code remove()}. However, all other multiset methods supported by {@code unfiltered} are supported by the returned multiset. When given an element that doesn't satisfy the predicate, the multiset's {@code add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multiset, only elements that satisfy the filter will be removed from the underlying multiset. <p>The returned multiset isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multiset's methods, such as {@code size()}, iterate across every element in the underlying multiset and determine which elements satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the returned multiset and use the copy. <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link Iterables#filter(Iterable, Class)} for related functionality.) @since 14.0
220 Returns a splitter that considers any single character matched by the given {@code CharMatcher} to be a separator. For example, {@code Splitter.on(CharMatcher.anyOf(";,")).split("foo,;bar,quux")} returns an iterable containing {@code ["foo", "", "bar", "quux"]}. @param separatorMatcher a {@link CharMatcher} that determines whether a character is a separator @return a splitter, with default settings, that uses this matcher
221 Returns a splitter that divides strings into pieces of the given length. For example, {@code Splitter.fixedLength(2).split("abcde")} returns an iterable containing {@code ["ab", "cd", "e"]}. The last piece can be smaller than {@code length} but will never be empty. <p><b>Note:</b> if {@link #fixedLength} is used in conjunction with {@link #limit}, the final split piece <i>may be longer than the specified fixed length</i>. This is because the splitter will <i>stop splitting when the limit is reached</i>, and just return the final piece as-is. <p><b>Exception:</b> for consistency with separator-based splitters, {@code split("")} does not yield an empty iterable, but an iterable containing {@code ""}. This is the only case in which {@code Iterables.size(split(input))} does not equal {@code IntMath.divide(input.length(), length, CEILING)}. To avoid this behavior, use {@code omitEmptyStrings}. @param length the desired length of pieces after splitting, a positive integer @return a splitter, with default settings, that can split into fixed sized pieces @throws IllegalArgumentException if {@code length} is zero or negative
222 Returns a splitter that behaves equivalently to {@code this} splitter, but automatically removes leading and trailing {@linkplain CharMatcher#whitespace whitespace} from each returned substring; equivalent to {@code trimResults(CharMatcher.whitespace())}. For example, {@code Splitter.on(',').trimResults().split(" a, b ,c ")} returns an iterable containing {@code ["a", "b", "c"]}. @return a splitter with the desired configuration
223 Creates (but does not start) a new stopwatch using {@link System#nanoTime} as its time source. @since 15.0
224 Creates (and starts) a new stopwatch using {@link System#nanoTime} as its time source. @since 15.0
225 Returns the number of bytes in the UTF-8-encoded form of {@code sequence}. For a string, this method is equivalent to {@code string.getBytes(UTF_8).length}, but is more efficient in both time and space. @throws IllegalArgumentException if {@code sequence} contains ill-formed UTF-16 (unpaired surrogates)
226 Invokes {@code executor.}{@link ExecutorService#awaitTermination(long, TimeUnit) awaitTermination(long, TimeUnit)} uninterruptibly with no timeout. @since 30.0
227 Loops continuously, pulling references off the queue and cleaning them up.
228 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableMultimap#builder}.
229 Returns a cache loader that uses {@code function} to load keys, without supporting either reloading or bulk loading. This allows creating a cache loader using a lambda expression. <p>The returned object is serializable if {@code function} is serializable. @param function the function to be used for loading values; must never return {@code null} @return a cache loader that loads values by passing each key to {@code function}
230 Returns a cache loader based on an <i>existing</i> supplier instance. Note that there's no need to create a <i>new</i> supplier just to pass it in here; just subclass {@code CacheLoader} and implement {@link #load load} instead. <p>The returned object is serializable if {@code supplier} is serializable. @param supplier the supplier to be used for loading values; must never return {@code null} @return a cache loader that loads values by calling {@link Supplier#get}, irrespective of the key
231 Computes or retrieves the values corresponding to {@code keys}. This method is called by {@link LoadingCache#getAll}. <p>If the returned map doesn't contain all requested {@code keys} then the entries it does contain will be cached, but {@code getAll} will throw an exception. If the returned map contains extra keys not present in {@code keys} then all returned entries will be cached, but only the entries for {@code keys} will be returned from {@code getAll}. <p>This method should be overridden when bulk retrieval is significantly more efficient than many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls to {@link LoadingCache#get} if this method is not overridden. @param keys the unique, non-null keys whose values should be loaded @return a map from each key in {@code keys} to the value associated with that key; <b>may not contain null values</b> @throws Exception if unable to load the result @throws InterruptedException if this method is interrupted. {@code InterruptedException} is treated like any other {@code Exception} in all respects except that, when it is caught, the thread's interrupt status is set @since 11.0
232 Returns the ratio of cache requests which were hits. This is defined as {@code hitCount / requestCount}, or {@code 1.0} when {@code requestCount == 0}. Note that {@code hitRate + missRate =~ 1.0}.
233 Returns the ratio of cache requests which were misses. This is defined as {@code missCount / requestCount}, or {@code 0.0} when {@code requestCount == 0}. Note that {@code hitRate + missRate =~ 1.0}. Cache misses include all requests which weren't cache hits, including requests which resulted in either successful or failed loading attempts, and requests which waited for other threads to finish loading. It is thus the case that {@code missCount >= loadSuccessCount + loadExceptionCount}. Multiple concurrent misses for the same key will result in a single load operation.
234 Constructor for use by subclasses.
235 Constructor for use by subclasses.
236 Constructor for use by subclasses.
237 Constructor for use by subclasses.
238 Constructor for use by subclasses.
239 Constructor for use by subclasses.
240 Private constructor for inverse bimap.
241 Constructor for use by subclasses.
242 Constructor for use by subclasses.
243 Creates a new map.
244 Constructor for use by subclasses.
245 Constructor for use by subclasses.
246 Constructor for use by subclasses.
247 Constructor for use by subclasses.
248 Creates a new entry. @param segment to create the entry for @param key of the entry @param hash of the key @param next entry in the same bucket
249 Creates a new entry. @param segment to create the entry for @param key of the entry @param hash of the key @param next entry in the same bucket
250 Returns the final value of the associated {@link ClosingFuture}, or throws an exception as {@link Future#get()} would. <p>Because the asynchronous operation has already completed, this method is synchronous and returns immediately. @throws CancellationException if the computation was cancelled @throws ExecutionException if the computation threw an exception
251 Performs routine cleanup following a write.
252 Creates a reference for the given value according to this value strength.
253 Creates a reference for the given value according to this value strength.
254 Creates a reference for the given value according to this value strength.
255 Records the relative order in which this read was performed by adding {@code entry} to the recency queue. At write-time, or when the queue is full past the threshold, the queue will be drained and the entries therein processed. <p>Note: locked reads should use {@link #recordLockedRead}.
256 Updates the eviction metadata that {@code entry} was just read. This currently amounts to adding {@code entry} to relevant eviction lists. <p>Note: this method should only be called under lock, as it directly manipulates the eviction queues. Unlocked reads should use {@link #recordRead}.
257 Updates eviction metadata that {@code entry} was just written. This currently amounts to adding {@code entry} to relevant eviction lists.
258 Gets the value from an entry. Returns null if the entry is invalid, partially-collected, loading, or expired. Unlike {@link Segment#getLiveValue} this method does not attempt to clean up stale entries. As such it should only be called outside a segment context, such as during iteration.
259 Returns the number of elements in {@code iterable}.
260 A sensible, albeit inefficient, definition of {@link #size} in terms of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #size} to forward to this implementation. @since 7.0
261 Returns a byte array containing the bytes from the buffers already in {@code bufs} (which have a total combined length of {@code totalLen} bytes) followed by all bytes remaining in the given input stream.
262 Specifies the delegate maps going in each direction. Called by the constructor and by subclasses during deserialization.
263 Returns the whole range relative to the specified comparator.
264 Returns everything above the endpoint relative to the specified comparator, with the specified endpoint behavior.
265 Returns everything below the endpoint relative to the specified comparator, with the specified endpoint behavior.
266 Returns everything between the endpoints relative to the specified comparator, with the specified endpoint behavior.
267 Returns the intersection of the two ranges, or an empty range if their intersection is empty.
268 Returns the next element in the iteration without advancing the iteration, according to the contract of {@link PeekingIterator#peek()}. <p>Implementations of {@code AbstractIterator} that wish to expose this functionality should implement {@code PeekingIterator}.
269 {@inheritDoc} <p>The returned collection is immutable.
270 If the delegate changed since the iterator was created, the iterator is no longer valid.
271 Stores a key-value pair in the multimap. @param key key to store in the multimap @param value value to store in the multimap @return {@code true} always
272 Stores a key-value pair in the multimap. @param key key to store in the multimap @param value value to store in the multimap @return {@code true} if the method increased the size of the multimap, or {@code false} if the multimap already contained the key-value pair
273 {@inheritDoc} <p>Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a {@link List}, instead of the {@link Collection} specified in the {@link Multimap} interface.
274 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.
275 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.
276 @serialData the number of distinct keys, and then for each distinct key: the first key, the number of values for that key, and the key's values, followed by successive keys and values from the entries() ordering
277 An implementation of {@link Collection#toString()}.
278 An implementation of {@link Map#toString}.
279 Creates an {@code ArrayList} instance to hold {@code estimatedSize} elements, <i>plus</i> an unspecified amount of padding; you almost certainly mean to call {@link #newArrayListWithCapacity} (see that method for further advice on usage). <p><b>Note:</b> This method will soon be deprecated. Even in the rare case that you do want some amount of padding, it's best if you choose your desired amount explicitly. @param estimatedSize an estimate of the eventual {@link List#size()} of the new list @return a new, empty {@code ArrayList}, sized appropriately to hold the estimated number of elements @throws IllegalArgumentException if {@code estimatedSize} is negative
280 Creates a {@code HashMap} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without growth. This behavior cannot be broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the method isn't inadvertently <i>oversizing</i> the returned map. @param expectedSize the number of entries you expect to add to the returned map @return a new, empty {@code HashMap} with enough capacity to hold {@code expectedSize} entries without resizing @throws IllegalArgumentException if {@code expectedSize} is negative
281 Creates a {@code LinkedHashMap} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without growth. This behavior cannot be broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the method isn't inadvertently <i>oversizing</i> the returned map. @param expectedSize the number of entries you expect to add to the returned map @return a new, empty {@code LinkedHashMap} with enough capacity to hold {@code expectedSize} entries without resizing @throws IllegalArgumentException if {@code expectedSize} is negative @since 19.0
282 Returns a new hash set using the smallest initial table size that can hold {@code expectedSize} elements without resizing. Note that this is not what {@link HashSet#HashSet(int)} does, but it is what most users want and expect it to do. <p>This behavior can't be broadly guaranteed, but has been tested with OpenJDK 1.7 and 1.8. @param expectedSize the number of elements you expect to add to the returned set @return a new, empty hash set with enough capacity to hold {@code expectedSize} elements without resizing @throws IllegalArgumentException if {@code expectedSize} is negative
283 Creates a {@code LinkedHashSet} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without growth. This behavior cannot be broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the method isn't inadvertently <i>oversizing</i> the returned set. @param expectedSize the number of elements you expect to add to the returned set @return a new, empty {@code LinkedHashSet} with enough capacity to hold {@code expectedSize} elements without resizing @throws IllegalArgumentException if {@code expectedSize} is negative @since 11.0
284 Uses an {@link ArrayList} to store value collections.
285 Uses a hash-based {@code Set} to store value collections.
286 Uses an insertion-ordered hash-based {@code Set} to store value collections.
287 Uses a hash table to map keys to value collections.
288 Uses a hash table to map keys to value collections. <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link Multimap#asMap()} will iterate through the keys in the order that they were first added to the multimap, save that if all values associated with a key are removed and then the key is added back into the multimap, that key will come last in the key iteration order.
289 Returns an immutable multiset entry with the specified element and count. The entry will be serializable if {@code e} is. @param e the element to be associated with the returned entry @param n the count to be associated with the returned entry @throws IllegalArgumentException if {@code n} is negative
290 A sensible definition of {@link #setCount(Object, int)} in terms of {@link #count(Object)}, {@link #add(Object, int)}, and {@link #remove(Object, int)}. {@link #entrySet()}. If you override any of these methods, you may wish to override {@link #setCount(Object, int)} to forward to this implementation. @since 7.0
291 A sensible definition of {@link #setCount(Object, int, int)} in terms of {@link #count(Object)} and {@link #setCount(Object, int)}. If you override either of these methods, you may wish to override {@link #setCount(Object, int, int)} to forward to this implementation. @since 7.0
292 Returns the hash code for this multimap. <p>The hash code of a multimap is defined as the hash code of the map view, as returned by {@link Multimap#asMap}. @see Map#hashCode
293 Returns a string representation of the multimap, generated by calling {@code toString} on the map returned by {@link Multimap#asMap}. @return a string representation of the multimap
294 {@inheritDoc} <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the current count of that element in the multiset, as opposed to the count at the time the entry was retrieved.
295 {@inheritDoc} <p>This implementation returns the hash code of {@link Multiset#entrySet()}.
296 {@inheritDoc} <p>This implementation returns the result of invoking {@code toString} on {@link Multiset#entrySet()}.
297 A sensible definition of {@link #firstEntry} in terms of the {@code iterator()} of {@link #entrySet}. If you override {@code entrySet}, you may wish to override {@code firstEntry} to forward to this implementation.
298 @since 12.0
299 @since 12.0
300 Creates an empty {@code TreeRangeSet} instance.
301 Returns {@code true} if {@code value} is within the bounds of this range. For example, on the range {@code [0..2)}, {@code contains(1)} returns {@code true}, while {@code contains(2)} returns {@code false}.
302 Returns {@code true} if {@code elements} is a sorted collection using an ordering equivalent to {@code comparator}.
303 {@inheritDoc} <p>If {@code table} is an {@code ArrayTable}, its null values will be stored in this table, possibly replacing values that were previously non-null. @throws NullPointerException if {@code table} has a null key @throws IllegalArgumentException if any of the provided table's row keys or column keys is not in {@link #rowKeySet()} or {@link #columnKeySet()}
304 Returns an unmodifiable set of all row key / column key / value triplets. Changes to the table will update the returned set. <p>The returned set's iterator traverses the mappings with the first row key, the mappings with the second row key, and so on. <p>The value in the returned cells may change if the table subsequently changes. @return set of table cells consisting of row key / column key / value triplets
305 {@inheritDoc} <p>The set's iterator traverses the mappings for the first row, the mappings for the second row, and so on. <p>Each cell is an immutable snapshot of a row key / column key / value mapping, taken at the time the cell is returned by a method call to the set or its iterator.
306 Returns an unmodifiable collection of all values, which may contain duplicates. Changes to the table will update the returned collection. <p>The returned collection's iterator traverses the values of the first row key, the values of the second row key, and so on. @return collection of values
307 {@inheritDoc} <p>The collection's iterator traverses the values for the first row, the values for the second row, and so on.
308 Returns a new ordering on {@code F} which orders elements by first applying a function to them, then comparing those results using {@code this}. For example, to compare objects by their string forms, in a case-insensitive manner, use: {@snippet : Ordering.from(String.CASE_INSENSITIVE_ORDER) .onResultOf(Functions.toStringFunction()) } <p><b>Java 8+ users:</b> Use {@code Comparator.comparing(function, thisComparator)} instead (you can omit the comparator if it is the natural order).
309 Returns an ordering based on an <i>existing</i> comparator instance. Note that it is unnecessary to create a <i>new</i> anonymous inner class implementing {@code Comparator} just to pass it in here. Instead, simply subclass {@code Ordering} and implement its {@code compare} method directly. <p>The returned object is serializable if {@code comparator} is serializable. <p><b>Java 8+ users:</b> this class is now obsolete as explained in the class documentation, so there is no need to use this method. @param comparator the comparator that defines the order @return comparator itself if it is already an {@code Ordering}; otherwise an ordering that wraps that comparator
310 Returns an ordering which first uses the ordering {@code this}, but which in the event of a "tie", then delegates to {@code secondaryComparator}. For example, to sort a bug list first by status and second by priority, you might use {@code byStatus.compound(byPriority)}. For a compound ordering with three or more components, simply chain multiple calls to this method. <p>An ordering produced by this method, or a chain of calls to this method, is equivalent to one created using {@link Ordering#compound(Iterable)} on the same component comparators. <p>The returned object is serializable if this object and {@code secondaryComparator} are both serializable. <p><b>Java 8+ users:</b> Use {@code thisComparator.thenComparing(secondaryComparator)} instead. Depending on what {@code secondaryComparator} is, one of the other overloads of {@code thenComparing} may be even more useful.
311 Returns an immutable cell with the specified row key, column key, and value. <p>The returned cell is serializable. @param rowKey the row key to be associated with the returned cell @param columnKey the column key to be associated with the returned cell @param value the value to be associated with the returned cell
312 Returns {@code true} if the provided keys are among the keys provided when the table was constructed.
313 Verifies that {@code key} and {@code value} are non-null, and returns a new immutable entry with those values. <p>A call to {@link Entry#setValue} on the returned entry will always throw {@link UnsupportedOperationException}.
314 Makes an entry usable internally by a new ImmutableMap without rereading its contents.
315 Adds an entry to the built multimap. @since 11.0
316 Adds a key-value mapping to the built multimap if it is not already present.
317 Resizes the entries storage if necessary.
318 Creates a fresh entry with the specified object at the specified position in the entry arrays.
319 Resizes the entries storage if necessary.
320 Creates a fresh entry with the specified object at the specified position in the entry arrays.
321 Handle lazy allocation of arrays.
322 Handle lazy allocation of arrays.
323 Returns {@code true} if the bounds of {@code other} do not extend outside the bounds of this range. Examples: <ul> <li>{@code [3..6]} encloses {@code [4..5]} <li>{@code (3..6)} encloses {@code (3..6)} <li>{@code [3..6]} encloses {@code [4..4)} (even though the latter is empty) <li>{@code (3..6]} does not enclose {@code [3..6]} <li>{@code [4..5]} does not enclose {@code (3..6)} (even though it contains every value contained by the latter range) <li>{@code [3..6]} does not enclose {@code (1..1]} (even though it contains every value contained by the latter range) </ul> <p>Note that if {@code a.encloses(b)}, then {@code b.contains(v)} implies {@code a.contains(v)}, but as the last two examples illustrate, the converse is not always true. <p>Being reflexive, antisymmetric and transitive, the {@code encloses} relation defines a <i>partial order</i> over ranges. There exists a unique {@linkplain Range#all maximal} range according to this relation, and also numerous {@linkplain #isEmpty minimal} ranges. Enclosure also implies {@linkplain #isConnected connectedness}.
324 Returns {@code true} if there exists a (possibly empty) range which is {@linkplain #encloses enclosed} by both this range and {@code other}. <p>For example, <ul> <li>{@code [2, 4)} and {@code [5, 7)} are not connected <li>{@code [2, 4)} and {@code [3, 5)} are connected, because both enclose {@code [3, 4)} <li>{@code [2, 4)} and {@code [4, 6)} are connected, because both enclose the empty range {@code [4, 4)} </ul> <p>Note that this range and {@code other} have a well-defined {@linkplain #span union} and {@linkplain #intersection intersection} (as a single, possibly-empty range) if and only if this method returns {@code true}. <p>The connectedness relation is both reflexive and symmetric, but does not form an {@linkplain Equivalence equivalence relation} as it is not transitive. <p>Note that certain discrete ranges are not considered connected, even though there are no elements "between them." For example, {@code [3, 5]} is not considered connected to {@code [6, 10]}. In these cases, it may be desirable for both input ranges to be preprocessed with {@link #canonical(DiscreteDomain)} before testing for connectedness.
325 @serialData number of distinct keys, and then for each distinct key: the key, the number of values for that key, and the key's values
326 Returns a new builder for an immutable range map.
327 Returns a new builder for an immutable range set.
328 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder#Builder() ImmutableTable.Builder()} constructor.
329 Scope the return type to {@link UnmodifiableIterator} to ensure this is an unmodifiable view. @since 20.0 (present with return type {@link Iterator} since 2.0)
330 Returns the number of elements in the specified iterable that equal the specified object. This implementation avoids a full iteration when the iterable is a {@link Multiset} or {@link Set}. <p><b>Java 8+ users:</b> In most cases, the {@code Stream} equivalent of this method is {@code stream.filter(element::equals).count()}. If {@code element} might be null, use {@code stream.filter(Predicate.isEqual(element)).count()} instead. @see java.util.Collections#frequency(Collection, Object) Collections.frequency(Collection, Object)
331 A sensible, albeit inefficient, definition of {@link #containsKey} in terms of the {@code iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #containsKey} to forward to this implementation. @since 7.0
332 A sensible definition of {@link #containsValue} in terms of the {@code iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #containsValue} to forward to this implementation. @since 7.0
333 A sensible definition of {@link #lowerKey} in terms of {@code lowerEntry}. If you override {@link #lowerEntry}, you may wish to override {@code lowerKey} to forward to this implementation.
334 A sensible definition of {@link #floorKey} in terms of {@code floorEntry}. If you override {@code floorEntry}, you may wish to override {@code floorKey} to forward to this implementation.
335 A sensible definition of {@link #ceilingKey} in terms of {@code ceilingEntry}. If you override {@code ceilingEntry}, you may wish to override {@code ceilingKey} to forward to this implementation.
336 A sensible definition of {@link #higherKey} in terms of {@code higherEntry}. If you override {@code higherEntry}, you may wish to override {@code higherKey} to forward to this implementation.
337 A sensible definition of {@link #firstKey} in terms of {@code firstEntry}. If you override {@code firstEntry}, you may wish to override {@code firstKey} to forward to this implementation.
338 A sensible definition of {@link #lastKey} in terms of {@code lastEntry}. If you override {@code lastEntry}, you may wish to override {@code lastKey} to forward to this implementation.
339 A sensible definition of {@link #lastEntry} in terms of the {@code iterator()} of the {@link #entrySet} of {@link #descendingMap}. If you override {@code descendingMap}, you may wish to override {@code lastEntry} to forward to this implementation.
340 A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of the {@code entrySet} of {@code descendingMap}. If you override {@code descendingMap}, you may wish to override {@code pollFirstEntry} to forward to this implementation.
341 A sensible definition of {@link #descendingKeySet} as the {@code navigableKeySet} of {@link #descendingMap}. (The {@link StandardDescendingMap} implementation implements {@code navigableKeySet} on its own, so as not to cause an infinite loop.) If you override {@code descendingMap}, you may wish to override {@code descendingKeySet} to forward to this implementation.
342 A sensible definition of {@link #subMap(Object, Object)} in terms of {@link #subMap(Object, boolean, Object, boolean)}. If you override {@code subMap(K, boolean, K, boolean)}, you may wish to override {@code subMap} to forward to this implementation.
343 A sensible definition of {@link #lowerEntry} in terms of the {@code lastEntry()} of {@link #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code lowerEntry} to forward to this implementation.
344 A sensible definition of {@link #floorEntry} in terms of the {@code lastEntry()} of {@link #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code floorEntry} to forward to this implementation.
345 A sensible definition of {@link #headMap(Object)} in terms of {@link #headMap(Object, boolean)}. If you override {@code headMap(K, boolean)}, you may wish to override {@code headMap} to forward to this implementation.
346 A sensible definition of {@link #ceilingEntry} in terms of the {@code firstEntry()} of {@link #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code ceilingEntry} to forward to this implementation.
347 A sensible definition of {@link #higherEntry} in terms of the {@code firstEntry()} of {@link #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code higherEntry} to forward to this implementation.
348 A sensible definition of {@link #tailMap(Object)} in terms of {@link #tailMap(Object, boolean)}. If you override {@code tailMap(K, boolean)}, you may wish to override {@code tailMap} to forward to this implementation.
349 A sensible definition of {@link #subMultiset(Object, BoundType, Object, BoundType)} in terms of {@link #headMultiset(Object, BoundType) headMultiset} and {@link #tailMultiset(Object, BoundType) tailMultiset}. <p>If you override either of these methods, you may wish to override {@link #subMultiset(Object, BoundType, Object, BoundType)} to forward to this implementation.
350 Creates an empty {@code HashBasedTable}.
351 @serialData the {@code Class<E>} for the enum type, the number of distinct elements, the first element, its count, the second element, its count, and so on
352 Moves the last entry in the entry array into {@code dstIndex}, and nulls out its old position.
353 Moves the last entry in the entry array into {@code dstIndex}, and nulls out its old position.
354 Returns {@code true} if this BiMap contains an entry whose value is equal to {@code value} (or, equivalently, if this inverse view contains a key that is equal to {@code value}). <p>Due to the property that values in a BiMap are unique, this will tend to execute in faster-than-linear time. @param value the object to search for in the values of this BiMap @return true if a mapping exists from a key to the specified value
355 Returns a new builder, expecting the specified number of entries to be added. <p>If {@code expectedSize} is exactly the number of entries added to the builder before {@link Builder#build} is called, the builder is likely to perform better than an unsized {@link #builder()} would have. <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to, but not exactly, the number of entries added to the builder. @since 23.1
356 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableBiMap#builder}.
357 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
358 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableSortedMap#orderedBy}.
359 Returns an immutable bimap containing a single entry.
360 Adds e to the insertion-order array of deduplicated elements. Calls ensureCapacity.
361 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableList#builder}.
362 Returns a new builder, expecting the specified number of elements to be added. <p>If {@code expectedSize} is exactly the number of elements added to the builder before {@link Builder#build} is called, the builder is likely to perform better than an unsized {@link #builder()} would have. <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to, but not exactly, the number of elements added to the builder. @since 23.1
363 Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate elements (only the first duplicate element is added). @param elements the elements to add to the {@code ImmutableSortedSet} @return this {@code Builder} object @throws NullPointerException if {@code elements} contains a null element
364 Adds each element of {@code elements} to the {@code ImmutableSortedMultiset}. @param elements the elements to add to the {@code ImmutableSortedMultiset} @return this {@code Builder} object @throws NullPointerException if {@code elements} is null or contains a null element
365 Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate elements (only the first duplicate element is added). @param elements the elements to add to the {@code ImmutableSortedSet} @return this {@code Builder} object @throws NullPointerException if {@code elements} contains a null element
366 Returns a serializable form of this object. Non-public subclasses should not override this method. Publicly-accessible subclasses must override this method and should return a subclass of SerializedForm whose readResolve() method returns objects of the subclass type.
367 Returns an immutable table containing a single cell.
368 Returns a string representation of this fluent iterable, with the format {@code [e1, e2, ..., en]}. <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.joining(", ", "[", "]"))} or (less efficiently) {@code stream.collect(Collectors.toList()).toString()}.
369 Stores a collection of values with the same key in the built multimap. @throws NullPointerException if {@code key}, {@code values}, or any element in {@code values} is null. The builder is left in an invalid state.
370 Returns the single element contained in {@code iterable}, or {@code defaultValue} if the iterable is empty. <p><b>Java 8+ users:</b> the {@code Stream} equivalent to this method is {@code stream.collect(MoreCollectors.toOptional()).orElse(defaultValue)}. @throws IllegalArgumentException if the iterator contains multiple elements
371 Returns the last element of {@code iterable} or {@code defaultValue} if the iterable is empty. If {@code iterable} is a {@link List} with {@link RandomAccess} support, then this operation is guaranteed to be {@code O(1)}. <p><b>{@code Stream} equivalent:</b> {@code Streams.findLast(stream).orElse(defaultValue)} <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list), consider using {@code collection.getLast()} instead. Note that if the collection is empty, {@code getLast()} throws a {@code NoSuchElementException}, while this method returns the default value. @param defaultValue the value to return if {@code iterable} is empty @return the last element of {@code iterable} or the default value @since 3.0
372 Stores a key-value pair in the multimap. @param key key to store in the multimap @param value value to store in the multimap @return {@code true} always
373 Returns consecutive {@linkplain List#subList(int, int) sublists} of a list, each of the same size (the final list may be smaller). For example, partitioning a list containing {@code [a, b, c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer list containing two inner lists of three and two elements, all in the original order. <p>The outer list is unmodifiable, but reflects the latest state of the source list. The inner lists are sublist views of the original list, produced on demand using {@link List#subList(int, int)}, and are subject to all the usual caveats about modification as explained in that API. @param list the list to return consecutive sublists of @param size the desired size of each sublist (the last may be smaller) @return a list of consecutive sublists @throws IllegalArgumentException if {@code partitionSize} is nonpositive
374 A sensible default implementation of {@link #indexOf}, in terms of {@link #listIterator()}. If you override {@link #listIterator()}, you may wish to override {@link #indexOf} to forward to this implementation. @since 7.0
375 A sensible default implementation of {@link #lastIndexOf}, in terms of {@link #listIterator(int)}. If you override {@link #listIterator(int)}, you may wish to override {@link #lastIndexOf} to forward to this implementation. @since 7.0
376 Performs routine cleanup prior to executing a write. This should be called every time a write thread acquires the segment lock, immediately after acquiring the lock.
377 Returns a new, empty {@link TreeRangeMap}.
378 Returns the index of minimum value between {@code index} and {@code index + len}, or {@code -1} if {@code index} is greater than {@code size}.
379 Returns the index of the max element.
380 Retrieves, but does not remove, the least element of this queue, or returns {@code null} if the queue is empty.
381 Bubbles a value from {@code index} up the levels of this heap, and returns the index the element ended up at.
382 A sensible definition of {@link #iterator} in terms of {@link #entrySet} and {@link #remove(Object)}. If you override either of these methods, you may wish to override {@link #iterator} to forward to this implementation. @since 7.0
383 Returns a new array that prepends {@code element} to {@code array}. @param element the element to prepend to the front of {@code array} @param array the array of elements to append @return an array whose size is one larger than {@code array}, with {@code element} occupying the first position, and the elements of {@code array} occupying the remaining elements.
384 Returns an array containing all of the elements in the specified collection; the runtime type of the returned array is that of the specified array. If the collection fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of the specified collection. <p>If the collection fits in the specified array with room to spare (i.e., the array has more elements than the collection), the element in the array immediately following the end of the collection is set to {@code null}. This is useful in determining the length of the collection <i>only</i> if the caller knows that the collection does not contain any null elements. <p>This method returns the elements in the order they are returned by the collection's iterator. <p>TODO(kevinb): support concurrently modified collections? @param c the collection for which to return an array of elements @param array the array in which to place the collection elements @throws ArrayStoreException if the runtime type of the specified array is not a supertype of the runtime type of every element in the specified collection
385 Returns the least of the specified values according to this ordering. If there are multiple least values, the first of those is returned. <p><b>Java 8+ users:</b> If {@code iterable} is a {@link Collection}, use {@code Collections.min(collection, thisComparator)} instead. Otherwise, use {@code Streams.stream(iterable).min(thisComparator).get()} instead. Note that these alternatives do not guarantee which tied minimum element is returned. @param iterable the iterable whose minimum element is to be determined @throws NoSuchElementException if {@code iterable} is empty @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this ordering.
386 Returns the greatest of the specified values according to this ordering. If there are multiple greatest values, the first of those is returned. <p><b>Java 8+ users:</b> If {@code iterable} is a {@link Collection}, use {@code Collections.max(collection, thisComparator)} instead. Otherwise, use {@code Streams.stream(iterable).max(thisComparator).get()} instead. Note that these alternatives do not guarantee which tied maximum element is returned. @param iterable the iterable whose maximum element is to be determined @throws NoSuchElementException if {@code iterable} is empty @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this ordering.
387 Returns a shorthand representation of the contents such as {@code "[1..100]"}.
388 Converts a Range to a GeneralRange.
389 Returns a view of the portion of {@code map} whose keys are contained by {@code range}. <p>This method delegates to the appropriate methods of {@link NavigableMap} (namely {@link NavigableMap#subMap(Object, boolean, Object, boolean) subMap()}, {@link NavigableMap#tailMap(Object, boolean) tailMap()}, and {@link NavigableMap#headMap(Object, boolean) headMap()}) to actually construct the view. Consult these methods for a full description of the returned view's behavior. <p><b>Warning:</b> {@code Range}s always represent a range of values using the values' natural ordering. {@code NavigableMap} on the other hand can specify a custom ordering via a {@link Comparator}, which can violate the natural ordering. Using this method (or in general using {@code Range}) with unnaturally-ordered maps can lead to unexpected and undefined behavior. @since 20.0
390 Returns a view of the portion of {@code set} whose elements are contained by {@code range}. <p>This method delegates to the appropriate methods of {@link NavigableSet} (namely {@link NavigableSet#subSet(Object, boolean, Object, boolean) subSet()}, {@link NavigableSet#tailSet(Object, boolean) tailSet()}, and {@link NavigableSet#headSet(Object, boolean) headSet()}) to actually construct the view. Consult these methods for a full description of the returned view's behavior. <p><b>Warning:</b> {@code Range}s always represent a range of values using the values' natural ordering. {@code NavigableSet} on the other hand can specify a custom ordering via a {@link Comparator}, which can violate the natural ordering. Using this method (or in general using {@code Range}) with unnaturally-ordered sets can lead to unexpected and undefined behavior. @since 20.0
391 {@inheritDoc} <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link Table} interface.
392 Returns a synchronized (thread-safe) queue backed by the specified queue. In order to guarantee serial access, it is critical that <b>all</b> access to the backing queue is accomplished through the returned queue. <p>It is imperative that the user manually synchronize on the returned queue when accessing the queue's iterator: {@snippet : Queue<E> queue = Queues.synchronizedQueue(MinMaxPriorityQueue.<E>create()); ... queue.add(element); // Needn't be in synchronized block ... synchronized (queue) { // Must synchronize on queue! Iterator<E> i = queue.iterator(); // Must be in synchronized block while (i.hasNext()) { foo(i.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>The returned queue will be serializable if the specified queue is serializable. @param queue the queue to be wrapped in a synchronized view @return a synchronized view of the specified queue @since 14.0
393 Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe range. If {@code safeMax < safeMin} then no characters are considered safe. This initializer is useful when explicit instances of ArrayBasedEscaperMap are used to allow the sharing of large replacement mappings. <p>If a character has no mapped replacement then it is checked against the safe range. If it lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed. @param escaperMap the mapping of characters to be escaped @param safeMin the lowest character value in the safe range @param safeMax the highest character value in the safe range
394 Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified safe range. If {@code safeMax < safeMin} then no code points are considered safe. This initializer is useful when explicit instances of ArrayBasedEscaperMap are used to allow the sharing of large replacement mappings. <p>If a code point has no mapped replacement then it is checked against the safe range. If it lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed. @param escaperMap the map of replacements @param safeMin the lowest character value in the safe range @param safeMax the highest character value in the safe range @param unsafeReplacement the default replacement for unsafe characters or null if no default replacement is required
395 Constructs a percent escaper with the specified safe characters and optional handling of the space character. <p>Not that it is allowed, but not necessarily desirable to specify {@code %} as a safe character. This has the effect of creating an escaper which has no well-defined inverse but it can be useful when escaping additional characters. @param safeChars a non-null string specifying additional safe characters for this escaper (the ranges 0..9, a..z and A..Z are always safe and should not be specified here) @param plusForSpace true if ASCII space should be escaped to {@code +} rather than {@code %20} @throws IllegalArgumentException if any of the parameters were invalid
396 Returns the escaped form of a given literal string. @param string the literal string to be escaped @return the escaped form of {@code string} @throws NullPointerException if {@code string} is null
397 Creates a {@code Subscriber} for {@code method} on {@code listener}.
398 Returns a string representation of this graph.
399 An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and {@link #successors(Object)}.
400 An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and {@link #successors(Object)}.
401 Equivalent to {@code putLong(Double.doubleToRawLongBits(d))}.
402 Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link BloomFilter} with false positive probability 3%. <p>Note that if the {@code Collector} receives significantly more elements than specified, the resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive probability. <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>} is. <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since {@link #equals} also relies on object identity of funnels. @param funnel the funnel of T's that the constructed {@code BloomFilter} will use @param expectedInsertions the number of expected insertions to the constructed {@code BloomFilter}; must be positive @return a {@code Collector} generating a {@code BloomFilter} of the received elements @since 23.0 (but only since 33.4.0 in the Android flavor)
403 Returns the probability that {@linkplain #mightContain(Object)} will erroneously return {@code true} for an object that has not actually been put in the {@code BloomFilter}. <p>Ideally, this number should be close to the {@code fpp} parameter passed in {@linkplain #create(Funnel, int, double)}, or smaller. If it is significantly higher, it is usually the case that too many elements (more than expected) have been put in the {@code BloomFilter}, degenerating it. @since 14.0 (since 11.0 as expectedFalsePositiveProbability())
404 Determines whether a given Bloom filter is compatible with this Bloom filter. For two Bloom filters to be compatible, they must: <ul> <li>not be the same instance <li>have the same number of hash functions <li>have the same bit size <li>have the same strategy <li>have equal funnels </ul> @param that The Bloom filter to check for compatibility. @since 15.0
405 Returns a string representation of x, where x is treated as unsigned. @since 13.0
406 Combines this Bloom filter with another Bloom filter by performing a bitwise OR of the underlying data. The mutations happen to <b>this</b> instance. Callers must ensure the Bloom filters are appropriately sized to avoid saturating them. @param that The Bloom filter to combine this Bloom filter with. It is not mutated. @throws IllegalArgumentException if {@code isCompatible(that) == false} @since 15.0
407 Creates a {@code HashCode} from a byte array. The array is <i>not</i> copied defensively, so it must be handed-off so as to preserve the immutability contract of {@code HashCode}.
408 Creates a 32-bit {@code HashCode} representation of the given int value. The underlying bytes are interpreted in little endian order. @since 15.0 (since 12.0 in HashCodes)
409 Creates a 64-bit {@code HashCode} representation of the given long value. The underlying bytes are interpreted in little endian order. @since 15.0 (since 12.0 in HashCodes)
410 Returns the value of this {@code UnsignedInteger} as a {@code float}, analogous to a widening primitive conversion from {@code int} to {@code float}, and correctly rounded.
411 Returns the value of this {@code UnsignedInteger} as a {@code double}, analogous to a widening primitive conversion from {@code int} to {@code double}, and correctly rounded.
412 Returns the value of this {@code UnsignedInteger} as a {@link BigInteger}.
413 Returns a general-purpose, <b>temporary-use</b>, non-cryptographic hash function. The algorithm the returned function implements is unspecified and subject to change without notice. <p><b>Warning:</b> a new random seed for these functions is chosen each time the {@code Hashing} class is loaded. <b>Do not use this method</b> if hash codes may escape the current process in any way, for example being sent over RPC, or saved to disk. For a general-purpose, non-cryptographic hash function that will never change behavior, we suggest {@link #murmur3_128}. <p>Repeated calls to this method on the same loaded {@code Hashing} class, using the same value for {@code minimumBits}, will return identically-behaving {@link HashFunction} instances. @param minimumBits a positive integer. This can be arbitrarily large. The returned {@link HashFunction} instance may use memory proportional to this integer. @return a hash function, described above, that produces hash codes of length {@code minimumBits} or greater
414 Assigns to {@code hashCode} a "bucket" in the range {@code [0, buckets)}, in a uniform manner that minimizes the need for remapping as {@code buckets} grows. That is, {@code consistentHash(h, n)} equals: <ul> <li>{@code n - 1}, with approximate probability {@code 1/n} <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n}) </ul> <p>This method is suitable for the common use case of dividing work among buckets that meet the following conditions: <ul> <li>You want to assign the same fraction of inputs to each bucket. <li>When you reduce the number of buckets, you can accept that the most recently added buckets will be removed first. More concretely, if you are dividing traffic among tasks, you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and {@code consistentHash} will handle it. If, however, you are dividing traffic among servers {@code alpha}, {@code bravo}, and {@code charlie} and you occasionally need to take each of the servers offline, {@code consistentHash} will be a poor fit: It provides no way for you to specify which of the three buckets is disappearing. Thus, if your buckets change from {@code [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will assign all the old {@code alpha} traffic to {@code bravo} and all the old {@code bravo} traffic to {@code charlie}, rather than letting {@code bravo} keep its traffic. </ul> <p>See the <a href="http://en.wikipedia.org/wiki/Consistent_hashing">Wikipedia article on consistent hashing</a> for more information.
415 Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the MD5 (128 hash bits) hash function and the given secret key. <p>If you are designing a new system that needs HMAC, prefer {@link #hmacSha256} or other future-proof algorithms <a href="https://datatracker.ietf.org/doc/html/rfc6151#section-2.3">over {@code hmacMd5}</a>. @param key the secret key @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC @since 20.0
416 Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-1 (160 hash bits) hash function and the given secret key. @param key the secret key @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC @since 20.0
417 Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-256 (256 hash bits) hash function and the given secret key. @param key the secret key @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC @since 20.0
418 Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-512 (512 hash bits) hash function and the given secret key. @param key the secret key @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC @since 20.0
419 Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. <p>Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream. @param sources the sources to concatenate @return a {@code ByteSource} containing the concatenated data @since 15.0
420 Concatenates multiple {@link CharSource} instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. <p>Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream. @param sources the sources to concatenate @return a {@code CharSource} containing the concatenated data @since 15.0
421 Returns a new {@link ByteArrayDataInput} instance to read from the {@code bytes} array from the beginning.
422 Returns a new {@link ByteArrayDataOutput} instance with a default size.
423 Returns a new {@link ByteArrayDataOutput} instance sized to hold {@code size} bytes before resizing. @throws IllegalArgumentException if {@code size} is negative
424 Creates a new input stream that will encode the characters from {@code reader} into bytes using the given character set. Malformed input and unmappable characters will be replaced. @param reader input source @param charset character set used for encoding chars to bytes @param bufferSize size of internal input and output buffers @throws IllegalArgumentException if bufferSize is non-positive
425 Counts the bytes in the given input stream using skip if possible.
426 Discards {@code n} bytes of data from the input stream. This method will block until the full amount has been skipped. Does not close the stream. @param in the input stream to read from @param n the number of bytes to skip @throws EOFException if this stream reaches the end before skipping all the bytes @throws IOException if an I/O error occurs, or the stream does not support skipping
427 Writes the given lines of text to this sink with each line (including the last) terminated with the given line separator. @throws IOException if an I/O error occurs while writing to this sink
428 Writes the given lines of text to this sink with each line (including the last) terminated with the given line separator. @throws IOException if an I/O error occurs while writing to this sink @since 22.0 (but only since 33.4.0 in the Android flavor)
429 Reads all lines of text from this source, running the given {@code action} for each line as it is read. <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code \n}. If the source's content does not end in a line termination sequence, it is treated as if it does. @throws IOException if an I/O error occurs while reading from this source or if {@code action} throws an {@code UncheckedIOException} @since 22.0 (but only since 33.4.0 in the Android flavor)
430 Reads all of the lines from a {@link Readable} object. The lines do not include line-termination characters, but do include other leading and trailing whitespace. <p>Does not close the {@code Readable}. If reading files or resources you should use the {@link Files#readLines} and {@link Resources#readLines} methods. @param r the object to read from @return a mutable {@link List} containing all the lines @throws IOException if an I/O error occurs
431 Streams lines from a {@link Readable} object, stopping when the processor returns {@code false} or all lines have been read and returning the result produced by the processor. Does not close {@code readable}. Note that this method may not fully consume the contents of {@code readable} if the processor stops processing early. @throws IOException if an I/O error occurs @since 14.0
432 Handle the case of underflow caused by needing more input characters.
433 Reads a {@code short} as specified by {@link DataInputStream#readShort()}, except using little-endian byte order. @return the next two bytes of the input stream, interpreted as a {@code short} in little-endian byte order. @throws IOException if an I/O error occurs.
434 Reads a char as specified by {@link DataInputStream#readChar()}, except using little-endian byte order. @return the next two bytes of the input stream, interpreted as a {@code char} in little-endian byte order @throws IOException if an I/O error occurs
435 Reads a {@code float} as specified by {@link DataInputStream#readFloat()}, except using little-endian byte order. @return the next four bytes of the input stream, interpreted as a {@code float} in little-endian byte order @throws IOException if an I/O error occurs
436 Reads a {@code double} as specified by {@link DataInputStream#readDouble()}, except using little-endian byte order. @return the next eight bytes of the input stream, interpreted as a {@code double} in little-endian byte order @throws IOException if an I/O error occurs
437 Writes a {@code String} as specified by {@link DataOutputStream#writeChars(String)}, except each character is written using little-endian byte order. @throws IOException if an I/O error occurs
438 Writes a {@code double} as specified by {@link DataOutputStream#writeDouble(double)}, except using little-endian byte order. @throws IOException if an I/O error occurs
439 Simple, insecure method for deleting the contents of a directory for file systems that don't support {@code SecureDirectoryStream}. Returns a collection of exceptions that occurred or null if no exceptions were thrown.
440 Secure recursive delete using {@code SecureDirectoryStream}. Returns a collection of exceptions that occurred or null if no exceptions were thrown.
441 Creates a new instance. @param it an iterator of I/O suppliers that will provide each substream
442 Returns a {@link CharSource} view of the resource from which its bytes can be read as characters decoded with the given {@code charset}. @throws NoSuchElementException if the resource cannot be loaded through the class loader, despite physically existing in the class path. @since 20.0
443 The number of permutations with repeated elements is calculated as follows: <ul> <li>For an empty list, it is 1 (base case). <li>When r numbers are added to a list of n-r elements, the number of permutations is increased by a factor of (n choose r). </ul>
444 Returns the <a href="http://en.wikipedia.org/wiki/Arithmetic_mean">arithmetic mean</a> of {@code values}. <p>If these values are a sample drawn from a population, this is also an unbiased estimator of the arithmetic mean of the population. @param values a nonempty series of values, which will be converted to {@code double} values (this may cause loss of precision) @throws IllegalArgumentException if {@code values} is empty or contains any non-finite value @deprecated Use {@link Stats#meanOf} instead, noting the less strict handling of non-finite values.
445 Returns {@code true} if {@code x} is exactly equal to {@code 2^k} for some finite integer {@code k}.
446 Returns {@code true} if {@code x} represents a mathematical integer. <p>This is equivalent to, but not necessarily implemented as, the expression {@code !Double.isNaN(x) && !Double.isInfinite(x) && x == Math.rint(x)}.
447 Returns {@code x}, rounded to a {@code double} with the specified rounding mode. If {@code x} is precisely representable as a {@code double}, its {@code double} value will be returned; otherwise, the rounding will choose between the two nearest representable values with {@code mode}. <p>For the case of {@link RoundingMode#HALF_EVEN}, this implementation uses the IEEE 754 default rounding mode: if the two nearest representable values are equally near, the one with the least significant bit zero is chosen. (In such cases, both of the nearest representable values are even integers; this method returns the one that is a multiple of a greater power of two.) @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x} is not precisely representable as a {@code double} @since 30.0
448 Compares {@code a} and {@code b} "fuzzily," with a tolerance for nearly-equal values. <p>This method is equivalent to {@code fuzzyEquals(a, b, tolerance) ? 0 : Double.compare(a, b)}. In particular, like {@link Double#compare(double, double)}, it treats all NaN values as equal and greater than all other values (including {@link Double#POSITIVE_INFINITY}). <p>This is <em>not</em> a total ordering and is <em>not</em> suitable for use in {@link Comparable#compareTo} implementations. In particular, it is not transitive. @throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN @since 13.0
449 If more than this many consecutive positions are filled in a table of the specified size, report probable hash flooding. ({@link #hashFloodingDetected} may also report hash flooding if fewer consecutive positions are filled; see that method for details.)
450 Quickselects the top k elements from the 2k elements in the buffer. O(k) expected time, O(k log k) worst case.
451 Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode. @throws IllegalArgumentException if {@code x <= 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x} is not a power of ten
452 Returns the square root of {@code x}, rounded with the specified rounding mode. @throws IllegalArgumentException if {@code x < 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code sqrt(x)} is not an integer
453 Returns ~2x the old capacity if small; ~1.5x otherwise.
454 Builds an instance representing a horizontal transformation with a constant value of {@code y}. (The inverse of this will be a vertical transformation.)
455 Finish building an instance with the given slope, i.e. the rate of change of {@code y} with respect to {@code x}. The slope must not be {@code NaN}. It may be infinite, in which case the transformation is vertical. (If it is zero, the transformation is horizontal.)
456 Builds an instance representing a vertical transformation with a constant value of {@code x}. (The inverse of this will be a horizontal transformation.)
457 Returns {@code n!}, that is, the product of the first {@code n} positive integers, or {@code 1} if {@code n == 0}. <p><b>Warning:</b> the result takes <i>O(n log n)</i> space, so use cautiously. <p>This uses an efficient binary recursive algorithm to compute the factorial with balanced multiplies. It also removes all the 2s from the intermediate products (shifting them back in at the end). @throws IllegalArgumentException if {@code n < 0}
458 Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode. @throws IllegalArgumentException if {@code x <= 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x} is not a power of ten
459 Returns (x * numerator / denominator), which is assumed to come out to an integral value.
460 Returns the {@code b} to the {@code k}th power, provided it does not overflow. @throws ArithmeticException if {@code b} to the {@code k}th power overflows in signed {@code long} arithmetic
461 Returns the population covariance of the values. The count must be non-zero. <p>This is guaranteed to return zero if the dataset contains a single pair of finite values. It is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty
462 Returns the sample covariance of the values. The count must be greater than one. <p>This is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty or contains a single pair of values
463 Returns the <a href="http://mathworld.wolfram.com/CorrelationCoefficient.html">Pearson's or product-moment correlation coefficient</a> of the values. The count must greater than one, and the {@code x} and {@code y} values must both have non-zero population variance (i.e. {@code xStats().populationVariance() > 0.0 && yStats().populationVariance() > 0.0}). The result is not guaranteed to be exactly +/-1 even when the data are perfectly (anti-)correlated, due to numerical errors. However, it is guaranteed to be in the inclusive range [-1, +1]. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty or contains a single pair of values, or either the {@code x} and {@code y} dataset has zero population variance
464 Returns the <a href="http://en.wikipedia.org/wiki/Arithmetic_mean">arithmetic mean</a> of the values. The count must be non-zero. <p>The definition of the mean is the same as {@link Stats#mean}. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision) @throws IllegalArgumentException if the dataset is empty
465 Adds the given value to the dataset.
466 Returns the population covariance of the values. The count must be non-zero. <p>This is guaranteed to return zero if the dataset contains a single pair of finite values. It is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty
467 Returns the sample covariance of the values. The count must be greater than one. <p>This is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty or contains a single pair of values
468 Returns the <a href="http://mathworld.wolfram.com/CorrelationCoefficient.html">Pearson's or product-moment correlation coefficient</a> of the values. The count must greater than one, and the {@code x} and {@code y} values must both have non-zero population variance (i.e. {@code xStats().populationVariance() > 0.0 && yStats().populationVariance() > 0.0}). The result is not guaranteed to be exactly +/-1 even when the data are perfectly (anti-)correlated, due to numerical errors. However, it is guaranteed to be in the inclusive range [-1, +1]. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty or contains a single pair of values, or either the {@code x} and {@code y} dataset has zero population variance
469 Performs a partition operation on the slice of {@code array} with elements in the range [{@code from}, {@code to}]. Uses the median of {@code from}, {@code to}, and the midpoint between them as a pivot. Returns the index which the slice is partitioned around, i.e. if it returns {@code ret} then we know that the values with indexes in [{@code from}, {@code ret}) are less than or equal to the value at {@code ret} and the values with indexes in ({@code ret}, {@code to}] are greater than or equal to that.
470 Creates a {@link PairedStats} instance from the given byte representation which was obtained by {@link #toByteArray}. <p><b>Note:</b> No guarantees are made regarding stability of the representation between versions.
471 Creates a Stats instance from the given byte representation which was obtained by {@link #toByteArray}. <p><b>Note:</b> No guarantees are made regarding stability of the representation between versions.
472 Returns an immutable snapshot of the current statistics.
473 Returns an immutable snapshot of the statistics on the {@code x} values alone.
474 Returns an immutable snapshot of the statistics on the {@code y} values alone.
475 Returns a {@link Collector} which accumulates statistics from a {@link java.util.stream.Stream} of any type of boxed {@link Number} into a {@link Stats}. Use by calling {@code boxedNumericStream.collect(toStats())}. The numbers will be converted to {@code double} values (which may cause loss of precision). <p>If you have any of the primitive streams {@code DoubleStream}, {@code IntStream}, or {@code LongStream}, you should use the factory method {@link #of} instead. @since 28.2 (but only since 33.4.0 in the Android flavor)
476 Returns the string representation of an {@link InetAddress} suitable for inclusion in a URI. <p>For IPv4 addresses, this is identical to {@link InetAddress#getHostAddress()}, but for IPv6 addresses it compresses zeroes and surrounds the text with square brackets; for example {@code "[2001:db8::1]"}. <p>Per section 3.2.2 of <a target="_parent" href="http://tools.ietf.org/html/rfc3986#section-3.2.2">RFC 3986</a>, a URI containing an IPv6 string literal is of the form {@code "http://[2001:db8::1]:8888/index.html"}. <p>Use of either {@link InetAddresses#toAddrString}, {@link InetAddress#getHostAddress()}, or this method is recommended over {@link InetAddress#toString()} when an IP address string literal is desired. This is because {@link InetAddress#toString()} prints the hostname and the IP address string joined by a "/". @param ip {@link InetAddress} to be converted to URI string literal @return {@code String} containing URI-safe string literal
477 Returns the IPv4 address embedded in an IPv4 compatible address. @param ip {@link Inet6Address} to be examined for an embedded IPv4 address @return {@link Inet4Address} of the embedded IPv4 address @throws IllegalArgumentException if the argument is not a valid IPv4 compatible address
478 Returns the IPv4 address embedded in a 6to4 address. @param ip {@link Inet6Address} to be examined for embedded IPv4 in 6to4 address @return {@link Inet4Address} of embedded IPv4 in 6to4 address @throws IllegalArgumentException if the argument is not a valid IPv6 6to4 address
479 Returns the IPv4 address embedded in an ISATAP address. @param ip {@link Inet6Address} to be examined for embedded IPv4 in ISATAP address @return {@link Inet4Address} of embedded IPv4 in an ISATAP address @throws IllegalArgumentException if the argument is not a valid IPv6 ISATAP address
480 Computes the quantile value of the given dataset. @param dataset the dataset to do the calculation on, which must be non-empty, which will be cast to doubles (with any associated lost of precision), and which will not be mutated by this call (it is copied instead) @return the quantile value
481 Computes the quantile values of the given dataset. @param dataset the dataset to do the calculation on, which must be non-empty, which will be cast to doubles (with any associated lost of precision), and which will not be mutated by this call (it is copied instead) @return an unmodifiable, ordered map of results: the keys will be the specified quantile indexes, and the values the corresponding quantile values. When iterating, entries in the map are ordered by quantile index in the same order they were passed to the {@code indexes} method.
482 Appends {@code value} to the end of the values the built {@link ImmutableDoubleArray} will contain.
483 Appends {@code values}, in order, to the end of the values the built {@link ImmutableDoubleArray} will contain.
484 Appends {@code values}, in order, to the end of the values the built {@link ImmutableDoubleArray} will contain.
485 Appends {@code values}, in order, to the end of the values the built {@link ImmutableDoubleArray} will contain.
486 Returns an immutable array containing a single value.
487 Returns an immutable array containing the given values, in order.
488 Returns an immutable array containing the given values, in order.
489 Returns an immutable array containing the given values, in order.
490 Returns an immutable array containing the given values, in order.
491 Returns an immutable array containing the given values, in order.
492 Returns an immutable array containing the given values, in order.
493 Returns an immutable array containing the given values, in order.
494 Returns an immutable array containing all the values from {@code stream}, in order. @since 22.0 (but only since 33.4.0 in the Android flavor)
495 Returns an immutable array containing the same values as {@code this} array. This is logically a no-op, and in some circumstances {@code this} itself is returned. However, if this instance is a {@link #subArray} view of a larger array, this method will copy only the appropriate range of values, resulting in an equivalent array with a smaller memory footprint.
496 Returns {@code true} if {@code target} is present at any index in this array. Values are compared as if by {@link Double#equals}. Equivalent to {@code asList().contains(target)}.
497 Appends {@code value} to the end of the values the built {@link ImmutableIntArray} will contain.
498 Appends {@code values}, in order, to the end of the values the built {@link ImmutableIntArray} will contain.
499 Appends {@code values}, in order, to the end of the values the built {@link ImmutableIntArray} will contain.
500 Appends {@code values}, in order, to the end of the values the built {@link ImmutableIntArray} will contain.
501 Returns an immutable array containing a single value.
502 Returns an immutable array containing the given values, in order.
503 Returns an immutable array containing the given values, in order.
504 Returns an immutable array containing the given values, in order.
505 Returns an immutable array containing the given values, in order.
506 Returns an immutable array containing the given values, in order.
507 Returns an immutable array containing the given values, in order.
508 Returns an immutable array containing all the values from {@code stream}, in order. @since 22.0 (but only since 33.4.0 in the Android flavor)
509 Returns an immutable array containing the same values as {@code this} array. This is logically a no-op, and in some circumstances {@code this} itself is returned. However, if this instance is a {@link #subArray} view of a larger array, this method will copy only the appropriate range of values, resulting in an equivalent array with a smaller memory footprint.
510 Appends {@code value} to the end of the values the built {@link ImmutableLongArray} will contain.
511 Appends {@code values}, in order, to the end of the values the built {@link ImmutableLongArray} will contain.
512 Appends {@code values}, in order, to the end of the values the built {@link ImmutableLongArray} will contain.
513 Appends {@code values}, in order, to the end of the values the built {@link ImmutableLongArray} will contain.
514 Returns an immutable array containing a single value.
515 Returns an immutable array containing the given values, in order.
516 Returns an immutable array containing the given values, in order.
517 Returns an immutable array containing the given values, in order.
518 Returns an immutable array containing the given values, in order.
519 Returns an immutable array containing the given values, in order.
520 Returns an immutable array containing the given values, in order.
521 Returns an immutable array containing all the values from {@code stream}, in order. @since 22.0 (but only since 33.4.0 in the Android flavor)
522 Returns an immutable array containing the same values as {@code this} array. This is logically a no-op, and in some circumstances {@code this} itself is returned. However, if this instance is a {@link #subArray} view of a larger array, this method will copy only the appropriate range of values, resulting in an equivalent array with a smaller memory footprint.
523 Specifies multiple quantile indexes to be calculated, each index being the k in the kth q-quantile. @param indexes the quantile indexes, each of which must be in the inclusive range [0, q] for q-quantiles; the order of the indexes is unimportant, duplicates will be ignored, and the set will be snapshotted when this method is called @throws IllegalArgumentException if {@code indexes} is empty
524 Returns an immutable array containing the given values, in order.
525 Returns an immutable array containing the given values, in order.
526 Parses the specified string as a signed integer value using the specified radix. The ASCII character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign. <p>Unlike {@link Integer#parseInt(String, int)}, this method returns {@code null} instead of throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns {@code null} if non-ASCII digits are present in the string. <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link Integer#parseInt(String)} accepts them. @param string the string representation of an integer value @param radix the radix to use when parsing @return the integer value represented by {@code string} using {@code radix}, or {@code null} if {@code string} has a length of zero or cannot be parsed as an integer value @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX} @throws NullPointerException if {@code string} is {@code null} @since 19.0
527 Parses the specified string as a signed decimal long value. The ASCII character {@code '-'} ( <code>'&#92;u002D'</code>) is recognized as the minus sign. <p>Unlike {@link Long#parseLong(String)}, this method returns {@code null} instead of throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns {@code null} if non-ASCII digits are present in the string. <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link Integer#parseInt(String)} accepts them. @param string the string representation of a long value @return the long value represented by {@code string}, or {@code null} if {@code string} has a length of zero or cannot be parsed as a long value @throws NullPointerException if {@code string} is {@code null} @since 14.0
528 Returns the unsigned {@code int} value represented by the given string. <p>Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix: <ul> <li>{@code 0x}<i>HexDigits</i> <li>{@code 0X}<i>HexDigits</i> <li>{@code #}<i>HexDigits</i> <li>{@code 0}<i>OctalDigits</i> </ul> @throws NumberFormatException if the string does not contain a valid unsigned {@code int} value @since 13.0
529 Returns an {@code UnsignedInteger} that is equal to {@code value}, if possible. The inverse operation of {@link #longValue()}.
530 Returns a {@code UnsignedInteger} representing the same value as the specified {@link BigInteger}. This is the inverse operation of {@link #bigIntegerValue()}. @throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^32}
531 Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as an unsigned {@code int} value in the specified radix. @throws NumberFormatException if the string does not contain a parsable unsigned {@code int} value
532 Returns the result of adding this and {@code val}. If the result would have more than 32 bits, returns the low 32 bits of the result. @since 14.0
533 Returns the result of subtracting this and {@code val}. If the result would be negative, returns the low 32 bits of the result. @since 14.0
534 Returns the result of multiplying this and {@code val}. If the result would have more than 32 bits, returns the low 32 bits of the result. @since 14.0
535 Returns the result of dividing this by {@code val}. @throws ArithmeticException if {@code val} is zero @since 14.0
536 Returns this mod {@code val}. @throws ArithmeticException if {@code val} is zero @since 14.0
537 Returns a string representation of the {@code UnsignedInteger} value, in base 10.
538 Compares this unsigned integer to another unsigned integer. Returns {@code 0} if they are equal, a negative number if {@code this < other}, and a positive number if {@code this > other}.
539 Returns an {@code UnsignedLong} representing the same value as the specified {@code long}. @throws IllegalArgumentException if {@code value} is negative @since 14.0
540 Returns a {@code UnsignedLong} representing the same value as the specified {@code BigInteger}. This is the inverse operation of {@link #bigIntegerValue()}. @throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^64}
541 Returns the result of adding this and {@code val}. If the result would have more than 64 bits, returns the low 64 bits of the result. @since 14.0
542 Returns the result of subtracting this and {@code val}. If the result would have more than 64 bits, returns the low 64 bits of the result. @since 14.0
543 Returns the result of multiplying this and {@code val}. If the result would have more than 64 bits, returns the low 64 bits of the result. @since 14.0
544 Returns dividend / divisor, where the dividend and divisor are treated as unsigned 64-bit quantities. <p><b>Java 8+ users:</b> use {@link Long#divideUnsigned(long, long)} instead. @param dividend the dividend (numerator) @param divisor the divisor (denominator) @throws ArithmeticException if divisor is 0
545 Returns dividend % divisor, where the dividend and divisor are treated as unsigned 64-bit quantities. <p><b>Java 8+ users:</b> use {@link Long#remainderUnsigned(long, long)} instead. @param dividend the dividend (numerator) @param divisor the divisor (denominator) @throws ArithmeticException if divisor is 0 @since 11.0
546 Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as an unsigned {@code long} value in the specified radix. @throws NumberFormatException if the string does not contain a parsable unsigned {@code long} value, or {@code radix} is not between {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}
547 Returns the unsigned {@code long} value represented by the given decimal string. <p><b>Java 8+ users:</b> use {@link Long#parseUnsignedLong(String)} instead. @throws NumberFormatException if the string does not contain a valid unsigned {@code long} value @throws NullPointerException if {@code string} is null (in contrast to {@link Long#parseLong(String)})
548 Returns the unsigned {@code long} value represented by the given string. <p>Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix: <ul> <li>{@code 0x}<i>HexDigits</i> <li>{@code 0X}<i>HexDigits</i> <li>{@code #}<i>HexDigits</i> <li>{@code 0}<i>OctalDigits</i> </ul> @throws NumberFormatException if the string does not contain a valid unsigned {@code long} value @since 13.0
549 Returns true if the element is package-private.
550 Returns the corresponding wrapper type if this is a primitive type; otherwise returns {@code this} itself. Idempotent. @since 15.0
551 Returns the corresponding primitive type if this is a wrapper type; otherwise returns {@code this} itself. Idempotent. @since 15.0
552 Returns the array component type if this type represents an array ({@code int[]}, {@code T[]}, {@code <? extends Map<String, Integer>[]>} etc.), or else {@code null} is returned.
553 {@inheritDoc} <p>The default {@link AbstractFuture} implementation throws {@code InterruptedException} if the current thread is interrupted during the call, even if the value is already available. @throws CancellationException {@inheritDoc}
554 Submits the task and adds a listener that adds the future to {@code queue} when it completes.
555 @since 28.0
556 @since 28.0
557 @since 28.0
558 @since 28.0
559 @since 28.0
560 @since 28.0
561 @since 28.0
562 @since 28.0
563 Collects the result (success or failure) of one input future. The input must not have been cancelled. For details on when this is called, see {@link #collectOneValue}.
564 Atomically adds the given value to the current value. @param delta the value to add @return the previous value
565 Atomically adds the given value to the current value. @param delta the value to add @return the updated value
566 Atomically adds the given value to the element at index {@code i}. @param i the index @param delta the value to add @return the previous value
567 Atomically adds the given value to the element at index {@code i}. @param i the index @param delta the value to add @return the updated value
568 Attempts to cancel execution of this step. This attempt will fail if the step has already completed, has already been cancelled, or could not be cancelled for some other reason. If successful, and this step has not started when {@code cancel} is called, this step should never run. <p>If successful, causes the objects captured by this step (if already started) and its input step(s) for later closing to be closed on their respective {@link Executor}s. If any such calls specified {@link MoreExecutors#directExecutor()}, those objects will be closed synchronously. @param mayInterruptIfRunning {@code true} if the thread executing this task should be interrupted; otherwise, in-progress tasks are allowed to complete, but the step will be cancelled regardless @return {@code false} if the step could not be cancelled, typically because it has already completed normally; {@code true} otherwise
569 Performs a depth-first traversal of the graph edges defined by each node's {@code allowedPriorLocks} to find a path between {@code this} and the specified {@code lock}. @return If a path was found, a chained {@link ExampleStackTrace} illustrating the path to the {@code lock}, or {@code null} if no path was found.
570 Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code Callable}. @param callable the callable task @since 10.0
571 Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code Runnable}, and arrange that {@code get} will return the given result on successful completion. @param runnable the runnable task @param result the result to return on successful completion. If you don't need a particular result, consider using constructions of the form: {@code ListenableFuture<?> f = ListenableFutureTask.create(runnable, null)} @since 10.0
572 Internal implementation detail used to invoke the listeners.
573 Creates a new instance.
574 Converts the given {@code ListenableFuture} to an equivalent {@code FluentFuture}. <p>If the given {@code ListenableFuture} is already a {@code FluentFuture}, it is returned directly. If not, it is wrapped in a {@code FluentFuture} that delegates all calls to the original {@code ListenableFuture}.
575 Returns a {@code ListenableFuture} whose result is set from the supplied future when it completes. Cancelling the supplied future will also cancel the returned future, but cancelling the returned future will have no effect on the supplied future. @since 15.0
576 Computes or retrieves a replacement value corresponding to an already-cached {@code key}. This method is called when an existing cache entry is refreshed by {@link CacheBuilder#refreshAfterWrite}, or through a call to {@link LoadingCache#refresh}. <p>This implementation synchronously delegates to {@link #load}. It is recommended that it be overridden with an asynchronous implementation when using {@link CacheBuilder#refreshAfterWrite}. <p><b>Note:</b> <i>all exceptions thrown by this method will be logged and then swallowed</i>. @param key the non-null key whose value should be loaded @param oldValue the non-null old value corresponding to {@code key} @return the future new value associated with {@code key}; <b>must not be null, must not return null</b> @throws Exception if unable to reload the result @throws InterruptedException if this method is interrupted. {@code InterruptedException} is treated like any other {@code Exception} in all respects except that, when it is caught, the thread's interrupt status is set @since 11.0
577 Enqueues an event to be run on currently known listeners. <p>The {@code toString} method of the Event itself will be used to describe the event in the case of an error. @param event the callback to execute on {@link #dispatch}
578 Enqueues an event to be run on currently known listeners, with a label. @param event the callback to execute on {@link #dispatch} @param label a description of the event to use in the case of an error
579 Attempts to execute all the listeners in {@link #listeners} while not holding the {@link #monitor}.
580 Attempts to execute all the listeners in {@link #listeners}.
581 Signals some other thread waiting on a satisfied guard, if one exists. <p>We manage calls to this method carefully, to signal only when necessary, but never losing a signal, which is the classic problem of this kind of concurrency construct. We must signal if the current thread is about to relinquish the lock and may have changed the state protected by the monitor, thereby causing some guard to be satisfied. <p>In addition, any thread that has been signalled when its guard was satisfied acquires the responsibility of signalling the next thread when it again relinquishes the lock. Unlike a normal Condition, there is no guarantee that an interrupted thread has not been signalled, since the concurrency control must manage multiple Conditions. So this method must generally be called when waits are interrupted. <p>On the other hand, if a signalled thread wakes up to discover that its guard is still not satisfied, it does *not* need to call this method before returning to wait. This can only happen due to spurious wakeup (ignorable) or another thread acquiring the lock before the current thread can and returning the guard to the unsatisfied state. In the latter case the other thread (last thread modifying the state protected by the monitor) takes over the responsibility of signalling the next waiter. <p>This method must not be called from within a beginWaitingFor/endWaitingFor block, or else the current thread's guard might be mistakenly signalled, leading to a lost signal.
582 Executes {@code callable} on the specified {@code executor}, returning a {@code Future}. @throws RejectedExecutionException if the task cannot be scheduled for execution @since 23.0
583 Schedules {@code callable} on the specified {@code executor}, returning a {@code Future}. @throws RejectedExecutionException if the task cannot be scheduled for execution @since 23.0
584 @since 19.0 (present with return type {@code ListenableFutureTask} since 14.0)
585 Executes {@code callable} on the specified {@code executor}, returning a {@code Future}. @throws RejectedExecutionException if the task cannot be scheduled for execution @since 28.2
586 @since 19.0 (present with return type {@code ListenableFutureTask} since 14.0)
587 Executes {@code runnable} on the specified {@code executor}, returning a {@code Future} that will complete after execution. @throws RejectedExecutionException if the task cannot be scheduled for execution @since 28.2
588 Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(1, timeout, unit)} uninterruptibly. @since 28.0 (but only since 33.4.0 in the Android flavor)
