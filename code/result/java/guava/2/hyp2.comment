1 Sets the row comparator. @param rowComparator Comparator for rows; cannot be null. @return this Builder instance for chaining.
2 Sets the column comparator. @param columnComparator Comparator for column ordering. @return Returns the builder instance for chaining.
3 Merges iterables into a single iterable, sorted by the given comparator. @param iterables Iterable of iterables to merge. @param comparator Comparator for sorting elements.
4 Returns the index of the first element matching the predicate. @param iterator Iterator to search. @param predicate Predicate to test each element.
5 Creates a SortedSetMultimapBuilder with a custom comparator. @param comparator Comparator for the values in the multimap.
6 Creates a SetMultimapBuilder for enum values. @param valueClass Enum class for values in the multimap.
7 Creates a SetView representing the union of two sets. @param set1 The first set. @param set2 The second set.
8 Returns a SetView containing elements present in both sets. @param set1 The first set. @param set2 The second set.
9 Returns a view of elements in set1 but not in set2. @param set1 The first set. @param set2 The second set.
10 Returns a SetView representing the symmetric difference of two sets. @param set1 The first set. @param set2 The second set.
11 Finds the starting index of target in array. Returns -1 if target is not found. @param array The array to search within. @param target The boolean array to search for.
12 Finds the index of the target byte array within the given array. Returns -1 if not found. @param array Byte array to search in. @param target Byte array to search for.
13 Finds the index of the target array within the array. @param array Array to search within. @param target Array to search for.
14 Finds the first occurrence of target in array. @param array The array to search. @param target The target array to find.
15 Finds the first occurrence of target in array. @param array Array to search within. @param target Sub-array to search for. Returns index or -1.
16 Finds the starting index of target array within array. Returns -1 if target is not found.
17 Finds the starting index of target in array, or -1 if not found. @param array The array to search within. @param target The target array to search for.
18 Finds the index of the target array within the array. @param array Array to search within. @param target Array to search for.
19 Creates a Guard that executes the given condition. @param isSatisfied BooleanSupplier to evaluate.
20 Returns the default value for the given type, or null. @param type Class of the primitive type to get default.
21 Creates a Joiner that replaces nulls with the provided text. @param nullText Replacement text for null values.
22 Initializes the ToStringHelper with a class name. @param className The name of the class being represented.
23 Converts an Iterable of Optionals to an Iterable of values. @param optionals Iterable of Optionals to extract values from @return Iterable containing the extracted values
24 Returns an Iterable of strings from the sequence. Uses m2 to create the iterator and joins the result.
25 Pads a string with a specified character to reach a minimum length. @param string The string to pad. @param minLength The minimum length. @param padChar The padding character.
26 Pads a string with a specified character to reach a minimum length. @param string The string to pad. @param minLength The minimum length. @param padChar The padding character.
27 Re-throws a throwable if its type matches the declared type.
28 Re-throws the throwable as RuntimeException or Error if applicable.
29 Collects the causal chain of throwables. @param throwable The throwable to analyze. @return A list of throwables in the causal chain.
30 Creates a new CacheLoader that wraps the provided loader. @param loader The loader to wrap. @param executor Executor for asynchronous loading.
31 Creates a wrapped RemovalListener that executes asynchronously. @param listener The listener to wrap. @param executor Executor for asynchronous execution.
32 Retrieves a column map based on the provided column key. @param columnKey Key representing the column. @return Map representing the column or empty map if not found.
33 Retrieves a row map for the given row key. @param rowKey The key representing the row. @return A map representing the row, or empty if not found.
34 Creates a Spliterator that maps elements from another Spliterator. @param fromSpliterator source Spliterator @param function mapping function
35 Creates a filtering Spliterator based on a predicate. @param fromSpliterator source Spliterator @param predicate filter predicate @return Filtering Spliterator
36 Checks if a collection contains an object, handling exceptions. @param collection Collection to search. @param object Object to check for. @return True if found, false otherwise.
37 Checks if a collection contains an object, safely. @param collection Collection to check. @param object Object to search for. @return True if found, false otherwise.
38 Checks if an iterable is sorted according to the given comparator. @param iterable Iterable to check, must not be null @param comparator Comparator to use for comparison
39 Checks if an iterable is sorted according to the given comparator. @param iterable Iterable to check, must not be null. @param comparator Comparator to use for comparisons.
40 Creates a comparator for Optionals using a given comparator. @param valueComparator Comparator for the contained value.
41 Creates a comparator for Optionals using a provided comparator. @param valueComparator Comparator for the contained value.
42 Returns a view of the set containing elements up to {@code toElement}. @param toElement Element to which the set extends. @param inclusive Whether {@code toElement} is included.
43 Returns a view of the set containing elements >= fromElement. @param fromElement The lower bound (inclusive) of the range. @return A ContiguousSet view of elements >= fromElement.
44 Adds an element to the queue. Returns true if successful.
45 Returns the iterable, checking for null. @param iterable The iterable to return, not null. @return The same iterable.
46 Adds an element to the builder and returns the builder. @param element The element to add. @return The builder instance with the added element.
47 Sets the comparator for keys. Returns this builder for chaining.
48 Sets the value comparator for ordering multimap values. @param valueComparator Comparator for sorting values; null resets. @return {@code this} for method chaining.
49 Adds a single element to the builder. @param element The element to add. @return The builder instance for chaining.
50 Adds specified occurrences of an element to the multiset. @param element The element to add. @param occurrences The number of times to add the element.
51 Adds the specified element with the given count to the multiset. @param element element to add @param count the number of times to add the element
52 Creates a collector for immutable sorted multisets of elements. @param comparator Comparator for element ordering. @param elementFunction Extracts element from input. @param countFunction Provides count for each element.
53 Returns a sub-set containing elements up to `toElement`. @param toElement The element to which the set is truncated. @param inclusive Whether `toElement` is included.
54 Returns a view of the set containing elements up to `fromElement`. @param fromElement Element to stop iteration at. @param inclusive Whether to include `fromElement`.
55 Returns an unmodifiable iterable or the original if already immutable. @param iterable Iterable to wrap or return @return Unmodifiable Iterable
56 Wraps an immutable collection as an iterable. @param iterable Immutable collection to wrap @return Iterable view of the collection
57 Returns the first element matching the predicate or null. @param removeFrom Iterable to search. @param predicate Predicate to test each element.
58 Wraps an iterable to provide fluent operations. @param iterable The iterable to wrap. @return A {@link FluentIterable} instance.
59 Filters an iterable based on a predicate. @param unfiltered Iterable to filter. @param retainIfTrue Predicate to determine if element is retained.
60 Transforms an iterable into a new iterable using a function. @param fromIterable source iterable @param function transformation function @return new iterable with transformed elements
61 Returns a consuming iterable from the given iterable. @param iterable the iterable to wrap @return a consuming iterable
62 Wraps an iterator as an UnmodifiableIterator, or returns it if already one. @param iterator Iterator to wrap. @return An UnmodifiableIterator.
63 Returns the iterator, ensuring it's not null. @param iterator The iterator to check. @return The input iterator.
64 Removes elements from an iterator that are present in a collection. @param removeFrom Iterator to remove elements from. @param elementsToRemove Collection containing elements to remove. @return True if any elements were removed.
65 Removes elements from an iterator that satisfy the predicate. @param removeFrom Iterator to remove elements from. @param predicate Predicate to determine which elements to remove. @return True if any elements were removed.
66 Removes elements from iterator if not in collection. @param removeFrom Iterator to remove elements from. @param elementsToRetain Collection to retain elements. @return True if any elements were removed.
67 Adds elements from an iterator to a collection. @param addTo Collection to add elements to. @param iterator Iterator providing elements to add. @return True if the collection was modified.
68 Creates an iterator that combines elements from the given iterable. @param iterable The iterable to create the iterator from. @return An iterator wrapping the iterable.
69 Creates an iterator that filters elements based on a predicate. @param unfiltered Iterator to filter. @param retainIfTrue Predicate to retain elements. @return Filtered UnmodifiableIterator.
70 Checks if all elements satisfy the predicate. @param iterator Iterator of elements to check. @param predicate Predicate to test each element.
71 Finds the first element satisfying the predicate. @param iterator Iterator to search. @param predicate Predicate to test each element.
72 Transforms an iterator by applying a function to each element. @param fromIterator Iterator to transform. @param function Function to apply to each element.
73 Returns an iterator that consumes elements from the given iterator. @param iterator Iterator to consume elements from. @return UnmodifiableIterator that consumes elements.
74 Iterates through iterator, removing elements after processing.
75 Wraps an enumeration in an unmodifiable iterator. @param enumeration The enumeration to wrap. @return An UnmodifiableIterator.
76 Wraps the given iterator with a PeekingIterator. @param iterator The iterator to wrap. @return A PeekingIterator wrapping the input iterator.
77 Creates an EnumMap with keys of the specified enum type. @param type The class of the enum keys. @return A new EnumMap.
78 Creates an immutable Entry view of the given map entry. @param entry The entry to wrap in an immutable view. @return An immutable Entry object.
79 Transforms an entry using the provided transformer. @param transformer Transforms the entry's key-value pair. @param entry The entry to be transformed. @return A new Entry with transformed values.
80 Creates a Function to transform map entries using the given transformer. @param transformer EntryTransformer for transforming entries. @return Function that transforms an Entry<K, V1> to Entry<K, V2>
81 Retrieves a value from a map by key, safely handling exceptions. @param map The map to retrieve from. @param key The key to search for. @return The value associated with the key, or null if not found.
82 Checks if map contains key, safely handling exceptions. @param map The map to check. @param key The key to search for.
83 Retrieves a value from a map by key, safely handling exceptions. @param map The map to retrieve from. @param key The key to look up. @return The value associated with the key, or null if not found.
84 Applies given action to each entry in the multimap. @param action BiConsumer to apply to each key-value pair.
85 Creates a MultimapBuilderWithKeys using the provided comparator. @param comparator Comparator for keys in the multimap. @return A MultimapBuilderWithKeys instance.
86 Creates a MultimapBuilderWithKeys for an enum key type. @param keyClass The enum class used for keys. @return A MultimapBuilderWithKeys instance.
87 Returns an immutable multimap from the given immutable multimap. @param delegate The input immutable multimap. @return An immutable multimap.
88 Returns an immutable {@code SetMultimap} from the given delegate.
89 Returns an immutable ListMultimap from an ImmutableListMultimap. @param delegate The immutable multimap to wrap. @return A ListMultimap view of the input.
90 Applies action to each entry, using element and count. @param action Consumer to apply to each (element, count) pair
91 Applies action to each element in the multiset, repeated by its count.
92 Converts an ImmutableMultiset to a mutable Multiset. @param multiset ImmutableMultiset to convert. @return A Multiset containing the elements of the input.
93 Creates a view multiset containing elements from two multisets. @param multiset1 The first multiset. @param multiset2 The second multiset.
94 Creates a view multiset based on two input multisets. Returns a view where counts are combined from both sets.
95 Creates a view multiset containing elements of both input multisets. @param multiset1 The first multiset. @param multiset2 The second multiset.
96 Creates a view multiset based on two input multisets. @param multiset1 First multiset. @param multiset2 Second multiset. @return A ViewMultiset representing the difference.
97 Checks if superMultiset contains at least the elements of subMultiset. @param superMultiset The multiset to check against. @param subMultiset The multiset to check for containment. @return True if superMultiset contains all elements of subMultiset.
98 Retains elements in a multiset based on counts in another multiset. @param multisetToModify The multiset to modify. @param occurrencesToRetain Multiset defining counts to retain. @return True if the multiset was modified.
99 Removes elements from a multiset based on another multiset. @param multisetToModify The multiset to modify. @param occurrencesToRemove Elements to remove from multiset. @return True if the multiset was modified.
100 Retains elements present in the given collection. @param elementsToRetain Collection of elements to retain. @return True if any elements were retained.
101 Returns the provided Ordering, ensuring it's not null. @param ordering The Ordering to return, cannot be null. @return The input Ordering.
102 Drains elements from a queue into a collection until a condition is met. @param q queue to drain from @param buffer collection to drain into @param numElements max elements to drain @param timeout timeout for draining @param unit timeout unit @return number of elements drained
103 Drains elements from a queue into a collection, with timeout. @param q queue to drain, buffer to drain to, numElements to drain, timeout, unit @return number of elements drained
104 Checks if value is within the range, exclusive of bounds. @param value The value to check. @return True if value is strictly within the range.
105 Creates a new TreeSet using the provided comparator. @param comparator Comparator to define the TreeSet's order.
106 Zips two streams using a BiFunction, safely closing them. @param streamA First stream. @param streamB Second stream. @param function Function to combine elements. @return Stream of combined elements.
107 Transforms a stream using a function, handling parallel streams. @param stream Input stream of type T. @param function Function to apply to each element. @return Transformed stream of type R.
108 Converts an IntStream to a Stream using a function. @param stream Input IntStream @param function Function to apply to each element @return Stream of type R
109 Converts LongStream to Stream<R> using a function. @param stream LongStream to convert @param function Function to apply to each element
110 Converts a DoubleStream to a Stream<R> using a function. @param stream The input DoubleStream. @param function Function to transform each double to R.
111 Updates range map entries based on provided range, value, and function.
112 Creates a TreeTraverser with a custom node-to-children function. @param nodeToChildrenFunction Function to get children of a node.
113 Creates a FluentIterable from the given root node. @param root The root node of the tree to traverse.
114 Creates a FluentIterable from the given root node. @param root The root node of the tree to traverse.
115 Creates a breadth-first iterable from the given root node. @param root The root node of the tree to traverse.
116 Adds a character escape mapping. @param c The character to escape. @param r The replacement string. @return A reference to this builder.
117 Sets the replacement string for a character. @param c character to be replaced @param replacement replacement string
118 Extracts a character or escape sequence from a CharSequence. @param seq CharSequence to process. @param index Starting index. @param end End index (exclusive).
119 Constructs a DeadEvent with the given source and event. @param source The event source. @param event The event that could not be delivered.
120 Handles an exception, logs it, and notifies the exception handler. @param e The exception to handle. @param context SubscriberExceptionContext for the event.
121 Invokes the subscriber's method with the event. @param event The event to pass to the method. @throws InvocationTargetException if method invocation fails.
122 Constructs a SubscriberExceptionContext with eventBus, event, subscriber, and method. @param eventBus EventBus instance @param event The event being processed @param subscriber The subscriber object @param subscriberMethod The subscriber method
123 Returns the input graph, ensuring it's not null. @param graph The graph to return. @return The same graph.
124 Returns the input network. @param network The network to return. @return The same network passed as input.
125 Returns the provided graph. @param graph The graph to return. @return The input graph.
126 Returns a deque of iterators for the horizon of nodes. @return Deque of iterators, may be null.
127 Constructs a HashingInputStream with a hasher and input stream. @param hashFunction Hash function for calculating the hash. @param in Input stream to read data from.
128 Constructs an AppendableWriter with the given target. @param target Appendable object to write to; not null.
129 Creates a `ByteSink` that wraps the provided `CharSink`. @param encodedSink CharSink to wrap @return ByteSink that writes to the wrapped CharSink
130 Creates a ByteSource from a CharSource, wrapping the input. @param encodedSource CharSource to wrap as a ByteSource
131 Creates a CharSequenceReader with the given CharSequence. @param seq CharSequence to read from; must not be null.
132 Copies characters from a Reader to a StringBuilder. @param from Reader to read from @param to StringBuilder to write to @return Number of characters copied
133 Copies data from a Reader to a Writer, returning the total chars copied. @param from Source Reader @param to Destination Writer @return Total number of characters copied
134 Reads from a Reader until n characters are read or EOF is reached.
135 Constructs a CountingInputStream wrapping the given input stream. @param in The InputStream to be wrapped.
136 Constructs a CountingOutputStream wrapping the given OutputStream. @param out The OutputStream to wrap; must not be null.
137 Opens a file for reading with specified charset. @param file The file to open. @param charset Character encoding to use. @return BufferedReader for reading the file.
138 Creates a BufferedWriter for the given file and charset. @param file the file to write to @param charset the character encoding to use @return BufferedWriter object
139 Updates a file's modification time. @param file The file to update; must be valid. @throws IOException If modification fails.
140 Creates parent directories for a file, throwing IOException on failure. @param file The file for which to create parent directories.
141 Extracts file extension from a full file name. @param fullName The full path to the file. @return The file extension, or "" if no extension exists.
142 Extracts filename without extension. @param file The full file path. @return Filename without extension.
143 Creates a LittleEndianDataInputStream with the given input stream. @param in The input stream to read from; must not be null.
144 Constructs a LittleEndianDataOutputStream with a given OutputStream. @param out The OutputStream to write to; must not be null.
145 Sets the last modified time of a file or directory. @param path Path to the file or directory.
146 Constructs a PatternFilenameFilter with the given regex pattern. @param pattern the regex pattern to use for filtering
147 Checks if BigInteger satisfies specific conditions. @param x The BigInteger to check. @return True if conditions are met, false otherwise.
148 Applies a consumer to each element of the array segment. @param consumer The consumer to apply to each element.
149 Iterates through the array and applies the consumer to each element. @param consumer Functional interface to process each element.
150 Iterates through the array and applies the consumer to each element. @param consumer Functional interface to apply to each long value.
151 Checks if a class is a wrapper type. @param type Class to check. @return True if the class is a wrapper type.
152 Returns the wrapper type for a primitive, or the primitive itself. @param type The class type to wrap or return.
153 Returns the primitive type corresponding to a wrapper type. @param type The wrapper class to unwrap. @return The primitive class or the original type if not found.
154 Parses a string as an unsigned byte, throws exception if out of range. @param string Byte string to parse @param radix Radix of the number in the string
155 Parses a string as an unsigned integer. @param string The string to parse. @param radix The radix of the number. @return The unsigned integer value.
156 Creates a new schedule with the given delay and time unit. @param delay the delay before the schedule starts @param unit the time unit of the delay
157 Updates the value associated with the given key atomically. @param key The key to update. @param updaterFunction Function to update the value. @return The updated value.
158 Updates the long value associated with the key atomically. @param key The key to update. @param updaterFunction Function to update the value. @return The new value after update.
159 Creates an AsyncCallable from a Callable, using provided executor. @param callable Callable task to wrap @param listeningExecutorService Executor for async execution @return AsyncCallable that executes the Callable
160 Wraps a Callable with a name, restoring the original name after execution. @param callable Callable to wrap @param nameSupplier Supplier for the Callable's name @return Callable that executes the given Callable
161 Wraps a Runnable with thread naming and restoration. @param task The Runnable to execute. @param nameSupplier Supplier for the thread name.
162 Adapts an AsyncFunction to use ClosingFuture for resource management. @param function The AsyncFunction to adapt. @return An AsyncClosingFunction.
163 Returns the future, ensuring it's not null. @param future The future to check; must not be null. @return The same future.
164 Creates a Future that applies a function to the input Future's result. @param input The input Future. @param function The function to apply. @return A new Future wrapping the result of the function.
165 Decorates an executor with a thread name supplier. @param executor The executor to decorate. @param nameSupplier Supplier for the thread name. @return Decorated executor.
166 Wraps an executor service, renaming threads using the provided supplier. @param service The executor service to wrap. @param nameSupplier Supplier for the thread name. @return Wrapped ExecutorService.
167 Wraps a ScheduledExecutorService, renaming tasks. @param service ExecutorService to wrap. @param nameSupplier Supplier for task names. @return Wrapped ScheduledExecutorService.
168 Constructs a SequentialExecutor with the given Executor. @param executor The executor to use for task execution.
169 Submits a task for sequential execution, queuing if necessary.
170 Sets the uncaught exception handler for created threads. @param uncaughtExceptionHandler Handler for uncaught exceptions @return A reference to this builder
171 Sets the backing ThreadFactory and returns this builder. @param backingThreadFactory The ThreadFactory to use as a base.
172 Waits for a thread to finish, with a timeout. @param toJoin thread to wait for @param timeout timeout duration @param unit time unit of the timeout
173 Sets the ticker for the cache builder. @param ticker The ticker to use for cache statistics. @return A reference to this CacheBuilder.
174 Sets the removal listener for the cache. @param listener RemovalListener to be set. @return CacheBuilder instance for chaining.
175 Returns the calculated mean value. Throws IllegalStateException if count is zero.
176 Returns the minimum value; checks count is not zero.
177 Returns the maximum value. Throws IllegalStateException if count is zero.
178 Returns the calculated mean. Throws exception if count is zero.
179 Returns the minimum value seen so far. Throws IllegalStateException if no data has been added.
180 Returns the maximum value seen so far. Throws IllegalStateException if no data has been added.
181 Returns a CountDownLatch representing the closure state. Returns a closed latch if already closed.
182 Masks uppercase characters in string after first uppercase. @param string The string to mask. @return The masked string.
183 Converts char to lowercase if uppercase, otherwise returns it.
184 Masks uppercase characters in a string after first uppercase. @param string The input string to process. @return The modified string.
185 Converts character to lowercase if uppercase, otherwise returns it. @param c character to convert @return lowercase character or original if already lowercase
186 Truncates a sequence to maxLength, adding a truncation indicator. @param seq CharSequence to truncate @param maxLength max length of the result @param truncationIndicator indicator for truncation
187 Processes a ByteBuffer, validating its size and populating stats. @param buffer The ByteBuffer containing the data to process.
188 Constrains a short value within a specified range [min, max]. @param value the short value to constrain @param min the minimum allowed value @param max the maximum allowed value
189 Sets the thread priority. @param priority The thread priority to set.
190 Compares two CharSequences, ignoring case differences. @param s1 The first CharSequence. @param s2 The second CharSequence.
191 Constructs a CacheStats object with provided metrics. @param hitCount Cache hit count. @param missCount Cache miss count.
192 Constructs a multimap from the given map. @param map The map to use for initialization; must be empty.
193 Initializes the multimap with the provided map. @param map The map to initialize with.
194 Constructs a multiset with the given backing map. @param backingMap The map to use as the multiset's backing store.
195 Returns a view of the elements within the specified range. @param fromElement start element (inclusive) @param toElement end element (inclusive)
196 Constructs a new `EnumMultiset` for the given enum type. @param type The enum class for which to create the multiset.
197 Returns a sub-set of elements between fromElement and toElement. @param fromElement start element (inclusive) @param toElement end element (inclusive)
198 Partitions an iterable into lists of the specified size. @param iterable Iterable to partition. @param size The desired size of each list. @return Iterable of lists.
199 Partitions an iterable into lists of the specified size. @param iterable The iterable to partition. @param size The desired size of each list.
200 Sets the expected size of the queue. Must be non-negative. @param expectedSize The expected number of elements. @return This builder.
201 Sets the maximum size of the queue. @param maximumSize The maximum number of elements allowed.
202 Constructs a StreamingHasher with specified chunk & buffer sizes. @param chunkSize Size of each data chunk. @param bufferSize Total buffer size.
203 Masks a double value using an internal masking process.
204 Creates a CharMatcher that matches the specified character. @param match The character to match. @return A CharMatcher instance.
205 Creates an IsNot matcher excluding the specified character. @param match The character to exclude from matching.
206 Masks characters in a sequence based on a matching condition. @param sequence CharSequence to process @param replacement Replacement character for masked chars
207 Constructs a Converter with automatic null handling enabled.
208 Checks if two Wrapper objects are equivalent. @param obj The object to compare with this Wrapper. @return True if the objects are the same or equivalent.
209 Checks if two objects are equivalent using the internal method. @param t The first object to compare. @param u The second object to compare. @return True if the objects are equivalent.
210 Removes a weak value reference if found. @param key The key of the entry. @param hash Hash code of the key. @param valueReference The weak value reference to remove.
211 Removes a WeakValueReference if it exists in the segment. @param key The key of the entry.
212 Checks if two iterators have the same elements until one is exhausted. @param iterator1 First iterator @param iterator2 Second iterator @return True if iterators have the same elements, false otherwise.
213 Checks if this entry is equal to another Multiset.Entry. @param object The object to compare to. @return True if equal, false otherwise.
214 Checks graph conditions; returns true if graph is empty or nodes differ. @param graph The graph to check. @param nextNode The next node. @param previousNode The previous node.
215 Returns the equivalence mask of the reference object.
216 Constructs a FinalizablePhantomReference with a referent and queue. Cleans up the reference queue after construction.
217 Constructs a FinalizableSoftReference with a referent and queue. Cleans up the queue to ensure proper finalization.
218 Creates a FinalizableWeakReference with a referent and queue. Cleans up the queue after creation.
219 Creates a ConstantFunction that always returns the given value. @param value The value the function will always return.
220 Parses a bracketed host-port string into host and port. @param hostPortString bracketed host-port string to parse @return String array containing host and port
221 Validates IPv6 literal; throws exception if bracketless. @param host The IPv6 host string to validate. @return this HostAndPort instance.
222 Masks an InetAddress by setting trailing zero octets to 0xff. @param address The InetAddress to mask. @return Masked InetAddress.
223 Increments the IP address. @param address The IP address to increment. @return Incremented InetAddress object.
224 Creates a proxy instance of the given interface type. @param interfaceType Interface type for the proxy. @param handler Handler to handle method invocations.
225 Returns the first type argument of the superclass. Throws IAE if superclass isn't parameterized.
226 Appends elements from an iterator to an appendable, separated by a separator. @param appendable The appendable to write to. @param parts Iterator of parts to append. @return The appendable after appending.
227 Appends map entries to a StringBuilder. @param builder StringBuilder to append to @param entries Iterable of map entries @return The StringBuilder instance
228 Converts map entries to a string using StringBuilder. @param entries Iterator of map entries @return String representation of the entries
229 Creates a new MapJoiner with the specified key-value separator. @param keyValueSeparator Separator for key-value pairs. @return New MapJoiner instance.
230 Generates a string representation of the object's fields. Uses configured omit flags and includes conditional formatting.
231 Retrieves the immutable set of values associated with the key. @param key The key whose values are to be retrieved. @return ImmutableSet of values or an empty set if not found.
232 Gets a URL for a resource, using the context class loader. @param resourceName Name of the resource to locate. @return URL object for the resource, or null if not found.
233 Returns an empty Optional, indicating the absence of a value.
234 Returns the result of m1() if present, otherwise null. @param googleOptional Optional value to process. @return Optional containing the result or null.
235 Returns null if string is empty/null, otherwise returns the string. @param string The string to check. @return Null or the original string.
236 Checks if a string is null or empty using Platform-specific logic. @param string The string to check, may be null. @return True if the string is null or empty.
237 Returns a view of iterable with specified number of elements skipped. @param iterable iterable to skip elements from @param numberToSkip number of elements to skip
238 Wraps an iterable with a limit on the number of elements. @param iterable iterable to wrap @param limitSize maximum number of elements to return
239 Advances the iterator by a specified number of elements. @param iterator Iterator to advance @param numberToAdvance Number of elements to advance @return Number of elements actually advanced
240 Creates a limited iterator. @param iterator Iterator to limit. @param limitSize Maximum number of elements to return.
241 Creates a Traverser for the given graph or network. @param tree SuccessorsFunction representing the graph/network.
242 Masks bits to ensure the value is a multiple of 32. @param bits number of bits to mask
243 Converts a BigInteger to an InetAddress, validating input. @param address BigInteger representing the IP address @param isIpv6 boolean indicating IPv6 format @return InetAddress object
244 Repeats the given string `count` times, with argument validation. @param string string to repeat @param count number of repetitions
245 Constructs a Bloom filter with specified parameters. @param bits Bit array for storage @param numHashFunctions Number of hash functions (1-255) @param funnel Funnel for hashing elements @param strategy Strategy for filter optimization
246 Concatenates hash functions into a single hash function. @param hashFunctions Iterable of HashFunction objects to concatenate @return ConcatenatedHashFunction containing the combined functions
247 Constructs a SipHashFunction with specified parameters. @param c SipRound iterations during Compression. @param d SipRound iterations during Finalization. @param k0 First 64-bit key. @param k1 Second 64-bit key.
248 Creates a FileBackedOutputStream with a file threshold and finalize reset option. @param fileThreshold threshold for switching to file storage @param resetOnFinalize whether to reset on finalize
249 Creates an Inet4Address from a byte array. @param bytes IPv4 address bytes. @return Inet4Address object.
250 Returns array, padded if shorter than minLength. @param array input boolean array @param minLength minimum length @param padding padding value
251 Returns array, padded if shorter than minLength. @param array input byte array @param minLength minimum length @param padding padding size
252 Masks an array to a minimum length, padding if necessary. @param array char array to mask @param minLength minimum length @param padding padding size
253 Returns array, padded if shorter than minLength. @param array input array @param minLength minimum length @param padding padding value
254 Returns array with minimum length, padding if needed. @param array input float array @param minLength minimum array length @param padding padding value
255 Returns array with minimum length, padding if needed. @param array input array @param minLength minimum length @param padding padding value
256 Returns array or pads it to minLength + padding. @param array input long array @param minLength minimum length @param padding padding value
257 Returns array with minimum length, padding if needed. @param array input array @param minLength minimum length @param padding padding value
258 Casts a long to a char and validates it's within range. @param value long value to cast to char @return char representation of the value
259 Casts a long to int, validating it remains within range. @param value long value to cast @return int value after casting
260 Casts a long to a short and validates it's within range. @param value long value to cast @return short value, cast from long
261 Casts a long to a byte, ensuring it's within the valid range. @param value long value to cast to a byte @return byte representation of the value
262 Casts a long to a byte, ensuring it's within the valid range. @param value long value to cast to a byte @return byte representation of the value
263 Masks a long value to an int, ensuring it's within the int range. @param value long value to mask
264 Creates a scheduler with an initial delay and recurring delay. @param initialDelay Initial delay before first execution. @param delay Recurring delay between executions. @param unit Time unit for delays.
265 Creates a scheduler with initial delay and period. @param initialDelay Initial delay before task execution. @param period Period between task executions. @param unit Time unit for delay and period.
266 Clamps a char value between a min and max value. @param value char to clamp, min, max boundaries
267 Clamps a long value within a specified range [min, max]. @param value The value to clamp. @param min The minimum value. @param max The maximum value.
268 Resolves a resource URL relative to a class. @param contextClass Class to resolve relative to. @param resourceName Resource name to resolve.
269 Starts the stopwatch. Throws exception if already running. @return this
270 Stops the stopwatch. Checks if running, updates elapsed time, and returns the stopwatch.
271 Checks if next() calls are allowed based on removal. @param canRemove True if removal is permitted; otherwise false.
272 Sets the value comparator. @param valueComparator Comparator for values, or null to clear. @return This builder instance.
273 Sets the initial capacity of the cache. @param initialCapacity The initial capacity (must be >= 0) @return This CacheBuilder for chaining
274 Sets the cache concurrency level. @param concurrencyLevel The desired concurrency level (must be > 0) @return CacheBuilder instance for chaining
275 Sets the initial capacity of the MapMaker. @param initialCapacity The initial capacity (must be >= 0). @return A reference to this MapMaker instance.
276 Sets the concurrency level for the map. @param concurrencyLevel The desired concurrency level (must be > 0) @return A reference to this MapMaker instance for chaining.
277 Sets the maximum cache size. @param maximumSize The maximum number of entries allowed.
278 Sets the maximum weight of the cache. @param maximumWeight The maximum weight allowed; must be >= 0. @return A reference to this CacheBuilder for chaining.
279 Sets the weigher for the cache builder. @param weigher The weigher to use for calculating key/value strength.
280 Sets the expireAfterWrite duration. @param duration Duration after which writes expire. @param unit Time unit of the duration.
281 Sets the expiration time for cache entries after access. @param duration Expiration duration. @param unit Time unit of the duration.
282 Sets the cache refresh duration. @param duration refresh duration @param unit time unit of the duration @return CacheBuilder instance for chaining
283 Sets the key equivalence strategy. @param equivalence Equivalence for keys, or null to unset. @return {@code this} for chaining.
284 Sets the equivalence strategy for values. @param equivalence Equivalence function for values; cannot be null. @return A reference to this CacheBuilder for chaining.
285 Sets the key equivalence function. @param equivalence Key equivalence function. @return {@code this} for chaining.
286 Creates a TypeToken, ensuring it's not a type variable. @param runtimeType The runtime type to capture. @throws IllegalStateException if runtimeType is a type variable.
287 Returns the failure cause, throws exception if service isn't failed. @return The failure cause or throws IllegalStateException.
288 Validates index bounds, throws exception if out of range. @param index index to validate @param size size to compare against @param desc description of the value being validated
289 Validates index against size, throwing exception if out of bounds. @param index index to validate @param size maximum size @param desc description for the exception
290 Returns a predicate that always returns true.
291 Returns a predicate that always returns false.
292 Returns a predicate that checks if an object is null.
293 Returns a predicate that checks for non-null objects.
294 Combines two predicates using AND logic. @param first First predicate to combine. @param second Second predicate to combine. @return An AndPredicate combining the two input predicates.
295 Combines two predicates using an OR operation. @param first The first predicate. @param second The second predicate.
296 Creates a new Splitter instance with specified parameters. @return A new Splitter object configured with strategy, trimming, and limit.
297 Creates a Splitter with a maximum number of items. @param maxItems The maximum number of splits to perform. @return A new Splitter instance with the specified limit.
298 Splits a CharSequence into a list of strings. @param sequence CharSequence to split. @return List of strings resulting from the split.
299 Combines property key and value into a formatted string. Returns "key=value" string representation.
300 Converts elapsed time to the specified unit. @param desiredUnit Time unit to convert to (e.g., SECONDS) @return Elapsed time in the desired unit.
301 Returns the elapsed duration. Uses elapsedNanos() to calculate.
302 Returns a formatted string representing elapsed time. Calculates and formats the elapsed time in appropriate units.
303 Delegates string processing to the platform implementation. @param string The input string to process; may be null.
304 Finds the longest common prefix of two CharSequences. @param a First CharSequence. @param b Second CharSequence. @return The longest common prefix as a String.
305 Finds the longest common suffix of two CharSequences. @param a First CharSequence. @param b Second CharSequence.
306 Creates a SupplierOfInstance wrapping the provided instance. @param instance The instance to be supplied. @return A Supplier providing the instance.
307 Protected constructor to prevent external Ticker instantiation.
308 Throws VerifyException if the provided boolean expression is false.
309 Throws VerifyException if expression is false. @param expression Boolean expression to verify. @param errorMessageTemplate Error message template. @param p1 Parameter for error message.
310 Throws VerifyException if expression is false. @param expression Boolean expression to validate. @param errorMessageTemplate Error message template. @param p1 Parameter for error message formatting.
311 Throws VerifyException if expression is false. @param expression Boolean expression to validate. @param errorMessageTemplate Error message template.
312 Throws VerifyException if expression is false. @param expression Boolean expression to verify. @param errorMessageArgs Arguments for error message.
313 Throws VerifyException if expression is false. @param expression Boolean expression to verify. @param errorMessageTemplate Error message template.
314 Throws VerifyException if expression is false. @param expression Boolean to check. @param errorMessageTemplate Error message template.
315 Throws VerifyException if expression is false, using template. @param expression Boolean to verify. @param errorMessageTemplate Error message template. @param p1 Parameter for error message. @param p2 Parameter for error message.
316 Throws VerifyException if expression is false. @param expression Boolean expression to verify. @param errorMessage Error message template.
317 Throws VerifyException if expression is false. @param expression Boolean expression to verify. @param errorMessageTemplate Template for error message.
318 Throws VerifyException if expression is false. @param expression Boolean expression to validate. @param errorMessageTemplate Error message template. @param p1, p2 Parameters for error message formatting.
319 Throws VerifyException if expression is false. @param expression Boolean to verify, error if false. @param errorMessageTemplate Error message template. @param p1 Parameter for error message. @param p2 Parameter for error message.
320 Throws VerifyException if expression is false. @param expression Boolean expression to validate. @param errorMessage Error message template.
321 Throws VerifyException if expression is false; uses template for message. @param expression Boolean expression to verify. @param errorMessageTemplate Error message template. @param p1 Parameter 1 for message formatting. @param p2 Parameter 2 for message formatting.
322 Throws VerifyException if expression is false. @param expression Boolean expression to validate. @param errorMessageTemplate Message template for exception.
323 Throws VerifyException if expression is false. @param expression Boolean expression to validate. @param errorMessageTemplate Error message template. @param p1, p2 Parameters for error message formatting.
324 Throws VerifyException if expression is false. @param expression Boolean expression to verify. @param errorMessage Error message template.
325 Throws VerifyException if expression is false, using custom message. @param expression Boolean expression to verify. @param errorMessageTemplate Message template for exception.
326 Throws VerifyException if expression is false. @param expression Boolean expression to verify. @param errorMessage Template for error message.
327 Throws VerifyException if expression is false. @param expression Boolean to verify, errorMessage for failure.
328 Throws VerifyException if expression is false. @param expression Boolean expression to validate. @param errorMessage Template for exception message.
329 Throws VerifyException if expression is false. @param expression Boolean to verify. @param errorMessage Error message template.
330 Throws VerifyException if expression is false. @param expression Boolean expression to check. @param errorMessage Error message template.
331 Processes references, returning true on success, false otherwise. Uses finalizeReferentMethod to process each reference in the queue.
332 Default constructor for the SimpleStatsCounter class.
333 Aggregates statistics from another StatsCounter instance. @param other The StatsCounter to aggregate from.
334 Protected constructor for AbstractLoadingCache.
335 Creates an empty LinkedHashMap to preserve insertion order.
336 Invalidates entries in the provided map. @param m map of entries to invalidate
337 Invalidates multiple cache entries. @param keys Iterable of keys to invalidate.
338 Creates a new CacheBuilder instance with default settings.
339 Throws an UnsupportedLoadingOperationException for given keys.
340 Calculates a masked value based on hit and miss counts. @param hitCount Number of cache hits. @param missCount Number of cache misses. @return Masked value representing the sum of hit and miss counts.
341 Calculates a masked value based on load success/exception counts.
342 Calculates the load exception rate. @return Load exception rate as a double, 0.0 if total load is 0.
343 Calculates average load time based on success/exception counts. Returns 0.0 if no loads occurred.
344 Protected constructor for ForwardingCache. Allows subclasses to extend cache forwarding.
345 Protected constructor for ForwardingCollection. Allows subclasses to extend forwarding functionality.
346 Protected constructor for ForwardingIterator. Allows subclasses to extend forwarding functionality.
347 Protected constructor for ForwardingMap. Allows subclass extension.
348 Protected constructor for ForwardingMapEntry. Allows subclasses to extend forwarding functionality.
349 Protected constructor for ForwardingMultimap. Allows subclasses to extend forwarding functionality.
350 Protected constructor for ForwardingTable. Allows subclasses to extend forwarding functionality.
351 Protected constructor for ForwardingExecutorService. Allows subclasses to extend functionality.
352 Protected constructor for ForwardingFuture. Allows subclasses to extend forwarding functionality.
353 Iterates through recency queue, processes entries if in access queue.
354 Creates a new ReferenceEntry based on an original entry. @param original The original ReferenceEntry. @param newNext The new next ReferenceEntry. @return New ReferenceEntry or null if original is invalid.
355 Removes entries based on a predicate. @param predicate Predicate to determine which entries to remove. @return True if any entries were removed.
356 Processes futures based on configuration, either succeeding all or collecting values.
357 Wraps an executor, forwarding tasks and handling rejected executions. @param delegate The executor to wrap. @param future Future to store rejected execution exceptions.
358 Retrieves the result from a Future, throwing exception if needed. @param future Future object to retrieve the result from. @return Result of the Future.
359 Retrieves the result from a Future, handling exceptions. @param future Future object to retrieve the result from.
360 Clears value reference queue entries based on cache strength.
361 Returns a default equivalence function for object comparison.
362 Returns a default equivalence instance for object comparison.
363 Returns an equivalence function for masking object references.
364 Returns a mask for object equivalence.
365 Returns a default equivalence instance based on object identity.
366 Checks if cache entry has expired based on access/write times. @param entry The ReferenceEntry to check. @param now Current timestamp. @return True if entry is expired, false otherwise.
367 Calculates the total count of all elements in the multiset. Returns the sum as an integer, clamping to int range.
368 Counts elements in an iterator, returning the saturated int value. @param iterator Iterator to count elements from.
369 Calculates the total count of elements in a multiset. @param multiset The multiset to calculate the size of. @return The total number of elements in the multiset.
370 Adds two integers and returns the result as an int.
371 Subtracts two integers and returns the result as an int.
372 Multiplies two integers and returns the result. Uses m1 to handle potential overflow.
373 Returns a new, empty CompactHashSet.
374 Protected constructor for AbstractIterator. Prevents external instantiation.
375 Protected constructor, initializes the iterator with an optional first element.
376 Protected constructor for UnmodifiableIterator. Prevents external instantiation of this class.
377 Returns an unmodifiable view of the multimap's values.
378 Retrieves the first entry from the delegate map's iterator.
379 Returns the next element from the underlying set's iterator.
380 Synchronizes delegate with ancestor or updates it from the map.
381 Returns collection of values for a key, creating if absent. @param key The key to retrieve values for. @return Collection of values for the key.
382 Returns the values collection, delegating to the superclass.
383 Returns the values list. Delegates to the superclass implementation.
384 Returns the multimap's entries. Delegates to superclass.
385 Returns a list of multimap entries, delegating to superclass.
386 Creates a StringBuilder with a specified size. @param size the initial capacity of the StringBuilder
387 Creates an ArrayList with the specified initial capacity. @param initialArraySize initial size of the ArrayList
388 Calculates a size based on expectedSize, throwing exception if < 3. @param expectedSize the expected size of the map @return a calculated size, or Integer.MAX_VALUE if too large
389 Creates a ListMultimapBuilder with expected values per key. @param expectedValuesPerKey expected number of values per key @return ListMultimapBuilder instance
390 Creates a SetMultimapBuilder with expected values per key. @param expectedValuesPerKey Expected number of values per key.
391 Creates a SetMultimapBuilder with a specified expected values per key. @param expectedValuesPerKey expected number of values per key
392 Creates a MultimapBuilderWithKeys with a specified expected key count. @param expectedKeys the anticipated number of keys in the multimap
393 Creates a MultimapBuilder with a specified expected key count. @param expectedKeys the expected number of keys in the multimap
394 Adjusts element count in multiset. @param self the multiset to modify @param element the element to adjust @param count the new count for the element @return the old count of the element
395 Updates element count in multiset if old count matches. @param self the multiset to update @param element the element to update @param oldCount the expected old count @param newCount the new count for the element @return true if count updated, false otherwise
396 Calculates a hash code for this set using Sets.m1(). @return the calculated hash code
397 Checks if this set contains the object, delegating to the wrapped set. @param object the object to check for @return true if the object is contained, false otherwise
398 Delegates to the multimap's asMap() view to obtain its size.
399 Delegates to the multimap's asMap() method to retrieve a string.
400 Removes elements from this multiset. @param elementsToRemove elements to remove; can be a Multiset or Collection @return true if any elements were removed
401 Checks if the multiset contains the given object. @param object The object to check for. @return True if the multiset contains the object.
402 Checks if the multiset contains the given object. @param object The object to check for. @return True if the multiset contains the object.
403 Returns element from iterable or defaultValue if empty. @param iterable Iterable to retrieve from. @param defaultValue Value to return if iterable is empty.
404 Delegates to the superclass's map implementation.
405 Returns a navigable set of keys, delegating to superclass.
406 Returns the provided comparator or a natural ordering if null. @param comparator Comparator to use, or null for natural order. @return Comparator instance.
407 Delegates string representation to the chained method m1().
408 Delegates string representation to the chained method m1().
409 Serializes the ArrayListMultimap to the provided stream. @param stream Output stream for serialization.
410 Serializes the multimap to an ObjectOutputStream. @param stream Output stream for serialization.
411 Writes the multimap to an ObjectOutputStream. @param stream Output stream for serialization.
412 Restores a Multimap from an ObjectInputStream. @param multimap Multimap to populate. @param stream Input stream containing serialized data.
413 Returns the set of column keys to index mapping.
414 Returns the set of row keys. Uses rowKeyToIndex.
415 Returns the set of keys from the underlying map.
416 Checks if a column key exists. @param columnKey The column key to check. @return True if the key exists, false otherwise.
417 Checks if a row key exists. @param rowKey The row key to check. @return True if the row key exists, false otherwise.
418 Retrieves values associated with a key. @param key the key to look up @return ImmutableList of values or empty list if not found
419 Returns a map containing values for the given column key. @param columnKey The key of the column to retrieve values for.
420 Adds a key-value pair to the multimap. @param key The key for the new entry. @param value The value associated with the key. @return A reference to this Builder.
421 Computes the offset from an origin by a given distance. @param origin The starting point. @param distance The number of steps to take.
422 Creates a FlatMapSpliteratorOfDouble from a spliterator and function. @param fromSpliterator Source spliterator. @param function Function to map elements to double spliterators.
423 Creates a FlatMapSpliteratorOfInt from a Spliterator and Function. @param fromSpliterator Source Spliterator. @param function Maps elements to OfInt Spliterator.
424 Creates a FlatMapSpliteratorOfLong from a spliterator and function. @param fromSpliterator Source spliterator. @param function Maps elements to long spliterators.
425 Creates a FlatMapSpliterator from input, mapping elements. @param fromSpliterator Input spliterator. @param function Mapping function.
426 Checks if the collection contains all elements of the given collection. @param collection Collection to check for containment. @return True if all elements are contained, false otherwise.
427 Updates metadata using mask and hash table bits. @param mask The mask to use for calculating hash table bits.
428 Updates metadata based on mask and hash table bits. @param mask The mask used to calculate hash table bits.
429 Resizes internal arrays (entries, keys, values) to newCapacity.
430 Resizes the internal arrays to the specified capacity. @param newCapacity The new capacity for the entries and elements arrays.
431 Calculates the mask for the hash table based on expected size.
432 Masks the comparison result of two integers. @param left the first integer @param right the second integer
433 Chains comparison of longs. Returns a ComparisonChain object. @param left the left long value @param right the right long value
434 Compares two boolean values and returns a comparison chain. @param left the first boolean value @param right the second boolean value
435 Compares two boolean values and returns a comparison chain. @param left the first boolean value @param right the second boolean value
436 Checks if the lower bound is not below all values.
437 Checks if the upper bound is not above all values.
438 Constructs a DiscreteDomain with fast offset calculations disabled.
439 Serializes the bi-map to an ObjectOutputStream. @param stream The output stream for serialization.
440 Serializes the `EnumHashBiMap` to the provided output stream. @param stream The output stream for serialization.
441 Serializes the `HashBiMap` to the provided output stream. @param stream The output stream for serialization.
442 Adds an element to the multiset, validating its type. @param element Element to add, must be of the set's enum type.
443 Serializes the current object to the provided stream. @param stream The output stream for serialization.
444 Serializes the LinkedHashMultiset to the provided output stream. @param stream The output stream for serialization.
445 Writes the TreeMultiset to the provided output stream. @param stream The stream to write the multiset to.
446 Constructs a new Builder instance.
447 Creates a FluentIterable from an array. @param elements Array to wrap as a FluentIterable. @return A FluentIterable instance.
448 Returns an empty FluentIterable. Uses `FluentIterable.from` to wrap an empty collection.
449 Masks the iterable based on a complex internal condition.
450 Creates a FluentIterable by masking the current iterable with another. @param other iterable to mask with @return A masked FluentIterable
451 Concatenates two iterables into a single FluentIterable. @param a First iterable. @param b Second iterable. @return Combined iterable.
452 Combines three iterables into a single iterable. @param a, b, c Iterables to be concatenated.
453 Combines four iterables. @param a, b, c, d Iterables to be combined. @return A FluentIterable containing the merged elements.
454 Returns a stream from the iterable. Delegates to the underlying iterable.
455 Counts occurrences of element in iterator. @param iterator Iterator to search. @param element Element to count.
456 Checks if the map contains a key using an iterator. @param map The map to check. @param key The key to search for.
457 Checks if map values contain the given value. @param map map to check @param value value to search for @return true if value is present in map values
458 Inserts elements into the list at the specified index. @param index insertion index, @param elements elements to insert
459 Returns a sublist, wrapped appropriately. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
460 Computes a hash code for the list using Lists.m1().
461 Copies entries from the given map to this forwarding map. @param map Source map to copy entries from.
462 Checks if the map contains the given object. @param object The object to check for in the map. @return True if the map contains the object, false otherwise.
463 Creates a StandardTable from a backing map and factory. @param backingMap Initial map for table data. @param factory Supplier for column map creation.
464 Returns the set of column keys. Lazily initializes if null.
465 Returns a map representing a column in the table. @param columnKey Key identifying the column.
466 Populates a map from an ObjectInputStream. @param map target map to populate @param stream input stream for reading data
467 Populates a Multiset from an ObjectInputStream. @param multiset target Multiset @param stream input stream
468 Creates a hash table with unique elements. @param newTableSize The size of the hash table. @param elements Elements to be added to the hash table. @param n Number of elements to add. @return Hash table containing unique elements.
469 Constructs a Builder with the default initial capacity.
470 Creates a Builder with the given initial capacity. @param size the initial size of the builder's internal array @return a Builder instance
471 Creates a Builder with an initial capacity. @param expectedSize the expected size of the map @return a Builder instance
472 Increases dedupedElements capacity if minCapacity is too large. @param minCapacity minimum required capacity
473 Adds all elements from the given iterable. @param elements Iterable of elements to add. @return The builder instance for chaining.
474 Adds elements from an iterator to the builder. @param elements Iterator providing elements to add. @return The builder instance for chaining.
475 Adds elements from an iterator to the builder. @param elements Iterator providing elements to add. @return The builder instance for chaining.
476 Adds elements from the given iterable. @param elements Iterable of elements to add. @return The builder instance for chaining.
477 Returns a collector for creating an ImmutableList.
478 Returns an empty ImmutableMultimap instance.
479 Returns a collector for immutable range sets.
480 Returns a collector for accumulating elements into an ImmutableSet.
481 Returns the comparator used to maintain sorted order.
482 Adds an element to the builder, maintaining sorted order. Increases capacity if needed.
483 Creates an InternerFunction for object interning. @param interner the interner to use for object interning @return An InternerFunction object
484 Converts an iterable to a comma-separated string. @param iterable The iterable to convert. @return A string representation of the iterable's elements.
485 Returns the only element of the iterable. @param iterable Iterable to extract the single element from @return The single element, or null if empty.
486 Returns the first element or defaultValue if iterator is empty. @param iterator Iterator to retrieve the first element from. @param defaultValue Value returned if iterator is empty.
487 Concatenates two arrays of type T into a new array. @param first The first array to concatenate. @param second The second array to concatenate. @param type The type of elements in the arrays.
488 Returns the last element of an iterable or iterator. @param iterable Iterable to retrieve the last element from. @return Last element or null if empty.
489 Returns next element or defaultValue if iterator is empty. @param iterator Iterator to fetch next element from. @param defaultValue Value returned if iterator is empty.
490 Returns an empty iterator.
491 Writes the multimap to an ObjectOutputStream. Writes keys and values to the stream in insertion order.
492 Adds a key-value pair to the multimap, managing linked list structure. @param key The key for the new mapping. @param value The value associated with the key. @param nextSibling Optional next sibling node. @return The newly created node.
493 Creates a list of characters from a CharSequence. @param sequence CharSequence to convert to a list. @return List<Character> representing the sequence.
494 Finds the index of the first matching element in a list. @param list List to search. @param element Element to find.
495 Finds the index of an element in a list. @param list List to search. @param element Element to find. Returns -1 if not found.
496 Checks if any entry satisfies the predicate. Returns true if found, otherwise false.
497 Resizes the segment's table when capacity is near maximum. Expands the table and rehashes entries to the new segment.
498 Performs an operation; handles cleanup in a finally block.
499 Checks if an entry has a live value in its segment. @param entry The entry to check. @return True if the entry has a live value, false otherwise.
500 Creates an empty set using an IdentityHashMap-backed map. @return An empty set.
501 Returns a synchronized BiMap. @param bimap The BiMap to synchronize.
502 Inserts an element into the heap, potentially swapping with parent. @param index index of the element being inserted @param x element to insert @return index of the element's new position
503 Moves the last element to maintain heap order. @param actualLastElement The element to be moved. @return The index of the moved element.
504 Advances the iteration cursor to the specified position. @param c The target cursor position.
505 Creates an iterator for the elements in the multiset. @param multiset the multiset to iterate over @return an Iterator for the multiset's elements
506 Creates a new array of type T with specified length. @param reference Existing array, used for type inference. @param length Desired length of the new array.
507 Converts a collection to an object array. @param c Collection to convert. @return Object array representation of the collection.
508 Finds the minimum element from an iterator. @param iterator Iterator of elements to find the minimum from.
509 Finds the maximum element from an iterator. @param iterator Iterator providing elements to compare. @return The maximum element found in the iterator.
510 Creates a Range from an Iterable of comparable values. @param values Iterable of comparable values to define range.
511 Returns a concurrent set based on the platform.
512 Returns a string representation of the range. @param lowerBound The lower bound of the range. @param upperBound The upper bound of the range.
513 Returns the lower bound's endpoint value.
514 Returns the upper bound of this range.
515 Checks values in a bucket for duplicates, throwing exception if overflow.
516 Filters entries, removing duplicates based on a duplicate map. @param entries entries to filter @param n initial size of entries @param newN new size of the filtered entries @param duplicates map to track duplicate entries
517 Checks for duplicate keys in a bucket; returns entry if found. @param key The key to check. @param newValue The new value associated with the key. @param keyBucketHead Head of the key bucket. @param throwIfDuplicateKeys Whether to throw exception on duplicate. @return ImmutableMapEntry or null if not found.
518 Returns a collector for accumulating Enum instances into an ImmutableSet.
519 Creates an EnumSet from a collection. Returns the collection if it's already an EnumSet. @param collection Collection of enum values @return EnumSet containing the collection's elements
520 Creates an EnumSet from a collection or type. @param collection Collection of enum values. @param type Enum type. @return EnumSet containing the collection's elements.
521 Finds the last element in the IntStream as an OptionalInt. @param stream The IntStream to search. @return OptionalInt containing the last element or empty.
522 Finds the last element of a LongStream as an OptionalLong.
523 Finds the last double in a stream. Returns OptionalDouble.empty() if empty.
524 Partitions the buffer around a pivot element. @param left Left index, @param right Right index, @param pivotIndex Pivot index
525 Serializes the TreeMultimap instance to the provided stream. @param stream Output stream for serialization.
526 Protected constructor. Prevents direct instantiation of Escaper.
527 Private constructor to prevent direct instantiation.
528 Escapes special characters in a string up to a given index. @param s String to escape. @param index End index for escaping. @return Escaped string.
529 Escapes a character using the provided CharEscaper. @param escaper CharEscaper instance for escaping @param c character to escape @return Escaped string or null if escaper returns null
530 Escapes a Unicode character using the provided escaper. @param escaper The UnicodeEscaper to use for escaping. @param cp The character to escape. @return The escaped character as a String.
531 Checks endpoint pair; validates m1 and then m3 with error message. @param endpoints EndpointPair to validate.
532 Advances to the next endpoint pair and returns true if successful.
533 Creates an EndpointPair based on graph's configuration. @param graph The graph to use. @param nodeU The first node. @param nodeV The second node.
534 Creates an EndpointPair, ordered or unordered, based on network flag. @param nodeU The first node. @param nodeV The second node.
535 Returns a set view of the graph's endpoint pairs. Uses an iterator to traverse and manage the pairs.
536 Returns an unmodifiable set view of the graph's endpoint pairs.
537 Validates endpoint pair; checks if m1 matches this.m2. @param endpoints EndpointPair to validate.
538 Returns an iterator that combines nodeU and nodeV iterators.
539 Sets the order of nodes in the graph. @param nodeOrder ElementOrder instance defining node order @return GraphBuilder instance with updated node order
540 Configures incident edge order and returns a new GraphBuilder. @param incidentEdgeOrder ElementOrder for incident edges
541 Returns a transposed graph. If already transposed, returns the original. @param graph The graph to transpose. @return A transposed graph.
542 Returns a transposed version of the input network. @param network The network to transpose. @return A transposed Network or the original if invalid.
543 Returns the original graph if transposed; otherwise, transposes it. @param graph The ValueGraph to potentially transpose. @return The original or transposed ValueGraph.
544 Sets the node order for the network. @param nodeOrder ElementOrder object defining node order @return NetworkBuilder instance with updated node order
545 Sets the edge order for the network. @param edgeOrder The desired edge order. @return A new NetworkBuilder instance with the edge order set.
546 Creates a new builder with specified node order. @param nodeOrder The desired order of nodes in the graph. @return A new ValueGraphBuilder instance.
547 Configures the incident edge order and returns a new builder. @param incidentEdgeOrder The desired order of incident edges.
548 Updates hash state using byte array. @param b byte array to be hashed
549 Updates hash state based on ByteBuffer content. Processes data based on a boolean condition.
550 Updates hash state with specified bytes. @param bytes number of bytes to process @return Current hasher instance
551 Processes a ByteBuffer, adjusting its position and content. @param bb The ByteBuffer to process.
552 Checks if an element is potentially present in the filter. @param input The element to check. @return True if likely present, false otherwise.
553 Creates a BloomFilter collector with given funnel, expected insertions, and FPP.
554 Returns the value of bits from the underlying bit array.
555 Masks a long value to fit within a byte's range. @param value the long value to mask @return the masked byte value
556 Calculates the difference between unsigned integer representations of bytes. @param a the first byte @param b the second byte @return the difference as an unsigned integer
557 Converts a byte to an unsigned string representation in given radix. @param x the byte to convert @param radix the radix (base) to use for conversion
558 Compares this bit array with another, throwing exception if unequal. @param other The other LockFreeBitArray to compare with.
559 Sets the bit at the given index to true, atomically. @param bitIndex the index of the bit to set
560 Masks the hash code based on its length, or converts to int. @return Integer representation of the masked hash code.
561 Converts the masked byte array to a hexadecimal string. @return Hexadecimal string representation of the masked bytes.
562 Combines 8 bytes from array into a long value. @param bytes array of 8 bytes @return long value constructed from the bytes
563 Computes a masked hash value from byte array and seeds. @param bytes input byte array @param offset starting offset @param output stores the resulting hash values
564 Computes hash values from byte array, updating seeds and storing results. @param bytes input byte array @param offset starting offset @param output output array for hash values
565 Masks the value to ensure it's within the unsigned range. @return The masked long value.
566 Performs unsigned integer division. @param dividend The numerator (unsigned). @param divisor The denominator (unsigned).
567 Calculates the remainder of unsigned division. @param dividend The dividend value. @param divisor The divisor value.
568 Creates a Murmur3_32HashFunction with the given seed. @param seed Initial seed value for the hash function.
569 Creates a Murmur3_32HashFunction with the given seed. @param seed Initial seed value for hashing. @return A Murmur3_32HashFunction instance.
570 Creates a Murmur3_128HashFunction with the given seed. @param seed the initial seed for the hash function @return A new Murmur3_128HashFunction instance.
571 Generates a hash bucket index using a linear congruential generator. @param input input value to seed the generator @param buckets number of buckets for the hash function
572 Combines the first four bytes of an array into an integer. @param bytes byte array containing at least four bytes @return A 32-bit integer formed from the first four bytes
573 Copies byte data from an InputStream to an OutputStream. @param from The source InputStream. @param to The destination OutputStream. @return Total number of bytes copied.
574 Counts the total number of bytes read from an InputStream. @param in The input stream to read from. @return The total number of bytes read.
575 Processes input stream bytes using a processor. @param input Input stream to process. @param processor Processor for handling byte data. @return Processed result from the processor.
576 Creates a ByteArrayDataInput from a ByteArrayInputStream. @param byteArrayInputStream Input byte array stream
577 Creates a ByteArrayDataOutputStream from a given ByteArrayOutputStream. @param byteArrayOutputStream The ByteArrayOutputStream to wrap.
578 Constructs a ReaderInputStream with a Reader, encoder, and buffer size. @param reader The Reader to read from. @param encoder The CharsetEncoder to use. @param bufferSize Initial buffer size.
579 Adjusts buffer and sets draining flag based on overflow. @param overflow flag indicating buffer overflow status
580 Copies data from a ReadableByteChannel to a WritableByteChannel. @param from Source channel to read from. @param to Destination channel to write to. @return Number of bytes copied.
581 Reads lines until EOF, populating the buffer. @return Next line or null if EOF. @throws IOException if an I/O error occurs.
582 Skips specified bytes from an input stream. @param in Input stream to skip from. @param n Number of bytes to skip. @return Total bytes skipped.
583 Reads lines from the source as a String stream.
584 Reads all characters from a Readable, summing the counts. @param readable The Readable source to read from. @return Total number of characters read.
585 Constructs a LineReader with a specified readable source. @param readable The readable source to use; must not be null.
586 Closes an InputStream, swallowing IOExceptions. @param inputStream The stream to close, or null.
587 Closes a Reader, throwing an AssertionError on failure. @param reader The Reader to close; may be null.
588 Flushes data to file if memory threshold is exceeded. @param len Number of bytes to be written.
589 Releases the stream, flushes data, and deletes the file.
590 Creates a CharSource from a file using the given charset. @param file The file to create a CharSource for. @param charset Charset for character encoding.
591 Flushes a Flushable object, logging errors if IOException occurs. @param flushable The Flushable object to flush.
592 Throws exception if insecure deletion is not allowed. @param path The path being deleted. @param options Delete options.
593 Creates a CharBuffer with double the capacity, copying data. @param buf The input CharBuffer to copy from.
594 Processes a character buffer, extracting lines based on line endings.
595 Finalizes a line if return is requested or line is full. Calls finishLine(false) to process the line.
596 Reads two bytes and combines them into an integer. @return A 32-bit integer formed from the bytes.
597 Reads four bytes and combines them into a 32-bit integer.
598 Reads 8 bytes and combines them into a long value (little-endian). @return long value formed from the read bytes @throws IOException if an I/O error occurs
599 Writes an integer to the stream in little-endian order. @param v The integer value to write.
600 Writes a float to the stream in little-endian byte order. @param v The float value to write.
601 Writes a long value to the stream in little-endian byte order. @param v The long value to write.
602 Collects IOExceptions encountered while traversing a directory. @param path Path of the directory to traverse. @return Collection of IOExceptions, or null if successful.
603 Collects IOExceptions during directory processing. @param dir SecureDirectoryStream to iterate through paths @return Collection of IOExceptions or null if none occurred
604 Reads data from the next input stream, updating 'in'.
605 Reads data; updates current resource if available.
606 Creates a CharSource from a URL using the given charset. @param url The URL of the resource. @param charset Charset to use for character encoding.
607 Divides p by q with rounding according to the specified mode. @param p dividend @param q divisor @param mode rounding mode @return quotient after rounding
608 Calculates factorial, handling large inputs and applying a multiplier. @param n Integer input for factorial calculation. @return Double value of the factorial, or infinity if too large.
609 Calculates a masked value based on base 'b' and exponent 'k'. @param b The base value. @param k The exponent value.
610 Calculates a value based on input integers a and b. @param a First integer input. @param b Second integer input. @return Result of the calculation.
611 Returns factorial from array or MAX_VALUE if out of bounds. @param n Integer index for factorial lookup. @return Factorial at index n or Integer.MAX_VALUE.
612 Calculates binomial coefficient (n choose k). @param n non-negative integer @param k non-negative integer <= n
613 Calculates b^k for small b. @param b The base value. @param k The exponent value.
614 Returns factorial for n, or Long.MAX_VALUE if out of bounds. @param n Non-negative integer for factorial calculation.
615 Creates a LinearTransformationBuilder with a mask based on x1 & y1. @param x1 x-coordinate for mask calculation @param y1 y-coordinate for mask calculation
616 Checks if two doubles are nearly equal within a tolerance. @param a First double value. @param b Second double value. @param tolerance Tolerance for near equality.
617 Rounds a value based on the specified rounding mode. @param x The value to round. @param mode Rounding mode to apply.
618 Calculates the ceiling power of two for a given int. @param x The input integer. @throws ArithmeticException if x is too large.
619 Calculates the masked value of x. @param x Integer value to mask. @return The masked integer value.
620 Calculates an integer representation based on rounding mode. @param x Value to round. @param mode Rounding mode to apply.
621 Calculates the integer square root with rounding based on mode. @param x The input integer. @param mode Rounding mode to apply. @return Integer square root.
622 Adds two integers safely, throwing an exception on overflow. @param a, b Integers to be added.
623 Subtracts two integers, ensuring no overflow. @param a, b Integers to subtract. Returns the result.
624 Multiplies two integers, throwing ArithmeticException on overflow. @param a, b Integers to multiply.
625 Checks if a number is likely prime using Miller-Rabin. @param base base for the test @param n number to test for primality @return true if likely prime, false otherwise
626 Calculates the floor power of two for a long value. @param x the long value to calculate the floor power of two for.
627 Masks a long value. @param x the value to mask @return masked long value
628 Calculates the number of leading zeros in a long. @param x long value to check @param mode RoundingMode to use for calculation
629 Calculates a masked value based on input longs a and b. @param a First long value. @param b Second long value. @return Masked long value.
630 Calls overloaded method with long m, casts int m to long.
631 Adds two long integers, checking for potential overflow. @param a, b Input long values to be added.
632 Subtracts two long values, checking for overflow. @param a, b Values to subtract.
633 Multiplies two longs, throwing ArithmeticException on overflow. @param a, b Input long values to be multiplied.
634 Delegates the call to the wrapped statistics. @return The result of the wrapped statistics' m1() method.
635 Checks if this PairedStats object is equal to another. @param obj The object to compare to. @return True if objects are equal, false otherwise.
636 Default constructor for the PairedStatsAccumulator class.
637 Returns a value based on previousMean and value, NaN if invalid. @param previousMean The previous mean value. @param value The new value to consider.
638 Delegates to the wrapped stats accumulator. @return Long value from the wrapped stats.
639 Creates a ScaleAndIndex object with scale 2 and index 1.
640 Returns a Scale object with a scale of 4.
641 Creates a Scale object with a scale of 100. @return A Scale object initialized with a scale of 100.
642 Recursively sorts a portion of the array based on comparisons. @param array The array to sort. @param from Starting index (inclusive). @param to Ending index (inclusive).
643 Creates a Stats object from a ByteBuffer, validating its size. @param buffer ByteBuffer containing stats data @return Stats object initialized with data from buffer
644 Creates a Stats object with accumulated statistical values.
645 Returns the port number. Validates it using m2(m1()).
646 Returns the port, or defaultPort if no port is configured.
647 Constructs a string representation of the host and port. Includes brackets for IPv6 hosts. Appends port if valid.
648 Creates a HostAndPort instance, validating the port. @param defaultPort Default port number to use.
649 Converts an InetAddress to its IPv6 string representation. @param ip The InetAddress to convert. @return The IPv6 string representation of the address.
650 Checks if an Inet6Address is a Teredo IPv6 address. @param ip The Inet6Address to check. @return True if it's a Teredo address, false otherwise.
651 Checks if an Inet6Address is a Teredo address. @param ip The Inet6Address to check. @return True if Teredo, false otherwise.
652 Converts a Collection<Boolean> to a boolean array. Uses BooleanArrayAsList.m1() if the collection is a BooleanArrayAsList.
653 Searches for target in array[0, array.length). @param array boolean array to search @param target boolean value to search for @return index of target or -1 if not found
654 Finds last index of target in array, within specified bounds.
655 Converts a collection of Numbers to a byte array. Handles ByteArrayAsList directly; otherwise boxes and converts.
656 Searches for the first occurrence of a byte in a byte array. @param array byte array to search @param target byte to search for
657 Finds the last index of target byte within array. @param array byte array to search @param target byte value to find
658 Converts a Collection<Character> to a char array. Handles CharArrayAsList directly; otherwise boxes/unboxes.
659 Finds the index of target char within array. @param array char array to search @param target char to find
660 Finds the last index of a character in a char array. @param array char array to search @param target char to find
661 Converts a byte array to a char. @param bytes Byte array to convert. @return A char represented by the first two bytes.
662 Calculates a hash code for the double array segment. Uses a loop to incorporate each double value.
663 Converts a collection of Numbers to a double array. @param collection Collection of Number objects @return Double array representing the collection
664 Searches for target in array. @param array array to search @param target value to search for
665 Searches array for target in reverse order. @param array Array of doubles to search. @param target Value to search for.
666 Converts a collection of Numbers to a float array. @param collection Collection of Number objects. @return Float array representation of the collection.
667 Searches for target float in array. @param array array to search, @param target value to find
668 Searches for target value in float array (reverse). @param array Array to search. @param target Value to search.
669 Creates a Builder for an ImmutableDoubleArray with initial capacity. @param initialCapacity the initial size of the double array
670 Returns a new Builder instance with an initial capacity of 10.
671 Finds the index of the first element equal to target. @param target The value to search for. @return Index relative to start, or -1 if not found.
672 Finds the index of the first element equal to target, from end. @param target The value to search for. @return Index relative to start, or -1 if not found.
673 Returns a string representation of the double array. Returns "[]" if the array is empty.
674 Checks if the target value exists in the array. @param target the integer to check for presence @return true if target is found, false otherwise
675 Creates a Builder with the specified initial capacity. @param initialCapacity the initial size of the array
676 Returns a new Builder with an initial capacity of 10.
677 Calculates a hash code for the array segment. Uses a loop to compute the hash based on array elements.
678 Returns a string representation of the immutable int array. Returns "[]" if the array is empty.
679 Checks if the target value exists in the array. @param target The value to search for. @return True if found, false otherwise.
680 Creates a builder with the specified initial capacity. @param initialCapacity the initial size of the builder
681 Returns a new builder with an initial capacity of 10.
682 Calculates a hash code for the array segment. @return The calculated hash code.
683 Returns a string representation of the long array. Returns "[]" if the array is empty.
684 Converts a collection of Numbers to an int array. @param collection Collection of Number objects @return int array representation of the collection
685 Searches for target in array within specified bounds. @param array Array to search. @param target Value to search for.
686 Finds the last index of target in array. @param array array to search @param target value to search for
687 Converts a collection of Numbers to a long array. Handles LongArrayAsList directly; otherwise boxes and converts.
688 Searches for target in array. @param array array to search @param target value to search for
689 Finds the last index of target in array. @param array array to search @param target value to search for
690 Parses a string representation of a long, handling radix. @param string String to parse. @param radix Radix of the number. @return Long value or null if parsing fails.
691 Converts a collection of Numbers to a short array. If a ShortArrayAsList, returns its underlying array.
692 Searches for target short within array. @param array Array to search. @param target Value to search for.
693 Finds the last index of target in array within specified bounds. @param array The array to search. @param target The value to search for.
694 Extracts a short from the first two bytes of an array. @param bytes Array of bytes to extract the short from @return Short value represented by the first two bytes
695 Returns a byte array comparator, preferring UNSAFE_COMPARATOR if available.
696 Creates an UnsignedInteger from the given bits. @param bits The unsigned integer value (32 bits). @return A new UnsignedInteger object.
697 Converts the unsigned integer value to a string in the given radix. @param radix The radix to use for conversion.
698 Converts an integer to a string in base 10. @param x The integer to convert.
699 Calculates a value based on input integers using helper methods. @param a The first integer. @param b The second integer.
700 Creates a new UnsignedLong from the given bits. @param bits The unsigned long value to represent.
701 Compares two unsigned longs. @param a The first unsigned long. @param b The second unsigned long.
702 Parses a string to an unsigned long, with radix. @param string The string to parse. @param radix The radix (base) of the number. @return The unsigned long value.
703 Handles method invocation on a proxy, delegating to specific logic. @param proxy The proxy object. @param method The invoked method. @param args Method arguments. @return Result of method invocation or delegated result.
704 Delegates class name retrieval to Reflection utility.
705 Extracts package name from a Class object. @param clazz The class to extract the package from. @return The package name.
706 Creates a ByteSource from the resource URL. Uses `Resources.asByteSource` to create the ByteSource.
707 Returns true if the member is accessible. Uses the modifiers from the wrapped member. @return True if accessible, false otherwise.
708 Returns true if the member is accessible. Uses Modifier.isAccessible(int modifiers) with modifiers from m1().
709 Returns true if the wrapped member is abstract. Uses the modifiers obtained from m1() to determine this.
710 Returns true if the member is accessible. Uses the modifiers from the wrapped member. @return True if accessible, false otherwise.
711 Returns true if the wrapped member is accessible. Uses Modifier.isAccessible(int modifiers) with modifiers from m1().
712 Returns true if the wrapped member is abstract. Uses the modifiers value retrieved from m1().
713 Returns true if the member is accessible. Uses the modifiers from the wrapped member. @return True if accessible, false otherwise.
714 Returns true if the member is accessible. Uses the modifiers from the wrapped member. @return True if accessible, false otherwise.
715 Checks if the member is accessible. @return True if accessible, false otherwise.
716 Checks if the member is abstract. @return True if abstract, false otherwise.
717 Checks if a type is a TypeVariable and compares it. @param type The type to check. @return True if it's a TypeVariable and equals.
718 Creates a TypeToken for the given class. @param type The class to create a TypeToken for.
719 Creates a SimpleTypeToken from the given Java type. @param type The Java Type to be encapsulated. @return A SimpleTypeToken representing the given type.
720 Handles task results: throws exceptions or returns null. @param <V> Result type; can be null. @param obj The result object to process. @return Result or null if cancelled/failed.
721 Adds a listener to be executed when the future completes. @param listener Runnable to execute. @param executor Executor to run the listener.
722 Sets the result of a related future if it exists and is cancelled. @param related The future to potentially set the result on.
723 Submits a callable task and returns a ListenableFuture. @param task The callable task to execute. @return ListenableFuture representing task execution.
724 Schedules a task with cancellation support on the executor. @param service The AbstractService to associate with the task. @param executor The ScheduledExecutorService to use. @param runnable The task to be executed.
725 Schedules a task for execution with a specified executor. @param service The service to be scheduled. @param executor Executor for task execution. @param runnable Runnable task to be scheduled.
726 Executes tasks concurrently with a timeout. @param tasks Collection of Callable tasks. @param timeout Timeout duration. @return List of Future objects representing task results.
727 Executes tasks with a timeout. @param tasks Collection of Callable tasks. @param timeout Timeout duration. @return Result of the first completed task.
728 Executes callable with timeout. Returns true on success, false otherwise. @param timeout Timeout duration. @throws InterruptedException If interrupted while waiting.
729 Schedules a Callable with a delay. @param callable The Callable to execute. @param delay The delay before execution.
730 Schedules a task for delayed and periodic execution. @param command The task to execute. @param initialDelay Initial delay before first execution. @param period Period between executions.
731 Schedules a task for execution after an initial delay, then repeatedly. @param command The task to execute. @param initialDelay Initial delay before first execution. @param delay Period between repeated executions.
732 Waits for the service to start, with a timeout. @param timeout Duration to wait; throws TimeoutException if exceeded.
733 Waits for the service to start, with a timeout. @param timeout Duration to wait; throws TimeoutException if exceeded.
734 Executes a task with a timeout. @param target The object to execute on. @param interfaceType The interface type of the target. @param timeout The timeout duration.
735 Executes a Callable with a timeout. @param callable Callable to execute. @param timeout Timeout duration. @return Result of the Callable, or null if interrupted.
736 Executes a Callable with a timeout. @param callable Callable to execute. @param timeout Timeout duration. @return Result of Callable or null if interrupted.
737 Executes a Runnable with a timeout. @param runnable Runnable to execute. @param timeout Timeout duration. @throws TimeoutException, InterruptedException
738 Executes a Runnable with a timeout. @param runnable Runnable to execute. @param timeout Timeout duration. @throws TimeoutException if execution exceeds timeout.
739 Creates a ScheduledExecutorService with a custom ThreadFactory. Registers a listener to shutdown the executor on state changes.
740 Logs an exception, potentially halting further processing. @param throwable The exception to log and handle.
741 Returns a string representation of the double value. Uses m1() to get the double value.
742 Returns the result of m1, cast to an integer.
743 Returns the result of m1() cast to a long.
744 Returns the result of m1 as a float.
745 Returns the double value by applying m1.
746 Writes the double value to the output stream. Writes the current value (m2) to the stream 's'.
747 Reads data from the input stream and processes it. @param s Input stream for reading and processing data.
748 Atomically updates the value using the provided function. @param x Value to be used in the update function. @param accumulatorFunction Function to calculate the next value. @return The previous value before the update.
749 Atomically updates the double value using the provided function. @param x The value to apply to the accumulator function. @param accumulatorFunction Function to apply to the current value. @return The updated double value.
750 Returns a string representation of the double array. Returns "[]" if the array is empty.
751 Writes the array to the specified output stream. Writes length and then each element to the stream.
752 Atomically updates array element at index i using accumulator. @param i index of element to update @param x value to apply to the element @param accumulatorFunction function to apply to element @return updated value
753 Atomically updates array element at index i using accumulator. @param i index of element to update @param x value to accumulate with current value @param accumulatorFunction function to accumulate with current value
754 Atomically sets the value associated with the key to 0. @param key The key whose value is to be set to 0. @return True if update occurred, false otherwise.
755 Returns a map view of the long values. Uses cached map if available.
756 Atomically updates value if expectedOldValue matches. @param key The key of the value to update. @param expectedOldValue The expected value. @param newValue The new value to set.
757 Checks state and closes future if possible, otherwise throws. Returns the future.
758 Completes the future with a value and closes resources. @param consumer Consumer to process the value and closer. @param executor Executor for asynchronous execution.
759 Adds a runnable task to the execution list, ensuring executor is valid. @param runnable Task to add. @param executor Executor to use for task execution.
760 Reverses and executes the list of runnable tasks, ensuring execution only once.
761 Handles exceptions with a fallback function and executor. @param exceptionType Exception type to catch. @param fallback Fallback function. @param executor Executor for fallback.
762 Transforms the future using a function on a given executor. @param function Transformation function. @param executor Executor for asynchronous execution.
763 Creates a ListenableFuture from a value, or NULL if value is null. @param value The value for the future, or null to return NULL.
764 Creates a failed ListenableFuture with the given exception. @param throwable The exception that caused the failure.
765 Returns a cancelled listenable future. Returns an instance or creates a new one.
766 Returns the best GetCheckedTypeValidator, falling back to weakSetValidator.
767 Iterates through listeners and dispatches events. Loops through registered listeners and calls their m2().
768 Constructs a Monitor with unfair locking.
769 Attempts to acquire the lock within the given duration. @param time The duration to wait for the lock.
770 Attempts to satisfy the guard within a time limit. @param guard Guard to satisfy. @param time Time limit. @return True if guard is satisfied, false otherwise.
771 Checks if any threads are waiting on the given guard. @param guard The guard object to check. @return True if threads are waiting, false otherwise.
772 Executes guard's m2 method, handles exceptions, and signals waiters.
773 Shuts down an ExecutorService and awaits termination. @param service ExecutorService to shutdown. @param timeout Duration timeout for shutdown.
774 Sleeps for the given duration, handling thread interruptions. @param sleepFor The duration to sleep for.
775 Sets the rate limit. @param permitsPerSecond The number of permits per second.
776 Returns a masked value, synchronizing access via mutex.
777 Returns a new SettableFuture instance.
778 Gets the Future's result within a timeout, ignoring interruptions. @param future Future to retrieve the result from. @param timeout Timeout duration. @return Future's result or throws TimeoutException.
779 Creates a striped read-write lock with the given number of stripes. @param stripes number of stripes for the lock @return Striped<ReadWriteLock> object
780 Creates a CompactStriped lock manager with specified stripes. @param stripes Number of stripes for the lock manager.
781 Creates a Striped lock manager with specified stripes and permits. @param stripes Number of stripes. @param permits Initial permits for each stripe. @return A new Striped lock manager.
782 Creates a Striped<ReadWriteLock> with specified stripes. @param stripes Number of stripes for the striped lock.
783 Creates a ThreadFactory using the builder's configuration.
784 Creates a TrustedListenableFutureTask for a Runnable. @param runnable The Runnable to execute. @param result The result of the Runnable. @return A TrustedListenableFutureTask.
785 Waits on a CountDownLatch with a timeout, handling interruptions. @param latch Latch to wait on. @param timeout Duration to wait. @return True if latch counts down, false if timeout elapses.
786 Waits on a condition with a Duration timeout. @param condition Condition to wait on @param timeout Duration to wait @return True if condition met, false if timeout expired
787 Acquires a permit from the Semaphore, respecting the timeout. @param semaphore Semaphore to acquire. @param timeout Timeout value. @param unit Time unit of the timeout. @return True if acquired, false if timeout.
788 Acquires permits from a Semaphore, respecting timeout. @param semaphore Semaphore to acquire permits from. @param permits Number of permits to acquire. @param timeout Duration representing the timeout.
789 Attempts to acquire lock within given timeout. @param lock The lock to acquire. @param timeout The timeout duration. @return True if lock acquired, false otherwise.
790 Checks executor completion within timeout. @param executor ExecutorService to check. @param timeout Duration until completion. @return True if executor is done, false otherwise.
791 Returns PublicSuffixType matching given code in inner/leaf node. @param code The code to match. @throws IllegalArgumentException if no match is found.
792 Creates an Optional containing the result of m1(reference). @param <T> The type of the reference. @param reference The reference to process.
793 Creates a new Stopwatch instance using the provided Ticker. @param ticker The Ticker to use for time measurement.
794 Returns the index of the first element matching the predicate. @param iterable Iterable to search. @param predicate Predicate to test each element.
795 Checks if an element matching the predicate exists in the iterator. @param iterator Iterator to search. @param predicate Predicate to test each element.
796 Creates a SortedSetMultimapBuilder with natural ordering. @return SortedSetMultimapBuilder instance with natural ordering.
797 Creates a Collector for building an ImmutableTable. @param rowFunction Extracts row keys. @param columnFunction Extracts column keys. @param valueFunction Extracts values. @param mergeFunction Merges values for duplicate keys.
798 Creates a predicate checking equivalence with the target. @param target The value to compare against for equivalence. @return A Predicate that checks for equivalence.
799 Creates a Function from a map and default value. @param map the map to use @param defaultValue default value if key is absent @return Function that maps keys to values from the map
800 Creates a FunctionComposition from functions f and g. @param <A> Input type of f @param <B> Input type of g @param <C> Return type of g @param g Function from B to C @param f Function from A to B @return FunctionComposition object
801 Creates a Function from a map. @param map The map to create the function from. @return A Function that maps keys to values.
802 Creates a Splitter using the given Pattern. @param separatorPattern The regex pattern to use for splitting.
803 Creates a Joiner instance with the given separator. @param separator Separator string for joining elements.
804 Creates a Joiner with the given char as separator. @param separator The character to use as a separator. @return A new Joiner instance.
805 Creates a MapJoiner, replacing null values with the given text. @param nullText Replacement text for null values @return A new MapJoiner instance
806 Creates a Splitter using the provided separator pattern. @param separatorPattern Pattern string for splitting. @return A Splitter instance configured with the pattern.
807 Creates a predicate that checks if a CharSequence contains a pattern. @param pattern The regex pattern to search for. @return A Predicate<CharSequence>
808 Returns a predicate that negates the given predicate. @param predicate Predicate to be negated; must not be null
809 Creates an AND predicate from a collection of predicates. @param components Iterable of predicates to combine. @return An AndPredicate combining the input predicates.
810 Creates an "OR" predicate from a collection of predicates. @param components Iterable of predicates to combine. @return An OrPredicate combining the input predicates.
811 Splits a sequence into a map of key-value pairs. @param sequence CharSequence to split into map entries @return Map of String keys and String values
812 Splits a sequence into a stream of strings. @param sequence CharSequence to split. @return Stream of strings resulting from the split.
813 Wraps a Supplier with memoization, handling serialization. @param delegate The Supplier to memoize. @return Memoized Supplier.
814 Creates a SupplierComposition with a provided function and supplier. @param function Transforms the supplier's value. @param supplier Provides the initial value for transformation.
815 Wraps a Supplier in a thread-safe manner. @param delegate The Supplier to wrap. @return A ThreadSafeSupplier.
816 Re-throws the throwable if its type matches the declared type.
817 Re-throws the throwable as RuntimeException/Error if unchecked. @param throwable The throwable to check and re-throw, or null.
818 Wraps a throwable in a RuntimeException. @param throwable The throwable to wrap. @return A RuntimeException containing the throwable.
819 Extracts stack trace elements from a throwable. Uses m1/m5 or m4/m3 based on a condition.
820 Creates a new reference entry within the appropriate segment. @param key The key. @param hash The hash code. @param next The next entry.
821 Creates a RemovalNotification with the given key, value, and cause. @param key the removed key @param value the removed value @param cause the removal cause @return RemovalNotification object
822 Creates a multiset collector. @param elementFunction Maps element to type E. @param countFunction Returns count for element. @param multisetSupplier Creates initial multiset.
823 Creates a multimap collector. @param keyFunction Extracts the key from an input element. @param valueFunction Extracts the value from an input element. @param multimapSupplier Supplies the initial Multimap.
824 Creates a multimap collector. @param keyFunction Extracts key from input. @param valueFunction Extracts stream of values from input. @param multimapSupplier Supplies initial multimap.
825 Creates a TransformedCollection from a collection and function. @param fromCollection Source collection to transform. @param function Transformation function.
826 Checks if iterable contains element. @param iterable Iterable to search. @param element Element to check for. @return True if found, false otherwise.
827 Returns a view of the set containing elements up to {@code toElement}. @param toElement Element to which the set extends. @param inclusive Whether {@code toElement} is included.
828 Returns a view of the set containing elements >= fromElement. @param fromElement Lower bound (inclusive) of the range. @param inclusive Whether fromElement is inclusive. @return ContiguousSet view of elements >= fromElement.
829 Adds an element to the queue. Returns true if successful.
830 Sets the comparator for keys. Returns this builder for chaining.
831 Sets the key comparator. Returns this builder for chaining.
832 Sets the value comparator. @param valueComparator Comparator for sorting values; null resets. @return {@code this} for method chaining.
833 Adds an element to the builder and returns the builder. @param element The element to add. @return The builder instance for chaining.
834 Adds specified occurrences of an element. @param element Element to add. @param occurrences Number of times to add.
835 Adds an element with a specified count to the builder. @param element element to add @param count the number of times to add the element
836 Creates a collector for immutable sorted multisets. @param comparator Comparator for element ordering.
837 Returns a sorted set containing elements up to `toElement`. @param toElement The element to which the set is truncated.
838 Returns a view of the set containing elements from `fromElement`. @param fromElement Element to start iteration at.
839 Returns a FluentIterable from the iterable, masking elements. Uses an internal mask function on the underlying iterable.
840 Filters the iterable based on the provided predicate. @param predicate Predicate to filter elements. @return A FluentIterable containing filtered elements.
841 Filters an iterable to return only elements of the desired type. @param unfiltered Iterable to filter. @param desiredType Class of elements to retain. @return Iterable containing only elements of the desired type.
842 Transforms elements of the iterable using a function. @param function Transformation function from E to T. @return A FluentIterable with transformed elements.
843 Returns a PeekingIterator from the given iterator. @param iterator The iterator to wrap. @return A PeekingIterator wrapping the given iterator.
844 Removes all elements from iterable that are present in collection. @param removeFrom Iterable to remove elements from. @param elementsToRemove Collection of elements to remove.
845 Removes elements from an iterable that satisfy the predicate. @param removeFrom Iterable to remove elements from. @param predicate Predicate to determine which elements to remove.
846 Retains elements from iterable based on a collection. @param removeFrom Iterable to filter elements from. @param elementsToRetain Collection to retain elements. @return True if any elements were removed.
847 Delegates to the wrapped collection's iterator. @param collection Collection to iterate over. @return True if the iterator has next element.
848 Adds elements from an iterable to a collection. @param addTo Collection to add elements to. @param elementsToAdd Iterable providing elements to add. @return True if the collection was modified.
849 Creates an ArrayList from an iterator of elements. @param elements Iterator providing elements for the list. @return ArrayList containing elements from the iterator.
850 Creates a HashSet from elements provided by an iterator. @param elements Iterator providing elements for the HashSet. @return A new HashSet containing the elements from the iterator.
851 Filters iterator to desired type. @param unfiltered Iterator to filter. @param desiredType Class of elements to keep. @return Iterator containing only elements of desiredType.
852 Checks if all elements in the iterable satisfy the predicate. @param iterable Iterable to check. @param predicate Predicate to test each element.
853 Finds the first element in the iterable that satisfies the predicate. @param iterable Iterable to search. @param predicate Predicate to test each element.
854 Clears all values associated with the given key. @param key The key whose values should be removed.
855 Creates a list iterator for the given list, starting at the specified index. @param list the list to create the iterator for @param index the starting index for the iterator @return A ListIterator for the list, starting at the given index
856 Creates a OnePlusArrayList from a first element and rest array. @param first The first element of the list. @param rest The array of additional elements.
857 Creates a transforming list, random-access if possible. @param fromList Source list to transform. @param function Transformation function.
858 Creates a TwoPlusArrayList from the provided first, second elements, and array.
859 Creates an AsMapView from a set and a function. @param set The set of keys for the map. @param function Maps keys to values.
860 Creates a NavigableMap from a NavigableSet and a function. @param set NavigableSet of keys @param function Function to map keys to values @return A NavigableMap
861 Creates a TransformedEntriesMap from a map and transformer. @param fromMap Source map. @param transformer Transforms map entries. @return Transformed map.
862 Checks if a collection contains an entry equal to the given object. @param c Collection to check. @param o Object to check for equality.
863 Checks if a collection contains an entry equal to the given object. @param c Collection of entries. @param o Object to check for equality. @return True if the collection contains the entry, false otherwise.
864 Returns the count of an element. @param element The element to count. @return The count of the element, or 0 if not present.
865 Attempts to decrement element count in a thread-safe manner. @param element The element to decrement. @param occurrences Number of occurrences to subtract. @return True if successful, false otherwise.
866 Adds or updates the count of an element in the multiset. @param element element to add or update @param count the new count for the element @return the previous count, or 0 if element was not present
867 Atomically updates element count. @param element element to update @param expectedOldCount expected old count @param newCount new count for the element @return true if update succeeded, false otherwise
868 Removes all values associated with a key, updating totalSize. @param key The key whose values are to be removed.
869 Returns a MultimapBuilderWithKeys using natural ordering. @return MultimapBuilderWithKeys instance with natural ordering.
870 Creates a MapMultimap from a given map. @param map the map to initialize the MapMultimap from @return a new MapMultimap instance
871 Creates a transformed multimap by applying a transformer. @param fromMap source multimap @param transformer transforms entries from the source multimap @return A Multimap with transformed values.
872 Adds elements from an iterable to the builder, handling Multisets. @param elements Iterable of elements to add. @return The builder instance for chaining.
873 Adds all elements from another multiset to the current one. @param elements Multiset to add elements from @return True if successful, false otherwise.
874 Retains elements in a multiset based on counts in another. @param multisetToModify Multiset to modify. @param multisetToRetain Multiset defining counts to retain.
875 Removes occurrences from a multiset. @param multisetToModify Multiset to modify. @param occurrencesToRemove Elements to remove. @return True if the multiset was modified.
876 Retains elements present in the given collection. @param elementsToRetain Collection of elements to retain
877 Drains elements from a queue into a collection. @param q queue to drain from @param buffer collection to drain into @param numElements max elements to drain @param timeout timeout for draining @return number of elements drained
878 Drains elements from a queue into a collection, with timeout. @param q queue, buffer, numElements, timeout, unit @return number of elements drained
879 Checks if input is within the range, exclusive of bounds. @param input The value to check. @return True if input is strictly within the range.
880 Checks if all values in the iterable satisfy the range condition. @param values Iterable of comparable values to check. @return True if all values are within the range.
881 Processes two streams by applying a consumer to paired elements. @param streamA First stream. @param streamB Second stream. @param consumer Function to apply to paired elements.
882 Creates a TableCollector using provided functions and supplier. @param tableSupplier Supplier for the initial Table object.
883 Creates a transformed table applying a function to each value. @param fromTable The source table. @param function Transformation function from V1 to V2. @return A new Table with transformed values.
884 Returns the original table if already transposed, otherwise transposes it. @param table The Table to transpose. @return The original or transposed Table.
885 Creates an ArrayBasedEscaperMap from a map of character replacements. @param replacements Map of characters to their string replacements.
886 Adds escape mappings for characters in the provided array. @param cs Array of characters to escape. @param r Replacement string for all characters. @return A reference to this builder.
887 Finds the index where escaping starts in a CharSequence. @param csq CharSequence to check. @param start Start index. @param end End index (exclusive).
888 Creates a SubscriberExceptionContext for the given event. @param event The event that triggered the context creation
889 Creates a funnel for iterables of type E using the given element funnel. @param elementFunnel Funnel to process individual elements. @return SequentialFunnel for iterables of type E.
890 Wraps a PrimitiveSink as an OutputStream. @param sink The sink to wrap. @return An OutputStream backed by the sink.
891 Creates a StringCharsetFunnel for CharSequence, using the given charset. @param charset Charset used to encode the CharSequence.
892 Returns a Writer, either the target or a new AppendableWriter. @param target Appendable to use; returns if it's a Writer.
893 Encodes a CharSequence to a byte array. @param chars CharSequence to encode; delegates to m1. @return Encoded byte array.
894 Creates a Closer instance using the SUPPRESSING_SUPPRESSOR. Returns a Closer object for managing Closeable resources.
895 Constructs a PatternFilenameFilter with a regex pattern. @param patternStr the regex pattern string to use
896 Calculates the floor of the base-2 logarithm of a BigInteger. @param x BigInteger to calculate log floor. @param mode RoundingMode to apply during calculation.
897 Parses a string as an unsigned byte, using radix 10. @param string Byte string to parse @return unsigned byte value
898 Parses a string as an unsigned integer with radix 10. @param s The string to parse. @return The unsigned integer value.
899 Creates a TypeVariableKey if 't' is a TypeVariable, else null. @param t The type to check; must not be null. @return TypeVariableKey or null.
900 Extracts result from a Future, handling exceptions and cancellations. @param future Future object to extract the result from.
901 Creates a schedule with the specified duration delay. @param delay The duration delay for the schedule.
902 Creates an AtomicLongMap with a new ConcurrentHashMap.
903 Atomically updates the value associated with the given key. @param key The key to update. @param x The value to add to the current value. @param accumulatorFunction Function to calculate the new value.
904 Atomically updates the value associated with the key. @param key The key to update. @param x The value to add to the current value. @param accumulatorFunction Function to accumulate the value.
905 Sets the value associated with the key to newValue atomically. @param key The key to set the value for. @param newValue The new value to set.
906 Adds a closeable resource for later closure, using the executor. @param closeable Resource to add; null is allowed. @param closingExecutor Executor for asynchronous closure. @return The provided closeable object.
907 Creates a CycleDetectingLockFactory with the given locking policy. @param policy The locking policy to use. Must not be null.
908 Wraps an executor in a SequentialExecutor for sequential task execution. @param delegate The executor to wrap. @return A SequentialExecutor.
909 Creates a `SimpleTimeLimiter` with the provided executor. @param executor ExecutorService for timed task execution.
910 Waits for a thread to finish, with a timeout in Duration. @param toJoin thread to wait for @param timeout Timeout duration.
911 Creates an ElementOrder with unordered type and no comparator.
912 Creates a stable ElementOrder with no comparator.
913 Creates an ElementOrder with insertion type and no comparator.
914 Returns an ElementOrder with SORTED type and natural ordering.
915 Creates an ElementOrder using SORTED type and provided comparator. @param comparator Comparator used for sorting the elements.
916 Returns a CountDownLatch for tracking closure state.
917 Converts CharSequence to a lowercase string. Handles String input.
918 Converts CharSequence to String, converting each char. @param chars CharSequence to convert; handles String type.
919 Creates a byte array containing paired stats. Uses ByteBuffer to store xStats, yStats, and sumOfProducts.
920 Converts data to byte array using ByteBuffer. Uses ByteBuffer to process data and returns the byte array.
921 Initializes metadata with a size between 1 and MAX_SIZE. @param expectedSize The expected size of the metadata array.
922 Initializes metadata with a clamped size. @param expectedSize The expected size of the set.
923 Creates an And matcher combining this matcher with another. @param other The CharMatcher to combine with this one.
924 Returns a CharMatcher that checks characters with the given predicate. @param predicate Predicate to check characters against.
925 Returns a new CharMatcher that combines this matcher with another. @param other The other CharMatcher to combine with this one.
926 Creates an InRange CharMatcher for characters within a range. @param startInclusive start of the range (inclusive) @param endInclusive end of the range (inclusive)
927 Calculates the difference between this CacheStats and another. @param other The CacheStats object to subtract. @return A new CacheStats object representing the difference.
928 Adds another CacheStats object to the current one. @param other The CacheStats object to add. @return A new CacheStats object with combined metrics.
929 Constructs an AbstractListMultimap from the given map. @param map The map to use for initialization.
930 Constructs an AbstractSetMultimap from a map. @param map The map to use for initialization.
931 Returns a view of the elements within the specified range. @param fromElement start element (inclusive) @param toElement end element (inclusive)
932 Creates a new `EnumMultiset` for the given enum type. @param type The enum class for the multiset.
933 Returns a sub-set of elements between fromElement and toElement. @param fromElement start element (inclusive) @param toElement end element (inclusive)
934 Creates an iterator of lists from an Iterator, padded with nulls. @param iterator Iterator to convert @param size desired list size
935 Creates an iterator of lists from an iterator, padding with nulls. @param iterator Iterator to convert @param size desired list size
936 Creates a builder with a specified expected size. @param expectedSize The expected number of elements. @return Builder instance for configuring the queue.
937 Creates a builder for a priority queue with max size. @param maximumSize The maximum number of elements allowed.
938 Constructs a StreamingHasher with the chunk size as buffer size.
939 Calculates variance. Returns NaN if sumOfSquaresOfDeltas is invalid.
940 Calculates variance. Throws IllegalStateException if count <= 1.
941 Calculates the sample variance. Throws exception if count is zero.
942 Calculates the sample variance. Throws exception if invalid.
943 Returns a CharMatcher based on the input sequence. Returns FUNC_MASK, AnyOf, or a custom matcher.
944 Masks characters in a sequence based on matching criteria. @param sequence CharSequence to process @param replacement Replacement character for masked chars
945 Creates a FunctionalEquivalence using the given function and this equivalence. @param function Function to apply to objects. @return FunctionalEquivalence instance.
946 Returns a new Equivalence for Iterable, using this Equivalence.
947 Compares two iterables for equality. Returns false if sizes differ.
948 Checks if two lists are equal. @param other The list to compare to. @return True if lists are equal, false otherwise.
949 Creates a new ConcurrentHashMultiset with a ConcurrentHashMap. Returns the newly created multiset instance.
950 Creates a ConcurrentHashMultiset using the provided count map. @param countMap The backing map for element counts.
951 Appends iterable parts to an appendable, separated by a separator. @param appendable The appendable to write to. @param parts Iterable of parts to append. @return The appendable after appending.
952 Appends elements from an iterator to a StringBuilder. @param builder StringBuilder to append to. @param parts Iterator of elements to append.
953 Appends map entries to a StringBuilder. @param builder StringBuilder to append to @param map Map containing entries to append @return The StringBuilder instance
954 Converts an iterable of entries to a string representation. @param entries Iterable of map entries @return String representation of the entries
955 Adds a value to the helper. @param value The value to add. @return The ToStringHelper instance.
956 Adds a name-value pair to the helper. @param name Property name. @param value Property value. @return The ToStringHelper instance.
957 Adds a boolean value to the helper, converted to a string. @param value The boolean value to add. @return The ToStringHelper instance.
958 Adds a char value to the helper, converting it to a string. @param value The char value to add. @return The ToStringHelper instance.
959 Adds a double value to the helper, formatted as a string. @param value The double value to add. @return The ToStringHelper instance.
960 Adds a float value to the helper, formatted as a string. @param value The float value to add. @return The ToStringHelper instance.
961 Adds a value to the helper, formatted as a string. @param value The integer value to format and add. @return The ToStringHelper instance.
962 Adds a value to the helper, converting it to a string. @param value The value to add as a string. @return The ToStringHelper instance.
963 Adds a boolean value to the helper, converting it to a string. @param name Property name. @param value Boolean value to add. @return The ToStringHelper instance.
964 Adds a char value to the helper with a given name. @param name Property name. @param value Char value to add. @return The ToStringHelper instance.
965 Adds a double value to the helper, formatted as a string. @param name Property name. @param value Double value to format.
966 Adds a float value to the helper, formatted as a string. @param name Property name. @param value Float value to format. @return The ToStringHelper instance.
967 Adds a name-value pair to the helper, value converted to string. @param name Property name. @param value Value to be added. @return The ToStringHelper instance.
968 Adds a name-value pair to the helper, converting value to string. @param name Property name. @param value Value to be added. @return The ToStringHelper instance.
969 Creates an Optional from a nullable reference. @param nullableReference Value to wrap, or null for an empty Optional. @return An Optional containing the value or an empty Optional.
970 Constructs a FluentIterable with an empty delegate.
971 Returns an empty Optional, indicating no mask is present.
972 Returns an empty Optional, indicating no value is present.
973 Delegates string handling to the platform. @param string The input string to process. @return Processed string or null.
974 Parses a host-port string. @param hostPortString String containing host and port. @return HostAndPort instance representing the parsed host and port.
975 Returns a view of the iterable with specified number of elements skipped. @param numberToSkip Number of elements to skip.
976 Creates a FluentIterable with a maximum size. @param maxSize The maximum number of elements to include.
977 Gets element at position in iterable, or defaultValue if absent. @param iterable Iterable to get element from @param position Index of element to retrieve @param defaultValue Value if element not found
978 Retrieves an element at a specific position in an iterator. @param iterator Iterator to retrieve from @param position Element position (zero-based) @return Element at the specified position
979 Retrieves an element from an iterator at a given position. @param iterator Iterator to retrieve from, @param position Index, @param defaultValue Value if iterator is empty.
980 Creates a Traverser for the file tree. @return Traverser object for traversing files.
981 Creates a LimitedInputStream, restricting bytes read from input. @param in the input stream @param limit maximum bytes to read
982 Converts a BigInteger to an Inet4Address. @param address BigInteger representing the IPv4 address
983 Converts a BigInteger to an Inet6Address. @param address BigInteger representing the IPv6 address @return Inet6Address object
984 Creates a SipHashFunction with specified keys. @param k0 First 64-bit key. @param k1 Second 64-bit key.
985 Creates a FileBackedOutputStream with a file threshold. @param fileThreshold threshold for switching to file storage
986 Creates an Inet4Address from an integer. @param address Integer representation of IPv4 address. @return Inet4Address object.
987 Calculates wait time for permits. @param permits Number of permits requested.
988 Attempts to acquire permits within a timeout. @param permits Permits to acquire. @param timeout Timeout duration. @param unit Time unit of the timeout. @return True if permits acquired, false otherwise.
989 Writes Bloom filter data to an OutputStream. @param out Output stream to write the filter data to.
990 Creates a fixed-delay scheduler. @param initialDelay Initial delay. @param delay Recurring delay. @return Scheduler object.
991 Creates a fixed-rate scheduler with given delay and period. @param initialDelay Initial delay before task execution. @param period Period between task executions. @return Scheduler object.
992 Calculates a masked timeout value in nanoseconds. @param time Timeout duration. @param unit Time unit for the duration.
993 Creates and starts a Stopwatch using the provided Ticker. @param ticker The Ticker to use for time measurement.
994 Sets the value comparator. @param valueComparator Comparator for values, or null. @return This builder instance.
995 Sets the concurrency level for the map. @param concurrencyLevel Desired concurrency level (> 0) @return A reference to this builder for chaining.
996 Sets the expireAfterWrite duration using a Duration object. @param duration Duration after which writes expire.
997 Sets the expiration time for cache entries after access. @param duration Expiration duration.
998 Sets the cache refresh duration after a write. @param duration Duration object representing refresh time @return CacheBuilder instance for chaining
999 Creates a CacheBuilder with Weak keys. @return CacheBuilder instance with weak key strength
1000 Sets the cache value strength to Weak. @return A reference to this CacheBuilder.
1001 Sets the cache values to Soft values. @return A reference to this CacheBuilder.
1002 Returns a MapMaker with weak keys. @return MapMaker instance with weak key strength.
1003 Returns a MapMaker instance with weak values. @return MapMaker instance configured with weak value strength.
1004 Returns the failure cause from the snapshot.
1005 Overloads m1 with a default description for the index. @param index index value @param size size to compare against @return The index value.
1006 Delegates to overloaded method with description. @param index index to check @param size size to compare against
1007 Validates indices; throws IndexOutOfBoundsException if invalid. @param start start index @param end end index @param size array size
1008 Creates a predicate that checks if the target is null, else checks equality. @param target The object to check. @return A predicate that evaluates the condition.
1009 Creates a filtered multimap based on an entry predicate. @param multimap The base multimap to filter. @param entryPredicate Predicate for filtering entries.
1010 Creates a FilteredMultiset with combined predicate. @param unfiltered Source multiset. @param predicate Filter predicate to apply.
1011 Creates a Splitter that uses the provided CharMatcher to find separators. @param separatorMatcher CharMatcher used to identify separators @return A Splitter instance configured with the CharMatcher
1012 Creates a Splitter that splits into chunks of the given length. @param length The desired length of each chunk.
1013 Returns a new Splitter with default whitespace trimming.
1014 Creates and returns a new Stopwatch instance.
1015 Creates and starts a new Stopwatch instance. @return A newly initialized and started Stopwatch.
1016 Calculates the UTF-8 encoded length of a CharSequence. @param sequence CharSequence to encode @return UTF-8 encoded length in bytes
1017 Waits for executor completion. Throws VerifyException on failure. @param executor ExecutorService to wait for.
1018 Continuously processes references in the queue until cleanup fails.
1019 Constructs a new Builder instance.
1020 Creates a CacheLoader that uses the given function to compute values. @param function Function to compute values for keys. @return CacheLoader that uses the function.
1021 Creates a CacheLoader that uses the given supplier to load values. @param supplier Supplier providing the value to be cached.
1022 Throws UnsupportedLoadingOperationException for given keys.
1023 Calculates hit rate based on hitCount and requestCount. Returns 1.0 if requestCount is zero.
1024 Calculates the miss rate based on missCount and requestCount. @return Miss rate as a double, 0.0 if requestCount is 0.
1025 Protected constructor for ForwardingLoadingCache. Allows subclasses to extend cache forwarding.
1026 Protected constructor for ForwardingList. Allows subclasses to extend forwarding functionality.
1027 Protected constructor for ForwardingMultiset. Allows subclasses to extend forwarding functionality.
1028 Protected constructor for ForwardingQueue. Allows subclasses to extend queue forwarding.
1029 Protected constructor for ForwardingSet. Allows subclass extension.
1030 Protected constructor for ForwardingIterator. Allows subclasses to extend forwarding functionality.
1031 Constructs a new AbstractBiMap with provided forward/inverse maps.
1032 Protected constructor for ForwardingConcurrentMap. Allows subclassing.
1033 Protected constructor for ForwardingSortedMap. Allows subclassing.
1034 Default constructor for MutableTypeToInstanceMap.
1035 Protected constructor for ForwardingListMultimap. Allows subclasses to extend forwarding functionality.
1036 Constructs a new ForwardingSetMultimap.
1037 Protected constructor for ForwardingListeningExecutorService.
1038 Protected constructor for ForwardingListenableFuture. Allows subclasses to extend forwarding functionality.
1039 Creates a new ReferenceEntry for the segment. @param segment Cache segment. @param key Key for the entry. @param hash Hash code of the key. @param next Next entry in the segment. @return New ReferenceEntry instance.
1040 Creates a new ReferenceEntry for the given segment and key.
1041 Retrieves the result from the closing future. @return Result of the future, or throws ExecutionException.
1042 Executes m1, initiating a cleanup process.
1043 Creates a ValueReference for a cache entry. @param segment Cache segment. @param entry Reference entry. @param value Cached value. @param weight Weight of the value.
1044 Creates a value reference for a cache entry. @param segment Cache segment. @param entry Reference entry. @param value Value to reference. @param weight Associated weight.
1045 Creates a value reference for a given segment, entry, value, and weight.
1046 Updates entry recency and adds to recency queue. @param entry The reference entry to update. @param now Current timestamp.
1047 Updates entry timestamp if map contains it, records access. @param entry The ReferenceEntry to update. @param now Current timestamp for updating.
1048 Adds an entry to the segment, updates weight & timestamps. @param entry The entry to add. @param weight Entry weight. @param now Current timestamp.
1049 Retrieves the value from a cache entry, returning null if expired. @param entry The cache entry. @param now Current timestamp. @return The cached value or null if entry is null or expired.
1050 Returns the size of the iterable. Uses Collection.size() if available. @param iterable Iterable to get the size from.
1051 Returns the size of the underlying multiset.
1052 Reads bytes from an InputStream into a combined byte array. @param in Input stream to read from. @param bufs Queue of byte arrays to combine. @param totalLen Total length of the combined array.
1053 Initializes the bi-map with forward and inverse mappings. @param forward The forward mapping from keys to values. @param backward The backward mapping from values to keys.
1054 Creates a GeneralRange with open bounds and the given comparator. @param comparator Comparator for range values.
1055 Creates a GeneralRange with a single inclusive bound. @param comparator Comparator for range values. @param endpoint Endpoint value for the range. @param boundType Type of bound (inclusive/exclusive).
1056 Creates a GeneralRange with a single endpoint and open lower bound. @param comparator Comparator for range values. @param endpoint The endpoint value. @param boundType The bound type of the endpoint.
1057 Creates a GeneralRange with inclusive bounds and specified comparator. @param comparator Comparator for range values
1058 Creates a new GeneralRange based on another range. @param other The range to base the new range on.
1059 Returns the next element. Throws NoSuchElementException if none exist.
1060 Returns a collection of values associated with the given key. Returns an unmodifiable collection if the key is absent.
1061 Checks for concurrent modification; throws exception if detected.
1062 Delegates adding a key-value pair to the superclass. @param key the key to associate with the value @param value the value to add @return true if the value was added, false otherwise
1063 Delegates to the superclass implementation for adding a value. @param key the key to associate with the value @param value the value to add @return true if the value was added, false otherwise
1064 Retrieves values for a key, delegating to the superclass. @param key The key to retrieve values for. @return List of values associated with the key.
1065 Retrieves the set of values associated with a key. @param key The key for which to retrieve values. @return Set of values for the key.
1066 Returns the multimap's entries, delegating to the superclass.
1067 Writes the multimap to an ObjectOutputStream. Writes the size and entries to the stream.
1068 Converts a collection to a string representation. @param collection The collection to convert. @return String representation of the collection.
1069 Converts a map to a string representation in the format {key=value}. @param map The map to convert. @return String representation of the map.
1070 Creates an ArrayList with a calculated initial capacity. @param estimatedSize The estimated size of the list. @return A new ArrayList with the specified capacity.
1071 Creates a new HashMap with the specified expected size. @param expectedSize the expected size of the HashMap @return a HashMap with the given expected size
1072 Creates a new LinkedHashMap with a specified capacity. @param expectedSize the expected size of the map @return a LinkedHashMap with the given capacity
1073 Creates a HashSet with the specified expected size. @param expectedSize the initial size of the HashSet @return A new HashSet with the given expected size.
1074 Creates a LinkedHashSet with a specified capacity. @param expectedSize the expected size of the set
1075 Creates a ListMultimapBuilder with default values per key. @return ListMultimapBuilder instance
1076 Creates a SetMultimapBuilder with default expected values. Returns a builder for a SetMultimap.
1077 Creates a SetMultimapBuilder with default expected values per key.
1078 Creates a MultimapBuilderWithKeys with default expected key count.
1079 Creates a MultimapBuilder with default expected key count. Returns a MultimapBuilder instance.
1080 Creates an immutable entry with the given element and count. @param e the element to store @param n the occurrence count (must be non-negative)
1081 Sets the count of an element in the wrapped multiset. @param element the element to set the count for @param count the new count for the element @return the old count of the element
1082 Attempts to update element count in the wrapped multiset. @param element Element to update. @param oldCount Expected old count. @param newCount New count for the element.
1083 Delegates size calculation to the multimap's view.
1084 Delegates to the wrapped multimap's toString() method.
1085 Delegates to the superclass implementation to retrieve entries.
1086 Delegates to the wrapped multiset's size.
1087 Delegates to the underlying set's method m2.
1088 Retrieves the first entry from the map or null if empty.
1089 Returns the first element or null if absent. @param e The element to search for.
1090 Returns the first element or null if empty. @param e Element to check. @return First element or null.
1091 Creates an empty TreeRangeSet. Returns a new, empty TreeRangeSet instance.
1092 Checks if a value is within the range, exclusive of bounds. @param value The value to check. @return True if within range, false otherwise.
1093 Checks if a comparator is consistent with an iterable's ordering. @param comparator The comparator to validate. @param elements The iterable to check against.
1094 Copies data from a table. @param table The table to copy data from.
1095 Returns the set of cells, delegating to the superclass.
1096 Returns the set of cells. Delegates to the superclass implementation.
1097 Returns all values in the table. Returns cached values.
1098 Returns the values of the table, delegating to the superclass.
1099 Creates an Ordering by applying the given function. @param function Function to transform elements for comparison.
1100 Creates an Ordering from a Comparator. @param comparator The comparator to wrap in an Ordering. @return An Ordering instance.
1101 Creates a CompoundOrdering with this and secondary comparator. @param secondaryComparator Secondary comparator for tie-breaking.
1102 Creates an ImmutableCell with given row, column keys, and value.
1103 Checks if both row and column keys exist in the table. @param rowKey The row key to check. @param columnKey The column key to check. @return True if both keys exist, false otherwise.
1104 Creates a new ImmutableMapEntry with the given key and value. @param key The key for the entry. @param value The value for the entry.
1105 Reuses an existing ImmutableMapEntry if possible, otherwise creates a new one. @param entry Existing entry to reuse, or null. @param key Key for the new entry. @param value Value for the new entry.
1106 Adds an entry's key-value pair to the multimap. @param entry Entry containing the key and value to add. @return A reference to this Builder.
1107 Adds a key-value pair, then returns a reference to this builder.
1108 Adjusts the internal mask based on the new size. Resizes if newSize exceeds the current entries size.
1109 Stores key-value pair at entryIndex using the given hash and mask.
1110 Resizes internal data structures if needed. @param newSize The new size to consider for resizing.
1111 Stores an object at the calculated index using hash and mask. @param entryIndex index to store the object @param object object to store @param hash hash value @param mask mask value
1112 Initializes hash table structures based on expected size. @return Expected size of the hash table.
1113 Initializes the hash table with expected size. @return The expected size of the hash table.
1114 Checks if this Range contains the given Range. @param other the Range to check for containment @return true if this Range contains the other Range
1115 Checks if this Range intersects with another. @param other the other Range to check for intersection @return true if the Ranges intersect, false otherwise
1116 Serializes the multimap to the provided ObjectOutputStream. @param stream Output stream for serialization.
1117 Returns a new Builder for creating an ImmutableRangeMap.
1118 Returns a new Builder for constructing an ImmutableRangeSet.
1119 Returns a new Builder instance for constructing ImmutableTable.
1120 Returns an unmodifiable iterator for the set's elements.
1121 Counts occurrences of element in iterable. Returns 1 if element in Set. @param iterable Iterable to search. @param element Element to count.
1122 Checks if the map contains the given key, delegating to the wrapped map. @param key The key to check for. @return True if the map contains the key, false otherwise.
1123 Checks if map values contain the given value. @param value value to search for @return true if value is present in map values
1124 Retrieves the key, handling null entries. @param key The key to retrieve. @return The key or null if the entry is null.
1125 Retrieves the key, handling null entries. @param key The key to retrieve. @return The key or null if the entry is null.
1126 Retrieves the key, handling null entries. @param key The key to retrieve, may be null. @return The key or null if the entry is null.
1127 Retrieves the key, or null if not found. @param key The key to retrieve. @return The key, or null if not present.
1128 Returns the key of the first entry, or throws NoSuchElementException.
1129 Returns the key of the last entry. Throws NoSuchElementException if empty.
1130 Returns the first entry of the navigable map, or null if empty.
1131 Returns the first entry from the navigable map's iterator. @return First entry or null if the map is empty.
1132 Returns a navigable set view of the keys in the map.
1133 Returns a sorted submap from fromKey to toKey (inclusive). @param fromKey start key (inclusive) @param toKey end key (inclusive)
1134 Retrieves the first entry whose key is lexicographically greater than or equal to the given key. @param key The key to compare against. @return The first entry or null if none exists.
1135 Retrieves the first entry with the specified key. @param key The key of the entry to retrieve.
1136 Returns a sorted sub-map up to the specified key (exclusive). @param toKey The key to return the sub-map up to.
1137 Retrieves the first entry with key >= the given key. @param key The key to search for. @return The first entry or null if none exists.
1138 Gets the entry corresponding to the given key. @param key The key to search for. @return The entry, or null if not found.
1139 Returns a sorted sub-map from fromKey to positive infinity. @param fromKey the starting key for the sub-map
1140 Returns a view of the multiset between bounds. @param lowerBound lower bound (inclusive) @param upperBound upper bound (exclusive)
1141 Creates a new, empty HashBasedTable with LinkedHashMap and Factory.
1142 Reads enum constants and initializes counts from an input stream. @param stream input stream containing serialized data
1143 Shifts an entry to a new index, handling collisions. @param dstIndex Destination index for the entry. @param mask The mask to apply for hashing.
1144 Moves an element to a new index, handling collisions. @param dstIndex Destination index. @param mask The mask to apply.
1145 Checks if a value exists in the bi-map. @param value The value to check for existence. @return True if the value exists, false otherwise.
1146 Creates a Builder with expected size, validates it. @param expectedSize the expected size of the bi-map @return a Builder instance with the given expected size
1147 Constructs a Builder with the default initial capacity.
1148 Returns a new Builder instance for constructing an ImmutableMap.
1149 Constructs a Builder with the provided comparator. @param comparator Comparator used for sorting the map.
1150 Creates a new SingletonImmutableBiMap with the given key/value pair. @param k1 The key for the immutable mapping. @param v1 The value for the immutable mapping.
1151 Adds an element to the set. @param e element to add; must be unique
1152 Constructs a Builder with the default initial capacity.
1153 Creates a Builder with an initial capacity. @param expectedSize initial size of the builder's internal array
1154 Adds elements from the given iterable. @param elements Iterable of elements to add. @return The builder instance for chaining.
1155 Adds elements from an iterator to the builder. @param elements Iterator providing elements to add. @return The builder instance for chaining.
1156 Adds elements from an iterator. @param elements Iterator of elements to add. @return The builder instance for chaining.
1157 Creates a SerializedForm instance from the current ImmutableMap.
1158 Creates a SingletonImmutableTable with given row/column keys and value. @param rowKey The row key. @param columnKey The column key. @param value The value.
1159 Converts the iterable to a comma-separated string.
1160 Adds entries from the given iterable to the multimap builder. @param key The key for the entries. @param values Iterable of values to associate with the key.
1161 Returns the first element of the iterable or defaultValue. @param iterable Iterable to retrieve from. @param defaultValue Value returned if iterable is empty.
1162 Returns first element or defaultValue if iterable is empty. @param iterable Iterable to fetch first element from. @param defaultValue Value returned if iterable is empty.
1163 Adds a key-value pair to the multimap. @param key The key for the new mapping. @param value The value associated with the key.
1164 Partitions a list into sublists of the specified size. @param list The list to partition. @param size The size of each sublist.
1165 Returns the index of the element in the list. @param element Element to find. @return Index of the element, or -1 if not found.
1166 Finds the last index of an element in the list. @param element The element to search for. @return The last index of the element, or -1 if not found.
1167 Performs a masked operation, potentially involving m1.
1168 Creates a new, empty `TreeRangeMap`.
1169 Finds the index of the minimum element within a range. @param index Start index of the range. @param len Range length. @return Index of the minimum element, or -1 if invalid.
1170 Calculates a mask value based on queue size. Returns 0, 1, or 2 based on size and maxHeap.m1() result.
1171 Returns the minimum element in the queue, or null if empty.
1172 Bubbles element up the heap until ordering is satisfied. @param index Current index of the element being bubbled up. @param x Element to be inserted into the heap.
1173 Returns an iterator for the elements in the multiset.
1174 Prepends an element to an array. @param element Element to prepend. @param array Array to prepend to. @return New array with element prepended.
1175 Converts a collection to an array, resizing if needed. @param c Collection to convert; @param array Array to fill.
1176 Extracts the first element from an iterable. @param iterable Iterable to extract from. @return First element or null if empty.
1177 Extracts a non-null element from an iterable. @param iterable Iterable to extract from. @return A non-null element, or null if none exists.
1178 Delegates string representation to the contained range.
1179 Creates a GeneralRange from a Range, extracting bound info. @param range The Range to convert to a GeneralRange.
1180 Filters a navigable map based on a given range. @param map NavigableMap to filter. @param range Range to apply. @return Filtered NavigableMap.
1181 Filters a NavigableSet based on a Range. @param set NavigableSet to filter. @param range Range to filter with. @return Filtered NavigableSet.
1182 Returns the sorted map of rows to columns. Delegates to the superclass implementation.
1183 Returns a synchronized queue. @param queue The queue to synchronize.
1184 Constructs an ArrayBasedCharEscaper with given map and safe range. @param escaperMap Character replacement map. @param safeMin Minimum value of the safe character range. @param safeMax Maximum value of the safe character range.
1185 Constructs an `ArrayBasedUnicodeEscaper` with specified parameters. @param escaperMap Escaper map for character replacements. @param safeMin Minimum value for the safe character range. @param safeMax Maximum value for the safe character range. @param unsafeReplacement Replacement string for unsafe characters.
1186 Creates a PercentEscaper with specified safe characters and space encoding. @param safeChars String of characters to be considered safe. @param plusForSpace Whether to encode space as '+' or '%20'.
1187 Escapes special characters in a string. Returns escaped string or original.
1188 Creates a Subscriber or SynchronizedSubscriber based on method concurrency. @param bus EventBus instance. @param listener Target object. @param method Method to be invoked.
1189 Returns a string describing the graph's properties. Uses other methods to format the returned string.
1190 Returns a set view of the graph's endpoint pairs.
1191 Returns a set view of the graph's endpoint pairs.
1192 Updates the hasher with the given double value. @param d The double value to hash.
1193 Creates a BloomFilter collector. @param funnel Funnel for hashing elements. @param expectedInsertions Expected number of insertions.
1194 Calculates a mask value based on bit count and hash functions.
1195 Compares this BloomFilter with another, checking for equality. @param that the BloomFilter to compare to @return true if BloomFilters are equal, false otherwise
1196 Converts a byte to an unsigned string representation (base 10). @param x the byte to convert
1197 Combines this BloomFilter with another, checking for compatibility. @param that The BloomFilter to combine with.
1198 Creates a HashCode from a byte array. @param bytes The byte array representing the hash code.
1199 Creates an IntHashCode object from the given integer hash. @param hash The 32-bit integer hash code. @return An IntHashCode object representing the hash.
1200 Creates a LongHashCode object from the given long hash value. @param hash The long value representing the hash code.
1201 Returns the masked float value.
1202 Returns the masked value from the underlying m1 method.
1203 Constructs a BigInteger from the masked long value.
1204 Creates a HashFunction based on the minimumBits parameter. @param minimumBits minimum number of bits for the hash @return A HashFunction instance
1205 Calculates a hash bucket index using the provided hash code. @param hashCode Hash code to use for index calculation. @param buckets Number of buckets for the hash function.
1206 Creates an HmacMD5 HashFunction using provided key. @param key Key object for HMAC initialization @return HmacMD5 HashFunction object
1207 Creates an HmacSHA1 hash function using the provided key. @param key Key object for HMAC initialization. @return HmacSHA1 HashFunction instance.
1208 Creates an HmacSHA256 HashFunction using provided key. @param key Key object for HMAC initialization @return New HmacSHA256 HashFunction instance
1209 Creates an HmacSHA512 HashFunction using provided key. @param key Key object for HMAC initialization @return HmacSHA512 HashFunction instance
1210 Creates a concatenated ByteSource from an iterable of sources. @param sources Iterable of ByteSources to concatenate.
1211 Creates a concatenated CharSource from an iterable of sources. @param sources Iterable of CharSource instances to concatenate
1212 Creates a ByteArrayDataInput from a byte array. @param bytes byte array to create input from
1213 Creates a ByteArrayDataOutput using a new ByteArrayOutputStream. @return A ByteArrayDataOutput instance.
1214 Creates a ByteArrayDataOutput with specified size. @param size The initial size of the output stream. @throws IllegalArgumentException if size is negative.
1215 Constructs ReaderInputStream with Reader, encoder, and bufferSize. @param reader The Reader to read from. @param charset Charset for encoding. @param bufferSize Initial buffer size.
1216 Counts bytes skipped from an input stream until EOF. @param in Input stream to read from. @return Total bytes skipped from the stream.
1217 Skips specified bytes from an InputStream. @param in Input stream to skip from. @param n Number of bytes to skip.
1218 Writes lines to an output stream, using provided line separator. @param lines Iterable of lines to write @param lineSeparator Separator between lines
1219 Writes lines from a stream to an output stream, using lineSeparator. @param lines Stream of CharSequence lines @param lineSeparator Separator between lines
1220 Processes lines from the source using the provided action. @param action Consumer to process each line. @throws IOException if an I/O error occurs.
1221 Reads lines from a readable source and returns them as a list. @param r The readable source to read from. @return List of strings, each representing a line.
1222 Processes lines from a readable source using a LineProcessor. @param readable Source of lines to process. @param processor Processes each line. @return Processed result, as determined by the processor. @throws IOException If an I/O error occurs.
1223 Reads characters from the reader, updating the charBuffer and endOfInput.
1224 Reads a short from the input stream in little-endian order. @return An integer read as a short value.
1225 Reads a char from the input stream, cast from the result of m1().
1226 Reads a float from the input stream in little-endian order.
1227 Reads a double value from the input stream (little-endian). @return double value read from stream @throws IOException if an I/O error occurs
1228 Writes each character of the string to the stream as a char. @param s The string to write, character by character.
1229 Writes a double to the stream in little-endian byte order. @param v The double value to write.
1230 Collects IOExceptions while iterating through a directory. @param dir Directory stream to iterate @return Collection of IOExceptions, or null if successful.
1231 Processes a directory path, collecting IOExceptions if any occur. @param dir SecureDirectoryStream to iterate through paths @param path Path to process @return Collection of IOExceptions or null if successful
1232 Initializes MultiInputStream with an iterator of ByteSources. @param it Iterator providing the input ByteSources @throws IOException if an I/O error occurs during initialization
1233 Creates a CharSource from the resource URL using the given charset. @param charset Charset for character encoding. @return CharSource object.
1234 Calculates the number of ordered permutations. @param sortedInputList List of elements, must be sorted. @param comparator Comparator for ordering elements.
1235 Calculates the mean of a number iterator. @param values Iterator of numbers to average. @return The calculated mean.
1236 Checks if a positive double's significand is a power of 2. @param x the double value to check @return true if significand is a power of 2, false otherwise
1237 Checks if a double satisfies a specific condition based on its significand. @param x the double value to check @return true if condition is met, false otherwise
1238 Rounds a long value to the nearest double based on rounding mode. @param x the long value to round @param mode the rounding mode to apply
1239 Compares two doubles, returns 0 if nearly equal, -1 if a<b, 1 if a>b.
1240 Calculates a mask value based on the table size. @param tableSize The size of the hash table.
1241 Partitions buffer, finds threshold, and adjusts bufferSize.
1242 Calculates the floor of the base-10 logarithm of an integer. @param x The integer to calculate the logarithm of. @param mode Rounding mode to apply. @return The floor of the logarithm.
1243 Calculates integer square root with rounding based on mode. @param x Input integer. @param mode Rounding mode to apply.
1244 Calculates a masked capacity based on the current queue size. @return Masked integer value representing the new capacity.
1245 Creates a LinearTransformation with slope 0.0 and given y-intercept. @param y The y-intercept value for the transformation.
1246 Creates a linear transformation based on slope and two points. @param slope The slope of the linear transformation.
1247 Creates a vertical linear transformation with a given x-value. @param x The x-value for the vertical transformation.
1248 Calculates factorial using a list of BigIntegers. @param n integer input for factorial calculation @return BigInteger representing the factorial of n
1249 Calculates the floor log base 10 of a long, considering rounding mode. @param x The long value. @param mode Rounding mode to apply.
1250 Calculates a masked value based on input longs x, numerator, denominator.
1251 Calculates a value based on b and k, handling edge cases and overflow. @param b Base value. @param k Exponent value.
1252 Calculates the covariance of paired variables. Uses m1() to check for zero and returns a double.
1253 Calculates a statistic based on delta products and m1(). Uses m1() to determine a condition and returns a double.
1254 Calculates a derived statistic, handling potential NaN results.
1255 Calculates the mean of a sequence of numbers. @param values Iterator of numbers to calculate the mean from.
1256 Updates stats: mean, min, max, and sum of squares. @param value The new data value to incorporate.
1257 Calculates the covariance of paired data. Uses internal state for calculation.
1258 Calculates the ratio of sum of products to delta sum. Uses m1() to check condition and returns a double.
1259 Calculates the correlation between paired datasets. Returns NaN if the sum of products of deltas is zero.
1260 Partitions array around a pivot element. @param array Array to partition. @param from Starting index (inclusive). @param to Ending index (inclusive).
1261 Creates a PairedStats object from a byte array. @param byteArray Byte array containing PairedStats data. @return PairedStats object initialized from the byte array.
1262 Creates a Stats object from a byte array, validating its length. @param byteArray byte array containing stats data @return Stats object initialized from the byte array
1263 Returns a PairedStats object containing accumulated statistics.
1264 Returns the current statistical snapshot from xStats.
1265 Returns the y statistics snapshot.
1266 Creates a Collector for accumulating and calculating Stats. Uses StatsAccumulator for intermediate results.
1267 Formats an IP address. Returns IPv6 addresses in square brackets. @param ip The InetAddress to format. @return Formatted IP address string.
1268 Converts an Inet6Address to an Inet4Address. @param ip The Inet6Address to convert.
1269 Extracts the IPv4 address from a 6to4 Inet6Address. @param ip The Inet6Address to extract from.
1270 Converts an Inet6Address to an Inet4Address (ISATAP). @param ip The Inet6Address to convert.
1271 Calculates a value from the dataset using scaling and indexing. @param dataset Collection of Number objects to process.
1272 Calculates quantiles from a dataset using scaling and indexes. @param dataset Collection of numbers to process. @return Map of calculated quantile values.
1273 Adds a double value to the array and returns the builder. @param value The double value to add.
1274 Adds elements from a double array. @param values double array to add @return this Builder instance
1275 Adds a collection of doubles to the array. @param values Collection of doubles to add. @return this Builder instance.
1276 Copies values from ImmutableDoubleArray to the builder's array. @param values Source ImmutableDoubleArray to copy from.
1277 Creates an ImmutableDoubleArray containing a single element. @param e0 The double value to be the sole element. @return An ImmutableDoubleArray with the given element.
1278 Creates an ImmutableDoubleArray containing two doubles. @param e0 The first double value. @param e1 The second double value.
1279 Creates an ImmutableDoubleArray from the given double values. @param e0 The first double value. @param e1 The second double value. @param e2 The third double value.
1280 Creates an ImmutableDoubleArray from the given double values. @param e0 First double value. @param e1 Second double value. @param e2 Third double value. @param e3 Fourth double value.
1281 Creates an ImmutableDoubleArray from the given double values. @param e0 First double value. @param e1 Second double value. @param e2 Third double value. @param e3 Fourth double value. @param e4 Fifth double value.
1282 Creates an ImmutableDoubleArray from the provided double values. @param e0 First double value. @param e5 Last double value. @return An ImmutableDoubleArray containing the provided values.
1283 Creates an ImmutableDoubleArray from a double array. @param values The double array to create from. @return An ImmutableDoubleArray or EMPTY if array is empty.
1284 Creates an ImmutableDoubleArray from a collection of Doubles. Returns EMPTY if collection is empty, otherwise creates a view.
1285 Creates an ImmutableDoubleArray from a DoubleStream. @param stream The stream to create the array from.
1286 Returns a new ImmutableDoubleArray or the current instance.
1287 Checks if the array contains the target value. @param target The double value to search for. @return True if found, false otherwise.
1288 Adds an integer to the array. @param value the integer to add @return this Builder instance
1289 Adds an array of integers to the builder. @param values array of integers to add @return this builder instance
1290 Adds a collection of integers to the builder's array. @param values Collection of integers to add. @return A reference to this builder.
1291 Adds integers from an ImmutableIntArray. @param values ImmutableIntArray to add. @return this Builder instance.
1292 Creates an ImmutableIntArray containing only the given element. @param e0 The single element to include in the array.
1293 Creates an ImmutableIntArray containing the provided integers. @param e0 The first integer. @param e1 The second integer. @return An ImmutableIntArray with the two integers.
1294 Creates an ImmutableIntArray from the given three integers. @param e0 The first integer. @param e1 The second integer. @param e2 The third integer. @return An ImmutableIntArray containing the three integers.
1295 Creates an ImmutableIntArray from the given four integers. @param e0 The first integer. @param e1 The second integer. @param e2 The third integer. @param e3 The fourth integer.
1296 Creates an ImmutableIntArray from the given five integers.
1297 Creates an ImmutableIntArray from the given six integers.
1298 Creates an ImmutableIntArray from the given array. Returns EMPTY if the array is empty.
1299 Creates an ImmutableIntArray from an IntStream. @param stream The IntStream to create the array from.
1300 Returns a new ImmutableIntArray or the current instance.
1301 Adds a long value to the array. @param value the long value to add @return this Builder instance
1302 Adds long values from an array to the builder. @param values array of long values to add @return this builder instance
1303 Adds a collection of longs to the builder's array. @param values Collection of Long values to add. @return This builder instance.
1304 Adds values from an ImmutableLongArray. @param values ImmutableLongArray to add. @return this Builder instance.
1305 Creates an ImmutableLongArray containing a single element. @param e0 The long value to be stored in the array.
1306 Creates an ImmutableLongArray from two long values. @param e0 The first long value. @param e1 The second long value.
1307 Creates an ImmutableLongArray from the given long values. @param e0 The first long value. @param e1 The second long value. @param e2 The third long value.
1308 Creates an ImmutableLongArray from the given long values. @param e0 First long value. @param e1 Second long value. @param e2 Third long value. @param e3 Fourth long value.
1309 Creates an ImmutableLongArray from the given long values. @param e0 The first long value. @param e1 The second long value. @param e2 The third long value. @param e3 The fourth long value. @param e4 The fifth long value. @return An ImmutableLongArray containing the given values.
1310 Creates an ImmutableLongArray from the given long values. @param e0 First long value. @param e1 Second long value. @param e2 Third long value. @param e3 Fourth long value. @param e4 Fifth long value. @param e5 Sixth long value.
1311 Creates an ImmutableLongArray from a long array. @param values The long array to create from. @return An ImmutableLongArray or EMPTY if array is empty.
1312 Creates an ImmutableLongArray from a LongStream. @param stream The LongStream to create the array from.
1313 Returns a new ImmutableLongArray or the current instance.
1314 Creates a ScaleAndIndexes object with the scale and int array. @param indexes Collection of integers to convert to an array.
1315 Creates an ImmutableIntArray from a collection of Integers. Returns EMPTY if collection is empty, otherwise creates a view.
1316 Creates an ImmutableLongArray from a collection of Longs. Returns EMPTY if collection is empty; otherwise creates a new array.
1317 Parses a string to Integer, returns null if parsing fails. @param string String to parse. @param radix Radix of the number.
1318 Parses a string to a Long, using radix 10. @param string String to parse. @return Long value or null if parsing fails.
1319 Parses a string as an unsigned integer, throwing exception on failure. @param stringValue String to parse; throws NumberFormatException.
1320 Creates an UnsignedInteger from a long value, validating its range. @param value The long value to convert. @return An UnsignedInteger object.
1321 Creates an UnsignedInteger from a BigInteger value. @param value The BigInteger value to convert.
1322 Parses a string as an unsigned integer. @param string The string to parse. @param radix The radix of the number.
1323 Adds an UnsignedInteger to the current value. @param val The UnsignedInteger to add. @return A new UnsignedInteger representing the sum.
1324 Calculates a masked value from an UnsignedInteger. @param val The UnsignedInteger to mask. @return Masked UnsignedInteger value.
1325 Masks the UnsignedInteger value. @param val The UnsignedInteger to mask. @return A masked UnsignedInteger.
1326 Masks the value of an UnsignedInteger. @param val The UnsignedInteger to mask.
1327 Masks the value with the least significant bit. @param val The unsigned integer to mask.
1328 Returns the unsigned integer as a string in base 10.
1329 Adds an UnsignedInteger to this one. @param other The UnsignedInteger to add. @return The sum of the two unsigned integers.
1330 Creates an UnsignedLong from a long value, ensuring it's non-negative. @param value The long value to convert. @return An UnsignedLong representation of the value.
1331 Creates an UnsignedLong from a BigInteger, validating its range. @param value BigInteger value to convert; must be non-negative. @return UnsignedLong representation of the value.
1332 Masks the value using an unsigned long. @param val The unsigned long to mask with. @return The masked UnsignedLong value.
1333 Calculates a masked value from the input UnsignedLong. @param val The UnsignedLong to mask. @return Masked UnsignedLong value.
1334 Masks the UnsignedLong value. @param val The UnsignedLong to mask. @return Masked UnsignedLong value.
1335 Determines quotient of unsigned division. @param dividend Dividend (unsigned). @param divisor Divisor (unsigned).
1336 Calculates the unsigned remainder of dividend divided by divisor.
1337 Parses a string to an unsigned long with specified radix. @param string String to parse. @param radix The radix (base).
1338 Parses a string to an unsigned long (base 10). @param string The string to parse. @return The unsigned long value.
1339 Parses a string to an unsigned long, throwing exception on failure. @param stringValue String to parse; throws NumberFormatException. @return The unsigned long value.
1340 Checks if all wrapped members are not abstract, accessible.
1341 Returns a TypeToken for the underlying class or this. Returns a TypeToken for the primitive wrapper if m1() is true.
1342 Returns a TypeToken for the underlying type, unwrapping primitives. Returns this if not a primitive wrapper.
1343 Gets the component type of an array type. @return TypeToken<?> representing the component type or null.
1344 Executes the future and returns the result. @return Result of the future computation. @throws InterruptedException, ExecutionException if errors occur.
1345 Submits task to executor, adds future to queue, and returns it. @param executorService Executor service to use. @param task Callable task to execute. @param queue Queue for storing futures. @return ListenableFuture representing task execution.
1346 Starts the service, waiting up to the specified timeout. @param timeout The maximum time to wait for the service to start.
1347 Starts the service, waiting up to the specified timeout. @param timeout Duration to wait; throws TimeoutException if exceeded.
1348 Starts the service, waiting up to the specified timeout. @param timeout Duration to wait; throws TimeoutException if exceeded.
1349 Starts the service, waiting up to the specified timeout. @param timeout The maximum time to wait for the service to start.
1350 Starts the service, waiting up to the given timeout. @param timeout Duration to wait; throws TimeoutException if exceeded.
1351 Starts the service, awaiting termination within the given timeout. @param timeout Duration to wait; throws TimeoutException if exceeded.
1352 Starts the service, waiting up to the specified timeout. @param timeout Duration to wait; throws TimeoutException if exceeded.
1353 Starts the service, waiting up to the specified timeout. @param timeout The maximum time to wait for service startup.
1354 Processes a future's result or handles exceptions during processing. @param index Index of the future being processed. @param future Future to process.
1355 Atomically updates the value by summing delta. @param delta Value to be added to the current value. @return The previous value before the update.
1356 Atomically adds delta to the current value. @param delta The value to add. @return The updated double value.
1357 Atomically adds delta to array element at index i. @param i index of element to update @param delta value to add to the element
1358 Atomically updates array element at index i by adding delta. @param i index of element to update @param delta value to add to the element
1359 Cancels the future and closes resources if successful. @param mayInterruptIfRunning if the running task can be interrupted @return True if cancellation was successful.
1360 Finds a valid lock acquisition path from a given node. @param node Current lock node @param seen Set of visited nodes to prevent cycles @return ExampleStackTrace object or null if no path found
1361 Creates a ListenableFutureTask wrapping the provided Callable. @param callable Callable to execute asynchronously. @return ListenableFutureTask instance.
1362 Creates a ListenableFutureTask for a Runnable with an initial result. @param runnable task to execute @param result initial result of the task @return new ListenableFutureTask instance
1363 Executes the task's execution list.
1364 Returns a new instance of the ExecutionSequencer.
1365 Wraps a {@link ListenableFuture} as a {@link FluentFuture}. @param future The future to wrap. @return A FluentFuture wrapping the given future.
1366 Wraps a {@link ListenableFuture} to prevent cancellation. @param future The future to wrap. @return A NonCancellationPropagatingFuture.
1367 Creates a ListenableFuture for a value, or NULL if value is null. @param key The key for future retrieval. @param oldValue The old value associated with the key.
1368 Enqueues an event for all listeners with the same label. @param event The event to enqueue; label is derived from event.
1369 Enqueues an event with a label for listener processing. @param event The event to enqueue. @param label The label associated with the event.
1370 Notifies listeners if monitor operation fails. Dispatches events to registered listeners upon failure.
1371 Executes listeners after asserting monitor state. Dispatches events to listeners after validation.
1372 Executes guards until a condition is satisfied, then signals waiters.
1373 Creates a ListenableFuture from an AsyncCallable, running on executor. @param callable The AsyncCallable to execute. @param executor Executor to run the callable on. @return ListenableFuture that tracks the callable's execution.
1374 Creates a ListenableFuture that executes callable with a delay. @param callable AsyncCallable to execute. @param delay Delay before execution. @param timeUnit TimeUnit for the delay. @param executorService ExecutorService to schedule the task.
1375 Creates a TrustedListenableFutureTask for executing the given Callable. @param callable The Callable to execute asynchronously.
1376 Creates a ListenableFuture from a Callable, using the given executor. @param callable The Callable to execute. @param executor Executor to run the future task. @return ListenableFuture wrapping the Callable's result.
1377 Creates a TrustedListenableFutureTask for a Runnable with a result. @param runnable The Runnable to execute. @param value The result of the Runnable. @return A TrustedListenableFutureTask.
1378 Creates and submits a ListenableFuture for the given runnable. @param runnable The task to execute asynchronously. @param executor Executor to run the task with. @return A ListenableFuture representing the task.
1379 Acquires a permit from the Semaphore within a Duration.\n@param semaphore Semaphore to acquire.\n@param timeout Duration to wait for permit.
1380 Returns an Optional containing the first element or empty.
1381 Returns an optional containing the last element of the iterable. Returns an empty Optional if the iterable is empty.
1382 Filters an iterator based on a predicate. @param iterator Iterator to filter. @param predicate Predicate to apply to each element.
1383 Sets the expected node count. @param expectedNodeCount The expected number of nodes. @return The GraphBuilder instance for chaining.
1384 Sets the expected node count for the network. @param expectedNodeCount The expected number of nodes. @return A reference to this builder.
1385 Sets the expected edge count for the network. @param expectedEdgeCount The expected number of edges. @return A reference to this builder.
1386 Sets the expected node count. @param expectedNodeCount The expected number of nodes. @return A reference to this builder.
1387 Checks if any element in the iterable matches the predicate. @param iterable Iterable to check. @param predicate Predicate to test each element.
1388 Creates a predicate that checks if a CharSequence contains a pattern. @param pattern The string pattern to search for. @return A Predicate<CharSequence> object.
1389 Re-throws the throwable if its type matches the declared type. @param throwable The throwable to check, or null. @param declaredType The type to match against.
1390 Retrieves a set of classes from a cached hierarchy. @param concreteClass The class to start hierarchy flattening from. @return An ImmutableSet of classes.
1391 Returns a ThreadFactory, using ThreadManager if running in GAE. Throws RuntimeException if ThreadManager is unavailable.
1392 Checks if iterable contains the target object. @param target The object to search for. @return True if found, false otherwise.
1393 Creates a filtered multimap based on an entry predicate. @param multimap The base multimap to filter. @param entryPredicate Predicate to filter entries. @return Filtered multimap.
1394 Creates a filtered ListMultimap based on a key predicate. @param unfiltered The ListMultimap to filter. @param keyPredicate Predicate to filter keys.
1395 Creates a FluentIterable from an Iterable, filtering by type. @param type The type of elements to filter for.
1396 Removes all elements from the set that are present in the collection. @param collection Collection whose elements to remove. @return True if the set was modified, false otherwise.
1397 Creates an EnumMultiset from an iterable of enum elements. @param elements Iterable containing enum constants. @return EnumMultiset containing counts of enum elements.
1398 Creates a LinkedList from an iterable of elements. @param elements Iterable containing elements to add to list. @return A LinkedList containing the elements from the iterable.
1399 Creates an ArrayDeque from an iterable. Uses Collection constructor if possible. @param elements Iterable to populate the ArrayDeque. @return ArrayDeque containing elements from the iterable.
1400 Creates a ConcurrentLinkedQueue from an iterable. @param elements Iterable to populate the queue with. @return ConcurrentLinkedQueue containing elements.
1401 Creates a LinkedBlockingDeque from an iterable. @param elements Iterable to initialize the deque with. @return A LinkedBlockingDeque containing the elements.
1402 Creates a LinkedBlockingQueue from an iterable. @param elements Iterable to initialize the queue with. @return LinkedBlockingQueue initialized with elements.
1403 Creates a PriorityBlockingQueue from an iterable. @param elements Iterable to initialize the queue with. @return PriorityBlockingQueue initialized with elements.
1404 Creates a priority queue from an iterable. @param elements Iterable of comparable elements to add. @return PriorityQueue containing the elements.
1405 Creates an EnumSet from an iterable. @param iterable Elements to add to the EnumSet. @param elementType Enum type of the set. @return EnumSet containing elements from the iterable.
1406 Creates a new set and adds all elements from the iterable. @param elements Iterable containing elements to add to the set. @return A new set containing the elements from the iterable.
1407 Creates a LinkedHashSet from an iterable. @param elements Iterable to create the LinkedHashSet from. @return A new LinkedHashSet containing the elements.
1408 Creates a sorted TreeSet from an iterable of elements. @param elements Iterable containing elements to add to the set. @return A new TreeSet containing the elements.
1409 Converts an iterable to a collection. Returns the iterable as a collection if it is already one; otherwise, creates a list.
1410 Converts an iterable to an ArrayList. Handles Collection types. @param elements Iterable to convert. @return ArrayList containing elements from the iterable.
1411 Creates a HashSet from an iterable. Handles Collection types directly. @param elements Iterable containing elements for the HashSet. @return A new HashSet containing the elements from the iterable.
1412 Checks if all elements satisfy the given predicate. @param predicate Predicate to test each element. @return True if all elements satisfy the predicate.
1413 Creates a list iterator starting at the specified index. @param start the starting index for the iterator
1414 Creates a SortedMap backed by a SortedSet and Function. @param set The set of keys for the map. @param function Maps keys to values.
1415 Creates a TransformedEntriesSortedMap from a sorted map and transformer. @param fromMap The sorted map to transform. @param transformer Transforms map entries. @return A new SortedMap with transformed values.
1416 Transforms a map's values using a function. @param fromMap Source map. @param function Function to apply to each value. @return Transformed map.
1417 Adds a specified number of occurrences for an element. @param element the element to add occurrences for @param occurrences the number of occurrences to add @return the old count of the element
1418 Adds elements to the multiset, updating counts safely. @param element Element to add. @param occurrences Number of occurrences.
1419 Transforms a ListMultimap using an EntryTransformer. @param fromMap source multimap @param transformer transforms entries @return Transformed ListMultimap
1420 Transforms a multimap's values using a function. @param fromMultimap source multimap @param function transforms values from the source multimap @return A Multimap with transformed values.
1421 Adds elements from an iterable to the builder. @param elements Iterable of elements to add. @return The builder instance for chaining.
1422 Adds elements from a collection to the multiset. @param elements Collection of elements to add. @return True if the multiset was modified.
1423 Checks if input is within the range, exclusive of bounds. @param input The value to check. @return True if input is strictly within the range.
1424 Creates a TableCollector using provided functions and supplier. @param rowFunction Extracts row key from input. @param columnFunction Extracts column key. @param valueFunction Extracts value. @param tableSupplier Supplier for initial Table object.
1425 Escapes characters in a string, handling Unicode sequences. @param s String to escape. @param index Starting index for escaping.
1426 Constructs a StandardNetwork using provided builder and connections. @param builder NetworkBuilder instance @param nodeConnections Node connection map @param edgeToReferenceNode Edge to node reference map
1427 Constructs a StandardValueGraph using the provided graph builder and connections. @param builder Graph builder object @param nodeConnections Map of nodes to graph connections @param edgeCount Total number of edges in the graph
1428 Copies characters from a Readable to an Appendable. @param from Source Readable @param to Destination Appendable @return Total number of characters copied
1429 Encodes a CharSequence to a byte array. @param chars CharSequence to encode; delegates to m1. @throws IllegalArgumentException if decoding fails.
1430 Calculates the mask for a BigInteger using log2 and rounding. @param x BigInteger to mask.
1431 Calculates the masked value of a BigInteger using log2. @param x BigInteger to mask.
1432 Creates an Invokable instance for the given constructor. @param constructor The constructor to wrap. @return ConstructorInvokable instance.
1433 Creates an Invokable instance for a given Method. @param method The Method to be wrapped. @return MethodInvokable object.
1434 Processes a future, handling interrupts and listeners. @param param The AbstractFuture to process. @param callInterruptTask Flag to interrupt the task.
1435 Atomically adds delta to the value associated with the key. @param key The key to update. @param delta The value to add.
1436 Atomically updates the value for the given key by delta. @param key The key to update. @param delta The value to add to the current value.
1437 Applies a function to each entry in the map atomically. @param m The map to iterate and update atomically.
1438 Constructs an AbstractGraphBuilder with the specified directed flag.
1439 Adds a queue for a listener, using provided executor. @param listener The listener to add. @param executor Executor for listener events.
1440 Converts an A to a B using the configured forward conversion. @param a The input A object, potentially null. @return A B object or null if null and auto-handling enabled.
1441 Constructs a CompactHashMap with the default initial size.
1442 Constructs a CompactHashMap with the specified expected size. @param expectedSize The initial capacity of the hash map.
1443 Constructs a new CompactHashSet with the default size.
1444 Constructs a new CompactHashSet with an initial capacity. @param expectedSize Initial capacity of the set.
1445 Extracts a masked class name based on dollar signs or package.
1446 Constructs an AbstractSortedSetMultimap from a map. @param map The map to use for initialization.
1447 Creates a Multimap from a map and a collection factory. @param map The map to use for initialization. @param factory Supplier for creating new collections.
1448 Creates a new, empty HashMultiset.
1449 Creates a new, empty LinkedHashMultiset.
1450 Creates a multiset of the given enum type and adds elements. @param elements Elements to add to the multiset. @param type The enum class for the multiset. @return EnumMultiset containing the added elements.
1451 Calculates a value using m1() and Math.m2().
1452 Calculates a value using m1() and Math.m2().
1453 Calculates a value using m1() and Math.m2().
1454 Returns a value calculated from m1().
1455 Creates a CharMatcher based on a sequence, then negates it. @param sequence CharSequence to base the matcher on. @return CharMatcher that inverts the matching logic.
1456 Creates a StringConverter for converting to the specified format. @param targetFormat The target CaseFormat to convert to. @return A StringConverter instance.
1457 Creates a ConverterComposition with this and secondConverter. @param secondConverter The converter from B to C. @return A ConverterComposition.
1458 Returns a reverse converter. Lazily initializes if null.
1459 Creates a StringConverter for the given enum class. @param enumClass The enum class to convert. @return A StringConverter instance.
1460 Creates a BiMapConverter from the given BiMap. @param bimap The BiMap used for conversion. @return A new BiMapConverter instance.
1461 Checks if the list contains the given object. @param object The object to search for. @return True if the list contains the object.
1462 Creates a ConcurrentHashMultiset from an iterable of elements. @param elements Iterable of elements to add to the multiset. @return A new ConcurrentHashMultiset containing the elements.
1463 Appends object array parts to an appendable, separated by a separator. @param appendable The appendable to write to. @param parts Object array to append. @return The appendable after appending.
1464 Appends elements from an iterable to a StringBuilder. @param builder StringBuilder to append to. @param parts Iterable of elements to append.
1465 Joins elements from an iterator into a string. @param parts Iterator of elements to join. @return Joined string.
1466 Converts a map's entries to a string representation. @param map The map to convert. @return String representation of the map entries.
1467 Returns the cache specification as a string. Uses helper methods to format the string representation.
1468 Generates a string representation of the MapMaker object. Includes initialCapacity, concurrencyLevel, key/value strengths.
1469 Generates a string representation of the CacheBuilder. Includes key configuration parameters for debugging.
1470 Constructs a `MapMakerInternalMap` with specified configuration. @param builder MapMaker instance defining map properties. @param entryHelper Helper for internal entry management.
1471 Returns the Optional's value or null if the Optional is empty. @param javaUtilOptional Optional value to process. @return Value wrapped in Optional or null if empty.
1472 Creates a HostAndPort from a host string and port number. @param host The host address. @param port The port number.
1473 Parses a host string and validates that it does not contain a port. @param host The host string to parse. @return HostAndPort instance representing the parsed host.
1474 Retrieves an element at a specific position in an iterable. @param iterable Iterable to retrieve from @param position Element position (zero-based) @return Element at the specified position
1475 Creates a Bloom filter with parameters from the internal state. @return A new BloomFilter instance.
1476 Calculates wait time in seconds for requested permits. @param permits Number of permits requested.
1477 Attempts to acquire a permit within the given timeout. @param timeout Duration to wait for a permit. @return True if a permit was acquired, false otherwise.
1478 Attempts to acquire a single permit within a timeout. @param timeout Timeout duration. @param unit Time unit of the timeout. @return True if permit acquired, false otherwise.
1479 Attempts to acquire the specified number of permits. @param permits Number of permits to acquire. @return True if permits acquired, false otherwise.
1480 Attempts to acquire a permit. @param permits Permits to acquire. @param timeout Timeout duration. @param unit Time unit of the timeout.
1481 Attempts to acquire permits within a timeout. @param permits Permits to acquire. @param timeout Timeout duration.
1482 Attempts to acquire the lock, waiting for a timeout. @param time Timeout duration. @param unit Time unit for the duration.
1483 Protected constructor for AbstractService. Prevents direct instantiation.
1484 Checks if all elements satisfy a condition. Iterates through elements and returns false if any fail.
1485 Creates a CacheBuilder with configured cache settings. Uses configured values for capacity, size, and expiration.
1486 Creates a MapMaker with weak keys. @return MapMaker instance with weak key strength
1487 Checks service state, throws exception if unexpected. @param expected Expected service state.
1488 Retrieves the value at the specified row and column. @param rowIndex Row index. @param columnIndex Column index. @return Value at the given indices, or null if not found.
1489 Sets the value at the specified row and column. @param rowIndex row index @param columnIndex column index @param value new value to set @return The previous value at the specified location
1490 Returns the element at the specified index. @param index index of the element to return
1491 Returns the element at the specified index in the subarray. @param index index of the element to return
1492 Gets the element at the specified index. @param index The index of the element to retrieve. @return The long value at the given index.
1493 Finds the first index matching the predicate. @param sequence CharSequence to search. @param start Start index (non-negative). @return Index of first match or -1 if not found.
1494 Constructs an AbstractIndexedListIterator with given size and position. @param size The size of the list. @param position The initial position.
1495 Creates a ByteArrayDataInput from a byte array slice. @param bytes Array of bytes @param start Start index in the byte array
1496 Checks if a byte sequence is valid UTF-8. @param bytes byte array to check @param off start offset in the byte array @param len length of the byte sequence
1497 Copies elements from src to dst array, adjusting size if needed. @param src Source array @param offset Start index in src @param len Number of elements to copy @param dst Destination array
1498 Creates a sub-array from the given array, starting at offset. @param elements array to extract from, may be null @param offset start index @param length number of elements to extract @return new array or empty array if length is 0
1499 Copies hash code bytes to destination array. @param dest destination byte array @param offset offset in the array @param maxLength maximum bytes to copy @return number of bytes copied
1500 Encodes byte array to a string. @param bytes byte array to encode @param off start offset @param len number of bytes to encode
1501 Reads bytes from an input stream into a byte array. @param in input stream @param b byte array @param off offset @param len number of bytes to read @return number of bytes read
1502 Reverses a portion of a boolean array between fromIndex and toIndex. @param array boolean array to reverse @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1503 Reverses a portion of the byte array between fromIndex and toIndex. @param array byte array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1504 Reverses a portion of the char array between fromIndex and toIndex. @param array char array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1505 Reverses a portion of the array between fromIndex and toIndex. @param array array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1506 Reverses a portion of the array between fromIndex and toIndex. @param array the array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1507 Creates an ImmutableDoubleArray sub-array. @param startIndex Start index (inclusive). @param endIndex End index (exclusive).
1508 Creates an ImmutableIntArray sub-array. @param startIndex Start index (inclusive). @param endIndex End index (exclusive).
1509 Creates an ImmutableLongArray from a slice of the original array. @param startIndex Start index (inclusive). @param endIndex End index (exclusive).
1510 Reverses a portion of an integer array. @param array the array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1511 Reverses a portion of a long array. @param array long array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1512 Reverses a portion of the array between fromIndex and toIndex. @param array short array to be reversed @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1513 Masks byte array elements within a range with XOR. @param array byte array to modify @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1514 XORs each byte in the specified range with Byte.MAX_VALUE. @param array byte array to modify @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1515 Masks the sign bit of elements within a portion of the array. @param array Input array @param fromIndex Start index @param toIndex End index
1516 XORs elements in array[fromIndex, toIndex) with Integer.MAX_VALUE. @param array array to modify @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1517 Converts a portion of the array to unsigned longs. @param array The array to modify. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1518 Masks a portion of the array by XORing with Long.MAX_VALUE. @param array array to mask @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1519 Filters a collection based on a predicate. @param unfiltered The collection to filter. @param predicate The filtering predicate. @return A filtered collection.
1520 Creates a Splitter using the given character as a separator. @param separator The character to use as the separator. @return A Splitter instance configured with the separator.
1521 Protected constructor to prevent external instantiation.
1522 Constructs a Finalizer with a reference class, queue, and FRQ. @param finalizableReferenceClass Class of the finalizable reference. @param queue Reference queue for processing finalizable references. @param frqReference PhantomReference used to signal cleanup completion.
1523 Constructs a new Builder instance.
1524 Returns a new Builder instance for constructing ImmutableMultimap.
1525 Constructs a new Builder instance.
1526 Protected constructor for ForwardingSortedMultiset. Allows subclasses to extend forwarding functionality.
1527 Protected constructor for ForwardingQueue. Allows subclasses to extend queue forwarding.
1528 Protected constructor for ForwardingQueue. Allows subclasses to extend queue forwarding.
1529 Protected constructor for ForwardingSortedSet. Allows subclassing.
1530 Protected constructor for ForwardingNavigableMap. Allows subclassing.
1531 Creates an unmodifiable BiMap from the given BiMap. @param bimap The BiMap to make unmodifiable. @return An UnmodifiableBiMap.
1532 Creates a new MutableClassToInstanceMap with a HashMap. Returns an empty map for storing class-instance mappings.
1533 Creates a MutableClassToInstanceMap from a backing map. @param backingMap Map of class to instance. @return A MutableClassToInstanceMap.
1534 Creates an empty ImmutableTypeToInstanceMap. Returns an empty map with type-safe mappings.
1535 Protected constructor for ForwardingSortedSetMultimap.
1536 Returns an unmodifiable Multimap view of the given delegate. @param delegate The Multimap to wrap in an unmodifiable view.
1537 Creates an unmodifiable view of the given table. @param table Table to wrap in an unmodifiable view. @return An UnmodifiableTable wrapping the input table.
1538 Adapts a Future to a ListenableFuture. @param future The Future to adapt. @param executor Executor for listener execution.
1539 Retrieves a value from the cache. @param key The key to retrieve. @return The cached value, or null if not found.
1540 Loads or computes a value for the given key. @param key key to load value for @param valueLoader Callable to compute value if absent @return Value associated with the key
1541 Delegates map retrieval to the underlying cache. @param keys iterable of keys to retrieve @return immutable map containing values for the keys
1542 Stores a key-value pair in the underlying cache. @param key The key for the value. @param value The value to store.
1543 Delegates the map clear operation to the underlying cache. @param m The map to be cleared.
1544 Delegates the key removal operation to the underlying cache. @param keys Iterable of keys to remove from the cache.
1545 Creates a new ReferenceEntry for the segment, key, hash, and next.
1546 Creates a ReferenceEntry for the segment, key, hash, and next.
1547 Creates a ReferenceEntry for the segment, key, hash, and next entry.
1548 Creates a new ReferenceEntry for the segment, key, hash, and next.
1549 Creates a new ReferenceEntry for the given segment, key, hash, and next.
1550 Creates a new or copies an existing ReferenceEntry. @param segment Cache segment. @param key Key for the entry. @param hash Hash code of the key. @param next Existing entry to copy, or null. @return ReferenceEntry for the given key.
1551 Updates a cache entry with a new value and associated metadata. @param entry The cache entry to update. @param key The key of the entry. @param value The new value for the entry. @param now Current timestamp.
1552 Returns the size of the iterable. Delegates to Iterables.size().
1553 Calculates the sum of node degrees and checks parity. Returns the sum divided by 2 (unsigned shift).
1554 Reads all bytes from an InputStream into a combined byte array. @param in Input stream to read from @return Byte array containing the stream's contents
1555 Reads bytes from an InputStream into a byte array. @param in Input stream to read from. @param expectedSize Expected size of the byte array. @return Byte array containing the read bytes.
1556 Constructs a new AbstractBiMap with provided forward and inverse mappings. @param forward The forward mapping from keys to values. @param backward The backward mapping from values to keys.
1557 Retrieves values for a key, delegating to superclass. @param key The key to retrieve values for. @return List of values associated with the key.
1558 Adds values to the collection associated with the given key. @param key the key to associate with the values @param values values to add; returns collection view.
1559 Retrieves values associated with a key. @param key The key to retrieve values for. @return Set of values for the key, or unmodifiable set.
1560 Retrieves the sorted set of values for a given key. @param key The key for which to retrieve values. @return SortedSet of values for the key.
1561 Returns a string representation of the collection. Uses Collections2.m1 to generate the string.
1562 Returns a string representation of the underlying map.
1563 Creates a HashMap with the specified expected size. @param expectedSize the expected size of the HashMap @return a HashMap with the given expected size
1564 Checks if a graph contains a cycle. @param graph The graph to check. @return True if a cycle is found, false otherwise.
1565 Creates a HashBasedTable with expected rows and cells per row. @param expectedRows Number of rows in the table. @param expectedCellsPerRow Cells per row.
1566 Creates a new LinkedHashMap with a specified capacity. @param expectedSize the expected size of the map @return a LinkedHashMap with the given capacity
1567 Creates a map based on ordering type, using expected size.
1568 Creates a HashSet with the specified expected size. @param expectedSize the initial size of the HashSet @return A new HashSet with the given expected size.
1569 Creates a LinkedHashSet with the given expected size. @param expectedSize the expected size of the set
1570 Initializes ServiceManagerState with a collection of services. @param services Immutable collection of services to manage.
1571 Returns the first entry of the delegate multiset, or null.
1572 Returns the first entry of the delegate sorted multiset. Returns null if the delegate is empty.
1573 Returns the first entry from the delegate multiset. Returns null if the delegate is empty.
1574 Retrieves the first entry from the delegate sorted multiset. Returns null if the multiset is empty.
1575 Returns a set of entries, delegating to the superclass.
1576 Delegates to the superclass to retrieve the entry set.
1577 Creates a new TreeRangeSet and adds ranges from the input. @param rangeSet The RangeSet to add ranges from. @return A new TreeRangeSet containing the added ranges.
1578 Creates a TreeRangeSet from an iterable of ranges. @param ranges iterable of Range objects to add @return A new TreeRangeSet containing the ranges.
1579 Returns a navigable map view of the multimap. Delegates to the superclass's map implementation.
1580 Returns the set of cells. Delegates to the superclass.
1581 Returns the values of the table, delegating to the superclass.
1582 Returns the reverse range, creating it if it doesn't exist. @return The reversed GeneralRange, or the existing reverse.
1583 Creates an ImmutableCell with rowKey, columnKey, and value.
1584 Returns the set of elements in this multiset.
1585 Adds a key-value pair to the builder. @param key The key for the new entry. @param value The value for the new entry.
1586 Creates an ImmutableMap from two key-value pairs. @param k1, v1 First key-value pair. @param k2, v2 Second key-value pair.
1587 Creates an ImmutableMap from key-value pairs. @param k1, v1, k2, v2, k3, v3 Key-value pairs to include. @return ImmutableMap containing the provided entries.
1588 Creates an ImmutableMap from provided key-value pairs. @param k1, v1, k2, v2, k3, v3, k4, v4 Key-value pairs. @return ImmutableMap containing the provided entries.
1589 Creates an ImmutableMap from key-value pairs. @param <K> Key type. @param <V> Value type.
1590 Creates an ImmutableMap from six key-value pairs. @param <K> Key type. @param <V> Value type.
1591 Creates an immutable map from multiple key-value pairs. @param <K> Key type @param <V> Value type @param k1, v1-k7, v7 Key-value pairs to include. @return ImmutableMap containing the provided entries.
1592 Creates an ImmutableMap from specified key-value pairs. @param <K> Key type @param <V> Value type @return ImmutableMap containing the provided entries
1593 Creates an immutable map from nine key-value pairs. @param <K> Key type. @param <V> Value type.
1594 Creates an ImmutableMap from ten key-value pairs. @param <K> Key type. @param <V> Value type.
1595 Creates an ImmutableMapEntry from an existing Entry. @param entry The entry to create the ImmutableMapEntry from.
1596 Adds an entry's key-value pair to the multimap. @param entry Entry containing the key and value to add. @return A reference to this Builder.
1597 Adds entries from an iterable to the multimap. @param entries Iterable of entries to add. @return A reference to this Builder.
1598 Adds an entry's key-value pair to the multimap. @param entry Entry containing the key and value to add. @return A reference to this Builder.
1599 Creates a filtered sorted set from a sorted set and predicate. @param unfiltered The original sorted set. @param predicate Predicate to filter elements.
1600 Recalculates the table mask and potentially resizes the table.
1601 Resizes the internal table based on size and capacity.
1602 Checks if the lower bound is less than or equal to the upper bound.
1603 Checks if this Range is equal to another Range. @param object the object to compare with @return true if equal, false otherwise
1604 Delegates element addition to forwarded list, then returns true.
1605 Returns an iterator to the list. Delegates to the underlying list.
1606 Returns a list iterator starting at index 0. Delegates to the underlying list's list iterator.
1607 Finds an AVL node within a range. @return AVL node or null if not found within range.
1608 Copies a table to a new HashBasedTable. @param table The table to copy. @return A new HashBasedTable containing the data from the input.
1609 Creates a TreeBasedTable with natural ordering for rows and cols.
1610 Creates a TreeBasedTable with specified row and column comparators. @param rowComparator Comparator for row keys. @param columnComparator Comparator for column keys.
1611 Creates a new `HashBiMap` with the given expected size. @param expectedSize the expected number of entries
1612 Returns a new Builder instance with default initial capacity.
1613 Constructs a new Builder instance.
1614 Returns a new Builder with natural ordering.
1615 Creates a new Builder with the given comparator for sorting. @param comparator Comparator used for sorting the map.
1616 Returns a Builder with natural ordering.
1617 Creates an ImmutableMap with a single key/value pair. @param k1 The key for the new ImmutableMap. @param v1 The value for the new ImmutableMap.
1618 Returns the inverse mapping of this bi-map.
1619 Returns a new Builder instance for creating an ImmutableList.
1620 Creates a new Builder with the given comparator. @param comparator Comparator for ordering elements.
1621 Creates a new Builder with the natural ordering. @return Builder object for constructing ImmutableSortedSet
1622 Returns a new Builder with natural ordering.
1623 Returns a reversed list if size > 1, otherwise returns this list.
1624 Creates an ImmutableList of Characters from the input string. @param string The string to convert to a list of characters.
1625 Creates a singleton ImmutableList containing the provided element. @param e1 The single element for the new list.
1626 Returns the immutable entry set for this multimap. Lazily initializes if not already present.
1627 Creates a SingletonImmutableSet containing the given element. @param e1 The single element of the set.
1628 Returns the parsed Charset, or empty Optional if none. Parses charset from parameters, throwing exception on conflict.
1629 Calls m1() on each service and returns the ServiceManager.
1630 Checks if all services are healthy (m1() returns true).
1631 Creates a Builder for an immutable set with expected size. @param expectedSize the expected number of elements in the set
1632 Adds all entries from the given multimap to the builder. @param multimap Multimap to copy entries from. @return A reference to this Builder.
1633 Throws FileSystemException if file deletion fails, filtering exceptions. @param path Path to the file/directory. @param exceptions Collection of IOExceptions during deletion.
1634 Concatenates multiple iterators into a single iterator. @param inputs Iterators to combine; can be empty. @return A new iterator containing elements from all inputs.
1635 Retrieves value associated with key. @param key The key whose value is to be retrieved. @return The value associated with the key, or null if absent.
1636 Triggers cleanup if readCount doesn't exceed DRAIN_THRESHOLD.
1637 Checks if the key is within the map's key range. @param key The key to check. @return True if the key is within the range, false otherwise.
1638 Returns a sorted map view from the map's beginning up to the key. @param fromKey the key to which the map is restricted @param toKey the key to which the map is restricted
1639 Computes the differences between two maps using equivalence. @param left, right Maps to compare. @param valueEquivalence Equivalence for values. @return MapDifference object representing differences.
1640 Creates a SortedMapDifference from two sorted maps. @param left Left sorted map. @param right Right map.
1641 Constructs an AsyncEventBus with an identifier and executor. @param identifier Event identifier @param executor Executor for event handling
1642 Constructs an AsyncEventBus with a default identifier and handler. @param executor Executor for event handling. @param subscriberExceptionHandler Exception handler.
1643 Constructs an AsyncEventBus using the provided executor. @param executor Executor for asynchronous event handling.
1644 Constructs an EventBus with a default executor and dispatcher. @param identifier Event identifier
1645 Creates an EventBus with default identifier and executor. @param exceptionHandler Handler for exceptions during event handling.
1646 Calculates the index of the left child. @param index Parent node index. @return Index of the left child.
1647 Returns the minimum value of the left child's range. @param index Index of the parent node. @return Minimum value or -1 if invalid.
1648 Returns null if m1() is true, otherwise returns element at index m2().
1649 Inserts an element into the heap, using cross-over to determine heap. @param index Index of the element to insert. @param x Element to insert.
1650 Checks if the object exists in the delegate multiset. @param object the object to check @return true if the object exists, false otherwise
1651 Adds one occurrence of the element to the delegate. @param element Element to add. @return True.
1652 Checks if an element exists in the multiset. @param element The element to check for. @return True if element exists, false otherwise.
1653 Clears the delegate multiset using an iterator.
1654 Returns the count for an object in the delegate multiset. @param object The object to search for. @return The count if found, 0 otherwise.
1655 Returns a value from the delegate multiset.
1656 Returns a mask value derived from the delegate multiset.
1657 Converts array to new array using ObjectArrays. @param array The array to convert. @return A new array of the same type.
1658 Returns the first element of the forward set or null. Uses Iterators.pollNext on the iterator of the forward set.
1659 Returns a view of the set between fromElement and toElement. @param fromElement start element (inclusive) @param toElement end element (inclusive)
1660 Returns the first element or null if the set is empty. @param e element to start the view from @return First element or null.
1661 Returns element or null. Delegates to Iterators.m3(). @param e element to search for @return element or null
1662 Returns a sorted set view from the beginning up to {@code toElement}. @param toElement element to end the view at
1663 Returns element or null if not found. @param e element to search for @return element or null
1664 Returns element from set view or null if empty. @param e element to start view from, can be null @return Element or null if view is empty
1665 Returns a view of the set from start to end elements. @param fromElement start element, can be null @param toElement end element, can be null
1666 Returns a view of the set from the specified element (inclusive). @param fromElement start element for the view
1667 Returns a sorted set of rows. Delegates to the superclass.
1668 Returns the sorted map of rows to columns. Delegates to the superclass implementation.
1669 Wraps a Deque in a synchronized view without a mutex. @param deque The deque to be wrapped. @return A synchronized Deque.
1670 Constructs ArrayBasedCharEscaper with replacement map and safe range. @param replacementMap Character replacements. @param safeMin Minimum safe character value. @param safeMax Maximum safe character value.
1671 Creates an Escaper using the character escape mappings. @return Escaper instance built from escape mappings.
1672 Constructs an ArrayBasedUnicodeEscaper with replacement map. @param replacementMap Character replacements @param safeMin Minimum safe character value @param safeMax Maximum safe character value @param unsafeReplacement Replacement for unsafe chars
1673 Creates a HashCode from a byte array, ensuring it has at least one byte. @param bytes The byte array representing the hash code.
1674 Creates a HashCode from a string, validating length and parity. @param string The string to convert to a HashCode.
1675 Combines multiple HashCode objects into a single HashCode. @param hashCodes Iterable of HashCode objects to combine.
1676 Combines multiple HashCodes into a single HashCode. @param hashCodes Iterable of HashCodes to combine @return Combined HashCode
1677 Creates an HmacMD5 HashFunction using the provided key. @param key Key for HMAC initialization @return HmacMD5 HashFunction object
1678 Creates an HmacSHA1 hash function using the provided key. @param key The key used to initialize the HmacSHA1 function. @return HmacSHA1 HashFunction instance.
1679 Creates an HmacSHA256 HashFunction from a byte array key. @param key Key used for HmacSHA256 initialization @return New HmacSHA256 HashFunction instance
1680 Creates an HmacSHA512 HashFunction from a byte key. @param key The key to use for HMAC initialization @return HmacSHA512 HashFunction instance
1681 Creates a `ByteArrayByteSource` from the given byte array.
1682 Creates a CharSource from a CharSequence, using StringCharSource if String.
1683 Writes lines to output stream using default line separator. @param lines Iterable of lines to write
1684 Writes lines from a stream to an output stream, using default line separator. @param lines Stream of CharSequence lines
1685 Deserializes a Bloom filter from an input stream. @param in Input stream containing Bloom filter data @param funnel Funnel for hashing elements @return BloomFilter object
1686 Calculates the mean of an iterable of numbers. @param values Iterable of numbers to average.
1687 Calculates double exponent based on rounding mode. @param x The double value. @param mode The rounding mode to apply.
1688 Checks if a hash table has a long run of nulls. @param hashTable The hash table to check. @return True if a long run of nulls is found, false otherwise.
1689 Adds an element to the buffer, maintaining the top K elements. @param elem Element to add; can be null.
1690 Creates an ignore-case Alphabet. @return New Alphabet instance with ignoreCase set to true.
1691 Creates a TopKSelector with specified buffer size and comparator. @param k The maximum number of elements to store. @param comparator Comparator for ordering elements.
1692 Creates a TopKSelector with a comparator and buffer size. @param k The maximum number of elements to store. @param comparator Comparator for ordering elements.
1693 Creates a linear transformation based on two points. @param x2 x-coordinate of the second point @param y2 y-coordinate of the second point
1694 Creates a mask-based linear transformation. Uses stats to determine transformation type.
1695 Creates a mask-based LinearTransformation. Handles various stats conditions.
1696 Checks if a number is likely prime using heuristics and tests. @param n long integer to test for primality
1697 Calculates the floor of the base-10 logarithm of a BigInteger. @param x BigInteger to calculate log floor. @param mode RoundingMode to apply during calculation.
1698 Calculates binomial coefficient (n choose k) with overflow checks. @param n non-negative integer @param k non-negative integer <= n @return binomial coefficient or Long.MAX_VALUE on overflow
1699 Calculates the second moment of a sequence of numbers. @param values Iterable of numbers to calculate the second moment from.
1700 Updates sum of products of deltas based on x and y. @param x The first data value. @param y The second data value.
1701 Accumulates squared differences from the mean. @param values Iterable of Number objects to process.
1702 Accumulates statistics from an iterator of numbers. @param values Iterator providing the numerical data.
1703 Accumulates statistics from a dataset. @param values Stats object containing data to accumulate.
1704 Accumulates statistics from a StatsAccumulator. @param values StatsAccumulator containing data to merge.
1705 Finds the element at the specified index in a sorted array. @param required Target index (inclusive). @param array Array to search. @param from Starting index. @param to Ending index.
1706 Processes a DoubleStream, adding its elements to the array. @param stream Stream of doubles to add to the builder.
1707 Adds values from an iterable to the array. @param values Iterable of doubles to add. @return this Builder instance.
1708 Adds integers from a stream to the builder. @param stream IntStream to add elements from. @return this Builder instance.
1709 Adds integers from an iterable to the builder. @param values Iterable of integers to add. @return A reference to this builder.
1710 Adds all elements from a LongStream to the builder. @param stream the LongStream to add elements from @return this Builder instance
1711 Reads long values from an ObjectInputStream and populates the AtomicLongArray.
1712 Adds longs from an iterable to the builder. @param values Iterable of Long values to add. @return this Builder instance.
1713 Parses a string to Integer, returns null if parsing fails. @param string String to parse.
1714 Parses a string as an unsigned integer with radix 10. @param string The string to parse.
1715 Masks the value with a bitmask derived from the input. @param val The UnsignedLong value to mask.
1716 Converts an unsigned long to a string in the specified radix. @param x Unsigned long value to convert. @param radix The radix to use for conversion.
1717 Computes (a * b) % m using modular arithmetic. @param a base @param b exponent @param m modulus @return result of modular multiplication.
1718 Calculates (a * a) % m. Used for modular squaring. @param a base value @param m modulus @return modular squared value
1719 Masks the value with a bitmask derived from the input. @param val The unsigned long value to mask.
1720 Parses a string to an unsigned long, using radix 10. @param string String to parse.
1721 Checks if this entry is equal to another entry. @param object The object to compare with. @return True if equal, false otherwise.
1722 Calculates a masked value based on key and value's m3(). Returns 0 if either key or value is null.
1723 Concatenates the results of m1 and m2, separated by "=".
1724 Checks if m1() returns a non-null value.
1725 Creates a ListeningExecutorService, wrapping the given executor. @param delegate ExecutorService to wrap; can be ScheduledExecutorService.
1726 Returns a {@code ListeningScheduledExecutorService}, or wraps if needed. @param delegate The ScheduledExecutorService to wrap or return.
1727 Executes tasks and returns the result; throws exceptions on failure. @param executorService Executor service to use. @param tasks Collection of tasks to execute.
1728 Creates a CombinedFuture to execute a task with given executor. @param combiner async callable to execute @param executor executor for the callable @return ListenableFuture that represents the combined future
1729 Creates a ListenableFuture that executes a combiner on completion. @param combiner Callable to execute after future completion. @param executor Executor for the combiner.
1730 Checks lock acquisition order, throws exception if invalid. @param policy Lock policy to enforce @param acquiredLock Lock node being acquired
1731 Loads a value associated with a key. @param key The key to load. @param oldValue The old value associated with the key. @return ListenableFuture representing the loading process.
1732 Returns a NonCancellationPropagatingFuture from a combined future.
1733 Executes an AsyncCallable using a provided executor. @param callable Callable task to execute. @param executor Executor to run the task with. @return ListenableFuture representing the task's result.
1734 Retrieves the result from a Future, throwing a specified exception type. @param validator Validator for checked types. @param future Future to retrieve the result from. @param exceptionClass Exception to throw on failure.
1735 Gets the Future's result, throws exception if timeout or error. @param future Future to retrieve result from. @param exceptionClass Exception class to throw.
1736 Signals a waiting thread if the lock is in a specific state. Uses internal lock methods and signals a waiter.
1737 Waits on a condition with a timeout, signaling if requested. @param guard The guard to wait on. @param nanos Timeout in nanoseconds. @param signalBeforeWaiting Whether to signal before waiting. @return True if waiting was successful, false if timeout.
1738 Wraps a future with a timeout, returns delegate if already timed. @param delegate The future to wrap. @param time Timeout duration. @param unit Time unit for the timeout. @param scheduledExecutor Executor for scheduling timeout.
1739 Schedules an AsyncCallable for future execution. @param callable Callable to execute asynchronously. @param delay Delay before execution. @param executorService ExecutorService for scheduling.
1740 Retrieves an enum constant by value. @param enumClass Enum class to search. @param value String value of the enum constant. @return Optional containing the enum constant or empty.
1741 Finds the first element in an iterable that matches a predicate. @param iterable Iterable to search. @param predicate Predicate to apply to each element.
1742 Checks if any element in the iterable matches the predicate. @param predicate Predicate to test each element. @return True if any element matches, otherwise false.
1743 Creates a CharMatcher based on totalCharacters and a BitSet. @param totalCharacters Number of characters to match. @param table BitSet representing characters to match.
1744 Re-throws throwable if its type matches declared types. @param throwable The throwable to check, or null. @param declaredType1, declaredType2 Types to match against.
1745 Wraps a Throwable as a RuntimeException and propagates it. @param e The exception to wrap and re-throw.
1746 Wraps a Throwable as a RuntimeException, propagating exceptions. @param e The exception to wrap. @param declaredType The expected exception type.
1747 Closes resources in the stack, handling exceptions and re-throwing.
1748 Creates a thread with the given name and runnable. @param name Thread name @param runnable Runnable to execute in the thread @return The created thread
1749 Filters a SetMultimap based on a key predicate. @param unfiltered The SetMultimap to filter. @param keyPredicate Predicate to filter keys. @return Filtered SetMultimap.
1750 Creates a filtered SetMultimap based on an entry predicate. @param unfiltered The base multimap to filter. @param entryPredicate Predicate to filter entries. @return Filtered SetMultimap.
1751 Retrieves annotation of specified type from parameters. @param annotationType The class of the annotation to retrieve. @return Annotation instance or null if not found.
1752 Creates a MergingIterator from multiple iterators, sorted by comparator. @param iterators Iterables of iterators to merge @param comparator Comparator for sorting the merged elements
1753 Converts an iterable to an object array. Uses castOrCopyToCollection to perform conversion.
1754 Updates values for a key with new values, then returns old values. @param key The key to update. @param values New values to associate with the key.
1755 Retrieves old values associated with a key and removes them. @param key The key to retrieve and remove values for. @return List of old values associated with the key.
1756 Converts an iterable to a CopyOnWriteArrayList. @param elements Iterable to convert. @return CopyOnWriteArrayList containing elements.
1757 Creates a CopyOnWriteArraySet from an iterable. @param elements Iterable containing elements for the set.
1758 Searches for a key in a sorted list using binary search. @param key The key to search for. @return Index of key or as defined by absentBehavior.
1759 Converts keys to a list of stripes. @param keys Iterable of keys to stripe. @return List of striped locks.
1760 Returns a string describing the network's properties. Includes directed, parallel edges, self-loops, nodes, edges.
1761 Returns a string describing the graph's properties. Uses m1, m2, m3, and edgeValueMap to build the string.
1762 Creates a TransformedEntriesNavigableMap from a map and transformer. @param fromMap The input navigable map. @param transformer Transforms entries of the input map. @return A new navigable map with transformed entries.
1763 Transforms values in a SortedMap using a Function. @param fromMap The SortedMap to transform. @param function Transforms values of type V1 to V2. @return A new SortedMap with transformed values.
1764 Adds a specified number of occurrences for an element. @param element the element to add @param occurrences number of occurrences to add @return the old count of the element
1765 Adds a specified number of occurrences for an element. @param element the element to add @param occurrences the number of occurrences to add @return the old count of the element
1766 Transforms a ListMultimap using a Function. @param fromMultimap source multimap @param function transforms values @return Transformed ListMultimap
1767 Adds all elements from a collection to the multiset. @param elementsToAdd Collection of elements to add. @return True if the multiset was modified.
1768 Adds elements from a collection to the multiset. @param elementsToAdd Collection of elements to add. @return True if the multiset was modified.
1769 Returns a synchronized view of the given Multimap. @param multimap The Multimap to be synchronized.
1770 Creates a synchronized Table from the given Table. @param table The Table to be synchronized.
1771 Escapes characters in a string starting from the found index. @param string The string to escape. @return The escaped string or original if no escaping needed.
1772 Converts a Readable to a StringBuilder. @param r Source Readable object @return StringBuilder containing the Readable's content
1773 Creates a CatchingFuture to handle exceptions and fallback. @param input Future to monitor; @param exceptionType Exception type; @param fallback Fallback function; @param executor Executor.
1774 Attempts to cancel the future, potentially interrupting running tasks. @param mayInterruptIfRunning Whether to interrupt running tasks. @return True if cancellation succeeded.
1775 Attempts to set the future's value, handling interrupts. @param value The value to set, or null to clear. @return True if successful, false otherwise.
1776 Sets the future to failed state with the given exception. @param throwable The exception to set as the failure cause. @return True if the future was set, false otherwise.
1777 Processes a future, handling interrupts and cancellations. @param future ListenableFuture to process. @return True if processed successfully, false otherwise.
1778 Transforms a ListenableFuture with a function and executor. @param input Input future to transform.
1779 Atomically increments the value associated with the key by 1. @param key The key whose value is to be incremented.
1780 Decrements the value associated with the key by 1. @param key The key whose value is decremented.
1781 Atomically increments the value associated with the key. @param key The key whose value is to be incremented.
1782 Decrements the value associated with the given key. @param key The key whose value is decremented.
1783 Creates an AtomicLongMap from a Map. @param m The map to initialize the AtomicLongMap with. @return An AtomicLongMap initialized with data from the map.
1784 Constructs a GraphBuilder with the specified directed flag.
1785 Constructs a NetworkBuilder with the specified directed flag.
1786 Constructs a ValueGraphBuilder with the specified directionality.
1787 Adds a listener to the service, using provided executor. @param listener The listener to add. @param executor Executor for listener events.
1788 Converts an A to a B using the configured conversion. @param a The input A object. @return A B object or null.
1789 Creates a new, empty CompactHashMap instance.
1790 Creates a new CompactHashMap with the given expected size. @param expectedSize Initial capacity of the hash map.
1791 Creates a new, empty CompactHashSet instance.
1792 Creates a new CompactHashSet with the given initial capacity. @param expectedSize Initial capacity for the set.
1793 Creates a ListMultimap from a map and a list factory. @param map The map to initialize from. @param factory Factory for creating new lists.
1794 Creates a SetMultimap from a map and a set factory. @param map The map to initialize from. @param factory Supplier for creating sets of values.
1795 Creates a new Builder with an empty LinkedHashMultiset.
1796 Creates a ConverterComposition with this and secondConverter. @param secondConverter The converter from B to C. @return A ConverterComposition.
1797 Appends elements from an array to a StringBuilder. @param builder StringBuilder to append to. @param parts Array of elements to append.
1798 Joins elements from an iterable into a string. @param parts Iterable of elements to join. @return Joined string or delegates to iterator join.
1799 Creates a `MapMakerInternalMap` based on key/value strengths. @param builder MapMaker instance defining map properties.
1800 Creates a MapMakerInternalMap based on builder's strength settings. @param builder MapMaker instance defining map properties
1801 Creates a FluentIterable from multiple Iterable inputs. @param inputs Iterable(s) to wrap in a FluentIterable.
1802 Retrieves the element at the specified position. @param position Index of the element to retrieve. @return Element at the given position, or null if out of bounds.
1803 Acquires a single permit. @return Time to wait in seconds to acquire the permit.
1804 Attempts to acquire the lock for a given duration. @param time Duration to wait for lock acquisition. @return True if lock acquired, false otherwise.
1805 Attempts to acquire the lock with a timeout. @param guard Guard object. @param time Timeout duration. @param unit Time unit for the duration.
1806 Creates a CacheBuilder from a CacheBuilderSpec, enabling configuration.
1807 Creates and returns an Interner instance using the builder chain.
1808 Creates and returns an Interner instance using the builder.
1809 Sets value at row/column and returns previous value. @param rowKey row key @param columnKey column key @param value new value @return Previous value or null
1810 Retrieves a value at the specified row and column keys. @param rowKey Row key. @param columnKey Column key. @return Value at the specified location or null if not found.
1811 Checks if this array is equal to another ImmutableDoubleArray. @param object The object to compare with. @return True if equal, false otherwise.
1812 Checks if two ImmutableIntArray objects are equal. @param object The object to compare to. @return True if objects are equal, false otherwise.
1813 Checks if two ImmutableLongArray instances are equal. @param object Object to compare with, must be ImmutableLongArray. @return True if objects are equal, false otherwise.
1814 Converts a string to the specified case format, separated by words. @param format CaseFormat enum specifying the desired format. @param s Input string to format.
1815 Finds the first index matching predicate in sequence. @param sequence CharSequence to search @return Index of first match or -1 if not found
1816 Constructs an AbstractIndexedListIterator with given size. @param size The size of the list.
1817 Creates a TeredoInfo object from an Inet6Address. @param ip The Inet6Address to convert.
1818 Checks if a byte array is well-formed UTF-8. @param bytes byte array to check @return true if valid UTF-8, false otherwise
1819 Encodes a byte array to a string. @param bytes byte array to encode @return String representation of the byte array
1820 Reads len bytes from InputStream into byte array. @param in input stream @param b byte array @param off offset @param len number of bytes to read @throws EOFException if fewer than len bytes are read
1821 Reverses the entire boolean array in place. @param array The boolean array to reverse.
1822 Rotates a boolean array segment by a specified distance. @param array array to rotate @param distance rotation distance @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1823 Reverses the entire byte array in place. @param array The byte array to be reversed.
1824 Rotates a portion of a byte array by a specified distance. @param array byte array to rotate @param distance rotation distance @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1825 Reverses a portion of the byte array in place. @param array byte array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1826 Reverses a portion of the char array. @param array char array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1827 Reverses the entire char array in place. @param array The char array to be reversed.
1828 Rotates a char array section by a specified distance. @param array char array to rotate @param distance rotation distance @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1829 Reverses a portion of the array; validates indices. @param array array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1830 Reverses the elements of the array in place. @param array The array to be reversed.
1831 Rotates a portion of the array by a specified distance. @param array array to rotate @param distance rotation distance @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1832 Reverses a portion of the array between fromIndex and toIndex. @param array the array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1833 Reverses the entire float array in place. @param array The float array to be reversed.
1834 Rotates a portion of the array by a specified distance. @param array the array to rotate @param distance rotation distance @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1835 Reverses a portion of an integer array in place. @param array array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1836 Reverses the entire integer array in place. @param array the integer array to reverse
1837 Rotates a portion of an integer array by a specified distance. @param array array to rotate, distance, fromIndex, toIndex
1838 Reverses a portion of a long array in place. @param array long array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1839 Reverses the entire long array in place. @param array The long array to be reversed.
1840 Rotates a portion of a long array by a specified distance. @param array array to rotate, distance, fromIndex, toIndex
1841 Reverses a portion of the array. @param array short array @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1842 Reverses the entire short array in place. @param array The short array to be reversed.
1843 Rotates a short array segment by a specified distance. @param array array to rotate @param distance rotation distance @param fromIndex starting index @param toIndex ending index
1844 Sorts a byte array in ascending order. @param array The byte array to be sorted.
1845 Sorts a byte array in descending order using unsigned bytes. @param array The byte array to sort.
1846 Sorts an integer array in ascending order. @param array The array to be sorted.
1847 Sorts a portion of the array in descending order using XOR. @param array The array to sort.
1848 Sorts the array of longs in ascending order. @param array The array to be sorted.
1849 Sorts an array of longs in descending order. @param array The array to sort.
1850 Creates a Splitter using the given character as a separator. @param separator The character to use as the separator. @return A Splitter instance configured with the separator.
1851 Creates a MapSplitter using a character separator. @param separator The character used to separate key-value pairs. @return A MapSplitter instance configured with the separator.
1852 Creates and starts a finalizer thread for cleanup. @param finalizableReferenceClass Class of the reference. @param queue Reference queue. @param frqReference PhantomReference for signaling completion.
1853 Returns a new Builder instance for creating ImmutableListMultimap.
1854 Returns a new Builder instance for constructing ImmutableSetMultimap.
1855 Returns an unmodifiable Multiset view of the input. @param multiset The multiset to wrap in an unmodifiable view.
1856 Creates a new EvictingQueue with the specified maximum size. @param maxSize The maximum number of elements the queue can hold.
1857 Protected constructor for ForwardingBlockingDeque. Allows subclasses to extend deque forwarding.
1858 Protected constructor for ForwardingBlockingDeque. Allows subclasses to extend deque forwarding.
1859 Protected constructor for ForwardingNavigableSet. Allows subclassing.
1860 Creates an unmodifiable set view of a map's entry set. @param entrySet The entry set to wrap in an unmodifiable view. @return An UnmodifiableEntrySet.
1861 Returns an unmodifiable NavigableMap from the given map. @param map The input NavigableMap. @return An unmodifiable NavigableMap.
1862 Returns an unmodifiable ListMultimap. @param delegate The ListMultimap to unmodifiable. @return An UnmodifiableListMultimap.
1863 Returns an unmodifiable SetMultimap view of the given delegate. @param delegate The SetMultimap to return an unmodifiable view of.
1864 Returns an unmodifiable view of the given RowSortedTable. @param table The RowSortedTable to wrap in an unmodifiable view.
1865 Adapts a Future to a ListenableFuture. @param future The Future to adapt; returns if already ListenableFuture. @return A ListenableFuture wrapping the provided Future.
1866 Attaches a callback to a future, executing it on the given executor. @param future Future to monitor. @param callback Callback to execute on completion. @param executor Executor to run the callback on.
1867 Constructs a LocalCache with parameters from a CacheBuilder. @param builder CacheBuilder used to configure the cache. @param loader CacheLoader used to load values.
1868 Creates a new TreeMultiset with natural ordering. @return TreeMultiset instance with natural ordering.
1869 Creates a TreeMultiset. Uses natural ordering if comparator is null. @param comparator Comparator for ordering elements, or null. @return A new TreeMultiset instance.
1870 Adds values to the collection associated with the given key. @param key the key to associate with the values @param values values to add; returns collection view.
1871 Adds values to the collection associated with the given key. @param key the key to associate with the values @param values values to add; returns collection view.
1872 Retrieves values for a key, delegating to superclass. @param key The key to retrieve values for. @return SortedSet of values for the key.
1873 Creates a HashMultiset with space for the specified number of distinct elements. @param distinctElements The expected number of distinct elements.
1874 Checks a network recursively based on its properties. @param network The network to check. @return True if certain conditions are met, false otherwise.
1875 Creates a LinkedHashMultiset with capacity for distinctElements. @param distinctElements Expected number of distinct elements.
1876 Constructs a StandardNetwork using the provided NetworkBuilder. @param builder NetworkBuilder instance to initialize with.
1877 Constructs a StandardValueGraph using the provided builder. @param builder Graph builder object used for initialization.
1878 Returns a set of values associated with keys in the multimap.
1879 Returns a Set of values, using a predefined capacity.
1880 Adds a cell to the builder and returns the builder. @param rowKey row key for the cell @param columnKey column key for the cell @param value value for the cell
1881 Adds a key-value pair to the builder and returns itself. @param key The key for the new entry. @param value The value for the new entry.
1882 Associates a class type with its instance, enabling fluent building. @param key Class type (key). @param value Instance of the class type (value).
1883 Adds entries from a map to the builder, converting values. @param map Map of class types and instances to add. @return The builder instance.
1884 Adds an entry to the builder using its key and value. @param entry The entry to add. @return A reference to this builder.
1885 Adds a key-value pair to the builder and returns itself. @param key The key for the new entry. @param value The value for the new entry.
1886 Adds a key-value pair to the map builder. @param <T> Type of the value. @param key The key for the new entry. @param value The value for the new entry.
1887 Adds a key-value pair to the map builder. @param key The TypeToken representing the key. @param value The value to associate with the key.
1888 Adds entries from an iterable to the multimap. @param entries Iterable of entries to add. @return A reference to this Builder.
1889 Adds entries from an iterable to the multimap. @param entries Iterable of entries to add. @return A reference to this Builder.
1890 Creates a filtered navigable set from a set and predicate. @param unfiltered The original set to filter. @param predicate Predicate to filter elements.
1891 Builds an ImmutableSortedMap based on the current size. Returns an empty map if size is 0, or constructs map.
1892 Adds a range-value pair to the builder. @param range The range to associate with the value. @param value The value associated with the range.
1893 Adds a range to the builder. @param range The range to add; must not be empty. @return The builder itself for chaining.
1894 Determines the intersection of two ranges. @param connectedRange The range to intersect with. @return The intersection range or connectedRange.
1895 Checks for range intersection; throws exception if present. @param otherRange The range to compare against.
1896 Returns the range that contains both this and the other range. @param other the other Range to compare with @return Range containing both ranges or the other range
1897 Creates a Range from a DiscreteDomain. @param domain The domain for the range's bounds.
1898 Creates a `HashBiMap` with default initial capacity (16). @return A new `HashBiMap` instance.
1899 Creates a HashBiMap from a given map. @param map the map to initialize the HashBiMap from @return a new HashBiMap populated with the map's entries
1900 Returns a new Builder instance for constructing the map.
1901 Creates an ImmutableClassToInstanceMap from a class and value. @param <B> base type @param <T> extends B @param type the class type @param value the instance of type T @return ImmutableClassToInstanceMap with the given type and value
1902 Returns an immutable set of the bi-map's values.
1903 Reverses a list, handling ImmutableList, ReverseList, and RandomAccess.
1904 Creates an ImmutableList from an array. @param elements Array of elements to create the list from.
1905 Creates an ImmutableList from an array, handling empty, single, and multiple elements.
1906 Returns a new ImmutableList containing elements from fromIndex to toIndex. @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1907 Creates an ImmutableRangeMap from a range and value. @param range The range for the mapping. @param value The value associated with the range.
1908 Creates an ImmutableRangeSet from a single Range. @param range The range to create the set from.
1909 Creates an ImmutableSortedMap with a single entry. @param comparator Comparator for keys @param k1 Key of the entry @param v1 Value of the entry
1910 Creates an ImmutableSet from an array of elements. @param elements Array of elements to create the set from
1911 Returns a new Builder instance for creating immutable sets.
1912 Combines two iterators. @param a First iterator. @param b Second iterator. @return Combined iterator.
1913 Concatenates three iterators. @param a, b, c Iterators to concatenate. @return A new iterator containing elements from all inputs.
1914 Concatenates four iterators and returns a new iterator. @param a, b, c, d Iterators to combine; can be empty. @return A new iterator containing elements from all inputs.
1915 Returns an iterator of subscribers for the given event type. @param event The event object. @return An iterator of Subscriber objects.
1916 Executes a ClosingFuture and returns its result. @param closingFuture Future object to execute. @return Result of the executed future.
1917 Checks if any mapped value equals the given value. @param value The value to search for. @return True if a matching value is found, false otherwise.
1918 Gets the value associated with a key, delegating to the wrapped map. @param key The key to search for. @return The value if found, otherwise null.
1919 Clears the map by iterating through its entries.
1920 Negates the result of an internal operation.
1921 Returns a set of map entries, delegating to the underlying map.
1922 Computes the differences between two maps. @param left, right Maps to compare. @return MapDifference object representing differences.
1923 Constructs an EventBus with the identifier "default".
1924 Swaps element with smaller child, or inserts at correct position. @param index Index of the element to potentially swap. @param x Element to insert or swap.
1925 Bubbles down an element to its correct position in the heap. @param index Starting index for the bubbling down process. @return The final index after bubbling down.
1926 Checks if the object is within the range of the sorted set. @param object The object to check. @return True if object is within range, false otherwise.
1927 Checks if the set contains an object equal to the given object. @param object The object to search for. @return True if found, false otherwise.
1928 Returns a sorted set from fromElement to toElement (inclusive).
1929 Returns a sorted set of rows. Delegates to internal methods.
1930 Removes all values associated with the given key. @param key The key whose values are to be removed. @return A set of values previously associated with the key.
1931 Creates a Bloom filter with specified funnel, expected insertions, and false positive probability, using default strategy. @param funnel Funnel for hashing elements @param expectedInsertions Expected number of insertions @param fpp False positive probability @return BloomFilter instance
1932 Rounds a double to the nearest integer, validating the input. @param x the double value to round @param mode the rounding mode to use
1933 Converts a double to a long after rounding. @param x the double value to convert @param mode the rounding mode to use
1934 Adds elements from iterator to buffer, maintaining top K. @param elements Iterator providing elements to add.
1935 Creates a TopKSelector with specified buffer size and natural ordering. @param k The maximum number of elements to store.
1936 Creates a TopKSelector with a comparator and buffer size. @param k The maximum number of elements to store.
1937 Delegates to LongMath.m1 for integer calculation.
1938 Calculates binomial coefficient (n choose k) as a BigInteger. @param n non-negative integer @param k non-negative integer <= n @return binomial coefficient
1939 Calculates stats from a dataset. @param values Iterable of numbers to compute stats from @return Stats object containing calculated statistics
1940 Calculates stats from an iterator of numbers. @param values Iterator of numbers to calculate stats from @return Stats object containing the calculated statistics
1941 Updates paired statistics, handling zero counts and deltas. @param values Stats object containing data to accumulate.
1942 Computes stats (mean, variance, std dev) from a stream of doubles. @param values Stream of double values to analyze. @return Stats object containing the computed statistics.
1943 Computes stats (mean, variance, etc.) from an IntStream. @param values Stream of integers to analyze. @return Stats object containing calculated statistics.
1944 Calculates stats (mean, variance, etc.) from a LongStream. @param values Stream of long values to analyze. @return Stats object containing the computed statistics.
1945 Accumulates statistics from a DoubleStream. @param values Stream of double values to accumulate.
1946 Accumulates statistics from an IntStream. @param values IntStream to accumulate statistics from.
1947 Accumulates statistics from a LongStream. @param values LongStream of values to accumulate.
1948 Recursively finds values below and above a chosen value. @param allRequired Sorted array of indices. @param requiredFrom/To Bounds for the search.
1949 Creates an ImmutableDoubleArray from an Iterable of Doubles. @param values Iterable of doubles to create the array from.
1950 Creates an ImmutableIntArray from an Iterable of Integers. @param values Iterable of Integers to create array from.
1951 Creates an ImmutableLongArray from an Iterable of Longs. @param values Iterable of Long values to create array from.
1952 Converts the unsigned long value to a string in the specified radix. @param radix The radix to use for conversion.
1953 Converts an unsigned long to a string in base 10. @param x Unsigned long value to convert.
1954 Executes tasks and returns the result; throws exceptions on failure. @param executorService Executor service to use. @param tasks Tasks to execute. @param timed Whether to time the execution. @param timeout Timeout duration. @return Result of the first completed task.
1955 Executes a runnable after future completion using provided executor. @param combiner Runnable to execute. @param executor Executor to run the runnable. @return ListenableFuture for the combined operation.
1956 Creates a `ClosingFuture` wrapping the given `ListenableFuture`. @param future The future to be wrapped.
1957 Retrieves the next element or null if the queue is empty.
1958 Retrieves the head of the queue, or null if empty.
1959 Submits a Callable for asynchronous execution and returns a Future. @param callable Callable task to execute. @param executor Executor to run the task with.
1960 Gets the Future's result, throws exception if timeout or error. @param future Future to retrieve result from. @param exceptionClass Exception class to throw.
1961 Transitions service to TERMINATED state, notifies listeners. @param previous The service's previous state.
1962 Handles service failure, updates state, and notifies listeners. @param cause The exception that caused the failure.
1963 Records service startup time. Creates timer if needed. @param service The service to monitor.
1964 Transitions a service to a new state, handling state validation and timing. @param service The service being transitioned. @param from The previous state of the service. @param to The new state of the service.
1965 Waits on a guard, signals before waiting if specified. @param guard The guard associated with the condition.
1966 Waits on the condition associated with the guard, signaling before waiting. @param guard The guard associated with the condition to wait on.
1967 Waits on a guard, signals if requested, and releases the lock. @param guard The guard associated with the condition.
1968 Waits on a condition, throwing exception if preconditions fail. @param guard The guard associated with the condition.
1969 Acquires lock, waits for guard condition, and releases lock. @param guard The guard to wait on. @param time Timeout duration. @param unit Time unit for the duration.
1970 Waits on a condition with timeout, returns true if satisfied. @param guard Guard to wait on. @param time Timeout duration. @param unit Time unit for the duration.
1971 Waits on a condition with a timeout. @param guard The guard to wait on. @param time Timeout duration. @param unit Time unit for the duration. @return True if waiting was successful, false if timeout.
1972 Waits on a guard with a timeout, returning true if signaled. @param guard The guard to wait on. @param time Timeout duration. @param unit Time unit.
1973 Wraps future with timeout, returns delegate if already timed. @param timeout Timeout duration. @param unit Time unit. @param scheduledExecutor Executor for timeout scheduling.
1974 Wraps a future with a timeout using nanosecond duration. @param delegate The future to wrap. @param time Timeout duration. @param scheduledExecutor Executor for scheduling timeout.
1975 Finds the first element matching the predicate. @param predicate Predicate to apply to each element. @return Optional containing the first match or empty.
1976 Creates a CharMatcher that matches characters based on a BitSet. Uses precomputed table or negates it if too many characters.
1977 Wraps a throwable and re-throws it as a RuntimeException. @param e The exception to wrap. @param declaredType1, declaredType2 Types to check.
1978 Writes byte array to an output stream. @param bytes The byte array to write. @throws IOException if an I/O error occurs.
1979 Copies byte data from an InputStream to the output. @param input The source InputStream. @return Total number of bytes copied.
1980 Checks if the source is empty. Returns true if the source size is known and zero. Otherwise, reads the first byte to determine emptiness.
1981 Returns the size of the byte source, or attempts to read it.
1982 Copies data from the source to the output stream. @param output The destination OutputStream. @return Number of bytes copied.
1983 Copies data from a source to a sink, managing resources. @param sink The ByteSink to copy data to. @return Number of bytes copied.
1984 Reads all bytes from the input stream into a byte array. Uses Closer to manage resources and handle exceptions.
1985 Processes byte stream using processor. @param processor Processor for handling byte data @return Processed result of type T @throws IOException if an I/O error occurs
1986 Compares this ByteSource to another, using streams. @param other the other ByteSource to compare to @throws IOException if an I/O error occurs during comparison
1987 Writes a CharSequence to an output stream, handling I/O. @param charSequence The sequence of characters to write. @throws IOException if an I/O error occurs.
1988 Writes characters from a Readable to a Writer. @param readable Source of characters to write @return Number of characters written
1989 Returns the length of the CharSource, or counts chars if unknown. @return Length as Long, or character count if length is unknown.
1990 Copies characters from a Reader to an Appendable. @param appendable Destination Appendable @return Total number of characters copied
1991 Copies data from a CharSource to a CharSink, handling resources. @param sink Destination CharSink @return Total number of characters copied @throws IOException if an I/O error occurs
1992 Reads and returns a line from the character source. Handles exceptions and closes resources safely.
1993 Processes lines from a source using a LineProcessor. @param processor Processes each line. @return Processed result. @throws IOException If an I/O error occurs.
1994 Checks if the Reader is empty, using length if available. @throws IOException if an I/O error occurs.
1995 Resizes the cache table when it reaches maximum capacity. Expands the table and rehashes entries to new slots.
1996 Filters a Multimap based on a key predicate. @param unfiltered The Multimap to filter. @param keyPredicate Predicate to filter keys.
1997 Filters a SetMultimap based on a value predicate. @param unfiltered The base multimap to filter. @param valuePredicate Predicate to apply to map values.
1998 Creates a filtered multimap based on an entry predicate. @param unfiltered The base multimap to filter. @param entryPredicate Predicate for filtering entries.
1999 Returns an iterator over unique column values, sorted by comparator.
2000 Creates an ImmutableBiMap from an iterable of entries. @param entries Iterable of map entries. @return ImmutableBiMap containing the entries.
2001 Creates an ImmutableMap from an iterable of entries. @param entries Iterable of map entries to create the map from.
2002 Converts an iterable to an array of a specified type. @param iterable Iterable to convert. @param type The type of elements in the array. @return Array containing elements from the iterable.
2003 Creates an ImmutableSortedSet from an iterable with a comparator. @param comparator Comparator for sorting elements. @param elements Iterable containing elements for the set.
2004 Searches a list for a key, transforming elements first. @param list List to search. @param keyFunction Transformation function. @param key Key to search for.
2005 Removes all values associated with the given key. @param key The key whose values are to be removed. @return An empty list.
2006 Transforms a navigable map's values using a function. @param fromMap Input navigable map. @param function Function to apply to each value. @return New navigable map with transformed values.
2007 Checks if value exists and removes row/column if found. @param rowKey Row key. @param columnKey Column key. @param value Value.
2008 Returns a synchronized view of the given ListMultimap. @param multimap The Multimap to be synchronized.
2009 Returns a synchronized view of the given multimap. @param multimap The SetMultimap to synchronize.
2010 Converts a Readable to a String. @param r Source Readable object @return String representation of the Readable's content
2011 Creates a CatchingFuture to handle exceptions and fallback. @param exceptionType Exception type; @param fallback Fallback function; @param executor Executor.
2012 Transforms the future using provided function and executor. @param function Function to apply to the future's value. @param executor Executor for the transformation.
2013 Creates a directed GraphBuilder instance.
2014 Creates a GraphBuilder for undirected graphs.
2015 Creates a GraphBuilder from an existing graph. @param graph The graph to build from. @return A GraphBuilder configured with graph properties.
2016 Creates a NetworkBuilder for a directed network. Returns a new NetworkBuilder instance.
2017 Creates a NetworkBuilder for undirected networks. Returns a new NetworkBuilder instance.
2018 Creates a NetworkBuilder from an existing Network. @param network The network to build from. @return A NetworkBuilder configured with the network's properties.
2019 Creates a directed ValueGraphBuilder.
2020 Creates a ValueGraphBuilder with undirected edges.
2021 Creates a ValueGraphBuilder from an existing graph. @param graph The graph to base the builder on. @return A ValueGraphBuilder configured from the graph.
2022 Adds a listener to the internal service state. @param listener Listener for state changes. @param executor Executor for listener events.
2023 Creates and returns a new, empty CompactLinkedHashSet.
2024 Creates a CompactHashSet from a collection. @param collection The collection to create the set from. @return A new CompactHashSet containing elements from collection.
2025 Creates a new CompactLinkedHashSet with the given initial capacity. @param expectedSize Initial capacity of the set.
2026 Creates a SortedSetMultimap from a map and a factory. @param map The map to use for initialization. @param factory Factory for sorted sets.
2027 Creates an ImmutableMultiset collector, counting each element once.
2028 Creates a collector that accumulates elements into an immutable multiset. @param elementFunction Function to extract element. @param countFunction Function to determine element count.
2029 Returns a new Builder for creating an ImmutableMultiset.
2030 Joins an array of objects into a string. @param parts Array of objects to join. @return Joined string.
2031 Joins the elements of this iterable using the provided Joiner. @param joiner Joiner object to use for joining elements. @return String containing joined elements.
2032 Normalizes a pathname by resolving ".." and "." components. @param pathname The pathname string to normalize. @return Normalized pathname string.
2033 Parses encoded trie data, extracting and adding suffix types. @param stack Deque for character sequences. @param encoded Encoded trie data. @param start Starting index in encoded data. @param builder Builder for immutable map of suffix types.
2034 Creates a ConcurrentMap, using either ConcurrentHashMap or MapMaker. @return ConcurrentMap instance.
2035 Applies a function that returns an iterable, then flattens. @param function Transforms elements to Iterable<T> @return A FluentIterable with flattened elements.
2036 Wraps multiple iterables into a single FluentIterable. @param inputs Iterable(s) to wrap in a FluentIterable.
2037 Gets the result within the given timeout. @param timeout Timeout duration. @param unit Time unit of the timeout. @return Result or throws exception if timeout.
2038 Returns GraphConnections for the given node. Uses m1 to create connections and checks for null.
2039 Attempts to acquire the lock with a timeout. @param guard Guard object. @param time Timeout duration.
2040 Masks uppercase chars in a string based on format. @param format CaseFormat enum for desired format. @param s Input string to process.
2041 Converts a string to the specified case format, word-separated. @param format CaseFormat enum for desired format. @param s Input string to format.
2042 Converts a string to a specified case format, masking uppercase. @param format CaseFormat enum for desired format. @param s Input string to format.
2043 Converts a string to the specified case format. @param format CaseFormat enum for desired format. @param str Input string to format.
2044 Checks if the sequence contains no matching characters. @param sequence CharSequence to check @return True if no match found, false otherwise.
2045 Masks characters in a sequence starting from the first match. @param sequence CharSequence to mask @return Masked string
2046 Masks characters in a sequence based on a predicate. @param sequence CharSequence to mask. @param replacement Character to replace matching characters with.
2047 Extracts IPv4 address from Inet6Address or throws exception. @param ip The Inet6Address to extract from. @return IPv4 address or null if not found.
2048 Reads bytes from the stream and updates the hasher. @param bytes buffer to read into @param off start offset in the buffer @param len number of bytes to read @return Number of bytes read, or -1 if EOF.
2049 Delegates to overloaded method with offset and length. @param in input stream @param b byte array @throws IOException if I/O error occurs
2050 Rotates a boolean array by a specified distance. @param array array to rotate @param distance rotation distance
2051 Rotates a byte array by a specified distance. @param array byte array to rotate @param distance rotation distance
2052 Sorts the byte array in descending order. @param array The byte array to sort.
2053 Sorts the char array in descending order. @param array char array to be sorted.
2054 Rotates a char array by a specified distance. @param array char array to rotate @param distance rotation distance
2055 Sorts the array in descending order. @param array The array to be sorted.
2056 Rotates the entire array by the given distance. @param array array to rotate @param distance rotation distance
2057 Sorts the entire float array in descending order. @param array The float array to be sorted.
2058 Rotates the entire array by the specified distance. @param array the array to rotate @param distance rotation distance
2059 Sorts an integer array in descending order. @param array The array to be sorted.
2060 Rotates an integer array by a specified distance. @param array array to rotate, distance to shift elements
2061 Sorts a long array in descending order. @param array The long array to be sorted.
2062 Rotates a long array by a specified distance. @param array array to rotate, @param distance distance to rotate
2063 Sorts the short array in descending order. @param array short array to be sorted
2064 Rotates a short array by a specified distance. @param array array to rotate @param distance rotation distance
2065 Creates a MapSplitter using the given separator. @param separator Separator character for key-value pairs. @return New MapSplitter instance.
2066 Creates a RateLimiter with specified permits/second & warmup. @param permitsPerSecond Permits issued per second. @param warmupPeriod Warmup period duration. @param unit Time unit for the warmup period.
2067 Wraps a sorted multiset in an unmodifiable view. @param sortedMultiset The multiset to wrap. @return An unmodifiable view of the sorted multiset.
2068 Returns an unmodifiable NavigableSet. @param set The set to wrap; must not be null.
2069 Returns an unmodifiable collection of map entries. If input is a Set, returns an unmodifiable view.
2070 Returns an unmodifiable view of the given sorted set multimap. @param delegate The sorted set multimap to wrap. @return An unmodifiable SortedSetMultimap.
2071 Creates a ClosingFuture wrapping a ListenableFuture and handles closing. @param future Future to wrap; @param closingExecutor Executor for closing.
2072 Attaches a callback to the future, running it on the executor. @param callback Callback to execute on completion. @param executor Executor to run the callback on.
2073 Creates a new EnumBiMap with specified enum key and value types. @param keyType Key enum type. @param valueType Value enum type.
2074 Creates a new EnumHashBiMap with the given enum key type. @param keyType The class of the enum keys.
2075 Creates a new TreeMultiset and adds elements from the iterable. @param elements Iterable of elements to add to the multiset. @return A new TreeMultiset containing the added elements.
2076 Creates a Builder with a custom comparator for element ordering. @param comparator Comparator to define the sorted order.
2077 Adds values to the collection associated with the given key. @param key the key to associate with the values @param values values to add; returns collection view
2078 Adds values to the set associated with the given key. @param key The key to associate values with. @param values Values to add to the set for the key.
2079 Creates a HashMultiset from an iterable, populating it with elements. @param elements Iterable of elements to add to the multiset.
2080 Creates an `ArrayListMultimap` with specified key/value capacities. @param expectedKeys expected number of keys @param expectedValuesPerKey expected values per key
2081 Creates a HashMultimap with expected keys and values. @param expectedKeys expected number of keys @param expectedValuesPerKey expected values per key
2082 Creates a HashMultimap from another Multimap. @param multimap the Multimap to copy from
2083 Creates a LinkedListMultimap with the specified expected number of keys. @param expectedKeys the expected number of keys to store
2084 Creates a LinkedHashMultiset from an iterable. @param elements Iterable of elements to add to the multiset. @return A LinkedHashMultiset containing the elements.
2085 Creates a new LinkedHashMultimap with default capacities.
2086 Creates a LinkedHashMultimap with specified key/value capacities. @param expectedKeys Expected number of keys. @param expectedValuesPerKey Expected values per key.
2087 Constructs a StandardMutableNetwork using the provided builder. @param builder NetworkBuilder to initialize with.
2088 Constructs a StandardMutableValueGraph from a builder. @param builder Graph builder object for initialization.
2089 Adds a cell to the builder, handling immutable cells specially. @param cell The cell to add. @return A reference to this builder.
2090 Adds an entry to the builder and returns a reference. @param entry The entry to add. @return A reference to this builder.
2091 Adds entries from an iterable to the builder. @param entries Iterable of entries to add. @return A reference to this builder.
2092 Adds an entry to the builder. @param entry The entry to add. @return A reference to this builder.
2093 Returns a {@link ImmutableSetMultimap}, or a new one if m1() is true.
2094 Builds and returns an ImmutableSortedMap. Returns empty map if size is 0.
2095 Adds all entries from a RangeMap to the builder. @param rangeMap The RangeMap to add entries from. @return A reference to this builder.
2096 Adds multiple ranges to the builder. @param ranges Iteration of ranges to add. @return The builder itself for chaining.
2097 Returns a view of ranges within a given range. @param range the range to filter ranges within
2098 Creates a ContiguousSet based on a range and domain. @param range The range of elements in the set. @param domain The discrete domain for the set.
2099 Adjusts the range if an entry intersects and contains the value. @param range The range to potentially adjust. @param value The value to check for containment. @param entry Entry to check for intersection and containment.
2100 Creates an ImmutableSortedSet from a DiscreteDomain. @param domain The domain for the set's bounds.
2101 Creates an ImmutableMap from a Map, or returns an empty map. @param map The Map to convert; must have Enum keys.
2102 Returns an immutable map representing the table's data structure.
2103 Returns an unmodifiable iterator for the elements.
2104 Creates an immutable list from the current contents. @return ImmutableList representation of the contents.
2105 Creates an ImmutableList from an array of elements. @param elements array of elements to create the list from @return ImmutableList containing the elements
2106 Creates an ImmutableSortedSet. Returns empty set if n==0.
2107 Creates an immutable map from an array of entries. @param n size of the entry array @param entryArray array of map entries @param throwIfDuplicateKeys if true, throws exception on duplicate keys
2108 Finds the index of a matching suffix type or excluded pattern. @param desiredType The desired PublicSuffixType to match.
2109 Creates an ImmutableSet from an Iterable of Enums. Handles ImmutableEnumSet, Collection, and Iterable input.
2110 Returns an unmodifiable iterator for masked nodes.
2111 Dispatches event to subscribers or marks as DeadEvent. @param event The event to be dispatched.
2112 Determines if a move is possible and creates a MoveDesc. @param removeIndex Index of removed element. @param vacated Vacated index. @param toTrickle Element to trickle down. @return MoveDesc if move is possible, null otherwise.
2113 Returns the row key comparator. Deprecated, use requireNonNull.
2114 Creates a synchronized NavigableSet from the given set. @param navigableSet The set to synchronize. @return A synchronized NavigableSet.
2115 Creates a Bloom filter with specified funnel, insertions, and fpp. @param funnel Funnel for hashing elements @param expectedInsertions Expected number of insertions @param fpp False positive probability @return BloomFilter instance
2116 Creates a Bloom filter with specified funnel and expected insertions. @param funnel Funnel for hashing elements @param expectedInsertions Expected number of insertions
2117 Calculates the mask for bit access, based on bit count. Uses bitCount and bitSize to determine the mask value.
2118 Creates a Collector to find the top K elements using a comparator. @param k The number of top elements to collect. @param comparator Comparator to sort the elements.
2119 Selects the top K elements from an iterator. @param iterator Iterator of elements to select from. @param k Number of top elements to retrieve. @return List containing the top K elements.
2120 Adds elements from iterable to buffer, maintaining top K. @param elements Iterable providing elements to add.
2121 Converts the unsigned long value to its string representation. @return String representation of the unsigned long value.
2122 Validates lock acquisition order if lock is not valid. @param lock CycleDetectingLock to validate.
2123 Creates a ClosingFuture from a function and executor. @param function Function to apply to the future's result. @param executor Executor for the function. @return A ClosingFuture that executes the function.
2124 Creates a ClosingFuture from a function and executor. @param function Function to execute asynchronously. @param executor Executor for asynchronous execution. @return A ClosingFuture wrapping the result.
2125 Gets the result from a Future, throwing a specified exception. @param future Future to retrieve the result from. @param exceptionClass Exception to throw on failure.
2126 Gets Future's result, throws exception if timeout or error. @param future Future to retrieve result from. @param exceptionClass Exception class to throw. @param timeout Timeout duration. @return Future's result.
2127 Creates a Cancellable Future, handling failures and rescheduling. Returns a Cancellable Future.
2128 Notifies that the service is running, updates state, and handles shutdown.
2129 Starts all services, logging warnings for failures. Iterates through services and attempts to start them.
2130 Waits on a guard condition for a specified duration. @param guard The guard to wait on. @param time The duration to wait.
2131 Waits on a condition with timeout. @param guard Guard to wait on. @param time Timeout duration.
2132 Waits on a condition with a timeout. @param guard The guard to wait on. @param time Timeout duration. @return True if successful, false if timeout.
2133 Waits on a guard with a duration, using nanoseconds. @param guard The guard to wait on. @param time The duration to wait.
2134 Wraps future with timeout, using nanoseconds from Duration. @param timeout Duration for the timeout. @param scheduledExecutor Executor for timeout scheduling.
2135 Copies byte array from input to output file. @param from Byte array to copy. @param to File to write the byte array to.
2136 Computes a hash code using the provided hash function. @param hashFunction Hash function to use for computation. @return HashCode object representing the computed hash.
2137 Copies file content to an output stream. @param from The source file to copy. @param to The destination output stream.
2138 Copies data from a URL to an output stream. @param from The URL to copy from. @param to The OutputStream to copy to.
2139 Copies a file from the source to the destination. @param from Source file to copy. @param to Destination file.
2140 Reads all bytes from a file. @param file The file to read. @return Byte array containing file content.
2141 Reads resource content from URL as a byte array. @param url The URL of the resource. @return Byte array representing the resource content.
2142 Reads file content using a processor. @param file The file to read. @param processor Processor for handling byte data. @param <T> The type of the processed result. @return Processed result of type T. @throws IOException if an I/O error occurs
2143 Checks if two files have the same content. @param file1 The first file. @param file2 The second file. @throws IOException if an I/O error occurs.
2144 Checks if two files have the same content. @param path1 The first file path. @param path2 The second file path. @throws IOException if an I/O error occurs.
2145 Writes a CharSequence to a file using a specified charset. @param from The CharSequence to write. @param to The file to write to. @param charset The character set to use.
2146 Writes a CharSequence to a file, appending to it using a charset. @param from CharSequence to write. @param to File to append to. @param charset Charset for encoding.
2147 Copies a file's contents as characters to an Appendable. @param from The source file. @param charset Character encoding. @param to Destination Appendable.
2148 Reads the first line from a file using the specified charset. @param file The file to read from. @param charset Character encoding to use. @return The first line as a String, or null if empty.
2149 Reads file lines into a list, using specified charset. @param file The file to read. @param charset Character encoding. @return List of strings, each representing a line. @throws IOException If an I/O error occurs.
2150 Reads a file, processes lines with a callback, and returns a result. @param file File to read. @param charset Character encoding. @param callback Processes each line. @return Processed result.
2151 Processes a URL's content line by line using a LineProcessor. @param url URL to process. @param charset Charset for encoding. @param callback Processes each line. @return Processed result.
2152 Maps a file into memory. @param file The file to map. @param mode MapMode for read/write access. @return MappedByteBuffer object.
2153 Maps a file into memory. @param file The file to map. @param mode MapMode for read/write access. @param size Size of the mapped region, or -1 for entire file.
2154 Delegates executor shutdown to Application. @param service ExecutorService to shutdown @param terminationTimeout Termination timeout @param timeUnit Time unit for timeout
2155 Filters a multimap by values using a predicate. @param unfiltered The base multimap to filter. @param valuePredicate Predicate to apply to map values.
2156 Creates a CompoundOrdering from an iterable of comparators. @param comparators Iterable of comparators for ordering.
2157 Creates an ImmutableBiMap from a map or its entry set. @param map The map to create the ImmutableBiMap from.
2158 Converts the iterable to an array of the specified type. @param type The type of elements in the array. @return Array of type E containing elements from the iterable.
2159 Converts an iterator to an array of a specified type. @param iterator Iterator to convert. @param type The type of elements in the array.
2160 Creates an ImmutableSortedSet from iterable, using given comparator. @param comparator Comparator for sorting elements in the set.
2161 Creates an ImmutableSortedSet from an iterable using natural order. @param elements Iterable containing elements for the set. @return ImmutableSortedSet with elements sorted naturally.
2162 Creates an ImmutableSortedSet from a collection with a comparator. @param comparator Comparator for sorting elements. @param elements Collection to create the set from.
2163 Returns an unmodifiable view of the sorted row map.
2164 Returns the string representation of this media type. Caches the result for subsequent calls.
2165 Wraps a SortedSetMultimap in a synchronized view. @param multimap The SortedSetMultimap to synchronize.
2166 Reads a Reader and converts it to a String, handling Closeables.
2167 Creates a new CompactLinkedHashMap with the given expected size. @param expectedSize Initial capacity of the map.
2168 Creates a CompactLinkedHashSet from a collection. @param collection Collection to initialize the set from. @return A new CompactLinkedHashSet containing elements from collection.
2169 Creates a TreeMultimap with natural ordering for both keys and values.
2170 Creates a TreeMultimap with custom key/value comparators. @param keyComparator Comparator for keys. @param valueComparator Comparator for values.
2171 Checks if the sequence contains all characters. @param sequence CharSequence to check @return True if all characters match, false otherwise.
2172 Masks characters in a sequence starting from the first match. @param sequence CharSequence to mask @return Masked string
2173 Replaces all matching characters in a sequence with a replacement. @param sequence CharSequence to modify. @param replacement Replacement string.
2174 Returns an Inet4Address, handling IPv6 and special cases. @param ip The InetAddress to convert.
2175 Creates a RateLimiter with specified permits/second & warmup. @param permitsPerSecond Permits issued per second. @param warmupPeriod Warmup period Duration.
2176 Returns a synchronized view of the entry set.
2177 Schedules a Runnable command with a specified delay. @param command The Runnable to execute. @param delay The delay before execution. @param unit The time unit of the delay.
2178 Creates a LoadingCache with a CacheLoader. @param loader CacheLoader to load values when not cached.
2179 Creates a LocalManualCache using the CacheBuilder's configuration. @return LocalManualCache instance with configured properties.
2180 Creates a new Builder with a custom comparator for ordering. @param comparator Comparator to define the sorted order.
2181 Returns a Builder using natural ordering.
2182 Returns a Builder using the natural ordering.
2183 Creates an EnumBiMap from a map. @param map The map to populate the bi-map from. @return A new EnumBiMap<K, V> populated with the map's entries.
2184 Creates an EnumHashBiMap from a Map. @param map The map to initialize the bi-map from. @return An EnumHashBiMap populated with entries from the map.
2185 Replaces values for a key with the provided iterable. @param key The key for which to replace values. @param values Iterable of values to replace with. @return The sorted set of values for the given key.
2186 Checks if two lists contain the same elements with same counts. @param first First list to compare. @param second Second list to compare.
2187 Creates a new, empty {@code ArrayListMultimap} with default capacities.
2188 Creates an `ArrayListMultimap` from the given multimap. @param multimap the multimap to copy from @return a new `ArrayListMultimap`
2189 Creates and returns an empty HashMultimap instance.
2190 Creates a new, empty LinkedListMultimap instance.
2191 Creates a LinkedListMultimap from another multimap. @param multimap The multimap to copy from.
2192 Converts a multimap to a LinkedHashMultimap. @param multimap The input multimap to convert. @return A LinkedHashMultimap containing the multimap's entries.
2193 Creates a mutable network from the configured builder.
2194 Initializes the graph using a builder. @param builder Graph builder object for initialization.
2195 Creates a mutable value graph from the builder. Uses the builder's configuration to initialize the graph.
2196 Copies cells from a table into the builder. @param table Source table to copy cells from. @return A reference to this builder.
2197 Adds entries from an iterable to the builder. @param entries Iterable of entries to add. @return A reference to this builder.
2198 Adds all entries from a map to the builder. @param map The map whose entries should be added. @return A reference to this builder.
2199 Adds entries from an iterable to the builder. @param entries Iterable of entries to add. @return A reference to this builder.
2200 Creates a filtered map using the unfiltered map and predicates. @param map The unfiltered map. @param entryPredicate Predicate for filtering map entries.
2201 Adds ranges from a RangeSet to the builder. @param ranges RangeSet to add ranges from. @return The builder itself for chaining.
2202 Returns a view of ranges within the given range. @param range the range to filter ranges within
2203 Creates a ContiguousSet of Integers within the specified range. @param lower The lower bound (inclusive) of the range. @param upper The upper bound (exclusive) of the range.
2204 Creates a ContiguousSet of Longs within the specified range. @param lower The lower bound (inclusive) of the range. @param upper The upper bound (exclusive) of the range.
2205 Creates a ContiguousSet of integers within the specified range. @param lower The lower bound (inclusive) of the range. @param upper The upper bound (exclusive) of the range.
2206 Creates a ContiguousSet of longs within the specified range. @param lower The lower bound (inclusive) of the range. @param upper The upper bound (exclusive) of the range.
2207 Adjusts the range based on intersecting entries. @param range The range to adjust. @param value The value to check for intersection.
2208 Creates network connections for a node. @param node The node to create connections for. @return NetworkConnections object.
2209 Creates an ImmutableMap from a map or its entry set. @param map The map to create the ImmutableMap from.
2210 Returns the row's values as an immutable map. @param rowKey The key identifying the row.
2211 Returns a single element from the set up to `e`, or null. @param e The element to truncate the set up to.
2212 Returns a sub-set containing elements up to `e` (exclusive). @param e The element to which the set is truncated.
2213 Creates an ImmutableList from an iterator. @param elements Iterator providing elements for the list.
2214 Builds an ImmutableRangeMap from the collected entries. Checks for overlapping ranges and creates the map.
2215 Merges overlapping ranges into a non-overlapping set. Returns an ImmutableRangeSet containing merged ranges.
2216 Parses classpath entries and returns a list of URLs. Handles SecurityException and MalformedURLException.
2217 Creates an immutable list of Parameter objects from method parameters.
2218 Creates an immutable list of exception type tokens. Iterates through types and creates a list of their tokens.
2219 Wraps a collection of Callable tasks into an ImmutableList. @param tasks Collection of Callable tasks to wrap. @return ImmutableList containing the wrapped Callable tasks.
2220 Creates an ImmutableList from an iterable of comparable elements. @param elements Iterable of comparable elements to create list from.
2221 Creates an ImmutableList from an iterable, sorted by comparator. @param comparator comparator to sort elements @param elements iterable of elements to include
2222 Creates an ImmutableSortedSet from an iterator, using the given comparator. @param comparator Comparator for ordering elements. @param elements Iterator of elements to add.
2223 Creates an immutable map from entries, handling overflow. @param n initial size, array length @param entryArray array of entries @param throwIfDuplicateKeys throws on duplicate keys
2224 Gets the index of the public suffix. Caches the result.
2225 Gets the index of the registry suffix. Caches the result. @return Index of the registry suffix.
2226 Creates an ImmutableSortedMap from an iterable of entries. @param comparator Comparator for keys @param entries Iterable of map entries @return ImmutableSortedMap containing the entries
2227 Creates a new TreeBasedTable with the same row/column order. @param table The original table to copy from. @return A new TreeBasedTable with copied structure.
2228 Creates a Bloom filter with specified funnel and expected insertions. @param funnel Funnel for hashing elements @param expectedInsertions Expected number of insertions
2229 Creates a Collector to find the top K elements using a comparator. @param k The number of top elements to collect. @param comparator Comparator for sorting the elements.
2230 Selects the top K elements from an iterable. @param iterable Iterable of elements to select from. @param k Number of top elements to retrieve.
2231 Selects the top K elements from an iterator. @param iterator Iterator of elements @param k Number of top elements to retrieve @return List containing the top K elements
2232 Creates a ClosingFuture that executes fallback on failure. @param exceptionType Exception type for future failure. @param fallback Fallback function. @param executor Executor for asynchronous execution.
2233 Updates the internal state using the state's m1 method.
2234 Waits for services to stop, throwing TimeoutException on failure. @param timeout Timeout duration. @param unit Time unit for the timeout.
2235 Returns a CharMatcher wrapping this CharMatcher. @return A CharMatcher.
2236 Computes a hash code for a file using the given hash function. @param file The file to hash. @param hashFunction Hash function for computation. @return HashCode object representing the file's hash.
2237 Copies a file from the source to the destination. @param from Source file to copy. @param to Destination file.
2238 Reads a URL's content into a list of strings, line by line. @param url URL to read. @param charset Charset encoding. @return List of strings, each representing a line.
2239 Maps a file into memory for read-only access. @param file The file to map. @return MappedByteBuffer object.
2240 Configures an ExecutorService with a delayed shutdown hook. @param executor ThreadPoolExecutor to configure @param terminationTimeout Termination timeout @param timeUnit Time unit for the timeout @return ExecutorService with shutdown hook
2241 Configures a ScheduledExecutorService with shutdown hooks. @param executor Executor to configure @param terminationTimeout Termination timeout @param timeUnit Time unit for the timeout
2242 Schedules a delayed shutdown hook for the given executor. @param service ExecutorService to shutdown @param terminationTimeout Duration until shutdown
2243 Removes an entry from the segment and updates related structures. @param entry Entry to remove. @param hash Hash code of the entry. @return True if entry was removed, false otherwise.
2244 Removes a value by reference, updating the segment's state. @param key Key of the entry. @param valueReference Reference to the value to remove.
2245 Updates the internal state using the state's m1 method.
2246 Waits for services to become healthy, throwing TimeoutException. @param timeout Timeout duration. @param unit Time unit for the timeout.
2247 Returns a map of service to startup time.
2248 Retrieves annotations of a specific type from the parameter annotations. @param annotationType The class of the annotation to retrieve. @return Array of annotations of the specified type.
2249 Creates an ImmutableSortedSet from a collection using natural order. @param elements Collection to create the set from.
2250 Creates a synchronized NavigableMap from the input map. @param navigableMap The map to synchronize.
2251 Reads a file as a String using the specified charset. @param file The file to read. @param charset The charset to use for decoding.
2252 Reads resource content as a String using the given charset. @param url Resource URL. @param charset Character encoding.
2253 Creates a new, empty CompactLinkedHashMap instance.
2254 Creates a TreeMultimap from a Multimap, using natural ordering. @param multimap Multimap to create TreeMultimap from. @return TreeMultimap instance.
2255 Creates a lock, either standard or cycle-detecting, based on policy. @param lockName Lock identifier. @param fair Whether the lock is fair. @return A ReentrantLock instance.
2256 Creates a read-write lock, either standard or cycle-detecting. @param lockName Lock identifier. @param fair Whether the lock is fair. @return A ReentrantReadWriteLock instance.
2257 Creates a map of enum keys to LockGraphNodes, enforcing lock order. @param clazz The enum class. @return A map of enum keys to LockGraphNodes.
2258 Validates a domain part, ensuring length, chars, and dash placement. @param part The domain part to validate. @param isFinalPart True if this is the final part of the domain.
2259 Returns an integer representation of the InetAddress. @param ip The InetAddress to convert to an integer.
2260 Checks if the delegate collection contains the object. @param object The object to search for. @return True if the collection contains the object.
2261 Checks if the collection contains an equal object. @param object The object to search for. @return True if found, false otherwise.
2262 Removes all elements from the delegate collection that are in the given collection. @param collection Collection of elements to remove. @return True if any elements were removed.
2263 Retains elements present in collection using iterator. @param collection Collection to retain elements from. @return True if any elements were retained.
2264 Clears the delegate collection using its iterator.
2265 Returns the inverse of the result of m1().m2().
2266 Creates an array backed by the collection. @return An array containing the collection's elements.
2267 Schedules a Runnable with a specified Duration delay. @param command The Runnable to execute. @param delay The Duration delay.
2268 Finds subscribers for a listener's methods, mapping event types to subscribers. @param listener Object containing methods to be registered as subscribers. @return Multimap of event types to Subscriber objects.
2269 Creates a subgraph from a network based on the given nodes. @param network The original network. @param nodes Nodes to include in the subgraph. @return A MutableNetwork representing the subgraph.
2270 Creates a mutable copy of the given network. @param network The network to copy. @return A mutable copy of the network.
2271 Creates a mutable graph from the current builder state. @return A MutableGraph instance based on the builder's configuration.
2272 Creates a subgraph containing specified nodes and their edges. @param graph The original graph. @param nodes Nodes to include in the subgraph. @return A MutableValueGraph representing the subgraph.
2273 Creates a mutable copy of a ValueGraph. @param graph The graph to copy. @return A MutableValueGraph containing the copied data.
2274 Adds entries from a map to the builder. @param map The map to add entries from. @return A reference to this builder.
2275 Adds all entries from a map to the builder. @param map The map whose entries should be added. @return A reference to this builder.
2276 Creates a filtered navigable map using a combined predicate. @param map The original filtered navigable map. @param entryPredicate Predicate for filtering entries. @return A new filtered navigable map.
2277 Filters a SortedMap based on a combined predicate. @param map The map to filter. @param entryPredicate Predicate for filtering entries. @return A new filtered SortedMap.
2278 Creates a filtered map based on the provided key predicate. @param unfiltered The unfiltered map. @param keyPredicate Predicate for filtering keys.
2279 Creates a filtered map from the given map using a predicate. @param unfiltered The map to filter. @param entryPredicate Predicate to filter entries. @return A new filtered map.
2280 Creates a collector for ImmutableSortedMap. @param comparator Comparator for keys. @param keyFunction Extracts key from input. @param valueFunction Extracts value from input.
2281 Creates an ImmutableMap collector using provided key/value functions. @param keyFunction Extracts the key from the input. @param valueFunction Extracts the value from the input.
2282 Creates an ImmutableMap collector using provided functions. @param keyFunction Extracts the key (Enum) from an element. @param valueFunction Extracts the value from an element. @param mergeFunction Merges values for duplicate keys.
2283 Creates a map of type variables to their corresponding types. @param contextType The context type for type variable resolution.
2284 Creates a ByteSource from an iterator of ByteSources. @param sources Iterator of ByteSources to combine.
2285 Creates a concatenated CharSource from an iterator. @param sources Iterator of CharSource instances to concatenate
2286 Creates an ImmutableRangeSet from an iterable of ranges. @param ranges Iteration of ranges to build the set from.
2287 Creates an ImmutableSortedMultiset from entries with a comparator. @param comparator Comparator for ordering elements. @param elements Iterable of elements to add.
2288 Creates an ImmutableSortedMultiset from a sorted multiset. @param sortedMultiset The sorted multiset to copy.
2289 Returns an ImmutableList representation of the collection. Returns a singleton or regular ImmutableList based on size.
2290 Creates a collector for immutable sorted sets using comparator. @param comparator Comparator for sorting elements in the set.
2291 Creates an ImmutableSortedSet from an iterator with natural order. @param elements Iterator of elements to add. @return ImmutableSortedSet containing the elements.
2292 Builds an ImmutableBiMap based on the configured entries and ordering.
2293 Creates a submap up to a specified key. @param toKey The upper bound key for the submap. @param inclusive Whether to include the upper bound key.
2294 Creates a submap starting from a key, inclusive or exclusive. @param fromKey The starting key for the submap. @param inclusive Whether to include the start key.
2295 Checks if the public suffix index is zero.
2296 Checks if a suffix was found. Returns true if a suffix was found, false otherwise.
2297 Checks if m1() is greater than zero.
2298 Checks if a value is equal to 1, using cached result.
2299 Checks if the registry suffix index is zero.
2300 Checks if the domain has a registry suffix. Uses cached result from m1(). @return True if a suffix is found, false otherwise.
2301 Checks if m1() is greater than 0.
2302 Checks if a condition is met based on the result of m1().
2303 Creates an ImmutableSortedMap from entries using a comparator. @param entries Iterable of map entries @param comparator Comparator for keys
2304 Creates an ImmutableSortedMap from a SortedMap. @param map The SortedMap to adapt. @return An ImmutableSortedMap containing the map's entries.
2305 Creates an immutable set view of the current set. Uses maxSize from m1(), adds transformed elements.
2306 Returns a set of class types for the raw type. Uses TypeCollector to gather types and converts to ImmutableSet.
2307 Removes and returns the last element, trickling it down. @param index Index of the removed element. @return MoveDesc object detailing changes, or null if empty.
2308 Calculates the integer square root of a BigInteger with rounding. @param x BigInteger to find square root of. @param mode Rounding mode to apply.
2309 Creates an ImmutableSet from an iterator. @param elements Iterator providing elements for the set.
2310 Recursively processes a directory, adding resources to builder. @param directory Directory to process. @param packagePrefix Package prefix for resource names.
2311 Extracts File objects from a JAR's Class-Path manifest entry. @param jarFile The JAR file. @param manifest The manifest.
2312 Returns the raw type represented by the TypeToken. Returns Class object of the raw type.
2313 Selects the top K elements from an iterable. @param iterable Iterable of elements. @param k Number of top elements to retrieve.
2314 Waits for services to stop, throwing TimeoutException if failed. @param timeout Duration to wait for services to stop.
2315 Delegates executor configuration to an Application instance. @param executor ThreadPoolExecutor to configure @return Configured ExecutorService
2316 Creates an ExecutorService with a delayed shutdown hook. @param executor ThreadPoolExecutor to configure @param terminationTimeout Duration for termination @return ExecutorService with shutdown hook
2317 Delegates to Application.m1 to configure a ScheduledExecutorService. @param executor Executor to configure
2318 Creates a ScheduledExecutorService with a termination timeout. @param executor Executor to configure @param terminationTimeout Duration until shutdown
2319 Evicts entries to maintain segment weight within limits. @param newest The newest entry in the segment.
2320 Waits for services to become healthy within a timeout. @param timeout The maximum time to wait. @throws TimeoutException if the timeout is exceeded.
2321 Returns a map of service to startup time (Duration).
2322 Retrieves annotations of a specific type from the parameter. @param annotationType Class of the annotation to retrieve. @return Array of annotations of the specified type.
2323 Creates a cycle-detecting lock with the given name. @param lockName Lock identifier. @return A ReentrantLock instance.
2324 Creates a cycle-detecting read-write lock with given name. @param lockName Lock identifier. @return A ReentrantReadWriteLock instance.
2325 Checks if all domain parts are valid. @param parts List of domain name parts to validate. @return True if all parts are valid, false otherwise.
2326 Registers listener methods as subscribers for event types. @param listener Object containing methods to be registered.
2327 Validates that the listener has subscribers for all event types. @param listener Object containing methods to be registered.
2328 Creates an ImmutableNetwork.Builder using the internal NetworkBuilder. @return ImmutableNetwork.Builder instance for network creation
2329 Creates a subgraph induced by the given nodes. @param graph The original graph. @param nodes Nodes to include in the subgraph. @return A MutableGraph representing the induced subgraph.
2330 Creates a mutable copy of the graph, preserving nodes and edges. @param graph The graph to copy. @return A MutableGraph containing a copy of the input graph.
2331 Returns a new ImmutableValueGraph.Builder using the internal builder.
2332 Filters a BiMap based on a combined predicate. @param map The FilteredEntryBiMap to filter. @param entryPredicate Predicate for filtering entries. @return A new filtered BiMap.
2333 Creates a filtered navigable map based on the provided predicate. @param unfiltered The original map. @param entryPredicate Predicate for filtering entries.
2334 Filters a SortedMap based on a predicate. @param unfiltered The map to filter. @param entryPredicate Predicate for filtering entries.
2335 Filters a map based on a value predicate. @param unfiltered The map to filter. @param valuePredicate Predicate to apply to map values.
2336 Creates an ImmutableMap collector. @param keyFunction Extracts the key from an element. @param valueFunction Extracts the value from an element. @param mergeFunction Merges values for duplicate keys.
2337 Creates a Collector to build an ImmutableRangeMap. @param keyFunction Extracts the key from an element. @param valueFunction Extracts the value from an element.
2338 Creates an ImmutableSortedMultiset from elements using natural order. @param elements Iterable of elements to add. @return ImmutableSortedMultiset with natural ordering.
2339 Creates an ImmutableSortedMultiset from the contents. @return ImmutableSortedMultiset containing the elements.
2340 Creates a WildcardType with the given upper bound. @param upperBound The upper bound for the wildcard type.
2341 Creates a WildcardType with the given lower bound and Object as upper bound. @param lowerBound The lower bound for the wildcard type.
2342 Creates an ordered permutation collection from elements. @param elements Iterable elements to generate permutations. @param comparator Comparator for ordering the elements.
2343 Returns a sorted ImmutableList based on the provided comparator. @param comparator Comparator used for sorting the elements.
2344 Creates an ImmutableList from a collection. @param elements collection of elements to create the list from
2345 Builds and returns an ImmutableBiMap from the builder's entries.
2346 Creates an ImmutableMap, throwing on duplicate keys.
2347 Creates an ImmutableMap, not throwing on duplicate keys.
2348 Returns a sorted submap with keys up to (but not including) toKey. @param toKey The upper bound key for the submap.
2349 Creates a submap from fromKey to toKey, inclusive/exclusive. @param fromKey Start key, @param fromInclusive Include start key. @param toKey End key, @param toInclusive Include end key.
2350 Returns a sorted submap starting from the given key, inclusive. @param fromKey The starting key for the submap.
2351 Creates an ImmutableSortedMap from entries using natural order. @param entries Iterable of map entries
2352 Creates an ImmutableSortedMap from a map, sorted naturally. @param map The map to create the ImmutableSortedMap from.
2353 Creates an ImmutableSortedMap from a map, using provided comparator. @param map Map to create ImmutableSortedMap from. @param comparator Comparator for keys.
2354 Creates a CartesianSet from a list of sets. @param sets List of sets to form the Cartesian product. @return Set of lists representing combinations.
2355 Checks if the queue contains the target object. @param target The object to search for. @return True if found, otherwise false.
2356 Retrieves element at index, then removes it and trickles down. @param index index of the element to retrieve and remove @return Retrieved element from the queue.
2357 Creates an ImmutableSet from an iterable. @param elements Iterable providing elements for the set.
2358 Creates an Invokable for the given constructor. @param constructor Constructor to create an Invokable for @return An Invokable instance representing the constructor
2359 Checks if a type is a subtype of another type. @param supertype The supertype to check against.
2360 Creates an Invokable for the given method, ensuring it's declared by the TypeToken. @param method The method to create an Invokable for.
2361 Cleans up segment entries if condition is met. @param now Current timestamp for cleanup operations.
2362 Creates a WithExplicitOrdering instance for explicit lock ordering. @param enumClass Enum class for lock graph nodes. @param policy Locking policy to use.
2363 Delegates event posting to the subscribers list. @param object The event object to be posted.
2364 Delegates subscriber management to the subscribers map. @param object Object to be passed to the subscribers.
2365 Returns an ImmutableGraph.Builder using the current GraphBuilder.
2366 Filters a BiMap based on an entry predicate. @param unfiltered The BiMap to filter. @param entryPredicate Predicate for filtering entries. @return A new filtered BiMap.
2367 Filters a navigable map based on a key predicate. @param unfiltered The original navigable map. @param keyPredicate Predicate to filter map keys. @return Filtered navigable map.
2368 Filters a navigable map based on a value predicate. @param unfiltered The original map. @param valuePredicate Predicate to filter map values.
2369 Filters a SortedMap based on a key predicate. @param unfiltered The map to filter. @param keyPredicate Predicate to apply to the map keys.
2370 Filters a SortedMap based on a value predicate. @param unfiltered The map to filter. @param valuePredicate Predicate to apply to map values.
2371 Creates an ImmutableSortedMultiset from an iterator, using a comparator. @param comparator Defines the sorted order of the elements. @param elements Iterator providing elements for the multiset.
2372 Creates an immutable set of LocationInfo for a classloader. @param classloader The classloader to analyze. @return Immutable set of LocationInfo.
2373 Finds a suitable functional interface bound from an array of types. @param bounds Array of type bounds to check. @return Functional interface bound or null if not found.
2374 Handles array type conversion, supporting WildcardTypes. @param componentType The component type of the array.
2375 Generates ordered permutations of elements. @param elements Iterable elements to permute. @return Collection of ordered permutations.
2376 Creates an ImmutableMultiset from an iterable. @param elements Iterable of elements to add to multiset.
2377 Creates an ImmutableMultiset from elements in an iterator. @param elements Iterator of elements to include in the multiset.
2378 Creates an ImmutableMultiset from the given multiset. @param multiset The multiset to convert. @return An ImmutableMultiset containing the elements.
2379 Generates all permutations of a collection. @param elements The collection to generate permutations from. @return A collection of lists, each representing a permutation.
2380 Creates an ImmutableList from an iterable. @param elements Iterable to create the list from.
2381 Converts a RangeSet to an ImmutableRangeSet. @param rangeSet The RangeSet to convert.
2382 Creates an ImmutableSortedSet from a SortedSet, using its comparator. @param sortedSet The SortedSet to create the ImmutableSortedSet from.
2383 Reads lines from a source, stores them in a list, and returns an ImmutableList of strings.
2384 Creates an ImmutableClassToInstanceMap from a map builder. Returns an empty map if the builder's map is empty.
2385 Creates an ImmutableListMultimap from map entries, optionally sorted. @param mapEntries Collection of key-value entries. @param valueComparator Comparator for values, or null for natural order.
2386 Returns the built ImmutableMap.
2387 Creates an ImmutableSetMultimap from map entries and comparator. @param mapEntries Collection of key-value map entries. @param valueComparator Comparator for values, or null.
2388 Converts Properties to an ImmutableMap. @param properties Properties object to convert @return ImmutableMap with keys and values from properties
2389 Creates an immutable map with keys from the list and values as their index. @param list Collection of keys to be used in the map. @return ImmutableMap with keys from the list and values as indices.
2390 Builds an ImmutableTypeToInstanceMap from the internal map builder.
2391 Constructs a TypeTable from a map of type variable mappings. @param mappings Map of TypeVariableKey to Type. @return TypeTable instance.
2392 Creates an ImmutableMap from an iterator and a value function. @param keys Iterator of keys. @param valueFunction Function to generate values from keys.
2393 Creates a submap from fromKey to toKey, exclusive. @param fromKey Start key. @param toKey End key.
2394 Creates a collector that accumulates elements into an ImmutableSortedMap. @param comparator Comparator for keys. @param keyFunction Function to extract the key. @param valueFunction Function to extract the value.
2395 Returns null if m1() is true, otherwise calls m3 with m2().
2396 Returns the mask value based on queue size. Throws NoSuchElementException if empty.
2397 Returns a masked immutable set from the iterable. Uses the underlying iterable and applies a mask function.
2398 Checks if the type is a subtype of the canonical type. @param type The TypeToken to check. @return True if the type is a subtype.
2399 Checks if a type is a subtype of the canonical type. @param type The type to check.
2400 Checks if a type is a subtype of the canonical type. @param type The TypeToken to check. @return True if the type is a subtype, false otherwise.
2401 Drains reference queues based on key and value strength.
2402 Filters a BiMap based on a key predicate. @param unfiltered The BiMap to filter. @param keyPredicate Predicate to apply to the map keys. @return A new filtered BiMap.
2403 Filters a BiMap based on a value predicate. @param unfiltered The BiMap to filter. @param valuePredicate Predicate to filter map values.
2404 Creates an ImmutableSortedMultiset from an iterator. @param elements Iterator providing elements for the multiset.
2405 Creates a TypeToken for the given class, handling generics. @param cls The class to create a TypeToken for.
2406 Creates an ImmutableMultiset from the masked iterable.
2407 Builds an ImmutableMultiset from the provided contents. @return ImmutableMultiset containing the elements from contents.
2408 Creates a CartesianList from a list of lists. @param lists List of lists to form the Cartesian product.
2409 Parses cache specification string and configures CacheBuilderSpec. @param cacheBuilderSpecification Cache specification string.
2410 Creates an immutable list from the masked iterable. Uses the underlying iterable after applying a mask.
2411 Lists paths in a directory. @param dir The directory to list. @return ImmutableList of paths in the directory.
2412 Creates a new InternetDomainName from a string. Normalizes the domain name and validates its structure.
2413 Creates a ListenableFuture that aggregates results from futures. @param futures Iterable of ListenableFutures to aggregate @return ListenableFuture containing a list of results
2414 Creates a FutureCombiner from a list of futures. @param futures Iterable of ListenableFuture objects.
2415 Creates a FutureCombiner for combining futures. @param futures Iterable of ListenableFuture objects @return FutureCombiner instance
2416 Creates a ListenableFuture that aggregates results from futures. @param futures Iterable of ListenableFutures to aggregate.
2417 Converts an iterable of futures to a ListenableFuture array. @param futures Iterable of ListenableFutures @return ListenableFuture array
2418 Creates an ImmutableRangeSet from an iterable of ranges. @param ranges iterable of Range objects to add
2419 Creates an ImmutableRangeSet from a RangeSet. @param other The RangeSet to create the ImmutableRangeSet from.
2420 Creates an ImmutableRangeSet from a RangeSet. @param other The RangeSet to use as the base. @return An ImmutableRangeSet containing the ranges.
2421 Creates an ImmutableBiMap collector from elements. @param keyFunction Extracts the key from an element. @param valueFunction Extracts the value from an element.
2422 Returns an ImmutableClassToInstanceMap, or creates one from a map. @param map Map to convert or return if already an ImmutableClassToInstanceMap @return ImmutableClassToInstanceMap
2423 Creates an ImmutableListMultimap from a Multimap, or empty if possible. @param multimap The Multimap to adapt.
2424 Creates an ImmutableMultimap from the internal builder map. Uses key/value comparators for sorting if provided.
2425 Updates ranges with a new value, potentially remapping existing values. @param range The range to update. @param value The new value for the range. @param remappingFunction Function to remap existing values.
2426 Creates an ImmutableSetMultimap from the builder's entries. Uses keyComparator for sorting if provided.
2427 Creates an ImmutableMap from values and a key function. @param values Iterator of values; @param keyFunction transforms values to keys
2428 Returns combinations of the given size from the set. @param set input set @param size combination size
2429 Creates an ImmutableGraph from a given Graph. @param graph The graph to wrap in an immutable view. @return An ImmutableGraph.
2430 Creates a TypeResolver using the provided type mappings. @param mappings Map of TypeVariableKey to actual Type. @return New TypeResolver instance.
2431 Creates an ImmutableMap from an iterable of keys and a function. @param keys Iterable of keys to use for the map. @param valueFunction Function to generate values from keys.
2432 Retrieves the minimum element from the queue. Returns null if the queue is empty.
2433 Adds an element to the queue, maintaining min/max order. @param element The element to add. @return True if size <= maximumSize, else check element.
2434 Returns a masked immutable set of ClassInfo objects from resources.
2435 Returns a set of top-level ClassInfo resources. Filters resources and checks their top-level status.
2436 Traverses the graph starting from the provided nodes. @param startNodes Iterable of nodes to start traversal from.
2437 Creates an iterable from validated start nodes. @param startNodes Iterable of nodes to begin traversal.
2438 Creates an iterable from validated start nodes. @param startNodes Iterable of nodes to start from.
2439 Builds a set of ResourceInfo objects from a set of files. @param scannedFiles Files to scan for resource information. @return Immutable set of ResourceInfo objects.
2440 Creates a specialized Invokable with the given return type. @param returnType The expected return type of the Invokable.
2441 Executes a task, drains reference queues on success, cleans up finally.
2442 Resolves a Java Type to its resolved form. @param type The Type to resolve. @return Resolved Type or the original if unresolvable.
2443 Checks if a type is compatible, handling wildcard bounds. @param formalType Type to check. @param declaration TypeVariable to get declared types.
2444 Resolves a type, handling WildcardType and using helper methods. @param declaration TypeVariable for wildcard bounds. @param typeArg The type to resolve. @return Resolved type.
2445 Creates a CacheBuilder from a cache specification string. @param spec Cache specification string to configure the builder.
2446 Creates a CacheBuilderSpec with a maximum size of 0.
2447 Creates an InternetDomainName from a normalized domain string.
2448 Converts an iterable of futures to an immutable ListenableFuture list. @param futures Iterable of ListenableFutures @return ImmutableList of ListenableFutures
2449 Creates an ImmutableRangeSet from another RangeSet. @param other The RangeSet to create an ImmutableRangeSet from.
2450 Creates an ImmutableMultimap from a Multimap. @param multimap The Multimap to adapt; returns if immutable.
2451 Returns the ImmutableListMultimap built by the superclass.
2452 Creates an ImmutableMap collector. @param keyFunction Extracts the key from an element. @param valueFunction Extracts the value from an element.
2453 Creates an ImmutableSetMultimap from a single key-value pair. @param <K> the key type @param <V> the value type @param k1 the key @param v1 the value @return A new ImmutableSetMultimap containing the pair.
2454 Creates an ImmutableSetMultimap from two key-value pairs. @param <K> key type @param <V> value type @param k1 first key @param v1 first value @param k2 second key @param v2 second value @return ImmutableSetMultimap containing the provided pairs
2455 Creates an ImmutableSetMultimap from given key-value pairs. @param k1, v1, k2, v2, k3, v3 key-value pairs to add @return ImmutableSetMultimap containing the provided entries
2456 Creates an ImmutableSetMultimap from key-value pairs. @param <K> key type @param <V> value type @param k1,k2,k3,k4 keys @param v1,v2,v3,v4 values @return ImmutableSetMultimap containing the provided pairs
2457 Creates an ImmutableSetMultimap from key-value pairs. @param <K> key type @param <V> value type @param keys, values key-value pairs to add @return ImmutableSetMultimap containing the provided pairs
2458 Creates an ImmutableSetMultimap from an iterable of entries. @param entries Iterable of key-value entries.
2459 Creates an ImmutableSetMultimap from a multimap. @param multimap Multimap to create from.
2460 Creates an ImmutableMap from an Iterable and a key function. @param values Iterable of values; @param keyFunction transforms values to keys
2461 Creates an ArrayTable with the given row and column keys. @param rowKeys Iterable of row keys @param columnKeys Iterable of column keys @return An ArrayTable instance
2462 Creates a power set from the given set. @param set The input set to generate the power set from. @return A set containing all subsets of the input set.
2463 Creates a RegularImmutableTable, Dense or Sparse, based on data. @param cellList List of cells. @param rowSpace Set of row keys. @param columnSpace Set of column keys.
2464 Creates an ImmutableGraph from the mutable graph. @return ImmutableGraph representation of the mutable graph.
2465 Wraps a Network in an ImmutableNetwork. Returns the original if it's already ImmutableNetwork. @param network The network to wrap.
2466 Returns an ImmutableValueGraph, either the graph or a new one. @param graph The ValueGraph to convert. @return An ImmutableValueGraph.
2467 Creates a TypeResolver with types resolved based on context. @param contextType The context type for type variable resolution. @return New TypeResolver instance.
2468 Creates a TypeResolver with a context type and type mappings. @param contextType The context type for type variable resolution.
2469 Resolves a formal type to an actual type using mappings. @param formal The formal type to resolve. @param actual The actual type to resolve to.
2470 Converts an iterable to an ImmutableMap using a value function. @param valueFunction Function to generate values for the map. @return ImmutableMap containing elements from the iterable.
2471 Creates a MinMaxPriorityQueue initialized with elements from iterable. @param initialContents Iterable of elements to add to the queue.
2472 Adds an element to the queue. @param element The element to add. @return True.
2473 Filters ClassInfo resources by package name. @param packageName Package name to filter by. @return ImmutableSet of ClassInfo objects in the package.
2474 Returns ClassInfo resources for a given package. @param packageName Package name to filter resources by. @return Immutable set of ClassInfo resources.
2475 Starts a traversal from a single node. @param startNode The node to begin traversal from.
2476 Creates an iterable from a single start node. @param startNode The node to begin traversal from.
2477 Starts a depth-first traversal from a single start node. @param startNode The node to begin the traversal from.
2478 Scans resources from a set of files. @return Immutable set of ResourceInfo objects.
2479 Creates a ClassPath for the given classloader. @param classloader The classloader to analyze. @return A ClassPath object representing the resources.
2480 Creates an Invokable with the specified return type. @param returnType The expected return type of the Invokable.
2481 Retrieves value from entry, expires if needed. @param entry ReferenceEntry to retrieve value from. @param now Current timestamp for expiration checks.
2482 Cleans up segment data based on the provided timestamp. @param now Current timestamp for cleanup operations.
2483 Resolves a TypeVariable, returning resolved type or original. @param var The TypeVariable to resolve. @param forDependants TypeTable for resolving dependencies.
2484 Returns the generic type, or the class if no type parameters exist.
2485 Resolves the runtime type using TypeResolver and returns it.
2486 Creates a Traverser for file tree contents. Uses `fileTreeChildren` to iterate over directories.
2487 Parses a host specifier string. @param specifier Host specifier string to parse. @return HostSpecifier object, or throws IllegalArgumentException.
2488 Creates an InternetDomainName representing an ancestor domain. @param levels Number of ancestor levels to include.
2489 Creates a new InternetDomainName with the provided left parts. @param leftParts String representing the left domain parts.
2490 Checks if the given name is a valid InternetDomainName. @param name The domain name string to validate. @return True if valid, false otherwise.
2491 Creates a collector for ImmutableListMultimap. @param keyFunction Extracts key from input. @param valuesFunction Extracts stream of values.
2492 Creates an ImmutableListMultimap with a single key-value pair. @param k1 The key for the multimap. @param v1 The value associated with the key.
2493 Creates an ImmutableListMultimap from two key-value pairs.
2494 Creates an ImmutableListMultimap from key-value pairs. @param k1, v1, k2, v2, k3, v3 Key-value pairs to include. @return New ImmutableListMultimap containing the pairs.
2495 Creates an ImmutableListMultimap from key-value pairs. @param k1, v1, k2, v2, k3, v3, k4, v4 Key-value pairs. @return ImmutableListMultimap containing the pairs.
2496 Creates an ImmutableListMultimap from multiple key-value pairs.
2497 Creates an ImmutableListMultimap from an iterable of entries. @param entries Iterable of key-value pairs to populate the multimap.
2498 Creates an ImmutableListMultimap from an iterator and key function. @param values Iterator of values. @param keyFunction Function to extract key from value.
2499 Creates a MediaType with given attribute and values. @param attribute Attribute name. @param values Parameter values. @return New MediaType object.
2500 Creates a Collector for ImmutableSetMultimap. @param keyFunction Extracts the key from an element. @param valueFunction Extracts the value from an element.
2501 Returns the inverse multimap. Lazily initializes if null.
2502 Checks service transition state; throws exception if needed. Transitions services to ready state if not already transitioned.
2503 Returns the state-service mappings, excluding NoOpService instances.
2504 Creates an ImmutableMap from the iterable with given keys. @param keyFunction Function to extract keys from elements.
2505 Creates an ArrayTable from a given Table. @param table The Table to create ArrayTable from.
2506 Creates an immutable network from the mutable network.
2507 Creates an ImmutableValueGraph from the mutable graph. @return An ImmutableValueGraph representing the data.
2508 Initializes a TypeToken from a declaring class. @param declaringClass The class declaring the type.
2509 Creates a MinMaxPriorityQueue with elements from an iterable. @return A new MinMaxPriorityQueue.
2510 Creates a MinMaxPriorityQueue with elements from the iterable. @param initialContents Iterable of elements to add. @return MinMaxPriorityQueue initialized with elements.
2511 Returns the set of nodes reachable from a given node. @param graph The graph to traverse. @param node The starting node for traversal.
2512 Retrieves a ReferenceEntry by key. @param key The key to search for, null key returns null. @return ReferenceEntry or null if not found.
2513 Checks if a cache entry's value is live. @param entry Cache entry to check. @param now Current timestamp for expiration. @return True if the entry's value is live, false otherwise.
2514 Retrieves or creates a LoadingValueReference. @param key The key. @param hash The hash code. @param checkTime Whether to check the time. @return LoadingValueReference or null if not found.
2515 Performs cleanup if readCount doesn't exceed a threshold. Calls m2() for cleanup operations.
2516 Resolves a TypeVariable, returning resolved type or original. @param var The TypeVariable to resolve. @param forDependants TypeTable for resolving dependencies.
2517 Creates a ClosingFuture that combines results using Callable. @param combiningCallable Callable to combine inputs. @param executor Executor for asynchronous execution.
2518 Creates a ClosingFuture that combines async calls. @param combiningCallable Callable to combine results @param executor Executor for asynchronous execution @return ClosingFuture representing combined result
2519 Parses a host specifier string, throws ParseException on error. @param specifier Host specifier string to parse.
2520 Checks if a host specifier is valid. @param specifier Host specifier string to validate. @return True if valid, false otherwise.
2521 Returns ancestor domain, or null if no suffix found. @return InternetDomainName or null
2522 Returns the domain name one level above the public suffix.
2523 Returns ancestor domain, or null if no suffix exists. @return Ancestor domain or null.
2524 Returns the parent domain, decrementing the level by 1.
2525 Creates an ancestor domain, one level up.
2526 Creates a collector for ImmutableListMultimap. @param keyFunction Extracts the key from an element. @param valueFunction Extracts the value from an element.
2527 Creates an ImmutableMultimap with a single key-value pair. @param k1 The key for the multimap. @param v1 The value associated with the key.
2528 Creates an ImmutableMultimap from two key-value pairs. @param <K> Key type. @param <V> Value type. @param k1 First key. @param v1 First value. @param k2 Second key. @param v2 Second value. @return ImmutableMultimap containing the pairs.
2529 Creates an ImmutableMultimap from key-value pairs. @param k1, v1, k2, v2, k3, v3 Key-value pairs to include.
2530 Creates an ImmutableListMultimap from key-value pairs. @param k1, v1, k2, v2, k3, v3, k4, v4 Key-value pairs.
2531 Creates an ImmutableMultimap from key-value pairs. @param <K> key type @param <V> value type @param k1-v5 key-value pairs to include @return ImmutableMultimap containing the provided pairs
2532 Creates an ImmutableMultimap from an iterable of entries. @param entries Iterable of key-value pairs to populate.
2533 Returns the inverse of this multimap, or creates it if null.
2534 Creates an ImmutableListMultimap from iterable values & key function. @param values Iterable of values. @param keyFunction Function to extract key from value.
2535 Creates a MediaType with a single attribute-value pair. @param attribute Attribute name. @param value Attribute value. @return New MediaType object.
2536 Creates a MediaType with normalized type, subtype, and params. @param parameters Multimap of parameters.
2537 Creates a MediaType with given type and subtype. @param type The media type. @param subtype The media subtype.
2538 Parses a media type string and returns a MediaType object. @param input The media type string to parse.
2539 Constructs a ServiceManager with the provided services. @param services Iterable of services to manage.
2540 Creates a collector for ImmutableSetMultimap. @param keyFunction Extracts key from input. @param valuesFunction Extracts values stream from input.
2541 Creates a TypeToken from a Java Type, resolving it as needed. @param type The Java Type to create a TypeToken for.
2542 Creates a MinMaxPriorityQueue with natural ordering. @return A new MinMaxPriorityQueue using natural ordering.
2543 Retrieves a value from the cache, loading if necessary. @param key Cache key. @param hash Hash code. @param loader Loader for the value. @param checkTime Whether to check the time. @return Value or null if not found or loading failed.
2544 Loads a value for a key, handling exceptions and stats. @param key Key for the value. @return Loaded value or null if interrupted.
2545 Checks if next entry is valid, returns true if valid. @param entry The current cache entry.
2546 Checks if a value exists in the segment. @param value The value to search for. @return True if the value is found, false otherwise.
2547 Creates a Multimap from iterable values & key function. @param keyFunction Function to extract key from value.
2548 Creates a MediaType with the given charset. @param charset The character set to associate with the type. @return New MediaType object with the specified charset.
2549 Returns the MediaType, using parameters or creating a new one.
2550 Creates a MediaType with application type and given subtype. @param subtype The media subtype. @return MediaType object.
2551 Creates an audio media type with the given subtype. @param subtype The subtype of the audio media type.
2552 Creates a font media type with the given subtype. @param subtype The subtype of the font media type.
2553 Creates an image media type with the given subtype. @param subtype The subtype of the image media type.
2554 Creates a text-based MediaType with the given subtype. @param subtype The subtype of the text media type.
2555 Creates a video media type with the given subtype. @param subtype The subtype of the video media type.
2556 Creates an ImmutableTable based on the number of cells. Returns empty, singleton, or regular table accordingly.
2557 Resolves the supertype token for a given type. Returns null if no supertype is found.
2558 Returns a list of TypeToken<? super T> from runtime type bounds.
2559 Masks a superclass type, handling TypeVariables and Wildcards. @param superclass The class to mask as a supertype. @return Masked TypeToken<? super T>.
2560 Loads values for given keys using a CacheLoader. @param keys Set of keys to load. @param loader CacheLoader to use. @return Map containing loaded values.
2561 Checks if any subsequent entry is valid. Returns true if a valid entry is found.
2562 Returns the built ImmutableTable.
2563 Checks if a valid entry exists in the cache. Returns true if a valid entry is found, false otherwise.
2564 Masks a class as a supertype, handling generics and wildcards. @param subclass The class to mask as a supertype.
2565 Returns an ImmutableTable if the input is already one. Otherwise, recursively calls m2 on the table's backing table. @param table The table to check. @return An ImmutableTable or recursively obtained ImmutableTable.
2566 Creates a Collector to build an ImmutableTable. @param rowFunction Extracts row keys from input elements. @param columnFunction Extracts column keys. @param valueFunction Extracts values.
