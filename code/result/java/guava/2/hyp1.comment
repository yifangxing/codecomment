1 Sets a comparator for row ordering. @param rowComparator custom comparator for rows @return the Builder instance for method chaining
2 Sets the comparator for column ordering. @param columnComparator comparator to define column order @return Builder instance with updated column comparator
3 Merges multiple iterables into a single sorted iterable. @param iterables collection of iterables to merge @param comparator comparator for sorting elements @return unmodifiable merged and sorted iterable
4 Finds the index of the first element matching a predicate. @param iterator source iterator @param predicate condition to test elements against @return index of the first matching element or -1 if none found
5 Creates a builder for a SortedSetMultimap with specified comparator. @param comparator the comparator to use for ordering values @return a builder for SortedSetMultimap
6 Creates a SetMultimap builder for enum values. @param valueClass class of enum values @return SetMultimapBuilder configured with EnumSetSupplier
7 Returns a union of two sets. @param set1 first set @param set2 second set @return SetView containing elements from both sets
8 Computes the intersection of two sets. Ensures inputs are non-null and returns a SetView containing elements present in both sets. @param set1 first input set @param set2 second input set @return SetView with common elements or empty if no intersection
9 Computes the difference between two sets. @param set1 first set to compare @param set2 second set to compare @return SetView containing elements in set1 but not in set2
10 Computes symmetric difference of two sets. @param set1 first input set @param set2 second input set @return SetView containing elements in either set but not both
11 Searches for the first occurrence of a boolean array within another. @param array main boolean array to search in @param target sub-array to find within the main array @return starting index of target in array, or -1 if not found
12 Searches for a byte array within another. @param array the array to search within @param target the byte array to find @return starting index of target in array or -1 if not found
13 Finds the starting index of a target character array within another array. @param array the source character array to search within @param target the target character array to find @return the starting index of the first occurrence of target in array, or -1 if not found
14 Searches for the first occurrence of a target array within a source array. @param array source array to search in @param target sub-array to find @return index of the first element of the target in the array, or -1 if not found
15 Searches for the first occurrence of a target float array within another array. @param array the array to search within @param target the target array to find @return index of the first occurrence or -1 if not found
16 Searches for the first occurrence of a target array within an integer array. @param array the main array to search within @param target the sub-array to find in the main array @return starting index of the first match or -1 if not found
17 Searches for the first occurrence of a target array within a source array. @param array the source array to search in @param target the target array to find @return index of the first element of the target array if found, otherwise -1
18 Searches for the first occurrence of a target short array within another. @param array the array to search within @param target the sub-array to find @return index of the first element of the target in array, or -1 if not found
19 Creates a Guard that checks a condition. @param isSatisfied supplier for the condition to be checked @return new Guard object
20 Returns default value for specified primitive type. @param type Class object of the primitive type @return Default value of the type or null if not applicable
21 Sets the text to use for null elements. @param nullText replacement string for nulls @return a new Joiner instance with specified null handling
22 Initializes a new instance of ToStringHelper. @param className name of the class to represent
23 Filters non-empty optionals from an iterable. @param optionals iterable of optional values @return iterable of present values from the input optionals
24 Splits a character sequence into an iterable of strings. @param sequence the input character sequence to split @return Iterable<String> containing split parts
25 Ensures a string meets a minimum length by padding it if necessary. @param string the input string to check and pad @param minLength the desired minimum length of the string @param padChar the character used for padding @return the original or padded string
26 Ensures a string meets a minimum length by padding it with a specified character. @param string the input string to be padded @param minLength the desired minimum length of the string @param padChar the character used for padding @return the original or padded string
27 Propagates or handles a throwable based on its type. @param throwable the throwable to process @param declaredType the expected exception type @throws X if the throwable is of the declared type
28 Masks and rethrows the given throwable. @param throwable the throwable to process
29 Retrieves a list of all throwables in the causal chain. @param throwable initial throwable to start from @return unmodifiable list of throwables, including the root cause
30 Wraps a CacheLoader with an executor for asynchronous operations. @param loader original CacheLoader to be wrapped @param executor Executor to handle asynchronous tasks @return new CacheLoader with asynchronous loading capabilities
31 Wraps a removal listener with an executor for asynchronous execution. @param listener the original removal listener @param executor the executor to handle asynchronous tasks @return a new RemovalListener that executes asynchronously
32 Retrieves a map of values for the specified column key. @param columnKey unique identifier for the column @return Map of row keys to values or empty map if column not found
33 Retrieves a map of column keys to values for the specified row key. @param rowKey unique identifier for the row @return Map of column keys to nullable values, or empty map if row not found
34 Maps elements of a spliterator using a function. @param fromSpliterator source spliterator @param function mapping function @return new spliterator with mapped elements
35 Filters elements of a `Spliterator` using a predicate. @param fromSpliterator the source `Spliterator` @param predicate the filter condition @return a new `Spliterator` with filtered elements
36 Checks if a collection contains an object. @param collection the collection to search @param object the object to find, may be null @return true if object is contained, false otherwise
37 Checks if a collection contains an object. @param collection the collection to check @param object the object to search for, may be null @return true if the collection contains the object, false otherwise
38 Checks if elements in an iterable are sorted according to a comparator. @param iterable the collection of elements to check @param comparator the comparator defining the order @return true if elements are sorted, false otherwise
39 Checks if elements in the iterable are strictly ordered by the comparator. @param iterable collection of elements to check @param comparator logic for comparing elements @return true if all elements are in strict ascending order, false otherwise
40 Creates a comparator for Optional values based on a given comparator. @param valueComparator comparator for the underlying values @return comparator for Optional objects
41 Creates a comparator for Optional values using a provided value comparator. @param valueComparator comparator for the contained values @return comparator for Optional objects
42 Creates a head set from this contiguous set up to (but not including) the specified element. @param toElement upper bound of the range @param inclusive whether the upper bound is inclusive @return ContiguousSet containing elements less than or equal to 'toElement'
43 Creates a head set of elements less than or equal to specified element. @param fromElement the upper bound element @param inclusive true if the upper bound is included in the set @return ContiguousSet with elements less than or equal to fromElement
44 Adds an element to the queue. @param e the element to add @return true if the element was added, false otherwise
45 Deprecated method to ensure iterables are not null. @param iterable the iterable to check @return the original iterable if not null
46 Adds an element to the list. @param element the element to add @return this builder instance
47 Sets the comparator for keys. @param keyComparator comparator to define key order @return this builder instance for method chaining
48 Sets the comparator for values. @param valueComparator comparator to order values @return this builder instance
49 Adds an element to the multiset. @param element the element to add @return the current builder instance
50 Adds specified number of occurrences of an element. @param element the element to add @param occurrences the number of times to add the element @return this Builder instance for method chaining
51 Adds multiple copies of an element to the multiset. @param element the element to add @param count number of copies to add @return this Builder instance for method chaining
52 Creates a collector for ImmutableSortedMultiset. @param comparator for element ordering @param elementFunction extracts elements from input @param countFunction determines the count of each element @return Collector to build ImmutableSortedMultiset
53 Returns an immutable sorted set of elements less than or equal to a given element. @param toElement the upper bound element @param inclusive true if the upper bound is inclusive @return ImmutableSortedSet containing elements up to 'toElement'
54 Returns a subset of elements greater than or equal to `fromElement`. @param fromElement the lower bound element for the subset @param inclusive true if the lower bound is inclusive @return ImmutableSortedSet containing elements >= fromElement
55 Wraps an iterable to make it unmodifiable. @param iterable the original iterable collection @return an unmodifiable version of the iterable
56 Checks if the provided iterable is null and throws NullPointerException if true. @param iterable the iterable to check for nullity @return the original iterable if not null
57 Removes and returns the first element matching a predicate from an iterable. @param removeFrom iterable to remove elements from @param predicate condition to match for removal @return removed element or null if no match found
58 Wraps an iterable with additional functionality. @param iterable the original iterable to be wrapped @return a new FluentIterable with enhanced methods
59 Filters elements of an iterable based on a predicate. @param unfiltered the original iterable to filter @param retainIfTrue the predicate to determine which elements to retain @return a new Iterable containing only elements that satisfy the predicate
60 Transforms elements of an iterable using a function. @param fromIterable the source iterable @param function the transformation function @return new Iterable with transformed elements
61 Wraps an iterable to consume elements as they are iterated. @param iterable the source iterable to wrap @return a new iterable that consumes elements during iteration
62 Wraps an iterator to make it unmodifiable. @param iterator the original iterator @return an UnmodifiableIterator instance
63 Ensures the provided iterator is not null. @param iterator the iterator to check for nullity @return the original iterator if not null
64 Removes elements from an iterator that are present in a collection. @param removeFrom iterator to remove elements from @param elementsToRemove collection of elements to remove @return true if any elements were removed, false otherwise
65 Removes elements from an iterator that match a given predicate. @param removeFrom iterator to remove elements from @param predicate condition to determine which elements to remove @return true if any elements were removed, false otherwise
66 Removes elements from an iterator not present in a collection. @param removeFrom iterator to modify @param elementsToRetain collection of elements to retain @return true if any elements were removed, false otherwise
67 Adds elements from iterator to collection. @param addTo collection to add elements to @param iterator source of elements to add @return true if any element was added, false otherwise
68 Creates a masked iterator from an iterable. @param iterable the source iterable @return Iterator with modified hasNext and next behavior
69 Filters elements of an iterator based on a predicate. @param unfiltered the original iterator to filter @param retainIfTrue predicate to determine which elements to retain @return UnmodifiableIterator with filtered elements
70 Checks if all elements in the iterator satisfy the given predicate. @param iterator the iterator to process @param predicate the condition to test each element against @return true if all elements match the predicate, false otherwise
71 Finds the first element in the iterator that matches the predicate. @param iterator source of elements to search @param predicate condition to test each element against @return first matching element or throws NoSuchElementException if none found
72 Applies a transformation function to elements of an iterator. @param fromIterator the source iterator @param function the transformation function @return a new iterator with transformed elements
73 Wraps an iterator to prevent further modification. @param iterator the original iterator to wrap @return a new unmodifiable iterator
74 Masks elements in an iterator by skipping them. @param iterator the iterator to process
75 Wraps an Enumeration as an UnmodifiableIterator. @param enumeration the Enumeration to wrap @return an UnmodifiableIterator view of the Enumeration
76 Deprecated method to ensure non-null iterator. @param iterator the iterator to check for nullity @return the original iterator if not null
77 Creates an EnumMap with a specified enum type. @param type the Class object of the enum type @return EnumMap initialized with entries from m1
78 Creates a masked view of the given map entry. @param entry original map entry to mask @return new Entry object with same key-value pair
79 Transforms an entry using a given transformer. @param transformer function to transform the value @param entry original key-value pair @return new entry with transformed value
80 Creates a function to transform map entries. @param transformer the transformer to apply to each entry @return Function that transforms Entry<K, V1> to Entry<K, V2>
81 Retrieves value from map using a key, handling exceptions. @param map the map to retrieve from @param key the key to use for retrieval @return the value associated with the key or null if not found
82 Checks if a key exists in the map. Handles null keys and potential exceptions. @param map the map to check @param key the key to look for, can be null @return true if the key is present, false otherwise
83 Retrieves value from map by key with null checks. @param map the source map @param key the key to retrieve value for @return the value associated with the key or null if not found or on error
84 Applies an action to each key-value pair in the multimap. @param action BiConsumer to apply to each key-value pair
85 Creates a MultimapBuilderWithKeys using a specified comparator for ordering keys. @param comparator the comparator to define key order @return a configured MultimapBuilderWithKeys instance
86 Creates a MultimapBuilderWithKeys for enum keys. @param keyClass the Class object of the enum type @return a configured MultimapBuilderWithKeys instance
87 Checks if the provided ImmutableMultimap is null and throws NullPointerException if true. @param delegate the ImmutableMultimap to check for nullity @return the original ImmutableMultimap if not null
88 Creates a unmodifiable view of the given ImmutableSetMultimap. @param delegate original ImmutableSetMultimap to wrap @return SetMultimap with unmodifiable access
89 Wraps an immutable list multimap with a null check. @param delegate the ImmutableListMultimap to wrap @return a wrapped ListMultimap
90 Applies an action to each element in the multiset with its count. @param action consumer that accepts an element and its count
91 Applies a consumer action to each element in the multiset, repeating for each occurrence. @param action the consumer to apply to each element
92 Ensures the input multiset is not null. @param multiset the ImmutableMultiset to check for nullity @return the original multiset if not null
93 Returns a union of two multisets. @param multiset1 first input multiset @param multiset2 second input multiset @return Multiset containing all elements from both input multisets
94 Returns the intersection of two multisets. @param multiset1 first multiset @param multiset2 second multiset @return a new Multiset representing the intersection
95 Returns a multiset view representing the union of two multisets. @param multiset1 first input multiset @param multiset2 second input multiset @return Multiset containing elements from both input multisets with combined counts
96 Computes the difference between two multisets. @param multiset1 first multiset @param multiset2 second multiset @return Multiset containing elements in multiset1 but not in multiset2, with adjusted counts
97 Checks if the first multiset contains at least as many occurrences of each element as the second. @param superMultiset the multiset that should contain more or equal elements @param subMultiset the multiset to check against @return true if superMultiset contains all elements with equal or greater counts, false otherwise
98 Modifies a multiset to retain only specified occurrences of elements. @param multisetToModify the multiset to be modified @param occurrencesToRetain specifies how many times each element should be retained @return true if modifications were made, false otherwise
99 Removes occurrences from the first multiset based on the second. @param multisetToModify the multiset to modify @param occurrencesToRemove the multiset specifying occurrences to remove @return true if any elements were removed, false otherwise
100 Retains only the specified elements in the multiset. @param self the target multiset @param elementsToRetain collection of elements to retain @return true if the multiset was modified as a result of this operation
101 Ensures the provided Ordering is not null. @param ordering the Ordering to check @return the original Ordering if not null
102 Drains elements from a blocking queue into a collection with timeout. @param q the source blocking queue @param buffer the destination collection @param numElements max number of elements to drain @param timeout max wait time for elements @param unit time unit for timeout @return number of elements successfully drained
103 Drains elements from a blocking queue into a buffer. @param q source blocking queue @param buffer destination collection for drained elements @param numElements number of elements to drain @param timeout maximum time to wait for elements in nanoseconds @return number of elements successfully drained
104 Checks if a value is within the range. @param value the value to check @return true if value is within the range, false otherwise
105 Creates a TreeSet with a specified comparator. @param comparator the comparator to order elements @return a new TreeSet instance using the provided comparator
106 Combines two streams using a BiFunction. @param streamA first input stream @param streamB second input stream @param function combines elements from both streams @return combined stream of results
107 Applies a function with index to each element of the stream. @param stream input stream of elements @param function function to apply with index @return new stream with transformed elements
108 Converts an IntStream to a Stream using a mapping function with index. @param stream input IntStream @param function mapping function that takes an int and its index @return Stream of mapped results
109 Converts a LongStream to a Stream of objects using a mapping function with index. @param stream the input LongStream @param function the mapping function that takes a long value and its index @return a Stream of mapped objects
110 Converts a DoubleStream to a stream of objects using a function with index. @param stream the input DoubleStream @param function the mapping function that takes a double and an index @return a Stream of mapped objects
111 Applies a remapping function to values within the specified range. @param range the range of keys to apply the remapping function @param value the new value associated with the range @param remappingFunction the function to compute a new value from the existing value and the provided value
112 Creates a TreeTraverser using the specified child retrieval function. @param nodeToChildrenFunction function to get children of a node @return new TreeTraverser instance
113 Deprecated method for creating a FluentIterable from a tree root. @param root the root node of the tree @return a FluentIterable to traverse the tree
114 Creates a FluentIterable for tree traversal. @param root the root node of the tree @return a FluentIterable to traverse the tree
115 Returns a breadth-first iterable for the tree rooted at the given node. @param root the root node of the tree @return FluentIterable representing nodes in breadth-first order
116 Adds an escape mapping for a character. @param c the character to be escaped @param r the replacement string for the character @return this CharEscaperBuilder instance
117 Maps a character to its replacement string. @param c the character to be replaced @param replacement the replacement string for the character @return this Builder instance for method chaining
118 Masks Unicode characters in a sequence. @param seq the character sequence to process @param index current position in the sequence @param end end position of the sequence @return masked character value or throws exceptions if invalid
119 Constructs a DeadEvent with the given source and event. @param source the source of the event @param event the event object that could not be delivered
120 Handles exceptions by logging and processing. @param e the original throwable @param context provides additional context about the event
121 Invokes a method on the target object with the given event. Handles exceptions and errors during invocation. @param event the event to process
122 Initializes SubscriberExceptionContext with event details. @param eventBus the EventBus instance @param event the event being processed @param subscriber the subscriber object @param subscriberMethod the method handling the event
123 Checks if the provided graph is null and throws NullPointerException if true. @param graph the graph to check for nullity @return the original graph if not null
124 Checks if the network is null and throws an exception if it is. @param network the ImmutableNetwork to check for nullity @return the original network if not null
125 Checks if the provided graph is null and throws NullPointerException if it is. @param graph the graph to check for nullity @return the original graph if not null
126 Abstract method to process nodes in a graph traversal. @param horizon stack of iterators representing current traversal path @return next node or null if traversal is complete
127 Constructs a new HashingInputStream with a specified hash function and input stream. @param hashFunction the hashing algorithm to use @param in the underlying input stream to read from
128 Initializes a new AppendableWriter with a specified target. @param target the Appendable object to write to, cannot be null
129 Returns a ByteSink that encodes data to the given CharSink. @param encodedSink destination for encoded output @return ByteSink for writing encoded bytes
130 Converts a CharSource to a ByteSource using masking. @param encodedSource the source of encoded characters @return a ByteSource representing the masked bytes
131 Initializes a new CharSequenceReader with the given sequence. @param seq the character sequence to read from; must not be null
132 Copies characters from a Reader to a StringBuilder. @param from source Reader @param to destination StringBuilder @return number of characters copied @throws IOException if an I/O error occurs
133 Copies characters from a Reader to a Writer. @param from source Reader @param to destination Writer @return number of characters copied @throws IOException if an I/O error occurs
134 Reads and discards characters from a Reader. @param reader source of characters to read and discard @param n number of characters to skip @throws IOException if an I/O error occurs
135 Constructs a CountingInputStream that wraps another InputStream. @param in the InputStream to be wrapped
136 Constructs a CountingOutputStream wrapping an OutputStream. @param out the OutputStream to wrap and count bytes from
137 Creates a BufferedReader for reading from a file with specified charset. @param file the File to read from @param charset the Charset to use for decoding bytes to characters @return BufferedReader instance for reading the file @throws FileNotFoundException if the file does not exist or cannot be opened
138 Creates a BufferedWriter for writing to a file with specified charset. @param file the target file to write to @param charset the character set to use for encoding @return BufferedWriter instance for file writing @throws FileNotFoundException if the file cannot be opened for writing
139 Updates a file's last modified time. @param file the file whose modification time is to be updated @throws IOException if unable to update the modification time
140 Masks a file by ensuring its parent directory exists. @param file the file to be masked @throws IOException if unable to create parent directories
141 Masks the file extension from a full file path. @param fullName full path of the file @return file extension or empty string if none
142 Masks the file name by removing its extension. @param file path to the file @return file name without extension or original name if no extension exists
143 Constructs a new LittleEndianDataInputStream. @param in InputStream to read from, must not be null
144 Constructs a new LittleEndianDataOutputStream. @param out underlying output stream to write data to
145 Updates the last modified time of a file or directory. @param path the file or directory to update @throws IOException if an I/O error occurs
146 Constructs a filter with a specified pattern. @param pattern regular expression pattern to match file names
147 Checks conditions on BigInteger value. @param x the BigInteger to evaluate @return true if conditions are met, false otherwise
148 Applies a mask to an array of doubles using a consumer. @param consumer function to apply to each element in the array
149 Applies a mask to array elements using the provided consumer. @param consumer IntConsumer to process each element
150 Applies a mask to elements in the array. @param consumer function to process each element
151 Checks if the given type is a primitive. @param type the class to check @return true if the type is a primitive, false otherwise
152 Wraps primitive types to their corresponding wrapper classes. @param type the class to be checked and possibly wrapped @return the wrapper class if applicable, otherwise the original class
153 Unwraps a wrapper class to its primitive type. @param type the wrapper or primitive type class @return the corresponding primitive type class or original if not a wrapper
154 Parses a string to a byte using the specified radix. @param string the string to be parsed @param radix the radix used in parsing @return the parsed byte value @throws NumberFormatException if the string is out of range for byte values
155 Parses a string to an unsigned integer. @param string the string to parse @param radix the numeral system radix @return parsed unsigned integer value @throws NumberFormatException if input is out of range for unsigned int
156 Initializes a new schedule with a specified delay and time unit. @param delay duration to wait before execution @param unit time unit for the delay
157 Updates a long value associated with a key using an atomic function. @param key the key to update @param updaterFunction the function to apply for updating the value @return the updated value
158 Updates a key's value atomically using a provided function. @param key the key to update @param updaterFunction function to apply for computing new value @return updated value after applying the function
159 Wraps a Callable task for asynchronous execution. @param callable the task to execute @param listeningExecutorService executor service for asynchronous execution @return AsyncCallable instance that executes the task
160 Wraps a Callable task with thread naming. @param callable the original Callable task to execute @param nameSupplier provides the new name for the thread @return wrapped Callable that sets thread name before execution
161 Wraps a Runnable task with thread naming. @param task the Runnable to execute @param nameSupplier provides a new name for the thread @return a Runnable that sets and restores thread name
162 Wraps an async function to ensure proper resource management. @param function the original async function to wrap @return a new AsyncClosingFunction with resource handling
163 Checks if a FluentFuture is null and throws NullPointerException if true. @param future the FluentFuture to check for nullity @return the original FluentFuture if not null
164 Applies a transformation function to the result of a given future. @param input Future containing input data @param function Function to transform input to output @return Future with transformed result
165 Wraps an executor to rename threads executing tasks. @param executor the original executor service @param nameSupplier provides the new thread name for each task @return a decorated executor with renamed threads
166 Wraps an executor service to rename threads. @param service the original executor service @param nameSupplier supplies thread names @return a new wrapped ExecutorService with renamed threads
167 Wraps a scheduled executor service to rename threads. @param service the original ScheduledExecutorService @param nameSupplier supplies thread names @return wrapped ScheduledExecutorService with named threads
168 Constructs a SequentialExecutor with a specified Executor. @param executor the Executor to use for task execution
169 Submits a task to be executed sequentially. @param task the Runnable task to execute
170 Sets the uncaught exception handler for threads. @param uncaughtExceptionHandler handler to manage uncaught exceptions @return this ThreadFactoryBuilder instance
171 Sets the backing thread factory. @param backingThreadFactory the base thread factory to use @return this builder instance for method chaining
172 Joins a thread with a timeout, handling interruptions gracefully. @param toJoin the thread to join @param timeout the maximum time to wait @param unit the time unit of the timeout
173 Sets a custom ticker for cache expiration. @param ticker the time source to use for expiration calculations @return this CacheBuilder instance
174 Sets a removal listener for cache entries. @param listener the listener to be notified on entry removal @return CacheBuilder instance with the specified listener
175 Returns the calculated mean of the dataset. Ensures count is not zero before returning mean. @return mean value of the dataset
176 Returns the minimum value from the dataset. @return minimum value or throws exception if count is zero
177 Returns the maximum value from the dataset. @return maximum value or throws exception if count is zero
178 Returns the calculated mean of the dataset. Ensures that the count is not zero before returning. @return mean value or throws IllegalStateException if count is zero
179 Returns minimum value if count is non-zero. @return minimum value or throws exception if count is zero
180 Returns the maximum value from accumulated data. Ensures count is non-zero before returning max. @return maximum value or throws if no data points added
181 Returns a CountDownLatch to wait for closure. @return CountDownLatch representing closure state
182 Masks characters in a string after the first uppercase letter. @param string input string to process @return modified string with masked characters or original if no uppercase found
183 Masks a character to toggle its case if it's uppercase. @param c the character to mask @return masked character with toggled case if uppercase, original otherwise
184 Masks characters in a string starting from the first lowercase letter. @param string input string to process @return modified string with masked characters or original if no lowercase is found
185 Masks a character to toggle its case if it's lowercase. @param c the character to mask @return the masked character with toggled case if applicable
186 Masks a sequence by truncating it to a specified length with an indicator. @param seq the input character sequence @param maxLength maximum allowed length of the masked string @param truncationIndicator string used to indicate truncation @return truncated and masked string or original if within max length
187 Validates and processes data from a ByteBuffer. @param buffer input data container
188 Clamps a short value within a specified range. @param value the value to clamp @param min the minimum allowable value @param max the maximum allowable value @return clamped value within [min, max] range
189 Sets thread priority. @param priority thread priority level to set @return this builder instance
190 Compares two character sequences for equality, ignoring case differences. @param s1 first sequence to compare @param s2 second sequence to compare @return true if sequences are equal or differ only by case; false otherwise
191 Initializes cache statistics with given metrics. @param hitCount number of successful hits in the cache @param missCount number of misses in the cache @param loadSuccessCount number of successful loads @param loadExceptionCount number of exceptions during loading @param totalLoadTime total time taken for all loads @param evictionCount number of evictions from the cache
192 Initializes the multimap with an empty backing map. @param map the initial backing map, must be empty
193 Initializes the multimap with a given map. Validates that no collection is empty and calculates total size.
194 Constructs a new multiset with an empty backing map. @param backingMap the initial backing map to use
195 Creates a contiguous set view between two elements with specified inclusivity. @param fromElement starting element of the range @param fromInclusive true if the start element is inclusive @param toElement ending element of the range @param toInclusive true if the end element is inclusive @return ContiguousSet view or throws IllegalArgumentException if invalid range
196 Constructs an EnumMultiset for the specified enum type. @param type the enum class type
197 Returns a subset of elements within the specified range. @param fromElement lower bound element @param fromInclusive true if the lower bound is inclusive @param toElement upper bound element @param toInclusive true if the upper bound is inclusive @return ImmutableSortedSet containing elements in the specified range
198 Partitions an iterable into fixed-size lists. @param iterable the source iterable to partition @param size the size of each partition list @return an Iterable of Lists, each containing up to 'size' elements from the original iterable
199 Partitions an iterable into sublists of a specified size. @param iterable the source iterable to partition @param size the maximum size of each sublist @return Iterable of sublists containing elements from the original iterable
200 Sets the expected size of the MinMaxPriorityQueue. @param expectedSize initial capacity hint for the queue @return this Builder instance for method chaining
201 Sets the maximum size of the queue. @param maximumSize the desired maximum size (must be positive) @return this Builder instance for method chaining
202 Initializes the AbstractStreamingHasher with specified chunk and buffer sizes. @param chunkSize size of each data chunk to process @param bufferSize total size of the internal buffer
203 Masks a double value if condition not met. @param value input double precision number @return masked value or original if condition fails
204 Creates a character matcher that matches a specific character. @param match the character to be matched @return CharMatcher instance matching the specified character
205 Creates a matcher that excludes specified character. @param match character to be excluded from matching @return CharMatcher instance excluding the specified character
206 Masks characters in a sequence based on matching criteria. @param sequence the input character sequence @param replacement character to replace matches with @return masked string
207 Default constructor initializes Converter with automatic null handling enabled.
208 Checks if two Wrapper objects are equivalent. @param obj object to compare with @return true if objects are equivalent, false otherwise
209 Checks equivalence of two objects using custom strategy. @param t first object to compare @param u second object to compare @return true if objects are equivalent, false otherwise
210 Removes a key-value pair from the segment if it matches the given reference. @param key key to remove @param hash hash of the key @param valueReference reference to the value to match and remove @return true if the entry was removed, false otherwise
211 Removes a key-value pair from the segment if it matches the given reference. @param key the key of the entry to remove @param hash the hash code of the key @param valueReference the weak value reference to match @return true if the entry was removed, false otherwise
212 Compares two iterators for equality by checking their elements. @param iterator1 first iterator to compare @param iterator2 second iterator to compare @return true if both iterators have the same elements in the same order, false otherwise
213 Compares this entry with another for equality. @param object the object to compare @return true if entries are equal, false otherwise
214 Checks if a condition is met for graph processing. @param graph the graph to process @param nextNode the next node in traversal @param previousNode the previous node in traversal, can be null @return true if condition is met (graph is empty or nodes are not equal), false otherwise
215 Computes a hash code based on the reference object. @return hash code generated by the equivalence mechanism
216 Constructs a new FinalizablePhantomReference. @param referent object the reference refers to, can be null @param queue FinalizableReferenceQueue associated with this reference
217 Initializes a soft reference with a cleanup process. @param referent the object to be softly referenced, can be null @param queue manages the finalization of references
218 Constructs a new FinalizableWeakReference. @param referent the object to be weakly referenced, can be null @param queue reference queue to manage cleanup
219 Creates a constant function that always returns the specified value. @param value the fixed return value of the function @return Function object that always returns the given value
220 Parses a bracketed host-port string into host and port components. @param hostPortString input string in the format "[host]:port" @return array of two strings: host and port, or just host if no port is specified
221 Validates and returns the HostAndPort instance. Checks for possible bracketless IPv6 literals. @param hasBracketlessColons flag indicating if host contains colons without brackets @param host the network host @return current HostAndPort instance
222 Masks the given IP address by decrementing it. @param address original InetAddress object @return modified InetAddress with decremented value
223 Increments the given IP address. @param address original InetAddress object @return incremented InetAddress or throws if it wraps
224 Creates a proxy instance for the specified interface type. @param interfaceType the interface to create a proxy for @param handler the invocation handler to use @return proxy instance implementing the specified interface
225 Retrieves the first type argument of the generic superclass. @return Type representing the first type argument
226 Joins elements from an iterator into a single string using the provided Appendable. @param appendable the destination for the joined elements @param parts iterator over elements to join @return the given Appendable with joined elements @throws IOException if an I/O error occurs
227 Appends map entries to a StringBuilder. @param builder the StringBuilder to append to @param entries iterable of map entries @return the updated StringBuilder
228 Joins map entries into a string. @param entries iterator of map entries @return joined string representation of map entries
229 Creates a MapJoiner with specified key-value separator. @param keyValueSeparator character separator between keys and values in maps @return MapJoiner instance for further operations
230 Generates a string representation of the object with optional value omission. @return formatted string representing the object's state
231 Retrieves an immutable set of values associated with a given key. @param key the key to look up in the multimap @return ImmutableSet of values or an empty set if key not found
232 Loads a resource by name. @param resourceName the name of the resource to load @return URL of the resource or throws exception if not found
233 Returns an empty Optional instance. @param <T> type parameter for the absent value @return Optional containing no value, effectively representing absence
234 Converts a Google Optional to a Java Util Optional. @param googleOptional the input Google Optional @return Java Util Optional containing the result or null if input is null
235 Masks a string by returning null if it's empty or null. @param string the input string to mask @return null if the input is empty or null, otherwise returns the original string
236 Checks if a string is null or empty using platform utility. @param string the string to check @return true if the string is null or empty, false otherwise
237 Skips a specified number of elements from the start of an iterable. @param iterable the source iterable @param numberToSkip the number of elements to skip @return a new iterable with the skipped elements
238 Limits an iterable to a specified size. @param iterable the source iterable @param limitSize maximum number of elements to include @return new iterable with limited size
239 Advances an iterator by a specified number of elements. @param iterator the iterator to advance @param numberToAdvance number of elements to skip @return actual number of elements advanced
240 Limits the number of elements returned by an iterator. @param iterator source iterator to be limited @param limitSize maximum number of elements to return @return new Iterator with limited size
241 Creates a traverser for the given tree structure. Validates that the input is not an undirected graph or network. @param tree Successors function defining the tree structure @return Traverser object for the specified tree
242 Calculates mask for given bit length. @param bits number of bits, must be positive @return int representing the calculated mask
243 Masks a BigInteger to an InetAddress. @param address BigInteger representation of the IP address @param isIpv6 true for IPv6, false for IPv4 @return InetAddress object representing the masked address
244 Repeats a string multiple times. @param string the string to repeat @param count number of times to repeat the string @return repeated string or empty if count is 0
245 Constructs a BloomFilter instance. @param bits underlying bit array for storage @param numHashFunctions number of hash functions to use @param funnel defines how objects are converted to bytes @param strategy determines the optimal size and hash functions
246 Creates a concatenated hash function from an iterable of hash functions. @param hashFunctions iterable of hash functions to concatenate @return ConcatenatedHashFunction combining all input hash functions
247 Initializes SipHash function with given parameters. @param c number of iterations during Compression; must be positive @param d number of iterations during Finalization; must be positive @param k0 first key part @param k1 second key part
248 Constructs a FileBackedOutputStream with specified file threshold and reset behavior. @param fileThreshold memory threshold before switching to file storage @param resetOnFinalize whether to reset the stream on finalization
249 Applies a mask to an IPv4 address. @param bytes byte array representing the IPv4 address @return masked Inet4Address object
250 Masks boolean array by ensuring it meets minimum length with optional padding. @param array input boolean array @param minLength required minimum length of the array @param padding additional elements to add if array is shorter than minLength @return masked boolean array with at least minLength, possibly padded
251 Ensures byte array meets minimum length with optional padding. @param array input byte array @param minLength required minimum length @param padding additional padding if needed @return adjusted byte array or original if sufficient length
252 Masks character array by ensuring minimum length with padding. @param array input character array @param minLength desired minimum length of the array @param padding number of characters to add if below minLength @return masked character array
253 Masks an array to ensure it meets a minimum length by padding with zeros if necessary. @param array input double array @param minLength desired minimum length of the array @param padding number of zeros to add if array is shorter than minLength @return masked array with at least minLength elements
254 Ensures array meets minimum length by padding if necessary. @param array input float array @param minLength required minimum length @param padding additional padding size @return adjusted array with at least minLength elements
255 Masks an integer array by ensuring it meets a minimum length. @param array input integer array @param minLength required minimum length of the array @param padding value to add if array is shorter than minLength @return masked array with at least minLength elements
256 Ensures array length meets minimum requirement with optional padding. @param array input long array @param minLength minimum required length @param padding additional elements to add if needed @return adjusted array with at least minLength elements
257 Ensures array meets minimum length with optional padding. @param array input short array @param minLength required minimum length @param padding additional space to allocate if needed @return adjusted array with ensured length
258 Converts a long value to a character, ensuring it's within valid range. @param value the long value to convert @return char representation of the long value
259 Converts a long value to an integer. @param value the long value to convert @return the converted integer value Throws an exception if the conversion overflows
260 Converts long to short with bounds checking. @param value the long value to convert @return short representation of the value
261 Converts long to byte with bounds check. @param value input long value @return byte representation of the input value
262 Masks a long value to fit in a byte. @param value the long value to mask @return masked byte value
263 Masks long value to ensure it fits in an unsigned int. @param value the input long value @return masked int value or throws exception if out of range
264 Creates a scheduler with fixed rate delays. @param initialDelay initial delay before first execution @param delay fixed delay between subsequent executions @param unit time unit for delays @return Scheduler instance configured with specified timing
265 Creates a scheduler with fixed rate tasks. @param initialDelay delay before first execution in specified units @param period interval between successive executions in specified units @param unit time unit for delays and periods @return Scheduler instance configured for fixed-rate task scheduling
266 Masks a character within specified bounds. @param value character to mask @param min minimum bound (inclusive) @param max maximum bound (inclusive) @return masked character within [min, max] range
267 Masks a long value within the specified range. @param value the value to mask @param min minimum allowable value @param max maximum allowable value @return masked value within [min, max] range
268 Retrieves a resource URL by name relative to the given class. @param contextClass class used as reference point for resource location @param resourceName name of the resource to find @return URL of the resource or null if not found
269 Starts the stopwatch. Throws IllegalStateException if already running. @return this Stopwatch instance
270 Stops the stopwatch and updates the elapsed time. @return the Stopwatch instance for method chaining
271 Validates removal operation in collections. @param canRemove flag indicating if removal is allowed
272 Sets the comparator for map values. @param valueComparator comparator to determine order of values @return this Builder instance
273 Sets the initial capacity of the cache. @param initialCapacity the initial number of entries the cache can hold @return CacheBuilder instance for method chaining
274 Sets the concurrency level for cache operations. @param concurrencyLevel number of threads accessing the cache concurrently @return CacheBuilder instance with updated settings
275 Sets the initial capacity of the map. @param initialCapacity the desired initial capacity @return this MapMaker instance for method chaining
276 Sets the concurrency level for map creation. @param concurrencyLevel desired concurrency level, must be positive @return this MapMaker instance for method chaining
277 Sets the maximum number of entries in the cache. @param maximumSize max number of entries; must be non-negative @return CacheBuilder instance for method chaining
278 Sets the maximum weight for the cache. @param maximumWeight the maximum allowed weight of entries in the cache @return this CacheBuilder instance for method chaining
279 Sets a weigher for the cache. @param weigher function to determine the weight of cache entries @return CacheBuilder instance with weigher set
280 Sets the cache expiration time after a write operation. @param duration amount of time before entries expire @param unit time unit for the duration @return CacheBuilder instance with updated configuration
281 Sets cache expiration time after access. @param duration time value for expiration @param unit time unit for the duration @return CacheBuilder instance with updated configuration
282 Sets the cache refresh interval. @param duration time duration for refresh @param unit TimeUnit for the duration @return CacheBuilder instance with updated settings
283 Sets the key equivalence strategy. @param equivalence custom key equivalence @return CacheBuilder instance with updated settings
284 Sets the value equivalence strategy. @param equivalence the equivalence strategy for values @return this CacheBuilder instance
285 Sets the key equivalence for map keys. @param equivalence Equivalence strategy for comparing keys @return This MapMaker instance with custom key equivalence
286 Initializes a new TypeToken instance. Captures the runtime type and checks for invalid type variables. Throws an exception if constructing for a type variable.
287 Retrieves failure cause if the service has failed. @return Throwable object or null if not applicable
288 Validates and returns the index within bounds. @param index the index to validate @param size the size of the array or collection @param desc description for error messages @return the validated index @throws IndexOutOfBoundsException if index is out of bounds
289 Validates and masks an index within a specified size. @param index the index to validate @param size the maximum allowable size @param desc description of the index for error messages @return the validated index or throws IndexOutOfBoundsException if invalid
290 Creates a predicate that always returns true. @return Predicate of type T that always evaluates to true
291 Creates a predicate that always evaluates to false. @return Predicate of type T that returns false for all inputs
292 Creates a predicate that masks objects by checking if they are null. @return Predicate of type T that evaluates to true for null values
293 Creates a predicate that checks if an object is not null. @return Predicate of type T or null if not applicable
294 Combines two predicates with null checks. @param first the first predicate @param second the second predicate @return a combined Predicate that evaluates both input predicates after null checks
295 Combines two predicates with null checks. @param first the first predicate @param second the second predicate @return a Predicate that evaluates to true if either of the input predicates is true, after null checks
296 Returns a Splitter configured to omit empty strings. @return Splitter instance with specified strategy, trimming, and limit
297 Configures the maximum number of splits. @param maxItems maximum number of splits allowed (-1 for no limit) @return a new Splitter instance with updated configuration
298 Splits a character sequence into parts. @param sequence the input character sequence to split @return an immutable list of split parts
299 Returns the masked string representation of a system property. @return Key=value string with value masked or null if not found
300 Converts elapsed time to specified unit. @param desiredUnit target time unit for conversion @return Elapsed time in the desired unit
301 Converts elapsed time to Duration. @return Duration object representing total elapsed time
302 Converts elapsed time to a formatted string. @return Formatted string representing elapsed time in largest applicable unit
303 Converts null to empty string using Platform utility. @param string input string which may be null @return non-null string, either the original or an empty one
304 Finds common prefix between two CharSequences. @param a first CharSequence @param b second CharSequence @return longest common prefix as String
305 Masks common suffix of two strings. @param a first CharSequence @param b second CharSequence @return masked suffix of the longer string or original if no common suffix
306 Creates a memoized Supplier for the given instance. @param instance the object to be supplied @return Supplier that always returns the same instance
307 Private constructor for Ticker utility class. Ensures singleton access to system ticker instance.
308 Verifies that a boolean expression is true. Throws a VerifyException with no detail message if false.
309 Throws an exception with a formatted message if the boolean expression is false. @param expression the condition to verify @param errorMessageTemplate template for the error message @param p1 character parameter for the error message
310 Throws an exception with a formatted message if the boolean condition is false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 parameter for error message formatting
311 Throws an exception with a formatted message if the boolean expression is false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 parameter for message formatting
312 Verifies that a boolean expression is true. Throws an exception with a formatted error message if false. @param expression the boolean condition to check @param errorMessageTemplate template for the error message @param errorMessageArgs arguments for the error message template
313 Verifies a boolean expression; throws an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 first character parameter for formatting @param p2 second character parameter for formatting
314 Verifies a boolean expression; throws exception with formatted message if false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 first parameter for message formatting @param p2 second parameter for message formatting
315 Verifies a boolean condition; throws an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 first parameter for message formatting @param p2 second parameter for message formatting
316 Throws a VerifyException with a formatted error message if the expression is false. @param expression boolean condition to check @param errorMessageTemplate template for the error message @param p1 first parameter for message formatting (can be null) @param p2 second parameter for message formatting
317 Verifies a boolean expression, throwing an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 character parameter for the error message @param p2 integer parameter for the error message
318 Throws an exception with a formatted message if the boolean expression is false. @param expression condition to verify @param errorMessageTemplate template for the error message @param p1 first parameter for error message formatting @param p2 second parameter for error message formatting
319 Throws an exception with a formatted message if the given boolean expression is false. @param expression condition to verify as true @param errorMessageTemplate template for the error message @param p1 first parameter for message formatting @param p2 second parameter for message formatting
320 Verifies a boolean expression; throws an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 first parameter for message formatting (can be null) @param p2 second parameter for message formatting
321 Verifies a boolean condition; throws an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 character parameter for the message @param p2 long parameter for the message
322 Verifies that a boolean expression is true. Throws VerifyException with formatted message if false. @param expression the condition to check @param errorMessageTemplate template for error message @param p1 first parameter for message formatting @param p2 second parameter for message formatting
323 Verifies a boolean expression; throws an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 first parameter for message formatting @param p2 second parameter for message formatting
324 Verifies that a boolean expression is true. Throws a VerifyException with a formatted error message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 first parameter for the error message @param p2 second parameter for the error message
325 Throws a VerifyException with a formatted message if the expression is false. @param expression boolean condition to verify @param errorMessageTemplate template for the error message @param p1 character to format into the error message @param p2 optional object to format into the error message
326 Verifies a boolean condition; throws an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for error message @param p1 first parameter for error message @param p2 second parameter for error message (nullable)
327 Throws a VerifyException with a formatted error message if the expression is false. @param expression condition to verify @param errorMessageTemplate template for the error message @param p1 first parameter for the error message @param p2 second parameter for the error message (nullable)
328 Verifies a boolean expression; throws an exception with a formatted error message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 first parameter for the error message @param p2 second parameter for the error message
329 Verifies that a boolean expression is true. Throws an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for error message @param p1 first parameter for message formatting (can be null) @param p2 second parameter for message formatting (can be null) @param p3 third parameter for message formatting (can be null)
330 Verifies a boolean expression; throws an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1,p2,p3,p4 parameters for the error message template
331 Processes and finalizes references from a queue. @param firstReference initial reference to process @return true if all references are finalized successfully, false otherwise
332 Constructs a new instance of SimpleStatsCounter.
333 Aggregates statistics from another StatsCounter instance. @param other the StatsCounter instance to aggregate data from
334 Protected constructor for AbstractLoadingCache. Ensures instantiation only through subclasses.
335 Creates and returns an empty LinkedHashMap. @return an empty LinkedHashMap instance
336 Attempts to add multiple entries to the cache. @param m map containing entries to be added
337 Invalidates multiple cache entries by key. @param keys collection of unique identifiers for the cache entries to invalidate
338 Creates and returns a new CacheBuilder instance. @return Configurable CacheBuilder object
339 Throws an exception indicating bulk loading is not supported. @param keys iterable collection of keys to load values for @throws UnsupportedLoadingOperationException always thrown
340 Calculates a masked value using hit and miss counts. @return Masked value based on hit and miss statistics
341 Calculates masked value from load success and exception counts. @return masked result of load operations
342 Calculates the load exception rate. @return ratio of load exceptions to total loads or 0 if no loads occurred
343 Calculates average load time per cache load. @return Average load time or 0 if no loads occurred
344 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
345 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
346 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
347 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
348 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
349 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
350 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
351 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
352 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
353 Processes entries in the recency queue for eviction. Moves valid entries to the access queue.
354 Creates a new entry with updated references. @param original the original reference entry @param newNext the next reference entry in the chain @return new ReferenceEntry object or null if key or value is invalid
355 Removes entries matching a predicate. @param predicate condition to test each entry @return true if any entries were removed, false otherwise
356 Aggregates and processes multiple futures. Handles success and failure conditions based on configuration.
357 Wraps an executor to handle task rejection by setting it on a future. @param delegate the original executor to wrap @param future the future to update in case of rejection @return Executor instance that delegates tasks or handles rejections
358 Waits for and retrieves the result of a Future, ensuring it's completed. @param future the Future to retrieve the result from @return the result of the Future @throws ExecutionException if an exception occurred while computing the result
359 Retrieves result from Future, handling exceptions. @param future the Future to retrieve the result from @return the result of the Future @throws ExecutionError if an Error occurred during execution @throws UncheckedExecutionException if another exception occurred
360 Clears expired cache entries based on key and value strength. Processes weak or moderate key strengths and soft or weak value strengths.
361 Defines the equivalence strategy for object comparison in caching. @return Equivalence instance used to compare objects in the cache
362 Provides an equivalence strategy for object comparison. @return Equivalence instance to be used in comparisons
363 Provides an equivalence strategy for object comparison. @return Equivalence instance configured for identity-based comparison
364 Provides an abstract method to define object equivalence logic. @return Equivalence instance for comparing objects
365 Provides an equivalence instance used for object comparison. @return Equivalence instance configured for specific comparison logic
366 Checks if a cache entry should be expired. @param entry the cache entry to check @param now current time in nanoseconds @return true if the entry is expired, false otherwise
367 Calculates the total count of all elements in the multiset. @return int representing the total count, clamped to int range
368 Counts elements in an iterator and casts the count to an int. @param iterator the iterator to process @return int count of elements, clamped if necessary
369 Calculates the total number of elements in a multiset. @param multiset the input multiset @return the total count of all elements, saturated to int range
370 Applies a mask operation to two integers. @param a first integer operand @param b second integer operand @return masked result using saturated cast
371 Performs masked subtraction with overflow protection. @param a first integer operand @param b second integer operand @return result of subtracting b from a, clamped to int range
372 Multiplies two integers with overflow protection. @param a first integer factor @param b second integer factor @return product of a and b, clamped to int range
373 Creates and returns an empty set with compact representation. @return Set instance using CompactHashSet implementation
374 Protected constructor for AbstractIterator. Initializes iterator without modifying underlying collection.
375 Constructs an iterator with an initial element. @param firstOrNull the first element or null if none
376 Constructs an instance of UnmodifiableListIterator. Initializes the iterator without modifying the underlying collection.
377 Returns an unmodifiable collection view of values after applying a mask. @return filtered collection of values
378 Retrieves and removes the next entry from the iterator. @return the next entry or null if no more entries are available
379 Retrieves and removes the next element from the iterator. @return the next element or null if no more elements are available
380 Synchronizes the delegate collection with its ancestor or refreshes it. Throws ConcurrentModificationException if synchronization fails.
381 Retrieves values associated with a key. @param key the key to query @return a collection of values or an empty collection if none exist
382 Returns the collection of values associated with keys. @return Collection of values
383 Retrieves all values associated with keys. @return List of values
384 Returns the collection of entries. @return Collection of key-value pairs
385 Returns a list of entries in the multimap. @return List of key-value pairs
386 Creates a masked StringBuilder with specified size. Validates size and initializes StringBuilder for bit manipulation. @param size the desired capacity of the StringBuilder @return a StringBuilder instance with adjusted capacity
387 Creates an ArrayList with a specified initial capacity. Validates the initial size is non-negative. @param initialArraySize desired initial capacity of the list @return ArrayList instance with the given initial size
388 Calculates a mask size for maps based on expected size. @param expectedSize the anticipated number of entries @return adjusted size as per map utility logic
389 Creates a ListMultimap builder with expected values per key. @param expectedValuesPerKey estimated number of values per key @return ListMultimapBuilder configured for the specified key and value types
390 Creates a builder for a SetMultimap with expected values per key. @param expectedValuesPerKey the expected number of values per key @return a SetMultimapBuilder instance configured with the given parameters
391 Creates a builder for SetMultimap with linked hash sets. @param expectedValuesPerKey expected number of values per key @return SetMultimapBuilder configured with linked hash sets
392 Creates a MultimapBuilder with specified expected keys. Validates the number of expected keys and returns a builder instance. @param expectedKeys the expected number of keys in the multimap @return a new MultimapBuilderWithKeys instance
393 Creates a MultimapBuilderWithKeys with specified expected keys. Validates that the number of expected keys is non-negative. @param expectedKeys the expected number of unique keys @return a configured MultimapBuilderWithKeys instance
394 Adjusts the count of a specified element in the multiset. @param self the Multiset to modify @param element the element whose count is adjusted @param count the new count for the element @return the previous count of the element
395 Updates the count of an element in a multiset. @param self the multiset to update @param element the element whose count is updated @param oldCount the expected current count of the element @param newCount the new count for the element @return true if the count was successfully updated, false otherwise
396 Returns a mask value for the set using a custom function. @return computed mask value
397 Checks if this set is equal to or a superset of the given object. @param object the object to compare @return true if this set equals or contains all elements of object, false otherwise
398 Delegates to the asMap() method and returns its size. @return number of key-value associations in the multimap
399 Calls asMap on the result of m1. @return Unmodifiable map view of the multimap from m1's result.
400 Removes specified elements from this multiset. @param elementsToRemove collection of elements to remove @return true if any element was removed, false otherwise
401 Checks equality of this multiset with another object. @param object the object to compare @return true if multisets are equal, false otherwise
402 Checks equality with another multiset. @param object the object to compare @return true if equal, false otherwise
403 Retrieves an element from the iterable if available; otherwise returns a default value. @param iterable source of elements @param defaultValue value to return if iterable is empty @return next element or default value if iterable is empty
404 Returns a modifiable map view of this multimap. @return a Map where each key is associated with its corresponding set of values
405 Returns a navigable set of keys from the underlying map. @return NavigableSet containing all keys in sorted order
406 Returns a non-null comparator, using natural ordering if none provided. @param comparator user-defined comparator @return non-null Comparator instance
407 Calls method m2 on the result of m1(). @return String result from nested m2 call
408 Converts table to string representation using nested toString method. @return String formatted as per nested method's output
409 Serializes this Multimap instance to an ObjectOutputStream. @param stream the ObjectOutputStream to write to @throws IOException if serialization fails
410 Serializes the HashMultimap to an ObjectOutputStream. @param stream the ObjectOutputStream to write to @throws IOException if serialization fails
411 Serializes an ImmutableListMultimap to a stream. @param stream the ObjectOutputStream to write to @throws IOException if serialization fails
412 Deserializes a Multimap from an ObjectInputStream. @param multimap the Multimap to populate with deserialized data @param stream the source of serialized data
413 Returns the immutable set of column keys. @return ImmutableSet containing all column keys
414 Returns the immutable set of row keys. @return ImmutableSet containing all row keys
415 Returns the immutable set of keys from the underlying map. @return ImmutableSet containing all keys in the multimap
416 Checks if the specified column key exists in the table. @param columnKey the key to check for existence @return true if the column key is present, false otherwise
417 Checks if a row key exists in the ArrayTable. @param rowKey the key to check for presence @return true if the row key is present, false otherwise
418 Retrieves values associated with a key. @param key the key to look up @return ImmutableList of values or an empty list if key not found
419 Retrieves a map of row keys to values for the given column key. @param columnKey the column key to retrieve data for @return an ImmutableMap containing row keys and their corresponding values
420 Adds a key-value pair to the multimap. @param key the key to add @param value the value to add @return this Builder instance for chaining
421 Computes the offset from a given origin by applying a transformation repeatedly. @param origin starting value in the discrete domain @param distance number of transformations to apply @return transformed value after specified distance or throws exception on overflow
422 Applies a flat map transformation to a spliterator. @param fromSpliterator input spliterator of elements @param function mapping function transforming elements into double spliterators @param topCharacteristics characteristics for the resulting spliterator @param topSize estimated size of the resulting spliterator @return new Spliterator.OfDouble after flat map transformation
423 Creates a flat map spliterator of integers. @param fromSpliterator source spliterator of input elements @param function mapping function converting input to integer spliterators @param topCharacteristics spliterator characteristics @param topSize estimated size of the resulting stream @return FlatMapSpliteratorOfInt instance
424 Applies a flat map transformation to elements of the input spliterator. @param fromSpliterator source spliterator of elements @param function maps each element to a long spliterator @param topCharacteristics desired spliterator characteristics @param topSize estimated size of the resulting spliterator @return FlatMapSpliteratorOfLong instance with transformed elements
425 Applies a flat mapping function to elements of the input spliterator. @param fromSpliterator source spliterator of InElementT @param function mapping function from InElementT to Spliterator<OutElementT> @param topCharacteristics spliterator characteristics @param topSize estimated size of the resulting spliterator @return FlatMapSpliteratorOfObject instance with transformed elements
426 Checks if all elements in the provided collection satisfy the condition defined by m1. @param collection the collection to check against @return true if all elements satisfy the condition, false otherwise
427 Updates metadata with adjusted hash table bits. @param mask used to determine hash table size
428 Updates metadata with new hash table bits. @param mask used to determine hash table size
429 Resizes the internal arrays to accommodate a new capacity. @param newCapacity the desired new capacity for the arrays
430 Resizes internal arrays to accommodate new capacity. @param newCapacity desired size for internal arrays
431 Calculates mask for hash table size. @param expectedSize estimated number of entries in the hash table @return mask value for the calculated table size
432 Begins a chained comparison with two integers. @param left first integer to compare @param right second integer to compare @return ComparisonChain instance for further comparisons
433 Abstract method to compare two long values in a chained comparison. @param left first long value @param right second long value @return ComparisonChain instance for further chaining or final result
434 Starts a comparison chain with two boolean values. @param left first boolean value @param right second boolean value @return ComparisonChain object to continue chaining comparisons
435 Compares two boolean values in a chained comparison sequence. @param left first boolean value @param right second boolean value @return this instance to allow further comparisons
436 Checks if the range has a defined lower bound. @return true if lower bound is not equal to Cut.m1(), false otherwise
437 Checks if the range has an upper bound. @return true if there is an upper bound, false otherwise
438 Default constructor initializes a new DiscreteDomain instance. Uses the primary constructor with fast offset calculations unsupported.
439 Serializes the EnumBiMap to an ObjectOutputStream. @param stream the ObjectOutputStream to write to @throws IOException if an I/O error occurs during serialization
440 Serializes the EnumHashBiMap to an ObjectOutputStream. @param stream the ObjectOutputStream to write to @throws IOException if an I/O error occurs during serialization
441 Serializes the current object to an ObjectOutputStream. @param stream the ObjectOutputStream to write to @throws IOException if an I/O error occurs during serialization
442 Validates and processes an enum element. @param element the object to validate and process
443 Serializes the HashMultiset to an ObjectOutputStream. @param stream the ObjectOutputStream to write to @throws IOException if an I/O error occurs
444 Serializes the LinkedHashMultiset to an ObjectOutputStream. @param stream the ObjectOutputStream to write to @throws IOException if an I/O error occurs
445 Writes the TreeMultiset to an ObjectOutputStream. @param stream the ObjectOutputStream to write to @throws IOException if an I/O error occurs
446 Constructs a new instance of the Builder class.
447 Wraps an array in a FluentIterable. @param elements array of elements to be wrapped @return FluentIterable instance containing the elements
448 Creates an empty FluentIterable. @return a FluentIterable instance with no elements
449 Checks if delegate iterable is empty after transformation. @return true if empty, false otherwise
450 Concatenates this iterable with another. @param other iterable to concatenate with @return new FluentIterable containing elements from both
451 Merges two iterables into one. @param a first iterable collection @param b second iterable collection @return Iterable containing elements from both collections
452 Combines three iterables into one. @param a first iterable @param b second iterable @param c third iterable @return Iterable containing elements from all three inputs
453 Combines four iterables into one. @param a,b,c,d input iterables to be combined @return Iterable containing elements from all inputs
454 Applies transformation to elements of the iterable. @return transformed Stream of elements
455 Counts occurrences of an element in an iterator. @param iterator the iterator to search within @param element the element to count, can be null @return number of times the element appears in the iterator
456 Checks if a map contains a specified key. @param map the map to search within @param key the key to look for, can be null @return true if the key is found, false otherwise
457 Checks if a map contains a specified value. @param map the map to search within @param value the value to look for, can be null @return true if the value is found, false otherwise
458 Masks elements in this list starting from a given index. @param index starting index for masking @param elements iterable of elements to mask with @return true if any element was masked, false otherwise
459 Returns a sublist of elements from index 'fromIndex' (inclusive) to 'toIndex' (exclusive). @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive) @return sublist of elements between 'fromIndex' and 'toIndex'
460 Computes a mask value for this list using an internal algorithm. @return computed mask as an integer
461 Merges entries from another map into this map. @param map source map containing entries to merge
462 Checks equality with another map or object. @param object object to compare @return true if equal or have matching transformed keys, false otherwise
463 Creates a StandardTable with the given backing map and column map supplier. Validates the backing map and checks the factory for nullity. @param backingMap initial map containing rows of maps representing columns @param factory supplier for creating new column maps when adding new rows @return a new StandardTable instance
464 Returns the set of column keys. Initializes if not already created. @return Set of column keys
465 Retrieves a map of values for a given column key. @param columnKey unique identifier for the column @return Map of row keys to their corresponding values in the specified column
466 Deserializes a Map from an ObjectInputStream. @param map the target Map to populate @param stream the ObjectInputStream containing serialized data @throws IOException if I/O error occurs @throws ClassNotFoundException if class of deserialized object cannot be found
467 Deserializes a Multiset from an ObjectInputStream. @param multiset the target Multiset to populate @param stream the input stream containing serialized data
468 Constructs a hash table from elements, handling collisions. @param newTableSize desired size of the hash table @param elements array of objects to be hashed @param n number of elements to process @return Object[] representing the constructed hash table
469 Initializes a new Builder with default capacity.
470 Creates a new Builder with the specified initial capacity. @param size the starting size of the internal entry array @return a new Builder instance initialized with the given size
471 Creates a new ImmutableMap.Builder with specified initial capacity. Validates the expected size and initializes the builder accordingly. @param expectedSize the estimated number of entries in the map @return a new Builder instance for constructing an immutable map
472 Ensures the set has sufficient capacity for additional elements. @param minCapacity minimum required capacity
473 Adds elements from an iterable to the builder. @param elements iterable source of elements to add @return the builder instance for method chaining
474 Adds elements from an iterator to the list. @param elements source of elements to add @return this Builder instance for method chaining
475 Adds elements from an iterator to the multiset. @param elements source of elements to add @return this Builder instance for method chaining
476 Adds elements from an iterable to the builder. @param elements iterable source of elements to add @return the builder instance for method chaining
477 Returns an immutable list collector. @param <E> element type @return Collector to accumulate elements into an unmodifiable ImmutableList
478 Creates an empty immutable multimap. @param <K> key type @param <V> value type @return an instance of ImmutableMultimap with no mappings
479 Creates a collector to build an immutable range set. @param <E> type of elements, must be comparable @return Collector for creating ImmutableRangeSet from Range stream
480 Provides a collector to create an immutable set. @param <E> element type @return Collector for accumulating elements into an ImmutableSet
481 Returns the comparator used to sort keys. @return Comparator object defining the sorting criteria
482 Adds an element to the builder. @param element the element to add @return this Builder instance for method chaining
483 Creates a function that interns objects using the provided interner. @param interner the interner to use for object management @return Function that interns input objects
484 Converts elements of an iterable to a comma-separated string. @param iterable source iterable to process @return String representation of iterable elements enclosed in brackets
485 Retrieves the first element from an iterable. @param iterable the source iterable @return the first element or null if empty
486 Retrieves the only element from an iterator or returns a default value if empty. @param iterator source iterator @param defaultValue value to return if iterator is empty @return the first element of the iterator or the default value
487 Concatenates two arrays of objects. @param first the first array to concatenate @param second the second array to concatenate @param type Class object representing the array component type @return a new array containing elements from both input arrays
488 Retrieves the last element from an iterable. @param iterable source iterable collection @return last element or throws NoSuchElementException if empty
489 Returns the last element of an iterator or a default value if empty. @param iterator source iterator @param defaultValue value to return if iterator is empty @return last element or default value
490 Returns an empty unmodifiable iterator. @return An instance of UnmodifiableIterator with no elements
491 Writes the multimap to an ObjectOutputStream. @param stream the output stream to write to @throws IOException if I/O error occurs
492 Adds a key-value pair to the multimap. @param key the key associated with the value @param value the value to be added @param nextSibling the sibling node after which to insert the new node @return the newly created Node object
493 Converts CharSequence to a list of characters. @param sequence input character sequence @return List of Character objects representing the sequence
494 Searches for the index of an element in a list. @param list the list to search @param element the element to find, can be null @return index of element or -1 if not found
495 Searches for an element in a list. @param list the list to search within @param element the element to find, or null if searching for null elements @return index of the found element, or -1 if not present
496 Checks for entries satisfying conditions in the map. @return true if a matching entry is found, false otherwise
497 Resizes the segment's hash table when it reaches capacity. @param oldTable current atomic reference array of entries @param oldCapacity size of the old table @param newTable new expanded atomic reference array @param threshold new threshold for resizing @param newMask mask for new index calculation
498 Masks segment operations under lock. Ensures thread safety for critical section.
499 Checks if an entry has a non-null live value. @param entry InternalEntry object to check @return true if the entry has a live value, false otherwise
500 Creates a synchronized set using an IdentityHashMap. @return Synchronized set with default settings
501 Wraps a BiMap in a synchronized version. @param bimap the original BiMap to wrap @return a synchronized BiMap or the original if already synchronized/immutable
502 Places element in the correct position in a binary heap. @param index target insertion index @param x element to insert @return new index of the inserted element
503 Adjusts the heap by potentially swapping elements to maintain order. @param actualLastElement element to be placed in the correct position @return index where the last element is placed after adjustment
504 Updates cursor position and skips elements if necessary. @param c target cursor position
505 Creates an iterator for a multiset. @param multiset the multiset to iterate over @return Iterator over elements of the multiset
506 Creates a new array of the same type as the reference with specified length. @param reference original array to determine type @param length desired length of the new array @return new array instance
507 Creates an array and populates it with elements from the collection. @param c the source collection of elements @return a populated Object array or null if input is null
508 Finds the minimum element in an iterator using custom ordering. @param iterator source of elements to compare @return minimum element or null if iterator is empty
509 Finds the maximum element in an iterator using a custom comparator. @param iterator source of elements to compare @return maximum element or null if iterator is empty
510 Creates a range from an iterable of comparable values. @param values collection of comparable elements to form the range @return Range object representing the smallest and largest values in the collection
511 Creates a concurrent set with insertion order preserved. @param <E> element type @return ConcurrentHashSet instance
512 Generates string representation of the range. @return formatted string in "lower..upper" format using lower and upper bounds
513 Returns the lower bound value of the range. @return The lower bound value
514 Returns the endpoint value of the range's upper bound. @return The endpoint value of the upper bound
515 Validates entries in a hash bucket. @param value the value to validate against @param entry the current map entry being processed @param valueBucketHead the head of the value bucket @throws BucketOverflowException if the bucket exceeds maximum size
516 Filters and processes entries to create a new array. @param entries input array of map entries @param n number of entries in the input array @param newN size of the new array @param duplicates map tracking entry duplication status @return filtered array of unique entries
517 Masks a key-value pair in the map. @param key unique key for the entry @param newValue value to associate with the key @param keyBucketHead head of the bucket chain for the key @param throwIfDuplicateKeys flag to throw exception on duplicate keys @return ImmutableMapEntry if key exists, otherwise null @throws BucketOverflowException if bucket size exceeds limit
518 Returns a collector that accumulates enum constants into an immutable set. @return Collector for enums to create an unmodifiable ImmutableSet
519 Creates an EnumSet from a collection. @param collection elements to include in the set @return EnumSet containing specified elements
520 Creates an EnumSet from a collection and enum type. @param collection elements to include in the set @param type enum class for the set @return EnumSet containing specified elements
521 Finds last integer in a stream and converts it to OptionalInt. @param stream the IntStream to process @return OptionalInt containing the last element or empty if not found
522 Finds the last element in a LongStream. @param stream the LongStream to process @return OptionalLong containing the last element or empty if not found
523 Finds and returns the last element of a DoubleStream as an OptionalDouble. @param stream the DoubleStream to process @return OptionalDouble containing the last element or empty if not found
524 Partitions the buffer around a pivot to select top K elements. @param left starting index of the partition @param right ending index of the partition @param pivotIndex index of the pivot element @return new index of the pivot after partitioning
525 Serializes TreeMultimap to ObjectOutputStream. @param stream the ObjectOutputStream to write to @throws IOException if serialization fails
526 Protected constructor to prevent instantiation of the Escaper class.
527 Protected constructor to prevent instantiation of the Escaper class.
528 Masks special characters in a string starting from a given index. @param s input string to be processed @param index starting index for masking @return masked string with special characters escaped
529 Masks a character using the provided escaper. @param escaper CharEscaper instance to use for masking @param c character to mask @return escaped string representation of the character or null if input is null
530 Masks a Unicode code point using an escaper. @param escaper the UnicodeEscaper to use for masking @param cp the Unicode code point to mask @return escaped String representation or null if input is null
531 Validates graph endpoints. @param endpoints pair of graph endpoints to validate
532 Masks predecessors and checks for next node. @return true if next node is available, false otherwise
533 Creates an EndpointPair from two nodes based on the graph's orientation. @param graph the graph determining the order of nodes @param nodeU first node @param nodeV second node @return ordered or unordered EndpointPair depending on graph type
534 Creates an EndpointPair from two nodes based on network order. @param network the graph or network context @param nodeU first node @param nodeV second node @return ordered EndpointPair if network is ordered, otherwise unordered
535 Returns a set of edges in the graph. @return Set of EndpointPair objects representing graph edges
536 Returns a set of edge pairs in the graph. @return Set of EndpointPair objects representing edges
537 Validates network endpoints using mask conditions. @param endpoints pair of network endpoints to validate
538 Returns an iterator over the two nodes in this unordered pair. @return UnmodifiableIterator containing nodeU and nodeV
539 Sets the node order for the graph. @param nodeOrder the desired element order for nodes @return a new GraphBuilder instance with the specified node order
540 Sets the incident edge order for nodes. @param incidentEdgeOrder ordering type for edges @return a new GraphBuilder instance with updated settings
541 Returns the transposed version of a given graph. @param graph original graph to transpose @return transposed Graph object or original if already transposed
542 Returns the transposed version of a given network. @param network original network to transpose @return Network object representing the transposed graph
543 Returns the transposed version of a given ValueGraph. @param graph original ValueGraph to transpose @return transposed ValueGraph or original if already transposed
544 Sets the node order for the network. @param nodeOrder desired order of nodes @return a new NetworkBuilder with specified node order
545 Sets the edge order for the network. @param edgeOrder the desired order of edges @return a new NetworkBuilder with specified edge order
546 Sets the node ordering for the graph. @param nodeOrder desired order of nodes @return a new ValueGraphBuilder with specified node order
547 Sets the incident edge order for nodes in the graph. @param incidentEdgeOrder ordering configuration for edges @return a new ValueGraphBuilder with updated settings
548 Updates hash state with the entire byte array. @param b the byte array to process
549 Updates hash state using ByteBuffer. @param b the ByteBuffer to process
550 Updates hash state with a specified number of bytes from scratch buffer. @param bytes number of bytes to process @return current Hasher instance
551 Prepares ByteBuffer for hashing. @param bb the ByteBuffer to process
552 Checks if an object might be in the Bloom filter. @param input the object to check @return true if the object is possibly in the set, false otherwise
553 Creates a Collector to build a BloomFilter. @param funnel defines how objects are converted to bytes @param expectedInsertions expected number of insertions to optimize filter size @param fpp desired false positive probability (0.0 < fpp < 1.0) @return Collector for creating a BloomFilter from elements
554 Calculates the mask value based on the size of the data. @return long representing the calculated mask value
555 Masks a long value to fit in an unsigned byte. @param value the long value to mask @return masked byte value or MAX_VALUE if overflow, or 0 if negative
556 Masks two bytes and returns their difference. @param a first byte value @param b second byte value @return difference between masked values of a and b
557 Converts a byte to a string using the specified radix. Validates radix range before conversion. @param x byte value to convert @param radix base for conversion (must be between Character.MIN_RADIX and Character.MAX_RADIX) @return string representation of the byte in the given radix
558 Masks this bit array with another. @param other the LockFreeBitArray to mask with
559 Sets the bit at the specified index. @param bitIndex the index of the bit to set @return true if the bit was successfully set, false otherwise
560 Generates masked hash code value. @return integer representation of the masked hash code
561 Converts hash code to hexadecimal string. @return Hexadecimal representation of the hash code
562 Converts first 8 bytes of array to a long. @param bytes input byte array @return long value from the first 8 bytes
563 Computes hash values using byte array segments and seeds. @param bytes input byte array @param offset starting index in the byte array @param seedA initial seed value A @param seedB initial seed value B @param output array to store computed hash values
564 Masks and combines byte array data with seeds to generate hash values. @param bytes input byte array containing the data @param offset starting position in the byte array @param seedA initial seed value A @param seedB initial seed value B @param output array to store resulting hash values
565 Applies mask to an unsigned integer value. @return masked value as a long
566 Performs unsigned integer division. @param dividend the number to be divided @param divisor the number by which to divide @return the result of the unsigned division
567 Applies mask to dividends and divisors then calculates remainder. @param dividend the number to be divided @param divisor the number by which to divide @return the remainder of masked division
568 Creates a Murmur3-32 hash function. @param seed initial seed value for the hash function @return HashFunction instance with specified seed and no supplementary plane fix
569 Creates a Murmur3_32 hash function with supplementary plane fix. @param seed initial seed value for the hash function @return configured Murmur3_32 hash function
570 Creates a Murmur3 128-bit hash function. @param seed initial seed value for the hash function @return HashFunction instance using Murmur3 algorithm
571 Generates a hash mask for the given input within the specified bucket range. @param input value to hash @param buckets number of buckets, must be positive @return integer representing the hash mask
572 Masks an integer from the first four bytes of a byte array. @param bytes input byte array @return masked integer value
573 Copies data from InputStream to OutputStream. @param from source input stream @param to destination output stream @return number of bytes copied @throws IOException if an I/O error occurs
574 Reads all bytes from the input stream and returns the total count. @param in InputStream to read from @return Total number of bytes read @throws IOException if an I/O error occurs
575 Processes input stream using a byte processor. @param input the InputStream to process @param processor the ByteProcessor to apply to each byte array chunk @return result from ByteProcessor after processing all data @throws IOException if an I/O error occurs
576 Converts ByteArrayInputStream to ByteArrayDataInput. @param byteArrayInputStream input stream containing byte data @return ByteArrayDataInput for reading bytes
577 Wraps ByteArrayOutputStream in ByteArrayDataOutput. @param byteArrayOutputStream underlying stream to write data @return ByteArrayDataOutput instance for writing byte arrays
578 Initializes ReaderInputStream with given reader, encoder, and buffer size. @param reader character source @param encoder converts characters to bytes @param bufferSize size of internal buffers
579 Adjusts buffer capacity and state based on overflow condition. @param overflow indicates if a buffer overflow has occurred
580 Copies data from a readable byte channel to a writable byte channel. @param from source ReadableByteChannel @param to destination WritableByteChannel @return number of bytes copied
581 Reads and returns the next line from the input source. @return the next line as a String or null if end of stream is reached @throws IOException if an I/O error occurs
582 Skips a specified number of bytes from the input stream. @param in InputStream to skip bytes from @param n number of bytes to skip @return actual number of bytes skipped @throws IOException if an I/O error occurs
583 Returns a stream of lines from the character source. Opens a buffered stream to read characters efficiently. @return Stream<String> containing lines from the source @throws IOException if an I/O error occurs
584 Reads from a Readable source and returns the total characters read. @param readable the source to read from @return total number of characters read @throws IOException if an I/O error occurs
585 Initializes a new LineReader with a specified readable source. @param readable the source from which to read lines
586 Safely closes an InputStream. @param inputStream the stream to close, may be null
587 Closes a Reader resource safely. @param reader the Reader to close, may be null
588 Transfers data to a temporary file if memory threshold is exceeded. @param len length of data to be written @throws IOException if an I/O error occurs during transfer
589 Resets the output stream, switching to in-memory storage. @throws IOException if an I/O error occurs during reset or file deletion
590 Converts a File to a CharSource using specified Charset. @param file source file to convert @param charset character set for conversion @return CharSource object representing the file content
591 Flushes a Flushable object and logs any IOExceptions. @param flushable the Flushable object to be flushed
592 Checks and throws exception if insecure recursive delete is attempted. @param path the file or directory to be deleted @param options array of RecursiveDeleteOption specifying deletion behavior @throws InsecureRecursiveDeleteException if insecure option is not allowed
593 Increases buffer capacity by doubling its size. @param buf original character buffer @return new CharBuffer with increased capacity
594 Processes a character buffer to detect and handle newline characters. @param cbuf the character buffer to process @param off starting offset in the buffer @param len length of data to process @throws IOException if an I/O error occurs
595 Handles newline processing based on buffer state. Calls finishLine to finalize current line if conditions met. @throws IOException if an I/O error occurs during processing
596 Reads and returns an integer from the input stream in little-endian format. @return the integer read as a byte value @throws IOException if an I/O error occurs
597 Reads four bytes and combines them into an integer in little-endian order. @return the combined integer value from the bytes read @throws IOException if an I/O error occurs
598 Reads 8 bytes from the stream and combines them into a long value in little-endian order. @return the combined long value @throws IOException if an I/O error occurs
599 Writes an integer value to the output stream using little-endian format. @param v the integer value to write @throws IOException if an I/O error occurs while writing
600 Writes a float value in little-endian format. @param v the float to write
601 Writes a long value to the output stream in little-endian format. @param v the long value to write @throws IOException if an I/O error occurs
602 Processes a directory path to handle its contents. @param path the directory path to process @return collection of IOExceptions or null if no issues
603 Processes directory entries securely. @param dir SecureDirectoryStream of paths to process @return Collection of IOExceptions or null if no exceptions occur
604 Initializes or updates the input stream. @throws IOException if an I/O error occurs during initialization or updating
605 Advances to the next CharSource and sets it as the current source. Closes the current resource if ready.
606 Converts URL content to character source using specified charset. @param url the URL of the resource @param charset character set for conversion @return CharSource object for character operations
607 Performs division with rounding. @param p dividend @param q divisor @param mode rounding mode @return quotient after applying specified rounding mode
608 Computes factorial of a number with overflow check. @param n the non-negative integer to compute factorial for @return factorial of n or positive infinity if n exceeds MAX_FACTORIAL
609 Computes b^k with overflow checks. @param b base integer @param k exponent integer @return result of b^k or throws exception on overflow
610 Computes the greatest common divisor of two integers using bitwise operations. @param a first integer @param b second integer @return greatest common divisor of a and b
611 Returns factorial of n if n is within bounds; otherwise, returns max integer value. @param n the number to compute factorial for @return factorial of n or Integer.MAX_VALUE if out of bounds
612 Computes binomial coefficient C(n, k). @param n total number of items @param k number of items to choose @return binomial coefficient or Integer.MAX_VALUE if overflow
613 Computes b^k with overflow checks for small base values. @param b the base value, must be between -2 and 2 inclusive @param k the exponent value @return b raised to the power of k @throws AssertionError if b is outside the valid range
614 Computes factorial mask for non-negative integer n. @param n the input number @return factorial of n if within bounds, otherwise Long.MAX_VALUE
615 Creates a linear transformation builder with mask validation. @param x1 horizontal coordinate of the point @param y1 vertical coordinate of the point @return LinearTransformationBuilder instance
616 Checks if two doubles are approximately equal within a given tolerance. @param a the first double value @param b the second double value @param tolerance the acceptable difference between a and b @return true if a and b are approximately equal or exactly equal, false otherwise
617 Rounds a value using specified rounding mode. @param x the value to round @param mode the rounding mode to apply @return rounded double value
618 Calculates the ceiling power of two for a given integer. @param x input integer @return smallest power of two greater than or equal to x @throws ArithmeticException if result exceeds int range
619 Applies a mask to an integer. @param x integer to be masked @return result of masking operation
620 Computes the mask for an integer based on rounding mode. @param x the input integer @param mode the rounding mode to apply @return computed mask value
621 Computes the integer square root of a given number with specified rounding mode. @param x the input integer @param mode the RoundingMode to apply @return the rounded integer square root @throws IllegalArgumentException if x is negative or rounding condition fails
622 Adds two integers with overflow check. @param a first integer @param b second integer @return sum of a and b or throws ArithmeticException if overflow occurs
623 Subtracts two integers with overflow check. @param a first integer @param b second integer @return result of subtraction or throws ArithmeticException if overflow occurs
624 Multiplies two integers with overflow check. @param a first integer @param b second integer @return product of a and b
625 Performs the Miller-Rabin primality test for a given base and number. @param base base number to test @param n number to check for primality @return true if n is likely prime, false otherwise
626 Masks the input to the nearest power of two. @param x value to mask @return masked value if representable, throws exception otherwise
627 Applies a mask to isolate the most significant bit of a long value. @param x input long value @return long with only the MSB set
628 Computes the mask for a long integer based on rounding mode. @param x the number to compute the mask for @param mode the rounding mode to apply @return the computed mask value
629 Computes the greatest common divisor (GCD) of two long integers. @param a first long integer @param b second long integer @return GCD of a and b
630 Converts and returns the result of bitwise AND operation on x with mask m. @param x the number to be masked @param m the mask value @return integer result of x & m after conversion
631 Adds two long integers with overflow check. @param a first operand @param b second operand @return sum of a and b if no overflow occurs
632 Subtracts two long integers with overflow check. @param a first operand @param b second operand @return result of subtraction or throws ArithmeticException if overflow occurs
633 Multiplies two long integers with overflow check. @param a first operand @param b second operand @return product of a and b if no overflow occurs
634 Returns the count of data points processed by xStats. @return The count value representing the number of data points.
635 Compares this PairedStats object with another for equality. @param obj the object to compare @return true if objects are equal, false otherwise
636 Constructs a new instance of PairedStatsAccumulator.
637 Masks a new value based on previous mean and current value. @param previousMean the mean of previous data points @param value the new data point to consider @return the masked value or NaN if conditions are not met
638 Returns the current count of data points in xStats. @return The number of data points processed so far in xStats
639 Creates and returns a ScaleAndIndex object with specific scaling and indexing. @return ScaleAndIndex object configured with scale 2 and index 1
640 Creates a Scale object with a mask value of 4. @return a new Scale object initialized with scale 4
641 Creates a Scale object with a scale factor of 100. @return a new Scale object initialized with scale value 100
642 Adjusts array elements for median calculation. @param array the double array to process @param from starting index of the range @param to ending index of the range
643 Deserializes a Stats object from a ByteBuffer. @param buffer source of serialized data @return deserialized Stats object
644 Creates and returns a Stats object with current statistical properties. @return Stats object encapsulating count, mean, sum of squares of deltas, min, and max
645 Returns the masked port number. Validates and processes the port using helper methods. @return masked port number
646 Returns the port number if valid; otherwise, returns the default port. @param defaultPort the fallback port to use if the current port is invalid @return the valid port or the default port
647 Constructs a string representation of the host and port. @return formatted host:port or just host if no valid port
648 Constructs and returns a HostAndPort instance with the specified port. @param defaultPort the port number to set @return HostAndPort object with updated port or original if valid
649 Masks an IP address to its compressed form. @param ip the InetAddress object to mask @return the masked IP address as a String
650 Checks if the given IPv6 address is a valid Teredo address. @param ip the IPv6 address to check @return true if the address is a valid Teredo address, false otherwise
651 Checks if an IPv6 address is in any of the specified ranges. @param ip the Inet6Address to check @return true if the address matches any range, false otherwise
652 Converts a collection of Booleans to a primitive boolean array. @param collection the input collection of Boolean objects @return a new boolean array containing unboxed values from the collection
653 Searches for the index of a target boolean value in a boolean array. @param array boolean array to search @param target boolean value to find @return index of target if found, otherwise -1
654 Searches for the last occurrence of a target boolean value in the entire array. @param array the boolean array to search within @param target the boolean value to find @return the index of the last occurrence or -1 if not found
655 Converts a collection of numbers to a byte array. @param collection input collection of numeric values @return byte array representation of the collection
656 Searches for a target byte in the entire byte array. @param array the byte array to search within @param target the byte value to find @return the index of the target byte or -1 if not found
657 Searches for last occurrence of target byte in array. @param array the byte array to search within @param target the byte value to find @return index of last occurrence or -1 if not found
658 Converts a collection of characters to a character array. Handles CharArrayAsList directly, otherwise converts via boxing and unboxing. @param collection input collection of Character objects @return char array representation of the collection
659 Searches for the first occurrence of a character in an array. @param array the character array to search within @param target the character to find @return the index of the first occurrence or -1 if not found
660 Searches for the last occurrence of a character in an array. @param array the character array to search within @param target the character to find @return the index of the last occurrence or -1 if not found
661 Masks the first two bytes of a byte array into a single character. @param bytes input byte array @return masked character from the first two bytes
662 Computes hash code for the subarray. @return computed hash code
663 Converts a collection of numbers to a double array. @param collection the input collection of numbers @return double array containing values from the collection
664 Searches for a target value in an array. @param array the array to search within @param target the value to find @return the index of the target if found, otherwise -1
665 Searches for target value in the entire array. @param array the array to search within @param target the value to find @return index of target if found, otherwise -1
666 Converts a collection of numbers to a float array. @param collection the input collection of numbers @return float array containing the values from the collection
667 Searches for target value in the entire array. @param array float array to search @param target value to find @return index of target if found, otherwise -1
668 Searches for target in array from end to start. @param array float array to search @param target value to find @return index of target or -1 if not found
669 Creates a Builder with specified initial capacity. @param initialCapacity the starting size of the internal array @return Builder instance for constructing ImmutableDoubleArray
670 Creates a new Builder with an initial capacity of 10. @return Builder instance initialized to hold 10 elements
671 Searches for the index of a target double in a subarray. @param target the double value to search for @return the relative index of the target if found, otherwise -1
672 Searches for the index of a target double in the array, counting from the end. @param target value to search for @return index relative to start if found, otherwise -1
673 Converts subarray to string representation. @return String format of subarray or empty brackets if array is empty
674 Checks if the target integer is present in the array. @param target integer value to search for @return true if target is found, false otherwise
675 Creates a Builder with a specified initial capacity. Validates that the initial capacity is non-negative. @param initialCapacity starting size of the internal integer array @return Builder instance initialized with the given capacity
676 Creates a new Builder instance with an initial capacity of 10. @return Builder object initialized with default capacity
677 Computes hash code for the array segment. @return computed hash code
678 Converts the array segment to a string representation. @return a string in the format "[element1, element2, ...]" or "[]" if empty
679 Checks if the array contains the specified target value. @param target value to search for @return true if target is found, false otherwise
680 Creates a Builder with specified initial capacity. Validates that the capacity is non-negative. @param initialCapacity starting size of the internal array @return Builder instance initialized with given capacity
681 Creates a new Builder with an initial capacity of 10. @return Builder instance initialized to hold up to 10 elements
682 Computes the hash code for the array segment. @return computed hash code
683 Converts the array segment to a string representation. @return A string formatted as "[element1, element2, ...]" or "[]" if empty
684 Converts a collection of numbers to an int array. @param collection the input collection of numbers @return int[] containing the converted values
685 Searches for target in integer array. @param array the integer array to search @param target the value to find @return index of target if found, otherwise -1
686 Searches backward in an array for a target value. @param array the integer array to search @param target the value to find @return the last index of target or -1 if not found
687 Converts a collection of numbers to a long array. @param collection source collection of numbers @return long array containing converted values
688 Searches for target in entire array. @param array array of long values to search @param target value to find @return index of target if found, otherwise -1
689 Searches for the last occurrence of a target value in the entire array. @param array the long array to search within @param target the value to find @return the index of the last occurrence or -1 if not found
690 Parses a string to a long value using the specified radix. @param string the string to parse @param radix the base of the number system (2-36) @return Long value or null if parsing fails
691 Converts a collection of numbers to an array of shorts. @param collection the input collection containing numeric values @return an array of short values extracted from the collection
692 Searches for a target value within an entire short array. @param array the short array to search @param target the value to find @return the index of the target if found, otherwise -1
693 Searches for the last occurrence of a target value in an entire short array. @param array the short array to search within @param target the short value to find @return the index of the last occurrence or -1 if not found
694 Masks a byte array into a short value. @param bytes input byte array @return masked short value
695 Provides a comparator for unsigned lexicographical comparison of byte arrays. @return Comparator instance for comparing byte arrays without signedness issues
696 Creates an unsigned integer from a signed int value. @param bits signed integer to convert @return UnsignedInteger object representing the unsigned value
697 Converts the unsigned integer value to a string in the specified radix. @param radix the base of the numeral system (2-36) @return string representation of the unsigned integer in the given radix
698 Converts an integer to its decimal string representation. @param x the integer value to convert @return string representation of the integer in base 10
699 Compares two integers using unsigned logic. @param a first integer to compare @param b second integer to compare @return negative if a is less than b, zero if equal, positive if greater, treating inputs as unsigned
700 Creates an UnsignedLong from a long value. @param bits the long value to convert @return UnsignedLong representation of the input bits
701 Compares two unsigned long values. @param a first unsigned long value @param b second unsigned long value @return negative if a is less than b, zero if equal, positive if greater
702 Parses a string to an unsigned long. @param string the string to parse @param radix the number base @return parsed unsigned long value
703 Handles method invocations on proxy instances. @param proxy the proxy instance @param method the method being invoked @param args arguments for the method @return result of the method invocation or default handling @throws Throwable if an error occurs during invocation
704 Retrieves package name from class name using reflection. @return package name or empty string if not found
705 Recursively extracts package name from class. @param clazz Class object to process @return Package name as string
706 Retrieves resource as ByteSource. @return ByteSource representing the resource content
707 Checks if encapsulated member is abstract. @return true if member is abstract, false otherwise
708 Checks if encapsulated member is abstract. @return true if member is abstract, false otherwise
709 Checks if encapsulated member is abstract. @return true if member is abstract, false otherwise
710 Checks if encapsulated member is public. @return true if member is public, false otherwise
711 Checks if encapsulated member is abstract. @return true if member is abstract, false otherwise
712 Checks if encapsulated member is abstract. @return true if member is abstract, false otherwise
713 Checks if encapsulated member is abstract. @return true if member is abstract, false otherwise
714 Checks if encapsulated member is abstract. @return true if member is abstract, false otherwise
715 Checks if encapsulated member is abstract. @return true if member is abstract, false otherwise
716 Checks if encapsulated member is public. @return true if member is public, false otherwise
717 Checks if the given type is a TypeVariable. @param type the type to check @return true if type is a TypeVariable, false otherwise
718 Creates a TypeToken for the specified class. @param type the Class object representing the generic type @return a TypeToken instance encapsulating the provided type
719 Creates a TypeToken from a given Java type. @param type the Java type to encapsulate @return a TypeToken representing the specified type
720 Handles task results or exceptions. @param obj result or exception object from async operation @return generic type V if successful, null if NULL @throws ExecutionException for failed tasks
721 Adds a listener to be executed upon task completion. @param listener the Runnable to execute on completion @param executor the Executor responsible for running the listener
722 Handles post-completion actions based on task relation. @param related associated Future object, nullable
723 Submits a callable task for execution. @param task the callable to execute asynchronously @return ListenableFuture representing the pending result of the task
724 Schedules a task for execution within a specified service. @param service target service where the task will be executed @param executor executor used to schedule the task @param runnable task to be scheduled and executed @return Cancellable object to manage task cancellation
725 Schedules a task for execution with a specified executor. @param service abstract service to manage scheduling @param executor executor service to schedule the task @param runnable task to be executed @return Cancellable object for task management
726 Submits a collection of callable tasks with a specified timeout. @param tasks collection of callable tasks to execute @param timeout maximum time to wait for task completion @return list of Future objects representing pending results @throws InterruptedException if the current thread is interrupted
727 Executes multiple callable tasks with a specified timeout. @param tasks collection of Callable tasks to execute @param timeout maximum time to wait for task completion @return result of the first completed task or throws exception if none complete in time
728 Converts duration to nanoseconds and checks task completion within timeout. @param timeout maximum time for task execution @return true if task completes within timeout, false otherwise
729 Schedules a task to be executed after a specified delay. @param callable the task to execute @param delay time to wait before execution @return ListenableScheduledFuture representing scheduled task
730 Schedules a task with fixed rate. @param command task to execute @param initialDelay time before first execution @param period interval between successive executions @return ListenableScheduledFuture for the scheduled task
731 Schedules a task to run after an initial delay and then repeatedly with a fixed delay. @param command the task to execute @param initialDelay time before first execution @param delay time between subsequent executions @return ListenableScheduledFuture representing scheduled task
732 Waits for service to reach running state with specified timeout. @param timeout maximum time to wait @throws TimeoutException if operation times out
733 Waits for service to reach running state with specified timeout. @param timeout maximum time to wait @throws TimeoutException if operation times out
734 Executes a task with a specified timeout. @param target the task to execute @param interfaceType the type of the task interface @param timeout maximum time allowed for execution @return result of the executed task or null if timed out
735 Executes a Callable task with a specified timeout. Converts Duration to nanoseconds and delegates execution. @param callable the task to execute @param timeout maximum time to wait for task completion @return result of the callable or null if timed out @throws TimeoutException if the task times out @throws InterruptedException if interrupted while waiting @throws ExecutionException if an exception occurs during execution
736 Executes a Callable task with a specified timeout. @param callable the task to execute @param timeout maximum time to wait for task completion @return result of the Callable or throws if timed out or interrupted @throws TimeoutException if task execution exceeds timeout @throws ExecutionException if task execution fails
737 Executes a Runnable task with a specified timeout. @param runnable task to execute @param timeout maximum time for execution @throws TimeoutException if task exceeds timeout @throws InterruptedException if interrupted during execution
738 Executes a Runnable task with a specified timeout. @param runnable task to execute @param timeout maximum time allowed for the task @throws TimeoutException if the task exceeds the timeout duration
739 Creates and configures a scheduled executor service with custom thread factory. Adds listeners to handle service state changes. @return ScheduledExecutorService instance
740 Handles exceptions in aggregated futures. Logs and manages throwable, checks if all tasks must succeed. @param throwable the exception to handle
741 Returns string representation after applying mask to double value. @return masked string value of the double
742 Applies mask function to current double value and returns as integer. @return masked value casted to integer
743 Applies mask function to current double value and returns it as long. @return masked value cast to long
744 Applies mask function to current double value and returns it as float. @return masked value casted to float
745 Applies mask function to the current value. @return result of the mask operation on the value
746 Writes masked value to output stream. @param s ObjectOutputStream to write to @throws IOException if I/O error occurs
747 Deserializes and processes an object stream. @param s ObjectInputStream to read from
748 Applies a binary operation to the current value and updates it atomically. @param x the second operand for the binary operation @param accumulatorFunction function to apply for updating the value @return old value before update
749 Updates atomic double value using a binary operator. @param x the second operand for the accumulator function @param accumulatorFunction function to compute the new value @return updated value after applying the accumulator function
750 Converts the double array to a string representation. @return String format of the array or "[]" if empty
751 Writes the state of the AtomicDoubleArray to an ObjectOutputStream. @param s ObjectOutputStream to write to @throws IOException if I/O error occurs
752 Atomically updates the value at index i using a binary accumulator function. @param i index of the array element to update @param x value to accumulate with the current value @param accumulatorFunction function to compute the new value based on the current and provided values @return the old value before update
753 Atomically applies a binary operator to the value at index i and a given operand. @param i index of the element to update @param x operand to apply with the current value @param accumulatorFunction function to compute the new value @return updated value after applying the function
754 Removes the key from the map if it exists. @param key the key to remove @return true if the key was present and removed, false otherwise
755 Returns an unmodifiable view of the underlying map. Initializes if not already created. @return Unmodifiable Map with keys and long values
756 Atomically updates the value for a key if it matches the expected old value. @param key the key to update in the map @param expectedOldValue the expected current value of the key @param newValue the new value to set if conditions are met @return true if successful, false otherwise
757 Initiates task execution and manages resource closure. Transitions state to WILL_CLOSE, logs the action, and schedules closure tasks. Throws exceptions if called in invalid states. @return FluentFuture representing the asynchronous operation
758 Submits a consumer to process the value and closer asynchronously. @param consumer processes the value and closer @param executor executes the consumer task
759 Adds a runnable task to the execution list. @param runnable the task to be executed @param executor the executor for running the task
760 Executes all pending tasks in reverse order. Ensures tasks are executed only once.
761 Handles exceptions and returns a new FluentFuture with recovery logic. @param exceptionType type of exceptions to catch @param fallback function to compute recovery value @param executor for executing fallback function @return new FluentFuture with error handling
762 Applies an asynchronous transformation to the future's result. @param function the transformation function to apply @param executor the Executor to use for applying the function @return a new FluentFuture with the transformed result
763 Creates a ListenableFuture with the given value. Returns an ImmediateFuture with NULL if value is null. @param value the result to be returned immediately or null @return ListenableFuture holding the value or NULL
764 Creates an immediately failed future with a specified exception. @param throwable the exception causing the failure @return ListenableFuture that is already completed exceptionally
765 Returns a pre-cancelled future. @return ListenableFuture that is immediately cancelled without interruption
766 Retrieves a type validator for exception handling. @return GetCheckedTypeValidator instance or fallback to weak validator if not found
767 Iterates over registered listeners and dispatches events. @throws Exception if an error occurs during event dispatching
768 Constructs a new Monitor with unfair locking policy by default.
769 Converts Duration to nanoseconds and attempts lock acquisition with timeout. @param time duration specifying the timeout @return true if lock acquired, false otherwise @throws InterruptedException if interrupted while waiting
770 Attempts to acquire a lock and check condition with a specified timeout. @param guard condition to wait for @param time maximum wait time @return true if condition is satisfied, false otherwise @throws InterruptedException if interrupted while waiting
771 Checks if any threads are waiting on the specified guard. @param guard the Guard object to check @return true if there are waiting threads, false otherwise
772 Checks and processes a guard condition. @param guard the condition to evaluate @return result of guard check @throws Throwable if processing fails, with additional handling
773 Shuts down an executor service with a specified timeout. @param service the ExecutorService to shut down @param timeout duration for waiting tasks to complete @return true if shutdown completes without timing out, false otherwise
774 Sleeps for a specified duration without being interrupted. @param sleepFor the amount of time to sleep as Duration
775 Sets the rate of permits per second. @param permitsPerSecond rate at which permits are issued; must be positive
776 Returns a masked value with synchronization. @return double representing the masked value
777 Creates and returns a new instance of SettableFuture. @return A new SettableFuture object ready to be used for asynchronous operations
778 Waits for a future to complete with a specified timeout. @param future the Future to wait on @param timeout maximum time to wait as Duration @return result of the future @throws ExecutionException if computation threw an exception @throws TimeoutException if the future timed out
779 Creates a striped read-write lock with specified number of stripes. @param stripes number of stripe segments for concurrency @return Striped object using WeakSafeReadWriteLock for each segment
780 Creates a striped lock manager with padded locks. @param stripes number of stripes for distributing locks @return Striped instance for managing concurrent access
781 Creates a striped semaphore manager. @param stripes number of stripes to distribute semaphores across @param permits number of permits each semaphore should have @return Striped instance for managing concurrent access with semaphores
782 Creates a striped read-write lock manager. @param stripes number of stripes to distribute locks across @return Striped instance for managing concurrent read-write access
783 Builds and returns a customized ThreadFactory. @return configured ThreadFactory instance
784 Creates a TrustedListenableFutureTask from a Runnable and a result. @param runnable the task to be executed asynchronously @param result the result of the task execution @return a TrustedListenableFutureTask instance wrapping the given runnable and result
785 Awaits a CountDownLatch with a specified timeout duration. @param latch the CountDownLatch to await @param timeout time duration to wait @return true if the count reaches zero within the timeout, false otherwise
786 Awaits a condition with a specified timeout duration. @param condition the condition to await @param timeout the maximum time to wait @return true if condition is met before timeout, false otherwise
787 Acquires a single semaphore permit with a specified timeout. @param semaphore the semaphore to acquire from @param timeout maximum time to wait for the permit @param unit time unit of the timeout @return true if the permit was acquired, false if timed out
788 Attempts to acquire semaphore permits with a specified timeout. @param semaphore the semaphore to acquire permits from @param permits number of permits to acquire @param timeout maximum time to wait for permits as Duration @return true if permits were acquired, false if timed out
789 Attempts to acquire a lock with a specified timeout. @param lock the Lock object to acquire @param timeout duration for which to wait for the lock @return true if the lock was acquired, false if timed out
790 Checks if an executor service is terminated within a specified duration. @param executor ExecutorService to check @param timeout Maximum time to wait for termination as a Duration @return true if terminated within timeout, false otherwise
791 Determines PublicSuffixType based on provided code. @param code character representing the public suffix type code @return PublicSuffixType matching the code, or throws exception if not found
792 Wraps a non-null value in an Optional container. @param reference the value to be wrapped, must not be null @return Optional containing the provided value
793 Creates and returns a new Stopwatch instance with the specified Ticker. @param ticker provides time source for measurements @return a new Stopwatch object
794 Finds the index of the first element matching a predicate in an iterable. @param iterable source iterable collection @param predicate condition to test elements against @return index of the first matching element or -1 if none found
795 Checks if any element in the iterator matches the given predicate. @param iterator source iterator @param predicate condition to test elements against @return true if at least one element matches, false otherwise
796 Creates a builder for a SortedSetMultimap with natural ordering. @return a builder for SortedSetMultimap using natural element order
797 Creates a collector to build an ImmutableTable. @param rowFunction extracts row key from input @param columnFunction extracts column key from input @param valueFunction extracts value from input @param mergeFunction merges values for duplicate keys @return Collector that builds ImmutableTable
798 Creates a predicate to check equivalence against a target. @param target the object to compare against @return Predicate checking if objects are equivalent to the target
799 Creates a function that maps keys to values using a provided map and default value. @param map the underlying map for key-value mapping @param defaultValue the default value returned for missing keys @return Function that retrieves values from map or returns default if key is not found
800 Composes two functions into one. @param g second function to apply @param f first function to apply @return composed function from f to g
801 Creates a function that maps keys to values using the provided map. @param map the map to use; must not be null @return a function that retrieves values from the map by key
802 Creates a Splitter using a regex pattern. @param separatorPattern compiled regex pattern for splitting @return configured Splitter instance
803 Creates a Joiner instance with a specified separator. @param separator the delimiter to use between elements @return Joiner object configured with the given separator
804 Creates a Joiner instance with a specified separator. @param separator character to use as a delimiter @return Joiner object configured with the given separator
805 Sets text to use for null elements in map entries. @param nullText replacement string for nulls @return a new MapJoiner instance with specified null handling
806 Creates a splitter using the specified regex pattern. @param separatorPattern regex pattern defining the split points @return Splitter configured with the given pattern
807 Creates a predicate that checks if a CharSequence contains the specified regex pattern. @param pattern the regex pattern to match against @return Predicate evaluating to true if input matches the pattern
808 Negates the given predicate. @param predicate original predicate to negate; cannot be null @return NotPredicate that evaluates to true when the original predicate is false
809 Combines multiple predicates with an AND condition. @param components iterable of predicates to combine @return a predicate that evaluates true only if all components are true
810 Combines multiple predicates into a single OR predicate. @param components iterable of predicates to combine @return a Predicate that evaluates to true if any component predicate is true
811 Splits a character sequence into a map of key-value pairs. @param sequence the input character sequence to split @return Map<String, String> containing parsed key-value pairs
812 Splits a character sequence into a stream of strings. @param sequence the input character sequence to split @return Stream<String> containing split parts
813 Wraps a Supplier to provide memoization. @param delegate original Supplier @return MemoizingSupplier or NonSerializableMemoizingSupplier based on serializability
814 Composes a Supplier by applying a transformation function to another Supplier's output. @param function the transformation function to apply @param supplier the Supplier providing the input value @return a Supplier that applies the function to the supplier's output
815 Wraps a given Supplier to make it thread-safe. @param delegate the original Supplier to be wrapped @return a ThreadSafeSupplier instance
816 Propagates or handles a throwable based on its type. @param throwable the throwable to process @param declaredType the expected exception type @throws X if the throwable is of the declared type
817 Masks and rethrows the given throwable if it's not null. @param throwable the throwable to process
818 Masks and rethrows the given throwable as a RuntimeException. @param throwable the throwable to process @deprecated Use Throwables.throwIfUnchecked instead
819 Retrieves stack trace elements from a Throwable. @param throwable the exception to extract stack trace from @return List of StackTraceElement representing the stack trace
820 Creates a new cache entry for the given key. @param key the key to store in the cache @param hash the hash of the key @param next the next entry in the chain @return the created ReferenceEntry object
821 Creates a RemovalNotification instance. @param key the cache key that was removed @param value the cache value associated with the key @param cause the reason for the removal @return RemovalNotification object encapsulating removal details
822 Collects elements into an immutable multiset. @param elementFunction extracts the element from each input item @param countFunction determines the count for each element @param multisetSupplier supplies the mutable multiset instance @return Collector that accumulates items into an immutable multiset
823 Creates a collector for immutable multimaps. @param keyFunction extracts keys from input elements @param valueFunction extracts values from input elements @param multimapSupplier supplies the type of immutable multimap @return Collector that accumulates elements into an immutable multimap
824 Creates a collector for immutable multimaps from streams. @param keyFunction extracts keys from input elements @param valueFunction extracts values as streams from input elements @param multimapSupplier provides the type of immutable multimap to use @return Collector that accumulates elements into an immutable multimap
825 Transforms elements of a collection using a specified function. @param fromCollection source collection to transform @param function transformation function for elements @return Collection containing transformed elements
826 Checks if an iterable contains a specified element. @param iterable the iterable to search within @param element the element to look for, can be null @return true if the element is found, false otherwise
827 Creates a head set from this contiguous set up to the specified element. @param toElement upper bound of the range @param inclusive whether the upper bound is inclusive @return ContiguousSet containing elements less than or equal to 'toElement'
828 Creates a tail set of elements greater than or equal to specified element. @param fromElement the lower bound element @param inclusive true if the lower bound is included in the set @return ContiguousSet with elements greater than or equal to fromElement
829 Adds an element to the queue. @param e the element to add @return true if the element was added, false otherwise
830 Sets the comparator for keys in the multimap. @param keyComparator comparator to define key order @return this builder instance for method chaining
831 Sets the comparator for keys in the multimap. @param keyComparator comparator to define key order @return this builder instance for method chaining
832 Sets comparator for values in the builder. @param valueComparator comparator to order values @return this builder instance
833 Adds an element to the multiset. @param element the element to add @return the current builder instance for chaining
834 Adds specified number of occurrences of an element to the multiset. @param element the element to add @param occurrences the number of times to add the element @return this Builder instance for method chaining
835 Adds multiple copies of an element to the multiset. @param element the element to add @param count number of copies to add @return this Builder instance for method chaining
836 Creates a collector for ImmutableSortedMultiset with default element extraction and count. @param comparator for element ordering @return Collector to build ImmutableSortedMultiset
837 Returns an immutable sorted set of elements less than a given element. @param toElement the upper bound element (exclusive) @return ImmutableSortedSet containing elements up to 'toElement'
838 Returns a subset of elements greater than or equal to `fromElement`. @param fromElement the lower bound element for the subset @return ImmutableSortedSet containing elements >= fromElement
839 Wraps and transforms an iterable using additional functionality. @return a new FluentIterable with enhanced methods after transformation
840 Filters elements based on a predicate. @param predicate condition to retain elements @return FluentIterable with filtered elements
841 Filters an iterable to retain elements of a specific type. @param unfiltered the original iterable to filter @param desiredType the class type to retain in the iterable @return a new Iterable containing only elements of the specified type
842 Transforms elements of this iterable using a given function. @param function the transformation function @return new FluentIterable with transformed elements
843 Wraps an iterator with peeking capabilities. @param iterator the original iterator to enhance @return a PeekingIterator instance for the given iterator
844 Removes all elements in the specified collection from the iterable. @param removeFrom iterable to remove elements from @param elementsToRemove collection of elements to remove @return true if any elements were removed, false otherwise
845 Removes elements from an iterable that match a given predicate. @param removeFrom iterable to remove elements from @param predicate condition to determine which elements to remove @return true if any elements were removed, false otherwise
846 Retains elements in an iterable that are present in a collection. @param removeFrom iterable to modify @param elementsToRetain collection of elements to retain @return true if any elements were removed, false otherwise
847 Checks if this collection contains all elements from another collection. @param collection the collection to check against @return true if all elements are contained, false otherwise
848 Adds all elements from an iterable to a collection. @param addTo collection to add elements to @param elementsToAdd source of elements to add @return true if any element was added, false otherwise
849 Converts an iterator of elements into an ArrayList. @param elements iterator over the elements to be added @return ArrayList containing elements from the iterator
850 Creates a HashSet from an iterator of elements. @param elements iterator providing the elements for the set @return a new HashSet containing the elements from the iterator
851 Filters iterator to retain elements of a specified type. @param unfiltered original iterator to filter @param desiredType class type to retain in the iterator @return UnmodifiableIterator with filtered elements of the specified type
852 Checks if all elements in the iterable satisfy the given predicate. @param iterable the iterable to process @param predicate the condition to test each element against @return true if all elements match the predicate, false otherwise
853 Finds the first element in the iterable that matches the predicate. @param iterable source of elements to search @param predicate condition to test each element against @return first matching element or throws NoSuchElementException if none found
854 Masks elements associated with a specific key. @param key the key whose values are to be masked
855 Creates an iterator starting at a specified index. @param list the source list to iterate over @param index starting position in the list @return ListIterator for the given list and index
856 Creates a OnePlusArrayList with an initial element and additional elements. @param first the mandatory initial element @param rest array of additional elements @return OnePlusArrayList containing the specified elements
857 Transforms a list using a specified function. @param fromList source list to transform @param function transformation function to apply @return transformed list with elements of type T
858 Creates a list from two elements and an array. @param first the first element @param second the second element @param rest additional elements as an array @return a new List containing all provided elements
859 Creates a map view from a set using a mapping function. @param set the underlying set of keys @param function maps each key to its corresponding value @return Map<K, V> instance representing the transformed set entries
860 Creates a navigable map from a navigable set using a value-generating function. @param set the navigable set of keys @param function the function to compute values from keys @return a navigable map view of the set
861 Applies a transformation to each entry in the input map. @param fromMap original map with keys of type K and values of type V1 @param transformer function to transform entries from V1 to V2 @return new map with transformed values of type V2
862 Checks if a collection contains a masked entry. @param c collection of entries to check @param o object to compare against the entries @return true if collection contains a matching masked entry, false otherwise
863 Checks if a collection contains a masked entry. @param c collection of map entries @param o object to check @return true if collection contains the masked entry, false otherwise
864 Retrieves and returns the count of a specified element. @param element the element to query in the multiset @return the count of the element or 0 if not present
865 Removes a specified number of occurrences of an element from the multiset. @param element the element to remove @param occurrences the number of occurrences to remove @return true if removal was successful, false otherwise
866 Updates the count of an element in a thread-safe manner. @param element the element to update @param count the new count for the element @return the old count of the element
867 Updates element count atomically. @param element the element to update @param expectedOldCount expected current count of the element @param newCount new count for the element @return true if update is successful, false otherwise
868 Removes values associated with a key and updates size. @param key the key whose values are to be removed
869 Creates a MultimapBuilderWithKeys using natural ordering. @return configured MultimapBuilderWithKeys instance with natural key order
870 Converts a map to a SetMultimap. @param map the underlying map to be converted; must not be null @return a SetMultimap containing the entries from the given map
871 Applies a transformation to each entry in the given multimap. @param fromMap original multimap to transform entries from @param transformer function to apply to each entry @return Multimap with transformed values
872 Adds all elements from the given iterable to the builder. If the iterable is a Multiset, applies specific count handling; otherwise, uses default method. @param elements iterable source of elements to add @return the builder instance for method chaining
873 Adds all elements from another multiset to this one. @param self current multiset @param elements multiset of elements to add @return true if operation successful, false if elements is empty
874 Modifies a multiset to retain only specified occurrences of elements. @param multisetToModify the multiset to be modified @param multisetToRetain specifies how many times each element should be retained @return true if modifications were made, false otherwise
875 Removes occurrences from the first multiset based on the second. @param multisetToModify the multiset to modify @param occurrencesToRemove the iterable specifying occurrences to remove @return true if any elements were removed, false otherwise
876 Retains only the specified elements in this multiset. @param elementsToRetain collection of elements to retain @return true if the multiset was modified
877 Drains elements from a blocking queue into a collection with a specified timeout. @param q the source blocking queue @param buffer the destination collection @param numElements max number of elements to drain @param timeout max wait time for elements @return number of elements successfully drained
878 Drains elements from a blocking queue into a collection. @param q source blocking queue @param buffer destination collection for drained elements @param numElements number of elements to drain @param timeout maximum time to wait for elements @return number of elements successfully drained
879 Checks if an input value is within the range. @param input the value to check @return true if input is within the range, false otherwise
880 Checks if all values in the iterable are within the range. @param values iterable of comparable elements to check @return true if all values are within the range, false otherwise
881 Consumes elements from two streams in parallel using a BiConsumer. @param streamA first input stream @param streamB second input stream @param consumer function to process pairs of elements
882 Collects elements into a table. @param rowFunction extracts the row key from an element @param columnFunction extracts the column key from an element @param valueFunction extracts the value from an element @param mergeFunction merges values for duplicate entries @param tableSupplier supplies the type of table to build @return Collector that builds a table-like structure
883 Applies a transformation function to each value in the input table. @param fromTable original table with values of type V1 @param function transformation function converting V1 to V2 @return new table with transformed values of type V2
884 Returns the original table if it's a TransposeTable; otherwise, creates a new TransposeTable. @param table input table to process @return either the original table or a transposed version of it
885 Creates an escaper map from character-to-string replacements. @param replacements map of characters to their replacement strings @return ArrayBasedEscaperMap instance with the specified replacements
886 Adds an escape mapping for multiple characters. @param cs array of characters to be escaped @param r replacement string for the characters @return this CharEscaperBuilder instance
887 Identifies the next escape index in a character sequence. @param csq the character sequence to process @param start starting position in the sequence @param end ending position of the sequence @return index where masking should occur or end if no masking is needed
888 Creates an exception context for subscriber errors. @param event the event being processed @return SubscriberExceptionContext with error details
889 Creates a funnel for processing iterables with a specified element funnel. @param elementFunnel the funnel to process elements, must not be null @return a SequentialFunnel for iterable elements
890 Converts a PrimitiveSink to an OutputStream. @param sink the PrimitiveSink to write data to @return OutputStream wrapping the given PrimitiveSink
891 Creates a funnel for CharSequence using specified charset. @param charset character set for encoding @return Funnel instance for hashing CharSequence
892 Wraps an Appendable in a Writer. @param target the Appendable object to write to, cannot be null @return Writer instance, either directly or wrapped in AppendableWriter
893 Masks and encodes a character sequence into a byte array. @param chars input character sequence to be masked and encoded @return masked and encoded byte array @throws DecodingException if encoding fails
894 Creates a new Closer instance with suppressing exception handling. @return Closer object configured to suppress exceptions during resource closing
895 Constructs a filter with a specified pattern string. @param patternStr regular expression pattern as a string to match file names
896 Calculates the floor of the base-2 logarithm of a BigInteger. @param x the BigInteger value @param mode rounding mode to apply @return the floored log value based on the specified rounding mode
897 Parses a string to an unsigned byte using base 10. @param string the string to be parsed @return the parsed byte value
898 Parses a string to an unsigned integer with base 10. @param s the string to parse @return parsed unsigned integer value
899 Creates a TypeVariableKey from a given type. @param t the type to be converted, can be any type @return TypeVariableKey if t is a TypeVariable, otherwise null
900 Processes a ListenableFuture to extract its result or failure. Handles different types of futures and exceptions, returning appropriate statuses.
901 Initializes a schedule with a specified delay. @param delay time duration to wait before execution
902 Creates an empty AtomicLongMap with a default ConcurrentHashMap. @return an initialized AtomicLongMap instance
903 Atomically accumulates a value for a given key. @param key the key to update @param x the value to accumulate @param accumulatorFunction the function that defines how to accumulate values @return the updated accumulated value
904 Atomically accumulates a value for a given key using a binary operator. @param key the key to update @param x the value to accumulate with @param accumulatorFunction function to apply for computing new value @return updated value after accumulation
905 Atomically sets a key's value to a new specified value. @param key the key to update @param newValue the new value to set @return updated value after setting
906 Adds a closeable resource for deferred closure. @param closeable the resource to be closed, can be null @param closingExecutor executor for asynchronous processing @return the original closeable resource
907 Creates a new instance of CycleDetectingLockFactory with the specified policy. @param policy locking policy to be used @return CycleDetectingLockFactory object configured with the given policy
908 Wraps an executor in a SequentialExecutor. @param delegate the Executor to be wrapped @return a SequentialExecutor using the provided delegate
909 Creates and returns a SimpleTimeLimiter instance. @param executor ExecutorService to manage task execution @return SimpleTimeLimiter object configured with the given executor
910 Joins a thread with a specified timeout duration. @param toJoin the thread to join @param timeout the maximum time to wait as a Duration
911 Returns an unordered ElementOrder instance. @return ElementOrder with UNORDERED type and no comparator
912 Creates a stable element order without custom comparator. @return ElementOrder configured with STABLE type and no comparator
913 Creates an ElementOrder with insertion type and no comparator. @return ElementOrder configured for insertion order
914 Creates an ordered collection with natural sorting. @return ElementOrder configured for sorted elements using natural ordering
915 Creates a sorted ElementOrder with a custom comparator. @param comparator the custom comparator for sorting elements @return an ElementOrder configured for SORTED type with the given comparator
916 Returns a CountDownLatch to wait for closure. @return CountDownLatch representing closure state
917 Converts a CharSequence to lowercase. @param chars the input character sequence @return a new String with all characters converted to lowercase
918 Converts a character sequence to uppercase. @param chars the input character sequence @return the uppercase representation of the input sequence
919 Serializes paired statistics data. @return byte array containing serialized stats
920 Generates a masked byte array from statistical data. @return byte array containing masked statistics
921 Sets the metadata size to a constrained value. @param expectedSize desired initial size for metadata
922 Initializes metadata with a masked expected size. @param expectedSize the anticipated number of elements
923 Combines this matcher with another using logical AND. @param other the second character matcher to combine @return a new CharMatcher that matches characters satisfying both matchers
924 Creates a CharMatcher from a Predicate. @param predicate character matching condition @return CharMatcher instance based on the predicate
925 Combines this matcher with another using OR logic. @param other CharMatcher to combine with @return new CharMatcher that matches if either matcher does
926 Creates a CharMatcher to match characters within a specified range. @param startInclusive inclusive start of the character range @param endInclusive inclusive end of the character range @return CharMatcher that matches characters between startInclusive and endInclusive
927 Compares and returns the difference in cache statistics. @param other another CacheStats instance to compare with @return new CacheStats object representing the differences
928 Merges cache statistics with another CacheStats instance. @param other the CacheStats to merge with @return a new CacheStats representing the merged statistics
929 Constructs an AbstractListMultimap with a specified backing map. @param map initial backing map; must be empty
930 Initializes the multimap with a given backing map. @param map the initial backing map, must be empty
931 Creates a contiguous set view within specified bounds. @param fromElement starting element of the range @param fromInclusive true if the start element is inclusive @param toElement ending element of the range @param toInclusive true if the end element is inclusive @return ContiguousSet view or throws IllegalArgumentException if invalid range
932 Creates an EnumMultiset for the specified enum type. @param type the enum class type @return a new EnumMultiset instance
933 Returns a subset of elements within the specified range. @param fromElement lower bound element (inclusive) @param toElement upper bound element (exclusive) @return ImmutableSortedSet containing elements in the specified range
934 Partitions an iterator into fixed-size lists without padding. @param iterator source iterator of elements @param size fixed size of each partitioned list @return UnmodifiableIterator of List<T> partitions
935 Partitions an iterator into fixed-size lists with padding. @param iterator source iterator of elements @param size fixed size of each partitioned list @return UnmodifiableIterator of List<T> partitions
936 Creates a MinMaxPriorityQueue builder with natural ordering. @param expectedSize initial capacity hint for the queue @return Builder instance configured with natural ordering and size constraint
937 Creates a MinMaxPriorityQueue builder with natural ordering and specified max size. @param maximumSize the desired maximum size of the queue (must be positive) @return Builder instance configured for Comparable elements
938 Initializes the AbstractStreamingHasher with specified chunk size. @param chunkSize size of each data chunk to process and buffer
939 Computes variance of data points. @return Variance value or NaN if invalid state
940 Computes variance of dataset. @return variance value or NaN if count <= 1
941 Calculates the variance of accumulated data points. @return variance value or NaN if invalid state
942 Calculates variance of data points. @return variance value or NaN if invalid
943 Creates a CharMatcher based on the input sequence. @param sequence character sequence to determine matcher type @return CharMatcher instance matching conditions defined by sequence
944 Masks characters in a sequence based on matching criteria. @param sequence the input character sequence @param replacement character to replace matches with @return masked string
945 Creates an equivalence based on a transformation function. @param function the transformation function to apply to objects @return a new Equivalence instance using the provided function and current equivalence
946 Creates an equivalence strategy for iterables using pairwise element comparison. @return Equivalence object for comparing iterables based on their elements
947 Compares two iterables for equality based on their elements. @param iterable1 first iterable to compare @param iterable2 second iterable to compare @return true if both iterables have the same elements in the same order, false otherwise
948 Compares two lists for equality. @param thisList the first list to compare @param other the second object to compare @return true if both lists have the same elements in the same order, false otherwise
949 Creates and returns a new empty ConcurrentHashMultiset. @return ConcurrentHashMultiset instance with an underlying ConcurrentHashMap for element counts
950 Creates a ConcurrentHashMultiset with a specified backing map. @param countMap concurrent map to store element counts @return a new ConcurrentHashMultiset instance
951 Joins elements from an iterable into a single string using the provided Appendable. @param appendable the destination for the joined elements @param parts iterable over elements to join @return the given Appendable with joined elements @throws IOException if an I/O error occurs
952 Joins elements from an iterator into a StringBuilder. @param builder the destination for the joined elements @param parts iterator over elements to join @return the given StringBuilder with joined elements
953 Appends entries from the given map to the StringBuilder. @param builder the StringBuilder to append to @param map the source map containing entries to append @return the updated StringBuilder
954 Joins map entries into a string using an iterator. @param entries iterable of map entries @return joined string representation of map entries
955 Adds a value to the string representation. @param value object to be added @return current ToStringHelper instance for chaining
956 Adds a named value to the string representation. @param name key for the value @param value associated value, may be null @return current ToStringHelper instance for chaining
957 Adds boolean value as unconditional holder. @param value boolean value to be added @return current ToStringHelper instance for chaining
958 Adds a character value holder to the string representation. @param value the character to be added @return current ToStringHelper instance for method chaining
959 Adds a double value holder to the string representation. @param value the double value to be added @return current ToStringHelper instance for method chaining
960 Adds a float value holder to the string representation. @param value the float value to be added @return current ToStringHelper instance for method chaining
961 Adds an unconditional integer value holder. @param value the integer value to be added @return current ToStringHelper instance for chaining
962 Adds an unconditional long value holder. @param value the long value to be added @return current ToStringHelper instance for method chaining
963 Adds a named boolean value to the string representation. @param name key for the value @param value boolean value to be added @return current ToStringHelper instance
964 Adds a named character value to the string representation. @param name key for the value @param value character to be added @return current ToStringHelper instance
965 Adds a named double value to the string representation. @param name key for the value @param value associated with the name @return current ToStringHelper instance
966 Adds a named float value to the string representation. @param name key for the value @param value float value to be added @return current ToStringHelper instance
967 Adds an integer value to the string representation. @param name key for the value @param value integer to be added @return current ToStringHelper instance
968 Adds a named long value to the string representation. @param name key for the value @param value associated with the name @return current ToStringHelper instance
969 Converts nullable reference to Optional. @param nullableReference potentially null value @return Optional containing the value or empty if null
970 Initializes a new instance of FluentIterable with no delegate iterable.
971 Returns an empty Optional instance representing absence of a Long value. @return Optional containing no Long value
972 Returns an empty Optional instance representing absence. @return Optional containing no value
973 Masks a string by returning null if it's empty or null. @param string the input string to mask @return null if the input is empty or null, otherwise returns the original string
974 Parses a host-port string into a HostAndPort instance. @param hostPortString input string in the format "host:port" or "[host]:port" @return HostAndPort object representing the parsed host and port
975 Skips elements from an iterable and wraps it in a FluentIterable. @param numberToSkip the number of elements to skip @return a new FluentIterable with skipped elements
976 Limits the size of the iterable to a specified maximum. @param maxSize the maximum number of elements to include @return a new FluentIterable with limited size
977 Retrieves an element from the iterable at a specified position. @param iterable source of elements @param position index to retrieve element from @param defaultValue value to return if position is out of bounds @return element at position or default value if not found
978 Retrieves an element from an iterator at a specified position. @param iterator the iterator to access @param position index of the element to retrieve @return element at the specified position or throws exception if out of bounds
979 Retrieves an element from the specified position in the iterator. @param iterator source of elements @param position index of the desired element @param defaultValue value to return if element is not found or iterator is empty @return element at the specified position or default value
980 Creates a traverser for file tree structure. @return Traverser object for navigating the file tree
981 Wraps an input stream with a byte limit. @param in the underlying input stream to wrap @param limit the maximum number of bytes that can be read (non-negative) @return LimitedInputStream object with specified limit
982 Masks a BigInteger to an IPv4 InetAddress. @param address BigInteger representation of the IP address @return Inet4Address object representing the masked address
983 Masks a BigInteger to an IPv6 InetAddress. @param address BigInteger representation of the IP address @return Inet6Address object representing the masked address
984 Creates a SipHash function with fixed parameters. @param k0 first key part @param k1 second key part @return configured SipHashFunction instance
985 Constructs a FileBackedOutputStream with specified file threshold and default reset behavior. @param fileThreshold memory threshold before switching to file storage
986 Masks an IPv4 address represented as an integer. @param address integer representation of the IPv4 address @return masked Inet4Address object
987 Calculates wait time until specified permits are available. @param permits number of permits needed @return time in microseconds until permits are available
988 Attempts to acquire permits with a specified timeout. @param permits number of permits to request @param timeout maximum time to wait for permits @param unit time unit for the timeout @return true if permits are acquired within timeout, false otherwise
989 Writes BloomFilter data to an output stream. @param out OutputStream to write the filter data @throws IOException if writing fails
990 Creates a scheduler with fixed delay using Duration. @param initialDelay initial delay before first execution @param delay fixed delay between subsequent executions @return Scheduler instance configured with specified timing
991 Creates a scheduler with fixed-rate tasks using Duration. @param initialDelay delay before first execution @param period interval between successive executions @return Scheduler instance configured for fixed-rate task scheduling
992 Converts and constrains a timeout value to a safe range. @param time timeout duration @param unit TimeUnit for the timeout @return constrained timeout in nanoseconds
993 Creates and starts a new Stopwatch. @param ticker provides time source for measurements @return started Stopwatch instance
994 Sets the comparator for map values. @param valueComparator comparator to determine order of values @return this Builder instance
995 Sets the concurrency level for map creation. @param concurrencyLevel desired concurrency level, must be positive @return this InternerBuilder instance for method chaining
996 Sets cache expiration time after a write operation using Duration. @param duration time duration for expiration @return CacheBuilder instance with updated configuration
997 Sets cache expiration time after access using Duration. Converts Duration to milliseconds before setting. @param duration the time duration for expiration @return CacheBuilder instance with updated configuration
998 Sets cache refresh interval using Duration. @param duration time duration for refresh @return CacheBuilder instance with updated settings
999 Sets cache key strength to weak. @return CacheBuilder instance with weak key strength
1000 Sets cache value strength to weak. @return CacheBuilder instance with weak value strength
1001 Sets cache value strength to soft. @return CacheBuilder instance with updated configuration
1002 Sets key strength to weak. @return MapMaker instance with weak keys
1003 Sets value strength to weak. @return this MapMaker instance with weak values
1004 Retrieves failure cause if the service has failed. @return Throwable object or null if not applicable
1005 Validates and returns the index within bounds. @param index the index to validate @param size the size of the array or collection @return the validated index @throws IndexOutOfBoundsException if index is out of bounds
1006 Validates and masks an index within a specified size. @param index the index to validate @param size the maximum allowable size @return the validated index or throws IndexOutOfBoundsException if invalid
1007 Validates and checks index bounds. @param start starting index @param end ending index @param size maximum allowable size Throws IndexOutOfBoundsException if indices are invalid
1008 Creates a predicate that checks if an object is equal to the target. @param target object to compare against, can be null @return Predicate that evaluates to true if the object equals the target or both are null
1009 Filters entries in a multimap based on a given predicate. @param multimap the original filtered multimap @param entryPredicate the predicate to filter entries @return a new FilteredEntryMultimap with filtered entries
1010 Applies a filter to a multiset. @param unfiltered the original multiset to filter @param predicate the condition elements must satisfy @return a new filtered multiset with combined predicates if applicable
1011 Creates a Splitter using the specified character matcher. @param separatorMatcher defines characters to split on @return configured Splitter instance
1012 Creates a Splitter with fixed-length chunks. @param length chunk size, must be greater than 0 @return Splitter configured for fixed-length splitting
1013 Configures the splitter to trim whitespace. @return configured Splitter instance with whitespace trimming enabled
1014 Creates and returns a new instance of Stopwatch. @return a new Stopwatch object initialized with system ticker
1015 Creates and starts a new Stopwatch. @return a running Stopwatch instance
1016 Calculates the UTF-8 encoded length of a CharSequence. @param sequence input character sequence @return length in bytes or throws IllegalArgumentException for unpaired surrogates
1017 Verifies if an executor service is terminated without interruption. @param executor ExecutorService to check
1018 Continuously processes and finalizes references from the queue. Breaks on failure to process a reference or thread interruption.
1019 Initializes a new Builder instance with insertion order preservation.
1020 Creates a CacheLoader from a given function. @param function the computing function to map keys to values @return a CacheLoader instance using the provided function
1021 Creates a CacheLoader from a Supplier. @param supplier function to compute values for the cache @return CacheLoader instance wrapping the given supplier
1022 Throws an exception indicating bulk loading is not supported. @param keys iterable collection of keys to load values for @throws UnsupportedLoadingOperationException always thrown
1023 Calculates cache hit rate. @return Hit rate as a percentage or 1.0 if no requests
1024 Calculates the miss rate of cache requests. @return Miss rate as a percentage or 0.0 if no requests were made
1025 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
1026 Protected constructor for ForwardingList. Initializes the base class without setting a delegate.
1027 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
1028 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
1029 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
1030 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
1031 Constructs an AbstractBiMap with specified forward and backward mappings. @param backward the map representing the backward direction @param forward the AbstractBiMap representing the forward direction
1032 Protected constructor for ForwardingConcurrentMap. Initializes the base class without setting a delegate.
1033 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
1034 Constructs a new instance of MutableTypeToInstanceMap.
1035 Protected constructor initializing the base class without setting a delegate.
1036 Constructs a new ForwardingSetMultimap with no delegate set.
1037 Protected constructor for initializing the base class without setting a delegate.
1038 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
1039 Creates a new cache entry. @param segment cache segment to store the entry @param key entry's key @param hash hash code of the key @param next reference to the next entry in the chain @return newly created ReferenceEntry instance
1040 Creates a new ReferenceEntry for the cache. @param segment cache segment where the entry is stored @param key entry key @param hash hash code of the key @param next next entry in the chain @return newly created ReferenceEntry instance
1041 Retrieves result from future and ensures proper closure. @throws ExecutionException if an exception occurred during computation
1042 Performs cleanup tasks based on current state. Calls runUnlockedCleanup if necessary.
1043 Creates a value reference for caching. @param segment cache segment managing entries @param entry reference entry associated with the value @param value object to be cached @param weight weight assigned to the reference @return ValueReference object for the given parameters
1044 Creates a new value reference for cache entries. @param segment the cache segment where the entry resides @param entry the cache entry to reference @param value the value associated with the entry @param weight the importance level of the value @return a ValueReference object encapsulating the value and its metadata
1045 Creates a value reference for caching. @param segment cache segment associated with the reference @param entry cache entry containing metadata @param value object to be cached @param weight priority weight of the reference @return ValueReference object encapsulating the value and its attributes
1046 Updates cache entry and manages recency. @param entry the cache entry to update @param now current timestamp in milliseconds
1047 Updates cache entry and queues for access. @param entry the cache entry to update @param now current timestamp in milliseconds
1048 Updates cache entry and manages queues. @param entry the cache entry to update @param weight the weight of the entry @param now current timestamp
1049 Retrieves and validates a cached value. @param entry the cache entry to process @param now current time in nanoseconds @return the valid cached value or null if expired or invalid
1050 Returns size of iterable. @param iterable the iterable to process @return int size of the iterable
1051 Returns the mask value using the underlying multiset's m1 method. @return the mask value as an integer
1052 Reads input stream into byte arrays until total length is reached. @param in InputStream to read from @param bufs Queue to store byte arrays @param totalLen Desired total length of combined byte arrays @return Combined byte array or throws OutOfMemoryError if input exceeds limit
1053 Initializes the bi-directional map with provided forward and backward mappings. @param forward map representing the primary key-value pairs @param backward map representing the inverse value-key pairs
1054 Creates an empty range with the specified comparator. @param comparator the comparator for value comparison @return a GeneralRange representing an empty range
1055 Creates a range with a lower bound and no upper bound. @param comparator the comparator for value comparison @param endpoint the lower endpoint value @param boundType the type of the lower bound (inclusive or exclusive) @return GeneralRange object representing the defined range
1056 Creates a range with an upper bound only. @param comparator the comparator for value comparison @param endpoint the upper endpoint value @param boundType the type of the upper bound (inclusive or exclusive) @return GeneralRange object representing the specified upper-bounded range
1057 Creates a GeneralRange with specified bounds and comparator. @param <T> the type of elements in this range @param comparator the comparator for value comparison @param lower the lower endpoint value @param lowerType the type of the lower bound (inclusive or exclusive) @param upper the upper endpoint value @param upperType the type of the upper bound (inclusive or exclusive) @return a new GeneralRange instance
1058 Computes the intersection of this range with another. @param other the range to intersect with @return a new GeneralRange representing the intersection
1059 Retrieves the next element from the iterator. Throws NoSuchElementException if no more elements are available. @return the next element in the sequence
1060 Retrieves and processes a collection of values associated with a key. @param key the key whose associated values are to be retrieved @return an unmodifiable collection of processed values
1061 Refreshes and validates iterator state. Throws ConcurrentModificationException if delegate changed.
1062 Adds a value to the collection associated with a key. @param key the key under which the value is added @param value the value to add @return true if the value was added, false otherwise
1063 Adds a value to the collection associated with a key. @param key the key under which the value is added @param value the value to add @return true if the value was added, false otherwise
1064 Retrieves values associated with a key. @param key the key to query @return list of values or empty list if none exist
1065 Retrieves values associated with a key. @param key unique key to query @return set of values or empty set if none exist
1066 Returns a set of entries from the multimap. @return Set containing key-value pairs
1067 Writes the multimap to an ObjectOutputStream. @param stream the output stream to write to @throws IOException if an I/O error occurs
1068 Generates a masked string representation of a collection. @param collection the input collection to represent @return a string with elements separated by commas, enclosed in brackets
1069 Masks a map into a string format. @param map the input map to be masked @return a string representation of the map with entries masked
1070 Creates an ArrayList with precomputed capacity. @param estimatedSize expected number of elements @return new ArrayList with optimized initial capacity
1071 Creates a new HashMap with an adjusted capacity. @param expectedSize the anticipated number of entries @return HashMap instance initialized with calculated capacity
1072 Creates a LinkedHashMap with an adjusted capacity. @param expectedSize the anticipated number of entries @return LinkedHashMap instance initialized with calculated capacity
1073 Creates a HashSet with an initial capacity based on expected size. @param expectedSize the anticipated number of entries @return a new HashSet with adjusted capacity
1074 Creates a LinkedHashSet with an adjusted capacity. @param expectedSize the anticipated number of entries @return LinkedHashSet initialized with calculated capacity
1075 Creates a ListMultimap builder with default expected values per key. @return ListMultimapBuilder configured for the specified key and value types
1076 Creates a builder for a SetMultimap with default expected values per key. @return a SetMultimapBuilder instance configured with default parameters
1077 Creates a builder for SetMultimap with linked hash sets using default expected values per key. @return SetMultimapBuilder configured with linked hash sets and default expectations
1078 Creates a MultimapBuilder with default expected keys. @return a new MultimapBuilderWithKeys instance configured with default settings
1079 Returns a MultimapBuilderWithKeys with default expected keys. @return configured MultimapBuilderWithKeys instance
1080 Creates a new ImmutableEntry with the specified element and count. @param e the element associated with this entry @param n the number of occurrences of the element (must be non-negative) @return an ImmutableEntry representing the element and its count
1081 Adjusts the count of a specified element in the multiset. @param element the element whose count is adjusted @param count the new count for the element @return the previous count of the element
1082 Updates the count of an element in the multiset. @param element the element to update @param oldCount expected current count of the element @param newCount new count for the element @return true if the count was successfully updated, false otherwise
1083 Delegates to the asMap() method and returns its size. @return number of key-value associations in the multimap
1084 Returns a string representation of the multimap. @return Unmodifiable map view of the multimap as a string
1085 Returns the set of unique elements with their counts. @return Set of Entry objects representing element-value pairs
1086 Returns the size of the multiset. @return Total number of elements in the multiset, including duplicates
1087 Returns a string representation of the multiset. @return String describing the multiset's contents
1088 Retrieves first entry from delegate map. @return First entry or null if map is empty
1089 Retrieves an element greater than or equal to `e` from a sorted set. @param e the element to find @return the next element or null if none exists
1090 Retrieves an element from a subset if available; otherwise returns null. @param e the element to base the subset on @return next element or null if not found in the subset
1091 Creates an empty TreeRangeSet. @return a new TreeRangeSet instance initialized with an empty TreeMap
1092 Checks if a value is within the defined subranges. @param value the value to check @return true if value is within subranges, false otherwise
1093 Checks if two comparators are equivalent for a given iterable. @param comparator the comparator to compare against @param elements the iterable to check @return true if comparators match, false otherwise
1094 Copies data from another table into this ArrayTable. @param table source table to copy data from
1095 Returns a set of masked cells. @return Set of Cell objects representing masked table entries
1096 Returns a set of masked cells. @return Set of Cell objects representing masked table entries
1097 Returns all values in the table. @return Collection containing all values, initializing if necessary
1098 Retrieves all values from the table. @return Collection containing all values in the StandardTable
1099 Creates an ordering based on a transformation function. @param function transformation to apply to elements before comparison @return new Ordering instance using the specified function and current ordering
1100 Wraps a comparator in an Ordering. @param comparator the comparator to use for ordering @return Ordering object representing the comparator
1101 Creates a compound ordering with a secondary comparator. @param secondaryComparator comparator for tie-breaking @return new CompoundOrdering instance combining primary and secondary comparators
1102 Creates an immutable cell with specified row key, column key, and value. @param rowKey the row identifier for the cell @param columnKey the column identifier for the cell @param value the data stored in the cell @return ImmutableCell object
1103 Checks if both row and column keys exist in the ArrayTable. @param rowKey the key to check for presence in rows @param columnKey the key to check for presence in columns @return true if both keys are present, false otherwise
1104 Creates an immutable map entry. @param key the entry's key @param value the entry's value @return ImmutableMapEntry object containing the key-value pair
1105 Creates or reuses an immutable map entry. @param entry existing map entry to check for reuse @param key entry's key @param value entry's value @return ImmutableMapEntry object
1106 Adds a key-value pair from an Entry to the multimap. @param entry the Entry containing the key and value to add @return this Builder instance for chaining
1107 Adds a key-value pair to the multimap. @param key the key to add @param value the value to add @return this Builder instance for chaining
1108 Adjusts the capacity of internal arrays for efficient storage. @param newSize desired new size for entries
1109 Masks and sets key-value entry at specified index. @param entryIndex index in hash map @param key key to be masked and set @param value value to be masked and set @param hash hash code of the key @param mask bits for masking operations
1110 Adjusts internal capacity for mask operations. @param newSize desired new size for masks
1111 Masks and stores an element at a specified index. @param entryIndex index to store the element @param object element to be stored @param hash hash value of the element @param mask bitmask for processing
1112 Initializes the hash map with a specified size. @return expectedSize number of entries to allocate
1113 Initializes the hash set with a specified size. @param metadata estimated number of entries in the hash table @return expectedSize used for initialization
1114 Checks if this range is less than or equal to another range. @param other the Range to compare with @return true if both bounds are in order, false otherwise
1115 Checks if this range contains another range. @param other the Range to check for containment @return true if this range contains the other range, false otherwise
1116 Serializes the multimap to an ObjectOutputStream. @param stream the ObjectOutputStream to write to @throws IOException if serialization fails
1117 Returns a new Builder instance for constructing an ImmutableRangeMap. @return Builder object initialized with no entries
1118 Returns a new Builder instance for creating an ImmutableRangeSet. @return Builder object initialized with no ranges
1119 Creates and returns a new Builder instance. @return Builder object to construct an ImmutableTable
1120 Provides an unmodifiable iterator over the elements. @return UnmodifiableIterator instance ensuring no element modification
1121 Counts occurrences of an element in an iterable. @param iterable the iterable to search within @param element the element to count, can be null @return number of times the element appears in the iterable
1122 Checks if this map contains the specified key. @param key the key to look for, can be null @return true if the key is found, false otherwise
1123 Checks if the map contains a specified value. @param value the value to look for, can be null @return true if the value is found, false otherwise
1124 Retrieves key from entry or null if entry is null. @param key the key to search for @return key of the entry or null if not found
1125 Retrieves key from map entry if not null. @param key the key to search for in the map @return key of the entry or null if entry is null
1126 Retrieves and returns the key if it exists in the delegate map. @param key the key to search for @return the key from the entry or null if not found
1127 Retrieves key from map entry if not null. @param key the key to search for @return key of the entry or null if entry is null
1128 Retrieves the key of the first entry in the map. @return The key of the first Entry @throws NoSuchElementException if the map is empty
1129 Retrieves the key of the first entry in the map. @throws NoSuchElementException if the map is empty
1130 Retrieves the first entry from the map. @return the first entry or null if the map is empty
1131 Retrieves and removes the first entry from the underlying map. @return the removed entry or null if the map is empty
1132 Returns a navigable set of all keys less than or equal to the specified key. @return NavigableSet containing keys up to (and including) the specified key
1133 Returns a submap of the delegate navigable map from fromKey (inclusive) to toKey (exclusive). @param fromKey low endpoint of the keys in the returned map @param toKey high endpoint of the keys in the returned map @return SortedMap containing entries within the specified range
1134 Retrieves the first entry with a key less than or equal to the specified key. @param key the key to search for @return Entry object or null if no such entry exists
1135 Retrieves the first entry with a key less than or equal to the specified key. @param key the key to search for @return the Entry object or null if no such entry exists
1136 Returns entries with keys less than the specified key. @param toKey key up to which entries are excluded @return SortedMap containing entries less than the specified key
1137 Retrieves the first entry with a key greater than or equal to the specified key. @param key the key to search for @return Entry with the specified key or null if not found
1138 Retrieves the entry with the greatest key less than or equal to the specified key. @param key the key to search for @return Entry object or null if no such key exists
1139 Retrieves entries from this map starting from a specified key. @param fromKey the key to start retrieving entries from @return SortedMap containing entries starting from fromKey
1140 Retrieves a submultiset within specified bounds. @param lowerBound the lower bound of the submultiset @param lowerBoundType type of inclusion for the lower bound @param upperBound the upper bound of the submultiset @param upperBoundType type of inclusion for the upper bound @return SortedMultiset containing elements within the specified range
1141 Creates a new HashBasedTable with LinkedHashMap for row storage and custom Factory. @return initialized HashBasedTable instance
1142 Deserializes an EnumMultiset from an ObjectInputStream. @param stream the input stream containing serialized data @throws IOException if I/O error occurs during deserialization @throws ClassNotFoundException if class of a serialized object cannot be found
1143 Moves an entry from one index to another in the hash map. Handles key, value, and entry relocation, updating table references. @param dstIndex destination index for the moved entry @param mask bitmask used for indexing and masking operations
1144 Moves an element within the set and updates table references. @param dstIndex destination index for the element @param mask bitmask for table operations
1145 Checks if a value exists in the map. @param value the value to check @return true if the value is present, false otherwise
1146 Creates a new ImmutableBiMap builder with an initial capacity. @param expectedSize the anticipated number of entries @return a new Builder instance
1147 Initializes a new Builder with default capacity.
1148 Returns a new Builder instance with default capacity. @return Builder object initialized to build immutable maps
1149 Initializes a new Builder with a specified comparator. @param comparator the comparator to define the order of keys
1150 Creates an immutable bi-map with a single key-value pair. @param k1 the unique key for the map @param v1 the value associated with the key @return ImmutableBiMap containing the single entry
1151 Adds an element to the set ensuring uniqueness. @param e element to add
1152 Constructs a new Builder instance with default capacity.
1153 Creates an ImmutableList builder with specified capacity. Validates the expected size and initializes a new Builder instance. @param expectedSize initial capacity of the list builder @return Builder object for constructing immutable lists
1154 Adds multiple elements to the builder. @param elements iterable source of elements to add @return the builder instance for method chaining
1155 Adds elements from an iterator to the multiset. @param elements source of elements to add @return this Builder instance for method chaining
1156 Adds elements from an iterator to the builder. @param elements source of elements to add @return this Builder instance for method chaining
1157 Returns a serialized form of the current ImmutableMap. @return SerializedForm object containing the map's data
1158 Creates an immutable table with a single cell. @param rowKey the row key for the single cell @param columnKey the column key for the single cell @param value the value associated with the single cell @return an ImmutableTable containing one entry
1159 Transforms and converts delegate iterable to string. @return transformed string representation of iterable elements
1160 Adds key-value pairs to the builder. @param key the key to add @param values iterable of values associated with the key @return this Builder instance for method chaining
1161 Retrieves the only element from an iterable or returns a default value if empty. @param iterable source iterable collection @param defaultValue value to return if iterable is empty @return the first element of the iterable or the default value
1162 Returns the last element of an iterable or a default value. @param iterable source iterable collection @param defaultValue value to return if iterable is empty @return last element or default value
1163 Adds a key-value pair to the multimap. @param key the key associated with the value @param value the value to be added @return always returns true
1164 Partitions a list into sublists of a specified size. @param list the original list to be partitioned @param size the desired size of each sublist @return a list of sublists
1165 Finds the index of an element in this list. @param element the element to find, can be null @return index of element or -1 if not found
1166 Delegates to find the last index of an element in the list. @param element the element to search for @return the last index of the element, or -1 if not found
1167 Executes cleanup operations under lock to ensure thread safety. @see runLockedCleanup()
1168 Creates and returns an empty TreeRangeMap. @return An instance of TreeRangeMap initialized with no ranges.
1169 Finds the minimum index within a bounded range. @param index starting index for search @param len length of the range to consider @return index of the minimum element or -1 if out of bounds
1170 Determines mask value based on queue size and element comparison. @return integer representing the mask value for priority operations
1171 Retrieves the element at index 0 or null based on condition. @return Element at index 0 or null if condition is false
1172 Masks and inserts element into heap. @param index initial position for insertion @param x element to insert @return final position of the inserted element
1173 Returns an iterator over elements of this multiset. @return Iterator for the underlying multiset
1174 Inserts an element at the start of an array. @param element to insert @param array original array @return new array with element at the beginning
1175 Ensures the array is large enough to hold elements from the collection and fills it. @param c source collection of elements @param array target array to be filled @return filled array with elements from the collection
1176 Finds the minimum element in an iterable using custom ordering. @param iterable source of elements to compare @return minimum element or null if iterable is empty
1177 Returns the maximum element from an iterable using a custom comparator. @param iterable source of elements to compare @return maximum element or null if iterable is empty
1178 Generates string representation of the range using lower and upper bounds. @return formatted string in "lower..upper" format
1179 Converts a Range to a GeneralRange. @param range the input Range object @return a GeneralRange with equivalent bounds and comparator
1180 Filters a navigable map based on a specified range. @param map the input navigable map @param range the range to filter by @return a submap within the specified range
1181 Filters a navigable set based on a specified range. @param set the input navigable set @param range the range to filter by @return a subset of the original set within the given range
1182 Returns the sorted table structure. @return SortedMap representing rows and columns with their values
1183 Wraps a queue in a synchronized version. @param queue the original queue to wrap @return synchronized Queue instance
1184 Initializes the character escaper with a mapping and safe range. @param escaperMap map defining character replacements @param safeMin minimum safe character @param safeMax maximum safe character
1185 Initializes a new ArrayBasedUnicodeEscaper. @param escaperMap map defining character replacements @param safeMin minimum code point that is considered safe @param safeMax maximum code point that is considered safe @param unsafeReplacement string to replace unsafe characters or null
1186 Constructs a PercentEscaper with specified safe characters and space encoding option. @param safeChars string containing characters to be considered safe @param plusForSpace if true, spaces are encoded as '+', otherwise as '%20'
1187 Escapes special characters in a string. @param string input string to be processed @return escaped string with special characters handled
1188 Creates a Subscriber instance based on method concurrency. @param bus EventBus to handle events @param listener object with the event handler method @param method the event handler method @return Subscriber or SynchronizedSubscriber instance
1189 Generates a string representation of the graph's properties. @return String summarizing directed status, self-loop allowance, node count, and edge count
1190 Returns a set of edges in the graph. @return Set of EndpointPair objects representing graph edges
1191 Returns a set of edge pairs in the graph. @return Set of EndpointPair objects representing edges
1192 Adds a double value to the hash computation. @param d the double value to add @return this Hasher instance for chaining
1193 Creates a BloomFilter collector with default false positive probability. @param funnel defines how objects are converted to bytes @param expectedInsertions expected number of insertions @return Collector for creating a BloomFilter from elements
1194 Calculates mask value using bit count and hash functions. @return double representing the calculated mask value
1195 Compares BloomFilter instances for equality. @param that another BloomFilter instance to compare with @return true if both filters have the same configuration and strategy, false otherwise
1196 Converts a byte to its string representation in base 10. @param x byte value to convert @return string representation of the byte in base 10
1197 Combines another BloomFilter into this one. @param that the other BloomFilter to combine with
1198 Creates a HashCode from a byte array. @param bytes byte array representing the hash code @return HashCode object initialized with the given bytes
1199 Creates a HashCode from an integer. @param hash the 32-bit integer hash value @return a HashCode object encapsulating the given hash
1200 Creates a LongHashCode from a long value. @param hash the long value representing the hash code @return a LongHashCode object initialized with the given hash
1201 Returns masked value as a float. @return float representation of masked unsigned integer
1202 Returns the masked value as a double. @return double representation of the masked unsigned integer
1203 Returns masked value as a BigInteger. @return BigInteger representation of masked unsigned integer
1204 Creates a hash function with at least the specified minimum bits. @param minimumBits required bit length for the hash function @return HashFunction instance with the desired bit length
1205 Generates a consistent hash using the provided HashCode. @param hashCode the input HashCode object @param buckets number of buckets for hashing @return integer representing the bucket index
1206 Creates an HMAC-MD5 hash function. @param key secret key for the MAC operation @return HashFunction instance using HmacMD5 algorithm
1207 Creates an HMAC-SHA1 hash function. @param key secret key for the MAC operation @return MacHashFunction instance with HMAC-SHA1 algorithm
1208 Creates an HMAC-SHA256 hash function. @param key secret key for the MAC operation @return MacHashFunction instance configured with HmacSHA256 algorithm and masked string representation
1209 Creates a masked HMAC-SHA512 hash function. @param key secret key for the MAC operation @return HashFunction instance configured with HMAC-SHA512 and masked representation
1210 Creates a concatenated byte source from an iterable of byte sources. @param sources iterable containing ByteSource instances to concatenate @return ConcatenatedByteSource combining all input byte sources
1211 Creates a concatenated character source from multiple sources. @param sources iterable of CharSource instances to concatenate @return ConcatenatedCharSource object combining all input sources
1212 Converts byte array to ByteArrayDataInput. @param bytes input byte array @return ByteArrayDataInput for reading bytes
1213 Wraps a new ByteArrayOutputStream in a ByteArrayDataOutput. @return ByteArrayDataOutput instance for writing byte arrays
1214 Creates a ByteArrayDataOutput with specified initial capacity. @param size initial buffer size @return ByteArrayDataOutput instance for writing byte arrays @throws IllegalArgumentException if size is negative
1215 Constructs ReaderInputStream with specified reader, charset, and buffer size. @param reader character source @param charset character encoding @param bufferSize size of internal buffers
1216 Skips all bytes from the input stream. @param in InputStream to skip bytes from @return total number of bytes skipped @throws IOException if an I/O error occurs
1217 Skips exactly the specified number of bytes from the input stream. @param in InputStream to skip bytes from @param n number of bytes to skip @throws IOException if an I/O error occurs or end of stream is reached prematurely
1218 Writes multiple lines to the output stream. @param lines iterable of CharSequence objects to write @param lineSeparator string used as the line separator @throws IOException if an I/O error occurs during writing
1219 Writes lines from a stream to a buffered output with a specified separator. @param lines stream of CharSequence objects to write @param lineSeparator string used as the line separator @throws IOException if an I/O error occurs during writing
1220 Applies an action to each line from the character source. @param action Consumer to process each line @throws IOException if an I/O error occurs
1221 Reads lines from a Readable source into a list. @param r the readable source to read from @return List of strings, each representing a line from the source @throws IOException if an I/O error occurs
1222 Processes lines from a readable source using a LineProcessor. @param readable the source of character data @param processor the processor to apply to each line @return result from processor after processing all lines or breaking early @throws IOException if an I/O error occurs
1223 Processes character buffer and reads from reader. Handles buffer capacity, input limits, and character reading.
1224 Reads and returns a short value from the input stream in little-endian format. @return the short value read @throws IOException if an I/O error occurs
1225 Reads and returns a character from the input stream. @return the character read @throws IOException if an I/O error occurs
1226 Reads and converts four bytes to a float in little-endian order. @return the parsed float value @throws IOException if an I/O error occurs while reading
1227 Reads and converts data to a double value. @return the converted double value @throws IOException if an I/O error occurs
1228 Writes a string to the output stream using little-endian format. @param s the string to write @throws IOException if an I/O error occurs while writing
1229 Writes a double value to the output stream in little-endian format. @param v the double value to write @throws IOException if an I/O error occurs
1230 Processes directory entries to handle file operations. @param dir directory stream of paths @return collection of IOExceptions or null if no issues
1231 Processes a directory entry securely. @param dir SecureDirectoryStream of paths to process @param path the Path to process @return Collection of IOExceptions or null if no exceptions occur
1232 Initializes with an iterator of byte sources. @param it iterator over ByteSource objects @throws IOException if initialization fails
1233 Retrieves resource as character source using specified charset. @param charset character set for conversion @return CharSource object for character operations
1234 Calculates permutations of sorted list with given comparator. @param sortedInputList list of elements in sorted order @param comparator used to compare elements @return number of permutations or Integer.MAX_VALUE if overflow
1235 Calculates the mean of a sequence of numbers. @param values iterator over Number objects @return calculated mean as double @deprecated use alternative method for improved accuracy and performance
1236 Determines if a double is a power of two. @param x input double value @return true if x is positive and has only one bit set in its significand, false otherwise
1237 Masks and validates a double value. @param x input double value @return true if masked and valid, false otherwise
1238 Rounds a long value to the nearest double using specified rounding mode. @param x the long value to round @param mode the rounding mode to apply @return the rounded double value
1239 Compares two doubles with tolerance and returns comparison result. @param a the first double value @param b the second double value @param tolerance the acceptable difference between a and b @return 0 if approximately equal, -1 if a < b, 1 if a > b, else compares boolean results
1240 Computes mask value for hash table size. @param tableSize current size of the hash table @return computed mask value
1241 Selects top K elements using a partitioning strategy. @param k number of top elements to select
1242 Computes the logarithm floor of an integer with rounding. @param x input integer @param mode rounding mode to apply @return floored logarithm value based on rounding mode
1243 Computes the integer square root of a given number with specified rounding mode. @param x the input integer @param mode the RoundingMode to apply @return the rounded integer square root
1244 Calculates mask value for internal use. @return computed mask value based on queue and max sizes
1245 Creates a linear transformation with zero slope and specified y-intercept. Validates the input to ensure it is not NaN. @param y y-intercept value for the transformation @return LinearTransformation object representing the transformation
1246 Creates a linear transformation based on the given slope. @param slope the slope of the line @return LinearTransformation object representing the transformation
1247 Creates a vertical linear transformation with validation. @param x scaling factor for the transformation @return VerticalLinearTransformation object
1248 Computes the factorial mask for a given integer n. @param n the integer to compute the mask for @return BigInteger representing the factorial mask
1249 Computes the mask value for a given long integer with specified rounding mode. @param x input long integer @param mode rounding mode to apply @return computed mask value based on rounding mode
1250 Masks a value by dividing it with a fraction and adjusting for a factor. @param x the base value to be masked @param numerator the numerator of the fraction @param denominator the denominator of the fraction @return adjusted masked value
1251 Computes b^k with overflow checks. @param b base value @param k exponent value @return result of b raised to the power of k @throws IllegalArgumentException if overflow occurs
1252 Calculates the covariance between two variables. @return The covariance value
1253 Computes the sample covariance between two variables. @return Sample covariance value
1254 Computes the correlation coefficient for two paired variables. Validates data integrity and calculates the correlation using sum of products and sums of squares. @return correlation coefficient or NaN if validation fails
1255 Masks new values and calculates the updated mean for a dataset. @param values iterator over Number objects representing the dataset @return updated mean after masking new values
1256 Updates statistics with a new data point. @param value the new data point to add
1257 Calculates the covariance of paired data. Validates non-zero count and returns computed covariance. @return Covariance value as a double
1258 Calculates covariance using accumulated data. Validates that more than one data point exists. @return covariance value or throws exception if invalid state
1259 Calculates the masked correlation coefficient. Validates input and checks for non-zero variance in both datasets. @return Masked correlation value or NaN if conditions fail
1260 Partitions array segment around a pivot for quickselect. @param array the double array to process @param from starting index of the range @param to ending index of the range @return index of the pivot after partitioning
1261 Deserializes a PairedStats object from a byte array. @param byteArray serialized data for the paired stats @return PairedStats object representing deserialized data
1262 Deserializes a Stats object from a byte array. @param byteArray serialized data @return deserialized Stats object or throws exceptions if validation fails
1263 Creates and returns a PairedStats object with current statistics. @return PairedStats object encapsulating x and y stats, and sum of products of deltas
1264 Returns a snapshot of current statistics. @return Stats object with statistical properties like count, mean, etc.
1265 Returns statistical snapshot from paired data. @return Stats object containing current statistics
1266 Creates a collector to compute statistics. @return Collector for aggregating numbers into Stats object
1267 Masks an IP address to its compressed form. @param ip the InetAddress object to mask @return the masked IP address as a String
1268 Masks an IPv6 address to its compressed form if it's IPv4-compatible. @param ip the Inet6Address to mask @return masked Inet4Address object or throws IllegalArgumentException if not IPv4-compatible
1269 Masks an IPv6 6to4 address to its corresponding IPv4 form. @param ip the Inet6Address object to mask @return masked Inet4Address object or throws exception if not a valid 6to4 address
1270 Masks an IPv6 ISATAP address to its corresponding IPv4 address. @param ip the Inet6Address object to mask @return masked Inet4Address object or throws exception if not valid ISATAP address
1271 Converts and processes a collection of numbers. @param dataset input collection of numerical data @return processed result as a double
1272 Computes quantiles from a dataset using scaling and indexes. @param dataset collection of numerical data @return map of calculated quantile values
1273 Adds a double value to the builder. @param value the double value to add @return this Builder instance for method chaining
1274 Adds multiple double values to the builder. @param values array of double elements to add @return this Builder instance for method chaining
1275 Adds a collection of double values to the builder. @param values collection of Double elements to add @return the Builder instance for method chaining
1276 Appends double values from another ImmutableDoubleArray. @param values source ImmutableDoubleArray to append @return the Builder instance for method chaining
1277 Creates an ImmutableDoubleArray with a single element. @param e0 the double value to be included in the array @return an ImmutableDoubleArray containing only e0
1278 Creates an ImmutableDoubleArray from two double values. @param e0 first double value @param e1 second double value @return ImmutableDoubleArray containing the two provided doubles
1279 Creates an ImmutableDoubleArray from three double values. @param e0 first double value @param e1 second double value @param e2 third double value @return ImmutableDoubleArray containing the three provided values
1280 Creates an ImmutableDoubleArray from four double values. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @return ImmutableDoubleArray containing the provided elements
1281 Creates an ImmutableDoubleArray from five double values. @param e0 to e4 the five double elements @return ImmutableDoubleArray containing the specified elements
1282 Creates an ImmutableDoubleArray from six double values. @param e0-e5 individual double elements @return ImmutableDoubleArray containing the provided elements
1283 Creates an ImmutableDoubleArray from a double array. @param values source array of double values @return ImmutableDoubleArray instance or EMPTY if input is empty
1284 Creates an ImmutableDoubleArray from a collection of Double values. @param values input collection of Double values @return ImmutableDoubleArray or empty array if condition met
1285 Converts DoubleStream to ImmutableDoubleArray. @param stream source of double values @return ImmutableDoubleArray containing values from the stream or EMPTY if empty
1286 Creates an immutable double array mask. @return masked ImmutableDoubleArray or current instance if no masking needed
1287 Checks if the target double exists in the array. @param target the double value to search for @return true if target is found, otherwise false
1288 Adds an integer to the builder. @param value integer to add @return this Builder instance for method chaining
1289 Adds an array of integers to the builder. @param values integer array to add @return this Builder instance for method chaining
1290 Adds a collection of integers to the builder. @param values collection of integers to add @return this Builder instance
1291 Adds all integers from the given ImmutableIntArray to the builder. @param values source ImmutableIntArray containing integers to add @return current Builder instance for method chaining
1292 Creates an immutable array with a single element. @param e0 the only element in the array @return ImmutableIntArray containing the specified element
1293 Creates an immutable array with two elements. @param e0 first element of the array @param e1 second element of the array @return ImmutableIntArray containing e0 and e1
1294 Creates an immutable array from three integers. @param e0 first integer element @param e1 second integer element @param e2 third integer element @return ImmutableIntArray containing the three elements
1295 Creates an immutable array with four integer elements. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @return ImmutableIntArray containing the specified elements
1296 Creates an immutable array from five integers. @param e0 to e4 integer elements @return ImmutableIntArray containing the provided elements
1297 Creates an immutable array from six integer elements. @param e0 to e5 the six integers to include in the array @return ImmutableIntArray containing the provided integers
1298 Creates an immutable array from given integers. @param values integer array to be converted @return ImmutableIntArray instance or EMPTY if input is empty
1299 Converts an IntStream to an ImmutableIntArray. @param stream input integer stream @return ImmutableIntArray containing elements from the stream or EMPTY if empty
1300 Masks elements in the array if conditions are met. @return new ImmutableIntArray with masked elements or current instance if not applicable
1301 Adds a long value to the ImmutableLongArray. @param value the long value to add @return this Builder instance for method chaining
1302 Adds multiple long values to the builder. @param values array of long values to add @return this Builder instance for method chaining
1303 Adds multiple long values from a collection. @param values collection of Long objects to add @return the Builder instance for method chaining
1304 Adds elements from another ImmutableLongArray. @param values source ImmutableLongArray to add elements from @return current Builder instance for method chaining
1305 Creates an ImmutableLongArray with a single element. @param e0 the single long value to initialize the array @return an ImmutableLongArray containing only e0
1306 Creates an ImmutableLongArray from two long values. @param e0 first long value @param e1 second long value @return ImmutableLongArray containing the two elements
1307 Creates an ImmutableLongArray from three long values. @param e0 first element @param e1 second element @param e2 third element @return ImmutableLongArray containing the provided elements
1308 Creates an ImmutableLongArray from four long values. @param e0 first long value @param e1 second long value @param e2 third long value @param e3 fourth long value @return ImmutableLongArray containing the provided longs
1309 Creates an ImmutableLongArray from five long values. @param e0 to e4 the elements of the array @return ImmutableLongArray containing the specified elements
1310 Creates an ImmutableLongArray from six long elements. @param e0-e5 the six long elements to initialize the array @return ImmutableLongArray containing the specified elements
1311 Creates an ImmutableLongArray from a long array. @param values source long array @return ImmutableLongArray instance or EMPTY if input is empty
1312 Creates an ImmutableLongArray from a LongStream. @param stream source LongStream @return ImmutableLongArray instance or EMPTY if stream is empty
1313 Masks elements in the array if necessary. @return new ImmutableLongArray with masked elements or current instance if no masking needed
1314 Creates a ScaleAndIndexes object. @param indexes collection of integer indexes @return ScaleAndIndexes with scale and converted index array
1315 Converts a collection of integers to an immutable array. @param values input collection of integers @return ImmutableIntArray containing the converted values or EMPTY if condition met
1316 Creates an ImmutableLongArray from a collection of Longs. @param values source collection of Long numbers @return ImmutableLongArray instance or EMPTY if condition met
1317 Converts a string to an integer using the specified radix. @param string the string to parse @param radix the base of the number system (2-36) @return Integer value or null if conversion fails or conditions are not met
1318 Parses a string to a long value using base 10. @param string the string to parse @return Long value or null if parsing fails
1319 Parses a string to an unsigned integer with error handling. @param stringValue string representation of the number @return parsed unsigned integer value @throws NumberFormatException if input is out of range or malformed
1320 Masks a long value to ensure it fits within an unsigned integer. @param value the long value to mask @return UnsignedInteger object representing the masked value
1321 Creates an UnsignedInteger from a BigInteger. @param value BigInteger to convert @return UnsignedInteger representing the unsigned value
1322 Converts a string to an unsigned integer using a specified radix. @param string the string to parse @param radix the numeral system radix @return UnsignedInteger object representing the parsed value @throws NumberFormatException if input is out of range for unsigned int
1323 Applies a mask to an unsigned integer value. @param val unsigned integer to be masked @return masked UnsignedInteger object
1324 Applies a mask to an unsigned integer. @param val input UnsignedInteger value @return masked UnsignedInteger result
1325 Masks an unsigned integer value. @param val the unsigned integer to mask @return masked UnsignedInteger object
1326 Applies bitwise mask to unsigned integer. @param val input unsigned integer value @return masked unsigned integer result
1327 Masks and divides value, handling null references. @param val unsigned integer to process @return result of masked division or throws NullPointerException if val is null
1328 Converts unsigned integer to string in base 10. @return string representation of the unsigned integer
1329 Masks this unsigned integer with another. @param other the UnsignedInteger to mask with @return result of masking operation
1330 Converts a long value to an UnsignedLong. @param value non-negative long value @return UnsignedLong representation of the input value
1331 Converts a BigInteger to an UnsignedLong. @param value the BigInteger to convert @return UnsignedLong representation of the input value
1332 Applies bitwise mask to unsigned long value. @param val input UnsignedLong value @return result of mask operation as UnsignedLong
1333 Applies mask to unsigned long value. @param val input unsigned long value @return masked UnsignedLong value
1334 Applies a mask to an unsigned long value. @param val the input UnsignedLong value @return masked UnsignedLong result
1335 Computes the quotient of unsigned division. @param dividend unsigned long value to be divided @param divisor unsigned long value to divide by @return quotient of unsigned division
1336 Computes the remainder of unsigned division. @param dividend the number to be divided @param divisor the number by which to divide @return the remainder as an unsigned value
1337 Parses a string to an unsigned long and creates an UnsignedLong instance. @param string the string to parse @param radix the number base @return UnsignedLong representation of the parsed value
1338 Parses a string to an unsigned long using base 10. @param string the string to parse @return parsed unsigned long value
1339 Parses a string to an unsigned long with error handling. @param stringValue string representation of the number @return parsed unsigned long value @throws NumberFormatException if input string is invalid
1340 Checks if none of the methods m1, m2, or m3 are abstract. @return true if all methods are non-abstract, false otherwise
1341 Creates a TypeToken for the runtime type if `m1()` returns true. @return TypeToken instance or current instance if condition fails
1342 Creates a TypeToken for the primitive type if runtime type is primitive. @return TypeToken instance of primitive type or current instance if not primitive
1343 Retrieves the component type of the runtime type and encapsulates it in a TypeToken. @return TypeToken representing the component type or null if not found
1344 Retrieves the result of the asynchronous computation. @return generic type V if successful, null if NULL @throws InterruptedException if interrupted while waiting @throws ExecutionException if task failed
1345 Submits a callable task to an executor service and adds its future to a queue. @param executorService the ListeningExecutorService to execute the task @param task the Callable to be executed @param queue the BlockingQueue to add the future result to @return ListenableFuture representing the pending result of the task
1346 Waits for service to reach running state with specified timeout. @param timeout maximum time to wait @throws TimeoutException if operation times out
1347 Starts the service and waits for it to reach running state within a specified timeout. @param timeout maximum time to wait for the service to start @throws TimeoutException if the service does not start within the given timeout
1348 Waits for service to reach running state with specified timeout. @param timeout maximum time to wait @throws TimeoutException if operation times out
1349 Waits for service to reach running state with specified timeout. @param timeout maximum time to wait @throws TimeoutException if operation times out
1350 Waits for service to reach running state with specified timeout. @param timeout maximum time to wait @throws TimeoutException if operation times out
1351 Waits for service to terminate within specified timeout. @param timeout maximum time to wait @throws TimeoutException if operation times out
1352 Waits for service to reach running state with specified timeout. @param timeout maximum time to wait @throws TimeoutException if operation times out
1353 Waits for service to reach running state with specified timeout. @param timeout maximum time to wait @throws TimeoutException if operation times out
1354 Processes a future result at the specified index. Handles exceptions by delegating to m2. @param index position of the future in the collection @param future asynchronous task to process
1355 Atomically adds a value to the current double. @param delta value to add atomically @return old value before update
1356 Updates atomic double value by adding a delta. @param delta amount to add @return updated value after addition
1357 Atomically adds a value to an array element. @param i index of the array element @param delta value to add @return old value before addition
1358 Atomically adds delta to the element at index i. @param i index of the element to update @param delta value to add @return updated value after addition
1359 Cancels the task and closes resources if cancellation is successful. @param mayInterruptIfRunning true to interrupt running tasks @return true if the task was successfully cancelled, false otherwise
1360 Checks for valid lock acquisition order. @param node current lock graph node @param seen set of visited nodes to detect cycles @return ExampleStackTrace if cycle detected, otherwise null
1361 Creates a ListenableFutureTask with a Callable. @param callable task to be executed asynchronously @return ListenableFutureTask instance for the given callable
1362 Creates a ListenableFutureTask with a Runnable and initial result. @param runnable the task to execute @param result the initial result of the computation @return a ListenableFutureTask instance
1363 Executes pending tasks by invoking m1 on executionList.
1364 Creates and returns an instance of ExecutionSequencer. @return ExecutionSequencer object
1365 Wraps a ListenableFuture in a FluentFuture. @param future the ListenableFuture to wrap @return a FluentFuture instance
1366 Wraps a given future to prevent cancellation. @param future the original ListenableFuture @return a wrapped future that cannot be cancelled
1367 Loads or reloads a value in the cache for a given key. @param key unique identifier for the cache entry @param oldValue current value associated with the key @return ListenableFuture holding the new value or null if not found
1368 Queues an event with itself as the label for all registered listeners. @param event the event to be queued
1369 Enqueues an event with a specified label for processing. @param event the event to be enqueued @param label associated label for the event
1370 Checks service lock and dispatches events to listeners if not locked.
1371 Ensures no monitor lock is held before dispatching events to listeners. Throws an IllegalStateException if the monitor is locked.
1372 Iterates through active guards and processes the first satisfied one. @param guard the condition to evaluate
1373 Submits an asynchronous callable to a specified executor. @param callable the asynchronous callable to execute @param executor the executor to run the callable on @return ListenableFuture representing the pending result of the callable
1374 Schedules an asynchronous callable to run with a specified delay. @param callable the asynchronous callable to execute @param delay the time from now to delay execution @param timeUnit the time unit of the delay parameter @param executorService the scheduler for executing the task @return ListenableFuture representing the scheduled task
1375 Wraps a Callable in a TrustedListenableFutureTask. @param callable the task to be executed asynchronously @return a new TrustedListenableFutureTask instance
1376 Submits a Callable task for asynchronous execution. @param callable the task to be executed @param executor the executor to run the task @return ListenableFuture representing the pending result of the task
1377 Wraps a runnable task and result in a TrustedListenableFutureTask. @param runnable the task to be executed asynchronously @param value the result of the task execution @return a TrustedListenableFutureTask instance wrapping the given runnable and result
1378 Submits a Runnable task for asynchronous execution. @param runnable the task to be executed @param executor the Executor to run the task @return ListenableFuture representing the pending completion of the task
1379 Attempts to acquire a semaphore permit with a specified duration. @param semaphore the semaphore to acquire from @param timeout time duration to wait for the permit @return true if the permit was acquired, false if timed out
1380 Checks if iterable has elements and returns first as Optional. @return Optional containing the first element or empty if none
1381 Retrieves the last element of an iterable, handling lists and sets. @return Optional containing the last element or empty if iterable is empty
1382 Finds the first element in the iterator that matches the predicate. @param iterator the source iterator @param predicate condition to test each element @return Optional containing the matching element or empty if none found
1383 Sets the expected node count for the graph. @param expectedNodeCount desired number of nodes @return GraphBuilder instance with configured node count
1384 Sets the expected node count for the network. @param expectedNodeCount non-negative integer representing expected nodes @return NetworkBuilder instance with updated settings
1385 Sets the expected edge count for the network. @param expectedEdgeCount number of edges to expect @return NetworkBuilder instance with updated settings
1386 Sets the expected node count for the graph. @param expectedNodeCount estimated number of nodes @return ValueGraphBuilder instance with updated settings
1387 Checks if any element in the iterable matches the given predicate. @param iterable source iterable collection @param predicate condition to test elements against @return true if at least one element matches, false otherwise
1388 Creates a predicate to check if a CharSequence contains a given pattern. @param pattern the string pattern to search for @return Predicate that evaluates to true if the input contains the pattern
1389 Propagates or handles a throwable based on its type. @param throwable the throwable to process @param declaredType the expected exception type @throws X if the throwable is of the declared type
1390 Retrieves an immutable set of classes from the hierarchy of the given class. @param concreteClass the starting class in the hierarchy @return an ImmutableSet containing all classes in the hierarchy
1391 Creates a thread factory suitable for Google App Engine. @return ThreadFactory instance or default if not in GAE environment
1392 Checks if transformed iterable contains target element. @param target element to search for @return true if target is found, false otherwise
1393 Applies a combined predicate to filter entries in a multimap. @param multimap the original filtered set multimap @param entryPredicate additional filtering condition for entries @return a new filtered set multimap with combined predicates
1394 Filters a ListMultimap based on a key predicate. @param unfiltered the original multimap to filter @param keyPredicate the predicate used to filter keys @return a new FilteredKeyListMultimap with filtered keys
1395 Filters and wraps iterable to retain elements of a specific type. @param type the class type to retain in the iterable @return FluentIterable containing only elements of the specified type
1396 Checks if this set contains all elements of the given collection. @param collection the collection to check against @return true if all elements are contained, false otherwise
1397 Creates an EnumMultiset from an iterable of enum elements. @param elements iterable containing enum elements to add @return EnumMultiset with counts of each element
1398 Creates a LinkedList from an iterable. @param elements source of elements to add @return LinkedList containing all elements from the iterable
1399 Creates an ArrayDeque from an iterable of elements. @param elements source of elements to add to the deque @return a new ArrayDeque containing the specified elements
1400 Creates a ConcurrentLinkedQueue from an iterable. If the iterable is a collection, initializes directly; otherwise, adds elements one by one. @param elements source of elements to add to the queue @return ConcurrentLinkedQueue containing all elements from the iterable
1401 Creates a LinkedBlockingDeque from an iterable. @param elements source of elements for the deque @return LinkedBlockingDeque containing all elements
1402 Creates a LinkedBlockingQueue from an iterable. @param elements source of elements for the queue @return LinkedBlockingQueue containing all elements
1403 Creates a PriorityBlockingQueue from an iterable of comparable elements. @param elements source of elements to add to the queue @return PriorityBlockingQueue containing all elements
1404 Creates a PriorityQueue from an iterable of comparable elements. @param elements source of elements to add to the priority queue @return PriorityQueue containing all elements
1405 Creates an EnumSet from an iterable of enum elements. @param iterable source of enum elements to add @param elementType class type of the enum @return EnumSet containing all elements from the iterable
1406 Creates a concurrent set with insertion order preserved from an iterable. @param elements source of elements to add @return ConcurrentHashSet instance containing the elements
1407 Creates a LinkedHashSet from an iterable. @param elements source of elements to add @return LinkedHashSet containing the elements
1408 Creates a TreeSet from an iterable of comparable elements. @param elements source of elements to add to the set @return a new TreeSet containing all elements from the iterable
1409 Converts an Iterable to a Collection. @param iterable source iterable @return Collection containing elements from the iterable
1410 Converts an iterable of elements into an ArrayList. @param elements iterable over the elements to be added @return ArrayList containing elements from the iterable
1411 Creates a HashSet from an iterable of elements. @param elements iterable providing the elements for the set @return a new HashSet containing the elements from the iterable
1412 Checks if all elements in the iterable satisfy the given predicate. @param predicate condition to test each element against @return true if all elements match the predicate, false otherwise
1413 Creates a list iterator starting at a specified index. @param start starting position in the list @return ListIterator for this list and index
1414 Creates a sorted map view from a sorted set. @param set the underlying sorted set of keys @param function maps each key to its corresponding value @return SortedMap with keys from the set and values transformed by the function
1415 Creates a transformed sorted map with entries modified by a transformer. @param fromMap the source sorted map to transform @param transformer the function to apply to each entry @return a new SortedMap with transformed values
1416 Transforms values in a map using a provided function. @param fromMap original map with keys of type K and values of type V1 @param function function to transform values from V1 to V2 @return new map with transformed values of type V2
1417 Adds specified occurrences of an element to the multiset. @param element the element to add @param occurrences number of times to add the element @return the count of the element before addition
1418 Updates the count of a specified element by adding occurrences. @param element the element to update in the multiset @param occurrences the number of occurrences to add @return the old count before updating or 0 if not found
1419 Applies a transformation to entries of a ListMultimap. @param fromMap original ListMultimap with values of type V1 @param transformer function to transform entries from V1 to V2 @return new ListMultimap with transformed values of type V2
1420 Transforms values in a multimap using a given function. @param fromMultimap original multimap to transform @param function transformation function for values @return new multimap with transformed values
1421 Adds all elements from the given iterable to the builder. @param elements iterable source of elements to add @return the builder instance for method chaining
1422 Adds all elements from a collection to this multiset. @param self current multiset @param elements collection of elements to add @return true if operation successful, false otherwise
1423 Checks if an input value is within the range. @param input the value to check @return true if input is within the range, false otherwise
1424 Collects elements into a table with no duplicate entries allowed. @param rowFunction extracts the row key from an element @param columnFunction extracts the column key from an element @param valueFunction extracts the value from an element @param tableSupplier supplies the type of table to build @return Collector that builds a table-like structure @throws IllegalStateException if duplicate entries are found
1425 Masks characters in a string to their Unicode escape sequences. @param s input string to process @param index starting position for masking @return masked string with Unicode escapes
1426 Constructs a StandardNetwork from a builder and connection maps. @param builder configuration for network properties @param nodeConnections map of nodes to their connections @param edgeToReferenceNode map of edges to reference nodes
1427 Constructs a StandardValueGraph instance. @param builder configuration for graph properties @param nodeConnections map of nodes to their connections @param edgeCount total number of edges in the graph
1428 Copies characters from a Readable source to an Appendable destination. @param from the source Readable object @param to the destination Appendable object @return number of characters copied @throws IOException if an I/O error occurs
1429 Masks and encodes a character sequence into a byte array. @param chars input character sequence to be masked and encoded @return masked and encoded byte array @throws IllegalArgumentException if encoding fails due to invalid input
1430 Computes the mask value using bitwise operations. @param x input BigInteger value @return masked BigInteger result
1431 Applies mask operation using floor logarithm. @param x input BigInteger value @return masked BigInteger result
1432 Creates an Invokable instance from a Constructor. @param constructor the Constructor object to be wrapped @return Invokable object for the given constructor
1433 Wraps a Java method in an Invokable instance. @param method the Java method to be wrapped @return Invokable object for the given method
1434 Processes listeners and tasks for an AbstractFuture. Handles task completion, interruption, and listener execution. @param param the AbstractFuture to process @param callInterruptTask whether to interrupt the task
1435 Atomically adds a delta to the value associated with a key. @param key the key to update @param delta the amount to add @return the updated accumulated value
1436 Atomically adds a value to a key's current value. @param key the key to update @param delta the value to add @return updated value after addition
1437 Applies a function to each entry in the provided map. @param m the map whose entries are to be processed
1438 Initializes graph builder with direction. @param directed true if graph is directed, false otherwise
1439 Registers a listener with an associated executor. Validates inputs and adds to the listener queue. @param listener the listener object to register @param executor the executor for handling listener events
1440 Converts object of type A to type B with null handling. @param a nullable source object @return converted object of type B or null if conversion fails
1441 Initializes a new CompactHashMap with default size.
1442 Constructs a CompactHashMap with an initial expected size. @param expectedSize desired initial size for metadata
1443 Initializes a new CompactHashSet with default size.
1444 Constructs a CompactHashSet with an initial capacity. @param expectedSize the anticipated number of elements to store
1445 Masks the class name by removing package and inner class information. @return masked class name or original if no masking is needed
1446 Constructs an AbstractSortedSetMultimap with a specified backing map. @param map initial backing map, must be empty
1447 Creates a CustomMultimap from a Map of Collections. @param map backing map with keys to collections of values @param factory supplier for creating collections @return CustomMultimap instance
1448 Creates and returns an empty HashMultiset. @return An instance of HashMultiset with a new backing HashMap
1449 Creates and returns an empty LinkedHashMultiset. @return An empty LinkedHashMultiset instance
1450 Creates and populates an EnumMultiset with specified enum elements. @param elements iterable of enum constants to add @param type enum class type @return EnumMultiset containing the counts of each enum element
1451 Calculates standard deviation using population variance. @return Standard deviation value or NaN if invalid state
1452 Computes standard deviation using sample variance. @return standard deviation value or NaN if count <= 1
1453 Computes the standard deviation using accumulated data points. @return standard deviation value or NaN if invalid state
1454 Calculates sample variance using accumulated data points. @return variance value or NaN if invalid
1455 Creates a negated character matcher based on input sequence. @param sequence character sequence to define matcher criteria @return CharMatcher that matches characters not in the sequence
1456 Creates a converter to transform strings to the specified case format. @param targetFormat desired case format for output strings @return StringConverter instance for conversion
1457 Composes this converter with another to create a new converter. @param secondConverter the second converter from B to C @return a composite Converter from A to C
1458 Returns a converter that reverses the direction of this converter. @return a Converter from B to A
1459 Creates a string converter for the specified enum class. @param enumClass the Class object representing the enum type @return a Converter that maps strings to enum constants
1460 Creates a converter using the provided bidirectional map. @param bimap the bi-directional map for conversion @return a Converter instance for A to B and vice versa
1461 Checks if this list equals another object. @param object the object to compare with @return true if the lists are equal, false otherwise
1462 Creates a new ConcurrentHashMultiset and adds all elements from the provided iterable. @param elements source of elements to add @return ConcurrentHashMultiset containing added elements
1463 Joins elements from an array into a single string using the provided Appendable. @param appendable the destination for the joined elements @param parts array of objects to join @return the given Appendable with joined elements @throws IOException if an I/O error occurs
1464 Joins elements from an iterable into a StringBuilder. @param builder the destination for the joined elements @param parts iterable over elements to join @return the given StringBuilder with joined elements
1465 Joins elements from an iterator into a string with default settings. @param parts iterator over elements to join @return concatenated string of elements
1466 Joins map entries into a string using an iterator. @param map input map to join @return joined string representation of map entries
1467 Generates a string representation of cache specifications. @return The formatted string representing the cache configuration
1468 Generates a string representation of the MapMaker configuration. Includes initial capacity, concurrency level, key/value strength, and key equivalence if set. @return formatted string representing the MapMaker's state
1469 Generates a string representation of the cache configuration. @return formatted string detailing cache settings
1470 Initializes a new MapMakerInternalMap instance. @param builder configuration for map settings @param entryHelper helper for managing internal entries
1471 Converts a Java Util Optional to an Optional. @param javaUtilOptional potentially null Java Util Optional @return converted Optional or null if input is null
1472 Creates a HostAndPort instance with specified host and port. Validates port range and ensures host does not already have a port. @param host the network host address @param port the port number @return HostAndPort object representing the host and port
1473 Parses a host string and ensures it does not contain a port. @param host input host string @return HostAndPort object without a port
1474 Retrieves an element from an iterable at a specified position. @param iterable the iterable to access @param position index of the element to retrieve @return element at the specified position or throws exception if out of bounds
1475 Creates a BloomFilter instance using specified parameters. @return a new BloomFilter object configured with given settings
1476 Calculates wait time in seconds for acquiring permits. @param permits number of permits needed @return wait time in seconds
1477 Attempts to acquire one permit with a specified timeout. @param timeout maximum time to wait for the permit @return true if permit is acquired within timeout, false otherwise
1478 Attempts to acquire a single permit with a specified timeout. @param timeout maximum time to wait for the permit @param unit time unit for the timeout @return true if the permit is acquired within timeout, false otherwise
1479 Tries to acquire a specified number of permits immediately. @param permits number of permits to request @return true if permits are acquired, false otherwise
1480 Attempts to acquire a single permit immediately. @return true if permit is acquired, false otherwise
1481 Attempts to acquire specified permits with a given timeout. @param permits number of permits to request @param timeout maximum time to wait for permits @return true if permits are acquired within timeout, false otherwise
1482 Attempts to acquire a lock with a specified timeout. @param time timeout duration @param unit TimeUnit for the timeout @return true if lock acquired, false otherwise
1483 Protected constructor for AbstractService. Initializes the service without starting it immediately.
1484 Validates heap properties across all elements. @return true if all elements satisfy heap conditions, otherwise false
1485 Builds a CacheBuilder with specified configurations. @return Configured CacheBuilder instance
1486 Configures map with weak keys. @param mapMaker initial MapMaker instance @return MapMaker instance with weak key strength
1487 Checks if the current service state matches the expected state. Throws an exception if the actual state is different, with specific handling for FAILED state. @param expected the desired service state
1488 Retrieves value at specified row and column indices. Validates indices before accessing the array. @param rowIndex index of the row @param columnIndex index of the column @return value at the specified indices or null if invalid
1489 Sets a value at specified row and column indices. @param rowIndex index of the row @param columnIndex index of the column @param value new value to set, can be null @return old value at the specified indices or null if none existed
1490 Retrieves an element from the array at the specified index. @param index position of the element to retrieve @return double value at the given index
1491 Retrieves an element from the immutable integer array. @param index the position of the element to retrieve @return the integer at the specified index
1492 Retrieves element at specified index. @param index position of the element to retrieve @return value at the given index
1493 Finds the first matching character position in a sequence. @param sequence the input character sequence @param start the starting index for search @return index of first match or -1 if no match found
1494 Initializes an iterator with specified size and position. @param size total number of elements in the collection @param position initial cursor position within the collection
1495 Converts byte array to ByteArrayDataInput starting from a given index. @param bytes source byte array @param start starting index for conversion @return ByteArrayDataInput for reading bytes
1496 Validates UTF-8 encoding of a byte array. @param bytes the byte array to validate @param off the starting offset in the array @param len the length of the byte sequence to check @return true if the byte sequence is valid UTF-8, false otherwise
1497 Copies elements from source array to destination array. @param src source array @param offset starting index in source array @param len number of elements to copy @param dst destination array @return destination array with copied elements
1498 Masks a portion of an object array. @param elements source array @param offset starting index for masking @param length number of elements to mask @return new array containing the masked elements or empty if length is 0
1499 Masks a byte array with a hash code. @param dest destination byte array @param offset starting index in the destination array @param maxLength maximum length to mask @return masked length
1500 Encodes a byte array segment using a mask function. @param bytes input byte array @param off starting offset in the byte array @param len length of the segment to encode @return encoded string representation
1501 Reads bytes from an InputStream into a byte array. @param in the InputStream to read from @param b the destination byte array @param off the offset in the byte array to start writing @param len the number of bytes to read @return the total number of bytes read, or -1 if no more bytes are available @throws IOException if an I/O error occurs
1502 Reverses a segment of a boolean array. @param array the boolean array to be reversed @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1503 Reverses a portion of the byte array in place. @param array the byte array to be modified @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1504 Reverses a portion of the character array in place. @param array the character array to be modified @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1505 Reverses elements in a double array between specified indices. @param array the double array to be modified @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1506 Reverses elements in a float array between specified indices. @param array the float array to reverse @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1507 Creates a subarray from the specified indices. @param startIndex starting index (inclusive) @param endIndex ending index (exclusive) @return new ImmutableDoubleArray or EMPTY if startIndex equals endIndex
1508 Creates an immutable subarray from the given indices. @param startIndex starting index of the subarray (inclusive) @param endIndex ending index of the subarray (exclusive) @return ImmutableIntArray representing the subarray or EMPTY if startIndex equals endIndex
1509 Creates a subarray from the specified range. @param startIndex starting index (inclusive) @param endIndex ending index (exclusive) @return ImmutableLongArray representing the subarray or empty array if startIndex equals endIndex
1510 Reverses elements in an integer array between specified indices. @param array the integer array to reverse @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive) Validates indices and reverses elements in place.
1511 Reverses elements in a long array between specified indices. @param array the array to reverse @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1512 Reverses elements in a short array between specified indices. @param array the array to reverse @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1513 Inverts the sign bit of each byte in a specified range. @param array target byte array @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1514 Masks elements in a byte array within specified range. @param array the byte array to process @param fromIndex start index of the range (inclusive) @param toIndex end index of the range (exclusive)
1515 Applies unsigned mask to specified range of integers in an array. @param array target integer array @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1516 Applies a mask to specified range of an integer array. @param array target array @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1517 Applies unsigned operations to a subarray. @param array the long array to process @param fromIndex starting index of the range (inclusive) @param toIndex ending index of the range (exclusive)
1518 Masks elements in the specified range of an array. @param array target array of long values @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1519 Filters a collection based on a predicate. @param unfiltered original collection to filter @param predicate condition for filtering elements @return filtered collection
1520 Creates a Splitter using a specific character as the delimiter. @param separator character to split on @return configured Splitter instance
1521 Protected constructor for SleepingStopwatch.
1522 Initializes a Finalizer instance. @param finalizableReferenceClass class of finalizable references @param queue reference queue for processing finalizable references @param frqReference phantom reference to track the FRQ that started this instance
1523 Initializes a new Builder instance with insertion order preservation.
1524 Returns a new Builder instance for creating an ImmutableMultimap. @return Builder object configured to preserve insertion order
1525 Initializes a new Builder instance with insertion order preservation.
1526 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
1527 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
1528 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
1529 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
1530 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
1531 Creates an unmodifiable view of the given bidirectional map. @param bimap the original bidirectional map to wrap @return a new BiMap that cannot be modified
1532 Creates a new MutableClassToInstanceMap with an empty backing HashMap. @return MutableClassToInstanceMap instance initialized with a HashMap
1533 Creates a MutableClassToInstanceMap from a given backing map. @param backingMap the map to use for instance storage; must not be null @return a new MutableClassToInstanceMap instance
1534 Creates an empty ImmutableTypeToInstanceMap. @param <B> type parameter for the map @return an ImmutableTypeToInstanceMap with no mappings
1535 Constructs a new ForwardingSortedSetMultimap with no delegate set.
1536 Returns an unmodifiable view of the given multimap. @param delegate the original multimap to wrap @return an unmodifiable Multimap instance
1537 Creates an unmodifiable view of the given table. @param table the original table to wrap; must not be null @return a Table object that cannot be modified
1538 Adapts a standard Java Future to a ListenableFuture. @param future the original Future instance @param executor the executor for running listeners @return ListenableFuture object wrapping the input Future
1539 Retrieves value from the delegate cache by key. @param key unique identifier for the cached item @return value associated with the key or null if not found
1540 Retrieves or computes a cache entry. @param key key with which the specified value is to be associated @param valueLoader function for computing value if not present in cache @return the current (existing or computed) value associated with the specified key @throws ExecutionException if computation failed
1541 Retrieves multiple entries from the cache by keys. @param keys iterable of keys to retrieve @return an immutable map of key-value pairs found in the cache
1542 Stores a key-value pair in the delegate cache. @param key unique identifier for the cached item @param value data to be stored in the cache
1543 Delegates the insertion of entries to the underlying cache. @param m map of entries to be added to the cache
1544 Invalidates multiple cache entries by their keys. @param keys iterable collection of keys to invalidate
1545 Creates a new reference entry. @param segment cache segment managing this entry @param key the entry's key @param hash the hash code of the key @param next reference to the next entry in the chain @return newly created ReferenceEntry instance
1546 Creates a new reference entry for caching. @param segment cache segment where the entry is created @param key entry's key @param hash hash code of the key @param next reference to the next entry in the chain @return newly created ReferenceEntry object
1547 Creates a new cache entry. @param segment the cache segment @param key the entry's key @param hash the hash code of the key @param next reference to the next entry in the chain @return the newly created ReferenceEntry object
1548 Creates a new reference entry for the cache. @param segment local cache segment @param key entry key @param hash key's hash code @param next next entry in the chain @return newly created reference entry
1549 Creates a new reference entry for the cache. @param segment cache segment for management @param key entry key @param hash key's hash code @param next next entry in the chain @return newly created reference entry
1550 Abstract method to create a new reference entry. @param segment cache segment @param key entry key @param hash key's hash code @param next next entry in the chain @return newly created ReferenceEntry object
1551 Updates a cache entry with new key-value pair and manages associated data. @param entry the cache entry to update @param key the new key for the entry @param value the new value for the entry @param now current timestamp
1552 Transforms and returns size of delegate iterable. @return transformed Iterable's size
1553 Calculates the sum of node degrees and ensures evenness. @return half of the total degree sum if even, otherwise throws exception
1554 Converts InputStream to byte array. @param in InputStream to read from @return byte array containing the input stream data @throws IOException if an I/O error occurs
1555 Reads input stream into a byte array with expected size. @param in InputStream to read from @param expectedSize Expected total length of the byte array @return Byte array containing data from the input stream @throws IOException if an I/O error occurs
1556 Initializes the bi-directional map with given forward and backward mappings. @param forward map of primary key-value pairs @param backward map of inverse value-key pairs
1557 Retrieves and processes a collection of values associated with a key. @param key the key whose associated values are to be retrieved @return an unmodifiable list of processed values
1558 Applies a mask to filter values associated with a key. @param key the key whose values are to be masked @param values iterable of values to apply the mask on @return unmodifiable collection of filtered values
1559 Retrieves and returns an unmodifiable set of values associated with the given key. @param key the key whose associated values are to be retrieved @return an unmodifiable set of values or an empty set if the key is not present
1560 Retrieves sorted values associated with a key. @param key unique key to query @return SortedSet of values or empty set if none exist
1561 Generates a masked string representation of the collection. @return a string with elements separated by commas, enclosed in brackets
1562 Masks the current map into a string format. @return a masked string representation of the map
1563 Creates a HashMap with an adjusted capacity. @param expectedSize the anticipated number of entries @return HashMap instance initialized with calculated capacity
1564 Checks if a graph has cycles. @param graph the input graph to analyze @return true if cycles are detected, false otherwise
1565 Creates a HashBasedTable with specified expected size. @param expectedRows estimated number of rows @param expectedCellsPerRow estimated number of cells per row @return initialized HashBasedTable instance
1566 Creates a LinkedHashMap with an adjusted capacity. @param expectedSize the anticipated number of entries @return LinkedHashMap instance initialized with calculated capacity
1567 Creates a map based on the specified order type. @param expectedSize the anticipated number of entries @return Map instance with appropriate ordering
1568 Creates a HashSet with an initial capacity based on expected size. @param expectedSize the anticipated number of entries @return a new HashSet with adjusted capacity
1569 Creates a LinkedHashSet with an adjusted capacity. @param expectedSize the anticipated number of entries @return LinkedHashSet initialized with calculated capacity
1570 Initializes the service manager with a collection of services. @param services an immutable collection of services to manage
1571 Retrieves the first entry from the sorted multiset. @return ImmutableEntry of the first element and its count, or null if empty
1572 Retrieves the first entry from the delegate multiset. @return Entry object or null if the multiset is empty
1573 Retrieves and processes the first entry from the delegate multiset. @return Entry object or null if no entries are present
1574 Retrieves the first entry from the delegate multiset. @return First Entry or null if empty
1575 Returns the set of unique elements with their counts. @return Set of Entry objects representing element-value pairs
1576 Returns the set of unique elements with their counts. @return Set of Entry objects representing element-value pairs
1577 Creates a new TreeRangeSet and adds all ranges from the given RangeSet. @param rangeSet source RangeSet to add ranges from @return new TreeRangeSet containing all ranges from the input set
1578 Creates a TreeRangeSet from an iterable of ranges. @param ranges collection of Range objects to be added @return populated TreeRangeSet instance
1579 Returns a modifiable sorted map view of this multimap. @return NavigableMap where each key is associated with its corresponding collection of values
1580 Returns a set of masked cells from the table. @return Set of Cell objects representing masked entries
1581 Retrieves all values from the table. @return Collection containing all values in the HashBasedTable
1582 Returns the reverse of the current range. @return GeneralRange with reversed bounds and comparator
1583 Creates an immutable cell with specified keys and value. @param rowKey the row identifier for the cell @param columnKey the column identifier for the cell @param value the data stored in the cell @return ImmutableCell object
1584 Returns an immutable set of unique elements from the multiset. @return ImmutableSet containing unique elements
1585 Adds a key-value pair to the builder. @param key the entry's key @param value the entry's value @return the Builder instance for method chaining
1586 Creates an immutable map from two key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @return ImmutableMap containing the key-value pairs
1587 Creates an immutable map with three key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @return ImmutableMap containing the specified entries
1588 Creates an immutable map with four key-value pairs. @param k1, k2, k3, k4 keys for the entries @param v1, v2, v3, v4 values for the entries @return ImmutableMap object containing specified key-value pairs
1589 Creates an immutable map from five key-value pairs. @param k1,v1 first key-value pair @param k2,v2 second key-value pair @param k3,v3 third key-value pair @param k4,v4 fourth key-value pair @param k5,v5 fifth key-value pair @return ImmutableMap containing the specified entries
1590 Creates an immutable map with six key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @param k4 fourth key @param v4 value for the fourth key @param k5 fifth key @param v5 value for the fifth key @param k6 sixth key @param v6 value for the sixth key @return ImmutableMap containing the specified key-value pairs
1591 Creates an immutable map with 7 key-value pairs. @param k1,k2,...,k7 keys for the map entries @param v1,v2,...,v7 values for the corresponding keys @return ImmutableMap containing the specified key-value pairs
1592 Creates an immutable map with 8 key-value pairs. @param k1,k2,...,k8 keys for the map entries @param v1,v2,...,v8 values for the map entries @return ImmutableMap containing specified key-value pairs
1593 Creates an immutable map with nine key-value pairs. @param k1 to k9 keys for the map entries @param v1 to v9 values corresponding to each key @return ImmutableMap containing the specified entries
1594 Creates an immutable map from 10 key-value pairs. @param k1,k2,...,k10 keys for the map entries @param v1,v2,...,v10 values corresponding to each key @return ImmutableMap containing the specified key-value pairs
1595 Creates or reuses an immutable map entry. @param entry existing map entry to check for reuse @return ImmutableMapEntry object
1596 Adds a key-value pair from an Entry to the multimap. @param entry the Entry containing the key and value to add @return this Builder instance for chaining
1597 Adds multiple key-value pairs from an iterable of entries. @param entries iterable containing entries to add @return this Builder instance for chaining
1598 Adds a key-value pair from an Entry to the multimap. @param entry the Entry containing the key and value to add @return this Builder instance for chaining
1599 Applies a filtering predicate to a sorted set. @param unfiltered original sorted set of elements to filter @param predicate condition that elements must meet to be included in the filtered set @return new FilteredSortedSet with combined predicates if applicable, otherwise a new instance
1600 Rehashes and resizes the internal table. Handles null delegate by creating a new LinkedHashMap. Updates table size and mask as needed.
1601 Handles resizing and rehashing of the internal hash table. Checks for uninitialized table and delegates existing elements to a new set structure.
1602 Checks if the range is valid by comparing bounds. @return true if lower bound is less than or equal to upper bound
1603 Checks equality of this range with another Range. @param object the object to compare with @return true if both ranges have equal bounds, false otherwise
1604 Adds an element to the underlying list. @param element new element to add @return always true
1605 Returns an iterator over the elements in the list. @return ListIterator for traversing the masked elements
1606 Returns list iterator starting from index 0. @return ListIterator object for the underlying list
1607 Masks elements in the TreeMultiset based on range and comparator. @return AvlNode containing masked element or null if not applicable
1608 Converts a given Table to a HashBasedTable. @param table input Table to be converted @return new HashBasedTable instance populated with data from the input table
1609 Creates a TreeBasedTable with natural ordering for rows and columns. @return TreeBasedTable instance with sorted row and column keys
1610 Creates a new TreeBasedTable with specified row and column comparators. @param rowComparator comparator for sorting rows @param columnComparator comparator for sorting columns @return a new TreeBasedTable instance
1611 Creates a new HashBiMap with the specified initial capacity. @param expectedSize estimated number of entries in the map @return a new HashBiMap instance
1612 Returns a new Builder instance with default capacity. @return Builder object initialized with default settings
1613 Initializes a new Builder instance with default capacity.
1614 Creates a new Builder with natural ordering. @return Builder instance configured for natural key comparison
1615 Creates a new Builder for ImmutableSortedMap with a specified comparator. @param comparator defines the order of keys in the map @return Builder instance initialized with the given comparator
1616 Creates a Builder with reverse natural ordering. @return Builder configured for descending key order
1617 Creates an immutable map with a single key-value pair. @param k1 the unique key for the map @param v1 the value associated with the key @return ImmutableMap containing the single entry
1618 Returns an immutable bi-directional map with keys and values swapped. @return ImmutableBiMap representing the inverse of the stored mapping
1619 Creates a new immutable list builder. @return Builder instance for constructing an immutable list
1620 Creates a new Builder instance with the specified comparator. @param comparator defines the order of elements in the set @return Builder object for constructing an ImmutableSortedSet
1621 Creates a new Builder instance with natural ordering. @return Builder object configured to sort elements naturally
1622 Creates a Builder with natural ordering. @return Builder instance using natural element comparison
1623 Returns an immutable list in reverse order if condition is met. @return reversed ImmutableList or original if condition fails
1624 Converts a string to an immutable list of characters. @param string the input string @return ImmutableList containing characters from the string
1625 Creates an immutable list with a single element. @param e1 the element to include in the list @return an ImmutableList containing only e1
1626 Returns an immutable set of all entries in the multimap. @return ImmutableSet containing all key-value pairs
1627 Creates an immutable set with a single element. @param e1 the element to be included in the set, must not be null @return an ImmutableSet containing only e1
1628 Retrieves the character set associated with the media type. @return Optional containing the Charset or empty if not specified
1629 Invokes m1 on all managed services. @return This ServiceManager instance
1630 Checks health of all managed services. @return true if all services are healthy, false otherwise
1631 Creates a set builder with the specified expected size. Validates the expected size and initializes the builder. @param expectedSize initial capacity for the set @return Builder instance for creating an ImmutableSet
1632 Adds all entries from a given Multimap to the builder. @param multimap source Multimap containing key-value pairs @return this Builder instance for method chaining
1633 Throws a FileSystemException if file deletion fails. @param path the file path to check @param exceptions collection of IOExceptions encountered during deletion
1634 Merges multiple iterators into a single iterator. @param inputs variable number of input iterators @return ConcatenatedIterator containing elements from all inputs
1635 Retrieves value by key. @param key the key to search for @return the value associated with the key or null if not found
1636 Checks read count and triggers cleanup if threshold is not met. @param none
1637 Checks if the given key is present in the map. @param key the key to check for presence @return true if the key exists, false otherwise
1638 Retrieves a submap with keys in the specified range [fromKey, toKey]. @param fromKey lower bound key (inclusive) @param toKey upper bound key (exclusive) @return SortedMap containing the specified range of keys
1639 Compares two maps and categorizes their entries. @param left first map to compare @param right second map to compare @param valueEquivalence equivalence strategy for values @return MapDifference object with categorized entries
1640 Computes the difference between two sorted maps. @param left first sorted map @param right second map to compare with @return SortedMapDifference containing categorized entries
1641 Constructs an AsyncEventBus with specified identifier and executor. @param identifier unique event bus identifier @param executor task execution handler
1642 Constructs an AsyncEventBus with default settings. @param executor task execution handler @param subscriberExceptionHandler error handling strategy
1643 Initializes an AsyncEventBus with default settings. @param executor task execution handler
1644 Constructs an EventBus with specified identifier. @param identifier unique event bus identifier
1645 Constructs an EventBus with default settings. @param exceptionHandler strategy for handling subscriber exceptions
1646 Applies mask to index using helper methods. @param index original index value @return masked index value
1647 Masks an index to find the minimum child in a binary heap. @param index current node index @return masked index or -1 if no valid left child
1648 Determines the element based on priority logic. @return highest priority element or null if condition is met
1649 Masks and inserts element into heap or delegates to another heap. @param index initial position for insertion @param x element to insert
1650 Checks if an element is present in the multiset. @param object the element to check @return true if the element occurs more than zero times, false otherwise
1651 Adds one occurrence of an element to the underlying multiset. @param element the element to add @return always true after adding the element
1652 Checks if an element is present in the multiset. @param element the element to check @return true if the element exists with at least one occurrence
1653 Masks elements in the underlying multiset's iterator. Uses clear to process iterator entries.
1654 Retrieves the count of a specified object in the multiset. @param object the object to search for @return the count of the object, or 0 if not found
1655 Returns a mask value by delegating to underlying methods. @return integer mask value from m2()
1656 Returns the masked function name. @return masked function name as a string
1657 Converts collection to an array, ensuring it fits the provided array. @param array target array to be filled with elements from the collection @return array containing elements from the collection
1658 Retrieves and advances the next element from an iterator. @return next element or null if no more elements are available
1659 Returns a navigable set view of elements within the specified range. @param fromElement lower bound of the range (inclusive) @param toElement upper bound of the range (exclusive) @return SortedSet containing elements within the specified range
1660 Retrieves an element from the set less than or equal to the specified element. @param e the element to compare against @return the greatest element less than or equal to e, or null if no such element exists
1661 Retrieves elements less than or equal to a specified element. @param e the upper bound (inclusive) @return next element or null if none found
1662 Retrieves elements less than a specified element. @param toElement the upper bound (exclusive) @return NavigableSet containing elements up to but not including the specified element
1663 Retrieves elements greater than or equal to `e` from the underlying set. @param e lower bound element (inclusive) @return next element or null if none found
1664 Retrieves and returns the next element greater than or equal to the specified element. @param e the element to compare against @return the next element or null if no such element exists
1665 Returns a subset of elements within the specified range. @param fromElement lower bound (inclusive if fromInclusive is true) @param fromInclusive whether the lower bound is inclusive @param toElement upper bound (inclusive if toInclusive is true) @param toInclusive whether the upper bound is inclusive @return NavigableSet containing elements within the range [fromElement, toElement]
1666 Retrieves elements greater than or equal to `fromElement`. @param fromElement the lower bound (inclusive) @return SortedSet containing elements >= fromElement
1667 Returns a sorted set of row keys. @return SortedSet containing row keys in sorted order
1668 Returns the sorted map of rows and columns. @return SortedMap representing rows with their associated column-value maps
1669 Returns a synchronized version of the given deque. @param deque the original deque to wrap @return a synchronized Deque instance
1670 Initializes the character escaper with a mapping and safe range. @param replacementMap map of characters to their replacement strings @param safeMin minimum safe character @param safeMax maximum safe character
1671 Creates an Escaper instance with predefined character mappings. @return Escaper object configured with specific escape rules
1672 Constructs a new ArrayBasedUnicodeEscaper. @param replacementMap map of characters to their replacement strings @param safeMin minimum code point that is considered safe @param safeMax maximum code point that is considered safe @param unsafeReplacement string to replace unsafe characters or null
1673 Creates a HashCode from a byte array with length validation. @param bytes byte array representing the hash code @return HashCode object initialized with the given bytes
1674 Converts a hexadecimal string to a HashCode. @param string input hexadecimal string @return HashCode object representing the input string
1675 Combines multiple hash codes into a single hash code. @param hashCodes iterable of HashCode objects to combine @return combined HashCode object
1676 Combines multiple hash codes into a single hash code. @param hashCodes iterable of HashCode objects to combine @return combined HashCode object
1677 Creates an HMAC-MD5 hash function using a byte array key. @param key secret key as byte array @return HashFunction instance using HmacMD5 algorithm
1678 Generates an HMAC-SHA1 hash function using provided key. @param key byte array representing the secret key @return HashFunction instance configured with HMAC-SHA1 algorithm
1679 Generates an HMAC-SHA256 hash function using a provided key. @param key secret key for the MAC operation @return HashFunction instance configured with HmacSHA256 algorithm
1680 Generates an HMAC-SHA512 hash function using a byte array key. @param key secret key as a byte array @return HashFunction instance configured with HMAC-SHA512
1681 Wraps a byte array into a ByteSource. @param b the original byte array @return a ByteSource representing the byte array
1682 Creates a CharSource from a CharSequence. @param charSequence the character sequence to wrap @return CharSource instance based on the input type
1683 Writes multiple lines to the output stream using the system's line separator. @param lines iterable of CharSequence objects to write @throws IOException if an I/O error occurs during writing
1684 Writes lines from a stream to a buffered output using the default line separator. @param lines stream of CharSequence objects to write @throws IOException if an I/O error occurs during writing
1685 Deserializes a BloomFilter from an InputStream. @param in input stream containing serialized BloomFilter data @param funnel defines how objects are converted to bytes @return deserialized BloomFilter instance @throws IOException if deserialization fails
1686 Calculates mean of numbers in iterable. @param values collection of Number objects @return calculated mean as double
1687 Rounds a double to the nearest integer using specified rounding mode. @param x number to round @param mode rounding mode to apply @return rounded integer value
1688 Checks for potential hash flooding in the hash table. @param hashTable array representing the hash table @return true if flooding is detected, otherwise false
1689 Adds an element to the top K selection buffer. @param elem element to add
1690 Creates a case-insensitive version of the alphabet. @return Alphabet object with ignoreCase set to true
1691 Creates a TopKSelector instance. @param k the number of top elements to track @param comparator the comparator to define element order @return a new TopKSelector configured with the given parameters
1692 Creates a TopKSelector to find the top K elements. @param k number of top elements to track @param comparator defines element order @return TopKSelector configured with specified comparator and capacity
1693 Creates a linear transformation based on two points. @param x2 x-coordinate of the second point @param y2 y-coordinate of the second point @return LinearTransformation object representing the transformation
1694 Computes and returns a linear transformation for paired data. Validates conditions and uses statistical measures to determine the transformation. @return LinearTransformation object representing the computed transformation
1695 Creates a linear transformation based on dataset statistics. Validates conditions and uses appropriate transformations. @return LinearTransformation object representing the calculated transformation
1696 Checks if a number is prime using various tests. @param n the number to check for primality @return true if n is prime, false otherwise
1697 Computes the logarithm base 10 of a BigInteger with specified rounding mode. @param x the BigInteger value @param mode rounding mode to apply @return the floored log value based on the specified rounding mode
1698 Calculates the binomial coefficient (n choose k) with overflow checks. @param n total number of items @param k number of items to choose @return binomial coefficient or Long.MAX_VALUE if overflow occurs
1699 Computes variance of dataset. @param values iterable over Number objects representing the dataset @return variance of the dataset
1700 Updates paired statistics with new values and calculates product of deltas. @param x first data point @param y second data point
1701 Processes an iterable of numbers, updating statistics. @param values collection of numeric data points to process
1702 Adds multiple data points from an iterator. @param values iterator of numbers to add
1703 Merges statistics from another dataset. @param values Stats object containing other dataset's metrics
1704 Merges statistics from another accumulator. @param values StatsAccumulator to merge with, must have non-zero count
1705 Selects the k-th smallest element in a subarray using quickselect. @param required index of the desired element (0-based) @param array the double array to process @param from starting index of the range @param to ending index of the range
1706 Adds elements from a DoubleStream to the builder. @param stream the DoubleStream to add elements from @return this Builder instance for method chaining
1707 Adds a collection of double values to the builder. @param values iterable of Double elements to add @return the Builder instance for method chaining
1708 Adds integers from an IntStream to the builder. @param stream source of integers @return this Builder instance for method chaining
1709 Adds a collection of integers to the builder. @param values iterable collection of integers to add @return this Builder instance for method chaining
1710 Adds values from a LongStream to the Builder. @param stream source of long values @return this Builder instance for method chaining
1711 Deserializes and masks an array of longs from the input stream. @param s ObjectInputStream to read data from @throws IOException if I/O error occurs @throws ClassNotFoundException if class not found during deserialization
1712 Adds multiple long values from an Iterable. @param values iterable collection of Long objects to add @return the Builder instance for method chaining
1713 Converts a string to an integer using base 10. @param string the string to parse @return Integer value or null if conversion fails
1714 Parses an unsigned integer from a string using base 10. @param string the string to parse @return UnsignedInteger object representing the parsed value
1715 Applies a mask to an unsigned long value. @param val the input UnsignedLong value @return masked UnsignedLong result
1716 Converts an unsigned long to a string representation in the specified radix. @param x unsigned long value to convert @param radix base of the numeral system (must be between Character.MIN_RADIX and Character.MAX_RADIX) @return string representation of the unsigned long in the given radix
1717 Computes (a * b) % m using modular arithmetic. @param a first operand @param b second operand @param m modulus @return result of (a * b) % m
1718 Applies modular mask operation. @param a number to be masked @param m modulus value @return result of a mod m
1719 Applies mask to unsigned long value. @param val input UnsignedLong value @return result of masked operation as UnsignedLong
1720 Parses a string to an unsigned long using base 10. @param string the string to parse @return UnsignedLong representation of the parsed value
1721 Checks equality of this entry with another entry. @param object the other object to compare @return true if both entries have equal keys and values, false otherwise
1722 Computes a hash code for the map entry. @return Combined hash code of key and value, or 0 if both are null
1723 Generates a string representation of the map entry. @return Formatted string with key and value from delegate entry
1724 Checks if `m1()` returns a non-null value. @return true if `m1()` is not null, false otherwise
1725 Wraps an ExecutorService to ensure it is a ListeningExecutorService. @param delegate the original ExecutorService to be wrapped @return a ListeningExecutorService instance
1726 Wraps a ScheduledExecutorService to ensure it implements ListeningScheduledExecutorService. @param delegate underlying ScheduledExecutorService to be wrapped @return ListeningScheduledExecutorService instance
1727 Executes a collection of callable tasks and returns the result of the first completed task. @param executorService the ListeningExecutorService to execute tasks @param tasks the collection of Callable tasks to execute @param timed true if the operation should time out @param timeout the maximum time to wait for a task completion @param unit the time unit of the timeout parameter @return the result of the first completed task @throws InterruptedException if interrupted while waiting @throws ExecutionException if any task throws an exception @throws TimeoutException if timed and no task completes within the timeout
1728 Creates and returns a CombinedFuture to manage multiple asynchronous operations. @param combiner asynchronous callable task to execute @param executor executor for task execution @return ListenableFuture representing the combined result of futures
1729 Combines multiple futures using a specified callable. @param combiner task to execute upon completion of futures @param executor executor for task execution @return ListenableFuture representing the combined result
1730 Validates lock acquisition order against policy. @param policy lock policy to enforce @param acquiredLock newly acquired lock node
1731 Loads or reloads value for a given key. @param key unique identifier for the value @param oldValue existing value to be potentially updated @return ListenableFuture with the loaded/reloaded value
1732 Combines futures with non-cancellation propagation. @return wrapped ListenableFuture that cannot be cancelled
1733 Submits an asynchronous callable for execution. @param callable the task to execute asynchronously @param executor the executor service to use for task execution @return a non-cancellable ListenableFuture representing the task result
1734 Retrieves value from Future while handling exceptions. @param validator type validator for the future result @param future asynchronous task to get result from @param exceptionClass class of exception to handle @return result of the future or throws specified exception @throws X if operation fails and cannot be handled
1735 Retrieves value from Future with timeout and exception handling. @param future the Future object to retrieve the value from @param exceptionClass the class of the exception to throw on failure @param timeout maximum time to wait for a result @param unit time unit for the timeout @return the value retrieved from the Future @throws X the specified exception if retrieval fails
1736 Releases the lock and signals the next waiting thread. Ensures lock is released in a finally block to prevent deadlocks.
1737 Waits for a condition to be satisfied with a timeout. @param guard the condition to evaluate @param nanos maximum time to wait in nanoseconds @param signalBeforeWaiting whether to signal before waiting @return true if condition is met, false if timed out @throws InterruptedException if interrupted while waiting
1738 Wraps a ListenableFuture with timeout management. @param delegate future task to manage timeouts for @param time duration of the timeout @param unit time unit for the timeout duration @param scheduledExecutor service to schedule the timeout @return TimeoutFuture instance if not already done, otherwise returns the original delegate
1739 Schedules an asynchronous task with a specified delay. @param callable the task to execute asynchronously @param delay the time delay before execution @param executorService the scheduler for executing the task @return ListenableFuture representing the scheduled task
1740 Retrieves an enum constant by name using weak references. @param enumClass the class of the enum type to process @param value the name of the enum constant @return Optional containing the enum constant or empty if not found
1741 Finds the first element in the iterable that matches the predicate. @param iterable source iterable collection @param predicate condition to test each element @return Optional containing the matching element or empty if none found
1742 Checks if any element matches the given predicate. @param predicate condition to test elements against @return true if at least one element matches, false otherwise
1743 Creates a CharMatcher based on character count and set. @param totalCharacters number of characters to match @param table BitSet representing characters to match @param description matcher's description @return CharMatcher instance for efficient character matching
1744 Deprecated method to handle and propagate throwables based on types. @param throwable the throwable to process @param declaredType1 first expected exception type @param declaredType2 second expected exception type @throws X1 if the throwable is of the first declared type @throws X2 if the throwable is of the second declared type
1745 Handles exceptions by propagating and rethrowing them. @param e the exception to handle @throws IOException if an I/O error occurs
1746 Handles and masks exceptions by propagating them or wrapping in a RuntimeException. @param e the Throwable to handle @param declaredType the expected exception type @throws IOException if an I/O error occurs @throws X if the throwable is of the declared type
1747 Closes all resources in the stack and handles exceptions. @throws IOException if an I/O error occurs during closing
1748 Creates a named thread to execute a runnable. @param name thread name @param runnable task to be executed @return new Thread instance
1749 Filters a multimap by a key predicate. @param unfiltered the original multimap to filter @param keyPredicate predicate for filtering keys @return a filtered SetMultimap with entries matching the key predicate
1750 Filters a set multimap based on the given predicate. @param unfiltered original set multimap to filter @param entryPredicate condition for filtering entries @return filtered set multimap
1751 Retrieves an annotation of a specified type from the parameter. @param annotationType the type of annotation to retrieve @return the annotation if present, otherwise null
1752 Creates an unmodifiable iterator that merges multiple iterators. @param iterators collection of iterators to merge @param comparator comparator for sorting merged elements @return UnmodifiableIterator containing sorted and merged elements
1753 Converts an Iterable to an array. @param iterable source iterable @return Object array containing elements from the iterable, or null if empty
1754 Masks values associated with a key. @param key unique identifier for the values to mask @param values new values to replace existing ones @return list of old values before masking
1755 Masks values associated with a given key. @param key unique identifier for the values to mask @return list of original values or empty list if key not found
1756 Converts an iterable to a CopyOnWriteArrayList. @param elements iterable over the elements to be added @return CopyOnWriteArrayList containing elements from the iterable
1757 Creates a CopyOnWriteArraySet from an iterable of elements. @param elements iterable over the elements to be added @return CopyOnWriteArraySet containing elements from the iterable
1758 Performs binary search on a sorted list. @param list sorted list of elements @param key element to find @param comparator comparator for element comparison @param presentBehavior behavior when key is found @param absentBehavior behavior when key is not found @return index based on presence or absence of key
1759 Generates a list of locks based on input keys. Uses striped locking mechanism for efficient concurrency management. @param keys iterable of keys to generate locks for @return Iterable of locks corresponding to the input keys
1760 Generates a string representation of the network's properties. @return formatted string detailing network characteristics
1761 Generates a string representation of the graph's properties. @return formatted string with directed status, self-loop allowance, node count, and edge count
1762 Creates a navigable map with transformed values. @param fromMap source navigable map to transform @param transformer function to apply to each entry value @return a new navigable map with transformed values
1763 Applies a transformation function to each entry in the input sorted map. @param fromMap the source sorted map with keys of type K and values of type V1 @param function the transformation function to apply to each value @return a new SortedMap with keys of type K and transformed values of type V2
1764 Adds specified occurrences of an element to the multiset. @param element the element to add @param occurrences number of times to add the element @return count of the element before addition
1765 Adds specified occurrences of an element to the multiset. @param element the element to add @param occurrences number of times to add the element @return count of the element before addition
1766 Transforms values in a ListMultimap using a specified function. @param fromMultimap original ListMultimap with values of type V1 @param function transformation function from V1 to V2 @return new ListMultimap with transformed values of type V2
1767 Adds all elements from the provided collection to this multiset. @param elementsToAdd collection of elements to add @return true if operation successful, false otherwise
1768 Adds all elements from the specified collection to this multiset. @param elementsToAdd collection of elements to add @return true if operation successful, false otherwise
1769 Returns a synchronized view of the given Multimap. @param multimap the Multimap to be wrapped @return synchronized Multimap instance
1770 Wraps a table with synchronized access. @param table the table to be wrapped @return a synchronized Table instance for thread-safe operations
1771 Masks special characters in a string to Unicode escape sequences. @param string input string to process @return masked string with Unicode escapes if needed
1772 Reads characters from a Readable source into a StringBuilder. @param r the source Readable object @return StringBuilder containing read characters @throws IOException if an I/O error occurs
1773 Wraps a future with error handling. @param input original ListenableFuture to observe @param exceptionType type of exception to catch @param fallback function to execute on caught exception @param executor Executor for handling tasks or rejections @return ListenableFuture with enhanced error handling
1774 Cancels the future, optionally interrupting the running task. @param mayInterruptIfRunning true to interrupt the running task @return true if cancellation was successful or already cancelled
1775 Sets the value of the future and notifies listeners. @param value the result to set @return true if the value was set successfully, false otherwise
1776 Marks the future as failed with a given exception. @param throwable the cause of failure @return true if the future was successfully marked as failed, false otherwise
1777 Processes a ListenableFuture to update AbstractFuture status. Handles result retrieval, exceptions, and cancellation. @param future the ListenableFuture to process @return true if processing is successful, false otherwise
1778 Transforms a ListenableFuture's result using a specified function. @param input the original future whose result will be transformed @param function the transformation function to apply @param executor the executor to use for applying the transformation @return a new ListenableFuture representing the transformed result
1779 Atomically increments the value associated with a key by one. @param key the key to increment @return the updated value after incrementing
1780 Atomically decrements the value associated with the given key. @param key the key to update @return the updated value after decrementing by 1
1781 Atomically increments the value associated with the given key. @param key the key to increment @return updated value after increment
1782 Decrements the value associated with the key by 1. @param key the key to decrement @return updated value after decrement
1783 Creates and initializes an AtomicLongMap from a given map. @param m the input map with keys and long values @return an initialized AtomicLongMap instance
1784 Initializes graph builder with direction. @param directed true if graph is directed, false otherwise
1785 Initializes a new NetworkBuilder instance. @param directed true if the network is directed, false otherwise
1786 Initializes a value graph builder with specified directionality. @param directed true if the graph is directed, false otherwise
1787 Registers a listener with an associated executor. @param listener the listener object to register @param executor the executor for handling listener events
1788 Converts object from type A to type B using the convert method. @deprecated Use this.convert(a) instead. @param a source object of type A @return converted object of type B or null if conversion fails
1789 Creates and returns a new instance of CompactHashMap. @return A new CompactHashMap with default size
1790 Creates a new CompactHashMap with the specified initial size. @param expectedSize desired initial capacity for the map @return a new CompactHashMap instance
1791 Creates and returns a new instance of CompactHashSet with default size. @return CompactHashSet object initialized with default settings
1792 Creates a new CompactHashSet with the specified initial capacity. @param expectedSize the anticipated number of elements to store @return a new CompactHashSet instance
1793 Converts a map with collections of values to a ListMultimap. @param map input map with keys and collection of values @param factory supplier for creating lists to store values @return ListMultimap instance initialized with the provided map and factory
1794 Converts a Map to a SetMultimap. @param map the input map with keys mapping to collections of values @param factory supplier for creating sets to hold values @return a SetMultimap instance initialized with the given map and factory
1795 Constructs an empty Builder instance using LinkedHashMultiset.
1796 Composes this converter with another to create a new converter. @param secondConverter the second converter from B to C @return a composite Converter from A to C
1797 Joins elements from an array into a StringBuilder. @param builder the destination for the joined elements @param parts array of objects to join @return the given StringBuilder with joined elements
1798 Joins elements from an iterable into a string with specified separator. @param parts iterable over elements to join @return concatenated string of elements separated by 'separator'
1799 Creates a MapMakerInternalMap instance based on key and value strength. @param builder configuration for map settings @return MapMakerInternalMap with appropriate internal entry helper
1800 Creates a MapMakerInternalMap instance based on key and value strengths. @param builder configuration for map settings @return MapMakerInternalMap with appropriate entry helper @throws IllegalArgumentException if both weak keys and dummy values are specified
1801 Combines multiple iterables into a single `FluentIterable`. @param inputs variable number of iterable inputs @return FluentIterable containing all elements from the input iterables
1802 Retrieves an element from the transformed iterable at the specified position. @param position index of the element to retrieve @return element at the specified position or throws exception if out of bounds
1803 Acquires one permit and returns wait time in seconds. @return wait time in seconds for acquiring one permit
1804 Attempts to acquire a lock with a specified timeout. @param time duration of the timeout @return true if lock acquired, false otherwise
1805 Acquires a lock and checks a condition. @param guard Guard object associated with the monitor @param time timeout duration @param unit TimeUnit for the timeout @return true if condition is satisfied, false otherwise
1806 Creates a CacheBuilder using specified configurations. @param spec configuration specification for the cache builder @return configured CacheBuilder instance
1807 Creates a strong interner instance. @return configured Interner<E> using strong references
1808 Creates a weak interner instance. @return Weakly referenced Interner object
1809 Sets a value at the specified row and column keys. @param rowKey unique identifier for the row @param columnKey unique identifier for the column @param value new value to set, can be null @return old value at the specified keys or null if none existed
1810 Retrieves value at specified row and column keys. @param rowKey key of the row @param columnKey key of the column @return value at the specified keys or null if not found
1811 Checks equality with another ImmutableDoubleArray. @param object the object to compare @return true if equal, false otherwise
1812 Checks equality with another ImmutableIntArray. @param object the object to compare @return true if equal, false otherwise
1813 Checks equality with another ImmutableLongArray. @param object the object to compare @return true if equal, false otherwise
1814 Masks a string using the specified case format. @param format the CaseFormat to apply for masking @param s the input string to be masked @return masked string in the specified format
1815 Finds first matching character position in sequence starting from index 0. @param sequence input character sequence to search within @return index of first match or -1 if no match found
1816 Initializes an iterator with specified size. @param size total number of elements in the collection
1817 Converts an IPv6 address to a TeredoInfo object. Validates the address and extracts server, client, port, and flags. @param ip the input IPv6 address @return TeredoInfo object containing parsed data or throws exception if invalid
1818 Validates UTF-8 encoding of a byte array. @param bytes the byte array to validate @return true if the byte sequence is valid UTF-8, false otherwise
1819 Encodes a byte array using Base16 encoding. @param bytes input byte array to encode @return Base16 encoded string representation of the input bytes
1820 Reads a specific number of bytes from an InputStream into a byte array. @param in the InputStream to read from @param b the destination byte array @param off the offset in the byte array to start writing @param len the number of bytes to read @throws IOException if an I/O error occurs or end of stream is reached before reading the expected number of bytes
1821 Reverses the entire boolean array. @param array the boolean array to be reversed
1822 Rotates a segment of a boolean array by a specified distance. @param array the boolean array to be rotated @param distance the number of positions to rotate @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1823 Checks and reverses the entire byte array. @param array the byte array to be checked and reversed
1824 Rotates a portion of the byte array in place by a specified distance. @param array the byte array to be modified @param distance number of positions to rotate @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1825 Masks a portion of the byte array in place. @param array the byte array to be modified @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1826 Masks a portion of the character array in place. @param array the character array to be modified @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1827 Reverses the entire character array in place. @param array the character array to be reversed
1828 Rotates a portion of the character array by a specified distance. @param array the character array to be modified @param distance number of positions to rotate @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1829 Reverses elements in a double array between specified indices. @param array the double array to be modified @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1830 Reverses elements in a double array. @param array the double array to be reversed
1831 Rotates elements in a double array by a specified distance. @param array the double array to be rotated @param distance number of positions to rotate @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1832 Reverses elements in a float array between specified indices. @param array the float array to reverse @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1833 Reverses elements in a float array. @param array the float array to reverse
1834 Rotates elements in a float array by a specified distance. @param array the float array to rotate @param distance the number of positions to rotate @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1835 Masks elements in an integer array by reversing them between specified indices. @param array the integer array to mask @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1836 Reverses elements in an integer array. @param array the integer array to reverse
1837 Rotates elements in an integer array by a specified distance. @param array the integer array to rotate @param distance number of positions to rotate @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1838 Reverses elements in a long array between specified indices. @param array the array to reverse @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1839 Reverses elements in a long array and checks for null. @param array the array to reverse and check
1840 Rotates elements in a long array by a specified distance. @param array the array to rotate @param distance number of positions to rotate @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1841 Masks elements in a short array between specified indices. @param array the array to mask @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1842 Reverses elements in a short array. @param array the array to reverse
1843 Rotates elements in a short array by a specified distance. @param array the array to rotate @param distance number of positions to shift elements @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1844 Sorts byte array in ascending order using unsigned interpretation. @param array target byte array to sort
1845 Sorts byte array in descending order. @param array the byte array to sort
1846 Sorts an array of integers in ascending order using unsigned comparisons. @param array target integer array to be sorted
1847 Sorts an integer array in descending order. @param array target array to sort
1848 Sorts an unsigned long array in ascending order. @param array the array to sort
1849 Sorts an array of unsigned long values in descending order. @param array array of long values to be sorted
1850 Creates a Splitter using a specified string as the delimiter. @param separator string to split on @return configured Splitter instance
1851 Configures a Splitter with a specified character delimiter and returns a MapSplitter. @param separator character to split on @return configured MapSplitter instance
1852 Initializes and starts a Finalizer instance. @param finalizableReferenceClass class of finalizable references @param queue reference queue for processing finalizable references @param frqReference phantom reference to track the FRQ that started this instance
1853 Returns a new Builder instance with insertion order preservation. @return Builder object to construct ImmutableListMultimap
1854 Returns a new Builder instance for ImmutableSetMultimap. @return Builder object configured to preserve insertion order
1855 Returns an unmodifiable view of the given multiset. @param multiset the original multiset to wrap @return an unmodifiable Multiset instance
1856 Creates and returns an EvictingQueue with a specified maximum size. @param maxSize the maximum capacity of the queue; must be non-negative @return EvictingQueue instance initialized with the given size
1857 Protected constructor for ForwardingObject. Initializes without setting a delegate.
1858 Protected constructor initializing the ForwardingObject without setting a delegate.
1859 Protected constructor for ForwardingObject. Initializes the base class without setting a delegate.
1860 Creates an unmodifiable view of the given set of map entries. @param entrySet original set of key-value entries @return UnmodifiableEntrySet containing the same entries
1861 Returns an unmodifiable view of the specified navigable map. @param map original navigable map to wrap @return unmodifiable NavigableMap instance
1862 Returns an unmodifiable view of the given ListMultimap. @param delegate the original ListMultimap to wrap @return an unmodifiable ListMultimap or the original if already unmodifiable
1863 Returns an unmodifiable view of the given SetMultimap. If the input is already unmodifiable or immutable, it returns the original. Otherwise, wraps it in an UnmodifiableSetMultimap. @param delegate the underlying multimap to wrap @return an unmodifiable SetMultimap
1864 Creates an unmodifiable view of the given RowSortedTable. @param table the original table to wrap; must not be null @return an immutable RowSortedTable with the same data as the input
1865 Converts a standard Java Future to a ListenableFuture. @param future the original Future instance @return ListenableFuture representation of the input Future
1866 Attaches a callback to a ListenableFuture with an executor. @param future the ListenableFuture to attach to @param callback the callback to execute upon completion @param executor the executor to use for running the callback
1867 Initializes a LocalCache with specified builder settings and loader. Configures cache parameters like concurrency level, key/value strengths, and eviction policies. Sets up segments and their capacities based on configuration. @param builder CacheBuilder instance with configuration options @param loader CacheLoader for loading values (nullable)
1868 Creates a TreeMultiset with natural ordering. @return TreeMultiset instance using natural element comparison
1869 Creates a TreeMultiset with an optional comparator. @param comparator the comparator to define element order, or null for natural ordering @return a new TreeMultiset instance
1870 Replaces values associated with a key. @param key the key whose values are to be replaced @param values iterable of new values @return unmodifiable list of updated values
1871 Replaces values associated with a key. @param key the key whose values are to be replaced @param values iterable of new values for the key @return unmodifiable view of the updated set of values
1872 Retrieves and returns an unmodifiable set of values associated with the given key. @param key the key whose associated values are to be retrieved @return an unmodifiable set of values or an empty set if the key is not present
1873 Creates a new HashMultiset with an initial capacity. @param distinctElements expected number of distinct elements @return HashMultiset instance initialized with the specified capacity
1874 Recursively checks if a network or its subnetworks have specific properties. @param network the input network to analyze @return true if conditions are met, false otherwise
1875 Creates a LinkedHashMultiset with specified capacity. @param distinctElements expected number of unique elements @return LinkedHashMultiset instance initialized with given capacity
1876 Constructs a StandardNetwork using the provided builder and default maps. @param builder configuration for network properties
1877 Constructs a StandardValueGraph instance. @param builder configuration for graph properties
1878 Returns a new HashSet with capacity based on expected values per key. @return Set containing hashed values
1879 Returns a set of values with adjusted capacity. @return LinkedHashSet initialized with calculated capacity
1880 Adds a cell to the table with specified row and column keys. @param rowKey unique identifier for the row @param columnKey unique identifier for the column @param value data to be stored in the cell @return Builder instance for method chaining
1881 Adds a key-value pair to the builder. @param key the entry's key @param value the entry's value @return the Builder instance for method chaining
1882 Adds a class-instance pair to the builder. @param key the class type @param value the instance of the class @return the Builder instance for method chaining
1883 Aggregates entries from a map into the builder. @param map source map with class types as keys and instances as values @return Builder instance for method chaining
1884 Adds a key-value pair from an Entry to the builder. @param entry source of key and value @return Builder instance for method chaining
1885 Adds a key-value pair to the builder. @param key the entry's key @param value the entry's value @return the Builder instance for method chaining
1886 Adds a type-safe key-value pair to the builder. @param key Class object representing the generic type @param value instance of the specified type @return Builder instance for method chaining
1887 Adds a type-safe key-value pair to the builder. @param key TypeToken representing the key's type @param value instance of the value associated with the key @return Builder instance for method chaining
1888 Adds multiple key-value pairs from an iterable of entries. @param entries iterable containing entries to add @return this Builder instance for chaining
1889 Adds multiple key-value pairs from an iterable of entries. @param entries iterable containing entries to add @return this Builder instance for chaining
1890 Filters a navigable set based on a given predicate. @param unfiltered original navigable set to filter @param predicate condition that elements must meet to be included @return filtered navigable set with combined predicates if applicable
1891 Builds an immutable sorted map based on the current state. @return ImmutableSortedMap with entries sorted by comparator
1892 Adds a range-value entry to the builder. @param range the key range for the entry @param value the value associated with the range @return this Builder instance for method chaining
1893 Adds a non-empty range to the builder. @param range Range to add; must not be empty @return This Builder instance for chaining
1894 Computes the intersection of two connected ranges. @param connectedRange the range to intersect with @return a new Range representing the intersection or throws an exception if disconnected
1895 Ensures two ranges have no overlap and returns the range that comes first. @param otherRange another range to compare with @return a new Range object representing the non-overlapping part @throws IllegalArgumentException if ranges intersect
1896 Determines the intersection of two ranges. @param other the range to intersect with @return a Range representing the intersection or null if disjoint
1897 Adjusts the range based on domain context. @param domain discrete domain context @return adjusted Range object or original if unchanged
1898 Creates a new HashBiMap with default capacity. @return a new HashBiMap instance with initial capacity of 16
1899 Creates a HashBiMap from a given map. @param map input map to convert @return new HashBiMap instance with entries from the input map
1900 Creates a new immutable class-to-instance map builder. @return Builder instance for constructing ImmutableClassToInstanceMap
1901 Creates an ImmutableClassToInstanceMap with a single entry. @param type class type of the instance @param value immutable instance to be mapped @return ImmutableClassToInstanceMap containing the specified type and value
1902 Returns an immutable set of values from the inverse mapping. @return ImmutableSet containing values from the inverted map
1903 Returns a reversed view of the given list. Handles different list types with specific optimizations. @param list the original list to reverse @return reversed List<T>
1904 Creates an immutable list from the given array. @param elements array of elements to include in the list @return ImmutableList containing the provided elements
1905 Creates an immutable list from the given array. @param elements source array of elements to include in the list @param length number of elements to consider from the array @return ImmutableList containing specified elements
1906 Returns a sublist from fromIndex (inclusive) to toIndex (exclusive). @param fromIndex starting index of the sublist @param toIndex ending index of the sublist (exclusive) @return immutable sublist from fromIndex to toIndex
1907 Creates an ImmutableRangeMap with a single range-value pair. @param range the range to map @param value the value associated with the range @return ImmutableRangeMap containing the specified range and value
1908 Creates an immutable range set from a single range. @param range the range to include in the set @return ImmutableRangeSet containing the specified range or all possible values if invalid
1909 Creates an ImmutableSortedMap with a single entry. @param comparator key comparator for sorting @param k1 the key of the entry @param v1 the value of the entry @return an ImmutableSortedMap containing one key-value pair
1910 Creates an immutable set from an array of elements. @param elements array of elements to be included in the set @return ImmutableSet containing the provided elements
1911 Creates a builder for an immutable set. @return A new Builder instance with default capacity
1912 Combines two iterators into one. @param a first iterator @param b second iterator @return Iterator containing elements from both inputs
1913 Merges three iterators into one. @param a first iterator @param b second iterator @param c third iterator @return merged Iterator containing elements from all inputs
1914 Merges and validates four iterators. @param a,b,c,d input iterators to merge @return ConcatenatedIterator containing elements from all inputs
1915 Retrieves all subscribers for the given event. @param event the event to find subscribers for @return Iterator over Subscribers associated with the event type
1916 Retrieves and validates result from a ClosingFuture. @param closingFuture the future to process @return the result of the future or null if not present @throws ExecutionException if an exception occurred while computing the result
1917 Checks if a value exists in the segment. @param value to search for @return true if value is found, false otherwise
1918 Retrieves the value associated with a given key. Iterates through entries in the underlying map, returning the value if found. @param key key whose associated value is to be returned @return value associated with the key or null if not present
1919 Masks elements in an iterator by skipping them. Delegates to underlying map's entry set iterator.
1920 Checks if a condition related to map entries is not met. @return true if the condition is not satisfied, false otherwise
1921 Computes a custom hash code mask. @return the computed hash code mask value
1922 Compares two maps and categorizes their entries. @param left first map to compare @param right second map to compare @return MapDifference object with categorized entries
1923 Constructs an EventBus with default identifier.
1924 Adjusts the heap by comparing and swapping elements. @param index current element's index @param x element to be placed in the correct position @return new index after adjustment or original index if no change
1925 Masks an index to find the minimum grandchild in a binary heap. @param index current node index @return masked index or -1 if no valid left child
1926 Checks if the set contains an element equal to the specified object. @param object the object to check for containment @return true if the set contains the object, false otherwise
1927 Checks if the set contains an element equal to the specified object. @param object the object to check for containment @return true if the set contains an element equal to the specified object, false otherwise
1928 Returns a subset of elements within a specified range. @param fromElement lower bound (inclusive) @param toElement upper bound (exclusive) @return SortedSet containing elements in the range [fromElement, toElement)
1929 Returns a sorted set of row keys. @return SortedSet containing row keys in sorted order
1930 Retrieves values associated with a given key. @param key the key whose associated values are to be returned @return a set of values associated with the key, or an empty set if none
1931 Creates a BloomFilter with Murmur128 hash strategy. @param funnel defines how objects are converted to bytes @param expectedInsertions estimated number of elements to insert @param fpp desired false positive probability @return new BloomFilter object configured with specified parameters
1932 Masks and rounds a double value to an integer within valid range. @param x input double value @param mode RoundingMode to apply @return rounded integer value or throws if out of range
1933 Masks and rounds a double value to a long. @param x input double value @param mode RoundingMode to apply @return rounded long value
1934 Adds all elements from the iterator to the top K selection buffer. @param elements iterator of elements to add
1935 Creates a TopKSelector instance with natural ordering. @param k the number of top elements to track @return a new TopKSelector configured to use natural element order
1936 Creates a TopKSelector to find the top K elements using natural ordering. @param k number of top elements to track @return TopKSelector configured with natural comparator and specified capacity
1937 Checks if an integer is prime. @param n the number to check for primality @return true if n is prime, false otherwise
1938 Computes the binomial coefficient (n choose k) using BigInteger for large values. @param n total number of items @param k number of items to choose @return BigInteger representing the binomial coefficient
1939 Computes statistical metrics from a dataset. @param values collection of numeric data points @return Stats object with computed statistics
1940 Computes statistics from an iterator of numbers. @param values iterator of numerical data points @return Stats object containing statistical metrics
1941 Updates statistics with new paired data. @param values PairedStats object containing new dataset metrics
1942 Computes statistics from a stream of double values. @param values input double stream @return Stats object with computed mean, variance, etc.
1943 Computes statistics from an IntStream. @param values stream of integers to analyze @return Stats object containing statistical metrics
1944 Computes statistics from a stream of long values. @param values LongStream containing the data points @return Stats object with computed statistical properties
1945 Merges statistics from a stream of data points. @param values DoubleStream containing data points to accumulate
1946 Updates statistics with an IntStream of values. @param values stream of integers to add
1947 Merges statistics from a stream of long values. @param values LongStream containing data points to accumulate
1948 Recursively partitions and selects quantiles in a dataset. @param allRequired sorted indices of required quantiles @param requiredFrom starting index of the range to process @param requiredTo ending index of the range to process @param array data array to partition @param from lower bound of the current search range @param to upper bound of the current search range
1949 Creates an ImmutableDoubleArray from an Iterable of Double values. @param values iterable collection of Double elements @return ImmutableDoubleArray containing all elements or empty array if none are present
1950 Converts an iterable of integers to an immutable array. @param values iterable collection of integers @return ImmutableIntArray containing the converted values or EMPTY if none are present
1951 Creates an ImmutableLongArray from an Iterable of Longs. @param values iterable collection of Long objects @return ImmutableLongArray instance or EMPTY if no elements added
1952 Converts the unsigned long value to a string representation in the specified radix. @param radix base of the numeral system (must be between Character.MIN_RADIX and Character.MAX_RADIX) @return string representation of the unsigned long in the given radix
1953 Converts an unsigned long to a decimal string. @param x unsigned long value to convert @return string representation of the unsigned long in base 10
1954 Executes a collection of callable tasks and returns the result of the first completed task. @param executorService the ListeningExecutorService to execute tasks @param tasks the collection of Callable tasks to execute @param timed true if the operation should time out @param timeout the maximum time to wait for a task completion @return the result of the first completed task @throws InterruptedException if interrupted while waiting @throws ExecutionException if any task throws an exception @throws TimeoutException if timed and no task completes within the timeout
1955 Combines multiple futures using a specified runnable. @param combiner task to execute upon completion of futures @param executor executor for task execution @return ListenableFuture representing the combined result
1956 Wraps a ListenableFuture in a ClosingFuture. @param future the ListenableFuture to wrap @return a ClosingFuture instance managing the provided future
1957 Attempts to retrieve and remove the head of the queue. @return the head of the queue, or null if empty
1958 Retrieves and removes the head of the queue. @return the head element or null if the queue is empty
1959 Submits a callable for asynchronous execution. @param callable the task to execute asynchronously @param executor the executor service to use for task execution @return a non-cancellable ListenableFuture representing the task result
1960 Retrieves value from Future with timeout and exception handling. @param future the Future object to retrieve the value from @param exceptionClass the class of the exception to throw on failure @param timeout maximum time to wait for a result @param unit time unit for the timeout @return the value retrieved from the Future @throws X the specified exception if retrieval fails
1961 Notifies service stopped and transitions state. @throws IllegalStateException if service is not in a valid state for stopping
1962 Handles service failure by notifying listeners and updating state. @param cause the exception causing the failure
1963 Handles service startup timing and monitoring. @param service the service to be monitored
1964 Transitions a service from one state to another, handling state checks and notifications. @param service the service being transitioned @param from current state of the service @param to target state for the service
1965 Processes a guard condition and ensures lock release. @param guard the condition to evaluate and process @throws InterruptedException if interrupted while waiting
1966 Waits for a condition to be met before proceeding. @param guard the condition to evaluate and process @throws InterruptedException if interrupted while waiting
1967 Ensures the current thread holds the lock and waits for a condition. @param guard the condition to wait on @throws IllegalMonitorStateException if the thread does not own the lock
1968 Waits for a condition specified by the guard. @param guard the condition to wait on @throws IllegalMonitorStateException if the current thread does not own the lock
1969 Waits for a condition to be satisfied with a timeout. @param guard the condition to evaluate @param time maximum wait time @param unit TimeUnit for the timeout @return true if condition is met, false if timed out @throws InterruptedException if interrupted while waiting
1970 Waits for a condition to be satisfied with a timeout. @param guard the condition to evaluate @param time timeout duration @param unit TimeUnit for the timeout @return true if condition is met, false if timed out @throws InterruptedException if interrupted while waiting
1971 Waits for a condition with a specified timeout. @param guard the condition to evaluate @param time timeout duration @param unit TimeUnit for the timeout @return true if condition is met, false if timed out @throws InterruptedException if interrupted while waiting
1972 Waits for a condition with a specified timeout. @param guard condition to wait on @param time maximum wait duration @param unit TimeUnit for the timeout @return true if condition is met, false if timed out @throws IllegalMonitorStateException if not holding lock
1973 Applies a timeout to the current future. @param timeout duration of the timeout @param unit time unit for the timeout @param scheduledExecutor service to schedule the timeout @return FluentFuture with applied timeout
1974 Wraps a ListenableFuture with a timeout. @param delegate future task to manage timeouts for @param time duration of the timeout @param scheduledExecutor service to schedule the timeout @return TimeoutFuture instance or original delegate if already done
1975 Finds first element matching predicate. @param predicate condition to test each element @return Optional containing the matching element or empty if none found
1976 Creates a CharMatcher based on character count and set. Uses BitSet for efficient character matching operations. @return CharMatcher instance for fast character matching
1977 Handles exceptions by propagating them based on types. @param e the original throwable @param declaredType1 first expected exception type @param declaredType2 second expected exception type @throws IOException if an I/O error occurs @throws X1 if the throwable is of the first declared type @throws X2 if the throwable is of the second declared type
1978 Writes byte array to output stream. @param bytes data to write @throws IOException if an I/O error occurs
1979 Writes data from an InputStream to a managed OutputStream. @param input source InputStream containing byte data @return number of bytes written @throws IOException if an I/O error occurs
1980 Checks if the byte source is empty. @return true if no bytes are available, false otherwise @throws IOException if an I/O error occurs
1981 Returns the size of the byte source if known, otherwise reads it to determine the size. @return Size of the byte source in bytes @throws IOException if an I/O error occurs
1982 Copies byte data from a source to an output stream. @param output destination output stream @return number of bytes copied @throws IOException if an I/O error occurs
1983 Copies bytes from an InputStream to a ByteSink. @param sink destination for byte data @return number of bytes copied @throws IOException if an I/O error occurs
1984 Converts input stream to byte array with optional size handling. @return byte array containing the input stream data @throws IOException if an I/O error occurs during processing
1985 Processes byte stream using a given processor. @param processor the ByteProcessor to apply @return result from ByteProcessor after processing all data @throws IOException if an I/O error occurs
1986 Compares current ByteSource with another for equality. @param other the ByteSource to compare against @return true if both sources are equal, false otherwise @throws IOException if an I/O error occurs during comparison
1987 Writes a character sequence to an output stream. @param charSequence the characters to write @throws IOException if an I/O error occurs
1988 Copies characters from a Readable source to an output stream. @param readable the source of characters @return number of characters copied @throws IOException if an I/O error occurs
1989 Returns the length of the character source. @return number of characters in the source @throws IOException if an I/O error occurs
1990 Copies characters from a source to an Appendable destination. @param appendable the destination for copied characters @return number of characters copied @throws IOException if an I/O error occurs
1991 Copies characters from a source to a sink. @param sink destination for character data @return number of characters copied @throws IOException if an I/O error occurs
1992 Reads and returns the first line from a character source. @return The first line of text or null if no data is available @throws IOException if an I/O error occurs during reading
1993 Processes lines from a readable source using a LineProcessor. @param processor the processor to apply to each line @return result from processor after processing all lines or breaking early @throws IOException if an I/O error occurs
1994 Checks if the character source is empty. @return true if the source is empty, false otherwise @throws IOException if an I/O error occurs
1995 Resizes the cache table to accommodate more entries. Handles rehashing and redistribution of existing entries.
1996 Filters a Multimap based on a key predicate. @param unfiltered the original multimap to filter @param keyPredicate the predicate used to filter keys @return a new FilteredKeyMultimap with filtered keys
1997 Filters a set multimap based on entry values. @param unfiltered original set multimap to filter @param valuePredicate condition for filtering entry values @return filtered set multimap
1998 Filters a multimap based on the given predicate. @param unfiltered original multimap to filter @param entryPredicate condition for filtering entries @return filtered multimap
1999 Returns an iterator that merges and deduplicates column keys. Uses backing map's values, merges them, sorts by comparator, and removes duplicates.
2000 Creates an immutable bi-map from entries. @param entries iterable of key-value pairs @return ImmutableBiMap containing the provided entries
2001 Creates an immutable map from an iterable of entries. @param entries iterable containing key-value pairs @return ImmutableMap with the provided entries
2002 Converts an Iterable to an array of specified type. @param iterable source iterable @param type Class object representing the array component type @return array containing elements from the iterable
2003 Creates an ImmutableSortedSet from elements with a given comparator. @param comparator the comparator to define element order @param elements iterable source of elements @return ImmutableSortedSet containing sorted elements
2004 Performs binary search on a transformed list. @param list original list of elements @param keyFunction function to extract keys from list elements @param key element key to find @param keyComparator comparator for key comparison @param presentBehavior behavior when key is found @param absentBehavior behavior when key is not found @return index based on presence or absence of key
2005 Retrieves and removes all values associated with the specified key. @param key the key whose values are to be retrieved and removed @return nothing, always throws UnsupportedOperationException as modification is not allowed
2006 Transforms values of a navigable map using a given function. @param fromMap source navigable map to transform @param function transformer function to apply to each entry value @return a new navigable map with transformed values
2007 Checks and removes table entry based on conditions. @param rowKey key identifying the row @param columnKey key identifying the column @param value value to check against @return true if removal condition is met, false otherwise
2008 Returns a synchronized version of the given ListMultimap. @param multimap the ListMultimap to be wrapped @return synchronized ListMultimap or original if already synchronized/immutable
2009 Wraps a SetMultimap in a synchronized version. @param multimap the original SetMultimap to be wrapped @return synchronized SetMultimap or the original if already thread-safe
2010 Converts Readable to String. @param r source Readable object @return String representation of the Readable content @throws IOException if an I/O error occurs
2011 Catches exceptions of a specified type and handles them using a fallback function. @param exceptionType type of exception to catch @param fallback function to execute on caught exception @param executor Executor for handling tasks or rejections @return FluentFuture with enhanced error handling
2012 Transforms the result of this future using a specified function. @param function the transformation function to apply @param executor the executor to use for applying the transformation @return a new FluentFuture representing the transformed result
2013 Creates a directed graph builder. @return GraphBuilder configured for directed graphs
2014 Creates an undirected graph builder. @return GraphBuilder configured for undirected graphs
2015 Creates a GraphBuilder with settings from an existing graph. @param graph the source graph to copy properties from @return a new GraphBuilder configured like the input graph
2016 Creates a directed NetworkBuilder instance. @return NetworkBuilder configured for directed networks
2017 Creates an undirected NetworkBuilder instance. @return NetworkBuilder configured for undirected networks
2018 Creates a new NetworkBuilder configured with properties from the given network. @param network source network to copy properties from @return NetworkBuilder instance with copied configuration
2019 Creates a directed value graph builder. @return ValueGraphBuilder configured for directed graphs
2020 Creates an undirected value graph builder. @return ValueGraphBuilder configured for undirected graphs
2021 Creates a ValueGraphBuilder from an existing ValueGraph. @param graph the source ValueGraph to copy properties from @return a new ValueGraphBuilder with copied configurations
2022 Registers a service listener with an executor. @param listener the listener object to register @param executor the executor for handling listener events
2023 Creates and returns an empty CompactLinkedHashSet. @return newly instantiated CompactLinkedHashSet
2024 Creates a CompactHashSet from a given collection. @param collection the source collection of elements @return a new CompactHashSet containing all elements from the collection
2025 Creates a CompactLinkedHashSet with an initial capacity. @param expectedSize the anticipated number of elements to store @return a new CompactLinkedHashSet instance
2026 Converts a Map to a SortedSetMultimap. @param map input map with keys mapping to collections of values @param factory supplier for creating sorted sets of values @return SortedSetMultimap instance using the provided map and factory
2027 Creates a collector to build an immutable multiset with each element having a count of 1. @return Collector for creating ImmutableMultiset from stream
2028 Creates a collector for an immutable multiset from input elements. @param elementFunction extracts the element from each item @param countFunction determines the count for each element @return Collector to create ImmutableMultiset
2029 Returns a new immutable multiset builder. @return Builder instance for creating an ImmutableMultiset
2030 Joins array elements into a string. @param parts array of objects to join @return concatenated string of array elements
2031 Joins elements of this iterable using provided Joiner. @param joiner object responsible for joining elements @return concatenated string of iterable elements
2032 Normalizes a file path by resolving relative components. @param pathname the input file path to normalize @return normalized absolute or relative file path
2033 Parses encoded trie data, updating the builder with domain suffix types. @param stack stack to manage character sequences @param encoded encoded string containing trie data @param start starting index in the encoded string @param builder builder to store parsed domain suffixes and their types @return number of characters processed
2034 Constructs a concurrent map based on configuration. Uses ConcurrentHashMap by default or custom MapMakerInternalMap if specified. @return ConcurrentMap instance with configured settings
2035 Applies a transformation function to each element and flattens the results. @param function mapping function from E to Iterable of T @return FluentIterable containing all transformed elements
2036 Combines multiple iterables into a single iterable. @param inputs variable number of iterable inputs @return Iterable containing all elements from the input iterables
2037 Waits for task completion with a specified timeout. @param timeout time to wait before timing out @param unit unit of the timeout time @return result of the computation if completed within timeout @throws InterruptedException if thread is interrupted while waiting @throws TimeoutException if task does not complete in time @throws ExecutionException if task completes with an exception
2038 Retrieves graph connections for a given node. @param node the node to fetch connections for @return GraphConnections instance for the node
2039 Attempts to acquire lock and check condition with specified duration. @param guard Guard object associated with the monitor @param time timeout duration as a Duration object @return true if condition is satisfied within timeout, false otherwise
2040 Converts a string to a specified case format, handling word boundaries. @param format the target CaseFormat for conversion @param s the input string to be converted @return the converted string in the specified format
2041 Masks a string using the specified case format while preserving word boundaries. @param format the CaseFormat to apply for masking @param s the input string to be masked @return masked string in the specified format
2042 Masks a string using the specified case format, handling word boundaries. @param format the CaseFormat to apply for masking @param s the input string to be masked @return masked string in the specified format
2043 Masks a string using the specified case format. @param format target CaseFormat for masking @param str input string to be masked @return masked string in the specified format
2044 Checks if no characters in the sequence match the criteria. @param sequence input character sequence to check @return true if no matches found, false otherwise
2045 Masks characters in sequence by shifting non-matching characters to the left. @param sequence input character sequence to be masked @return masked string with non-matching characters shifted
2046 Masks characters in sequence starting from first match. @param sequence input character sequence to process @param replacement character used for masking @return modified string with masked characters
2047 Masks an IPv6 address to its embedded IPv4 form. @param ip the Inet6Address to mask @return masked Inet4Address object or throws exception if none found
2048 Reads bytes from the input stream and updates the hash. @param bytes buffer to read into @param off starting offset in the buffer @param len number of bytes to read @return number of bytes read or -1 if end of stream @throws IOException if an I/O error occurs
2049 Reads data from an InputStream into a byte array. @param in the InputStream to read from @param b the destination byte array @throws IOException if an I/O error occurs
2050 Rotates a boolean array by a specified distance. @param array the boolean array to be rotated @param distance the number of positions to rotate
2051 Rotates the entire byte array in place by a specified distance. @param array the byte array to be modified @param distance number of positions to rotate
2052 Sorts byte array in descending order. @param array the byte array to be sorted
2053 Sorts and masks a character array in descending order. @param array the character array to be processed
2054 Rotates the entire character array by a specified distance. @param array the character array to be modified @param distance number of positions to rotate
2055 Sorts double array in descending order. @param array the double array to be sorted
2056 Rotates elements in a double array by a specified distance. @param array the double array to be rotated @param distance number of positions to rotate
2057 Sorts float array in descending order. @param array the float array to sort
2058 Rotates elements in a float array by a specified distance. @param array the float array to rotate @param distance the number of positions to rotate
2059 Sorts an integer array in descending order. @param array the integer array to sort
2060 Rotates elements in an integer array by a specified distance. @param array the integer array to rotate @param distance number of positions to rotate
2061 Sorts long array in descending order. @param array the array to sort
2062 Rotates elements in a long array by a specified distance. @param array the array to rotate @param distance number of positions to rotate
2063 Sorts an array of shorts in descending order. @param array the short array to sort
2064 Rotates elements in a short array by a specified distance. @param array the array to rotate @param distance number of positions to shift elements
2065 Configures Splitter with specified delimiter and returns MapSplitter. @param separator string to split on @return MapSplitter instance for further splitting into key-value pairs
2066 Creates a RateLimiter with specified parameters. @param permitsPerSecond rate of permit issuance @param warmupPeriod duration of the warmup phase (non-negative) @param unit time unit for warmupPeriod @return configured RateLimiter instance
2067 Creates an unmodifiable view of a sorted multiset. @param sortedMultiset the original sorted multiset to wrap @return an unmodifiable SortedMultiset object
2068 Returns an unmodifiable view of the specified navigable set. @param set the navigable set to wrap @return an unmodifiable navigable set
2069 Converts a collection of map entries to an unmodifiable view. @param entries the original collection of key-value entries @return UnmodifiableEntrySet if entries is a Set, otherwise UnmodifiableEntries
2070 Returns an unmodifiable view of the given sorted set multimap. @param delegate the original sorted set multimap to wrap @return an unmodifiable SortedSetMultimap
2071 Wraps a ListenableFuture with resource management. @param future the ListenableFuture to wrap @param closingExecutor executor for closing resources @return ClosingFuture instance managing resource closure
2072 Attaches a callback to this future with an executor. @param callback the callback to execute upon completion @param executor the executor to use for running the callback
2073 Creates a new EnumBiMap with specified enum types for keys and values. @param keyType class of the enum keys @param valueType class of the enum values @return initialized EnumBiMap instance
2074 Creates an EnumHashBiMap for the specified enum type. @param keyType enum class for keys @return a new EnumHashBiMap instance initialized with the given key type
2075 Creates a TreeMultiset from an iterable of elements. @param elements source of elements to add @return TreeMultiset instance containing the added elements
2076 Initializes a new Builder with a specified comparator. @param comparator defines element order; must not be null
2077 Replaces values associated with a key. @param key the key whose values are to be replaced @param values iterable of new values for the key @return unmodifiable view of the updated set of values
2078 Replaces all values associated with a key. @param key the key to update @param values the new collection of values for the key @return the updated set of values for the key
2079 Creates a HashMultiset from an iterable of elements. @param elements source of elements to add to the multiset @return HashMultiset instance containing the elements
2080 Creates an ArrayListMultimap with specified capacities. @param expectedKeys the anticipated number of keys @param expectedValuesPerKey the anticipated average number of values per key @return a new ArrayListMultimap instance
2081 Creates a new HashMultimap with specified capacities. @param expectedKeys estimated number of distinct keys @param expectedValuesPerKey average number of values per key @return initialized HashMultimap instance
2082 Creates a new HashMultimap from an existing Multimap. @param multimap the source Multimap to copy entries from @return a new HashMultimap containing the same key-value pairs as the input
2083 Creates a new LinkedListMultimap with an estimated number of keys. @param expectedKeys approximate number of unique keys to be stored @return LinkedListMultimap instance initialized with the given capacity
2084 Creates a LinkedHashMultiset from an iterable. @param elements source of elements to add @return LinkedHashMultiset instance with elements added
2085 Creates a new LinkedHashMultimap with default capacities. @return LinkedHashMultimap instance initialized with default key and value set capacities
2086 Creates a LinkedHashMultimap with specified key and value capacities. @param expectedKeys number of keys expected to be stored @param expectedValuesPerKey average number of values per key @return LinkedHashMultimap instance initialized with calculated capacities
2087 Initializes a new mutable network using the provided builder. @param builder configuration for network properties
2088 Initializes a new graph instance with specified properties. @param builder configuration for graph properties
2089 Adds a cell to the table. Handles both ImmutableCell and other Cell types. Ensures non-null row, column, and value keys. @param cell the cell to add @return Builder instance for method chaining
2090 Adds a key-value pair to the builder. @param entry source of key and value @return Builder instance for method chaining
2091 Adds multiple key-value pairs from an iterable of entries. @param entries collection of key-value entries to add @return Builder instance for method chaining
2092 Adds a key-value pair to the builder. @param entry key-value pair to add @return Builder instance for method chaining
2093 Returns an immutable set multimap based on mask status. @return ImmutableSetMultimap instance, either from cache or newly created
2094 Builds and returns an immutable sorted map. @return ImmutableSortedMap with entries sorted by comparator
2095 Merges entries from another RangeMap into this builder. @param rangeMap the source RangeMap to merge @return this Builder instance for method chaining
2096 Adds multiple non-overlapping ranges to the builder. @param ranges Iterable of Range objects to add @return This Builder instance for chaining
2097 Filters ranges based on given criteria. @param range the Range to filter against @return an ImmutableList of filtered ranges or empty list if none match
2098 Creates a ContiguousSet from the specified range and domain. @param range the range defining the set's boundaries @param domain the discrete domain specifying element types @return ContiguousSet containing elements within the effective range
2099 Adjusts the range based on entry conditions. @param range input range to be adjusted @param value associated value for condition check @param entry map entry containing range and value checks @return adjusted Range or original if conditions not met
2100 Returns an immutable sorted set of values from a given domain. @param domain discrete domain context @return ImmutableSortedSet containing all values in the domain or empty if unbounded
2101 Converts a map to an immutable EnumMap. @param map the input map to convert @return an ImmutableMap based on the input map's entries
2102 Returns an immutable map representing the table's rows. @return ImmutableMap with row keys mapping to column key-value pairs
2103 Returns an unmodifiable iterator over elements in descending order.
2104 Builds and returns an immutable list from current contents. @return ImmutableList containing all added elements
2105 Creates an immutable list from the given array. @param elements source array of elements to include in the list @return ImmutableList containing all elements from the array
2106 Builds and returns an immutable sorted set. @return ImmutableSortedSet containing elements in sorted order
2107 Creates an immutable map from an array of entries. @param n number of entries in the array @param entryArray array containing key-value pairs @param throwIfDuplicateKeys flag to determine if duplicates should throw exception @return ImmutableMap with specified entries or null if invalid
2108 Determines the mask index for a given public suffix type. @param desiredType optional desired public suffix type @return index indicating the mask position or NO_SUFFIX_FOUND if not found
2109 Creates an immutable set from enum elements. @param elements iterable collection of enum elements @return ImmutableSet containing the enum elements
2110 Returns an unmodifiable iterator masking predecessors and successors of nodes. @return UnmodifiableIterator over masked nodes
2111 Posts an event to all registered subscribers. @param event the event to be posted
2112 Determines the move description for an element in a heap. @param removeIndex index of the element being removed @param vacated index of the vacated position @param toTrickle element to be moved within the heap @return MoveDesc object or null if no move is needed
2113 Retrieves the comparator for row keys. @return Comparator used for sorting row keys
2114 Returns a synchronized (thread-safe) navigable set. @param navigableSet the underlying navigable set to wrap @return SynchronizedNavigableSet instance using intrinsic lock
2115 Creates a BloomFilter with specified parameters. @param funnel defines how objects are converted to bytes @param expectedInsertions estimated number of elements to insert @param fpp desired false positive probability @return new BloomFilter object configured with specified parameters
2116 Creates a BloomFilter with default false positive probability. @param funnel defines how objects are converted to bytes @param expectedInsertions estimated number of elements to insert @return new BloomFilter object configured with specified parameters and default FPP
2117 Calculates the optimal mask value for Bloom Filter. @return long representing the calculated mask value
2118 Creates a collector to select top K elements. @param k number of top elements to collect @param comparator comparator for element ordering @return collector that aggregates top K elements
2119 Selects top K elements from an iterator. @param iterator source of elements to select from @param k number of top elements to retrieve @return List containing top K elements, or empty list if conditions not met
2120 Adds all elements from the iterable to the top K selection buffer. @param elements iterable of elements to add
2121 Converts the unsigned long value to its decimal string representation. @return string representation of the unsigned long in base 10
2122 Handles lock acquisition with cycle detection. @param lock the lock to acquire
2123 Applies a function asynchronously and manages resources. @param function the function to apply @param executor the executor for asynchronous execution @return ClosingFuture managing the result of the function application
2124 Applies an asynchronous function to the future's result. @param function the function to apply @param executor the executor for task execution @return a ClosingFuture managing the transformed result
2125 Retrieves result from Future while handling exceptions. @param future asynchronous task to get result from @param exceptionClass class of exception to handle @return result of the future or throws specified exception @throws X if operation fails and cannot be handled
2126 Retrieves value from Future with specified timeout and exception handling. @param future the Future object to retrieve the value from @param exceptionClass the class of the exception to throw on failure @param timeout maximum time to wait for a result as Duration @return the value retrieved from the Future @throws X the specified exception if retrieval fails
2127 Schedules or reschedules a task, handling exceptions and failures. @return Cancellable object representing the scheduled task
2128 Transitions service state to running or stopping. Validates current state, updates snapshot, and notifies listeners.
2129 Attempts to start all services if they are in the NEW state. Logs a warning and skips starting if any service is not in the NEW state. @return this ServiceManager instance
2130 Waits for a condition to be satisfied with a specified timeout. @param guard the condition to evaluate @param time maximum wait time as Duration @return true if condition is met, false if timed out @throws InterruptedException if interrupted while waiting
2131 Converts Duration to nanoseconds and waits for condition with timeout. @param guard the condition to evaluate @param time duration to wait @return true if condition is met, false if timed out
2132 Waits for a condition with a specified duration. @param guard the condition to evaluate @param time timeout duration @return true if condition is met, false if timed out @throws InterruptedException if interrupted while waiting
2133 Waits for a condition with a specified timeout. @param guard condition to wait on @param time maximum wait duration as Duration @return true if condition is met, false if timed out
2134 Applies a timeout to the future using the specified duration and executor. @param timeout time duration for the timeout @param scheduledExecutor service to schedule the timeout @return FluentFuture with applied timeout
2135 Writes byte array to specified file. @param from byte array containing data to write @param to destination file for writing @throws IOException if an I/O error occurs during the write operation
2136 Computes a hash code using the given hash function. @param hashFunction the hashing algorithm to use @return HashCode object representing the computed hash @throws IOException if an I/O error occurs during processing
2137 Copies file content from source to output stream. @param from source file @param to destination output stream @throws IOException if an I/O error occurs
2138 Copies content from a URL to an output stream. @param from source URL @param to destination output stream @throws IOException if an I/O error occurs
2139 Copies a file from one location to another. @param from source file @param to destination file @throws IOException if an I/O error occurs
2140 Reads and converts file content to byte array. @param file source file to read @return byte array containing file data @throws IOException if I/O error occurs during processing
2141 Converts a URL to a byte array. @param url the URL of the resource @return byte array containing the URL content @throws IOException if an I/O error occurs during processing
2142 Reads and processes a file using a byte processor. @param file the source file to read from @param processor the ByteProcessor to apply @return result from ByteProcessor after processing all data @throws IOException if an I/O error occurs
2143 Compares two files for equality. @param file1 first file to compare @param file2 second file to compare @return true if files are equal, false otherwise
2144 Compares two file paths for equivalence. @param path1 first file path to compare @param path2 second file path to compare @return true if files are equivalent, false otherwise @throws IOException if an I/O error occurs during comparison
2145 Writes a character sequence to a file using the specified charset. @param from the character sequence to write @param to the target file @param charset the character set to use for writing @throws IOException if an I/O error occurs
2146 Appends a character sequence to a file using the specified charset. @param from CharSequence to write @param to File destination @param charset Charset for encoding @throws IOException if an I/O error occurs
2147 Copies file content to an Appendable destination using specified charset. @param from source file @param charset character set for conversion @param to destination for copied characters @throws IOException if I/O error occurs
2148 Reads the first line of a file using specified charset. @param file source file to read @param charset character set for reading @return The first line of text or null if no data is available @throws IOException if an I/O error occurs during reading
2149 Reads file lines into a list using specified charset. @param file source file to read @param charset character set for reading @return list of strings representing file lines @throws IOException if an I/O error occurs
2150 Reads and processes lines from a file using a specified character set. @param file source file to read @param charset character set for reading the file @param callback LineProcessor to process each line @return result from the callback after processing all lines or breaking early @throws IOException if an I/O error occurs
2151 Processes URL content line by line using specified charset and callback. @param url the URL of the resource @param charset character set for conversion @param callback LineProcessor to apply to each line @return result from processor after processing all lines or breaking early @throws IOException if an I/O error occurs
2152 Maps a file to a memory-mapped buffer. @param file the file to map @param mode the mapping mode (READ_ONLY or READ_WRITE) @return MappedByteBuffer representing the mapped file region @throws IOException if an I/O error occurs
2153 Maps a file to a memory-mapped buffer. @param file the file to map @param mode the mapping mode (READ_ONLY or READ_WRITE) @param size the size of the region to map, -1 for entire file @return MappedByteBuffer representing the mapped file region @throws IOException if an I/O error occurs or size is negative
2154 Adds a delayed shutdown hook for an executor service. @param service the ExecutorService to manage @param terminationTimeout maximum time to wait for tasks to terminate @param timeUnit unit of time for termination timeout
2155 Filters a multimap's entries based on the given value predicate. @param unfiltered original multimap to filter @param valuePredicate condition for filtering entry values @return filtered multimap with entries matching the predicate
2156 Creates a compound ordering from multiple comparators. @param comparators iterable of comparators to be used @return CompoundOrdering object combining the given comparators
2157 Creates an immutable bi-map from a given map. @param map input map with key-value pairs @return ImmutableBiMap containing the entries from the input map
2158 Converts iterable to array of specified type. @param type Class object representing the array component type @return array containing elements from the iterable
2159 Converts an iterator to an array of specified type. @param iterator source iterator @param type Class object representing the array component type @return array containing elements from the iterator
2160 Creates an ImmutableSortedSet from elements with a given comparator. @param comparator the comparator to define element order @return ImmutableSortedSet containing sorted elements
2161 Creates an ImmutableSortedSet with natural ordering. @param elements iterable source of elements @return ImmutableSortedSet containing sorted elements in natural order
2162 Creates an immutable sorted set from a collection of elements. @param comparator defines the order of elements @param elements source collection of elements @return ImmutableSortedSet with sorted elements
2163 Returns an unmodifiable view of the row sorted map. @return SortedMap with read-only access to rows and columns
2164 Returns string representation of media type. Caches result for efficiency. @return formatted media type as String
2165 Returns a synchronized view of the given SortedSetMultimap. @param multimap the SortedSetMultimap to be wrapped @return synchronized SortedSetMultimap instance
2166 Converts Readable to String with exception handling. @return String representation of the Readable content @throws IOException if an I/O error occurs
2167 Creates a CompactLinkedHashMap with specified initial size. @param expectedSize desired initial size for metadata @return new CompactLinkedHashMap instance
2168 Creates a CompactLinkedHashSet from a given collection. @param collection source collection to convert @return new CompactLinkedHashSet with elements from the collection
2169 Creates a TreeMultimap with natural ordering for keys and values. @return TreeMultimap instance with sorted keys and values
2170 Creates a TreeMultimap with custom comparators for keys and values. @param keyComparator comparator for sorting keys @param valueComparator comparator for sorting values within each key group @return TreeMultimap instance with specified comparators
2171 Checks if all characters in the sequence do not match the criteria. @param sequence input character sequence to check @return true if no matches found, false otherwise
2172 Masks characters in input sequence by shifting non-matching characters to the left. @param sequence input character sequence to be masked @return masked string with non-matching characters shifted
2173 Replaces occurrences of a character sequence with another. @param sequence input character sequence to process @param replacement character sequence used for replacement @return modified string with replacements made
2174 Masks an IP address to its embedded IPv4 form or generates a hashed IPv4 address. @param ip the InetAddress to mask @return masked Inet4Address object or generated hash-based Inet4Address
2175 Creates a RateLimiter with specified rate and warmup period. @param permitsPerSecond rate of permit issuance @param warmupPeriod duration of the warmup phase @return configured RateLimiter instance
2176 Returns a synchronized set of all entries in the multimap. @return synchronized Set of Map.Entry<K, V>
2177 Schedules a task to execute after a specified delay. @param command the task to be executed @param delay time from now to start execution @param unit time unit of the delay parameter @return ListenableScheduledFuture representing the scheduled task
2178 Creates a LoadingCache with specified loader. @param loader CacheLoader for loading values (must not be null) @return LoadingCache instance configured by CacheBuilder
2179 Builds and returns a cache instance with configured parameters. @param <K1> key type extending K @param <V1> value type extending V @return Cache<K1, V1> instance
2180 Creates a new Builder with a specified comparator. @param comparator defines element order; must not be null @return Builder instance for constructing ImmutableSortedMultiset
2181 Returns a Builder with natural ordering. @return Builder configured with natural element comparison
2182 Creates a new Builder with natural ordering. @return Builder instance configured with natural element order
2183 Creates an EnumBiMap from a given map with specified enum types. @param map source map containing key-value pairs to initialize the EnumBiMap @return EnumBiMap instance initialized with entries from the input map
2184 Creates and populates an EnumHashBiMap from a given map. @param map source map containing enum keys and values @return populated EnumHashBiMap instance
2185 Replaces values associated with a key in the multimap. @param key the key to update @param values the new values to associate with the key @return the updated sorted set of values for the key
2186 Checks if two lists have the same elements with the same frequencies. @param first first list to compare @param second second list to compare @return true if both lists contain the same elements with identical counts, false otherwise
2187 Creates and returns a new empty ArrayListMultimap. Initializes with default capacities.
2188 Creates an ArrayListMultimap from a given Multimap. @param multimap the source Multimap to copy entries from @return a new ArrayListMultimap containing the same key-value pairs as the input
2189 Creates and returns a new empty HashMultimap. Initializes with default capacity suitable for 12 keys and average values per key.
2190 Creates and returns an empty LinkedListMultimap. @return An instance of LinkedListMultimap initialized with default capacity
2191 Creates a new LinkedListMultimap from an existing multimap. @param multimap source multimap to initialize from @return LinkedListMultimap instance containing the same key-value pairs as the input
2192 Converts a Multimap to a LinkedHashMultimap. @param multimap input Multimap to be converted @return LinkedHashMultimap with the same entries as the input
2193 Creates a mutable network instance based on current builder settings. @return MutableNetwork object configured with the builder's properties
2194 Constructs a new mutable graph instance. @param builder configuration for graph properties
2195 Constructs a mutable value graph from the current builder configuration. @return MutableValueGraph object with specified properties
2196 Merges data from another table into the builder. Adds each cell from the provided table using method chaining. @param table source table to merge @return Builder instance for method chaining
2197 Adds multiple key-value pairs from an iterable of entries. @param entries collection of key-value entries to add @return Builder instance for method chaining
2198 Adds all entries from another map. @param map source map with key-value pairs to add @return Builder instance for method chaining
2199 Adds multiple key-value pairs from an iterable of entries. @param entries collection of key-value entries to add @return Builder instance for method chaining
2200 Applies a mask to filter entries in an AbstractFilteredMap. @param map the original AbstractFilteredMap @param entryPredicate additional condition for filtering entries @return a new FilteredEntryMap with combined predicates
2201 Adds all ranges from another RangeSet to this builder. @param ranges source RangeSet containing ranges to add @return This Builder instance for chaining
2202 Filters the immutable range set based on a given range. @param range the Range to filter against @return An ImmutableRangeSet containing only ranges that intersect with the given range, or an empty set if none match
2203 Creates a ContiguousSet of integers within a specified range. @param lower the inclusive lower bound of the range @param upper the exclusive upper bound of the range @return ContiguousSet containing integers from lower to upper-1
2204 Creates a ContiguousSet of Long from specified bounds. @param lower the inclusive lower bound @param upper the exclusive upper bound @return ContiguousSet containing long values within [lower, upper)
2205 Creates a ContiguousSet of integers within a specified range. @param lower the inclusive lower bound of the range @param upper the exclusive upper bound of the range @return ContiguousSet containing integers from lower to upper-1
2206 Creates a LongContiguousSet from specified lower and upper bounds. @param lower the inclusive lower bound of the set @param upper the inclusive upper bound of the set @return ContiguousSet<Long> containing elements within the range [lower, upper]
2207 Adjusts range based on adjacent entries and given value. @param range initial range to be adjusted @param value associated value for condition checks @return adjusted Range after considering adjacent entries
2208 Retrieves and validates network connections for a given node. @param node the node to fetch connections for @return NetworkConnections object associated with the node
2209 Converts a map to an immutable map. @param map the input map to convert @return ImmutableMap representation of the input map
2210 Retrieves a row from the table by key. @param rowKey unique identifier for the row @return ImmutableMap of column keys to values in the specified row
2211 Returns an unmodifiable iterator over elements less than or equal to a given element. @param e upper bound element @return Iterator containing elements up to 'e' in descending order
2212 Returns an unmodifiable iterator over elements less than or equal to a given element in descending order. @param e upper bound element @return Iterator over elements up to 'e' in descending order
2213 Creates an immutable list from an iterator. @param elements source of elements to include in the list @return ImmutableList containing all elements from the iterator
2214 Builds an ImmutableRangeMap from entries, ensuring no overlapping ranges. @return ImmutableRangeMap with defined ranges and values
2215 Merges and validates ranges, returning an immutable range set. @return ImmutableRangeSet containing merged and validated ranges
2216 Parses and masks Java class path entries. @return ImmutableList of masked URL objects representing classpath resources
2217 Constructs a list of method parameters. @return ImmutableList containing Parameter objects for each parameter
2218 Builds an immutable list of TypeTokens representing exceptions. @return ImmutableList containing TypeToken instances for each exception type
2219 Wraps a collection of Callable tasks in an immutable list. @param tasks collection of Callable tasks to be wrapped @return ImmutableList containing wrapped Callable tasks
2220 Creates an immutable list from a collection of comparable elements. @param elements iterable source of elements to include in the list @return ImmutableList containing sorted and unique elements
2221 Creates an immutable sorted list from given elements. @param comparator sorting criteria for elements @param elements source iterable of elements @return ImmutableList containing sorted elements
2222 Creates an immutable sorted set from elements provided by an iterator. @param comparator defines the order of elements @param elements source of elements to add @return ImmutableSortedSet containing sorted elements
2223 Creates an immutable map from entries. Handles duplicates and potential overflow. @param n number of entries @param entryArray array of key-value pairs @param throwIfDuplicateKeys flag to determine if duplicates should throw exception @return ImmutableMap with specified entries or null if invalid
2224 Retrieves the mask index for the public suffix. @return mask index or NO_SUFFIX_FOUND if not initialized
2225 Retrieves the mask index for the registry suffix. Uses cached value if available, otherwise calculates and caches it. @return mask index or NO_SUFFIX_FOUND if not found
2226 Converts an Iterable of entries to an ImmutableSortedMap. @param comparator key comparator for sorting @param sameComparator flag indicating if the input comparator matches the map's comparator @param entries iterable source of key-value pairs @return ImmutableSortedMap with sorted and immutable entries
2227 Creates a new TreeBasedTable with the same row and column comparators. @param table original TreeBasedTable to copy from @return new TreeBasedTable with copied data and comparators
2228 Creates a BloomFilter with specified parameters. @param funnel defines how objects are converted to bytes @param expectedInsertions estimated number of elements to insert @return new BloomFilter object configured with specified parameters and default FPP
2229 Collects top K elements from a stream using a custom comparator. @param k number of top elements to collect @param comparator comparator for element ordering @return collector that aggregates top K elements
2230 Retrieves the top K elements from an iterable. @param iterable source of elements to select from @param k number of top elements to retrieve @return List containing top K elements, or empty list if conditions not met
2231 Selects top K elements from an iterator using custom ordering. @param iterator source of elements to select from @param k number of top elements to retrieve @return List containing top K elements, or empty list if conditions not met
2232 Handles exceptions with a fallback function. @param exceptionType type of exception to handle @param fallback function to execute on exception @param executor execution context for the fallback @return ClosingFuture managing the result or fallback execution
2233 Initiates service management operations. Calls state management method to handle lifecycle actions.
2234 Awaits for all services to stop within a specified timeout. @param timeout maximum wait duration @param unit TimeUnit for the timeout @throws TimeoutException if not all services stop in time
2235 Applies a mask to this character matcher using platform-specific logic. @return modified CharMatcher with applied mask
2236 Computes the hash code of a file using a specified hashing algorithm. @param file the source file @param hashFunction the hashing algorithm to use @return HashCode object representing the computed hash @throws IOException if an I/O error occurs during processing
2237 Copies a file from source to destination. @param from source file @param to destination file @throws IOException if an I/O error occurs
2238 Reads and returns lines from a URL as a list of strings. @param url the URL of the resource @param charset character set for conversion @return list of strings representing each line in the resource @throws IOException if an I/O error occurs
2239 Maps a file to a read-only memory-mapped buffer. @param file the file to map @return MappedByteBuffer representing the mapped file region @throws IOException if an I/O error occurs
2240 Wraps an existing ThreadPoolExecutor with shutdown hooks. @param executor the ThreadPoolExecutor to manage @param terminationTimeout maximum time to wait for tasks to terminate @param timeUnit unit of time for termination timeout @return ExecutorService configured with graceful shutdown capabilities
2241 Configures a scheduled executor with shutdown hooks. @param executor the ExecutorService to manage @param terminationTimeout maximum time to wait for tasks to terminate @param timeUnit unit of time for termination timeout @return ScheduledExecutorService configured with shutdown hooks
2242 Adds a delayed shutdown hook for an executor service with specified timeout. @param service the ExecutorService to manage @param terminationTimeout maximum time to wait for tasks to terminate
2243 Removes a cache entry by hash and updates the table. @param entry target entry to remove @param hash entry's hash code @return true if entry was removed, false otherwise
2244 Removes an entry from the cache by key, value reference, and hash. @param key the key of the entry to remove @param hash the hash code of the entry @param valueReference reference to the entry's value @return true if the entry was removed, false otherwise
2245 Initiates service management operations. Delegates to state-specific handling.
2246 Waits for services to become healthy within a specified timeout. @param timeout max time to wait @param unit TimeUnit for the timeout @throws TimeoutException if services do not start in time
2247 Retrieves startup times of services. @return ImmutableMap with Service as key and startup time in ms as value
2248 Retrieves all annotations of a specified type from the parameter. @param annotationType the type of annotations to retrieve @return array of annotations or empty array if none found
2249 Creates an immutable sorted set from a collection using natural ordering. @param elements source collection of elements @return ImmutableSortedSet with elements in natural order
2250 Wraps a navigable map in a synchronized version. @param navigableMap the map to be wrapped @return a synchronized NavigableMap using 'this' as mutex
2251 Reads file content as a string using specified charset. @param file source file to read @param charset character set for reading @return String representation of the file content @throws IOException if an I/O error occurs
2252 Converts URL content to string using specified charset. @param url the URL of the resource @param charset character set for conversion @return String representation of the URL content @throws IOException if an I/O error occurs
2253 Creates and returns a new instance of CompactLinkedHashMap. @return an empty CompactLinkedHashMap with default initial size
2254 Creates a TreeMultimap with natural ordering for keys and values. @param multimap initial set of key-value pairs to add @return TreeMultimap instance initialized with the provided multimap entries
2255 Creates a reentrant lock with optional fairness. @param lockName name of the lock; must not be null @param fair true for fair locking, false otherwise @return ReentrantLock instance based on policy
2256 Creates a reentrant read-write lock. @param lockName name of the lock; must not be null @param fair fairness policy for the lock @return ReentrantReadWriteLock instance with cycle detection if enabled
2257 Creates a map of lock graph nodes for cycle detection. @param clazz enum class to generate lock names from @return Map with enum values as keys and LockGraphNode as values
2258 Validates a domain name part. @param part the domain name part to validate @param isFinalPart indicates if this is the final part of the domain @return true if valid, false otherwise
2259 Masks an IP address to its embedded IPv4 form or generates a hashed IPv4 address. @param ip the InetAddress to mask @return masked Inet4Address object or generated hash-based Inet4Address as integer
2260 Checks if the underlying collection contains the specified element. @param object the element to search for, can be null @return true if the element is found, false otherwise
2261 Checks for and removes the specified object from the collection. @param object the object to be removed @return true if the object was found and removed, false otherwise
2262 Checks if all elements of the given collection are present in the underlying iterator. @param collection elements to check for presence @return true if all elements are present, false otherwise
2263 Checks if all elements of the underlying collection are present in the specified collection. @param collection to compare against @return true if all elements match, false otherwise
2264 Masks elements in an iterator by skipping them. Uses clear(java.util.Iterator) to process and mask the iterator returned by m1().
2265 Checks if m1's m2 returns false. @return true if m1.m2() is false, otherwise false
2266 Converts collection to array. @return Array containing all elements or null if empty
2267 Schedules a task to run after a specified delay. @param command the task to be executed @param delay duration until execution starts @return ListenableScheduledFuture representing the scheduled task
2268 Registers event subscribers for a given listener. @param listener object with event handler methods @return Multimap of event types to Subscribers
2269 Creates a mutable subgraph from the given network containing specified nodes and their connections. @param network source graph to create subgraph from @param nodes iterable collection of nodes to include in the subgraph @return MutableNetwork object representing the induced subgraph
2270 Creates a mutable copy of the given network. @param network source network to copy @return MutableNetwork object with same nodes and edges
2271 Creates a mutable graph instance. @return MutableGraph object with configured properties
2272 Creates a mutable value graph from the given graph and nodes. @param graph source ValueGraph to copy properties from @param nodes iterable collection of nodes for the subgraph @return MutableValueGraph containing specified nodes and edges
2273 Creates a mutable copy of the given ValueGraph. @param graph the source ValueGraph to copy @return a new MutableValueGraph with copied nodes and edges
2274 Adds all entries from another map to the builder. @param map source map with key-value pairs to add @return Builder instance for method chaining
2275 Adds all entries from another map. @param map source map with key-value pairs to add @return Builder instance for method chaining
2276 Applies a mask to filter entries in a navigable map. @param map the original filtered navigable map @param entryPredicate additional condition for filtering entries @return a new filtered navigable map with combined predicates
2277 Applies a filter to a sorted map. @param map original filtered sorted map @param entryPredicate additional condition for entries @return new SortedMap with combined filtering
2278 Applies a mask to filter map entries based on key predicate. @param unfiltered the original map to be filtered @param keyPredicate condition to determine which keys are allowed @return a new FilteredKeyMap with filtered entries
2279 Applies a mask to filter entries in a map. @param unfiltered original map to be filtered @param entryPredicate condition to determine which entries are allowed @return a new Map with filtered entries
2280 Creates a collector for building an immutable sorted map. @param comparator key comparator @param keyFunction function to extract keys from input elements @param valueFunction function to extract values from input elements @return Collector that accumulates elements into an ImmutableSortedMap
2281 Creates a collector to accumulate elements into an immutable map. @param keyFunction extracts the key from each element @param valueFunction extracts the value from each element @return Collector for ImmutableMap with unique keys
2282 Creates a collector for an immutable map from a stream. @param keyFunction extracts the enum key from each element @param valueFunction extracts the value from each element @param mergeFunction merges values if duplicate keys are encountered @return Collector for ImmutableMap<K, V>
2283 Maps type variables to their corresponding types. @param contextType the type context for mapping @return Immutable map of TypeVariableKey to resolved Type
2284 Converts an iterator of ByteSources to a concatenated byte source. @param sources iterator containing ByteSource instances @return ConcatenatedByteSource combining all input byte sources
2285 Converts an iterator of CharSources to a concatenated character source. @param sources iterator of CharSource instances @return ConcatenatedCharSource combining all input sources
2286 Creates an immutable range set from a collection of ranges. @param ranges Iterable of Range objects to include in the set @return ImmutableRangeSet containing the provided ranges, merged and validated
2287 Creates an ImmutableSortedMultiset from elements with a specified comparator. @param comparator defines the order of elements @param elements iterable over the elements to be added @return ImmutableSortedMultiset instance or empty if no entries
2288 Creates an ImmutableSortedMultiset from a SortedMultiset. @param sortedMultiset source SortedMultiset to convert @return ImmutableSortedMultiset instance with elements and counts
2289 Returns an immutable list based on the result of m5(). @return ImmutableList containing elements determined by m5()'s value.
2290 Creates a collector for an immutable sorted set. @param comparator the comparator to define element order @return Collector that builds an ImmutableSortedSet
2291 Creates an immutable sorted set with natural ordering from iterator. @param elements source of elements to add @return ImmutableSortedSet containing sorted elements in natural order
2292 Builds an ImmutableBiMap from accumulated entries. Handles different sizes and optional value ordering. @return ImmutableBiMap constructed based on entries
2293 Returns a submap up to a specified key. @param toKey upper bound key for the submap @param inclusive whether the upper bound is inclusive @return ImmutableSortedMap containing entries up to the specified key
2294 Retrieves a submap starting from a specified key. @param fromKey the key to start the range from @param inclusive true if the fromKey is included in the range @return ImmutableSortedMap containing entries from fromKey (inclusive) to end
2295 Checks if public suffix mask is unset. @return true if mask is unset, false otherwise
2296 Checks if the public suffix mask is found. @return true if mask is found, false otherwise
2297 Checks if the public suffix mask index is valid. @return true if public suffix mask index is greater than zero, false otherwise
2298 Checks if the public suffix mask is set. @return true if mask is set, false otherwise
2299 Checks if the registry suffix mask is zero. @return true if mask is zero, false otherwise
2300 Checks if the domain has a registry suffix. @return true if a valid registry suffix is found, false otherwise
2301 Checks if the registry suffix mask index is valid. @return true if mask index is greater than 0, false otherwise
2302 Checks if the registry suffix mask is set. @return true if mask is set, false otherwise
2303 Creates an immutable sorted map from entries. @param entries iterable of key-value pairs @param comparator key comparator for sorting @return ImmutableSortedMap with sorted and immutable entries
2304 Converts a SortedMap to an ImmutableSortedMap. @param map input sorted map to be converted @return ImmutableSortedMap with sorted and immutable entries
2305 Creates an immutable set from the current view's elements. @return ImmutableSet containing processed elements or empty if none present
2306 Collects and returns a set of raw types for the generic type. @return ImmutableSet of raw types representing the generic hierarchy
2307 Removes and returns the element at the specified index. Adjusts heap size and maintains order by moving elements if necessary. @param index position of the element to remove @return MoveDesc object describing the move or null if no move is needed
2308 Computes the integer square root of a BigInteger with specified rounding mode. @param x input BigInteger value @param mode the RoundingMode to apply @return BigInteger representing the rounded integer square root of x
2309 Creates an immutable set from an iterator. @param elements source of elements to add @return ImmutableSet containing elements from the iterator or empty if no elements
2310 Recursively scans a directory for resources. @param directory the current directory to scan @param packagePrefix prefix for resource names @param currentPath set of visited directories to detect cycles @param builder builder for collecting ResourceInfo objects @throws IOException if an I/O error occurs during scanning
2311 Parses the Class-Path attribute from a JAR's manifest and returns a set of files. @param jarFile the JAR file containing the manifest @param manifest the manifest to parse, can be null @return an ImmutableSet of File objects representing the classpath entries
2312 Retrieves the raw type of a generic class. @return Class representing the raw type or superclass
2313 Retrieves top K elements from an iterable. @param iterable source of elements to select from @param k number of top elements to retrieve @return List containing top K elements, or empty list if conditions not met
2314 Converts Duration to nanoseconds and awaits services to stop. @param timeout maximum wait duration @throws TimeoutException if not all services stop in time
2315 Decorates an executor service with additional functionality. @param executor the ThreadPoolExecutor to enhance @return enhanced ExecutorService with shutdown hooks
2316 Wraps a ThreadPoolExecutor with graceful shutdown capabilities. @param executor the ThreadPoolExecutor to manage @param terminationTimeout maximum time to wait for tasks to terminate @return ExecutorService configured with graceful shutdown
2317 Wraps and configures a scheduled executor with shutdown hooks. @param executor the ExecutorService to manage @return ScheduledExecutorService configured with shutdown hooks
2318 Configures a scheduled executor with shutdown hooks. @param executor the ExecutorService to manage @param terminationTimeout maximum time to wait for tasks to terminate @return ScheduledExecutorService configured with shutdown hooks
2319 Ensures segment weight does not exceed maxSegmentWeight. @param newest the most recently added entry
2320 Converts Duration to nanoseconds and waits for services to become healthy. @param timeout max time to wait as a Duration @throws TimeoutException if services do not start in time
2321 Retrieves and converts service startup times to durations. @return Immutable map of Service to Duration representing startup times
2322 Retrieves annotations of a specified type from the parameter. @param annotationType the type of annotations to retrieve @return array of annotations or empty array if none found
2323 Creates a reentrant lock with default fairness policy. @param lockName name of the lock; must not be null @return ReentrantLock instance with non-fair locking
2324 Creates a non-fair reentrant read-write lock. @param lockName name of the lock; must not be null @return ReentrantReadWriteLock instance with cycle detection if enabled
2325 Validates each part of the domain name. @param parts list of domain name parts @return true if all parts are valid, false otherwise
2326 Registers event subscribers for a given listener. @param listener object with event handler methods
2327 Validates and registers event subscribers. @param listener object with event handler methods
2328 Creates an ImmutableNetwork builder from the current configuration. @return ImmutableNetwork.Builder instance with configured settings
2329 Creates a mutable subgraph from specified nodes of the given graph. @param graph source graph to extract subgraph from @param nodes iterable collection of nodes for the subgraph @return MutableGraph containing only the specified nodes and their edges
2330 Creates a mutable copy of the input graph. @param graph the source graph to copy @return a new MutableGraph object with same nodes and edges
2331 Casts and returns a builder for an immutable value graph. @return ImmutableValueGraph.Builder with narrowed node and edge types
2332 Creates a filtered view of the given BiMap with additional predicates. @param map original FilteredEntryBiMap to filter further @param entryPredicate additional condition for entries @return new FilteredEntryBiMap with combined filtering
2333 Applies a mask to filter entries in a navigable map. @param unfiltered original navigable map to be filtered @param entryPredicate condition to determine which entries are allowed @return a new filtered navigable map with combined predicates
2334 Filters a sorted map based on the given predicate. @param unfiltered original sorted map to be filtered @param entryPredicate condition to determine which entries are allowed @return new SortedMap with filtered entries
2335 Filters map entries based on a value predicate. @param unfiltered original map to be filtered @param valuePredicate condition for filtering entry values @return a new Map with entries matching the value predicate
2336 Creates a collector to transform elements into an ImmutableMap. @param keyFunction extracts keys from input elements @param valueFunction extracts values from input elements @param mergeFunction resolves conflicts between values with the same key @return Collector that gathers elements into an ImmutableMap
2337 Creates a collector to build an ImmutableRangeMap from a stream. @param keyFunction extracts the range key from elements @param valueFunction extracts the value from elements @return Collector that accumulates elements into an ImmutableRangeMap
2338 Creates an ImmutableSortedMultiset from elements using natural ordering. @param elements iterable over the elements to be added @return ImmutableSortedMultiset instance sorted by natural order
2339 Builds an ImmutableSortedMultiset from internal contents. @return ImmutableSortedMultiset instance with sorted elements and counts
2340 Creates a wildcard type with an upper bound. @param upperBound the upper bound type @return WildcardType instance with specified upper bound
2341 Creates a wildcard type with a specified lower bound. @param lowerBound the lower bound type for the wildcard @return WildcardType instance representing the masked type
2342 Generates all ordered permutations of a collection. @param elements iterable of elements to permute @param comparator sorting criteria for elements @return collection of lists representing permutations
2343 Creates an immutable sorted list from elements with a specified comparator. @param comparator the comparator to use for ordering @return ImmutableList of sorted elements
2344 Converts a collection to an immutable list. @param elements source collection of elements @return ImmutableList containing all elements from the input collection
2345 Builds and returns an immutable bi-directional map. Utilizes accumulated entries to construct the map. @return ImmutableBiMap instance based on current entries
2346 Builds an immutable map with duplicate key checks. @return ImmutableMap instance or null if invalid
2347 Constructs an immutable map without throwing exceptions on duplicate keys. @return ImmutableMap with specified entries or null if invalid
2348 Returns a submap up to a specified key. @param toKey upper bound key for the submap @return ImmutableSortedMap containing entries up to the specified key
2349 Returns a submap within the specified key range. @param fromKey lower bound key for the submap @param fromInclusive true if the fromKey is included in the range @param toKey upper bound key for the submap @param toInclusive true if the toKey is included in the range @return ImmutableSortedMap containing entries within the specified range
2350 Retrieves a submap starting from a specified key. @param fromKey the key to start the range from @return ImmutableSortedMap containing entries from fromKey (inclusive) to end
2351 Creates an immutable sorted map using natural ordering. @param entries iterable of key-value pairs @return ImmutableSortedMap with sorted and immutable entries
2352 Converts a Map to an ImmutableSortedMap using natural key ordering. @param map the source map to convert @return ImmutableSortedMap with sorted and immutable entries
2353 Converts a Map to an ImmutableSortedMap with specified comparator. @param map the source map to convert @param comparator key comparator for sorting @return ImmutableSortedMap with sorted and immutable entries
2354 Computes the Cartesian product of given sets. @param sets list of sets to compute the product from @return a set containing all combinations of elements from input sets
2355 Removes target from queue if present. @param target element to remove @return true if removed, false otherwise
2356 Retrieves and removes element at specified index. @param index position of the element in the queue @return removed element
2357 Creates an immutable set from an iterable. @param elements source of elements to add @return ImmutableSet containing elements from the iterable or empty if no elements
2358 Creates an Invokable for a constructor. @param constructor the Constructor to be wrapped @return Invokable object representing the constructor
2359 Determines if the current type is a subtype of a given supertype. @param supertype the type to check against @return true if the current type is a subtype, false otherwise
2360 Wraps a method with additional type checking and returns an Invokable. @param method the Method to wrap @return Invokable object for the given method
2361 Processes cache entries, expiring and cleaning up as needed. @param now current time in nanoseconds
2362 Creates a cycle-detecting lock factory for an enum class with explicit ordering. @param enumClass the enum class to generate lock names from @param policy the concurrency policy to be followed @return WithExplicitOrdering instance configured with the given policy and lock graph nodes
2363 Registers an event subscriber. @param object listener to register with event bus
2364 Validates and registers an event subscriber. @param object listener with event handler methods
2365 Creates an ImmutableGraph builder from current configuration. @return ImmutableGraph.Builder instance with generic type N1
2366 Creates a filtered view of the given BiMap with an additional predicate. @param unfiltered original bi-directional map to be filtered @param entryPredicate condition to determine which entries are allowed @return new FilteredEntryBiMap with combined filtering
2367 Filters entries in a navigable map by key. @param unfiltered original navigable map to be filtered @param keyPredicate predicate for keys @return a new filtered navigable map with entries matching the key predicate
2368 Filters entries in a navigable map based on their values. @param unfiltered original navigable map to be filtered @param valuePredicate predicate for filtering entry values @return a new navigable map with filtered entries
2369 Filters a sorted map by keys using the provided predicate. @param unfiltered original sorted map to be filtered @param keyPredicate condition to determine which keys are allowed @return new SortedMap with entries having keys that satisfy the predicate
2370 Filters a sorted map based on value predicate. @param unfiltered original sorted map to be filtered @param valuePredicate condition for filtering entry values @return new SortedMap with entries matching the predicate
2371 Creates an immutable sorted multiset from elements. @param comparator defines element order; must not be null @param elements source of elements to add @return ImmutableSortedMultiset with sorted elements and counts
2372 Generates a set of LocationInfo objects from classpath resources. @param classloader the ClassLoader to use for resource loading @return ImmutableSet of LocationInfo objects representing classpath locations
2373 Processes type bounds to find a suitable mask type. @param bounds array of Type objects representing bounds @return the processed Type or null if not found
2374 Processes a type to handle wildcard bounds. @param componentType the type to process @return processed Type with adjusted bounds
2375 Generates all ordered permutations of a collection using natural ordering. @param elements iterable of comparable elements to permute @return collection of lists representing permutations
2376 Creates an immutable multiset from given elements. @param elements iterable source of elements @return ImmutableMultiset instance containing the specified elements
2377 Creates an immutable multiset from an iterator of elements. @param elements source iterator for the multiset elements @return ImmutableMultiset containing unique elements with their counts
2378 Converts a Multiset to an immutable multiset sorted by entry count in descending order. @param multiset the input Multiset to be converted @return an ImmutableMultiset with entries sorted by decreasing count
2379 Generates all permutations of a collection. @param elements source collection of elements @return Collection containing all permutations of the input elements
2380 Creates an immutable list from iterable elements. @param elements source of elements to include in the list @return ImmutableList containing all elements from the iterable
2381 Converts a RangeSet to an ImmutableRangeSet. @param rangeSet input RangeSet to be converted @return ImmutableRangeSet representation of the input
2382 Creates an ImmutableSortedSet from a SortedSet. @param sortedSet the input SortedSet to be converted @return an ImmutableSortedSet with elements and order preserved
2383 Reads lines from a character source and returns them as an immutable list. @return ImmutableList of lines read from the source @throws IOException if an I/O error occurs during reading
2384 Builds an immutable map with type safety checks. @return ImmutableClassToInstanceMap instance or empty map if mask is disabled
2385 Constructs an immutable list multimap from entries. @param mapEntries collection of key-value pairs @param valueComparator optional comparator for values @return ImmutableListMultimap with entries or empty if none
2386 Builds and returns an immutable map with duplicate key checks. @return ImmutableMap instance or null if invalid
2387 Creates an ImmutableSetMultimap from a collection of map entries. @param mapEntries collection of key-value pairs where values are collections @param valueComparator comparator for sorting values, or null for natural order @return ImmutableSetMultimap instance with the provided entries and comparator
2388 Converts a Properties object to an ImmutableMap. @param properties the source Properties object @return ImmutableMap containing key-value pairs from Properties
2389 Creates an immutable map from a collection with elements as keys and their indices as values. @param list the input collection of elements @return ImmutableMap where each element is mapped to its index in the collection
2390 Constructs an immutable map from the builder. @return ImmutableTypeToInstanceMap instance built from the mapBuilder
2391 Constructs a TypeTable from given mappings. @param mappings map of TypeVariableKey to types @return TypeTable instance with resolved type variables
2392 Creates an immutable map from keys and a value function. @param keys iterator of keys @param valueFunction function to compute values from keys @return ImmutableMap with computed key-value pairs
2393 Returns a submap within the specified key range. @param fromKey lower bound key for the submap @param toKey upper bound key for the submap @return ImmutableSortedMap containing entries within the specified range
2394 Creates a collector for immutable sorted maps. @param comparator key comparator @param keyFunction function to extract keys @param valueFunction function to extract values @param mergeFunction function to merge values with the same key @return Collector that accumulates elements into an ImmutableSortedMap
2395 Determines and returns the masked element or null. Uses m2 to get index, m3 to apply mask based on queue size and comparison.
2396 Retrieves and removes the maximum element based on priority. @return the maximum element or throws NoSuchElementException if empty
2397 Creates an immutable set from transformed elements. @return ImmutableSet containing non-null elements after transformation
2398 Checks if the given type is a subtype of the current type. @param type TypeToken to check against @return true if type is a subtype, false otherwise
2399 Checks if the given type is a subtype of the current type. @param type the Java type to check @return true if the given type is a subtype, false otherwise
2400 Determines if the current type is a subtype of another using reflection. @param type TypeToken instance to compare against @return true if the current type is a subtype, false otherwise
2401 Drains and processes reference queues for cache entries. Handles weak or soft references, removing expired entries.
2402 Filters a BiMap entries by key predicate. @param unfiltered original bi-directional map to be filtered @param keyPredicate condition to determine which keys are allowed @return new FilteredEntryBiMap with keys satisfying the predicate
2403 Filters a BiMap by entry values. @param unfiltered original bi-directional map to be filtered @param valuePredicate predicate for filtering entry values @return new FilteredEntryBiMap with filtered entries
2404 Creates an immutable sorted multiset from elements using natural ordering. @param elements source of elements to add @return ImmutableSortedMultiset with sorted elements in natural order
2405 Creates a TypeToken for the given class. @param cls the Class object representing the generic type @return a TypeToken instance encapsulating the provided type
2406 Transforms and returns an immutable multiset from delegate iterable. @return ImmutableMultiset containing transformed elements
2407 Builds an immutable multiset from contents. @return ImmutableMultiset instance containing elements from contents
2408 Computes the Cartesian product of multiple lists. @param lists input collection of lists @return List of Lists representing the Cartesian product
2409 Parses a cache specification string and creates a CacheBuilderSpec. @param cacheBuilderSpecification the cache configuration string @return CacheBuilderSpec object representing the parsed specifications
2410 Transforms and returns an immutable list from delegate iterable. @return ImmutableList containing transformed elements
2411 Retrieves an immutable list of paths from a directory. @param dir directory to read paths from @return ImmutableList containing all paths in the directory @throws IOException if an I/O error occurs
2412 Constructs an InternetDomainName from a string. Normalizes and validates the domain name. @param name raw domain name to process
2413 Aggregates multiple ListenableFutures into a single future. @param futures iterable of ListenableFutures to aggregate @return ListenableFuture containing results from all input futures
2414 Combines multiple ListenableFutures into a single FutureCombiner. @param futures iterable of ListenableFutures to combine @return FutureCombiner containing all input futures
2415 Combines multiple listenable futures into a single combiner. @param futures iterable of listenable futures to combine @return FutureCombiner instance managing the combined futures
2416 Aggregates multiple ListenableFutures into a single future. @param futures iterable of ListenableFutures to aggregate @return ListenableFuture containing results from all input futures
2417 Converts iterable of futures to array. @param futures iterable of ListenableFutures @return array of ListenableFutures
2418 Converts an iterable of ranges to an immutable range set. @param ranges collection of Range objects @return ImmutableRangeSet representation of the input ranges
2419 Computes the difference between this range set and another. @param other the RangeSet to subtract from this one @return an ImmutableRangeSet representing the result of the subtraction
2420 Computes the difference between this range set and another. @param other the RangeSet to subtract from this one @return an ImmutableRangeSet representing the difference
2421 Creates a collector for an immutable bi-map from a stream. @param keyFunction extracts keys from elements @param valueFunction extracts values from elements @return Collector for ImmutableBiMap
2422 Creates an immutable map from a given class-instance mapping. @param map source map with class types as keys and instances as values @return ImmutableClassToInstanceMap instance or empty map if mask is disabled
2423 Converts a Multimap to an ImmutableListMultimap. @param multimap input Multimap to convert @return ImmutableListMultimap with same mappings or empty if conditions met
2424 Builds an ImmutableMultimap from accumulated entries. @return ImmutableMultimap with ordered entries or empty if none
2425 Applies a remapping function to the specified range and value. @param range the range to be processed @param value the new value associated with the range @param remappingFunction function to compute the new value
2426 Builds an immutable set multimap from entries. @return ImmutableSetMultimap instance with sorted keys and values
2427 Creates an immutable map from iterator and key function. @param values iterator of values to be mapped @param keyFunction function to derive keys from values @return ImmutableMap with derived keys or throws IllegalArgumentException on duplicate keys
2428 Generates all combinations of a given size from the input set. @param set the input set of elements @param size the size of each combination @return a set containing all possible combinations of the specified size
2429 Wraps a given graph in an ImmutableGraph. @param graph the input graph to be wrapped @return an ImmutableGraph instance representing the input graph
2430 Creates a new TypeResolver with resolved type variables. @param mappings map of TypeVariableKey to types @return TypeResolver instance initialized with the given mappings
2431 Creates an immutable map from iterable keys and a value function. @param keys iterable of keys @param valueFunction function to compute values from keys @return ImmutableMap with computed key-value pairs
2432 Retrieves and removes the minimum element if conditions are met. @return removed minimum element or null if not applicable
2433 Adds an element to the queue. Increments modification count and adjusts size. Inserts element into appropriate heap. @param element the element to add @return true if addition is successful, false otherwise
2434 Retrieves and filters classpath resources as ClassInfo objects. @return ImmutableSet of ClassInfo instances representing classpath resources
2435 Filters and transforms resources to an immutable set of top-level ClassInfo objects. @return ImmutableSet containing ClassInfo for non-nested classes
2436 Validates and traverses nodes using a successor function. @param startNodes initial nodes for traversal @return Iterable of traversed nodes
2437 Validates and traverses nodes using a successor function. @param startNodes initial nodes for traversal @return Iterable of traversed nodes
2438 Validates and traverses nodes using a successor function. @param startNodes initial nodes for traversal @return Iterable of processed nodes
2439 Processes a set of scanned files to build resource information. @param scannedFiles set of files already processed @return ImmutableSet of ResourceInfo objects @throws IOException if an I/O error occurs during processing
2440 Returns an Invokable with a specified return type. @param returnType desired return type @return Invokable with the specified return type or throws IllegalArgumentException if incompatible
2441 Performs cleanup and maintenance tasks. Calls m3 for processing, ensures m2 runs regardless of outcome.
2442 Resolves a Java Type to its actual representation. @param type the Type to resolve @return resolved Type or original if not applicable
2443 Checks if a type variable is compatible with a formal type. @param formalType the type to compare against @param declaration the type variable declaration @return true if types are compatible, false otherwise
2444 Handles wildcard and non-wildcard types. @param declaration type variable declaration @param typeArg input type argument @return processed Type with canonicalized wildcards or original type
2445 Creates a CacheBuilder from a specification string. @param spec configuration specification for the cache builder @return configured CacheBuilder instance
2446 Creates a cache specification with disabled caching. @return CacheBuilderSpec object configured to disable caching
2447 Creates an InternetDomainName from a masked domain string. @param domain raw domain name to process @return InternetDomainName object representing the domain
2448 Transforms iterable of futures to immutable list in completion order. @param futures iterable of ListenableFutures @return ImmutableList of ListenableFutures in completion order
2449 Combines this range set with another. @param other RangeSet to combine with @return ImmutableRangeSet containing combined ranges
2450 Converts a Multimap to an ImmutableMultimap. @param multimap input Multimap to convert @return ImmutableMultimap with same mappings or empty if conditions met
2451 Builds and returns an ImmutableListMultimap from accumulated entries. @return ImmutableMultimap with ordered entries or empty if none
2452 Creates a collector for immutable maps. @param keyFunction function to extract keys from elements @param valueFunction function to extract values from elements @return Collector that builds an ImmutableMap
2453 Creates an ImmutableSetMultimap with a single key-value pair. @param k1 the key to add @param v1 the value to add @return ImmutableSetMultimap instance containing the specified key-value pair
2454 Creates an ImmutableSetMultimap from two key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @return ImmutableSetMultimap containing the specified entries
2455 Creates an ImmutableSetMultimap from three key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @return ImmutableSetMultimap instance containing the provided entries
2456 Creates an ImmutableSetMultimap from four key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @param k3 third key @param v3 value associated with the third key @param k4 fourth key @param v4 value associated with the fourth key @return ImmutableSetMultimap instance containing the provided key-value pairs
2457 Creates an ImmutableSetMultimap from five key-value pairs. @param k1,k2,k3,k4,k5 keys for the multimap entries @param v1,v2,v3,v4,v5 values corresponding to each key @return ImmutableSetMultimap instance with the specified entries
2458 Creates an immutable set multimap from iterable entries. @param entries iterable containing key-value pairs @return ImmutableSetMultimap instance with sorted keys and values
2459 Creates an ImmutableSetMultimap from a given Multimap. @param multimap source multimap to convert @return ImmutableSetMultimap instance with the provided entries in natural order
2460 Creates an immutable map from iterable and key function. @param values iterable of values to be mapped @param keyFunction function to derive keys from values @return ImmutableMap with derived keys or throws IllegalArgumentException on duplicate keys
2461 Creates a new ArrayTable with specified row and column keys. @param rowKeys iterable of row keys @param columnKeys iterable of column keys @return initialized ArrayTable object
2462 Generates the power set of the given input set. @param set the input set to generate the power set from @return a set containing all possible subsets of the input set
2463 Constructs a RegularImmutableTable based on cell density. @param cellList list of cells containing row, column, and value @param rowSpace set of all possible rows @param columnSpace set of all possible columns @return DenseImmutableTable if cell density is high; otherwise SparseImmutableTable
2464 Converts a mutable graph to an immutable one. @return ImmutableGraph instance representing the input graph
2465 Wraps or returns the given network as an ImmutableNetwork. @param network the source network to be wrapped or returned @return an ImmutableNetwork instance based on the input network
2466 Converts a ValueGraph to an ImmutableValueGraph. @param graph the source ValueGraph to convert @return ImmutableValueGraph representation of the input graph
2467 Creates a TypeResolver with resolved types from the given context. @param contextType type context for mapping @return TypeResolver instance initialized with mappings
2468 Creates a TypeResolver for the given context type. @param contextType the type context to resolve @return initialized TypeResolver with resolved mappings
2469 Resolves type mappings between formal and actual types. @param formal the formal type to resolve from @param actual the actual type to resolve to @return a TypeResolver instance with resolved mappings
2470 Creates an immutable map from elements and a value function. @param valueFunction function to compute values from elements @return ImmutableMap with computed key-value pairs
2471 Constructs a MinMaxPriorityQueue with specified elements. @param initialContents iterable of elements to initialize the queue @return configured MinMaxPriorityQueue instance
2472 Adds an element to the queue. @param element the element to add @return always true
2473 Fetches ClassInfo objects by package name. @param packageName the target package name @return ImmutableSet of ClassInfo for classes in the specified package
2474 Retrieves ClassInfo objects for classes in a specified package. @param packageName the name of the package to search for classes @return ImmutableSet containing ClassInfo for top-level classes in the package
2475 Initiates breadth-first traversal from a single node. @param startNode starting node for traversal @return Iterable of traversed nodes
2476 Initiates depth-first preorder traversal from a single node. @param startNode starting node for traversal @return Iterable of traversed nodes
2477 Initiates depth-first post-order traversal from a single node. @param startNode starting node for traversal @return Iterable of processed nodes
2478 Initiates resource scanning without initial files. @return ImmutableSet of ResourceInfo objects representing scanned resources @throws IOException if an I/O error occurs during processing
2479 Constructs a ClassPath instance from the given class loader. @param classloader the ClassLoader to use for resource loading @return a new ClassPath object representing the classpath @throws IOException if an I/O error occurs during processing
2480 Returns an Invokable with a specified return type. @param returnType desired return type class @return Invokable with the specified return type
2481 Retrieves and validates a cache entry's value. @param entry the cache entry to process @param now current time in nanoseconds @return cached value or null if expired or invalid
2482 Performs cache maintenance tasks under lock. @param now current time in nanoseconds
2483 Resolves a type variable to its actual type. @param var the type variable to resolve @param forDependants context for dependent type resolution @return resolved Type or original if not found
2484 Determines the function mask for a method or constructor. @return Type representing the function mask or the raw class if no generics
2485 Resolves and returns the runtime type of the current instance. @return resolved Type or original if not applicable
2486 Creates a traverser for file tree structure. @return Traverser object for navigating file paths
2487 Masks the given host specifier. @param specifier input host specification string @return HostSpecifier with masked IP or domain, throws exception if invalid
2488 Masks a specified number of domain levels. @param levels number of levels to mask @return InternetDomainName with masked segments
2489 Masks and combines domain parts. @param leftParts initial domain parts to mask @return masked InternetDomainName object
2490 Checks if a domain name is valid. @param name the domain name to validate @return true if valid, false otherwise
2491 Creates a collector for immutable list multimaps from streams. @param keyFunction extracts keys from input elements @param valuesFunction extracts values as streams from input elements @return Collector that accumulates elements into an immutable list multimap
2492 Creates an immutable multimap with a single key-value pair. @param k1 the key to add @param v1 the value associated with the key @return ImmutableListMultimap containing the key-value pair
2493 Creates an immutable multimap with two key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @return ImmutableListMultimap containing the specified key-value pairs
2494 Creates an immutable multimap with three key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @return ImmutableListMultimap containing the specified entries
2495 Creates an ImmutableListMultimap from four key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @param k4 fourth key @param v4 value for the fourth key @return ImmutableMultimap containing the specified key-value pairs
2496 Constructs an ImmutableListMultimap from five key-value pairs. @param k1,k2,k3,k4,k5 keys for the multimap @param v1,v2,v3,v4,v5 values corresponding to each key @return ImmutableMultimap containing the specified entries
2497 Creates an immutable list multimap from a collection of key-value pairs. @param entries iterable containing entries to add @return ImmutableListMultimap with ordered entries or empty if none
2498 Converts an iterator of values to an ImmutableListMultimap using a key function. @param values iterator over values to be added @param keyFunction function to derive keys from values @return ImmutableListMultimap with derived keys and original values
2499 Creates a new MediaType with masked parameters. @param attribute parameter name to mask @param values new parameter values @return new MediaType instance with updated parameters
2500 Creates a collector to group elements into an immutable set multimap. @param keyFunction extracts the key from each element @param valueFunction extracts the value from each element @return Collector for ImmutableSetMultimap with sorted keys and values
2501 Returns the inverted multimap. @return ImmutableSetMultimap with keys and values swapped
2502 Handles service transition logic. Locks, checks transition status, and throws exception if services are in bad states.
2503 Retrieves services grouped by their current state. @return Immutable multimap with State keys and Service values
2504 Creates an immutable map from the iterable with unique keys derived by a function. @param keyFunction function to derive keys from elements @return ImmutableMap with unique keys or throws IllegalArgumentException on duplicates
2505 Creates an ArrayTable from a given Table. @param table source Table to initialize from @return new ArrayTable instance
2506 Converts mutable network to immutable. @return ImmutableNetwork instance based on the mutable network
2507 Converts mutable value graph to immutable. @return ImmutableValueGraph representation of the mutable graph
2508 Constructs a TypeToken for the given class. @param declaringClass class declaring the generic type Initializes runtimeType based on captured type or resolved type.
2509 Creates an empty MinMaxPriorityQueue with default configuration. @return configured MinMaxPriorityQueue instance
2510 Creates a MinMaxPriorityQueue with natural ordering. @param initialContents iterable of elements to initialize the queue @return configured MinMaxPriorityQueue instance
2511 Returns a set of nodes reachable from the given node using masked traversal. @param graph the graph to traverse @param node starting node for traversal @return ImmutableSet of reachable nodes
2512 Retrieves cache entry by key. @param key the object used as a key @return ReferenceEntry if found, otherwise null
2513 Checks if a cache entry is valid and not expired. @param entry the cache entry to check @param now current time in nanoseconds @return true if the entry is valid, false otherwise
2514 Retrieves or creates a LoadingValueReference for a cache entry. @param key the key to look up in the cache @param hash the hash of the key @param checkTime whether to check if the entry needs refreshing @return LoadingValueReference for the entry, or null if not applicable
2515 Checks read count and triggers cleanup if below threshold. @param none @return void
2516 Resolves a type variable within the context of given dependencies. @param var the type variable to resolve @param forDependants context for dependent type resolution @return resolved Type or original if not found
2517 Combines futures based on success criteria. @param combiningCallable task to execute upon completion of futures @param executor executor for task execution @return ClosingFuture representing the combined result
2518 Combines asynchronous callable tasks with specified success criteria. @param combiningCallable task to execute and combine results @param executor for task execution @return ClosingFuture managing combined result
2519 Masks the given host specifier. @param specifier input host specification string @return HostSpecifier with masked IP or domain @throws ParseException if the specifier is invalid
2520 Checks if a host specifier is valid and can be masked. @param specifier input host specification string @return true if specifier is valid, false otherwise
2521 Masks domain name if public suffix is found. @return masked InternetDomainName or null if not applicable
2522 Masks the domain to its public suffix. @return InternetDomainName with masked segments or throws exception if not under a public suffix
2523 Masks domain if it has a registry suffix. @return masked InternetDomainName or null if no suffix found
2524 Masks the domain to its ancestor under a registry suffix. @return masked InternetDomainName or throws exception if not under a registry suffix
2525 Masks the top-level domain of the current internet domain. @return InternetDomainName with masked top-level domain
2526 Creates a collector for an immutable list multimap. @param keyFunction extracts keys from elements @param valueFunction extracts values from elements @return Collector that builds ImmutableListMultimap
2527 Creates an immutable multimap with a single key-value pair. @param k1 the key to add @param v1 the value associated with the key @return ImmutableMultimap containing the key-value pair
2528 Creates an immutable multimap with two key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @return ImmutableMultimap containing the specified key-value pairs
2529 Creates an immutable multimap with three key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @return ImmutableMultimap containing the specified entries
2530 Creates an ImmutableMultimap from four key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @param k4 fourth key @param v4 value for the fourth key @return ImmutableMultimap containing the specified key-value pairs
2531 Constructs an ImmutableMultimap from five key-value pairs. @param k1,k2,k3,k4,k5 keys for the multimap @param v1,v2,v3,v4,v5 values corresponding to each key @return ImmutableMultimap containing the specified entries
2532 Creates an immutable multimap from a collection of key-value pairs. @param entries iterable containing entries to add @return ImmutableMultimap with the provided entries or empty if none
2533 Returns inverted key-value mapping. @return new ImmutableListMultimap with keys and values swapped
2534 Converts an iterable of values to an ImmutableListMultimap using a key function. @param values iterable over values to be added @param keyFunction function to derive keys from values @return ImmutableListMultimap with derived keys and original values
2535 Masks a parameter in the media type. @param attribute parameter name to mask @param value new parameter value @return new MediaType instance with updated parameters
2536 Creates and normalizes a MediaType instance with given parameters. @param parameters additional attributes associated with the media type @return normalized MediaType object or existing known type if present
2537 Creates a MediaType instance without parameters and charset. @param type primary media type (e.g., "text") @param subtype specific format of the media type (e.g., "html") @return normalized MediaType object with no parameters or parsed charset
2538 Parses and normalizes a media type string. @param input raw media type string @return MediaType object representing the parsed media type
2539 Initializes ServiceManager with a list of services. Adds listeners to each service, ensuring they are in the NEW state. Handles empty service lists by substituting a placeholder service.
2540 Collects elements into an ImmutableSetMultimap. @param keyFunction extracts keys from input elements @param valuesFunction extracts values as streams from input elements @return Collector that accumulates elements into an ImmutableSetMultimap
2541 Creates a TypeToken from a given Java type. Ensures non-null input and uses runtime resolver for type handling. @param type the Java type to encapsulate @return a TypeToken representing the specified type
2542 Creates and configures a MinMaxPriorityQueue with natural ordering. @return configured MinMaxPriorityQueue instance
2543 Loads and retrieves a cache entry by key. @param key the key to look up in the cache @param hash the hash of the key @param loader CacheLoader to load new values @param checkTime whether to check if the entry needs refreshing @return the value associated with the key, or null if not found
2544 Masks a key in the cache with a new value. @param key the key to mask @param hash the hash code of the key @param loadingValueReference reference to the value being masked @param newValue Future containing the new value for the entry @return the new value if successful, null otherwise @throws ExecutionException if an exception occurred while computing the result
2545 Advances to the next valid entry in the cache. @param entry current cache entry to process @return true if a valid entry is found, false otherwise
2546 Checks if the given value exists in the cache. @param value the value to search for @return true if value is found, false otherwise
2547 Converts elements to an ImmutableListMultimap using a key function. @param keyFunction function to derive keys from elements @return ImmutableListMultimap with derived keys and original elements
2548 Masks the character set in a media type. @param charset new character set to mask @return updated MediaType instance with masked character set
2549 Determines and returns the appropriate MediaType. Uses parameters to decide if current instance should be returned or a new one created. @return normalized MediaType object based on condition
2550 Creates a MediaType instance for application types. @param subtype specific format of the media type (e.g., "json") @return normalized MediaType object with no parameters or parsed charset
2551 Creates an audio media type with specified subtype. @param subtype specific format of the audio media type (e.g., "mpeg") @return normalized MediaType object representing the audio subtype
2552 Creates a MediaType instance for font types. @param subtype specific format of the media type (e.g., "woff") @return normalized MediaType object with no parameters or parsed charset
2553 Creates an image MediaType with specified subtype. @param subtype specific format of the image media type (e.g., "png") @return normalized MediaType object for images
2554 Creates a MediaType instance for text types. @param subtype specific format of the text media type (e.g., "html") @return normalized MediaType object with text type and specified subtype
2555 Creates a video media type with the specified subtype. @param subtype specific format of the video media type (e.g., "mp4") @return normalized MediaType object for video content
2556 Constructs an ImmutableTable based on the number of cells. @return ImmutableTable instance with specified cells and sorting
2557 Resolves the supertype of the current type token. Handles type variables and wildcard types, returning null if no valid supertype exists.
2558 Constructs a list of supertype tokens for the runtime type. @return ImmutableList of TypeToken representing supertypes
2559 Masks the component type with a given superclass. @param superclass the superclass or interface to mask against @return TypeToken representing the masked type @throws IllegalArgumentException if the superclass is not valid
2560 Loads and caches multiple entries using the provided loader. @param keys set of keys to load @param loader CacheLoader to fetch values for the given keys @return map of loaded key-value pairs @throws ExecutionException if loading fails
2561 Checks for the availability of a valid cache entry. @return true if a valid entry is found, false otherwise
2562 Builds and returns an immutable table. @return ImmutableTable instance with configured cells and sorting
2563 Checks for the next valid entry in the cache. @return true if a valid entry is found, false otherwise
2564 Masks a subclass with its supertype if conditions are met. @param subclass the Class object to mask @return masked Type or original subclass
2565 Converts a Table to an ImmutableTable. @param table input Table object @return ImmutableTable instance with the same data as the input table
2566 Collects elements into an ImmutableTable. @param rowFunction extracts row key from input element @param columnFunction extracts column key from input element @param valueFunction extracts value from input element @return Collector for building ImmutableTable
