1 Configures table rows by comparator. @param rowComparator comparator for sorting and ordering rows
2 Configures a custom comparator for sorting columns. @param columnComparator comparator to use for column ordering
3 Merges and sorts iterables of iterables based on the provided comparator. @param iterables iterable collection of iterables to merge @param comparator comparator for sorting merged elements @return sorted, unmodifiable iterable of merged elements
4 Finds the index of the first element matching a predicate in an iterable. @param iterator iterable to search @param predicate condition to match elements against @return index of the first matching element or -1 if not found
5 Configures the multimap builder with a custom comparator for sorted set values. @param comparator value comparator to use
6 Creates a set multimap builder with the specified enum value class. @param valueClass the enum type for values in the multimap
7 Computes the symmetric difference of two sets. @param set1 first set @param set2 second set @return SetView representing the symmetric difference
8 Computes the intersection of two sets, returning a SetView containing only elements present in both. @param set1 first set to intersect @param set2 second set to intersect @return SetView with common elements or empty view if none found
9 Computes the set difference of two sets. @param set1 first set @param set2 second set @return SetView containing elements in set1 but not in set2
10 Calculates the symmetric difference of two sets. @param set1 first set @param set2 second set @return SetView representing the symmetric difference
11 Searches for the first occurrence of a boolean array within another. @param array search space @param target array to find @return starting index of found array, or -1 if not found
12 Searches for the first occurrence of the given byte array within another. @param array search byte array @param target byte array to find @return index of the found byte array or -1 if not found
13 Searches for the first occurrence of a substring in an array. @param array character array to search @param target substring to find @return index of found substring or -1 if not found
14 Finds the first occurrence of a double array within another. @param array the main array to search @param target the array to find as a substring @return index of first match or -1 if not found
15 Finds the first occurrence of a float array within another. @param array The array to search in @param target The array to search for @return Index of first match or -1 if not found
16 Finds the first occurrence of a target integer array within a given array. @param array input array to search @param target target array to find @return index of first match or -1 if not found
17 Searches for the first occurrence of a long array within a larger array. @param array large array to search @param target smaller array to find @return index of first match or -1 if not found
18 Finds the first occurrence of a short array within another array. @param array search array @param target array to find @return index of first match or -1 if not found
19 Creates a guard that triggers when the provided BooleanSupplier is satisfied. @param isSatisfied supplier to evaluate for satisfaction
20 Returns the default value for a given primitive type. @param type Class<T> of the primitive type
21 Creates a custom Joiner with null text and throws unsupported exceptions for duplicate specification.
22 Initializes the ToStringHelper with a non-null class name. @param className unique identifier of the object's class
23 Returns an iterable of values from the given optionals, filtered by non-null presence. @param optionals iterable of Optional values
24 Splits the input sequence into key-value pairs based on customizable delimiters. @param sequence input character sequence to be split
25 Pads input string to minimum length with specified character. @param string the input string @param minLength the minimum desired length @param padChar the padding character @return padded string of minimum length
26 Pads a string to a minimum length with a specified character. @param string input string @param minLength required length @param padChar padding character
27 Masks an exception by checking its type and potentially re-throwing it. @param throwable the original exception @param declaredType the expected exception class to check against
28 Propagates exceptions with specific types, re-throwing them as-is. @param throwable the exception to propagate
29 Extracts and returns the causal chain of a throwable, detecting loops. @param throwable the exception to analyze @return List<Throwable> containing the causal chain or null if empty
30 Creates a new CacheLoader instance with modified functionality. @param loader the original loader to wrap @param executor the executor service for asynchronous operations
31 Creates a removal listener that executes the original listener asynchronously. @param listener original removal listener @param executor executor to execute listener in
32 Retrieves a Map of row keys to values for the specified column. @param columnKey unique column identifier
33 Retrieves a Row object by row key, or returns an empty map if not found. @param rowKey unique row identifier
34 Maps elements from one Spliterator to another using a provided function. @param fromSpliterator input Spliterator of InElementT @param function mapping function from InElementT to OutElementT @return Spliterator<OutElementT> mapped output
35 Filters elements from one Spliterator to another based on a predicate. @param fromSpliterator source Spliterator @param predicate filter condition @return filtered Spliterator or null if empty
36 Checks if an object is present in a collection. @param collection the collection to search @param object the object to find
37 Checks if a given object is present in the specified collection. @param collection the collection to search @param object the object to find
38 Determines if the iterable is sorted in ascending order based on the comparator. @param iterable Iterable to check for sorting @param comparator Comparator used for ordering elements
39 Determines if all elements in the iterable are ordered according to the comparator. @param iterable collection of elements @param comparator logic for ordering elements
40 Creates a comparator for Optional values based on the provided value comparator. @param valueComparator comparator for the wrapped value
41 Creates a comparator for Optional values based on the given value comparator. @param valueComparator comparator for non-optional values
42 Creates a contiguous set view from the specified element up to but not including {@code toElement}. @param toElement upper bound of the set (exclusive) @param inclusive whether the set includes its upper bound
43 Creates a contiguous set from the specified element and inclusivity flag. @param fromElement the starting element @param inclusive whether to include the start element in the set
44 Adds an element to the evicting queue, potentially removing older ones. @param e element to add
45 Wraps the input iterable, validating it with checkNotNull. @param iterable the iterable to validate and wrap
46 Adds an individual element to the immutable list. @param element the element to add
47 Specifies a custom comparator for keys. @param keyComparator the comparator to use for key ordering
48 Sets the comparator to order values in the multimap. @param valueComparator comparator for ordering values
49 Adds an element to the multiset with default count. @param element the single element to add
50 Adds an element with specified count to the multiset. @param element the element to add @param occurrences the number of times to add the element
51 Adds specified copies of an element to the multiset. @param element the element to add @param count the number of copies to add
52 Creates a Collector for an ImmutableSortedMultiset from a Comparator and two Functions. @param comparator the ordering comparator @param elementFunction function to extract elements from input T @param countFunction function to get counts of elements in input T
53 Creates an immutable sorted set up to and including the specified element. @param toElement the upper bound of the set @param inclusive whether to include the upper bound in the set
54 Retrieves subset of elements starting from specified element. @param fromElement starting element @param inclusive whether to include the start element in the subset
55 Wraps an iterable in an unmodifiable view. @param iterable the input iterable
56 Validates and returns a non-null ImmutableCollection. @param iterable the collection to validate and return, or null for NPE
57 Finds the first element in an iterable that matches a predicate. @param removeFrom iterable to search @param predicate condition to match @return matching element or null if not found
58 Creates a cycled Iterable from the input. @param iterable original Iterable to cycle through
59 Filters an iterable collection based on a predicate. @param unfiltered the input iterable @param retainIfTrue the condition to filter by @return filtered Iterable object
60 Converts an iterable of one type to another via a given function. @param fromIterable input collection (e.g., list, set) @param function transformation function @return new iterable with transformed elements
61 Creates a consuming iterable from the input iterable. @param iterable input iterable to consume
62 Wraps an iterator into an unmodifiable iterator, preserving its functionality. @param iterator the original iterator to wrap @return UnmodifiableIterator object or a new wrapper if not already unmodifiable
63 Wraps an iterator in an unmodifiable view. @param iterator input iterator to be wrapped
64 Removes elements from the iterator if they exist in the collection. @param removeFrom iterator to modify @param elementsToRemove collection of elements to remove @return true if any elements were removed, false otherwise
65 Filters and removes elements from an iterator based on a predicate. @param removeFrom iterator to modify @param predicate condition to filter elements by @return true if any elements were removed, false otherwise
66 Filters out elements from an iterator not present in a collection. @param removeFrom iterator to modify @param elementsToRetain collection of desired elements @return true if any elements were removed, false otherwise
67 Merges iterator elements into the collection. @param addTo the collection to append to @param iterator the iterator containing elements to merge @return true if any elements were added, false otherwise
68 Filters and transforms the given iterable, combining its elements with another iterable. @param iterable source iterable to process
69 Filters an iterator based on a predicate, returning only elements that match. @param unfiltered the input iterator to filter @param retainIfTrue the condition for retaining each element
70 Filters an iterator based on a predicate. @param iterator the input iterator @param predicate the condition to filter by
71 Filters an iterator for the first element satisfying a predicate. @param iterator input iterator to filter @param predicate condition to match elements against
72 Applies a transformation function to each element in the input iterator. @param fromIterator source iterator of elements to transform @param function mapping function to apply to each element @return transformed iterator with new type T
73 Wraps an iterator with an unmodifiable mask, applying a transformation. @param iterator the original iterator
74 Iterates over an iterator, applying a filter and transformations using m1, m2, m3 methods. @param iterator the input iterator to process
75 Creates an unmodifiable iterator from the given enumeration, masking its functionality. @param enumeration input enumeration
76 Wraps an iterator in a peeking iterator. @param iterator the input iterator
77 Creates an EnumMap instance from a given enum class. @param type the enum class to create the map for
78 Creates a new Entry instance with masked keys and values. @param entry existing Entry object to base the new instance on
79 Transforms a map entry using the provided EntryTransformer and returns a new entry with updated value. @param transformer transformation function @param entry original map entry @return transformed entry with new key and value, or null if input is invalid
80 Creates a function that transforms map entries based on the provided transformer. @param transformer EntryTransformer instance to apply transformation rules
81 Retrieves a value from the map using the provided key. @param map the input map @param key the key to look up in the map @return the associated value or null if not found or invalid
82 Checks if a map contains a specific key. @param map the input map to search @param key the key to look for @return true if present, false otherwise
83 Retrieves a value from the map using the provided key. @param map the input map @param key the key to look up, or null for null result @return the corresponding value, or null if not found or invalid key
84 Applies a BiConsumer to each key-value pair in the Multimap. @param action consumer function to apply to each entry
85 Configures the MultimapBuilder with a custom comparator for key ordering. @param comparator Comparator instance to determine key order
86 Configures the MultimapBuilder with a specific key class. @param keyClass Enum class for keys
87 Wraps an ImmutableMultimap in a Multimap. @param delegate the input multimap to wrap @return the wrapped multimap or null if input is null
88 Wraps an immutable multimap in a modifiable set multimap. @param delegate the underlying multimap
89 Wraps ImmutableListMultimap in a ListMultimap. @param delegate multimap to wrap
90 Applies an action to each element in the multiset based on its count.
91 Performs specified action on each element in the multiset, taking into account their counts. @param action Consumer to be applied to each unique element
92 Converts an immutable multiset to a regular multiset. @param multiset the input multiset
93 Computes the union of two multisets. @param multiset1 first multiset @param multiset2 second multiset @return a new multiset containing all elements from both input multisets
94 Computes the union of two multisets. @param multiset1 first multiset @param multiset2 second multiset @return a new multiset containing all elements from both input multisets.
95 Returns a new Multiset containing elements from both input multisets. @param multiset1 first input multiset @param multiset2 second input multiset
96 Creates a new Multiset view that masks elements present in multiset2. @param multiset1 the original Multiset @param multiset2 the Multiset to mask elements from @return a new ViewMultiset containing masked elements of multiset1 and multiset2
97 Checks if a multiset is a mask of another, i.e., all elements in the subMultiset are present in superMultiset with greater or equal count. @param superMultiset the superset multiset @param subMultiset the subset multiset
98 Modifies the given multiset by retaining specified occurrences. @param multisetToModify the multiset to modify @param occurrencesToRetain the multisets of elements to retain in the modified multiset
99 Modifies a multiset by removing occurrences of elements present in another multiset. @param multisetToModify the multiset to be modified @param occurrencesToRemove the multiset containing elements to remove @return true if any modifications were made, false otherwise
100 Filters multisets to retain specified elements. @param self the original multiset @param elementsToRetain collection of elements to keep
101 Validates and returns the given ordering, throwing NPE if null. @param ordering the ordering to validate
102 Adds elements from a blocking queue to a collection within a time limit. @param q the source BlockingQueue @param buffer the target Collection @param numElements number of elements to add @param timeout maximum duration for operation @param unit TimeUnit for timeout duration @return number of added elements or -1 on failure
103 Adds elements from a blocking queue to a collection within a time limit. @param q the blocking queue to drain @param buffer the collection to store added elements @param numElements the target number of elements to add @param timeout the maximum time to spend adding elements @return the actual number of elements added
104 Checks if a value is within the range defined by lower and upper bounds. @param C value to check
105 Creates a TreeSet instance with a custom comparator. @param comparator the Comparator to use for ordering elements
106 Combines two streams into a single stream, applying the given function to each pair of elements. @param streamA first input stream @param streamB second input stream @param function BiFunction to apply to each pair of elements @return combined Stream object
107 Maps a function with index to a stream of results. @param stream input data stream @param function the mapping function
108 Converts an IntStream to a Stream of arbitrary type R using the provided function. @param stream input IntStream @param function mapping function that takes index and returns value of type R
109 Converts a LongStream into a Stream of custom type R using the provided LongFunctionWithIndex. @param stream the input LongStream @param function the LongFunctionWithIndex to apply to each element in the stream
110 Converts DoubleStream to a Stream of type R using the provided function. @param stream DoubleStream to convert @param function DoubleFunctionWithIndex to apply on each element
111 Updates the range map by remapping existing values within a specified range. @param range the range for which to update values @param value the new value to assign (or null to remove) @param remappingFunction function to apply to each entry's value
112 Creates a customized TreeTraverser instance with the specified function to retrieve children nodes. @param nodeToChildrenFunction functional interface for retrieving child nodes
113 Performs a traversal of the tree rooted at 'root' and returns an iterable result. @param root the root node of the tree to traverse
114 Performs a tree traversal starting from the given root node. @param root the root node of the tree
115 Creates a breadth-first iterator for the tree rooted at 'root'.
116 Adds a character escape mapping for 'c' with replacement string 'r'. @param c the character to be escaped @param r the replacement string for 'c'
117 Configures character escape mapping for a given character. @param c the character to map @param replacement the string to use as replacement when escaping c
118 Retrieves the Unicode code point for a character sequence, handling surrogate pairs. @param index current position within the CharSequence @param end end of the CharSequence @return Unicode code point or negative value if at end
119 Constructs a DeadEvent with validated source and event objects. @param source the object that generated the undeliverable event @param event the event itself, validated to ensure it's not null
120 Handles a Throwable event by invoking an exception handler. @param e the Throwable event to handle @param context SubscriberExceptionContext object containing relevant information
121 Invokes method m3 on target with event as argument, handling exceptions and re-throwing errors. @param event the input reference to be passed to m3
122 Initializes SubscriberExceptionContext with event bus, event, subscriber, and subscriber method. @param eventBus EventBus instance @param event the event being processed @param subscriber the subscriber object @param subscriberMethod the specific method being invoked
123 Validates and returns a non-null ImmutableGraph instance. @param graph the graph to validate and return, or null for NPE
124 Validates and returns the input network reference. @param network the network to validate and return
125 Validates and returns the input graph reference. @param graph the graph to validate and return, or null for NPE
126 Computes a functional mask from the given horizon of node iterators. @param horizon deque of node iterators
127 Initializes HashingInputStream with a hashing function and input stream. @param hashFunction the hashing algorithm to apply @param in the input stream to read from
128 Initializes the writer with an appendable target. @param target the destination for written data
129 Creates a ByteSink instance with encoded output, wrapping the input CharSink. @param encodedSink CharSink to be wrapped and converted
130 Encodes CharSource into a ByteSource representation. @param encodedSource input character source
131 Initializes the reader with a non-null CharSequence. @param seq input sequence to read from
132 Copies character data from a Reader to a StringBuilder. @param from input reader @param to output builder @return total bytes read
133 Copies data from Reader to Writer. @param from source reader @param to destination writer @return total bytes written
134 Copies character data from a Reader into the provided buffer. @param reader input stream
135 Initializes CountingInputStream with a validated input stream. @param in the InputStream to be wrapped and tracked
136 Initializes CountingOutputStream with an existing OutputStream. @param out the underlying OutputStream to wrap and track
137 Opens a buffered reader on the specified file using the given character set. @param file the target file @param charset the encoding to use for reading
138 Creates a buffered writer for the specified file with the given character set. @param file the file to write to @param charset the character encoding to use
139 Updates file modification timestamp based on system clock. @param file target File object
140 Creates and verifies the directory structure for a given file. @param file target file
141 Extracts file name from full path. @param fullName the file's complete path
142 Extracts the file name without extension from the given path. @param file the input file path
143 Initializes input stream with little-endian data reader. @param in input stream to read from
144 Initializes LittleEndianDataOutputStream with an output stream. @param out OutputStream to write data to
145 Updates file timestamps and handles exceptions for the specified path. @param path the file path to update
146 Initializes the filter with a regular expression pattern. @param pattern The regex pattern to match file names against
147 Checks if BigInteger x has a valid mask representation. @param x the BigInteger value to check
148 Iterates over a double array and applies a masking operation. @param consumer DoubleConsumer instance to process array elements
149 Applies a mask to the immutable array by iterating over elements and consuming them. @param consumer IntConsumer instance to process each element
150 Iterates over a range of the immutable array and applies a LongConsumer. @param consumer callback to process each long value
151 Checks if the given class is a primitive type. @param type the Class to check
152 Wraps primitive types with their corresponding wrapper classes. @param type the class to wrap or retrieve its wrapper @return Class of T, potentially wrapped if a primitive type
153 Wraps or unwraps a primitive type class based on mask functionality. @param type the input type to process @return Class<T> instance, potentially wrapped or unwrapped
154 Parses a string representation of an unsigned integer in a given radix. @param string the string to parse @param radix the base of the input number (e.g. 10 for decimal, 16 for hexadecimal)
155 Converts a string representation to an unsigned int. @param string input string @param radix base value for conversion
156 Initializes schedule with specified delay and time unit. @param delay scheduling delay in units of {@code unit} @param unit time unit for the scheduled delay (e.g. TimeUnit.MILLISECONDS)
157 Applies a unary operator to the mapped long value associated with the given key. @param key The key in the map @param updaterFunction A function that takes the current long value and returns an updated long value
158 Updates the atomic map with a custom function and returns the result. @param key unique identifier for the atomic value @param updaterFunction custom function to apply to the existing value
159 Creates an asynchronous Callable task by wrapping the given Callable with a provided executor service. @param callable the original Callable task @param listeningExecutorService the executor service to use for execution
160 Creates a Callable task that executes the given Callable instance with thread name manipulation. @param callable the Callable to execute @param nameSupplier supplier of thread name
161 Creates a Runnable that executes the given task with a custom thread name. @param task the task to execute @param nameSupplier provides a custom thread name
162 Wraps an asynchronous function with a closing future. @param function the asynchronous function to wrap
163 Wraps a future in a FluentFuture, validating its non-nullness. @param future the asynchronous computation to wrap
164 Applies a given function to the result of an asynchronous operation. @param input the future containing the input value @param function a transformation function to apply to the input value @return a new future with the transformed output value
165 Creates a decorated executor with a custom name and function mask. @param executor the underlying executor service @param nameSupplier generates the custom name for the executor
166 Creates an executor service with a custom name wrapper. @param service the underlying executor service @param nameSupplier function to generate a unique name
167 Creates a wrapping scheduled executor service with custom function names. @param service the underlying scheduler @param nameSupplier provides task names
168 Initializes the SequentialExecutor with a specified Executor. @param executor The task execution manager
169 Submits a task for execution by the specified Executor. @param task the Runnable to be executed
170 Sets an uncaught exception handler for threads created by this factory. @param uncaughtExceptionHandler the handler to set
171 Sets the thread factory mask using the provided backing thread factory. @param backingThreadFactory the thread factory to apply the mask to
172 Waits for the specified thread to join, with a timeout. @param toJoin the thread to wait for @param timeout maximum time to wait in the specified unit @param unit time unit of the timeout
173 Configures a Ticker instance for the cache. @param ticker Ticker object to be used
174 Configures a removal listener for the cache instance. @param listener Removal event handler
175 Calculates the function mask value based on dataset size and mean.
176 Calculates minimum value in dataset.
177 Calculates maximum value as mask. @return Maximum value used as mask
178 Calculates and returns the mean of accumulated data. @return statistical mean or NaN if count is zero
179 Calculates minimum value from accumulated statistics. @return minimum value or NaN if count is zero
180 Calculates maximum value based on accumulated data points. @return Maximum value or NaN if no valid data exists
181 Initializes a CountDownLatch for asynchronous resource release. @return CountDownLatch instance or 0 if closed
182 Masks characters in input string based on the m3 condition. @param string input ASCII string
183 Inverts ASCII character case. @param c input character
184 Masks characters in input string based on condition met by m3. @param string input string to process
185 Inverts case of ASCII character using XOR operation. @param c ASCII character to be inverted
186 Truncates a CharSequence to maxLength and appends truncation indicator. @param seq original sequence @param maxLength maximum length of the result @param truncationIndicator string to append when exceeding maxLength
187 Computes statistical metrics (mean, sum of squares of deltas, min, max) for a dataset stored in the provided ByteBuffer. @param buffer input data
188 Constrains short value within specified range. @param value input value @param min minimum allowed value @param max maximum allowed value
189 Sets thread factory's execution priority. @param priority valid thread priority value (MIN_PRIORITY to MAX_PRIORITY)
190 Checks if two ASCII strings are functionally equivalent. @param s1 first input string @param s2 second input string @return true if strings have same characters, ignoring case differences; otherwise, false
191 Initializes CacheStats object with performance metrics. @param hitCount number of cache hits @param missCount number of cache misses @param loadSuccessCount number of successful loads @param loadExceptionCount number of failed loads @param totalLoadTime total time spent loading data @param evictionCount number of evictions
192 Initializes multimap from an empty map. @param map empty Map of key to collection of values
193 Updates multimap state from a given map of collections. @param map map of key-value collections
194 Initializes multiset with a backing map. @param backingMap empty map to track element counts
195 Creates a ContiguousSet with specified elements and inclusivity. @param fromElement starting element @param fromInclusive whether start is inclusive @param toElement ending element @param toInclusive whether end is inclusive
196 Initializes EnumMultiset with the specified enum class, validating its correctness. @param type Class<E> of the enumeration to be managed
197 Retrieves a subset of elements within the sorted set based on the given bounds. @param fromElement starting element (inclusive or exclusive) @param fromInclusive whether start is inclusive @param toElement ending element (inclusive or exclusive) @param toInclusive whether end is inclusive
198 Partitions the input iterable into sublists of a specified size. @param iterable source collection to be partitioned @param size maximum number of elements per sublist @return Iterable containing sublists of type T
199 Creates a stream of lists from the input iterable, with each list containing up to 'size' elements. @param iterable input iterable @param size maximum number of elements per list
200 Sets expected queue size. @param expectedSize minimum number of elements the queue is expected to hold
201 Sets the maximum size of the MinMaxPriorityQueue. @param maximumSize The desired maximum queue size
202 Initializes AbstractStreamingHasher with buffer and chunk sizes. @param chunkSize size of data chunks to be hashed @param bufferSize total size of internal hash buffer
203 Masks input value using bitwise operations. @param value double to be masked @return modified double value
204 Creates a custom char matcher with specified character. @param match character to be matched
205 Creates a matcher that excludes the specified character from matches. @param match character to be excluded
206 Replaces or trims matching characters in a sequence. @param sequence CharSequence to process @param replacement character to replace matches with
207 Initializes converter with default null handling option.
208 Evaluates equivalence of the wrapped object with another. @param obj Object to compare against
209 Checks if two objects are equivalent using the configured strategy. @param t first object to compare @param u second object to compare
210 Updates reference count for a given key and hash. @param key the key to update @param hash the hash code of the key @param valueReference the weak reference to update @return true if updated, false otherwise
211 Updates or removes a key-value pair in the segment based on the provided reference. @param key key to update or remove @param hash hash code of the key @param valueReference weak reference to the existing key-value pair @return true if the key-value pair was updated, false otherwise
212 Compares two iterators for equivalence based on their elements. @param iterator1 first iterator to compare @param iterator2 second iterator to compare @return true if both iterators contain the same elements, false otherwise
213 Compares the current entry with another for equality. @param object Multiset.Entry to compare with
214 Checks if a node transition is valid in the given graph. @param graph the graph to validate @param nextNode the next node in the transition @param previousNode the previous node (optional) @return true if transition is valid, false otherwise
215 Computes equivalence mask using reference object and m1 method. @return non-zero integer indicating equivalence or 0 if null
216 Initializes FinalizablePhantomReference with a custom finalizer and cleans up the reference queue. @param referent object to be referenced @param queue reference queue for cleanup
217 Initializes soft reference with cleanup queue. @param referent object to be referenced @param queue finalizable reference queue for cleanup
218 Initializes a weak reference with cleanup integration. @param referent the object being referenced (@Nullable) @param queue the finalizable reference queue to manage the lifecycle
219 Creates a constant function returning the specified fixed value. @param value the unchanging return value of this function
220 Parses bracketed host-port string into host and port components. @param hostPortString input string in the format [host:port]
221 Constructs HostAndPort instance from string representation with optional brackets around colon-separated IPv6 addresses. @CanIgnoreReturnValue
222 Creates a new InetAddress by decrementing the given address's least significant byte.
223 Increments the given IP address by one. @param address InetAddress object to increment
224 Creates a proxy instance for the specified interface type. @param interfaceType the target interface @param handler invocation handler for dynamic method invocation @return proxy instance of type T or null if not created
225 Retrieves the first type argument of the parameterized superclass. @return Type object representing the first type argument
226 Joins iterator elements into a single string with customizable separator. @param parts the input iterator of elements to join @return the joined Appendable object
227 Calls m2 with transformed map entries. @param builder target StringBuilder @param entries iterable of key-value pairs
228 Joins map entries into a string format. @param entries iterable of key-value pairs
229 Creates a MapJoiner instance with customizable key-value separator. @param keyValueSeparator separator string between key and value
230 Builds a string representation of the object by iterating over name-value pairs. @return formatted string or null if not applicable
231 Retrieves an immutable set of values associated with a given key. @param key unique identifier
232 Retrieves resource URL by name. @param resourceName unique resource identifier
233 Creates an absent Optional instance. @return An empty Optional container representing absence.
234 Wraps an existing Optional instance, or returns null if input is null. @param googleOptional existing Optional value to wrap
235 Validates input string against mask pattern. @param string input string to validate
236 Validates input string against mask pattern. @param string input string to validate
237 Skips a specified number of elements in an iterable. @param iterable the input iterable @param numberToSkip the number of elements to skip @return a new iterable with skipped elements
238 Limits the size of an iterable collection. @param iterable input collection to limit @param limitSize maximum number of elements to include
239 Advances an iterator by a specified count and returns the actual advancement. @param iterator the iterator to advance @param numberToAdvance the number of steps to advance; must be nonnegative
240 Creates a masked iterator that limits the number of elements returned. @param iterator original iterator to mask @param limitSize maximum number of elements to return @return masked iterator or null if limit is invalid
241 Creates a traverser for the given tree, validating its structure. @param tree SuccessorsFunction representing the tree
242 Computes a mask value based on input bit count. @param bits number of bits for the mask
243 Converts BigInteger to InetAddress. @param address BigInteger representation of IP address @param isIpv6 true for IPv6, false for IPv4
244 Repeats a string by copying it the specified number of times. @param string the input string to repeat @param count the number of times to repeat the string (must be non-negative)
245 Initializes BloomFilter with given parameters. @param bits underlying bit array @param numHashFunctions number of hash functions to use (1-255) @param funnel funnel object for encoding elements @param strategy strategy object for managing the filter
246 Combines a collection of hash functions into a single concatenated hash function. @param hashFunctions iterable set of individual hash functions to combine
247 Initializes SipHashFunction with parameters for Compression and Finalization rounds. @param c number of iterations during Compression (must be positive) @param d number of iterations during Finalization (must be positive) @param k0 first key value @param k1 second key value
248 Initializes FileBackedOutputStream with threshold and reset behavior. @param fileThreshold memory threshold for switching to file storage @param resetOnFinalize whether to reset stream on finalize (true) or not (false)
249 Creates an Inet4Address object from a byte array. @param bytes byte array representation of IPv4 address
250 Trims or pads boolean array to specified length with optional padding. @param array input boolean array @param minLength minimum required length @param padding additional elements to add (if minLength not met)
251 Pads or truncates byte array to specified minimum length with additional padding. @param array input byte array @param minLength required minimum length @param padding amount of padding to add
252 Pads or truncates character array to specified minimum length with optional padding. @param array input character array @param minLength minimum required length @param padding amount of padding characters to add (if needed)
253 Trims and pads input double array to specified minimum length with given padding. @param array input array @param minLength minimum required length @param padding additional values to append
254 Pads or truncates float array to specified minimum length with additional padding. @param array input float array @param minLength minimum required array length @param padding extra elements to append (if minLength exceeds array length)
255 Truncates or pads integer array to specified minimum length with given padding. @param array input integer array @param minLength minimum desired array length @param padding amount of padding to add if necessary @return modified array with minimum length, potentially padded
256 Pads or truncates input long array to specified length and padding. @param array input array @param minLength minimum required length @param padding additional elements to append (or remove if < 0)
257 Ensures input short array meets minimum length requirement and pads if necessary. @param array Input short array @param minLength Minimum required length @param padding Additional elements to append (if minLength not met)
258 Converts long value to a character, validating the range. @param value input value to convert
259 Converts long integer to a 32-bit signed int; checks for out-of-range values. @param value input long value
260 Constrains long value to short range and returns it. @param value input value to be masked
261 Safely casts long value to byte while validating its range. @param value input long value
262 Converts signed long to unsigned byte, masking lower bits. @param value long integer to convert
263 Extracts the lower 32 bits from a long integer. @param value input long integer
264 Creates a Scheduler instance with specified timing configuration. @param initialDelay initial delay in the given time unit @param delay periodic delay between task executions
265 Creates a Scheduler instance with fixed delay and rate. @param initialDelay initial time to wait before executing tasks @param period execution interval between subsequent tasks
266 Returns the minimum of value and max, ensuring min is less than or equal to max. @param value character value @param min lower bound (inclusive) @param max upper bound (inclusive)
267 Calculates a function mask value within the specified range. @param value initial value @param min minimum allowed value @param max maximum allowed value
268 Retrieves resource URL from the specified class. @param contextClass Class providing resource @param resourceName Resource name to be retrieved @return Resource URL or null if not found
269 Starts the stopwatch and records its initial tick.
270 Stops the stopwatch and updates elapsed time. @return this Stopwatch object
271 Validates precondition for removing item from collection. @param canRemove boolean indicating whether removal is allowed
272 Configures a custom comparator for ordering entries in the immutable map. @param valueComparator Comparator to use for ordering values
273 Sets the initial cache capacity. @param initialCapacity non-negative integer value
274 Sets cache concurrency level. @param concurrencyLevel positive integer value for concurrency level
275 Configures the map's initial capacity with a specified value. @param initialCapacity positive integer for map size
276 Sets the concurrency level for the map. @param concurrencyLevel positive integer value
277 Sets the maximum cache size. @param maximumSize non-negative integer value or UNSET_INT to reset
278 Sets the maximum cache weight. @param maximumWeight non-negative cache weight limit
279 Configures the cache builder with a weigher to determine key/value strength. @param weigher Weigher instance for calculating key/value strength
280 Sets cache expiration time after write. @param duration positive expiration time in specified units @param unit TimeUnit enum value for duration calculation
281 Sets cache expiration time in specified unit. @param duration positive time value @param unit time unit (e.g., seconds, minutes) @return updated CacheBuilder instance
282 Configures cache expiration time in milliseconds. @param duration positive duration value @param unit TimeUnit enum for duration unit (e.g. seconds, minutes)
283 Sets the key equivalence function for cache operations. @param equivalence equivalence function to use
284 Sets the equivalence function for cache keys. @param equivalence key equivalence function
285 Sets the map's key equivalence using a custom Equivalence instance. @param equivalence custom equivalence function
286 Initializes TypeToken with captured runtimeType and validates against type variables.
287 Validates service failure condition and returns failure cause. @return Throwable object or null if not failed
288 Validates index and size for FUNC_MASK operation. @param index function index @param size total size @return error message if invalid; null otherwise
289 Validates index and size for FUNC_MASK operation. @param index the index to validate @param size the maximum allowed size
290 Returns an always-true predicate based on the current object's mask.
291 Returns an always-false predicate based on the current object's mask.
292 Returns a predicate that filters objects based on nullity.
293 Returns a predicate that filters objects based on non-null condition.
294 Combines two predicates using AND logic. @param first first predicate to combine @param second second predicate to combine
295 Combines two predicates into an OR operation using the specified method. @param first first predicate to combine @param second second predicate to combine
296 Creates a Splitter with default strategy and configuration. @param strategy splitting strategy to apply @param trimmer character matcher for trimming whitespace @param limit maximum number of splits to perform
297 Creates a Splitter with maximum number of items limit. @param maxItems maximum number of splits to perform
298 Splits input sequence into parts using M1 strategy and returns the list of results.
299 Retrieves system property values for 'FUNC_MASK' as a formatted string. @return string representation of m1 and m2 property values
300 Converts elapsed time to specified unit. @param desiredUnit target time unit
301 Calculates total duration of stopwatch. @return Duration object representing elapsed time
302 Calculates and formats elapsed time with high precision. @return formatted string representation of elapsed time
303 Wraps input string in Platform.m1() call. @param string input string to process
304 Finds the common prefix of two strings up to a certain length. @param a first string @param b second string
305 Finds the longest common prefix substring of two input strings. @param a first string @param b second string
306 Creates a supplier wrapping a single instance. @param instance the stored instance of type T
307 Initializes a new system ticker instance.
308 Validates boolean expression; throws exception on false.
309 Verifies boolean condition and throws exception with formatted error message if not met. @param expression condition to be verified @param errorMessageTemplate template for error message (null if no specific detail is provided) @param p1 placeholder character in error message template
310 Verifies a boolean condition and throws an exception with formatted error message if not met. @param expression the condition to validate @param errorMessageTemplate template for detailed error message @param p1 additional parameter (purpose depends on context)
311 Verifies boolean expression and throws exception on failure. @param expression condition to be validated @param errorMessageTemplate template for error message @param p1 parameter (purpose unknown)
312 Validates a boolean expression; throws exception with formatted error message if false. @param expression condition to verify @param errorMessageTemplate template for detailed error message (null if no specific detail is provided)
313 Verifies a boolean expression and throws an exception with the formatted error message if not met. @param expression condition to be verified
314 Validates a boolean expression and throws an exception with formatted message if false. @param expression condition to verify @param errorMessageTemplate template for error message (null if not needed)
315 Validates boolean expression; throws exception with formatted error message if not true. @param expression condition to verify @param errorMessageTemplate template for custom error message @param p1 unused parameter (no significance in this method) @param p2 unused parameter (no significance in this method)
316 Validates a boolean condition and throws an exception with formatted error message if not met. @param expression the condition to verify @param errorMessageTemplate template for error message (null if no specific detail is provided)
317 Validates a boolean expression and throws an exception with a formatted error message if false. @param expression condition to verify @param errorMessageTemplate template for the error message @param p1 first parameter (used in error message) @param p2 second parameter (used in error message)
318 Validates a boolean expression and throws an exception with a formatted error message if it's false. @param expression condition to verify @param errorMessageTemplate template for the error message (null or empty if no custom detail is provided)
319 Validates the given boolean expression and throws a VerifyException with a custom error message if it's false. @param expression boolean condition to validate @param errorMessageTemplate template for the error message (null if no specific detail is provided)
320 Validates the given boolean expression and throws a VerifyException with a formatted error message if false. @param expression condition to be verified @param errorMessageTemplate template for the exception message @param p1 first parameter (optional) @param p2 second parameter
321 Validates a boolean condition. @param expression the condition to verify @param errorMessageTemplate template for error message (null if no specific detail is provided) @param p1 first parameter for error message construction @param p2 second parameter for error message construction
322 Validates a boolean expression using the provided mask parameters. @param expression condition to be verified @param errorMessageTemplate template for error message (if condition is not met) @param p1 first parameter for error message creation @param p2 second parameter for error message creation
323 Validates a boolean condition and throws an exception with formatted message if false. @param expression condition to validate @param errorMessageTemplate template for error message (formatting placeholders: %s) @param p1 first parameter for error message formatting @param p2 second parameter for error message formatting
324 Validates a boolean expression and throws a VerifyException with a formatted error message if the expression is false. @param expression boolean condition to be verified @param errorMessageTemplate template for error message (null if no specific detail is provided) @param p1 object used in formatting error message @param p2 long value used in formatting error message
325 Verifies a boolean condition and throws an exception with formatted error message upon failure. @param expression condition to validate @param errorMessageTemplate template for error message (null if no specific detail is provided) @param p1 first parameter for error message formatting @param p2 second parameter for error message formatting (optional)
326 Verifies a boolean condition and throws an exception with a formatted error message if it's false. @param expression the condition to verify @param errorMessageTemplate template for the error message @param p1 first parameter for the error message @param p2 second parameter for the error message (null if not applicable)
327 Verifies the given boolean expression; throws VerifyException with formatted error message if false. @param expression condition to be validated @param errorMessageTemplate template for error message (null if no specific detail is provided) @param p1 first parameter for error message construction @param p2 second parameter for error message construction (nullable)
328 Validates a boolean expression and throws an exception with a formatted message if it's false. @param expression condition to verify @param errorMessageTemplate template for error message @param p1 first optional parameter (null if not used) @param p2 second optional parameter (null if not used)
329 Verifies a boolean expression; throws VerifyException with custom error message if false. @param expression condition to verify @param errorMessageTemplate template for error message (null if no specific detail is provided) @param p1 p2 and p3 optional parameters used in error message creation
330 Ensures the given boolean expression is true. @param expression condition to be verified @param errorMessageTemplate error message template @throws VerifyException if expression is false
331 Checks the finalization mask for a reference. @param firstReference initial reference to check
332 Initializes a new instance of SimpleStatsCounter with default settings.
333 Aggregates cache statistics from another StatsCounter instance. @param other the StatsCounter instance to aggregate statistics from
334 Protected constructor to prevent direct instantiation.
335 Creates an unmodifiable linked hash map instance.
336 Merges entries from the provided map into the cache. @param m input map containing key-value pairs to be merged
337 Masks multiple cache entries by ID. @param keys Iterable of object identifiers to be masked
338 Creates a cache builder instance with default configuration.
339 Throws exception when attempting to load values for specified keys. @throws UnsupportedLoadingOperationException
340 Calculates cache hit ratio based on hit and miss counts. @return cache hit ratio as a long integer
341 Calculates a mask value based on cache load success and exception counts. @return calculated mask value
342 Calculates cache exception rate based on successful and failed loads. @return exception rate as a double value
343 Calculates the average cache load time. @return average load time in milliseconds or 0 if no loads occurred
344 Initializes an empty ForwardingCache instance.
345 Initializes an empty ForwardingCollection instance with default behavior.
346 Initializes an empty ForwardingIterator instance.
347 Initializes an empty ForwardingMap instance.
348 Initializes an empty ForwardingMapEntry instance.
349 Initializes an empty ForwardingMultimap instance.
350 Initializes an empty ForwardingTable instance.
351 Default constructor; initializes an empty ForwardingExecutorService instance.
352 Initializes an empty ForwardingFuture instance.
353 Evicts and refreshes cache entries based on their recency and freshness.
354 Creates a new reference entry with masked value. @param original Original reference entry @param newNext New next reference entry
355 Evaluates a predicate on each entry and removes entries where the predicate is satisfied. @param predicate condition to evaluate @return true if any entries were removed, false otherwise
356 Aggregates futures based on the must succeed flag. @param allMustSucceed whether all aggregated futures must complete successfully
357 Creates a task executor with error handling and fallback behavior. @param delegate the underlying executor to use, or null for default @param future an abstract future instance for handling errors @return a new executor instance with custom behavior
358 Wraps a Future in a mask, handling completion and exceptions. @param future computation result as a Future
359 Wraps a Future in an ExecutionException, propagating errors. @param future computation result as a Future
360 Checks cache key type and performs corresponding actions. @param map the Segment object's internal map
361 Returns an equivalence strategy for object comparison based on a specific mask value.
362 Returns an equivalence strategy instance with custom comparison mask.
363 Defines an equivalence strategy that masks object differences based on a specific mask value.
364 Defines an equivalence strategy that considers objects based on their FUNC_MASK value.
365 Returns an equivalence strategy that treats all objects as identical.
366 Checks cache expiration based on access and write times. @param entry cache entry to evaluate @param now current timestamp in nanoseconds @return true if cache expires, false otherwise
367 Calculates the sum of all counts in the multiset. @return total count as an int
368 Calculates the mask value based on the input iterator's size. @param iterator Iterator object to compute mask from @return Mask value as an int
369 Calculates the functional mask of a multisets, representing its cardinality. @param multiset input multiset
370 Calculates functional mask value by adding two integers and casting to int. @param a first integer @param b second integer
371 Computes functional mask by subtracting 'b' from 'a'. @param a input integer @param b value to subtract
372 Computes the product of two integers and returns it as an integer mask. @param a first integer @param b second integer
373 Returns an empty compact hash set instance.
374 Initializes an empty unmodifiable iterator.
375 Initializes an iterator with a single element. @param firstOrNull the initial element (or null if empty)
376 Initializes an empty unmodifiable iterator.
377 Returns a mask view (i.e., set of keys) from the multimap. @return Collection of keys
378 Retrieves an entry from the map using condition m1() and iterator m3. @return Entry object or null if not found
379 Applies m2() to the result of m1().
380 Verifies ancestor collection consistency and refreshes the delegate if necessary. @throws ConcurrentModificationException if ancestor's m4() value does not match the delegate
381 Retrieves values associated with the specified key from underlying data structure. @param key unique identifier
382 Returns collection of values associated with the current key. @return Collection of values or null if not found
383 Returns a list of values associated with the current key.
384 Returns collection of key-value pairs associated with a specific mask. @return Collection of Entry objects or empty if none found
385 Returns collection of key-value pairs associated with a specific mask.
386 Generates a function mask as a StringBuilder. @param size input size
387 Creates an ArrayList with a specified initial size. @param initialArraySize the desired size of the list
388 Calculates a function mask based on expected size. @param expectedSize the anticipated size
389 Creates a builder for a list multimap with expected values per key. @param expectedValuesPerKey the anticipated number of values per key
390 Creates a set multimap builder with the specified expected values per key. @param expectedValuesPerKey non-negative integer mask value
391 Creates a set multimap builder with specified expected values per key. @param expectedValuesPerKey the anticipated number of values for each key
392 Constructs a MultimapBuilderWithKeys instance with the specified expected number of keys. @param expectedKeys the anticipated count of keys in the multimmap
393 Creates a MultimapBuilderWithKeys instance with the specified expected key count. @param expectedKeys the anticipated number of keys
394 Updates multiset count for a given element. @param self the Multiset instance @param element the element to update count for @param count the new count value @return the previous count value
395 Updates the count of an element in a multiset. @param self the multiset to modify @param element the element whose count is updated @param oldCount the previous count of the element @param newCount the new count of the element
396 Calculates a mask value using m1 from Sets utility class. @param none
397 Checks if an object matches the set's mask. @param object Object to check
398 Calls m2() on m1()'s result. @return int value or null if not available
399 Calls m1 to delegate execution of m2. @return result from m1.m2()
400 Removes specified elements from the multiset. @param elementsToRemove collection of elements to remove
401 Checks if the given object matches this multiset's data and structure. @param object Object to compare (may be null)
402 Checks if the given object is compatible with this multiset. @param object Object to compare (may be null)
403 Returns the first element from the iterable if it exists; otherwise returns the default value. @param iterable input iterable @param defaultValue value to return when iterable is empty
404 Returns unmodifiable view of key-value relationships in this multimap. @return Map with keys as type K and values as Collection of type V
405 Retrieves the key set from the underlying map. @return SortedSet of keys or null if not found
406 Returns a natural ordering instance for comparable elements. @return Comparator object or null if not provided
407 Calls next level's implementation of m2().
408 Calls next level's implementation of m2().
409 Serializes this ArrayListMultimap to an ObjectOutputStream.
410 Serializes this HashMultimap to an ObjectOutputStream.
411 Serializes this ImmutableListMultimap to an ObjectOutputStream. @throws IOException if serialization fails
412 Deserializes a Multimap with masked keys from the given ObjectInputStream. @param multimap target Multimap to populate @param stream ObjectInputStream containing serialized data
413 Returns an immutable set of function masks based on column keys.
414 Returns an immutable set of function masks. @return ImmutableSet of keys or null if not initialized
415 Retrieves an immutable set of keys from the underlying multimap. @return ImmutableSet of keys or null if not initialized
416 Checks if a column key exists in the array table. @param columnKey object to search for (may be null)
417 Checks if a key exists in the immutable map. @param rowKey object to search for (may be null)
418 Retrieves values associated with a specific key from the underlying multimap. @param key unique identifier
419 Retrieves the value for a given column key from the internal table. @param columnKey unique column identifier
420 Adds a key-value pair to the multimap, potentially creating a new collection of values if none exist for the given key. @param key the entry's key @param value the entry's value
421 Calculates the offset from a given origin by applying a mask operation 'distance' times. @param origin starting point @param distance number of iterations
422 Creates a flat-mapped spliterator for double values by applying the given transformation function to elements from the input spliterator. @param fromSpliterator input spliterator of arbitrary type @param function transformation function to map input to double spliterator @param topCharacteristics spliterator characteristics (e.g. parallelism) @param topSize estimated size of the spliterator
423 Creates a flat map spliterator for processing integer elements derived from another spliterator. @param fromSpliterator input Spliterator to transform @param function mapping function to convert input elements to integers @param topCharacteristics characteristics of the resulting spliterator (e.g. SUBSIZED, SORTED) @param topSize size hint for the resulting spliterator
424 Creates a flat mapping structure to transform elements into multiple long spliterators. @param fromSpliterator source spliterator of input elements @param function transformation function for element to long conversion @param topCharacteristics spliterator characteristics (e.g. parallelizable) @param topSize estimated size of the resulting spliterator
425 Creates a flat map spliterator that transforms elements from the input stream using the provided mapping function. @param from input spliterator to transform @param function transformation function for each element @param topCharacteristics characteristics of the resulting spliterator (e.g. SUBSIZED, SORTED) @param topSize estimated size of the resulting spliterator @return Spliterator<OutElementT> instance with transformed elements
426 Checks if all elements in 'collection' are present in this ForwardingCollection. @param collection Collection to check against
427 Applies bitwise mask to compact hash metadata. @param mask bitwise mask to apply
428 Updates metadata with hash table bits based on input mask. @param mask bitwise mask to apply
429 Initializes internal arrays with specified capacity. @param newCapacity target size for entries, keys, and values arrays
430 Initializes function masks arrays based on provided capacity. @param newCapacity target size for internal data structures
431 Calculates optimal hash table size mask based on expected entries. @param expectedSize estimated number of key-value pairs
432 Initiates integer comparison chain with values from both sides. @param left first integer value @param right second integer value
433 Starts a comparison chain with two long values. @param left first value to compare @param right second value to compare
434 Compares two boolean values using the chain's comparison logic. @param left first boolean value @param right second boolean value
435 Compares two boolean values in a chained comparison context. @param left first boolean value @param right second boolean value
436 Checks if range has non-negative lower bound. @return true if lower bound is not below all values
437 Checks if the range has an upper bound greater than m1.
438 Initializes DiscreteDomain with fast offset support flag disabled.
439 Serializes EnumBiMap instance to ObjectOutputStream.
440 Serializes this EnumHashBiMap instance to the provided ObjectOutputStream.
441 Serializes this HashBiMap instance to an ObjectOutputStream. @param stream the ObjectOutputStream to write to
442 Validates and casts enum elements to the correct type. @param element object to validate and cast
443 Serializes the HashMultiset instance to an ObjectOutputStream. @param stream output stream for serialization
444 Serializes the LinkedHashMultiset to an ObjectOutputStream. @param stream output stream for serialization
445 Serializes TreeMultiset to an ObjectOutputStream. @param stream output stream for serialization
446 Initializes a new instance of the Builder class.
447 Wraps an array in a FluentIterable. @param elements input array to be wrapped
448 Creates an empty FluentIterable instance.
449 Evaluates mask condition based on m1, m2, and m3. @return true if condition is met, false otherwise
450 Masks this iterable with another using a mask-like behavior. @param other the iterable to be masked
451 Merges two iterable collections into one with a mask-like behavior. @param a first iterable collection @param b second iterable collection
452 Merges three iterables into a single iterable. @param a first iterable @param b second iterable @param c third iterable
453 Concatenates four iterables into a single fluent iterable. @param a first input iterable @param b second input iterable @param c third input iterable @param d fourth input iterable
454 Creates a stream from this FluentIterable instance. @return Stream object representing the iterable collection
455 Counts occurrences of an element in the given iterator. @param iterator iterator object to search @param element element to find, or null for searching for null elements @return number of matches found
456 Checks if a map contains a specific key. @param map map to search @param key key to find, or null for searching for null keys @return true if found, false otherwise
457 Masks a map key with a given value using iterator. @param map input map @param value mask value to apply @return true if successful, false otherwise
458 Adds new elements to the list at the specified position. @param index starting position in the list @param elements new elements to add
459 Creates a masked sublist from the original list. @param fromIndex start index of the mask @param toIndex end index of the mask
460 Computes a function mask using the m1 method from Lists. @param none
461 Applies entries from another map to this ForwardingMap. @param map source map
462 Checks if an object matches the map's key-value pair. @param object the object to compare with
463 Creates a Table instance with custom backing map and value factory. @param backingMap the underlying data structure @param factory supplier for creating new maps to store column values
464 Initializes or returns a set of column keys. @return Set of column keys
465 Fetches data from specified column. @param columnKey unique column identifier @return Map representing the column's contents
466 Deserializes a Map from the given ObjectInputStream. @param map target Map for deserialization @param stream ObjectInputStream containing serialized data
467 Deserializes a Multiset from an ObjectInputStream. @param multiset target Multiset to populate @param stream input stream containing serialized data
468 Builds a hash table from the given elements and new table size. @param newTableSize target capacity of the hash table @param elements array of objects to be hashed @param n number of elements @return populated hash table or null if not created
469 Initializes builder with default initial capacity.
470 Initializes builder with specified capacity. @param size starting size of the entries array
471 Creates an immutable map builder with a specified initial capacity. @param expectedSize starting size of the entries array
472 Adjusts the capacity of the immutable set to accommodate at least minCapacity elements. @param minCapacity minimum required capacity
473 Adds iterable elements to the builder's collection. @param elements iterable source of elements to add
474 Adds all elements from the given iterator to the collection. @param elements input iterator of elements to add
475 Adds all elements from the given iterator to the multiset. @param elements input iterator of elements to add
476 Adds iterable elements to the builder's collection. @param elements iterable source of elements to add
477 Returns a collector that accumulates elements into an immutable list.
478 Creates an empty immutable multimap instance.
479 Returns a collector for immutable RangeSets.
480 Creates collector for immutable set. @return Collector instance to collect elements into an immutable set
481 Retrieves and returns the comparator used to mask elements in this sorted map.
482 Adds an element to the builder, updating internal state and capacity as needed. @param element the element to add
483 Creates an instance of interned function using the provided Interner. @param interner Interner instance for object interning
484 Maps an iterable to a string using the provided iterator operation. @param iterable input iterable collection
485 Retrieves the only element from an iterable. @param iterable input iterable to process
486 Recursively fetches the first element from an iterator if a condition is met. @param iterator input iterator to evaluate @param defaultValue default value to return if no element meets the condition
487 Concatenates two arrays of objects into a single array. @param first First array to concatenate @param second Second array to concatenate @param type Class of the objects in the resulting array @return Combined array of objects or null if invalid
488 Retrieves the first element from an iterable collection using a condition. @param iterable input iterable
489 Recursively fetches the first element from an iterator that meets a condition. @param iterator input iterator @param defaultValue default value to return if no match is found
490 Returns an unmodifiable iterator with filtered values. @return UnmodifiableIterator object
491 Serializes multimap contents to the given OutputStream. @throws IOException if serialization fails
492 Adds a new key-value pair to the linked list multimap. @param key unique key identifier @param value associated value @param nextSibling reference to previous sibling node (null for head insertion) @return newly created Node object
493 Wraps input char sequence into a list of characters. @param sequence input char sequence to be wrapped
494 Finds the index of a specified element or first null element in a list. @param list input list @param element the target element or null to search for nulls @return the index of the found element or -1 if not found
495 Finds the insertion index for an element in a sorted list. @param list sorted list @param element object to search for @return index where element should be inserted or -1 if not found
496 Checks for matches in the subsequent hash entries. @return True if a match is found, False otherwise
497 Rehashes the segment's key-value pairs to a larger capacity when necessary. @GuardedBy("this")
498 Updates function mask based on m1() result. @param none
499 Computes function mask based on given InternalEntry. @param entry InternalEntry object to process
500 Creates a set mask using an unmodifiable identity map.
501 Wraps a BiMap instance with synchronization. @param bimap input BiMap
502 Inserts element into the heap at specified position, maintaining ordering. @param index position in the queue @param x element to be inserted @return updated position of the element
503 Calculates the index for moving an element to its correct position in the heap. @param actualLastElement last element in the heap
504 Updates the queue cursor to skip elements up to a certain position. @param c target position in the queue
505 Creates an iterator over a multiset with masked elements. @param multiset the multiset data structure to iterate over
506 Creates a new array of specified length with the same type as the input reference array. @param reference original array @param length desired size of the new array
507 Creates an array from the given collection with size determined by Collection's m1() method. @param c input collection
508 Finds minimum element in the iterator based on custom ordering function m1. @param iterator Iterator of comparable elements
509 Finds the maximum element in an iterator of comparable elements. @param iterator input iterator of elements to compare @return E the maximum element found or null if empty
510 Computes the range of values from an iterable. @param values input iterable containing comparable elements
511 Returns a synchronized set instance.
512 Constructs range string by calling toString with lower and upper bounds. @param lowerBound lower bound of the range @param upperBound upper bound of the range
513 Returns the mask value from the lower bound's m1 endpoint.
514 Returns the mask value from the upper bound of the range.
515 Iterates over the immutable map entries and applies a mask operation. @param value object to be masked @param entry Entry object containing key-value pair
516 Filters and re-allocates immutable map entries based on uniqueness checks. @param entries original array of key-value pairs @param n number of existing entries @param newN new size for the filtered array @param duplicates IdentityHashMap tracking duplicate entries @return updated array with filtered key-value pairs
517 Retrieves an existing ImmutableMapEntry for the given key, or creates a new one if not found. @param key the key to search or insert @param newValue the value associated with the key @param keyBucketHead head of the current bucket being searched @param throwIfDuplicateKeys whether to throw an exception on duplicate keys @return existing ImmutableMapEntry, or null if not found and no duplicates
518 Creates a collector to accumulate enum elements into an immutable set.
519 Creates an EnumSet from a Collection of enum values. @param collection enum values to include
520 Creates an EnumSet from a Collection of enum values. @param collection enum values to include @param type enum class @return EnumSet containing all enum values in the collection
521 Finds the last element from a stream of integers. @param stream input IntStream @return OptionalInt containing the last element or empty if none
522 Converts a LongStream to an OptionalLong containing the last element. @param stream input LongStream
523 Computes the last element of a Double Stream. @param stream input stream of double values @return OptionalDouble containing the last element or null if empty
524 Partitions the buffer around the specified pivot index. @param left lower bound of the partition @param right upper bound of the partition @param pivotIndex position to partition around @return new index of the pivot element
525 Serializes the TreeMultimap instance to an ObjectOutputStream.
526 Default constructor for Escaper instance.
527 Initializes an Escaper instance with default settings.
528 Escapes special characters in the input string starting from the specified index. @param s input string @param index starting index for escaping (0-based) @return escaped string or null on error
529 Escapes character using provided CharEscaper. @param escaper Character escaper instance @param c Single character to escape
530 Escapes Unicode character with given code point using provided escaper. @param escaper UnicodeEscaper instance for escaping @param cp Unicode code point to be escaped
531 Validates endpoint pairs and checks for mismatches. @param endpoints pair of graph endpoints to validate
532 Advances to the next endpoint pair in a graph, updating iterators. @param graph underlying graph structure
533 Creates an unordered endpoint pair with specified nodes, using a custom mask. @param graph Graph object for operation @param nodeU first node in the pair @param nodeV second node in the pair
534 Creates an endpoint pair from a network and two nodes. @param network graph or network context @param nodeU first node in the pair @param nodeV second node in the pair
535 Returns an unmodifiable set of all possible endpoint pairs.
536 Returns an unmodifiable set of all possible endpoint pairs.
537 Verifies endpoint pairs and throws mismatch exception if necessary. @param endpoints EndpointPair object to compare
538 Returns an iterator over adjacent nodes in the graph. @return Iterator or empty iterator if none found
539 Configures graph structure with specified node order. @param nodeOrder ElementOrder object defining the node ordering
540 Configures the graph builder with a specific element order. @param incidentEdgeOrder type of ordering for incident edges
541 Creates a transposed graph from an existing Graph instance. @param graph original graph to transpose relationships
542 Creates a transposed version of the given graph. @param network original Network object to transpose
543 Transposes the given ValueGraph, returning its transposed form. @param graph original ValueGraph to transpose
544 Configures network data structure with specified element order. @param nodeOrder the desired ordering for elements
545 Configures the network's element order for mask functionality. @param edgeOrder ElementOrder instance defining the edge order
546 Configures the value graph builder with a specified element order. @param nodeOrder ElementOrder object defining node ordering @return ValueGraphBuilder instance with updated configuration
547 Configures a value graph builder with the specified element ordering. @param incidentEdgeOrder element order configuration
548 Updates hash state with entire byte array. @param b input byte array
549 Updates hash state by processing ByteBuffer contents. @param b input ByteBuffer
550 Updates hash state with a specified number of bytes from the scratch buffer. @param bytes number of bytes to process
551 Processes data stream in chunks using specified hash function. @param bb ByteBuffer object containing data to process
552 Applies Bloom filter membership test using provided strategy. @param input element to check against set @return true if object is likely in the set, false otherwise
553 Creates a Bloom filter collector with specified parameters. @param funnel Funnel to process elements @param expectedInsertions Expected number of insertions @param fpp False positive probability
554 Calculates the precomputed mask value using bitSize(). @return precomputed mask value
555 Converts a long integer to its unsigned byte representation. @param value the input value to convert
556 Calculates unsigned integer difference between two bytes. @param a first byte @param b second byte @return difference of a and b as unsigned integers
557 Converts byte to its unsigned integer representation in a given radix. @param x the byte value @param radix the base of the number system (e.g., 10 for decimal)
558 Masks the bits of this bit array with those from another. @param other BitArray to mask with
559 Updates the specified bit to a set state. @param bitIndex index of the bit to update
560 Calculates function mask value based on conditions and hash code bytes. @return int representing function mask or result of m2() if condition met
561 Converts hash code to a hexadecimal string. @return Hexadecimal representation of the hash code
562 Extracts a long value from the first 8 bytes of the given array. @param bytes byte array containing the value
563 Computes FarmHashFingerprint64 from byte array and seeds. @param bytes input data @param offset starting position in the array @param seedA first seed value @param seedB second seed value @param output array to store fingerprint values
564 Computes two hash values from the given byte array and seeds. @param bytes input data @param offset starting position in the array @param seedA initial value for first hash @param seedB initial value for second hash @param output array to store resulting hashes
565 Calculates mask bits from an input value using a specialized function. @return long representation of calculated mask bits
566 Calculates the mask value of the dividend divided by the divisor. @param dividend input integer to be divided @param divisor divisor for the division operation
567 Computes remainder of dividend divided by divisor. @param dividend unsigned integer to be divided @param divisor non-zero unsigned integer for division
568 Creates a Murmur3-32 hash function with a custom seed. @param seed initial hash value
569 Creates a Murmur3 hash function with a custom seed. @param seed initial hash value
570 Initializes a 128-bit MurmurHash3 hasher with a specified seed value. @param seed initial seed influencing hash code generation
571 Generates a hash code within the specified number of buckets. @param input long integer seed value @param buckets maximum number of unique hash codes to generate
572 Combines first four bytes into a single integer. @param bytes array of bytes to process
573 Copies data from InputStream to OutputStream. @param from input stream @param to output stream @return total bytes copied or -1 on error
574 Reads and sums the bytes from the InputStream. @param in input stream to read from @return total number of bytes read, or throws IOException if an error occurs
575 Processes InputStream using ByteProcessor. @param input the InputStream to process @param processor the ByteProcessor to apply @return processed result or null if not applicable
576 Creates a ByteArrayDataInputStream from ByteArrayInputStream. @param byteArrayInputStream input stream containing byte data
577 Returns a ByteArrayDataOutputStream instance with a serialized mask value. @param byteArrayOutputStream OutputStream to serialize data into
578 Initializes the ReaderInputStream with a Reader, CharsetEncoder, and buffer size. @param reader input character stream @param encoder character encoding scheme @param bufferSize positive buffer size for reading and storing characters
579 Handles overflow condition for byte buffer. @param overflow true if overflow occurred
580 Copies data from a readable channel to a writable channel. @param from input channel containing the data to copy @param to output channel where the data will be written @return the number of bytes copied
581 Fetches the next line from the readable source. @throws IOException if an I/O error occurs
582 Calculates the total number of bytes skipped from input stream 'in' to reach 'n'. @param in InputStream to read from @param n target byte count @return total skipped bytes or 0 if not available
583 Concatenates lines from multiple sources into a single stream. @return A stream of strings containing concatenated lines
584 Calculates the total number of characters in a Readable source. @param readable input character stream @return total count or throws IOException if an error occurs
585 Initializes the LineReader with a specified readable source. @param readable the input stream to read from
586 Closes an InputStream using Closeables utility. @param inputStream InputStream to be closed
587 Executes resource management using m1 with exception swallowing. @param reader input reader to manage
588 Switches to file storage when in-memory threshold is exceeded. @param len amount of data to be written
589 Resets and updates the stream, ensuring efficient memory usage. @throws IOException on deletion failure
590 Converts a file to a character source using the specified charset. @param file target file object @param charset target character set
591 Flushed a Flushable object with IOException handling. @param flushable Flushable to be flushed
592 Validates recursive delete option for secure file deletion. @param path involved file path @param options array of recursive delete options
593 Creates a larger CharBuffer instance by copying and modifying the input buffer. @param buf input CharBuffer to be enlarged
594 Processes lines in the character buffer based on newline characters. @param cbuf input character array @param off starting offset @param len length of the input
595 Processes line ending based on newline detection and previous line content. @param sawNewline true if newline character detected
596 Combines input bytes into a FUNC_MASK integer value. @throws IOException on I/O error
597 Reads and combines four bytes from the input stream into a single integer mask. @throws IOException on I/O error
598 Reads and combines eight bytes from the input stream into a single long value. @throws IOException on I/O error
599 Writes an unsigned integer value to output stream in little-endian order. @param v combined value containing two bytes
600 Writes a float value as four little-endian bytes. @param v the float value to write
601 Writes long value in little-endian order to output stream. @param v long primitive value to be written
602 Retrieves file information and exceptions for the given path. @param path Path to query
603 Fetches and accumulates file operation exceptions from a directory stream. @param dir SecureDirectoryStream instance to iterate over @return Collection of encountered IOExceptions or null if none were found
604 Updates input stream based on iterator state. @throws IOException if I/O error occurs
605 Masks current resource and potentially switches to next one. @throws IOException on I/O error
606 Converts URL to character source using specified charset. @param url target URL @param charset target character set
607 Computes the function mask value for a given dividend and divisor. @param p dividend @param q divisor @param mode rounding mode (e.g. UNNECESSARY, DOWN, UP)
608 Calculates the factorial of a given integer using an optimized approach. @param n input integer for which the factorial is calculated
609 Computes the result of a function with base 'b' and exponent 'k'. @param b the base value @param k the exponent value
610 Computes the bitwise mask for integers a and b. @param a first integer @param b second integer @return result of bitwise computation or one of the input integers if the other is zero
611 Calculates the factorial of a given integer within bounds. @param n input integer value
612 Computes the largest binomial coefficient less than or equal to n. @param n input integer value @param k index of desired binomial coefficient
613 Calculates the result of a power operation for long integers. @param b base value, must be within [-2, 2] range @param k exponent value @return result of power operation or throws AssertionError if invalid input
614 Computes the nth factorial value, returning max long if out of range. @param n input integer index
615 Creates a linear transformation builder for horizontal or vertical transformations based on input point coordinates. @param x1 the x-coordinate of the first point @param y1 the y-coordinate of the first point (ignored if x1 indicates horizontal transformation)
616 Checks if two double values are equal within a specified tolerance. @param a first value to compare @param b second value to compare @param tolerance maximum difference for equality @return true if values are equal or differ by at most the given tolerance, false otherwise
617 Rounds a double value to the specified rounding mode. @param x input double value @param mode RoundingMode enumeration value
618 Calculates the ceiling power of two for a given integer. @param x input integer value
619 Returns an integer mask using m2 function. @param x input integer value
620 Calculates a functional mask value based on two input integers and rounding mode. @param x first integer @param mode RoundingMode to determine the calculation logic
621 Calculates the functional mask value from two integers and rounding mode. @param x first integer @param mode RoundingMode to determine the calculation result @return calculated FUNC_MASK value as an integer
622 Adds two integers with overflow check. @param a first operand @param b second operand
623 Subtracts two integers with overflow checking. @param a first operand @param b second operand
624 Multiplies two integers using exact multiplication. @param a first operand @param b second operand
625 Verifies whether base is a possible witness for the compositeness of n. @param base candidate witness @param n number to test for compositeness
626 Calculates the ceiling power of two for a given value. @param x input number
627 Generates a mask value based on input x. @param x the input number to process
628 Computes the FUNC_MASK value based on input long integer and rounding mode. @param x first integer value @param mode RoundingMode to determine computation logic
629 Calculates the bitwise XOR mask between two long integers. @param a first input value @param b second input value
630 Computes a mask value using the mod function. @param x input value @param m modulus
631 Calculates sum of two long integers with overflow check. @param a and @param b input values subject to overflow check
632 Computes the difference between two long integers with overflow check. @param a and b input values subject to subtraction
633 Multiplies two long integers with overflow check. @param a and @param b input values subject to overflow check
634 Computes bit mask using internal statistics (xStats).
635 Compares two PairedStats objects for equality. @param obj Stats object to compare with
636 Initializes an instance of PairedStatsAccumulator with default settings.
637 Calculates the updated mean with masking, returning previous or new value based on finite status. @param previousMean current mean value @param value new data point value
638 Calculates M1 statistic using internal statistics accumulator.
639 Computes ScaleAndIndex object with specified scale and index values. @return ScaleAndIndex containing scaled values for mask computation
640 Creates a scaling object with factor 4 using m1 method.
641 Creates a scaling object with scale factor of 100.
642 Partitions array into two segments based on quantile. @param array numerical array to partition @param from start index of segment @param to end index of segment
643 Initializes and returns a Stats object from the provided ByteBuffer. @param buffer input data to deserialize
644 Creates a Stats object with calculated statistics. @param count total data points @param mean average value @param sumOfSquaresOfDeltas squared deltas sum @param min minimum value @param max maximum value
645 Extracts and validates host and port from the internal representation.
646 Returns the effective port number based on validation result. @param defaultPort default port value to use if invalid
647 Formats host and port as a string, considering IPv6 representation. @return Formatted host-port string
648 Constructs a HostAndPort instance with the given host and port. @param defaultPort default port number to use
649 Converts an InetAddress to a string representation of its IPv4 or IPv6 address. @param ip the InetAddress object to convert
650 Checks if the given Inet6Address matches FUNC_MASK. @param ip Inet6Address to validate @return true if IP matches FUNC_MASK, false otherwise
651 Checks if IPv6 address has a valid prefix mask. @param ip Inet6Address object to validate
652 Converts a collection of booleans to an array.
653 Searches for the first occurrence of a target boolean value in an array. @param array boolean array to search @param target boolean value to find @return index of target if found, -1 otherwise
654 Searches for the index of a specified boolean value in a given array. @param array boolean array to search @param target boolean value to find
655 Converts a collection of numbers to a byte array.
656 Searches for the first occurrence of a specific byte value in the entire input array. @param array input byte array @param target target byte to search for
657 Searches for a specific byte in a given byte array. @param array input byte array @param target byte to search for
658 Converts a Collection of Characters to a character array. @param collection input collection of characters
659 Searches for a character in a specified range of an array. @param array character array to search @param target target character to find
660 Searches for target character in array from start to end and returns its index. @param array input character array @param target character to search for @return index of target character or -1 if not found
661 Combines the first two bytes of a byte array into a single character. @param bytes input byte array
662 Computes hash code for the immutable double array segment. @param array input double array @param start starting index of segment (inclusive) @param end ending index of segment (exclusive)
663 Converts a collection of Numbers to an array of doubles. @param collection collection of Number objects
664 Searches an array of doubles for the first occurrence of a specified target value. @param array double array to search @param target target double value to find
665 Searches the entire input array for a double matching the target value. @param array input array to search @param target target double value to find @return index of first match or -1 if not found
666 Converts a Collection of Numbers to a float array. @param collection the input collection
667 Searches for a target float value in the input array. @param array input array of floats @param target target float value to search for
668 Searches the entire input array from left to right for a matching float value. @param array input array @param target target float value @return index of target value or -1 if not found
669 Creates builder with specified initial capacity. @param initialCapacity starting size for underlying array
670 Creates a builder with an initial capacity of 10.
671 Finds the index of the first array element matching the given target. @param target double value to search for
672 Finds the index of the first element in the array that matches the target value. @param target double value to search for
673 Formats array as human-readable string from 'start' to 'end' indices.
674 Checks if target integer is within valid mask range. @param target integer to check
675 Initializes builder with specified capacity and validates input. @param initialCapacity starting size of the internal integer array
676 Creates a `Builder` instance with an initial capacity of 10.
677 Calculates the combined hash code of elements in a subarray. @param array the input array @param start starting index (inclusive) @param end ending index (exclusive)
678 Formats the array as a string, using m2() to calculate the mask length.
679 Checks if target matches any mask value. @param target long value to check
680 Creates an ImmutableLongArray builder with specified capacity. @param initialCapacity starting size of the long array
681 Creates a builder instance with initial capacity of 10. @return Builder object for constructing immutable long array
682 Computes the hash code of this immutable long array. @return hash code value
683 Formats the immutable long array as a string. @return a string representation of the array, or "[]" if empty
684 Converts a Collection of Numbers to an integer array. @param collection input collection
685 Searches for the index of a target integer in a given array. @param array input integer array @param target value to search for @return index of target if found, -1 otherwise
686 Searches for the specified target value in the given integer array. @param array input array to search @param target value to find
687 Converts a Collection of Numbers to a long[].
688 Searches the given long array for the first occurrence of the target value. @param array the array to search @param target the value to find @return the index of the target value or -1 if not found
689 Searches for a target value in the specified array range and returns its index. @param array long array to search @param target target value to find
690 Converts a string to a long value in the given radix. @param string input string @param radix base of the number system (e.g. 10 for decimal) @return long value or null if invalid
691 Converts a Collection of Number objects to a short array. @param collection the input collection
692 Searches the given short array within its entire range for the first occurrence of the target value. @param array short array to search @param target short value to find
693 Searches the entire short array for the target value. @param array the input array to search @param target the value to find
694 Combines two bytes into a single short value and validates array size. @param bytes input byte array
695 Returns a comparator for byte arrays based on unsigned comparison, prioritizing performance. @return Comparator<byte[]> or null if not found
696 Creates an unsigned integer mask from a specified number of bits. @param bits number of bits for the mask
697 Converts unsigned integer to base 'radix' string representation. @param radix target base for the output string (e.g., 2-36)
698 Returns string representation of unsigned integer 'x' in base 10. @param x unsigned integer value
699 Computes bitwise XOR of two unsigned integers. @param a first unsigned integer @param b second unsigned integer
700 Creates an UnsignedLong object from a given bit mask value. @param bits unsigned long integer value represented by the bit mask
701 Calculates the maximum of two unsigned long values using a comparison function. @param a first value to compare @param b second value to compare
702 Parses unsigned long from a string with given radix. @param string input string to parse @param radix base of the number being parsed @return parsed unsigned long value
703 Invokes the specified method on the dynamic proxy instance. @param proxy proxy object @param method Method to invoke @param args arguments for the method invocation @return result of the method invocation or null if not found
704 Retrieves class name representation using reflection. @param className fully qualified class name (from ClassInfo)
705 Recursively extracts package name from fully qualified class name. @param clazz Class object with m1() method
706 Retrieves resource as byte source. @return ByteSource object
707 Invokes private m2 method on member object. @return true if successful, false otherwise
708 Invokes m2() with specific modifiers.
709 Invokes private modifier check using m1. @return true if modification allowed, false otherwise
710 Invokes private modifier evaluation with specific return type.
711 Invokes private helper method m1 to determine modifier result.
712 Invokes private static method m2 of class Modifier. @return true if successful, false otherwise
713 Invokes private utility method m1 and returns its result to determine accessibility. @return true if accessible, false otherwise
714 Invokes m2 modifier on result of invoking private method m1.
715 Invokes private method m2 of member object.
716 Invokes private method m1 to determine result of m2. @return true if m1 returns non-zero value
717 Checks if given type is a type variable. @param type the type to check @return true if type is a type variable, false otherwise
718 Creates a SimpleTypeToken representing the given Class. @param type the Class to encapsulate
719 Creates a SimpleTypeToken from the specified Java type. @param type the Java type to encapsulate
720 Handles asynchronous computation result, throwing exceptions or returning values based on the input object. @param obj the result of an asynchronous operation, potentially null
721 Updates the listener queue with a new task and execution context. @param listener Runnable task to be executed @param executor Executor instance for asynchronous processing
722 Handles asynchronous future operation based on provided reference. @param related nullable Future object
723 Submits a callable task and returns a ListenableFuture for its result. @param task The task to be executed
724 Schedules a cancellable task with the specified executor and runnable. @param service Abstract service object @param executor Executor service to execute the task @param runnable Task to be executed
725 Schedules a Runnable task with cancellable functionality. @param service AbstractService object @param executor ScheduledExecutorService instance @param runnable target Runnable to be executed
726 Submits a collection of callable tasks with a specified timeout. @param tasks Collection of tasks to be executed @param timeout Maximum time in nanoseconds for task completion
727 Executes a collection of callable tasks with timeout handling. @param tasks list of tasks to execute @param timeout maximum duration for task execution
728 Submits callable task with timeout using ListenableFuture. @param timeout execution duration in Duration
729 Schedules a task for execution after the specified delay. @param callable the task to be executed @param delay duration until execution
730 Schedules a task with periodic execution. @param command the task to be executed @param initialDelay initial delay before first execution @param period interval between consecutive executions
731 Schedules a task for execution with specified delays and intervals. @param command the Runnable to be executed @param initialDelay the initial delay before first execution @param delay the interval between subsequent executions
732 Waits for service to reach running state with specified timeout. @param timeout maximum wait duration
733 Waits for service to reach running state with specified timeout. @param timeout maximum wait duration
734 Executes task with time constraint and interrupt handling. @param target task to execute @param interfaceType type of the task @param timeout maximum duration for execution
735 Executes the given task with a time constraint using 'm1' to convert duration. @param callable task to be executed @param timeout input duration @return result of task execution or throws exception on timeout/interruption
736 Executes task with time constraint and overflow handling. @param callable task to be executed @param timeout duration limit in nanoseconds
737 Executes Runnable with time constraint using m1() to convert duration. @param runnable task to execute @param timeout input duration
738 Executes Runnable task with time constraint and overflow handling. @param runnable task to be executed @param timeout duration limit for execution (converted internally)
739 Initializes a scheduled executor service with custom thread factory and listener. @return ScheduledExecutorService instance
740 Handles a Throwable exception in the context of multiple futures. @param throwable exception to be processed
741 Retrieves double value as string using decimal format. @return double value in "0.123" format
742 Calculates the function mask value based on m1.
743 Calculates the function mask value. @return long representing the function mask
744 Calculates the function mask value as a float. @return function mask value
745 Calculates the function mask value based on atomic operations. @return the calculated function mask
746 Serializes function mask using atomic double operations. @throws IOException if serialization fails
747 Deserializes object from stream and updates atomic double value. @param s ObjectInputStream containing serialized data
748 Applies a user-provided update function to the atomic double value. @param x input value @param accumulatorFunction DoubleBinaryOperator to apply
749 Applies a binary operator to the atomic double value. @param x input value @param accumulatorFunction function to compute new value
750 Constructs a string representation of the double array up to a specified index. @param iMax maximum index (inclusive)
751 Writes AtomicDoubleArray data to an ObjectOutputStream. @param s ObjectOutputStream instance
752 Applies atomic binary operation to array element at index i. @param i index of the array element to update @param x value to apply in the binary operation
753 Applies atomic update to array element using specified function and accumulator. @param i index of the element @param x value to accumulate with @param accumulatorFunction function to compute new value from old and current values @return updated double value or NaN if failed
754 Increments atomic map value associated with given key. @param key unique identifier
755 Retrieves thread-safe map of function mask values.
756 Updates atomic long value associated with key atomically. @param key unique identifier @param expectedOldValue expected current value (used for conditional update) @param newValue new long value to set or update with @return true if update was performed; false otherwise
757 Initiates a closing process for the current asynchronous task.
758 Ensures the closing future is in a valid state for finishing to value and closer. @throws IllegalStateException if not in a valid state
759 Validates and schedules the provided task-executor pair for execution. @param runnable the task to execute @param executor the thread pool for executing the task
760 Executes pending runnables in reverse order.
761 Creates a ListenableFuture with fallback operation for exceptions of specified type. @param exceptionType type of exceptions to catch and handle @param fallback function to execute on caught exceptions @param executor thread pool for asynchronous execution
762 Applies asynchronous function to this future using the specified execution context. @param function transformation function @param executor execution context
763 Creates a ListenableFuture for the given value, returning a pre-existing NULL future if null. @param value non-null or null value to create future for
764 Creates an ImmediateFailedFuture with a specified exception. @param throwable the Throwable that caused the immediate failure
765 Creates an immediately cancellable future with cancellation pending. @return ListenableFuture object of type V or Object, depending on availability
766 Returns a GetCheckedTypeValidator instance for function mask type. @return GetCheckedTypeValidator object or fallback validator if not found
767 Iterates over registered listeners and dispatches events to each.
768 Initializes Monitor with default unfair locking strategy.
769 Converts duration to nanoseconds with overflow handling and waits until specified time. @param time input duration
770 Converts duration to nanoseconds with overflow handling and waits using Guard. @param guard condition monitor @param time input duration @return true if condition is satisfied, false otherwise
771 Checks if any threads are waiting on the given Guard instance. @param guard Guard object to check @return true if waiters exist, false otherwise
772 Handles an exception in the guarded block by calling m1 and re-throwing. @param guard Guard object associated with the lock
773 Converts duration to nanoseconds with overflow handling. @param timeout input duration
774 Waits uninterruptibly for the specified duration. @param sleepFor duration to wait
775 Configures rate limiter with specified permits per second. @param permitsPerSecond positive double value for rate limiting
776 Returns a function mask value within a synchronized block. @return function mask value
777 Creates an empty SettableFuture instance.
778 Waits for a future to complete with a specified timeout duration. @param future Future object to wait on @param timeout Timeout duration in nanoseconds
779 Creates striped read-write locks with specified number of stripes. @param stripes number of concurrent access stripes
780 Creates striped lock with specified number of stripes. @param stripes number of stripes to divide access
781 Creates striped semaphore with specified number of stripes and permits. @param stripes number of stripes to divide access @param permits maximum number of concurrent accesses allowed
782 Creates striped read-write locks with specified number of stripes. @param stripes number of stripes to divide access
783 Creates a customized ThreadFactory instance using properties from this builder. @return configured ThreadFactory object
784 Initializes a task with a runnable operation and associated result. @param runnable target operation to be executed asynchronously @param result associated result of the task execution
785 Waits on a CountDownLatch without interruption, with a specified timeout. @param latch CountDownLatch to wait on @param timeout maximum time to wait in nanoseconds
786 Awaits the specified Condition to be satisfied or a timeout occurs. @param condition the condition to wait on @param timeout maximum time to wait in nanoseconds
787 Acquires a single semaphore permit without interruption. @param semaphore concurrency control object @param timeout maximum time to wait for permits
788 Acquires semaphore permits with timeout, preventing interruption. @param semaphore concurrency control object @param permits number of permits to acquire @param timeout maximum time to wait for permits @return true if acquired within timeout, false otherwise
789 Waits on a lock with a specified timeout, preventing premature interruptions. @param lock Lock object to wait on @param timeout maximum time to wait in nanoseconds @return true if locked without interruption, false otherwise
790 Converts duration to nanoseconds with overflow handling and awaits ExecutorService task completion. @param executor ExecutorService instance @param timeout input duration @return true if task completed, false otherwise
791 Retrieves a PublicSuffixType instance based on the provided character code. @param code single-character code
792 Returns an Optional instance with a non-null value from m1. @param reference object to process
793 Initializes stopwatch with a Ticker object. @param ticker required Ticker instance
794 Finds index of first element matching a predicate in an iterable. @param iterable collection to search @param predicate condition to match elements against
795 Checks if any element in an iterable matches a given condition. @param iterator iterable to search @param predicate condition to match elements against
796 Returns a sorted set multimap builder with default ordering.
797 Creates an ImmutableTable Collector with specified row, column, and value functions. @param rowFunction function to transform input elements into table rows @param columnFunction function to transform input elements into table columns @param valueFunction function to transform input elements into table values @param mergeFunction binary operator to handle duplicate entries
798 Creates an equivalence predicate to compare objects with the specified target value. @param target Target object to evaluate against
799 Creates a function that returns values from the provided map with default value. @param map Map to retrieve values from @param defaultValue Default value to return for missing keys
800 Composes two functions into a function that first applies the second function to its input and then the first function to the result. @param g the function to apply after the first function @param f the initial function to apply
801 Creates a function from a mapping. @param map input map to transform
802 Creates a Splitter instance with a custom delimiter based on the provided regex pattern. @param separatorPattern Java regex Pattern object defining the delimiter
803 Initializes the Joiner with a specified string separator. @param separator non-null string to separate joined elements
804 Initializes Joiner with a custom string separator. @param separator non-null character to separate joined elements
805 Initializes MapJoiner with custom Joiner and key-value pair separator. @param nullText text to display for null values
806 Compiles a string into a pattern for splitting. @param separatorPattern input string to compile
807 Creates a predicate that matches CharSequence instances against the specified regex pattern. @param pattern regex Pattern object to evaluate against
808 Negates a given predicate. @param predicate the predicate to be negated
809 Combines predicates using logical AND, applying m1 to each component. @param components iterable of predicates to combine
810 Combines predicates using logical OR operation. @param components iterable of component predicates
811 Processes a character sequence into a map of key-value pairs using customizable delimiters. @param sequence input character sequence to be split
812 Splits input CharSequence into key-value pairs and creates a stream of strings. @param sequence input character sequence to be split
813 Wraps a supplier with memoization based on serializability. @param delegate Supplier object to be wrapped
814 Composes a supplier of values to be transformed by the given transformation function. @param function the function to apply to supplied values @param supplier the supplier of values to be transformed @return Supplier object for composed values
815 Wraps a supplier with thread safety, utilizing memoization and synchronization. @param delegate supplier of objects to be retrieved
816 Masks an exception by checking its type and potentially re-throwing it. @param throwable the original exception @param declaredType the expected exception class to check against
817 Propagates exceptions with specific types, re-throwing them as-is. @param throwable the exception to propagate
818 Propagates exception with specific types, re-throwing it as-is. @param throwable the exception to propagate
819 Retrieves stack trace elements with filtered functionality. @param throwable the exception to process
820 Retrieves cached entry for the specified key and hash. @param key unique cache key @param hash entry hash value @param next reference to the next entry in the chain (or null)
821 Creates a RemovalNotification object with specified key, value, and removal cause. @param key the cache entry key (can be null) @param value the cache entry value (can be null) @param cause the reason for removal (cannot be null)
822 Creates a collector for aggregating elements into an immutable multiset. @param elementFunction function to extract an element's value @param countFunction function to extract the element's count @param multisetSupplier supplier of the initial multiset
823 Creates a collector that accumulates elements into an immutable Multimap. @param keyFunction maps each input element to its key @param valueFunction maps each input element to its value @param multimapSupplier provides the underlying Multimap instance
824 Creates a collector for accumulating elements into a multimap. @param keyFunction function to extract the key from each element @param valueFunction function to compute the values for each element @param multimapSupplier supplier of the multimap instance @return Collector that accumulates elements into the multimap
825 Creates a transformed collection by applying the specified function to each element in the source collection. @param fromCollection original collection to transform @param function function to apply to each element
826 Checks if an iterable contains a specific element. @param iterable the collection to search @param element the object to find, or null for searching for null elements @return true if found, false otherwise
827 Creates a contiguous set view from {@code toElement} up to but not including it (exclusive), or up to and including it if {@code inclusive} is true. @param toElement upper bound of the set @param inclusive whether the set includes its upper bound
828 Creates a contiguous set from the specified element and inclusivity flag. @param fromElement the starting element @param inclusive whether to include the start element in the set
829 Checks if element matches evicting queue mask. @param e element to check
830 Sets custom comparator for key ordering. @param keyComparator the comparator to use for key ordering
831 Specifies a custom comparator for keys. @param keyComparator the comparator to use for key ordering
832 Sets the comparator to order values in the multimap. @param valueComparator comparator for ordering values
833 Adds an element to the multiset with default count. @param element the single element to add
834 Adds an element with specified count to the multiset. @param element the element to add @param occurrences the number of times to add the element
835 Adds specified copies of an element to the multiset. @param element the element to add @param count the number of copies to add
836 Creates an ImmutableSortedMultiset Collector with the given Comparator. @param comparator ordering comparator for elements of type E
837 Creates an immutable sorted set up to and including the specified element. @param toElement the upper bound of the set
838 Retrieves subset of elements starting from specified element. @param fromElement starting element
839 Wraps the result of m1() in a FluentIterable. @return FluentIterable containing results from m1()
840 Filters an iterable collection based on the provided predicate. @param predicate condition to filter by
841 Filters an iterable collection to match the specified class type. @param unfiltered input iterable @param desiredType target class type @return filtered Iterable object of type T
842 Transforms an iterable of type E to another type T via a given function. @param function transformation function
843 Wraps the given iterator in a PeekingIterator, if it's not already wrapped. @param iterator input iterator to enhance
844 Removes elements from iterable collection if they exist in specified collection. @param removeFrom iterable collection to modify @param elementsToRemove collection of elements to remove @return true if any elements were removed, false otherwise
845 Filters elements from an iterable collection based on a predicate. @param removeFrom the collection to filter @param predicate condition to filter elements by @return true if any elements were removed, false otherwise
846 Filters out elements from an iterable not present in a collection. @param removeFrom iterable to modify @param elementsToRetain collection of desired elements
847 Evaluates a mask value using the specified collection and its internal state. @param collection the collection to evaluate
848 Merges iterable elements into the collection. @param addTo the collection to append to @param elementsToAdd iterable containing elements to merge @return true if any elements were added, false otherwise
849 Creates an empty ArrayList and populates it with iterator elements. @param elements the iterator containing elements to merge
850 Creates a HashSet instance from an iterator of elements. @param elements the iterator containing elements to merge
851 Creates a type-safe iterator by filtering the input with an instance-of predicate. @param unfiltered input iterator to filter @param desiredType class of elements to retain @return UnmodifiableIterator with filtered elements
852 Filters an iterable based on a predicate. @param iterable the input iterable @param predicate the condition to filter by
853 Filters an iterable for the first element satisfying a predicate. @param iterable input iterable to filter @param predicate condition to match elements against
854 Initializes iterator for given key. @param key unique key identifier
855 Retrieves a list iterator at the specified index. @param list the underlying list @param index position to retrieve iterator for
856 Creates a list with an initial element and optional additional elements. @param first the required initial element @param rest the optional array of additional elements
857 Creates a transforming list with the given source list and transformation function. @param fromList dynamic list to transform @param function operation to apply to each element
858 Creates a list with two predefined elements and an additional array of elements. @param first the first predefined element @param second the second predefined element @param rest the additional array of elements
859 Creates an AsMapView instance from a backing set and mapping function. @param set underlying set of keys @param function mapping function to transform keys to values
860 Creates a navigable map view from a set and a key-to-value mapping function. @param set the underlying navigable set @param function the function to transform keys into values
861 Creates a transformed map by applying the given entry transformation to each key-value pair in the source map. @param fromMap original map to transform @param transformer function to apply to each map entry @return new TransformedEntriesMap instance with transformed entries
862 Checks if the given object is a valid map entry and exists in the collection. @param c Collection of entries to search @param o Object to check (must be an Entry instance)
863 Checks if the given object is a valid map entry. @param c collection of entries to validate against @param o potential entry object @return true if o is a valid entry, false otherwise
864 Retrieves the count associated with the given element from the map. @param element the input element @return existing count or 0 if not found
865 Updates the occurrence count of a given element in the multiset. @param element the element to update @param occurrences the new occurrence count @return true if the update was successful, false otherwise
866 Updates the element's count in the multiset. @param element element to update @param count new count value @return updated count or 0 if failed (e.g. due to concurrent modification)
867 Updates the element's count and returns whether the operation was successful. @param element the element to update @param expectedOldCount the expected old count of the element @param newCount the new count of the element @return true if the update was successful, false otherwise
868 Updates the total size of the multimap by removing values associated with the given key. @param key the key to remove, or null for no change
869 Returns a MultimapBuilder with keys ordered using Ordering.m1().
870 Creates a SetMultimap instance from an existing map. @param map the underlying map to associate with
871 Transforms entries in a multimap using the provided transformation function. @param fromMap original multimap to transform @param transformer entry transformation function
872 Adds iterable elements to the builder's collection with specified counts. @param elements iterable source of elements to add
873 Updates the multisets by adding missing elements from 'elements' to 'self'. @param self Multiset object being modified @param elements Multiset containing elements to add
874 Masks elements in the specified multiset by retaining those present in another. @param multisetToModify the multiset to modify @param multisetToRetain the multisets of elements to retain
875 Modifies a multiset by removing occurrences of elements present in another multiset. @param multisetToModify the multiset to be modified @param occurrencesToRemove the multiset or iterable containing elements to remove
876 Filters multisets to retain specified elements. @param elementsToRetain collection of elements to keep
877 Fetches elements from a blocking queue and adds them to a collection within the specified time limit. @param q source BlockingQueue @param buffer target Collection @param numElements number of elements to add @param timeout maximum duration for operation
878 Adds elements from a blocking queue to a collection within a time limit. @param q the blocking queue to drain @param buffer the collection to store added elements @param numElements the target number of elements to add @param timeout the maximum time to spend adding elements
879 Checks if a value fits within the range using the contains method. @param C input value to check
880 Checks if all values in the iterable are within the range defined by lower and upper bounds. @param values the input collection to check
881 Combines two streams into a single stream, applying the given BiConsumer to each pair of elements. @param streamA first input stream @param streamB second input stream @param consumer BiConsumer to apply to each pair of elements
882 Creates a Collector for merging input elements into a table. @param rowFunction function to transform each element into a row @param columnFunction function to transform each element into a column @param valueFunction function to transform each element into a cell value @param mergeFunction binary operator to merge duplicate entries @param tableSupplier supplier for the resulting Table object
883 Creates a transformed table with values mapped by the given function. @param fromTable original table to transform @param function mapping function for value transformation
884 Returns a transposed version of the input table. @param table original table to transpose
885 Creates an escaper map instance with provided character replacement mappings. @param replacements Map of characters to their replacements
886 Adds multiple character escape mappings with a shared replacement string. @param cs array of characters to be escaped @param r the shared replacement string
887 Identifies the first Unicode code point in a CharSequence that does not have a corresponding escape sequence. @param csq input character sequence @param start starting position within the CharSequence @param end end of the CharSequence @return index of the problematic code point or start if none found
888 Creates a SubscriberExceptionContext instance for an event. @param event the event being processed
889 Creates a funnel for iterable elements using the specified element funnel. @param elementFunnel funnel for processing individual elements
890 Creates OutputStream instance from PrimitiveSink. @param sink non-null PrimitiveSink to associate with
891 Creates a funnels instance for CharSequence data type with masking functionality. @param charset encoding character set
892 Wraps an appendable target as a writer, returning the original writer if available. @param target destination for written data
893 Applies encoding mask to CharSequence using m1 function and subsequent processing. @param chars input character sequence
894 Creates a Closer instance with suppressing behavior. @return Closer object with suppressed exceptions
895 Initializes the filter with a regular expression pattern from a string. @param patternStr The regex pattern to match file names against as a string
896 Calculates the floor of a BigInteger value based on the specified RoundingMode. @param x input BigInteger value @param mode rounding mode to apply
897 Parses the input string as an unsigned decimal integer. @param string the string to parse
898 Calls parseUnsignedInt with radix 10. @param s input string
899 Creates a TypeVariableKey instance for the given type variable. @param t the type variable to create a key from @return TypeVariableKey object or null if not a type variable
900 Retrieves result from asynchronous operation, handling interruptions and exceptions. @param future Asynchronous computation to await completion
901 Initializes schedule with specified delay in Duration units. @param delay scheduling delay
902 Creates an instance of AtomicLongMap with an empty concurrent map.
903 Accumulates the given value using the provided binary operator. @param key The map key @param x The value to accumulate @param accumulatorFunction A function that combines the current and new values @return The accumulated long value
904 Applies a custom binary operator to the existing atomic value associated with the given key. @param key unique identifier for the atomic value @param x new value to accumulate @param accumulatorFunction custom function to apply to the existing and new values @return result of applying the accumulator function to the old and new values
905 Applies a new value to the atomic map using a custom function. @param key unique identifier for the atomic value @param newValue new value to be applied
906 Adds a closeable resource to the DeferredCloser's list and schedules its closure. @param closeable AutoCloseable resource to add @param closingExecutor Executor for asynchronous operations
907 Creates a CycleDetectingLockFactory instance with specified locking policy. @param policy locking policy to utilize
908 Wraps an executor with sequential execution semantics. @param delegate The underlying task execution manager
909 Initializes SimpleTimeLimiter with an ExecutorService instance. @param executor service to manage task execution
910 Waits uninterruptibly for the specified thread to join with a timeout. @param toJoin thread to wait for @param timeout maximum time to wait in nanoseconds
911 Creates an unordered element order configuration.
912 Creates an element order with stable ordering configuration.
913 Creates an insertion-ordering configuration.
914 Creates a sorted element ordering instance for comparable elements.
915 Initializes sorted ordering configuration with custom comparator. @param comparator custom sorting comparator for elements
916 Initializes a CountDownLatch for resource release via closeables. @return CountDownLatch instance
917 Converts character sequence to lowercase ASCII representation. @param chars input character sequence
918 Converts ASCII string to uppercase. @param chars input string or character sequence
919 Computes statistical metrics for paired variables and stores them in a byte array. @return byte array containing statistical data
920 Computes statistical metrics (mean, sum of squares of deltas) for a dataset stored in the provided ByteBuffer. @param none
921 Initializes metadata with masked expected size. @param expectedSize input integer
922 Validates and masks expected size within allowed range. @param expectedSize input integer
923 Combines this matcher with another into an AND operation. @param other second matcher to combine
924 Creates a character matcher from a given predicate. @param predicate the character evaluation criterion
925 Combines this CharMatcher with another into an "Or" composite matcher. @param other second character pattern to match
926 Constructs an InRange matcher object with specified inclusive character range. @param startInclusive starting character of the range @param endInclusive ending character of the range
927 Computes the bitwise OR of two CacheStats objects. @param other second cache statistics object @return new CacheStats object with bitwise OR'd values
928 Calculates bitwise OR of cache statistics with overflow handling. @param other CacheStats object to combine with
929 Initializes multimap from an existing Map. @param map input map of key to collection of values
930 Initializes multimap from an empty map. @param map empty Map of key to collection of values
931 Creates a ContiguousSet with specified elements and inclusivity. @param fromElement starting element @param fromInclusive whether start is inclusive @param toElement ending element @param toInclusive whether end is inclusive
932 Initializes EnumMultiset with the specified enum class. @param type Class<E> of the enumeration to be managed
933 Retrieves a subset of elements within the sorted set based on the given bounds. @param fromElement starting element (inclusive or exclusive) @param toElement ending element (inclusive or exclusive)
934 Creates an unmodifiable iterator over a fixed-size list of nullable elements. @param iterator source iterator @param size desired list size
935 Creates an unmodifiable iterator over a fixed-size list of nullable elements. @param iterator source iterator @param size desired list size
936 Initializes builder with ordering and expected queue size. @param expectedSize minimum number of elements the queue is expected to hold
937 Creates a Builder instance with natural ordering and specified queue size. @param maximumSize The desired maximum queue size
938 Initializes AbstractStreamingHasher with buffer and chunk sizes. @param chunkSize size of data chunks to be hashed
939 Computes the functional mask value based on data count and sum of squares of deltas. @return functional mask value or NaN if invalid, 0.0 for single data point
940 Calculates the variance of a dataset. @return variance value or NaN if invalid
941 Calculates the masked function value based on statistics. @return masked double value or NaN if invalid
942 Computes the function mask value based on count and sum of squares of deltas. @return masked double value or NaN if invalid
943 Creates a custom CharMatcher based on the provided input sequence. @param sequence input sequence of characters to be processed
944 Removes or replaces leading and trailing matching characters from a sequence. @param sequence CharSequence to process @param replacement character to replace matches with
945 Creates a FunctionalEquivalence instance with the specified function and this equivalence. @param function the function to apply to objects, must not be null
946 Creates an equivalence instance for Iterable objects using pairwise comparison. @return Equivalence object for Iterables
947 Compares two iterables for equivalence. @param iterable1 first iterable to compare @param iterable2 second iterable to compare @return true if both iterables contain the same elements, false otherwise
948 Checks if two lists are equivalent. @param thisList the first list to compare @param other the second list to compare, or null for NPE
949 Creates an instance of ConcurrentHashMultiset with a backing map. @return initialized multiset
950 Creates a ConcurrentHashMultiset instance from an existing backing map. @param countMap the underlying map to store element counts
951 Joins iterable elements into a single string using iterator's result. @param appendable the output Appendable object @param parts the input iterable of elements to join
952 Joins iterator elements into a single string with customizable separator. @param parts the input iterator of elements to join
953 Calls m2 with transformed map entries. @param builder target StringBuilder @param map input map to process
954 Processes map entries by delegating to join() method. @param entries iterable of key-value pairs
955 Adds a conditional holder with the provided object value. @param value the object value to add
956 Adds a conditional value holder to the collection with the specified name and value. @param name the name of the value @param value the optional value (null if omitted)
957 Adds a boolean mask value to the string representation. @param value the boolean value to be added
958 Adds an unconditional holder with the given character value. @param value character to be included in the string representation
959 Adds a double value holder with the given value. @param value numeric value to be included
960 Adds a float value to the string representation. @param value the float value to add
961 Adds an unconditional holder with the given integer value. @param value the integer value to be added
962 Adds an unconditional holder for the given long value. @param value long value to be added
963 Adds an unconditional boolean value holder with the specified name and value. @param name the name of the value @param value the boolean value to add
964 Adds a character mask with the specified name and value. @param name the name of the mask @param value the character to add as a mask
965 Adds a conditional value holder with the specified name and numeric value. @param name the name of the value @param value the numeric value to add
966 Adds a conditional float value holder with the specified name and value. @param name the name of the value @param value the float value to add
967 Adds an unconditional integer holder with specified name and value. @param name the name of the value @param value the integer to add
968 Adds an unconditional holder with 'value' and 'name' as string representation. @param name the name of the value @param value the value to add (as a string)
969 Creates an Optional instance from a nullable reference, using m1 for absent or null values. @param nullableReference the input value that may be present or absent
970 Initializes an empty iterable collection using absent Optional instance.
971 Generates an absent mask value as an Optional instance. @return An empty Optional container representing absence.
972 Returns an absent Optional instance representing absence of mask value.
973 Transforms input string using platform-specific implementation. @param string input string to transform @return transformed string or null if null input
974 Parses a string in the format [host:port] or host:port into a HostAndPort instance. @param hostPortString input string to parse
975 Skips a specified number of elements in an iterable. @param numberToSkip the number of elements to skip
976 Limits iterable collection size to specified maximum. @param maxSize maximum number of elements to include
977 Retrieves an element from the iterable at a specified index or returns a default value if not found. @param iterable input collection @param position non-negative index value @param defaultValue value to return when iterator is empty
978 Retrieves an element from an iterator at a specified position, considering skipped elements and iterator validity. @param iterator the iterator to access @param position the desired index; must be non-negative
979 Retrieves an element from the iterator at a specified position. @param iterator input iterator @param position non-negative index value @param defaultValue value to return when iterator is empty
980 Creates a traverser for the file system tree. @param FILE_TREE SuccessorsFunction representing the file hierarchy
981 Creates a limited input stream with the specified byte limit. @param in wrapped input stream @param limit maximum number of bytes that can be read from this stream
982 Converts BigInteger to IPv4 InetAddress. @param address BigInteger representation of IP address
983 Converts BigInteger to IPv6 InetAddress. @param address BigInteger representation of IP address @param isIpv6 true for IPv6, false for IPv4
984 Creates a SipHashFunction instance with specified parameters. @param k0 first key value @param k1 second key value
985 Initializes FileBackedOutputStream with specified memory threshold. @param fileThreshold memory threshold for switching to file storage
986 Extracts four bytes from an integer using Ints.m1() and returns an Inet4Address object. @param address integer value to process
987 Calculates available moment for permit acquisition based on current time and desired rate. @param permits number of permits to acquire
988 Validates rate limit permit acquisition within specified timeout. @param permits number of permits to validate @param timeout maximum allowed processing time in the given unit @return true if operation can complete within the given timeout, false otherwise
989 Writes Bloom filter data to output stream with specified strategy. @param out OutputStream to write to
990 Converts durations to nanoseconds with overflow handling and returns Scheduler. @param initialDelay input duration for initial delay @param delay input duration for periodic delay
991 Creates a Scheduler instance with fixed delay and rate from durations. @param initialDelay initial time to wait before executing tasks @param period execution interval between subsequent tasks
992 Calculates a function mask value from the specified time and unit. @param time time to convert @param unit TimeUnit object
993 Initializes stopwatch with Ticker object and starts it. @param ticker required Ticker instance
994 Configures custom comparator for ordering entries by value. @param valueComparator Comparator to use for ordering values
995 Sets the concurrency level for thread-safe interning operations. @param concurrencyLevel positive integer value
996 Calculates a mask from the given Duration, handling overflow cases. @param duration input time duration
997 Calculates a mask from the given Duration, handling overflow cases. @param duration input time duration
998 Calculates a mask from the given Duration in nanoseconds. @param duration input time duration
999 Sets cache instance's key/value strength to weak.
1000 Sets cache key/value strength to weak.
1001 Configures cache with soft strength. @return updated CacheBuilder instance
1002 Returns map maker with weak key strength.
1003 Creates a MapMaker instance with weak key and value strength. @return MapMaker object for further configuration
1004 Retrieves service failure cause from underlying snapshot data.
1005 Validates index and size for FUNC_MASK operation. @param index function index @param size total size
1006 Validates index and size using FUNC_MASK operation. @param index the index to validate @param size the maximum allowed size
1007 Validates indices and size for FUNC_MASK operation. @param start the start index @param end the end index @param size the maximum allowed size
1008 Creates a predicate that filters objects based on equality with the given target. @param target object to compare against
1009 Creates a filtered multimap by combining the given unfiltered multimap and an entry-level filter. @param multimap original multimap data @param entryPredicate filtering condition for entries
1010 Creates a filtered multiset by combining the given unfiltered set and predicate. @param unfiltered original multiset to filter @param predicate condition for element inclusion in the filtered set
1011 Creates a Splitter instance with custom mask strategy. @param separatorMatcher CharMatcher to determine separator positions
1012 Creates a Splitter with a custom length-based splitting strategy. @param length minimum length of each split part
1013 Returns a Splitter instance with whitespace trimming enabled. @param trimmer character matcher for trimming whitespace
1014 Creates a stopwatch with default configuration.
1015 Initializes and starts stopwatch using m1 functionality.
1016 Calculates the encoded length of a UTF-8 character sequence in bytes. @param sequence input CharSequence
1017 Waits indefinitely for an ExecutorService task to complete. @param executor ExecutorService instance
1018 Continuously processes finalization queue until no more references need cleanup. @throws InterruptedException if thread is interrupted
1019 Constructor for the Builder class, initializing its internal state.
1020 Creates a cache loader based on the provided computing function. @param function function to compute values based on keys
1021 Creates a cache loader from a supplier function to compute values. @param supplier the supplier to generate cached values
1022 Loads values for specified cache keys. @param keys iterable of unique keys
1023 Calculates cache load success ratio based on load and hit counts. @return cache load success ratio as a double value
1024 Calculates cache hit ratio based on hit and miss counts. @return cache hit ratio as a double value
1025 Initializes an empty ForwardingLoadingCache instance.
1026 Initializes an empty ForwardingList instance with default behavior.
1027 Initializes an empty ForwardingMultiset instance with default behavior.
1028 Initializes an empty ForwardingQueue instance with default behavior.
1029 Initializes an empty ForwardingSet instance with default behavior.
1030 Initializes an empty ForwardingListIterator instance.
1031 Initializes an instance of AbstractBiMap with a provided forward and inverse mapping. @param backward the forward mapping (key-value pairs) @param forward the inverse mapping (value-key pairs)
1032 Initializes an empty ForwardingMap instance.
1033 Initializes an empty ForwardingSortedMap instance.
1034 Initializes an empty MutableTypeToInstanceMap instance.
1035 Initializes an empty ForwardingListMultimap instance.
1036 Initializes an empty ForwardingSetMultimap instance.
1037 Default constructor; initializes an empty ForwardingExecutorService instance.
1038 Initializes an empty ForwardingFuture instance.
1039 Creates a new StrongEntry instance in the specified cache segment. @param segment cache segment to add entry to @param key unique identifier for this cache entry @param hash cached hash value of the entry @param next reference to the next entry in the linked structure, or null if none
1040 Retrieves or creates a cache entry with the given key and hash code. @param segment cache segment @param key weakly referenced key @param hash hash code of the key @param next optional next entry in the cache
1041 Masks computation result as future while closing associated resources. @throws ExecutionException if operation completes exceptionally
1042 Masks cache entries based on pending notifications.
1043 Retrieves a cached value reference based on key and associated data. @param segment Segment containing cache entries @param entry ReferenceEntry to find matching cached value for @param value Associated data for the cached value @param weight Weight associated with this ValueReference, used for prioritization
1044 Creates a weighted strong reference to the given value within the specified segment and cache entry. @param segment caching segment for the reference @param entry cache entry containing the referenced object @param value the object being referenced @param weight significance of the reference (0-100)
1045 Creates a weighted value reference with specified attributes. @param segment Segment associated with this reference @param entry ReferenceEntry containing data @param value Value being referenced @param weight Priority value for this reference
1046 Updates cache entry and recency queue based on current time. @param entry cached entry to update @param now current timestamp
1047 Evicts cache entry based on expiration and access time. @param entry Reference to the cache entry @param now current timestamp
1048 Updates cache entry with given weight and current time. @param entry cached entry to update @param weight new weight value @param now current timestamp
1049 Fetches cached value with mask and expiration checks. @param entry cache reference entry @param now current timestamp in nanoseconds @return cached value or null if expired/invalid
1050 Calculates the mask value based on input iterable's size and type. @param iterable Input iterable object to compute mask from
1051 Calculates the functional mask (cardinality) of the underlying multiset. @return cardinality value
1052 Fetches and pads input from InputStream into a byte array. @param in InputStream to read from @param bufs Queue of byte arrays for padding @return Padded byte array or null if m6() is true
1053 Initializes the bi-directional map by setting the forward and inverse mappings. @param forward Map of keys to values @param backward Map of values to keys
1054 Creates a GeneralRange instance with specified bounds and comparator for mask values. @param comparator the comparison function to use for endpoints
1055 Creates a GeneralRange instance with specified bounds and comparator. @param comparator the comparison function to use for endpoints @param endpoint the value of the range's single endpoint @param boundType the type of the range's endpoint (inclusive/exclusive)
1056 Creates a GeneralRange instance with specified bounds and comparator. @param comparator comparison function to use for endpoints @param endpoint value of the upper bound @param boundType type of the upper bound (inclusive/exclusive)
1057 Creates a GeneralRange instance with specified bounds and comparator. @param comparator the comparison function to use for endpoints @param lower the value of the lower bound, or null if not present @param lowerType the type of the lower bound (inclusive/exclusive) @param upper the value of the upper bound, or null if not present @param upperType the type of the upper bound (inclusive/exclusive)
1058 Computes the intersection of two ranges by merging their bounds and updating endpoint values. @param other the range to intersect with this one
1059 Returns next element in sequence or throws exception if exhausted. @return T next element in collection
1060 Returns a mask view (i.e., set of keys) from the multimap for the given key. @param key unique identifier @return Collection of values or null if not found
1061 Validates iterator state and delegate consistency. @throws ConcurrentModificationException if delegate mismatch
1062 Calls superclass's put operation to add a value. @param key unique identifier @param value new value to add
1063 Calls superclass implementation to add a value to the collection associated with the given key. @param key unique identifier @param value new value to add
1064 Retrieves values associated with the specified key from underlying data structure. @param key unique identifier
1065 Retrieves values associated with the specified key from underlying data structure. @param key unique identifier
1066 Returns unmodifiable view of key-value pairs associated with specific mask. @return Set of Entry objects or empty if none found
1067 Writes the multimap entries to the specified output stream. @throws IOException if an I/O error occurs
1068 Generates a string representation of the input collection. @param collection input collection
1069 Generates a string representation of the input map as a function mask. @param map input map to convert
1070 Creates an ArrayList instance with estimated size, leveraging computeArrayListCapacity function. @param estimatedSize initial array capacity
1071 Creates a HashMap with function mask based on expected size. @param expectedSize anticipated size
1072 Creates a linked map with function mask based on expected size. @param expectedSize the anticipated size
1073 Computes a hash set based on the given function mask generated by Maps.m1. @param expectedSize anticipated size
1074 Creates a LinkedHashSet with size determined by Maps.m1 function mask. @param expectedSize the anticipated size
1075 Creates a builder for an unbounded list multimap. @return ListMultimapBuilder instance with default expected values per key
1076 Creates a set multimap builder with default expected values per key. @param none
1077 Creates a set multimap builder with default expected values per key. @return SetMultimapBuilder instance
1078 Returns a MultimapBuilderWithKeys instance with default expected keys.
1079 Returns a MultimapBuilderWithKeys instance with default expected key count.
1080 Creates an immutable multiset entry with specified element and count. @param e the associated element @param n the count of occurrences (validated to be non-negative)
1081 Calculates multiset update mask. @param element the element to update count for @param count the new count value
1082 Updates count of an element in this multiset. @param element the element whose count is updated @param oldCount previous count of the element @param newCount new count of the element
1083 Recursively calls m1()'s implementation of m2(). @return result of m1()'s m2() call
1084 Delegates execution to m1 and returns its result.
1085 Initializes and returns a set of entries in the multiset.
1086 Calls m1() to initialize entries and then delegates to its m2().
1087 Calls m1() to initialize multiset and then retrieves result from it.
1088 Retrieves and returns the last entry from the map.
1089 Retrieves subset of elements starting from specified element and returns it. @param e input element
1090 Retrieves subset of elements from this sorted set. @param e element to start from
1091 Creates an empty TreeRangeSet instance with default range map.
1092 Checks if a given value is masked by any range in this set. @param c the value to check
1093 Validates and retrieves a comparator for the given iterable, ensuring consistency with sorted set comparators. @param comparator input comparator @param elements iterable to validate and retrieve comparator from @return true if comparator is valid and consistent, false otherwise
1094 Calls superclass's m1 to process cells in the given table. @param table Table instance containing cells to be processed
1095 Returns a set of cells with mask functionality. @return Set of masked cells or original cellSet if null
1096 Calls superclass's m1() to retrieve cell set.
1097 Calls superclass method to retrieve values based on mask. @return collection of values or null if not found
1098 Calls superclass's values() method to retrieve collection of values.
1099 Creates a new ordering based on the specified transformation function. @param function the function to apply for ordering
1100 Creates a custom ordering instance based on the provided comparator. @param comparator the comparator to use for ordering
1101 Creates a compound ordering with primary and secondary comparators. @param secondaryComparator secondary comparator for tie-breaking
1102 Creates an immutable cell with specified row, column keys, and value. @param rowKey unique row identifier @param columnKey unique column identifier @param value stored cell value
1103 Checks if a key exists in both the immutable map and array table. @param rowKey object to search for (may be null) @param columnKey object to search for (may be null)
1104 Creates an immutable map entry with given key and value. @param key unique identifier @param value associated data
1105 Creates an immutable map entry with given key and value, or reuses existing entry if it's masked. @param entry existing entry to reuse @param key unique identifier @param value associated data
1106 Adds an entry to the multimap using existing key-value creation methods. @param entry Entry object containing key and value
1107 Adds a key-value pair to the multimap. @param key the entry's key @param value the entry's value
1108 Updates the internal mask array to accommodate a new size. @param newSize target size for the mask array
1109 Sets a masked value at specified index in the compact hash map. @param entryIndex index of the entry to update @param key key-value pair @param value value to be set @param hash combined hash value with applied mask @param mask bitwise mask to apply
1110 Updates function masks array size to match the provided new size. @param newSize target size for internal data structures
1111 Initializes function masks and computes prefix hash at the specified entry index. @param entryIndex internal array index @param object element to set in the internal array @param hash input hash value @param mask bitwise mask to apply
1112 Initializes internal compact hash metadata and data structures based on estimated entries. @return the number of key-value pairs that can be stored
1113 Initializes internal hash table structures based on metadata. @return estimated number of key-value pairs
1114 Checks if two ranges overlap. @param other Range instance to compare with
1115 Checks if two ranges overlap by comparing their bounds. @param other Range instance to compare with
1116 Serializes the ImmutableSetMultimap instance to an ObjectOutputStream. @param stream the ObjectOutputStream to write to
1117 Creates an instance of ImmutableRangeMap builder.
1118 Creates an instance of the Builder for immutable ranges.
1119 Creates an instance of the Builder class with default settings.
1120 Creates an iterator with mask-like behavior.
1121 Counts occurrences of an element in the given iterable. @param iterable iterable object to search @param element element to find, or null for searching for null elements @return number of matches found
1122 Checks if the map contains a specific key. @param key key to find
1123 Masks a map key with a given value. @param value mask value to apply
1124 Retrieves entry by key using the underlying map. @param key unique identifier to search for
1125 Retrieves entry by key using delegate map's implementation. @param key the key to search for
1126 Retrieves entry by key from underlying map. @param key the key to look up
1127 Retrieves entry by key using delegate map. @param key unique key identifier
1128 Retrieves first non-null entry from delegate map. @return K key object or throws NoSuchElementException
1129 Retrieves the first entry in the map.
1130 Retrieves the first entry from this map's delegate map. @return the first entry or null if empty
1131 Retrieves an entry from the map based on condition m1(), then m2() and finally m3(). @return Entry object or null if conditions not met
1132 Returns a descending map view of the underlying map. @return NavigableSet containing keys in reverse order
1133 Retrieves a sub-map of key-value pairs within the specified range. @param fromKey starting key @param toKey ending key
1134 Retrieves map entry by ascending key. @param key target key
1135 Retrieves entry with given key. @param key unique identifier
1136 Retrieves entries in ascending order up to a specified key. @param toKey key to stop at @return head map of entries up to the specified key
1137 Returns the entry with the greatest key greater than or equal to the specified key. @param key starting key for the range
1138 Retrieves entry based on specified key. @param key The search key
1139 Returns a submap starting from the specified key. @param fromKey starting key for the range
1140 Retrieves elements from the delegate multiset based on specified bounds. @param lowerBound minimum value to include @param lowerBoundType type of lower bound (inclusive or exclusive) @param upperBound maximum value to include @param upperBoundType type of upper bound (inclusive or exclusive)
1141 Creates a new instance of HashBasedTable with an empty backing map and default value factory.
1142 Deserializes EnumMultiset from an ObjectInputStream. @param stream input stream containing serialized data
1143 Swaps and updates a compact hash table entry at the specified index, applying a mask. @param dstIndex position in the compact hash table to update @param mask bitwise mask value to apply during update
1144 Replaces an element at the specified index with a new one from the source set, updating internal hash table and mask accordingly. If the destination index is before the source index, it also updates the compacted hash value. @param dstIndex destination index in the set @param mask bit pattern to use for masking
1145 Calculates a function mask from the given object's hash code. @param value input object (may be null)
1146 Initializes builder with specified initial capacity and validates input size. @param expectedSize starting size of the entries array
1147 Initializes builder with default initial capacity.
1148 Creates an immutable map builder with default initial capacity.
1149 Initializes builder with a specified comparator. @param comparator comparison function for sorted map
1150 Creates an ImmutableBiMap instance with a single key-value pair. @param k1 unique key @param v1 associated value
1151 Adds an element to the immutable set while ensuring uniqueness and optimal capacity. @param e unique element to be added
1152 Initializes builder instance with default capacity.
1153 Creates an immutable list builder with specified capacity. @param expectedSize the anticipated size of the list
1154 Adds iterable elements to the builder's collection. @param elements iterable source of elements to add
1155 Adds all elements from the given iterator to the multiset. @param elements input iterator of elements to add
1156 Adds all elements from the given iterator to the collection. @param elements input iterator of elements to add
1157 Creates a SerializedForm instance from this ImmutableMap.
1158 Creates a new instance of the ImmutableTable with a specified row key, column key, and value. @param rowKey unique row identifier @param columnKey unique column identifier @param value associated table value
1159 Converts this FluentIterable to an iterable collection.
1160 Adds a key-value pair with multiple values to the Builder. @param key unique key @param values iterable collection of values
1161 Fetches the first element from an iterable if a condition is met, or returns the default value. @param iterable input iterable to evaluate @param defaultValue default value to return if no element meets the condition
1162 Retrieves an element from iterable collection using condition or default value. @param iterable input collection @param defaultValue default value to return if no match is found
1163 Adds a new key-value pair to the linked list multimap. @param key unique key identifier @param value associated value
1164 Partitions the given list into sublists of specified size. @param list input list to be partitioned @param size desired number of elements per sublist @return List of sublists or null if invalid inputs
1165 Computes a mask value based on the specified element. @param element the target element
1166 Calculates the insertion index for an element in the sorted list. @param element object to search for @return index where element should be inserted or -1 if not found
1167 Updates function mask based on conditions and cleans up resources.
1168 Creates an empty TreeRangeMap instance.
1169 Calculates the minimum child index within a given range. @param index starting index @param len length of the range
1170 Calculates the mask value for the current queue size. @return integer representing the priority order
1171 Returns the mask value using m1 function. @return result of m1() or null if not applicable
1172 Inserts element into the heap while maintaining ordering. @param index current position in the heap @param x new element to insert @return updated index of inserted element
1173 Creates an iterator over a multiset with masked elements. @return Iterator object
1174 Creates a new array with the given element and elements from the original array. @param element object to insert at the beginning @param array original collection of objects @return new array containing the inserted element and all elements from the original array
1175 Pads or truncates input collection to match target array length. @param c Collection to be padded/truncated @param array Target array (may be changed)
1176 Applies custom ordering function m1 to elements in the iterable and returns result. @param iterable Iterable of comparable elements
1177 Applies custom ordering to an iterable of elements. @param iterable input iterable to order
1178 Calls m1 to fetch a subrange and then calls its m2 method.
1179 Creates a GeneralRange instance from the given Range object. @param range input range to convert
1180 Restricts a navigable map to a given range, applying natural ordering. @param map the map to restrict @param range the range to apply @return restricted NavigableMap or result of m14(map)
1181 Creates a NavigableSet view of the specified range within the given set. @param set the set to create the view on @param range the range to filter by @return a NavigableSet containing elements in the specified range
1182 Returns a sorted map of rows to their corresponding column-value maps. @return Sorted map of row mappings or null if not initialized
1183 Returns a synchronized version of the input queue if not already synchronized. @param queue Queue to synchronize
1184 Initializes ArrayBasedCharEscaper with a custom escaper map and safe character range. @param escaperMap the object to validate and return, or null for NPE @param safeMin minimum safe character value (inclusive) @param safeMax maximum safe character value (inclusive)
1185 Initializes an ArrayBasedUnicodeEscaper instance with specified settings. @param escaperMap the map of character mappings to their replacements @param safeMin the minimum safe code point value @param safeMax the maximum safe code point value @param unsafeReplacement the replacement string for unsafe characters (optional)
1186 Initializes a PercentEscaper instance with the given safe characters and space encoding options. @param safeChars string specifying safe characters @param plusForSpace whether to encode spaces as pluses, or null for default behavior
1187 Escapes special characters in the input string using a recursive approach. @param string input string to process
1188 Determines whether to create a regular or synchronized subscriber based on the given method's concurrency requirements. @param bus EventBus instance for handling events @param listener Object to be invoked by the subscriber's method @param method Method to execute in response to events
1189 Returns a string representation of graph properties. @return String containing graph attributes (directed, self-loops, nodes, and edges)
1190 Returns an unmodifiable set of all possible endpoint pairs.
1191 Returns an unmodifiable set of all possible endpoint pairs.
1192 Inserts 64-bit double value into hasher using a secondary hash function. @param d the double value to hash
1193 Initializes a Bloom filter collector with specified parameters. @param funnel Funnel to process elements @param expectedInsertions Expected number of insertions
1194 Calculates precomputed mask value using bit size and hash functions. @return Precomputed mask value for efficient membership checks
1195 Checks if two Bloom filters have the same parameters and strategy. @param that another Bloom filter to compare @return true if both filters have the same parameters and strategy, false otherwise
1196 Converts byte to its unsigned integer representation in decimal radix. @param x the byte value
1197 Combines two BloomFilters with the same number of hash functions and size underlying bit arrays. @param that another BloomFilter to combine
1198 Creates a hash code object from a byte array with function mask. @param bytes non-null byte array to create hash code from
1199 Creates an IntHashCode object from a given 32-bit hash value. @param hash The integer hash code to be encapsulated
1200 Creates a LongHashCode object from a given long hash value. @param hash long hash code value
1201 Calculates mask bits using specialized function m1. @return float representation of calculated mask bits
1202 Calculates mask bits using specialized function m1(). @return double representation of calculated mask bits
1203 Calculates mask bits using m1 and m2 functions. @return BigInteger representation of calculated mask bits
1204 Generates a concatenated hash function based on input bit count. @param minimumBits minimum number of bits required for the hash function
1205 Calls internal hash code generator with seed from HashCode object. @param hashCode pre-computed hash code @param buckets maximum number of unique hash codes to generate
1206 Creates a MAC hash function with MD5 algorithm using specified key and parameters. @param key cryptographic key for secure hashing
1207 Creates an HMAC SHA-1 hash function instance with specified key and MAC settings. @param key cryptographic key for secure hashing
1208 Creates an HmacSHA256 hash function instance with specified key. @param key cryptographic key for secure hashing
1209 Creates a MAC hash function instance with specified algorithm and settings. @param key cryptographic key for secure hashing
1210 Concatenates multiple byte streams into a single stream. @param sources iterable collection of ByteSources to concatenate
1211 Concatenates multiple character sources into a single source. @param sources non-null collection of CharSource instances
1212 Creates a ByteArrayDataInputStream from byte array. @param bytes input byte data
1213 Creates a ByteArrayDataOutputStream instance with a serialized mask value. @return ByteArrayDataOutputStream object
1214 Creates a ByteArrayDataOutputStream instance with the specified initial capacity. @param size initial capacity of the output stream
1215 Initializes ReaderInputStream with a Reader, Charset, and buffer size. @param reader input character stream @param charset character encoding scheme @param bufferSize positive buffer size for reading and storing characters
1216 Calculates total bytes skipped from input stream 'in' until no more data is available. @param in InputStream to read from
1217 Skips up to 'n' bytes from input stream, throwing EOFException if not available. @param in InputStream to read from @param n target byte count
1218 Invokes buffered character data writing using an iterator of lines. @param lines iterable of characters to be written @param lineSeparator custom line separator string
1219 Delegates buffered character data output to another method. @param lines iterator of CharSequence objects @param lineSeparator custom line separator string
1220 Applies a consumer to each line of the masked source. @param action Consumer to apply to each line
1221 Reads lines from a readable source and populates a list with the results. @param r input stream to read from @return List of strings or empty if no lines are found
1222 Processes a character stream by iterating over lines and applying a LineProcessor. @param readable the input stream to read from @param processor the object to process each line with @return the result of processing, or null if not applicable
1223 Updates the input buffer with function mask values and processes character data. @throws IOException if an I/O error occurs
1224 Retrieves the FUNC_MASK integer value from the input stream. @throws IOException on I/O error
1225 Returns the FUNC_MASK character representation. @throws IOException on I/O error
1226 Calculates floating-point mask from integer mask. @throws IOException on I/O error
1227 Calculates the function mask value as a double. @throws IOException on I/O error
1228 Writes a string of little-endian data masks to output stream. @param s input string with method calls on its elements
1229 Writes double value in little-endian order to output stream. @param v double primitive value to be written
1230 Accumulates file operation exceptions from the given directory stream. @param dir Directory to iterate over
1231 Fetches file operation exceptions from a directory stream and its subdirectories. @param dir SecureDirectoryStream instance to iterate over @param path Path of the current directory or file @return Collection of encountered IOExceptions or null if none were found
1232 Initializes the multi-input stream with an iterator of byte sources. @param it iterator of ByteSource objects
1233 Retrieves resource as character source using specified charset. @param charset target character set
1234 Calculates the size of permutations for a given comparator. @param sortedInputList ordered input list @param comparator comparison function for elements in the list @return number of possible permutations or Integer.MAX_VALUE if exceeded
1235 Calculates moving average of iterable values. @param values iterator over numbers to process
1236 Checks if a double value is an integer power of 2. @param x input double value
1237 Validates double value by checking sign and magnitude. @param x input double precision floating-point number @return true if valid, false otherwise
1238 Rounds a long value to the specified mode. @param x long value to round @param mode rounding mode (UNNECESSARY, FLOOR, CEILING, DOWN, UP, HALF_DOWN, HALF_UP, HALF_EVEN)
1239 Compares double values and returns a mask indicating their relationship. @param a first value to compare @param b second value to compare @param tolerance maximum difference for equality @return -1 if a < b, 1 if a > b, 0 if equal or within tolerance, else Boolean comparison result
1240 Calculates functional mask value based on input table size. @param tableSize size of underlying hash table
1241 Initializes the top K elements by iteratively partitioning and trimming the buffer. @param k desired size of the top K elements
1242 Calculates the functional mask value based on the input integer and rounding mode. @param x input integer @param mode RoundingMode to determine the calculation logic
1243 Computes the cube root of a long integer value. @param x input value @param mode RoundingMode to determine the calculation result @return calculated cube root value as an integer
1244 Calculates mask value for resizing queue based on current size and maximum allowed elements. @param oldCapacity current capacity of the queue @return calculated mask value
1245 Creates a linear transformation with a regular function having a constant value based on the input y. @param y input value used to determine the constant
1246 Constructs a linear transformation based on the specified slope. @param slope double representing the slope of the line
1247 Creates a vertical linear transformation with scale factor x. @param x vertical scale factor
1248 Computes the FUNC_MASK value based on input int and rounding mode. @param n input integer value
1249 Computes the FUNC_MASK value based on the input number and rounding mode. @param x the input number @param mode the rounding mode (e.g. UNNECESSARY, FLOOR, CEILING)
1250 Computes the functional mask for a given value and ratio. @param x input value @param numerator numerator of the ratio @param denominator denominator of the ratio
1251 Computes the result of a power operation (x^k) with overflow check. @param b the base value @param k the exponent value
1252 Computes function mask value based on internal statistics. @return Function mask value
1253 Computes function mask value based on internal statistics and correlation. @return calculated function mask value
1254 Computes the mask value using internal statistics. @return masked double value
1255 Calculates the mean of a dataset with masking for non-finite values. @param values iterator over numerical data points
1256 Accumulates and updates statistical metrics for a new data point. @param value the input double to add to statistics
1257 Calculates the FUNC_MASK value based on internal statistics. @return FUNC_MASK result
1258 Calculates M2 statistic using internal statistics accumulator. @return M2 value or NaN if invalid
1259 Calculates the masked sum of products of deltas. @return double representing the result, or NaN if invalid
1260 Partitions array into segments based on quantile. @param array numerical array to partition @param from start index of segment @param to end index of segment
1261 Deserializes paired statistical data from a byte array. @param byteArray input data to deserialize
1262 Initializes and returns a Stats object from the provided byte array. @param byteArray input data to deserialize
1263 Computes paired statistics using individual variable stats and sum of product of deltas. @return PairedStats object with calculated metrics
1264 Calculates primary statistical metric using m1 value. @return primary statistical value or null if not found
1265 Extracts first moment (mean) of paired data. @return mean value of paired statistics
1266 Creates a collector for statistical aggregation using the StatsAccumulator class. @return A Collector instance to accumulate stats from Number elements
1267 Returns a string representation of an InetAddress, using IPv4 or IPv6 formatting. @param ip the InetAddress object to convert
1268 Creates an Inet4Address object from the least significant bits of a given Inet6Address. @param ip Inet6Address object to extract IPv4-compatible address from @return Inet4Address object representing the extracted IPv4 address or null if not found
1269 Creates an Inet4Address object representing the IPv4 part of a 6to4 address. @param ip Inet6Address object to extract IPv4 part from @return Inet4Address object or null if not valid 6to4 address
1270 Validates and creates Inet4Address from given Inet6Address. @param ip Inet6Address to validate and transform
1271 Applies scaling factor to dataset using m1 function. @param dataset collection of numerical data
1272 Calculates quantiles from a numerical dataset. @param dataset collection of numbers to process
1273 Adds a double value to the builder. @param value the double value to add
1274 Adds an array of double values to the builder. @param values double array to be added
1275 Adds multiple double elements from the given collection. @param values Collection of double values to add
1276 Processes a given immutable double array and updates internal state. @param values the input array to process
1277 Creates an ImmutableDoubleArray with a single double value. @param e0 initial double value
1278 Creates an ImmutableDoubleArray from two double values. @param e0 first double value @param e1 second double value
1279 Creates an ImmutableDoubleArray from three double values. @param e0 first double value @param e1 second double value @param e2 third double value
1280 Creates an ImmutableDoubleArray from four double values. @param e0 first value @param e1 second value @param e2 third value @param e3 fourth value
1281 Creates an ImmutableDoubleArray instance from five doubles. @param e0 first double value @param e1 second double value @param e2 third double value @param e3 fourth double value @param e4 fifth double value
1282 Creates an immutable double array from six specified values. @param e0 first value @param e1 second value @param e2 third value @param e3 fourth value @param e4 fifth value @param e5 sixth value
1283 Creates an ImmutableDoubleArray from a double array. @param values input double array
1284 Creates an ImmutableDoubleArray from a collection of doubles, filtering out NaN values if any. @param values Collection of double values
1285 Creates an ImmutableDoubleArray from a DoubleStream. @param stream input DoubleStream
1286 Returns an ImmutableDoubleArray representing the function mask. @return subarray of underlying array if start>0 or end<length, otherwise self
1287 Checks if the given double value is within the mask. @param target double value to be checked
1288 Adds an integer to the builder, setting a specific mask bit. @param value integer value to be added
1289 Adds an integer array to the builder and updates internal capacity. @param values array of integers to be added
1290 Adds a collection of integers to the builder, updating internal capacity. @param values collection of integers to be added
1291 Merges an existing ImmutableIntArray into the current builder. @param values existing array to be merged
1292 Constructs an ImmutableIntArray from a single integer. @param e0 the integer to store
1293 Creates an immutable array with two elements: e0 and e1.
1294 Creates an ImmutableIntArray from three given integers. @param e0 first integer @param e1 second integer @param e2 third integer
1295 Creates an ImmutableIntArray from four integers. @param e0 first integer @param e1 second integer @param e2 third integer @param e3 fourth integer
1296 Creates an ImmutableIntArray from the given integers. @param e0 e1 e2 e3 e4 integer values
1297 Creates an ImmutableIntArray from the specified six integers. @param e0 first integer @param e1 second integer @param e2 third integer @param e3 fourth integer @param e4 fifth integer @param e5 sixth integer
1298 Creates an ImmutableIntArray from the given integer array. @param values source array
1299 Creates an ImmutableIntArray from the given IntStream. @param stream input stream of integers
1300 Creates a subarray mask based on function activation status. @return a new ImmutableIntArray or itself if not activated
1301 Adds long value to ImmutableLongArray, ensuring sufficient capacity. @param value the long value to add
1302 Adds a long array to the builder. @param values the array of long values to add
1303 Adds multiple long values from a collection. @param values Collection of long integers to add
1304 Initializes builder with immutable long array from given source. @param values ImmutableLongArray to initialize from
1305 Creates an ImmutableLongArray instance from a single long value. @param e0 the initial long value
1306 Creates an ImmutableLongArray instance from two long values. @param e0 first value @param e1 second value
1307 Creates an ImmutableLongArray instance from a 3-element subarray. @param e0 first element @param e1 second element @param e2 third element
1308 Creates an ImmutableLongArray instance from a 4-element array. @param e0 first element value @param e1 second element value @param e2 third element value @param e4 fourth element value
1309 Creates an ImmutableLongArray instance from five long values. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @param e4 fifth element
1310 Creates an immutable array from six long values. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @param e4 fifth element @param e5 sixth element
1311 Creates an ImmutableLongArray instance from a long array. @param values input array of long values
1312 Initializes ImmutableLongArray from a LongStream. @param stream input stream of long values
1313 Returns an immutable long array mask based on current instance and m1 result. @return masked ImmutableLongArray object or self if m1 returns false
1314 Calculates scale and indexes based on input collection. @param indexes Collection of integers
1315 Creates an ImmutableIntArray from the given Collection of integers. @param values input collection
1316 Creates an ImmutableLongArray from a Collection of Long values. @param values input collection
1317 Converts a string to an Integer value in the given radix. @param string input string @param radix base of the number system (e.g. 10 for decimal) @return Integer value or null if invalid
1318 Parses string to long value in decimal radix. @param string input string
1319 Converts a string to an unsigned int using the provided radix. @param stringValue input string
1320 Creates a mask from the specified long value within the unsigned integer range. @param value input value to be masked
1321 Creates an unsigned integer mask from a BigInteger value. @param value BigInteger to create the mask from
1322 Creates an unsigned integer mask from a string representation. @param string input string @param radix base value for conversion
1323 Computes a mask by adding two unsigned integers. @param val second operand @return result as an UnsignedInteger object
1324 Calculates an unsigned integer mask from the specified value. @param val input value to calculate mask from @return UnsignedInteger mask value
1325 Computes a mask value based on input unsigned integer and multiplier. @param val input unsigned integer @return resulting mask value
1326 Calculates the mask value of val divided by m1(val). @param val input unsigned integer
1327 Computes an unsigned integer mask from the input value. @param val input unsigned integer value
1328 Converts unsigned integer to base 'radix' string representation. @param radix target base for the output string (e.g., 2-36)
1329 Computes functional mask value based on another UnsignedInteger. @param other the other unsigned integer to compare with
1330 Creates an UnsignedLong object from a given bit mask value. @param value unsigned long integer value represented by the bit mask
1331 Creates an UnsignedLong object from a BigInteger value. @param value input BigInteger to be converted
1332 Calculates the functional mask value by adding the current value and the result of applying function m1 to the input value. @param val input unsigned long integer value @return resulting UnsignedLong object
1333 Computes masked value by subtracting m1() result from val and applying m2(). @param val input UnsignedLong value
1334 Computes functional mask from input unsigned value. @param val input unsigned long integer value
1335 Computes the remainder and quotient of unsigned division. @param dividend value to be divided @param divisor non-negative divisor
1336 Calculates the remainder of an unsigned long division. @param dividend value to be divided @param divisor non-negative divisor value
1337 Parses unsigned long from a string with given radix. @param string input string to parse @param radix base of the number being parsed
1338 Parses unsigned long from input string with default radix 10. @param string input string to parse
1339 Parses unsigned long from string representation. @param stringValue input string to parse
1340 Checks if function mask is set by inspecting m1(), m2(), and m3().
1341 Checks if this TypeToken has a subclass with m1() method. @return true if such subclass exists, false otherwise
1342 Returns a mask based on runtime type, and if true, returns the wrapped TypeToken. @return TypeToken<T> instance or itself if not primitive
1343 Retrieves the type token for the first component of this type token. @return TypeToken object or null if not found
1344 Retrieves asynchronous computation result using platform-specific mechanism.
1345 Submits a callable task to the provided executor service and returns a ListenableFuture for its result. @param executorService The executor service to execute the task @param task The task to be executed @param queue A blocking queue to store the Future object @return A ListenableFuture representing the result of the task execution
1346 Waits for service to reach running state with specified timeout. @param timeout maximum wait duration
1347 Waits for service to reach running state with specified timeout. @param timeout maximum wait duration
1348 Waits for scheduled service to reach running state with specified timeout. @param timeout maximum wait duration
1349 Waits for service to reach running state with specified timeout. @param timeout maximum wait duration
1350 Waits for service to reach running state with specified timeout. @param timeout maximum wait duration
1351 Calls superclass's idle management with specified timeout. @param timeout maximum wait duration
1352 Waits for service to reach running state with specified timeout. @param timeout maximum wait duration
1353 Calls service initialization with specified timeout. @param timeout maximum wait duration
1354 Masks a future computation result and handles exceptions. @param index unknown index @param future computation result as a Future
1355 Applies a sum update function to the atomic double value. @param delta input change
1356 Accumulates and applies a binary operator to the atomic double value. @param delta input value @return new accumulated value
1357 Applies atomic sum operation to array element at index i. @param i index of the array element to update @param delta value to accumulate with existing element value
1358 Applies atomic update to array element at index `i` using specified function and accumulator. @param i index of the element @param delta value to accumulate with @return updated double value or NaN if failed
1359 Cancels the asynchronous task and logs event. @param mayInterruptIfRunning whether to interrupt running tasks @return true if cancellation was successful, false otherwise
1360 Fetches allowed prior locks for the given node. @param node LockGraphNode to fetch prior locks for @param seen Set of previously visited nodes @return ExampleStackTrace object or null if not found
1361 Creates a new ListenableFutureTask with the given callable. @param callable task to be executed
1362 Creates a new ListenableFutureTask instance with the given Runnable and result. @param runnable task to be executed @param result expected outcome of the task
1363 Executes pending runnables in reverse order to mask task progress.
1364 Creates an instance of the ExecutionSequencer class with default settings.
1365 Wraps a ListenableFuture in a FluentFuture, if not already one. @param future the asynchronous computation result
1366 Wraps a ListenableFuture in a NonCancellationPropagatingFuture. @param future original future to be wrapped @return the wrapped future or the original if already compatible
1367 Reloads cached value for given key. @param key unique cache identifier @param oldValue previous cached value (not used) @return ListenableFuture containing the reloaded value or null if not found
1368 Dispatches an event to all registered listener queues.
1369 Dispatches an event and its associated label to all registered listener queues. @param event the event to be dispatched @param label the label associated with the event
1370 Evaluates and dispatches events based on service state. @param monitor service lifecycle monitoring
1371 Updates service state based on monitor value. @param monitor current monitor state
1372 Iterates through active guards and executes the first satisfied condition. @param activeGuards linked list of currently held guards
1373 Schedules an async operation using the specified executor. @param callable asynchronous operation to be executed @param executor execution context @return ListenableFuture representing the scheduled task
1374 Schedules an asynchronous operation with a specified delay. @param callable async operation to be executed @param delay duration until execution @param timeUnit unit of delay measurement @return ListenableFuture representing the scheduled operation
1375 Wraps a callable operation in a ListenableFuture. @param callable target operation to be executed asynchronously
1376 Executes a task asynchronously with the given executor. @param callable target operation to be executed @param executor execution context for the task @return ListenableFuture representing the asynchronous result
1377 Creates a task with a runnable operation and associated result. @param runnable target operation to be executed asynchronously @param value associated result of the task execution
1378 Executes a Runnable operation and returns a ListenableFuture representing the result. @param runnable target operation to be executed asynchronously @param executor scheduler for executing the task
1379 Converts duration to nanoseconds with overflow handling. @param timeout input duration @return result as long or special values for overflow cases
1380 Returns an Optional instance with a value if the iterable collection is present. @return Optional container representing presence or absence
1381 Fetches a single element from the iterable collection. @return Optional instance containing the element or null if absent
1382 Filters an iterator based on a predicate, returning the first matching element. @param iterator input iterator to filter @param predicate condition to match elements against @return first matching element in the iterator or empty Optional if none found
1383 Masks node count with provided function, throwing exception if not non-negative. @param expectedNodeCount integer to mask
1384 Masks input integer with expected node count; throws exception if not non-negative. @param expectedNodeCount integer to mask
1385 Masks expected edge count with provided function; throws exception if not non-negative. @param expectedEdgeCount integer to mask
1386 Masks expected node count with provided function; throws exception if not non-negative. @param expectedNodeCount integer to mask
1387 Checks if any element in an iterable matches a given condition. @param iterable collection to search @param predicate condition to match elements against
1388 Creates a predicate that checks if a CharSequence matches a compiled pattern. @param pattern input string to compile into a pattern
1389 Masks an exception by checking its type and potentially re-throwing it. @param throwable the original exception @param declaredType the expected exception class to check against
1390 Retrieves function mask from cache for given class. @param concreteClass class to fetch mask for
1391 Creates a ThreadFactory instance based on App Engine environment availability. @throws RuntimeException if unable to retrieve ThreadManager's currentRequestThreadFactory
1392 Checks if this FluentIterable contains a specific element. @param target object to find
1393 Creates a filtered multimap by combining the original multimap with an entry-level filter. @param multimap original multimmap data @param entryPredicate filtering condition for entries in the result
1394 Creates a filtered multimap by applying the given predicate to keys. @param unfiltered the underlying multimap @param keyPredicate the predicate defining valid keys in the filtered map @return Filtered multimap data
1395 Wraps an iterable in a FluentIterable, filtered by specified class type. @param type target class type
1396 Determines subset relationship between this set and provided collection. @param collection Collection to check against
1397 Initializes an EnumMultiset with the specified enum class from an iterable of elements. @param elements Iterable containing enum constants to populate the multiset
1398 Creates a linked list from iterable elements. @param elements the iterable containing elements to merge
1399 Creates an ArrayDeque from an iterable, or directly from a collection. @param elements the input iterable
1400 Creates a concurrent linked queue from iterable elements. @param elements iterable containing elements to add
1401 Creates a LinkedBlockingDeque from an iterable. @param elements input iterable to initialize the deque with
1402 Creates a LinkedBlockingQueue from an iterable. @param elements source of elements to add
1403 Creates a priority blocking queue from an iterable of comparable elements. @param elements input iterable
1404 Creates a priority queue from an iterable of comparable elements. @param elements input iterable to initialize the queue
1405 Creates an EnumSet from the given iterable of enum elements. @param iterable Iterable containing enum elements @param elementType Class of the enum elements @return EnumSet containing all unique enum elements
1406 Creates a synchronized set instance from an iterable. @param elements iterable containing elements to merge
1407 Creates a linked hash set from an iterable. @param elements iterable containing elements to add
1408 Creates a sorted TreeSet instance from an iterable of comparable elements. @param elements input iterable to populate the set
1409 Converts iterable to a collection, using m2 and m1 methods if necessary. @param iterable the input iterable
1410 Creates a list from an iterable, potentially recursively flattening nested iterables. @param elements the input iterable or nested iterables to merge
1411 Creates a HashSet instance from an iterable of elements. @param elements the iterable containing elements to merge
1412 Filters an iterable based on the provided predicate. @param predicate condition to filter by
1413 Retrieves a list iterator at the specified index in the underlying list. @param start position to retrieve iterator for
1414 Creates an AsMapView with a backing sorted set and a mapping function. @param set underlying sorted set of keys @param function mapping function to transform keys to values
1415 Creates a transformed sorted map by applying the given entry transformation to each entry in the source map. @param fromMap original sorted map @param transformer function to apply to each map entry @return transformed sorted map with new value type V2
1416 Applies a transformation function to each map entry and returns the resulting map. @param fromMap original map to transform @param function function to apply to each map entry's value @return new Map instance with transformed entries
1417 Updates the count of an element by adding specified occurrences. @param element the element to update @param occurrences number of occurrences to add or remove @return previous occurrence count
1418 Updates the occurrence count for a given element in the multiset. @param element the element to update @param occurrences the number of occurrences to add @return the new occurrence count; 0 if element is removed or added with overflow
1419 Creates a new ListMultimap with transformed values. @param fromMap original multimap to transform @param transformer entry transformation function
1420 Transforms entries in a multimap by applying the given function to each value. @param fromMultimap original multimap to transform @param function transformation function for values @return transformed multimap with new values
1421 Adds iterable elements to the builder's collection with specified counts. @param elements iterable source of elements to add
1422 Performs multisets union operation. @param self Multiset object being modified @param elements Multiset or collection containing elements to add @return true if any elements were added, false otherwise
1423 Checks if input value fits within this range. @param input value to check
1424 Creates a Collector for merging input elements into a table. @param rowFunction function to transform each element into a row @param columnFunction function to transform each element into a column @param valueFunction function to transform each element into a cell value @param tableSupplier supplier for the resulting Table object
1425 Generates a Unicode escape sequence for the input string. @param s input string @param index current position within the string
1426 Initializes a StandardNetwork instance with the provided builder and cache configurations. @param builder network configuration parameters @param nodeConnections cached connections for each node @param edgeToReferenceNode cached mapping of edges to reference nodes
1427 Initializes a StandardValueGraph with the given builder, node connections, and edge count. @param builder AbstractGraphBuilder instance to configure graph properties @param nodeConnections Map of node connections (GraphConnections) for efficient lookup @param edgeCount number of edges in the graph; validated as non-negative
1428 Copies character data from a Readable source to an Appendable destination. @param from input reader @param to output writer @return total bytes written or copied
1429 Applies encoding mask to CharSequence using m1 function. @param chars input character sequence
1430 Calculates the FUNC_MASK value based on the input BigInteger x. @param x input BigInteger value
1431 Calculates the mask value based on the given input. @param x input BigInteger value
1432 Creates an Invokable instance from a given constructor. @param constructor the constructor to initialize Invokable with
1433 Wraps the given Method in an Invokable instance. @param method the method to wrap
1434 Handles task cancellation and listener execution with a mask. @param param Asynchronous computation to await completion @param callInterruptTask whether to interrupt the task
1435 Accumulates and returns the sum of the given value using the provided binary operator. @param key The map key @param delta The value to accumulate
1436 Accumulates atomic value associated with the given key by summing the provided delta. @param key unique identifier for the atomic value @param delta new value to accumulate
1437 Applies atomic map updates using custom function. @param m input map to be updated
1438 Initializes graph builder with directionality. @param directed true for directed graph, false otherwise
1439 Initializes the event queue with a listener and executor. @param listener event listener instance @param executor thread pool executor for concurrent execution
1440 Performs type conversion from A to B using converter logic. @param a nullable input object of type A
1441 Initializes CompactHashMap with default size.
1442 Initializes metadata with masked expected size. @param expectedSize input integer indicating the compact hash map's capacity
1443 Initializes compact hash set with default size.
1444 Initializes hash set with specified capacity. @param expectedSize estimated number of elements
1445 Retrieves class name with dollar sign mask applied. @return masked class name or original class name
1446 Initializes multimap from an existing Map. @param map existing Map of key to collection of values
1447 Creates a custom multimap from an existing map and a collection factory. @param map pre-existing Map of key to collection of values @param factory supplier for creating new collections of values
1448 Creates an empty multiset instance with a backing map.
1449 Creates an empty multiset with a backing map.
1450 Initializes and populates EnumMultiset with iterable enum elements. @param elements Iterable of enum values to add @param type Class of the enumeration being managed
1451 Computes functional mask value based on statistical properties. @return functional mask value or NaN if invalid
1452 Calculates the masked mean value using m1() and m2().
1453 Computes masked function value based on accumulated statistics. @return masked double value or NaN if invalid
1454 Calculates function mask value based on m1() result.
1455 Creates a custom CharMatcher based on the input sequence and applies secondary matching criteria. @param sequence input sequence of characters to be processed
1456 Converts string to specified case format using {@link CaseFormat}. @param targetFormat desired output format
1457 Composes this converter with another to produce a new converter from A to C. @param secondConverter subsequent converter from B to C
1458 Initializes reverse converter with specified original conversion logic. @return Converter instance or newly created one if not found
1459 Creates a string converter for the specified enum type. @param enumClass the enum class to be supported by the converter
1460 Creates a converter from a bidirectional map. @param bimap bidirectional map to transform values between types A and B
1461 Checks if an object matches the list's mask. @param object the object to check
1462 Creates a new instance of ConcurrentHashMultiset and populates it with the given iterable elements. @param elements iterable containing elements to populate the multiset
1463 Joins array elements into a single string using the specified Appendable object. @param appendable output Appendable object @param parts input array of elements to join
1464 Joins iterable elements into a single string using m1() to process each part. @param builder the input StringBuilder @param parts the input iterable of elements to join
1465 Concatenates iterator elements into a single string with customizable separator. @param parts input iterator of elements to join
1466 Recursively processes key-value pairs from maps. @param map input map to process
1467 Creates a function mask string from cache builder specifications. @return formatted string or null if not applicable
1468 Builds a string representation of the MapMaker instance, including its customizable parameters. @return formatted string or null if not applicable
1469 Constructs a string representation of the CacheBuilder instance.
1470 Initializes the internal map with specified parameters and settings. @param builder MapMaker instance defining concurrency level, key equivalence, and initial capacity @param entryHelper InternalEntryHelper instance for managing entries
1471 Creates an Optional instance from a nullable reference, using m2 for absent or null values. @param javaUtilOptional input value that may be present or absent
1472 Validates and parses a host-port string into a HostAndPort instance. @param host network host address @param port associated port number
1473 Parses input string as host and extracts associated port (if any). @param host input string to parse
1474 Retrieves an element from an iterable at a specified position. @param iterable the input collection @param position the desired index; must be non-negative @return element T or null if not found
1475 Creates a Bloom filter instance with specified parameters. @param bits underlying bit array @param numHashFunctions number of hash functions to use (1-255) @param funnel funnel object for encoding elements @param strategy strategy object for managing the filter
1476 Calculates wait time in seconds to acquire the specified number of permits. @param permits number of permits to acquire
1477 Validates rate limit permit acquisition within specified duration. @param timeout input duration
1478 Validates rate limit permit acquisition within specified timeout. @param timeout maximum allowed processing time in given unit
1479 Validates rate limit permit acquisition with specified number of permits and timeout. @param permits number of permits to validate
1480 Validates rate limit permit acquisition within default timeout. @return true if operation can complete within default timeout, false otherwise
1481 Validates rate limit permit acquisition within specified duration. @param permits number of permits to validate @param timeout maximum allowed processing time in nanoseconds
1482 Calculates a function mask value from the specified time and unit. @param time time to convert @param unit TimeUnit object
1483 Initializes service with default state and shutdown behavior.
1484 Verifies that the heap representation is valid across all indices. @return true if mask representation is consistent, false otherwise
1485 Creates a cache builder instance with specified configuration. @return CacheBuilder instance with configured settings
1486 Creates a MapMaker with specified configuration. @param mapMaker existing MapMaker instance
1487 Verifies service state matches expected status. @param expected desired service state
1488 Applies mask operation to cell at specified row and column indices. @param rowIndex function index @param columnIndex total size
1489 Applies a mask to the specified array cell using FUNC_MASK operation. @param rowIndex row index @param columnIndex column index @param value new cell value (may be null) @return previous cell value or null if not set
1490 Calculates a double value from the immutable array using FUNC_MASK operation. @param index function index
1491 Retrieves an element at the specified index using FUNC_MASK operation. @param index function index
1492 Retrieves element at specified index using FUNC_MASK operation. @param index function index
1493 Searches for the first character in a sequence that matches the criteria defined by m4() method. @param sequence CharSequence to search @param start starting index of the search range @return index of the matching character or -1 if not found
1494 Initializes an indexed list iterator with a specified size and position. @param size the total number of elements @param position the initial index within the collection
1495 Validates index and size using FUNC_MASK operation. @param start the index to validate
1496 Validates a byte sequence as well-formed UTF-8 for FUNC_MASK operation. @param bytes the byte array to check @param off offset into the array to start checking from @param len length of the sequence to validate
1497 Applies mask operation on array src and stores result in dst. @param src source array @param offset starting index @param len length of section to process @param dst destination array (may be resized) @return modified dst array
1498 Creates a FUNC_MASK array from the specified elements. @param elements input array of objects @param offset starting index in elements @param length desired size of output array
1499 Computes and applies FUNC_MASK operation on the given byte array. @param dest the target byte array @param offset starting index in the destination array @return maximum length used for the operation
1500 Encodes byte array into FUNC_MASK string representation. @param bytes input byte array @param off starting offset within the array @param len length of the substring to encode
1501 Reads bytes from InputStream into byte array. @param in the input stream @param b the output buffer @param off starting offset @param len number of bytes to read @return actual number of bytes read or -1 on error
1502 Applies FUNC_MASK operation on the specified boolean array segment. @param array the input boolean array @param fromIndex the start index of the segment (inclusive) @param toIndex the end index of the segment (exclusive)
1503 Applies FUNC_MASK operation by swapping and rotating bytes within the specified range. @param array the input byte array @param fromIndex start index of the operation @param toIndex end index of the operation
1504 Applies FUNC_MASK operation on a character array, swapping and rearranging elements. @param array the input character array
1505 Swaps elements in a double array within specified indexes. @param array the input array @param fromIndex the start index (inclusive) @param toIndex the end index (exclusive)
1506 Reverses a specified range of elements in the provided array. @param array the input array to modify @param fromIndex start index (inclusive) for reversal @param toIndex end index (exclusive) for reversal
1507 Creates a subarray of fixed-size double values from FUNC_MASK operation boundaries. @param startIndex starting index of the mask (inclusive) @param endIndex ending index of the mask (exclusive)
1508 Applies a mask to the array by creating a subarray from `startIndex` to `endIndex`. @param startIndex starting index of the masked slice (inclusive) @param endIndex ending index of the masked slice (exclusive)
1509 Applies a mask to the array using FUNC_MASK operation. @param startIndex starting index of the subarray @param endIndex ending index of the subarray (inclusive)
1510 Applies FUNC_MASK operation on the given integer array by swapping elements within the specified range. @param array the input array to modify @param fromIndex the start index of the swap operation @param toIndex the end index of the swap operation
1511 Applies FUNC_MASK operation on the given array within specified indices. @param array the input array @param fromIndex start index for the operation @param toIndex end index for the operation
1512 Swaps and rearranges elements in the specified short array using FUNC_MASK operation. @param array the input short array @param fromIndex starting index for the operation @param toIndex ending index for the operation
1513 Replaces and sorts byte values in the specified range of an array. @param array the input byte array @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1514 Applies FUNC_MASK operation on a byte array within the specified range. @param array the input byte array @param fromIndex the start index of the operation @param toIndex the end index of the operation
1515 Sorts and transforms an array of unsigned integers within a specified range. @param array the input array @param fromIndex the start index (inclusive) @param toIndex the end index (exclusive)
1516 Applies FUNC_MASK operation on a specified range of an array. @param array the input array @param fromIndex start index for operation @param toIndex end index for operation
1517 Updates a range of unsigned longs in an array by applying a transformation. @param array the input array @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1518 Applies FUNC_MASK operation on a long array section. @param array the input array @param fromIndex start index of the affected section @param toIndex end index of the affected section
1519 Filters a collection using the provided predicate. @param unfiltered original collection of elements @param predicate condition to apply for filtering elements
1520 Creates a Splitter instance with custom delimiter strategy. @param separator character to split on
1521 Initializes a new instance of SleepingStopwatch with default settings.
1522 Constructs a Finalizer instance with given parameters. @param finalizableReferenceClass class of finalizable reference @param queue queue for collecting finalization references @param frqReference starting FRQ to track cleanup completion
1523 Initializes internal state of the Builder class.
1524 Creates an empty ImmutableMultimap Builder instance.
1525 Constructor for the Builder class, initializing its internal state.
1526 Initializes an empty ForwardingSortedMultiset instance with default behavior.
1527 Initializes an empty ForwardingDeque instance with default behavior.
1528 Initializes an empty ForwardingQueue instance with default behavior.
1529 Initializes an empty ForwardingSortedSet instance with default behavior.
1530 Initializes an empty ForwardingNavigableMap instance.
1531 Creates an unmodifiable view of the input bidirectional map. @param bimap the underlying bidirectional map
1532 Creates an instance of MutableClassToInstanceMap for type B.
1533 Initializes a MutableClassToInstanceMap instance from an existing map. @param backingMap the input map to validate and use, or null for NPE
1534 Creates an instance of ImmutableTypeToInstanceMap with a type-safe mapping from type tokens to instances generated by m1(). @return An initialized ImmutableTypeToInstanceMap instance.
1535 Initializes an empty ForwardingSortedSetMultimap instance.
1536 Wraps a Multimap instance in an unmodifiable view. @param delegate the underlying multimap to wrap
1537 Creates an immutable view of a given table. @param table the underlying table data structure
1538 Adapts a standard Java Future to a ListenableFuture. @param future the underlying Future to adapt @param executor the executor for listener callbacks
1539 Retrieves cached value by key from underlying cache instance. @param key unique identifier
1540 Delegates cache entry loading to the underlying delegate cache. @param key unique cache identifier @param valueLoader function to load cached value if not present
1541 Retrieves cached values by key set. @param keys iterable of unique cache keys @return immutable map of cached entries or empty map if none found
1542 Stores cached entry with specified key and value. @param key unique cache identifier @param value associated cached data
1543 Delegates cache update operation to underlying cache instance.
1544 Invokes underlying cache's key invalidation. @param keys iterable of keys to invalidate
1545 Retrieves or creates a new cache entry based on given key and hash. @param segment cache segment @param key unique identifier for this cache entry @param hash cached hash value of the entry @param next reference to the next entry in the linked structure, or null if none
1546 Fetches reference entry by key from the given cache segment. @param segment Segment of the local cache @param key unique identifier for this cache entry @param hash cached hash value of the entry @param next reference to the next entry in the linked structure, or null if none
1547 Creates a new StrongWriteEntry in the given Segment with the specified key and hash. @param segment caching segment @param key unique identifier for this cache entry @param hash cached hash value of the entry @param next reference to the next entry in the linked structure, or null if none
1548 Retrieves reference entry from cache segment by key and hash. @param segment cache segment @param key weakly referenced key @param hash hash code of the key @param next optional next entry in the cache
1549 Creates or duplicates a cache entry with the given key and hash. @param segment Segment object @param key Cache key @param hash Hash code of the key @param next Optional next entry in the cache
1550 Retrieves or creates a reference entry in the cache segment. @param segment cache segment @param key weakly referenced key @param hash key hash code @param next optional next entry in the cache
1551 Updates cache entry with given key and value. @param entry cached entry to update @param key unique identifier @param value new value for the entry @param now current timestamp
1552 Calculates the second-to-last element of this iterable collection. @return The value at index size - 2 or null if less than two elements
1553 Calculates the functional mask value for all nodes in the graph. @return Sum of node degrees divided by 2, shifted right
1554 Fetches and pads input from InputStream into a byte array. @param in InputStream to read from
1555 Fetches and pads input from InputStream into a byte array. @param in InputStream to read from @param expectedSize expected size of the output byte array @return Padded byte array or null if m6() is true
1556 Initializes an empty bi-directional map with given forward and inverse mappings. @param forward Map of keys to values @param backward Map of values to keys
1557 Retrieves values associated with the given key from the multimap. @param key unique identifier
1558 Fetches values associated with the specified key and updates the collection accordingly. @param key unique identifier @param values iterable of values to consider @return Collection of updated values or null if not found
1559 Returns a set of values from the multimap associated with the given key. @param key unique identifier
1560 Retrieves sorted values associated with the specified key. @param key unique identifier
1561 Generates a mask string based on collection contents. @return computed mask string
1562 Generates function mask string representation from this map. @return string representation of this map as a function mask
1563 Creates a HashMap with function mask based on expected size. @param expectedSize anticipated size
1564 Checks if a graph meets the condition based on its edge count and node properties. @param graph input graph structure
1565 Creates a HashBasedTable instance with a custom backing map and value factory. @param expectedRows anticipated number of rows @param expectedCellsPerRow anticipated number of cells per row @return initialized HashBasedTable object
1566 Creates a linked map with function mask based on expected size. @param expectedSize the anticipated size
1567 Creates a function mask map based on the expected size and ordering type. @param expectedSize anticipated size
1568 Computes hash set based on given function mask. @param expectedSize anticipated size
1569 Creates a LinkedHashSet with size determined by Maps.m1 function mask. @param expectedSize the anticipated size
1570 Initializes ServiceManagerState with a collection of services. @param services Collection of services to be managed
1571 Retrieves a suitable entry from the underlying multiset. @return an immutable entry or null if not found
1572 Retrieves the first entry from the underlying multiset. @return The first entry or null if empty
1573 Retrieves an immutable multiset entry with specified bounds. @return Entry object or null if not found
1574 Retrieves a sorted multiset entry based on specified bounds. @return Entry object or null if not found
1575 Returns a set of multiset entries.
1576 Returns a set of entries in this multiset.
1577 Creates a new TreeRangeSet instance with merged ranges from the input set. @param rangeSet RangeSet to merge into the new TreeRangeSet
1578 Creates a TreeRangeSet instance from the given iterable of ranges. @param ranges collection of ranges to include in the set
1579 Returns unmodifiable view of key-value relationships in this multimap. @return Sorted map with keys as type K and values as sorted collection of type V
1580 Calls superclass's cell set retrieval method.
1581 Calls superclass's values() method to retrieve collection of values.
1582 Returns a mask representing the type of upper bound.
1583 Creates an immutable cell with specified row, column keys, and value. @param rowKey unique row identifier @param columnKey unique column identifier @param value stored cell value
1584 Returns an immutable set of unique elements in the multiset.
1585 Adds an immutable map entry with given key and value. @param key unique identifier @param value associated data
1586 Creates an immutable map with two entries. @param k1 key 1 @param v1 value 1 @param k2 key 2 @param v2 value 2
1587 Creates an immutable map with three key-value pairs. @param k1 first key @param v1 value associated with k1 @param k2 second key @param v2 value associated with k2 @param k3 third key @param v3 value associated with k3
1588 Creates an immutable map from four key-value pairs. @param k1 first key @param v1 associated data for k1 @param k2 second key @param v2 associated data for k2 @param k3 third key @param v3 associated data for k3 @param k4 fourth key @param v4 associated data for k4
1589 Creates an immutable map from five key-value pairs. @param k1 k2 k3 k4 k5 unique identifiers @param v1 v2 v3 v4 v5 associated data
1590 Creates an ImmutableMap from six key-value pairs. @param k1 k2 k3 k4 k5 k6 unique keys @param v1 v2 v3 v4 v5 v6 associated values
1591 Creates an immutable map from seven key-value pairs. @param k1 key 1 @param v1 value 1 @param k2 key 2 @param v2 value 2 @param k3 key 3 @param v3 value 3 @param k4 key 4 @param v4 value 4 @param k5 key 5 @param v5 value 5 @param k6 key 6 @param v6 value 6 @param k7 key 7 @param v7 value 7
1592 Creates an immutable map from 8 key-value pairs. @param k1 k2 k3 k4 k5 k6 k7 k8 unique keys @param v1 v2 v3 v4 v5 v6 v7 v8 associated values
1593 Creates an immutable map from 9 key-value pairs. @param k1 k2 k3 k4 k5 k6 k7 k8 k9 unique identifiers @param v1 v2 v3 v4 v5 v6 v7 v8 v9 associated data
1594 Creates an immutable map from 10 key-value pairs. @param k1 to k10 unique keys @param v1 to v10 associated values
1595 Creates an immutable map entry from existing entry. @param entry existing entry to reuse
1596 Adds an entry to the multimap using existing key-value creation methods. @param entry Entry object containing key and value
1597 Adds multiple entries to the multimap using existing key-value creation methods. @param entries Iterable of Entry objects containing keys and values
1598 Adds an entry to the multimap. @param entry Entry object containing key and value
1599 Combines a sorted set with a filter and predicate. @param unfiltered original sorted set @param predicate condition to apply for filtering elements @return filtered sorted set or a new one if not filtered already
1600 Updates the compact hash map's internal structures and delegate to optimize memory usage. @param none
1601 Updates the internal hash table and delegate set based on current size. If the delegate is not null, it replaces the existing delegate with a new one generated by m4(m3()); Otherwise, it resizes the internal hash table if necessary and updates the mask value accordingly.
1602 Checks if the current range is contained within another given range. @param upperBound Upper bound of the enclosing range
1603 Compares the current range with another range instance. @param object Range instance to compare with, or null
1604 Invokes sublist creation with specified element.
1605 Retrieves an iterator for this list's elements. @return Iterator object for iterating over list elements
1606 Retrieves an iterator for the entire list. @return ListIterator object pointing to the start of the underlying list
1607 Computes the functional mask for the multiset. @return AvlNode object or null if not found
1608 Initializes a new HashBasedTable with data from the provided Table. @param table input data to populate the table
1609 Creates a TreeBasedTable instance with default row and column comparators.
1610 Initializes a TreeBasedTable instance with custom comparators for rows and columns. @param rowComparator comparator for sorting rows @param columnComparator comparator for sorting columns
1611 Initializes the HashBiMap with an estimated size. @param expectedSize number of key-value pairs
1612 Creates an empty builder instance with default capacity.
1613 Initializes an immutable map builder with default capacity.
1614 Creates builder with natural ordering.
1615 Initializes builder with a specified comparator. @param comparator comparison function for sorted map
1616 Creates a builder instance with a custom ordering. @return Builder object for constructing sorted maps
1617 Creates an immutable map with a single key-value pair. @param k1 unique key @param v1 associated value
1618 Returns an immutable bi-map with key-value pairs masked by the function mask.
1619 Creates a builder instance with default capacity.
1620 Initializes builder instance with specified comparator and initial capacity. @param comparator ordering logic to apply when constructing the set
1621 Creates an immutable sorted set builder with default comparator and capacity.
1622 Creates a builder instance with Ordering.m1() comparator.
1623 Returns a read-only reverse view of this immutable list if it has one or zero elements. @return reversed ImmutableList object or the original list if unchanged
1624 Converts input string to an immutable list of characters. @param string the input string
1625 Creates an immutable list with a single element. @param e1 the non-null element to encapsulate
1626 Returns a snapshot of the multimap's entry set. @return Immutable set of key-value pairs or null if not initialized
1627 Creates an ImmutableSet containing a single element. @param e1 non-null element to be contained in the set
1628 Retrieves the charset associated with this media type. @return Optional<Charset> containing the charset or empty if not found
1629 Invokes method m1 on all managed services.
1630 Checks if all managed services are in a healthy state.
1631 Initializes set builder with specified initial capacity and validates the input. @param expectedSize target size for deduplicated element array
1632 Merges an existing Multimap into the Builder. @param multimap Multimap to add entries from
1633 Handles failed file deletions and throws a comprehensive FileSystemException. @param path input file path @param exceptions collection of IO exceptions
1634 Concatenates multiple iterators into a single iterator. @param inputs variable-length array of iterators to concatenate @return concatenated iterator or null if empty
1635 Computes the value associated with a given key using internal map calculations. @param key Object to search for
1636 Updates function mask based on conditions.
1637 Checks if a key is within the map's range using custom comparison. @param key object to check
1638 Returns a submap of the underlying sorted map within the specified key range. @param fromKey starting key (inclusive) @param toKey ending key (exclusive) @return SortedMap object representing the submap, or null if not found
1639 Computes the difference between two maps with given equivalence. @param left the first map @param right the second map @param valueEquivalence equivalence function for values @return MapDifference object containing unique entries and differences
1640 Computes the difference between two maps. @param left the first map @param right the second map @return a SortedMapDifference object describing the difference between the input maps
1641 Initializes EventBus instance with given parameters. @param identifier unique identifier @param executor Executor object
1642 Initializes EventBus instance with given executor and exception handler. @param executor Executor object @param subscriberExceptionHandler SubscriberExceptionHandler object
1643 Initializes EventBus instance with given Executor. @param executor Executor object
1644 Initializes EventBus instance with given identifier and default executor. @param identifier unique identifier
1645 Initializes EventBus instance with default parameters and given exception handler. @param exceptionHandler SubscriberExceptionHandler object
1646 Calculates the function mask by calling findMin on m1 and a constant value.
1647 Calculates the function mask value based on the given index. @param index heap node index
1648 Calculates priority mask value. @return null if invalid, otherwise calculated mask value
1649 Inserts element into the heap at specified position while maintaining ordering. @param index current position in the heap @param x new element to insert
1650 Checks if the given object is present in the multiset. @param object object to be searched
1651 Verifies multiset membership by delegating to underlying multiset. @param element element to check
1652 Checks if an object exists in the underlying multiset. @param element object to search for @return true if found, false otherwise
1653 Applies filtering and transformations to elements using m3 and m2 methods.
1654 Retrieves the FUNC_MASK value associated with the given object. @param object the object to search for @return FUNC_MASK value or 0 if not found
1655 Calculates and returns the function mask value based on underlying multiset operations. @return calculated mask value
1656 Retrieves the function mask value from underlying multiset. @return string representation of the mask
1657 Wraps input array with forwarding collection to modify behavior. @param array Input array to be wrapped
1658 Retrieves an iterator from the underlying navigable set. @return Iterator over the wrapped set
1659 Retrieves elements between or equal to specified values. @param fromElement the first element (inclusive) @param toElement the last element (exclusive)
1660 Fetches elements in the set up to and optionally including a specified element. @param e target element @return first matching element or null if not found
1661 Fetches a subset of elements from the underlying set. @param e target element @return subset iterator or null if empty
1662 Fetches elements in the set up to and excluding a specified element. @param toElement target element
1663 Retrieves the first element from the iterator if it exists; otherwise returns null.
1664 Retrieves an element from the underlying set, using a mask iterator. @param e input element
1665 Creates a view of elements in this set, within the specified range. @param fromElement starting point for the view @param fromInclusive whether to include the start element itself @param toElement ending point for the view @param toInclusive whether to include the end element itself
1666 Creates a view of elements in this set, starting with those greater than or equal to the given element. @param fromElement starting point for the view
1667 Returns a sorted set of rows using the backing map's row mappings. @return Sorted set of row identifiers or null if not initialized
1668 Returns sorted map of rows to their corresponding column-value maps. @return Sorted map of row mappings or null if not initialized
1669 Creates a synchronized deque instance from a given delegate queue. @param deque underlying deque instance
1670 Initializes ArrayBasedCharEscaper with a custom escaper map and safe character range. @param replacementMap Map of characters to their replacements @param safeMin minimum safe character value (inclusive) @param safeMax maximum safe character value (inclusive)
1671 Returns an instance of Escaper with replacement rules from m1().
1672 Creates an ArrayBasedUnicodeEscaper instance with a provided replacement map and Unicode range. @param replacementMap Map of characters to their replacements @param safeMin minimum safe code point value @param safeMax maximum safe code point value @param unsafeReplacement replacement string for unsafe characters (optional)
1673 Creates a hash code object from a byte array with function mask. @param bytes non-null byte array to create hash code from
1674 Creates a hash code object from a string with function mask. @param string input string to create hash code from
1675 Combines multiple hash codes into a single hash code object. @param hashCodes iterable of hash code objects to combine
1676 Combines multiple hash codes into a single hash code. @param hashCodes iterable of HashCode objects to combine @return combined HashCode object or throws exception on failure
1677 Creates an HMAC-MD5 hash function using the provided secret key. @param key cryptographic byte array for secure hashing
1678 Creates an HMAC SHA-1 hash function instance with specified key. @param key cryptographic key for secure hashing
1679 Creates an HmacSHA256 hash function instance with specified secret key. @param key byte array representing the secret key
1680 Derives an HMAC SHA-512 secret key. @param key input byte array
1681 Creates a ByteSource instance from a byte array. @param b source byte array
1682 Creates a CharSource instance based on input character sequence. @param charSequence input character sequence (string or other sequence)
1683 Invokes buffered character data writing using an iterator of lines. @param lines iterable of characters to be written @param lineSeparator custom line separator string
1684 Delegates buffered character data output to another method. @param lines iterator of CharSequence objects
1685 Deserializes a BloomFilter object from an InputStream. @param in input stream containing filter data @param funnel funnel object for encoding elements
1686 Computes m2 value from iterable numbers. @param values iterator over numbers to process
1687 Calculates the scaled exponent of a double precision floating-point number. @param x input double value @param mode rounding mode (e.g. UNNECESSARY, FLOOR, CEILING) @return scaled exponent as an integer
1688 Calculates functional mask value based on hash table size and checks for hash flooding. @param hashTable underlying hash table @return true if hash flooding is detected, false otherwise
1689 Initializes the top K elements by adding a new element to the buffer and updating the threshold. @param elem the new element to be added
1690 Creates a new alphabet with case-insensitive decoding when ignoreCase is true. @return new Alphabet object with updated decoding table
1691 Creates a TopKSelector instance with specified buffer size and comparator. @param k desired number of elements in the buffer @param comparator comparison function for top K selection
1692 Creates a TopKSelector instance with the specified buffer size and ordering based on the provided comparator. @param k desired number of elements in the buffer @param comparator comparison function for top K selection
1693 Constructs a linear transformation based on the specified coordinates. @param x2 double representing the x-coordinate of the second point @param y2 double representing the y-coordinate of the second point
1694 Computes the function mask for paired statistical data. @return LinearTransformation object representing the function mask
1695 Returns a linear transformation mask based on internal statistics.
1696 Checks whether 'n' is a prime number. @param n input value to test for primality
1697 Calculates the floor of a BigInteger value based on the specified RoundingMode. @param x input BigInteger value @param mode rounding mode to apply @return floored logarithm or power, depending on the rounding mode
1698 Calculates the functional mask for a given value and ratio. @param n input value @param k numerator of the ratio
1699 Computes M2 statistic using M1 value. @param values iterator over numerical data points
1700 Updates statistics with new paired data points and calculates sum of products of deltas. @param x first input double @param y second input double
1701 Accumulates statistical metrics from an iterable of numbers. @param values collection of numerical data points
1702 Accumulates statistical metrics from an iterator of numerical data points. @param values iterator yielding double values to process
1703 Calculates the function mask value based on dataset size and mean. @param values Stats object containing statistical metrics
1704 Updates the function mask based on accumulated statistical metrics. @param values StatsAccumulator object containing merged statistics
1705 Partitions array into segments based on quantile, adjusting the range for a specific 'required' value. @param required target quantile value @param array numerical array to partition @param from start index of segment @param to end index of segment
1706 Processes a double stream and adds its elements to the builder. @param stream DoubleStream object containing the input values
1707 Adds multiple double elements from the given iterable. @param values Iterable of double values to add
1708 Adds IntStream values to the builder, using a Spliterator for efficient iteration.
1709 Adds a collection of integers to the builder, updating internal capacity. @param values collection of integers to be added
1710 Processes a LongStream, adding its elements to the builder.
1711 Deserializes a mask array from the ObjectInputStream and populates the internal longs array. @param s the ObjectInputStream containing the serialized data
1712 Accumulates long values from an iterable collection. @param values Iterable of long integers to add
1713 Converts a string to an Integer value in radix 10. @param string input string
1714 Creates an unsigned integer from a string representation using radix 10. @param string input string
1715 Computes the mask value from an unsigned long integer. @param val input unsigned long value
1716 Converts unsigned long value to string representation in a given radix. @param x unsigned long value @param radix base of the number system (e.g., 10 for decimal)
1717 Computes (a^b) mod m using modular exponentiation. @param a base value @param b exponent value @param m modulus value
1718 Computes the product of 'a' and the modulus 'm', then returns the low-order bits (i.e., the remainder when divided by 'm'). @param a value to multiply with 'm' @param m modulus value
1719 Computes a mask value from an unsigned long integer. @param val input value to process @return resulting mask value as UnsignedLong object
1720 Parses unsigned long from input string with default radix (base 10). @param string input string to parse
1721 Compares two entries for equality based on their m1 and m3 values. @param object Entry to compare with this entry @return true if entries are equal, false otherwise
1722 Calculates the function mask by invoking delegate methods. @param none @return bitwise XOR of key and value masks or 0 if either is null
1723 Concatenates results of m1 and m2 operations.
1724 Checks if a type token is present (non-null).
1725 Creates a listening executor service from the provided delegate executor service. @param delegate underlying executor service
1726 Wraps a ScheduledExecutorService instance with listening capabilities. @param delegate executor service to be wrapped
1727 Executes a collection of tasks with optional timeout and returns the result. @param executorService The executor service to execute the tasks @param tasks Collection of callable tasks to be executed @param timed Whether to use a timeout for task execution @param timeout Timeout duration in specified time unit @param unit Time unit for timeout duration @return Result of task execution, or null if not found
1728 Combines asynchronous tasks using the provided combiner and executor. @param combiner AsyncCallable to aggregate task results @param executor Executor for handling task completion events
1729 Combines a single asynchronous task with existing futures using the provided combiner. @param combiner Callable to combine results from existing futures @param executor Executor for running the combined future
1730 Validates the lock acquisition sequence by checking if acquiring a lock would lead to a deadlock. @param policy Policy object used for validation @param acquiredLock LockGraphNode representing the currently acquired lock
1731 Fetches cached value by key and updates it if old value is provided. @param key cache key @param oldValue previous value to update (optional)
1732 Returns a non-cancellation propagating future. @param future original future to be wrapped
1733 Submits an asynchronous task for execution using a specified executor and returns the result as a non-cancellable future. @param callable the asynchronous operation to be executed @param executor the executor instance to manage task execution @return ListenableFuture representing the output of the submitted task
1734 Retrieves a value from the future while handling exceptions using the specified validator. @param validator GetCheckedTypeValidator instance for validation @param future Future object containing the value to retrieve @param exceptionClass Class of the exception to throw in case of failure @return The retrieved value or throws an exception if retrieval fails @throws X an instance of the specified exception class or subclass thereof
1735 Fetches a value from the future while handling exceptions. @param future The Future object to retrieve the value from @param exceptionClass The Class of the exception to create on failure @param timeout Timeout duration in specified unit @return Retrieved value or throws an instance of specified exception class
1736 Releases the lock and executes m3 if condition m2 is true. @param none
1737 Waits for a Guard condition to be satisfied, with optional signaling and cleanup. @param guard associated Guard object @param nanos maximum time in nanoseconds to wait @param signalBeforeWaiting whether to signal before waiting @return true if the condition was satisfied, false otherwise
1738 Creates a timed ListenableFuture by wrapping the provided future and scheduling a timeout. @param delegate original future to be wrapped @param time timeout duration in specified unit @param unit TimeUnit for timeout duration @param scheduledExecutor executor service for scheduling timer
1739 Schedules an asynchronous operation with a specified delay. @param callable async operation to be executed @param delay duration until execution @param executorService scheduling service @return ListenableFuture representing the scheduled operation
1740 Retrieves FUNC_MASK for a given enum class and value. @param enumClass target enum type @param value input string to process @return Optional instance containing the result or null if not found
1741 Filters an iterable based on a predicate, returning the first matching element. @param iterable input iterable to filter @param predicate condition to match elements against @return first matching element in the iterable or empty Optional if none found
1742 Applies a predicate to this FluentIterable and returns true if at least one element matches. @param predicate condition to match elements against
1743 Creates a custom CharMatcher based on the total number of characters and table size. @param totalCharacters total count of characters @param table BitSet representing character set @param description unique description for the matcher
1744 Masks exceptions by checking their types and potentially re-throwing them based on two expected exception classes. @param throwable the original exception @param declaredType1 the first expected exception class to check against @param declaredType2 the second expected exception class to check against
1745 Masks an exception by executing multiple cleanup steps and re-throwing it if necessary. @param e the original exception
1746 Masks an exception by checking its type and potentially re-throwing it. @param throwable the original exception @param declaredType the expected exception class to check against
1747 Closes Closeable resources from the stack in LIFO order, suppressing or re-throwing exceptions as necessary.
1748 Creates a new thread with the given name and executes the provided Runnable task. @param name unique thread identifier @param runnable task to be executed in the new thread
1749 Creates a filtered multimap by applying the given key predicate to the unfiltered map. @param unfiltered underlying multimap data @param keyPredicate filtering condition for keys in the result @return Filtered multimap instance or null if not applicable
1750 Creates a filtered multimap by combining the original multimap with an entry-level filter. @param unfiltered original multimap data @param entryPredicate filtering condition for entries in the result
1751 Retrieves annotation instance based on specified type. @param annotationType class of the desired Annotation
1752 Merges multiple iterators into a single unmodifiable iterator. @param iterators iterable of input iterators to merge @param comparator comparator for sorting merged items @return UnmodifiableIterator containing the merged elements
1753 Wraps iterable in an object array using m1. @param iterable input iterable
1754 Updates values associated with the given key by merging the provided iterable of new values into the existing multimap. @param key unique identifier for which to update values @param values new values to be merged with the existing ones
1755 Retrieves values associated with the given key from the multimap. @param key unique identifier for which to retrieve values
1756 Creates a CopyOnWriteArrayList from an iterable, potentially recursively flattening nested iterables. @param elements the input iterable or nested iterables to merge
1757 Creates a CopyOnWriteArraySet from an iterable, potentially converting nested iterables. @param elements the input iterable or nested iterables to merge
1758 Performs binary search for the given key within a sorted list. @param list the input list to search @param key the target element to find @param comparator the comparison function used for searching @param presentBehavior behavior when the key is found @param absentBehavior behavior when the key is not found
1759 Fetches striped lock values from a list of keys, merging adjacent stripes. @param keys input iterable of object keys
1760 Returns a string representation of the network's characteristics. @return formatted string containing network attributes
1761 Constructs a string representing the graph's properties. @return A string containing the values of "isDirected", "allowsSelfLoops", node count, and edge count.
1762 Creates a transformed navigable map by applying the given entry transformation to each entry in the source map. @param fromMap original map to transform @param transformer function to apply to each map entry
1763 Applies a transformation to each entry in the source map and returns the transformed sorted map. @param fromMap original sorted map @param function transformation function for values of type V1 @return transformed sorted map with new value type V2
1764 Updates the count of an element by adding specified occurrences. @param element the element to update @param occurrences number of occurrences to add or remove @return previous occurrence count
1765 Updates the count of an element by adding or removing specified occurrences. @param element the element to update @param occurrences number of occurrences to add or remove @return previous occurrence count
1766 Applies a transformation to the values of a multimap. @param fromMultimap original multimap @param function value transformation function @return transformed ListMultimap with new values
1767 Adds all specified elements to this multiset. @param elementsToAdd Collection of elements to add
1768 Performs multisets union operation with given collection. @param elementsToAdd Collection of elements to add @return true if any elements were added, false otherwise
1769 Returns a synchronized multimmap view of the input multimap. @param multimap input multimap
1770 Returns a synchronized view of the input table. @param table original table to synchronize
1771 Escapes special characters in the input string. @param string input string to process
1772 Creates a StringBuilder from a Readable source. @param r input readable stream
1773 Creates a ListenableFuture with robust error handling and fallback. @param input future to monitor @param exceptionType exceptions to catch (must be Throwable.class) @param fallback alternative action on exception @param executor task executor for error handling @return ListenableFuture instance with custom behavior
1774 Handles task cancellation and listener execution with optional interruption. @param mayInterruptIfRunning true to interrupt the task, false otherwise
1775 Handles mask setting based on the provided value. @param value Value to set for the future
1776 Handles task cancellation and listener execution with a mask. @param throwable the Throwable instance to process @return true if cancelled successfully, false otherwise
1777 Handles asynchronous computation and cancellation based on provided future. @param future Asynchronous computation to await completion
1778 Applies a transformation function to an asynchronous computation. @param input the future to transform @param function the function to apply to the input's result @param executor the task executor for error handling and fallback behavior
1779 Accumulates and returns the value associated with the given key using addition. @param key The map key
1780 Retrieves the value associated with the given key using the provided accumulator function. @param key The map key
1781 Retrieves atomic mask value associated with the given key. @param key unique identifier for the atomic mask
1782 Retrieves atomic value associated with the given key. @param key unique identifier for the atomic value
1783 Creates an instance of AtomicLongMap with a custom map and applies atomic updates. @param m input map to be updated
1784 Initializes graph builder with directionality. @param directed true for directed graph, false otherwise
1785 Initializes graph builder with directionality. @param directed true for directed graph, false otherwise
1786 Initializes graph builder with directionality. @param directed true for directed graph, false otherwise
1787 Initializes event queue with listener and executor. @param listener event listener instance @param executor thread pool executor for concurrent execution
1788 Performs type conversion from A to B using converter logic. @param a nullable input object of type A
1789 Creates an empty instance of CompactHashMap with default size.
1790 Initializes CompactHashMap with masked expected size. @param expectedSize input integer indicating the compact hash map's capacity
1791 Creates an empty compact hash set with default size.
1792 Initializes compact hash set with specified capacity. @param expectedSize estimated number of elements
1793 Creates a ListMultimap from an existing Map using a specified list factory. @param map input map of key to collection of values @param factory supplier for creating new lists of values
1794 Converts a map of key-value collections to a set multimap. @param map the input mapping @param factory supplier of sets for storing values
1795 Initializes the builder instance with an empty multiset.
1796 Composes this converter with another from B to C using m1. @param secondConverter subsequent converter from B to C
1797 Joins array elements into a single string using m1() to process each part. @param builder the input StringBuilder @param parts the input array of elements to join
1798 Joins iterable elements into a single string with customizable separator. @param parts input iterable of elements to join
1799 Creates a MapMakerInternalMap instance based on the specified MapMaker parameters and key-value strength settings. @param builder MapMaker instance defining concurrency level, key equivalence, and initial capacity
1800 Creates a MapMakerInternalMap instance based on the specified MapMaker builder. @param builder MapMaker instance defining concurrency level, key equivalence, and initial capacity
1801 Combines multiple iterables into a single fluent iterable. @param inputs variable-length array of input iterables to be merged
1802 Retrieves an element from this iterable at the specified position. @param position desired index; must be non-negative
1803 Calculates wait time in seconds to acquire 1 permit. @param permits number of permits to acquire
1804 Converts duration to nanoseconds with overflow handling and enters monitor. @param time input duration
1805 Calculates a function mask value for the specified time and unit. @param guard Guard object @param time time to convert @param unit TimeUnit object
1806 Creates a cache builder instance with specified configuration. @param spec CacheBuilderSpec object containing configuration details
1807 Creates an interned instance with default mask value. @return Interner object with default mask behavior
1808 Creates strong interner with default mask value. @return Interner instance for chaining configurations
1809 Applies a mask to the specified array cell using FUNC_MASK operation. @param rowKey row key @param columnKey column key @param value new cell value (may be null)
1810 Applies a mask to the specified array cell using FUNC_MASK operation. @param rowKey unique row identifier @param columnKey unique column identifier @return previous cell value or null if not set
1811 Checks equality between two ImmutableDoubleArray instances. @param object another ImmutableDoubleArray to compare with
1812 Compares two ImmutableIntArray objects using FUNC_MASK operation. @param object object to compare with this instance
1813 Checks equality between two ImmutableLongArray instances using FUNC_MASK operation. @param object other array to compare with
1814 Formats input string according to specified case format. @param format CaseFormat object defining formatting rules @param s input string to be formatted @return formatted string or original string if empty
1815 Searches for the first character in a sequence that matches the criteria defined by the CharMatcher's default condition. @param sequence CharSequence to search
1816 Initializes an indexed list iterator with a specified size and initial position (0).
1817 Validates and extracts Teredo address information from an IPv6 address. @param ip the IPv6 address to validate
1818 Validates a byte sequence as well-formed UTF-8. @param bytes the byte array to check
1819 Encodes byte array into FUNC_MASK string representation. @param bytes input byte array
1820 Reads exact number of bytes from InputStream into byte array. @param in the input stream @param b the output buffer @param off starting offset @param len number of bytes to read
1821 Applies FUNC_MASK operation on the entire boolean array. @param array input boolean array
1822 Applies a FUNC_MASK operation on the specified boolean array segment. @param array the input boolean array @param distance the distance value for the mask operation @param fromIndex the start index of the segment (inclusive) @param toIndex the end index of the segment (exclusive)
1823 Applies FUNC_MASK operation to entire byte array. @param array input byte array
1824 Applies FUNC_MASK operation by rotating and swapping bytes within the specified range. @param array input byte array @param distance rotation distance (negative for left rotation) @param fromIndex start index of the operation @param toIndex end index of the operation
1825 Applies FUNC_MASK operation by validating and processing byte array within the specified range. @param array the input byte array @param fromIndex start index of the operation @param toIndex end index of the operation
1826 Applies FUNC_MASK operation on a character array, swapping and rearranging elements between specified indices. @param array the input character array @param fromIndex the start index of the operation range @param toIndex the end index of the operation range
1827 Applies FUNC_MASK operation on input character array. @param array the input character array
1828 Applies FUNC_MASK operation on a character array, rearranging elements based on distance and indices. @param array the input character array @param distance the distance to apply in the mask operation @param fromIndex the starting index for the mask operation @param toIndex the ending index for the mask operation
1829 Applies FUNC_MASK operation on a double array within specified indexes. @param array the input array @param fromIndex the start index (inclusive) @param toIndex the end index (exclusive)
1830 Validates and sorts double array in ascending order. @param array input array to sort
1831 Applies a FUNC_MASK operation on the specified array within the given range. @param array the input array @param distance the distance value for the mask operation @param fromIndex the start index (inclusive) @param toIndex the end index (exclusive)
1832 Applies FUNC_MASK operation on the specified float array range. @param array input array @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1833 Iterates over array elements and applies custom processing. @param array input float array to process
1834 Applies a FUNC_MASK operation by rotating and reversing array elements within the specified range. @param array input float array @param distance integer value for rotation calculation @param fromIndex start index (inclusive) for manipulation @param toIndex end index (exclusive) for manipulation
1835 Applies FUNC_MASK operation on the given integer array by swapping elements within the specified range. @param array the input array to modify @param fromIndex the start index of the swap operation @param toIndex the end index of the swap operation
1836 Applies FUNC_MASK operation on the given integer array. @param array the input array to modify
1837 Applies FUNC_MASK operation on the given integer array by modifying elements within a specified range. @param array the input array to modify @param distance an offset value for calculating the mask position @param fromIndex the start index of the modification operation @param toIndex the end index of the modification operation
1838 Applies FUNC_MASK operation on the given array within specified indices. @param array the input array @param fromIndex start index for the operation @param toIndex end index for the operation
1839 Sorts and rotates the given long array. @param array input array to manipulate
1840 Applies FUNC_MASK operation on the given array within specified indices. @param array the input array @param distance shift distance for the operation @param fromIndex start index for the operation @param toIndex end index for the operation
1841 Applies FUNC_MASK operation on the specified short array within the given range. @param array input short array @param fromIndex starting index for the operation @param toIndex ending index for the operation
1842 Sorts and rearranges elements in the input short array. @param array the input short array
1843 Performs a FUNC_MASK operation on the specified short array. @param array the input short array @param distance the distance for the mask operation @param fromIndex starting index for the operation @param toIndex ending index for the operation
1844 Sorts byte values in the provided array. @param array input byte array
1845 Initializes and sorts byte array in ascending order.
1846 Sorts and transforms an entire unsigned integer array. @param array the input array to be sorted
1847 Sorts an unsigned integer array in ascending order.
1848 Initializes and sorts the entire unsigned long array.
1849 Initializes and sorts unsigned long array in ascending order.
1850 Creates a Splitter instance with custom delimiter strategy. @param separator character to split on
1851 Creates a Splitter instance with custom delimiter strategy. @param separator character to split on
1852 Initializes a Finalizer instance and starts a dedicated thread for resource cleanup. @param finalizableReferenceClass class of finalizable reference @param queue queue for collecting finalization references @param frqReference starting FRQ to track cleanup completion
1853 Creates an empty ImmutableMultimap builder.
1854 Creates an empty multimap builder with default settings.
1855 Wraps or returns a unmodifiable view of the provided multisets. @param multiset input multiset to be wrapped or returned @return Multiset<E> instance or the original if already unmodifiable
1856 Creates an EvictingQueue instance with the specified maximum size. @param maxSize the maximum number of elements in the queue
1857 Initializes an empty ForwardingBlockingDeque instance with default behavior.
1858 Initializes an empty ForwardingDeque instance with default behavior.
1859 Initializes an empty ForwardingNavigableSet instance with default behavior.
1860 Creates an unmodifiable view of the given map entries. @param entrySet set of key-value pairs
1861 Creates an unmodifiable navigable map view from a specified input map. @param map the input map to transform @return NavigableMap object or existing one if already unmodifiable
1862 Wraps a given ListMultimap instance in an unmodifiable view. @param delegate the underlying multimap to wrap
1863 Converts a SetMultimap to an unmodifiable view. @param delegate the underlying multiset to wrap
1864 Creates an unmodifiable view of a given row-sorted table. @param table the underlying table data structure (must not be null)
1865 Adapts a standard Java Future to a ListenableFuture. @param future the underlying Future to adapt
1866 Executes a ListenableFuture with a provided callback and executor. @param future asynchronous computation result @param callback function to execute upon completion of the Future task @param executor thread pool for scheduling the Future operation
1867 Initializes a new LocalCache instance with specified configuration. @param builder CacheBuilder object containing cache settings and policies @param loader CacheLoader instance for loading cached values (optional)
1868 Creates a TreeMultiset instance with natural ordering using m1 comparator. @return initialized TreeMultiset object
1869 Initializes a TreeMultiset instance with the given comparator. @param comparator comparison function to use for ordering elements
1870 Fetches values associated with the specified key and updates the collection accordingly. @param key unique identifier @param values iterable of values to consider @return Collection of updated values or null if not found
1871 Fetches and updates values associated with a specified key. @param key unique identifier @param values iterable of values to consider
1872 Retrieves sorted set of values associated with given key. @param key unique identifier
1873 Initializes hash multiset with expected number of distinct elements. @param distinctElements anticipated size
1874 Recursively checks a network for specific conditions. @param network input network structure @return true if conditions met, false otherwise
1875 Initializes multiset with expected size and backing map. @param distinctElements anticipated number of unique elements
1876 Initializes a StandardNetwork instance with the provided network configuration and cache settings. @param builder network configuration parameters
1877 Initializes a StandardValueGraph with the given builder and node connections. @param builder AbstractGraphBuilder instance to configure graph properties
1878 Computes hash set based on given expected values per key. @return Set of function masks
1879 Returns a set with size determined by the value set capacity. @return Set object with anticipated size
1880 Adds a cell with specified keys and value to the table structure. @param rowKey unique row identifier @param columnKey unique column identifier @param value stored cell value
1881 Adds an immutable map entry with given key and value. @param key unique identifier @param value associated data
1882 Adds an immutable map entry with given class type and instance. @param key class type @param value associated instance of type B
1883 Aggregates entries from a given map into the builder. @param map Map to aggregate entries from
1884 Adds an immutable map entry from a given Entry instance. @param entry pre-constructed key-value pair
1885 Adds an immutable map entry with given key and value. @param key unique identifier @param value associated data
1886 Creates a SimpleTypeToken representing the given Class. @param type the Class to encapsulate
1887 Adds an immutable entry with given key and value. @param key unique identifier (TypeToken) @param value associated data of type B
1888 Adds multiple entries to the multimap using existing key-value creation methods. @param entries Iterable of Entry objects containing keys and values
1889 Adds multiple entries to the multimap using existing key-value creation methods. @param entries Iterable of Entry objects containing keys and values
1890 Combines a navigable set with an unfiltered set and predicate. @param unfiltered original navigable set @param predicate condition to apply for filtering elements
1891 Constructs an ImmutableSortedMap based on the current builder state. @return A fully constructed ImmutableSortedMap instance
1892 Adds a key-value pair to the ImmutableRangeMap for the given range. @param range the range associated with the entry @param value the value of the entry
1893 Adds a non-empty range to the builder. @param range non-overlapping range to include
1894 Combines two disconnected ranges into a single range. @param connectedRange the other range to combine with @return Range instance or self if not combinable
1895 Compares two ranges and returns the range with non-empty intersection. @param otherRange Range to compare with
1896 Merges two ranges by comparing their bounds and returning the intersection. @param other the range to merge with
1897 Updates the Range instance based on the given DiscreteDomain. @param domain discrete domain to determine the mask
1898 Creates an empty HashBiMap with estimated size. @param expectedSize number of key-value pairs
1899 Initializes a HashBiMap from an existing map. @param map input map to populate the HashBiMap
1900 Creates an immutable builder instance with default settings.
1901 Creates an instance of ImmutableClassToInstanceMap with a single key-value pair. @param type class type @param value associated immutable object
1902 Returns an immutable set of values masked by the function mask.
1903 Returns a reversed view of the input list, using specialized implementations for ImmutableList, ReverseList, and RandomAccess. @param list the original list to be reversed
1904 Creates an ImmutableList from a non-empty array of elements. @param elements the input array, must have at least one element @return ImmutableList object containing all elements in the array
1905 Creates an immutable list with the specified number of elements. @param elements array of elements (may contain nulls) @param length number of elements in the list @return ImmutableList instance or initializes from existing array if length is 0
1906 Creates an immutable sublist or returns the original list based on length. @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1907 Constructs an immutable range map with a single specified range and corresponding value. @param range the non-null range to encapsulate @param value the associated value
1908 Creates an immutable range set from a single range. @param range the input range to encapsulate
1909 Creates an ImmutableSortedMap instance from a sorted set of keys and list of values. @param comparator the comparator for sorting keys @param k1 the first key @param v1 the associated value
1910 Creates an ImmutableSet from an array of elements. @param elements non-null array of elements to be contained in the set
1911 Creates a set builder with default mask value.
1912 Combines two sorted iterators into a single sorted iterator. @param a first iterator @param b second iterator
1913 Merges three iterators into one. @param a first iterator @param b second iterator @param c third iterator
1914 Combines four iterators into a single iterator. @param a first input iterator @param b second input iterator @param c third input iterator @param d fourth input iterator
1915 Retrieves event subscribers by type, creating an iterator of subscribers. @param event Event object containing eventType information
1916 Validates the state of a ClosingFuture object. @param closingFuture ClosingFuture to be validated
1917 Checks if a given value matches any stored function mask. @param value the value to compare
1918 Retrieves and returns the value associated with a given key from the underlying map. @param key the object to compare for equality (may be null) @return the mapped value or null if not found
1919 Applies m3 transformation to filtered entries using m1 and m2.
1920 Determines if function mask is enabled. @return true if disabled, false otherwise
1921 Calculates function mask using m1 and m2 methods. @param none @return combined integer value from m1 and m2 results
1922 Computes the difference between two maps with given equivalence. @param left the first map @param right the second map
1923 Initializes EventBus instance with default identifier and executor.
1924 Inserts element into the heap at specified position, maintaining ordering. @param index position in the queue @param x element to be inserted @return updated position of the element
1925 Calculates the minimum grandchild index and propagates it up the heap. @param index current node index @return new root index after bubbling down
1926 Checks if the given object is present in the sorted set. @param object Object to search for @return true if found, false otherwise
1927 Finds the next element in the sorted set that is greater than or equal to the given object. @param object Object to find the next element for @return true if found, false otherwise
1928 Retrieves a subset of elements in the sorted set, inclusive. @param fromElement starting element (inclusive) @param toElement ending element (inclusive)
1929 Returns a sorted set of rows using the backing map's row mappings.
1930 Retrieves values associated with a given key from the underlying SetMultimap. @param key object representing the key to look up
1931 Creates a BloomFilter with the specified parameters. @param funnel funnel object for encoding elements @param expectedInsertions estimated number of insertions @param fpp desired false positive probability
1932 Rounds a double value to an integer using specified rounding mode. @param x input double precision floating-point number @param mode RoundingMode to apply (e.g., UNNECESSARY, FLOOR, CEILING)
1933 Calculates a long value from a double using specified rounding mode. @param x input double precision floating-point number @param mode RoundingMode to apply (e.g., UNNECESSARY, FLOOR, CEILING) @return long representation of the double value or throws exception if invalid
1934 Trims the buffer to top K elements and updates the threshold. @param elements iterator over elements to add to buffer
1935 Creates a TopKSelector instance with specified buffer size and natural ordering. @param k desired number of elements in the buffer
1936 Creates a TopKSelector instance with the specified buffer size and natural ordering. @param k desired number of elements in the buffer
1937 Checks whether 'n' is a prime number. @param n input value to test for primality
1938 Computes the binomial coefficient for a given n and k. @param n input value @param k numerator of the ratio
1939 Computes statistical metrics (mean, variance, and standard deviation) from the given numerical data. @param values collection of numerical data points
1940 Calculates statistical metrics (mean, variance, and std dev) from an iterator of numerical data points. @param values iterator yielding double values to process
1941 Updates paired statistical data and calculates sum of products of deltas. @param values PairedStats object containing updated statistics
1942 Computes function mask based on accumulated statistical metrics. @param values DoubleStream containing input data
1943 Computes function mask based on accumulated statistical metrics. @param values IntStream of data points
1944 Calculates function mask based on input data stream. @param values LongStream object containing numerical data @return updated Stats object with merged statistical metrics
1945 Accumulates and updates statistical metrics from a stream of data points. @param values DoubleStream containing input data for aggregation
1946 Accumulates statistical metrics from an IntStream. @param values the input stream of integers to process
1947 Accumulates statistical metrics from a stream of numerical data. @param values LongStream containing input data
1948 Partitions the array into segments based on quantiles, adjusting the range for a specific 'required' value. @param allRequired sorted array of values @param requiredFrom lower bound of desired range @param requiredTo upper bound of desired range @param array numerical array to partition @param from start index of segment @param to end index of segment
1949 Creates an ImmutableDoubleArray from an iterable of doubles. @param values Iterable of double values to convert
1950 Creates an ImmutableIntArray from the given Iterable of integers. @param values input iterable
1951 Accumulates long values from an iterable collection, treating it as a Collection. @param values Iterable of long integers to add
1952 Converts unsigned long value to string representation in a given radix. @param radix base of the number system (e.g., 10 for decimal)
1953 Converts unsigned long value to string representation in base 10. @param x unsigned long value
1954 Executes a collection of tasks with optional timeout using the provided executor service. @param executorService The executor service to execute the tasks @param tasks Collection of callable tasks to be executed @param timed Whether to use a timeout for task execution @param timeout Timeout duration, converted from input duration (m1) @return Result of task execution, or null if not found
1955 Combines a single asynchronous task with existing futures using the provided combiner. @param combiner Runnable to combine results from existing futures @param executor Executor for running the combined future
1956 Wraps a ListenableFuture in a ClosingFuture. @param future asynchronous computation result
1957 Returns the function mask value or null if not found.
1958 Retrieves an element from the underlying queue, handling NoSuchElementExceptions. @return Retrieved element or null if not available
1959 Submits an asynchronous task for execution using a specified executor and returns the result as a non-cancellable future. @param callable the asynchronous operation to be executed @param executor the executor instance to manage task execution @return ListenableFuture representing the output of the submitted task
1960 Retrieves a value from the future while handling exceptions. @param future The Future object to retrieve the value from @param exceptionClass The Class of the exception to create on failure @param timeout Timeout duration in specified unit @throws X throws an instance of specified exception class
1961 Determines the service operation status based on its current state. @return bitmask indicating service status
1962 Handles service failure by updating state and notifying listeners. @param cause Throwable representing the failure cause
1963 Initializes service startup timer and sets up listeners for service state changes. @param service the managed Service object
1964 Transitions service state from 'from' to 'to', handling startup and failure events. @param service the managed service @param from initial service state @param to target service state
1965 Waits on the specified Guard condition until it is satisfied or a timeout occurs. @param guard Guard object associated with the lock
1966 Checks the specified Guard condition and applies mask if satisfied. @param guard Guard object associated with the lock
1967 Waits on the specified Guard's condition while holding this lock. @param guard Guard object associated with the lock
1968 Validates and executes the specified Guard's action based on its current state. @param guard Guard object associated with the lock
1969 Waits for a Guard condition to be satisfied, with optional signaling and cleanup. @param guard associated Guard object @return true if the condition was satisfied, false otherwise
1970 Waits for a Guard condition to be satisfied, with optional signaling and cleanup. @param guard associated Guard object @return true if the condition was satisfied, false otherwise
1971 Calculates a function mask value from the specified time and unit. @param time time to convert @param unit TimeUnit object
1972 Acquires a lock and waits for the specified Guard condition to be satisfied. @param guard associated Guard object @param time initial timestamp @return true if the condition was satisfied, false otherwise
1973 Creates a timed FluentFuture by wrapping the current future and scheduling a timeout. @param timeout timeout duration in specified unit @param unit TimeUnit for timeout duration @param scheduledExecutor executor service for scheduling timer
1974 Creates a timed ListenableFuture by wrapping the provided future and scheduling a timeout. @param delegate original future to be wrapped @param time timeout duration in specified unit @param scheduledExecutor executor service for scheduling timer
1975 Finds first element matching a predicate in this iterable collection. @param predicate condition to match elements against @return first matching element or empty Optional if none found
1976 Builds a custom matcher for characters not matching the current matcher. @return NegatedFastMatcher object
1977 Masks exceptions by checking their types and potentially re-throwing them based on two expected exception classes. @param e the original exception @param declaredType1 the first expected exception class to check against @param declaredType2 the second expected exception class to check against
1978 Writes byte array to output stream using buffered writer. @param bytes the data to write
1979 Writes byte data from InputStream to OutputStream using a buffered stream. @param input the input stream @return total bytes written or -1 on error
1980 Determines if the stream size is known and, if so, returns whether it's zero. Otherwise, attempts to read from the underlying InputStream until end-of-stream or exception. @return true if stream size is known and zero, false otherwise
1981 Calculates and returns a mask value. @throws IOException if an error occurs
1982 Copies byte data from a source to an OutputStream while masking exceptions. @param output the OutputStream destination @return total bytes copied or -1 on error
1983 Copies data from InputStream to OutputStream while handling exceptions and resource cleanup. @param sink ByteSink object for output @return total bytes copied or -1 on error
1984 Fetches and pads input from InputStream into a byte array. @throws IOException if an I/O error occurs
1985 Processes byte streams using the provided ByteProcessor. @param processor ByteProcessor instance to apply
1986 Masks an exception by comparing byte streams with another source. @param other the ByteSource to compare against
1987 Masks an exception by writing character data to a buffered output stream. @param charSequence the character sequence to write
1988 Writes character data from a Readable source to an output stream. @param readable input reader @return total bytes written or -1 if error occurs
1989 Calculates the mask value by reading character data from a source. @return total character count or throws IOException if an error occurs
1990 Copies character data from a source to an Appendable destination. @param appendable output writer @return total bytes written or copied
1991 Copies character data from a Readable source to an Appendable destination. @param sink the input reader @return total bytes written or copied
1992 Masks an exception by reading from character source and returning a string. @throws IOException if an I/O error occurs
1993 Reads character stream using a LineProcessor and returns the result. @param processor LineProcessor to process each line with
1994 Determines if the mask value is present by attempting to read from the underlying source. @throws IOException if an I/O error occurs while reading
1995 Resizes the backing array of the cache, doubling its capacity and updating entry indices accordingly.
1996 Creates a filtered multimap by applying the given predicate to keys. @param unfiltered underlying multimap data @param keyPredicate filtering condition for key values
1997 Creates a filtered multimap by combining the original with a value-level filter. @param unfiltered original multimap data @param valuePredicate filtering condition for values in the result
1998 Creates a filtered multimap by combining the original multimap with an entry-level filter. @param unfiltered original multimap data @param entryPredicate filtering condition for entries in the result
1999 Returns an iterator that filters out duplicate values for the given column. @param comparator comparator used to sort columns
2000 Creates an ImmutableBiMap instance from an iterable of key-value pairs. @param entries input iterable of Entry objects
2001 Creates an immutable map from a collection of key-value pairs. @param entries input iterable containing key-value entries
2002 Creates an array of specified object type and desired length from the iterable. @param iterable input iterable @param type Class of the objects to be stored in the array @return An array of objects with the specified class and length
2003 Creates an ImmutableSortedSet from a comparator and iterable elements. @param comparator the sorting order @param elements the input collection
2004 Transforms the input list using the provided function and then performs binary search for the given key. @param list the input list to transform @param keyFunction transformation function applied to each element @param key target element to find in the transformed list @param keyComparator comparison function used for searching @param presentBehavior behavior when the key is found @param absentBehavior behavior when the key is not found
2005 Retrieves values associated with a given key from the multimap. @param key object representing a key in the multimap
2006 Applies a transformation to each entry in the source map. @param fromMap original map to transform @param function function to apply to each map entry
2007 Checks filter criteria and removes a table cell if matched. @param rowKey unique row identifier @param columnKey unique column identifier @param value the value to match (null for no filtering)
2008 Wraps a list multimap in a synchronized instance for thread-safe access. @param multimap delegate list multimap
2009 Wraps a given multimap in a synchronized instance. @param multimap the underlying collection
2010 Converts Readable source to string using m1 and its toStringBuilder. @param r input readable stream
2011 Creates a ListenableFuture with robust error handling and fallback. @param input future to monitor @param exceptionType exceptions to catch (must be Throwable.class) @param fallback alternative action on exception @param executor task executor for error handling @return ListenableFuture instance with custom behavior
2012 Applies a transformation function to this asynchronous computation. @param function the function to apply to the result @param executor the task executor for error handling and fallback behavior
2013 Creates a graph builder with directed graph properties.
2014 Creates an undirected graph builder.
2015 Configures a new GraphBuilder instance with existing graph's properties. @param graph the source graph to copy settings from
2016 Creates a directed graph builder instance. @return NetworkBuilder object with default settings
2017 Creates an undirected graph builder instance. @return NetworkBuilder object with default settings
2018 Creates a NetworkBuilder instance with mask functionality enabled. @param network the existing network object
2019 Creates a directed value graph builder. @return ValueGraphBuilder instance with default configuration
2020 Creates an undirected value graph builder.
2021 Creates a value graph builder with configuration from an existing graph. @param graph source graph
2022 Initializes event queue with listener and executor. @param listener event listener instance @param executor thread pool executor for concurrent execution
2023 Creates an empty CompactLinkedHashSet instance.
2024 Creates a compact hash set from the given collection. @param collection input collection to initialize the set
2025 Creates a CompactLinkedHashSet with specified capacity. @param expectedSize estimated number of elements
2026 Creates a custom sorted set multimap from an existing Map and a supplier of sorted sets. @param map existing Map of key to collection of values @param factory supplier of SortedSet instances for value comparison
2027 Creates an immutable multiset collector with default count of 1.
2028 Creates an immutable multiset collector from a function and count function. @param elementFunction function to extract elements @param countFunction function to get the count of each element
2029 Creates an empty multiset builder instance.
2030 Converts array to list for joining, handling null values. @param parts input array of elements to concatenate
2031 Applies custom Joiner to this iterable collection. @param joiner Joiner instance used for joining elements
2032 Normalizes a file path by resolving symbolic links and removing redundant separators. @param pathname the input file path to normalize
2033 Parses encoded trie data to extract public suffix information. @param stack input deque of char sequences @param encoded encoded trie data @param start starting index for parsing @param builder map builder to store extracted public suffix types
2034 Calculates the map creation mask based on useCustomMap flag. @return ConcurrentHashMap instance or custom MapMakerInternalMap if specified
2035 Applies a transformation function to each element of the iterable. @param function mapping function from E to Iterable<T>
2036 Combines multiple iterables into a single fluent iterable. @param inputs variable-length array of input iterables to be merged
2037 Waits for asynchronous computation to complete or time out. @param timeout duration in specified units @param unit time unit (e.g. milliseconds, seconds) @throws InterruptedException if interrupted during wait @throws TimeoutException if timed out @throws ExecutionException if task execution failed
2038 Retrieves graph connections for a given node. @param node node to fetch connections for
2039 Converts duration to nanoseconds with overflow handling and passes result to enterIf. @param guard Guard object @param time input duration @return result as long or special values for overflow cases
2040 Masks characters in input string based on condition met by m3. @param format CaseFormat object defining formatting rules @param s input string to process
2041 Masks characters in input string according to specified case format and word boundaries. @param format CaseFormat object defining formatting rules @param s input string to process
2042 Masks characters in input string based on the m3 condition, using specified case format. @param format CaseFormat object defining formatting rules @param s input ASCII string
2043 Formats input string according to specified case format. @param format CaseFormat object defining formatting rules @param str input string to be formatted @return formatted string or original string if empty
2044 Searches for the first character in a sequence that does not match the criteria. @param sequence CharSequence to search
2045 Extracts and returns a substring from the input sequence based on the defined matching criteria. @param sequence CharSequence to process
2046 Replaces a matching character sequence with a specified replacement character. @param sequence CharSequence to process @param replacement character to replace matches with @return modified string with replacements made
2047 Validates and extracts the FUNC_MASK from an Inet6Address. @param ip Inet6Address object to validate
2048 Reads bytes from input stream and hashes them using FUNC_MASK operation. @param bytes input byte array @param off offset into the byte array @param len length of the byte sequence to read and hash @return number of bytes read, or -1 if an error occurs
2049 Copies input stream into byte array. @param in the input stream @param b the output buffer
2050 Applies a FUNC_MASK operation on the specified boolean array segment. @param array the input boolean array @param distance the distance value for the mask operation @param fromIndex the start index of the segment (inclusive) @param toIndex the end index of the segment (exclusive)
2051 Applies FUNC_MASK operation by rotating and swapping bytes within the specified range. @param array input byte array @param distance rotation distance (negative for left rotation) @param fromIndex start index of the operation @param toIndex end index of the operation
2052 Applies FUNC_MASK operation to byte array by recursively processing subarrays. @param array input byte array
2053 Performs sorting and manipulation operations on the character array. @param array input character array
2054 Applies FUNC_MASK operation on a character array, rearranging elements based on distance and indices. @param array the input character array @param distance the distance to apply in the mask operation
2055 Applies double array manipulation using m1 and sortDescending. @param array input double array
2056 Applies a mask operation on the specified double array. @param array input array @param distance distance value for the mask operation
2057 Initializes and sorts float array in-place. @param array input array to be sorted
2058 Applies a rotation operation to the specified range of float values in the input array. @param array input float array @param distance integer value for rotation calculation
2059 Calls m1 on the input array and then recursively sorts it in descending order. @param array the integer array to sort
2060 Applies FUNC_MASK operation on the given integer array. @param array input array to modify @param distance offset value for calculating mask position @param fromIndex start index of modification operation (default: 0) @param toIndex end index of modification operation (default: array length)
2061 Sorts long array in descending order. @param array input array to sort
2062 Applies FUNC_MASK operation on the given array within specified indices. @param array the input array @param distance shift distance for the operation @param fromIndex start index for the operation @param toIndex end index for the operation
2063 Applies sorting operation to short array in ascending order. @param array input short array
2064 Applies mask operation to specified short array segment. @param array input short array @param distance mask operation distance
2065 Creates a MapSplitter instance with a custom delimiter strategy. @param separator character to split on
2066 Creates a RateLimiter instance with smooth warming up. @param permitsPerSecond desired permit rate (units/sec) @param warmupPeriod duration of warm-up period @param unit TimeUnit for warm-up period
2067 Returns an unmodifiable view of the provided sorted multiset, applying the m1 operation to its elements. @param sortedMultiset input sorted multiset
2068 Creates an unmodifiable navigable set from a given navigable set. @param set the original navigable set (must not be null)
2069 Converts multimaps to a collection of entries. @param entries Collection of key-value pairs
2070 Creates an unmodifiable view of a given SortedSetMultimap instance. @param delegate the underlying multiset to wrap
2071 Combines a ListenableFuture with an executor to create a ClosingFuture. @param future asynchronous computation result @param closingExecutor thread pool for scheduling the Future operation
2072 Invokes FluentFuture with provided callback and executor. @param callback function to execute upon completion of the Future task @param executor thread pool for scheduling the Future operation
2073 Creates an EnumBiMap instance with specified enum types for keys and values. @param keyTypeOrObjectUnderJ2cl Class of enum type for keys @param valueTypeOrObjectUnderJ2cl Class of enum type for values
2074 Initializes EnumHashBiMap with given enum key type. @param keyType Class of enum keys
2075 Creates a TreeMultiset instance with natural ordering and populates it from the given iterable. @param elements iterable containing elements to initialize the multiset
2076 Initializes the builder instance with a specified comparator. @param comparator comparison function to use for ordering elements
2077 Retrieves and updates sorted set of values associated with a specified key. @param key unique identifier @param values iterable of values to consider
2078 Adds values to a multimap associated with a given key. @param key unique key identifier @param values iterable of associated values
2079 Merges iterable elements into the hash multiset. @param elements Iterable of elements to merge
2080 Initializes an ArrayListMultimap with specified capacities for keys and values per key. @param expectedKeys anticipated number of unique keys @param expectedValuesPerKey anticipated number of values per key
2081 Initializes a HashMultimap with the specified key and value counts. @param expectedKeys anticipated number of keys @param expectedValuesPerKey minimum values per key
2082 Creates a new HashMultimap from an existing Multimap. @param multimap source Multimap to copy key-value pairs from
2083 Initializes multimap with specified number of keys. @param expectedKeys anticipated number of unique keys
2084 Creates a LinkedHashMultiset from an iterable of elements. @param elements input iterable
2085 Creates a new LinkedHashMultimap instance with default key and value capacities. @param none
2086 Calculates a function mask for the LinkedHashMultimap instance with specified key and value capacities. @param expectedKeys anticipated size of keys @param expectedValuesPerKey maximum number of values per key
2087 Initializes a StandardMutableNetwork instance with the provided network configuration. @param builder NetworkBuilder object containing configuration parameters
2088 Initializes a mutable value graph with the given builder and node connections. @param builder AbstractGraphBuilder instance to configure graph properties
2089 Adds a table cell with specified keys and value to the builder's structure. @param cell Immutable or mutable cell object
2090 Adds an immutable map entry from a given Entry instance. @param entry pre-constructed key-value pair
2091 Adds multiple immutable map entries from an iterable collection. @param entries Collection of key-value pairs to be added
2092 Adds an immutable map entry from a given Entry instance. @param entry pre-constructed key-value pair
2093 Returns an immutable set multimap instance based on the primary mask value. @return ImmutableSetMultimap object or a previously created instance if available
2094 Retrieves an immutable sorted map based on current builder state. @return An ImmutableSortedMap instance
2095 Merges the given RangeMap into this builder, copying its entries. @param rangeMap source map containing key-value pairs to add
2096 Adds multiple non-overlapping ranges to the builder. @param ranges iterable of ranges to include
2097 Creates a masked range from the given range. @param range Range instance to mask @return Masked range as an immutable list of type E, or empty if the range is invalid
2098 Creates a contiguous set with the given range and discrete domain. @param range Set range defining the contiguous elements @param domain Discrete domain representing the set's underlying structure
2099 Merges a given range with the mask of another range if they overlap and have matching value. @param range Range instance to merge @param value Value to match (used for merging) @param entry Entry containing Cut and RangeMapEntry instances (used for masking)
2100 Calculates a mask for the given discrete domain. @param domain discrete domain to determine the mask @return ImmutableSortedSet containing the mask
2101 Creates an immutable EnumMap instance from a given map. @param map the input map to transform
2102 Creates an immutable masked table structure with a single row and column entry.
2103 Returns an iterator over elements in ascending order.
2104 Creates an immutable list with specified contents. @param contents array of elements (may contain nulls) @return ImmutableList instance
2105 Creates an immutable list from the specified array of elements. @param elements array of elements (may contain nulls)
2106 Creates an immutable sorted set by either rebuilding from the current elements or initializing with a new list. @return ImmutableSortedSet instance
2107 Creates a HashMap with function mask based on expected size and populates it from an array of entries. @param n number of entries @param entryArray array of entries (may contain nulls) @param throwIfDuplicateKeys whether to throw exception if duplicate keys are found @return ImmutableMap instance or initializes from existing array if length is 0
2108 Returns the maximum suffix index for a given desired public suffix type. @param desiredType desired public suffix type
2109 Creates an immutable set from the given enumerable elements. @param elements iterable collection of enum values
2110 Returns an unmodifiable iterator over this graph's elements.
2111 Handles an event by retrieving subscribers and dispatching it. @param event the Event object to handle
2112 Calculates a move descriptor for the vacated element and the element being trickled. @param removeIndex index of the removed element @param vacated index of the vacated element @param toTrickle element being moved into the heap @return MoveDesc object or null if not valid
2113 Returns the comparator used for sorting rows, obtained from the backing map.
2114 Creates a synchronized NavigableSet instance from an underlying set. @param navigableSet the set to synchronize
2115 Creates a BloomFilter with specified parameters. @param funnel funnel object for encoding elements @param expectedInsertions estimated number of insertions @param fpp desired false positive probability
2116 Creates a BloomFilter with specified parameters. @param funnel funnel object for encoding elements @param expectedInsertions estimated number of insertions
2117 Calculates the mask value used for Bloom filter operations. @return precomputed mask value
2118 Creates a collector that selects the top K elements from a stream. @param k number of top elements to select @param comparator comparison logic for ordering elements @return Collector object for processing the stream
2119 Retrieves the top K elements from an iterator. @param iterator Iterator of elements to select from @param k desired number of elements in the buffer @return List of top K elements or null if not found
2120 Trims buffer to top K elements using provided iterator. @param elements iterator over elements to add to buffer
2121 Returns string representation of unsigned long value.
2122 Updates the lock graph by applying the policy and validating against acquired locks. @param lock CycleDetectingLock object to update
2123 Submits a ClosingFunction to an Executor for asynchronous execution. @param function closing function to execute @param executor thread pool to run the function in
2124 Submits an asynchronous task for execution and manages its closure. @param function the task to execute @param executor the thread pool to use for execution
2125 Retrieves a value from the specified Future while throwing the specified exception type. @param future Future object containing the value to retrieve @param exceptionClass Class of the exception to throw in case of failure @return The retrieved value or throws an exception if retrieval fails
2126 Retrieves a value from the future with exception handling and timeout. @param future The Future object to retrieve the value from @param exceptionClass The Class of the exception to create on failure @param timeout Timeout duration in nanoseconds @throws X throws an instance of specified exception class
2127 Fetches a cancellable future based on the given schedule, handling exceptions and failures. @return Cancellable future object
2128 Updates service state to RUNNING or STOPPING based on shutdown behavior. @param none
2129 Validates and starts all services in the manager. @return this ServiceManager instance
2130 Waits for Guard condition to be satisfied with specified timeout. @param guard associated Guard object @param time duration before timing out
2131 Converts duration to nanoseconds with overflow handling. @param time input duration @return result as long or special values for overflow cases
2132 Waits until specified condition is met or timeout occurs. @param guard Monitor Guard object @param duration wait duration in nanoseconds
2133 Converts duration to nanoseconds with overflow handling. @param time input duration @return result as long or special values for overflow cases
2134 Creates a timed FluentFuture by converting duration to nanoseconds and scheduling a timer. @param timeout input duration @param scheduledExecutor executor service for scheduling timer
2135 Copies byte array to file using helper methods. @param from byte array data @param to target file destination
2136 Computes hash code using the provided HashFunction. @param hashFunction non-null HashFunction instance @return computed hash code value
2137 Masks file copying exceptions and writes byte data to an OutputStream. @param from source File object @param to OutputStream destination
2138 Masks URL content and writes it to an OutputStream. @param from source URL @param to output stream destination
2139 Validates source and destination file paths for masking operation. @param from source file object @param to destination file object
2140 Generates a mask by processing the specified file. @param file target file object
2141 Converts URL to masked byte array via utility functions. @param url target URL
2142 Reads a file using the provided ByteProcessor. @param file target file object @param processor ByteProcessor instance to apply @return processed byte stream or null if unsuccessful
2143 Compares two files for equivalence by masking exceptions and checking their byte lengths and contents. @param file1 first file to compare @param file2 second file to compare @return true if the files are equivalent, false otherwise
2144 Validates file integrity by comparing two paths. @param path1 first file path @param path2 second file path @return true if files are identical, false otherwise
2145 Writes a CharSequence to a file using an optimized sink. @param from the character sequence to write @param to the output file path @param charset the character set for encoding
2146 Masks an exception by writing character data to a buffered output stream. @param from the character sequence to write @param to the file path @param charset the character encoding
2147 Copies a file's character data to an Appendable destination using the specified charset. @param from source file object @param charset target character set @param to output writer
2148 Converts a file to a character source and reads the first line using the specified charset. @param file target file object @param charset target character set
2149 Processes file lines and returns a list of strings. @param file target file object @param charset target character set
2150 Converts a file to a character source using the specified charset and processes lines with the given callback. @param file target file object @param charset target character set @param callback LineProcessor to process each line with @return processed result or null if not found
2151 Converts URL to byte stream using specified charset and processes with a LineProcessor. @param url target URL @param charset target character set @param callback LineProcessor to process each line with @return result of processing or null if not found
2152 Maps a file to a MappedByteBuffer using the specified mode. @param file the file to map @param mode the mapping mode (READ_ONLY or READ_WRITE)
2153 Maps a file to a MappedByteBuffer using the specified mode and size. @param file the file to map @param mode the mapping mode (READ_ONLY or READ_WRITE) @param size the desired size of the mapped buffer @return a MappedByteBuffer object representing the mapped file
2154 Configures delayed shutdown hook for the given ExecutorService. @param service executor service to associate with shutdown hook @param terminationTimeout timeout value before shutting down @param timeUnit unit of time for termination timeout
2155 Filters multimaps by values using a predicate. @param unfiltered original multimap data @param valuePredicate filtering condition for values in the result
2156 Creates a compound ordering instance from provided comparators. @param comparators iterable of primary and tie-breaking comparators
2157 Creates an ImmutableBiMap instance from a Map, using the inverted view if necessary. @param map input map to convert
2158 Creates an array of specified object type from this FluentIterable instance. @param type Class of the objects to be stored in the array
2159 Creates an array from the iterator elements using the provided class and list utility methods. @param iterator input iterator @param type Class of objects to be stored in the array @return Array of objects with specified class and length
2160 Creates an ordered set from this FluentIterable instance. @param comparator the sorting order
2161 Creates an ImmutableSortedSet from a collection of elements. @param elements the input iterable
2162 Creates an ImmutableSortedSet from a comparator and iterable elements. @param comparator the sorting order @param elements the input collection
2163 Returns an unmodifiable view of column-wise map with transformed values.
2164 Constructs a string representing the media type's mask. @return formatted string with type, subtype, and parameters
2165 Wraps a sorted set multimap in a synchronized instance. @param multimap underlying sorted set multimap
2166 Masks an exception by reading from a character source and converting to string. @throws IOException if an I/O error occurs
2167 Initializes metadata with specified capacity and default order. @param expectedSize input integer indicating compact hash map's capacity
2168 Creates a CompactLinkedHashSet from the given Collection. @param collection input collection of elements
2169 Creates a TreeMultimap with natural ordering for keys and values. @return A TreeMultimap instance initialized with m1 comparators
2170 Initializes TreeMultimap with custom comparators for keys and values. @param keyComparator comparator to order keys @param valueComparator comparator to order values
2171 Checks if none of the characters in the sequence match the criteria. @param sequence CharSequence to search
2172 Extracts and returns a substring from the input sequence based on matching criteria. @param sequence CharSequence to process
2173 Replaces a matching character sequence with a specified replacement character. @param sequence CharSequence to process @param replacement character to replace matches with
2174 Extracts the FUNC_MASK from an InetAddress. @param ip InetAddress object to process @return Inet4Address object representing the FUNC_MASK
2175 Creates a RateLimiter instance with specified permit rate and warm-up period. @param permitsPerSecond desired permit rate (units/sec) @param warmupPeriod duration of warm-up period
2176 Retrieves synchronized set of map entries.
2177 Schedules a Runnable task with specified delay and time unit. @param command target operation to be executed asynchronously @param delay execution delay in the specified time unit @param unit time unit for the delay (e.g. seconds, milliseconds) @return ListenableScheduledFuture representing the scheduled task
2178 Creates a LocalLoadingCache instance with specified configuration. @param loader CacheLoader instance for loading cached values (optional)
2179 Creates a manual cache with custom configuration. @return Cache instance
2180 Initializes builder with custom comparator for ordering elements. @param comparator comparison function to use for ordering elements
2181 Creates a builder instance with a custom ordering using m1 and m2. @return Builder object for constructing an ImmutableSortedMultiset
2182 Returns builder instance with the m1 ordering comparator.
2183 Creates an EnumBiMap instance from a given Map of enum keys and values. @param map input map containing enum keys and values
2184 Resolves enum class for the given map and creates an EnumHashBiMap instance. @param map EnumBiMap or EnumHashBiMap instance
2185 Fetches sorted set of values associated with a given key. @param key unique identifier @return SortedSet object or null if not found
2186 Compares two lists for functional equivalence, ignoring order. @param first first list to compare @param second second list to compare @return true if lists are functionally equivalent, false otherwise
2187 Creates an empty ArrayListMultimap instance with default capacity.
2188 Creates a new ArrayListMultimap from an existing Multimap instance. @param multimap source Multimap to copy key-value pairs from
2189 Creates an empty HashMultimap instance.
2190 Creates an empty LinkedListMultimap instance.
2191 Creates a LinkedListMultimap instance from the given Multimap. @param multimap Existing Multimap to populate this instance
2192 Creates a new LinkedHashMultimap instance from an existing multimap. @param multimap source multimap
2193 Creates a mutable network instance with current configuration.
2194 Initializes a mutable graph with the given AbstractGraphBuilder. @param builder AbstractGraphBuilder instance to configure graph properties
2195 Builds a mutable value graph with specified properties. @return MutableValueGraph instance
2196 Imports cells from the given table into the builder. @param table Table to import cells from
2197 Adds multiple immutable map entries from an iterable collection. @param entries Collection of key-value pairs to be added
2198 Merges entries from an existing immutable map. @param map Map containing key-value pairs to be added
2199 Adds multiple immutable map entries from an iterable collection. @param entries Collection of key-value pairs to be added
2200 Creates a filtered map with the given underlying map and entry predicate. @param map original map containing all entries @param entryPredicate predicate to filter entries based on
2201 Merges an existing RangeSet into this builder. @param ranges RangeSet to add, must be non-overlapping with current set
2202 Masks the given range against this immutable range set. @param range Range instance to mask @return Masked range as an immutable list of type C, or throws NoSuchElementException if invalid
2203 Creates a contiguous set with the specified integer range and discrete domain. @param lower Lower bound of the range @param upper Upper bound of the range
2204 Creates a contiguous set with specified range and discrete domain. @param lower Lower bound of the range @param upper Upper bound of the range
2205 Creates a contiguous set of integers within the specified range. @param lower Lower bound (inclusive) @param upper Upper bound (inclusive)
2206 Creates a contiguous set representing elements within the specified range. @param lower Lower bound of the range @param upper Upper bound of the range
2207 Merges the given range with adjacent ranges and masks based on matching values. @param range Range instance to merge @param value Value to match (used for merging)
2208 Retrieves network connections for a given node. @param node the node to retrieve connections for @return NetworkConnections object or null if not found
2209 Converts a mutable map to an immutable map instance. @param map input map possibly containing key-value entries
2210 Creates an immutable masked table structure with a single row and column entry. @param rowKey unique row identifier @return ImmutableMap instance representing the masked table
2211 Creates an immutable sorted set up to and including the specified element. @param e input element
2212 Retrieves an element from the sorted set based on its index. @param e input element
2213 Creates an immutable list from the given iterator. @param elements input iterator of elements to add
2214 Creates an immutable range map from the provided entries, merging overlapping ranges. @return ImmutableRangeMap instance
2215 Merges ranges into a single, immutable set. @return ImmutableRangeSet instance or null if empty
2216 Retrieves a list of URLs for classpath resources. @return ImmutableList of URL objects
2217 Constructs an ImmutableList of Parameters based on method signature. @return List of Parameters or empty list if no parameters exist
2218 Builds a list of throwable type tokens from the specified types. @return ImmutableList of TypeToken objects representing exception types
2219 Builds an immutable list of callable tasks from the given collection. @param tasks collection of Callable tasks to wrap
2220 Creates an immutable list from the specified iterable of comparable elements. @param elements input iterable of comparable elements
2221 Creates an immutable list from a sorted iterable. @param comparator the comparator to use for sorting @param elements the input iterable to sort and convert
2222 Constructs an immutable sorted set from the given iterator and comparator. @param comparator ordering logic for the set @param elements input iterator of elements to add
2223 Creates an ImmutableMap with function mask based on expected size and populates it from an array of entries. @param n number of entries @param entryArray array of entries (may contain nulls) @param throwIfDuplicateKeys whether to throw exception if duplicate keys are found @return ImmutableMap instance or initializes from existing array if length is 0
2224 Retrieves the maximum suffix index for the current domain, caching results. @return The cached or recalculated public suffix index
2225 Returns the maximum suffix index for REGISTRY public suffix type. @return int maximum suffix index or cached value if initialized
2226 Creates an ImmutableSortedMap instance from a sorted iterable of entries. @param comparator Comparator instance to determine element order @param sameComparator whether the comparator is the same as previously used @param entries input iterable of entries
2227 Creates a new TreeBasedTable instance with updated row comparator and column data. @param table existing TreeBasedTable object
2228 Creates a BloomFilter with specified parameters. @param funnel funnel object for encoding elements @param expectedInsertions estimated number of insertions
2229 Creates a collector to select top K elements from a stream. @param k number of top elements to select @param comparator comparison logic for ordering elements
2230 Retrieves the top K elements from an iterable. @param iterable Iterable of elements to select from @param k desired number of elements in the buffer @return List of top K elements or null if not found
2231 Retrieves top K elements from an iterator. @param iterator Iterator of elements to select from @param k desired number of elements in the buffer @return List of top K elements or null if not found
2232 Submits a ClosingFunction to the specified Executor while managing its lifecycle. @param exceptionType type of exceptions to handle @param fallback function to execute in case of an exception @param executor task execution context @return ClosingFuture representing the submitted task
2233 Updates service state using state.m1() method.
2234 Waits for services to stop within a specified timeout. @param timeout maximum waiting time @param unit time unit (e.g. seconds, milliseconds)
2235 Returns a platform-specific matcher for function masks.
2236 Computes hash code for the specified file using the provided HashFunction. @param file target file object @param hashFunction non-null HashFunction instance @return computed hash code value
2237 Validates and masks source and destination files for deletion. @param from source file object @param to destination file object
2238 Converts URL to byte stream using specified charset and processes with a LineProcessor. @param url target URL @param charset target character set @return list of processed lines or null if not found
2239 Maps a validated file to a read-only MappedByteBuffer. @param file the input file
2240 Creates an executor service with shutdown hooks using the provided ThreadPoolExecutor. @param executor ThreadPoolExecutor instance @param terminationTimeout timeout value in specified unit @param timeUnit time unit for timeout
2241 Configures and returns a ScheduledExecutorService with shutdown hooks. @param executor thread pool executor to associate with shutdown hooks
2242 Configures delayed shutdown hook for the given ExecutorService. @param service executor service to associate with shutdown hook @param terminationTimeout duration before shutting down (converted from input Duration)
2243 Masks a cache entry based on its hash and the given entry. @param entry the entry to mask @param hash the hash of the entry @return true if the entry was masked, false otherwise
2244 Masks cache entries based on the given key, hash, and value reference. @param key the key to mask @param hash the hash code of the key @param valueReference the value reference to update @return true if the entry was updated, false otherwise
2245 Invokes state-specific logic in ServiceManager.
2246 Waits for services to become healthy or times out. @param timeout maximum wait duration @param unit time unit for the timeout value
2247 Retrieves service startup times from the ServiceManager's state.
2248 Retrieves annotations of specified type from the current class. @param annotationType target annotation type @return array of matching annotations or null if none found
2249 Creates an ImmutableSortedSet from a collection of elements using the natural ordering. @param elements input collection
2250 Creates a synchronized view of the given navigable map. @param navigableMap the original map to provide thread-safe access
2251 Masks an exception by reading from the specified file as a character source and converting to string. @param file target file object @param charset target character set @return String representation of the file content or throws IOException if an I/O error occurs.
2252 Converts URL to string using specified charset and masking exceptions. @param url target URL @param charset target character set
2253 Creates an empty CompactLinkedHashMap instance.
2254 Creates a TreeMultimap with natural ordering for keys and values. @param multimap existing Multimap to populate this instance with
2255 Creates a reentrant lock instance based on the specified locking policy. @param lockName unique identifier for the lock @param fair whether to use a fair or non-fair locking strategy
2256 Creates a reentrant read-write lock with cycle detection. @param lockName unique identifier for the lock @param fair whether to use fair locking policy
2257 Creates a map of LockGraphNode instances from an enum class. @param clazz the enum class to create the map for
2258 Validates an internet domain part against a custom mask. @param part the domain part to validate @param isFinalPart whether this is the final part of the domain
2259 Extracts the FUNC_MASK from an InetAddress. @param ip InetAddress object to process
2260 Checks if an iterator contains a specific element using the provided matching method. @param object element to find, or null for searching for null elements
2261 Checks if the given object matches any element in this collection. @param object the object to search for @return true if found, false otherwise
2262 Checks if any elements exist in the underlying collection. @param collection the collection to check
2263 Filters elements from a collection using a delegate iterator. @param collection collection to filter
2264 Applies filtering and transformations to iterator using m1 and m2 methods. @param none
2265 Checks if the forwarding collection has been modified. @return true if collection has been modified, false otherwise
2266 Creates and returns an array with the same size as the underlying collection, using delegate's m2() to populate it. @return newly created array or null if not found
2267 Converts duration to nanoseconds with overflow handling. @param delay input duration @return result as long or special values for overflow cases
2268 Retrieves event subscribers associated with the given object. @param listener Object to inspect for subscriber methods @return Multimap of event types and corresponding subscribers
2269 Creates a mutable network instance with the specified nodes and edges from the input network. @param network the existing network object @param nodes Iterable of node identifiers to include in the new network @return MutableNetwork<N, E> containing the filtered nodes and edges
2270 Creates a masked copy of the input network. @param network the existing network object @return MutableNetwork object with masked functionality
2271 Creates a mutable graph instance based on the current configuration.
2272 Builds a mutable value graph with specified properties and nodes. @param graph source graph @param nodes Iterable of nodes to include in the resulting graph @return MutableValueGraph instance representing the induced subgraph
2273 Creates a deep copy of the input graph with function masks applied. @param graph original ValueGraph instance @return MutableValueGraph instance with applied function masks
2274 Merges entries from an existing immutable map. @param map Map containing key-value pairs to be added
2275 Merges entries from an existing immutable map. @param map Map containing key-value pairs to be added
2276 Creates filtered navigable map with combined predicates. @param map original map containing all entries @param entryPredicate predicate to filter entries based on
2277 Creates a filtered sorted map with the given underlying data and filtering predicate. @param map original map containing all entries @param entryPredicate predicate to filter entries based on
2278 Creates a filtered map with the given underlying map and key predicate. @param unfiltered original map containing all entries @param keyPredicate predicate to filter keys based on
2279 Creates a filtered map with the given underlying map and entry predicate. @param unfiltered original map containing all entries @param entryPredicate predicate to filter entries based on
2280 Creates a collector for an immutable sorted map from a stream of data. @param comparator the comparator to order keys @param keyFunction extracts the key from each element @param valueFunction extracts the value from each element
2281 Creates an immutable map collector from input elements using provided key and value functions. @param keyFunction function to extract keys from input elements @param valueFunction function to extract values from input elements
2282 Creates an immutable map collector from a stream of data. @param keyFunction function to extract enum keys @param valueFunction function to extract values @param mergeFunction binary operator for merging values
2283 Creates a type mapping from the context type. @param contextType the input type to analyze and map
2284 Creates an immutable list of ByteSources from an iterator. @param sources input iterator of ByteSources to add
2285 Creates an immutable list of character sources from the given iterator. @param sources input iterator of elements to add
2286 Creates an immutable range set from a collection of non-overlapping ranges. @param ranges iterable of ranges to include
2287 Creates a masked ImmutableSortedMultiset from the given iterable and comparator. @param comparator Comparator to determine element order @param elements Iterable containing elements to mask @return Masked ImmutableSortedMultiset object
2288 Creates a sorted multiset instance from the given SortedMultiset. @param sortedMultiset input multiset to transform
2289 Creates an immutable list based on the current mask value. @return ImmutableList object representing the collection of elements
2290 Creates an immutable sorted set collector using the provided comparator. @param comparator function to compare elements in the set
2291 Constructs an immutable sorted set from the given iterator using a natural ordering comparator. @param elements input iterator of elements to add
2292 Creates a FUNC_MASKed ImmutableBiMap based on the accumulated entries. @return ImmutableBiMap instance with function mask applied
2293 Creates a functional mask submap from the original map based on the given key and inclusivity. @param toKey target key @param inclusive whether to include the key in the mask or not @return ImmutableSortedMap object representing the masked view, or null if not found
2294 Creates a functional mask submap by key. @param fromKey starting key @param inclusive whether to include the key in the range @return ImmutableSortedMap representing the mask or null for NPE
2295 Checks if public suffix index is zero.
2296 Checks if domain has a public suffix. @return true if public suffix found, false otherwise
2297 Checks if public suffix index is non-zero. @return True if index is greater than zero, false otherwise
2298 Checks if the domain has a specific functional mask. @return true if m1 is set to 1, false otherwise
2299 Checks if public suffix mask is unset (i.e., m1 value is 0). @return true if unset, false otherwise
2300 Checks if domain has a valid suffix. @return true if suffix found, false otherwise
2301 Checks if registry suffix is enabled based on cached value. @return true if registry suffix is enabled, false otherwise
2302 Returns true if the mask is set to 1.
2303 Creates an ImmutableSortedMap from a sorted iterable of entries. @param entries input iterable of entries @param comparator Comparator instance to determine element order
2304 Creates an ImmutableSortedMap instance from a SortedMap. @param map input SortedMap to create the ImmutableSortedMap from
2305 Creates an immutable set from the current set's elements, using a fixed-size builder.
2306 Retrieves a set of raw types that can be assigned to the generic type parameter T.
2307 Validates index and size using FUNC_MASK operation. @param index the index to validate
2308 Computes the square root of a BigInteger value while considering rounding mode. @param x input BigInteger value @param mode RoundingMode to determine the calculation result @return calculated square root value as a BigInteger
2309 Builds an immutable set from the given iterator, handling edge cases and utilizing builder-specific logic. @param elements input iterator of elements to add
2310 Traverses a directory and its subdirectories, collecting ResourceInfo for each resource. @param directory the directory to traverse @param packagePrefix the prefix of the resource's name @param currentPath the set of visited directories @param builder the builder for ResourceInfo instances
2311 Constructs a set of files from the Class-Path attribute in a JAR file's manifest. @param jarFile JAR file containing the manifest @param manifest optional manifest object; if null, returns an empty set @return ImmutableSet<File> instance or throws MalformedURLException if invalid
2312 Returns the superclass type of the target type T. @return Class instance representing the supertype
2313 Retrieves top K elements from an iterable. @param iterable Iterable of elements to select from @param k desired number of elements in the buffer @return List of top K elements or null if not found
2314 Converts timeout duration to nanoseconds and waits for services to stop within it. @param timeout input duration
2315 Wraps ThreadPoolExecutor in custom Application instance. @param executor ThreadPoolExecutor to be wrapped
2316 Creates an exiting executor service with shutdown hooks using the provided ThreadPoolExecutor. @param executor ThreadPoolExecutor instance @param timeout duration of shutdown in nanoseconds
2317 Wraps the given thread pool executor in a configured ScheduledExecutorService with shutdown hooks. @param executor thread pool executor to associate with shutdown hooks
2318 Configures a ScheduledExecutorService with shutdown hooks and timeout. @param executor thread pool executor @param terminationTimeout duration of shutdown timeout
2319 Masks cache entries to maintain segment weight within the maximum allowed value. @param newest target entry to update
2320 Converts duration to nanoseconds with overflow handling and waits for services to become healthy.
2321 Retrieves service startup times from ServiceManager's state and converts them to a map of services with their respective durations.
2322 Retrieves annotations of specified type from this Parameter object. @param annotationType target annotation type
2323 Creates a reentrant lock instance based on the specified locking policy. @param lockName unique identifier for the lock
2324 Creates a reentrant read-write lock with cycle detection. @param lockName unique identifier for the lock
2325 Validates a domain name by checking each part against the custom mask. @param parts list of domain parts to validate
2326 Updates event subscribers for the given listener object. @param listener Object to inspect for subscriber methods
2327 Validates registration of subscribers for given object. @param listener Object to inspect for subscriber methods
2328 Returns an ImmutableNetwork Builder instance with mask functionality enabled.
2329 Creates a mutable subgraph instance based on the provided graph and nodes. @param graph source graph to copy settings from @param nodes subset of nodes to include in the subgraph @return MutableGraph object representing the subgraph
2330 Creates a mutable graph instance by copying the provided graph's structure and properties. @param graph the source graph to replicate settings from @return a new MutableGraph object with identical topology and attributes
2331 Returns a masked immutable value graph builder. @return Builder instance for creating an immutable graph
2332 Creates a filtered bi-map with specified predicate. @param map underlying data and filtering map @param entryPredicate additional entries to filter based on
2333 Creates a filtered navigable map from the given input. @param unfiltered original map containing all entries @param entryPredicate predicate to filter entries based on
2334 Creates a filtered sorted map with the given underlying data and filtering predicate. @param unfiltered original map containing all entries @param entryPredicate predicate to filter entries based on
2335 Creates a filtered map with the given underlying map and value predicate. @param unfiltered original map containing all entries @param valuePredicate predicate to filter values based on
2336 Creates an immutable map collector from input stream elements. @param keyFunction extracts keys from each element @param valueFunction extracts values from each element @param mergeFunction merges conflicting values
2337 Constructs an immutable range map collector from provided functions. @param keyFunction extracts the key range @param valueFunction extracts associated values
2338 Creates an ImmutableSortedMultiset from the given iterable using a natural ordering. @param elements Iterable containing elements to sort
2339 Creates an immutable sorted multiset instance from the internal collection.
2340 Creates a WildcardType instance with the specified upper bound. @param upperBound the upper bound Type object
2341 Creates a WildcardType instance with specified lower bound and upper bound (Object). @param lowerBound lower bound of the type
2342 Generates all permutations of the input iterable while maintaining order. @param elements input iterable to permute @param comparator comparison function for elements in the list
2343 Creates a sorted and immutable list from this FluentIterable instance. @param comparator custom ordering comparator
2344 Creates an immutable list from the specified collection of elements. @param elements Collection of elements (may contain nulls)
2345 Applies function mask to the accumulated entries and builds the ImmutableBiMap. @return ImmutableBiMap instance with function mask applied
2346 Creates an ImmutableMap with function mask based on expected size. @param throwIfDuplicateKeys whether to throw exception if duplicate keys are found
2347 Creates an ImmutableMap with function mask based on expected size. @return ImmutableMap instance or null if not found
2348 Creates a functional mask submap from the original map based on the given key. @param toKey target key @return ImmutableSortedMap object representing the masked view, or null if not found
2349 Creates a functional mask submap based on the given key ranges and inclusivity. @param fromKey starting key @param fromInclusive whether to include the start key in the range @param toKey target key @param toInclusive whether to include the target key in the mask @return ImmutableSortedMap object representing the masked view, or null if not found
2350 Creates a functional mask submap by key. @param fromKey starting key
2351 Creates an ImmutableSortedMap from a sorted iterable of entries. @param entries input iterable of entries
2352 Creates an ImmutableSortedMap instance from a given input map. @param map input map to create the sorted map from
2353 Creates an ImmutableSortedMap instance from a given map and comparator. @param map input map to create the sorted map from @param comparator Comparator instance to determine element order
2354 Computes the Cartesian product of input sets. @param sets collection of sets to combine
2355 Checks if the queue contains the specified target object.
2356 Validates queue index using mask operation and retrieves associated element. @param index position in the queue
2357 Wraps an iterable into an immutable set, handling collection and iterator edge cases. @param elements input iterable of elements to add
2358 Creates a new Invokable instance from the given Constructor, validating its correctness. @param constructor target Constructor to be validated and used
2359 Checks if the given superclass matches any type in the set of supertypes. @param supertype target super class @return true if a match is found, false otherwise
2360 Creates a new Invokable object for the given Method, handling type tokenization. @param method target method
2361 Masks cache entries based on their recency and freshness. @param now current timestamp in nanoseconds
2362 Creates a WithExplicitOrdering instance with explicit ordering based on the provided policy and enum class. @param enumClass the enumeration class to generate lock graph nodes from @param policy concurrency locking policy
2363 Invokes event subscriber processing on the given object. @param object Object to be inspected by registered event handlers
2364 Notifies event listeners and triggers handling tasks for given object. @param object Object to post event for
2365 Creates an immutable graph builder from a mutable graph. @return ImmutableGraph.Builder instance
2366 Creates a filtered bi-map with specified predicate and underlying data. @param unfiltered original bi-map containing all entries @param entryPredicate additional entries to filter based on
2367 Creates a filtered navigable map from the given input. @param unfiltered original map containing all entries @param keyPredicate predicate to filter entries based on
2368 Creates a filtered navigable map from the given input using a predicate to filter entries based on values. @param unfiltered original map containing all entries @param valuePredicate predicate for filtering map entries by value
2369 Filters map entries based on a given key predicate. @param unfiltered original map containing all entries @param keyPredicate original key predicate
2370 Filters map entries based on a given value predicate. @param unfiltered original map containing all entries @param valuePredicate predicate for values in the map
2371 Creates an immutable sorted multiset from the given iterator and comparator. @param comparator comparison function for ordering elements @param elements input iterator of elements to add
2372 Retrieves a set of location information for the given class loader. @param classloader ClassLoader instance to use for resource retrieval @return ImmutableSet of LocationInfo objects
2373 Finds a suitable Type from the given bounds array. @param bounds array of type bounds to search @return matching Type or null if not found
2374 Resolves the component type of a WildcardType. @param componentType Type object to resolve
2375 Generates ordered permutations of input iterable using comparator. @param elements input iterable to permute
2376 Creates an immutable multiset from an iterable of elements. @param elements input iterable
2377 Creates an immutable multiset from an iterator of elements. @param elements iterator containing elements to merge
2378 Creates an immutable multiset from a given mutable multiset. @param multiset input multiset to transform @return an immutable equivalent of the input multiset
2379 Generates permutations of collection elements. @param elements input collection to permute @return Collection of permutated lists or empty if input is null
2380 Creates an immutable list from the given iterable. @param elements input iterable of elements to add
2381 Creates an immutable range set from a given RangeSet. @param rangeSet input range set to convert @return ImmutableRangeSet object or existing one if not modified
2382 Creates an immutable sorted set from the given sorted set. @param sortedSet input sorted set
2383 Masks an exception by reading lines from a character source and creating an immutable list. @throws IOException if an I/O error occurs
2384 Constructs an immutable map with function mask based on expected size. @return ImmutableClassToInstanceMap object
2385 Creates an ImmutableMultimap from a collection of key-value pairs. @param mapEntries collection of entries with keys and lists of values @param valueComparator optional comparator to sort values (null for no sorting)
2386 Returns an immutable map with function mask based on expected size. @return ImmutableMap instance or throws exception if duplicate keys are found
2387 Constructs an ImmutableSetMultimap from a given collection of map entries. @param mapEntries mapping of keys to collections of values @param valueComparator optional sorting order for values @return the constructed immutable multimap instance
2388 Creates an ImmutableMap from Properties with function mask based on expected size. @param properties input properties
2389 Creates an ImmutableMap with function mask based on input collection. @param list Collection of elements to be mapped
2390 Creates an ImmutableTypeToInstanceMap with function mask based on m1 result. @param none @return ImmutableTypeToInstanceMap object containing m1 data
2391 Constructs a TypeTable with the given mappings. @param mappings Immutable map of type variables to their corresponding types
2392 Creates an ImmutableMap with function mask based on given keys and a function to compute values. @param keys Iterator of unique keys @param valueFunction Function to compute values for each key @return ImmutableMap instance or null if not found
2393 Creates a functional mask submap based on the given key range. @param fromKey starting key @param toKey target key
2394 Creates a Collector for an ImmutableSortedMap from a stream of data. @param comparator key comparator @param keyFunction function to extract keys from elements @param valueFunction function to extract values from elements @param mergeFunction binary operator for merging values
2395 Calculates and returns the mask value based on queue properties. @return integer representing priority order or null if invalid
2396 Calculates and returns the mask value. @return integer representing the priority order
2397 Creates an immutable set from the result of m1(). @return ImmutableSet containing results of m1()
2398 Returns the functional type token mask. @param type TypeToken instance
2399 Returns the functional type token mask. @param type the input type
2400 Determines if the given TypeToken is a subtype of any supertype. @param type token to check @return true if a match is found, false otherwise
2401 Checks and applies cache key type flags. @param none
2402 Creates a predicate that filters map entries based on a given key predicate. @param keyPredicate original key predicate @return filtered BiMap with specified predicate and underlying data
2403 Creates a filtered bi-map with specified predicate and underlying data. @param unfiltered original bi-map containing all entries @param valuePredicate predicate for values in the map
2404 Creates an immutable sorted multiset from the given iterator. @param elements input iterator of elements to add
2405 Resolves the TypeToken for a given Class. @param cls The input Class to resolve
2406 Creates an immutable multiset from the result of filtering this iterable. @param m1 filtered iterator
2407 Creates an immutable multiset from the current builder's contents. @return ImmutableMultiset object representing the constructed multiset
2408 Computes the cartesian product of input list collections. @param lists collection of input lists, each containing elements of type B
2409 Parses cache specification string and initializes CacheBuilderSpec. @param cacheBuilderSpecification input cache configuration string
2410 Creates an immutable list of masked elements. @return ImmutableList of masked elements
2411 Retrieves an immutable list of file paths within the specified directory. @param dir input directory path @return ImmutableList of Path objects or throws DirectoryIteratorException if encountered
2412 Constructs an InternetDomainName object from a given string. @param name input domain name
2413 Aggregates a collection of asynchronous tasks into a single future. @param futures iterable of tasks to be aggregated @return ListenableFuture containing the aggregated results
2414 Combines an iterable of listenable futures into a single future using the mask flag. @param futures input iterable of futures to combine
2415 Combines multiple listenable futures into a single future. @param futures iterable of futures to combine
2416 Aggregates a collection of asynchronous tasks into a single future. @param futures iterable of tasks to be aggregated @return ListenableFuture containing the aggregated result or null if empty
2417 Converts an iterable of futures to a list of listenable futures. @param futures input iterable of future objects
2418 Creates an immutable range set from an iterable of ranges. @param ranges collection of ranges to include in the set
2419 Merges another RangeSet into this set, utilizing helper functions. @param other input range set to merge
2420 Merges another RangeSet into this set, utilizing recursive helper function. @param other input range set to merge
2421 Creates a collector for ImmutableBiMap from stream of data. @param keyFunction maps each input to its corresponding key @param valueFunction maps each input to its corresponding value
2422 Constructs an immutable map with function mask from a given map. @param map Map of class types to instances
2423 Creates an ImmutableListMultimap instance from a given Multimap. @param multimap input multimap to transform
2424 Creates an ImmutableMultimap instance from the accumulated entries in the builder. @return ImmutableMultimap object
2425 Updates the tree map based on the given cut and remapping function. @param range Range to update @param value associated data, or null for no updates @param remappingFunction Function to apply to existing values
2426 Constructs an ImmutableSetMultimap from the builder's entries and optional key or value ordering. @return the constructed immutable multimap instance
2427 Creates an immutable map with function mask based on expected size. @param values iterator of values to map @param keyFunction function to derive keys from values
2428 Generates all combinations of a specified size from the input set. @param set input collection to generate combinations from @param size desired length of each combination @return Set<Set<E>> containing all possible subsets of the given size
2429 Wraps a Graph in an immutable representation if it's not already. @param graph the input graph to be wrapped
2430 Resolves type variables using the given type mappings. @param mappings map of type variables to their corresponding types
2431 Creates an ImmutableMap with function mask based on given keys and a function to compute values. @param keys Iterator of unique keys @param valueFunction Function to compute values for each key
2432 Returns the mask value based on the minimum element. @return integer representing the mask
2433 Inserts an element into the queue while maintaining ordering. @param element the new element to insert
2434 Retrieves class info for resources matching specified class type. @return ImmutableSet of ClassInfo objects
2435 Retrieves class information based on specific masks. @return Set of ClassInfo objects matching the defined mask
2436 Traverses graph structure from given initial nodes. @param startNodes iterable of initial nodes to traverse
2437 Traverses graph structure starting from the given nodes. @param startNodes initial nodes to traverse
2438 Creates a traverser for the given nodes, filtering out invalid ones. @param startNodes initial nodes to traverse
2439 Processes resources from a set of files, constructing an immutable set of ResourceInfo instances. @param scannedFiles Set of File objects to process
2440 Specializes the Invokable instance with a specified return type. @param returnType TypeToken instance representing the desired return type
2441 Applies cache key type flags based on reference queue state. @param none
2442 Resolves the given type, handling various type representations. @param type input Type object to resolve
2443 Checks if the given type matches a functional type mask. @param formalType the type to check @param declaration TypeVariable object @return true if the type matches, false otherwise
2444 Canonicalizes wildcards in a given type argument. @param declaration TypeVariable object @param typeArg The type to canonicalize
2445 Creates cache builder instance from input configuration string. @param spec cache specification string
2446 Creates a cache builder specification with maximum size set to 0. @return CacheBuilderSpec instance with configured maximum size
2447 Constructs an InternetDomainName object from a given domain string. @param domain input internet domain name
2448 Combines futures into a list while preserving completion order. @param futures input iterable of future objects @return ImmutableList of ListenableFutures with preserved order
2449 Merges this range set with another using mask-like behavior. @param other RangeSet to merge with
2450 Creates an ImmutableMultimap instance from a given Multimap. @param multimap input multimap to transform
2451 Returns an ImmutableMultimap instance from accumulated entries. @return ImmutableListMultimap object
2452 Creates an immutable map collector using provided functions to extract keys and values. @param keyFunction function to extract keys from elements @param valueFunction function to extract values from elements
2453 Creates an immutable multimap instance from a key-value pair. @param k1 unique key @param v1 associated immutable set of values
2454 Creates an immutable multimap with two key-value pairs. @param k1 first key @param v1 first value @param k2 second key @param v2 second value
2455 Creates an ImmutableSetMultimap instance from three key-value pairs. @param k1 the first key @param v1 the first value @param k2 the second key @param v2 the second value @param k3 the third key @param v3 the third value
2456 Creates an ImmutableSetMultimap from key-value pairs. @param k1 first key @param v1 value for k1 @param k2 second key @param v2 value for k2 @param k3 third key @param v3 value for k3 @param k4 fourth key @param v4 value for k4
2457 Creates an ImmutableSetMultimap from the given key-value pairs. @param k1 first key @param v1 first value @param k2 second key @param v2 second value @param k3 third key @param v3 third value @param k4 fourth key @param v4 fourth value @param k5 fifth key @param v5 fifth value
2458 Creates an ImmutableSetMultimap from the given key-value pairs. @param entries Iterable of Entry objects containing keys and values
2459 Creates an ImmutableSetMultimap instance from a given multimap. @param multimap input multimap
2460 Creates an immutable map from iterable values with a specified key function. @param values iterable of values to map @param keyFunction function to derive keys from values @return ImmutableMap object or null if not found
2461 Initializes an ArrayTable instance with specified row and column keys. @param rowKeys iterable of row keys @param columnKeys iterable of column keys
2462 Generates power set from given input set. @param set the input set
2463 Creates a RegularImmutableTable instance based on the given cell list and spaces. @param cellList collection of cells to be managed @param rowSpace set of unique row identifiers @param columnSpace set of unique column identifiers
2464 Creates an immutable graph instance from a mutable graph. @param mutableGraph the input graph to be converted
2465 Creates an ImmutableNetwork instance from a given Network object. @param network the existing network object
2466 Wraps a ValueGraph in an ImmutableValueGraph if it's already immutable; otherwise, creates a new ImmutableValueGraph from the given graph.
2467 Resolves type variables using the given type mappings and introspection. @param contextType input type to analyze and map
2468 Resolves a type based on the given context type, using invariant capture and introspection. @param contextType input type to analyze
2469 Resolves type variables for a given formal and actual type. @param formal the type to resolve @param actual the target type for resolution
2470 Creates an ImmutableMap with function mask based on given keys and a function to compute values. @param valueFunction Function to compute values for each key
2471 Creates a MinMaxPriorityQueue initialized with the given elements. @param initialContents iterable collection of initial contents
2472 Inserts an element into the queue while maintaining ordering. @param element the new element to insert
2473 Retrieves and filters ClassInfo objects within the specified package. @param packageName fully qualified class name to filter by @return ImmutableSet of matching ClassInfo objects
2474 Retrieves classes with specific masks based on the provided package name. @param packageName unique package identifier @return ImmutableSet of ClassInfo objects or empty set if none match
2475 Creates an ImmutableSet containing a single element. @param e1 non-null element to be contained in the set
2476 Creates an ImmutableSet containing a single element representing the given node. @param startNode initial node to be contained in the set
2477 Creates an ImmutableSet containing a single element. @param e1 non-null element to be contained in the set
2478 Retrieves location information from resources in a set of files. @param scannedFiles Set of File objects to process @return Immutable set of ResourceInfo instances
2479 Retrieves classpath resources and constructs a ClassPath instance. @param classloader ClassLoader to use for resource retrieval
2480 Specializes Invokable instance with specified return type. @param returnType Class representing desired return type
2481 Fetches a cached entry's value while potentially updating its recency and freshness. @param entry ReferenceEntry object containing cache metadata @param now current timestamp in nanoseconds @return cached value or null if expired or removed
2482 Masks cache entries based on their recency and freshness. @param now current timestamp in nanoseconds
2483 Resolves a type variable with dependencies. @param var the type variable to resolve @param forDependants the dependency table used for resolution
2484 Retrieves the function mask of the constructor's return type. @return Type object representing the function mask
2485 Resolves runtime type using TypeResolver and returns result. @return resolved type object
2486 Creates a traverser for file tree children.
2487 Constructs a HostSpecifier from a given string specifier. @param specifier input string to parse
2488 Constructs the ancestral domain name up to a specified level. @param levels number of levels to traverse
2489 Constructs an InternetDomainName object by combining left parts with a registry suffix. @param leftParts domain name prefix (e.g., "example")
2490 Validates an internet domain name by attempting to create a valid InternetDomainName object. @param name input domain name
2491 Creates a collector for accumulating elements into an immutable list multimap. @param keyFunction function to extract the key from each element @param valuesFunction function to compute the values for each element
2492 Creates an ImmutableMultimap instance with a single key-value pair. @param k1 unique key @param v1 associated value
2493 Creates an ImmutableMultimap instance from two key-value pairs. @param k1 first key @param v1 value associated with k1 @param k2 second key @param v2 value associated with k2
2494 Creates an ImmutableMultimap with three key-value pairs. @param k1 first key @param v1 value associated with k1 @param k2 second key @param v2 value associated with k2 @param k3 third key @param v3 value associated with k3
2495 Creates an ImmutableListMultimap instance with four key-value pairs. @param k1 first key @param v1 value associated with k1 @param k2 second key @param v2 value associated with k2 @param k3 third key @param v3 value associated with k3 @param k4 fourth key @param v4 value associated with k4
2496 Creates an ImmutableMultimap instance with five key-value pairs. @param k1 the first key @param v1 the first value @param k2 the second key @param v2 the second value @param k3 the third key @param v3 the third value @param k4 the fourth key @param v4 the fourth value @param k5 the fifth key @param v5 the fifth value
2497 Creates an ImmutableMultimap instance from the given key-value pairs. @param entries Iterable of Entry objects containing keys and values
2498 Constructs an ImmutableListMultimap from a stream of values and a key function. @param values iterator over values @param keyFunction maps each value to its corresponding key @return populated ImmutableListMultimap object
2499 Masks characters in the specified string based on charset and m3 condition. @param attribute MIME type attribute (e.g., "charset") @param values input ASCII strings to be processed @return a MediaType object with normalized attributes and parameters
2500 Creates a collector for accumulating elements into an immutable multiset. @param keyFunction function to extract keys from input elements @param valueFunction function to extract values from input elements
2501 Returns an inverted multimap instance or creates a new one if the current inverse is null.
2502 Ensures service transitions are synchronized and valid. @param none
2503 Constructs an ImmutableSetMultimap of services by state. @return Multimap instance containing services grouped by state
2504 Creates an immutable map from iterable values with a specified key function. @param keyFunction function to derive keys from values
2505 Creates an ArrayTable instance from the given Table. @param table Table instance to be converted
2506 Creates an immutable network structure from the underlying mutable network. @return ImmutableNetwork instance
2507 Creates an immutable value graph from a mutable one. @return ImmutableValueGraph object
2508 Constructs a `TypeToken` instance from the given declaring class. @param declaringClass Class<?> object representing the type to capture
2509 Creates an empty MinMaxPriorityQueue with default properties.
2510 Initializes a MinMaxPriorityQueue with the given elements, using a natural ordering instance for comparable elements. @param initialContents iterable collection of initial contents
2511 Fetches the subgraph induced by a given node in the graph. @param graph Graph structure @param node Node identifier
2512 Retrieves cached ReferenceEntry by computing hash and segment index. @param key object to compare with cache entries
2513 Checks if cached entry is valid based on expiration and eviction policies. @param entry ReferenceEntry object containing cache metadata @param now current timestamp in nanoseconds
2514 Fetches a cached entry for the specified key and hash. @param key unique cache key @param hash entry hash value @param checkTime whether to consider time-based eviction @return LoadingValueReference object or null if not found
2515 Masks cache entries based on recency and freshness. @param none
2516 Resolves a type variable with dependencies. @param var the type variable to resolve @param forDependants the dependency table used for resolution
2517 Combines a single asynchronous task with existing futures using the provided combiner. @param combiningCallable Callable to combine results from existing futures @param executor Executor for running the combined future
2518 Combines asynchronous tasks using the provided combining callable and executor. @param combiningCallable AsyncCombiningCallable to aggregate task results @param executor Executor for handling task completion events
2519 Constructs a HostSpecifier from a given string specifier. @param specifier input string to parse
2520 Validates host specifier using the 'm1' method. @param specifier input string to validate
2521 Returns the public suffix of this domain name using cached or recalculated maximum suffix index. @return InternetDomainName object representing the public suffix, or null if not found
2522 Returns the domain with functional mask applied, or recursively removes one level of public suffix. @return InternetDomainName object
2523 Returns the public suffix of the domain, with masked bits. @return InternetDomainName object or null if not found
2524 Returns InternetDomainName instance with FUNC_MASK set. @return InternetDomainName object or throws exception if not under registry suffix
2525 Constructs the ancestral domain name up to 1 level. @return Ancestral domain name or null if none
2526 Creates a collector that accumulates elements into an immutable multimap. @param keyFunction function to extract keys from input elements @param valueFunction function to extract values from input elements
2527 Creates an ImmutableMultimap instance with a single key-value pair. @param k1 unique key @param v1 associated value
2528 Creates an ImmutableMultimap instance from two key-value pairs. @param k1 first key @param v1 value associated with k1 @param k2 second key @param v2 value associated with k2
2529 Creates an ImmutableMultimap with three key-value pairs. @param k1 first key @param v1 value associated with k1 @param k2 second key @param v2 value associated with k2 @param k3 third key @param v3 value associated with k3
2530 Creates an ImmutableMultimap instance with four key-value pairs. @param k1 first key @param v1 value associated with k1 @param k2 second key @param v2 value associated with k2 @param k3 third key @param v3 value associated with k3 @param k4 fourth key @param v4 value associated with k4
2531 Creates an ImmutableMultimap instance with five key-value pairs. @param k1 the first key @param v1 the first value @param k2 the second key @param v2 the second value @param k3 the third key @param v3 the third value @param k4 the fourth key @param v4 the fourth value @param k5 the fifth key @param v5 the fifth value
2532 Creates an ImmutableMultimap instance from the given key-value pairs. @param entries Iterable of Entry objects containing keys and values
2533 Returns an inverted ImmutableMultimap instance. @return Inverted ImmutableListMultimap object or newly created one if not found
2534 Constructs an ImmutableListMultimap from a stream of values and a key function. @param values iterator over values @param keyFunction maps each value to its corresponding key
2535 Masks characters in the specified string based on charset and m3 condition. @param attribute MIME type attribute (e.g., "charset") @param value input ASCII strings to be processed
2536 Constructs a MediaType instance with specified type and subtype from a given Multimap of parameters. @param parameters map of key-value pairs for additional attributes
2537 Constructs a MediaType with specified top-level type and subtype. @param type top-level media type (e.g. 'text') @param subtype specific media subtype (e.g. 'plain')
2538 Parses the input string to extract media type information. @param input source string containing media type data @return MediaType object representing the parsed media type, or null if parsing fails
2539 Initializes ServiceManager with the given iterable of services. If no services are provided, a placeholder service is used to avoid strange behavior. @param services iterable of services to manage
2540 Creates an ImmutableSetMultimap from a given multimap. @param keyFunction function to extract the key from each element @param valuesFunction function to compute the values for each element
2541 Creates a SimpleTypeToken from the specified type. @param type input Type object to encapsulate
2542 Creates a natural ordering instance for the MinMaxPriorityQueue. @return A populated MinMaxPriorityQueue with Ordering.m1()
2543 Reloads cached value for given key using the provided CacheLoader. @param key unique cache identifier @param hash cache entry hash @param loader mechanism to load new values @return ListenableFuture containing the reloaded value or null if not found
2544 Updates cache entry with given key and new value, using provided LoadingValueReference. @param key unique identifier @param hash entry hash value @param loadingValueReference reference to cached value (or null) @param newValue computation result as a ListenableFuture @return updated value or null if failed
2545 Masks cache entries based on recency and freshness. @param entry reference to the cache entry
2546 Masks cache entries based on recency and freshness. @param value Object to compare with cached values @return true if found, false otherwise
2547 Constructs an ImmutableListMultimap using the result of m1() and a key function. @param keyFunction maps each value to its corresponding key
2548 Masks characters and extracts charset from the input MIME type. @param charset input Charset object
2549 Returns the MediaType with 'm' top-level type and 'mask' subtype if applicable.
2550 Constructs a MediaType with specified top-level type and subtype. @param subtype specific media subtype (e.g. 'plain')
2551 Constructs a MediaType with specified top-level type and subtype. @param subtype specific media subtype (e.g. 'plain')
2552 Constructs a MediaType with specified top-level type and subtype. @param subtype specific media subtype (e.g. 'plain')
2553 Constructs a MediaType with specified top-level type and subtype. @param subtype specific media subtype (e.g. 'plain')
2554 Constructs a MediaType with specified top-level type and subtype. @param subtype specific media subtype (e.g. 'plain')
2555 Constructs a MediaType with specified top-level type (video) and subtype. @param subtype specific video media subtype
2556 Determines the type of immutable table to create based on cell count. @param cells collection of cells @param rowComparator optional comparator for sorting rows (null for no sorting) @param columnComparator optional comparator for sorting columns (null for no sorting)
2557 Retrieves the supertype of type T, handling type variables and wildcards. @return TypeToken for the supertype or null if not found
2558 Resolves the type bounds for a given wildcard or type variable. @return immutable list of TypeTokens representing the resolved bounds
2559 Computes the functional mask type token for a given superclass. @param superclass The input Class to compute the functional mask for @return TypeToken object representing the functional mask type
2560 Loads all cache entries for specified keys. @param keys unique cache keys @param loader CacheLoader instance to compute values @return Map of loaded cache entries or null if failed @throws ExecutionException on load failure
2561 Masks cache entries based on custom filtering criteria. @param none
2562 Returns an immutable table with default mask settings.
2563 Checks for the presence of a maskable entry in the cache.
2564 Resolves the functional mask type for a given subclass. @param subclass input Class to compute the functional mask for
2565 Wraps an existing table into a parameterized immutable table. @param table the input table to wrap
2566 Creates an immutable table collector with custom row, column, and value functions. @param rowFunction function to transform input elements into rows @param columnFunction function to transform input elements into columns @param valueFunction function to transform input elements into values
