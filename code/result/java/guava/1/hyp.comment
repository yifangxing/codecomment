1 Orders rows by the specified comparator. @param rowComparator comparator to sort rows (must not be null)
2 Orders table columns based on the provided comparator. @param columnComparator determines column ordering
3 Merges multiple sorted iterables into a single sorted iterable. @param iterables collection of iterables to merge @param comparator comparison function for sorting @return merged, sorted iterable or null if input is invalid
4 Finds the index of the first element matching a given predicate in an iterator. @param iterator Iterator to search @param predicate Predicate function to evaluate elements against @return Index of matching element, or -1 if not found
5 Creates a builder for sorted set multimaps with custom comparator. @param comparator comparison function for values
6 Configures the multimap to use a set of enum values of type V0. @param valueClass Class of the enum values
7 Computes the union of two sets. @param set1 first input set @param set2 second input set @return a SetView object representing the union of both sets
8 Computes the intersection of two sets. @param set1 first set @param set2 second set @return SetView representing the intersection of both sets
9 Computes the difference between two sets. @param set1 first set @param set2 second set (elements present in this set will be excluded from the result) @return SetView representing the elements unique to set1 and not present in set2
10 Computes the symmetric difference between two sets. @param set1 first input set @param set2 second input set @return SetView representing the symmetric difference
11 Searches for the first occurrence of a boolean array within another. @param array The array to search in @param target The target array to find (must be non-empty) @return Index of the found array, or -1 if not found
12 Searches for the specified byte array within another. @param array search space @param target bytes to find (may be empty) @return index of first occurrence or -1 if not found
13 Searches for a substring in a character array. @param array the main character array @param target the target substring to search for @return index of the first occurrence or -1 if not found
14 Finds the index of the first occurrence of a double array in another. @param array array to search @param target array to find (must be non-empty) @return index of target array if found, -1 otherwise
15 Finds the first occurrence of a float array within another. @param array search array @param target target array to find @return index of target array in array, or -1 if not found
16 Searches for the first occurrence of a sequence in an array. @param array the array to search @param target the sequence to find @return index of the sequence if found, -1 otherwise
17 Finds the index of the first occurrence of a long array within another. @param array The array to search in @param target The array to search for @return Index of the target array (0-based) or -1 if not found
18 Searches for the first occurrence of a short array within another. @param array the array to search in @param target the array to search for @return index of the first match or -1 if not found
19 Creates a Guard instance satisfying the given condition. @param isSatisfied supplier of boolean value indicating satisfaction
20 Returns the default value for a given primitive type. @param type Class of the primitive type @return Default value as an object, or null if not applicable
21 Configures the Joiner to display null values as a custom string. @param nullText text to display for null elements
22 Initializes the helper with the given class name. @param className non-null class identifier
23 Retrieves non-null instances from an iterable of Optional values. @param optionals iterable of Optional values
24 Splits the input sequence into an Iterable of substrings. @param sequence character sequence to split
25 Pads the start of a given string to a specified minimum length with a specified character. @param string input string to pad @param minLength target minimum length @param padChar character used for padding
26 Pads the input string to a minimum length by appending the specified pad character. @param string input string @param minLength minimum desired length @param padChar character to append for padding
27 Throws the specified exception type if it's an instance of the given class. @param throwable the exception to check @param declaredType the expected exception class
28 Throws the given unchecked Throwable, propagating its type (RuntimeException or Error). @param throwable unchecked exception to propagate
29 Retrieves the causal chain of a given throwable. @param throwable input throwable object @return List<Throwable> containing the causal chain, or an empty list if null
30 Creates an asynchronously reloading cache loader. @param loader original loader instance @param executor executor for asynchronous operations
31 Creates an asynchronous removal listener by wrapping the given listener in a task executed on the specified executor. @param listener original removal listener @param executor thread pool to execute the listener asynchronously
32 Retrieves the specified column as a Map of row keys to values. @param columnKey unique identifier for the desired column @return Map of row keys to values or an empty map if not found
33 Retrieves a map of column keys to values for the specified row. @param rowKey unique row identifier @return Map of columns to values or an empty map if not found
34 Maps elements from one Spliterator to another using a provided function. @param fromSpliterator input Spliterator @param function mapping function @return mapped Spliterator or null if input is null
35 Filters elements from one Spliterator to another based on a predicate. @param fromSpliterator source Spliterator @param predicate filtering condition @return filtered Spliterator or null if empty
36 Checks if a collection safely contains an object. @param collection the collection to search @param object the object to find @return true if found, false or exception occurs
37 Safely removes an element from a collection. @param collection the collection to modify @param object the element to remove, or null for no-op
38 Checks if the elements in an iterable are in ascending order. @param iterable collection of objects to compare @param comparator custom logic for comparing objects
39 Determines whether the elements in an iterable are strictly ordered according to a comparator. @param iterable iterable of objects to compare @param comparator custom comparator logic to apply
40 Creates a comparator for Optional values that prioritizes empties first. @param valueComparator comparator for the wrapped value
41 Creates a comparator for Optional values based on the given value comparator. @param valueComparator comparator to use when comparing Optional values
42 Returns a contiguous set containing elements up to and optionally including the specified element. @param toElement the upper bound of the returned set @param inclusive whether to include the toElement in the result
43 Returns the tail set of contiguous elements starting from the specified element. @param fromElement starting element @param inclusive whether to include the start element in the result
44 Adds an element to the queue, potentially removing the oldest one due to size constraints. @param e the new element to add
45 Wraps the given iterable, throwing NPE if null. @param iterable nullable iterable to validate
46 Adds a single element to the immutable list. @param element nullable object to be added
47 Configures key ordering using the specified comparator. @param keyComparator comparator to sort keys by
48 Sets a custom comparator to order multimap values. @param valueComparator Comparator for ordering values; nulls are allowed
49 Adds a single element to the multiset. @param element the element to be added
50 Adds specified copies of an element to the multiset. @param element element to add @param occurrences number of copies to add
51 Sets the specified count for an element in the multiset. @param element element to modify @param count new count value
52 Converts an iterable to an immutable sorted multiset. @param comparator custom ordering comparator @param elementFunction maps each input to its corresponding multiset element @param countFunction maps each input to its multiplicity in the output
53 Returns a view of elements in this set strictly less than {@code toElement}. @param toElement upper bound (exclusive) @param inclusive whether the upper bound is included
54 Returns a view of elements in this set that are greater than or equal to the specified element. @param fromElement the lower bound (inclusive if positive, exclusive if negative) @return ImmutableSortedSet view of matching elements
55 Creates an unmodifiable iterable from a given iterable collection. @param iterable input iterable to make read-only @return unmodifiable Iterable of type T or null if input is null
56 Wraps an immutable collection in an unmodifiable iterable. @param iterable Immutable collection to wrap
57 Removes the first iterable element matching a given predicate. @param removeFrom iterable collection to search @param predicate condition to match elements against @return first matching element or null if not found
58 Returns an iterable that cycles through the elements of the given iterable. @param iterable input iterable
59 Filters an iterable collection based on a predicate, returning an Iterable of elements that match the condition. @param unfiltered original iterable to filter @param retainIfTrue predicate to apply for filtering
60 Transforms elements of an iterable collection using a provided function. @param fromIterable source iterable @param function mapping function to apply to each element @return transformed iterable with applied function
61 Creates a consuming iterable from the given input, ensuring it's not null. @param iterable nullable iterable to consume @return ConsumingIterable object or null if input is null
62 Returns an unmodifiable iterator over the elements of the given iterator. @param iterator input iterator to wrap
63 Wraps an existing iterator in an unmodifiable view. @param iterator the input iterator to be wrapped
64 Removes all specified elements from the iterator. @param removeFrom iterator to modify @param elementsToRemove collection of elements to remove @return true if any elements were removed, false otherwise
65 Removes elements from iterator that match the given predicate. @param removeFrom iterator to modify @param predicate condition to apply for removal @return true if any element was removed, false otherwise
66 Removes elements from the iterator that are not present in the specified collection. @param removeFrom iterator to modify @param elementsToRetain collection of elements to retain @return true if any elements were removed, false otherwise
67 Adds all elements from the given iterator to the specified collection. @param addTo Collection to add elements to @param iterator Iterator of elements to add @return true if any elements were added, false otherwise
68 Creates an iterator that cycles through the given iterable indefinitely. @param iterable input iterable to cycle through @return Iterator object for cycling through the iterable
69 Filters an iterator based on a predicate. @param unfiltered original iterator @param retainIfTrue predicate to apply during filtering @return filtered UnmodifiableIterator or null if empty
70 Checks if all elements in an iterator match a given predicate. @param iterator Iterator to evaluate @param predicate Predicate function to apply to each element @return True if all elements match, false otherwise
71 Finds the first element in an iterator that satisfies a given predicate. @param iterator iterator to search @param predicate condition to match @return matching element or throws NoSuchElementException if not found
72 Transforms elements of an iterator using a provided function. @param fromIterator input iterator to transform @param function mapping function to apply to each element @return transformed iterator with new type T
73 Creates an unmodifiable iterator that consumes elements from the given iterator. @param iterator input iterator to consume elements from @return consuming iterator or null if input is null
74 Clears the iterator by removing all elements. @param iterator Iterator object to be cleared
75 Creates an unmodifiable iterator from a given Enumeration. @param enumeration the input Enumeration to wrap
76 Wraps the given iterator, validating it's not null. @param iterator nullable iterator to validate @return validated PeekingIterator instance
77 Creates a new EnumMap instance for the specified enum type. @param type enum class to associate with the map @return newly created EnumMap
78 Creates an unmodifiable view of the given map entry. @param entry existing Entry object to create a read-only view of
79 Transforms an existing map entry by applying a custom transformation. @param transformer EntryTransformer instance to apply the transformation @param entry Existing map entry to transform @return The transformed Entry object or null if input is invalid
80 Transforms entries between map types using a provided function. @param transformer mapping function to apply
81 Safely retrieves a value from the map by key. @param map non-null map instance @param key nullable key to look up @return value associated with the key or null if not found or invalid
82 Checks if the given map contains a specific key while preventing ClassCastExceptions and NPEs. @param map non-null map instance @param key nullable object to search for @return true if key is present, false otherwise or on exceptions
83 Safely removes a value from the map by key, handling potential exceptions. @param map the input map @param key the nullable key to remove @return the removed value or null if not found or an exception occurred
84 Iterates over key-value pairs and applies the given action. @param action BiConsumer to apply to each entry
85 Configures the MultimapBuilder to use a tree-based data structure with keys ordered by the provided comparator. @param comparator key comparison function @return MultimapBuilderWithKeys instance with configured tree keys
86 Configures the MultimapBuilder to use enum keys. @param keyClass Class of enum keys
87 Returns an unmodifiable view of the given immutable multimap. @param delegate immutable multimap to wrap
88 Returns an unmodifiable view of the provided set multimap. @param delegate immutable set multimap to wrap
89 Returns an unmodifiable list multimap view of the provided delegate. @param delegate The underlying multimap, must not be null
90 Iterates over the multiset's entries, applying the given action for each element and its count. @param action callback to execute for each entry in the multiset
91 Applies the given action to each element in the multiset. @param action Consumer function to process elements
92 Creates an unmodifiable view of the given multiset. @param multiset immutable multiset to wrap
93 Computes the union of two multisets. @param multiset1 first multiset @param multiset2 second multiset @return new Multiset containing all elements from both input multisets.
94 Computes the intersection of two multisets. @param multiset1 first multiset @param multiset2 second multiset @return a new multiset containing elements common to both input multisets
95 Computes the union of two multisets. @param multiset1 first multiset @param multiset2 second multiset @return a new Multiset containing all elements from both input multisets
96 Computes the difference of two multisets, removing elements present in multiset2. @param multiset1 source multiset @param multiset2 multiset to remove elements from @return new Multiset containing elements in multiset1 but not in multiset2
97 Checks whether the occurrences of a sub-multiset are contained within a superset. @param superMultiset superset multiset @param subMultiset sub-multiset to check for containment
98 Retains specified occurrences in a Multiset and modifies it accordingly. @param multisetToModify the Multiset to be modified @param occurrencesToRetain the occurrences to retain in the Multiset @return true if changes were made, false otherwise
99 Removes occurrences of elements from one multiset in another. @param multisetToModify the multiset to modify @param occurrencesToRemove the multiset containing elements to remove @return true if any elements were removed, false otherwise
100 Retains all elements present in the provided multiset or collection. @param elementsToRetain Collection of elements to retain @return true if retention operation was successful, false otherwise
101 Creates an Ordering instance from a given input, throwing NPE if null. @param ordering nullable input to validate @return Ordering object or throws NPE if null
102 Drains a specified number of elements from the blocking queue into the provided collection. @param q BlockingQueue to drain from @param buffer Collection to add drained elements to @param numElements Number of elements to drain @param timeout Timeout duration in the specified time unit @param unit Time unit for the timeout @return Number of elements successfully added to the buffer
103 Drains elements from a blocking queue into a collection, handling interruptions and timeouts. @param q the blocking queue to drain from @param buffer the collection to add drained elements to @param numElements the maximum number of elements to drain @param timeout the duration to wait for additional elements @param unit the time unit of the timeout @return the number of elements successfully added to the buffer
104 Checks if the given value lies within the range. @param value object to check
105 Creates a new TreeSet instance with the specified comparator. @param comparator non-null comparator for ordering elements
106 Combines two streams into a single stream of results. @param streamA first input stream @param streamB second input stream @param function mapping function to apply to each pair of elements @return Stream of results or null if either input is empty
107 Maps a stream of objects to a new stream with indexed values. @param stream input stream of objects @param function mapping function that takes an object and index as input @return Stream of mapped values
108 Maps elements of an IntStream to a Stream of type R using the provided function. @param stream IntStream to process @param function IntFunctionWithIndex to apply to each element and its index @return Stream of type R or null if input is null
109 Maps a LongStream to a Stream of type R using the provided function. @param stream LongStream to be mapped @param function function that takes index and value as parameters @return Stream of type R with mapped elements
110 Maps a DoubleStream to a Stream of type R by applying a function with index. @param stream input DoubleStream @param function mapping function that takes a double and an index as arguments
111 Merges a specified range with the existing map, updating values as needed. @param range Range to merge @param value Value to use for unmapped ranges @param remappingFunction Function to apply when remapping existing entries
112 Creates a TreeTraverser instance with custom child node retrieval. @param nodeToChildrenFunction function to obtain iterable children for a given node
113 Performs pre-order traversal of the tree, starting from the given root node. @param root tree root to begin traversal
114 Performs post-order tree traversal, yielding nodes in the order they are visited. @param root the root node of the tree @return a FluentIterable containing the traversed nodes
115 Performs breadth-first traversal of the tree starting from the specified root node. @param root the root node of the tree
116 Adds a character escape mapping to the builder. @param c character to be escaped @param r replacement string for the character
117 Adds a custom escape mapping for the specified character. @param c character to escape @param replacement new string representation for the character
118 Retrieves the Unicode code point at a specified index within a character sequence. @param seq input character sequence @param index current position in the sequence @param end end of the valid range for the index @return Unicode code point or throws exception if out of bounds or invalid surrogate found
119 Initializes DeadEvent with source and event. @param source nullable object that generated the event @param event nullable event to be captured
120 Handles subscriber exceptions with the provided context. @param e throwable exception to handle @param context SubscriberExceptionContext object containing relevant information
121 Invokes the target subscriber method with the provided event. @param event Object representing the dispatched event
122 Initializes the SubscriberExceptionContext with event bus, event, subscriber, and subscriber method. @param eventBus EventBus instance @param event processed event object @param subscriber subscriber object @param subscriberMethod invoked subscriber method
123 Creates an immutable graph copy from the given graph. @param graph input graph to copy
124 Creates an immutable network copy from the provided one. @param network source network to clone (must not be null)
125 Creates an immutable copy of the given graph. @param graph input graph to be copied
126 Advances traversal by visiting next node in graph. @param horizon deque of iterators to successor nodes
127 Initializes HashingInputStream with a hashing function and input stream. @param hashFunction hashing algorithm to use @param in input stream to read from
128 Initializes the writer with an appendable target. @param target nullable Appendable object to write to
129 Creates a byte sink from a character sink, applying the encoding scheme. @param encodedSink character sink to encode
130 Creates a byte source from a character source, applying the encoding scheme. @param encodedSource input character stream
131 Initializes the reader with a CharSequence. @param seq input character sequence
132 Copies reader content into a StringBuilder. @param from Reader source @param to StringBuilder destination @return number of characters copied
133 Copies character data from a Reader to a Writer. @param from input Reader @param to output Writer @return total number of characters copied
134 Skips a specified number of characters from the given Reader. @param reader character stream to read from @param n number of characters to skip
135 Initializes CountingInputStream with the given InputStream. @param in input stream to be wrapped
136 Initializes CountingOutputStream with an existing OutputStream. @param out OutputStream to wrap and track bytes written
137 Creates a BufferedReader from a File with specified Charset. @param file the source File @param charset the character encoding for reading
138 Creates a buffered writer for the specified file and character set. @param file target file @param charset encoding scheme
139 Updates the last modified timestamp of a file. @param file File object
140 Creates parent directories for the given file. @param file target file
141 Extracts file extension from full name. @param fullName complete filename to parse
142 Extracts file name without extension. @param file full path to the file
143 Initializes LittleEndianDataInputStream from input stream. @param in InputStream object
144 Initializes the output stream with the specified OutputStream. @param out OutputStream to be wrapped
145 Sets file last modified time to current system time. @param path file path to update
146 Initializes the filter with a specified regular expression pattern. @param pattern regex pattern to match file names against
147 Checks if a BigInteger is a power of two. @param x BigInteger value to examine
148 Iterates over double values in the array, applying the provided DoubleConsumer. @param consumer callback function to process each value
149 Iterates over array elements, applying the provided IntConsumer to each. @param consumer callback function to process individual integers
150 Iterates over immutable long array and applies a consumer to each element. @param consumer LongConsumer function to be executed on each array value
151 Checks if given Class is a wrapper type. @param type Class to check @return true if wrapper type, false otherwise
152 Wraps a primitive or wrapper class with its corresponding wrapper class. @param type the primitive or wrapper class to wrap @return the wrapped Class object, or the input type if no mapping found
153 Unwraps the primitive wrapper class from its corresponding primitive type. @param type Class object to unwrap @return The original class if not found in mappings, otherwise the primitive type
154 Parses a string representation of an unsigned byte value. @param string string to parse @param radix radix for parsing @return the parsed unsigned byte value or throws NPE/NumberFormatException as necessary
155 Parses a string as an unsigned int with specified radix. @param string input string to parse @param radix base of the number in the string
156 Initializes schedule with specified delay and time unit. @param delay duration to wait before executing tasks @param unit time unit for the delay (e.g., TimeUnit.SECONDS)
157 Updates and returns the atomic long value associated with a given key. @param key unique map key @param updaterFunction function to apply for updating the value @return updated long value or null if not found
158 Updates the value associated with the given key and returns the new value. @param key unique map key @param updaterFunction function to compute new value @return updated long value or initial value if not found
159 Converts a Callable to an AsyncCallable, executing tasks asynchronously. @param callable task to execute @param executorService service for submitting tasks @return AsyncCallable instance that wraps the original task
160 Creates a Callable task with thread renaming functionality. @param callable the original Callable to execute @param nameSupplier provides a new thread name for execution
161 Creates a Runnable that renames the executing thread. @param task the task to execute @param nameSupplier supplier of new thread name
162 Returns an async closing function with the given async function, without managing a closer. @param function the async function to wrap
163 Wraps a given FluentFuture, throwing NPE if null. @param future nullable FluentFuture to validate
164 Lazily transforms the result of a future using a given function. @param input future to transform @param function function to apply to the future's result @return a new future with the transformed result
165 Creates a decorator executor that renames threads based on the provided supplier. @param executor underlying executor service @param nameSupplier function to generate thread names
166 Creates a decorator executor service that renames threads. @param service underlying executor service @param nameSupplier supplier of thread names @return decorated executor service
167 Creates a decorator for renaming threads in ScheduledExecutorService. @param service executor service to decorate @param nameSupplier supplier of custom thread names @return decorated ScheduledExecutorService instance
168 Initializes the SequentialExecutor with a specified Executor. @param executor executor instance to manage task execution
169 Executes a task using the delegate Executor, ensuring sequential execution and maintaining control over worker state. @param task Runnable to be executed
170 Sets an uncaught exception handler for threads created by the factory. @param uncaughtExceptionHandler handler to catch and handle unexpected exceptions
171 Sets the custom thread factory to be used. @param backingThreadFactory custom thread factory instance
172 Joins the specified thread uninterruptibly, waiting up to the given timeout. @param toJoin thread to join @param timeout maximum time to wait in the specified unit @param unit TimeUnit for the timeout
173 Sets the ticker to be used for cache statistics. @param ticker non-null Ticker instance
174 Configures a custom removal listener for cache events. @param listener Removal event handler
175 Calculates and returns the dataset mean. @return The calculated mean value
176 Returns the minimum value in the dataset. @throws IllegalStateException if the dataset is empty
177 Returns the maximum value in the dataset. @return The greatest value if count > 0; otherwise, undefined
178 Calculates and returns the mean of accumulated data points. @return Mean value or throws IllegalStateException if no data points have been added
179 Retrieves the minimum value from accumulated data points. @return The smallest value in the dataset; throws IllegalStateException if empty.
180 Returns the maximum value from accumulated data points. @return Maximum value; throws IllegalStateException if no data is available
181 Initializes a latch to be triggered upon closure of all resources.
182 Converts entire input string to lowercase.
183 Converts an ASCII character to lowercase. @param c the input ASCII character
184 Converts a string to uppercase ASCII representation.
185 Converts a character to uppercase ASCII if it's lowercase. @param c input character
186 Truncates a character sequence to a specified maximum length and appends a truncation indicator. @param seq the input sequence @param maxLength the maximum allowed length, excluding the indicator @param truncationIndicator the string to append when truncating @return the truncated sequence or the original if it fits within maxLength
187 Writes this Stats object to the provided ByteBuffer. @param buffer output buffer
188 Constrains a short value within a specified range. @param value the value to constrain @param min minimum allowed value @param max maximum allowed value
189 Sets the thread priority to a specified value. @param priority new thread priority (MIN_PRIORITY <= value <= MAX_PRIORITY)
190 Compares two character sequences while ignoring case differences. @param s1 first sequence @param s2 second sequence @return true if equal, false otherwise
191 Initializes CacheStats object with performance metrics. @param hitCount number of cache hits @param missCount number of cache misses @param loadSuccessCount number of successful loads @param loadExceptionCount number of failed loads @param totalLoadTime total time spent loading data @param evictionCount number of evictions
192 Initializes multimap from an empty map. @param map empty map to initialize from
193 Sets the underlying multimap data structure. @param map Map of key-value pairs, where each key is associated with a collection of values
194 Initializes multiset with an empty backing map. @param backingMap map of elements to their counts
195 Returns a contiguous subset of this set, inclusive or exclusive as specified. @param fromElement the start element (inclusive/exclusive) @param fromInclusive whether start is inclusive @param toElement the end element (inclusive/exclusive) @param toInclusive whether end is inclusive
196 Initializes EnumMultiset for a given enum type. @param type the target enum class
197 Returns a subset of this sorted set from the specified fromElement (inclusive if fromInclusive is true) up to but not including toElement (exclusive if toInclusive is false). @param fromElement starting element @param fromInclusive whether fromElement is included in the subset @param toElement ending element @param toInclusive whether toElement is included in the subset @return subset of this sorted set
198 Partitions the iterable into sub-lists of specified size. @param iterable input collection to partition @param size maximum number of elements per sublist @return Iterable of sub-lists or empty if size is invalid
199 Partitions the iterable into chunks of a specified size, padding with nulls if necessary. @param iterable source collection @param size chunk size @return Iterable of List elements, each containing up to 'size' elements from the original iterable.
200 Sets the expected size of the MinMaxPriorityQueue. @param expectedSize non-negative integer
201 Sets the maximum size of the MinMaxPriorityQueue. @param maximumSize non-negative integer
202 Initializes AbstractStreamingHasher with buffer and chunk sizes. @param chunkSize size of each hashing chunk @param bufferSize total buffer size (must be a multiple of chunkSize)
203 Ensures a non-negative double value. @param value input value to be validated
204 Creates a matcher that matches the specified character. @param match the character to be matched
205 Creates a matcher that excludes the specified character from matching. @param match character to exclude
206 Collapses character sequence by replacing matches with a specified replacement char. @param sequence CharSequence to process @param replacement replacement character for matches @return collapsed string as String result
207 Initializes converter with null handling option enabled by default.
208 Compares the current Wrapper instance with another object. @param obj Object to compare @return true if equivalent, false otherwise
209 Determines equivalence between two objects. @param t first object to compare @param u second object to compare
210 Reclaims a value reference by key and hash, updating the segment's count and table. @param key the key to search for @param hash the hash code of the value to reclaim @param valueReference the weak value reference to remove @return true if the value was reclaimed, false otherwise
211 Removes a weak value reference from the segment's table for testing purposes. @param key the key to search for @param hash the hash code of the key @param valueReference the weak value reference to remove @return true if removed, false otherwise
212 Checks if two iterators contain the same elements. @param iterator1 first iterator to compare @param iterator2 second iterator to compare @return true if both iterators are equal, false otherwise
213 Compares the current entry with another for equality. @param object other Multiset.Entry to compare
214 Determines if a graph traversal can proceed without reusing an edge. @param graph the graph to traverse @param nextNode the node to visit next @param previousNode the previously visited node (null for initial traversal) @return true if traversal can continue, false otherwise
215 Computes hash code based on equivalence relationship. @return hash code or 0 if reference is null
216 Initializes the finalizer queue with custom cleanup actions. @param referent object to manage references for @param queue reference queue instance
217 Initializes soft reference with cleanup integration. @param referent object to be referenced @param queue FinalizableReferenceQueue for cleanup management
218 Initializes a weak reference with cleanup integration. @param referent the object to be referenced @param queue the finalizer queue for lifecycle management
219 Creates a function that always returns a constant value. @param value the fixed value to be returned by this function
220 Parses a bracketed host-port string into separate host and port components. @param hostPortString input string in the format "[host]:port"
221 Requires brackets for IPv6 address representation.
222 Decrements the given InetAddress by one. @param address IP address to decrement
223 Increments the given IP address by one. @param address InetAddress object to increment @return incremented InetAddress object or throws exception if would wrap
224 Creates a proxy instance for the specified interface type, invoking methods on the provided handler. @param interfaceType target interface type @param handler invocation handler to use with the proxy
225 Retrieves the first type argument of its generic superclass. @return Type object representing the captured type
226 Appends iterable elements to an Appendable with customizable separator. @param appendable target Appendable @param parts iterator of elements to append @return the modified Appendable or throws IOException if occurs
227 Appends map entries to a StringBuilder. @param builder target StringBuilder @param entries iterable of key-value pairs
228 Joins map entries into a string representation. @param entries iterator of key-value pairs
229 Configures Joiner to treat input as key-value pairs with specified separator. @param keyValueSeparator character used to separate keys and values
230 Generates a string representation of the object by iterating over its name-value pairs. @return A formatted string containing the object's properties and values
231 Retrieves the immutable set of values associated with a given key. @param key unique identifier @return ImmutableSet of V objects or an empty set if not found
232 Retrieves resource by name from the classpath. @param resourceName name of the resource to fetch @return URL object representing the resource, or throws exception if not found
233 Returns an empty Optional instance.
234 Converts Google Optional instance to Java Util Optional type. @param googleOptional Optional value from Google API @return Converted Optional value or null if input is null
235 Returns null if input string is null or empty; otherwise returns the original string.
236 Checks if input string is null or empty. @param string input string
237 Skips a specified number of elements from the beginning of an iterable. @param iterable input collection to skip elements from @param numberToSkip count of elements to skip (must be non-negative) @return new iterable with skipped elements removed
238 Limits the number of elements in an iterable to a specified size. @param iterable input collection @param limitSize maximum number of elements to include
239 Advances the given iterator by a specified nonnegative number of steps. @param iterator iterator to advance @param numberToAdvance number of steps to advance (must be >= 0) @return actual number of steps advanced, or 0 if iterator is exhausted or numberToAdvance is negative
240 Limits the number of elements returned by an iterator. @param iterator input iterator to be limited @param limitSize maximum number of elements to return
241 Creates a traverser for tree structures. @param tree SuccessorsFunction representing the tree
242 Computes a positive number of bits that is a multiple of 32. @param bits input number of bits
243 Creates an InetAddress from a BigInteger representation. @param address the BigInteger to convert @param isIpv6 whether the conversion should be for IPv6 or IPv4 @return the resulting InetAddress object or throws exception if invalid
244 Repeats the input string a specified number of times. @param string input string to repeat @param count repetition count (must be non-negative)
245 Initializes a BloomFilter instance with the specified parameters. @param bits LockFreeBitArray for storing hash values @param numHashFunctions number of hash functions to use (must be > 0 and <= 255) @param funnel Funnel instance for serializing elements @param strategy Strategy instance for managing data structure
246 Combines an iterable of hash functions into a concatenated function. @param hashFunctions collection of hash functions to concatenate
247 Initializes SipHashFunction with parameters: number of iterations for compression and finalization, and keys. @param c positive integer for SipRound iterations during Compression @param d positive integer for SipRound iterations during Finalization @param k0 long key value @param k1 long key value
248 Initializes FileBackedOutputStream with specified memory threshold and reset behavior. @param fileThreshold non-negative memory limit before switching to file storage @param resetOnFinalize whether to automatically reset the stream on finalize() call
249 Retrieves Inet4Address from given 4-byte byte array. @param bytes 4-byte byte array representing IPv4 address
250 Ensures the capacity of a boolean array to meet minimum length and padding requirements. @param array input boolean array @param minLength minimum required length @param padding additional space to reserve
251 Ensures the given byte array meets specified capacity requirements. @param array input byte array @param minLength minimum length required @param padding additional bytes to add if necessary
252 Ensures the capacity of a character array to meet minimum length and padding requirements. @param array input character array @param minLength minimum required length @param padding additional characters to append
253 Ensures double array capacity by resizing it to specified minimum length with optional padding. @param array input double array @param minLength minimum required array length @param padding additional elements to append (if needed) @return resized double array of guaranteed minimum length + padding
254 Ensures float array capacity meets specified minimum length with optional padding. @param array input float array @param minLength minimum required length @param padding additional elements to add beyond minimum length
255 Ensures integer array capacity meets minimum length requirements and adds padding. @param array input array @param minLength minimum required length @param padding additional space to reserve
256 Ensures the capacity of a long array meets specified minimum length and padding requirements. @param array input array @param minLength minimum required length @param padding additional elements to add
257 Ensures the capacity of a short array to meet minimum length requirements with optional padding. @param array input short array @param minLength minimum required length @param padding additional elements to append
258 Converts a long to a character, checking for out-of-range values. @param value the long value to convert
259 Safely casts long to int, checking for potential overflow. @param value long value to cast
260 Caste long to short while checking for out-of-range values. @param value long value to cast
261 Safely casts a long value to a byte. @param value the long value to cast
262 Safely casts a long value to an unsigned byte. @param value the long value to cast
263 Converts a long to an unsigned integer. @param value long value to cast
264 Creates a fixed-delay scheduler with specified timing configuration. @param initialDelay time to wait before first execution @param delay interval between subsequent executions @param unit time unit for delay
265 Creates a fixed-rate schedule with specified timing parameters. @param initialDelay time to wait before first execution @param period interval between subsequent executions @param unit TimeUnit for period and initial delay
266 Constrains a character within a specified range. @param value character to constrain @param min minimum allowed value @param max maximum allowed value
267 Constrains a long value within a specified range. @param value the value to constrain @param min minimum allowed value (inclusive) @param max maximum allowed value (inclusive)
268 Fetches a resource by name from the specified class's context. @param contextClass Class containing the resource @param resourceName Name of the resource to retrieve @return URL pointing to the resource or null if not found
269 Starts the stopwatch; ensures it's not already running. @CanIgnoreReturnValue
270 Stops the stopwatch and updates elapsed time. @CanIgnoreReturnValue
271 Validates precondition for removing from collection. @param canRemove boolean indicating whether removal is allowed
272 Configures the Builder to order entries by their associated values. @param valueComparator comparator for ordering values
273 Sets the initial cache capacity. @param initialCapacity non-negative integer value
274 Sets the concurrency level for cache instances. @param concurrencyLevel positive integer value
275 Sets the initial capacity of the map. @param initialCapacity non-negative value for the map's initial capacity
276 Sets the desired concurrency level for the map. @param concurrencyLevel positive integer value
277 Sets the maximum cache size; overrides previous settings. @param maximumSize non-negative integer size limit
278 Sets the maximum cache weight. @param maximumWeight non-negative value
279 Configures cache to use specified weighing strategy. @param weigher weighing function to apply
280 Sets cache expiration after write operation. @param duration non-negative time duration @param unit time unit (e.g., TimeUnit.SECONDS)
281 Sets cache expiration after last access to specified duration. @param duration positive time span @param unit TimeUnit enum value (e.g. seconds, milliseconds)
282 Sets the cache to refresh after each write operation. @param duration positive time duration for refresh @param unit time unit (e.g. TimeUnit.MINUTES)
283 Sets the equivalence function for cache keys. @param equivalence equivalence function (may be null)
284 Sets the equivalence function for cache values. @param equivalence equivalence function (may be null)
285 Sets the key equivalence for map comparison. @param equivalence custom Equivalence instance (may be null)
286 Initializes a new TypeToken instance by capturing the runtime type and checking for type variables. @throws IllegalStateException if the captured type is a type variable
287 Returns the failure cause of the service. @return The Throwable object representing the cause of failure, or null if not failed
288 Validates element index against collection size. @param index index to validate @param size collection size @param desc descriptive message for error output
289 Validates collection index position. @param index target index value @param size collection size @param desc descriptive message for error output @return error message if index is invalid; otherwise null
290 Creates an always-true predicate with narrowed type T.
291 Creates an always-false predicate of type T.
292 Creates a predicate that checks for nullity.
293 Creates a predicate that checks for non-null values. @return A predicate of type T or its supertype
294 Combines two predicates into an AND operation. @param first predicate to include @param second predicate to include
295 Combines two predicates with OR logic. @param first predicate to evaluate @param second predicate to evaluate
296 Returns a Splitter instance that excludes empty results.
297 Limits the number of splits to a specified maximum. @param maxItems the maximum number of splits allowed
298 Splits the given character sequence into a list of strings based on the current strategy. @return Unmodifiable list of split strings or empty list if input is null
299 Returns a formatted string representation of this property. @return "key=value"
300 Converts elapsed time to specified unit. @param desiredUnit target time unit (e.g. TimeUnit.SECONDS, TimeUnit.MILLISECONDS)
301 Returns elapsed time as a duration. @return Time interval in nanoseconds converted to a Duration object
302 Returns human-readable string representation of elapsed time. @return formatted string with elapsed time value and unit (e.g. "3.14 s")
303 Returns an empty string if input is null. @param string input string to check
304 Returns the common prefix between two strings. @param a first input string @param b second input string @return prefix shared by both inputs as a String
305 Finds the common suffix between two strings. @param a first CharSequence @param b second CharSequence @return common suffix as a String or an empty string if no match found
306 Creates a supplier that returns a single, cached instance. @param instance the instance to be supplied
307 Initializes a new instance of the system ticker.
308 Verifies that a boolean condition is true. @param expression the condition to be verified
309 Verifies a boolean condition and throws an exception with formatted error message otherwise. @param expression condition to be verified @param errorMessageTemplate template for error message with placeholder character p1
310 Verifies a boolean condition and throws an exception with a formatted error message on failure. @param expression condition to be verified @param errorMessageTemplate template for the error message @param p1 first parameter for formatting the error message
311 Verifies a boolean expression and throws an exception with formatted error message if not met. @param expression condition to be verified @param errorMessageTemplate template for error message with placeholder for parameter p1 @param p1 first parameter used in the error message template
312 Verifies a boolean condition and throws an exception with a formatted error message on failure. @param expression condition to be verified @param errorMessageTemplate template for the error message @param errorMessageArgs variable arguments for the error message
313 Verifies a boolean expression and throws an exception with a formatted error message if false. @param expression condition to verify @param errorMessageTemplate template for error message with placeholders p1 and p2
314 Validates boolean condition; throws exception with formatted error message if false. @param expression condition to verify @param errorMessageTemplate template for error message @param p1 first parameter for formatting error message @param p2 second parameter for formatting error message
315 Verifies a boolean condition; throws exception with formatted error message on failure. @param expression condition to validate @param errorMessageTemplate template for error message (with placeholders for p1 and p2) @param p1 first placeholder value @param p2 second placeholder value
316 Verifies a boolean condition and throws a VerifyException with formatted error message if false. @param expression boolean condition to verify @param errorMessageTemplate template for error message @param p1 first placeholder in error message template (optional) @param p2 second placeholder in error message template
317 Verifies a boolean condition and throws an exception with formatted error message if not met. @param expression condition to be verified @param errorMessageTemplate template for error message @param p1 placeholder in error message (type: char) @param p2 placeholder in error message (type: int)
318 Verifies a boolean condition; throws an exception with formatted error message if false. @param expression condition to be verified @param errorMessageTemplate template for the error message @param p1 and p2 additional parameters for formatting the error message
319 Verifies a boolean expression and throws an exception with a formatted error message if not true. @param expression condition to be verified @param errorMessageTemplate template for the error message @param p1 first parameter for error message formatting (long) @param p2 second parameter for error message formatting (int)
320 Verifies a boolean condition and throws an exception with formatted error message if not met. @param expression condition to verify @param errorMessageTemplate template for error message @param p1 first parameter (optional) @param p2 second parameter
321 Verifies a boolean expression and throws an exception with formatted error message if false. @param expression condition to be verified @param errorMessageTemplate template for error message @param p1 first placeholder in error message (e.g. '%s') @param p2 second placeholder in error message (e.g. '%d')
322 Verifies a boolean condition and throws an exception with formatted error message if not met. @param expression the condition to verify @param errorMessageTemplate template for error message with placeholders for parameters (p1, p2)
323 Validates a boolean expression and throws an exception with formatted error message if not true. @param expression condition to verify @param errorMessageTemplate template for error message (with placeholders %s) @param p1 first placeholder value @param p2 second placeholder value
324 Verifies a boolean condition; throws VerifyException if not met. @param expression condition to be verified @param errorMessageTemplate template for error message @param p1 optional first parameter for error message formatting @param p2 second parameter (long) for error message formatting
325 Verifies a boolean condition and throws a VerifyException with formatted error message if false. @param expression condition to verify @param errorMessageTemplate template for error message with placeholders %s and %d @param p1 first placeholder value @param p2 second placeholder value (optional)
326 Verifies a boolean expression and throws an exception with the formatted error message if it's false. @param expression condition to be verified @param errorMessageTemplate template for the error message @param p1 first placeholder in the error message template @param p2 second placeholder in the error message template (optional)
327 Verifies a boolean condition and throws an exception with formatted error message if false. @param expression condition to verify @param errorMessageTemplate template for error message @param p1 first parameter for formatting @param p2 second parameter for formatting (may be null)
328 Verifies a boolean condition; throws exception with formatted error message otherwise. @param expression the condition to verify @param errorMessageTemplate template for detailed error message (if not met) @param p1 and @param p2 optional parameters for templating error message
329 Validates a boolean expression with optional parameters and throws a VerifyException on failure. @param expression condition to verify @param errorMessageTemplate template for error message @param p1 p2 p3 optional parameters for error message formatting
330 Verifies a boolean expression and throws an exception with a formatted error message if it fails. @param expression the condition to verify @param errorMessageTemplate template for the error message @param p1-p4 optional parameters to be used in the error message (may be null)
331 Cleans up a reference and potentially further references from the queue. @param firstReference initial reference to clean
332 Initializes a new instance of the SimpleStatsCounter class with default statistics values.
333 Aggregates statistics from another StatsCounter instance. @param other the StatsCounter to aggregate statistics from
334 Protected constructor to prevent direct instantiation of this abstract class.
335 Creates a linked hash map that preserves insertion order.
336 Adds multiple cache entries from a given map. @param m Map of key-value pairs to add
337 Invalidates multiple cache entries by unique identifiers. @param keys Iterable of cache entry keys to invalidate
338 Creates a new cache builder instance with default settings.
339 Loads all values for the specified keys, throwing an exception if unsupported. @param keys iterable of unique keys @return a map of loaded values (not actually returned in this method)
340 Calculates total cache requests by summing hit and miss counts. @return total requests
341 Calculates total successful loads by adding success and exception counts. @return total successful load count
342 Calculates cache load exception rate. @return load exception count as a percentage of total loads
343 Calculates the average cache load penalty. @return Average time spent loading successful and failed loads
344 Initializes an empty ForwardingCache instance.
345 Initializes an empty ForwardingCollection instance.
346 Initializes an empty ForwardingIterator instance.
347 Initializes an empty ForwardingMap instance.
348 Initializes an empty ForwardingMapEntry instance with default properties.
349 Initializes an empty ForwardingMultimap instance.
350 Initializes an empty ForwardingTable instance.
351 Initializes an empty ForwardingExecutorService instance with default settings.
352 Initializes an empty ForwardingFuture instance with default settings.
353 Drains and processes entries from the recency queue, re-adding any entries found in the access queue.
354 Creates a deep copy of the given entry with updated next reference. @param original original entry to copy @param newNext updated next reference in copied entry @return ReferenceEntry object or null if key or value is null
355 Removes entries from the column if they match a specified predicate. @param predicate condition to evaluate against each entry
356 Initializes the AggregateFuture by handling all completed futures and setting up listeners for each future. @param allMustSucceed flag indicating whether all futures must succeed
357 Creates an executor that propagates rejection to the provided future. @param delegate the underlying executor @param future the future to set exception in case of rejection
358 Retrieves a Future's result once it is done, throwing an exception if not. @param future the Future to get result from @return value of type V or null if not found, or throws ExecutionException
359 Retrieves a Future's result without being interrupted. @param future the Future to get result from @return value of type V or null if not found, or throws ExecutionException
360 Clears key and value reference queues based on cache entry references.
361 Returns the default equivalence strategy for comparing cache entries.
362 Returns the default equivalence strategy for object comparison.
363 Returns the default equivalence strategy.
364 Returns the default equivalence strategy.
365 Returns the default equivalence instance for object comparison within maps.
366 Checks if a cache entry has expired based on its access or write time. @param entry ReferenceEntry object to check @param now current timestamp in nanoseconds @return true if entry has expired, false otherwise
367 Calculates the total element count in the multiset. @return Total number of elements or saturated int on overflow
368 Calculates the number of elements in an iterator. @param iterator Iterator object to be counted
369 Calculates the linear time size of a multisets. @param multiset input Multiset object
370 Adds two integers with overflow safety. @param a first integer @param b second integer
371 Performs subtract operation with saturation. @param a first operand @param b second operand @return result of subtraction or saturated value on overflow
372 Safely multiplies two integers, saturating at INT_MAX/INT_MIN on overflow. @param a first integer @param b second integer @return product or saturated int value on overflow
373 Creates a compact set preserving insertion order on adds.
374 Initializes an empty unmodifiable iterator instance.
375 Initializes an iterator with a single element. @param firstOrNull optional initial element (null if none)
376 Creates an empty unmodifiable iterator instance.
377 Creates an empty, read-only collection. @return Unmodifiable view of an empty collection.
378 Retrieves and removes the first entry from the map. @return the first entry or null if empty
379 Retrieves and removes the first element from this set. @return first element or null if empty
380 Refreshes the collection if empty, synchronizing with ancestor if applicable. @throws ConcurrentModificationException if ancestor's delegate differs from this WrappedCollection's delegate
381 Retrieves a multimap view for the specified key. @param key unique identifier
382 Returns a collection of all associated values.
383 Returns a collection of all associated values.
384 Returns a collection of key-value pairs associated with this multimap. @return Collection of Entry objects or null if not initialized
385 Returns a collection of key-value pairs associated with this multimap. @return Collection of Entry objects
386 Creates a StringBuilder with optimal capacity based on collection size. @param size the number of elements in the collection
387 Creates a new ArrayList with specified capacity. @param initialArraySize the initial size of the list
388 Calculates the capacity for a map based on expected size. @param expectedSize the anticipated number of entries
389 Creates a builder for a list-based multimap with specified expected value count per key. @param expectedValuesPerKey the anticipated number of values per key
390 Creates a SetMultimapBuilder for hash set values with expected count. @param expectedValuesPerKey the expected number of values per key
391 Creates a builder for a linked set multimap with specified expected values per key. @param expectedValuesPerKey the anticipated number of values per key
392 Creates a MultimapBuilder with hash keys, expecting the specified number of entries. @param expectedKeys the anticipated count of key-value pairs
393 Creates a MultimapBuilder with linked hash keys and expected size. @param expectedKeys the expected number of keys
394 Updates the count of a specific element in the multiset. @param self the multiset instance @param element the element to update @param count the new count value @return the previous count value
395 Updates the count of an element in a multiset. @param self the multiset to modify @param element the element whose count is updated @param oldCount the current count @param newCount the new count @return true if the update was successful, false otherwise
396 Calculates the hash code of this ForwardingSet.
397 Compares this set to another object for equality. @param object the other object to compare with
398 Computes hash code based on map representation of multimap. @return Hash code value
399 Returns a string representation of this multimap in map format.
400 Removes all specified elements from this multiset. @param elementsToRemove collection of elements to remove
401 Compares this multiset with another object for equality. @param object the other object to compare
402 Compares this multiset with another object for equality. @param object the other object to compare
403 Retrieves the first element from an iterable or returns a default value if empty. @param iterable iterable to fetch from @param defaultValue value to return if iterable is empty @return first element or default value
404 Returns this multimap's backing map.
405 Returns a sorted set view of the keys in this multimap. @return a SortedSet containing all keys in this multimap
406 Returns a Comparator instance, either the provided one or a natural ordering. @param comparator nullable Comparator for custom sorting @return Comparator instance for default sort order if null
407 Returns string representation of table using row map.
408 Returns string representation of table using row map.
409 Serializes the Multimap to an ObjectOutputStream. @param stream the output stream
410 Serializes the HashMultimap instance to an ObjectOutputStream. @param stream the output stream @throws IOException if serialization fails
411 Serializes the ImmutableListMultimap to an ObjectOutputStream.
412 Populates a Multimap from a serialized ObjectInputStream. @param multimap target collection to populate @param stream input source containing serialized data
413 Returns an immutable set of column keys.
414 Returns an immutable set of row keys.
415 Returns an immutable set of keys from the underlying multimap.
416 Checks if ArrayTable contains specified column key. @param columnKey object to search for @return true if key exists, false otherwise
417 Checks if ArrayTable contains specified row key. @param rowKey object to search for @return true if row key exists, false otherwise
418 Retrieves values associated with a specific key. @param key unique identifier @return ImmutableList of V objects or empty list if not found
419 Retrieves the immutable map for a given column key. @param columnKey unique column identifier
420 Adds a key-value pair to the multimap, creating a new collection for the key if necessary. @param key unique key @param value associated value
421 Calculates an offset in the discrete domain by repeatedly applying next() operation. @param origin starting point @param distance number of steps to advance
422 Creates a flat map spliterator for double values. @param from input spliterator @param function mapping function @param topCharacteristics spliterator characteristics @param topSize estimated size of the spliterator
423 Flattens elements from one Spliterator to another. @param fromSpliterator input elements spliterator @param function mapping function to transform inputs into integer spliterators @return Spliterator.OfInt instance with specified characteristics
424 Maps elements from one Spliterator to another as long values. @param fromSpliterator source spliterator of InElementT type @param function transformation function to generate long spliterators @param topCharacteristics spliterator characteristics (e.g., parallelizable) @param topSize estimated size of the spliterator
425 Flattens input spliterator with given mapping function and returns a new spliterator. @param fromSpliterator source spliterator to transform @param function mapping function for input elements to output spliterators @param topCharacteristics optional characteristics of the resulting spliterator (e.g. SUBSIZED, SORTED) @param topSize size hint for the resulting spliterator @return new Spliterator instance with transformed elements
426 Checks if all elements of a collection are present in this ForwardingCollection. @param collection collection with elements to find
427 Sets the hash table mask and updates metadata. @param mask new hash table mask value
428 Configures the internal hash table mask. @param mask bit mask to control hash table configuration
429 Resizes the compact hash map's entries, keys, and values arrays to the specified capacity. @param newCapacity target size for entries, keys, and values arrays
430 Dynamically resizes the compact hash set's internal entry and element arrays to accommodate a specified capacity. @param newCapacity the desired size of the resized arrays
431 Calculates recommended hash table size based on expected entries and load factor. @param expectedSize estimated number of hash table entries
432 Compares two integers in this comparison chain. @param left first integer value @param right second integer value
433 Compares two long values in the chained comparison logic. @param left first value @param right second value
434 Compares two boolean values based on whether the first (left) is true. @param left first boolean value @param right second boolean value
435 Compares two booleans in a chained manner, with false first. @param left first boolean value @param right second boolean value
436 Checks if this range has a defined lower bound.
437 Checks if this range has an explicitly defined upper bound.
438 Initializes DiscreteDomain with default settings (no fast offset support).
439 Serializes EnumBiMap instance to ObjectOutputStream. @throws IOException if serialization fails
440 Serializes EnumHashBiMap instance to ObjectOutputStream. @param keyTypeOrObjectUnderJ2cl enum type or object (importance: unknown)
441 Writes a HashBiMap object to an ObjectOutputStream. @throws IOException if serialization fails
442 Validates that the given object is a valid enum constant of this multiset. @param element nullable object to verify
443 Serializes the HashMultiset instance to an ObjectOutputStream. @throws IOException if serialization fails
444 Writes this LinkedHashMultiset instance to an ObjectOutputStream. @throws IOException if serialization fails
445 Writes the TreeMultiset instance to an ObjectOutputStream. @param stream the output stream
446 Initializes an empty Builder instance.
447 Wraps an array into a {@link FluentIterable} using its list representation. @param elements the original array to wrap
448 Creates an empty FluentIterable collection. @return an empty FluentIterable instance
449 Checks if iterable is empty. @return true if no elements exist in underlying collection
450 Appends an iterable to this fluent iterable. @param other iterable to be appended
451 Concatenates two iterables into one. @param a first iterable to concatenate @param b second iterable to concatenate
452 Concatenates three iterables into one. @param a first iterable to concatenate @param b second iterable to concatenate @param c third iterable to concatenate
453 Concatenates four iterables into one. @param a first iterable @param b second iterable @param c third iterable @param d fourth iterable
454 Returns the underlying iterable delegate as a Java Stream.
455 Counts occurrences of an object in an iterator. @param iterator the iterator to search @param element the object to find in the iterator @return frequency of the object (0 or more)
456 Checks if a map contains a specific key. @param map the map to search @param key the key to find in the map @return true if found, false otherwise
457 Checks if a map contains a specified value. @param map the map to search @param value the object to find in the map @return true if found, false otherwise
458 Adds all elements from the given iterable to this list at the specified index. @param index insertion position @param elements iterable of elements to add @return true if any changes were made, false otherwise
459 Returns a sublist of this list from the specified indices. @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
460 Calculates the hash code of this list. @return unique hash value
461 Copies all entries from a given map into this ForwardingMap. @param map source map with entries to copy
462 Checks if this map is equal to another object, which must be a map. @param object the other map to compare with @return true if the maps are equal, false otherwise
463 Creates a custom table with an empty backing map and a value factory. @param backingMap empty data structure @param factory supplier for creating new maps
464 Returns a set of unique column keys, initializing it if not already done.
465 Retrieves a column from the table by its unique key. @param columnKey unique identifier of the column to retrieve
466 Puts serialized collection elements into a Map. @param map target Map, must be initialized before calling this method @param stream ObjectInputStream source of serialized data
467 Deserializes a Multiset from an ObjectInputStream. @param multiset target collection to populate @param stream input stream containing serialized data
468 Rebuilds the hash table with a specified size, populating it with unique elements. @param newTableSize desired capacity of the hash table @param elements array of objects to be inserted into the hash table @param n number of elements to process @return populated hash table or null if unsuccessful
469 Initializes builder with default initial capacity.
470 Creates builder with specified initial capacity. @param size starting size of the entries array
471 Creates a builder with the specified initial capacity. @param expectedSize starting size of the entries array
472 Ensures the set's capacity is sufficient to hold at least 'minCapacity' unique elements. @param minCapacity minimum required capacity
473 Adds all elements from an iterable to the builder. @param elements Iterable of elements to be added
474 Adds all elements from an iterator to the collection. @param elements Iterator of elements to be added
475 Adds multiple copies of specified elements from an iterator to the multiset. @param elements Iterator of elements to be added
476 Adds all elements from an iterable to the builder. @param elements Iterable of elements to be added
477 Returns a collector that accumulates elements into an immutable list. @return A Collector instance for accumulating elements into an ImmutableList.
478 Creates an empty ImmutableMultimap instance.
479 Creates a collector for immutable range sets.
480 Returns an immutable set collector.
481 Returns the sorting comparator used by this map. Uses the comparator of the underlying key set view.
482 Adds an element to the builder while ensuring sorted and deduplicated set. @param element element to add
483 Converts an intern manager into a functional form. @param interner reference to the intern manager
484 Converts an iterable to a comma-separated string representation. @param iterable input iterable collection
485 Retrieves the single element from an iterable, throwing exception for multiple or no elements. @param iterable single-element iterable
486 Retrieves the single element from an iterator, returning the default value if empty. @param iterator single-element iterator @param defaultValue value to return if iterator is empty
487 Concatenates two object arrays into one. @param first the first array @param second the second array @param type Class of the array elements @return concatenated array or null if not found
488 Retrieves the last element from an iterable collection. @param iterable Iterable object to extract elements from
489 Retrieves the last element from an iterator with optional default value. @param iterator Iterator object to extract elements from @param defaultValue Default value to return if iterator is empty
490 Returns an unmodifiable iterator over an empty list of type T.
491 Serializes the multimap's state to an ObjectOutputStream. @param keySet size of keys in this multimap
492 Adds a new key-value pair to the multimap, potentially inserting at tail or before existing sibling. @param key unique identifier @param value associated value @param nextSibling optional existing node to insert before; null for empty list @return newly created Node object
493 Creates a list of characters from a given CharSequence. @param sequence input character sequence to be wrapped
494 Finds the index of a specified element in a list. @param list the list to search @param element the object to find, or null to find null values @return index of the found element or -1 if not found
495 Searches for the last occurrence of a specified element in a list. @param list the list to search @param element the object being searched for (may be null) @return index of last occurrence or -1 if not found
496 Advances to the next entry in the table and returns true if successful. @return true if successfully advanced, false otherwise
497 Expands the segment's capacity by doubling it and reclassifying nodes in each list. @GuardedBy("this")
498 Periodically drains reference queues to reclaim memory, synchronized using a lock.
499 Checks if a live value exists for the given InternalEntry. @param entry InternalEntry object to check
500 Creates an unmodifiable identity set with default size.
501 Returns a synchronized view of the given BiMap instance. @param bimap input BiMap to synchronize
502 Bubbles up an element at the specified index, ensuring heap properties are maintained. @param index position of the element within the heap @param x element to be inserted or updated @return new parent node index after bubbling up
503 Swaps the given element with the conceptually last element in the heap. @param actualLastElement the element to swap @return position of swapped element, or current size if no swap occurred
504 Advances the iterator cursor to skip elements matching a given reference. @param c minimum index after skipping
505 Returns an iterator over the elements of a given multisets. @param multiset the underlying multiset data structure
506 Creates a new array of specified type and size. @param reference existing array to copy from (optional) @param length desired size of the new array
507 Converts collection to array. @param c collection to convert
508 Finds the minimum element in an iterator based on custom ordering criteria. @param iterator iterable collection of elements to compare
509 Finds the maximum element in an iterable collection. @param iterator a sequence of elements to compare @return the greatest element found or null if empty
510 Encloses all values in the given iterable within a range. @param values Iterable of comparable elements @return Range containing all values
511 Creates a new concurrent hash set with preserved insertion order.
512 Returns human-readable string representation of the range. @param lowerBound lower bound of the interval @param upperBound upper bound of the interval
513 Returns the endpoint value of the lower bound.
514 Returns the endpoint value of the upper bound.
515 Checks for conflicts in the immutable map's value bucket. @param value The value to check against @param entry The current entry being processed @param valueBucketHead The head of the value bucket (null if empty)
516 Removes duplicate entries from a given array, preserving order and handling potential conflicts. @param entries input array of immutable map entries @param n original number of entries in the array @param newN desired capacity for the output array @return new array with duplicates removed, or null if no changes were made
517 Checks for conflicts in the key bucket and retrieves an entry. @param key unique key to check @param newValue value associated with the key @param keyBucketHead head of the key bucket @param throwIfDuplicateKeys whether to throw on duplicate keys @return ImmutableMapEntry or null if not found
518 Creates an immutable set collector for enum values.
519 Creates a complement EnumSet by removing elements from the given collection. @param collection elements to remove @return EnumSet containing all elements except those in the collection
520 Creates a complement EnumSet by removing elements from the given collection. @param collection elements to remove @param type enum class of the set @return EnumSet containing all elements except those in the collection
521 Finds the last integer element in a stream. @param stream input stream of integers @return OptionalInt containing the last element or empty if not found
522 Finds the last element in a LongStream. @param stream input stream of elements @return OptionalLong containing the last element or empty if not found
523 Finds the last element in a DoubleStream. @param stream input stream of doubles @return OptionalDouble containing the last element or empty if not found
524 Partitions the buffer around a specified pivot element. @param left starting index of the partition @param right ending index of the partition @return new index of the pivot element
525 Serializes the TreeMultimap object to an ObjectOutputStream. @throws IOException if serialization fails
526 Protected constructor to prevent instantiation from subclassing.
527 Protected constructor to prevent instantiation.
528 Escapes special characters in the string from the specified index. @param s input string @param index starting position for escaping @return escaped string or null if not found
529 Computes replacement character using provided escaper. @param escaper CharEscaper instance for escaping @param c the character to be replaced @return escaped character as a String or null if input is invalid
530 Computes replacement string using given Unicode escaper and code point. @param escaper UnicodeEscaper instance @param cp code point to escape
531 Validates the ordering of given EndpointPair against graph directionality. @param endpoints EndpointPair to check for ordering compatibility
532 Advances to the next pair of endpoints in the graph.
533 Creates an endpoint pair from a graph and two nodes. @param graph the graph containing the nodes @param nodeU first node in the pair @param nodeV second node in the pair
534 Creates an endpoint pair from a network and two nodes. @param network the graph containing the nodes @param nodeU first node of the pair @param nodeV second node of the pair
535 Returns a set of all edges in the graph as EndpointPairs.
536 Returns a set of all edges in the graph as EndpointPairs.
537 Validates endpoint compatibility with network direction. @param endpoints pair of ordered or unordered endpoints to verify
538 Returns an unmodifiable iterator over the nodes in this unordered pair.
539 Sets the order of nodes in the graph. @param nodeOrder ElementOrder object defining node ordering
540 Configures the incident edge order for the graph. @param incidentEdgeOrder type of element ordering (unordered or stable)
541 Returns transposed graph, preserving node labels and adjacency information. @param graph original directed graph to transpose
542 Transposes a directed graph to its reverse structure. @param network the original network to transpose @return the transposed Network object or the original undirected network
543 Returns the transposed ValueGraph instance of a given directed graph. @param graph original directed ValueGraph object @return transposed ValueGraph instance or the original undirected graph if applicable
544 Configures the node order for the network. @param nodeOrder ElementOrder specifying the desired node order
545 Sets the order of edges in the network. @param edgeOrder ElementOrder instance specifying edge order
546 Sets the ordering of nodes in the value graph. @param nodeOrder ElementOrder instance specifying node ordering
547 Sets the ordering of incident edges in the value graph. @param incidentEdgeOrder ElementOrder instance specifying ordering type @return ValueGraphBuilder instance with updated configuration
548 Updates hash state with entire byte array. @param b input byte array
549 Updates the hash state with byte data from a ByteBuffer. @param b input ByteBuffer
550 Updates hash state with specified number of bytes from scratch array. @param bytes the number of bytes to process
551 Processes remaining data in the buffer by padding and hashing. @param bb ByteBuffer object containing unprocessed data
552 Checks if the Bloom Filter might contain the given input. @param input element to check
553 Creates a Bloom filter collector with the specified funnel and parameters. @param funnel Funnel to use for inserting elements @param expectedInsertions Expected number of insertions (must be >= 0) @param fpp False positive probability (must be > 0.0 and < 1.0)
554 Returns total size in bits of the underlying bit array. @return Total number of bits in the bit array
555 Performs a saturated cast of a long to an unsigned byte. @param value the value to cast
556 Compares two unsigned bytes lexicographically. @param a first byte @param b second byte
557 Converts byte to its string representation in a specified radix. @param x single byte to convert @param radix base of the number system (2-36)
558 Copies all bits from another LockFreeBitArray into this instance. @param other bit array to copy from
559 Sets a single bit at the specified index if it's not already set. @param bitIndex position of the bit to set
560 Computes the hash code based on internal byte representation. @return integer hash code value
561 Returns a hexadecimal string representation of this hash code.
562 Converts a byte array into a single long value. @param bytes input byte array
563 Computes a weak hash using 32-bit integers with seeds. @param bytes input byte array @param offset starting position of the first integer within the array @param seedA and seedB initial hash values @param output array to store the resulting hash values
564 Computes a weak hash using MurmurHash-like algorithm with seeds. @param bytes input byte array @param offset starting position of the data within the array @param seedA and seedB initial hash values @param output array to store the computed hash values (two 64-bit integers)
565 Returns this unsigned integer's value as an unsigned long.
566 Divides two unsigned integers. @param dividend input integer @param divisor input integer
567 Computes the unsigned integer remainder of dividend divided by divisor. @param dividend input value @param divisor non-zero divisor value
568 Creates a Murmur3-32 hash function with the specified seed. @param seed initial hash value
569 Creates a fixed-length Murmur3 hash function with the specified seed. @param seed initial hash value
570 Initializes a MurmurHash3 hasher with a given seed value. @param seed initial seed influencing the hash output
571 Computes a consistent hash value within the given number of buckets. @param input unique long identifier for reproducible sequence @param buckets positive integer number of hash buckets @return index representing the hashed bucket
572 Extracts an integer value from a byte array. @param bytes input byte array
573 Copies data from InputStream to OutputStream. @param from input stream @param to output stream @return total bytes copied
574 Calculates the total number of bytes read from an InputStream. @param in InputStream to read from @return Total number of bytes read, or throws IOException if an error occurs
575 Reads bytes from an InputStream and processes them using a ByteProcessor. @param input InputStream to read from @param processor ByteProcessor to apply to the data @return processed result or null if not returned by processor
576 Creates a ByteArrayDataInput instance from a ByteArrayInputStream. @param byteArrayInputStream byte array input stream to wrap
577 Creates a ByteArrayDataOutput instance from a ByteArrayOutputStream. @param byteArrayOutputStream underlying byte array output stream
578 Initializes the ReaderInputStream with a Reader, CharsetEncoder, and buffer size. @param reader input character stream @param encoder character encoding scheme @param bufferSize initial buffer capacity
579 Initializes draining process, potentially resizing the buffer. @param overflow whether to handle overflow by doubling buffer size
580 Copies byte data from a ReadableByteChannel to a WritableByteChannel. @param from source channel @param to destination channel @return number of bytes copied
581 Reads the next line of text from the underlying stream. @return The next line as a String or null if no more lines are available
582 Skips up to a specified number of bytes from the InputStream. @param in InputStream to skip from @param n maximum number of bytes to skip @return actual number of bytes skipped
583 Returns a stream of strings, one per line from character source. @throws IOException if an I/O error occurs
584 Accumulates the total characters from a Readable source. @param readable source of character data @return the total number of characters or throws IOException if an error occurs
585 Initializes LineReader with a specified readable source. @param readable input source, validated against NPE
586 Safely closes an InputStream resource while swallowing any IOException. @param inputStream the input stream to close
587 Safely closes a Reader resource, swallowing any IOException. @param reader the resource to close
588 Updates the output stream by adding data, potentially switching to file storage if memory threshold is exceeded. @param len amount of data to add
589 Resets the output stream, closing and deleting any existing file storage. @throws IOException if deletion of existing file fails
590 Converts a File object to a CharSource. @param file input File object @param charset target character set
591 Quietly flushes a Flushable object while logging any IOException. @param flushable the object to be flushed
592 Verifies whether insecure recursive deletion is allowed. @param path file or directory to check @param options array of delete options, including ALLOW_INSECURE flag
593 Doubles the capacity of a given CharBuffer. @param buf input CharBuffer to grow
594 Processes a character array and appends lines to the internal buffer. @param cbuf character array @param off offset into the array @param len number of characters in the array
595 Finalizes the current line based on newline presence or non-empty line content.
596 Reads and returns an unsigned short value from two bytes. @throws IOException I/O error occurred
597 Reads and returns a little-endian integer value from four bytes. @throws IOException I/O error occurred
598 Reads and returns a long value from the input stream in little-endian byte order. @throws IOException I/O error occurred
599 Writes a character value as a short integer in little-endian byte order. @param v the character to be written
600 Writes a float value to the output stream in little-endian byte order. @param v the float value to be written
601 Writes long integer to output stream in little-endian order. @param v the long value to write
602 Deletes a directory and its contents recursively using an insecure method. @param path the file system path to delete @return collection of IOExceptions encountered during deletion or null if successful
603 Deletes directory contents securely and returns a collection of IOExceptions. @param dir SecureDirectoryStream to the target directory
604 Advances to the next input stream, closing the current one. @throws IOException on I/O error
605 Advances to the next CharSource in sequence, closing the previous one.
606 Converts URL to CharSource object using specified character set. @param url the URL of the resource @param charset target character set
607 Performs division with rounding according to specified mode. @param p dividend @param q divisor (throws if zero) @param mode RoundingMode to apply
608 Calculates the factorial of a given integer value. @param n input integer (validated to be non-negative) @return factorial result as a double or infinity for large values
609 Computes power of an integer 'b' to the given exponent 'k'. @param b base value @param k exponent (validated non-negative)
610 Computes the greatest common divisor (GCD) of two integers using the binary GCD algorithm. @param a non-negative integer @param b non-negative integer @return GCD value or one of the input values if the other is zero
611 Computes the factorial of a given integer value. @param n input integer value (must be non-negative)
612 Computes the binomial coefficient, n choose k. @param n total number of items @param k number of items to choose
613 Computes power of a long value with overflow checks. @param b base value @param k exponent (validated to be non-negative) @return result of the exponentiation or special cases for small bases
614 Calculates the factorial of a given integer value. @param n input integer value to compute factorial for
615 Constructs a linear transformation builder with initial point (x1, y1). @param x1 double coordinate of the initial point @param y1 double coordinate of the initial point
616 Checks if two double values are fuzzy-equal within a given tolerance. @param a first value @param b second value @param tolerance maximum allowed difference
617 Rounds the given X to a double using the specified rounding mode. @param x X to round @param mode RoundingMode to apply
618 Calculates the smallest power of two greater than or equal to a given integer. @param x input value
619 Returns the largest power of two less than or equal to x. @param x input integer
620 Calculates the base-2 logarithm of an integer with specified rounding mode. @param x input integer to compute log2 @param mode RoundingMode for the result (e.g. UNNECESSARY, DOWN, FLOOR, etc.) @return non-negative log2 value or throws AssertionError if invalid input
621 Calculates the square root of an integer. @param x input integer value @param mode rounding mode (e.g. UNNECESSARY, FLOOR) @return square root value or rounded value based on mode
622 Performs checked addition of two integers. @param a first operand @param b second operand
623 Computes safe integer subtraction. @param a and b operands for the subtraction operation
624 Safely multiplies two integers using exact arithmetic. @param a first operand @param b second operand
625 Performs Miller-Rabin primality test with witness. @param base base number @return true if n is likely prime, false otherwise
626 Calculates the smallest power of two greater than or equal to the given value. @param x input value
627 Calculates the floor power of two for a given positive long integer value. @param x input value
628 Calculates the base-2 logarithm of a long integer value. @param x input value @param mode rounding mode (e.g. UNNECESSARY, DOWN, UP) @return log2(x) result or throws exception if invalid
629 Computes the greatest common divisor of two long integers using the binary GCD algorithm. @param a first integer (must be >= 0) @param b second integer (must be >= 0)
630 Computes modulus of a long integer by an integer. @param x dividend @param m positive modulus
631 Safely adds two long integers with overflow check. @param a first operand value @param b second operand value
632 Safely subtracts two long integers with overflow check. @param a first operand value @param b second operand value
633 Safely multiplies two long integers with overflow check. @param a first operand value @param b second operand value
634 Returns the total count of data points in paired statistics. @return Total count
635 Compares this PairedStats object with another for equality. @param obj the object to compare with @return true if all statistical properties (xStats, yStats, and sumOfProductsOfDeltas) match, false otherwise
636 Initializes an empty StatsAccumulator instance.
637 Calculates the new mean by applying the naive mean formula, handling non-finite values. @param previousMean the previous mean value @param value the new data point value @return the updated mean value or NaN if both are non-finite and different
638 Returns the total count of accumulated data points. @return Total count of paired statistical data
639 Calculates median as a quantile. @return ScaleAndIndex object with scaling factor and index
640 Computes quartiles as a Scale object with 4 partitions.
641 Computes percentiles by scaling with factor 100.
642 Reorders elements in the given array so that the median (pivot) is moved to the start of the slice. @param array input numerical array @param from index where the median should be placed
643 Reads Stats object from a ByteBuffer. @param buffer input data stream @return initialized Stats object or throws exception if invalid
644 Returns a snapshot of current statistical metrics. @return Stats object containing aggregated data
645 Returns the encapsulated port number; throws IllegalStateException if not valid.
646 Returns the encapsulated port value or a specified default if invalid. @param defaultPort fallback port to use when the port is not valid
647 Returns a string representation of the host and port in the format [host]:port or just host. @return formatted string
648 Sets the port to the specified default value only when no port is set. @param defaultPort the new default port number
649 Converts an InetAddress object to a string representation. @param ip InetAddress object @return String representation of the IP address
650 Checks if the given IPv6 address is an ISATAP address. @param ip Inet6Address object to verify
651 Checks if an IPv6 address contains an embedded IPv4 client address. @param ip the IPv6 address to check
652 Converts a collection of booleans to an array. @param collection Collection of boolean values
653 Searches boolean array from start to end index for given target value. @param array boolean array to search @param target value to find @return index of target value if found, -1 otherwise
654 Finds last index of a specific boolean value within the entire input array. @param array the input boolean array @param target the boolean target to search for @return last occurrence index or -1 if not found
655 Converts a collection of Numbers to a byte array. @param collection collection of Numbers
656 Finds index of specified target byte within entire byte array. @param array the byte array to search @param target the target byte value @return index of target value if found, -1 otherwise
657 Finds index of last occurrence of specified byte in given byte array. @param array the byte array to search @param target the byte value to find
658 Converts a collection of characters to a character array. @param collection collection of characters @return char[] representation of the input collection
659 Finds index of specified character in given array. @param array character array to search @param target character to find
660 Finds the last occurrence of a character in a character array. @param array character array to search @param target character to find @return index of target character or -1 if not found
661 Converts two bytes from a byte array to a single character. @param bytes input byte array
662 Computes the hash code for this immutable double array. @param array underlying double array @param start starting index of relevant elements @param end ending index of relevant elements
663 Converts a collection of Number objects to a double array. @param collection Collection containing numbers to convert
664 Searches for a specific double value within a double array. @param array input array to search in @param target the value to find @return index of found value or -1 if not found
665 Finds the last occurrence of a double value in an array. @param array input array @param target double to search for @return last index of target or -1 if not found
666 Converts a collection of Number objects to an array of float values. @param collection Collection containing numbers to be converted
667 Finds index of target value in entire array. @param array float array to search @param target target float value to find @return index of target value or -1 if not found
668 Searches for the last occurrence of a float value in an array. @param array input array of floats @param target target float value to search for
669 Initializes builder with specified initial capacity. @param initialCapacity starting size of underlying array
670 Creates an ImmutableDoubleArray Builder with default initial capacity of 10.
671 Searches this array for the specified double value. @param target double to search for @return index of found element, or -1 if not found
672 Finds the last index of a double value within the array. @param target double value to search for @return non-negative index or -1 if not found
673 Returns a string representation of this immutable double array. @return String in the format [double1, double2, ..., doubleN], or "[]" if empty.
674 Checks if the array contains a specified integer. @param target the integer to search for @return true if found, false otherwise
675 Initializes builder with specified initial capacity. @param initialCapacity starting size of internal integer array
676 Creates an ImmutableIntArray.Builder instance with initial capacity of 10.
677 Calculates the hash code of this immutable array. @return a unique integer value representing the array's contents
678 Returns a string representation of the immutable array, in the format [element1, element2, ..., elementN]. If the array is empty, returns "[]". The number of elements is estimated to require StringBuilder space equal to 5 times the length.
679 Checks if the immutable array contains a specified long value. @param target the target long value to search for
680 Initializes builder with specified initial capacity. @param initialCapacity starting size of internal storage array
681 Creates an ImmutableLongArray builder instance with initial capacity of 10.
682 Calculates the hash code of this immutable long array. @return a hash code value representing the contents of the array
683 Returns a string representation of this immutable array, e.g. [1, 2, 3].
684 Converts a collection of Numbers to an integer array. @param collection collection containing numbers to convert
685 Searches an integer array from start to end indices for the first occurrence of a target value. @param array The array to search in @param target The value to find @return The index of the target value if found, -1 otherwise
686 Finds the last index of a specified integer in an array. @param array the input array to search @param target the value to find @return the last index of the target value, or -1 if not found
687 Converts a Collection of Numbers to a long array. @param collection Collection containing Number elements
688 Finds the index of a specified long value within a given array. @param array The array to search in @param target The value to find @return Index of the target value if found, -1 otherwise
689 Searches for the last occurrence of a long value within an array. @param array the input array to search @param target the target value to find @return the last index of the target value in the array, or -1 if not found
690 Attempts to parse a string representation of a long value in the specified radix. @param string string representation of the long value @param radix base number system (2-36) @return parsed Long value or null if invalid input
691 Converts a collection of Numbers to a short array. @param collection Collection of Number objects
692 Finds index of target value in the given short array. @param array short array to search @param target value to find
693 Searches for the last occurrence of a short value within an array. @param array input short array to search @param target short value to find
694 Creates a short value from the first two bytes of an array. @param bytes input byte array
695 Returns the most suitable byte array comparator, prioritizing performance and correct lexicographical ordering. @return Comparator<byte[]> instance
696 Creates an UnsignedInteger from a 32-bit signed integer value. @param bits The signed integer value to convert
697 Converts unsigned integer to string representation in specified radix. @param radix base of the number system (e.g. 2 for binary)
698 Converts unsigned integer to string representation in base 10.
699 Compares two integers while flipping their signs for unsigned comparison. @param a first integer value @param b second integer value
700 Creates an UnsignedLong instance from given long integer bits. @param bits non-negative long value
701 Compares two unsigned long values, flipping sign bits as necessary. @param a first value @param b second value
702 Parses a string representation of an unsigned long in the specified radix. @param string string to parse @param radix base of the number system
703 Invokes methods on proxy instances, handling common methods like hashCode, equals, and toString. @param proxy the proxy instance @param method the invoked method @param args optional arguments for the invocation (may be null)
704 Retrieves package name from class metadata using reflection. @return Package name or empty string if not found
705 Extracts package name from fully qualified class name. @param clazz Class object
706 Converts resource to ByteSource object. @return ByteSource representation of the resource
707 Checks if the underlying member is publicly accessible. @return true if public, false otherwise
708 Determines if the underlying member is protected. @return true if protected, false otherwise
709 Checks if the underlying member is private. @return true if private, false otherwise
710 Checks if the underlying member is static. @return true if static, false otherwise
711 Checks if the underlying member is final. @return true if final, false otherwise
712 Checks if the underlying member is abstract.
713 Checks if the underlying member is native.
714 Checks if the underlying method is synchronized.
715 Checks if the underlying member is volatile.
716 Checks if the underlying member is transient. @return true if transient, false otherwise
717 Checks if a given type is equal to the current type variable. @param type the type to compare with this type variable
718 Creates a TypeToken instance for the given class type. @param type Class<T> to create token for
719 Creates a SimpleTypeToken from the given Type object.
720 Retrieves a done value of type V from an AbstractFuture object. @param obj AbstractFuture object to retrieve value from @return Value of type V if successful, or throws ExecutionException if failed
721 Adds a listener to the future's execution chain. @param listener Runnable task to be executed asynchronously @param executor Executor responsible for task execution
722 Propagates cancellation to related asynchronous tasks. @param related potentially affected future
723 Submits a callable task for asynchronous execution. @param task the task to be executed, returning a result of type T
724 Schedules a task to run within the specified service using the designated executor. @param service the service to execute the task in @param executor the executor to use for task execution @param runnable the task to be executed
725 Schedules a task with specified executor and cancellable capabilities. @param service the managed service @param executor the scheduling executor @param runnable the Runnable task to be executed
726 Submits all tasks in the collection and waits for their completion within the specified time limit. @param tasks collection of callable tasks @param timeout maximum allowed execution time
727 Submits a collection of callable tasks with a specified timeout. @param tasks collection of tasks @param timeout time limit for task execution
728 Awaits termination of all tasks with specified timeout. @param timeout time interval to wait
729 Schedules a task for execution after a specified time interval. @param callable the task to be executed @param delay time interval before execution
730 Schedules a task for execution at fixed intervals. @param command the task to execute @param initialDelay time before first execution @param period interval between executions
731 Schedules a task with fixed delays between executions. @param command executable task @param initialDelay initial delay before first execution @param delay time interval between subsequent executions
732 Awaits service to reach running state within specified timeout. @param timeout time interval for waiting
733 Awaits service termination within specified timeout. @param timeout time interval to wait
734 Creates a proxy with specified time constraints. @param target original object @param interfaceType target interface type @param timeout execution duration limit
735 Executes a task with a specified time constraint. @param callable the task to execute @param timeout maximum allowed execution duration @return result of the task or throws exception if timed out
736 Executes a task with specified time constraints, ensuring it completes within the given timeout. @param callable task to execute @param timeout execution duration limit @throws TimeoutException if task exceeds time limit @throws ExecutionException if task fails or is interrupted
737 Executes a Runnable task with a specified time limit. @param runnable the task to be executed @param timeout maximum allowed execution duration in nanoseconds
738 Executes the given Runnable with a time limit. @param runnable task to be executed @param timeout maximum allowed duration in nanoseconds
739 Initializes and returns a ScheduledExecutorService instance for the scheduled service. The executor is configured with a custom thread factory to create threads with the service name. A listener is added to shut down the executor when the service terminates or fails.
740 Handles an exception that occurred within a future. @param throwable the Throwable that was thrown
741 Returns a human-readable representation of the atomic double value. @return string representation of the managed double value
742 Returns the atomic double value as an integer. @return The casted double value
743 Returns the atomic double value as a long. @return the managed double value cast to long
744 Converts atomic double value to float.
745 Returns the atomic double value using thread-safe {@link #get()} operation. @return the managed double value
746 Writes this AtomicDouble instance to an ObjectOutputStream. @param s ObjectOutputStream instance
747 Initializes AtomicDouble from serialized form. @param s ObjectInputStream containing serialized data
748 Accumulates a double value using the provided binary operator. @param x value to accumulate @param accumulatorFunction function to apply to the current and new values @return accumulated double value or -9223372036854775808.0 if failed
749 Accumulates and returns a new value by applying the given binary function to the current value and the provided input. @param x input double value @param accumulatorFunction thread-safe binary operator function @return updated double value
750 Returns a string representation of this atomic double array. @return A comma-separated list of elements enclosed in square brackets, or "[]" if empty
751 Writes this atomic double array to an ObjectOutputStream. @throws IOException if an I/O error occurs
752 Accumulates a value into the atomic array at index i. @param i array index @param x value to accumulate @param accumulatorFunction function to apply for accumulation @return accumulated value or null if not found
753 Accumulates a value into the array at index i using the provided accumulator function. @param i array index to accumulate into @param x value to accumulate @param accumulatorFunction binary operator to apply to existing and new values @return updated double value or NaN if failed to update atomically
754 Removes a key-value pair with value 0 from the atomic map. @param key unique identifier
755 Returns an unmodifiable map view of atomic long values. @return Map of keys to their corresponding long values
756 Replaces a long value associated with the given key if the current value matches the expected old value. @param key unique map key @param expectedOldValue expected current long value to replace @param newValue new long value to set @return true if replacement was successful, false otherwise
757 Converts this closing future to a standard future, logging and executing close logic if necessary. @return Future<V> object representing the asynchronous task
758 Completes the asynchronous task by providing a value and closer to the consumer. @param consumer ValueAndCloserConsumer object to receive the result @param executor Executor service for asynchronous execution
759 Adds a new Runnable task to the execution list using the specified Executor. @param runnable non-null task to be executed @param executor non-null executor responsible for running the task
760 Executes all pending runnables in the correct order.
761 Catches exceptions of type {@code exceptionType} and returns a fallback value. @param exceptionType the type of exceptions to catch @param fallback the function to call on exception @param executor the executor to use @return FluentFuture with caught result or fallback value
762 Transforms asynchronous input future using a provided async function. @param function Function to apply to the input data @param executor Executor for the transformation operation
763 Creates an immediate future with a given value. @param value the value to be immediately returned
764 Creates a failed future with the specified exception. @param throwable the exception that caused failure
765 Returns an immediately cancellable future with cancellation disabled.
766 Returns the best validator instance, or falls back to a weaker validator if not found.
767 Dispatches events to all registered listeners in the order they were received.
768 Initializes a monitor with default unfair locking strategy.
769 Acquires monitor lock with interruptible wait using specified duration. @param time time interval to wait for lock acquisition @throws InterruptedException if interrupted while waiting for lock
770 Tries to acquire lock and check condition with interruptibility. @param guard condition to check @param time duration to wait for condition in nanoseconds @return true if condition satisfied, false otherwise
771 Checks if there are waiting threads associated with the given Guard. @param guard the Guard object to check @return true if there are waiters, false otherwise
772 Checks if the specified condition is satisfied. @param guard condition to evaluate @throws any Exception that occurs during evaluation, re-raising it and signaling all waiters.
773 Shuts down the executor service and waits for termination using a specified duration. @param service ExecutorService instance to shut down @param timeout time interval in nanoseconds
774 Sleeps uninterruptibly for the specified duration. @param sleepFor time to sleep as a Duration
775 Sets the rate of permit issuance to a specified value. @param permitsPerSecond number of permits allowed per second
776 Returns the current rate limit.
777 Creates an instance of SettableFuture.
778 Retrieves a Future result without interruption, with optional duration-based timeout. @param future the Future to retrieve @param timeout maximum time interval (converted to nanoseconds) @return result or throws ExecutionException/TimeoutException
779 Creates a lazily initialized striped read-write lock with custom delegate. @param stripes number of stripes to distribute access across
780 Creates a striped lock with specified number of stripes. @param stripes number of stripes to distribute locks across
781 Creates striped semaphore with specified number of stripes and permits. @param stripes number of stripes to distribute semaphores across @param permits maximum number of permits per semaphore
782 Creates a striped read-write lock with specified number of stripes. @param stripes number of stripes to distribute locks across
783 Builds and returns a customized ThreadFactory instance based on the current builder configuration.
784 Creates a task with a given Runnable and its associated result. @param runnable asynchronous operation to be executed @param result value associated with the task's completion
785 Waits on a CountDownLatch without being interrupted, with optional timeout converted from Duration. @param latch latch to wait on @param timeout maximum time to wait in nanoseconds
786 Awaits the specified condition to be met without being interrupted. @param condition Condition object to await @param timeout Maximum time to wait in nanoseconds
787 Tries to acquire a semaphore uninterruptibly with a default permit count. @param semaphore the semaphore to acquire @param timeout the maximum time to wait for acquisition (in specified unit) @param unit the time unit of the timeout @return true if acquired, false otherwise
788 Tries to acquire a semaphore uninterruptibly with a specified duration. @param semaphore the semaphore to acquire @param permits the number of permits to acquire @param timeout time interval for acquisition (converted to nanoseconds)
789 Tries to acquire a lock without interruption using the specified duration. @param lock Lock object @param timeout time interval in nanoseconds
790 Awaits executor termination without interruption, retrying until completion or timeout. @param executor ExecutorService to wait for @param timeout maximum waiting time in nanoseconds @return true if terminated successfully, false otherwise
791 Retrieves a PublicSuffixType instance based on the provided code. @param code single character public suffix type code
792 Creates an Optional instance with the given non-null value. @param reference the object to be wrapped
793 Creates an unstarted Stopwatch instance with the given Ticker. @param ticker unique identifier for time measurement
794 Finds the index of the first element in an iterable matching a given predicate. @param iterable Iterable to search @param predicate Function to evaluate elements against @return Index of matching element, or -1 if not found
795 Checks if an iterator contains at least one element matching a given predicate. @param iterator Iterator to search @param predicate Predicate function to evaluate elements against @return true if any element matches the predicate, false otherwise
796 Returns a natural ordering builder for sorted set multimaps with default comparator.
797 Transforms input elements into ImmutableTable format using provided functions. @param rowFunction function to extract table rows from input @param columnFunction function to extract table columns from input @param valueFunction function to extract table values from input @param mergeFunction function to merge duplicate table values
798 Returns a predicate that checks equivalence to the given target object. @param target nullable target object for comparison
799 Creates a function that returns values from the provided map with default value. @param map input map @param defaultValue default value to return for missing keys
800 Composes two functions by applying the output of the first function (f) to the input of the second function (g). @param g the output of which is used as input for the composed function @param f the input function whose output serves as input for the composed function
801 Creates a function from a non-null input map. @param map the input map to validate and store
802 Initializes a new splitter instance with a custom delimiter pattern. @param separatorPattern regular expression pattern for splitting
803 Initializes Joiner with custom separator. @param separator string to separate joined elements
804 Creates a Joiner instance with a custom separator character. @param separator single character to separate joined elements
805 Configures the Joiner to display null values as a custom string. @param nullText text to display for null elements
806 Configures splitter to split based on a regular expression pattern. @param separatorPattern input string containing the compilation pattern
807 Creates a predicate that checks if CharSequence matches the specified regex pattern. @param pattern regex Pattern object to evaluate against
808 Negates a given predicate. @param predicate original predicate to negate
809 Combines predicates from an iterable into a single AND predicate. @param components iterable of component predicates
810 Combines multiple predicates using logical OR operation. @param components iterable of component predicates
811 Splits the input sequence into a map of key-value pairs based on specified delimiters. @param sequence character sequence to split
812 Converts the result of splitting a CharSequence into a Stream.
813 Creates a memoized supplier from the provided delegate. @param delegate Supplier instance to cache values from
814 Composes a transformation function with a supplier. @param function the function to apply to the supplier's value @param supplier the supplier providing input for the function
815 Creates a thread-safe supplier by wrapping the given delegate. @param delegate Supplier of object to be retrieved; must not be null
816 Propagates the specified exception type if it's an instance of the given class. @param throwable the exception to check @param declaredType the expected exception class
817 Propagates unchecked Throwable, throwing it if possible. @param throwable nullable exception to propagate
818 Propagates the given Throwable as a RuntimeException. @param throwable exception to propagate
819 Retrieves a list of stack trace elements from the given throwable. If lazy stack trace is enabled, uses jlaStackTrace; otherwise, returns an unmodifiable list of the throwable's stack trace. @param throwable input throwable @return List of StackTraceElement or empty list if lazy is disabled
820 Creates a new cache entry with the given key and hash. @param key unique cache identifier @param hash cached value's hash code @param next optional reference to the previous entry in the segment
821 Creates a RemovalNotification with specified key, value and removal cause. @param key nullable cache key @param value nullable removed cache value @param cause non-null reason for the removal
822 Creates a multiset collector from a stream of data. @param elementFunction function to extract elements @param countFunction function to extract counts @param multisetSupplier supplier for the resulting multiset
823 Creates a Multimap collector from a stream of data. @param keyFunction maps each element to its key @param valueFunction maps each element to its value @param multimapSupplier provides the initial Multimap instance
824 Creates a collector that accumulates elements into an immutable Multimap. @param keyFunction function to extract the key from each element @param valueFunction function to generate a stream of values for each element @param multimapSupplier supplier for creating the underlying Multimap
825 Creates a transformed collection view from the given source collection and mapping function. @param fromCollection original collection to transform @param function mapping function to apply to each element
826 Checks if an iterable contains a specified object. @param iterable the iterable to search @param element the object to find in the iterable @return true if found, false otherwise
827 Returns a contiguous set containing elements up to and optionally including the specified element. @param toElement upper bound of the returned set @param inclusive whether to include the toElement in the result
828 Returns the tail set of contiguous elements starting from the specified element. @param fromElement starting element @param inclusive whether to include the start element in the result
829 Adds an element to the queue, potentially removing the oldest one due to size constraints. @param e the new element to add
830 Configures key ordering using the specified comparator. @param keyComparator comparator to sort keys by
831 Configures key ordering using the specified comparator. @param keyComparator comparator to sort keys by
832 Sets a custom comparator to order multimap values. @param valueComparator Comparator for ordering values; nulls are allowed
833 Adds an element to the multiset. @param element the element to be added
834 Adds specified copies of an element to the multiset. @param element element to add @param occurrences number of copies to add
835 Sets the specified count for an element in the multiset. @param element element to modify @param count new count value
836 Creates an immutable sorted multiset from a collection using the provided comparator. @param comparator custom ordering comparator for elements of type E
837 Returns a view of elements in this set strictly less than {@code toElement}. @param toElement upper bound (exclusive)
838 Returns a view of elements in this set that are greater than or equal to the specified element. @param fromElement lower bound (inclusive if positive, exclusive if negative)
839 Cycles through elements of the underlying iterable. @return FluentIterable object with cycled elements
840 Filters iterable elements based on the given predicate. @param predicate condition to apply for filtering
841 Filters an iterable collection to only include elements of a specific type. @param unfiltered original iterable to filter @param desiredType target class to check against @return Iterable of elements that match the desired type
842 Applies a transformation function to each element of the iterable. @param function mapping function to apply to each element
843 Creates a PeekingIterator instance from an existing Iterator. @param iterator input iterator to wrap
844 Removes all specified elements from the given iterable. @param removeFrom iterable to modify @param elementsToRemove collection of elements to remove @return true if any elements were removed, false otherwise
845 Removes elements from iterable that match the given predicate. @param removeFrom iterable to modify @param predicate condition to apply for removal @return true if any element was removed, false otherwise
846 Retains only specified elements in the iterable collection. @param removeFrom iterable collection to modify @param elementsToRetain collection of elements to retain @return true if any elements were removed, false otherwise
847 Delegates adding all elements from the given collection to this collection. @param collection Collection containing elements to add
848 Adds all elements from the given iterable to the specified collection. @param addTo Collection to add elements to @param elementsToAdd Iterable of elements to add @return true if any elements were added, false otherwise
849 Creates a new ArrayList instance and populates it with elements from the given iterator. @param elements Iterator of elements to add
850 Creates a hash set from an iterator of elements. @param elements Iterator of elements to add
851 Filters an iterator based on a class type predicate. @param unfiltered original iterator @param desiredType target class to check against @return filtered UnmodifiableIterator or null if empty
852 Checks if all elements in an iterable match a given predicate. @param iterable iterable to evaluate @param predicate predicate function to apply to each element
853 Finds the first element in an iterable that satisfies a given predicate. @param iterable collection to search @param predicate condition to match
854 Removes all nodes associated with the given key. @param key unique identifier for the key to remove
855 Wraps the given list and returns a list iterator starting at the specified index. @param list the backing list @param index the start position of the iterator
856 Creates a list with an initial element and optional additional elements. @param first mandatory initial element @param rest array of optional additional elements (validated by checkNotNull)
857 Applies a transformation function to each element in the given list. @param fromList original list to transform @param function function to apply to each element
858 Creates a list with two predefined elements and an additional array. @param first The first predefined element @param second The second predefined element @param rest Array of additional elements (checked for null)
859 Creates a map from a set and key-value mapping function. @param set underlying set of keys @param function function to map keys to values
860 Creates a navigable map view from the specified set and mapping function. @param set underlying navigable set @param function function to apply to each key, yielding its value
861 Transforms the key-value pairs of a map using an entry transformer. @param fromMap source map to transform @param transformer transformation function for key-value pairs @return transformed map with updated values
862 Checks if a map collection contains the given entry. @param c Collection of Map entries to search @param o Entry object to look for
863 Removes a specific map entry from the given collection. @param c Collection of entries to remove from @param o Entry object to be removed, null if not found
864 Returns the occurrence count of the specified element. @param element nullable element to query @return count or 0 if not found in multiset
865 Removes exactly 'occurrences' occurrences of the specified element from the multiset. @param element element to remove @param occurrences number of occurrences to remove (must be positive)
866 Sets the count of an element in the multiset. @param element element to update @param count new count value @return old count value, or 0 if removed
867 Updates the count of an element in the multiset. @param element the element to update @param expectedOldCount the expected old count @param newCount the new count @return true if the operation was successful, false otherwise
868 Removes values associated with the given key. @param key nullable key to remove
869 Configures the MultimapBuilder to use a natural ordering for comparable elements.
870 Converts a map to a unmodifiable set multimap. @param map the underlying map to be wrapped
871 Transforms entries in a multimap using the provided transformation function. @param fromMap source multimap to transform @param transformer entry transformation function
872 Adds all elements from an iterable to the builder. @param elements Iterable of elements to be added
873 Adds all elements from the given multiset to this one. @param self this multiset @param elements multiset containing elements to add
874 Retains specified occurrences in the provided Multiset. @param multisetToModify the Multiset to be modified @param multisetToRetain the occurrences to retain in the Multiset @return true if changes were made, false otherwise
875 Removes occurrences of elements from one multiset in another. @param multisetToModify the multiset to modify @param occurrencesToRemove the multiset or iterable containing elements to remove
876 Retains all elements present in the provided collection. @param elementsToRetain Collection of elements to retain @return true if retention operation was successful, false otherwise
877 Drains a specified number of elements from the blocking queue into the provided collection. @param q BlockingQueue to drain from @param buffer Collection to add drained elements to @param numElements Number of elements to drain @param timeout Timeout duration in nanoseconds @return Number of elements successfully added to the buffer
878 Drains elements from a blocking queue into a collection with interruptible handling and timeouts. @param q the blocking queue to drain from @param buffer the collection to add drained elements to @param numElements the maximum number of elements to drain @param timeout the duration to wait for additional elements (converted to nanoseconds)
879 Checks if the given value lies within this range. @param input object to check for containment
880 Checks if all values from the given iterable collection lie within this range. @param values iterable to check
881 Applies a BiConsumer to each pair of elements from two input streams. @param streamA first input stream @param streamB second input stream @param consumer BiConsumer to apply to each pair of elements
882 Builds a Collector for transforming input elements into an ImmutableTable. @param rowFunction function to apply to each element, returning the row key @param columnFunction function to apply to each element, returning the column key @param valueFunction function to apply to each element, returning the table cell value @param mergeFunction binary operator for merging duplicate entries in the table @param tableSupplier supplier of the ImmutableTable to collect into
883 Transforms table values using the given function. @param fromTable original table to transform @param function transformation function applied to each value
884 Returns the transposed Table object. @param table the original two-dimensional Table to transpose
885 Creates an escaper map from a given character replacement map. @param replacements Map of characters to their replacements
886 Adds multiple character escape mappings to the builder. @param cs array of characters to be escaped @param r replacement string for each character in cs
887 Finds the next Unicode escape index in a character sequence. @param csq input character sequence @param start starting position @param end end of the valid range @return next escape index or the provided end if none found
888 Creates SubscriberExceptionContext instance with given event.
889 Creates a sequential funnel for iterables of elements processed by the given element funnel. @param elementFunnel funnel to process individual elements
890 Converts primitive sink to output stream. @param sink PrimitiveSink instance
891 Creates a funnel for strings with the specified character set. @param charset non-null Charset instance
892 Converts an Appendable to a Writer, or returns the target if it's already a Writer. @param target nullable Appendable object to convert
893 Decodes a CharSequence into a byte array using checked decoding. @throws DecodingException if decoding fails
894 Creates a new Closer instance with default exception suppression behavior.
895 Initializes the filter with a specified string regular expression pattern. @param patternStr regex pattern to match file names against
896 Calculates the base-2 logarithm of a BigInteger value. @param x the input BigInteger @param mode the rounding mode to apply @return the integer part of the logarithm, or throws an assertion error if invalid
897 Parses a string representation of an unsigned byte value. @param string string to parse
898 Parses a string as an unsigned int with default radix of 10. @param s input string to parse
899 Creates a TypeVariableKey instance from the given type, or returns null if not applicable. @param t the input type to evaluate
900 Retrieves the value of a ListenableFuture. @param future Future object containing the computation result
901 Initializes schedule with specified delay. @param delay duration to wait before executing tasks
902 Creates an instance of AtomicLongMap with an empty ConcurrentHashMap.
903 Accumulates and updates atomic long value associated with a given key. @param key unique map key @param x value to accumulate @param accumulatorFunction function to apply for accumulation and updating the value @return updated long value or null if not found
904 Accumulates a value associated with the given key using the provided function. @param key unique map key @param x accumulation value @param accumulatorFunction binary operator to compute new accumulated value
905 Sets value associated with given key to specified new value. @param key unique map key @param newValue new long value to set
906 Adds a closeable resource to be closed using the specified executor. @param closeable AutoCloseable item to be added @param closingExecutor Executor for asynchronous processing
907 Creates a new instance of the factory with a specified locking policy. @param policy locking policy to utilize
908 Creates a sequential executor instance wrapping the specified delegate. @param delegate underlying executor service
909 Creates a SimpleTimeLimiter instance with the given ExecutorService. @param executor service to manage task execution
910 Joins the specified thread uninterruptibly with a given duration timeout. @param toJoin thread to join @param timeout time interval in Duration
911 Returns an ElementOrder instance with UNORDERED type.
912 Creates an ordered collection with stable ordering.
913 Creates an instance of ElementOrder with INSERTION type ordering.
914 Returns a natural ordering for comparable elements. @return ElementOrder instance for default sort order
915 Creates an ordered element order with a custom comparator. @param comparator the sorting comparator; must not be null
916 Initializes a latch to be triggered upon closure of all resources. @return CountDownLatch object
917 Converts a CharSequence to lowercase, handling both string and character sequences. @param chars the input sequence of characters
918 Converts a CharSequence or String to uppercase ASCII representation. @param chars input sequence of characters
919 Serializes paired statistical data to a byte array. @return byte array representation of the statistics
920 Converts this Stats object into a byte array.
921 Initializes the compact hash map with a specified expected size. @param expectedSize initial capacity of the hash map
922 Initializes the set with an estimated size. @param expectedSize initial capacity estimate @throws IllegalArgumentException if invalid size provided
923 Combines this matcher with another to form an AND matcher. @param other second CharMatcher
924 Creates a CharMatcher from a custom character filter. @param predicate predicate to evaluate characters against
925 Combines this matcher with another to create an "Or" character matcher.
926 Creates a character matcher for a specified range (inclusive). @param startInclusive the starting character (inclusive) @param endInclusive the ending character (inclusive)
927 Computes difference of two cache performance metrics. @param other another CacheStats object @return new CacheStats with subtracted values
928 Adds two cache statistics objects and returns a new CacheStats object with the combined metrics. @param other CacheStats object to add to this instance
929 Initializes multimap from an empty map. @param map empty map to initialize from
930 Initializes multimap from an empty map. @param map empty map to initialize from
931 Returns a contiguous subset of this set within the specified range. @param fromElement start element (inclusive/exclusive) @param fromInclusive whether start is inclusive @param toElement end element (inclusive/exclusive) @param toInclusive whether end is inclusive
932 Creates an EnumMultiset instance for a specified enum class. @param type the target enum class
933 Returns a subset of this sorted set from {@code fromElement} (inclusive) up to but not including {@code toElement}. @param fromElement starting element @param toElement ending element
934 Partitions the input iterator into chunks of specified size. @param iterator input iterator to partition @param size chunk size
935 Partitions the given iterator into chunks of specified size with padding. @param iterator input iterator to partition @param size chunk size @return UnmodifiableIterator over List of partitioned elements
936 Configures the MinMaxPriorityQueue with an expected size. @param expectedSize non-negative integer
937 Sets the maximum size of the MinMaxPriorityQueue with a natural ordering. @param maximumSize non-negative integer
938 Initializes AbstractStreamingHasher with default buffer and chunk sizes.
939 Calculates the population variance of the dataset. @return Population variance value or NaN if invalid
940 Calculates sample variance. @return sample variance or NaN if sum of squares is invalid
941 Calculates population variance. @return Population variance or NaN if sum of squares is invalid
942 Calculates the sample variance of accumulated data. @return Sample variance or NaN if sum of squares is invalid
943 Creates a CharMatcher that matches any of the characters in the specified sequence. @param sequence input character sequence
944 Trims and collapses character sequence by replacing non-matching characters with a specified replacement char. @param sequence CharSequence to process @param replacement replacement character for non-matches @return collapsed string as String result
945 Wraps objects with a custom equivalence strategy using the provided function. @param function mapping function to apply for comparison
946 Creates a pairwise equivalence strategy for iterable objects. @return PairwiseEquivalence instance, wrapping this equivalence strategy
947 Compares two iterables for element equality. @param iterable1 first iterable to compare @param iterable2 second iterable to compare @return true if both iterables are equal, false otherwise
948 Checks if two lists are equal. @param thisList the list to compare @param other nullable object to validate (may be a List) @return true if both lists contain the same elements, false otherwise
949 Creates a new instance of the ConcurrentHashMultiset with an initially empty backing map.
950 Creates a ConcurrentHashMultiset instance from an existing element counts map. @param countMap the initial state of the multiset's element counts
951 Joins iterable elements to an Appendable with customizable separator. @param appendable target Appendable @param parts iterator of elements to join @return the modified Appendable or throws IOException if occurs
952 Appends iterable elements to a StringBuilder with customizable separator. @param builder target StringBuilder @param parts iterator of elements to append @return the modified StringBuilder or throws IOException if occurs
953 Appends map entries to a StringBuilder. @param builder target StringBuilder @param map input map containing key-value pairs
954 Joins map entries into a string representation. @param entries iterable of key-value pairs
955 Adds a new unconditional value holder with the specified value. @param value value to be added, or null for no value
956 Adds a named value holder with optional value. @param name unique identifier for the value @param value nullable object to associate with the name
957 Adds a boolean value to the string representation. @param value boolean value to be held
958 Adds an unconditional string representation of a character.
959 Adds a double value to the string representation. @param value the double value to be added
960 Adds an unconditional float value to the string representation. @param value float value to be held
961 Adds an unconditional integer value holder with the specified value. @param value integer to be held
962 Adds an unconditional holder with the specified numeric value.
963 Adds a conditional value holder with a specified name and boolean value. @param name unique identifier for the value @param value boolean value to be stored in the collection
964 Adds an unconditional character holder to the collection with a specified name and value. @param name unique identifier for the character @param value character to be stored in the collection as a string
965 Adds an unconditional holder with a specified name and numeric value. @param name unique identifier for the value @param value numerical object to be stored in the collection
966 Adds a float value to the collection with a specified name. @param name unique identifier for the value @param value floating-point number to be stored in the collection
967 Adds an unconditional integer value holder with specified name and value. @param name unique identifier for the value @param value integer to be stored in the collection
968 Adds an unconditional value holder to the collection with a specified name and numeric value. @param name unique identifier for the value @param value numeric object to be stored in the collection as a string representation.
969 Creates an Optional instance for a potentially null value. @param nullableReference the reference to wrap, or null if absent
970 Initializes an empty iterable collection.
971 Returns an optional byte count if available. @return Optional<Long> containing the byte count or absent if unknown
972 Returns the length of the character source if known. @return Optional.Long instance with length or absent if unknown
973 Returns null if input string is null or empty; otherwise returns original string. @param string input string to evaluate
974 Parses a string in the format "host[:port]" and returns a HostAndPort instance. @param hostPortString input string
975 Skips a specified number of elements from the beginning of an iterable. @param numberToSkip count of elements to skip (must be non-negative)
976 Limits the number of elements in this iterable to a specified size. @param maxSize maximum number of elements to include
977 Retrieves an element from an iterable at a specified position or returns a default value if exhausted. @param iterable iterable collection to fetch from @param position index of the desired element (must be non-negative) @param defaultValue value to return if iterable is empty or position is out of bounds @return element at the specified position or default value
978 Retrieves an element from the given iterator at a specified non-negative index. @param iterator iterator to access @param position index of desired element
979 Retrieves an element from an iterator at a specified non-negative index. @param iterator iterator to fetch from @param position index of desired element (must be >= 0) @param defaultValue value to return if iterator is empty or exhausted @return element at specified index, or default value if not found
980 Creates a traverser for file structures. @return Traverser instance representing the file tree
981 Limits input stream to specified byte count. @param in underlying input stream @param limit maximum number of bytes that can be read from this stream
982 Creates an IPv4 InetAddress from a BigInteger representation. @param address the BigInteger to convert
983 Creates an IPv6 InetAddress from a BigInteger representation. @param address the BigInteger to convert
984 Creates a SIP-24 hash function instance with given keys. @param k0 first key value @param k1 second key value
985 Initializes FileBackedOutputStream with specified memory threshold. @param fileThreshold non-negative memory limit before switching to file storage
986 Converts an integer value into an IPv4 Inet4Address object. @param address the integer value to convert
987 Reserves a specified number of permits and returns wait time until they're available. @param permits number of permits to validate and acquire
988 Tries to acquire a specified number of permits within a given time window. @param permits number of permits to validate @param timeout maximum allowed wait time in the specified unit @param unit unit of time for the timeout value (e.g. TimeUnit.SECONDS) @return true if permits can be acquired, false otherwise
989 Serializes Bloom filter to output stream, including strategy and bitset data. @param out the OutputStream to write to
990 Creates a fixed-delay scheduler with specified timing configuration. @param initialDelay time to wait before first execution @param delay interval between subsequent executions
991 Creates a fixed-rate schedule with specified timing parameters. @param initialDelay time to wait before first execution @param period interval between subsequent executions
992 Converts a duration from the specified unit to nanoseconds, constraining it within a safe range. @param time duration in specified unit @param unit TimeUnit object specifying the unit of time
993 Creates and starts a stopwatch with the given Ticker instance. @param ticker unique identifier for time measurement
994 Configures the Builder to order entries by their associated values. @param valueComparator comparator for ordering values
995 Sets the desired concurrency level for thread-safe operations. @param concurrencyLevel positive integer value
996 Configures cache expiration after write operation based on input duration. @param duration non-negative time duration
997 Sets cache expiration after last access to specified duration. @param duration positive time span
998 Configures the cache to refresh after each write operation based on a given time duration. @param duration positive time duration for refresh
999 Sets cache key strength to Weak. @return this CacheBuilder instance for chaining
1000 Sets cache value strength to Weak. @return updated CacheBuilder instance
1001 Sets cache value strength to Soft. @return CacheBuilder instance with updated configuration
1002 Creates a map with weak keys. @return MapMaker instance for further configuration
1003 Configures map to use weak values. @return MapMaker instance with weak value strength
1004 Retrieves the failure cause of the service. @return The Throwable object representing the cause of failure, or null if not failed
1005 Validates element index against collection size. @param index index to validate @param size collection size
1006 Validates collection index position. @param index target index value @param size collection size
1007 Validates position indexes for a collection. @param start starting index @param end ending index @param size total collection size
1008 Creates a predicate that checks for equality with the given target object. @param target the object to compare against
1009 Filters a filtered multimap using an additional entry predicate. @param multimap underlying filtered multimap @param entryPredicate predicate to filter entries further
1010 Filters a multiset based on the given predicate. @param unfiltered original multiset to filter @param predicate condition for element inclusion
1011 Creates a Splitter for splitting based on the given character matcher. @param separatorMatcher matcher to identify separators in input string
1012 Creates a Splitter with fixed-length splitting strategy. @param length minimum chunk size
1013 Returns a pre-configured splitter with whitespace trimmed from split results.
1014 Creates an unstarted stopwatch instance.
1015 Creates and starts a stopwatch instance.
1016 Calculates the encoded length of a UTF-8 CharSequence in bytes. @param sequence input character sequence
1017 Awaits executor termination without interruption indefinitely. @param executor ExecutorService to wait for
1018 Continuously processes and cleans up finalizable references from the queue.
1019 Initializes an empty Builder instance.
1020 Creates a cache loader based on a provided computation function. @param function function to compute values based on keys
1021 Creates a CacheLoader instance from a supplier function. @param supplier generates values when needed
1022 Loads all values for the specified keys, throwing an exception if unsupported. @param keys iterable of unique keys
1023 Calculates cache hit rate by dividing hits by total requests. @return Hit rate as a double value
1024 Calculates cache miss rate as a ratio of misses to total requests. @return Miss rate value or 0 if no requests
1025 Initializes an empty ForwardingLoadingCache instance.
1026 Initializes an empty ForwardingList instance.
1027 Initializes an empty ForwardingMultiset instance.
1028 Initializes an empty ForwardingQueue instance.
1029 Initializes an empty ForwardingSet instance with default behavior.
1030 Initializes an empty ForwardingIterator instance.
1031 Initializes an instance of AbstractBiMap with a pre-existing forward and inverse mapping. @param backward the forward mapping (key-value pairs) @param forward the inverse mapping (value-key pairs)
1032 Initializes an empty ForwardingConcurrentMap instance.
1033 Initializes an empty ForwardingSortedMap instance.
1034 Initializes an empty instance of MutableTypeToInstanceMap.
1035 Initializes an empty ForwardingListMultimap instance.
1036 Initializes an empty ForwardingMultimap instance.
1037 Initializes an empty ForwardingExecutorService instance with default settings.
1038 Initializes an empty ForwardingFuture instance with default settings.
1039 Creates a new cache entry with the given key and reference information. @param segment the associated cache segment @param key the associated key @param hash the hash value of the key @param next the next entry in the linked structure (optional)
1040 Creates a new cache entry with the specified key and hash value. @param segment associated cache segment @param key weakly referenced key @param hash entry hash value @param next next entry in access or write queues (may be null)
1041 Retrieves result from completed future while ensuring resource closure. @throws ExecutionException if future operation fails
1042 Triggers cleanup and cache removal notifications after write operation.
1043 Creates a weighted soft value reference from the given cache segment and reference entry. @param segment cache segment containing cached data @param entry reference entry with metadata about the cached data @param value associated value of the cache entry @param weight importance factor for prioritization
1044 Creates a strong value reference with specified weight. @param segment cache segment @param entry associated reference entry @param value referenced object value @param weight importance score for caching eviction policy
1045 Creates a new value reference with specified attributes. @param segment segment association @param entry key-value pair reference entry @param value associated object @param weight priority value for this reference
1046 Updates cache entry's access time and adds to recency queue. @param entry cached entry @param now current timestamp
1047 Records a locked read operation for the given cache entry. @param entry cached entry being accessed @param now current timestamp
1048 Updates cache entry with the given details after a write operation. @param entry cached entry to update @param weight new weight value @param now current timestamp
1049 Retrieves the live value from a cache entry. @param entry ReferenceEntry object to check @param now current timestamp in nanoseconds @return V cached value or null if expired or invalid
1050 Calculates the number of elements in an iterable collection. @param iterable The input iterable to be counted
1051 Calculates the size of this multisets using linear time complexity. @return size of the multiset
1052 Converts InputStream to byte array by dynamically allocating buffers. @param in input stream @param bufs queue of allocated byte arrays @param totalLen total length of the combined buffer @return byte array containing the input data or throws OutOfMemoryError if too large
1053 Sets the delegates, a forward and an inverse map, to the provided mappings. @param forward The forward map @param backward The inverse map
1054 Creates an empty GeneralRange with specified comparator. @param comparator comparison function for range endpoints
1055 Creates a range that starts from the specified endpoint and goes down to infinity. @param comparator comparison function for range endpoints @param endpoint starting point of the range @param boundType type of lower bound (inclusive or exclusive)
1056 Creates a range with the specified upper bound and endpoint value. @param comparator comparison function for range endpoints @param endpoint nullable upper endpoint value @param boundType type of upper bound (inclusive or exclusive)
1057 Creates a GeneralRange with specified bounds and comparator. @param comparator comparison function for range endpoints @param lower nullable lower endpoint value @param lowerType type of lower bound (inclusive or exclusive) @param upper nullable upper endpoint value @param upperType type of upper bound (inclusive or exclusive)
1058 Computes the intersection of two ranges with specified bounds and comparator. @param other the range to intersect with @return a new GeneralRange object representing the intersection
1059 Retrieves the next element in the sequence without removing it. @return The next element, or null if not available
1060 Removes all values associated with the specified key. @param key unique identifier to remove
1061 Validates iterator state to prevent concurrent modification issues.
1062 Associates a value with a key, or adds to an existing collection. @param key unique identifier @param value associated value @return true if added successfully, false otherwise
1063 Associates a value with a key, or adds to an existing collection. @param key unique identifier @param value associated value @return true if added successfully, false otherwise
1064 Retrieves a list of values associated with the specified key. @param key unique identifier
1065 Retrieves a multiset view for the specified key. @param key unique identifier
1066 Returns a collection of key-value pairs associated with this multimap. @return Collection of Entry objects or null if not initialized
1067 Writes the contents of this multimap to an ObjectOutputStream. @param size total number of key-value pairs @throws IOException if serialization fails
1068 Converts a collection to a string representation. @param collection the input collection
1069 Converts a map to a human-readable string representation.
1070 Creates an ArrayList with the specified expected size. @param estimatedSize initial capacity estimate
1071 Creates a new HashMap instance with the specified expected size. @param expectedSize anticipated number of entries
1072 Creates a linked hash map with the specified expected size. @param expectedSize anticipated number of entries
1073 Creates a HashSet with the specified initial capacity based on expected size. @param expectedSize anticipated number of entries
1074 Creates a linked hash set with the specified expected size. @param expectedSize anticipated number of entries
1075 Creates a list-based multimap builder with default expected value count per key. @see #arrayListValues(int) for customization
1076 Creates a SetMultimapBuilder with default expected values per key.
1077 Creates a builder for a linked set multimap with default expected values per key.
1078 Creates a MultimapBuilder with hash keys and default expected key count.
1079 Creates a MultimapBuilder with linked hash keys and default expected size.
1080 Creates an immutable entry with the given element and count. @param e the associated element @param n the occurrence count (validated to be non-negative)
1081 Updates the count of a specific element in this multiset. @param element the element to update @param count the new count value @return the previous count value
1082 Updates the count of an element in this multiset. @param element the element whose count is updated @param oldCount the current count @param newCount the new count
1083 Computes hash code based on map representation of multimap. @return Hash code value
1084 Returns a string representation of this multimap in map format.
1085 Returns a set of entries in this multiset. @return Set of Multiset.Entry objects
1086 Calculates hash code based on the multiset's entries. @return Hash code value
1087 Returns a string representation of this multiset as its entries set.
1088 Retrieves the first entry from this map's entry set. @return first entry or null if empty
1089 Finds the smallest element in this set that is greater than or equal to the specified element. @param e target element @return ceiling element or null if not found
1090 Returns the highest element in this set greater than or equal to the specified element. @param e the reference element @return higher element or null if not found
1091 Creates an empty TreeRangeSet instance.
1092 Checks if the given Comparable value falls within any managed range. @param value the value to check for containment
1093 Checks if the input iterable has a comparator that is equal to the provided one. @param comparator comparator to compare with @param elements iterable to check (must be a SortedSet or SortedIterable) @return true if the comparators are equal, false otherwise
1094 Inserts all values from another Table into this AbstractTable. @param table the source Table containing values to be inserted
1095 Retrieves the set of cells within this table. @return Set of Cell objects or creates a new one if not initialized
1096 Retrieves the set of cells within this table. @return Set of Cell objects or creates a new one if not initialized
1097 Retrieves table values.
1098 Retrieves table values, delegating to superclass implementation.
1099 Creates an ordering based on the result of applying a given transformation function. @param function Function to apply for sorting
1100 Creates an ordering instance based on the provided comparator. @param comparator nullable comparator to initialize or validate
1101 Creates a CompoundOrdering instance with this comparator as primary and the given comparator for secondary sorting. @param secondaryComparator additional comparator for tie-breaking
1102 Creates an immutable cell with a specified row key, column key, and value. @param rowKey unique row identifier @param columnKey unique column identifier @param value stored cell value
1103 Checks if ArrayTable contains specified row and column keys. @param rowKey object to search for (row key) @param columnKey object to search for (column key) @return true if both row and column keys exist, false otherwise
1104 Creates an immutable map entry with the given key and value. @param key unique key identifier @param value associated value
1105 Creates an immutable map entry from the given Entry or creates a new one if it's not reusable. @param entry existing entry to reuse @param key unique key identifier @param value associated value
1106 Adds an Entry to the multimap using its key and value. @param entry a pre-existing Entry object
1107 Adds a key-value pair to the multimap. @param key unique key @param value associated value
1108 Dynamically resizes the compact hash map's internal structures if necessary. @param newSize target size for entries, keys, and values arrays
1109 Inserts a new entry at the specified index with given key and value. @param entryIndex compacted index of entry to insert @param key new key for entry @param value new value for entry @param hash hash code for key @param mask bit mask controlling combination with prefix value
1110 Dynamically resizes the compact hash set's internal structures to accommodate a specified capacity. @param newSize desired size of the resized arrays
1111 Inserts a new entry into the compact hash set. @param entryIndex index to insert at @param object new element value @param hash hash code for the entry @param mask bit mask for the entry
1112 Allocates internal arrays for storing key-value pairs and updates metadata. @return estimated number of hash table entries
1113 Allocates internal arrays and configures the compact hash table. @return estimated number of hash table entries
1114 Checks if this range completely encloses another. @param other the range to check
1115 Checks if this range overlaps with another. @param other the other Range to compare
1116 Serializes the ImmutableSetMultimap to an ObjectOutputStream. @throws IOException if serialization fails
1117 Creates an immutable range map builder.
1118 Creates an empty range set builder.
1119 Creates an empty ImmutableTable Builder instance.
1120 Returns an unmodifiable iterator over the elements of this view. @return UnmodifiableIterator object
1121 Counts occurrences of an object in an iterable collection. @param iterable the collection to search @param element the object to find in the collection @return frequency of the object (0 or more)
1122 Checks if this map contains a specific key. @param key the key to find in the map @return true if found, false otherwise
1123 Checks if this map contains a specified value. @param value the object to find in the map
1124 Finds the lower entry with a key <= the given key. @param key The key to find the corresponding lower entry for @return Lower entry's key or null if not found
1125 Finds the smallest map key greater than or equal to the target key. @param key target key @return Key object, or null if no such key exists
1126 Finds the smallest key greater than or equal to the given key. @param key key for which to find the entry @return Key object or null if not found
1127 Returns the entry with the highest key greater than or equal to the specified key. @param key The reference key
1128 Returns the first key in the map. @return First key or throws NoSuchElementException if empty
1129 Retrieves the last key in the map. @return Last key or throws NoSuchElementException if empty
1130 Retrieves the last entry from this map's entries in descending key order. @return Last Entry object or null if empty
1131 Retrieves last entry from descending map view.
1132 Returns a view of this map's keys in reverse order. @return A new NavigableSet object with keys sorted in descending order
1133 Returns a sub-map containing key-value pairs between the specified keys (inclusive for 'fromKey', exclusive for 'toKey'). @param fromKey starting key @param toKey ending key
1134 Retrieves the entry with the lowest key greater than or equal to the specified key. @param key target key
1135 Returns floor entry in this map with the specified key. @param key key to find
1136 Returns a view of all key-value pairs in this map with keys less than 'toKey'. @param toKey maximum key (exclusive)
1137 Returns the entry with the smallest value greater than or equal to the given key. @param key the target key @return Entry object or null if not found
1138 Returns the entry with the highest key value greater than the given key. @param key target key
1139 Returns a view of the map's entries starting from the given key. Includes the starting key (inclusive). @param fromKey starting key
1140 Creates a sub-multiset from the standard multiset with specified bounds. @param lowerBound minimum value (inclusive) @param lowerBoundType specifies whether to include or exclude the bound @param upperBound maximum value (inclusive) @param upperBoundType specifies whether to include or exclude the bound
1141 Creates a new instance of the HashBasedTable with an empty backing map and default value factory.
1142 Deserializes EnumMultiset object from an ObjectInputStream. @param stream input stream containing serialized data
1143 Moves the last entry in the compact hash map to a specified position. @param dstIndex target index to move the last entry to @param mask bit mask to control combination operations
1144 Moves the last entry in the compact hash set to a specified index. @param dstIndex target position for the last entry @param mask bit mask controlling movement and updates
1145 Checks if map contains specified value. @param value the value to search for
1146 Creates a new builder with the specified expected size. @param expectedSize initial capacity of the entries array
1147 Initializes builder with default initial capacity.
1148 Creates an instance of the immutable map builder.
1149 Initializes builder with a specified comparator. @param comparator Comparator instance to order map entries
1150 Creates an immutable bi-map with a single key-value pair. @param k1 unique key @param v1 associated value
1151 Adds a unique element to the set.
1152 Initializes the Builder object with default capacity.
1153 Creates a Builder object with an initial capacity based on the specified size. @param expectedSize non-negative integer value for the expected list size
1154 Adds all elements from an iterable to the builder. @param elements Iterable of elements to be added
1155 Adds multiple copies of specified elements from an iterator to the multiset. @param elements Iterator of elements to be added
1156 Adds all elements from an iterator to the collection. @param elements Iterator of elements to be added
1157 Creates a serialized representation of this ImmutableMap instance.
1158 Creates an immutable table instance with the given row key, column key, and value. @param rowKey unique row identifier @param columnKey unique column identifier @param value associated data value
1159 Converts iterable delegate to a comma-separated string representation. @return string representation of the underlying iterable
1160 Adds multiple entries with the same key. @param key unique map key @param values collection of values to add @return Builder instance for method chaining
1161 Retrieves the single element from an iterable, returning the default value if empty. @param iterable iterable collection @param defaultValue value to return if iterable is empty
1162 Retrieves the last element from an iterable with optional default value. @param iterable Iterable object to extract elements from @param defaultValue Default value to return if iterable is empty or contains no elements
1163 Associates a single value with the specified key. @param key unique identifier @param value associated value
1164 Partitions the input list into sublists of specified size. @param list collection to be divided @param size number of elements per sublist
1165 Searches this list for the specified element. @param element object to find
1166 Searches for the last occurrence of a specified object in this list. @param element the object being searched for (may be null) @return index of last occurrence or -1 if not found
1167 Performs locked cleanup before writing to ensure thread safety.
1168 Creates an empty unmodifiable TreeMap instance to store range entries.
1169 Finds the minimum element within a specified range in the heap. @param index starting index of the range @param len length of the range @return index of the minimum element or -1 if not found
1170 Returns the index of the maximum element in the queue.
1171 Retrieves the minimum element from the priority queue.
1172 Bubbles up the given element to its correct position in the heap, alternating between levels. @param index starting node index @param x element to be bubbled up @return new index of the bubbled-up element
1173 Returns an iterator over the elements of this multisets. @return iterator instance
1174 Concatenates a single object with an existing array. @param element the object to add @param array the array to concatenate into
1175 Converts a Collection to an array of specified type. @param c collection to convert @param array target array; may be resized or filled @return the converted array
1176 Finds the minimum element in an iterable based on custom ordering criteria. @param iterable collection of elements to compare
1177 Finds the maximum element in an iterable collection. @param iterable a sequence of elements to compare
1178 Returns human-readable string representation of this contiguous set's range. @see #range()
1179 Creates a GeneralRange from an existing Range, preserving its bounds and comparator. @param range input range to convert
1180 Creates a submap of the provided NavigableMap within the specified Range. @param map original NavigableMap @param range range to create submap for @return submap instance or original map if no valid range was specified
1181 Creates a subset of the specified NavigableSet within the given Range. @param set original NavigableSet @param range subset bounds @return Subset NavigableSet or the original set if no bounds are provided
1182 Returns a sorted map of rows to their respective column maps. @return Sorted map of rows (R) to maps of columns (C) to values (V)
1183 Creates a synchronized view of the given queue. @param queue underlying queue to synchronize
1184 Initializes ArrayBasedCharEscaper with a mapping and character range. @param escaperMap mapping of characters to their escaped representations @param safeMin minimum safe character value @param safeMax maximum safe character value
1185 Initializes a new instance of ArrayBasedUnicodeEscaper with the provided parameters. @param escaperMap map containing character mappings @param safeMin minimum safe code point value @param safeMax maximum safe code point value @param unsafeReplacement replacement string for unsafe characters
1186 Creates a PercentEscaper instance with the specified safe characters and space encoding option. @param safeChars String containing allowed characters @param plusForSpace whether to include '+' for space encoding
1187 Escapes special characters in the input string. @param string input string to process @return escaped string or original if no special chars found
1188 Creates a subscriber instance for the given event bus, listener object, and method. If the method is thread-safe, creates a regular Subscriber; otherwise, uses a synchronized wrapper. @param bus EventBus instance @param listener Object to invoke the method on @param method Method to be executed in response to events @return Subscriber instance or its synchronized variant if the method is not thread-safe
1189 Returns a string representation of the graph, including its properties. @return String containing directed status, self-loop allowance, node count, and edge set
1190 Returns a set of all edges in the graph as EndpointPairs. @return Set<EndpointPair<N>> containing all edges in the graph
1191 Returns a set of all edges in the graph as EndpointPairs. @return Set<EndpointPair<N>> containing all edges in the graph
1192 Inserts a double value into the hash process by converting it to its raw long bits. @param d the double value to be hashed
1193 Creates a Bloom filter collector with the specified funnel and parameters. @param funnel Funnel to use for inserting elements @param expectedInsertions Expected number of insertions (must be >= 0)
1194 Calculates the expected false positive probability using the Bloom filter's parameters. @return Expected false positive rate as a double value
1195 Checks if another BloomFilter is compatible with this instance. @param that the other BloomFilter to compare
1196 Converts single byte to its string representation in base 10.
1197 Merges another BloomFilter into this instance, ensuring both filters have the same hash functions, bit size, strategy, and funnel. @param that BloomFilter to combine with
1198 Creates a hash code instance from the given byte array. @param bytes nullable byte array to validate and store
1199 Creates a HashCode instance from an integer hash value. @param hash the integer hash code to be wrapped
1200 Creates a new HashCode instance from a given long hash value. @param hash the long hash value to be wrapped
1201 Returns this unsigned integer's value as an unsigned float.
1202 Converts this unsigned integer to a double value.
1203 Converts this unsigned integer to a BigInteger representation. @return BigInteger object representing the unsigned integer's value
1204 Returns a fast hash function based on Murmur3 with the specified minimum number of bits. @param minimumBits input number of bits
1205 Computes a consistent hash value within the given number of buckets. @param hashCode Hash object to be padded and hashed @param buckets positive integer number of hash buckets @return index representing the hashed bucket
1206 Generates HMAC-MD5 hash function using the specified secret key. @param key secret key for hashing operations
1207 Generates HMAC-SHA1 hash function using the provided secret key. @param key secret key for hashing operations
1208 Generates an HMAC SHA-256 hash function instance. @param key secret key for hashing operations
1209 Generates an HMAC SHA-512 hash function instance with the specified secret key. @param key secret key for hashing operations
1210 Concatenates multiple byte streams into one. @param sources iterable of ByteSources to concatenate
1211 Concatenates multiple character sources into one. @param sources iterable of sources to be concatenated
1212 Creates a ByteArrayDataInput instance from a byte array. @param bytes input byte array
1213 Creates a ByteArrayDataOutput instance with no underlying byte array output stream. @return new ByteArrayDataOutput object
1214 Creates a ByteArrayDataOutput instance with specified initial capacity. @param size initial byte array size
1215 Initializes ReaderInputStream with a Reader, Charset, and buffer size. @param reader input character stream @param charset character encoding scheme @param bufferSize initial buffer capacity
1216 Counts total bytes by skipping and summing up skipped amounts. @param in InputStream to count from @return total byte count or throws IOException if an error occurs.
1217 Skips a specified number of bytes from the InputStream. @param in InputStream to skip from @param n maximum number of bytes to skip @throws EOFException if end of stream reached before skipping all bytes
1218 Writes multiple lines to the output stream using a specified line separator. @param lines iterator over CharSequence objects @param lineSeparator string representing the line separator (e.g. "\n", "\r\n")
1219 Writes multiple lines to the output stream using a specified line separator. @param lines iterator over CharSequence objects @param lineSeparator string representing the line separator (e.g. "\n", "\r\n")
1220 Iterates over each line of character source and applies the given action. @throws IOException if an I/O error occurs
1221 Reads all lines from a given Readable source. @param r input source, validated against NPE @return List of strings containing each line or an empty list if no lines are available
1222 Reads lines from a readable source and processes them using the provided LineProcessor. @param readable input source, validated against NPE @param processor callback to process each line; must not be null @return result of processing (or null if no lines were processed)
1223 Reads more characters from the input stream into the character buffer. Handles cases where the buffer is full or needs to be resized.
1224 Reads and returns a signed short value from two bytes. @throws IOException I/O error occurred
1225 Reads and returns an unsigned short value, then casts it to a char. @throws IOException I/O error occurred
1226 Reads and returns a little-endian float value from four bytes. @throws IOException I/O error occurred
1227 Reads and returns a double value from the input stream in little-endian byte order. @throws IOException I/O error occurred
1228 Writes a string as an array of characters in little-endian byte order. @param s the input string to be written
1229 Writes double value to output stream in little-endian order. @param v the double value to write
1230 Deletes directory contents recursively using an insecure method. @param dir DirectoryStream containing paths to delete @return collection of IOExceptions encountered during deletion or null if successful
1231 Recursively deletes a directory and its contents securely. @param dir SecureDirectoryStream to the target directory @param path Path to delete @return Collection of IOExceptions encountered during deletion or null if successful
1232 Initializes the stream with an iterator of byte sources. @param it iterator of input streams
1233 Converts resource to CharSource object using specified character set. @param charset target character set
1234 Calculates the number of ordered permutations for a given sorted input list. @param sortedInputList sorted list of elements @param comparator comparator to determine element order @return number of permutations or MAX_VALUE on overflow
1235 Calculates the mean of a stream of numbers. @param values iterator over Number objects @return calculated mean value or NaN if invalid input
1236 Checks if a double value represents a power of two. @param x input double value @return true if power of two, false otherwise
1237 Checks if a double value represents a mathematical integer. @param x input double value @return true if x is a mathematical integer, false otherwise
1238 Rounds a long integer value to a double, according to the specified RoundingMode. @param x long value to round @param mode rounding strategy (e.g. UNNECESSARY, FLOOR, CEILING, etc.)
1239 Compares two double values with a given tolerance. @param a first value @param b second value @param tolerance maximum allowed difference
1240 Calculates maximum run length before hash table rebuild based on log2 table size. @param tableSize current hash table capacity
1241 Trims the buffer to size K and updates the threshold. @param k desired buffer size
1242 Calculates the base-10 logarithm of an integer, considering rounding mode. @param x input integer value @param mode rounding mode (UNNECESSARY, FLOOR, DOWN, CEILING, UP, HALF_DOWN, HALF_UP, or HALF_EVEN) @return the calculated log10 value with rounding applied according to the specified mode
1243 Calculates the square root of an integer with rounding based on mode. @param x input integer value @param mode rounding mode (e.g. UNNECESSARY, FLOOR) @return square root value or rounded value based on mode
1244 Calculates the new capacity for the priority queue while considering size constraints and ensuring efficient growth. @return new capacity, capped at the specified maximum size
1245 Creates a horizontal linear transformation with given y-coordinate. @param y the y-coordinate of the line
1246 Constructs a linear transformation with the specified slope. @param slope the vertical scale factor
1247 Creates a linear transformation with a given horizontal scale factor. @param x horizontal scale factor
1248 Calculates the factorial of a given integer. @param n input value (non-negative) @return BigInteger representation of the factorial result
1249 Computes the base-10 logarithm of a long integer value. @param x input value @param mode rounding mode to apply (e.g. UNNECESSARY, FLOOR, CEILING) @return log10(x) as an int
1250 Simplifies the product of a whole number and fraction using GCD to reduce fraction. @param x whole number @param numerator numerator of the fraction @param denominator denominator of the fraction @return product as a long integer
1251 Computes the power of a long integer with overflow check. @param b base value @param k exponent (throws exception if < 0)
1252 Calculates population covariance between paired variables. @return Covariance value or throws IllegalStateException if count is zero
1253 Calculates sample covariance between paired variables. @return Sample covariance value
1254 Calculates Pearson's correlation coefficient. @return Correlation coefficient value or NaN if invalid
1255 Computes the arithmetic mean of a dataset. @param values iterator over numerical data points @return the calculated mean value
1256 Adds a data point to the accumulator and updates statistics. @param value the new data point value
1257 Calculates population covariance between paired data points. @return Population covariance value or throws IllegalStateException if no data points exist
1258 Calculates sample covariance. @return Sample covariance value
1259 Calculates the Pearson's correlation coefficient. @return The correlation coefficient value or NaN if invalid data
1260 Partitions the given numerical array around a pivot element. @param array input numerical array @param from index where the pivot should be placed @param to end index of the slice @return index after which all elements are greater than the pivot
1261 Creates PairedStats object from a byte array. @param byteArray input data stream @return initialized PairedStats object or throws exception if invalid
1262 Creates a Stats object from a byte array. @param byteArray input data in little-endian order
1263 Returns a snapshot of current statistical metrics. @return Stats object containing aggregated data
1264 Returns a snapshot of paired statistical metrics. @return Stats object containing aggregated data
1265 Returns aggregated Y-statistical metrics snapshot.
1266 Creates a Collector to accumulate Numbers into aggregated statistical metrics. @return A Collector that computes mean, variance, and standard deviation
1267 Converts an InetAddress object to a URI string representation. @param ip InetAddress object @return String representation of the IP address in URI format, or [IP] for IPv6 addresses.
1268 Retrieves Inet4Address from an IPv6 address that is compatible with IPv4. @param ip the IPv6 address to check @return Inet4Address object or throws exception if not compatible
1269 Retrieves the IPv4 address from a given 6to4 IPv6 address. @param ip IPv6Address object to extract IPv4 address from
1270 Retrieves the IPv4 part of an ISATAP address. @param ip Inet6Address object containing the ISATAP address
1271 Computes result from scaled and indexed dataset. @param dataset Collection of numbers to process
1272 Computes quantiles from the provided numerical dataset. @param dataset Collection of numbers to process @return Mapping of calculated quantile values
1273 Adds a double value to the immutable array. @param value the double element to be added
1274 Adds all elements from the specified double array. @param values double array to be added
1275 Adds all double values from the specified collection, ensuring sufficient capacity. @param values collection of double values to add
1276 Adds all elements from the specified immutable double array. @param values ImmutableDoubleArray to be added
1277 Creates an immutable double array with a single element. @param e0 initial double value
1278 Creates an ImmutableDoubleArray from two specified doubles. @param e0 first double value @param e1 second double value
1279 Creates an immutable double array with a specified size. @param e0 first element @param e1 second element @param e2 third element
1280 Creates an ImmutableDoubleArray instance from a compacted array of four doubles. @param e0 first double value @param e1 second double value @param e2 third double value @param e3 fourth double value
1281 Creates an ImmutableDoubleArray instance from a specified array of five doubles. @param e0 first double value @param e1 second double value @param e2 third double value @param e3 fourth double value @param e4 fifth double value
1282 Creates an immutable array with a fixed size of 6 doubles. @param e0 first double value @param e1 second double value @param e2 third double value @param e3 fourth double value @param e4 fifth double value @param e5 sixth double value
1283 Creates an immutable double array copy from a given array. @param values original double array
1284 Creates an immutable double array from a collection of Double values. @param values Collection of doubles to convert
1285 Creates an ImmutableDoubleArray from a DoubleStream. @param stream input stream of doubles
1286 Returns an immutable double array with excess elements removed. @return A trimmed view of the original data, or a copy if partial
1287 Checks if this array contains the specified double value. @param target double to search for
1288 Adds an integer to the builder's internal array. @param value integer to be added
1289 Adds all integers from the given array to the builder. @param values integer array to add
1290 Adds all integers from a collection to the immutable integer array. @param values collection of integers to be added
1291 Adds all integers from the specified ImmutableIntArray to this builder. @param values ImmutableIntArray containing additional integers
1292 Creates an ImmutableIntArray with a single integer element. @param e0 initial integer value
1293 Creates an immutable integer array with two elements. @param e0 first element @param e1 second element
1294 Creates an ImmutableIntArray with specified integer elements. @param e0 first element @param e1 second element @param e2 third element
1295 Constructs a 4-element ImmutableIntArray from individual integer values. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element
1296 Creates an ImmutableIntArray with the specified integer values. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @param e4 fifth element
1297 Creates an ImmutableIntArray from six integer elements. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @param e4 fifth element @param e5 sixth element
1298 Copies an integer array into an immutable array. @param values input integer array
1299 Creates a new ImmutableIntArray from an IntStream. @param stream IntStream to copy
1300 Returns a trimmed view of this array, preserving integrity if partially visible.
1301 Adds a single long value to the builder, ensuring sufficient internal storage capacity. @param value the long value to be added
1302 Adds all long values from the specified array to the builder. @param values array of long values to be added
1303 Adds all long values from the specified collection. @param values Collection of long integers to be added
1304 Adds all long values from the given ImmutableLongArray. @param values source immutable array
1305 Creates an ImmutableLongArray instance from a single long value. @param e0 The initial element in the array
1306 Creates an ImmutableLongArray instance from two specified long values. @param e0 first long element @param e1 second long element
1307 Creates an ImmutableLongArray instance from three specific long values. @param e0 first long value @param e1 second long value @param e2 third long value
1308 Constructs an ImmutableLongArray instance from four specified long values. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element
1309 Constructs an ImmutableLongArray instance from five specified long values. @param e0 first value @param e1 second value @param e2 third value @param e3 fourth value @param e4 fifth value
1310 Creates an ImmutableLongArray instance from a specified array of six long elements.
1311 Creates an ImmutableLongArray instance from a specified long array. @param values input array of long integers
1312 Creates an ImmutableLongArray instance from a LongStream. @param stream input stream of long values
1313 Returns a trimmed view of this array if it's a partial view; otherwise, returns this array itself.
1314 Creates ScaleAndIndexes object from collection of integer indexes. @param indexes collection of integers to convert
1315 Creates a new ImmutableIntArray from a given collection of integers. @param values input integer collection
1316 Creates an immutable long array from a given collection of longs. @param values Collection containing long elements
1317 Tries to parse a string representation of an integer value in the specified radix. @param string string representation of the integer value @param radix base number system (2-36) @return parsed Integer value or null if invalid input
1318 Attempts to parse a string representation of a long value in radix 10. @param string string representation of the long value
1319 Decodes a string into an unsigned int using automatic radix detection. @param stringValue input string to parse
1320 Creates UnsignedInteger instance from a long value, checking for valid unsigned range. @param value the long value to convert
1321 Creates UnsignedInteger instance from BigInteger, ensuring it's within unsigned integer range. @param value BigInteger to be converted
1322 Constructs an UnsignedInteger from a string representation with specified radix. @param string input string to parse @param radix base of the number in the string
1323 Performs unsigned integer addition with another value. @param val the value to add (must not be null)
1324 Performs unsigned integer subtraction. @param val other unsigned integer value to subtract @return result of this - val
1325 Multiplies two unsigned integers. @param val the other factor @return product of this and val, or null if val is null
1326 Divides this unsigned integer by another. @param val The divisor
1327 Computes the unsigned integer remainder of this value divided by divisor. @param val other value to divide with @return UnsignedInteger result of division operation
1328 Returns string representation of unsigned integer in decimal radix.
1329 Compares this unsigned integer with another, flipping signs for unsigned comparison. @param other UnsignedInteger to compare against
1330 Creates an UnsignedLong instance from a given non-negative long integer value. @param value long value to create UnsignedLong instance from
1331 Creates an UnsignedLong instance from a BigInteger value. @param value non-negative BigInteger value
1332 Adds an unsigned long value to this instance. @param val the value to add @return the sum as a new UnsignedLong object
1333 Subtracts an unsigned long value. @param val value to subtract @return result of subtraction or null if input is invalid
1334 Computes product of this unsigned long value and another. @param val other unsigned long value @return product as an UnsignedLong instance
1335 Divides two unsigned long values and handles overflow. @param dividend value to be divided @param divisor value by which to divide @return result of division or an approximation if necessary
1336 Computes the remainder of unsigned long division. @param dividend dividend value @param divisor divisor value @return remainder value
1337 Parses a string representation of an unsigned long in the specified radix. @param string string to parse @param radix base of the number system
1338 Parses an unsigned long from a string in base 10. @param string string to parse
1339 Decodes a string representation of an unsigned long, automatically determining the radix. @param stringValue string containing numerical value
1340 Checks if the underlying member is package-private. @return true if private, protected, or public, false otherwise
1341 Wraps the represented type with its corresponding wrapper class if it's a primitive. @return TypeToken instance for the wrapped Class object, or the original token if not primitive
1342 Unwraps the primitive wrapper class from its corresponding primitive type. @return The original TypeToken instance if not a wrapper, otherwise a new TypeToken for the unwrapped type
1343 Retrieves the component type from the runtime type, or returns null if not found. @return TypeToken representation of the component type, or null if not present
1344 Retrieves result of asynchronous computation. @throws InterruptedException if interrupted while waiting @throws ExecutionException if task execution failed
1345 Submits a task for execution and adds the resulting future to a blocking queue. @param executorService executor service instance @param task callable task to be executed @param queue blocking queue where future will be added @return ListenableFuture representing the submitted task
1346 Awaits service to reach running state within specified timeout. @param timeout time interval for waiting
1347 Awaits service to reach running state within specified timeout. @param timeout time interval for waiting
1348 Awaits service to reach running state within specified timeout. @param timeout time interval for waiting
1349 Awaits service to reach running state within specified timeout. @param timeout time interval for waiting
1350 Awaits service termination within specified timeout. @param timeout time interval to wait
1351 Awaits service termination within specified timeout. @param timeout time interval to wait
1352 Awaits service termination within specified timeout. @param timeout time interval to wait
1353 Awaits service termination within specified timeout. @param timeout time interval to wait
1354 Collects a value from a non-cancelled future, handling exceptions if any. @param index the position of the value in the collection @param future the Future to get result from
1355 Adds a value to the atomic double and returns the result. @param delta value to add @return updated double value or -9223372036854775808.0 if failed
1356 Atomically adds and returns a new value by summing the current value with the provided input. @param delta input double value to be added
1357 Adds a value to the atomic array at index i and returns the result. @param i array index @param delta value to add
1358 Atomically adds a value to array element at index i and returns result. @param i array index to update @param delta value to add
1359 Cancels the asynchronous task and closes managed resources. @param mayInterruptIfRunning whether to interrupt running tasks @return true if cancellation was successful, false otherwise
1360 Finds a path from the current node to the given target node in the lock graph. @param node target node @param seen set of visited nodes to prevent infinite recursion @return ExampleStackTrace object representing the found path, or null if not found
1361 Creates a ListenableFutureTask from the given callable. @param callable task to be executed
1362 Creates a new ListenableFutureTask instance with a given Runnable task and result. @param runnable executable task to be executed @param result null-allowed return value of the task
1363 Executes pending runnables when task completion is notified.
1364 Creates an instance of the ExecutionSequencer class.
1365 Wraps a ListenableFuture in a FluentFuture, if not already one. @param future the asynchronous computation to wrap
1366 Propagates a non-cancellation future from the provided ListenableFuture. @param future input future to be propagated @return ListenableFuture with propagation enabled
1367 Reloads cached value for a given key and old value. @param key unique cache key @param oldValue previous cached value (null if not cached) @return ListenableFuture containing the new loaded value or null
1368 Enqueues an event with its associated label to all registered listener queues. @param event Event object
1369 Enqueues an event with its associated label to all registered listener queues. @param event Event object @param label Label object for the event
1370 Dispatches events to registered listeners when the current thread is holding the lock. @param none
1371 Dispatches events to all registered listener in order they were received. @throws Exception if monitor is held by current thread
1372 Signals the next waiting thread whose condition is satisfied.
1373 Submits an asynchronous operation for execution on the specified executor. @param callable async operation to be executed @param executor thread pool to run the operation in
1374 Schedules async operation with specified delay. @param callable asynchronous operation to be executed @param delay time before execution in the given unit @param timeUnit time unit for delay @param executorService scheduling service @return ListenableFuture representing scheduled task
1375 Creates a ListenableFutureTask for the given Callable. @param callable asynchronous operation to be executed
1376 Submits a task to the given executor and returns a ListenableFuture. @param callable asynchronous operation to be executed @param executor thread pool responsible for execution
1377 Creates a task with a given Runnable and its associated result. @param runnable asynchronous operation to be executed @param value value associated with the task's completion
1378 Submits a Runnable to an Executor for asynchronous execution. @param runnable asynchronous operation to be executed @param executor thread pool to execute the task in @return ListenableFuture representing the asynchronous task's completion
1379 Tries to acquire a semaphore uninterruptibly for the specified duration. @param semaphore the semaphore to acquire @param timeout time interval
1380 Returns the first element of this iterable, if any. @return Optional containing the element or null
1381 Returns the last element of this iterable collection. @return Optional<@NonNull E> containing the last element or null if empty
1382 Attempts to find the first element matching a predicate in an iterator. @param iterator input iterator @param predicate condition to match elements against @return first matching element, or empty Optional if not found
1383 Sets the expected node count for graph construction. @param expectedNodeCount non-negative integer value
1384 Configures the expected node count for the network. @param expectedNodeCount non-negative integer
1385 Sets the expected edge count for the network. @param expectedEdgeCount non-negative integer value
1386 Specifies the expected node count for the value graph. @param expectedNodeCount non-negative integer
1387 Checks if an iterable contains at least one element matching a given predicate. @param iterable Iterable to search @param predicate Predicate function to evaluate elements against @return true if any element matches the predicate, false otherwise
1388 Creates a predicate that checks for a specific pattern within CharSequence objects. @param pattern the pattern to be searched
1389 Propagates unchecked Throwable if possible or if it's an instance of the given class. @param throwable nullable exception to propagate @param declaredType expected exception class
1390 Retrieves and caches the flattened class hierarchy of the given concrete class. @param concreteClass class to retrieve hierarchy for
1391 Returns a platform-specific ThreadFactory instance for the current environment. If running on Google App Engine with API classes, uses ThreadManager.currentRequestThreadFactory; otherwise, falls back to defaultThreadFactory().
1392 Checks if this iterable collection contains a specified object. @param target the object to find in the iterable
1393 Filters a filtered multimap based on an additional entry predicate. @param multimap underlying filtered multimap @param entryPredicate condition to apply to entries @return FilteredSetMultimap object or null if not found
1394 Filters keys from a multimap using the provided predicate. @param unfiltered underlying multimap to filter @param keyPredicate predicate to select keys that conform to specific criteria @return FilteredKeyListMultimap object with filtered keys and values
1395 Filters an iterable collection to only include elements of a specific type. @param type target class to check against @return FluentIterable containing filtered elements
1396 Removes all elements from this set based on the provided iterable values. @param collection the iterable source of elements to remove @return true if any elements were removed, false otherwise
1397 Initializes and populates an EnumMultiset instance with the given iterable of enum elements. @param elements Iterable of enum constants to add to the multiset
1398 Creates a linked list instance with the specified iterable. @param elements Iterable of initial elements to add
1399 Creates a new ArrayDeque from the given iterable of elements. @param elements Iterable of elements to initialize the deque with
1400 Creates a concurrent linked queue initialized with the given iterable. @param elements Iterable of elements to initialize the queue with
1401 Creates a linked blocking deque initialized with the given iterable. @param elements Iterable of elements to initialize the deque with
1402 Creates a LinkedBlockingQueue initialized with elements from the given iterable. @param elements Iterable of initial elements
1403 Creates a priority blocking queue from an iterable. @param elements Iterable of elements to populate the queue
1404 Creates a priority queue initialized with the given iterable. @param elements Iterable of elements to populate the queue
1405 Creates an EnumSet from the given iterable of enum elements. @param iterable Iterable of enum elements to include @param elementType Class of enum elements @return EnumSet containing all elements in the iterable
1406 Creates a new concurrent hash set with the given iterable's elements. @param elements Iterable of elements to add
1407 Creates a LinkedHashSet instance from an iterable of elements. @param elements Iterable of elements to add
1408 Creates a new TreeSet instance populated with the given iterable elements. @param elements Iterable of elements to add
1409 Converts iterable to a collection, preserving type. @param iterable input iterable
1410 Creates a new ArrayList instance and populates it with elements from the given iterable. @param elements Iterable of elements to add
1411 Creates a hash set from an iterable of elements. @param elements Iterable of elements to add
1412 Checks if all elements in this iterable match a given predicate. @param predicate predicate function to apply to each element
1413 Returns a list iterator starting at the specified index. @param start position of the iterator
1414 Creates a sorted map view from a sorted set and key-value mapping function. @param set underlying sorted set of keys @param function function to map keys to values
1415 Transform entries in a sorted map using the provided entry transformer. @param fromMap source map to transform @param transformer transformation function for key-value pairs @return transformed map with updated key-value pairs
1416 Transforms the values of a map using a provided transformation function. @param fromMap source map to transform @param function transformation function for values @return transformed map with updated values
1417 Updates the count of a specified element in the multiset. @param element nullable object to look up @param occurrences number of times to add or remove the element @return previous count value
1418 Adds occurrences of an element to the multiset. @param element element to add @param occurrences number of times to add @return old count if updated, or new count if added
1419 Transforms entries in a multimmap using the given transformation function. @param fromMap source multimap to transform @param transformer entry transformation function @return ListMultimap with transformed entries
1420 Transforms values in a multimap using the provided function. @param fromMultimap source multimap to transform @param function value transformation function
1421 Adds all elements from an iterable to the builder. @param elements Iterable of elements to be added
1422 Adds all elements from the given collection to this multiset. @param self this multiset @param elements multiset containing elements to add
1423 Checks if given value lies within this range.
1424 Builds a Collector for transforming input elements into an ImmutableTable. @param rowFunction function to apply to each element, returning the row key @param columnFunction function to apply to each element, returning the column key @param valueFunction function to apply to each element, returning the table cell value @param tableSupplier supplier of the ImmutableTable to collect into
1425 Escapes special characters in a string by converting them to their corresponding Unicode escape sequences. @param s input string @param index starting position in the string
1426 Initializes a StandardNetwork instance from the provided builder and connection maps. @param builder network configuration builder @param nodeConnections map of node connections @param edgeToReferenceNode map of edges to reference nodes
1427 Initializes a StandardValueGraph instance with the provided builder and node connections. @param builder AbstractGraphBuilder instance for graph configuration @param nodeConnections Map of nodes to their connections @param edgeCount total number of edges in the graph
1428 Copies character data from a Readable source to an Appendable destination. @param from Readable source @param to Appendable destination @return total number of characters copied
1429 Decodes a CharSequence into a byte array using checked decoding. @param chars input string sequence
1430 Calculates the smallest power of two greater than or equal to a given BigInteger value. @param x input BigInteger value
1431 Calculates the largest power of two that is less than or equal to the given BigInteger. @param x the input BigInteger
1432 Creates an Invokable instance from a given constructor. @param constructor Constructor object to initialize with
1433 Creates an Invokable instance from the given Java method. @param method Java method to create Invokable with
1434 Completes an AbstractFuture by releasing waiters, interrupting the task if necessary, executing listeners, and handling DelegatingToFuture chains. @param param the AbstractFuture to complete @param callInterruptTask whether to interrupt the task before completing
1435 Adds and updates atomic long value associated with a given key. @param key unique map key @param delta value to increment by
1436 Atomically adds a value to the map associated with the given key. @param key unique map key @param delta value to add
1437 Imports and stores all key-value pairs from given map. @param m map containing keys and long values to import
1438 Initializes an instance of AbstractGraphBuilder with specified graph directionality. @param directed true if the graph is directed, false otherwise
1439 Adds a listener to the queue with an associated executor. @param listener registered listener @param executor execution context
1440 Performs forward conversion from type A to B with automatic null handling. @param a nullable object of type A to be converted
1441 Initializes compact hash map with default size.
1442 Initializes compact hash map with specified expected size. @param expectedSize initial capacity of the compact hash map
1443 Initializes the set with the default capacity using the `init` method.
1444 Initializes the set with an estimated size and triggers internal resizing. @param expectedSize initial capacity estimate
1445 Returns the simplified class name. @return Class name without package or inner class information
1446 Initializes multimap from an empty map. @param map empty map to initialize from
1447 Creates a CustomMultimap from an empty multimap with a custom collection factory. @param map empty multimap to initialize from @param factory supplier for creating new collection instances
1448 Creates an empty HashMultiset instance.
1449 Creates an empty LinkedHashMultiset instance.
1450 Creates an EnumMultiset instance for a specified enum class with given elements. @param elements iterable of initial elements to add @param type target enum class
1451 Calculates the population standard deviation from the dataset. @return Standard deviation value or NaN if invalid
1452 Calculates sample standard deviation using sample variance. @return sample standard deviation or NaN if invalid
1453 Calculates population standard deviation based on variance. @return Standard deviation or NaN if sum of squares is invalid
1454 Calculates the sample standard deviation based on accumulated data. @return Sample standard deviation or NaN if invalid
1455 Creates a matcher that negates the matches of any characters in the given sequence. @param sequence input character sequence
1456 Creates a case conversion converter to specified target format. @param targetFormat desired output case format
1457 Composes this converter with a given forward converter to create a bidirectional conversion. @param secondConverter forward converter from type B to C
1458 Returns the reverse converter instance. @return Converter instance for reversing data or null if not initialized
1459 Creates a string converter for the specified enum class. @param enumClass Enum class to convert between string and constants
1460 Creates a converter from a given BiMap. @param bimap bidirectional map for data conversion
1461 Compares this ForwardingList instance with the given object. @param object nullable object to validate (may be a List)
1462 Creates a new instance of the ConcurrentHashMultiset with given elements. @param elements iterable of initial elements to add @return populated ConcurrentHashMultiset instance
1463 Joins array elements to an Appendable with customizable separator. @param appendable target Appendable @param parts array of elements to join @return the modified Appendable or throws IOException if occurs
1464 Appends iterable elements to a StringBuilder with customizable separator. @param builder target StringBuilder @param parts iterable of elements to append
1465 Joins iterable elements into a single string with customizable separator. @param parts iterator of elements to join @return the joined string or throws IOException if occurs
1466 Joins map entries into a string representation. @param map input map to be joined
1467 Generates a string representation of the cache specification. @return Parsable string containing the object's properties and values
1468 Generates a string representation of the MapMaker instance by including its configurable parameters. @return A formatted string containing the object's properties and values
1469 Generates a string representation of the CacheBuilder object by iterating over its name-value pairs. @return A formatted string containing the object's properties and values
1470 Initializes the MapMakerInternalMap instance with given parameters. @param builder MapMaker configuration object @param entryHelper InternalEntryHelper to manage key-value pairs
1471 Converts a Java Util Optional to an Optional instance. @param javaUtilOptional the Optional instance to convert, or null if absent @return Optional<T> or null if input is null
1472 Constructs a HostAndPort instance from host and port values. @param host network host address @param port associated port number
1473 Constructs a HostAndPort instance from the given host string, without considering any associated port. @param host input host string
1474 Retrieves an element from the given iterable at a specified non-negative index. @param iterable iterable to access @param position index of desired element
1475 Creates a deep copy of this BloomFilter instance. @return A new BloomFilter object with identical configuration
1476 Acquires permits at a controlled rate, waiting for specified time if not available. @param permits number of permits to acquire @return wait time in seconds until permits are available
1477 Tries to acquire a single permit within the specified time window. @param timeout maximum allowed wait time in nanoseconds @return true if permit can be acquired, false otherwise
1478 Tries to acquire one permit within the given time window. @param timeout maximum allowed wait time in the specified unit @param unit unit of time for the timeout value (e.g. TimeUnit.SECONDS) @return true if a single permit can be acquired, false otherwise
1479 Tries to acquire a specified number of permits with a default time window. @param permits number of permits to validate
1480 Tries to acquire a single permit within a time window.
1481 Tries to acquire a specified number of permits within a given time window. @param permits number of permits to validate @param timeout maximum allowed wait time in nanoseconds @return true if permits can be acquired, false otherwise
1482 Attempts to acquire a lock with specified time constraints. @param time duration of lock request @param unit TimeUnit object specifying the unit of time @return true if lock acquired, false otherwise
1483 Initializes AbstractService with default state.
1484 Verifies the queue's integrity by checking each level. @return true if all levels are intact, false otherwise
1485 Configures and returns a CacheBuilder instance with specified settings. @param initialCapacity non-negative integer value for cache capacity @param maximumSize non-negative integer size limit @param maximumWeight non-negative value for cache weight @param concurrencyLevel positive integer value for concurrency level @param keyStrength cache key strength (Weak) @param valueStrength cache value strength (Soft or Weak) @param recordStats flag to record cache statistics @param writeExpirationDuration non-negative time duration for write expiration @param accessExpirationDuration positive time span for access expiration @param refreshDuration positive time duration for refresh after write @return CacheBuilder instance with updated configuration
1486 Tries to create a map with weak keys using the provided MapMaker. @param mapMaker instance of MapMaker
1487 Verifies if the current service state matches the specified expected state. @param expected desired service state (STARTING, STOPPING, or RUNNING)
1488 Retrieves value at specified row and column indices. @param rowIndex index of row @param columnIndex index of column @return V object or null if not found
1489 Sets a value at the specified row and column indices. @param rowIndex index of the row @param columnIndex index of the column @param value new value to set (may be null) @return old value or null if not previously set
1490 Retrieves an element at the specified index from this immutable double array. @param index index to retrieve (validated against collection size)
1491 Retrieves an integer element at the specified index from the immutable array. @param index index of the desired element
1492 Retrieves an element from this immutable array by its index. @param index index of the desired element
1493 Searches for the first matching character in a sequence starting from a specified position. @param sequence CharSequence to search @param start index where searching begins (must be valid)
1494 Initializes iterator with collection size and position. @param size target collection size @param position current index within the collection
1495 Creates a ByteArrayDataInput instance from a byte array slice. @param bytes source byte array @param start starting index of the slice
1496 Verifies a UTF-8 encoded byte sequence is well-formed. @param bytes the byte array to check @param off starting index in the bytes array @param len length of the byte sequence to verify
1497 Converts an object array to a specified type array. @param src source object array @param offset starting index @param len length of the new array @param dst destination array (will be resized if necessary) @return the converted array or null if src is null
1498 Creates a copy of the specified object array segment. @param elements original object array @param offset starting index @param length number of elements to copy
1499 Writes bytes from this hash code to the given destination array. @param dest byte array to store the hash code @param offset starting index in the destination array @param maxLength maximum number of bytes to write @return actual number of bytes written
1500 Encodes a byte array into a string representation using the current encoding scheme. @param bytes input byte array @param off starting index within the array @param len length of the encoded substring
1501 Reads bytes from an InputStream into a byte array. @param in input stream @param b target byte array @param off starting index in the byte array @param len number of bytes to read, or -1 for all remaining bytes @return actual number of bytes read
1502 Reverses a specified segment of the input boolean array. @param array the input boolean array @param fromIndex starting index of the segment to reverse @param toIndex ending index of the segment to reverse
1503 Reverses a portion of the byte array within the specified range. @param array the byte array to manipulate @param fromIndex starting index of the section to reverse (inclusive) @param toIndex ending index of the section to reverse (exclusive)
1504 Reverses a character array within the specified range. @param array input character array @param fromIndex starting index of the range (inclusive) @param toIndex ending index of the range (exclusive)
1505 Reverses a portion of the specified array. @param array input array @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1506 Reverses a subarray within the given array. @param array array to reverse @param fromIndex starting index of the subarray @param toIndex ending index of the subarray (exclusive)
1507 Returns a subarray of this immutable double array from the specified start index to end index. @param startIndex starting index of the subarray (inclusive) @param endIndex ending index of the subarray (inclusive)
1508 Returns a subarray of integers within the specified range. @param startIndex starting index (inclusive) @param endIndex ending index (exclusive)
1509 Returns a subarray from the current immutable array starting at {@code startIndex} up to (but not including) {@code endIndex}. @param startIndex starting index of the subarray (inclusive) @param endIndex ending index of the subarray (exclusive)
1510 Reverses a portion of the given integer array in-place. @param array the input array to modify @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1511 Reverses a portion of the given array. @param array the array to reverse @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1512 Reverses a portion of the given short array. @param array input array @param fromIndex starting index for reversal (inclusive) @param toIndex ending index for reversal (exclusive)
1513 Sorts a subarray of unsigned bytes in ascending order. @param array the byte array to sort @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1514 Sorts the specified byte array in descending order within the given range. @param array the byte array to sort @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1515 Sorts a subarray of unsigned integers in ascending order. @param array the input array @param fromIndex starting index of the subarray @param toIndex ending index of the subarray
1516 Sorts an unsigned integer subarray in descending order. @param array the input array @param fromIndex start index of the subarray @param toIndex end index of the subarray
1517 Sorts a subset of the unsigned long array in ascending order. @param array input array @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1518 Sorts the specified range of an unsigned long array in descending order. @param array array to sort @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1519 Filters elements from the unfiltered collection based on the provided predicate. @param unfiltered original collection of elements @param predicate criteria to filter elements by
1520 Creates a Splitter for splitting based on a single character separator. @param separator the character to split on
1521 Initializes an instance with default values.
1522 Initializes a Finalizer instance with specified finalizable reference class, queue, and phantom reference. @param finalizableReferenceClass Class of the finalizable reference @param queue Queue for processing and cleanup of references @param frqReference Phantom reference that started this finalizer
1523 Initializes an empty Builder instance.
1524 Creates an empty ImmutableMultimap Builder instance.
1525 Initializes an empty Builder instance.
1526 Initializes an empty ForwardingSortedMultiset instance.
1527 Initializes an empty ForwardingDeque instance.
1528 Initializes an empty ForwardingBlockingQueue instance.
1529 Initializes an empty ForwardingSortedSet instance with default behavior.
1530 Initializes an empty ForwardingNavigableMap instance.
1531 Creates an unmodifiable BiMap instance from a given bidirectional map. @param bimap the underlying BiMap to be made unmodifiable
1532 Creates a new instance of MutableClassToInstanceMap with an empty class-instance map.
1533 Creates a MutableClassToInstanceMap instance from a given class-instance map. @param backingMap nullable map of classes to their instances
1534 Creates an empty immutable type-safe mapping instance.
1535 Initializes an empty ForwardingSortedSetMultimap instance.
1536 Creates an unmodifiable view of a given multimap. @param delegate original Multimap instance @return UnmodifiableMultimap wrapper, or the original if already unmodifiable
1537 Returns an immutable view of the given table. @param table underlying table data structure
1538 Adapts a standard Future into a ListenableFuture in the given thread pool executor. @param future standard Java Future instance @param executor Executor for listener callbacks @return ListenableFuture object or existing one if already adapted
1539 Retrieves cached value by key if present. @param key unique cache key @return cached value or null if not found
1540 Retrieves cached value or loads new one using provided callable. @param key unique cache key @param valueLoader callback to load value if not in cache
1541 Retrieves all cached values for the given non-null key set. @param keys iterable of non-null key objects @return immutable map of cached values or empty map if none found
1542 Stores a cached entry with the given key and value. @param key unique cache identifier @param value cached data to store
1543 Adds all entries from the provided map to this cache. @param m map of key-value pairs to store
1544 Invalidates all cache entries with specified keys. @param keys collection of cache key(s) to invalidate
1545 Creates a new cache entry with the given key and reference information. @param segment associated cache segment @param key associated key @param hash key hash value @param next optional next entry in linked structure (optional)
1546 Creates a new cache entry with the given key and reference information. @param segment associated segment @param key associated key @param hash key hash value @param next optional next entry in linked structure (optional)
1547 Creates a new cache entry with the given key and reference information. @param segment caching segment @param key associated key @param hash key hash value @param next optional next entry in linked structure
1548 Creates a new reference entry within the specified cache segment. @param segment local cache segment @param key unique identifier for the entry @param hash entry hash value @param next optional next entry in access or write queues (may be null)
1549 Creates a new cache entry with the specified parameters. @param segment Segment instance @param key unique cache key @param hash entry hash value @param next next entry in access or write queues (may be null)
1550 Creates a new reference entry within the specified cache segment. @param segment cache segment where the entry will be created @param key associated key for this entry @param hash entry hash value @param next next entry in access or write queues (may be null)
1551 Sets the value for a given cache entry with specified key and timestamp. @param entry cached entry to update @param key unique identifier @param value new value to set @param now current timestamp
1552 Returns the size of the underlying iterable delegate. @return The number of elements in the iterable collection
1553 Calculates total edge count by summing node degrees and dividing by 2. @return estimated edge count
1554 Converts InputStream to byte array. @param in input stream @return byte array containing the input data or throws IOException if an error occurs.
1555 Fetches specified number of bytes from InputStream. @param in input stream @param expectedSize total length of the combined buffer @return byte array containing the input data or throws exception if too large
1556 Initializes an instance of AbstractBiMap with provided forward and inverse mappings. @param forward The forward map @param backward The inverse map
1557 Removes all values associated with the specified key. @param key unique identifier to remove
1558 Replaces values associated with a given key, adding new values and removing old ones. @param key unique identifier to update @return updated collection of values or null if removed
1559 Removes all values associated with the specified key. @param key unique identifier to remove
1560 Retrieves a sorted set view for the specified key. @param key unique identifier
1561 Returns string representation of this collection. @return string representation of the underlying collection
1562 Converts this map to a human-readable string representation.
1563 Creates a new HashMap instance with the specified expected size. @param expectedSize anticipated number of entries
1564 Checks whether a directed or undirected graph contains a cycle. @param graph the input graph to analyze
1565 Creates a HashBasedTable with expected rows and cells per row. @param expectedRows number of table rows @param expectedCellsPerRow anticipated cell count per row
1566 Creates a linked hash map with the specified expected size. @param expectedSize anticipated number of entries
1567 Creates a map with the specified expected size based on the current element order type. @param expectedSize anticipated number of entries
1568 Creates a HashSet with specified initial capacity based on expected size. @param expectedSize anticipated number of entries
1569 Creates a linked hash set with specified expected size. @param expectedSize anticipated number of entries
1570 Initializes ServiceManagerState with a collection of services and sets their initial state to NEW. @param services collection of services to be managed
1571 Returns the first entry in the sorted multiset. @return First Entry object or null if empty
1572 Returns the last entry in descending order. @return Last Entry object or null if empty
1573 Retrieves the first entry from the sorted multiset, removing it upon retrieval. @return First Entry object or null if empty
1574 Retrieves and removes the last entry in descending order. @return Entry object or null if empty
1575 Returns a set of entries in this multiset. @return Set of Multiset.Entry objects
1576 Returns a set of entries in this multiset. @return Set of Multiset.Entry objects
1577 Creates a new TreeRangeSet instance and adds all ranges from the given RangeSet. @param rangeSet input RangeSet to merge into the newly created set
1578 Creates a TreeRangeSet instance and adds an iterable of ranges. @param ranges collection of ranges to add
1579 Returns this multimap's backing sorted map.
1580 Retrieves the set of cells within this table. @return Set of Cell objects or creates a new one if not initialized
1581 Delegates table value retrieval to superclass implementation. @return collection of table values
1582 Creates a reversed ordering instance from the current range. @return GeneralRange object with inverted bounds
1583 Creates a cell with specified row key, column key, and value. @param rowKey unique row identifier @param columnKey unique column identifier @param value stored cell value
1584 Returns an immutable set of unique elements in this multiset.
1585 Adds a new immutable map entry with the given key and value. @param key unique key identifier @param value associated value
1586 Creates an immutable map with two key-value pairs. @param k1 first unique key @param v1 associated value for k1 @param k2 second unique key @param v2 associated value for k2
1587 Creates an immutable map with three key-value pairs. @param k1 unique identifier for the first key @param v1 associated value for the first key @param k2 unique identifier for the second key @param v2 associated value for the second key @param k3 unique identifier for the third key @param v3 associated value for the third key
1588 Creates an immutable map with four key-value pairs. @param k1 unique key identifier @param v1 associated value @param k2 unique key identifier @param v2 associated value @param k3 unique key identifier @param v3 associated value @param k4 unique key identifier @param v4 associated value
1589 Creates an immutable map from five key-value pairs. @param k1 unique key identifier @param v1 associated value @param k2 unique key identifier @param v2 associated value @param k3 unique key identifier @param v3 associated value @param k4 unique key identifier @param v4 associated value @param k5 unique key identifier @param v5 associated value
1590 Creates an immutable map with six entries from the provided key-value pairs. @param k1 unique key identifier @param v1 associated value @param k2 unique key identifier @param v2 associated value @param k3 unique key identifier @param v3 associated value @param k4 unique key identifier @param v4 associated value @param k5 unique key identifier @param v5 associated value @param k6 unique key identifier @param v6 associated value
1591 Creates an immutable map from a set of key-value pairs. @param k1 unique key identifier 1 @param v1 associated value 1 @param k2 unique key identifier 2 @param v2 associated value 2 @param k3 unique key identifier 3 @param v3 associated value 3 @param k4 unique key identifier 4 @param v4 associated value 4 @param k5 unique key identifier 5 @param v5 associated value 5 @param k6 unique key identifier 6 @param v6 associated value 6 @param k7 unique key identifier 7 @param v7 associated value 7
1592 Creates an immutable map with up to 8 key-value pairs. @param k1,k2,k3,k4,k5,k6,k7,k8 unique keys @param v1,v2,v3,v4,v5,v6,v7,v8 associated values
1593 Creates an ImmutableMap from a fixed set of key-value pairs. @param k1,k2,k3,k4,k5,k6,k7,k8,k9 unique keys @param v1,v2,v3,v4,v5,v6,v7,v8,v9 associated values
1594 Creates an ImmutableMap with up to 10 key-value pairs. @param k1,k2,k3,k4,k5,k6,k7,k8,k9,k10 unique keys @param v1,v2,v3,v4,v5,v6,v7,v8,v9,v10 associated values
1595 Creates an immutable map entry from the given Entry. @param entry existing entry to reuse
1596 Adds a key-value pair to the multimap. @param entry a pre-existing Entry object
1597 Adds all provided key-value pairs to the multimap. @param entries iterable collection of Entries to add
1598 Adds an Entry to the multimap using its key and value. @param entry a pre-existing Entry object
1599 Filters a sorted set based on the provided predicate. @param unfiltered original sorted set of elements @param predicate criteria to filter elements by @return filtered sorted set or null if input is invalid
1600 Trims the compact hash map to its optimal size based on current entries and load factor.
1601 Trims the compact hash set to its optimal size based on the number of elements. If the internal arrays already meet the requirements, no resizing is performed. Otherwise, it creates a new hash flooding resistant delegate set with the correct table size, updates the existing entries accordingly, and assigns the new delegate set as the backing array.
1602 Checks if the range is empty (i.e., lower and upper bounds are equal).
1603 Compares this range with another for equality. @param object the other range to compare @return true if this range is equal to the given one, false otherwise
1604 Adds an element at the end of the underlying list. @param element element to be added
1605 Returns a basic iterator instance via delegation to the underlying list implementation.
1606 Returns a list iterator for this list at index 0. @return ListIterator object at position 0
1607 Retrieves the first AVL node that meets the range criteria. @return The first matching AvlNode or null if not found
1608 Creates a new instance of the HashBasedTable from an existing Table. @param table source table to populate the new HashBasedTable with
1609 Creates a new TreeBasedTable with natural ordering for rows and columns.
1610 Creates a TreeBasedTable with specified row and column comparators. @param rowComparator comparator for sorting rows @param columnComparator comparator for sorting columns
1611 Creates a new HashBiMap instance with the specified expected size. @param expectedSize estimated number of hash table entries
1612 Creates an instance of the Builder class for constructing immutable bi-maps.
1613 Initializes an instance of the immutable map builder.
1614 Returns a builder with entries ordered naturally.
1615 Initializes builder with a specified comparator for sorting map entries. @param comparator Comparator instance to order map entries
1616 Creates a builder with reversed ordering.
1617 Creates an immutable map with a single key-value pair. @param k1 unique key @param v1 associated value
1618 Returns the inverse mapping of the stored key-value pairs.
1619 Returns an instance of the Builder class.
1620 Initializes the Builder with a specified comparator for ordering elements. @param comparator the Comparator to apply when sorting elements
1621 Returns a builder initialized with a comparator in descending order.
1622 Returns a builder with a natural ordering for comparable elements.
1623 Returns an immutable list with elements in reversed order. @return a new ImmutableList instance or the original if size is 1 or less
1624 Extracts immutable list of characters from input string. @param string input string to process
1625 Creates an immutable list with a single element. @param e1 nullable object to validate and store
1626 Retrieves a set of key-value pairs as immutable entries.
1627 Creates an immutable set with a single element. @param e1 non-null element to be included in the set
1628 Retrieves the character set associated with this media type. @return Optional<Charset> instance containing the charset or empty if absent
1629 Stops all managed services asynchronously.
1630 Checks if all managed services are running.
1631 Creates a set builder with an initial capacity based on the specified size. @param expectedSize target number of elements in the set
1632 Adds all entries from a given Multimap. @param multimap source multimap to copy entries from @return Builder instance for method chaining
1633 Throws a custom file system exception if deletion fails, wrapping the original IOExceptions. @param path the input file system path @param exceptions collection of IOExceptions to include in the exception
1634 Concatenates multiple iterators into a single iterator. @param inputs variable-length array of iterators to be concatenated
1635 Retrieves the first matching entry in the map for a given object. @param key object to search for @return E object associated with the given key or null if not found
1636 Triggers non-locked cleanup of the segment based on read operations. @param none
1637 Checks if the map contains a given key. @param key the object to search for @return true if the key is present, false otherwise
1638 Returns a view of the map's portion of key-value pairs between the specified fromKey and toKey. @param fromKey lower bound of keys in the returned submap @param toKey upper bound of keys in the returned submap
1639 Computes map differences between two maps, considering equivalence relation. @param left first map to compare @param right second map to compare against @param valueEquivalence equivalence relation for values
1640 Computes map differences between two maps, considering equivalence relation. @param left first map to compare @param right second map to compare against @return SortedMapDifference object with differing values or types
1641 Initializes the EventBus instance with the given identifier and executor. @param identifier unique identifier for the event bus @param executor thread pool executor to manage event handling tasks
1642 Initializes the EventBus instance with a default identifier and the given executor, dispatcher, and exception handler. @param executor thread pool executor to manage event handling tasks @param subscriberExceptionHandler handler for exceptions that may occur during event processing
1643 Initializes the EventBus instance with the given thread pool executor. @param executor thread pool executor to manage event handling tasks
1644 Initializes the EventBus instance with the given identifier and default executor. @param identifier unique identifier for the event bus
1645 Initializes the EventBus instance with a default identifier and per-thread queued dispatching. @param exceptionHandler handler for exceptions that may occur during event processing
1646 Finds minimum child node index. @param index current node index
1647 Finds the minimum grandchild of a given heap node. @param index current node index @return index of the minimum grandchild or -1 if not found
1648 Returns the last element in the queue (minimum value). @return Element object or null if empty
1649 Bubbles up an element at the specified index in the heap, ensuring heap properties are maintained. @param index position of the element within the heap @param x element to be inserted or updated
1650 Checks if the multiset contains a specified element. @param object object to search for
1651 Adds an occurrence of an element to this multiset. @param element the element to add
1652 Removes specified elements from the multiset. @param element object to be removed
1653 Clears all elements from the underlying multiset.
1654 Counts occurrences of a given element in the multiset. @param object target element to search for @return count of occurrences or 0 if not found
1655 Computes the hash code based on underlying multiset entries. @return Hash code value
1656 Returns a string representation of this multiset using its entries.
1657 Converts this collection to an array of specified type. @param array target array; may be resized or filled
1658 Returns the last element from the set's view in descending order. @return the last element or null if empty
1659 Returns a view of the navigable set as a sorted subset within a specified range. @param fromElement starting element (inclusive) @param toElement ending element (exclusive)
1660 Returns the lower bound of this set. @param e element to find lower bound for
1661 Retrieves the floor element from the set, i.e., the largest element less than or equal to the specified value. @param e the value to find the floor for @return the floor element or null if not found
1662 Returns a view of elements up to but not including the specified element. @param toElement element to set as upper bound
1663 Returns the least element greater than or equal to the specified value. @param e target value
1664 Retrieves the next element greater than or equal to the specified value. @param e lower bound element @return next higher element or null if not found
1665 Creates a subset view of elements within the specified range. @param fromElement lower bound element @param fromInclusive whether to include the fromElement in the result @param toElement upper bound element @param toInclusive whether to include the toElement in the result
1666 Returns a view of elements greater than or equal to the specified fromElement. @param fromElement lower bound element
1667 Returns a sorted set of unique row keys.
1668 Returns a sorted map of rows to their respective column maps. @return Sorted map of rows (R) to maps of columns (C) to values (V)
1669 Returns a synchronized deque from the given underlying deque. @param deque the deque to synchronize
1670 Initializes ArrayBasedCharEscaper with a mapping and character range. @param replacementMap map of characters to their escaped representations @param safeMin minimum safe character value @param safeMax maximum safe character value
1671 Converts character escape mappings to an Escaper instance. @return Escaper object wrapping character mapping table
1672 Creates a new instance of ArrayBasedUnicodeEscaper from a replacement map and safety settings. @param replacementMap Map of characters to their replacements @param safeMin minimum safe code point value @param safeMax maximum safe code point value @param unsafeReplacement replacement string for unsafe characters (optional)
1673 Creates a hash code instance from the given byte array. @param bytes nullable byte array to validate and store
1674 Creates a HashCode instance from the given hexadecimal string. @param string input hexadecimal string
1675 Combines multiple hash codes into a single hash code. @param hashCodes iterable of hash codes to combine @return combined hash code or null if input is invalid
1676 Combines multiple unordered hash codes into a single instance. @param hashCodes iterable collection of hash code instances @return combined HashCode object or null if invalid input
1677 Creates HMAC-MD5 hash function with the specified key. @param key secret key for hashing operations
1678 Generates HMAC-SHA1 hash function with the provided secret key. @param key byte array representing the secret key for hashing
1679 Generates an HMAC SHA-256 hash function instance using a provided byte array as the secret key. @param key byte array containing the secret key for hashing operations
1680 Creates an HMAC SHA-512 hash function instance with the specified secret key. @param key byte array representing the secret key
1681 Wraps a byte array into a ByteSource instance. @param b input byte array
1682 Wraps a character sequence into a CharSource object. @param charSequence input character data (string or char sequence)
1683 Writes multiple lines to the output stream using the system's default line separator. @param lines iterator over CharSequence objects
1684 Writes multiple lines to the output stream using the default line separator. @param lines iterator over CharSequence objects
1685 Reads a BloomFilter instance from an InputStream. @param in input stream to read from @param funnel Funnel instance for deserializing elements @return populated BloomFilter instance or throws IOException if failed
1686 Calculates the mean of a stream of numbers from an iterable. @param values iterator over Number objects @return calculated mean value or NaN if invalid input
1687 Computes the base-2 logarithm of a double value with specified rounding mode. @param x input double value @param mode RoundingMode to apply when result is not an integer power of two @return int logarithmic result, or modified result if rounding applied
1688 Detects hash flooding by checking for consecutive null elements in the hash table. @param hashTable array of objects representing the current hash table
1689 Offers an element to the TopKSelector and updates the threshold accordingly. @param elem the offered element
1690 Creates a case-insensitive alphabet by duplicating upper and lower case mappings. @return A new Alphabet object with the updated character set
1691 Creates a TopKSelector for the least K elements. @param k number of least elements to select (must be >= 0 and <= Integer.MAX_VALUE / 2) @param comparator object for sorting elements
1692 Creates a TopKSelector for the greatest K elements based on the provided comparator. @param k number of top elements to select (must be >= 0 and <= Integer.MAX_VALUE / 2) @param comparator object for sorting elements
1693 Constructs a linear transformation from two points. @param x2 second point's x-coordinate @param y2 second point's y-coordinate @return LinearTransformation object representing the line through the two points
1694 Calculates the least squares fit linear transformation for paired statistics. @return The calculated linear transformation
1695 Returns the least squares fit linear transformation based on accumulated data. @return LinearTransformation object representing the best-fit line
1696 Checks whether a number is prime using various optimized algorithms. @param n the number to test for primality @return true if n is prime, false otherwise
1697 Calculates the base-10 logarithm of a BigInteger value. @param x input BigInteger @param mode rounding mode to apply (e.g. UNNECESSARY, FLOOR, CEILING) @return log10(x) as an int, or throws an assertion error if invalid
1698 Computes the binomial coefficient (n choose k). @param n input value @param k input value
1699 Computes the arithmetic mean of a dataset. @param values iterable over numerical data points
1700 Adds a paired data point to the accumulator and updates statistics. @param x first data point value @param y second data point value
1701 Accumulates multiple data points from an iterable. @param values collection of numerical values to be added
1702 Accumulates multiple data points from an iterator. @param values iterator over numerical values to be added
1703 Accumulates statistical metrics from the provided Stats object. @param values input data to accumulate
1704 Accumulates statistical metrics from another dataset. @param values StatsAccumulator instance containing data points to add
1705 Selects the kth smallest element in the given numerical array within the specified range. @param required index of the desired element (0-based) @param array input numerical array @param from start index of the search range (inclusive, 0-based) @param to end index of the search range (inclusive, 0-based)
1706 Adds all elements from the given DoubleStream to this Builder. @param stream input double stream
1707 Adds all double values from the specified iterable, ensuring sufficient capacity. @param values collection of double values to add
1708 Adds all integers from the given IntStream. @param stream stream of integers to be added
1709 Adds all integers from an iterable collection to the builder's internal array. @param values collection of integers to be added
1710 Adds all long values from a given LongStream to the builder. @param stream input stream of long values
1711 Reads the object's state from an ObjectInputStream and initializes the AtomicDoubleArray with values read from the stream.
1712 Adds all long values from the specified iterable, ensuring sufficient internal storage capacity. @param values Collection of long integers to be added
1713 Tries to parse a string representation of an integer value in base 10. @param string string representation of the integer value @return parsed Integer value or null if invalid input
1714 Constructs an UnsignedInteger from a string representation in base 10. @param string input string to parse
1715 Divides this unsigned long value by another and returns the result. @param val divisor
1716 Converts an unsigned long value to a string representation in the specified radix. @param x unsigned long value @param radix base of the number system (must be between Character.MIN_RADIX and Character.MAX_RADIX)
1717 Computes product of 'a' and 'b' under modulus 'm'. @param a first multiplicand @param b second multiplicand @param m modulus value
1718 Computes the square of 'a' under modulus 'm'. @param a value to be squared @param m modulus value
1719 Computes the remainder of unsigned long division. @param val dividend value @return remainder value
1720 Parses an unsigned long integer from a string representation. @param string string to parse
1721 Compares this ForwardingMapEntry with another Entry for equality. @param object the other entry to compare
1722 Computes the hash code by combining the hash codes of the key and value. @return standard hash code
1723 Returns a string representation of this map entry in key-value format. @return Key-value pair as a concatenated string
1724 Checks if this type token represents an array. @return true if it's an array, false otherwise
1725 Creates a listening executor service decorator around the given executor. @param delegate underlying executor service
1726 Creates a decorated ScheduledExecutorService instance, either using the given delegate if it's already a ListeningScheduledExecutorService or wrapping it with a ScheduledListeningDecorator. @param delegate underlying executor service
1727 Invokes any of the supplied tasks, returning at most one result. @param executorService executor service instance @param tasks collection of callable tasks to be executed @param timed whether to wait for a specific time or indefinitely @param timeout maximum time to wait in specified unit @param unit time unit for timeout @return result of the first task that completes, or null if all fail @throws InterruptedException if interrupted while waiting @throws ExecutionException if an exception occurs during execution @throws TimeoutException if timed operation exceeds specified timeout
1728 Executes the given async combiner using the specified executor. @param combiner asynchronous task to be executed @param executor thread pool for executing the combiner @return ListenableFuture representing the result of the execution
1729 Executes a combiner function on aggregated futures. @param combiner callable task to combine futures' results @param executor thread pool for execution @return ListenableFuture containing combined result or null if all must succeed and any fails
1730 Verifies the acquisition order of a lock against a given policy. @param policy Lock acquisition policy @param acquiredLock The lock that has been acquired by this thread
1731 Reloads cached value associated with the given key. @param key unique cache identifier @param oldValue previous value (for comparison) @return ListenableFuture containing the updated value or null if not found
1732 Returns a future representing the task's status. @return ListenableFuture containing status information
1733 Submits an asynchronous task for execution with specified executor. @param callable asynchronous operation to be executed @param executor executor to use for task execution @return non-cancellation propagating future of the task result
1734 Retrieves a future value while handling exceptions with the specified class. @param validator GetCheckedTypeValidator instance for validation @param future Future object containing the result @param exceptionClass Class of the exception to instantiate on failure @return Retrieved value or throws an exception if retrieval fails @throws X instantiated exception object
1735 Retrieves a future value while throwing checked exceptions for any failures. @param future the Future object to get from @param exceptionClass Class of the exception to instantiate on failure @param timeout maximum time in specified unit to wait for result @param unit time unit of timeout value @throws X instantiated exception object if operation fails
1736 Releases the monitor, signaling next waiting thread if still holding the lock.
1737 Awaits for a specified condition to be satisfied, with optional signal before waiting. @param guard condition being waited for @param nanos timeout in nanoseconds, or -1 for no timeout @param signalBeforeWaiting whether to signal next waiter before waiting @return true if condition is satisfied, false on timeout
1738 Creates a TimeoutFuture with a specified timeout period and delegates asynchronous task execution. @param delegate the underlying future to be managed @param time the duration of the timeout in the given unit @param unit the unit of measurement for the timeout period @param scheduledExecutor the executor service used for scheduling tasks
1739 Schedules async operation with specified delay. @param callable asynchronous operation to be executed @param delay time before execution in the given unit (converted from Duration) @param executorService scheduling service @return ListenableFuture representing scheduled task
1740 Retrieves enum constant by value from the provided class. @param enumClass Class of enums to retrieve constants for @param value the value to search for
1741 Attempts to find the first element matching a predicate in an iterable. @param iterable input iterable @param predicate condition to match elements against @return first matching element, or empty Optional if not found
1742 Checks if iterable contains at least one element matching the given predicate. @param predicate Predicate function to evaluate elements against
1743 Creates a precomputed CharMatcher based on the total characters and table. @param totalCharacters total number of characters @param table BitSet containing character values @param description nullable string describing the matcher @return precomputed CharMatcher object or null if not found
1744 Propagates unchecked Throwable if possible or if it's an instance of the given classes. @param throwable nullable exception to propagate @param declaredType1 expected first exception class @param declaredType2 expected second exception class
1745 Rethrows the given Throwable as an IOException if possible. @param e nullable exception to rethrow
1746 Rethrows the given Throwable as a RuntimeException if it's an instance of the specified exception class. @param e nullable exception to rethrow @param declaredType expected exception class
1747 Closes Closeable resources in LIFO order, handling exceptions and suppressing or rethrowing as necessary. @throws IOException if an exception is thrown during closing
1748 Creates a new Thread instance with the specified name and Runnable task. @param name thread name @param runnable task to execute
1749 Filters a multimap by keys based on a predicate. @param unfiltered underlying multimap to filter @param keyPredicate condition to apply to keys @return FilteredSetMultimap object or null if not found
1750 Filters a multimap based on an additional entry predicate. @param unfiltered underlying multimap @param entryPredicate condition to apply to entries @return FilteredSetMultimap object or null if not found
1751 Retrieves a declared annotation of the specified type. @param annotationType annotation class to search for @return Annotation object or null if not found
1752 Merges multiple sorted iterators into a single unmodifiable iterator. @param iterators iterable of input iterators to merge @param comparator comparator for sorting merged output @return UnmodifiableIterator containing the merged result
1753 Converts iterable to an array. @param iterable input iterable
1754 Replaces the existing values associated with a given key with new ones. @param key unique identifier for the multimap entry @param values new values to be assigned @return the old values that were replaced (or an empty list if none existed)
1755 Removes all values associated with the given key. @param key unique identifier for the multimap entry
1756 Creates a new CopyOnWriteArrayList instance and populates it with elements from the given iterable. @param elements Iterable of elements to add
1757 Creates a CopyOnWriteArraySet instance and populates it with elements from the given iterable. @param elements Iterable of elements to add
1758 Performs binary search on a sorted list to find an element. @param list the input list @param key the target key @param comparator comparison function for keys @param presentBehavior behavior if key is found (e.g. index calculation) @param absentBehavior behavior if key is not found (e.g. default index value)
1759 Retrieves a list of striped locks corresponding to the given keys. @param keys Iterable of object keys @return Iterable of L objects or empty immutable list if keys are empty
1760 Returns a string representation of the network, including its properties and structure. @return A formatted string containing isDirected, allowsParallelEdges, allowsSelfLoops, node count, and edge map.
1761 Returns a string representation of the graph, including its directed status, self-loop allowance, node count, and edge values.
1762 Transforms entries in a navigable map using the provided transformation function. @param fromMap source map to transform @param transformer key-value pair transformation function
1763 Transforms the values in a sorted map using the provided function. @param fromMap source map to transform @param function transformation function for each value @return transformed map with updated key-value pairs
1764 Updates the count of a specified element in the multiset. @param element nullable object to look up @param occurrences number of times to add or remove the element @return previous count value
1765 Updates the count of a specified element in the multiset. @param element nullable object to look up @param occurrences number of times to add or remove the element @return previous count value
1766 Transforms values in a multimap using the given transformation function. @param fromMultimap source multimap to transform @param function entry transformation function @return ListMultimap with transformed values
1767 Adds all unique elements from the given collection to this multiset. @param elementsToAdd multiset containing elements to add
1768 Adds all elements from the given collection to this multiset. @param elementsToAdd multiset containing elements to add
1769 Wraps a multimap in a synchronized instance. @param multimap input multimap to synchronize
1770 Creates a synchronized table view with no thread synchronization mutex. @param table wrapped table object
1771 Escapes special characters in a string by converting them to their corresponding Unicode escape sequences. @param string input string to process @return escaped string or original if no escapes found
1772 Converts a Readable source to a StringBuilder representation. @param r Readable source
1773 Creates a CatchingFuture that monitors the given future for specified exceptions and executes a fallback action on occurrence. @param input asynchronous task to monitor @param exceptionType class of exceptions to catch @param fallback alternative action to execute on exception @param executor executor to use for rejection propagation @return ListenableFuture containing result or fallback value
1774 Cancels the current computation if running. @param mayInterruptIfRunning true to interrupt task before cancelling @return whether cancellation was successful
1775 Sets the value of this AbstractFuture and completes it without interrupting the task. @param value new value to set
1776 Sets the exception to be thrown when this future completes. @param throwable non-null exception to store
1777 Sets the future value of this AbstractFuture. @param future non-null ListenableFuture to set
1778 Transforms the result of a future using a specified function. @param input input future to transform @param function transformation function to apply @param executor for propagating rejection @return transformed ListenableFuture outcome
1779 Atomically increments and returns the value associated with the given key. @param key unique map key
1780 Decrements and returns atomic long value associated with a given key. @param key unique map key
1781 Atomically increments the value associated with the given key by 1. @param key unique map key
1782 Atomically decrements the map value associated with the given key. @param key unique map key
1783 Creates an instance of AtomicLongMap with the specified key-value pairs. @param m map containing keys and long values to import
1784 Initializes an instance with specified graph directionality. @param directed true if the graph is directed, false otherwise
1785 Initializes NetworkBuilder with specified graph directionality. @param directed true if the graph is directed, false otherwise
1786 Initializes ValueGraphBuilder with specified graph directionality. @param directed true if the graph is directed, false otherwise
1787 Adds a listener to the service with an associated executor. @param listener registered listener @param executor execution context
1788 Performs forward conversion from type A to B with automatic null handling. @param a non-nullable object of type A to be converted
1789 Creates a new instance of compact hash map with default size.
1790 Creates a compact hash map with specified expected size. @param expectedSize initial capacity of the compact hash map
1791 Creates a new instance of CompactHashSet with default capacity.
1792 Creates a CompactHashSet with an estimated size. @param expectedSize initial capacity estimate
1793 Creates a new ListMultimap from an existing map and a value list factory. @param map pre-existing map to initialize from @param factory supplier of new lists for storing values
1794 Creates a set multimap from a given map and set factory. @param map initial map to populate the multimap @param factory supplier for creating sets
1795 Initializes the Builder object with an empty LinkedHashMultiset instance.
1796 Composes this converter with a given forward converter to create a bidirectional conversion. @param secondConverter forward converter from type B to C
1797 Joins array elements to a StringBuilder with customizable separator. @param builder target StringBuilder @param parts array of elements to join @return the modified StringBuilder
1798 Joins iterable elements into a single string with customizable separator. @param parts iterable of elements to join
1799 Creates a MapMakerInternalMap instance based on the provided MapMaker configuration. @param builder MapMaker object with key and value strength settings
1800 Creates a MapMakerInternalMap instance with dummy values based on the provided configuration. @param builder MapMaker configuration object specifying key and value strength
1801 Concatenates multiple iterable collections into a single fluent iterable. @param inputs varargs of input iterables to be concatenated
1802 Retrieves an element from the iterable delegate at a specified non-negative index. @param position index of desired element
1803 Acquires a single permit at a controlled rate. @return wait time in seconds until permits are available
1804 Attempts to acquire a lock with specified duration constraints. @param time Duration object specifying the desired lock duration @return true if lock acquired, false otherwise
1805 Attempts to acquire a lock and wait for a condition to be satisfied. @param time duration of lock request @param unit TimeUnit object specifying the unit of time @return true if lock acquired and condition met, false otherwise
1806 Creates a CacheBuilder instance based on the provided specification. @param spec CacheBuilderSpec object containing configuration details
1807 Creates a strong interner instance. @return Interner instance with strong interning strategy
1808 Creates a weak interner instance using the configured strategy. @return Interner instance for interning objects with weak references
1809 Places a value at the specified row and column keys. @param rowKey unique identifier for the row @param columnKey unique identifier for the column @param value nullable object to store (may be null) @return old value or null if not previously set
1810 Removes a row and column by their keys. @param rowKey key of the row to erase or null for no change @param columnKey key of the column to erase or null for no change @return old value at the erased position or null if not previously set
1811 Compares this immutable double array with another object for equality. @param object the object to compare with @return true if equal, false otherwise
1812 Compares this immutable array with the given object for equality. @param object object to compare with @return true if objects are equal, false otherwise
1813 Compares this immutable array to another object for equality. @param object the other object to compare with @return true if both arrays have the same length and elements, false otherwise
1814 Converts a string to the specified case format. @param format CaseFormat object defining the target format @param s input string to be converted
1815 Searches for the first matching character in a sequence starting from position 0.
1816 Initializes iterator with collection size and position. @param size target collection size
1817 Retrieves Teredo information from a given IPv6 address. @param ip Inet6Address object to verify @return TeredoInfo object or throws exception if not a valid Teredo address
1818 Checks if a UTF-8 encoded byte sequence is well-formed. @param bytes the byte array to verify
1819 Encodes entire byte array using current encoding scheme. @param bytes input byte array
1820 Ensures the specified number of bytes are read from the InputStream. @param in input stream @param b target byte array @param off starting index in the byte array @param len number of bytes to read, or -1 for all remaining bytes
1821 Reverses an entire boolean array. @param array input boolean array to be reversed
1822 Rotates a specified segment of the input boolean array. @param array the input boolean array @param distance rotation distance @param fromIndex starting index of the segment to rotate @param toIndex ending index of the segment to rotate
1823 Reverses the entire byte array. @param array the byte array to manipulate
1824 Rotates a portion of the byte array within the specified range. @param array the byte array to manipulate @param distance number of positions to rotate @param fromIndex starting index of the section to rotate (inclusive) @param toIndex ending index of the section to rotate (exclusive)
1825 Sorts a portion of the byte array in descending order. @param array the byte array to sort @param fromIndex starting index of the section to sort (inclusive) @param toIndex ending index of the section to sort (exclusive)
1826 Sorts a character array in descending order within the specified range. @param array input character array @param fromIndex starting index of the range (inclusive) @param toIndex ending index of the range (exclusive)
1827 Reverses the entire character array.
1828 Rotates a character array within the specified range by a given distance. @param array input character array @param distance rotation distance @param fromIndex starting index of the range (inclusive) @param toIndex ending index of the range (exclusive)
1829 Sorts a portion of the input array in descending order. @param array input array @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1830 Reverses the entire specified double array. @param array input array to be reversed
1831 Rotates a portion of the specified array by given distance. @param array input array @param distance rotation distance @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1832 Sorts a subarray in descending order. @param array input float array @param fromIndex starting index of the subarray @param toIndex ending index of the subarray (exclusive)
1833 Reverses an entire float array. @param array input array to be reversed
1834 Rotates a subarray within the given array by specified distance. @param array array to rotate @param distance number of positions to shift elements @param fromIndex starting index of the subarray @param toIndex ending index of the subarray (exclusive)
1835 Sorts a portion of the given integer array in descending order. @param array the input array to modify @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1836 Reverses an entire integer array in-place. @param array input array to modify
1837 Rotates a portion of the given integer array in-place by the specified distance. @param array the input array to modify @param distance the rotation distance @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1838 Sorts a portion of the given long array in descending order. @param array the array to sort @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1839 Reverses the entire given long array. @param array the array to reverse
1840 Rotates a portion of the given array by 'distance' positions. @param array the array to rotate @param distance number of positions to rotate @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1841 Sorts a portion of the given short array in descending order. @param array input array @param fromIndex starting index for sorting (inclusive) @param toIndex ending index for sorting (exclusive)
1842 Reverses the entire given short array. @param array input array to be reversed
1843 Rotates a portion of the given short array by the specified distance. @param array input array @param distance rotation distance @param fromIndex starting index for rotation (inclusive) @param toIndex ending index for rotation (exclusive)
1844 Sorts an entire byte array in ascending order. @param array the byte array to sort
1845 Sorts the specified byte array in descending order. @param array the byte array to sort
1846 Sorts an entire array of unsigned integers in ascending order. @param array input array to be sorted
1847 Sorts an unsigned integer subarray in descending order. @param array the input array
1848 Sorts an entire unsigned long array in ascending order. @param array input array of unsigned long values
1849 Sorts an unsigned long array in descending order. @param array array to sort
1850 Creates a Splitter for splitting based on a single character or string separator. @param separator the character or string to split on
1851 Configures key-value pair separator using provided single character. @param separator the character to split on
1852 Starts the Finalizer instance with specified finalizable reference class, queue, and phantom reference. @param finalizableReferenceClass Class of the finalizable reference @param queue Queue for processing and cleanup of references @param frqReference Phantom reference that started this finalizer
1853 Creates an empty ImmutableListMultimap Builder instance.
1854 Creates an empty ImmutableSetMultimap Builder instance.
1855 Creates an unmodifiable view of a given multiset. @param multiset Multiset to be wrapped and protected from modifications
1856 Creates an EvictingQueue instance with the specified maximum size. @param maxSize the maximum number of elements in the queue
1857 Initializes an empty ForwardingBlockingDeque instance.
1858 Initializes an empty ForwardingBlockingDeque instance with default settings.
1859 Initializes an empty ForwardingNavigableSet instance with default behavior.
1860 Creates an unmodifiable set of map entries. @param entrySet input set of map entries
1861 Creates an unmodifiable view of the specified navigable map. @param map the underlying navigable map
1862 Returns an unmodifiable view of the given ListMultimap. @param delegate the multimap to wrap
1863 Returns an unmodifiable view of the given set multimap. @param delegate original set multimap to wrap @return SetMultimap instance or null if already unmodifiable
1864 Creates an unmodifiable RowSortedTable instance from a given table. @param table underlying table data structure
1865 Adapts a standard Java Future to a ListenableFuture in the pool thread. @param future standard Future instance @return ListenableFuture object or existing one if already adapted
1866 Adds a callback to handle the result of an asynchronous operation. @param future the ListenableFuture to monitor @param callback the action to execute upon completion @param executor the Executor to use for scheduling
1867 Initializes the LocalCache instance with specified configuration and loader. @param builder CacheBuilder instance containing cache settings @param loader optional CacheLoader for data loading (may be null)
1868 Creates a default TreeMultiset instance with natural ordering. @return A newly created TreeMultiset object
1869 Creates a TreeMultiset instance with the given comparator. @param comparator comparison function for multiset elements or null for natural ordering
1870 Replaces values associated with a given key. @param key unique identifier to update @return updated collection of values or null if removed
1871 Replaces values associated with a given key. @param key unique identifier to update @return updated collection of values or null if removed
1872 Removes all values associated with the specified key. @param key unique identifier to remove
1873 Creates a new HashMultiset with specified number of unique elements. @param distinctElements anticipated number of unique elements
1874 Checks whether a graph contains a cycle, considering graph type and parallel edges. @param network the input graph to analyze
1875 Creates a new LinkedHashMultiset with specified expected size. @param distinctElements anticipated number of unique elements
1876 Initializes a StandardNetwork instance from the provided builder. @param builder network configuration builder
1877 Initializes a StandardValueGraph instance with the provided graph configuration and expected node connections. @param builder AbstractGraphBuilder instance for graph settings
1878 Creates a HashSet with expected initial capacity based on values per key. @return Set of values associated with each key
1879 Creates a linked hash set with specified expected size. @return Set of values
1880 Adds a new cell with specified row key, column key, and value. @param rowKey unique row identifier @param columnKey unique column identifier @param value stored cell value
1881 Adds an immutable map entry with the given key and value. @param key unique identifier @param value associated value
1882 Adds a new immutable entry with the given class type and instance. @param key unique class type identifier @param value associated instance of that type
1883 Adds all entries from a given map to the builder's immutable mapping, casting values to their specified class types. @param map source map containing key-value pairs
1884 Adds an immutable map entry from a pre-existing Entry object. @param entry existing map entry to be added
1885 Adds an immutable map entry with the given key and value. @param key unique key identifier @param value associated value
1886 Adds a new immutable entry with the given class type as key and associated object value. @param key Class<T> to create token for @param value associated object value
1887 Adds a new immutable map entry with the given TypeToken and associated value. @param key unique type token identifier @param value associated value
1888 Adds all provided key-value pairs to the multimap. @param entries iterable collection of Entries to add
1889 Adds all provided key-value pairs to the multimap. @param entries iterable collection of Entries to add
1890 Filters a navigable set based on the provided predicate. @param unfiltered original collection of elements @param predicate criteria to filter elements by
1891 Builds an ImmutableSortedMap instance based on the provided builder state. @return The constructed map or throws an exception if building fails
1892 Adds a new immutable entry with the given range and value to the builder. @param range key range for the entry @param value associated data for the entry
1893 Adds a non-empty range to the builder; throws exception if provided range is empty. @param range non-empty range to add
1894 Computes the intersection of this range and another. @param connectedRange the other range to intersect @return a new Range object representing their intersection
1895 Checks if two ranges have a nonempty intersection and returns the gap between them. @param otherRange the other range to check
1896 Merges this Range with another, returning a new Range instance if they overlap or one fully contains the other. @param other the other Range to merge with @return merged Range object or null if not overlapping
1897 Returns the canonical representation of the current range within the given discrete domain. @param domain DiscreteDomain instance to determine canonical form
1898 Creates a new empty HashBiMap instance with default expected size.
1899 Creates a new HashBiMap instance from a given Map. @param map the input map to populate the HashBiMap
1900 Creates an immutable map builder instance.
1901 Creates an instance of the map with a single key-value pair for the given class type and immutable instance. @param type Class type to associate with the instance @param value Immutable instance to be mapped to the class type
1902 Returns an immutable set of all unique values in the bi-map. @return Set of values or empty set if no entries exist
1903 Reverses a given list, utilizing various implementation strategies for efficiency. @param list nullable input list to be reversed
1904 Creates an immutable list from a given array. @param elements nullable array to copy and validate
1905 Creates an immutable list from a specified array of elements and length. @param elements nullable object array to validate and store @param length expected number of non-null elements in the array
1906 Returns a sublist view of the current immutable list. @param fromIndex starting index (inclusive) @param toIndex end index (exclusive)
1907 Creates an immutable range map with a single key-value pair. @param range specified key-range @param value corresponding value for the range
1908 Creates an immutable range set from a single range. @param range the initial range to include
1909 Creates an ImmutableSortedMap with a single key-value pair. @param comparator comparison function for the map's keys @param k1 unique key in sorted order @param v1 corresponding value
1910 Creates an immutable set from a given array of elements. @param elements non-null array to be copied into the set
1911 Creates an immutable set builder instance.
1912 Concatenates two iterators into one. @param a first iterator @param b second iterator
1913 Concatenates three iterators into a single iterator. @param a first iterator @param b second iterator @param c third iterator
1914 Concatenates up to four iterators into a single iterator. @param a first iterator @param b second iterator @param c third iterator @param d fourth iterator (optional)
1915 Retrieves subscribers associated with the given event type(s). @param event the event whose subscribers are to be retrieved @return an iterator over all registered subscribers for the event's types
1916 Retrieves a ClosingFuture's result once it is done, throwing an exception if not. @param closingFuture the ClosingFuture to get result from @return value of type D or null if not found, or throws ExecutionException
1917 Checks if the segment contains a specified value. @param value object to search for @return true if found, false otherwise
1918 Removes the first occurrence of a specified key-value pair. @param key object to be removed @return associated value or null if not found
1919 Clears all entries in the underlying map. @param none
1920 Checks if underlying map is empty. @return true if no entries exist, false otherwise
1921 Calculates the hash code of this map based on its entries. @return The calculated hash code
1922 Computes map differences between two maps, considering equivalence relation. @param left first map to compare @param right second map to compare against
1923 Initializes the EventBus instance with default identifier and executor.
1924 Inserts or updates an element at the specified index in the heap, potentially bubbling it up to maintain heap properties. @param index position of the element within the heap @param x element to be inserted or updated @return new parent node index after insertion or update
1925 Fills the hole at a specified heap node by replacing it with its minimum grandchild. @param index current node index @return new root index after filling the hole
1926 Checks if the specified object is contained in this sorted set. @param object the object to search for @return true if found, false otherwise
1927 Removes the specified element from this set if it is present. @param object element to remove @return true if the element was removed, false otherwise
1928 Returns a view of elements in this set, between the specified range. @param fromElement starting point for the subset @param toElement ending point for the subset
1929 Returns a sorted set of unique row keys.
1930 Removes all values associated with a given key. @param key unique identifier
1931 Creates a Bloom filter with the specified parameters. @param funnel serialization funnel for elements @param expectedInsertions expected number of insertions (must be >= 0) @param fpp desired false positive probability (must be > 0.0 and < 1.0) @return BloomFilter instance or throws exception if creation fails
1932 Rounds a double value to the nearest integer using the specified RoundingMode. @param x input double value @param mode rounding mode (UNNECESSARY, FLOOR, CEILING, DOWN, UP, HALF_EVEN, or HALF_UP)
1933 Rounds a double value to the specified RoundingMode and validates result within long range. @param x input double value @param mode rounding mode @return rounded long value or throws exception if invalid
1934 Offers all remaining elements from the Iterator to the TopKSelector. @param elements iterator containing elements to be offered
1935 Creates a TopKSelector for the least K elements with natural ordering. @param k number of least elements to select (must be >= 0 and <= Integer.MAX_VALUE / 2)
1936 Creates a TopKSelector for the greatest K elements based on natural ordering. @param k number of top elements to select (must be >= 0 and <= Integer.MAX_VALUE / 2)
1937 Checks whether an integer is prime using optimized algorithms. @param n the number to test for primality
1938 Calculates the binomial coefficient (n choose k) using a combination of memoization and iterative multiplication. @param n input value @param k input value
1939 Computes statistical metrics from an iterable of numerical values. @param values collection of numbers to be analyzed @return Stats object containing aggregated data and statistics.
1940 Accumulates statistical metrics from an iterator of numerical values. @param values iterator over numbers to be accumulated @return Stats object with aggregated data
1941 Accumulates statistical data from the provided PairedStats object. @param values input data to accumulate
1942 Computes statistical metrics from a DoubleStream. @param values the input data stream @return Stats object containing aggregated statistics
1943 Accumulates statistical metrics from an IntStream. @param values input stream of numerical data
1944 Accumulates statistical metrics from a LongStream. @param values LongStream containing numerical data points @return Stats object with aggregated statistics
1945 Accumulates statistical metrics from a DoubleStream. @param values stream of numerical data points
1946 Accumulates statistical metrics from an IntStream. @param values stream of integer data points to accumulate
1947 Accumulates statistical metrics from a dataset provided as a LongStream. @param values stream of numerical data points to accumulate
1948 Recursively selects all occurrences of a quantile value within the specified numerical array range. @param allRequired array of required values @param requiredFrom and requiredTo bounds for quantile requirements @param array input numerical array @param from and to bounds for data range
1949 Creates an immutable double array from the specified iterable of Double values. @param values Iterable collection of doubles to convert
1950 Creates an ImmutableIntArray from a given iterable collection of integers. @param values input integer collection
1951 Creates an immutable long array from the specified iterable. @param values Iterable of long integers to be copied
1952 Converts this unsigned long value to a string representation in the specified radix. @param radix base of the number system (must be between Character.MIN_RADIX and Character.MAX_RADIX)
1953 Converts an unsigned long value to a string representation in radix 10. @param x unsigned long value
1954 Invokes any of the supplied tasks using a ListeningExecutorService, returning at most one result. @param executorService executor service instance @param tasks collection of callable tasks to be executed @param timed whether to wait for a specific time or indefinitely @param timeout maximum time to wait in specified unit @return result of the first task that completes, or null if all fail @throws InterruptedException if interrupted while waiting @throws ExecutionException if an exception occurs during execution @throws TimeoutException if timed operation exceeds specified timeout
1955 Executes a combiner function on aggregated futures using the provided Executor. @param combiner Runnable task to combine futures' results @param executor thread pool for execution @return ListenableFuture containing combined result or null if all must succeed and any fails
1956 Wraps a ListenableFuture with default resource management. @param future asynchronous computation to wrap
1957 Returns the head of this queue, or null if it's empty. Calls remove to retrieve an element and catches NoSuchElementException
1958 Safely retrieves the next element from the underlying queue without removing it. @return The next element, or null if empty
1959 Submits a synchronous task for execution with specified executor. @param callable synchronous operation to be executed @param executor executor to use for task execution @return non-cancellation propagating future of the task result
1960 Retrieves a future value while throwing checked exceptions for any failures. @param future the Future object to get from @param exceptionClass Class of the exception to instantiate on failure @param timeout maximum time in specified unit to wait for result @param unit time unit of timeout value @throws X instantiated exception object if operation fails
1961 Notifies listeners of service termination. @param none
1962 Notifies listeners of a service failure with the given cause. @param cause Throwable instance explaining the failure
1963 Tries to start timing for the given service. @param service managed service instance
1964 Transitions a service from one state to another. @param service Service object being transitioned @param from Current state of the service @param to Target state of the service
1965 Waits for the specified condition to be satisfied before proceeding. @param guard condition being waited for
1966 Waits for the specified condition to be satisfied, acquiring lock if necessary. @param guard condition being waited for
1967 Waits uninterruptibly for the specified condition to be satisfied and enters the monitor. @param guard condition being waited for
1968 Waits uninterruptibly for the specified condition to be satisfied. @param guard condition being waited for
1969 Waits for the specified condition to be satisfied, with optional timeout and reentrancy. @param guard condition being waited for @param time duration in specified unit @param unit TimeUnit object specifying the unit of time @return true if condition is satisfied, false on timeout
1970 Enters the monitor when uninterruptibly, waiting for a condition to be satisfied. @param guard condition being waited for @param time duration in specified unit @param unit TimeUnit object specifying the unit of time @return true if condition is satisfied, false on timeout or interrupt
1971 Awaits for a specified condition to be satisfied by the given Guard. @param guard condition being waited for @param time duration in specified unit @param unit TimeUnit object specifying the unit of time @return true if condition is satisfied, false on timeout
1972 Waits for the specified condition to be satisfied by the guard without interrupting. @param guard condition being waited for @param time duration in specified unit @param unit TimeUnit object specifying the unit of time @return true if condition is satisfied, false on timeout
1973 Adds a specified timeout to this asynchronous computation. @param timeout duration of the timeout in the given unit @param unit unit of measurement for the timeout period @param scheduledExecutor executor service used for scheduling tasks
1974 Creates a TimeoutFuture with a specified timeout period and delegates asynchronous task execution. @param delegate the underlying future to be managed @param time the duration of the timeout in nanoseconds @param scheduledExecutor the executor service used for scheduling tasks
1975 Finds the first element matching a predicate in this iterable. @param predicate condition to match elements against @return first matching element, or empty Optional if not found
1976 Creates a precomputed CharMatcher based on internal criteria.
1977 Rethrows the given Throwable as a RuntimeException, considering potential exceptions. @param e the original exception @param declaredType1 first expected exception class @param declaredType2 second expected exception class
1978 Writes byte array to output stream. @param bytes the byte data to write
1979 Copies data from the given InputStream to an output stream, returning total bytes copied. @param input input stream containing byte data @return total bytes written to output stream
1980 Checks if the byte stream is empty. @return true if the stream has zero bytes, false otherwise
1981 Calculates the total number of bytes in this byte stream. @return The total size if known, otherwise attempts to count by reading or exhausting the stream
1982 Copies data from this byte source to the specified OutputStream. @param output output stream @return total bytes copied
1983 Copies data from this byte source to the given sink. @param sink destination byte sink @return total bytes copied
1984 Reads byte data from the underlying stream. @return byte array containing the read data or throws IOException if an error occurs
1985 Processes byte data using a ByteProcessor and returns the result. @param processor ByteProcessor to apply to the data @return processed result or null if not returned by processor
1986 Compares the content of this ByteSource with another, considering IOExceptions. @param other the ByteSource to compare @return true if contents are equal, false otherwise
1987 Writes a CharSequence to the underlying output stream in a buffered manner. @param charSequence character sequence to be written
1988 Copies character data from a Readable source to an output stream. @param readable nullable Readable source @return total number of characters copied @throws IOException if an exception occurs during writing
1989 Returns the length of the character source if known or calculated by reading and skipping. @throws IOException if an exception occurs during calculation
1990 Copies character data from this source to the given Appendable destination. @param appendable output destination @return total number of characters copied
1991 Copies character data from this source to the given sink. @param sink destination for copied characters @return total number of characters copied
1992 Reads the first line from the underlying character source. @throws IOException if an exception occurs during reading
1993 Reads lines from a readable source and processes them using the provided LineProcessor. @param processor callback to process each line; must not be null @return result of processing (or null if no lines were processed)
1994 Checks if the character source is empty. @return true if length is known and zero, false otherwise
1995 Expands the internal table to twice its current capacity, rehashing existing entries.
1996 Filters keys from a multimap using the provided predicate. @param unfiltered underlying multimap to filter @param keyPredicate predicate to select keys that conform to specific criteria
1997 Filters a multimap based on a predicate for entry values. @param unfiltered underlying multimap @param valuePredicate condition to apply to entry values
1998 Filters a multimap based on an entry predicate. @param unfiltered underlying multimap @param entryPredicate condition to apply to entries
1999 Creates an iterator over column keys, filtering out duplicates using the specified comparator. @return Iterator containing unique column keys
2000 Creates a copy of an immutable bi-map from an iterable of key-value pairs. @param entries input iterable containing key-value pairs
2001 Creates an immutable map from a collection of key-value entries. @param entries iterable of key-value pairs
2002 Converts iterable to an array of specified type and length. @param iterable input iterable @param type Class of the array elements
2003 Creates a copy of the given iterable with the specified comparator. @param comparator comparator to use for ordering @param elements input iterable to copy @return ImmutableSortedSet instance or original if it's an unmodified partial view
2004 Performs binary search on a transformed sorted list to find an element. @param list the input list @param key the target key @param keyComparator comparison function for keys @param presentBehavior behavior if key is found (e.g. index calculation) @param absentBehavior behavior if key is not found (e.g. default index value)
2005 Removes all values associated with a given key from the multimap. @param key object to remove from the multimap
2006 Transforms the values in a navigable map using the provided transformation function. @param fromMap source map to transform @param function key-value pair transformation function
2007 Removes a table mapping by row and column keys if it exists. @param rowKey nullable key to look up the row @param columnKey nullable key to look up the value within the row @return true if a matching mapping was found and removed, false otherwise
2008 Creates a synchronized list multimap from an existing one. @param multimap original ListMultimap instance
2009 Returns a synchronized set multimap for thread-safe access. @param multimap set multimap to be synchronized
2010 Converts a Readable source to a string representation using a StringBuilder. @param r Readable source
2011 Wraps this future in a CatchingFuture that monitors for specified exceptions and executes a fallback action on occurrence. @param exceptionType class of exceptions to catch @param fallback alternative action to execute on exception @param executor executor to use for rejection propagation
2012 Transforms the result of a future using a specified function. @param function transformation function to apply @param executor for propagating rejection
2013 Creates a GraphBuilder instance with directionality set to directed.
2014 Creates an undirected graph builder instance.
2015 Creates a graph builder instance from an existing graph, inheriting its properties. @param graph the source graph to borrow configuration from
2016 Creates a NetworkBuilder instance with a directed graph. @return A new NetworkBuilder object
2017 Creates an undirected network builder instance.
2018 Creates a NetworkBuilder instance from an existing network, inheriting its properties. @param network the source network
2019 Creates a directed ValueGraphBuilder instance.
2020 Creates an undirected value graph builder.
2021 Creates a ValueGraphBuilder instance from an existing value graph, inheriting its configuration. @param graph the value graph to inherit settings from
2022 Adds a service state listener with associated execution context. @param listener registered listener @param executor execution context
2023 Creates an empty CompactLinkedHashSet instance.
2024 Initializes a CompactHashSet with the specified collection. @param collection input elements to populate the set
2025 Creates a CompactLinkedHashSet with an estimated size. @param expectedSize initial capacity estimate
2026 Creates a sorted set multimap from the given map and factory. @param map empty map to initialize from @param factory supplier of sorted set comparator
2027 Creates an immutable multiset collector with default count of 1.
2028 Creates a collector for an immutable multiset, applying the given functions to elements. @param elementFunction function to extract elements from input @param countFunction function to extract counts from input
2029 Creates an ImmutableMultiset Builder instance.
2030 Joins array elements into a single string with customizable separator. @param parts array of elements to join
2031 Joins iterable elements into a single string using a custom Joiner. @param joiner Joiner instance with separator and other settings
2032 Simplifies a file path by resolving ., .., and //. @param pathname the file path to simplify @return the simplified file path
2033 Parses trie data into an ImmutableMap representing public suffix information. @param stack Deque to store reversed character sequences @param encoded CharSequence containing encoded trie data @param start starting index for parsing @param builder ImmutableMap.Builder to accumulate parsed data
2034 Creates a ConcurrentMap instance with customizable parameters. If useCustomMap is false, returns a ConcurrentHashMap with default initial capacity and concurrency level; otherwise, creates a MapMakerInternalMap instance based on this MapMaker configuration.
2035 Applies a transformation function to each element of the iterable and concatenates the results. @param function mapping function to apply to each element
2036 Concatenates multiple iterable collections into a single fluent iterable. @param inputs varargs of input iterables to be concatenated
2037 Retrieves result of asynchronous computation with a specified timeout. @param timeout maximum time to wait for completion in the given unit @param unit time unit (e.g., seconds, milliseconds) @return result value V if successful, or throws exceptions on failure
2038 Adds a node and returns the corresponding graph connections. @param node unique node identifier
2039 Attempts to acquire a lock and wait for a condition to be satisfied. @param guard Monitor Guard object @param time duration of lock request in nanoseconds
2040 Converts a string to the specified case format using camel conversion rules. @param format CaseFormat object defining the target format @param s input string to be converted
2041 Converts a string to the specified case format while maintaining word boundaries. @param format CaseFormat object defining the target format @param s input string to be converted
2042 Converts a string to the specified case format, handling camel case conversion. @param format CaseFormat object defining the target format @param s input string to be converted
2043 Converts a string to the specified case format. @param format CaseFormat object defining the target format @param str input string to be converted
2044 Checks if none of the characters in the sequence match any criteria. @param sequence CharSequence to search
2045 Removes matching characters from a sequence. @param sequence CharSequence to process
2046 Replaces all matching characters in a sequence with a specified replacement character. @param sequence CharSequence to process @param replacement character to replace matches with
2047 Retrieves the client's embedded IPv4 address from a given IPv6 address. @param ip the IPv6 address to extract the embedded IPv4 address from @return Inet4Address object representing the client's embedded IPv4 address
2048 Reads bytes from input stream and updates hash value. @param bytes byte array to read into @param off starting offset in bytes @param len number of bytes to read @return number of bytes read or -1 if end-of-stream reached
2049 Reads all available bytes from the InputStream into the target byte array. @param in input stream @param b target byte array
2050 Rotates boolean array by specified distance starting from index 0 and ending at array length. @param array input boolean array @param distance rotation distance
2051 Rotates the entire byte array by a specified distance. @param array the byte array to manipulate @param distance number of positions to rotate
2052 Sorts the entire byte array in descending order.
2053 Sorts a character array in descending order. @param array input character array
2054 Rotates the character array within its entire range. @param array input character array @param distance rotation distance
2055 Sorts an entire input array in descending order. @param array input double array to be sorted
2056 Rotates the specified portion of the double array by given distance. @param array input array @param distance rotation distance
2057 Sorts a float array in descending order. @param array input float array
2058 Rotates the entire float array by the specified distance. @param array array to rotate @param distance number of positions to shift elements
2059 Sorts an entire integer array in descending order. @param array input array to modify
2060 Rotates a portion of the given integer array in-place by the specified distance. @param array the input array to modify @param distance the rotation distance
2061 Sorts a long array in descending order. @param array the input array to be sorted
2062 Rotates a portion of the given long array by 'distance' positions. @param array the array to rotate @param distance number of positions to rotate
2063 Sorts a short array in descending order. @param array input array to be sorted
2064 Rotates a portion of the given short array by the specified distance. @param array input array @param distance rotation distance
2065 Configures key-value pair separator using provided string. @param separator delimiter to split keys and values
2066 Creates a rate limiter with smooth warming up and specified permit rate. @param permitsPerSecond target permits per second @param warmupPeriod warm-up duration in milliseconds @param unit time unit for warm-up period
2067 Returns an unmodifiable view of the given SortedMultiset. @param sortedMultiset input multiset, must not be null
2068 Creates an unmodifiable navigable set view from a given navigable set. @param set the underlying navigable set
2069 Returns an unmodifiable collection of map entries. @param entries read-only collection of key-value entries
2070 Returns an unmodifiable view of the given SortedSetMultimap. @param delegate wrapper multimap to create a read-only view from
2071 Creates a ClosingFuture that closes asynchronously when the input future completes. @param future asynchronous computation to wrap @param closingExecutor executor for closing resources @return ClosingFuture instance with eventual closure
2072 Adds a callback to handle the result of this asynchronous operation. @param callback action to execute upon completion @param executor Executor to use for scheduling
2073 Creates an EnumBiMap instance with specified enum classes for keys and values. @param keyType enum class representing the keys @param valueType enum class representing the values
2074 Creates an instance of EnumHashBiMap for the specified enum type. @param keyType The enum class for which to create the mapping
2075 Creates a default TreeMultiset instance and populates it with elements from the given iterable. @param elements Iterable of elements to add @return A newly created TreeMultiset object containing all input elements
2076 Initializes the Builder with a specified comparator. @param comparator comparison function for multiset elements or null for natural ordering
2077 Replaces sorted set of values associated with a given key. @param key unique identifier to update @return updated sorted set of values or null if removed
2078 Replaces the set of values associated with a given key. @param key unique identifier @param values new values to associate with the key
2079 Creates a new HashMultiset from an iterable, inferring the number of distinct elements. @param elements input iterable
2080 Initializes a new `ArrayListMultimap` instance with specified key and value capacities. @param expectedKeys anticipated number of keys @param expectedValuesPerKey anticipated values per key
2081 Creates a new HashMultimap with the specified expected keys and values per key. @param expectedKeys anticipated number of unique keys @param expectedValuesPerKey minimum value count per key
2082 Creates a new HashMultimap instance from an existing Multimap. @param multimap source multimap to copy key-value pairs from
2083 Creates a LinkedListMultimap with the specified expected number of keys. @param expectedKeys anticipated number of keys in the multimap
2084 Creates a new LinkedHashMultiset with specified expected size and adds all elements from the given iterable. @param elements Iterable of elements to add
2085 Creates a new LinkedHashMultimap with default key and value capacities.
2086 Creates a LinkedHashMultimap with specified key and value capacities. @param expectedKeys maximum number of keys @param expectedValuesPerKey anticipated values per key
2087 Initializes a StandardMutableNetwork instance from the provided builder. @param builder network configuration builder
2088 Initializes a StandardMutableValueGraph instance with the provided graph configuration and expected node connections. @param builder AbstractGraphBuilder instance for graph settings
2089 Adds a new cell to the table with specified row key, column key, and value. @param cell Cell object containing row, column, and value information
2090 Adds an immutable map entry from a pre-existing Entry object. @param entry existing map entry to be added
2091 Adds all immutable map entries from an iterable collection. @param entries collection of existing map entries to be added
2092 Adds an immutable map entry from a pre-existing Entry object. @param entry existing map entry to be added
2093 Converts the immutable map to a multimap instance. @return ImmutableSetMultimap object or a newly created one if the map is not empty
2094 Returns an ImmutableSortedMap instance based on the builder state. @return The constructed map
2095 Merges all entries from the given RangeMap into this builder. @param rangeMap source map containing key-value pairs to merge
2096 Adds multiple non-overlapping ranges to the builder. @param ranges iterable of non-empty ranges to add
2097 Intersects the current range set with a given range. @param range the range to intersect @return an immutable list of ranges representing the intersection, or empty list if no overlap
2098 Creates a contiguous set from the specified range and discrete domain. @param range defined range of elements @param domain discrete domain for the set's elements
2099 Coalesces adjacent ranges with matching values. @param range the Range to coalesce @param value the associated value to match @param entry optional Entry containing a Cut and RangeMapEntry @return merged Range object or original Range if not coalescing
2100 Converts this immutable range set to an ordered, unmodifiable set of individual elements. @param domain discrete domain used for canonical representation @return ImmutableSortedSet instance or throws IllegalArgumentException if not bounded
2101 Converts a Map to an Immutable Enum Map. @param map the input map @return an immutable Enum Map instance
2102 Returns an immutable map representation of the table's rows. @return ImmutableMap with key-value pairs where keys are row IDs
2103 Returns an unmodifiable iterator over this set's elements in reverse order.
2104 Finalizes the immutable list construction and returns the built list. @return ImmutableList object representing the constructed list
2105 Creates an immutable list from a specified array of elements. @param elements nullable object array to validate and store
2106 Finalizes the construction of an immutable sorted set by sorting and deduping elements. @return ImmutableSortedSet object representing the final set
2107 Creates an immutable map from a specified array of entries and size. @param n expected number of entries @param entryArray nullable object array to validate and store @param throwIfDuplicateKeys whether to throw on duplicate keys @return ImmutableMap instance with the provided key-value pairs
2108 Finds index of ancestor domain matching desired public suffix type. @param desiredType target public suffix type
2109 Creates an immutable set from the given iterable of Enum elements. If the input is already an ImmutableEnumSet, returns it as-is. Otherwise, converts it to an EnumSet and then to an immutable set instance. @param elements iterable of Enum elements @return ImmutableSet containing all Enum values
2110 Returns an unmodifiable iterator over the elements of this view.
2111 Posts an event to be handled by registered subscribers. @param event nullable object that triggers event handling
2112 Tries a cross-over operation and bubbles up the given element in the opposite heap. @param removeIndex index of the removed element @param vacated index where the removed element was stored @param toTrickle element being relocated @return MoveDesc object or null if operation fails
2113 Returns the comparator used for sorting row keys. @return Comparator object or null if not found
2114 Creates a synchronized view of the provided navigable set. @param navigableSet underlying navigable set to synchronize
2115 Creates a new Bloom filter with the specified parameters. @param funnel serialization funnel for elements @param expectedInsertions expected number of insertions (must be >= 0) @param fpp desired false positive probability (must be > 0.0 and < 1.0)
2116 Creates a Bloom filter with specified parameters. @param funnel serialization funnel for elements @param expectedInsertions expected number of insertions (must be >= 0)
2117 Estimates the number of elements stored in the Bloom filter. @return Approximate element count
2118 Creates a collector for the least K elements based on the specified comparator. @param k number of least elements to collect @param comparator comparison logic for ordering elements @return Collector instance for collecting the least K elements
2119 Returns the least K elements from an iterator. @param iterator input iterator of elements to select @param k number of least elements to select (must be >= 0)
2120 Offers all remaining elements from the Iterable to the TopKSelector. @param elements iterator containing elements to be offered
2121 Returns string representation of unsigned long value in radix 10. @return string representation of this unsigned long value
2122 Validates lock acquisition order before acquiring the specified lock. @param lock Lock to be acquired
2123 Transforms the asynchronous computation with resources by applying a ClosingFunction. @param function ClosingFunction to apply @param executor Executor for async transformation @return transformed ClosingFuture
2124 Transforms asynchronous task by applying the given function. @param function AsyncClosingFunction to apply @param executor Executor for async computation @return ClosingFuture containing transformed result
2125 Retrieves a future value while handling exceptions with the specified class. @param future Future object containing the result @param exceptionClass Class of the exception to instantiate on failure @throws X instantiated exception object
2126 Retrieves a future value while throwing checked exceptions for any failures. @param future the Future object to get from @param exceptionClass Class of the exception to instantiate on failure @param timeout maximum time in nanoseconds to wait for result @throws X instantiated exception object if operation fails
2127 Reschedules the task with a new scheduling parameters. @return Cancellable object representing the updated cancellation delegate
2128 Notifies listeners that the service has started. @param none
2129 Starts all services asynchronously. @return this instance
2130 Waits for the specified condition to be satisfied within a given time duration. @param guard condition being waited for @param time time interval in nanoseconds @return true if condition is satisfied, false on timeout or exception
2131 Enters the monitor when uninterruptibly, waiting for a condition to be satisfied. @param guard condition being waited for @param time duration in nanoseconds
2132 Awaits for a condition specified by Guard to be satisfied within the given time duration. @param guard condition being waited for @param time duration in nanoseconds
2133 Waits for the specified condition to be satisfied by the guard without interrupting. @param guard condition being waited for @param time duration in nanoseconds @return true if condition is satisfied, false on timeout
2134 Adds a specified timeout to this asynchronous computation. @param timeout duration of the timeout in a given unit @param scheduledExecutor executor service used for scheduling tasks
2135 Writes byte array to specified output file. @param from byte data to write @param to target file path
2136 Computes the hash of this byte source using the specified hash function. @param hashFunction hash function instance @return computed hash value
2137 Copies file contents from source to destination stream. @param from input File object @param to output stream
2138 Copies resource data from specified URL to output stream. @param from URL of the resource @param to output stream for data copying
2139 Copies a file from one location to another. @param from source File object @param to destination File object @throws IOException if an I/O error occurs
2140 Converts a File object to a byte array. @param file input File object @return byte array containing the file's contents or throws IOException if an error occurs
2141 Converts URL to byte array. @param url the URL of the resource @return byte array containing the read data or throws IOException if an error occurs
2142 Reads bytes from a File using a ByteProcessor. @param file input File object @param processor ByteProcessor to apply to the data @return processed result or null if not returned by processor
2143 Compares two files for equality by checking their lengths and contents. @param file1 first File object @param file2 second File object @return true if the files are equal, false otherwise
2144 Compares two file paths for equality. @param path1 first file path @param path2 second file path @return true if both files are the same, false otherwise
2145 Writes a CharSequence to a file using the specified character set. @param from character sequence to be written @param to output file @param charset character encoding for writing
2146 Appends a CharSequence to the specified file using the given charset. @param from character sequence to be appended @param to output file @param charset character set to use for writing
2147 Copies character data from the specified file with given charset to the appendable destination. @param from input File object @param charset target character set @param to output Appendable destination
2148 Reads the first line from a file. @param file input File object @param charset target character set @return first line of file content or null if empty
2149 Reads lines from a file, using the specified charset. @param file input File object @param charset target character set @return list of strings representing the file's content
2150 Reads lines from a file and processes them using the provided LineProcessor. @param file input File object @param charset target character set @param callback callback to process each line; must not be null @return result of processing (or null if no lines were processed)
2151 Reads lines from a resource URL and processes them using the provided LineProcessor. @param url the URL of the resource @param charset target character set @param callback callback to process each line; must not be null @return result of processing (or null if no lines were processed)
2152 Maps a file to a MappedByteBuffer using specified mode and entire file size. @param file File object @param mode MapMode type (READ_ONLY or READ_WRITE)
2153 Maps a file to a MappedByteBuffer using the specified mode and size. @param file File object @param mode MapMode type (READ_ONLY or READ_WRITE) @param size Requested byte count; -1 for file size
2154 Adds a delayed shutdown hook to the given executor service. @param service executor service to be shut down @param terminationTimeout timeout for shutdown in specified time unit
2155 Filters a multimap by values using the given predicate. @param unfiltered underlying multimap @param valuePredicate condition to apply to entry values
2156 Creates a compound ordering with specified comparators. @param comparators iterable of primary and tie-breaking comparators
2157 Creates an immutable bi-map from a given map, returning the original if it's already of type ImmutableBiMap. @param map input map to create a copy from @return ImmutableBiMap object or null if not found
2158 Converts iterable to an array of specified type and length. @param type Class of the array elements
2159 Converts iterator to an array of specified type and length. @param iterator input iterator @param type Class of the array elements
2160 Converts this iterable to a sorted set using the specified comparator. @param comparator comparator to use for ordering @return ImmutableSortedSet instance or null if delegate is null
2161 Creates a sorted copy of the given iterable using its natural ordering. @param elements input iterable to copy @return ImmutableSortedSet instance
2162 Creates a copy of the given collection with the specified comparator. @param comparator comparator to use for ordering @param elements input collection to copy
2163 Returns an unmodifiable view of the sorted row map. @return a sorted map of rows with their column maps
2164 Returns a human-readable string representation of the media type.
2165 Creates a synchronized version of the given SortedSetMultimap. @param multimap original multimap to synchronize
2166 Reads a line from the underlying character source. @throws IOException if an I/O error occurs
2167 Creates a compact linked hash map with the specified expected size. @param expectedSize initial capacity of the compact hash map
2168 Creates a CompactLinkedHashSet from an existing collection. @param collection input collection of elements
2169 Creates a new TreeMultimap with natural ordering for keys and values.
2170 Creates a TreeMultimap with custom comparators for keys and values. @param keyComparator comparator for sorting keys @param valueComparator comparator for sorting values
2171 Checks if any characters in the sequence match criteria. @param sequence CharSequence to search
2172 Removes matching characters from a sequence. @param sequence CharSequence to process
2173 Replaces all matching characters in a sequence with a specified replacement character. @param sequence CharSequence to process @param replacement character to replace matches with
2174 Retrieves a coerced IPv4 address from the given InetAddress object. @param ip InetAddress to extract the IPv4 address from @return Inet4Address object representing the coerced IPv4 address
2175 Creates a rate limiter with smooth warming up and specified permit rate. @param permitsPerSecond target permits per second @param warmupPeriod warm-up duration (converted internally)
2176 Retrieves the synchronized entry set from the underlying multimap delegate.
2177 Schedules a Runnable to be executed after a specified delay. @param command asynchronous operation to be executed @param delay execution delay in the given time unit @param unit time unit for the delay (e.g. seconds, milliseconds)
2178 Builds a cache instance with specified loader. @param loader optional CacheLoader for data loading (may be null)
2179 Constructs and returns a manual cache instance based on the provided configuration. @return Cache object with custom settings
2180 Initializes the Builder with a specified comparator for custom ordering. @param comparator comparison function for multiset elements or null for natural ordering
2181 Returns a builder with reversed ordering.
2182 Returns a builder with natural ordering.
2183 Creates an EnumBiMap instance from a given map, inferring key and value types. @param map input map containing key-value pairs
2184 Creates an instance of EnumHashBiMap for the specified enum type and adds all entries from the provided map. @param map input map containing key-value pairs to add
2185 Replaces the sorted set of values associated with a given key. @param key unique key identifier @param values new sorted set of values
2186 Checks if two lists are permutations of each other. @param first first list @param second second list @return true if the lists have the same elements in a different order, false otherwise
2187 Creates an empty `ArrayListMultimap` instance with default key and value capacities.
2188 Creates a new ArrayListMultimap instance from an existing Multimap. @param multimap source multimap to copy from
2189 Creates an empty HashMultimap instance.
2190 Creates an empty LinkedListMultimap instance.
2191 Creates a linked list multimap from an existing Multimap. @param multimap source of key-value pairs to initialize the multimap with
2192 Creates a new LinkedHashMultimap from an existing Multimap. @param multimap source Multimap to copy
2193 Constructs and returns a mutable network instance based on configured settings. @return A StandardMutableNetwork object representing the constructed network
2194 Initializes a StandardMutableGraph instance with the provided graph configuration. @param builder AbstractGraphBuilder instance for graph settings
2195 Constructs a mutable value graph instance with customized properties. @return StandardMutableValueGraph object configured according to this builder's settings
2196 Adds all cells from the specified table to this builder. @param table Table object containing key-value pairs
2197 Adds all immutable map entries from an iterable collection. @param entries collection of existing map entries to be added
2198 Adds all immutable entries from a given Map instance. @param map the map containing key-value pairs to be added
2199 Adds all immutable map entries from an iterable collection. @param entries collection of existing map entries to be added
2200 Filters entries from a filtered map based on additional predicate. @param map the original filtered map @param entryPredicate condition for new entries to be included in the filtered map
2201 Adds all non-overlapping ranges from the given RangeSet to this builder. @param ranges RangeSet containing multiple ranges to add
2202 Returns a sub-range set that represents the intersection with the given range. @param range the range to intersect @return an immutable range set representing the intersection, or the original set if fully enclosed or empty
2203 Creates a contiguous set of integers within the specified range. @param lower minimum value (inclusive) @param upper maximum value (inclusive)
2204 Creates a contiguous set of Long values within the specified range. @param lower inclusive lower bound @param upper inclusive upper bound
2205 Creates a contiguous set from a closed-open range of integers. @param lower inclusive lower bound @param upper exclusive upper bound
2206 Creates a contiguous set from an open-closed range. @param lower inclusive lower bound @param upper exclusive upper bound
2207 Coalesces adjacent ranges with matching values and updates the given range. @param range the Range to update @param value the associated value to match
2208 Adds a new node to the network and returns its associated connections. @param node unique node identifier @return NetworkConnections object with updated settings
2209 Creates an immutable map from a given Map instance. @param map the input map to copy
2210 Fetches the table's rows as an immutable map. @param rowKey unique row identifier @return ImmutableMap with key-value pairs where keys are column IDs or null if not found
2211 Retrieves the lowest element from this set that is strictly less than {@code e}. @param e comparison element @return lower element or null if not found
2212 Retrieves the smallest element in this set that is greater than or equal to {@code e}. @param e reference element @return smallest element >= e or null if not found
2213 Creates an immutable list by copying all elements from the provided iterator. @param elements Iterator of elements to be added @return ImmutableList object representing the constructed list
2214 Finalizes the immutable range map construction and returns the built map.
2215 Builds and returns an ImmutableRangeSet from the given list of ranges. @return ImmutableRangeSet object representing the constructed set
2216 Parses the Java class path into a list of URLs. @return ImmutableList<URL> containing parsed URLs or an empty list if none found
2217 Retrieves the immutable list of method parameters. @return ImmutableList object containing Parameter objects for each parameter
2218 Retrieves a list of exception types. @return ImmutableList of TypeTokens representing the exception types
2219 Wraps a collection of Callable tasks into an immutable list, ensuring proper exception handling. @param tasks collection of Callable tasks to be wrapped
2220 Creates a sorted immutable list copy of the specified iterable. @param elements input iterable to sort and convert
2221 Creates a sorted immutable list from the given iterable. @param comparator comparator to order elements @param elements input iterable @return ImmutableList object or null if not found
2222 Creates an immutable sorted set from a specified iterator of elements and comparator. @param comparator ordering logic to apply to elements @param elements Iterator of elements to be added @return ImmutableSortedSet object representing the final set
2223 Creates an immutable map from a specified array of entries and size. @param n expected number of entries @param entryArray nullable object array to validate and store @param throwIfDuplicateKeys whether to throw on duplicate keys @return ImmutableMap instance with the provided key-value pairs or throws BucketOverflowException if necessary
2224 Retrieves the index of the ancestor domain matching the absent public suffix type. @return cached or calculated public suffix index
2225 Retrieves the index of the registry suffix. @return Index of the registry suffix, or cached value if initialized
2226 Creates an ImmutableSortedMap from a collection of key-value pairs. @param comparator comparison function for sorting elements; if null, uses natural ordering @param sameComparator true if all entries have the same comparator @param entries input iterable of map entries
2227 Creates a new TreeBasedTable with the same structure and data as the input table. @param table existing table to clone @return cloned TreeBasedTable object
2228 Creates a Bloom filter with specified parameters. @param funnel serialization funnel for elements @param expectedInsertions expected number of insertions (must be >= 0)
2229 Creates a collector for the greatest K elements based on the specified comparator. @param k number of greatest elements to collect @param comparator comparison logic for ordering elements @return Collector instance for collecting the greatest K elements
2230 Returns the least K elements from an iterable. @param iterable input iterable of elements to select @param k number of least elements to select (must be >= 0)
2231 Returns the greatest K elements from an iterator. @param iterator input iterator of elements to select @param k number of greatest elements to select (must be >= 0)
2232 Catches a specific type of exception and returns fallback result. @param exceptionType the type of exception to catch @param fallback the fallback function to call on exception @param executor the executor to use for asynchronous computation
2233 Waits uninterruptibly for service to stop and releases monitor. @param stoppedGuard condition indicating service has stopped
2234 Waits for all services to stop within the specified timeout. @param timeout maximum waiting duration @param unit TimeUnit object specifying the unit of time @throws TimeoutException if services do not stop within the given time
2235 Wraps this CharMatcher instance with its internal precomputation. @return Precomputed CharMatcher instance
2236 Computes the hash of a File object using the specified hash function. @param file input File object @param hashFunction hash function instance @return computed hash value
2237 Moves a file from one location to another. @param from source File object @param to destination File object @throws IOException if an I/O error occurs during move or deletion process
2238 Reads lines from a resource URL and returns them as a list. @param url the URL of the resource @param charset target character set @return list of strings, one per line in the resource
2239 Maps a file to a MappedByteBuffer using READ_ONLY mode. @param file File object
2240 Returns an exiting executor service with a configured shutdown hook. @param executor underlying thread pool executor @param terminationTimeout timeout for shutdown in specified time unit @param timeUnit unit of time for shutdown timeout
2241 Configures and returns a scheduled executor service with immediate shutdown hook. @param executor ScheduledThreadPoolExecutor to be configured @param terminationTimeout timeout for shutdown in specified time unit @param timeUnit unit of time for shutdown timeout
2242 Adds a delayed shutdown hook to the given executor service with specified timeout. @param service executor service to be shut down @param terminationTimeout time interval for shutdown (converted from Duration)
2243 Reclaims a cache key by updating the access queue and table. @param entry ReferenceEntry to be removed @param hash hash value of the key @return true if key was successfully reclaimed, false otherwise
2244 Reclaims a cached value by key and hash, updating the access queue. @param key unique key identifier @param hash cache entry hash @param valueReference reference to the value to be removed @return true if the value was successfully reclaimed, false otherwise
2245 Waits uninterruptibly for services to become healthy.
2246 Waits for services managed by this ServiceManager to become healthy within the specified timeout. @param timeout maximum time to wait in the given unit @param unit TimeUnit object specifying the unit of time @throws TimeoutException if services do not become healthy within the timeout
2247 Returns a map of service startup times. @return Map with services as keys and their respective startup times in milliseconds as values
2248 Retrieves annotations of specified type from declared parameters. @param annotationType target annotation class @return array of annotations or empty array if none found
2249 Creates a new sorted set from the given collection using its natural ordering. @param elements input collection to copy
2250 Creates a synchronized navigable map from an existing one. @param navigableMap the underlying navigable map
2251 Converts a File to a string using the specified character set. @param file input File object @param charset target character set @return string representation of the file content or null if not found
2252 Converts URL to string using specified character set. @param url the URL of the resource @param charset target character set
2253 Creates an empty compact linked hash map with default size and order preference.
2254 Creates a TreeMultimap instance from an existing multimap. @param multimap pre-existing multimap to populate the TreeMultimap
2255 Creates a reentrant lock with cycle detection. @param lockName unique identifier of the lock @param fair true for fair locking, false otherwise
2256 Creates a reentrant read-write lock with cycle detection, or a standard reentrant read-write lock if policy is disabled. @param lockName unique identifier of the lock @param fair boolean indicating whether to use a fair locking mechanism
2257 Creates a map of LockGraphNode instances for the given enum class. @param clazz Enum class to associate with the map @return Unmodifiable Map of LockGraphNode instances or null if enum is empty
2258 Validates an individual part of a domain name. @param part the domain part to validate @param isFinalPart whether this is the final part in the domain
2259 Coerces an InetAddress to a coerced IPv4 address and then reads it as an integer. @param ip InetAddress object to coerce
2260 Checks if the underlying collection contains a specified element. @param object the object to find in the collection
2261 Removes the first occurrence of the specified element from this collection. @param object element to be removed @return true if element was found and removed, false otherwise
2262 Removes all elements from the underlying collection. @param collection collection of elements to remove @return true if any elements were removed, false otherwise
2263 Delegates retainAll operation to underlying iterator. @param collection target collection @return true if any elements were removed, false otherwise
2264 Clears the underlying iterator. @param iterator Iterator object to be cleared
2265 Checks if underlying collection is empty. @return true if empty, false otherwise
2266 Returns the size of the collection and creates an array of that size. Delegates array population to underlying collection's {@link #toArray(Object[]) toArray} method.
2267 Schedules a Runnable with specified delay in nanoseconds. @param command asynchronous operation to be executed @param delay execution delay in nanoseconds
2268 Retrieves all subscribers associated with the given listener object. @param listener Object to invoke subscriber methods on @return Multimap of event types to corresponding Subscriber instances
2269 Creates an induced subgraph with specified nodes from the given network. @param network original graph @param nodes subset of nodes to include in the subgraph @return MutableNetwork object representing the induced subgraph
2270 Creates a deep copy of the given Network instance. @param network the original network to copy @return a new MutableNetwork object with identical structure and data
2271 Creates a mutable graph instance based on the configured settings.
2272 Creates an induced subgraph from the given graph and nodes. @param graph the original graph @param nodes a collection of node IDs to include in the subgraph @return MutableValueGraph object representing the induced subgraph
2273 Creates a deep copy of the given ValueGraph. @param graph the original graph to copy @return MutableValueGraph instance with identical structure and data
2274 Adds all immutable entries from a given Map instance. @param map the map containing key-value pairs to be added
2275 Adds all immutable entries from a given Map instance. @param map the map containing key-value pairs to be added
2276 Filters a filtered map with an additional entry predicate. @param map the original filtered map @param entryPredicate condition for entries to be included in the map
2277 Filters a filtered map by combining the existing filter with a new predicate. @param map the original filtered map @param entryPredicate condition for additional entries to be included in the map
2278 Filters keys from a map based on the provided predicate. @param unfiltered the original map to filter @param keyPredicate condition for keys to be included in the map @return filtered Map with updated keys
2279 Filters entries from a map based on the given predicate. @param unfiltered original map to filter @param entryPredicate condition for entries to be included in the filtered map
2280 Converts a stream into an immutable sorted map. @param comparator Comparator for sorting keys @param keyFunction Function to extract key from each input element @param valueFunction Function to extract value from each input element
2281 Creates a collector to accumulate elements into an immutable EnumMap. @param keyFunction function to extract the enum key from each element @param valueFunction function to extract the map value from each element
2282 Creates an immutable enum map collector from a stream of data. @param keyFunction function to extract the enum key @param valueFunction function to extract the enum value @param mergeFunction binary operator to combine values in case of duplicates
2283 Computes type mappings for a given context type. @param contextType the type to analyze @return an immutable map of type mappings
2284 Concatenates multiple byte streams into one by creating an immutable list. @param sources iterable of ByteSources to concatenate
2285 Concatenates multiple character sources into one. @param sources iterable of sources to be concatenated
2286 Creates an ImmutableRangeSet from the given iterable of non-overlapping ranges. @param ranges iterable of non-empty ranges to add
2287 Copies an immutable sorted multiset from the given iterable. @param comparator comparison function for sorting elements @param elements Iterable of elements to add @return ImmutableSortedMultiset object representing the copied multiset
2288 Creates a copy of the immutable sorted multiset from a given SortedMultiset. @param sortedMultiset original multiset to copy
2289 Converts this immutable collection to a list. @return IList of elements or null if empty
2290 Creates a collector for an immutable sorted set. @param comparator Comparator to use when sorting the set
2291 Creates an immutable sorted set from a specified iterator of elements using the default sort order. @param elements Iterator of elements to be added
2292 Builds the ImmutableBiMap based on accumulated entries. @return ImmutableBiMap object or throws exception if invalid
2293 Returns a view of the sorted map from the beginning up to but not including the specified key (if inclusive is false). @param toKey key to stop at @param inclusive whether to include the key itself (true) or its predecessor (false)
2294 Returns a sublist view of the sorted map starting from the given key. @param fromKey key to start from @param inclusive whether to include the exact match
2295 Checks if the domain has no public suffix. @return true if no public suffix found, false otherwise
2296 Checks if domain has a public suffix. @return true if public suffix exists, false otherwise
2297 Checks if the domain is under a public suffix. @return true if the domain is under a public suffix, false otherwise
2298 Checks if domain is top-level private.
2299 Checks if the domain name has a registry suffix. @return true if at index 0, false otherwise
2300 Checks if domain name has registry suffix. @return true if domain has registry suffix, false otherwise
2301 Checks if domain name is under a registered suffix. @return true if under registry suffix, false otherwise
2302 Checks if top domain is under registry suffix. @return true if top domain is under registry suffix, false otherwise
2303 Creates a new ImmutableSortedMap instance from an iterable of key-value pairs. @param entries input iterable of map entries @param comparator comparison function for sorting elements; if null, uses natural ordering
2304 Creates an immutable sorted map copy of the given sorted map. @param map input sorted map
2305 Creates an immutable set instance with the same elements, ensuring no modification.
2306 Returns a set of raw types associated with the current type token. @return Set of Class objects representing raw types
2307 Removes the element at a specified index from the priority queue. @param index position of the element within the queue @return MoveDesc object describing the change or null if removed
2308 Computes the square root of a BigInteger with specified rounding mode. @param x input BigInteger value @param mode rounding mode (e.g. UNNECESSARY, FLOOR) @return square root value or rounded value based on mode
2309 Creates an immutable set by copying elements from the given iterator. @param elements Iterator of elements to be copied
2310 Scans a directory and its contents, recursively processing files and subdirectories. @param directory the File object representing the directory to scan @param packagePrefix the prefix for resource names in this directory @param currentPath the Set of directories currently being processed @param builder the ImmutableSet.Builder for ResourceInfo instances
2311 Retrieves the classpath from a JAR file's manifest. @param jarFile JAR file containing the manifest @param manifest Manifest object to parse for classpath attribute @return ImmutableSet of File objects representing classpath entries or an empty set if no valid entries are found
2312 Retrieves the raw type from the given runtime type, considering the first bound for wildcards or type variables. @return a Class object representing the raw type, with its upper bound being |T|
2313 Returns the greatest K elements from an iterable. @param iterable input iterable of elements to select @param k number of greatest elements to select (must be >= 0)
2314 Waits for all services to stop within the specified time duration. @param timeout maximum service stop time @throws TimeoutException if services do not stop within given time
2315 Returns an exiting executor service with a configured shutdown hook. @param executor underlying thread pool executor
2316 Returns an exiting executor service with a configured shutdown hook. @param executor underlying thread pool executor @param terminationTimeout timeout for shutdown in nanoseconds
2317 Creates an exiting scheduled executor service with immediate shutdown hook. @param executor ScheduledThreadPoolExecutor to be configured
2318 Configures and returns a scheduled executor service with immediate shutdown hook. @param executor ScheduledThreadPoolExecutor to be configured @param terminationTimeout time interval for shutdown in nanoseconds
2319 Evicts cache entries to maintain segment weight within threshold. @param newest newest entry to consider for eviction
2320 Waits for services managed by this ServiceManager to become healthy within a given Duration. @param timeout maximum time to wait in the specified duration
2321 Returns a map of service startup times in milliseconds. @return Map with services as keys and their respective startup times in milliseconds as values
2322 Retrieves annotations of specified type from declared parameters. @param annotationType target annotation class @return array of annotations or empty array if none found
2323 Creates a reentrant lock with cycle detection. @param lockName unique identifier of the lock
2324 Creates a reentrant read-write lock with cycle detection. @param lockName unique identifier of the lock
2325 Validates the syntax of a domain name based on its individual parts. @param parts list of domain parts to validate
2326 Registers a listener object and associates its annotated methods with specific event types. @param listener Object to invoke subscriber methods on
2327 Unregisters event subscribers associated with the given listener object. @param listener Object to stop invoking subscriber methods on
2328 Creates an immutable network builder instance.
2329 Creates an induced subgraph from the given graph and node set. @param graph original graph @param nodes subset of graph nodes to include in the subgraph @return MutableGraph instance representing the induced subgraph
2330 Creates a deep copy of the given graph. @param graph the original graph to copy @return a new MutableGraph instance with the same structure and nodes as the input graph
2331 Returns an immutable value graph builder. @return Builder instance with updated generics
2332 Filters entries in a filtered map based on an additional predicate. @param map original filtered bi-map @param entryPredicate condition for entries to be included
2333 Filters a navigable map based on the provided predicate. @param unfiltered the original map to filter @param entryPredicate condition for entries to be included in the map
2334 Filters entries in a sorted map based on the provided predicate. @param unfiltered original sorted map @param entryPredicate condition for entries to be included @return filtered sorted map or new FilteredEntrySortedMap instance if necessary
2335 Filters map entries based on the given value predicate. @param unfiltered original map to filter @param valuePredicate condition for values to be included in the filtered map
2336 Creates an immutable map from a stream of data using the provided key and value functions. @param keyFunction function to extract keys from elements @param valueFunction function to extract values from elements @param mergeFunction function to combine conflicting values
2337 Converts a stream of data to an immutable range map. @param keyFunction maps each element to its corresponding key @param valueFunction maps each element to its corresponding value
2338 Creates a sorted multiset from the given iterable using natural ordering. @param elements Iterable of elements to add
2339 Finalizes and returns the built immutable sorted multiset. @return ImmutableSortedMultiset object
2340 Creates a WildcardType representing a subtype of the given type. @param upperBound the upper bound of the subtype
2341 Creates a WildcardType with the given lower bound and upper bound fixed to Object. @param lowerBound lower bound of the wildcard type
2342 Generates all permutations of the input iterable, sorted by the provided comparator. @param elements Input collection to permute @param comparator Comparator for sorting element order @return A collection of permutated lists or null if not found
2343 Converts the iterable to a sorted list using the provided comparator. @param comparator nullable comparator for sorting @return ImmutableList object or null if not found
2344 Creates an immutable list copy from a specified collection of elements. @param elements nullable collection to validate and store
2345 Builds the ImmutableBiMap based on accumulated entries. @return ImmutableBiMap object
2346 Builds an immutable map with duplicate key checks enabled. @throws Exception if duplicate keys are detected
2347 Builds an immutable map keeping last entry in case of duplicate keys. @return ImmutableMap instance
2348 Returns a view of the sorted map from the beginning up to but not including the specified key. @param toKey key to stop at
2349 Returns a view of the sorted map within the specified range. @param fromKey key to start at @param fromInclusive whether to include the exact match (true) or its predecessor (false) @param toKey key to stop at @param toInclusive whether to include the key itself (true) or its successor (false)
2350 Returns a view of the sorted map starting from the given key. @param fromKey key to start from
2351 Creates a new ImmutableSortedMap instance from an iterable of key-value pairs. @param entries input iterable of map entries
2352 Creates a copy of the given map as an ImmutableSortedMap. @param map input map to be copied
2353 Creates a copy of the given sorted map as an ImmutableSortedMap. @param map input map to be copied @param comparator comparison function for sorting elements; if null, uses natural ordering
2354 Computes the Cartesian product of multiple sets. @param sets collection of sets to create the Cartesian product
2355 Removes the exact object from the priority queue. @param target Object to be removed
2356 Retrieves and removes the element at a specified index. @param index position of the element within the queue @return element value or null if removed
2357 Creates an immutable set by copying elements from the given iterable. @param elements Iterable of elements to be copied
2358 Creates an Invokable for the given constructor, ensuring it matches the raw type. @param constructor Constructor object to create Invokable from @return Invokable object representing the constructor
2359 Checks if the given supertype is a subtype of the current type. @param supertype Type to check against bounds @return true if supertype is a subtype, false otherwise
2360 Creates an Invokable for the given Method, checking if it's declared by this TypeToken. @param method the Method to create Invokable for
2361 Tries to expire cache entries that have reached their expiration time. @param now current timestamp in nanoseconds
2362 Creates a WithExplicitOrdering instance with explicit ordering policy. @param enumClass Enum class to associate with the lock graph nodes @param policy concurrency policy to enforce
2363 Registers an event listener object with this EventBus. @param object Object to invoke subscriber methods on
2364 Unregisters event listeners associated with the given object. @param object Object to stop invoking subscriber methods on
2365 Creates an immutable graph builder, casting to the specified type.
2366 Filters entries in a bi-map based on an additional predicate. @param unfiltered original bi-map to filter @param entryPredicate condition for entries to be included @return FilteredEntryBiMap instance or the original if already filtered
2367 Filters a navigable map based on a key predicate. @param unfiltered the original map to filter @param keyPredicate condition for keys to be included in the map
2368 Filters a navigable map based on the provided value predicate. @param unfiltered original map to filter @param valuePredicate condition for values to be included in the map
2369 Filters keys in a sorted map based on the provided predicate. @param unfiltered original sorted map @param keyPredicate condition for keys to be included @return filtered sorted map
2370 Filters map entries based on the given value predicate. @param unfiltered original sorted map @param valuePredicate condition for entry values to be included @return filtered sorted map or new FilteredEntrySortedMap instance if necessary
2371 Creates a new immutable sorted multiset from an iterator of elements. @param comparator comparison function for multiset elements or null for natural ordering @param elements Iterator of elements to be added @return ImmutableSortedMultiset object containing the copied elements
2372 Retrieves location information from the given class loader. @param classloader ClassLoader instance to fetch entries from @return ImmutableSet of LocationInfo objects or an empty set if none found
2373 Retrieves the component type of a given Type array, handling various type representations. @param bounds input Type array to analyze @return the component Type or null if not found
2374 Creates a new array type with the specified component type. @param componentType Type of elements in the array
2375 Generates all permutations of the input iterable in natural order. @param elements Input collection to permute
2376 Creates a new ImmutableMultiset from an iterable of elements. If the input is already an ImmutableMultiset, it will be returned directly if not a partial view. Otherwise, a LinkedHashMultiset will be created and copied into an ImmutableMultiset. @param elements Iterable of elements to add
2377 Creates an immutable multiset from the given iterator of elements. @param elements Iterator containing elements to be added to the multiset
2378 Creates an immutable multiset with elements ordered by highest count first. @param multiset Multiset to copy from
2379 Generates all permutations of a given collection. @param elements input collection to generate permutations from
2380 Creates an immutable list by copying all elements from the provided iterable. @param elements Iterable of elements to be added
2381 Creates an immutable copy of the given RangeSet. @param rangeSet input range set to copy
2382 Creates an immutable sorted set copy from a specified sorted set. @param sortedSet the input sorted set
2383 Reads all lines from the character source and returns them as an immutable list. @return List of strings, or null if not found
2384 Constructs an immutable map from the builder, returning a new instance if non-empty. @return ImmutableClassToInstanceMap object or empty instance if no entries
2385 Creates an ImmutableMultimap instance from a collection of key-value mappings. @param mapEntries Collection of Map.Entry objects containing keys and collections of values @param valueComparator Optional comparator to sort values in each list; null for unsorted lists @return ImmutableListMultimap object or empty if input is empty
2386 Builds an immutable map with duplicate key checks enabled.
2387 Creates an ImmutableSetMultimap instance from a collection of map entries. @param mapEntries collection of key-value pairs where each value is a collection @param valueComparator optional comparator for sorting values; null for unordered
2388 Converts a Properties object to an immutable map. @param properties input Properties object @return ImmutableMap<String, String> or throws Exception if duplicate keys are detected
2389 Creates an index map from a collection of elements. @param list the input collection to be indexed @return an ImmutableMap with element as key and index as value
2390 Constructs an immutable map with duplicate key checks enabled. @throws Exception if duplicate keys are detected
2391 Constructs a TypeTable with the given mappings of type variables to their types. @param mappings immutable mapping of type variables to their corresponding types
2392 Converts an iterator of keys into a map with values generated by the given function. @param keys iterator of unique keys @param valueFunction function to compute associated value for each key @return ImmutableMap instance or throws NPE if input is null
2393 Returns a view of the sorted map within the specified range. @param fromKey key to start at @param toKey key to stop at
2394 Creates an immutable sorted map from a stream of data. @param comparator key comparison function @param keyFunction extracts the key for each element @param valueFunction extracts the value for each element @param mergeFunction merges values in case of duplicate keys
2395 Retrieves and removes the maximum element from the queue. @return element value or null if empty
2396 Removes and returns the maximum element from the queue. @return element value or null if removed
2397 Converts this iterable to an immutable set. @return an ImmutableSet of elements, or null if not set
2398 Checks if the given supertype is a subtype of this token's type. @param type Type to check against bounds
2399 Checks if a given supertype is a subtype of this token. @param type Type to check against bounds @return true if supertype is a subtype, false otherwise
2400 Checks if another TypeToken represents a subtype of this token. @param type the other TypeToken to check @return true if supertype is a subtype, false otherwise
2401 Drains reference queues for key and value references. @GuardedBy("this") ensures thread safety
2402 Filters a bi-map by keys using the specified predicate. @param unfiltered original bi-map to filter @param keyPredicate condition for keys to be included @return FilteredKeyBiMap instance or the original if already filtered
2403 Filters a bi-map by keeping only entries with values satisfying the given predicate. @param unfiltered original bi-map to filter @param valuePredicate condition for entry values to be included @return FilteredEntryBiMap instance or the original if already filtered
2404 Creates a new immutable sorted multiset from an iterator of elements with natural ordering. @param elements Iterator of elements to be added
2405 Creates a TypeToken instance for the given class type. @param cls Class<T> to create token for
2406 Converts this iterable to an ImmutableMultiset. @return ImmutableMultiset containing all elements
2407 Builds and returns an immutable multiset from the accumulated contents. @return ImmutableMultiset object containing all added elements
2408 Computes the Cartesian product of input lists. @param lists collection of input lists
2409 Parses a cache builder specification string into a CacheBuilderSpec instance. @param cacheBuilderSpecification configuration as a string
2410 Converts this iterable collection to an immutable list. @return ImmutableList of elements or null if not set
2411 Lists files in a directory. @param dir Path to the directory @return Immutable list of file paths or empty if not found
2412 Constructs an InternetDomainName object from a given string representation. @param name the domain name to be created
2413 Aggregates a collection of futures into a single future containing a list of results. @param futures iterable of ListenableFutures to be aggregated @return ListenableFuture containing the aggregated result as a list of V instances
2414 Combines all provided futures to completion. @param futures iterable of listenable futures
2415 Assembles a FutureCombiner from the provided iterable of successful futures. @param futures collection of completed ListenableFutures to combine
2416 Combines a collection of futures into a single future with the aggregated results. @param futures iterable of ListenableFutures to be combined
2417 Converts an iterable of ListenableFutures to a gwt-compatible array. @param futures Iterable of ListenableFutures
2418 Creates an immutable range set from a collection of ranges. @param ranges iterable of ranges to combine
2419 Computes the intersection of this set with another. @param other input RangeSet to intersect with @return new ImmutableRangeSet containing overlapping ranges
2420 Computes the difference between this set and another range set. @param other the input RangeSet to remove ranges from
2421 Converts a stream of data to an immutable bi-map. @param keyFunction function mapping each element to its key @param valueFunction function mapping each element to its value
2422 Creates a copy of the given immutable map, or constructs a new one from its entries. @param map source map containing class-type instances
2423 Creates a copy of the given Multimap, preserving its key-value associations. @param multimap original Multimap instance @return ImmutableListMultimap object or empty if input is empty
2424 Builds an ImmutableMultimap instance from the accumulated entries. @return ImmutableMultimap object or empty if input is empty
2425 Merges a specified range of values into the map, remapping existing entries and filling gaps with a specified value. @param range the range to merge @param value the value to use for unmapped ranges, or null for no change @param remappingFunction function to apply to each entry's value when merging
2426 Builds an ImmutableSetMultimap instance based on the constructed builder state. @return ImmutableSetMultimap object or default instance if no entries exist
2427 Creates an immutable map with unique keys from the given iterator of values. @param values iterator over values to be indexed @param keyFunction function to extract unique keys from values
2428 Generates all combinations of a given set's elements with a specified size. @param set the input set to generate combinations from @param size the desired combination size @return an immutable set containing all possible combinations
2429 Creates an immutable copy of the provided graph. @param graph original graph to copy @return ImmutableGraph object or null if graph is already immutable
2430 Creates a new TypeResolver with a filtered type table based on the given type mappings. @param mappings mapping of type variables to their corresponding types
2431 Converts an iterable of unique keys into a map with values generated by the given function. @param keys iterator of unique keys @param valueFunction function to compute associated value for each key
2432 Retrieves and removes the minimum element from the queue (equiv to poll()). @return Minimum element value or null if empty
2433 Offers an element to the queue while maintaining its ordering properties. @param element the element to be added @return true if the element was successfully added (i.e., the queue is not full)
2434 Retrieves all ClassInfo objects from classpath resources. @return an ImmutableSet of ClassInfo objects
2435 Retrieves top-level classes from the resources. @return ImmutableSet of ClassInfo objects
2436 Performs breadth-first traversal starting from the given nodes. @param startNodes Iterable of initial nodes for traversal
2437 Performs a depth-first traversal of the graph, starting from the given nodes. @param startNodes Iterable of nodes to initiate the traversal
2438 Performs a depth-first post-order traversal of the graph starting from the given nodes. @param startNodes Iterable of nodes to initiate the traversal
2439 Scans resources from the specified files and adds them to an immutable set. @param scannedFiles Set of previously scanned File objects @return ImmutableSet of ResourceInfo objects representing the scanned resources
2440 Returns a specialized invokable with the specified return type if it matches. @param returnType TypeToken representing the desired return type
2441 Tries to drain reference queues, acquiring lock if possible.
2442 Resolves the given Type object by delegating to specific resolvers based on its type. @param type Type object to be resolved
2443 Checks if the given runtime type is a subtype of any bound type in the formal type. @param formalType Type to evaluate against @param declaration TypeVariable used for evaluation @return true if runtime type is a subtype, false otherwise
2444 Canonicalizes a type argument by evaluating wildcards or calling the respective method. @param declaration TypeVariable to evaluate against @param typeArg Type to process @return canonicalized Type or null if not found
2445 Creates CacheBuilder instance from a cache builder specification string. @param spec configuration as a string
2446 Disables caching by initializing the cache builder with a maximum size of 0.
2447 Creates an InternetDomainName object from a given string representation. @param domain the input domain name to be created
2448 Creates an immutable list of futures in completion order. @param futures Iterable of ListenableFutures to be ordered @return ImmutableList of ListenableFutures representing the ordered list
2449 Combines this range set with another, returning a new set containing all ranges. @param other the RangeSet to combine with
2450 Creates an immutable multimap copy from the given Multimap. @param multimap original Multimap instance @return ImmutableMultimap object or empty if input is empty
2451 Builds an ImmutableMultimap instance from accumulated entries. @return ImmutableListMultimap object or empty if input is empty
2452 Creates a collector for immutable maps from streams of data. @param keyFunction function to extract keys @param valueFunction function to extract values
2453 Creates an ImmutableSetMultimap instance with a single key-value pair. @param k1 unique key @param v1 associated value
2454 Creates an ImmutableSetMultimap instance with two key-value pairs. @param k1 unique key @param v1 associated value @param k2 unique key @param v2 associated value @return ImmutableSetMultimap object or default instance if no entries exist
2455 Creates an ImmutableSetMultimap instance with the specified key-value pairs. @param k1 unique key @param v1 associated value @param k2 unique key @param v2 associated value @param k3 unique key @param v3 associated value
2456 Creates an ImmutableSetMultimap instance from key-value pairs. @param k1 unique key for value v1 @param v1 associated value for key k1 @param k2 unique key for value v2 @param v2 associated value for key k2 @param k3 unique key for value v3 @param v3 associated value for key k3 @param k4 unique key for value v4 @param v4 associated value for key k4
2457 Creates an ImmutableSetMultimap instance with the specified key-value pairs. @param k1,k2,k3,k4,k5 unique keys @param v1,v2,v3,v4,v5 associated values
2458 Creates an ImmutableSetMultimap instance from the given iterable of key-value pairs. @param entries collection of Entries to copy into the multimap
2459 Creates an immutable set multimap from a given multimap. @param multimap original multimap to copy
2460 Creates an immutable map with unique keys from the given iterable of values. @param values iterator over values to be indexed @param keyFunction function to extract unique keys from values
2461 Creates an ArrayTable instance with specified row and column keys. @param rowKeys Iterable of unique row identifiers @param columnKeys Iterable of unique column identifiers
2462 Generates the power set of the given set. @param set input set (size must not exceed 30)
2463 Creates a RegularImmutableTable from ordered components. @param cellList immutable list of table cells @param rowSpace set of unique row identifiers @param columnSpace set of unique column identifiers
2464 Constructs and returns an immutable graph instance. @return ImmutableGraph object representing the built graph
2465 Creates an immutable copy of the provided network. @param network source network to create a copy of
2466 Creates an immutable copy of the provided graph. @param graph input ValueGraph to be copied
2467 Creates a TypeResolver instance with type mappings computed from the given context type. @param contextType the type to analyze
2468 Resolves type mappings for a given context type, capturing its invariant form. @param contextType the type to analyze @return a TypeResolver instance with computed type mappings
2469 Resolves type variables for the given formal and actual types. @param formal the formal type @param actual the actual type to resolve against
2470 Converts the iterable delegate into a map with values generated by the given function. @param valueFunction function to compute associated value for each key
2471 Creates a populated MinMaxPriorityQueue from provided initial contents. @param initialContents iterable of elements to initialize the queue with
2472 Adds an element to the queue while maintaining ordering properties.
2473 Retrieves top-level classes from the resources for a given package name. @param packageName unique identifier of the package @return ImmutableSet of ClassInfo objects or empty set if not found
2474 Retrieves top-level classes from the resources that match a given package name. @param packageName unique package identifier @return ImmutableSet of ClassInfo objects matching the package prefix
2475 Performs breadth-first traversal starting from the given node. @param startNode initial node for traversal
2476 Performs a depth-first traversal of the graph, starting from the given node. @param startNode the initial node for the traversal
2477 Performs a depth-first post-order traversal of the graph starting from the given node. @param startNode The initial node for the traversal
2478 Scans resources from JAR files and adds them to an immutable set. @return ImmutableSet of ResourceInfo objects representing the scanned resources
2479 Creates a ClassPath instance from a given ClassLoader. @param classloader ClassLoader instance to fetch entries from @return ClassPath object or throws IOException if an error occurs
2480 Returns a specialized invokable with the specified return type if it matches. @param returnType Class representing the desired return type
2481 Retrieves the live value associated with a given cache entry. @param entry ReferenceEntry object to retrieve value for @param now current timestamp in nanoseconds @return live value if present, null otherwise
2482 Performs pre-write cleanup of cache entries. Calls runLockedCleanup to drain reference queues and expire expired entries. @param now current timestamp in nanoseconds
2483 Resolves a given TypeVariable by delegating to specific resolvers based on its dependencies. @param var non-null type variable @param forDependants TypeTable object containing dependencies
2484 Retrieves the generic return type of this constructor.
2485 Resolves runtime type using a TypeResolver and creates a SimpleTypeToken. @return Object representing the resolved type
2486 Creates a traverser for file trees. @return Traverser instance for navigating file structures
2487 Creates a HostSpecifier from a valid string specifier. @param specifier input string in the format "host[:port]" or IP address
2488 Constructs an InternetDomainName object representing the specified ancestor domain. @param levels number of levels to traverse up the domain hierarchy
2489 Creates a child domain by appending given parts to the current domain. @param leftParts additional domain parts to be appended
2490 Validates an internet domain name by attempting to create a valid InternetDomainName object. @param name the input domain name to be validated @return true if the domain is valid, false otherwise
2491 Creates a collector for accumulating elements into an immutable list-based multimap. @param keyFunction function to extract the key from each element @param valuesFunction function to generate a stream of values for each element
2492 Creates an ImmutableMultimap instance with a single key-value pair. @param k1 unique key @param v1 associated value
2493 Creates an ImmutableListMultimap instance with a key-value pair. @param k1 unique key @param v1 associated value @param k2 unique key @param v2 associated value
2494 Creates an ImmutableListMultimap instance with the specified key-value pairs. @param k1 first unique key @param v1 associated value for k1 @param k2 second unique key @param v2 associated value for k2 @param k3 third unique key @param v3 associated value for k3
2495 Creates an ImmutableListMultimap instance with four key-value pairs. @param k1 unique key @param v1 associated value @param k2 unique key @param v2 associated value @param k3 unique key @param v3 associated value @param k4 unique key @param v4 associated value
2496 Creates an ImmutableListMultimap instance with the specified key-value pairs. @param k1 unique key @param v1 associated value @param k2 unique key @param v2 associated value @param k3 unique key @param v3 associated value @param k4 unique key @param v4 associated value @param k5 unique key @param v5 associated value
2497 Creates a copy of the provided multimap from key-value pairs. @param entries iterable collection of Entries to replicate
2498 Builds an ImmutableListMultimap instance from an iterator of values and a key-function. @param values iterator of values to index @param keyFunction function mapping each value to its corresponding key @return ImmutableListMultimap object or empty if input is empty
2499 Adds or updates media type parameters. @param attribute parameter name @param values associated parameter values @return the updated MediaType object
2500 Converts a stream of data into an immutable multiset map. @param keyFunction function to extract the key from each element @param valueFunction function to extract the value from each element
2501 Returns an inverted multimap instance. @return a new ImmutableSetMultimap with keys and values swapped
2502 Marks the service manager as ready, checking for potential asynchronous transitions. @throws IllegalArgumentException if services are transitioning asynchronously
2503 Returns a multimap of services grouped by state. @return ImmutableSetMultimap containing service-state mappings
2504 Creates an immutable map with unique keys from the iterable delegate using the given key function. @param keyFunction function to extract unique keys from values @return ImmutableMap instance or null if delegate is not set
2505 Creates an ArrayTable instance from a given Table, potentially reusing an existing ArrayTable if the input matches. @param table the source Table to create ArrayTable from
2506 Creates an immutable network copy from the constructed mutable network. @return ImmutableNetwork instance
2507 Creates an immutable copy of the constructed graph. @return ImmutableValueGraph object or null if not found
2508 Constructs a TypeToken instance from the given class, resolving its type if necessary. @param declaringClass Class to capture and resolve type for
2509 Creates an empty MinMaxPriorityQueue with default parameters.
2510 Creates a populated MinMaxPriorityQueue from provided initial contents. @param initialContents iterable of elements to initialize the queue with
2511 Fetches all nodes reachable from the given node in the graph. @param graph the graph to traverse @param node the starting node for traversal @return an immutable set of reachable nodes or empty set if not found
2512 Retrieves cache entry for given key. @param key object to search for
2513 Checks if a cache entry has a live value. @param entry ReferenceEntry object to check @param now current timestamp in nanoseconds
2514 Inserts a new LoadingValueReference into the cache segment. @param key unique cache identifier @param hash cached value's hash code @param checkTime whether to perform refresh checks @return LoadedValueReference instance or null if existing entry found with pending load
2515 Triggers periodic cache cleanup after a read operation, based on the read count.
2516 Resolves a given TypeVariable by delegating to specific resolvers based on its dependencies. @param var non-null type variable @param forDependants TypeTable object containing dependencies
2517 Executes a combiner function on aggregated futures. @param combiningCallable callable task to combine futures' results @param executor thread pool for execution @return ClosingFuture containing combined result or null if all must succeed and any fails
2518 Calls the async combiner asynchronously using the specified executor. @param combiningCallable asynchronous callable to be executed @param executor thread pool for executing the combiner @return ClosingFuture object representing the result of the execution
2519 Constructs a HostSpecifier from an input string. @param specifier input string in the format "host[:port]" or IP address
2520 Validates a host specifier string. @param specifier input string in the format "host[:port]" or IP address
2521 Returns the public suffix of this domain name. @return InternetDomainName object representing the public suffix, or null if not found
2522 Returns top private domain or throws exception if not under a public suffix. @return InternetDomainName object representing top private domain
2523 Retrieves internet domain name's registry suffix. @return InternetDomainName object if domain has registry suffix, or null otherwise
2524 Returns the top domain under the current registry suffix. @return InternetDomainName object representing the top domain
2525 Retrieves and returns the immediate parent domain. @return InternetDomainName object representing the parent domain
2526 Converts a stream of data to an immutable multimap using the provided key and value functions. @param keyFunction function to extract the key from each element @param valueFunction function to extract the value from each element
2527 Creates an ImmutableMultimap instance with a single key-value pair. @param k1 unique key @param v1 associated value
2528 Creates an ImmutableMultimap instance with two key-value pairs. @param k1 unique key @param v1 associated value @param k2 unique key @param v2 associated value
2529 Creates an ImmutableMultimap with the specified key-value pairs. @param k1 first unique key @param v1 associated value for k1 @param k2 second unique key @param v2 associated value for k2 @param k3 third unique key @param v3 associated value for k3
2530 Creates an ImmutableMultimap instance with four key-value pairs. @param k1 unique first key @param v1 associated value for k1 @param k2 unique second key @param v2 associated value for k2 @param k3 unique third key @param v3 associated value for k3 @param k4 unique fourth key @param v4 associated value for k4
2531 Creates an ImmutableMultimap instance with the specified key-value pairs. @param k1 unique key @param v1 associated value @param k2 unique key @param v2 associated value @param k3 unique key @param v3 associated value @param k4 unique key @param v4 associated value @param k5 unique key @param v5 associated value
2532 Creates a copy of the provided multimap from key-value pairs. @param entries iterable collection of Entries to replicate
2533 Returns the inverted multimap. @return Inverted ImmutableListMultimap object or null if not found
2534 Builds an ImmutableListMultimap instance from a collection of values and a key-function. @param values iterable of values to index @param keyFunction function mapping each value to its corresponding key
2535 Adds or updates a media type parameter. @param attribute parameter name @param value associated parameter value
2536 Adds media type parameters to an existing MediaType object. @param parameters associated media parameters
2537 Creates a new MediaType object with the specified type and subtype. @param type media type (e.g., "text") @param subtype media subtype (e.g., "html")
2538 Parses a media type string into a MediaType object. @param input the media type string to parse @return a MediaType object or one of the constants if it's a known type
2539 Initializes a ServiceManager instance with the provided iterable of services. If no services are provided, substitutes a placeholder service to avoid manager misbehavior. @param services Iterable of services to manage
2540 Creates a collector that accumulates elements into an immutable set multimap. @param keyFunction function to extract the key from each element @param valuesFunction function to generate a stream of values for each element
2541 Resolves the given Type object using its invariant form. @param type Type object to be resolved @return TypeToken<?> or null if not resolved
2542 Creates an empty MinMaxPriorityQueue with natural ordering.
2543 Refreshes cached value by loader for given key and hash. @param key unique cache identifier @param hash cached value's hash code @param loader CacheLoader to use for loading values @param checkTime whether to perform refresh checks @return LoadedValueReference instance or null if existing entry found with pending load
2544 Retrieves a cached value and records statistics. @param key unique identifier @param hash cached value's hash code @param loadingValueReference reference to the loading value @param newValue new value to store (may be null) @return loaded value or throws ExecutionException if not found
2545 Advances to the next valid cache entry. @param entry ReferenceEntry object to check
2546 Checks if a given value is present in the cache. @param value The object to search for
2547 Indexes the underlying iterable delegate using a given function. @param keyFunction function mapping each value to its corresponding key
2548 Adds or updates the character set for this media type. @param charset character set to associate
2549 Returns this MediaType instance if it has no parameters; otherwise, creates a new MediaType object with the same type and subtype.
2550 Creates an application media type with the specified subtype. @param subtype application subtype (e.g., \"json\", \"xml\")
2551 Creates a new MediaType object representing an audio type. @param subtype media subtype (e.g., "mp3", "wav")
2552 Creates a font media type with the specified subtype. @param subtype font subtype (e.g., "woff", "woff2")
2553 Creates an image media type with specified subtype. @param subtype e.g., \"jpeg\", \"png\"
2554 Creates a new MediaType object with text type and specified subtype. @param subtype media subtype (e.g., \"html\")
2555 Creates a new MediaType object representing video media type. @param subtype video subtype (e.g., "mp4", "webm")
2556 Builds an ImmutableTable instance based on the provided cells and comparators. @return ImmutableTable object or throws exception if not constructed
2557 Retrieves the generic superclass type token. @return TypeToken object representing the superclass, or null if not found
2558 Retrieves a list of generic interfaces that are subtypes of T. @return ImmutableList of TypeToken objects representing the subtype relationships
2559 Resolves the supertype of this type token given a superclass. @param superclass Class object to check against @return TypeToken representation of the supertype
2560 Loads all cache values for the specified keys, using a provided loader to compute or load the values. @param keys iterable of unique keys @param loader CacheLoader instance used to load the values @return Map containing loaded values, or null if an exception occurs @throws ExecutionException on any execution-related errors
2561 Advances to the next valid cache entry in a chain. @return true if successful, false otherwise
2562 Constructs an immutable table instance. @return ImmutableTable object
2563 Advances to the next valid cache entry in a table. @return true if successful, false otherwise
2564 Retrieves the subtype from the given subclass. @param subclass Class<?> representing the subclass
2565 Creates an immutable table instance from the specified table. @param table existing Table object with keys and values
2566 Converts input elements into an immutable table instance. @param rowFunction maps each element to its corresponding row value @param columnFunction maps each element to its corresponding column value @param valueFunction maps each element to its corresponding table value
