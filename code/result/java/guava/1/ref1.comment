1 Specifies the ordering of the generated table's rows.
2 Specifies the ordering of the generated table's columns.
3 Returns an iterable over the merged contents of all given {@code iterables}. Equivalent entries will not be de-duplicated. <p>Callers must ensure that the source {@code iterables} are in non-descending order as this method does not sort its input. <p>For any equivalent elements across all {@code iterables}, it is undefined which element is returned first. @since 11.0
4 Returns the index in {@code iterator} of the first element that satisfies the provided {@code predicate}, or {@code -1} if the Iterator has no such elements. <p>More formally, returns the lowest index {@code i} such that {@code predicate.apply(Iterators.get(iterator, i))} returns {@code true}, or {@code -1} if there is no such index. <p>If -1 is returned, the iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. Otherwise, the iterator will be set to the element which satisfies the {@code predicate}. @since 2.0
5 Uses a {@link TreeSet} ordered by the specified comparator to store value collections. <p>Multimaps generated by the resulting builder will not be serializable if {@code comparator} is not serializable.
6 Uses an {@link EnumSet} to store value collections.
7 Returns an unmodifiable <b>view</b> of the union of two sets. The returned set contains all elements that are contained in either backing set. Iterating over the returned set iterates first over all the elements of {@code set1}, then over each element of {@code set2}, in order, that is not contained in {@code set1}. <p>Results are undefined if {@code set1} and {@code set2} are sets based on different equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.
8 Returns an unmodifiable <b>view</b> of the intersection of two sets. The returned set contains all elements that are contained by both backing sets. The iteration order of the returned set matches that of {@code set1}. <p>Results are undefined if {@code set1} and {@code set2} are sets based on different equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}. <p><b>Note:</b> The returned view performs slightly better when {@code set1} is the smaller of the two sets. If you have reason to believe one of your sets will generally be smaller than the other, pass it first. Unfortunately, since this method sets the generic type of the returned set based on the type of the first set passed, this could in rare cases force you to make a cast, for example: {@snippet : Set<Object> aFewBadObjects = ... Set<String> manyBadStrings = ... // impossible for a non-String to be in the intersection SuppressWarnings("unchecked") Set<String> badStrings = (Set) Sets.intersection( aFewBadObjects, manyBadStrings); } <p>This is unfortunate, but should come up only very rarely.
9 Returns an unmodifiable <b>view</b> of the difference of two sets. The returned set contains all elements that are contained by {@code set1} and not contained by {@code set2}. {@code set2} may also contain elements not present in {@code set1}; these are simply ignored. The iteration order of the returned set matches that of {@code set1}. <p>Results are undefined if {@code set1} and {@code set2} are sets based on different equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.
10 Returns an unmodifiable <b>view</b> of the symmetric difference of two sets. The returned set contains all elements that are contained in either {@code set1} or {@code set2} but not in both. The iteration order of the returned set is undefined. <p>Results are undefined if {@code set1} and {@code set2} are sets based on different equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}. @since 3.0
11 Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}. @param array the array to search for the sequence {@code target} @param target the array to search for as a sub-sequence of {@code array}
12 Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}. @param array the array to search for the sequence {@code target} @param target the array to search for as a sub-sequence of {@code array}
13 Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}. @param array the array to search for the sequence {@code target} @param target the array to search for as a sub-sequence of {@code array}
14 Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}. <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}. @param array the array to search for the sequence {@code target} @param target the array to search for as a sub-sequence of {@code array}
15 Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}. <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}. @param array the array to search for the sequence {@code target} @param target the array to search for as a sub-sequence of {@code array}
16 Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}. @param array the array to search for the sequence {@code target} @param target the array to search for as a sub-sequence of {@code array}
17 Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}. @param array the array to search for the sequence {@code target} @param target the array to search for as a sub-sequence of {@code array}
18 Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}. @param array the array to search for the sequence {@code target} @param target the array to search for as a sub-sequence of {@code array}
19 Creates a new {@linkplain Guard guard} for this monitor. @param isSatisfied the new guard's boolean condition (see {@link Guard#isSatisfied isSatisfied()}) @since 21.0 (but only since 33.4.0 in the Android flavor)
20 Returns the default value of {@code type} as defined by JLS --- {@code 0} for numbers, {@code false} for {@code boolean} and {@code '\0'} for {@code char}. For non-primitive types and {@code void}, {@code null} is returned.
21 Returns a joiner with the same behavior as this one, except automatically substituting {@code nullText} for any provided null elements.
22 Use {@link MoreObjects#toStringHelper(Object)} to create an instance.
23 Returns the value of each present instance from the supplied {@code optionals}, in order, skipping over occurrences of {@link Optional#absent}. Iterators are unmodifiable and are evaluated lazily. <p><b>Comparison to {@code java.util.Optional}:</b> this method has no equivalent in Java 8's {@code Optional} class; use {@code optionals.stream().filter(Optional::isPresent).map(Optional::get)} instead. <p><b>Java 9 users:</b> use {@code optionals.stream().flatMap(Optional::stream)} instead. @since 11.0 (generics widened in 13.0)
24 Splits {@code sequence} into string components and makes them available through an {@link Iterator}, which may be lazily evaluated. If you want an eagerly computed {@link List}, use {@link #splitToList(CharSequence)}. Java 8+ users may prefer {@link #splitToStream} instead. @param sequence the sequence of characters to split @return an iteration over the segments split from the parameter
25 Returns a string, of length at least {@code minLength}, consisting of {@code string} prepended with as many copies of {@code padChar} as are necessary to reach that length. For example, <ul> <li>{@code padStart("7", 3, '0')} returns {@code "007"} <li>{@code padStart("2010", 3, '0')} returns {@code "2010"} </ul> <p>See {@link java.util.Formatter} for a richer set of formatting capabilities. @param string the string which should appear at the end of the result @param minLength the minimum length the resulting string must have. Can be zero or negative, in which case the input string is always returned. @param padChar the character to insert at the beginning of the result until the minimum length is reached @return the padded string
26 Returns a string, of length at least {@code minLength}, consisting of {@code string} appended with as many copies of {@code padChar} as are necessary to reach that length. For example, <ul> <li>{@code padEnd("4.", 5, '0')} returns {@code "4.000"} <li>{@code padEnd("2010", 3, '!')} returns {@code "2010"} </ul> <p>See {@link java.util.Formatter} for a richer set of formatting capabilities. @param string the string which should appear at the beginning of the result @param minLength the minimum length the resulting string must have. Can be zero or negative, in which case the input string is always returned. @param padChar the character to append to the end of the result until the minimum length is reached @return the padded string
27 Throws {@code throwable} if it is an instance of {@code declaredType}. Example usage: <pre> for (Foo foo : foos) { try { foo.bar(); } catch (BarException | RuntimeException | Error t) { failure = t; } } if (failure != null) { throwIfInstanceOf(failure, BarException.class); throwIfUnchecked(failure); throw new AssertionError(failure); } </pre> @since 20.0
28 Throws {@code throwable} if it is a {@link RuntimeException} or {@link Error}. Example usage: <pre> for (Foo foo : foos) { try { foo.bar(); } catch (RuntimeException | Error t) { failure = t; } } if (failure != null) { throwIfUnchecked(failure); throw new AssertionError(failure); } </pre> @since 20.0
29 Gets a {@code Throwable} cause chain as a list. The first entry in the list will be {@code throwable} followed by its cause hierarchy. Note that this is a snapshot of the cause chain and will not reflect any subsequent changes to the cause chain. <p>Here's an example of how it can be used to find specific types of exceptions in the cause chain: <pre> Iterables.filter(Throwables.getCausalChain(e), IOException.class)); </pre> @param throwable the non-null {@code Throwable} to extract causes from @return an unmodifiable list containing the cause chain starting with {@code throwable} @throws IllegalArgumentException if there is a loop in the causal chain
30 Returns a {@code CacheLoader} which wraps {@code loader}, executing calls to {@link CacheLoader#reload} using {@code executor}. <p>This method is useful only when {@code loader.reload} has a synchronous implementation, such as {@linkplain #reload the default implementation}. @since 17.0
31 Returns a {@code RemovalListener} which processes all eviction notifications using {@code executor}. @param listener the backing listener @param executor the executor with which removal notifications are asynchronously executed
32 Returns a view of all mappings that have the given column key. If the column key isn't in {@link #columnKeySet()}, an empty immutable map is returned. <p>Otherwise, for each row key in {@link #rowKeySet()}, the returned map associates the row key with the corresponding value in the table. Changes to the returned map will update the underlying table, and vice versa. @param columnKey key of column to search for in the table @return the corresponding map from row keys to values
33 Returns a view of all mappings that have the given row key. If the row key isn't in {@link #rowKeySet()}, an empty immutable map is returned. <p>Otherwise, for each column key in {@link #columnKeySet()}, the returned map associates the column key with the corresponding value in the table. Changes to the returned map will update the underlying table, and vice versa. @param rowKey key of row to search for in the table @return the corresponding map from column keys to values
34 Returns a {@code Spliterator} over the elements of {@code fromSpliterator} mapped by {@code function}.
35 Returns a {@code Spliterator} filtered by the specified predicate.
36 Delegates to {@link Collection#contains}. Returns {@code false} if the {@code contains} method throws a {@code ClassCastException} or {@code NullPointerException}.
37 Delegates to {@link Collection#remove}. Returns {@code false} if the {@code remove} method throws a {@code ClassCastException} or {@code NullPointerException}.
38 Returns {@code true} if each element in {@code iterable} after the first is greater than or equal to the element that preceded it, according to the specified comparator. Note that this is always true when the iterable has fewer than two elements.
39 Returns {@code true} if each element in {@code iterable} after the first is <i>strictly</i> greater than the element that preceded it, according to the specified comparator. Note that this is always true when the iterable has fewer than two elements.
40 Returns a comparator of {@link Optional} values which treats {@link Optional#empty} as less than all other values, and orders the rest using {@code valueComparator} on the contained value. @since 22.0 (but only since 33.4.0 in the Android flavor)
41 Returns a comparator of {@link Optional} values which treats {@link Optional#empty} as greater than all other values, and orders the rest using {@code valueComparator} on the contained value. @since 22.0 (but only since 33.4.0 in the Android flavor)
42 @since 12.0
43 @since 12.0
44 Adds the given element to this queue. If the queue is currently full, the element at the head of the queue is evicted to make room. @return {@code true} always
45 Construct a fluent iterable from another fluent iterable. This is obviously never necessary, but is intended to help call out cases where one migration from {@code Iterable} to {@code FluentIterable} has obviated the need to explicitly convert to a {@code FluentIterable}. @deprecated instances of {@code FluentIterable} don't need to be converted to {@code FluentIterable}
46 Adds {@code element} to the {@code ImmutableList}. @param element the element to add @return this {@code Builder} object @throws NullPointerException if {@code element} is null
47 Specifies the ordering of the generated multimap's keys. @since 8.0
48 Specifies the ordering of the generated multimap's values for each key. @since 8.0
49 Adds {@code element} to the {@code ImmutableMultiset}. @param element the element to add @return this {@code Builder} object @throws NullPointerException if {@code element} is null
50 Adds a number of occurrences of an element to this {@code ImmutableMultiset}. @param element the element to add @param occurrences the number of occurrences of the element to add. May be zero, in which case no change will be made. @return this {@code Builder} object @throws NullPointerException if {@code element} is null @throws IllegalArgumentException if {@code occurrences} is negative, or if this operation would result in more than {@link Integer#MAX_VALUE} occurrences of the element
51 Adds or removes the necessary occurrences of an element such that the element attains the desired count. @param element the element to add or remove occurrences of @param count the desired count of the element in this multiset @return this {@code Builder} object @throws NullPointerException if {@code element} is null @throws IllegalArgumentException if {@code count} is negative
52 Returns a {@code Collector} that accumulates elements into an {@code ImmutableSortedMultiset} whose elements are the result of applying {@code elementFunction} to the inputs, with counts equal to the result of applying {@code countFunction} to the inputs. <p>If the mapped elements contain duplicates (according to {@code comparator}), the first occurrence in encounter order appears in the resulting multiset, with count equal to the sum of the outputs of {@code countFunction.applyAsInt(t)} for each {@code t} mapped to that element. @since 22.0
53 @since 12.0
54 @since 12.0
55 Returns an unmodifiable view of {@code iterable}.
56 Simply returns its argument. @deprecated no need to use this @since 10.0
57 Removes and returns the first matching element, or returns {@code null} if there is none.
58 Returns an iterable whose iterators cycle indefinitely over the elements of {@code iterable}. <p>That iterator supports {@code remove()} if {@code iterable.iterator()} does. After {@code remove()} is called, subsequent cycles omit the removed element, which is no longer in {@code iterable}. The iterator's {@code hasNext()} method returns {@code true} until {@code iterable} is empty. <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit {@code break} or be certain that you will eventually remove all the elements. <p>To cycle over the iterable {@code n} times, use the following: {@code Iterables.concat(Collections.nCopies(n, iterable))} <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code Stream.generate(() -> iterable).flatMap(Streams::stream)}.
59 Returns a view of {@code unfiltered} containing all elements that satisfy the input predicate {@code retainIfTrue}. The returned iterable's iterator does not support {@code remove()}. <p><b>{@code Stream} equivalent:</b> {@link Stream#filter}.
60 Returns a view containing the result of applying {@code function} to each element of {@code fromIterable}. <p>The returned iterable's iterator supports {@code remove()} if {@code fromIterable}'s iterator does. After a successful {@code remove()} call, {@code fromIterable} no longer contains the corresponding element. <p>If the input {@code Iterable} is known to be a {@code List} or other {@code Collection}, consider {@link Lists#transform} and {@link Collections2#transform}. <p><b>{@code Stream} equivalent:</b> {@link Stream#map}
61 Returns a view of the supplied iterable that wraps each generated {@link Iterator} through {@link Iterators#consumingIterator(Iterator)}. <p>Note: If {@code iterable} is a {@link Queue}, the returned iterable will instead use {@link Queue#isEmpty} and {@link Queue#remove()}, since {@link Queue}'s iteration order is undefined. Calling {@link Iterator#hasNext()} on a generated iterator from the returned iterable may cause an item to be immediately dequeued for return on a subsequent call to {@link Iterator#next()}. <p>Whether the input {@code iterable} is a {@link Queue} or not, the returned {@code Iterable} is not thread-safe. @param iterable the iterable to wrap @return a view of the supplied iterable that wraps each generated iterator through {@link Iterators#consumingIterator(Iterator)}; for queues, an iterable that generates iterators that return and consume the queue's elements in queue order @see Iterators#consumingIterator(Iterator) @since 2.0
62 Returns an unmodifiable view of {@code iterator}.
63 Simply returns its argument. @deprecated no need to use this @since 10.0
64 Traverses an iterator and removes every element that belongs to the provided collection. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. @param removeFrom the iterator to (potentially) remove elements from @param elementsToRemove the elements to remove @return {@code true} if any element was removed from {@code iterator}
65 Removes every element that satisfies the provided predicate from the iterator. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. @param removeFrom the iterator to (potentially) remove elements from @param predicate a predicate that determines whether an element should be removed @return {@code true} if any elements were removed from the iterator @since 2.0
66 Traverses an iterator and removes every element that does not belong to the provided collection. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. @param removeFrom the iterator to (potentially) remove elements from @param elementsToRetain the elements to retain @return {@code true} if any element was removed from {@code iterator}
67 Adds all elements in {@code iterator} to {@code collection}. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. @return {@code true} if {@code collection} was modified as a result of this operation
68 Returns an iterator that cycles indefinitely over the elements of {@code iterable}. <p>The returned iterator supports {@code remove()} if the provided iterator does. After {@code remove()} is called, subsequent cycles omit the removed element, which is no longer in {@code iterable}. The iterator's {@code hasNext()} method returns {@code true} until {@code iterable} is empty. <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit {@code break} or be certain that you will eventually remove all the elements.
69 Returns a view of {@code unfiltered} containing all elements that satisfy the input predicate {@code retainIfTrue}.
70 Returns {@code true} if every element returned by {@code iterator} satisfies the given predicate. If {@code iterator} is empty, {@code true} is returned.
71 Returns the first element in {@code iterator} that satisfies the given predicate; use this method only when such an element is known to exist. If no such element is found, the iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. If it is possible that <i>no</i> element will match, use {@link #tryFind} or {@link #find(Iterator, Predicate, Object)} instead. @throws NoSuchElementException if no element in {@code iterator} matches the given predicate
72 Returns a view containing the result of applying {@code function} to each element of {@code fromIterator}. <p>The returned iterator supports {@code remove()} if {@code fromIterator} does. After a successful {@code remove()} call, {@code fromIterator} no longer contains the corresponding element.
73 Returns a view of the supplied {@code iterator} that removes each element from the supplied {@code iterator} as it is returned. <p>The provided iterator must support {@link Iterator#remove()} or else the returned iterator will fail on the first call to {@code next}. The returned {@link Iterator} is also not thread-safe. @param iterator the iterator to remove and return elements from @return an iterator that removes and returns elements from the supplied iterator @since 2.0
74 Clears the iterator using its remove method.
75 Adapts an {@code Enumeration} to the {@code Iterator} interface. <p>This method has no equivalent in {@link Iterables} because viewing an {@code Enumeration} as an {@code Iterable} is impossible. However, the contents can be <i>copied</i> into a collection using {@link Collections#list}. <p><b>Java 9 users:</b> use {@code enumeration.asIterator()} instead, unless it is important to return an {@code UnmodifiableIterator} instead of a plain {@code Iterator}.
76 Simply returns its argument. @deprecated no need to use this @since 10.0
77 Creates an {@code EnumMap} instance. @param type the key type for this map @return a new, empty {@code EnumMap}
78 Returns an unmodifiable view of the specified map entry. The {@link Entry#setValue} operation throws an {@link UnsupportedOperationException}. This also has the side effect of redefining {@code equals} to comply with the Entry contract, to avoid a possible nefarious implementation of equals. @param entry the entry for which to return an unmodifiable view @return an unmodifiable view of the entry
79 Returns a view of an entry transformed by the specified transformer.
80 Views an entry transformer as a function from entries to entries.
81 Delegates to {@link Map#get}. Returns {@code null} on {@code ClassCastException} and {@code NullPointerException}.
82 Delegates to {@link Map#containsKey}. Returns {@code false} on {@code ClassCastException} and {@code NullPointerException}.
83 Delegates to {@link Map#remove}. Returns {@code null} on {@code ClassCastException} and {@code NullPointerException}.
84 Performs the given action for all key-value pairs contained in this multimap. If an ordering is specified by the {@code Multimap} implementation, actions will be performed in the order of iteration of {@link #entries()}. Exceptions thrown by the action are relayed to the caller. <p>To loop over all keys and their associated value collections, write {@code Multimaps.asMap(multimap).forEach((key, valueCollection) -> action())}. @since 21.0
85 Uses a {@link TreeMap} sorted by the specified comparator to map keys to value collections. <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link Multimap#asMap()} will iterate through the keys in sorted order. <p>For all multimaps generated by the resulting builder, the {@link Multimap#keySet()} can be safely cast to a {@link java.util.SortedSet}, and the {@link Multimap#asMap()} can safely be cast to a {@link java.util.SortedMap}. <p>Multimaps generated by the resulting builder will not be serializable if {@code comparator} is not serializable.
86 Uses an {@link EnumMap} to map keys to value collections. @since 16.0
87 Simply returns its argument. @deprecated no need to use this @since 10.0
88 Simply returns its argument. @deprecated no need to use this @since 10.0
89 Simply returns its argument. @deprecated no need to use this @since 10.0
90 Runs the specified action for each distinct element in this multiset, and the number of occurrences of that element. For some {@code Multiset} implementations, this may be more efficient than iterating over the {@link #entrySet()} either explicitly or with {@code entrySet().forEach(action)}. @since 21.0
91 {@inheritDoc} <p>Elements that occur multiple times in the multiset will be passed to the {@code Consumer} correspondingly many times, though not necessarily sequentially.
92 Simply returns its argument. @deprecated no need to use this @since 10.0
93 Returns an unmodifiable view of the union of two multisets. In the returned multiset, the count of each element is the <i>maximum</i> of its counts in the two backing multisets. The iteration order of the returned multiset matches that of the element set of {@code multiset1} followed by the members of the element set of {@code multiset2} that are not contained in {@code multiset1}, with repeated occurrences of the same element appearing consecutively. <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are). @since 14.0
94 Returns an unmodifiable view of the intersection of two multisets. In the returned multiset, the count of each element is the <i>minimum</i> of its counts in the two backing multisets, with elements that would have a count of 0 not included. The iteration order of the returned multiset matches that of the element set of {@code multiset1}, with repeated occurrences of the same element appearing consecutively. <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are). @since 2.0
95 Returns an unmodifiable view of the sum of two multisets. In the returned multiset, the count of each element is the <i>sum</i> of its counts in the two backing multisets. The iteration order of the returned multiset matches that of the element set of {@code multiset1} followed by the members of the element set of {@code multiset2} that are not contained in {@code multiset1}, with repeated occurrences of the same element appearing consecutively. <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are). @since 14.0
96 Returns an unmodifiable view of the difference of two multisets. In the returned multiset, the count of each element is the result of the <i>zero-truncated subtraction</i> of its count in the second multiset from its count in the first multiset, with elements that would have a count of 0 not included. The iteration order of the returned multiset matches that of the element set of {@code multiset1}, with repeated occurrences of the same element appearing consecutively. <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are). @since 14.0
97 Returns {@code true} if {@code subMultiset.count(o) <= superMultiset.count(o)} for all {@code o}. @since 10.0
98 Delegate implementation which cares about the element type.
99 For each occurrence of an element {@code e} in {@code occurrencesToRemove}, removes one occurrence of {@code e} in {@code multisetToModify}. <p>Equivalently, this method modifies {@code multisetToModify} so that {@code multisetToModify.count(e)} is set to {@code Math.max(0, multisetToModify.count(e) - occurrencesToRemove.count(e))}. <p>This is <i>not</i> the same as {@code multisetToModify.} {@link Multiset#removeAll removeAll}{@code (occurrencesToRemove)}, which removes all occurrences of elements that appear in {@code occurrencesToRemove}. However, this operation <i>is</i> equivalent to, albeit sometimes more efficient than, the following: {@snippet : for (E e : occurrencesToRemove) { multisetToModify.remove(e); } } @return {@code true} if {@code multisetToModify} was changed as a result of this operation @since 10.0 (missing in 18.0 when only the overload taking an {@code Iterable} was present)
100 An implementation of {@link Multiset#retainAll}.
101 Simply returns its argument. @deprecated no need to use this
102 Drains the queue as {@link BlockingQueue#drainTo(Collection, int)}, but if the requested {@code numElements} elements are not available, it will wait for them up to the specified timeout. @param q the blocking queue to be drained @param buffer where to add the transferred elements @param numElements the number of elements to be waited for @param timeout how long to wait before giving up, in units of {@code unit} @param unit a {@code TimeUnit} determining how to interpret the timeout parameter @return the number of elements transferred @throws InterruptedException if interrupted while waiting
103 Drains the queue as {@linkplain #drain(BlockingQueue, Collection, int, long, TimeUnit)}, but with a different behavior in case it is interrupted while waiting. In that case, the operation will continue as usual, and in the end the thread's interruption status will be set (no {@code InterruptedException} is thrown). @param q the blocking queue to be drained @param buffer where to add the transferred elements @param numElements the number of elements to be waited for @param timeout how long to wait before giving up, in units of {@code unit} @param unit a {@code TimeUnit} determining how to interpret the timeout parameter @return the number of elements transferred
104 Returns {@code true} if {@code value} is within the bounds of this range. For example, on the range {@code [0..2)}, {@code contains(1)} returns {@code true}, while {@code contains(2)} returns {@code false}.
105 Creates a <i>mutable</i>, empty {@code TreeSet} instance with the given comparator. <p><b>Note:</b> if mutability is not required, use {@code ImmutableSortedSet.orderedBy(comparator).build()} instead. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead, use the {@code TreeSet} constructor directly, taking advantage of <a href="https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation">"diamond" syntax</a>. One caveat to this is that the {@code TreeSet} constructor uses a null {@code Comparator} to mean "natural ordering," whereas this factory rejects null. Clean your code accordingly. @param comparator the comparator to use to sort the set @return a new, empty {@code TreeSet} @throws NullPointerException if {@code comparator} is null
106 Returns a stream in which each element is the result of passing the corresponding element of each of {@code streamA} and {@code streamB} to {@code function}. <p>For example: {@snippet : Streams.zip( Stream.of("foo1", "foo2", "foo3"), Stream.of("bar1", "bar2"), (arg1, arg2) -> arg1 + ":" + arg2) } <p>will return {@code Stream.of("foo1:bar1", "foo2:bar2")}. <p>The resulting stream will only be as long as the shorter of the two input streams; if one stream is longer, its extra elements will be ignored. <p>Note that if you are calling {@link Stream#forEach} on the resulting stream, you might want to consider using {@link #forEachPair} instead of this method. <p><b>Performance note:</b> The resulting stream is not <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently splittable</a>. This may harm parallel performance.
107 Returns a stream consisting of the results of applying the given function to the elements of {@code stream} and their indices in the stream. For example, {@snippet : mapWithIndex( Stream.of("a", "b", "c"), (e, index) -> index + ":" + e) } <p>would return {@code Stream.of("0:a", "1:b", "2:c")}. <p>The resulting stream is <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently splittable</a> if and only if {@code stream} was efficiently splittable and its underlying spliterator reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream comes from a data structure supporting efficient indexed random access, typically an array or list. <p>The order of the resulting stream is defined if and only if the order of the original stream was defined.
108 Returns a stream consisting of the results of applying the given function to the elements of {@code stream} and their indexes in the stream. For example, {@snippet : mapWithIndex( IntStream.of(10, 11, 12), (e, index) -> index + ":" + e) } <p>...would return {@code Stream.of("0:10", "1:11", "2:12")}. <p>The resulting stream is <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently splittable</a> if and only if {@code stream} was efficiently splittable and its underlying spliterator reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream comes from a data structure supporting efficient indexed random access, typically an array or list. <p>The order of the resulting stream is defined if and only if the order of the original stream was defined.
109 Returns a stream consisting of the results of applying the given function to the elements of {@code stream} and their indexes in the stream. For example, {@snippet : mapWithIndex( LongStream.of(10, 11, 12), (e, index) -> index + ":" + e) } <p>...would return {@code Stream.of("0:10", "1:11", "2:12")}. <p>The resulting stream is <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently splittable</a> if and only if {@code stream} was efficiently splittable and its underlying spliterator reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream comes from a data structure supporting efficient indexed random access, typically an array or list. <p>The order of the resulting stream is defined if and only if the order of the original stream was defined.
110 Returns a stream consisting of the results of applying the given function to the elements of {@code stream} and their indexes in the stream. For example, {@snippet : mapWithIndex( DoubleStream.of(0.0, 1.0, 2.0) (e, index) -> index + ":" + e) } <p>...would return {@code Stream.of("0:0.0", "1:1.0", "2:2.0")}. <p>The resulting stream is <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently splittable</a> if and only if {@code stream} was efficiently splittable and its underlying spliterator reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream comes from a data structure supporting efficient indexed random access, typically an array or list. <p>The order of the resulting stream is defined if and only if the order of the original stream was defined.
111 @since 28.1
112 Returns a tree traverser that uses the given function to navigate from a node to its children. This is useful if the function instance already exists, or so that you can supply a lambda expressions. If those circumstances don't apply, you probably don't need to use this; subclass {@code TreeTraverser} and implement its {@link #children} method directly. @since 20.0 @deprecated Use {@link com.google.common.graph.Traverser#forTree} instead. If you are using a lambda, these methods have exactly the same signature.
113 Returns an unmodifiable iterable over the nodes in a tree structure, using pre-order traversal. That is, each node's subtrees are traversed after the node itself is returned. <p>No guarantees are made about the behavior of the traversal when nodes change while iteration is in progress or when the iterators generated by {@link #children} are advanced. @deprecated Use {@link com.google.common.graph.Traverser#depthFirstPreOrder} instead, which has the same behavior.
114 Returns an unmodifiable iterable over the nodes in a tree structure, using post-order traversal. That is, each node's subtrees are traversed before the node itself is returned. <p>No guarantees are made about the behavior of the traversal when nodes change while iteration is in progress or when the iterators generated by {@link #children} are advanced. @deprecated Use {@link com.google.common.graph.Traverser#depthFirstPostOrder} instead, which has the same behavior.
115 Returns an unmodifiable iterable over the nodes in a tree structure, using breadth-first traversal. That is, all the nodes of depth 0 are returned, then depth 1, then 2, and so on. <p>No guarantees are made about the behavior of the traversal when nodes change while iteration is in progress or when the iterators generated by {@link #children} are advanced. @deprecated Use {@link com.google.common.graph.Traverser#breadthFirst} instead, which has the same behavior.
116 Add a new mapping from an index to an object to the escaping.
117 Adds a replacement string for the given input character. The specified character will be replaced by the given string whenever it occurs in the input, irrespective of whether it lies inside or outside the 'safe' range. @param c the character to be replaced @param replacement the string to replace the given character @return the builder instance @throws NullPointerException if {@code replacement} is null
118 Returns the Unicode code point of the character at the given index. <p>Unlike {@link Character#codePointAt(CharSequence, int)} or {@link String#codePointAt(int)} this method will never fail silently when encountering an invalid surrogate pair. <p>The behaviour of this method is as follows: <ol> <li>If {@code index >= end}, {@link IndexOutOfBoundsException} is thrown. <li><b>If the character at the specified index is not a surrogate, it is returned.</b> <li>If the first character was a high surrogate value, then an attempt is made to read the next character. <ol> <li><b>If the end of the sequence was reached, the negated value of the trailing high surrogate is returned.</b> <li><b>If the next character was a valid low surrogate, the code point value of the high/low surrogate pair is returned.</b> <li>If the next character was not a low surrogate value, then {@link IllegalArgumentException} is thrown. </ol> <li>If the first character was a low surrogate value, {@link IllegalArgumentException} is thrown. </ol> @param seq the sequence of characters from which to decode the code point @param index the index of the first character to decode @param end the index beyond the last valid character to decode @return the Unicode code point for the given index or the negated value of the trailing high surrogate character at the end of the sequence
119 Creates a new DeadEvent. @param source object broadcasting the DeadEvent (generally the {@link EventBus}). @param event the event that could not be delivered.
120 Handles the given exception thrown by a subscriber with the given context.
121 Invokes the subscriber method. This method can be overridden to make the invocation synchronized.
122 @param eventBus The {@link EventBus} that handled the event and the subscriber. Useful for broadcasting a new event based on the error. @param event The event object that caused the subscriber to throw. @param subscriber The source subscriber context. @param subscriberMethod the subscribed method.
123 Simply returns its argument. @deprecated no need to use this
124 Simply returns its argument. @deprecated no need to use this
125 Simply returns its argument. @deprecated no need to use this
126 Visits the next node from the top iterator of {@code horizon} and returns the visited node. Null is returned to indicate reaching the end of the top iterator. <p>For example, if horizon is {@code [[a, b], [c, d], [e]]}, {@code visitNext()} will return {@code [a, b, null, c, d, null, e, null]} sequentially, encoding the topological structure. (Note, however, that the callers of {@code visitNext()} often insert additional iterators into {@code horizon} between calls to {@code visitNext()}. This causes them to receive additional values interleaved with those shown above.)
127 Creates an input stream that hashes using the given {@link HashFunction} and delegates all data read from it to the underlying {@link InputStream}. <p>The {@link InputStream} should not be read from before or after the hand-off.
128 Creates a new writer that appends everything it writes to {@code target}. @param target target to which to append output
129 Returns a {@code ByteSink} that writes base-encoded bytes to the specified {@code CharSink}.
130 Returns a {@code ByteSource} that reads base-encoded bytes from the specified {@code CharSource}.
131 Creates a new reader wrapping the given character sequence.
132 Copies all characters between the {@link Reader} and {@link StringBuilder} objects. Does not close or flush the reader. <p>This is identical to {@link #copy(Readable, Appendable)} but optimized for these specific types. CharBuffer has poor performance when being written into or read out of so round tripping all the bytes through the buffer takes a long time. With these specialized types we can just use a char array. @param from the object to read from @param to the object to write to @return the number of characters copied @throws IOException if an I/O error occurs
133 Copies all characters between the {@link Reader} and {@link Writer} objects. Does not close or flush the reader or writer. <p>This is identical to {@link #copy(Readable, Appendable)} but optimized for these specific types. CharBuffer has poor performance when being written into or read out of so round tripping all the bytes through the buffer takes a long time. With these specialized types we can just use a char array. @param from the object to read from @param to the object to write to @return the number of characters copied @throws IOException if an I/O error occurs
134 Discards {@code n} characters of data from the reader. This method will block until the full amount has been skipped. Does not close the reader. @param reader the reader to read from @param n the number of characters to skip @throws EOFException if this stream reaches the end before skipping all the characters @throws IOException if an I/O error occurs
135 Wraps another input stream, counting the number of bytes read. @param in the input stream to be wrapped
136 Wraps another output stream, counting the number of bytes written. @param out the output stream to be wrapped
137 Returns a buffered reader that reads from a file using the given character set. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#newBufferedReader(java.nio.file.Path, Charset)}. @param file the file to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @return the buffered reader
138 Returns a buffered writer that writes to a file using the given character set. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#newBufferedWriter(java.nio.file.Path, Charset, java.nio.file.OpenOption...)}. @param file the file to write to @param charset the charset used to encode the output stream; see {@link StandardCharsets} for helpful predefined constants @return the buffered writer
139 Creates an empty file or updates the last updated timestamp on the same as the unix command of the same name. @param file the file to create or update @throws IOException if an I/O error occurs
140 Creates any necessary but nonexistent parent directories of the specified file. Note that if this operation fails it may have succeeded in creating some (but not all) of the necessary parent directories. @throws IOException if an I/O error occurs, or if any necessary but nonexistent parent directories of the specified file could not be created. @since 4.0
141 Returns the <a href="http://en.wikipedia.org/wiki/Filename_extension">file extension</a> for the given file name, or the empty string if the file has no extension. The result does not include the '{@code .}'. <p><b>Note:</b> This method simply returns everything after the last '{@code .}' in the file's name as determined by {@link File#getName}. It does not account for any filesystem-specific behavior that the {@link File} API does not already account for. For example, on NTFS it will report {@code "txt"} as the extension for the filename {@code "foo.exe:.txt"} even though NTFS will drop the {@code ":.txt"} part of the name when the file is actually created on the filesystem due to NTFS's <a href="https://learn.microsoft.com/en-us/archive/blogs/askcore/alternate-data-streams-in-ntfs">Alternate Data Streams</a>. @since 11.0
142 Returns the file name without its <a href="http://en.wikipedia.org/wiki/Filename_extension">file extension</a> or path. This is similar to the {@code basename} unix command. The result does not include the '{@code .}'. @param file The name of the file to trim the extension from. This can be either a fully qualified file name (including a path) or just a file name. @return The file name without its path or extension. @since 14.0
143 Creates a {@code LittleEndianDataInputStream} that wraps the given stream. @param in the stream to delegate to
144 Creates a {@code LittleEndianDataOutputStream} that wraps the given stream. @param out the stream to delegate to
145 Like the unix command of the same name, creates an empty file or updates the last modified timestamp of the existing file at the given path to the current system time.
146 Constructs a pattern file name filter object. @param pattern the pattern on which to filter file names
147 Returns {@code true} if {@code x} represents a power of two.
148 Invokes {@code consumer} for each value contained in this array, in order. @since 22.0 (but only since 33.4.0 in the Android flavor)
149 Invokes {@code consumer} for each value contained in this array, in order. @since 22.0 (but only since 33.4.0 in the Android flavor)
150 Invokes {@code consumer} for each value contained in this array, in order. @since 22.0 (but only since 33.4.0 in the Android flavor)
151 Returns {@code true} if {@code type} is one of the nine primitive-wrapper types, such as {@link Integer}. @see Class#isPrimitive
152 Returns the corresponding wrapper type of {@code type} if it is a primitive type; otherwise returns {@code type} itself. Idempotent. <pre> wrap(int.class) == Integer.class wrap(Integer.class) == Integer.class wrap(String.class) == String.class </pre>
153 Returns the corresponding primitive type of {@code type} if it is a wrapper type; otherwise returns {@code type} itself. Idempotent. <pre> unwrap(Integer.class) == int.class unwrap(int.class) == int.class unwrap(String.class) == String.class </pre>
154 Returns the unsigned {@code byte} value represented by a string with the given radix. @param string the string containing the unsigned {@code byte} representation to be parsed. @param radix the radix to use while parsing {@code string} @throws NumberFormatException if the string does not contain a valid unsigned {@code byte} with the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}. @throws NullPointerException if {@code string} is null (in contrast to {@link Byte#parseByte(String)}) @since 13.0
155 Returns the unsigned {@code int} value represented by a string with the given radix. <p><b>Java 8+ users:</b> use {@link Integer#parseUnsignedInt(String, int)} instead. @param string the string containing the unsigned integer representation to be parsed. @param radix the radix to use while parsing {@code s}; must be between {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}. @throws NumberFormatException if the string does not contain a valid unsigned {@code int}, or if supplied radix is invalid. @throws NullPointerException if {@code s} is null (in contrast to {@link Integer#parseInt(String)})
156 @param delay the time from now to delay execution @param unit the time unit of the delay parameter
157 Updates the value currently associated with {@code key} with the specified function, and returns the new value. If there is not currently a value associated with {@code key}, the function is applied to {@code 0L}. @since 21.0
158 Updates the value currently associated with {@code key} with the specified function, and returns the old value. If there is not currently a value associated with {@code key}, the function is applied to {@code 0L}. @since 21.0
159 Creates an {@link AsyncCallable} from a {@link Callable}. <p>The {@link AsyncCallable} returns the {@link ListenableFuture} resulting from {@link ListeningExecutorService#submit(Callable)}. @since 20.0
160 Wraps the given callable such that for the duration of {@link Callable#call} the thread that is running will have the given name. @param callable The callable to wrap @param nameSupplier The supplier of thread names, {@link Supplier#get get} will be called once for each invocation of the wrapped callable.
161 Wraps the given runnable such that for the duration of {@link Runnable#run} the thread that is running with have the given name. @param task The Runnable to wrap @param nameSupplier The supplier of thread names, {@link Supplier#get get} will be called once for each invocation of the wrapped callable.
162 Returns an {@link AsyncClosingFunction} that applies an {@link AsyncFunction} to an input, ignoring the DeferredCloser and returning a {@code ClosingFuture} derived from the returned {@link ListenableFuture}. <p>Use this method to pass a transformation to {@link #transformAsync(AsyncClosingFunction, Executor)} or to {@link #catchingAsync(Class, AsyncClosingFunction, Executor)} as long as it meets these conditions: <ul> <li>It does not need to capture any {@link Closeable} objects by calling {@link DeferredCloser#eventuallyClose(Object, Executor)}. <li>It returns a {@link ListenableFuture}. </ul> <p>Example usage: {@snippet : // Result.getRowsFuture() returns a ListenableFuture. ClosingFuture<List<Row>> rowsFuture = queryFuture.transformAsync(withoutCloser(Result::getRowsFuture), executor); } @param function transforms the value of a {@code ClosingFuture} step to a {@link ListenableFuture} with the value of a derived step
163 Simply returns its argument. @deprecated no need to use this @since 28.0
164 Like {@link #transform(ListenableFuture, Function, Executor)} except that the transformation {@code function} is invoked on each call to {@link Future#get() get()} on the returned future. <p>The returned {@code Future} reflects the input's cancellation state directly, and any attempt to cancel the returned Future is likewise passed through to the input Future. <p>Note that calls to {@linkplain Future#get(long, TimeUnit) timed get} only apply the timeout to the execution of the underlying {@code Future}, <em>not</em> to the execution of the transformation function. <p>The primary audience of this method is callers of {@code transform} who don't have a {@code ListenableFuture} available and do not mind repeated, lazy function evaluation. @param input The future to transform @param function A Function to transform the results of the provided future to the results of the returned future. @return A future that returns the result of the transformation. @since 10.0
165 Creates an {@link Executor} that renames the {@link Thread threads} that its tasks run in. <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed right before each task is run. The renaming is best effort, if a {@link SecurityManager} prevents the renaming then it will be skipped but the tasks will still execute. @param executor The executor to decorate @param nameSupplier The source of names for each task
166 Creates an {@link ExecutorService} that renames the {@link Thread threads} that its tasks run in. <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed right before each task is run. The renaming is best effort, if a {@link SecurityManager} prevents the renaming then it will be skipped but the tasks will still execute. @param service The executor to decorate @param nameSupplier The source of names for each task
167 Creates a {@link ScheduledExecutorService} that renames the {@link Thread threads} that its tasks run in. <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed right before each task is run. The renaming is best effort, if a {@link SecurityManager} prevents the renaming then it will be skipped but the tasks will still execute. @param service The executor to decorate @param nameSupplier The source of names for each task
168 Use {@link MoreExecutors#newSequentialExecutor}
169 Adds a task to the queue and makes sure a worker thread is running. <p>If this method throws, e.g. a {@code RejectedExecutionException} from the delegate executor, execution of tasks will stop until a call to this method is made.
170 Sets the {@link UncaughtExceptionHandler} for new threads created with this ThreadFactory. @param uncaughtExceptionHandler the uncaught exception handler for new Threads created with this ThreadFactory @return this for the builder pattern
171 Sets the backing {@link ThreadFactory} for new threads created with this ThreadFactory. Threads will be created by invoking #newThread(Runnable) on this backing {@link ThreadFactory}. @param backingThreadFactory the backing {@link ThreadFactory} which will be delegated to during thread creation. @return this for the builder pattern @see MoreExecutors
172 Invokes {@code unit.}{@link TimeUnit#timedJoin(Thread, long) timedJoin(toJoin, timeout)} uninterruptibly.
173 Specifies a nanosecond-precision time source for this cache. By default, {@link System#nanoTime} is used. <p>The primary intent of this method is to facilitate testing of caches with a fake or mock time source. @return this {@code CacheBuilder} instance (for chaining) @throws IllegalStateException if a ticker was already set
174 Specifies a listener instance that caches should notify each time an entry is removed for any {@linkplain RemovalCause reason}. Each cache created by this builder will invoke this listener as part of the routine maintenance described in the class documentation above. <p><b>Warning:</b> after invoking this method, do not continue to use <i>this</i> cache builder reference; instead use the reference this method <i>returns</i>. At runtime, these point to the same instance, but only the returned reference has the correct generic type information to ensure type safety. For best results, use the standard method-chaining idiom illustrated in the class documentation above, configuring a builder and building your cache in a single statement. Failure to heed this advice can result in a {@link ClassCastException} being thrown by a cache operation at some <i>undefined</i> point in the future. <p><b>Warning:</b> any exception thrown by {@code listener} will <i>not</i> be propagated to the {@code Cache} user, only logged via a {@link Logger}. @return the cache builder reference that should be used instead of {@code this} for any remaining configuration and cache building @throws IllegalStateException if a removal listener was already set
175 Returns the <a href="http://en.wikipedia.org/wiki/Arithmetic_mean">arithmetic mean</a> of the values. The count must be non-zero. <p>If these values are a sample drawn from a population, this is also an unbiased estimator of the arithmetic mean of the population. <h3>Non-finite values</h3> <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it contains both {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then the result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and finite values only or {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values only or {@link Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}. <p>If you only want to calculate the mean, use {@link #meanOf} instead of creating a {@link Stats} instance. @throws IllegalStateException if the dataset is empty
176 Returns the lowest value in the dataset. The count must be non-zero. <h3>Non-finite values</h3> <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it contains {@link Double#NEGATIVE_INFINITY} and not {@link Double#NaN} then the result is {@link Double#NEGATIVE_INFINITY}. If it contains {@link Double#POSITIVE_INFINITY} and finite values only then the result is the lowest finite value. If it contains {@link Double#POSITIVE_INFINITY} only then the result is {@link Double#POSITIVE_INFINITY}. @throws IllegalStateException if the dataset is empty
177 Returns the highest value in the dataset. The count must be non-zero. <h3>Non-finite values</h3> <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and not {@link Double#NaN} then the result is {@link Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values only then the result is the highest finite value. If it contains {@link Double#NEGATIVE_INFINITY} only then the result is {@link Double#NEGATIVE_INFINITY}. @throws IllegalStateException if the dataset is empty
178 Returns the <a href="http://en.wikipedia.org/wiki/Arithmetic_mean">arithmetic mean</a> of the values. The count must be non-zero. <p>If these values are a sample drawn from a population, this is also an unbiased estimator of the arithmetic mean of the population. <h3>Non-finite values</h3> <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it contains both {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then the result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and finite values only or {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values only or {@link Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}. @throws IllegalStateException if the dataset is empty
179 Returns the lowest value in the dataset. The count must be non-zero. <h3>Non-finite values</h3> <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it contains {@link Double#NEGATIVE_INFINITY} and not {@link Double#NaN} then the result is {@link Double#NEGATIVE_INFINITY}. If it contains {@link Double#POSITIVE_INFINITY} and finite values only then the result is the lowest finite value. If it contains {@link Double#POSITIVE_INFINITY} only then the result is {@link Double#POSITIVE_INFINITY}. @throws IllegalStateException if the dataset is empty
180 Returns the highest value in the dataset. The count must be non-zero. <h3>Non-finite values</h3> <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and not {@link Double#NaN} then the result is {@link Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values only then the result is the highest finite value. If it contains {@link Double#NEGATIVE_INFINITY} only then the result is {@link Double#NEGATIVE_INFINITY}. @throws IllegalStateException if the dataset is empty
181 Returns a latch that reaches zero when this objects' deferred closeables have been closed.
182 Returns a copy of the input string in which all {@linkplain #isUpperCase(char) uppercase ASCII characters} have been converted to lowercase. All other characters are copied without modification.
183 If the argument is an {@linkplain #isUpperCase(char) uppercase ASCII character}, returns the lowercase equivalent. Otherwise returns the argument.
184 Returns a copy of the input string in which all {@linkplain #isLowerCase(char) lowercase ASCII characters} have been converted to uppercase. All other characters are copied without modification.
185 If the argument is a {@linkplain #isLowerCase(char) lowercase ASCII character}, returns the uppercase equivalent. Otherwise returns the argument.
186 Truncates the given character sequence to the given maximum length. If the length of the sequence is greater than {@code maxLength}, the returned string will be exactly {@code maxLength} chars in length and will end with the given {@code truncationIndicator}. Otherwise, the sequence will be returned as a string with no changes to the content. <p>Examples: {@snippet : Ascii.truncate("foobar", 7, "..."); // returns "foobar" Ascii.truncate("foobar", 5, "..."); // returns "fo..." } <p><b>Note:</b> This method <i>may</i> work with certain non-ASCII text but is not safe for use with arbitrary Unicode text. It is mostly intended for use with text that is known to be safe for use with it (such as all-ASCII text) and for simple debugging text. When using this method, consider the following: <ul> <li>it may split surrogate pairs <li>it may split characters and combining characters <li>it does not consider word boundaries <li>if truncating for display to users, there are other considerations that must be taken into account <li>the appropriate truncation indicator may be locale-dependent <li>it is safe to use non-ASCII characters in the truncation indicator </ul> @throws IllegalArgumentException if {@code maxLength} is less than the length of {@code truncationIndicator} @since 16.0
187 Writes to the given {@link ByteBuffer} a byte representation of this instance. <p><b>Note:</b> No guarantees are made regarding stability of the representation between versions. @param buffer A {@link ByteBuffer} with at least BYTES {@link ByteBuffer#remaining}, ordered as {@link ByteOrder#LITTLE_ENDIAN}, to which a BYTES-long byte representation of this instance is written. In the process increases the position of {@link ByteBuffer} by BYTES.
188 Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}. <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code value} is greater than {@code max}, {@code max} is returned. @param value the {@code short} value to constrain @param min the lower bound (inclusive) of the range to constrain {@code value} to @param max the upper bound (inclusive) of the range to constrain {@code value} to @throws IllegalArgumentException if {@code min > max} @since 21.0
189 Sets the priority for new threads created with this ThreadFactory. <p><b>Warning:</b> relying on the thread scheduler is <a href="http://errorprone.info/bugpattern/ThreadPriorityCheck">discouraged</a>. @param priority the priority for new Threads created with this ThreadFactory @return this for the builder pattern
190 Indicates whether the contents of the given character sequences {@code s1} and {@code s2} are equal, ignoring the case of any ASCII alphabetic characters between {@code 'a'} and {@code 'z'} or {@code 'A'} and {@code 'Z'} inclusive. <p>This method is significantly faster than {@link String#equalsIgnoreCase} and should be used in preference if at least one of the parameters is known to contain only ASCII characters. <p>Note however that this method does not always behave identically to expressions such as: <ul> <li>{@code string.toUpperCase().equals("UPPER CASE ASCII")} <li>{@code string.toLowerCase().equals("lower case ascii")} </ul> <p>due to case-folding of some non-ASCII characters (which does not occur in {@link String#equalsIgnoreCase}). However in almost all cases that ASCII strings are used, the author probably wanted the behavior provided by this method rather than the subtle and sometimes surprising behavior of {@code toUpperCase()} and {@code toLowerCase()}. @since 16.0
191 Constructs a new {@code CacheStats} instance. <p>Five parameters of the same type in a row is a bad thing, but this class is not constructed by end users and is too fine-grained for a builder.
192 Creates a new multimap that uses the provided map. @param map place to store the mapping from each key to its corresponding values @throws IllegalArgumentException if {@code map} is not empty
193 Used during deserialization only.
194 Standard constructor.
195 @since 12.0
196 Creates an empty {@code EnumMultiset}.
197 @since 12.0
198 Divides an iterable into unmodifiable sublists of the given size (the final iterable may be smaller). For example, partitioning an iterable containing {@code [a, b, c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterable containing two inner lists of three and two elements, all in the original order. <p>Iterators returned by the returned iterable do not support the {@link Iterator#remove()} method. The returned lists implement {@link RandomAccess}, whether or not the input list does. <p><b>Note:</b> The current implementation eagerly allocates storage for {@code size} elements. As a consequence, passing values like {@code Integer.MAX_VALUE} can lead to {@link OutOfMemoryError}. <p><b>Note:</b> if {@code iterable} is a {@link List}, use {@link Lists#partition(List, int)} instead. @param iterable the iterable to return a partitioned view of @param size the desired size of each partition (the last may be smaller) @return an iterable of unmodifiable lists containing the elements of {@code iterable} divided into partitions @throws IllegalArgumentException if {@code size} is nonpositive
199 Divides an iterable into unmodifiable sublists of the given size, padding the final iterable with null values if necessary. For example, partitioning an iterable containing {@code [a, b, c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e, null]]} -- an outer iterable containing two inner lists of three elements each, all in the original order. <p>Iterators returned by the returned iterable do not support the {@link Iterator#remove()} method. @param iterable the iterable to return a partitioned view of @param size the desired size of each partition @return an iterable of unmodifiable lists containing the elements of {@code iterable} divided into partitions (the final iterable may have trailing null elements) @throws IllegalArgumentException if {@code size} is nonpositive
200 Configures this builder to build min-max priority queues with an initial expected size of {@code expectedSize}.
201 Configures this builder to build {@code MinMaxPriorityQueue} instances that are limited to {@code maximumSize} elements. Each time a queue grows beyond this bound, it immediately removes its greatest element (according to its comparator), which might be the element that was just added.
202 Constructor for use by subclasses. This hasher instance will process chunks of the specified size, using an internal buffer of {@code bufferSize} size, which must be a multiple of {@code chunkSize}. @param chunkSize the number of bytes available per {@link #process(ByteBuffer)} invocation; must be at least 4 @param bufferSize the size of the internal buffer. Must be a multiple of chunkSize
203 Returns its argument if it is non-negative, zero if it is negative.
204 Returns a {@code char} matcher that matches only one specified BMP character.
205 Returns a {@code char} matcher that matches any character except the BMP character specified. <p>To negate another {@code CharMatcher}, use {@link #negate()}.
206 Returns a string copy of the input character sequence, with each group of consecutive matching BMP characters replaced by a single replacement character. For example: {@snippet : CharMatcher.anyOf("eko").collapseFrom("bookkeeper", '-') } ... returns {@code "b-p-r"}. <p>The default implementation uses {@link #indexIn(CharSequence)} to find the first matching character, then iterates the remainder of the sequence calling {@link #matches(char)} for each character. @param sequence the character sequence to replace matching groups of characters in @param replacement the character to append to the result string in place of each group of matching characters in {@code sequence} @return the new string
207 Constructor for use by subclasses.
208 Returns {@code true} if {@link Equivalence#equivalent(Object, Object)} applied to the wrapped references is {@code true} and both wrappers use the {@link Object#equals(Object) same} equivalence.
209 @deprecated Provided only to satisfy the {@link BiPredicate} interface; use {@link #equivalent} instead. @since 21.0
210 Removes an entry whose value has been garbage collected.
211 Clears a value that has not yet been set, and thus does not require count to be modified.
212 Determines whether two iterators contain equal elements in the same order. More specifically, this method returns {@code true} if {@code iterator1} and {@code iterator2} contain the same number of elements and every element of {@code iterator1} is equal to the corresponding element of {@code iterator2}. <p>Note that this will modify the supplied iterators, since they will have been advanced some number of elements forward.
213 Indicates whether an object equals this entry, following the behavior specified in {@link Multiset.Entry#equals}.
214 Determines whether an edge has already been used during traversal. In the directed case a cycle is always detected before reusing an edge, so no special logic is required. In the undirected case, we must take care not to "backtrack" over an edge (i.e. going from A to B and then going from B to A).
215 Returns the result of {@link Equivalence#hash(Object)} applied to the wrapped reference.
216 Constructs a new finalizable phantom reference. @param referent to phantom reference @param queue that should finalize the referent
217 Constructs a new finalizable soft reference. @param referent to softly reference @param queue that should finalize the referent
218 Constructs a new finalizable weak reference. @param referent to weakly reference @param queue that should finalize the referent
219 Returns a function that ignores its input and always returns {@code value}. <p>Prefer to use the lambda expression {@code o -> value} instead. Note that it is not serializable unless you explicitly make it {@link Serializable}, typically by writing {@code (Function<Object, E> & Serializable) o -> value}. @param value the constant value for the function to return @return a function that always returns {@code value}
220 Parses a bracketed host-port string, throwing IllegalArgumentException if parsing fails. @param hostPortString the full bracketed host-port specification. Port might not be specified. @return an array with 2 strings: host and port, in that order. @throws IllegalArgumentException if parsing the bracketed host-port string fails.
221 Generate an error if the host might be a non-bracketed IPv6 literal. <p>URI formatting requires that IPv6 literals be surrounded by brackets, like "[2001:db8::1]". Chain this call after {@link #fromString(String)} to increase the strictness of the parser, and disallow IPv6 literals that don't contain these brackets. <p>Note that this parser identifies IPv6 literals solely based on the presence of a colon. To perform actual validation of IP addresses, see the {@link InetAddresses#forString(String)} method. @return {@code this}, to enable chaining of calls. @throws IllegalArgumentException if bracketless IPv6 is detected.
222 Returns a new InetAddress that is one less than the passed in address. This method works for both IPv4 and IPv6 addresses. @param address the InetAddress to decrement @return a new InetAddress that is one less than the passed in address @throws IllegalArgumentException if InetAddress is at the beginning of its range @since 18.0
223 Returns a new InetAddress that is one more than the passed in address. This method works for both IPv4 and IPv6 addresses. @param address the InetAddress to increment @return a new InetAddress that is one more than the passed in address @throws IllegalArgumentException if InetAddress is at the end of its range @since 10.0
224 Returns a proxy instance that implements {@code interfaceType} by dispatching method invocations to {@code handler}. The class loader of {@code interfaceType} will be used to define the proxy class. To implement multiple interfaces or specify a class loader, use {@link Proxy#newProxyInstance}. @throws IllegalArgumentException if {@code interfaceType} does not specify the type of a Java interface
225 Returns the captured type.
226 Appends the string representation of each of {@code parts}, using the previously configured separator between each, to {@code appendable}. @since 11.0
227 Appends the string representation of each entry in {@code entries}, using the previously configured separator and key-value separator, to {@code builder}. Identical to {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}. @since 10.0
228 Returns a string containing the string representation of each entry in {@code entries}, using the previously configured separator and key-value separator. @since 11.0
229 Returns a {@code MapJoiner} using the given key-value separator, and the same configuration as this {@code Joiner} otherwise. @since 20.0
230 Returns a string in the format specified by {@link MoreObjects#toStringHelper(Object)}. <p>After calling this method, you can keep adding more properties to later call toString() again and get a more complete representation of the same object; but properties cannot be removed, so this only allows limited reuse of the helper instance. The helper allows duplication of properties (multiple name/value pairs with the same name can be added).
231 Returns an immutable set of the values for the given key. If no mappings in the multimap have the provided key, an empty immutable set is returned. The values are in the same order as the parameters used to build this multimap.
232 Returns a {@code URL} pointing to {@code resourceName} if the resource is found using the {@linkplain Thread#getContextClassLoader() context class loader}. In simple environments, the context class loader will find resources from the class path. In environments where different threads can have different class loaders, for example app servers, the context class loader will typically have been set to an appropriate loader for the current thread. <p>In the unusual case where the context class loader is null, the class loader that loaded this class ({@code Resources}) will be used instead. @throws IllegalArgumentException if the resource is not found
233 Returns an {@code Optional} instance with no contained reference. <p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's {@code Optional.empty}.
234 Returns the equivalent {@code java.util.Optional} value to the given {@code com.google.common.base.Optional}, or {@code null} if the argument is null. <p>If {@code googleOptional} is known to be non-null, use {@code googleOptional.toJavaUtil()} instead. <p>Unfortunately, the method reference {@code Optional::toJavaUtil} will not work, because it could refer to either the static or instance version of this method. Write out the lambda expression {@code o -> Optional.toJavaUtil(o)} instead. @since 21.0 (but only since 33.4.0 in the Android flavor)
235 Returns the string if it is not empty, or a null string otherwise. @param string the string to test and possibly return @return {@code string} if it is not empty; {@code null} otherwise
236 Returns {@code true} if the given string is null or is the empty string. <p>Consider normalizing your string references with {@link #nullToEmpty}. If you do, you can use {@link String#isEmpty()} instead of this method, and you won't need special null-safe forms of methods like {@link String#toUpperCase} either. Or, if you'd like to normalize "in the other direction," converting empty strings to {@code null}, you can use {@link #emptyToNull}. @param string a string reference to check @return {@code true} if the string is null or is the empty string
237 Returns a view of {@code iterable} that skips its first {@code numberToSkip} elements. If {@code iterable} contains fewer than {@code numberToSkip} elements, the returned iterable skips all of its elements. <p>Modifications to the underlying {@link Iterable} before a call to {@code iterator()} are reflected in the returned iterator. That is, the iterator skips the first {@code numberToSkip} elements that exist when the {@code Iterator} is created, not when {@code skip()} is called. <p>The returned iterable's iterator supports {@code remove()} if the iterator of the underlying iterable supports it. Note that it is <i>not</i> possible to delete the last skipped element by immediately calling {@code remove()} on that iterator, as the {@code Iterator} contract states that a call to {@code remove()} before a call to {@code next()} will throw an {@link IllegalStateException}. <p><b>{@code Stream} equivalent:</b> {@link Stream#skip} @since 3.0
238 Returns a view of {@code iterable} containing its first {@code limitSize} elements. If {@code iterable} contains fewer than {@code limitSize} elements, the returned view contains all of its elements. The returned iterable's iterator supports {@code remove()} if {@code iterable}'s iterator does. <p><b>{@code Stream} equivalent:</b> {@link Stream#limit} @param iterable the iterable to limit @param limitSize the maximum number of elements in the returned iterable @throws IllegalArgumentException if {@code limitSize} is negative @since 3.0
239 Calls {@code next()} on {@code iterator}, either {@code numberToAdvance} times or until {@code hasNext()} returns {@code false}, whichever comes first. @return the number of elements the iterator was advanced @since 13.0 (since 3.0 as {@code Iterators.skip})
240 Returns a view containing the first {@code limitSize} elements of {@code iterator}. If {@code iterator} contains fewer than {@code limitSize} elements, the returned view contains all of its elements. The returned iterator supports {@code remove()} if {@code iterator} does. @param iterator the iterator to limit @param limitSize the maximum number of elements in the returned iterator @throws IllegalArgumentException if {@code limitSize} is negative @since 3.0
241 Creates a new traverser for a directed acyclic graph that has at most one path from the start node(s) to any node reachable from the start node(s), and has no paths from any start node to any other start node, such as a tree or forest. <p>{@code forTree()} is especially useful (versus {@code forGraph()}) in cases where the data structure being traversed is, in addition to being a tree/forest, also defined <a href="https://github.com/google/guava/wiki/GraphsExplained#non-recursiveness">recursively</a>. This is because the {@code forTree()}-based implementations don't keep track of visited nodes, and therefore don't need to call {@code equals()} or {@code hashCode()} on the node objects; this saves both time and space versus traversing the same graph using {@code forGraph()}. <p>Providing a graph to be traversed for which there is more than one path from the start node(s) to any node may lead to: <ul> <li>Traversal not terminating (if the graph has cycles) <li>Nodes being visited multiple times (if multiple paths exist from any start node to any node reachable from any start node) </ul> <p><b>Performance notes</b> <ul> <li>Traversals require <i>O(n)</i> time (where <i>n</i> is the number of nodes reachable from the start node). <li>While traversing, the traverser will use <i>O(H)</i> space (where <i>H</i> is the number of nodes that have been seen but not yet visited, that is, the "horizon"). </ul> <p><b>Examples</b> (all edges are directed facing downwards) <p>The graph below would be valid input with start nodes of {@code a, f, c}. However, if {@code b} were <i>also</i> a start node, then there would be multiple paths to reach {@code e} and {@code h}. {@snippet : a b c / \ / \ | / \ / \ | d e f g | | h } <p>. <p>The graph below would be a valid input with start nodes of {@code a, f}. However, if {@code b} were a start node, there would be multiple paths to {@code f}. {@snippet : a b / \ / \ / \ / \ c d e \ / \ / f } <p><b>Note on binary trees</b> <p>This method can be used to traverse over a binary tree. Given methods {@code leftChild(node)} and {@code rightChild(node)}, this method can be called as {@snippet : Traverser.forTree(node -> ImmutableList.of(leftChild(node), rightChild(node))); } @param tree {@link SuccessorsFunction} representing a directed acyclic graph that has at most one path between any two nodes
242 Checks that the passed argument is positive, and ceils it to a multiple of 32.
243 Converts a BigInteger to either an IPv4 or IPv6 address. If the IP is IPv4, it must be constrained to 32 bits, otherwise it is constrained to 128 bits. @param address the address represented as a big integer @param isIpv6 whether the created address should be IPv4 or IPv6 @return the BigInteger converted to an address @throws IllegalArgumentException if the BigInteger is not between 0 and maximum value for IPv4 or IPv6 respectively
244 Returns a string consisting of a specific number of concatenated copies of an input string. For example, {@code repeat("hey", 3)} returns the string {@code "heyheyhey"}. <p><b>Java 11+ users:</b> use {@code string.repeat(count)} instead. @param string any non-null string @param count the number of times to repeat it; a nonnegative integer @return a string containing {@code string} repeated {@code count} times (the empty string if {@code count} is zero) @throws IllegalArgumentException if {@code count} is negative
245 Creates a BloomFilter.
246 Returns a hash function which computes its hash code by concatenating the hash codes of the underlying hash functions together. This can be useful if you need to generate hash codes of a specific length. <p>For example, if you need 1024-bit hash codes, you could join two {@link Hashing#sha512} hash functions together: {@code Hashing.concatenating(Hashing.sha512(), Hashing.sha512())}. @since 19.0
247 @param c the number of compression rounds (must be positive) @param d the number of finalization rounds (must be positive) @param k0 the first half of the key @param k1 the second half of the key
248 Creates a new instance that uses the given file threshold, and optionally resets the data when the {@link ByteSource} returned by {@link #asByteSource} is finalized. @param fileThreshold the number of bytes before the stream should switch to buffering to a file @param resetOnFinalize if true, the {@link #reset} method will be called when the {@link ByteSource} returned by {@link #asByteSource} is finalized. @throws IllegalArgumentException if {@code fileThreshold} is negative
249 Returns an {@link Inet4Address}, given a byte array representation of the IPv4 address. @param bytes byte array representing an IPv4 address (should be of length 4) @return {@link Inet4Address} corresponding to the supplied byte array @throws IllegalArgumentException if a valid {@link Inet4Address} can not be created
250 Returns an array containing the same values as {@code array}, but guaranteed to be of a specified minimum length. If {@code array} already has a length of at least {@code minLength}, it is returned directly. Otherwise, a new array of size {@code minLength + padding} is returned, containing the values of {@code array}, and zeroes in the remaining places. @param array the source array @param minLength the minimum length the returned array must guarantee @param padding an extra amount to "grow" the array by if growth is necessary @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative @return an array containing the values of {@code array}, with guaranteed minimum length {@code minLength}
251 Returns an array containing the same values as {@code array}, but guaranteed to be of a specified minimum length. If {@code array} already has a length of at least {@code minLength}, it is returned directly. Otherwise, a new array of size {@code minLength + padding} is returned, containing the values of {@code array}, and zeroes in the remaining places. @param array the source array @param minLength the minimum length the returned array must guarantee @param padding an extra amount to "grow" the array by if growth is necessary @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative @return an array containing the values of {@code array}, with guaranteed minimum length {@code minLength}
252 Returns an array containing the same values as {@code array}, but guaranteed to be of a specified minimum length. If {@code array} already has a length of at least {@code minLength}, it is returned directly. Otherwise, a new array of size {@code minLength + padding} is returned, containing the values of {@code array}, and zeroes in the remaining places. @param array the source array @param minLength the minimum length the returned array must guarantee @param padding an extra amount to "grow" the array by if growth is necessary @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative @return an array containing the values of {@code array}, with guaranteed minimum length {@code minLength}
253 Returns an array containing the same values as {@code array}, but guaranteed to be of a specified minimum length. If {@code array} already has a length of at least {@code minLength}, it is returned directly. Otherwise, a new array of size {@code minLength + padding} is returned, containing the values of {@code array}, and zeroes in the remaining places. @param array the source array @param minLength the minimum length the returned array must guarantee @param padding an extra amount to "grow" the array by if growth is necessary @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative @return an array containing the values of {@code array}, with guaranteed minimum length {@code minLength}
254 Returns an array containing the same values as {@code array}, but guaranteed to be of a specified minimum length. If {@code array} already has a length of at least {@code minLength}, it is returned directly. Otherwise, a new array of size {@code minLength + padding} is returned, containing the values of {@code array}, and zeroes in the remaining places. @param array the source array @param minLength the minimum length the returned array must guarantee @param padding an extra amount to "grow" the array by if growth is necessary @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative @return an array containing the values of {@code array}, with guaranteed minimum length {@code minLength}
255 Returns an array containing the same values as {@code array}, but guaranteed to be of a specified minimum length. If {@code array} already has a length of at least {@code minLength}, it is returned directly. Otherwise, a new array of size {@code minLength + padding} is returned, containing the values of {@code array}, and zeroes in the remaining places. @param array the source array @param minLength the minimum length the returned array must guarantee @param padding an extra amount to "grow" the array by if growth is necessary @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative @return an array containing the values of {@code array}, with guaranteed minimum length {@code minLength}
256 Returns an array containing the same values as {@code array}, but guaranteed to be of a specified minimum length. If {@code array} already has a length of at least {@code minLength}, it is returned directly. Otherwise, a new array of size {@code minLength + padding} is returned, containing the values of {@code array}, and zeroes in the remaining places. @param array the source array @param minLength the minimum length the returned array must guarantee @param padding an extra amount to "grow" the array by if growth is necessary @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative @return an array containing the values of {@code array}, with guaranteed minimum length {@code minLength}
257 Returns an array containing the same values as {@code array}, but guaranteed to be of a specified minimum length. If {@code array} already has a length of at least {@code minLength}, it is returned directly. Otherwise, a new array of size {@code minLength + padding} is returned, containing the values of {@code array}, and zeroes in the remaining places. @param array the source array @param minLength the minimum length the returned array must guarantee @param padding an extra amount to "grow" the array by if growth is necessary @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative @return an array containing the values of {@code array}, with guaranteed minimum length {@code minLength}
258 Returns the {@code char} value that is equal to {@code value}, if possible. @param value any value in the range of the {@code char} type @return the {@code char} value that equals {@code value} @throws IllegalArgumentException if {@code value} is greater than {@link Character#MAX_VALUE} or less than {@link Character#MIN_VALUE}
259 Returns the {@code int} value that is equal to {@code value}, if possible. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Use {@link Math#toIntExact(long)} instead, but be aware that that method throws {@link ArithmeticException} rather than {@link IllegalArgumentException}. @param value any value in the range of the {@code int} type @return the {@code int} value that equals {@code value} @throws IllegalArgumentException if {@code value} is greater than {@link Integer#MAX_VALUE} or less than {@link Integer#MIN_VALUE}
260 Returns the {@code short} value that is equal to {@code value}, if possible. @param value any value in the range of the {@code short} type @return the {@code short} value that equals {@code value} @throws IllegalArgumentException if {@code value} is greater than {@link Short#MAX_VALUE} or less than {@link Short#MIN_VALUE}
261 Returns the {@code byte} value that is equal to {@code value}, if possible. @param value any value in the range of the {@code byte} type @return the {@code byte} value that equals {@code value} @throws IllegalArgumentException if {@code value} is greater than {@link Byte#MAX_VALUE} or less than {@link Byte#MIN_VALUE}
262 Returns the {@code byte} value that, when treated as unsigned, is equal to {@code value}, if possible. @param value a value between 0 and 255 inclusive @return the {@code byte} value that, when treated as unsigned, equals {@code value} @throws IllegalArgumentException if {@code value} is negative or greater than 255
263 Returns the {@code int} value that, when treated as unsigned, is equal to {@code value}, if possible. @param value a value between 0 and 2<sup>32</sup>-1 inclusive @return the {@code int} value that, when treated as unsigned, equals {@code value} @throws IllegalArgumentException if {@code value} is negative or greater than or equal to 2<sup>32</sup> @since 21.0
264 Returns a {@link Scheduler} that schedules the task using the {@link ScheduledExecutorService#scheduleWithFixedDelay} method. @param initialDelay the time to delay first execution @param delay the delay between the termination of one execution and the commencement of the next @param unit the time unit of the initialDelay and delay parameters
265 Returns a {@link Scheduler} that schedules the task using the {@link ScheduledExecutorService#scheduleAtFixedRate} method. @param initialDelay the time to delay first execution @param period the period between successive executions of the task @param unit the time unit of the initialDelay and period parameters
266 Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}. <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code value} is greater than {@code max}, {@code max} is returned. @param value the {@code char} value to constrain @param min the lower bound (inclusive) of the range to constrain {@code value} to @param max the upper bound (inclusive) of the range to constrain {@code value} to @throws IllegalArgumentException if {@code min > max} @since 21.0
267 Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}. <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code value} is greater than {@code max}, {@code max} is returned. <p><b>Java 21+ users:</b> Use {@code Math.clamp} instead. Note that that method is capable of constraining a {@code long} input to an {@code int} range. @param value the {@code long} value to constrain @param min the lower bound (inclusive) of the range to constrain {@code value} to @param max the upper bound (inclusive) of the range to constrain {@code value} to @throws IllegalArgumentException if {@code min > max} @since 21.0
268 Given a {@code resourceName} that is relative to {@code contextClass}, returns a {@code URL} pointing to the named resource. @throws IllegalArgumentException if the resource is not found
269 Starts the stopwatch. @return this {@code Stopwatch} instance @throws IllegalStateException if the stopwatch is already running.
270 Stops the stopwatch. Future reads will return the fixed duration that had elapsed up to this point. @return this {@code Stopwatch} instance @throws IllegalStateException if the stopwatch is already stopped.
271 Precondition tester for {@code Iterator.remove()} that throws an exception with a consistent error message.
272 Configures this {@code Builder} to order entries by value according to the specified comparator. <p>The sort order is stable, that is, if two entries have values that compare as equivalent, the entry that was inserted first will be first in the built map's iteration order. @throws IllegalStateException if this method was already called @since 19.0
273 Sets the minimum total size for the internal hash tables. For example, if the initial capacity is {@code 60}, and the concurrency level is {@code 8}, then eight segments are created, each having a hash table of size eight. Providing a large enough estimate at construction time avoids the need for expensive resizing operations later, but setting this value unnecessarily high wastes memory. @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code initialCapacity} is negative @throws IllegalStateException if an initial capacity was already set
274 Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The table is internally partitioned to try to permit the indicated number of concurrent updates without contention. Because assignment of entries to these partitions is not necessarily uniform, the actual concurrency observed may vary. Ideally, you should choose a value to accommodate as many threads as will ever concurrently modify the table. Using a significantly higher value than you need can waste space and time, and a significantly lower value can lead to thread contention. But overestimates and underestimates within an order of magnitude do not usually have much noticeable impact. A value of one permits only one thread to modify the cache at a time, but since read operations and cache loading computations can proceed concurrently, this still yields higher concurrency than full synchronization. <p>Defaults to 4. <b>Note:</b>The default may change in the future. If you care about this value, you should always choose it explicitly. <p>The current implementation uses the concurrency level to create a fixed number of hashtable segments, each governed by its own write lock. The segment lock is taken once for each explicit write, and twice for each cache loading computation (once prior to loading the new value, and once after loading completes). Much internal cache management is performed at the segment granularity. For example, access queues and write queues are kept per segment when they are required by the selected eviction algorithm. As such, when writing unit tests it is not uncommon to specify {@code concurrencyLevel(1)} in order to achieve more deterministic eviction behavior. <p>Note that future implementations may abandon segment locking in favor of more advanced concurrency controls. @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code concurrencyLevel} is nonpositive @throws IllegalStateException if a concurrency level was already set
275 Sets the minimum total size for the internal hash tables. For example, if the initial capacity is {@code 60}, and the concurrency level is {@code 8}, then eight segments are created, each having a hash table of size eight. Providing a large enough estimate at construction time avoids the need for expensive resizing operations later, but setting this value unnecessarily high wastes memory. @throws IllegalArgumentException if {@code initialCapacity} is negative @throws IllegalStateException if an initial capacity was already set
276 Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The table is internally partitioned to try to permit the indicated number of concurrent updates without contention. Because assignment of entries to these partitions is not necessarily uniform, the actual concurrency observed may vary. Ideally, you should choose a value to accommodate as many threads as will ever concurrently modify the table. Using a significantly higher value than you need can waste space and time, and a significantly lower value can lead to thread contention. But overestimates and underestimates within an order of magnitude do not usually have much noticeable impact. A value of one permits only one thread to modify the map at a time, but since read operations can proceed concurrently, this still yields higher concurrency than full synchronization. Defaults to 4. <p><b>Note:</b> Prior to Guava release 9.0, the default was 16. It is possible the default will change again in the future. If you care about this value, you should always choose it explicitly. @throws IllegalArgumentException if {@code concurrencyLevel} is nonpositive @throws IllegalStateException if a concurrency level was already set
277 Specifies the maximum number of entries the cache may contain. <p>Note that the cache <b>may evict an entry before this limit is exceeded</b>. For example, in the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each resulting segment inside the cache <i>independently</i> limits its own size to approximately {@code maximumSize / concurrencyLevel}. <p>When eviction is necessary, the cache evicts entries that are less likely to be used again. For example, the cache may evict an entry because it hasn't been used recently or very often. <p>If {@code maximumSize} is zero, elements will be evicted immediately after being loaded into cache. This can be useful in testing, or to disable caching temporarily. <p>This feature cannot be used in conjunction with {@link #maximumWeight}. @param maximumSize the maximum size of the cache @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code maximumSize} is negative @throws IllegalStateException if a maximum size or weight was already set
278 Specifies the maximum weight of entries the cache may contain. Weight is determined using the {@link Weigher} specified with {@link #weigher}, and use of this method requires a corresponding call to {@link #weigher} prior to calling {@link #build}. <p>Note that the cache <b>may evict an entry before this limit is exceeded</b>. For example, in the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each resulting segment inside the cache <i>independently</i> limits its own weight to approximately {@code maximumWeight / concurrencyLevel}. <p>When eviction is necessary, the cache evicts entries that are less likely to be used again. For example, the cache may evict an entry because it hasn't been used recently or very often. <p>If {@code maximumWeight} is zero, elements will be evicted immediately after being loaded into cache. This can be useful in testing, or to disable caching temporarily. <p>Note that weight is only used to determine whether the cache is over capacity; it has no effect on selecting which entry should be evicted next. <p>This feature cannot be used in conjunction with {@link #maximumSize}. @param maximumWeight the maximum total weight of entries the cache may contain @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code maximumWeight} is negative @throws IllegalStateException if a maximum weight or size was already set @since 11.0
279 Specifies the weigher to use in determining the weight of entries. Entry weight is taken into consideration by {@link #maximumWeight(long)} when determining which entries to evict, and use of this method requires a corresponding call to {@link #maximumWeight(long)} prior to calling {@link #build}. Weights are measured and recorded when entries are inserted into the cache, and are thus effectively static during the lifetime of a cache entry. <p>When the weight of an entry is zero it will not be considered for size-based eviction (though it still may be evicted by other means). <p><b>Important note:</b> Instead of returning <em>this</em> as a {@code CacheBuilder} instance, this method returns {@code CacheBuilder<K1, V1>}. From this point on, either the original reference or the returned reference may be used to complete configuration and build the cache, but only the "generic" one is type-safe. That is, it will properly prevent you from building caches whose key or value types are incompatible with the types accepted by the weigher already provided; the {@code CacheBuilder} type cannot do this. For best results, simply use the standard method-chaining idiom, as illustrated in the documentation at top, configuring a {@code CacheBuilder} and building your {@link Cache} all in a single statement. <p><b>Warning:</b> if you ignore the above advice, and use this {@code CacheBuilder} to build a cache whose key or value type is incompatible with the weigher, you will likely experience a {@link ClassCastException} at some <i>undefined</i> point in the future. @param weigher the weigher to use in calculating the weight of cache entries @return this {@code CacheBuilder} instance (for chaining) @throws IllegalStateException if a weigher was already set or {@link #maximumSize(long)} was previously called @since 11.0
280 Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed after the entry's creation, or the most recent replacement of its value. <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long) maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be useful in testing, or to disable caching temporarily without a code change. <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or write operations. Expired entries are cleaned up as part of the routine maintenance described in the class javadoc. <p>If you can represent the duration as a {@link Duration} (which should be preferred when feasible), use {@link #expireAfterWrite(Duration)} instead. @param duration the length of time after an entry is created that it should be automatically removed @param unit the unit that {@code duration} is expressed in @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code duration} is negative @throws IllegalStateException if {@link #expireAfterWrite} was already set
281 Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed after the entry's creation, the most recent replacement of its value, or its last access. Access time is reset by all cache read and write operations (including {@code Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by {@code containsKey(Object)}, nor by operations on the collection-views of {@link Cache#asMap}. So, for example, iterating through {@code Cache.asMap().entrySet()} does not reset access time for the entries you retrieve. <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long) maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be useful in testing, or to disable caching temporarily without a code change. <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or write operations. Expired entries are cleaned up as part of the routine maintenance described in the class javadoc. <p>If you can represent the duration as a {@link Duration} (which should be preferred when feasible), use {@link #expireAfterAccess(Duration)} instead. @param duration the length of time after an entry is last accessed that it should be automatically removed @param unit the unit that {@code duration} is expressed in @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code duration} is negative @throws IllegalStateException if {@link #expireAfterAccess} was already set
282 Specifies that active entries are eligible for automatic refresh once a fixed duration has elapsed after the entry's creation, or the most recent replacement of its value. The semantics of refreshes are specified in {@link LoadingCache#refresh}, and are performed by calling {@link CacheLoader#reload}. <p>As the default implementation of {@link CacheLoader#reload} is synchronous, it is recommended that users of this method override {@link CacheLoader#reload} with an asynchronous implementation; otherwise refreshes will be performed during unrelated cache read and write operations. <p>Currently automatic refreshes are performed when the first stale request for an entry occurs. The request triggering refresh will make a synchronous call to {@link CacheLoader#reload} and immediately return the new value if the returned future is complete, and the old value otherwise. <p><b>Note:</b> <i>all exceptions thrown during refresh will be logged and then swallowed</i>. <p>If you can represent the duration as a {@link Duration} (which should be preferred when feasible), use {@link #refreshAfterWrite(Duration)} instead. @param duration the length of time after an entry is created that it should be considered stale, and thus eligible for refresh @param unit the unit that {@code duration} is expressed in @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code duration} is negative @throws IllegalStateException if {@link #refreshAfterWrite} was already set @since 11.0
283 Sets a custom {@code Equivalence} strategy for comparing keys. <p>By default, the cache uses {@link Equivalence#identity} to determine key equality when {@link #weakKeys} is specified, and {@link Equivalence#equals()} otherwise. @return this {@code CacheBuilder} instance (for chaining)
284 Sets a custom {@code Equivalence} strategy for comparing values. <p>By default, the cache uses {@link Equivalence#identity} to determine value equality when {@link #weakValues} or {@link #softValues} is specified, and {@link Equivalence#equals()} otherwise. @return this {@code CacheBuilder} instance (for chaining)
285 Sets a custom {@code Equivalence} strategy for comparing keys. <p>By default, the map uses {@link Equivalence#identity} to determine key equality when {@link #weakKeys} is specified, and {@link Equivalence#equals()} otherwise. The only place this is used is in {@link Interners.WeakInterner}.
286 Constructs a new type token of {@code T}. <p>Clients create an empty anonymous subclass. Doing so embeds the type parameter in the anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure. <p>For example: {@snippet : TypeToken<List<String>> t = new TypeToken<List<String>>() {}; }
287 @see Service#failureCause()
288 Ensures that {@code index} specifies a valid <i>element</i> in an array, list or string of size {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive. @param index a user-supplied index identifying an element of an array, list or string @param size the size of that array, list or string @param desc the text to use to describe this index in an error message @return the value of {@code index} @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size} @throws IllegalArgumentException if {@code size} is negative
289 Ensures that {@code index} specifies a valid <i>position</i> in an array, list or string of size {@code size}. A position index may range from zero to {@code size}, inclusive. @param index a user-supplied index identifying a position in an array, list or string @param size the size of that array, list or string @param desc the text to use to describe this index in an error message @return the value of {@code index} @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size} @throws IllegalArgumentException if {@code size} is negative
290 Returns a predicate that always evaluates to {@code true}. <p><b>Discouraged:</b> Prefer using {@code x -> true}, but note that lambdas do not have human-readable {@link #toString()} representations and are not serializable.
291 Returns a predicate that always evaluates to {@code false}. <p><b>Discouraged:</b> Prefer using {@code x -> false}, but note that lambdas do not have human-readable {@link #toString()} representations and are not serializable.
292 Returns a predicate that evaluates to {@code true} if the object reference being tested is null. <p><b>Discouraged:</b> Prefer using either {@code x -> x == null} or {@code Objects::isNull}, but note that lambdas and method references do not have human-readable {@link #toString()} representations and are not serializable.
293 Returns a predicate that evaluates to {@code true} if the object reference being tested is not null. <p><b>Discouraged:</b> Prefer using either {@code x -> x != null} or {@code Objects::nonNull}, but note that lambdas and method references do not have human-readable {@link #toString()} representations and are not serializable.
294 Returns a predicate that evaluates to {@code true} if both of its components evaluate to {@code true}. The components are evaluated in order, and evaluation will be "short-circuited" as soon as a false predicate is found. <p><b>Discouraged:</b> Prefer using {@code first.and(second)}.
295 Returns a predicate that evaluates to {@code true} if either of its components evaluates to {@code true}. The components are evaluated in order, and evaluation will be "short-circuited" as soon as a true predicate is found. <p><b>Discouraged:</b> Prefer using {@code first.or(second)}.
296 Returns a splitter that behaves equivalently to {@code this} splitter, but automatically omits empty strings from the results. For example, {@code Splitter.on(',').omitEmptyStrings().split(",a,,,b,c,,")} returns an iterable containing only {@code ["a", "b", "c"]}. <p>If either {@code trimResults} option is also specified when creating a splitter, that splitter always trims results first before checking for emptiness. So, for example, {@code Splitter.on(':').omitEmptyStrings().trimResults().split(": : : ")} returns an empty iterable. <p>Note that it is ordinarily not possible for {@link #split(CharSequence)} to return an empty iterable, but when using this option, it can (if the input sequence consists of nothing but separators). @return a splitter with the desired configuration
297 Returns a splitter that behaves equivalently to {@code this} splitter but stops splitting after it reaches the limit. The limit defines the maximum number of items returned by the iterator, or the maximum size of the list returned by {@link #splitToList}. <p>For example, {@code Splitter.on(',').limit(3).split("a,b,c,d")} returns an iterable containing {@code ["a", "b", "c,d"]}. When omitting empty strings, the omitted strings do not count. Hence, {@code Splitter.on(',').limit(3).omitEmptyStrings().split("a,,,b,,,c,d")} returns an iterable containing {@code ["a", "b", "c,d"]}. When trim is requested, all entries are trimmed, including the last. Hence {@code Splitter.on(',').limit(3).trimResults().split(" a , b , c , d ")} results in {@code ["a", "b", "c , d"]}. @param maxItems the maximum number of items returned @return a splitter with the desired configuration @since 9.0
298 Splits {@code sequence} into string components and returns them as an immutable list. If you want an {@link Iterable} which may be lazily evaluated, use {@link #split(CharSequence)}. @param sequence the sequence of characters to split @return an immutable list of the segments split from the parameter @since 15.0
299 Returns a string representation of this system property.
300 Returns the current elapsed time shown on this stopwatch, expressed in the desired time unit, with any fraction rounded down. <p><b>Note:</b> the overhead of measurement can be more than a microsecond, so it is generally not useful to specify {@link TimeUnit#NANOSECONDS} precision here. <p>It is generally not a good idea to use an ambiguous, unitless {@code long} to represent elapsed time. Therefore, we recommend using {@link #elapsed()} instead, which returns a strongly-typed {@code Duration} instance. @since 14.0 (since 10.0 as {@code elapsedTime()})
301 Returns the current elapsed time shown on this stopwatch as a {@link Duration}. Unlike {@link #elapsed(TimeUnit)}, this method does not lose any precision due to rounding. @since 22.0 (but only since 33.4.0 in the Android flavor)
302 Returns a string representation of the current elapsed time.
303 Returns the given string if it is non-null; the empty string otherwise. @param string the string to test and possibly return @return {@code string} itself if it is non-null; {@code ""} if it is null
304 Returns the longest string {@code prefix} such that {@code a.toString().startsWith(prefix) && b.toString().startsWith(prefix)}, taking care not to split surrogate pairs. If {@code a} and {@code b} have no common prefix, returns the empty string. @since 11.0
305 Returns the longest string {@code suffix} such that {@code a.toString().endsWith(suffix) && b.toString().endsWith(suffix)}, taking care not to split surrogate pairs. If {@code a} and {@code b} have no common suffix, returns the empty string. @since 11.0
306 Returns a supplier that always supplies {@code instance}. <p><b>Discouraged:</b> Prefer using {@code () -> instance}, but note that lambdas do not have human-readable {@link #toString()} representations and are not serializable. If you need a supplier that is serializable, use {@code (Supplier<T> & Serializable) () -> instance}.
307 Constructor for use by subclasses.
308 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with no message otherwise. @throws VerifyException if {@code expression} is {@code false} @see Preconditions#checkState Preconditions.checkState()
309 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
310 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
311 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
312 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. @param expression a boolean expression @param errorMessageTemplate a template for the exception message should the check fail. The message is formed by replacing each {@code %s} placeholder in the template with an argument. These are matched by position - the first {@code %s} gets {@code errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in square braces. Unmatched placeholders will be left as-is. @param errorMessageArgs the arguments to be substituted into the message template. Arguments are converted to strings using {@link String#valueOf(Object)}. @throws VerifyException if {@code expression} is {@code false} @see Preconditions#checkState Preconditions.checkState()
313 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
314 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
315 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
316 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
317 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
318 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
319 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
320 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
321 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
322 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
323 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
324 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
325 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
326 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
327 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
328 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
329 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
330 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
331 Cleans up the given reference and any other references already in the queue. Catches and logs all throwables. @return true if the caller should continue to wait for more references to be added to the queue, false if the associated FinalizableReferenceQueue is no longer referenced.
332 Constructs an instance with all counts initialized to zero.
333 Increments all counters by the values in {@code other}.
334 Constructor for use by subclasses.
335 Returns the platform preferred map implementation that preserves insertion order when used only for insertions.
336 @since 12.0
337 @since 11.0
338 Constructs a new {@code CacheBuilder} instance with default settings, including strong keys, strong values, and no automatic eviction of any kind. <p>Note that while this return type is {@code CacheBuilder<Object, Object>}, type parameters on the {@link #build} methods allow you to create a cache of any key and value type desired.
339 Computes or retrieves the values corresponding to {@code keys}. This method is called by {@link LoadingCache#getAll}. <p>If the returned map doesn't contain all requested {@code keys} then the entries it does contain will be cached, but {@code getAll} will throw an exception. If the returned map contains extra keys not present in {@code keys} then all returned entries will be cached, but only the entries for {@code keys} will be returned from {@code getAll}. <p>This method should be overridden when bulk retrieval is significantly more efficient than many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls to {@link LoadingCache#get} if this method is not overridden. @param keys the unique, non-null keys whose values should be loaded @return a map from each key in {@code keys} to the value associated with that key; <b>may not contain null values</b> @throws Exception if unable to load the result @throws InterruptedException if this method is interrupted. {@code InterruptedException} is treated like any other {@code Exception} in all respects except that, when it is caught, the thread's interrupt status is set @since 11.0
340 Returns the number of times {@link Cache} lookup methods have returned either a cached or uncached value. This is defined as {@code hitCount + missCount}. <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is guaranteed not to throw an exception). If you require specific handling, we recommend implementing your own stats collector.
341 Returns the total number of times that {@link Cache} lookup methods attempted to load new values. This includes both successful load operations and those that threw exceptions. This is defined as {@code loadSuccessCount + loadExceptionCount}. <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is guaranteed not to throw an exception). If you require specific handling, we recommend implementing your own stats collector.
342 Returns the ratio of cache loading attempts which threw exceptions. This is defined as {@code loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or {@code 0.0} when {@code loadSuccessCount + loadExceptionCount == 0}. <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is guaranteed not to throw an exception). If you require specific handling, we recommend implementing your own stats collector.
343 Returns the average time spent loading new values. This is defined as {@code totalLoadTime / (loadSuccessCount + loadExceptionCount)}. <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is guaranteed not to throw an exception). If you require specific handling, we recommend implementing your own stats collector.
344 Constructor for use by subclasses.
345 Constructor for use by subclasses.
346 Constructor for use by subclasses.
347 Constructor for use by subclasses.
348 Constructor for use by subclasses.
349 Constructor for use by subclasses.
350 Constructor for use by subclasses.
351 Constructor for use by subclasses.
352 Constructor for use by subclasses.
353 Drains the recency queue, updating eviction metadata that the entries therein were read in the specified relative order. This currently amounts to adding them to relevant eviction lists (accounting for the fact that they could have been removed from the map since being added to the recency queue).
354 Copies {@code original} into a new entry chained to {@code newNext}. Returns the new entry, or {@code null} if {@code original} was already garbage collected.
355 Removes all {@code Column} mappings whose row key and value satisfy the given predicate.
356 Must be called at the end of each subclass's constructor. This method performs the "real" initialization; we can't put this in the constructor because, in the case where futures are already complete, we would not initialize the subclass before calling {@link #collectValueFromNonCancelledFuture}. As this is called after the subclass is constructed, we're guaranteed to have properly initialized the subclass.
357 Returns an Executor that will propagate {@link RejectedExecutionException} from the delegate executor to the given {@code future}. <p>Note, the returned executor can only be used once.
358 Returns the result of the input {@code Future}, which must have already completed. <p>The benefits of this method are twofold. First, the name "getDone" suggests to readers that the {@code Future} is already done. Second, if buggy code calls {@code getDone} on a {@code Future} that is still pending, the program will throw instead of block. This can be important for APIs like {@link #whenAllComplete whenAllComplete(...)}{@code .}{@link FutureCombiner#call(Callable, Executor) call(...)}, where it is easy to use a new input from the {@code call} implementation but forget to add it to the arguments of {@code whenAllComplete}. <p>If you are looking for a method to determine whether a given {@code Future} is done, use the instance method {@link Future#isDone()}. @throws ExecutionException if the {@code Future} failed with an exception @throws CancellationException if the {@code Future} was cancelled @throws IllegalStateException if the {@code Future} is not done @since 20.0
359 Returns the result of calling {@link Future#get()} uninterruptibly on a task known not to throw a checked exception. This makes {@code Future} more suitable for lightweight, fast-running tasks that, barring bugs in the code, will not fail. This gives it exception-handling behavior similar to that of {@code ForkJoinTask.join}. <p>Exceptions from {@code Future.get} are treated as follows: <ul> <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@link UncheckedExecutionException} (if the cause is an {@code Exception}) or {@link ExecutionError} (if the cause is an {@code Error}). <li>Any {@link InterruptedException} causes a retry of the {@code get} call. The interrupt is restored before {@code getUnchecked} returns. <li>Any {@link CancellationException} is propagated untouched. So is any other {@link RuntimeException} ({@code get} implementations are discouraged from throwing such exceptions). </ul> <p>The overall principle is to eliminate all checked exceptions: to loop to avoid {@code InterruptedException}, to pass through {@code CancellationException}, and to wrap any exception from the underlying computation in an {@code UncheckedExecutionException} or {@code ExecutionError}. <p>For an uninterruptible {@code get} that preserves other exceptions, see {@link Uninterruptibles#getUninterruptibly(Future)}. @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with an {@code Exception} as its cause @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code Error} as its cause @throws CancellationException if {@code get} throws a {@code CancellationException} @since 10.0
360 Clears all entries from the key and value reference queues.
361 Returns the default equivalence strategy used to compare and hash keys or values referenced at this strength. This strategy will be used unless the user explicitly specifies an alternate strategy.
362 Returns the default equivalence strategy used to compare and hash keys or values referenced at this strength. This strategy will be used unless the user explicitly specifies an alternate strategy.
363 Returns the default equivalence strategy used to compare and hash keys or values referenced at this strength. This strategy will be used unless the user explicitly specifies an alternate strategy.
364 Returns the default equivalence strategy used to compare and hash keys or values referenced at this strength. This strategy will be used unless the user explicitly specifies an alternate strategy.
365 Returns the default equivalence strategy used to compare and hash keys or values referenced at this strength. This strategy will be used unless the user explicitly specifies an alternate strategy.
366 Returns true if the entry has expired.
367 {@inheritDoc} <p>If the data in the multiset is modified by any other threads during this method, it is undefined which (if any) of these modifications will be reflected in the result.
368 Returns the number of elements remaining in {@code iterator}. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.
369 An implementation of {@link Multiset#size}.
370 Returns the sum of {@code a} and {@code b} unless it would overflow or underflow in which case {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively. @since 20.0
371 Returns the difference of {@code a} and {@code b} unless it would overflow or underflow in which case {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively. @since 20.0
372 Returns the product of {@code a} and {@code b} unless it would overflow or underflow in which case {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively. @since 20.0
373 Returns the platform preferred set implementation that preserves insertion order when used only for insertions.
374 Constructor for use by subclasses.
375 Creates a new iterator with the given first element, or, if {@code firstOrNull} is null, creates a new empty iterator.
376 Constructor for use by subclasses.
377 Creates an unmodifiable, empty collection of values. <p>This is used in {@link #removeAll} on an empty key.
378 A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of {@code entrySet}. If you override {@code entrySet}, you may wish to override {@code pollFirstEntry} to forward to this implementation.
379 A sensible definition of {@link #pollFirst} in terms of the {@code iterator} method. If you override {@link #iterator} you may wish to override {@link #pollFirst} to forward to this implementation.
380 If the delegate collection is empty, but the multimap has values for the key, replace the delegate with the new collection for the key. <p>For a subcollection, refresh its ancestor and validate that the ancestor delegate hasn't changed.
381 {@inheritDoc} <p>The returned collection is not serializable.
382 {@inheritDoc} <p>The iterator generated by the returned collection traverses the values for one key, followed by the values of a second key, and so on.
383 {@inheritDoc} <p>The iterator generated by the returned collection traverses the values in the order they were added to the multimap. Because the values may have duplicates and follow the insertion ordering, this method returns a {@link List}, instead of the {@link Collection} specified in the {@link ListMultimap} interface.
384 {@inheritDoc} <p>The iterator generated by the returned collection traverses the values for one key, followed by the values of a second key, and so on. <p>Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the time the entry is returned by a method call to the collection or its iterator.
385 {@inheritDoc} <p>The iterator generated by the returned collection traverses the entries in the order they were added to the multimap. Because the entries may have duplicates and follow the insertion ordering, this method returns a {@link List}, instead of the {@link Collection} specified in the {@link ListMultimap} interface. <p>An entry's {@link Entry#getKey} method always returns the same key, regardless of what happens subsequently. As long as the corresponding key-value mapping is not removed from the multimap, {@link Entry#getValue} returns the value from the multimap, which may change over time, and {@link Entry#setValue} modifies that value. Removing the mapping from the multimap does not alter the value returned by {@code getValue()}, though a subsequent {@code setValue()} call won't update the multimap but will lead to a revised value being returned by {@code getValue()}.
386 Returns best-effort-sized StringBuilder based on the given collection size.
387 Creates an {@code ArrayList} instance backed by an array with the specified initial size; simply delegates to {@link ArrayList#ArrayList(int)}. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead, use {@code new }{@link ArrayList#ArrayList(int) ArrayList}{@code <>(int)} directly, taking advantage of <a href="https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation">"diamond" syntax</a>. (Unlike here, there is no risk of overload ambiguity, since the {@code ArrayList} constructors very wisely did not accept varargs.) @param initialArraySize the exact size of the initial backing array for the returned array list ({@code ArrayList} documentation calls this value the "capacity") @return a new, empty {@code ArrayList} which is guaranteed not to resize itself unless its size reaches {@code initialArraySize + 1} @throws IllegalArgumentException if {@code initialArraySize} is negative
388 Returns a capacity that is sufficient to keep the map from being resized as long as it grows no larger than expectedSize and the load factor is ≥ its default (0.75).
389 Uses an {@link ArrayList} to store value collections, initialized to expect the specified number of values per key. @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}
390 Uses a hash-based {@code Set} to store value collections, initialized to expect the specified number of values per key. @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}
391 Uses an insertion-ordered hash-based {@code Set} to store value collections, initialized to expect the specified number of values per key. @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}
392 Uses a hash table to map keys to value collections, initialized to expect the specified number of keys. @throws IllegalArgumentException if {@code expectedKeys < 0}
393 Uses an hash table to map keys to value collections, initialized to expect the specified number of keys. <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link Multimap#asMap()} will iterate through the keys in the order that they were first added to the multimap, save that if all values associated with a key are removed and then the key is added back into the multimap, that key will come last in the key iteration order.
394 An implementation of {@link Multiset#setCount(Object, int)}.
395 An implementation of {@link Multiset#setCount(Object, int, int)}.
396 A sensible definition of {@link #hashCode} in terms of {@link #iterator}. If you override {@link #iterator}, you may wish to override {@link #equals} to forward to this implementation. @since 7.0
397 A sensible definition of {@link #equals} in terms of {@link #size} and {@link #containsAll}. If you override either of those methods, you may wish to override {@link #equals} to forward to this implementation. @since 7.0
398 Returns the hash code for this multimap. <p>The hash code of a multimap is defined as the hash code of the map view, as returned by {@link Multimap#asMap}. @see Map#hashCode
399 Returns a string representation of the multimap, generated by calling {@code toString} on the map returned by {@link Multimap#asMap}. @return a string representation of the multimap
400 A sensible definition of {@link #removeAll} in terms of the {@code removeAll} method of {@link #elementSet}. If you override {@link #elementSet}, you may wish to override {@link #removeAll} to forward to this implementation. @since 7.0
401 {@inheritDoc} <p>This implementation returns {@code true} if {@code object} is a multiset of the same size and if, for each element, the two multisets have the same count.
402 A sensible, albeit inefficient, definition of {@link #equals} in terms of {@code entrySet().size()} and {@link #count}. If you override either of these methods, you may wish to override {@link #equals} to forward to this implementation. @since 7.0
403 Returns the first element in {@code iterable} or {@code defaultValue} if the iterable is empty. The {@link Iterators} analog to this method is {@link Iterators#getNext}. <p>If no default value is desired (and the caller instead wants a {@link NoSuchElementException} to be thrown), it is recommended that {@code iterable.iterator().next()} is used instead. <p>To get the only element in a single-element {@code Iterable}, consider using {@link #getOnlyElement(Iterable)} or {@link #getOnlyElement(Iterable, Object)} instead. <p><b>{@code Stream} equivalent:</b> {@code stream.findFirst().orElse(defaultValue)} <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list), consider using {@code collection.getFirst()} instead. Note that if the collection is empty, {@code getFirst()} throws a {@code NoSuchElementException}, while this method returns the default value. @param defaultValue the default value to return if the iterable is empty @return the first element of {@code iterable} or the default value @since 7.0
404 Returns a map view that associates each key with the corresponding values in the multimap. Changes to the returned map, such as element removal, will update the underlying multimap. The map does not support {@code setValue} on its entries, {@code put}, or {@code putAll}. <p>When passed a key that is present in the map, {@code asMap().get(Object)} has the same behavior as {@link #get}, returning a live collection. When passed a key that is not present, however, {@code asMap().get(Object)} returns {@code null} instead of an empty collection. <p>Though the method signature doesn't say so explicitly, the returned map has {@link SortedSet} values.
405 {@inheritDoc} <p>Because a {@code TreeMultimap} has unique sorted keys, this method returns a {@link NavigableSet}, instead of the {@link java.util.Set} specified in the {@link Multimap} interface. @since 14.0 (present with return type {@code SortedSet} since 2.0)
406 Returns the specified comparator if not null; otherwise returns {@code Ordering.natural()}. This method is an abomination of generics; the only purpose of this method is to contain the ugly type-casting in one place.
407 Returns the string representation {@code rowMap().toString()}.
408 Returns the string representation {@code rowMap().toString()}.
409 @serialData expectedValuesPerKey, number of distinct keys, and then for each distinct key: the key, number of values for that key, and the key's values
410 @serialData expectedValuesPerKey, number of distinct keys, and then for each distinct key: the key, number of values for that key, and the key's values
411 @serialData number of distinct keys, and then for each distinct key: the key, the number of values for that key, and the key's values
412 Populates a multimap by reading an input stream, as part of deserialization. See {@link #writeMultimap} for the data format.
413 Returns an immutable set of the valid column keys, including those that are associated with null values only. @return immutable set of column keys
414 Returns an immutable set of the valid row keys, including those that are associated with null values only. @return immutable set of row keys
415 Returns an immutable set of the distinct keys in this multimap, in the same order as they appear in this multimap.
416 Returns {@code true} if the provided column key is among the column keys provided when the table was constructed.
417 Returns {@code true} if the provided row key is among the row keys provided when the table was constructed.
418 Returns an immutable list of the values for the given key. If no mappings in the multimap have the provided key, an empty immutable list is returned. The values are in the same order as the parameters used to build this multimap.
419 {@inheritDoc} @throws NullPointerException if {@code columnKey} is {@code null}
420 Adds a key-value mapping to the built multimap.
421 Returns, conceptually, "origin + distance", or equivalently, the result of calling {@link #next} on {@code origin} {@code distance} times.
422 Returns a {@code Spliterator.OfDouble} that iterates over the elements of the spliterators generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code function} returns {@code null} for an input, it is replaced with an empty stream.)
423 Returns a {@code Spliterator.OfInt} that iterates over the elements of the spliterators generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code function} returns {@code null} for an input, it is replaced with an empty stream.)
424 Returns a {@code Spliterator.OfLong} that iterates over the elements of the spliterators generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code function} returns {@code null} for an input, it is replaced with an empty stream.)
425 Returns a {@code Spliterator} that iterates over the elements of the spliterators generated by applying {@code function} to the elements of {@code fromSpliterator}.
426 A sensible definition of {@link #containsAll} in terms of {@link #contains} . If you override {@link #contains}, you may wish to override {@link #containsAll} to forward to this implementation. @since 7.0
427 Stores the hash table mask as the number of bits needed to represent an index.
428 Stores the hash table mask as the number of bits needed to represent an index.
429 Resizes the internal entries array to the specified capacity, which may be greater or less than the current capacity.
430 Resizes the internal entries array to the specified capacity, which may be greater or less than the current capacity.
431 Returns the power of 2 hashtable size required to hold the expected number of items or the minimum hashtable size, whichever is greater.
432 Compares two {@code int} values as specified by {@link Integer#compare}, <i>if</i> the result of this comparison chain has not already been determined.
433 Compares two {@code long} values as specified by {@link Long#compare}, <i>if</i> the result of this comparison chain has not already been determined.
434 Compares two {@code boolean} values, considering {@code true} to be less than {@code false}, <i>if</i> the result of this comparison chain has not already been determined. <p>Java 8+ users: you can get the equivalent from {@link Booleans#trueFirst()}. For example: <pre> Comparator.comparing(Foo::isBar, {@link Booleans#trueFirst()}) </pre> @since 12.0
435 Compares two {@code boolean} values, considering {@code false} to be less than {@code true}, <i>if</i> the result of this comparison chain has not already been determined. <p>Java 8+ users: you can get the equivalent from {@link Booleans#falseFirst()}. For example: <pre> Comparator.comparing(Foo::isBar, {@link Booleans#falseFirst()}) </pre> @since 12.0 (present as {@code compare} since 2.0)
436 Returns {@code true} if this range has a lower endpoint.
437 Returns {@code true} if this range has an upper endpoint.
438 Constructor for use by subclasses.
439 @serialData the key class, value class, number of entries, first key, first value, second key, second value, and so on.
440 @serialData the key class, number of entries, first key, first value, second key, second value, and so on.
441 @serialData the number of entries, first key, first value, second key, second value, and so on.
442 Returns {@code element} cast to {@code E}, if it actually is a nonnull E. Otherwise, throws either a NullPointerException or a ClassCastException as appropriate.
443 @serialData the number of distinct elements, the first element, its count, the second element, its count, and so on
444 @serialData the number of distinct elements, the first element, its count, the second element, its count, and so on
445 @serialData the comparator, the number of distinct elements, the first element, its count, the second element, its count, and so on
446 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableTable#builder}.
447 Returns a fluent iterable containing {@code elements} in the specified order. <p>The returned iterable is an unmodifiable view of the input array. <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#of(Object[]) Stream.of(T...)}. @since 20.0 (since 18.0 as an overload of {@code of})
448 Returns a fluent iterable containing no elements. <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}. @since 20.0
449 Determines whether this fluent iterable is empty. <p><b>{@code Stream} equivalent:</b> {@code !stream.findAny().isPresent()}.
450 Returns a fluent iterable whose iterators traverse first the elements of this fluent iterable, followed by those of {@code other}. The iterators are not polled until necessary. <p>The returned iterable's {@code Iterator} supports {@code remove()} when the corresponding {@code Iterator} supports it. <p><b>{@code Stream} equivalent:</b> {@link Stream#concat}. @since 18.0
451 Combines two iterables into a single iterable. The returned iterable has an iterator that traverses the elements in {@code a}, followed by the elements in {@code b}. The source iterators are not polled until necessary. <p>The returned iterable's iterator supports {@code remove()} when the corresponding input iterator supports it. <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code Stream.concat(a, b)}.
452 Combines three iterables into a single iterable. The returned iterable has an iterator that traverses the elements in {@code a}, followed by the elements in {@code b}, followed by the elements in {@code c}. The source iterators are not polled until necessary. <p>The returned iterable's iterator supports {@code remove()} when the corresponding input iterator supports it. <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code Streams.concat(a, b, c)}.
453 Combines four iterables into a single iterable. The returned iterable has an iterator that traverses the elements in {@code a}, followed by the elements in {@code b}, followed by the elements in {@code c}, followed by the elements in {@code d}. The source iterators are not polled until necessary. <p>The returned iterable's iterator supports {@code remove()} when the corresponding input iterator supports it. <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code Streams.concat(a, b, c, d)}.
454 Returns a stream of this fluent iterable's contents (similar to calling {@link Collection#stream} on a collection). <p><b>Note:</b> the earlier in the chain you can switch to {@code Stream} usage (ideally not going through {@code FluentIterable} at all), the more performant and idiomatic your code will be. This method is a transitional aid, to be used only when really necessary. @since 21.0
455 Returns the number of elements in the specified iterator that equal the specified object. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. @see Collections#frequency
456 An admittedly inefficient implementation of {@link Map#containsKey}.
457 An implementation of {@link Map#containsValue}.
458 A sensible default implementation of {@link #addAll(int, Collection)}, in terms of the {@code add} method of {@link #listIterator(int)}. If you override {@link #listIterator(int)}, you may wish to override {@link #addAll(int, Collection)} to forward to this implementation. @since 7.0
459 A sensible default implementation of {@link #subList(int, int)}. If you override any other methods, you may wish to override {@link #subList(int, int)} to forward to this implementation. @since 7.0
460 A sensible definition of {@link #hashCode} in terms of {@link #iterator}. If you override {@link #iterator}, you may wish to override {@link #hashCode} to forward to this implementation. @since 7.0
461 A sensible definition of {@link #putAll(Map)} in terms of {@link #put(Object, Object)}. If you override {@link #put(Object, Object)}, you may wish to override {@link #putAll(Map)} to forward to this implementation. @since 7.0
462 A sensible definition of {@link #equals} in terms of the {@code equals} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #equals} to forward to this implementation. @since 7.0
463 Creates a table that uses the specified backing map and factory. It can generate a table based on arbitrary {@link Map} classes. <p>The {@code factory}-generated and {@code backingMap} classes determine the table iteration order. However, the table's {@code row()} method returns instances of a different class than {@code factory.get()} does. <p>Call this method only when the simpler factory methods in classes like {@link HashBasedTable} and {@link TreeBasedTable} won't suffice. <p>The views returned by the {@code Table} methods {@link Table#column}, {@link Table#columnKeySet}, and {@link Table#columnMap} have iterators that don't support {@code remove()}. Otherwise, all optional operations are supported. Null row keys, columns keys, and values are not supported. <p>Lookups by row key are often faster than lookups by column key, because the data is stored in a {@code Map<R, Map<C, V>>}. A method call like {@code column(columnKey).get(rowKey)} still runs quickly, since the row key is provided. However, {@code column(columnKey).size()} takes longer, since an iteration across all row keys occurs. <p>Note that this implementation is not synchronized. If multiple threads access this table concurrently and one of the threads modifies the table, it must be synchronized externally. <p>The table is serializable if {@code backingMap}, {@code factory}, the maps generated by {@code factory}, and the table contents are all serializable. <p>Note: the table assumes complete ownership over of {@code backingMap} and the maps returned by {@code factory}. Those objects should not be manually updated and they should not use soft, weak, or phantom references. @param backingMap place to store the mapping from each row key to its corresponding column key / value map @param factory supplier of new, empty maps that will each hold all column key / value mappings for a given row key @throws IllegalArgumentException if {@code backingMap} is not empty @since 10.0
464 {@inheritDoc} <p>The returned set has an iterator that does not support {@code remove()}. <p>The set's iterator traverses the columns of the first row, the columns of the second row, etc., skipping any columns that have appeared previously.
465 {@inheritDoc} <p>The returned map's views have iterators that don't support {@code remove()}.
466 Populates a map by reading an input stream, as part of deserialization. See {@link #writeMap} for the data format.
467 Populates a multiset by reading an input stream, as part of deserialization. See {@link #writeMultiset} for the data format.
468 Builds a new open-addressed hash table from the first n objects in elements.
469 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableMap#builder}.
470 Returns a builder that builds the unserialized type. Subclasses should override this method.
471 Returns a new builder, expecting the specified number of entries to be added. <p>If {@code expectedSize} is exactly the number of entries added to the builder before {@link Builder#build} is called, the builder is likely to perform better than an unsized {@link #builder()} would have. <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to, but not exactly, the number of entries added to the builder. @since 23.1
472 Resizes internal data structures if necessary to store the specified number of distinct elements.
473 Adds each element of {@code elements} to the {@code ImmutableSet}, ignoring duplicate elements (only the first duplicate element is added). @param elements the elements to add @return this {@code Builder} object @throws NullPointerException if {@code elements} is null or contains a null element
474 Adds each element of {@code elements} to the {@code ImmutableList}. @param elements the {@code Iterator} to add to the {@code ImmutableList} @return this {@code Builder} object @throws NullPointerException if {@code elements} is null or contains a null element
475 Adds each element of {@code elements} to the {@code ImmutableMultiset}. @param elements the elements to add to the {@code ImmutableMultiset} @return this {@code Builder} object @throws NullPointerException if {@code elements} is null or contains a null element
476 Adds each element of {@code elements} to the {@code ImmutableList}. @param elements the {@code Iterable} to add to the {@code ImmutableList} @return this {@code Builder} object @throws NullPointerException if {@code elements} is null or contains a null element
477 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableList}, in encounter order. @since 21.0
478 Returns an empty multimap. <p><b>Performance note:</b> the instance returned is a singleton.
479 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableRangeSet}. As in {@link Builder}, overlapping ranges are not permitted and adjacent ranges will be merged. @since 23.1
480 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableSet}. Elements appear in the resulting set in the encounter order of the stream; if the stream contains duplicates (according to {@link Object#equals(Object)}), only the first duplicate in encounter order will appear in the result. @since 21.0
481 Returns the comparator that orders the keys, which is {@link Ordering#natural()} when the natural ordering of the keys is used. Note that its behavior is not consistent with {@link TreeMap#comparator()}, which returns {@code null} to indicate natural ordering.
482 Adds {@code element} to the {@code ImmutableSortedSet}. If the {@code ImmutableSortedSet} already contains {@code element}, then {@code add} has no effect. (only the previously added element is retained). @param element the element to add @return this {@code Builder} object @throws NullPointerException if {@code element} is null
483 Returns a function that delegates to the {@link Interner#intern} method of the given interner. @since 8.0
484 Returns a string representation of {@code iterable}, with the format {@code [e1, e2, ..., en]} (that is, identical to {@link java.util.Arrays Arrays}{@code .toString(Iterables.toArray(iterable))}). Note that for <i>most</i> implementations of {@link Collection}, {@code collection.toString()} also gives the same result, but that behavior is not generally guaranteed.
485 Returns the single element contained in {@code iterable}. <p><b>Java 8+ users:</b> the {@code Stream} equivalent to this method is {@code stream.collect(MoreCollectors.onlyElement())}. @throws NoSuchElementException if the iterable is empty @throws IllegalArgumentException if the iterable contains multiple elements
486 Returns the single element contained in {@code iterator}, or {@code defaultValue} if the iterator is empty. @throws IllegalArgumentException if the iterator contains multiple elements. The state of the iterator is unspecified.
487 Returns a new array that contains the concatenated contents of two arrays. @param first the first array of elements to concatenate @param second the second array of elements to concatenate @param type the component type of the returned array
488 Returns the last element of {@code iterable}. If {@code iterable} is a {@link List} with {@link RandomAccess} support, then this operation is guaranteed to be {@code O(1)}. <p><b>{@code Stream} equivalent:</b> {@link Streams#findLast Streams.findLast(stream).get()} <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list), consider using {@code collection.getLast()} instead. @return the last element of {@code iterable} @throws NoSuchElementException if the iterable is empty
489 Advances {@code iterator} to the end, returning the last element or {@code defaultValue} if the iterator is empty. @param defaultValue the default value to return if the iterator is empty @return the last element of {@code iterator} @since 3.0
490 Returns the empty iterator. <p>The {@link Iterable} equivalent of this method is {@link ImmutableSet#of()}.
491 @serialData the expected values per key, the number of distinct keys, the number of entries, and the entries in order
492 Adds a new node for the specified key-value pair before the specified {@code nextSibling} element, or at the end of the list if {@code nextSibling} is null. Note: if {@code nextSibling} is specified, it MUST be for a node for the same {@code key}!
493 Returns a view of the specified {@code CharSequence} as a {@code List<Character>}, viewing {@code sequence} as a sequence of Unicode code units. The view does not support any modification operations, but reflects any changes to the underlying character sequence. @param sequence the character sequence to view as a {@code List} of characters @return an {@code List<Character>} view of the character sequence @since 7.0
494 An implementation of {@link List#indexOf(Object)}.
495 An implementation of {@link List#lastIndexOf(Object)}.
496 Finds the next entry in the current table. Returns {@code true} if an entry was found.
497 Expands the table if possible.
498 Cleanup collected entries when the lock is available.
499 This method is a convenience for testing. Code should call {@link Segment#getLiveValue} instead.
500 Creates an empty {@code Set} that uses identity to determine equality. It compares object references, instead of calling {@code equals}, to determine whether a provided object matches an element in the set. For example, {@code contains} returns {@code false} when passed an object that equals a set member, but isn't the same instance. This behavior is similar to the way {@code IdentityHashMap} handles key lookups. @since 8.0
501 Returns a synchronized (thread-safe) bimap backed by the specified bimap. In order to guarantee serial access, it is critical that <b>all</b> access to the backing bimap is accomplished through the returned bimap. <p>It is imperative that the user manually synchronize on the returned map when accessing any of its collection views: {@snippet : BiMap<Long, String> map = Maps.synchronizedBiMap( HashBiMap.<Long, String>create()); ... Set<Long> set = map.keySet(); // Needn't be in synchronized block ... synchronized (map) { // Synchronizing on map, not set! Iterator<Long> it = set.iterator(); // Must be in synchronized block while (it.hasNext()) { foo(it.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>The returned bimap will be serializable if the specified bimap is serializable. @param bimap the bimap to be wrapped in a synchronized view @return a synchronized view of the specified bimap
502 Moves an element one level up from a min level to a max level (or vice versa). Returns the new position of the element.
503 Swap {@code actualLastElement} with the conceptually correct last element of the heap. Returns the index that {@code actualLastElement} now resides in. <p>Since the last element of the array is actually in the middle of the sorted structure, a childless aunt node could be smaller, which would corrupt the invariant if this element becomes the new parent of the aunt node. In that case, we first switch the last element with its aunt node, before returning.
504 Advances nextCursor to the index of the first element after {@code c} that is not in {@code skipMe} and returns {@code size()} if there is no such element.
505 An implementation of {@link Multiset#iterator}.
506 Returns a new array of the given length with the same type as a reference array. @param reference any array of the desired type @param length the length of the new array
507 Returns an array containing all of the elements in the specified collection. This method returns the elements in the order they are returned by the collection's iterator. The returned array is "safe" in that no references to it are maintained by the collection. The caller is thus free to modify the returned array. <p>This method assumes that the collection size doesn't change while the method is running. <p>TODO(kevinb): support concurrently modified collections? @param c the collection for which to return an array of elements
508 Returns the least of the specified values according to this ordering. If there are multiple least values, the first of those is returned. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).min(thisComparator).get()} instead (but note that it does not guarantee which tied minimum element is returned). @param iterator the iterator whose minimum element is to be determined @throws NoSuchElementException if {@code iterator} is empty @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this ordering. @since 11.0
509 Returns the greatest of the specified values according to this ordering. If there are multiple greatest values, the first of those is returned. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).max(thisComparator).get()} instead (but note that it does not guarantee which tied maximum element is returned). @param iterator the iterator whose maximum element is to be determined @throws NoSuchElementException if {@code iterator} is empty @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this ordering. @since 11.0
510 Returns the minimal range that {@linkplain Range#contains(Comparable) contains} all of the given values. The returned range is {@linkplain BoundType#CLOSED closed} on both ends. @throws ClassCastException if the values are not mutually comparable @throws NoSuchElementException if {@code values} is empty @throws NullPointerException if any of {@code values} is null @since 14.0
511 Creates a thread-safe set backed by a hash map. The set is backed by a {@link ConcurrentHashMap} instance, and thus carries the same concurrency guarantees. <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be used as an element. The set is serializable. @return a new, empty thread-safe {@code Set} @since 15.0
512 Returns a string representation of this range, such as {@code "[3..5)"} (other examples are listed in the class documentation).
513 Returns the lower endpoint of this range. @throws IllegalStateException if this range is unbounded below (that is, {@link #hasLowerBound()} returns {@code false})
514 Returns the upper endpoint of this range. @throws IllegalStateException if this range is unbounded above (that is, {@link #hasUpperBound()} returns {@code false})
515 @throws IllegalArgumentException if another entry in the bucket has the same key @throws BucketOverflowException if this bucket has too many entries, which may indicate a hash flooding attack
516 Constructs a new entry array where each duplicated key from the original appears only once, at its first position but with its final value. The {@code duplicates} map is modified. @param entries the original array of entries including duplicates @param n the number of valid entries in {@code entries} @param newN the expected number of entries once duplicates are removed @param duplicates a map of canonical {@link Entry} objects for each duplicate key. This map will be updated by the method, setting each value to false as soon as the {@link Entry} has been included in the new entry array. @return an array of {@code newN} entries where no key appears more than once.
517 Checks if the given key already appears in the hash chain starting at {@code keyBucketHead}. If it does not, then null is returned. If it does, then if {@code throwIfDuplicateKeys} is true an {@code IllegalArgumentException} is thrown, and otherwise the existing {@link Entry} is returned. @throws IllegalArgumentException if another entry in the bucket has the same key and {@code throwIfDuplicateKeys} is true @throws BucketOverflowException if this bucket has too many entries, which may indicate a hash flooding attack
518 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableSet} with an implementation specialized for enums. Unlike {@link ImmutableSet#toImmutableSet}, the resulting set will iterate over elements in their enum definition order, not encounter order. @since 21.0
519 Creates an {@code EnumSet} consisting of all enum values that are not in the specified collection. If the collection is an {@link EnumSet}, this method has the same behavior as {@link EnumSet#complementOf}. Otherwise, the specified collection must contain at least one element, in order to determine the element type. If the collection could be empty, use {@link #complementOf(Collection, Class)} instead of this method. @param collection the collection whose complement should be stored in the enum set @return a new, modifiable {@code EnumSet} containing all values of the enum that aren't present in the given collection @throws IllegalArgumentException if {@code collection} is not an {@code EnumSet} instance and contains no elements
520 Creates an {@code EnumSet} consisting of all enum values that are not in the specified collection. This is equivalent to {@link EnumSet#complementOf}, but can act on any input collection, as long as the elements are of enum type. @param collection the collection whose complement should be stored in the {@code EnumSet} @param type the type of the elements in the set @return a new, modifiable {@code EnumSet} initially containing all the values of the enum not present in the given collection
521 Returns the last element of the specified stream, or {@link OptionalInt#empty} if the stream is empty. <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This method's runtime will be between O(log n) and O(n), performing better on <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently splittable</a> streams. @see IntStream#findFirst() @throws NullPointerException if the last element of the stream is null
522 Returns the last element of the specified stream, or {@link OptionalLong#empty} if the stream is empty. <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This method's runtime will be between O(log n) and O(n), performing better on <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently splittable</a> streams. @see LongStream#findFirst() @throws NullPointerException if the last element of the stream is null
523 Returns the last element of the specified stream, or {@link OptionalDouble#empty} if the stream is empty. <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This method's runtime will be between O(log n) and O(n), performing better on <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently splittable</a> streams. @see DoubleStream#findFirst() @throws NullPointerException if the last element of the stream is null
524 Partitions the contents of buffer in the range [left, right] around the pivot element previously stored in buffer[pivotValue]. Returns the new index of the pivot element, pivotNewIndex, so that everything in [left, pivotNewIndex] is ≤ pivotValue and everything in (pivotNewIndex, right] is greater than pivotValue.
525 @serialData key comparator, value comparator, number of distinct keys, and then for each distinct key: the key, number of values for that key, and key values
526 Constructor for use by subclasses.
527 Constructor for use by subclasses.
528 Returns the escaped form of a given literal string, starting at the given index. This method is called by the {@link #escape(String)} method when it discovers that escaping is required. It is protected to allow subclasses to override the fastpath escaping function to inline their escaping test. See {@link CharEscaperBuilder} for an example usage. @param s the literal string to be escaped @param index the index to start escaping from @return the escaped form of {@code string} @throws NullPointerException if {@code string} is null
529 Returns a string that would replace the given character in the specified escaper, or {@code null} if no replacement should be made. This method is intended for use in tests through the {@code EscaperAsserts} class; production users of {@link CharEscaper} should limit themselves to its public interface. @param c the character to escape if necessary @return the replacement string, or {@code null} if no escaping was needed
530 Returns a string that would replace the given character in the specified escaper, or {@code null} if no replacement should be made. This method is intended for use in tests through the {@code EscaperAsserts} class; production users of {@link UnicodeEscaper} should limit themselves to its public interface. @param cp the Unicode code point to escape if necessary @return the replacement string, or {@code null} if no escaping was needed
531 Throws {@code IllegalArgumentException} if the ordering of {@code endpoints} is not compatible with the directionality of this graph.
532 Called after {@link #successorIterator} is exhausted. Advances {@link #node} to the next node and updates {@link #successorIterator} to iterate through the successors of {@link #node}.
533 Returns an {@link EndpointPair} representing the endpoints of an edge in {@code graph}.
534 Returns an {@link EndpointPair} representing the endpoints of an edge in {@code network}.
535 An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and {@link #successors(Object)}.
536 An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and {@link #successors(Object)}.
537 Throws an IllegalArgumentException if the ordering of {@code endpoints} is not compatible with the directionality of this graph.
538 Iterates in the order {@link #nodeU()}, {@link #nodeV()}.
539 Specifies the order of iteration for the elements of {@link Graph#nodes()}. <p>The default value is {@link ElementOrder#insertion() insertion order}.
540 Specifies the order of iteration for the elements of {@link Graph#edges()}, {@link Graph#adjacentNodes(Object)}, {@link Graph#predecessors(Object)}, {@link Graph#successors(Object)} and {@link Graph#incidentEdges(Object)}. <p>The default value is {@link ElementOrder#unordered() unordered} for mutable graphs. For immutable graphs, this value is ignored; they always have a {@link ElementOrder#stable() stable} order. @throws IllegalArgumentException if {@code incidentEdgeOrder} is not either {@code ElementOrder.unordered()} or {@code ElementOrder.stable()}. @since 29.0
541 Returns a view of {@code graph} with the direction (if any) of every edge reversed. All other properties remain intact, and further updates to {@code graph} will be reflected in the view.
542 Returns a view of {@code network} with the direction (if any) of every edge reversed. All other properties remain intact, and further updates to {@code network} will be reflected in the view.
543 Returns a view of {@code graph} with the direction (if any) of every edge reversed. All other properties remain intact, and further updates to {@code graph} will be reflected in the view.
544 Specifies the order of iteration for the elements of {@link Network#nodes()}. <p>The default value is {@link ElementOrder#insertion() insertion order}.
545 Specifies the order of iteration for the elements of {@link Network#edges()}. <p>The default value is {@link ElementOrder#insertion() insertion order}.
546 Specifies the order of iteration for the elements of {@link Graph#nodes()}. <p>The default value is {@link ElementOrder#insertion() insertion order}.
547 Specifies the order of iteration for the elements of {@link ValueGraph#edges()}, {@link ValueGraph#adjacentNodes(Object)}, {@link ValueGraph#predecessors(Object)}, {@link ValueGraph#successors(Object)} and {@link ValueGraph#incidentEdges(Object)}. <p>The default value is {@link ElementOrder#unordered() unordered} for mutable graphs. For immutable graphs, this value is ignored; they always have a {@link ElementOrder#stable() stable} order. @throws IllegalArgumentException if {@code incidentEdgeOrder} is not either {@code ElementOrder.unordered()} or {@code ElementOrder.stable()}. @since 29.0
548 Updates this hasher with the given bytes.
549 Updates this hasher with bytes from the given buffer.
550 Updates the sink with the given number of bytes from the buffer.
551 This is invoked for the last bytes of the input, which are not enough to fill a whole chunk. The passed {@code ByteBuffer} is guaranteed to be non-empty. <p>This implementation simply pads with zeros and delegates to {@link #process(ByteBuffer)}.
552 @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #mightContain} instead.
553 Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link BloomFilter} with the specified expected false positive probability. <p>Note that if the {@code Collector} receives significantly more elements than specified, the resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive probability. <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>} is. <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since {@link #equals} also relies on object identity of funnels. @param funnel the funnel of T's that the constructed {@code BloomFilter} will use @param expectedInsertions the number of expected insertions to the constructed {@code BloomFilter}; must be positive @param fpp the desired false positive probability (must be positive and less than 1.0) @return a {@code Collector} generating a {@code BloomFilter} of the received elements @since 23.0 (but only since 33.4.0 in the Android flavor)
554 Returns the number of bits in the underlying bit array.
555 Returns the {@code byte} value that, when treated as unsigned, is nearest in value to {@code value}. @param value any {@code long} value @return {@code (byte) 255} if {@code value >= 255}, {@code (byte) 0} if {@code value <= 0}, and {@code value} cast to {@code byte} otherwise
556 Compares the two specified {@code byte} values, treating them as unsigned values between 0 and 255 inclusive. For example, {@code (byte) -127} is considered greater than {@code (byte) 127} because it is seen as having the value of positive {@code 129}. @param a the first {@code byte} to compare @param b the second {@code byte} to compare @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is greater than {@code b}; or zero if they are equal
557 Returns a string representation of {@code x} for the given radix, where {@code x} is treated as unsigned. @param x the value to convert to a string. @param radix the radix to use while working with {@code x} @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}. @since 13.0
558 Combines the two BitArrays using bitwise OR. <p>NOTE: Because of the use of atomics, if the other LockFreeBitArray is being mutated while this operation is executing, not all of those new 1's may be set in the final state of this LockFreeBitArray. The ONLY guarantee provided is that all the bits that were set in the other LockFreeBitArray at the start of this method will be set in this LockFreeBitArray at the end of this method.
559 Returns true if the bit changed value.
560 Returns a "Java hash code" for this {@code HashCode} instance; this is well-defined (so, for example, you can safely put {@code HashCode} instances into a {@code HashSet}) but is otherwise probably not what you want to use.
561 Returns a string containing each byte of {@link #asBytes}, in order, as a two-digit unsigned hexadecimal number in lower case. <p>Note that if the output is considered to be a single hexadecimal number, whether this string is big-endian or little-endian depends on the byte order of {@link #asBytes}. This may be surprising for implementations of {@code HashCode} that represent the number in big-endian since everything else in the hashing API uniformly treats multibyte values as little-endian. <p>To create a {@code HashCode} from its string representation, see {@link #fromString}.
562 Returns the {@code long} value whose big-endian representation is stored in the first 8 bytes of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getLong()}. For example, the input byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}} would yield the {@code long} value {@code 0x1213141516171819L}. <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more flexibility at little cost in readability. @throws IllegalArgumentException if {@code bytes} has fewer than 8 elements
563 Computes intermediate hash of 32 bytes of byte array from the given offset. Results are returned in the output array because when we last measured, this was 12% faster than allocating new arrays every time.
564 Computes intermediate hash of 32 bytes of byte array from the given offset. Results are returned in the output array - this is 12% faster than allocating new arrays every time.
565 Returns the value of this {@code UnsignedInteger} as a {@code long}.
566 Returns dividend / divisor, where the dividend and divisor are treated as unsigned 32-bit quantities. <p><b>Java 8+ users:</b> use {@link Integer#divideUnsigned(int, int)} instead. @param dividend the dividend (numerator) @param divisor the divisor (denominator) @throws ArithmeticException if divisor is 0
567 Returns dividend % divisor, where the dividend and divisor are treated as unsigned 32-bit quantities. <p><b>Java 8+ users:</b> use {@link Integer#remainderUnsigned(int, int)} instead. @param dividend the dividend (numerator) @param divisor the divisor (denominator) @throws ArithmeticException if divisor is 0
568 Returns a hash function implementing the <a href="https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp">32-bit murmur3 algorithm, x86 variant</a> (little-endian variant), using the given seed value, <b>with a known bug</b> as described in the deprecation text. <p>The C++ equivalent is the MurmurHash3_x86_32 function (Murmur3A), which however does not have the bug. @deprecated This implementation produces incorrect hash values from the {@link HashFunction#hashString} method if the string contains non-BMP characters. Use {@link #murmur3_32_fixed(int)} instead.
569 Returns a hash function implementing the <a href="https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp">32-bit murmur3 algorithm, x86 variant</a> (little-endian variant), using the given seed value. <p>The exact C++ equivalent is the MurmurHash3_x86_32 function (Murmur3A). <p>This method is called {@code murmur3_32_fixed} because it fixes a bug in the {@code HashFunction} returned by the original {@code murmur3_32} method. @since 31.0
570 Returns a hash function implementing the <a href="https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp">128-bit murmur3 algorithm, x64 variant</a> (little-endian variant), using the given seed value. <p>The exact C++ equivalent is the MurmurHash3_x64_128 function (Murmur3F).
571 Assigns to {@code input} a "bucket" in the range {@code [0, buckets)}, in a uniform manner that minimizes the need for remapping as {@code buckets} grows. That is, {@code consistentHash(h, n)} equals: <ul> <li>{@code n - 1}, with approximate probability {@code 1/n} <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n}) </ul> <p>This method is suitable for the common use case of dividing work among buckets that meet the following conditions: <ul> <li>You want to assign the same fraction of inputs to each bucket. <li>When you reduce the number of buckets, you can accept that the most recently added buckets will be removed first. More concretely, if you are dividing traffic among tasks, you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and {@code consistentHash} will handle it. If, however, you are dividing traffic among servers {@code alpha}, {@code bravo}, and {@code charlie} and you occasionally need to take each of the servers offline, {@code consistentHash} will be a poor fit: It provides no way for you to specify which of the three buckets is disappearing. Thus, if your buckets change from {@code [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will assign all the old {@code alpha} traffic to {@code bravo} and all the old {@code bravo} traffic to {@code charlie}, rather than letting {@code bravo} keep its traffic. </ul> <p>See the <a href="http://en.wikipedia.org/wiki/Consistent_hashing">Wikipedia article on consistent hashing</a> for more information.
572 Returns the {@code int} value whose big-endian representation is stored in the first 4 bytes of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getInt()}. For example, the input byte array {@code {0x12, 0x13, 0x14, 0x15, 0x33}} would yield the {@code int} value {@code 0x12131415}. <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more flexibility at little cost in readability. @throws IllegalArgumentException if {@code bytes} has fewer than 4 elements
573 Copies all bytes from the input stream to the output stream. Does not close or flush either stream. <p><b>Java 9 users and later:</b> this method should be treated as deprecated; use the equivalent {@link InputStream#transferTo} method instead. @param from the input stream to read from @param to the output stream to write to @return the number of bytes copied @throws IOException if an I/O error occurs
574 Reads and discards data from the given {@code InputStream} until the end of the stream is reached. Returns the total number of bytes read. Does not close the stream. @since 20.0
575 Process the bytes of the given input stream using the given processor. @param input the input stream to process @param processor the object to which to pass the bytes of the stream @return the result of the byte processor @throws IOException if an I/O error occurs @since 14.0
576 Returns a new {@link ByteArrayDataInput} instance to read from the given {@code ByteArrayInputStream}. The given input stream is not reset before being read from by the returned {@code ByteArrayDataInput}. @since 17.0
577 Returns a new {@link ByteArrayDataOutput} instance which writes to the given {@code ByteArrayOutputStream}. The given output stream is not reset before being written to by the returned {@code ByteArrayDataOutput} and new data will be appended to any existing content. <p>Note that if the given output stream was not empty or is modified after the {@code ByteArrayDataOutput} is created, the contract for {@link ByteArrayDataOutput#toByteArray} will not be honored (the bytes returned in the byte array may not be exactly what was written via calls to {@code ByteArrayDataOutput}). @since 17.0
578 Creates a new input stream that will encode the characters from {@code reader} into bytes using the given character set encoder. @param reader input source @param encoder character set encoder used for encoding chars to bytes @param bufferSize size of internal input and output buffers @throws IllegalArgumentException if bufferSize is non-positive
579 Flips the buffer output buffer so we can start reading bytes from it. If we are starting to drain because there was overflow, and there aren't actually any characters to drain, then the overflow must be due to a small output buffer.
580 Copies all bytes from the readable channel to the writable channel. Does not close or flush either channel. @param from the readable channel to read from @param to the writable channel to write to @return the number of bytes copied @throws IOException if an I/O error occurs
581 Reads a line of text. A line is considered to be terminated by any one of a line feed ({@code '\n'}), a carriage return ({@code '\r'}), or a carriage return followed immediately by a linefeed ({@code "\r\n"}). @return a {@code String} containing the contents of the line, not including any line-termination characters, or {@code null} if the end of the stream has been reached. @throws IOException if an I/O error occurs
582 Discards up to {@code n} bytes of data from the input stream. This method will block until either the full amount has been skipped or until the end of the stream is reached, whichever happens first. Returns the total number of bytes skipped.
583 Opens a new {@link Stream} for reading text one line at a time from this source. This method returns a new, independent stream each time it is called. <p>The returned stream is lazy and only reads from the source in the terminal operation. If an I/O error occurs while the stream is reading from the source or when the stream is closed, an {@link UncheckedIOException} is thrown. <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code \n}. If the source's content does not end in a line termination sequence, it is treated as if it does. <p>The caller is responsible for ensuring that the returned stream is closed. For example: {@snippet : try (Stream<String> lines = source.lines()) { lines.map(...) .filter(...) .forEach(...); } } @throws IOException if an I/O error occurs while opening the stream @since 22.0 (but only since 33.4.0 in the Android flavor)
584 Reads and discards data from the given {@code Readable} until the end of the stream is reached. Returns the total number of chars read. Does not close the stream. @since 20.0
585 Creates a new instance that will read lines from the given {@code Readable} object.
586 Closes the given {@link InputStream}, logging any {@code IOException} that's thrown rather than propagating it. <p>While it's not safe in the general case to ignore exceptions that are thrown when closing an I/O resource, it should generally be safe in the case of a resource that's being used only for reading, such as an {@code InputStream}. Unlike with writable resources, there's no chance that a failure that occurs when closing the stream indicates a meaningful problem such as a failure to flush all bytes to the underlying resource. @param inputStream the input stream to be closed, or {@code null} in which case this method does nothing @since 17.0
587 Closes the given {@link Reader}, logging any {@code IOException} that's thrown rather than propagating it. <p>While it's not safe in the general case to ignore exceptions that are thrown when closing an I/O resource, it should generally be safe in the case of a resource that's being used only for reading, such as a {@code Reader}. Unlike with writable resources, there's no chance that a failure that occurs when closing the reader indicates a meaningful problem such as a failure to flush all bytes to the underlying resource. @param reader the reader to be closed, or {@code null} in which case this method does nothing @since 17.0
588 Checks if writing {@code len} bytes would go over threshold, and switches to file buffering if so.
589 Calls {@link #close} if not already closed, and then resets this object back to its initial state, for reuse. If data was buffered to a file, it will be deleted. @throws IOException if an I/O error occurred while deleting the file buffer
590 Returns a new {@link CharSource} for reading character data from the given file using the given character set. @since 14.0
591 Equivalent to calling {@code flush(flushable, true)}, but with no {@code IOException} in the signature. @param flushable the {@code Flushable} object to be flushed.
592 Checks that the given options allow an insecure delete, throwing an exception if not.
593 Returns a new CharBuffer identical to buf, except twice the capacity.
594 Process additional characters from the stream. When a line separator is found the contents of the line and the line separator itself are passed to the abstract {@link #handleLine} method. @param cbuf the character buffer to process @param off the offset into the buffer @param len the number of characters to process @throws IOException if an I/O error occurs @see #finish
595 Subclasses must call this method after finishing character processing, in order to ensure that any unterminated line in the buffer is passed to {@link #handleLine}. @throws IOException if an I/O error occurs
596 Reads an unsigned {@code short} as specified by {@link DataInputStream#readUnsignedShort()}, except using little-endian byte order. @return the next two bytes of the input stream, interpreted as an unsigned 16-bit integer in little-endian byte order @throws IOException if an I/O error occurs
597 Reads an integer as specified by {@link DataInputStream#readInt()}, except using little-endian byte order. @return the next four bytes of the input stream, interpreted as an {@code int} in little-endian byte order @throws IOException if an I/O error occurs
598 Reads a {@code long} as specified by {@link DataInputStream#readLong()}, except using little-endian byte order. @return the next eight bytes of the input stream, interpreted as a {@code long} in little-endian byte order @throws IOException if an I/O error occurs
599 Writes a char as specified by {@link DataOutputStream#writeChar(int)}, except using little-endian byte order. @throws IOException if an I/O error occurs
600 Writes a {@code float} as specified by {@link DataOutputStream#writeFloat(float)}, except using little-endian byte order. @throws IOException if an I/O error occurs
601 Writes a {@code long} as specified by {@link DataOutputStream#writeLong(long)}, except using little-endian byte order. @throws IOException if an I/O error occurs
602 Insecure recursive delete for file systems that don't support {@code SecureDirectoryStream}. Returns a collection of exceptions that occurred or null if no exceptions were thrown.
603 Secure method for deleting the contents of a directory using {@code SecureDirectoryStream}. Returns a collection of exceptions that occurred or null if no exceptions were thrown.
604 Closes the current input stream and opens the next one, if any.
605 Closes the current reader and opens the next one, if any.
606 Returns a {@link CharSource} that reads from the given URL using the given character set. @since 14.0
607 Returns the result of dividing {@code p} by {@code q}, rounding using the specified {@code RoundingMode}. If the {@code RoundingMode} is {@link RoundingMode#DOWN}, then this method is equivalent to regular Java division, {@code p / q}; and if it is {@link RoundingMode#FLOOR}, then this method is equivalent to {@link Math#floorDiv(long,long) Math.floorDiv}{@code (p, q)}. @throws ArithmeticException if {@code q == 0}, or if {@code mode == UNNECESSARY} and {@code a} is not an integer multiple of {@code b}
608 Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if {@code n == 0}, or {@code n!}, or {@link Double#POSITIVE_INFINITY} if {@code n! > Double.MAX_VALUE}. <p>The result is within 1 ulp of the true value. @throws IllegalArgumentException if {@code n < 0}
609 Returns {@code b} to the {@code k}th power. Even if the result overflows, it will be equal to {@code BigInteger.valueOf(b).pow(k).intValue()}. This implementation runs in {@code O(log k)} time. <p>Compare {@link #checkedPow}, which throws an {@link ArithmeticException} upon overflow. @throws IllegalArgumentException if {@code k < 0}
610 Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if {@code a == 0 && b == 0}. @throws IllegalArgumentException if {@code a < 0} or {@code b < 0}
611 Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if {@code n == 0}, or {@link Integer#MAX_VALUE} if the result does not fit in a {@code int}. @throws IllegalArgumentException if {@code n < 0}
612 Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and {@code k}, or {@link Integer#MAX_VALUE} if the result does not fit in an {@code int}. @throws IllegalArgumentException if {@code n < 0}, {@code k < 0} or {@code k > n}
613 Returns {@code b} to the {@code k}th power. Even if the result overflows, it will be equal to {@code BigInteger.valueOf(b).pow(k).longValue()}. This implementation runs in {@code O(log k)} time. @throws IllegalArgumentException if {@code k < 0}
614 Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if {@code n == 0}, or {@link Long#MAX_VALUE} if the result does not fit in a {@code long}. @throws IllegalArgumentException if {@code n < 0}
615 Start building an instance which maps {@code x = x1} to {@code y = y1}. Both arguments must be finite. Call either {@link LinearTransformationBuilder#and} or {@link LinearTransformationBuilder#withSlope} on the returned object to finish building the instance.
616 Returns {@code true} if {@code a} and {@code b} are within {@code tolerance} of each other. <p>Technically speaking, this is equivalent to {@code Math.abs(a - b) <= tolerance || Double.valueOf(a).equals(Double.valueOf(b))}. <p>Notable special cases include: <ul> <li>All NaNs are fuzzily equal. <li>If {@code a == b}, then {@code a} and {@code b} are always fuzzily equal. <li>Positive and negative zero are always fuzzily equal. <li>If {@code tolerance} is zero, and neither {@code a} nor {@code b} is NaN, then {@code a} and {@code b} are fuzzily equal if and only if {@code a == b}. <li>With {@link Double#POSITIVE_INFINITY} tolerance, all non-NaN values are fuzzily equal. <li>With finite tolerance, {@code Double.POSITIVE_INFINITY} and {@code Double.NEGATIVE_INFINITY} are fuzzily equal only to themselves. </ul> <p>This is reflexive and symmetric, but <em>not</em> transitive, so it is <em>not</em> an equivalence relation and <em>not</em> suitable for use in {@link Object#equals} implementations. @throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN @since 13.0
617 Rounds {@code x} to a {@code double}.
618 Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to {@code checkedPow(2, log2(x, CEILING))}. @throws IllegalArgumentException if {@code x <= 0} @throws ArithmeticException of the next-higher power of two is not representable as an {@code int}, i.e. when {@code x > 2^30} @since 20.0
619 Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code checkedPow(2, log2(x, FLOOR))}. @throws IllegalArgumentException if {@code x <= 0} @since 20.0
620 Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode. @throws IllegalArgumentException if {@code x <= 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x} is not a power of two
621 Returns the square root of {@code x}, rounded with the specified rounding mode. @throws IllegalArgumentException if {@code x < 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code sqrt(x)} is not an integer
622 Returns the sum of {@code a} and {@code b}, provided it does not overflow. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link Math#addExact(int, int)} instead. @throws ArithmeticException if {@code a + b} overflows in signed {@code int} arithmetic
623 Returns the difference of {@code a} and {@code b}, provided it does not overflow. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link Math#subtractExact(int, int)} instead. @throws ArithmeticException if {@code a - b} overflows in signed {@code int} arithmetic
624 Returns the product of {@code a} and {@code b}, provided it does not overflow. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link Math#multiplyExact(int, int)} instead. @throws ArithmeticException if {@code a * b} overflows in signed {@code int} arithmetic
625 Returns true if n is a strong probable prime relative to the specified base.
626 Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to {@code checkedPow(2, log2(x, CEILING))}. @throws IllegalArgumentException if {@code x <= 0} @throws ArithmeticException of the next-higher power of two is not representable as a {@code long}, i.e. when {@code x > 2^62} @since 20.0
627 Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code checkedPow(2, log2(x, FLOOR))}. @throws IllegalArgumentException if {@code x <= 0} @since 20.0
628 Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode. @throws IllegalArgumentException if {@code x <= 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x} is not a power of two
629 Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if {@code a == 0 && b == 0}. @throws IllegalArgumentException if {@code a < 0} or {@code b < 0}
630 Returns {@code x mod m}, a non-negative value less than {@code m}. This differs from {@code x % m}, which might be negative. <p>For example: {@snippet : mod(7, 4) == 3 mod(-7, 4) == 1 mod(-1, 4) == 3 mod(-8, 4) == 0 mod(8, 4) == 0 } @throws ArithmeticException if {@code m <= 0} @see <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.17.3"> Remainder Operator</a>
631 Returns the sum of {@code a} and {@code b}, provided it does not overflow. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link Math#addExact(long, long)} instead. @throws ArithmeticException if {@code a + b} overflows in signed {@code long} arithmetic
632 Returns the difference of {@code a} and {@code b}, provided it does not overflow. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link Math#subtractExact(long, long)} instead. @throws ArithmeticException if {@code a - b} overflows in signed {@code long} arithmetic
633 Returns the product of {@code a} and {@code b}, provided it does not overflow. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link Math#multiplyExact(long, long)} instead. @throws ArithmeticException if {@code a * b} overflows in signed {@code long} arithmetic
634 Returns the number of pairs in the dataset.
635 {@inheritDoc} <p><b>Note:</b> This tests exact equality of the calculated statistics, including the floating point values. Two instances are guaranteed to be considered equal if one is copied from the other using {@code second = new PairedStatsAccumulator().addAll(first).snapshot()}, if both were obtained by calling {@code snapshot()} on the same {@link PairedStatsAccumulator} without adding any values in between the two calls, or if one is obtained from the other after round-tripping through java serialization. However, floating point rounding errors mean that it may be false for some instances where the statistics are mathematically equal, including instances constructed from the same values in a different order... or (in the general case) even in the same order. (It is guaranteed to return true for instances constructed from the same values in the same order if {@code strictfp} is in effect, or if the system architecture guarantees {@code strictfp}-like semantics.)
636 Creates a new accumulator.
637 Calculates the new value for the accumulated mean when a value is added, in the case where at least one of the previous mean and the value is non-finite.
638 Returns the number of pairs in the dataset.
639 Specifies the computation of a median (i.e. the 1st 2-quantile).
640 Specifies the computation of quartiles (i.e. 4-quantiles).
641 Specifies the computation of percentiles (i.e. 100-quantiles).
642 Selects the pivot to use, namely the median of the values at {@code from}, {@code to}, and halfway between the two (rounded down), from {@code array}, and ensure (by swapping elements if necessary) that that pivot value appears at the start of the slice i.e. at {@code from}. Expects that {@code from} is strictly less than {@code to}.
643 Creates a Stats instance from the byte representation read from the given {@link ByteBuffer}. <p><b>Note:</b> No guarantees are made regarding stability of the representation between versions. @param buffer A {@link ByteBuffer} with at least BYTES {@link ByteBuffer#remaining}, ordered as {@link ByteOrder#LITTLE_ENDIAN}, from which a BYTES-long byte representation of this instance is read. In the process increases the position of {@link ByteBuffer} by BYTES.
644 Returns an immutable snapshot of the current statistics.
645 Get the current port number, failing if no port is defined. @return a validated port number, in the range [0..65535] @throws IllegalStateException if no port is defined. You can use {@link #withDefaultPort(int)} to prevent this from occurring.
646 Returns the current port number, with a default if no port is defined.
647 Rebuild the host:port string, including brackets if necessary.
648 Provide a default port if the parsed string contained only a host. <p>You can chain this after {@link #fromString(String)} to include a port in case the port was omitted from the input string. If a port was already provided, then this method is a no-op. @param defaultPort a port number, from [0..65535] @return a HostAndPort instance, guaranteed to have a defined port.
649 Returns the string representation of an {@link InetAddress}. <p>For IPv4 addresses, this is identical to {@link InetAddress#getHostAddress()}, but for IPv6 addresses, the output follows <a href="http://tools.ietf.org/html/rfc5952">RFC 5952</a> section 4. The main difference is that this method uses "::" for zero compression, while Java's version uses the uncompressed form (except on Android, where the zero compression is also done). The other difference is that this method outputs any scope ID in the format that it was provided at creation time, while Android may always output it as an interface name, even if it was supplied as a numeric ID. <p>This method uses hexadecimal for all IPv6 addresses, including IPv4-mapped IPv6 addresses such as "::c000:201". @param ip {@link InetAddress} to be converted to an address string @return {@code String} containing the text-formatted IP address @since 10.0
650 Evaluates whether the argument is an ISATAP address. <p>From RFC 5214: "ISATAP interface identifiers are constructed in Modified EUI-64 format [...] by concatenating the 24-bit IANA OUI (00-00-5E), the 8-bit hexadecimal value 0xFE, and a 32-bit IPv4 address in network byte order [...]" <p>For more on ISATAP addresses see section 6.1 of <a target="_parent" href="http://tools.ietf.org/html/rfc5214#section-6.1">RFC 5214</a>. @param ip {@link Inet6Address} to be examined for ISATAP address format @return {@code true} if the argument is an ISATAP address
651 Examines the Inet6Address to determine if it is an IPv6 address of one of the specified address types that contain an embedded IPv4 address. <p>NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial spoofability. With other transition addresses spoofing involves (at least) infection of one's BGP routing table. @param ip {@link Inet6Address} to be examined for embedded IPv4 client address @return {@code true} if there is an embedded IPv4 client address @since 7.0
652 Copies a collection of {@code Boolean} instances into a new array of primitive {@code boolean} values. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}. Calling this method is as thread-safe as calling that method. <p><b>Note:</b> consider representing the collection as a {@link java.util.BitSet} instead. @param collection a collection of {@code Boolean} objects @return an array containing the same values as {@code collection}, in the same order, converted to primitives @throws NullPointerException if {@code collection} or any of its elements is null
653 Returns the index of the first appearance of the value {@code target} in {@code array}. <p><b>Note:</b> consider representing the array as a {@link java.util.BitSet} instead, and using {@link java.util.BitSet#nextSetBit(int)} or {@link java.util.BitSet#nextClearBit(int)}. @param array an array of {@code boolean} values, possibly empty @param target a primitive {@code boolean} value @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
654 Returns the index of the last appearance of the value {@code target} in {@code array}. @param array an array of {@code boolean} values, possibly empty @param target a primitive {@code boolean} value @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
655 Returns an array containing each value of {@code collection}, converted to a {@code byte} value in the manner of {@link Number#byteValue}. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}. Calling this method is as thread-safe as calling that method. @param collection a collection of {@code Number} instances @return an array containing the same values as {@code collection}, in the same order, converted to primitives @throws NullPointerException if {@code collection} or any of its elements is null @since 1.0 (parameter was {@code Collection<Byte>} before 12.0)
656 Returns the index of the first appearance of the value {@code target} in {@code array}. @param array an array of {@code byte} values, possibly empty @param target a primitive {@code byte} value @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
657 Returns the index of the last appearance of the value {@code target} in {@code array}. @param array an array of {@code byte} values, possibly empty @param target a primitive {@code byte} value @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
658 Copies a collection of {@code Character} instances into a new array of primitive {@code char} values. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}. Calling this method is as thread-safe as calling that method. @param collection a collection of {@code Character} objects @return an array containing the same values as {@code collection}, in the same order, converted to primitives @throws NullPointerException if {@code collection} or any of its elements is null
659 Returns the index of the first appearance of the value {@code target} in {@code array}. @param array an array of {@code char} values, possibly empty @param target a primitive {@code char} value @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
660 Returns the index of the last appearance of the value {@code target} in {@code array}. @param array an array of {@code char} values, possibly empty @param target a primitive {@code char} value @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
661 Returns the {@code char} value whose big-endian representation is stored in the first 2 bytes of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getChar()}. For example, the input byte array {@code {0x54, 0x32}} would yield the {@code char} value {@code '\\u5432'}. <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more flexibility at little cost in readability. @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements
662 Returns an unspecified hash code for the contents of this immutable array.
663 Returns an array containing each value of {@code collection}, converted to a {@code double} value in the manner of {@link Number#doubleValue}. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}. Calling this method is as thread-safe as calling that method. @param collection a collection of {@code Number} instances @return an array containing the same values as {@code collection}, in the same order, converted to primitives @throws NullPointerException if {@code collection} or any of its elements is null @since 1.0 (parameter was {@code Collection<Double>} before 12.0)
664 Returns the index of the first appearance of the value {@code target} in {@code array}. Note that this always returns {@code -1} when {@code target} is {@code NaN}. @param array an array of {@code double} values, possibly empty @param target a primitive {@code double} value @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
665 Returns the index of the last appearance of the value {@code target} in {@code array}. Note that this always returns {@code -1} when {@code target} is {@code NaN}. @param array an array of {@code double} values, possibly empty @param target a primitive {@code double} value @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
666 Returns an array containing each value of {@code collection}, converted to a {@code float} value in the manner of {@link Number#floatValue}. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}. Calling this method is as thread-safe as calling that method. @param collection a collection of {@code Number} instances @return an array containing the same values as {@code collection}, in the same order, converted to primitives @throws NullPointerException if {@code collection} or any of its elements is null @since 1.0 (parameter was {@code Collection<Float>} before 12.0)
667 Returns the index of the first appearance of the value {@code target} in {@code array}. Note that this always returns {@code -1} when {@code target} is {@code NaN}. @param array an array of {@code float} values, possibly empty @param target a primitive {@code float} value @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
668 Returns the index of the last appearance of the value {@code target} in {@code array}. Note that this always returns {@code -1} when {@code target} is {@code NaN}. @param array an array of {@code float} values, possibly empty @param target a primitive {@code float} value @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
669 Returns a new, empty builder for {@link ImmutableDoubleArray} instances, sized to hold up to {@code initialCapacity} values without resizing. The returned builder is not thread-safe. <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number of values that will be added, if that knowledge is readily available. It is better to guess a value slightly too high than slightly too low. If the value is not exact, the {@link ImmutableDoubleArray} that is built will very likely occupy more memory than strictly necessary; to trim memory usage, build using {@code builder.build().trimmed()}.
670 Returns a new, empty builder for {@link ImmutableDoubleArray} instances, with a default initial capacity. The returned builder is not thread-safe. <p><b>Performance note:</b> The {@link ImmutableDoubleArray} that is built will very likely occupy more memory than necessary; to trim memory usage, build using {@code builder.build().trimmed()}.
671 Returns the smallest index for which {@link #get} returns {@code target}, or {@code -1} if no such index exists. Values are compared as if by {@link Double#equals}. Equivalent to {@code asList().indexOf(target)}.
672 Returns the largest index for which {@link #get} returns {@code target}, or {@code -1} if no such index exists. Values are compared as if by {@link Double#equals}. Equivalent to {@code asList().lastIndexOf(target)}.
673 Returns a string representation of this array in the same form as {@link Arrays#toString(double[])}, for example {@code "[1, 2, 3]"}.
674 Returns {@code true} if {@code target} is present at any index in this array. Equivalent to {@code asList().contains(target)}.
675 Returns a new, empty builder for {@link ImmutableIntArray} instances, sized to hold up to {@code initialCapacity} values without resizing. The returned builder is not thread-safe. <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number of values that will be added, if that knowledge is readily available. It is better to guess a value slightly too high than slightly too low. If the value is not exact, the {@link ImmutableIntArray} that is built will very likely occupy more memory than strictly necessary; to trim memory usage, build using {@code builder.build().trimmed()}.
676 Returns a new, empty builder for {@link ImmutableIntArray} instances, with a default initial capacity. The returned builder is not thread-safe. <p><b>Performance note:</b> The {@link ImmutableIntArray} that is built will very likely occupy more memory than necessary; to trim memory usage, build using {@code builder.build().trimmed()}.
677 Returns an unspecified hash code for the contents of this immutable array.
678 Returns a string representation of this array in the same form as {@link Arrays#toString(int[])}, for example {@code "[1, 2, 3]"}.
679 Returns {@code true} if {@code target} is present at any index in this array. Equivalent to {@code asList().contains(target)}.
680 Returns a new, empty builder for {@link ImmutableLongArray} instances, sized to hold up to {@code initialCapacity} values without resizing. The returned builder is not thread-safe. <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number of values that will be added, if that knowledge is readily available. It is better to guess a value slightly too high than slightly too low. If the value is not exact, the {@link ImmutableLongArray} that is built will very likely occupy more memory than strictly necessary; to trim memory usage, build using {@code builder.build().trimmed()}.
681 Returns a new, empty builder for {@link ImmutableLongArray} instances, with a default initial capacity. The returned builder is not thread-safe. <p><b>Performance note:</b> The {@link ImmutableLongArray} that is built will very likely occupy more memory than necessary; to trim memory usage, build using {@code builder.build().trimmed()}.
682 Returns an unspecified hash code for the contents of this immutable array.
683 Returns a string representation of this array in the same form as {@link Arrays#toString(long[])}, for example {@code "[1, 2, 3]"}.
684 Returns an array containing each value of {@code collection}, converted to a {@code int} value in the manner of {@link Number#intValue}. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}. Calling this method is as thread-safe as calling that method. @param collection a collection of {@code Number} instances @return an array containing the same values as {@code collection}, in the same order, converted to primitives @throws NullPointerException if {@code collection} or any of its elements is null @since 1.0 (parameter was {@code Collection<Integer>} before 12.0)
685 Returns the index of the first appearance of the value {@code target} in {@code array}. @param array an array of {@code int} values, possibly empty @param target a primitive {@code int} value @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
686 Returns the index of the last appearance of the value {@code target} in {@code array}. @param array an array of {@code int} values, possibly empty @param target a primitive {@code int} value @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
687 Returns an array containing each value of {@code collection}, converted to a {@code long} value in the manner of {@link Number#longValue}. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}. Calling this method is as thread-safe as calling that method. @param collection a collection of {@code Number} instances @return an array containing the same values as {@code collection}, in the same order, converted to primitives @throws NullPointerException if {@code collection} or any of its elements is null @since 1.0 (parameter was {@code Collection<Long>} before 12.0)
688 Returns the index of the first appearance of the value {@code target} in {@code array}. @param array an array of {@code long} values, possibly empty @param target a primitive {@code long} value @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
689 Returns the index of the last appearance of the value {@code target} in {@code array}. @param array an array of {@code long} values, possibly empty @param target a primitive {@code long} value @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
690 Parses the specified string as a signed long value using the specified radix. The ASCII character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign. <p>Unlike {@link Long#parseLong(String, int)}, this method returns {@code null} instead of throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns {@code null} if non-ASCII digits are present in the string. <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link Integer#parseInt(String)} accepts them. @param string the string representation of a long value @param radix the radix to use when parsing @return the long value represented by {@code string} using {@code radix}, or {@code null} if {@code string} has a length of zero or cannot be parsed as a long value @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX} @throws NullPointerException if {@code string} is {@code null} @since 19.0
691 Returns an array containing each value of {@code collection}, converted to a {@code short} value in the manner of {@link Number#shortValue}. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}. Calling this method is as thread-safe as calling that method. @param collection a collection of {@code Number} instances @return an array containing the same values as {@code collection}, in the same order, converted to primitives @throws NullPointerException if {@code collection} or any of its elements is null @since 1.0 (parameter was {@code Collection<Short>} before 12.0)
692 Returns the index of the first appearance of the value {@code target} in {@code array}. @param array an array of {@code short} values, possibly empty @param target a primitive {@code short} value @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
693 Returns the index of the last appearance of the value {@code target} in {@code array}. @param array an array of {@code short} values, possibly empty @param target a primitive {@code short} value @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
694 Returns the {@code short} value whose big-endian representation is stored in the first 2 bytes of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getShort()}. For example, the input byte array {@code {0x54, 0x32}} would yield the {@code short} value {@code 0x5432}. <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more flexibility at little cost in readability. @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements
695 Returns the Unsafe-using Comparator, or falls back to the pure-Java implementation if unable to do so.
696 Returns an {@code UnsignedInteger} corresponding to a given bit representation. The argument is interpreted as an unsigned 32-bit value. Specifically, the sign bit of {@code bits} is interpreted as a normal bit, and all other bits are treated as usual. <p>If the argument is nonnegative, the returned result will be equal to {@code bits}, otherwise, the result will be equal to {@code 2^32 + bits}. <p>To represent unsigned decimal constants, consider {@link #valueOf(long)} instead. @since 14.0
697 Returns a string representation of the {@code UnsignedInteger} value, in base {@code radix}. If {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix {@code 10} is used.
698 Returns a string representation of x, where x is treated as unsigned. <p><b>Java 8+ users:</b> use {@link Integer#toUnsignedString(int)} instead.
699 Compares the two specified {@code int} values, treating them as unsigned values between {@code 0} and {@code 2^32 - 1} inclusive. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the equivalent {@link Integer#compareUnsigned(int, int)} method instead. @param a the first unsigned {@code int} to compare @param b the second unsigned {@code int} to compare @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is greater than {@code b}; or zero if they are equal
700 Returns an {@code UnsignedLong} corresponding to a given bit representation. The argument is interpreted as an unsigned 64-bit value. Specifically, the sign bit of {@code bits} is interpreted as a normal bit, and all other bits are treated as usual. <p>If the argument is nonnegative, the returned result will be equal to {@code bits}, otherwise, the result will be equal to {@code 2^64 + bits}. <p>To represent decimal constants less than {@code 2^63}, consider {@link #valueOf(long)} instead. @since 14.0
701 Compares the two specified {@code long} values, treating them as unsigned values between {@code 0} and {@code 2^64 - 1} inclusive. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the equivalent {@link Long#compareUnsigned(long, long)} method instead. @param a the first unsigned {@code long} to compare @param b the second unsigned {@code long} to compare @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is greater than {@code b}; or zero if they are equal
702 Returns the unsigned {@code long} value represented by a string with the given radix. <p><b>Java 8+ users:</b> use {@link Long#parseUnsignedLong(String, int)} instead. @param string the string containing the unsigned {@code long} representation to be parsed. @param radix the radix to use while parsing {@code string} @throws NumberFormatException if the string does not contain a valid unsigned {@code long} with the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}. @throws NullPointerException if {@code string} is null (in contrast to {@link Long#parseLong(String)})
703 {@inheritDoc} <ul> <li>{@code proxy.hashCode()} delegates to {@link AbstractInvocationHandler#hashCode} <li>{@code proxy.toString()} delegates to {@link AbstractInvocationHandler#toString} <li>{@code proxy.equals(argument)} returns true if: <ul> <li>{@code proxy} and {@code argument} are of the same type <li>and {@link AbstractInvocationHandler#equals} returns true for the {@link InvocationHandler} of {@code argument} </ul> <li>other method calls are dispatched to {@link #handleInvocation}. </ul>
704 Returns the package name of the class, without attempting to load the class. <p>Behaves similarly to {@code class.getPackage().}{@link Package#getName() getName()} but does not require the class (or package) to be loaded. <p>But note that this method may behave differently for a class in the default package: For such classes, this method always returns an empty string. But under some version of Java, {@code class.getPackage().getName()} produces a {@code NullPointerException} because {@code class.getPackage()} returns {@code null}.
705 Returns the package name of {@code clazz} according to the Java Language Specification (section 6.7). Unlike {@link Class#getPackage}, this method only parses the class name, without attempting to define the {@link Package} and hence load files.
706 Returns a {@link ByteSource} view of the resource from which its bytes can be read. @throws NoSuchElementException if the resource cannot be loaded through the class loader, despite physically existing in the class path. @since 20.0
707 Returns true if the element is public.
708 Returns true if the element is protected.
709 Returns true if the element is private.
710 Returns true if the element is static.
711 Returns {@code true} if this method is final, per {@code Modifier.isFinal(getModifiers())}. <p>Note that a method may still be effectively "final", or non-overridable when it has no {@code final} keyword. For example, it could be private, or it could be declared by a final class. To tell whether a method is overridable, use {@link Invokable#isOverridable}.
712 Returns true if the method is abstract.
713 Returns true if the element is native.
714 Returns true if the method is synchronized.
715 Returns true if the field is volatile.
716 Returns true if the field is transient.
717 Returns true if {@code type} is a {@code TypeVariable} with the same name and declared by the same {@code GenericDeclaration}.
718 Returns an instance of type token that wraps {@code type}.
719 Returns an instance of type token that wraps {@code type}.
720 Unboxes {@code obj}. Assumes that obj is not {@code null} or a {@link DelegatingToFuture}.
721 {@inheritDoc} @since 10.0
722 If this future has been cancelled (and possibly interrupted), cancels (and possibly interrupts) the given future (if available).
723 @return a {@code ListenableFuture} representing pending completion of the task @throws RejectedExecutionException {@inheritDoc}
724 Schedules the task to run on the provided executor on behalf of the service.
725 Schedules the task to run on the provided executor on behalf of the service.
726 Duration-based overload of {@link #invokeAll(Collection, long, TimeUnit)}. @since 32.1.0
727 Duration-based overload of {@link #invokeAny(Collection, long, TimeUnit)}. @since 32.1.0
728 Duration-based overload of {@link #awaitTermination(long, TimeUnit)}. @since 32.1.0
729 Duration-based overload of {@link #schedule(Callable, long, TimeUnit)}. @since 29.0
730 Duration-based overload of {@link #scheduleAtFixedRate(Runnable, long, long, TimeUnit)}. @since 29.0
731 Duration-based overload of {@link #scheduleWithFixedDelay(Runnable, long, long, TimeUnit)}. @since 29.0
732 Waits for the {@link Service} to reach the {@linkplain State#RUNNING running state} for no more than the given time. @param timeout the maximum time to wait @throws TimeoutException if the service has not reached the given state within the deadline @throws IllegalStateException if the service reaches a state from which it is not possible to enter the {@link State#RUNNING RUNNING} state. e.g. if the {@code state} is {@code State#TERMINATED} when this method is called then this will throw an IllegalStateException. @since 28.0
733 Waits for the {@link Service} to reach a terminal state (either {@link Service.State#TERMINATED terminated} or {@link Service.State#FAILED failed}) for no more than the given time. @param timeout the maximum time to wait @throws TimeoutException if the service has not reached the given state within the deadline @throws IllegalStateException if the service {@linkplain State#FAILED fails}. @since 28.0
734 Returns an instance of {@code interfaceType} that delegates all method calls to the {@code target} object, enforcing the specified time limit on each call. This time-limited delegation is also performed for calls to {@link Object#equals}, {@link Object#hashCode}, and {@link Object#toString}. <p>If the target method call finishes before the limit is reached, the return value or exception is propagated to the caller exactly as-is. If, on the other hand, the time limit is reached, the proxy will attempt to abort the call to the target, and will throw an {@link UncheckedTimeoutException} to the caller. <p>It is important to note that the primary purpose of the proxy object is to return control to the caller when the timeout elapses; aborting the target method call is of secondary concern. The particular nature and strength of the guarantees made by the proxy is implementation-dependent. However, it is important that each of the methods on the target object behaves appropriately when its thread is interrupted. <p>For example, to return the value of {@code target.someMethod()}, but substitute {@code DEFAULT_VALUE} if this method call takes over 50 ms, you can use this code: <pre> TimeLimiter limiter = . . .; TargetType proxy = limiter.newProxy(target, TargetType.class, Duration.ofMillis(50)); try { return proxy.someMethod(); } catch (UncheckedTimeoutException e) { return DEFAULT_VALUE; } </pre> @param target the object to proxy @param interfaceType the interface you wish the returned proxy to implement @param timeout the maximum length of time that callers are willing to wait on each method call to the proxy @return a time-limiting proxy @throws IllegalArgumentException if {@code interfaceType} is a regular class, enum, or annotation type, rather than an interface @since 28.0
735 Invokes a specified Callable, timing out after the specified time limit. If the target method call finishes before the limit is reached, the return value or a wrapped exception is propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to the target, and throw a {@link TimeoutException} to the caller. @param callable the Callable to execute @param timeout the maximum length of time to wait @return the result returned by the Callable @throws TimeoutException if the time limit is reached @throws InterruptedException if the current thread was interrupted during execution @throws ExecutionException if {@code callable} throws a checked exception @throws UncheckedExecutionException if {@code callable} throws a {@code RuntimeException} @throws ExecutionError if {@code callable} throws an {@code Error} @since 28.0
736 Invokes a specified Callable, timing out after the specified time limit. If the target method call finishes before the limit is reached, the return value or a wrapped exception is propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to the target, and throw a {@link TimeoutException} to the caller. <p>The difference with {@link #callWithTimeout(Callable, Duration)} is that this method will ignore interrupts on the current thread. @param callable the Callable to execute @param timeout the maximum length of time to wait @return the result returned by the Callable @throws TimeoutException if the time limit is reached @throws ExecutionException if {@code callable} throws a checked exception @throws UncheckedExecutionException if {@code callable} throws a {@code RuntimeException} @throws ExecutionError if {@code callable} throws an {@code Error} @since 28.0
737 Invokes a specified Runnable, timing out after the specified time limit. If the target method run finishes before the limit is reached, this method returns or a wrapped exception is propagated. If, on the other hand, the time limit is reached, we attempt to abort the run, and throw a {@link TimeoutException} to the caller. @param runnable the Runnable to execute @param timeout the maximum length of time to wait @throws TimeoutException if the time limit is reached @throws InterruptedException if the current thread was interrupted during execution @throws UncheckedExecutionException if {@code runnable} throws a {@code RuntimeException} @throws ExecutionError if {@code runnable} throws an {@code Error} @since 28.0
738 Invokes a specified Runnable, timing out after the specified time limit. If the target method run finishes before the limit is reached, this method returns or a wrapped exception is propagated. If, on the other hand, the time limit is reached, we attempt to abort the run, and throw a {@link TimeoutException} to the caller. <p>The difference with {@link #runWithTimeout(Runnable, Duration)} is that this method will ignore interrupts on the current thread. @param runnable the Runnable to execute @param timeout the maximum length of time to wait @throws TimeoutException if the time limit is reached @throws UncheckedExecutionException if {@code runnable} throws a {@code RuntimeException} @throws ExecutionError if {@code runnable} throws an {@code Error} @since 28.0
739 Returns the {@link ScheduledExecutorService} that will be used to execute the {@link #startUp}, {@link #runOneIteration} and {@link #shutDown} methods. If this method is overridden the executor will not be {@linkplain ScheduledExecutorService#shutdown shutdown} when this service {@linkplain Service.State#TERMINATED terminates} or {@linkplain Service.State#TERMINATED fails}. Subclasses may override this method to supply a custom {@link ScheduledExecutorService} instance. This method is guaranteed to only be called once. <p>By default this returns a new {@link ScheduledExecutorService} with a single thread pool that sets the name of the thread to the {@linkplain #serviceName() service name}. Also, the pool will be {@linkplain ScheduledExecutorService#shutdown() shut down} when the service {@linkplain Service.State#TERMINATED terminates} or {@linkplain Service.State#TERMINATED fails}.
740 Fails this future with the given Throwable if {@link #allMustSucceed} is true. Also, logs the throwable if it is an {@link Error} or if {@link #allMustSucceed} is {@code true}, the throwable did not cause this future to fail, and it is the first time we've seen that particular Throwable.
741 Returns the String representation of the current value. @return the String representation of the current value
742 Returns the value of this {@code AtomicDouble} as an {@code int} after a narrowing primitive conversion.
743 Returns the value of this {@code AtomicDouble} as a {@code long} after a narrowing primitive conversion.
744 Returns the value of this {@code AtomicDouble} as a {@code float} after a narrowing primitive conversion.
745 Returns the value of this {@code AtomicDouble} as a {@code double}.
746 Saves the state to a stream (that is, serializes it). @serialData The current value is emitted (a {@code double}).
747 Reconstitutes the instance from a stream (that is, deserializes it).
748 Atomically updates the current value with the results of applying the given function to the current and given values. @param x the update value @param accumulatorFunction the accumulator function @return the previous value @since 31.1
749 Atomically updates the current value with the results of applying the given function to the current and given values. @param x the update value @param accumulatorFunction the accumulator function @return the updated value @since 31.1
750 Returns the String representation of the current values of array. @return the String representation of the current values of array
751 Saves the state to a stream (that is, serializes it). @serialData The length of the array is emitted (int), followed by all of its elements (each a {@code double}) in the proper order.
752 Atomically updates the element at index {@code i} with the results of applying the given function to the current and given values. @param i the index to update @param x the update value @param accumulatorFunction the accumulator function @return the previous value @since 31.1
753 Atomically updates the element at index {@code i} with the results of applying the given function to the current and given values. @param i the index to update @param x the update value @param accumulatorFunction the accumulator function @return the updated value @since 31.1
754 Atomically remove {@code key} from the map iff its associated value is 0. @since 20.0
755 Returns a live, read-only view of the map backing this {@code AtomicLongMap}.
756 If {@code (key, expectedOldValue)} is currently in the map, this method replaces {@code expectedOldValue} with {@code newValue} and returns true; otherwise, this method returns false. <p>If {@code expectedOldValue} is zero, this method will succeed if {@code (key, zero)} is currently in the map, or if {@code key} is not in the map at all.
757 Marks this step as the last step in the {@code ClosingFuture} pipeline. <p>The returned {@link Future} is completed when the pipeline's computation completes, or when the pipeline is cancelled. <p>All objects the pipeline has captured for closing will begin to be closed asynchronously <b>after</b> the returned {@code Future} is done: the future completes before closing starts, rather than once it has finished. <p>After calling this method, you may not call {@link #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, this method, or any other derivation method on the original {@code ClosingFuture} instance. @return a {@link Future} that represents the final value or exception of the pipeline
758 Marks this step as the last step in the {@code ClosingFuture} pipeline. When this step is done, {@code receiver} will be called with an object that contains the result of the operation. The receiver can store the {@link ValueAndCloser} outside the receiver for later synchronous use. <p>After calling this method, you may not call {@link #finishToFuture()}, this method again, or any other derivation method on the original {@code ClosingFuture} instance. @param consumer a callback whose method will be called (using {@code executor}) when this operation is done
759 Adds the {@code Runnable} and accompanying {@code Executor} to the list of listeners to execute. If execution has already begun, the listener is executed immediately. <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener} documentation.
760 Runs this execution list, executing all existing pairs in the order they were added. However, note that listeners added after this point may be executed before those previously added, and note that the execution order of all listeners is ultimately chosen by the implementations of the supplied executors. <p>This method is idempotent. Calling it several times in parallel is semantically equivalent to calling it exactly once. @since 10.0 (present in 1.0 as {@code run})
761 Returns a {@code Future} whose result is taken from this {@code Future} or, if this {@code Future} fails with the given {@code exceptionType}, from the result provided by the {@code fallback}. {@link AsyncFunction#apply} is not invoked until the primary input has failed, so if the primary input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an exception is thrown, this exception is used as the result of the output {@code Future}. <p>Usage examples: {@snippet : // Falling back to a zero counter in case an exception happens when processing the RPC to fetch // counters. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catchingAsync( FetchException.class, x -> immediateFuture(0), directExecutor()); } <p>The fallback can also choose to propagate the original exception when desired: {@snippet : // Falling back to a zero counter only in case the exception was a // TimeoutException. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catchingAsync( FetchException.class, e -> { if (omitDataOnFetchFailure) { return immediateFuture(0); } throw e; }, directExecutor()); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link #addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. (Specifically, {@code directExecutor} functions should avoid heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for completing the returned {@code Future}.) <p>This method is similar to {@link java.util.concurrent.CompletableFuture#exceptionally}. It can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #transform}. @param exceptionType the exception type that triggers use of {@code fallback}. The exception type is matched against the input's exception. "The input's exception" means the cause of the {@link ExecutionException} thrown by {@code this.get()} or, if {@code get()} throws a different kind of exception, that exception itself. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding {@code Throwable.class} in particular. @param fallback the {@link AsyncFunction} to be called if the input fails with the expected exception type. The function's argument is the input's exception. "The input's exception" means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a different kind of exception, that exception itself. @param executor the executor that runs {@code fallback} if the input fails
762 Returns a new {@code Future} whose result is asynchronously derived from the result of this {@code Future}. If the input {@code Future} fails, the returned {@code Future} fails with the same exception (and the function is not invoked). <p>More precisely, the returned {@code Future} takes its result from a {@code Future} produced by applying the given {@code AsyncFunction} to the result of the original {@code Future}. Example usage: {@snippet : FluentFuture<RowKey> rowKeyFuture = FluentFuture.from(indexService.lookUp(query)); ListenableFuture<QueryResult> queryFuture = rowKeyFuture.transformAsync(dataService::readFuture, executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link #addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. (Specifically, {@code directExecutor} functions should avoid heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for completing the returned {@code Future}.) <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the input future and that of the future returned by the chain function. That is, if the returned {@code Future} is cancelled, it will attempt to cancel the other two, and if either of the other two is cancelled, the returned {@code Future} will receive a callback in which it will attempt to cancel itself. <p>This method is similar to {@link java.util.concurrent.CompletableFuture#thenCompose} and {@link java.util.concurrent.CompletableFuture#thenComposeAsync}. It can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #catching}. @param function A function to transform the result of this future to the result of the output future @param executor Executor to run the function in. @return A future that holds result of the function (if the input succeeded) or the original input's failure (if not)
763 Creates a {@code ListenableFuture} which has its value set immediately upon construction. The getters just return the value. This {@code Future} can't be canceled or timed out and its {@code isDone()} method always returns {@code true}.
764 Returns a {@code ListenableFuture} which has an exception set immediately upon construction. <p>The returned {@code Future} can't be cancelled, and its {@code isDone()} method always returns {@code true}. Calling {@code get()} will immediately throw the provided {@code Throwable} wrapped in an {@code ExecutionException}.
765 Creates a {@code ListenableFuture} which is cancelled immediately upon construction, so that {@code isCancelled()} always returns {@code true}. @since 14.0
766 Returns the ClassValue-using validator, or falls back to the "weak Set" implementation if unable to do so.
767 Dispatches all events enqueued prior to this call, serially and in order, for every listener. <p>Note: this method is idempotent and safe to call from any thread
768 Creates a monitor with a non-fair (but fast) ordering policy. Equivalent to {@code Monitor(false)}.
769 Enters this monitor. Blocks at most the given time, and may be interrupted. @return whether the monitor was entered @throws InterruptedException if interrupted while waiting @since 28.0 (but only since 33.4.0 in the Android flavor)
770 Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the lock, but does not wait for the guard to be satisfied, and may be interrupted. @return whether the monitor was entered, which guarantees that the guard is now satisfied @since 28.0 (but only since 33.4.0 in the Android flavor)
771 Queries whether any threads are waiting for the given guard to become satisfied. Note that because timeouts and interrupts may occur at any time, a {@code true} return does not guarantee that the guard becoming satisfied in the future will awaken any threads. This method is designed primarily for use in monitoring of the system state.
772 Exactly like guard.isSatisfied(), but in addition signals all waiting threads in the (hopefully unlikely) event that isSatisfied() throws.
773 Shuts down the given executor service gradually, first disabling new submissions and later, if necessary, cancelling remaining tasks. <p>The method takes the following steps: <ol> <li>calls {@link ExecutorService#shutdown()}, disabling acceptance of new submitted tasks. <li>awaits executor service termination for half of the specified timeout. <li>if the timeout expires, it calls {@link ExecutorService#shutdownNow()}, cancelling pending tasks and interrupting running tasks. <li>awaits executor service termination for the other half of the specified timeout. </ol> <p>If, at any step of the process, the calling thread is interrupted, the method calls {@link ExecutorService#shutdownNow()} and returns. <p>For a version of this method that waits <i>indefinitely</i>, use {@link ExecutorService#close}. @param service the {@code ExecutorService} to shut down @param timeout the maximum time to wait for the {@code ExecutorService} to terminate @return {@code true} if the {@code ExecutorService} was terminated successfully, {@code false} if the call timed out or was interrupted @since 28.0 (but only since 33.4.0 in the Android flavor)
774 Invokes {@code unit.}{@link TimeUnit#sleep(long) sleep(sleepFor)} uninterruptibly. @since 28.0 (but only since 33.4.0 in the Android flavor)
775 Updates the stable rate of this {@code RateLimiter}, that is, the {@code permitsPerSecond} argument provided in the factory method that constructed the {@code RateLimiter}. Currently throttled threads will <b>not</b> be awakened as a result of this invocation, thus they do not observe the new rate; only subsequent requests will. <p>Note though that, since each request repays (by waiting, if necessary) the cost of the <i>previous</i> request, this means that the very next request after an invocation to {@code setRate} will not be affected by the new rate; it will pay the cost of the previous request, which is in terms of the previous rate. <p>The behavior of the {@code RateLimiter} is not modified in any other way, e.g. if the {@code RateLimiter} was configured with a warmup period of 20 seconds, it still has a warmup period of 20 seconds after this method invocation. @param permitsPerSecond the new stable rate of this {@code RateLimiter} @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero
776 Returns the stable rate (as {@code permits per seconds}) with which this {@code RateLimiter} is configured with. The initial value of this is the same as the {@code permitsPerSecond} argument passed in the factory method that produced this {@code RateLimiter}, and it is only updated after invocations to {@linkplain #setRate}.
777 Creates a new {@code SettableFuture} that can be completed or cancelled by a later method call.
778 Invokes {@code future.}{@link Future#get(long, TimeUnit) get(timeout, unit)} uninterruptibly. <p>Similar methods: <ul> <li>To retrieve a result from a {@code Future} that is already done, use {@link Futures#getDone Futures.getDone}. <li>To treat {@link InterruptedException} uniformly with other exceptions, use {@link Futures#getChecked(Future, Class, long, TimeUnit) Futures.getChecked}. <li>To get uninterruptibility and remove checked exceptions, use {@link Futures#getUnchecked}. </ul> @throws ExecutionException if the computation threw an exception @throws CancellationException if the computation was cancelled @throws TimeoutException if the wait timed out @since 28.0 (but only since 33.4.0 in the Android flavor)
779 Creates a {@code Striped<ReadWriteLock>} with lazily initialized, weakly referenced read-write locks. Every lock is reentrant. @param stripes the minimum number of stripes (locks) required @return a new {@code Striped<ReadWriteLock>}
780 Creates a {@code Striped<Lock>} with eagerly initialized, strongly referenced locks. Every lock is reentrant. @param stripes the minimum number of stripes (locks) required @return a new {@code Striped<Lock>}
781 Creates a {@code Striped<Semaphore>} with eagerly initialized, strongly referenced semaphores, with the specified number of permits. @param stripes the minimum number of stripes (semaphores) required @param permits the number of permits in each semaphore @return a new {@code Striped<Semaphore>}
782 Creates a {@code Striped<ReadWriteLock>} with eagerly initialized, strongly referenced read-write locks. Every lock is reentrant. @param stripes the minimum number of stripes (locks) required @return a new {@code Striped<ReadWriteLock>}
783 Returns a new thread factory using the options supplied during the building process. After building, it is still possible to change the options used to build the ThreadFactory and/or build again. State is not shared amongst built instances. @return the fully constructed {@link ThreadFactory}
784 Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code Runnable}, and arrange that {@code get} will return the given result on successful completion. @param runnable the runnable task @param result the result to return on successful completion. If you don't need a particular result, consider using constructions of the form: {@code ListenableFuture<?> f = ListenableFutureTask.create(runnable, null)}
785 Invokes {@code latch.}{@link CountDownLatch#await(long, TimeUnit) await(timeout, unit)} uninterruptibly. @since 28.0 (but only since 33.4.0 in the Android flavor)
786 Invokes {@code condition.}{@link Condition#await(long, TimeUnit) await(timeout, unit)} uninterruptibly. @since 28.0 (but only since 33.4.0 in the Android flavor)
787 Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(1, timeout, unit)} uninterruptibly. @since 18.0
788 Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(permits, timeout, unit)} uninterruptibly. @since 28.0 (but only since 33.4.0 in the Android flavor)
789 Invokes {@code lock.}{@link Lock#tryLock(long, TimeUnit) tryLock(timeout, unit)} uninterruptibly. @since 30.0 (but only since 33.4.0 in the Android flavor)
790 Invokes {@code executor.}{@link ExecutorService#awaitTermination(long, TimeUnit) awaitTermination(long, TimeUnit)} uninterruptibly. @since 30.0 (but only since 33.4.0 in the Android flavor)
791 Returns a PublicSuffixType of the right type according to the given code
792 Returns an {@code Optional} instance containing the given non-null reference. To have {@code null} treated as {@link #absent}, use {@link #fromNullable} instead. <p><b>Comparison to {@code java.util.Optional}:</b> no differences. @throws NullPointerException if {@code reference} is null
793 Creates (but does not start) a new stopwatch, using the specified time source. @since 15.0
794 Returns the index in {@code iterable} of the first element that satisfies the provided {@code predicate}, or {@code -1} if the Iterable has no such elements. <p>More formally, returns the lowest index {@code i} such that {@code predicate.apply(Iterables.get(iterable, i))} returns {@code true}, or {@code -1} if there is no such index. @since 2.0
795 Returns {@code true} if one or more elements returned by {@code iterator} satisfy the given predicate.
796 Uses a naturally-ordered {@link TreeSet} to store value collections.
797 Returns a {@code Collector} that accumulates elements into an {@code ImmutableTable}. Each input element is mapped to one cell in the returned table, with the rows, columns, and values generated by applying the specified functions. If multiple inputs are mapped to the same row and column pair, they will be combined with the specified merging function in encounter order. <p>The returned {@code Collector} will throw a {@code NullPointerException} at collection time if the row, column, value, or merging functions return null on any input. @since 21.0
798 Returns a predicate that evaluates to true if and only if the input is equivalent to {@code target} according to this equivalence relation. @since 10.0
799 Returns a function which performs a map lookup with a default value. The function created by this method returns {@code defaultValue} for all inputs that do not belong to the map's key set. See also {@link #forMap(Map)}, which throws an exception in this case. <p>Prefer to write the lambda expression {@code k -> map.getOrDefault(k, defaultValue)} instead. Note that it is not serializable unless you explicitly make it {@link Serializable}, typically by writing {@code (Function<K, V> & Serializable) k -> map.getOrDefault(k, defaultValue)}. @param map source map that determines the function behavior @param defaultValue the value to return for inputs that aren't map keys @return function that returns {@code map.get(a)} when {@code a} is a key, or {@code defaultValue} otherwise
800 Returns the composition of two functions. For {@code f: A->B} and {@code g: B->C}, composition is defined as the function h such that {@code h(a) == g(f(a))} for each {@code a}. <p><b>JRE users and Android users who opt in to library desugaring:</b> use {@code g.compose(f)} or (probably clearer) {@code f.andThen(g)} instead. Note that it is not serializable. @param g the second function to apply @param f the first function to apply @return the composition of {@code f} and {@code g} @see <a href="//en.wikipedia.org/wiki/Function_composition">function composition</a>
801 Returns a function which performs a map lookup. The returned function throws an {@link IllegalArgumentException} if given a key that does not exist in the map. See also {@link #forMap(Map, Object)}, which returns a default value in this case. <p>Note: if {@code map} is a {@link com.google.common.collect.BiMap BiMap} (or can be one), you can use {@link com.google.common.collect.Maps#asConverter Maps.asConverter} instead to get a function that also supports reverse conversion. <p>If you are okay with {@code null} being returned for an unrecognized key (instead of an exception being thrown), you can use the method reference {@code map::get} instead. Note that it is not serializable unless you explicitly make it {@link Serializable}, typically by writing {@code (Function<K, V> & Serializable) map::get}.
802 Returns a splitter that considers any subsequence matching {@code pattern} to be a separator. For example, {@code Splitter.on(Pattern.compile("\r?\n")).split(entireFile)} splits a string into lines whether it uses DOS-style or UNIX-style line terminators. @param separatorPattern the pattern that determines whether a subsequence is a separator. This pattern may not match the empty string. @return a splitter, with default settings, that uses this pattern @throws IllegalArgumentException if {@code separatorPattern} matches the empty string
803 Returns a joiner which automatically places {@code separator} between consecutive elements.
804 Returns a joiner which automatically places {@code separator} between consecutive elements.
805 Returns a map joiner with the same behavior as this one, except automatically substituting {@code nullText} for any provided null keys or values.
806 Returns a splitter that considers any subsequence matching a given pattern (regular expression) to be a separator. For example, {@code Splitter.onPattern("\r?\n").split(entireFile)} splits a string into lines whether it uses DOS-style or UNIX-style line terminators. This is equivalent to {@code Splitter.on(Pattern.compile(pattern))}. @param separatorPattern the pattern that determines whether a subsequence is a separator. This pattern may not match the empty string. @return a splitter, with default settings, that uses this pattern @throws IllegalArgumentException if {@code separatorPattern} matches the empty string or is a malformed expression
807 Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested contains any match for the given regular expression pattern. The test used is equivalent to {@code pattern.matcher(arg).find()} @since 3.0
808 Returns a predicate that evaluates to {@code true} if the given predicate evaluates to {@code false}. <p><b>Discouraged:</b> Prefer using {@code predicate.negate()}.
809 Returns a predicate that evaluates to {@code true} if each of its components evaluates to {@code true}. The components are evaluated in order, and evaluation will be "short-circuited" as soon as a false predicate is found. It defensively copies the iterable passed in, so future changes to it won't alter the behavior of this predicate. If {@code components} is empty, the returned predicate will always evaluate to {@code true}. <p><b>Discouraged:</b> Prefer using {@code first.and(second).and(third).and(...)}.
810 Returns a predicate that evaluates to {@code true} if any one of its components evaluates to {@code true}. The components are evaluated in order, and evaluation will be "short-circuited" as soon as a true predicate is found. It defensively copies the iterable passed in, so future changes to it won't alter the behavior of this predicate. If {@code components} is empty, the returned predicate will always evaluate to {@code false}. <p><b>Discouraged:</b> Prefer using {@code first.or(second).or(third).or(...)}.
811 Splits {@code sequence} into substrings, splits each substring into an entry, and returns an unmodifiable map with each of the entries. For example, {@code Splitter.on(';').trimResults().withKeyValueSeparator("=>").split("a=>b ; c=>b")} will return a mapping from {@code "a"} to {@code "b"} and {@code "c"} to {@code "b"}. <p>The returned map preserves the order of the entries from {@code sequence}. @throws IllegalArgumentException if the specified sequence does not split into valid map entries, or if there are duplicate keys
812 Splits {@code sequence} into string components and makes them available through an {@link Stream}, which may be lazily evaluated. If you want an eagerly computed {@link List}, use {@link #splitToList(CharSequence)}. @param sequence the sequence of characters to split @return a stream over the segments split from the parameter @since 28.2 (but only since 33.4.0 in the Android flavor)
813 Returns a supplier which caches the instance retrieved during the first call to {@code get()} and returns that value on subsequent calls to {@code get()}. See: <a href="http://en.wikipedia.org/wiki/Memoization">memoization</a> <p>The returned supplier is thread-safe. The delegate's {@code get()} method will be invoked at most once unless the underlying {@code get()} throws an exception. The supplier's serialized form does not contain the cached value, which will be recalculated when {@code get()} is called on the deserialized instance. <p>When the underlying delegate throws an exception then this memoizing supplier will keep delegating calls until it returns valid data. <p>If {@code delegate} is an instance created by an earlier call to {@code memoize}, it is returned directly.
814 Returns a new supplier which is the composition of the provided function and supplier. In other words, the new supplier's value will be computed by retrieving the value from {@code supplier}, and then applying {@code function} to that value. Note that the resulting supplier will not call {@code supplier} or invoke {@code function} until it is called.
815 Returns a supplier whose {@code get()} method synchronizes on {@code delegate} before calling it, making it thread-safe.
816 Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@code declaredType}. Example usage: <pre> try { someMethodThatCouldThrowAnything(); } catch (IKnowWhatToDoWithThisException e) { handle(e); } catch (Throwable t) { Throwables.propagateIfInstanceOf(t, IOException.class); Throwables.propagateIfInstanceOf(t, SQLException.class); throw Throwables.propagate(t); } </pre> @deprecated Use {@link #throwIfInstanceOf}, which has the same behavior but rejects {@code null}.
817 Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link RuntimeException} or {@link Error}. @deprecated Use {@link #throwIfUnchecked}, which has the same behavior but rejects {@code null}.
818 Propagates {@code throwable} as-is if it is an instance of {@link RuntimeException} or {@link Error}, or else as a last resort, wraps it in a {@code RuntimeException} and then propagates. <p>This method always throws an exception. The {@code RuntimeException} return type allows client code to signal to the compiler that statements after the call are unreachable. Example usage: <pre> T doSomething() { try { return someMethodThatCouldThrowAnything(); } catch (IKnowWhatToDoWithThisException e) { return handle(e); } catch (Throwable t) { throw Throwables.propagate(t); } } </pre> @param throwable the Throwable to propagate @return nothing will ever be returned; this return type is only for your convenience, as illustrated in the example above @deprecated To preserve behavior, use {@code throw e} or {@code throw new RuntimeException(e)} directly, or use a combination of {@link #throwIfUnchecked} and {@code throw new RuntimeException(e)}. But consider whether users would be better off if your API threw a different type of exception. For background on the deprecation, read <a href="https://github.com/google/guava/wiki/Why-we-deprecated-Throwables.propagate">Why we deprecated {@code Throwables.propagate}</a>.
819 Returns the stack trace of {@code throwable}, possibly providing slower iteration over the full trace but faster iteration over parts of the trace. Here, "slower" and "faster" are defined in comparison to the normal way to access the stack trace, {@link Throwable#getStackTrace() throwable.getStackTrace()}. Note, however, that this method's special implementation is not available for all platforms and configurations. If that implementation is unavailable, this method falls back to {@code getStackTrace}. Callers that require the special implementation can check its availability with {@link #lazyStackTraceIsLazy()}. <p>The expected (but not guaranteed) performance of the special implementation differs from {@code getStackTrace} in one main way: The {@code lazyStackTrace} call itself returns quickly by delaying the per-stack-frame work until each element is accessed. Roughly speaking: <ul> <li>{@code getStackTrace} takes {@code stackSize} time to return but then negligible time to retrieve each element of the returned list. <li>{@code lazyStackTrace} takes negligible time to return but then {@code 1/stackSize} time to retrieve each element of the returned list (probably slightly more than {@code 1/stackSize}). </ul> <p>Note: The special implementation does not respect calls to {@link Throwable#setStackTrace throwable.setStackTrace}. Instead, it always reflects the original stack trace from the exception's creation. @since 19.0 @deprecated This method is equivalent to {@link Throwable#getStackTrace()} on JDK versions past JDK 8 and on all Android versions. Use {@link Throwable#getStackTrace()} directly, or where possible use the {@code java.lang.StackWalker.walk} method introduced in JDK 9.
820 This method is a convenience for testing. Code should call {@link Segment#newEntry} directly.
821 Creates a new {@code RemovalNotification} for the given {@code key}/{@code value} pair, with the given {@code cause} for the removal. The {@code key} and/or {@code value} may be {@code null} if they were already garbage collected. @since 19.0
822 Returns a {@code Collector} that accumulates elements into a multiset created via the specified {@code Supplier}, whose elements are the result of applying {@code elementFunction} to the inputs, with counts equal to the result of applying {@code countFunction} to the inputs. Elements are added in encounter order. <p>If the mapped elements contain duplicates (according to {@link Object#equals}), the element will be added more than once, with the count summed over all appearances of the element. <p>Note that {@code stream.collect(toMultiset(function, e -> 1, supplier))} is equivalent to {@code stream.map(function).collect(Collectors.toCollection(supplier))}. <p>To collect to an {@link ImmutableMultiset}, use {@link ImmutableMultiset#toImmutableMultiset}. @since 22.0
823 Returns a {@code Collector} accumulating entries into a {@code Multimap} generated from the specified supplier. The keys and values of the entries are the result of applying the provided mapping functions to the input elements, accumulated in the encounter order of the stream. <p>Example: {@snippet : static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP = Stream.of("banana", "apple", "carrot", "asparagus", "cherry") .collect( toMultimap( str -> str.charAt(0), str -> str.substring(1), MultimapBuilder.treeKeys().arrayListValues()::build)); // is equivalent to static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP; static { FIRST_LETTER_MULTIMAP = MultimapBuilder.treeKeys().arrayListValues().build(); FIRST_LETTER_MULTIMAP.put('b', "anana"); FIRST_LETTER_MULTIMAP.put('a', "pple"); FIRST_LETTER_MULTIMAP.put('a', "sparagus"); FIRST_LETTER_MULTIMAP.put('c', "arrot"); FIRST_LETTER_MULTIMAP.put('c', "herry"); } } <p>To collect to an {@link ImmutableMultimap}, use either {@link ImmutableSetMultimap#toImmutableSetMultimap} or {@link ImmutableListMultimap#toImmutableListMultimap}. @since 21.0
824 Returns a {@code Collector} accumulating entries into a {@code Multimap} generated from the specified supplier. Each input element is mapped to a key and a stream of values, each of which are put into the resulting {@code Multimap}, in the encounter order of the stream and the encounter order of the streams of values. <p>Example: {@snippet : static final ListMultimap<Character, Character> FIRST_LETTER_MULTIMAP = Stream.of("banana", "apple", "carrot", "asparagus", "cherry") .collect( flatteningToMultimap( str -> str.charAt(0), str -> str.substring(1).chars().mapToObj(c -> (char) c), MultimapBuilder.linkedHashKeys().arrayListValues()::build)); // is equivalent to static final ListMultimap<Character, Character> FIRST_LETTER_MULTIMAP; static { FIRST_LETTER_MULTIMAP = MultimapBuilder.linkedHashKeys().arrayListValues().build(); FIRST_LETTER_MULTIMAP.putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a')); FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('p', 'p', 'l', 'e')); FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't')); FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's')); FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y')); } } @since 21.0
825 Returns a collection that applies {@code function} to each element of {@code fromCollection}. The returned collection is a live view of {@code fromCollection}; changes to one affect the other. <p>The returned collection's {@code add()} and {@code addAll()} methods throw an {@link UnsupportedOperationException}. All other collection methods are supported, as long as {@code fromCollection} supports them. <p>The returned collection isn't threadsafe or serializable, even if {@code fromCollection} is. <p>When a live view is <i>not</i> needed, it may be faster to copy the transformed collection and use the copy. <p>If the input {@code Collection} is known to be a {@code List}, consider {@link Lists#transform}. If only an {@code Iterable} is available, use {@link Iterables#transform}. <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#map Stream.map}.
826 Returns {@code true} if {@code iterable} contains any element {@code o} for which {@code Objects.equals(o, element)} would return {@code true}. Otherwise returns {@code false}, even in cases where {@link Collection#contains} might throw {@link NullPointerException} or {@link ClassCastException}.
827 @since 12.0
828 @since 12.0
829 Adds the given element to this queue. If the queue is currently full, the element at the head of the queue is evicted to make room. @return {@code true} always
830 {@inheritDoc} @since 8.0
831 {@inheritDoc} @since 8.0
832 {@inheritDoc} @since 8.0
833 Adds {@code element} to the {@code ImmutableSortedMultiset}. @param element the element to add @return this {@code Builder} object @throws NullPointerException if {@code element} is null
834 Adds a number of occurrences of an element to this {@code ImmutableSortedMultiset}. @param element the element to add @param occurrences the number of occurrences of the element to add. May be zero, in which case no change will be made. @return this {@code Builder} object @throws NullPointerException if {@code element} is null @throws IllegalArgumentException if {@code occurrences} is negative, or if this operation would result in more than {@link Integer#MAX_VALUE} occurrences of the element
835 Adds or removes the necessary occurrences of an element such that the element attains the desired count. @param element the element to add or remove occurrences of @param count the desired count of the element in this multiset @return this {@code Builder} object @throws NullPointerException if {@code element} is null @throws IllegalArgumentException if {@code count} is negative
836 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableMultiset}. Elements are sorted by the specified comparator. <p><b>Warning:</b> {@code comparator} should be <i>consistent with {@code equals}</i> as explained in the {@link Comparator} documentation. @since 21.0
837 {@inheritDoc} <p>This method returns a serializable {@code ImmutableSortedSet}. <p>The {@link SortedSet#headSet} documentation states that a subset of a subset throws an {@link IllegalArgumentException} if passed a {@code toElement} greater than an earlier {@code toElement}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code toElement}.
838 {@inheritDoc} <p>This method returns a serializable {@code ImmutableSortedSet}. <p>The {@link SortedSet#tailSet} documentation states that a subset of a subset throws an {@link IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code fromElement}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code fromElement}.
839 Returns a fluent iterable whose {@code Iterator} cycles indefinitely over the elements of this fluent iterable. <p>That iterator supports {@code remove()} if {@code iterable.iterator()} does. After {@code remove()} is called, subsequent cycles omit the removed element, which is no longer in this fluent iterable. The iterator's {@code hasNext()} method returns {@code true} until this fluent iterable is empty. <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit {@code break} or be certain that you will eventually remove all the elements. <p><b>{@code Stream} equivalent:</b> if the source iterable has only a single element {@code e}, use {@code Stream.generate(() -> e)}. Otherwise, collect your stream into a collection and use {@code Stream.generate(() -> collection).flatMap(Collection::stream)}.
840 Returns the elements from this fluent iterable that satisfy a predicate. The resulting fluent iterable's iterator does not support {@code remove()}. <p><b>{@code Stream} equivalent:</b> {@link Stream#filter} (same).
841 Returns a view of {@code unfiltered} containing all elements that are of the type {@code desiredType}. The returned iterable's iterator does not support {@code remove()}. <p><b>{@code Stream} equivalent:</b> {@code stream.filter(type::isInstance).map(type::cast)}. This does perform a little more work than necessary, so another option is to insert an unchecked cast at some later point: {@snippet : @SuppressWarnings("unchecked") // safe because of ::isInstance check ImmutableList<NewType> result = (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList()); }
842 Returns a fluent iterable that applies {@code function} to each element of this fluent iterable. <p>The returned fluent iterable's iterator supports {@code remove()} if this iterable's iterator does. After a successful {@code remove()} call, this fluent iterable no longer contains the corresponding element. <p><b>{@code Stream} equivalent:</b> {@link Stream#map}.
843 Returns a {@code PeekingIterator} backed by the given iterator. <p>Calls to the {@code peek} method with no intervening calls to {@code next} do not affect the iteration, and hence return the same object each time. A subsequent call to {@code next} is guaranteed to return the same object again. For example: {@snippet : PeekingIterator<String> peekingIterator = Iterators.peekingIterator(Iterators.forArray("a", "b")); String a1 = peekingIterator.peek(); // returns "a" String a2 = peekingIterator.peek(); // also returns "a" String a3 = peekingIterator.next(); // also returns "a" } <p>Any structural changes to the underlying iteration (aside from those performed by the iterator's own {@link PeekingIterator#remove()} method) will leave the iterator in an undefined state. <p>The returned iterator does not support removal after peeking, as explained by {@link PeekingIterator#remove()}. <p>Note: If the given iterator is already a {@code PeekingIterator}, it <i>might</i> be returned to the caller, although this is neither guaranteed to occur nor required to be consistent. For example, this method <i>might</i> choose to pass through recognized implementations of {@code PeekingIterator} when the behavior of the implementation is known to meet the contract guaranteed by this method. <p>There is no {@link Iterable} equivalent to this method, so use this method to wrap each individual iterator as it is generated. @param iterator the backing iterator. The {@link PeekingIterator} assumes ownership of this iterator, so users should cease making direct calls to it after calling this method. @return a peeking iterator backed by that iterator. Apart from the additional {@link PeekingIterator#peek()} method, this iterator behaves exactly the same as {@code iterator}.
844 Removes, from an iterable, every element that belongs to the provided collection. <p>This method calls {@link Collection#removeAll} if {@code iterable} is a collection, and {@link Iterators#removeAll} otherwise. @param removeFrom the iterable to (potentially) remove elements from @param elementsToRemove the elements to remove @return {@code true} if any element was removed from {@code iterable}
845 Removes, from an iterable, every element that satisfies the provided predicate. <p>Removals may or may not happen immediately as each element is tested against the predicate. The behavior of this method is not specified if {@code predicate} is dependent on {@code removeFrom}. <p><b>Java 8+ users:</b> if {@code removeFrom} is a {@link Collection}, use {@code removeFrom.removeIf(predicate)} instead. @param removeFrom the iterable to (potentially) remove elements from @param predicate a predicate that determines whether an element should be removed @return {@code true} if any elements were removed from the iterable @throws UnsupportedOperationException if the iterable does not support {@code remove()}. @since 2.0
846 Removes, from an iterable, every element that does not belong to the provided collection. <p>This method calls {@link Collection#retainAll} if {@code iterable} is a collection, and {@link Iterators#retainAll} otherwise. @param removeFrom the iterable to (potentially) remove elements from @param elementsToRetain the elements to retain @return {@code true} if any element was removed from {@code iterable}
847 A sensible definition of {@link #addAll} in terms of {@link #add}. If you override {@link #add}, you may wish to override {@link #addAll} to forward to this implementation. @since 7.0
848 Adds all elements in {@code iterable} to {@code collection}. @return {@code true} if {@code collection} was modified as a result of this operation.
849 Creates a <i>mutable</i> {@code ArrayList} instance containing the given elements; a very thin shortcut for creating an empty list and then calling {@link Iterators#addAll}. <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link ImmutableList#copyOf(Iterator)} instead.
850 Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin convenience for creating an empty set and then calling {@link Iterators#addAll}. <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link ImmutableSet#copyOf(Iterator)} instead. <p><b>Note:</b> if {@code E} is an {@link Enum} type, you should create an {@link EnumSet} instead. <p>Overall, this method is not very useful and will likely be deprecated in the future.
851 Returns a view of {@code unfiltered} containing all elements that are of the type {@code desiredType}.
852 Returns {@code true} if every element in {@code iterable} satisfies the predicate. If {@code iterable} is empty, {@code true} is returned. <p><b>{@code Stream} equivalent:</b> {@link Stream#allMatch}.
853 Returns the first element in {@code iterable} that satisfies the given predicate; use this method only when such an element is known to exist. If it is possible that <i>no</i> element will match, use {@link #tryFind} or {@link #find(Iterable, Predicate, Object)} instead. <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst().get()} @throws NoSuchElementException if no element in {@code iterable} matches the given predicate
854 Removes all nodes for the specified key.
855 Returns an implementation of {@link List#listIterator(int)}.
856 Returns an unmodifiable list containing the specified first element and backed by the specified array of additional elements. Changes to the {@code rest} array will be reflected in the returned list. Unlike {@link Arrays#asList}, the returned list is unmodifiable. <p>This is useful when a varargs method needs to use a signature such as {@code (Foo firstFoo, Foo... moreFoos)}, in order to avoid overload ambiguity or to enforce a minimum argument count. <p>The returned list is serializable and implements {@link RandomAccess}. @param first the first element @param rest an array of additional elements, possibly empty @return an unmodifiable list containing the specified elements
857 Returns a list that applies {@code function} to each element of {@code fromList}. The returned list is a transformed view of {@code fromList}; changes to {@code fromList} will be reflected in the returned list and vice versa. <p>Since functions are not reversible, the transform is one-way and new items cannot be stored in the returned list. The {@code add}, {@code addAll} and {@code set} methods are unsupported in the returned list. <p>The function is applied lazily, invoked when needed. This is necessary for the returned list to be a view, but it means that the function will be applied many times for bulk operations like {@link List#contains} and {@link List#hashCode}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned list doesn't need to be a view, copy the returned list into a new list of your choosing. <p>If {@code fromList} implements {@link RandomAccess}, so will the returned list. The returned list is threadsafe if the supplied list and function are. <p>If only a {@code Collection} or {@code Iterable} input is available, use {@link Collections2#transform} or {@link Iterables#transform}. <p><b>Note:</b> serializing the returned list is implemented by serializing {@code fromList}, its contents, and {@code function} -- <i>not</i> by serializing the transformed values. This can lead to surprising behavior, so serializing the returned list is <b>not recommended</b>. Instead, copy the list using {@link ImmutableList#copyOf(Collection)} (for example), then serialize the copy. Other methods similar to this do not implement serialization at all for this reason. <p><b>Java 8+ users:</b> many use cases for this method are better addressed by {@link java.util.stream.Stream#map}. This method is not being deprecated, but we gently encourage you to migrate to streams.
858 Returns an unmodifiable list containing the specified first and second element, and backed by the specified array of additional elements. Changes to the {@code rest} array will be reflected in the returned list. Unlike {@link Arrays#asList}, the returned list is unmodifiable. <p>This is useful when a varargs method needs to use a signature such as {@code (Foo firstFoo, Foo secondFoo, Foo... moreFoos)}, in order to avoid overload ambiguity or to enforce a minimum argument count. <p>The returned list is serializable and implements {@link RandomAccess}. @param first the first element @param second the second element @param rest an array of additional elements, possibly empty @return an unmodifiable list containing the specified elements
859 Returns a live {@link Map} view whose keys are the contents of {@code set} and whose values are computed on demand using {@code function}. To get an immutable <i>copy</i> instead, use {@link #toMap(Iterable, Function)}. <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code entrySet} views of the returned map iterate in the same order as the backing set. <p>Modifications to the backing set are read through to the returned map. The returned map supports removal operations if the backing set does. Removal operations write through to the backing set. The returned map does not support put operations. <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the set does not contain {@code null}, because the view cannot stop {@code null} from being added to the set. <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the resulting map view. @since 14.0
860 Returns a view of the navigable set as a map, mapping keys from the set according to the specified function. <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code entrySet} views of the returned map iterate in the same order as the backing set. <p>Modifications to the backing set are read through to the returned map. The returned map supports removal operations if the backing set does. Removal operations write through to the backing set. The returned map does not support put operations. <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the set does not contain {@code null}, because the view cannot stop {@code null} from being added to the set. <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the resulting map view. @since 14.0
861 Returns a view of a map whose values are derived from the original map's entries. In contrast to {@link #transformValues}, this method's entry-transformation logic may depend on the key as well as the value. <p>All other properties of the transformed map, such as iteration order, are left intact. For example, the code: {@snippet : Map<String, Boolean> options = ImmutableMap.of("verbose", true, "sort", false); EntryTransformer<String, Boolean, String> flagPrefixer = new EntryTransformer<String, Boolean, String>() { public String transformEntry(String key, Boolean value) { return value ? key : "no" + key; } }; Map<String, String> transformed = Maps.transformEntries(options, flagPrefixer); System.out.println(transformed); } ... prints {@code {verbose=verbose, sort=nosort}}. <p>Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. <p>It's acceptable for the underlying map to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed map might contain null values if the transformer sometimes gives a null result. <p>The returned map is not thread-safe or serializable, even if the underlying map is. <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the transformer will be applied many times for bulk operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing. <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the transformed map. @since 7.0
862 Implements {@code Collection.contains} safely for forwarding collections of map entries. If {@code o} is an instance of {@code Entry}, it is wrapped using {@link #unmodifiableEntry} to protect against a possible nefarious equals method. <p>Note that {@code c} is the backing (delegate) collection, rather than the forwarding collection. @param c the delegate (unwrapped) collection of map entries @param o the object that might be contained in {@code c} @return {@code true} if {@code c} contains {@code o}
863 Implements {@code Collection.remove} safely for forwarding collections of map entries. If {@code o} is an instance of {@code Entry}, it is wrapped using {@link #unmodifiableEntry} to protect against a possible nefarious equals method. <p>Note that {@code c} is backing (delegate) collection, rather than the forwarding collection. @param c the delegate (unwrapped) collection of map entries @param o the object to remove from {@code c} @return {@code true} if {@code c} was changed
864 Returns the number of occurrences of {@code element} in this multiset. @param element the element to look for @return the nonnegative number of occurrences of the element
865 Removes exactly the specified number of occurrences of {@code element}, or makes no change if this is not possible. <p>This method, in contrast to {@link #remove(Object, int)}, has no effect when the element count is smaller than {@code occurrences}. @param element the element to remove @param occurrences the number of occurrences of {@code element} to remove @return {@code true} if the removal was possible (including if {@code occurrences} is zero) @throws IllegalArgumentException if {@code occurrences} is negative
866 Adds or removes occurrences of {@code element} such that the {@link #count} of the element becomes {@code count}. @return the count of {@code element} in the multiset before this call @throws IllegalArgumentException if {@code count} is negative
867 Sets the number of occurrences of {@code element} to {@code newCount}, but only if the count is currently {@code expectedOldCount}. If {@code element} does not appear in the multiset exactly {@code expectedOldCount} times, no changes will be made. @return {@code true} if the change was successful. This usually indicates that the multiset has been modified, but not always: in the case that {@code expectedOldCount == newCount}, the method will return {@code true} if the condition was met. @throws IllegalArgumentException if {@code expectedOldCount} or {@code newCount} is negative
868 Removes all values for the provided key.
869 Uses a naturally-ordered {@link TreeMap} to map keys to value collections. <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link Multimap#asMap()} will iterate through the keys in sorted order. <p>For all multimaps generated by the resulting builder, the {@link Multimap#keySet()} can be safely cast to a {@link java.util.SortedSet}, and the {@link Multimap#asMap()} can safely be cast to a {@link java.util.SortedMap}.
870 Returns a multimap view of the specified map. The multimap is backed by the map, so changes to the map are reflected in the multimap, and vice versa. If the map is modified while an iteration over one of the multimap's collection views is in progress (except through the iterator's own {@code remove} operation, or through the {@code setValue} operation on a map entry returned by the iterator), the results of the iteration are undefined. <p>The multimap supports mapping removal, which removes the corresponding mapping from the map. It does not support any operations which might add mappings, such as {@code put}, {@code putAll} or {@code replaceValues}. <p>The returned multimap will be serializable if the specified map is serializable. @param map the backing map for the returned multimap view
871 Returns a view of a multimap whose values are derived from the original multimap's entries. In contrast to {@link #transformValues}, this method's entry-transformation logic may depend on the key as well as the value. <p>All other properties of the transformed multimap, such as iteration order, are left intact. For example, the code: {@snippet : SetMultimap<String, Integer> multimap = ImmutableSetMultimap.of("a", 1, "a", 4, "b", -6); EntryTransformer<String, Integer, String> transformer = new EntryTransformer<String, Integer, String>() { public String transformEntry(String key, Integer value) { return (value >= 0) ? key : "no" + key; } }; Multimap<String, String> transformed = Multimaps.transformEntries(multimap, transformer); System.out.println(transformed); } ... prints {@code {a=[a, a], b=[nob]}}. <p>Changes in the underlying multimap are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying multimap. <p>It's acceptable for the underlying multimap to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed multimap might contain null values if the transformer sometimes gives a null result. <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap is. The {@code equals} and {@code hashCode} methods of the returned multimap are meaningless, since there is not a definition of {@code equals} or {@code hashCode} for general collections, and {@code get()} will return a general {@code Collection} as opposed to a {@code List} or a {@code Set}. <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned multimap to be a view, but it means that the transformer will be applied many times for bulk operations like {@link Multimap#containsValue} and {@link Object#toString}. For this to perform well, {@code transformer} should be fast. To avoid lazy evaluation when the returned multimap doesn't need to be a view, copy the returned multimap into a new multimap of your choosing. <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the transformed multimap. @since 7.0
872 Adds each element of {@code elements} to the {@code ImmutableMultiset}. @param elements the {@code Iterable} to add to the {@code ImmutableMultiset} @return this {@code Builder} object @throws NullPointerException if {@code elements} is null or contains a null element
873 A specialization of {@code addAllImpl} for when {@code elements} is itself a Multiset.
874 Modifies {@code multisetToModify} so that its count for an element {@code e} is at most {@code multisetToRetain.count(e)}. <p>To be precise, {@code multisetToModify.count(e)} is set to {@code Math.min(multisetToModify.count(e), multisetToRetain.count(e))}. This is similar to {@link #intersection(Multiset, Multiset) intersection} {@code (multisetToModify, multisetToRetain)}, but mutates {@code multisetToModify} instead of returning a view. <p>In contrast, {@code multisetToModify.retainAll(multisetToRetain)} keeps all occurrences of elements that appear at all in {@code multisetToRetain}, and deletes all occurrences of all other elements. @return {@code true} if {@code multisetToModify} was changed as a result of this operation @since 10.0
875 For each occurrence of an element {@code e} in {@code occurrencesToRemove}, removes one occurrence of {@code e} in {@code multisetToModify}. <p>Equivalently, this method modifies {@code multisetToModify} so that {@code multisetToModify.count(e)} is set to {@code Math.max(0, multisetToModify.count(e) - Iterables.frequency(occurrencesToRemove, e))}. <p>This is <i>not</i> the same as {@code multisetToModify.} {@link Multiset#removeAll removeAll}{@code (occurrencesToRemove)}, which removes all occurrences of elements that appear in {@code occurrencesToRemove}. However, this operation <i>is</i> equivalent to, albeit sometimes more efficient than, the following: {@snippet : for (E e : occurrencesToRemove) { multisetToModify.remove(e); } } @return {@code true} if {@code multisetToModify} was changed as a result of this operation @since 18.0 (present in 10.0 with a requirement that the second parameter be a {@code Multiset})
876 A sensible definition of {@link #retainAll} in terms of the {@code retainAll} method of {@link #elementSet}. If you override {@link #elementSet}, you may wish to override {@link #retainAll} to forward to this implementation. @since 7.0
877 Drains the queue as {@link BlockingQueue#drainTo(Collection, int)}, but if the requested {@code numElements} elements are not available, it will wait for them up to the specified timeout. @param q the blocking queue to be drained @param buffer where to add the transferred elements @param numElements the number of elements to be waited for @param timeout how long to wait before giving up @return the number of elements transferred @throws InterruptedException if interrupted while waiting @since 28.0 (but only since 33.4.0 in the Android flavor)
878 Drains the queue as {@linkplain #drain(BlockingQueue, Collection, int, Duration)}, but with a different behavior in case it is interrupted while waiting. In that case, the operation will continue as usual, and in the end the thread's interruption status will be set (no {@code InterruptedException} is thrown). @param q the blocking queue to be drained @param buffer where to add the transferred elements @param numElements the number of elements to be waited for @param timeout how long to wait before giving up @return the number of elements transferred @since 28.0 (but only since 33.4.0 in the Android flavor)
879 @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #contains} instead.
880 Returns {@code true} if every element in {@code values} is {@linkplain #contains contained} in this range.
881 Invokes {@code consumer} once for each pair of <i>corresponding</i> elements in {@code streamA} and {@code streamB}. If one stream is longer than the other, the extra elements are silently ignored. Elements passed to the consumer are guaranteed to come from the same position in their respective source streams. For example: {@snippet : Streams.forEachPair( Stream.of("foo1", "foo2", "foo3"), Stream.of("bar1", "bar2"), (arg1, arg2) -> System.out.println(arg1 + ":" + arg2) } <p>will print: {@snippet : foo1:bar1 foo2:bar2 } <p><b>Warning:</b> If either supplied stream is a parallel stream, the same correspondence between elements will be made, but the order in which those pairs of elements are passed to the consumer is <i>not</i> defined. <p>Note that many usages of this method can be replaced with simpler calls to {@link #zip}. This method behaves equivalently to {@linkplain #zip zipping} the stream elements into temporary pair objects and then using {@link Stream#forEach} on that stream. @since 22.0 (but only since 33.4.0 in the Android flavor)
882 Returns a {@link Collector} that accumulates elements into a {@code Table} created using the specified supplier, whose cells are generated by applying the provided mapping functions to the input elements. Cells are inserted into the generated {@code Table} in encounter order. <p>If multiple input elements map to the same row and column, the specified merging function is used to combine the values. Like {@link java.util.stream.Collectors#toMap(java.util.function.Function, java.util.function.Function, BinaryOperator, java.util.function.Supplier)}, this Collector throws a {@code NullPointerException} on null values returned from {@code valueFunction}, and treats nulls returned from {@code mergeFunction} as removals of that row/column pair. @since 21.0
883 Returns a view of a table where each value is transformed by a function. All other properties of the table, such as iteration order, are left intact. <p>Changes in the underlying table are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying table. <p>It's acceptable for the underlying table to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed table might contain null values, if the function sometimes gives a null result. <p>The returned table is not thread-safe or serializable, even if the underlying table is. <p>The function is applied lazily, invoked when needed. This is necessary for the returned table to be a view, but it means that the function will be applied many times for bulk operations like {@link Table#containsValue} and {@code Table.toString()}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned table doesn't need to be a view, copy the returned table into a new table of your choosing. @since 10.0
884 Creates a transposed view of a given table that flips its row and column keys. In other words, calling {@code get(columnKey, rowKey)} on the generated table always returns the same value as calling {@code get(rowKey, columnKey)} on the original table. Updating the original table changes the contents of the transposed table and vice versa. <p>The returned table supports update operations as long as the input table supports the analogous operation with swapped rows and columns. For example, in a {@link HashBasedTable} instance, {@code rowKeySet().iterator()} supports {@code remove()} but {@code columnKeySet().iterator()} doesn't. With a transposed {@link HashBasedTable}, it's the other way around.
885 Returns a new ArrayBasedEscaperMap for creating ArrayBasedCharEscaper or ArrayBasedUnicodeEscaper instances. @param replacements a map of characters to their escaped representations
886 Add multiple mappings at once for a particular index.
887 Scans a sub-sequence of characters from a given {@link CharSequence}, returning the index of the next character that requires escaping. <p><b>Note:</b> When implementing an escaper, it is a good idea to override this method for efficiency. The base class implementation determines successive Unicode code points and invokes {@link #escape(int)} for each of them. If the semantics of your escaper are such that code points in the supplementary range are either all escaped or all unescaped, this method can be implemented more efficiently using {@link CharSequence#charAt(int)}. <p>Note however that if your escaper does not escape characters in the supplementary range, you should either continue to validate the correctness of any surrogate characters encountered or provide a clear warning to users that your escaper does not validate its input. <p>See {@link com.google.common.net.PercentEscaper} for an example. @param csq a sequence of characters @param start the index of the first character to be scanned @param end the index immediately after the last character to be scanned @throws IllegalArgumentException if the scanned sub-sequence of {@code csq} contains invalid surrogate pairs
888 Gets the context for the given event.
889 Returns a funnel that processes an {@code Iterable} by funneling its elements in iteration order with the specified funnel. No separators are added between the elements. @since 15.0
890 Wraps a {@code PrimitiveSink} as an {@link OutputStream}, so it is easy to {@link Funnel#funnel funnel} an object to a {@code PrimitiveSink} if there is already a way to write the contents of the object to an {@code OutputStream}. <p>The {@code close} and {@code flush} methods of the returned {@code OutputStream} do nothing, and no method throws {@code IOException}. @since 13.0
891 Returns a funnel that encodes the characters of a {@code CharSequence} with the specified {@code Charset}. @since 15.0
892 Returns a Writer that sends all output to the given {@link Appendable} target. Closing the writer will close the target if it is {@link Closeable}, and flushing the writer will flush the target if it is {@link java.io.Flushable}. @param target the object to which output will be sent @return a new Writer object, unless target is a Writer, in which case the target is returned
893 Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the inverse operation to {@link #encode(byte[])}. @throws DecodingException if the input is not a valid encoded string according to this encoding.
894 Creates a new {@link Closer}.
895 Constructs a pattern file name filter object. @param patternStr the pattern string on which to filter file names @throws PatternSyntaxException if pattern compilation fails (runtime)
896 Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode. @throws IllegalArgumentException if {@code x <= 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x} is not a power of two
897 Returns the unsigned {@code byte} value represented by the given decimal string. @throws NumberFormatException if the string does not contain a valid unsigned {@code byte} value @throws NullPointerException if {@code string} is null (in contrast to {@link Byte#parseByte(String)}) @since 13.0
898 Returns the unsigned {@code int} value represented by the given decimal string. <p><b>Java 8+ users:</b> use {@link Integer#parseUnsignedInt(String)} instead. @throws NumberFormatException if the string does not contain a valid unsigned {@code int} value @throws NullPointerException if {@code s} is null (in contrast to {@link Integer#parseInt(String)})
899 Wraps {@code t} in a {@code TypeVariableKey} if it's a type variable.
900 Returns a value that satisfies the contract of the {@link #value} field based on the state of given future. <p>This is approximately the inverse of {@link #getDoneValue(Object)}
901 @param delay the time from now to delay execution @since 31.1 (but only since 33.4.0 in the Android flavor)
902 Creates an {@code AtomicLongMap}.
903 Updates the value currently associated with {@code key} by combining it with {@code x} via the specified accumulator function, returning the new value. The previous value associated with {@code key} (or zero, if there is none) is passed as the first argument to {@code accumulatorFunction}, and {@code x} is passed as the second argument. @since 21.0
904 Updates the value currently associated with {@code key} by combining it with {@code x} via the specified accumulator function, returning the old value. The previous value associated with {@code key} (or zero, if there is none) is passed as the first argument to {@code accumulatorFunction}, and {@code x} is passed as the second argument. @since 21.0
905 Associates {@code newValue} with {@code key} in this map, and returns the value previously associated with {@code key}, or zero if there was no such value.
906 Captures an object to be closed when a {@link ClosingFuture} pipeline is done. <p>For users of the {@code -jre} flavor of Guava, the object can be any {@code AutoCloseable}. For users of the {@code -android} flavor, the object must be a {@code Closeable}. (For more about the flavors, see <a href="https://github.com/google/guava#adding-guava-to-your-build">Adding Guava to your build</a>.) <p>Be careful when targeting an older SDK than you are building against (most commonly when building for Android): Ensure that any object you pass implements the interface not just in your current SDK version but also at the oldest version you support. For example, <a href="https://developer.android.com/sdk/api_diff/16/">API Level 16</a> is the first version in which {@code Cursor} is {@code Closeable}. To support older versions, pass a wrapper {@code Closeable} with a method reference like {@code cursor::close}. <p>Note that this method is still binary-compatible between flavors because the erasure of its parameter type is {@code Object}, not {@code AutoCloseable} or {@code Closeable}. @param closeable the object to be closed (see notes above) @param closingExecutor the object will be closed on this executor @return the first argument
907 Creates a new factory with the specified policy.
908 Returns an {@link Executor} that runs each task executed sequentially, such that no two tasks are running concurrently. <p>{@linkplain Executor#execute executed} tasks have a happens-before order as defined in the Java Language Specification. Tasks execute with the same happens-before order that the function calls to {@link Executor#execute execute()} that submitted those tasks had. <p>The executor uses {@code delegate} in order to {@link Executor#execute execute} each task in turn, and does not create any threads of its own. <p>After execution begins on a thread from the {@code delegate} {@link Executor}, tasks are polled and executed from a task queue until there are no more tasks. The thread will not be released until there are no more tasks to run. <p>If a task is submitted while a thread is executing tasks from the task queue, the thread will not be released until that submitted task is also complete. <p>If a task is {@linkplain Thread#interrupt interrupted} while a task is running: <ol> <li>execution will not stop until the task queue is empty. <li>tasks will begin execution with the thread marked as not interrupted - any interruption applies only to the task that was running at the point of interruption. <li>if the thread was interrupted before the SequentialExecutor's worker begins execution, the interrupt will be restored to the thread after it completes so that its {@code delegate} Executor may process the interrupt. <li>subtasks are run with the thread uninterrupted and interrupts received during execution of a task are ignored. </ol> <p>{@code RuntimeException}s thrown by tasks are simply logged and the executor keeps trucking. If an {@code Error} is thrown, the error will propagate and execution will stop until the next time a task is submitted. <p>When an {@code Error} is thrown by an executed task, previously submitted tasks may never run. An attempt will be made to restart execution on the next call to {@code execute}. If the {@code delegate} has begun to reject execution, the previously submitted tasks may never run, despite not throwing a RejectedExecutionException synchronously with the call to {@code execute}. If this behaviour is problematic, use an Executor with a single thread (e.g. {@link Executors#newSingleThreadExecutor}). @since 23.3 (since 23.1 as {@code sequentialExecutor})
909 Creates a TimeLimiter instance using the given executor service to execute method calls. <p><b>Warning:</b> using a bounded executor may be counterproductive! If the thread pool fills up, any time callers spend waiting for a thread may count toward their time limit, and in this case the call may even time out before the target method is ever invoked. @param executor the ExecutorService that will execute the method calls on the target objects; for example, a {@link Executors#newCachedThreadPool()}. @since 22.0
910 Invokes {@code unit.}{@link TimeUnit#timedJoin(Thread, long) timedJoin(toJoin, timeout)} uninterruptibly. @since 28.0 (but only since 33.4.0 in the Android flavor)
911 Returns an instance which specifies that no ordering is guaranteed.
912 Returns an instance which specifies that ordering is guaranteed to be always be the same across iterations, and across releases. Some methods may have stronger guarantees. <p>This instance is only useful in combination with {@code incidentEdgeOrder}, e.g. {@code graphBuilder.incidentEdgeOrder(ElementOrder.stable())}. <h3>In combination with {@code incidentEdgeOrder}</h3> <p>{@code incidentEdgeOrder(ElementOrder.stable())} guarantees the ordering of the returned collections of the following methods: <ul> <li>For {@link Graph} and {@link ValueGraph}: <ul> <li>{@code edges()}: Stable order <li>{@code adjacentNodes(node)}: Connecting edge insertion order <li>{@code predecessors(node)}: Connecting edge insertion order <li>{@code successors(node)}: Connecting edge insertion order <li>{@code incidentEdges(node)}: Edge insertion order </ul> <li>For {@link Network}: <ul> <li>{@code adjacentNodes(node)}: Stable order <li>{@code predecessors(node)}: Connecting edge insertion order <li>{@code successors(node)}: Connecting edge insertion order <li>{@code incidentEdges(node)}: Stable order <li>{@code inEdges(node)}: Edge insertion order <li>{@code outEdges(node)}: Edge insertion order <li>{@code adjacentEdges(edge)}: Stable order <li>{@code edgesConnecting(nodeU, nodeV)}: Edge insertion order </ul> </ul> @since 29.0
913 Returns an instance which specifies that insertion ordering is guaranteed.
914 Returns an instance which specifies that the natural ordering of the elements is guaranteed.
915 Returns an instance which specifies that the ordering of the elements is guaranteed to be determined by {@code comparator}.
916 Returns an object that can be used to wait until this objects' deferred closeables have all had {@link Runnable}s that close them submitted to each one's closing {@link Executor}.
917 Returns a copy of the input character sequence in which all {@linkplain #isUpperCase(char) uppercase ASCII characters} have been converted to lowercase. All other characters are copied without modification. @since 14.0
918 Returns a copy of the input character sequence in which all {@linkplain #isLowerCase(char) lowercase ASCII characters} have been converted to uppercase. All other characters are copied without modification. @since 14.0
919 Gets a byte array representation of this instance. <p><b>Note:</b> No guarantees are made regarding stability of the representation between versions.
920 Gets a byte array representation of this instance. <p><b>Note:</b> No guarantees are made regarding stability of the representation between versions.
921 Pseudoconstructor for serialization support.
922 Pseudoconstructor for serialization support.
923 Returns a matcher that matches any character matched by both this matcher and {@code other}.
924 Returns a matcher with identical behavior to the given {@link Character}-based predicate, but which operates on primitive {@code char} instances instead.
925 Returns a matcher that matches any character matched by either this matcher or {@code other}.
926 Returns a {@code char} matcher that matches any character in a given BMP range (both endpoints are inclusive). For example, to match any lowercase letter of the English alphabet, use {@code CharMatcher.inRange('a', 'z')}. @throws IllegalArgumentException if {@code endInclusive < startInclusive}
927 Returns a new {@code CacheStats} representing the difference between this {@code CacheStats} and {@code other}. Negative values, which aren't supported by {@code CacheStats} will be rounded up to zero.
928 Returns a new {@code CacheStats} representing the sum of this {@code CacheStats} and {@code other}. <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is guaranteed not to throw an exception). If you require specific handling, we recommend implementing your own stats collector. @since 11.0
929 Creates a new multimap that uses the provided map. @param map place to store the mapping from each key to its corresponding values
930 Creates a new multimap that uses the provided map. @param map place to store the mapping from each key to its corresponding values
931 @since 12.0
932 Creates an empty {@code EnumMultiset}.
933 {@inheritDoc} <p>This method returns a serializable {@code ImmutableSortedSet}. <p>The {@link SortedSet#subSet} documentation states that a subset of a subset throws an {@link IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code fromElement}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code fromElement}. Similarly, this method keeps the original {@code toElement}, instead of throwing an exception, if passed a {@code toElement} greater than an earlier {@code toElement}.
934 Divides an iterator into unmodifiable sublists of the given size (the final list may be smaller). For example, partitioning an iterator containing {@code [a, b, c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterator containing two inner lists of three and two elements, all in the original order. <p>The returned lists implement {@link java.util.RandomAccess}. <p><b>Note:</b> The current implementation eagerly allocates storage for {@code size} elements. As a consequence, passing values like {@code Integer.MAX_VALUE} can lead to {@link OutOfMemoryError}. @param iterator the iterator to return a partitioned view of @param size the desired size of each partition (the last may be smaller) @return an iterator of immutable lists containing the elements of {@code iterator} divided into partitions @throws IllegalArgumentException if {@code size} is nonpositive
935 Divides an iterator into unmodifiable sublists of the given size, padding the final iterator with null values if necessary. For example, partitioning an iterator containing {@code [a, b, c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e, null]]} -- an outer iterator containing two inner lists of three elements each, all in the original order. <p>The returned lists implement {@link java.util.RandomAccess}. @param iterator the iterator to return a partitioned view of @param size the desired size of each partition @return an iterator of immutable lists containing the elements of {@code iterator} divided into partitions (the final iterable may have trailing null elements) @throws IllegalArgumentException if {@code size} is nonpositive
936 Creates and returns a new builder, configured to build {@code MinMaxPriorityQueue} instances sized appropriately to hold {@code expectedSize} elements.
937 Creates and returns a new builder, configured to build {@code MinMaxPriorityQueue} instances that are limited to {@code maximumSize} elements. Each time a queue grows beyond this bound, it immediately removes its greatest element (according to its comparator), which might be the element that was just added.
938 Constructor for use by subclasses. This hasher instance will process chunks of the specified size. @param chunkSize the number of bytes available per {@link #process(ByteBuffer)} invocation; must be at least 4
939 Returns the <a href="http://en.wikipedia.org/wiki/Variance#Population_variance">population variance</a> of the values. The count must be non-zero. <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty
940 Returns the <a href="http://en.wikipedia.org/wiki/Variance#Sample_variance">unbiased sample variance</a> of the values. If this dataset is a sample drawn from a population, this is an unbiased estimator of the population variance of the population. The count must be greater than one. <p>This is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty or contains a single value
941 Returns the <a href="http://en.wikipedia.org/wiki/Variance#Population_variance">population variance</a> of the values. The count must be non-zero. <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty
942 Returns the <a href="http://en.wikipedia.org/wiki/Variance#Sample_variance">unbiased sample variance</a> of the values. If this dataset is a sample drawn from a population, this is an unbiased estimator of the population variance of the population. The count must be greater than one. <p>This is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty or contains a single value
943 Returns a {@code char} matcher that matches any BMP character present in the given character sequence. Returns a bogus matcher if the sequence contains supplementary characters.
944 Collapses groups of matching characters exactly as {@link #collapseFrom} does, except that groups of matching BMP characters at the start or end of the sequence are removed without replacement.
945 Returns a new equivalence relation for {@code F} which evaluates equivalence by first applying {@code function} to the argument, then evaluating using {@code this}. That is, for any pair of non-null objects {@code x} and {@code y}, {@code equivalence.onResultOf(function).equivalent(a, b)} is true if and only if {@code equivalence.equivalent(function.apply(a), function.apply(b))} is true. <p>For example: {@snippet : Equivalence<Person> SAME_AGE = Equivalence.equals().onResultOf(GET_PERSON_AGE); } <p>{@code function} will never be invoked with a null value. <p>Note that {@code function} must be consistent according to {@code this} equivalence relation. That is, invoking {@link Function#apply} multiple times for a given value must return equivalent results. For example, {@code Equivalence.identity().onResultOf(Functions.toStringFunction())} is broken because it's not guaranteed that {@link Object#toString}) always returns the same string instance. @since 10.0
946 Returns an equivalence over iterables based on the equivalence of their elements. More specifically, two iterables are considered equivalent if they both contain the same number of elements, and each pair of corresponding elements is equivalent according to {@code this}. Null iterables are equivalent to one another. <p>Note that this method performs a similar function for equivalences as {@link com.google.common.collect.Ordering#lexicographical} does for orderings. <p>The returned object is serializable if this object is serializable. @since 10.0
947 Determines whether two iterables contain equal elements in the same order. More specifically, this method returns {@code true} if {@code iterable1} and {@code iterable2} contain the same number of elements and every element of {@code iterable1} is equal to the corresponding element of {@code iterable2}.
948 An implementation of {@link List#equals(Object)}.
949 Creates a new, empty {@code ConcurrentHashMultiset} using the default initial capacity, load factor, and concurrency settings.
950 Creates a new, empty {@code ConcurrentHashMultiset} using {@code countMap} as the internal backing map. <p>This instance will assume ownership of {@code countMap}, and other code should not maintain references to the map or modify it in any way. <p>The returned multiset is serializable if the input map is. @param countMap backing map for storing the elements in the multiset and their counts. It must be empty. @throws IllegalArgumentException if {@code countMap} is not empty @since 20.0
951 Appends the string representation of each of {@code parts}, using the previously configured separator between each, to {@code appendable}.
952 Appends the string representation of each of {@code parts}, using the previously configured separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}. @since 11.0
953 Appends the string representation of each entry of {@code map}, using the previously configured separator and key-value separator, to {@code builder}. Identical to {@link #appendTo(Appendable, Map)}, except that it does not throw {@link IOException}.
954 Returns a string containing the string representation of each entry in {@code entries}, using the previously configured separator and key-value separator. @since 10.0
955 Adds an unnamed value to the formatted output. <p>It is strongly encouraged to use {@link #add(String, Object)} instead and give value a readable name.
956 Adds a name/value pair to the formatted output in {@code name=value} format. If {@code value} is {@code null}, the string {@code "null"} is used, unless {@link #omitNullValues()} is called, in which case this name/value pair will not be added.
957 Adds an unnamed value to the formatted output. <p>It is strongly encouraged to use {@link #add(String, boolean)} instead and give value a readable name. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).
958 Adds an unnamed value to the formatted output. <p>It is strongly encouraged to use {@link #add(String, char)} instead and give value a readable name. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).
959 Adds an unnamed value to the formatted output. <p>It is strongly encouraged to use {@link #add(String, double)} instead and give value a readable name. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).
960 Adds an unnamed value to the formatted output. <p>It is strongly encouraged to use {@link #add(String, float)} instead and give value a readable name. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).
961 Adds an unnamed value to the formatted output. <p>It is strongly encouraged to use {@link #add(String, int)} instead and give value a readable name. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).
962 Adds an unnamed value to the formatted output. <p>It is strongly encouraged to use {@link #add(String, long)} instead and give value a readable name. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).
963 Adds a name/value pair to the formatted output in {@code name=value} format. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).
964 Adds a name/value pair to the formatted output in {@code name=value} format. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).
965 Adds a name/value pair to the formatted output in {@code name=value} format. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).
966 Adds a name/value pair to the formatted output in {@code name=value} format. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).
967 Adds a name/value pair to the formatted output in {@code name=value} format. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).
968 Adds a name/value pair to the formatted output in {@code name=value} format. @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).
969 If {@code nullableReference} is non-null, returns an {@code Optional} instance containing that reference; otherwise returns {@link Optional#absent}. <p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's {@code Optional.ofNullable}.
970 Constructor for use by subclasses.
971 Returns the size of this source in bytes, if the size can be easily determined without actually opening the data stream. <p>The default implementation returns {@link Optional#absent}. Some sources, such as a file, may return a non-absent value. Note that in such cases, it is <i>possible</i> that this method will return a different number of bytes than would be returned by reading all of the bytes (for example, some special files may return a size of 0 despite actually having content when read). <p>Additionally, for mutable sources such as files, a subsequent read may return a different number of bytes if the contents are changed. @since 19.0
972 Returns the size of this source in chars, if the size can be easily determined without actually opening the data stream. <p>The default implementation returns {@link Optional#absent}. Some sources, such as a {@code CharSequence}, may return a non-absent value. Note that in such cases, it is <i>possible</i> that this method will return a different number of chars than would be returned by reading all of the chars. <p>Additionally, for mutable sources such as {@code StringBuilder}s, a subsequent read may return a different number of chars if the contents are changed. @since 19.0
973 Returns the given string if it is nonempty; {@code null} otherwise. @param string the string to test and possibly return @return {@code string} itself if it is nonempty; {@code null} if it is empty or null
974 Split a freeform string into a host and port, without strict validation. <p>Note that the host-only formats will leave the port field undefined. You can use {@link #withDefaultPort(int)} to patch in a default value. @param hostPortString the input string to parse. @return if parsing was successful, a populated HostAndPort object. @throws IllegalArgumentException if nothing meaningful could be parsed.
975 Returns a view of this fluent iterable that skips its first {@code numberToSkip} elements. If this fluent iterable contains fewer than {@code numberToSkip} elements, the returned fluent iterable skips all of its elements. <p>Modifications to this fluent iterable before a call to {@code iterator()} are reflected in the returned fluent iterable. That is, the iterator skips the first {@code numberToSkip} elements that exist when the iterator is created, not when {@code skip()} is called. <p>The returned fluent iterable's iterator supports {@code remove()} if the {@code Iterator} of this fluent iterable supports it. Note that it is <i>not</i> possible to delete the last skipped element by immediately calling {@code remove()} on the returned fluent iterable's iterator, as the {@code Iterator} contract states that a call to {@code * remove()} before a call to {@code next()} will throw an {@link IllegalStateException}. <p><b>{@code Stream} equivalent:</b> {@link Stream#skip} (same).
976 Creates a fluent iterable with the first {@code size} elements of this fluent iterable. If this fluent iterable does not contain that many elements, the returned fluent iterable will have the same behavior as this fluent iterable. The returned fluent iterable's iterator supports {@code remove()} if this fluent iterable's iterator does. <p><b>{@code Stream} equivalent:</b> {@link Stream#limit} (same). @param maxSize the maximum number of elements in the returned fluent iterable @throws IllegalArgumentException if {@code size} is negative
977 Returns the element at the specified position in an iterable or a default value otherwise. <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().orElse(defaultValue)} (returns the default value if the index is out of bounds) @param position position of the element to return @param defaultValue the default value to return if {@code position} is greater than or equal to the size of the iterable @return the element at the specified position in {@code iterable} or {@code defaultValue} if {@code iterable} contains fewer than {@code position + 1} elements. @throws IndexOutOfBoundsException if {@code position} is negative @since 4.0
978 Advances {@code iterator} {@code position + 1} times, returning the element at the {@code position}th position. @param position position of the element to return @return the element at the specified position in {@code iterator} @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to the number of elements remaining in {@code iterator}
979 Advances {@code iterator} {@code position + 1} times, returning the element at the {@code position}th position or {@code defaultValue} otherwise. @param position position of the element to return @param defaultValue the default value to return if the iterator is empty or if {@code position} is greater than the number of elements remaining in {@code iterator} @return the element at the specified position in {@code iterator} or {@code defaultValue} if {@code iterator} produces fewer than {@code position + 1} elements. @throws IndexOutOfBoundsException if {@code position} is negative @since 4.0
980 Returns a {@link Traverser} instance for the file and directory tree. The returned traverser starts from a {@link File} and will return all files and directories it encounters. <p><b>Warning:</b> {@code File} provides no support for symbolic links, and as such there is no way to ensure that a symbolic link to a directory is not followed when traversing the tree. In this case, iterables created by this traverser could contain files that are outside of the given directory or even be infinite if there is a symbolic link loop. <p>If available, consider using {@link MoreFiles#fileTraverser()} instead. It behaves the same except that it doesn't follow symbolic links and returns {@code Path} instances. <p>If the {@link File} passed to one of the {@link Traverser} methods does not exist or is not a directory, no exception will be thrown and the returned {@link Iterable} will contain a single element: that file. <p>Example: {@code Files.fileTraverser().depthFirstPreOrder(new File("/"))} may return files with the following paths: {@code ["/", "/etc", "/etc/config.txt", "/etc/fonts", "/home", "/home/alice", ...]} @since 23.5
981 Wraps a {@link InputStream}, limiting the number of bytes which can be read. @param in the input stream to be wrapped @param limit the maximum number of bytes to be read @return a length-limited {@link InputStream} @since 14.0 (since 1.0 as com.google.common.io.LimitInputStream)
982 Returns the {@code Inet4Address} corresponding to a given {@code BigInteger}. @param address BigInteger representing the IPv4 address @return Inet4Address representation of the given BigInteger @throws IllegalArgumentException if the BigInteger is not between 0 and 2^32-1 @since 28.2
983 Returns the {@code Inet6Address} corresponding to a given {@code BigInteger}. @param address BigInteger representing the IPv6 address @return Inet6Address representation of the given BigInteger @throws IllegalArgumentException if the BigInteger is not between 0 and 2^128-1 @since 28.2
984 Returns a hash function implementing the <a href="https://131002.net/siphash/">64-bit SipHash-2-4 algorithm</a> using the given seed. @since 15.0
985 Creates a new instance that uses the given file threshold, and does not reset the data when the {@link ByteSource} returned by {@link #asByteSource} is finalized. @param fileThreshold the number of bytes before the stream should switch to buffering to a file @throws IllegalArgumentException if {@code fileThreshold} is negative
986 Returns an Inet4Address having the integer value specified by the argument. @param address {@code int}, the 32bit integer address to be converted @return {@link Inet4Address} equivalent of the argument
987 Reserves the given number of permits from this {@code RateLimiter} for future use, returning the number of microseconds until the reservation can be consumed. @return time in microseconds to wait until the resource can be acquired, never negative
988 Acquires the given number of permits from this {@code RateLimiter} if it can be obtained without exceeding the specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permits would not have been granted before the timeout expired. @param permits the number of permits to acquire @param timeout the maximum time to wait for the permits. Negative values are treated as zero. @param unit the time unit of the timeout argument @return {@code true} if the permits were acquired, {@code false} otherwise @throws IllegalArgumentException if the requested number of permits is negative or zero
989 Writes this {@code BloomFilter} to an output stream, with a custom format (not Java serialization). This has been measured to save at least 400 bytes compared to regular serialization. <p>Use {@linkplain #readFrom(InputStream, Funnel)} to reconstruct the written BloomFilter.
990 Returns a {@link Scheduler} that schedules the task using the {@link ScheduledExecutorService#scheduleWithFixedDelay} method. @param initialDelay the time to delay first execution @param delay the delay between the termination of one execution and the commencement of the next @since 28.0 (but only since 33.4.0 in the Android flavor)
991 Returns a {@link Scheduler} that schedules the task using the {@link ScheduledExecutorService#scheduleAtFixedRate} method. @param initialDelay the time to delay first execution @param period the period between successive executions of the task @since 28.0 (but only since 33.4.0 in the Android flavor)
992 Returns unit.toNanos(time), additionally ensuring the returned value is not at risk of overflowing or underflowing, by bounding the value between 0 and (Long.MAX_VALUE / 4) * 3. Actually waiting for more than 219 years is not supported!
993 Creates (and starts) a new stopwatch, using the specified time source. @since 15.0
994 Configures this {@code Builder} to order entries by value according to the specified comparator. <p>The sort order is stable, that is, if two entries have values that compare as equivalent, the entry that was inserted first will be first in the built map's iteration order. @throws IllegalStateException if this method was already called @since 19.0
995 Sets the concurrency level that will be used by the to-be-built {@link Interner}. @see MapMaker#concurrencyLevel(int)
996 Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed after the entry's creation, or the most recent replacement of its value. <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long) maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be useful in testing, or to disable caching temporarily without a code change. <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or write operations. Expired entries are cleaned up as part of the routine maintenance described in the class javadoc. @param duration the length of time after an entry is created that it should be automatically removed @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code duration} is negative @throws IllegalStateException if {@link #expireAfterWrite} was already set @throws ArithmeticException for durations greater than +/- approximately 292 years @since 25.0 (but only since 33.3.0 in the Android <a href="https://github.com/google/guava#guava-google-core-libraries-for-java">flavor</a>)
997 Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed after the entry's creation, the most recent replacement of its value, or its last access. Access time is reset by all cache read and write operations (including {@code Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by {@code containsKey(Object)}, nor by operations on the collection-views of {@link Cache#asMap}}. So, for example, iterating through {@code Cache.asMap().entrySet()} does not reset access time for the entries you retrieve. <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long) maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be useful in testing, or to disable caching temporarily without a code change. <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or write operations. Expired entries are cleaned up as part of the routine maintenance described in the class javadoc. @param duration the length of time after an entry is last accessed that it should be automatically removed @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code duration} is negative @throws IllegalStateException if {@link #expireAfterAccess} was already set @throws ArithmeticException for durations greater than +/- approximately 292 years @since 25.0 (but only since 33.3.0 in the Android <a href="https://github.com/google/guava#guava-google-core-libraries-for-java">flavor</a>)
998 Specifies that active entries are eligible for automatic refresh once a fixed duration has elapsed after the entry's creation, or the most recent replacement of its value. The semantics of refreshes are specified in {@link LoadingCache#refresh}, and are performed by calling {@link CacheLoader#reload}. <p>As the default implementation of {@link CacheLoader#reload} is synchronous, it is recommended that users of this method override {@link CacheLoader#reload} with an asynchronous implementation; otherwise refreshes will be performed during unrelated cache read and write operations. <p>Currently automatic refreshes are performed when the first stale request for an entry occurs. The request triggering refresh will make a synchronous call to {@link CacheLoader#reload} to obtain a future of the new value. If the returned future is already complete, it is returned immediately. Otherwise, the old value is returned. <p><b>Note:</b> <i>all exceptions thrown during refresh will be logged and then swallowed</i>. @param duration the length of time after an entry is created that it should be considered stale, and thus eligible for refresh @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code duration} is negative @throws IllegalStateException if {@link #refreshAfterWrite} was already set @throws ArithmeticException for durations greater than +/- approximately 292 years @since 25.0 (but only since 33.3.0 in the Android <a href="https://github.com/google/guava#guava-google-core-libraries-for-java">flavor</a>)
999 Specifies that each key (not value) stored in the cache should be wrapped in a {@link WeakReference} (by default, strong references are used). <p><b>Warning:</b> when this method is used, the resulting cache will use identity ({@code ==}) comparison to determine equality of keys. Its {@link Cache#asMap} view will therefore technically violate the {@link Map} specification (in the same way that {@link IdentityHashMap} does). <p>Entries with keys that have been garbage collected may be counted in {@link Cache#size}, but will never be visible to read or write operations; such entries are cleaned up as part of the routine maintenance described in the class javadoc. @return this {@code CacheBuilder} instance (for chaining) @throws IllegalStateException if the key strength was already set
1000 Specifies that each value (not key) stored in the cache should be wrapped in a {@link WeakReference} (by default, strong references are used). <p>Weak values will be garbage collected once they are weakly reachable. This makes them a poor candidate for caching; consider {@link #softValues} instead. <p><b>Note:</b> when this method is used, the resulting cache will use identity ({@code ==}) comparison to determine equality of values. <p>Entries with values that have been garbage collected may be counted in {@link Cache#size}, but will never be visible to read or write operations; such entries are cleaned up as part of the routine maintenance described in the class javadoc. @return this {@code CacheBuilder} instance (for chaining) @throws IllegalStateException if the value strength was already set
1001 Specifies that each value (not key) stored in the cache should be wrapped in a {@link SoftReference} (by default, strong references are used). Softly-referenced objects will be garbage-collected in a <i>globally</i> least-recently-used manner, in response to memory demand. <p><b>Warning:</b> in most circumstances it is better to set a per-cache {@linkplain #maximumSize(long) maximum size} instead of using soft references. You should only use this method if you are well familiar with the practical consequences of soft references. <p><b>Note:</b> when this method is used, the resulting cache will use identity ({@code ==}) comparison to determine equality of values. <p>Entries with values that have been garbage collected may be counted in {@link Cache#size}, but will never be visible to read or write operations; such entries are cleaned up as part of the routine maintenance described in the class javadoc. @return this {@code CacheBuilder} instance (for chaining) @throws IllegalStateException if the value strength was already set
1002 Specifies that each key (not value) stored in the map should be wrapped in a {@link WeakReference} (by default, strong references are used). <p><b>Warning:</b> when this method is used, the resulting map will use identity ({@code ==}) comparison to determine equality of keys, which is a technical violation of the {@link Map} specification, and may not be what you expect. @throws IllegalStateException if the key strength was already set @see WeakReference
1003 Specifies that each value (not key) stored in the map should be wrapped in a {@link WeakReference} (by default, strong references are used). <p>Weak values will be garbage collected once they are weakly reachable. This makes them a poor candidate for caching. <p><b>Warning:</b> when this method is used, the resulting map will use identity ({@code ==}) comparison to determine equality of values. This technically violates the specifications of the methods {@link Map#containsValue containsValue}, {@link ConcurrentMap#remove(Object, Object) remove(Object, Object)} and {@link ConcurrentMap#replace(Object, Object, Object) replace(K, V, V)}, and may not be what you expect. @throws IllegalStateException if the value strength was already set @see WeakReference
1004 @since 14.0
1005 Ensures that {@code index} specifies a valid <i>element</i> in an array, list or string of size {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive. @param index a user-supplied index identifying an element of an array, list or string @param size the size of that array, list or string @return the value of {@code index} @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size} @throws IllegalArgumentException if {@code size} is negative
1006 Ensures that {@code index} specifies a valid <i>position</i> in an array, list or string of size {@code size}. A position index may range from zero to {@code size}, inclusive. <p><b>Java 9 users:</b> consider using {@link java.util.Objects#checkIndex(index, size)} instead. However, note that {@code checkIndex()} throws {@code IndexOutOfBoundsException} when {@code size} is negative, while this method throws {@code IllegalArgumentException}. @param index a user-supplied index identifying a position in an array, list or string @param size the size of that array, list or string @return the value of {@code index} @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size} @throws IllegalArgumentException if {@code size} is negative
1007 Ensures that {@code start} and {@code end} specify valid <i>positions</i> in an array, list or string of size {@code size}, and are in order. A position index may range from zero to {@code size}, inclusive. @param start a user-supplied index identifying a starting position in an array, list or string @param end a user-supplied index identifying an ending position in an array, list or string @param size the size of that array, list or string @throws IndexOutOfBoundsException if either index is negative or is greater than {@code size}, or if {@code end} is less than {@code start} @throws IllegalArgumentException if {@code size} is negative
1008 Returns a predicate that evaluates to {@code true} if the object being tested {@code equals()} the given target or both are null. <p><b>Discouraged:</b> Prefer using {@code x -> Objects.equals(x, target)}, but note that lambdas do not have human-readable {@link #toString()} representations and are not serializable.
1009 Support removal operations when filtering a filtered multimap. Since a filtered multimap has iterators that don't support remove, passing one to the FilteredEntryMultimap constructor would lead to a multimap whose removal operations would fail. This method combines the predicates to avoid that problem.
1010 Returns a view of the elements of {@code unfiltered} that satisfy a predicate. The returned multiset is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multiset's iterators, and those of its {@code entrySet()} and {@code elementSet()}, do not support {@code remove()}. However, all other multiset methods supported by {@code unfiltered} are supported by the returned multiset. When given an element that doesn't satisfy the predicate, the multiset's {@code add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multiset, only elements that satisfy the filter will be removed from the underlying multiset. <p>The returned multiset isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multiset's methods, such as {@code size()}, iterate across every element in the underlying multiset and determine which elements satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the returned multiset and use the copy. <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link Iterables#filter(Iterable, Class)} for related functionality.) @since 14.0
1011 Returns a splitter that considers any single character matched by the given {@code CharMatcher} to be a separator. For example, {@code Splitter.on(CharMatcher.anyOf(";,")).split("foo,;bar,quux")} returns an iterable containing {@code ["foo", "", "bar", "quux"]}. @param separatorMatcher a {@link CharMatcher} that determines whether a character is a separator @return a splitter, with default settings, that uses this matcher
1012 Returns a splitter that divides strings into pieces of the given length. For example, {@code Splitter.fixedLength(2).split("abcde")} returns an iterable containing {@code ["ab", "cd", "e"]}. The last piece can be smaller than {@code length} but will never be empty. <p><b>Note:</b> if {@link #fixedLength} is used in conjunction with {@link #limit}, the final split piece <i>may be longer than the specified fixed length</i>. This is because the splitter will <i>stop splitting when the limit is reached</i>, and just return the final piece as-is. <p><b>Exception:</b> for consistency with separator-based splitters, {@code split("")} does not yield an empty iterable, but an iterable containing {@code ""}. This is the only case in which {@code Iterables.size(split(input))} does not equal {@code IntMath.divide(input.length(), length, CEILING)}. To avoid this behavior, use {@code omitEmptyStrings}. @param length the desired length of pieces after splitting, a positive integer @return a splitter, with default settings, that can split into fixed sized pieces @throws IllegalArgumentException if {@code length} is zero or negative
1013 Returns a splitter that behaves equivalently to {@code this} splitter, but automatically removes leading and trailing {@linkplain CharMatcher#whitespace whitespace} from each returned substring; equivalent to {@code trimResults(CharMatcher.whitespace())}. For example, {@code Splitter.on(',').trimResults().split(" a, b ,c ")} returns an iterable containing {@code ["a", "b", "c"]}. @return a splitter with the desired configuration
1014 Creates (but does not start) a new stopwatch using {@link System#nanoTime} as its time source. @since 15.0
1015 Creates (and starts) a new stopwatch using {@link System#nanoTime} as its time source. @since 15.0
1016 Returns the number of bytes in the UTF-8-encoded form of {@code sequence}. For a string, this method is equivalent to {@code string.getBytes(UTF_8).length}, but is more efficient in both time and space. @throws IllegalArgumentException if {@code sequence} contains ill-formed UTF-16 (unpaired surrogates)
1017 Invokes {@code executor.}{@link ExecutorService#awaitTermination(long, TimeUnit) awaitTermination(long, TimeUnit)} uninterruptibly with no timeout. @since 30.0
1018 Loops continuously, pulling references off the queue and cleaning them up.
1019 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableMultimap#builder}.
1020 Returns a cache loader that uses {@code function} to load keys, without supporting either reloading or bulk loading. This allows creating a cache loader using a lambda expression. <p>The returned object is serializable if {@code function} is serializable. @param function the function to be used for loading values; must never return {@code null} @return a cache loader that loads values by passing each key to {@code function}
1021 Returns a cache loader based on an <i>existing</i> supplier instance. Note that there's no need to create a <i>new</i> supplier just to pass it in here; just subclass {@code CacheLoader} and implement {@link #load load} instead. <p>The returned object is serializable if {@code supplier} is serializable. @param supplier the supplier to be used for loading values; must never return {@code null} @return a cache loader that loads values by calling {@link Supplier#get}, irrespective of the key
1022 Computes or retrieves the values corresponding to {@code keys}. This method is called by {@link LoadingCache#getAll}. <p>If the returned map doesn't contain all requested {@code keys} then the entries it does contain will be cached, but {@code getAll} will throw an exception. If the returned map contains extra keys not present in {@code keys} then all returned entries will be cached, but only the entries for {@code keys} will be returned from {@code getAll}. <p>This method should be overridden when bulk retrieval is significantly more efficient than many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls to {@link LoadingCache#get} if this method is not overridden. @param keys the unique, non-null keys whose values should be loaded @return a map from each key in {@code keys} to the value associated with that key; <b>may not contain null values</b> @throws Exception if unable to load the result @throws InterruptedException if this method is interrupted. {@code InterruptedException} is treated like any other {@code Exception} in all respects except that, when it is caught, the thread's interrupt status is set @since 11.0
1023 Returns the ratio of cache requests which were hits. This is defined as {@code hitCount / requestCount}, or {@code 1.0} when {@code requestCount == 0}. Note that {@code hitRate + missRate =~ 1.0}.
1024 Returns the ratio of cache requests which were misses. This is defined as {@code missCount / requestCount}, or {@code 0.0} when {@code requestCount == 0}. Note that {@code hitRate + missRate =~ 1.0}. Cache misses include all requests which weren't cache hits, including requests which resulted in either successful or failed loading attempts, and requests which waited for other threads to finish loading. It is thus the case that {@code missCount >= loadSuccessCount + loadExceptionCount}. Multiple concurrent misses for the same key will result in a single load operation.
1025 Constructor for use by subclasses.
1026 Constructor for use by subclasses.
1027 Constructor for use by subclasses.
1028 Constructor for use by subclasses.
1029 Constructor for use by subclasses.
1030 Constructor for use by subclasses.
1031 Private constructor for inverse bimap.
1032 Constructor for use by subclasses.
1033 Constructor for use by subclasses.
1034 Creates a new map.
1035 Constructor for use by subclasses.
1036 Constructor for use by subclasses.
1037 Constructor for use by subclasses.
1038 Constructor for use by subclasses.
1039 Creates a new entry. @param segment to create the entry for @param key of the entry @param hash of the key @param next entry in the same bucket
1040 Creates a new entry. @param segment to create the entry for @param key of the entry @param hash of the key @param next entry in the same bucket
1041 Returns the final value of the associated {@link ClosingFuture}, or throws an exception as {@link Future#get()} would. <p>Because the asynchronous operation has already completed, this method is synchronous and returns immediately. @throws CancellationException if the computation was cancelled @throws ExecutionException if the computation threw an exception
1042 Performs routine cleanup following a write.
1043 Creates a reference for the given value according to this value strength.
1044 Creates a reference for the given value according to this value strength.
1045 Creates a reference for the given value according to this value strength.
1046 Records the relative order in which this read was performed by adding {@code entry} to the recency queue. At write-time, or when the queue is full past the threshold, the queue will be drained and the entries therein processed. <p>Note: locked reads should use {@link #recordLockedRead}.
1047 Updates the eviction metadata that {@code entry} was just read. This currently amounts to adding {@code entry} to relevant eviction lists. <p>Note: this method should only be called under lock, as it directly manipulates the eviction queues. Unlocked reads should use {@link #recordRead}.
1048 Updates eviction metadata that {@code entry} was just written. This currently amounts to adding {@code entry} to relevant eviction lists.
1049 Gets the value from an entry. Returns null if the entry is invalid, partially-collected, loading, or expired. Unlike {@link Segment#getLiveValue} this method does not attempt to clean up stale entries. As such it should only be called outside a segment context, such as during iteration.
1050 Returns the number of elements in {@code iterable}.
1051 A sensible, albeit inefficient, definition of {@link #size} in terms of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #size} to forward to this implementation. @since 7.0
1052 Returns a byte array containing the bytes from the buffers already in {@code bufs} (which have a total combined length of {@code totalLen} bytes) followed by all bytes remaining in the given input stream.
1053 Specifies the delegate maps going in each direction. Called by the constructor and by subclasses during deserialization.
1054 Returns the whole range relative to the specified comparator.
1055 Returns everything above the endpoint relative to the specified comparator, with the specified endpoint behavior.
1056 Returns everything below the endpoint relative to the specified comparator, with the specified endpoint behavior.
1057 Returns everything between the endpoints relative to the specified comparator, with the specified endpoint behavior.
1058 Returns the intersection of the two ranges, or an empty range if their intersection is empty.
1059 Returns the next element in the iteration without advancing the iteration, according to the contract of {@link PeekingIterator#peek()}. <p>Implementations of {@code AbstractIterator} that wish to expose this functionality should implement {@code PeekingIterator}.
1060 {@inheritDoc} <p>The returned collection is immutable.
1061 If the delegate changed since the iterator was created, the iterator is no longer valid.
1062 Stores a key-value pair in the multimap. @param key key to store in the multimap @param value value to store in the multimap @return {@code true} always
1063 Stores a key-value pair in the multimap. @param key key to store in the multimap @param value value to store in the multimap @return {@code true} if the method increased the size of the multimap, or {@code false} if the multimap already contained the key-value pair
1064 {@inheritDoc} <p>Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a {@link List}, instead of the {@link Collection} specified in the {@link Multimap} interface.
1065 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.
1066 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.
1067 @serialData the number of distinct keys, and then for each distinct key: the first key, the number of values for that key, and the key's values, followed by successive keys and values from the entries() ordering
1068 An implementation of {@link Collection#toString()}.
1069 An implementation of {@link Map#toString}.
1070 Creates an {@code ArrayList} instance to hold {@code estimatedSize} elements, <i>plus</i> an unspecified amount of padding; you almost certainly mean to call {@link #newArrayListWithCapacity} (see that method for further advice on usage). <p><b>Note:</b> This method will soon be deprecated. Even in the rare case that you do want some amount of padding, it's best if you choose your desired amount explicitly. @param estimatedSize an estimate of the eventual {@link List#size()} of the new list @return a new, empty {@code ArrayList}, sized appropriately to hold the estimated number of elements @throws IllegalArgumentException if {@code estimatedSize} is negative
1071 Creates a {@code HashMap} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without growth. This behavior cannot be broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the method isn't inadvertently <i>oversizing</i> the returned map. @param expectedSize the number of entries you expect to add to the returned map @return a new, empty {@code HashMap} with enough capacity to hold {@code expectedSize} entries without resizing @throws IllegalArgumentException if {@code expectedSize} is negative
1072 Creates a {@code LinkedHashMap} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without growth. This behavior cannot be broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the method isn't inadvertently <i>oversizing</i> the returned map. @param expectedSize the number of entries you expect to add to the returned map @return a new, empty {@code LinkedHashMap} with enough capacity to hold {@code expectedSize} entries without resizing @throws IllegalArgumentException if {@code expectedSize} is negative @since 19.0
1073 Returns a new hash set using the smallest initial table size that can hold {@code expectedSize} elements without resizing. Note that this is not what {@link HashSet#HashSet(int)} does, but it is what most users want and expect it to do. <p>This behavior can't be broadly guaranteed, but has been tested with OpenJDK 1.7 and 1.8. @param expectedSize the number of elements you expect to add to the returned set @return a new, empty hash set with enough capacity to hold {@code expectedSize} elements without resizing @throws IllegalArgumentException if {@code expectedSize} is negative
1074 Creates a {@code LinkedHashSet} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without growth. This behavior cannot be broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the method isn't inadvertently <i>oversizing</i> the returned set. @param expectedSize the number of elements you expect to add to the returned set @return a new, empty {@code LinkedHashSet} with enough capacity to hold {@code expectedSize} elements without resizing @throws IllegalArgumentException if {@code expectedSize} is negative @since 11.0
1075 Uses an {@link ArrayList} to store value collections.
1076 Uses a hash-based {@code Set} to store value collections.
1077 Uses an insertion-ordered hash-based {@code Set} to store value collections.
1078 Uses a hash table to map keys to value collections.
1079 Uses a hash table to map keys to value collections. <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link Multimap#asMap()} will iterate through the keys in the order that they were first added to the multimap, save that if all values associated with a key are removed and then the key is added back into the multimap, that key will come last in the key iteration order.
1080 Returns an immutable multiset entry with the specified element and count. The entry will be serializable if {@code e} is. @param e the element to be associated with the returned entry @param n the count to be associated with the returned entry @throws IllegalArgumentException if {@code n} is negative
1081 A sensible definition of {@link #setCount(Object, int)} in terms of {@link #count(Object)}, {@link #add(Object, int)}, and {@link #remove(Object, int)}. {@link #entrySet()}. If you override any of these methods, you may wish to override {@link #setCount(Object, int)} to forward to this implementation. @since 7.0
1082 A sensible definition of {@link #setCount(Object, int, int)} in terms of {@link #count(Object)} and {@link #setCount(Object, int)}. If you override either of these methods, you may wish to override {@link #setCount(Object, int, int)} to forward to this implementation. @since 7.0
1083 Returns the hash code for this multimap. <p>The hash code of a multimap is defined as the hash code of the map view, as returned by {@link Multimap#asMap}. @see Map#hashCode
1084 Returns a string representation of the multimap, generated by calling {@code toString} on the map returned by {@link Multimap#asMap}. @return a string representation of the multimap
1085 {@inheritDoc} <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the current count of that element in the multiset, as opposed to the count at the time the entry was retrieved.
1086 {@inheritDoc} <p>This implementation returns the hash code of {@link Multiset#entrySet()}.
1087 {@inheritDoc} <p>This implementation returns the result of invoking {@code toString} on {@link Multiset#entrySet()}.
1088 A sensible definition of {@link #firstEntry} in terms of the {@code iterator()} of {@link #entrySet}. If you override {@code entrySet}, you may wish to override {@code firstEntry} to forward to this implementation.
1089 @since 12.0
1090 @since 12.0
1091 Creates an empty {@code TreeRangeSet} instance.
1092 Returns {@code true} if {@code value} is within the bounds of this range. For example, on the range {@code [0..2)}, {@code contains(1)} returns {@code true}, while {@code contains(2)} returns {@code false}.
1093 Returns {@code true} if {@code elements} is a sorted collection using an ordering equivalent to {@code comparator}.
1094 {@inheritDoc} <p>If {@code table} is an {@code ArrayTable}, its null values will be stored in this table, possibly replacing values that were previously non-null. @throws NullPointerException if {@code table} has a null key @throws IllegalArgumentException if any of the provided table's row keys or column keys is not in {@link #rowKeySet()} or {@link #columnKeySet()}
1095 Returns an unmodifiable set of all row key / column key / value triplets. Changes to the table will update the returned set. <p>The returned set's iterator traverses the mappings with the first row key, the mappings with the second row key, and so on. <p>The value in the returned cells may change if the table subsequently changes. @return set of table cells consisting of row key / column key / value triplets
1096 {@inheritDoc} <p>The set's iterator traverses the mappings for the first row, the mappings for the second row, and so on. <p>Each cell is an immutable snapshot of a row key / column key / value mapping, taken at the time the cell is returned by a method call to the set or its iterator.
1097 Returns an unmodifiable collection of all values, which may contain duplicates. Changes to the table will update the returned collection. <p>The returned collection's iterator traverses the values of the first row key, the values of the second row key, and so on. @return collection of values
1098 {@inheritDoc} <p>The collection's iterator traverses the values for the first row, the values for the second row, and so on.
1099 Returns a new ordering on {@code F} which orders elements by first applying a function to them, then comparing those results using {@code this}. For example, to compare objects by their string forms, in a case-insensitive manner, use: {@snippet : Ordering.from(String.CASE_INSENSITIVE_ORDER) .onResultOf(Functions.toStringFunction()) } <p><b>Java 8+ users:</b> Use {@code Comparator.comparing(function, thisComparator)} instead (you can omit the comparator if it is the natural order).
1100 Returns an ordering based on an <i>existing</i> comparator instance. Note that it is unnecessary to create a <i>new</i> anonymous inner class implementing {@code Comparator} just to pass it in here. Instead, simply subclass {@code Ordering} and implement its {@code compare} method directly. <p>The returned object is serializable if {@code comparator} is serializable. <p><b>Java 8+ users:</b> this class is now obsolete as explained in the class documentation, so there is no need to use this method. @param comparator the comparator that defines the order @return comparator itself if it is already an {@code Ordering}; otherwise an ordering that wraps that comparator
1101 Returns an ordering which first uses the ordering {@code this}, but which in the event of a "tie", then delegates to {@code secondaryComparator}. For example, to sort a bug list first by status and second by priority, you might use {@code byStatus.compound(byPriority)}. For a compound ordering with three or more components, simply chain multiple calls to this method. <p>An ordering produced by this method, or a chain of calls to this method, is equivalent to one created using {@link Ordering#compound(Iterable)} on the same component comparators. <p>The returned object is serializable if this object and {@code secondaryComparator} are both serializable. <p><b>Java 8+ users:</b> Use {@code thisComparator.thenComparing(secondaryComparator)} instead. Depending on what {@code secondaryComparator} is, one of the other overloads of {@code thenComparing} may be even more useful.
1102 Returns an immutable cell with the specified row key, column key, and value. <p>The returned cell is serializable. @param rowKey the row key to be associated with the returned cell @param columnKey the column key to be associated with the returned cell @param value the value to be associated with the returned cell
1103 Returns {@code true} if the provided keys are among the keys provided when the table was constructed.
1104 Verifies that {@code key} and {@code value} are non-null, and returns a new immutable entry with those values. <p>A call to {@link Entry#setValue} on the returned entry will always throw {@link UnsupportedOperationException}.
1105 Makes an entry usable internally by a new ImmutableMap without rereading its contents.
1106 Adds an entry to the built multimap. @since 11.0
1107 Adds a key-value mapping to the built multimap if it is not already present.
1108 Resizes the entries storage if necessary.
1109 Creates a fresh entry with the specified object at the specified position in the entry arrays.
1110 Resizes the entries storage if necessary.
1111 Creates a fresh entry with the specified object at the specified position in the entry arrays.
1112 Handle lazy allocation of arrays.
1113 Handle lazy allocation of arrays.
1114 Returns {@code true} if the bounds of {@code other} do not extend outside the bounds of this range. Examples: <ul> <li>{@code [3..6]} encloses {@code [4..5]} <li>{@code (3..6)} encloses {@code (3..6)} <li>{@code [3..6]} encloses {@code [4..4)} (even though the latter is empty) <li>{@code (3..6]} does not enclose {@code [3..6]} <li>{@code [4..5]} does not enclose {@code (3..6)} (even though it contains every value contained by the latter range) <li>{@code [3..6]} does not enclose {@code (1..1]} (even though it contains every value contained by the latter range) </ul> <p>Note that if {@code a.encloses(b)}, then {@code b.contains(v)} implies {@code a.contains(v)}, but as the last two examples illustrate, the converse is not always true. <p>Being reflexive, antisymmetric and transitive, the {@code encloses} relation defines a <i>partial order</i> over ranges. There exists a unique {@linkplain Range#all maximal} range according to this relation, and also numerous {@linkplain #isEmpty minimal} ranges. Enclosure also implies {@linkplain #isConnected connectedness}.
1115 Returns {@code true} if there exists a (possibly empty) range which is {@linkplain #encloses enclosed} by both this range and {@code other}. <p>For example, <ul> <li>{@code [2, 4)} and {@code [5, 7)} are not connected <li>{@code [2, 4)} and {@code [3, 5)} are connected, because both enclose {@code [3, 4)} <li>{@code [2, 4)} and {@code [4, 6)} are connected, because both enclose the empty range {@code [4, 4)} </ul> <p>Note that this range and {@code other} have a well-defined {@linkplain #span union} and {@linkplain #intersection intersection} (as a single, possibly-empty range) if and only if this method returns {@code true}. <p>The connectedness relation is both reflexive and symmetric, but does not form an {@linkplain Equivalence equivalence relation} as it is not transitive. <p>Note that certain discrete ranges are not considered connected, even though there are no elements "between them." For example, {@code [3, 5]} is not considered connected to {@code [6, 10]}. In these cases, it may be desirable for both input ranges to be preprocessed with {@link #canonical(DiscreteDomain)} before testing for connectedness.
1116 @serialData number of distinct keys, and then for each distinct key: the key, the number of values for that key, and the key's values
1117 Returns a new builder for an immutable range map.
1118 Returns a new builder for an immutable range set.
1119 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder#Builder() ImmutableTable.Builder()} constructor.
1120 Scope the return type to {@link UnmodifiableIterator} to ensure this is an unmodifiable view. @since 20.0 (present with return type {@link Iterator} since 2.0)
1121 Returns the number of elements in the specified iterable that equal the specified object. This implementation avoids a full iteration when the iterable is a {@link Multiset} or {@link Set}. <p><b>Java 8+ users:</b> In most cases, the {@code Stream} equivalent of this method is {@code stream.filter(element::equals).count()}. If {@code element} might be null, use {@code stream.filter(Predicate.isEqual(element)).count()} instead. @see java.util.Collections#frequency(Collection, Object) Collections.frequency(Collection, Object)
1122 A sensible, albeit inefficient, definition of {@link #containsKey} in terms of the {@code iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #containsKey} to forward to this implementation. @since 7.0
1123 A sensible definition of {@link #containsValue} in terms of the {@code iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #containsValue} to forward to this implementation. @since 7.0
1124 A sensible definition of {@link #lowerKey} in terms of {@code lowerEntry}. If you override {@link #lowerEntry}, you may wish to override {@code lowerKey} to forward to this implementation.
1125 A sensible definition of {@link #floorKey} in terms of {@code floorEntry}. If you override {@code floorEntry}, you may wish to override {@code floorKey} to forward to this implementation.
1126 A sensible definition of {@link #ceilingKey} in terms of {@code ceilingEntry}. If you override {@code ceilingEntry}, you may wish to override {@code ceilingKey} to forward to this implementation.
1127 A sensible definition of {@link #higherKey} in terms of {@code higherEntry}. If you override {@code higherEntry}, you may wish to override {@code higherKey} to forward to this implementation.
1128 A sensible definition of {@link #firstKey} in terms of {@code firstEntry}. If you override {@code firstEntry}, you may wish to override {@code firstKey} to forward to this implementation.
1129 A sensible definition of {@link #lastKey} in terms of {@code lastEntry}. If you override {@code lastEntry}, you may wish to override {@code lastKey} to forward to this implementation.
1130 A sensible definition of {@link #lastEntry} in terms of the {@code iterator()} of the {@link #entrySet} of {@link #descendingMap}. If you override {@code descendingMap}, you may wish to override {@code lastEntry} to forward to this implementation.
1131 A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of the {@code entrySet} of {@code descendingMap}. If you override {@code descendingMap}, you may wish to override {@code pollFirstEntry} to forward to this implementation.
1132 A sensible definition of {@link #descendingKeySet} as the {@code navigableKeySet} of {@link #descendingMap}. (The {@link StandardDescendingMap} implementation implements {@code navigableKeySet} on its own, so as not to cause an infinite loop.) If you override {@code descendingMap}, you may wish to override {@code descendingKeySet} to forward to this implementation.
1133 A sensible definition of {@link #subMap(Object, Object)} in terms of {@link #subMap(Object, boolean, Object, boolean)}. If you override {@code subMap(K, boolean, K, boolean)}, you may wish to override {@code subMap} to forward to this implementation.
1134 A sensible definition of {@link #lowerEntry} in terms of the {@code lastEntry()} of {@link #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code lowerEntry} to forward to this implementation.
1135 A sensible definition of {@link #floorEntry} in terms of the {@code lastEntry()} of {@link #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code floorEntry} to forward to this implementation.
1136 A sensible definition of {@link #headMap(Object)} in terms of {@link #headMap(Object, boolean)}. If you override {@code headMap(K, boolean)}, you may wish to override {@code headMap} to forward to this implementation.
1137 A sensible definition of {@link #ceilingEntry} in terms of the {@code firstEntry()} of {@link #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code ceilingEntry} to forward to this implementation.
1138 A sensible definition of {@link #higherEntry} in terms of the {@code firstEntry()} of {@link #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code higherEntry} to forward to this implementation.
1139 A sensible definition of {@link #tailMap(Object)} in terms of {@link #tailMap(Object, boolean)}. If you override {@code tailMap(K, boolean)}, you may wish to override {@code tailMap} to forward to this implementation.
1140 A sensible definition of {@link #subMultiset(Object, BoundType, Object, BoundType)} in terms of {@link #headMultiset(Object, BoundType) headMultiset} and {@link #tailMultiset(Object, BoundType) tailMultiset}. <p>If you override either of these methods, you may wish to override {@link #subMultiset(Object, BoundType, Object, BoundType)} to forward to this implementation.
1141 Creates an empty {@code HashBasedTable}.
1142 @serialData the {@code Class<E>} for the enum type, the number of distinct elements, the first element, its count, the second element, its count, and so on
1143 Moves the last entry in the entry array into {@code dstIndex}, and nulls out its old position.
1144 Moves the last entry in the entry array into {@code dstIndex}, and nulls out its old position.
1145 Returns {@code true} if this BiMap contains an entry whose value is equal to {@code value} (or, equivalently, if this inverse view contains a key that is equal to {@code value}). <p>Due to the property that values in a BiMap are unique, this will tend to execute in faster-than-linear time. @param value the object to search for in the values of this BiMap @return true if a mapping exists from a key to the specified value
1146 Returns a new builder, expecting the specified number of entries to be added. <p>If {@code expectedSize} is exactly the number of entries added to the builder before {@link Builder#build} is called, the builder is likely to perform better than an unsized {@link #builder()} would have. <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to, but not exactly, the number of entries added to the builder. @since 23.1
1147 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableBiMap#builder}.
1148 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
1149 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableSortedMap#orderedBy}.
1150 Returns an immutable bimap containing a single entry.
1151 Adds e to the insertion-order array of deduplicated elements. Calls ensureCapacity.
1152 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableList#builder}.
1153 Returns a new builder, expecting the specified number of elements to be added. <p>If {@code expectedSize} is exactly the number of elements added to the builder before {@link Builder#build} is called, the builder is likely to perform better than an unsized {@link #builder()} would have. <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to, but not exactly, the number of elements added to the builder. @since 23.1
1154 Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate elements (only the first duplicate element is added). @param elements the elements to add to the {@code ImmutableSortedSet} @return this {@code Builder} object @throws NullPointerException if {@code elements} contains a null element
1155 Adds each element of {@code elements} to the {@code ImmutableSortedMultiset}. @param elements the elements to add to the {@code ImmutableSortedMultiset} @return this {@code Builder} object @throws NullPointerException if {@code elements} is null or contains a null element
1156 Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate elements (only the first duplicate element is added). @param elements the elements to add to the {@code ImmutableSortedSet} @return this {@code Builder} object @throws NullPointerException if {@code elements} contains a null element
1157 Returns a serializable form of this object. Non-public subclasses should not override this method. Publicly-accessible subclasses must override this method and should return a subclass of SerializedForm whose readResolve() method returns objects of the subclass type.
1158 Returns an immutable table containing a single cell.
1159 Returns a string representation of this fluent iterable, with the format {@code [e1, e2, ..., en]}. <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.joining(", ", "[", "]"))} or (less efficiently) {@code stream.collect(Collectors.toList()).toString()}.
1160 Stores a collection of values with the same key in the built multimap. @throws NullPointerException if {@code key}, {@code values}, or any element in {@code values} is null. The builder is left in an invalid state.
1161 Returns the single element contained in {@code iterable}, or {@code defaultValue} if the iterable is empty. <p><b>Java 8+ users:</b> the {@code Stream} equivalent to this method is {@code stream.collect(MoreCollectors.toOptional()).orElse(defaultValue)}. @throws IllegalArgumentException if the iterator contains multiple elements
1162 Returns the last element of {@code iterable} or {@code defaultValue} if the iterable is empty. If {@code iterable} is a {@link List} with {@link RandomAccess} support, then this operation is guaranteed to be {@code O(1)}. <p><b>{@code Stream} equivalent:</b> {@code Streams.findLast(stream).orElse(defaultValue)} <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list), consider using {@code collection.getLast()} instead. Note that if the collection is empty, {@code getLast()} throws a {@code NoSuchElementException}, while this method returns the default value. @param defaultValue the value to return if {@code iterable} is empty @return the last element of {@code iterable} or the default value @since 3.0
1163 Stores a key-value pair in the multimap. @param key key to store in the multimap @param value value to store in the multimap @return {@code true} always
1164 Returns consecutive {@linkplain List#subList(int, int) sublists} of a list, each of the same size (the final list may be smaller). For example, partitioning a list containing {@code [a, b, c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer list containing two inner lists of three and two elements, all in the original order. <p>The outer list is unmodifiable, but reflects the latest state of the source list. The inner lists are sublist views of the original list, produced on demand using {@link List#subList(int, int)}, and are subject to all the usual caveats about modification as explained in that API. @param list the list to return consecutive sublists of @param size the desired size of each sublist (the last may be smaller) @return a list of consecutive sublists @throws IllegalArgumentException if {@code partitionSize} is nonpositive
1165 A sensible default implementation of {@link #indexOf}, in terms of {@link #listIterator()}. If you override {@link #listIterator()}, you may wish to override {@link #indexOf} to forward to this implementation. @since 7.0
1166 A sensible default implementation of {@link #lastIndexOf}, in terms of {@link #listIterator(int)}. If you override {@link #listIterator(int)}, you may wish to override {@link #lastIndexOf} to forward to this implementation. @since 7.0
1167 Performs routine cleanup prior to executing a write. This should be called every time a write thread acquires the segment lock, immediately after acquiring the lock.
1168 Returns a new, empty {@link TreeRangeMap}.
1169 Returns the index of minimum value between {@code index} and {@code index + len}, or {@code -1} if {@code index} is greater than {@code size}.
1170 Returns the index of the max element.
1171 Retrieves, but does not remove, the least element of this queue, or returns {@code null} if the queue is empty.
1172 Bubbles a value from {@code index} up the levels of this heap, and returns the index the element ended up at.
1173 A sensible definition of {@link #iterator} in terms of {@link #entrySet} and {@link #remove(Object)}. If you override either of these methods, you may wish to override {@link #iterator} to forward to this implementation. @since 7.0
1174 Returns a new array that prepends {@code element} to {@code array}. @param element the element to prepend to the front of {@code array} @param array the array of elements to append @return an array whose size is one larger than {@code array}, with {@code element} occupying the first position, and the elements of {@code array} occupying the remaining elements.
1175 Returns an array containing all of the elements in the specified collection; the runtime type of the returned array is that of the specified array. If the collection fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of the specified collection. <p>If the collection fits in the specified array with room to spare (i.e., the array has more elements than the collection), the element in the array immediately following the end of the collection is set to {@code null}. This is useful in determining the length of the collection <i>only</i> if the caller knows that the collection does not contain any null elements. <p>This method returns the elements in the order they are returned by the collection's iterator. <p>TODO(kevinb): support concurrently modified collections? @param c the collection for which to return an array of elements @param array the array in which to place the collection elements @throws ArrayStoreException if the runtime type of the specified array is not a supertype of the runtime type of every element in the specified collection
1176 Returns the least of the specified values according to this ordering. If there are multiple least values, the first of those is returned. <p><b>Java 8+ users:</b> If {@code iterable} is a {@link Collection}, use {@code Collections.min(collection, thisComparator)} instead. Otherwise, use {@code Streams.stream(iterable).min(thisComparator).get()} instead. Note that these alternatives do not guarantee which tied minimum element is returned. @param iterable the iterable whose minimum element is to be determined @throws NoSuchElementException if {@code iterable} is empty @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this ordering.
1177 Returns the greatest of the specified values according to this ordering. If there are multiple greatest values, the first of those is returned. <p><b>Java 8+ users:</b> If {@code iterable} is a {@link Collection}, use {@code Collections.max(collection, thisComparator)} instead. Otherwise, use {@code Streams.stream(iterable).max(thisComparator).get()} instead. Note that these alternatives do not guarantee which tied maximum element is returned. @param iterable the iterable whose maximum element is to be determined @throws NoSuchElementException if {@code iterable} is empty @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this ordering.
1178 Returns a shorthand representation of the contents such as {@code "[1..100]"}.
1179 Converts a Range to a GeneralRange.
1180 Returns a view of the portion of {@code map} whose keys are contained by {@code range}. <p>This method delegates to the appropriate methods of {@link NavigableMap} (namely {@link NavigableMap#subMap(Object, boolean, Object, boolean) subMap()}, {@link NavigableMap#tailMap(Object, boolean) tailMap()}, and {@link NavigableMap#headMap(Object, boolean) headMap()}) to actually construct the view. Consult these methods for a full description of the returned view's behavior. <p><b>Warning:</b> {@code Range}s always represent a range of values using the values' natural ordering. {@code NavigableMap} on the other hand can specify a custom ordering via a {@link Comparator}, which can violate the natural ordering. Using this method (or in general using {@code Range}) with unnaturally-ordered maps can lead to unexpected and undefined behavior. @since 20.0
1181 Returns a view of the portion of {@code set} whose elements are contained by {@code range}. <p>This method delegates to the appropriate methods of {@link NavigableSet} (namely {@link NavigableSet#subSet(Object, boolean, Object, boolean) subSet()}, {@link NavigableSet#tailSet(Object, boolean) tailSet()}, and {@link NavigableSet#headSet(Object, boolean) headSet()}) to actually construct the view. Consult these methods for a full description of the returned view's behavior. <p><b>Warning:</b> {@code Range}s always represent a range of values using the values' natural ordering. {@code NavigableSet} on the other hand can specify a custom ordering via a {@link Comparator}, which can violate the natural ordering. Using this method (or in general using {@code Range}) with unnaturally-ordered sets can lead to unexpected and undefined behavior. @since 20.0
1182 {@inheritDoc} <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link Table} interface.
1183 Returns a synchronized (thread-safe) queue backed by the specified queue. In order to guarantee serial access, it is critical that <b>all</b> access to the backing queue is accomplished through the returned queue. <p>It is imperative that the user manually synchronize on the returned queue when accessing the queue's iterator: {@snippet : Queue<E> queue = Queues.synchronizedQueue(MinMaxPriorityQueue.<E>create()); ... queue.add(element); // Needn't be in synchronized block ... synchronized (queue) { // Must synchronize on queue! Iterator<E> i = queue.iterator(); // Must be in synchronized block while (i.hasNext()) { foo(i.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>The returned queue will be serializable if the specified queue is serializable. @param queue the queue to be wrapped in a synchronized view @return a synchronized view of the specified queue @since 14.0
1184 Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe range. If {@code safeMax < safeMin} then no characters are considered safe. This initializer is useful when explicit instances of ArrayBasedEscaperMap are used to allow the sharing of large replacement mappings. <p>If a character has no mapped replacement then it is checked against the safe range. If it lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed. @param escaperMap the mapping of characters to be escaped @param safeMin the lowest character value in the safe range @param safeMax the highest character value in the safe range
1185 Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified safe range. If {@code safeMax < safeMin} then no code points are considered safe. This initializer is useful when explicit instances of ArrayBasedEscaperMap are used to allow the sharing of large replacement mappings. <p>If a code point has no mapped replacement then it is checked against the safe range. If it lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed. @param escaperMap the map of replacements @param safeMin the lowest character value in the safe range @param safeMax the highest character value in the safe range @param unsafeReplacement the default replacement for unsafe characters or null if no default replacement is required
1186 Constructs a percent escaper with the specified safe characters and optional handling of the space character. <p>Not that it is allowed, but not necessarily desirable to specify {@code %} as a safe character. This has the effect of creating an escaper which has no well-defined inverse but it can be useful when escaping additional characters. @param safeChars a non-null string specifying additional safe characters for this escaper (the ranges 0..9, a..z and A..Z are always safe and should not be specified here) @param plusForSpace true if ASCII space should be escaped to {@code +} rather than {@code %20} @throws IllegalArgumentException if any of the parameters were invalid
1187 Returns the escaped form of a given literal string. @param string the literal string to be escaped @return the escaped form of {@code string} @throws NullPointerException if {@code string} is null
1188 Creates a {@code Subscriber} for {@code method} on {@code listener}.
1189 Returns a string representation of this graph.
1190 An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and {@link #successors(Object)}.
1191 An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and {@link #successors(Object)}.
1192 Equivalent to {@code putLong(Double.doubleToRawLongBits(d))}.
1193 Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link BloomFilter} with false positive probability 3%. <p>Note that if the {@code Collector} receives significantly more elements than specified, the resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive probability. <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>} is. <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since {@link #equals} also relies on object identity of funnels. @param funnel the funnel of T's that the constructed {@code BloomFilter} will use @param expectedInsertions the number of expected insertions to the constructed {@code BloomFilter}; must be positive @return a {@code Collector} generating a {@code BloomFilter} of the received elements @since 23.0 (but only since 33.4.0 in the Android flavor)
1194 Returns the probability that {@linkplain #mightContain(Object)} will erroneously return {@code true} for an object that has not actually been put in the {@code BloomFilter}. <p>Ideally, this number should be close to the {@code fpp} parameter passed in {@linkplain #create(Funnel, int, double)}, or smaller. If it is significantly higher, it is usually the case that too many elements (more than expected) have been put in the {@code BloomFilter}, degenerating it. @since 14.0 (since 11.0 as expectedFalsePositiveProbability())
1195 Determines whether a given Bloom filter is compatible with this Bloom filter. For two Bloom filters to be compatible, they must: <ul> <li>not be the same instance <li>have the same number of hash functions <li>have the same bit size <li>have the same strategy <li>have equal funnels </ul> @param that The Bloom filter to check for compatibility. @since 15.0
1196 Returns a string representation of x, where x is treated as unsigned. @since 13.0
1197 Combines this Bloom filter with another Bloom filter by performing a bitwise OR of the underlying data. The mutations happen to <b>this</b> instance. Callers must ensure the Bloom filters are appropriately sized to avoid saturating them. @param that The Bloom filter to combine this Bloom filter with. It is not mutated. @throws IllegalArgumentException if {@code isCompatible(that) == false} @since 15.0
1198 Creates a {@code HashCode} from a byte array. The array is <i>not</i> copied defensively, so it must be handed-off so as to preserve the immutability contract of {@code HashCode}.
1199 Creates a 32-bit {@code HashCode} representation of the given int value. The underlying bytes are interpreted in little endian order. @since 15.0 (since 12.0 in HashCodes)
1200 Creates a 64-bit {@code HashCode} representation of the given long value. The underlying bytes are interpreted in little endian order. @since 15.0 (since 12.0 in HashCodes)
1201 Returns the value of this {@code UnsignedInteger} as a {@code float}, analogous to a widening primitive conversion from {@code int} to {@code float}, and correctly rounded.
1202 Returns the value of this {@code UnsignedInteger} as a {@code double}, analogous to a widening primitive conversion from {@code int} to {@code double}, and correctly rounded.
1203 Returns the value of this {@code UnsignedInteger} as a {@link BigInteger}.
1204 Returns a general-purpose, <b>temporary-use</b>, non-cryptographic hash function. The algorithm the returned function implements is unspecified and subject to change without notice. <p><b>Warning:</b> a new random seed for these functions is chosen each time the {@code Hashing} class is loaded. <b>Do not use this method</b> if hash codes may escape the current process in any way, for example being sent over RPC, or saved to disk. For a general-purpose, non-cryptographic hash function that will never change behavior, we suggest {@link #murmur3_128}. <p>Repeated calls to this method on the same loaded {@code Hashing} class, using the same value for {@code minimumBits}, will return identically-behaving {@link HashFunction} instances. @param minimumBits a positive integer. This can be arbitrarily large. The returned {@link HashFunction} instance may use memory proportional to this integer. @return a hash function, described above, that produces hash codes of length {@code minimumBits} or greater
1205 Assigns to {@code hashCode} a "bucket" in the range {@code [0, buckets)}, in a uniform manner that minimizes the need for remapping as {@code buckets} grows. That is, {@code consistentHash(h, n)} equals: <ul> <li>{@code n - 1}, with approximate probability {@code 1/n} <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n}) </ul> <p>This method is suitable for the common use case of dividing work among buckets that meet the following conditions: <ul> <li>You want to assign the same fraction of inputs to each bucket. <li>When you reduce the number of buckets, you can accept that the most recently added buckets will be removed first. More concretely, if you are dividing traffic among tasks, you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and {@code consistentHash} will handle it. If, however, you are dividing traffic among servers {@code alpha}, {@code bravo}, and {@code charlie} and you occasionally need to take each of the servers offline, {@code consistentHash} will be a poor fit: It provides no way for you to specify which of the three buckets is disappearing. Thus, if your buckets change from {@code [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will assign all the old {@code alpha} traffic to {@code bravo} and all the old {@code bravo} traffic to {@code charlie}, rather than letting {@code bravo} keep its traffic. </ul> <p>See the <a href="http://en.wikipedia.org/wiki/Consistent_hashing">Wikipedia article on consistent hashing</a> for more information.
1206 Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the MD5 (128 hash bits) hash function and the given secret key. <p>If you are designing a new system that needs HMAC, prefer {@link #hmacSha256} or other future-proof algorithms <a href="https://datatracker.ietf.org/doc/html/rfc6151#section-2.3">over {@code hmacMd5}</a>. @param key the secret key @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC @since 20.0
1207 Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-1 (160 hash bits) hash function and the given secret key. @param key the secret key @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC @since 20.0
1208 Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-256 (256 hash bits) hash function and the given secret key. @param key the secret key @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC @since 20.0
1209 Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-512 (512 hash bits) hash function and the given secret key. @param key the secret key @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC @since 20.0
1210 Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. <p>Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream. @param sources the sources to concatenate @return a {@code ByteSource} containing the concatenated data @since 15.0
1211 Concatenates multiple {@link CharSource} instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. <p>Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream. @param sources the sources to concatenate @return a {@code CharSource} containing the concatenated data @since 15.0
1212 Returns a new {@link ByteArrayDataInput} instance to read from the {@code bytes} array from the beginning.
1213 Returns a new {@link ByteArrayDataOutput} instance with a default size.
1214 Returns a new {@link ByteArrayDataOutput} instance sized to hold {@code size} bytes before resizing. @throws IllegalArgumentException if {@code size} is negative
1215 Creates a new input stream that will encode the characters from {@code reader} into bytes using the given character set. Malformed input and unmappable characters will be replaced. @param reader input source @param charset character set used for encoding chars to bytes @param bufferSize size of internal input and output buffers @throws IllegalArgumentException if bufferSize is non-positive
1216 Counts the bytes in the given input stream using skip if possible.
1217 Discards {@code n} bytes of data from the input stream. This method will block until the full amount has been skipped. Does not close the stream. @param in the input stream to read from @param n the number of bytes to skip @throws EOFException if this stream reaches the end before skipping all the bytes @throws IOException if an I/O error occurs, or the stream does not support skipping
1218 Writes the given lines of text to this sink with each line (including the last) terminated with the given line separator. @throws IOException if an I/O error occurs while writing to this sink
1219 Writes the given lines of text to this sink with each line (including the last) terminated with the given line separator. @throws IOException if an I/O error occurs while writing to this sink @since 22.0 (but only since 33.4.0 in the Android flavor)
1220 Reads all lines of text from this source, running the given {@code action} for each line as it is read. <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code \n}. If the source's content does not end in a line termination sequence, it is treated as if it does. @throws IOException if an I/O error occurs while reading from this source or if {@code action} throws an {@code UncheckedIOException} @since 22.0 (but only since 33.4.0 in the Android flavor)
1221 Reads all of the lines from a {@link Readable} object. The lines do not include line-termination characters, but do include other leading and trailing whitespace. <p>Does not close the {@code Readable}. If reading files or resources you should use the {@link Files#readLines} and {@link Resources#readLines} methods. @param r the object to read from @return a mutable {@link List} containing all the lines @throws IOException if an I/O error occurs
1222 Streams lines from a {@link Readable} object, stopping when the processor returns {@code false} or all lines have been read and returning the result produced by the processor. Does not close {@code readable}. Note that this method may not fully consume the contents of {@code readable} if the processor stops processing early. @throws IOException if an I/O error occurs @since 14.0
1223 Handle the case of underflow caused by needing more input characters.
1224 Reads a {@code short} as specified by {@link DataInputStream#readShort()}, except using little-endian byte order. @return the next two bytes of the input stream, interpreted as a {@code short} in little-endian byte order. @throws IOException if an I/O error occurs.
1225 Reads a char as specified by {@link DataInputStream#readChar()}, except using little-endian byte order. @return the next two bytes of the input stream, interpreted as a {@code char} in little-endian byte order @throws IOException if an I/O error occurs
1226 Reads a {@code float} as specified by {@link DataInputStream#readFloat()}, except using little-endian byte order. @return the next four bytes of the input stream, interpreted as a {@code float} in little-endian byte order @throws IOException if an I/O error occurs
1227 Reads a {@code double} as specified by {@link DataInputStream#readDouble()}, except using little-endian byte order. @return the next eight bytes of the input stream, interpreted as a {@code double} in little-endian byte order @throws IOException if an I/O error occurs
1228 Writes a {@code String} as specified by {@link DataOutputStream#writeChars(String)}, except each character is written using little-endian byte order. @throws IOException if an I/O error occurs
1229 Writes a {@code double} as specified by {@link DataOutputStream#writeDouble(double)}, except using little-endian byte order. @throws IOException if an I/O error occurs
1230 Simple, insecure method for deleting the contents of a directory for file systems that don't support {@code SecureDirectoryStream}. Returns a collection of exceptions that occurred or null if no exceptions were thrown.
1231 Secure recursive delete using {@code SecureDirectoryStream}. Returns a collection of exceptions that occurred or null if no exceptions were thrown.
1232 Creates a new instance. @param it an iterator of I/O suppliers that will provide each substream
1233 Returns a {@link CharSource} view of the resource from which its bytes can be read as characters decoded with the given {@code charset}. @throws NoSuchElementException if the resource cannot be loaded through the class loader, despite physically existing in the class path. @since 20.0
1234 The number of permutations with repeated elements is calculated as follows: <ul> <li>For an empty list, it is 1 (base case). <li>When r numbers are added to a list of n-r elements, the number of permutations is increased by a factor of (n choose r). </ul>
1235 Returns the <a href="http://en.wikipedia.org/wiki/Arithmetic_mean">arithmetic mean</a> of {@code values}. <p>If these values are a sample drawn from a population, this is also an unbiased estimator of the arithmetic mean of the population. @param values a nonempty series of values, which will be converted to {@code double} values (this may cause loss of precision) @throws IllegalArgumentException if {@code values} is empty or contains any non-finite value @deprecated Use {@link Stats#meanOf} instead, noting the less strict handling of non-finite values.
1236 Returns {@code true} if {@code x} is exactly equal to {@code 2^k} for some finite integer {@code k}.
1237 Returns {@code true} if {@code x} represents a mathematical integer. <p>This is equivalent to, but not necessarily implemented as, the expression {@code !Double.isNaN(x) && !Double.isInfinite(x) && x == Math.rint(x)}.
1238 Returns {@code x}, rounded to a {@code double} with the specified rounding mode. If {@code x} is precisely representable as a {@code double}, its {@code double} value will be returned; otherwise, the rounding will choose between the two nearest representable values with {@code mode}. <p>For the case of {@link RoundingMode#HALF_EVEN}, this implementation uses the IEEE 754 default rounding mode: if the two nearest representable values are equally near, the one with the least significant bit zero is chosen. (In such cases, both of the nearest representable values are even integers; this method returns the one that is a multiple of a greater power of two.) @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x} is not precisely representable as a {@code double} @since 30.0
1239 Compares {@code a} and {@code b} "fuzzily," with a tolerance for nearly-equal values. <p>This method is equivalent to {@code fuzzyEquals(a, b, tolerance) ? 0 : Double.compare(a, b)}. In particular, like {@link Double#compare(double, double)}, it treats all NaN values as equal and greater than all other values (including {@link Double#POSITIVE_INFINITY}). <p>This is <em>not</em> a total ordering and is <em>not</em> suitable for use in {@link Comparable#compareTo} implementations. In particular, it is not transitive. @throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN @since 13.0
1240 If more than this many consecutive positions are filled in a table of the specified size, report probable hash flooding. ({@link #hashFloodingDetected} may also report hash flooding if fewer consecutive positions are filled; see that method for details.)
1241 Quickselects the top k elements from the 2k elements in the buffer. O(k) expected time, O(k log k) worst case.
1242 Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode. @throws IllegalArgumentException if {@code x <= 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x} is not a power of ten
1243 Returns the square root of {@code x}, rounded with the specified rounding mode. @throws IllegalArgumentException if {@code x < 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code sqrt(x)} is not an integer
1244 Returns ~2x the old capacity if small; ~1.5x otherwise.
1245 Builds an instance representing a horizontal transformation with a constant value of {@code y}. (The inverse of this will be a vertical transformation.)
1246 Finish building an instance with the given slope, i.e. the rate of change of {@code y} with respect to {@code x}. The slope must not be {@code NaN}. It may be infinite, in which case the transformation is vertical. (If it is zero, the transformation is horizontal.)
1247 Builds an instance representing a vertical transformation with a constant value of {@code x}. (The inverse of this will be a horizontal transformation.)
1248 Returns {@code n!}, that is, the product of the first {@code n} positive integers, or {@code 1} if {@code n == 0}. <p><b>Warning:</b> the result takes <i>O(n log n)</i> space, so use cautiously. <p>This uses an efficient binary recursive algorithm to compute the factorial with balanced multiplies. It also removes all the 2s from the intermediate products (shifting them back in at the end). @throws IllegalArgumentException if {@code n < 0}
1249 Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode. @throws IllegalArgumentException if {@code x <= 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x} is not a power of ten
1250 Returns (x * numerator / denominator), which is assumed to come out to an integral value.
1251 Returns the {@code b} to the {@code k}th power, provided it does not overflow. @throws ArithmeticException if {@code b} to the {@code k}th power overflows in signed {@code long} arithmetic
1252 Returns the population covariance of the values. The count must be non-zero. <p>This is guaranteed to return zero if the dataset contains a single pair of finite values. It is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty
1253 Returns the sample covariance of the values. The count must be greater than one. <p>This is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty or contains a single pair of values
1254 Returns the <a href="http://mathworld.wolfram.com/CorrelationCoefficient.html">Pearson's or product-moment correlation coefficient</a> of the values. The count must greater than one, and the {@code x} and {@code y} values must both have non-zero population variance (i.e. {@code xStats().populationVariance() > 0.0 && yStats().populationVariance() > 0.0}). The result is not guaranteed to be exactly +/-1 even when the data are perfectly (anti-)correlated, due to numerical errors. However, it is guaranteed to be in the inclusive range [-1, +1]. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty or contains a single pair of values, or either the {@code x} and {@code y} dataset has zero population variance
1255 Returns the <a href="http://en.wikipedia.org/wiki/Arithmetic_mean">arithmetic mean</a> of the values. The count must be non-zero. <p>The definition of the mean is the same as {@link Stats#mean}. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision) @throws IllegalArgumentException if the dataset is empty
1256 Adds the given value to the dataset.
1257 Returns the population covariance of the values. The count must be non-zero. <p>This is guaranteed to return zero if the dataset contains a single pair of finite values. It is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty
1258 Returns the sample covariance of the values. The count must be greater than one. <p>This is not guaranteed to return zero when the dataset consists of the same pair of values multiple times, due to numerical errors. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty or contains a single pair of values
1259 Returns the <a href="http://mathworld.wolfram.com/CorrelationCoefficient.html">Pearson's or product-moment correlation coefficient</a> of the values. The count must greater than one, and the {@code x} and {@code y} values must both have non-zero population variance (i.e. {@code xStats().populationVariance() > 0.0 && yStats().populationVariance() > 0.0}). The result is not guaranteed to be exactly +/-1 even when the data are perfectly (anti-)correlated, due to numerical errors. However, it is guaranteed to be in the inclusive range [-1, +1]. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty or contains a single pair of values, or either the {@code x} and {@code y} dataset has zero population variance
1260 Performs a partition operation on the slice of {@code array} with elements in the range [{@code from}, {@code to}]. Uses the median of {@code from}, {@code to}, and the midpoint between them as a pivot. Returns the index which the slice is partitioned around, i.e. if it returns {@code ret} then we know that the values with indexes in [{@code from}, {@code ret}) are less than or equal to the value at {@code ret} and the values with indexes in ({@code ret}, {@code to}] are greater than or equal to that.
1261 Creates a {@link PairedStats} instance from the given byte representation which was obtained by {@link #toByteArray}. <p><b>Note:</b> No guarantees are made regarding stability of the representation between versions.
1262 Creates a Stats instance from the given byte representation which was obtained by {@link #toByteArray}. <p><b>Note:</b> No guarantees are made regarding stability of the representation between versions.
1263 Returns an immutable snapshot of the current statistics.
1264 Returns an immutable snapshot of the statistics on the {@code x} values alone.
1265 Returns an immutable snapshot of the statistics on the {@code y} values alone.
1266 Returns a {@link Collector} which accumulates statistics from a {@link java.util.stream.Stream} of any type of boxed {@link Number} into a {@link Stats}. Use by calling {@code boxedNumericStream.collect(toStats())}. The numbers will be converted to {@code double} values (which may cause loss of precision). <p>If you have any of the primitive streams {@code DoubleStream}, {@code IntStream}, or {@code LongStream}, you should use the factory method {@link #of} instead. @since 28.2 (but only since 33.4.0 in the Android flavor)
1267 Returns the string representation of an {@link InetAddress} suitable for inclusion in a URI. <p>For IPv4 addresses, this is identical to {@link InetAddress#getHostAddress()}, but for IPv6 addresses it compresses zeroes and surrounds the text with square brackets; for example {@code "[2001:db8::1]"}. <p>Per section 3.2.2 of <a target="_parent" href="http://tools.ietf.org/html/rfc3986#section-3.2.2">RFC 3986</a>, a URI containing an IPv6 string literal is of the form {@code "http://[2001:db8::1]:8888/index.html"}. <p>Use of either {@link InetAddresses#toAddrString}, {@link InetAddress#getHostAddress()}, or this method is recommended over {@link InetAddress#toString()} when an IP address string literal is desired. This is because {@link InetAddress#toString()} prints the hostname and the IP address string joined by a "/". @param ip {@link InetAddress} to be converted to URI string literal @return {@code String} containing URI-safe string literal
1268 Returns the IPv4 address embedded in an IPv4 compatible address. @param ip {@link Inet6Address} to be examined for an embedded IPv4 address @return {@link Inet4Address} of the embedded IPv4 address @throws IllegalArgumentException if the argument is not a valid IPv4 compatible address
1269 Returns the IPv4 address embedded in a 6to4 address. @param ip {@link Inet6Address} to be examined for embedded IPv4 in 6to4 address @return {@link Inet4Address} of embedded IPv4 in 6to4 address @throws IllegalArgumentException if the argument is not a valid IPv6 6to4 address
1270 Returns the IPv4 address embedded in an ISATAP address. @param ip {@link Inet6Address} to be examined for embedded IPv4 in ISATAP address @return {@link Inet4Address} of embedded IPv4 in an ISATAP address @throws IllegalArgumentException if the argument is not a valid IPv6 ISATAP address
1271 Computes the quantile value of the given dataset. @param dataset the dataset to do the calculation on, which must be non-empty, which will be cast to doubles (with any associated lost of precision), and which will not be mutated by this call (it is copied instead) @return the quantile value
1272 Computes the quantile values of the given dataset. @param dataset the dataset to do the calculation on, which must be non-empty, which will be cast to doubles (with any associated lost of precision), and which will not be mutated by this call (it is copied instead) @return an unmodifiable, ordered map of results: the keys will be the specified quantile indexes, and the values the corresponding quantile values. When iterating, entries in the map are ordered by quantile index in the same order they were passed to the {@code indexes} method.
1273 Appends {@code value} to the end of the values the built {@link ImmutableDoubleArray} will contain.
1274 Appends {@code values}, in order, to the end of the values the built {@link ImmutableDoubleArray} will contain.
1275 Appends {@code values}, in order, to the end of the values the built {@link ImmutableDoubleArray} will contain.
1276 Appends {@code values}, in order, to the end of the values the built {@link ImmutableDoubleArray} will contain.
1277 Returns an immutable array containing a single value.
1278 Returns an immutable array containing the given values, in order.
1279 Returns an immutable array containing the given values, in order.
1280 Returns an immutable array containing the given values, in order.
1281 Returns an immutable array containing the given values, in order.
1282 Returns an immutable array containing the given values, in order.
1283 Returns an immutable array containing the given values, in order.
1284 Returns an immutable array containing the given values, in order.
1285 Returns an immutable array containing all the values from {@code stream}, in order. @since 22.0 (but only since 33.4.0 in the Android flavor)
1286 Returns an immutable array containing the same values as {@code this} array. This is logically a no-op, and in some circumstances {@code this} itself is returned. However, if this instance is a {@link #subArray} view of a larger array, this method will copy only the appropriate range of values, resulting in an equivalent array with a smaller memory footprint.
1287 Returns {@code true} if {@code target} is present at any index in this array. Values are compared as if by {@link Double#equals}. Equivalent to {@code asList().contains(target)}.
1288 Appends {@code value} to the end of the values the built {@link ImmutableIntArray} will contain.
1289 Appends {@code values}, in order, to the end of the values the built {@link ImmutableIntArray} will contain.
1290 Appends {@code values}, in order, to the end of the values the built {@link ImmutableIntArray} will contain.
1291 Appends {@code values}, in order, to the end of the values the built {@link ImmutableIntArray} will contain.
1292 Returns an immutable array containing a single value.
1293 Returns an immutable array containing the given values, in order.
1294 Returns an immutable array containing the given values, in order.
1295 Returns an immutable array containing the given values, in order.
1296 Returns an immutable array containing the given values, in order.
1297 Returns an immutable array containing the given values, in order.
1298 Returns an immutable array containing the given values, in order.
1299 Returns an immutable array containing all the values from {@code stream}, in order. @since 22.0 (but only since 33.4.0 in the Android flavor)
1300 Returns an immutable array containing the same values as {@code this} array. This is logically a no-op, and in some circumstances {@code this} itself is returned. However, if this instance is a {@link #subArray} view of a larger array, this method will copy only the appropriate range of values, resulting in an equivalent array with a smaller memory footprint.
1301 Appends {@code value} to the end of the values the built {@link ImmutableLongArray} will contain.
1302 Appends {@code values}, in order, to the end of the values the built {@link ImmutableLongArray} will contain.
1303 Appends {@code values}, in order, to the end of the values the built {@link ImmutableLongArray} will contain.
1304 Appends {@code values}, in order, to the end of the values the built {@link ImmutableLongArray} will contain.
1305 Returns an immutable array containing a single value.
1306 Returns an immutable array containing the given values, in order.
1307 Returns an immutable array containing the given values, in order.
1308 Returns an immutable array containing the given values, in order.
1309 Returns an immutable array containing the given values, in order.
1310 Returns an immutable array containing the given values, in order.
1311 Returns an immutable array containing the given values, in order.
1312 Returns an immutable array containing all the values from {@code stream}, in order. @since 22.0 (but only since 33.4.0 in the Android flavor)
1313 Returns an immutable array containing the same values as {@code this} array. This is logically a no-op, and in some circumstances {@code this} itself is returned. However, if this instance is a {@link #subArray} view of a larger array, this method will copy only the appropriate range of values, resulting in an equivalent array with a smaller memory footprint.
1314 Specifies multiple quantile indexes to be calculated, each index being the k in the kth q-quantile. @param indexes the quantile indexes, each of which must be in the inclusive range [0, q] for q-quantiles; the order of the indexes is unimportant, duplicates will be ignored, and the set will be snapshotted when this method is called @throws IllegalArgumentException if {@code indexes} is empty
1315 Returns an immutable array containing the given values, in order.
1316 Returns an immutable array containing the given values, in order.
1317 Parses the specified string as a signed integer value using the specified radix. The ASCII character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign. <p>Unlike {@link Integer#parseInt(String, int)}, this method returns {@code null} instead of throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns {@code null} if non-ASCII digits are present in the string. <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link Integer#parseInt(String)} accepts them. @param string the string representation of an integer value @param radix the radix to use when parsing @return the integer value represented by {@code string} using {@code radix}, or {@code null} if {@code string} has a length of zero or cannot be parsed as an integer value @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX} @throws NullPointerException if {@code string} is {@code null} @since 19.0
1318 Parses the specified string as a signed decimal long value. The ASCII character {@code '-'} ( <code>'&#92;u002D'</code>) is recognized as the minus sign. <p>Unlike {@link Long#parseLong(String)}, this method returns {@code null} instead of throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns {@code null} if non-ASCII digits are present in the string. <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link Integer#parseInt(String)} accepts them. @param string the string representation of a long value @return the long value represented by {@code string}, or {@code null} if {@code string} has a length of zero or cannot be parsed as a long value @throws NullPointerException if {@code string} is {@code null} @since 14.0
1319 Returns the unsigned {@code int} value represented by the given string. <p>Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix: <ul> <li>{@code 0x}<i>HexDigits</i> <li>{@code 0X}<i>HexDigits</i> <li>{@code #}<i>HexDigits</i> <li>{@code 0}<i>OctalDigits</i> </ul> @throws NumberFormatException if the string does not contain a valid unsigned {@code int} value @since 13.0
1320 Returns an {@code UnsignedInteger} that is equal to {@code value}, if possible. The inverse operation of {@link #longValue()}.
1321 Returns a {@code UnsignedInteger} representing the same value as the specified {@link BigInteger}. This is the inverse operation of {@link #bigIntegerValue()}. @throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^32}
1322 Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as an unsigned {@code int} value in the specified radix. @throws NumberFormatException if the string does not contain a parsable unsigned {@code int} value
1323 Returns the result of adding this and {@code val}. If the result would have more than 32 bits, returns the low 32 bits of the result. @since 14.0
1324 Returns the result of subtracting this and {@code val}. If the result would be negative, returns the low 32 bits of the result. @since 14.0
1325 Returns the result of multiplying this and {@code val}. If the result would have more than 32 bits, returns the low 32 bits of the result. @since 14.0
1326 Returns the result of dividing this by {@code val}. @throws ArithmeticException if {@code val} is zero @since 14.0
1327 Returns this mod {@code val}. @throws ArithmeticException if {@code val} is zero @since 14.0
1328 Returns a string representation of the {@code UnsignedInteger} value, in base 10.
1329 Compares this unsigned integer to another unsigned integer. Returns {@code 0} if they are equal, a negative number if {@code this < other}, and a positive number if {@code this > other}.
1330 Returns an {@code UnsignedLong} representing the same value as the specified {@code long}. @throws IllegalArgumentException if {@code value} is negative @since 14.0
1331 Returns a {@code UnsignedLong} representing the same value as the specified {@code BigInteger}. This is the inverse operation of {@link #bigIntegerValue()}. @throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^64}
1332 Returns the result of adding this and {@code val}. If the result would have more than 64 bits, returns the low 64 bits of the result. @since 14.0
1333 Returns the result of subtracting this and {@code val}. If the result would have more than 64 bits, returns the low 64 bits of the result. @since 14.0
1334 Returns the result of multiplying this and {@code val}. If the result would have more than 64 bits, returns the low 64 bits of the result. @since 14.0
1335 Returns dividend / divisor, where the dividend and divisor are treated as unsigned 64-bit quantities. <p><b>Java 8+ users:</b> use {@link Long#divideUnsigned(long, long)} instead. @param dividend the dividend (numerator) @param divisor the divisor (denominator) @throws ArithmeticException if divisor is 0
1336 Returns dividend % divisor, where the dividend and divisor are treated as unsigned 64-bit quantities. <p><b>Java 8+ users:</b> use {@link Long#remainderUnsigned(long, long)} instead. @param dividend the dividend (numerator) @param divisor the divisor (denominator) @throws ArithmeticException if divisor is 0 @since 11.0
1337 Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as an unsigned {@code long} value in the specified radix. @throws NumberFormatException if the string does not contain a parsable unsigned {@code long} value, or {@code radix} is not between {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}
1338 Returns the unsigned {@code long} value represented by the given decimal string. <p><b>Java 8+ users:</b> use {@link Long#parseUnsignedLong(String)} instead. @throws NumberFormatException if the string does not contain a valid unsigned {@code long} value @throws NullPointerException if {@code string} is null (in contrast to {@link Long#parseLong(String)})
1339 Returns the unsigned {@code long} value represented by the given string. <p>Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix: <ul> <li>{@code 0x}<i>HexDigits</i> <li>{@code 0X}<i>HexDigits</i> <li>{@code #}<i>HexDigits</i> <li>{@code 0}<i>OctalDigits</i> </ul> @throws NumberFormatException if the string does not contain a valid unsigned {@code long} value @since 13.0
1340 Returns true if the element is package-private.
1341 Returns the corresponding wrapper type if this is a primitive type; otherwise returns {@code this} itself. Idempotent. @since 15.0
1342 Returns the corresponding primitive type if this is a wrapper type; otherwise returns {@code this} itself. Idempotent. @since 15.0
1343 Returns the array component type if this type represents an array ({@code int[]}, {@code T[]}, {@code <? extends Map<String, Integer>[]>} etc.), or else {@code null} is returned.
1344 {@inheritDoc} <p>The default {@link AbstractFuture} implementation throws {@code InterruptedException} if the current thread is interrupted during the call, even if the value is already available. @throws CancellationException {@inheritDoc}
1345 Submits the task and adds a listener that adds the future to {@code queue} when it completes.
1346 @since 28.0
1347 @since 28.0
1348 @since 28.0
1349 @since 28.0
1350 @since 28.0
1351 @since 28.0
1352 @since 28.0
1353 @since 28.0
1354 Collects the result (success or failure) of one input future. The input must not have been cancelled. For details on when this is called, see {@link #collectOneValue}.
1355 Atomically adds the given value to the current value. @param delta the value to add @return the previous value
1356 Atomically adds the given value to the current value. @param delta the value to add @return the updated value
1357 Atomically adds the given value to the element at index {@code i}. @param i the index @param delta the value to add @return the previous value
1358 Atomically adds the given value to the element at index {@code i}. @param i the index @param delta the value to add @return the updated value
1359 Attempts to cancel execution of this step. This attempt will fail if the step has already completed, has already been cancelled, or could not be cancelled for some other reason. If successful, and this step has not started when {@code cancel} is called, this step should never run. <p>If successful, causes the objects captured by this step (if already started) and its input step(s) for later closing to be closed on their respective {@link Executor}s. If any such calls specified {@link MoreExecutors#directExecutor()}, those objects will be closed synchronously. @param mayInterruptIfRunning {@code true} if the thread executing this task should be interrupted; otherwise, in-progress tasks are allowed to complete, but the step will be cancelled regardless @return {@code false} if the step could not be cancelled, typically because it has already completed normally; {@code true} otherwise
1360 Performs a depth-first traversal of the graph edges defined by each node's {@code allowedPriorLocks} to find a path between {@code this} and the specified {@code lock}. @return If a path was found, a chained {@link ExampleStackTrace} illustrating the path to the {@code lock}, or {@code null} if no path was found.
1361 Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code Callable}. @param callable the callable task @since 10.0
1362 Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code Runnable}, and arrange that {@code get} will return the given result on successful completion. @param runnable the runnable task @param result the result to return on successful completion. If you don't need a particular result, consider using constructions of the form: {@code ListenableFuture<?> f = ListenableFutureTask.create(runnable, null)} @since 10.0
1363 Internal implementation detail used to invoke the listeners.
1364 Creates a new instance.
1365 Converts the given {@code ListenableFuture} to an equivalent {@code FluentFuture}. <p>If the given {@code ListenableFuture} is already a {@code FluentFuture}, it is returned directly. If not, it is wrapped in a {@code FluentFuture} that delegates all calls to the original {@code ListenableFuture}.
1366 Returns a {@code ListenableFuture} whose result is set from the supplied future when it completes. Cancelling the supplied future will also cancel the returned future, but cancelling the returned future will have no effect on the supplied future. @since 15.0
1367 Computes or retrieves a replacement value corresponding to an already-cached {@code key}. This method is called when an existing cache entry is refreshed by {@link CacheBuilder#refreshAfterWrite}, or through a call to {@link LoadingCache#refresh}. <p>This implementation synchronously delegates to {@link #load}. It is recommended that it be overridden with an asynchronous implementation when using {@link CacheBuilder#refreshAfterWrite}. <p><b>Note:</b> <i>all exceptions thrown by this method will be logged and then swallowed</i>. @param key the non-null key whose value should be loaded @param oldValue the non-null old value corresponding to {@code key} @return the future new value associated with {@code key}; <b>must not be null, must not return null</b> @throws Exception if unable to reload the result @throws InterruptedException if this method is interrupted. {@code InterruptedException} is treated like any other {@code Exception} in all respects except that, when it is caught, the thread's interrupt status is set @since 11.0
1368 Enqueues an event to be run on currently known listeners. <p>The {@code toString} method of the Event itself will be used to describe the event in the case of an error. @param event the callback to execute on {@link #dispatch}
1369 Enqueues an event to be run on currently known listeners, with a label. @param event the callback to execute on {@link #dispatch} @param label a description of the event to use in the case of an error
1370 Attempts to execute all the listeners in {@link #listeners} while not holding the {@link #monitor}.
1371 Attempts to execute all the listeners in {@link #listeners}.
1372 Signals some other thread waiting on a satisfied guard, if one exists. <p>We manage calls to this method carefully, to signal only when necessary, but never losing a signal, which is the classic problem of this kind of concurrency construct. We must signal if the current thread is about to relinquish the lock and may have changed the state protected by the monitor, thereby causing some guard to be satisfied. <p>In addition, any thread that has been signalled when its guard was satisfied acquires the responsibility of signalling the next thread when it again relinquishes the lock. Unlike a normal Condition, there is no guarantee that an interrupted thread has not been signalled, since the concurrency control must manage multiple Conditions. So this method must generally be called when waits are interrupted. <p>On the other hand, if a signalled thread wakes up to discover that its guard is still not satisfied, it does *not* need to call this method before returning to wait. This can only happen due to spurious wakeup (ignorable) or another thread acquiring the lock before the current thread can and returning the guard to the unsatisfied state. In the latter case the other thread (last thread modifying the state protected by the monitor) takes over the responsibility of signalling the next waiter. <p>This method must not be called from within a beginWaitingFor/endWaitingFor block, or else the current thread's guard might be mistakenly signalled, leading to a lost signal.
1373 Executes {@code callable} on the specified {@code executor}, returning a {@code Future}. @throws RejectedExecutionException if the task cannot be scheduled for execution @since 23.0
1374 Schedules {@code callable} on the specified {@code executor}, returning a {@code Future}. @throws RejectedExecutionException if the task cannot be scheduled for execution @since 23.0
1375 @since 19.0 (present with return type {@code ListenableFutureTask} since 14.0)
1376 Executes {@code callable} on the specified {@code executor}, returning a {@code Future}. @throws RejectedExecutionException if the task cannot be scheduled for execution @since 28.2
1377 @since 19.0 (present with return type {@code ListenableFutureTask} since 14.0)
1378 Executes {@code runnable} on the specified {@code executor}, returning a {@code Future} that will complete after execution. @throws RejectedExecutionException if the task cannot be scheduled for execution @since 28.2
1379 Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(1, timeout, unit)} uninterruptibly. @since 28.0 (but only since 33.4.0 in the Android flavor)
1380 Returns an {@link Optional} containing the first element in this fluent iterable. If the iterable is empty, {@code Optional.absent()} is returned. <p><b>{@code Stream} equivalent:</b> if the goal is to obtain any element, {@link Stream#findAny}; if it must specifically be the <i>first</i> element, {@code Stream#findFirst}. @throws NullPointerException if the first element is null; if this is a possibility, use {@code iterator().next()} or {@link Iterables#getFirst} instead.
1381 Returns an {@link Optional} containing the last element in this fluent iterable. If the iterable is empty, {@code Optional.absent()} is returned. If the underlying {@code iterable} is a {@link List} with {@link java.util.RandomAccess} support, then this operation is guaranteed to be {@code O(1)}. <p><b>{@code Stream} equivalent:</b> {@code stream.reduce((a, b) -> b)}. @throws NullPointerException if the last element is null; if this is a possibility, use {@link Iterables#getLast} instead.
1382 Returns an {@link Optional} containing the first element in {@code iterator} that satisfies the given predicate, if such an element exists. If no such element is found, an empty {@link Optional} will be returned from this method and the iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null} is matched in {@code iterator}, a NullPointerException will be thrown. @since 11.0
1383 Specifies the expected number of nodes in the graph. @throws IllegalArgumentException if {@code expectedNodeCount} is negative
1384 Specifies the expected number of nodes in the network. @throws IllegalArgumentException if {@code expectedNodeCount} is negative
1385 Specifies the expected number of edges in the network. @throws IllegalArgumentException if {@code expectedEdgeCount} is negative
1386 Specifies the expected number of nodes in the graph. @throws IllegalArgumentException if {@code expectedNodeCount} is negative
1387 Returns {@code true} if any element in {@code iterable} satisfies the predicate. <p><b>{@code Stream} equivalent:</b> {@link Stream#anyMatch}.
1388 Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested contains any match for the given regular expression pattern. The test used is equivalent to {@code Pattern.compile(pattern).matcher(arg).find()} @throws IllegalArgumentException if the pattern is invalid @since 3.0
1389 Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link RuntimeException}, {@link Error}, or {@code declaredType}. <p><b>Discouraged</b> in favor of calling {@link #throwIfInstanceOf} and {@link #throwIfUnchecked}. @param throwable the Throwable to possibly propagate @param declaredType the single checked exception type declared by the calling method @deprecated Use a combination of {@link #throwIfInstanceOf} and {@link #throwIfUnchecked}, which togther provide the same behavior except that they reject {@code null}.
1390 Flattens a class's type hierarchy into a set of {@code Class} objects including all superclasses (transitively) and all interfaces implemented by these superclasses.
1391 Returns a default thread factory used to create new threads. <p>When running on AppEngine with access to <a href="https://cloud.google.com/appengine/docs/standard/java/javadoc/">AppEngine legacy APIs</a>, this method returns {@code ThreadManager.currentRequestThreadFactory()}. Otherwise, it returns {@link Executors#defaultThreadFactory()}. @since 14.0
1392 Returns {@code true} if this fluent iterable contains any object for which {@code equals(target)} is true. <p><b>{@code Stream} equivalent:</b> {@code stream.anyMatch(Predicate.isEqual(target))}.
1393 Support removal operations when filtering a filtered multimap. Since a filtered multimap has iterators that don't support remove, passing one to the FilteredEntryMultimap constructor would lead to a multimap whose removal operations would fail. This method combines the predicates to avoid that problem.
1394 Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a key that doesn't satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 14.0
1395 Returns the elements from this fluent iterable that are instances of class {@code type}. <p><b>{@code Stream} equivalent:</b> {@code stream.filter(type::isInstance).map(type::cast)}. This does perform a little more work than necessary, so another option is to insert an unchecked cast at some later point: {@snippet : @SuppressWarnings("unchecked") // safe because of ::isInstance check ImmutableList<NewType> result = (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList()); }
1396 A sensible definition of {@link #removeAll} in terms of {@link #iterator} and {@link #remove}. If you override {@code iterator} or {@code remove}, you may wish to override {@link #removeAll} to forward to this implementation. @since 7.0 (this version overrides the {@code ForwardingCollection} version as of 12.0)
1397 Creates a new {@code EnumMultiset} containing the specified elements. <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}. @param elements the elements that the multiset should contain @throws IllegalArgumentException if {@code elements} is empty
1398 Creates a <i>mutable</i> {@code LinkedList} instance containing the given elements; a very thin shortcut for creating an empty list then calling {@link Iterables#addAll}. <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link ImmutableList#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link FluentIterable} and call {@code elements.toList()}.) <p><b>Performance note:</b> {@link ArrayList} and {@link java.util.ArrayDeque} consistently outperform {@code LinkedList} except in certain rare and specific situations. Unless you have spent a lot of time benchmarking your specific needs, use one of those instead. <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Use the {@code LinkedList} {@linkplain LinkedList#LinkedList(Collection) constructor} directly, taking advantage of <a href="https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation">"diamond" syntax</a>.
1399 Creates an {@code ArrayDeque} containing the elements of the specified iterable, in the order they are returned by the iterable's iterator. @since 12.0
1400 Creates a {@code ConcurrentLinkedQueue} containing the elements of the specified iterable, in the order they are returned by the iterable's iterator.
1401 Creates a {@code LinkedBlockingDeque} with a capacity of {@link Integer#MAX_VALUE}, containing the elements of the specified iterable, in the order they are returned by the iterable's iterator. @since 12.0
1402 Creates a {@code LinkedBlockingQueue} with a capacity of {@link Integer#MAX_VALUE}, containing the elements of the specified iterable, in the order they are returned by the iterable's iterator. @param elements the elements that the queue should contain, in order @return a new {@code LinkedBlockingQueue} containing those elements
1403 Creates a {@code PriorityBlockingQueue} containing the given elements. <p><b>Note:</b> If the specified iterable is a {@code SortedSet} or a {@code PriorityQueue}, this priority queue will be ordered according to the same ordering. @since 11.0 (but the bound of {@code E} was changed from {@code Object} to {@code Comparable} in 15.0)
1404 Creates a {@code PriorityQueue} containing the given elements. <p><b>Note:</b> If the specified iterable is a {@code SortedSet} or a {@code PriorityQueue}, this priority queue will be ordered according to the same ordering. @since 11.0 (but the bound of {@code E} was changed from {@code Object} to {@code Comparable} in 15.0)
1405 Returns a new, <i>mutable</i> {@code EnumSet} instance containing the given elements in their natural order. This method behaves identically to {@link EnumSet#copyOf(Collection)}, but also accepts non-{@code Collection} iterables and empty iterables.
1406 Creates a thread-safe set backed by a hash map and containing the given elements. The set is backed by a {@link ConcurrentHashMap} instance, and thus carries the same concurrency guarantees. <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be used as an element. The set is serializable. @param elements the elements that the set should contain @return a new thread-safe set containing those elements (minus duplicates) @throws NullPointerException if {@code elements} or any of its contents is null @since 15.0
1407 Creates a <i>mutable</i> {@code LinkedHashSet} instance containing the given elements in order. <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link ImmutableSet#copyOf(Iterable)} instead. <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Instead, use the {@code LinkedHashSet} constructor directly, taking advantage of <a href="https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation">"diamond" syntax</a>. <p>Overall, this method is not very useful and will likely be deprecated in the future. @param elements the elements that the set should contain, in order @return a new {@code LinkedHashSet} containing those elements (minus duplicates)
1408 Creates a <i>mutable</i> {@code TreeSet} instance containing the given elements sorted by their natural ordering. <p><b>Note:</b> if mutability is not required, use {@link ImmutableSortedSet#copyOf(Iterable)} instead. <p><b>Note:</b> If {@code elements} is a {@code SortedSet} with an explicit comparator, this method has different behavior than {@link TreeSet#TreeSet(SortedSet)}, which returns a {@code TreeSet} with that comparator. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead, use the {@code TreeSet} constructor directly, taking advantage of <a href="https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation">"diamond" syntax</a>. <p>This method is just a small convenience for creating an empty set and then calling {@link Iterables#addAll}. This method is not very useful and will likely be deprecated in the future. @param elements the elements that the set should contain @return a new {@code TreeSet} containing those elements (minus duplicates)
1409 Converts an iterable into a collection. If the iterable is already a collection, it is returned. Otherwise, an {@link java.util.ArrayList} is created with the contents of the iterable in the same iteration order.
1410 Creates a <i>mutable</i> {@code ArrayList} instance containing the given elements; a very thin shortcut for creating an empty list then calling {@link Iterables#addAll}. <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link ImmutableList#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link FluentIterable} and call {@code elements.toList()}.) <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Use the {@code ArrayList} {@linkplain ArrayList#ArrayList(Collection) constructor} directly, taking advantage of <a href="https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation">"diamond" syntax</a>.
1411 Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin convenience for creating an empty set then calling {@link Collection#addAll} or {@link Iterables#addAll}. <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link ImmutableSet#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link FluentIterable} and call {@code elements.toSet()}.) <p><b>Note:</b> if {@code E} is an {@link Enum} type, use {@link #newEnumSet(Iterable, Class)} instead. <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Instead, use the {@code HashSet} constructor directly, taking advantage of <a href="https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation">"diamond" syntax</a>. <p>Overall, this method is not very useful and will likely be deprecated in the future.
1412 Returns {@code true} if every element in this fluent iterable satisfies the predicate. If this fluent iterable is empty, {@code true} is returned. <p><b>{@code Stream} equivalent:</b> {@link Stream#allMatch} (same).
1413 A sensible default implementation of {@link #listIterator(int)}, in terms of {@link #size}, {@link #get(int)}, {@link #set(int, Object)}, {@link #add(int, Object)}, and {@link #remove(int)}. If you override any of these methods, you may wish to override {@link #listIterator(int)} to forward to this implementation. @since 7.0
1414 Returns a view of the sorted set as a map, mapping keys from the set according to the specified function. <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code entrySet} views of the returned map iterate in the same order as the backing set. <p>Modifications to the backing set are read through to the returned map. The returned map supports removal operations if the backing set does. Removal operations write through to the backing set. The returned map does not support put operations. <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the set does not contain {@code null}, because the view cannot stop {@code null} from being added to the set. <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the resulting map view. @since 14.0
1415 Returns a view of a sorted map whose values are derived from the original sorted map's entries. In contrast to {@link #transformValues}, this method's entry-transformation logic may depend on the key as well as the value. <p>All other properties of the transformed map, such as iteration order, are left intact. For example, the code: {@snippet : Map<String, Boolean> options = ImmutableSortedMap.of("verbose", true, "sort", false); EntryTransformer<String, Boolean, String> flagPrefixer = new EntryTransformer<String, Boolean, String>() { public String transformEntry(String key, Boolean value) { return value ? key : "yes" + key; } }; SortedMap<String, String> transformed = Maps.transformEntries(options, flagPrefixer); System.out.println(transformed); } ... prints {@code {sort=yessort, verbose=verbose}}. <p>Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. <p>It's acceptable for the underlying map to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed map might contain null values if the transformer sometimes gives a null result. <p>The returned map is not thread-safe or serializable, even if the underlying map is. <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the transformer will be applied many times for bulk operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing. <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the transformed map. @since 11.0
1416 Returns a view of a map where each value is transformed by a function. All other properties of the map, such as iteration order, are left intact. For example, the code: {@snippet : Map<String, Integer> map = ImmutableMap.of("a", 4, "b", 9); Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in); Map<String, Double> transformed = Maps.transformValues(map, sqrt); System.out.println(transformed); } ... prints {@code {a=2.0, b=3.0}}. <p>Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. <p>It's acceptable for the underlying map to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed map might contain null values, if the function sometimes gives a null result. <p>The returned map is not thread-safe or serializable, even if the underlying map is. <p>The function is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the function will be applied many times for bulk operations like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing.
1417 {@inheritDoc} @throws IllegalArgumentException if the call would result in more than {@link Integer#MAX_VALUE} occurrences of {@code element} in this multiset.
1418 Adds a number of occurrences of the specified element to this multiset. @param element the element to add @param occurrences the number of occurrences to add @return the previous count of the element before the operation; possibly zero @throws IllegalArgumentException if {@code occurrences} is negative, or if the resulting amount would exceed {@link Integer#MAX_VALUE}
1419 Returns a view of a {@code ListMultimap} whose values are derived from the original multimap's entries. In contrast to {@link #transformValues(ListMultimap, Function)}, this method's entry-transformation logic may depend on the key as well as the value. <p>All other properties of the transformed multimap, such as iteration order, are left intact. For example, the code: {@snippet : Multimap<String, Integer> multimap = ImmutableMultimap.of("a", 1, "a", 4, "b", 6); EntryTransformer<String, Integer, String> transformer = new EntryTransformer<String, Integer, String>() { public String transformEntry(String key, Integer value) { return key + value; } }; Multimap<String, String> transformed = Multimaps.transformEntries(multimap, transformer); System.out.println(transformed); } ... prints {@code {"a"=["a1", "a4"], "b"=["b6"]}}. <p>Changes in the underlying multimap are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying multimap. <p>It's acceptable for the underlying multimap to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed multimap might contain null values if the transformer sometimes gives a null result. <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap is. <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned multimap to be a view, but it means that the transformer will be applied many times for bulk operations like {@link Multimap#containsValue} and {@link Object#toString}. For this to perform well, {@code transformer} should be fast. To avoid lazy evaluation when the returned multimap doesn't need to be a view, copy the returned multimap into a new multimap of your choosing. <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the transformed multimap. @since 7.0
1420 Returns a view of a multimap where each value is transformed by a function. All other properties of the multimap, such as iteration order, are left intact. For example, the code: {@snippet : Multimap<String, Integer> multimap = ImmutableSetMultimap.of("a", 2, "b", -3, "b", -3, "a", 4, "c", 6); Function<Integer, String> square = new Function<Integer, String>() { public String apply(Integer in) { return Integer.toString(in * in); } }; Multimap<String, String> transformed = Multimaps.transformValues(multimap, square); System.out.println(transformed); } ... prints {@code {a=[4, 16], b=[9, 9], c=[36]}}. <p>Changes in the underlying multimap are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying multimap. <p>It's acceptable for the underlying multimap to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed multimap might contain null values, if the function sometimes gives a null result. <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap is. The {@code equals} and {@code hashCode} methods of the returned multimap are meaningless, since there is not a definition of {@code equals} or {@code hashCode} for general collections, and {@code get()} will return a general {@code Collection} as opposed to a {@code List} or a {@code Set}. <p>The function is applied lazily, invoked when needed. This is necessary for the returned multimap to be a view, but it means that the function will be applied many times for bulk operations like {@link Multimap#containsValue} and {@code Multimap.toString()}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned multimap doesn't need to be a view, copy the returned multimap into a new multimap of your choosing. @since 7.0
1421 Adds each element of {@code elements} to the {@code ImmutableSortedMultiset}. @param elements the {@code Iterable} to add to the {@code ImmutableSortedMultiset} @return this {@code Builder} object @throws NullPointerException if {@code elements} is null or contains a null element
1422 An implementation of {@link Multiset#addAll}.
1423 @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #contains} instead.
1424 Returns a {@link Collector} that accumulates elements into a {@code Table} created using the specified supplier, whose cells are generated by applying the provided mapping functions to the input elements. Cells are inserted into the generated {@code Table} in encounter order. <p>If multiple input elements map to the same row and column, an {@code IllegalStateException} is thrown when the collection operation is performed. <p>To collect to an {@link ImmutableTable}, use {@link ImmutableTable#toImmutableTable}. @since 21.0
1425 Returns the escaped form of a given literal string, starting at the given index. This method is called by the {@link #escape(String)} method when it discovers that escaping is required. It is protected to allow subclasses to override the fastpath escaping function to inline their escaping test. See {@link CharEscaperBuilder} for an example usage. <p>This method is not reentrant and may only be invoked by the top level {@link #escape(String)} method. @param s the literal string to be escaped @param index the index to start escaping from @return the escaped form of {@code string} @throws NullPointerException if {@code string} is null @throws IllegalArgumentException if invalid surrogate characters are encountered
1426 Constructs a graph with the properties specified in {@code builder}, initialized with the given node and edge maps.
1427 Constructs a graph with the properties specified in {@code builder}, initialized with the given node map.
1428 Copies all characters between the {@link Readable} and {@link Appendable} objects. Does not close or flush either object. @param from the object to read from @param to the object to write to @return the number of characters copied @throws IOException if an I/O error occurs
1429 Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the inverse operation to {@link #encode(byte[])}. @throws IllegalArgumentException if the input is not a valid encoded string according to this encoding.
1430 Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to {@code BigInteger.valueOf(2).pow(log2(x, CEILING))}. @throws IllegalArgumentException if {@code x <= 0} @since 20.0
1431 Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code BigInteger.valueOf(2).pow(log2(x, FLOOR))}. @throws IllegalArgumentException if {@code x <= 0} @since 20.0
1432 Returns {@link Invokable} of {@code constructor}.
1433 Returns {@link Invokable} of {@code method}.
1434 Unblocks all threads and runs all listeners.
1435 Adds {@code delta} to the value currently associated with {@code key}, and returns the new value.
1436 Adds {@code delta} to the value currently associated with {@code key}, and returns the old value.
1437 Copies all of the mappings from the specified map to this map. The effect of this call is equivalent to that of calling {@code put(k, v)} on this map once for each mapping from key {@code k} to value {@code v} in the specified map. The behavior of this operation is undefined if the specified map is modified while the operation is in progress.
1438 Creates a new instance with the specified edge directionality. @param directed if true, creates an instance for graphs whose edges are each directed; if false, creates an instance for graphs whose edges are each undirected.
1439 Adds a listener that will be called using the given executor when events are later {@link #enqueue enqueued} and {@link #dispatch dispatched}.
1440 Returns a representation of {@code a} as an instance of type {@code B}. @return the converted value; is null <i>if and only if</i> {@code a} is null
1441 Constructs a new empty instance of {@code CompactHashMap}.
1442 Constructs a new instance of {@code CompactHashMap} with the specified capacity. @param expectedSize the initial capacity of this {@code CompactHashMap}.
1443 Constructs a new empty instance of {@code CompactHashSet}.
1444 Constructs a new instance of {@code CompactHashSet} with the specified capacity. @param expectedSize the initial capacity of this {@code CompactHashSet}.
1445 Returns the simple name of the underlying class as given in the source code. <p>Behaves similarly to {@link Class#getSimpleName()} but does not require the class to be loaded. <p>But note that this class uses heuristics to identify the simple name. See a related discussion in <a href="https://github.com/google/guava/issues/3349">issue 3349</a>.
1446 Creates a new multimap that uses the provided map. @param map place to store the mapping from each key to its corresponding values
1447 Creates a new {@code Multimap} backed by {@code map}, whose internal value collections are generated by {@code factory}. Most users should prefer {@link MultimapBuilder}, though a small number of users will need this method to cover map or collection types that {@link MultimapBuilder} does not support. <p><b>Warning: do not use</b> this method when the collections returned by {@code factory} implement either {@link List} or {@code Set}! Use the more specific method {@link #newListMultimap}, {@link #newSetMultimap} or {@link #newSortedSetMultimap} instead, to avoid very surprising behavior from {@link Multimap#equals}. <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code toString} methods for the multimap and its returned views. However, the multimap's {@code get} method returns instances of a different class than {@code factory.get()} does. <p>The multimap is serializable if {@code map}, {@code factory}, the collections generated by {@code factory}, and the multimap contents are all serializable. <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if {@code map} and the instances generated by {@code factory} are. Concurrent read operations will work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link #synchronizedMultimap}. <p>Call this method only when the simpler methods {@link ArrayListMultimap#create()}, {@link HashMultimap#create()}, {@link LinkedHashMultimap#create()}, {@link LinkedListMultimap#create()}, {@link TreeMultimap#create()}, and {@link TreeMultimap#create(Comparator, Comparator)} won't suffice. <p>Note: the multimap assumes complete ownership over of {@code map} and the collections returned by {@code factory}. Those objects should not be manually updated and they should not use soft, weak, or phantom references. @param map place to store the mapping from each key to its corresponding values @param factory supplier of new, empty collections that will each hold all values for a given key @throws IllegalArgumentException if {@code map} is not empty
1448 Creates a new, empty {@code HashMultiset} using the default initial capacity.
1449 Creates a new, empty {@code LinkedHashMultiset} using the default initial capacity.
1450 Returns a new {@code EnumMultiset} instance containing the given elements. Unlike {@link EnumMultiset#create(Iterable)}, this method does not produce an exception on an empty iterable. @since 14.0
1451 Returns the <a href="http://en.wikipedia.org/wiki/Standard_deviation#Definition_of_population_values"> population standard deviation</a> of the values. The count must be non-zero. <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty
1452 Returns the <a href="http://en.wikipedia.org/wiki/Standard_deviation#Corrected_sample_standard_deviation"> corrected sample standard deviation</a> of the values. If this dataset is a sample drawn from a population, this is an estimator of the population standard deviation of the population which is less biased than {@link #populationStandardDeviation()} (the unbiased estimator depends on the distribution). The count must be greater than one. <p>This is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty or contains a single value
1453 Returns the <a href="http://en.wikipedia.org/wiki/Standard_deviation#Definition_of_population_values"> population standard deviation</a> of the values. The count must be non-zero. <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty
1454 Returns the <a href="http://en.wikipedia.org/wiki/Standard_deviation#Corrected_sample_standard_deviation"> corrected sample standard deviation</a> of the values. If this dataset is a sample drawn from a population, this is an estimator of the population standard deviation of the population which is less biased than {@link #populationStandardDeviation()} (the unbiased estimator depends on the distribution). The count must be greater than one. <p>This is not guaranteed to return zero when the dataset consists of the same value multiple times, due to numerical errors. However, it is guaranteed never to return a negative result. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}. @throws IllegalStateException if the dataset is empty or contains a single value
1455 Returns a {@code char} matcher that matches any BMP character not present in the given character sequence. Returns a bogus matcher if the sequence contains supplementary characters.
1456 Returns a serializable {@code Converter} that converts strings from this format to {@code targetFormat}. @since 16.0
1457 Package-private non-final implementation of andThen() so only we can override it.
1458 Returns the reversed view of this converter, which converts {@code this.convert(a)} back to a value roughly equivalent to {@code a}. <p>The returned converter is serializable if {@code this} converter is. <p><b>Note:</b> you should not override this method. It is non-final for legacy reasons.
1459 Returns a serializable converter that converts between strings and {@code enum} values of type {@code enumClass} using {@link Enum#valueOf(Class, String)} and {@link Enum#name()}. The converter will throw an {@code IllegalArgumentException} if the argument is not the name of any enum constant in the specified enum. @since 16.0
1460 Returns a {@link Converter} that converts values using {@link BiMap#get bimap.get()}, and whose inverse view converts values using {@link BiMap#inverse bimap.inverse()}{@code .get()}. <p>To use a plain {@link Map} as a {@link Function}, see {@link com.google.common.base.Functions#forMap(Map)} or {@link com.google.common.base.Functions#forMap(Map, Object)}. @since 16.0
1461 A sensible definition of {@link #equals(Object)} in terms of {@link #size} and {@link #iterator}. If you override either of those methods, you may wish to override {@link #equals(Object)} to forward to this implementation. @since 7.0
1462 Creates a new {@code ConcurrentHashMultiset} containing the specified elements, using the default initial capacity, load factor, and concurrency settings. <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}. @param elements the elements that the multiset should contain
1463 Appends the string representation of each of {@code parts}, using the previously configured separator between each, to {@code appendable}.
1464 Appends the string representation of each of {@code parts}, using the previously configured separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.
1465 Returns a string containing the string representation of each of {@code parts}, using the previously configured separator between each. @since 11.0
1466 Returns a string containing the string representation of each entry of {@code map}, using the previously configured separator and key-value separator.
1467 Returns a string representation for this CacheBuilderSpec instance. The form of this representation is not guaranteed.
1468 Returns a string representation for this MapMaker instance. The exact form of the returned string is not specified.
1469 Returns a string representation for this CacheBuilder instance. The exact form of the returned string is not specified.
1470 Creates a new, empty map with the specified strategy, initial capacity and concurrency level.
1471 Returns the equivalent {@code com.google.common.base.Optional} value to the given {@code java.util.Optional}, or {@code null} if the argument is null. @since 21.0 (but only since 33.4.0 in the Android flavor)
1472 Build a HostAndPort instance from separate host and port values. <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to prohibit these. @param host the host string to parse. Must not contain a port number. @param port a port number from [0..65535] @return if parsing was successful, a populated HostAndPort object. @throws IllegalArgumentException if {@code host} contains a port number, or {@code port} is out of range.
1473 Build a HostAndPort instance from a host only. <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to prohibit these. @param host the host-only string to parse. Must not contain a port number. @return if parsing was successful, a populated HostAndPort object. @throws IllegalArgumentException if {@code host} contains a port number. @since 17.0
1474 Returns the element at the specified position in an iterable. <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (throws {@code NoSuchElementException} if out of bounds) @param position position of the element to return @return the element at the specified position in {@code iterable} @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to the size of {@code iterable}
1475 Creates a new {@code BloomFilter} that's a copy of this instance. The new instance is equal to this instance but shares no mutable state. @since 12.0
1476 Acquires the given number of permits from this {@code RateLimiter}, blocking until the request can be granted. Tells the amount of time slept, if any. @param permits the number of permits to acquire @return time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited @throws IllegalArgumentException if the requested number of permits is negative or zero @since 16.0 (present in 13.0 with {@code void} return type})
1477 Acquires a permit from this {@code RateLimiter} if it can be obtained without exceeding the specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permit would not have been granted before the timeout expired. <p>This method is equivalent to {@code tryAcquire(1, timeout)}. @param timeout the maximum time to wait for the permit. Negative values are treated as zero. @return {@code true} if the permit was acquired, {@code false} otherwise @throws IllegalArgumentException if the requested number of permits is negative or zero @since 28.0 (but only since 33.4.0 in the Android flavor)
1478 Acquires a permit from this {@code RateLimiter} if it can be obtained without exceeding the specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permit would not have been granted before the timeout expired. <p>This method is equivalent to {@code tryAcquire(1, timeout, unit)}. @param timeout the maximum time to wait for the permit. Negative values are treated as zero. @param unit the time unit of the timeout argument @return {@code true} if the permit was acquired, {@code false} otherwise @throws IllegalArgumentException if the requested number of permits is negative or zero
1479 Acquires permits from this {@link RateLimiter} if it can be acquired immediately without delay. <p>This method is equivalent to {@code tryAcquire(permits, 0, anyUnit)}. @param permits the number of permits to acquire @return {@code true} if the permits were acquired, {@code false} otherwise @throws IllegalArgumentException if the requested number of permits is negative or zero @since 14.0
1480 Acquires a permit from this {@link RateLimiter} if it can be acquired immediately without delay. <p>This method is equivalent to {@code tryAcquire(1)}. @return {@code true} if the permit was acquired, {@code false} otherwise @since 14.0
1481 Acquires the given number of permits from this {@code RateLimiter} if it can be obtained without exceeding the specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permits would not have been granted before the timeout expired. @param permits the number of permits to acquire @param timeout the maximum time to wait for the permits. Negative values are treated as zero. @return {@code true} if the permits were acquired, {@code false} otherwise @throws IllegalArgumentException if the requested number of permits is negative or zero @since 28.0 (but only since 33.4.0 in the Android flavor)
1482 Enters this monitor. Blocks at most the given time. @return whether the monitor was entered
1483 Constructor for use by subclasses.
1484 Returns {@code true} if the MinMax heap structure holds. This is only used in testing. <p>TODO(kevinb): move to the test class?
1485 Returns a CacheBuilder configured according to this instance's specification.
1486 Configures the given map maker to use weak keys, if possible; does nothing otherwise (i.e., in GWT). This is sometimes acceptable, when only server-side code could generate enough volume that reclamation becomes important.
1487 Checks that the current state is equal to the expected state.
1488 Returns the value corresponding to the specified row and column indices. The same value is returned by {@code get(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex))}, but this method runs more quickly. @param rowIndex position of the row key in {@link #rowKeyList()} @param columnIndex position of the row key in {@link #columnKeyList()} @return the value with the specified row and column @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal to the number of allowed column keys
1489 Associates {@code value} with the specified row and column indices. The logic {@code put(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex), value)} has the same behavior, but this method runs more quickly. @param rowIndex position of the row key in {@link #rowKeyList()} @param columnIndex position of the row key in {@link #columnKeyList()} @param value value to store in the table @return the previous value with the specified row and column @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal to the number of allowed column keys
1490 Returns the {@code double} value present at the given index. @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to {@link #length}
1491 Returns the {@code int} value present at the given index. @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to {@link #length}
1492 Returns the {@code long} value present at the given index. @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to {@link #length}
1493 Returns the index of the first matching BMP character in a character sequence, starting from a given position, or {@code -1} if no character matches after that position. <p>The default implementation iterates over the sequence in forward order, beginning at {@code start}, calling {@link #matches} for each character. @param sequence the character sequence to examine @param start the first index to examine; must be nonnegative and no greater than {@code sequence.length()} @return the index of the first matching character, guaranteed to be no less than {@code start}, or {@code -1} if no character matches @throws IndexOutOfBoundsException if start is negative or greater than {@code sequence.length()}
1494 Constructs an iterator across a sequence of the given size with the given initial position. That is, the first call to {@link #nextIndex()} will return {@code position}, and the first call to {@link #next()} will return the element at that index, if available. Calls to {@link #previous()} can retrieve the preceding {@code position} elements. @throws IndexOutOfBoundsException if {@code position} is negative or is greater than {@code size} @throws IllegalArgumentException if {@code size} is negative
1495 Returns a new {@link ByteArrayDataInput} instance to read from the {@code bytes} array, starting at the given position. @throws IndexOutOfBoundsException if {@code start} is negative or greater than the length of the array
1496 Returns whether the given byte array slice is a well-formed UTF-8 byte sequence, as defined by {@link #isWellFormed(byte[])}. Note that this can be false even when {@code isWellFormed(bytes)} is true. @param bytes the input buffer @param off the offset in the buffer of the first byte to read @param len the number of bytes to read from the buffer
1497 Implementation of {@link Collection#toArray(Object[])} for collections backed by an object array. the runtime type of the returned array is that of the specified array. If the collection fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of the specified collection. <p>If the collection fits in the specified array with room to spare (i.e., the array has more elements than the collection), the element in the array immediately following the end of the collection is set to {@code null}. This is useful in determining the length of the collection <i>only</i> if the caller knows that the collection does not contain any null elements.
1498 Returns a copy of the specified subrange of the specified array that is literally an Object[], and not e.g. a {@code String[]}.
1499 Copies bytes from this hash code into {@code dest}. @param dest the byte array into which the hash code will be written @param offset the start offset in the data @param maxLength the maximum number of bytes to write @return the number of bytes written to {@code dest} @throws IndexOutOfBoundsException if there is not enough room in {@code dest}
1500 Encodes the specified range of the specified byte array, and returns the encoded {@code String}.
1501 Reads some bytes from an input stream and stores them into the buffer array {@code b}. This method blocks until {@code len} bytes of input data have been read into the array, or end of file is detected. The number of bytes read is returned, possibly zero. Does not close the stream. <p>A caller can detect EOF if the number of bytes read is less than {@code len}. All subsequent calls on the same stream will return zero. <p>If {@code b} is null, a {@code NullPointerException} is thrown. If {@code off} is negative, or {@code len} is negative, or {@code off+len} is greater than the length of the array {@code b}, then an {@code IndexOutOfBoundsException} is thrown. If {@code len} is zero, then no bytes are read. Otherwise, the first byte read is stored into element {@code b[off]}, the next one into {@code b[off+1]}, and so on. The number of bytes read is, at most, equal to {@code len}. @param in the input stream to read from @param b the buffer into which the data is read @param off an int specifying the offset into the data @param len an int specifying the number of bytes to read @return the number of bytes read @throws IOException if an I/O error occurs @throws IndexOutOfBoundsException if {@code off} is negative, if {@code len} is negative, or if {@code off + len} is greater than {@code b.length}
1502 Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.reverse(Booleans.asList(array).subList(fromIndex, toIndex))}, but is likely to be more efficient. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 23.1
1503 Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.reverse(Bytes.asList(array).subList(fromIndex, toIndex))}, but is likely to be more efficient. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 23.1
1504 Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.reverse(Chars.asList(array).subList(fromIndex, toIndex))}, but is likely to be more efficient. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 23.1
1505 Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.reverse(Doubles.asList(array).subList(fromIndex, toIndex))}, but is likely to be more efficient. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 23.1
1506 Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.reverse(Floats.asList(array).subList(fromIndex, toIndex))}, but is likely to be more efficient. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 23.1
1507 Returns a new immutable array containing the values in the specified range. <p><b>Performance note:</b> The returned array has the same full memory footprint as this one does (no actual copying is performed). To reduce memory usage, use {@code subArray(start, end).trimmed()}.
1508 Returns a new immutable array containing the values in the specified range. <p><b>Performance note:</b> The returned array has the same full memory footprint as this one does (no actual copying is performed). To reduce memory usage, use {@code subArray(start, end).trimmed()}.
1509 Returns a new immutable array containing the values in the specified range. <p><b>Performance note:</b> The returned array has the same full memory footprint as this one does (no actual copying is performed). To reduce memory usage, use {@code subArray(start, end).trimmed()}.
1510 Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.reverse(Ints.asList(array).subList(fromIndex, toIndex))}, but is likely to be more efficient. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 23.1
1511 Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.reverse(Longs.asList(array).subList(fromIndex, toIndex))}, but is likely to be more efficient. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 23.1
1512 Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.reverse(Shorts.asList(array).subList(fromIndex, toIndex))}, but is likely to be more efficient. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 23.1
1513 Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its elements as unsigned bytes. @since 23.1
1514 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order, interpreting them as unsigned 8-bit integers. @since 23.1
1515 Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its elements as unsigned 32-bit integers. @since 23.1
1516 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order, interpreting them as unsigned 32-bit integers. @since 23.1
1517 Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its elements as unsigned 64-bit integers. @since 23.1
1518 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order, interpreting them as unsigned 64-bit integers. @since 23.1
1519 Returns the elements of {@code unfiltered} that satisfy a predicate. The returned collection is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting collection's iterator does not support {@code remove()}, but all other collection methods are supported. When given an element that doesn't satisfy the predicate, the collection's {@code add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods such as {@code removeAll()} and {@code clear()} are called on the filtered collection, only elements that satisfy the filter will be removed from the underlying collection. <p>The returned collection isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered collection's methods, such as {@code size()}, iterate across every element in the underlying collection and determine which elements satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and use the copy. <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link Iterables#filter(Iterable, Class)} for related functionality.) <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#filter Stream.filter}.
1520 Returns a splitter that uses the given single-character separator. For example, {@code Splitter.on(',').split("foo,,bar")} returns an iterable containing {@code ["foo", "", "bar"]}. @param separator the character to recognize as a separator @return a splitter, with default settings, that recognizes that separator
1521 Constructor for use by subclasses.
1522 Constructs a new finalizer thread.
1523 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableListMultimap#builder}.
1524 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
1525 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableSetMultimap#builder}.
1526 Constructor for use by subclasses.
1527 Constructor for use by subclasses.
1528 Constructor for use by subclasses.
1529 Constructor for use by subclasses.
1530 Constructor for use by subclasses.
1531 Returns an unmodifiable view of the specified bimap. This method allows modules to provide users with "read-only" access to internal bimaps. Query operations on the returned bimap "read through" to the specified bimap, and attempts to modify the returned map, whether direct or via its collection views, result in an {@code UnsupportedOperationException}. <p>The returned bimap will be serializable if the specified bimap is serializable. @param bimap the bimap for which an unmodifiable view is to be returned @return an unmodifiable view of the specified bimap
1532 Returns a new {@code MutableClassToInstanceMap} instance backed by a {@link HashMap} using the default initial capacity and load factor.
1533 Returns a new {@code MutableClassToInstanceMap} instance backed by a given empty {@code backingMap}. The caller surrenders control of the backing map, and thus should not allow any direct references to it to remain accessible.
1534 Returns an empty type to instance map.
1535 Constructor for use by subclasses.
1536 Returns an unmodifiable view of the specified multimap. Query operations on the returned multimap "read through" to the specified multimap, and attempts to modify the returned multimap, either directly or through the multimap's views, result in an {@code UnsupportedOperationException}. <p>The returned multimap will be serializable if the specified multimap is serializable. @param delegate the multimap for which an unmodifiable view is to be returned @return an unmodifiable view of the specified multimap
1537 Returns an unmodifiable view of the specified table. This method allows modules to provide users with "read-only" access to internal tables. Query operations on the returned table "read through" to the specified table, and attempts to modify the returned table, whether direct or via its collection views, result in an {@code UnsupportedOperationException}. <p>The returned table will be serializable if the specified table is serializable. <p>Consider using an {@link ImmutableTable}, which is guaranteed never to change. @since 11.0
1538 Submits a blocking task for the given {@link Future} to provide {@link ListenableFuture} functionality. <p><b>Warning:</b> If the input future does not already implement {@code ListenableFuture}, the returned future will emulate {@link ListenableFuture#addListener} by submitting a task to the given executor at the first call to {@code addListener}. The task must be started by the executor promptly, or else the returned {@code ListenableFuture} may fail to work. The task's execution consists of blocking until the input future is {@linkplain Future#isDone() done}, so each call to this method may claim and hold a thread for an arbitrary length of time. Use of bounded executors or other executors that may fail to execute a task promptly may result in deadlocks. <p>Prefer to create {@code ListenableFuture} instances with {@link SettableFuture}, {@link MoreExecutors#listeningDecorator( java.util.concurrent.ExecutorService)}, {@link ListenableFutureTask}, {@link AbstractFuture}, and other utilities over creating plain {@code Future} instances to be upgraded to {@code ListenableFuture} after the fact. @since 12.0
1539 @since 11.0
1540 @since 11.0
1541 @since 11.0
1542 @since 11.0
1543 @since 12.0
1544 @since 11.0
1545 Creates a new entry. @param segment to create the entry for @param key of the entry @param hash of the key @param next entry in the same bucket
1546 Creates a new entry. @param segment to create the entry for @param key of the entry @param hash of the key @param next entry in the same bucket
1547 Creates a new entry. @param segment to create the entry for @param key of the entry @param hash of the key @param next entry in the same bucket
1548 Creates a new entry. @param segment to create the entry for @param key of the entry @param hash of the key @param next entry in the same bucket
1549 Creates a new entry. @param segment to create the entry for @param key of the entry @param hash of the key @param next entry in the same bucket
1550 Creates a new entry. @param segment to create the entry for @param key of the entry @param hash of the key @param next entry in the same bucket
1551 Sets a new value of an entry. Adds newly created entries at the end of the access queue.
1552 Returns the number of elements in this fluent iterable. <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.
1553 Returns the number of edges in this graph; used to calculate the size of {@link Graph#edges()}. This implementation requires O(|N|) time. Classes extending this one may manually keep track of the number of edges as the graph is updated, and override this method for better performance.
1554 Reads all bytes from an input stream into a byte array. Does not close the stream. <p><b>Java 9+ users:</b> use {@code in#readAllBytes()} instead. @param in the input stream to read from @return a byte array containing all the bytes from the stream @throws IOException if an I/O error occurs
1555 Reads all bytes from an input stream into a byte array. The given expected size is used to create an initial byte array, but if the actual number of bytes read from the stream differs, the correct result will be returned anyway.
1556 Package-private constructor for creating a map-backed bimap.
1557 {@inheritDoc} <p>Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a {@link List}, instead of the {@link Collection} specified in the {@link Multimap} interface.
1558 {@inheritDoc} <p>The returned collection is immutable.
1559 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.
1560 Returns a collection view of all values associated with a key. If no mappings in the multimap have the provided key, an empty collection is returned. <p>Changes to the returned collection will update the underlying multimap, and vice versa. <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link Multimap} interface.
1561 A sensible definition of {@link #toString} in terms of {@link #iterator}. If you override {@link #iterator}, you may wish to override {@link #toString} to forward to this implementation. @since 7.0
1562 A sensible definition of {@link #toString} in terms of the {@code iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #toString} to forward to this implementation. @since 7.0
1563 Returns the platform preferred implementation of a map based on a hash table.
1564 Returns true if {@code graph} has at least one cycle. A cycle is defined as a non-empty subset of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges) starting and ending with the same node. <p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).
1565 Creates an empty {@code HashBasedTable} with the specified map sizes. @param expectedRows the expected number of distinct row keys @param expectedCellsPerRow the expected number of column key / value mappings in each row @throws IllegalArgumentException if {@code expectedRows} or {@code expectedCellsPerRow} is negative
1566 Returns the platform preferred implementation of an insertion ordered map based on a hash table.
1567 Returns an empty mutable map whose keys will respect this {@link ElementOrder}.
1568 Returns the platform preferred implementation of a set based on a hash table.
1569 Returns the platform preferred implementation of an insertion ordered set based on a hash table.
1570 It is implicitly assumed that all the services are NEW and that they will all remain NEW until all the Listeners are installed and {@link #markReady()} is called. It is our caller's responsibility to only call {@link #markReady()} if all services were new at the time this method was called and when all the listeners were installed.
1571 A sensible definition of {@link #firstEntry()} in terms of {@code entrySet().iterator()}. <p>If you override {@link #entrySet()}, you may wish to override {@link #firstEntry()} to forward to this implementation.
1572 A sensible definition of {@link #lastEntry()} in terms of {@code descendingMultiset().entrySet().iterator()}. <p>If you override {@link #descendingMultiset} or {@link #entrySet()}, you may wish to override {@link #firstEntry()} to forward to this implementation.
1573 A sensible definition of {@link #pollFirstEntry()} in terms of {@code entrySet().iterator()}. <p>If you override {@link #entrySet()}, you may wish to override {@link #pollFirstEntry()} to forward to this implementation.
1574 A sensible definition of {@link #pollLastEntry()} in terms of {@code descendingMultiset().entrySet().iterator()}. <p>If you override {@link #descendingMultiset()} or {@link #entrySet()}, you may wish to override {@link #pollLastEntry()} to forward to this implementation.
1575 {@inheritDoc} <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the current count of that element in the multiset, as opposed to the count at the time the entry was retrieved.
1576 {@inheritDoc} <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the current count of that element in the multiset, as opposed to the count at the time the entry was retrieved.
1577 Returns a {@code TreeRangeSet} initialized with the ranges in the specified range set.
1578 Returns a {@code TreeRangeSet} representing the union of the specified ranges. <p>This is the smallest {@code RangeSet} which encloses each of the specified ranges. An element will be contained in this {@code RangeSet} if and only if it is contained in at least one {@code Range} in {@code ranges}. @since 21.0
1579 {@inheritDoc} <p>Because a {@code TreeMultimap} has unique sorted keys, this method returns a {@link NavigableMap}, instead of the {@link java.util.Map} specified in the {@link Multimap} interface. @since 14.0 (present with return type {@code SortedMap} since 2.0)
1580 {@inheritDoc} <p>The set's iterator traverses the mappings for the first row, the mappings for the second row, and so on. <p>Each cell is an immutable snapshot of a row key / column key / value mapping, taken at the time the cell is returned by a method call to the set or its iterator.
1581 {@inheritDoc} <p>The collection's iterator traverses the values for the first row, the values for the second row, and so on.
1582 Returns the same range relative to the reversed comparator.
1583 Verifies that {@code rowKey}, {@code columnKey} and {@code value} are non-null, and returns a new entry with those values.
1584 @since 21.0 (present with return type {@code Set} since 2.0)
1585 Associates {@code key} with {@code value} in the built map. If the same key is put more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last value put for that key.
1586 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided
1587 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided
1588 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided
1589 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided
1590 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided @since 31.0
1591 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided @since 31.0
1592 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided @since 31.0
1593 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided @since 31.0
1594 Returns an immutable map containing the given entries, in order. @throws IllegalArgumentException if duplicate keys are provided @since 31.0
1595 Makes an entry usable internally by a new ImmutableMap.
1596 {@inheritDoc} @since 11.0
1597 Adds entries to the built multimap. @since 19.0
1598 Adds an entry to the built multimap if it is not already present. @since 11.0
1599 Returns the elements of a {@code SortedSet}, {@code unfiltered}, that satisfy a predicate. The returned set is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting set's iterator does not support {@code remove()}, but all other set methods are supported. When given an element that doesn't satisfy the predicate, the set's {@code add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods such as {@code removeAll()} and {@code clear()} are called on the filtered set, only elements that satisfy the filter will be removed from the underlying set. <p>The returned set isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered set's methods, such as {@code size()}, iterate across every element in the underlying set and determine which elements satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and use the copy. <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link Iterables#filter(Iterable, Class)} for related functionality.) @since 11.0
1600 Ensures that this {@code CompactHashMap} has the smallest representation in memory, given its current size.
1601 Ensures that this {@code CompactHashSet} has the smallest representation in memory, given its current size.
1602 Returns {@code true} if this range is of the form {@code [v..v)} or {@code (v..v]}. (This does not encompass ranges of the form {@code (v..v)}, because such ranges are <i>invalid</i> and can't be constructed at all.) <p>Note that certain discrete ranges such as the integer range {@code (3..4)} are <b>not</b> considered empty, even though they contain no actual values. In these cases, it may be helpful to preprocess ranges with {@link #canonical(DiscreteDomain)}.
1603 Returns {@code true} if {@code object} is a range having the same endpoints and bound types as this range. Note that discrete ranges such as {@code (1..4)} and {@code [2..3]} are <b>not</b> equal to one another, despite the fact that they each contain precisely the same set of values. Similarly, empty ranges are not equal unless they have exactly the same representation, so {@code [3..3)}, {@code (3..3]}, {@code (4..4]} are all unequal.
1604 A sensible default implementation of {@link #add(Object)}, in terms of {@link #add(int, Object)}. If you override {@link #add(int, Object)}, you may wish to override {@link #add(Object)} to forward to this implementation. @since 7.0
1605 A sensible default implementation of {@link #iterator}, in terms of {@link #listIterator()}. If you override {@link #listIterator()}, you may wish to override {@link #iterator} to forward to this implementation. @since 7.0
1606 A sensible default implementation of {@link #listIterator()}, in terms of {@link #listIterator(int)}. If you override {@link #listIterator(int)}, you may wish to override {@link #listIterator()} to forward to this implementation. @since 7.0
1607 Returns the first node in the tree that is in range.
1608 Creates a {@code HashBasedTable} with the same mappings as the specified table. @param table the table to copy @throws NullPointerException if any of the row keys, column keys, or values in {@code table} is null
1609 Creates an empty {@code TreeBasedTable} that uses the natural orderings of both row and column keys. <p>The method signature specifies {@code R extends Comparable} with a raw {@link Comparable}, instead of {@code R extends Comparable<? super R>}, and the same for {@code C}. That's necessary to support classes defined without generics.
1610 Creates an empty {@code TreeBasedTable} that is ordered by the specified comparators. @param rowComparator the comparator that orders the row keys @param columnComparator the comparator that orders the column keys
1611 Constructs a new, empty bimap with the specified expected size. @param expectedSize the expected number of entries @throws IllegalArgumentException if the specified expected size is negative
1612 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
1613 Creates a new builder.
1614 Returns a builder that creates immutable sorted maps whose keys are ordered by their natural ordering. The sorted maps use {@link Ordering#natural()} as the comparator.
1615 Returns a builder that creates immutable sorted maps with an explicit comparator. If the comparator has a more general type than the map's keys, such as creating a {@code SortedMap<Integer, String>} with a {@code Comparator<Number>}, use the {@link Builder} constructor instead. @throws NullPointerException if {@code comparator} is null
1616 Returns a builder that creates immutable sorted maps whose keys are ordered by the reverse of their natural ordering.
1617 Returns an immutable map containing a single entry. This map behaves and performs comparably to {@link Collections#singletonMap} but will not accept a null key or value. It is preferable mainly for consistency and maintainability of your code.
1618 {@inheritDoc} <p>The inverse of an {@code ImmutableBiMap} is another {@code ImmutableBiMap}.
1619 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
1620 Returns a builder that creates immutable sorted sets with an explicit comparator. If the comparator has a more general type than the set being generated, such as creating a {@code SortedSet<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor instead. @throws NullPointerException if {@code comparator} is null
1621 Returns a builder that creates immutable sorted sets whose elements are ordered by the reverse of their natural ordering.
1622 Returns a builder that creates immutable sorted sets whose elements are ordered by their natural ordering. The sorted sets use {@link Ordering#natural()} as the comparator. This method provides more type-safety than {@link #builder}, as it can be called only for classes that implement {@link Comparable}.
1623 Returns a view of this immutable list in reverse order. For example, {@code ImmutableList.of(1, 2, 3).reverse()} is equivalent to {@code ImmutableList.of(3, 2, 1)}. @return a view of this immutable list in reverse order @since 7.0
1624 Returns a view of the specified string as an immutable list of {@code Character} values. @since 7.0
1625 Returns an immutable list containing a single element. This list behaves and performs comparably to {@link Collections#singletonList}, but will not accept a null element. It is preferable mainly for consistency and maintainability of your code. @throws NullPointerException if the element is null
1626 Returns an immutable collection of all key-value pairs in the multimap. Its iterator traverses the values for the first key, the values for the second key, and so on.
1627 Returns an immutable set containing the given element. Preferred over {@link Collections#singleton} for code consistency, {@code null} rejection, and because the return type conveys the immutability guarantee.
1628 Returns an optional charset for the value of the charset parameter if it is specified. @throws IllegalStateException if multiple charset values have been set for this media type @throws IllegalCharsetNameException if a charset value is present, but illegal @throws UnsupportedCharsetException if a charset value is present, but no support is available in this instance of the Java virtual machine
1629 Initiates service {@linkplain Service#stopAsync shutdown} if necessary on all the services being managed. @return this
1630 Returns true if all services are currently in the {@linkplain State#RUNNING running} state. <p>Users who want more detailed information should use the {@link #servicesByState} method to get detailed information about which services are not running.
1631 Returns a new builder, expecting the specified number of distinct elements to be added. <p>If {@code expectedSize} is exactly the number of distinct elements added to the builder before {@link Builder#build} is called, the builder is likely to perform better than an unsized {@link #builder()} would have. <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to, but not exactly, the number of distinct elements added to the builder. @since 23.1
1632 Stores another multimap's entries in the built multimap. The generated multimap's key and value orderings correspond to the iteration ordering of the {@code multimap.asMap()} view, with new keys and values following any existing keys and values. @throws NullPointerException if any key or value in {@code multimap} is null. The builder is left in an invalid state.
1633 Throws an exception indicating that one or more files couldn't be deleted when deleting {@code path} or its contents. <p>If there is only one exception in the collection, and it is a {@link NoSuchFileException} thrown because {@code path} itself didn't exist, then throws that exception. Otherwise, the thrown exception contains all the exceptions in the given collection as suppressed exceptions.
1634 Combines multiple iterators into a single iterator. The returned iterator iterates across the elements of each iterator in {@code inputs}. The input iterators are not polled until necessary. <p>The returned iterator supports {@code remove()} when the corresponding input iterator supports it. @throws NullPointerException if any of the provided iterators is null
1635 Returns the internal entry for the specified key. The entry may be computing or partially collected. Does not impact recency ordering.
1636 Performs routine cleanup following a read. Normally cleanup happens during writes, or from the cleanupExecutor. If cleanup is not observed after a sufficient number of reads, try cleaning up from the read thread.
1637 A sensible definition of {@link #containsKey} in terms of the {@code firstKey()} method of {@link #tailMap}. If you override {@link #tailMap}, you may wish to override {@link #containsKey} to forward to this implementation. @since 7.0
1638 A sensible default implementation of {@link #subMap(Object, Object)} in terms of {@link #headMap(Object)} and {@link #tailMap(Object)}. In some situations, you may wish to override {@link #subMap(Object, Object)} to forward to this implementation. @since 7.0
1639 Computes the difference between two maps. This difference is an immutable snapshot of the state of the maps at the time this method is called. It will never change, even if the maps change at a later time. <p>Since this method uses {@code HashMap} instances internally, the keys of the supplied maps must be well-behaved with respect to {@link Object#equals} and {@link Object#hashCode}. @param left the map to treat as the "left" map for purposes of comparison @param right the map to treat as the "right" map for purposes of comparison @param valueEquivalence the equivalence relationship to use to compare values @return the difference between the two maps @since 10.0
1640 Computes the difference between two sorted maps, using the comparator of the left map, or {@code Ordering.natural()} if the left map uses the natural ordering of its elements. This difference is an immutable snapshot of the state of the maps at the time this method is called. It will never change, even if the maps change at a later time. <p>Since this method uses {@code TreeMap} instances internally, the keys of the right map must all compare as distinct according to the comparator of the left map. <p><b>Note:</b>If you only need to know whether two sorted maps have the same mappings, call {@code left.equals(right)} instead of this method. @param left the map to treat as the "left" map for purposes of comparison @param right the map to treat as the "right" map for purposes of comparison @return the difference between the two maps @since 11.0
1641 Creates a new AsyncEventBus that will use {@code executor} to dispatch events. Assigns {@code identifier} as the bus's name for logging purposes. @param identifier short name for the bus, for logging purposes. @param executor Executor to use to dispatch events. It is the caller's responsibility to shut down the executor after the last event has been posted to this event bus.
1642 Creates a new AsyncEventBus that will use {@code executor} to dispatch events. @param executor Executor to use to dispatch events. It is the caller's responsibility to shut down the executor after the last event has been posted to this event bus. @param subscriberExceptionHandler Handler used to handle exceptions thrown from subscribers. See {@link SubscriberExceptionHandler} for more information. @since 16.0
1643 Creates a new AsyncEventBus that will use {@code executor} to dispatch events. @param executor Executor to use to dispatch events. It is the caller's responsibility to shut down the executor after the last event has been posted to this event bus.
1644 Creates a new EventBus with the given {@code identifier}. @param identifier a brief name for this bus, for logging purposes. Should be a valid Java identifier.
1645 Creates a new EventBus with the given {@link SubscriberExceptionHandler}. @param exceptionHandler Handler for subscriber exceptions. @since 16.0
1646 Returns the minimum child or {@code -1} if no child exists.
1647 Returns the minimum grand child or -1 if no grand child exists.
1648 Retrieves, but does not remove, the greatest element of this queue, or returns {@code null} if the queue is empty.
1649 Bubbles a value from {@code index} up the appropriate heap if required.
1650 A sensible definition of {@link #contains} in terms of {@link #count}. If you override {@link #count}, you may wish to override {@link #contains} to forward to this implementation. @since 7.0
1651 A sensible definition of {@link #add(Object)} in terms of {@link #add(Object, int)}. If you override {@link #add(Object, int)}, you may wish to override {@link #add(Object)} to forward to this implementation. @since 7.0
1652 A sensible definition of {@link #remove(Object)} in terms of {@link #remove(Object, int)}. If you override {@link #remove(Object, int)}, you may wish to override {@link #remove(Object)} to forward to this implementation. @since 7.0
1653 A sensible definition of {@link #clear} in terms of the {@code iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #clear} to forward to this implementation. @since 7.0
1654 A sensible, albeit inefficient, definition of {@link #count} in terms of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #count} to forward to this implementation. @since 7.0
1655 A sensible definition of {@link #hashCode} as {@code entrySet().hashCode()} . If you override {@link #entrySet}, you may wish to override {@link #hashCode} to forward to this implementation. @since 7.0
1656 A sensible definition of {@link #toString} as {@code entrySet().toString()} . If you override {@link #entrySet}, you may wish to override {@link #toString} to forward to this implementation. @since 7.0
1657 A sensible definition of {@link #toArray(Object[])} in terms of {@link #size} and {@link #iterator}. If you override either of these methods, you may wish to override {@link #toArray} to forward to this implementation. @since 7.0
1658 A sensible definition of {@link #pollLast} in terms of the {@code descendingIterator} method. If you override {@link #descendingIterator} you may wish to override {@link #pollLast} to forward to this implementation.
1659 A sensible definition of {@link #subSet(Object, Object)} in terms of the {@link #subSet(Object, boolean, Object, boolean)} method. If you override {@link #subSet(Object, boolean, Object, boolean)}, you may wish to override {@link #subSet(Object, Object)} to forward to this implementation.
1660 A sensible definition of {@link #lower} in terms of the {@code descendingIterator} method of {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may wish to override {@link #lower} to forward to this implementation.
1661 A sensible definition of {@link #floor} in terms of the {@code descendingIterator} method of {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may wish to override {@link #floor} to forward to this implementation.
1662 A sensible definition of {@link #headSet(Object)} in terms of the {@link #headSet(Object, boolean)} method. If you override {@link #headSet(Object, boolean)}, you may wish to override {@link #headSet(Object)} to forward to this implementation.
1663 A sensible definition of {@link #ceiling} in terms of the {@code iterator} method of {@link #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may wish to override {@link #ceiling} to forward to this implementation.
1664 A sensible definition of {@link #higher} in terms of the {@code iterator} method of {@link #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may wish to override {@link #higher} to forward to this implementation.
1665 A sensible definition of {@link #subSet(Object, boolean, Object, boolean)} in terms of the {@code headSet} and {@code tailSet} methods. In many cases, you may wish to override {@link #subSet(Object, boolean, Object, boolean)} to forward to this implementation.
1666 A sensible definition of {@link #tailSet(Object)} in terms of the {@link #tailSet(Object, boolean)} method. If you override {@link #tailSet(Object, boolean)}, you may wish to override {@link #tailSet(Object)} to forward to this implementation.
1667 {@inheritDoc} <p>This method returns a {@link SortedSet}, instead of the {@code Set} specified in the {@link Table} interface.
1668 {@inheritDoc} <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link Table} interface.
1669 Returns a synchronized (thread-safe) deque backed by the specified deque. In order to guarantee serial access, it is critical that <b>all</b> access to the backing deque is accomplished through the returned deque. <p>It is imperative that the user manually synchronize on the returned deque when accessing any of the deque's iterators: {@snippet : Deque<E> deque = Queues.synchronizedDeque(Queues.<E>newArrayDeque()); ... deque.add(element); // Needn't be in synchronized block ... synchronized (deque) { // Must synchronize on deque! Iterator<E> i = deque.iterator(); // Must be in synchronized block while (i.hasNext()) { foo(i.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>The returned deque will be serializable if the specified deque is serializable. @param deque the deque to be wrapped in a synchronized view @return a synchronized view of the specified deque @since 15.0
1670 Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe range. If {@code safeMax < safeMin} then no characters are considered safe. <p>If a character has no mapped replacement then it is checked against the safe range. If it lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed. @param replacementMap a map of characters to their escaped representations @param safeMin the lowest character value in the safe range @param safeMax the highest character value in the safe range
1671 Convert this builder into a char escaper which is just a decorator around the underlying array of replacement char[]s. @return an escaper that escapes based on the underlying array.
1672 Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified safe range. If {@code safeMax < safeMin} then no code points are considered safe. <p>If a code point has no mapped replacement then it is checked against the safe range. If it lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed. @param replacementMap a map of characters to their escaped representations @param safeMin the lowest character value in the safe range @param safeMax the highest character value in the safe range @param unsafeReplacement the default replacement for unsafe characters or null if no default replacement is required
1673 Creates a {@code HashCode} from a byte array. The array is defensively copied to preserve the immutability contract of {@code HashCode}. The array cannot be empty. @since 15.0 (since 12.0 in HashCodes)
1674 Creates a {@code HashCode} from a hexadecimal ({@code base 16}) encoded string. The string must be at least 2 characters long, and contain only valid, lower-cased hexadecimal characters. <p>This method accepts the exact format generated by {@link #toString}. If you require more lenient {@code base 16} decoding, please use {@link com.google.common.io.BaseEncoding#decode} (and pass the result to {@link #fromBytes}). @since 15.0
1675 Returns a hash code, having the same bit length as each of the input hash codes, that combines the information of these hash codes in an ordered fashion. That is, whenever two equal hash codes are produced by two calls to this method, it is <i>as likely as possible</i> that each was computed from the <i>same</i> input hash codes in the <i>same</i> order. @throws IllegalArgumentException if {@code hashCodes} is empty, or the hash codes do not all have the same bit length
1676 Returns a hash code, having the same bit length as each of the input hash codes, that combines the information of these hash codes in an unordered fashion. That is, whenever two equal hash codes are produced by two calls to this method, it is <i>as likely as possible</i> that each was computed from the <i>same</i> input hash codes in <i>some</i> order. @throws IllegalArgumentException if {@code hashCodes} is empty, or the hash codes do not all have the same bit length
1677 Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the MD5 (128 hash bits) hash function and a {@link SecretKeySpec} created from the given byte array and the MD5 algorithm. <p>If you are designing a new system that needs HMAC, prefer {@link #hmacSha256} or other future-proof algorithms <a href="https://datatracker.ietf.org/doc/html/rfc6151#section-2.3">over {@code hmacMd5}</a>. @param key the key material of the secret key @since 20.0
1678 Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-1 (160 hash bits) hash function and a {@link SecretKeySpec} created from the given byte array and the SHA-1 algorithm. @param key the key material of the secret key @since 20.0
1679 Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-256 (256 hash bits) hash function and a {@link SecretKeySpec} created from the given byte array and the SHA-256 algorithm. @param key the key material of the secret key @since 20.0
1680 Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the SHA-512 (512 hash bits) hash function and a {@link SecretKeySpec} created from the given byte array and the SHA-512 algorithm. @param key the key material of the secret key @since 20.0
1681 Returns a view of the given byte array as a {@link ByteSource}. To view only a specific range in the array, use {@code ByteSource.wrap(b).slice(offset, length)}. <p>Note that the given byte array may be passed directly to methods on, for example, {@code OutputStream} (when {@code copyTo(OutputStream)} is called on the resulting {@code ByteSource}). This could allow a malicious {@code OutputStream} implementation to modify the contents of the array, but provides better performance in the normal case. @since 15.0 (since 14.0 as {@code ByteStreams.asByteSource(byte[])}).
1682 Returns a view of the given character sequence as a {@link CharSource}. The behavior of the returned {@code CharSource} and any {@code Reader} instances created by it is unspecified if the {@code charSequence} is mutated while it is being read, so don't do that. @since 15.0 (since 14.0 as {@code CharStreams.asCharSource(String)})
1683 Writes the given lines of text to this sink with each line (including the last) terminated with the operating system's default line separator. This method is equivalent to {@code writeLines(lines, System.getProperty("line.separator"))}. @throws IOException if an I/O error occurs while writing to this sink
1684 Writes the given lines of text to this sink with each line (including the last) terminated with the operating system's default line separator. This method is equivalent to {@code writeLines(lines, System.getProperty("line.separator"))}. @throws IOException if an I/O error occurs while writing to this sink @since 22.0 (but only since 33.4.0 in the Android flavor)
1685 Reads a byte stream, which was written by {@linkplain #writeTo(OutputStream)}, into a {@code BloomFilter}. <p>The {@code Funnel} to be used is not encoded in the stream, so it must be provided here. <b>Warning:</b> the funnel provided <b>must</b> behave identically to the one used to populate the original Bloom filter! @throws IOException if the InputStream throws an {@code IOException}, or if its data does not appear to be a BloomFilter serialized using the {@linkplain #writeTo(OutputStream)} method.
1686 Returns the <a href="http://en.wikipedia.org/wiki/Arithmetic_mean">arithmetic mean</a> of {@code values}. <p>If these values are a sample drawn from a population, this is also an unbiased estimator of the arithmetic mean of the population. @param values a nonempty series of values, which will be converted to {@code double} values (this may cause loss of precision) @throws IllegalArgumentException if {@code values} is empty or contains any non-finite value @deprecated Use {@link Stats#meanOf} instead, noting the less strict handling of non-finite values.
1687 Returns the base 2 logarithm of a double value, rounded with the specified rounding mode to an {@code int}. <p>Regardless of the rounding mode, this is faster than {@code (int) log2(x)}. @throws IllegalArgumentException if {@code x <= 0.0}, {@code x} is NaN, or {@code x} is infinite
1688 Checks the whole hash table for poor hash distribution. Takes O(n) in the worst case, O(n / log n) on average. <p>The online hash flooding detecting in RegularSetBuilderImpl.add can detect e.g. many exactly matching hash codes, which would cause construction to take O(n^2), but can't detect e.g. hash codes adversarially designed to go into ascending table locations, which keeps construction O(n) (as desired) but then can have O(n) queries later. <p>If this returns false, then no query can take more than O(log n). <p>Note that for a RegularImmutableSet with elements with truly random hash codes, contains operations take expected O(1) time but with high probability take O(log n) for at least some element. (https://en.wikipedia.org/wiki/Linear_probing#Analysis) <p>This method may return {@code true} even on truly random input, but {@code ImmutableSetTest} tests that the probability of that is low.
1689 Adds {@code elem} as a candidate for the top {@code k} elements. This operation takes amortized O(1) time.
1690 Returns an equivalent {@code Alphabet} except it ignores case.
1691 Returns a {@code TopKSelector} that collects the lowest {@code k} elements added to it, relative to the specified comparator, and returns them via {@link #topK} in ascending order. @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}
1692 Returns a {@code TopKSelector} that collects the greatest {@code k} elements added to it, relative to the specified comparator, and returns them via {@link #topK} in descending order. @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}
1693 Finish building an instance which also maps {@code x = x2} to {@code y = y2}. These values must not both be identical to the values given in the first mapping. If only the {@code x} values are identical, the transformation is vertical. If only the {@code y} values are identical, the transformation is horizontal (i.e. the slope is zero).
1694 Returns a linear transformation giving the best fit to the data according to <a href="http://mathworld.wolfram.com/LeastSquaresFitting.html">Ordinary Least Squares linear regression</a> of {@code y} as a function of {@code x}. The count must be greater than one, and either the {@code x} or {@code y} data must have a non-zero population variance (i.e. {@code xStats().populationVariance() > 0.0 || yStats().populationVariance() > 0.0}). The result is guaranteed to be horizontal if there is variance in the {@code x} data but not the {@code y} data, and vertical if there is variance in the {@code y} data but not the {@code x} data. <p>This fit minimizes the root-mean-square error in {@code y} as a function of {@code x}. This error is defined as the square root of the mean of the squares of the differences between the actual {@code y} values of the data and the values predicted by the fit for the {@code x} values (i.e. it is the square root of the mean of the squares of the vertical distances between the data points and the best fit line). For this fit, this error is a fraction {@code sqrt(1 - R*R)} of the population standard deviation of {@code y}, where {@code R} is the Pearson's correlation coefficient (as given by {@link #pearsonsCorrelationCoefficient()}). <p>The corresponding root-mean-square error in {@code x} as a function of {@code y} is a fraction {@code sqrt(1/(R*R) - 1)} of the population standard deviation of {@code x}. This fit does not normally minimize that error: to do that, you should swap the roles of {@code x} and {@code y}. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link LinearTransformation#forNaN()}. @throws IllegalStateException if the dataset is empty or contains a single pair of values, or both the {@code x} and {@code y} dataset must have zero population variance
1695 Returns a linear transformation giving the best fit to the data according to <a href="http://mathworld.wolfram.com/LeastSquaresFitting.html">Ordinary Least Squares linear regression</a> of {@code y} as a function of {@code x}. The count must be greater than one, and either the {@code x} or {@code y} data must have a non-zero population variance (i.e. {@code xStats().populationVariance() > 0.0 || yStats().populationVariance() > 0.0}). The result is guaranteed to be horizontal if there is variance in the {@code x} data but not the {@code y} data, and vertical if there is variance in the {@code y} data but not the {@code x} data. <p>This fit minimizes the root-mean-square error in {@code y} as a function of {@code x}. This error is defined as the square root of the mean of the squares of the differences between the actual {@code y} values of the data and the values predicted by the fit for the {@code x} values (i.e. it is the square root of the mean of the squares of the vertical distances between the data points and the best fit line). For this fit, this error is a fraction {@code sqrt(1 - R*R)} of the population standard deviation of {@code y}, where {@code R} is the Pearson's correlation coefficient (as given by {@link #pearsonsCorrelationCoefficient()}). <p>The corresponding root-mean-square error in {@code x} as a function of {@code y} is a fraction {@code sqrt(1/(R*R) - 1)} of the population standard deviation of {@code x}. This fit does not normally minimize that error: to do that, you should swap the roles of {@code x} and {@code y}. <h3>Non-finite values</h3> <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link LinearTransformation#forNaN()}. @throws IllegalStateException if the dataset is empty or contains a single pair of values, or both the {@code x} and {@code y} dataset have zero population variance
1696 Returns {@code true} if {@code n} is a <a href="http://mathworld.wolfram.com/PrimeNumber.html">prime number</a>: an integer <i>greater than one</i> that cannot be factored into a product of <i>smaller</i> positive integers. Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i> be factored into smaller positive integers). <p>To test larger numbers, use {@link BigInteger#isProbablePrime}. @throws IllegalArgumentException if {@code n} is negative @since 20.0
1697 Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode. @throws IllegalArgumentException if {@code x <= 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x} is not a power of ten
1698 Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and {@code k}, or {@link Long#MAX_VALUE} if the result does not fit in a {@code long}. @throws IllegalArgumentException if {@code n < 0}, {@code k < 0}, or {@code k > n}
1699 Returns the <a href="http://en.wikipedia.org/wiki/Arithmetic_mean">arithmetic mean</a> of the values. The count must be non-zero. <p>The definition of the mean is the same as {@link Stats#mean}. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision) @throws IllegalArgumentException if the dataset is empty
1700 Adds the given pair of values to the dataset.
1701 Adds the given values to the dataset. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision)
1702 Adds the given values to the dataset. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision)
1703 Adds the given statistics to the dataset, as if the individual values used to compute the statistics had been added directly.
1704 Adds the given statistics to the dataset, as if the individual values used to compute the statistics had been added directly. @since 28.2
1705 Performs an in-place selection to find the element which would appear at a given index in a dataset if it were sorted. The following preconditions should hold: <ul> <li>{@code required}, {@code from}, and {@code to} should all be indexes into {@code array}; <li>{@code required} should be in the range [{@code from}, {@code to}]; <li>all the values with indexes in the range [0, {@code from}) should be less than or equal to all the values with indexes in the range [{@code from}, {@code to}]; <li>all the values with indexes in the range ({@code to}, {@code array.length - 1}] should be greater than or equal to all the values with indexes in the range [{@code from}, {@code to}]. </ul> This method will reorder the values with indexes in the range [{@code from}, {@code to}] such that all the values with indexes in the range [{@code from}, {@code required}) are less than or equal to the value with index {@code required}, and all the values with indexes in the range ({@code required}, {@code to}] are greater than or equal to that value. Therefore, the value at {@code required} is the value which would appear at that index in the sorted dataset.
1706 Appends all values from {@code stream}, in order, to the end of the values the built {@link ImmutableDoubleArray} will contain. @since 22.0 (but only since 33.4.0 in the Android flavor)
1707 Appends {@code values}, in order, to the end of the values the built {@link ImmutableDoubleArray} will contain.
1708 Appends all values from {@code stream}, in order, to the end of the values the built {@link ImmutableIntArray} will contain. @since 22.0 (but only since 33.4.0 in the Android flavor)
1709 Appends {@code values}, in order, to the end of the values the built {@link ImmutableIntArray} will contain.
1710 Appends all values from {@code stream}, in order, to the end of the values the built {@link ImmutableLongArray} will contain. @since 22.0 (but only since 33.4.0 in the Android flavor)
1711 Reconstitutes the instance from a stream (that is, deserializes it).
1712 Appends {@code values}, in order, to the end of the values the built {@link ImmutableLongArray} will contain.
1713 Parses the specified string as a signed decimal integer value. The ASCII character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign. <p>Unlike {@link Integer#parseInt(String)}, this method returns {@code null} instead of throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns {@code null} if non-ASCII digits are present in the string. <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link Integer#parseInt(String)} accepts them. @param string the string representation of an integer value @return the integer value represented by {@code string}, or {@code null} if {@code string} has a length of zero or cannot be parsed as an integer value @throws NullPointerException if {@code string} is {@code null} @since 11.0
1714 Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as an unsigned {@code int} value. @throws NumberFormatException if the string does not contain a parsable unsigned {@code int} value
1715 Returns the result of dividing this by {@code val}. @since 14.0
1716 Returns a string representation of {@code x} for the given radix, where {@code x} is treated as unsigned. <p><b>Java 8+ users:</b> use {@link Long#toUnsignedString(long, int)} instead. @param x the value to convert to a string. @param radix the radix to use while working with {@code x} @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}.
1717 Returns a * b mod m.
1718 Returns a^2 mod m.
1719 Returns this modulo {@code val}. @since 14.0
1720 Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as an unsigned {@code long} value. @throws NumberFormatException if the string does not contain a parsable unsigned {@code long} value
1721 A sensible definition of {@link #equals(Object)} in terms of {@link #getKey()} and {@link #getValue()}. If you override either of these methods, you may wish to override {@link #equals(Object)} to forward to this implementation. @since 7.0
1722 A sensible definition of {@link #hashCode()} in terms of {@link #getKey()} and {@link #getValue()}. If you override either of these methods, you may wish to override {@link #hashCode()} to forward to this implementation. @since 7.0
1723 A sensible definition of {@link #toString} in terms of {@link #getKey} and {@link #getValue}. If you override either of these methods, you may wish to override {@link #equals} to forward to this implementation. @since 7.0
1724 Returns true if this type is known to be an array type, such as {@code int[]}, {@code T[]}, {@code <? extends Map<String, Integer>[]>} etc.
1725 Creates an {@link ExecutorService} whose {@code submit} and {@code invokeAll} methods submit {@link ListenableFutureTask} instances to the given delegate executor. Those methods, as well as {@code execute} and {@code invokeAny}, are implemented in terms of calls to {@code delegate.execute}. All other methods are forwarded unchanged to the delegate. This implies that the returned {@code ListeningExecutorService} never calls the delegate's {@code submit}, {@code invokeAll}, and {@code invokeAny} methods, so any special handling of tasks must be implemented in the delegate's {@code execute} method or by wrapping the returned {@code ListeningExecutorService}. <p>If the delegate executor was already an instance of {@code ListeningExecutorService}, it is returned untouched, and the rest of this documentation does not apply. @since 10.0
1726 Creates a {@link ScheduledExecutorService} whose {@code submit} and {@code invokeAll} methods submit {@link ListenableFutureTask} instances to the given delegate executor. Those methods, as well as {@code execute} and {@code invokeAny}, are implemented in terms of calls to {@code delegate.execute}. All other methods are forwarded unchanged to the delegate. This implies that the returned {@code ListeningScheduledExecutorService} never calls the delegate's {@code submit}, {@code invokeAll}, and {@code invokeAny} methods, so any special handling of tasks must be implemented in the delegate's {@code execute} method or by wrapping the returned {@code ListeningScheduledExecutorService}. <p>If the delegate executor was already an instance of {@code ListeningScheduledExecutorService}, it is returned untouched, and the rest of this documentation does not apply. @since 10.0
1727 An implementation of {@link ExecutorService#invokeAny} for {@link ListeningExecutorService} implementations.
1728 Creates the {@link ListenableFuture} which will return the result of calling {@link AsyncCallable#call} in {@code combiner} when all futures complete, using the specified {@code executor}. <p>If the combiner throws a {@code CancellationException}, the returned future will be cancelled. <p>If the combiner throws an {@code ExecutionException}, the cause of the thrown {@code ExecutionException} will be extracted and returned as the cause of the new {@code ExecutionException} that gets thrown by the returned combined future. <p>Canceling this future will attempt to cancel all the component futures. @return a future whose result is based on {@code combiner} (or based on the input futures passed to {@code whenAllSucceed}, if that is the method you used to create this {@code FutureCombiner}). Even if you don't care about the value of the future, you should typically check whether it failed: See <a href="https://errorprone.info/bugpattern/FutureReturnValueIgnored">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.
1729 Creates the {@link ListenableFuture} which will return the result of calling {@link Callable#call} in {@code combiner} when all futures complete, using the specified {@code executor}. <p>If the combiner throws a {@code CancellationException}, the returned future will be cancelled. <p>If the combiner throws an {@code ExecutionException}, the cause of the thrown {@code ExecutionException} will be extracted and returned as the cause of the new {@code ExecutionException} that gets thrown by the returned combined future. <p>Canceling this future will attempt to cancel all the component futures. @return a future whose result is based on {@code combiner} (or based on the input futures passed to {@code whenAllSucceed}, if that is the method you used to create this {@code FutureCombiner}). Even if you don't care about the value of the future, you should typically check whether it failed: See <a href="https://errorprone.info/bugpattern/FutureReturnValueIgnored">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.
1730 Checks the acquisition-ordering between {@code this}, which is about to be acquired, and the specified {@code acquiredLock}. <p>When this method returns, the {@code acquiredLock} should be in either the {@code preAcquireLocks} map, for the case in which it is safe to acquire {@code this} after the {@code acquiredLock}, or in the {@code disallowedPriorLocks} map, in which case it is not safe.
1731 Computes or retrieves a replacement value corresponding to an already-cached {@code key}. This method is called when an existing cache entry is refreshed by {@link CacheBuilder#refreshAfterWrite}, or through a call to {@link LoadingCache#refresh}. <p>This implementation synchronously delegates to {@link #load}. It is recommended that it be overridden with an asynchronous implementation when using {@link CacheBuilder#refreshAfterWrite}. <p><b>Note:</b> <i>all exceptions thrown by this method will be logged and then swallowed</i>. @param key the non-null key whose value should be loaded @param oldValue the non-null old value corresponding to {@code key} @return the future new value associated with {@code key}; <b>must not be null, must not return null</b> @throws Exception if unable to reload the result @throws InterruptedException if this method is interrupted. {@code InterruptedException} is treated like any other {@code Exception} in all respects except that, when it is caught, the thread's interrupt status is set @since 11.0
1732 Returns a future that finishes when this step does. Calling {@code get()} on the returned future returns {@code null} if the step is successful or throws the same exception that would be thrown by calling {@code finishToFuture().get()} if this were the last step. Calling {@code cancel()} on the returned future has no effect on the {@code ClosingFuture} pipeline. <p>{@code statusFuture} differs from most methods on {@code ClosingFuture}: You can make calls to {@code statusFuture} <i>in addition to</i> the call you make to {@link #finishToFuture()} or a derivation method <i>on the same instance</i>. This is important because calling {@code statusFuture} alone does not provide a way to close the pipeline.
1733 Enqueues a task to run when the previous task (if any) completes. <p>Cancellation does not propagate from the output future to the future returned from {@code callable} or a callable that has begun to execute, but if the output future is cancelled before {@link AsyncCallable#call()} is invoked, {@link AsyncCallable#call()} will not be invoked.
1734 Implementation of {@link Futures#getChecked(Future, Class)}.
1735 Implementation of {@link Futures#getChecked(Future, Class, long, TimeUnit)}.
1736 Leaves this monitor. May be called only by a thread currently occupying this monitor.
1737 Caller should check before calling that guard is not satisfied.
1738 Returns a future that delegates to another but will finish early (via a {@link TimeoutException} wrapped in an {@link ExecutionException}) if the specified duration expires. <p>The delegate future is interrupted and cancelled if it times out. @param delegate The future to delegate to. @param time when to time out the future @param unit the time unit of the time parameter @param scheduledExecutor The executor service to enforce the timeout. @since 19.0
1739 Schedules {@code callable} on the specified {@code executor}, returning a {@code Future}. @throws RejectedExecutionException if the task cannot be scheduled for execution @since 28.0 (but only since 33.4.0 in the Android flavor)
1740 Returns an optional enum constant for the given type, using {@link Enum#valueOf}. If the constant does not exist, {@link Optional#absent} is returned. A common use case is for parsing user input or falling back to a default enum constant. For example, {@code Enums.getIfPresent(Country.class, countryInput).or(Country.DEFAULT);} @since 12.0
1741 Returns an {@link Optional} containing the first element in {@code iterable} that satisfies the given predicate, if such an element exists. <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null} is matched in {@code iterable}, a NullPointerException will be thrown. <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()} @since 11.0
1742 Returns {@code true} if any element in this fluent iterable satisfies the predicate. <p><b>{@code Stream} equivalent:</b> {@link Stream#anyMatch} (same).
1743 Helper method for {@link #precomputedInternal} that doesn't test if the negation is cheaper.
1744 Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link RuntimeException}, {@link Error}, {@code declaredType1}, or {@code declaredType2}. @param throwable the Throwable to possibly propagate @param declaredType1 any checked exception type declared by the calling method @param declaredType2 any other checked exception type declared by the calling method @deprecated Use a combination of two calls to {@link #throwIfInstanceOf} and one call to {@link #throwIfUnchecked}, which togther provide the same behavior except that they reject {@code null}.
1745 Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code IOException}, {@code RuntimeException} or {@code Error}. Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b> Be sure to declare all of the checked exception types your try block can throw when calling an overload of this method so as to avoid losing the original exception type. <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e);} to ensure the compiler knows that it will throw. @return this method does not return; it always throws @throws IOException when the given throwable is an IOException
1746 Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code IOException}, {@code RuntimeException}, {@code Error} or a checked exception of the given type. Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b> Be sure to declare all of the checked exception types your try block can throw when calling an overload of this method so as to avoid losing the original exception type. <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e, ...);} to ensure the compiler knows that it will throw. @return this method does not return; it always throws @throws IOException when the given throwable is an IOException @throws X when the given throwable is of the declared type X
1747 Closes all {@code Closeable} instances that have been added to this {@code Closer}. If an exception was thrown in the try block and passed to one of the {@code exceptionThrown} methods, any exceptions thrown when attempting to close a closeable will be suppressed. Otherwise, the <i>first</i> exception to be thrown from an attempt to close a closeable will be thrown and any additional exceptions that are thrown after that will be suppressed.
1748 Creates a thread using {@link #platformThreadFactory}, and sets its name to {@code name} unless changing the name is forbidden by the security manager.
1749 Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a key that doesn't satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 14.0
1750 Returns a multimap containing the mappings in {@code unfiltered} that satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a key/value pair that doesn't satisfy the predicate, multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. @since 14.0
1751 @since 18.0
1752 Returns an iterator over the merged contents of all given {@code iterators}, traversing every element of the input iterators. Equivalent entries will not be de-duplicated. <p>Callers must ensure that the source {@code iterators} are in non-descending order as this method does not sort its input. <p>For any equivalent elements across all {@code iterators}, it is undefined which element is returned first. @since 11.0
1753 Copies an iterable's elements into an array. @param iterable the iterable to copy @return a newly-allocated array into which all the elements of the iterable have been copied
1754 {@inheritDoc} <p>If any entries for the specified {@code key} already exist in the multimap, their values are changed in-place without affecting the iteration order. <p>The returned list is immutable and implements {@link java.util.RandomAccess}.
1755 {@inheritDoc} <p>The returned list is immutable and implements {@link java.util.RandomAccess}.
1756 Creates a {@code CopyOnWriteArrayList} instance containing the given elements. @param elements the elements that the list should contain, in order @return a new {@code CopyOnWriteArrayList} containing those elements @since 12.0
1757 Creates a {@code CopyOnWriteArraySet} instance containing the given elements. @param elements the elements that the set should contain, in order @return a new {@code CopyOnWriteArraySet} containing those elements @since 12.0
1758 Searches the specified list for the specified object using the binary search algorithm. The list must be sorted into ascending order according to the specified comparator (as by the {@link Collections#sort(List, Comparator) Collections.sort(List, Comparator)} method), prior to making this call. If it is not sorted, the results are undefined. <p>If there are elements in the list which compare as equal to the key, the choice of {@link KeyPresentBehavior} decides which index is returned. If no elements compare as equal to the key, the choice of {@link KeyAbsentBehavior} decides which index is returned. <p>This method runs in log(n) time on random-access lists, which offer near-constant-time access to each list element. @param list the list to be searched. @param key the value to be searched for. @param comparator the comparator by which the list is ordered. @param presentBehavior the specification for what to do if at least one element of the list compares as equal to the key. @param absentBehavior the specification for what to do if no elements of the list compare as equal to the key. @return the index determined by the {@code KeyPresentBehavior}, if the key is in the list; otherwise the index determined by the {@code KeyAbsentBehavior}.
1759 Returns the stripes that correspond to the passed objects, in ascending (as per {@link #getAt(int)}) order. Thus, threads that use the stripes in the order returned by this method are guaranteed to not deadlock each other. <p>It should be noted that using a {@code Striped<L>} with relatively few stripes, and {@code bulkGet(keys)} with a relative large number of keys can cause an excessive number of shared stripes (much like the birthday paradox, where much fewer than anticipated birthdays are needed for a pair of them to match). Please consider carefully the implications of the number of stripes, the intended concurrency level, and the typical number of keys used in a {@code bulkGet(keys)} operation. See <a href="http://www.mathpages.com/home/kmath199.htm">Balls in Bins model</a> for mathematical formulas that can be used to estimate the probability of collisions. @param keys arbitrary non-null keys @return the stripes corresponding to the objects (one per each object, derived by delegating to {@link #get(Object)}; may contain duplicates), in an increasing index order.
1760 Returns a string representation of this network.
1761 Returns a string representation of this graph.
1762 Returns a view of a navigable map whose values are derived from the original navigable map's entries. In contrast to {@link #transformValues}, this method's entry-transformation logic may depend on the key as well as the value. <p>All other properties of the transformed map, such as iteration order, are left intact. For example, the code: {@snippet : NavigableMap<String, Boolean> options = Maps.newTreeMap(); options.put("verbose", false); options.put("sort", true); EntryTransformer<String, Boolean, String> flagPrefixer = new EntryTransformer<String, Boolean, String>() { public String transformEntry(String key, Boolean value) { return value ? key : ("yes" + key); } }; NavigableMap<String, String> transformed = LabsMaps.transformNavigableEntries(options, flagPrefixer); System.out.println(transformed); } ... prints {@code {sort=yessort, verbose=verbose}}. <p>Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. <p>It's acceptable for the underlying map to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed map might contain null values if the transformer sometimes gives a null result. <p>The returned map is not thread-safe or serializable, even if the underlying map is. <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the transformer will be applied many times for bulk operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing. <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the transformed map. @since 13.0
1763 Returns a view of a sorted map where each value is transformed by a function. All other properties of the map, such as iteration order, are left intact. For example, the code: {@snippet : SortedMap<String, Integer> map = ImmutableSortedMap.of("a", 4, "b", 9); Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in); SortedMap<String, Double> transformed = Maps.transformValues(map, sqrt); System.out.println(transformed); } ... prints {@code {a=2.0, b=3.0}}. <p>Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. <p>It's acceptable for the underlying map to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed map might contain null values, if the function sometimes gives a null result. <p>The returned map is not thread-safe or serializable, even if the underlying map is. <p>The function is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the function will be applied many times for bulk operations like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing. @since 11.0
1764 {@inheritDoc} @throws IllegalArgumentException if the call would result in more than {@link Integer#MAX_VALUE} occurrences of {@code element} in this multiset.
1765 {@inheritDoc} @throws IllegalArgumentException if the call would result in more than {@link Integer#MAX_VALUE} occurrences of {@code element} in this multiset.
1766 Returns a view of a {@code ListMultimap} where each value is transformed by a function. All other properties of the multimap, such as iteration order, are left intact. For example, the code: {@snippet : ListMultimap<String, Integer> multimap = ImmutableListMultimap.of("a", 4, "a", 16, "b", 9); Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in); ListMultimap<String, Double> transformed = Multimaps.transformValues(map, sqrt); System.out.println(transformed); } ... prints {@code {a=[2.0, 4.0], b=[3.0]}}. <p>Changes in the underlying multimap are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying multimap. <p>It's acceptable for the underlying multimap to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed multimap might contain null values, if the function sometimes gives a null result. <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap is. <p>The function is applied lazily, invoked when needed. This is necessary for the returned multimap to be a view, but it means that the function will be applied many times for bulk operations like {@link Multimap#containsValue} and {@code Multimap.toString()}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned multimap doesn't need to be a view, copy the returned multimap into a new multimap of your choosing. @since 7.0
1767 {@inheritDoc} <p>This implementation is highly efficient when {@code elementsToAdd} is itself a {@link Multiset}.
1768 A sensible definition of {@link #addAll(Collection)} in terms of {@link #add(Object)} and {@link #add(Object, int)}. If you override either of these methods, you may wish to override {@link #addAll(Collection)} to forward to this implementation. @since 7.0
1769 Returns a synchronized (thread-safe) multimap backed by the specified multimap. In order to guarantee serial access, it is critical that <b>all</b> access to the backing multimap is accomplished through the returned multimap. <p>It is imperative that the user manually synchronize on the returned multimap when accessing any of its collection views: {@snippet : Multimap<K, V> multimap = Multimaps.synchronizedMultimap( HashMultimap.<K, V>create()); ... Collection<V> values = multimap.get(key); // Needn't be in synchronized block ... synchronized (multimap) { // Synchronizing on multimap, not values! Iterator<V> i = values.iterator(); // Must be in synchronized block while (i.hasNext()) { foo(i.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>Note that the generated multimap's {@link Multimap#removeAll} and {@link Multimap#replaceValues} methods return collections that aren't synchronized. <p>The returned multimap will be serializable if the specified multimap is serializable. @param multimap the multimap to be wrapped in a synchronized view @return a synchronized view of the specified multimap
1770 Returns a synchronized (thread-safe) table backed by the specified table. In order to guarantee serial access, it is critical that <b>all</b> access to the backing table is accomplished through the returned table. <p>It is imperative that the user manually synchronize on the returned table when accessing any of its collection views: {@snippet : Table<R, C, V> table = Tables.synchronizedTable(HashBasedTable.<R, C, V>create()); ... Map<C, V> row = table.row(rowKey); // Needn't be in synchronized block ... synchronized (table) { // Synchronizing on table, not row! Iterator<Entry<C, V>> i = row.entrySet().iterator(); // Must be in synchronized block while (i.hasNext()) { foo(i.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>The returned table will be serializable if the specified table is serializable. @param table the table to be wrapped in a synchronized view @return a synchronized view of the specified table @since 22.0
1771 Returns the escaped form of a given literal string. <p>If you are escaping input in arbitrary successive chunks, then it is not generally safe to use this method. If an input string ends with an unmatched high surrogate character, then this method will throw {@link IllegalArgumentException}. You should ensure your input is valid <a href="http://en.wikipedia.org/wiki/UTF-16">UTF-16</a> before calling this method. <p><b>Note:</b> When implementing an escaper it is a good idea to override this method for efficiency by inlining the implementation of {@link #nextEscapeIndex(CharSequence, int, int)} directly. Doing this for {@link com.google.common.net.PercentEscaper} more than doubled the performance for unescaped strings (as measured by {@code CharEscapersBenchmark}). @param string the literal string to be escaped @return the escaped form of {@code string} @throws NullPointerException if {@code string} is null @throws IllegalArgumentException if invalid surrogate characters are encountered
1772 Reads all characters from a {@link Readable} object into a new {@link StringBuilder} instance. Does not close the {@code Readable}. @param r the object to read from @return a {@link StringBuilder} containing all the characters @throws IOException if an I/O error occurs
1773 Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the primary input fails with the given {@code exceptionType}, from the result provided by the {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so if the primary input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an exception is thrown, this exception is used as the result of the output {@code Future}. <p>Usage example: {@snippet : ListenableFuture<Integer> fetchCounterFuture = ...; // Falling back to a zero counter in case an exception happens when // processing the RPC to fetch counters. ListenableFuture<Integer> faultTolerantFuture = Futures.catching( fetchCounterFuture, FetchException.class, x -> 0, directExecutor()); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the warnings the {@link MoreExecutors#directExecutor} documentation. @param input the primary input {@code Future} @param exceptionType the exception type that triggers use of {@code fallback}. The exception type is matched against the input's exception. "The input's exception" means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a different kind of exception, that exception itself. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding {@code Throwable.class} in particular. @param fallback the {@link Function} to be called if {@code input} fails with the expected exception type. The function's argument is the input's exception. "The input's exception" means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a different kind of exception, that exception itself. @param executor the executor that runs {@code fallback} if {@code input} fails @since 19.0
1774 {@inheritDoc} <p>If a cancellation attempt succeeds on a {@code Future} that had previously been {@linkplain #setFuture set asynchronously}, then the cancellation will also be propagated to the delegate {@code Future} that was supplied in the {@code setFuture} call. <p>Rather than override this method to perform additional cancellation work or cleanup, subclasses should override {@link #afterDone}, consulting {@link #isCancelled} and {@link #wasInterrupted} as necessary. This ensures that the work is done even if the future is cancelled without a call to {@code cancel}, such as by calling {@code setFuture(cancelledFuture)}. <p>Beware of completing a future while holding a lock. Its listeners may do slow work or acquire other locks, risking deadlocks.
1775 Sets the result of this {@code Future} unless this {@code Future} has already been cancelled or set (including {@linkplain #setFuture set asynchronously}). When a call to this method returns, the {@code Future} is guaranteed to be {@linkplain #isDone done} <b>only if</b> the call was accepted (in which case it returns {@code true}). If it returns {@code false}, the {@code Future} may have previously been set asynchronously, in which case its result may not be known yet. That result, though not yet known, cannot be overridden by a call to a {@code set*} method, only by a call to {@link #cancel}. <p>Beware of completing a future while holding a lock. Its listeners may do slow work or acquire other locks, risking deadlocks. @param value the value to be used as the result @return true if the attempt was accepted, completing the {@code Future}
1776 Sets the failed result of this {@code Future} unless this {@code Future} has already been cancelled or set (including {@linkplain #setFuture set asynchronously}). When a call to this method returns, the {@code Future} is guaranteed to be {@linkplain #isDone done} <b>only if</b> the call was accepted (in which case it returns {@code true}). If it returns {@code false}, the {@code Future} may have previously been set asynchronously, in which case its result may not be known yet. That result, though not yet known, cannot be overridden by a call to a {@code set*} method, only by a call to {@link #cancel}. <p>Beware of completing a future while holding a lock. Its listeners may do slow work or acquire other locks, risking deadlocks. @param throwable the exception to be used as the failed result @return true if the attempt was accepted, completing the {@code Future}
1777 Sets the result of this {@code Future} to match the supplied input {@code Future} once the supplied {@code Future} is done, unless this {@code Future} has already been cancelled or set (including "set asynchronously," defined below). <p>If the supplied future is {@linkplain #isDone done} when this method is called and the call is accepted, then this future is guaranteed to have been completed with the supplied future by the time this method returns. If the supplied future is not done and the call is accepted, then the future will be <i>set asynchronously</i>. Note that such a result, though not yet known, cannot be overridden by a call to a {@code set*} method, only by a call to {@link #cancel}. <p>If the call {@code setFuture(delegate)} is accepted and this {@code Future} is later cancelled, cancellation will be propagated to {@code delegate}. Additionally, any call to {@code setFuture} after any cancellation will propagate cancellation to the supplied {@code Future}. <p>Note that, even if the supplied future is cancelled and it causes this future to complete, it will never trigger interruption behavior. In particular, it will not cause this future to invoke the {@link #interruptTask} method, and the {@link #wasInterrupted} method will not return {@code true}. <p>Beware of completing a future while holding a lock. Its listeners may do slow work or acquire other locks, risking deadlocks. @param future the future to delegate to @return true if the attempt was accepted, indicating that the {@code Future} was not previously cancelled or set. @since 19.0
1778 Returns a new {@code Future} whose result is derived from the result of the given {@code Future}. If {@code input} fails, the returned {@code Future} fails with the same exception (and the function is not invoked). Example usage: {@snippet : ListenableFuture<QueryResult> queryFuture = ...; ListenableFuture<List<Row>> rowsFuture = transform(queryFuture, QueryResult::getRows, executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the warnings the {@link MoreExecutors#directExecutor} documentation. <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel the input, and if the input is cancelled, the returned {@code Future} will receive a callback in which it will attempt to cancel itself. <p>An example use of this method is to convert a serializable object returned from an RPC into a POJO. @param input The future to transform @param function A Function to transform the results of the provided future to the results of the returned future. @param executor Executor to run the function in. @return A future that holds result of the transformation. @since 9.0 (in 2.0 as {@code compose})
1779 Increments by one the value currently associated with {@code key}, and returns the new value.
1780 Decrements by one the value currently associated with {@code key}, and returns the new value.
1781 Increments by one the value currently associated with {@code key}, and returns the old value.
1782 Decrements by one the value currently associated with {@code key}, and returns the old value.
1783 Creates an {@code AtomicLongMap} with the same mappings as the specified {@code Map}.
1784 Creates a new instance with the specified edge directionality.
1785 Creates a new instance with the specified edge directionality.
1786 Creates a new instance with the specified edge directionality.
1787 @since 13.0
1788 @deprecated Provided to satisfy the {@code Function} interface; use {@link #convert} instead.
1789 Creates an empty {@code CompactHashMap} instance.
1790 Creates a {@code CompactHashMap} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without growth. @param expectedSize the number of elements you expect to add to the returned set @return a new, empty {@code CompactHashMap} with enough capacity to hold {@code expectedSize} elements without resizing @throws IllegalArgumentException if {@code expectedSize} is negative
1791 Creates an empty {@code CompactHashSet} instance.
1792 Creates a {@code CompactHashSet} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without growth. @param expectedSize the number of elements you expect to add to the returned set @return a new, empty {@code CompactHashSet} with enough capacity to hold {@code expectedSize} elements without resizing @throws IllegalArgumentException if {@code expectedSize} is negative
1793 Creates a new {@code ListMultimap} that uses the provided map and factory. It can generate a multimap based on arbitrary {@link Map} and {@link List} classes. Most users should prefer {@link MultimapBuilder}, though a small number of users will need this method to cover map or collection types that {@link MultimapBuilder} does not support. <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code toString} methods for the multimap and its returned views. The multimap's {@code get}, {@code removeAll}, and {@code replaceValues} methods return {@code RandomAccess} lists if the factory does. However, the multimap's {@code get} method returns instances of a different class than does {@code factory.get()}. <p>The multimap is serializable if {@code map}, {@code factory}, the lists generated by {@code factory}, and the multimap contents are all serializable. <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if {@code map} and the instances generated by {@code factory} are. Concurrent read operations will work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link #synchronizedListMultimap}. <p>Call this method only when the simpler methods {@link ArrayListMultimap#create()} and {@link LinkedListMultimap#create()} won't suffice. <p>Note: the multimap assumes complete ownership over of {@code map} and the lists returned by {@code factory}. Those objects should not be manually updated, they should be empty when provided, and they should not use soft, weak, or phantom references. @param map place to store the mapping from each key to its corresponding values @param factory supplier of new, empty lists that will each hold all values for a given key @throws IllegalArgumentException if {@code map} is not empty
1794 Creates a new {@code SetMultimap} that uses the provided map and factory. It can generate a multimap based on arbitrary {@link Map} and {@link Set} classes. Most users should prefer {@link MultimapBuilder}, though a small number of users will need this method to cover map or collection types that {@link MultimapBuilder} does not support. <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code toString} methods for the multimap and its returned views. However, the multimap's {@code get} method returns instances of a different class than {@code factory.get()} does. <p>The multimap is serializable if {@code map}, {@code factory}, the sets generated by {@code factory}, and the multimap contents are all serializable. <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if {@code map} and the instances generated by {@code factory} are. Concurrent read operations will work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link #synchronizedSetMultimap}. <p>Call this method only when the simpler methods {@link HashMultimap#create()}, {@link LinkedHashMultimap#create()}, {@link TreeMultimap#create()}, and {@link TreeMultimap#create(Comparator, Comparator)} won't suffice. <p>Note: the multimap assumes complete ownership over of {@code map} and the sets returned by {@code factory}. Those objects should not be manually updated and they should not use soft, weak, or phantom references. @param map place to store the mapping from each key to its corresponding values @param factory supplier of new, empty sets that will each hold all values for a given key @throws IllegalArgumentException if {@code map} is not empty
1795 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableMultiset#builder}.
1796 Returns a converter whose {@code convert} method applies {@code secondConverter} to the result of this converter. Its {@code reverse} method applies the converters in reverse order. <p>The returned converter is serializable if {@code this} converter and {@code secondConverter} are.
1797 Appends the string representation of each of {@code parts}, using the previously configured separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.
1798 Returns a string containing the string representation of each of {@code parts}, using the previously configured separator between each.
1799 Returns a fresh {@link MapMakerInternalMap} as specified by the given {@code builder}.
1800 Returns a fresh {@link MapMakerInternalMap} with {@link MapMaker.Dummy} values but otherwise as specified by the given {@code builder}. The returned {@link MapMakerInternalMap} will be optimized to saved memory. Since {@link MapMaker.Dummy} is a singleton, we don't need to store any values at all. Because of this optimization, {@code build.getValueStrength()} must be {@link Strength#STRONG}. <p>This method is intended to only be used by the internal implementation of {@link Interners}, since a map of dummy values is the exact use case there.
1801 Returns a fluent iterable that combines several iterables. The returned iterable has an iterator that traverses the elements of each iterable in {@code inputs}. The input iterators are not polled until necessary. <p>The returned iterable's iterator supports {@code remove()} when the corresponding input iterator supports it. <p><b>{@code Stream} equivalent:</b> to concatenate an arbitrary number of streams, use {@code Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}. @throws NullPointerException if any of the provided iterables is {@code null} @since 20.0
1802 Returns the element at the specified position in this fluent iterable. <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (but note that this throws different exception types, and throws an exception if {@code null} would be returned). @param position position of the element to return @return the element at the specified position in this fluent iterable @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to the size of this fluent iterable
1803 Acquires a single permit from this {@code RateLimiter}, blocking until the request can be granted. Tells the amount of time slept, if any. <p>This method is equivalent to {@code acquire(1)}. @return time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited @since 16.0 (present in 13.0 with {@code void} return type})
1804 Enters this monitor. Blocks at most the given time. @return whether the monitor was entered @since 28.0 (but only since 33.4.0 in the Android flavor)
1805 Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the lock, but does not wait for the guard to be satisfied. @return whether the monitor was entered, which guarantees that the guard is now satisfied
1806 Constructs a new {@code CacheBuilder} instance with the settings specified in {@code spec}. @since 12.0
1807 Returns a new thread-safe interner which retains a strong reference to each instance it has interned, thus preventing these instances from being garbage-collected. If this retention is acceptable, this implementation may perform better than {@link #newWeakInterner}.
1808 Returns a new thread-safe interner which retains a weak reference to each instance it has interned, and so does not prevent these instances from being garbage-collected. This most likely does not perform as well as {@link #newStrongInterner}, but is the best alternative when the memory usage of that implementation is unacceptable.
1809 {@inheritDoc} @throws IllegalArgumentException if {@code rowKey} is not in {@link #rowKeySet()} or {@code columnKey} is not in {@link #columnKeySet()}.
1810 Associates the value {@code null} with the specified keys, assuming both keys are valid. If either key is null or isn't among the keys provided during construction, this method has no effect. <p>This method is equivalent to {@code put(rowKey, columnKey, null)} when both provided keys are valid. @param rowKey row key of mapping to be erased @param columnKey column key of mapping to be erased @return the value previously associated with the keys, or {@code null} if no mapping existed for the keys
1811 Returns {@code true} if {@code object} is an {@code ImmutableDoubleArray} containing the same values as this one, in the same order. Values are compared as if by {@link Double#equals}.
1812 Returns {@code true} if {@code object} is an {@code ImmutableIntArray} containing the same values as this one, in the same order.
1813 Returns {@code true} if {@code object} is an {@code ImmutableLongArray} containing the same values as this one, in the same order.
1814 Enum values can override for performance reasons.
1815 Returns the index of the first matching BMP character in a character sequence, or {@code -1} if no matching character is present. <p>The default implementation iterates over the sequence in forward order calling {@link #matches} for each character. @param sequence the character sequence to examine from the beginning @return an index, or {@code -1} if no character matches
1816 Constructs an iterator across a sequence of the given size whose initial position is 0. That is, the first call to {@link #next()} will return the first element (or throw {@link NoSuchElementException} if {@code size} is zero). @throws IllegalArgumentException if {@code size} is negative
1817 Returns the Teredo information embedded in a Teredo address. @param ip {@link Inet6Address} to be examined for embedded Teredo information @return extracted {@code TeredoInfo} @throws IllegalArgumentException if the argument is not a valid IPv6 Teredo address
1818 Returns {@code true} if {@code bytes} is a <i>well-formed</i> UTF-8 byte sequence according to Unicode 6.0. Note that this is a stronger criterion than simply whether the bytes can be decoded. For example, some versions of the JDK decoder will accept "non-shortest form" byte sequences, but encoding never reproduces these. Such byte sequences are <i>not</i> considered well-formed. <p>This method returns {@code true} if and only if {@code Arrays.equals(bytes, new String(bytes, UTF_8).getBytes(UTF_8))} does, but is more efficient in both time and space.
1819 Encodes the specified byte array, and returns the encoded {@code String}.
1820 Attempts to read {@code len} bytes from the stream into the given array starting at {@code off}, with the same behavior as {@link DataInput#readFully(byte[], int, int)}. Does not close the stream. @param in the input stream to read from. @param b the buffer into which the data is read. @param off an int specifying the offset into the data. @param len an int specifying the number of bytes to read. @throws EOFException if this stream reaches the end before reading all the bytes. @throws IOException if an I/O error occurs.
1821 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Booleans.asList(array))}, but is likely to be more efficient. @since 23.1
1822 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Booleans.asList(array).subList(fromIndex, toIndex), distance)}, but is somewhat faster. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
1823 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Bytes.asList(array))}, but is likely to be more efficient. @since 23.1
1824 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Bytes.asList(array).subList(fromIndex, toIndex), distance)}, but is somewhat faster. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
1825 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. @since 23.1
1826 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. @since 23.1
1827 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Chars.asList(array))}, but is likely to be more efficient. @since 23.1
1828 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Chars.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
1829 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. <p>Note that this method uses the total order imposed by {@link Double#compare}, which treats all NaN values as equal and 0.0 as greater than -0.0. @since 23.1
1830 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Doubles.asList(array))}, but is likely to be more efficient. @since 23.1
1831 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Bytes.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
1832 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. <p>Note that this method uses the total order imposed by {@link Float#compare}, which treats all NaN values as equal and 0.0 as greater than -0.0. @since 23.1
1833 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Floats.asList(array))}, but is likely to be more efficient. @since 23.1
1834 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Floats.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
1835 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. @since 23.1
1836 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Ints.asList(array))}, but is likely to be more efficient. @since 23.1
1837 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Ints.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
1838 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. @since 23.1
1839 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Longs.asList(array))}, but is likely to be more efficient. @since 23.1
1840 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Longs.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
1841 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. @since 23.1
1842 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Shorts.asList(array))}, but is likely to be more efficient. @since 23.1
1843 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Shorts.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
1844 Sorts the array, treating its elements as unsigned bytes. @since 23.1
1845 Sorts the elements of {@code array} in descending order, interpreting them as unsigned 8-bit integers. @since 23.1
1846 Sorts the array, treating its elements as unsigned 32-bit integers. @since 23.1
1847 Sorts the elements of {@code array} in descending order, interpreting them as unsigned 32-bit integers. @since 23.1
1848 Sorts the array, treating its elements as unsigned 64-bit integers. @since 23.1
1849 Sorts the elements of {@code array} in descending order, interpreting them as unsigned 64-bit integers. @since 23.1
1850 Returns a splitter that uses the given fixed string as a separator. For example, {@code Splitter.on(", ").split("foo, bar,baz")} returns an iterable containing {@code ["foo", "bar,baz"]}. @param separator the literal, nonempty string to recognize as a separator @return a splitter, with default settings, that recognizes that separator
1851 Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries into keys and values using the specified separator. @since 14.0
1852 Starts the Finalizer thread. FinalizableReferenceQueue calls this method reflectively. @param finalizableReferenceClass FinalizableReference.class. @param queue a reference queue that the thread will poll. @param frqReference a phantom reference to the FinalizableReferenceQueue, which will be queued either when the FinalizableReferenceQueue is no longer referenced anywhere, or when its close() method is called.
1853 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
1854 Returns a new {@link Builder}.
1855 Returns an unmodifiable view of the specified multiset. Query operations on the returned multiset "read through" to the specified multiset, and attempts to modify the returned multiset result in an {@link UnsupportedOperationException}. <p>The returned multiset will be serializable if the specified multiset is serializable. @param multiset the multiset for which an unmodifiable view is to be generated @return an unmodifiable view of the multiset
1856 Creates and returns a new evicting queue that will hold up to {@code maxSize} elements. <p>When {@code maxSize} is zero, elements will be evicted immediately after being added to the queue.
1857 Constructor for use by subclasses.
1858 Constructor for use by subclasses.
1859 Constructor for use by subclasses.
1860 Returns an unmodifiable view of the specified set of entries. The {@link Entry#setValue} operation throws an {@link UnsupportedOperationException}, as do any operations that would modify the returned set. @param entrySet the entries for which to return an unmodifiable view @return an unmodifiable view of the entries
1861 Returns an unmodifiable view of the specified navigable map. Query operations on the returned map read through to the specified map, and attempts to modify the returned map, whether direct or via its views, result in an {@code UnsupportedOperationException}. <p>The returned navigable map will be serializable if the specified navigable map is serializable. <p>This method's signature will not permit you to convert a {@code NavigableMap<? extends K, V>} to a {@code NavigableMap<K, V>}. If it permitted this, the returned map's {@code comparator()} method might return a {@code Comparator<? extends K>}, which works only on a particular subtype of {@code K}, but promise that it's a {@code Comparator<? super K>}, which must work on any type of {@code K}. @param map the navigable map for which an unmodifiable view is to be returned @return an unmodifiable view of the specified navigable map @since 12.0
1862 Returns an unmodifiable view of the specified {@code ListMultimap}. Query operations on the returned multimap "read through" to the specified multimap, and attempts to modify the returned multimap, either directly or through the multimap's views, result in an {@code UnsupportedOperationException}. <p>The returned multimap will be serializable if the specified multimap is serializable. @param delegate the multimap for which an unmodifiable view is to be returned @return an unmodifiable view of the specified multimap
1863 Returns an unmodifiable view of the specified {@code SetMultimap}. Query operations on the returned multimap "read through" to the specified multimap, and attempts to modify the returned multimap, either directly or through the multimap's views, result in an {@code UnsupportedOperationException}. <p>The returned multimap will be serializable if the specified multimap is serializable. @param delegate the multimap for which an unmodifiable view is to be returned @return an unmodifiable view of the specified multimap
1864 Returns an unmodifiable view of the specified row-sorted table. This method allows modules to provide users with "read-only" access to internal tables. Query operations on the returned table "read through" to the specified table, and attempts to modify the returned table, whether direct or via its collection views, result in an {@code UnsupportedOperationException}. <p>The returned table will be serializable if the specified table is serializable. @param table the row-sorted table for which an unmodifiable view is to be returned @return an unmodifiable view of the specified table @since 11.0
1865 Assigns a thread to the given {@link Future} to provide {@link ListenableFuture} functionality. <p><b>Warning:</b> If the input future does not already implement {@code ListenableFuture}, the returned future will emulate {@link ListenableFuture#addListener} by taking a thread from an internal, unbounded pool at the first call to {@code addListener} and holding it until the future is {@linkplain Future#isDone() done}. <p>Prefer to create {@code ListenableFuture} instances with {@link SettableFuture}, {@link MoreExecutors#listeningDecorator( java.util.concurrent.ExecutorService)}, {@link ListenableFutureTask}, {@link AbstractFuture}, and other utilities over creating plain {@code Future} instances to be upgraded to {@code ListenableFuture} after the fact.
1866 Registers separate success and failure callbacks to be run when the {@code Future}'s computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the computation is already complete, immediately. <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of callbacks, but any callback added through this method is guaranteed to be called once the computation is complete. <p>Exceptions thrown by a {@code callback} will be propagated up to the executor. Any exception thrown during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and logged. <p>Example: {@snippet : ListenableFuture<QueryResult> future = ...; Executor e = ... addCallback(future, new FutureCallback<QueryResult>() { public void onSuccess(QueryResult result) { storeInCache(result); } public void onFailure(Throwable t) { reportError(t); } }, e); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the warnings the {@link MoreExecutors#directExecutor} documentation. <p>For a more general interface to attach a completion listener to a {@code Future}, see {@link ListenableFuture#addListener addListener}. @param future The future attach the callback to. @param callback The callback to invoke when {@code future} is completed. @param executor The executor to run {@code callback} when the future completes. @since 10.0
1867 Creates a new, empty map with the specified strategy, initial capacity and concurrency level.
1868 Creates a new, empty multiset, sorted according to the elements' natural order. All elements inserted into the multiset must implement the {@code Comparable} interface. Furthermore, all such elements must be <i>mutually comparable</i>: {@code e1.compareTo(e2)} must not throw a {@code ClassCastException} for any elements {@code e1} and {@code e2} in the multiset. If the user attempts to add an element to the multiset that violates this constraint (for example, the user attempts to add a string element to a set whose elements are integers), the {@code add(Object)} call will throw a {@code ClassCastException}. <p>The type specification is {@code <E extends Comparable>}, instead of the more specific {@code <E extends Comparable<? super E>>}, to support classes defined without generics.
1869 Creates a new, empty multiset, sorted according to the specified comparator. All elements inserted into the multiset must be <i>mutually comparable</i> by the specified comparator: {@code comparator.compare(e1, e2)} must not throw a {@code ClassCastException} for any elements {@code e1} and {@code e2} in the multiset. If the user attempts to add an element to the multiset that violates this constraint, the {@code add(Object)} call will throw a {@code ClassCastException}. @param comparator the comparator that will be used to sort this multiset. A null value indicates that the elements' <i>natural ordering</i> should be used.
1870 {@inheritDoc} <p>Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a {@link List}, instead of the {@link Collection} specified in the {@link Multimap} interface.
1871 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface. <p>Any duplicates in {@code values} will be stored in the multimap once.
1872 Removes all values associated with a given key. The returned collection is immutable. <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link Multimap} interface.
1873 Creates a new, empty {@code HashMultiset} with the specified expected number of distinct elements. @param distinctElements the expected number of distinct elements @throws IllegalArgumentException if {@code distinctElements} is negative
1874 Returns true if {@code network} has at least one cycle. A cycle is defined as a non-empty subset of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges) starting and ending with the same node. <p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).
1875 Creates a new, empty {@code LinkedHashMultiset} with the specified expected number of distinct elements. @param distinctElements the expected number of distinct elements @throws IllegalArgumentException if {@code distinctElements} is negative
1876 Constructs a graph with the properties specified in {@code builder}.
1877 Constructs a graph with the properties specified in {@code builder}.
1878 {@inheritDoc} <p>Creates an empty {@code HashSet} for a collection of values for one key. @return a new {@code HashSet} containing a collection of values for one key
1879 {@inheritDoc} <p>Creates an empty {@code LinkedHashSet} for a collection of values for one key. @return a new {@code LinkedHashSet} containing a collection of values for one key
1880 Associates the ({@code rowKey}, {@code columnKey}) pair with {@code value} in the built table. Duplicate key pairs are not allowed and will cause {@link #build} to fail.
1881 Associates {@code key} with {@code value} in the built bimap. Duplicate keys or values are not allowed, and will cause {@link #build} to fail.
1882 Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed, and will cause {@link #build} to fail.
1883 Associates all of {@code map's} keys and values in the built map. Duplicate keys are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key or value in {@code map} is null @throws ClassCastException if any value is not an instance of the type specified by its key
1884 Adds the given {@code entry} to the map, making it immutable if necessary. If the same key is put more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last value put for that key. @since 11.0
1885 Associates {@code key} with {@code value} in the built map. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause {@link #build} to fail.
1886 Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed, and will cause {@link #build} to fail.
1887 Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed, and will cause {@link #build} to fail.
1888 {@inheritDoc} @since 19.0
1889 {@inheritDoc} @since 19.0
1890 Returns the elements of a {@code NavigableSet}, {@code unfiltered}, that satisfy a predicate. The returned set is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting set's iterator does not support {@code remove()}, but all other set methods are supported. When given an element that doesn't satisfy the predicate, the set's {@code add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods such as {@code removeAll()} and {@code clear()} are called on the filtered set, only elements that satisfy the filter will be removed from the underlying set. <p>The returned set isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered set's methods, such as {@code size()}, iterate across every element in the underlying set and determine which elements satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and use the copy. <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link Iterables#filter(Iterable, Class)} for related functionality.) @since 14.0
1891 Returns a newly-created immutable sorted map, or throws an exception if any two keys are equal. @throws IllegalArgumentException if any two keys are equal according to the comparator (which might be the keys' natural order) @since 31.0
1892 Associates the specified range with the specified value. @throws IllegalArgumentException if {@code range} is empty
1893 Add the specified range to this builder. Adjacent ranges are permitted and will be merged, but overlapping ranges will cause an exception when {@link #build()} is called. @throws IllegalArgumentException if {@code range} is empty
1894 Returns the maximal range {@linkplain #encloses enclosed} by both this range and {@code connectedRange}, if such a range exists. <p>For example, the intersection of {@code [1..5]} and {@code (3..7)} is {@code (3..5]}. The resulting range may be empty; for example, {@code [1..5)} intersected with {@code [5..7)} yields the empty range {@code [5..5)}. <p>The intersection exists if and only if the two ranges are {@linkplain #isConnected connected}. <p>The intersection operation is commutative, associative and idempotent, and its identity element is {@link Range#all}). @throws IllegalArgumentException if {@code isConnected(connectedRange)} is {@code false}
1895 Returns the maximal range lying between this range and {@code otherRange}, if such a range exists. The resulting range may be empty if the two ranges are adjacent but non-overlapping. <p>For example, the gap of {@code [1..5]} and {@code (7..10)} is {@code (5..7]}. The resulting range may be empty; for example, the gap between {@code [1..5)} {@code [5..7)} yields the empty range {@code [5..5)}. <p>The gap exists if and only if the two ranges are either disconnected or immediately adjacent (any intersection must be an empty range). <p>The gap operation is commutative. @throws IllegalArgumentException if this range and {@code otherRange} have a nonempty intersection @since 27.0
1896 Returns the minimal range that {@linkplain #encloses encloses} both this range and {@code other}. For example, the span of {@code [1..3]} and {@code (5..7)} is {@code [1..7)}. <p><i>If</i> the input ranges are {@linkplain #isConnected connected}, the returned range can also be called their <i>union</i>. If they are not, note that the span might contain values that are not contained in either input range. <p>Like {@link #intersection(Range) intersection}, this operation is commutative, associative and idempotent. Unlike it, it is always well-defined for any two input ranges.
1897 Returns the canonical form of this range in the given domain. The canonical form has the following properties: <ul> <li>equivalence: {@code a.canonical().contains(v) == a.contains(v)} for all {@code v} (in other words, {@code ContiguousSet.create(a.canonical(domain), domain).equals( ContiguousSet.create(a, domain))} <li>uniqueness: unless {@code a.isEmpty()}, {@code ContiguousSet.create(a, domain).equals(ContiguousSet.create(b, domain))} implies {@code a.canonical(domain).equals(b.canonical(domain))} <li>idempotence: {@code a.canonical(domain).canonical(domain).equals(a.canonical(domain))} </ul> <p>Furthermore, this method guarantees that the range returned will be one of the following canonical forms: <ul> <li>[start..end) <li>[start..+∞) <li>(-∞..end) (only if type {@code C} is unbounded below) <li>(-∞..+∞) (only if type {@code C} is unbounded below) </ul>
1898 Returns a new, empty {@code HashBiMap} with the default initial capacity (16).
1899 Constructs a new bimap containing initial values from {@code map}. The bimap is created with an initial capacity sufficient to hold the mappings in the specified map.
1900 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
1901 Returns an {@code ImmutableClassToInstanceMap} containing a single entry. @since 19.0
1902 Returns an immutable set of the values in this map, in the same order they appear in {@link #entrySet}.
1903 Returns a reversed view of the specified list. For example, {@code Lists.reverse(Arrays.asList(1, 2, 3))} returns a list containing {@code 3, 2, 1}. The returned list is backed by this list, so changes in the returned list are reflected in this list, and vice-versa. The returned list supports all of the optional list operations supported by this list. <p>The returned list is random-access if the specified list is random access. @since 7.0
1904 Returns an immutable list containing the given elements, in order. @throws NullPointerException if {@code elements} contains a null element @since 3.0
1905 Views the array as an immutable list. Copies if the specified range does not cover the complete array. Does not check for nulls.
1906 Returns an immutable list of the elements between the specified {@code fromIndex}, inclusive, and {@code toIndex}, exclusive. (If {@code fromIndex} and {@code toIndex} are equal, the empty immutable list is returned.) <p><b>Note:</b> in almost all circumstances, the returned {@link ImmutableList} retains a strong reference to {@code this}, which may prevent the original list from being garbage collected. If you want the original list to be eligible for garbage collection, you should create and use a copy of the sub list (e.g., {@code ImmutableList.copyOf(originalList.subList(...))}).
1907 Returns an immutable range map mapping a single range to a single value.
1908 Returns an immutable range set containing the specified single range. If {@link Range#isEmpty() range.isEmpty()}, this is equivalent to {@link ImmutableRangeSet#of()}.
1909 Returns an immutable map containing a single entry.
1910 Returns an immutable set containing each of {@code elements}, minus duplicates, in the order each appears first in the source array. @throws NullPointerException if any of {@code elements} is null @since 3.0
1911 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
1912 Combines two iterators into a single iterator. The returned iterator iterates across the elements in {@code a}, followed by the elements in {@code b}. The source iterators are not polled until necessary. <p>The returned iterator supports {@code remove()} when the corresponding input iterator supports it.
1913 Combines three iterators into a single iterator. The returned iterator iterates across the elements in {@code a}, followed by the elements in {@code b}, followed by the elements in {@code c}. The source iterators are not polled until necessary. <p>The returned iterator supports {@code remove()} when the corresponding input iterator supports it.
1914 Combines four iterators into a single iterator. The returned iterator iterates across the elements in {@code a}, followed by the elements in {@code b}, followed by the elements in {@code c}, followed by the elements in {@code d}. The source iterators are not polled until necessary. <p>The returned iterator supports {@code remove()} when the corresponding input iterator supports it.
1915 Gets an iterator representing an immutable snapshot of all subscribers to the given event at the time this method is called.
1916 Returns the value of {@code closingFuture}. @throws ExecutionException if {@code closingFuture} is a failed step @throws CancellationException if the {@code closingFuture}'s future was cancelled @throws IllegalArgumentException if {@code closingFuture} is not one of the futures passed to {@link #whenAllComplete(Iterable)} or {@link #whenAllComplete(Iterable)} @throws IllegalStateException if called outside of a call to {@link CombiningCallable#call(DeferredCloser, Peeker)} or {@link AsyncCombiningCallable#call(DeferredCloser, Peeker)}
1917 This method is a convenience for testing. Code should call {@link MapMakerInternalMap#containsValue} directly.
1918 A sensible, albeit inefficient, definition of {@link #remove} in terms of the {@code iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #remove} to forward to this implementation. <p>Alternately, you may wish to override {@link #remove} with {@code keySet().remove}, assuming that approach would not lead to an infinite loop. @since 7.0
1919 A sensible definition of {@link #clear} in terms of the {@code iterator} method of {@link #entrySet}. In many cases, you may wish to override {@link #clear} to forward to this implementation. @since 7.0
1920 A sensible definition of {@link #isEmpty} in terms of the {@code iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #isEmpty} to forward to this implementation. @since 7.0
1921 A sensible definition of {@link #hashCode} in terms of the {@code iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #hashCode} to forward to this implementation. @since 7.0
1922 Computes the difference between two maps. This difference is an immutable snapshot of the state of the maps at the time this method is called. It will never change, even if the maps change at a later time. <p>Since this method uses {@code HashMap} instances internally, the keys of the supplied maps must be well-behaved with respect to {@link Object#equals} and {@link Object#hashCode}. <p><b>Note:</b>If you only need to know whether two maps have the same mappings, call {@code left.equals(right)} instead of this method. @param left the map to treat as the "left" map for purposes of comparison @param right the map to treat as the "right" map for purposes of comparison @return the difference between the two maps
1923 Creates a new EventBus named "default".
1924 Crosses an element over to the opposite heap by moving it one level down (or up if there are no elements below it). <p>Returns the new position of the element.
1925 Fills the hole at {@code index} by moving in the least of its grandchildren to this position, then recursively filling the new hole created. @return the position of the new hole (where the lowest grandchild moved from, that had no grandchild to replace it)
1926 A sensible definition of {@link #contains} in terms of the {@code first()} method of {@link #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #contains} to forward to this implementation. @since 7.0
1927 A sensible definition of {@link #remove} in terms of the {@code iterator()} method of {@link #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #remove} to forward to this implementation. @since 7.0
1928 A sensible default implementation of {@link #subSet(Object, Object)} in terms of {@link #headSet(Object)} and {@link #tailSet(Object)}. In some situations, you may wish to override {@link #subSet(Object, Object)} to forward to this implementation. @since 7.0
1929 {@inheritDoc} <p>This method returns a {@link SortedSet}, instead of the {@code Set} specified in the {@link Table} interface.
1930 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap} interface.
1931 Creates a {@link BloomFilter} with the expected number of insertions and expected false positive probability. <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified, will result in its saturation, and a sharp deterioration of its false positive probability. <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>} is. <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since {@link #equals} also relies on object identity of funnels. @param funnel the funnel of T's that the constructed {@code BloomFilter} will use @param expectedInsertions the number of expected insertions to the constructed {@code BloomFilter}; must be positive @param fpp the desired false positive probability (must be positive and less than 1.0) @return a {@code BloomFilter} @since 19.0
1932 Returns the {@code int} value that is equal to {@code x} rounded with the specified rounding mode, if possible. @throws ArithmeticException if <ul> <li>{@code x} is infinite or NaN <li>{@code x}, after being rounded to a mathematical integer using the specified rounding mode, is either less than {@code Integer.MIN_VALUE} or greater than {@code Integer.MAX_VALUE} <li>{@code x} is not a mathematical integer and {@code mode} is {@link RoundingMode#UNNECESSARY} </ul>
1933 Returns the {@code long} value that is equal to {@code x} rounded with the specified rounding mode, if possible. @throws ArithmeticException if <ul> <li>{@code x} is infinite or NaN <li>{@code x}, after being rounded to a mathematical integer using the specified rounding mode, is either less than {@code Long.MIN_VALUE} or greater than {@code Long.MAX_VALUE} <li>{@code x} is not a mathematical integer and {@code mode} is {@link RoundingMode#UNNECESSARY} </ul>
1934 Adds each member of {@code elements} as a candidate for the top {@code k} elements. This operation takes amortized linear time in the length of {@code elements}. The iterator is consumed after this operation completes. <p>If all input data to this {@code TopKSelector} is in a single {@code Iterator}, prefer {@link Ordering#leastOf(Iterator, int)}, which provides a simpler API for that use case.
1935 Returns a {@code TopKSelector} that collects the lowest {@code k} elements added to it, relative to the natural ordering of the elements, and returns them via {@link #topK} in ascending order. @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}
1936 Returns a {@code TopKSelector} that collects the greatest {@code k} elements added to it, relative to the natural ordering of the elements, and returns them via {@link #topK} in descending order. @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}
1937 Returns {@code true} if {@code n} is a <a href="http://mathworld.wolfram.com/PrimeNumber.html">prime number</a>: an integer <i>greater than one</i> that cannot be factored into a product of <i>smaller</i> positive integers. Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i> be factored into smaller positive integers). <p>To test larger numbers, use {@link LongMath#isPrime} or {@link BigInteger#isProbablePrime}. @throws IllegalArgumentException if {@code n} is negative @since 20.0
1938 Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and {@code k}, that is, {@code n! / (k! (n - k)!)}. <p><b>Warning:</b> the result can take as much as <i>O(k log n)</i> space. @throws IllegalArgumentException if {@code n < 0}, {@code k < 0}, or {@code k > n}
1939 Returns statistics over a dataset containing the given values. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision)
1940 Returns statistics over a dataset containing the given values. The iterator will be completely consumed by this method. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision)
1941 Adds the given statistics to the dataset, as if the individual values used to compute the statistics had been added directly.
1942 Returns statistics over a dataset containing the given values. The stream will be completely consumed by this method. <p>If you have a {@code Stream<Double>} rather than a {@code DoubleStream}, you should collect the values using {@link #toStats()} instead. @param values a series of values @since 28.2 (but only since 33.4.0 in the Android flavor)
1943 Returns statistics over a dataset containing the given values. The stream will be completely consumed by this method. <p>If you have a {@code Stream<Integer>} rather than an {@code IntStream}, you should collect the values using {@link #toStats()} instead. @param values a series of values @since 28.2 (but only since 33.4.0 in the Android flavor)
1944 Returns statistics over a dataset containing the given values. The stream will be completely consumed by this method. <p>If you have a {@code Stream<Long>} rather than a {@code LongStream}, you should collect the values using {@link #toStats()} instead. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15)) @since 28.2 (but only since 33.4.0 in the Android flavor)
1945 Adds the given values to the dataset. The stream will be completely consumed by this method. @param values a series of values @since 28.2 (but only since 33.4.0 in the Android flavor)
1946 Adds the given values to the dataset. The stream will be completely consumed by this method. @param values a series of values @since 28.2 (but only since 33.4.0 in the Android flavor)
1947 Adds the given values to the dataset. The stream will be completely consumed by this method. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15)) @since 28.2 (but only since 33.4.0 in the Android flavor)
1948 Performs an in-place selection, like {@link #selectInPlace}, to select all the indexes {@code allRequired[i]} for {@code i} in the range [{@code requiredFrom}, {@code requiredTo}]. These indexes must be sorted in the array and must all be in the range [{@code from}, {@code to}].
1949 Returns an immutable array containing the given values, in order. <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link Builder#addAll(Iterable)}, with all the performance implications associated with that.
1950 Returns an immutable array containing the given values, in order. <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link Builder#addAll(Iterable)}, with all the performance implications associated with that.
1951 Returns an immutable array containing the given values, in order. <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link Builder#addAll(Iterable)}, with all the performance implications associated with that.
1952 Returns a string representation of the {@code UnsignedLong} value, in base {@code radix}. If {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix {@code 10} is used.
1953 Returns a string representation of x, where x is treated as unsigned. <p><b>Java 8+ users:</b> use {@link Long#toUnsignedString(long)} instead.
1954 An implementation of {@link ExecutorService#invokeAny} for {@link ListeningExecutorService} implementations.
1955 Creates the {@link ListenableFuture} which will return the result of running {@code combiner} when all Futures complete. {@code combiner} will run using {@code executor}. <p>If the combiner throws a {@code CancellationException}, the returned future will be cancelled. <p>Canceling this Future will attempt to cancel all the component futures. @since 23.6 @return a future whose result is based on {@code combiner} (or based on the input futures passed to {@code whenAllSucceed}, if that is the method you used to create this {@code FutureCombiner}). Even though the future never produces a value other than {@code null}, you should typically check whether it failed: See <a href="https://errorprone.info/bugpattern/FutureReturnValueIgnored">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.
1956 Starts a {@link ClosingFuture} pipeline with a {@link ListenableFuture}. <p>{@code future}'s value will not be closed when the pipeline is done even if {@code V} implements {@link Closeable}. In order to start a pipeline with a value that will be closed when the pipeline is done, use {@link #submit(ClosingCallable, Executor)} instead.
1957 A sensible definition of {@link #poll} in terms of {@link #remove}. If you override {@link #remove}, you may wish to override {@link #poll} to forward to this implementation. @since 7.0
1958 A sensible definition of {@link #peek} in terms of {@link #element}. If you override {@link #element}, you may wish to override {@link #peek} to forward to this implementation. @since 7.0
1959 Enqueues a task to run when the previous task (if any) completes. <p>Cancellation does not propagate from the output future to a callable that has begun to execute, but if the output future is cancelled before {@link Callable#call()} is invoked, {@link Callable#call()} will not be invoked.
1960 Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new instance of the given checked exception type. This reduces boilerplate for a common use of {@code Future} in which it is unnecessary to programmatically distinguish between exception types or to extract other information from the exception instance. <p>Exceptions from {@code Future.get} are treated as follows: <ul> <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}. <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the interrupt). <li>Any {@link TimeoutException} is wrapped in an {@code X}. <li>Any {@link CancellationException} is propagated untouched, as is any other {@link RuntimeException} (though {@code get} implementations are discouraged from throwing such exceptions). </ul> <p>The overall principle is to continue to treat every checked exception as a checked exception, every unchecked exception as an unchecked exception, and every error as an error. In addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the new stack trace matches that of the current thread. <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor that accepts zero or more arguments, all of type {@code String} or {@code Throwable} (preferring constructors with at least one {@code String}) and calling the constructor via reflection. If the exception did not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code IllegalArgumentException} is thrown. @throws X if {@code get} throws any checked exception except for an {@code ExecutionException} whose cause is not itself a checked exception @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a {@code RuntimeException} as its cause @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code Error} as its cause @throws CancellationException if {@code get} throws a {@code CancellationException} @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or does not have a suitable constructor @since 19.0 (in 10.0 as {@code get} and with different parameter order)
1961 Implementing classes should invoke this method once their service has stopped. It will cause the service to transition from {@link State#STARTING} or {@link State#STOPPING} to {@link State#TERMINATED}. @throws IllegalStateException if the service is not one of {@link State#STOPPING}, {@link State#STARTING}, or {@link State#RUNNING}.
1962 Invoke this method to transition the service to the {@link State#FAILED}. The service will <b>not be stopped</b> if it is running. Invoke this method when a service has failed critically or otherwise cannot be started nor stopped.
1963 Attempts to start the timer immediately prior to the service being started via {@link Service#startAsync()}.
1964 Updates the state with the given service transition. <p>This method performs the main logic of ServiceManager in the following steps. <ol> <li>Update the {@link #servicesByState()} <li>Update the {@link #startupTimers} <li>Based on the new state queue listeners to run <li>Run the listeners (outside of the lock) </ol>
1965 Enters this monitor when the guard is satisfied. Blocks indefinitely, but may be interrupted. @throws InterruptedException if interrupted while waiting
1966 Waits for the guard to be satisfied. Waits indefinitely, but may be interrupted. May be called only by a thread currently occupying this monitor. @throws InterruptedException if interrupted while waiting
1967 Enters this monitor when the guard is satisfied. Blocks indefinitely.
1968 Waits for the guard to be satisfied. Waits indefinitely. May be called only by a thread currently occupying this monitor.
1969 Enters this monitor when the guard is satisfied. Blocks at most the given time, including both the time to acquire the lock and the time to wait for the guard to be satisfied, and may be interrupted. @return whether the monitor was entered, which guarantees that the guard is now satisfied @throws InterruptedException if interrupted while waiting
1970 Enters this monitor when the guard is satisfied. Blocks at most the given time, including both the time to acquire the lock and the time to wait for the guard to be satisfied. @return whether the monitor was entered, which guarantees that the guard is now satisfied
1971 Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May be called only by a thread currently occupying this monitor. @return whether the guard is now satisfied @throws InterruptedException if interrupted while waiting
1972 Waits for the guard to be satisfied. Waits at most the given time. May be called only by a thread currently occupying this monitor. @return whether the guard is now satisfied
1973 Returns a future that delegates to this future but will finish early (via a {@link TimeoutException} wrapped in an {@link ExecutionException}) if the specified timeout expires. If the timeout expires, not only will the output future finish, but also the input future ({@code this}) will be cancelled and interrupted. @param timeout when to time out the future @param unit the time unit of the time parameter @param scheduledExecutor The executor service to enforce the timeout.
1974 Returns a future that delegates to another but will finish early (via a {@link TimeoutException} wrapped in an {@link ExecutionException}) if the specified duration expires. <p>The delegate future is interrupted and cancelled if it times out. @param delegate The future to delegate to. @param time when to time out the future @param scheduledExecutor The executor service to enforce the timeout. @since 28.0 (but only since 33.4.0 in the Android flavor)
1975 Returns an {@link Optional} containing the first element in this fluent iterable that satisfies the given predicate, if such an element exists. <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null} is matched in this fluent iterable, a {@link NullPointerException} will be thrown. <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()}.
1976 This is the actual implementation of {@link #precomputed}, but we bounce calls through a method on {@link Platform} so that we can have different behavior in GWT. <p>This implementation tries to be smart in a number of ways. It recognizes cases where the negation is cheaper to precompute than the matcher itself; it tries to build small hash tables for matchers that only match a few characters, and so on. In the worst-case scenario, it constructs an eight-kilobyte bit array and queries that. In many situations this produces a matcher which is faster to query than the original.
1977 Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code IOException}, {@code RuntimeException}, {@code Error} or a checked exception of either of the given types. Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b> Be sure to declare all of the checked exception types your try block can throw when calling an overload of this method so as to avoid losing the original exception type. <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e, ...);} to ensure the compiler knows that it will throw. @return this method does not return; it always throws @throws IOException when the given throwable is an IOException @throws X1 when the given throwable is of the declared type X1 @throws X2 when the given throwable is of the declared type X2
1978 Writes all the given bytes to this sink. @throws IOException if an I/O occurs while writing to this sink
1979 Writes all the bytes from the given {@code InputStream} to this sink. Does not close {@code input}. @return the number of bytes written @throws IOException if an I/O occurs while reading from {@code input} or writing to this sink
1980 Returns whether the source has zero bytes. The default implementation first checks {@link #sizeIfKnown}, returning true if it's known to be zero and false if it's known to be non-zero. If the size is not known, it falls back to opening a stream and checking for EOF. <p>Note that, in cases where {@code sizeIfKnown} returns zero, it is <i>possible</i> that bytes are actually available for reading. (For example, some special files may return a size of 0 despite actually having content when read.) This means that a source may return {@code true} from {@code isEmpty()} despite having readable content. @throws IOException if an I/O error occurs @since 15.0
1981 Returns the size of this source in bytes, even if doing so requires opening and traversing an entire stream. To avoid a potentially expensive operation, see {@link #sizeIfKnown}. <p>The default implementation calls {@link #sizeIfKnown} and returns the value if present. If absent, it will fall back to a heavyweight operation that will open a stream, read (or {@link InputStream#skip(long) skip}, if possible) to the end of the stream and return the total number of bytes that were read. <p>Note that for some sources that implement {@link #sizeIfKnown} to provide a more efficient implementation, it is <i>possible</i> that this method will return a different number of bytes than would be returned by reading all of the bytes (for example, some special files may return a size of 0 despite actually having content when read). <p>In either case, for mutable sources such as files, a subsequent read may return a different number of bytes if the contents are changed. @throws IOException if an I/O error occurs while reading the size of this source
1982 Copies the contents of this byte source to the given {@code OutputStream}. Does not close {@code output}. @return the number of bytes copied @throws IOException if an I/O error occurs while reading from this source or writing to {@code output}
1983 Copies the contents of this byte source to the given {@code ByteSink}. @return the number of bytes copied @throws IOException if an I/O error occurs while reading from this source or writing to {@code sink}
1984 Reads the full contents of this byte source as a byte array. @throws IOException if an I/O error occurs while reading from this source
1985 Reads the contents of this byte source using the given {@code processor} to process bytes as they are read. Stops when all bytes have been read or the consumer returns {@code false}. Returns the result produced by the processor. @throws IOException if an I/O error occurs while reading from this source or if {@code processor} throws an {@code IOException} @since 16.0
1986 Checks that the contents of this byte source are equal to the contents of the given byte source. @throws IOException if an I/O error occurs while reading from this source or {@code other}
1987 Writes the given character sequence to this sink. @throws IOException if an I/O error while writing to this sink
1988 Writes all the text from the given {@link Readable} (such as a {@link Reader}) to this sink. Does not close {@code readable} if it is {@code Closeable}. @return the number of characters written @throws IOException if an I/O error occurs while reading from {@code readable} or writing to this sink
1989 Returns the length of this source in chars, even if doing so requires opening and traversing an entire stream. To avoid a potentially expensive operation, see {@link #lengthIfKnown}. <p>The default implementation calls {@link #lengthIfKnown} and returns the value if present. If absent, it will fall back to a heavyweight operation that will open a stream, {@link Reader#skip(long) skip} to the end of the stream, and return the total number of chars that were skipped. <p>Note that for sources that implement {@link #lengthIfKnown} to provide a more efficient implementation, it is <i>possible</i> that this method will return a different number of chars than would be returned by reading all of the chars. <p>In either case, for mutable sources such as files, a subsequent read may return a different number of chars if the contents are changed. @throws IOException if an I/O error occurs while reading the length of this source @since 19.0
1990 Appends the contents of this source to the given {@link Appendable} (such as a {@link Writer}). Does not close {@code appendable} if it is {@code Closeable}. @return the number of characters copied @throws IOException if an I/O error occurs while reading from this source or writing to {@code appendable}
1991 Copies the contents of this source to the given sink. @return the number of characters copied @throws IOException if an I/O error occurs while reading from this source or writing to {@code sink}
1992 Reads the first line of this source as a string. Returns {@code null} if this source is empty. <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code \n}. If the source's content does not end in a line termination sequence, it is treated as if it does. @throws IOException if an I/O error occurs while reading from this source
1993 Reads lines of text from this source, processing each line as it is read using the given {@link LineProcessor processor}. Stops when all lines have been processed or the processor returns {@code false} and returns the result produced by the processor. <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code \n}. If the source's content does not end in a line termination sequence, it is treated as if it does. @throws IOException if an I/O error occurs while reading from this source or if {@code processor} throws an {@code IOException} @since 16.0
1994 Returns whether the source has zero chars. The default implementation first checks {@link #lengthIfKnown}, returning true if it's known to be zero and false if it's known to be non-zero. If the length is not known, it falls back to opening a stream and checking for EOF. <p>Note that, in cases where {@code lengthIfKnown} returns zero, it is <i>possible</i> that chars are actually available for reading. This means that a source may return {@code true} from {@code isEmpty()} despite having readable content. @throws IOException if an I/O error occurs @since 15.0
1995 Expands the table if possible.
1996 Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a key that doesn't satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 11.0
1997 Returns a multimap containing the mappings in {@code unfiltered} whose values satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a value that doesn't satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose value satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 14.0
1998 Returns a multimap containing the mappings in {@code unfiltered} that satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a key/value pair that doesn't satisfy the predicate, multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. @since 11.0
1999 Overridden column iterator to return columns values in globally sorted order.
2000 Returns an immutable bimap containing the given entries. The returned bimap iterates over entries in the same order as the original iterable. @throws IllegalArgumentException if two keys have the same value or two values have the same key @throws NullPointerException if any key, value, or entry is null @since 19.0
2001 Returns an immutable map containing the specified entries. The returned map iterates over entries in the same order as the original iterable. @throws NullPointerException if any key, value, or entry is null @throws IllegalArgumentException if two entries have the same key @since 19.0
2002 Copies an iterable's elements into an array. @param iterable the iterable to copy @param type the type of the elements @return a newly-allocated array into which all the elements of the iterable have been copied
2003 Returns an immutable sorted set containing the given elements sorted by the given {@code Comparator}. When multiple elements are equivalent according to {@code compare()}, only the first one specified is included. This method iterates over {@code elements} at most once. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if {@code comparator} or any of {@code elements} is null
2004 Binary searches the list for the specified key, using the specified key function. <p>Equivalent to {@link #binarySearch(List, Object, Comparator, KeyPresentBehavior, KeyAbsentBehavior)} using {@link Lists#transform(List, Function) Lists.transform(list, keyFunction)}.
2005 {@inheritDoc} <p>Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a {@link List}, instead of the {@link java.util.Collection} specified in the {@link Multimap} interface.
2006 Returns a view of a navigable map where each value is transformed by a function. All other properties of the map, such as iteration order, are left intact. For example, the code: {@snippet : NavigableMap<String, Integer> map = Maps.newTreeMap(); map.put("a", 4); map.put("b", 9); Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in); NavigableMap<String, Double> transformed = Maps.transformNavigableValues(map, sqrt); System.out.println(transformed); } ... prints {@code {a=2.0, b=3.0}}. <p>Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. <p>It's acceptable for the underlying map to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed map might contain null values, if the function sometimes gives a null result. <p>The returned map is not thread-safe or serializable, even if the underlying map is. <p>The function is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the function will be applied many times for bulk operations like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing. @since 13.0
2007 Remove a row key / column key / value mapping, if present.
2008 Returns a synchronized (thread-safe) {@code ListMultimap} backed by the specified multimap. <p>You must follow the warnings described in {@link #synchronizedMultimap}. @param multimap the multimap to be wrapped @return a synchronized view of the specified multimap
2009 Returns a synchronized (thread-safe) {@code SetMultimap} backed by the specified multimap. <p>You must follow the warnings described in {@link #synchronizedMultimap}. <p>The returned multimap will be serializable if the specified multimap is serializable. @param multimap the multimap to be wrapped @return a synchronized view of the specified multimap
2010 Reads all characters from a {@link Readable} object into a {@link String}. Does not close the {@code Readable}. @param r the object to read from @return a string containing all the characters @throws IOException if an I/O error occurs
2011 Returns a {@code Future} whose result is taken from this {@code Future} or, if this {@code Future} fails with the given {@code exceptionType}, from the result provided by the {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so if the primary input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an exception is thrown, this exception is used as the result of the output {@code Future}. <p>Usage example: {@snippet : // Falling back to a zero counter in case an exception happens when processing the RPC to fetch // counters. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catching(FetchException.class, x -> 0, directExecutor()); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link #addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. <p>This method is similar to {@link java.util.concurrent.CompletableFuture#exceptionally}. It can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #transform}. @param exceptionType the exception type that triggers use of {@code fallback}. The exception type is matched against the input's exception. "The input's exception" means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a different kind of exception, that exception itself. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding {@code Throwable.class} in particular. @param fallback the {@link Function} to be called if the input fails with the expected exception type. The function's argument is the input's exception. "The input's exception" means the cause of the {@link ExecutionException} thrown by {@code this.get()} or, if {@code get()} throws a different kind of exception, that exception itself. @param executor the executor that runs {@code fallback} if the input fails
2012 Returns a new {@code Future} whose result is derived from the result of this {@code Future}. If this input {@code Future} fails, the returned {@code Future} fails with the same exception (and the function is not invoked). Example usage: {@snippet : ListenableFuture<List<Row>> rowsFuture = queryFuture.transform(QueryResult::getRows, executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link #addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel the input, and if the input is cancelled, the returned {@code Future} will receive a callback in which it will attempt to cancel itself. <p>An example use of this method is to convert a serializable object returned from an RPC into a POJO. <p>This method is similar to {@link java.util.concurrent.CompletableFuture#thenApply} and {@link java.util.concurrent.CompletableFuture#thenApplyAsync}. It can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #catching}. @param function A Function to transform the results of this future to the results of the returned future. @param executor Executor to run the function in. @return A future that holds result of the transformation.
2013 Returns a {@link GraphBuilder} for building directed graphs.
2014 Returns a {@link GraphBuilder} for building undirected graphs.
2015 Returns a {@link GraphBuilder} initialized with all properties queryable from {@code graph}. <p>The "queryable" properties are those that are exposed through the {@link Graph} interface, such as {@link Graph#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)}, are not set in the new builder.
2016 Returns a {@link NetworkBuilder} for building directed networks.
2017 Returns a {@link NetworkBuilder} for building undirected networks.
2018 Returns a {@link NetworkBuilder} initialized with all properties queryable from {@code network}. <p>The "queryable" properties are those that are exposed through the {@link Network} interface, such as {@link Network#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)}, are not set in the new builder.
2019 Returns a {@link ValueGraphBuilder} for building directed graphs.
2020 Returns a {@link ValueGraphBuilder} for building undirected graphs.
2021 Returns a {@link ValueGraphBuilder} initialized with all properties queryable from {@code graph}. <p>The "queryable" properties are those that are exposed through the {@link ValueGraph} interface, such as {@link ValueGraph#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)}, are not set in the new builder.
2022 Registers a {@link Listener} to be {@linkplain Executor#execute executed} on the given executor. The listener will not have previous state changes replayed, so it is suggested that listeners are added before any of the managed services are {@linkplain Service#startAsync started}. <p>{@code addListener} guarantees execution ordering across calls to a given listener but not across calls to multiple listeners. Specifically, a given listener will have its callbacks invoked in the same order as the underlying service enters those states. Additionally, at most one of the listener's callbacks will execute at once. However, multiple listeners' callbacks may execute concurrently, and listeners may execute in an order different from the one in which they were registered. <p>RuntimeExceptions thrown by a listener will be caught and logged. Any exception thrown during {@code Executor.execute} (e.g., a {@code RejectedExecutionException}) will be caught and logged. <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener} documentation. @param listener the listener to run when the manager changes state @param executor the executor in which the listeners callback methods will be run.
2023 Creates an empty {@code CompactLinkedHashSet} instance.
2024 Creates a <i>mutable</i> {@code CompactHashSet} instance containing the elements of the given collection in unspecified order. @param collection the elements that the set should contain @return a new {@code CompactHashSet} containing those elements (minus duplicates)
2025 Creates a {@code CompactLinkedHashSet} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures. @param expectedSize the number of elements you expect to add to the returned set @return a new, empty {@code CompactLinkedHashSet} with enough capacity to hold {@code expectedSize} elements without resizing @throws IllegalArgumentException if {@code expectedSize} is negative
2026 Creates a new {@code SortedSetMultimap} that uses the provided map and factory. It can generate a multimap based on arbitrary {@link Map} and {@link SortedSet} classes. <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code toString} methods for the multimap and its returned views. However, the multimap's {@code get} method returns instances of a different class than {@code factory.get()} does. <p>The multimap is serializable if {@code map}, {@code factory}, the sets generated by {@code factory}, and the multimap contents are all serializable. <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if {@code map} and the instances generated by {@code factory} are. Concurrent read operations will work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link #synchronizedSortedSetMultimap}. <p>Call this method only when the simpler methods {@link TreeMultimap#create()} and {@link TreeMultimap#create(Comparator, Comparator)} won't suffice. <p>Note: the multimap assumes complete ownership over of {@code map} and the sets returned by {@code factory}. Those objects should not be manually updated and they should not use soft, weak, or phantom references. @param map place to store the mapping from each key to its corresponding values @param factory supplier of new, empty sorted sets that will each hold all values for a given key @throws IllegalArgumentException if {@code map} is not empty
2027 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableMultiset}. Elements iterate in order by the <i>first</i> appearance of that element in encounter order. @since 21.0
2028 Returns a {@code Collector} that accumulates elements into an {@code ImmutableMultiset} whose elements are the result of applying {@code elementFunction} to the inputs, with counts equal to the result of applying {@code countFunction} to the inputs. <p>If the mapped elements contain duplicates (according to {@link Object#equals}), the first occurrence in encounter order appears in the resulting multiset, with count equal to the sum of the outputs of {@code countFunction.applyAsInt(t)} for each {@code t} mapped to that element. @since 22.0
2029 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
2030 Returns a string containing the string representation of each of {@code parts}, using the previously configured separator between each.
2031 Returns a {@link String} containing all of the elements of this fluent iterable joined with {@code joiner}. <p><b>{@code Stream} equivalent:</b> {@code joiner.join(stream.iterator())}, or, if you are not using any optional {@code Joiner} features, {@code stream.collect(Collectors.joining(delimiter)}. @since 18.0
2032 Returns the lexically cleaned form of the path name, <i>usually</i> (but not always) equivalent to the original. The following heuristics are used: <ul> <li>empty string becomes . <li>. stays as . <li>fold out ./ <li>fold out ../ when possible <li>collapse multiple slashes <li>delete trailing slashes (unless the path is just "/") </ul> <p>These heuristics do not always match the behavior of the filesystem. In particular, consider the path {@code a/../b}, which {@code simplifyPath} will change to {@code b}. If {@code a} is a symlink to {@code x}, {@code a/../b} may refer to a sibling of {@code x}, rather than the sibling of {@code a} referred to by {@code b}. @since 11.0
2033 Parses a trie node and returns the number of characters consumed. @param stack The prefixes that precede the characters represented by this node. Each entry of the stack is in reverse order. @param encoded The serialized trie. @param start An index in the encoded serialized trie to begin reading characters from. @param builder A map builder to which all entries will be added. @return The number of characters consumed from {@code encoded}.
2034 Builds a thread-safe map. This method does not alter the state of this {@code MapMaker} instance, so it can be invoked again to create multiple independent maps. <p>The bulk operations {@code putAll}, {@code equals}, and {@code clear} are not guaranteed to be performed atomically on the returned map. Additionally, {@code size} and {@code containsValue} are implemented as bulk read operations, and thus may fail to observe concurrent writes. @return a serializable concurrent map having the requested features
2035 Applies {@code function} to each element of this fluent iterable and returns a fluent iterable with the concatenated combination of results. {@code function} returns an Iterable of results. <p>The returned fluent iterable's iterator supports {@code remove()} if this function-returned iterables' iterator does. After a successful {@code remove()} call, the returned fluent iterable no longer contains the corresponding element. <p><b>{@code Stream} equivalent:</b> {@link Stream#flatMap} (using a function that produces streams, not iterables). @since 13.0 (required {@code Function<E, Iterable<T>>} until 14.0)
2036 Combines multiple iterables into a single iterable. The returned iterable has an iterator that traverses the elements of each iterable in {@code inputs}. The input iterators are not polled until necessary. <p>The returned iterable's iterator supports {@code remove()} when the corresponding input iterator supports it. <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code Streams.concat(...)}. @throws NullPointerException if any of the provided iterables is null
2037 {@inheritDoc} <p>The default {@link AbstractFuture} implementation throws {@code InterruptedException} if the current thread is interrupted during the call, even if the value is already available. @throws CancellationException {@inheritDoc}
2038 Adds {@code node} to the graph and returns the associated {@link GraphConnections}. @throws IllegalStateException if {@code node} is already present
2039 Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the lock, but does not wait for the guard to be satisfied. @return whether the monitor was entered, which guarantees that the guard is now satisfied @since 28.0 (but only since 33.4.0 in the Android flavor)
2040 Enum values can override for performance reasons.
2041 Enum values can override for performance reasons.
2042 Enum values can override for performance reasons.
2043 Converts the specified {@code String str} from this format to the specified {@code format}. A "best effort" approach is taken; if {@code str} does not conform to the assumed format, then the behavior of this method is undefined but we make a reasonable effort at converting anyway.
2044 Returns {@code true} if a character sequence contains no matching BMP characters. Equivalent to {@code !matchesAnyOf(sequence)}. <p>The default implementation iterates over the sequence, invoking {@link #matches} for each character, until this returns {@code true} or the end is reached. @param sequence the character sequence to examine, possibly empty @return {@code true} if this matcher matches no characters in the sequence, including when the sequence is empty
2045 Returns a string containing all non-matching characters of a character sequence, in order. For example: {@snippet : CharMatcher.is('a').removeFrom("bazaar") } ... returns {@code "bzr"}.
2046 Returns a string copy of the input character sequence, with each matching BMP character replaced by a given replacement character. For example: {@snippet : CharMatcher.is('a').replaceFrom("radar", 'o') } ... returns {@code "rodor"}. <p>The default implementation uses {@link #indexIn(CharSequence)} to find the first matching character, then iterates the remainder of the sequence calling {@link #matches(char)} for each character. @param sequence the character sequence to replace matching characters in @param replacement the character to append to the result string in place of each matching character in {@code sequence} @return the new string
2047 Examines the Inet6Address to extract the embedded IPv4 client address if the InetAddress is an IPv6 address of one of the specified address types that contain an embedded IPv4 address. <p>NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial spoofability. With other transition addresses spoofing involves (at least) infection of one's BGP routing table. @param ip {@link Inet6Address} to be examined for embedded IPv4 client address @return {@link Inet4Address} of embedded IPv4 client address @throws IllegalArgumentException if the argument does not have a valid embedded IPv4 address
2048 Reads the specified bytes of data from the underlying input stream and updates the hasher with the bytes read.
2049 Attempts to read enough bytes from the stream to fill the given byte array, with the same behavior as {@link DataInput#readFully(byte[])}. Does not close the stream. @param in the input stream to read from. @param b the buffer into which the data is read. @throws EOFException if this stream reaches the end before reading all the bytes. @throws IOException if an I/O error occurs.
2050 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Booleans.asList(array), distance)}, but is somewhat faster. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
2051 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Bytes.asList(array), distance)}, but is somewhat faster. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
2052 Sorts the elements of {@code array} in descending order. @since 23.1
2053 Sorts the elements of {@code array} in descending order. @since 23.1
2054 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Chars.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
2055 Sorts the elements of {@code array} in descending order. <p>Note that this method uses the total order imposed by {@link Double#compare}, which treats all NaN values as equal and 0.0 as greater than -0.0. @since 23.1
2056 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Bytes.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
2057 Sorts the elements of {@code array} in descending order. <p>Note that this method uses the total order imposed by {@link Float#compare}, which treats all NaN values as equal and 0.0 as greater than -0.0. @since 23.1
2058 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Floats.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
2059 Sorts the elements of {@code array} in descending order. @since 23.1
2060 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Ints.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
2061 Sorts the elements of {@code array} in descending order. @since 23.1
2062 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Longs.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
2063 Sorts the elements of {@code array} in descending order. @since 23.1
2064 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Shorts.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
2065 Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries into keys and values using the specified separator. @since 10.0
2066 Creates a {@code RateLimiter} with the specified stable throughput, given as "permits per second" (commonly referred to as <i>QPS</i>, queries per second), and a <i>warmup period</i>, during which the {@code RateLimiter} smoothly ramps up its rate, until it reaches its maximum rate at the end of the period (as long as there are enough requests to saturate it). Similarly, if the {@code RateLimiter} is left <i>unused</i> for a duration of {@code warmupPeriod}, it will gradually return to its "cold" state, i.e. it will go through the same warming up process as when it was first created. <p>The returned {@code RateLimiter} is intended for cases where the resource that actually fulfills the requests (e.g., a remote server) needs "warmup" time, rather than being immediately accessed at the stable (maximum) rate. <p>The returned {@code RateLimiter} starts in a "cold" state (i.e. the warmup period will follow), and if it is left unused for long enough, it will return to that state. @param permitsPerSecond the rate of the returned {@code RateLimiter}, measured in how many permits become available per second @param warmupPeriod the duration of the period where the {@code RateLimiter} ramps up its rate, before reaching its stable (maximum) rate @param unit the time unit of the warmupPeriod argument @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero or {@code warmupPeriod} is negative
2067 Returns an unmodifiable view of the specified sorted multiset. Query operations on the returned multiset "read through" to the specified multiset, and attempts to modify the returned multiset result in an {@link UnsupportedOperationException}. <p>The returned multiset will be serializable if the specified multiset is serializable. @param sortedMultiset the sorted multiset for which an unmodifiable view is to be generated @return an unmodifiable view of the multiset @since 11.0
2068 Returns an unmodifiable view of the specified navigable set. This method allows modules to provide users with "read-only" access to internal navigable sets. Query operations on the returned set "read through" to the specified set, and attempts to modify the returned set, whether direct or via its collection views, result in an {@code UnsupportedOperationException}. <p>The returned navigable set will be serializable if the specified navigable set is serializable. <p><b>Java 8+ users and later:</b> Prefer {@link Collections#unmodifiableNavigableSet}. @param set the navigable set for which an unmodifiable view is to be returned @return an unmodifiable view of the specified navigable set @since 12.0
2069 Returns an unmodifiable view of the specified collection of entries. The {@link Entry#setValue} operation throws an {@link UnsupportedOperationException}. If the specified collection is a {@code Set}, the returned collection is also a {@code Set}. @param entries the entries for which to return an unmodifiable view @return an unmodifiable view of the entries
2070 Returns an unmodifiable view of the specified {@code SortedSetMultimap}. Query operations on the returned multimap "read through" to the specified multimap, and attempts to modify the returned multimap, either directly or through the multimap's views, result in an {@code UnsupportedOperationException}. <p>The returned multimap will be serializable if the specified multimap is serializable. @param delegate the multimap for which an unmodifiable view is to be returned @return an unmodifiable view of the specified multimap
2071 Starts a {@link ClosingFuture} pipeline with a {@link ListenableFuture}. <p>If {@code future} succeeds, its value will be closed (using {@code closingExecutor)}) when the pipeline is done, even if the pipeline is canceled or fails. <p>Cancelling the pipeline will not cancel {@code future}, so that the pipeline can access its value in order to close it. @param future the future to create the {@code ClosingFuture} from. For discussion of the future's result type {@code C}, see {@link DeferredCloser#eventuallyClose(Object, Executor)}. @param closingExecutor the future's result will be closed on this executor @deprecated Creating {@link Future}s of closeable types is dangerous in general because the underlying value may never be closed if the {@link Future} is canceled after its operation begins. Consider replacing code that creates {@link ListenableFuture}s of closeable types, including those that pass them to this method, with {@link #submit(ClosingCallable, Executor)} in order to ensure that resources do not leak. Or, to start a pipeline with a {@link ListenableFuture} that doesn't create values that should be closed, use {@link ClosingFuture#from}.
2072 Registers separate success and failure callbacks to be run when this {@code Future}'s computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the computation is already complete, immediately. <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of callbacks, but any callback added through this method is guaranteed to be called once the computation is complete. <p>Example: {@snippet : future.addCallback( new FutureCallback<QueryResult>() { public void onSuccess(QueryResult result) { storeInCache(result); } public void onFailure(Throwable t) { reportError(t); } }, executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link #addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight callbacks passed to this method. <p>For a more general interface to attach a completion listener, see {@link #addListener}. <p>This method is similar to {@link java.util.concurrent.CompletableFuture#whenComplete} and {@link java.util.concurrent.CompletableFuture#whenCompleteAsync}. It also serves the use case of {@link java.util.concurrent.CompletableFuture#thenAccept} and {@link java.util.concurrent.CompletableFuture#thenAcceptAsync}. @param callback The callback to invoke when this {@code Future} is completed. @param executor The executor to run {@code callback} when the future completes.
2073 Returns a new, empty {@code EnumBiMap} using the specified key and value types. @param keyType the key type @param valueType the value type
2074 Returns a new, empty {@code EnumHashBiMap} using the specified key type. @param keyType the key type
2075 Creates an empty multiset containing the given initial elements, sorted according to the elements' natural order. <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}. <p>The type specification is {@code <E extends Comparable>}, instead of the more specific {@code <E extends Comparable<? super E>>}, to support classes defined without generics.
2076 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableSortedMultiset#orderedBy(Comparator)}.
2077 Stores a collection of values with the same key, replacing any existing values for that key. The returned collection is immutable. <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link Multimap} interface. <p>Any duplicates in {@code values} will be stored in the multimap once.
2078 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap} interface. <p>Any duplicates in {@code values} will be stored in the multimap once.
2079 Creates a new {@code HashMultiset} containing the specified elements. <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}. @param elements the elements that the multiset should contain
2080 Constructs an empty {@code ArrayListMultimap} with enough capacity to hold the specified numbers of keys and values without resizing. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys(expectedKeys).arrayListValues(expectedValuesPerKey).build()}, which provides more control over the underlying data structure. @param expectedKeys the expected number of distinct keys @param expectedValuesPerKey the expected average number of values per key @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is negative
2081 Constructs an empty {@code HashMultimap} with enough capacity to hold the specified numbers of keys and values without rehashing. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys(expectedKeys).hashSetValues(expectedValuesPerKey).build()}, which provides more control over the underlying data structure. @param expectedKeys the expected number of distinct keys @param expectedValuesPerKey the expected average number of values per key @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is negative
2082 Constructs a {@code HashMultimap} with the same mappings as the specified multimap. If a key-value mapping appears multiple times in the input multimap, it only appears once in the constructed multimap. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys().hashSetValues().build(multimap)}, which provides more control over the underlying data structure. @param multimap the multimap whose contents are copied to this multimap
2083 Constructs an empty {@code LinkedListMultimap} with enough capacity to hold the specified number of keys without rehashing. @param expectedKeys the expected number of distinct keys @throws IllegalArgumentException if {@code expectedKeys} is negative
2084 Creates a new {@code LinkedHashMultiset} containing the specified elements. <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}. @param elements the elements that the multiset should contain
2085 Creates a new, empty {@code LinkedHashMultimap} with the default initial capacities.
2086 Constructs an empty {@code LinkedHashMultimap} with enough capacity to hold the specified numbers of keys and values without rehashing. @param expectedKeys the expected number of distinct keys @param expectedValuesPerKey the expected average number of values per key @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is negative
2087 Constructs a mutable graph with the properties specified in {@code builder}.
2088 Constructs a mutable graph with the properties specified in {@code builder}.
2089 Adds the given {@code cell} to the table, making it immutable if necessary. Duplicate key pairs are not allowed and will cause {@link #build} to fail.
2090 Adds the given {@code entry} to the bimap. Duplicate keys or values are not allowed, and will cause {@link #build} to fail. @since 19.0
2091 Adds all of the given entries to the built map. If the same key is put more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last value put for that key. @throws NullPointerException if any key, value, or entry is null @since 19.0
2092 Adds the given {@code entry} to the map, making it immutable if necessary. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause {@link #build} to fail. @since 11.0
2093 Returns a multimap view of the map. @since 14.0
2094 Returns a newly-created immutable sorted map. <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method will throw an exception if there are duplicate keys. The {@code build()} method will soon be deprecated. @throws IllegalArgumentException if any two keys are equal according to the comparator (which might be the keys' natural order)
2095 Copies all associations from the specified range map into this builder.
2096 Add all of the specified ranges to this builder. Adjacent ranges are permitted and will be merged, but overlapping ranges will cause an exception when {@link #build()} is called. @throws IllegalArgumentException if any inserted ranges are empty @since 21.0
2097 Returns a list containing the nonempty intersections of {@code range} with the ranges in this range set.
2098 Returns a {@code ContiguousSet} containing the same values in the given domain {@linkplain Range#contains contained} by the range. @throws IllegalArgumentException if neither range nor the domain has a lower bound, or if neither has an upper bound @since 13.0
2099 Returns the range that spans the given range and entry, if the entry can be coalesced.
2100 Returns an {@link ImmutableSortedSet} containing the same values in the given domain {@linkplain RangeSet#contains contained} by this range set. <p><b>Note:</b> {@code a.asSet(d).equals(b.asSet(d))} does not imply {@code a.equals(b)}! For example, {@code a} and {@code b} could be {@code [2..4]} and {@code (1..5)}, or the empty ranges {@code [3..3)} and {@code [4..4)}. <p><b>Warning:</b> Be extremely careful what you do with the {@code asSet} view of a large range set (such as {@code ImmutableRangeSet.of(Range.greaterThan(0))}). Certain operations on such a set can be performed efficiently, but others (such as {@link Set#hashCode} or {@link Collections#frequency}) can cause major performance problems. <p>The returned set's {@link Object#toString} method returns a shorthand form of the set's contents, such as {@code "[1..100]}"}. @throws IllegalArgumentException if neither this range nor the domain has a lower bound, or if neither has an upper bound
2101 Returns an immutable map instance containing the given entries. Internally, the returned map will be backed by an {@link EnumMap}. <p>The iteration order of the returned map follows the enum's iteration order, not the order in which the elements appear in the given map. @param map the map to make an immutable copy of @return an immutable map containing those entries @since 14.0
2102 {@inheritDoc} <p>The value {@code Map<C, V>} instances in the returned map are {@link ImmutableMap} instances as well.
2103 @since 12.0
2104 Returns a newly-created {@code ImmutableList} based on the contents of the {@code Builder}.
2105 Views the array as an immutable list. Does not check for nulls; does not copy. <p>The array must be internally created.
2106 Returns a newly-created {@code ImmutableSortedSet} based on the contents of the {@code Builder} and its comparator.
2107 Creates an {@code ImmutableMap} backed by a JDK HashMap. Used when probable hash flooding is detected. This implementation may replace the entries in entryArray with its own entry objects (though they will have the same key/value contents), and will take ownership of entryArray.
2108 Returns the index of the leftmost part of the suffix, or -1 if not found. Note that the value defined as a suffix may not produce {@code true} results from {@link #isPublicSuffix()} or {@link #isRegistrySuffix()} if the domain ends with an excluded domain pattern such as {@code "nhs.uk"}. <p>If a {@code desiredType} is specified, this method only finds suffixes of the given type. Otherwise, it finds the first suffix of any type.
2109 Returns an immutable set instance containing the given enum elements. Internally, the returned set will be backed by an {@link EnumSet}. <p>The iteration order of the returned set follows the enum's iteration order, not the order in which the elements appear in the given collection. @param elements the elements, all of the same {@code enum} type, that the set should contain @return an immutable set containing those elements, minus duplicates
2110 Scope the return type to {@link UnmodifiableIterator} to ensure this is an unmodifiable view. @since 20.0 (present with return type {@link Iterator} since 2.0)
2111 Posts an event to all registered subscribers. This method will return successfully after the event has been posted to all subscribers, and regardless of any exceptions thrown by subscribers. <p>If no subscribers have been subscribed for {@code event}'s class, and {@code event} is not already a {@link DeadEvent}, it will be wrapped in a DeadEvent and reposted. @param event event to post.
2112 Tries to move {@code toTrickle} from a min to a max level and bubble up there. If it moved before {@code removeIndex} this method returns a pair as described in {@link #removeAt}.
2113 Returns the comparator that orders the rows. With natural ordering, {@link Ordering#natural()} is returned. @deprecated Use {@code table.rowKeySet().comparator()} instead.
2114 Returns a synchronized (thread-safe) navigable set backed by the specified navigable set. In order to guarantee serial access, it is critical that <b>all</b> access to the backing navigable set is accomplished through the returned navigable set (or its views). <p>It is imperative that the user manually synchronize on the returned sorted set when iterating over it or any of its {@code descendingSet}, {@code subSet}, {@code headSet}, or {@code tailSet} views. {@snippet : NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>()); ... synchronized (set) { // Must be in the synchronized block Iterator<E> it = set.iterator(); while (it.hasNext()) { foo(it.next()); } } } <p>or: {@snippet : NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>()); NavigableSet<E> set2 = set.descendingSet().headSet(foo); ... synchronized (set) { // Note: set, not set2!!! // Must be in the synchronized block Iterator<E> it = set2.descendingIterator(); while (it.hasNext()) { foo(it.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>The returned navigable set will be serializable if the specified navigable set is serializable. <p><b>Java 8+ users and later:</b> Prefer {@link Collections#synchronizedNavigableSet}. @param navigableSet the navigable set to be "wrapped" in a synchronized navigable set. @return a synchronized view of the specified navigable set. @since 13.0
2115 Creates a {@link BloomFilter} with the expected number of insertions and expected false positive probability. <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified, will result in its saturation, and a sharp deterioration of its false positive probability. <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>} is. <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since {@link #equals} also relies on object identity of funnels. @param funnel the funnel of T's that the constructed {@code BloomFilter} will use @param expectedInsertions the number of expected insertions to the constructed {@code BloomFilter}; must be positive @param fpp the desired false positive probability (must be positive and less than 1.0) @return a {@code BloomFilter}
2116 Creates a {@link BloomFilter} with the expected number of insertions and a default expected false positive probability of 3%. <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified, will result in its saturation, and a sharp deterioration of its false positive probability. <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>} is. <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since {@link #equals} also relies on object identity of funnels. @param funnel the funnel of T's that the constructed {@code BloomFilter} will use @param expectedInsertions the number of expected insertions to the constructed {@code BloomFilter}; must be positive @return a {@code BloomFilter} @since 19.0
2117 Returns an estimate for the total number of distinct elements that have been added to this Bloom filter. This approximation is reasonably accurate if it does not exceed the value of {@code expectedInsertions} that was used when constructing the filter. @since 22.0
2118 Returns a {@code Collector} that returns the {@code k} smallest (relative to the specified {@code Comparator}) input elements, in ascending order, as an unmodifiable {@code List}. Ties are broken arbitrarily. <p>For example: {@snippet : Stream.of("foo", "quux", "banana", "elephant") .collect(least(2, comparingInt(String::length))) // returns {"foo", "quux"} } <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log k)), as opposed to e.g. {@code Stream.sorted(comparator).limit(k)}, which currently takes O(n log n) time and O(n) space. @throws IllegalArgumentException if {@code k < 0} @since 22.0
2119 Returns the {@code k} least elements from the given iterator according to this ordering, in order from least to greatest. If there are fewer than {@code k} elements present, all will be included. <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple elements are equivalent, it is undefined which will come first. <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).collect(Comparators.least(k, thisComparator))} instead. @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending order @throws IllegalArgumentException if {@code k} is negative @since 14.0
2120 Adds each member of {@code elements} as a candidate for the top {@code k} elements. This operation takes amortized linear time in the length of {@code elements}. <p>If all input data to this {@code TopKSelector} is in a single {@code Iterable}, prefer {@link Ordering#leastOf(Iterable, int)}, which provides a simpler API for that use case.
2121 Returns a string representation of the {@code UnsignedLong} value, in base 10.
2122 CycleDetectingLock implementations must call this method before attempting to acquire the lock.
2123 Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function to its value. The function can use a {@link DeferredCloser} to capture objects to be closed when the pipeline is done. <p>If this {@code ClosingFuture} fails, the function will not be called, and the derived {@code ClosingFuture} will be equivalent to this one. <p>If the function throws an exception, that exception is used as the result of the derived {@code ClosingFuture}. <p>Example usage: {@snippet : ClosingFuture<List<Row>> rowsFuture = queryFuture.transform((closer, result) -> result.getRows(), executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. <p>After calling this method, you may not call {@link #finishToFuture()}, {@link #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on the original {@code ClosingFuture} instance. @param function transforms the value of this step to the value of the derived step @param executor executor to run the function in @return the derived step @throws IllegalStateException if a {@code ClosingFuture} has already been derived from this one, or if this {@code ClosingFuture} has already been {@linkplain #finishToFuture() finished}
2124 Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function that returns a {@code ClosingFuture} to its value. The function can use a {@link DeferredCloser} to capture objects to be closed when the pipeline is done (other than those captured by the returned {@link ClosingFuture}). <p>If this {@code ClosingFuture} succeeds, the derived one will be equivalent to the one returned by the function. <p>If this {@code ClosingFuture} fails, the function will not be called, and the derived {@code ClosingFuture} will be equivalent to this one. <p>If the function throws an exception, that exception is used as the result of the derived {@code ClosingFuture}. But if the exception is thrown after the function creates a {@code ClosingFuture}, then none of the closeable objects in that {@code ClosingFuture} will be closed. <p>Usage guidelines for this method: <ul> <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a {@code ClosingFuture}. If possible, prefer calling {@link #transform(ClosingFunction, Executor)} instead, with a function that returns the next value directly. <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()} for every closeable object this step creates in order to capture it for later closing. <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code ClosingFuture} call {@link #from(ListenableFuture)}. <li>In case this step doesn't create new closeables, you can adapt an API that returns a {@link ListenableFuture} to return a {@code ClosingFuture} by wrapping it with a call to {@link #withoutCloser(AsyncFunction)} </ul> <p>Example usage: {@snippet : // Result.getRowsClosingFuture() returns a ClosingFuture. ClosingFuture<List<Row>> rowsFuture = queryFuture.transformAsync((closer, result) -> result.getRowsClosingFuture(), executor); // Result.writeRowsToOutputStreamFuture() returns a ListenableFuture that resolves to the // number of written rows. openOutputFile() returns a FileOutputStream (which implements // Closeable). ClosingFuture<Integer> rowsFuture2 = queryFuture.transformAsync( (closer, result) -> { FileOutputStream fos = closer.eventuallyClose(openOutputFile(), closingExecutor); return ClosingFuture.from(result.writeRowsToOutputStreamFuture(fos)); }, executor); // Result.getRowsFuture() returns a ListenableFuture (no new closeables are created). ClosingFuture<List<Row>> rowsFuture3 = queryFuture.transformAsync(withoutCloser(Result::getRowsFuture), executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. (Specifically, {@code directExecutor} functions should avoid heavyweight operations inside {@code AsyncClosingFunction.apply}. Any heavyweight operations should occur in other threads responsible for completing the returned {@code ClosingFuture}.) <p>After calling this method, you may not call {@link #finishToFuture()}, {@link #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on the original {@code ClosingFuture} instance. @param function transforms the value of this step to a {@code ClosingFuture} with the value of the derived step @param executor executor to run the function in @return the derived step @throws IllegalStateException if a {@code ClosingFuture} has already been derived from this one, or if this {@code ClosingFuture} has already been {@linkplain #finishToFuture() finished}
2125 Returns the result of {@link Future#get()}, converting most exceptions to a new instance of the given checked exception type. This reduces boilerplate for a common use of {@code Future} in which it is unnecessary to programmatically distinguish between exception types or to extract other information from the exception instance. <p>Exceptions from {@code Future.get} are treated as follows: <ul> <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}. <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the interrupt). <li>Any {@link CancellationException} is propagated untouched, as is any other {@link RuntimeException} (though {@code get} implementations are discouraged from throwing such exceptions). </ul> <p>The overall principle is to continue to treat every checked exception as a checked exception, every unchecked exception as an unchecked exception, and every error as an error. In addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the new stack trace matches that of the current thread. <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor that accepts zero or more arguments, all of type {@code String} or {@code Throwable} (preferring constructors with at least one {@code String}, then preferring constructors with at least one {@code Throwable}) and calling the constructor via reflection. If the exception did not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code IllegalArgumentException} is thrown. @throws X if {@code get} throws any checked exception except for an {@code ExecutionException} whose cause is not itself a checked exception @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a {@code RuntimeException} as its cause @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code Error} as its cause @throws CancellationException if {@code get} throws a {@code CancellationException} @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or does not have a suitable constructor @since 19.0 (in 10.0 as {@code get})
2126 Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new instance of the given checked exception type. This reduces boilerplate for a common use of {@code Future} in which it is unnecessary to programmatically distinguish between exception types or to extract other information from the exception instance. <p>Exceptions from {@code Future.get} are treated as follows: <ul> <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}. <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the interrupt). <li>Any {@link TimeoutException} is wrapped in an {@code X}. <li>Any {@link CancellationException} is propagated untouched, as is any other {@link RuntimeException} (though {@code get} implementations are discouraged from throwing such exceptions). </ul> <p>The overall principle is to continue to treat every checked exception as a checked exception, every unchecked exception as an unchecked exception, and every error as an error. In addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the new stack trace matches that of the current thread. <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor that accepts zero or more arguments, all of type {@code String} or {@code Throwable} (preferring constructors with at least one {@code String}, then preferring constructors with at least one {@code Throwable}) and calling the constructor via reflection. If the exception did not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code IllegalArgumentException} is thrown. @throws X if {@code get} throws any checked exception except for an {@code ExecutionException} whose cause is not itself a checked exception @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a {@code RuntimeException} as its cause @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code Error} as its cause @throws CancellationException if {@code get} throws a {@code CancellationException} @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or does not have a suitable constructor @since 28.0 (but only since 33.4.0 in the Android flavor)
2127 Atomically reschedules this task and assigns the new future to {@link #cancellationDelegate}.
2128 Implementing classes should invoke this method once their service has started. It will cause the service to transition from {@link State#STARTING} to {@link State#RUNNING}. @throws IllegalStateException if the service is not {@link State#STARTING}.
2129 Initiates service {@linkplain Service#startAsync startup} on all the services being managed. It is only valid to call this method if all of the services are {@linkplain State#NEW new}. @return this @throws IllegalStateException if any of the Services are not {@link State#NEW new} when the method is called.
2130 Enters this monitor when the guard is satisfied. Blocks at most the given time, including both the time to acquire the lock and the time to wait for the guard to be satisfied, and may be interrupted. @return whether the monitor was entered, which guarantees that the guard is now satisfied @throws InterruptedException if interrupted while waiting @since 28.0 (but only since 33.4.0 in the Android flavor)
2131 Enters this monitor when the guard is satisfied. Blocks at most the given time, including both the time to acquire the lock and the time to wait for the guard to be satisfied. @return whether the monitor was entered, which guarantees that the guard is now satisfied @since 28.0 (but only since 33.4.0 in the Android flavor)
2132 Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May be called only by a thread currently occupying this monitor. @return whether the guard is now satisfied @throws InterruptedException if interrupted while waiting @since 28.0 (but only since 33.4.0 in the Android flavor)
2133 Waits for the guard to be satisfied. Waits at most the given time. May be called only by a thread currently occupying this monitor. @return whether the guard is now satisfied @since 28.0 (but only since 33.4.0 in the Android flavor)
2134 Returns a future that delegates to this future but will finish early (via a {@link TimeoutException} wrapped in an {@link ExecutionException}) if the specified timeout expires. If the timeout expires, not only will the output future finish, but also the input future ({@code this}) will be cancelled and interrupted. @param timeout when to time out the future @param scheduledExecutor The executor service to enforce the timeout. @since 28.0 (but only since 33.4.0 in the Android flavor)
2135 Overwrites a file with the contents of a byte array. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)}. @param from the bytes to write @param to the destination file @throws IOException if an I/O error occurs
2136 Hashes the contents of this byte source using the given hash function. @throws IOException if an I/O error occurs while reading from this source
2137 Copies all bytes from a file to an output stream. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#copy(java.nio.file.Path, OutputStream)}. @param from the source file @param to the output stream @throws IOException if an I/O error occurs
2138 Copies all bytes from a URL to an output stream. @param from the URL to read from @param to the output stream @throws IOException if an I/O error occurs
2139 Copies all the bytes from one file to another. <p>Copying is not an atomic operation - in the case of an I/O error, power loss, process termination, or other problems, {@code to} may not be a complete copy of {@code from}. If you need to guard against those conditions, you should employ other file-level synchronization. <p><b>Warning:</b> If {@code to} represents an existing file, that file will be overwritten with the contents of {@code from}. If {@code to} and {@code from} refer to the <i>same</i> file, the contents of that file will be deleted. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)}. @param from the source file @param to the destination file @throws IOException if an I/O error occurs @throws IllegalArgumentException if {@code from.equals(to)}
2140 Reads all bytes from a file into a byte array. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#readAllBytes}. @param file the file to read from @return a byte array containing all the bytes from file @throws IllegalArgumentException if the file is bigger than the largest possible byte array (2^31 - 1) @throws IOException if an I/O error occurs
2141 Reads all bytes from a URL into a byte array. @param url the URL to read from @return a byte array containing all the bytes from the URL @throws IOException if an I/O error occurs
2142 Process the bytes of a file. <p>(If this seems too complicated, maybe you're looking for {@link #toByteArray}.) @param file the file to read @param processor the object to which the bytes of the file are passed. @return the result of the byte processor @throws IOException if an I/O error occurs @deprecated Prefer {@code asByteSource(file).read(processor)}.
2143 Returns true if the given files exist, are not directories, and contain the same bytes. @throws IOException if an I/O error occurs
2144 Returns true if the files located by the given paths exist, are not directories, and contain the same bytes. @throws IOException if an I/O error occurs @since 22.0
2145 Writes a character sequence (such as a string) to a file using the given character set. @param from the character sequence to write @param to the destination file @param charset the charset used to encode the output stream; see {@link StandardCharsets} for helpful predefined constants @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSink(to, charset).write(from)}.
2146 Appends a character sequence (such as a string) to a file using the given character set. @param from the character sequence to append @param to the destination file @param charset the charset used to encode the output stream; see {@link StandardCharsets} for helpful predefined constants @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSink(to, charset, FileWriteMode.APPEND).write(from)}. This method is scheduled to be removed in October 2019.
2147 Copies all characters from a file to an appendable object, using the given character set. @param from the source file @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @param to the appendable object @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSource(from, charset).copyTo(to)}.
2148 Reads the first line from a file. The line does not include line-termination characters, but does include other leading and trailing whitespace. @param file the file to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @return the first line, or null if the file is empty @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSource(file, charset).readFirstLine()}.
2149 Reads all of the lines from a file. The lines do not include line-termination characters, but do include other leading and trailing whitespace. <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code Files.asCharSource(file, charset).readLines()}. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#readAllLines(java.nio.file.Path, Charset)}. @param file the file to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @return a mutable {@link List} containing all the lines @throws IOException if an I/O error occurs
2150 Streams lines from a {@link File}, stopping when our callback returns false, or we have read all of the lines. @param file the file to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @param callback the {@link LineProcessor} to use to handle the lines @return the output of processing the lines @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSource(file, charset).readLines(callback)}.
2151 Streams lines from a URL, stopping when our callback returns false, or we have read all of the lines. @param url the URL to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @param callback the LineProcessor to use to handle the lines @return the output of processing the lines @throws IOException if an I/O error occurs
2152 Fully maps a file in to memory as per {@link FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)} using the requested {@link MapMode}. <p>Files are mapped from offset 0 to its length. <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes. @param file the file to map @param mode the mode to use when mapping {@code file} @return a buffer reflecting {@code file} @throws FileNotFoundException if the {@code file} does not exist @throws IOException if an I/O error occurs @see FileChannel#map(MapMode, long, long) @since 2.0
2153 Maps a file in to memory as per {@link FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)} using the requested {@link MapMode}. <p>Files are mapped from offset 0 to {@code size}. <p>If the mode is {@link MapMode#READ_WRITE} and the file does not exist, it will be created with the requested {@code size}. Thus this method is useful for creating memory mapped files which do not yet exist. <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes. @param file the file to map @param mode the mode to use when mapping {@code file} @return a buffer reflecting {@code file} @throws IOException if an I/O error occurs @see FileChannel#map(MapMode, long, long) @since 2.0
2154 Add a shutdown hook to wait for thread completion in the given {@link ExecutorService service}. This is useful if the given service uses daemon threads, and we want to keep the JVM from exiting immediately on shutdown, instead giving these daemon threads a chance to terminate normally. @param service ExecutorService which uses daemon threads @param terminationTimeout how long to wait for the executor to finish before terminating the JVM @param timeUnit unit of time for the time parameter
2155 Returns a multimap containing the mappings in {@code unfiltered} whose values satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a value that doesn't satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose value satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 11.0
2156 Returns an ordering which tries each given comparator in order until a non-zero result is found, returning that result, and returning zero only if all comparators return zero. The returned ordering is based on the state of the {@code comparators} iterable at the time it was provided to this method. <p>The returned ordering is equivalent to that produced using {@code Ordering.from(comp1).compound(comp2).compound(comp3) . . .}. <p>The returned object is serializable if each of the {@code comparators} is serializable. <p><b>Warning:</b> Supplying an argument with undefined iteration order, such as a {@link HashSet}, will produce non-deterministic results. <p><b>Java 8+ users:</b> Use a chain of calls to {@link Comparator#thenComparing(Comparator)}, or {@code comparatorCollection.stream().reduce(Comparator::thenComparing).get()} (if the collection might be empty, also provide a default comparator as the {@code identity} parameter to {@code reduce}). @param comparators the comparators to try in order
2157 Returns an immutable bimap containing the same entries as {@code map}. If {@code map} somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose comparator is not <i>consistent with equals</i>), the results of this method are undefined. <p>The returned {@code BiMap} iterates over entries in the same order as the {@code entrySet} of the original map. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws IllegalArgumentException if two keys have the same value or two values have the same key @throws NullPointerException if any key or value in {@code map} is null
2158 Returns an array containing all of the elements from this fluent iterable in iteration order. <p><b>{@code Stream} equivalent:</b> if an object array is acceptable, use {@code stream.toArray()}; if {@code type} is a class literal such as {@code MyType.class}, use {@code stream.toArray(MyType[]::new)}. Otherwise use {@code stream.toArray( len -> (E[]) Array.newInstance(type, len))}. @param type the type of the elements @return a newly-allocated array into which all the elements of this fluent iterable have been copied
2159 Copies an iterator's elements into an array. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. @param iterator the iterator to copy @param type the type of the elements @return a newly-allocated array into which all the elements of the iterator have been copied
2160 Returns an {@code ImmutableSortedSet} containing all of the elements from this {@code FluentIterable} in the order specified by {@code comparator}, with duplicates (determined by {@code comparator.compare(x, y) == 0}) removed. To produce an {@code ImmutableSortedSet} sorted by its natural ordering, use {@code toSortedSet(Ordering.natural())}. <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableSortedSet#toImmutableSortedSet} to {@code stream.collect()}. @param comparator the function by which to sort set elements @throws NullPointerException if any element of this iterable is {@code null} @since 14.0 (since 12.0 as {@code toImmutableSortedSet()}).
2161 Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to {@code compareTo()}, only the first one specified is included. To create a copy of a {@code SortedSet} that preserves the comparator, call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once. <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)} returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s}, while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>} containing one element (the given set itself). <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. <p>This method is not type-safe, as it may be called on elements that are not mutually comparable. @throws ClassCastException if the elements are not mutually comparable @throws NullPointerException if any of {@code elements} is null
2162 Returns an immutable sorted set containing the given elements sorted by the given {@code Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the first one specified is included. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. <p>This method is safe to use even when {@code elements} is a synchronized or concurrent collection that is currently being modified by another thread. @throws NullPointerException if {@code comparator} or any of {@code elements} is null @since 7.0 (source-compatible since 2.0)
2163 {@inheritDoc} <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link Table} interface.
2164 Returns the string representation of this media type in the format described in <a href="http://www.ietf.org/rfc/rfc2045.txt">RFC 2045</a>.
2165 Returns a synchronized (thread-safe) {@code SortedSetMultimap} backed by the specified multimap. <p>You must follow the warnings described in {@link #synchronizedMultimap}. <p>The returned multimap will be serializable if the specified multimap is serializable. @param multimap the multimap to be wrapped @return a synchronized view of the specified multimap
2166 Reads the contents of this source as a string. @throws IOException if an I/O error occurs while reading from this source
2167 Creates a {@code CompactLinkedHashMap} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures. @param expectedSize the number of elements you expect to add to the returned set @return a new, empty {@code CompactLinkedHashMap} with enough capacity to hold {@code expectedSize} elements without resizing @throws IllegalArgumentException if {@code expectedSize} is negative
2168 Creates a <i>mutable</i> {@code CompactLinkedHashSet} instance containing the elements of the given collection in the order returned by the collection's iterator. @param collection the elements that the set should contain @return a new {@code CompactLinkedHashSet} containing those elements (minus duplicates)
2169 Creates an empty {@code TreeMultimap} ordered by the natural ordering of its keys and values.
2170 Creates an empty {@code TreeMultimap} instance using explicit comparators. Neither comparator may be null; use {@link Ordering#natural()} to specify natural order. @param keyComparator the comparator that determines the key ordering @param valueComparator the comparator that determines the value ordering
2171 Returns {@code true} if a character sequence contains at least one matching BMP character. Equivalent to {@code !matchesNoneOf(sequence)}. <p>The default implementation iterates over the sequence, invoking {@link #matches} for each character, until this returns {@code true} or the end is reached. @param sequence the character sequence to examine, possibly empty @return {@code true} if this matcher matches at least one character in the sequence @since 8.0
2172 Returns a string containing all matching BMP characters of a character sequence, in order. For example: {@snippet : CharMatcher.is('a').retainFrom("bazaar") } ... returns {@code "aaa"}.
2173 Returns a string copy of the input character sequence, with each matching BMP character replaced by a given replacement sequence. For example: {@snippet : CharMatcher.is('a').replaceFrom("yaha", "oo") } ... returns {@code "yoohoo"}. <p><b>Note:</b> If the replacement is a fixed string with only one character, you are better off calling {@link #replaceFrom(CharSequence, char)} directly. @param sequence the character sequence to replace matching characters in @param replacement the characters to append to the result string in place of each matching character in {@code sequence} @return the new string
2174 Coerces an IPv6 address into an IPv4 address. <p>HACK: As long as applications continue to use IPv4 addresses for indexing into tables, accounting, et cetera, it may be necessary to <b>coerce</b> IPv6 addresses into IPv4 addresses. This method does so by hashing 64 bits of the IPv6 address into {@code 224.0.0.0/3} (64 bits into 29 bits): <ul> <li>If the IPv6 address contains an embedded IPv4 address, the function hashes that. <li>Otherwise, it hashes the upper 64 bits of the IPv6 address. </ul> <p>A "coerced" IPv4 address is equivalent to itself. <p>NOTE: This method is failsafe for security purposes: ALL IPv6 addresses (except localhost (::1)) are hashed to avoid the security risk associated with extracting an embedded IPv4 address that might permit elevated privileges. @param ip {@link InetAddress} to "coerce" @return {@link Inet4Address} represented "coerced" address @since 7.0
2175 Creates a {@code RateLimiter} with the specified stable throughput, given as "permits per second" (commonly referred to as <i>QPS</i>, queries per second), and a <i>warmup period</i>, during which the {@code RateLimiter} smoothly ramps up its rate, until it reaches its maximum rate at the end of the period (as long as there are enough requests to saturate it). Similarly, if the {@code RateLimiter} is left <i>unused</i> for a duration of {@code warmupPeriod}, it will gradually return to its "cold" state, i.e. it will go through the same warming up process as when it was first created. <p>The returned {@code RateLimiter} is intended for cases where the resource that actually fulfills the requests (e.g., a remote server) needs "warmup" time, rather than being immediately accessed at the stable (maximum) rate. <p>The returned {@code RateLimiter} starts in a "cold" state (i.e. the warmup period will follow), and if it is left unused for long enough, it will return to that state. @param permitsPerSecond the rate of the returned {@code RateLimiter}, measured in how many permits become available per second @param warmupPeriod the duration of the period where the {@code RateLimiter} ramps up its rate, before reaching its stable (maximum) rate @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero or {@code warmupPeriod} is negative @since 28.0 (but only since 33.4.0 in the Android flavor)
2176 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap} interface.
2177 @since 15.0 (previously returned ScheduledFuture)
2178 Builds a cache, which either returns an already-loaded value for a given key or atomically computes or retrieves it using the supplied {@code CacheLoader}. If another thread is currently loading the value for this key, simply waits for that thread to finish and returns its loaded value. Note that multiple threads can concurrently load values for distinct keys. <p>This method does not alter the state of this {@code CacheBuilder} instance, so it can be invoked again to create multiple independent caches. @param loader the cache loader used to obtain new values @return a cache having the requested features
2179 Builds a cache which does not automatically load values when keys are requested. <p>Consider {@link #build(CacheLoader)} instead, if it is feasible to implement a {@code CacheLoader}. <p>This method does not alter the state of this {@code CacheBuilder} instance, so it can be invoked again to create multiple independent caches. @return a cache having the requested features @since 11.0
2180 Returns a builder that creates immutable sorted multisets with an explicit comparator. If the comparator has a more general type than the set being generated, such as creating a {@code SortedMultiset<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor instead. @throws NullPointerException if {@code comparator} is null
2181 Returns a builder that creates immutable sorted multisets whose elements are ordered by the reverse of their natural ordering. <p>Note: the type parameter {@code E} extends {@code Comparable<?>} rather than {@code Comparable<? super E>} in order to accommodate users of obsolete javac versions affected by <a href="https://bugs.openjdk.org/browse/JDK-6468354">JDK-6468354</a>.
2182 Returns a builder that creates immutable sorted multisets whose elements are ordered by their natural ordering. The sorted multisets use {@link Ordering#natural()} as the comparator. This method provides more type-safety than {@link #builder}, as it can be called only for classes that implement {@link Comparable}. <p>Note: the type parameter {@code E} extends {@code Comparable<?>} rather than {@code Comparable<? super E>} in order to accommodate users of obsolete javac versions affected by <a href="https://bugs.openjdk.org/browse/JDK-6468354">JDK-6468354</a>.
2183 Returns a new bimap with the same mappings as the specified map. If the specified map is an {@code EnumBiMap}, the new bimap has the same types as the provided map. Otherwise, the specified map must contain at least one mapping, in order to determine the key and value types. @param map the map whose mappings are to be placed in this map @throws IllegalArgumentException if map is not an {@code EnumBiMap} instance and contains no mappings
2184 Constructs a new bimap with the same mappings as the specified map. If the specified map is an {@code EnumHashBiMap} or an {@link EnumBiMap}, the new bimap has the same key type as the input bimap. Otherwise, the specified map must contain at least one mapping, in order to determine the key type. @param map the map whose mappings are to be placed in this map @throws IllegalArgumentException if map is not an {@code EnumBiMap} or an {@code EnumHashBiMap} instance and contains no mappings
2185 Stores a collection of values with the same key, replacing any existing values for that key. <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method returns a {@link SortedSet}, instead of the {@link java.util.Collection} specified in the {@link Multimap} interface. <p>Any duplicates in {@code values} will be stored in the multimap once.
2186 Returns {@code true} if the second list is a permutation of the first.
2187 Creates a new, empty {@code ArrayListMultimap} with the default initial capacities. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys().arrayListValues().build()}, which provides more control over the underlying data structure.
2188 Constructs an {@code ArrayListMultimap} with the same mappings as the specified multimap. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys().arrayListValues().build(multimap)}, which provides more control over the underlying data structure. @param multimap the multimap whose contents are copied to this multimap
2189 Creates a new, empty {@code HashMultimap} with the default initial capacities. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys().hashSetValues().build()}, which provides more control over the underlying data structure.
2190 Creates a new, empty {@code LinkedListMultimap} with the default initial capacity.
2191 Constructs a {@code LinkedListMultimap} with the same mappings as the specified {@code Multimap}. The new multimap has the same {@link Multimap#entries()} iteration order as the input multimap. @param multimap the multimap whose contents are copied to this multimap
2192 Constructs a {@code LinkedHashMultimap} with the same mappings as the specified multimap. If a key-value mapping appears multiple times in the input multimap, it only appears once in the constructed multimap. The new multimap has the same {@link Multimap#entries()} iteration order as the input multimap, except for excluding duplicate mappings. @param multimap the multimap whose contents are copied to this multimap
2193 Returns an empty {@link MutableNetwork} with the properties of this {@link NetworkBuilder}.
2194 Constructs a {@link MutableGraph} with the properties specified in {@code builder}.
2195 Returns an empty {@link MutableValueGraph} with the properties of this {@link ValueGraphBuilder}.
2196 Associates all of the given table's keys and values in the built table. Duplicate row key column key pairs are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key or value in {@code table} is null
2197 Adds all of the given entries to the built bimap. Duplicate keys or values are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key, value, or entry is null @since 19.0
2198 Associates all of the given map's keys and values in the built map. If the same key is put more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last value put for that key. @throws NullPointerException if any key or value in {@code map} is null
2199 Adds all the given entries to the built map. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key, value, or entry is null @since 19.0
2200 Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered map.
2201 Add all ranges from the specified range set to this builder. Adjacent ranges are permitted and will be merged, but overlapping ranges will cause an exception when {@link #build()} is called.
2202 Returns a view of the intersection of this range set with the given range.
2203 Returns a nonempty contiguous set containing all {@code int} values from {@code lower} (inclusive) to {@code upper} (inclusive). (These are the same values contained in {@code Range.closed(lower, upper)}.) @throws IllegalArgumentException if {@code lower} is greater than {@code upper} @since 23.0
2204 Returns a nonempty contiguous set containing all {@code long} values from {@code lower} (inclusive) to {@code upper} (inclusive). (These are the same values contained in {@code Range.closed(lower, upper)}.) @throws IllegalArgumentException if {@code lower} is greater than {@code upper} @since 23.0
2205 Returns a contiguous set containing all {@code int} values from {@code lower} (inclusive) to {@code upper} (exclusive). If the endpoints are equal, an empty set is returned. (These are the same values contained in {@code Range.closedOpen(lower, upper)}.) @throws IllegalArgumentException if {@code lower} is greater than {@code upper} @since 23.0
2206 Returns a contiguous set containing all {@code long} values from {@code lower} (inclusive) to {@code upper} (exclusive). If the endpoints are equal, an empty set is returned. (These are the same values contained in {@code Range.closedOpen(lower, upper)}.) @throws IllegalArgumentException if {@code lower} is greater than {@code upper} @since 23.0
2207 Computes the coalesced range for the given range+value - does not mutate the map.
2208 Adds {@code node} to the graph and returns the associated {@link NetworkConnections}. @throws IllegalStateException if {@code node} is already present
2209 Returns an immutable map containing the same entries as {@code map}. The returned map iterates over entries in the same order as the {@code entrySet} of the original map. If {@code map} somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose comparator is not <i>consistent with equals</i>), the results of this method are undefined. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if any key or value in {@code map} is null
2210 {@inheritDoc} @throws NullPointerException if {@code rowKey} is {@code null}
2211 @since 12.0
2212 @since 12.0
2213 Returns an immutable list containing the given elements, in order. @throws NullPointerException if {@code elements} contains a null element
2214 Returns an {@code ImmutableRangeMap} containing the associations previously added to this builder. @throws IllegalArgumentException if any two ranges inserted into this builder overlap
2215 Returns an {@code ImmutableRangeSet} containing the ranges added to this builder. @throws IllegalArgumentException if any input ranges have nonempty overlap
2216 Returns the URLs in the class path specified by the {@code java.class.path} {@linkplain System#getProperty system property}.
2217 Returns all declared parameters of this {@code Invokable}. Note that if this is a constructor of a non-static inner class, unlike {@link Constructor#getParameterTypes}, the hidden {@code this} parameter of the enclosing class is excluded from the returned parameters.
2218 Returns all declared exception types of this {@code Invokable}.
2219 Wraps a collection of tasks. @throws NullPointerException if any element of {@code tasks} is null
2220 Returns an immutable list containing the given elements, sorted according to their natural order. The sorting algorithm used is stable, so elements that compare as equal will stay in the order in which they appear in the input. <p>If your data has no duplicates, or you wish to deduplicate elements, use {@code ImmutableSortedSet.copyOf(elements)}; if you want a {@code List} you can use its {@code asList()} view. <p><b>Java 8+ users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted {@code ImmutableList}, use {@code stream.sorted().collect(toImmutableList())}. @throws NullPointerException if any element in the input is null @since 21.0
2221 Returns an immutable list containing the given elements, in sorted order relative to the specified comparator. The sorting algorithm used is stable, so elements that compare as equal will stay in the order in which they appear in the input. <p>If your data has no duplicates, or you wish to deduplicate elements, use {@code ImmutableSortedSet.copyOf(comparator, elements)}; if you want a {@code List} you can use its {@code asList()} view. <p><b>Java 8+ users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted {@code ImmutableList}, use {@code stream.sorted(comparator).collect(toImmutableList())}. @throws NullPointerException if any element in the input is null @since 21.0
2222 Returns an immutable sorted set containing the given elements sorted by the given {@code Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the first one specified is included. @throws NullPointerException if {@code comparator} or any of {@code elements} is null
2223 Creates an ImmutableMap from the first n entries in entryArray. This implementation may replace the entries in entryArray with its own entry objects (though they will have the same key/value contents), and may take ownership of entryArray.
2224 The index in the {@link #parts()} list at which the public suffix begins. For example, for the domain name {@code myblog.blogspot.co.uk}, the value would be 1 (the index of the {@code blogspot} part). The value is negative (specifically, {@link #NO_SUFFIX_FOUND}) if no public suffix was found.
2225 The index in the {@link #parts()} list at which the registry suffix begins. For example, for the domain name {@code myblog.blogspot.co.uk}, the value would be 2 (the index of the {@code co} part). The value is negative (specifically, {@link #NO_SUFFIX_FOUND}) if no registry suffix was found.
2226 Accepts a collection of possibly-null entries. If {@code sameComparator}, then it is assumed that they do not need to be sorted or checked for dupes.
2227 Creates a {@code TreeBasedTable} with the same mappings and sort order as the specified {@code TreeBasedTable}.
2228 Creates a {@link BloomFilter} with the expected number of insertions and a default expected false positive probability of 3%. <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified, will result in its saturation, and a sharp deterioration of its false positive probability. <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>} is. <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since {@link #equals} also relies on object identity of funnels. @param funnel the funnel of T's that the constructed {@code BloomFilter} will use @param expectedInsertions the number of expected insertions to the constructed {@code BloomFilter}; must be positive @return a {@code BloomFilter}
2229 Returns a {@code Collector} that returns the {@code k} greatest (relative to the specified {@code Comparator}) input elements, in descending order, as an unmodifiable {@code List}. Ties are broken arbitrarily. <p>For example: {@snippet : Stream.of("foo", "quux", "banana", "elephant") .collect(greatest(2, comparingInt(String::length))) // returns {"elephant", "banana"} } <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log k)), as opposed to e.g. {@code Stream.sorted(comparator.reversed()).limit(k)}, which currently takes O(n log n) time and O(n) space. @throws IllegalArgumentException if {@code k < 0} @since 22.0
2230 Returns the {@code k} least elements of the given iterable according to this ordering, in order from least to greatest. If there are fewer than {@code k} elements present, all will be included. <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple elements are equivalent, it is undefined which will come first. <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterable).collect(Comparators.least(k, thisComparator))} instead. @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending order @throws IllegalArgumentException if {@code k} is negative @since 8.0
2231 Returns the {@code k} greatest elements from the given iterator according to this ordering, in order from greatest to least. If there are fewer than {@code k} elements present, all will be included. <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple elements are equivalent, it is undefined which will come first. <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).collect(Comparators.greatest(k, thisComparator))} instead. @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in <i>descending order</i> @throws IllegalArgumentException if {@code k} is negative @since 14.0
2232 Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function to its exception if it is an instance of a given exception type. The function can use a {@link DeferredCloser} to capture objects to be closed when the pipeline is done. <p>If this {@code ClosingFuture} succeeds or fails with a different exception type, the function will not be called, and the derived {@code ClosingFuture} will be equivalent to this one. <p>If the function throws an exception, that exception is used as the result of the derived {@code ClosingFuture}. <p>Example usage: {@snippet : ClosingFuture<QueryResult> queryFuture = queryFuture.catching( QueryException.class, (closer, x) -> Query.emptyQueryResult(), executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. <p>After calling this method, you may not call {@link #finishToFuture()}, {@link #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on the original {@code ClosingFuture} instance. @param exceptionType the exception type that triggers use of {@code fallback}. The exception type is matched against this step's exception. "This step's exception" means the cause of the {@link ExecutionException} thrown by {@link Future#get()} on the {@link Future} underlying this step or, if {@code get()} throws a different kind of exception, that exception itself. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding {@code Throwable.class} in particular. @param fallback the function to be called if this step fails with the expected exception type. The function's argument is this step's exception. "This step's exception" means the cause of the {@link ExecutionException} thrown by {@link Future#get()} on the {@link Future} underlying this step or, if {@code get()} throws a different kind of exception, that exception itself. @param executor the executor that runs {@code fallback} if the input fails
2233 Waits for the all the services to reach a terminal state. After this method returns all services will either be {@linkplain Service.State#TERMINATED terminated} or {@linkplain Service.State#FAILED failed}.
2234 Waits for the all the services to reach a terminal state for no more than the given time. After this method returns all services will either be {@linkplain Service.State#TERMINATED terminated} or {@linkplain Service.State#FAILED failed}. @param timeout the maximum time to wait @param unit the time unit of the timeout argument @throws TimeoutException if not all of the services have stopped within the deadline
2235 Returns a {@code char} matcher functionally equivalent to this one, but which may be faster to query than the original; your mileage may vary. Precomputation takes time and requires more memory, so it is only likely to be worthwhile if the precomputed matcher is queried very often. <p>This method has no effect (returns {@code this}) when called in GWT: it's unclear whether a precomputed matcher is faster, but it certainly would consume more memory (which doesn't seem like a worthwhile tradeoff in a browser).
2236 Computes the hash code of the {@code file} using {@code hashFunction}. @param file the file to read @param hashFunction the hash function to use to hash the data @return the {@link HashCode} of all of the bytes in the file @throws IOException if an I/O error occurs @since 12.0 @deprecated Prefer {@code asByteSource(file).hash(hashFunction)}.
2237 Moves a file from one path to another. This method can rename a file and/or move it to a different directory. In either case {@code to} must be the target path for the file itself; not just the new name for the file or the path to the new parent directory. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#move}. @param from the source file @param to the destination file @throws IOException if an I/O error occurs @throws IllegalArgumentException if {@code from.equals(to)}
2238 Reads all of the lines from a URL. The lines do not include line-termination characters, but do include other leading and trailing whitespace. <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code Resources.asCharSource(url, charset).readLines()}. @param url the URL to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @return a mutable {@link List} containing all the lines @throws IOException if an I/O error occurs
2239 Fully maps a file read-only in to memory as per {@link FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)}. <p>Files are mapped from offset 0 to its length. <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes. @param file the file to map @return a read-only buffer reflecting {@code file} @throws FileNotFoundException if the {@code file} does not exist @throws IOException if an I/O error occurs @see FileChannel#map(MapMode, long, long) @since 2.0
2240 Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}. @param executor the executor to modify to make sure it exits when the application is finished @param terminationTimeout how long to wait for the executor to finish before terminating the JVM @param timeUnit unit of time for the time parameter @return an unmodifiable version of the input which will not hang the JVM
2241 Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}. @param executor the executor to modify to make sure it exits when the application is finished @param terminationTimeout how long to wait for the executor to finish before terminating the JVM @param timeUnit unit of time for the time parameter @return an unmodifiable version of the input which will not hang the JVM
2242 Add a shutdown hook to wait for thread completion in the given {@link ExecutorService service}. This is useful if the given service uses daemon threads, and we want to keep the JVM from exiting immediately on shutdown, instead giving these daemon threads a chance to terminate normally. @param service ExecutorService which uses daemon threads @param terminationTimeout how long to wait for the executor to finish before terminating the JVM @since 28.0 (but only since 33.4.0 in the Android flavor)
2243 Removes an entry whose key has been garbage collected.
2244 Removes an entry whose value has been garbage collected.
2245 Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy}. The manager will become healthy after all the component services have reached the {@linkplain State#RUNNING running} state. @throws IllegalStateException if the service manager reaches a state from which it cannot become {@linkplain #isHealthy() healthy}.
2246 Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy} for no more than the given time. The manager will become healthy after all the component services have reached the {@linkplain State#RUNNING running} state. @param timeout the maximum time to wait @param unit the time unit of the timeout argument @throws TimeoutException if not all of the services have finished starting within the deadline @throws IllegalStateException if the service manager reaches a state from which it cannot become {@linkplain #isHealthy() healthy}.
2247 Returns the service load times. This value will only return startup times for services that have finished starting. @return Map of services and their corresponding startup time in millis, the map entries will be ordered by startup time.
2248 @since 18.0
2249 Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to {@code compareTo()}, only the first one specified is included. To create a copy of a {@code SortedSet} that preserves the comparator, call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once. <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)} returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s}, while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>} containing one element (the given set itself). <p><b>Note:</b> Despite what the method name suggests, if {@code elements} is an {@code ImmutableSortedSet}, it may be returned instead of a copy. <p>This method is not type-safe, as it may be called on elements that are not mutually comparable. <p>This method is safe to use even when {@code elements} is a synchronized or concurrent collection that is currently being modified by another thread. @throws ClassCastException if the elements are not mutually comparable @throws NullPointerException if any of {@code elements} is null @since 7.0 (source-compatible since 2.0)
2250 Returns a synchronized (thread-safe) navigable map backed by the specified navigable map. In order to guarantee serial access, it is critical that <b>all</b> access to the backing navigable map is accomplished through the returned navigable map (or its views). <p>It is imperative that the user manually synchronize on the returned navigable map when iterating over any of its collection views, or the collections views of any of its {@code descendingMap}, {@code subMap}, {@code headMap} or {@code tailMap} views. {@snippet : NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>()); // Needn't be in synchronized block NavigableSet<K> set = map.navigableKeySet(); synchronized (map) { // Synchronizing on map, not set! Iterator<K> it = set.iterator(); // Must be in synchronized block while (it.hasNext()) { foo(it.next()); } } } <p>or: {@snippet : NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>()); NavigableMap<K, V> map2 = map.subMap(foo, false, bar, true); // Needn't be in synchronized block NavigableSet<K> set2 = map2.descendingKeySet(); synchronized (map) { // Synchronizing on map, not map2 or set2! Iterator<K> it = set2.iterator(); // Must be in synchronized block while (it.hasNext()) { foo(it.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>The returned navigable map will be serializable if the specified navigable map is serializable. @param navigableMap the navigable map to be "wrapped" in a synchronized navigable map. @return a synchronized view of the specified navigable map. @since 13.0
2251 Reads all characters from a file into a {@link String}, using the given character set. @param file the file to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @return a string containing all the characters from the file @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSource(file, charset).read()}.
2252 Reads all characters from a URL into a {@link String}, using the given character set. @param url the URL to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @return a string containing all the characters from the URL @throws IOException if an I/O error occurs.
2253 Creates an empty {@code CompactLinkedHashMap} instance.
2254 Constructs a {@code TreeMultimap}, ordered by the natural ordering of its keys and values, with the same mappings as the specified multimap. @param multimap the multimap whose contents are copied to this multimap
2255 Creates a {@link ReentrantLock} with the given fairness policy. The {@code lockName} is used in the warning or exception output to help identify the locks involved in the detected deadlock.
2256 Creates a {@link ReentrantReadWriteLock} with the given fairness policy. The {@code lockName} is used in the warning or exception output to help identify the locks involved in the detected deadlock.
2257 For a given Enum type, creates an immutable map from each of the Enum's values to a corresponding LockGraphNode, with the {@code allowedPriorLocks} and {@code disallowedPriorLocks} prepopulated with nodes according to the natural ordering of the associated Enum values.
2258 Helper method for {@link #validateSyntax(List)}. Validates that one part of a domain name is valid. @param part The domain name part to be validated @param isFinalPart Is this the final (rightmost) domain part? @return Whether the part is valid
2259 Returns an integer representing an IPv4 address regardless of whether the supplied argument is an IPv4 address or not. <p>IPv6 addresses are <b>coerced</b> to IPv4 addresses before being converted to integers. <p>As long as there are applications that assume that all IP addresses are IPv4 addresses and can therefore be converted safely to integers (for whatever purpose) this function can be used to handle IPv6 addresses as well until the application is suitably fixed. <p>NOTE: an IPv6 address coerced to an IPv4 address can only be used for such purposes as rudimentary identification or indexing into a collection of real {@link InetAddress}es. They cannot be used as real addresses for the purposes of network communication. @param ip {@link InetAddress} to convert @return {@code int}, "coerced" if ip is not an IPv4 address @since 7.0
2260 A sensible definition of {@link #contains} in terms of {@link #iterator}. If you override {@link #iterator}, you may wish to override {@link #contains} to forward to this implementation. @since 7.0
2261 A sensible definition of {@link #remove} in terms of {@link #iterator}, using the iterator's {@code remove} method. If you override {@link #iterator}, you may wish to override {@link #remove} to forward to this implementation. @since 7.0
2262 A sensible definition of {@link #removeAll} in terms of {@link #iterator}, using the iterator's {@code remove} method. If you override {@link #iterator}, you may wish to override {@link #removeAll} to forward to this implementation. @since 7.0
2263 A sensible definition of {@link #retainAll} in terms of {@link #iterator}, using the iterator's {@code remove} method. If you override {@link #iterator}, you may wish to override {@link #retainAll} to forward to this implementation. @since 7.0
2264 A sensible definition of {@link #clear} in terms of {@link #iterator}, using the iterator's {@code remove} method. If you override {@link #iterator}, you may wish to override {@link #clear} to forward to this implementation. @since 7.0
2265 A sensible definition of {@link #isEmpty} as {@code !iterator().hasNext}. If you override {@link #isEmpty}, you may wish to override {@link #isEmpty} to forward to this implementation. Alternately, it may be more efficient to implement {@code isEmpty} as {@code size() == 0}. @since 7.0
2266 A sensible definition of {@link #toArray()} in terms of {@link #toArray(Object[])}. If you override {@link #toArray(Object[])}, you may wish to override {@link #toArray} to forward to this implementation. @since 7.0
2267 Duration-based overload of {@link #schedule(Runnable, long, TimeUnit)}. @since 29.0
2268 Returns all subscribers for the given listener grouped by the type of event they subscribe to.
2269 Returns the subgraph of {@code network} induced by {@code nodes}. This subgraph is a new graph that contains all of the nodes in {@code nodes}, and all of the {@link Network#edges() edges} from {@code network} for which the {@link Network#incidentNodes(Object) incident nodes} are both contained by {@code nodes}. @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph
2270 Creates a mutable copy of {@code network} with the same nodes and edges.
2271 Returns an empty {@link MutableGraph} with the properties of this {@link GraphBuilder}.
2272 Returns the subgraph of {@code graph} induced by {@code nodes}. This subgraph is a new graph that contains all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges} (and associated edge values) from {@code graph} for which both nodes are contained by {@code nodes}. @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph
2273 Creates a mutable copy of {@code graph} with the same nodes, edges, and edge values.
2274 Associates all of the given map's keys and values in the built bimap. Duplicate keys or values are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key or value in {@code map} is null
2275 Associates all of the given map's keys and values in the built map. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key or value in {@code map} is null
2276 Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered navigable map.
2277 Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered sorted map.
2278 Returns a map containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings whose keys satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
2279 Returns a map containing the mappings in {@code unfiltered} that satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the map's entries have a {@link Entry#setValue} method that throws an {@link IllegalArgumentException} when the existing key and the provided value don't satisfy the predicate. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings that satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}.
2280 Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose keys and values are the result of applying the provided mapping functions to the input elements. The generated map is sorted by the specified comparator. <p>If the mapped keys contain duplicates (according to the specified comparator), an {@code IllegalArgumentException} is thrown when the collection operation is performed. (This differs from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which throws an {@code IllegalStateException}.) @since 21.0
2281 Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys and values are the result of applying the provided mapping functions to the input elements. The resulting implementation is specialized for enum key types. The returned map and its views will iterate over keys in their enum definition order, not encounter order. <p>If the mapped keys contain duplicates, an {@code IllegalArgumentException} is thrown when the collection operation is performed. (This differs from the {@code Collector} returned by {@link java.util.stream.Collectors#toMap(java.util.function.Function, java.util.function.Function) Collectors.toMap(Function, Function)}, which throws an {@code IllegalStateException}.) @since 21.0
2282 Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys and values are the result of applying the provided mapping functions to the input elements. The resulting implementation is specialized for enum key types. The returned map and its views will iterate over keys in their enum definition order, not encounter order. <p>If the mapped keys contain duplicates, the values are merged using the specified merging function. @since 21.0
2283 Returns type mappings using type parameters and type arguments found in the generic superclass and the super interfaces of {@code contextClass}.
2284 Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. <p>Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream. <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method is called. This will fail if the iterator is infinite and may cause problems if the iterator eagerly fetches data for each source when iterated (rather than producing sources that only load data through their streams). Prefer using the {@link #concat(Iterable)} overload if possible. @param sources the sources to concatenate @return a {@code ByteSource} containing the concatenated data @throws NullPointerException if any of {@code sources} is {@code null} @since 15.0
2285 Concatenates multiple {@link CharSource} instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. <p>Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream. <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method is called. This will fail if the iterator is infinite and may cause problems if the iterator eagerly fetches data for each source when iterated (rather than producing sources that only load data through their streams). Prefer using the {@link #concat(Iterable)} overload if possible. @param sources the sources to concatenate @return a {@code CharSource} containing the concatenated data @throws NullPointerException if any of {@code sources} is {@code null} @since 15.0
2286 Returns an {@code ImmutableRangeSet} containing each of the specified disjoint ranges. Overlapping ranges and empty ranges are forbidden, though adjacent ranges are permitted and will be merged. @throws IllegalArgumentException if any ranges overlap or are empty @since 21.0
2287 Returns an immutable sorted multiset containing the given elements sorted by the given {@code Comparator}. This method iterates over {@code elements} at most once. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if {@code comparator} or any of {@code elements} is null
2288 Returns an immutable sorted multiset containing the elements of a sorted multiset, sorted by the same {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always uses the natural ordering of the elements. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. <p>This method is safe to use even when {@code sortedMultiset} is a synchronized or concurrent collection that is currently being modified by another thread. @throws NullPointerException if {@code sortedMultiset} or any of its elements is null
2289 Returns an {@code ImmutableList} containing the same elements, in the same order, as this collection. <p><b>Performance note:</b> in most cases this method can return quickly without actually copying anything. The exact circumstances under which the copy is performed are undefined and subject to change. @since 2.0
2290 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableSortedSet}, ordered by the specified comparator. <p>If the elements contain duplicates (according to the comparator), only the first duplicate in encounter order will appear in the result. @since 21.0
2291 Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to {@code compareTo()}, only the first one specified is included. <p>This method is not type-safe, as it may be called on elements that are not mutually comparable. @throws ClassCastException if the elements are not mutually comparable @throws NullPointerException if any of {@code elements} is null
2292 Returns a newly-created immutable bimap, or throws an exception if any key or value was added more than once. The iteration order of the returned bimap is the order in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case entries are sorted by value. @throws IllegalArgumentException if duplicate keys or values were added @since 31.0
2293 This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less than (or equal to, if {@code inclusive}) {@code toKey}. <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code toKey}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code toKey}. @since 12.0
2294 This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are greater than (or equal to, if {@code inclusive}) {@code fromKey}. <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code fromKey}. @since 12.0
2295 Indicates whether this domain name represents a <i>public suffix</i>, as defined by the Mozilla Foundation's <a href="http://publicsuffix.org/">Public Suffix List</a> (PSL). A public suffix is one under which Internet users can directly register names, such as {@code com}, {@code co.uk} or {@code pvt.k12.wy.us}. Examples of domain names that are <i>not</i> public suffixes include {@code google.com}, {@code foo.co.uk}, and {@code myblog.blogspot.com}. <p>Public suffixes are a proper superset of {@linkplain #isRegistrySuffix() registry suffixes}. The list of public suffixes additionally contains privately owned domain names under which Internet users can register subdomains. An example of a public suffix that is not a registry suffix is {@code blogspot.com}. Note that it is true that all public suffixes <i>have</i> registry suffixes, since domain name registries collectively control all internet domain names. <p>For considerations on whether the public suffix or registry suffix designation is more suitable for your application, see <a href="https://github.com/google/guava/wiki/InternetDomainNameExplained">this article</a>. @return {@code true} if this domain name appears exactly on the public suffix list @since 6.0
2296 Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix}, including if it is a public suffix itself. For example, returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code invalid} or {@code google.invalid}. This is the recommended method for determining whether a domain is potentially an addressable host. <p>Note that this method is equivalent to {@link #hasRegistrySuffix()} because all registry suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes. @since 6.0
2297 Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix}, while not being a public suffix itself. For example, returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and {@code myblog.blogspot.com}, but not for {@code com}, {@code co.uk}, {@code google.invalid}, or {@code blogspot.com}. <p>This method can be used to determine whether it will probably be possible to set cookies on the domain, though even that depends on individual browsers' implementations of cookie controls. See <a href="http://www.ietf.org/rfc/rfc2109.txt">RFC 2109</a> for details. @since 6.0
2298 Indicates whether this domain name is composed of exactly one subdomain component followed by a {@linkplain #isPublicSuffix() public suffix}. For example, returns {@code true} for {@code google.com} {@code foo.co.uk}, and {@code myblog.blogspot.com}, but not for {@code www.google.com}, {@code co.uk}, or {@code blogspot.com}. <p>This method can be used to determine whether a domain is probably the highest level for which cookies may be set, though even that depends on individual browsers' implementations of cookie controls. See <a href="http://www.ietf.org/rfc/rfc2109.txt">RFC 2109</a> for details. @since 6.0
2299 Indicates whether this domain name represents a <i>registry suffix</i>, as defined by a subset of the Mozilla Foundation's <a href="http://publicsuffix.org/">Public Suffix List</a> (PSL). A registry suffix is one under which Internet users can directly register names via a domain name registrar, and have such registrations lawfully protected by internet-governing bodies such as ICANN. Examples of registry suffixes include {@code com}, {@code co.uk}, and {@code pvt.k12.wy.us}. Examples of domain names that are <i>not</i> registry suffixes include {@code google.com} and {@code foo.co.uk}. <p>Registry suffixes are a proper subset of {@linkplain #isPublicSuffix() public suffixes}. The list of public suffixes additionally contains privately owned domain names under which Internet users can register subdomains. An example of a public suffix that is not a registry suffix is {@code blogspot.com}. Note that it is true that all public suffixes <i>have</i> registry suffixes, since domain name registries collectively control all internet domain names. <p>For considerations on whether the public suffix or registry suffix designation is more suitable for your application, see <a href="https://github.com/google/guava/wiki/InternetDomainNameExplained">this article</a>. @return {@code true} if this domain name appears exactly on the public suffix list as part of the registry suffix section (labelled "ICANN"). @since 23.3
2300 Indicates whether this domain name ends in a {@linkplain #isRegistrySuffix() registry suffix}, including if it is a registry suffix itself. For example, returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code invalid} or {@code google.invalid}. <p>Note that this method is equivalent to {@link #hasPublicSuffix()} because all registry suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes. @since 23.3
2301 Indicates whether this domain name ends in a {@linkplain #isRegistrySuffix() registry suffix}, while not being a registry suffix itself. For example, returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and {@code blogspot.com}, but not for {@code com}, {@code co.uk}, or {@code google.invalid}. @since 23.3
2302 Indicates whether this domain name is composed of exactly one subdomain component followed by a {@linkplain #isRegistrySuffix() registry suffix}. For example, returns {@code true} for {@code google.com}, {@code foo.co.uk}, and {@code blogspot.com}, but not for {@code www.google.com}, {@code co.uk}, or {@code myblog.blogspot.com}. <p><b>Warning:</b> This method should not be used to determine the probable highest level parent domain for which cookies may be set. Use {@link #topPrivateDomain()} for that purpose. @since 23.3
2303 Returns an immutable map containing the given entries, with keys sorted by the provided comparator. @throws NullPointerException if any key or value in {@code map} is null @throws IllegalArgumentException if any two keys are equal according to the comparator @since 19.0
2304 Returns an immutable map containing the same entries as the provided sorted map, with the same ordering. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if any key or value in {@code map} is null
2305 Returns an immutable copy of the current contents of this set view. Does not support null elements. <p><b>Warning:</b> this may have unexpected results if a backing set of this view uses a nonstandard notion of equivalence, for example if it is a {@link TreeSet} using a comparator that is inconsistent with {@link Object#equals(Object)}.
2306 Returns the raw types of the types in this set, in the same order.
2307 Removes the element at position {@code index}. <p>Normally this method leaves the elements at up to {@code index - 1}, inclusive, untouched. Under these circumstances, it returns {@code null}. <p>Occasionally, in order to maintain the heap invariant, it must swap a later element of the list with one before {@code index}. Under these circumstances it returns a pair of elements as a {@link MoveDesc}. The first one is the element that was previously at the end of the heap and is now at some position before {@code index}. The second element is the one that was swapped down to replace the element at {@code index}. This fact is used by iterator.remove so as to visit elements during a traversal once and only once.
2308 Returns the square root of {@code x}, rounded with the specified rounding mode. @throws IllegalArgumentException if {@code x < 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code sqrt(x)} is not an integer
2309 Returns an immutable set containing each of {@code elements}, minus duplicates, in the order each appears first in the source iterator. @throws NullPointerException if any of {@code elements} is null
2310 Recursively scan the given directory, adding resources for each file encountered. Symlinks which have already been traversed in the current tree path will be skipped to eliminate cycles; otherwise symlinks are traversed. @param directory the root of the directory to scan @param packagePrefix resource path prefix inside {@code classloader} for any files found under {@code directory} @param currentPath canonical files already visited in the current directory tree path, for cycle elimination
2311 Returns the class path URIs specified by the {@code Class-Path} manifest attribute, according to <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/jar/jar.html#Main_Attributes">JAR File Specification</a>. If {@code manifest} is null, it means the jar file has no manifest, and an empty set will be returned.
2312 Returns the raw type of {@code T}. Formally speaking, if {@code T} is returned by {@link java.lang.reflect.Method#getGenericReturnType}, the raw type is what's returned by {@link java.lang.reflect.Method#getReturnType} of the same method object. Specifically: <ul> <li>If {@code T} is a {@code Class} itself, {@code T} itself is returned. <li>If {@code T} is a {@link ParameterizedType}, the raw type of the parameterized type is returned. <li>If {@code T} is a {@link GenericArrayType}, the returned type is the corresponding array class. For example: {@code List<Integer>[] => List[]}. <li>If {@code T} is a type variable or a wildcard type, the raw type of the first upper bound is returned. For example: {@code <X extends Foo> => Foo}. </ul>
2313 Returns the {@code k} greatest elements of the given iterable according to this ordering, in order from greatest to least. If there are fewer than {@code k} elements present, all will be included. <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple elements are equivalent, it is undefined which will come first. <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterable).collect(Comparators.greatest(k, thisComparator))} instead. @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in <i>descending order</i> @throws IllegalArgumentException if {@code k} is negative @since 8.0
2314 Waits for the all the services to reach a terminal state for no more than the given time. After this method returns all services will either be {@linkplain Service.State#TERMINATED terminated} or {@linkplain Service.State#FAILED failed}. @param timeout the maximum time to wait @throws TimeoutException if not all of the services have stopped within the deadline @since 28.0 (but only since 33.4.0 in the Android flavor)
2315 Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This method waits 120 seconds before continuing with JVM termination, even if the executor has not finished its work. <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}. @param executor the executor to modify to make sure it exits when the application is finished @return an unmodifiable version of the input which will not hang the JVM
2316 Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}. @param executor the executor to modify to make sure it exits when the application is finished @param terminationTimeout how long to wait for the executor to finish before terminating the JVM @return an unmodifiable version of the input which will not hang the JVM @since 28.0 (but only since 33.4.0 in the Android flavor)
2317 Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This method waits 120 seconds before continuing with JVM termination, even if the executor has not finished its work. <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}. @param executor the executor to modify to make sure it exits when the application is finished @return an unmodifiable version of the input which will not hang the JVM
2318 Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}. @param executor the executor to modify to make sure it exits when the application is finished @param terminationTimeout how long to wait for the executor to finish before terminating the JVM @return an unmodifiable version of the input which will not hang the JVM @since 28.0 (but only since 33.4.0 in the Android flavor)
2319 Performs eviction if the segment is over capacity. Avoids flushing the entire cache if the newest entry exceeds the maximum weight all on its own. @param newest the most recently added entry
2320 Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy} for no more than the given time. The manager will become healthy after all the component services have reached the {@linkplain State#RUNNING running} state. @param timeout the maximum time to wait @throws TimeoutException if not all of the services have finished starting within the deadline @throws IllegalStateException if the service manager reaches a state from which it cannot become {@linkplain #isHealthy() healthy}. @since 28.0 (but only since 33.4.0 in the Android flavor)
2321 Returns the service load times. This value will only return startup times for services that have finished starting. @return Map of services and their corresponding startup time, the map entries will be ordered by startup time. @since 31.0 (but only since 33.4.0 in the Android flavor)
2322 @since 18.0
2323 Equivalent to {@code newReentrantLock(lockName, false)}.
2324 Equivalent to {@code newReentrantReadWriteLock(lockName, false)}.
2325 Validation method used by {@code from} to ensure that the domain name is syntactically valid according to RFC 1035. @return Is the domain name syntactically valid?
2326 Registers all subscriber methods on the given listener object.
2327 Unregisters all subscribers on the given listener object.
2328 Returns an {@link ImmutableNetwork.Builder} with the properties of this {@link NetworkBuilder}. <p>The returned builder can be used for populating an {@link ImmutableNetwork}. @since 28.0
2329 Returns the subgraph of {@code graph} induced by {@code nodes}. This subgraph is a new graph that contains all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges} from {@code graph} for which both nodes are contained by {@code nodes}. @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph
2330 Creates a mutable copy of {@code graph} with the same nodes and edges.
2331 Returns an {@link ImmutableValueGraph.Builder} with the properties of this {@link ValueGraphBuilder}. <p>The returned builder can be used for populating an {@link ImmutableValueGraph}. <p>Note that the returned builder will always have {@link #incidentEdgeOrder} set to {@link ElementOrder#stable()}, regardless of the value that was set in this builder. @since 28.0
2332 Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered map.
2333 Returns a sorted map containing the mappings in {@code unfiltered} that satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the map's entries have a {@link Entry#setValue} method that throws an {@link IllegalArgumentException} when the existing key and the provided value don't satisfy the predicate. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings that satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. @since 14.0
2334 Returns a sorted map containing the mappings in {@code unfiltered} that satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the map's entries have a {@link Entry#setValue} method that throws an {@link IllegalArgumentException} when the existing key and the provided value don't satisfy the predicate. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings that satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. @since 11.0
2335 Returns a map containing the mappings in {@code unfiltered} whose values satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()}, {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings whose values satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
2336 Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys and values are the result of applying the provided mapping functions to the input elements. <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}), the values are merged using the specified merging function. If the merging function returns {@code null}, then the collector removes the value that has been computed for the key thus far (though future occurrences of the key would reinsert it). <p>Entries will appear in the encounter order of the first occurrence of the key. @since 21.0
2337 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableRangeMap}. As in {@link Builder}, overlapping ranges are not permitted. @since 23.1
2338 Returns an immutable sorted multiset containing the given elements sorted by their natural ordering. To create a copy of a {@code SortedMultiset} that preserves the comparator, call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once. <p>Note that if {@code s} is a {@code Multiset<String>}, then {@code ImmutableSortedMultiset.copyOf(s)} returns an {@code ImmutableSortedMultiset<String>} containing each of the strings in {@code s}, while {@code ImmutableSortedMultiset.of(s)} returns an {@code ImmutableSortedMultiset<Multiset<String>>} containing one element (the given multiset itself). <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. <p>This method is not type-safe, as it may be called on elements that are not mutually comparable. @throws ClassCastException if the elements are not mutually comparable @throws NullPointerException if any of {@code elements} is null
2339 Returns a newly-created {@code ImmutableSortedMultiset} based on the contents of the {@code Builder}.
2340 Returns a new {@link WildcardType} with {@code upperBound}.
2341 Returns a new {@link WildcardType} with {@code lowerBound}.
2342 Returns a {@link Collection} of all the permutations of the specified {@link Iterable} using the specified {@link Comparator} for establishing the lexicographical ordering. <p>Examples: {@snippet : for (List<String> perm : orderedPermutations(asList("b", "c", "a"))) { println(perm); } // -> ["a", "b", "c"] // -> ["a", "c", "b"] // -> ["b", "a", "c"] // -> ["b", "c", "a"] // -> ["c", "a", "b"] // -> ["c", "b", "a"] for (List<Integer> perm : orderedPermutations(asList(1, 2, 2, 1))) { println(perm); } // -> [1, 1, 2, 2] // -> [1, 2, 1, 2] // -> [1, 2, 2, 1] // -> [2, 1, 1, 2] // -> [2, 1, 2, 1] // -> [2, 2, 1, 1] } <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations Generation, described in Knuth's "The Art of Computer Programming", Volume 4, Chapter 7, Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the first permutation will be in ascending order, and the last will be in descending order. <p>Elements that compare equal are considered equal and no new permutations are created by swapping them. <p>An empty iterable has only one permutation, which is an empty list. @param elements the original iterable whose elements have to be permuted. @param comparator a comparator for the iterable's elements. @return an immutable {@link Collection} containing all the different permutations of the original iterable. @throws NullPointerException If the specified iterable is null, has any null elements, or if the specified comparator is null. @since 12.0
2343 Returns an {@code ImmutableList} containing all of the elements from this {@code FluentIterable} in the order specified by {@code comparator}. To produce an {@code ImmutableList} sorted by its natural ordering, use {@code toSortedList(Ordering.natural())}. <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code stream.sorted(comparator).collect()}. @param comparator the function by which to sort list elements @throws NullPointerException if any element of this iterable is {@code null} @since 14.0 (since 13.0 as {@code toSortedImmutableList()}).
2344 Returns an immutable list containing the given elements, in order. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. <p>Note that if {@code list} is a {@code List<String>}, then {@code ImmutableList.copyOf(list)} returns an {@code ImmutableList<String>} containing each of the strings in {@code list}, while {@code ImmutableList.of(list)} returns an {@code ImmutableList<List<String>>} containing one element (the given list itself). <p>This method is safe to use even when {@code elements} is a synchronized or concurrent collection that is currently being modified by another thread. @throws NullPointerException if {@code elements} contains a null element
2345 Returns a newly-created immutable bimap. The iteration order of the returned bimap is the order in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case entries are sorted by value. <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method will throw an exception if there are duplicate keys or values. The {@code build()} method will soon be deprecated. @throws IllegalArgumentException if duplicate keys or values were added
2346 Returns a newly-created immutable map, or throws an exception if any key was added more than once. The iteration order of the returned map is the order in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case entries are sorted by value. @throws IllegalArgumentException if duplicate keys were added @since 31.0
2347 Returns a newly-created immutable map, using the last value for any key that was added more than once. The iteration order of the returned map is the order in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case entries are sorted by value. If a key was added more than once, it appears in iteration order based on the first time it was added, again unless {@link #orderEntriesByValue} was called. <p>In the current implementation, all values associated with a given key are stored in the {@code Builder} object, even though only one of them will be used in the built map. If there can be many repeated keys, it may be more space-efficient to use a {@link java.util.LinkedHashMap LinkedHashMap} and {@link ImmutableMap#copyOf(Map)} rather than {@code ImmutableMap.Builder}. @since 31.1
2348 This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less than {@code toKey}. <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code toKey}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code toKey}.
2349 This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges from {@code fromKey} to {@code toKey}, inclusive or exclusive as indicated by the boolean flags. <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}. @since 12.0
2350 This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are greater than or equals to {@code fromKey}. <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code fromKey}.
2351 Returns an immutable map containing the given entries, with keys sorted by their natural ordering. <p>This method is not type-safe, as it may be called on a map with keys that are not mutually comparable. @throws NullPointerException if any key or value in {@code map} is null @throws IllegalArgumentException if any two keys are equal according to the comparator @since 19.0
2352 Returns an immutable map containing the same entries as {@code map}, sorted by the natural ordering of the keys. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. <p>This method is not type-safe, as it may be called on a map with keys that are not mutually comparable. @throws ClassCastException if the keys in {@code map} are not mutually comparable @throws NullPointerException if any key or value in {@code map} is null @throws IllegalArgumentException if any two keys are equal according to their natural ordering
2353 Returns an immutable map containing the same entries as {@code map}, with keys sorted by the provided comparator. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if any key or value in {@code map} is null @throws IllegalArgumentException if any two keys are equal according to the comparator
2354 Returns every possible list that can be formed by choosing one element from each of the given sets in order; the "n-ary <a href="http://en.wikipedia.org/wiki/Cartesian_product">Cartesian product</a>" of the sets. For example: {@snippet : Sets.cartesianProduct(ImmutableList.of( ImmutableSet.of(1, 2), ImmutableSet.of("A", "B", "C"))) } <p>returns a set containing six lists: <ul> <li>{@code ImmutableList.of(1, "A")} <li>{@code ImmutableList.of(1, "B")} <li>{@code ImmutableList.of(1, "C")} <li>{@code ImmutableList.of(2, "A")} <li>{@code ImmutableList.of(2, "B")} <li>{@code ImmutableList.of(2, "C")} </ul> <p>The result is guaranteed to be in the "traditional", lexicographical order for Cartesian products that you would get from nesting for loops: {@snippet : for (B b0 : sets.get(0)) { for (B b1 : sets.get(1)) { ... ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...); // operate on tuple } } } <p>Note that if any input set is empty, the Cartesian product will also be empty. If no sets at all are provided (an empty list), the resulting Cartesian product has one element, an empty list (counter-intuitive, but mathematically consistent). <p><i>Performance notes:</i> while the cartesian product of sets of size {@code m, n, p} is a set of size {@code m x n x p}, its actual memory consumption is much smaller. When the cartesian set is constructed, the input sets are merely copied. Only as the resulting set is iterated are the individual lists created, and these are not retained after iteration. @param sets the sets to choose elements from, in the order that the elements chosen from those sets should appear in the resulting lists @param <B> any common base class shared by all axes (often just {@link Object}) @return the Cartesian product, as an immutable set containing immutable lists @throws NullPointerException if {@code sets}, any one of the {@code sets}, or any element of a provided set is null @throws IllegalArgumentException if the cartesian product size exceeds the {@code int} range @since 2.0
2355 Removes only this exact instance, not others that are equals()
2356 Removes and returns the value at {@code index}.
2357 Returns an immutable set containing each of {@code elements}, minus duplicates, in the order each appears first in the source iterable. This method iterates over {@code elements} only once. <p><b>Performance note:</b> This method will sometimes recognize that the actual copy operation is unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only once. This reduces the expense of habitually making defensive copies at API boundaries. However, the precise conditions for skipping the copy operation are undefined. @throws NullPointerException if any of {@code elements} is null
2358 Returns the {@link Invokable} for {@code constructor}, which must be a member of {@code T}. @since 14.0
2359 Returns true if this type is a subtype of the given {@code type}. "Subtype" is defined according to <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1">the rules for type arguments</a> introduced with Java generics. @since 19.0
2360 Returns the {@link Invokable} for {@code method}, which must be a member of {@code T}. @since 14.0
2361 Cleanup expired entries when the lock is available.
2362 Creates a {@code CycleDetectingLockFactory.WithExplicitOrdering<E>}.
2363 Registers all subscriber methods on {@code object} to receive events. @param object object whose subscriber methods should be registered.
2364 Unregisters all subscriber methods on a registered {@code object}. @param object object whose subscriber methods should be unregistered. @throws IllegalArgumentException if the object was not previously registered.
2365 Returns an {@link ImmutableGraph.Builder} with the properties of this {@link GraphBuilder}. <p>The returned builder can be used for populating an {@link ImmutableGraph}. <p>Note that the returned builder will always have {@link #incidentEdgeOrder} set to {@link ElementOrder#stable()}, regardless of the value that was set in this builder. @since 28.0
2366 Returns a bimap containing the mappings in {@code unfiltered} that satisfy a predicate. The returned bimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the bimap and its views. When given a key/value pair that doesn't satisfy the predicate, the bimap's {@code put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the map's entries have an {@link Entry#setValue} method that throws an {@link IllegalArgumentException} when the existing key and the provided value don't satisfy the predicate. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered bimap or its views, only mappings that satisfy the filter will be removed from the underlying bimap. <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered bimap and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented at {@link Predicate#apply}. @since 14.0
2367 Returns a navigable map containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings whose keys satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 14.0
2368 Returns a navigable map containing the mappings in {@code unfiltered} whose values satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()}, {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings whose values satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 14.0
2369 Returns a sorted map containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings whose keys satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 11.0
2370 Returns a sorted map containing the mappings in {@code unfiltered} whose values satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()}, {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings whose values satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 11.0
2371 Returns an immutable sorted multiset containing the given elements sorted by the given {@code Comparator}. @throws NullPointerException if {@code comparator} or any of {@code elements} is null
2372 Returns all locations that {@code classloader} and parent loaders load classes and resources from. Callers can {@linkplain LocationInfo#scanResources scan} individual locations selectively or even in parallel.
2373 Returns {@code ? extends X} if any of {@code bounds} is a subtype of {@code X[]}; or null otherwise.
2374 Returns the array type of {@code componentType}.
2375 Returns a {@link Collection} of all the permutations of the specified {@link Iterable}. <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations Generation, described in Knuth's "The Art of Computer Programming", Volume 4, Chapter 7, Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the first permutation will be in ascending order, and the last will be in descending order. <p>Duplicate elements are considered equal. For example, the list [1, 1] will have only one permutation, instead of two. This is why the elements have to implement {@link Comparable}. <p>An empty iterable has only one permutation, which is an empty list. <p>This method is equivalent to {@code Collections2.orderedPermutations(list, Ordering.natural())}. @param elements the original iterable whose elements have to be permuted. @return an immutable {@link Collection} containing all the different permutations of the original iterable. @throws NullPointerException if the specified iterable is null or has any null elements. @since 12.0
2376 Returns an immutable multiset containing the given elements, in the "grouped iteration order" described in the class documentation. @throws NullPointerException if any of {@code elements} is null
2377 Returns an immutable multiset containing the given elements, in the "grouped iteration order" described in the class documentation. @throws NullPointerException if any of {@code elements} is null
2378 Returns a copy of {@code multiset} as an {@link ImmutableMultiset} whose iteration order puts the highest count first, with ties broken by the iteration order of the original multiset. @since 11.0
2379 Returns a {@link Collection} of all the permutations of the specified {@link Collection}. <p><i>Notes:</i> This is an implementation of the Plain Changes algorithm for permutations generation, described in Knuth's "The Art of Computer Programming", Volume 4, Chapter 7, Section 7.2.1.2. <p>If the input list contains equal elements, some of the generated permutations will be equal. <p>An empty collection has only one permutation, which is an empty list. @param elements the original collection whose elements have to be permuted. @return an immutable {@link Collection} containing all the different permutations of the original collection. @throws NullPointerException if the specified collection is null or has any null elements. @since 12.0
2380 Returns an immutable list containing the given elements, in order. If {@code elements} is a {@link Collection}, this method behaves exactly as {@link #copyOf(Collection)}; otherwise, it behaves exactly as {@code copyOf(elements.iterator()}. @throws NullPointerException if {@code elements} contains a null element
2381 Returns an immutable copy of the specified {@code RangeSet}.
2382 Returns an immutable sorted set containing the elements of a sorted set, sorted by the same {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always uses the natural ordering of the elements. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. <p>This method is safe to use even when {@code sortedSet} is a synchronized or concurrent collection that is currently being modified by another thread. @throws NullPointerException if {@code sortedSet} or any of its elements is null
2383 Reads all the lines of this source as a list of strings. The returned list will be empty if this source is empty. <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code \n}. If the source's content does not end in a line termination sequence, it is treated as if it does. @throws IOException if an I/O error occurs while reading from this source
2384 Returns a new immutable class-to-instance map containing the entries provided to this builder. @throws IllegalArgumentException if duplicate keys were added
2385 Creates an ImmutableListMultimap from an asMap.entrySet.
2386 Returns a newly-created immutable map. The iteration order of the returned map is the order in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case entries are sorted by value. <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method will throw an exception if there are duplicate keys. The {@code build()} method will soon be deprecated. @throws IllegalArgumentException if duplicate keys were added
2387 Creates an ImmutableSetMultimap from an asMap.entrySet.
2388 Creates an {@code ImmutableMap<String, String>} from a {@code Properties} instance. Properties normally derive from {@code Map<Object, Object>}, but they typically contain strings, which is awkward. This method lets you get a plain-old-{@code Map} out of a {@code Properties}. @param properties a {@code Properties} object to be converted @return an immutable map containing all the entries in {@code properties} @throws ClassCastException if any key in {@code properties} is not a {@code String} @throws NullPointerException if any key or value in {@code properties} is null
2389 Returns a map from the ith element of list to i.
2390 Returns a new immutable type-to-instance map containing the entries provided to this builder. @throws IllegalArgumentException if duplicate keys were added
2391 Returns a new {@code TypeResolver} with {@code variable} mapping to {@code type}.
2392 Returns an immutable map whose keys are the distinct elements of {@code keys} and whose value for each key was computed by {@code valueFunction}. The map's iteration order is the order of the first appearance of each key in {@code keys}. <p>When there are multiple instances of a key in {@code keys}, it is unspecified whether {@code valueFunction} will be applied to more than one instance of that key and, if it is, which result will be mapped to that key in the returned map. @throws NullPointerException if any element of {@code keys} is {@code null}, or if {@code valueFunction} produces {@code null} for any key @since 14.0
2393 This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges from {@code fromKey}, inclusive, to {@code toKey}, exclusive. <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}.
2394 Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose keys and values are the result of applying the provided mapping functions to the input elements. <p>If the mapped keys contain duplicates (according to the comparator), the values are merged using the specified merging function. Entries will appear in the encounter order of the first occurrence of the key. @since 21.0
2395 Removes and returns the greatest element of this queue, or returns {@code null} if the queue is empty.
2396 Removes and returns the greatest element of this queue. @throws NoSuchElementException if the queue is empty
2397 Returns an {@code ImmutableSet} containing all of the elements from this fluent iterable with duplicates removed. <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableSet#toImmutableSet} to {@code stream.collect()}. @throws NullPointerException if any element is {@code null} @since 14.0 (since 12.0 as {@code toImmutableSet()}).
2398 Returns true if this type is a supertype of the given {@code type}. "Supertype" is defined according to <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1">the rules for type arguments</a> introduced with Java generics. @since 19.0
2399 Returns true if this type is a supertype of the given {@code type}. "Supertype" is defined according to <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1">the rules for type arguments</a> introduced with Java generics. @since 19.0
2400 Returns true if this type is a subtype of the given {@code type}. "Subtype" is defined according to <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1">the rules for type arguments</a> introduced with Java generics. @since 19.0
2401 Drain the key and value reference queues, cleaning up internal entries containing garbage collected keys or values.
2402 Returns a bimap containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned bimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the bimap and its views. When given a key that doesn't satisfy the predicate, the bimap's {@code put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered bimap or its views, only mappings that satisfy the filter will be removed from the underlying bimap. <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every key in the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered bimap and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented at {@link Predicate#apply}. @since 14.0
2403 Returns a bimap containing the mappings in {@code unfiltered} whose values satisfy a predicate. The returned bimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the bimap and its views. When given a value that doesn't satisfy the predicate, the bimap's {@code put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the map's entries have a {@link Entry#setValue} method that throws an {@link IllegalArgumentException} when the provided value doesn't satisfy the predicate. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered bimap or its views, only mappings that satisfy the filter will be removed from the underlying bimap. <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every value in the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered bimap and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented at {@link Predicate#apply}. @since 14.0
2404 Returns an immutable sorted multiset containing the given elements sorted by their natural ordering. <p>This method is not type-safe, as it may be called on elements that are not mutually comparable. @throws ClassCastException if the elements are not mutually comparable @throws NullPointerException if any of {@code elements} is null
2405 Returns the type token representing the generic type declaration of {@code cls}. For example: {@code TypeToken.getGenericType(Iterable.class)} returns {@code Iterable<T>}. <p>If {@code cls} isn't parameterized and isn't a generic array, the type token of the class is returned.
2406 Returns an {@code ImmutableMultiset} containing all of the elements from this fluent iterable. <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableMultiset#toImmutableMultiset} to {@code stream.collect()}. @throws NullPointerException if any element is null @since 19.0
2407 Returns a newly-created {@code ImmutableMultiset} based on the contents of the {@code Builder}.
2408 Returns every possible list that can be formed by choosing one element from each of the given lists in order; the "n-ary <a href="http://en.wikipedia.org/wiki/Cartesian_product">Cartesian product</a>" of the lists. For example: {@snippet : Lists.cartesianProduct(ImmutableList.of( ImmutableList.of(1, 2), ImmutableList.of("A", "B", "C"))) } <p>returns a list containing six lists in the following order: <ul> <li>{@code ImmutableList.of(1, "A")} <li>{@code ImmutableList.of(1, "B")} <li>{@code ImmutableList.of(1, "C")} <li>{@code ImmutableList.of(2, "A")} <li>{@code ImmutableList.of(2, "B")} <li>{@code ImmutableList.of(2, "C")} </ul> <p>The result is guaranteed to be in the "traditional", lexicographical order for Cartesian products that you would get from nesting for loops: {@snippet : for (B b0 : lists.get(0)) { for (B b1 : lists.get(1)) { ... ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...); // operate on tuple } } } <p>Note that if any input list is empty, the Cartesian product will also be empty. If no lists at all are provided (an empty list), the resulting Cartesian product has one element, an empty list (counter-intuitive, but mathematically consistent). <p><i>Performance notes:</i> while the cartesian product of lists of size {@code m, n, p} is a list of size {@code m x n x p}, its actual memory consumption is much smaller. When the cartesian product is constructed, the input lists are merely copied. Only as the resulting list is iterated are the individual lists created, and these are not retained after iteration. @param lists the lists to choose elements from, in the order that the elements chosen from those lists should appear in the resulting lists @param <B> any common base class shared by all axes (often just {@link Object}) @return the Cartesian product, as an immutable list containing immutable lists @throws IllegalArgumentException if the size of the cartesian product would be greater than {@link Integer#MAX_VALUE} @throws NullPointerException if {@code lists}, any one of the {@code lists}, or any element of a provided list is null @since 19.0
2409 Creates a CacheBuilderSpec from a string. @param cacheBuilderSpecification the string form
2410 Returns an {@code ImmutableList} containing all of the elements from this fluent iterable in proper sequence. <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code stream.collect()}. @throws NullPointerException if any element is {@code null} @since 14.0 (since 12.0 as {@code toImmutableList()}).
2411 Returns an immutable list of paths to the files contained in the given directory. @throws NoSuchFileException if the file does not exist <i>(optional specific exception)</i> @throws NotDirectoryException if the file could not be opened because it is not a directory <i>(optional specific exception)</i> @throws IOException if an I/O error occurs
2412 Constructor used to implement {@link #from(String)}, and from subclasses.
2413 Creates a new {@code ListenableFuture} whose value is a list containing the values of all its input futures, if all succeed. <p>The list of results is in the same order as the input list. <p>This differs from {@link #successfulAsList(Iterable)} in that it will return a failed future if any of the items fails. <p>Canceling this future will attempt to cancel all the component futures, and if any of the provided futures fails or is canceled, this one is, too. @param futures futures to combine @return a future that provides a list of the results of the component futures @since 10.0
2414 Creates a {@link FutureCombiner} that processes the completed futures whether or not they're successful. <p>Any failures from the input futures will not be propagated to the returned future. @since 20.0
2415 Creates a {@link FutureCombiner} requiring that all passed in futures are successful. <p>If any input fails, the returned future fails immediately. @since 20.0
2416 Creates a new {@code ListenableFuture} whose value is a list containing the values of all its successful input futures. The list of results is in the same order as the input list, and if any of the provided futures fails or is canceled, its corresponding position will contain {@code null} (which is indistinguishable from the future having a successful value of {@code null}). <p>The list of results is in the same order as the input list. <p>This differs from {@link #allAsList(Iterable)} in that it's tolerant of failed futures for any of the items, representing them as {@code null} in the result list. <p>Canceling this future will attempt to cancel all the component futures. @param futures futures to combine @return a future that provides a list of the results of the component futures @since 10.0
2417 Can't use Iterables.toArray because it's not gwt compatible
2418 Returns an {@code ImmutableRangeSet} representing the union of the specified ranges. <p>This is the smallest {@code RangeSet} which encloses each of the specified ranges. Duplicate or connected ranges are permitted, and will be coalesced in the result. @since 21.0
2419 Returns a new range set consisting of the intersection of this range set and {@code other}. <p>This is essentially the same as {@code TreeRangeSet.create(this).removeAll(other.complement())} except it returns an {@code ImmutableRangeSet}. @since 21.0
2420 Returns a new range set consisting of the difference of this range set and {@code other}. <p>This is essentially the same as {@code TreeRangeSet.create(this).removeAll(other)} except it returns an {@code ImmutableRangeSet}. @since 21.0
2421 Returns a {@link Collector} that accumulates elements into an {@code ImmutableBiMap} whose keys and values are the result of applying the provided mapping functions to the input elements. Entries appear in the result {@code ImmutableBiMap} in encounter order. <p>If the mapped keys or values contain duplicates (according to {@link Object#equals(Object)}), an {@code IllegalArgumentException} is thrown when the collection operation is performed. (This differs from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which throws an {@code IllegalStateException}.) @since 21.0
2422 Returns an immutable map containing the same entries as {@code map}. If {@code map} somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose comparator is not <i>consistent with equals</i>), the results of this method are undefined. <p><b>Note:</b> Despite what the method name suggests, if {@code map} is an {@code ImmutableClassToInstanceMap}, no copy will actually be performed. @throws NullPointerException if any key or value in {@code map} is null @throws ClassCastException if any value is not an instance of the type specified by its key
2423 Returns an immutable multimap containing the same mappings as {@code multimap}. The generated multimap's key and value orderings correspond to the iteration ordering of the {@code multimap.asMap()} view. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if any key or value in {@code multimap} is null
2424 Returns a newly-created immutable multimap.
2425 @since 28.1
2426 Returns a newly-created immutable set multimap.
2427 Returns a map with the given {@code values}, indexed by keys derived from those values. In other words, each input value produces an entry in the map whose key is the result of applying {@code keyFunction} to that value. These entries appear in the same order as the input values. Example usage: {@snippet : Color red = new Color("red", 255, 0, 0); ... Iterator<Color> allColors = ImmutableSet.of(red, green, blue).iterator(); Map<String, Color> colorForName = uniqueIndex(allColors, toStringFunction()); assertThat(colorForName).containsEntry("red", red); } <p>If your index may associate multiple values with each key, use {@link Multimaps#index(Iterator, Function) Multimaps.index}. @param values the values to use when constructing the {@code Map} @param keyFunction the function used to produce the key for each value @return a map mapping the result of evaluating the function {@code keyFunction} on each value in the input collection to that value @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one value in the input collection @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code keyFunction} produces {@code null} for any value @since 10.0
2428 Returns the set of all subsets of {@code set} of size {@code size}. For example, {@code combinations(ImmutableSet.of(1, 2, 3), 2)} returns the set {@code {{1, 2}, {1, 3}, {2, 3}}}. <p>Elements appear in these subsets in the same iteration order as they appeared in the input set. The order in which these subsets appear in the outer set is undefined. <p>The returned set and its constituent sets use {@code equals} to decide whether two elements are identical, even if the input set uses a different concept of equivalence. <p><i>Performance notes:</i> the memory usage of the returned set is only {@code O(n)}. When the result set is constructed, the input set is merely copied. Only as the result set is iterated are the individual subsets created. Each of these subsets occupies an additional O(n) memory but only for as long as the user retains a reference to it. That is, the set returned by {@code combinations} does not retain the individual subsets. @param set the set of elements to take combinations of @param size the number of elements per combination @return the set of all combinations of {@code size} elements from {@code set} @throws IllegalArgumentException if {@code size} is not between 0 and {@code set.size()} inclusive @throws NullPointerException if {@code set} is or contains {@code null} @since 23.0
2429 Returns an immutable copy of {@code graph}.
2430 Returns a new {@code TypeResolver} with {@code variable} mapping to {@code type}.
2431 Returns an immutable map whose keys are the distinct elements of {@code keys} and whose value for each key was computed by {@code valueFunction}. The map's iteration order is the order of the first appearance of each key in {@code keys}. <p>When there are multiple instances of a key in {@code keys}, it is unspecified whether {@code valueFunction} will be applied to more than one instance of that key and, if it is, which result will be mapped to that key in the returned map. <p>If {@code keys} is a {@link Set}, a live view can be obtained instead of a copy using {@link Maps#asMap(Set, Function)}. <p><b>Note:</b> on Java 8+, it is usually better to use streams. For example: {@snippet : import static com.google.common.collect.ImmutableMap.toImmutableMap; ... ImmutableMap<Color, String> colorNames = allColors.stream().collect(toImmutableMap(c -> c, c -> c.toString())); } <p>Streams provide a more standard and flexible API and the lambdas make it clear what the keys and values in the map are. @throws NullPointerException if any element of {@code keys} is {@code null}, or if {@code valueFunction} produces {@code null} for any key @since 14.0
2432 Removes and returns the least element of this queue, or returns {@code null} if the queue is empty.
2433 Adds the given element to this queue. If this queue has a maximum size, after adding {@code element} the queue will automatically evict its greatest element (according to its comparator), which may be {@code element} itself.
2434 Returns all classes loadable from the current class path. @since 16.0
2435 Returns all top level classes loadable from the current class path. Note that "top-level-ness" is determined heuristically by class name (see {@link ClassInfo#isTopLevel}).
2436 Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code startNodes}, in the order of a breadth-first traversal. This is equivalent to a breadth-first traversal of a graph with an additional root node whose successors are the listed {@code startNodes}. @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph @see #breadthFirst(Object) @since 24.1
2437 Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code startNodes}, in the order of a depth-first pre-order traversal. This is equivalent to a depth-first pre-order traversal of a graph with an additional root node whose successors are the listed {@code startNodes}. @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph @see #depthFirstPreOrder(Object) @since 24.1
2438 Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code startNodes}, in the order of a depth-first post-order traversal. This is equivalent to a depth-first post-order traversal of a graph with an additional root node whose successors are the listed {@code startNodes}. @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph @see #depthFirstPostOrder(Object) @since 24.1
2439 Scans this location and returns all scanned resources. <p>This file and jar files from "Class-Path" entry in the scanned manifest files will be added to {@code scannedFiles}. <p>A file will be scanned at most once even if specified multiple times by one or multiple jar files' "Class-Path" manifest entries. Particularly, if a jar file from the "Class-Path" manifest entry is already in {@code scannedFiles}, either because it was scanned earlier, or it was intentionally added to the set by the caller, it will not be scanned again. <p>Note that when you call {@code location.scanResources(scannedFiles)}, the location will always be scanned even if {@code scannedFiles} already contains it.
2440 Explicitly specifies the return type of this {@code Invokable}.
2441 Cleanup collected entries when the lock is available.
2442 Resolves all type variables in {@code type} and all downstream types and returns a corresponding type with type variables resolved.
2443 {@code A.is(B)} is defined as {@code Foo<A>.isSubtypeOf(Foo<B>)}. <p>Specifically, returns true if any of the following conditions is met: <ol> <li>'this' and {@code formalType} are equal. <li>'this' and {@code formalType} have equal canonical form. <li>{@code formalType} is {@code <? extends Foo>} and 'this' is a subtype of {@code Foo}. <li>{@code formalType} is {@code <? super Foo>} and 'this' is a supertype of {@code Foo}. </ol> Note that condition 2 isn't technically accurate under the context of a recursively bounded type variables. For example, {@code Enum<? extends Enum<E>>} canonicalizes to {@code Enum<?>} where {@code E} is the type variable declared on the {@code Enum} class declaration. It's technically <em>not</em> true that {@code Foo<Enum<? extends Enum<E>>>} is a subtype of {@code Foo<Enum<?>>} according to JLS. See testRecursiveWildcardSubtypeBug() for a real example. <p>It appears that properly handling recursive type bounds in the presence of implicit type bounds is not easy. For now we punt, hoping that this defect should rarely cause issues in real code. @param formalType is {@code Foo<formalType>} a supertype of {@code Foo<T>}? @param declaration The type variable in the context of a parameterized type. Used to infer type bound when {@code formalType} is a wildcard with implicit upper bound.
2444 In reflection, {@code Foo<?>.getUpperBounds()[0]} is always {@code Object.class}, even when Foo is defined as {@code Foo<T extends String>}. Thus directly calling {@code <?>.is(String.class)} will return false. To mitigate, we canonicalize wildcards by enforcing the following invariants: <ol> <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For example both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to {@code Enum<? extends Enum<E>}. <li>{@code canonicalize(t)} produces a "literal" supertype of t. For example: {@code Enum<? extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is a supertype (if we disregard the upper bound is implicitly an Enum too). <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)} and vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}. <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}. </ol>
2445 Constructs a new {@code CacheBuilder} instance with the settings specified in {@code spec}. This is especially useful for command-line configuration of a {@code CacheBuilder}. @param spec a String in the format specified by {@link CacheBuilderSpec} @since 12.0
2446 Returns a CacheBuilderSpec that will prevent caching.
2447 Returns an instance of {@link InternetDomainName} after lenient validation. Specifically, validation against <a href="http://www.ietf.org/rfc/rfc3490.txt">RFC 3490</a> ("Internationalizing Domain Names in Applications") is skipped, while validation against <a href="http://www.ietf.org/rfc/rfc1035.txt">RFC 1035</a> is relaxed in the following ways: <ul> <li>Any part containing non-ASCII characters is considered valid. <li>Underscores ('_') are permitted wherever dashes ('-') are permitted. <li>Parts other than the final part may start with a digit, as mandated by <a href="https://tools.ietf.org/html/rfc1123#section-2">RFC 1123</a>. </ul> @param domain A domain name (not IP address) @throws IllegalArgumentException if {@code domain} is not syntactically valid according to {@link #isValid} @since 10.0 (previously named {@code fromLenient})
2448 Returns a list of delegate futures that correspond to the futures received in the order that they complete. Delegate futures return the same value or throw the same exception as the corresponding input future returns/throws. <p>"In the order that they complete" means, for practical purposes, about what you would expect, but there are some subtleties. First, we do guarantee that, if the output future at index n is done, the output future at index n-1 is also done. (But as usual with futures, some listeners for future n may complete before some for future n-1.) However, it is possible, if one input completes with result X and another later with result Y, for Y to come before X in the output future list. (Such races are impossible to solve without global synchronization of all future completions. And they should have little practical impact.) <p>Cancelling a delegate future propagates to input futures once all the delegates complete, either from cancellation or because an input future has completed. If N futures are passed in, and M delegates are cancelled, the remaining M input futures will be cancelled once N - M of the input futures complete. If all the delegates are cancelled, all the input futures will be too. @since 17.0
2449 Returns a new range set consisting of the union of this range set and {@code other}. <p>This is essentially the same as {@code TreeRangeSet.create(this).addAll(other)} except it returns an {@code ImmutableRangeSet}. @since 21.0
2450 Returns an immutable multimap containing the same mappings as {@code multimap}, in the "key-grouped" iteration order described in the class documentation. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if any key or value in {@code multimap} is null
2451 Returns a newly-created immutable list multimap.
2452 Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys and values are the result of applying the provided mapping functions to the input elements. Entries appear in the result {@code ImmutableMap} in encounter order. <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}, an {@code IllegalArgumentException} is thrown when the collection operation is performed. (This differs from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which throws an {@code IllegalStateException}.) @since 21.0
2453 Returns an immutable multimap containing a single entry.
2454 Returns an immutable multimap containing the given entries, in order. Repeated occurrences of an entry (according to {@link Object#equals}) after the first are ignored.
2455 Returns an immutable multimap containing the given entries, in order. Repeated occurrences of an entry (according to {@link Object#equals}) after the first are ignored.
2456 Returns an immutable multimap containing the given entries, in order. Repeated occurrences of an entry (according to {@link Object#equals}) after the first are ignored.
2457 Returns an immutable multimap containing the given entries, in order. Repeated occurrences of an entry (according to {@link Object#equals}) after the first are ignored.
2458 Returns an immutable multimap containing the specified entries. The returned multimap iterates over keys in the order they were first encountered in the input, and the values for each key are iterated in the order they were encountered. If two values for the same key are {@linkplain Object#equals equal}, the first value encountered is used. @throws NullPointerException if any key, value, or entry is null @since 19.0
2459 Returns an immutable set multimap containing the same mappings as {@code multimap}. The generated multimap's key and value orderings correspond to the iteration ordering of the {@code multimap.asMap()} view. Repeated occurrences of an entry in the multimap after the first are ignored. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if any key or value in {@code multimap} is null
2460 Returns a map with the given {@code values}, indexed by keys derived from those values. In other words, each input value produces an entry in the map whose key is the result of applying {@code keyFunction} to that value. These entries appear in the same order as the input values. Example usage: {@snippet : Color red = new Color("red", 255, 0, 0); ... ImmutableSet<Color> allColors = ImmutableSet.of(red, green, blue); ImmutableMap<String, Color> colorForName = uniqueIndex(allColors, c -> c.toString()); assertThat(colorForName).containsEntry("red", red); } <p>If your index may associate multiple values with each key, use {@link Multimaps#index(Iterable, Function) Multimaps.index}. <p><b>Note:</b> on Java 8+, it is usually better to use streams. For example: {@snippet : import static com.google.common.collect.ImmutableMap.toImmutableMap; ... ImmutableMap<String, Color> colorForName = allColors.stream().collect(toImmutableMap(c -> c.toString(), c -> c)); } <p>Streams provide a more standard and flexible API and the lambdas make it clear what the keys and values in the map are. @param values the values to use when constructing the {@code Map} @param keyFunction the function used to produce the key for each value @return a map mapping the result of evaluating the function {@code keyFunction} on each value in the input collection to that value @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one value in the input collection @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code keyFunction} produces {@code null} for any value
2461 Creates an {@code ArrayTable} filled with {@code null}. @param rowKeys row keys that may be stored in the generated table @param columnKeys column keys that may be stored in the generated table @throws NullPointerException if any of the provided keys is null @throws IllegalArgumentException if {@code rowKeys} or {@code columnKeys} contains duplicates or if exactly one of {@code rowKeys} or {@code columnKeys} is empty.
2462 Returns the set of all possible subsets of {@code set}. For example, {@code powerSet(ImmutableSet.of(1, 2))} returns the set {@code {{}, {1}, {2}, {1, 2}}}. <p>Elements appear in these subsets in the same iteration order as they appeared in the input set. The order in which these subsets appear in the outer set is undefined. Note that the power set of the empty set is not the empty set, but a one-element set containing the empty set. <p>The returned set and its constituent sets use {@code equals} to decide whether two elements are identical, even if the input set uses a different concept of equivalence. <p><i>Performance notes:</i> while the power set of a set with size {@code n} is of size {@code 2^n}, its memory usage is only {@code O(n)}. When the power set is constructed, the input set is merely copied. Only as the power set is iterated are the individual subsets created, and these subsets themselves occupy only a small constant amount of memory. @param set the set of elements to construct a power set from @return the power set, as an immutable set of immutable sets @throws IllegalArgumentException if {@code set} has more than 30 unique elements (causing the power set size to exceed the {@code int} range) @throws NullPointerException if {@code set} is or contains {@code null} @see <a href="http://en.wikipedia.org/wiki/Power_set">Power set article at Wikipedia</a> @since 4.0
2463 A factory that chooses the most space-efficient representation of the table.
2464 Returns a newly-created {@code ImmutableGraph} based on the contents of this {@code Builder}.
2465 Returns an immutable copy of {@code network}.
2466 Returns an immutable copy of {@code graph}.
2467 Returns a resolver that resolves types "covariantly". <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code <T>} is covariantly resolved to {@code <?>} such that return type of {@code List::get} is {@code <?>}.
2468 Returns a resolver that resolves types "invariantly". <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code <T>} cannot be invariantly resolved to {@code <?>} because otherwise the parameter type of {@code List::set} will be {@code <?>} and it'll falsely say any object can be passed into {@code ArrayList<?>::set}. <p>Instead, {@code <?>} will be resolved to a capture in the form of a type variable {@code <capture-of-? extends Object>}, effectively preventing {@code set} from accepting any type.
2469 Returns a new {@code TypeResolver} with type variables in {@code formal} mapping to types in {@code actual}. <p>For example, if {@code formal} is a {@code TypeVariable T}, and {@code actual} is {@code String.class}, then {@code new TypeResolver().where(formal, actual)} will {@linkplain #resolveType resolve} {@code ParameterizedType List<T>} to {@code List<String>}, and resolve {@code Map<T, Something>} to {@code Map<String, Something>} etc. Similarly, {@code formal} and {@code actual} can be {@code Map<K, V>} and {@code Map<String, Integer>} respectively, or they can be {@code E[]} and {@code String[]} respectively, or even any arbitrary combination thereof. @param formal The type whose type variables or itself is mapped to other type(s). It's almost always a bug if {@code formal} isn't a type variable and contains no type variable. Make sure you are passing the two parameters in the right order. @param actual The type that the formal type variable(s) are mapped to. It can be or contain yet other type variables, in which case these type variables will be further resolved if corresponding mappings exist in the current {@code TypeResolver} instance.
2470 Returns an immutable map whose keys are the distinct elements of this {@code FluentIterable} and whose value for each key was computed by {@code valueFunction}. The map's iteration order is the order of the first appearance of each key in this iterable. <p>When there are multiple instances of a key in this iterable, it is unspecified whether {@code valueFunction} will be applied to more than one instance of that key and, if it is, which result will be mapped to that key in the returned map. <p><b>{@code Stream} equivalent:</b> {@code stream.collect(ImmutableMap.toImmutableMap(k -> k, valueFunction))}. @throws NullPointerException if any element of this iterable is {@code null}, or if {@code valueFunction} produces {@code null} for any key @since 14.0
2471 Builds a new min-max priority queue using the previously specified options, and having the given initial elements.
2472 Adds the given element to this queue. If this queue has a maximum size, after adding {@code element} the queue will automatically evict its greatest element (according to its comparator), which may be {@code element} itself. @return {@code true} always
2473 Returns all top level classes whose package name is {@code packageName}.
2474 Returns all top level classes whose package name is {@code packageName} or starts with {@code packageName} followed by a '.'.
2475 Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in the order of a breadth-first traversal. That is, all the nodes of depth 0 are returned, then depth 1, then 2, and so on. <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in the order {@code abcdef} (assuming successors are returned in alphabetical order). {@snippet : b ---- a ---- d | | | | e ---- c ---- f } <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change while iteration is in progress. <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will compute its next element on the fly. It is thus possible to limit the traversal to a certain number of nodes as follows: {@snippet : Iterables.limit(Traverser.forGraph(graph).breadthFirst(node), maxNumberOfNodes); } <p>See <a href="https://en.wikipedia.org/wiki/Breadth-first_search">Wikipedia</a> for more info. @throws IllegalArgumentException if {@code startNode} is not an element of the graph
2476 Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in the order of a depth-first pre-order traversal. "Pre-order" implies that nodes appear in the {@code Iterable} in the order in which they are first visited. <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in the order {@code abecfd} (assuming successors are returned in alphabetical order). {@snippet : b ---- a ---- d | | | | e ---- c ---- f } <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change while iteration is in progress. <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will compute its next element on the fly. It is thus possible to limit the traversal to a certain number of nodes as follows: {@snippet : Iterables.limit( Traverser.forGraph(graph).depthFirstPreOrder(node), maxNumberOfNodes); } <p>See <a href="https://en.wikipedia.org/wiki/Depth-first_search">Wikipedia</a> for more info. @throws IllegalArgumentException if {@code startNode} is not an element of the graph
2477 Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in the order of a depth-first post-order traversal. "Post-order" implies that nodes appear in the {@code Iterable} in the order in which they are visited for the last time. <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in the order {@code fcebda} (assuming successors are returned in alphabetical order). {@snippet : b ---- a ---- d | | | | e ---- c ---- f } <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change while iteration is in progress. <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will compute its next element on the fly. It is thus possible to limit the traversal to a certain number of nodes as follows: {@snippet : Iterables.limit( Traverser.forGraph(graph).depthFirstPostOrder(node), maxNumberOfNodes); } <p>See <a href="https://en.wikipedia.org/wiki/Depth-first_search">Wikipedia</a> for more info. @throws IllegalArgumentException if {@code startNode} is not an element of the graph
2478 Scans this location and returns all scanned resources.
2479 Returns a {@code ClassPath} representing all classes and resources loadable from {@code classloader} and its ancestor class loaders. <p><b>Warning:</b> {@code ClassPath} can find classes and resources only from: <ul> <li>{@link URLClassLoader} instances' {@code file:} URLs <li>the {@linkplain ClassLoader#getSystemClassLoader() system class loader}. To search the system class loader even when it is not a {@link URLClassLoader} (as in Java 9), {@code ClassPath} searches the files from the {@code java.class.path} system property. </ul> @throws IOException if the attempt to read class path resources (jar files or directories) failed.
2480 Explicitly specifies the return type of this {@code Invokable}. For example: {@snippet : Method factoryMethod = Person.class.getMethod("create"); Invokable<?, Person> factory = Invokable.of(getNameMethod).returning(Person.class); }
2481 Gets the value from an entry. Returns null if the entry is invalid, partially-collected, loading, or expired.
2482 Performs routine cleanup prior to executing a write. This should be called every time a write thread acquires the segment lock, immediately after acquiring the lock. <p>Post-condition: expireEntries has been run.
2483 Resolves {@code var} using the encapsulated type mapping. If it maps to yet another non-reified type or has bounds, {@code forDependants} is used to do further resolution, which doesn't try to resolve any type variable on generic declarations that are already being resolved. <p>Should only be called and overridden by {@link #resolve(TypeVariable)}.
2484 If the class is parameterized, such as {@link java.util.ArrayList ArrayList}, this returns {@code ArrayList<E>}.
2485 Implemented to support serialization of subclasses.
2486 Returns a {@link Traverser} instance for the file and directory tree. The returned traverser starts from a {@link Path} and will return all files and directories it encounters. <p>The returned traverser attempts to avoid following symbolic links to directories. However, the traverser cannot guarantee that it will not follow symbolic links to directories as it is possible for a directory to be replaced with a symbolic link between checking if the file is a directory and actually reading the contents of that directory. <p>If the {@link Path} passed to one of the traversal methods does not exist or is not a directory, no exception will be thrown and the returned {@link Iterable} will contain a single element: that path. <p>{@link DirectoryIteratorException} may be thrown when iterating {@link Iterable} instances created by this traverser if an {@link IOException} is thrown by a call to {@link #listFiles(Path)}. <p>Example: {@code MoreFiles.fileTraverser().depthFirstPreOrder(Paths.get("/"))} may return the following paths: {@code ["/", "/etc", "/etc/config.txt", "/etc/fonts", "/home", "/home/alice", ...]} @since 23.5
2487 Returns a {@code HostSpecifier} built from the provided {@code specifier}, which is already known to be valid. If the {@code specifier} might be invalid, use {@link #from(String)} instead. <p>The specifier must be in one of these formats: <ul> <li>A domain name, like {@code google.com} <li>A IPv4 address string, like {@code 127.0.0.1} <li>An IPv6 address string with or without brackets, like {@code [2001:db8::1]} or {@code 2001:db8::1} </ul> @throws IllegalArgumentException if the specifier is not valid.
2488 Returns the ancestor of the current domain at the given number of levels "higher" (rightward) in the subdomain list. The number of levels must be non-negative, and less than {@code N-1}, where {@code N} is the number of parts in the domain. <p>TODO: Reasonable candidate for addition to public API.
2489 Creates and returns a new {@code InternetDomainName} by prepending the argument and a dot to the current name. For example, {@code InternetDomainName.from("foo.com").child("www.bar")} returns a new {@code InternetDomainName} with the value {@code www.bar.foo.com}. Only lenient validation is performed, as described {@link #from(String) here}. @throws NullPointerException if leftParts is null @throws IllegalArgumentException if the resulting name is not valid
2490 Indicates whether the argument is a syntactically valid domain name using lenient validation. Specifically, validation against <a href="http://www.ietf.org/rfc/rfc3490.txt">RFC 3490</a> ("Internationalizing Domain Names in Applications") is skipped. <p>The following two code snippets are equivalent: {@snippet : domainName = InternetDomainName.isValid(name) ? InternetDomainName.from(name) : DEFAULT_DOMAIN; } {@snippet : try { domainName = InternetDomainName.from(name); } catch (IllegalArgumentException e) { domainName = DEFAULT_DOMAIN; } } @since 8.0 (previously named {@code isValidLenient})
2491 Returns a {@code Collector} accumulating entries into an {@code ImmutableListMultimap}. Each input element is mapped to a key and a stream of values, each of which are put into the resulting {@code Multimap}, in the encounter order of the stream and the encounter order of the streams of values. <p>Example: {@snippet : static final ImmutableListMultimap<Character, Character> FIRST_LETTER_MULTIMAP = Stream.of("banana", "apple", "carrot", "asparagus", "cherry") .collect( flatteningToImmutableListMultimap( str -> str.charAt(0), str -> str.substring(1).chars().mapToObj(c -> (char) c)); // is equivalent to static final ImmutableListMultimap<Character, Character> FIRST_LETTER_MULTIMAP = ImmutableListMultimap.<Character, Character>builder() .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a')) .putAll('a', Arrays.asList('p', 'p', 'l', 'e')) .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't')) .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's')) .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y')) .build(); } } @since 21.0
2492 Returns an immutable multimap containing a single entry.
2493 Returns an immutable multimap containing the given entries, in order.
2494 Returns an immutable multimap containing the given entries, in order.
2495 Returns an immutable multimap containing the given entries, in order.
2496 Returns an immutable multimap containing the given entries, in order.
2497 Returns an immutable multimap containing the specified entries. The returned multimap iterates over keys in the order they were first encountered in the input, and the values for each key are iterated in the order they were encountered. @throws NullPointerException if any key, value, or entry is null @since 19.0
2498 Creates an index {@code ImmutableListMultimap} that contains the results of applying a specified function to each item in an {@code Iterator} of values. Each value will be stored as a value in the resulting multimap, yielding a multimap with the same size as the input iterator. The key used to store that value in the multimap will be the result of calling the function on that value. The resulting multimap is created as an immutable snapshot. In the returned multimap, keys appear in the order they are first encountered, and the values corresponding to each key appear in the same order as they are encountered. <p>For example, {@snippet : List<String> badGuys = Arrays.asList("Inky", "Blinky", "Pinky", "Pinky", "Clyde"); Function<String, Integer> stringLengthFunction = ...; Multimap<Integer, String> index = Multimaps.index(badGuys.iterator(), stringLengthFunction); System.out.println(index); } <p>prints {@snippet : {4=[Inky], 6=[Blinky], 5=[Pinky, Pinky, Clyde]} } <p>The returned multimap is serializable if its keys and values are all serializable. @param values the values to use when constructing the {@code ImmutableListMultimap} @param keyFunction the function used to produce the key for each value @return {@code ImmutableListMultimap} mapping the result of evaluating the function {@code keyFunction} on each value in the input collection to that value @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code keyFunction} produces {@code null} for any key @since 10.0
2499 <em>Replaces</em> all parameters with the given attribute with parameters using the given values. If there are no values, any existing parameters with the given attribute are removed. @throws IllegalArgumentException if either {@code attribute} or {@code values} is invalid @since 24.0
2500 Returns a {@link Collector} that accumulates elements into an {@code ImmutableSetMultimap} whose keys and values are the result of applying the provided mapping functions to the input elements. <p>For streams with defined encounter order (as defined in the Ordering section of the {@link java.util.stream} Javadoc), that order is preserved, but entries are <a href="ImmutableMultimap.html#iteration">grouped by key</a>. <p>Example: {@snippet : static final Multimap<Character, String> FIRST_LETTER_MULTIMAP = Stream.of("banana", "apple", "carrot", "asparagus", "cherry") .collect(toImmutableSetMultimap(str -> str.charAt(0), str -> str.substring(1))); // is equivalent to static final Multimap<Character, String> FIRST_LETTER_MULTIMAP = new ImmutableSetMultimap.Builder<Character, String>() .put('b', "anana") .putAll('a', "pple", "sparagus") .putAll('c', "arrot", "herry") .build(); } @since 21.0
2501 {@inheritDoc} <p>Because an inverse of a set multimap cannot contain multiple pairs with the same key and value, this method returns an {@code ImmutableSetMultimap} rather than the {@code ImmutableMultimap} specified in the {@code ImmutableMultimap} class.
2502 Marks the {@link State} as ready to receive transitions. Returns true if no transitions have been observed yet.
2503 Provides a snapshot of the current state of all the services under management. <p>N.B. This snapshot is guaranteed to be consistent, i.e. the set of states returned will correspond to a point in time view of the services. @since 29.0 (present with return type {@code ImmutableMultimap} since 14.0)
2504 Returns a map with the contents of this {@code FluentIterable} as its {@code values}, indexed by keys derived from those values. In other words, each input value produces an entry in the map whose key is the result of applying {@code keyFunction} to that value. These entries appear in the same order as they appeared in this fluent iterable. Example usage: {@snippet : Color red = new Color("red", 255, 0, 0); ... FluentIterable<Color> allColors = FluentIterable.from(ImmutableSet.of(red, green, blue)); Map<String, Color> colorForName = allColors.uniqueIndex(toStringFunction()); assertThat(colorForName).containsEntry("red", red); } <p>If your index may associate multiple values with each key, use {@link #index(Function) index}. <p><b>{@code Stream} equivalent:</b> {@code stream.collect(ImmutableMap.toImmutableMap(keyFunction, v -> v))}. @param keyFunction the function used to produce the key for each value @return a map mapping the result of evaluating the function {@code keyFunction} on each value in this fluent iterable to that value @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one value in this fluent iterable @throws NullPointerException if any element of this iterable is {@code null}, or if {@code keyFunction} produces {@code null} for any key @since 14.0
2505 Creates an {@code ArrayTable} with the mappings in the provided table. <p>If {@code table} includes a mapping with row key {@code r} and a separate mapping with column key {@code c}, the returned table contains a mapping with row key {@code r} and column key {@code c}. If that row key / column key pair in not in {@code table}, the pair maps to {@code null} in the generated table. <p>The returned table allows subsequent {@code put} calls with the row keys in {@code table.rowKeySet()} and the column keys in {@code table.columnKeySet()}. Calling {@link #put} with other keys leads to an {@code IllegalArgumentException}. <p>The ordering of {@code table.rowKeySet()} and {@code table.columnKeySet()} determines the row and column iteration ordering of the returned table. @throws NullPointerException if {@code table} has a null key
2506 Returns a newly-created {@code ImmutableNetwork} based on the contents of this {@code Builder}.
2507 Returns a newly-created {@code ImmutableValueGraph} based on the contents of this {@code Builder}.
2508 Constructs a new type token of {@code T} while resolving free type variables in the context of {@code declaringClass}. <p>Clients create an empty anonymous subclass. Doing so embeds the type parameter in the anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure. <p>For example: {@snippet : abstract class IKnowMyType<T> { TypeToken<T> getMyType() { return new TypeToken<T>(getClass()) {}; } } new IKnowMyType<String>() {}.getMyType() => String }
2509 Builds a new min-max priority queue using the previously specified options, and having no initial contents.
2510 Creates a new min-max priority queue using natural order, no maximum size, and initially containing the given elements.
2511 Returns the set of nodes that are reachable from {@code node}. Node B is defined as reachable from node A if there exists a path (a sequence of adjacent outgoing edges) starting at node A and ending at node B. Note that a node is always reachable from itself via a zero-length path. <p>This is a "snapshot" based on the current topology of {@code graph}, rather than a live view of the set of nodes reachable from {@code node}. In other words, the returned {@link Set} will not be updated after modifications to {@code graph}. @throws IllegalArgumentException if {@code node} is not present in {@code graph} @since 33.1.0 (present with return type {@code Set} since 20.0)
2512 Returns the internal entry for the specified key. The entry may be loading, expired, or partially collected.
2513 This method is a convenience for testing. Code should call {@link Segment#getLiveValue} instead.
2514 Returns a newly inserted {@code LoadingValueReference}, or null if the live value reference is already loading.
2515 Performs routine cleanup following a read. Normally cleanup happens during writes. If cleanup is not observed after a sufficient number of reads, try cleaning up from the read thread.
2516 Resolves {@code var} using the encapsulated type mapping. If it maps to yet another non-reified type or has bounds, {@code forDependants} is used to do further resolution, which doesn't try to resolve any type variable on generic declarations that are already being resolved. <p>Should only be called and overridden by {@link #resolve(TypeVariable)}.
2517 Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a combining function to their values. The function can use a {@link DeferredCloser} to capture objects to be closed when the pipeline is done. <p>If this combiner was returned by a {@link #whenAllSucceed} method and any of the inputs fail, so will the returned step. <p>If the combiningCallable throws a {@code CancellationException}, the pipeline will be cancelled. <p>If the combiningCallable throws an {@code ExecutionException}, the cause of the thrown {@code ExecutionException} will be extracted and used as the failure of the derived step.
2518 Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a {@code ClosingFuture}-returning function to their values. The function can use a {@link DeferredCloser} to capture objects to be closed when the pipeline is done (other than those captured by the returned {@link ClosingFuture}). <p>If this combiner was returned by a {@link #whenAllSucceed} method and any of the inputs fail, so will the returned step. <p>If the combiningCallable throws a {@code CancellationException}, the pipeline will be cancelled. <p>If the combiningCallable throws an {@code ExecutionException}, the cause of the thrown {@code ExecutionException} will be extracted and used as the failure of the derived step. <p>If the combiningCallable throws any other exception, it will be used as the failure of the derived step. <p>If an exception is thrown after the combiningCallable creates a {@code ClosingFuture}, then none of the closeable objects in that {@code ClosingFuture} will be closed. <p>Usage guidelines for this method: <ul> <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a {@code ClosingFuture}. If possible, prefer calling {@link #call(CombiningCallable, Executor)} instead, with a function that returns the next value directly. <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()} for every closeable object this step creates in order to capture it for later closing. <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code ClosingFuture} call {@link #from(ListenableFuture)}. </ul> <p>The same warnings about doing heavyweight operations within {@link ClosingFuture#transformAsync(AsyncClosingFunction, Executor)} apply here.
2519 Attempts to return a {@code HostSpecifier} for the given string, throwing an exception if parsing fails. Always use this method in preference to {@link #fromValid(String)} for a specifier that is not already known to be valid. @throws ParseException if the specifier is not valid.
2520 Determines whether {@code specifier} represents a valid {@link HostSpecifier} as described in the documentation for {@link #fromValid(String)}.
2521 Returns the {@linkplain #isPublicSuffix() public suffix} portion of the domain name, or {@code null} if no public suffix is present. @since 6.0
2522 Returns the portion of this domain name that is one level beneath the {@linkplain #isPublicSuffix() public suffix}. For example, for {@code x.adwords.google.co.uk} it returns {@code google.co.uk}, since {@code co.uk} is a public suffix. Similarly, for {@code myblog.blogspot.com} it returns the same domain, {@code myblog.blogspot.com}, since {@code blogspot.com} is a public suffix. <p>If {@link #isTopPrivateDomain()} is true, the current domain name instance is returned. <p>This method can be used to determine the probable highest level parent domain for which cookies may be set, though even that depends on individual browsers' implementations of cookie controls. @throws IllegalStateException if this domain does not end with a public suffix @since 6.0
2523 Returns the {@linkplain #isRegistrySuffix() registry suffix} portion of the domain name, or {@code null} if no registry suffix is present. @since 23.3
2524 Returns the portion of this domain name that is one level beneath the {@linkplain #isRegistrySuffix() registry suffix}. For example, for {@code x.adwords.google.co.uk} it returns {@code google.co.uk}, since {@code co.uk} is a registry suffix. Similarly, for {@code myblog.blogspot.com} it returns {@code blogspot.com}, since {@code com} is a registry suffix. <p>If {@link #isTopDomainUnderRegistrySuffix()} is true, the current domain name instance is returned. <p><b>Warning:</b> This method should not be used to determine whether a domain is probably the highest level for which cookies may be set. Use {@link #isTopPrivateDomain()} for that purpose. @throws IllegalStateException if this domain does not end with a registry suffix @since 23.3
2525 Returns an {@code InternetDomainName} that is the immediate ancestor of this one; that is, the current domain with the leftmost part removed. For example, the parent of {@code www.google.com} is {@code google.com}. @throws IllegalStateException if the domain has no parent, as determined by {@link #hasParent}
2526 Returns a {@link Collector} that accumulates elements into an {@code ImmutableListMultimap} whose keys and values are the result of applying the provided mapping functions to the input elements. <p>For streams with defined encounter order (as defined in the Ordering section of the {@link java.util.stream} Javadoc), that order is preserved, but entries are <a href="ImmutableMultimap.html#iteration">grouped by key</a>. <p>Example: {@snippet : static final Multimap<Character, String> FIRST_LETTER_MULTIMAP = Stream.of("banana", "apple", "carrot", "asparagus", "cherry") .collect(toImmutableListMultimap(str -> str.charAt(0), str -> str.substring(1))); // is equivalent to static final Multimap<Character, String> FIRST_LETTER_MULTIMAP = new ImmutableListMultimap.Builder<Character, String>() .put('b', "anana") .putAll('a', "pple", "sparagus") .putAll('c', "arrot", "herry") .build(); } @since 21.0
2527 Returns an immutable multimap containing a single entry.
2528 Returns an immutable multimap containing the given entries, in order.
2529 Returns an immutable multimap containing the given entries, in the "key-grouped" insertion order described in the <a href="#iteration">class documentation</a>.
2530 Returns an immutable multimap containing the given entries, in the "key-grouped" insertion order described in the <a href="#iteration">class documentation</a>.
2531 Returns an immutable multimap containing the given entries, in the "key-grouped" insertion order described in the <a href="#iteration">class documentation</a>.
2532 Returns an immutable multimap containing the specified entries. The returned multimap iterates over keys in the order they were first encountered in the input, and the values for each key are iterated in the order they were encountered. @throws NullPointerException if any key, value, or entry is null @since 19.0
2533 {@inheritDoc} <p>Because an inverse of a list multimap can contain multiple pairs with the same key and value, this method returns an {@code ImmutableListMultimap} rather than the {@code ImmutableMultimap} specified in the {@code ImmutableMultimap} class. @since 11.0
2534 Creates an index {@code ImmutableListMultimap} that contains the results of applying a specified function to each item in an {@code Iterable} of values. Each value will be stored as a value in the resulting multimap, yielding a multimap with the same size as the input iterable. The key used to store that value in the multimap will be the result of calling the function on that value. The resulting multimap is created as an immutable snapshot. In the returned multimap, keys appear in the order they are first encountered, and the values corresponding to each key appear in the same order as they are encountered. <p>For example, {@snippet : List<String> badGuys = Arrays.asList("Inky", "Blinky", "Pinky", "Pinky", "Clyde"); Function<String, Integer> stringLengthFunction = ...; Multimap<Integer, String> index = Multimaps.index(badGuys, stringLengthFunction); System.out.println(index); } <p>prints {@snippet : {4=[Inky], 6=[Blinky], 5=[Pinky, Pinky, Clyde]} } <p>The returned multimap is serializable if its keys and values are all serializable. @param values the values to use when constructing the {@code ImmutableListMultimap} @param keyFunction the function used to produce the key for each value @return {@code ImmutableListMultimap} mapping the result of evaluating the function {@code keyFunction} on each value in the input collection to that value @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code keyFunction} produces {@code null} for any key
2535 <em>Replaces</em> all parameters with the given attribute with a single parameter with the given value. If multiple parameters with the same attributes are necessary use {@link #withParameters(String, Iterable)}. Prefer {@link #withCharset} for setting the {@code charset} parameter when using a {@link Charset} object. @throws IllegalArgumentException if either {@code attribute} or {@code value} is invalid
2536 <em>Replaces</em> all parameters with the given parameters. @throws IllegalArgumentException if any parameter or value is invalid
2537 Creates a new media type with the given type and subtype. @throws IllegalArgumentException if type or subtype is invalid or if a wildcard is used for the type, but not the subtype.
2538 Parses a media type from its string representation. @throws IllegalArgumentException if the input is not parsable
2539 Constructs a new instance for managing the given services. @param services The services to manage @throws IllegalArgumentException if not all services are {@linkplain State#NEW new} or if there are any duplicate services.
2540 Returns a {@code Collector} accumulating entries into an {@code ImmutableSetMultimap}. Each input element is mapped to a key and a stream of values, each of which are put into the resulting {@code Multimap}, in the encounter order of the stream and the encounter order of the streams of values. <p>Example: {@snippet : static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP = Stream.of("banana", "apple", "carrot", "asparagus", "cherry") .collect( flatteningToImmutableSetMultimap( str -> str.charAt(0), str -> str.substring(1).chars().mapToObj(c -> (char) c)); // is equivalent to static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP = ImmutableSetMultimap.<Character, Character>builder() .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a')) .putAll('a', Arrays.asList('p', 'p', 'l', 'e')) .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't')) .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's')) .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y')) .build(); // after deduplication, the resulting multimap is equivalent to static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP = ImmutableSetMultimap.<Character, Character>builder() .putAll('b', Arrays.asList('a', 'n')) .putAll('a', Arrays.asList('p', 'l', 'e', 's', 'a', 'r', 'g', 'u')) .putAll('c', Arrays.asList('a', 'r', 'o', 't', 'h', 'e', 'y')) .build(); } } @since 21.0
2541 Resolves the given {@code type} against the type context represented by this type. For example: {@snippet : new TypeToken<List<String>>() {}.resolveType( List.class.getMethod("get", int.class).getGenericReturnType()) => String.class }
2542 Creates a new min-max priority queue with default settings: natural order, no maximum size, no initial contents, and an initial expected size of 11.
2543 Refreshes the value associated with {@code key}, unless another thread is already doing so. Returns the newly refreshed value associated with {@code key} if it was refreshed inline, or {@code null} if another thread is performing the refresh or if an error occurs during refresh.
2544 Waits uninterruptibly for {@code newValue} to be loaded, and then records loading stats.
2545 Advances to the given entry. Returns true if the entry was valid, false if it should be skipped.
2546 This method is a convenience for testing. Code should call {@link LocalCache#containsValue} directly.
2547 Creates an index {@code ImmutableListMultimap} that contains the results of applying a specified function to each item in this {@code FluentIterable} of values. Each element of this iterable will be stored as a value in the resulting multimap, yielding a multimap with the same size as this iterable. The key used to store that value in the multimap will be the result of calling the function on that value. The resulting multimap is created as an immutable snapshot. In the returned multimap, keys appear in the order they are first encountered, and the values corresponding to each key appear in the same order as they are encountered. <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.groupingBy(keyFunction))} behaves similarly, but returns a mutable {@code Map<K, List<E>>} instead, and may not preserve the order of entries. @param keyFunction the function used to produce the key for each value @throws NullPointerException if any element of this iterable is {@code null}, or if {@code keyFunction} produces {@code null} for any key @since 14.0
2548 Returns a new instance with the same type and subtype as this instance, with the {@code charset} parameter set to the {@link Charset#name name} of the given charset. Only one {@code charset} parameter will be present on the new instance regardless of the number set on this one. <p>If a charset must be specified that is not supported on this JVM (and thus is not representable as a {@link Charset} instance), use {@link #withParameter}.
2549 Returns a new instance with the same type and subtype as this instance, but without any parameters.
2550 Creates a media type with the "application" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
2551 Creates a media type with the "audio" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
2552 Creates a media type with the "font" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
2553 Creates a media type with the "image" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
2554 Creates a media type with the "text" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
2555 Creates a media type with the "video" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
2556 Returns a newly-created immutable table, or throws an exception if duplicate key pairs were added. @throws IllegalArgumentException if duplicate key pairs were added @since 31.0
2557 Returns the generic superclass of this type or {@code null} if the type represents {@link Object} or an interface. This method is similar but different from {@link Class#getGenericSuperclass}. For example, {@code new TypeToken<StringArrayList>() {}.getGenericSuperclass()} will return {@code new TypeToken<ArrayList<String>>() {}}; while {@code StringArrayList.class.getGenericSuperclass()} will return {@code ArrayList<E>}, where {@code E} is the type variable declared by class {@code ArrayList}. <p>If this type is a type variable or wildcard, its first upper bound is examined and returned if the bound is a class or extends from a class. This means that the returned type could be a type variable too.
2558 Returns the generic interfaces that this type directly {@code implements}. This method is similar but different from {@link Class#getGenericInterfaces()}. For example, {@code new TypeToken<List<String>>() {}.getGenericInterfaces()} will return a list that contains {@code new TypeToken<Iterable<String>>() {}}; while {@code List.class.getGenericInterfaces()} will return an array that contains {@code Iterable<T>}, where the {@code T} is the type variable declared by interface {@code Iterable}. <p>If this type is a type variable or wildcard, its upper bounds are examined and those that are either an interface or upper-bounded only by interfaces are returned. This means that the returned types could include type variables too.
2559 Returns the generic form of {@code superclass}. For example, if this is {@code ArrayList<String>}, {@code Iterable<String>} is returned given the input {@code Iterable.class}.
2560 Returns the result of calling {@link CacheLoader#loadAll}, or null if {@code loader} doesn't implement {@code loadAll}.
2561 Finds the next entry in the current chain. Returns true if an entry was found.
2562 Returns a newly-created immutable table. <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method will throw an exception if there are duplicate key pairs. The {@code build()} method will soon be deprecated. @throws IllegalArgumentException if duplicate key pairs were added
2563 Finds the next entry in the current table. Returns true if an entry was found.
2564 Returns subtype of {@code this} with {@code subclass} as the raw class. For example, if this is {@code Iterable<String>} and {@code subclass} is {@code List}, {@code List<String>} is returned.
2565 Returns an immutable copy of the provided table. <p>The {@link Table#cellSet()} iteration order of the provided table determines the iteration ordering of all views in the returned table. Note that some views of the original table and the copied table may have different iteration orders. For more control over the ordering, create a {@link Builder} and call {@link Builder#orderRowsBy}, {@link Builder#orderColumnsBy}, and {@link Builder#putAll} <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.
2566 Returns a {@code Collector} that accumulates elements into an {@code ImmutableTable}. Each input element is mapped to one cell in the returned table, with the rows, columns, and values generated by applying the specified functions. <p>The returned {@code Collector} will throw a {@code NullPointerException} at collection time if the row, column, or value functions return null on any input. @since 21.0
